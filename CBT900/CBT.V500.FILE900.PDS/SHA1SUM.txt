         TITLE '   S H A 1 S U M  '
************************************************************
*                                                          *
*        'SHA1SUM' TSO COMMAND (31-BIT)                    *
*                                                          *
************************************************************
         SPACE
*        WRITTEN MAY 22 2016 USING MD5SUM AS A TEMPLATE.
*         NOTE: MD5SUM USED 'COUNT' (CBT FILE 300) AS A TEMPLATE.
*        ATTRIBUTES. RE-ENTRANT.
*        UPDATED MAY 27 2016 TO ADD BRIEF AND MULTI KEYWORDS.
*        UPDATED AUG 28 2016 TO IGNORE DS1LSTAR WHICH IS 0 FOR PDSE
*        UPDATED SEP  3 2016 TO SET RETURN CODE 12 IF ANY ERROR
*        UPDATED DEC 27 2017 TO SUPPORT 8-BYTE PREFIX IN Z/OS V2R3
*        UPDATED MAR 18 2019 TO SUPPORT EAV VOLUMES (SEE CHANGES BELOW)
*
*        THIS TSO COMMAND READS THE SPECIFIED SEQUENTIAL DATA SETS
*        OR PDS MEMBERS AND DISPLAYS THE SHA-1 HASH FOR EACH.
*        SHA = SECURE HASH ALGORITHM.
*
*        SYNTAX:
*                SHA1SUM DSNAME
*                SHA1SUM (DSNAME1 DSNAME2 ...)
*        KEYWORDS:
*                RDW - INCLUDE RDW'S
*                LOWER - SHOW RESULTS IN LOWER CASE
*                QUICK - DSNAME IS COMPLETE, NO IMPLIED EXTENSION
*                FILE - DSNAME IS A DDNAME ALREADY ALLOCATED
*                BRIEF - SHOW THE HASH ONLY, WITH NO DSNAME
*                MULTI - SHOW THE HASH AND DSNAME ON SEPARATE LINES
*
*        IF AN UNQUALIFIED DATA SET NAME IS ENTERED, THE
*        CATALOG MUST BE READ TWICE, ONCE TO APPEND A
*        TRAILING QUALIFIER IF NECESSARY, AND AGAIN DURING
*        ALLOCATION. THE USER CAN ELIMINATE THE FIRST BY USING
*        THE FULLY QUALIFIED NAME, PREFIX AND ALL, IN QUOTES,
*        OR BY ENTERING ALL BUT THE PREFIX, WITHOUT QUOTES,
*        PLUS THE KEYWORD 'Q'. THE LATTER IS MUCH SIMPLER
*        AND GIVES THE SAME PERFORMANCE IMPROVEMENT AS A
*        FULLY QUALIFIED NAME.
*
*        THE 'FILE' KEYWORD IS USEFUL FOR READING TEMPORARY
*        DATA SETS.  IT TELLS THE COMMAND TO TREAT THE FIRST
*        OPERAND AS A FILENAME (DDNAME) INSTEAD OF A DSNAME.
*        WHATEVER DATA SET IS CURRENTLY ALLOCATED TO THE
*        FILENAME WILL BE READ (AND QUICKLY, BECAUSE
*        THE COMMAND DOESNT HAVE TO ALLOCATE ANYTHING).
*
*        UNIX FILES THAT ARE PREALLOCATED TO A DDNAME CAN BE
*        READ. FOR EXAMPLE:
*         ALLOC FI(DD1) PATH('/ETC/MAGIC') (BUT USE PATH IN LOWER CASE)
*         SHA?SUM DD1 FILE
*        IF UNIX FILES ARE NOT GIVEN RECFM WHEN ALLOCATED
*        THEY DEFAULT TO RECFM=U, WHICH IS GOOD FOR SHA?SUM.
*        RECFM=F WOULD BE LIKELY TO INTRODUCE PADDING IN THE
*        LAST RECORD, WHICH WOULD CHANGE THE SHA?SUM RESULT.
*
*        NOTE - IF A NON-EXISTENT MEMBER OF A PDS IS SPECIFIED,
*        THE RESULTING 013-18 ABEND IS TRAPPED BY A DCB ABEND
*        EXIT, BUT A MESSAGE IS ISSUED BY OPEN ANYWAY. THIS
*        METHOD IS USED BECAUSE THE ADDITIONAL OVERHEAD
*        OF ALLOCATING THE PDS AND DOING A 'BLDL' WOULD
*        DEGRADE THE PERFORMANCE UNACCEPTABLY.
*
*        PROBLEMS FIXED:
*        . IF THE SPECIFIED DDNAME (WITH 'FILE' KEYWORD) IS
*          A MEMBER OF A PDS, ONLY THE PDS NAME WAS SHOWN.
*          ADDED CODE TO GET MEMBER NAME FROM JFCBELNM.
*        . IF THE SPECIFIED DDNAME (WITH 'FILE' KEYWORD) IS
*          A UNIX PATH, ONLY "...PATH=.SPECIFIED..." IS SHOWN,
*          THAT'S WHAT IS IN THE JFCB. ADDED ARL TO GET PATH.
*
*        IMPROVEMENTS NEEDED:
*        . ALLOW PATH TO BE SPECIFIED AND ALLOCATE IT.
*        . IF THE SPECIFIED DDNAME (WITH 'FILE' KEYWORD) IS
*          A CONCATENATION, SHOW MORE THAN THE FIRST DSN OR PATH.
*
* CHNGE LOG: 02JUN92 - INCLUDED 'OBTAIN' MACRO IN THE SOURCE. WITH
*                      MVS/XA 2.2.3, THE MACRO IS ONLY AVAILABLE IN
*                      'SYS1.AMACLIB' (SOUNDS LIKE IBM IS TRYING TO
*                      TELL US SOMETHING).  JIM MARSHALL         JDM1
*
* CHNGE LOG: 12OCT13 - MD5SUM COMMAND CREATED FROM SOURCE OF 'COUNT'.
*                      RDW'S ARE NOT INCLUDED IN THE MD5 AT THIS TIME,
*                      AS A RESULT, 2 FILES OF VARIABLE-LENGTH RECORDS,
*                      ONE WITH 2 RECORDS "AB" AND "CD" AND THE OTHER
*                      ONE WITH 2 RECORDS "ABC' AND "D" WILL HAVE THE
*                      SAME MD5 VALUE.
*
* CHNGE LOG: 11NOV13 - SUPPORT LIST OF DSNAMES, SHOW NAME AFTER MD5.
*
* CHNGE LOG: 12NOV13 - CONVERT TO 31-BIT.
*
* CHNGE LOG: 15NOV13 - ALLOW NON-DASD DEVTYPE INCLUDING UNIX AND DUMMY.
*                      SHOW UNIX FILE NAME IF DDNAME ALLOCATED TO PATH.
*                      SHOW MEMBER NAME IF DDNAME ALLOCATED TO MEMBER.
*
* CHNGE LOG: 13MAR19 - REVERSED THE CHANGE FROM JUNE 02, 1992 AND USED
*                      THE ORIGINAL OBTAIN MACRO AGAIN. ADDITIONALLY
*                      ADDED THE EADSCB=OK MACRO PARAMETER.
*
*--------------------------------------------------------------------
*         MACRO                                                  JDM1
*&NAME    OBTAIN &LIST,&DUMMY=                                   JDM1
*         AIF   (T'&LIST EQ 'O').E1                              JDM1
*&NAME    IHBINNRA &LIST                 LOAD REG 1              JDM1
*         SVC   27                       ISSUE OBTAIN SVC        JDM1
*         MEXIT                                                  JDM1
*.E1      IHBERMAC 34                    LIST ADDR MISSING       JDM1
*         MEND                                                   JDM1
*--------------------------------------------------------------------
*         INTERCEPT 'LINK' MACRO IMBEDDED IN STACK MACRO
*         TO MAKE SF=(E,LINKAREA) THE DEFAULT.
         MACRO
&NAME    LINK  &EP=,&SF=(E,LINKAREA)
&NAME    LA    15,&SF(2)
         LA    0,*+8
         B     *+12
         DC    CL8'&EP'
         ST    0,0(0,15)
         SVC   6             ISSUE LINK SVC
         MEND
         SPACE
SHA1SUM  START
SHA1SUM  AMODE 31
SHA1SUM  RMODE 31
         USING *,R12,R11
         B     @PROLOG-*(,R15)
         DC    AL1(7),CL7'SHA1SUM'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE31  DC    0F'0',AL1(0),AL3(@DATA31L)
@SIZE24  DC    0F'0',AL1(1),AL3(@DATA24L)
@PROLOG  STM   14,12,12(13)
         LR    R12,R15             BASE
         LA    R15,1
         LA    R11,4095(R15,R12)   BASE
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE31
         GETMAIN RU,LV=(0),SP=1,LOC=31
         LR    R9,R1
         USING @DATA31,R9
         ST    13,4(,1)            CHAIN SAVEAREA
         ST    1,8(,13)            CHAIN SAVEAREA
         LR    13,1                NEW SAVEAREA
         SPACE
         L     R0,@SIZE24
         GETMAIN R,LV=(0)
         LR    R10,R1
         USING @DATA24,R10
         SPACE
         MVI   STATUS,0
         XC    LINKAREA(8),LINKAREA
         SLR   R15,R15
         STH   R15,RETCODE         SET RETCODE = 0
         ST    R15,KOUNT
         ST    R15,KOUNTSP
         SPACE
************************************************************
*                                                          *
*        SET UP IOPL FOR PUTLINE                           *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL
         SPACE
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLOADX            BRANCH AROUND LOAD
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
************************************************************
*                                                          *
*        SET UP PPL FOR PARSE                              *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=A(SHASMPCL)
*        LA    R0,PCLADDR
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         XC    MYANS(4),MYANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE 1
************************************************************
*                                                          *
*        CALL THE PARSE SERVICE ROUTINE                    *
*                                                          *
************************************************************
         SPACE
         LR    R1,R15              POINT TO PPL
*        CALLTSSR EP=IKJPARS
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15
         BZ    PARSEOK
         LA    R1,MSG01
         LA    R0,L'MSG01
         BAL   R14,PUTMSG
         LA    R15,12
         B     EXIT
PARSEOK  EQU   *
         SPACE
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
         MVC   OPTR,RDWKW+1
         SPACE
************************************************************
*                                                          *
*        GET THE FIRST OR NEXT DSN IN THE LIST             *
*                                                          *
************************************************************
         SPACE
         LA    R6,DSN
         ST    R6,DSL
         B     FIRSTDSN
NEXTDSN  L     R6,DSL
         CLI   24(R6),X'FF'        END OF DSN LIST?
         BE    DONE
         L     R6,24(,R6)          POINT TO NEXT ENTRY
         ST    R6,DSL
FIRSTDSN SR    R0,R0
         ST    R0,KOUNT
         SPACE
************************************************************
*                                                          *
*        QUALIFY THE DSNAME IF NECESSARY                   *
*                                                          *
************************************************************
         SPACE
         TM    6(R6),X'80'         IS DATASET NAME SPECIFIED?
         BO    OKDSN               YES - BRANCH
         LA    R1,MSG05            NO - JUST MEMBER NAME
         LA    R0,L'MSG05
         BAL   R14,PUTMSG
         B     NEXTD12
OKDSN    EQU   *
         LA    R15,DSNAME+2
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         SLR   R1,R1
         STH   R1,DSNAME           ZERO DSNAME LENGTH
         TM    6(R6),X'40'         IS DSN QUOTED?
         BO    NOPREF              YES, SKIP PREFIXING
         CLI   FILEKW+1,1          DSN TO BE TREATED AS DDNAME
         BE    NOPREF              YES, SKIP PREFIXING
         L     R14,CPPLUPT         POINT TO UPT
         USING UPT,R14
*         CHECK UPT FOR 8-BYTE PREFIX - Z/OS V2R3.
         CLI   UPTPREFX,C'>'      IF PREFIX IS '>7BYTES' (8 BYTES)
         BNE   PREF07                THEN
         IC    R1,UPTPREFL+18        GET UPTPRF8L (SHOULD ALWAYS BE 8)
         LTR   R1,R1                 IS IT ZERO
         BZ    NOPREF                YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),UPTPREFX+17  COPY UPTPREF8
         EX    R1,*-6              MOVE USERID TO DSNAME AREA
         B     PREFDONE
PREF07   EQU   *
         IC    R1,UPTPREFL         GET LENGTH OF PREFIX
         LTR   R1,R1               IS IT ZERO
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),UPTPREFX
         EX    R1,*-6              MOVE USERID TO DSNAME AREA
PREFDONE EQU   *
         DROP  R14                 UPT
         LA    R15,0(R1,R15)       POINT PAST USERID
         MVI   0(R15),C'.'         APPEND PERIOD
         LA    R15,1(,R15)         POINT PAST PERIOD
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         STH   R1,DSNAME           STORE LENGTH OF USERID PLUS 1
NOPREF   EQU   *
         LH    R1,4(,R6)           GET LENGTH
         LR    R0,R1
         AH    R0,DSNAME           ADD LENGTH OF PREFIX OR ZERO
         STH   R0,DSNAME           SET COMBINED LENGTH
         L     R14,0(,R6)          POINT TO DSN VALUE
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   0(0,R15),0(R14)     (EXECUTED)
         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)
         SPACE
************************************************************
*                                                          *
*        IF 'FILE' KEYWORD IS SPECIFIED,                   *
*        GET DSNAME FROM JFCB USING FILE NAME.             *
*                                                          *
************************************************************
         SPACE
         CLI   FILEKW+1,1          'FILE' SPECIFIED?
         BNE   NOFILE              NO, BRANCH
         CLI   DSNAME+1,8          IS LENGTH 8 OR LESS
         BH    FILERR1             NO, BRANCH
         DEVTYPE DSNAME+2,DEVDATA  GET DEVICE TYPE
         LTR   R15,R15             WAS FILENAME VALID
         BNZ   FILERR2             NO, BRANCH
*        CLC   DEVDATA(8),=X'0000010300007FF8'
*        BE    DEVOK
*        TM    DEVDATA+2,X'20'     DIRECT ACCESS
*        BZ    FILERR3             NO, BRANCH
DEVOK    LA    R4,DYNDCBW
         MVC   0(DYNDCBL,R4),DYNDCB
         XC    DSNAME(2),DSNAME
         XC    MEMLEN,MEMLEN
         LA    R0,JFCB
         LA    R1,DYNEXLST
         ST    R0,0(,R1)
         MVI   0(R1),X'07'
         LA    R14,MYARL           ALLOCATION RETRIEVAL LIST
         ST    R14,4(,R1)
         MVI   4(R1),X'13'+X'80'
         ST    R1,DCBEXLST-IHADCB(,R4)
         USING ARL,R14
         XC    0(36,R14),0(R14)
         MVI   ARLLEN+1,36
         MVC   ARLIDENT,=C'AR'
         OI    ARLOPT1,ARLLANY+ARLUSS
         MVC   40(8,R4),DSNAME+2   DCBDDNAM
         MVC   DDSAVE,DSNAME+2
         MVI   RDJFW,X'80'
         RDJFCB ((R4)),MF=(E,RDJFW)
         LA    R14,MYARL
         L     R1,ARLAREA
         LTR   R1,R1
         BZ    NOARA
         L     R0,ARLRTRVD
         DROP  R14                 ARL
         USING ARA,R1
LOOPARA  TM    ARAFLG,ARAXINF
         BZ    DONEARA
         SR    R15,R15
         IC    R15,ARAXINOF
         SLL   R15,3
         AR    R15,R1
         USING ARAXINFO,R15
         SR    R14,R14
         ICM   R14,3,ARAPATHO      GET OFFSET TO PATH LEN
         BZ    DONEARA
         AR    R14,R15
         DROP  R15                 ARAXINLN
         SR    R15,R15
         ICM   R15,3,0(R14)        GET ARAPATHLEN
         CH    R15,=H'44'
         BNH   *+8
         LA    R15,44              JUST SHOW FIRST 44 FOR NOW
         STH   R15,DSNAME
         BCTR  R15,0
         B     *+10
         MVC   DSNAME+2(0),2(R14)  ARAPATHNAM
         EX    R15,*-6
DONEARA  LA    R14,MYARL           PREPARE FOR FREEMAIN
         USING ARL,R14
         SR    R15,R15             PREPARE FOR FREEMAIN
         IC    R15,ARLPOOL
         SR    R0,R0
         ICM   R0,7,ARLRLEN
         L     R1,ARLAREA
         DROP  R14                 ARL
         FREEMAIN RU,LV=(0),SP=(R15),A=(1)
NOARA    CLC   DSNAME(2),=H'0'
         BNE   FILESPEC
         MVC   DSNAME+2(44),JFCB
         LA    R1,DSNAME+45        LAST CHAR OF DSNAME
         LA    R0,44               INITIAL LENGTH
FILEA    CLI   0(R1),C' '          IS THIS LAST NONBLANK
         BNE   FILEB               YES, BRANCH
         BCTR  R1,0                BACK UP 1 CHARACTER
         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH
FILEB    STH   R0,DSNAME           STORE LENGTH OF DSNAME
*        MVC   VOLUME(6),JFCB+118  GET VOLUME FROM JFCB
         MVC   MEMNAME,JFCB+44     JFCBELNM IN IEFJFCBN
         LA    R1,MEMNAME+7        LAST CHAR OF MEMBER NAME
         LA    R0,8
MEMA     CLI   0(R1),C' '
         BNE   MEMB
         BCTR  R1,0
         BCT   R0,MEMA
MEMB     STH   R0,MEMLEN
         B     FILESPEC
FILERR1  LA    R0,MSG14A
         B     FILERR
FILERR2  LA    R0,MSG14B
         B     FILERR
FILERR3  LA    R0,MSG14C
FILERR   MVC   MSGWK(L'MSG14),MSG14
         LA    R15,MSGWK+L'MSG14
         LA    R14,DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         B     *+10
         MVC   MSGWK+L'MSG14(0),2(R14)
         EX    R1,*-6
         LA    R15,1(R1,R15)
         LR    R14,R0 POINT TO MSG14A, B, OR C
         MVC   0(L'MSG14A,R15),0(R14)
         LA    R0,L'MSG14+L'MSG14A+1(,R1)
         LA    R1,MSGWK
         BAL   R14,PUTMSG
         B     QUITD12
NOFILE   EQU   *
         TM    6(R6),X'40'         IS IT QUOTED?
         BO    DEFX                YES - SKIP DEFAULT SERVICE
         CLI   QUICKW+1,1          QUICK SPECIFIED
         BE    DEFX                YES, USER ENTERED ALL BUT PREFIX
         SPACE
************************************************************
*                                                          *
*        DEFAULT SERVICE ROUTINE TO GET QUALIFIERS         *
*                                                          *
************************************************************
         SPACE
*              ALL INPUT TO IKJEHDEF MUST BE BELOW THE LINE
         MVC   DSNAME24(46),DSNAME
         LA    R15,MYIOPL24
         USING IOPL,R15
         LA    R14,MYIOPL
         MVC   IOPLUPT(4),IOPLUPT-IOPL(R14)
         MVC   IOPLECT(4),IOPLECT-IOPL(R14)
         LA    R0,MYECB24
         ST    R0,IOPLECB
         XC    MYECB24,MYECB24
         LA    R14,MYDFPB
         ST    R14,IOPLIOPB
         USING DFPB,R14
         XC    0(20,R14),0(R14)
         LA    R0,DSNAME24
         ST    R0,DFPBDSN
         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI
         MVC   DFPBPSCB,CPPLPSCB
*        MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME
         DROP  R14                 DFPB
         DROP  R15                 IOPL
         SPACE
         LR    R1,R15              POINT TO IOPL
         LA    R13,SAVE24          POINT TO SAVEAREA BELOW THE LINE
         L     R15,16              CVTPTR
         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   EHDEFLNK               THEN DO LINK, NOT CALL
         L     R15,736(,R15)       CVTEHDEF
         BALR  R14,R15             CALL IKJEHDEF
         B     EHDEFEXT            SKIP AROUND LINK
EHDEFLNK EQU   *
         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)
EHDEFEXT EQU   *
         SPACE
         LR    R13,R9              RESTORE SAVEARE POINTER
         B     DEFCODE(R15)
DEFCODE  B     DEF00               SUCCESS
         B     NEXTD12              MSG ALREADY ISSUED
         B     DEF08               INVALID NAME GT 44
         B     NEXTD12              MSG ALREADY ISSUED
         B     DEF16               NOT IN CATALOG
         B     DEF20               NOT IN CATALOG
         B     DEF24               IMPOSSIBLE
         B     DEF28               COMMAND SYSTEM ERROR
         B     DEF32               IMPOSSIBLE
         B     DEF36               ?
DEF08    EQU   *
DEF16    EQU   *
         B     DEF24
DEF20    EQU   *
LOCERR   EQU   *
         MVC   MSGWK(L'MSG02),MSG02
         LA    R15,MSGWK+L'MSG02
         LA    R14,DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         B     *+10
         MVC   MSGWK+L'MSG02(0),2(R14)
         EX    R1,*-6
         LA    R15,1(R1,R15)
         MVC   0(L'MSG02A,R15),MSG02A
         LA    R0,L'MSG02+L'MSG02A+1(,R1)
         LA    R1,MSGWK
         BAL   R14,PUTMSG
         B     NEXTD12
DEF24    EQU   *
DEF28    EQU   *
DEF32    EQU   *
DEF36    EQU   *
         LA    R1,MSG03
         LA    R0,L'MSG03
         BAL   R14,PUTMSG
NEXTD12  MVI   RETCODE+1,12
         B     NEXTDSN
         SPACE
DEF00    MVC   DSNAME(46),DSNAME24
DEFX     EQU   *
         SPACE
************************************************************
*                                                          *
*        ALLOCATE THE DATASET                              *
*                                                          *
************************************************************
         SPACE
         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R15,MYDAPB
         ST    R15,DAPLDAPB
         DROP  R1                  DAPL
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R0,DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,=CL8' '
         MVC   DA08SER,=CL8' '
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         TM    14(R6),X'80'        MEMBER SPECIFIED?
         BZ    MEMBX               NO - BRANCH
         LH    R1,12(,R6)          GET LENGTH OF MEMBER
         STH   R1,MEMLEN
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,8(,R6)          GET ADDRESS OF MEMBER NAME
         B     *+10
         MVC   DA08MNM(0),0(R14)   MOVE MEMBER NAME
         EX    R1,*-6
         MVC   MEMNAME,DA08MNM
MEMBX    EQU   *
         TM    22(R6),X'80'        PASSWORD SPECIFIED?
         BZ    PASSX               NO - BRANCH
         LH    R1,20(,R6)          GET LENGTH OF PSWD
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,16(,R6)         GET ADDRESS OF PSWD
         B     *+10
         MVC   DA08PSWD(0),0(R14)  MOVE PSWD
         EX    R1,*-6
PASSX    EQU   *
         LA    R1,MYDAPL
         SPACE
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BZ    OKDAIR
         BAL   R14,DAIRFAIL
         B     NEXTD12
OKDAIR   EQU   *
         OI    STATUS,X'40'        TELL CLEANUP TO FREE IT
         LA    R15,MYDAPB
         MVC   DDSAVE,DA08DDN
         TM    DA08DSO,X'40'       IS DSORG SEQUENTIAL?
         BO    OKDSORG             YES - BRANCH
         TM    DA08DSO,X'02'       IS DSORG PARTITIONED?
         BO    OKDSORGP            YES, BRANCH
*
*              DSORG IS NEITHER PS NOR PO
*              ISAM=X'80' DA=X'20' VSAM=X'00' NONE=X'00'
*
ERRDSORG LA    R1,MSG06
         LA    R0,L'MSG06
         BAL   R14,PUTMSG
         B     QUITD12
OKDSORGP EQU   *
         CLC   DA08MNM,=CL8' '     WAS MEMBER SPECIFIED?
         BNE   OKDSORG             YES - BRANCH
         LA    R1,MSG07
         LA    R0,L'MSG07
         BAL   R14,PUTMSG
         B     NEXTD12
OKDSORG  EQU   *
         DROP  R15                 DAPB08
         SPACE
************************************************************
*                                                          *
*        CHECK FORMAT-1 DSCB FOR EMPTY DATA SET            *
*                                                          *
************************************************************
         SPACE
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,12(,R1)          TIOT
         LA    R1,24(,R1)          TOIENTRY
DDLOOP   CLI   0(R1),0             END OF TIOT
         BE    QUITDSN             YES, BRANCH (NEVER HAPPENS)
         CLC   4(8,R1),DDSAVE      DOES DDNAME MATCH
         BE    DDFOUND
         SLR   R15,R15
         IC    R15,0(,R1)
         LA    R1,0(R15,R1)
         B     DDLOOP
DDFOUND  L     R15,16(,R1)         TIOEFSRT-1
         N     R15,=A(X'00FFFFFF') CLEAR HIGH 8 BITS
         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?
         BZ    OBTX                NO, BYPASS OBTAIN
         MVC   VOLSER,28(R15)      UCBVOLI
OBTDSCB  LA    R1,OBTAINW
         MVC   0(OBTAINL,R1),OBTAIN
         LA    R0,DSNAME+2         DSN FOR OBTAIN
         ST    R0,4(,R1)
         LA    R0,VOLSER           VOLUME FOR OBTAIN
         ST    R0,8(,R1)
         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN
         ST    R0,12(,R1)
         OBTAIN (1),EADSCB=OK
         LTR   R15,R15             WAS OBTAIN SUCCESSFUL
         BZ    OKDSCB              YES, BRANCH
         SPACE
*               OBTAIN HAS FAILED. HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL? ONE WAY IT
*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY
*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL
*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW
*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.
         SPACE
         TM    STATUS,X'08'        HAS LOCATE BEEN TRIED ALREADY?
         BZ    ALIAS               NO, GO TRY IT
ERROBT   LA    R1,MSG09            UNABLE TO OBTAIN DSCB
         LA    R0,L'MSG09
         BAL   R14,PUTMSG
         MVI   RETCODE+1,12
         B     QUITDSN
ALIAS    OI    STATUS,X'08'        TRIP THE SWITCH
         LA    R1,LOCATEW
         MVC   0(LOCATEL,R1),LOCATE
         LA    R0,DSNAME+2         DSNAME FOR LOCATE
         ST    R0,4(,R1)
         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE
         ST    R0,12(,R1)
         LOCATE (1)
         LTR   15,15               WAS LOCATE SUCCESSFUL?
         BZ    OBTDSCB             YES, GO OBTAIN AGAIN
         B     ERROBT              NO, ISSUE MESSAGE
         SPACE
OKDSCB   NI    STATUS,255-X'08'    TURN OFF LOCATE SWITCH
         TM    MYDSCB-44+X'52',X'42' DSORG = PS OR PO
         BZ    ERRDSORG
*        TM    MYDSCB-44+X'54',X'C0' RECFM = U
*        BO    ERRRECFM
*        CLC   MYDSCB-44+X'62'(3),=X'000000' CHECK DS1LSTAR
*        BE    EMPTYDS             BRANCH IF EMPTY DATA SET
OBTX     EQU   *
FILESPEC EQU   *
         SPACE
************************************************************
*                                                          *
*        SET UP THE DCB                                    *
*                                                          *
************************************************************
         SPACE
         LA    R4,DYNDCBW
         USING IHADCB,R4
         MVC   0(DYNDCBL,R4),DYNDCB
         MVC   DCBDDNAM(8),DDSAVE
         SPACE
         LA    R5,DYNDCBEW
         USING DCBE,R5
         MVC   0(DYNDCBEL,R5),DYNDCBE
         ST    R5,DCBDCBE
         SPACE
         LA    R15,GET6E
         ST    R15,DCBEEODA
         SPACE
         LA    R15,DYNSYNAD
         ST    R15,DCBESYNA
         SPACE
         LA    R15,DYNEXLST
         IC    R0,DCBEXLSA-1
         ST    R15,DCBEXLSA-1      EXLST=DYNEXLST
         STC   R0,DCBEXLSA-1
         LA    R1,OPENEXIT         EXIT BELOW THE LINE
         MVC   0(GLUELEN,R1),GLUE   WILL CONTAIN GLUE
         ST    R1,0(,R15)          STORE IN 1ST EXLST WORD
         MVI   0(R15),X'05'        MARK TYPE OF EXIT
         LA    R0,DYNOPENX         EXIT ABOVE THE LINE
         ST    R0,OPENEXAD         SAVE ITS ADDRESS
         OI    OPENEXAD,X'80'      MAKE IT RUN IN31-BIT MODE
         SPACE
         LA    R1,ABENDXIT         EXIT BELOW THE LINE
         MVC   0(GLUELEN,R1),GLUE   WILL CONTAIN GLUE
         ST    R1,4(,R15)          STORE IN 2ND EXLST WORD
         MVI   4(R15),128+X'11'    OPEN ABEND EXIT (MVS)
         LA    R0,DYNABEND         EXIT ABOVE THE LINE
         ST    R0,ABENDXAD         SAVE ITS ADDRESS
         OI    ABENDXAD,X'80'      MAKE IT RUN IN31-BIT MODE
         SPACE
         OI    STATUS,X'80'        TELL CLEANUP TO CLOSE DCB
         MVC   OPEND(OPEN31L),OPEN31
         SPACE
         OPEN  ((R4),INPUT),MODE=31,MF=(E,OPEND)
         SPACE
*        TM    DCBOFLGS,X'10'
*        TM    DCBEFLG1,DCBEOPEN+DCBEMD31
         TM    DCBEFLG1,DCBEOPEN
         BO    OKOPEN
         LA    R1,MSG08
         LA    R0,L'MSG08
         TM    STATUS,X'10'        MEMBER NOT FOUND?
         BO    DYNOPENM            YES, BRANCH
         LA    R1,MSG04
         LA    R0,L'MSG04
DYNOPENM BAL   R14,PUTMSG
         B     QUITD12
         SPACE
DYNOPENX BSM   0,R14
         SPACE
DYNABEND L     R8,0(,R1)           GET COMPLETION CODE
         N     R8,=A(X'FFF0FF00')
         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND
         BE    DYNABENY            YES, BRANCH
         MVI   4(R1),0             NO, ABNORMALLY TERMINATE
         BSM   0,R14
DYNABENY OI    STATUS,X'10'        INDICATE MEMBER NOT FOUND
         MVI   3(R1),4             IGNORE THE ABEND
         BSM   0,R14
         SPACE
OKOPEN   EQU   *
         MVI   GOTEOD,0
         MVC   SHA1PB(28),SHA1PI   SET UP PARAMETER BLOCK FOR SHA-1
*        MVC   SHA2PB(40),SHA2PI   SET UP PARAMETER BLOCK FOR SHA-256
         LA    R0,64
         ST    R0,I64
         XC    GETREGS(8),GETREGS
         XC    PUTREGS(8),PUTREGS
         XC    FILESIZE(8),FILESIZE
         SR    R6,R6
         SPACE
READLOOP EQU   *
         BAL   R14,GET64
         C     R0,=F'64'
         BNE   READLAST
         LM    R14,R15,FILESIZE
         ALR   R15,R0
         BC    12,NOCARRY
         AL    R14,=F'1'
NOCARRY  STM   R14,R15,FILESIZE
         LA    R14,IBUF            DATA ADDRESS
         LR    R15,R0              DATA LENGTH 64
         LA    R0,1                FUNCTION CODE 1, SHA-1
*        LA    R0,2                FUNCTION CODE 2, SHA-256
         LA    R1,SHA1PB
KLOOPI   EQU   *
         KIMD  R2,R14              R2 NOT USED, R14 --> DATA, R15 = LEN
         BNZ   KLOOPI              LOOP IF PARTIAL
         B     READLOOP
         SPACE
*              R0 CONTAINS 0 TO 63 OR MOD(FILESIZE,64)
*              THE LENGTH OF ANY REMAINING DATA IN IBUF AFTER
*              HAVING PROCESSED THE FILE IN 64-BYTE CHUNKS.
READLAST EQU   *
         LM    R14,R15,FILESIZE
         ALR   R15,R0
         BC    12,NOCARRYL
         AL    R14,=F'1'
NOCARRYL STM   R14,R15,FILESIZE
         SLDL  R14,3               MULTIPLY BY 8, BYTES TO BITS
*              A FILE OF 536,870,912 BYTES WILL HAVE HEX 100000000 BITS
*              MAKING THE HIGH WORD OF THE MESSAGE BIT LENGTH NONZERO.
*              THAT'S 5114 CYLINDERS ON A 3390, ABOUT HALF OF A 3390-9.
         STM   R14,R15,SHA1PB+20   MESSAGE BIT LENGTH FOR SHA-1
*        STM   R14,R15,SHA2PB+32   MESSAGE BIT LENGTH FIR SHA-256
         LA    R14,IBUF            DATA ADDRESS
         LR    R15,R0              DATA LENGTH < 64
         LA    R0,1                FUNCTION CODE 1, SHA-1
*        LA    R0,2                FUNCTION CODE 2, SHA-256
         LA    R1,SHA1PB
KLOOPL   EQU   *
         KLMD  R2,R14              R2 NOT USED, R14 --> DATA, R15 = LEN
         BNZ   KLOOPL              LOOP IF PARTIAL
         B     DYNEOD
         SPACE
*         GET64 - READ UP TO 64 BYTES INTO IBUF, SET R0 TO COUNT
         SPACE
GET64    LM    R5,R6,GETREGS
         LA    R15,IBUF
         L     R0,I64
GET6A    CR    R5,R6               IF END OF RECORD
         BNL   GET6R                 THEN READ NEXT RECORD
         MVC   0(1,R15),0(R5)      COPY ONE BYTE TO OBUF
         LA    R15,1(,R15)         NEXT OBUF BYTE
         LA    R5,1(,R5)           NEXT IBUF BYTE
         BCT   R0,GET6A            DECREMENT R0 AND LOOP
         L     R0,I64              SET RETURNED LENGTH
         STM   R5,R6,GETREGS
         BR    R14
GET6R    STM   R14,R0,GETREGS+8
         CLI   GOTEOD,0            IF WE ALREADY HIT EODAD
         BNE   GET6E                 GO THERE AGAIN
         GET   (R4)
         LR    R5,R1
         TM    DCBRECFM,X'C0'      RECFM U
         BO    GET6U
         TM    DCBRECFM,X'80'      RECFM F
         BO    GET6F
GET6V    LA    R0,4
         LH    R6,0(,R5)           LENGTH+4 FROM RDW
         CLI   OPTR,0              IF RDW KEYWORD
         BNE   GET6W                  INCLUDE RDW
         AR    R5,R0               POINT PAST RDW
         SR    R6,R0               REDUCE LENGTH
GET6W    AR    R6,R5               POINT TO END OF RECORD
         B     GET6X
GET6U    LH    R6,DCBLRECL
         AR    R6,R5               POINT TO END OF RECORD
         B     GET6X
GET6F    LH    R6,DCBLRECL         GET LENGTH FROM LRECL
         TM    DCBRECFM,X'10'      IF NOT BLOCKED
         BO    *+8                   THEN
         LH    R6,DCBBLKSI           USE BLKSIZE AS LENGTH
         AR    R6,R5               POINT TO END OF RECORD
GET6X    LM    R14,R0,GETREGS+8
         B     GET6A
GET6E    CLI   GOTEOD,0            WERE WE ALREADY HERE
         BE    *+8                 NO
         EX    R0,*                YES, SOC3 IF EOF TWICE
         MVI   GOTEOD,1            THAT'S ONCE
         L     R0,I64
         S     R0,GETREGS+16       COMPUTE HOW MANY BYTES IN IBUF
         XC    GETREGS(8),GETREGS
         L     R14,GETREGS+8
         BR    R14
         SPACE
*MPTYDS  MVC   MSGWK(21),=C'-- EMPTY DATA SET -- '
*        LA    R15,MSGWK+21
*        B     ADDDSN
DYNEOD   EQU   *
         LA    R1,SHA1PB
         LA    R0,20 FOR SHA-1
*        LA    R0,32 FOR SHA-256
         LA    R15,MSGWK
         BAL   R14,TOHEX
         SPACE
         LA    R15,MSGWK+40 FOR SHA-1
*        LA    R15,MSGWK+64 FOR SHA-256
         MVI   0(R15),C' '
         MVI   1(R15),C'*'
         LA    R15,2(,R15)
ADDDSN   LA    R14,DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         B     *+10
         MVC   0(0,R15),2(R14)
         EX    R1,*-6
         LA    R15,1(R1,R15)       POINT PAST LAST BYTE
*        TM    14(R6),X'80'        MEMBER SPECIFIED?
         CLI   MEMLEN+1,0          MEMBER ALLOCATED?
         BZ    MEMAX               NO - BRANCH
         MVI   0(R15),C'('
         LA    R15,1(,R15)
*        LH    R1,12(,R6)          GET LENGTH OF MEMBER
         LH    R1,MEMLEN           GET LENGTH OF MEMBER
         BCTR  R1,0                MINUS 1 FOR EX
*        L     R14,8(,R6)          GET ADDRESS OF MEMBER NAME
         LA    R14,MEMNAME
         B     *+10
         MVC   0(0,R15),0(R14)     MOVE MEMBER NAME
         EX    R1,*-6
         LA    R15,1(R1,R15)       POINT PAST LAST BYTE
         MVI   0(R15),C')'
         LA    R15,1(,R15)
MEMAX    EQU   *
         LA    R1,MSGWK
         LR    R0,R15              POINT PAST LAST BYTE
         SR    R0,R1               COMPUTE MESSAGE LENGTH
         CLI   LOWKW+1,1           IF 'LOWER' SPECIFIED
         BNE   LOWX
         LR    R14,R0
         BCTR  R14,0                  GET LENGTH MINUS 1
         B     *+10
         TR    MSGWK(0),LOWTABLE      TRANSLATE TO LOWER CASE
         EX    R14,*-6
LOWX     EQU   *
         ST    R0,MSGL
         CLI   BRIEFKW+1,1         BRIEF, JUST THE HASH
         BNE   *+8
         LA    R0,40               FOR SHA-1
*        LA    R0,64               FOR SHA-256
         CLI   MULTIKW+1,1         MULTIPLE LINES, DSNAME SEPARATE
         BNE   *+8
         LA    R0,40               FOR SHA-1
*        LA    R0,64               FOR SHA-256
         LA    R1,MSGWK
         BAL   R14,PUTLINE
         CLI   MULTIKW+1,1         MULTIPLE LINES
         BNE   MSGDONE
         LA    R0,MSGWK
         A     R0,MSGL
         LA    R1,MSGWK+40         FOR SHA-1
*        LA    R1,MSGWK+64         FOR SHA-256
*        LA    R1,2(,R1)           POINT PAST SPACE AND '*'
         SR    R0,R1               COMPUTE MESSAGE LENGTH
         BAL   R14,PUTLINE         DISPLAY DSNAME ONLY
MSGDONE  B     QUITDSN
         SPACE
QUITD12  MVI   RETCODE+1,12
         SPACE
QUITDSN  TM    STATUS,X'80'
         BZ    NOCLOSE
         LA    R5,DYNDCBEW
*        TM    DCBOFLGS,X'10'      IS IT OPEN?
         TM    DCBEFLG1,DCBEOPEN
         BZ    NOCLOSE             NO, BRANCH
         MVC   CLOSED(CLOSE31L),CLOSE31
         CLOSE ((R4)),MODE=31,MF=(E,CLOSED)
         NI    STATUS,255-X'80'    CLOSED
         DROP  R4                  IHADCB
NOCLOSE  EQU   *
         TM    STATUS,X'40'        FREE REQUIRED?
         BZ    NOFREE
         LA    R1,MYDAPL
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,DDSAVE
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         BAL   R14,CALLDAIR        UNALLOCATE
         NI    STATUS,255-X'40'    UNALLOCATED
         DROP  R15                 DAPB18
NOFREE   EQU   *
         B     NEXTDSN
         SPACE
DONE     TM    MYPUTLEP,X'80'     WAS PUTLINE LOADED?
         BO    NODELETE           NO - USED CVTPUTL - BRANCH
         LA    R0,=CL8'IKJPUTL '
         DELETE EPLOC=(0)
NODELETE EQU   *
         SPACE
         IKJRLSA MYANS
         SPACE
         CLI   RETCODE+1,0         IS RETCODE ZERO?
         BZ    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  EQU   *
         SPACE
         LH    R15,RETCODE
         B     EXIT
         SPACE
************************************************************
*                                                          *
*         CALL IKJDAIR SERVICE ROUTINE                     *
*                                                          *
************************************************************
          SPACE
CALLDAIR ST    R14,DAIRREGS
         L     R15,16
         TM    732(R15),X'80'     CVTDAIR
         BNO   DAIRLINK
         L     R15,732(,R15)
         BALR  R14,R15
         B     DAIRFINI
DAIRLINK EQU   *
         LINK  EP=IKJDAIR,SF=(E,LINKAREA)
DAIRFINI L     R14,DAIRREGS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        DYNAMIC ALLOCATION FAILURE ROUTINE                *
*                                                          *
************************************************************
         SPACE
DAIRFAIL ST    R14,MYDFREGS
         LA    R1,MYDFPARM
         USING DFDSECTD,R1
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,DFRCP
         LA    R15,MYDAPL
         ST    R15,DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,DFJEFF02
         LA    R15,DFDAIR
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,DFIDP
         SLR   R15,R15
         ST    R15,DFCPPLP
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         L     R15,MYDFRC
         DROP  R1                  DFDSECTD
         L     R14,MYDFREGS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        PUTMSG ROUTINE                                    *
*                                                          *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        PUTLINE ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTLINE  STM   R14,R1,PUTLINS
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
         SPACE 1
*RRRECFM LA    R1,MSGRECFM
*        LA    R0,L'MSGRECFM
*        BAL   R14,PUTMSG
*        B     QUITD12
         SPACE
TOHEX    MVC   1(1,R15),0(R1)
         UNPK  0(3,R15),1(2,R15)
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)
         LA    R1,1(,R1)
         BCT   R0,TOHEX
         MVI   0(R15),C' '
         BR    R14
         SPACE
EXIT     LR    R2,R15              SAVE R15
         LR    R1,R10
         L     R0,@SIZE24
         FREEMAIN R,A=(1),LV=(0)
         SPACE
         LR    R1,R13
         L     R0,@SIZE31
         L     13,4(,13)
         FREEMAIN RU,A=(1),LV=(0),SP=1
         LR    R15,R2              RESTORE R15
         LM    0,12,20(13)
         L     14,12(,13)
         BR    14
         SPACE
************************************************************
*                                                          *
*        SYNAD EXIT                                        *
*                                                          *
************************************************************
         SPACE
*        THIS ROUTINE IS ENTERED DURING THE 'GET' MACRO
*        IF AN I/O ERROR OCCURS.
         SPACE
DYNSYNAD EQU   *
         SYNADAF ACSMETH=QSAM
         MVC   SYNADMSG(78),50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         BR    R14
         SPACE
************************************************************
*                                                          *
*        GLUE FOR DCB EXITS                                *
*                                                          *
************************************************************
         SPACE
*        THESE 2 INSTRUCTIONS ARE COPIED TO ABENDXIT, BELOW THE LINE,
*        AND RUN THERE, NOT HERE. WHEN ABENDXIT IS ENTERED,
*        R15 CONTAINS THE ENTRY ADDRESS, THE ADDRESS OF ABENDXIT.
*        THEN USING R15 AS A BASE REGISTER, IT LOADS R15 FROM ABENDXAD,
*        WHICH CONTAINS THE ADDRESS OF DYNABEND ABOVE THE LINE,
*        WITH THE HIGH-ORDER BIT SET TO 1. THEN IT USES BSM TO
*        BRANCH TO DYNABEND IN 31-BIT MODE. THE ROUTINE AT
*        DYNABEND SHOULD RETURN USING 'BSM 0,R14'.
*
GLUE     L     R15,ABENDXAD-ABENDXIT(,R15)
         BSM   R14,R15  OLD MODE INTO R14 HI BIT, BRANCH TO R15 IN 31
GLUELEN  EQU   *-GLUE
         SPACE
*        SINCE ABENDXAD-ABENDEXIT IS IDENTICAL TO OPENEXAD-OPENEXIT
*        THE FOLLOWING IS NOT REALLY NEEDED.
         SPACE
GLUE2    L     R15,OPENEXAD-OPENEXIT(,R15)
         BSM   R14,R15  OLD MODE INTO R14 HI BIT, BRANCH TO R15 IN 31
GLUELEN2 EQU   *-GLUE2
         SPACE
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
*        PRINT NOGEN
         SPACE
OPEN31   OPEN  (0,),MODE=31,MF=L
OPEN31L  EQU   *-OPEN31
CLOSE31  CLOSE (0,),MODE=31,MF=L
CLOSE31L EQU   *-CLOSE31
         SPACE
DYNDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(GL),                       +
               EODAD=0,SYNAD=0,EROPT=ACC,DCBE=0
DYNDCBL  EQU   *-DYNDCB
         SPACE
DYNDCBE  DCBE  RMODE31=BUFF,EODAD=1
DYNDCBEL EQU   *-DYNDCBE
         SPACE
         PRINT GEN
         SPACE
OBTAIN   CAMLST SEARCH,2,3,4
OBTAINL  EQU   *-OBTAIN
         SPACE
LOCATE   CAMLST NAME,2,,4
LOCATEL  EQU   *-LOCATE
         SPACE
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
         SPACE
SHA1PI   DC    X'67452301' H0
         DC    X'EFCDAB89' H1
         DC    X'98BADCFE' H2
         DC    X'10325476' H3
         DC    X'C3D2E1F0' H4
         DC    X'00000000' MESSAGE BIT LENGTH HIGH
         DC    X'00000000' MESSAGE BIT LENGTH LOW
         SPACE
         AGO   .SKIP2
SHA2PI   DC    X'6A09E667' H0
         DC    X'BB67AE85' H1
         DC    X'3C6EF372' H2
         DC    X'A54FF53A' H3
         DC    X'510E527F' H4
         DC    X'9B05688C' H5
         DC    X'1F83D9AB' H6
         DC    X'5BE0CD19' H7
         DC    X'00000000' MESSAGE BIT LENGTH HIGH
         DC    X'00000000' MESSAGE BIT LENGTH LOW
.SKIP2   ANOP
HEXTAB   DC    C'0123456789ABCDEF'
MSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'
MSG02    DC    C'IKJ58503I DATA SET '
MSG02A   DC    C' NOT IN CATALOG'
MSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'
MSG04    DC    C'UNABLE TO OPEN DATASET'
MSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+
               IED'
MSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN+
               TIAL'
MSG07    DC    C'DATA SET IS PARTITIONED, MEMBER NOT SPECIFIED'
MSG08    DC    C'SPECIFIED MEMBER NOT FOUND IN DATASET'
MSG09    DC    C'UNABLE TO OBTAIN DSCB FOR DATA SET'
MSG14    DC    C'FILENAME '
MSG14A   DC    C' INVALID, MORE THAN 8 CHARACTERS  '
MSG14B   DC    C' IS NOT CURRENTLY ALLOCATED       '
MSG14C   DC    C' NOT ALLOCATED TO A DASD DATA SET '
*SGRECFM DC    C'RECORD FORMAT U NOT SUPPORTED'
*MSGDAIR DC    C'UNABLE TO ALLOCATE'
LOWTABLE DC    0D'0',256AL1(*-LOWTABLE)
         ORG   LOWTABLE+C'A'
         DC    X'818283848586878889'
         ORG   LOWTABLE+C'J'
         DC    X'919293949596979899'
         ORG   LOWTABLE+C'S'
         DC    X'A2A3A4A5A6A7A8A9'
         ORG
         LTORG
PCLADDR  DC    0D'0'               END OF CSECT
         SPACE
************************************************************
*                                                          *
*        PARSE PARAMETERS                                  *
*                                                          *
************************************************************
         SPACE
         PRINT NOGEN
SHASMPCL RMODE 31
SHASMPCL IKJPARM
DSN      IKJPOSIT DSNAME,LIST,PROMPT='DATA SET NAME'
FILEKW   IKJKEYWD
         IKJNAME 'FILE'
QUICKW   IKJKEYWD
         IKJNAME 'QUICK'
RDWKW    IKJKEYWD
         IKJNAME 'RDW'
LOWKW    IKJKEYWD
         IKJNAME 'LOWER'
BRIEFKW  IKJKEYWD
         IKJNAME 'BRIEF'
MULTIKW  IKJKEYWD
         IKJNAME 'MULTI'
         IKJENDP
         PRINT GEN
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
@DATA31  DSECT
         DS    18F                 REGISTER SAVEAREA
LINKAREA DS    2F
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                  USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                 USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                 USED BY PUTLINE ROUTINE
MYOLD    DS    2F                 USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL256           USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                 USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                  ADDRESS OF IKJPUTL
MYSTPB   DS    0F                 5 WORDS USED BY STACK DELETE
MYDAPL   DS    5F
MYDAPB   DS    21F
DSNAME   DS    H,CL44
MEMLEN   DS    H
MEMNAME  DS    CL8
VOLSER   DS    CL6
LOCATEW  DS    0F
OBTAINW  DS    4F
LOCBUF   DS    0D                  USES NEXT 265 BYTES
MYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR
MSGWK    DS    CL128
STATUS   DS    X
RETCODE  DS    H
MYDFPARM DS    5F  USED BY DAIRFAIL
MYDFREGS DS    F   USED BY DAIRFAIL
MYDFRC   DS    F   USED BY DAIRFAIL
MYJEFF02 DS    F   USED BY DAIRFAIL
MYDFID   DS    H   USED BY DAIRFAIL
DOUBLE   DS    D
EIGHT    DS    CL8
DDSAVE   DS    CL8
DAIRREGS DS    F
OPEND    DS    0F,(OPEN31L)X
CLOSED   DS    0F,(CLOSE31L)X
DYNDCBEW DS    0F,(DYNDCBEL)X
KOUNT    DS    F
KOUNTSP  DS    F
SYNADSW  DS    F
SYNADMSG DS    CL78
DEVDATA  DS    2F
GETREGS  DS    5F
PUTREGS  DS    8F
I64      DS    F
DSL      DS    F
MSGL     DS    F
GOTEOD   DS    C
OPTR     DS    C
SHA1PB   DS    0D,7F
*SHA2PB  DS    0D,10F
FILESIZE DS    D
IBUF     DS    CL80
         DS    0D
@DATA31L EQU   *-@DATA31
         SPACE
@DATA24  DSECT
SAVE24   DS    18F                USED BY IKJEHDEF
RDJFW    DS    F
MYIOPL24 DS    4F                 USED BY IKJEHDEF
MYECB24  DS    F
MYDFPB   DS    5F
DSNAME24 DS    H,CL44
DYNDCBW  DS    0D,XL(DYNDCBL)
DYNEXLST DS    2F
OPENEXIT DS    0H,(GLUELEN)X
OPENEXAD DS    F  X'80' + ADDRESS OF DYNOPENX
ABENDXIT DS    0H,(GLUELEN)X
ABENDXAD DS    F  X'80' + ADDRESS OF DYNABEND
JFCB     DS    0F,CL176
MYARL    DS    9F
TBUF     DS    CL8
         DS    0D
@DATA24L EQU   *-@DATA24
         SPACE
IHADCB   DSECT
DCBDCBE  DS    A
         DS    28XL1
DCBBFTEK DS    XL1
DCBEODAD DS    AL3
DCBEXLST DS    0A
DCBRECFM DS    X
DCBEXLSA DS    AL3
DCBDDNAM DS    CL8
DCBOFLGS DS    X
         DS    7XL1
         DS    X
DCBSYNAD DS    AL3
DCBBLKSI EQU   IHADCB+62,2
DCBLRECL EQU   IHADCB+82,2
         SPACE
         IHADCBE
         SPACE
EFLG1    EQU   16
EOPEN    EQU   X'80'
EMD31    EQU   X'40'
EEODA    EQU   40
ESYNA    EQU   44
         SPACE
XFLG1    EQU   DCBEFLG1-DCBE
XOPEN    EQU   DCBEOPEN
XMD31    EQU   DCBEMD31
XEODA    EQU   DCBEEODA-DCBE
XSYNA    EQU   DCBESYNA-DCBE
         PRINT NOGEN
         SPACE
         IKJCPPL
         SPACE 3
         IKJPPL
         SPACE
         IKJDFPB
         SPACE 2
         IKJUPT
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJDAPL
         SPACE 2
         IKJDAP08
         SPACE 2
         IKJDAP18
         SPACE 2
         IKJPSCB
         SPACE 2
         IKJEFFDF DFDSECT=YES
         SPACE
         IHAARL
         SPACE
         IHAARA
         SPACE
*        CVT   DSECT=YES
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
