         TITLE 'MD5'
         SPACE
*        Subroutine to compute the MD5 sum of a string
*
*        This is a modification, for non-REXX callers, of
*        Leland Lucius' public domain MD5 program for REXX
*        at http://homerow.net/asm/md5/
*
*        CALL MD5(STRING,LENGTH,CONTEXT,RESULT,WORKSPACE)
*
*        LENGTH IS A FULLWORD CONTAINING THE LENGTH OF STRING.
*
*        CONTEXT IS 22 FULLWORDS WHICH SHOULD BE CLEARED TO BINARY
*        ZEROES BEFORE THE FIRST CALL, AND LEFT UNCHANGED AFTER THAT,
*        UNLESS AN ADDITIONAL MD5SUM IS TO BE COMPUTED FOR ANOTHER
*        STRING, IN WHICH CASE IT SHOULD BE CLEARED AGAIN FOR THE
*        FIRST CALL FOR THE OTHER STRING.
*
*        WORKSPACE IS 44 FULLWORDS AND ITS CONTENTS DO NOT NEED TO
*        BE SET BY THE CALLER. IT IS USED AS A REGISTER SAVE ARE
*        AMONG OTHER THINGS.
*
*        AT LEAST 2 CALLS WILL BE NEEDED - ONE OR MORE WITH
*        A STRING AND ONE WITH THE STRING LENGTH SET TO ZERO.
*        IF LENGTH IS 0, RESULT WILL CONTAIN A 32-BYTE STRING
*        OF HEXADECIMAL DIGITS WHICH IS THE FINAL RESULT.
*
*        IF LENGTH IS NEGATIVE, ONLY ONE CALL IS NEEDED. IT IS THE
*        EQUIVALENT OF ONE CALL WITH A POSITIVE LENGTH AND
*        ANOTHER WITH A ZERO LENGTH. THE NEGATIVE LENGTH IS
*        ZERO MINUS THE STRING LENGTH. THE CONTEXT IN THIS CASE
*        DOES NOT NEED TO BE CLEARED TO ZEROES.
*
* ---------------------------------------------------------------------
* Swap bytes to convert to little endian
* ---------------------------------------------------------------------
         MACRO
&LAB     SWAP     &PTR,&WORDS
&LAB     LA       R15,&WORDS/2
         LA       R14,&PTR
$&SYSNDX LM       R0,R1,0(R14)
.*                MODIFIED 12/6/2013 TO USE STRV INSTEAD OF STCM
         STRV     R0,0(,R14)
         STRV     R1,4(,R14)
         AGO      .LA
         STCM     R0,B'0001',0(R14)
         STCM     R0,B'0010',1(R14)
         STCM     R0,B'0100',2(R14)
         STCM     R0,B'1000',3(R14)
         STCM     R1,B'0001',4(R14)
         STCM     R1,B'0010',5(R14)
         STCM     R1,B'0100',6(R14)
         STCM     R1,B'1000',7(R14)
.LA      LA       R14,8(R14)
         BCT      R15,$&SYSNDX
         MEND
MD5      CSECT
MD5      AMODE ANY31
MD5      RMODE 31
         USING *,R12
         B     BEGIN-*(,R15)
         DC    AL1(7),CL7'MD5'
*        DC    CL16' &SYSDATE &SYSTIME '
         DC    CL16' 11/11/13 01:00 '
WORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)
BEGIN    STM   14,12,12(13)
         LR    R12,R15
         LR    R2,R1               POINT TO ARGS PASSED
         L     R7,16(,R2)          POINT TO WORKSPACE
*        L     R0,WORKSIZ
*        GETMAIN R,LV=(0)
*        LR    R7,R1
         USING WORKD,R7
         XC    0(WORKINI,R7),0(R7)
         ST    R13,4(,R7)          OLD ADDRESS IN NEW SAVE AREA
         ST    R7,8(,R13)          NEW ADDRESS IN OLD SAVE AREA
         LR    R13,R7
         MVC   ARGLIST(16),0(R2)
         SPACE
         L     R15,ARGLIST+4       POINT TO LENGTH
         L     R15,0(,R15)         GET LENGTH
         LTR   R15,R15             IF LENGTH IS NEGATIVE
         BM    INCTX                  SET INITIAL CONTEXT
         L     R1,ARGLIST+8        POINT TO CONTEXT
         NC    0(88,R1),0(R1)      TEST FOR INITIAL CONTEXT ALL ZEROES
         BNZ   CPCTX
INCTX    MVC   M5BUF(16),INITBUF   SET INITIAL VALUE OF M5BUF
         B     OKCTX
CPCTX    MVC   M5BUF(88),0(R1)     COPY SAVED CONTEXT
OKCTX    EQU   *
         SPACE
         LM    R8,R9,ARGLIST       GET STRING ADDRESS AND LENGTH ADDR
         L     R9,0(,R9)           GET LENGTH
         LTR   R9,R9
         BZ    FINAL
         BM    BOTH
         BAL   R11,HASH
         B     DONE
BOTH     LCR   R9,R9
         BAL   R11,HASH
FINAL    BAL   R11,TERM
         SPACE
         LA    R1,M5BUF            TOHEX SOURCE
         LA    R0,4                TOHEX SOURCE LENGTH IN WORDS
         L     R15,ARGLIST+12      POINT TO CALLER'S RESULT AREA
         BAL   R14,TOHEX
DONE     L     R1,ARGLIST+8        POINT TO CONTEXT
         MVC   0(88,R1),M5BUF      SAVE CONTEXT IN CALLER'S ARG
         B     EXIT0
         SPACE
TOHEX    MVC   0(4,R15),0(R1)
         UNPK  M5IN(9),0(5,R15)
         MVC   0(8,R15),M5IN
         TR    0(8,R15),HEXTAB-240
         LA    R15,8(,R15)
         LA    R1,4(,R1)
         BCT   R0,TOHEX
         BR    R14
         SPACE
* =====================================================================
* MD5Hash
*
* Update context to reflect the concatenation of another buffer full
* of bytes.
*
* (Even though they are destroyed in MD5Trans, it is okay to use R2
* and R3 here since they are reset after each call to MD5Trans.)
*
* =====================================================================
* ---------------------------------------------------------------------
* Update byte count
* ---------------------------------------------------------------------
HASH     L        R1,M5BYTES+(1*4)            RS = BytesÝ 1 ¨
         LR       R14,R1                      T1 = RS
         ALR      R14,R9                      T1 += Len
         BC       12,L10                      Overflow? No, branch
* ---------------------------------------------------------------------
* Carry from low to high
* ---------------------------------------------------------------------
         L        R15,M5BYTES+(0*4)           T2 = BytesÝ 0 ¨
         AL       R15,=F'1'                   T2++
         ST       R15,M5BYTES+(0*4)           BytesÝ 0 ¨ = T2
L10      ST       R14,M5BYTES+(1*4)           BytesÝ 1 ¨ = T1
* ---------------------------------------------------------------------
* Space available in ctx->in (at least 1)
* ---------------------------------------------------------------------
         LA       R10,64                      Cache
         N        R1,=A(X'3F')                RS &= 0x3f (mod 64)
         LR       R3,R10                      T = 64
         SLR      R3,R1                       T -= RS
         LR       R1,R10                      RS = 64
         SLR      R1,R3                       RS -= T
         LA       R1,M5IN(R1)                 RS = &InÝ RS ¨
* ---------------------------------------------------------------------
* Enough input to fill ctx->in?
* ---------------------------------------------------------------------
         CLR      R3,R9                       T > Len?
         BH       L40                         Yes, not enough to fill
* ---------------------------------------------------------------------
* First chunk is an odd size
* ---------------------------------------------------------------------
         LR       R14,R3                      T1 = T
         BCTR     R14,0                       T1-- (for execute)
         EX       R14,MEMCPY                  do MEMCPY for T bytes
* ---------------------------------------------------------------------
* Adjust buffer and len
* ---------------------------------------------------------------------
         ALR      R8,R3                       Buf += T
         SLR      R9,R3                       Len -= T
* ---------------------------------------------------------------------
* Convert to little endian
* ---------------------------------------------------------------------
         SWAP     M5IN,16                     byteSwap( In, 16 )
* ---------------------------------------------------------------------
* Add in the padding bytes
* ---------------------------------------------------------------------
         BAL      R6,MD5TRANS                 MD5Trans( Buf, In )
* ---------------------------------------------------------------------
* Process data in 64-byte chunks
* ---------------------------------------------------------------------
L20      CLR      R9,R10                      Len >= 64?
         BL       L30                         No, don't have a block
         MVC      M5IN(64),0(R8)              memcpy( In, Buf, 64 )
* ---------------------------------------------------------------------
* Adjust buffer and len
* ---------------------------------------------------------------------
         ALR      R8,R10                      Buf += 64
         SLR      R9,R10                      Len -= 64
* ---------------------------------------------------------------------
* Convert to little endian
* ---------------------------------------------------------------------
         SWAP     M5IN,16                     byteSwap( In, 16 )
* ---------------------------------------------------------------------
* Add in 64 more bytes
* ---------------------------------------------------------------------
         BAL      R6,MD5TRANS                 MD5Trans( Buf, In )
         B        L20                         Continue loop
* ---------------------------------------------------------------------
* Handle any remaining bytes of data.
* ---------------------------------------------------------------------
L30      LA       R1,M5IN                     RS = &InÝ 0 ¨
L40      LTR      R9,R9                       Len == 0?
         BZ       PUTCTX                      Yes, nothing to do
         BCTR     R9,0                        Len-- (for execute)
         EX       R9,MEMCPY                   do MEMCPY for Len bytes
* ---------------------------------------------------------------------
* Store the updated context variable
* ---------------------------------------------------------------------
PUTCTX   EQU      *
         BR       R11
         SPACE
* =====================================================================
* MD5Term
*
* Final wrapup...pad to 64-byte boundary with the bit pattern:
*     1 0* (64-bit count of bits processed, MSB-first)
*
* (Even though they are destroyed in MD5Trans, it is okay to use R2
* and R3 here since they are reset after each call to MD5Trans.)
*
* =====================================================================
* ---------------------------------------------------------------------
* Get number of bytes mod 64
* ---------------------------------------------------------------------
TERM     L        R3,M5BYTES+(1*4)            Cnt = BytesÝ 1 ¨
         N        R3,=A(X'3F')                Cnt &= 0x3f
* ---------------------------------------------------------------------
* Set ptr to start of padding
* ---------------------------------------------------------------------
         LA       R2,M5IN(R3)                 Ptr = &InÝ Cnt ¨
* ---------------------------------------------------------------------
* Set the first byte of padding to 0x80.  There is always room.
* ---------------------------------------------------------------------
         MVI      0(R2),X'80'                 *Ptr = x'80'
         LA       R2,1(R2)                    Ptr++
* ---------------------------------------------------------------------
* Bytes of padding needed to make 56 bytes (-8..55)
* ---------------------------------------------------------------------
         LA       R1,56-1                     RS = 56 - 1
         SLR      R1,R3                       RS -= Cnt
* ---------------------------------------------------------------------
* Padding forces an extra block
* ---------------------------------------------------------------------
         LTR      R3,R1                       ( Cnt = RS ) == 0
         BZ       L60                         =0, no need to clear
         BNL      L50                         >0, no extra block
* ---------------------------------------------------------------------
* Clear the remaining bytes
* ---------------------------------------------------------------------
         LA       R3,(8-1)(R3)                Cnt += 8 (-1 for execute)
         EX       R3,MEMSET                   do MEMSET for Cnt bytes
* ---------------------------------------------------------------------
* Convert to little endian
* ---------------------------------------------------------------------
         SWAP     M5IN,16                     byteSwap( In, 16 )
* ---------------------------------------------------------------------
* Add in the padding bytes
* ---------------------------------------------------------------------
         BAL      R6,MD5TRANS                 MD5Trans( Buf, In )
         LA       R2,M5IN                     Ptr = &InÝ 0 ¨
         LA       R3,(15*4)                   Cnt = 56
* ---------------------------------------------------------------------
* Clear padding bytes
* ---------------------------------------------------------------------
L50      BCTR     R3,0                        Cnt-- (for execute)
         EX       R3,MEMSET                   do MEMSET for Cnt bytes
* ---------------------------------------------------------------------
* Convert to little endian
* ---------------------------------------------------------------------
L60      SWAP     M5IN,14                     byteSwap( In, 14 )
* ---------------------------------------------------------------------
* Append length in bits and transform
* ---------------------------------------------------------------------
         LM       R14,R15,M5BYTES+(0*4)       Get longlong byte count
         SLDL     R14,3                       Calc number of bits
         ST       R15,M5IN+(14*4)             Little...
         ST       R14,M5IN+(15*4)             ...endian
         BAL      R6,MD5TRANS                 MD5Trans( Buf, In )
* ---------------------------------------------------------------------
* Convert to little endian
* ---------------------------------------------------------------------
         SWAP     M5BUF,4                     byteSwap( Buf, 4 )
* ---------------------------------------------------------------------
* Final transform is the digest
* ---------------------------------------------------------------------
         BR       R11
* =====================================================================
* MD5Trans
*
* The core of the MD5 algorithm, this alters an existing MD5 hash to
* reflect the addition of 16 longwords of new data.  MD5Update blocks
* the data and converts bytes into longwords for this routine.
*
* =====================================================================
RS       EQU      R1
A        EQU      R2  <--------------------\
B        EQU      R3                        ¦ Must be sequential since
C        EQU      R4                        ¦ we use LM/STM opcodes
D        EQU      R5  <--------------------/
T1       EQU      R14
T2       EQU      R15
* ---------------------------------------------------------------------
*        F1(x, y, z) \
*           (z ¬ (x & (y ¬ z)))
* ---------------------------------------------------------------------
         MACRO
         F1       &X,&Y,&Z
.*
         LR       T1,&Y                       T1 = y
         XR       T1,&Z                       T1 ¬= z
         LR       T2,&X                       T2 = x
         NR       T2,T1                       T2 &= T1
         LR       RS,&Z                       RS = z
         XR       RS,T2                       RS ¬= T2
.*
         MEND
* ---------------------------------------------------------------------
*        F2(x, y, z) \
*            F1(z, x, y)
* ---------------------------------------------------------------------
         MACRO
         F2       &X,&Y,&Z
.*
         F1       &Z,&X,&Y                    RS = F1(z,x,y)
.*
         MEND
* ---------------------------------------------------------------------
*        F3(x, y, z) \
*            (x ¬ y ¬ z)
* ---------------------------------------------------------------------
         MACRO
         F3       &X,&Y,&Z
.*
         LR       RS,&X                       RS = x
         XR       RS,&Y                       RS ¬= y
         XR       RS,&Z                       RS ¬= z
.*
         MEND
* ---------------------------------------------------------------------
*        F4(x, y, z) \
*            (y ¬ (x ¦ ~z))
* ---------------------------------------------------------------------
         MACRO
         F4       &X,&Y,&Z
.*
         LR       T1,&Z                       T1 = z
         X        T1,=A(X'FFFFFFFF')          T1 ¬= -1
         LR       T2,&X                       T2 = x
         OR       T2,T1                       T2 ¦= T2
         LR       RS,&Y                       RS = y
         XR       RS,T2                       RS ¬= T2
.*
         MEND
* ---------------------------------------------------------------------
*        MD5STEP(f,w,x,y,z,in,ac,s) \
*            (w += f(x,y,z) + in + ac, w = (w<<s ¦ w>>(32-s)) + x)
* ---------------------------------------------------------------------
         MACRO
         MD5STEP  &F,&W,&X,&Y,&Z,&IN,&AC,&S
.*
         &F       &X,&Y,&Z                    RS = f(x,y,z)
         AL       RS,M5IN+(&IN*4)             RS += InÝ in ¨
         AL       RS,=A(x'&AC')               RS += ac
         ALR      &W,RS                       w += RS
         LR       T1,&W                       T1 = w
         SLL      &W,&S                       w << s
         SRL      T1,32-&S                    T1 >> (32-s)
         OR       &W,T1                       w ¦= T1
         ALR      &W,&X                       w += x
.*
         MEND
MD5TRANS LM       A,D,M5BUF
* ---------------------------------------------------------------------
* Round 1
* ---------------------------------------------------------------------
         MD5STEP  F1,A,B,C,D,00,D76AA478,07
         MD5STEP  F1,D,A,B,C,01,E8C7B756,12
         MD5STEP  F1,C,D,A,B,02,242070DB,17
         MD5STEP  F1,B,C,D,A,03,C1BDCEEE,22
         MD5STEP  F1,A,B,C,D,04,F57C0FAF,07
         MD5STEP  F1,D,A,B,C,05,4787C62A,12
         MD5STEP  F1,C,D,A,B,06,A8304613,17
         MD5STEP  F1,B,C,D,A,07,FD469501,22
         MD5STEP  F1,A,B,C,D,08,698098D8,07
         MD5STEP  F1,D,A,B,C,09,8B44F7AF,12
         MD5STEP  F1,C,D,A,B,10,FFFF5BB1,17
         MD5STEP  F1,B,C,D,A,11,895CD7BE,22
         MD5STEP  F1,A,B,C,D,12,6B901122,07
         MD5STEP  F1,D,A,B,C,13,FD987193,12
         MD5STEP  F1,C,D,A,B,14,A679438E,17
         MD5STEP  F1,B,C,D,A,15,49B40821,22
* ---------------------------------------------------------------------
* Round 2
* ---------------------------------------------------------------------
         MD5STEP  F2,A,B,C,D,01,F61E2562,05
         MD5STEP  F2,D,A,B,C,06,C040B340,09
         MD5STEP  F2,C,D,A,B,11,265E5A51,14
         MD5STEP  F2,B,C,D,A,00,E9B6C7AA,20
         MD5STEP  F2,A,B,C,D,05,D62F105D,05
         MD5STEP  F2,D,A,B,C,10,02441453,09
         MD5STEP  F2,C,D,A,B,15,D8A1E681,14
         MD5STEP  F2,B,C,D,A,04,E7D3FBC8,20
         MD5STEP  F2,A,B,C,D,09,21E1CDE6,05
         MD5STEP  F2,D,A,B,C,14,C33707D6,09
         MD5STEP  F2,C,D,A,B,03,F4D50D87,14
         MD5STEP  F2,B,C,D,A,08,455A14ED,20
         MD5STEP  F2,A,B,C,D,13,A9E3E905,05
         MD5STEP  F2,D,A,B,C,02,FCEFA3F8,09
         MD5STEP  F2,C,D,A,B,07,676F02D9,14
         MD5STEP  F2,B,C,D,A,12,8D2A4C8A,20
* ---------------------------------------------------------------------
* Round 3
* ---------------------------------------------------------------------
         MD5STEP  F3,A,B,C,D,05,FFFA3942,04
         MD5STEP  F3,D,A,B,C,08,8771F681,11
         MD5STEP  F3,C,D,A,B,11,6D9D6122,16
         MD5STEP  F3,B,C,D,A,14,FDE5380C,23
         MD5STEP  F3,A,B,C,D,01,A4BEEA44,04
         MD5STEP  F3,D,A,B,C,04,4BDECFA9,11
         MD5STEP  F3,C,D,A,B,07,F6BB4B60,16
         MD5STEP  F3,B,C,D,A,10,BEBFBC70,23
         MD5STEP  F3,A,B,C,D,13,289B7EC6,04
         MD5STEP  F3,D,A,B,C,00,EAA127FA,11
         MD5STEP  F3,C,D,A,B,03,D4EF3085,16
         MD5STEP  F3,B,C,D,A,06,04881D05,23
         MD5STEP  F3,A,B,C,D,09,D9D4D039,04
         MD5STEP  F3,D,A,B,C,12,E6DB99E5,11
         MD5STEP  F3,C,D,A,B,15,1FA27CF8,16
         MD5STEP  F3,B,C,D,A,02,C4AC5665,23
* ---------------------------------------------------------------------
* Round 4
* ---------------------------------------------------------------------
         MD5STEP  F4,A,B,C,D,00,F4292244,06
         MD5STEP  F4,D,A,B,C,07,432AFF97,10
         MD5STEP  F4,C,D,A,B,14,AB9423A7,15
         MD5STEP  F4,B,C,D,A,05,FC93A039,21
         MD5STEP  F4,A,B,C,D,12,655B59C3,06
         MD5STEP  F4,D,A,B,C,03,8F0CCC92,10
         MD5STEP  F4,C,D,A,B,10,FFEFF47D,15
         MD5STEP  F4,B,C,D,A,01,85845DD1,21
         MD5STEP  F4,A,B,C,D,08,6FA87E4F,06
         MD5STEP  F4,D,A,B,C,15,FE2CE6E0,10
         MD5STEP  F4,C,D,A,B,06,A3014314,15
         MD5STEP  F4,B,C,D,A,13,4E0811A1,21
         MD5STEP  F4,A,B,C,D,04,F7537E82,06
         MD5STEP  F4,D,A,B,C,11,BD3AF235,10
         MD5STEP  F4,C,D,A,B,02,2AD7D2BB,15
         MD5STEP  F4,B,C,D,A,09,EB86D391,21
* ---------------------------------------------------------------------
* Add back into state and return
* ---------------------------------------------------------------------
         AL       A,M5BUF+(0*4)
         AL       B,M5BUF+(1*4)
         AL       C,M5BUF+(2*4)
         AL       D,M5BUF+(3*4)
         STM      A,D,M5BUF
         BR       R6
         SPACE
MEMCPY   MVC      0(0,R1),0(R8)               memcpy( RS, Buf, Len )
MEMSET   XC       0(0,R2),0(R2)               PtrÝ...¨ ¬= PtrÝ...¨
         SPACE
EXIT0    SR    R2,R2              RETURN CODE 0
*        LR    R1,R13             POINT TO ADDRESS TO FREEMAIN
*        L     R0,WORKSIZ         LENGTH TO FREEMAIN
         L     R13,4(,R13)        RESTORE ORIGINAL R13
*        FREEMAIN R,A=(1),LV=(0)
         DROP  R7
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
         SPACE
         LTORG
         DC    0D'0'
INITBUF  DC    X'67452301,EFCDAB89,98BADCFE,10325476'
HEXTAB   DC    C'0123456789ABCDEF'
WORKD    DSECT
         DS    18F
ARGLIST  DS    4F
M5BUF    DS    4F
M5BYTES  DS    2F
M5IN     DS    16F
WORKINI  EQU   *-WORKD
         DS    0D
WORKLEN  EQU   *-WORKD
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
