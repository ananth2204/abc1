         TITLE '   M D 5 P G M   '
* WRITTEN MAY 10 2020
* UPDATED MAY 13 2020
* WRITE THE MD5 HASH OF THE INPUT FILE (24-BIT VERSION OF MD5PGM)
*
* DDNAMES: SYSUT1 (INPUT) AND SYSUT2 (OUTPUT)
*
* MUST BE LINKED WITH SUBPROGRAM 'MD5'.
*
* IF PARM CONTAINS 'R' THEN RDW'S WILL BE INCLUDED IF INPUT IS V.
* IF PARM CONTAINS 'L' THEN RESULT WILL BE SHOWN IN LOWERCASE.
* IF PARM CONTAINS 'E' THEN RESULT WILL INCLUDE THE DATA SET NAME,
* BUT ONLY THE FIRST DATA SET NAME IF CONCATENATED DATA SETS.
*
* OUTPUT WILL BE A FIXED-LENGTH 80-BYTE RECORD FILE,
* UNLESS THE OUTPUT FILE ALREADY HAS OTHER ATTRIBUTES.
*
* MUCH OF THE SOURCE CODE IS BORROWED FROM MAKEB64 IN CBT FILE 741,
* ALTHOUGH THAT PROGRAM HAS NOTHING TO DO WITH THE MD5 HASH.
*
* CALL MD5(IREC,80,ICTX22,IRES08,IWRK44)
*
* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.
*
* SAMPLE JCL:
*  //STEPNAME EXEC PGM=MD5PGM
*  //SYSUT1 DD DSN=HLQ.INPUT.DATA,DISP=SHR
*  //SYSUT2 DD SYSOUT=*
*
* LOG OF CHANGES:
*  JUNE 15 2020 - FIX RDW
         SPACE
MD5PGM   CSECT
         USING *,R10
         B     @PROLOG-*(,R15)
         DC    AL1(7),CL7'MD5PGM'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)
@PROLOG  STM   14,12,12(13)
         LR    R10,R15
         LR    R2,R1               POINT R2 TO PARM ADDRESS
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1               POINT R9 TO OBTAINED AREA
         XC    0(@CLEARL,R9),0(R9)
         USING @DATA,R9
         ST    R13,4(,R9)          OLD ADDRESS IN NEW SAVE AREA
         ST    R9,8(,R13)          NEW ADDRESS IN OLD SAVE AREA
         LR    R13,R9              POINT R13 TOP NEW SAVE AREA
         SPACE
*
*         GET STORAGE BELOW THE LINE FOR DCB'S ETC.
*
         LA    R0,@DATA24L
         GETMAIN R,LV=(0)
         LR    R8,R1               POINT R8 TO OBTAINED AREA
         USING @DATA24,R8
         SPACE
         L     R1,0(,R2)           POINT TO PARM
         LH    R14,0(,R1)          LENGTH OF PARM
         LTR   R14,R14
         BZ    PARMX
         LA    R15,2(,R1)
PARMLOOP CLI   0(R15),C'R'         IF PARM CONTAINS R (FOR RDW)
         BNE   *+8                   THEN
         MVI   OPTR,1                TURN ON RDW OPTION
         CLI   0(R15),C'L'         IF PARM CONTAINS L (FOR LOWERCASE)
         BNE   *+8                   THEN
         MVI   OPTL,1                TURN ON LOWERCASE OPTION
         CLI   0(R15),C'E'         IF PARM CONTAINS E (FOR EXTRA INFO)
         BNE   *+8                   THEN
         MVI   OPTE,1                TURN ON EXTRA OPTION
         LA    R15,1(,R15)
         BCT   R14,PARMLOOP
PARMX    EQU   *
         SPACE
         LA    R15,12
         ST    R15,RETCODE
         SPACE
         LA    R3,UT1DCBW
         LA    R4,UT2DCBW
         MVC   0(UT1DCBL,R3),UT1DCB
         MVC   0(UT2DCBL,R4),UT2DCB
         TM    0(R2),X'80'         ONLY 1 PARAMETER
         BO    NODD                YES, BYPASS DD ROUTINE
         L     R14,4(,R2)          POINT TO DDNAME LIST
         LH    R1,0(,R14)          GET LENGTH OF DDNAME LIST
         LA    R14,2(,R14)         POINT PAST LENGTH
         SPACE
*        CH    R1,=H'48'           LONG ENOUGH FOR SYSPRINT
*        BL    NODD                NO, BRANCH
*        CLI   40(R14),0           SYSPRINT OVERRIDE
*        BE    *+10                NO, SKIP MVC
*        MVC   DDNAM(8,R3),40(R14)
         SPACE
         CH    R1,=H'64'           LONG ENOUGH FOR SYSUT1
         BL    NODD                NO, BRANCH
         CLI   56(R14),0           SYSUT1 OVERRIDE
         BE    *+10                NO, SKIP MVC
         MVC   DDNAM(8,R3),56(R14)                                .FIX.
         SPACE
         CH    R1,=H'72'           LONG ENOUGH FOR SYSUT2
         BL    NODD                NO, BRANCH
         CLI   64(R14),0           SYSUT2 OVERRIDE
         BE    *+10                NO, SKIP MVC
         MVC   DDNAM(8,R4),64(R14)                                .FIX.
NODD     EQU   *
         SPACE
**********************************************************************
*              OPEN INPUT DCB
**********************************************************************
         LA    R1,UT1EXLST         POINT TO INPUT DCB EXIT LIST
*        STCM  R1,7,EXLST+1(R3)    STORE ADDRESS OF EXIT LIST IN DCB
         IC    R0,EXLST(,R3)
         ST    R1,EXLST(,R3)       STORE ADDRESS OF EXIT LIST IN DCB
         STC   R0,EXLST(,R3)
         LA    R15,JFCB
         ST    R15,0(,R1)          1ST EXLST WORD
         MVI   0(R1),X'87'         JFCB ADDRESS FOR RDJFCB
         SPACE
         MVI   UT1RDJF,X'80'
         RDJFCB ((R3)),MF=(E,UT1RDJF)
         SPACE
         MVI   OPENW,X'80'
         OPEN  ((R3),INPUT),MF=(E,OPENW)
         TM    OFLGS(R3),X'10'     TEST FOR SUCCESSFUL OPEN
         BNO   EXIT
**********************************************************************
*              OPEN OUTPUT DCB
**********************************************************************
         LA    R1,UT2EXLST         POINT TO OPEN EXIT LIST
*        STCM  R1,7,EXLST+1(R4)    STORE ADDRESS OF EXIT LIST IN DCB
         IC    R0,EXLST(,R4)
         ST    R1,EXLST(,R4)       STORE ADDRESS OF EXIT LIST IN DCB
         STC   R0,EXLST(,R4)
         LA    R15,UT2EXIT         POINT TO OPEN EXIT ENTRY POINT
         ST    R15,0(,R1)          STORE ADDRESS OF EXIT IN EXIT LIST
         MVI   0(R1),X'85'         SET HIGH BYTE OF EXIT LIST
         SPACE
         MVI   OPENW,X'80'
         OPEN  ((R4),OUTPUT),MF=(E,OPENW)
         TM    OFLGS(R3),X'10'     TEST FOR SUCCESSFUL OPEN
         BNO   EXITC1
         SPACE
**********************************************************************
*              SET UP MD5 PARAMETER LIST
**********************************************************************
         LA    R1,MD5ARGS
         XC    ICTX22(22*4),ICTX22
         LA    R0,ILEN
         ST    R0,4(,R1)  2ND ARG
         LA    R0,ICTX22
         ST    R0,8(,R1)  3RD ARG
         LA    R0,IRES08
         ST    R0,12(,R1) 4TH ARG
         LA    R0,IWRK44
         O     R0,=A(X'80000000')  LAST PARAMETER
*        OILH  R0,X'8000'          LAST PARAMETER
         ST    R0,16(,R1) 5TH ARG
         SPACE
**********************************************************************
*              READ A RECORD
**********************************************************************
READLOOP EQU   *
         GET   (R3)
         LR    R5,R1               POINT TO RECORD
         TM    RECFM(R3),X'C0'     RECFM U
         BO    GETU
         TM    RECFM(R3),X'80'     RECFM F
         BO    GETF
GETV     LA    R0,4
         LH    R7,0(,R5)           LENGTH+4 FROM RDW
         CLI   OPTR,0              IF R IN PARM
         BNE   GOT                    INCLUDE RDW
         AR    R5,R0               POINT PAST RDW
         SR    R7,R0               REDUCE LENGTH
         B     GOT
GETU     LH    R7,LRECL(,R3)
         B     GOT
GETF     LH    R7,LRECL(,R3)       GET LENGTH FROM LRECL
         TM    RECFM(R3),X'10'     IF NOT BLOCKED
         BO    *+8                   THEN
         LH    R7,BLKSI(,R3)         USE BLKSIZE AS LENGTH
**********************************************************************
*              CALL MD5 FOR EACH RECORD
**********************************************************************
*              CALL MD5 FOR EACH RECORD READ
GOT      ST    R5,MD5ARGS          RECORD ADDRESS
         ST    R7,ILEN             RECORD LENGTH
         LA    R1,MD5ARGS
         L     R15,=V(MD5)
         CALL  (15)
         B     READLOOP
         SPACE
**********************************************************************
*              END-OF-FILE, CALL MD5 ONE LAST TIME
**********************************************************************
UT1EOD   EQU   *
         SR    R0,R0               LENGTH ZERO FOR FINAL CALL
         ST    R0,ILEN
         LA    R1,MD5ARGS
         L     R15,=V(MD5)
         CALL  (15)
**********************************************************************
*              OUTPUT THE RESULTS
**********************************************************************
         MVI   OBUF,C' '
         MVC   OBUF+1(255),OBUF
*        MVC   ORDW(4),=AL2(36,0)
         LA    R15,OBUF
         TM    RECFM(R4),X'04'     IF ASA CARRIAGE CONTROL
         BZ    NOTASA                THEN
         LA    R15,1(,R15)           POINT PAST 1ST COLUMN
NOTASA   EQU   *
         MVC   0(32,R15),IRES08    COPY HEX RESULT
*        TR    0(32,R15),LOWER     TRANSLATE TO LOWER CASE
         LA    R1,32(,R15)         POINT R1 PAST LAST BYTE
         CLI   OPTE,1              IF NO 'E' IN PARM, (SHOW DSN)
         BNE   SETLEN                GO TO SETLEM
         MVI   33(R15),C'*'        ELSE ADD *
         MVC   34(44,R15),JFCB     AND DSN
         LA    R1,34+43(,R15)      LAST CHAR OF DSNAME
         LA    R0,44               INITIAL LENGTH
FILEA    CLI   0(R1),C' '          IS THIS LAST NONBLANK
         BNE   FILEB               YES, BRANCH
         BCTR  R1,0                BACK UP 1 CHARACTER
         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH
FILEB    LA    R1,1(,R1)           POINT PAST LAST CHAR
         CLI   JFCB+44,C' '        IF NO MEMBER IN JFCB
         BE    SETLEN                GO TP SETLEM
         MVI   0(R1),C'('
         MVC   1(8,R1),JFCB+44     JFCBELNM IN IEFJFCBN
         LA    R1,8(,R1)           LAST CHAR OF MEMBER NAME
         LA    R0,8
MEMA     CLI   0(R1),C' '
         BNE   MEMB
         BCTR  R1,0
         BCT   R0,MEMA
MEMB     MVI   1(R1),C')'
         LA    R1,1(,R1)           POINT PAST LAST CHAR
SETLEN   LA    R0,OBUF
         SR    R1,R0               COMPUTE LENGTH
NONAME   EQU   *
         CLI   OPTL,1              IF 'L' IN PARM, FOR LOWERCASE
         BNE   *+10                  THEN
         TR    OBUF(256),LOWER       TRANSLATE TO LOWER CASE
         LA    R0,OBUF             PUT WILL USE R0 AS RECORD ADDRESS
PUTU     TM    RECFM(R4),X'C0'     IF OUTPUT RECFM U
         BNO   PUTV
         STH   R1,LRECL(,R4)       SET RECFM U RECORD SIZE
         B     PUTT
PUTV     TM    RECFM(R4),X'40'     IF RECFM V
         BZ    PUTT                  THEN
         LA    R1,4(,R1)             LENGTH + 4 FOR RDW
         LH    R0,LRECL(,R4)         GET LRECL
         CR    R1,R0                 IF LONGER THAN LRECL
         BNH   *+6                     THEN
         LR    R1,R0                   TRUNCATE TO LRECL
         SLL   R1,16                 SHIFT LEFT 16 BITS
         ST    R1,ORDW               SET RDW
         LA    R0,ORDW               USE RDW FOR PUT
PUTT     EQU   *
         PUT   (R4),(0)
         B     EXIT0
         SPACE
EXITN    CLI   RETCODE+3,12        IF AN ERROR OCCURRED
         BNE   EXITC2                DON'T SET RC 0
EXIT0    MVI   RETCODE+3,0
EXITC2   MVC   CLOSEW(CLOSEMLL),CLOSEML
         CLOSE ((R4)),MF=(E,CLOSEML)
         LR    R7,R4
         BAL   R2,FREEPOOL
EXITC1   MVC   CLOSEW(CLOSEMLL),CLOSEML
         CLOSE ((R3)),MF=(E,CLOSEW)
         LR    R7,R3
         BAL   R2,FREEPOOL
         B     EXIT
FREEPOOL FREEPOOL (R7)
*        BR    R2
EXIT     L     R2,RETCODE
         LR    R1,R8
         LA    R0,@DATA24L
         FREEMAIN R,LV=(0),A=(1)
         LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         FREEMAIN R,LV=(0),A=(1)
         DROP  R9
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
         SPACE
*         DCB OPEN EXIT
UT2EXIT  CLI   RECFM(R1),0         IF NO RECFM
         BNE   UT2EXI2                THEN
         MVI   RECFM(R1),X'90'        USE FB
UT2EXI2  TM    RECFM(R1),X'10'     IF BLOCKED
         BZ    UT2EXI3                AND
         CLC   LRECL(2,R1),=H'0'      NO LRECL
         BNE   UT2EXI3                THEN
         MVC   LRECL(2,R1),=H'80'     USE 80
UT2EXI3  CLC   BLKSI(2,R1),=H'0'   IF NO BLKSIZE
         BNE   UT2EXI4                THEN
         MVC   BLKSI(2,R1),LRECL(R1)  USE LRECL
UT2EXI4  BR    R14
         SPACE
         LTORG
         DC    0D'0'
         PRINT NOGEN
UT1DCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),EODAD=UT1EOD
UT1DCBL  EQU   *-UT1DCB
UT2DCB   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=(PM),EXLST=0
UT2DCBL  EQU   *-UT2DCB
UT1EXL   DC    0F'0',X'87',AL3(0)
UT2EXL   DC    0F'0',X'85',AL3(0)
OPENML   OPEN  (0,),MF=L
OPENMLL  EQU   *-OPENML
CLOSEML  CLOSE (0,),MF=L
CLOSEMLL EQU   *-CLOSEML
         DC    0D'0'
LOWER    DC    256AL1(*-LOWER)
         ORG   LOWER+C'A'
         DC    X'818283848586878889'
         ORG   LOWER+C'J'
         DC    X'919293949596979899'
         ORG   LOWER+C'S'
         DC    X'A2A3A4A5A6A7A8A9'
         ORG
         DC    0D'0'
         SPACE
@DATA    DSECT
         DS    18F
RETCODE  DS    F
OPENW    DS    F
CLOSEW   DS    F
OPTE     DS    H
OPTL     DS    H
OPTR     DS    H
@CLEARL  EQU   *-@DATA
MD5ARGS  DS    5F
ILEN     DS    F
ICTX22   DS    0D,22F
IRES08   DS    0D,8F
IWRK44   DS    0D,44F
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
@DATA24  DSECT
UT1DCBW  DS    0F,(UT1DCBL)X
UT2DCBW  DS    0F,(UT2DCBL)X
UT1EXLST DS    F
UT2EXLST DS    F
UT1RDJF  DS    F
ORDW     DS    F
OBUF     DS    256C
         DS    0D
JFCB     DS    CL176
         DS    0D
@DATA24L EQU   *-@DATA24
         SPACE
*         EQUATES FOR DCB FIELD OFFSETS
EXLST    EQU   36
RECFM    EQU   36
DDNAM    EQU   44
OFLGS    EQU   48
BLKSI    EQU   62
LRECL    EQU   82
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
