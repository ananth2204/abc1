{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012448000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2292654, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 14, "INMDSNAM": "CBT.V500.FILE612.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2292654, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2292654, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE612.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00$\\r'", "DS1TRBAL": "b'L\\x1a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04u\\x00\\r\\x04x\\x00\\x04\\x00%'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00#\\x01 \\x01/\\x01 \\x01/\")\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-01-12T00:00:00", "modifydate": "2020-01-12T22:29:23", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-499"}, "text": "REGULAR CBT TAPE - VERSION 499    FILE:  612\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT499.FILE612\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 52 MEMBERS COUNTED; CUMULATIVE SIZE IS 21,018 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/12/20    22:29:23    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x12)\\x8f\\x01\\x12)\\x8f\\x009\\x00,\\x00,\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2012-10-24T00:39:27", "lines": 44, "newlines": 44, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  New update of File 612\nFrom:     Albert Cheng <albertcpcheng@hotmail.com>\nDate:     10/21/2012 11:24 PM\nTo:       <sbgolob@cbttape.org>\n\nHi Sam,\n\nI've updated file 612.\n\nSummary of the changes\n\n1. DSPACE is enhanced to display 3390 model number.\n2. New REXX utility to display SVC recording table to find out\n   which SVC are changed by 3rd party software after IPL\n3. New assembler program to catalogue a new datasets in a new IPL\n   pack which is used for z/OS version uograde.\n4. New assembler program BLOCATE to locate command in batch as\n   some installation do not allow to update IKJTSO00\n\nI also have a modified version of disassembler program which can\ndisassemble the new RI BRC instruction with label but it does not\nsupport 64 bit instruction.  Do you want me package with a new\nCBT file or within CBT 612?\n\nIt produces the following results:\n\nA000342  L     R15,A0010D8\n         LA    R1,A001034\n         BASR  R14,R15\n         LTR   R15,R15                 ;\n         JZ    A000372                     RI JUMP\n         MVC   708(8,R13),A0011BC\n         L     R3,120(,R9)\n         MVC   16(8,R3),A0011CC\n         ST    R15,8(,R3)\n         LHI   R8,20                       RI INSTR\n         ST    R8,172(,R13)\n         J     A000CEE                     RI JUMP\nA000372  OI    476(R13),X'20'\n         L     R15,A0010D8             ;\n\nRegards,\nAlbert\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01\\x14(o\\x01\\x14(o\\x01B\\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-10-13T00:00:00", "modifydate": "2014-10-13T01:42:21", "lines": 19, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Enhance LISTPDS (new option UNLOAD)\nFrom:     Albert Cheng <albertcpcheng@hotmail.com>\nDate:     10/10/2014 8:52 AM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nHi Sam,\n\nMy ex-colleague in UK requests me to enhance LISTPDS (CBT Tape\nFile 316) to add new option UNLOAD to create a unload file with\nexactly the same LRECL and BLKSIZE of the source PDS.  I also\nre-structure LISTPDS with jump instruction and the program only\nrequires 1 data register and one code register (i.e. The original\nversion requires 3 program code registers).  I put my updated\nversion of LISTPDS into file 612.  The LOCATE is also enhanced\nand remove the prolog/epilog macro.\n\nRegards,\nAlbert\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE03": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x007\\x01\\x16\\x01O\\x01\\x16\\x01O\\x12H\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2016-01-14T00:00:00", "modifydate": "2016-01-14T12:48:37", "lines": 26, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  The LOCATE HELP in FILE 874 is not up to date\nFrom:     \"Cheng, Albert CP \u00ddITD\u00a8\" <albertcheng@winglungbank.com>\nDate:     1/12/2016 10:37 PM\nTo:       \"sbgolob@cbttape.org\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nThe 'LOCATE' command does not need to be APF authorized if the user\ngives read access to the RACF FACILITY profile CSVDYNL.*.TEST.\n\nDEFINE RACF FACILITY PROFILE CSVDYNL.*.TEST\nCLASS      NAME\n-----      ----\nFACILITY   CSVDYNL.*.TEST (G)\n\nLOCATE DOES NOT NEED TO BE DEFINED AS AUTHORIZED COMMAND IN\nIKJTSO00. YOU MUST HAVE READ ACCESS RIGHT OF THE ABOVE\nRACF PROFILE.  YOU CAN THEN LINK-EDIT LOCATE WITH AC=0.\n\nBest Regards,\nAlbert Cheng\nInformation Technology Department\nWing Lung Bank Limited\nT: (852) 3508 0136     F: (852) 2783 9126\nEmail: albertcheng@winglungbank.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE612": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00\\x14\\x01 \\x01/\\x01 \\x01/\")\\x00\\x89\\x00\\x89\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-01-12T00:00:00", "modifydate": "2020-01-12T22:29:14", "lines": 137, "newlines": 137, "modlines": 0, "user": "CBT-499"}, "text": "//***FILE 612 is from Albert Cheng and contains handy TSO utilities *   FILE 612\n//*           that run on MVS.  DSPACE, DUASD and LOCATE are        *   FILE 612\n//*           originally from the CBT Tape.  They have been         *   FILE 612\n//*           enhanced to support the new functions of MVS such as  *   FILE 612\n//*           4-digit unit numbers, dynamic link libraries, and     *   FILE 612\n//*           so forth.  The utilities are described below.         *   FILE 612\n//*                                                                 *   FILE 612\n//*              email:   albertcpcheng@hotmail.com                 *   FILE 612\n//*                                                                 *   FILE 612\n//*           AVAILAS  - A REXX utility to display the current      *   FILE 612\n//*                      available address spaces.  As some task    *   FILE 612\n//*                      terminates, its address space is no longer *   FILE 612\n//*                      available for re-use and the number of     *   FILE 612\n//*                      available address space is decreased by    *   FILE 612\n//*                      one.  If it is dropped to zero, no new     *   FILE 612\n//*                      address space can be created.              *   FILE 612\n//*                                                                 *   FILE 612\n//*           BLOCATE  - Locate can find a module at LPA and it     *   FILE 612\n//*                      cannot find out which LPA libraries.       *   FILE 612\n//*                      BLOCATE is a batch program which scans     *   FILE 612\n//*                      the load module in DDNAME SYSLIB and then  *   FILE 612\n//*                      dynamic linklist libraries.                *   FILE 612\n//*                                                                 *   FILE 612\n//*           CATNEWDS - Generates IDCAMS DEFINE NONVSAM control    *   FILE 612\n//*                      statements to define only the new datasets *   FILE 612\n//*                      at the new IPL pack. It also generates     *   FILE 612\n//*                      IDCAMS CONTROL statements to re-catalog    *   FILE 612\n//*                      the datasets that are not catalog with     *   FILE 612\n//*                      DEVT(0000) and VOLUME(******).             *   FILE 612\n//*                                                                 *   FILE 612\n//*           DSPACE   - An assembler program to display the free   *   FILE 612\n//*                      space of a dasd.  This program is          *   FILE 612\n//*                      enhanced to used to PUTLINE and supports   *   FILE 612\n//*                      4 digits unit number. It is enhanced to    *   FILE 612\n//*                      display the 3390 model type. It is also    *   FILE 612\n//*                      enhanced to display the freespace by 3390  *   FILE 612\n//*                      model type.  (ie M09/M27/M54 which         *   FILE 612\n//*                      display the freespace the 3390 model       *   FILE 612\n//*                      type). EMPTYDSK is the new enhancement to  *   FILE 612\n//*                      display volume list with used utilization  *   FILE 612\n//*                      is zero. This utility is similar to CBT    *   FILE 612\n//*                      utility FREESPC.                           *   FILE 612\n//*                                                                 *   FILE 612\n//*           DUDASD   - An assembler prgram to display status of   *   FILE 612\n//*                      all the disk (ie ONLINE and OFFLINE).      *   FILE 612\n//*                      This has been enhanced to support wild     *   FILE 612\n//*                      card volume serial or by unit address      *   FILE 612\n//*                      range (ie DUO 1A20:1CFF or DUA 1B20:2FFF)  *   FILE 612\n//*                      for disaster recovery preparation.         *   FILE 612\n//*                      Download the output of DUA from            *   FILE 612\n//*                      production LPAR.  Load it into your smart  *   FILE 612\n//*                      phone and you can refer the the            *   FILE 612\n//*                      production dasd list in DR site without    *   FILE 612\n//*                      access the production LPAR.                *   FILE 612\n//*                                                                 *   FILE 612\n//*                      Tips: Copy TRAP macro into your SYSPROC    *   FILE 612\n//*                      Edit a new member and issue 'TRAP DUDASD'  *   FILE 612\n//*                      and save the file.                         *   FILE 612\n//*                                                                 *   FILE 612\n//*           ISPFST   - REXX to list all splits in your ISPF       *   FILE 612\n//*                      session, and what is in each split.        *   FILE 612\n//*                                                                 *   FILE 612\n//*           LISTPDS  - Enhance LISTPDS (CBT FILE 316). Add new    *   FILE 612\n//*                      option to unload a PDS to sequential file  *   FILE 612\n//*                      with exactly the same attribute as the     *   FILE 612\n//*                      source PDS.                                *   FILE 612\n//*                                                                 *   FILE 612\n//*           LOAD     - Programs load library in TSO XMIT format.  *   FILE 612\n//*                                                                 *   FILE 612\n//*           LOAD$    - JCL to restore load library.               *   FILE 612\n//*                                                                 *   FILE 612\n//*           LOCATE   - An assembler program to locate named       *   FILE 612\n//*                      command in either Nucleus, F/MLPA, LIBDEF  *   FILE 612\n//*                      ISPLLIB, ISPLLIB, TASKLIB, STEPLIB, LPA    *   FILE 612\n//*                      and Linklist libraries, SYSEXEC and        *   FILE 612\n//*                      SYSPROC.  Define RACF Facility profile     *   FILE 612\n//*                      CSVDYNL.*.TEST and grant yourself with     *   FILE 612\n//*                      READ access to this profile. The LOCATE    *   FILE 612\n//*                      command is no longer required to register  *   FILE 612\n//*                      as authorised program in IKJTSO00.         *   FILE 612\n//*                                                                 *   FILE 612\n//*                      The program is enhanced to use PUTLINE API *   FILE 612\n//*                      to display the output and you can run      *   FILE 612\n//*                      LOCATE as a batch job.                     *   FILE 612\n//*                                                                 *   FILE 612\n//*                      LOCATE HAS TWO ALIASes                     *   FILE 612\n//*                      ALIAS  FINDCMD - Search CLIST and EXEC     *   FILE 612\n//*                      ALIAS  FINDPRG - Search TASKLIB/LPA/       *   FILE 612\n//*                      LINKLST                                    *   FILE 612\n//*                                                                 *   FILE 612\n//*           QIODF    - A REXX utility display the currnet IODF    *   FILE 612\n//*                      name                                       *   FILE 612\n//*                                                                 *   FILE 612\n//*           REGSIZE  - A REXX utility display the in used region  *   FILE 612\n//*                      size                                       *   FILE 612\n//*                                                                 *   FILE 612\n//*           SHOWPPT  - An assembler batch program to display PPT  *   FILE 612\n//*                      and the orginal source is from CBT 835.    *   FILE 612\n//*                                                                 *   FILE 612\n//*           SRCHLOG  - MVS SYSLOG message can have more than one  *   FILE 612\n//*                      line. This utility can display multiple    *   FILE 612\n//*                      lines if the string is found from SYSLOG   *   FILE 612\n//*                      with RECFM VB or VBA                       *   FILE 612\n//*                                                                 *   FILE 612\n//*           SRCHLOGF - MVS SYSLOG message can have more than one  *   FILE 612\n//*                      line. This utility can display multiple    *   FILE 612\n//*                      lines if the string is found from SYSLOG   *   FILE 612\n//*                      with RECFM FB or FBA                       *   FILE 612\n//*                                                                 *   FILE 612\n//*           SVCNO    - A REXX utility to display SVC description  *   FILE 612\n//*                                                                 *   FILE 612\n//*           SVCUPDTE - A REXX utility to display SVC recording    *   FILE 612\n//*                      table to find out which SVC EPA are        *   FILE 612\n//*                      modified by third party software after     *   FILE 612\n//*                      IPL.                                       *   FILE 612\n//*                                                                 *   FILE 612\n//*           SYSINCRD - STC does not support in-stream data (ie    *   FILE 612\n//*                      SYIN DD *).  This program generates SYSIN  *   FILE 612\n//*                      control statement from PARM for STC.       *   FILE 612\n//*                                                                 *   FILE 612\n//*           HDSPACE  - HELP member of DSPACE                      *   FILE 612\n//*                                                                 *   FILE 612\n//*           HDUDASD  - HELP member of DUDASD                      *   FILE 612\n//*                                                                 *   FILE 612\n//*           HLOCATE  - HELP member of LOCATE                      *   FILE 612\n//*                                                                 *   FILE 612\n//*           TRAP     - ISPF EDIT MACRO to trap the output of      *   FILE 612\n//*                      DUDASD and DSPACE. Note LOCATE use TPUT    *   FILE 612\n//*                      so the output cannot be trap.              *   FILE 612\n//*                                                                 *   FILE 612\n//*           VIEWPARM - REXX to allow you to look at (VIEW)        *   FILE 612\n//*                      any valid PARMLIB member, directly         *   FILE 612\n//*                      from the IPA.                              *   FILE 612\n//*                                                                 *   FILE 612\n//*     MACRO - $EPILOG, $PROLOG, @ENT, @RET, JVDENTER, JVDEQU and  *   FILE 612\n//*             JVDLEAVE are obsolete.                              *   FILE 612\n//*                                                                 *   FILE 612\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALOCLPA": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\t\\x01\\x142\\x9f\\x01\\x142\\x9f\\x17\\x15\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2014-11-25T00:00:00", "modifydate": "2014-11-25T17:15:09", "lines": 26, "newlines": 26, "modlines": 0, "user": "REXX"}, "text": "/* REXX EXEC invoked by LOCATE                                     */\n/* Author : Albert Cheng       25 Nov 2014                         */\n/* Function : Allocate LPALST libraries                            */\n/*******************************************************************/\n arg module\n NUMERIC DIGITS 16\n cvt  = addc(16,'0')                    /* fetch CVT              */\n smext= addc(cvt,'4ac')                 /* fecth CVTSMEXT         */\n eplps= addc(smext,'38')                /* fetch CVTEPLPS         */\n tcnt = addc(eplps,'4')                 /* fetch LPATCNT          */\n loc  = eplps + 8\n   len   = C2D(STORAGE(d2x(loc),1))\n lpads =  \"'\"||STORAGE(d2x(loc+1),len)||\"'\"\n loc = loc + 45\n Do i = 1 to tcnt-1\n   len   = C2D(STORAGE(d2x(loc),1))\n   lpads = lpads||\", '\"||STORAGE(d2x(loc+1),len)||\"'\"\n   loc   = loc + 45\n End\n/* say lpads                            */\n Address TSO\n 'Alloc fi(LPALIB) da('lpads') SHR'\nEXIT 0\n/* Internal Function to fetch address   */\naddc: ARG ad1,ad2\nRETURN C2D(STORAGE(D2X(ad1+X2D(ad2)),4))   /* ad1 = dec, ad2 = hex */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASSEMBLE": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x004\\x01\\x195\\x9f\\x01\\x195\\x9f#B\\x00\\xff\\x00\\xff\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-25T00:00:00", "modifydate": "2019-12-25T23:42:34", "lines": 255, "newlines": 255, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXXJ JOB XXX,'ASSEMBLE',CLASS=A,REGION=8M,\n//         MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=&SYSUID\n//*----------------------------------------------\n//* ASSEMBLE DSPACE\n//*----------------------------------------------\n//DSPACE  EXEC PGM=ASMA90,\n//             PARM='NODECK,OBJECT,SYSPARM(XA)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(DSPACE)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n/*\n//LINK    EXEC PGM=IEWL,COND=(5,LT,DSPACE),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB <-- YOUR LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  NAME DSACE(R)\n//*----------------------------------------------\n//* ASSEMBLE DUDASD\n//*----------------------------------------------\n//DUDASD  EXEC PGM=ASMA90,\n//             PARM='NODECK,OBJECT,SYSPARM(XA)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(DUDASD)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n/*\n//LINK    EXEC PGM=IEWL,COND=(5,LT,DUDASD),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB <-- YOUR LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  NAME DUDASD(R)\n//*----------------------------------------------\n//* ASSEMBLE LOCATE TO APF AUTHORISED LOADLIB\n//*----------------------------------------------\n//LOCATE  EXEC PGM=ASMA90,\n//             PARM='BATCH,NODECK,OBJECT,NOCOMPAT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(LOCATE)\n//         DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(LPALIB)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n/*\n//LINK    EXEC PGM=IEWL,COND=(5,LT,LOCATE),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB <-- YOUR APF LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//ISPLIB   DD  DISP=SHR,DSN=ISP.SISPLOAD\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  ENTRY LOCATE\n  INCLUDE ISPLIB(ISPLINK)\n  NAME LOCATE(R)\n//*----------------------------------------------\n//* ASSEMBLE BLOCATE TO APF AUTHORISED LOADLIB\n//*----------------------------------------------\n//BLOCATE EXEC PGM=ASMA90,\n//             PARM='NODECK,OBJECT,SYSPARM(XA)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(LOCATE)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n/*\n//LINK    EXEC PGM=IEWL,COND=(5,LT,BLOCATE),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB <-- YOUR APF LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  NAME BLOCATE(R)\n//*----------------------------------------------\n//* ASSEMBLE CATNEWDS\n//*----------------------------------------------\n//CATNEWDS EXEC PGM=ASMA90,\n//             PARM='NODECK,OBJECT,SYSPARM(XA)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(CATNEWDS)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//LINK    EXEC PGM=IEWL,COND=(5,LT,CATNEWDS),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB <-- YOUR APF LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  NAME CATNEWDS(R)\n//*----------------------------------------------\n//* ASSEMBLE SYSINCRD\n//*----------------------------------------------\n//SYSINCRD EXEC PGM=ASMA90,\n//             PARM='NODECK,OBJECT,SYSPARM(XA)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(SYSINCRD)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//LINK    EXEC PGM=IEWL,COND=(5,LT,PARMCARD),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  ALIAS PARMCARD\n  NAME SYSINCRD(R)\n//*----------------------------------------------\n//* ASSEMBLE LISTPDS\n//*----------------------------------------------\n//LISTPDS EXEC PGM=ASMA90,\n//             PARM='BATCH,NODECK,OBJECT,NOCOMPAT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(LISTPDS)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//LINK    EXEC PGM=IEWL,COND=(5,LT,LISTPDS),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  NAME LISTPDS(R)\n//*----------------------------------------------\n//* ASSEMBLE SRCHLOG\n//*----------------------------------------------\n//SRCHLOG EXEC PGM=ASMA90,\n//             PARM='BATCH,NODECK,OBJECT,NOCOMPAT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(SRCHLOG)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//LINK    EXEC PGM=IEWL,COND=(5,LT,SRCHLOG),\n//             PARM='LIST,LET,XREF,MAP'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  NAME SRCHLOG(R)\n//*----------------------------------------------\n//* ASSEMBLE SHOWPPT\n//*----------------------------------------------\n//SHOWPPT EXEC PGM=ASMA90,\n//             PARM='BATCH,NODECK,OBJECT,NOCOMPAT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=XXXXXXX.CBT612.PDS(SHOWPPT)\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//LINK    EXEC PGM=IEWL,COND=(5,LT,SHOWPPT),\n//             PARM='LIST,LET,XREF,MAP,AC=1'\n//SYSLMOD  DD  DISP=SHR,DSN=XXXXXXX.LOADLIB\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),\n//             UNIT=SYSDA,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n  NAME SHOWPPT(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AVAILAS": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x005\\x01\\x12)o\\x01\\x12)o\\x10X\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc1\\xc3\\xc8\\xc5\\xd5\\xc7@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2012-10-22T10:58:35", "lines": 15, "newlines": 15, "modlines": 0, "user": "ACHENG"}, "text": "/* REXX EXEC to list available address space from ASVT             */\n/*   are active                                                    */\n/* IEF352I ADDRESS SPACE UNAVAILABLE                               */\n/* Author : Albert Cheng                                           */\n/*******************************************************************/\n NUMERIC DIGITS 10\n cvt  = addc(16,'00')                   /* fetch CVT              */\n asvt = addc(cvt,'022c')                /* fetch asvt             */\n aav  = addc(ASVT,'01e0')               /* fetch aav              */\n nm = STORAGE(D2X(aav),0)\n SAY 'available adrress spaces =  ' aav\nexit 0\n/* Internal Function to fetch address   */\naddc: ARG ad1,ad2\nRETURN C2D(STORAGE(D2X(ad1+X2D(ad2)),4))   /* ad1 = dec, ad2 = hex */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLOCATE": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00!\\x01\\x18\\x11o\\x01\\x18\\x11o\\tR\\x01h\\x01h\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2018-04-26T00:00:00", "modifydate": "2018-04-26T09:52:21", "lines": 360, "newlines": 360, "modlines": 0, "user": "ASM"}, "text": "***********************************************************************\n*\n*        BLOCATE IS A BATCH PROGRAM USED TO LOCATE A NAMED MODULE IN\n*        JPA, JOBLIB, STEPLIB, LPA LIBRARIES, SYSLIB (OPTIONAL) AND\n*        DYNAMIC LINKLIST.\n*\n*        BLDL SEARCH SEQUENCE\n*               - JOBLIB\n*               - STEPLIB\n*               - SYSLIB  (OPTIONAL)\n*        LPA SEARCH SEQUENCE\n*               - FLPA\n*               - PLPA\n*               - LPALIB (IF IT IS LPA MODULE)\n*        LINKLIST\n*        NUCLEUS\n*\n*   ENHANCEMENT:\n*  @01   IF THE LOCATED MODULE IS IN LPA, DISPLAY THE SOURCE LPA\n*        LIBRARY. USE SWAREQ TO RETRIEVE SWA TO SUPPORT SWA ABOVE\n*        16MB.\n*                                         ALBERT CHENG 12 NOV 2014\n*  @02   DEFINE RACF FACILITY PROFILE CSVDYNL.*.TEST\n*        USER MUST HAVE READ ACCESS TO THE ABOVE RACF PROFILE\n*        LINK-EDIT BLOCATE WITH AC=0.\n*                                         ALBERT CHENG 24 NOV 2014\n***********************************************************************\nBLOCATE  CSECT\nBLOCATE  AMODE 24\nBLOCATE  RMODE 24\n         BAKR  R14,0                   SAVE REGISTER INTO LINKAGE STACK\n         LR    R12,R15\n         USING BLOCATE,R12             ESTABLISH ADDRESSIBILITY\n         L     R10,0(R1)               GET PARM FIELD ADDRESS\n         SR    R3,R3                   CLEAR WORK REG\n         ICM   R3,3,0(R10)             PICK UP PARM LENGTH\n         JZ    ERROR                   NO PARM INFO ENTERED\n         BCTR  R3,R0               DECREMENT R3 FOR EXEC\n         EX    R3,MOVENAME         MOVE TO LIST FOR LOAD\n         MVC   BLDLNAME(8),NAME    MOVE NAME TO BLDL LIST\n         MVC   MSG2NAME(8),NAME    MOVE NAME TO MSG2\n         OPEN  (PRINT,(OUTPUT))\n         LTR   R15,R15\n         JNZ   ERROR3\n         L     R3,X'21C'      LOAD CURRENT TCB\n         USING TCB,R3\n         L     R3,TCBJSTCB\nTCBLOOP  SR    R15,R15\n         ICM   R15,7,TCBJPQB  LOAD JOB PACK QUEUE\n         USING CDENTRY,R15\n         JZ    NEXTTCB        NO, SEARCH THE MLPA/FLPA\n         J     FIRSTJPA\nNEXTJPA  L     R15,CDCHAIN    1ST CDE ON THE QUEUE\n         LTR   R15,R15        ANYTHING ON THE QUEUE?\n         JZ    NEXTTCB        NO, SEARCH THE MLPA/FLPA\nFIRSTJPA CLC   NAME,CDNAME    NAMES EQUAL?\n         JNE   NEXTJPA        YES, FOUND\n         XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         TM    CDATTR,CDMIN   MINOR CDE?\n         JZ    CDEMAJ1        NO, CONTINUE\n         MVC   JPATRUE,CDNAME COPY TRUE NAME\n         L     R15,CDXLMJP    LOCATE MAJOR CDE\nCDEMAJ1  DS    0H\n         MVC   JPANAME,CDNAME COPY MODULE NAME\n         UNPK  JPAADR(9),CDENTPT(5)   UNPACK ADDRESS FOR PRINT\n         TR    JPAADR(8),TRTABLE-240  MAKE PRINTABLE\n         MVI   JPAADR+8,C' '          CLEAR GARBAGE FROM UNPACK\n         UNPK  JPAUSE(5),CDUSE(3)     UNPACK ADDRESS FOR PRINT\n         TR    JPAUSE(4),TRTABLE-240  MAKE PRINTABLE\n         MVI   JPAUSE+5,C' '          CLEAR GARBAGE FROM UNPACK\n         CLI   JPATRUE,C' '   ALIAS NAME EXIST ??\n         JNE   CDEMIN1        BRANCH IF YES\n         MVC   TEXT+0(L'MSG5),MSG5    DISPLAY MAJOR NAME\n         PUT   PRINT,TEXT\n         J     LPAQ           SCAN LPA\nCDEMIN1  MVC   TEXT+0(LMSG5A),MSG5   DISPLAY MAJOR AND MINOR NAME\n         PUT   PRINT,TEXT\nNEXTTCB  ICM   R3,15,TCBNTC\n         JNZ   TCBLOOP\n         DROP  R15\nLPAQ     L     R3,16          GET CVT ADDR\n         L     R15,CVTQLPAQ-CVT(,R3)   ACTIVE LPA QUEUE ADDRESS\n         USING CDENTRY,R15\n         LTR   R15,R15        ANYTHING ON THE QUEUE?\n         JZ    DIRSRCH        NO, SEARCH THE LPA DIRECTORY\n         J     FIRSTLPA\nCDELOOP2 DS    0H\n         LTR   R15,R15        ANYTHING ON THE QUEUE?\n         JZ    DIRSRCH        NO, SEARCH THE LPA DIRECTORY\n         CLC   NAME,CDNAME    NAMES EQUAL?\n         JE    CDECHK2        YES, FOUND\nFIRSTLPA L     R15,CDCHAIN    1ST CDE ON THE QUEUE\n         J     CDELOOP2\nCDECHK2  XC    RETCODE,RETCODE  INDICATE MODULE FOUND\n         TM    CDATTR,CDMIN     MINOR CDE?\n         JZ    CDEMAJ2          NO, CONTINUE\n         MVC   FLPATRUE,CDNAME  COPY TRUE NAME\n         L     R15,CDXLMJP      LOCATE MAJOR CDE\nCDEMAJ2  DS    0H\n         MVC   FLPANAME,CDNAME  COPY MODULE NAME\n         UNPK  FLPAADR(9),CDENTPT(5)   UNPACK ADDRESS FOR PRINT\n         TR    FLPAADR(8),TRTABLE-240  MAKE PRINTABLE\n         MVI   FLPAADR+8,C' '          CLEAR GARBAGE FROM UNPACK\n         CLI   FLPATRUE,C' '  ALIAS NAME EXIST ??\n         JNE   CDEMIN2        BRANCH IF YES\n         MVC   TEXT+0(LMSG4),MSG4  DISPLAY MAJOR NAME\n         PUT   PRINT,TEXT\n         J     DIRSRCH        SCAN LPA\nCDEMIN2  MVC   TEXT+0(LMSG4A),MSG4  DISPLAY MAJOR AND MINOR NAME\n         PUT   PRINT,TEXT\n         DROP  R15\nDIRSRCH  LM    R0,R1,NAME     PICK UP THE NAME\n         L     R6,CVTLPDSR-CVT(,R3)     LPA SEARCH ROUTINE ADDR\n         DS    0Y(R8,R9)      ROUTINES USES THESE REGISTERS\nSRCHLPA  BALR  R14,R6         SEARCH LPA DIRECTORY\n         J     GOTIT          IT'S THERE\n         J     NOTLPA         BRANCH IF NOT THERE\nGOTIT    XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         LR    R4,R0          PUT LPDE ADDR WHERE IT CAN DO SOME GOOD\n         USING LPDE,R4        INFORM THE ASSEMBLER\n         TM    LPDEATTR,LPDEMIN        MINOR LPDE?\n         JZ    LPTRUE                  NO, PROCESS MAJOR\n         MVC   TRUENM,LPDEMJNM         YES, COPY TRUE NAME\n         LM    R0,R1,LPDEMJNM          PUT IT IN REGS\n         J     SRCHLPA                 GET MAJOR LPDE\nLPTRUE   UNPK  LENGTH(7),LPDEXTLN+1(4) UNPACK LENGTH FOR PRINT\n         TR    LENGTH(6),TRTABLE-240   MAKE PRINTABLE\n         MVI   LENGTH+6,C' '           CLEAR GARBAGE FROM UNPACK\n         UNPK  ADDRESS(9),LPDEXTAD(5)  UNPACK ADDRESS FOR PRINT\n         TR    ADDRESS(8),TRTABLE-240  MAKE PRINTABLE\n         MVI   ADDRESS+8,C' '          CLEAR GARBAGE FROM UNPACK\n         DROP  R4\nLPAMSG   CLI   TRUENM,C' '    IS THIS AN ALIAS?\n         JNE   TPUTA          YES, ISSUE ALIAS TPUT\n         MVC   TEXT+0(LMSG1),MSG1 MESSAGE WITHOUT ALIAS NAME\n         PUT   PRINT,TEXT\n*        J     NOTLPA         SEE IF IN LNKLST ALSO                @01D\n         J     GETLPADS                                            @01A\nTPUTA    MVC   TEXT+0(LMSG1A),MSG1  MESSAGE WITH ALIAS NAME\n         PUT   PRINT,TEXT\nGETLPADS OPEN  (LPALIB,(INPUT))                                    @01A\n         LTR   R15,R15                                             @01A\n         JNZ   NOTLPA         BRANCH IF OPEN ERROR                 @01A\n         BLDL  LPALIB,LIST    LOCATE MODULE IN LPALIB LIBRARIES    @01A\n         LTR   R15,R15        CHECK RETURN CODE                    @01A\n         JNZ   NOTLPA         NOT FOUND IN LPALIB LIBRARY          @01A\n         SR    R2,R2          CLEAR FOR IC                         @01A\n         IC    R2,BLDLK       PICK UP CONCATINATION NUMBER         @01A\n         MHI   R2,20          CONCATINATION DSNAME OFFSET IN TIOT  @01A\n         EXTRACT TIOTADR,FIELDS=(TIOT)  EXTRACT THE ADDRESS OF TIOT@01A\n         L     R1,TIOTADR                                          @01A\n         AHI   R1,24              LOCATE THE FIRST TIOT ENTRIES    @01A\nNEXTIOT  CLC   4(6,R1),MSG6       DDNAME = LPALIB ??               @01A\n         JE    GETDSN                                              @01A\n         AHI   R1,20              ADD LENGTH OF TIOT ENTRY         @01A\n         J     NEXTIOT                                             @01A\nGETDSN   AR    R2,R1              LOCATE CORRECT DSN TIOT ENTRIES  @01A\n         MVC   SW_EPA+4(4),12(R2)    GET JFCB TOKEN                @01A\n         L     R4,SWAPAPTR                                         @01A\n         USING ZB505,R4           ESTABLISH ADDRESSABILITY TO EPA  @01A\n         SAM31                         SWITCH TO 31 BIT ADDRESS    @01A\n*  USE SWAREQ TO CONVERT SWA TOKEN INTO REAL ADDRESS               @01A\n         SWAREQ FCODE=RL,EPA=SWAPAPTR,UNAUTH=YES,MF=(E,SWAPARMS)   @01A\n         LTR   R15,R15                                             @01A\n         JNZ   CLSLPA                                              @01A\n         L     R4,SW_EPA               POINTS TO JFCB              @01A\n         MVC   LPADSN,JFCBDSNM-JFCB(R4)                            @01A\n         SAM24                         SWITCH TO 24 BIT ADDRESS    @01A\n         MVI   TEXT,C' '                                           @01A\n         MVC   TEXT+1(L'TEXT-1),TEXT                               @01A\n         MVC   TEXT+0(LMSG6A),MSG6                                 @01A\n         PUT   PRINT,TEXT                                          @01A\nCLSLPA   CLOSE LPALIB                                              @01A\nNOTLPA   DS    0H\n         RDJFCB (SYSLIB)                                           @01A\n         LTR   R15,R15                                             @01A\n         JNZ   DYNAMIC                                             @01A\n         OPEN  (SYSLIB,(INPUT))\n         LTR   R15,R15\n         JNZ   ERROR2\n         BLDL  SYSLIB,LIST    LOCATE MODULE IN SYSLIB\n         LTR   R15,R15        CHECK RETURN CODE\n         JNZ   DYNAMIC        NOT FOUND IN SYSLIB\n         SR    R1,R1          CLEAR FOR IC\n         IC    R1,BLDLK       PICK UP CONCATINATION NUMBER\n         XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         TM    BLDLC,X'80'    IS THIS AN ALIAS?\n         JZ    NOTALIAS       NO, MAJOR NAME\n         MVC   MODTYPE(5),=C'MINOR'   INDICATE MODULE IS ALIAS\nNOTALIAS CLI   BLDLZ,X'00'    PRIVATE LIBRARY?\n         JE    CONCAT         YES, ALL SET\n         MVC   LIBTYPE(12),=C'JOB/STEP LIB' MODIFY MESSAGE TEXT\n         CLI   BLDLZ,X'01'    LINKLIB/LINK LIST LIBRARY?\n         JH    CONCAT         NO, ALL SET\nDYNAMIC  DS    0H             HANDLE DYNAMIC LINKLIST\n         MVC   LIBTYPE(12),=C'DYNAM LNKLST'   MODIFY MESSAGE TEXT\n*        MODESET MODE=SUP,KEY=ZERO                                 @02D\n         CSVDYNL REQUEST=TEST,LNKLSTNAME=LSTNAME,MODNAME=BLDLNAME,     X\n               RETCODE=CSVRET,RSNCODE=CSVRSN,FOUNDDSNAME=DSN\n*        MODESET MODE=PROB,KEY=NZERO                               @02D\n         LTR   R15,R15\n         JNZ   NOTLINK\n         J     DISPLAY\nCONCAT   XC    DBLWD,DBLWD    CLEAR FOR CONVERT\n         CVD   R1,DBLWD       CONVERT TO DECIMAL\n         MVI   DSN,C'('       ADD LEADING PAREN\n         UNPK  DSN+1(2),DBLWD+6(2) UNPACK FOR PRINT\n         OI    DSN+2,X'F0'    MAKE PRINTABLE\n         MVI   DSN+3,C')'     ADD TRAILING PAREN\nDISPLAY  MVC   TEXT+0(LMSG2),MSG2\n         CLI   DSN,C' '\n         JE    NOTLINK\n         PUT   PRINT,TEXT\n         J     CLOSEF\nEXIT     OC    RETCODE,RETCODE ANY MESSAGE ISSUED (MODULE FOUND) ?\n         JZ    RETURN         YES, ALL DONE\n         MVC   TEXT+0(LMSG0),MSG0      INFORM USER\n         PUT   PRINT,TEXT\nCLOSEF   DS    0H\n         LA    R15,SYSLIB\n         TM    DCBOFLGS-IHADCB(R15),DCBOFOPN     IS SYSLIB OPENED? @01A\n         JNO   CLOSE2                            SKIP IF NOT OPEN  @01A\n         CLOSE SYSLIB                                              @01A\nCLOSE2   CLOSE PRINT                                               @01C\nRETURN   DS    0H\n         L     R15,RETCODE    SET RETURN CODE\n         PR\nNOTLINK  DS    0H\n         LA    R1,BLDLNAME\n         NUCLKUP NAME=(1),ADDR=(3)   INVOKE NUCLEUS MAP LOOKUP SRV\n         LTR   R15,R15\n         JNZ   EXIT\n         ST    R3,DBLWD\n         UNPK  NADDRESS(9),DBLWD(5)   UNPACK ADDRESS FOR PRINT\n         TR    NADDRESS(8),TRTABLE-240 MAKE PRINTABLE\n         MVI   NADDRESS+8,C' ' CLEAR GARBAGE FROM UNPACK\n         MVC   MSG3NAME,BLDLNAME\n         MVC   TEXT+0(LMSG3),MSG3          DISPLAY NUCLUES MODULE\n         PUT   PRINT,TEXT\n         J     CLOSEF\nMOVENAME MVC   NAME(0),2(R10) MOVE NAME FOR LOAD\nERROR    DS    0H\n         WTO   'NO INPUT PARAMETER'\n         J     RETURN\nERROR2   DS    0H\n         WTO   'SYSLIB FILE OPEN ERROR'\n         J     RETURN\nERROR3   DS    0H\n         WTO   'SYSPRINT FILE OPEN ERROR'\n         J     RETURN\n*-------------------------------------------------------------------\nLIST     DC    H'1',H'14'     BLDLLIST\nBLDLNAME DC    CL8' '         BLDL NAME OF MODULE\nBLDLTTR  DC    XL3'00'        TTR OF MODULE\nBLDLK    DC    X'00'          CONCATINATION NUMBER\nBLDLZ    DC    X'00'          LOCATION\nBLDLC    DC    X'00'          ENTRY TYPE\n*-------------------------------------------------------------------\nMSG0     DS    0F\n         DC    C'REQUESTED MODULE NOT FOUND IN EITHER LPA, '\n         DC    C'LNKLST, NUCLEUS OR JOB/TASK/STEPLIB'\nLMSG0    EQU   *-MSG0                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG1     DS    0F\n         DC    C'PLPA MODULE   '\nNAME     DC    CL8' '\n         DC    C' IS: '\nLENGTH   DC    CL6' '\n         DC    C' BYTES AT '\nADDRESS  DC    CL8' '                MVS/XA\nLMSG1    EQU   *-MSG1                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nTRUENM   DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG1A   EQU   *-MSG1                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG2     EQU   *\nMSG2NAME DC    CL8' '\n         DC    C' FOUND AS A '\nMODTYPE  DC    C'MAJOR'\n         DC    C' NAME IN '\nLIBTYPE  DC    C'PRIVATE LIB  '\nDSN      DC    CL36' '\nLMSG2    EQU   *-MSG2         SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG3     DS    0F\n         DC    C'NUCLEUS MODULE : '\nMSG3NAME DC    CL8' '\n         DC    C' BYTES AT '\nNADDRESS DC    CL9' '                NUCLEUS ADDRESS\nLMSG3    EQU   *-MSG3                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG4     DS    0F\n         DC    C'F/MLPA MODULE '\nFLPANAME DC    CL8' '\n         DC    C' AT '\nFLPAADR  DC    CL8' '                FLPA ADDRESS\nLMSG4    EQU   *-MSG4                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nFLPATRUE DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG4A   EQU   *-MSG4                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG5     DS    0F\n         DC    C'JPA MODULE '\nJPANAME  DC    CL8' '\n         DC    C' AT '\nJPAADR   DC    CL8' '                JPA ADDRESS\n         DC    CL14' IN USE COUNT '\nJPAUSE   DC    CL4' '\nLMSG5    EQU   *-MSG5                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nJPATRUE  DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG5A   EQU   *-MSG5                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG6     DS    0F                                                  @01A\n         DC    C'LPALIB MODULE RESIDES  IN '                       @01A\nLPADSN   DC    CL44' '                                             @01A\nLMSG6A   EQU   *-MSG6                SIZE OF MESSAGE               @01A\n*-------------------------------------------------------------------\nTIOTADR  DS    A                                                   @01A\nSWAPAPTR DC    A(SW_EPA)                                           @01A\nSW_EPA   DC    XL28'00'                                            @01A\nSWAPARMS SWAREQ MF=L,UNAUTH=YES                                    @01A\nTEXT     DS    CL79\nCSVRET   DC    F'0'\nCSVRSN   DC    F'0'\nTRTABLE  DC    C'0123456789ABCDEF' TRANSLATE TABLE\nLSTNAME  DC    CL16'CURRENT'\nBLANKS   DC    CL81' '        BLANKS\nDBLWD    DC    D'0'           WORKAREA\nADDR     DC    F'0'           ADDRESS WORK AREA\nECB      DC    F'0'           DUMB ECB FOR PARSE\nRETCODE  DC    F'4'           RETURN CODE (AND MSG SWITCH)\n*\n*   INPUT FILES\n*\nLPALIB   DCB   DDNAME=LPALIB,MACRF=R,DSORG=PO,EODAD=EXIT           @01A\nSYSLIB   DCB   DDNAME=SYSLIB,MACRF=R,DSORG=PO,EODAD=EXIT,EXLST=JFCBADR\nJFCBADR  DS    0F\n         DC    X'87'\n         DC    AL3(JFCB)\nJFCB     DS    0C\n         IEFJFCBN                     JFCB MAPPING\n*\n*   OUTPUT FILES\n*\nPRINT    DCB   DDNAME=SYSPRINT,                                        X\n               MACRF=PM,                                               X\n               DSORG=PS,                                               X\n               RECFM=F,                                                X\n               LRECL=79\n         IKJTCB\n         IHALPDE\n         IHACDE\n         IEFJESCT\n*        IEFZB505\n         IEFZB505 LOCEPAX=YES\n         DCBD  DSORG=PO\n         CVT DSECT=YES,LIST=NO\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATNEWDS": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x12)o\\x01\\x12)o\\x10X\\x00\\xef\\x00\\xef\\x00\\x00\\xc1\\xc3\\xc8\\xc5\\xd5\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2012-10-22T10:58:35", "lines": 239, "newlines": 239, "modlines": 0, "user": "ACHENG"}, "text": "         TITLE 'CATALOG ALL THE NEW DATASETS AT A NEW IPL PACK'\n**********************************************************************\n*  NAME        -   CATNEWDS                                          *\n*                                                                    *\n*  FUNCTION    -   READ THE VTOC OF A IPL DISK PACK (DDNAME NEWIPL)  *\n*                  AND CHECK EVERY NONVSAM DATASET IN THE NEW        *\n*                  IPLPACK TO VERIFY THE DATASET IS CATALOGED OR NOT *\n*                  IF THE CATALOG ENTRY DOES NOT EXIST, IT WILL      *\n*                  GENERATE IDCAMS CONTROL STATEMENTS TO DELETE AND  *\n*                  AND DEFINE THE NEW NONVSAM DATASETS.              *\n*                                                                    *\n*                  NOTE: YOUR INSTALLATION MAY PUT THE SYSTEM FILES  *\n*                  TO NON-IPL PACK AND YOU MUST VERIFY THE IDCAMS    *\n*                  CONTROL STATEMENTS TO REMOVE THE IDCAMS STATEMENTS*\n*                  THAT IT IS UNNECESSARY.                           *\n*                                                                    *\n*  SYNTAX      -   CATNEWDS                                          *\n*                                                                    *\n*  AUTHOR      -   ALBERT CHENG                                      *\n*                                                                    *\n*  VERSION     -   Z/OS 12                                           *\n*                                                                    *\n*  DATE        -   SEPT 1992 AND REVISED IN 2012                     *\n*                                                                    *\n*  OUTPUT      -   IDCAMS CONTROL STATEMENTS TO CATALOG NEW DATASETS *\n*                  IF THE CATALOG IS ALREADY EXISTED, IT GENERATES   *\n*                  AMS DELETE STATEMENT TO DELETE THE CATALOG ENTRY  *\n*                  BEFORE DEFINING THE NON-VSAM CATALOG ENTRIES. THIS*\n*                  PROGRAM ALSO GENERATES IDCAMS CONTROL STATEMENT   *\n*                  (IE UNDER DDNAME FALLBACK) TO UNDO THE CATALOG    *\n*                  CHANGE IF FALLBACK OF THE CATALOG UPDATE IS       *\n*                  REQUIRED.                                         *\n*                                                                    *\n*     //CATNEWDS EXEC PGM=CATNEWDS                                   *\n*     //STEPLIB  DD  DISP=SHR,DSN=LOADLIB,                           *\n*     //         UNIT=DISK,VOL=SER=XXXXXX                            *\n*     //CATALOG  DD  DISP=SHR,DSN=XXXX.CUTIN.CNTL(PARMCAT),          *\n*     //         UNIT=DISK,VOL=SER=XXXXXX                            *\n*     //FALLBACK DD  DISP=SHR,DSN=XXXX.FALLBK.PARM(PARMBACK),        *\n*     //         UNIT=DISK,VOL=SER=XXXXXX                            *\n*     //NEWIPL   DD  DISP=SHR,UNIT=SYSALLDA,VOL=SER=XXXXXX           *\n*     //SYSPRINT DD  DUMMY                                           *\n*     //SYSUDUMP DD  SYSOUT=*                                        *\n*                                                                    *\n* ABSTRACT                                                           *\n* @01 USE BAKR AND PR INSTR                            AC 04/19/2012 *\n*                                                                    *\n**********************************************************************\nCATNEWDS CSECT\n         BAKR  R14,0                   SAVE RSA IN LINKAGE STACK  @01A\n         USING CATNEWDS,R12            MAKE R12 BASE ADDRESS REG\n         LR    R12,R15                 PUT BASE ADDRESS IN GR12\n         LA    R11,SAVEAREA            GET @ CALLED RSA\n         ST    R11,8(R13)              STORE IN CALLING RSA\n         ST    R13,SAVEAREA+4          STORE CALLING RSA IN CALLED RSA\n         LR    R13,R11                 SET GR13 TO CALLED RSA\n*---------------------------------------------------------------------*\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*        R3  -  ADDRESS OF NEWIPL DEB                                 *\n*---------------------------------------------------------------------*\n         RDJFCB (NEWIPL)\n         LTR   R15,R15\n         BNZ   NO_NEWIPL           BRANCH IF DDNAME IS NOT SPECIFIED\n         LA    R15,JFCB\n         USING JFCB,R15\n         MVI   JFCBDSNM,X'04'\n         MVC   JFCBDSNM+1(43),JFCBDSNM GENERATE DSN FOR FMT4\n         MVI   JFCBELNM,C' '       CLEAR ANY MEMBER NAME\n         MVC   JFCBELNM+1(7),JFCBELNM\n         OI    JFCBTSDM,JFCNWRIT   SUPPRESS REWRITE OF JFCB\n         DROP  R15\n         OPEN  (NEWIPL,(INPUT)),TYPE=J\n         LA    R15,NEWIPL\n         USING IHADCB,R15\n         TM    DCBOFLGS,DCBOFOPN      OPEN OK?\n         SR    R3,R3\n         ICM   R3,7,DCBDEBAD+1\n         OPEN  (OUTFILE1,OUTPUT)\n         LTR   R15,R15\n         BNZ   OPEN_ERROR1\n         OPEN  (OUTFILE2,OUTPUT)\n         LTR   R15,R15\n         BNZ   OPEN_ERROR2\n         XC    BUFLIST(BFLHLN+BFLELN),BUFLIST   CLEAR BUFFER LIST\n         OI    BFLHFL,BFLHDSCB        DSCBS TO BE READ WITH BUFFER\n         MVI   BFLHNOE,1              ONE BUFFER LIST ENTRY\n         LA    R4,DS1FMTID            ADDRESS OF DSCB BUFFER\n         ST    R4,BFLEBUF             PLACE IN BUFFER LIST\n         MVI   BFLELTH,DSCBLTH        DATA PORTION OF DSCB READ - DSN\n*                                     SUPPLIED IN CVPL\n         MVC   DS1DSNAM,BLANKS        MOVE IN STARTING DATA SET NAME\n*                                     WORKAREA\n         CVAFSEQ DEB=(R3),            READ FIRST DSCB                  X\n               BUFLIST=BUFLIST,                                        X\n               MF=(E,CVPL)\n         USING CVPL,R1                ADDRESSABILITY TO CVPL\nLOOP     LTR   R15,R15                ANY ERROR\n         BNZ   ENDVTOC                CHECK DSCB\nCHKDSCB  DS    0H\n         CLI   DS1FMTID,C'1'          IS THIS A FORMAT 1 DSCB\n         BNE   READDSCB               BRANCH IF NOT FORMAT 1 DSCB\n         CLI   DS1DSORG,DS1DSGPS      PHYSICAL SEQUENTIAL  ??\n         BE    DSNCHK                 YES THEN CONTINUE CHECKING\n         CLI   DS1DSORG,DS1DSGPO      PARTITION DATA SET   ??\n         BNE   READDSCB               NO THEN READ NEXT DSCB\nDSNCHK   DS    0H                     CHECK THE EXISTENCE OF DATASET\n         CLC   DS1DSNAM(11),=C'SYS1.VTOCIX'\n         BE    READDSCB               IGNORE INDEX VTOC DSCB\n*        CLC   DS1DSNAM(11),=C'SYS5.CUTIN.'\n*        BE    READDSCB               IGNORE SYS5.CUTIN.*\n         MVC   DSNAME2,DS1DSNAM\n         MVC   DSNAME3,DS1DSNAM\n         MVC   DSN,DS1DSNAM        GET DSN FROM VTOC DSCB\n         MVI   CATSW,X'01'         SET TO DATASET UNCATALOGED\n         LOCATE CATALOG            DATASET ALREADY CATALOG ??\n         LTR   R15,R15             TEST RETURN CODE FROM CAMLST\n         BNZ   DEFINE_STM          BRANCH IF DATA SET NOT CATALAGED\n         CLC   DSN,DS1DSNAM\n         BE    READDSCB            BRANCH IF DATA SET IS CATALAGED\n         MVC   DSNAME2,DSN\n         MVC   VOL2,OBTAINWK+6\n         PUT   OUTFILE1,CTL_STM2   WRITE DELETE NVSAM CTL STM\n         PUT   OUTFILE1,CTL_STM3   WRITE FIRST DEFINE NVSAM CTL STM\n         PUT   OUTFILE1,CTL_STM4   WRITE SECOND DEFINE NVSAM CTL STM\n         MVC   DSNAME5,DSN\n         PUT   OUTFILE1,CTL_STM5   WRITE FIRST  DEFINE ALIAS CTL STM\n         MVC   DSNAME6,DS1DSNAM\n         PUT   OUTFILE1,CTL_STM6   WRITE SECOND DEFINE ALIAS CTL STM\n         PUT   OUTFILE2,CTL_STM2   WRITE DELETE NVSAM CTL STM\n         B     READDSCB            BRANCH IF DATA SET IS CATALAGED\nDEFINE_STM DS  0H           WRITE DEFINE NONVSAM ENTRY\n         PUT   OUTFILE1,CTL_STM3   WRITE FIRST DEFINE NVSAM CTL STM\n         PUT   OUTFILE1,CTL_STM4   WRITE SECOND DEFINE NVSAM CTL STM\n         PUT   OUTFILE2,CTL_STM2   WRITE DELETE NVSAM CTL STM TO\n*                                  BACKUP PARMFILE\n*        CLI   CATSW,X'00'\n*        BNE   READDSCB            BRANCH IF DATASET IS CATALOGED\n*        PUT   OUTFILE2,CTL_STM3   WRITE FIRST DEFINE NVSAM CTL STM\n*        MVC   VOL5,OBTAINWK+6\n*        PUT   OUTFILE2,CTL_STM5   WRITE SECOND DEFINE NVSAM CTL STM\n*                                  FALLBACK CATALOG CONTROL STM\n         DROP  R1\nREADDSCB DS    0H\n         CVAFSEQ ACCESS=GT,MF=(E,CVPL)\n         B     LOOP                   READ NEXT DSCB\n*                                     GREATER THAN THE LAST READ\nENDVTOC  C     R15,ERROR4             IS RETURN CODE 4\n         BNE   OTHER_ERROR            BRANCH IF NOT 4\n         CLI   CVSTAT,STAT032         IS END OF DATA ?\n         BE    RELEASE                RELEASE CVAF BUFFER\n         CLI   CVSTAT,STAT012         INDEXED VTOC ?\n         BE    NOTINDEX\nOTHER_ERROR DS  0H\n         DC    X'0000'                ABEND WITH 0C1\n         WTO   'UNKNOWN ERROR'\nRELEASE  CVAFDIR ACCESS=RLSE,                                          X\n               BUFLIST=0,             DO NOT RELEASE USER BUFFER LIST  X\n               IXRCDS=NOKEEP,         RELEASE CVAF VIER BUFFER LIST    X\n               MF=(E,CVPL)            RELEASE CVAF I/O AREA\n         CLOSE OUTFILE1\n         CLOSE OUTFILE2\n         CLOSE NEWIPL\nEXIT     PR                                                        @01A\n         LTORG\nOPEN_ERROR1 DS  0H\n         WTO   'OUTFILE1 OPEN ERROR'\n         B     EXIT\nOPEN_ERROR2 DS  0H\n         WTO   'OUTFILE2 OPEN ERROR'\n         B     EXIT\nNO_NEWIPL  DS  0H\n         WTO   'NEWIPL DDNAME IS NOT SPECIFIED'\n         B     EXIT\nNOTINDEX DS  0H\n         WTO   'THE DASD IS NOT INDEXED VTOC'\n         B     EXIT\nCATSW    DC    X'00'                  PROGRAM CATSW\nERROR4   DC    F'4'                   ERROR RETURN CODE 4\nOUTFILE1 DCB   DDNAME=CATALOG,DSORG=PS,RECFM=FB,MACRF=PM,LRECL=80       WRI00420\nOUTFILE2 DCB   DDNAME=FALLBACK,DSORG=PS,RECFM=FB,MACRF=PM,LRECL=80      WRI00420\nCTL_STM2 DS    0H\n         DC    CL8' DELETE '\nDSNAME2  DC    CL44' '\n         DC    CL14'NVSAM NSCR  /*'\nVOL2     DC    CL6' '\n         DC    CL18' */'\nCTL_STM3 DS    0H\n         DC    CL21' DEFINE NONVSAM(NAME('\nDSNAME3  DC    CL44' '\n         DC    CL3') -'\n         DC    CL12' '\nCTL_STM4 DC    CL80'    VOLUME(******) DEVT(0000))'\nCTL_STM5 DS    0H\n         DC    CL21' DEFINE   ALIAS(NAME('\nDSNAME5  DC    CL44' '\n         DC    CL3') -'\n         DC    CL12' '\nCTL_STM6 DS    0H\n         DC    CL7'   REL('\nDSNAME6  DC    CL44' '\n         DC    CL29'))'\nBLANKS   DC    CL44' '\nCATALOG  CAMLST NAME,DSN,,OBTAINWK\nDSN      DC    CL44' '            DATA SET TO BE SERACHED\nOLDVOL   DC    CL6' '             VOLUME TO BE SEARCHED\n         DC    CL2' '             BLANK\nCOMMENT  DC    CL24' '            ERROR MESSAGE\nOBTAINWK DC    CL140' '           CAMLST WORK AREA\n         DC    CL125' '\nNEWIPL   DCB   DSORG=PS,                                               X\n               MACRF=R,                                                X\n               DDNAME=NEWIPL,                                          X\n               DEVD=DA,                                                X\n               RECFM=F,                                                X\n               EXLST=JFCBADR\nJFCBADR  DS    0F\n         DC    X'87'\n         DC    AL3(JFCB)\nJFCB     DS    0C\n         IEFJFCBN                     JFCB MAPPING\nBUFLIST  ICVAFBFL DSECT=NO            BUFFER LIST\n         IECSDSL1 (1)                 FORMAT 1 DSCB MAPPING\nDSCBLTH  EQU   *-IECSDSL1-L'DS1DSNAM  LENGTH OF DATA PORTION OF DSCB\nCVPL     CVAFSEQ ACCESS=GTEQ,         READ DSCB WITH DSN >= SUPPLIED   X\n               IXRCDS=KEEP,           KEEP VIERS IN STORAGE DURING     X\n               DSN=DS1DSNAM,          SUPPLIED DATA SET NAME           X\n               BUFLIST=BUFLIST,                                        X\n               IOAREA=NOKEEP,                                          X\n               MF=L\n         ORG   CVPL                   EXPAND MAP OVER LIST\nCVPLMAP  ICVAFPL DSECT=NO             CVPL MAP\n*---------------------------------------------------------------------*\n*     MISC DATA AREAS                                                 *\n*---------------------------------------------------------------------*\nSAVEAREA DS    18F\n         DCBD  DSORG=PS,DEVD=DA\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHKMEM": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x07\\x01\\x143/\\x01\\x143/\\x17\\x13\\x00\\x0b\\x00\\x0b\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2014-11-28T00:00:00", "modifydate": "2014-11-28T17:13:07", "lines": 11, "newlines": 11, "modlines": 0, "user": "REXX"}, "text": "/* REXX invoked by LOCATE                                          */\n/* Author : Albert Cheng       25 Nov 2014                         */\n/* Function : Check the existence of a PDS member                  */\n/*******************************************************************/\nARG PDS MEM\nTEMP = \"'\"PDS\"(\"MEM\")'\"\nMODULE = SPACE(TEMP,0)\nSTATUS = SYSDSN(MODULE)   /* CHECK PDS AND MEMBER */\nIF STATUS = 'OK' THEN RC = 0\n                 ELSE RC = 4\nEXIT(RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSPACE": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x14\\x01\\x18\\x11o\\x01\\x18\\x11o\\tR\\x02 \\x02 \\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2018-04-26T00:00:00", "modifydate": "2018-04-26T09:52:14", "lines": 544, "newlines": 544, "modlines": 0, "user": "ASM"}, "text": "DSPACE   TITLE 'TSO CP TO PRINT DASD SPACE INFO  19APR18 A CHENG'\n********************************************************************\n*                      D-S-P-A-C-E\n*      PROGRAM TO PRINTOUT AVAILABLE SPACE ON A DISK DRIVE\n*      USES PUTLINE FUNCTION TO DISPLAY INFORMATION ON TERMINAL\n*      ALSO DETERMINES IF PACK HAS INDEXED VTOC\n*\n*      MODIFY BY P.SAYASITHSENA 27/NOV/1990\n*\n*      W F HARTMAN MAY 1981\n*            CODE FROM CBTV224   - CLARK\n*      RE-WORKED:\n*        RENT; %FREE SPACE; UNIT NAME; NO. USERS;ALT PATH, PATH MASK\n*        ADDED XA SUPPORT                                      DDMMM84\n*        SUPPORT 3380 MODEL-K (TRIPLE DENSITY)       AC\n*        REPLACE TPUT MACRO BY PUTLINE MACRO         PS        12DEC90\n* @01    SUPPORT 3390 MODEL 2                        AC        03DEC91\n* @02    SUPPORT 3390 MODEL 3                        AC        23APR96\n* @03    SUPPORT 4 DIGITS UNIT NUMBER                AC        23MAY01\n* @04    1) DISPLAY 3390 MODEL NUMBER                AC        16MAY12\n*        2) ADD ALIAS M01/M02/M03/M09/M27/M54\n*           SYNATX : DSPACE      (DISPLAY ALL MODEL)\n*           SYNATX : M09 SYS*    (SELECT 3390-MOD9 AND VOL SYS*)\n*        3) REMOVE DASD 3380 AS IT IS NO LONGER AVAILABLE\n*        4) REMOVE MACRO @ENT AND @RET\n*        5) SUPPORT 3390 MOD9/27/54\n* @05    SUPPORT WILDCARD                            AC        20NOV14\n*        DSPACE TS*\n*        DSPACE TS?1*\n* @06    ADD ALIAS EMPTYDSK TO DISPLAY VOLUME LIST WITH ZERO\n*        USED UTILIZATION.                           AC        19APR18\n*        EMPTYDSK\n********************************************************************\n         PUNCH ' ALIAS M01'                                      @04A   00003\n         PUNCH ' ALIAS M02'                                      @04A   00003\n         PUNCH ' ALIAS M03'                                      @04A   00003\n         PUNCH ' ALIAS M09'                                      @04A   00003\n         PUNCH ' ALIAS M27'                                      @04A   00003\n         PUNCH ' ALIAS M54'                                      @04A   00003\n         PUNCH ' ALIAS EMPTYDSK'                                 @05A   00003\n         MACRO\n&N       @ED   &OU,&WK\n&N       MVC   &OU,OTMASK               MOVE MASK\n         L     R0,&WK                   GET DATA\n         CVD   R0,WD                    MAKE PACKED\n         ED    &OU,WD+4                 EDIT IT\n         MEND\n*        PRINT NOGEN\n*DSPACE  @ENT   R12,(0,DSAEND-DSA,C),DSA=YES                     @04D\nDSPACE   CSECT\nDSPACE   AMODE 31                                                @05C\nDSPACE   RMODE 24                                                @04A\n         BAKR  R14,0             SAVE RSA INTO LINKAGE STACK     @04A\n         LR    R12,R15                                           @04A\n         USING DSPACE,R12        ESTABLISH ADDRESSIBILITY        @04A\n         XC    WKCLRS(WKCLRL),WKCLRS   CLEAR COUNTERS\n*\n         LR    R2,R1             SAVE THE ADDRESS OF THE CPPL\n         USING CPPL,R2           ADDRESSABILITY FOR THE CPPL\n         L     R3,CPPLUPT        PLACE THE ADDRESS OF THE UPT INTO R3\n         L     R4,CPPLECT        PLACE THE ADDRESS OF THE ECT INTO R4\n         USING ECT,R4              MAP THE ECT                          00142\n         DROP  R2\n*\n*        SET UP PPL FOR PARSE\n*\nPARMCHK  DS    0H\n         LA    R2,PPL                  GET ADDRESS OF PPL\n         USING PPL,R2                  TELL ASSEMBLER\n         MVC   UPT,4(R1)               COPY  UPT\n         MVC   ECTAD,12(R1)            COPY  ECT\n         LA    R0,ECB                  GET ADDRESS OF NEW ECB\n         ST    R0,ECBP                 SAVE ECB ADDRESS\n         XC    ECB,ECB                 ZERO ECB\n         MVC   PCL,ADDPCL              GET ADD OF PCL\n         LA    R0,ANS                  GET ADD OF ANSWER WORD\n         ST    R0,ANSW                 PUT IN PPL\n         MVC   COMBUF,0(R1)            PUT ADD OF CBUFF IN PPL\n         XC    WK,WK                   ZERO USER WORK AREA\n         LA    R1,PPL                  GET ADD OF PPL\n         CALLTSSR EP=IKJPARS           GO PARSE IT\n         DROP  R2\n         LTR   R15,R15                 TEST  RETURN CODE\n         JNZ   ERROR                   ERROR GO TELL USER\n*\n*        DISPLAY THE TITLE DOWN\n*\n         MVC   TEXT+0(HDR1E-HDR1S),HDR1S\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n*\n         MVC   TEXT+0(HDR2E-HDR2S),HDR2S\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n*\n         MVI   UNIT,C' '               UNIT=C' '=NO HITS\n*\n         L     R6,ANS                  GET ADDRESS OF ANSWER AREA\n         USING IKJPARMD,R6                                     25JUN84\n*---     ---   PROCESS VOLSERS                                 25JUN84\n         LA    R6,VOL                  PDL DSECT ENTRY\n         DROP  R6                                              25JUN84\n         TM    6(R6),X'80'             IS IT REQUST FOR SPEC VOL\n         JO    GETVOL                  YES GO PROCESS\n         SR    R6,R6                   NO-ALL VOLUMES\n         J     SKPVOL                  SKIP\nGETVOL   DS    0H\n         MVI   VOLSER,C' '\n         MVC   VOLSER+1(5),VOLSER\n         L     R7,0(R6)                GET ADDRESS OF VOLUME\n         LH    R8,4(R6)                GET LENGTH OF VOLUME\n         BCTR  R8,R0                   MACHINE LENGTH\n         LA    R9,VOLSER               ADDRESS OF MESSAGE\n         EX    R8,EXMVC                MOVE VOLUME IN TO ANS\n         XC    USCNWK,USCNWK           CLEAR USCNWK\n         MVC   LSPACEL(LSPACESL),LSPACES   SET LSPACE PARAMETER LIST\nSKPVOL   DS    0H\n         TITLE 'SCAN UCBS'\n*\n***            THIS CODE COPIED FROM (TSUCBSCN)\n*\nLOCUCB   DS    0H  -----------------FORMAT IOS SCAN PARM LIST\n         XC    DSXAWORK,DSXAWORK       ZERO OUT UCB WORKAREA\n         LA    R1,DSXAWORK             ADDR OF UCB WORKAREA\n         ST    R1,DSXAWA               STORE IT IN PARM LIST\n         LA    R1,DSXACLAS             PTR TO DEV CLAS TO SEARCH\n         ST    R1,DSXADEVT             STORE IN PARM LIST\n         MVI   DSXACLAS,UCB3DACC       ONLY SEARCH DASD\n         LA    R1,DSXAUCBP             AREA TO STORE UCB ADDR\n         ST    R1,DSXAUCB              IN PARM LIST\n         OI    DSXAUCB,X'80'           SIGNIFY END OF PARMLIST\n***>>>>>>       UCB SCAN ROUTINE - COMMON RETURN POINT     <<<<<<  @03A\nUCBLOOP  UCBSCAN COPY,                  NOT APF AUTHORIZED             +\n               WORKAREA=USCNWK,         100-BYTE WORK AREA/SCAN TOKEN  +\n               UCBAREA=USCNUCB,         48-BYTE UCB BASE COPY AREA     +\n               DEVNCHAR=UNIT,           4-BYTE DEVICE NUMBER           +\n               DCEAREA=DCEAREA,         UCB COMMON SEGMENT             +\n               DCELEN=DCELENG,          LENGTH OF DCE                  +\n               DYNAMIC=YES,             UCB CLASS EXTENSION AREA       +\n               DEVN=0,                  START WITH THE FIRST UCB       +\n               RANGE=ALL,               INCLUDE 4-DIGIT NUMBERS        +\n               NONBASE=NO,              JUST NEED 1 EXPOSURE PER DISK  +\n               DEVCLASS=DASD,           ONLY INTERESTED IN DISKS       +\n               MF=(E,USCNPARM)          POINT TO PARAMETER LIST\n         LTR   R15,R15                  UCB FOUND?\n         JNZ   UCBEND                   NO, END OF SCAN\n         LA    R9,USCNUCB               YES, POINT TO UCB COPY\n         USING UCB,R9\n         TM    SRTESTAT,SRTEONLI       ONLINE OR OFFLINE?\n         JNO   UCBSKP                  IGNORE DEVICE IF IT OFFLINE\n         LTR   R6,R6                   TEST IF ONLY ONE VOLUME WANTED\n         JZ    SNGVOL                  NO, DISPLAY ALL VOLSER\n         LH    R0,4(R6)                GET  L'VOLSER\n         ST    R0,VOLL                 SAVE L'VOLSER               @05A\n*        L     R14,0(R6)               GET VOLSER(FAMILY)          @05D\n         L     R10,0(R6)               GET VOLSER(FAMILY)          @05A\n         LA    R15,UCBVOLI             OP2\n*        CLC   =C'ALL ',0(R14)         ALL SPECIFIED            25JUN84\n*        JE    SNGVOL                  YES-PROCESS IT           25JUN84\n*CLCVOL  DS    0H                      CHECK VOLSER                @05D\n*        CLI   0(R14),C' '             SHORT VOLSER                @05D\n*        JE    SNGVOL                  YES-MATCH                   @05D\n*        CLC   0(1,R14),0(R15)         COMPARE VOLSER              @05D\n*        JNE   UCBSKP                  DONT WANT                   @05D\n*        LA    R14,1(R14)              NEXT                        @05D\n*        LA    R15,1(R15)              \"                           @05D\n*        BRCT  R0,CLCVOL               LOOP                        @05D\n*        JNE   UCBSKP                  DO NOT WANT                 @05D\n*----------------------------------------------------------------\n*        CALL WILDCARD MATCH SERVICE FOR VOLSER FILTERING          @05A\n*----------------------------------------------------------------\n         ASAXWC PATTERNSTR=(10),                                       *\n               PATTERNSTRLEN=VOLL,                                     *\n               STRING=UCBVOLI,                                         *\n               STRINGLEN=F0006,                                        *\n               ZEROORMORE=WCZ,                                         *\n               DELIMITER=BLANK,                                        *\n               ONECHAR=WCO\n         LTR   R15,R15                 .PATTERN MATCH ?            @05A\n         JNZ   UCBSKP                  DO NOT WANT                 @05A\nSNGVOL   DS    0H\n         TITLE 'PROCESS THIS ONLINE DASD UCB ----------------'\n         MVI   OUTMESS,C' '             CLEAR OUTPUT AREA\n         MVC   OUTMESS+1(OUTMESSL-1),OUTMESS\n         MVC   VOLSER,UCBVOLI          VOLSER\n*------- ----- LSPACE\n         LA    R0,UCBCMSEG             UCB ADR\n         PRINT GEN\n         LSPACE MF=(E,LSPACEL),DATA=LSPACED,SMF=NONE,UCB=(R0)    @03C\n         LTR   R15,R15                  TEST LSPACE RETURN CODE\n         JNZ   ERROR2                   BRANCH IF NOT ZERO\n         LA    R7,LSPACED               POINT TO LSPACE RETURN AREA\n         USING LSPCRET,R7\n         L     R2,LSPDFRAG         FORMAT THE FRAGMENTATION     @03A\n         CVD   R2,WD                    INDEX                   @03A\n         UNPK  WA#FRAG,WD                                       @03A\n         OI    WA#FRAG+4,X'F0'                                  @03A\n         L     R2,LSPDTCYL              GET NUMBER OF FREE CYLINDERS\n         CVD   R2,WD                                            @03A\n         UNPK  WA#CYL,WD                                        @03A\n         OI    WA#CYL+5,X'F0'                                   @04C\n         MVI   WA#CYL+6,C','                                    @04C\n         L     R2,LSPDTTRK              GET NUMBER OF FREE TACKS@03A\n         CVD   R2,WD                                            @03A\n         UNPK  WA#TRK,WD                                        @03A\n         OI    WA#TRK+5,X'F0'                                   @04A\n         MVI   WA#TRK+6,C','                                    @04C\n         L     R2,LSPDNEXT              GET NUMBER OF FREE EXTENTS\n         CVD   R2,WD                                            @03A\n         UNPK  WA#EXT,WD                                        @03A\n         OI    WA#EXT+5,X'F0'                                   @04C\n         MVI   WA#EXT+6,C'/'                                    @04C\n         L     R2,LSPDLCYL              GET NUMBER OF FREE EXTENTS\n         CVD   R2,WD                                            @03A\n         UNPK  WA#CCYL,WD                                       @03A\n         OI    WA#CCYL+5,X'F0'                                  @04C\n         MVI   WA#CCYL+6,C','                                   @04C\n         L     R2,LSPDLTRK              GET NUMBER OF FREE EXTENTS\n         CVD   R2,WD                                            @03A\n         UNPK  WA#CTRK,WD                                       @03A\n         OI    WA#CTRK+5,X'F0'                                  @04C\n         MVI   WA#CTRK+6,C' '                                   @04C\n         MVC   OUTMESSV,VOLSER         VOLSER                   @03A\n         MVC   OUTMESSU,UNIT           ADDR                     @03A\n*------- ----- SEE IF INDEXED VTOC                              @03A\n         TM    LSPDSTAT,LSPDIXDS       VTOC INDEX EXISTS?       @03A\n         JZ    NONINDEX                BRANCH IF NON-INDEX VTOC @03A\n         MVC   INFLAG,=C'E '           VTOC INDEX EXIST BUT INACTIVE\n         TM    LSPDSTAT,LSPDIXAC       VTOC INDEX ACTIVE?       @03A\n         JZ    NONINDEX                NO                       @03A\n         MVC   INFLAG,=C'I '           INDEX VTOC               @03A\n*------- ----- GET DEV TYPE INFO\n*                                      CALC % FULL\nNONINDEX LA    R15,M3390TBL            GET 3390 MODEL TABLE     @04C\n         LA    R14,DCEAREA                                      @03C\n         USING DCE,R14\n         MVC   OUTMESSD,(STCYLNAM-STCYLS)(R15)   DEV. NAME      @04C\nNEXTMDL  CLI   0(R15),X'00'                BRANCH IF END OF     @04A\n         JE    ERROR3                      THE DASD MODEL TBL   @04A\n         MVC   OUTDENS(3),(STCYMOD-STCYLS)(R15)                 @04A\n         CLC   DCEHICYL-2(2),0(R15)        NO OF CYLS MATCH ?   @04A\n         JE    CHKMOD                      BRANCH IF MATCH      @04A\n         LA    R15,M3390L(R15)             POINT TO NEXT MODEL  @04A\n         J     NEXTMDL          SEARCH UNTIL THE MODEL IS FOUND @04A\n         DROP  R14\nCHKMOD   CLC   ECTPCMD,=CL8'DSPACE'        DISPLAY ALL MODEL ?  @04A\n         JE    GETTRKS                                          @04A\n         CLC   ECTPCMD,=CL8'EMPTYDSK'      DISPLAY ALL MODEL ?  @06A\n         JE    GETTRKS                                          @06A\n         CLC   ECTPCMD(3),(STCYMOD-STCYLS)(R15)  3390 MODEL TYP @04A\n         JNE   TESTONE               IGNORE IF INCORRECT MODEL? @04A\nGETTRKS  DS    0H                                               @04A\n         L     R14,(STCYLTTK-STCYLS)(R15)       #TRKS/VOL       @04A\n         A     R14,WKTOTTTK            TOT TRKS SEEN\n         ST    R14,WKTOTTTK\n*\n         LH    R14,0(R15)                       #CYLS/VOL       @04C\n         A     R14,WKTOTCYL            TOT CYLS SEEN\n         ST    R14,WKTOTCYL\n         L     R0,LSPDTCYL          WKFRECYL = WKFRECYL + LSPDTCYL\n         LR    R14,R0\n         A     R14,WKFRECYL\n         ST    R14,WKFRECYL\n*\n         MH    R0,(STCYLTRK-STCYLS)(R15)     #TRKS/CYL\n         L     R14,LSPDTTRK\n         AR    R0,R14                  TOTAL FREE TRKS ON CURR VOL\n*\n         LR    R14,R0\n         A     R14,WKFRETRK            TOT FREE TRKS - ALLVOL\n         ST    R14,WKFRETRK\n*\n         SRDA  R0,32                   SHIFT TO R1\n         M     R0,=F'100'              FOR % CALC\n*        MHI   R0,100                  FOR % CALC\n         AHI   R1,50                   \"\n         L     R14,(STCYLTTK-STCYLS)(R15)                       @04A\n         DR    R0,R14                  CALC % FREE SPACE\n         CVD   R1,WD                   ANSWER\n         MVC   OUTMESSD(4),=CL4'    '                           @04A\n         UNPK  OUTMESSP,WD\n         OI    OUTMESSP+L'OUTMESSP-1,C'0' FIX SIGN\n*\n         MVC   TEXT+0(OUTMESSL),OUTMESS\n         CLC   ECTPCMD,=CL8'EMPTYDSK'  EMPTYDSK ONLY            @06A\n         JNE   NONEMPTY                                         @06A\n         CLC   OUTMESSP,=CL2'99'                                @06A\n         JNE   UCBSKP                                           @06A\n         CLC   WA#EXT,CONE             1 EXTENT                 @06A\n         JNE   UCBSKP                                           @06A\nNONEMPTY PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\nTESTONE  LTR   R6,R6\n         J     UCBSKP                  TRY MORE VOLSERS GROUP\nUCBSKP   DS    0H                      INCREMENT BY 2\n         J     UCBLOOP                 CONTINUE SEARCHING UCB TABLE\nUCBEND   DS    0H\n         LTR   R6,R6                   IS IT ALL\n         JZ    DONE                    YES\n         CLC   UNIT,=CL4'    '         WERE ANY VOLSERS FOUND\n         JNE   DONE                    YES-NO MSG\n         MVI   TEXT,C' '\n         MVC   TEXT+1(L'TEXT-1),TEXT\n         MVC   OUTMESS(25),NOVOL\n         MVC   OUTMESS+7(6),VOLSER\n         MVC   TEXT+0(25),OUTMESS\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\nSECVOL   L     R6,8(R6)\n         LA    R6,0(R6)\n         LTR   R6,R6                   IS THERE A SECOND VOLUME\n         JNZ   GETVOL\nDONE     DS    0H\n         CLC   ECTPCMD,=CL8'EMPTYDSK'  EMPTYDSK ONLY            @06A\n         JE    RC00                                             @06A\n         @ED   OTFRECYL,WKFRECYL\n         @ED   OTFRETRK,WKFRETRK\n         @ED   OTTOTCYL,WKTOTCYL\n         @ED   OTTOTTTK,WKTOTTTK\n         MVI   TEXT,C' '               CLEAR TEXT LINE\n         MVC   TEXT+1(L'TEXT-1),TEXT\n         MVC   TEXT+0(HDR3E-HDR3S),HDR3S\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n         MVC   TEXT+0(L'OTTOTS),OTTOTS\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\nRC00     PR                                               EXIT     @04C\nRC12     MVC   TEXT+0(L'NOVIB),NOVIB\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n         J     TESTONE\nRC16     MVI   TEXT,C' '\n         MVC   TEXT+1(L'TEXT-1),TEXT\n         MVC   TEXT+0(L'NOTDA),NOTDA\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n         J     TESTONE\nERROR    MVC   TEXT+0(L'ERRMESS),ERRMESS\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n         J     DONE\nERROR2   MVC   TEXT+0(L'ERRMESS2),ERRMESS2\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n         J     DONE\nERROR3   MVC   TEXT+0(L'ERRMESS3),ERRMESS3\n         PUTLINE    PARM=PUTBLOCK,UPT=(3),ECT=(4),                     X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n         J     DONE\n*\n*        DATA STORAGE AREA\n*\nEXMVC    MVC   0(0,9),0(7)\nADDPCL   DC    V(PARSEPCL)\n         DC    H'0016'\nF0006    DC    F'0006'                 LENGTH                      @05A\nVOLL     DS    F                       LENGTH OF THE INPUT VOLSER  @05A\nNOVIB    DC    C'VIB NOT INIT'\nNOTDA    DC    C'NOT DASDI   '\nWCZ      DC    C'*'                                                @05A\nWCO      DC    C'?'                                                @05A\nBLANK    DC    C' '                                                @05A\nERRMESS  DC    C'PARSE FAILED'\nERRMESS2 DC    C'LSPACE FAILED'\nERRMESS3 DC    C'UNKNOWN 3390 MODEL TYPE'\nNOVOL    DC    C'VOLUME VVVVVV NOT MOUNTED'\nHDR1S    DC    C'SPACE-2.6         FRAG    --  F R E E  --  '\n         DC    C' / -- CONTIG --  IX  %               '\nHDR1E    EQU   *\nHDR2S    DC    C'       MOD UNIT   INDEX #CYL,  #TRK,  #EXT  /'\n         DC    C'#CYL,    #TRK VTOC FREE          '\nHDR2E    EQU   *\nHDR3S    DC    C'  TOTAL CYL  TOTAL TRK   FREE CYL   FREE TRK'\n*              C' ZZ,ZZZ,ZZ9 ZZ,ZZZ,ZZ9 ZZ,ZZZ,ZZ9 ZZ,ZZZ,ZZ9'\nHDR3E    EQU   *\nOTMASK   DC    X'40206B2020206B202120'  Z,ZZZ,ZZ9\n*\n*   3390 DEVICE CHARACTERISTICS TABLE\n*\nM3390TBL DS  0H                                                 @04A\n*        DC  H'1113',CL4'3390',H'15',AL4(1113*15),C'M01',X'40'  @04C\nSTCYLS   DS  0H                                                 @04A\nSTCYLMAX DC  H'1113'             MAX CYLS FOR MOD3              @04A\nSTCYLNAM DC  CL4'3390'           DISK NAME                      @04A\nSTCYLTRK DC  H'15'               TRACKS PER CYLINDER            @04A\nSTCYLTTK DC  AL4(1113*15)        TRACKS PER VOL                 @04A\nSTCYMOD  DC  CL4'M01'            3390 MODEL TYPE                @04A\nM3390L   EQU *-STCYLS            LENGTH OF THE TABLE ENTRY      @04A\n         DC  H'2226',CL4'3390',H'15',AL4(1113*15*2),C'M02 '     @04C\n         DC  H'3339',CL4'3390',H'15',AL4(1113*15*3),C'M03 '     @04C\n         DC  H'10017',CL4'3390',H'15',AL4(1113*15*9),C'M09 '    @04A\n         DC  H'32760',CL4'3390',H'15',AL4(32760*15),C'M27 '     @04A\n         DC  XL2'FFF0',CL4'3390',H'15',AL4(65520*15),C'M54 '    @04A\n*  ROOM FOR FUTURE MODEL                                        @04A\n*        DC  H'1113',CL4'33A0',H'30',AL4(1113*30),C'M01 '       @04A\n         DC  X'00'             END OF TABLE                     @04A\nHEXTR    DC  C'0123456789ABCDEF'\n*              0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F  - MASK BITS\nLSPACES  LSPACE MF=L                    LSPACE PARAMETER LIST TEMPLATE\nLSPACESL EQU   *-LSPACES                LENGTH OF STATIC PARAMETER LIST\nPARSEPCL IKJPARM  DSECT=IKJPARMD\nVOL      IKJIDENT 'VOLUME',UPPERCASE,MAXLNTH=6,FIRST=ALPHANUM,         X\n               OTHER=ANY,LIST                                      @05A\n*              OTHER=ALPHANUM,LIST                                 @05D\n         IKJENDP\n*\n*        EQUATES\n*\nDCELENG  DC    H'32'           SPACE FOR THE EVENT CONTROL BLOCK   @03A\n*                              THIS EXPANDS INTO A PUTLINE PARAMETER\nTEXTADS  DC    H'83'           LENGTH OF THE OUTPUT LINE\n         DC    H'0'            RESERVED\nTEXT     DS    CL79\nECBADS   DS    F'0'            SPACE FOR THE EVENT CONTROL BLOCK\nIOPLADS  DC    4F'0'           SPACE FOR THE INPUT AND OUTPUT PARM\nCONE     DC    CL6'000001'                                        @06A\nLSPACEL  LSPACE MF=L                    LSPACE PARAMETER LIST     @03A\nLSPACED  LSPACE MF=(L,DATA)             LSPACE OUTPUT DATA AREA   @03A\nPUTBLOCK PUTLINE MF=L      LIST FORM OF THE PUTLINE MACRO INST\n*\nCMDUPT   DC    A(0)           ADDR USER PROFILE TABLE POINTER\nCMDECT   DC    A(0)           ADDR ENVIRONMENT CONTROL TABLE\nCMDECB   DC    A(ECB)         ADDR ECB (EVENT CONTROL BLOCK) POINTER\nCMDPCL   DC    A(PARSEPCL)    ADDR PCL CREATED BY CP USING IKJPARM\nCMDANS   DC    A(CMDANSR)     ADDR OF ANSWER PLACE\nCMDCBUF  DC    A(0)           PTR TO COMMAND BUFFER\nCMDUWA   DC    A(0)           PTR TO USER WORK AREA\nCMDVEWA  DC    A(0)           PTR TO USER WORK AREA USER EXITS\n*\nANS      DS    F\nECB      DS    F              ECB\nPPL      DS    0F\nUPT      DS    F\nECTAD    DS    F\nECBP     DS    F\nPCL      DS    F\nANSW     DS    F\nCOMBUF   DS    F\n*\nCMDANSR  DC    A(0)           PLACE TO PUT ANSWER\n*\nANSWER   DS    F                   ADDRESS POINTER FOR EXTRACT\n         DS    0D\n*\n*DSA      DSECT\nDSADCB   DS    X                       COPY OF CVTDCB - OP SYS\nDSADCBXA EQU   X'80'                   XA OPERATING SYSTEM\nWK       DS    F\nWKCLRS   EQU   *                        CLEAR AREA AT INIT\nMINPATHD DS    F                       MINIMUM NUMBER OF PATHS\nWKFRETRK DS    F                        TOT FREE TRKS ON ALL V\nWKFRECYL DS    F                        TOT FREE CYLS ON ALL V\nWKTOTCYL DS    F                        TOT      CYLS ON ALL V\nWKTOTTTK DS    F                        TOT      TRKS ON ALL V\nWKCLRL   EQU   *-WKCLRS\nWD       DS    D\nWLOOKUP  DS    F\n******** ***** OUTPUT TOTALS\nOTTOTS   DC    C'  TOTAL CYL  TOTAL TRK   FREE CYL   FREE TRK'\n*              C' ZZ,ZZZ,ZZ9 ZZ,ZZZ,ZZ9 ZZ,ZZZ,ZZ9 ZZ,ZZZ,ZZ9'\n*                01234567890123456789012345678901234567890\nOTTOTCYL EQU   OTTOTS+00,11\nOTTOTTTK EQU   OTTOTS+12,11\nOTFRECYL EQU   OTTOTS+23,11\nOTFRETRK EQU   OTTOTS+34,11\n******** ***** OUTPUT MESSAGE\nOUTMESS  DS    CL79                    MESSAGE AREA\n         ORG   OUTMESS                 RE-MAP\nOUTMESSV DS    CL6,C                   VOLSER\nOUTDENS  DS    CL3,C                   MOD     (M03/M09/M27/M54)\nOUTMESSU DS    CL4,C                   UNIT\n         DS    CL2\nWORKAA   DS    0CL30\nWA#FRAG  DS    CL5                     FREGMENTATION INDEX       @03C\n         DS    C                                                 @03C\nWA#CYL   DS    CL6                     FREE CYL\n         DS    C                       ,\nWA#TRK   DS    CL6                     FREE TRK\n         DS    C                       ,\nWA#EXT   DS    CL6                     EXTENTS\n         DS    C                       /\nWA#CCYL  DS    CL6                     CONTIG. CYL\n         DS    C                       ,\nWA#CTRK  DS    CL6                     CONTIG. TRK\n         DS    CL2                     FILLER\nINFLAG   DS    CL2                     INDEXED VTOC FLAG AREA\n         DS    CL2\nOUTMESSP DS    CL2,C                   %FULL\nOUTMUSER DS    CL3,C                   UCBUSER-CONC. USERS\nOUTMESSF EQU   OUTMESS+L'OUTMESS-*     FILLER (ASM ERR IF TOO LONG)\n         DS    (OUTMESSF)X             FILLER (ASM ERR IF TOO LONG)\nOUTMESSL EQU   *-OUTMESS\nOUTMESSD DS    CL4,C                   3390\n******** ***** ************************ **********************\nDEVINFO  DS    5F'0'\nADRDEV   DS    F\nADRDEVL  DS    F\nVOLSER   DS    CL6       VOLSER\nUNIT     DS    CL4       UNIT\nUSCNWK   DS    XL100                    UCBSCAN WORK AREA       @03A\nUSCNUCB  DS    XL48                     UCBSCAN UCB COPY AREA   @03A\nDCEAREA  DS    XL48                     @UCB COMMON SEGMENT     @03A\n         UCBSCAN MF=(L,USCNPARM)                                @03A\n         DS    0D\n******** ***** ************************ **********************\n*\n***            THIS CODE COPIED FROM (TSUCBSCN)\n*\n******** ***** *********************** START OF UCB LOOKUP DSA\nDSXALIST DS    0F                      PARMLIST FOR UCB\nDSXAWA   DS    F                       %100-BYTE WORK AREA\nDSXADEVT DS    F                       %DEV TYPE TO SEARCH\nDSXAUCB  DS    F                       %UCB FULL WORD PTR\n         DS    0D                      FOLLOWING MUST BE ALIGNED\nDSXAWORK DS    CL100                   UCB WORK AREA\nDSXAEUCB EQU   DSXAWORK+00,04          EMULATION CURR. UCB PTR\nDSXAEILK EQU   DSXAWORK+04,04          EMULATION CVTILK2 ADDR\nDSXACLAS DS    CL1                     DEVICE CLASS TO SEARCH\nDSXAUCBP DS    F                       %UCB\n******** ***** *********************** END OF UCB LOOKUP DSA\nDSAEND   EQU  *                         LENGTH OF WORK\n         IECDDCE                       UCB EXTENSION BLOCK\nUCB      DSECT\n         IEFUCBOB\n         CVT   DSECT=YES               CVT\n         PRINT GEN\n         IKJCPPL\n         IKJECT                                                         00460\nLSPCRET  LSPACE MF=(D,DATA)                                     @03A\n         IOSDUPI\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DUDASD": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x14\\x01\\x18\\x11o\\x01\\x18\\x11o\\tR\\x01\\x8e\\x01\\x8e\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2018-04-26T00:00:00", "modifydate": "2018-04-26T09:52:14", "lines": 398, "newlines": 398, "modlines": 0, "user": "ASM"}, "text": "DUDASD   TITLE 'TSO CP TO DISPLAY ON THE ON-LINE VOLUME SERIAL'\n******************************************************************\n*  SOURCE IS ORIGINATED FROM CBT TAPE FILE 300\n*\n*  FUNCTION: SAME AS MVS COMMAND D U,DASD,ONLINE\n*\n*  MODIFIED BY ALBERT CHENG. FOR DETAIL PLEASE REFER THE COMMENT\n*  THE PROGRAM IS CODED USING TSOCP CONVENTION AND PUTLINE.\n*\n*  REGISTER\n*  R2   - IOPL\n*  R3   - CPPL\n*  R4   - LOOP COUNT (NO OF ELEMENT IN DISPLAY LINE)\n*  R5   - OUTPUT BUFFER POINTER\n*  R6   - ECT\n*  R7   - NOT IN USE\n*  R8   - VIKJPCL/UIKJPCL\n*  R9   - LENGTH OF EXECUTE COMPARE\n*         (IE LENGTH OF INPUT VOLUME SERAIL-1)\n*  R10  - UCBOB\n*  R11  - NOT IN USE\n*  R12  - PROGRAM BASE REGISTER\n*\n*  ABSTRACT\n*  1) REMOVE SOME BUG\n*                                       (ALBERT CHENG)   10 MAR 86\n*  2) MVS/XA ENHANCEMENT\n*                                       (ALBERT CHENG)    1 MAR 87\n*  3) ACCEPT GENERIC VOLUME SERIAL\n*                                       (ALBERT CHENG)    9 OCT 90\n*  4) SUPPORT 4 DIGITS UNIT NUMBER\n*                                       (ALBERT CHENG)   10 FEB 03\n*  5) REMOVE MACRO JVDENTER AND JVDLEAVE.\n*     USE BAKR AND PR.                  (ALBERT CHENG)   14 APR 12\n*\n*  6) PREVENT X'00' FROM LEFT OVER OUPUT FOR THE\n*     LAST UNIT RETURN FROM UCBSCAN     (SAM GOLOB)       4 AUG 14\n*\n*  7) A) ADD ALIAS COMMAND DU TO DISPLAY ALL THE ONLINE VOLUME\n*        SERIAL BY UNIT ADDRESS\n*        DUO 1000        (DISPLAY DASD FROM 1000 TO FFFF)\n*        DUO 1000:1FFF   (DISPLAY DASD FROM 1000 TO 1FFF)\n*     B) ADD ALIAS COMMAND DUA TO DISPLAY THE STATUS OF THE DASD\n*        (ONLINE AND OFFLINE) BY UNIT ADDRESS\n*        DUA             (DISPLAY DASD FROM 0000 TO FFFF)\n*        DUA 1000        (DISPLAY DASD FROM 1000 TO FFFF)\n*        DUA 0A00:1FFF   (DISPLAY DASD FROM 0A00 TO 1FFF)\n*     C) CHANGE THE PROGRAM BASE REGISTER FROM R11 TO R12\n*        USUALLY R12 IS THE PROGRAM BASE REGISTER\n*     D) USE RELATIVE JUMP\n*        CANNOT GET RID OF PROGRAM BASE REGISTER BECAUSE\n*        PUTLINE MACRO STILL USE TRAIDITIONAL BRANCH INSTRUCTION\n*                                       (ALBERT CHENG)    1 SEP 14\n*  8) SUPPORT WILDCARD\n*        DUDASD SY*\n*        DUDASD SY??0*\n*        DUDASD SY??01\n*        DUDASD MC3S*   NOT WORKING\n*        DUDASD MC3S*?  WORKING\n*                                       (ALBERT CHENG)   20 NOV 14\n*******************************************************************\n TITLE 'Z O S   D U D A S D R  ---  D A S D   V S N   D I S P L A Y'\n         PUNCH ' ALIAS DUO'     D U,DASD,ONLINE,UUUU              @07A  00003\n         PUNCH ' ALIAS DUA'     D U,DASD,,UUUU                    @07A  00003\nDUDASD   CSECT\nDUDASD   AMODE    31\nDUDASD   RMODE    24\n*        USING    CVTMAP,R11                                      @07C\n         USING    CPPL,R3\n         USING    IOPL,R2\n         USING    ECT,R6                                          @07A\n         USING    UCBOB,R10\n         USING    DUDASD,R12                                      @07C\n         J        START                                           @07A\n         DC       CL8'DUDAD'                                      @07A\n         DC       C'&SYSDATE &SYSTIME'   ASSEMBLE DATE AND TIME   @07A\nSTART    BAKR     R14,0                  SAVE RSA INTO LINKAGE STK@05A\n         LR       R12,R15                                         @07C\n         XC       PREFIX(4),PREFIX       CLEAR PREFIX FOR PUTLINE\n         LA       R15,L'BUFFER+4\n         STH      R15,PREFIX             SAVE LENGTH OF DISPLAY LINE\n         LR       R2,R13                                           @05A\n* INITIALIZE THE IOPL CONTROL BLOCK\n         LR       R3,R1\n         LA       R2,IOPLIST\n         MVC      IOPLECT,CPPLECT        ADDRESS OF ENVIRONMENT CTL TBL\n         MVC      CMDECT,CPPLECT\n         L        R6,CPPLECT                                       @07A\n         MVC      IOPLUPT,CPPLUPT        ADDRESS OF USER PROFILE TABLE\n         MVC      CMDUPT,CPPLUPT\n         MVC      CMDCBUF,CPPLCBUF       ADDRESS OF COMMAND BUFFER\n         XC       ECB,ECB                CLEAR IOPL ECB\n         LA       R15,ECB\n         ST       R15,CMDECB\n         L        R15,VCLADCON           LOAD DUDAD PARSE PARM     @07C\n         CLC      ECTPCMD,DUD                                      @07A\n         JE       SAVEPCL                BRANCH IF YES             @07A\n         L        R15,UCLADCON           LOAD DU PARSE PARM        @07A\nSAVEPCL  ST       R15,CMDPCL\n         LA       R15,CMDANSR\n         ST       R15,CMDANS\n         LA       R5,BUFFER                                        @07A\n         LA       R1,CMDUPT              PROVIDE LIST FOR PARSE\n         LINK     EP=IKJPARS             PARSE COMMAD\n         LTR      R15,R15\n         JNZ      INVALID_UNIT\n         L        R15,CMDANSR            GET POINTER TO ANSWER AREA\n         CLC      ECTPCMD,DUD            DUDASD COMMAND ?          @07A\n         JNE      CHK_DUO_SYNTAX         BRANCH IF NO              @07A\n         L        R8,PVOLUME-DVOL(,R15)    ADDRESS OF VOLSER       @07C\n         LH       R9,PVOLUME+4-DVOL(,R15)  GET SIZE OF VOLSER      @07C\n         ST       R9,VOLL                  SAVE SIZE OF VOLSER     @08A\n         BCTR     R9,R0                  DECREMENT 1 FOR EXECUTE\n         J        SETUP                                            @07A\n* CHECK THE SYNTAX OF DUA AND DUO                                  @07A\nCHK_DUO_SYNTAX    DS  0H                                           @07A\n         L        R8,PSTARTU-DUNIT(,R15)   ADDRESS OF PSTARTU      @07A\n         LH       R9,PSTARTU+4-DUNIT(,R15) GET SIZE OF PSTARTYU    @07A\n         CHI      R9,4                   ONLY FIRST UNIT ?         @07A\n         JE       STARTU                 BRANCH IF YES             @07A\n         CHI      R9,9                                             @07A\n         JNE      DU_ERR1                BRANCH IF YES             @07A\n         CLI      PRMDLIM-PRM(R8),C':'   DELIMITER = ':'           @07A\n         JNE      DU_ERR1                                          @07A\nSTARTU   MVC      WORKAREA(4),PRMSTART-PRM(R8)  TRANSLATE START    @07A\n         TR       WORKAREA(4),TRHEX        UNIT ADDRESS TO HEX     @07A\n         TRT      WORKAREA(4),TRTHEX     START UNIT HEXIDECIMAL TST@07A\n         JNZ      DU_ERR2                BRANCH IF INVALID HEX     @07A\n         PACK     DBLWD(4),WORKAREA(5)   PACK TO MAKE HEX MAKE HEX @07A\n         MVC      DEVNSTRT,DBLWD+1       MOVE STARTING ADDRESS TO  @07A\n         CHI      R9,4                   ONLY START UNIT           @07A\n         JE       SETUP                  BRANCH IF YES             @07A\n         MVC      WORKAREA(4),PRMEND-PRM(R8)  TRANSLATE END UNIT   @07A\n         TR       WORKAREA(4),TRHEX        ADDRESS TO HEX          @07A\n         TRT      WORKAREA(4),TRTHEX     END UNIT EXIDECIMAL TEST  @07A\n         JNZ      DU_ERR3                BRANCH IF INVALID HEX     @07A\n         PACK     DBLWD(4),WORKAREA(5)   PACK TO MAKE HEX MAKE HEX @07A\n         MVC      DEVNEND,DBLWD+1        COPY END UNIT             @07A\n         CLC      DEVNSTRT,DEVNEND       START UNIT > END UNIT ?   @07A\n         JH       DU_ERR4                BRANCH IF IT IS TRUE      @07A\nSETUP    DS       0H\n         XC       SWITCH,SWITCH          CLEAR SWITCH              @07A\n*        L        R11,CVTPTR             LOAD CVT POINTER          @07D\n         XC       WORKAREA,WORKAREA      CLEAN UP WORKAREA\n         XR       R10,R10\n         EJECT\n***  >>>>>>     UCB SCAN ROUTINE - COMMON RETURN POINT     <<<<<<  @04A\nDUUNIT   DS    0H  -----------------FORMAT IOS SCAN PARM LIST      @04A\n         XC    USCNWK,USCNWK                                       @04A\n         XC    DSXAWORK,DSXAWORK       ZERO OUT UCB WORKAREA       @04A\n         LA    R1,DSXAWORK             ADDR OF UCB WORKAREA        @04A\n         ST    R1,DSXAWA               STORE IT IN PARM LIST       @04A\n         LA    R1,DSXACLAS             PTR TO DEV CLAS TO SEARCH   @04A\n         ST    R1,DSXADEVT             STORE IN PARM LIST          @04A\n         MVI   DSXACLAS,UCB3DACC       ONLY SEARCH DASD            @04A\n         LA    R1,DSXAUCBP             AREA TO STORE UCB ADDR      @04A\n         ST    R1,DSXAUCB              IN PARM LIST                @04A\n         OI    DSXAUCB,X'80'           SIGNIFY END OF PARMLIST     @04A\nDULINE   DS    0H                        NEW DISPLAY LINE\n         SPACE\n         MVI   BUFFER,C' '\n         MVC   BUFFER+1(L'BUFFER-1),BUFFER    INIT BUFFER BY BLANK\n         LA    R5,BUFFER\n         LA    R4,L'BUFFER/L'ELEMENT     NO. OF ENTRIES PER LINE\n         USING ELEMENT,R5\n         SPACE\nUCBLOOP  UCBSCAN COPY,                 NOT APF AUTHORIZED              +\n               WORKAREA=USCNWK,        100-BYTE WORK AREA/SCAN TOKEN   +\n               UCBAREA=USCNUCB,        48-BYTE UCB BASE COPY AREA      +\n               DEVNCHAR=ELEUNIT,       4-BYTE DEVICE NUMBER            +\n               DCEAREA=DCEAREA,        UCB COMMON SEGMENT              +\n               DCELEN=DCELENG,         LENGTH OF DCE                   +\n               DYNAMIC=YES,            UCB CLASS EXTENSION AREA        +\n               DEVN=DEVNSTRT,          START UNIT ADDRESS         @07C +\n               RANGE=ALL,              INCLUDE 4-DIGIT NUMBERS         +\n               NONBASE=NO,             JUST NEED 1 EXPOSURE PER DISK   +\n               DEVCLASS=DASD,          ONLY INTERESTED IN DISKS        +\n               RETCODE=RETCODE,        RETURN CODE                @07A +\n               RSNCODE=RSNCODE,        REASON CODE                @07A +\n               MF=(E,USCNPARM)         POINT TO PARAMETER LIST\n         LTR   R15,R15                 HAS A UCB RETURN ?\n         JNZ   LASTLINE                BRANCH IF NOTHING IS RETURNED\n         LA    R10,USCNUCB               YES, POINT TO UCB COPY    @04A\n         CLC   DUD,ECTPCMD             DUDASD ??                   @07A\n         JE    FMTDASD                   BRANCH IF YES             @07A\n         CLC   UCBCHAN,DEVNEND            LAST DEVICE ADDRESS ?    @07A\n         JH    LASTLINE                   BRANCH IF YES            @07A\n         J     ALLDASD                                             @07A\nFMTDASD  DS    0H                        YES, POINT TO UCB COPY    @04A\n*        CLC   0(3,R8),=CL3'ALL'       DISPLAY ALL THE DASD  ??    @07D\n         CLC   DUD(6),0(R8)            DISPLAY ALL THE DASD  ??    @07C\n         JE    ALLDASD\n*        EX    R9,COMPARE                                          @08D\n*        CALL WILDCARD MATCH SERVICE                               @08A\n         ASAXWC PATTERNSTR=(8),                                        *\n               PATTERNSTRLEN=VOLL,                                     *\n               STRING=UCBVOLI,                                         *\n               STRINGLEN=F0006,                                        *\n               ZEROORMORE=WCZ,                                         *\n               DELIMITER=BLANKS,                                       *\n               ONECHAR=WCO\n         LTR   R15,R15                 .PATTERN MATCH ?            @08A\n         JNZ   UCBLOOP                 .NO                         @08A\n*        JNE   UCBLOOP                                             @08D\nALLDASD  CLC   LASTCUU,ELEUNIT         SAME UNIT ??\n         JE    UCBLOOP                                             @04A\n         TM    SRTESTAT,UCBONLI    80  DEVICE IS ON-LINE ??\n         JO    ONLINE                                              @07C\n         CLC   ECTPCMD,DUA             DUA COMMAND ?               @07A\n         JNE   UCBLOOP                 BRANCH IF NOT TRUE          @07A\n         MVC   ELEVSN,OFFLINE          SET ELEVSN TO OFFLNE        @07A\n         TM    UCBFLA,UCBNRY           DEVICE NOT READY ?          @07A\n         JNO   RESERV                  BRANCH IF NOT TRUE          @07A\n         MVC   ELEVSN,NOTRDY           SET ELEVSN TO F-NRD         @07A\n         J     RESERV                  LOOP                        @07A\nONLINE   MVI   ELEDASH,C'-'\n         MVC   ELEVSN,UCBVOLI          GET VOLUME SERIAL\n         MVI   ELESTAT,C'O'\n         MVC   LASTCUU,ELEUNIT\n         TM    SRTESTAT,UCBALOC    40  ALLOCATED ??\n         JNO   NALLOC\n         MVI   ELESTAT,C'A'\nNALLOC   TM    SRTESTAT,UCBCHGS    08\n         JNO   PUBLIC\n         MVI   ELESTAT,C'P'            ??????\nPUBLIC   TM    UCBSTAB,UCBBPUB\n         JNO   STORAGE\n         MVC   ELESTAT2(L'SLASHP),SLASHP       PUBLIC '/P'         @07C\nSTORAGE  TM    UCBSTAB,UCBBSTR\n         JNO   RESERV\n         MVC   ELESTAT2(L'SLASHS),SLASHS        STORAGE '/S'       @07C\nRESERV   CLI   UCBSQC,0\n         JE    MOUNT\n         MVI   ELERSRV,C'R'            RESERVED\nMOUNT    TM    SRTESTAT,UCBRESV        IS IT RESERVED(MOUNT)\n         JZ    RESIDENT                NO - CHECK RESIDENT\n         MVC   ELEMSTAT(L'SRSV),SRSV   SET C'RSV' IN LINE          @07C\n         J     TSTSYS                   CONTINUE TO NEXT UCB\nRESIDENT TM    SRTESTAT,UCBPRES        IS IT RESIDENT\n         JZ    TSTSYS                   NO - CONTINUE TO NEXT UCB\n         MVC   ELEMSTAT(L'SRSD),SRSD   SET C'RSD' IN LINE          @07C\nTSTSYS   TM    UCBSTAT,UCBSYSR         SYSTEM PACK\n         JZ    ULOOP                   SKIP, IF NO\n         MVI   ELESTAT,C'S'\nULOOP    LA    R5,ELENEXT\n         BRCT  R4,UCBLOOP              NEXT UCB ENTRY\n         SPACE\nPUT      CLI   BUFFER,C' '             EMPTY LINE ?\n         JE    DONE                    BRANCH IF EMPTY LINE\n         SPACE\n         PUTLINE                                                       +\n               PARM=PUTLINE,MF=(E,IOPLIST),ECB=ECB,                    +\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     +\n               OUTPUT=(PREFIX,TERM,SINGLE,DATA)\n         SPACE\n         CLI   SWITCH,X'00'\n         JE    DULINE                  IF NOT END THEN\n         EJECT                            PROCEED TO NEXT ENTRY\nDONE     DS    0H\n         IKJRLSA  CMDANSR              FREE PARSE AREA\n         PR                                                        @05A\nLASTLINE OI    SWITCH,X'01'            TURN ON END SWITCH\n         MVC   ELEUNIT(4),BLANKS       PREVENT X'00' FROM UCBSCAN  @06A\n         J     PUT\nINVALID_UNIT   DS  0H                                              @07A\n         MVC   ELEUNIT(L'ERRMSG),ERRMSG                            @07A\n         J     PUT                                                 @07A\nDU_ERR1  DS    0H                                                  @07A\n         MVC   ELEUNIT(L'DUM_ERR1),DUM_ERR1                        @07A\n         J     PUT                                                 @07A\nDU_ERR2  DS    0H                                                  @07A\n         MVC   ELEUNIT(L'DUM_ERR2),DUM_ERR2                        @07A\n         J     PUT                                                 @07A\nDU_ERR3  DS    0H                                                  @07A\n         MVC   ELEUNIT(L'DUM_ERR3),DUM_ERR3                        @07A\n         J     PUT                                                 @07A\nDU_ERR4  DS    0H                                                  @07A\n         MVC   ELEUNIT(L'DUM_ERR4),DUM_ERR4                        @07A\n         J     PUT                                                 @07A\nCOMPARE  CLC   UCBVOLI(1),0(R8)\nVCLADCON DC    A(VIKJPCL)                                          @07A\nUCLADCON DC    A(UIKJPCL)                                          @07A\nDCELENG  DC    H'48'           SPACE FOR THE EVENT CONTROL BLOCK   @04A\nDEVNSTRT DC    XL2'0'                                              @07A\nDEVNEND  DC    XL2'FFFF'                                           @07A\nRETCODE  DC    F'0'                                                @07A\nRSNCODE  DC    F'0'                                                @07A\nF0006    DC    F'6'                                                @08A\nVOLL     DC    F'6'                                                @08A\nDBLWD    DC    D'0'                                                @07A\nSRSD     DC    C'RSD'                                              @07A\nSRSV     DC    C'RSV'                                              @07A\nSLASHS   DC    C'/S'                                               @07A\nSLASHP   DC    C'/P'                                               @07A\nDUO      DC    CL8'DUO'         D U,DASD,ONLINE,UUUU               @07A\nDUA      DC    CL8'DUA'         D U,DASD,,UUUU                     @07A\nDUD      DC    CL8'DUDASD'      D U,DASD,ONLINE                    @07A\nNOTRDY   DC    CL6'F-NRD '                                         @07A\nOFFLINE  DC    CL6'OFFLNE'                                         @07A\nERRMSG   DC    C'EXAMPLE: DU A0B0:A1FF'                            @07A\nDUM_ERR1 DC    C'INVALID SYNTAX  EXAMPLE: DU A0A0:A2FF'            @07A\nDUM_ERR2 DC    C'INVALID START UNIT ADDRESS'                       @07A\nDUM_ERR3 DC    C'INVALID END UNIT ADDRESS'                         @07A\nDUM_ERR4 DC    C'END UNIT ADDRESS IS SMALLER THAN START UNIT ADDRESS'\nBLANKS   DC    CL8' '                                              @06A\nWCZ      DC    C'*'                                                @06A\nWCO      DC    C'?'                                                @06A\nTRTHEX   DS    0X                      VERIFY HEX TABLE            @07A\n         DC    XL16'00'                                            @07A\n         DC    XL240'FF'                                           @07A\n         ORG   TRTHEX+16                                           @07A\nTRHEX    DC    256X'FF'                HEX TRANSLATION TABLE       @07A\n         ORG   TRHEX+C'A'                                          @07A\n         DC    X'0A0B0C0D0E0F'                                     @07A\n         ORG   TRHEX+C'0'                                          @07A\n         DC    X'00010203040506070809'                             @07A\nPARMLIST DS    3F          PARMLIST MAPPING\n         ORG   PARMLIST\nWORKAREA DS    CL100       UCBSCAN ROUTINE WORK AREA\nIOPLIST  DS    07F\nPREFIX   DS    2H\nBUFFER   DS    CL(L'ELEMENT*4)  OUTPUT LINE BUFFER\nLASTCUU  DS    CL4            LAST UNIT ADDRESS                    @04C\nSWITCH   DC    X'01'                                               @07C\nECB      DS    A(0)           ECB POINTER\nCMDANSR  DS    A(0)           PARSE ANSWER AREA POINTER\n* USER PPL (PARSE PARAMETER LIST)\nCMDUPT   DS    A(0)           USER PROFILE TABLE POINTER\nCMDECT   DS    A(0)           ENVIRONMENT CONTROL TABLE\nCMDECB   DS    A(ECB)         ECB POINTER\n*MDPCL   DS    A(IKJPCL)      ADDRESS OF IKJPARM                   @07D\nCMDPCL   DS    A(0)           ADDRESS OF IKJPARM                   @07A\nCMDANS   DS    A(CMDANSR)     PLACE TO PUT ANSWER\nCMDCBUF  DS    A(0)           POINTER TO COMMAND BUFFER\nCMDUWA   DS    A(0)           POINTER TO USER WORK AREA\nCMDVEWA  DS    A(0)           POINTER TO USER WORK AREA USER EXITS\nPUTLINE  PUTLINE MF=L\n         EJECT\n* IKJCPPL - TSO COMMAND PROCESSOR PARAMETER LIST\nUSCNWK   DS    XL100                    UCBSCAN WORK AREA          @04A\nUSCNUCB  DS    XL48                     UCBSCAN UCB COPY AREA      @04A\nDCEAREA  DS    XL48                     @UCB COMMON SEGMENT        @04A\n         UCBSCAN MF=(L,USCNPARM)                                   @04A\nDSXALIST DS    0F                      PARMLIST FOR UCB\nDSXAWA   DS    F                       %100-BYTE WORK AREA\nDSXADEVT DS    F                       %DEV TYPE TO SEARCH\nDSXAUCB  DS    F                       %UCB FULL WORD PTR\n         DS    0D                      FOLLOWING MUST BE ALIGNED\nDSXAWORK DS    CL100                   UCB WORK AREA\nDSXAEUCB EQU   DSXAWORK+00,04          EMULATION CURR. UCB PTR\nDSXAEILK EQU   DSXAWORK+04,04          EMULATION CVTILK2 ADDR\nDSXACLAS DS    CL1                     DEVICE CLASS TO SEARCH\nDSXAUCBP DS    F                       %UCB\n*SAEND   DS    0D\n         EJECT\n         LTORG\nVIKJPCL  IKJPARM DSECT=DVOL                                       @07C\n* IKJPCL TO BEGIN PARAMETER CONTROL LIST (PCL)\nPVOLUME  IKJIDENT 'VOLUME SERIAL',MAXLNTH=6,FIRST=ALPHA,               X\n               DEFAULT='DUDASD',OTHER=ANY                         @07C\n*              OTHER=ALPHANUM,DEFAULT='DUDASD'                    @07D\n* CHANGE THE DEFAULT FROM ALL TO 123456 AS ALL* IS A VALID VOLUME\n* SERIAL. IT IS UNLIKELY DUDASD IS A VOLUME SERAIL.\n         IKJENDP\nUIKJPCL  IKJPARM DSECT=DUNIT                                      @07A\nPSTARTU  IKJIDENT UNIT,LIST,FIRST=ALPHANUM,OTHER=ALPHANUM,CHAR,   @07A X\n               MAXLNTH=9,DEFAULT='0000'                           @07A\n         IKJENDP\n* IKJENDP TO END THE PARAMETER CONTROL LIST (PCL)\n* IKJIOPL - THE I/O PARAMETER LIST FOR GETLINE/PUTLINE/PUTGET/STACK\n         IKJIOPL\n         SPACE\nPRM      DSECT\nPRMSTART DS    CL4     0   START UNIT ADDRESS                     @07A\nPRMDLIM  DS    C       4   DELIMITER                              @07A\nPRMEND   DS    CL4     5   END UNIT ADDRESS                       @07A\nELEWRK   DSECT\nELEMENT  DS    0CL20\nELEUNIT  DS    CL4     0   UNIT NAME                              @04C\n         DS    CL1     4\nELEVSN   DS    CL6     5   VOLUMER SERIAL\nELEDASH  DS    CL1     B   -\nELESTAT  DS    CL1     C   ONLINE / ALLOCATE\nELERSRV  DS    CL1     D   RESERVED\nELEMSTAT DS    CL3     E   RESIDENT/PUB/RESERVED\nELESTAT2 DS    CL3    10                                          @04C\nELENEXT  DS    0CL1\n         SPACE\n******** ***** *********************** END OF UCB LOOKUP DSA\n         PRINT OFF\n         SPACE\n         YREGS\n         EJECT\n         CVT   DSECT=YES\n         IEFUCBOB\n         IKJCPPL\n         IKJECT                                                 @07A\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUDASD$": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x12\\x01\\x082\\x1f\\x01\\x14!o\\x12\\x10\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2008-11-16T00:00:00", "modifydate": "2014-08-04T12:10:12", "lines": 30, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//*YSLIB   DD DISP=SHR,DSN=CBT.CBT489.FILE612.PDS\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT489.FILE612(DUDASD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   DUDASD\n SETSSI  CB489612\n SETCODE AC(0)\n NAME    DUDASD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUDASD01": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1c\\x005\\x01\\x12)o\\x01\\x12)o\\x10X\\x00\\xec\\x00\\xec\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc5\\xd9\\xe2@@@'", "ispf": {"version": "01.28", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2012-10-22T10:58:35", "lines": 236, "newlines": 236, "modlines": 0, "user": "PREVERS"}, "text": "DUDASD   TITLE 'TSO CP TO DISPLAY ON THE ON-LINE VOLUUME SERIAL'\n******************************************************************\n*  SOURCE IS ORIGINATED FROM CBT TAPE FILE 300\n*\n*  MODIFIED BY ALBERT CHENG. FOR DETAIL PLEASE REFER THE COMMENT\n*  THE PROGRAM IS CODED USING TSOCP CONVENTION AND PUTLINE.\n*\n*  ABSTRACT\n*  1) REMOVE SOME BUG\n*                                       (ALBERT CHENG)   10 MAR 86\n*  2) MVS/XA ENHANCEMENT\n*                                       (ALBERT CHENG)    1 MAR 87\n*  3) ACCEPT GENERIC VOLUME SERIAL\n*                                       (ALBERT CHENG)    9 OCT 90\n*  4) SUPPORT 4 DIGITS UNIT NUMBER\n*                                       (ALBERT CHENG)   10 FEB 03\n*  5) REMOVE MACRO JVDENTER AND JVDLEAVE\n*                                       (ALBERT CHENG)   14 APR 12\n*\n*******************************************************************\n TITLE 'X A    D U D A S D R  ---   D A S D   V S N   D I S P L A Y'\nDUDASD   CSECT\n         SPACE\n*        USING    DSAWRK,R13                                      @05D\n         USING    CVTMAP,R12\n         USING    CPPL,R3\n         USING    IOPL,R2\n         USING    UCBOB,R10\n*        R8       BASE REGISTER OF INPUT OPERAND\n*        R9       LENGTH OF THE INPUT OPERAND\n         SPACE\n*        JVDENTER DSA=(DSAEND-DSAWRK),BASE=(R11),VERSION=&SYSPARM @05D\n         USING    DUDASD,R11                                      @05A\n         BAKR     R14,0                                           @05A\n         LR       R11,R15                                         @05A\n         LR       R2,R13                                          @05A\n         SPACE\n* INITIALIZE THE IOPL CONTROL BLOCK\n         LR       R3,R1\n         LA       R2,IOPLIST\n         MVC      IOPLECT,CPPLECT        ADDRESS OF ENVIRONMENT CTL TBL\n         MVC      CMDECT,CPPLECT\n         MVC      IOPLUPT,CPPLUPT        ADDRESS OF USER PROFILE TABLE\n         MVC      CMDUPT,CPPLUPT\n         MVC      CMDCBUF,CPPLCBUF       ADDRESS OF COMMAND BUF\n         XC       ECB,ECB                CLEAR IOPL ECB\n         LA       R15,ECB\n         ST       R15,CMDECB\n         L        R15,PCLADCON\n         ST       R15,CMDPCL\n         LA       R15,CMDANSR\n         ST       R15,CMDANS\n         LA       R1,CMDUPT              PROVIDE LIST FOR PARSE\n         LINK     EP=IKJPARS             PARSE COMMAD\n         L        R15,CMDANSR            GET POINTER TO ANSWER AREA\n         USING    IKJPARMD,R15\n         L        R8,IKJOPT              ADDRESS OF VOLSER\n         LH       R9,IKJOPT+4            GET SIZE OF VOLSER\n         BCTR     R9,R0                  DECREMENT FOR EXECUTE\n         DROP     R15\n         XC       PREFIX(4),PREFIX       CLEAR PREFIX FOR PUTLINE\n         LA       R15,L'BUFFER+4\n         STH      R15,PREFIX             SAVE LENGTH OF DISPLAY LINE\n         OI       SWITCH,X'00'\nSETUP    DS       0H\n         L        R12,CVTPTR             LOAD CVT POINTER\n         XC       WORKAREA,WORKAREA      CLEAN UP WORKAREA\n         XR       R10,R10\n         EJECT\n***  >>>>>>     UCB SCAN ROUTINE - COMMON RETURN POINT     <<<<<<  @04A\nDUUNIT   DS    0H  -----------------FORMAT IOS SCAN PARM LIST      @04A\n         XC    USCNWK,USCNWK                                       @04A\n         XC    DSXAWORK,DSXAWORK       ZERO OUT UCB WORKAREA       @04A\n         LA    R1,DSXAWORK             ADDR OF UCB WORKAREA        @04A\n         ST    R1,DSXAWA               STORE IT IN PARM LIST       @04A\n         LA    R1,DSXACLAS             PTR TO DEV CLAS TO SEARCH   @04A\n         ST    R1,DSXADEVT             STORE IN PARM LIST          @04A\n         MVI   DSXACLAS,UCB3DACC       ONLY SEARCH DASD            @04A\n         LA    R1,DSXAUCBP             AREA TO STORE UCB ADDR      @04A\n         ST    R1,DSXAUCB              IN PARM LIST                @04A\n         OI    DSXAUCB,X'80'           SIGNIFY END OF PARMLIST     @04A\nDULINE   DS    0H                        NEW DISPLAY LINE\n         SPACE\n         MVI   BUFFER,C' '\n         MVC   BUFFER+1(L'BUFFER-1),BUFFER    INIT BUFFER BY BLANK\n         LA    R5,BUFFER\n         LA    R4,L'BUFFER/L'ELEMENT     NO. OF ENTRIES PER LINE\n         USING ELEMENT,R5\n         SPACE\nUCBLOOP  UCBSCAN COPY,                 NOT APF AUTHORIZED              +\n               WORKAREA=USCNWK,        100-BYTE WORK AREA/SCAN TOKEN   +\n               UCBAREA=USCNUCB,        48-BYTE UCB BASE COPY AREA      +\n               DEVNCHAR=ELEUNIT,       4-BYTE DEVICE NUMBER            +\n               DCEAREA=DCEAREA,        UCB COMMON SEGMENT              +\n               DCELEN=DCELENG,         LENGTH OF DCE                   +\n               DYNAMIC=YES,            UCB CLASS EXTENSION AREA        +\n               DEVN=0,                 START WITH THE FIRST UCB        +\n               RANGE=ALL,              INCLUDE 4-DIGIT NUMBERS         +\n               NONBASE=NO,             JUST NEED 1 EXPOSURE PER DISK   +\n               DEVCLASS=DASD,          ONLY INTERESTED IN DISKS        +\n               MF=(E,USCNPARM)         POINT TO PARAMETER LIST\n         LTR   R15,R15                 HAS A UCB RETURN ?\n         BNZ   LASTLINE                BRANCH IF NOTHING IS RETURNED\n         LA    R10,USCNUCB               YES, POINT TO UCB COPY     @4A\n         CLC   0(3,R8),=CL3'ALL'       DISPLAY ALL THE DASD  ??\n         BE    ALLDASD\n         EX    R9,COMPARE\n         BNE   UCBLOOP                                             @04A\nALLDASD  CLC   LASTCUU,ELEUNIT         SAME UNIT ??\n         BE    UCBLOOP                                             @04A\n         TM    SRTESTAT,UCBONLI    80  DEVICE IS ON-LINE ??\n         BNO   UCBLOOP                                             @04A\nONLINE   MVI   ELEDASH,C'-'\n         MVC   ELEVSN,UCBVOLI          GET VOLUME SERIAL\n         MVI   ELESTAT,C'O'\n         MVC   LASTCUU,ELEUNIT                      (MODIFIED)\n         TM    SRTESTAT,UCBALOC    40  ALLOCATED ??\n         BNO   NALLOC\n         MVI   ELESTAT,C'A'\nNALLOC   TM    SRTESTAT,UCBCHGS    08\n         BNO   PUBLIC\n         MVI   ELESTAT,C'P'            ??????\nPUBLIC   TM    UCBSTAB,UCBBPUB\n         BNO   STORAGE\n         MVC   ELESTAT2(2),=C'/P'      PUBLIC\nSTORAGE  TM    UCBSTAB,UCBBSTR\n         BNO   RESERV\n         MVC   ELESTAT2(2),=C'/S'      STORAGE\nRESERV   CLI   UCBSQC,0\n         BE    MOUNT\n         MVI   ELERSRV,C'R'            RESERVED\nMOUNT    TM    SRTESTAT,UCBRESV        IS IT RESERVED(MOUNT)\n         BZ    RESIDENT                NO - CHECK RESIDENT\n         MVC   ELEMSTAT(3),=C'RSV'     SET C'RSV' IN LINE\n         B     TSTSYS                   CONTINUE TO NEXT UCB\nRESIDENT TM    SRTESTAT,UCBPRES        IS IT RESIDENT\n         BZ    TSTSYS                   NO - CONTINUE TO NEXT UCB\n         MVC   ELEMSTAT(3),=C'RSD'     SET C'RSD' IN LINE\nTSTSYS   TM    UCBSTAT,UCBSYSR         SYSTEM PACK  (MODIFIED)\n         BZ    ULOOP                   SKIP, IF NO  (MODIFIED)\n         MVI   ELESTAT,C'S'                         (MODIFIED)\nULOOP    LA    R5,ELENEXT\n         BCT   R4,UCBLOOP              NEXT UCB ENTRY            @04A\n         SPACE\nPUT      CLI   BUFFER,C' '\n         BE    DONE\n         SPACE\n         PUTLINE                                                       +\n               PARM=PUTLINE,MF=(E,IOPLIST),ECB=ECB,                    +\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     +\n               OUTPUT=(PREFIX,TERM,SINGLE,DATA)\n         SPACE\n         CLI   SWITCH,X'00'\n         BE    DULINE                  IF NOT END THEN\n         EJECT                            PROCEED TO NEXT ENTRY\nDONE     DS    0H\n         IKJRLSA  CMDANSR              FREE PARSE AREA\n         PR                                                       @05A\n*        JVDLEAVE RC=0                                            @05D\nLASTLINE OI    SWITCH,X'01'            TURN ON END SWITCH\n         B     PUT\nCOMPARE  CLC   UCBVOLI(1),0(R8)\nPCLADCON DC    A(IKJPCL)\nDCELENG  DC    H'48'           SPACE FOR THE EVENT CONTROL BLOCK  @04A\n*SAWRK   DSECT                                                    @05D\n*SSA     DS    18F         SYSTEM SAVE AREA                       @05D\nPARMLIST DS    3F          PARMLIST MAPPING\n         ORG   PARMLIST\nWORKAREA DS    CL100       UCBSCAN ROUTINE WORK AREA\nIOPLIST  DS    07F\nPREFIX   DS    2H\nBUFFER   DS    CL(L'ELEMENT*4)  OUTPUT LINE BUFFER\nLASTCUU  DS    CL4            LAST UNIT ADDRESS                  @04C\nSWITCH   DS    C\nECB      DS    A(0)           ECB POINTER\nCMDANSR  DS    A(0)           PARSE ANSWER AREA POINTER\n* USER PPL (PARSE PARAMETER LIST)\nCMDUPT   DS    A(0)           USER PROFILE TABLE POINTER\nCMDECT   DS    A(0)           ENVIRONMENT CONTROL TABLE\nCMDECB   DS    A(ECB)         ECB POINTER\nCMDPCL   DS    A(IKJPCL)      ADDRESS OF IKJPARM\nCMDANS   DS    A(CMDANSR)     PLACE TO PUT ANSWER\nCMDCBUF  DS    A(0)           POINTER TO COMMAND BUFFER\nCMDUWA   DS    A(0)           POINTER TO USER WORK AREA\nCMDVEWA  DS    A(0)           POINTER TO USER WORK AREA USER EXITS\nPUTLINE  PUTLINE MF=L\n         EJECT\n* IKJCPPL - TSO COMMAND PROCESSOR PARAMETER LIST\nUSCNWK   DS    XL100                    UCBSCAN WORK AREA       @04A\nUSCNUCB  DS    XL48                     UCBSCAN UCB COPY AREA   @04A\nDCEAREA  DS    XL48                     @UCB COMMON SEGMENT     @04A\n         UCBSCAN MF=(L,USCNPARM)                                @04A\nDSXALIST DS    0F                      PARMLIST FOR UCB\nDSXAWA   DS    F                       %100-BYTE WORK AREA\nDSXADEVT DS    F                       %DEV TYPE TO SEARCH\nDSXAUCB  DS    F                       %UCB FULL WORD PTR\n         DS    0D                      FOLLOWING MUST BE ALIGNED\nDSXAWORK DS    CL100                   UCB WORK AREA\nDSXAEUCB EQU   DSXAWORK+00,04          EMULATION CURR. UCB PTR\nDSXAEILK EQU   DSXAWORK+04,04          EMULATION CVTILK2 ADDR\nDSXACLAS DS    CL1                     DEVICE CLASS TO SEARCH\nDSXAUCBP DS    F                       %UCB\n*SAEND   DS    0D\n         EJECT\n         LTORG\nIKJPCL   IKJPARM\n* IKJPCL TO BEGIN PARAMETER CONTROL LIST (PCL)\nIKJOPT   IKJIDENT 'VOLUME SERIAL',MAXLNTH=6,FIRST=ALPHA,               X\n               OTHER=ALPHANUM,DEFAULT='ALL'\n* IKJIDENT TO DESCRIBE A NON-DELIMITER-DEPENDENT POSITIONAL OPERAND\n         IKJENDP\n* IKJENDP TO END THE PARAMETER CONTROL LIST (PCL)\n* IKJIOPL - THE I/O PARAMETER LIST FOR GETLINE/PUTLINE/PUTGET/STACK\n         IKJIOPL\n         SPACE\nELEWRK   DSECT\nELEMENT  DS    0CL20\nELEUNIT  DS    CL4     0   UNIT NAME                            @04C\n         DS    CL1     4\nELEVSN   DS    CL6     5   VOLUMER SERIAL\nELEDASH  DS    CL1     B   -\nELESTAT  DS    CL1     C   ONLINE / ALLOCATE\nELERSRV  DS    CL1     D   RESERVED\nELEMSTAT DS    CL3     E   RESIDENT/PUB/RESERVED\nELESTAT2 DS    CL3    10                                        @04C\nELENEXT  DS    0CL1\n         SPACE\n******** ***** *********************** END OF UCB LOOKUP DSA\n         PRINT OFF\n         SPACE\n         YREGS\n         EJECT\n         CVT   DSECT=YES\n         IEFUCBOB\n         IKJCPPL\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HDSPACE": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00Y\\x01\\x18\\x11o\\x01\\x18\\x11o\\tR\\x00\\x17\\x00\\x17\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2018-04-26T00:00:00", "modifydate": "2018-04-26T09:52:59", "lines": 23, "newlines": 23, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n  THE DSPACE COMMAND DISPLAYS THE AMOUNT OF FREE SPACE ON A VOLUME.\n)X SYNTAX -\n         DSPACE 'VOLLIST'\n  REQUIRED - 'VOLLIST'\n  DEFAULTS - NONE\n  ALIAS    - M01/M02/M03/M09/M27/M54 EMPTYDSK\n)O OPERANDS -\n  'VOLLIST' - A SINGLE VOLUME OR A LIST OF VOLUMES TO BE LISTED.\n\n     EXAMPLE : DSPACE\n     IT WILL DISPLAY THE FREE SPACE OF ALL THE 3390 DASD\n\n     EXAMPLE : DSPACE SY*\n     IT WILL DISPLAY THE FREE SPACE OF ALL THE VOLUME SERIAL STARTING\n     WITH SY\n\n     EXAMPLE : M09 AB?1*\n     IT WILL DISPLAY THE FREE SPACE OF ALL THE 3390 MODEL 9 DASD WITH\n     VOLUME SERIAL STARTING WITH AB AND FOURTH CHARACTER IS 1.\n\n     EXAMPLE : EMPTYDSK\n     IT WILL DISPLAY VOLUME LIST WITH ZERO USED UTILIZATION\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HDUDASD": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00X\\x01\\x143o\\x01\\x143o\\x08T\\x00<\\x00<\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2014-12-02T00:00:00", "modifydate": "2014-12-02T08:54:58", "lines": 60, "newlines": 60, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n   THE DUDASD COMMAND DISPLAYS ALL DASD DEVICES\n   DEFINED IN THE SYSTEM, WITH THE FOLLOWING DATA :\n     -  VOLUME ID, IF ONLINE\n     -  ALLOCATION STATUS, AS FOLLOWS :\n        -  O - UNALLOCATED\n        -  A - ALLOCATED\n        -  P - OFFLINE PENDING\n     -  RESERVED INDICATION, IF THE TSO SYSTEM HAS\n        SUCCESSFULLY RESERVED THE DEVICE\n     -  VOLUME STATUS\n        -  RSV - RESERVED ON THE SYSTEM\n        -  RSD - SYSTEM REDIDENT\n     -  MOUNT STATUS\n        -  /P  PUBLIC PACK\n        -  /S  STORAGE PACK\n\n)X SYNTAX\n     DUDASD VOLUME-SERIAL\n\n     REQUIRED    - VOLUME-SERIAL\n     DEFAULT     - DISPLAY THE ALL THE ON-LINE DASDS\n\n     DUO START-UNIT-ADDRESS:END-UNIT-ADDRESS\n\n     REQUIRED    - START-UNIT-ADDRESS (DEFAULT IS 0000)\n     OPTIONAL    - END-UNIT-ADDRESS   (DEFAULT IS FFFF)\n     DEFAULT     - DISPLAY THE ALL THE ON-LINE DASDS\n\n     DUA START-UNIT-ADDRESS:END-UNIT-ADDRESS\n\n     REQUIRED    - START-UNIT-ADDRESS (DEFAULT IS 0000)\n     OPTIONAL    - END-UNIT-ADDRESS   (DEFAULT IS FFFF)\n     DEFAULT     - DISPLAY STATUS OF THE DASDS\n\n)O OPERANDS -\n     VOLUME-SERRIAL - FULL OR GENERIC VOLUME SERIAL NUMBER\n\n     EXAMPLE : DUDASD\n     IT WILL DISPLAY ALL THE VOLUME SERIAL\n\n     EXAMPLE : DUDASD SYS*\n     IT WILL DISPLAY ALL THE VOLUME SERIAL STARTING WITH 'SYS'\n\n     EXAMPLE : DUDASD SY??0*\n     IT WILL DISPLAY ALL THE VOLUME SERIAL STARTING WITH 'SY' AND\n     THE FIFTH CHARACTER IS '0'.\n\n     EXAMPLE : DUO 0A00-1AFF\n     IT WILL DISPLAY ALL THE ON-LINE DASD FROM 0A00 TO 1AFF\n\n     EXAMPLE : DUO 0C00\n     IT WILL DISPLAY ALL THE ON-LINE DASD FROM 0C00 TO FFFF\n\n     EXAMPLE : DUA 1A00-1BFF\n     IT WILL DISPLAY ALL THE DASD FROM 1A00 TO 1BFF\n\n     EXAMPLE : DUA 2B00\n     IT WILL DISPLAY ALL THE DASD FROM 2B00 TO FFFF\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HFINDCMD": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x04\\x01\\x146?\\x01\\x146?\\x14(\\x00\\x10\\x00\\x10\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2014-12-29T00:00:00", "modifydate": "2014-12-29T14:28:04", "lines": 16, "newlines": 16, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION\n THE FINDCMD COMMAND LOCATES A COMMAND FILE AT THE FOLLOWING SEQUENCE\n     - USER LEVEL EXEC            ALTLIB ACT USET(EXEC)\n     - USER LEVEL CLIST           ALTLIB ACT USER(CLIST)\n     - APPLICATION LEVEL EXEC     ALTLIB ACT APPLICATION(EXEC)\n     - APPLICATION LEVEL CLIST    ALTLIB ACT APPLICATION(CLIST)\n     - SYSTEM LEVEL EXEC          EXECUTIL SEARCHDD(YES)\n     - SYSTEM LEVEL CLIST\n\n)X SYNTAX -\n     FINDCMD NAME\n\n  REQUIRED  - NAME\n\n)O OPERANDS -\n  NAME - SPECIFIES THE NAME OF THE EXEC OR CLIST.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HFINDPRG": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x06\\x01\\x15\\x00_\\x01\\x15\\x00_\\x15'\\x00\\x18\\x00\\x18\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2015-01-05T00:00:00", "modifydate": "2015-01-05T15:27:06", "lines": 24, "newlines": 24, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION\n THE HFINDPRG COMMAND LOCATES A COMMAND FROM JPA, PLPA, TASKLIB,\n STEPLIB, LIBDEF ISPLLIB, ISPLLIB, DYNAMIC LINKLIST LIRBARIES, NUCLUES,\n SYSEXEC AND SYSPROC. IT DISPLAYS THE LOAD ADDRESS OF THE MODULE IF IT\n HAS ALREADY LOADED INTO THE MEMORY (IE JPA OR PLPA).\n\n SEARCH SEQUENCE\n      - JPA (JOB PACK AREA)\n      - LIBDEF ISPLLIB\n      - ISPLLIB\n      - TASKLIB\n      - STEPLIB\n      - F/MLPA\n      - PLPA\n      - DYNAMIC LINKLIST\n      - NUCLEUS\n\n)X SYNTAX -\n         HFINDPRG MODULE\n\n  REQUIRED  - MODULE\n\n)O OPERANDS -\n  MODULE -    SPECIFIES THE NAME OF THE PROGRAM MODULE.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLOCATE": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0c\\x00\\x06\\x01\\x15\\x00_\\x01\\x15\\x00_\\x15'\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@\"", "ispf": {"version": "01.12", "flags": 0, "createdate": "2015-01-05T00:00:00", "modifydate": "2015-01-05T15:27:06", "lines": 27, "newlines": 27, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION\n THE LOCATE COMMAND LOCATES A COMMAND FROM JPA, PLPA, TASKLIB, STEPLIB,\n LIBDEF ISPLLIB, ISPLLIB, DYNAMIC LINKLIST LIRBARIES, NUCLUES, SYSEXEC\n AND SYSPROC. IT DISPLAYS THE LOAD ADDRESS OF THE MODULE IF IT HAS\n ALREADY LOADED INTO THE MEMORY (IE JPA OR PLPA).\n\n SEARCH SEQUENCE\n      - JPA (JOB PACK AREA)\n      - LIBDEF ISPLLIB\n      - ISPLLIB\n      - TASKLIB\n      - STEPLIB\n      - F/MLPA\n      - PLPA\n      - DYNAMIC LINKLIST\n      - NUCLEUS\n      - USER LEVEL EXEC/CLIST   (IE SYSUEXEC AND SYSUPROC)\n      - APPLICATION LEVEL EXEC/CLIST\n      - SYSEXEC/SYSPROC\n\n)X SYNTAX -\n         LOCATE  MODULE/COMMAND\n\n  REQUIRED  - MODULE/COMMAND\n\n)O OPERANDS -\n  MODULE -    SPECIFIES THE NAME OF THE PROGRAM MODULE OR COMMAND.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPFST": {"ttr": 1550, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x06\\x01\\x16\\x02\\x0f\\x01\\x16\\x02\\x1f\\x18 \\x00\\xa8\\x00\\xa7\\x00\\x00\\xc1\\xc3\\xc8\\xc5\\xd5\\xc7@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2016-01-20T00:00:00", "modifydate": "2016-01-21T18:20:06", "lines": 168, "newlines": 167, "modlines": 0, "user": "ACHENG"}, "text": "/* REXX ISPF status                                           */\n/*                                                            */\n/* Function :                                                 */\n/*    Display the detail status of ISPF sessions              */\n/*                                                            */\n/* Syntax : ISPFST                                            */\n/* Author : ALBERT CHENG                                      */\n/* Date   : Jan   2016                                        */\n/*                                                            */\n/* Example: SWAPBAR has 6 ISPF sessions                       */\n/*  VIEW   ISPFCU41  EDIT   ISPFCU41   DSLIST   MCOPY         */\n/*                                                            */\n/* Sample output of ISPFST                                    */\n/*    TLD1 VIEW     TSOUSR1.ABCDE.SRCLIB(MEMEBRA)             */\n/*    TLD2 SDSF     System log                                */\n/*    TLD3 EDIT     TSOUSR1.TSO.SYSEXEC(ISPFST)               */\n/*    TLD4 SDSF     EDIT    TSOUSR1A (JOB05270) JCLEDIT       */\n/*    TLD5 DSLIST   EDIT      TSOUSR1.XYZ.SRCLIB(PROGABCD)    */\n/*    TLD6 MCOPY    From TSOUSR1.TSO.CLIST(CLIST1)            */\n/*                                                            */\ntcb = ptr(540,'0')              /* PSATOLD  TCB of ISPFST     */\ntcb = ptr(tcb,'84')             /* TCBOTC   ISPTASK session x */\ntcb = ptr(tcb,'84')             /* TCBOTC   ISPFMAIN          */\ntcb = ptr(tcb,'74')             /* TCBTCB   ISPTASK session 1 */\ni   = 0\npnl.1  = 'ISRUMC2B'\npnl.2  = 'ISRUDSL0'\npnl.3  = 'ISRUTIL ';msg.3  = 'Utility Selection Panel (Option 3)'\npnl.4  = 'ISRUDA1 ';msg.4  = 'Library Utility'\npnl.5  = 'ISRUDA2S';msg.5  = 'Data Set Utility'\npnl.6  = 'ISRUARP1';msg.6  = 'Rename Data Set'\npnl.7  = 'ISRUAASE';msg.7  = 'Allocate New Data Set'\npnl.8  = 'ISRURSP ';msg.8  = 'Reset ISPF Statistics'\npnl.9  = 'ISRTSO  ';msg.9  = 'ISPF Command Shell'\npnl.10 = 'ISRUVSAM';msg.10 = 'VSAM Utilities'\npnl.11 = 'ISRSSNEW';msg.11 = 'Compare utility'\npnl.12 = 'ISRSEPRI';msg.12 = 'SuperCE (SuperC Extended) Utility'\npnl.13 = 'ISRSFPRI';msg.13 = 'Extended Search-For Utility'\npnl.14 = 'FMNSTASK';msg.14 = 'Primary Option Menu'\npnl.15 = 'FMNPDSV ';msg.15 = 'View Entry Menu'\npnl.16 = 'FMNPDSE ';msg.16 = 'Edit Entry Menu'\npnl.17 = 'FMNSTUT ';msg.17 = 'Utility Functions'\npnl.18 = 'FMNSTTS ';msg.18 = 'Tape Specific Functions'\npnl.19 = 'FMNSTDV ';msg.19 = 'Disk/VSAM Data Functions'\npnl.20 = 'FMNSTOB ';msg.20 = 'OAM Function'\npnl.21 = 'FMNSTTU ';msg.21 = 'Copybook and Template Utility function'\npnl.22 = 'FMNSHFS ';msg.22 = 'Access Hierarchical File System'\npnl.23 = 'FMNSTMQ ';msg.23 = 'WebSphere MQ Function'\npnl.24 = 'FMN3ST01';msg.24 = 'CICS Primary Option Menu'\npnl.25 = 'FMNPDVT ';msg.25 = 'Display VTOC'\npnl.26 = 'FMNPDMB ';msg.26 = 'Memory browse'\npnl.27 = 'FMNPFCH ';msg.27 = 'Find/Change Utility'\npnl.28 = 'FMNPVLM ';msg.28 = 'Load Module Information'\npnl.29 = 'FMNPVLMB';msg.29 = 'Load Module Information'\npnl.30 = 'FMNPCLM ';msg.30 = 'Load Module Compare'\npnl.31 = 'FMNPSEL ';msg.31 = 'WebSphere MQ Managers'\npnl.32 = 'ISRUUDL0';msg.32 = 'z/OS UNIX Directory List'\npnl.33 = 'ISRDDNP ';msg.33 = 'Main Menu'\npnl.34 = 'ISRUDLP ';msg.34 = 'Data Set List Utility'\npnl.35 = 'BPXWP99 ';msg.35 = 'UNIX System Services ISPF Shell'\npnl.36 = 'ISPYFP  ';msg.36 = 'Invoke dialog functions/selection panel'\npnl.37 = 'ISPYP1  ';msg.37 = 'Display panel'\npnl.38 = 'ISRDDBRS';msg.38 = 'Browse storage'\npnl.39 = 'ISPYVPN ';msg.39 = 'Variables'\npnl.40 = 'ISPYTPI ';msg.40 = 'Tables'\npnl.41 = 'ISPYLP1 ';msg.41 = 'Browse ISPF log'\npnl.42 = 'ISPYS3  ';msg.42 = 'Invoke Dialog Service'\npnl.43 = 'ISPUCMA ';msg.43 = 'Command Table Utility'\npnl.44 = 'ISPUCME ';msg.44 = 'Display coammand table'\npnl.45 = 'ERB0PRM ';msg.45 = 'RMF main menu'\npnl.46 = 'ERB3PRM ';msg.46 = 'RMF Monitor III Primary Menu'\npnl.47 = 'DGTSMMD1';msg.47 = 'ISMF Primary Option Menu'\npnl.48 = 'DGTDDDS1';msg.48 = 'Data set Selection Entry Panel'\npnl.49 = 'DGTSCMC1';msg.49 = 'Management Class Application Selection'\npnl.50 = 'DGTSCDC1';msg.50 = 'Data Class Application Selection'\npnl.51 = 'DGTLGP11';msg.51 = 'ISMF Data set list'\npnl.52 = 'XXXXXXXX';msg.52 = '???'\npnlno = 52\nspnl.1  = 'ISFJE   '\nspnl.2  = 'ISFJTOC ';smsg.2  = 'SDSF PRIMARY OPTION MENU'\nspnl.3  = 'ISFJD   ';smsg.3  = 'DA (Actice users)'\nspnl.4  = 'ISFJL   ';smsg.4  = 'System log'\nspnl.5  = 'ISFJH   ';smsg.5  = 'Held output queue'\nspnl.6  = 'ISFJO   ';smsg.6  = 'Output queue'\nspnl.7  = 'ISFJI   ';smsg.7  = 'Input queue'\nspnl.8  = 'ISFJS   ';smsg.8  = 'Status of jobs'\nspnl.9  = 'ISFJN   ';smsg.9  = 'Initiators'\nspnl.10 = 'ISFJP   ';smsg.10 = 'Printers'\nspnl.11 = 'ISFJG   ';smsg.11 = 'Job classes'\nspnl.12 = 'ISFJK   ';smsg.12 = 'Nodes'\nspnl.13 = 'ISFJR   ';smsg.13 = 'Lines'\nspnl.14 = 'ISFJZ   ';smsg.14 = 'Scheduling environments'\nspnl.15 = 'ISFJ0EN ';smsg.15 = 'Enclaves'\nspnl.16 = 'ISFJ0PS ';smsg.16 = 'OMVS processes'\nspnl.17 = 'ISFJ0R  ';smsg.17 = 'Resource monitor'\nspnl.18 = 'ISFJ0Z  ';smsg.18 = 'Health Checker'\nspnlno = 18\ndo until tcb = 0\n  rb     = ptr(tcb,'0')              /* RB                         */\n  if storage(D2X(rb+96),7) \\= 'ISPTASK' then\n    do\n     do until storage(D2X(rb+96),7) = 'ISPTASK'\n      if storage(D2X(rb+96),5) = 'EXEC ' then leave\n      if storage(D2X(rb+96),4) = 'PDS ' then leave\n      rb = c2d(storage(D2X(rb+29),3))   /* Previous RB             */\n      if rb = 0 then exit\n     end\n    end\n  tld    = ptr(rb, '44')\n  i      = i + 1\n  tlds   = tldx                      /*                            */\n  tldx   = storage(D2X(tld), 4)      /* Get TLDx                   */\n  tldc.i = tlds                      /* Save old TLD               */\n  sa     = ptr(tld,'80')             /* Address of screen area     */\n  line3d = sa + 161\n  line3  = storage(D2X(line3d),63)\n  if left(tldx,3) = 'TLD' then do\n   temp1 = sa + 168\n   do until storage(D2X(temp1),1) > 'C0'x\n    temp1 = temp1 + 1\n   end\n   temp2 = temp1+1\n   do until storage(D2X(temp2),1) < '.'\n    temp2 = temp2 + 1\n   end\n   panel    = storage(D2X(tld+344),8)\n   scrname  = C2D(storage(D2X(tld+X2D(354)),1))  /*         */\n   command  = storage(D2X(tld+X2D(354)),8)       /* SCRNAME */\n   line     = storage(D2X(temp1),temp2-temp1)\n   if command = 'DSLIST' & panel \\= 'ISRUDSL0' then ,\n      line = storage(D2X(sa+161),55)\n   msg.1 = storage(D2X(sa+170),52)\n   msg.2 = storage(D2X(sa+170),59)\n   do a = 1 to pnlno\n    if panel = pnl.a then do\n       line = msg.a\n       leave\n       end\n   end\n   if a = pnlno then tldout = 'PANEL : ' || panel\n                else tldout = panel || ' ' || line\n   if left(command, 5) = 'RACF ' then line = storage(D2X(sa+28),42)\n   smsg.1 = storage(D2X(sa+6),44)\n   if left(panel, 3) = 'ISF' then\n        do\n          helppnl = storage(D2X(tld+360), 8)\n          tldout = line3\n          do a = 1 to spnlno\n             if helppnl = spnl.a then do\n                 tldout = 'SDSF     ' || smsg.a\n                 leave\n             end\n          end\n        end\n   if scrname = 0 then line = tldx tldout\n                  else line = tldx command line\n   display = 0\n   do j = 1 to i\n    if tldx = tldc.j then display = 1\n   end\n   if display = 0 then say line\n tcb    = ptr(tcb,'74')          /* TCBTCB   Mother TCB  */\nend\nend\nexit\n/* Internal Function to fetch address   */\nptr: ARG ad1,ad2\nRETURN C2D(STORAGE(D2X(ad1+X2D(ad2)),4))   /* ad1 = dec, ad2 = hex */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JBLOCATE": {"ttr": 1554, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00H\\x01\\x142\\x9f\\x01\\x142\\x9f\\x17\\x07\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2014-11-25T00:00:00", "modifydate": "2014-11-25T17:07:48", "lines": 27, "newlines": 27, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXXL JOB SYS,(BLOCATE),MSGCLASS=X,\n//             MSGLEVEL=(1,1),REGION=4096K,CLASS=A,\n//             NOTIFY=&SYSUID\n//*---------------------------------------------------------\n//* SAMPLE JCL TO EXECUTE LOCATE A MODULE\n//*---------------------------------------------------------\n//SDSL   EXEC PGM=BLOCATE,PARM='ISPLLS'\n//STEPLIB  DD  DISP=SHR,DSN=XXXXXX.LOADLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=ANY.LOADLIB       <-- OPTIONAL\n//LPALIB   DD  DISP=SHR,DSN=SYS1.LPALIB       <-- YOUR LPALST\n//         DD  DISP=SHR,DSN=SYS1.ISP.SISPLPA\n//         DD  DISP=SHR,DSN=SYS1.EUV.SEUVLPA ET\n//         DD  DISP=SHR,DSN=SYS1.SCEELPA\n//         DD  DISP=SHR,DSN=SYS1.SDF2.V1R4M0.SDGILPA\n//         DD  DISP=SHR,DSN=SYS1.SERBLPA\n//         DD  DISP=SHR,DSN=SYS1.SBDTLPA\n//         DD  DISP=SHR,DSN=SYS1.TCPIP.SEZALPA\n//         DD  DISP=SHR,DSN=SYS1.NETVIEW.SCNMLPA1\n//         DD  DISP=SHR,DSN=SYS1.ISF.SISFLPA\n//         DD  DISP=SHR,DSN=SYS1.SDWWDLPA\n//         DD  DISP=SHR,DSN=SYS1.EOY.SEOYLPA\n//         DD  DISP=SHR,DSN=SYS1.EXITS.LPALIB\n//         DD  DISP=SHR,DSN=SYS1.MQM.SCSQLINK\n//         DD  DISP=SHR,DSN=SYS1.MQM.SCSQSNLE\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCATNEWD": {"ttr": 1556, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x14$_\\x01\\x14$_\\x15\\x07\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-09-02T00:00:00", "modifydate": "2014-09-02T15:07:53", "lines": 12, "newlines": 12, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXXX JOB SYS,'CATNEWDS',\n//             MSGCLASS=X,MSGLEVEL=(1,1),CLASS=T,\n//             REGION=4096K,\n//             NOTIFY=&SYSUID\n//*\n//CATNEWDS EXEC PGM=CATNEWDS\n//STEPLIB  DD  DISP=SHR,DSN=YOUR.LOADLIB\n//CATALOG  DD  DISP=SHR,DSN=XXXXX.CUTIN.CNTL(VVVVVV)\n//FALLBACK DD  DISP=SHR,DSN=XXXXX.FALLBACK(VVVVVV)\n//NEWIPL   DD  DISP=SHR,UNIT=SYSALLDA,VOL=SER=VVVVVV\n//SYSPRINT DD  DUMMY\n//SYSUDUMP DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCL1": {"ttr": 1558, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x005\\x01\\x12)o\\x01\\x12)o\\x10X\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc1\\xc3\\xc8\\xc5\\xd5\\xc7@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2012-10-22T10:58:35", "lines": 26, "newlines": 26, "modlines": 0, "user": "ACHENG"}, "text": "//XXXXXXXL JOB SYS,(BLOCATE),MSGCLASS=X,\n//             MSGLEVEL=(1,1),REGION=4096K,CLASS=A,\n//             NOTIFY=&SYSUID\n//*---------------------------------------------------------\n//* SAMPLE JCL TO EXECUTE LOCATE LPA MODULE ISPLLS\n//*---------------------------------------------------------\n//SDSL   EXEC PGM=BLOCATE,PARM='ISPLLS'\n//STEPLIB  DD  DISP=SHR,DSN=XXXXXX.LOADLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.LPALIB\n//         DD  DISP=SHR,DSN=SYS1.ISP.SISPLPA\n//         DD  DISP=SHR,DSN=SYS1.EUV.SEUVLPA ET\n//         DD  DISP=SHR,DSN=SYS1.SCEELPA\n//         DD  DISP=SHR,DSN=SYS1.SDF2.V1R4M0.SDGILPA\n//         DD  DISP=SHR,DSN=SYS1.SERBLPA\n//         DD  DISP=SHR,DSN=SYS1.SBDTLPA\n//         DD  DISP=SHR,DSN=SYS1.TCPIP.SEZALPA\n//         DD  DISP=SHR,DSN=SYS1.NETVIEW.SCNMLPA1\n//         DD  DISP=SHR,DSN=SYS1.ISF.SISFLPA\n//         DD  DISP=SHR,DSN=SYS1.SDWWDLPA\n//         DD  DISP=SHR,DSN=SYS1.EOY.SEOYLPA\n//         DD  DISP=SHR,DSN=SYS1.EXITS.LPALIB\n//         DD  DISP=SHR,DSN=SYS1.MQM.SCSQLINK\n//         DD  DISP=SHR,DSN=SYS1.MQM.SCSQSNLE\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCL2": {"ttr": 1560, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x12)o\\x01\\x12)o\\x10X\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc1\\xc3\\xc8\\xc5\\xd5\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2012-10-22T10:58:35", "lines": 12, "newlines": 12, "modlines": 0, "user": "ACHENG"}, "text": "//XXXXXXXX JOB SYS,'CATNEWDS',\n//             MSGCLASS=X,MSGLEVEL=(1,1),CLASS=T,\n//             REGION=4096K,\n//             NOTIFY=&SYSUID\n//*\n//CATNEWDS EXEC PGM=CATNEWDS\n//STEPLIB  DD  DISP=SHR,DSN=YOUR.LOADLIB\n//CATALOG  DD  DISP=SHR,DSN=XXXXX.CUTIN.CNTL(VVVVVV)\n//FALLBACK DD  DISP=SHR,DSN=XXXXX.FALLBACK(VVVVVV)\n//NEWIPL   DD  DISP=SHR,UNIT=SYSALLDA,VOL=SER=VVVVVV\n//SYSPRINT DD  DUMMY\n//SYSUDUMP DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCL3": {"ttr": 1562, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x12)o\\x01\\x12)o\\x10X\\x00\\n\\x00\\n\\x00\\x00\\xc1\\xc3\\xc8\\xc5\\xd5\\xc7@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2012-10-22T10:58:35", "lines": 10, "newlines": 10, "modlines": 0, "user": "ACHENG"}, "text": "//XXXXXXXP JOB SYS,(DSPACE),MSGCLASS=X,\n//             MSGLEVEL=(1,1),REGION=8192K,CLASS=T,\n//             NOTIFY=&SYSUID\n//PDSL    EXEC PGM=IKJEFT01,REGION=4096K\n//STEPLIB  DD  DISP=SHR,DSN=XXXXXX.LOADLIB\n//SYSTSPRT DD  SYSOUT=*\n//SYSPRINT DD  DUMMY\n//SYSTSIN  DD  *\nDSPACE\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JDATE": {"ttr": 1794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00E\\x01\\x145?\\x01\\x145?\\x08D\\x00:\\x00:\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2014-12-19T00:00:00", "modifydate": "2014-12-19T08:44:45", "lines": 58, "newlines": 58, "modlines": 0, "user": "REXX"}, "text": "/* REXX EXEC TO REFORMAT DATA FROM YYDDDX TO DD/MM/YY  */\n/* AUTHOR : ALBERT CHENG                               */\n/* DATE   : NOVEMBER 1989                              */\nJULIAN: ARG JYEAR JDDD\n\nIF JYEAR/4 = JYEAR%4\n  THEN DO\n         MONTH.0 = 0\n         MONTH.1 = 31\n         MONTH.2 = 60\n         MONTH.3 = 91\n         MONTH.4 = 121\n         MONTH.5 = 152\n         MONTH.6 = 182\n         MONTH.7 = 213\n         MONTH.8 = 244\n         MONTH.9 = 274\n         MONTH.10= 305\n         MONTH.11= 335\n         MONTH.12= 366\n        END\n  ELSE DO\n         MONTH.0 = 0\n         MONTH.1 = 31\n         MONTH.2 = 59\n         MONTH.3 = 90\n         MONTH.4 = 120\n         MONTH.5 = 151\n         MONTH.6 = 181\n         MONTH.7 = 212\n         MONTH.8 = 243\n         MONTH.9 = 273\n         MONTH.10= 304\n         MONTH.11= 334\n         MONTH.12= 365\n        END\n    MONTHC.1 = 'JAN'\n    MONTHC.2 = 'FEB'\n    MONTHC.3 = 'MAR'\n    MONTHC.4 = 'APR'\n    MONTHC.5 = 'MAY'\n    MONTHC.6 = 'JUN'\n    MONTHC.7 = 'JUL'\n    MONTHC.8 = 'AUG'\n    MONTHC.9 = 'SEP'\n    MONTHC.10= 'OCT'\n    MONTHC.11= 'NOV'\n    MONTHC.12= 'DEC'\n   I = 0\n   DO WHILE MONTH.I < JDDD\n      I = I + 1\n   END\n   FMONTH = MONTHC.I\n   J = I - 1\n   FDATE = JDDD - MONTH.J\n   IF FDATE < 10 THEN FDATE = '0' || FDATE\n   FDATE = FDATE || '-' || MONTHC.I || '-' || JYEAR\nRETURN FDATE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JDSPACE": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x007\\x01\\x142O\\x01\\x142O\\x14%\\x00\\n\\x00\\n\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2014-11-20T00:00:00", "modifydate": "2014-11-20T14:25:37", "lines": 10, "newlines": 10, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXX  JOB SYS,(DSPACE),MSGCLASS=X,\n//             MSGLEVEL=(1,1),REGION=8192K,CLASS=A,\n//             NOTIFY=&SYSUID\n//DSPACE  EXEC PGM=IKJEFT01\n//STEPLIB  DD  DISP=SHR,DSN=XXXXXX.LOADLIB   <--- YOUR LOADLIB\n//SYSTSPRT DD  SYSOUT=*\n//SYSPRINT DD  DUMMY\n//SYSTSIN  DD  *\nDSPACE\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JLISTPDS": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x05\\x01\\x14)O\\x01\\x14)O\\x10'\\x00\\r\\x00\\r\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-10-21T00:00:00", "modifydate": "2014-10-21T10:27:05", "lines": 13, "newlines": 13, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXXJ JOB XXX,'LISTPDS',CLASS=A,REGION=6M,\n//         MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=&SYSUID\n//LISTPDS      EXEC PGM=LISTPDS,PARM='LIST,NOTRUNC,UNLOAD'                  0020\n//STEPLIB      DD   DISP=SHR,DSN=YOUR.LOADLIB                               0020\n//SYSLIB       DD   DISP=SHR,DSN=YOUR.SOURCE.PDS1                           0030\n//             DD   DISP=SHR,DSN=YOUR.SOURCE.PDS2                           0030\n//SYSPRINT     DD   SYSOUT=*                                                0040\n//UNLOAD       DD   DISP=(NEW,CATLG,DELETE),DSN=YOUR.UNLOAD,                0040\n//             SPACE=(CYL,(2,1))\n//SYSLIST      DD   SYSOUT=*                                                0040\n//SYSIN        DD   DUMMY                                                   0050\n//SYSPUNCH     DD   DUMMY                                                   0050\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JSHOWPPT": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x15\\x00_\\x01\\x15\\x00_\\x16\\x13\\x00\\n\\x00\\n\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-01-05T00:00:00", "modifydate": "2015-01-05T16:13:02", "lines": 10, "newlines": 10, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXXS JOB SYS,(SHOWPPT),MSGCLASS=X,\n//             MSGLEVEL=(1,1),REGION=4096K,CLASS=A,\n//             NOTIFY=&SYSUID\n//*---------------------------------------------------------\n//* DISPLAY MVS PPT\n//*---------------------------------------------------------\n//SDSL   EXEC PGM=SHOWPPT\n//STEPLIB  DD  DISP=SHR,DSN=XXXXXX.LOADLIB\n//SYSPRINT DD  SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JSRCHLOG": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x009\\x01\\x195\\x9f\\x01\\x195\\x9f#A\\x00\\x15\\x00\\x15\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-12-25T00:00:00", "modifydate": "2019-12-25T23:41:39", "lines": 21, "newlines": 21, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXXX JOB SYS,(PRSYSLOG),MSGCLASS=X,\n//             MSGLEVEL=(1,1),REGION=4096K,CLASS=A,\n//             NOTIFY=&SYSUID\n//* -----------------------------------------------------------------\n//* SEARCH SYSLOG\n//* -----------------------------------------------------------------\n//EXTRACT  EXEC PGM=SRCHLOG,PARM='#A'     DELIMETER #  RECFM VBA\n//*XTRACT  EXEC PGM=SRCHLOG,PARM='!B'     DELIMETER !  RECFM VB\n//STEPLIB  DD DISP=SHR,DSN=YOUR.LOADLIB\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSLOG   DD DISP=SHR,DSN=YOUR.SYSLOG.FILE\n//PRTFILE  DD SYSOUT=*\n ABEND #\nSYMPTOM #\nJCL ERROR #\nNOT FOUND #\nNOT AUTHORIZED TO CONSOLE#\nINVALID PASSWORD ENTERED#\n//\nICH408I#\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JSYSINCD": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00V\\x01\\x14&\\x1f\\x01\\x14&\\x1f\\x17\\x08\\x00\\x16\\x00\\x16\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-09-18T00:00:00", "modifydate": "2014-09-18T17:08:56", "lines": 22, "newlines": 22, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXXP JOB SYS,(SYSINCRD),MSGCLASS=X,\n//             MSGLEVEL=(1,1),REGION=4096K,CLASS=A,\n//             NOTIFY=&SYSUID\n//TEST1   EXEC  PGM=SYSINCRD,PARM=''REC 1 DATA,;REC 2 DATA;REC 3 DATA;'\n//STEPLIB   DD  DISP=SHR,DSN=XXXXXX.LOADLIB\n//SYSIN     DD  SYSOUT=*\n//*\n//TEST2   EXEC  PGM=SYSINCRD,PARM='REC 1 DATA,;REC 2 DATA124567;  R3'\n//STEPLIB   DD  DISP=SHR,DSN=XXXXXX.LOADLIB\n//SYSUDUMP  DD  SYSOUT=*\n//SYSIN     DD  SYSOUT=*\n//*\n//TEST3   EXEC  PGM=SYSINCRD,PARM=(' FIRST RECORD',\n//             '; SECOND RECORD (FIRST CONTINUATION)',\n//             'MORE OF SECOND RECORD;THIRD AND LAST RECORD')\n//STEPLIB   DD  DISP=SHR,DSN=XXXXXX.LOADLIB\n//SYSUDUMP  DD  SYSOUT=*\n//SYSIN     DD  SYSOUT=*\n//*\n//TEST4   EXEC  PGM=SYSINCRD,PARM='FIRST RECORD,;SECOND RECORD,;THIRD RE\n//             CORD,;FOURTH RECORD,;FIFTH RECORD,;SIXTH RECORD,;EIGHT RE\n//             CORD'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTPDS": {"ttr": 1806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x016\\x00\\x06\\x01\\x14)O\\x01\\x14)O\\x13%\\x0cT\\x0cT\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.54", "flags": 0, "createdate": "2014-10-21T00:00:00", "modifydate": "2014-10-21T13:25:06", "lines": 3156, "newlines": 3156, "modlines": 0, "user": "ASM"}, "text": "LPDS TITLE 'LISTPDS  --  LIST PARTITIONED DATA SET UTILITY PROGRAM'\n*---------------------------------------------------------------------*\n*\n* TITLE - LIST PARTITIONED DATA SET UTILITY PROGRAM\n*\n* NAME - LISTPDS,  ENTRY POINT - LISTPDS\n*\n* STATUS - VERSION 7.3,  UPDATED 27MAR78\n*          VERSION 7.3A  UPDATED 04DEC81\n*                        AIR FORCE DATA SERVICES CENTER, THE PENTAGON.\n*                        BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*          VERSION 8.0   UPDATED 01JAN94\n*                        FINANCIAL MANAGEMENT SERVICE, US TREASURY\n*                        JIM MARSHALL, CAPT, USAF-RET\n*\n* DEVELOPED BY . . .\n*       GENE CZARCINSKI\n*       NASA/GODDARD SPACE FLIGHT CENTER\n*       GREENBELT, MARYLAND\n*\n* FUNCTION/OPERATION - \"LISTPDS\" IS AN OS/360 DATA SET UTILITY\n*       PROGRAM FOR LISTING AND/OR PUNCHING SOURCE/OBJECT LIBRARIES\n*       (PARTITIONED DATA SETS).  ALL MEMBERS PROCESSED BY LISTPDS\n*       ARE ALWAYS OUTPUTTED IN COLLATING SEQUENCE (EXCEPT WHEN\n*       SELECTED MEMBERS ARE PROCESSED).  LISTPDS GENERATES\n*       TWO FORMATTED PRINTOUTS -\n*          1. (ON SYSPRINT) A FORMATTED LISTING OF THE PDS'S\n*             DIRECTORY TOGETHER WITH THE PAGE NUMBERS OF THE\n*             OUTPUT LISTING (FOR EACH MEMBER).\n*          2. (ON SYSLIST) A FORMATTED PRINTOUT OF THE CONTENTS\n*             OF EACH MEMBER PROCESSED.\n*\n*---------------------------------------------------------------------*\n*\n* ATTRIBUTES - ENABLED, SERIALLY REUSABLE, BLOCK LOADED,\n*       SINGLE LOAD MODULE, NO OVERLAY.\n*\n* ACCESS METHODS - QSAM LOCATE MODE (RECFM=FB) USED FOR\n*       SYSPRINT, SYSLIST, SYSPUNCH;  BSAM/BPAM USED FOR\n*       PDS I/O (SYSLIB); BSAM IS USED FOR SYSIN;\n*       AND EXCP IS USED FOR PDS-DIRECTORY READING.\n*\n*\n* NOTES -\n*       1. VERSION 6 OF \"LISTPDS\" IS A MAJOR REDESIGN OF THE\n*          PROGRAM AND REPLACES ALL PREVIOUS VERSIONS.\n*       2. ASIDE FROM THE EDIT (ED) DECIMAL INSTRUCTION, \"LISTPDS\"\n*          IS CODED ENTIRELY WITH STANDARD INSTRUCTION SET (360)\n*          INSTRUCTIONS.\n*       3. \"LISTPDS\" DOES ITS OWN DIRECTORY PROCESSING AND ALWAYS\n*          READS THE ENTIRE DIRECTORY (USING BSAM).\n*       4. DEFAULT SWITCH AND DDNAMES CAN BE CHANGED BY MODIFYING\n*          THE ASSEMBLY VARIABLES.\n*       5. THE STANDARD TRANSLATE TABLES ARE SETUP FOR 'QN'\n*          PRINT CHAIN OUTPUT.\n*       6. ALL PRINTED OUTPUT USES ASA CONTROL CHARACTERS.\n*       7. TO BE PROPERLY PROCESSED BY LISTPDS, ALL PDS\n*          DIRECTORIES *MUST* BE IN STANDARD FORMAT: THE LAST\n*          ENTRY IN EACH DIRECTORY IS HEX F'S.\n*       8. CODE HAS BEEN ADDED TO HANDLE PROCESSING OF CONCATON-\n*          ATED SYSLIB DD STATEMENTS.\n*       9. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED LAYOUT\n*          OF THE SYSLIB JFCB'S, DSCB'S AND THE \"CAMLST\" GENERATED\n*          CONTROL BLOCK FOR READING THE DSCB.\n*      10. LISTPDS OPERATION IS DEPENDENT ON THE ASSUMED OPERATION\n*          OF THE BPAM READ & FIND (C) ROUTINES FOR DIRECTORY AND\n*          MEMBER READING.\n*      11. DEFAULT BLKSIZES HAVE BEEN CHANGED FROM UNBLOCKED\n*          TO BLOCKED --\n*                 SYSPRINT - 3509\n*                 SYSLIST  - 7260\n*                 SYSPUNCH - 3200\n*                 SYSIN    - 3200\n*      12. THE DEFAULT BUFNO IS NOW SET TO 2.\n*      13. THE DEFAULT MAX LINES/PAGE IS NOW SET TO 60.\n*\n* VERSION 7.0 --\n*      14. DEFAULT MAX LINES/PAGE NOW SET TO 84.\n*      15. STAE PROCESSING HAS BEEN REMOVED.\n*      16. ALL VCONS HAVE BEEN CHANGED TO ADCONS.\n*      17. MAX OUTPUT LINE LENGTH CHANGED TO 116 CHARACTERS.\n*      18. PUNCHING ONLY OUTPUTS UP TO THE FIRST 80 BYTES OF\n*          EACH LOGICAL RECORD.\n*      19. THE XLATE (TRANSLATE) FUNCTION HAS BEEN DELETED.\n*      20. ABEND60A FIXED (BUG IN 'CLEARBUF')\n*      21. EJECT/NOEJECT FUNCTION IMPLEMENTED.\n*\n* VERSION 7.1 --\n*      22. REWORK CODE TO MAKE IT ONE CSECT\n*      23. FIX 7.0 BUG IN 'MONTHS'\n*      24. REFORMAT SOURCE CODE TO MAKE MORE READABLE.\n*      25. CHANGE PARM-ANAL TO SKIP OVER BAD KEYWORDS\n*      26. PAGE EJECT SYSLIST BETWEEN LIBRARIES\n*      27. TEST FOR 'NEAR BOTTOM' AND EJECT SYSLIST IF SO\n*      28. PUT TITLE AT TOP AND BOTTOM OF SYSLIST IF IN EJECT MODE.\n*      29. CREATE SYSPRINT HEADER PAGE AND TRAILOR PAGE.\n*      30. REWORK LIB-FILE INIT CODE TO USE THE 'LCB' AREAS AND\n*          COUNT THE NUMBER OF DIR BLOCKS PER TRACK.\n*      31. REWORK DIR READ TO USE EXCP I/O.\n*      32. DEFAULT MAXLINES CHANGED TO 80.\n*      33. ADD MAXLIST, SELECT, AND EXCLUDE OPTIONS.\n*      34. CHANGE PRINT, LIST AND PUNCH TO USE QSAM MOVE I/O.\n*      35. REWORK CORE MANAGEMENT TO ISSUE ONE LARGE GETMAIN\n*          AND DO SUBALLOCATION FROM THAT AREA.\n* VERSION 7.2 --\n*      36. MAKE SELECT/EXCLUDE WORK FOR SPECIFIED MEMBERS\n*      37. REWORK LOUT SO THAT ADCON IS USED FOR LIST DCB ADDR\n*      38. REWORK LOUT SO THAT BOTTOM OF PAGE PROCESSING FOR\n*          NOEJECT MODE WORKS PROPERLY\n*      39. CHECK FOR RECFM=V/VB AND USE SECONDARY DCB IF SO\n*          TO PERFORM PROPER I/O (NO I/O ERRORS).\n*      40. CREATE S/R TO FORMAT & PRINT SYSPRINT DATA FOR\n*          FOR MEMBER SO IT CAN BE USED AFTER A MEMBER IS\n*          PROCESSED (SAVE INFO IN THE 'DIR' AREA).\n*      41. REORGANIZE CODE TO PROVIDE MORE BASE REGISTER\n*          ADDRESSABILITY BY MOVING SOME OF THE INITIALIZATION\n*          CODE INTO SEPARATELY ADDRESSABLE SUBROUTINES.\n*      42. ADD THE CAPABILITY TO LIST/PUNCH SEQUENTIAL DATASETS\n*          WHICH ARE POINTED TO BY THE SYSLIB CONCATENATION.\n*      43. CODE ADDED TO RE-INIT DCB IF RECFM CHANGES\n*          SO THAT THE DATASET WILL BE PROCESSED CORRECTLY\n*          WITH NO 'I/O ERRORS'.\n*      44. REWORK CODE SO THAT A SPECIAL END MSG WILL BE\n*          ISSUED IF PROCESSING A SEQUENTIAL DATASET.\n*      45. COUNTERS ADDED FOR PDS AND SDS PROCESSING.\n*      46. MODIFY DATASET I/O ERROR HANDLING TO LIST\n*          THE CONCATENATION SEQUENCE NUMBER SO THAT\n*          THE DATASET CAN BE IDENTIFIED AND THEN\n*          GO LIST THE PROCESSED DIRECTORY ENTRIES IF\n*          A PDS; PRODUCE AN EXTRA I/O ERROR MSG AT END\n*          OF DIRECTORY LISTING.\n*      47. CHANGE THE CODE TO ALLOCATE THE DATASET READ BUFFERS\n*          BASED ON THE SIZE OF EACH DATASET BEING PROCESSED.\n*\n* VERSION 7.3 --\n*      48. FIX RITSINFO/CRJEINFO SO DIRECTORY ENTRY IS LISTED\n*          CORRECTLY FOR RITS/CRBE/CRJE LIBRARIES.\n*      49. FIX BUG WHICH CAUSES ABEND0C0 WHEN \"EXCLUDE\" IS\n*          SPECIFIED FOR SELECTED MEMBERS.\n*\n* VERSION 7.3A -- UPDATES AT AIR FORCE DATA SERVICES CENTER, PENTAGON\n*          04 DEC 81, BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*      50. FOR DECK AND UPDTE, PUT SSI= KEYWORD AFTER THE MEMBER NAME\n*          ON THE ./ ADD STATEMENT, INSTEAD OF BEFORE.\n*      51. IF UPDTE IS SPECIFIED AND A MEMBER CONTAINS IEBUPDTE\n*          STATEMENTS, THE './' STATEMENTS WITHIN THE MEMBER WILL\n*          BE PUNCHED WITH THE './' CHANGED TO '><'. SEE NOTE 54 TOO.\n*      52. GET TIOT ADDRESS DIRECTLY INSTEAD OF GOING THRU EXTRACT SVC.\n*      53. ADD NEW PARM OPTION 'NOSEL' TO IGNORE SYSIN,\n*          SO WE CAN KEEP SYSIN ALLOCATED TO THE TERMINAL UNDER TSO.\n*      54. SPF (AN IBM PROGRAM PRODUCT) STATISTICS IN A PDS DIRECTORY\n*          WILL BE FORMATTED ON SYSPRINT AND IN THE COMMENTS AREA\n*          OF ./ ADD STATEMENTS.\n*          NOTE: WE HAVE A PROGRAM THAT WILL RE-LOAD THE IEBUPDTE DECK\n*          TO A PDS AND RESTORE THE SPF STATS FROM THE ./ ADD CARD.\n*          (AND RESTORE '><' TO './' --- SEE NOTE 51).\n*      55. IF 'NOSPF' IS SPECIFIED, OR IF NO MEMBERS IN A PDS CONTAIN\n*          SPF STATISTICS, THEN THE OLD HEX FORMATTING WILL BE USED.\n*      56. DEFAULT MAXLINES CHANGED TO 60.\n*      57. JUST PRINT HH.MM OF TIME IN HEADING, NOT HH.MM.SS\n*      58. INSTEAD OF VOL=VVVVVV, DSN=DDDDDDDDDDDDD    IN HEADINGS,\n*               PRINT - DDDDDDDDD - VOL=VVVVVV\n*      59. SUPPRESS ZEROS IN PAGE INDEX OF LISTDIR, SO PAGE 0 WILL\n*          JE PAGE BLANK.\n*      60. SUPPRESS ZEROS IN LRECL, BLKSIZE.  LEFT JUSTIFY.\n*      61. DEFAULT EJECT.\n*      62. REDUCE LINEMAX BY 1 INTERNALLY, BECAUSE WE KEEP GETTING\n*          ONE MORE LINE PER PAGE THAN THE SPECIFIED LINECNT.     .LCT.\n*      63. HEADINGS CHANGED. MEMBER NAME ON LEFT.                 .LCT.\n*\n* VERSION 8.0 --\n*      64. ADDED INTO OPTIONS LIST SPF/NOSPF.\n*      65. ADDED DSECTS WHERE EVER POSSIBLE IN PREPARATION FOR MVS/ESA.\n*      66. MADE THE CODE MORE READABLE FOR FUTURE GENERATIONS.\n*\n* VERSION 8.1 --\n*      67. ADD NEW OPTION UNLOAD TO CREATE A SEQUENTIAL FILE      .AC.\n*          WITH DDNAME UNLOAD TO HAVE SAME DCB ATTRIB AS DDNAME\n*          SYSLIB. IT SUPPORTS BOTH VB AND FB RECFM. THE UNLOAD\n*          FILE HAS NO MEMBER SEPARATOR AND YOU CAN SORT THE\n*          UNLOAD FILE. (NOTE: MEMBER SEPARATOR MAY BE SUPPORTED\n*          LATER)\n*\n*          A) YOU CAN UNLOAD A PDS WITH LRECL LONGER THAN 130\n*             (NOTE: IEBPTPCH ONLY UNLOAD PDS WITH LRECL SHORTER\n*             THAN 130 BYTES)\n*          B) THE UNLOAD RECORD HAS EXACT LRECL AS THE SOURCE PDS.\n*             (NOTE: THE NOTRUNC OPTION OF LISTPDS SPLIT THE RECORDS\n*             INTO MULTIPLE RECORDS IF THE LRECL IS LONGER THAN 116)\n*          C) FOR CONCATENATED SYSLIB, THE RECFM AND LRECL MUST BE\n*             THE SAME, OTHERWISE THE PROGRAM MAY ABORT OR THE\n*             OUTPUT UNLOAD FILE HAS INVALID RECORD.\n*             (NOTE: THIS RESTRICTION MAY BE IMPROVED LATER)\n*          D) THE DEFAULT OPTION IS NOUNLOAD.\n*      68. CHANGE BRANCH INSTRUCTIONS TO JUMP INSTRUCTIONS.       .AC.\n*      69. CHANGE MACRO CRJE, PACL, P1 & P2 TO USE VARIABLES.     .AC.\n*          INSTEAD OF LITERALS. LTORG IS NO LONGER REQUIRED.\n*      70. USE NEW ASSEMBLER INSTRUCTION SUCH AS LARL, AHI, NILL  .AC.\n*          AND ETC TO MAKE THE PROGRAM MORE READABLE.             .AC.\n*      71. USE LINKAGE STACK AS REGISTER SAVE AREA                .AC.\n*      72. RE-ORGANISE THE PROGRAM TO USE R11 AS DATA REGISTER    .AC.\n*          AND R12 AS PROGRAM BASE REGISTER. R9 IS NO LONGER THE\n*          THIRD PROGRAM BASE REGISTER AND IT IS RESERVED FOR\n*          FUTURE USE. PROGRAM CAN GROW WITHOUT USING ADDITIONAL\n*          PROGRAM BASE REGISTERS.\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        LOCAL MACRO DEFINITIONS\n*---------------------------------------------------------------------*\n         MACRO\n&N       CRJE      &A,&B,&C,&D\n&N       TM        &A.(R2),&B\n         JNO       X&SYSNDX\n*        MVC       0(&D,R1),=C&C\n         MVC       0(L'&C,R1),&C                                  .AC.\n         LA        R1,L'&C.(R1)                                   .AC.\n         J         &D\nX&SYSNDX EQU       *\n         MEND\n*\n         MACRO\n&A       PACL  &B,&D,&E,&F,&G,&H,&J\n&A       CLC   &B,0(R2)\n         JNE   Z&SYSNDX\n*        LA    R2,&C.(,R2)\n         LA    R2,L'&B.(,R2)                                      .AC.\n         &D    &E,&F\n         AIF   (T'&G EQ 'O').A\n         &G    &H,&J\n.A       J     PAEND\nZ&SYSNDX DS    0H\n         MEND\n*\n         MACRO\n&A       P1    &B,&C,&D,&E,&BR=JZ                                 .AC.\n&A       TM    &B,&C\n         &BR   X&SYSNDX\n         MVC   0(L'&D.,R2),&D                                     .AC.\n         LA    R2,L'&D.(,R2)                                      .AC.\n         BRAS  R10,PRMLSTXX\nX&SYSNDX DS    0H\n         MEND\n*\n         MACRO\n&A       P2    &B,&C,&D\n&A       TM    &B,&C\n         JO    X&SYSNDX\n         MVC   0(2,R2),CNOSCAN\nX&SYSNDX MVC   2(L'&D.,R2),&D                                      .AC.\n         LA    R2,L'&D.+2(,R2)                                     .AC.\n         BRAS  R10,PRMLSTXX\n         MEND\n*\n         MACRO\n&A       CC    &B,&C,&D,&E\n&A       LA    R1,&B       LINECNT\n         CLI   &C.,C'&D'   IS THE THE CHAR?\n         JE    &E          YES.\n         MEND\n         EJECT\n*---------------------------------------------------------------------*\n*        ASSEMBLY VARIABLES\n*---------------------------------------------------------------------*\n         SPACE\n         LCLC  &RELEASE,&ID,&VERSION\n         LCLC  &DDIN,&DDPRINT,&DDPUNCH,&DDLIB,&DDLIST,&DDUNLOD     .AC.\n         LCLB  &A(8),&B(8)\n&RELEASE SETC  '01OCT14'           RELEASE IDENT - MAX 7 BYTES     .AC.\n&VERSION SETC  '8.1'               VERSION IDENTIFICATION          .AC.\n&ID      SETC  'GSFC'              'LOCAL' IDENT - 4 BYTES MAX\n&DDIN    SETC  'SYSIN'             DDNAME: CONTROL INPUT\n&DDPRINT SETC  'SYSPRINT'          DDNAME: MAIN-PRINT OUTPUT\n&DDLIST  SETC  'SYSLIST'           DDNAME: LISTING OUTPUT\n&DDPUNCH SETC  'SYSPUNCH'          DDNAME: FOR PUNCHED OUTPUT\n&DDLIB   SETC  'SYSLIB'            DDNAME: LIBRARY INPUT\n&DDUNLOD SETC  'UNLOAD'            DDNAME: UNLOAD  OUTPUT          .AC.\n&A(1)    SETB  1                   LIST\n&A(2)    SETB  0                   NODECK\n&A(3)    SETB  0                   NOT 'LIST DIR ONLY'\n&A(4)    SETB  0                   NOUPDTE\n&A(5)    SETB  0\n&A(6)    SETB  1                   EJECT           (WAS NOEJECT)  .PRC.\n&A(7)    SETB  0                   SSI\n&A(8)    SETB  1                   TRUNC\n&B(1)    SETB  0                   NODEBUG\n&B(2)    SETB  0                   NOHEXOUT\n&B(3)    SETB  0\n&B(4)    SETB  0                   NONUM\n&B(5)    SETB  0                   EROPT=TERM\n&E(1)    SETB  1                   SEL                            .SEL.\n&E(2)    SETB  1                   SPF                            .SPF.\n         EJECT\nR0       EQU   0                   OS PARM REG; WORK REG\nR1       EQU   1                   OS PARM REG; WORK REG\nR2       EQU   2                   LOCAL WORK REG\nR3       EQU   3                   LOCAL WORK REG\nR4       EQU   4\nR5       EQU   5                   LRECL CNTR FOR MEMBER\nR6       EQU   6                   BLOCK LENGTH\nR7       EQU   7                   BLOCK POINTER\nR8       EQU   8                   IHADCB BASE REG\nR9       EQU   9                   MAIN BASE REG - 3\nR10      EQU   10                  LOCAL LINK REG\nR11      EQU   11                  PROGRAM BASE REG #2\nR12      EQU   12                  MAIN BASE REG - 1\nR13      EQU   13                  POINTER TO OS SAVE AREA\nR14      EQU   14                  OS LINK REG; WORK REG\nR15      EQU   15                  OS BRANCH REG; WORK REG\nMAXLINE  EQU   60                  'DEFAULT' LINES/PAGE (WAS 80)  .PRC.\nSWA0     EQU   B'10000000'         1 = LIST   / 0 = NOLIST\nSWA1     EQU   B'01000000'         1 = DECK   / 0 = NODECK\nSWA2     EQU   B'00100000'         LIST DIRECTORY ONLY\nSWA3     EQU   B'00010000'         1 = UPDTE  / 0 = NOUPDTE\nSWA4     EQU   B'00001000'         MAXLIST SPECIFIED\nSWA5     EQU   B'00000100'         1 = EJECT  / 0 = NOEJECT\nSWA6     EQU   B'00000010'         1 = SSI    / 0 = NOSSI\nSWA7     EQU   B'00000001'         1 = TRUNC  / 0 = NOTRUNC\nSWB0     EQU   B'10000000'         1 = DEBUG  / 0 = NODEBUG\nSWB1     EQU   B'01000000'         1 = HEXOUT / 0 = NOHEXOUT\nSWB2     EQU   B'00100000'         0: LIST=LIST,  1: LIST=PRINT\nSWB3     EQU   B'00010000'         NONUM/NUM\nSWB4     EQU   B'00001000'         EROPT=TERM/ACC\nSWC0     EQU   B'10000000'         PARM ANALYSIS ERROR\nSWC1     EQU   B'01000000'         FLAG FOR NEW PAGE BEFORE PRINT\nSWC2     EQU   B'00100000'         1: DSORG=PS BEING PROCESSED.\nSWC3     EQU   B'00010000'         TERMINATE MODE SWITCH\nSWC7     EQU   B'00000001'         DCB EXIT TAKEN\nSWD0     EQU   B'10000000'         SELECTED NAMES SPECIFIED\nSWD1     EQU   B'01000000'         MEMBER IS AN ALIAS\nSWD2     EQU   B'00100000'         0=SELECT, 1=EXCLUDE\nSWD3     EQU   B'00010000'         SYSPRINT FIRST TIME THRU\nSWD4     EQU   B'00001000'         \"00\"=NOTHING, \"10\"=RITS,\nSWD5     EQU   B'00000100'         \"01\"=CRBE, \"11\"=CRJE.\nSWD6     EQU   B'00000010'         SYSLIST FIRST TIME THRU SWITCH\nSWD7     EQU   B'00000001'         1=RITS/CRBE/CRJE LIB BEING PROC.\nSWE0     EQU   B'10000000'         SEL                            .SEL.\nSWE1     EQU   B'01000000'         SPF                            .SPF.\nSWE2     EQU   B'00100000'         SPF STATS FOUND IN CURRENT PDS .SPF.\nSWE3     EQU   B'00010000'         SPF STATS IN ANY PDS           .SPF.\nSWE4     EQU   B'00001000'         UNLOAD                         .AC.\nOFLGS    EQU   B'00010000'         DCB OPEN ERROR FLAG\nALIAS    EQU   B'10000000'         ALIAS BIT IN DIRECTORY ENTRY\nCVTPTR   EQU   16   ... ADDR OF THE OS CVT\nCVTPCNVT EQU   X'1C' .. OFFSET IN CVT TO ADDR OF TTR/CCHHR CNVT\nJFCBDSNM EQU   0                   DSNAME OFFSET IN JFCB\nJFCBVOLS EQU   118                 VOLSER OFFSET IN JFCB\nJFCDSORG EQU   98                  DSORG  OFFSET IN JFCB\nJFCRECFM EQU   100                 RECFM  OFFSET IN JFCB\nJFCBLKSI EQU   102                 BLKSIZ OFFSET IN JFCB\nJFCLRECL EQU   104                 LRECL  OFFSET IN JFCB\nDS1DSORG EQU   82-44               DSORG  OFFSET IN DSCB\nDS1RECFM EQU   84-44               RECFM  OFFSET IN DSCB\nDS1BLKSI EQU   86-44               BLKSIZ OFFSET IN DSCB\nDS1LRECL EQU   88-44               LRECL  OFFSET IN DSCB\nDS4DEVDB EQU   75-44               DIR/TR OFFSET IN F=4 DSCB\n         EJECT\n*---------------------------------------------------------------------*\n*        MAIN PROGRAM BEGIN\n*---------------------------------------------------------------------*\nLISTPDS  AMODE 24\nLISTPDS  RMODE 24\nLISTPDS  CSECT\n         BAKR  R14,0               SAVE REGISTERS                  .AC.\n         LARL  R11,WORKSTOR                                        .AC.\n         USING WORKSTOR,R11        ESTABLISH R11 AS DATA REGISTER  .AC.\n         USING IHADCB,R8           SET DCB ADDRESSABILITY\n         LR    R4,R1               SAVE PARM LIST POINTER.\n         SPACE\n*---------------------------------------------------------------------*\n*        PROGRAM INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\nPGMINIT  DS    0H\n         XC    SWITCHES,SWITCHES   CLEAR SIWTCHES, ETC.\n         LA    R8,SYSLIB\n         MVI   DCBRECFM,0          MAKE SURE DCB IS INITIALIZED.\n         XC    DCBLRECL,DCBLRECL\n         XC    DCBBLKSI,DCBBLKSI\n         MVI   EXLST2,X'05'\n         XC    COR2,COR2\n         XC    COR7,COR7\n         XC    COR8,COR8\n         MVI   HEAD1,C' '\n         MVC   HEAD1DAT(HEAD1NAM-HEAD1),HEAD1\n         MVC   HEAD1DSN(L'HEAD1VER),HEAD1VER\n         MVC   HEAD1(L'HEAD1R),HEAD1R  INIT HEADER LINE\n         MVC   SWA,SWAX\n         MVC   SWB,SWBX\n         MVC   SWE,SWEX\n         XC    RECORDS,RECORDS     CLEAR COUNTER\n         XC    TTRK,TTRK           FOR FIND\n         XC    RETCODE,RETCODE\n         XC    PAGENUM1,PAGENUM1\n         XC    PAGENUM2,PAGENUM2\n         XC    LINECNT1,LINECNT1\n         XC    LINECNT2,LINECNT2\n         XC    BUFFER1,BUFFER1     CLEAR BUFFERS\n         XC    BUFFER2,BUFFER2\n         LA    R15,MAXLINE         SET DEFAULT LINE COUNT\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         LA    R15,4000\n         STH   R15,LINECNT1\n         XC    TOTALREC,TOTALREC\n         XC    NAMETBL1,NAMETBL1\n         XC    NAMETBL2,NAMETBL2\n         XC    MAXLIST,MAXLIST\n         BALR  R12,0                                              .AC.\n         USING *,R12                                              .AC.\n         MVC   DDPRINT(RESETDDL),RESETDD\n         TM    0(R4),X'80'         ONLY EXEC PARMS SPECIFIED?\n         JO    EXTRACT             YES.\n         L     R2,4(R4)            NO, INIT THE DDNAMES.\n         LH    R3,0(R2)            GET NO. OF BYTES IN LIST\n         LTR   R3,R3               IS IT ZERO?\n         JNP   XPA2                YES, SKIP\n         CHI   R3,40\n         JNH   *+8\n         LA    R3,40\n         LA    R2,2(R2)            BEGINNING OF DD LIST\n         LA    R3,2(R3,R2)         END OF DD LIST\n         LA    R1,DDPRINT          LISTPDS'S DD LIST\nXPA1     DS    0H\n         CR    R2,R3               END OF LIST?\n         JNL   XPA2                YES, GOTO NEXT ONE\n         CLI   0(R2),0             DUMMY ENTRY?\n         JE    *+10                YES, SKIP MOVE\n         MVC   0(8,R1),0(R2)\n         AHI   R1,8                                               .AC.\n         AHI   R2,8                                               .AC.\n         J     XPA1\n         SPACE\nXPA2     DS    0H\n         TM    4(R4),X'80'         END OF PARM LIST?\n         JO    EXTRACT             YES\n         L     R2,8(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM1         INITIAL PAGE NO - SYSPRINT\n         TM    8(R4),X'80'\n         JO    EXTRACT\n         L     R2,12(R4)\n         L     R2,0(R2)\n         STH   R2,PAGENUM2         INITIAL PAGE NO - SYSLIST\n*XTRACT  EXTRACT TIOT,'S',FIELDS=(TIOT)                          *.PRC.\nEXTRACT  L     R1,540              PSATOLD, CURRENT TCB           .PRC.\n         L     R1,12(,R1)          GET TIOT ADDRESS FROM TCBTIO   .PRC.\n         ST    R1,TIOT             SAVE TIOT ADDRESS              .PRC.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT DATE/TIME FOR PRINTOUTS\n*---------------------------------------------------------------------*\n         SPACE\n         TIME  DEC                 GET DATE & TIME FOR HEADING\n         ST    R0,WORK1\n         XC    WORK2,WORK2         COMPUTE AND FORMAT DATE\n         ST    R1,WORK2+4\n         MVC   WORK1+5(1),WORK2+5  SAVE YEAR\n         CVB   R3,WORK2            CONVERT DATE TO BINARY\n         XR    R2,R2\n         D     R2,F1000            TO SEP YEAR AND DAY             .AC.\n         ST    R3,WORK2\n         LA    R3,MONTHS1          FOR STD YEAR\n         TM    WORK2+3,X'03'       LEAP YEAR?\n         JNZ   *+8                 NO\n         LA    R3,MONTHS2          FOR LEAP YEAR\n         XR    R1,R1\nPGMINITX DS    0H\n         SH    R2,0(R3)\n         JNP   PGMINITY\n         AHI   R1,3                                                .AC.\n         AHI   R3,2                                                .AC.\n         J     PGMINITX\n         SPACE\nPGMINITY DS    0H\n         AH    R2,0(R3)\n         MHI   R2,10                                               .AC.\n         CVD   R2,WORK2            FOR DAY OF MONTH\n         LA    R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC   HEAD1DAT+3(3),0(R1)\n         MVC   WORK1+4(1),WORK2+6  DAY OF MONTH\n         ED    HEAD1DAT,WORK1+4\n         CLI   HEAD1DAT+1,C' '\n         JNE   *+8\n         MVI   HEAD1DAT+1,C'0'\n         ED    HEAD1TIM,WORK1\n         CLI   HEAD1TIM+1,C' '\n         JNE   *+8\n         MVI   HEAD1TIM+1,C'0'\n         MVC   HEAD1TIM+6(3),BLANKS                               .AC.\n         MVC   HEAD2DAT,HEAD1DAT\n         MVC   HEAD2TIM,HEAD1TIM\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE THE SYSPRINT FILE\n*---------------------------------------------------------------------*\n         SPACE\n         LA    R8,SYSPRINT         INIT THE SYSPRINT FILE\n         MVC   DCBDDNAM,DDPRINT\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         JO    INITPR              YES.\n         L     R2,TIOT             SYSPRINT OPEN ERROR\n*        MVC   WTP+17(8),0(R2)     MOVE JOBNAME TO MSG.            .AC.\n         MVC   WTP+19(8),0(R2)     MOVE JOBNAME TO MSG.            .AC.\n*        MVC   WTP+40(L'DDPRINT),DDPRINT                           .AC.\n         MVC   WTP+42(L'DDPRINT),DDPRINT                           .AC.\nWTP      DS    0H\n         WTO   'LPDS00I  JOBNAMEX OPEN ERROR ON SYSPRINT',         +++++\n               ROUTCDE=(11),DESC=7\n         TM    SWB,SWB0            DEBUG?\n         JZ    ABORT               NO\n         ABEND 20,DUMP             YES, ABEND TO GET DUMP.\nABORT    DS    0H\n         PR                        ELSE ... RETURN TO ZOS          .AC.\nRESETDD  DC    CL8'&DDPRINT',CL8'&DDLIST',CL8'&DDPUNCH'\n         DC    CL8'&DDLIB',CL8'&DDIN'\nRESETDDL EQU   *-RESETDD\n         DROP  R12\n         SPACE\nINITPR   DS    0H\n         MVI   LINE1,C'-'\n         BRAS  R10,PRNT\n*---------------------------------------------------------------------*\n*         PARAMETER ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\n*        USING PA,R6                                              .AC.\nPA       L     R2,0(R4)                      HIGH ORDER BIT IS ON\n         LH    R1,0(R2)\n         AHI   R2,2                BEGINNING OF STRING            .AC.\n         LTR   R3,R1               ANY PARMS SEPECIFIED?\n         JZ    PGMINITA            NO PARMS...CONTINUE INIT\n         MVC   LINE1(L'MSG6),MSG6\n         BRAS  R10,PRNT\n         LA    R1,LINE1+10\n         LR    R15,R3\n         CHI   R15,110             > 110 ?\n         JL    *+8\n         LA    R15,110\n         BCTR  R15,0               DECREMENT 1 FOR MOVE\n         EX    R15,VARMVC1         COPY INPUT OPTIONS\n         BRAS  R10,PRNT            WRITE MSG6\n         LA    R3,0(R2,R3)         END OF STRING\nPALOOP   CR    R2,R3               END OF PARMS?\n         JNL   PGMINITA            YES, GOTO COMPLETE INIT\n         CLI   0(R2),C','          NULL PARM?\n         JE    PAEND               YES.\n         CLC   CLINECNT,0(R2)                  'LINECNT='          .AC.\n         JE    PA15\n         CLC   CEROPT,0(R2)                    'EROPT='            .AC.\n         JE    PA22\n         CLC   CMAXLIST,0(R2)                  'MAXLIST='          .AC.\n         JE    PA10\n         PACL  CLISTDIR,OI,SWA,SWA2,NI,SWA,255-SWA0\n         PACL  CDEBUG,OI,SWB,SWB0\n         PACL  CNODEBUG,NI,SWB,255-SWB0\n         PACL  CLIST,OI,SWA,SWA0\n         PACL  CNOLIST,NI,SWA,255-SWA0\n         PACL  CDECK,OI,SWA,SWA1\n         PACL  CNODECK,NI,SWA,255-SWA1\n         PACL  CUPDTE,OI,SWA,SWA3\n         PACL  CNOUPDTE,NI,SWA,255-SWA3\n         PACL  CSSI,OI,SWA,SWA6\n         PACL  CNOSSI,NI,SWA,255-SWA6\n         PACL  CRITS,NI,SWD,255-SWD5,OI,SWD,SWD4\n         PACL  CCRBE,NI,SWD,255-SWD4,OI,SWD,SWD5\n         PACL  CCRJE,OI,SWD,SWD4+SWD5\n         PACL  CTRUNC,OI,SWA,SWA7\n         PACL  CNOTRUNC,NI,SWA,255-SWA7\n         PACL  CHEXOUT,OI,SWB,SWB1\n         PACL  CNHEXOUT,NI,SWB,255-SWB1\n         PACL  CNUM,OI,SWB,SWB3\n         PACL  CNONUM,NI,SWB,255-SWB3\n         PACL  CEJECT,OI,SWA,SWA5\n         PACL  CNOEJECT,NI,SWA,255-SWA5\n         PACL  CSELECT,NI,SWD,255-SWD2\n         PACL  CEXCLUDE,OI,SWD,SWD2\n         PACL  CSEL,OI,SWE,SWE0                                   .SEL.\n         PACL  CNOSEL,NI,SWE,255-SWE0                             .SEL.\n         PACL  CSPF,OI,SWE,SWE1                                   .SPF.\n         PACL  CNOSPF,NI,SWE,255-SWE1                             .SPF.\n         PACL  CUNLOAD,OI,SWE,SWE4                                .AC.\n         PACL  CNUNLOAD,OI,SWE,255-SWE4                           .AC.\n         OI    SWC,SWC0              FLAG BAD KEYWORK\nPABAD    CLI   0(R2),C','            FIND NEXT KEYWORK\n         JE    PALOOP\n         AHI   R2,1                                               .AC.\n         CR    R2,R3\n         JL    PABAD\nPAERROR  OI    SWC,SWC0            FLAG PARM ERROR\n         J     PGMINITA            AND GOTO COMPLETE INIT.\nPAEND    CLI   0(R2),C','          COMMA?\n         JNE   PALOOP              NO, LOOP.\n         AHI   R2,1                YES, BUMP OVER IT.             .AC.\n         J     PALOOP\nPA10     AHI   R2,8                                               .AC.\n         XR    R15,R15\n         CR    R2,R3\n         JNL   PAERROR\nPA10A    CR    R2,R3\n         JNL   PA10B\n         CLI   0(R2),C','\n         JE    PA10B\n         CLI   0(R2),C'0'\n         JL    PAERROR\n         CLI   0(R2),C'9'\n         JH    PAERROR\n         MHI   R15,10                                              .AC.\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,X000F            AND MASK OFF HIGH BITS          .AC.\n         LA    R15,0(R1,R15)\n         AHI   R2,1                                                .AC.\n         J     PA10A\nPA10B    N     R15,X7FFF                                           .AC.\n         STH   R15,MAXLIST\n         OI    SWA,SWA4            FLAG MAXLIST= SPECIFIED.\n         J     PAEND\nPA15     AHI   R2,8                LINECNT                         .AC.\n         XR    R15,R15\n         CR    R2,R3\n         JNL   PAERROR\nPA15A    CR    R2,R3\n         JNL   PA15B\n         CLI   0(R2),C','\n         JE    PA15B\n         CLI   0(R2),C'0'\n         JL    PAERROR\n         CLI   0(R2),C'9'\n         JH    PAERROR\n         MHI   R15,10                                             .AC.\n         IC    R1,0(R2)            PICK UP CHAR\n         N     R1,X000F            AND MASK OFF HIGH BITS\n         LA    R15,0(R1,R15)\n         AHI   R2,1                                               .AC.\n         J     PA15A\nPA15B    N     R15,X7FFF\n         BCTR  R15,0                                              .LCT.\n         STH   R15,LINEMAX\n         J     PAEND\nPA22     AHI   R2,6                EROPT=                         .AC.\n         PACL  CTERM,NI,SWB,255-SWB3\n         PACL  CACC,OI,SWB,SWB4\n         J     PAERROR\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE RUN OPTIONS\n*---------------------------------------------------------------------*\n         SPACE\n*        USING PRMLST,R6\nPRMLST   TM    SWC,SWC0            PARM ERROR?\n         JZ    PRMLST0         ... NO\n         MVC   LINE1(L'LPDS05I),LPDS05I\n         BRAS  R10,PRNT\n         LA    R1,4\n         BRAS  R14,SAVERC\nPRMLST0  MVI   LINE1,C'-'\n         BRAS  R10,PRMLSTXZ\n         P1    SWB,SWB0,CDEBUG\n         P1    SWA,SWA2,CLISTDIR\n         TM    SWD,SWD4+SWD5          RITS/CRBE/CRJE\n         JZ    PRMLST20               NO\n         JO    PRMLST19               YES, CRJE\n         P1    SWD,SWD4,CRITS,4\n         P1    SWD,SWD5,CCRBE,4\n         J     PRMLST20\nPRMLST19 P1    SWD,SWD4+SWD5,CRJE,4\nPRMLST20 TM    SWA,SWA2               LISTDIR?\n         JO    PRMLST50            YES\n         P2    SWA,SWA0,CLIST\n         P2    SWB,SWB3,CNUM\n         P2    SWA,SWA5,CEJECT\n         P2    SWA,SWA7,CTRUNC\n         P2    SWB,SWB1,CHEXOUT\n         P2    SWA,SWA1,CDECK\n         P2    SWA,SWA3,CUPDTE\n         P2    SWA,SWA6,CSSI\n         P2    SWE,SWE1,CSPF                                    JDM1\n         P2    SWE,SWE4,CUNLOAD                                   .AC.\nPRMLST50 MVC   0(8,R2),CLINECNT\n         LH    R1,LINEMAX\n         AHI   R1,1                                               .AC.\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CHI   R1,999\n         JNH   *+14\n         UNPK  8(5,R2),WORK1\n         AHI   R2,13\n         BRAS  R10,PRMLSTXX\n         TM    SWA,SWA4\n         JZ    PRMLST55\n         MVC   0(8,R2),CMAXLIST\n         LH    R1,MAXLIST\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  8(3,R2),WORK1\n         CHI   R1,999\n         JNH   *+14\n         UNPK  8(5,R2),WORK1\n         AHI   R2,13                                               .AC.\n         BRAS  R10,PRMLSTXX\nPRMLST55 MVC   0(6,R2),CEROPT              'EROPT='                .AC.\n         MVC   6(3,R2),CACC                'ACC'                   .AC.\n         TM    SWB,SWB4\n         JZ    *+14\n         MVC   6(4,R2),CTERM\n         AHI   R2,10                                               .AC.\n         TM    SWD,SWD0            SELECTED MEMBERS?\n         JZ    PRMLST60\n         BRAS  R10,PRMLSTXX\n         P1    SWD,SWD2,CSELECT,BR=JO\n         P1    SWD,SWD2,CEXCLUDE\n         MVC   0(L'ENDMSG3,R2),ENDMSG3\n         LA    R2,L'ENDMSG3(,R2)\nPRMLST60 BRAS  R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST THE LCB INFO\n*---------------------------------------------------------------------*\n         SPACE\n         MVC   LINE1(L'MSG8),MSG8\n         BRAS  R10,PRNT\n         MVI   LINE1,C'0'\n         XR    R3,R3         INIT LIB COUNT\n         L     R2,ALCB\n         USING LCB,R2\nLCBLST00 CLI   LCB,X'FF'\n         JE    LCBLST90\n         AHI   R3,1          INCR LIB COUNT                       .AC.\n         CVD   R3,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  LINE1+5(2),WORK1\n         MVI   LINE1+8,C'-'\n         MVC   LINE1+10(44),LCBDSNAM                              .PRC.\n         MVC   LINE1+58(6),LCBVOLNO                               .PRC.\n         MVC   LINE1+72(8),CDSORG           'DSORG=??'            .AC.\n         TM    LCBDS1DS,B'10000000'\n         JZ    *+10\n         MVC   LINE1+78(2),CIS              IS                     .AC.\n         TM    LCBDS1DS,B'01000000'\n         JZ    *+10\n         MVC   LINE1+78(2),CPS              PS                     .AC.\n         TM    LCBDS1DS,B'00100000'\n         JZ    *+10\n         MVC   LINE1+78(2),CDA              DA                     .AC.\n         TM    LCBDS1DS,B'00000010'\n         JZ    *+10\n         MVC   LINE1+78(2),CPO              PO                     .AC.\n         MVC   LINE1+82(7),CRECFM           RECFM=?                .AC.\n         TM    LCBDS1RF,B'11000000'  FILL IN THE RECFM\n         JO    LCBLST32\n         JZ    LCBLST33\n         TM    LCBDS1RF,B'01000000'   V?\n         JO    LCBLST31               YES\n         MVI   LINE1+88,C'F'\n         J     LCBLST33\nLCBLST31 MVI   LINE1+88,C'V'\n         J     LCBLST33\nLCBLST32 MVI   LINE1+88,C'U'\nLCBLST33 TM    LCBDS1RF,B'00010000'\n         JZ    *+8\n         MVI   LINE1+89,C'B'\n         TM    LCBDS1RF,B'00001000'\n         JZ    *+8\n         MVI   LINE1+90,C'S'\n         TM    LCBDS1RF,B'00100000'\n         JZ    *+8\n         MVI   LINE1+90,C'T'\n         TM    LCBDS1RF,B'00000100'\n         JZ    *+8\n         MVI   LINE1+91,C'A'\n         TM    LCBDS1RF,B'00000010'\n         JZ    *+8\n         MVI   LINE1+91,C'M'\nLCBLST50 MVC   LINE1+94(6),CLRECL       'LRECL='                  .AC.\n         LH    R1,LCBDS1LR\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+100(5),WORK1                                *.PRC.\n         LA    R1,LINE1+100                                       .PRC.\n         MVC   0(7,R1),PAT4        X'40202020212040'              .PRC.\n         ED    0(6,R1),WORK1+5                                    .PRC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         JNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         J     *-14                BACK TO CLI                    .PRC.\n         MVC   LINE1+107(8),CBLKSIZE           'BLKSIZE='         .AC.\n         LH    R1,LCBDS1BL\n         CVD   R1,WORK1\n*        OI    WORK1+7,X'F'                                      *.PRC.\n*        UNPK  LINE1+115(5),WORK1                                *.PRC.\n         LA    R1,LINE1+115                                       .PRC.\n         MVC   0(7,R1),PAT4        X'40202020212040'              .PRC.\n         ED    0(6,R1),WORK1+5                                    .AC.\n         CLI   0(R1),C' '          LOOK FOR FIRST NONBLANK        .PRC.\n         JNE   *+14                BRANCH IF NONBLANK FOUND       .PRC.\n         MVC   0(6,R1),1(R1)       SHIFT LEFT                     .PRC.\n         J     *-14                BACK TO CLI                    .PRC.\n         BRAS  R10,PRNT\n         LA    R2,LCBEND\n         J     LCBLST00\n         DROP  R2\nLCBLST90 DS    0H\n*\n         OI    SWD,SWD3            TURN OFF FIRST TIME SW\n         MVC   HEAD1C1,HEAD1C1R\n         MVC   HEAD1C2,HEAD1C2R\n         J     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        *** INITIALIZATION COMPLETE ****\n*---------------------------------------------------------------------*\n         SPACE\nPRMLSTXX CR    R2,R3\n         JNL   PRMLSTXY\n         MVI   0(R2),C','\n         LA    R2,1(,R2)\n         BR    R10\nPRMLSTXY ST    R10,SAVE10\n         BRAS  R10,PRNT\n         L     R10,SAVE10\nPRMLSTXZ MVC   LINE1+3(L'ENDMSG2),ENDMSG2\n         LA    R2,L'ENDMSG2+LINE1+4\n         LA    R3,LINE1+70\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        COMPLETE THE PARM ANALYSIS\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITA DS    0H\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         JZ    *+12                NO.\n         OI    SWD,SWD7            YES.\n         NI    SWA,255-SWA6        NO SSI IF RITS/CRBE\n         SPACE\n*---------------------------------------------------------------------*\n*        LIST & PUNCH FILE INITIALIZATION\n*---------------------------------------------------------------------*\n         SPACE\n         BALR  R12,0               ESTABLISH ADDRESSIBILITY       .AC.\n         USING *,R12                FOR NON-VSAM MACROS           .AC.\n         TM    SWA,SWA0            LIST?\n         JZ    PGMINITC            NO.\n         LA    R8,SYSLIST\n         MVC   DCBDDNAM,DDLIST\n         OPEN  (SYSLIST,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         JO    PGMINITC            YES.\n         NI    SWA,255-SWA0        NO, SET NOLIST.\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDLIST),DDLIST\n         BRAS  R10,PRNT\n         LA    R1,4\n         BRAS  R14,SAVERC\nPGMINITC DS    0H\n         TM    SWA,SWA1            NODECK?\n         JZ    PGMINITD            YES.\n         LA    R8,SYSPUNCH\n         MVC   DCBDDNAM,DDPUNCH\n         OPEN  (SYSPUNCH,OUTPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         JO    PGMINITD            YES.\n         NI    SWA,255-SWA1        TURN OFF DECK OPTION\n         OI    SWC,SWC1            ISSUE WARNING MSG\n         MVC   LINE1(LPDS09IL),LPDS09I\n         MVC   LINE1+L'LPDS09I(L'DDPUNCH),DDPUNCH\n         BRAS  R10,PRNT\n         LA    R1,4\n         BRAS  R14,SAVERC\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE MAIN WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\nPGMINITD DS    0H\n         GETMAIN VU,LA=COR1,A=COR2\n         L     R1,COR2\n         ST    R1,COR3\n         L     R15,COR2+4\n         LHI   R0,8192                                             .AC.\n         SR    R15,R0\n         ST    R15,COR2+4\n         AR    R1,R15\n         AL    R15,COR2\n         AHI   R15,-8              MAKE IT LOW TO BE SAFE          .AC.\n         ST    R15,COR5\n         FREEMAIN R,LV=(0),A=(1)\n         LM    R14,R15,COR2        CLEAR THE WORKAREA\nPGMINITG DS    0H\n         AHI   R15,-256                                            .AC.\n         JNP   PGMINITH\n         XC    0(256,R14),0(R14)\n         AHI   R14,256                                             .AC.\n         J     PGMINITG\n         SPACE\nPGMINITH DS    0H\n         BRAS  R14,RESETHI\n         BRAS  R14,RESETLO\n         L     R1,COR2+4\n         SRL   R1,10\n         CVD   R1,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         MVC   LINE1(MSG7L1),MSG7\n         BRAS  R10,PRNT\n         SPACE\n*---------------------------------------------------------------------*\n*        INITIALIZE SYSLIB AND THE LCB'S\n*---------------------------------------------------------------------*\n         SPACE\nFILEINIT DS    0H\n         LA    R8,SYSLIB\n         OPEN  (SYSLIB,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         JO    FI07                YES.\n         MVC   LINE1(L'LPDS04I),LPDS04I\n         MVC   LINE1+L'LPDS04I(8),DDLIB\n         BRAS  R10,PRNT\n         J     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        LCB INIT FOR SYSLIB CONCATONATION\n*---------------------------------------------------------------------*\nFI07     DS    0H\n         MVC   WORK1(L'DCBTIOT),DCBTIOT  SAVE ENTRY\n         LH    R2,DCBTIOT\n         L     R3,TIOT\n         LA    R3,0(R3,R2)         PNTR TO SYSLIB ENTRY\n         LA    R0,LCBLEN           ALLOC INITIAL LCB\n         BRAS  R14,GETBASE\n         LR    R4,R1\n         ST    R1,ALCB\n         USING LCB,R4\n         LA    R5,16               LIMIT MAX LIBS PROCESSED\n         LA    R0,176              SIZE OF A JFCB\n         BRAS  R14,GETHI\n         ST    R1,JFCBADRS\n         MVI   JFCBADRS,X'87'\n         J     FI07B\n         SPACE\nFI07A    DS    0H\n         XR    R1,R1\n         IC    R1,0(R3)\n         LA    R2,0(R2,R1)         POINT TO NEXT ENTRY\n         LA    R3,0(R3,R1)\n         CLI   0(R3),0             END OF TIOT?\n         JE    FI07Z               YES\n         CLC   BLANKS,4(R3)        CONCATONATION?\n         JNE   FI07Z               NO, END.\n         STH   R2,DCBTIOT\nFI07B    RDJFCB    SYSLIB\n         L     R1,JFCBADRS\n         MVC   DSNAME,JFCBDSNM(R1)\n         MVC   LCBDSNAM,JFCBDSNM(R1)\n         MVC   VOLSER,JFCBVOLS(R1)\n         MVC   LCBVOLNO,JFCBVOLS(R1)\n         MVC   LCBJFCDS,JFCDSORG(R1)\n         MVC   LCBJFCRF,JFCRECFM(R1)\n         MVC   LCBJFCBL,JFCBLKSI(R1)\n         MVC   LCBJFCLR,JFCLRECL(R1)\n         OBTAIN DSCB\n         MVC   LCBDS1DS,WORKAREA+DS1DSORG\n         MVC   LCBDS1RF,WORKAREA+DS1RECFM\n         MVC   LCBDS1BL,WORKAREA+DS1BLKSI\n         MVC   LCBDS1LR,WORKAREA+DS1LRECL\n         MVI   DSNAME,X'04'        FOR FORMAT 4 DSCB\n         MVC   DSNAME+1(43),DSNAME\n         OBTAIN DSCB\n         XR    R1,R1\n         IC    R1,WORKAREA+DS4DEVDB\n         STH   R1,LCBDIR\n         L     R15,JFCBADRS\n         LH    R1,JFCBLKSI(,R15)\n         LTR   R1,R1\n         JNZ   *+8\n         LH    R1,WORKAREA+DS1BLKSI\n         LA    R0,LCBLEN\n         BRAS  R14,GETBASE         WILL BE CONTIG\n         LR    R4,R1\n         XC    0(LCBLEN,R1),0(R1)\n         BRCT  R5,FI07A\n         DROP  R4\nFI07Z    DS    0H\n         MVI   0(R4),X'FF'         SET END FLAG\n         MVI   JFCBADRS,X'80'      END OF JFCB INIT\n         MVC   DCBTIOT,WORK1       RESET TIOT PNTR\n         BRAS  R14,RESETHI\n*---------------------------------------------------------------------*\n*        OPEN UNLOAD FILE                                         .AC.\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWE,SWE4            UNLOAD?                        .AC.\n         JZ    FI09                NO.                            .AC.\n         LA    R8,UNLOAD                                          .AC.\n         LA    R9,SYSLIB                                          .AC.\n         MVC   X'24'(1,R8),X'24'(R9)    COPY RECFM                .AC.\n         MVC   X'3E'(2,R8),X'3E'(R9)    COPY BLKSIZE              .AC.\n         MVC   X'52'(2,R8),X'52'(R9)    COPY LRECL                .AC.\n         CLC   X'52'(2,R8),XZERO                                  .AC.\n         JE    FI08A                                              .AC.\n         MVC   DCBDDNAM,DDUNLOD                                   .AC.\n         OPEN  (UNLOAD,OUTPUT)                                    .AC.\n         TM    DCBOFLGS,OFLGS      OPEN OK?                       .AC.\n         JO    FI09                YES.                           .AC.\nFI08A    DS    0H                                                 .AC.\n         NI    SWE,255-SWE4        NO, TURN OFF UNLOAD            .AC.\n         OI    SWC,SWC1            ISSUE WARNING MSG              .AC.\n         CLC   X'52'(2,R8),XZERO                                  .AC.\n         JE    FI08B                                              .AC.\n         MVC   LINE1(LPDS09IL),LPDS09I                            .AC.\n         MVC   LINE1+L'LPDS09I(L'DDLIST),DDUNLOD                  .AC.\n         J     FI08C                                              .AC.\nFI08B    DS    0H                                                 .AC.\n         MVC   LINE1(L'LPDS12I),LPDS12I                           .AC.\nFI08C    DS    0H                                                 .AC.\n         BRAS  R10,PRNT                                           .AC.\n         LA    R1,4                                               .AC.\n         BRAS  R14,SAVERC                                         .AC.\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE SELECTED NAME TABLE\n*---------------------------------------------------------------------*\nFI09     DS    0H                                                 .AC.\n         XC    NAMETBL2,NAMETBL2   SET PNTR TO NULL.\n         TM    SWE,SWE0            SEL OR NOSEL                   .SEL.\n         JZ    BLDSEL99            NOSEL, BYPASS SYSIN            .SEL.\n         L     R2,TIOT             SCAN THE TIOT FOR MATCH\n         AHI   R2,24                                               .AC.\n         XR    R3,R3\nBLDSEL01 DS    0H\n         CLC   4(8,R2),DDIN\n         JE    BLDSEL02            MATCH.\n         CLI   0(R2),0             END OF TIOT?\n         JE    BLDSEL99            YES, RETURN.\n         IC    R3,0(R2)\n         LA    R2,0(R2,R3)\n         J     BLDSEL01\n         SPACE\nBLDSEL02 DS    0H\n         LARL  R8,SYSIN                                            .AC.\n         MVC   DCBDDNAM,DDIN\n         OPEN  (SYSIN,INPUT)\n         TM    DCBOFLGS,OFLGS      OPEN OK?\n         JZ    BLDSEL99            NO, RETURN.\n         LH    R0,SYSIN+DCBBLKSI-IHADCB  ALLOC SYSIN BUFFER\n         BRAS  R14,GETHI\n         LR    R7,R1\n         J     BLDSEL20\n         SPACE\nBLDSEL03 DS    0H\n         AHI   R5,80                                               .AC.\n         LR    R3,R5\n         AHI   R6,-80                                              .AC.\n         JNP   BLDSEL20\n         LA    R2,72(,R3)          POINT AT END OF CARD.\nBLDSEL04 DS    0H\n         CLI   0(R3),C' '          BLANK?\n         JE    BLDSEL03            YES, GO GET NEXT CARD.\n         CR    R2,R3               END OF CARD?\n         JL    BLDSEL03            YES, GO GET NEXT CARD.\n         CLI   0(R3),C','          COMMA?\n         JNE   BLDSEL05            NO.\n         LA    R3,1(R3)            YES, SKIP OVER IT.\n         J     BLDSEL04\n         SPACE\nBLDSEL05 DS    0H\n         LA    R14,WORK1\n         MVC   WORK1,BLANKS\nBLDSEL06 DS    0H\n         CLI   0(R3),C' '          BLANK?\n         JE    BLDSEL08            YES, END OF NAME\n         CLI   0(R3),C','          COMMA?\n         JE    BLDSEL08            YES, END OF NAME\n         CR    R2,R3               END OF CARD?\n         JL    BLDSEL08            YES, END OF NAME\n*        C     R14,=A(WORK1+8)     HAVE 8 BYTES BEEN PROCESSED?\n         C     R14,AWORK2          HAVE 8 BYTES BEEN PROCESSED?\n         JNL   *+16                YES.\n         IC    R15,0(R3)\n         STC   R15,0(R14)\n         LA    R14,1(R14)\n         LA    R3,1(R3)\n         J     BLDSEL06            GO GET NEXT CHAR.\n         SPACE\nBLDSEL08 DS    0H\n         LA    R0,NAMTBLXX\n         BRAS  R14,GETBASE\n         XC    0(NAMTBLXX,R1),0(R1)\n         MVC   0(8,R1),WORK1\n         TM    SWD,SWD0\n         JO    BLDSEL04\n         OI    SWD,SWD0\n         ST    R1,NAMETBL2\n         J     BLDSEL04\n         SPACE\nBLDSEL20 DS    0H\n         READ  INDECB,SF,SYSIN,(R7),'S'\n         CHECK INDECB\n         LR    R5,R7\n         L     R15,INDECB+16       CALC. LENGTH OF RECORD READ\n         LH    R6,SYSIN+DCBBLKSI-IHADCB\n         SH    R6,14(,R15)\n         LA    R3,0(,R5)\n         LA    R2,72(,R3)\n         J     BLDSEL04\n         SPACE\nBLDSEL90 DS    0H\n         TM    SWD,SWD0            ANY NAMES?\n         JZ    BLDSEL95            NO\n         LA    R0,8                YES, SET END FLAG\n         BRAS  R14,GETBASE\n         MVI   0(R1),X'FF'\nBLDSEL95 DS    0H\n         CLOSE SYSIN\nBLDSEL99 DS    0H\n         BRAS  R14,RESETHI\n         J     PRMLST                                             .AC.\n         EJECT\nBEGIN    DS    0H\n         L     R2,ALCB\n         USING LCB,R2\n         TM    LCB,X'FF'\n         JNM   ENDRUN\n         BRAS  R14,RESETLO\n         BRAS  R14,RESETHI\n         XC    CURRENT2+4,CURRENT2+4\n         MVC   CURRENT2,NAMETBL2\n*        MVC   HEAD1DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD1VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD1DSN+1(65),HEDD1DSN                            .PRC.\n         MVC   HEDD1DSN+1(2),HEAD1VER+1            '--'           .AC.\n         MVC   HEDD1DSN+4(44),LCBDSNAM                            .PRC.\n         LA    R1,HEDD1DSN+4+43                                   .PRC.\n         CLI   0(R1),C' '                                         .PRC.\n         JNE   *+8                                                .PRC.\n         BRCT  R1,*-8                                             .PRC.\n         MVC   2(2,R1),HEAD1VER+1                  '--'           .AC.\n         MVC   5(4,R1),HEAD1C1R+3 'VOL='                          .PRC.\n         MVC   9(6,R1),LCBVOLNO                                   .PRC.\n*        MVC   HEAD2DSN,LCBDSNAM                                 *.PRC.\n*        MVC   HEAD2VOL,LCBVOLNO                                 *.PRC.\n         MVC   HEDD2DSN+4(58),HEDD1DSN+4                          .PRC.\n         MVC   MAXDIR,LCBDIR       UPDATE FOR DIR READ\n         LA    R1,LCBEND\n         ST    R1,ALCB\n         TM    LCBDS1DS,B'01000010' ONLY DSORG=PO/PS ARE VALID\n         JNZ   BEGIN01\n         OI    SWC,SWC1\n         MVC   LINE1(L'LPDS11I),LPDS11I\n         BRAS  R10,PRNT\n         LA    R1,4\n         BRAS  R14,SAVERC\n         J     BEGIN\n         SPACE\nBEGIN01  DS    0H\n         NI    SWC,255-SWC2        RESET DSORG=PS SWITCH\n         TM    LCBDS1DS,B'01000000' IS THIS DSORG=PS?\n         JZ    *+8                 NO.\n         OI    SWC,SWC2            YES, FLAG IT.\n         TM    SWD,SWD0            WERE NAMES SPECIFIED VIA SYSIN?\n         JZ    BEGIN19             NO.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         JO    BEGIN               YES, NOT PROCESSED ON SELECT.\nBEGIN09  DS    0H\n         L     R1,CURRENT2         RE-INIT THE NAME TBL2\n         USING NAMTBL,R1\nBEGIN10  DS    0H\n         CLI   NAMTBL1,X'FF'       TEST FOR END\n         JE    BEGIN19\n         XC    NAMTBL2(12),NAMTBL2\n         LA    R1,NAMTBLXX(,R1)\n         J     BEGIN10\n         SPACE\nBEGIN19  DS    0H\n         DROP  R1\n         XR    R1,R1\n         IC    R1,LCBJFCRF\n         LTR   R1,R1\n         JNZ   *+8\n         IC    R1,LCBDS1RF\n         STC   R1,SAVRECFM\n         LH    R1,LCBJFCBL\n         LTR   R1,R1\n         JNZ   *+8\n         LH    R1,LCBDS1BL\n         STH   R1,SAVBLKSI\n         ST    R1,BUFFER0          SET SIZE OF BUFFER(S)\n         LH    R1,LCBJFCLR\n         LTR   R1,R1\n         JNZ   *+8\n         LH    R1,LCBDS1LR\n         STH   R1,SAVLRECL\n         TM    SWD,SWD4+SWD5       RITS/CRBE/CRJE?\n         JZ    *+8                 NO.\n         OI    SWD,SWD7            YES, FLAG.\n         DROP  R2\n         SPACE\n         LA    R8,SYSLIB\n         LH    R15,SAVBLKSI        BLKSIZE SPECIFIED?\n         LTR   R15,R15\n         JNZ   *+24                YES.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IA),LPDS06IA\n         BRAS  R10,PRNT\n         J     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'00000010'  MACH. CONTROL CHARS?\n         JZ    *+30                NO.\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I1),LPDS06I1\n         MVC   LINE1+L'LPDS06I+L'LPDS06I1(L'LPDS06I0),LPDS06I0\n         BRAS  R10,PRNT\n         J     TERMINAT\n         SPACE\n         TM    SAVRECFM,B'11000000'\n         JO    CHKLIB11\n         TM    SAVRECFM,B'01001000'  VARIABLE SPANNED?\n         JNO   CHKLIB11            NO\n         MVC   LINE1(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I2),LPDS06I2\n         MVC   LINE1+L'LPDS06I+L'LPDS06I2(L'LPDS06I0),LPDS06I0\n         BRAS  R10,PRNT\n         J     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RITS/CRBE\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB11 DS    0H\n         TM    SWD,SWD7            RITS/CRBE/CRJE SPECIFIED?\n         JZ    CHKLIB15            NO.\n         TM    SAVRECFM,B'11000000'  YES, CHECK PARMS\n         JO    CHKLIB12            INVALID\n         TM    SAVRECFM,B'10000000'\n         JZ    CHKLIB12            INVALID\n         LH    R15,SAVLRECL\n         CHI   R15,88\n         JNE   *+8\n         J     CHKLIB40\n         SPACE\nCHKLIB12 DS    0H\n         NI    SWD,255-SWD7        TURN OFF RITS/CRBE\n         OI    SWC,SWC1            FLAG REINIT SYSPRINT\n         MVC   LINE1(L'LPDS07I),LPDS07I\n         BRAS  R10,PRNT\n         LA    R1,4                RC=4\n         BRAS  R14,SAVERC\n         SPACE\n*---------------------------------------------------------------------*\n*        CHECK RECFM TYPES\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB15 DS    0H\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         JO    CHKLIB16\n         TM    SAVRECFM,B'10000000'    RECFM=F?\n         JO    CHKLIB17\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         JO    CHKLIB18\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06IB),LPDS06IB\n         BRAS  R10,PRNT\n         J     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=U\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB16 DS    0H\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         JNZ   *+8\n         LH    R15,SAVBLKSI\n         CH    R15,SAVBLKSI\n         JNH   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         J     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=F\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB17 DS    0H\n         TM    SAVRECFM,B'00010000'    BLOCKED?\n         JO    *+16\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         J     CHKLIB40\n         SPACE\n         LH    R15,SAVLRECL\n         LTR   R15,R15\n         JNZ   *+8\n         LH    R15,SAVBLKSI\n         STH   R15,SAVLRECL\n         J     CHKLIB40\n         SPACE\n*---------------------------------------------------------------------*\n*        RECFM=V\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB18 DS    0H\n         TM    SAVRECFM,B'00100000'  TRACK OVERFLOW?\n         JZ    CHKLIB40            NO.\n         MVC   LINE1+0(L'LPDS06I),LPDS06I\n         MVC   LINE1+L'LPDS06I(L'LPDS06I3),LPDS06I3\n         MVC   LINE1+L'LPDS06I+L'LPDS06I3(L'LPDS06I0),LPDS06I0\n         BRAS  R10,PRNT\n         J     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LIB CHECK\n*---------------------------------------------------------------------*\n         SPACE\nCHKLIB40 DS    0H\n         LA    R8,SYSLIB\n         SPACE\n*---------------------------------------------------------------------*\n*        REINIT DCB IF NECESSARY\n*---------------------------------------------------------------------*\n         SPACE\n         CLC   SAVRECFM,DCBRECFM\n         JE    BEGIN35\n         CLOSE SYSLIB\n         MVI   EXLST2,X'00'        SUPPRESS EXIT THIS TIME\n         MVI   JFCBADRS,X'80'      SUPPRESS JFCB POINTER\n         MVC   DCBRECFM,SAVRECFM   SET RECFM\n         MVC   DCBLRECL,SAVLRECL   SET LRECL\n         MVC   DCBBLKSI,DCBBLKSI   SET BLKSIZE\n         OPEN  SYSLIB              RE-OPEN THE DATASETS\nBEGIN35  DS    0H\n         MVC   DCBLRECL,SAVLRECL   SET THE LRECL\n         MVC   DCBBLKSI,SAVBLKSI   SET THE BLKSIZE\n         XC    TTRK(2),TTRK        POINT AT NEW DIRECTORY\n         MVI   TTRK+2,1\n         XC    NAMETBL1,NAMETBL1\n         NI    SWE,255-SWE2        RESET SPF-THIS-PDS SWITCH      .SPF.\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         JO    BEGIN9              YES, SKIP DIR. BUILD\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DIRECTORY-READ WORKAREA (CHAN. PROGS., ETC.)\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R2,MAXDIR\n         LR    R0,R2\n         MHI   R2,8                                               .AC.\n         AHI   R2,16               C.P. SIZE                      .AC.\n         MHI   R0,272              DATA AREA SIZE                 .AC.\n         AR    R0,R2               WORKAREA SIZE\n         BRAS  R14,GETHI           GET SOME CORE\n         ST    R1,WORK1            AREA FOR THE C.P.\n         AR    R2,R1\n         ST    R2,WORK1+4          FOR THE DATA\n         SPACE\n*---------------------------------------------------------------------*\n*        BUILD THE CHANNEL PROGRAM\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         XC    0(16,R1),0(R1)      BUILD THE SHA AND TIC\n         LA    R0,CCHHR\n         ST    R0,0(,R1)\n         MVI   0(R1),X'39'         ...SHA\n         MVI   4(R1),X'40'\n         MVI   7(R1),4\n         ST    R1,8(,R1)\n         MVI   8(R1),X'08'         ...TIC\n         MVI   12(R1),X'40'\n         AHI   R1,16                                              .AC.\n         LA    R14,272             ..SIZE OF DATA RECORD\nBLDNAM10 DS    0H\n         XC    0(8,R1),0(R1)\n         ST    R2,0(,R1)\n         MVI   0(R1),X'1E'         READ CKD\n         MVI   4(R1),X'60'\n         STH   R14,6(,R1)\n         AHI   R1,8                                               .AC.\n         AR    R2,R14\n         BRCT  R15,BLDNAM10\n         AHI   R1,-4                                              .AC.\n         NI    0(R1),X'BF'         TURN OFF CHAINING\n         L     R1,WORK1\n         ST    R1,ACP\n         SPACE 3\nBLDNAM20 DS    0H\n         STM   R14,R12,12(R13)     SAVE REGS FOR TTR CNVT\n         L     R0,TTRK\n         LH    R1,TTRK             UPDATE FOR NEXT TIME\n         AHI   R1,1                                               .AC.\n         STH   R1,TTRK\n         L     R1,SYSLIB+DCBDEBAD-IHADCB\n         LA    R2,MBB\n         L     R15,CVTPTR\n         L     R15,CVTPCNVT(,R15)\n         LR    R3,R13              SAVE 13 OVER CALL\n         BALR  R14,R15\n         LR    R13,R3              NOW RESTORE 13\n         LM    R14,R12,12(R13)     AND THEN THE REST\n         LH    R15,MAXDIR          NOW CLEAR THE DATA AREA\n         L     R1,WORK1+4\nBLDNAM22 DS    0H\n         XC    0(20,R1),0(R1)\n         AHI   R1,272                                              .AC.\n         BRCT  R15,BLDNAM22\n         XC    ECB,ECB\n         LA    R10,BLDNAM23\n         EXCP  IOB\n         WAIT  1,ECB=ECB\n         DROP  R12\nBLDNAM23 DS    0H\n         CLI   ECB,X'7F'           I/O OK\n         JE    BLDNAM27\n         CLI   ECB,X'42'\n         JE    BLDNAM90            I/O ERROR OR BAD FORMAT\n         SPACE\n*---------------------------------------------------------------------*\n*        SHORT TRACK, FIND THE END.\n*---------------------------------------------------------------------*\n         SPACE\n         LH    R15,MAXDIR\n         L     R1,WORK1+4\n         XR    R5,R5\nBLDNAM25 DS    0H\n         CLC   XZERO,0(R1)         XL5'0'                         .AC.\n         JE    BLDNAM28\n         CLC   XZERO(2),6(R1)      H'0'                           .AC.\n         JE    BLDNAM28\n         CLC   X0100,6(R1)         X'0100'                        .AC.\n         JNE   BLDNAM90            BAD DIR FORMAT\n         AHI   R1,272                                             .AC.\n         AHI   R5,1                                               .AC.\n         BRCT  R15,BLDNAM25\nBLDNAM27 DS    0H\n         LH    R5,MAXDIR\nBLDNAM28 DS    0H\n         L     R4,WORK1+4\nBLDNAM30 DS    0H\n         LA    R3,18(,R4)\n         MVC   WORK2(2),16(R4)\n         LH    R2,WORK2\n         AHI   R2,-2                                              .AC.\nBLDNAM36 DS    0H\n         IC    R7,11(,R3)          ??? S0C4\n         N     R7,X001F                                           .AC.\n         SLL   R7,1\n         CHI   R7,30               COULD THIS BE SPF STATS        .SPF.\n         JNE   BLDNOSPF            NO, BRANCH                     .SPF.\n         TM    11(R3),X'60'        ANY TTR'S IN USERDATA          .SPF.\n         JNZ   BLDNOSPF            YES, NOT SPF STATS             .SPF.\n         OI    SWE,SWE2+SWE3       SPF STATS FOUND                .SPF.\nBLDNOSPF DS    0H                                                 .SPF.\n         LA    R6,DIRUSER-DIRNAME(,R7)\n         LA    R0,DIRNAME-DIR(,R6)\n         BRAS  R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         OC    NAMETBL1,NAMETBL1\n         JNZ   *+8\n         ST    R1,NAMETBL1\n         STH   R7,DIRUSERL-DIR(,R1)\n         BCTR  R6,0\n         EX    R6,BLDNAMMV         MVC 10(0,R1),0(R3)\n         CLI   0(R3),X'FF'         TEST FOR END\n         JE    BLDNAM95\n         AHI   R6,1                                                .AC.\n         AR    R3,R6\n         SR    R2,R6\n         JP    BLDNAM36\n         AHI   R4,272                                              .AC.\n         AHI   R5,-1                                               .AC.\n         JP    BLDNAM30\n         J     BLDNAM20\n         SPACE\nBLDNAM90 MVC   LINE1(L'LPDS08I),LPDS08I\n         BRAS  R10,PRNT\n         J     TERMINAT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DIRECTORY.\n*---------------------------------------------------------------------*\n         SPACE\nBLDNAM95 DS    0H\n         MVC   CURRENT1,NAMETBL1\nBEGIN9   DS    0H\n         LA    R8,SYSLIB\n         OI    SWD,SWD6            FLAG FIRST EJECT ON LIST\n         LH    R1,LINEMAX          RE-INIT SYSPRINT PAGE\n         STH   R1,LINECNT1\n         SPACE\n*---------------------------------------------------------------------*\n*        ALLOCATE THE DATA BUFFERS\n*---------------------------------------------------------------------*\n         SPACE\n         BRAS  R14,RESETHI\n         L     R0,BUFFER0\n         BRAS  R14,GETHI\n         ST    R1,BUFFER1\n         CLI   SAVBUFNO,2\n         JL    BEGIN9A\n         L     R0,BUFFER0\n         BRAS  R14,GETHI\n         ST    R1,BUFFER2\nBEGIN9A  DS    0H\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         JZ    MAIN00              NO, GO PROCESS A PDS LIBRARY.\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR DSORG=PS\n*---------------------------------------------------------------------*\n         SPACE\n         NI    SWD,255-SWD7        NO CRJE, ETC.\n         LA    R0,DIRLEN\n         BRAS  R14,GETLOW\n         XC    0(DIRLEN,R1),0(R1)\n         LR    R4,R1\n         USING DIR,R4\n         TM    SWA,SWA0            LIST?\n         JZ    MAIN31              NO, GO PROCESS.\n         MVC   HEAD2NAM,NAME\n         MVI   LINE2,C'+'\n         BRAS  R10,LOUT\n         MVC   DIRPG1,PAGENUM2\n         J     MAIN31              GO PROCESS DSORG=PS\n         SPACE\nMAIN00   DS    0H\n         NI    SWD,255-SWD1        TURN OFF ALIAS SWITCH\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         JZ    MAIN10              NO.\n         TM    SWD,SWD2            SELECT OF EXCLUDE?\n         JNZ   MAIN10              NOT SELECT.\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT NAME FROM NAMETBL2\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,CURRENT2\n         USING NAMTBL,R2\n         CLI   NAMTBL,X'FF'        END OF TABLE?\n         JE    ENDLIB              YES.\n         MVC   NAME,NAMTBL1\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         SPACE\n*---------------------------------------------------------------------*\n*        SEARCH NAMETBL1 FOR ENTRY.\n*---------------------------------------------------------------------*\n         SPACE\n         L     R4,NAMETBL1\n         USING DIR,R4\nMAIN02   DS    0H\n         CLI   DIRNAME,X'FF'       END?\n         JE    MAIN00              YES, MEMBER NOT FOUND.\n         CLC   NAMTBL1,DIRNAME     IS THIS IT?\n         JE    MAIN04              YES, FOUND IT.\n         LH    R15,DIRUSERL        UPDATE POINTER AND TRY NEXT ENTRY\n         LA    R4,DIRUSER(R15)\n         J     MAIN02\n         SPACE\nMAIN04   DS    0H\n         ST    R4,NAMTBL2          SAVE POINTER\n         LA    R1,DIRNAME          POINT TO DIR ENTRY AREA\n         J     MAIN12\n         DROP  R2\n         SPACE\n*---------------------------------------------------------------------*\n*        GET NEXT ENTRY FROM NAMETBL1\n*---------------------------------------------------------------------*\n         SPACE\nMAIN10   DS    0H\n         L     R4,CURRENT1\n         USING DIR,R4\n         CLI   DIRNAME,X'FF'       TEST FOR END\n         JE    ENDLIB\n         MVC   NAME,DIRNAME        SAVE NAME FOR LATER PROCESSING\n         LH    R15,DIRUSERL\n         LA    R1,DIRNAME\n         LA    R2,DIRUSER(R15)\n         ST    R2,CURRENT1\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED (EXCLUDE)?\n         JZ    MAIN12              NO\n         L     R2,NAMETBL2         CHECK FOR EXCLUDE\n         USING NAMTBL,R2\nMAIN11   DS    0H\n         CLI   NAMTBL,X'FF'        TEST FOR END OF EXCLUDED LIST\n         JE    MAIN12              NOT EXCLUDED, GO PROCESS THE MEMBER\n         CLC   NAMTBL1,DIRNAME\n         JE    MAIN10              NAME MATCH..THIS MEMBER EXCLUDED.\n         LA    R2,NAMTBLXX(,R2)\n         J     MAIN11\n         DROP  R2\n         SPACE 2\nMAIN12   DS    0H\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         JZ    MAIN20              NO, CONTINUE.\n         SPACE\n*---------------------------------------------------------------------*\n*        ALIAS ENTRY ... FIND PRIME ENTRY (IF IT EXISTS)\n*---------------------------------------------------------------------*\n         SPACE\n         L     R2,NAMETBL1\nMAIN14   DS    0H\n         CLI   DIRNAME-DIR(R2),X'FF'\n         JE    MAIN20              ..END TBL, IGNORE ALIAS\n         CLC   DIRTTR(3),DIRTTR-DIR(R2)\n         JNE   MAIN14A\n         TM    DIRTTR+3-DIR(R2),ALIAS\n         JZ    MAIN16              PRIME ENTRY FOUND FOR ALIAS\nMAIN14A  DS    0H\n         LH    R15,DIRUSERL-DIR(R2)\n         LA    R2,DIRUSER-DIR(R2,R15)\n         J     MAIN14\n         SPACE\n*---------------------------------------------------------------------*\n*        PRIME ENTRY FOUND FOR ALIAS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN16   DS    0H\n         OI    DIRFLAGS,B'11000000'    SET ALIAS FLAG\n         TM    SWD,SWD0            SELECTED NAMES SPECIFIED?\n         JO    MAIN20              YES, CONTINUE.\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         AHI   R1,1                                                .AC.\n         STH   R1,MEMCNT\n         J     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        MEMBER PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN20   DS    0H\n         LH    R1,MEMCNT           UPDATE MEMBER COUNTER\n         AHI   R1,1                                               .AC.\n         STH   R1,MEMCNT\n         OI    DIRFLAGS,B'10000000'    FLAG MEMBER 'PROCESSED'\n         TM    SWA,SWA0            LIST?\n         JZ    MAIN21              NO.\n         TM    SWA,SWA5            IS IT EJECT FORMAT\n         JO    MAIN20D             YES.\n         MVC   LINE2(8),CMEMBER    '0MEMBER='                     .AC.\n         MVC   LINE2+8(8),NAME\n         BRAS  R10,LOUT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\n         MVI   LINE2,C'0'\n         J     MAIN21\n         SPACE\nMAIN20D  DS    0H\n         OI    SWD,SWD6            FORCE EJECT FORMAT\n         MVC   HEAD2NAM,NAME       INIT LISTING FOR MEMBER OUTPUT\n         MVI   LINE2,C'+'\n         BRAS  R10,LOUT\n         MVC   DIRPG1,PAGENUM2     SAVE PAGE NUMBER\nMAIN21   DS    0H\n         TM    SWA,SWA2            LIST DIR ONLY?\n         JO    MAIN00              YES, SKIP PROCESSING\n         TM    SWA,SWA1+SWA3       DECK OUTPUT WITH UPDTE\n         JNO   MAIN30              NO\n         MVC   CARD+50(L'HEAD1DAT),HEAD1DAT\n         MVC   CARD+50+L'HEAD1DAT(L'HEAD1TIM),HEAD1TIM\n         LH    R15,DIRUSERL        ANY USER INFO?\n         CHI   R15,4               (MUST BE 4 BYTES)              .AC.\n         JNE   *+12                NO, THERE NO SSI     (WAS BL)  .SPF.\n         TM    SWA,SWA6            SSI SPECIFIED?\n         JO    MAIN24              YES.\n         MVC   CARD(L'UPDTE1),UPDTE1  CC WITH NO SSI\n         MVC   CARD+L'UPDTE1(L'NAME),NAME\n         CHI   R15,30              ARE SPF STATS PRESENT          .AC.\n         JNE   MAIN24A             NO, BRANCH                     .SPF.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         JNO   MAIN24A             NO, BRANCH                     .SPF.\n         LA    R15,L'UPDTE1+9+CARD WHERE TO PUT THEM              .SPF.\n         MVI   0(R15),C'-'         HYPHEN TO BE PROPOGATED        .SPF.\n         MVC   1(49,R15),0(R15)    FILL AREA WITH HYPHENS         .SPF.\n         SLR   R0,R0               CLEAR FOR INSERT               .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  0(2,R15),WORK1+6(2)                                .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  2(2,R15),WORK1+6(2)                                .SPF.\n         UNPK  05(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n         UNPK  11(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  17(4,R15),WORK1(3)                                 .SPF.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         NILL  R0,X'FFFF'                                         .AC.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  22(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n         NILL  R0,X'FFFF'                                         .AC.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  28(5,R15),WORK1+5(3)                               .SPF.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n         NILL  R0,X'FFFF'                                         .AC.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  34(5,R15),WORK1+5(3)                               .SPF.\n         MVC   40(10,R15),DIRUSER+20   USER ID                    .SPF.\n         J     MAIN24A\n*MAIN24  MVC   CARD(L'UPDTE2),UPDTE2  CC WITH SSI                *.PRC.\n*        MVC   CARD+L'UPDTE2(L'NAME),NAME                        *.PRC.\n*        LA    R15,11+CARD          FORMAT SSI                   *.PRC.\n*                  NEW CODE FOR ADD NAME=MEMBER,SSI=XXXXXXXX      .PRC.\n*                  INSTEAD OF   ADD SSI=XXXXXXXX,NAME=MEMBER      .PRC.\nMAIN24   DS    0H                                                 .PRC.\n         MVC   CARD(L'UPDTE1),UPDTE1                              .PRC.\n         MVC   CARD+L'UPDTE1(L'NAME),NAME                         .PRC.\n         LA    R15,CARD+L'UPDTE1+7 LAST BYTE OF NAME              .PRC.\n         CLI   0(R15),C' '         LOOK FOR LAST NONBLANK         .PRC.\n         JNE   *+8                 BRANCH IF FOUND                .PRC.\n         BRCT  R15,*-8             LOOP TO CLI                    .PRC.\n         MVC   1(5,R15),CSSI2      APPEND KEYWORD  ',SSI='        .AC.\n         AHI   R15,6               POINT PAST KEYWORD             .AC.\n         LA    R0,4\n         LA    R1,DIRUSER\n         BRAS  R10,HEXCON\nMAIN24A  DS    0H\n         BRAS  R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        INIT FOR READING\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nMAIN30   DS    0H\n         MVC   TTRK(3),DIRTTR\nMAIN31   DS    0H\n         BALR  R12,0               ESTABLISH R12 AS BASE REGISTERS.AC.\n         USING *,R12                FOR FIND/READ/CHECK MACROS    .AC.\n         FIND  SYSLIB,TTRK,C\n         LM    R2,R3,BUFFER1       INIT BUFFERS\n         STM   R2,R3,BFRS\n         XR    R5,R5               CLEAR CURRENT MEM REC CNTR\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         JNE   MAIN32              NO.\n         XC    PDSDECB,PDSDECB     YES, ISSUE FIRST READ.\n         READ  PDSDECB,SF,(R8),(R2),MF=E\n         SPACE\n*---------------------------------------------------------------------*\n*        READ IN NEXT BLOCK\n*---------------------------------------------------------------------*\n         SPACE\nMAIN32   DS    0H\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         JE    MAIN34              YES.\n         L     R2,BFRS             NO...ISSUE READ\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),'S'\nMAIN34   DS    0H\n         LA    R10,MAIN65          .. SET E.O.F. ADDR\n         CHECK PDSDECB\n         L     R15,PDSDECB+16      COMPUTE LEN OF REC READ\n         LH    R6,DCBBLKSI\n         SH    R6,14(R15)\n         L     R7,BFRS             LOAD PNTR TO DATA\n         CLI   SAVBUFNO,2          DOUBLE BUFFERING?\n         JNE   MAIN36              NO.\n         L     R2,BFRS+4           YES, INIT NEXT READ\n         ST    R7,BFRS+4\n         ST    R2,BFRS\n         XC    PDSDECB,PDSDECB     CLEAR ECB\n         READ  PDSDECB,SF,(R8),(R2),MF=E\n         DROP  R12\nMAIN36   DS    0H\n         LR    R0,R7                                               .AC.\n         TM    SAVRECFM,B'10000000'  RECFM U OR F?\n         JO    MAIN38              YES.\n         LH    R6,0(R7)            NO, MUST BE V ... R6 = BDL\n         AHI   R7,4                PROCESS BLOCK DESCRIPTOR        .AC.\n         AHI   R6,-4                                               .AC.\nMAIN38   DS    0H                  RITS/CRBE/CRJE?\n         TM    SWE,SWE4            UNLOAD ?                        .AC.\n         JZ    MAIN40              SKIP IF NOUNLOAD                .AC.\n         LARL  R1,UNLOAD           GET UNLOAD DCB                  .AC.\n         PUT   (1),(7)             WRITE A RECORD TO UNLOAD        .AC.\nMAIN40   DS    0H                                                  .AC.\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         JZ    MAIN50              NO\n         SPACE\n*---------------------------------------------------------------------*\n*        PROCESS A RITS/CRBE RECORD\n*---------------------------------------------------------------------*\n         SPACE\n         TM    SWA,SWA0            LIST?\n         JZ    MAIN45              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         JZ    MAIN42              NO\n         CH    R5,MAXLIST          YES, TEST FOR LIMIT.\n         JNL   MAIN45              LIMIT EXCEEDED.\nMAIN42   DS    0H\n         MVC   LINE2+1(8),0(R7)\n         MVC   LINE2+11(80),8(R7)\n         BRAS  R10,LOUT            YES, OUTPUT FORMATTED LINE\nMAIN45   DS    0H\n         TM    SWA,SWA1            DECK?\n         JZ    MAIN64              NO.\n         MVC   CARD,8(R7)\n         BRAS  R10,PUNCHIT         YES, OUTPUT CARD IMAGE\n         J     MAIN64\n         SPACE\n*---------------------------------------------------------------------*\n*        'LIST' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN50   DS    0H\n         TM    SWA,SWA0            LIST?\n         JZ    MAIN60              NO.\n         TM    SWA,SWA4            MAXLIST SPECIFIED?\n         JZ    MAIN50A             NO\n         CH    R5,MAXLIST          YES, AT LIMIT?\n         JNL   MAIN60              YES, SKIP LISTING\nMAIN50A  DS    0H\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         JO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         JO    MAIN51              YES\n         LH    R3,DCBLRECL         RECFM = F OR U.\n         LA    R2,0(R7)\n         J     MAIN52\n         SPACE\nMAIN51   DS    0H\n         MVC   DCBLRECL,0(R7)\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         AHI   R3,-4               GET ACTUAL LRECL FOR RECFM=V    .AC.\nMAIN52   DS    0H\n*\n         TM    SWB,SWB1            HEXOUT?\n         JO    MAIN56              YES.\n         TM    SWB,SWB3            IS NUM SPECIFIED?\n         JO    MAIN57              YES.\nMAIN53   DS    0H\n         LR    R15,R3\n         CHI   R3,116                                              .AC.\n         JNH   *+8\n         LA    R15,116\n         BCTR  R15,0\n         LA    R1,LINE2+1\n         EX    R15,VARMVC1         0(0,R1),0(R2)\nMAIN54   DS    0H\n         AHI   R2,116              OUTPUT OTHER LINES              .AC.\n         AHI   R3,-116                                             .AC.\n         JNP   MAIN59              DONE IF NO MORE DATA\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7            TRUNC?\n         JO    MAIN59              YES, QUIT HERE\n         BRAS  R10,LOUT            OUTPUT FORMATTED LINE\n         J     MAIN53              NO, LOOP TO CONTINUE OUTPUT\n         SPACE\nMAIN56   DS    0H\n         LA    R15,LINE2+5         OUTPUT LINE IN HEX\n         LR    R0,R3\n         CHI   R3,50               FIFTY BYTES PER LINE\n         JNH   *+8\n         LA    R0,50\n         LR    R1,R2\n         BRAS  R10,HEXCON\n         AHI   R2,50               OUTPUT OTHER LINES              .AC.\n         AHI   R3,-50                                              .AC.\n         JNP   MAIN59              DONE\n         MVI   LINE2+120,C'*'      FLAG LINE CONTINUATION\n         TM    SWA,SWA7            IS TRUNC SPECIFIED?\n         JO    MAIN59              YES, QUIT.\n         BRAS  R10,LOUT            OUTPUT FORMATTED LINE\n         J     MAIN56              LOOP\n         SPACE\nMAIN57   DS    0H\n         AHI   R3,-8                                               .AC.\n         TM    SAVRECFM,B'10000000' IS IT RECFM=U/F/FB?\n         JO    MAIN57A             YES.\n         MVC   LINE2+1(8),0(R2)    NO, RECFM=V/VB\n         AHI   R2,8                                                .AC.\n         J     MAIN57B\n         SPACE\nMAIN57A  DS    0H\n         LA    R14,0(R2,R3)\n         MVC   LINE2+1(8),0(R14)\nMAIN57B  DS    0H\n         LA    R1,LINE2+10\n         LR    R15,R3\n         CHI   R15,108\n         JNH   *+8\n         LA    R15,108\n         BCTR  R15,0\n         EX    R15,VARMVC1         0(0,R1),0(R2)\n         AHI   R2,106                                              .AC.\n         AHI   R3,-106                                             .AC.\n         JNP   MAIN59\n         MVI   LINE2+120,C'*'\n         TM    SWA,SWA7            IS TRUNCATED SPECIFIED ?\n         JO    MAIN59              BRANCH IF YES\n         BRAS  R10,LOUT            OUTPUT FORMATTED LINE\nMAIN58   DS    0H\n         LR    R15,R3\n         LA    R1,LINE2+10\n         CHI   R15,106                                             .AC.\n         JNH   *+8\n         LA    R15,106\n         BCTR  R15,0\n         EX    R15,VARMVC1         0(0,R1),0(R2)\n         AHI   R2,106                                              .AC.\n         AHI   R3,-106                                             .AC.\n         JNP   MAIN59\n         MVI   LINE2+120,C'*'\n         BRAS  R10,LOUT            OUTPUT FORMATTED LINE\n         J     MAIN58\n         SPACE\nMAIN59   DS    0H\n         BRAS  R10,LOUT            OUTPUT FORMATTED LINE.\n         SPACE\n*---------------------------------------------------------------------*\n*        'DECK' PROCESSING\n*---------------------------------------------------------------------*\n         SPACE\nMAIN60   DS    0H\n         TM    SWA,SWA1            DECK?\n         JZ    MAIN64              NO.\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         JO    *+12                YES\n         TM    SAVRECFM,B'01000000'    RECFM=V?\n         JO    MAIN61              YES\n         LH    R3,DCBLRECL         RECFM = U OR F\n         LA    R2,0(R7)\n         J     MAIN62\n         SPACE\nMAIN61   DS    0H\n         MVC   DCBLRECL,0(R7)      RECFM=V/VB\n         LA    R2,4(R7)\n         LH    R3,DCBLRECL\n         AHI   R3,-4                                               .AC.\nMAIN62   DS    0H\n         LR    R15,R3\n         CHI   R3,80                                               .AC.\n         JNH   *+8\n         LA    R15,80\n         BCTR  R15,0\n         EX    R15,VARMVC3\n         TM    SWA,SWA3            UPDTE                          .PRC.\n         JNO   MAIN62A                                            .PRC.\n         CHI   R3,80               IS LRECL=80                    .PRC.\n         JNE   MAIN62A                                            .PRC.\n         CLC   CARD(2),UPDTE1      IS THIS AN UPDTE STATEMENT ./  .PRC.\n         JNE   MAIN62A                                            .PRC.\n         MVC   CARD(2),UPDTESUB    YES, SUBSTITUTE CHARS          .PRC.\nMAIN62A  DS    0H                                                 .PRC.\n         BRAS  R10,PUNCHIT\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF LOGICAL RECORD\n*---------------------------------------------------------------------*\n         SPACE\nMAIN64   DS    0H\n         AHI   R5,1                UPDATE REC COUNT                .AC.\n         TM    SAVRECFM,B'11000000'    RECFM=U?\n         JO    MAIN32              YES, GO GET NEXT BLOCK.\n         TM    SAVRECFM,B'01000000'  RECFM=V?\n         JZ    *+10                NO\n         MVC   DCBLRECL,0(R7)      YES, USE RECORD DESC. LEN\n         AH    R7,DCBLRECL         UPDATE BUFFER POINTER\n         SH    R6,DCBLRECL         UPDATE BYTES COUNT\n         LR    R0,R7                                              .AC.\n         JP    MAIN38              CONTINUE WITH THIS BLOCK       .AC.\n         J     MAIN32              GO GET NEXT BLOCK\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF MEMBER OR SDS\n*---------------------------------------------------------------------*\n         SPACE\nMAIN65   DS    0H\n         TM    SWC,SWC2            IS THIS DSORG=PS?\n         JO    MAIN70              YES, GO PROCESS IT.\n         ST    R5,WORK2\n         MVC   DIRCRDCT,WORK2\n         TM    SWD,SWD0            SYSIN NAMES SPECIFIED?\n         JZ    MAIN66              NO\n         TM    SWD,SWD2            SELECT MEMBERS?\n         JNZ   MAIN66              NO.\n         L     R2,CURRENT2+4       YES, UPDATE COUNTS\n         USING NAMTBL,R2\n         MVC   NAMTBL4,DIRPG1\n         MVC   NAMTBL3,DIRCRDCT\n         DROP  R2\nMAIN66   DS    0H\n         CVD   R5,WORK2\n         AL    R5,RECORDS          UPDATE TOTAL REC COUNT\n         ST    R5,RECORDS\n         TM    SWA,SWA0            LIST?\n         JZ    MAIN67              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERICKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG2L),MSG2\n         ED    LINE2+L'MSG2(L'MSG2A),WORK2+5\n         BRAS  R10,LOUT\nMAIN67   DS    0H\n         J     MAIN00\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF DSORG=PS DATASET.\n*---------------------------------------------------------------------*\n         SPACE\nMAIN70   DS    0H\n         ST    R5,RECORDS\n         MVC   LINE1+6(8),COMMENT               *****             .AC.\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\n         BRAS  R10,PRNT\n         BRAS  R10,PRNT\n         CVD   R5,WORK2\n         TM    SWA,SWA0            LIST?\n         JZ    MAIN72              NO.\n         MVI   LINE2,C'*'          PAD LINE WITH ASTERICKS\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         MVC   LINE2(MSG9L),MSG9\n         ED    LINE2+L'MSG9(L'MSG9A),WORK2+5\n         BRAS  R10,LOUT\nMAIN72   DS    0H\n         MVI   MEMCNT+1,1          \"SDS\" IS ONE MEMBER\n         CVD   R5,WORK2\n         MVC   LINE1(MSG9L),MSG9\n         MVI   LINE1,C' '\n         ED    LINE1+L'MSG9(L'MSG9A),WORK2+5\n         BRAS  R10,PRNT\n         A     R5,TOTALREC\n         ST    R5,TOTALREC\n         J     ENDLIB90\n         EJECT\n*----------------------------------------------------------------------\n*        END-OF-LIBRARY\n*----------------------------------------------------------------------\nENDLIB   DS    0H\n         LA    R8,SYSLIB\n         TM    SWD,SWD0            SELECT OR EXCLUDE SPECIFIED?\n         JZ    ENDLIB05            NO\n         TM    SWD,SWD2            SELECT SPECIFIED?\n         JZ    ENDLIB20            YES.\nENDLIB05 DS    0H\n         MVC   CURRENT1,NAMETBL1\n         USING DIR,R4\nENDLIB10 DS    0H\n         L     R4,CURRENT1\n         CLI   DIRNAME,X'FF'\n         JE    ENDLIB80\n         LH    R15,DIRUSERL\n         LA    R1,DIRUSER(R15)\n         ST    R1,CURRENT1\n         TM    SWD,SWD0+SWD2       WAS SYSIN-EXCLUDE SPECIFIED?\n         JNO   ENDLIB12            NO\n         TM    DIRFLAGS,B'10000000'  ..WAS THIS MEMBER SPECIFIED?\n         JZ    ENDLIB10            NO, SKIP IT.\nENDLIB12 DS    0H\n         BRAS  R10,LSTDIR\nENDLIB14 DS    0H\n         TM    DIRTTR+3,ALIAS      IS THIS AN ALIAS?\n         JZ    ENDLIB10            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),COMMENT                 .AC.\n         L     R1,NAMETBL1\nENDLIB15 DS    0H\n         CLI   DIRNAME-DIR(R1),X'FF'\n         JE    ENDLIB18\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         JE    ENDLIB17\nENDLIB16 DS    0H\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         J     ENDLIB15\nENDLIB17 DS    0H\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         JO    ENDLIB16\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB18 DS    0H\n         BRAS  R10,PRNT\n         J     ENDLIB10\nENDLIB20 DS    0H\n         MVC   CURRENT2,NAMETBL2\n         USING NAMTBL,R2\nENDLIB22 DS    0H\n         L     R2,CURRENT2\n         CLI   NAMTBL,X'FF'\n         JE    ENDLIB80\n         LA    R1,NAMTBLXX(R2)\n         STM   R1,R2,CURRENT2\n         L     R4,NAMTBL2          GET PNTR TO DIR AREA\n         LTR   R4,R4               IS THERE ONE?\n         JNZ   ENDLIB30            YES.\n         MVC   LINE1+6(8),NAMTBL1  NO, ISSUE MSG\n         MVC   LINE1+16(L'MSG3),MSG3\n         BRAS  R10,PRNT\n         J     ENDLIB22\n         SPACE\nENDLIB30 DS    0H                  MEMBER FOUND, LIST INFO.\n         MVC   DIRPG1,NAMTBL4\n         MVC   DIRCRDCT,NAMTBL3\n         BRAS  R10,LSTDIR\nENDLIB34 DS    0H\n         TM    DIRFLAGS,B'11000000' IS THIS PROCESSED ALIAS?\n         JNO   ENDLIB22            NO\n         MVC   LINE1+L'CAPTIONS(L'MSG4),MSG4\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),COMMENT    '????????'    .AC.\n         L     R1,NAMETBL1\nENDLIB35 DS    0H\n         CLI   DIRNAME-DIR(R1),X'FF'\n         JE    ENDLIB38\n         CLC   DIRTTR(3),DIRTTR-DIR(R1)\n         JE    ENDLIB37\nENDLIB36 DS    0H\n         LH    R15,DIRUSERL-DIR(R1)\n         LA    R1,DIRUSER-DIR(R15,R1)\n         J     ENDLIB35\n         SPACE\nENDLIB37 DS    0H\n         TM    DIRTTR-DIR+3(R1),ALIAS\n         JO    ENDLIB36\n         MVC   LINE1+L'CAPTIONS+L'MSG4(8),DIRNAME-DIR(R1)\nENDLIB38 DS    0H\n         BRAS  R10,PRNT\n         J     ENDLIB22\n         SPACE\n*---------------------------------------------------------------------*\n*        ISSUE END OF LIBRARY MESSAGE\n*---------------------------------------------------------------------*\n         SPACE\nENDLIB80 DS    0H\n         MVC   LINE1(MSG1L),MSG1\n         LH    R15,MEMCNT\n         CVD   R15,WORK1\n         ED    LINE1+L'MSG1(L'MSG1A),WORK1+5\n         L     R15,RECORDS\n         CVD   R15,WORK1\n         AL    R15,TOTALREC\n         ST    R15,TOTALREC\n         ED    LINE1+L'MSG1+L'MSG1A+L'MSG1AX(L'MSG1B),WORK1+4\n         BRAS  R10,PRNT\nENDLIB90 DS    0H\n         XC    RECORDS,RECORDS\n         XC    MEMCNT,MEMCNT\n         IC    R15,TTRK+3\n         AHI   R15,1                                               .AC.\n         STC   R15,TTRK+3\n         J     BEGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-RUN\n*---------------------------------------------------------------------*\n         SPACE\nENDRUN   DS    0H\n         TM    SWB,SWB0            DEBUG?\n         JO    ENDRUN10            YES, BYPASS FREE CORE\n         SPACE\n*---------------------------------------------------------------------*\n*        FREE WORKAREA\n*---------------------------------------------------------------------*\n         SPACE\n         OC    COR2,COR2           MAKE SURE CORE WAS GOTTEN\n         JZ    ENDRUN10            NOT GOTTEN\n*        FREEMAIN V,A=COR2                                         .AC.\n         CNOP  0,4                                                 .AC.\n         BRAS  1,*+14                            BRANCH AROUND LIST.AC.\n         DC    A(0)                                                .AC.\n         DC    A(COR2)                           AREA LIST ADDRESS .AC.\n         DC    AL1(192)                          MODE BYTE         .AC.\n         DC    AL1(0)                            SUBPOOL VALUE     .AC.\n         SVC   5                                 ISSUE FREEMAIN SVC.AC.\nENDRUN10 DS    0H\n         TM    SWC,SWC3            TERMINATE MODE?\n         JO    ENDRUN11            YES.\n         MVC   LINE1(L'ENDMSG0),ENDMSG0\n         XR    R15,R15\n         IC    R15,TTRK+3\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  LINE1+L'ENDMSG0(2),WORK1+6(2)\n         MVC   LINE1+L'ENDMSG0+2(ENDMSG1L),ENDMSG1\n         L     R15,TOTALREC\n         CVD   R15,WORK1\n         ED    LINE1+L'ENDMSG0+L'ENDMSG1+2(L'ENDMSG1A),WORK1+4\n         L     R15,COR2+4\n         SRL   R15,10              CONVERT TO 'K'\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7A,WORK1\n         L     R1,COR7\n         AL    R1,COR8\n         SRL   R1,10\n         SR    R15,R1\n         CVD   R15,WORK1\n         OI    WORK1+7,X'F'\n         UNPK  MSG7B,WORK1\n         MVC   LINE1+L'ENDMSG0+ENDMSG1L+4(MSG7L2-1),MSG7+1\nENDRUN11 DS    0H\n         BRAS  R10,PRNT            OUTPUT FINAL MSG\n         LA    R8,SYSPUNCH\n         BRAS  R10,TERMIO          CLOSE SYSPUNCH\n         TM    SWB,SWB0            DEBUG?\n         JO    ENDRUN21            YES, SKIP CLOSING SYSLIB       .AC.\n         LARL  R8,SYSLIB                                          .AC.\n         BRAS  R10,TERMIO          CLOSE SYSLIB                   .AC.\nENDRUN21 DS    0H                                                 .AC.\n         TM    SWE,SWE4            UNLOAD?                        .AC.\n         JZ    ENDRUN31            NO. SKIP CLOSING UNLOAD        .AC.\n         LARL  R8,UNLOAD                                          .AC.\n         BRAS  R10,TERMIO          CLOSE UNLOAD                   .AC.\nENDRUN31 DS    0H\n         LARL  R8,SYSLIST                                         .AC.\n         BRAS  R10,TERMIO          CLOSE SYSLIST\n         LARL  R8,SYSPRINT                                        .AC.\n         BRAS  R10,TERMIO          CLOSE SYSPRINT\n         TM    SWB,SWB0            DEBUG?\n         JZ    ENDRUN99            NO\n         LH    R2,RETCODE          YES, ABEND\n         ABEND (R2),DUMP\nENDRUN99 DS    0H\n         LH    R15,RETCODE\n         PR                                                        .AC.\n         EJECT\n*---------------------------------------------------------------------*\n*        FORMAT AND PRINT THE 'SYSPRINT' LINE FOR A MEMBER\n*---------------------------------------------------------------------*\n         SPACE\n         USING DIR,R4\nLSTDIR   DS    0H\n         ST    R10,SAVE10          SAVE CALLER'S RETURN\n         MVC   LINE1+6(8),DIRNAME\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         JZ    LSTDIR03            NO\n         LH    R1,DIRPG1\n         CVD   R1,WORK1\n         MVC   WORK2(8),PAGEPAT\n         ED    WORK2,WORK1+4\n         MVC   LINE1+15(6),WORK2+2\nLSTDIR03 DS    0H\n         LA    R15,LINE1+L'CAPTIONS-12\n         LA    R0,L'DIRTTR\n         LA    R1,DIRTTR\n         BRAS  R10,HEXCON\n         LH    R15,DIRUSERL\n         LTR   R15,R15\n         JNP   LSTDIR10\n         TM    SWD,SWD7            RITS/CRBE/CRJE?\n         JZ    LSTDIR05            NO.\n         LA    R1,LINE1+L'CAPTIONS\n         LA    R2,DIRUSER\n         BRAS  R10,RITSINFO\n         J     LSTDIR10\n         SPACE\nLSTDIR05 DS    0H\n         LA    R15,LINE1+L'CAPTIONS\n         LA    R1,DIRUSER\n         LH    R0,DIRUSERL\n         CHI   R0,30               ARE SPF STATISTICS PRESENT     .SPF.\n         JNE   LSTSPFX             NO, BRANCH                     .SPF.\n         TM    SWE,SWE1+SWE2       SPF IN THIS PDS                .SPF.\n         JNO   LSTSPFX             NO, BRANCH                     .SPF.\n         TM    DIRTTR+3,X'60'      TTR'S IN USER DATA             .SPF.\n         JNZ   LSTSPFX             YES, THIS ISNT SPF DATA        .SPF.\n         IC    R0,DIRUSER          GET V OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  1(2,R15),WORK1+6(2)                                .SPF.\n         MVI   3(R15),C'.'                                        .SPF.\n         IC    R0,DIRUSER+1        GET M OF V.M                   .SPF.\n         CVD   R0,WORK1                                           .SPF.\n         OI    WORK1+7,X'0F'                                      .SPF.\n         UNPK  4(2,R15),WORK1+6(2)                                .SPF.\n*        UNPK  11(5,R15),DIRUSER+4(4) YYDDD CREATED               .SPF.\n*        MVC   10(2,R15),11(R15)                                  .SPF.\n*        MVI   12(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+4  YYDDD CREATED                  .SPF.\n         L     R0,WORK1            YYDDD CREATED                  .SPF.\n         BRAS  R14,JULIAN                                         .SPF.\n         MVC   9(7,R15),WORK1+1                                   .SPF.\n*        UNPK  21(5,R15),DIRUSER+8(4) YYDDD LAST MODIFIED         .SPF.\n*        MVC   20(2,R15),21(R15)                                  .SPF.\n*        MVI   22(R15),C'/'                                       .SPF.\n         MVC   WORK1(4),DIRUSER+8  YYDDD LAST MODIFIED            .SPF.\n         L     R0,WORK1            YYDDD LAST MODIFIED            .SPF.\n         BRAS  R14,JULIAN                                         .SPF.\n         MVC   19(7,R15),WORK1+1                                  .SPF.\n         MVO   WORK1(3),DIRUSER+12(2) HHMM   LAST MODIFIED        .SPF.\n         OI    WORK1+2,X'0F'                                      .SPF.\n         UNPK  28(4,R15),WORK1(3)                                 .SPF.\n         MVC   27(2,R15),28(R15)                                  .SPF.\n         MVI   29(R15),C':'                                       .SPF.\n         LH    R0,DIRUSER+14       CURRENT SIZE                   .SPF.\n         NILL  R0,X'FFFF'                                         .AC.\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   32(6,R15),=X'402020202120'                         .AC.\n         MVC   32(6,R15),MSG1A                                    .SPF.\n         ED    32(6,R15),WORK1+5                                  .SPF.\n         LH    R0,DIRUSER+16       INITIAL SIZE                   .SPF.\n*        N     R0,=A(X'0000FFFF')                                 .SPF.\n         NILL  R0,X'FFFF'                                         .AC.\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   38(6,R15),=X'402020202120'                         .SPF.\n         MVC   38(6,R15),MSG1A                                    .AC.\n         ED    38(6,R15),WORK1+5                                  .SPF.\n         LH    R0,DIRUSER+18       LINES MODIFIED                 .SPF.\n*        N     R0,=A(X'0000FFFF')                                 .SPF.\n         NILL  R0,X'FFFF'                                         .AC.\n         CVD   R0,WORK1                                           .SPF.\n*        MVC   44(6,R15),=X'402020202120'                         .SPF.\n         MVC   44(6,R15),MSG1A                                    .AC.\n         ED    44(6,R15),WORK1+5                                  .SPF.\n         MVC   52(10,R15),DIRUSER+20   USER ID                    .SPF.\n         J     LSTDIR10                                           .SPF.\n         SPACE\nJULIAN   DS    0H                                                 .SPF.\n         STM   R15,R1,JULIANS                                     .SPF.\n         XC    WORK2,WORK2                                        .SPF.\n         ST    R0,WORK2+4                                         .SPF.\n         CVB   R1,WORK2            CONVERT DATE TO BINARY         .SPF.\n         XR    R0,R0                                              .SPF.\n         D     R0,F1000            TO SEP YEAR AND DAY            .AC.\n         ST    R1,WORK2            SAVE YEAR                      .SPF.\n         L     R15,MTHS1           FOR STD YEAR                   .AC.\n         TM    WORK2+3,X'03'       LEAP YEAR?                     .SPF.\n         JNZ   *+8                 NO                             .SPF.\n         L     R15,MTHS2           FOR LEAP YEAR                  .AC.\n         XR    R1,R1                                              .SPF.\nJULIANX  DS    0H                                                 .SPF.\n         SH    R0,0(R15)                                          .SPF.\n         JNP   JULIANY                                            .SPF.\n         AHI   R1,3                                               .AC.\n         AHI   R15,2                                              .AC.\n         J     JULIANX                                            .SPF.\n         SPACE 1                                                  .SPF.\nJULIANY  DS    0H                                                 .SPF.\n         AH    R0,0(R15)                                          .SPF.\n         MHI   R0,10                                              .AC.\n         CVD   R0,WORK2            FOR DAY OF MONTH               .SPF.\n         AL    R1,MTHS3            FOR MON IN CHARS               .AC.\n         MVC   WORK1(8),PAT3       X'4020204B4B4B2020'            .AC.\n         MVC   WORK1+3(3),0(R1)                                   .SPF.\n         MVC   JULIANS+4(1),WORK2+6 DAY OF MONTH DDYYDDDF         .SPF.\n         ED    WORK1(8),JULIANS+4                                 .SPF.\n         CLI   WORK1+1,C' '                                       .SPF.\n         JNE   *+8                                                .SPF.\n         MVI   WORK1+1,C'0'                                       .SPF.\n         LM    R15,R1,JULIANS                                     .SPF.\n         BR    R14                                                .SPF.\n         SPACE 1                                                  .SPF.\nLSTSPFX  DS    0H                                                 .SPF.\n         CHI   R0,32\n         JNH   *+8\n         LA    R0,32\n         BRAS  R10,HEXCON\nLSTDIR10 DS    0H\n         TM    SWA,SWA2            LISTDIR ONLY?\n         JO    LSTDIR90            YES\n         TM    DIRFLAGS,B'10000000' WAS THIS MEMBER PROCESSED?\n         JZ    LSTDIR90            NO\n         MVC   WORK1(4),DIRCRDCT\n         L     R1,WORK1\n         CVD   R1,WORK1\n         MVC   LINE1+24(L'MSG2A),MSG2A\n         ED    LINE1+24(L'MSG2A),WORK1+5\nLSTDIR90 DS    0H\n         BRAS  R10,PRNT\n         L     R10,SAVE10\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        UPON ENTRY, R1=A(BUFFER), R2=A(DIRECTORY ENTRY)\n*---------------------------------------------------------------------*\n         SPACE\nRITSINFO DS    0H\n         CLI   DIRUSERL+1,5        CHECK LENGTH OF USER FIELD\n         JL    UNKNOWN             SHORT.\n         MVC   0(L'PAT1,R1),PAT1\n         ED    0(L'PAT1,R1),0(R2)\n         MVC   10(L'PAT1,R1),PAT1\n         ED    10(L'PAT1,R1),3(R2)\n         XC    WORK1,WORK1\n         MVC   WORK1+2(2),6(R2)\n         L     R15,WORK1\n         CVD   R15,WORK1\n         MVC   WORK2,PAT2\n         ED    WORK2,WORK1+4\n         MVC   23(4,R1),WORK2+4\n         TM    SWD,SWD4+SWD5       CRJE?\n         JO    CRJEINFO            YES.\nCRBEINFO DS    0H\n         MVC   42(3,R1),CSEQ                                       .AC.\n         TM    9(R2),X'40'         SEQ/NOSEQ?\n         JO    *+10                SEQ.\n         MVC   40(2,R1),CNOSCAN    NO\n         MVC   52(4,R1),CSCAN                                      .AC.\n         TM    9(R2),X'80'         SCAN/NOSCAN?\n         JO    *+10\n         MVC   50(2,R1),CNOSCAN    NO                              .AC.\n         TM    8(R2),X'40'         FORTRAN FILE?\n         JZ    *+12                NO.\n         MVC   30(7,R1),CFORTRAN                                   .AC.\n         BR    R10\n         TM    8(R2),X'20'         OTHER FILE?\n         JZ    *+12                NO.\n         MVC   30(5,R1),COTHER                                     .AC.\n         BR    R10\n         TM    8(R2),X'08'         FLIST FILE?\n         JZ    *+12                NO.\n         MVC   30(5,R1),CFLIST                                     .AC.\n         BR    R10\n         TM    SWD,SWD5            RITS?\n         JZ    *+20                YES\n         TM    8(R2),X'10'         OBJMOD FILE?\n         JZ    *+12                NO.\n         MVC   30(6,R1),COBJMOD                                    .AC.\n         BR    R10\n         SPACE\nUNKNOWN  DS    0H\n         MVC   30(7,R1),CUNKNOWN   ???????                         .AC.\n         BR    R10\n         SPACE\nCRJEINFO DS    0H\n         CLI   DIRUSERL+1,11       CHECK USER LENGTH\n         JL    CRBEINFO            SHORT...HANDLE AS CRBE\n         AHI   R1,30               POINT AT ATTR AREA OF LINE      .AC.\n*        CRJE  8,B'00100000','DATA,',5,CRJE20\n*        CRJE  8,B'00010000','TEXT,',5,CRJE20\n*        CRJE  8,B'00001000','DSLIST,',7,CRJE20\n*        CRJE  8,B'00000100','CLIST,',6,CRJE20\n*        CRJE  8,B'01000001','FORTH,',6,CRJE20\n*        CRJE  8,B'01000000','FORTG,',6,CRJE20\n*        CRJE  8,B'00000001','FORTE,',6,CRJE20\n         CRJE  8,B'00100000',CDATA,CRJE20                          .AC.\n         CRJE  8,B'00010000',CTEXT,CRJE20                          .AC.\n         CRJE  8,B'00001000',CDSLIST,CRJE20                        .AC.\n         CRJE  8,B'00000100',CCLIST,CRJE20                         .AC.\n         CRJE  8,B'01000001',CFORTH,CRJE20                         .AC.\n         CRJE  8,B'01000000',CFORTG,CRJE20                         .AC.\n         CRJE  8,B'00000001',CFORTE,CRJE20                         .AC.\n         TM    8(R2),B'10000010'   PL1?\n         JNZ   CRJE15              YES.\n         MVC   0(7,R1),CUNKNOWN    NO, UNKNOWN ???????\n         BR    R10                 QUIT.\n         SPACE\nCRJE15   DS    0H\n         MVC   0(7,R1),CPL1        'PL1(  ,'                       .AC.\n         XR    R15,R15\n         IC    R15,13(R2)          PL1 SORMARGIN\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(2,R1),WORK1(8)\n         IC    R15,14(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  7(2,R1),WORK1(8)\n         AHI   R1,10                                               .AC.\n*        CRJE  8,B'10000000','C48),',5,CRJE20\n         CRJE  8,B'10000000',C48,CRJE20                            .AC.\n         MVC   0(5,R1),C60                 'C60),'                 .AC.\n         AHI   R1,5                                                .AC.\nCRJE20   DS    0H\n*        CRJE  9,B'10000000','SEQ,',4,CRJE21\n         CRJE  9,B'10000000',CSEQ,CRJE21\n         MVC   0(6,R1),CNOSEQ              'NOSEQ,'                .AC.\n         AHI   R1,6                                                .AC.\nCRJE21   DS    0H\n         TM    8(R2),B'11000011'   PL1 OR FORT?\n         JZ    CRJE22              NO...SKIP SCAN\n*        CRJE  9,B'01000000','SCAN,',5,CRJE22\n         CRJE  9,B'01000000',CSCAN,CRJE22                          .AC.\n         MVC   0(7,R1),CNOSCAN             'NOSCAN,'               .AC.\n         AHI   R1,7                                                .AC.\nCRJE22   DS    0H\n         MVC   0(4,R1),CBLK         'BLK='                         .AC.\n         LH    R15,20(R2)\n         CVD   R15,WORK1\n         OI    WORK1+7,X'0F'\n         UNPK  4(4,R1),WORK1(8)\n         MVC   8(3,R1),CKEQU         ',K='                         .AC.\n         MVC   11(3,R1),10(R2)\n         BR    R10\n         EJECT\n*---------------------------------------------------------------------*\n*        *** SUBROUTINES ****\n*---------------------------------------------------------------------*\n         SPACE\n         SPACE\nSAVERC   DS    0H\n         CH    R1,RETCODE          COMPARE TO CURRENT VALUE\n         BNHR  R14                 RETURN IF NOT HIGHER\n         STH   R1,RETCODE          REPLACE WITH NEW VALUE\n         BR    R14\n         SPACE\nTERMINAT DS    0H\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BRAS  R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         J     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\nPUTMSG   DS    0H\n         MVC   LINECNT1,LINEMAX    FORCE PAGE EJECT\nPUTMSGXX DS    0H\n         ST    R14,SAVE14          SETUP FOR MSG OUTPUT\n         PUT   SYSPRINT,LINE0\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         L     R14,SAVE14          AND FALL THRU TO CLEARBUF\n         BR    R14\n         SPACE\nPUNCHIT  DS    0H\n         PUT   SYSPUNCH,CARD\n         MVI   CARD,C' '\n         MVC   CARD+1(L'CARD-1),CARD\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        TERMINATE I/O:  CLOSE DCB AND FREE BUFFER POOL\n*---------------------------------------------------------------------*\n         SPACE\nTERMIO   DS    0H\n         TM    DCBOFLGS,OFLGS      DCB OPEN?\n         BZR   R10                 NO\n         BALR  R12,0               ESTABLISH ADDRESSIBILITY        .AC.\n         USING *,R12                  FOR CLOSE MACRO              .AC.\n         CLOSE ((R8))              YES, CLOSE THE DCB\n         FREEPOOL  (R8)            AND FREE THE BUFFER POOL\n         BR    R10                 RETURN\n         DROP  R12\n         SPACE\n*---------------------------------------------------------------------*\n*        STANDARD FILES DCB EXIT ROUTINES\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT1 DS    0H\n         LA    R5,3200             FOR SYSIN & SYSPUNCH\n         J     DCBEXITZ\n         SPACE\nDCBEXITA DS    0H\n         LA    R5,3509             FOR SYSPRINT\n         J     DCBEXITZ\n         SPACE\nDCBEXITC DS    0H\n         J     DCBEXITZ                                            .AC.\n         SPACE\nDCBEXITB DS    0H\n         LHI   R5,7260             FOR SYSLIST                     .AC.\nDCBEXITZ DS    0H\n         LH    R4,DCBLRECL         GET LRECL\n         CH    R4,DCBBLKSI         BLKSIZE SPECIFIED?\n         JNH   DCBEXITY            YES.\n         STH   R5,DCBBLKSI         NO, USE DEFAULT.\nDCBEXITY DS    0H\n         XR    R2,R2               FORCE MULT BLKSIZE\n         LH    R3,DCBBLKSI\n         DR    R2,R4\n         MH    R3,DCBLRECL\n         STH   R3,DCBBLKSI\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        PDS DATA READ DCB EXIT ROUTINE\n*---------------------------------------------------------------------*\n         SPACE\nDCBEXIT2 DS    0H\n         MVC   SAVBLKSI,DCBBLKSI   SAVE DCB PARMS\n         MVC   SAVLRECL,DCBLRECL\n         MVC   SAVRECFM,DCBRECFM\n         MVC   SAVBUFNO,DCBBUFNO\n         MVI   DCBBUFNO,0          BUFFERING HANDLED INTERNALLY\n         CLI   SAVBUFNO,0          IS BUFNO SPECIFIED?\n         BNER  R14                 YES.\n         MVI   SAVBUFNO,2          NO, USE DEFAULT.\n         BR    R14\n         SPACE\n*---------------------------------------------------------------------*\n*        END-OF-FILE DETECTED ON SYSLIB\n*---------------------------------------------------------------------*\n         SPACE\nPDSEOF   BR    R10                 BETTER BE SET TO GOOD ADDR\n         SPACE\nSYNERR1  DS    0H\n         BALR  R12,0               ESTABLISH ADDRESSIBILITY        .AC.\n         USING *,R12                  FOR SYNADF MACRO             .AC.\n         SYNADAF   ACSMETH=BPAM    PDS-DATA READ I/O ERROR\n         STM   R14,R12,SYNADSAV    SAVE REGS\n         LR    R2,R1               SAVE POINTER TO MESSAGE\n         BRAS  R10,PRNT            --OUTPUT CURRENT LINE\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(78),50(R2)\n         BRAS  R14,PUTMSG          REDO LASTLINE.\n         MVC   LINE0(L'LPDS02I),LPDS02I\n         MVC   LINE0+L'LPDS02I(L'HEAD2MEM),HEAD2MEM\n         MVC   LINE0+L'LPDS02I+L'HEAD2MEM(8),NAME\n         BRAS  R14,PUTMSG\n         LA    R1,8                SET THE RETURN CODE\n         BRAS  R14,SAVERC\n         LM    R14,R12,SYNADSAV    RESTORE REGS\n         SYNADRLS\n         DROP  R12\n         TM    SWB,SWB4            EROPT=TERM/ACC?\n         JZ    SYNERR2             FOR TERM.\n         BR    R14                 FOR ACC.\n         SPACE\nSYNERR2  DS    0H\n         MVC   LINE0(L'LPDS03I),LPDS03I\n         BRAS  R14,PUTMSG\n         LA    R1,16               SET RETURN CODE\n         STH   R1,RETCODE\n         OI    SWC,SWC3            SET TERMINATE MODE\n         J     ENDRUN              GOTO WRAPUP ROUTINE\n         SPACE\n*---------------------------------------------------------------------*\n*        HEX-BINARY TO HEX-CHARACTER CONVERSION ROUTINE\n*        UPON ENTRY, R0=LENGTH OF SOURCE, R1=A(SOURCE), R15=A(TARGET)\n*---------------------------------------------------------------------*\n         SPACE\nHEXCON   DS    0H\n         IC    R14,0(R1)           PROCESS FOUR LSB'S\n         N     R14,X000F\n         IC    R14,HEXTBL(R14)\n         STC   R14,1(R15)\n         IC    R14,0(R1)           PROCESS FOUR MSB'S\n         SRL   R14,4\n         IC    R14,HEXTBL(R14)\n         STC   R14,0(R15)\n         AHI   R1,1                                                .AC.\n         AHI   R15,2                                               .AC.\n         AHI   R0,-1               LOOP?                           .AC.\n         JP    HEXCON              YES.\n         BR    R10                 NO, RETURN.\n         SPACE\n*---------------------------------------------------------------------*\n*        OUTPUT A LINE TO SYSPRINT\n*---------------------------------------------------------------------*\n         SPACE\nPRNT     DS    0H\n         LA    R15,LINE1\n         BRAS  R14,SETCC\n         LH    R15,LINECNT1\n         LA    R15,0(R15,R1)\n         STH   R15,LINECNT1\n         CH    R15,LINEMAX         AT LIMIT?\n         JNH   PRNTC               NO.\nPRNTA    DS    0H\n         LA    R15,5\n         STH   R15,LINECNT1\n         MVC   HEAD1PAG,PAGEPAT\n         LH    R15,PAGENUM1\n         AHI   R15,1                                               .AC.\n         STH   R15,PAGENUM1\n         CVD   R15,WORK1\n         ED    HEAD1PAG,WORK1+4\n         MVC   LINE0(121),HEAD1\n         BRAS  R14,PUTMSGXX\n         MVI   LINE0,C'0'\n         TM    SWD,SWD3            INITIAL PAGE?\n         JZ    PRNTB               YES, SKIP CAPTIONS.\n         MVC   LINE0(L'CAPTIONS),CAPTIONS\n         TM    SWD,SWD7            RITS/CRBE?\n         JZ    *+14                NO.\n         MVC   LINE0+L'CAPTIONS(L'RITSCAP),RITSCAP\n         J     *+10\n         MVC   LINE0+L'CAPTIONS(L'USERCAP),USERCAP\n         TM    SWE,SWE1+SWE2       SPF STATS IN THIS PDS          .SPF.\n         JNO   *+10                NO.                            .SPF.\n         MVC   LINE0+L'CAPTIONS(L'SPFSCAP),SPFSCAP                .SPF.\nPRNTB    DS    0H\n         BRAS  R14,PUTMSGXX\n         MVI   LINE1,C'0'\nPRNTC    DS    0H\n         MVC   LINE0,LINE1\n         BRAS  R14,PUTMSGXX\n         MVI   LINE1,C' '\n         MVC   LINE1+1(L'LINE1-1),LINE1\n         BR    R10\n         SPACE\n*---------------------------------------------------------------------*\n*        'SYSLIST' OUTPUT S/R\n*---------------------------------------------------------------------*\n         SPACE\nLOUT     DS    0H\n         LA    R15,LINE2\n         BRAS  R14,SETCC\n         TM    SWD,SWD6            TEST FORCE EJECT\n         JO    LOUTC               YES.\n         TM    SWA,SWA5            IS THIS 'EJECT' FORMAT\n         JZ    LOUTA               NO\n         AH    R1,LINECNT2         UPDATE LINECOUNT FOR EJECT FORMAT\n         STH   R1,LINECNT2\n         CH    R1,LINEMAX          AT BOTTOM OF PAGE?\n         JNH   LOUTE               NO, TERMINATE\n         J     LOUTC               YES, DO PAGE EJECT AND HEADER-2\n         SPACE\nLOUTA    DS    0H\n         LH    R15,LINECNT2\n         LA    R15,0(R1,R15)\n         CLC   CMEMBER,LINE2       TEST FOR SPECIAL CASE '0MEMBER='.AC.\n         JNE   LOUTA1              NO.\n         AHI   R15,2               YES, EXTRA PADDING.             .AC.\nLOUTA1   DS    0H\n         CH    R15,LINEMAX         TEST FOR LIMIT\n         JH    LOUTB               AT LIMIT\n         AH    R1,LINECNT2         UPDATE LINECNT\n         STH   R1,LINECNT2\n         J     LOUTE               AND OUTPUT THE LINE.\n         SPACE\nLOUTB    DS    0H\n         MVI   LINE0,C' '\n         MVC   LINE0+1(L'LINE0-1),LINE0\n         LH    R1,LINECNT2\nLOUTB1   DS    0H\n         CH    R1,LINEMAX\n         JNL   LOUTB2              PADDING DONE, GO OUTPUT HEADER\n         ST    R1,SAVELOUT\n         LARL  R1,SYSLIST                                          .AC.\n         PUT   (1),LINE0\n         L     R1,SAVELOUT\n         AHI   R1,1                                                .AC.\n         J     LOUTB1\n         SPACE\nLOUTB2   DS    0H\n         MVI   HEAD2,C'0'\n         LARL  R1,SYSLIST                                          .AC.\n         PUT   (1),HEAD2           OUTPUT THE PAGE HEADER\n         MVI   HEAD2,C'1'\nLOUTC    DS    0H\n         NI    SWD,255-SWD6        RESET SWITCH\n         LA    R15,3\n         TM    SWA,SWA5            IS THIS NOEJECT FORMAT?\n         JO    *+8                 NO, IT IS EJECT\n         LA    R15,2               +2 FOR BOTTOM IN NOEJECT FORMAT .AC.\n         STH   R15,LINECNT2\n         MVC   HEAD2NAM,NAME\n         MVC   HEAD2PAG,PAGEPAT\n         LH    R15,PAGENUM2        UPDATE THE PAGE NUMBER\n         AHI   R15,1                                               .AC.\n         STH   R15,PAGENUM2\n         CVD   R15,WORK1\n         ED    HEAD2PAG,WORK1+4\n         LARL  R1,SYSLIST                                          .AC.\n         PUT   (1),HEAD2           OUTPUT THE PAGE HEADER\n         MVI   LINE2,C'-'\nLOUTE    DS    0H\n         LARL  R1,SYSLIST                                          .AC.\n         PUT   (1),LINE2           OUTPUT THE FORMATTED LINT\n         MVI   LINE2,C' '          THEN CLEAR THE USED LINE WORKAREA\n         MVC   LINE2+1(L'LINE2-1),LINE2\n         BR    R10\n         SPACE\nSETCC    DS    0H\n         CC    4000,0(R15),1,SETCC9\n         CC    0,0(R15),+,SETCC9\n         CC    3,0(R15),-,SETCC9\n         CC    2,0(R15),0,SETCC9\n         LA    R1,1                FORCE 'DEFAULT'\n         MVI   0(R15),C' '\nSETCC9   DS    0H\n         BR    R14\n         SPACE\nGETLOW   DS    0H\n         L     R1,COR4\n         AR    R0,R1\n         C     R0,COR6\n         JNL   GETBAD\n         ST    R0,COR4\n         J     MAXUSED\n         SPACE\nGETHI    DS    0H\n         L     R1,COR6\n         SR    R1,R0\n         C     R1,COR4\n         JNH   GETBAD\n         ST    R1,COR6\n         L     R15,COR5\n         SR    R15,R1\n         C     R15,COR8\n         JNH   *+8\n         ST    R15,COR8\n         BR    R14\n         SPACE\nGETBASE  DS    0H\n         L     R1,COR3\n         AR    R0,R1\n         C     R0,COR5\n         JNL   GETBAD\n         ST    R0,COR3\nRESETLO  DS    0H\n         MVC   COR4,COR3\nMAXUSED  DS    0H\n         L     R15,COR4\n         SR    R15,R1\n         C     R15,COR7\n         JNH   *+8\n         ST    R15,COR7\n         BR    R14\n         SPACE\nRESETHI  DS    0H\n         MVC   COR6,COR5\n         BR    R14\n         SPACE\nGETBAD   DS    0H\n         MVC   LINE0(L'LPDS10I),LPDS10I\n         BRAS  R14,PUTMSGXX\n         J     TERMINAT\n         EJECT\n*---------------------------------------------------------------------*\n*        *** STORAGE AREAS, CONSTANTS, ETC. ****\n*---------------------------------------------------------------------*\n         SPACE\nWORKSTOR DS    0H\nVARMVC1  MVC   0(0,R1),0(R2)       FOR PRINTED OUTPUT\nVARMVC3  MVC   CARD(*-*),0(R2)     FOR PUNCHED OUTPUT\nBLDNAMMV MVC   DIRNAME-DIR(*-*,R1),0(R3)\nWORK1    DC    1D'0'\nWORK2    DC    1D'0'\nSYNADSAV DC    8D'0'               TO SAVE REGS IN SYNAD EXIT\nCOR1     DC    A(10*1024,500*1024)  MIN/MAX SIZE FOR GETMAIN\nCOR2     DC    A(0,0)              RETURNED ADDR AND SIZE\nCOR3     DC    A(*-*)              BOTTOM OF AREA\nCOR4     DC    A(*-*)              START BOTTOM OF VARIABLE AREA\nCOR5     DC    A(*-*)              TOP OF AREA\nCOR6     DC    A(*-*)\nCOR7     DC    A(0)\nCOR8     DC    A(0)\nTIOT     DC    A(0)                POINTER TO TIOT\nBFRS     DC    2A(0)\nSAVELOUT DC    F'0'\nSAVE10   DC    A(0)                TO SAVE REGS 10\nSAVE14   DC    A(0)                TO SAVE REG 14\nBUFFER0  DC    A(0)                PDS BUFFER LENGTH\nBUFFER1  DC    A(0)                PDS BUFFER #1 ADDRESS\nBUFFER2  DC    A(0)                PDS BUFFER #2 ADDRESS\nTTRK     DC    F'0'                FOR FIND/POINT.\nECB      DC    F'0'\nIOB      DC    0F'0',X'42',X'000000',A(ECB)\nCSW      DC    XL8'0'\nACP      DC    A(*-*),A(SYSLIB)\n         DC    A(0),Y(0,0)\nMBB      DC    XL3'0'\nCCHHR    DC    XL5'0'\nRECORDS  DC    F'0'                COUNT OF TOTAL RECORDS IN LIB\nTOTALREC DC    F'0'                TOTAL NO. OF LRECL PROCESSED\nALCB     DC    A(*-*)\n*SYSLIST DC    A(SYSLIST)\nNAMETBL1 DC    A(0)                POINTER TO DIRECTORY TABLE\nNAMETBL2 DC    A(0)                POINTER TO SELECTED NAMES\nCURRENT1 DC    2A(0)               PNTRS TO NAMETBL1 CURRENT\nCURRENT2 DC    2A(0)               PNTRS TO NAMETBL2 CURRENT\nDSCB     CAMLST SEARCH,DSNAME,VOLSER,WORKAREA\n         DC    0D'0'\nWORKAREA DC    XL160'00'           OBTAIN'S WORKAREA\nDSNAME   DC    CL44' '\nVOLSER   DC    CL6' '\nSWITCHES DC    XL5'00'             RUN SWITCHES AND FLAGS         .PRC.\n         ORG   *-5                                                .PRC.\nSWA      DS    X\nSWB      DS    X\nSWC      DS    X\nSWD      DS    X\nSWE      DS    X                                                  .PRC.\n         ORG   ,\nEXLST1   DC    0F'0',X'85',AL3(DCBEXIT1)     SYSIN & SYSPUNCH\nEXLSTA   DC    0F'0',X'85',AL3(DCBEXITA)     SYSPRINT\nEXLSTB   DC    0F'0',X'85',AL3(DCBEXITB)     SYSLIST\nEXLSTC   DC    0F'0',X'85',AL3(DCBEXITC)     UNLOAD                .AC.\nEXLST2   DC    0F'0',X'05',AL3(DCBEXIT2)     FOR PDS DCB\nJFCBADRS DC    X'80',AL3(*-*)\nSAVBLKSI DC    H'0'\nSAVLRECL DC    H'0'\nSAVRECFM DC    X'00'\nSAVBUFNO DC    AL1(0)\nRETCODE  DC    H'0'                RETURN CODE\nPAGENUM1 DC    H'0'                CURRENT SYSPRINT PAGE NUMBER\nPAGENUM2 DC    H'0'                CURRENT SYSLIST  PAGE NUMBER\nLINECNT1 DC    H'0'                CURRENT SYSPRINT LINE NUMBER\nLINECNT2 DC    H'0'                CURRENT SYSLIST  LINE NUMBER\nLINEMAX  DC    H'0'                MAXIMUM LINE NUMBER\nMAXDIR   DC    H'0'\nMAXLIST  DC    H'0'\nMEMCNT   DC    H'0'\n         DC    0F'0'\nBLANKS   DC    CL8' '                                             .AC.\nCDATA    DC    C'DATA,'                                           .AC.\nCTEXT    DC    C'TEXT,'                                           .AC.\nCDSLIST  DC    C'DSLIST,'                                         .AC.\nCCLIST   DC    C'CLIST,'                                          .AC.\nCFORTH   DC    C'FORTH,'                                          .AC.\nCFORTG   DC    C'FORTG,'                                          .AC.\nCFORTE   DC    C'FORTE,'                                          .AC.\nCSCAN    DC    C'SCAN,'                                           .AC.\nCNOSCAN  DC    C'NOSCAN,'                                         .AC.\nCNOSEQ   DC    C'NOSEQ,'                                          .AC.\nC48      DC    C'C48),'                                           .AC.\nC60      DC    C'C60),'                                           .AC.\nCDA      DC    C'DA'                                              .AC.\nCIS      DC    C'IS'                                              .AC.\nCPO      DC    C'PO'                                              .AC.\nCPS      DC    C'PS'                                              .AC.\nCBLK     DC    C'BLK='                                            .AC.\nCLRECL   DC    C'LRECL='                                          .AC.\nCBLKSIZE DC    C'BLKSIZE='                                        .AC.\nCRECFM   DC    C'RECFM=?'                                         .AC.\nCDSORG   DC    C'DSORG=??'                                        .AC.\nCKEQU    DC    C',K='                                             .AC.\nCSEQ     DC    C'SEQ,'                                            .AC.\nCFORTRAN DC    C'FORTRAN'                                         .AC.\nCOTHER   DC    C'OTHER'                                           .AC.\nCFLIST   DC    C'FLIST'                                           .AC.\nCOBJMOD  DC    C'OBJMOD'                                          .AC.\nCLISTDIR DC    C'LISTDIR'                                         .AC.\nCRITS    DC    C'RITS'                                            .AC.\nCCRBE    DC    C'CRBE'                                            .AC.\nCDEBUG   DC    C'DEBUG'                                           .AC.\nCNODEBUG DC    C'NODEBUG'                                         .AC.\nCLIST    DC    C'LIST'                                            .AC.\nCNOLIST  DC    C'NOLIST'                                          .AC.\nCDECK    DC    C'DECK'                                            .AC.\nCNODECK  DC    C'NODECK'                                          .AC.\nCUPDTE   DC    C'UPDTE'                                           .AC.\nCNOUPDTE DC    C'NOUPDTE'                                         .AC.\nCSSI     DC    C'SSI'                                             .AC.\nCNOSSI   DC    C'NOSSI'                                           .AC.\nCCRJE    DC    C'CRJE'                                            .AC.\nCTRUNC   DC    C'TRUNC'                                           .AC.\nCNOTRUNC DC    C'NOTRUNC'                                         .AC.\nCHEXOUT  DC    C'HEXOUT'                                          .AC.\nCNHEXOUT DC    C'NOHEXOUT'                                        .AC.\nCNUM     DC    C'NUM'                                             .AC.\nCNONUM   DC    C'NONUM'                                           .AC.\nCEJECT   DC    C'EJECT'                                           .AC.\nCNOEJECT DC    C'NOEJECT'                                         .AC.\nCSELECT  DC    C'SELECT'                                          .AC.\nCEXCLUDE DC    C'EXCLUDE'                                         .AC.\nCSEL     DC    C'SEL'                                             .AC.\nCNOSEL   DC    C'NOSEL'                                           .AC.\nCSPF     DC    C'SPF'                                             .AC.\nCNOSPF   DC    C'NOSPF'                                           .AC.\nCUNLOAD  DC    C'UNLOAD'                                          .AC.\nCNUNLOAD DC    C'NOUNLOAD'                                        .AC.\nCTERM    DC    C'TERM'                                            .AC.\nCACC     DC    C'ACC'                                             .AC.\nCRJE     DC    C'RJE'                                             .AC.\nCSSI2    DC    C',SSI='                                           .AC.\nCMAXLIST DC    C'MAXLIST='                                        .AC.\nCLINECNT DC    C'LINECNT='                                        .AC.\nCEROPT   DC    C'EROPT='                                          .AC.\nCMEMBER  DC    C'0MEMBER='                                        .AC.\nCPL1     DC    C'PL1(  ,'                                         .AC.\nCUNKNOWN DC    CL8'????????'                                      .AC.\nCOMMENT  DC    CL8'********'                                      .AC.\nX0100    DC    X'0100'                                            .AC.\nF1000    DC    F'1000'                                            .AC.\nMTHS1    DC    A(MONTHS1)                                         .AC.\nMTHS2    DC    A(MONTHS2)                                         .AC.\nMTHS3    DC    A(MONTHS3)                                         .AC.\nAWORK2   DC    A(WORK2)                                           .AC.\n*NDLRECL DC    H'0'                LARGEST LRECL OF SYSLIB        .AC.\n*NDBLKSI DC    H'0'                LARGEST BLKSIZE OF SYSLIB      .AC.\nX001F    DC    X'0000001F'                                        .AC.\nX000F    DC    X'0000000F'                                        .AC.\nX7FFF    DC    X'00007FFF'                                        .AC.\nXZERO    DC    XL5'00'                                            .AC.\nDDUNLOD  DC    CL8'UNLOAD'         UNLOAD                         .AC.\nNAME2    DC    CL8' '              ALIAS NAME\nNAME     DC    CL8' '              MEMBER NAME\nDDPRINT  DC    CL8'&DDPRINT'       SYSPRINT\nDDLIST   DC    CL8'&DDLIST'        SYSLIST\nDDPUNCH  DC    CL8'&DDPUNCH'       SYSPUNCH\nDDLIB    DC    CL8'&DDLIB'         SYSLIB\nDDIN     DC    CL8'&DDIN'          SYSIN\nSWAX     DC    B'&A(1)&A(2)&A(3)&A(4)&A(5)&A(6)&A(7)&A(8)'\nSWBX     DC    B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'\nSWEX     DC    B'&E(1)&E(2)&E(3)&E(4)&E(5)&E(6)&E(7)&E(8)'        .PRC.\nUPDTE1   DC    C'./ ADD NAME='\nUPDTE2   DC    C'./ ADD SSI=00000000,NAME='\nUPDTESUB DC    C'><'                                              .PRC.\nPAT1     DC    X'4021204B202020'\nPAT2     DC    X'4020202020202120'\nPAT3     DC    X'4020204B4B4B2020'                                 .AC.\nPAT4     DC    X'40202020212040'\nJULIANS  DC    3F'0'\nCARD     DC    CL80' '\nLINE0    DC    CL133' '\nLINE1    DC    CL133' '\nLINE2    DC    CL133' '\n         DC     0D'0'\n*        LTORG\nMONTHS1  DC    Y(31,28,31,30,31,30,31,31,30,31,30,31)\nMONTHS2  DC    Y(31,29,31,30,31,30,31,31,30,31,30,31)\nMONTHS3  DC    C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\nHEAD1VER DC    C' ----------  LISTPDS  8.10  ---------- '         .AC.\nHEXTBL   DC    CL16'0123456789ABCDEF'\nHEAD1    DC    C' '                SYSPRINT HEADING\nHEAD1DAT DC    CL8' '\nHEAD1TIM DC    CL9' '\nHEAD1C1  DC    CL7' '\nHEAD1VOL DC    CL6' '\nHEAD1C2  DC    CL6' '\nHEAD1DSN DC    CL44' ',C'   '\n         ORG   *-69                                               .PRC.\nHEDD1DSN DC    CL(4+44+8+6+7)' -- '      DSN -- VOL=XXXXXX        .PRC.\nHEAD1MEM DC    CL7' '  ... MEMBER= ON SYSLIST\nHEAD1NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         DC    CL10' ',C'PAGE'\nHEAD1PAG DC    CL8' '\nHEAD1R   DC    X'F14021204B4B4B20204021204B20204B2020'\nHEAD1C1R DC    CL7' - VOL='\nHEAD1C2R DC    CL6', DSN='\nHEAD2    DC    C'1'                SYSLIST HEADING\nHEAD2DAT DC    CL8' '\nHEAD2TIM DC    CL9' ',C' - VOL='\nHEAD2VOL DC    CL6' ',C', DSN='\nHEAD2DSN DC    CL44' ',C'   '\nHEAD2MEM DC    CL7'MEMBER='  ... MEMBER= ON SYSLIST\nXEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST\n         ORG   *-84                                               .PRC.\n         DC    CL4' -- '                                          .PRC.\nHEAD2NAM DC    CL8' '  ... MEMBER NAME ON SYSLIST                 .PRC.\nHEDD2DSN DC    CL72' -- '                                         .PRC.\n         DC    CL10' ',C'PAGE'\nHEAD2PAG DC    CL8' '\n*AGEPAT  DC    X'4020202020202120'                               *.PRC.\nPAGEPAT  DC    X'4020202020202020'                                .PRC.\nCAPTIONS DC    C'-     NAME       PAGE   RECORDS    T T R C    '\nRITSCAP  DC    C' CREATED  MODIFIED  ACCESSED  ATTRIBUTES'\nUSERCAP  DC    C'USER INFORMATION (HEX)'\nSPFSCAP  DC        C'VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MOD+\n                   ID'                                            .SPF.\n*                     01.00    YY/DDD    YY/DDD HH:MM  XXXX  XXXX  XXXX\n*                USERID                                           .SPF.\nLPDS01I  DC    C'0LPDS01I  DIRECTORY I/O ERROR - '\nLPDS02I  DC    C' LPDS02I  PDS DATA READ ERROR - '\nLPDS03I  DC    C'0LPDS03I  EXECUTION ABORTED.'\nLPDS04I  DC    C'0LPDS04I  OPEN ERROR FOR '\nLPDS05I  DC    C'0LPDS05I  WARNING--PARAMETER SPECIFICATION ERROR'\nLPDS06I  DC        C'0LPDS06I  INVALID DCB SPECIFICATIONS FOR &DDLIB DD+\n               .  '\nLPDS06I0 DC    C' NOT SUPPORTED.'\nLPDS06I1 DC    C'MACHINE CONTROL CHARACTERS'\nLPDS06I2 DC    C'VARIABLE SPANNED RECORDS'\nLPDS06I3 DC    C'TRACK OVERFLOW'\nLPDS06IA DC    C'BLKSIZE INVALID.'\nLPDS06IB DC    C'INVALID RECFM.'\nLPDS07I  DC        C'0LPDS07I WARNING--RITS/CRBE/CRJE PROCESSING DELETED\n               ,  LIBRARY DCB PARMS NOT COMPATABLE.'\nLPDS08I  DC    C'0LPDS08I  ERROR--PDS DIRECTORY NOT STANDARD FORMAT.'\nLPDS09I  DC    C'0LPDS09I  UNABLE TO OPEN ',CL8' '\n         DC    C'.  OPTION DELETED.'\nLPDS09IL EQU   *-LPDS09I\nLPDS10I  DC    C'0LPDS10I  WORKAREA EXCCEEDED .. RAISE REGION'\nLPDS11I  DC    C'0LPDS11I ONLY DSORG=PS OR DSORG=PO ARE VALID'\nLPDS12I  DC    C'0LPDS12I UNLOAD DOES NOT SUPPORT LRECL=0'        .AC.\nLPDS13I  DC    C'0LPDS13I UNLOAD DOES NOT SUPPORT CONCATENDATED FILES IX\n               N SYSLIB HAS DIFFERENT LRECL'                      .AC.\nMSG1     DC    C'0*** END OF LIBRARY *** '\nMSG1A    DC    X'402020202120'\nMSG1AX   DC    C' MEMBERS PROCESSED WITH A TOTAL OF'\nMSG1B    DC    X'4020202020202120',C' RECORDS'\nMSG1L    EQU   *-MSG1\nMSG2     DC    C'0*** END OF MEMBER *** '\nMSG2A    DC    X'402020202120',C' RECORDS PROCESSED   '\nMSG2L    EQU   *-MSG2\nMSG3     DC    C'****  MEMBER NOT FOUND IN LIBRARY'\nMSG4     DC    C'****  IS AN ALIAS FOR '\nMSG5     DC    C'****  ABOVE MEMBER IS AN ALIAS FOR '\nMSG6     DC    C'0SPECIFIED PARMS --'\nMSG7     DC    C'0WORKAREA SIZE: '\nMSG7A    DC    C'XXX',C'K'\nMSG7L1   EQU   *-MSG7\n         DC    C',  NEVER USED: '\nMSG7B    DC    C'XXX',C'K'\nMSG7L2   EQU   *-MSG7\nMSG8     DC    C'-LIBRARIES:'\nMSG9     DC    C'0*** END OF SEQUENTIAL DATASET *** '\nMSG9A    DC    X'402020202120',C' RECORDS PROCESSED   '\nMSG9L    EQU   *-MSG9\nENDMSG0  DC    C'0*** END OF RUN ***   '\nENDMSG1  DC    C' LIBRARIES PROCESSED WITH A TOTAL OF '\nENDMSG1A DC    X'4020202020202120',C' RECORDS.'\nENDMSG1L EQU   *-ENDMSG1\nENDMSG2  DC    C' *** OPTIONS IN EFFECT *** '\nENDMSG3  DC    C'SPECIFIED-MEMBERS'\n         SPACE\n*---------------------------------------------------------------------*\n*        DCB'S FOR LISTPDS\n*---------------------------------------------------------------------*\n         SPACE\n         PRINT NOGEN\nUNLOAD   DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDUNLOD,EXLST=EXLSTC    .AC.\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPRINT,                +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTA\nSYSLIST  DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDLIST,                 +++++\n               RECFM=FBA,LRECL=121,EXLST=EXLSTB\nSYSPUNCH DCB   DSORG=PS,MACRF=(PM),DDNAME=&DDPUNCH,                +++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n         PRINT GEN\nSYSLIB   DCB   DSORG=PO,MACRF=(R),DDNAME=&DDLIB,EODAD=PDSEOF,      +++++\n               SYNAD=SYNERR1,NCP=1,EXLST=EXLST2\n         PRINT NOGEN\nSYSIN    DCB   DSORG=PS,MACRF=(R),DDNAME=&DDIN,EODAD=BLDSEL90,    ++++++\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n         DCBD  DSORG=(PS,PO),DEVD=(DA)\n         EJECT\nLISTPDS  CSECT ,\n         SPACE\n         EJECT\n*---------------------------------------------------------------------*\n*        DEFINE THE DSECT'S HERE\n*---------------------------------------------------------------------*\n         SPACE\nLCB      DSECT ,\nLCBDSNAM DC    CL44' '             LIBRARY'S DATASET NAME\nLCBVOLNO DC    CL6' '              LIBRARY'S VOLUME SERIAL\nLCBJFCDS DC    X'00'               JFCB DSORG\nLCBJFCRF DC    X'00'               JFCB RECFM\nLCBJFCLR DC    H'0'                JFCB LRECL\nLCBJFCBL DC    H'0'                JFCB BLKSIZE\nLCBDS1DS DC    X'00'               DSCB DSORG\nLCBDS1RF DC    X'00'               DSCB RECFM\nLCBDS1LR DC    H'0'                DSCB LRECL\nLCBDS1BL DC    H'0'                DSCB BLKSIZE\nLCBDIR   DC    H'0'                MAX DIR-BLKSIZE/TRK ON THIS VOL\nLCBEND   DC    0F'0'\nLCBLEN   EQU   LCBEND-LCB\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nDIR      DSECT\nDIRCRDCT DC    XL4'0'              RECORD COUNT\nDIRPG1   DC    H'0'                PAGE NUMBER\nDIRFLAGS DC    B'00000000'         FLAGS\n         DC    X'00'               NOT USED\nDIRUSERL DC    H'0'                LENGTH OF USER DATA\nDIRNAME  DC    CL8' '              MEMBER NAME\nDIRTTR   DC    XL4'0'\nDIRUSER  DS    0H\nDIREND   DS    0H\nDIRLEN   EQU   *-DIR   ... PLUS LEN OF 'USER DATA'\n         SPACE\n*---------------------------------------------------------------------*\n         SPACE\nNAMTBL   DSECT\nNAMTBL1  DC    CL8' '\nNAMTBL2  DC    A(*-*)\nNAMTBL3  DC    F'0'\nNAMTBL4  DC    H'0'\nNAMTBL5  DC    H'0'\nNAMTBLXX EQU   *-NAMTBL\n         SPACE\n         DC    0D'0'\n         END   LISTPDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOAD": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01 \\x00o\\x01 \\x00o\\x16\\x08-\\xea-\\xea\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-01-06T00:00:00", "modifydate": "2020-01-06T16:08:03", "lines": 11754, "newlines": 11754, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LOAD$": {"ttr": 7939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00 \\x01\\x14(\\x7f\\x01\\x14(\\x7f\\x118\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2014-10-14T00:00:00", "modifydate": "2014-10-14T11:38:20", "lines": 14, "newlines": 14, "modlines": 0, "user": "JCL"}, "text": "//XXXXXXXJ JOB XXX,'LOAD$',CLASS=A,REGION=8M,\n//         MSGCLASS=X,MSGLEVEL=(1,1),NOTIFY=&SYSUID\n//***************************************************************\n//***************RESTORE LOADLIB DATASET    *********************\n//***************************************************************\n//RESTORE  EXEC PGM=IKJEFT01,DYNAMNBR=30\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD *\n  PROFILE NOPREFIX\n  RECEIVE USERID(YOURID) INDSN(YOURID.CBT489.FILE612(LOAD))\n  DSNAME(YOUR.FILE612.LOADLIB)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCATE": {"ttr": 7941, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x10\\x01\\x195\\x9f\\x01\\x195\\x9f#B\\x02\\x92\\x02\\x92\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-25T00:00:00", "modifydate": "2019-12-25T23:42:10", "lines": 658, "newlines": 658, "modlines": 0, "user": "ASM"}, "text": "***********************************************************************\n*\n*        LOCATE IS A TSO COMMAND PROCESSOR USED TO LOCATE A NAMED\n*        COMMAND IN EITHER THE F/MLPA, LPA, TASKLIB, LINK LIST,\n*        SYSEXEC AND SYSPROC.\n*        RELEVANT INFORMATION AND LOCATION IS DISPLAYED TO THE USER.\n*        SEARCH SEQUENCE IN ISPF\n*               - JPA (JOB PACK AREA)\n*               - LIBDEF ISPLLIB\n*               - ISPLLIB\n*               - TASKLIB         IE. TSOLIB ACT DA(XXXX)\n*               - STEPLIB\n*               - F/MLPA\n*               - PLPA              LPALST DSNAME\n*               - DYNAMIC LINKLIST\n*               - NUCLEUS\n*               - USER SYSUEXEC/SYSUPROC\n*               - APPLICATION EXEC/CLIST\n*               - SYSEXEC/SYSPROC\n*\n*        SEARCH SEQUENCE IN NATIVE TSO MODE\n*               - JPA (JOB PACK AREA)\n*               - TASKLIB           IE. TSOLIB ACT DA(XXXX)\n*               - STEPLIB\n*               - F/MLPA\n*               - PLPA              LPALST DSNAME\n*               - DYNAMIC LINKLIST\n*               - NUCLEUS\n*               - USER SYSUEXEC/SYSUPROC\n*               - APPLICATION EXEC/CLIST\n*               - SYSEXEC/SYSPROC\n*\n*   NOTE: 1) IT SUPPORT APPLICATION LEVEL STACKED EXEC AND CLIST\n*            WITH BEST EFFORT\n*         2) IT DOES NOT SEARCH STACKED ISPLLIB\n*         3) IF SYSEXEC IS DEACTIVATED, FINDCMD CANNOT FUNCTION\n*            PROPERLY AS CONTROL BLOCK ALTLIB TABLE DOES NOT\n*            EXIST\n*\n*   REGISTER USAGE\n*         R5    -  NOT IN USE\n*         R6    -  NOT IN USE\n*         R8    -  NOT IN USE\n*         R10   -  UPT\n*         R11   -  ECT\n*         R12   -  PROGRAM BASE REGISTER\n*   MACROS\n*         BLDL     - BUILD DIRECTORY LIST\n*         CLOSE    - CLOSE FILE\n*         CSVQUERY - CONTENT SUPERVISOR QUERY SERVICE\n*         CSVDYNL  - DYNAMIC LINKLIST SERVICE\n*         EXTRACT  - EXTRACT TIOT\n*         LINK     - LINK\n*         NUCLKUP  - NUCLEUS MAP LOOKUP SERVICE\n*         OPEN     - OPEN FILE\n*         PUTLINE  - TSO DISPLAY SERVICE\n*         SWAREQ   - SWA MANAGER\n*\n*\n*   ENHANCEMENT:\n*        IF THE LOAD MODULE IS FOUND ON THE LINKLIST, THE DSN IS ALSO\n*        DISPLAYED                        ALBERT CHENG 14 SEP 1990\n*        SEARCH NUCLEUS MAP IF THE MODULE DOES NOT EXIST AT LINKLIST\n*        OR LPA. FIX THE BUG OF DISPLAYING F/MLPA.\n*                                         ALBERT CHENG 02 NOV 1990\n*\n*        DISPLAY THE LOAD ADDRESS AND IN-USE COUNT IF THE LOAD MODULE\n*        IS FOUND AT JPA.\n*                                         ALBERT CHENG 30 JUN 1992\n*  @01   SUPPORT OS/390 DYNAMIC LNKLST. MACRO CSVDYNL REQUIRES TO\n*        SAVE AT APF LIBRARIES. IT EXECUTES MODESET MACRO HECNE IT\n*        MUST LINK-EDIT WITH AUTH=1 AND REGISTER LOCATE COMMAND\n*        AT PARMLIB MEMBER IKJTSO00.\n*\n*        AUTHCMD NAMES(          /* AUTHORIZED COMMANDS     */   +\n*                       LOCATE   /* IN-HOUSE UTILITY LOCATE */   +\n*                              )\n*                                         ALBERT CHENG 03 NOV 2000\n*\n*\n*  @02   REPLACE TPUT WITH PUTLINE AND THE LOCATE\n*        COMMAND CAN INVOKE AT BATCH MODE           AC 18 DEC 2009\n*\n*  @03   TURN OFF HIGH ORDER BIT OF NUCLEUS MODULE\n*        DISPLAY THE LENGTH OF THE NUCLUES MODULE   AC 20 AUG 2013\n*\n*  @04   GET RID OF MACRO $PROLOG AND $EPILOG\n*                                         ALBERT CHENG 25 SEP 2014\n*  @05   A) IF THE MODULE IS IN LPA. CALL REXX ALOCLPA TO\n*           ALLOCATE LPALIB, THEN DISPLAY THE SOURCE LPA DSNAME.\n*        B) CALL REXX CHKMEM TO VERIFY WHETHER THE MEMBER EXIST IN\n*           STEPLIB. IF THE MODULE EXISTS IN STEPLIB, DISPLAY THE\n*           STEPLIB DSNAME, OTHERWISR DISPLAY THE ISPLLIB DSNAME.\n*                                         ALBERT CHENG 21 OCT 2014\n*\n*  @06   DEFINE RACF FACILITY PROFILE CSVDYNL.*.TEST\n*        CLASS      NAME\n*        -----      ----\n*        FACILITY   CSVDYNL.*.TEST (G)\n*\n*        RDEF FACILITY CSVDYNL.*.TEST UACC(READ)\n*        SETROPTS RACLIST(FACILITY) REFRESH\n*\n*        LOCATE IS NO NEED TO DEFINE AS AUTHORISED COMMAND IN\n*        IKJTSO00. YOU MUST HAVE READ ACCESS RIGHT OF THE ABOVE\n*        RACF PROFILE. LINK-EDIT LOCATE WITH AC=0.\n*                                         ALBERT CHENG 12 NOV 2014\n*\n*  @07   IF THE MODULE RESIDES IN LIBDEF ISPLLIB LIBRARIES,\n*        DISPLAY THE DSNAME OF LIBDEF ISPLLIB.\n*                                         ALBERT CHENG 10 DEC 2014\n*\n*  @08   A) IF THE COMMAND ARE NOT FOUND IN LOAD LIBRARIES, SEARCH\n*           USER LEVEL SYSEXEC, USER LEVEL SYSPROC,\n*           APPLICATION LEVEL SYSUEXEC AND SYSUPROC,\n*           SYSEXEC AND SYSPROC.\n*        B) CALL SUB PROGRAM LPALIB TO LOCATE LPA MODULE FROM\n*           LPA LIBRARIES.\n*        C) REMOVE THE REFERENCE OF REXX ALOCLPA AND CHKMEM\n*        D) ADD ALIAS FINDCMD TO SEARCH EXEC AND CLIST LIBRARIES\n*           ONLY.\n*        E) ADD ALIAS FINDPRG TO SEARCH TASKLIB/LPA/LINKLST LIBARIES\n*           ONLY.\n*        F) USE CSVQUERY TO LOCATE MODULE IN LINK PACK AREA\n*                                         ALBERT CHENG 05 JAN 2015\n***********************************************************************\n         PUNCH ' ALIAS FINDCMD'                                    @08A 00003\n         PUNCH ' ALIAS FINDPRG'                                    @08A 00003\nLOCATE   CSECT                                                     @05A\n         BAKR  R14,0             SAVE REGISTERS INTO LINKAGE STACK @04C\n         J     START                  BRANCH AROUND MODULE         @07A\n         DC    C'LOCATE.V08'           DESCRIPTION AND VERSION NO. @08C\n         DC    C'&SYSDATE &SYSTIME'   ASSEMBLE DATE AND TIME       @07A\nSTART    DS    0H                                                  @08C\n         LR    R12,R15                                             @04A\n         USING LOCATE,R12             ESTABLISH PROGRAM BASE REG   @04A\n         MVC   CMDUPT,CPPLUPT-CPPL(R1)  COPY UPT ADDRESS\n         MVC   CMDECT,CPPLECT-CPPL(R1)  COPY ECT ADDRESS\n         L     R10,CPPLUPT-CPPL(,R1)                               @02A\n         L     R11,CPPLECT-CPPL(,R1)                               @02A\n         MVC   CMDCBUF,CPPLCBUF-CPPL(R1) COPY ADDRESS OF COMMAND BUF\n         LA    R1,CMDUPT                 PROVIDE LIST FOR PARSE\n         LINK  EP=IKJPARS                PARSE COMMAND\n         L     R2,CMDANSR                GET POINTER TO ANSWER AREA\n         L     R1,IKJOPT-IKJPARMD(,R2)   GET POINTER TO OPERAND\n         LH    R2,IKJOPT+4-IKJPARMD(,R2) GET SIZE OF OPERAND\n         BCTR  R2,R0                  DECREMENT R2 FOR EXECUTE MOVE\n         EX    R2,MOVENAME            MOVE TO LIST FOR LOAD\n         MVC   BLDLNAME(8),NAME       MOVE NAME TO BLDL LIST\n         MVC   MSG4NAME(8),NAME       MOVE NAME TO MSG2\n         EXTRACT TIOTADR,FIELDS=(TIOT) EXTRACT THE ADDRESS OF TIOT @05A\n         CLC   CFINDCMD,ECTPCMD-ECT(R11)                           @08A\n         JE    FINDCMD                                             @08A\n         L     R3,PSATOLD-PSA(,0)      CURRENT TCB X'21C'\n         L     R3,TCBJSTCB-TCB(,R3)    LOAD JSTCB\n*----------------------------------------------------------------\n* LOCATE THE MODULE IN JPA\n*----------------------------------------------------------------\nTCBLOOP  SR    R15,R15                 CLEAR FOR ICM INSTRUCTION\n         ICM   R15,7,TCBJPQB-TCB(R3)   LOAD JOB PACK QUEUE\n         JZ    NEXTTCB                 NO, SEARCH THE MLPA/FLPA\n         J     FIRSTJPA\nNEXTJPA  ICM   R15,15,CDCHAIN-CDENTRY(R15) 1ST CDE ON THE QUEUE\n         JZ    NEXTTCB                     NO, SEARCH THE MLPA/FLPA\nFIRSTJPA CLC   NAME,CDNAME-CDENTRY(R15)    NAMES EQUAL?\n         JNE   NEXTJPA                     BRANCH IF NOT FOUND\n         XC    PRETCODE,PRETCODE           INDICATE MODULE FOUND\n         TM    CDATTR-CDENTRY(R15),CDMIN   MINOR CDE?\n         JZ    CDEMAJ1                     NO, CONTINUE\n         MVC   JPATRUE,CDNAME-CDENTRY(R15) COPY TRUE NAME\n         L     R15,CDXLMJP-CDENTRY(,R15)   LOCATE MAJOR CDE\nCDEMAJ1  DS    0H\n         MVC   JPANAME,CDNAME-CDENTRY(R15) COPY MODULE NAME\n         UNPK  JPAADR(9),CDENTPT-CDENTRY(5,R15)  UNPACK FOR PRINT\n         TR    JPAADR(8),TRTABLE-240  MAKE PRINTABLE\n         MVI   JPAADR+8,C' '          CLEAR GARBAGE FROM UNPACK\n         UNPK  JPAUSE(5),CDUSE-CDENTRY(3,R15)   UNPACK FOR PRINT\n         TR    JPAUSE(4),TRTABLE-240  MAKE PRINTABLE\n         MVI   JPAUSE+5,C' '          CLEAR GARBAGE FROM UNPACK\n         CLI   JPATRUE,C' '           ALIAS NAME EXIST ??\n         JNE   CDEMIN1                BRANCH IF YES\n         MVC   TEXT(LMSG1),MSG1       DISPLAY MAJOR NAME           @02C\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X\n               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A\n         J     TASKLIB                SCAN TASKLIB                 @08C\nCDEMIN1  MVC   TEXT(LMSG1A),MSG1      DISPLAY MAJOR AND MINOR NAME @02C\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X\n               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A\nNEXTTCB  ICM   R3,15,TCBNTC-TCB(R3)\n         JNZ   TCBLOOP\n*----------------------------------------------------------------\n* LOCATE THE MODULE IN ISPLLIB, TASKLIB AND STEPLIB\n* 1) IF ISPF IS ACTIVE\n*    A) SEARCH TOS TO GET ISPLLIB LIBDEF DSNAME\n*    B) SEARCH ISPLLIB\n* 2) SEARCH TSOLIB TABLE TO GET THE TASKLIB DDNAME\n* 3) SEARCH STEPLIB\n*----------------------------------------------------------------\nTASKLIB  BLDL  0,LIST            LOCATE MODULE IN ISPLLIB/STEPLIB\n         LTR   R15,R15                        CHECK RETURN CODE\n         JNZ   LPAQ                           BRANCH IF NOT FOUND  @08C\n         TM    BLDLC,X'80'                    IS THIS AN ALIAS?    @08C\n         JZ    NOTALIAS                       NO, MAJOR NAME\n         MVC   MODTYPE(L'CMINOR),CMINOR       INDICATE MODULE TYPE\nNOTALIAS CLI   BLDLZ,X'01'                    LINKLIST LIBRARY?\n         JE    LPAQ                    BRANCH IF IN DYNAMIC LINK LIB\nISPFCHK  DS    0H                                                  @05C\n         MVC   LIBTYPE(L'CJOBSTEP),CJOBSTEP   MODIFY MESSAGE TEXT\n         L     R15,VISPQRY             TEST FOR                    @05A\n         BALR  R14,R15                   ISPF ENVIRONMENT          @05A\n         LTR   R15,R15                     IS ACTIVE               @05A\n         JZ    ISPMAIN                 BRANCH IF ISPF IS ACTIVE    @08C\n         MVI   CISPLLIB,X'FF'          MARK ISPLLIB INACTIVE       @08C\n         J     TSKLIBDD                BRANCH IF ISPF IS ACTIVE    @08C\nISPMAIN  L     R1,PSATOLD-PSA(,0)      CURRENT TCB X'21C'          @07A\n         L     R1,TCBOTC-TCB(,R1)      GET MOTHER TCB              @08A\n         L     R15,TCBGRS9-TCB(,R1)    TCB R9 --> TLD              @07A\n         CLC   CTLD,0(R15)             CHECK TLD ACRONYM           @08A\n         JE    ISPLLIB                 BRANCH IF IT IS TLD         @08A\n         MVC   LIBTYPE(L'CTASKLIB),CTASKLIB                        @08A\n         J     DISPLAY                 ???                         @08A\nISPLLIB  L     R15,X'7C'(,R15)         APPLICATION DATA            @07A\n         ICM   R15,15,X'48'(R15)       ISPLLIB TOS                 @08C\n         JZ    TSKLIBDD                BRANCH IF NO LIBDEF ISPLLIB @08A\n         CLC   CTOS,0(R15)             CHECK TOS ACRONYM           @08A\n         JNE   TSKLIBDD                BRANCH IF NOT MATCH         @08A\n         MVC   CLIBDEF(8),X'BC'(R15)   GET ISPLLIB LIBDEF DDNAME   @08A\nTSKLIBDD L     R1,PSAAOLD-PSA(,R0)     HOME ASCB X'224'            @08A\n         L     R1,ASCBASXB-ASCB(,R1)   ASXB  X'6C'                 @08A\n         SAM31                         SWITCH TO 31 BIT ADDRESSING @08A\n         L     R9,ASXBLWA-ASXB(,R1)    LWA   X'14'                 @08A\n         ICM   R1,15,LWADYSEG-LWA(R9)  LWADYSEG IKJDYSEG X'26C'    @08A\n         JZ    SRCTKLIB                BRANCH IF ZERO              @08A\n         ICM   R1,15,24(R1)            TSOLIB DDN TABLE            @08A\n         JZ    SRCTKLIB                BRANCH IF ZERO              @08A\n         MVC   CTASKDDN(8),20(R1)      GET TASKLIB DDNAME          @08A\nSRCTKLIB LA    R3,CLIBDEF              LOCATE FIRST TABLE ENTRY    @08A\n         BRAS  R7,GRPSRCH              LOCATE MEMBER               @08A\n*----------------------------------------------------------------\n* LOCATE THE MODULE IN F/M/PLPA\n*----------------------------------------------------------------\nLPAQ     CSVQUERY INEPNAME=BLDLNAME,                                   X\n               SEARCH=LPA,                                             X\n               OUTATTR3=CSVATTR3,                                      X\n               OUTLENGTH=CSVMLEN,                                      X\n               OUTEPA=CSVEPA,                                          X\n               OUTEPNM=NAME,                                           X\n               OUTMJNM=TRUENM\n         LTR   R15,R15                     BRANCH IF THE MODULE    @08A\n         JNZ   DYNAMIC                      DOES NOT EXIST IN LPA  @08A\nLPTRUE   UNPK  LENGTH(7),CSVMLEN+1(4)      UNPACK LENGTH FOR PRINT @08C\n         TR    LENGTH(6),TRTABLE-240       MAKE PRINTABLE\n         MVI   LENGTH+6,C' '               CLEAR GARBAGE FROM UNPACK\n         UNPK  ADDRESS(9),CSVEPA(5)        UNPACK ADDRESS FOR PRINT@08C\n         TR    ADDRESS(8),TRTABLE-240      MAKE PRINTABLE\n         MVI   ADDRESS+8,C' '              CLEAR GARBAGE FROM UNPACK\n         TM    CSVATTR3,X'20'              PLPA ?                  @08A\n         JO    LPAMSG                                              @08A\n         MVI   LPATYPE,C'M'                                        @08A\n         TM    CSVATTR3,X'10'              MLPA ?                  @08A\n         JO    LPAMSG                                              @08A\n         MVI   LPATYPE,C'F'                                        @08A\n         TM    CSVATTR3,X'08'              FLPA ?                  @08A\n         JO    LPAMSG                                              @08A\n         MVC   LPATYPE(4),CCSA                                     @08A\n         TM    CSVATTR3,X'04'              CSA ?                   @08A\n         JO    LPAMSG                                              @08A\n         MVC   LPATYPE(4),UNKNOWN      SET TO UNKNOWN TYPE         @08A\nLPAMSG   CLC   NAME,TRUENM             IS THIS AN ALIAS?           @08C\n         JNE   TALIAS                  YES, ISSUE ALIAS TPUT\n         MVC   TEXT(LMSG5),MSG5        MESSAGE WITHOUT ALIAS NAME  @02C\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X\n               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A\n         J     GETLPADS                                            @05A\nTALIAS   MVC   TEXT(LMSG5A),MSG5       MESSAGE WITH ALIAS NAME     @02C\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X\n               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A\nGETLPADS DS    0H                                                  @05A\n         XC    PRETCODE,PRETCODE       INDICATE MODULE FOUND       @08A\n         LA    R1,BLDLNAME                                         @08A\n         LA    R2,LPADSN                                           @08A\n         L     R15,VLPALIB             CALL SUBPROGRAM LPALIB TO   @08A\n         BALR  R14,R15                 EXTRACT LPA DSNAME          @08A\n         LTR   R15,R15                 RC = 0 ?                    @05A\n         JNZ   DYNAMIC                 BRANCH IF RC IS NON ZERO    @05C\n         MVC   TEXT(LMSG6A),MSG6       DISPLAY LPA DSNAME          @05A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X\n               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A\n*----------------------------------------------------------------\n* LOCATE THE MODULE IN DYNAMIC LINKLIST\n*----------------------------------------------------------------\nDYNAMIC  DS    0H                     HANDLE DYNAMIC LINKLIST      @01A\n         CSVDYNL REQUEST=TEST,LNKLSTNAME=LSTNAME,                      X\n               FOUNDDSNAME=DSN,MODNAME=BLDLNAME\n         LTR   R15,R15\n         JNZ   NUCLEUS\n         MVC   LIBTYPE(L'CDYNLNK),CDYNLNK     MODIFY MESSAGE TEXT  @01A\n         JZ    DISPLAY\n*----------------------------------------------------------------\n* LOCATE THE MODULE IN NUCLEUS\n*----------------------------------------------------------------\nNUCLEUS  DS    0H\n         LA    R1,BLDLNAME             POINT TO MODULE/COMMAND NAME\n         NUCLKUP NAME=(1),ADDR=(3)     INVOKE NUCLEUS MAP LOOKUP SRV\n         LTR   R15,R15                 RC = 0 ?\n         JNZ   FINDCMD                 BRANCH IF NOT FND IN NUCLEUS@08C\n         NILH  R3,X'7FFF'              TURN OFF HIGH ORDER BIT     @03A\n         ST    R3,DBLWD\n         UNPK  NADDRESS(9),DBLWD(5)    UNPACK ADDRESS FOR PRINT\n         TR    NADDRESS(8),TRTABLE-240 MAKE PRINTABLE\n         MVI   NADDRESS+8,C' '         CLEAR GARBAGE FROM UNPACK\n         ST    R1,DBLWD                                            @03A\n         UNPK  NLEN(9),DBLWD(5)        UNPACK ADDRESS FOR PRINT    @03A\n         TR    NLEN(8),TRTABLE-240     MAKE PRINTABLE              @03A\n         MVI   NLEN+8,C' '             CLEAR GARBAGE FROM UNPACK   @03A\n         MVC   MSG3NAME,BLDLNAME       COPY MODULE/COMMAND\n         MVC   TEXT(LMSG9),MSG9            DISPLAY NUCLUES MODULE  @02C\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X\n               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A\n         J     RETURN\n*----------------------------------------------------------------- @08A\n* LOCATE A COMMAND FROM SYSEXEC AND SYSPROC                        @08A\n*----------------------------------------------------------------- @08A\nFINDCMD  DS    0H                                                  @08A\n         CLC   CFINDPRG,ECTPCMD-ECT(R11)  FINDPRG COMMAND ?        @08A\n         JE    EXIT                    BRANCH IF YES               @08A\n         SAM31                         SWITCH TO 31 BIT ADDRESSING @08A\n         L     R15,ECTEXTPR-ECT(,R11)  ECT EXTENSION BLOCK X'34'   @08A\n         ICM   R3,15,36(R15)           ALTLIB TABLE X'24'          @08A\n         JZ    SYSEXEC                 BRANCH IF NO ALTLIB         @08A\n*        JZ    DEBUG1               BRANCH NO APPL EXEC/CLIST      @08A\n*----------------------------------------------------------------- @08A\n* VERIFY WHETHER SYSUEXEC AND SYSUPROC IF ACTIVE OR NOT            @08A\n* R3 = ANCHOR OF ALTLIB TABLE                                      @08A\n*----------------------------------------------------------------- @08A\n         TM    24(R3),X'80'          SYSUEXEC                      @08A\n         JNO   CHKUPROC              BRANCH IF NOT SYSUEXEC        @08A\n         MVC   CUEXEC(8),CUEXEC+8    ENABLE SYSUEXEC SEARCHING     @08A\nCHKUPROC TM    24(R3),X'40'          SYSUPROC                      @08A\n         JNO   ALTLIB                BRANCH IF NOT SYSUEXEC        @08A\n         MVC   CUPROC(8),CUPROC+8    ENABLE SYSUPROC SEARCHING     @08A\n*----------------------------------------------------------------- @08A\n* GET APPLICATION LEVEL CLIST FROM ALTLIB TABLE                    @08A\n* NOTE : THE NUMBER OF APPLICATION LEVEL CLIST MAY BE MORE THAN    @08A\n*        TWO AND LOCATE ONLY SEARCH THE FIRST 2 CLIST DDNAME       @08A\n*----------------------------------------------------------------- @08A\nALTLIB   CLI   31(R3),X'01'                                        @08A\n         JE    APLSPROC             BRANCH IF ONLY 1 CLIST         @08A\n         CLI   31(R3),X'00'                                        @08A\n         JE    APLEXEC              BRANCH IF NO CLIST             @08A\n         SR    R2,R2                                               @08A\n         IC    R2,31(R3)            LOAD NO. OF APPL LEVEL CLIST   @08A\n         BCTR  R2,0                 MINUS 1                        @08A\n         SLA   R2,3                 R2 = R2 * 8                    @08A\n         LA    R1,0(R2,R3)                                         @08A\n         MVC   CAPLPROC(8),128(R1)  ENABLE SEARCH APPL CLIST       @08A\n         MVC   CAPLPROS(8),120(R1)  ENABLE SEARCH APPL CLIST STACK @08A\n         J     APLEXEC                                             @08A\nAPLSPROC MVC   CAPLPROC(8),128(R3)   ENABLE SEARCH APPL CLIST      @08A\n*----------------------------------------------------------------- @08A\n* GET APPLICATION LEVEL EXEC FROM ALTLIB TABLE                     @08A\n* NOTE : THE NUMBER OF APPLICATION LEVEL EXEC MAY BE MORE THAN     @08A\n*        TWO AND LOCATE ONLY SEARCH THE FIRST 2 EXEC DDNAME        @08A\n*----------------------------------------------------------------- @08A\nAPLEXEC  CLI   29(R3),X'00'                                        @08A\n         JE    ASYSEXEC             BRANCH IF NO APPL LEVEL EXEC   @08A\n         CLI   29(R3),X'01'                                        @08A\n         JE    APLEXES              BRANCH IF ONLY 1 APPL LEVEL EXE@08A\n         SR    R2,R2                                               @08A\n         IC    R2,29(R3)            LOAD NO. OF APPL LEVEL EXEC    @08A\n         BCTR  R2,0                 MINUS 1                        @08A\n         SLA   R2,3                 R2 = R2 * 8                    @08A\n         LA    R1,0(R2,R3)                                         @08A\n         MVC   CAPLEXEC(8),32(R1)   ENABLE SEARCH APPL EXEC        @08A\n         MVC   CAPLEXES(8),24(R3)   ENABLE SEARCH APPL EXEC STACK  @08A\n         J     ASYSEXEC                                            @08A\nAPLEXES  MVC   CAPLEXEC(8),32(R3)        ENABLE SEARCH APPL EXEC   @08A\nASYSEXEC TM    24(R3),X'20'              SEARCHDD(NO)              @08A\n         JO    ASYSPROC                  BRANCH IF YES             @08A\n         MVC   CSYSEXEC(8),CSYSEXEC+8    ENABLE SEARCH SYSEXEC     @08A\nASYSPROC TM    24(R3),X'08'              SYSPROC                   @08A\n         JNO   SRCHPROC                  BRANCH IF DISABLE         @08A\n         MVC   CSYSPROC(8),CSYSPROC+8    ENABLE SEARCH SYSPROC     @08A\n         J     SRCHPROC                  BRANCH IF SEARCHDD = NO   @08A\n*DEBUG1  TPUT  EMSG7,L'EMSG7                                       @08A\nSYSEXEC  ICM   R15,15,ECTENVBK-ECT(R11)  REXX ENVIRONMENT BLOCK    @08A\n         JZ    SYSPROC                   BRANCH IF NO IRXENVB      @08A\n         L     R15,52(,R11)              ECTEXT                    @08A\n         TM    60(R15),X'80'                                       @08A\n         JNZ   SYSPROC                   BRANCH IF SEARCHDD(NO)    @08A\n         MVC   CSYSEXEC(8),CSYSEXEC+8    ENABLE SEARCH SYSEXEC     @08A\nSYSPROC  MVC   CSYSPROC(8),CSYSPROC+8    ENABLE SEARCH SYSPROC     @08A\n*        TPUT  CAPLPROC,80\n*----------------------------------------------------------------- @08A\n* SEARCH MEMBER IN THE FOLLOWING SEQUENCE                          @08A\n*      1 USER LEVEL EXEC           SYSUEXEC                        @08A\n*      2 USER LEVEL CLIST          SYSUPROC                        @08A\n*      3 APPLICATION LEVEL EXEC                                    @08A\n*      4 STACK APPLICATION LEVEL EXEC                              @08A\n*      5 APPLICATION LEVEL CLIST                                   @08A\n*      6 STACK APPLICATION LEVEL CLIST                             @08A\n*      7 SYSTEM LEVEL EXEC         SYSEXEC                         @08A\n*      8 SYSTEM LEVEL CLIST        SYSPROC                         @08A\n*----------------------------------------------------------------- @08A\nSRCHPROC LA    R3,CUEXEC               GET FIRST TABLE ENTRY       @08A\n         BRAS  R7,GRPSRCH              LOCATE MEMBER               @08A\nDISPLAY  CLI   LIBTYPE,C' '            NOT FIND IN LOAD LIBRARIES  @08A\n         JE    EXIT                    BRANCH IF YES               @08A\n         MVC   TEXT(LMSG4),MSG4        DISPLAY MSG4                @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X\n               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A\n         XC    PRETCODE,PRETCODE       INDICATE MODULE FOUND       @05A\nEXIT     OC    PRETCODE,PRETCODE   ANY MESSAGE ISSUED (MODULE FOUND)\n         JZ    RETURN                  YES, ALL DONE\n         MVC   TEXT(LMSG8),MSG8        DISPLAY MSG8                @08A\n         CLC   CFINDCMD,ECTPCMD-ECT(R11)  COMMAND IS FINDCMD ?     @08A\n         JE    NOTFNDMG                BRANCH IF YES               @08A\n         MVC   TEXT(LMSG0),MSG0        DISPLAY MSG0                @02C\nNOTFNDMG PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),ECB=ECBADS,           X\n               OUTPUT=(TEXTADS,TERM,SINGLE,DATA),MF=(E,IOPLADS)    @05A\nRETURN   IKJRLSA CMDANSR               RELEASE PARSE STORAGE\n         L     R15,PRETCODE            SET RETURN CODE\n         PR                            RETURN TO TSO               @04C\n*----------------------------------------------------------------- @08A\n* LOCATE MEMBER FROM DDNAME TABLE                                  @08A\n*----------------------------------------------------------------- @08A\nGRPSRCH  SAM24                         SWITCH TO 24 BIT ADDRESSING @08A\nPROCSRCH CLI   0(R3),X'FF'                                         @08A\n         JE    NEXTENTR                SKIP IF INACTIVE ENTRY      @08A\n         MVC   SRCHDDN,0(R3)           GET DDNAME                  @08A\n         BRAS  R14,SRCTMPRC            LOCATE THE MEMBER           @08A\n         LTR   R15,R15                 RC = 0 ?                    @08A\n         JNZ   NEXTENTR                BRANCH IF MEMBER FIND       @08A\n         MVC   LIBTYPE(8),8(R3)        GET DDNAME TYPE             @08A\n         J     DISPLAY                 DISPLAY MSG4                @08A\nNEXTENTR AHI   R3,16                   BUMP TO NEXT ENTRY          @08A\n         CLI   0(R3),C' '              END OF TABLE ?              @08A\n         JNE   PROCSRCH                NEXT TABLE ENTRY            @08A\n         BR    R7                      RETURN                      @08A\n*----------------------------------------------------------------- @08A\n* LOCATE MEMBER IN TEMPDD DIRECTORY                                @08A\n*----------------------------------------------------------------- @08A\nSRCTMPRC BAKR  R14,0               SAVE REGISTERS TO LINKAGE STACK @08A\n         MVC   TEMPDD+40(8),SRCHDDN    UPDATE TEMPDD DDNAME        @08A\n*----------------------------------------------------------------- @08A\n*  LOCATE DDNAME TIOT ENTRY                                        @08A\n*----------------------------------------------------------------- @08A\nLOCDDN   DS    0H                    EXTRACT DSNAME FROM JFCB      @05A\n         L     R1,TIOTADR            GET TIOT ADDRESS              @05A\n         AHI   R1,24                 LOCATE THE FIRST TIOT ENTRIES @05A\nNEXTIOT  CLC   SRCHDDN,4(R1)         DDNAME FOUND ??               @05A\n         JE    DDNFIND               BRANCH IF YES                 @05A\n         CLI   0(R1),X'00'           END OF TIOT ??                @05A\n         JE    PROC3                 BRANCH IF END OF TIOT         @08A\n         AHI   R1,20                 ADD LENGTH OF TIOT ENTRY      @05A\n         J     NEXTIOT               NEXT TIOT ENTRY               @05A\nDDNFIND  ST    R1,TIOTCUR              SAVE TIOT CURRENT ENTRY     @08A\n         OPEN  (TEMPDD,(INPUT))        OPEN TEMPDD                 @08A\n         LTR   R15,R15                 RC = 0 ?                    @08A\n         JNZ   PROC3                   BRANCH IF OPEN ERROR        @08A\n         BLDL  TEMPDD,LIST        LOCATE MEMBER IN TEMPDD LIBRARY  @08A\n         LTR   R15,R15                 CHECK RETURN CODE           @08A\n         JNZ   PROC2                   NOT FOUND IN TEMPDD LIBRARY @08A\n*-----------------------------------------------------------------\n*  GET DSNAME FROM TIOT JFCB TOKEN\n*------------------------------------------------------------------\n         L     R1,TIOTCUR            RESTORE TIOT ENTRY            @08A\n         CLI   BLDLK,X'00'           ANY CONCATENATION ?           @05A\n         JE    GETDSNM               BRANCH IF NO CONCATENATION    @05A\n         SR    R2,R2                 CLEAR FOR IC INSTRUCTION      @08A\n         IC    R2,BLDLK              PICK UP CONCATENATION NUMBER  @08A\nNEXTIOT2 AHI   R1,20                 BUMP TO NEXT TIOT ENTRY       @05A\n         CLI   4(R1),C' '            NEW DDNAME ?                  @05A\n         JNE   PROC2                 BRANCH IF NEW DDNAME          @08A\n         BRCT  R2,NEXTIOT2           DO UNTIL BLDLK = 0            @05A\nGETDSNM  MVC   SW_EPA+4(4),12(R1)    GET JFCB TOKEN                @05A\n         L     R4,SWAPAPTR                                         @05A\n         USING ZB505,R4           ESTABLISH ADDRESSABILITY TO EPA  @05A\n         SAM31                         SWITCH TO 31 BIT ADDRESS    @05A\n*  USE SWAREQ TO GET THE SWA WORK AREA ABOUT 16MB LINE (SWA=ABOVE) @05A\n         SWAREQ FCODE=RL,EPA=SWAPAPTR,UNAUTH=YES,MF=(E,SWAPARMS)   @05A\n         LTR   R15,R15                 RC = 0 ?                    @05A\n         JNZ   PROC2                   BRANCH IF RC IS NOT ZERO    @08A\n         L     R4,SW_EPA               POINTS TO JFCB              @05A\n         MVC   TEMPNAME,0(R4)          JFCBDSNM                    @05A\n         SAM24                         SWITCH TO 24 BIT ADDRESSING @05A\n         MVC   LIBTYPE(8),SRCHDDN                                  @08A\n         MVC   LIBTYPE+9(40),TEMPNAME  JFCBDSNM                    @08A\n         XC    PRETCODE,PRETCODE       TURN ON FIND SWITCH         @08A\n         CLOSE TEMPDD                                              @08A\n         SR    R15,R15                 RC = 0                      @08A\n         PR                            RETURN                      @08A\nPROC2    CLOSE TEMPDD                                              @08A\nPROC3    LA    R15,4                   RC = 4                      @08A\n         PR                            RETURN                      @08A\nMOVENAME MVC   NAME(0),0(R1)           MOVE NAME FOR LOAD\nTEMPDD   DCB   DDNAME=TEMPDD,MACRF=R,DSORG=PO,EODAD=PROC2          @08A\n*-------------------------------------------------------------------\nLIST     DC    H'1',H'14'              BLDL LIST\nBLDLNAME DC    CL8' '                  BLDL NAME OF MODULE\nBLDLTTR  DC    XL3'00'                 TTR OF MODULE\nBLDLK    DC    X'00'                   CONCATENATION NUMBER\nBLDLZ    DC    X'00'                   LOCATION\n*                00 PRIVATE LIBRARY\n*                01 LINK LIBRARY\n*                02 JOB, TASK, OR STEP LIBRARY\n*             03-16 JOB, TASK, OR STEP LIBRARY OF PARENT TASK N,\n*                                      WHERE N = Z-2\nBLDLC    DC    X'00'                   ENTRY TYPE\n*-------------------------------------------------------------------\nMSG0     DS    0F\n         DC    C'REQUESTED MODULE NOT FOUND IN EITHER LPA, '\n         DC    C'LINKLIST, STEP/ISPLLIB OR NUCLEUS'\nLMSG0    EQU   *-MSG0                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG1     DS    0F\n         DC    C'JPA MODULE '\nJPANAME  DC    CL8' '\n         DC    C' AT '\nJPAADR   DC    CL8' '                JPA ADDRESS\n         DC    CL14' IN USE COUNT '\nJPAUSE   DC    CL4' '\nLMSG1    EQU   *-MSG1                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nJPATRUE  DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG1A   EQU   *-MSG1                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG4     EQU   *\nMSG4NAME DC    CL8' '\n         DC    C' FOUND AS A '\nMODTYPE  DC    C'MAJOR'\n         DC    C' NAME IN '\nLIBTYPE  DC    CL13' '               STEPLIB/ISPLLIB/DYN LINKLIST  @08C\nDSN      DC    CL36' '\nLMSG4    EQU   *-MSG4         SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG5     DS    0F\nLPATYPE  DC    C'PLPA MODULE '                                     @08C\nNAME     DC    CL8' '\n         DC    C' IS: '\nLENGTH   DC    CL6' '\n         DC    C' BYTES AT '\nADDRESS  DC    CL8' '                MVS/XA\nLMSG5    EQU   *-MSG5                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nTRUENM   DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG5A   EQU   *-MSG5                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG6     DS    0F                                                  @05A\n         DC    CL22'LPA MODULE RESIDES IN '                        @05A\nLPADSN   DC    CL44' '                                             @05A\n         DC    CL13' '                                             @05A\nLMSG6A   EQU   *-MSG6                SIZE OF MESSAGE               @05A\n*-------------------------------------------------------------------\n*EMSG7   DC    C'NO ALTLIB TABLE. SEARCH RESULT MAY BE INCORRECT'  @05A\n*-------------------------------------------------------------------\nMSG8     DS    0F\n         DC    C'REQUESTED COMMAND NOT FOUND IN EITHER SYSEXEC '\n         DC    C'OR SYSPROC'\nLMSG8    EQU   *-MSG8                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG9     DS    0F\n         DC    C'NUCLEUS MODULE : '\nMSG3NAME DC    CL8' '\n         DC    C' EPA '                                            @03C\nNADDRESS DC    CL9' '                NUCLEUS MODULE EPA            @03A\n         DC    C' LENGTH IN HEX '                                  @03A\nNLEN     DC    CL9' '                LENGTH OF THE MODULE          @03A\nLMSG9    EQU   *-MSG9                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nTIOTADR  DS    A                     ADDRESS OF TIOT               @05A\nTIOTCUR  DS    A                     ADDRESS OF CURRENT TIOT ENTRY @08A\nSWAPAPTR DC    A(SW_EPA)                                           @05A\nSW_EPA   DC    XL28'00'                                            @05A\nSWAPARMS SWAREQ MF=L,UNAUTH=YES                                    @05A\nCSVMLEN   DS   F                LPA MODULE LENGTH                  @08A\nCSVEPA    DS   F                LPA MODULE ENTRY POINT ADDRESS     @08A\nCSVATTR3  DS   XL1              ATTRIBUTE BYTE 3                   @08A\nCLIBDEF   DC   8X'FF'           ISPLLIB LIBDEF DDNAME              @08A\n          DC   CL8'LIBDEF  '                                       @08A\nCISPLLIB  DC   CL8'ISPLLIB '                                       @08A\n          DC   CL8'ISPLLIB '                                       @08A\nCTASKDDN  DC   8X'FF'           TASKLIB DDNAME                     @08A\n          DC   CL8'TASKLIB'                                        @08A\nCSTEPLIB  DC   CL8'STEPLIB '                                       @08A\n          DC   CL8'STEPLIB '                                       @08A\n          DC   C' '             END OF TABLE                       @08A\nCUEXEC    DC   8X'FF'                                              @08A\n          DC   CL8'SYSUEXEC'    USER LEVEL EXEC                    @08A\nCUPROC    DC   8X'FF'                                              @08A\n          DC   CL8'SYSUPROC'    USER LEVEL CLIST                   @08A\nCAPLEXEC  DC   8X'FF'                                              @08A\n          DC   CL8'APPLEXEC'    APPLICATION LEVEL EXEC             @08A\nCAPLEXES  DC   8X'FF'                                              @08A\n          DC   CL8'APPSEXEC'    APPLICATION LEVEL STACKED EXEC     @08A\nCAPLPROC  DC   8X'FF'                                              @08A\n          DC   CL8'APPLPROC'    APPLICATION LEVEL CLIST            @08A\nCAPLPROS  DC   8X'FF'                                              @08A\n          DC   CL8'APPSPROC'    APPLICATION LEVEL STACKED CLIST    @08A\nCSYSEXEC  DC   8X'FF'                                              @08A\n          DC   CL8'SYSEXEC '    SYSTEM LEVEL EXEC                  @08A\nCSYSPROC  DC   8X'FF'                                              @08A\n          DC   CL8'SYSPROC '    SYSTEM LEVEL CLIST                 @08A\n          DC   C' '             END OF TABLE                       @08A\nCTLD      DC   C'TLD'                                              @08A\nCTOS      DC   C'TOS'                                              @08A\nCCSA      DC   C'CSA '                                             @08A\nUNKNOWN   DC   C'????'                                             @08A\nCMINOR    DC   CL5'MINOR'                                          @05A\nSRCHDDN   DC   CL8'        '                                       @05A\nCFINDCMD  DC   CL8'FINDCMD '                                       @05A\nCFINDPRG  DC   CL8'FINDPRG '                                       @05A\nCTASKLIB  DC   CL12'TASKLIB     '                                  @08A\nCJOBSTEP  DC   CL12'STEPLIB     '                                  @05A\nCDYNLNK   DC   CL12'DYNAMIC LINK'                                  @05A\nTEMPNAME  DC   CL44' '                                             @05A\nVISPLINK  DC   V(ISPLINK)                                          @05A\nVISPQRY   DC   V(ISPQRY)                                           @05A\nVLPALIB   DC   V(LPALIB)                                           @05A\nTRTABLE   DC   C'0123456789ABCDEF' TRANSLATE TABLE\nLSTNAME   DC   CL16'CURRENT'  CURRENT LINKLIST SET                 @01A\nDBLWD     DC   D'0'           WORKAREA\nECB       DC   F'0'           DUMB ECB FOR PARSE\nPRETCODE  DC   F'4'           RETURN CODE (AND MSG SWITCH)\nCMDANSR   DC   F'0'           PARSE ANSWER AREA POINTER\nCMDUPT    DC   F'0'           USER PROFILE TABLE POINTER\nCMDECT    DC   F'0'           ENVIRONMENT CONTROL TABLE\nCMDECB    DC   A(ECB)         ECB POINTER\nCMDPCL    DC   A(IKJPCL)      ADDRESS OF IKJPARM\nCMDANS    DC   A(CMDANSR)     PLACE TO PUT ANSWER\nCMDCBUF   DC   F'0'           POINTER TO COMMAND BUFFER\nECBADS    DC   F'0'            SPACE FOR THE EVENT CONTROL BLOCK   @02A\nTEXTADS   DC   H'83'           LENGTH OF THE OUTPUT LINE           @02A\n          DC   H'0'            RESERVED                            @02A\nTEXT      DS   CL79                                                @02A\nIOPLADS   DC   4F'0'           SPACE FOR THE INPUT AND OUTPUT PARM @02A\nPUTBLOCK  PUTLINE MF=L     LIST FORM OF THE PUTLINE MACRO INST     @02A\n          LTORG\n          PRINT NOGEN\nIKJPCL    IKJPARM\nIKJOPT   IKJIDENT 'MODULE NAME',MAXLNTH=8,FIRST=ALPHA,                 X\n               OTHER=ALPHANUM,PROMPT='NAME OF MODULE TO LOCATE'\n         IKJENDP\n         IKJCPPL\n         IKJECT                                                    @08A\n         IKJTCB\n         IHALPDE\n         IHACDE\n         IHAPSA                                                    @08A\n         IKJEFLWA                                                  @08A\n         IHAASCB                                                   @08A\n         IHAASXB                                                   @08A\n         IEFJESCT                                                  @05A\n         IEFJFCBN                                                  @05A\n         IEFZB505 LOCEPAX=YES                                      @05A\n         CVT DSECT=YES,LIST=NO\n         YREGS                                                     @04A\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCATE$": {"ttr": 8197, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x007\\x01\\x142\\x9f\\x01\\x142\\x9f\\x17#\\x00!\\x00!\\x00\\x00\\xd1\\xc3\\xd3`\\xc1\\xe2\\xd4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2014-11-25T00:00:00", "modifydate": "2014-11-25T17:23:37", "lines": 33, "newlines": 33, "modlines": 0, "user": "JCL-ASM"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//*     YOU HAVE TO AUTHORIZE THIS COMMAND IN THE AUTHCMD TABLE\n//*      OF IKJTSO** IN PARMLIB - SEE CBT TAPE FILE 185 AND 797\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT489.FILE612(LOCATE)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//ISPLIB   DD  DISP=SHR,DSN=ISP.SISPLOAD\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   LOCATE\n SETSSI  CB485612\n INCLUDE ISPLIB(ISPLINK)\n NAME    LOCATE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCATEO": {"ttr": 8199, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x007\\x01\\x143/\\x01\\x143/\\t\\t\\x01R\\x01R\\x00\\x00\\xc1\\xe2\\xd4\\xd6@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2014-11-28T00:00:00", "modifydate": "2014-11-28T09:09:37", "lines": 338, "newlines": 338, "modlines": 0, "user": "ASMO"}, "text": "***********************************************************************\n*\n*        LOCATE IS A TSO COMMAND PROCESSOR USED TO LOCATE A NAMED\n*        MODULE IN EITHER THE F/MLPA, LPA OR VIA THE LINK LIST.\n*        RELEVANT INFORMATION AND LOCATION IS DISPLAYED TO THE USER.\n*        SEARCH SEQUENCE\n*               - JPA\n*               - ISPLLIB IF UNDER ISPF\n*               - ACTIVATE TSOLIB                                @02A\n*               - JOBLIB\n*               - STEPLIB\n*               - TASKLIB\n*               - FLPA\n*               - PLPA\n*               - DYNAMIC LINKLIST                               @01A\n*        MISC\n*               - NUCLEUS (INVOKE NUCLKUP)\n*\n*   ENHANCEMENT:\n*        IF THE LOAD MODULE IS FOUND ON THE LINKLIST, THE DSN IS ALSO\n*        DISPLAYED                                  AC 14 SEP 1990\n*        SEARCH NUCLEUS MAP IF THE MODULE DOES NOT EXIST AT LINKLIST\n*        OR LPA. FIX THE BUG OF DISPLAYING F/MLPA.\n*                                                   AC 02 NOV 1990\n*        DISPLAY THE LOAD ADDRESS AND IN-USE COUNT IF THE LOAD MODULE\n*        IS FOUND AT JPA.\n*                                                   AC 30 JUN 1992\n*  @01   SUPPORT OS/390 DYNAMIC LINKLST\n*                                                   AC 03 NOV 2000\n*  @02   REPLACE TPUT WITH PUTLINE AND THE LOCATE\n*        COMMAND CAN INVOKE AT BATCH MODE           AC 18 DEC 2009\n*  @03   TURN OFF HIGH ORDER BIT OF NUCLEUS MODULE\n*        DISPLAY THE LENGTH OF THE NUCLUES MODULE   AC 20 AUG 2013\n***********************************************************************\nLOCATE   $PROLOG\n         USING CPPL,R1          ADDRESSABILITY FOR CPPL\n         MVC   CMDUPT,CPPLUPT   COPY UPT ADDRESS\n         MVC   CMDECT,CPPLECT   COPY ECT ADDRESS\n         L     R10,CPPLUPT                                        @02A\n         L     R11,CPPLECT                                        @02A\n         MVC   CMDCBUF,CPPLCBUF COPY ADDRESS OF COMMAND BUF\n         DROP  R1\n         LA    R1,CMDUPT      PROVIDE LIST FOR PARSE\n         LINK  EP=IKJPARS     PARSE COMMAND\n         L     R2,CMDANSR     GET POINTER TO ANSWER AREA\n         USING IKJPARMD,R2    PROVIDE ADDRESSABILITY\n         L     R1,IKJOPT      GET POINTER TO OPERAND\n         LH    R2,IKJOPT+4    GET SIZE OF OPERAND\n         DROP  R2\n         BCTR  R2,R0          DECREMENT FOR EXECUTE\n         EX    R2,MOVENAME    MOVE TO LIST FOR LOAD\n         MVC   BLDLNAME(8),NAME    MOVE NAME TO BLDL LIST\n         MVC   MSG2NAME(8),NAME    MOVE NAME TO MSG2\n         L     R3,X'21C'      LOAD CURRENT TCB\n         USING TCB,R3\n         L     R3,TCBJSTCB\nTCBLOOP  SR    R15,R15\n         ICM   R15,7,TCBJPQB  LOAD JOB PACK QUEUE\n         USING CDENTRY,R15\n         BZ    NEXTTCB        NO, SEARCH THE MLPA/FLPA\n         B     FIRSTJPA\nNEXTJPA  L     R15,CDCHAIN    1ST CDE ON THE QUEUE\n         LTR   R15,R15        ANYTHING ON THE QUEUE?\n         BZ    NEXTTCB        NO, SEARCH THE MLPA/FLPA\nFIRSTJPA CLC   NAME,CDNAME    NAMES EQUAL?\n         BNE   NEXTJPA        YES, FOUND\n         XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         TM    CDATTR,CDMIN   MINOR CDE?\n         BZ    CDEMAJ1        NO, CONTINUE\n         MVC   JPATRUE,CDNAME COPY TRUE NAME\n         L     R15,CDXLMJP    LOCATE MAJOR CDE\nCDEMAJ1  DS    0H\n         MVC   JPANAME,CDNAME COPY MODULE NAME\n         UNPK  JPAADR(9),CDENTPT(5)   UNPACK ADDRESS FOR PRINT\n         TR    JPAADR(8),TRTABLE-240  MAKE PRINTABLE\n         MVI   JPAADR+8,C' '          CLEAR GARBAGE FROM UNPACK\n         UNPK  JPAUSE(5),CDUSE(3)     UNPACK ADDRESS FOR PRINT\n         TR    JPAUSE(4),TRTABLE-240  MAKE PRINTABLE\n         MVI   JPAUSE+5,C' '          CLEAR GARBAGE FROM UNPACK\n         CLI   JPATRUE,C' '   ALIAS NAME EXIST ??\n         BNE   CDEMIN1        BRANCH IF YES\n*        TPUT  MSG5,LMSG5     DISPLAY MAJOR NAME                   @02D\n         MVC   TEXT+0(L'MSG5),MSG5    DISPLAY MAJOR NAME           @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\n         B     LPAQ           SCAN LPA\n*DEMIN1  TPUT  MSG5,LMSG5A    DISPLAY MAJOR AND MINOR NAME         @02D\nCDEMIN1  MVC   TEXT+0(LMSG5A),MSG5   DISPLAY MAJOR AND MINOR NAME  @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)                                      @02A\nNEXTTCB  ICM   R3,15,TCBNTC\n         BNZ   TCBLOOP\n         DROP  R15\nLPAQ     L     R3,16          GET CVT ADDR\n         USING CVT,R3\n         L     R15,CVTQLPAQ   ACTIVE LPA QUEUE ADDRESS\n         USING CDENTRY,R15\n         LTR   R15,R15        ANYTHING ON THE QUEUE?\n         BZ    DIRSRCH        NO, SEARCH THE LPA DIRECTORY\n         B     FIRSTLPA\nCDELOOP2 DS    0H\n         LTR   R15,R15        ANYTHING ON THE QUEUE?\n         BZ    DIRSRCH        NO, SEARCH THE LPA DIRECTORY\n         CLC   NAME,CDNAME    NAMES EQUAL?\n         BE    CDECHK2        YES, FOUND\nFIRSTLPA L     R15,CDCHAIN    1ST CDE ON THE QUEUE\n         B     CDELOOP2\nCDECHK2  XC    RETCODE,RETCODE  INDICATE MODULE FOUND\n         TM    CDATTR,CDMIN     MINOR CDE?\n         BZ    CDEMAJ2          NO, CONTINUE\n         MVC   FLPATRUE,CDNAME  COPY TRUE NAME\n         L     R15,CDXLMJP      LOCATE MAJOR CDE\nCDEMAJ2  DS    0H\n         MVC   FLPANAME,CDNAME  COPY MODULE NAME\n         UNPK  FLPAADR(9),CDENTPT(5)   UNPACK ADDRESS FOR PRINT\n         TR    FLPAADR(8),TRTABLE-240  MAKE PRINTABLE\n         MVI   FLPAADR+8,C' '          CLEAR GARBAGE FROM UNPACK\n         CLI   FLPATRUE,C' '  ALIAS NAME EXIST ??\n         BNE   CDEMIN2        BRANCH IF YES\n*        TPUT  MSG4,LMSG4     DISPLAY MAJOR NAME                   @02D\n         MVC   TEXT+0(LMSG4),MSG4  DISPLAY MAJOR NAME              @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)                                      @02A\n         B     DIRSRCH        SCAN LPA\n*DEMIN2  TPUT  MSG4,LMSG4A    DISPLAY MAJOR AND MINOR NAME         @02D\nCDEMIN2  MVC   TEXT+0(LMSG4A),MSG4  DISPLAY MAJOR AND MINOR NAME   @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)                                      @02A\n         DROP  R15\nDIRSRCH  LM    R0,R1,NAME     PICK UP THE NAME\n         L     R6,CVTLPDSR    LPA SEARCH ROUTINE ADDR\n         DS    0Y(R8,R9)      ROUTINES USES THESE REGISTERS\nSRCHLPA  BALR  R14,R6         SEARCH LPA DIRECTORY\n         B     GOTIT          IT'S THERE\n         B     NOTLPA         BRANCH IF NOT THERE\nGOTIT    XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         LR    R4,R0          PUT LPDE ADDR WHERE IT CAN DO SOME GOOD\n         USING LPDE,R4        INFORM THE ASSEMBLER\n         TM    LPDEATTR,LPDEMIN        MINOR LPDE?\n         BZ    LPTRUE                  NO, PROCESS MAJOR\n         MVC   TRUENM,LPDEMJNM         YES, COPY TRUE NAME\n         LM    R0,R1,LPDEMJNM          PUT IT IN REGS\n         B     SRCHLPA                 GET MAJOR LPDE\nLPTRUE   UNPK  LENGTH(7),LPDEXTLN+1(4) UNPACK LENGTH FOR PRINT\n         TR    LENGTH(6),TRTABLE-240   MAKE PRINTABLE\n         MVI   LENGTH+6,C' '           CLEAR GARBAGE FROM UNPACK\n         UNPK  ADDRESS(9),LPDEXTAD(5)  UNPACK ADDRESS FOR PRINT\n         TR    ADDRESS(8),TRTABLE-240  MAKE PRINTABLE\n         MVI   ADDRESS+8,C' '          CLEAR GARBAGE FROM UNPACK\n         DROP  R4\nLPAMSG   CLI   TRUENM,C' '    IS THIS AN ALIAS?\n         BNE   TPUTA          YES, ISSUE ALIAS TPUT\n*        TPUT  MSG1,LMSG1     MESSAGE WITHOUT ALIAS NAME           @02D\n         MVC   TEXT+0(LMSG1),MSG1 MESSAGE WITHOUT ALIAS NAME       @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)                                      @02A\n         B     NOTLPA         SEE IF IN LNKLST ALSO\n*PUTA    TPUT  MSG1,LMSG1A    MESSAGE WITH ALIAS NAME              @02D\nTPUTA    MVC   TEXT+0(LMSG1A),MSG1  MESSAGE WITH ALIAS NAME        @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)                                      @02A\nNOTLPA   BLDL  0,LIST         LOCATE MODULE IN JOB/STEP/LINKLIST LIB\n         LTR   R15,R15        CHECK RETURN CODE\n         BNZ   NOTLINK        NOT FOUND IN LINKLIST\n         SR    R1,R1          CLEAR FOR IC\n         IC    R1,BLDLK       PICK UP CONCATINATION NUMBER\n         XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         TM    BLDLC,X'80'    IS THIS AN ALIAS?\n         BZ    NOTALIAS       NO, MAJOR NAME\n         MVC   MODTYPE(5),=C'MINOR'   INDICATE MODULE IS ALIAS\nNOTALIAS CLI   BLDLZ,X'00'    PRIVATE LIBRARY?\n         BE    CONCAT         YES, ALL SET\n         MVC   LIBTYPE(12),=C'JOB/STEP LIB' MODIFY MESSAGE TEXT\n         CLI   BLDLZ,X'01'    LINKLIB/LINK LIST LIBRARY?\n         BNH   DYNAMIC        NO, ALL SET                          @03C\nCONCAT   XC    DBLWD,DBLWD    CLEAR FOR CONVERT\n         CVD   R1,DBLWD       CONVERT TO DECIMAL\n         MVI   DSN,C'('       ADD LEADING PAREN\n         UNPK  DSN+1(2),DBLWD+6(2) UNPACK FOR PRINT\n         OI    DSN+2,X'F0'    MAKE PRINTABLE\n         MVI   DSN+3,C')'     ADD TRAILING PAREN\nDYNAMIC  DS    0H             HANDLE DYNAMIC LINKLIST              @01A\n         MVC   LIBTYPE(12),=C'DYNAM LNKLST'   MODIFY MESSAGE TEXT\n         MODESET MODE=SUP,KEY=ZERO\n         CSVDYNL REQUEST=TEST,LNKLSTNAME=LSTNAME,MODNAME=BLDLNAME,     X\n               RETCODE=CSVRET,RSNCODE=CSVRSN,FOUNDDSNAME=DSN\n         LTR   R15,R15\n         BNZ   RESETAUT                       BRANCH IF NOT FOUND  @03C\n         OI    DYNFLAG,X'80'                  TURN ON FIND FLAG    @03A\nRESETAUT MODESET MODE=PROB,KEY=NZERO                               @03C\n         TM    DYNFLAG,X'80'                  FIND IN DYNAMIC LINK @03A\n         JNO   NOTLINK                        BRANCH IF NOT FOUND  @03A\nDISPLAY  MVC   TEXT+0(LMSG2),MSG2\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)\nEXIT     OC    RETCODE,RETCODE ANY MESSAGE ISSUED (MODULE FOUND) ?\n         BZ    RETURN         YES, ALL DONE\n*        TPUT  MSG0,LMSG0     INFORM USER                          @02D\n         MVC   TEXT+0(LMSG0),MSG0      INFORM USER                 @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)                                      @02A\nRETURN   IKJRLSA CMDANSR      RELEASE PARSE STORAGE\n         L     R15,RETCODE    SET RETURN CODE\n         $EPILOG\nNOTLINK  DS    0H\n         LA    R1,BLDLNAME\n         NUCLKUP NAME=(1),ADDR=(3)   INVOKE NUCLEUS MAP LOOKUP SRV\n         LTR   R15,R15\n         JNZ   EXIT\n         TMLH  R3,X'8000'             HIGH ORDER BIT IS ON         @03A\n         JNO   FMTADDR                BRANCH IF HIGH ORDER BIT OFF @03A\n         NILH  R3,X'7FFF'             TURN OFF HIGH ORDER BIT      @03A\nFMTADDR  ST    R3,DBLWD\n         UNPK  NADDRESS(9),DBLWD(5)   UNPACK ADDRESS FOR PRINT\n         TR    NADDRESS(8),TRTABLE-240 MAKE PRINTABLE\n         MVI   NADDRESS+8,C' ' CLEAR GARBAGE FROM UNPACK\n         ST    R1,DBLWD                                            @03A\n         UNPK  NLEN(9),DBLWD(5)       UNPACK ADDRESS FOR PRINT     @03A\n         TR    NLEN(8),TRTABLE-240    MAKE PRINTABLE               @03A\n         MVI   NLEN+8,C' '            CLEAR GARBAGE FROM UNPACK    @03A\n         MVC   MSG3NAME,BLDLNAME\n*        TPUT  MSG3,LMSG3                                          @02D\n         MVC   TEXT+0(LMSG3),MSG3          DISPLAY NUCLUES MODULE  @02A\n         PUTLINE PARM=PUTBLOCK,UPT=(10),ECT=(11),                      X\n               ECB=ECBADS,OUTPUT=(TEXTADS,TERM,SINGLE,DATA),           X\n               MF=(E,IOPLADS)                                      @02A\n         B     RETURN\nMOVENAME MVC   NAME(0),0(R1)  MOVE NAME FOR LOAD\n*-------------------------------------------------------------------\nLIST     DC    H'1',H'14'     BLDLLIST\nBLDLNAME DC    CL8' '         BLDL NAME OF MODULE\nBLDLTTR  DC    XL3'00'        TTR OF MODULE\nBLDLK    DC    X'00'          CONCATINATION NUMBER\nBLDLZ    DC    X'00'          LOCATION\nBLDLC    DC    X'00'          ENTRY TYPE\n*-------------------------------------------------------------------\nMSG0     DS    0F\n         DC    C'REQUESTED MODULE NOT FOUND IN EITHER LPA, '\n         DC    C'LNKLST, NUCLEUS OR JOB/TASK/STEPLIB'\nLMSG0    EQU   *-MSG0                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG1     DS    0F\n         DC    C'PLPA MODULE   '\nNAME     DC    CL8' '\n         DC    C' IS: '\nLENGTH   DC    CL6' '\n         DC    C' BYTES AT '\nADDRESS  DC    CL8' '                MVS/XA\nLMSG1    EQU   *-MSG1                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nTRUENM   DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG1A   EQU   *-MSG1                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG2     EQU   *\nMSG2NAME DC    CL8' '\n         DC    C' FOUND AS A '\nMODTYPE  DC    C'MAJOR'\n         DC    C' NAME IN '\nLIBTYPE  DC    C'PRIVATE LIB  '\nDSN      DC    CL36' '\nLMSG2    EQU   *-MSG2         SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG3     DS    0F\n         DC    C'NUCLEUS MODULE : '\nMSG3NAME DC    CL8' '\n*        DC    C' BYTES AT '                                     @01D\n*ADDRESS DC    CL9' '                NUCLEUS ADDRESS             @01D\n         DC    C' EPA '                                          @01C\nNADDRESS DC    CL9' '                NUCLEUS MODULE EPA          @01A\n         DC    C' LENGTH IN HEX '                                @01A\nNLEN     DC    CL9' '                LENGTH OF THE MODULE        @01A\nLMSG3    EQU   *-MSG3                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG4     DS    0F\n         DC    C'F/MLPA MODULE '\nFLPANAME DC    CL8' '\n         DC    C' AT '\nFLPAADR  DC    CL8' '                FLPA ADDRESS\nLMSG4    EQU   *-MSG4                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nFLPATRUE DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG4A   EQU   *-MSG4                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG5     DS    0F\n         DC    C'JPA MODULE '\nJPANAME  DC    CL8' '\n         DC    C' AT '\nJPAADR   DC    CL8' '                JPA ADDRESS\n         DC    CL14' IN USE COUNT '\nJPAUSE   DC    CL4' '\nLMSG5    EQU   *-MSG5                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nJPATRUE  DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG5A   EQU   *-MSG5                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nDYNFLAG  DC    X'00'                 DYNAMIC LINK MODULE FLAG     @03A\nCSVRET   DC    F'0'                                               @01A\nCSVRSN   DC    F'0'                                               @01A\nTRTABLE  DC    C'0123456789ABCDEF' TRANSLATE TABLE\nLSTNAME  DC    CL16'CURRENT'                                      @01A\nBLANKS   DC    CL81' '        BLANKS\nDBLWD    DC    D'0'           WORKAREA\nADDR     DC    F'0'           ADDRESS WORK AREA\nECB      DC    F'0'           DUMB ECB FOR PARSE\nRETCODE  DC    F'4'           RETURN CODE (AND MSG SWITCH)\nCMDANSR  DC    F'0'           PARSE ANSWER AREA POINTER\nCMDUPT   DC    F'0'           USER PROFILE TABLE POINTER\nCMDECT   DC    F'0'           ENVIRONMENT CONTROL TABLE\nCMDECB   DC    A(ECB)         ECB POINTER\nCMDPCL   DC    A(IKJPCL)      ADDRESS OF IKJPARM\nCMDANS   DC    A(CMDANSR)     PLACE TO PUT ANSWER\nCMDCBUF  DC    F'0'           POINTER TO COMMAND BUFFER\nECBADS   DS    F'0'            SPACE FOR THE EVENT CONTROL BLOCK   @02A\nTEXTADS  DC    H'83'           LENGTH OF THE OUTPUT LINE           @02A\n         DC    H'0'            RESERVED                            @02A\nTEXT     DS    CL79                                                @02A\nIOPLADS  DC    4F'0'           SPACE FOR THE INPUT AND OUTPUT PARM @02A\nPUTBLOCK PUTLINE MF=L      LIST FORM OF THE PUTLINE MACRO INST     @02A\n         LTORG\nIKJPCL   IKJPARM\nIKJOPT   IKJIDENT 'MODULE NAME',MAXLNTH=8,FIRST=ALPHA,                 X\n               OTHER=ALPHANUM,PROMPT='NAME OF MODULE TO LOCATE'\n         IKJENDP\n         IKJCPPL\n         IKJTCB\n         IHALPDE\n         IHACDE\n         CVT DSECT=YES,LIST=NO\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPALIB": {"ttr": 8205, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00)\\x01\\x145/\\x01\\x145/\\x15B\\x00{\\x00{\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2014-12-18T00:00:00", "modifydate": "2014-12-18T15:42:29", "lines": 123, "newlines": 123, "modlines": 0, "user": "ASM"}, "text": "***********************************************************************\n*\n*        LPALIB IS THE SUB-PROGRAM OF LOCATE.\n*        IT LOCATES A MODULE IN LPA LIBRARIES. SET RETURN CODE TO 0\n*        IF THE MODULE EXISTS. SET RETURN CODE TO 4 IF MODULE DOES\n*        NOT EXIST.\n* INPUT\n*        R1  -- ADDRESS OF THE COMMAND\n*        R2  -- ADDRESS OF LPA DATASET NAME\n* OUTPUT\n*        R15 -- RETURN CODE\n*\n* ABSTRACT\n*\n***********************************************************************\nLPALIB   CSECT\n         BAKR  R14,0             SAVE REGISTERS INTO LINKAGE STACK\n         J     START                  BRANCH AROUND MODULE\n         DC    C'LPALIB.V01'           DESCRIPTION AND VERSION NO.\n         DC    C'&SYSDATE &SYSTIME'   ASSEMBLE DATE AND TIME\nSTART    DS    0H\n         LR    R12,R15\n         USING LPALIB,R12             ESTABLISH PROGRAM BASE REG\n*        LA    R1,BLDLNAME\n         MVC   BLDLNAME,0(R1)\n         L     R4,16\n         L     R4,CVTSMEXT-CVT(,R4)   STORAGE MAP EXTENSION\n         SAM31\n         L     R4,X'38'(,R4)          EPLPS\n         L     R5,4(,R4)              LPATCNT\n         AHI   R4,8\nNEXT_LPA_ENTRY DS  0H\n         SAM31\n         MVC   ALC_DSNAME,1(R4)\n         LA    R1,ALC_RBP\n         DYNALLOC                     ALLOCATE DDNAME TEMPLPA\n         LTR   R15,R15\n         JNZ   EXIT4\n         SAM24\n         OPEN  (TEMPLPA,(INPUT))      OPEN LPA LIBRARY\n         LTR   R15,R15                CHECK RETURN CODE\n         JNZ   EXIT4                  BRANCH IF OPEN ERROR\n         BLDL  TEMPLPA,LIST           LOCATE MODULE\n         LTR   R15,R15                CHECK RETURN CODE\n         JNZ   CLOSEFL                BRANCH IF MEMBER NOT FIND\n         MVC   0(44,R2),ALC_DSNAME    GET LPA DATASET\n*        TPUT  ALC_DSNAME,44\n         J     EXIT\nCLOSEFL  CLOSE TEMPLPA                CLOSE TEMPLPA\n         LA    R1,UA_RBP\n         DYNALLOC                     UN-ALLOCATE DDNAME TEMPLPA\n         AHI   R4,45\n         BRCT  R5,NEXT_LPA_ENTRY      NEXT LPAT ENTRY\nEXIT4    DS    0H\n         LA    R15,4                  SET ERROR RETURN CODE\n         PR                           RETURN\nEXIT     DS    0H\n         MVC   0(44,R2),ALC_DSNAME    GET LPA DATASET NAME\n         CLOSE TEMPLPA\n         LA    R1,UA_RBP\n         DYNALLOC                     UN-ALLOCATE DDNAME TEMPLPA\n         SR    R15,R15\n         PR                           RETURN\nTEMPLPA  DCB   DDNAME=X$1$2$3Y,MACRF=R,DSORG=PO,EODAD=EXIT4\n*-------------------------------------------------------------------\nLIST     DC    H'1',H'14'              BLDL LIST\nBLDLNAME DC    CL8' '                  BLDL NAME OF MODULE\n         DC    XL3'00'                 TTR OF MODULE\n         DC    X'00'                   CONCATENATION NUMBER\n         DC    X'00'                   LOCATION\n         DC    X'00'                   ENTRY TYPE\n*-------------------------------------------------------------------\n*---------------------------------------------------------------------*\n*              DYNAMIC ALLOCATE REQUEST BLOCK                         *\n*---------------------------------------------------------------------*\nALC_RBP     DC  A(ALC_RB+X'80000000')\n*\nALC_RB      DS  0F\n            DC  AL1(20),X'01'          DSNAME ALLOCATION VERB CODE\n            DC  H'0'                   ALLOCATION FLAGS1\nALC_ERCD    DC  H'0'                   ERROR CODE\nALC_INFO    DC  H'0'                   INFORMATION CODE\n            DC  A(ALC_TXTS)            TEXT UNIT POINTER\n            DC  F'0'                   REQUEST BLOCK EXTENSION\n            DC  F'0'                   ALLOCATION FLAGS2\nALC_TXTS    DC  A(ALC_TXT1)\n            DC  A(ALC_TXT2)\n            DC  A(ALC_TXT3+X'80000000')\n*\nALC_TXT1    DS  0F                      DDNAME TEXT UNIT\n            DC  XL2'01',XL2'01',AL2(8)  KEY,#,LENGTH\nALC_DDNAME  DC  CL8'X$1$2$3Y'           DDNAME\n*\nALC_TXT2    DS  0F                      DSNAME TEXT UNIT\n            DC  XL2'02',XL2'01',AL2(44) KEY,#,LENGTH\nALC_DSNAME  DS  CL44                    DSNAME\n*\nALC_TXT3    DS  0F                      DISP TEXT UNIT\n            DC  H'4',H'1',H'1',X'08'    KEY,#,LENGTH,DISP=SHR\n*---------------------------------------------------------------------*\n*              DYNAMIC UN-ALLOCATE REQUEST BLOCK                      *\n*---------------------------------------------------------------------*\n         DS   0F\nUA_RBP   DC   A(UA_RB+X'80000000')\nUA_RB    DS   0F\n         DC   AL1(20),X'02'           UN-ALLOCATION VERB\n         DC   H'0'                    DE-ALLOCATION FLAGS1\nUA_ERCD  DC   H'0'\nUA_INFO  DC   H'0'\n         DC   A(UA_TXTS)              TEXT POINTER\n         DC   F'0'                    REQUEST BLOCK EXTENSION\n         DC   F'0'                    DE-ALLOCATION FLAGS2\nUA_TXTS  DC   A(UA_TXT1)\n         DC   A(UA_TXT2+X'80000000')\nUA_TXT1  DS   0F                      DDNAME TEXT UNIT\n         DC   XL2'07',XL2'00'         KEY,#\nUA_TXT2  DS   0F                      DDNAME TEXT UNIT\n         DC   XL2'01',XL2'01',AL2(8)  KEY,#,LENGTH\n         DC   CL8'X$1$2$3Y'\n         LTORG\n         CVT DSECT=YES,LIST=NO\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OLDMACS": {"ttr": 8451, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00(\\x01\\x14(o\\x01\\x14(o\\x01A\\x01\\xc7\\x01\\xf4\\x00\\x00\\xd6\\xd3\\xc4\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-10-13T00:00:00", "modifydate": "2014-10-13T01:41:28", "lines": 455, "newlines": 500, "modlines": 0, "user": "OLDMACS"}, "text": "./ ADD NAME=$EPILOG  0100-03071-03071-0734-00013-00013-00000-MACRO\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n./ ADD NAME=$PROLOG  0100-03071-03071-0734-00090-00090-00000-MACRO\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n./ ADD NAME=@ENT     0100-03071-03071-0716-00157-00157-00000-MACRO\n         MACRO\n&SUBR    @ENT  &BASES,&SAVE,&CSECT,&DSA=NO\n.*\n.* THIS MACRO COURTESY OF SHARE INC.\n.* MVS PERFORMANCE PROJECT, CBT MODS TAPE, VTOC SYSTEM\n.* SUBMITTER RODGER MILLER, FIREMANS FUND\n.*\n.*   THIS MACRO, USED WITH THE @RET  MACRO, WILL PERFORM\n.*   STANDARD HOUSEKEEPING FOR A CSECT, INCLUDING SAVEAREA\n.*   CONSTRUCTION AND CHAINING, AND GETTING SOME STORAGE,\n.*   IF THAT IS DESIRED.\n.*   THE LEAVE MACRO WILL FREE THE GOTTEN STORAGE\n.*   THE OPERANDS ARE\n.*       &SUBR    @ENT   &BASES,&SAVE,&CSECT\n.*    WHERE\n.*       &SUBR    IS THE NAME OF THE CSECT\n.*       &BASES   ARE THE BASE REGISTERS FOR THE ROUTINE\n.*       &SAVE    IS THE LABEL FOR A SAVEAREA, OR A SUBPOOL\n.*                AND LENGTH FOR THE GETMAIN\n.*       &CSECT   TO CONTINUE AN EXISTING CSECT WITH ENTRY\n.*                POINT &SUBR\n.*\n.*    EXAMPLES -\n.*               @ENT 13,*\n.*\n.*       THIS WILL GENERATE NON-REENTRANT CODE, USING SAVEAREA\n.*       AS THE SAVE AREA LABEL, AND REGISTER 13 FOR THE BASE\n.*       REGISTER.\n.*\n.*       RENTMOD  @ENT (12,11),(,LDSECT)\n.*\n.*       THIS WILL GENERATE REENTRANT CODE WITH REGISTERS 12 AND\n.*       11 FOR BASE REGISTERS.  A GETMAIN WILL BE DONE FOR THE\n.*       DEFAULT SUBPOOL (0) WITH A LENGTH 'LDSECT'.\n.*\n         GBLC  &LV,&SP\n         LCLA  &K,&N\n         LCLC  &AREA,&B(16),&SUBNAME,&S\n&SUBNAME SETC  '&SUBR'\n         AIF   ('&SUBNAME' NE '').SUBSPEC\n&SUBNAME SETC  'MAIN'         DEFAULT CSECT NAME\n.SUBSPEC AIF   ('&CSECT' EQ '').NOTENT  IS IT AN ENTRY POINT?\n&CSECT   CSECT\n&SUBNAME DS    0F\n         AGO   .CSSPEC\n.NOTENT  ANOP\n&SUBNAME CSECT\n.CSSPEC  ANOP\n         SAVE  (14,12),T,&SUBNAME-&SYSDATE-&SYSTIME  SAVE REGS\n         AIF   ('&BASES(1)' EQ '15' OR '&BASES' EQ '').R15SET\n         AIF   ('&BASES(1)' EQ '13' AND '&SAVE' NE '').R15SET\n         LR    &BASES(1),15  SET FIRST BASE REG\n.R15SET  CNOP  0,4\n&S       SETC  '&SUBNAME'\n         AIF   (N'&SAVE EQ 2).P4   SUBPOOL, SIZE SPEC?\n         AIF   ('&SAVE' EQ '').P3  NO SAVEAREA - DEFAULT\n&AREA    SETC  '&SAVE'\n         AIF   ('&SAVE' NE '*').P2\n&AREA    SETC  'SAVEAREA'\n.P2      AIF   ('&BASES(1)' NE '13').P4\n&S       SETC  '*'\n         USING &SUBNAME,15\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n         BAL   13,*+76        SKIP AROUND THE SAVEAREA\n         DROP  15\n         AGO   .P4\n.P3      AIF   ('&BASES(1)' NE '13').P4\n         MNOTE 8,'*** CONTENTS OF REG 13 ARE LOST.  NO SAVE AREA WAS ESX\n               TABLISHED.'\n.P4      AIF   ('&BASES(1)' NE '14' OR '&SAVE' EQ '').P5\n         MNOTE 8,'*** MACRO RESTRICTION - REG 14 MUST NOT BE USED AS THX\n               E FIRST BASE REGISTER IF A SAVE AREA IS USED.'\n.P5      AIF   ('&BASES' EQ '').P9\n&N       SETA  N'&BASES\n.P6      ANOP\n&K       SETA  &K+1\n&B(&K)   SETC  ','.'&BASES(&K)'\n         AIF   (N'&SAVE EQ 1).PE\n         AIF   ('&BASES(&K)' NE '13').P7\n         MNOTE 8,'*** REG 13 MAY NOT BE USED AS A BASE REGISTER FOR REEX\n               NTRANT CODE.'\n         AGO   .P7\n.PE      AIF   ('&BASES(&K+1)' NE '13' OR '&SAVE' EQ '').P7\n         MNOTE 8,'*** WHEN USING A SAVE AREA, REG 13 MAY NOT BE USED ASX\n                A SECONDARY BASE REGISTER.'\n.P7      AIF   ('&BASES(&K+1)' NE '').P6\n         USING &S&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X\n               11)&B(12)&B(13)&B(14)&B(15)&B(16)\n&K       SETA  1\n         AIF   ('&BASES(1)' NE '13' OR '&SAVE' EQ '').P8\n&AREA    DC    18F'0'\n.P8      AIF   (&K GE &N).P10\n         LA    &BASES(&K+1),X'FFF'(&BASES(&K))\n         LA    &BASES(&K+1),1(&BASES(&K+1))\n&K       SETA  &K+1\n         AGO   .P8\n.P9      USING &SUBNAME,15\n.P10     AIF   (N'&SAVE GE 2).P13\n         AIF   ('&SAVE' EQ '' OR '&BASES(1)' EQ '13').P12\n         AIF   ('&SAVE'(1,1) GE '0').P16  NUMERIC MEANS A PASSED AREA\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n.P11     BAL   13,*+76       SKIP AROUND THE SAVEAREA\n&AREA    DC    18F'0'\n.P12     MEXIT\n.P13     ANOP\n&LV      SETC  '&SAVE(2)'\n&SP      SETC  '0'\n         AIF   ('&SAVE(1)' EQ '').P14\n&SP      SETC  '&SAVE(1)'\n.P14     CNOP  0,4          DO A GETMAIN FOR THE AREA\n         BAL   1,*+8          POINT THE SP AND LV\nENT&SYSNDX DC  AL1(&SP)       SUBPOOL FOR THE GETMAIN\n         DC    AL3(&LV)       LENGTH OF THE GETMAIN\n         L     0,0(1)         GET THE DATA IN REG 1\n         SVC   10             ISSUE THE GETMAIN\n.*                            CHAIN THE SAVEAREAS\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         AIF   ('&DSA' NE 'YES').NODSA                        11/04/79\nDSA      DSECT                                                11/04/79\n         DS    9D                  INITIAL SAVE AREA          11/04/79\n         USING DSA,13              TELL ASM                   11/04/79\n         AIF   ('&CSECT' NE '').DSA1 NO MAINLINE CSECT        11/04/79\n&SUBNAME CSECT                     CONTINUE NORMAL CSECT      11/04/79\n         AGO   .NODSA              EXIT                       11/04/79\n.DSA1    ANOP                                                 11/04/79\n&CSECT   CSECT                     CONTINUE NORMAL CSECT      11/04/79\n.NODSA   ANOP                                                 11/04/79\n         AIF   ('&SAVE(3)' NE 'C').P15   CLEAR THE SAVEAREA?\n         LA    4,12(13)       YES, POINT PAST THE CHAIN\n         L     5,ENT&SYSNDX   GET THE SIZE\n         LA    6,12           MINUS THE CHAIN AREA (12 BYTES )\n         SR    5,6            GIVES THE AMOUNT TO CLEAR\n         SR    7,7            CLEAR THE FROM COUNT AND CLEAR BYTE\n         MVCL  4,6            WHEE, CLEAR IT OUT\n         LM    0,7,20(2)      RESTORE THE ORIGINAL REGISTERS\n         MEXIT\n.P15     ANOP\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEXIT\n.P16     L     1,&AREA+0(1)   NUMERIC &SAVE IMPLIES A PASSED SAVEAREA\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEND\n./ ADD NAME=@RET     0101-03071-03071-0743-00037-00036-00037-MACRO\n         MACRO\n&NAME    @RET  &EQ,&RC=,&FREE=YES\n.*..................................>> SEE @ENT MACRO FOR CREDITS\n         GBLC  &LV,&SP                 GLOBALS-SET IN @ENT\n&NAME    LR    2,13                    SAVE CURRENT SAVE AREA\n         L     13,4(13)                GET CALLER SAVE AREA\n         AIF   ('&RC' EQ '').L0        SKIP IF R15 ALREADY SET\n         LA    15,&RC                  LOAD THE RETURN CODE\n.L0      STM   15,1,16(13)             STORE RETURN REGS\n         AIF   ('&LV' EQ '').L1        ANYTHING TO FREE?\n         AIF   ('&FREE' EQ 'NO').L1    OVERRIDE FREE CODE?     25JUL84\n         FREEMAIN R,LV=&LV,SP=&SP,A=(2) FREE THE AREA\n.L1      RETURN (14,12),T              RETURN TO CALLER\n         AIF   ('&EQ' NE 'EQ').L4      REGISTERS TOO?\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.L4      MEND\n./ ADD NAME=JVDENTER 0100-14245-14245-1506-00074-00074-00000-MACRO\n         MACRO , JVDENTER - V1M00 - 01/28/74\n&LABEL   JVDENTER                                                      +\n               &BASE=(11),                                             +\n               &REGS=(14,12),                                          +\n               &ID=,                                                   +\n               &VERSION=,                                              +\n               &DSA=72,                                                +\n               &ORIGIN=*,                                              +\n               &CFL=YES\n.*\n         LCLC  &EPID,&BASR,&START\n.*\n.BEGIN   AIF   ('&LABEL' EQ '').IDT\n.*\n         SPACE\n&LABEL   DS    0H\n         ENTRY &LABEL\n         SPACE\n.*\n.IDT     AIF   (T'&ID EQ 'O').IDD\n&EPID    SETC  '&ID'\n         AGO   .VER\n.IDD     AIF   ('&LABEL' EQ '').IDC\n&EPID    SETC  '&LABEL'\n         AGO   .VER\n.IDC     ANOP\n&EPID    SETC  '&SYSECT'\n.VER     AIF   (T'&VERSION EQ 'O').GEN\n&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'\n         MNOTE *,'       &EPID'\n.*\n.GEN     ANOP\n&BASR    SETC  '&BASE(1)'\n.*\n&START   SETC  '&ORIGIN'\n         AIF   ('&ORIGIN' NE '@').START\n&START   SETC  '&SYSECT'\n.START   AIF   ('&ORIGIN' EQ '*').HERE\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         BALR  &BASR,0\n         LA    14,*-&ORIGIN\n         SLR   &BASR,14\n         LR    2,13\n         SPACE\n.*\n         AGO   .GETDSA\n.HERE    ANOP\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         LR    &BASR,15\n         LR    2,13\n         SPACE\n.*\n.GETDSA  AIF   ('&DSA' EQ '0').NOCFL\n.*\n         LA    3,&DSA\n         GETMAIN R,LV=(3)\n         ST    3,0(1)\n         ST    13,4(1)\n         LR    13,1\n.*\n         AIF   ('&CFL' EQ 'NO').NOCFL\n.*\n         ST    1,8(2)\n.*\n.NOCFL   ANOP\n.*\n         LM    14,04,12(2)\n         SPACE\n.*\n         MEND\n./ ADD NAME=JVDEQU   0100-14245-14245-1506-00022-00022-00000-MACRO\n         MACRO\n&L       JVDEQU &O\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n.*\n         MEND\n./ ADD NAME=JVDLEAVE 0100-14245-14245-1506-00055-00055-00000-MACRO\n         MACRO , JVDLEAVE - V1M00 - 01/28/74\n&LABEL   JVDLEAVE                                                      +\n               &REGS=(14,12),                                          +\n               &RC=,                                                   +\n               &DSA=\n.*\n         LCLC  &L\n.*\n         AIF   ('&DSA' EQ '0').NODSA\n.*\n&LABEL   LH    0,2(13)\n         LR    1,13\n         L     13,4(13)\n.*\n         AIF   ('&RC' NE '(15)').FREE\n.*\n         LR    2,15\n.*\n.FREE    ANOP\n.*\n         FREEMAIN R,LV=(0),A=(1)\n.*\n.RCCHK   AIF   ('&RC' EQ '').NORC\n         AIF   ('&RC' NE '(15)').RTRN\n.*\n         LR    15,2\n.*\n         AGO   .RTRNN\n.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC\n.*\n         LR    15,&RC(1)\n.*\n.RTRNN   ANOP\n.*\n&L       RETURN &REGS,RC=(15)\n         SPACE\n.*\n         MEXIT\n.RTRNC   ANOP\n.*\n&L       RETURN &REGS,RC=&RC\n         SPACE\n.*\n         MEXIT\n.NORC    ANOP\n.*\n&L       RETURN &REGS\n         SPACE\n.*\n         MEXIT\n.NODSA   ANOP\n&L       SETC  '&LABEL'\n         AGO   .RCCHK\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QIODF": {"ttr": 8459, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x005\\x01 \\x00?\\x01 \\x00?\\x14C\\x00\\x13\\x00\\x13\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2020-01-03T00:00:00", "modifydate": "2020-01-03T14:43:35", "lines": 19, "newlines": 19, "modlines": 0, "user": "REXX"}, "text": "/* REXX                                                           */\n/* Function : Display current IODF                                */\n/* Synatx : QIODF                                                 */\n/* Author : ALBERT CHENG                                          */\n/* Date   : Jan   2020                                            */\n/*                                                                */\nNUMERIC DIGITS 10\ncvt   = addc(16,'0' )                   /* fetch CVT              */\niocom = addc(cvt,'7c')                  /* fecth IOCOM            */\niovt  = addc(iocom,'d0')                /* fetch iovt             */\ncda   = addc(iovt,'18')                 /* fetch cda              */\niodf  = cda+32                          /* cda+x'20               */\niodfname = storage(D2X(iodf),44)\nsay 'Current IODF is' iodfname\nexit\n/* Internal Function to fetch address   */\naddc: ARG ad1,ad2\nRETURN C2D(STORAGE(D2X(ad1+X2D(ad2)),4))   /* ad1 = dec, ad2 = hex */\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REGSIZE": {"ttr": 8461, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00@\\x01\\x191\\x1f\\x01\\x191\\x1f\\x145\\x00\\x16\\x00\\x16\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2019-11-07T00:00:00", "modifydate": "2019-11-07T14:35:40", "lines": 22, "newlines": 22, "modlines": 0, "user": "REXX"}, "text": "/* REXX EXEC to display region size and %in used                   */\n/* Author : Albert Cheng       27 May 2013                         */\n/*******************************************************************/\n NUMERIC DIGITS 10\n ascb = addc(548,'0')                   /* fetch ASCB             */\n lda  = addc(ascb,'30')                 /* fecth JESCT            */\n lim  = addc(lda,'d0')                  /* fetch LDALIM           */\n loal = addc(lda,'e8')                  /* fetch LDALOAL          */\n elim = addc(lda,'d8')                  /* fetch LDAELIM          */\n eloal= addc(lda,'f0')                  /* fetch LDAELOAL         */\n SAY 'Storage below 16M'\n SAY 'Used    region size below 16M =' loal/1024 'k   length in hex' d2x(loal)\n SAY 'Maximum region size below 16M =' lim/1024 'k   length in hex' d2x(lim)\n SAY '                     %in used =' (((loal*100/lim))*100 % 1)/100\n SAY 'Storage Above 16M'\n SAY 'Used    region size above 16M =' eloal/1024 ' k  length in hex' d2x(eloal)\n SAY 'Maximum region size above 16M =' elim/1024 'k  length in hex' d2x(elim)\n SAY '                     %in used =' (((eloal*100/elim))*100 % 1)/100\nEXIT 0\n/* Internal Function to fetch address   */\naddc: ARG ad1,ad2\nRETURN C2D(STORAGE(D2X(ad1+X2D(ad2)),4))   /* ad1 = dec, ad2 = hex */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SHOWPPT": {"ttr": 8705, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00(\\x01\\x15\\x00_\\x01\\x15\\x00_\\x16\\x12\\x00\\xd9\\x00\\xd9\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2015-01-05T00:00:00", "modifydate": "2015-01-05T16:12:28", "lines": 217, "newlines": 217, "modlines": 0, "user": "ASM"}, "text": "         TITLE 'DISPLAY THE PPT TABLE'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS AN APF         *\n*                   AUTHORIZED BATCH PROGRAM AND IT MUST RESIDES IN   *\n*                   AN APF LIBRARY. THIS PROGRAM IS MODIFIED FROM     *\n*                   CBT 835. TSO COMMAND PPTD MUST BE REGISTERED IN   *\n*                   IKJTSO00 AND SOME INSTALLATION DOES NOT ALLOW     *\n*                   CBT AUTHORISED COMMAND IN IKJTSO00.               *\n*                                                                     *\n*       FUNCTION:   TO LIST THE ENTRIES TO THE PROGRAM PROPERTIES     *\n*                   TABLE OF THE Z/OS OPERATING SYSTEM.  THESE ARE    *\n*                   SPECIAL PROGRAMS THAT RUN WITH SPECIAL PROPER-    *\n*                   TIES, SUCH AS NON-CANCELABLE, NON-SWAPPABLE,      *\n*                   OR IN A PARTICULAR STORAGE KEY, ETC.              *\n*                                                                     *\nZERO     EQU   X'00'                   ZERO\nSPACE    EQU   C' '                    SPACE\nSIGNF    EQU   X'F0'                   POSITIVE SIGN\nSHOWPPT  CSECT\n         BAKR  R14,0                   SAVE CALLER'S ARS + GPRS\n*                                      IN THE LINKAGE STACK\n         USING SHOWPPT,R12             SET UP PROGRAM BASE REGISTER\n         LAE   R12,0(R15,0)            SET UP PROGRAM BASE REGISTER\n*                                      TO INDICATE STATUS SAVED ON\n*                                      THE LINKAGE STACK.\n         OPEN  (SYSPRINT,OUTPUT)       OPEN FILE\n         PUT   SYSPRINT,HEADING\n         SAM31\n         BRAS  R3,SCANPPT              SCAN THE PPT\n         SAM24\n         CLOSE SYSPRINT                CLOSE FILE\n         PR                            RETURN TO CALLER\nSCANPPT  EQU  *                        SCAN THE PPT TABLE\n         MVC   PPTMACRO,PPTABLE        MOVE THE IEFPPSCN MACRO AREA\n         XC    PPTTOKEN,PPTTOKEN       START AT TOP OF PPT\n         SR    R11,R11                 CLEAR LINE COUNT\nPPTRUN   EQU  *\n         MODESET MODE=SUP,KEY=ZERO     SUPERVISOR KEY 0 STATE\n         LA    R9,PPTINFO              @ PPT RETURN AREA\n         LA    R10,PPTMACRO            @ PPT MACRO AREA\n         IEFPPSCN REQUEST=NEXT,TOKEN=PPTTOKEN,PPTINFO=(R9),            X\n               MF=(E,(R10),COMPLETE)\n         LTR   R15,R15                 END OF SCAN?\n         JNZ   PPTEND                  END THE PPT SCAN\n         MODESET MODE=PROB,KEY=NZERO   PROBLEM KEY 8 STATE\n         LA    R8,PPTENT               @ OF PPT INFO\n         USING PPT1,R8                 INFORM THE ASSEMBLER\n         MVC   GPPTNAME,PPTNAME        PROGRAM NAME\n         MVC   GPPTNCNC,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNCNCL       NON CANCEL?\n         JNO   SPECPKEY                NO-\n         MVC   GPPTNCNC,=CL3'YES'      SET\nSPECPKEY EQU   *\n         MVC   GPPTSKEY,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTSKEY        SPECIAL STORAGE KEY?\n         JNO   NONSWAP                 NO-\n         MVC   GPPTSKEY,=CL3'YES'      SET\nNONSWAP  EQU   *\n         MVC   GPPTNSWP,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNSWP        NON-SWAPPABLE?\n         JNO   PRIV                    NO-\n         MVC   GPPTNSWP,=CL3'YES'      SET\nPRIV     EQU   *\n         MVC   GPPTPRIV,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTPRIV        PRIVILEGED?\n         JNO   SYSTASK                 NO-\n         MVC   GPPTPRIV,=CL3'YES'      SET\nSYSTASK  EQU   *\n         MVC   GPPTSYST,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTSYSTK       SYSTEM TASK?\n         JNO   NDSI                    NO-\n         MVC   GPPTSYST,=CL3'YES'      SET\nNDSI     DS    0H\n         MVC   GPPTNDSI,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNDSI        DATASET INTEGRITY?\n         JO    NOPASS                  NO-\n         MVC   GPPTNDSI,=CL3'YES'      SET\nNOPASS   DS    0H\n         MVC   GPPTNOPS,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNOPAS       BYPASS PASSWORD PROTECTION?\n         JNO   PROTKY                  NO-\n         MVC   GPPTNOPS,=CL3'YES'      SET\nPROTKY   DS    0H\n         SR    R7,R7                   ZEROIZE\n         IC    R7,PPTKEY               PICK UP THE PROTECT KEY\n         SRL   R7,4(0)                 MOVE INTO LOW BYTE\n         CVD   R7,DW                   CONVERT TO DECIMAL\n         UNPK  UNPKKEY,PROTKEY         MAKE IT READABLE\n         OI    UNPKKEY+L'UNPKKEY-1,X'F0'  FORCE SIGN TO F\n         MVC   GPPTKEYS,UNPKKEY+1      MOVE TO REXX AREA\nCPUAFF   DS    0H\n         LA    R5,PPTCPUA              @ CPU AFFINITY\n         LA    R6,L'PPTCPUA            LENGTH TO CONVERT\n         LA    R7,GPPTCPUA             @ OUTPUT AREA\nCPUAFFCN DS    0H\n         SR    R4,R4                   ZEROIZE\n         IC    R4,0(R5)                CHARACTER TO CONVERT\n         SRL   R4,4(0)                 REMOVE LOW NIBBLE\n         STC   R4,CHAR                 STORE\n         BRAS  R2,HEXCONV              DO THE HEX CONVERSION\n         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA\n         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA\n         MVC   CHAR,0(R5)              NEXT NIBBLE\n         NI    CHAR,X'0F'              REMOVE LOW NIBBLE\n         BRAS  R2,HEXCONV              DO THE HEX CONVERSION\n         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA\n         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA\n         LA    R5,1(,R5)               NEXT BYTE TO CONVERT\n         BRCT  R6,CPUAFFCN             DO WHILE R6 > 0?\nP2LPU    DS    0H\n         MVC   GPPT2LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT2LPU        2ND LEVEL PREFERED STORAGE\n         JNO   P1LPU                   NO-\n         MVC   GPPT2LPU,=CL3'YES'      SET\nP1LPU    DS    0H\n         MVC   GPPT1LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT1LPU        1ST LEVEL PREFERED STORAGE   PG1\n         JNO   PORIG                   NO-\n         MVC   GPPT2LPU,=CL3'YES'      SET                          PG1\nPORIG    DS    0H\n         MVC   GPPTORIG,=CL3'YES'      DEFAULT\n         TM    PPTORIG,PPTDEFLT        ORIGIN?\n         JO    OUTPUT                  OUTPUT\n         MVC   GPPTORIG,=CL3'NO '      SET\nOUTPUT   DS    0H\n         SAM24                         SWITCH TO 24 BIT ADDRESSING\n         PUT   SYSPRINT,PRTLINE\n         AHI   R11,1                   INCREMENT LINE COUNT\n         CHI   R11,18                  ASSUME VIEW THE OUTPUT IN\n         JNE   NOPGBRK                   TSO AND SET LINE COUNT\n         PUT   SYSPRINT,HEADING            TO 18\n         SR    R11,R11                 CLEAR LINE COUNT\nNOPGBRK  SAM31                         SWITCH TO 31 BIT ADDRESSING\n         J     PPTRUN                  YES\nPPTEND   DS    0H\n         SR    R15,R15                 RC=0\n         MODESET MODE=PROB,KEY=NZERO   PROBLEM KEY 8 STATE\n         BR    R3                      RETURN TO CALLER\nHEXCONV  EQU   *                       PRINT HEX ROUTINE\n         CLI   CHAR,X'09'              > 9?\n         JH    HEX10                   YES-\n         OI    CHAR,X'F0'              RANGE F0-F9\n         BR    R2                      RETURN TO CALLER\nHEX10    EQU   *\n         XR    R4,R4                   ZEROIZE\n         IC    R4,CHAR                 INSERT CHAR INTO REG\n         AHI   R4,-9                   GET CHAR NO\n         STC   R4,CHAR                 STORE\n         OI    CHAR,X'C0'              RANGE C0-C6\n         BR    R2                      RETURN TO CALLER\nSAVEAREA DC    CL72'    F1SA'          SAVEAREA\nDW       DS    D                       WORK AREA\nUNPKKEY  EQU   DW,3                    UNPACKED PROTECT KEY\nUNPKSTEM EQU   DW,3                    UNPACKED STEM\nPROTKEY  EQU   DW+6,2                  PROTECT KEY\nCHAR     DS    C                       A LONE CHARACTER\nPPTTOKEN DS    XL4                     IEFPPSCN TOKEN\nPPTMACRO DS    CL(PPTABLEL)            IEFPPSCN MACRO AREA\nPPTINFO  DS    0X                      PPT RETURN AREA\nPPTELEN  DS    AL2                     MAX PPT ENTRY LENGTH\nPPTENT   DS    CL(L'PPTENTRY)          PPT ENTRY LENGTH\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FB,LRECL=80\nHEADING  DS    0CL80\n         DC    CL9'NAME'\n         DC    CL6'CANCEL'\n         DC    CL5' KEY '\n         DC    CL6' NSWAP'\n         DC    CL5' PRIV'\n         DC    CL5' SYS '\n         DC    CL5' DSI '\n         DC    CL5' PWD '\n         DC    CL5'PKEY '\n         DC    CL6' AFFI '\n         DC    CL5'2LVL '\n         DC    CL5'1LVL '\n         DC    CL13'DFT ENTRY'\nPRTLINE  DS    0CL80\nGPPTNAME DC    CL8' '                  PROGRAM NAME\n         DC    C'  '\nGPPTNCNC DC    CL3' '                  NON/CANCEL\n         DC    C'   '\nGPPTSKEY DC    CL3' '                  SPECIAL PROTECT KEY\n         DC    C'   '\nGPPTNSWP DC    CL3' '                  NON/SWAPPABLE\n         DC    C'  '\nGPPTPRIV DC    CL3' '                  PRIVILEGED\n         DC    C'  '\nGPPTSYST DC    CL3' '                  SYSTEM TASK\n         DC    C'  '\nGPPTNDSI DC    CL3' '                  DSI\n         DC    C'  '\nGPPTNOPS DC    CL3' '                  BYPASS PASSWORD PROTECTION\n         DC    C'  '\nGPPTKEYS DC    CL2' '                  PROTECT KEY\n         DC    C'   '\nGPPTCPUA DC    CL4' '                  CPU AFFINITY\n         DC    C'  '\nGPPT2LPU DC    CL3' '                  2ND LEVEL STORAGE\n         DC    C'  '\nGPPT1LPU DC    CL3' '                  1ST LEVEL STORAGE\n         DC    C'  '\nGPPTORIG DC    CL3' '                  IBM DEFAULT ENTRY\n         DC    CL9' '\nGPPTLEN  EQU   *-GPPTNAME              ENTRY LENGTH\n         LTORG\n*\n* PPTSCAN ASSEMBLER ROUTINE\n*\n         PRINT NOGEN\n         IEFPPSCN MF=(L,PPTABLE,0D)\n         YREGS\n         CVT   DSECT=YES,LIST=NO       CVT DSECT\n         IEFJESCT                      JES2 CT\n         IEFZB610                      PPT\n         IKJTSVT                       TSVT\n         END   SHOWPPT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWPPT$": {"ttr": 8710, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00B\\x01\\x07\"_\\x01\\x15$\\x9f!%\\x00\\x1b\\x00\\x0e\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2007-08-13T00:00:00", "modifydate": "2015-09-06T21:25:42", "lines": 27, "newlines": 14, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(SHOWPPT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   SHOWPPT\n SETSSI  CB490612\n ENTRY   SHOWPPT\n NAME    SHOWPPT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRCHLOG": {"ttr": 8712, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01Q\\x00V\\x01 \\x00?\\x01 \\x00?\\x13P\\x01J\\x01J\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.81", "flags": 0, "createdate": "2020-01-03T00:00:00", "modifydate": "2020-01-03T13:50:56", "lines": 330, "newlines": 330, "modlines": 0, "user": "ASM"}, "text": "SRCHLOG  TITLE 'SYSLOG SEARCH UTILITY'\n*\n*---------------------------------------------------------------------*\n*  AUTHOR  - ALBERT CP CHENG                                          *\n*                                                                     *\n*  SRCHLOG - SEARCH SYSLOG WITH RECFM VBA/VB AND SEARCH STRINGS       *\n*            ACCORDING TO THE PARAMETERS FROM SYSIN                   *\n*            1) ONE SEARCH STRING PER INPUT LINE                      *\n*            2) THE LENGTH OF EACH STRING CANNOT EXCEED 40.           *\n*            3) SPACE IS ALLOWED IN THE SEARCH STRING AND THE DEFAULT *\n*               DELIMITER IS #.                                       *\n*            4) THE MAXIMUM NUMBER OF SEARCH STRINGS ARE 250.         *\n*            5) READ MULTIPLE LINES OF SYSLOG AS 1 MESSAGE. IF THE    *\n*               STRING IS FOUND, THE ENTIRE MESSAGE (INCLUDING ALL    *\n*               THE MULTIPLE LINES) ARE DISPLAYED.                    *\n*            6) THE LIMIT OF MULTIPLE LINES IS 200.                   *\n*            7) RETURN CODE 4 MEANS PROCESSING IS CONTIUNED           *\n*            8) RETURN CODE 8 MEANS THE PROCESSING IS ABORTED         *\n*            9) RECFM OF DDNAME SYSLOG/PRTFILE IS VBA                 *\n*           10) LRECL OF DDNAME SYSLOG/PRTFILE IS 135                 *\n*           11) MSG IEE174I/$HASP881 HAVE MORE THAN 200               *\n*               MULTIPLE LINES                                        *\n*           12) THE DEFAULT RECFM IS VBA                              *\n*                                                                     *\n*       RC    MESSAGE                                                 *\n*       8    'ERROR - SEARCH STRING LENGTH > 40 OR NO DELIMITER'      *\n*       8    'ERROR - NUMBER OF SEARCH STRINGS > 250'                 *\n*       8    'ERROR - NO SEARCH PARAMETERS'                           *\n*       8    'ERROR - RECFM SHOULD BE A OR B'                         *\n*       4    'ERROR - SKIP SEARCHING MULTIPLE LINES BEYOND 200'       *\n*       4    '                   STRING NOT FOUND !!!'                *\n*                                                                     *\n*       JCL - //PRINT   EXEC PGM=SRCHLOG,PARM='!B'                    *\n*             //STEPLIB   DD DSN=YOUR.LOADLIB,DISP=SHR                *\n*             //SYSLOG    DD DSN=SYSLOG.DATASET.NAME,DISP=SHR         *\n*             //PRTFILE   DD SYSOUT=*                                 *\n*             //SYSIN     DD *                                        *\n*             IEC161I 072-053!                                        *\n*             COMPLETION CODE=4039!                                   *\n*             //                                                      *\n*                                                                     *\n* ENHANCEMENT :                                                       *\n*   1) SET THE LIMIT OF MULTIPLE LINES TO 200 AND        23.05.2018   *\n*      IGNORES SEARCH THE STRING BEYOND LINE 200.                     *\n*   2) 1ST PARAMETER IS DELIMITER                        31.05.2018   *\n*      ACCEPT DELIMITER FROM PARAMETER AND THE                        *\n*      DEFAULT DELIMITER IS #                                         *\n*      THE ACCEPTED DELIMITER IS @#$%&                                *\n*   3) 2ND PARAMETER IS SYSLOG RECFM                     25.12.2019   *\n*      SUPPORT SYSLOG WITH RECFM VB AND VBA                           *\n*      THE DEFAULT RECFM IS VBA                                       *\n*      THE ACCEPTED PARAMETER IS EITHER A OR B                        *\n*      A MEANS RECFM VBA AND MEANS RECFM VB                           *\n*---------------------------------------------------------------------*\n         YREGS\nSRCHLOG  CSECT\n         J     GETPARM                 *\n         DC    C'&SYSDATE &SYSTIME'\nGETPARM  DS    0H                      *\n         BAKR  R14,0                   * SAVE R0-R15 TO LINKAGE STACK\n         LR    R12,R15                 * ESTABLISH ADDRESSIBILITY\n         USING SRCHLOG,R12             * TO R12 (IE R12 IS BASE REG)\n         USING TBLREC,R9               *\n         L     R1,0(R1)                * GET PARM LIST ADDR\n         LH    R15,0(R1)               * LOAD PARM LENGTH\n         LTR   R15,R15                 * PARAMETER LENGTH = 0 ??\n         JZ    OPENFILE                * BRANCH IF ZERO\n         MVC   DELIMIT(2),2(R1)        * MOVE DELIMITER            @03C\nOPENFILE OPEN  (SYSLOG,(INPUT),SYSIN,(INPUT),PRINT,(OUTPUT))\n         LTR   R15,R15                 * OPEN FILE ERROR ?\n         JNZ   EXIT                    * EXIT IF RC IS NON ZERO\n         CLI   RECFM,C'A'                                          @03A\n         JE    GETSTOR                                             @03A\n         CLI   RECFM,C'B'                                          @03A\n         JNE   ERROR5                                              @03A\nGETSTOR  STORAGE OBTAIN,LENGTH=37520   * 250*41 (10250) 135*202(27270)\n         LR    R7,R1                   * SAVE ADDRESS OF SEARCH STR TBL\n         ST    R1,SRCHTBL              * ADDRESS OF SEARCH STRING TABLE\n         SR    R11,R11                 * CLEAR R11\n         AHI   R1,10250                *\n         ST    R1,LOGTBL               * ADDRESS OF LOGREC TABLE\nREADPRM  GET   SYSIN,INBUF             * READ A RECORD FROM SYSIN\n         AHI   R11,1                   * INCREMENT # OF SEARCH STRINGS\n         CHI   R11,250                 * # OF SEARCH STRINGS > 250\n         JH    ERROR2                  * BRANCH IF > 250\n         SR    R0,R0                   * CLEAR R0 FOR IC INSTRUCTION\n         IC    R0,DELIMIT              * R0 IS SEARCH STRING\n         LA    R4,INBUF                * R4 -> STRING ADDRESS\n         LA    R5,41                   * R5 -> STRING LENGTH\n         LA    R3,0(R4,R5)             * R3 -> END OF STRING\nLOOP     SRST  R3,R4                   * SEARCH DELIMETER\n         JC    1,LOOP                  * LOOP UNTIL DELIMERER IS FOUND\n         JC    2,ERROR1                * DISPLAY ERROR MSG IF NOT FOUND\n         SR    R3,R4                   * CALC LENGTH OF THE PARAMETER\n         AHI   R3,-1                   * SUBT 1 FOR EXECUTE MVC INST\n         EX    R3,MVCPARM              * MVC  1(0,R7),INBUF\n         STC   R3,0(R7)                * SAVE LENGTH OF SEARCH STRING\n         AHI   R7,41                   * POINT TO NEXT SEARCH STRING\n         J     READPRM                 * READ NEXT RECORD\nEOP      CLOSE SYSIN                   * CLOSE SYSIN\n         LTR   R11,R11                 * SAVE NUMBER OF SEARCH PARMS\n         JZ    ERROR3                  * BRANCH IF NO INPUT DATA\n         STH   R11,ENTRY#              * SAVE NUMBER OF SEARCH PARMS\n         PUT   PRINT,TITLE1            * PRINT TITLE LINE\n         PUT   PRINT,BLANKS            * PRINT BLANK LINE\n*\nLOG000   DS    0H                      * LOAD MULTIPLE SYSLOG LOGREC\n         LHI   R7,200                  *      INTO LOGTBL\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\n         CLI   SWITCH,C'Y'             *\n         JE    LOG200                  *\n         MVC   0(135,R9),LOGREC        * MOVE LAST LOGREC TO\n         AHI   R9,135                  *    1ST ENTRY OF LOGREC TABLE\nLOG100   MVC   LOGREC,BLANKS           * CLEAR RECORD\n         GET   SYSLOG,LOGREC           * GET SYSLOG RECORD\nLOG200   MVC   0(135,R9),LOGREC        *\n         MVI   SWITCH,C'N'             * OFF FIRST SWITCH\n         CLI   RECFM,C'B'              * RECFM =                   @03A\n         JE    LOG300                  * BRANCH IF YES             @03A\n         CLI   RECORD+1,C'N'           * NORMAL LINE ? VBA\n         JE    ENDMULT                 * BRANCH IF YES\n         CLI   RECORD+1,C'M'           * MULTIPLE LINE HEADER VBA\n         JE    ENDMULT                 * BRANCH IF MULTIPLE RECORD\n         J     LOG350                  * BRANCH IF YES             @03A\nLOG300   CLI   RECORD,C'N'             * NORMAL LINE VB ?          @03A\n         JE    ENDMULT                 * BRANCH IF YES             @03A\n         CLI   RECORD,C'M'             * MULTIPLE LINE HEADER VB   @03A\n         JE    ENDMULT                 * BRANCH IF MULTIPLE RECORD @03A\nLOG350   AHI   R9,135                  *\n         JCT   R7,LOG100               *\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            *\n         LHI   R0,L'EMSG4              *\n         AHI   R0,8                    *\n         STH   R0,LOGREC               * SAVE RECORD LENGTH\n         MVC   LOGREC+8(L'EMSG4),EMSG4 * WRITE ERROR MESSAGE EMSG4\n         PUT   PRINT,LOGREC            *\n         LHI   R15,4                   * SET RETURN CODE TO 4\n         STH   R15,RETCODE             * SAVE RETURN CODE\n* IGNORES MULTIPLE LINES MORE THAN 200\n         L     R9,LOGTBL\n         PUT   PRINT,0(R9)             * WRITE CURRENT RECORD\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE\nLOG400   MVC   LOGREC,BLANKS           * CLEAR RECORD\n         GET   SYSLOG,LOGREC           * GET SYSLOG RECORD\n         CLI   RECFM,C'B'              * RECFM VB                  @03A\n         JE    LOG500                  * BRANCH IF YES             @03A\n         CLI   LOGVBA,C'N'             * NORMAL LINE (VBA)\n         JE    ENDMULT                 * BRANCH IF YES\n         CLI   LOGVBA,C'M'             * MULTIPLE LINE HEADER (VBA)\n         JNE   LOG400                  * BRANCH IF MULTIPLE RECORD\n         J     ENDMULT                                             @03A\nLOG500   CLI   LOGVB,C'N'              * NORMAL LINE (VB)          @03A\n         JE    ENDMULT                 * BRANCH IF YES             @03A\n         CLI   LOGVB,C'M'              * MULTIPLE LINE HEADER (VB) @03A\n         JNE   LOG400                  * BRANCH IF MULTIPLE RECORD @03A\nENDMULT  STH   R7,LINECT               * NEW MESSAGE LINE\n         LHI   R4,201                  *\n         SH    R4,LINECT               * # OF MULTIPLE LINES\n         STH   R4,LINECT               * NUMBER OF LOGREC\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\nSRCH20   LH    R11,ENTRY#              * NUMBER OF SEARCH PARMS\n         L     R7,SRCHTBL              * ADDRESS OF SEARCH STRING TABLE\n         LH    R6,RECLEN               * LOAD RECORD LENGTH\n         CHI   R6,62                   * SHORT RECORD ??\n         JL    SRCH70                  * BRANCH IF SHORT RECORD\n         AHI   R6,-44                  *\n         LR    R8,R6                   * SAVE R6 TO R8\nSRCH30   LA    R5,RECORD+56            * R5 -> RECORD\n         SR    R10,R10                 * CLEAR R10 FOR IC INSTR\n         IC    R10,0(R7)               * GET LENGTH OF SEARCH PARM\n         LR    R6,R8                   * RESTORE R6\nSRCH50   EX    R10,COMPARM             * CLC  1(0,R7),0(R5)\n         JE    PUTLOG                  * EQ THEN WRITE THE RECORD\n         LA    R5,1(R5)                * INCR. POSITION IN LOG RECORD\n         JCT   R6,SRCH50               * SEARCH CHARACTER BY CHARACTER\n         AHI   R7,41                   * NEXT SEARCH STRING\n         JCT   R11,SRCH30              * SEARCH\nSRCH70   AHI   R9,135                  * POINT TO NEXT LOG TABLE ENTRY\n         JCT   R4,SRCH20               * PROCESS NEXT LOG TABLE ENTRY\n         J     LOG000                  * CONTINUE\nPUTLOG   LH    R4,LINECT               * LOAD # OF MULTIPLE LOG REC\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\nPUTLOG2  PUT   PRINT,0(R9)             * WRITE LOG RECORD TABLE\n         AHI   R9,135                  * POINT TO NEXT ENTRY\n         JCT   R4,PUTLOG2              * PROCESS NEXT ENTRY\n         MVI   EMPTY,C'N'              * SET SWITCH TO NOT EMPTY\n         J     LOG000                  * CONTINUE\nABEND    DC    X'0000'\n*---------------------------------------------------------------------*\n* ERROR MESSAGES                                                      *\n*---------------------------------------------------------------------*\nERROR1   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE\n         LHI   R0,L'EMSG1              * LOAD THE LENGTH OF EMSG1\n         AHI   R0,8                    *\n         STH   R0,LOGREC               * SAVE RECORD LENGTH\n         MVC   LOGREC+8(L'EMSG1),EMSG1 *\n         PUT   PRINT,LOGREC            * WRITE ERROR MESSAGE EMSG1\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            *\n         MVC   LOGREC+5(L'INBUF),INBUF *\n*        PUT   PRINT,LOGREC            * PRINT ERROR PARAMETER\n         J     CC8                     * SET RETURN CODE 8 AND ABORT\nERROR2   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE\n         LHI   R0,L'EMSG2              * LOAD THE LENGTH OF EMSG2\n         AHI   R0,8                    *\n         STH   R0,LOGREC               * SAVE RECORD LENGTH\n         MVC   LOGREC+8(L'EMSG2),EMSG2 *\n*        PUT   PRINT,LOGREC            *\n         J     CC8                     * SET RETURN CODE 8 AND ABORT\nERROR3   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE\n         LHI   R0,L'EMSG3              * LOAD THE LENGTH OF EMSG3\n         AHI   R0,8                    *\n         STH   R0,LOGREC               * SAVE RECORD LENGTH\n         MVC   LOGREC+8(L'EMSG3),EMSG3 * WRITE ERROR MESSAGE EMSG3\n*        PUT   PRINT,LOGREC            *\n         J     CC8                     * SET RETURN CODE 8 AND ABORT\nERROR5   PUT   PRINT,TITLE1            * WRITE TITLE               @03A\n         MVC   LOGREC(136),BLANKS      *                           @03A\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE        @03A\n         LHI   R0,L'EMSG5              * LOAD THE LENGTH OF EMSG5  @03A\n         AHI   R0,8                    *                           @03A\n         STH   R0,LOGREC               * SAVE RECORD LENGTH        @03A\n         MVC   LOGREC+8(L'EMSG5),EMSG5 * WRITE ERROR MESSAGE EMSG5 @03A\n         LHI   R15,8                   * SET RETURN CODE TO 8      @03A\n         PUT   PRINT,LOGREC            *                           @03A\n         PR                            *                           @03A\nCC8      PUT   PRINT,LOGREC            *\n         LHI   R15,8                   * SET RETURN CODE TO 8\n         STH   R15,RETCODE             * SAVE RETURN CODE\n         J     CLOSEFL                 * ABORT\n*---------------------------------------------------------------------*\n* END ROUTINES                                                        *\n*---------------------------------------------------------------------*\nEOF      CLI   EMPTY,C'N'              * STRING NOT FIND\n         JE    CLOSEFL                 * BRANCH IF YES\n         PUT   PRINT,BLANKS            *\n         PUT   PRINT,BLANKS            *\n         PUT   PRINT,NFIND             * DISPLAY STRING NOT FOUND\n         LHI   R15,4                   * SET RETURN CODE TO 4\n         STH   R15,RETCODE             * SAVE RETURN CODE\nCLOSEFL  CLOSE (PRINT,,SYSLOG)         * CLOSE SYSLOG\n         STORAGE RELEASE,LENGTH=37520,ADDR=SRCHTBL\n         LH    R15,RETCODE             * RESTORE RETURN CODE\nEXIT     PR                            * RETURN TO ZOS\nMVCPARM  MVC   1(0,R7),INBUF           * MOVE PARM FROM INBUF\nCOMPARM  CLC   1(0,R7),0(R5)           * COMPARE NAME TO RECORD ?\n*\n*---------------------------------------------------------------------*\n* CONSTANTS AND STORAGE AREAS                                         *\n*---------------------------------------------------------------------*\nEMSG1    DC    C'ERROR - SEARCH STRING LENGTH > 40 OR NO DELIMITER'\nEMSG2    DC    C'ERROR - NUMBER OF SEARCH STRINGS > 250'\nEMSG3    DC    C'ERROR - NO SEARCH PARAMETER'\nEMSG4    DC    C'SKIP SEARCHING THE FOLLOWING LINE ( > 200)'\nEMSG5    DC    C'ERROR - RECFM SHOULD BE A OR B'                   @03A\nDELIMIT  DC    C'#'                    * DEFAULT DELIMITER AND VBA\nRECFM    DC    C'A'                    * DEFAULT RECFM A  -> VBA\n*                                                      B  -> VB\nSRCHTBL  DC    A(0)                    * ADDRESS OF SEARCH STRING TABLE\nLOGTBL   DC    A(0)                    * ADDRESS OF LOGREC TABLE\nENTRY#   DC    H'0'                    * NUMBER OF SEARCH PARAMETERS\nLINECT   DC    H'0'                    * NUMBER OF MULTIPLE LINES\nRETCODE  DC    H'0'                    * RETURN CODE\nEMPTY    DC    C'Y'                    *\nSWITCH   DC    C'Y'                    * FIRST TIME SWITCH\n*\n*   STORAGE DEFINING INPUT RECORD FROM SYSLOG DATASET\n*\nINBUF    DS    CL80                    * SYSIN RECORD\nLOGREC   DC    H'135'                  * RECORD LENGTH\n         DC    H'00'\nLOGVB    DC    C' '                    * VB  START\nLOGVBA   DC    CL130' '                * VBA START\n*\nTITLE1   DC    H'122'\n         DC    H'0'\n         DC    CL16' '\n         DC    CL40'*--------------------------------------*'\n         DC    CL22'   SEARCH SYSLOG      '\n         DC    CL40'*--------------------------------------*'\nNFIND    DC    H'47'\n         DC    H'0'\n         DC    CL22' '\n         DC    CL21'STRING NOT FOUND !!! '\nBLANKS   DC    H'135',H'0',CL131' '\n*\n*---------------------------------------------------------------------*\n* DCB'S                                                               *\n*---------------------------------------------------------------------*\n*\n*    INPUT SYSLOG\n*\nSYSLOG   DCB   DDNAME=SYSLOG,                                          C\n               MACRF=GM,                                               C\n               DSORG=PS,                                               C\n               RECFM=VBA,                                              C\n               LRECL=135,                                              C\n               EODAD=EOF\n*\n*    INPUT SYSIN\n*\nSYSIN    DCB   DDNAME=SYSIN,                                           C\n               MACRF=GM,                                               C\n               DSORG=PS,                                               C\n               RECFM=FB,                                               C\n               LRECL=80,                                               C\n               EODAD=EOP\n*\n*   OUTPUT FILES\n*\nPRINT    DCB   DDNAME=PRTFILE,                                         C\n               MACRF=PM,                                               C\n               DSORG=PS,                                               C\n               RECFM=VBA,                                              C\n               LRECL=135\nTBLREC   DSECT\n         DS    0CL135                * SYSLOG RECORD\nRECLEN   DS    CL2                   * 2 BYTES RECORD LENGTH\n         DS    CL2                   * 2 BYTES BLOCK LENGTH\nRECORD   DS    CL132                 * FILLER\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRCHLOG@": {"ttr": 8961, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x18\\x01\\x195\\x9f\\x01\\x195\\x9f#A\\x01!\\x01!\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-12-25T00:00:00", "modifydate": "2019-12-25T23:41:18", "lines": 289, "newlines": 289, "modlines": 0, "user": "ASM"}, "text": "SRCHLOG TITLE 'SYSLOG SEARCH UTILITY'\n*\n*---------------------------------------------------------------------*\n*  AUTHOR  - ALBERT CP CHENG                                          *\n*                                                                     *\n*  SRCHLOG - SEARCH SYSLOG WITH RECFM VB AND SEARCH STRING FROM       *\n*            ACCORDING TO THE PARAMETERS FROM SYSIN                   *\n*            1) ONE SEARCH STRING PER INPUT LINE                      *\n*            2) THE LENGTH OF EACH STRING CANNOT EXCEED 40.           *\n*            3) SPACE IS ALLOWED IN THE SEARCH STRING AND THE DEFAULT *\n*               DELIMITER IS #.                                       *\n*            4) THE MAXIMUM NUMBER OF SEARCH STRINGS ARE 250.         *\n*            5) READ MULTIPLE LINES OF SYSLOG AS 1 MESSAGE. IF THE    *\n*               STRING IS FOUND, THE ENTIRE MESSAGE (INCLUDING ALL    *\n*               THE MULTIPLE LINES) ARE DISPLAYED.                    *\n*            6) THE LIMIT OF MULTIPLE LINES IS 200.                   *\n*            7) RETURN CODE 4 MEANS PROCESSING IS CONTIUNED           *\n*            8) RETURN CODE 8 MEANS THE PROCESSING IS ABORTED         *\n*            9) RECFM OF DDNAME SYSLOG/PRTFILE IS VBA                 *\n*           10) LRECL OF DDNAME SYSLOG/PRTFILE IS 135                 *\n*           11) MSG IEE174I/$HASP881 HAVE MORE THAN 200               *\n*               MULTIPLE LINES                                        *\n*                                                                     *\n*       RC    MESSAGE                                                 *\n*       8    'ERROR - SEARCH STRING LENGTH > 40 OR NO DELIMITER'      *\n*       8    'ERROR - NUMBER OF SEARCH STRINGS > 250'                 *\n*       8    'ERROR - NO SEARCH PARAMETERS'                           *\n*       4    'ERROR - SKIP SEARCHING MULTIPLE LINES BEYOND 200'       *\n*       4    '                   STRING NOT FOUND !!!'                *\n*                                                                     *\n*       JCL - //PRINT   EXEC PGM=SRCHLOG,PARM='!'                     *\n*             //STEPLIB   DD DSN=YOUR.LOADLIB,DISP=SHR                *\n*             //SYSLOG    DD DSN=SYSLOG.DATASET.NAME,DISP=SHR         *\n*             //PRTFILE   DD SYSOUT=*                                 *\n*             //SYSIN     DD *                                        *\n*             IEC161I 072-053!                                        *\n*             COMPLETION CODE=4039!                                   *\n*             //                                                      *\n*                                                                     *\n* ENHANCEMENT :                                                       *\n*   1) SET THE LIMIT OF MULTIPLE LINES TO 200 AND        23.05.2018   *\n*      IGNORES SEARCH THE STRING BEYOND LINE 200.                     *\n*   2) ACCEPT DELIMITER FROM PARAMETER AND THE           31.05.2018   *\n*      DEFAULT DELIMITER IS #                                         *\n*---------------------------------------------------------------------*\n         YREGS\nSRCHLOG  CSECT\n         BAKR  R14,0                   * SAVE R0-R15 TO LINKAGE STACK\n         LR    R12,R15                 * ESTABLISH ADDRESSIBILITY\n         USING SRCHLOG,R12             * TO R12 (IE R12 IS BASE REG)\n         USING LOGREC,R9               *\n         J     GETPARM                 *\n         DC    C'&SYSDATE &SYSTIME'\nGETPARM  DS    0H                      *\n         L     R1,0(R1)                * GET PARM LIST ADDR\n         LH    R15,0(R1)               * LOAD PARM LENGTH\n         LTR   R15,R15                 * PARAMETER LENGTH = 0 ??\n         JZ    OPENFILE                * BRANCH IF NOT ZERO\n         MVC   DELIMIT,2(R1)           * MOVE DELIMITER\nOPENFILE OPEN  (SYSLOG,(INPUT),SYSIN,(INPUT),PRINT,(OUTPUT))\n         LTR   R15,R15                 * OPEN FILE ERROR ?\n         JNZ   EXIT                    * EXIT IF RC IS NON ZERO\n         STORAGE OBTAIN,LENGTH=37520   * 250*41 (10250) 135*202(27270)\n         LR    R7,R1                   * SAVE ADDRESS OF SEARCH STR TBL\n         ST    R1,SRCHTBL              * ADDRESS OF SEARCH STRING TABLE\n         SR    R11,R11                 * CLEAR R11\n         AHI   R1,10250                *\n         ST    R1,LOGTBL               * ADDRESS OF LOGREC TABLE\nREADPRM  GET   SYSIN,INBUF             * READ A RECORD FROM SYSIN\n         AHI   R11,1                   * INCREMENT # OF SEARCH STRINGS\n         CHI   R11,250                 * # OF SEARCH STRINGS > 250\n         JH    ERROR2                  * BRANCH IF > 250\n         SR    R0,R0                   * CLEAR R0 FOR IC INSTRUCTION\n         IC    R0,DELIMIT              * R0 IS SEARCH STRING\n         LA    R4,INBUF                * R4 -> STRING ADDRESS\n         LA    R5,41                   * R5 -> STRING LENGTH\n         LA    R3,0(R4,R5)             * R3 -> END OF STRING\nLOOP     SRST  R3,R4                   * SEARCH DELIMETER\n         JC    1,LOOP                  * LOOP UNTIL DELIMERER IS FOUND\n         JC    2,ERROR1                * DISPLAY ERROR MSG IF NOT FOUND\n         SR    R3,R4                   * CALC LENGTH OF THE PARAMETER\n         AHI   R3,-1                   * SUBT 1 FOR EXECUTE MVC INST\n         EX    R3,MVCPARM              * MVC  1(0,R7),INBUF\n         STC   R3,0(R7)                * SAVE LENGTH OF SEARCH STRING\n         AHI   R7,41                   * POINT TO NEXT SEARCH STRING\n         J     READPRM                 * READ NEXT RECORD\nEOP      CLOSE SYSIN                   * CLOSE SYSIN\n         LTR   R11,R11                 * SAVE NUMBER OF SEARCH PARMS\n         JZ    ERROR3                  * BRANCH IF NO INPUT DATA\n         STH   R11,ENTRY#              * SAVE NUMBER OF SEARCH PARMS\n         PUT   PRINT,TITLE1            * PRINT TITLE LINE\n         PUT   PRINT,BLANKS            * PRINT BLANK LINE\n*\nMAIN000  DS    0H                      * LOAD RECORD LENGTH\n         LHI   R7,200                  * MAXIMUM 60 LINES\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\n         CLI   SWITCH,C'Y'             *\n         JE    READ200                 *\n         MVC   0(135,R9),RECORDS       * MOVE LAST LOGREC TO\n         AHI   R9,135                  * 1ST ENTRY OF LOGREC TABLE\nREAD100  MVC   RECORDS,BLANKS          * CLEAR RECORD\n         GET   SYSLOG,RECORDS          * GET SYSLOG RECORD\nREAD200  MVC   0(135,R9),RECORDS       *\n         MVI   SWITCH,C'N'             * OFF FIRST SWITCH\n         CLI   RECORD,C'N'             * NORMAL LINE ?\n         JE    ENDMULT                 * BRANCH IF YES\n         CLI   RECORD,C'M'             * MULTIPLE LINE HEADER ?\n         JE    ENDMULT                 * BRANCH IF MULTIPLE RECORD\n         AHI   R9,135                  *\n         JCT   R7,READ100              *\n         MVC   RECORDS(136),BLANKS     *\n         PUT   PRINT,RECORDS           *\n         LHI   R0,L'EMSG4              *\n         AHI   R0,8                    *\n         STH   R0,RECORDS              * SAVE RECORD LENGTH\n         MVC   RECORDS+8(L'EMSG4),EMSG4 * WRITE ERROR MESSAGE EMSG4\n         PUT   PRINT,RECORDS           *\n         LHI   R15,4                   * SET RETURN CODE TO 4\n         STH   R15,RETCODE             * SAVE RETURN CODE\n* IGNORES MULTIPLE LINES MORE THAN 200\n         L     R9,LOGTBL\n         PUT   PRINT,0(R9)             * WRITE CURRENT RECORD\n         MVC   RECORDS(136),BLANKS     *\n         PUT   PRINT,RECORDS           * WRITE A BLANK LINE\nREAD400  MVC   RECORDS,BLANKS          * CLEAR RECORD\n         GET   SYSLOG,RECORDS          * GET SYSLOG RECORD\n         CLI   RECORDI+1,C'N'          * NORMAL LINE ?\n         JE    ENDMULT                 * BRANCH IF YES\n         CLI   RECORDI+1,C'M'          * MULTIPLE LINE HEADER ?\n         JNE   READ400                 * BRANCH IF MULTIPLE RECORD\nENDMULT  STH   R7,LINECT               * NEW MESSAGE LINE\n         LHI   R4,201                  *\n         SH    R4,LINECT               * # OF MULTIPLE LINES\n         STH   R4,LINECT               * NUMBER OF RECORDS\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\nSRCH20   LH    R11,ENTRY#              * NUMBER OF SEARCH PARMS\n         L     R7,SRCHTBL              * ADDRESS OF SEARCH STRING TABLE\n         LH    R6,RECLEN               * LOAD RECORD LENGTH\n         CHI   R6,62                   * SHORT RECORD ??\n         JL    SRCH70                  * BRANCH IF SHORT RECORD\n         AHI   R6,-44                  *\n         LR    R8,R6                   * SAVE R6 TO R8\nSRCH30   LA    R5,RECORD+57            * R5 -> RECORD\n         SR    R10,R10                 * CLEAR R10 FOR IC INSTR\n         IC    R10,0(R7)               * GET LENGTH OF SEARCH PARM\n         LR    R6,R8                   * RESTORE R6\nSRCH50   EX    R10,COMPARM             * CLC  1(0,R7),0(R5)\n         JE    PUTLOG                  * EQ THEN WRITE THE RECORD\n         LA    R5,1(R5)                * INCR. POSITION IN LOG RECORD\n         JCT   R6,SRCH50               * SEARCH CHARACTER BY CHARACTER\n         AHI   R7,41                   * NEXT SEARCH STRING\n         JCT   R11,SRCH30              * SEARCH\nSRCH70   AHI   R9,135                  * POINT TO NEXT LOGREC\n         JCT   R4,SRCH20               * PROCESS NEXT LOGREC\n         J     MAIN000                 * CONTINUE\nPUTLOG   LH    R4,LINECT               * WRITE SYSLOG\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\nPUTLOG2  PUT   PRINT,0(R9)             * WRITE CURRENT RECORD\n         AHI   R9,135                  * POINT TO NEXT LOGREC\n         JCT   R4,PUTLOG2              * PROCESS NEXT LOGREC\n         MVI   EMPTY,C'N'              * SET SWITCH TO NOT EMPTY\n         J     MAIN000                 * CONTINUE\nABEND    DC    X'0000'\n*---------------------------------------------------------------------*\n* ERROR MESSAGES                                                      *\n*---------------------------------------------------------------------*\nERROR1   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   RECORDS(136),BLANKS     *\n         PUT   PRINT,RECORDS           * WRITE A BLANK LINE\n         LHI   R0,L'EMSG1              *\n         AHI   R0,8                    *\n         STH   R0,RECORDS              * SAVE RECORD LENGTH\n         MVC   RECORDS+8(L'EMSG1),EMSG1 *\n         PUT   PRINT,RECORDS           * WRITE ERROR MESSAGE EMSG1\n         MVC   RECORDS(136),BLANKS     *\n         PUT   PRINT,RECORDS           *\n         MVC   RECORDS+5(L'INBUF),INBUF  *\n         PUT   PRINT,RECORDS           * PRINT ERROR PARAMETER\n         J     CC8                     * SET RETURN CODE 8 AND ABORT\nERROR2   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   RECORDS(136),BLANKS     *\n         PUT   PRINT,RECORDS           * WRITE A BLANK LINE\n         LHI   R0,L'EMSG2              *\n         AHI   R0,8                    *\n         STH   R0,RECORDS              * SAVE RECORD LENGTH\n         MVC   RECORDS+8(L'EMSG2),EMSG2 *\n         PUT   PRINT,RECORDS           *\n         J     CC8                     * SET RETURN CODE 8 AND ABORT\nERROR3   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   RECORDS(136),BLANKS     *\n         PUT   PRINT,RECORDS           * WRITE A BLANK LINE\n         LHI   R0,L'EMSG3              *\n         AHI   R0,8                    *\n         STH   R0,RECORDS              * SAVE RECORD LENGTH\n         MVC   RECORDS+8(L'EMSG3),EMSG3 * WRITE ERROR MESSAGE EMSG3\n         PUT   PRINT,RECORDS           *\nCC8      LHI   R15,8                   * SET RETURN CODE TO 8\n         STH   R15,RETCODE             * SAVE RETURN CODE\n         J     CLOSEFL                 * ABORT\n*---------------------------------------------------------------------*\n* END ROUTINES                                                        *\n*---------------------------------------------------------------------*\nEOF      CLI   EMPTY,C'N'              * STRING NOT FIND\n         JE    CLOSEFL                 * BRANCH IF YES\n         PUT   PRINT,BLANKS            *\n         PUT   PRINT,BLANKS            *\n         PUT   PRINT,NFIND             * DISPLAY STRING NOT FOUND\n         LHI   R15,4                   * SET RETURN CODE TO 4\n         STH   R15,RETCODE             * SAVE RETURN CODE\nCLOSEFL  CLOSE (PRINT,,SYSLOG)         * CLOSE SYSLOG\n         STORAGE RELEASE,LENGTH=37520,ADDR=SRCHTBL\n         LH    R15,RETCODE             * RESTORE RETURN CODE\nEXIT     PR                            * RETURN TO ZOS\nMVCPARM  MVC   1(0,R7),INBUF           * MOVE PARM FROM INBUF\nCOMPARM  CLC   1(0,R7),0(R5)           * COMPARE NAME TO RECORD ?\n*\n*---------------------------------------------------------------------*\n* CONSTANTS AND STORAGE AREAS                                         *\n*---------------------------------------------------------------------*\nEMSG1    DC    C'ERROR - SEARCH STRING LENGTH > 40 OR NO DELIMITER'\nEMSG2    DC    C'ERROR - NUMBER OF SEARCH STRINGS > 250'\nEMSG3    DC    C'ERROR - NO SEARCH PARAMETER'\nEMSG4    DC    C'SKIP SEARCHING THE FOLLOWING LINE ( > 200)'\nDELIMIT  DC    C'#'                    * DEFAULT DELIMITER\n*\nSRCHTBL  DC    A(0)                    * ADDRESS OF SEARCH STRING TABLE\nLOGTBL   DC    A(0)                    * ADDRESS OF LOGREC TABLE\nENTRY#   DC    H'0'                    * NUMBER OF SEARCH PARAMETERS\nLINECT   DC    H'0'                    * NUMBER OF MULTIPLE LINES\nRETCODE  DC    H'0'                    * RETURN CODE\nEMPTY    DC    C'Y'                    *\nSWITCH   DC    C'Y'                    * FIRST TIME SWITCH\n*\n*   STORAGE DEFINING INPUT RECORD FROM SYSLOG DATASET\n*\nINBUF    DS    CL80                  * SYSIN RECORD\nRECORDS  DC    H'135'                * RECORD LENGTH\n         DC    H'00'\nRECORDI  DC    CL131' '              * SYSLOG RECORD\n*\nTITLE1   DC    H'122'\n         DC    H'0'\n         DC    CL16' '\n         DC    CL40'*--------------------------------------*'\n         DC    CL22'   SEARCH SYSLOG      '\n         DC    CL40'*--------------------------------------*'\nNFIND    DC    H'47'\n         DC    H'0'\n         DC    CL22' '\n         DC    CL21'STRING NOT FOUND !!! '\nBLANKS   DC    H'135',H'0',CL131' '\n*\n*---------------------------------------------------------------------*\n* DCB'S                                                               *\n*---------------------------------------------------------------------*\n*\n*    INPUT SYSLOG\n*\nSYSLOG   DCB   DDNAME=SYSLOG,                                          C\n               MACRF=GM,                                               C\n               DSORG=PS,                                               C\n               RECFM=VBA,                                              C\n               LRECL=135,                                              C\n               EODAD=EOF\n*\n*    INPUT SYSIN\n*\nSYSIN    DCB   DDNAME=SYSIN,                                           C\n               MACRF=GM,                                               C\n               DSORG=PS,                                               C\n               RECFM=FB,                                               C\n               LRECL=80,                                               C\n               EODAD=EOP\n*\n*   OUTPUT FILES\n*\nPRINT    DCB   DDNAME=PRTFILE,                                         C\n               MACRF=PM,                                               C\n               DSORG=PS,                                               C\n               RECFM=VBA,                                              C\n               LRECL=135\nLOGREC   DSECT\n         DS    0CL135                * SYSLOG RECORD\nRECLEN   DS    CL2                   * 2 BYTES RECORD LENGTH\n         DS    CL2                   * 2 BYTES BLOCK LENGTH\n         DS    CL1                   * ATTRIBUTE\nRECORD   DS    CL131                 * FILLER\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRCHLOGF": {"ttr": 8967, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00P\\x01 \\x00?\\x01 \\x00?\\x13P\\x01@\\x01@\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2020-01-03T00:00:00", "modifydate": "2020-01-03T13:50:50", "lines": 320, "newlines": 320, "modlines": 0, "user": "ASM"}, "text": "SRCHLOGF TITLE 'SYSLOG SEARCH UTILITY'\n*\n*---------------------------------------------------------------------*\n*  AUTHOR  - ALBERT CP CHENG                                          *\n*                                                                     *\n*  SRCHLOGF -SEARCH SYSLOG WITH RECFM FBA AND SEARCH STRINGS          *\n*            ACCORDING TO THE PARAMETERS FROM SYSIN                   *\n*            1) ONE SEARCH STRING PER INPUT LINE                      *\n*            2) THE LENGTH OF EACH STRING CANNOT EXCEED 40.           *\n*            3) SPACE IS ALLOWED IN THE SEARCH STRING AND THE DEFAULT *\n*               DELIMITER IS #.                                       *\n*            4) THE MAXIMUM NUMBER OF SEARCH STRINGS ARE 250.         *\n*            5) READ MULTIPLE LINES OF SYSLOG AS 1 MESSAGE. IF THE    *\n*               STRING IS FOUND, THE ENTIRE MESSAGE (INCLUDING ALL    *\n*               THE MULTIPLE LINES) ARE DISPLAYED.                    *\n*            6) THE LIMIT OF MULTIPLE LINES IS 200.                   *\n*            7) RETURN CODE 4 MEANS PROCESSING IS CONTIUNED           *\n*            8) RETURN CODE 8 MEANS THE PROCESSING IS ABORTED         *\n*            9) RECFM OF DDNAME SYSLOG/PRTFILE IS FBA                 *\n*           10) LRECL OF DDNAME SYSLOG/PRTFILE IS 133                 *\n*           11) MSG IEE174I/$HASP881 HAVE MORE THAN 200               *\n*               MULTIPLE LINES                                        *\n*           12) THE SYSLOG RECFM IS FBA AND LRECL 133                 *\n*                                                                     *\n*       RC    MESSAGE                                                 *\n*       8    'ERROR - SEARCH STRING LENGTH > 40 OR NO DELIMITER'      *\n*       8    'ERROR - NUMBER OF SEARCH STRINGS > 250'                 *\n*       8    'ERROR - NO SEARCH PARAMETERS'                           *\n*       4    'ERROR - SKIP SEARCHING MULTIPLE LINES BEYOND 200'       *\n*       4    '                   STRING NOT FOUND !!!'                *\n*                                                                     *\n*       JCL - //PRINT   EXEC PGM=SRCHLOGF,PARM='!'                    *\n*             //STEPLIB   DD DSN=YOUR.LOADLIB,DISP=SHR                *\n*             //SYSLOG    DD DSN=SYSLOG.DATASET.FBA,DISP=SHR          *\n*             //PRTFILE   DD SYSOUT=*                                 *\n*             //SYSIN     DD *                                        *\n*             IEC161I 072-053!                                        *\n*             COMPLETION CODE=4039!                                   *\n*             //                                                      *\n*                                                                     *\n* ENHANCEMENT :                                                       *\n*   1) SET THE LIMIT OF MULTIPLE LINES TO 200 AND        23.05.2018   *\n*      IGNORES SEARCH THE STRING BEYOND LINE 200.                     *\n*   2) 1ST PARAMETER IS DELIMITER                        31.05.2018   *\n*      ACCEPT DELIMITER FROM PARAMETER AND THE                        *\n*      DEFAULT DELIMITER IS #                                         *\n*      THE ACCEPTED DELIMITER IS @#$%&                                *\n*---------------------------------------------------------------------*\n         YREGS\nSRCHLOGF CSECT\n         J     GETPARM                 *\n         DC    C'&SYSDATE &SYSTIME SRCHLOGF'\nGETPARM  DS    0H                      *\n         BAKR  R14,0                   * SAVE R0-R15 TO LINKAGE STACK\n         LR    R12,R15                 * ESTABLISH ADDRESSIBILITY\n         USING SRCHLOGF,R12            * TO R12 (IE R12 IS BASE REG)\n         USING TBLREC,R9               *\n         L     R1,0(R1)                * GET PARM LIST ADDR\n         LH    R15,0(R1)               * LOAD PARM LENGTH\n         LTR   R15,R15                 * PARAMETER LENGTH = 0 ??\n         JZ    OPENFILE                * BRANCH IF ZERO\n         MVC   DELIMIT(1),2(R1)        * MOVE DELIMITER            @03C\nOPENFILE OPEN  (SYSLOG,(INPUT),SYSIN,(INPUT),PRINT,(OUTPUT))\n         LTR   R15,R15                 * OPEN FILE ERROR ?\n         JNZ   EXIT                    * EXIT IF RC IS NON ZERO\n*        CLI   RECFM,C'A'                                          @03A\n*        JE    GETSTOR                                             @03A\n*        CLI   RECFM,C'B'                                          @03A\n*        JNE   ERROR5                                              @03A\nGETSTOR  STORAGE OBTAIN,LENGTH=37520   * 250*41 (10250) 135*202(27270)\n         LR    R7,R1                   * SAVE ADDRESS OF SEARCH STR TBL\n         ST    R1,SRCHTBL              * ADDRESS OF SEARCH STRING TABLE\n         SR    R11,R11                 * CLEAR R11\n         AHI   R1,10250                *\n         ST    R1,LOGTBL               * ADDRESS OF LOGREC TABLE\nREADPRM  GET   SYSIN,INBUF             * READ A RECORD FROM SYSIN\n         AHI   R11,1                   * INCREMENT # OF SEARCH STRINGS\n         CHI   R11,250                 * # OF SEARCH STRINGS > 250\n         JH    ERROR2                  * BRANCH IF > 250\n         SR    R0,R0                   * CLEAR R0 FOR IC INSTRUCTION\n         IC    R0,DELIMIT              * R0 IS SEARCH STRING\n         LA    R4,INBUF                * R4 -> STRING ADDRESS\n         LA    R5,41                   * R5 -> STRING LENGTH\n         LA    R3,0(R4,R5)             * R3 -> END OF STRING\nLOOP     SRST  R3,R4                   * SEARCH DELIMETER\n         JC    1,LOOP                  * LOOP UNTIL DELIMERER IS FOUND\n         JC    2,ERROR1                * DISPLAY ERROR MSG IF NOT FOUND\n         SR    R3,R4                   * CALC LENGTH OF THE PARAMETER\n         AHI   R3,-1                   * SUBT 1 FOR EXECUTE MVC INST\n         EX    R3,MVCPARM              * MVC  1(0,R7),INBUF\n         STC   R3,0(R7)                * SAVE LENGTH OF SEARCH STRING\n         AHI   R7,41                   * POINT TO NEXT SEARCH STRING\n         J     READPRM                 * READ NEXT RECORD\nEOP      CLOSE SYSIN                   * CLOSE SYSIN\n         LTR   R11,R11                 * SAVE NUMBER OF SEARCH PARMS\n         JZ    ERROR3                  * BRANCH IF NO INPUT DATA\n         STH   R11,ENTRY#              * SAVE NUMBER OF SEARCH PARMS\n         PUT   PRINT,TITLE1            * PRINT TITLE LINE\n         PUT   PRINT,BLANKS            * PRINT BLANK LINE\n*\nLOG000   DS    0H                      * LOAD MULTIPLE SYSLOG LOGREC\n         LHI   R7,200                  *      INTO LOGTBL\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\n         CLI   SWITCH,C'Y'             *\n         JE    LOG200                  *\n         MVC   0(L'RECORD,R9),LOGREC   * MOVE LAST LOGREC TO\n         AHI   R9,L'RECORD             *    1ST ENTRY OF LOGREC TABLE\nLOG100   MVC   LOGREC,BLANKS           * CLEAR RECORD\n         GET   SYSLOG,LOGREC           * GET SYSLOG RECORD\nLOG200   MVC   0(L'RECORD,R9),LOGREC   *\n         MVI   SWITCH,C'N'             * OFF FIRST SWITCH\n         CLI   RECFM,C'B'              * RECFM =                   @03A\n         JE    LOG300                  * BRANCH IF YES             @03A\n         CLI   RECORD+1,C'N'           * NORMAL LINE ? VBA\n         JE    ENDMULT                 * BRANCH IF YES\n         CLI   RECORD+1,C'M'           * MULTIPLE LINE HEADER VBA\n         JE    ENDMULT                 * BRANCH IF MULTIPLE RECORD\n         J     LOG350                  * BRANCH IF YES             @03A\nLOG300   CLI   RECORD,C'N'             * NORMAL LINE VB ?          @03A\n         JE    ENDMULT                 * BRANCH IF YES             @03A\n         CLI   RECORD,C'M'             * MULTIPLE LINE HEADER VB   @03A\n         JE    ENDMULT                 * BRANCH IF MULTIPLE RECORD @03A\nLOG350   AHI   R9,L'RECORD             *\n         JCT   R7,LOG100               *\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            *\n         LHI   R0,L'EMSG4              *\n         AHI   R0,8                    *\n         STH   R0,LOGREC               * SAVE RECORD LENGTH\n         MVC   LOGREC+8(L'EMSG4),EMSG4 * WRITE ERROR MESSAGE EMSG4\n         PUT   PRINT,LOGREC            *\n         LHI   R15,4                   * SET RETURN CODE TO 4\n         STH   R15,RETCODE             * SAVE RETURN CODE\n* IGNORES MULTIPLE LINES MORE THAN 200\n         L     R9,LOGTBL\n         PUT   PRINT,0(R9)             * WRITE CURRENT RECORD\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE\nLOG400   MVC   LOGREC,BLANKS           * CLEAR RECORD\n         GET   SYSLOG,LOGREC           * GET SYSLOG RECORD\n         CLI   RECFM,C'B'              * RECFM VB                  @03A\n         JE    LOG500                  * BRANCH IF YES             @03A\n         CLI   LOGFBA,C'N'             * NORMAL LINE (VBA)\n         JE    ENDMULT                 * BRANCH IF YES\n         CLI   LOGFBA,C'M'             * MULTIPLE LINE HEADER (VBA)\n         JNE   LOG400                  * BRANCH IF MULTIPLE RECORD\n         J     ENDMULT                                             @03A\nLOG500   CLI   LOGREC,C'N'             * NORMAL LINE (VB)          @03A\n         JE    ENDMULT                 * BRANCH IF YES             @03A\n         CLI   LOGREC,C'M'             * MULTIPLE LINE HEADER (VB) @03A\n         JNE   LOG400                  * BRANCH IF MULTIPLE RECORD @03A\nENDMULT  STH   R7,LINECT               * NEW MESSAGE LINE\n         LHI   R4,201                  *\n         SH    R4,LINECT               * # OF MULTIPLE LINES\n         STH   R4,LINECT               * NUMBER OF LOGREC\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\nSRCH20   LH    R11,ENTRY#              * NUMBER OF SEARCH PARMS\n         L     R7,SRCHTBL              * ADDRESS OF SEARCH STRING TABLE\n*        LH    R6,RECLEN               * LOAD RECORD LENGTH\n         LHI   R6,L'RECORD             * LOAD RECORD LENGTH\n         CHI   R6,62                   * SHORT RECORD ??\n         JL    SRCH70                  * BRANCH IF SHORT RECORD\n         AHI   R6,-44                  *\n         LR    R8,R6                   * SAVE R6 TO R8\nSRCH30   LA    R5,RECORD+56            * R5 -> RECORD\n         SR    R10,R10                 * CLEAR R10 FOR IC INSTR\n         IC    R10,0(R7)               * GET LENGTH OF SEARCH PARM\n         LR    R6,R8                   * RESTORE R6\nSRCH50   EX    R10,COMPARM             * CLC  1(0,R7),0(R5)\n         JE    PUTLOG                  * EQ THEN WRITE THE RECORD\n         LA    R5,1(R5)                * INCR. POSITION IN LOG RECORD\n         JCT   R6,SRCH50               * SEARCH CHARACTER BY CHARACTER\n         AHI   R7,41                   * NEXT SEARCH STRING\n         JCT   R11,SRCH30              * SEARCH\nSRCH70   AHI   R9,L'RECORD             * POINT TO NEXT LOG TABLE ENTRY\n         JCT   R4,SRCH20               * PROCESS NEXT LOG TABLE ENTRY\n         J     LOG000                  * CONTINUE\nPUTLOG   LH    R4,LINECT               * LOAD # OF MULTIPLE LOG REC\n         L     R9,LOGTBL               * ADDRESS OF LOG RECORD TABLE\nPUTLOG2  PUT   PRINT,0(R9)             * WRITE LOG RECORD TABLE\n         AHI   R9,L'RECORD             * POINT TO NEXT ENTRY\n         JCT   R4,PUTLOG2              * PROCESS NEXT ENTRY\n         MVI   EMPTY,C'N'              * SET SWITCH TO NOT EMPTY\n         J     LOG000                  * CONTINUE\nABEND    DC    X'0000'\n*---------------------------------------------------------------------*\n* ERROR MESSAGES                                                      *\n*---------------------------------------------------------------------*\nERROR1   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE\n         LHI   R0,L'EMSG1              * LOAD THE LENGTH OF EMSG1\n*        AHI   R0,8                    *\n*        STH   R0,LOGREC               * SAVE RECORD LENGTH\n         MVC   LOGREC+8(L'EMSG1),EMSG1 *\n         PUT   PRINT,LOGREC            * WRITE ERROR MESSAGE EMSG1\n         MVC   LOGREC(136),BLANKS      *\n         PUT   PRINT,LOGREC            *\n         MVC   LOGREC+5(L'INBUF),INBUF *\n         J     CC8                     * SET RETURN CODE 8 AND ABORT\nERROR2   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   LOGREC(L'RECORD),BLANKS *\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE\n         LHI   R0,L'EMSG2              * LOAD THE LENGTH OF EMSG2\n*        AHI   R0,8                    *\n*        STH   R0,LOGREC               * SAVE RECORD LENGTH\n         MVC   LOGREC+8(L'EMSG2),EMSG2 *\n         J     CC8                     * SET RETURN CODE 8 AND ABORT\nERROR3   PUT   PRINT,TITLE1            * WRITE TITLE\n         MVC   LOGREC(L'RECORD),BLANKS *\n         PUT   PRINT,LOGREC            * WRITE A BLANK LINE\n         LHI   R0,L'EMSG3              * LOAD THE LENGTH OF EMSG3\n*        AHI   R0,8                    *\n*        STH   R0,LOGREC               * SAVE RECORD LENGTH\n         MVC   LOGREC+8(L'EMSG3),EMSG3 * WRITE ERROR MESSAGE EMSG3\n         J     CC8                     * SET RETURN CODE 8 AND ABORT\n*RROR5   PUT   PRINT,TITLE1            * WRITE TITLE               @03A\n*        MVC   LOGREC(L'LOGREC),BLANKS *                           @03A\n*        PUT   PRINT,LOGREC            * WRITE A BLANK LINE        @03A\n*        LHI   R0,L'EMSG5              * LOAD THE LENGTH OF EMSG5  @03A\n*        AHI   R0,8                    *                           @03A\n*        STH   R0,LOGREC               * SAVE RECORD LENGTH        @03A\n*        MVC   LOGREC+8(L'EMSG5),EMSG5 * WRITE ERROR MESSAGE EMSG5 @03A\n*        LHI   R15,8                   * SET RETURN CODE TO 8      @03A\n*        PUT   PRINT,LOGREC            *                           @03A\n*        PR                            *                           @03A\nCC8      PUT   PRINT,LOGREC            *\n         LHI   R15,8                   * SET RETURN CODE TO 8\n         STH   R15,RETCODE             * SAVE RETURN CODE\n         J     CLOSEFL                 * ABORT\n*---------------------------------------------------------------------*\n* END ROUTINES                                                        *\n*---------------------------------------------------------------------*\nEOF      CLI   EMPTY,C'N'              * STRING NOT FIND\n         JE    CLOSEFL                 * BRANCH IF YES\n         PUT   PRINT,BLANKS            *\n         PUT   PRINT,BLANKS            *\n         PUT   PRINT,NFIND             * DISPLAY STRING NOT FOUND\n         LHI   R15,4                   * SET RETURN CODE TO 4\n         STH   R15,RETCODE             * SAVE RETURN CODE\nCLOSEFL  CLOSE (PRINT,,SYSLOG)         * CLOSE SYSLOG\n         STORAGE RELEASE,LENGTH=37520,ADDR=SRCHTBL\n         LH    R15,RETCODE             * RESTORE RETURN CODE\nEXIT     PR                            * RETURN TO ZOS\nMVCPARM  MVC   1(0,R7),INBUF           * MOVE PARM FROM INBUF\nCOMPARM  CLC   1(0,R7),0(R5)           * COMPARE NAME TO RECORD ?\n*\n*---------------------------------------------------------------------*\n* CONSTANTS AND STORAGE AREAS                                         *\n*---------------------------------------------------------------------*\nEMSG1    DC    C'ERROR - SEARCH STRING LENGTH > 40 OR NO DELIMITER'\nEMSG2    DC    C'ERROR - NUMBER OF SEARCH STRINGS > 250'\nEMSG3    DC    C'ERROR - NO SEARCH PARAMETER'\nEMSG4    DC    C'SKIP SEARCHING THE FOLLOWING LINE ( > 200)'\nEMSG5    DC    C'ERROR - RECFM SHOULD BE A OR B'                   @03A\nDELIMIT  DC    C'#'                    * DEFAULT DELIMITER AND FBA\nRECFM    DC    C'A'                    * DEFAULT RECFM A  -> FBA\n*                                                      B  -> FB\nSRCHTBL  DC    A(0)                    * ADDRESS OF SEARCH STRING TABLE\nLOGTBL   DC    A(0)                    * ADDRESS OF LOGREC TABLE\nENTRY#   DC    H'0'                    * NUMBER OF SEARCH PARAMETERS\nLINECT   DC    H'0'                    * NUMBER OF MULTIPLE LINES\nRETCODE  DC    H'0'                    * RETURN CODE\nEMPTY    DC    C'Y'                    *\nSWITCH   DC    C'Y'                    * FIRST TIME SWITCH\n*\n*   STORAGE DEFINING INPUT RECORD FROM SYSLOG DATASET\n*\nINBUF    DS    CL80                    * SYSIN RECORD\nLOGREC   DC    C' '                    *\nLOGFBA   DC    CL132' '                *\n*\nTITLE1   DC    H'122'\n         DC    H'0'\n         DC    CL16' '\n         DC    CL40'*--------------------------------------*'\n         DC    CL22'   SEARCH SYSLOG      '\n         DC    CL40'*--------------------------------------*'\nNFIND    DC    H'47'\n         DC    H'0'\n         DC    CL22' '\n         DC    CL21'STRING NOT FOUND !!! '\nBLANKS   DC    CL133' '\n*\n*---------------------------------------------------------------------*\n* DCB'S                                                               *\n*---------------------------------------------------------------------*\n*\n*    INPUT SYSLOG\n*\nSYSLOG   DCB   DDNAME=SYSLOG,                                          C\n               MACRF=GM,                                               C\n               DSORG=PS,                                               C\n               RECFM=FBA,                                              C\n               LRECL=133,                                              C\n               EODAD=EOF\n*\n*    INPUT SYSIN\n*\nSYSIN    DCB   DDNAME=SYSIN,                                           C\n               MACRF=GM,                                               C\n               DSORG=PS,                                               C\n               RECFM=FB,                                               C\n               LRECL=80,                                               C\n               EODAD=EOP\n*\n*   OUTPUT FILES\n*\nPRINT    DCB   DDNAME=PRTFILE,                                         C\n               MACRF=PM,                                               C\n               DSORG=PS,                                               C\n               RECFM=FBA,                                              C\n               LRECL=133\nTBLREC   DSECT\n         DS    0CL133                * SYSLOG RECORD\n*ECLEN   DS    CL2                   * 2 BYTES RECORD LENGTH\n*        DS    CL2                   * 2 BYTES BLOCK LENGTH\nRECORD   DS    CL133                 * FILLER\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCNO": {"ttr": 9217, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00#\\x01\\x145/\\x01\\x145/\\x13\\x14\\x00\\xa5\\x00\\xa5\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2014-12-18T00:00:00", "modifydate": "2014-12-18T13:14:23", "lines": 165, "newlines": 165, "modlines": 0, "user": "REXX"}, "text": "/* REXX EXEC to display SVC description                      */\n/* Author  :  Albert Cheng                                   */\n/* Date    :  22 Jan 92                                      */\n/* Syntax  :  SVCNO 13                                       */\n/*            SVCNO 13X                                      */\nARG svcno\n   svc.0='EXCP/XDAP'\n   svc.1='WAIT/WAITR/...'\n   svc.2='POST'\n   svc.3='EXIT'\n   svc.4='GETMAIN'\n   svc.5='FREEMAIN'\n   svc.6='LINK'\n   svc.7='XCTL'\n   svc.8='LOAD'\n   svc.9='DELETE'\n   svc.10='GET/FREEMAIN R'\n   svc.11='TIME'\n   svc.12='SYNCH'\n   svc.13='ABEND'\n   svc.14='SPIE'\n   svc.15='ERREXCP'\n   svc.16='PURGE'\n   svc.17='RESTORE'\n   svc.18='BLDL/FIND'\n   svc.19='OPEN'\n   svc.20='CLOSE'\n   svc.21='STOW'\n   svc.22='OPEN TYPE J'\n   svc.23='CLOSE TYPE T'\n   svc.24='DEVTYPE'\n   svc.25='TRKBAL'\n   svc.26='CAMLST/VSAM'\n   svc.27='OBTAIN'\n   svc.28='''RESERVED'''\n   svc.29='SCRATCH'\n   svc.30='RENAME'\n   svc.31='FEOV'\n   svc.32='ALLOC'\n   svc.33='IOHALT'\n   svc.34='MGCR/QEDIT'\n   svc.35='WTO/WTOR'\n   svc.36='WTL'\n   svc.37='SEGLD/SEGWT'\n   svc.38='''RESERVED'''\n   svc.39='LABEL'\n   svc.40='EXTRACT'\n   svc.41='IDENTIFY'\n   svc.42='ATTACH'\n   svc.43='CIRB'\n   svc.44='CHAP'\n   svc.45='OVLYBRCH'\n   svc.46='TTIMER'\n   svc.47='STIMER'\n   svc.48='DEQ'\n   svc.49='''RESERVED'''\n   svc.50='''RESERVED'''\n   svc.51='SNAP/SDUMP'\n   svc.52='RESTART'\n   svc.53='RELEX'\n   svc.54='DISABLE'\n   svc.55='EOV'\n   svc.56='ENQ/RESERVE'\n   svc.57='FREEDBUF'\n   svc.58='RELBUF/REQBUF'\n   svc.59='OLTEP'\n   svc.60='(E)STAE/STAI'\n   svc.61='IKJEGS6A'\n   svc.62='DETACH'\n   svc.63='CHKPT'\n   svc.64='RDJFCB'\n   svc.65='''RESERVED'''\n   svc.66='BTAMTEST'\n   svc.67='''RESERVED'''\n   svc.68='SYNAD...'\n   svc.69='BSP'\n   svc.70='GSERV'\n   svc.71='ASGNBFR, ETC'\n   svc.72='''NO MACRO'''\n   svc.73='SPAR'\n   svc.74='DAR'\n   svc.75='DQUEUE'\n   svc.76='IFBSTAT'\n   svc.77=' '\n   svc.78='LSPACE'\n   svc.79='STATUS'\n   svc.80=' '\n   svc.81='SETPRT'\n   svc.82='     '\n   svc.83='SMFWTM'\n   svc.84='GRAPHICS'\n   svc.85='DDRSWAP'\n   svc.86='ATLAS'\n   svc.87='DOM'\n   svc.88='     '\n   svc.89='     '\n   svc.90='     '\n   svc.91='VOLSTAT'\n   svc.92='TCBEXCP'\n   svc.93='TGET/TPUT'\n   svc.94='STCC'\n   svc.95='SYSEVENT'\n   svc.96='STAX'\n   svc.97='IKJEGS9G'\n   svc.98='PROTECT'\n   svc.99='DYNALLOC'\n   svc.100='IKJEFFIB'\n   svc.101='QTIP'\n   svc.102='AQCTL (TCAM)'\n   svc.103='XLATE'\n   svc.104='TOPCTL (TCAM)'\n   svc.105='IMGLIB'\n   svc.106=' '\n   svc.107='MODESET'\n   svc.108=' '\n   svc.109='ESPIE  ESR TYPE or PUTLINE'\n   svc.110='DSTATUS'\n   svc.111='''NO MACRO'''\n   svc.112='PGRLSE'\n   svc.113='PGFIX/PGFREE/..'\n   svc.114='EXCPVR'\n   svc.115=' '\n   svc.116='ESR TYPE 1'\n   svc.117='DEBCHK'\n   svc.118=' '\n   svc.119='TESTAUTH'\n   svc.120='GETMAIN/FREEMAIN'\n   svc.121='VSAM'\n   svc.122='Extended LINK/XCTL/LOAD'\n   svc.123='PURGEDQ'\n   svc.124='TPIO (ISTAPC22)'\n   svc.125='EVENTS'\n   svc.126='MSS INTERFACE'\n   svc.127=' '\n   svc.128=' '\n   svc.129=' '\n   svc.130='RACHECK'\n   svc.131='RACINIT'\n   svc.132='RACLIST/RACXTRT'\n   svc.133='RACDEF'\n   svc.134=' '\n   svc.135=' '\n   svc.136=' '\n   svc.137='ESR TYPE 6'\n   svc.138='PGSER (XA)'\n   svc.139='CVAF'\n   svc.143='????'\n   svc.144='BPXINLPA'\n   svc.215='CICS'\n   svc.216='CICS'\n   svc.230='NETVIEW'\n   svc.232='STROBE SVC'\n   svc.238='TMON 8.1'\n   svc.245='CICS ISC'\n   svc.248='NOSWAP'\n   svc.249='SMF'\n   svc.255='ISC'\n   IF svcno = '' THEN svcno = 'ALL'\n   IF RIGHT(svcno,1) = x THEN svcno = X2D(LEFT(svcno,LENGTH(svcno)-1))\n   IF svcno = 'ALL' THEN\n      DO  i = 1 to 139\n          SAY 'SVC ' i '('D2X(i)') is ' svc.i;\n      END\n   ELSE SAY 'SVC ' svcno 'is ' svc.svcno\n EXIT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SVCUPDTE": {"ttr": 9221, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x12)o\\x01\\x15$\\x9f\"\\x07\\x00*\\x00*\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2015-09-06T22:07:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "REXX"}, "text": "/**REXX*******************************************************/\n/* REXX EXEC to display SVC Recording table                  */\n/* Function : It only display the SVC routines which have    */\n/*            been after MVS system initialization           */\n/*                                                           */\n/* Author   :  Albert Cheng                                  */\n/* Date     :  01 Feb 92                                     */\n/*************************************************************/\n start_address = 0\n cvt = X2D(C2X(STORAGE(10,4)))\n scvt = C2X(STORAGE(D2X(cvt+X2D(C8)),4))\n svctabr1 = X2D(C2X(STORAGE(D2X(X2D(scvt)+X2D(88)),4)))\n count = 0\n hexzero = '0000'x\n DO i = 0 TO 255\n    start_address = D2X(svctabr1 + i*24)\n    TEMPX = STORAGE(start_address,24)\n    IF SUBSTR(tempx,17,2) \\= '0000'x THEN\n/*  IF tempx = '00' THEN */\n        DO\n           SAY ' '\n           CALL SVCNO i\n           SAY 'Old SVC entry point address   ' C2X(SUBSTR(TEMPX,1,4))\n           SAY 'Old SVC attributes            ' C2X(SUBSTR(TEMPX,5,4))\n           SAY \"Caller's return address       \" C2X(SUBSTR(TEMPX,9,4))\n           SAY 'New SVC entry point address   ' C2X(SUBSTR(TEMPX,13,4))\n           tempc = SUBSTR(TEMPX,17,4)\n           TEMPXx = C2X(tempc)\n           jyear = SUBSTR(TEMPXx,3,2)\n           jddd  = SUBSTR(TEMPXx,5,3)\n           CALL jdate jyear jddd\n           SAY 'Date of Change                ' TEMPXx result\n           uptct = C2X(SUBSTR(TEMPX,21,2))\n           suffix =SUBSTR(TEMPX,23,2)\n           SAY 'Number of update :' uptct\n           IF suffix \u00ac= '  ' THEN SAY 'Parmlib suffix ' suffix\n           count = count + 1\n        END\n END\n SAY\n SAY count ' SVCs have been modified after IPL '\n RETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSINCRD": {"ttr": 9223, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\t\\x01\\x142\\x9f\\x01\\x142\\x9f\\x17\\x06\\x00i\\x00i\\x00\\x00\\xc1\\xe2\\xd4@@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2014-11-25T00:00:00", "modifydate": "2014-11-25T17:06:09", "lines": 105, "newlines": 105, "modlines": 0, "user": "ASM"}, "text": "         TITLE 'SYSINCRD - CREATE STC SYSIN SYSINCRD'\n**********************************************************************\n*  NAME        -   SYSINCRD                                          *\n*                                                                    *\n*  FUNCTION    -   STC DOES NOT ACCEPT SYSIN INSTREAM DATA. THIS     *\n*                  PROGRAM READ PARAMETER AND CREATE TEMP SYSIN FILE *\n*                  USED BY THE SUBSEQUENT JOB STEPS. IT IS NO NEED   *\n*                  TO CREATE A TEMPORARY FILE FOR AD HOC STARTED     *\n*                  TASK.                                             *\n*                                                                    *\n*  SYNTAX      -   SYSINCRD                                          *\n*                                                                    *\n*  AUTHOR      -   ALBERT CHENG                                      *\n*                                                                    *\n*  VERSION     -   Z/OS 13                                           *\n*                                                                    *\n*  DATE        -   SEPT 2014                                         *\n*                                                                    *\n*  REGISTERS                                                         *\n*    REG 3     CURR PARM LOC USED FOR SRST INSTRUCTION               *\n*    REG 4     ADDR OF END OF PARAMETER                              *\n*    REG 5     REMAINING LENGTH OF THE PARAMETER                     *\n*    REG 7     ADDR OF OUTPARM                                       *\n*    REG 8     ADDR OF BEG OF NEXT PARAMETER                         *\n*    REG 9     ADDR OF SEMICOLIN RETURN FROM SRST INSTRUCTION        *\n*    REG 12    PROGRAM BASE REGISTER                                 *\n*                                                                    *\n*  INPUT       -   THE PARM PARAMETER. SEMICOLON IS THE DELIMETER OF *\n*                  A NEW LINE.                                       *\n*                  EXAMPLE : PARM='FIRST REORD;SECOND RECORD'        *\n*                                                                    *\n*  OUTPUT      -   THE PARMETERS ARE WRITTEN TO DDNAME SYSIN.        *\n*                  SYSIN:                                            *\n*                  FIRST RECORD                                      *\n*                  SECOND RECORD                                     *\n*                                                                    *\n*     //SYSINCRD EXEC SYSINCRD,PARM='FIRST RECORD,;SECOND RECORD'    *\n*     //STEPLIB  DD DISP=SHR,DSN=LOADLIB                             *\n*     //SYSIN    DD DSN=&&CC,UNIT=DISK,SPACE=(TRK,1),DISP=(,PASS)    *\n*     //LIST     EXEC PGM=IEBGENER                                   *\n*     //SYSPRINT DD SYSOUT=*                                         *\n*     //SYSUT1   DD DSN=&&CC,DISP=(OLD,DELETE)                       *\n*     //SYSUT2   DD SYSOUT=*                                         *\n*     //SYSIN    DD DUMMY                                            *\n*                                                                    *\n* ABSTRACT                                                           *\n*  1) REPLACE TRT BY SRST INSTRUCTION                                *\n*                                       (ALBERT CHENG)   18 SEP 2014 *\n**********************************************************************\nSYSINCRD CSECT\n         J     BEGIN\n         DC    C'SYSINCRD'             * MODULE NAME\n         DC    C'V1.0'                 * PROGRAM VERSION NUMBER\n         DC    C'&SYSDATE'             * COMPILING DATE\n         DC    C'&SYSTIME'             * COMPLIING TIME\nBEGIN    BAKR  R14,0                SAVE REGISTER\n         LR    R12,R15\n         USING SYSINCRD,R12\nDOPARM   DS    0H\n         L     R3,0(R1)             PARM ADDRESS\n         LH    R5,0(R3)             PARM LENGTH\n         LTR   R5,R5\n         JZ    NOPARM               NO PARAMETER\n         OPEN  (SYSIN,OUTPUT)\n         LTR   R15,R15\n         JNZ   NOSYSIN              BRANCH IF RC > 0\n         LA    R7,OUTPARM           OUTPUT BUFFER (12 RECORDS)\n         AHI   R3,2                 PARM DATA ADDRESS\n         LA    R4,0(R3,R5)          END OF PARM ADDRESS\nGETPARM  DS    0H                  LOOK FOR SEMI COLON\n         LA    R0,C';'                                            @01A\n         LA    R9,0(R3,R5)         R9 = END OF SEARCH STRING      @01A\nLOOP     SRST  R9,R3               SEARCH SEMICOLIN               @01A\n         JC    1,LOOP              LOOP UNTIL SEMICOLIN IS FOUND  @01A\n         JC    2,MOVELAST          BRANCH IF SEMICOLON NOT FIND   @01A\n         LA    R8,1(R9)            FOUND, SAVE ADDR 1 PAST SEMI-COLON\n         SR    R9,R3               CALC LENGTH OF THE PARAMETER\n         AHI   R9,-1               SUBT 1 FOR EXECUTE MVC INST\n         EX    R9,MVCPARM          MVC   0(0,R7),0(R3)\n         PUT   SYSIN,(R7)          YES, WRITE IT\n         MVI   OUTPARM,C' '        INITIALISE OUTPARM TO BLANK\n         MVC   OUTPARM+1(L'OUTPARM-1),OUTPARM\n         LR    R3,R8               R3 = START OF NEXT RECORD\n         LR    R5,R4\n         SR    R5,R8               R5 = REMAINING LENGTH\n         JZ    END                 BRANCH IF END OF PARAMETER\n         J     GETPARM             PROCESS NEXT PARAMETER\nMOVELAST AHI   R5,-1               SUBTRACT 1 FOR MOVE\n         EX    R5,MVCPARM          MOVE LAST RECORD TO OUTPRAM\n         PUT   SYSIN,(R7)            WRITE RECORD\nEND      CLOSE SYSIN               CLOSE FILE\n         XR    R15,R15             SET RC TO 0\n         PR                        EXIT\nNOSYSIN  WTO   'DDNAME SYSIN MISSING'\n         J     QUIT\nNOPARM   DS    0H\n         WTO   'NO INPUT PARM'\nQUIT     LA    R15,4               SET RC TO 4\n         PR                        EXIT\nSYSIN    DCB   DDNAME=SYSIN,MACRF=PM,DSORG=PS,BLKSIZE=80,LRECL=80,     X\n               RECFM=F\nOUTPARM  DS    CL80' '\nMVCPARM  MVC   0(0,R7),0(R3)       MVC INPUT PARM TO OUTPARM\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TRAP": {"ttr": 9226, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x19\\x01\\x14$_\\x01\\x14$_\\x15\\x19\\x00\\x14\\x00\\x14\\x00\\x00\\xc5\\xd4\\xc1\\xc3\\xd9\\xd6@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-09-02T00:00:00", "modifydate": "2014-09-02T15:19:19", "lines": 20, "newlines": 20, "modlines": 0, "user": "EMACRO"}, "text": "/*                                                          */\n/* MACRO NAME : TRAP     Put any TSO CP output into edit    */\n/* SYNTAX     : TRAP command (Plus any parameters)          */\n/*            : TRAP DUDASD SYS                             */\n/*                                                          */\nISREDIT MACRO (CMDNAME,OPTION)\n ISREDIT EXCLUDE ALL\n ISREDIT (MEMBER) = MEMBER\n ISREDIT LINE_AFTER .ZLAST = '> OUTPUT FROM TSO COMMAND : &CMDNAME <'\n CONTROL ASIS\n SET &I = 1\n SET &SYSOUTTRAP = 500\n &CMDNAME &OPTION\n SET &BOT = &SYSOUTLINE\n DO WHILE &BOT >= &I\n    SET &TEMP = &&SYSOUTLINE&I\n    ISREDIT LINE_AFTER .ZLAST = \"&TEMP\"\n    SET &I = &I + 1\n END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VIEWPARM": {"ttr": 9228, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x007\\x01 \\x00?\\x01 \\x00?\\x13P\\x00(\\x00(\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-01-03T00:00:00", "modifydate": "2020-01-03T13:50:37", "lines": 40, "newlines": 40, "modlines": 0, "user": "REXX"}, "text": "/* REXX                                                           */\n/* Function : View a PARMLIB member in IPLPARM                    */\n/* Synatx : VIEWPARM IEASYS00                                     */\n/* Author : ALBERT CHENG                                          */\n/* Date   : Jan   2016                                            */\n/*                                                                */\n/* 1) Locate Initialization Parameter area to extract the PARMLIB */\n/*    dataset name                                                */\n/*    DSNAME (b 10.?+8C?+188?    CVT->ECVT->IPA                   */\n/*                               IPA+1A0  ->First Parmlib         */\n/* 2) Invoke ISPEXEC VIEW to browse parmlib member                */\n/*                                                                */\nArg parm\nNUMERIC DIGITS 10\ncvt   = addc(16,'0' )                   /* fetch CVT              */\necvt  = addc(cvt,'8c')                  /* fecth ECVT             */\nipa   = addc(ecvt,'188')                /* fetch IPA              */\nparml = ipa+416                         /* ipa+x'1A0'             */\ndo until storage(D2X(parml),1) = \" \"    /* Loop until             */\n  parmdsn = storage(D2X(parml), 44)     /* Extract PARMLIB dsname */\n  temp = parml+3\n  do i = 3 to 44\n    if storage(D2X(temp), 1) = \" \" then leave  /* Look for blank  */\n    temp = temp + 1\n  end\n  If parm = '' then parm = 'IEASYS00'\n  parmm=\"'\"||left(parmdsn,i)||'('||parm\")'\"    /* 'dsname(parm)'  */\n  if sysdsn(parmm) = \"OK\" then do\n                  address ispexec \"view dataset(\"parmm\")\"\n                  exit\n                end\n  parml = parml + 64              /* next parmlib entry */\nend\nsay parm 'not found in parmlib'\nexit\nsay STORAGE(D2X(parml),44)        /* Display 1st parmlib dsname   */\n/* Internal Function to fetch address   */\naddc: ARG ad1,ad2\nRETURN C2D(STORAGE(D2X(ad1+X2D(ad2)),4))   /* ad1 = dec, ad2 = hex */\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT612/FILE612.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT612", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}