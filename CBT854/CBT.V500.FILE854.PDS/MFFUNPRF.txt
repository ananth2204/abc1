Steven H. Comstock
The Trainer's Friend, Inc.
6790 E. Cedar Ave., Suite 201
Denver, CO 80224


                 Mainframes for Fun and Profit


In the December 2010 / January 2011 edition of z-Journal, Reg Harbeck
wrote a column titled "The Mainframe Game" where he espoused the
position that the only solid way to ensure the mainframe's survival is
to make mainframe work environment fun and intuitive. Yes!

But I think it's important to note areas where the mainframe world is
already I've found mainframe students to be enthusiastic about working
in these areas as soon as they learned how to do it.

The most fun area to work in, I feel, is z/OS UNIX!

Growing up in the industry as a dedicated mainframer (seven years with
IBM, then on my own since 1975), UNIX was considered the enemy.

But now, with z/OS UNIX System Services, you can have the best of both
worlds. And the most fun is running a website from z/OS. Oh, sure, you
can pay big bucks for WebSphere Application Server and all its add-ons
and plug-ins. They're OK.

But the most fun is with using the free HTTP servers available with
z/OS: the older HTTP server and the newer ported Apache version.
You can get either one of these running in a day. Did I mention
they're free?

With just a little training (we do it in three days) your z/OS
developers can learn enough to each build their own small website on
their z/OS system. Talk about instant gratification! A few lines of
HTML and, bingo, they can see the result in their browser of choice!

Pages that use HTML, XHTML, CSS, JavaScript, DOM, and more,
can all be served from these free HTTP servers.

If you want to get more serious about your fun, you can actually run
full websites with DB2 for the backend (why not have the database
server on the same box as the HTTP server?).

If you need CGIs, you can write them in languages the mainframe
developers already know: REXX, Assembler, PL/I, COBOL.

Yes, you can use Java, and Perl, and other languages, but you don't
have to. Bring back the fun for your developers who use classic
languages: they can do the web too.

Now the fact that you can combine these, have the newer hires using
languages they know (C, C++, Java, Perl, and so on) and have your
classic legacy developers using the languages they know (REXX,
COBOL, PL/I, Assembler) working on the same application, using
the common framework of HTML, CSS, and JavaScript, can result
in having web-based applications served from z/OS developed
rapidly yet with mainframe-class care in security and robustness.

Similar fun can be had using CICS and the Web; CICS transactions
can be run on the web, even using Web Services and Service
Oriented Architecture.

Another new technology getting wide play in the wider world is
XML. On the mainframe, DB2 can store, retrieve, and process
data in XML natively. COBOL and PL/I have built in XML parsers,
and they can access the richer z/OS XML System Services with
just a CALL, as can programs written in Assembler and C.

In a little more traditional environment, I still find people who
create and maintain applications written for the Dialog Manager (ISPF)
have a lot of fun with their work. You can think of ISPF as a
character based Web for internal users. Creating panels and dialogs is
also a satisfying, rapid development environment.

So, yes, Reg, you're right: "the way to win the mainframe game is
to play!". And the opportunity is here now, if management will
just set up the playing field.

