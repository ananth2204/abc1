{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012300000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE531.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE531.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\r'", "DS1TRBAL": "b',~'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xed\\x00\\t\\x03\\xed\\x00\\r\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04U\\x00\\x12\\x01\\x124\\x1f\\x01\\x124\\x1f!3\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf5@@@'", "ispf": {"version": "04.85", "flags": 0, "createdate": "2012-12-06T00:00:00", "modifydate": "2012-12-06T21:33:12", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-485"}, "text": "REGULAR CBT TAPE - VERSION 485    FILE:  531\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT485.FILE531\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 12 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,547 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/06/12    21:33:12    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INTRO": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01(\\x1f\\x01\\x01(\\x1f\\x17F\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc4\\xe2\\xe3\\xc5\\xd9\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-10-08T00:00:00", "modifydate": "2001-10-08T17:46:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "DSTERN"}, "text": "Subject: OS/390 Analyzer exec\nDate: Mon, 8 Oct 2001 16:52:02 +0100\nFrom: \"David Stern\" <David.Stern@iona.com>\nTo: <sbgolob@attglobal.net>\nCC: <sbgolob@aol.com>\n\nI would like to share a compound exec that I developed\nto simplify the installation of IONA's OS/390 product.\nIt searches for  specific DSNs with LMDxxxx ISPF\nservices, product levels with BAL and ISPF variables,\netc.  The OBJTXT that is embedded extracts the LE level\nand exercises/decodes the CSRSI (System Information)\ncallable service (used by IBM's CUOD).  It also detects\nTCP/IP levels and number of stacks.  Perhaps someone\nmay find some of the code useful.\n\nRegards,  David\n\n David Stern\n IONA Technologies plc\n Shelbourne Road\n Dublin 4, Ireland\n\n   mailto:David.Stern@iona.com\n Tel (IE): +353 1 6625255 X2519\n     (US): +1 800 orbix4u\n      WWW: http://www.iona.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE1": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x009\\x01\\x01(O\\x01\\x01(O\\x129\\x00\\x03\\x00v\\x00\\x00\\xc4\\xe2\\xe3\\xc5\\xd9\\xd5@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-10-11T00:00:00", "modifydate": "2001-10-11T12:39:39", "lines": 3, "newlines": 118, "modlines": 0, "user": "DSTERN"}, "text": "APAR OW47608 corrects LMDLIST (it returns invalid RCs when catalogs are\nunavailable that causes a loop when calling LMDLIST.)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE531": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04U\\x00\\x07\\x01\\x124\\x1f\\x01\\x124\\x1f!3\\x001\\x001\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf5@@@'", "ispf": {"version": "04.85", "flags": 0, "createdate": "2012-12-06T00:00:00", "modifydate": "2012-12-06T21:33:07", "lines": 49, "newlines": 49, "modlines": 0, "user": "CBT-485"}, "text": "//***FILE 531 is from David Stern and contains routines that will   *   FILE 531\n//*           detect various OS/390 details.                        *   FILE 531\n//*                                                                 *   FILE 531\n//*           The exec uses :                                       *   FILE 531\n//*                                                                 *   FILE 531\n//*           EZASOKET to retrieve details of TCP/IP stack(s).      *   FILE 531\n//*            The TCP/IP VRM(s) and operational status(es) are     *   FILE 531\n//*            displayed                                            *   FILE 531\n//*           TSO LINK against imbedded OBJ text that retrieves     *   FILE 531\n//*            the level of Language Environment and output of      *   FILE 531\n//*            the CSRSI service (CUOD information). The BAL        *   FILE 531\n//*            source is also in this file (OBJSRC)                 *   FILE 531\n//*           ISPF/PDF LMDxxxx services to find DSN info based      *   FILE 531\n//*            upon a LLQ match (SMP/E 'style')                     *   FILE 531\n//*           Rexx STORAGE functions to search the SVC table        *   FILE 531\n//*                                                                 *   FILE 531\n//*           Some of the internal routines have been used to       *   FILE 531\n//*           create separate execs in this file.                   *   FILE 531\n//*                                                                 *   FILE 531\n//*           Member IGGCSIRX uses the DFSMSdfp Catalog Search      *   FILE 531\n//*           Interface to retrieve ICF catalog entries.  The       *   FILE 531\n//*           exec is from the IBM sample and catalog diagnostic    *   FILE 531\n//*           information is displayed along with the BCS type.     *   FILE 531\n//*                                                                 *   FILE 531\n//*           The main REXX exec called OSANALZ is in TSO XMIT      *   FILE 531\n//*           format, because its actual DCB requirements are       *   FILE 531\n//*           LRECL=132,RECFM=FB .  You have to issue a TSO         *   FILE 531\n//*           RECEIVE command on this member to get it into its     *   FILE 531\n//*           proper format:                                        *   FILE 531\n//*                                                                 *   FILE 531\n//*             RECEIVE INDS(yourid.FILE531.PDS(OSANALZ))           *   FILE 531\n//*                                                                 *   FILE 531\n//*           I have also taken the liberty of disassembling        *   FILE 531\n//*           David's object deck, which is imbedded in the         *   FILE 531\n//*           OSANALZ exec.  David has provided the source, too.    *   FILE 531\n//*           So member OBJSRC is David's source, and OBJSRCD is    *   FILE 531\n//*           my disassembly of the (supplied) object deck.         *   FILE 531\n//*           (S.Golob)                                             *   FILE 531\n//*                                                                 *   FILE 531\n//*       David Stern                                               *   FILE 531\n//*       IONA Technologies plc                                     *   FILE 531\n//*       Shelbourne Road                                           *   FILE 531\n//*       Dublin 4, Ireland                                         *   FILE 531\n//*                                                                 *   FILE 531\n//*         mailto:David.Stern@iona.com                             *   FILE 531\n//*       Tel (IE): +353 1 6625255 X2519                            *   FILE 531\n//*           (US): +1 800 orbix4u                                  *   FILE 531\n//*            WWW: http://www.iona.com                             *   FILE 531\n//*                                                                 *   FILE 531\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IGGCSIRX": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x01(\\x1f\\x01\\x123\\x8f\\x11\\x10\\x00\\x93\\x00\\x93\\x00\\x00\\xc4\\xe2\\xe3\\xc5\\xd9\\xd5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-10-08T00:00:00", "modifydate": "2012-12-03T11:10:47", "lines": 147, "newlines": 147, "modlines": 0, "user": "DSTERN"}, "text": "/* REXX */\n /********************************************************************/\n /*                                                                  */\n /*       NAME: IGGCSIRX                                             */\n /*DESCRIPTION: THIS REXX EXEC IS USED TO CALL THE CATALOG           */\n /*             SEARCH INTERFACE.                                    */\n /*      INPUT: FILTER KEY                                           */\n /*     OUTPUT: DATA SETS NAMES AND VOLUMES                          */\n /*                                                                  */\n /********************************************************************/\n SAY 'Enter filter key'             /*   ASK FOR FILTER KEY          */\n PULL KEY                           /*   GET FILTER KEY              */\n /********************************************************************/\n /*                                                                  */\n /*  INITIALIZE THE PARM LIST                                        */\n /*                                                                  */\n /********************************************************************/\nMODRSNRC = SUBSTR(' ',1,4)          /*   CLEAR MODULE/RETURN/REASON  */\nCSIFILTK = SUBSTR(KEY,1,44)         /*   MOVE FILTER KEY INTO LIST   */\nCSICATNM = SUBSTR(' ',1,44)         /*   CLEAR CATALOG NAME          */\nCSIRESNM = SUBSTR(' ',1,44)         /*   CLEAR RESUME NAME           */\nCSIDTYPS = SUBSTR(' ',1,16)         /*   CLEAR ENTRY TYPES           */\nCSICLDI  = SUBSTR('Y',1,1)          /*   INDICATE DATA AND INDEX     */\nCSIRESUM = SUBSTR(' ',1,1)          /*   CLEAR RESUME FLAG           */\nCSIS1CAT = SUBSTR(' ',1,1)          /*   INDICATE SEARCH > 1 CATALOGS*/\nCSIRESRV = SUBSTR(' ',1,1)          /*   CLEAR RESERVE CHARACTER     */\nCSINUMEN = '0001'X                  /*   INIT NUMBER OF FIELDS       */\nCSIFLD1    = SUBSTR('VOLSER',1,8)   /*   INIT FIELD 1 FOR VOLSERS    */\n /********************************************************************/\n /*                                                                  */\n /*  BUILD THE SELECTION CRITERIA FIELDS PART OF PARAMETER LIST      */\n /*                                                                  */\n /********************************************************************/\nCSIOPTS  = CSICLDI || CSIRESUM || CSIS1CAT || CSIRESRV\nCSIFIELD = CSIFILTK || CSICATNM || CSIRESNM || CSIDTYPS || CSIOPTS\nCSIFIELD = CSIFIELD || CSINUMEN || CSIFLD1\n\n /********************************************************************/\n /*                                                                  */\n /*  INITIALIZE AND BUILD WORK ARE OUTPUT PART OF PARAMETER LIST     */\n /*                                                                  */\n /********************************************************************/\nWORKLEN = 2048\nDWORK = '00000800'X || COPIES('00'X,WORKLEN-4)\n\n /********************************************************************/\n /*                                                                  */\n /*  INITIALIZE WORK VARIABLES                                       */\n /*                                                                  */\n /********************************************************************/\nRESUME = 'Y'\nCATNAMET = SUBSTR(' ',1,44)\nDNAMET = SUBSTR(' ',1,44)\n\n /********************************************************************/\n /*                                                                  */\n /*  SET UP LOOP FOR RESUME (IF A RESUME IS NCESSARY)                */\n /*                                                                  */\n /********************************************************************/\nDO WHILE RESUME = 'Y'\n\n /********************************************************************/\n /*                                                                  */\n /*  ISSUE LINK TO CATALOG GENERIC FILTER INTERFACE                  */\n /*                                                                  */\n /********************************************************************/\n ADDRESS LINKPGM 'IGGCSI00  MODRSNRC  CSIFIELD  DWORK'\n\n RESUME = SUBSTR(CSIFIELD,150,1)    /* GET RESUME FLAG FOR NEXT LOOP */\n USEDLEN = C2D(SUBSTR(DWORK,9,4))   /* GET AMOUNT OF WORK AREA USED  */\n POS1=15                            /* STARTING POSITION             */\n /********************************************************************/\n /*                                                                  */\n /*  PROCESS DATA RETURNED IN WORK AREA                              */\n /*                                                                  */\n /********************************************************************/\n DO WHILE POS1 < USEDLEN            /* DO UNTIL ALL DATA IS PROCESSED*/\n  Select\n   When SUBSTR(DWORK,POS1+1,1) = '0' then /* IF CATALOG, PRINT CATALOG HEAD*/\n     DO\n     CATNAME=SUBSTR(DWORK,POS1+2,44)\n     CATCODE=C2X(SUBSTR(DWORK,POS1,1))\n     CATRC=C2D(SUBSTR(DWORK,POS1+49,1))\n     If CATRC = 0 then CATRN = 0\n      Else CATRN=C2D(SUBSTR(DWORK,POS1+50,1))\n     IF CATNAME \\= CATNAMET THEN /* IF RESUME NAME MAY ALREADY BE*/\n      DO                         /*    PRINTED                   */\n       SAY 'Catalog' Strip(CATNAME) 'of code type' CATCODE 'with RC and RSN of'\n       SAY ' '\n       CATNAMET = CATNAME\n      END\n     POS1 = POS1 + 50\n     END\n   Otherwise  /* Process the catalogue entry */\n    Do\n     DNAME = SUBSTR(DWORK,POS1+2,44)  /* GET ENTRY NAME                */\n\n /********************************************************************/\n /*                                                                  */\n /*  ASSIGN ENTRY TYPE NAME                                          */\n /*                                                                  */\n /********************************************************************/\n   Select\n    When SUBSTR(DWORK,POS1+1,1) = 'C' THEN DTYPE = 'CLUSTER '\n    When SUBSTR(DWORK,POS1+1,1) = 'D' THEN DTYPE = 'DATA    '\n    When SUBSTR(DWORK,POS1+1,1) = 'I' THEN DTYPE = 'INDEX   '\n    When SUBSTR(DWORK,POS1+1,1) = 'A' THEN DTYPE = 'NONVSAM '\n    When SUBSTR(DWORK,POS1+1,1) = 'H' THEN DTYPE = 'GDS     '\n    When SUBSTR(DWORK,POS1+1,1) = 'B' THEN DTYPE = 'GDG     '\n    When SUBSTR(DWORK,POS1+1,1) = 'R' THEN DTYPE = 'PATH    '\n    When SUBSTR(DWORK,POS1+1,1) = 'G' THEN DTYPE = 'AIX     '\n    When SUBSTR(DWORK,POS1+1,1) = 'X' THEN DTYPE = 'ALIAS   '\n    When SUBSTR(DWORK,POS1+1,1) = 'U' THEN DTYPE = 'UCAT    '\n    Otherwise DTYPE = '        '\n    End\n /********************************************************************/\n /*                                                                  */\n /*  HAVE NAME AND TYPE, GET VOLSER INFO                             */\n /*                                                                  */\n /********************************************************************/\n    POS1 = POS1 + 46\n    NUMVOL = C2D(SUBSTR(DWORK,POS1+4,2))/6 /* HOW MANY VOLSERS ?     */\n                                    /*                               */\n    POS2 = POS1+6                   /* POSITION ON DATA              */\n    DO I=1 TO 3                     /* ONLY CLEAR 3 VOLSER FIELDS    */\n      VOLSER.I = SUBSTR(' ',1,6)\n    END\n    DO I = 1 TO NUMVOL              /* MOVE VOLSERS TO OUTPUT FIELDS */\n      VOLSER.I = SUBSTR(DWORK,POS2,6)\n      POS2 = POS2 + 6\n    END\n    IF DNAMET \\= DNAME THEN         /* IF RESUME, NAME MAY ALREADY   */\n                                    /*    PRINTED                    */\n    DO                              /* IF NOT, PRINT IT              */\n     SAY COPIES(' ',8) DTYPE DNAME VOLSER.1 VOLSER.2 VOLSER.3\n     DNAMET=DNAME\n    END\n /********************************************************************/\n /*                                                                  */\n /*   GET POSITION OF NEXT ENTRY                                     */\n /*                                                                  */\n /********************************************************************/\n    POS1 = POS1 + C2D(SUBSTR(DWORK,POS1,2))\n     End\n   End\n End\nEnd\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OBJSRC": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00B\\x01\\x01(O\\x01\\x01(O\\x00\\x13\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-10-11T00:00:00", "modifydate": "2001-10-11T00:13:42", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "* Here is the BAL for the OBJTXT -\n*\n         ceeentry PLIST=OS\n         print nogen\n         yregs\n         l r8,8(,r1)  point at the addr of a Rexx buffer (CEELVL)\n         mvc 0(1,r8),ceecaalevel-ceecaa(12) LE version\n         l r7,4(,r1)  point at the addr of a Rexx buffer (SI_RETCODE)\n         l r6,0(,r1)  point at the addr of a Rexx buffer (SIV1V2V3)\n         print gen\n         l r15,=v(CSRSI) is CSRSI linked?\n         ltr r15,r15\n         bz all_over\n         call (15),(si_request,si_request_len,(r6),(r7)),              c\n               MF=(E,CALLLIST)\n         print nogen\nall_over ceeterm RC=0\nCALLLIST call ,(r0,r0,r0,r0),MF=L\nPPA ceeppa ,\n         ltorg\nsi_request dc a(CSRSI_REQUEST_V1CPC_MACHINE+CSRSI_REQUEST_V2CPC_LPAR+CS-\n               RSI_REQUEST_V3CPC_VM)\nsi_request_len dc a(SIV1V2V3_LEN)\n         csrsiidf SIV1V2V3=YES,LIST=NO\n         ceedsa ,\n         ceecaa ,\n         end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OBJSRCD": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x01(\\x1f\\x01\\x01(\\x1f\\x173\\x00_\\x00\\\\\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-10-08T00:00:00", "modifydate": "2001-10-08T17:33:06", "lines": 95, "newlines": 92, "modlines": 0, "user": "SBGOLOB"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OBJTXT": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00'\\x01\\x01(\\x1f\\x01\\x01(\\x1f\\x17!\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-10-08T00:00:00", "modifydate": "2001-10-08T17:21:27", "lines": 16, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OSANALZ": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01(\\x1f\\x01\\x01(\\x1f\\x17(\\x03\\xcd\\x03\\xcd\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-10-08T00:00:00", "modifydate": "2001-10-08T17:28:00", "lines": 973, "newlines": 973, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "OSANALZ$": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x01(\\x1f\\x01\\x01(O\\x102\\x00\\n\\x00\\x0b\\x00\\x00\\xc4\\xe2\\xe3\\xc5\\xd9\\xd5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-10-08T00:00:00", "modifydate": "2001-10-11T10:32:47", "lines": 10, "newlines": 11, "modlines": 0, "user": "DSTERN"}, "text": " Installing the OSANALZ exec:\n\n   Under TSO, issue the command:\n\n   RECEIVE INDS(this.pds(OSANALZ))\n\n This will create a sequential dataset with DCB=(RECFM=FB,LRECL=132)\n\n Using ISPF3.4, simply issue the Exec (EX) against the dataset.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SVCSRCH": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x014?\\x01\\x014?\"(\\x00W\\x00W\\x00\\x00\\xc4\\xe2\\xe3\\xc5\\xd9\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-12-09T00:00:00", "modifydate": "2001-12-09T22:28:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "DSTERN"}, "text": "/* Rexx! Here boy! Good Rexx!\n\n   SVCSRCH accepts 0,1,2 parameters. The default display is of USER SVCs\n    (200-255). Example parameters -> '109 122' or '100'\n   When Extended Service Router (ESR) SVCs are encountered, they are\n    also displayed\n   Empty SVCTABLE/ESRTABLE entries are detected and *not* displayed\n\n*/\nSignal OFF NOVALUE\nSelect\n  When Arg() = 0 then\n    Do\n       SVCNUMBER_First = 200\n       SVCNUMBER_Last = 255\n       End\n  When Arg() = 1 then\n    Do\n       Parse Arg SVCNUMBER_First SVCNUMBER_Last .\n       If SVCNUMBER_Last = '' then\n         SVCNUMBER_Last = 255\n       End\n  End\nSay 'You asked to begin searching at SVC'SVCNUMBER_First,\n    'and end at SVC'SVCNUMBER_Last\nPRTDSVAR = Copies('_',79)\nCall PRTLmput\nPRTDSVAR = Left(' Searching for SVC information...',79)\nCall PRTLmput\nSVCTABLE = SVC000()\nDo until SVCNUMBER_First > SVCNUMBER_Last\n  SVCHEADER = C2x(Storage(C2x(Storage(SVCTABLE,4)),80))\n  If Substr(SVCHEADER,1,8) \\= '1F22BF27' then\n    Do\n      PRTDSVAR = 'SVC' || Right(SVCNUMBER_First,3,'0') '@',\n      C2x(Storage(SVCTABLE,4)) ':'\n      Call PRTLmput\n      Call PRThexdump\n      End\n  If C2d(Bitand(Substr(Storage(SVCTABLE,5),5),'04'x)) = 4 then\n    Do\n      ESRTABLE = C2x(Storage(SVCTABLE,4))\n      ESRCOUNT = C2d(Storage(X2X(ESRTABLE, '04'),4))\n      ESRTABLE = X2X(ESRTABLE, '08')\n      Do ESR_index = 0 to ESRCOUNT by 1\n        If C2x(Storage(C2x(Storage(ESRTABLE,4)),4)) \\= '4110016D' then\n          Do\n            PRTDSVAR = 'ESR entry' Right(ESR_index,3,'0') '@',\n                       C2x(Storage(ESRTABLE,4)) ':'\n            Call PRTLmput\n            SVCHEADER = C2x(Storage(C2x(Storage(ESRTABLE,4)),80))\n            Call PRThexdump\n            End\n        ESRTABLE = X2X(ESRTABLE, '08')\n        End\n      End\n  SVCTABLE = X2X(SVCTABLE, '08')\n  SVCNUMBER_First = SVCNUMBER_First + 1\n  End\nPRTDSVAR = Left(' Searching for SVC information... done',79)\nCall PRTLmput\nPRTDSVAR = Copies('_',79)\nCall PRTLmput\nExit\n\nCVT:      Procedure; Return C2x(Storage(X2X('10', '00'),4))\nIOSDSHID: Procedure; Return C2x(Storage(X2X(CVT(),'42C'),4))\nSCVT:     Procedure; Return C2x(Storage(X2X(CVT(), 'C8'),4))\nSVCT:     Procedure; Return C2x(Storage(X2X(SCVT(), '84'),4))\nSVC000:   Procedure expose SVCNUMBER_First\n                     Return X2X(SVCT(), D2x(SVCNUMBER_First * 8))\nX2X:      Procedure; Return D2x(X2d(Arg(1)) + X2d(Arg(2)))\n\nPRTLmput:\n Say PRTDSVAR\n Return\n\nPRThexdump:\n OFFSET = 1\n Do 5\n    Parse var SVCHEADER =(OFFSET) HEX1 +8 HEX2 +8 HEX3 +8 HEX4 +8 .\n    PRTDSVAR = HEX1'  'HEX2'  'HEX3'  'HEX4'  |',\n               X2c(Substr(SVCHEADER, OFFSET, 32)) '|'\n    Call PRTLmput\n    OFFSET = OFFSET + 32\n    End\n Return\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TCPIPLVL": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x06\\x01\\x01(O\\x01\\x01(O\\x12\\x19\\x00d\\x00d\\x00\\x00\\xc4\\xe2\\xe3\\xc5\\xd9\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-10-11T00:00:00", "modifydate": "2001-10-11T12:19:06", "lines": 100, "newlines": 100, "modlines": 0, "user": "DSTERN"}, "text": "/* Rexx! Here boy! Good Rexx! */\n\nSEZATCP = 'TCPIP.SEZATCP' /* <-- UPDATE! */\n\nPRTDSVAR = Copies('_',80)\nCall PRTLmput\nPRTDSVAR = Left(' Detecting TCP/IP details...',80)\nCall PRTLmput\ngetIBMopt = Left('getIBMopt',16)\ngethostname = Left('gethostname',16)\nUpper getIBMopt gethostname\nbuffer100 = Copies('00'x,100)\nname255 = Copies('00'x,255)\none = Copies('00'x,3) || '01'x\n/*      Sometime this code should be corrected (not hardcoded)\nnamelen = Copies('00'x,3) || D2x(Length(name255))\n*/\nnamelen = Copies('00'x,3) || '18'x\nerrno1 = Copies('00'x,4)\nretcode1 = Copies('00'x,4)\nerrno2 = Copies('00'x,4)\nretcode2 = Copies('00'x,4)\nSay Copies('<',25) 'Unusual RCs are possible...' Copies('>',25)\n Address ISPEXEC \"Libdef ISPLLIB DATASET ID('\"SEZATCP\"')\"\n Signal OFF FAILURE /* EZASOKET does not set R15 correctly - IBM APAR PQ23318 */\n Signal ON NOVALUE name FAILURE /* If USERID has no OMVS access... */\n Address ATTCHPGM 'EZASOKET getIBMopt one buffer100 errno1 retcode1'\n Address ATTCHPGM 'EZASOKET gethostname namelen name255 errno2 retcode2'\n Signal ON FAILURE\n Address ISPEXEC \"Libdef ISPLLIB DATASET\"\nPRTDSVAR = Left(' Detecting TCP/IP details... done',80)\nCall PRTLmput\nDrop PRTDSVAR\nIf C2d(retcode1,2) = 0 then\n  Do\n    If C2d(retcode2,2) = 0 then\n      Do\n        PRTDSVAR = Substr(name255,1,C2d(namelen)) 'returned by GETHOSTNAME'\n        Call PRTLmput\n        End\n      Else\n      Do\n        PRTDSVAR = Left(gethostname 'call failed. Error code =' C2d(errno2),80)\n        Call PRTLmput\n        End\n    PRTDSVAR = C2d(Substr(buffer100,1,4)) 'TCP/IP image(s) detected'\n    Call PRTLmput\n    PRTDSVAR = 'Name     Version Status       '\n    Call PRTLmput\n    PRTDSVAR = '________ _______ ______'\n    Call PRTLmput\n    buffer100_index = 0\n    Do I = 1 to C2d(Substr(buffer100,1,4))\n      image_entry = Substr(buffer100,(buffer100_index * I + 5),12)\n      Parse VAR image_entry 1 i_status +2 i_version +2 i_name\n      PRTDSVAR = Left(i_name,8),\n                 Right(C2x(i_version),7),\n                 Right(C2x(i_status),6)\n      Call PRTLmput\n      End\n    PRTDSVAR = ''\n    Call PRTLmput\n    End\n  Else\n  Do\n    PRTDSVAR = EZASOKET 'call failed. Error code =' C2d(errno1)\n    Call PRTLmput\n    End\nPRTDSVAR = Left(' Detecting TCP/IP HOMEADDR...',80)\naddress TSO\n \"NEWSTACK\"\nCall PRTLmput\n \"NETSTAT HO STAC\"\nPRTDSVAR = Left(' Detecting TCP/IP HOMEADDR... done',80)\nCall PRTLmput\nDo Queued()\n  Parse Pull ALINE IPADDRESS .\n  End\n \"DELSTACK\"\n \"PING\" IPADDRESS\nIf RC = 0 then\n  Do\n    PRTDSVAR = Left('Ping was successful to' IPADDRESS,80)\n    Call PRTLmput\n    End\n  Else\n  Do\n    PRTDSVAR = Left('Ping was unsuccessful. No OMVS segment is defined?',80)\n    Call PRTLmput\n    End\nExit\n\nPRTLmput:\n Say PRTDSVAR\nReturn\n\nFailure:\n /* some recovery action... */\n Say 'Sourceline' SIGL\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT531/FILE531.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT531", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}