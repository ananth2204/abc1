{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20011008222721000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 132, "INMBLKSZ": 2640, "INMRECFM": "FB", "INMDSNAM": "SBGOLOB.OSANALZ.REX", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SBGOLOB.OSANALZ.REX": {"text": "/* REXX */\n                                                    /*\n\n                             31.07.2000 added check for archived data sets\n\n 01.08.2000 added general ERROR handler\n                                                     07.09.2000 added CSRSI call\n for CPC/LPAR/VM details\n                         24.11.2000 removed obsolete allocations\n\n        added searches for Cobol and C++ Proclibs\n                                                 30.11.2000 detect LE level when\n CSRSI is unavailable\n                                added search for VA PL/1\n                                                                         01.12.2\n000 added check for data set aliases\n                                        */\n\n            Parse SOURCE . . EXECNAME . . . . EXECENV .\n                                                                If (EXECENV \\= '\nISPF') then\n                                      Do\n\n            Say 'Please execute' EXECNAME 'under ISPF.  Exiting...'\n                                                                Exit\n\n                                    End\n\n    Say;Say;Say;Say;\n                                                        x = OUTTRAP(TRASH.)\n\n                             \"DEL '\" || Sysvar(SYSUID) || \".#ORBIX@.*'\"\n\n \"DEL '\" || Sysvar(SYSUID) || \".ORBIX.LST'\"\n                                                    x = OUTTRAP(off)\n\n                         \"ALLOC DA('\" || Sysvar(SYSUID) || \".ORBIX.LST') DD(#P@)\n                                                                              RE\nCFM(F B) DSO(PS) SPA(1) REU  LR(80) BLO(0) TRA\"\n                                                 \"ALLOC DA('\" || Sysvar(SYSUID)\n|| \".#ORBIX@.OBJ') DD(#O@)\n                      RECFM(F B) DSO(PS) SPA(1) REU  LR(80) BLO(0) TRA\"\n                                                                         \"ALLOC\nDA('\" || Sysvar(SYSUID) || \".#ORBIX@.LOAD')\n                                              LIK('SYS1.LINKLIB') SPA(2) DIR(1)\nREU TRA\"\n                objtxt.1 = '\u0002ESD      \u0000\u0090  \u0000\u0001TEMPNAME\u0000\u0000\u0000\u0000\u007f\u0000\u0001*CEEMAIN \u0000\u0000\u0001-\u007f\u0000\u0000\u0097CEES\nTART\u0002\u0000\u0000\u0000            00000001'                                       objtxt.2 = '\n\u0002ESD      \u0000\u0090  \u0000\u009cCEEBETBL\u0002\u0000\u0000\u0000    CEEINT  \u0002\u0000\u0000\u0000    CSRSI   \u0002\u0000\u0000\u0000\n'                                       objtxt.3 = '\u0002ESD      \u0000\u0010  \u0000\u007fCEETREC \u0002\u0000\u0000\u0000\n                                            00000003'\n            objtxt.4 = '\u0002TXT \u0000\u0000\u0000  \u0000\u0098  \u0000\u0001\u00e500\u009d\u0000CEE\u0000\u0000\u0000\u00d8\u0000\u0000\u0000}\u00e500\u0001\u00b0\u00d6}\f\u0018\u00d7\u00ec\u0080\u00a3 \u00ec0\u00a3\u00e0\t\u00d5\u0018\u0081\u00ec\\\nB0o\u00d8\\\u0097\t^\u00ec^\u00a3\u0018\u00ec\u0010}<00000004'                                       objtxt.5 = '\u0002TXT\n \u0000\u0000\u0098  \u0000\u0098  \u0000\u0001\u00ec\u0000^\u0097\u001e\u0001\u00ed\u0000{\f\u00e5}^+\u00ec0B\u00af\t\u00d5\u0018\u001f&}\u0010\u009c&\u0000\u0010<P\u0001\u0010\u0000\u0010\u0000&\u0010}\u0097\u0018JK\u0003}\u00e7B\u00d8\u0018\u0012\u00ec\u00d8\u0010\u0097K\u000000000005'\n                                    objtxt.6 = '\u0002TXT \u0000\u0000\u00f8  \u0000\u0098  \u0000\u0001\u00d8\u0000B^\u00ec\u00f8\u0010\u009c\u00ec-\u0010\u0000\u00ec0\u00a3<\n\u0012\u009f\u00e5\u00d8^u\u00a0\u0010^{\u00a0\u0000\u00a3\u00e8&\u0000\u0010\u0000\u00a0\u0000\u00a3\u00ec&\u0000\u0010\u009c&-\u0010\u0097&\u00f8\u0010\f\t\u00d5\u00a0\u0010^^00000006'\n        objtxt.7 = '\u0002TXT \u0000\u0000y  \u0000\u0018  \u0000\u0001\u00ec0\u00a3&\t\u00d5\u0000\u0000\u0000\u0000\u0000\u00bd\u00d8\u0000\u0000\u00af\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n            00000007'                                       objtxt.8 = '\u0002TXT \u0000\u0001-\n  \u0000\u0097  \u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000                                                00000008'\n                                objtxt.9 = '\u0002TXT \u0000\u0000{  \u0000\u008a  \u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u00f3\u00b5\u0000\n\u0000\u0000\u0001\u009d\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0097TEMPNAME              00000009'\n    objtxt.10 = '\u0002TXT \u0000\u00000  \u0000\u0098  \u0000\u0001\u0000\u0000\u0001\u0084\u0000\u0000\u0000\u0097\u0000\u0000\u0000\u007f\u0000\u0000\u0001\u0084\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0000\u0000\u007f\u0000\u0000\u000f\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u009d\u0000\u0000\u0000\u000000000010'                                      objtxt.11 = '\u0002TXT \u0000\u0001\u0088  \u0000\n\u009d  \u0000\u0001200011301206001 1 0                                     00000011'\n                            objtxt.12 = '\u0002TXT \u0000\u0001   \u0000\u001c  \u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u007f\u0000\u0000                              00000012'\nobjtxt.13 = '\u0002RLD      \u0000\u0098    \u0000\u0001\u0000\u0001\r\u0000\u0000^\r\u0000\u0000\u00a9\r\u0000\u0000M\r\u0000\u00000\r\u0000\u0000\u00dc\r\u0000\u0001\u0084\r\u0000\u0001 \f\u0000\u0001\u00e7\u0000\u0003\u0000\u0001\u001d\u0000\u0001\u0000\f\u0000\u0001\u0018\u0000\u009c\u0000\n\u0001\u001c\u0000\u0001\u009c00000013'                                      objtxt.14 = '\u0002RLD      \u0000\u0080\n \u0000\t\u0000\u0001\u001c\u0000\u0001\u00e0\u0000\u0086\u0000\u0001\u001c\u0000\u0001<\u0000\u007f\u0000\u0001\u001c\u0000\u0001&\u0000\u0001\u0000\u0002\f\u0000\u0001-                        00000014'\n                        objtxt.15 = '\u0002END                            1569623400\n010300335                    00000015'                                      objt\nxt.16 = left(' NAME #ORBIX@',80)\n                                                 \"EXECIO * DISKW #O@ (FINIS STEM\n objtxt.\"\n                    Say Copies('_',44)\n                                                                        Address\nISPEXEC\n                                              \"Lminit DATAID(PRTDS) DDNAME(#P@)\"\n\n                  \"Lmopen DATAID(&PRTDS) OPTION(OUTPUT)\"\n                                                                    Signal ON FA\nILURE\n                                        PRTDSVAR = Copies('_',80)\n\n            Call PRTLmput\n                                                                PRTDSVAR = Centr\ne('Orbix for OS/390 Analyser           ' || Date(),80)\n                                    Call PRTLmput\n\n        PRTDSVAR = Copies('_',80)\n                                                            Call PRTLmput\n\n                                PRTDSVAR = Left(' Allocations for listing and ob\nject text... done',80)\n    Call PRTLmput\n                                                        PRTDSVAR = Left(' Writin\ng object text... done',80)\n                            Call PRTLmput\n\nPRTDSVAR = Copies('_',80)\n                                                    Call PRTLmput\n\n                        PRTDSVAR = Left(' Searching for files...',80)\n                                                                            Call\n PRTLmput\n                                                /*\n                        */\n                    /* To locate and optionally display a file, the lowest  */\n                                                                        /* level\n qualifier (DSNLLQ) must be known.  This is a   */\n                                            /* simple matter for products that a\nre maintained with  */\n                /* SMP/E because of the naming convention that SMP/E    */\n                                                                    /* (normally\n) uses.                                     */\n                                        /*\n                */\n            /* Copy and uncomment the snippet of REXX code.         */\n                                                                /* Update @LLQ@\nto what you seek.                       */\n                                    /* Update @DISPLAY STRING@ to what you what\nto display  */\n        /*  or nullify the variable to prevent display ('').    */\n                                                            /* Update @BAD NEWS@\n to what you what to display if the */\n                                /*  file cannot be found (always displayed).\n        */\n    /*                                                      */\n                                                        /* DSOUTPUT contains the\n last file that is diplayed and */\n                            /* TEMPDSN contains the last file that is not displa\nyed */\n/*                                                      */\n                                                    /*                 < snippet\n >                          */\n                        /*\n*/                                                                          /* D\nSNLLQ = '@LLQ@'                                     */\n                                                /* DSNLOCATED = '@DISPLAY STRING\n@'                      */\n                    /* DSNNOTFOUND = '@BAD NEWS@'                           */\n                                                                        /* Call\nSearchforDSN                                    */\n                                            /*\n                    */\n                DSNLLQ = 'SDFHAUTH'\n                                                                    DSNNOTFOUND\n= '>>> No CICS found! <<<'\n                                        DSNLOCATED = 'CICS found. DSN ='\n\n            Call SearchforDSN\n\n\n                                    DSNLLQ = 'SDFHEXCI'\n\n        DSNNOTFOUND = '>>> No CICS EXCI found! <<<'\n                                                            DSNLOCATED = 'CICS E\nXCI found. DSN ='\n                                Call SearchforDSN\n\n\n                                                        DSNLLQ = 'RESLIB'\n\n                            DSNNOTFOUND = '>>> No IMS found! <<<'\n\nDSNLOCATED = 'IMS found. DSN ='\n                                                    Call SearchforDSN\n\n\n                                                                            DSNL\nLQ = 'SIGYCOMP'\n                                                DSNNOTFOUND = '>>> No Cobol for\nMVS or OS/390 found! <<<'\n                    DSNLOCATED = 'Cobol for MVS or OS/390 found. DSN ='\n                                                                        Call Sea\nrchforDSN\n\n\n                DSNLLQ = 'SIGYPROC'\n                                                                    DSNNOTFOUND\n= '>>> No Cobol procedure library found! <<<'\n                                        DSNLOCATED = 'Cobol procedure library fo\nund. DSN ='\n            Call SearchforDSN\n\n\n                                    DSNLLQ = 'SIELCOMP'\n\n        DSNNOTFOUND = '>>> No PL/1 found! <<<'\n                                                            DSNLOCATED = 'PL/1 f\nound. DSN ='\n                                Call SearchforDSN\n\n\n                                                        DSNLLQ = 'SIBMZCMP'\n\n                            DSNNOTFOUND = '>>> No VisualAge PL/1 found! <<<'\n\nDSNLOCATED = 'VisualAge PL/1 found. DSN ='\n                                                    Call SearchforDSN\n\n\n                                                                            DSNL\nLQ = 'SCBCCMP'\n                                                DSNNOTFOUND = '>>> No C++ found!\n <<<'\n                    DSNLOCATED = 'C++ found. DSN ='\n                                                                        Call Sea\nrchforDSN\n\n\n                DSNLLQ = 'SCBCPRC'\n                                                                    DSNNOTFOUND\n= '>>> No C++ procedure library found! <<<'\n                                        DSNLOCATED = 'C++ procedure library foun\nd. DSN ='\n            Call SearchforDSN\n\n\n                                    DSNLLQ = 'SCLBDLL'\n\n        DSNNOTFOUND = '>>> No C++ DLL found! <<<'\n                                                            DSNLOCATED = 'C++ DL\nL found. DSN ='\n                                Call SearchforDSN\n\n\n                                                        DSNLLQ = 'SCEELKED'\n\n                            DSNNOTFOUND = '>>> No Language Environment LKED foun\nd! <<<'\nDSNLOCATED = ''\n                                                    Call SearchforDSN\n\n                        If DSNNOTFOUND = '' then CANNOTLINK = 1\n                                                                            SCEE\nLKED = TEMPDSN\n\n\n                    DSNLLQ = 'SCEERUN'\n                                                                        DSNNOTFO\nUND = '>>> No Language Environment RTL found! <<<'\n                                            DSNLOCATED = 'Language Environment R\nTL found. DSN ='\n                Call SearchforDSN\n                                                                    SCEERUN = TE\nMPDSN\n\n\n            DSNLLQ = 'SEZATCP'\n                                                                DSNNOTFOUND = '>\n>> No TCP/IP found! <<<'\n                                    DSNLOCATED = 'TCP/IP found. DSN ='\n\n        Call SearchforDSN\n                                                            SEZATCP = TEMPDSN\n\n\n\n    DSNLLQ = 'CSSLIB'\n                                                        DSNNOTFOUND = '>>> No Ca\nllable Services loadlib found! <<<'\n                            DSNLOCATED = ''\n\nCall SearchforDSN\n                                                    CSSLIB = TEMPDSN\n\n\n                                                                            PRTD\nSVAR = Copies('_',80)\n                                                Call PRTLmput\n\n\n                                                                        If CANNO\nTLINK /= 1 then\n                                              Do\n\n                    PRTDSVAR = Left(' Linking object text...',80)\n                                                                        Call PRT\nLmput\n                                            Address TSO \"LINK ('\" || Sysvar(sysu\nid) || \".#ORBIX@.OBJ') NOTER LET(8)\n                 LOAD('\" || Sysvar(sysuid) || \".#ORBIX@.LOAD')\n                                                                     LIB('\" || S\nCEELKED || \"','\" || CSSLIB || \"')\"\n                                        PRTDSVAR = Left(' Linking object text...\n done',80)\n            Call PRTLmput\n                                                                Address TSO \"FRE\nE DA('\"SCEELKED\"','\"CSSLIB\"')\"\n                                    PRTDSVAR = Left(' Detecting Language Environ\nment level and CPU details...',80)\n        Call PRTLmput\n                                                            ceelvl = '00'x\n\n                                bufferx4040 = Copies('<>',8224) /* Request all d\nata (SIV1V2V3) from CSRSI */\n    retcode = Copies('00'x,4)\n                                                          \"Libdef ISPLLIB Exclda\nta Id('\"Sysvar(sysuid)\".#ORBIX@.LOAD','\"SCEERUN\"')\"\n                            Address LINKPGM '#ORBIX@ bufferx4040 retcode ceelvl'\n\n  \"Libdef ISPLLIB Excldata\"\n                                                    PRTDSVAR = Left(' Detecting\nLanguage Environment level and CPU details... done',80)\n                        Call PRTLmput\n                                                                            End\n\n                                            PRTDSVAR = Left(' Clean-up of tempor\nary files proceeding...',80)\n                Call PRTLmput\n                                                                    Address TSO\n\n                                        x = OUTTRAP(TRASH.)\n\n             \"DEL '\" || Sysvar(SYSUID) || \".#ORBIX@.*'\"\n                                                                x = OUTTRAP(off)\n\n                                    PRTDSVAR = Left(' Clean-up of temporary file\ns... done',80)\n        Call PRTLmput\n                                                            Address\n\n                                PRTDSVAR = Copies('_',80)\n\n    Call PRTLmput\n                                                        Say Copies('_',44)\n\n                            If CANNOTLINK = 1 then\n\n  Do\n                                                        Say;Say '>>> Further exe\ncution is not possible! <<<'\n                            Call Terminate\n\nEnd\n                                                JESTYPLVL = Sysvar(SYSJES)\n\n                    SECTYPLVL = Sysvar(SYSLRACF)\n                                                                        TSOTYPLV\nL = Sysvar(SYSTSOE)\n                                            If TSOTYPLVL >= '2050' then\n\n                  Do\n                                                                        DFPLVL =\n Mvsvar(SYSDFP)\n                                            OSTYPLVL = Mvsvar(SYSOPSYS)\n\n                End\n                                                                  Else\n\n                                      OSTYPLVL = '>>> unavailable <<<'\n\n        /*  \"Vget CEELVL ASIS\"  */\n                                                            ceelvl = C2x(ceelvl)\n\n                                PRTDSVAR = Left('The OS/390 product is' OSTYPLVL\n,80)\n    Call PRTLmput x\n                                                        PRTDSVAR = Left('The JES\n product is' JESTYPLVL,80)\n                            Call PRTLmput x\n\nPRTDSVAR = Left('The Language Environment product is' ceelvl,80)\n                                                    Call PRTLmput x\n\n                        PRTDSVAR = Left('The DFSMSdfp product is' DFPLVL,80)\n                                                                            Call\n PRTLmput x\n                                                PRTDSVAR = Left('The security pr\noduct is' SECTYPLVL,80)\n                    Call PRTLmput x\n                                                                        PRTDSVAR\n = Left('The TSO/E product is' TSOTYPLVL,80)\n                                            Call PRTLmput x\n\n                PRTDSVAR = Copies('_',80)\n                                                                    Call PRTLmpu\nt\n                                        Say Copies('_',44)\n\n            x = Sysdsn(\"'\" || CSSLIB || \"(CSRSI)'\")\n                                                                If x = 'OK' then\n\n                                      Do\n\n            /* Not great, but decompose the bufferx4040 here... */\n                                                                SI00CPCVARIETY =\n C2d(Substr(bufferx4040,1,1))\n                                    If C2d(retcode) = 0 then\n\n          Select\n                                                                When SI00CPCVARI\nETY = 1 /* SI00CPCVARIETY_V1CPC_MACHINE */\n                                      Then Do\n\n            PRTDSVAR = Left('CPCVARIETY_V1CPC_MACHINE detected...',80)\n                                                                Call PRTLmput x\n\n                                    Call SI00_decode\n\n        Call SI11V1_decode\n                                                            Call SI22V1_decode\n\n                                End\n\nWhen SI00CPCVARIETY = 2 /* SI00CPCVARIETY_V2CPC_LPAR */\n                                                      Then Do\n\n                            PRTDSVAR = Left('CPCVARIETY_V2CPC_LPAR detected...',\n80)\nCall PRTLmput x\n                                                    Call SI00_decode\n\n                        Call SI11V1_decode\n                                                                            Call\n SI22V1_decode\n                                                Call SI22V2_decode\n\n                    End\n                                                                    When SI00CPC\nVARIETY = 3 /* SI00CPCVARIETY_V3CPC_VM */\n                                          Then Do\n\n                PRTDSVAR = Left('CPCVARIETY_V3CPC_VM detected...',80)\n                                                                    Call PRTLmpu\nt x\n                                        Call SI00_decode\n\n            Call SI11V1_decode\n                                                                Call SI22V1_deco\nde\n                                    Call SI22V2_decode\n\n        Call SI22V3_decode\n                                                            End\n\n                          End\n                                                                              El\nse\n                                                    Do\n\n                          PRTDSVAR = Left(' STSI instruction is unavailable on t\nhis CPU.',80)                                                                 Ca\nll PRTLmput x\n                                                  Drop x /* and get the CPU info\n the old fashioned way... */\n                      End\n                                                                    End\n\n                                      Else\n\n          Do\n                                                                PRTDSVAR = Left(\n' Callable Service, CSRSI, is unavailable.',80)\n                                    Say PRTDSVAR\n\n        Call PRTLmput\n                                                            x = Syscpus(CPUS.)\n\n                                CPUMODEL = Substr((Storage((IOSDSHID()),56)),33,\n3)\n    PRTDSVAR = Left('Number of online CPUs is' CPUS.0,80)\n                                                        Call PRTLmput x\n\n                            Do I = 1 to CPUS.0\n\n  Parse var CPUS.i . 3 CPUSN 9 CPUTYP\n                                                      PRTDSVAR = Left('CPU' i 'h\nas serial number' CPUSN 'of type' CPUTYP'-'CPUMODEL,80)\n                          Call PRTLmput x\n                                                                              En\nd\n                                                End\n\n                Say Copies('_',44);\n                                                                    PRTDSVAR = C\nopies('_',80)\n                                        Call PRTLmput\n\n            PRTDSVAR = Left(' Detecting TCP/IP details...',80)\n                                                                Call PRTLmput\n\n                                    getIBMopt = Left('getIBMopt',16)\n\n        gethostname = Left('gethostname',16)\n                                                            Upper getIBMopt geth\nostname\n                                buffer100 = Copies('00'x,100)\n\n    name255 = Copies('00'x,255)\n                                                        one = Copies('00'x,3) ||\n '01'x\n                            /*      Sometime this code should be corrected (not\nhardcoded)\nnamelen = Copies('00'x,3) || D2x(Length(name255))\n                                                    */\n\n                        namelen = Copies('00'x,3) || '18'x\n                                                                            errn\no1 = Copies('00'x,4)\n                                                retcode1 = Copies('00'x,4)\n\n                    errno2 = Copies('00'x,4)\n                                                                        retcode2\n = Copies('00'x,4)\n                                            Say Copies('<',25) 'Unusual RCs are\npossible...' Copies('>',25)\n                 Address ISPEXEC \"Libdef ISPLLIB DATASET ID('\"SEZATCP\"')\"\n                                                                     Signal OFF\nFAILURE /* EZASOKET does not set R15 correctly - IBM APAR PQ23318 */\n                                         Signal ON NOVALUE name FAILURE /* If US\nERID has no OMVS access... */\n             Address ATTCHPGM 'EZASOKET getIBMopt one buffer100 errno1 retcode1'\n                                                                 Address ATTCHPG\nM 'EZASOKET gethostname namelen name255 errno2 retcode2'\n                                     Signal ON FAILURE\n\n         Address ISPEXEC \"Libdef ISPLLIB DATASET\"\n                                                            PRTDSVAR = Left(' De\ntecting TCP/IP details... done',80)\n                                Call PRTLmput\n\n    Drop PRTDSVAR\n                                                        If C2d(retcode1,2) = 0 t\nhen\n                              Do\n\n    If C2d(retcode2,2) = 0 then\n                                                          Do\n\n                                PRTDSVAR = Substr(name255,1,C2d(namelen)) 'retur\nned by GETHOSTNAME'\n    Call PRTLmput x\n                                                        End\n\n                          Else\n                                                                              Do\n\n                                                    PRTDSVAR = Left(gethostname\n'call failed. Error code =' C2d(errno2),80)\n                        Call PRTLmput x\n                                                                            End\n\n                                            PRTDSVAR = C2d(Substr(buffer100,1,4)\n) 'TCP/IP image(s) detected'\n                Call PRTLmput x\n                                                                    PRTDSVAR = '\nName     Version Status       '\n                                        Call PRTLmput x\n\n            PRTDSVAR = '________ _______ ______'\n                                                                Call PRTLmput x\n\n                                    buffer100_index = 0\n\n        Do I = 1 to C2d(Substr(buffer100,1,4))\n                                                              image_entry = Subs\ntr(buffer100,(buffer100_index * I + 5),12)\n                                  Parse VAR image_entry 1 i_status +2 i_version\n+2 i_name\n      PRTDSVAR = Left(i_name,8),\n                                                                     Right(C2x(i\n_version),7),\n                                         Right(C2x(i_status),6)\n\n  Call PRTLmput x\n                                                      End\n\n                        PRTDSVAR = ''\n                                                                            Call\n PRTLmput x\n                                                End\n\n                  Else\n                                                                      Do\n\n                                            PRTDSVAR = EZASOKET 'call failed. Er\nror code =' C2d(errno1)\n                Call PRTLmput x\n                                                                    End\n\n                                    PRTDSVAR = Left(' Detecting TCP/IP HOMEADDR.\n..',80)\n        address TSO\n                                                             \"NEWSTACK\"\n\n                                Call PRTLmput\n\n     \"NETSTAT HO STAC\"\n                                                        PRTDSVAR = Left(' Detect\ning TCP/IP HOMEADDR... done',80)\n                            Call PRTLmput\n\nDo Queued()\n                                                      Parse Pull ALINE IPADDRESS\n .\n                          End\n                                                                             \"DE\nLSTACK\"\n                                                 \"PING\" IPADDRESS\n\n                    If RC = 0 then\n                                                                          Do\n\n                                                PRTDSVAR = Left('Ping was succes\nsful to' IPADDRESS,80)\n                    Call PRTLmput x\n                                                                        End\n\n                                          Else\n\n              Do\n                                                                    PRTDSVAR = L\neft('Ping was unsuccessful. Possibly no OMVS segment is defined.',80)\n                                        Call PRTLmput x\n\n            End\n                                                            SVCSearch:\n\n                                Signal OFF NOVALUE\n\n    Say Copies('_',44);\n                                                        PRTDSVAR = Copies('_',80\n)\n                            Call PRTLmput\n\nPRTDSVAR = Left(' Searching for CICS and/or IMS information...',80)\n                                                    Call PRTLmput\n\n                        SVCTABLE = SVC200()\n                                                                            SVCN\nUMBER = 200\n                                                Do until SVCNUMBER = 255\n\n                      SVCHEADER = C2x(Storage(C2x(Storage(SVCTABLE,4)),73))\n                                                                          If Sub\nstr(SVCHEADER,1,8) \\= '1F22BF27' then\n                                                Do\n\n                      If ((Pos('DFH',X2c(SVCHEADER)) > 0) | (Pos('DFS',X2c(SVCHE\nADER)) > 0))                                                                then\n\n                                                Do\n\n                      PRTDSVAR = 'SVC' || SVCNUMBER X2c(SVCHEADER)\n                                                                          Call P\nRTLmput\n                                              End\n\n              End\n                                                              SVCTABLE = X2X(SVC\nTABLE, '08')\n                                  SVCNUMBER = SVCNUMBER + 1\n\n      End\n                                                        PRTDSVAR = Left(' Search\ning for CICS and/or IMS information... done',80)\n                            Call PRTLmput\n\n\n                                                    Terminate:\n\n                        Address ISPEXEC \"Lmclose DATAID(&PRTDS)\"\n                                                                            Say\n\n                                                Say 'Please e-mail the listing f\nile ('Sysvar(SYSUID)'.ORBIX.LST)'\n                    Say 'to your Iona sales representative.'\n                                                                        Address\nTSO \"FREE DD(#P@)\"\n                                            Exit\n\n\n                                                                    SI00_decode:\n\n                                          PRTDSVAR = Left(' SI00 decoding...',80\n)\n              Call PRTLmput x\n                                                                  PRTDSVAR = Lef\nt('PCCACPID =' Substr(bufferx4040,5,12),80)\n                                      Call PRTLmput\n\n          PRTDSVAR = Left('PCCACPUA =' C2d(Substr(bufferx4040,17,2)),80)\n                                                              Call PRTLmput\n\n                                  PRTDSVAR = Left('PCCACAFM =' C2d(Substr(buffer\nx4040,19,2)),80)\n      Call PRTLmput\n                                                          PRTDSVAR = Left(' SI00\n decoding... done',80)\n                              Call PRTLmput x\n\nReturn\n\n\n                        SI11V1_decode:\n                                                                              PR\nTDSVAR = Left(' SI11V1 decoding...',80)\n                                                  Call PRTLmput x\n\n                      PRTDSVAR = Left('CPCManufacturer =' Substr(bufferx4040,97,\n16),80)                                                                   Call P\nRTLmput\n                                              PRTDSVAR = Left('CPCType =' Substr\n(bufferx4040,113,4),80)\n                  Call PRTLmput\n                                                                      PRTDSVAR =\n Left('CPCModel =' Substr(bufferx4040,129,16),80)\n                                          Call PRTLmput\n\n              PRTDSVAR = Left('CPCSequenceCode =' Substr(bufferx4040,145,16),80)\n                                                                  Call PRTLmput\n\n                                      PRTDSVAR = Left('CPCPlantOfManufacture ='\nSubstr(bufferx4040,161,4),80)\n          Call PRTLmput\n                                                              PRTDSVAR = Left('\nSI11V1 decoding... done',80)\n                                  Call PRTLmput x\n\n    Return\n\n\n                            SI22V1_decode:\n\n  PRTDSVAR = Left(' SI22V1 decoding...',80)\n                                                      Call PRTLmput x\n\n                          PRTDSVAR = Left('CPUCapability (base) is' C2d(Substr(b\nufferx4040,4193,4),4),80)                                                     Ca\nll PRTLmput\n                                                  PRTDSVAR = Left('TotalCPUCount\n is' C2d(Substr(bufferx4040,4197,2)),80)\n                      Call PRTLmput\n                                                                          PRTDSV\nAR = Left('ConfiguredCPUCount is' C2d(Substr(bufferx4040,4199,2)),80)\n                                              Call PRTLmput\n\n                  PRTDSVAR = Left('StandbyCPUCount is' C2d(Substr(bufferx4040,42\n01,2)),80)                                                            Call PRTLm\nput\n                                          PRTDSVAR = Left('ReservedCPUCount is'\nC2d(Substr(bufferx4040,4203,2)),80)\n              Call PRTLmput\n                                                                  bfrx40_ptr = 4\n205\n                                      If C2d(Substr(bufferx4040,4197,2)) > 1 The\nn\n            Do (C2d(Substr(bufferx4040,4197,2)) - 1)\n                                                                  PRTDSVAR = Lef\nt(' ...next CPU adjustment factor (%) is' C2d(Substr(bufferx4040,bfrx40_ptr,2)),\n80)                                   Call PRTLmput\n\n          bfrx40_ptr = bfrx40_ptr + 2\n                                                              End\n\n                              PRTDSVAR = Left(' SI22V1 decoding... done',80)\n\n  Call PRTLmput x\n                                                    Return\n\n\n                                                                            SI22\nV2_decode:\n                                                  PRTDSVAR = Left(' SI22V2 decod\ning...',80)\n                      Call PRTLmput x\n                                                                          PRTDSV\nAR = Left('CPCNumber is' C2d(Substr(bufferx4040,8289,2),4),80)\n                                              Call PRTLmput\n\n                  PRTDSVAR = Left(' The following details are for CPCName(d)' Su\nbstr(bufferx4040,8301,8),80)                                          Call PRTLm\nput\n                                          PRTDSVAR = Left('The CPCCapabilityAF (\nadjustment factor) is' C2d(Substr(bufferx4040,8309,4),4),80)\n              Call PRTLmput\n                                                                  PRTDSVAR = Lef\nt(' which permits' ((C2d(Substr(bufferx4040,8309,4),4) / 1000) * 100)'% use of t\nhe V1 CPC(s).',80)                    Call PRTLmput\n\n          SI22V2LCPUCharacteristics = Substr(bufferx4040,8292,1)\n                                                              If SI22V2LCPUChara\ncteristics >= '80'x then Do\n                                    PRTDSVAR = Left('There are' C2d(Substr(buffe\nrx4040,8329,2)) 'dedicated V1 CPUs assigned to this LPAR.',80)\n        Call PRTLmput\n                                                            SI22V2LCPUCharacteri\nstics = Bitxor(SI22V2LCPUCharacteristics,'80'x)\n                                End\n\n  If SI22V2LCPUCharacteristics >= '40'x then Do\n                                                        PRTDSVAR = Left('There a\nre' C2d(Substr(bufferx4040,8331,2)) 'shared V1 CPUs assigned to this LPAR.',80)\n                            Call PRTLmput\n\nSI22V2LCPUCharacteristics = Bitxor(SI22V2LCPUCharacteristics,'40'x)\n                                                    End\n\n                      If SI22V2LCPUCharacteristics >= '20'x then Do\n                                                                            PRTD\nSVAR = Left('There is a limit (cap) on V1 CPUs assigned to this LPAR.',80)\n                                                Call PRTLmput\n\n                    End\n                                                                      PRTDSVAR =\n Left('TotalLCPUCount is' C2d(Substr(bufferx4040,8293,2)),80)\n                                          Call PRTLmput\n\n              PRTDSVAR = Left('ConfiguredLCPUCount is' C2d(Substr(bufferx4040,82\n95,2)),80)                                                        Call PRTLmput\n\n                                      PRTDSVAR = Left('StandbyLCPUCount is' C2d(\nSubstr(bufferx4040,8297,2)),80)\n          Call PRTLmput\n                                                              PRTDSVAR = Left('R\neservedLCPUCount is' C2d(Substr(bufferx4040,8299,2)),80)\n                                  Call PRTLmput\n\n      PRTDSVAR = Left('DedicatedLCPUCount is' C2d(Substr(bufferx4040,8329,2)),80\n)                                                         Call PRTLmput\n\n                              PRTDSVAR = Left('SharedLCPUCount is' C2d(Substr(bu\nfferx4040,8331,2)),80)\n  Call PRTLmput\n                                                      PRTDSVAR = Left(' SI22V2 d\necoding... done',80)\n                          Call PRTLmput x\n                                                                            Retu\nrn\n\n\n                    SI22V3_decode:\n                                                                          PRTDSV\nAR = Left(' SI22V3 (OS/390 under VM/ESA) decoding is not yet implemented.',80)\n                                              Call PRTLmput x\n\n                Return\n\n\n                                        PRTLmput:\n\n            PRTDSVAR = Left(PRTDSVAR,80)\n                                                                Address ISPEXEC\n\n                                      \"Lmput DATAID(&PRTDS) MODE(INVAR) DATALOC(\nPRTDSVAR) DATALEN(80)\"\n        Address\n                                                            If Arg(1) \\= '' then\n Say PRTDSVAR\n                                Return\n\n\n                                                        SearchforDSN:\n\n                            DSOUTPUT = ' ' /* Initialize to beginning of the lis\nt */\nAddress ISPEXEC\n                                                      \"Lmdinit LISTID(DSLEVEL) L\nevel(**.**.\" || DSNLLQ || \")\"\n                          Do while RC = 0 /* LMDINIT returns 0 even when no DSNs\n exist */\n\"Lmdlist LISTID(&DSLEVEL) OPTION(LIST) DATASET(DSOUTPUT) STATS(YES)\"\n                                                    If ((DSOUTPUT \\= TEMPDSN) &\n(RC = 0)) then\n                          Select\n                                                                               W\nhen ((ZDLMIGR = 'YES') | (ZDLVOL = '*ALIAS')) then\n                                                    Do\n\n                          PRTDSVAR = DSNLOCATED DSOUTPUT 'but on VOLSER' ZDLVOL\n                                                                              Ca\nll PRTLmput x\n                                                  End\n\n                   When Substr(ZDLDSORG,1,2) \\= 'PO' then\n                                                                        Do\n\n                                              PRTDSVAR = DSNLOCATED DSOUTPUT 'bu\nt with RECFM' ZDLDSORG\n                  Call PRTLmput x\n                                                                      End\n\n                                       When DSNLOCATED \\= '' then\n\n            Do\n                                                                  PRTDSVAR = DSN\nLOCATED DSOUTPUT\n                                      Call PRTLmput x\n\n          TEMPDSN = DSOUTPUT\n                                                              End\n\n                               Otherwise\n\n    Do\n                                                          PRTDSVAR = 'Internal s\nearch for ' || DSOUTPUT || '... found'\n                              Call PRTLmput\n\n  TEMPDSN = DSOUTPUT\n                                                      End\n\n                        End\n                                                                        End\n\n                                          If RC = 4 then\n\n                Do\n                                                                      PRTDSVAR =\n Left(DSNNOTFOUND,80)\n                                          Call PRTLmput x\n\n              DSNNOTFOUND = /* Indicate the error */\n                                                                  End\n\n                                  \"Lmdfree LISTID(&DSLEVEL)\"\n\n    Address\n                                                        Return\n\n\n\nCVT:      Procedure; Return     C2x(Storage(X2X('10', '00'),4))\n                                                    IOSDSHID: Procedure; Return\n    C2x(Storage(X2X(CVT(),'42C'),4))\n                        SCVT:     Procedure; Return     C2x(Storage(X2X(CVT(), '\nC8'),4))                                                                    SVCT\n:     Procedure; Return     C2x(Storage(X2X(SCVT(), '84'),4))\n                                                SVC200:   Procedure; Return\nX2X(SVCT(), '640')\n\n                                                                        X2X:\n  Procedure; Return     D2x(X2d(Arg(1)) + X2d(Arg(2)))\n\n\n                Failure:\n                                                                     Sourceline\n= SIGL; R_C = RC\n                                         PRTDSVAR = Condition('C') 'is the trapp\ned condition.'\n             Call PRTLmput\n                                                                 PRTDSVAR = Cond\nition('D') 'is the trapped description.'\n                                     Call PRTLmput\n\n         PRTDSVAR = 'Source line' Sourceline 'ended with RC' R_C\n                                                             Call PRTLmput\n\n                                 If Condition('C') = 'NOVALUE' then\n\n      Call SVCSearch\n                                                         Call Terminate\n\n\n"}}, "SCRIPTOPTIONS": {"filename": "./CBT531/CBT.V500.FILE531.PDS/OSANALZ.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT531/CBT.V500.FILE531.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}