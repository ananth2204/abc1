{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012559000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE676.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE676.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x04'", "DS1TRBAL": "b'\\x9er'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xc1\\x00\\x0b\\x04\\xc2\\x00\\x04\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x11\\x7f\\x01\\x04\\x11\\x7f\\x18B\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-04-26T00:00:00", "modifydate": "2004-04-26T18:42:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-465"}, "text": "REGULAR CBT TAPE - VERSION 465    FILE:  676\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT465.FILE676\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,821 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/26/04    18:42:25    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE676": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00!\\x01\\x04\\x11\\x7f\\x01\\x04\\x12?\\t3\\x00B\\x00B\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-04-26T00:00:00", "modifydate": "2004-05-02T09:33:21", "lines": 66, "newlines": 66, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 676 contains updated batch utilities, VPS EXITS, and      *   FILE 676\n//*           code, updated to work in z/OS.  This file is from     *   FILE 676\n//*           Jim Marshall.                                         *   FILE 676\n//*                                                                 *   FILE 676\n//*           Jim's current address is:                             *   FILE 676\n//*                                                                 *   FILE 676\n//*                 Jim Marshall                                    *   FILE 676\n//*                 Office of Personnel Management                  *   FILE 676\n//*                 CIO/WTC - Room BH04                             *   FILE 676\n//*                 1900 E Street NW                                *   FILE 676\n//*                 Washington DC   20415-0001                      *   FILE 676\n//*                 w - 202-606-1261                                *   FILE 676\n//*                 f - 202-606-2092                                *   FILE 676\n//*                 Jim.Marshall@opm.gov                            *   FILE 676\n//*                                                                 *   FILE 676\n//*   Member $$ZDOC now replaced by member @FILEnnn.  (SBG - 08/03) *   FILE 676\n//*                                                                 *   FILE 676\n//*       RELEASE 01  -  May 2004                                   *   FILE 676\n//*                                                                 *   FILE 676\n//*       SUMMARY OF THE MODULES CONTAINED.                         *   FILE 676\n//*                                                                 *   FILE 676\n//*       Code     REL          DESCRIPTION                         *   FILE 676\n//*                                                                 *   FILE 676\n//*       GDGCPY   1.0  GDGCOPY utility found in File 482.          *   FILE 676\n//*                     Changed code from copying all GDG's found   *   FILE 676\n//*                     to only copy the oldest one.  Customers     *   FILE 676\n//*                     wanted to process only the file as          *   FILE 676\n//*                     \"FIFO\".  Thanks to Eric Bielefeld for the   *   FILE 676\n//*                     code he got.  Cleaned up the code, added    *   FILE 676\n//*                     documentation for the future.               *   FILE 676\n//*                                                                 *   FILE 676\n//*       OPMIUE01 1.0  VPS EXIT01 which will simulate              *   FILE 676\n//*                     overstriking when an application codes a    *   FILE 676\n//*                     \"+\" carriage control character on Laser     *   FILE 676\n//*                     printers. This EXIT  used only for those    *   FILE 676\n//*                     printers needing it. The EXIT is            *   FILE 676\n//*                     scheduled for every print line. Thanks to   *   FILE 676\n//*                     LRS for having it in their closet.          *   FILE 676\n//*                                                                 *   FILE 676\n//*       OPMSUE08 1.0  VPS EXIT08 for ERROR Retry of SNA and IP    *   FILE 676\n//*                     printers. I expanded the number of IP       *   FILE 676\n//*                     error codes handled and adjusted the        *   FILE 676\n//*                     times. It will retry for many times as      *   FILE 676\n//*                     it's the nature of the beast.               *   FILE 676\n//*                                                                 *   FILE 676\n//*       OPMSUX14 1.0  VPS EXIT14 expanded by me to perform many   *   FILE 676\n//*                     needed functions to be able to convert      *   FILE 676\n//*                     absolutely tranparent:                      *   FILE 676\n//*                                                                 *   FILE 676\n//*                     1) Convert from IBM's InfoPrint where       *   FILE 676\n//*                        the module name is specified in the      *   FILE 676\n//*                        \"PRTOPTNS\" field of an OUTPUT statement. *   FILE 676\n//*                                                                 *   FILE 676\n//*                     2) Convert from another implemenation of    *   FILE 676\n//*                        VPS where WRITER name was used.          *   FILE 676\n//*                                                                 *   FILE 676\n//*                     3) Implement FORM name as the preferred     *   FILE 676\n//*                        way of specifing how the HP printers     *   FILE 676\n//*                        will print.                              *   FILE 676\n//*                                                                 *   FILE 676\n//*                     4) \"Wire in\" a check (BLDL) for the name    *   FILE 676\n//*                        used to get the FORMAT module of         *   FILE 676\n//*                        Postscript or PCL commands.  If the      *   FILE 676\n//*                        module is not found substitute SSTD as   *   FILE 676\n//*                        the one.                                 *   FILE 676\n//*                                                                 *   FILE 676\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GDGCPY": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00I\\x01\\x04\\x11_\\x01\\x04\\x11o\\x18Q\\x02\\xdc\\x02\\xcb\\x00\\x00\\xd9\\xe6\\xe3\\xc3\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-04-24T00:00:00", "modifydate": "2004-04-25T18:51:49", "lines": 732, "newlines": 715, "modlines": 0, "user": "RWTCJDM"}, "text": "         TITLE ' GDGCPY V1.0'                                    JDM\n* --------------------------------------------------------------------*\n*                                                                JDM\n*        JIM MARSHALL, SYSTEMS SOFTWARE \"JANITOR\"                JDM\n*        OFFICE OF PERSONNEL MANAGEMENT                          JDM\n*        WASHINGTON DC                                           JDM\n*        202-606-1261 (0700-1530ET)                              JDM\n*        JIM.MARSHALL@OPM.GOV                                    JDM\n*                                                                JDM\n*        THE PROGRAM WAS MODIFIED FROM COPYING ALL FILES IN A    JDM\n*        GDG IN REVERSE ORDER TO ONLY COPYING THE OLDEST ONE.    JDM\n*        THE INTENT OF THE \"CHANEY SYSTEMS SUPPORT\" CODE WAS TO  JDM\n*        COPY THE GDG'S IN CHRONOLOGICAL ORDER. I NEEDED IT TO   JDM\n*        ONLY RETRIEVE THE OLDEST ONE. THUS THE CODE WAS JUST    JDM\n*        STOPPED AFTER THE OLDEST GDG WAS COPIED.                JDM\n*                                                                JDM\n*        MY APPLICATION FOLKS NEEDED TO HAVE THE ABILITY TO      JDM\n*        DELETE THE FILE AFTER IT WAS PROCESSED. THUS I ADDED    JDM\n*        A FILE \"DDNAME=DELGDG\", WHICH GETS AN IDCAMS DELETE     JDM\n*        STATEMENT WRITTEN INTO IT (FOR LATER).                  JDM\n*                                                                JDM\n*        I ALSO CLEANED UP THE CODE AND PACKAGED ALL THE MACROS  JDM\n*        INTO THE PROGRAM. MUCH THANKS TO \"CHANEY SYSTEMS\" WHERE JDM\n*        EVER THEY ARE AND TO ERIC BIELEFIELD WHO DONATED THE    JDM\n*        CODE.                                                   JDM\n*                                                                JDM\n*        THIS PROGRAM COPIES INPUT GENERATION DATASETS\n*        IN REVERSE ORDER (OLDEST GDG FIRST) TO AN OUTPUT\n*        DATASET(SYSUT2) ALLOWING A USER TO MAINTAIN DATA\n*        IN CHRONOLOGICAL SEQUENCE.  THIS IS REQUIRED IF USING\n*        RMF OR OTHER POST PROCESSOR SYSTEMS THAT REQUIRE SMF\n*        DATA TO BE IN SEQUENCE (IT AVOIDS LARGE SORTS).\n*\n*        THE INPUT DATASET NAME (HIGH LEVEL OF THE GDG) IS PASSED\n*        AS PARM INFORMATION AND IS USED TO \"DYNAMICALLY\" ALLOCATE\n*        EACH GENERATION LEVEL OF THE GROUP.  ONCE THIS ROUTINE\n*        IS COMPLETE, THE USER MAY SCRATCH AND UNCATALOG THE\n*        GENERATION DATA SETS IF HE WISHES (THIS ROUTINE \"WILL NOT\"\n*        SCRATCH OR UNCATALOG ANY DATASET).\n*\n*        SINCE THIS ROUTINE IS OF GENERAL PURPOSE, THE USER MUST\n*        PROVIDE ALL DCB INFORMATION INFORMATION FOR BOTH SYSUT1\n*        (IF NON-LABELED OR NSL) AND SYSUT2 BY CODING DCB ON THE\n*        DD CARD.  IF THE INPUT GDG (PARM INFO) IS STANDARD LABEL,\n*        IT NEED NOT BE DEFINED BY SYSUT1.  IN EITHER CASE, SYSUT1\n*        WILL BE DYNAMICALLY DEALLOCATED AND UNCHANGED (SINCE PARM\n*        INFO IS USED TO IDENTIFY THE INPUT FILE(GDG)).\n*\n*        NOTE THAT FOR VS/VBS FILES, \"BFTEK=A\" WILL AUTOMATICALLY\n*        BE ADDED TO THE SYSUT1 DCB VIA AN OPEN EXIT.  THIS IS\n*        DONE TO INSURE THAT A LOGICAL RECORD IS PASSED BY QSAM\n*        AND ALLOWS THE OUTPUT TO BE REBLOCKED (IF SPECIFIED).\n*\n*\n*  REQUIRED JCL:\n*\n*        <----------- STANDARD LABELED INPUT FILE ----------------->\n*         //GDGCPY   EXEC PGM=GDGCPY,                            JDM1\n*         //         PARM='STD.LABELED.GDG.PREFIX' JDM1\n*         //DELGDG   DD -- TEMP OR PERM DISK FILE -              JDM2\n*         //SYSUT2   DD DSN=OUTPUT.DSN(+1),............\n*\n*        <-----------    NON-LABELED INPUT FILE   ----------------->\n*         //GDGCPY   EXEC PGM=GDGCPY,                            JDM1\n*         //         PARM='NON.LABELED.GDG.PREFIX'               JDM1\n*         //DELGDG   DD -- TEMP OR PERM DISK FILE -              JDM2\n*         //SYSUT1   DD DCB=????\n*         //SYSUT2   DD DSN=OUTPUT.DSN(+1).............\n*\n*  LINKAGE EDITOR ATTRIBUTES AND CONSIDERATIONS\n*  ENTRY POINT: GDGCPY (NON-RENT)\n* ---------------------------------------------------------------JDM--*\n* CHANGE LOG:      JIM MARSHALL                                  JDM\n*                                                                JDM\n* 10/29/2003 - THE PROGRAM FROM ERIC BIELEFELD, MILWAUKEE, WI    JDM1\n*        WAS OBTAINED FROM THE CBT FILE 482. THE PROGRAM IS MEANTJDM1\n*        TO COPY ALL OF A GDG BUT IN FIFO ORDER VERSUS THE USUAL JDM1\n*        WAY OF PROCESSING LIFO. NEEDED THE PROGRAM TO COPY ONLY JDM1\n*        THE OLDEST FILE SO THE DATA CAN BE PROCESSED. ALL THE   JDM1\n*        MACROS WERE PACKAGED INSTREAM TO MAKE THE PORTABILITY   JDM1\n*        EASIER. THE INTENT IS TO REWRITE THE PROGRAM TO REMOVE  JDM1\n*        HARDCODED OFFSETS AND TO ADD MORE DOCUMENTATION.        JDM1\n*                                                                JDM1\n* 11/12/2003 - CUSTOMER ALSO WANTED TO LATER DELETE THE GDG      JDM2\n*        PROCESSED. SO WRITE TO THE DDNAME=DELGDG FILE, AN       JDM2\n*        IDCAMS STATEMENT TO PASS ONTO A LATER STEP.             JDM2\n*                                                                JDM2\n**********************************************************************\n*        PRINT NOGEN\n         PRINT OFF\n         EJECT\n         MACRO\n&LABEL   $PROLOG &LV=,&RENT=NO,&ERRCODE=,&C=,&SP=,&GM=,&LIST=NO\n.*********************************************************************\n.*\n.*                                  CHANEY SYSTEMS SUPPORT, INC.\n.*\n.*       THIS MACRO PROVIDES STANDARD LINKAGE AND BASE REGISTER\n.*       SPECIFICATIONS FOR MOST MEMBERS OF THE CSS TOOL KIT.\n.*\n.*       THE FIRST OPERERAND IS A POSITIONAL LIST OF REGISTERS\n.*       TO BE USED AS BASE(S) FOR THE CSECT BEING DEFINED AND\n.*       THE LABEL BECOMES THE CSECT NAME.\n.*\n.*       LV=NNN    SPECIFIES AN ADDITIONAL AMOUNT OF STORAGE TO BE\n.*                 GOTTEN FOLLOWING THE DYNAMIC SAVE AREA.  THIS\n.*                 ADDITIONAL STORAGE IS ADDRESSED VIA REG 13\n.*                 (JUST FOLLOWING THE 18 FULLWORD SAVEAREA) AND\n.*                 IS LIMITED TO 4023.\n.*\n.*       RENT=YES  IF USED, SPECIFIES THAT THE LENGTH OF ADDITIONAL\n.*                 STORAGE IS DETERMINED BASED UPON THE SIZE OF\n.*                 THE DYNAMIC STORAGE DEFINED BETWEEN TWO\n.*                 LABELS:  \"SAVEAREA\" AND \"WORKEND\".  THE WORK\n.*                 AREA IS ADDRESSABLE VIA REG 13 THE SAME AS THE\n.*                 LV= OPERAND.  THE USER DEFINED CONSTANTS THAT\n.*                 EXIST IN THE SOURCE ARE COPIED TO THE NEWLY\n.*                 AQUIRED STORAGE AND ARE DIRECTLY ADDRESSABLE.\n.*                 CAUTION: THE DYNAMIC AREA MUST BE DEFINED\n.*                          \"IMMEDIATELY PRIOR TO ANY DSECTS\" AND\n.*                          YOU MUST SPECIFY \"LTORG\" PRIOR TO THE\n.*                          DEFINITION OF \"SAVEAREA\".\n.*\n.*                 NOTE: LV= AND RENT=YES ARE MUTUALLY EXCLUSIVE.\n.*\n.*       ERRCODE=  SPECIFIES THE RETURN CODE TO BE RETURNED TO\n.*                 THE CALLER IN THE EVENT THAT THE CONDITIONAL\n.*                 GETMAIN FAILS.  IF SPECIFIED, THE GETMAIN THAT\n.*                 IS ISSUED WILL BE CONDITIONAL AND IF IT DOES\n.*                 NOT COMPLETE NORMALLY, THIS ERROR CODE WILL\n.*                 BE RETURNED TO THE CALLER.  IF ERRCODE IS NOT\n.*                 SPECIFIED, THE GETMAIN THAT IS ISSUED WILL BE\n.*                 UNCONDITIONAL WITH A RELATED 80A ABEND IN THE\n.*                 EVENT OF FAILURE.\n.*\n.*       SP=       IS USED TO CAUSE AN MVS SPLEVEL MACRO TO BE\n.*                 EXECUTED AS PART OF THE ASSEMBLY.  POSSIBLE\n.*                 OPTIONS ARE \"1\" (370) OR \"2\" (XA).  IF NOT\n.*                 SPECIFIED, THE SPLEVEL MACRO IS NOT USED.\n.*\n.*       C=        IS A MEANS OF PROVIDING ADDITIONAL DATA IN THE\n.*                 EYECATCHER.  IF USED, THE DATA SPECIFIED MUST\n.*                 BE ENCLOSED WITHIN QUOTES AND IS LIMITED TO\n.*                 46 CHARACTERS.\n.*\n.*       GM=NO     IS NOT SUPPORTED BY THIS MACRO BUT IS ALLOWED\n.*                 FOR COMPATIBILITY OF OLDER VERSIONS.\n.*\n.*       LIST=NO   SUPPRESSES GENERATION OF LISTINGS FOR $PROLOG,\n.*                 $EPILOG AND $REGS WHEN EXPANSION IS ACTIVE\n.*                 (PRINT GEN).\n.*\n.*       EXAMPLES:\n.*\n.*       SECTNAME $PROLOG ,        R12 IS BASE BY DEFAULT\n.*       SECTNAME $PROLOG R12,R11  R12 IS 1ST BASE AND R11 IS SECOND\n.*       SECTNAME $PROLOG R2,LV=8  R2 IS BASE AND AN ADDITIONAL\n.*                                 8 BYTES ARE ADDED TO THE STORAGE\n.*                                 GOTTEN FOR THE SAVEAREA.\n.*\n.*       SECTNAME $PROLOG RENT=YES R12 IS BASE AND THE ADDITIONAL\n.*                                 STORAGE TO BE GOTTEN IS DEFINED\n.*                                 BETWEEN \"SAVEAREA\" AND \"WORKEND\".\n.*       SAVEAREA DS    9D         (SAVE AREA FOR $PROLOG GENERATION)\n.*       MYFIELD1 DC    CL8'DATA1' (PROGRAM CONSTANTS)\n.*       MYFIELD2 DC    CL8'DATA2' (PROGRAM CONSTANTS)\n.*       WORKEND  EQU   *          (END OF DYNAMIC WORK AREA)\n.*\n.*********************************************************************\n         GBLA  &EPILOG             DEFINE GLOBAL FOR $EPILOG\n         GBLB  &REGS,&LSAVE        DEFINE GLOBALS FOR $REGS/$EPILOG\n         LCLA  &AA,&AB,&BUMP,&X    DEFINE LOCAL VARIABLES\n         LCLC  &GMT,&BASE,&LISTOPT DEFINE LOCAL VARIABLES\n&X       SETA  &SYSNDX             SET LABEL CONSTANT\n&EPILOG  SETA  0                   RESET LV= GLOBAL\n&BUMP    SETA  4096                SET FOR BASE REG BUMP\n&LSAVE   SETB  0                   RESET RENT GLOBAL FOR $EPILOG\n&GMT     SETC  'RU'                SET UNCONDITIONAL GETMAIN\n         AIF   ('&LIST' EQ 'YES').LIST1\n         PUSH PRINT\n         PRINT OFF\n.LIST1   ANOP\n&LABEL   CSECT\n         AIF   (T'&SP EQ 'O').GO1  IF NO SPLEVEL REQUIRED\n         SPLEVEL SET=&SP           ISSUE USER REQUESTED SPLEVEL MACRO\n.GO1     ANOP\n         USING *,R15               TEMPORARY BASE\n         B     $&X.A               BRANCH AROUND CONSTANTS\n         DC    CL8'&LABEL'         PROVIDE EYECATCHER\n         AIF   (T'&C EQ 'O').GO2   COMMENTS ADDITION?\n         DC    CL46&C\n.GO2     ANOP\n         DC    C'&SYSDATE @ &SYSTIME' DATE/TIME STAMP OBJECT\n         AIF   (T'&LV   EQ 'O').GO3 IF LV= NOT SPECIFIED\n         AIF   ('&RENT' NE 'YES').GO3 RENT NOT ALSO SPECIFIED\n         MNOTE 12,'$PROLOG - RENT=YES AND LV=&LV MUTUALLY EXCLUSIVE'\n         MEXIT\n.GO3     AIF   ('&RENT' EQ 'YES').GO4   RENT=YES SPECIFIED\n         AIF   (T'&LV   NE 'O').GO4   LV= SPECIFIED\n&LSAVE   SETB  1                   SET NORENT GLOBAL FOR $EPILOG\n$AVE&X   DC    18F'0'              DEFINED SAVE AREA\n.GO4     ANOP\n         AIF   (T'&LABEL NE 'O').GO5 INSURE CSECT NAME PROVIDED\n         MNOTE 8,'$PROLOG - CSECT NAME NOT SUPPLIED'\n.GO5     ANOP\n$&X.A    STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS\n&BASE    SETC  'R12'               ASSUME A BASE REGISTER\n         AIF   (N'&SYSLIST EQ 0).GO6 USE DEFAULT IF NOT SPECIFIED\n&BASE    SETC  '&SYSLIST(1)'       SET THE SPECIFIED BASE REGISTER\n.GO6     ANOP\n         LR    &BASE,R15           SET FIRST BASE REGISTER\n         DROP  R15                 FREE THE TEMPORARY BASE\n         USING &LABEL,&BASE        INFORM ASSEMBLER\n         AIF   (N'&SYSLIST EQ 0).GO7\n&AA      SETA  2                   NUMBER TO DEFINE +1\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).GO7\n&AB      SETA  &AA-1               NUMBER OF LAST BASE REG DEFINED\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB)) SET NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA)) SET NEXT BASE REG\n         USING &LABEL+&BUMP,&SYSLIST(&AA) INFORM THE ASSEMBLER\n&BUMP    SETA  &BUMP+4096          BUMP INDEX\n&AA      SETA  &AA+1               BUMP CONTROL COUNT\n         AGO   .LOOP\n.GO7     AIF   (T'&ERRCODE EQ 'O').GO8 IF ERROR CODE NOT SPECIFIED\n&GMT     SETC  'RC'                ERROR CODE WAS SPECIFIED\n.GO8     AIF   (T'&LV   NE 'O').GO10 LV= SPECIFIED, DO GETMAIN\n         AIF   ('&RENT' EQ 'YES').GO12 RENT SPECIFIED, DO GETMAIN\n         AIF   (T'&ERRCODE EQ 'O').GO9 IF ERROR CODE NOT SPECIFIED\n      MNOTE 8,'$PROLOG - ERRCODE=&ERRCODE INVALID WITHOUT RENT=YES/LV='\n.GO9     ANOP\n$&X.B    LA    R2,$AVE&X           ADDRESS OF SAVE AREA\n         AGO   .COMMON\n.GO10    ANOP\n&EPILOG  SETA  &LV+72              SET SIZE FOR $EPILOG FREEMAIN\n         LA    R0,&LV+72           SET SIZE FOR GETMAIN\n         GETMAIN &GMT,LV=(0)       GET STORAGE\n         AIF   (T'&ERRCODE EQ 'O').GO11 IF UNCONDITIONAL\n         LTR   R15,R15             STORAGE GOTTEN?\n         BZ    $&X.C               YES, CONTINUE\n         LA    R15,&ERRCODE        SET SPECIFIED ERROR CODE\n         ST    R15,16(R13)         INTO SAVE AREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         BR    R14                 AND RETURN\n$&X.C    DS    0H\n.GO11    ANOP\n         LR    R2,R1               SAVE THE GOTTEN STORAGE ADDRESS\n         LR    R14,R2               MVCL - TARGET ADDR\n         LA    R15,&LV+72           MVCL - TARGET SIZE\n         SR    R0,R0                MVCL - SOURCE ADDR (NONE)\n         SR    R1,R1                MVCL - SOURCE SIZE (NONE)\n         MVCL  R14,R0              ZERO GOTTEN STORAGE\n         AGO   .COMMON\n.GO12    ANOP\n$&X.B    GETMAIN &GMT,LV=WORKEND-SAVEAREA GET THE SAVE AREA STORAGE\n         AIF   (T'&ERRCODE EQ 'O').GO13 IF UNCONDITIONAL\n         LTR   R15,R15             STORAGE GOTTEN?\n         BZ    $&X.C               YES, CONTINUE\n         LA    R15,&ERRCODE        SET SPECIFIED ERROR CODE\n         ST    R15,16(R13)         INTO SAVE AREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         BR    R14                 AND RETURN\n$&X.C    DS    0H\n.GO13    ANOP\n         LR    R2,R1               SAVE THE GOTTEN STORAGE ADDRESS\n         LR    R14,R2               MVCL - TARGET ADDR\n         LA    R15,WORKEND-SAVEAREA MVCL - TARGET SIZE\n         LA    R0,SAVEAREA          MVCL - SOURCE ADDR\n         LR    R1,R15               MVCL - SOURCE SIZE\n         MVCL  R14,R0              COPY TO WORKING STORAGE\n         USING SAVEAREA,R13        PROVIDE ADDRESSABILITY\n.COMMON  ANOP\n         LR    R14,R13             COPY OLD SAVE AREA ADDRESS\n         LR    R13,R2              SET NEW SAVEAREA ADDRESS\n         ST    R14,4(R13)          CHAIN SAVEAREA - BACKWARD\n         ST    R13,8(R14)          CHAIN SAVEAREA - FORWARD\n         LM    R15,R2,16(R14)      RESTORE ENTRY REGISTERS\n         SR    R14,R14             RESET RETURN ADDRESS\n         AIF   (&REGS).SKIPREG\n&LISTOPT SETC  'LIST=&LIST'\n         $REGS &LISTOPT            DEFINE STANDARD REG EQUATES\n.SKIPREG AIF   ('&LIST' EQ 'YES').MEXIT\n         POP  PRINT\n.MEXIT   ANOP\n         MEND\n         MACRO\n&LABEL   $EPILOG &RETCODE,&LIST=NO\n.*********************************************************************\n.*                                  CHANEY SYSTEMS SUPPORT, INC.\n.*\n.*       THIS MACRO PROVIDES STANDARD DE-LINKAGE CONVENTIONS FOR\n.*       MOST CSS TOOL KIT MEMBERS.\n.*********************************************************************\n         GBLA  &EPILOG\n         GBLB  &LSAVE\n         AIF   ('&LIST' EQ 'YES').LIST1\n         PUSH  PRINT\n         PRINT ON\n.LIST1   ANOP\n&LABEL   DS    0H\n         AIF   (&LSAVE).GO3\n         AIF   (&EPILOG EQ 0).GO1\n         LA    R0,&EPILOG          GET SAVEAREA LENGTH\n         AGO   .GO2\n.GO1     LA    R0,WORKEND-SAVEAREA GET SAVEAREA LENGTH\n.GO2     LR    R1,R13              GET SAVEAREA ADDRESS FOR FREEMAIN\n.GO3     ANOP\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         AIF   (&LSAVE).GO4\n         FREEMAIN RU,LV=(0),A=(1)  FREE SAVEAREA\n.GO4     ANOP\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RETCODE EQ 'O').GO5\n         LA    R15,&RETCODE        SET RETURN CODE\n.GO5     ANOP\n         BR    R14                 RETURN TO CALLER\n         AIF   ('&LIST' EQ 'YES').MEXIT\n         POP   PRINT\n.MEXIT   ANOP\n         MEND\n         MACRO\n         $REGS &LIST=NO\n.*********************************************************************\n.*                                  CHANEY SYSTEMS SUPPORT, INC.\n.*\n.*       THIS MACRO PROVIDES STANDARD BASE REGISTER EQUATES FOR\n.*       ALL \"CSS\" SUPPORT ROUTINES.\n.*********************************************************************\n         GBLB  &REGS\n         AIF   (&REGS).MEXIT\n&REGS    SETB  1\n         AIF   ('&LIST' NE 'YES').LIST1\n         PUSH  PRINT               SAVE CURRENT PRINT SETTINGS\n         PRINT OFF                 TEMPORARILY TURN OFF PRINT\n.LIST1   ANOP\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         AIF   ('&LIST' NE 'YES').MEXIT\n         POP   PRINT               RESTORE CURRENT PRINT SETTINGS\n.MEXIT   ANOP\n         MEND\n         PRINT ON\n*---------------------------------------------------------------------*\n*        INITIALIZATION AND DCB/JFCB/DSCB MERGE\n*---------------------------------------------------------------------*\nGDGCOPY  $PROLOG R12,LIST=YES     LINKAGE CONVENTIONS\nENTRY010 EQU   *\n         L     R1,0(R1)           GET PARM POINTER\n         LH    R2,0(R1)           GET PARM SIZE\n         CH    R2,=H'0'           ANY PARM?\n         BE    RETURN             NO, RETURN TO CALLER\n         CH    R2,=H'35'          VALID SIZE?\n         BH    RETURN             NO, RETURN TO CALLER\n         LA    R3,CAMDSN(R2)      GET OFFSET TO GDG SUFFIX\n         MVC   0(3,R3),=C'(0)'    START WITH CURRENT GENERATION\n         ST    R3,GDGADDR         SAVE ADDRESS OF GENERATION LEVEL\n         BCTR  R2,0               DECREMENT FOR EXECUTE\n         EX    R2,PARMMOVE        MOVE DSNAME TO CAMLIST\n         L     R1,16              GET CVT POINTER\n         L     R1,0(R1)           OLD/NEW TCB POINTER\n         L     R1,4(R1)           OUR TCB POINTER\n         L     R1,12(R1)          OUR TIOT POINTER\n         LA    R1,24(R1)          ADDRESS OF 1ST DD ENTRY\n         SR    R15,R15            CLEAR FOR ICM\nAAA010   EQU   *\n         ICM   R15,1,0(R1)        GET SIZE OF ENTRY\n         BZ    ENTRY020           NOT FOUND, CONTINUE\n         CLC   4(8,R1),=CL8'SYSUT1' IS THIS SYSUT1 DD NAME?\n         BE    BBB010             FOUND, OPEN DUMMY FILE\n         AR    R1,R15             BUMP TO NEXT DD ENTRY\n         B     AAA010             CHECK NEXT ENTRY\n         SPACE 1\n* --------------------------------------------------------------------*\n*        OPEN TO ALLOW NORMAL MERGE (RDJFCB ONLY GETS JCL INFO)\n*        NOTE: SYSUT1 IS ONLY NEEDED IF INPUT IS NL\n* --------------------------------------------------------------------*\nBBB010   EQU   *\n         OI    FLAG,UT1           INDICATE SYSUT1 WAS FOUND\n         OPEN  (SYSUT1,(INPUT))   OPEN DUMMY INPUT FILE TO FILL DCB\n         LA    R6,SYSUT1          ADDRESSABILITY TO DCB\n         USING IHADCB,R6          INFORM ASSEMBLER\n         TM    DCBOFLGS,DCBOFOPN  WAS THE SYSUT1 CARD PROVIDED\n         BZ    ENTRY020           NO, SKIP THE MERGE\n         LH    R3,DCBBLKSI        GET BLKSIZE\n         LH    R4,DCBLRECL        GET LRECL\n         IC    R5,DCBRECFM        GET RECFM\n         CLOSE (SYSUT1)           CLOSE THE DUMMY INPUT FILE\n         STH   R3,DCBBLKSI        SET BLKSIZE\n         STH   R4,DCBLRECL        SET LRECL\n         STC   R5,DCBRECFM        SET RECFM\n         B     ENTRY020           BRANCH AROUND\n         SPACE 1\nPARMMOVE MVC   CAMDSN(0),2(R1)    MOVE DSNAME TO LIST\n         SPACE 1\n*---------------------------------------------------------------------*\n*        FIND THE OLDEST GENERATION DATASET NAME VIA THE CATALOG\n*---------------------------------------------------------------------*\n         SPACE 1\nENTRY020 EQU   *\n         LOCATE CAMLIST           IS THIS THERE A '0' GENERATION\n         LTR   R15,R15            ZERO RETURN CODE ?\n         BNZ   RETURN             NO - END OF THE LINE\nAAA020   EQU   *\n         AP    GDG#,=P'1'         ADD 1 TO RELATIVE GENERATION NUMBER\n         BAL   R14,ENTRY900       CONVERT GDG#\n         LOCATE CAMLIST           LOOK FOR OLDEST GENERATION\n         LTR   R15,R15            ZERO RETURN CODE ?\n         BZ    AAA020             YES, CHECK FOR NEXT\n         SP    GDG#,=P'1'         BUMP BACK TO PREVIOUS GDG#\n         BAL   R14,ENTRY900       CONVERT GDG#\n         LOCATE CAMLIST           CONVERT GDG NUMBER\n         LTR   R15,R15            ZERO RETURN CODE ?\n         BZ    BBB020             YES, CONTINUE\n         ABEND 0,DUMP             SHOULD NOT OCCUR\n         SPACE 1\nBBB020   EQU   *\n         TM    FLAG,UT1           SHOULD WE DE-ALLOCATE SYSUT1\n         BZ    CCC020             NO, CONTINUE\n         BAL   R14,ENTRY920       DEALLOCATE THE DUMMY FILE\n         SPACE 1\nCCC020   EQU   *\n         OPEN  (SYSUT2,(OUTPUT))  OPEN OUTPUT FILE\nEXIT020  EQU   *\n         SPACE 1\n* ---------------------------------------------------------------------\n*        COPY THE GDG TO THE OUTPUT FILE\n* ---------------------------------------------------------------------\n         SPACE 1\nENTRY030 EQU   *\n         BAL   R14,ENTRY910       ALLOC THE INPUT GDG\n*        MVC   STATUS+26(44),CAMDSN MODIFY WRITE TO PROGRAMMER\n*STATUS  WTO   'GDGCOPY  - ACTIVE=\n*                     ',ROUTCDE=11 INFORM USER GENERATIONS COPIED\n         SPACE 1\n         OPEN  SYSUT1             OPEN THE INPUT GDG\nAAA030   EQU   *\n         GET   SYSUT1             GET A RECORD\n         ST    R1,SAVE14          SAVE FOR DEBUGGING 002 ABENDS\n         LR    R0,R1              POINT TO RECORD FOR PUT\n         PUT   SYSUT2,(0)         WRITE RECORD\n         B     AAA030             GET NEXT RECORD\n         SPACE 1\nBBB030   EQU   *\n         CLOSE SYSUT1             CLOSE THE INPUT DATA SET\n         BAL   R14,ENTRY920       DE-ALLOCATE THE GDG\n         B     ENTRY040           SKIP OVER OPEN EXIT CODE\n         SPACE 1\nCCC030   EQU   *\n         LA    R6,SYSUT1          GET ADDRESS OF INPUT DCB\n         TM    DCBRECFM,DCBRECF   CHECK FOR FIXED LENGTH\n         BOR   R14                YES, IGNORE IT\n         TM    DCBRECFM,DCBRECV   CHECK FOR VARIABLE LENGTH\n         BZR   R14                NO, IGNORE IT\n         TM    DCBRECFM,DCBRECSB  CHECK FOR SPANNED RECORDS\n         BZR   R14                NO, IGNORE IT\n         OI    DCBBFALN,DCBBFTA   OVER-RIDE TO BFTEK=A\n         BR    R14                RETURN TO OPEN\n         SPACE 1\n* --------------------------------------------------------------------*\n*        UPDATE TO THE NEXT GENERATION IF ANY\n* --------------------------------------------------------------------*\n         SPACE 1\nENTRY040 EQU   *\n         OPEN  (DELGDG,(OUTPUT))                                 JDM2\n         MVC   DELDSN(44),CAMDSN  MOVE IN THE FILE NAME          JDM2\n         PUT   DELGDG,DEL1        WRITE RECORD 1                 JDM2\n         PUT   DELGDG,DEL2        WRITE RECORD 2                 JDM2\n         CLOSE (DELGDG)                                          JDM2\n         B     EOJ                                               JDM1\n         SPACE 1                                                 JDM1\n         CP    GDG#,=P'0'         DID WE JUST PROCESS GDG(0)?\n         BE    EOJ                YES, ALL DONE\n         SP    GDG#,=P'1'         NO, DECREMENT TO NEXT GENERATION\n         BAL   R14,ENTRY900       CONVERT GDG#\n         LOCATE CAMLIST           CONVERT NAME FOR DYNALLOC\n         LTR   R15,R15            ZERO RETURN CODE ?\n         BZ    ENTRY030           YES, CONTINUE\n         ABEND 0,DUMP             SHOULD NOT OCCUR\n         SPACE 1\n* --------------------------------------------------------------------*\n*        CONVERT THE GDG NUMBER FOR ALLOCATE/LOCATE\n* --------------------------------------------------------------------*\n         SPACE 1\nENTRY900 EQU   *\n         L     R15,GDGADDR        GET MOVE TO ADDRESS\n         MVC   0(9,R15),=CL9' '   CLEAR POSSIBLE REDUNDANT GDG#\n         UNPK  1(3,R15),GDG#      UNPACK TO CAMLIST\n         OI    3(R15),X'F0'       CHANGE SIGN\n         MVI   1(R15),C'-'        NEGATIVE GDG NUMBER\n         MVI   0(R15),C'('        MOVE LEFT PAREN\n         MVC   4(2,R15),=CL25') ' MOVE RIGHT PAREN AND BLANK\n         BR    R14                RETURN\n         SPACE 1\n* --------------------------------------------------------------------*\n*        ALLOCATE THE GENERATION DATA SET\n* --------------------------------------------------------------------*\n         SPACE 1\nENTRY910 EQU   *\n         ST    R14,SAVE14         SAVE CALLED FROM ADDRESS\n         LA    R11,DAWORK         ADDRESS OF REQUEST BLOCK\n         USING S99RBP,R11         REQ BLK POINTER DSECT\n         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT\n         USING S99RB,R10          RB DSECT\n         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB\n         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR\n         XC    S99RB(RBLEN),S99RB  CLEAR RB\n         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD\n         MVI   S99VERB,S99VRBAL   SET VERB CODE TO ALLOCATE\n         SPACE 1\n* --------------------------------------------------------------------*\n*        SET BITS FOR \"WAIT FOR DEVICES\" & \"WAIT FOR VOLUMES\"\n* --------------------------------------------------------------------*\n         SPACE 1\n         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)\n         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS\n         ST    R9,S99TXTPP        INIT TEXT PTR IN RB\n         LA    R8,S99TUPL+16      POINT BEYOND LAST TXT PTR\n*                                 (ROOM FOR 4 TEXT UNITS)\n         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS\n         SPACE 1\n* --------------------------------------------------------------------*\n*        DDNAME\n* --------------------------------------------------------------------*\n         SPACE 1\n         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT\n         LA    R1,DALDDNAM        KEY FOR DDNAME\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(6),=C'SYSUT1'  DDNAME\n         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n         SPACE 1\n* --------------------------------------------------------------------*\n*        DISP\n* --------------------------------------------------------------------*\n         SPACE 1\n         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT\n         LA    R1,DALSTATS        KEY FOR DSN STATUS\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         MVI   S99TUPAR,X'08'     INDICATE SHR DATA SET\n         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n         SPACE 1\n* --------------------------------------------------------------------*\n*        DATA SET NAME\n* --------------------------------------------------------------------*\n         SPACE 1\n         ST    R8,S99TUPTR        3RD PTR TO 3RD UNIT\n         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR\n         LA    R1,DALDSNAM        KEY FOR DSNAME\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'44'    MOVE 44 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(44),CAMDSN  DSNAME\nRETRY    EQU   *\n         LR    R1,R11             ADDR OF REQUEST BLOCK\n         DYNALLOC\n         ST    R15,RC             SAVE RETURN CODE\n         LTR   R15,R15            RETURN CODE ZERO ?\n         BNZ   ERROR1             NO - DECODE ERROR\n         L     R14,SAVE14         GET CALLED FROM ADDRESS\n         BR    R14\n         SPACE 1\n* --------------------------------------------------------------------*\n*        DE-ALLOCATE THE GENERATION DATA SET\n* --------------------------------------------------------------------*\n         SPACE 1\nENTRY920 EQU   *\n         ST    R14,SAVE14         SAVE CALLED FROM ADDRESS\n         LA    R11,DAWORK         ADDRESS OF REQUEST BLOCK\n         USING S99RBP,R11         REQ BLK POINTER DSECT\n         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT\n         USING S99RB,R10          RB DSECT\n         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB\n         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR\n         XC    S99RB(RBLEN),S99RB  CLEAR RB\n         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD\n         MVI   S99VERB,S99VRBUN   SET VERB CODE TO UN-ALLOCATE\n         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)\n         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS\n         ST    R9,S99TXTPP        INIT TEXT PTR IN RB\n         LA    R8,S99TUPL+16      POINT BEYOND LAST TXT PTR\n*                                 (ROOM FOR 4 TEXT UNITS)\n         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS\n         SPACE 1\n* --------------------------------------------------------------------*\n*        DDNAME\n* --------------------------------------------------------------------*\n         SPACE 1\n         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT\n         LA    R1,DALDDNAM        KEY FOR DDNAME\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(6),=C'SYSUT1'  DDNAME\n         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT\n         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR\n         SPACE 1\n* --------------------------------------------------------------------*\n*        IN-USE ATTRIBUTE\n* --------------------------------------------------------------------*\n         SPACE 1\n         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT\n         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR\n         LA    R1,DUNUNALC        KEY FOR UNALLOC IF IN-USE\n         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LR    R1,R11             ADDR OF REQUEST BLOCK\n         DYNALLOC\n         ST    R15,RC             SAVE RETURN CODE\n         LTR   R15,R15            RETURN CODE ZERO ?\n         BNZ   ERROR1             NO - DECODE ERROR\n         L     R14,SAVE14         GET CALLED FROM ADDRESS\n         BR    R14\n         SPACE 1\n* --------------------------------------------------------------------*\n*        END OF JOB\n* --------------------------------------------------------------------*\n         SPACE 1\nEOJ      EQU   *\n         XC    RC,RC              CLEAR RETCODE\n         CLOSE (SYSUT2)           CLOSE OUTPUT FILE\n*        WTO   'GDGCOPY  - NORMAL COMPLETION',ROUTCDE=11\nRETURN   EQU   *\n         L     R15,RC             PICK UP RETURN CODE\n         $EPILOG\n         SPACE 1\n* --------------------------------------------------------------------*\n*        ERROR ROUTINES\n* --------------------------------------------------------------------*\nERROR1   EQU   *\n         DS    0H\n         L     R1,RC              PICK UP RETURN CODE\n         CVD   R1,DBWRD\n         UNPK  MSG1+9(3),DBWRD+6(2)        RETURN CODE\n         OI    MSG1+11,X'F0'\n         UNPK  MSG1+15(5),S99ERROR(3)      DYNAMIC ERROR CODE\n         MVI   MSG1+19,X'40'\n         UNPK  MSG1+29(5),S99INFO(3)      DYNAMIC INFO CODE\n         MVI   MSG1+33,X'40'\nMSG1     EQU   *\n         WTO   ' XXX - XXXXX ERROR - XXXXX INFO (DYNAMIC ALLOC ERROR)',X\n               ROUTCDE=11\n         CLC   MSG1+9(10),=CL10'004 - 0214' NO DEVICES AVAILABLE?\n         BE    SLEEP                    YES, WAIT A MINUTE\n         CLC   MSG1+9(10),=CL10'004 - 0484' NO DEVICES AVAILABLE?\n         BNE   ABEND1                   NO, ABEND\nSLEEP    EQU   *\n         STIMER WAIT,DINTVL=WAITTIME    WAIT A WHILE\n         XC    RC,RC                    RESET D/A RETURN CODE\n         XC    S99ERROR,S99ERROR        RESET D/A ERROR CODE\n         XC    S99INFO,S99INFO          RESET D/A INFO CODE\n         B     RETRY                    AND RETRY THE REQUEST\n         SPACE 1\nABEND1   EQU   *\n         ABEND 1,DUMP\nDBWRD    DC    D'0'\n         EJECT\n* --------------------------------------------------------------------*\n*        CAMLIST FOR LOCATING EACH GDG\n* --------------------------------------------------------------------*\n         SPACE 1\nCAMLIST  CAMLST NAME,CAMDSN,,CAMWORK\nCAMDSN   DC    CL44' '\nCAMWORK  DS    0D\n         DC    265C' '\n         SPACE 1\n* --------------------------------------------------------------------*\n*        STORAGE AREAS\n* --------------------------------------------------------------------*\n         SPACE 1\nGDGADDR  DC    F'0'               ADDRESS OF '(NNN)' FIELD\nRC       DC    F'16'              RETURN CODE (PRIMED FOR ERROR)\nSAVE14   DC    F'0'               REG 14 SAVE AREA\nEXLST    DC    X'85',AL3(CCC030)  OPEN LIST FOR SYSUT1\nGDG#     DC    PL2'0'             CURRENT GDG NUMBER\nFLAG     DC    X'00'              OPTIONS SWITCHES\nUT1      EQU   X'01'              SYSUT1 WAS FOUND IN TIOT\nWAITTIME DC    C'00010000'        WAIT TIME FOR DYNALLOC\n         SPACE 1\n         LTORG\n         SPACE 1\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=BBB030,           X\n               EXLST=EXLST\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM\nDELGDG   DCB   DDNAME=DELGDG,DSORG=PS,MACRF=PM,                  JDM2  X\n               RECFM=FB,LRECL=80                                 JDM2\n         SPACE 1                                                 JDM2\n* ---------------------------------------------------------------JDM2-*\n*        IDCAMS \"DELETE\" STATEMENT                               JDM2\n* ---------------------------------------------------------------JDM2-*\n         SPACE 1                                                 JDM2\nDEL1     DS    0CL80                                             JDM2\n         DC    CL10' '                                           JDM2\n         DC    CL10'DELETE'                                      JDM2\n         DC    CL06' '                                           JDM2\nDELDSN   DC    CL44' '             DSN TO BE DELETED             JDM2\n         DC    CL10'+ '                                          JDM2\n         SPACE 1                                                 JDM2\nDEL2     DS    0CL80                                             JDM2\n         DC    CL25' '                                           JDM2\n         DC    CL55'SCRATCH NONVSAM'                             JDM2\n         DS    0F                                                JDM2\n         SPACE 1                                                 JDM2\nDAWORK   DC    XL256'00'\n         SPACE 1                                                 JDM1\n         DCBD  DSORG=QS\n         SPACE 1                                                 JDM1\n         IEFZB4D0\n         SPACE 1                                                 JDM1\n         IEFZB4D2\n         SPACE 1                                                 JDM1\nRBLEN    EQU   (S99RBEND-S99RB)\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OPMIUE01": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x04\\x11_\\x01\\x04\\x11\\x7f\\x15\\x15\\x03\\xaa\\x03\\xaa\\x00\\x00\\xd9\\xe6\\xe3\\xc3\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-04-24T00:00:00", "modifydate": "2004-04-26T15:15:00", "lines": 938, "newlines": 938, "modlines": 0, "user": "RWTCJDM"}, "text": "OPMIUE01 TITLE 'VPS USER EXIT-01:   PRINT LINE'                   OPM3\n*---------------------------------------------------------------------*\n*                                                                     *\n* I CALLED LRS WITH A PROBLEM WHICH WAS NOT REALLY A PROBLEM.     OPM2*\n* A CUSTOMER OF MINE WAS CONVERTING A FEW DOT-MATRIX PRINTERS     OPM2*\n* TO LASERJETS. THERE IS AN APPLICATION WHICH USES THE \"+\" ASA    OPM2*\n* CARRIAGE CONTROL CHARACTER TO OVERPRINT A WORD MAKING IT APPEAR OPM2*\n* AS BOLD. THIS IS LOST WHEN THEY MOVED TO LASERJETS. I GOT A     OPM2*\n* RESPONSE FROM ONE OF THE SUPPORT STAFF TELLING ME OF AN OLD     OPM2*\n* USER EXIT01 AT THE V6R2 LEVEL WHICH WILL DO IT. HE SENT ME THE  OPM2*\n* CODE AND I PLANNED TO CONVERT IT. WELL, IN THE AFTERNOON HE     OPM2*\n* SENT ME THE CODE ALREADY CONVERTED TO THE V8 LEVEL. PLUS HE     OPM2*\n* TESTED IT. THIS IS STELLAR SUPPORT!!!!                          OPM2*\n*                                                                 OPM2*\n* OPM PLANS TO IMPLEMENT THIS EXIT IN A VERY LIMITED WAY. SINCE   OPM2*\n* THE IMPLEMENTATION OF EXIT01 CAUSES THE EXIT TO BE CALLED FOR   OPM2*\n* EVERY PRINT LINE WE PLAN TO BRING UP A MINI-VPS STC TO SERVICE  OPM2*\n* ONLY THOSE PRINTERS NEEDING THIS SERVICE. THERE WOULD BE SEVERE OPM2*\n* PERFORMANCE ISSUES EVEN IF THE EXIT WAS ENTERED, CHECKED FOR    OPM2*\n* \"HPL\" AND EXITED IMMEDIATELY.                                   OPM2*\n*                                                                 OPM2*\n*                            JIM MARSHALL, SOFTWARE \"JANITOR\"     OPM2*\n*                            US OFFICE OF PERSONNEL MANAGEMENT    OPM2*\n*                            CENTER FOR INFORMATION SERVICES/     OPM2*\n*                                DATA CENTER GROUP                OPM2*\n*                            1900 E STREET NW - ROOM BH04         OPM2*\n*                            WASHINGTON DC  20415                 OPM2*\n*                            (W) 202-606-1261 (0700-1530ET)       OPM2*\n*                            JIM.MARSHALL@OPM.GOV                 OPM2*\n*                                                                 OPM2*\n* CHANGE LOG:                                                     OPM2*\n*                                                                 OPM2*\n*  OPM1 - 11/22/2003 - LRS HAD MARKED THE CODE IT CHANGED WITH    OPM2*\n*         \"DC0063\" OUT IN 73-80. LEFT THIS CODE AND CHANGED ALL   OPM2*\n*         REFERENCES TO OPM                                       OPM2*\n*                                                                 OPM2*\n*  OPM2 - 11/22/2003 - ADDED ALL THE DOCUMENTATION.               OPM2*\n*                                                                 OPM2*\n*  OPM3 - 11/22/2003 - TOOK THE LRS CODE AND CHANGED THE MODULE   OPM2*\n*         NAME TO OPMIUE01 AND ALL REFERENCES.                    OPM2*\n*                                                                 OPM2*\n*  OPM4 - 11/22/2003 - CHANGED THE HPL CODE CHECK TO \"HPL\". THIS  OPM2*\n*         WILL ENSURE THERE IS NO MIXUP WITH OTHER HPL PRINTERS.  OPM2*\n*                                                                 OPM2*\n*  OPM5 - 12/01/2003 - THE HPL PART OF CODE USES GETMAIN/FREEMAIN OPM2*\n*         CODE VERSUS $$VPSERV. THE CODE WILL WORK BUT SHOULD BE  OPM2*\n*         FIXED.                                                  OPM2*\n*                                                                 OPM2*\n*  OPM6 - 01/21/2004 - THE OPM SEPINFO VALUE IS \"HPL\" VS \"HP+\".   OPM2*\n*         CHANGED TRIGGER STRING FROM \"HP+\" TO \"HPL\" IAW OPM      OPM2*\n*         STANDARDS.                                              OPM2*\n*                                                                 OPM2*\n*-----------------------------------------------------------------OPM2*\n*                                                                     *\n* THIS IS A SPECIAL VERSION OF VPS USER EXIT 01 THAT LOOKS FOR        *\n* OVERPRINT CARRIAGE CONTROL CHARACTERS ON PRINT LINES.  WHEN AN      *\n* OVERPRINT IS FOUND, THE PCL COMMAND TO TURN BOLD PRINTING ON IS     *\n* INSERTED BEFORE EACH WORD IN THE PRINT LINE, THE PCL COMMAND TO     *\n* TURN BOLD PRINTING OFF IS INSERTED AFTER EACH WORD IN THE PRINT     *\n* LINE, AND FLAGS ARE SET TO PREVENT VPS FROM TRANSLATING DATA IN     *\n* THE PRINT LINE.  THESE ACTIONS WILL NOT BE PERFORMED FOR ANY PRINT  *\n* LINE OVER 384 CHARACTERS IN LENGTH.                                 *\n*                                                                     *\n* THIS EXIT ALSO LOOKS FOR BACKSPACE CHARACTERS (X'16') THAT ARE USED *\n* WITHIN PRINT LINES TO INDICATE THAT THE WORD SHOULD BE PRINTED IN   *\n* BOLD TYPE.  FOR PRINTERS WITH SEPINFO=HPL, \"BOLD ON\" AND \"BOLD  OPM4*\n* OFF\" COMMANDS ARE INSERTED AROUND THE WORD THAT NEEDS TO BE         *\n* HIGHLIGHTED, AND THE BACKSPACES AND SECOND APPEARANCE OF THE WORD   *\n* ARE REMOVED.  THESE ACTIONS WILL NOT BE PERFORMED FOR ANY PRINT     *\n* LINE OVER 1024 BYTES IN LENGTH.                                     *\n*                                                                     *\n* THESE FUNCTIONS ARE PERFORMED ONLY FOR TCP/IP PRINTERS WITH         *\n* SEPINFO=HPL IN THEIR PRINTER DEFINITION.                        OPM4*\n*                                                                     *\n* ALL DATA OUTSIDE THE PCL COMMANDS IS TRANSLATED BY USING THE        *\n* TRANSLATE TABLE SPECIFIED IN THE PRTXLATE KEYWORD.                  *\n*                                                                     *\n* BOTH CONDITIONS ARE NOT HANDLED FOR THE SAME PRINT LINE, I.E., A    *\n* PRINT LINE WITH AN OVERPRINT CARRIAGE CONTROL WILL NOT BE CHECKED   *\n* FOR BACKSPACE CHARACTERS.                                           *\n*                                                                     *\n* PRTROPTS=40000000 SHOULD BE USED FOR PRINTERS THAT NEED THESE       *\n* SPECIAL FUNCTIONS, TO GUARANTEE THAT THE LINE WORK AREA IS AT       *\n* LEAST 500 BYTES LONG.  HOWEVER, IT IS STILL POSSIBLE THAT THE       *\n* REVISED TEXT WOULD EXCEED THE AVAILABLE LINE WORK AREA SIZE.  IF    *\n* THAT SITUATION OCCURS, THE EXIT WILL NOT MODIFY THE PRINT LINE      *\n* AT ALL.                                                             *\n*                                                                     *\n* THE BASE SOURCE CODE FOR THIS EXIT WAS COPIED FROM                  *\n* DIST.VPS.V1R80 ON NOV 20, 2003. CHANGES CAN BE FOUND BY SEARCHING   *\n* FOR \"DC0063\" IN COLUMNS 73 - 80. THE CHANGES ADDED TO THIS VERSION  *\n* OF EXIT01 WERE COPIED FROM VPS.R62.SPECIAL(AS595E01).               *\n*---------------------------------------------------------------------*\n         SPACE 1\n*---------------------------------------------------------------------*\n*                                                                     *\n*        VTAM PRINTER SUPPORT SYSTEM - VERSION 1, RELEASE 8.0         *\n*                                                                     *\n*        (C) COPYRIGHT - 1999, 2000                                   *\n*                        LEVI, RAY & SHOUP, INC.                      *\n*                        2401 WEST MONROE STREET                      *\n*                        SPRINGFIELD, IL 62704                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*   MODULE NAME:    OPMIUE01 (US OFFICE OF PERSONNEL MANAGEMENT)  OPM3*\n*                                                                     *\n*                                                                     *\n*   EXIT NAME:      PRINT LINE                                        *\n*                                                                     *\n*                                                                     *\n*   EXIT TYPE:      PRINTER                                           *\n*                                                                     *\n*                                                                     *\n*   EXIT TCB:       PRINTER                                           *\n*                                                                     *\n*                                                                     *\n*   RECOVERY:       EXITNN= KEYWORD DETERMINES RECOVERY ON/OFF        *\n*                                                                     *\n*                   RECOVERY ON:  EXIT WILL BE DISABLED               *\n*                                                                     *\n*                   RECOVERY OFF: PRINTER WILL BE 'EDRAINED'          *\n*                                                                     *\n*                                                                     *\n*   ATTRIBUTES:     REENTRANT, REUSEABLE, REFRESHABLE                 *\n*                                                                     *\n*                   PROBLEM STATE, KEY 8                              *\n*                                                                     *\n*                   AUTHORIZED                                        *\n*                                                                     *\n*                   AMODE=31 RMODE=31                                 *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:       THIS EXIT IS CALLED AS EACH LINE OF A DATASET     *\n*                   IS ABOUT TO BE PRINTED.  IT IS CALLED PRIOR TO    *\n*                   TRANSLATION, TRUNCATION OR CARRIAGE CONTROL       *\n*                   VALIDATION.  IT CAN MODIFY THE CONTENTS OF A      *\n*                   PRINT LINE, OR NOTIFY VPS THAT THE PRINT LINE     *\n*                   IS NOT TO BE PROCESSED.                           *\n*                                                                     *\n*                                                                     *\n*=====================================================================*\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*   THE SAMPLE EXIT, SUPPLIED BY LRS, PROVIDES THE FOLLOWING:         *\n*                                                                     *\n*   - SUPPORT FOR THE XEROX TRANSPARENCY FEATURE OF THE XEROX LASER   *\n*     PRINTERS.                                                       *\n*                                                                     *\n*   EACH FUNCTION IS SUPPORTED BY A SEPARATE SECTION OF CODE.  IT IS  *\n*   ASSUMED THAT A PRINT LINE WILL QUALIFY FOR ONLY A SINGLE SECTION. *\n*   IF THE PRINT LINE FAILS TO QUALIFY FOR EITHER SECTION, CONTROL IS *\n*   RETURNED TO VPS WITH RC=00.                                       *\n*                                                                     *\n*                                                                     *\n*   NOTES:                                                            *\n*                                                                     *\n*   - THIS EXIT IS CALLED FOR EVERY LINE OF A DATASET.                *\n*                                                                     *\n*   - THIS EXIT IS NOT CALLED FOR SEPARATOR LINES.                    *\n*                                                                     *\n*   - THIS EXIT CALLED PRIOR TO TRANSLATION, TRUNCATION, AND CARRIAGE *\n*     CONTROL VALIDATION.                                             *\n*                                                                     *\n*   - THE DATA LENGTH AND CONTENT MAY BE ALTERED.                     *\n*                                                                     *\n*   - THE CARRIAGE CONTROL CHARACTER MAY BE ALTERED TO ANY VALID      *\n*     CHARACTER FOR THE DATASET TYPE (IE. ASA TO ASA OR MACHINE TO    *\n*     MACHINE).                                                       *\n*                                                                     *\n*   - THE LENGTH CANNOT BE SET TO 00.                                 *\n*                                                                     *\n*   - THE LENGTH CANNOT EXCEED THE VALUE IN FIELD 'LINELNLM'.         *\n*                                                                     *\n*   - 'LINELNLM' CANNOT BE MODIFIED.                                  *\n*                                                                     *\n*   - RESERVED AREAS WITHIN THE PRINT LINE DSECT CANNOT BE MODIFIED.  *\n*                                                                     *\n*   - MULTIPLE PRINT LINES MAY BE GENERATED FROM ONE INPUT PRINT      *\n*     LINE USING RETURN CODE 8.  PLEASE NOTE THAT THE INPUT PRINT     *\n*     LINE WILL BE AVAILABLE ONLY ON THE FIRST CALL. CALLS TO THE     *\n*     EXIT GENERATED BY SPECIFYING RC08 WILL BE PASSED UNPREDICTABLE  *\n*     DATA IN THE PRINT LINE.  IF THE ORIGINAL PRINT LINE MUST BE     *\n*     REFERENCED IN SUBSEQUENT CALLS, THEN IT WILL BE THE USER'S      *\n*     RESPONSIBILTY TO SAVE IT.  MULTIPLE CALLS GENERATED BY RC08     *\n*     SHOULD BE TERMINATED BY SPECIFYING RC00.                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*      ON ENTRY:                                                      *\n*         R0 ==>  REQUEST CODE (ALWAYS 00).                           *\n*         R1 ==>  ADDRESS OF PARAMETER LIST.                          *\n*        R13 ==>  ADDRESS OF CALLERS SAVEAREA.                        *\n*        R14 ==>  RETURN ADDRESS.                                     *\n*        R15 ==>  ENTRY ADDRESS.                                      *\n*                                                                     *\n*      DURING EXECUTION:                                              *\n*      R0-R3 ==>  VOLATILE.                                           *\n*         R4 ==>  ADDRESS OF SYSTEM ATTRIBUTES.                       *\n*         R5 ==>  ADDRESS OF USER WORKAREA (2 WORDS).                 *\n*         R6 ==>  ADDRESS OF PRINTER ATTRIBUTES.                      *\n*         R7 ==>  ADDRESS OF DATASET ATTRIBUTES.                      *\n*         R8 ==>  ADDRESS OF LINE ATTRIBUTES.                         *\n*     R9-R11 ==>  VOLATILE.                                           *\n*        R12 ==>  VPSSUE01 BASE REGISTER.                             *\n*        R13 ==>  ADDRESS OF CALLERS SAVEAREA.                        *\n*    R14-R15 ==>  VOLATILE.                                           *\n*                                                                     *\n*      ON EXIT:                                                       *\n*         ALL REGISTERS WILL BE RESTORED TO ENTRY CONDITIONS, EXCEPT  *\n*      R15, WHICH WILL CONTAIN THE RETURN CODE.                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PARAMETER LIST FORMAT:                                            *\n*                                                                     *\n*      A(SYSTEM ATTRIBUTES)  - MAPPING MACRO: VPSSSYAT                *\n*      A(USER WORKAREA)      - MAPPING MACRO: N/A                     *\n*      A(PRINTER ATTRIBUTES) - MAPPING MACRO: VPSSPRAT                *\n*      A(DATASET ATTRIBUTES) - MAPPING MACRO: VPSSDSAT                *\n*      A(PRINT LINE)         - MAPPING MACRO: VPSSLINE                *\n*      A(XMEMORY ATTRIBUTES) - MAPPING MACRO: VPSSXMAT                *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*      00 - PROCESS THE LINE AND DON'T CALL AGAIN.                    *\n*      04 - DELETE  THE LINE.                                         *\n*      08 - PROCESS THE LINE AND CALL AGAIN.                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*        O P M I U E 0 1   E N T R Y                              OPM3*\n*---------------------------------------------------------------------*\nOPMIUE01 CSECT                                                    OPM3\nOPMIUE01 AMODE ANY                                                OPM3\nOPMIUE01 RMODE ANY                                                OPM3\n         B     28(,R15)                BRANCH AROUND CONSTANTS.\n         DC    CL8'OPMIUE01',CL8'&SYSDATE',CL8'&SYSTIME'          OPM3\n         BAKR  R14,R0                  SAVE REGISTERS.                  VPS80\n         LR    R12,R15                 LOAD PROGRAM BASE REGISTER.\n         USING OPMIUE01,R12            ESTABLISH PROGRAM BASE REG OPM3\n         SPACE\n         LM    R4,R8,0(R1)             LOAD PARAMETER REGISTERS.\n         USING SYADSECT,R4             ESTABLISH SYAT ADDRESSABILITY.\n         USING PRADSECT,R6             ESTABLISH PRAT ADDRESSABILITY.\n         USING DSADSECT,R7             ESTABLISH DSAT ADDRESSABILITY.\n         USING LINEDSCT,R8             ESTABLISH LINE ADDRESSABILITY.\n         SPACE\n         LTR   R0,R0                   NORMAL PRINT LINE REQUEST?\n         BNZ   UXITRC00                NO, RETURN W/ RC=00.\n         SPACE\n*---------------------------------------------------------------------*\n*        INVOKE XEROX LASER CONTROL SECTION                           *\n*---------------------------------------------------------------------*\n         SPACE\n         BAS   R14,XRXLASER            PROCESS XEROX LASER.\n         B     UXIT010(R15)            TAKE APPROPRIATE ACTION.\nUXIT010  DS    0H\n         B     UXITRC00                00 - RETURN W/ RC=00.\n         B     UXITRC04                04 - RETURN W/ RC=04.\n*                                      08 - INVOKE NEXT SECTION.\n         SPACE\n*        B     UXITRC00                RETURN W/ RC=00.\n         EJECT\n*-----------------------------------------------------------------OPM1* DC0063\n*        INVOKE HPL OVERPRINT SECTION                             OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         BAL   R14,HPLLASER            PROCESS HPL OVERPRINT.     OPM1  DC0063\n         B     UXIT020(R15)            TAKE APPROPRIATE ACTION.   OPM1  DC0063\nUXIT020  DS    0H                                                 OPM1  DC0063\n         B     UXITRC00                00 - RETURN W/ RC=00.      OPM1  DC0063\n         B     UXITRC04                04 - RETURN W/ RC=04.      OPM1  DC0063\n*                                      08 - INVOKE NEXT SECTION.  OPM1  DC0063\n         SPACE\n         B     UXITRC00                RETURN W/ RC=00.\n         SPACE\n*---------------------------------------------------------------------*\n*        O P M I U E 0 1   E X I T                                OPM3*\n*---------------------------------------------------------------------*\n         SPACE\nUXITRC00 DS    0H\n         LA    R15,RC00                SET RETURN CODE = 00.\n         B     UXIT999                 RETURN W/ RC=00.\n         SPACE\nUXITRC04 DS    0H\n         LA    R15,RC04                SET RETURN CODE = 04.\n         B     UXIT999                 RETURN W/ RC=00.\n         SPACE\nUXIT999  DS    0H\n         EREG  R0,R1                   RESTORE R0 AND R1.               VPS80\n         PR    ,                       RESTORE STATUS AND RETURN.       VPS80\n         TITLE 'XEROX LASER CONTROLS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*   THIS SECTION SUPPORTS THE XEROX TRANSPARENCY FEATURE OF THE       *\n*   XEROX LASER PRINTERS.  IT ONLY PROCESSES DATASETS WITH THE        *\n*   FOLLOWING ATTRIBUTES:                                             *\n*                                                                     *\n*   - SEPINFO MUST = XRX IN THE 1ST 3 BYTES                           *\n*   - LUTYPE MUST = 1 OR 6                                            * VPS61008\n*   - DATASET CLASS MUST = 6                                          *\n*   - LINE MUST NOT HAVE CARRIAGE CONTROL                             *\n*   - LINE LENGTH MUST BE LESS THAN OR EQUAL TO 80                    *\n*                                                                     *\n*   AFTER THE ABOVE CONDITIONS HAVE BEEN SATISFIED, THE FOLLOWING     *\n*   ACTIONS ARE PERFORMED:                                            *\n*                                                                     *\n*   - THE LINE IS PADDED WITH BLANKS TO 80 BYTES.                     *\n*   - XEROX TRANSPARENCY CHARACTER (X'36') AND LENGTH BYTE (X'50')    *\n*     ARE INSERTED AT THE BEGINNING OF THE LINE.                      *\n*   - THE LINE LENGTH FIELD IS UPDATED ('LINELNL').                   *\n*   - THE LINE FLAGS ARE SET TO INFORM VPS OF THE FOLLOWING:          *\n*     - BYPASS CC PROCESSING                                          *\n*     - BYPASS TRANSLATION                                            *\n*     - BYPASS TRUNCATION OF TRAILING BLANKS                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*      ON ENTRY:                                                      *\n*      R0-R3 ==>  UNPREDICTABLE.                                      *\n*         R4 ==>  ADDRESS OF SYSTEM ATTRIBUTES.                       *\n*         R5 ==>  ADDRESS OF USER WORKAREA (2 WORDS).                 *\n*         R6 ==>  ADDRESS OF PRINTER ATTRIBUTES.                      *\n*         R7 ==>  ADDRESS OF DATASET ATTRIBUTES.                      *\n*         R8 ==>  ADDRESS OF LINE ATTRIBUTES.                         *\n*     R9-R11 ==>  UNPREDICTABLE.                                      *\n*        R12 ==>  VPSSUE01 BASE REGISTER.                             *\n*        R13 ==>  ADDRESS OF CALLERS SAVEAREA.                        *\n*        R14 ==>  RETURN ADDRESS.                                     *\n*        R15 ==>  UNPREDICTABLE.                                      *\n*                                                                     *\n*      ON EXIT:                                                       *\n*         ALL REGISTERS WILL BE RESTORED TO ENTRY CONDITIONS, EXCEPT  *\n*      R15, WHICH WILL CONTAIN THE RETURN CODE.                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*      00 - LINE HAS BEEN PROCESSED (RETURN TO VPS W/ RC=00).         *\n*      04 - LINE HAS BEEN PROCESSED (RETURN TO VPS W/ RC=04).         *\n*      08 - LINE HAS NOT BEEN PROCESSED (INVOKE OTHER SECTIONS).      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n*---------------------------------------------------------------------*\n*        XEROX LASER CONTROLS                                         *\n*---------------------------------------------------------------------*\n         SPACE\nXRXLASER DS    0H\n         BAKR  R14,R0                  SAVE REGISTERS.                  VPS80\n         SPACE\n         XR    R10,R10                 RESET WORKAREA BASE REGISTER.\n         SPACE\n         CLC   =CL3'XRX',PRASEPI       IS THIS A XEROX LASER PRINTER?\n         BNE   XRXRC08                 NO, RETURN W/ RC=08.\n         SPACE\n         CLI   PRALUTYP,$PRALU1        LU-1 DEVICE?\n         BE    XRX005                  YES, CONTINUE.                   VPS61008\n         CLI   PRALUTYP,$PRALU6        LU-6 DEVICE?                     VPS61008\n         BNE   XRXRC08                 NO, RETURN W/ RC=08.             VPS61008\nXRX005   DS    0H                                                       VPS61008\n         CLI   DSACLS,C'6'             CLASS = 6?\n         BNE   XRXRC08                 NO, RETURN W/ RC=08.\n         SPACE\n         TM    LINELNF,$LINEHCC        IS CC PRESENT?\n         BO    XRXRC08                 YES, RETURN W/ RC=08.\n         SPACE\n         LA    R14,LINELIN             POINT TO DATA LINE.\n         LH    R1,LINELNL              GET ORIGINAL LENGTH.\n         CH    R1,=AL2(XRXMAXLN)       VALID LENGTH?\n         BH    XRXRC08                 NO,  RETURN W/ RC=08.\n         BE    XRX015                  YES, FULL RECORD.\n         SPACE\n         LH    R0,=AL2(XRXMAXLN)       ESTABLISH...\n         SR    R0,R1                      LOOP COUNTER.\n         LA    R14,0(R1,R14)           OFFSET OF 1ST TRAILING BLANK.\nXRX010   DS    0H\n         MVI   0(R14),C' '             ADD TRAILING BLANK.\n         LA    R14,1(,R14)             BUMP TO NEXT BYTE.\n         BCT   R0,XRX010               LOOP UNTIL COMPLETE.\n         SPACE\nXRX015   DS    0H\n         LH    R1,=AL2(XRXMAXLN)       SET...                           VPS61087\n         LA    R1,L'XRXSCS(,R1)           LENGTH...\n         STH   R1,LINELNL                    OF NEW LINE.\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        INSERT XEROX TRANSPARENCY CHARACTER                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n         $$VPSERV REQUEST=GETMAIN,                                     XVPS80\n               LV=XRXLEN,                                              XVPS80\n               SYAT=YES,                                               XVPS80\n               MF=S                                                     VPS80\n         LR    R10,R1                  LOAD XRX BASE REGISTER.\n         USING XRXDSECT,R10            ESTABLISH XRX ADDRESSABILITY.\n         SPACE\n         MVC   XRXWORK,LINELIN              COPY DATA LINE TO WORKAREA.\n         MVC   LINELIN(L'XRXSCS),XRXSCS     INSERT XEROX TRANSPARENCY.\n         MVC   LINELIN+L'XRXSCS(80),XRXWORK APPEND FONT DATA.\n         SPACE\n         OI    LINELNF,$LINECCP            BYPASS CC PROCESSING.\n         OI    LINELNF2,$LINEBXL+$LINEBTB  BYPASS XLATE AND TRUNCATION.\n         DROP  R10                     KILL XEROX ADDRESSABILITY.\n         SPACE\n*---------------------------------------------------------------------*\n*        FREE XEROX WORKAREA                                          *\n*---------------------------------------------------------------------*\n         SPACE\n         LTR   R10,R10                 XRX WORKAREA ALLOCATED?\n         BZ    XRX020                  NO, BYPASS FREEMAIN.\n         $$VPSERV REQUEST=FREEMAIN,                                    XVPS80\n               A=(R10),                                                XVPS80\n               LV=XRXLEN,                                              XVPS80\n               SYAT=YES,                                               XVPS80\n               MF=S                                                     VPS80\n         XR    R10,R10                 RESET WORKAREA BASE REGISTER.\nXRX020   DS    0H\n         B     XRXRC00                 RETURN W/ RC=00.\n         SPACE\n*---------------------------------------------------------------------*\n*        RC=00 (RETURN TO VPS AND PROCESS THE LINE)                   *\n*---------------------------------------------------------------------*\n         SPACE\nXRXRC00  DS    0H\n         LA    R15,RC00                SET RETURN CODE = 00.\n         B     XRX999                  RETURN W/ RC=00.\n         SPACE\n*---------------------------------------------------------------------*\n*        RC=04 (RETURN TO VPS AND DISCARD THE LINE)                   *\n*---------------------------------------------------------------------*\n         SPACE\nXRXRC04  DS    0H\n         LA    R15,RC04                SET RETURN CODE = 04.\n         B     XRX999                  RETURN W/ RC=04.\n         SPACE\n*---------------------------------------------------------------------*\n*        RC=08 (INVOKE NEXT SECTION)                                  *\n*---------------------------------------------------------------------*\n         SPACE\nXRXRC08  DS    0H\n         LA    R15,RC08                SET RETURN CODE = 08.\n         B     XRX999                  RETURN W/ RC=08.\n         SPACE\n*---------------------------------------------------------------------*\n*        RETURN TO CALLER                                             *\n*---------------------------------------------------------------------*\n         SPACE\nXRX999   DS    0H\n         EREG  R0,R1                   RESTORE R0 AND R1.               VPS80\n         PR    ,                       RESTORE STATUS AND RETURN.       VPS80\n         TITLE 'HPL OVERPRINT CONTROL'                            OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*   RETURN CODES:                                                 OPM1* DC0063\n*                                                                 OPM1* DC0063\n*      00 - LINE HAS BEEN PROCESSED (RETURN TO VPS W/ RC=00).     OPM1* DC0063\n*      04 - LINE HAS BEEN PROCESSED (RETURN TO VPS W/ RC=04).     OPM1* DC0063\n*      08 - LINE HAS NOT BEEN PROCESSED (INVOKE OTHER SECTIONS).  OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPLLASER DS    0H                                                 OPM1  DC0063\n         LR    R11,R14                 SAVE RETURN ADDRESS.       OPM1  DC0063\n         XR    R10,R10                 RESET WORKAREA BASE REG    OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         CLI   PRALUTYP,$PRALUT        TCP/IP DEVICE?             OPM1  DC0063\n         BNE   HPLRC08                 NO, RETURN W/ RC=08.       OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         CLC   =CL3'HPL',PRASEPI       IS THIS AN HP PRINTER?     OPM4  DC0063\n         BNE   HPLRC08                 NO, RETURN W/ RC=08.       OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         TM    LINELNF,$LINEHCC        IS CC PRESENT?             OPM1  DC0063\n         BZ    HPB000                  NO, GO CHECK FOR BACKSPACESOPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         CLI   LINELNC,C'+'            IS CC ASA OVERPRINT?       OPM1  DC0063\n         BE    HPL0010                 YES, GO CHECK LINE LENGTH. OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         CLI   LINELNC,X'01'           IS CC MACHINE OVERPRINT?   OPM1  DC0063\n         BNE   HPB000                  NO, GO CHECK FOR BACKSPACESOPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0010  DS    0H                                                 OPM1  DC0063\n         LH    R15,LINELNL             LOAD R15 W/CURRENT LNE LEN OPM1  DC0063\n         BCTR  R15,0                   DECREMENT BY 1 FOR CCTL.   OPM1  DC0063\n         CH    R15,=H'384'             IS LINE DATA > 384 BYTES?  OPM1  DC0063\n         BH    HPLRC00                 YES, RETURN W/ RC=00.      OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         CH    R15,=H'1'               IS LINE DATA < 1 BYTE?     OPM1  DC0063\n         BL    HPLRC00                 YES, RETURN W/ RC=00.      OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         $$VPSERV REQUEST=GETMAIN,                                OPM5 XVPS80\n               LV=HPLLEN,                                         OPM5 XVPS80\n               SYAT=YES,                                          OPM5 XVPS80\n               MF=S                                               OPM5  VPS80\n         LR    R10,R1                  LOAD HPL BASE REGISTER.    OPM1  DC0063\n         USING HPLDSECT,R10            ESTABLISH ADDRESSABILITY.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         LA    R0,HPLWORK              POINT R0 TO LINE SAVE AREA.OPM1  DC0063\n         LH    R1,LINELNL              LOAD R1 W/LENGTH OF LINE.  OPM1  DC0063\n         BCTR  R1,0                    DECREMENT BY 1 FOR CCTL.   OPM1  DC0063\n         LA    R14,LINELND             POINT R14 TO LINE DATA.    OPM1  DC0063\n         LR    R15,R1                  LOAD R15 W/LEN OF LINE DATAOPM1  DC0063\n         MVCL  R0,R14                  MOVE LINE DATA TO SAVE AREAOPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         LH    R1,LINELNL              LOAD R1 W/LENGTH OF LINE.  OPM1  DC0063\n         STH   R1,HPLLNL               SAVE ORIGINAL LENGTH.      OPM1  DC0063\n         BCTR  R1,0                    DECREMENT BY 1 FOR CCTL.   OPM1  DC0063\n         LA    R2,HPLWORK              POINT R2 TO ORIGINAL DATA. OPM1  DC0063\n         LA    R3,HPLNEW               POINT R3 TO REVISED DATA.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         MVI   HPLFLAG,X'00'           INITIALIZE CMD FLAG.       OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0012  DS    0H                                                 OPM1  DC0063\n         CLI   0(R2),X'40'             IS ORIGINAL BYTE A SPACE?  OPM1  DC0063\n         BNE   HPL0020                 NO, GO INSERT \"BOLD ON\" CMDOPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0014  DS    0H                                                 OPM1  DC0063\n         MVI   0(R3),X'40'             MOVE BLANK TO REVISED DATA.OPM1  DC0063\n         ICM   R9,B'1111',PRATXLAT     POINT R3 TO TRANSLATE TABLEOPM1  DC0063\n         BZ    HPL0016                 NO TRANSLATE TABLE.        OPM1  DC0063\n         TR    0(1,R3),0(R9)           TRANSLATE BYTE.            OPM1  DC0063\nHPL0016  DS    0H                                                 OPM1  DC0063\n         LA    R2,1(,R2)               BUMP TO NEXT INPUT BYTE.   OPM1  DC0063\n         LA    R3,1(,R3)               BUMP TO NEXT OUTPUT BYTE.  OPM1  DC0063\n         BCT   R1,HPL0012              GO CHECK NEXT BYTE.        OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         B     HPL0090                 GO FREEMAIN STORAGE, ETC.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0020  DS    0H                                                 OPM1  DC0063\n         MVC   0(L'BOLDON,R3),BOLDON   MOVE \"BOLD ON\" TO REVISED  OPM1  DC0063\n*                                        DATA.                    OPM1  DC0063\n         LH    R15,HPLLNL              GET CURRENT LINE LENGTH.   OPM1  DC0063\n         LA    R15,5(,R15)             ADD 5 TO LENGTH.           OPM1  DC0063\n         STH   R15,HPLLNL              SAVE MODIFIED LENGTH.      OPM1  DC0063\n         LA    R3,5(,R3)               BUMP OUTPUT PTER PAST CMD. OPM1  DC0063\n         MVI   HPLFLAG,X'01'           SET PCL CMD FLAG ON.       OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0022  DS    0H                                                 OPM1  DC0063\n         MVC   0(1,R3),0(R2)           MOVE NON-BLANK TO REVISED  OPM1  DC0063\n*                                        DATA.                    OPM1  DC0063\n         ICM   R9,B'1111',PRATXLAT     POINT R3 TO TRANSLATE TABLEOPM1  DC0063\n         BZ    HPL0024                 NO TRANSLATE TABLE.        OPM1  DC0063\n         TR    0(1,R3),0(R9)           TRANSLATE THIS BYTE.       OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0024  DS    0H                                                 OPM1  DC0063\n         LA    R2,1(,R2)               BUMP TO NEXT INPUT BYTE.   OPM1  DC0063\n         LA    R3,1(,R3)               BUMP TO NEXT OUTPUT BYTE.  OPM1  DC0063\n         BCT   R1,HPL0030              GO CHECK NEXT BYTE.        OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         B     HPL0090                 GO FREEMAIN STORAGE, ETC.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0030  DS    0H                                                 OPM1  DC0063\n         CLI   0(R2),X'40'             IS ORIGINAL BYTE A SPACE?  OPM1  DC0063\n         BNE   HPL0022                 NO, MOVE IT TO REVISED AREAOPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         MVC   0(L'BOLDOFF,R3),BOLDOFF MOVE \"BOLD OFF\" TO REVISED OPM1  DC0063\n*                                         DATA                    OPM1  DC0063\n         LH    R15,HPLLNL              GET CURRENT LINE LENGTH.   OPM1  DC0063\n         LA    R15,5(,R15)             ADD 5 TO LENGTH.           OPM1  DC0063\n         STH   R15,HPLLNL              SAVE MODIFIED LENGTH.      OPM1  DC0063\n         LA    R3,5(,R3)               BUMP OUTPUT PTER PAST CMD. OPM1  DC0063\n         MVI   HPLFLAG,X'00'           SET PCL CMD FLAG OFF.      OPM1  DC0063\n         B     HPL0014                 GO MOVE BLANK BYTE.        OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0090  DS    0H                                                 OPM1  DC0063\n         CLI   HPLFLAG,X'01'           \"BOLD ON\" W/OUT \"BOLD OFF\"?OPM1  DC0063\n         BNE   HPL0092                 NO, CONTINUE AS IS.        OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         MVC   0(L'BOLDOFF,R3),BOLDOFF MOVE \"BOLD OFF\" TO REVISED OPM1  DC0063\n*                                         DATA                    OPM1  DC0063\n         LH    R15,HPLLNL              GET CURRENT LINE LENGTH.   OPM1  DC0063\n         LA    R15,5(,R15)             ADD 5 TO LENGTH.           OPM1  DC0063\n         STH   R15,HPLLNL              SAVE MODIFIED LENGTH.      OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0092  DS    0H                                                 OPM1  DC0063\n         CLC   HPLLNL,LINELNLM         IS REVISED LINE TOO LARGE? OPM1  DC0063\n         BH    HPL0094                 YES, EXIT WITHOUT CHANGE.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         LA    R0,LINELND              POINT R0 TO LINE DATA AREA.OPM1  DC0063\n         LH    R1,HPLLNL               PUT NEW LINE LEN INTO R1   OPM1  DC0063\n         BCTR  R1,0                    DECREMENT FOR CARRIAGE CNTLOPM1  DC0063\n         LA    R14,HPLNEW              PT R14 TO REVISED LINE DATAOPM1  DC0063\n         LR    R15,R1                  PUT NEW LINE LEN INTO R15. OPM1  DC0063\n         MVCL  R0,R14                  MOVE LINE DATA TO SAVE AREAOPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         MVC   LINELNL,HPLLNL          RESTORE REVISED LINE LEN   OPM1  DC0063\n         OI    LINELNF2,$LINEBXL+$LINEBTB  BYPASS XLATE AND TRUNC OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL0094  DS    0H                                                 OPM1  DC0063\n         $$VPSERV REQUEST=FREEMAIN,                               OPM5 XVPS80\n               A=(R10),                                           OPM5 XVPS80\n               LV=HPLLEN,                                         OPM5 XVPS80\n               SYAT=YES,                                          OPM5 XVPS80\n               MF=S                                               OPM5  VPS80\n         XR    R10,R10                 RESET WORKAREA BASE REG    OPM1  DC0063\n         B     HPLRC00                 RETURN W/ RC=00.           OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         DROP  R10                     KILL HP ADDRESSABILITY.    OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPB000   DS    0H                                                 OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        FIND ANY BACKSPACE CHARACTERS (X'16') IN THE PRINT LINE. OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\n         XR    R15,R15                 CLEAR R15.                 OPM1  DC0063\n         ICM   R15,B'0011',LINELNL     LOAD R15 W/LENGTH OF LINE. OPM1  DC0063\n         C     R15,=F'1024'            IS LINE > 1024 BYTES LONG? OPM1  DC0063\n         BH    HPBRC00                 YES, GO RETURN W/ RC=00.   OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         LA    R9,LINELIN              LOAD R9 W/ADDRESS OF LINE. OPM1  DC0063\n         TM    LINELNF,$LINEHCC        LINE HAVE CARRIAGE CONTROL?OPM1  DC0063\n         BZ    HPB010                  NO, CONTINUE.              OPM1  DC0063\n         LA    R9,1(,R9)               BUMP R9 PAST CARRIAGE CONTROPM1  DC0063\n         BCTR  R15,0                   DECREMENT LEN OF DATA BY 1.OPM1  DC0063\nHPB010   DS    0H                                                 OPM1  DC0063\n         C     R15,=F'256'             OVER 256 BYTES TO CHECK?   OPM1  DC0063\n         BNH   HPB020                  NO, CHECK REMAINING BYTES. OPM1  DC0063\n         TRT   0(256,R9),BKSPTAB       CHECK FOR X'16'.           OPM1  DC0063\n         BNZ   HPB030                  FOUND AT LEAST ONE.        OPM1  DC0063\n         LA    R9,256(,R9)             BUMP DATA POINTER BY 256.  OPM1  DC0063\n         S     R9,=F'256'              DECREMENT LENGTH BY 256.   OPM1  DC0063\n         B     HPB010                  GO CHECK WHAT'S LEFT.      OPM1  DC0063\nHPB020   DS    0H                                                 OPM1  DC0063\n         C     R15,=F'4'               POSSIBLE TO HAVE BACKSPACE?OPM1  DC0063\n         BL    HPBRC00                 NO, GO RETURN W/ RC=00.    OPM1  DC0063\n         BCTR  R9,0                    DECREMENT BY 1 FOR CHECK.  OPM1  DC0063\n         EX    R9,HPBTRT               CHECK FOR X'16'.           OPM1  DC0063\n         BZ    HPBRC00                 NONE FOUND, RET W/ RC=00.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        GETMAIN A WORK AREA                                      OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\nHPB030   DS    0H                                                 OPM1  DC0063\n         $$VPSERV REQUEST=GETMAIN,                                OPM5 XVPS80\n               LV=HPLLEN,                                         OPM5 XVPS80\n               SYAT=YES,                                          OPM5 XVPS80\n               MF=S                                               OPM5  VPS80\n         SPACE 1                                                  OPM1  DC0063\n         LR    R10,R1                  LOAD HPL BASE REGISTER.    OPM1  DC0063\n         USING HPLDSECT,R10            ESTABLISH HPL ADDR         OPM1  DC0063\n         MVI   HPBCHG,X'00'            CLEAR CHANGE FLAG.         OPM1  DC0063\n         LA    R9,LINELIN              LOAD R9 W/ADDRESS OF LINE. OPM1  DC0063\n         XR    R15,R15                 CLEAR R15.                 OPM1  DC0063\n         ICM   R15,B'0011',LINELNL     LOAD R15 W/LENGTH OF LINE. OPM1  DC0063\n         LR    R1,R9                   LOAD R1 W/ADDRESS OF LINE. OPM1  DC0063\n         AR    R1,R15                  BUMP BY LENGTH.            OPM1  DC0063\n         ST    R1,HPBLINEE             SAVE END OF LINE ADDRESS.  OPM1  DC0063\n         LA    R2,HPLNEW               LOAD R2 W/ADDR OF WORK AREAOPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         TM    LINELNF,$LINEHCC        LINE HAVE CARRIAGE CONTROL?OPM1  DC0063\n         BZ    HPB040                  NO, CONTINUE.              OPM1  DC0063\n         MVC   0(1,R2),0(R9)           MOVE CARR CTL TO WORK AREA.OPM1  DC0063\n         LA    R2,1(,R2)               BUMP R2 PAST CARR CONTROL. OPM1  DC0063\n         LA    R9,1(,R9)               BUMP R9 PAST CARR CONTROL. OPM1  DC0063\n         BCTR  R15,0                   DECREMENT LEN OF DATA BY 1.OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPB040   DS    0H                                                 OPM1  DC0063\n         ST    R9,HPBLINES             SAVE STARTING ADDR OF DATA.OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        SCAN FOR FIRST BACKSPACE                                 OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPB050   DS    0H                                                 OPM1  DC0063\n         C     R15,=F'0'               ANY MORE BYTES TO CHECK?   OPM1  DC0063\n         BNH   HPBRC00                 NO, GO EXIT W/ RC=00.      OPM1  DC0063\n         CLI   0(R9),X'16'             IS THIS A BACKSPACE?       OPM1  DC0063\n         BE    HPB060                  YES, GO SAVE STARTING PT.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         MVC   0(1,R2),0(R9)           MOVE BYTE TO WORK AREA.    OPM1  DC0063\n         ICM   R3,B'1111',PRATXLAT     PT R3 TO TRANSLATE TABLE.  OPM1  DC0063\n         BZ    HPB052                  NO TRANSLATE TABLE.        OPM1  DC0063\n         TR    0(1,R2),0(R3)           TRANSLATE BYTE.            OPM1  DC0063\nHPB052   DS    0H                                                 OPM1  DC0063\n         LA    R2,1(,R2)               BUMP R2 TO NEXT BYTE.      OPM1  DC0063\n         LA    R9,1(,R9)               BUMP R9 TO NEXT BYTE.      OPM1  DC0063\n         BCTR  R15,0                   DECREMENT LENGTH BY 1.     OPM1  DC0063\n         B     HPB050                  GO CHECK NEXT BYTE.        OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPB060   DS    0H                                                 OPM1  DC0063\n         ST    R9,HPBKSP1              SAVE ADDR OF 1ST BACKSPACE.OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        FIND CONSECUTIVE BACKSPACE CHARACTERS                    OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPB070   DS    0H                                                 OPM1  DC0063\n         LA    R9,1(,R9)               BUMP R9 TO NEXT BYTE.      OPM1  DC0063\n         BCTR  R15,0                   DECREMENT LENGTH BY 1.     OPM1  DC0063\n         C     R15,=F'0'               ANY MORE BYTES TO CHECK?   OPM1  DC0063\n         BNH   HPBRC00                 NO, GO EXIT W/ RC=00.      OPM1  DC0063\n         CLI   0(R9),X'16'             IS THIS A BACKSPACE?       OPM1  DC0063\n         BE    HPB070                  YES, GO CHECK NEXT BYTE.   OPM1  DC0063\n         L     R14,HPBKSP1             LOAD R14 W/ADDR  1ST X'16' OPM1  DC0063\n         LR    R1,R9                   LOAD R1 W/ADDR CURR BYTE.  OPM1  DC0063\n         SR    R1,R14                  FIND NUMBER OF BACKSPACES. OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         SR    R14,R1                  FIND START OF STRING.      OPM1  DC0063\n         C     R14,HPBLINES            WE PRIOR TO START OF DATA? OPM1  DC0063\n         BL    HPB090                  YES, GO CLEAR CHANGE SW    OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         BCTR  R1,0                    DECREMENT LEN FOR COMPARE. OPM1  DC0063\n         EX    R1,HPBCLC               IS WORD REPEATED?          OPM1  DC0063\n         BNE   HPB090                  NO, GO CLEAR CHANGE SW     OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         LA    R1,1(,R1)               RESTORE DECREMENTED BYTE.  OPM1  DC0063\n         LR    R14,R9                  LOAD R14 W/CURRENT ADDRESS.OPM1  DC0063\n         AR    R14,R1                  BUMP BY LENGTH OF DATA.    OPM1  DC0063\n         C     R14,HPBLINEE            PAST THE END OF THE LINE?  OPM1  DC0063\n         BH    HPB090                  YES, GO CLEAR CHANGE SW    OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        MOVE IN \"BOLD\" COMMAND                                   OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\n         SR    R2,R1                   MAKE ROOM FOR BOLD COMMAND.OPM1  DC0063\n         MVC   0(5,R2),BOLDON          MOVE IN BOLD COMMAND.      OPM1  DC0063\n         LA    R2,5(,R2)               BUMP R2 PAST BOLD COMMAND. OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        MOVE IN WORD(S) THAT ARE TO BE BOLD                      OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPB080   DS    0H                                                 OPM1  DC0063\n         MVC   0(1,R2),0(R9)           MOVE ONE BYTE OF BOLD WORD.OPM1  DC0063\n         ICM   R3,B'1111',PRATXLAT     POINT R3 TO TRANS TABLE.   OPM1  DC0063\n         BZ    HPB082                  NO TRANSLATE TABLE.        OPM1  DC0063\n         TR    0(1,R2),0(R3)           TRANSLATE BYTE TO ASCII.   OPM1  DC0063\nHPB082   DS    0H                                                 OPM1  DC0063\n         LA    R2,1(,R2)               BUMP OUTPUT PTER BY 1 BYTE.OPM1  DC0063\n         LA    R9,1(,R9)               BUMP INPUT PTER BY 1 BYTE. OPM1  DC0063\n         BCT   R1,HPB080               CONT UNTIL ALL ARE MOVED.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        MOVE IN \"NORMAL\" COMMAND                                 OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\n         MVC   0(5,R2),BOLDOFF         MOVE IN MEDIUM STROKE CMD  OPM1  DC0063\n         LA    R2,5(,R2)               BUMP R2 PAST MEDIUM CMD    OPM1  DC0063\n         MVI   HPBCHG,X'01'            INDICATE CHANGE WAS MADE.  OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        FIND NUMBER OF BYTES REMAINING IN LINE AND CHECK THEM    OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\n         XR    R15,R15                 CLEAR R15.                 OPM1  DC0063\n         ICM   R15,B'0011',LINELNL     MOVE IN ORIGINAL LINE LEN  OPM1  DC0063\n         LR    R1,R9                   PUT CURRENT POS INTO R1.   OPM1  DC0063\n         LA    R0,LINELIN              POINT R0 TO START OF LINE. OPM1  DC0063\n         SR    R1,R0                   PUT LEN PROCESSED INTO R1. OPM1  DC0063\n         SR    R15,R1                  CALCULATE AMT REMAINING.   OPM1  DC0063\n         B     HPB050                  GO CHK FOR MORE BACKSPACES.OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPB090   DS    0H                                                 OPM1  DC0063\n         MVI   HPBCHG,X'00'            CLEAR CHANGE FLAG.         OPM1  DC0063\n         B     HPBRC00                 GO EXIT W/ RC=00.          OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        RC=00 (PRINT LINE)                                       OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPBRC00  DS    0H                                                 OPM1  DC0063\n         CLI   HPBCHG,X'01'            ANY CHANGES TO LINE?       OPM1  DC0063\n         BNE   HPBRC001                NO, GO EXIT W/ RC=00.      OPM1  DC0063\n         LA    R3,HPLNEW               LOAD R3 W/ADDR OF WORK AREAOPM1  DC0063\n         SR    R2,R3                   FIND LEN OF MODIFIED REC   OPM1  DC0063\n         CH    R2,LINELNLM             IS NEW RECORD TOO LARGE?   OPM1  DC0063\n         BH    HPBRC001                YES, LEAVE RECORD AS IS.   OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         LA    R0,LINELIN              POINT R0 TO OUTPUT AREA.   OPM1  DC0063\n         LA    R14,HPLNEW              POINT R14 TO WORK AREA.    OPM1  DC0063\n         LR    R1,R2                   LOAD R1 WITH LENGTH.       OPM1  DC0063\n         LR    R15,R1                  LOAD R15 WITH LENGTH.      OPM1  DC0063\n         MVCL  R0,R14                  MOVE WK AREA TO OUTPUT AREAOPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         STCM  R2,B'0011',LINELNL      RESET LENGTH OF LINE.      OPM1  DC0063\n         OI    LINELNF2,$LINEBXL       BYPASS TRANSLATION.        OPM1  DC0063\nHPBRC001 DS    0H                                                 OPM1  DC0063\n         LA    R15,RC00                SET RETURN CODE = 00.      OPM1  DC0063\n         B     HPB999                  RETURN W/ RC=00.           OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        RC=04 (PRINT LINE)                                       OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPBRC04  DS    0H                                                 OPM1  DC0063\n         LA    R15,RC04                SET RETURN CODE = 04.      OPM1  DC0063\n         B     HPB999                  RETURN W/ RC=04.           OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        RC=08 (INVOKE NEXT SECTION)                              OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPBRC08  DS    0H                                                 OPM1  DC0063\n         LA    R15,RC08                SET RETURN CODE = 08.      OPM1  DC0063\n         B     HPB999                  RETURN W/ RC=08.           OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        RETURN TO CALLER                                         OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPB999   DS    0H                                                 OPM1  DC0063\n         LR    R2,R15                  SAVE RETURN CODE.          OPM1  DC0063\n         LTR   R10,R10                 HPL WORKAREA ALLOCATED?    OPM1  DC0063\n         BZ    HPB999A                 NO, BYPASS FREEMAIN.       OPM1  DC0063\n         $$VPSERV REQUEST=FREEMAIN,                               OPM5 XVPS80\n               A=(R10),                                           OPM5 XVPS80\n               LV=HPLLEN,                                         OPM5 XVPS80\n               SYAT=YES,                                          OPM5 XVPS80\n               MF=S                                               OPM5  VPS80\n         XR    R10,R10                 RESET WORKAREA BASE REG    OPM1  DC0063\nHPB999A  DS    0H                                                 OPM1  DC0063\n         LR    R15,R2                  RESTORE RETURN CODE.       OPM1  DC0063\n         LR    R14,R11                 RESTORE RETURN ADDRESS.    OPM1  DC0063\n         BR    R14                     RETURN TO CALLER.          OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPBTRT   TRT   0(0,R9),BKSPTAB         *** EXECUTED ***           OPM1  DC0063\nHPBCLC   CLC   0(0,R14),0(R9)          *** EXECUTED ***           OPM1  DC0063\nBKSPTAB  DC    22X'00',X'FF',233X'00'  TRANS TABLE TO FIND X'16'. OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        RC=00 (RETURN TO VPS AND PROCESS THE LINE)               OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPLRC00  DS    0H                                                 OPM1  DC0063\n         LA    R15,RC00                SET RETURN CODE = 00.      OPM1  DC0063\n         B     HPL999                  RETURN W/ RC=00.           OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        RC=04 (RETURN TO VPS AND DISCARD THE LINE)               OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPLRC04  DS    0H                                                 OPM1  DC0063\n         LA    R15,RC04                SET RETURN CODE = 04.      OPM1  DC0063\n         B     HPL999                  RETURN W/ RC=04.           OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        RC=08 (INVOKE NEXT SECTION)                              OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPLRC08  DS    0H                                                 OPM1  DC0063\n         LA    R15,RC08                SET RETURN CODE = 08.      OPM1  DC0063\n         B     HPL999                  RETURN W/ RC=08.           OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        RETURN TO CALLER                                         OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1  DC0063\nHPL999   DS    0H                                                 OPM1  DC0063\n         LR    R14,R11                 RESTORE RETURN ADDRESS.    OPM1  DC0063\n         BR    R14                     RETURN TO CALLER.          OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n*---------------------------------------------------------------------*\n*        REGISTER EQUATES                                             *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'LITERALS && CONSTANTS'\n*---------------------------------------------------------------------*\n*        LITERALS & CONSTANTS                                         *\n*---------------------------------------------------------------------*\n         LTORG\n         SPACE\nRC00     EQU   0\nRC04     EQU   4\nRC08     EQU   8\nSPACE    EQU   X'40'\nXRXMAXLN EQU   80                      MAXIMUM LINE SIZE.\n         SPACE\nXRXSCS   DC    XL2'3650'               XEROX SCS TRANSPARENCY CODES.\nBOLDON   DC    X'1B28733342'           PCL \"BOLD STROKEWEIGHT\"    OPM1  DC0063\n*                                         COMMAND                 OPM1  DC0063\nBOLDOFF  DC    X'1B28733042'           PCL \"NORMAL STROKEWEIGHT\"  OPM1  DC0063\n*                                         COMMAND                 OPM1  DC0063\n         SPACE\n         TITLE 'XEROX LASER WORKAREA DSECT'\n*---------------------------------------------------------------------*\n*        XEROX LASER WORKAREA DSECT                                   *\n*---------------------------------------------------------------------*\n         SPACE\nXRXDSECT DSECT\nXRXWORK  DC    CL80' '                 PRINT LINE WORKAREA.\n         DS    XL16'00'                RESERVE FOR EXPANSION.           VPS80\n         DS    0D                      ALIGN ON A DOUBLEWORD BOUNDARY.\nXRXLEN   EQU   *-XRXDSECT              LENGTH OF DSECT.\n         TITLE 'HPL WORKAREA DSECT'                               OPM1  DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n*        HPL WORKAREA DSECT                                       OPM1* DC0063\n*-----------------------------------------------------------------OPM1* DC0063\n         SPACE 1                                                  OPM1\nHPLDSECT DSECT                                                    OPM1  DC0063\nHPLLNL   DS    H                       LINE LENGTH.               OPM1  DC0063\nHPLFLAG  DS    XL1                     PCL BOLD ON/OFF FLAG.      OPM1  DC0063\nHPLWORK  DS    CL384                   PRINT LINE WORKAREA.       OPM1  DC0063\nHPBLINES DC    F'0'                    ADDR OF BEGINNING OF DATA. OPM1  DC0063\nHPBLINEE DC    F'0'                    ADDR OF END       OF DATA. OPM1  DC0063\nHPBKSP1  DC    F'0'                    ADDRESS OF FIRST BACKSPACE OPM1  DC0063\nHPBCHG   DC    X'00'                   CHANGE FLAG.               OPM1  DC0063\nHPLNEW   DS    CL4096                  REVISED PRT LINE WORKAREA. OPM1  DC0063\n         SPACE 1                                                  OPM1  DC0063\n         DS    0D                      ALIGN ON A DBLEWD BOUNDARY.OPM1  DC0063\nHPLLEN   EQU   *-HPLDSECT              LENGTH OF DSECT.           OPM1  DC0063\n         SPACE\n         VPSSSYAT\n         VPSSPRAT\n         VPSSDSAT\n         VPSSLINE\n         END   OPMIUE01                                           OPM3\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OPMSUE08": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00C\\x01\\x04\\x11_\\x01\\x04\\x11o\\x18V\\x03\\x88\\x03~\\x00\\x00\\xd9\\xe6\\xe3\\xc3\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-04-24T00:00:00", "modifydate": "2004-04-25T18:56:43", "lines": 904, "newlines": 894, "modlines": 0, "user": "RWTCJDM"}, "text": "OPMSUE08 TITLE 'VPS USER EXIT-08:   ERROR RETRY'                 JDM00\n*---------------------------------------------------------------------*\n*                                                                     *\n*                            JIM MARSHALL, SOFTWARE \"JANITOR\"    JDM00*\n*                            US OFFICE OF PERSONNEL MANAGEMENT   JDM00*\n*                            CENTER FOR INFORMATION SERVICES/    JDM00*\n*                                DATA CENTER GROUP               JDM00*\n*                            1900 E STREET NW - ROOM BH04        JDM00*\n*                            WASHINGTON DC  20415                JDM00*\n*                            (W) 202-606-1261 (0700-1530ET)      JDM00*\n*                            JIM.MARSHALL@OPM.GOV                JDM00*\n*                                                                     *\n*                                                                     *\n*        VTAM PRINTER SUPPORT SYSTEM - VERSION 1, RELEASE 8.0         *\n*                                                                     *\n*        (C) COPYRIGHT - 1999, 2000                                   *\n*                        LEVI, RAY & SHOUP, INC.                      *\n*                        2401 WEST MONROE STREET                      *\n*                        SPRINGFIELD, IL 62704                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*   MODULE NAME:    OPMSUE08 (MODIFIED VPSSUE08)                 JDM00*\n*                                                                     *\n*                                                                     *\n*   EXIT NAME:      ERROR RETRY                                       *\n*                                                                     *\n*                                                                     *\n*   EXIT TYPE:      PRINTER                                           *\n*                                                                     *\n*                                                                     *\n*   EXIT TCB:       SYSTEM                                            *\n*                                                                     *\n*                                                                     *\n*   RECOVERY:       EXITNN= KEYWORD DETERMINES RECOVERY ON/OFF        *\n*                                                                     *\n*                   RECOVERY ON:  EXIT WILL BE DISABLED               *\n*                                                                     *\n*                   RECOVERY OFF: VPS ADDRESS SPACE WILL TERMINATE    *\n*                                                                     *\n*                                                                     *\n*   ATTRIBUTES:     REENTRANT, REUSEABLE, REFRESHABLE                 *\n*                                                                     *\n*                   PROBLEM STATE, KEY 8                              *\n*                                                                     *\n*                   AUTHORIZED                                        *\n*                                                                     *\n*                   AMODE=31 RMODE=31                                 *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:       THIS EXIT IS CALLED FOR PRINTERS IN AN 'EDRAINED' *\n*                   STATUS PRIOR TO SEARCHING FOR NEW WORK.  VPS DOES *\n*                   NOT REQUEST WORK FOR AN 'EDRAINED' PRINTER, BUT   *\n*                   THIS EXIT CAN REQUEST THAT VPS CLEAR THE          *\n*                   'EDRAINED' STATUS AND BEGIN SELECTING WORK FOR    *\n*                   THE PRINTER.                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*=====================================================================*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*   WHEN A PRINTER IS 'EDRAINED', VPS RECORDS A UNIQUE MAJOR/MINOR    *\n*   CODE, REPRESENTING THAT PARTICULAR EDRAIN REASON, IN THE          *\n*   PRINTER'S CONTROL BLOCK.  THE MAJOR/MINOR CODE IS PASSED TO THIS  *\n*   EXIT IN FIELD 'PRECODE'.  MEMBER 'VPSSPRER' IN THE VPS MACRO      *\n*   LIBRARY LISTS THE MAJOR/MINOR CODES FOR ALL OF THE POSSIBLE       *\n*   EDRAIN REASONS.                                                   *\n*                                                                     *\n*   THIS EXIT CAN BE MODIFIED TO RETRY ANY OR ALL POSSIBLE EDRAIN     *\n*   REASONS.  EACH TYPE OF EDRAIN ERROR TO BE RETRIED REQUIRES ONE    *\n*   'ENTRY' IN A TABLE IN THIS PROGRAM LABELED 'ERRTABLE'.            *\n*                                                                     *\n*   AN ENTRY IN 'ERRTABLE' CONSISTS OF THESE VALUES:                  *\n*       - THE MAJOR/MINOR CODE REPRESENTING THE PARTICULAR ERROR      *\n*       - EIGHT BYTES RESERVED FOR FUTURE USE                         *\n*       - THE NAME OF THE ROUTINE IN THIS PROGRAM WHICH IS TO HANDLE  *\n*         THE ERROR (NORMALLY, 'STD', UNLESS YOU WANT TO PERFORM      *\n*         FURTHER CHECKING OR SOME SPECIAL PROCESSING)                *\n*       - THE INTERVAL AT WHICH TO RETRY                              *\n*       - THE NUMBER OF TIMES TO RETRY                                *\n*       - FLAGS INDICATING IF A MESSAGE SHOULD BE ISSUED WHEN THE     *\n*         THE RETRY COUNT IS EXCEEDED, AND IF THE PRINTER SHOULD      *\n*         BE INACTIVATED WHEN THE RETRY COUNT IS EXCEEDED             *\n*       - ONE BYTE RESERVED FOR ALIGNMENT                             *\n*                                                                     *\n*   AN EXAMPLE OF A SINGLE ENTRY IS SHOWN HERE:                       *\n*                                                                     *\n* *----------------------------------------------------------------*  *\n* * ENTRY FOR LOST TERMINAL                                        *  *\n* *----------------------------------------------------------------*  *\n*        DC    X'0010000F'     ERROR CODE:  MAJOR/MINOR.              *\n*        DC    X'00000000'     RESERVED.                              *\n*        DC    X'00000000'     RESERVED.                              *\n*        DC    A(STD)          ROUTINE TO HANDLE ERROR.               *\n*        DC    A(60*3)         INTERVAL BETWEEN RETRIES (180 SEC).    *\n*        DC    H'3'            RETRY COUNT (3).                       *\n*        DC    AL1($1WTO)      ISSUE WTO WHEN RETRIES EXHAUSTED.      *\n*        DC    1X'00'          RESERVED.                              *\n*                                                                     *\n*   A RETRY INTERVAL SHOULD NOT BE SPECIFIED THAT IS SHORTER THAN     *\n*   THE VALUE OF THE \"INTERVAL\" KEYWORD IN YOUR VPS INITIALIZATION    *\n*   MEMBER.  THIS EXIT IS INVOKED EACH TIME THAT INTERVAL EXPIRES.    *\n*                                                                     *\n*   IF YOU SPECIFY A RETRY COUNT OF ZERO, THE ERROR WILL BE RETRIED   *\n*   \"FOREVER\".                                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   FUNCTION: (CONTINUED)                                             *\n*                                                                     *\n*   THE SAMPLE EXIT, SUPPLIED BY LRS, CAN BE USED AS SUPPLIED TO      *\n*   RECOVER FROM THE FOLLOWING ERRORS:                                *\n*                                                                     *\n*   - QPUT X37 DCB ABEND                                              *\n*     THE PRIMARY AND DOUBLE THE SECONDARY ALLOCATION IS QUADRUPLED.  *\n*                                                                     *\n*   - SIMLOGON RC=10 F2=00 SNS=0000                                   *\n*     LU IS NOT ACTIVE, BUT MAJOR NODE IS ACTIVE                      *\n*                                                                     *\n*   - SIMLOGON RC=14 F2=53 SNS=0000                                   *\n*     LU IS NOT ACTIVE AND MAJOR NODE IS NOT ACTIVE                   *\n*                                                                     *\n*   - OPNDST RC=10 F2=01 SNS=080A                                     *\n*     DEVICE POWERED OFF                                              *\n*                                                                     *\n*   - SESSION CLEANUP REQUESTED                                       *\n*     VTAM HAS REQUESTED, VIA NSEXIT, THAT VPS CLEAN UP ITS END OF    *\n*     A SESSION.                                                      *\n*                                                                     *\n*   - LOST TERMINAL                                                   *\n*     VTAM HAS TOLD VPS THAT CONTACT WITH THE PRINTER LU HAS BEEN     *\n*     LOST, AND THE PRINTER LU CANNOT BE RECOVERED.                   *\n*                                                                     *\n*   - APPCCMD ERROR                                                   *\n*     VTAM HAS TOLD VPS THAT CONTACT WITH THE LU6.2 DEVICE INDICATED  *\n*     AN ERROR CONDITION.                                             *\n*                                                                     *\n*   - TCPIP REQUEST FAILURE - CONNECTION FAILURE                      * VPSTCP\n*     REMOTE HOST IS BUSY OR NOT AVAILABLE.                           * VPSTCP\n*     REMOTE HOST CONNECTION ABORTED BY SOFTWARE.                     * VPS61088\n*                                                                     *\n*   - TCPIP CONNECTION REFUSED                                        * VPSTCP\n*     TCPIP IS NOT CONNECTED FOR THE SYSTEM                           * VPSTCP\n*     ICS DISCONNECT RECEIVED DURING CONNECT PROCESS                  * VPS62\n*                                                                     *\n*   - TCPIP CONNECTION TIMED OUT - TCPMRD INTERVAL EXPIRED            * VPS61088\n*     NO RESPONSE RECEIVED DURING TIME INTERVAL DEFINED FOR PRINTER   * VPS61088\n*                                                                     *\n*---------------------------------------------------------------------*\n          EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   FUNCTION: (CONTINUED)                                             *\n*                                                                     *\n*   THE PRINTER USER AREA IS NOT USED.                                *\n*                                                                     *\n*   THIS EXIT CHECKS THAT THE REQUEST CODE PASSED TO THE EXIT IS 0.   *\n*   NO OTHER REQUEST CODES ARE CURRENTLY IN USE.                      *\n*                                                                     *\n*   NOTES:                                                            *\n*                                                                     *\n*   - THIS EXIT RUNS UNDER THE VPS DISPATCHER SYSTEM TCB.  THEREFORE, *\n*     THIS EXIT MUST NOT INVOKE ANY SERVICE THAT WILL PLACE THIS TASK *\n*     IN A WAIT STATE.                                                *\n*                                                                     *\n*   - ANY RESOURCE(S) ACQUIRED BY THIS EXIT MUST ALSO BE RELEASED     *\n*     PRIOR TO RETURNING TO VPS.                                      *\n*                                                                     *\n*   - THE ERROR RETRY COUNT, PASSED IN THE PRINTER ERROR DSECT        *\n*     (VPSSPRER), IS THE NUMBER OF TIMES THIS EXIT RETRIED AN ERROR   *\n*     FOR THE CURRENT JOB.                                            *\n*                                                                     *\n*   - IF MORE THAN 1 ERROR OCCURS BETWEEN INVOCATIONS OF THIS EXIT,   *\n*     THE ERROR DATA PASSED DESCRIBES THE LAST ERROR.                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n          EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*      ON ENTRY:                                                      *\n*         R0 ==>  REQUEST CODE (ALWAYS 00).                           *\n*         R1 ==>  ADDRESS OF PARAMETER LIST.                          *\n*        R13 ==>  ADDRESS OF CALLERS SAVEAREA.                        *\n*        R14 ==>  RETURN ADDRESS.                                     *\n*        R15 ==>  ENTRY ADDRESS.                                      *\n*                                                                     *\n*      DURING EXECUTION:                                              *\n*      R0-R1 ==>  VOLATILE.                                           *\n*         R2 ==>  NOT USED.                                           *\n*         R3 ==>  MODULE REQUEST CODE.                                *\n*         R4 ==>  MODULE PARAMETER LIST ADDRESS.                      *\n*         R5 ==>  SYSTEM  ATTRIBUTE BASE REGISTER.                    *\n*         R6 ==>  TWO WORD WORKAREA.                                  *\n*         R7 ==>  PRINTER ATTRIBUTE BASE REGISTER.                    *\n*         R8 ==>  PRINTER ERROR ATTRIBUTE BASE REGISTER.              *\n*         R9 ==>  NOT USED.                                           *\n*        R10 ==>  VOLATILE.                                           *\n*        R11 ==>  NOT USED.                                           *\n*        R12 ==>  PROGRAM BASE REGISTER.                              *\n*        R13 ==>  MODULE WORKAREA BASE REGISTER.                      *\n*    R14-R15 ==>  VOLATILE.                                           *\n*                                                                     *\n*      ON EXIT:                                                       *\n*         ALL REGISTERS WILL BE RESTORED TO ENTRY CONDITIONS, EXCEPT  *\n*      R15, WHICH WILL CONTAIN THE RETURN CODE.                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PARAMETER LIST FORMAT:                                            *\n*                                                                     *\n*      A(SYSTEM ATTRIBUTES)  - MAPPING MACRO: VPSSSYAT                *\n*      A(USER WORKAREA)      - MAPPING MACRO: N/A                     *\n*      A(PRINTER ATTRIBUTES) - MAPPING MACRO: VPSSPRAT                *\n*      A(PRINTER ERROR INFO) - MAPPING MACRO: VPSSPRER                *\n*                                                                     *\n*      THE HIGH ORDER BIT OF THE LAST ADDRESS PARAMETER WILL BE SET   *\n*      TO 1.                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*      00 - REQUEST VPS TO RETRY THE ERROR.                           *\n*                                                                     *\n*      04 - REQUEST VPS TO IGNORE THE ERROR.  THE PRINTER REMAINS     *\n*           ERROR DRAINED, AND VPS WILL INVOKE THIS EXIT AGAIN.       *\n*                                                                     *\n*      08 - REQUEST VPS TO IGNORE THE ERROR.  THE PRINTER REMAINS     *\n*           ERROR DRAINED, AND VPS WILL NOT INVOKE THIS EXIT AGAIN.   *\n*                                                                     *\n*      12 - REQUEST VPS TO INACTIVATE THE PRINTER.                    *\n*                                                                     *\n*      16 - REQUEST VPS TO INACTIVATE THE PRINTER AND PURGE THE       *\n*           PRINTER'S OUTPUT FROM THE JES SPOOL.                      *\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*      JDM00 - 02/09/1996 - ESTABLISH FMS VERSION OF EXIT AS     JDM00*\n*              VPS$X05. CHANGE LOG IS ALSO UNDER THIS MOD.       JDM00*\n*      JDM01 - 02/09/96 - CHANGE \"X37\" RECOVERY SO WE RETRY      JDM00*\n*              THE ABEND BY INCREASING THE PRIMARY BY 2          JDM00*\n*              (NOT 4), AND THE SECONDARY BY 4 (NOT 2).          JDM00*\n*      JDM02 - 02/09/96 - CHANGE WTO ROUTCDE FROM 1 TO 3. WANT   JDM00*\n*              IT IN THE SYSLOG AND NO NEED TO HIGHLIGHT AND     JDM00*\n*              NON-ROLLABLE.                                     JDM00*\n*      JDM03 - 02/09/96 - FOR ALL NETWORK RELATED ERRORS,        JDM00*\n*              INDICATE WE RETRY FOREVER.                        JDM00*\n*      JDM04 - 05/22/97 - INCLUDE TCP/IP PRTERS FOR ERROR RETRY. JDM00*\n*      JDM05 - 06/03/97 - LIMIT RETRIES FOR A CERTAIN ERROR.     JDM00*\n*                         RC=10  FC=01 SNS=08450000              JDM00*\n*      JDM06 - 10/24/97 - ADD RETRIES FOR \"CONNECTION RESET      JDM00*\n*                         BY PEER\"                               JDM00*\n*      JDM07 - 03/23/99 - UPDATE VARIOUS RETRY TIMES.            JDM00*\n*              NOTE: 6.2, VMCF, PRINTER LIST, ENTER \"P\", AND     JDM00*\n*                    MAJOR/MINOR CODES WILL BE AT 3FA AND 3FC    JDM00*\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        V P S $ X 0 8     E N T R Y                             JDM00*\n*                                                                     *\n*---------------------------------------------------------------------*\nOPMSUE08 CSECT                                                   JDM00\nOPMSUE08 AMODE ANY                                               JDM00\nOPMSUE08 RMODE ANY                                               JDM00\n         B     28(,R15)\n         DC    CL8'OPMSUE08 ',CL8'&SYSDATE',CL8'&SYSTIME'        JDM00\n         BAKR  R14,R0                  SAVE REGISTERS.                  VPS80\n         LR    R12,R15                 LOAD PROGRAM BASE REGISTER.\n         USING OPMSUE08,R12            ESTABLISH PGM BASE REG    JDM00\n         LR    R3,R0                   SAVE REQUEST CODE.               VPS80\n         LR    R4,R1                   SAVE PARM LIST ADDRESS.          VPS80\n         LM    R5,R8,0(R4)             LOAD PARAMETER REGISTERS.        VPS80\n         USING SYADSECT,R5             ESTABLISH SYAT ADDRESSABILITY.\n         USING PRADSECT,R7             ESTABLISH PRAT ADDRESSABILITY.\n         USING PREDSECT,R8             ESTABLISH PRER ADDRESSABILITY.\n         SPACE\n         $$VPSERV REQUEST=GETMAIN,                                     XVPS80\n               LV=UE08DSLN,                                            XVPS80\n               SYAT=YES,                                               XVPS80\n               MF=S                                                     VPS80\n         SPACE\n         LR    R13,R1                  LOAD WORKAREA BASE REGISTER.\n         MVC   4(4,R13),=CL4'F1SA'     LINKAGE STACK INDICATOR.         VPS80\n         USING UE08DSCT,R13            ESTABLISH MAP FOR WORKAREA.\n         EJECT\n*---------------------------------------------------------------------*\n*        EXAMINE REQUEST CODE                                         *\n*---------------------------------------------------------------------*\n         ST    R3,UE08REQ              SAVE REQUEST CODE.               VPS80\n         ST    R4,UE08PLST             SAVE PARAMETER LIST ADDRESS.     VPS80\n         LTR   R0,R3                   EXPECTED REQUEST CODE?           VPS80\n         BNZ   UXITRC04                NO, EXIT WITH RETURN CODE = 04.\n         SPACE\n*---------------------------------------------------------------------*\n*        SCAN TABLE TO SEE IF ERROR SHOULD BE RETRIED                 *\n*---------------------------------------------------------------------*\n         LA    R10,ERRTABLE            GET ERROR TABLE ADDRESS.\n         USING TABLE,R10               ESTABLISH ERRTAB ADDRESSABILITY.\n         SPACE\nUXIT005  DS    0H                      ********************************\n         CLI   TABCODE,X'FF'           END OF TABLE?\n         BE    UXIT005A                YES, EXIT WITH RC=08.     JDM03\n         CLC   TABCODE,PRECODE         MAJOR/MINOR CODE IN TABLE?\n         BE    UXIT010                 YES, GO PROCESS ERROR.\n         LA    R10,TABLEN(,R10)        POINT TO NEXT ENTRY IN TABLE.\n         B     UXIT005                 GO CHECK NEXT ENTRY.\n         SPACE\n*----------------------------------------------------------------JDM03*\n*        MAKE ONE MORE LOOK FOR ONLY NETWORK RELATED ERRORS      JDM03*\n*----------------------------------------------------------------JDM03*\n         SPACE 1                                                 JDM03\nUXIT005A EQU   *                                                 JDM03\n         LA    R10,NETERROR            ONE MORE ERROR TO CHECK   JDM03\n         CLC   TABCODE(2),PRECODE      MAJOR CODE IN TABLE?      JDM03\n         BE    UXIT010                 YES, GO PROCESS ERROR     JDM03\n         B     UXITRC08                EXIT WITH RC=08.          JDM03\n         SPACE 1                                                 JDM03\nUXIT010  DS    0H                      ********************************\n         L     R15,TABADDR             LOAD ERROR ROUTINE ADDRESS.\n         BR    R15                     GO TO ERROR HANDLER.\n         TITLE 'SPECFIC ERROR ROUTINES'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SPECIFIC ERROR ROUTINES                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*   THESE ROUTINES LOOK FOR THE FOLLOWING:                            *\n*                                                                     *\n*   FOR ERROR CODE 0010.0001   (SIMLOGON FAILURE)                     *\n*   - RPL RC/F2 OF 10/00       (LU NOT ACTIVE)                        *\n*   - RPL RC/F2 OF 14/53       (LU NOT DEFINED)                       *\n*                                                                     *\n*   FOR ERROR CODE 0010.000C   (OPNDST FAILURE)                       *\n*   - RPL RC/F2 OF 10/01                                              *\n*      WITH SNA SENSE 080A     (POWERED OFF)                          *\n*                              (NON-CONTACT)                     JDM05*\n*                                                                     *\n*   FOR ERROR CODE 0010.0025   (APPCCMD FAILURE - LU6.2 DEVICE)       * VPS61\n*   - RCPRI/RCSEC OF 0004/0000 (ALLOCATION ERROR - LU NOT ACTIVE)     * VPS61\n*   - RCPRI/RCSEC OF 0004/0001 (ALLOCATION ERROR - RETRY ALLOWED)     * VPS61\n*   - RCPRI/RCSEC OF 0020/0000 (CNOS FAILURE - RETRY ALLOWED)         * VPS61\n*   - RCPRI/RCSEC OF 0048/0000 (RESOURCE FAILURE)                     * VPS61\n*   - RCPRI/RCSEC OF 0088/0000 (ABNORMAL DEALLOCATION)                * VPS61\n*                                                                     *\n*   FOR ERROR CODE 0010.0102   (TCPIP REQUEST FAILURE)                * VPSTCP\n*   - 2ND ANS WORD OF 00000030 (ADDRESS IN USE)                       * VPSTCP\n*   - 2ND ANS WORD OF 00000035 (CONNECTION ABORTED BY SOFTWARE)       * VPS61088\n*   - 2ND ANS WORD OF 0000003D (CONNECTION REFUSED)                   * VPSTCP\n*                                                                     *\n*   IF THE ERROR IS IDENTIFIED, GO TO STANDARD ERROR RECOVERY         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        SIMLOGON FAILURE                                             *\n*---------------------------------------------------------------------*\nE1001    DS    0H                      ********************************\n         CLC   PREVARY+2(2),=X'1000'   LU NOT ACTIVE?\n         BE    STD                     PROCESS AS STANDARD ERROR.\n         CLC   PREVARY+2(2),=X'1453'   LU NOT DEFINED?\n         BE    STD                     PROCESS AS STANDARD ERROR.\n         B     UXITRC08                EXIT WITH RC=08.\n         SPACE\n*---------------------------------------------------------------------*\n*        OPNDST FAILURE                                               *\n*---------------------------------------------------------------------*\nE100C    DS    0H                      ********************************\n         CLC   PREVARY+2(4),=X'1001080A' POWERED OFF?\n         BE    STD                       PROCESS AS STANDARD ERROR.\n         B     UXITRC08                  EXIT WITH RC=08.\nE1025    DS    0H                      ******************************** VPS61\n         CLC   PREVARY+4(4),=X'00040000' ALLOCATION ERROR/NOT ACTIVE?   VPS61\n         BE    STD                       PROCESS AS STANDARD ERROR.     VPS61\n         CLC   PREVARY+4(4),=X'00040001' ALLOCATION ERR/RETRY ALLOWED?  VPS61\n         BE    STD                       PROCESS AS STANDARD ERROR.     VPS61\n         CLC   PREVARY+4(4),=X'00200000' CNOS FAILED/RETRY ALLOWED?     VPS61\n         BE    STD                       PROCESS AS STANDARD ERROR.     VPS61\n         CLC   PREVARY+4(4),=X'00480000' RESOURCE FAILURE?              VPS61\n         BE    STD                       PROCESS AS STANDARD ERROR.     VPS61\n         CLC   PREVARY+4(4),=X'00880000' ABNORMAL DEALLOCATION?         VPS61\n         BE    STD                       PROCESS AS STANDARD ERROR.     VPS61\n         B     UXITRC08                  EXIT WITH RC=08.\n         SPACE\n*----------------------------------------------------------------JDM06*\n*        REFINE THE LIST BELOW AND ALSO DOCUMENT THE EXISTING    JDM06\n*        ERRORS AS FAR AS TCP/IP NUMBER.  PLUS ADD A FEW.        JDM06\n*----------------------------------------------------------------JDM06*\nE10102   DS    0H                      ******************************** VPSTCP\n         CLC   PREVARY(4),=A(TPEADRNU) 48ADDRESS ALREADY IN USE?        VPSTCP\n         BE    STD                       PROCESS AS STANDARD ERROR.     VPSTCP\n         CLC   PREVARY(4),=A(TPENETUR) 51NETWORK UNREACHABLE     JDM06\n         BE    STD                       PROCESS AS STD ERROR.   JDM06\n         CLC   PREVARY(4),=A(TPENETRS) 52NETWORK DROPPED CON     JDM06\n         BE    STD                       PROCESS AS STD ERROR.   JDM06\n         CLC   PREVARY(4),=A(TPECONAB) 53CONNECTION ABORT BY SOFTWARE?  VPS61088\n         BE    STD                       PROCESS AS STANDARD ERROR.     VPS61088\n         CLC   PREVARY(4),=A(TPECONRS) 54CON RESET BY PEER.      JDM06\n         BE    STD                       PROCESS AS STD ERROR.   JDM06\n         CLC   PREVARY(4),=A(TPEISCON) 56SOCKET ALREADY CONNECT  JDM06\n         BE    STD                       PROCESS AS STD ERROR.   JDM06\n         CLC   PREVARY(4),=A(TPETIMEO) 60CONNECTION TIMED OUT.   JDM06\n         BE    STD                       PROCESS AS STD ERROR.   JDM06\n         CLC   PREVARY(4),=A(TPECONRF) 61CONNECTION REFUSED?            VPSTCP\n         BE    STD                       PROCESS AS STANDARD ERROR.     VPSTCP\n         CLC   PREVARY(4),=A(TPEHSTDN) 64HOST IS DOWN.           JDM06\n         BE    STD                       PROCESS AS STD ERROR.   JDM06\n         CLC   PREVARY(4),=A(TPEHSTUR) 65NO ROUTE TO HOST        JDM06\n         BE    STD                       PROCESS AS STD ERROR.   JDM06\n         B     UXITRC08                  EXIT WITH RC=08.               VPSTCP\n         SPACE\n         TITLE 'EX37 - ERROR ROUTINE FOR DCB ABEND X37'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        QPUT DCB ABEND (X37 ONLY)                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*   IF PRINTER TASK ABENDED WITH AN X37 ABEND, BOTH THE PRIMARY AND   *\n*   SECONDARY SPACE ALLOCATIONS WILL BE INCREASED, AND THE ERROR WILL *\n*   BE RETRIED.  THE PRIMARY ALLOCATION IS MULTIPLIED BY 4 AND THE    *\n*   SECONDARY ALLOCATION BY 2.  THE ERROR WILL BE RETRIED ONLY ONCE.  *\n*                                                                     *\n*   THE USER COULD CONTINUE INCREASING THE ALLOCATION QUANTITIES IF   *\n*   DESIRED BY MODIFYING THE FOLLOWING CODE.                          *\n*                                                                     *\n*   NOTE:  THIS CODE WILL BE DRIVEN THE FIRST TIME THE \"INTERVAL\"     *\n*   EXPIRES AFTER THE PRINTER IS EDRAINED.  THE RETRY INTERVAL IS     *\n*   NOT TESTED IN THIS CODE, BUT IT COULD BE MODIFIED TO DO SO.       *\n*                                                                     *\n*---------------------------------------------------------------------*\nEX37     DS    0H                      ********************************\n         XR    R0,R0                   CLEAR REGISTER TO INSERT...\n         ICM   R0,B'0111',PREVARY         ABEND CODE (EG. D37004).\n         SLL   R0,4                    SHIFT OFF HIGHEST DIGIT.\n         CLM   R0,B'0100',=X'37'       IS THIS AN X37 ABEND?\n         BNE   UXITRC08                NO, DO NOT RETRY THIS ERROR.\n         SPACE\n         XR    R0,R0                   CLEAR RREGISTER TO INSERT...\n         ICM   R0,B'0011',PRECOUNT        RETRY COUNT.\n         BNZ   UXITRC08                ALREADY RETRIED, BYPASS.\n         EJECT\n*---------------------------------------------------------------------*\n*        INQUIRE FOR PRIMARY AND SECONDARY ALLOCATION QUANTITIES      *\n*---------------------------------------------------------------------*\n         MVC   UE08CBM(UE08CBML),CBMLIST INITIALIZE $$CBINQ PARM LIST.\n         SPACE\n         $$CBINQ QSPACE=(UE08QTYP,UE08QPRI,UE08QSEC),                  *\n               SYAT=YES,                                               *VPS80\n               TYPE=PRINTER,MF=(E,UE08CBM)\n         SPACE\n         LTR   R15,R15                 INQUIRE SUCCESSFUL?\n         BNZ   UXITRC08                NO, DO NOT RETRY THE ERROR.\n         SPACE\n         XR    R0,R0                   CLEAR REGISTER TO...\n         ICM   R0,B'0011',UE08QPRI        INSERT Q-PRIMARY QUANTITY.\n         SLL   R0,1                    MULTIPLY IT BY 2.         JDM01\n         STCM  R0,B'0011',UE08QPRI     RESTORE NEW Q-PRIMARY QUANTITY.\n         SPACE\n         XR    R0,R0                   CLEAR REGISTER TO...\n         ICM   R0,B'0011',UE08QSEC        INSERT Q-SECONDARY QUANTITY.\n         BNZ   *+8                     IF NOT ZERO, USE IT.\n         LA    R0,1                    FORCE TO 1 BEFORE DOUBLE.\n         SLL   R0,2                    MULTIPLY IT BY 4.         JDM01\n         STCM  R0,B'0011',UE08QSEC     RESTORE NEW Q-SECONARY QUANTITY.\n         EJECT\n*---------------------------------------------------------------------*\n*        SET NEW PRIMARY AND SECONDARY ALLOCATION QUANTITIES          *\n*---------------------------------------------------------------------*\n         MVC   UE08CBM(UE08CBML),CBMLIST INITIALIZE $$CBSET PARM LIST.\n         SPACE\n         $$CBSET QSPACE=(UE08QTYP,UE08QPRI,UE08QSEC),SYAT=YES,         *VPS80\n               MF=(E,UE08CBM)\n         SPACE\n         LTR   R15,R15                 $$CBSET SUCCESSFUL?\n         BNZ   UXITRC08                NO, DO NOT RETRY THE ERROR.\n         B     UXITRC00                GO RETRY WITH NEW ALLOCATIONS.\n         TITLE 'STD - STANDARD ERROR HANDLER'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STD - STANDARD ERROR HANDLER                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*   ENTRY TO THIS ROUTINE CAN BE FROM NORMAL TABLE SCAN OR FROM       *\n*     OTHER ERROR HANDLERS.                                           *\n*                                                                     *\n*   THIS ROUTINE WILL TREAT THE ERRORS AS FOLLOWS:                    *\n*   - CHECK FOR RETRIES EXHAUSTED                                     *\n*     IF YES, ISSUE MESSAGE IF REQUESTED ($1WTO   )                   *\n*             IF INACT REQUESTED($1INACT), SET RC=12                  *\n*              ELSE, SET RC=08.                                       *\n*   - CHECK IF WAIT INTERVAL HAS EXPIRED                              *\n*     IF NO,  SET RC=04                                               *\n*     IF YES, SET RC=00                                               *\n*                                                                     *\n*   NOTES:                                                            *\n*   - A RETRY COUNT OF ZEROS INDICATES RETRY FOREVER.                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSTD      DS    0H                      ********************************\n         CLC   TABRCNT,=H'0'           RETRY FOREVER?\n         BE    STD010                  YES, BRANCH\n         CLC   PRECOUNT,TABRCNT        ALL RETRIES USED?\n         BL    STD010                  NO,  BRANCH\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        NO MORE RETRIES                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        - ISSUE MESSAGE IF REQUESTED                                 *\n*        - REQUEST INACT IF REQUESTED                                 *\n*        - SET RC=08                                                  *\n*---------------------------------------------------------------------*\n         TM    TABFLG1,$1WTO           ISSUE MESSAGE?\n         BZ    STD005                  NO, CONTINUE.\n         SPACE\n*---------------------------------------------------------------------* VPS80\n*        INITIALIZE WTO WORKAREA FOR $$VPSERV                         * VPS80\n*---------------------------------------------------------------------* VPS80\n         LA    R14,UE08WTAT            GET ADDRESS OF WTAT WORKAREA.    VPS80\n         USING WTADSECT,R14            ESTABLISH WTAT ADDRESSABILITY.   VPS80\n         OI    WTATYPE,WTATNOR         SET NORMAL MESSAGE TYPE.         VPS80\n         MVC   WTAMSGID,=AL2(2008)     SET MESSAGE ID TO 2008.          VPS80\n         MVI   WTATEXT,C' '            SET MESSAGE TEXT AREA...         VPS80\n         MVC   WTATEXT+1(L'WTATEXT-1),WTATEXT   TO BLANKS.              VPS80\n         SPACE                                                          VPS80\n         LA    R1,L'WTOTEXT            LOAD LENGTH OF MESSAGE TEXT.     VPS80\n         STCM  R1,B'0011',WTALGTH      SET LENGTH OF MESSAGE TEXT.      VPS80\n         MVC   WTATEXT(L'WTOTEXT),WTOTEXT  INITIALIZE MESSAGE TEXT.     VPS80\n         MVC   WTATEXT+09(8),SYASTCNM  MOVE IN VPS STC NAME.            VPS80\n         MVC   WTATEXT+18(8),PRATNAME  MOVE IN LUNAME.                  VPS80\n         DROP  R14                     DROP WTAT ADDRESSABILITY.        VPS80\n         SPACE                                                          VPS80\n         $$VPSERV REQUEST=WTO,                                         XVPS80\n               WTOAREA=UE08WTAT,                                       XVPS80\n               SYAT=YES,                                               XVPS80\n               MF=(E,UE08SERV)                                          VPS80\n         SPACE\nSTD005   DS    0H                      ********************************\n         TM    TABFLG1,$1INACT         REQUEST INACTIVATION?\n         BO    UXITRC12                YES, EXIT WITH RC=12.\n         B     UXITRC08                EXIT WITH RC=08.\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CHECK INTERVAL EXPRIRATION                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        IF INTERVAL HAS EXPIRED, INDICATE RETRY                      *\n*---------------------------------------------------------------------*\nSTD010   DS    0H                      ********************************\n         BAS   R14,CALCINT             CALCULATE INTERVAL SINCE ERROR.\n         CLC   UE08INTV,TABINTV        COMPARE TO TABLE INTERVAL VALUE.\n         BL    UXITRC04                TIME HAS NOT EXPIRED.\n         B     UXITRC00                TIME HAS EXPIRED.\n         TITLE 'MODULE EXIT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        OPMSUE08 MODULE EXIT                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        REQUEST VPS RETRY ERROR                                      *\n*---------------------------------------------------------------------*\nUXITRC00 DS    0H                      ********************************\n         LA    R15,RC00                SET RETURN CODE TO 00.\n         B     UXIT999                 RETURN TO VPS.\n         SPACE\n*---------------------------------------------------------------------*\n*        REQUEST VPS IGNORE ERROR AND CALL AGAIN FOR THIS ERROR       *\n*---------------------------------------------------------------------*\nUXITRC04 DS    0H                      ********************************\n         LA    R15,RC04                SET RETURN CODE TO 04.\n         B     UXIT999                 RETURN TO VPS.\n         SPACE\n*---------------------------------------------------------------------*\n*        REQUEST VPS IGNORE ERROR AND NOT CALL AGAIN FOR THIS ERROR   *\n*---------------------------------------------------------------------*\nUXITRC08 DS    0H                      ********************************\n         LA    R15,RC08                SET RETURN CODE TO 08.\n         B     UXIT999                 RETURN TO VPS.\n         SPACE\n*---------------------------------------------------------------------*\n*        REQUEST VPS INACTIVATE PRINTER                               *\n*---------------------------------------------------------------------*\nUXITRC12 DS    0H                      ********************************\n         LA    R15,RC12                SET RETURN CODE TO 12.\n         B     UXIT999                 RETURN TO VPS.\n         SPACE\n*---------------------------------------------------------------------* VPS80\n*        REQUEST VPS INACTIVATE PRINTER AND PURGE ALL PRINTER OUTPUT  * VPS80\n*---------------------------------------------------------------------* VPS80\nUXITRC16 DS    0H                      ******************************** VPS80\n         LA    R15,RC16                SET RETURN CODE TO 16.           VPS80\n         B     UXIT999                 RETURN TO VPS.                   VPS80\n         SPACE\n*---------------------------------------------------------------------*\n*        RETURN TO VPS                                                *\n*---------------------------------------------------------------------*\nUXIT999  DS    0H                      ********************************\n         LR    R10,R15                 SAVE RETURN CODE.                VPS80\n         LR    R1,R13                  ADDRESS OF MODULE WORKAREA.\n         $$VPSERV REQUEST=FREEMAIN,                                    XVPS80\n               A=(R1),                                                 XVPS80\n               LV=UE08DSLN,                                            XVPS80\n               SYAT=YES,                                               XVPS80\n               MF=S                                                     VPS80\n         SPACE\n         EREG  R0,R1                   RESTORE R0 AND R1.               VPS80\n         LR    R15,R10                 RESTORE RETURN CODE.             VPS80\n         PR    ,                       RESTORE STATUS AND RETURN.       VPS80\n         TITLE 'CALCINT - CALCULATE ELAPSED TIME INTERVAL'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        CALCULATE ELAPSED TIME INTERVAL                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        - COMPUTE ELAPSED TIME SINCE ERROR IN SECONDS.               *\n*        - STORE RESULTS IN FIELD 'UE08INTV'.                         *\n*---------------------------------------------------------------------*\nCALCINT  DS    0H                      ********************************\n         BAKR  R14,R0                  SAVE REGISTERS.                  VPS80\n         SPACE\n         TIME  BIN                     GET TIME AND DATE.\n         SPACE\n         STM   R0,R1,UE08TIME          STORE CURRENT TIME AND DATE.\n         SPACE\n         C     R1,PREDATE              DOES CURRENT DATE = ERROR DATE.\n         BE    *+8                     NO, BYPASS.\n         A     R0,DAYSECS              INCREMENT CURRENT TIME BY 1 DAY.\n         S     R0,PRETIME              SUBTRACT FOR ELAPSED TIME.\n         SPACE\n         LR    R1,R0                   LOAD ELAPSED TIME INTO R1.\n         XR    R0,R0                   CLEAR REGISTER FOR DIVIDE.\n         D     R0,F100                 CALCULATE SECONDS SINCE ERROR.\n         ST    R1,UE08INTV             SAVE INTERVAL SINCE ERROR.\n         SPACE\n         EREG  R15,R1                  RESTORE R15, R0 AND R1.          VPS80\n         PR    ,                       RESTORE STATUS AND RETURN.       VPS80\n         TITLE 'REGISTER EQUATES'\n*---------------------------------------------------------------------*\n*        REGISTER EQUATES                                             *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'LITERALS && CONSTANTS'\n*---------------------------------------------------------------------*\n*        LITERALS & CONSTANTS                                         *\n*---------------------------------------------------------------------*\n         LTORG\n         EJECT\nRC00     EQU   00\nRC04     EQU   04\nRC08     EQU   08\nRC12     EQU   12\nRC16     EQU   16\n         SPACE\nDAYSECS  DC    A(24*60*60*100)         HUNDREDTHS/SECOND PER DAY.\nF100     DC    F'100'                  FULLWORD VALUE OF 100.\n         SPACE\nWTOTEXT  DS    0CL100\n         DC    CL09'VPSX2008 '         +00 - VPS EXIT MSG ID.\n         DC    CL09'         '         +09 - VPS STC NAME.\n         DC    CL09'         '         +18 - PRINTER NAME.\n         DC    CL23'- RETRIES ARE COMPLETE'\n         DC    CL50' '                 +50 - RESERVE ANOTHER 50 BYTES.\n         SPACE\nCBMLIST  $$CBINQ TYPE=PRINTER,MF=L\n         TITLE 'ERROR TABLE FOR ATTEMPTED RECOVERY'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR TABLE FOR ATTEMPTED RECOVERY                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MAPPED BY TABLE DSECT BELOW                                  *\n*                                                                     *\n*   BYTES                                                             *\n*   -----                                                             *\n*   00-03  MAJOR AND MINOR ERROR CODES                                *\n*   04-0B  (RESERVED)                                                 *\n*   0C-0F  ADDRESS OF RECOVERY ROUTINE                                *\n*   10-13  TIME INTERVAL BETWEEN RETRIES, EXPRESSED IN SECONDS.       *\n*   14-15  NUMBER OF RETRIES                                          *\n*   16     FLAG BYTE                                                  *\n*          $1WTO    - ISSUE MESSAGE WHEN RETRIES ARE EXHAUSTED        *\n*          $1INACT  - INACTIVATE PRINTER WHEN RETRIES ARE EXHAUSTED   *\n*   17     (RESERVED)                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nERRTABLE DS    0F\n*---------------------------------------------------------------------*\n*        ENTRY FOR QPUT DCB ABEND                                     *\n*---------------------------------------------------------------------*\n         DC    X'00080006'             ERROR CODE:  MAJOR/MINOR.\n         DC    X'00000000'             RESERVED.\n         DC    X'00000000'             RESERVED.\n         DC    A(EX37)                 ROUTINE TO HANDLE ERROR.\n         DC    A(60*1)                 INTERVAL BETWEEN RETRIES (SEC).\n         DC    H'1'                    RETRY COUNT.\n         DC    AL1($1WTO)              WTO WHEN RETRIES EXHASUTED.\n         DC    1X'00'                  RESERVED.\n         SPACE\n*---------------------------------------------------------------------*\n*        ENTRY FOR SIMLOGON FAILURE                                   *\n*---------------------------------------------------------------------*\n         DC    X'00100001'             ERROR CODE:  MAJOR/MINOR.\n         DC    X'00000000'             RESERVED.\n         DC    X'00000000'             RESERVED.\n         DC    A(E1001)                ROUTINE TO HANDLE ERROR.\n         DC    A(60*15)                INT BETWEEN RETRIES (SEC) JDM07\n         DC    H'00'                   RETRY COUNT.              JDM03\n         DC    AL1($1WTO)              WTO WHEN RETRIES EXHASUTED.\n         DC    1X'00'                  RESERVED.\n         EJECT\n*---------------------------------------------------------------------*\n*        ENTRY FOR OPNDST FAILURE                                     *\n*---------------------------------------------------------------------*\n         DC    X'0010000C'             ERROR CODE:  MAJOR/MINOR.\n         DC    X'00000000'             RESERVED.\n         DC    X'00000000'             RESERVED.\n         DC    A(E100C)                ROUTINE TO HANDLE ERROR.\n         DC    A(60*3)                 INTERVAL BETWEEN RETRIES (SEC).\n         DC    H'01'                   RETRY COUNT.              JDM05\n         DC    AL1($1WTO)              WTO WHEN RETRIES EXHASUTED.\n         DC    1X'00'                  RESERVED.\n         SPACE\n*---------------------------------------------------------------------*\n*        ENTRY FOR LOST TERMINAL                                      *\n*---------------------------------------------------------------------*\n         DC    X'0010000F'             ERROR CODE:  MAJOR/MINOR.\n         DC    X'00000000'             RESERVED.\n         DC    X'00000000'             RESERVED.\n         DC    A(STD)                  ROUTINE TO HANDLE ERROR.\n         DC    A(60*10)                INT BETWEEN RETRIES (SEC) JDM07\n         DC    H'00'                   RETRY COUNT.              JDM03\n         DC    AL1($1WTO)              WTO WHEN RETRIES EXHASUTED.\n         DC    1X'00'                  RESERVED.\n         SPACE\n*---------------------------------------------------------------------*\n*        ENTRY FOR SESSION CLEANUP REQUESTED                          *\n*---------------------------------------------------------------------*\n         DC    X'00100018'             ERROR CODE:  MAJOR/MINOR.\n         DC    X'00000000'             RESERVED.\n         DC    X'00000000'             RESERVED.\n         DC    A(STD)                  ROUTINE TO HANDLE ERROR.\n         DC    A(60*6)                 INT BETWEEN RETRIES (SEC) JDM07\n         DC    H'00'                   RETRY COUNT.              JDM03\n         DC    AL1($1WTO)              WTO WHEN RETRIES EXHASUTED.\n         DC    1X'00'                  RESERVED.\n         SPACE\n*---------------------------------------------------------------------* VPS61\n*        ENTRY FOR APPCCMD ERROR FOR LU6.2 DEVICES                    * VPS61\n*---------------------------------------------------------------------* VPS61\n         DC    X'00100025'             ERROR CODE:  MAJOR/MINOR.        VPS61\n         DC    X'00000000'             RESERVED.                        VPS61\n         DC    X'00000000'             RESERVED.                        VPS61\n         DC    A(E1025)                ROUTINE TO HANDLE ERROR.         VPS61\n         DC    A(60*3)                 INTERVAL BETWEEN RETRIES (SEC).  VPS61\n         DC    H'10'                   RETRY COUNT.                     VPS61\n         DC    AL1($1WTO)              WTO WHEN RETRIES EXHASUTED.      VPS61\n         DC    1X'00'                  RESERVED.                        VPS61\n         EJECT\n*---------------------------------------------------------------------* VPSTCP\n*        ENTRY FOR TCPIP REQUEST FAILURE                              * VPSTCP\n*---------------------------------------------------------------------* VPSTCP\n         DC    X'00100102'             ERROR CODE:  MAJOR/MINOR.        VPSTCP\n         DC    X'00000000'             RESERVED.                        VPSTCP\n         DC    X'00000000'             RESERVED.                        VPSTCP\n         DC    A(E10102)               ROUTINE TO HANDLE ERROR.         VPSTCP\n         DC    A(60*10)                INT BETWEEN RETRIES (SEC) JDM07  VPS61088\n         DC    H'00'                   RETRY COUNT.              JDM04  VPS61088\n         DC    AL1($1WTO)              WTO WHEN RETRIES EXHASUTED.      VPSTCP\n         DC    1X'00'                  RESERVED.                        VPSTCP\n         SPACE\n*---------------------------------------------------------------------* VPSTCP\n*        ENTRY FOR TCPIP CONNECTION ERROR                             * VPSTCP\n*---------------------------------------------------------------------* VPSTCP\n         DC    X'00100105'             ERROR CODE:  MAJOR/MINOR.        VPSTCP\n         DC    X'00000000'             RESERVED.                        VPSTCP\n         DC    X'00000000'             RESERVED.                        VPSTCP\n         DC    A(STD)                  ROUTINE TO HANDLE ERROR.         VPSTCP\n         DC    A(60*12)                INT BETWEEN RETRIES (SEC) JDM07  VPS62\n         DC    H'00'                   RETRY COUNT.              JDM04  VPS62\n         DC    AL1(0)                  WTO WHEN RETRIES EXHASUTED.      VPSTCP\n         DC    1X'00'                  RESERVED.                        VPSTCP\n         SPACE\n*---------------------------------------------------------------------* VPS61088\n*        ENTRY FOR TCPIP MRD EXPIRED - CONNECTION TIMED OUT           * VPS61088\n*---------------------------------------------------------------------* VPS61088\n         DC    X'00100107'             ERROR CODE:  MAJOR/MINOR.        VPS61088\n         DC    X'00000000'             RESERVED.                        VPS61088\n         DC    X'00000000'             RESERVED.                        VPS61088\n         DC    A(STD)                  ROUTINE TO HANDLE ERROR.         VPS61088\n         DC    A(60*12)                INT BETWEEN RETRIES (SEC) JDM07  VPS61088\n         DC    H'00'                   RETRY COUNT.              JDM04  VPS61088\n         DC    AL1($1WTO)              WTO WHEN RETRIES EXHASUTED.      VPS61088\n         DC    1X'00'                  RESERVED.                        VPS61088\n         SPACE\n*---------------------------------------------------------------------*\n*        END OF TABLE INDICATOR -- ALL ENTRIES MUST PRECEDE THIS      *\n*---------------------------------------------------------------------*\n         DC    XL4'FFFFFFFF'           END OF TABLE.\n         SPACE 1                                                 JDM03\n*----------------------------------------------------------------JDM03* VPS61088\n*        GENERIC ENTRY FOR ALL NETWORK RELATED ERRORS            JDM03  VPS61088\n*----------------------------------------------------------------JDM03* VPS61088\n         SPACE 1                                                 JDM03\n         DS    0F                                                JDM03\nNETERROR EQU   *                                                 JDM03\n         DC    X'00100000'             ERR: ONLY LOOK AT 1ST 2   JDM03  VPS61088\n         DC    X'00000000'             RESERVED.                 JDM03  VPS61088\n         DC    X'00000000'             RESERVED.                 JDM03  VPS61088\n         DC    A(STD)                  ROUTINE TO HANDLE ERROR.  JDM03  VPS61088\n         DC    A(60*15)                INT BETWEEN RETRIES (SEC) JDM07  VPS61088\n         DC    H'00'                   RETRY FOREVER             JDM03  VPS61088\n         DC    AL1($1WTO)              WTO NEVER USED            JDM03  VPS61088\n         DC    1X'00'                  RESERVED.                 JDM03  VPS61088\n         TITLE 'ERROR TABLE DSECT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR TABLE DSECT                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nTABLE    DSECT\nTABCODE  DS    0XL4                    ERROR CODE.\nTABMAJOR DC    XL2'00'                 MAJOR CODE.\nTABMINOR DC    XL2'00'                 MINOR CODE.\n         DC    XL8'00'                 RESERVED\nTABADDR  DC    A(0)                    ADDRESS OF ERROR ROUTINE.\nTABINTV  DC    A(0)                    INTERVAL BETWEEN RETRIES -\n*                                      SPECIFIED IN SECONDS.\nTABRCNT  DC    XL2'00'                 RETRY COUNT.\nTABFLG1  DC    XL1'00'                 FLAG BYTE 1.\n$1WTO    EQU   X'80'                   ISSUE MESSAGE WHEN RETRIES GONE.\n$1INACT  EQU   X'40'                   DO INACT WHEN RETRIES GONE.\n         DC    XL1'00'                 RESERVED.\n         SPACE\nTABLEN   EQU   *-TABLE                 LENGTH OF TABLE ENTRY.\n         TITLE 'OPMSUE08 MODULE WORKAREA DSECT'\n*---------------------------------------------------------------------*\n*        OPMSUE08 WORK AREA DSECT                                     *\n*---------------------------------------------------------------------*\nUE08DSCT DSECT\n         DC    18A(0)                  REGISTER SAVE AREA.\n         SPACE\nUE08REQ  DC    A(0)                    MODULE REQUEST CODE.\nUE08PLST DC    A(0)                    MODULE PARAMETER LIST ON ENTRY.\nUE08TIME DC    A(0)                    CURRENT TIME.\nUE08DATE DC    A(0)                    CURRENT DATE.\n         SPACE\nUE08INTV DC    A(0)                    CALCULATED INTERVAL SINCE ERROR.\n         SPACE\nUE08QTYP DC    CL1' '                  QSPACE TYPE (CYL/TRK).\nUE08QPRI DC    XL2'00'                 QSPACE PRIMARY   QUANTITY.\nUE08QSEC DC    XL2'00'                 QSPACE SECONDARY QUANTITY.\n         SPACE\n         DS    0D                      ALIGN ON A DOUBLEWORD BOUNDARY.  VPS80\nUE08WTAT DC    XL(WTADLGTH)'00'        VPSSWTAT - WTO WORKAREA.         VPS80\n         EJECT\n*---------------------------------------------------------------------*\n*        MACRO LISTS                                                  *\n*---------------------------------------------------------------------*\nUE08CBM  $$CBINQ TYPE=PRINTER,MF=L\nUE08CBML EQU   *-UE08CBM\n         SPACE\nUE08SERV $$VPSERV REQUEST=WTO,WTOAREA=UE08WTAT,SYAT=YES,MF=L            VPS80\n         SPACE\n         DC    XL32'00'                RESERVED.\n         DS    0D                      ALIGN ON A DOUBLEWORD BOUNDARY.\n         SPACE\nUE08DSLN EQU   *-UE08DSCT              WORK AREA LENGTH\n         SPACE\n         #LRTCEQU                      EQUATES FOR TCPIP SESSIONS\n         VPSSPRAT\n         VPSSPRER\n         VPSSSYAT\n         VPSSWTAT                                                       VPS80\n         END   OPMSUE08                                          JDM00\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OPMSUX14": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00'\\x01\\x04\\x11_\\x01\\x04\\x11o\\x18X\\x04\\x91\\x04\\x87\\x00\\x00\\xd9\\xe6\\xe3\\xc3\\xd1\\xc4\\xd4@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-04-24T00:00:00", "modifydate": "2004-04-25T18:58:27", "lines": 1169, "newlines": 1159, "modlines": 0, "user": "RWTCJDM"}, "text": "OPMSUX14 TITLE 'VPS USER EXIT-14:  DATASET ADD'                   JM00\n*---------------------------------------------------------------------*\n*                                                                     *\n*                            JIM MARSHALL, SOFTWARE \"JANITOR\"     JM00*\n*                            US OFFICE OF PERSONNEL MANAGEMENT    JM00*\n*                            CENTER FOR INFORMATION SERVICES/     JM00*\n*                                DATA CENTER GROUP                JM00*\n*                            1900 E STREET NW - ROOM BH04         JM00*\n*                            WASHINGTON DC  20415                 JM00*\n*                            (W) 202-606-1261 (0700-1530ET)       JM00*\n*                            JIM.MARSHALL@OPM.GOV                 JM00*\n*                                                                     *\n*                                                                     *\n*        VTAM PRINTER SUPPORT SYSTEM - VERSION 1, RELEASE 8.0         *\n*                                                                     *\n*        (C) COPYRIGHT - 1999, 2000                                   *\n*                        LEVI, RAY & SHOUP, INC.                      *\n*                        2401 WEST MONROE STREET                      *\n*                        SPRINGFIELD, IL 62704                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*   MODULE NAME:    OPMSUX14                                      JM00*\n*                                                                     *\n*                                                                     *\n*   EXIT NAME:      DATASET ADD                                       *\n*                                                                     *\n*                                                                     *\n*   EXIT TYPE:      PRINTER                                           *\n*                                                                     *\n*                                                                     *\n*   EXIT TCB:       PRINTER                                           *\n*                                                                     *\n*                                                                     *\n*   RECOVERY:       EXITNN= KEYWORD DETERMINES RECOVERY ON/OFF        *\n*                                                                     *\n*                   RECOVERY ON:  EXIT WILL BE DISABLED               *\n*                                                                     *\n*                   RECOVERY OFF: PRINTER WILL BE 'EDRAINED'          *\n*                                                                     *\n*                                                                     *\n*   ATTRIBUTES:     REENTRANT, REUSEABLE, REFRESHABLE                 *\n*                                                                     *\n*                   PROBLEM STATE, KEY 8                              *\n*                                                                     *\n*                   AUTHORIZED                                        *\n*                                                                     *\n*                   AMODE=31 RMODE=31                                 *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:       THIS EXIT ALLOWS INSERTION OF DATA (PRINT OR      *\n*                   CONTROL) BOTH BEFORE AND AFTER EACH DATASET       *\n*                   AND SEPARATOR PROCESSED BY VPS.                   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*=====================================================================*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*     THIS SAMPLE EXIT, PROVIDED BY LRS, PERFORMS FUNCTIONS FOR THE   *\n*     FOLLOWING SPECIAL PRINTER TYPES:                                *\n*                                                                     *\n*     TYPE                            SEPINFO                         *\n*     -------------------             ---------                       *\n*     HP PCL PRINTERS                 HPL......                       *\n*     POSTSCRIPT PRINTERS             PS.......                       *\n*     FAX SERVERS                     FAX......                       *\n*                                                                     *\n*                                                                     *\n*     FOR A PRINTER THAT HAS 'HPL' AS THE FIRST THREE CHARACTERS OF   *\n*     SEPINFO, THIS SAMPLE EXIT IS USED FOR SENDING PCL COMMANDS      *\n*     TO THE PRINTER.  THIS CODE REQUIRES THAT THE HP LASER PRINTER   *\n*     USE AN LU-1 (SCS) BIND OR AN LU-6 BIND OR THAT IT BE A TCP/IP   *\n*     PRINTER.  LU-0 AND LU-3 (DSC) PRINTERS ARE NOT SUPPORTED.       *\n*                                                                     *\n*     FOR A PRINTER THAT HAS 'PS' AS THE FIRST TWO CHARACTERS OF      *\n*     SEPINFO, THIS SAMPLE EXIT IS USED FOR SENDING POSTSCRIPT        *\n*     FORMATTING CONTROLS TO THE PRINTER.  THIS CODE REQUIRES THAT    *\n*     THE POSTSCRIPT PRINTER USE AN LU-1 (SCS) BIND OR AN LU-6 BIND   *\n*     OR THAT IT BE A TCP/IP PRINTER.  LU-0 AND LU-3 (DSC) PRINTERS   *\n*     ARE NOT SUPPORTED.                                              *\n*                                                                     *\n*     FOR A PRINTER THAT HAS 'FAX' AS THE FIRST THREE CHARACTERS OF   *\n*     SEPINFO, THIS SAMPLE EXIT IS USED ALONG WITH EXIT22 TO SEND     *\n*     FAX COMMAND LANGUAGE TO A FAX SERVER.  EXIT22 WILL REMOVE THE   *\n*     FCL FROM THE INPUT AND SAVE IT IN WORKAREAS WHICH ARE ANCHORED  *\n*     FROM THE FIRST PRINTER USER WORD. THE INPUT DATASET IS THEN     *\n*     PASSED TO VPS/PCL FOR CONVERSION TO PCL.  EXIT14 THEN RESTORES  *\n*     THE FCL BY READING THE WORKAREAS AND SENDING THE FCL BEFORE     *\n*     AND/OR AFTER THE DATASET.                                       *\n*                                                                     *\n*     \"USING VPS EXITS TO SEND PRINTER COMMANDS\" IN THE \"SPECIAL      *\n*     TOPICS\" SECTION OF THE VPS MANUAL DESCRIBES THESE FUNCTIONS.    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROCESSING NOTES:                                                 *\n*                                                                     *\n*     THIS EXIT IS CALLED BEFORE AND AFTER SEPARATORS AND STANDARD    *\n*     PRINT LINE DATASETS.                                            *\n*                                                                     *\n*     WHEN THIS EXIT IS CALLED FOR THE START-JOB SEPARATOR, THE       *\n*     INFORMATION IN THE DATASET ATTRIBUTE LIST IS FOR THE FIRST OR   *\n*     ONLY DATASET OF THE JOB.                                        *\n*                                                                     *\n*     WHEN THIS EXIT IS CALLED FOR THE END-JOB SEPARATOR, THE         *\n*     INFORMATION IN THE DATASET ATTRIBUTE LIST IS FOR THE LAST OR    *\n*     ONLY DATASET OF THE JOB.                                        *\n*                                                                     *\n*     THIS EXIT IS NOT CALLED IF VPS USER EXIT 02 GAVE A NON-ZERO     *\n*     RETURN CODE FOR THE DATASET.                                    *\n*                                                                     *\n*     THIS EXIT CAN GIVE AN RC=04 ON THE FIRST CALL TO IT TO INDICATE *\n*     NO DATA IS TO BE ADDED FOR THIS DATASET AT THIS TIME.           *\n*                                                                     *\n*************************** CAUTION ***********************************\n*************************** CAUTION ***********************************\n*************************** CAUTION ***********************************\n*                                                                     *\n*     THE FAX SERVER CODE OF THIS EXIT USES BOTH WORDS IN THE USER    *\n*     WORK AREA PASSED TO THIS EXIT.  IF ANY OTHER PRINTER-RELATED    *\n*     EXIT OVERLAYS THESE WORDS, RESULTS OF THIS EXIT MAY BE          *\n*     INCORRECT.                                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*      ON ENTRY:                                                      *\n*         R0 ==>  REQUEST CODE.                                       *\n*         R1 ==>  ADDRESS OF PARAMETER LIST.                          *\n*        R13 ==>  ADDRESS OF CALLERS SAVEAREA.                        *\n*        R14 ==>  RETURN ADDRESS.                                     *\n*        R15 ==>  ENTRY  ADDRESS.                                     *\n*                                                                     *\n*      DURING EXECUTION:                                              *\n*      R0-R1 ==>  VOLATILE.                                           *\n*         R2 ==>  SYSTEM  ATTRIBUTE BASE REGISTER                     *\n*         R3 ==>  TWO WORD WORKAREA.                                  *\n*         R4 ==>  PRINTER ATTRIBUTE BASE REGISTER                     *\n*         R5 ==>  DATASET ATTRIBUTE BASE REGISTER                     *\n*         R6 ==>  LINE WORKAREA     BASE REGISTER                     *\n*         R7 ==>  PRINTER COMMAND WORKAREA (VPSSPCMD) (HP OR PS)      * VPS80\n*                 OR FAX  COMMAND WORKAREA (VPSSFAXC) (FAX)           * VPS80\n*         R8 ==>  MODULE REQUEST CODE.                                * VPS80\n*         R9 ==>  USED IN HP OR PS AS BASE FOR XMAT               JM01* VPS80\n*                 OR FAX RECORD WORKAREA   (VPSSFAXR) (FAX)           * VPS80\n*        R10 ==>  VOLATILE.                                           *\n*        R11 ==>  EXIT WORKAREA BASE REGISTER.                        *\n*        R12 ==>  PROGRAM BASE REGISTER.                              *\n*        R13 ==>  ADDRESS OF CALLERS SAVEAREA.                        *\n*    R14-R15 ==>  VOLATILE.                                           *\n*                                                                     *\n*      ON EXIT:                                                       *\n*         ALL REGISTERS WILL BE RESTORED TO ENTRY CONDITIONS, EXCEPT  *\n*      R15, WHICH WILL CONTAIN A RETURN CODE.                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*      REQUEST CODES:                                                 *\n*         00 - ADD DATA BEFORE A DATASET                              *\n*         04 - ADD DATA AFTER  A DATASET                              *\n*         08 - CLEANUP EXIT RESOURCES, SEVERE ERROR DETECTED          *\n*                                                                     *\n*      PARAMETER LIST FORMAT:                                         *\n*         +0  ADDRESS OF SYSTEM ATTRIBUTES (VPSSSYAT)                 *\n*         +4  ADDRESS OF TWO WORD WORKAREA FOR THE USER               *\n*         +8  ADDRESS OF PRINTER ATTRIBUTES (VPSSPRAT)                *\n*        +12  ADDRESS OF DATASET ATTRIBUTES (VPSSDSAT)                *\n*        +16  ADDRESS OF LINE AREA DSECT                              *\n*        +20  ADDRESS OF XMEMORY ATTRIBUTES (VPSSXMAT)                *\n*        +24  ADDRESS OF PRINTER COMMAND WORKAREA (VPSSPCMD)          * VPS80\n*                                                                     *\n*      RETURN CODES:                                                  *\n*         00 - PROCESS THE DATA IN THE LINE WORKAREA                  *\n*         04 - NO DATA TO PROCESS AND NO MORE CALLS ARE REQUIRED      *\n*         08 - NO DATA TO PROCESS; DON'T PROCESS PCMD KEYWORDS        * VPS80\n*         12 - UNDEFINED; TREATED AS RETURN CODE = 04                 *\n*         16 - EDRAIN THE PRINTER (EXIT ENCOUNTERED SEVERE ERROR)     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n* CHANGE ACTIVITY:                                                    *\n*                                                                     *\n* 11/28/95 RWR CHANGED COMPARE FOR WRITER = BLANKS TO WRITER > BLANKS *\n* 04/11/96 BJW CHANGED TO CHECK PRADEVF4 FOR TCPIP DEVICES            *\n* 08/28/96 BJW CHANGED TO ADD CODE FOR FAX SERVERS                    *\n* 09/20/99 GET CHANGED POSTSCRIPT END-SEQUENCE TO <CR>%%EOF<CR><EOT>  *\n* 01/04/00 BJW CHANGED TO USE PCMDXXXX KEYWORD VALUES                 * VPS80\n*                                                                     *\n* 11/29/02 PRESENTLY THERE ARE TWO PRINTING SUBSYSTEMS ACTIVE AT  JM00*\n*          OPM. INFOPRINT IS RUNNING ALONG WITH VPS. SEAMLESS     JM00*\n*          CODE MUST BE PLACED TO MAKE THE COMPLETE TRANSITION TO JM00*\n*          AN ALL VPS SYSTEM AND ALSO IMPLEMENT \"FORM\" NAME AS    JM00*\n*          THE DRIVER FOR HOW PRINT STYLES WILL BE SPECIFIFED.    JM00*\n*          TODAY, INFORPRINT USES THE \"PROPTNS\" OPTION OF THE     JM00*\n*          OUTPUT STATEMENT AND VPS USES THE \"WRITER\" FIELD. THE  JM00*\n*          CODE BELOW WILL MAKE A TRANSPARENT TRANSITION TO AN    JM00*\n*          FORM NAME SYSTEM. HOPEFULLY IN THE FUTURE SOME CODE    JM00*\n*          BE REMOVED. THE MOD'S WILL BE DONE IN TWO PARTS.       JM00*\n*                                                                 JM00*\n*          OVERALL STRATEGIES:                                    JM00*\n*                                                                 JM00*\n*          1. KEEP ALL FORM NAMES FOUR (4) CHARS OR LESS. IT      JM00*\n*          ENABLES ALL CODING VARIATIONS OF THE PARAMETER TO BE   JM00*\n*          CONSISTENT EVERYWHERE. TRUE, SOME PLACES CAN CODE 8,   JM00*\n*          BUT OPM MODULES WILL ALWAYS BE LENGTH FOUR AS A        JM00*\n*                                                                 JM00*\n*          2. PRESENTLY, ALL PRINTERS ARE EITHER PCL CAPABLE, PCL JM00*\n*          AND POSTSCRIPT CAPABLE, OR DOT MATRIX. IN THE FUTURE,  JM00*\n*          IF POSTSCRIPT ONLY CAPABLE PRINTERS EMERGE, THEN MORE  JM00*\n*          CODE WILL HAVE TO BE ADDED.                            JM00*\n*                                                                 JM00*\n* 11/29/02 INFOPRINT USES THE \"PRTOPTNS\" FIELD OF THE OUTPUT      JM00*\n*          STATEMENT. CHECK FOR THE FOUR PUBLISHED OPTIONS &      JM00*\n*          REPLACE WITH THE VPS EQUIVALENTS.                      JM00*\n*                                                                 JM00*\n*          IF \"HPLAND\", THEN SUBSTITUTE \"SLXL\"                JM00JM01*\n*          IF \"HPPORT\", THEN SUBSTITUTE \"SPXX\"                JM00JM01*\n*          IF \"DUPLEXLAND\", THEN SUBSTITUE \"DSTD\"             JM00JM01*\n*          IF \"DUPLEXPORT\", THEN SUBSTITUE \"DPXX\"             JM00JM01*\n*                                                                 JM00*\n* 11/29/02 VPS WAS ORIGINALLY IMPLEMENTED USING THE \"WRITER\"      JM00*\n*          FIELD AS THE DETERMINING FIELD FOR ANY PCL MODULE      JM00*\n*          LOADING. THIS CHANGE WILL LOOK AT THE FIELD AND USE    JM00*\n*          USE IT, OTHERWISE THE CODE PRESSES ON AND CHECKS       JM00*\n*          THE FORM FIELD. IF THE FORM FIELD TAKES THE DEFAULT    JM00*\n*          OF \"STD\", THEN USE WHATEVER IS CODED IN THE PCMDSTRT   JM00*\n*          AND PCMDEND FIELDS.                                    JM00*\n*                                                                 JM00*\n*          NOTES:                                                 JM00*\n*          1) WILL NOT BE USING \"POSTSCRIPT\" OR \"FAX\" PART OF     JM00*\n*             THE CODE FOR NOW.                                   JM00*\n*          2) INTENT IS TO KEEP CODED PARAMETERS:                 JM00*\n*             PCMDEND=(SSTD,SSTD)                                 JM00*\n*             PCMDSTRT=(SSTD,SSTD,WRITER)                         JM00*\n*                                                                 JM01*\n* 03/20/03 FOLD INTO CODE INFOPRINT PRINT MODULES NAMES FOR       JM01*\n*          TRANSPARENT TRANSITION OFF OF INFOPRINT.               JM01*\n*                                                                 JM01*\n*          IF \"HPLANDPL66\",  THEN SUBSTITUTE \"SLX6\"               JM01*\n*          IF \"HPPORTPL66\"   THEN SUBSTITUTE \"SPX6\"               JM01*\n*          IF \"CLASSA\",      THEN SUBSTITUTE \"SPXA\"               JM01*\n*          IF \"BINARY\",      THEN SUBSTITUTE \"SPXB\"               JM01*\n*          IF \"CLASSD\",      THEN SUBSTITUTE \"SPXD\"               JM01*\n*                                                                 JM01*\n*                                                                 JM02*\n* 05/05/03 CHECK THE PRINT MODULE REQUESTED TO SEE IF IT ACTUALLY JM02*\n*          EXISTS. THE CHECK WILL BE DONE BY ISSUING A BLDL MACRO.JM02*\n*                                                                 JM02*\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        V P S S U E 1 4   E N T R Y                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nOPMSUX14 CSECT                                                     JM00\nOPMSUX14 AMODE ANY                                                 JM00\nOPMSUX14 RMODE ANY                                                 JM00\n         B     32(,R15)                BRANCH AROUND CONSTANTS.    JM00\n         DC    CL8'OPMSUX14',CL8'&SYSDATE',CL8'&SYSTIME',C'V1R1'   JM00\n         BAKR  R14,R0                  SAVE REGISTERS.\n         LR    R12,R15                 LOAD PROGRAM BASE REGISTER.\n         USING OPMSUX14,R12            EST PROGRAM BASE REGISTER   JM00\n         SPACE\n         LR    R8,R0                   SAVE REQUEST CODE.               VPS80\n         LM    R2,R6,0(R1)             LOAD PARAMETER REGISTERS.        VPS80\n         L     R7,24(,R1)              LOAD VPSSPCMD  BASE REGISTER.    VPS80\n         LA    R7,0(,R7)               RESET HI-ORDER FLAG.             VPS80\n         SPACE\n         USING SYADSECT,R2             BASE REG: SYSTEM  ATTRIBUTES.\n         USING PRADSECT,R4             BASE REG: PRINTER ATTRIBUTES.\n         USING DSADSECT,R5             BASE REG: DATASET ATTRIBUTES.\n         USING LINEDSCT,R6             BASE REG: LINE WORKAREA.\n         USING PCMDDSCT,R7             BASE REG: PCMD WORKAREA.         VPS80\n         L     R9,20(,R1)              CROSS MEMORY ATTR ADDR     JM01\n         USING XMADSECT,R9             ADDRESSABILITY TO XMAT     JM01\n         EJECT\n*=====================================================================*\n*        INSERT DATA ONLY IF PROCESSING A POSTSCRIPT OR               *\n*        HEWLETT-PACKARD PCL PRINTER                                  *\n*=====================================================================*\n*                                                                     *\n*        PRASEPI(2)='PS'  - DESIGNATES A POSTSCRIPT PRINTER           *\n*                                                                     *\n*        PRASEPI(3)='HPL' - DESIGNATES A HP PRINTER                   *\n*                                                                     *\n*        PRASEPI(3)='FAX' - DESIGNATES A FAX SERVER                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         CLC   =CL2'PS',PRASEPI        IS THIS A POSTSCRIPT PRINTER?\n         BE    PSPRTR                  YES, CONTINUE.\n         CLC   =CL3'HPL',PRASEPI       IS THIS AN HP LASER PRINTER?\n         BE    HPPRTR                  YES, CONTINUE.\n         CLC   =CL3'FAX',PRASEPI       IS THIS A FAX SERVER?\n         BE    FAXPRTR                 YES, CONTINUE.\n         B     UXITRC04                RETURN W/ RC=04.\n         EJECT\n*=====================================================================* VPS80\n*        POSTSCRIPT PRINTER (1ST 2 BYTES OF PRASEPI = 'PS')           * VPS80\n*=====================================================================* VPS80\n*                                                                     * VPS80\n*        THE FUNCTIONS PROVIDED BY THIS EXIT IN PREVIOUS RELEASES     * VPS80\n*        ARE NOW SUPPLIED BY THE FOLLOWING VPS PRINTER KEYWORDS:      * VPS80\n*                                                                     * VPS80\n*          PCMDACTN=(TRN,DEF)                     (VTAM)              * VPS80\n*            OR...  (NOTRN,DEF)                   (TCPIP LPD/SOK)     * VPS80\n*          PCMDDSNE=                              (NOT USED)          * VPS80\n*          PCMDDSNS=                              (NOT USED)          * VPS80\n*          PCMDEND=(FPS13266,FPS13266)                                * VPS80\n*          PCMDOPTS=00000000                      (DEFAULT)           * VPS80\n*          PCMDSEPE=                              (NOT USED)          * VPS80\n*          PCMDSEPS=                              (NOT USED)          * VPS80\n*          PCMDSTRT=(FPS13266,FPS13266,WRITER)                        * VPS80\n*                                                                     * VPS80\n*       TO SPECIFY THE TRANSPARENCY CHARACTER FOR VTAM DEVICES, SET   * VPS80\n*       THE 3RD SUBFIELD OF THE TRNCLASS KEYWORD.                     * VPS80\n*          TRNCLASS=(,C,35)                       (VTAM)              * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\n*                                                                     * VPS80\n*        START DATASET REQUEST:                                       * VPS80\n*                                                                     * VPS80\n*        THIS EXIT SETS RC=08 IF THE WRITER NAME = 'ZZZZZZZZZ' TO     * VPS80\n*        INDICATE THAT NO PRINTER COMMANDS SHOULD BE SENT BY VPS.     * VPS80\n*                                                                     * VPS80\n*        OTHERWISE, THIS EXIT SETS RC=04 TO INDICATE THAT THE EXIT    * VPS80\n*        HAS NO MORE DATA TO SEND AND THAT VPS SHOULD SEND THE        * VPS80\n*        COMMANDS AS SPECIFIED IN THE ABOVE KEYWORDS.                 * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\n*                                                                     * VPS80\n*        END DATASET REQUEST:                                         * VPS80\n*                                                                     * VPS80\n*        THIS EXIT SETS RC=08 IF THE WRITER NAME = 'ZZZZZZZZZ' TO     * VPS80\n*        INDICATE THAT NO PRINTER COMMANDS SHOULD BE SENT BY VPS.     * VPS80\n*                                                                     * VPS80\n*        OTHERWISE, THIS EXIT SETS RC=04 TO INDICATE THAT THE EXIT    * VPS80\n*        HAS NO MORE DATA TO SEND AND THAT VPS SHOULD SEND THE        * VPS80\n*        COMMANDS AS SPECIFIED IN THE ABOVE KEYWORDS.                 * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\nPSPRTR   DS    0H                      ********************************\n         CLI   PRALUTYP,$PRALU1        LU-1 DEVICE?                     VPS61087\n         BE    PS005                   YES, CONTINUE.                   VPS61087\n         CLI   PRALUTYP,$PRALU6        LU-6 DEVICE?                     VPS61087\n         BE    PS005                   YES, CONTINUE.                   VPS61087\n         CLI   PRALUTYP,$PRALUT        TCPIP DEVICE?                    VPS61087\n         BE    PS005                   YES, CONTINUE.                   VPS61087\n         B     UXITRC04                RETURN W/ RC=04.                 VPS61087\n         SPACE\n*---------------------------------------------------------------------* VPS61087\n*        ROUTE CONTROL BASED ON REQUEST CODE                          * VPS61087\n*---------------------------------------------------------------------* VPS61087\nPS005    DS    0H                      ********************************\n         B     PS010(R8)               TAKE APPROPRIATE ACTION.         VPS61087\nPS010    DS    0H                      ********************************\n         B     PSSTART                 0 - ADD DATA BEFORE DATASET.     VPS61087\n         B     PSEND                   4 - ADD DATA AFTER  DATASET.     VPS61087\n         B     CLEANUP                 8 - SEVERE ERROR DETECTED.       VPS61087\n         EJECT\n*---------------------------------------------------------------------* VPS80\n*                                                                     * VPS80\n*        START DATASET REQUEST                                        * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\n*        EXAMINE WRITER NAME FOR 'ZZZZZZZZ'                           * VPS80\n*---------------------------------------------------------------------* VPS80\nPSSTART  DS    0H                      ******************************** VPS80\n         CLC   DSAWTR,=CL8'ZZZZZZZZ'   WRITER = ZZZZZZZZ?               VPS80\n         BE    UXITRC08                YES, RETURN W/ RC=08.            VPS80\n         B     UXITRC04                RETURN W/ RC=04.                 VPS80\n         SPACE                                                          VPS80\n*---------------------------------------------------------------------* VPS80\n*                                                                     * VPS80\n*        END DATASET REQUEST                                          * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\n*        EXAMINE WRITER NAME FOR 'ZZZZZZZZ'                           * VPS80\n*---------------------------------------------------------------------* VPS80\nPSEND    DS    0H                      ******************************** VPS80\n         CLC   DSAWTR,=CL8'ZZZZZZZZ'   WRITER = ZZZZZZZZ?               VPS80\n         BE    UXITRC08                YES, RETURN W/ RC=08.            VPS80\n         B     UXITRC04                EXIT W/ RC=00.                   VPS80\n         EJECT\n*=====================================================================*\n*        HP PRINTER (1ST 3 BYTES OF PRASEPI = 'HPL')                  *\n*=====================================================================*\n*                                                                     * VPS80\n*        THE FUNCTIONS PROVIDED BY THIS EXIT IN PREVIOUS RELEASES     * VPS80\n*        ARE NOW SUPPLIED BY THE FOLLOWING VPS PRINTER KEYWORDS:      * VPS80\n*                                                                     * VPS80\n*          PCMDACTN=(TRN,DEF)                     (VTAM)              * VPS80\n*            OR...  (NOTRN,DEF)                   (TCPIP LPD OR SOK)  * VPS80\n*          PCMDEND=(SSTD,SSTD)                                        * VPS80\n*          PCMDDSNE=                              (NOT USED)          * VPS80\n*          PCMDDSNS=                              (NOT USED)          * VPS80\n*          PCMDOPTS=00000000                      (DEFAULT)           * VPS80\n*          PCMDSEPE=                              (NOT USED)          * VPS80\n*          PCMDSEPS=                              (NOT USED)          * VPS80\n*          PCMDSTRT=(SSTD,SSTD,WRITER)                                * VPS80\n*                                                                     * VPS80\n*       TO SPECIFY THE TRANSPARENCY CHARACTER FOR VTAM DEVICES, SET   * VPS80\n*       THE 3RD SUBFIELD OF THE TRNCLASS KEYWORD.                     * VPS80\n*          TRNCLASS=(,C,35)                       (VTAM)              * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\n*                                                                     * VPS80\n*        START DATASET REQUEST:                                       * VPS80\n*                                                                     * VPS80\n*        THIS EXIT SETS RC=08 IF THE WRITER NAME = 'ZZZZZZZZZ' TO     * VPS80\n*        INDICATE THAT NO PRINTER COMMANDS SHOULD BE SENT BY VPS.     * VPS80\n*                                                                     * VPS80\n*        IF THE WRITER NAME = BLANKS, THE NAME OF THE DEFAULT         * VPS80\n*        MODULE TO BE LOADED AND USED IS SET TO 'DSTD' FOR SYSOUT     * VPS80\n*        CLASS = 'D' AND LEFT AS THE DEFAULT FOR ALL OTHER SYSOUT     * VPS80\n*        CLASSES.  THE EXIT RETURNS WITH RC=04.                       * VPS80\n*                                                                     * VPS80\n*        OTHERWISE, THIS EXIT SETS RC=04 TO INDICATE THAT THE EXIT    * VPS80\n*        HAS NO MORE DATA TO SEND AND THAT VPS SHOULD SEND THE        * VPS80\n*        COMMANDS AS SPECIFIED IN THE ABOVE KEYWORDS.                 * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\n*                                                                     * VPS80\n*        END DATASET REQUEST:                                         * VPS80\n*                                                                     * VPS80\n*        THIS EXIT SETS RC=08 IF THE WRITER NAME = 'ZZZZZZZZZ' TO     * VPS80\n*        INDICATE THAT NO PRINTER COMMANDS SHOULD BE SENT BY VPS.     * VPS80\n*                                                                     * VPS80\n*        OTHERWISE, THIS EXIT SETS RC=04 TO INDICATE THAT THE EXIT    * VPS80\n*        HAS NO MORE DATA TO SEND AND THAT VPS SHOULD SEND THE        * VPS80\n*        COMMANDS AS SPECIFIED IN THE ABOVE KEYWORDS.                 * VPS80\n*                                                                     *\n*---------------------------------------------------------------------*\nHPPRTR   DS    0H                      ********************************\n         CLI   PRALUTYP,$PRALU1        LU-1 DEVICE?\n         BE    HP005                   YES, CONTINUE.\n         CLI   PRALUTYP,$PRALU6        LU-6 DEVICE?\n         BE    HP005                   YES, CONTINUE.\n         CLI   PRALUTYP,$PRALUT        TCPIP DEVICE?\n         BE    HP005                   YES, CONTINUE.\n         B     UXITRC04                RETURN W/ RC=04.\n         SPACE\n*---------------------------------------------------------------------*\n*        ROUTE CONTROL BASED ON REQUEST CODE                          *\n*---------------------------------------------------------------------*\nHP005    DS    0H                      ********************************\n         B     HP010(R8)               TAKE APPROPRIATE ACTION.\nHP010    DS    0H                      ********************************\n         B     HPSTART                 0 - ADD DATA BEFORE DATASET.\n         B     HPEND                   4 - ADD DATA AFTER  DATASET.\n         B     CLEANUP                 8 - SEVERE ERROR DETECTED.\n         EJECT\n*---------------------------------------------------------------------* VPS80\n*                                                                     * VPS80\n*        START DATASET REQUEST                                        * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\nHPSTART  DS    0H                      ******************************** VPS80\n         CLI   DSATYPE,$DSASTDP        NORMAL DATASET? (NON-SEPARATOR)  VPS80\n         BNE   UXITRC04                IF SEPARATOR, EXIT W/ RC=04.     VPS80\n         SPACE                                                          VPS80\n*---------------------------------------------------------------------* VPS80\n*        NORMAL DATASET                                               * VPS80\n*---------------------------------------------------------------------* VPS80\n         TM    DSASDTYP,$DAFPDS        AFPDS CONVERSION ACTIVE?         VPS80\n         BO    UXITRC04                YES, EXIT W/ RC=04.              VPS80\n         SPACE 1                                                  JM00\n*---------------------------------------------------------------- JM00*\n*        KEEP CHECK FOR \"WRITER=ZZZZZZZZ\" TO BYPASS ALL PCMDS.    JM00*\n*---------------------------------------------------------------- JM00*\n         SPACE 1                                                  JM00\n         CLC   DSAWTR,=CL8'ZZZZZZZZ'   WRITER = ZZZZZZZZ?               VPS80\n         BE    UXITRC08                YES, EXIT W/ RC=08; BYPASS PCMDS VPS80\n*---------------------------------------------------------------- JM00*\n*        IF THERE WAS A MODULE FAILED TO LOAD FROM THE ONE        JM00*\n*        SPECIFIED IN THE &WRITER FIELD, THEN JUST RETURN.        JM00*\n*---------------------------------------------------------------- JM00*\n         TM    PCMDFLG1,$PCMSLER       ERROR LOADING FORMAT MOD?  JM00  VPS80\n         BO    UXITRC04                YES, EXIT W/RC=04;         JM00  VPS80\n         SPACE 1                                                  JM00\n*---------------------------------------------------------------- JM00*\n*        CHECK THE \"PRTOPTNS\" FIELD FOR INFOPRINT DOCUMENTED      JM00*\n*        PARAMETERS AND CONVERT THEM INTO EQUIVALENT FORMNAME     JM00*\n*                                                                 JM00*\n*        IF \"HPLAND\" THEN FORM=SLXL   (132X66 LAND, SIMPLEX)  JM00JM01*\n*        IF \"HPPORT\" THEN FORM=SPXP   (85X60 PORT, SIMPLEX)   JM00JM01*\n*        IF \"DUPLEXLAND\" THEN FORM=DLXL (132X66 LAND, DUPLEX) JM00JM01*\n*        IF \"DUPLEXPORT\" THEN FORM=DPXP (132X66 PORT, DUPLEX) JM00JM01*\n*        IF \"HPLANDPL66\" THEN FORM=SLX6                       JM00JM01*\n*        IF \"HPPORTPL66\" THEN FORM=SPX6                       JM00JM01*\n*        IF \"BINARY\"     THEN FORM=SPXB                       JM00JM01*\n*        IF \"CLASSA\"     THEN FORM=SPXA                       JM00JM01*\n*        IF \"CLASSD\"     THEN FORM=SPXD                       JM00JM01*\n*---------------------------------------------------------------- JM01*\n         SPACE 1                                                  JM01\n         L     R15,XMAORAT             GET ADDRESS OF XMAT        JM01\n         USING ORADSECT,R15            ESTABLISH ADDRESSABILITY   JM01\n         TM    ORAKEY07,$ORAPTOP       IS PRTOPTNS SPECIFIED      JM01\n         BNO   JMCONT2                 IF SO, SKIP CHECKS.        JM01\n         CLI   ORAPTOP,C' '            IS IT BLANK OR LESS        JM01\n         BNH   JMCONT2                 IF SO, SKIP CHECKS.        JM01\n         SPACE 1                                                  JM01\n         LA    R1,OPMTAB               POINT TO THE TABLE         JM01\nJMLOOP   EQU   *                                                  JM01\n         CLI   0(R1),X'FF'             END OF TABLE?              JM01\n         BE    JMCONT2                 CONTINUE ON                JM01\n         CLC   ORAPTOP(16),8(R1)       COMPARE AGAINST TABLE      JM01\n         BE    JMCONT1                 MATCH                      JM01\n         LA    R1,24(,R1)              BUMP ALONG TABLE           JM01\n         B     JMLOOP                                             JM01\n         DROP  R15                     DROP ADDRESSABILITY        JM01\n         SPACE 1                                                  JM01\n* --------------------------------------------------------------- JM01*\n*        SINCE WE ARE CONVERTING FROM INFOPRINT TO VPS, THERE     JM01*\n*        NO 'BLDL' TO CHECK IF THE MODULE EXISTS.                 JM01*\n* --------------------------------------------------------------- JM01*\n         SPACE 1                                                  JM00\nJMCONT1  EQU   *                                                  JM00\n         MVC   PCMDSYNM(8),0(R1)       MOVE IN MODULE NAME        JM00\n         MVC   PCMDEYNM,=CL8'ZZZRESET' SET DYNAMIC END NAME       JM00\n         OI    PCMDFLG4,$PCMSDYN+$PCMEDYN  TURN ON DYN MOD FLAGS  JM00\n         NI    PCMDFLG4,255-($PCMSMOD+$PCMSSTG+$PCMEMOD+$PCMESTG) JM00\n         B     UXITRC04                EXIT W/ RC=04; SEND PMCDS  JM00\n         SPACE 1                                                  JM00\n* --------------------------------------------------------------- JM02*\n*        NEED TO CHECK THE WRITER FIELD FOR LEGACY CODING. IF IT  JM02*\n*        INDEED IS CODED, THEN WILL USE IT. IF FORM IS CODED, IT  JM02*\n*        WILL BE IGNORED.                                         JM02*\n*                                                                 JM02*\n*        BUT SINCE WE ARE CODING &WRITER IN THE PARAMETERS, THEN  JM02*\n*        THIS WOULD LOOK LIKE A NORMAL DATASET, WRITER=NON-BLANK  JM02*\n*        AND HAVE HAD A LOAD ERROR FOR WRITER NAME. SO FOR THE    JM02*\n*        DYNAMIC MODULE LOAD ERROR, JUST SEND RESET AT START.     JM02*\n*-----------------------------------------------------------------JM02*\n         SPACE 1                                                  JM02\nJMCONT2  EQU   *                                                  JM02\n         CLI   DSAWTR,C' '             ANY WRITER SPECIFIED       JM02\n         BNH   JMCONT3                 NO, SO LOOK AT FORM NAME   JM02\n         SPACE 1                                                  JM02\n         MVC   XMAUSER(8),DSAWTR       SAVE WRITER NAME USED      JM02\n         B     JMCONT3C                DO GETMAIN/BLDL/FREEMAIN   JM02\n         SPACE 1                                                  JM02\n* ----------------------------------------------------------------JM02*\n*        NOW WE GO LOOK AT FORM FIELD                             JM02*\n* ----------------------------------------------------------------JM02*\n         SPACE 1                                                  JM02\nJMCONT3  EQU   *                                                  JM02\n         CLI   DSAFORM,C' '            ANY FORM SPECIFIED         JM02\n         BNH   JMCONT9                 NO, SO LOOK AT FORM NAME   JM02\n         CLC   DSAFORM(8),=CL8'STD '   ASKING FOR DEFAULT         JM02\n         BE    JMCONT9                                            JM02\n         MVC   XMAUSER(8),DSAFORM      GET THE FORM NAME USED     JM02\n         SPACE 1                                                  JM02\n* --------------------------------------------------------------- JM02*\n*        NEED TO DO GETMAIN AND IT MUST BE BELOW THE 16M LINE     JM02*\n*        FOR BLDL. ALSO GET SOME STORAGE FOR A POSSIBLE WTO.      JM02*\n* --------------------------------------------------------------- JM02*\n         SPACE 1                                                  JM02\nJMCONT3C EQU   *                                                  JM02\n         $$VPSERV REQUEST=GETMAIN,                                JM02 X\n               LV=UE14DSLN,            LENGTH TO GET              JM02 X\n               SYAT=YES,               SYAT IS AVAILABLE          JM02 X\n               LOC=BELOW,              BELOW 16M                  JM02 X\n               MF=S                                               JM02\n         LR    R11,R1                  SAVE ADDRESS               JM02\n         USING UE14DSCT,R11            ESTAB WORKAREA ADDRESSABILITY.\n         SPACE\n         MVC   UE14ID,=CL20'OPMSUX14 WORKAREA' SET EYE-CATCHERJM02JM00\n         SPACE 1                                                  JM02\n* --------------------------------------------------------------- JM02*\n*        USER IS ASKING FOR SOME FORMAT MODULE. CHECK TO SEE IF   JM02*\n*        IT ACTUALLY EXISTS. IF IT DOES, GIVE IT TO HIM/HER. IF   JM02*\n*        NOT THEN SUBSTITUE \"SSTD\" (UNTIL WE CAN WIRE IN A WTO).  JM02*\n*                                                                 JM02*\n*        *--*--*--------*---*-*-*-*-------- .......--*--- ... --  JM02*\n*        *FF*LL* NAME1  *TTR*K*Z*C*  USER DATA       * NAME2      JM02*\n*        *--*--*--------*---*-*-*-*-------- .......--*--- ... --  JM02*\n*                                                                 JM02*\n*        WHERE:    FF        BINARY VALUE, TOTAL ENTRIES IN LIST  JM02*\n*                  LL        BINARY VALUE OF LENGTH, IN BYTES, OF JM02*\n*                            EACH ENTRY IN THE LIST (EVEN NUMBER).JM02*\n*                            MINIMUM LENGTH IS 12.                JM02*\n*                  NAME1     MEMBER NAME OR ALIAS. 8 BYTES WITH   JM02*\n*                            PADDED BLANKS.                       JM02*\n*                  TT        RELATIVE TRK NUMBER FOR BEGINNING OF JM02*\n*                            THE DATA SET MEMBER.                 JM02*\n*                  R         RELATIVE RECORD NUMBER ON \"TT\" TRACK JM02*\n*                  K         CONCATENATION NUMBER OF DATA SET.    JM02*\n*                  Z         WHERE SYSTEM FOUND DIRECTORY ENTRY   JM02*\n*                            0     - PRIVATE LIBRARY              JM02*\n*                            1     - LINK LIBRARY                 JM02*\n*                            2     - JOB, TASK, OR STEPLIB        JM02*\n*                            3-255 - JOB, TASK, OR STEPLIB OF PAR-JM02*\n*                                    ENT TASK \"N\", WHERE N = Z-2  JM02*\n*                  C         INDICATES TYPE OF MEMBER OR ALIAS    JM02*\n*                            (SEE MANUAL)                         JM02*\n*                                                                 JM02*\n*                  USERDATA  USER DATA FROM DIRECTORY ENTRY.      JM02*\n*                                                                 JM02*\n*                                                                 JM02*\n*        RESULTS:  R15  EQ   0    IMPLIES FOUND                   JM02*\n*                  R15  NE   0    NOT FOUND                       JM02*\n* --------------------------------------------------------------- JM02*\n         SPACE 1                                                  JM02\n         XC    JMBLDL(18),JMBLDL       CLEAR OUT FIELD            JM02\n         MVI   JMNUM+1,1               INDICATE ONE TO FIND       JM02\n         MVI   JMLEN+1,14              RETURN 14 BYTES OF DATA    JM02\n         MVC   JMNAME(8),XMAUSER       RETURN 14 BYTES OF DATA    JM02\n         LA    R0,JMBLDL               POINT TO LIST BELOW 16M    JM02\n         BLDL  0,(0)                   IND STEPLIB OR LINKLIB     JM02\n         LTR   R15,R15                 SUCCESSFUL?                JM02\n         BZ    JMCONT3O                GOOD NEWS                  JM02\n         SPACE 1                                                  JM02\n* --------------------------------------------------------------- JM02*\n*        MODULE NAME IS INVALID AND NEEDS TO BE REPORTED.         JM02*\n* --------------------------------------------------------------- JM02*\n         SPACE 1                                                  JM02\n         LA    R14,UE14WTAT            ADDR OF WTAT WORKAREA      JM02\n         USING WTADSECT,R14            EST WTAT ADDRESSABILITY    JM02\n         OI    WTATYPE,WTATNOR         SET NORMAL MSG TYPE        JM02\n         MVC   WTAMSGID,=AL2(9999)     SET MESSAGE TO 9999        JM02\n         MVI   WTATEXT,C' '            MOVE IN BLANK              JM02\n         MVC   WTATEXT+1(L'WTATEXT-1),WTATEXT  CLEAR MSG AREA     JM02\n         SPACE 1                                                  JM02\n         LA    R1,L'WTOTEXT1           LOAD LENGTH OF MSG TEXT    JM02\n         STCM  R1,B'0011',WTALGTH      SET LENGTH OF MSG TEXT     JM02\n         MVC   WTATEXT(L'WTOTEXT1),WTOTEXT1 INITIALIZE MSG TEXT   JM02\n         SPACE 1                                                  JM02\n         MVC   WTATEXT+09(8),SYASTCNM  SET STC NAME               JM02\n         MVC   WTATEXT+18(8),PRAMNAME  SET VPSLIB NAME            JM02\n         MVC   WTATEXT+27(8),DSAJOBNM  SET JOBNAME                JM02\n         MVC   WTATEXT+36(8),DSAJOBID  SET JOBID                  JM02\n         MVC   WTATEXT+45(8),DSADEST   SET DESTINATION            JM02\n         MVC   WTATEXT+74(8),XMAUSER   SET MODULE NAME            JM02\n         DROP  R14                     DROP WTAT ADDRESSABILITY   JM02\n         SPACE 1                                                  JM02\n         $$VPSERV REQUEST=WTO,                                    JM02 X\n               WTOAREA=UE14WTAT,                                  JM02 X\n               SYAT=YES,                                          JM02 X\n               MF=(E,UE14SERV)                                    JM02\n         SPACE 1                                                  JM02\n         MVC   XMAUSER(8),=CL8'SLGA'   LOAD A GOOD NAME           JM02\n         SPACE 1                                                  JM02\n* --------------------------------------------------------------- JM02*\n*        GOOD NEWS, THE MODULE IS VALID AND ALL WE NEED TO DO     JM02*\n*        IS SPECIFY THE NAME, DO A FREEMAIN, AND RETURN WITH THE  JM02*\n*        PROPER FLAGS SET.                                        JM02*\n* --------------------------------------------------------------- JM02*\nJMCONT3O EQU   *                                                  JM02\n         $$VPSERV REQUEST=FREEMAIN,                               JM02 X\n               A=(R11),                                           JM02 X\n               LV=UE14DSLN,                                       JM02 X\n               SYAT=YES,               SYAT IS AVAILABLE          JM02 X\n               MF=S                                               JM02\n         DROP  R11                                                JM02\n         SPACE 1                                                  JM02\n         MVC   PCMDSYNM(8),XMAUSER     SET START MODULE NAME      JM00\n         MVC   PCMDEYNM(8),=CL8'ZZZRESET' SET DYN END NAME.       JM00\n         OI    PCMDFLG4,$PCMSDYN+$PCMEDYN ON DYN MODULE FLAGS     JM00\n         NI    PCMDFLG4,255-($PCMSMOD+$PCMSSTG+$PCMEMOD+$PCMESTG) JM00\n         SPACE 1                                                  JM00\n*-----------------------------------------------------------------JM00*\n*        IN THIS CASE, THERE ARE NO OVERRIDES CHANGING PRTOPTNS   JM00\n*        OR VALUE CODED IN \"WRITER\". THUS WITH NO OVERRIDE USING  JM00\n*        FORM NAME, THEN WE WILL TAKE THE VALUES CODED IN         JM00\n*        PCMDSTRT AND PCMDEND.                                    JM00\n*-----------------------------------------------------------------JM00*\n         SPACE 1                                                  JM00\nJMCONT9  EQU   *                                                  JM00\n         XC    XMAUSER(08),XMAUSER     CLEAR LIST                 JM02\n         DROP  R9                                                 JM00\n         B     UXITRC04                EXIT W/ RC=04; SEND PCMD   JM00\n         SPACE 1                                                  JM00\n*-----------------------------------------------------------------JM00*\n*        SOME DEAD CODE FOLLOWS.                                  JM00\n*-----------------------------------------------------------------JM00*\n         SPACE 1                                                  JM00\n         CLI   DSAWTR,C' '             ANY WRITER NAME SPECIFIED?       VPS80\n         BH    HPS005                  YES, CHECK FOR LOAD ERROR.       VPS80\n         CLI   DSACLS,C'D'             SYSOUT CLASS = D?                VPS80\n         BE    HPS010                  YES, SET MODULE NAME.            VPS80\n         B     UXITRC04                EXIT W/ RC=04; SEND PMCDS.       VPS80\n         SPACE                                                          VPS80\n*---------------------------------------------------------------------* VPS80\n*        NORMAL DATASET, WRITER=NON-BLANK, LOAD ERROR FOR WRITER NAME * VPS80\n*        IF DYNAMIC MODULE LOAD ERROR, JUST SEND RESET AT START       * VPS80\n*---------------------------------------------------------------------* VPS80\nHPS005   DS    0H                      ******************************** VPS80\n         TM    PCMDFLG1,$PCMSLER       ERROR LOADING FORMAT MODULE?     VPS80\n         BZ    UXITRC04                NO, EXIT W/ RC=04; SEND DEFAULT. VPS80\n         MVC   PCMDSYNM,=CL8'ZZZRESET' SET DYNAMIC START NAME ZZZRESET. VPS80\n         OI    PCMDFLG4,$PCMSDYN       TURN ON DYNAMIC START MODULE FLG VPS80\n         NI    PCMDFLG4,255-($PCMSMOD+$PCMSSTG)  RESET OTHER START FLGS VPS80\n         NI    PCMDFLG4,255-($PCMEMOD+$PCMESTG+$PCMEDYN) RESET END FLGS VPS80\n         B     UXITRC04                EXIT W/ RC=04; SEND PMCDS.       VPS80\n         SPACE                                                          VPS80\n*---------------------------------------------------------------------* VPS80\n*        NORMAL DATASET, WRITER=BLANKS, CLASS=D                       * VPS80\n*        SET BEGIN COMMAND MODULE NAME TO DSTD                        * VPS80\n*        SET END   COMMAND MODULE NAME TO ZZZRESET                    * VPS80\n*        SET FLAGS TO SEND DYNAMIC MODULE AT BEGIN & END              * VPS80\n*        RESET FLAGS FOR DEFAULT MODULE OR STRING AT BEGIN OR END     * VPS80\n*---------------------------------------------------------------------* VPS80\nHPS010   DS    0H                      ******************************** VPS80\n         MVC   PCMDSYNM,=CL8'DSTD'     SET DYNAMIC START NAME OF DSTD.  VPS80\n         MVC   PCMDEYNM,=CL8'ZZZRESET' SET DYNAMIC END NAME OF ZZZRESET VPS80\n         OI    PCMDFLG4,$PCMSDYN+$PCMEDYN  TURN ON DYNAMIC MODULE FLAGS VPS80\n         NI    PCMDFLG4,255-($PCMSMOD+$PCMSSTG+$PCMEMOD+$PCMESTG)       VPS80\n         B     UXITRC04                AND EXIT W/ RC=04; SEND PMCDS.   VPS80\n         EJECT                                                          VPS80\n*---------------------------------------------------------------------* VPS80\n*                                                                     * VPS80\n*        END DATASET REQUEST                                          * VPS80\n*                                                                     * VPS80\n*---------------------------------------------------------------------* VPS80\nHPEND    DS    0H                      ******************************** VPS80\n         CLI   DSATYPE,$DSASTDP        NORMAL DATASET? (NON-SEPARATOR)  VPS80\n         BNE   UXITRC04                IF SEPARATOR, EXIT W/ RC=04.     VPS80\n         TM    DSASDTYP,$DAFPDS        AFPDS CONVERSION ACTIVE?         VPS80\n         BO    UXITRC04                YES, EXIT W/RC = 04.             VPS80\n         CLC   DSAWTR,=CL8'ZZZZZZZZ'   WRITER = ZZZZZZZZ?               VPS80\n         BE    UXITRC08                YES, RETURN W/ RC=08.            VPS80\n         B     UXITRC04                EXIT WITH RC=04.                 VPS80\n         EJECT\n*=====================================================================*\n*                                                                     *\n*        FAX SERVER (1ST 3 BYTES OF PRASEPI = 'FAX')                  *\n*                                                                     *\n*=====================================================================*\n*                                                                     *\n*      REGISTER USE IN THIS SECTION:                                  *\n*                                                                     *\n*      DURING EXECUTION:                                              *\n*      R0-R1 ==>  VOLATILE.                                           *\n*         R2 ==>  SYSTEM  ATTRIBUTE BASE REGISTER.                    *\n*         R3 ==>  TWO WORD WORKAREA.                                  *\n*         R4 ==>  PRINTER ATTRIBUTE BASE REGISTER.                    *\n*         R5 ==>  DATASET ATTRIBUTE BASE REGISTER.                    *\n*         R6 ==>  LINE WORKAREA     BASE REGISTER.                    *\n*         R7 ==>  FAXC WORKAREA     BASE REGISTER.                    * VPS80\n*         R8 ==>  REQUEST CODE.                                       *\n*         R9 ==>  FAXR WORKAREA IN FAX CODE                           *\n*        R10 ==>  END OF DATA IN FCL WORK AREA ADDRESS.               *\n*        R11 ==>  FAX WORKAREA BASE REGISTER.                         *\n*        R12 ==>  PROGRAM BASE REGISTER.                              *\n*        R13 ==>  ADDRESS OF CALLERS SAVEAREA.                        *\n*    R14-R15 ==>  VOLATILE.                                           *\n*                                                                     *\n*=====================================================================*\n*        IF WE'RE DONE ADDING DATA, THE 2ND 4 BYTES OF THE 2 WORD     *\n*        USER AREA WILL HAVE BEEN SET TO A(-1).  IF IT IS SET, THEN   *\n*        WE'LL CLEAR IT AND EXIT WITH RC=04.                          *\n*---------------------------------------------------------------------*\nFAXPRTR  DS    0H                      ********************************\n         DROP  R7                      KILL PCMD ADDRESSABILITY.\n         MVI   LINELNF,X'00'           RESET LINE FLAG 1.\n         MVI   LINELNF2,X'00'          RESET LINE FLAG 2.\n         XC    LINELNL,LINELNL         RESET LINE LENGTH.\n         SPACE\n         LA    R0,LINELNC              LOAD ADDRESS OF LINE AREA.\n         XR    R1,R1                   CLEAR REGISTER TO INSERT...\n         ICM   R1,B'0011',LINELNLM        MAXIMUM LINE AREA LENGTH.\n         XR    R14,R14                 SETUP REGS...\n         XR    R15,R15                    FOR MVCL INSTRUCTION.\n         MVCL  R0,R14                  INITIALIZE LINE WORKAREA.\n         SPACE\n*---------------------------------------------------------------------*\n*        ROUTE CONTROL BASED ON REQUEST CODE                          *\n*---------------------------------------------------------------------*\n         B     FAX005(R8)              TAKE APPROPRIATE ACTION.\nFAX005   DS    0H                      ********************************\n         B     FAX010                  0 - ADD DATA BEFORE DATASET.\n         B     FAX010                  4 - ADD DATA AFTER  DATASET.\n         B     CLEANUP                 8 - SEVERE ERROR DETECTED.\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        INSERT DATA AT BEGINNING OF DATASET                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        THIS DATA WILL BE PASSED TO VPS/PCL.  VPS/PCL WILL NOT       *\n*        PROCESS CARRIAGE CONTROL AND WILL NOT DO ANY TRANSLATION OR  *\n*        TRUNCATION.                                                  *\n*---------------------------------------------------------------------*\nFAX010   DS    0H                      ********************************\n         CLI   DSATYPE,$DSASTDP        NORMAL DATASET? (NON-SEPARATOR)\n         BNE   UXITRC04                NO, EXIT W/ RC=04.\n         TM    DSASCLS,$DSASTG         CLASS PROCESSED BY EXIT 22?\n         BZ    UXITRC04                NO, EXIT W/ RC=04.\n         SPACE\n*---------------------------------------------------------------------*\n*        LOCATE NEXT AVAILABLE FCL COMMAND                            *\n*---------------------------------------------------------------------*\n         ICM   R7,B'1111',0(R3)        LOAD FAXC BASE REGISTER.\n         BZ    FAX800                  FAXC UNAVAILABLE - EXIT W/ RC=16\n         USING FAXCDSCT,R7             ESTABLISH FAXC ADDRESSABILITY.\nFAX015   DS    0H                      ********************************\n         CLC   FAXCID,=CL4'FAXC'       FAXC VALID?\n         BNE   FAX805                  NO, INFORM USER & EXIT W/ RC=16.\n         LA    R9,FAXCDATA             LOAD FAXR BASE REGISTER.\n         USING FAXRDSCT,R9             ESTABLISH FAXR ADDRESSABILITY.\n         L     R10,FAXCTOT             ESTABLISH LOOP COUNTER.\nFAX020   DS    0H                      ********************************\n         TM    FAXRLNF1,$FX1PROC       ALREADY PROCESSED THIS LINE?\n         BO    FAX035                  YES, LOCATE NEXT LINE.\n         SPACE\n         LTR   R8,R8                   ADD DATA BEFORE THE DATASET?\n         BNZ   FAX025                  NO, CONTINUE.\n         TM    FAXRLNF1,$FX1BEG        INSERT RECORD AT START OF D/S?\n         BO    FAX030                  YES, CONTINUE.\n         B     UXITRC04                EXIT W/ RC=04.\n         SPACE\nFAX025   DS    0H                      ********************************\n         TM    FAXRLNF1,$FX1END        INSERT RECORD AT END OF D/S?\n         BZ    UXITRC04                NO, LOGIC ERROR - EXIT W/ RC=04.\n         EJECT\n*---------------------------------------------------------------------*\n*        RETURN FCL COMMAND TO VPS                                    *\n*---------------------------------------------------------------------*\nFAX030   DS    0H                      ********************************\n         OI    LINELNF,$LINECCP           BYPASS CCTL PROCESSING.\n         OI    LINELNF2,$LINEBXL+$LINEBTB BYPASS XLATE AND TRUNCATE.\n         LH    R15,FAXRLNL                INCREMENT...\n         LA    R15,1(R15)                    RECORD LENGTH...\n         STH   R15,LINELNL                      TO ALLOW FOR CC.\n         SPACE\n         LA    R0,LINELND              ADDRESS OF LINE AREA.\n         XR    R1,R1                   RESET R1.\n         ICM   R1,B'0011',FAXRLNL      LENGTH OF  FCL COMMAND.\n         LA    R14,FAXRLINE            ADDRESS OF FCL COMMAND.\n         LR    R15,R1                  LENGTH  OF FCL COMMAND.\n         MVCL  R0,R14                  COPY FCL TO LINE AREA.\n         OI    FAXRLNF1,$FX1PROC       SET THIS LINE BEEN PROCESSED.\n         B     UXITRC00                RETURN W/ RC=00.\n         SPACE\nFAX035   DS    0H                      ********************************\n         XR    R1,R1                   RESET R1.\n         ICM   R1,B'0011',FAXRLNL      LENGTH OF LINE.\n         LA    R9,FAXRPFXL(R1,R9)      BUMP TO NEXT FCL COMMAND.\n         BCT   R10,FAX020              CONTINUE SEARCHING.\n         SPACE\n         ICM   R7,B'1111',FAXCNEXT     ADDRESS OF NEXT FAXC BUFFER.\n         BNZ   FAX015                  CONTINUE SEARCHING.\n         SPACE\n         B     UXITRC04                EXIT W/ RC=04.\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ISSUE ERROR MESSAGE VIA WTO AND EXIT W/ RC=16                *\n*                                                                     *\n*---------------------------------------------------------------------*\nFAX800   DS    0H                      ********************************\n         LA    R10,FAXEMSG1            ADDRESS OF ERROR MESSAGE INFO.\n         B     FAX810                  CONTINUE.\nFAX805   DS    0H                      ********************************\n         LA    R10,FAXEMSG2            ADDRESS OF ERROR MESSAGE INFO.\n         B     FAX810                  CONTINUE.\n         SPACE\n*---------------------------------------------------------------------*\n*        OBTAIN WORKAREA                                              *\n*---------------------------------------------------------------------*\nFAX810   DS    0H                      ********************************\n         $$VPSERV REQUEST=GETMAIN,                                     X\n               LV=UE14DSLN,                                            X\n               SYAT=YES,                                               X\n               MF=S\n         SPACE\n         LR    R11,R1                  LOAD WORKAREA BASE REGISTER.\n         USING UE14DSCT,R11            ESTAB WORKAREA ADDRESSABILITY.\n         SPACE\n         MVC   UE14ID,=CL20'OPMSUX14 WORKAREA' SET EYE-CATCHER.    JM00\n         EJECT\n*---------------------------------------------------------------------*\n*        ISSUE WTO FOR ERROR MESSAGE                                  *\n*---------------------------------------------------------------------*\n         LA    R14,UE14WTAT            GET ADDRESS OF WTAT WORKAREA.\n         USING WTADSECT,R14            ESTABLISH WTAT ADDRESSABILITY.\n         OI    WTATYPE,WTATNOR         SET NORMAL MESSAGE TYPE.\n         MVC   WTAMSGID,=AL2(2014)     SET MESSAGE ID TO 2014.\n         MVI   WTATEXT,C' '            SET MESSAGE TEXT AREA...\n         MVC   WTATEXT+1(L'WTATEXT-1),WTATEXT   TO BLANKS.\n         SPACE\n         LA    R1,L'WTOTEXT2           LOAD LENGTH OF MESSAGE TEXT.\n         STCM  R1,B'0011',WTALGTH      SET LENGTH OF MESSAGE TEXT.\n         MVC   WTATEXT(L'WTOTEXT2),WTOTEXT2 INITIALIZE MESSAGE TEXT.\n         SPACE\n         MVC   WTATEXT+09(8),SYASTCNM  SET STC NAME.\n         MVC   WTATEXT+18(8),PRATNAME  SET LU  NAME.\n         XR    R1,R1                   RESET R1.\n         ICM   R1,B'0011',0(R10)       ERROR MESSAGE LENGTH.\n         BCTR  R1,R0                   DECREMENT FOR 'EX' INSTRUCTION.\n         EX    R1,MVCFAXER             MVC   WTATEXT+27(0),2(R10)\n         DROP  R14                     DROP WTAT ADDRESSABILITY.\n         SPACE\n         $$VPSERV REQUEST=WTO,                                         X\n               WTOAREA=UE14WTAT,                                       X\n               SYAT=YES,                                               X\n               MF=(E,UE14SERV)\n         SPACE\n*---------------------------------------------------------------------*\n*        FREE EXIT WORKAREA                                           *\n*---------------------------------------------------------------------*\n         $$VPSERV REQUEST=FREEMAIN,                                    X\n               A=(R11),                                                X\n               LV=UE14DSLN,                                            X\n               SYAT=YES,                                               X\n               MF=S\n         SPACE\n         DROP  R11                     KILL WORKAREA ADDRESSABILITY.\n         B     UXITRC16                EXIT W/ RC=16.\n         SPACE\n         DROP  R7                      KILL FAXC ADDRESSABILITY.\n         DROP  R9                      KILL FAXR ADDRESSABILITY.\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SEVERE ERROR DETECTED                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        CLEANUP AND EXIT W/ RC=04                                    *\n*---------------------------------------------------------------------*\nCLEANUP  DS    0H                      ********************************\n         CLC   =A(-1),0(R3)            'DATA ADDED' INDICATOR?\n         BE    CLUP999                 YES, EXIT.\n         CLC   =CL2'PS',PRASEPI        IS THIS A POSTSCRIPT PRINTER?\n         BE    CLUP005                 YES, CONTINUE.\n         CLC   =CL3'HPL',PRASEPI       IS THIS AN HP LASER PRINTER?\n         BE    CLUP005                 YES, CONTINUE.\n         B     CLUP999                 BYPASS DELETE AND FREEMAIN.\n         SPACE\nCLUP005  DS    0H                      ********************************\n         ICM   R11,B'1111',0(R3)       WORKAREA AVAILABLE?\n         BZ    CLUP999                 NO, EXIT.\n         SPACE\n*---------------------------------------------------------------------*\n*        FREE WORKAREA                                                *\n*---------------------------------------------------------------------*\n         $$VPSERV REQUEST=FREEMAIN,                                    X\n               A=(R11),                                                X\n               LV=UE14DSLN,                                            X\n               SYAT=YES,                                               X\n               MF=S\n         SPACE\nCLUP999  DS    0H                      ********************************\n         XC    0(4,R3),0(R3)           RESET USER WORDS.   ======>\n         B     UXITRC04                RETURN W/ RC=04.\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MODULE EXIT                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        EXIT WITH RC=00               SEND LINE DATA; RETURN TO EXIT *\n*---------------------------------------------------------------------*\nUXITRC00 DS    0H                      ********************************\n         LA    R15,RC00                SET RETURN CODE = 00.\n         B     UXIT999                 RETURN W/ RC=00.\n         SPACE\n*---------------------------------------------------------------------*\n*        EXIT WITH RC=04               NO MORE DATA; DO NOT RETURN    *\n*---------------------------------------------------------------------*\nUXITRC04 DS    0H                      ********************************\n         LA    R15,RC04                SET RETURN CODE = 04.\n         B     UXIT999                 RETURN W/ RC=04.\n         SPACE\n*---------------------------------------------------------------------*\n*        EXIT WITH RC=08               IGNORE PCMDS; DO NOT RETURN    *\n*---------------------------------------------------------------------*\nUXITRC08 DS    0H                      ********************************\n         LA    R15,RC08                SET RETURN CODE = 08.\n         B     UXIT999                 RETURN W/ RC=04.\n         SPACE\n*---------------------------------------------------------------------*\n*        EXIT WITH RC=16               SEVERE ERROR; DO NOT RETURN    *\n*---------------------------------------------------------------------*\nUXITRC16 DS    0H                      ********************************\n         LA    R15,RC16                SET RETURN CODE = 16.\n         B     UXIT999                 RETURN W/ RC=16.\n         SPACE\n*---------------------------------------------------------------------*\n*        RESTORE REGISTERS AND RETURN TO VPS                          *\n*---------------------------------------------------------------------*\nUXIT999  DS    0H                      ********************************\n         EREG  R0,R1                   RESTORE R0 AND R1.\n         PR    ,                       RESTORE STATUS AND RETURN.\n         TITLE 'EXECUTED INSTRUCTIONS'\n*---------------------------------------------------------------------*\n*        EXECUTED INSTRUCTIONS                                        *\n*---------------------------------------------------------------------*\n         USING WTADSECT,R14            ESTABLISH WTAT ADDRESSABILITY.\nMVCFAXER MVC   WTATEXT+27(0),2(R10)    INSERT ERROR MESSAGE TEXT.\n         DROP  R14                     KILL WTAT ADDRESSABILITY.\nMVCTLINE MVC   0(0,R14),0(R10)         COPY FORMAT CONTROLS TO PRT LINE\nTR2ASCII TR    0(0,R14),0(R9)          XLATE EBCDIC TO ASCII.\n         TITLE 'REGISTER EQUATES'\n*---------------------------------------------------------------------*\n*        REGISTER EQUATES                                             *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'LITERALS && CONSTANTS'\n*---------------------------------------------------------------------*\n*        LITERALS & CONSTANTS                                         *\n*---------------------------------------------------------------------*\n         LTORG\nRC00     EQU   00\nRC04     EQU   04\nRC08     EQU   08\nRC16     EQU   16\n         EJECT\n*---------------------------------------------------------------------*\n*        ERROR MESSAGES RELATED TO FAX SERVERS                        *\n*---------------------------------------------------------------------*\nFAXEMSG1 DS    0F\n         DC    AL2(FAXEMS1L)\n         DC    C'FAXC CONTROL BLOCK UNAVAILABLE'\nFAXEMS1L EQU   *-FAXEMSG1-2\n         SPACE\nFAXEMSG2 DS    0F\n         DC    AL2(FAXEMS2L)\n         DC    C'INVALID FAXC CONTROL BLOCK'\nFAXEMS2L EQU   *-FAXEMSG2-2\n         EJECT\n*---------------------------------------------------------------------*\n*        LOAD MACRO FOR LOADING FORMATS                               *\n*---------------------------------------------------------------------*\nHP2LL    LOAD  EPLOC=*,SF=L\nHP2LLL   EQU   *-HP2LL\n         SPACE\n*---------------------------------------------------------------------*\n*        WTO TEXT FOR LOAD FAILURE                                    *\n*---------------------------------------------------------------------*\nWTOTEXT1 DS    0CL124\n         DC    CL09'VPSX2014 '         USER EXIT MSG ID.\n         DC    CL09'         '         VPS STC NAME.\n         DC    CL09'         '         VPSLIB MEMBER NAME         JM02\n         DC    CL09'         '         JOBNAME.\n         DC    CL09'         '         JOBID.\n         DC    CL09'         '         CURRENT DESTINATION        JM02\n         DC    CL20' - LOAD FAILED FOR '\n         DC    CL09'         '         MODULE NAME.\n         DC    CL41' '                 RESERVE REMAINDER.\n         SPACE\n*---------------------------------------------------------------------*\n*        WTO TEXT FOR FAX SERVERS                                     *\n*---------------------------------------------------------------------*\nWTOTEXT2 DS    0CL124\n         DC    CL09'VPSX2014 '         USER EXIT MSG ID.\n         DC    CL09'         '         VPS STC NAME.\n         DC    CL09'         '         PRINTER NAME.\n         DC    CL106' '                FOR VARIABLE FAX ERROR TEXT.\n         EJECT\n*---------------------------------------------------------------------*\n*        EBCDIC TO ASCII TRANSLATE TABLE                              *\n*---------------------------------------------------------------------*\nHPCASCII DS    0F\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'200102030405060708090A0B0C0D0E0F'    00-0F\n         DC    X'101112131415161718191A1B1C1D1E1F'    10-1F\n         DC    X'202122232425261B28292A2B2C2D2E2F'    20-2F\n         DC    X'303132333435363738393A3B3C3D3E3F'    30-3F\n*                                     \u001b . < ( + 3\n         DC    X'20202020202020202020BF2E3C282B7C'    40-4F\n*                 &                   ! $ * ) ; *\n         DC    X'2620202020202020202021242A293B5E'    50-5F\n*                 - /                 \u00a6 , % _ > ?\n         DC    X'2D2F20202020202020207C2C255F3E3F'    60-6F\n*                                   ` : # @ ' =\n         DC    X'202020202020202020603A2340273D22'    70-7F\n*                   A B C D E F G H I   {     +       LOWER CASE\n         DC    X'20616263646566676869207B20202B20'    80-8F\n*                   J K L M N O P Q R   }             LOWER CASE\n         DC    X'206A6B6C6D6E6F707172207D20202020'    90-9F\n*                   ~ S T U V W X Y Z       X X       LOWER CASE\n         DC    X'207E737475767778797A2020205BFE20'    A0-AF\n*                                           X\n         DC    X'202020202020202020202020205D2020'    B0-BF\n*                 { A B C D E F G H I                 UPPER CASE\n         DC    X'7B414243444546474849202020202020'    C0-CF\n*                 } J K L M N O P Q R                 UPPER CASE\n         DC    X'7D4A4B4C4D4E4F505152202020202020'    D0-DF\n*                 \\   S T U V W X Y Z                 UPPER CASE\n         DC    X'5C20535455565758595A202020202020'    E0-EF\n*                 0 1 2 3 4 5 6 7 8 9 3\n         DC    X'303132333435363738397C2020202020'    F0-FF\n         SPACE 1                                                  JM00\n* ----------------------------------------------------------------JM00*\n*        TABLE OF INFOPRINT PSEUDO NAMES AND EQUIVALENT VPS NAMES.JM00*\n* ----------------------------------------------------------------JM00*\n         DS    0F                                                 JM00\nOPMTAB   EQU   *                                                  JM00\n         DC    CL8'SLXL    ',CL16'HPLAND          '               JM00\n         DC    CL8'SPXP    ',CL16'HPPORT          '               JM00\n         DC    CL8'DLXL    ',CL16'DUPLEXLAND      '               JM00\n         DC    CL8'DPXP    ',CL16'DUPLEXPORT      '               JM00\n         DC    CL8'SLX6    ',CL16'HPLANDPL66      '               JM00\n         DC    CL8'SPX6    ',CL16'HPPORTPL66      '               JM00\n         DC    CL8'SPXB    ',CL16'BINARY          '               JM00\n         DC    CL8'SPXA    ',CL16'CLASSA          '               JM00\n         DC    CL8'SPXD    ',CL16'CLASSD          '               JM00\n         DC    24X'FF'                                            JM00\n         TITLE 'WORKAREA DSECT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        V P S S U E 1 4   W O R K A R E A   D S E C T                *\n*                                                                     *\n*---------------------------------------------------------------------*\nUE14DSCT DSECT\nUE14ID   DC    CL20'OPMSUX14 WORKAREA' EYE-CATCHER.                JM00\n         SPACE\n         DS    0D                      ALIGN ON A DOUBLEWORD BOUNDARY.\nUE14WTAT DC    XL(WTADLGTH)'00'        VPSSWTAT - WTO WORKAREA.\n         SPACE\nUE14SERV $$VPSERV REQUEST=WTO,                                         X\n               WTOAREA=UE14WTAT,                                       X\n               SYAT=YES,                                               X\n               MF=L\n         DS    0H                                                 JM02\nJMBLDL   DS    0XL18                   LENGTH IS 18               JM02\nJMNUM    DS    H                       NUMBER OF ENTRIES          JM02\nJMLEN    DS    H                       LENGTH TO RETURN           JM02\nJMNAME   DS    CL8                     NAME OF MODULE             JM02\nJMTTR    DS    XL3                     TTR OF MODULE              JM02\nJMR      DS    XL1                     RELATIVE RECORD NUMBER     JM02\nJMK      DS    XL1                     CONCATENATION NUMBER       JM02\nJMZ      DS    XL1                     WHERE FOUND FLAG           JM02\n         DC    XL32'00'                RESERVED FOR FUTURE USE.\n         DS    0D                      ALIGN ON A DOUBLEWORD BOUNDARY.\nUE14DSLN EQU   *-UE14DSCT              LENGTH OF DSECT.\n         SPACE\n         VPSSDSAT                      DATASET ATTRIBUTE    DSECT.\n         VPSSFAXC                      FAX COMMAND LANGUAGE DSECT.\n         VPSSFAXR                      FAX RECORD WORKAREA  DSECT.\n         VPSSLINE                      LINE WORKAREA        DSECT\n         VPSSPCMD                      PRINTER CMD WORKAREA DSECT       VPS80\n         VPSSPRAT                      PRINTER ATTRIBUTE    DSECT.\n         VPSSSYAT                      SYSTEM  ATTRIBUTE    DSECT.\n         VPSSWTAT                      WTO     ATTRIBUTE    DSECT.\n         VPSSORAT                      OUTPUT STATEMENT     DSECT. JM00\n         VPSSXMAT                      CROSS MEMORY         DSECT. JM00\n         END   OPMSUX14                                            JM00\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT676/FILE676.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT676", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}