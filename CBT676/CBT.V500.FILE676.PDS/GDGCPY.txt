         TITLE ' GDGCPY V1.0'                                    JDM
* --------------------------------------------------------------------*
*                                                                JDM
*        JIM MARSHALL, SYSTEMS SOFTWARE "JANITOR"                JDM
*        OFFICE OF PERSONNEL MANAGEMENT                          JDM
*        WASHINGTON DC                                           JDM
*        202-606-1261 (0700-1530ET)                              JDM
*        JIM.MARSHALL@OPM.GOV                                    JDM
*                                                                JDM
*        THE PROGRAM WAS MODIFIED FROM COPYING ALL FILES IN A    JDM
*        GDG IN REVERSE ORDER TO ONLY COPYING THE OLDEST ONE.    JDM
*        THE INTENT OF THE "CHANEY SYSTEMS SUPPORT" CODE WAS TO  JDM
*        COPY THE GDG'S IN CHRONOLOGICAL ORDER. I NEEDED IT TO   JDM
*        ONLY RETRIEVE THE OLDEST ONE. THUS THE CODE WAS JUST    JDM
*        STOPPED AFTER THE OLDEST GDG WAS COPIED.                JDM
*                                                                JDM
*        MY APPLICATION FOLKS NEEDED TO HAVE THE ABILITY TO      JDM
*        DELETE THE FILE AFTER IT WAS PROCESSED. THUS I ADDED    JDM
*        A FILE "DDNAME=DELGDG", WHICH GETS AN IDCAMS DELETE     JDM
*        STATEMENT WRITTEN INTO IT (FOR LATER).                  JDM
*                                                                JDM
*        I ALSO CLEANED UP THE CODE AND PACKAGED ALL THE MACROS  JDM
*        INTO THE PROGRAM. MUCH THANKS TO "CHANEY SYSTEMS" WHERE JDM
*        EVER THEY ARE AND TO ERIC BIELEFIELD WHO DONATED THE    JDM
*        CODE.                                                   JDM
*                                                                JDM
*        THIS PROGRAM COPIES INPUT GENERATION DATASETS
*        IN REVERSE ORDER (OLDEST GDG FIRST) TO AN OUTPUT
*        DATASET(SYSUT2) ALLOWING A USER TO MAINTAIN DATA
*        IN CHRONOLOGICAL SEQUENCE.  THIS IS REQUIRED IF USING
*        RMF OR OTHER POST PROCESSOR SYSTEMS THAT REQUIRE SMF
*        DATA TO BE IN SEQUENCE (IT AVOIDS LARGE SORTS).
*
*        THE INPUT DATASET NAME (HIGH LEVEL OF THE GDG) IS PASSED
*        AS PARM INFORMATION AND IS USED TO "DYNAMICALLY" ALLOCATE
*        EACH GENERATION LEVEL OF THE GROUP.  ONCE THIS ROUTINE
*        IS COMPLETE, THE USER MAY SCRATCH AND UNCATALOG THE
*        GENERATION DATA SETS IF HE WISHES (THIS ROUTINE "WILL NOT"
*        SCRATCH OR UNCATALOG ANY DATASET).
*
*        SINCE THIS ROUTINE IS OF GENERAL PURPOSE, THE USER MUST
*        PROVIDE ALL DCB INFORMATION INFORMATION FOR BOTH SYSUT1
*        (IF NON-LABELED OR NSL) AND SYSUT2 BY CODING DCB ON THE
*        DD CARD.  IF THE INPUT GDG (PARM INFO) IS STANDARD LABEL,
*        IT NEED NOT BE DEFINED BY SYSUT1.  IN EITHER CASE, SYSUT1
*        WILL BE DYNAMICALLY DEALLOCATED AND UNCHANGED (SINCE PARM
*        INFO IS USED TO IDENTIFY THE INPUT FILE(GDG)).
*
*        NOTE THAT FOR VS/VBS FILES, "BFTEK=A" WILL AUTOMATICALLY
*        BE ADDED TO THE SYSUT1 DCB VIA AN OPEN EXIT.  THIS IS
*        DONE TO INSURE THAT A LOGICAL RECORD IS PASSED BY QSAM
*        AND ALLOWS THE OUTPUT TO BE REBLOCKED (IF SPECIFIED).
*
*
*  REQUIRED JCL:
*
*        <----------- STANDARD LABELED INPUT FILE ----------------->
*         //GDGCPY   EXEC PGM=GDGCPY,                            JDM1
*         //         PARM='STD.LABELED.GDG.PREFIX' JDM1
*         //DELGDG   DD -- TEMP OR PERM DISK FILE -              JDM2
*         //SYSUT2   DD DSN=OUTPUT.DSN(+1),............
*
*        <-----------    NON-LABELED INPUT FILE   ----------------->
*         //GDGCPY   EXEC PGM=GDGCPY,                            JDM1
*         //         PARM='NON.LABELED.GDG.PREFIX'               JDM1
*         //DELGDG   DD -- TEMP OR PERM DISK FILE -              JDM2
*         //SYSUT1   DD DCB=????
*         //SYSUT2   DD DSN=OUTPUT.DSN(+1).............
*
*  LINKAGE EDITOR ATTRIBUTES AND CONSIDERATIONS
*  ENTRY POINT: GDGCPY (NON-RENT)
* ---------------------------------------------------------------JDM--*
* CHANGE LOG:      JIM MARSHALL                                  JDM
*                                                                JDM
* 10/29/2003 - THE PROGRAM FROM ERIC BIELEFELD, MILWAUKEE, WI    JDM1
*        WAS OBTAINED FROM THE CBT FILE 482. THE PROGRAM IS MEANTJDM1
*        TO COPY ALL OF A GDG BUT IN FIFO ORDER VERSUS THE USUAL JDM1
*        WAY OF PROCESSING LIFO. NEEDED THE PROGRAM TO COPY ONLY JDM1
*        THE OLDEST FILE SO THE DATA CAN BE PROCESSED. ALL THE   JDM1
*        MACROS WERE PACKAGED INSTREAM TO MAKE THE PORTABILITY   JDM1
*        EASIER. THE INTENT IS TO REWRITE THE PROGRAM TO REMOVE  JDM1
*        HARDCODED OFFSETS AND TO ADD MORE DOCUMENTATION.        JDM1
*                                                                JDM1
* 11/12/2003 - CUSTOMER ALSO WANTED TO LATER DELETE THE GDG      JDM2
*        PROCESSED. SO WRITE TO THE DDNAME=DELGDG FILE, AN       JDM2
*        IDCAMS STATEMENT TO PASS ONTO A LATER STEP.             JDM2
*                                                                JDM2
**********************************************************************
*        PRINT NOGEN
         PRINT OFF
         EJECT
         MACRO
&LABEL   $PROLOG &LV=,&RENT=NO,&ERRCODE=,&C=,&SP=,&GM=,&LIST=NO
.*********************************************************************
.*
.*                                  CHANEY SYSTEMS SUPPORT, INC.
.*
.*       THIS MACRO PROVIDES STANDARD LINKAGE AND BASE REGISTER
.*       SPECIFICATIONS FOR MOST MEMBERS OF THE CSS TOOL KIT.
.*
.*       THE FIRST OPERERAND IS A POSITIONAL LIST OF REGISTERS
.*       TO BE USED AS BASE(S) FOR THE CSECT BEING DEFINED AND
.*       THE LABEL BECOMES THE CSECT NAME.
.*
.*       LV=NNN    SPECIFIES AN ADDITIONAL AMOUNT OF STORAGE TO BE
.*                 GOTTEN FOLLOWING THE DYNAMIC SAVE AREA.  THIS
.*                 ADDITIONAL STORAGE IS ADDRESSED VIA REG 13
.*                 (JUST FOLLOWING THE 18 FULLWORD SAVEAREA) AND
.*                 IS LIMITED TO 4023.
.*
.*       RENT=YES  IF USED, SPECIFIES THAT THE LENGTH OF ADDITIONAL
.*                 STORAGE IS DETERMINED BASED UPON THE SIZE OF
.*                 THE DYNAMIC STORAGE DEFINED BETWEEN TWO
.*                 LABELS:  "SAVEAREA" AND "WORKEND".  THE WORK
.*                 AREA IS ADDRESSABLE VIA REG 13 THE SAME AS THE
.*                 LV= OPERAND.  THE USER DEFINED CONSTANTS THAT
.*                 EXIST IN THE SOURCE ARE COPIED TO THE NEWLY
.*                 AQUIRED STORAGE AND ARE DIRECTLY ADDRESSABLE.
.*                 CAUTION: THE DYNAMIC AREA MUST BE DEFINED
.*                          "IMMEDIATELY PRIOR TO ANY DSECTS" AND
.*                          YOU MUST SPECIFY "LTORG" PRIOR TO THE
.*                          DEFINITION OF "SAVEAREA".
.*
.*                 NOTE: LV= AND RENT=YES ARE MUTUALLY EXCLUSIVE.
.*
.*       ERRCODE=  SPECIFIES THE RETURN CODE TO BE RETURNED TO
.*                 THE CALLER IN THE EVENT THAT THE CONDITIONAL
.*                 GETMAIN FAILS.  IF SPECIFIED, THE GETMAIN THAT
.*                 IS ISSUED WILL BE CONDITIONAL AND IF IT DOES
.*                 NOT COMPLETE NORMALLY, THIS ERROR CODE WILL
.*                 BE RETURNED TO THE CALLER.  IF ERRCODE IS NOT
.*                 SPECIFIED, THE GETMAIN THAT IS ISSUED WILL BE
.*                 UNCONDITIONAL WITH A RELATED 80A ABEND IN THE
.*                 EVENT OF FAILURE.
.*
.*       SP=       IS USED TO CAUSE AN MVS SPLEVEL MACRO TO BE
.*                 EXECUTED AS PART OF THE ASSEMBLY.  POSSIBLE
.*                 OPTIONS ARE "1" (370) OR "2" (XA).  IF NOT
.*                 SPECIFIED, THE SPLEVEL MACRO IS NOT USED.
.*
.*       C=        IS A MEANS OF PROVIDING ADDITIONAL DATA IN THE
.*                 EYECATCHER.  IF USED, THE DATA SPECIFIED MUST
.*                 BE ENCLOSED WITHIN QUOTES AND IS LIMITED TO
.*                 46 CHARACTERS.
.*
.*       GM=NO     IS NOT SUPPORTED BY THIS MACRO BUT IS ALLOWED
.*                 FOR COMPATIBILITY OF OLDER VERSIONS.
.*
.*       LIST=NO   SUPPRESSES GENERATION OF LISTINGS FOR $PROLOG,
.*                 $EPILOG AND $REGS WHEN EXPANSION IS ACTIVE
.*                 (PRINT GEN).
.*
.*       EXAMPLES:
.*
.*       SECTNAME $PROLOG ,        R12 IS BASE BY DEFAULT
.*       SECTNAME $PROLOG R12,R11  R12 IS 1ST BASE AND R11 IS SECOND
.*       SECTNAME $PROLOG R2,LV=8  R2 IS BASE AND AN ADDITIONAL
.*                                 8 BYTES ARE ADDED TO THE STORAGE
.*                                 GOTTEN FOR THE SAVEAREA.
.*
.*       SECTNAME $PROLOG RENT=YES R12 IS BASE AND THE ADDITIONAL
.*                                 STORAGE TO BE GOTTEN IS DEFINED
.*                                 BETWEEN "SAVEAREA" AND "WORKEND".
.*       SAVEAREA DS    9D         (SAVE AREA FOR $PROLOG GENERATION)
.*       MYFIELD1 DC    CL8'DATA1' (PROGRAM CONSTANTS)
.*       MYFIELD2 DC    CL8'DATA2' (PROGRAM CONSTANTS)
.*       WORKEND  EQU   *          (END OF DYNAMIC WORK AREA)
.*
.*********************************************************************
         GBLA  &EPILOG             DEFINE GLOBAL FOR $EPILOG
         GBLB  &REGS,&LSAVE        DEFINE GLOBALS FOR $REGS/$EPILOG
         LCLA  &AA,&AB,&BUMP,&X    DEFINE LOCAL VARIABLES
         LCLC  &GMT,&BASE,&LISTOPT DEFINE LOCAL VARIABLES
&X       SETA  &SYSNDX             SET LABEL CONSTANT
&EPILOG  SETA  0                   RESET LV= GLOBAL
&BUMP    SETA  4096                SET FOR BASE REG BUMP
&LSAVE   SETB  0                   RESET RENT GLOBAL FOR $EPILOG
&GMT     SETC  'RU'                SET UNCONDITIONAL GETMAIN
         AIF   ('&LIST' EQ 'YES').LIST1
         PUSH PRINT
         PRINT OFF
.LIST1   ANOP
&LABEL   CSECT
         AIF   (T'&SP EQ 'O').GO1  IF NO SPLEVEL REQUIRED
         SPLEVEL SET=&SP           ISSUE USER REQUESTED SPLEVEL MACRO
.GO1     ANOP
         USING *,R15               TEMPORARY BASE
         B     $&X.A               BRANCH AROUND CONSTANTS
         DC    CL8'&LABEL'         PROVIDE EYECATCHER
         AIF   (T'&C EQ 'O').GO2   COMMENTS ADDITION?
         DC    CL46&C
.GO2     ANOP
         DC    C'&SYSDATE @ &SYSTIME' DATE/TIME STAMP OBJECT
         AIF   (T'&LV   EQ 'O').GO3 IF LV= NOT SPECIFIED
         AIF   ('&RENT' NE 'YES').GO3 RENT NOT ALSO SPECIFIED
         MNOTE 12,'$PROLOG - RENT=YES AND LV=&LV MUTUALLY EXCLUSIVE'
         MEXIT
.GO3     AIF   ('&RENT' EQ 'YES').GO4   RENT=YES SPECIFIED
         AIF   (T'&LV   NE 'O').GO4   LV= SPECIFIED
&LSAVE   SETB  1                   SET NORENT GLOBAL FOR $EPILOG
$AVE&X   DC    18F'0'              DEFINED SAVE AREA
.GO4     ANOP
         AIF   (T'&LABEL NE 'O').GO5 INSURE CSECT NAME PROVIDED
         MNOTE 8,'$PROLOG - CSECT NAME NOT SUPPLIED'
.GO5     ANOP
$&X.A    STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS
&BASE    SETC  'R12'               ASSUME A BASE REGISTER
         AIF   (N'&SYSLIST EQ 0).GO6 USE DEFAULT IF NOT SPECIFIED
&BASE    SETC  '&SYSLIST(1)'       SET THE SPECIFIED BASE REGISTER
.GO6     ANOP
         LR    &BASE,R15           SET FIRST BASE REGISTER
         DROP  R15                 FREE THE TEMPORARY BASE
         USING &LABEL,&BASE        INFORM ASSEMBLER
         AIF   (N'&SYSLIST EQ 0).GO7
&AA      SETA  2                   NUMBER TO DEFINE +1
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).GO7
&AB      SETA  &AA-1               NUMBER OF LAST BASE REG DEFINED
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB)) SET NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA)) SET NEXT BASE REG
         USING &LABEL+&BUMP,&SYSLIST(&AA) INFORM THE ASSEMBLER
&BUMP    SETA  &BUMP+4096          BUMP INDEX
&AA      SETA  &AA+1               BUMP CONTROL COUNT
         AGO   .LOOP
.GO7     AIF   (T'&ERRCODE EQ 'O').GO8 IF ERROR CODE NOT SPECIFIED
&GMT     SETC  'RC'                ERROR CODE WAS SPECIFIED
.GO8     AIF   (T'&LV   NE 'O').GO10 LV= SPECIFIED, DO GETMAIN
         AIF   ('&RENT' EQ 'YES').GO12 RENT SPECIFIED, DO GETMAIN
         AIF   (T'&ERRCODE EQ 'O').GO9 IF ERROR CODE NOT SPECIFIED
      MNOTE 8,'$PROLOG - ERRCODE=&ERRCODE INVALID WITHOUT RENT=YES/LV='
.GO9     ANOP
$&X.B    LA    R2,$AVE&X           ADDRESS OF SAVE AREA
         AGO   .COMMON
.GO10    ANOP
&EPILOG  SETA  &LV+72              SET SIZE FOR $EPILOG FREEMAIN
         LA    R0,&LV+72           SET SIZE FOR GETMAIN
         GETMAIN &GMT,LV=(0)       GET STORAGE
         AIF   (T'&ERRCODE EQ 'O').GO11 IF UNCONDITIONAL
         LTR   R15,R15             STORAGE GOTTEN?
         BZ    $&X.C               YES, CONTINUE
         LA    R15,&ERRCODE        SET SPECIFIED ERROR CODE
         ST    R15,16(R13)         INTO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         BR    R14                 AND RETURN
$&X.C    DS    0H
.GO11    ANOP
         LR    R2,R1               SAVE THE GOTTEN STORAGE ADDRESS
         LR    R14,R2               MVCL - TARGET ADDR
         LA    R15,&LV+72           MVCL - TARGET SIZE
         SR    R0,R0                MVCL - SOURCE ADDR (NONE)
         SR    R1,R1                MVCL - SOURCE SIZE (NONE)
         MVCL  R14,R0              ZERO GOTTEN STORAGE
         AGO   .COMMON
.GO12    ANOP
$&X.B    GETMAIN &GMT,LV=WORKEND-SAVEAREA GET THE SAVE AREA STORAGE
         AIF   (T'&ERRCODE EQ 'O').GO13 IF UNCONDITIONAL
         LTR   R15,R15             STORAGE GOTTEN?
         BZ    $&X.C               YES, CONTINUE
         LA    R15,&ERRCODE        SET SPECIFIED ERROR CODE
         ST    R15,16(R13)         INTO SAVE AREA
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         BR    R14                 AND RETURN
$&X.C    DS    0H
.GO13    ANOP
         LR    R2,R1               SAVE THE GOTTEN STORAGE ADDRESS
         LR    R14,R2               MVCL - TARGET ADDR
         LA    R15,WORKEND-SAVEAREA MVCL - TARGET SIZE
         LA    R0,SAVEAREA          MVCL - SOURCE ADDR
         LR    R1,R15               MVCL - SOURCE SIZE
         MVCL  R14,R0              COPY TO WORKING STORAGE
         USING SAVEAREA,R13        PROVIDE ADDRESSABILITY
.COMMON  ANOP
         LR    R14,R13             COPY OLD SAVE AREA ADDRESS
         LR    R13,R2              SET NEW SAVEAREA ADDRESS
         ST    R14,4(R13)          CHAIN SAVEAREA - BACKWARD
         ST    R13,8(R14)          CHAIN SAVEAREA - FORWARD
         LM    R15,R2,16(R14)      RESTORE ENTRY REGISTERS
         SR    R14,R14             RESET RETURN ADDRESS
         AIF   (&REGS).SKIPREG
&LISTOPT SETC  'LIST=&LIST'
         $REGS &LISTOPT            DEFINE STANDARD REG EQUATES
.SKIPREG AIF   ('&LIST' EQ 'YES').MEXIT
         POP  PRINT
.MEXIT   ANOP
         MEND
         MACRO
&LABEL   $EPILOG &RETCODE,&LIST=NO
.*********************************************************************
.*                                  CHANEY SYSTEMS SUPPORT, INC.
.*
.*       THIS MACRO PROVIDES STANDARD DE-LINKAGE CONVENTIONS FOR
.*       MOST CSS TOOL KIT MEMBERS.
.*********************************************************************
         GBLA  &EPILOG
         GBLB  &LSAVE
         AIF   ('&LIST' EQ 'YES').LIST1
         PUSH  PRINT
         PRINT ON
.LIST1   ANOP
&LABEL   DS    0H
         AIF   (&LSAVE).GO3
         AIF   (&EPILOG EQ 0).GO1
         LA    R0,&EPILOG          GET SAVEAREA LENGTH
         AGO   .GO2
.GO1     LA    R0,WORKEND-SAVEAREA GET SAVEAREA LENGTH
.GO2     LR    R1,R13              GET SAVEAREA ADDRESS FOR FREEMAIN
.GO3     ANOP
         L     R13,4(R13)          GET BACK CHAIN POINTER
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         AIF   (&LSAVE).GO4
         FREEMAIN RU,LV=(0),A=(1)  FREE SAVEAREA
.GO4     ANOP
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RETCODE EQ 'O').GO5
         LA    R15,&RETCODE        SET RETURN CODE
.GO5     ANOP
         BR    R14                 RETURN TO CALLER
         AIF   ('&LIST' EQ 'YES').MEXIT
         POP   PRINT
.MEXIT   ANOP
         MEND
         MACRO
         $REGS &LIST=NO
.*********************************************************************
.*                                  CHANEY SYSTEMS SUPPORT, INC.
.*
.*       THIS MACRO PROVIDES STANDARD BASE REGISTER EQUATES FOR
.*       ALL "CSS" SUPPORT ROUTINES.
.*********************************************************************
         GBLB  &REGS
         AIF   (&REGS).MEXIT
&REGS    SETB  1
         AIF   ('&LIST' NE 'YES').LIST1
         PUSH  PRINT               SAVE CURRENT PRINT SETTINGS
         PRINT OFF                 TEMPORARILY TURN OFF PRINT
.LIST1   ANOP
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         AIF   ('&LIST' NE 'YES').MEXIT
         POP   PRINT               RESTORE CURRENT PRINT SETTINGS
.MEXIT   ANOP
         MEND
         PRINT ON
*---------------------------------------------------------------------*
*        INITIALIZATION AND DCB/JFCB/DSCB MERGE
*---------------------------------------------------------------------*
GDGCOPY  $PROLOG R12,LIST=YES     LINKAGE CONVENTIONS
ENTRY010 EQU   *
         L     R1,0(R1)           GET PARM POINTER
         LH    R2,0(R1)           GET PARM SIZE
         CH    R2,=H'0'           ANY PARM?
         BE    RETURN             NO, RETURN TO CALLER
         CH    R2,=H'35'          VALID SIZE?
         BH    RETURN             NO, RETURN TO CALLER
         LA    R3,CAMDSN(R2)      GET OFFSET TO GDG SUFFIX
         MVC   0(3,R3),=C'(0)'    START WITH CURRENT GENERATION
         ST    R3,GDGADDR         SAVE ADDRESS OF GENERATION LEVEL
         BCTR  R2,0               DECREMENT FOR EXECUTE
         EX    R2,PARMMOVE        MOVE DSNAME TO CAMLIST
         L     R1,16              GET CVT POINTER
         L     R1,0(R1)           OLD/NEW TCB POINTER
         L     R1,4(R1)           OUR TCB POINTER
         L     R1,12(R1)          OUR TIOT POINTER
         LA    R1,24(R1)          ADDRESS OF 1ST DD ENTRY
         SR    R15,R15            CLEAR FOR ICM
AAA010   EQU   *
         ICM   R15,1,0(R1)        GET SIZE OF ENTRY
         BZ    ENTRY020           NOT FOUND, CONTINUE
         CLC   4(8,R1),=CL8'SYSUT1' IS THIS SYSUT1 DD NAME?
         BE    BBB010             FOUND, OPEN DUMMY FILE
         AR    R1,R15             BUMP TO NEXT DD ENTRY
         B     AAA010             CHECK NEXT ENTRY
         SPACE 1
* --------------------------------------------------------------------*
*        OPEN TO ALLOW NORMAL MERGE (RDJFCB ONLY GETS JCL INFO)
*        NOTE: SYSUT1 IS ONLY NEEDED IF INPUT IS NL
* --------------------------------------------------------------------*
BBB010   EQU   *
         OI    FLAG,UT1           INDICATE SYSUT1 WAS FOUND
         OPEN  (SYSUT1,(INPUT))   OPEN DUMMY INPUT FILE TO FILL DCB
         LA    R6,SYSUT1          ADDRESSABILITY TO DCB
         USING IHADCB,R6          INFORM ASSEMBLER
         TM    DCBOFLGS,DCBOFOPN  WAS THE SYSUT1 CARD PROVIDED
         BZ    ENTRY020           NO, SKIP THE MERGE
         LH    R3,DCBBLKSI        GET BLKSIZE
         LH    R4,DCBLRECL        GET LRECL
         IC    R5,DCBRECFM        GET RECFM
         CLOSE (SYSUT1)           CLOSE THE DUMMY INPUT FILE
         STH   R3,DCBBLKSI        SET BLKSIZE
         STH   R4,DCBLRECL        SET LRECL
         STC   R5,DCBRECFM        SET RECFM
         B     ENTRY020           BRANCH AROUND
         SPACE 1
PARMMOVE MVC   CAMDSN(0),2(R1)    MOVE DSNAME TO LIST
         SPACE 1
*---------------------------------------------------------------------*
*        FIND THE OLDEST GENERATION DATASET NAME VIA THE CATALOG
*---------------------------------------------------------------------*
         SPACE 1
ENTRY020 EQU   *
         LOCATE CAMLIST           IS THIS THERE A '0' GENERATION
         LTR   R15,R15            ZERO RETURN CODE ?
         BNZ   RETURN             NO - END OF THE LINE
AAA020   EQU   *
         AP    GDG#,=P'1'         ADD 1 TO RELATIVE GENERATION NUMBER
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           LOOK FOR OLDEST GENERATION
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    AAA020             YES, CHECK FOR NEXT
         SP    GDG#,=P'1'         BUMP BACK TO PREVIOUS GDG#
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           CONVERT GDG NUMBER
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    BBB020             YES, CONTINUE
         ABEND 0,DUMP             SHOULD NOT OCCUR
         SPACE 1
BBB020   EQU   *
         TM    FLAG,UT1           SHOULD WE DE-ALLOCATE SYSUT1
         BZ    CCC020             NO, CONTINUE
         BAL   R14,ENTRY920       DEALLOCATE THE DUMMY FILE
         SPACE 1
CCC020   EQU   *
         OPEN  (SYSUT2,(OUTPUT))  OPEN OUTPUT FILE
EXIT020  EQU   *
         SPACE 1
* ---------------------------------------------------------------------
*        COPY THE GDG TO THE OUTPUT FILE
* ---------------------------------------------------------------------
         SPACE 1
ENTRY030 EQU   *
         BAL   R14,ENTRY910       ALLOC THE INPUT GDG
*        MVC   STATUS+26(44),CAMDSN MODIFY WRITE TO PROGRAMMER
*STATUS  WTO   'GDGCOPY  - ACTIVE=
*                     ',ROUTCDE=11 INFORM USER GENERATIONS COPIED
         SPACE 1
         OPEN  SYSUT1             OPEN THE INPUT GDG
AAA030   EQU   *
         GET   SYSUT1             GET A RECORD
         ST    R1,SAVE14          SAVE FOR DEBUGGING 002 ABENDS
         LR    R0,R1              POINT TO RECORD FOR PUT
         PUT   SYSUT2,(0)         WRITE RECORD
         B     AAA030             GET NEXT RECORD
         SPACE 1
BBB030   EQU   *
         CLOSE SYSUT1             CLOSE THE INPUT DATA SET
         BAL   R14,ENTRY920       DE-ALLOCATE THE GDG
         B     ENTRY040           SKIP OVER OPEN EXIT CODE
         SPACE 1
CCC030   EQU   *
         LA    R6,SYSUT1          GET ADDRESS OF INPUT DCB
         TM    DCBRECFM,DCBRECF   CHECK FOR FIXED LENGTH
         BOR   R14                YES, IGNORE IT
         TM    DCBRECFM,DCBRECV   CHECK FOR VARIABLE LENGTH
         BZR   R14                NO, IGNORE IT
         TM    DCBRECFM,DCBRECSB  CHECK FOR SPANNED RECORDS
         BZR   R14                NO, IGNORE IT
         OI    DCBBFALN,DCBBFTA   OVER-RIDE TO BFTEK=A
         BR    R14                RETURN TO OPEN
         SPACE 1
* --------------------------------------------------------------------*
*        UPDATE TO THE NEXT GENERATION IF ANY
* --------------------------------------------------------------------*
         SPACE 1
ENTRY040 EQU   *
         OPEN  (DELGDG,(OUTPUT))                                 JDM2
         MVC   DELDSN(44),CAMDSN  MOVE IN THE FILE NAME          JDM2
         PUT   DELGDG,DEL1        WRITE RECORD 1                 JDM2
         PUT   DELGDG,DEL2        WRITE RECORD 2                 JDM2
         CLOSE (DELGDG)                                          JDM2
         B     EOJ                                               JDM1
         SPACE 1                                                 JDM1
         CP    GDG#,=P'0'         DID WE JUST PROCESS GDG(0)?
         BE    EOJ                YES, ALL DONE
         SP    GDG#,=P'1'         NO, DECREMENT TO NEXT GENERATION
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           CONVERT NAME FOR DYNALLOC
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    ENTRY030           YES, CONTINUE
         ABEND 0,DUMP             SHOULD NOT OCCUR
         SPACE 1
* --------------------------------------------------------------------*
*        CONVERT THE GDG NUMBER FOR ALLOCATE/LOCATE
* --------------------------------------------------------------------*
         SPACE 1
ENTRY900 EQU   *
         L     R15,GDGADDR        GET MOVE TO ADDRESS
         MVC   0(9,R15),=CL9' '   CLEAR POSSIBLE REDUNDANT GDG#
         UNPK  1(3,R15),GDG#      UNPACK TO CAMLIST
         OI    3(R15),X'F0'       CHANGE SIGN
         MVI   1(R15),C'-'        NEGATIVE GDG NUMBER
         MVI   0(R15),C'('        MOVE LEFT PAREN
         MVC   4(2,R15),=CL25') ' MOVE RIGHT PAREN AND BLANK
         BR    R14                RETURN
         SPACE 1
* --------------------------------------------------------------------*
*        ALLOCATE THE GENERATION DATA SET
* --------------------------------------------------------------------*
         SPACE 1
ENTRY910 EQU   *
         ST    R14,SAVE14         SAVE CALLED FROM ADDRESS
         LA    R11,DAWORK         ADDRESS OF REQUEST BLOCK
         USING S99RBP,R11         REQ BLK POINTER DSECT
         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT
         USING S99RB,R10          RB DSECT
         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB
         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR
         XC    S99RB(RBLEN),S99RB  CLEAR RB
         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD
         MVI   S99VERB,S99VRBAL   SET VERB CODE TO ALLOCATE
         SPACE 1
* --------------------------------------------------------------------*
*        SET BITS FOR "WAIT FOR DEVICES" & "WAIT FOR VOLUMES"
* --------------------------------------------------------------------*
         SPACE 1
         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)
         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS
         ST    R9,S99TXTPP        INIT TEXT PTR IN RB
         LA    R8,S99TUPL+16      POINT BEYOND LAST TXT PTR
*                                 (ROOM FOR 4 TEXT UNITS)
         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS
         SPACE 1
* --------------------------------------------------------------------*
*        DDNAME
* --------------------------------------------------------------------*
         SPACE 1
         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT
         LA    R1,DALDDNAM        KEY FOR DDNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(6),=C'SYSUT1'  DDNAME
         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
         SPACE 1
* --------------------------------------------------------------------*
*        DISP
* --------------------------------------------------------------------*
         SPACE 1
         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT
         LA    R1,DALSTATS        KEY FOR DSN STATUS
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVI   S99TUPAR,X'08'     INDICATE SHR DATA SET
         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
         SPACE 1
* --------------------------------------------------------------------*
*        DATA SET NAME
* --------------------------------------------------------------------*
         SPACE 1
         ST    R8,S99TUPTR        3RD PTR TO 3RD UNIT
         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR
         LA    R1,DALDSNAM        KEY FOR DSNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'44'    MOVE 44 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(44),CAMDSN  DSNAME
RETRY    EQU   *
         LR    R1,R11             ADDR OF REQUEST BLOCK
         DYNALLOC
         ST    R15,RC             SAVE RETURN CODE
         LTR   R15,R15            RETURN CODE ZERO ?
         BNZ   ERROR1             NO - DECODE ERROR
         L     R14,SAVE14         GET CALLED FROM ADDRESS
         BR    R14
         SPACE 1
* --------------------------------------------------------------------*
*        DE-ALLOCATE THE GENERATION DATA SET
* --------------------------------------------------------------------*
         SPACE 1
ENTRY920 EQU   *
         ST    R14,SAVE14         SAVE CALLED FROM ADDRESS
         LA    R11,DAWORK         ADDRESS OF REQUEST BLOCK
         USING S99RBP,R11         REQ BLK POINTER DSECT
         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT
         USING S99RB,R10          RB DSECT
         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB
         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR
         XC    S99RB(RBLEN),S99RB  CLEAR RB
         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD
         MVI   S99VERB,S99VRBUN   SET VERB CODE TO UN-ALLOCATE
         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)
         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS
         ST    R9,S99TXTPP        INIT TEXT PTR IN RB
         LA    R8,S99TUPL+16      POINT BEYOND LAST TXT PTR
*                                 (ROOM FOR 4 TEXT UNITS)
         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS
         SPACE 1
* --------------------------------------------------------------------*
*        DDNAME
* --------------------------------------------------------------------*
         SPACE 1
         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT
         LA    R1,DALDDNAM        KEY FOR DDNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(6),=C'SYSUT1'  DDNAME
         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
         SPACE 1
* --------------------------------------------------------------------*
*        IN-USE ATTRIBUTE
* --------------------------------------------------------------------*
         SPACE 1
         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT
         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR
         LA    R1,DUNUNALC        KEY FOR UNALLOC IF IN-USE
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LR    R1,R11             ADDR OF REQUEST BLOCK
         DYNALLOC
         ST    R15,RC             SAVE RETURN CODE
         LTR   R15,R15            RETURN CODE ZERO ?
         BNZ   ERROR1             NO - DECODE ERROR
         L     R14,SAVE14         GET CALLED FROM ADDRESS
         BR    R14
         SPACE 1
* --------------------------------------------------------------------*
*        END OF JOB
* --------------------------------------------------------------------*
         SPACE 1
EOJ      EQU   *
         XC    RC,RC              CLEAR RETCODE
         CLOSE (SYSUT2)           CLOSE OUTPUT FILE
*        WTO   'GDGCOPY  - NORMAL COMPLETION',ROUTCDE=11
RETURN   EQU   *
         L     R15,RC             PICK UP RETURN CODE
         $EPILOG
         SPACE 1
* --------------------------------------------------------------------*
*        ERROR ROUTINES
* --------------------------------------------------------------------*
ERROR1   EQU   *
         DS    0H
         L     R1,RC              PICK UP RETURN CODE
         CVD   R1,DBWRD
         UNPK  MSG1+9(3),DBWRD+6(2)        RETURN CODE
         OI    MSG1+11,X'F0'
         UNPK  MSG1+15(5),S99ERROR(3)      DYNAMIC ERROR CODE
         MVI   MSG1+19,X'40'
         UNPK  MSG1+29(5),S99INFO(3)      DYNAMIC INFO CODE
         MVI   MSG1+33,X'40'
MSG1     EQU   *
         WTO   ' XXX - XXXXX ERROR - XXXXX INFO (DYNAMIC ALLOC ERROR)',X
               ROUTCDE=11
         CLC   MSG1+9(10),=CL10'004 - 0214' NO DEVICES AVAILABLE?
         BE    SLEEP                    YES, WAIT A MINUTE
         CLC   MSG1+9(10),=CL10'004 - 0484' NO DEVICES AVAILABLE?
         BNE   ABEND1                   NO, ABEND
SLEEP    EQU   *
         STIMER WAIT,DINTVL=WAITTIME    WAIT A WHILE
         XC    RC,RC                    RESET D/A RETURN CODE
         XC    S99ERROR,S99ERROR        RESET D/A ERROR CODE
         XC    S99INFO,S99INFO          RESET D/A INFO CODE
         B     RETRY                    AND RETRY THE REQUEST
         SPACE 1
ABEND1   EQU   *
         ABEND 1,DUMP
DBWRD    DC    D'0'
         EJECT
* --------------------------------------------------------------------*
*        CAMLIST FOR LOCATING EACH GDG
* --------------------------------------------------------------------*
         SPACE 1
CAMLIST  CAMLST NAME,CAMDSN,,CAMWORK
CAMDSN   DC    CL44' '
CAMWORK  DS    0D
         DC    265C' '
         SPACE 1
* --------------------------------------------------------------------*
*        STORAGE AREAS
* --------------------------------------------------------------------*
         SPACE 1
GDGADDR  DC    F'0'               ADDRESS OF '(NNN)' FIELD
RC       DC    F'16'              RETURN CODE (PRIMED FOR ERROR)
SAVE14   DC    F'0'               REG 14 SAVE AREA
EXLST    DC    X'85',AL3(CCC030)  OPEN LIST FOR SYSUT1
GDG#     DC    PL2'0'             CURRENT GDG NUMBER
FLAG     DC    X'00'              OPTIONS SWITCHES
UT1      EQU   X'01'              SYSUT1 WAS FOUND IN TIOT
WAITTIME DC    C'00010000'        WAIT TIME FOR DYNALLOC
         SPACE 1
         LTORG
         SPACE 1
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=BBB030,           X
               EXLST=EXLST
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM
DELGDG   DCB   DDNAME=DELGDG,DSORG=PS,MACRF=PM,                  JDM2  X
               RECFM=FB,LRECL=80                                 JDM2
         SPACE 1                                                 JDM2
* ---------------------------------------------------------------JDM2-*
*        IDCAMS "DELETE" STATEMENT                               JDM2
* ---------------------------------------------------------------JDM2-*
         SPACE 1                                                 JDM2
DEL1     DS    0CL80                                             JDM2
         DC    CL10' '                                           JDM2
         DC    CL10'DELETE'                                      JDM2
         DC    CL06' '                                           JDM2
DELDSN   DC    CL44' '             DSN TO BE DELETED             JDM2
         DC    CL10'+ '                                          JDM2
         SPACE 1                                                 JDM2
DEL2     DS    0CL80                                             JDM2
         DC    CL25' '                                           JDM2
         DC    CL55'SCRATCH NONVSAM'                             JDM2
         DS    0F                                                JDM2
         SPACE 1                                                 JDM2
DAWORK   DC    XL256'00'
         SPACE 1                                                 JDM1
         DCBD  DSORG=QS
         SPACE 1                                                 JDM1
         IEFZB4D0
         SPACE 1                                                 JDM1
         IEFZB4D2
         SPACE 1                                                 JDM1
RBLEN    EQU   (S99RBEND-S99RB)
         END
