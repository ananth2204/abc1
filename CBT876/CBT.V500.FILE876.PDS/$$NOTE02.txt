Installation notes from Sam Golob.        for ALGOL F 2.1
------------ ----- ---- --- -----         from Tom Armstrong

    As an introductory note, I wish to thank Tom Armstrong for
    doing an enormous amount of work, to fix and polish the ALGOL F
    compiler and library, and to make sure that they could also be
    assembled and linkedited from source code.  All the materials
    necessary for this, should be packaged in this file.

    I also wish to thank Phil Roberts, without whose input, I would
    never have heard of this beautiful piece of work.

    I am bearing in mind, that people who are running z/OS might
    also want to use these materials, as well as people who are
    running MVS 3.8J and also OS/360.  If something from this file
    does not work on any of these platforms, please inform me, and
    I'll try to set things right for everyone.

    email:  sbgolob@cbttape.org   or  sbgolob@attglobal.net

Full Documentation:

    Documentation for the compiler, library, and general information
    is provided by means of PDF-format members of this pds, which
    should be downloaded to a PC in BINARY for reading, using the
    Adobe Acrobat reader, or equivalent (Foxit, etc.)

    These members are:

        #COMPILR - compiler documentation manual
        #GENINFO - general information manual
        #LIBRARY - library documentation manual

    Sample output to compare ALGOL F version 2 from IBM, with
    ALGOL F 2.1 from Tom Armstrong, are PDF files, which have
    been put here as members AL20SAMP and AL21SAMP, respectively.


Installation help and instruction:

A.  The two AWS-format file members.

    1.  Member ALGOLF21 in this pds is an AWS-format image of the
        tape whose volser is ALGOLF, that was submitted to me by
        Tom Armstrong.  You can download this member in BINARY to
        a PC that is running Hercules, and you can use it from
        there.  If you don't have Hercules, you can convert this
        member (under MVS) to a real tape, using the VTT2TAPE
        program from File 533 of the CBT Tape.  If you do not want
        to use this AWS tape image, its files have already been
        put into this CBT Tape file, as members:

          AL21FCMP - ALGOL F 2.1 compiler
          AL21FIVP - IVP
          AL21FJCL - IEBCOPY JCL to load from the ALGOLF tape
          AL21FLIB - ALGOL F 2.1 execution library
          AL21FPRC - ALGOL F 2.1 JCL procedures for PROCLIB

    2.  Member ALG21SRC in this pds is an AWS-format image of the
        tape whose volser is ALGSRC, that was submitted to me by
        Tom Armstrong.  You can download this member in BINARY to
        a PC that is running Hercules, and you can use it from
        there.  If you don't have Hercules, you can convert this
        member (under MVS) to a real tape, using the VTT2TAPE
        program from File 533 of the CBT Tape.  If you do not want
        to use this AWS tape image, its files have already been
        put into this CBT Tape file, as members:

          AL21LASM - Source code to assemble the LIBRARY modules
          AL21LMAC - Macros needed to assemble the LIBRARY modules
          AL21SASM - Source code to assemble the COMPILER modules
          AL21SCTL - Assembly JCL to build the COMPILER and LIBRARY
          AL21SMAC - Macros needed to assemble the COMPILER modules

    3.  PDSLOAD format, or IEBUPDTE format:  (create new pds'es)

        With the exception of the AL21FCMP and AL21FLIB members,
        which are in TSO XMIT format, most of the other members
        from Tom's 2 tapes, are packaged in IEBUPDTE "unloaded pds"
        format.  But if you want to preserve the ISPF statistics
        for the members in these pds'es, you should use the PDSLOAD
        program (CBT File 093) to unload them, rather than IBM's
        IEBUPDTE program.  I have provided JCL for this purpose,
        and also some other materials to make it possible for you
        to conveniently run the PDSLOAD program.

        See member #PDSLOAD, which contains an object deck for
        PDSLOAD, together with convenient LINKEDIT JCL.  Just
        create the output load library, and put a job card in
        front of the member to linkedit the load module.

        See member $PDSLOAD, which contains JCL to create most
        of the pds'es that are needed.  The only other pds'es
        needed, are the compiler and library load libraries.
        These are members AL21FCMP (compiler) and AL21FLIB
        (library) which are in TSO XMIT format.

        If you have access to the TSO RECEIVE command,
        then execute:

        TSO RECEIVE INDS (this.pds(AL21FCMP))   to get the compiler
        TSO RECEIVE INDS (this.pds(AL21FLIB))   to get the library

        Otherwise, run the IEBCOPY parts of the AL21FJCL member
        to download the compiler and library from AWS-format tape.
        You can get the tape image for running on HERCULES by
        downloading member ALGOLF21 from this pds, in BINARY,
        to a pc file, and running it as an AWS-format tape
        under Hercules, using the Hercules devinit command to
        mount it.

  Questions and problems:   Sam Golob    sbgolob@cbttape.org
                                         sbgolob@attglobal.net


