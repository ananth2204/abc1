
http://bama.ua.edu/cgi-bin/wa?A2=ind0402&L=ibm-main&P=R82089&I=1

Date:         Thu, 26 Feb 2004 08:45:30 -0500
Reply-To:     IBM Mainframe Discussion List <IBM-MAIN@BAMA.UA.EDU>
Sender:       IBM Mainframe Discussion List <IBM-MAIN@BAMA.UA.EDU>
From:         Tom Sipusic <sipusic@GEORGETOWN.EDU>
Subject:      Re: Incorrect JCL processing?
In-Reply-To:  <3718408C4D654A4D89223E69DC010CC65F3CEF@uicnrhechp3.uicnrh.dom>
Content-Type: text/plain; charset=windows-1252; format=flowed

Here is the documentation from a program, CCFDELET, which I wrote
and which may address some of your programmers' objections,
although maybe not the one about using more CPU time.  I just
never worried about that.  The original motivation for CCFDELET
was to avoid DFHSM recalls just to delete a data set.  I can give
you the source if you want.

Do not use IEFBR14 to delete or uncatalog data sets, use the
inhouse written program CCFDELET.  When you have a job step that
will allocate a new data set and you wish to avoid a JCL error
caused by an undeleted old version of it, you can use CCFDELET in
a prior step to check for old versions of the data set and delete
them if they exist.  Following are two examples of using the
CCFDELET program to delete data sets.  The first example uses
sysin control cards and would be placed in the jobstream being
submitted (aka RUNJCL).  The second example would be used when
setting up a PROC because it avoids using control cards.

JOBSTREAM Example:

//STEP1 EXEC PGM=CCFDELET
//SYSPRINT DD SYSOUT=*
//SYSIN DD *
CCF.DELETE.DSN1
CCF.DELETE.DSN2
CCF.DELETE.DSN3
/*

PROC Example:
//STEP1 EXEC PGM=CCFDELET,PARM='CCF.DELETE.DSN1'
//STEP2 EXEC PGM=CCFDELET,PARM='CCF.DELETE.DSN2'
//STEP3 EXEC PGM=CCFDELET,PARM='CCF.DELETE.DSN3'

Another nice feature of CCFDELET is that data sets migrated by
DFHSM are not recalled before they are deleted.  This is why the
program IEFBR14 should not be used to delete or uncatalog data
sets.  IEFBR14 would recall a data set that is migrated to tape
and then delete the data set while CCFDELET tells DFHSM to delete
the data set without first recalling it.

Restrictions:

CCFDELET/IDCAMS cannot
delete a data set that is not catalogued.  It will assume the
data set does not exist and produce a return code of 0.

Condition Codes:

CCFDELET works by invoking the IBM utility
IDCAMS to delete datasets.  The messages sent to SYSPRINT and the
condition code are produced by IDCAMS except that a condition
code 8 (which indicates that the data set did not exist) is
changed to a condition code of 0.  If the return code from a
CCFDELET step is 0, this indicates that the data set has been
deleted or never existed.  Any other condition code indicates
that the data set might still exist and should be investigated.

McKown, John wrote:
>>-----Original Message-----
>>From: terry sambrooks Ýmailto:terry.sambrooks@BTCLICK.COM¨
>>Sent: Wednesday, February 25, 2004 10:55 AM
>>To: IBM-MAIN@BAMA.UA.EDU
>>Subject:  Re: Incorrect JCL processing?
>>
>>
>>Hi John,
>>
>>Regarding your original post in respect of using
>>DISP=(MOD,DELETE) to tidy up a data set which might or might
>>not exist, and what are seen as vagaries of completion in
>>respect of JCL Error or RACF stomp.
>>
>>Would I be out of line suggesting a switch to IDCAMS rather
>>than IEFBR14 for the tidy up.  I am sure that you are aware
>>that with IDCAMS a consistent activity can be achieved in
>>that dynamic delete will not cause a JCL error, but will
>>generate a RACF violation if authority levels are inappropriate.
>>
>>SET MAXCC can always be used to give a Cond Code zero
>>irrespective so there need be no angst about incorrect return
>>codes either,
>>
>>Just a thought if the aim is to avoid calls.
>>
>>Regards - Terry
>>
>>
>
>Would that the programmers would do
>that.  They refuse.  I do not have the
>authority to force them to.  Their,
>reasonable, reason is that there is no
>way to use JCL symbols to pass in
>the DSN(s) to be deleted.  I say that they
>could use a JCL symbol to select name
>of a member containing the DSNs to
>delete.  They respond that they would
>then need to maintain two members - the
>JCL and the associate IDCAMS sysin
>member(s).  I point out a way to do it
>using IKJEFT01 with a PARM='DEL &HLQ..rest.of.dsn'.
>They point out that requires one step per DSN
>and is much more processor intensive than a
>simple IEFBR14.

And so it goes.
>
>
>
Ýsnip¨
----------------------------------------------------------------------
For IBM-MAIN subscribe / signoff / archive access instructions,
send email to listserv@bama.ua.edu with the message:
GET IBM-MAIN INFO Search the archives at
http://bama.ua.edu/archives/ibm-main.html
