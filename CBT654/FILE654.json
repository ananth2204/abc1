{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012533000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1234506, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE654.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1234506, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1234506, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE654.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x15\\x05'", "DS1TRBAL": "b'\\xa8F'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x9f\\x00\\x01\\x04\\xa0\\x00\\x07\\x00\\x16'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x031?\\x01\\x031?\\x00\\x13\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-11-09T00:00:00", "modifydate": "2003-11-09T00:13:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-463"}, "text": "REGULAR CBT TAPE - VERSION 463    FILE:  654\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT463.FILE654\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 20 MEMBERS COUNTED; CUMULATIVE SIZE IS 11,700 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/09/03    00:13:28    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x031/\\x01\\x031/ )\\x00(\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T20:29:50", "lines": 40, "newlines": 40, "modlines": 0, "user": "SBGOLOB"}, "text": "Full Screen Interface (FSI) is a programming library modeled\nafter SPF that supports full screen 3270 programming.  To use\nFSI, one more more application panels are coded and stored in the\nPanel Library or PLIB data set.  The application program uses a\nDisplay function call to display the panel.  Input / output\nvariables are used to allow the application to display dynamic\ncontent to the screen and allow the application program to\nretrieve input data from the terminal.\n\nFSI uses an execution environment that the application program\nmust run underneath.  To run a FSI application, the FSI\nenvironment must first be created using the FSISTART command\nspecifying the application name as a parameter.  The FSISTART\ncommand will load the FSI environment and then attach the\napplication program.\n\nStandard Disclaimer\n\nFSI is a part-time fun project that I started working on while\ntraveling.  I found myself killing a lot of time in airports and\nfired up MVS 3.8 under Hercules on my laptop.  The code \"mostly\nworks\" at this point.  There is a lot of need for improvement.\nError handling is almost non-existent.  I diagnose errors using\nthe TSO TEST command since the code produces very few error\nmessages.\n\nThere is a lot of room for enhancement and improvement if you\nwould like to help take this project forward.  When I get more\nspare time I may try to improve upon what I have here.\n\nThis is by far not the best code I have ever written in my life\nbut it just evolved a few lines at a time.  Since I was\ntraveling, I did not have access to any of my reference\nmaterials.  A lot of the original code was written to try\nsomething out and see what happened.  When I get the right\nresults, I added more code and attempted something else.  If you\nlook at the code it will pretty much look as though is was\nwritten that way.  There was no overall plan or design I was\nworking from.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$DOC02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\x031/\\x01\\x031/ 3\\x00\"\\x00\"\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T20:33:28", "lines": 34, "newlines": 34, "modlines": 0, "user": "SBGOLOB"}, "text": "Running FSI\n\nBefore you run FSI you must first allocate the MLIB and PLIB\nlibraries to your TSO session.  You can use the following\ncommands:\n\nalloc fi(fsimlib) da(fsi.v1r2m0.mlib) shr\n\nalloc fi(fisplib) da(fsi.v1r2m0.plib) shr\n\nNow you must give FSI access to the necessary load modules.  You\ncan do this two different ways.  First you can add the FSI load\nlibrary to your TSO Logon Procedure or you can allocate the FSI\nLoad Library data set to the DDNAME FSILLIB.\n\nalloc fi(fisllib) da(fsi.v1r2m0.load) shr\n\nIf you added the FSI LOAD Library dataset to your LOGON PROC you\ncan invoke FSI directly as a TSO command:\n\nREADY\n\nFSISTART SAMP01\n\nIf you use the FSILLIB method, you can use the TSO CALL command\nto invoke FSI.\n\nREADY\n\ncall 'fsi.v1r0m0.load(fsistart)' 'samp01'\n\nFSISTART will set up the environment and then attach the program\nsamp01 as a subtask.  FSISTART then waits for the subtask to end.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$DOC03": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x031/\\x01\\x031/#Q\\x00-\\x00-\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T23:51:18", "lines": 45, "newlines": 45, "modlines": 0, "user": "SBGOLOB"}, "text": "Changing Your TSO Logon Proc\n\nYou can add FSI to your TSO Logon Proc if you desire.  You will\nneed to add three DD Statements to your logon proc.\n\nYou need to add a statement to your STEPLIB and DD Statements for\nthe MLIB and PLIB.  Use the example below to modify your Proc in\nSYS1.PROCLIB.\n\n//IKJACCNT PROC\n//IKJACCNT EXEC PGM=IKJEFT01\n//STEPLIB DD DISP=SHR,DSN=RPF.V1R5M0.SRPFLOAD\n//        DD DISP=SHR,DSN=FSI.V1R2M0.LOAD\n//SYSHELP DD DISP=SHR,DSN=SYS1.HELP\n//FSIPLIB DD DISP=SHR,DSN=FSI.V1R2M0.PLIB\n//FSIMLIB DD DISP=SHR,DSN=FSI.V1R2M0.MLIB\n//DD1     DD DYNAM\n//DD2     DD DYNAM\n//DD3     DD DYNAM\n//DD4     DD DYNAM\n//DD5     DD DYNAM\n//DD6     DD DYNAM\n//DD7     DD DYNAM\n//DD8     DD DYNAM\n//DD9     DD DYNAM\n//DDA     DD DYNAM\n//DDB     DD DYNAM\n//DDC     DD DYNAM\n//DDD     DD DYNAM\n//DDE     DD DYNAM\n\n\nOnce you have changed your TSO Logon Proc you need to logoff and\nlogon again.  You should then be able to invoke FSISTART as a\ncommand.  You can try the second example program using:\n\nfsistart samp02\n\nYou can see that samp02 displays a screen the very much looks\nlike the initial RPF screen.\n\nIf you fail to specify an application program to run, you should\nget the default screen:\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$DOC04": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x031/\\x01\\x031/#T\\x00a\\x00a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T23:54:55", "lines": 97, "newlines": 97, "modlines": 0, "user": "SBGOLOB"}, "text": "Using the FSI API\n\n\nThe API\n\nFSI Version 1, Release 2 implements the use of VDEFINE instead of\nthe VGET and VPUT methods used with the previous release.  In\naddition the VDEFINE function there is also a DISPLAY function.\n\nVDEFINE\n\nVDEFINE is used to define program variables to FSI.  A FSI\nvariable is identified by a name consisting of one to eight\ncharacters.  FSI variables can be a maximum length of 255 bytes\nlong.  The VDEFINE API function call specifies the variable name,\nthe variable type (character or numeric), the data length and the\ndata to set the variable to.\n\nThe $VDEFINE assembler macro is provided to invoke the VDEFINE\nfunction.\n\n$VDEFINE( variable name , data address, variable type, data\nlength, copy option )\n\nVariable name is the name of the variable.  It must be one to\neight characters long.  It can be specified as the address of an\neight byte name (padded with blanks) or it can be specified as a\nconstant.\n\nData address is the pointer to the variable in the program.\n\nVariable type is a full word integer value indicating the data\ntype.  1 = Numeric, 2 = Character\n\nData length is the length of the data string.  It can be\nspecified as the address of a full word containing the data\nlength or it can be specified as a constant value.\n\nThe copy option is a full word integer value but is currently\nignored.\n\nExamples:\n\n$VPUT('PF03',MYPF03,2,8,0)\n\nThis will set the value of the variable 'PF03' to an eight byte\ncharacter string called MYPF03.\n\nYou can accomplish the same thing using the $VPUT macro without\nconstants:\n\n$VPUT(VNAME,VDATA,VLEN,VTYPE,0)\n\nVNAME    DC   CL8'PF03'\nVLEN     DC   F'3'\nVDATA    DC   C'END'\nVTYPE    DC   F'2'\n\nTo code the parameter list directly you would use:\n\nPLST   DC    A(VNAME)\n       DC    A(VDATA)\n       DC    A(VTYPE)\n       DC    A(VLEN)\n       DC    X'80',AL3(VZERO)\n\nVZERO  DC  F'0'\n\n\nDISPLAY\n\nDISPLAY is used to display a panel on the terminal and get a\nresponse from the terminal user.  The DISPLAY function call\nspecifies the name of the panel to display, an optional error\nmessage and an optional cursor position.  If the error message is\nspecified, the error message must be defined in the MLIB data\nset.  If a cursor field is specified, the cursor will be placed\ninto the screen field specified.\n\nThe $DISPLAY assembler macro is provided to invoke the DISPLAY\nfunction.\n\n$DISPLAY( panel name , error message, cursor field )\n\nEach of the parameters can either be specified as the name of an\neight byte area (padded with blanks) or it can be specified as a\nconstant.\n\n$VDISPLAY('SAMP01','SAMP0101','USERID')\n$VDISPLAY('SAMP01')\n\n$VDISPLAY(PANEL,ERMSG,CSRFLD)\n\nPANEL   DC  CL8'SAMP01'\nERMSG   DC  CL8'SAMP0101'\nCSRFLD  DC  CL8'USERID'\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$DOC05": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x031/\\x01\\x031/#W\\x00[\\x00[\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T23:57:53", "lines": 91, "newlines": 91, "modlines": 0, "user": "SBGOLOB"}, "text": "Using FSI Panels\n\nFSI Panels are modeled after SPF panels.  Only a limited subset\nof SPF functionality is currently implemented.\n\n)ATTR DEFAULT(%+_)\n  ! TYPE(OUTPUT) INTENS(HIGH)\n  : TYPE(INPUT) INTENS(NON)\n)BODY\n+\n+                               +TEST PANEL\n+\n+\n+\n+           %@@@@@@@@@@@@@@     @@@@@@@@@@@    @@@@@@@@@@@@\n+          %@@@@@@@@@@@@@@    @@@@@@@@@@@@    @@@@@@@@@@@@\n+         %@@@@              @@@@                @@@@\n+        %@@@@@@@@@@         @@@@@@@@@@         @@@@\n+       %@@@@@@@@@@                @@@@        @@@@\n+      %@@@@              @@@@@@@@@@@@     @@@@@@@@@@@@\n+     %@@@@               @@@@@@@@@@@     @@@@@@@@@@@@\n+\n+ !Z +\n+ +USERID%===>_Z +\n+\n+ +PASSWD%===>:Z +\n+\n+\n+\n+\n+\n+\n%===>_ZCMD                                                             +\n)PROC\n .ZVARS = '(ZSTAT USERID\n                  PASSWD)'\n)END\n\n\n\n\nATTR\n\nThe ATTR section specifies the field attributes.  A minimum of\nthree attributes must always be defined.  By default these are\n\"%\", \"+\" and \"_\".  The default attribute characters can be\nchanged with the DEFAULT parameter on the )ATTR line.\n\nThe \"%\" attribute is defined as:  TYPE(TEXT)  INTENS(HI)\n\nThe \"+\" attribute is defined as:  TYPE(TEXT)  INTENS(LOW)\n\nThe \"_\" attribute is defines as:  TYPE(INPUT)  INTENS(LOW)\n\nAdditional attribute characters can be defined in the ATTR\nsection.  You must specify the attribute character followed by\nits characteristics:\n\n    TYPE( INPUT / OUTPUT / TEXT )\n\n    INTENS( HI / LOW )\n\n    CAPS( ON / OFF )  *Not currently implemented\n\nBODY\n\nThe BODY section defines the body of the panel.  The attribute\ncharacters are used to define the beginning and ending of the\nvarious fields.  An input or output variable is expected to be\nfollowed by a variable name.  A special variable name of \"Z\" has\na special meaning.  The Z variable is a place holder and is\nreplaced with a value specified in the PROC section.  The Z\nvariable can be used to assign a longer name to a short field.\n\nThe BODY section can contain a maximum of 24 lines.\n\nPROC\n\nThe PROC section is provided so that ZVARS values can be\nspecified.  The ZVARS values are used in place of the place\nholder \"Z\" specified on the panel.  The Z vars are replaced in\nthe order they appear in the body from left to right, top to\nbottom.\n\nIf no ZVARS are used, the PROC section may be omitted.\n\nEND\n\nThe END section is used to signal the end of data for the panel\ndefinition.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$DOC06": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x12\\x01\\x031/\\x01\\x031/#Y\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T23:59:12", "lines": 17, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "Specifying Messages\n\n\nSpecifying Messages\n\nFSI messages are defined in the MLIB data set.  Each member in\nthe MLIB can define one or more messages.  The name of the member\nin the MLIB is the message ID minus the last character.  For\nexample MLIB member \"SAMP010\" will contain messages SAMP0101,\nSAMP0102, SAMP010A, etc.\n\n SAMP0101 'INVALID USERID ENTERED'\n SAMP0102 'HINT: USE ANYTHING FOR THE USERID'\n SAMP0103 'INVALID PASSWORD ENTERED'\n SAMP0104 'HINT: TRY USING ''SECRET'' FOR THE PASSWORD'\n SAMP0105 'HINT: TRY USING ''END'' FOR A COMMAND'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$PDSLOAD": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00Y\\x01\\x026_\\x01\\x031/  \\x00#\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2003-11-08T20:20:59", "lines": 35, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*   NOTE..  THE LOADT MEMBER IS IN REVIEW OFFLOAD FORMAT,\n//*           AND IT HAS TO BE RECONSTITUTED USING GREG PRICE'S\n//*           REVIEW PROGRAM FROM CBT TAPE FILE 134.\n//*\n//*           THIS JOB RECONSTITUTES THE SOURCE-FORMAT FSI LIBRARIES.\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT463.FILE654',\n//             OPRE=SBGOLOB,\n//             QUAL=FILE654,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=15,S=30,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=CBT.CBT462.FILE035.PDS\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=ASMT\n//S002 EXEC PDSLOAD,MEMB=MLIBT\n//S003 EXEC PDSLOAD,MEMB=OBJT\n//S004 EXEC PDSLOAD,MEMB=PLIBT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$RECEIVE": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00C\\x01\\x00\\x19O\\x01\\x031/ \\x17\\x00\\x14\\x00\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2000-07-12T00:00:00", "modifydate": "2003-11-08T20:17:43", "lines": 20, "newlines": 7, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* ---------------------------------------------------------- *//\n//*   TSO-IN-BATCH RECEIVE JOB TO RELOAD THE FSI LIBRARIES     *//\n//*   ON AN MVS SYSTEM......                                   *//\n//* ---------------------------------------------------------- *//\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\nRECEIVE INDS('SBGOLOB.CBT463.FILE654(ASM)')\nVOL(DATA04) UNIT(SYSALLDA)\nRECEIVE INDS('SBGOLOB.CBT463.FILE654(MLIB)')\nVOL(DATA04) UNIT(SYSALLDA)\nRECEIVE INDS('SBGOLOB.CBT463.FILE654(OBJ)')\nVOL(DATA04) UNIT(SYSALLDA)\nRECEIVE INDS('SBGOLOB.CBT463.FILE654(PLIB)')\nVOL(DATA04) UNIT(SYSALLDA)\nRECEIVE INDS('SBGOLOB.CBT463.FILE654(LOAD)')\nVOL(DATA04) UNIT(SYSALLDA)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE654": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x031?\\x01\\x031?\\x00\\x13\\x00\"\\x00\"\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-11-09T00:00:00", "modifydate": "2003-11-09T00:13:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "CBT-463"}, "text": "//***FILE 654 is from Tommy Sprinkle and contains his FSI (Full     *   FILE 654\n//*           Screen Interface) for MVS TSO.  This package was      *   FILE 654\n//*           inspired by running MVS 3.8 under Hercules.           *   FILE 654\n//*                                                                 *   FILE 654\n//*       Two installation jobs are included here:  $RECEIVE        *   FILE 654\n//*       will create the FSI execution libraries using the TSO     *   FILE 654\n//*       RECEIVE command.  If you are not running TSO/E and        *   FILE 654\n//*       you don't have TSO RECEIVE, you can run the $PDSLOAD      *   FILE 654\n//*       job to create all the libraries except the load library   *   FILE 654\n//*       and you can get the load library from the LOADT member    *   FILE 654\n//*       in REVLMOD format (CBT Tape Files 134, 135).              *   FILE 654\n//*                                                                 *   FILE 654\n//*       Description of the Package:                               *   FILE 654\n//*                                                                 *   FILE 654\n//*       Full Screen Interface (FSI) is a programming library      *   FILE 654\n//*       modeled after SPF that supports full screen 3270          *   FILE 654\n//*       programming.  To use FSI, one more more application       *   FILE 654\n//*       panels are coded and stored in the Panel Library or       *   FILE 654\n//*       PLIB data set.  The application program uses a            *   FILE 654\n//*       Display function call to display the panel.  Input /      *   FILE 654\n//*       output variables are used to allow the application to     *   FILE 654\n//*       display dynamic content to the screen and allow the       *   FILE 654\n//*       application program to retrieve input data from the       *   FILE 654\n//*       terminal.                                                 *   FILE 654\n//*                                                                 *   FILE 654\n//*       FSI uses an execution environment that the application    *   FILE 654\n//*       program must run underneath.  To run a FSI application,   *   FILE 654\n//*       the FSI environment must first be created using the       *   FILE 654\n//*       FSISTART command specifying the application name as a     *   FILE 654\n//*       parameter.  The FSISTART command will load the FSI        *   FILE 654\n//*       environment and then attach the application program.      *   FILE 654\n//*                                                                 *   FILE 654\n//*           email:  tommy@tommysprinkle.com                       *   FILE 654\n//*                                                                 *   FILE 654\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASM": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031\\x1f\\x01\\x031\\x1f\\x01\\x16\\x12V\\x12V\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-07T00:00:00", "modifydate": "2003-11-07T01:16:00", "lines": 4694, "newlines": 4694, "modlines": 0, "user": "FSI120"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ASMT": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031/\\x01\\x031/\\x19@\\x12\\x18\\x12\\x18\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T19:40:00", "lines": 4632, "newlines": 4632, "modlines": 0, "user": "FSI120"}, "text": "./ ADD NAME=$DISPLAY 8008-74303-74303-1243-00078-00283-00000-TCS3\n         MACRO\n&ID      $DISPLAY &PARMS\n         LCLC  &NDX\n         LCLC  &PANEL,&MSGID,&CURSOR\n         LCLC  &PNL,&MSG,&CSR\n         LCLC  &PNLK,&MSGK,&CSRK\n         LCLB  &PNLB,&MSGB,&CSRB\n&NDX     SETC  '&SYSNDX'\n.*\n.*-----------------------------------------------------------\n.*\n         AIF   (N'&PARMS GE 1).PNL0\n         MNOTE 8,'PANEL NAME NOT SPECIFIED'\n         MEXIT ,\n.PNL0    ANOP  ,\n&PANEL   SETC  '&PARMS(1)'\n         AIF   ('&PANEL'(1,1) EQ '''').PNL1\n&PNL     SETC  '&PANEL'\n         AGO   .PNL2\n.*\n.PNL1    ANOP  ,\n&PNL     SETC  'IHB2&NDX'\n&PNLK    SETC  '&PANEL'\n&PNLB    SETB  1\n.PNL2    ANOP  ,\n.*\n.*-----------------------------------------------------------\n.*\n         AIF   (N'&PARMS GE 2).MSG0\n&MSG     SETC  '0'\n         AGO   .MSG2\n.MSG0    ANOP  ,\n&MSGID   SETC  '&PARMS(2)'\n         AIF   ('&MSGID'(1,1) EQ '''').MSG1\n&MSG     SETC  '&MSGID'\n         AGO   .MSG2\n.*\n.MSG1    ANOP  ,\n&MSG     SETC  'IHB3&NDX'\n&MSGK    SETC  '&MSGID'\n&MSGB    SETB  1\n.MSG2    ANOP  ,\n.*\n.*-----------------------------------------------------------\n.*\n         AIF   (N'&PARMS GE 3).CSR0\n&CSR     SETC  '0'\n         AGO   .CSR2\n.CSR0    ANOP  ,\n&CURSOR  SETC  '&PARMS(3)'\n         AIF   ('&CURSOR'(1,1) EQ '''').CSR1\n&CSR     SETC  '&CURSOR'\n         AGO   .CSR2\n.*\n.CSR1    ANOP  ,\n&CSR     SETC  'IHB4&NDX'\n&CSRK    SETC  '&MSGID'\n&CSRB    SETB  1\n.CSR2    ANOP  ,\n.*\n.*-----------------------------------------------------------\n.*\n         CNOP  0,4\n&ID      BAL   1,IHB1&SYSNDX\n         DC    A(&PNL)\n         DC    A(&MSG)\n         DC    A(&CSR)\n         AIF   (&PNLB EQ 0).PNL3\nIHB2&NDX DC    CL8&PNLK\n.PNL3    AIF   (&MSGB EQ 0).MSG3\nIHB3&NDX DC    CL8&MSGK\n.MSG3    AIF   (&CSRB EQ 0).CSR3\nIHB4&NDX DC    CL8&CSRK\n.CSR3    ANOP  ,\nIHB1&NDX DS    0H\n         L     15,=V(DISPLAY)\n         BALR  14,15\n         MEND  ,\n./ ADD NAME=$FSIECT  8001-74297-74304-1557-00027-00027-00000-TCS3\n         MACRO\n         $FSIECT\n*\n* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n*\nECT$IO   EQU   B'00000011'        TYPE MASK\nECT$IN   EQU   B'00000001'        TYPE(INPUT)\nECT$OUT  EQU   B'00000011'        TYPE(OUTPUT)\nECT$TEXT EQU   B'00000010'        TYPE(TEXT)\n*\n*\nECT$INTN EQU   B'00001100'        INTENSITY MASK\nECT$LOW  EQU   B'00001100'        INTENS(LOW)\nECT$HI   EQU   B'00000100'        INTENS(HIGH)\nECT$NON  EQU   B'00001000'        INTENS(NON)\n*\nECT$OUTL EQU   B'00001111'\nECT$INL  EQU   B'00001101'\nECT$TXTL EQU   B'00001110'\nECT$OUTH EQU   B'00000111'\nECT$INH  EQU   B'00000101'\nECT$TXTH EQU   B'00000110'\nECT$INN  EQU   B'00001001'\n*\n* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n*\n         MEND  ,\n./ ADD NAME=$FSISCR  8002-74294-74298-1155-00014-00011-00000-TCS3\n         MACRO\n         $FSISCR\nSCR      DSECT ,\nSCRATTRS DS    A             ATTR CHAR ARRAY  C' ',X'ATTR'\n*                            X'FFFF' MARKS END OF LIST\nSCRPANEL DS    A             PANEL INPUT 24CL80\nSCRZVARS DS    A             ARRAY OF ZVAR NAMES CL8' '\n*                            X'FFFFFFFFFFFFFFFF' MARKS END OF LIST\nSCRMSG   DS    A             MESSAGE TO BE DISPLAYED\n*                            NULL OR POINTER TO (H'LEN',C'DATA')\nSCRAID   DS    CL8           ACTION ID\nSCRCSR   DS    CL8           CURSOR FIELD\nSCRELEN  EQU   *-SCR\n         MEND  ,\n./ ADD NAME=$VDEF    8007-75273-75302-1806-00072-00066-00000-TCS3\n         MACRO\n&ID      $VDEF &PARMS\n         LCLC  &NDX\n         LCLC  &NAME,&LEN,&AREA,&TYPE,&OPT\n         LCLC  &NM,&LN,&AR,&TP,&OP\n         LCLC  &NMK,&LNK,&ARK,&TPK,&OPK\n         LCLB  &NMB,&LNB,&ARB,&TPB,&OPB\n&NDX     SETC  '&SYSNDX'\n         AIF   (N'&PARMS EQ 5).OK1\n         MNOTE 8,'INVALID NUMBER OF PARAMETERS SPECIFIED'\n         MEXIT ,\n.*\n.OK1     ANOP  ,\n&NAME    SETC  '&PARMS(1)'\n&AREA    SETC  '&PARMS(2)'\n&TYPE    SETC  '&PARMS(3)'\n&LEN     SETC  '&PARMS(4)'\n&OPT     SETC  '&PARMS(5)'\n.*\n         AIF   ('&NAME'(1,1) EQ '''').NM1\n&NM      SETC  '&NAME'\n         AGO   .NM2\n.NM1     ANOP  ,\n&NM      SETC  'IHB2&NDX'\n&NMK     SETC  '&NAME'\n&NMB     SETB  1\n.NM2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&LEN'(1,1) EQ '''').LN1\n         AIF   ('&LEN'(1,1) GE '0').LN1A\n&LN      SETC  '&LEN'\n         AGO   .LN2\n.LN1     ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '&LEN'\n&LNB     SETB  1\n         AGO   .LN2\n.LN1A    ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '''&LEN'''\n&LNB     SETB  1\n         AGO   .LN2\n.LN2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&AREA'(1,1) EQ '''').AR1\n&AR      SETC  '&AREA'\n         AGO   .AR2\n.AR1     ANOP  ,\n         MNOTE 8,'INVALID OPERAND SPECIFIED FOR AREA'\n         MEXIT ,\n.AR2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         CNOP  0,4\n&ID      BAL   1,IHB1&SYSNDX\n         DC    A(&NM)\n         DC    A(&AR)\n         DC    A(IHB5&NDX)\n         DC    A(&LN)\n         DC    A(IHB6&NDX)\n         AIF   (&NMB EQ 0).GN1\nIHB2&NDX DC    CL8&NMK\n.GN1     AIF   (&LNB EQ 0).GN2\nIHB3&NDX DC    F&LNK\n.GN2     AIF   (&ARB EQ 0).GN3\nIHB4&NDX DC    A(&ARK)\n.GN3     ANOP  ,\nIHB5&NDX DC    F'&TYPE'\nIHB6&NDX DC    F'0'\nIHB1&NDX DS    0H\n         L     15,=V(VDEFINE)\n         BALR  14,15\n         MEND  ,\n./ ADD NAME=$VGET    8010-74303-74305-1355-00066-00283-00000-TCS3\n         MACRO\n&ID      $VGET &PARMS\n         LCLC  &NDX\n         LCLC  &NAME,&LEN,&AREA\n         LCLC  &NM,&LN,&AR\n         LCLC  &NMK,&LNK,&ARK\n         LCLB  &NMB,&LNB,&ARB\n&NDX     SETC  '&SYSNDX'\n         AIF   (N'&PARMS EQ 3).OK1\n         MNOTE 8,'INVALID NUMBER OF PARAMETERS SPECIFIED'\n         MEXIT ,\n.*\n.OK1     ANOP  ,\n&NAME    SETC  '&PARMS(1)'\n&LEN     SETC  '&PARMS(2)'\n&AREA    SETC  '&PARMS(3)'\n.*\n         AIF   ('&NAME'(1,1) EQ '''').NM1\n&NM      SETC  '&NAME'\n         AGO   .NM2\n.NM1     ANOP  ,\n&NM      SETC  'IHB2&NDX'\n&NMK     SETC  '&NAME'\n&NMB     SETB  1\n.NM2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&LEN'(1,1) EQ '''').LN1\n         AIF   ('&LEN'(1,1) GE '0').LN1A\n&LN      SETC  '&LEN'\n         AGO   .LN2\n.LN1     ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '&LEN'\n&LNB     SETB  1\n         AGO   .LN2\n.LN1A    ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '''&LEN'''\n&LNB     SETB  1\n         AGO   .LN2\n.LN2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&AREA'(1,1) EQ '''').AR1\n&AR      SETC  '&AREA'\n         AGO   .AR2\n.AR1     ANOP  ,\n         MNOTE 8,'INVALID OPERAND SPECIFIED FOR AREA'\n         MEXIT ,\n.AR2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         CNOP  0,4\n&ID      BAL   1,IHB1&SYSNDX\n         DC    A(&NM)\n         DC    A(&LN)\n         DC    A(&AR)\n         AIF   (&NMB EQ 0).GN1\nIHB2&NDX DC    CL8&NMK\n.GN1     AIF   (&LNB EQ 0).GN2\nIHB3&NDX DC    F&LNK\n.GN2     AIF   (&ARB EQ 0).GN3\nIHB4&NDX DC    A(&ARK)\n.GN3     ANOP  ,\nIHB1&NDX DS    0H\n         L     15,=V(VGET)\n         BALR  14,15\n         MEND  ,\n./ ADD NAME=$VLOC    8001-75273-75273-1424-00066-00066-00000-TCS3\n         MACRO\n&ID      $VLOC &PARMS\n         LCLC  &NDX\n         LCLC  &NAME,&LEN,&AREA\n         LCLC  &NM,&LN,&AR\n         LCLC  &NMK,&LNK,&ARK\n         LCLB  &NMB,&LNB,&ARB\n&NDX     SETC  '&SYSNDX'\n         AIF   (N'&PARMS EQ 3).OK1\n         MNOTE 8,'INVALID NUMBER OF PARAMETERS SPECIFIED'\n         MEXIT ,\n.*\n.OK1     ANOP  ,\n&NAME    SETC  '&PARMS(1)'\n&LEN     SETC  '&PARMS(2)'\n&AREA    SETC  '&PARMS(3)'\n.*\n         AIF   ('&NAME'(1,1) EQ '''').NM1\n&NM      SETC  '&NAME'\n         AGO   .NM2\n.NM1     ANOP  ,\n&NM      SETC  'IHB2&NDX'\n&NMK     SETC  '&NAME'\n&NMB     SETB  1\n.NM2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&LEN'(1,1) EQ '''').LN1\n         AIF   ('&LEN'(1,1) GE '0').LN1A\n&LN      SETC  '&LEN'\n         AGO   .LN2\n.LN1     ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '&LEN'\n&LNB     SETB  1\n         AGO   .LN2\n.LN1A    ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '''&LEN'''\n&LNB     SETB  1\n         AGO   .LN2\n.LN2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&AREA'(1,1) EQ '''').AR1\n&AR      SETC  '&AREA'\n         AGO   .AR2\n.AR1     ANOP  ,\n         MNOTE 8,'INVALID OPERAND SPECIFIED FOR AREA'\n         MEXIT ,\n.AR2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         CNOP  0,4\n&ID      BAL   1,IHB1&SYSNDX\n         DC    A(&NM)\n         DC    A(&LN)\n         DC    A(&AR)\n         AIF   (&NMB EQ 0).GN1\nIHB2&NDX DC    CL8&NMK\n.GN1     AIF   (&LNB EQ 0).GN2\nIHB3&NDX DC    F&LNK\n.GN2     AIF   (&ARB EQ 0).GN3\nIHB4&NDX DC    A(&ARK)\n.GN3     ANOP  ,\nIHB1&NDX DS    0H\n         L     15,=V(VLOC)\n         BALR  14,15\n         MEND  ,\n./ ADD NAME=$VPUT    8004-74303-74305-1356-00067-00283-00000-TCS3\n         MACRO\n&ID      $VPUT &PARMS\n         LCLC  &NDX\n         LCLC  &NAME,&LEN,&AREA\n         LCLC  &NM,&LN,&AR\n         LCLC  &NMK,&LNK,&ARK\n         LCLB  &NMB,&LNB,&ARB\n&NDX     SETC  '&SYSNDX'\n         AIF   (N'&PARMS EQ 3).OK1\n         MNOTE 8,'INVALID NUMBER OF PARAMETERS SPECIFIED'\n         MEXIT ,\n.*\n.OK1     ANOP  ,\n&NAME    SETC  '&PARMS(1)'\n&LEN     SETC  '&PARMS(2)'\n&AREA    SETC  '&PARMS(3)'\n.*\n         AIF   ('&NAME'(1,1) EQ '''').NM1\n&NM      SETC  '&NAME'\n         AGO   .NM2\n.NM1     ANOP  ,\n&NM      SETC  'IHB2&NDX'\n&NMK     SETC  '&NAME'\n&NMB     SETB  1\n.NM2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&LEN'(1,1) EQ '''').LN1\n         AIF   ('&LEN'(1,1) GE '0').LN1A\n&LN      SETC  '&LEN'\n         AGO   .LN2\n.LN1     ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '&LEN'\n&LNB     SETB  1\n         AGO   .LN2\n.LN1A    ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '''&LEN'''\n&LNB     SETB  1\n         AGO   .LN2\n.LN2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&AREA'(1,1) EQ '''').AR1\n&AR      SETC  '&AREA'\n         AGO   .AR2\n.AR1     ANOP  ,\n&AR      SETC  'IHB4&NDX'\n&ARK     SETC  '&AREA'\n&ARB     SETB  1\n.AR2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         CNOP  0,4\n&ID      BAL   1,IHB1&SYSNDX\n         DC    A(&NM)\n         DC    A(&LN)\n         DC    A(&AR)\n         AIF   (&NMB EQ 0).GN1\nIHB2&NDX DC    CL8&NMK\n.GN1     AIF   (&LNB EQ 0).GN2\nIHB3&NDX DC    F&LNK\n.GN2     AIF   (&ARB EQ 0).GN3\nIHB4&NDX DC    C&ARK\n.GN3     ANOP  ,\nIHB1&NDX DS    0H\n         L     15,=V(VPUT)\n         BALR  14,15\n         MEND  ,\n./ ADD NAME=$VSTO    8003-75273-75273-1424-00067-00066-00000-TCS3\n         MACRO\n&ID      $VSTO &PARMS\n         LCLC  &NDX\n         LCLC  &NAME,&LEN,&AREA\n         LCLC  &NM,&LN,&AR\n         LCLC  &NMK,&LNK,&ARK\n         LCLB  &NMB,&LNB,&ARB\n&NDX     SETC  '&SYSNDX'\n         AIF   (N'&PARMS EQ 3).OK1\n         MNOTE 8,'INVALID NUMBER OF PARAMETERS SPECIFIED'\n         MEXIT ,\n.*\n.OK1     ANOP  ,\n&NAME    SETC  '&PARMS(1)'\n&LEN     SETC  '&PARMS(2)'\n&AREA    SETC  '&PARMS(3)'\n.*\n         AIF   ('&NAME'(1,1) EQ '''').NM1\n&NM      SETC  '&NAME'\n         AGO   .NM2\n.NM1     ANOP  ,\n&NM      SETC  'IHB2&NDX'\n&NMK     SETC  '&NAME'\n&NMB     SETB  1\n.NM2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&LEN'(1,1) EQ '''').LN1\n         AIF   ('&LEN'(1,1) GE '0').LN1A\n&LN      SETC  '&LEN'\n         AGO   .LN2\n.LN1     ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '&LEN'\n&LNB     SETB  1\n         AGO   .LN2\n.LN1A    ANOP  ,\n&LN      SETC  'IHB3&NDX'\n&LNK     SETC  '''&LEN'''\n&LNB     SETB  1\n         AGO   .LN2\n.LN2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         AIF   ('&AREA'(1,1) EQ '''').AR1\n&AR      SETC  '&AREA'\n         AGO   .AR2\n.AR1     ANOP  ,\n&AR      SETC  'IHB4&NDX'\n&ARK     SETC  '&AREA'\n&ARB     SETB  1\n.AR2     ANOP  ,\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         CNOP  0,4\n&ID      BAL   1,IHB1&SYSNDX\n         DC    A(&NM)\n         DC    A(&LN)\n         DC    A(&AR)\n         AIF   (&NMB EQ 0).GN1\nIHB2&NDX DC    CL8&NMK\n.GN1     AIF   (&LNB EQ 0).GN2\nIHB3&NDX DC    F&LNK\n.GN2     AIF   (&ARB EQ 0).GN3\nIHB4&NDX DC    C&ARK\n.GN3     ANOP  ,\nIHB1&NDX DS    0H\n         L     15,=V(VSTO)\n         BALR  14,15\n         MEND  ,\n./ ADD NAME=##LOAD   8000-75303-75303-2131-00064-00064-00000-TCS3\n//FSILOAD JOB (5222),'TOMMY SPRINKLE',\n//        CLASS=A,MSGCLASS=A\n//*\n//FSILOAD PROC  PFX=FSI,\n//        VRM=V1R2M0,\n//        VOLSER=WORK01,\n//        UNIT=3350\n//IEBCOPY EXEC PGM=IEBCOPY\n//SYSPRINT  DD SYSOUT=*\n//*\n//ASM       DD DSN=&PFX..&VRM..ASM,\n            DISP=(NEW,CATLG,DELETE),\n            UNIT=&UNIT,VOL=SER=&VOLSER,\n            SPACE=(CYL,(1,0,36))\n//OBJ       DD DSN=&PFX..&VRM..OBJ,\n            DISP=(NEW,CATLG,DELETE),\n            UNIT=&UNIT,VOL=SER=&VOLSER,\n            SPACE=(CYL,(1,0,36))\n//LOAD      DD DSN=&PFX..&VRM..LOAD,\n            DISP=(NEW,CATLG,DELETE),\n            UNIT=&UNIT,VOL=SER=&VOLSER,\n            SPACE=(CYL,(1,0,36))\n//PLIB      DD DSN=&PFX..&VRM..PLIB,\n            DISP=(NEW,CATLG,DELETE),\n            UNIT=&UNIT,VOL=SER=&VOLSER,\n            SPACE=(CYL,(1,0,36))\n//MLIB      DD DSN=&PFX..&VRM..MLIB,\n            DISP=(NEW,CATLG,DELETE),\n            UNIT=&UNIT,VOL=SER=&VOLSER,\n            SPACE=(CYL,(1,0,36))\n//*\n//*\n//*\n//ASMT      DD DSN=FSI.&VRM..ASMT,\n//          DISP=(OLD,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(1,SL),\n//          VOL=(,RETAIN,SER=FSI120)\n//OBJT      DD DSN=FSI.&VRM..OBJT,\n//          DISP=(OLD,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(2,SL),\n//          VOL=(,RETAIN,REF=*.ASMT)\n//LOADT     DD DSN=FSI.&VRM..LOADT,\n//          DISP=(OLD,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(3,SL),\n//          VOL=(,RETAIN,REF=*.OBJT)\n//PLIBT     DD DSN=FSI.&VRM..PLIBT,\n//          DISP=(OLD,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(4,SL),\n//          VOL=(,RETAIN,REF=*.LOADT)\n//MLIBT     DD DSN=FSI.&VRM..MLIBT,\n//          DISP=(OLD,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(5,SL),\n//          VOL=REF=*.PLIBT\n// PEND\n//*\n//UNLOAD EXEC PROC=FSIUNLD\n//IEBCOPY.SYSIN DD *\n  C O=ASM,I=ASMT\n  C O=OBJ,I=OBJT\n  C O=LOAD,I=LOADT\n  C O=MLIB,I=MLIBT\n  C O=PLIB,I=PLIBT\n/*\n//\n./ ADD NAME=##UNLOAD 8003-75303-75303-2134-00043-00043-00000-TCS3\n//FSIUNLD JOB (5222),'TOMMY SPRINKLE',\n//        CLASS=A,MSGCLASS=A\n//*\n//FSIUNLD PROC  PFX=FSI,\n//        VRM=V1R2M0\n//IEBCOPY EXEC PGM=IEBCOPY\n//SYSPRINT  DD SYSOUT=*\n//ASM       DD DISP=SHR,DSN=&PFX..&VRM..ASM\n//OBJ       DD DISP=SHR,DSN=&PFX..&VRM..OBJ\n//LOAD      DD DISP=SHR,DSN=&PFX..&VRM..LOAD\n//PLIB      DD DISP=SHR,DSN=&PFX..&VRM..PLIB\n//MLIB      DD DISP=SHR,DSN=&PFX..&VRM..MLIB\n//ASMT      DD DSN=&PFX..&VRM..ASMT,\n//          DISP=(NEW,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(1,SL),\n//          VOL=(,RETAIN,SER=FSI120)\n//OBJT      DD DSN=&PFX..&VRM..OBJT,\n//          DISP=(NEW,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(2,SL),\n//          VOL=(,RETAIN,REF=*.ASMT)\n//LOADT     DD DSN=&PFX..&VRM..LOADT,\n//          DISP=(NEW,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(3,SL),\n//          VOL=(,RETAIN,REF=*.OBJT)\n//PLIBT     DD DSN=&PFX..&VRM..PLIBT,\n//          DISP=(NEW,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(4,SL),\n//          VOL=(,RETAIN,REF=*.LOADT)\n//MLIBT     DD DSN=&PFX..&VRM..MLIBT,\n//          DISP=(NEW,KEEP,KEEP),\n//          UNIT=TAPE,LABEL=(5,SL),\n//          VOL=REF=*.PLIBT\n// PEND\n//*\n//UNLOAD EXEC PROC=FSIUNLD\n//IEBCOPY.SYSIN DD *\n  C I=ASM,O=ASMT\n  C I=OBJ,O=OBJT\n  C I=LOAD,O=LOADT\n  C I=PLIB,O=PLIBT\n  C I=MLIB,O=MLIBT\n/*\n//\n./ ADD NAME=#ASM     8001-75273-75273-1426-00036-00033-00000-TCS3\n//FSIASM   JOB 5222,'SPRINKLE',CLASS=A,MSGCLASS=A,\n//        MSGLEVEL=(1,1)\n//TCSASM PROC M=\n//ASM      EXEC  PGM=IFOX00,REGION=1024K,\n//         PARM='LINECOUNT(45)'\n//SYSLIB   DD    DISP=SHR,DSN=SYS1.MACLIB\n//         DD    DISP=SHR,DSN=SYS1.AMODGEN\n//         DD    DISP=SHR,DSN=FSI.V1R2M0.ASM\n//SYSUT1   DD    DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD    DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD    DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD    SYSOUT=*\n//SYSPUNCH DD    DISP=SHR,DSN=FSI.V1R2M0.OBJ(&M)\n//SYSIN    DD    DISP=SHR,DSN=FSI.V1R2M0.ASM(&M)\n//   PEND\n//FSISTART EXEC TCSASM,M=FSISTART\n//FSISTUB  EXEC TCSASM,M=FSISTUB\n//FSIDSPLY EXEC TCSASM,M=FSIDSPLY\n//FSIERMSG EXEC TCSASM,M=FSIERMSG\n//FSIPANL  EXEC TCSASM,M=FSIPANL\n//FSISCRN  EXEC TCSASM,M=FSISCRN\n//FSIVPUT  EXEC TCSASM,M=FSIVPUT\n//FSIVGET  EXEC TCSASM,M=FSIVGET\n//FSIPDS   EXEC TCSASM,M=FSIPDS\n//FSIFUNC  EXEC TCSASM,M=FSIFUNC\n//FSIDFLT  EXEC TCSASM,M=FSIDFLT\n//VARPOOL  EXEC TCSASM,M=VARPOOL\n//FSIVDEF  EXEC TCSASM,M=FSIVDEF\n//FSIVLOC  EXEC TCSASM,M=FSIVLOC\n//FSIVSTO  EXEC TCSASM,M=FSIVSTO\n//VARDEFS  EXEC TCSASM,M=VARDEFS\n//FSIVDEF  EXEC TCSASM,M=FSIVDEF\n//FSIVSTO  EXEC TCSASM,M=FSIVSTO\n//FSIVLOC  EXEC TCSASM,M=FSIVLOC\n//\n//*\n./ ADD NAME=#CMP     8001-74304-75273-1425-00015-00015-00000-TCS3\n//COMPRESS JOB (5222),'SPRINKLE',CLASS=A,MSGCLASS=A\n//COMPRESS EXEC PGM=IEBCOPY\n//SYSPRINT DD   SYSOUT=*\n//ASM      DD   DISP=SHR,DSN=FSI.V1R2M0.ASM\n//OBJ      DD   DISP=SHR,DSN=FSI.V1R2M0.OBJ\n//MLIB     DD   DISP=SHR,DSN=FSI.V1R2M0.MLIB\n//PLIB     DD   DISP=SHR,DSN=FSI.V1R2M0.PLIB\n//LOAD     DD   DISP=SHR,DSN=FSI.V1R2M0.LOAD\n//SYSIN    DD   *\n C I=ASM,O=ASM\n C I=OBJ,O=OBJ\n C I=MLIB,O=MLIB\n C I=PLIB,O=PLIB\n C I=LOAD,O=LOAD\n/*\n./ ADD NAME=#LINK    8014-74288-74303-1627-00022-00022-00000-TCS3\n//TCS3LINK JOB 5222,'LINK EDIT',CLASS=A,MSGCLASS=A,\n//         MSGLEVEL=(1,1) NOTIFY=TCS3\n//*\n//COPY     EXEC PGM=IEBGENER\n//SYSPRINT   DD SYSOUT=*\n//SYSIN      DD DUMMY\n//SYSUT1     DD DISP=SHR,DSN=TCS3.FSI.OBJ(TESTR1)\n//           DD DISP=SHR,DSN=TCS3.FSI.OBJ(FSISTUB)\n//SYSUT2     DD DSN=TCS3.MVS.TEMPLINK,\n//           DISP=(NEW,CATLG,DELETE),\n//           DCB=(BLKSIZE=80,LRECL=80,RECFM=F),\n//           UNIT=3350,SPACE=(CYL,(1,1))\n//*\n//*\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL',REGION=1024K\n//SYSPRINT DD  SYSOUT=A\n//SYSLIN   DD  DSN=TCS3.MVS.TEMPLINK,DISP=(OLD,DELETE,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=TCS3.FSI.LOAD(T)\n//SYSUT1   DD  UNIT=3350,\n//         SPACE=(1024,(200,20))\n//*\n//\n./ ADD NAME=#LINKENV 8006-74303-75273-1536-00072-00029-00000-TCS3\n//TCS3LINK JOB 5222,'LINK FSISTART',CLASS=A,MSGCLASS=A,\n//         MSGLEVEL=(1,1)\n//*\n//COPY     EXEC PGM=IEBGENER\n//SYSPRINT   DD SYSOUT=*\n//SYSIN      DD DUMMY\n//SYSUT1     DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSISTART)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSISCRN)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIPANL)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIERMSG)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIDSPLY)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIVGET)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIVPUT)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIPDS)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIVDEF)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIVLOC)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIVSTO)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(VARPOOL)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(VARDEFS)\n//SYSUT2     DD DSN=&&FSISTART,\n//           DISP=(NEW,PASS,DELETE),\n//           DCB=(BLKSIZE=80,LRECL=80,RECFM=F),\n//           UNIT=3350,SPACE=(CYL,(1,1))\n//*\n//*\n//FSISTART EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL',REGION=1024K\n//SYSPRINT DD  SYSOUT=A\n//SYSLIN   DD  DSN=&&FSISTART,DISP=(OLD,DELETE,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=FSI.V1R2M0.LOAD(FSISTART)\n//SYSUT1   DD  UNIT=3350,\n//         SPACE=(1024,(200,20))\n//*\n//*-------------------------------------------------------------------\n//*\n//COPY     EXEC PGM=IEBGENER\n//SYSPRINT   DD SYSOUT=*\n//SYSIN      DD DUMMY\n//SYSUT1     DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIFUNC)\n//SYSUT2     DD DSN=&&FSIFUNC,\n//           DISP=(NEW,PASS,DELETE),\n//           DCB=(BLKSIZE=80,LRECL=80,RECFM=F),\n//           UNIT=3350,SPACE=(CYL,(1,1))\n//*\n//*\n//FSIFUNC  EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL',REGION=1024K\n//SYSPRINT DD  SYSOUT=A\n//SYSLIN   DD  DSN=&&FSIFUNC,DISP=(OLD,DELETE,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=FSI.V1R2M0.LOAD(FSIFUNC)\n//SYSUT1   DD  UNIT=3350,\n//         SPACE=(1024,(200,20))\n//*\n//*-------------------------------------------------------------------\n//*\n//COPY     EXEC PGM=IEBGENER\n//SYSPRINT   DD SYSOUT=*\n//SYSIN      DD DUMMY\n//SYSUT1     DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSIDFLT)\n//           DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSISTUB)\n//SYSUT2     DD DSN=&&FSIFUNC,\n//           DISP=(NEW,PASS,DELETE),\n//           DCB=(BLKSIZE=80,LRECL=80,RECFM=F),\n//           UNIT=3350,SPACE=(CYL,(1,1))\n//*\n//*\n//FSIDFLT  EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL',REGION=1024K\n//SYSPRINT DD  SYSOUT=A\n//SYSLIN   DD  DSN=&&FSIFUNC,DISP=(OLD,DELETE,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=FSI.V1R2M0.LOAD(FSIDFLT)\n//SYSUT1   DD  UNIT=3350,\n//         SPACE=(1024,(200,20))\n//*\n//\n./ ADD NAME=#SAMPC01 8004-75274-75274-1444-00041-00037-00000-TCS3\n//SAMPC01  JOB 5222,'SPRINKLE',CLASS=A,MSGCLASS=A,\n//        MSGLEVEL=(1,1)\n//COB      EXEC  PGM=IKFCBL00,REGION=4096K,\n//         PARM='LOAD,SUPMAP,SIZE=2048K,BUF=1024K'\n//SYSLIB   DD    DISP=SHR,DSN=SYS1.MACLIB\n//         DD    DISP=SHR,DSN=SYS1.AMODGEN\n//         DD    DISP=SHR,DSN=FSI.V1R2M0.ASM\n//SYSUT1   DD    DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD    DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD    DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT4   DD    DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD    SYSOUT=*\n//SYSIN    DD    DISP=SHR,DSN=FSI.V1R2M0.ASM(SAMPC01)\n//*\n//SYSLIN   DD    DISP=SHR,DSN=FSI.V1R2M0.OBJ(SAMPC01)\n//SYSPUNCH DD    DUMMY\n//*\n//*-------------------------------------------------------------------\n//*\n//COPY     EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSUT1   DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(SAMPC01)\n//         DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSISTUB)\n//SYSUT2   DD DSN=&&TEMPLINK,\n//         DISP=(NEW,PASS,DELETE),\n//         DCB=(BLKSIZE=80,LRECL=80,RECFM=F),\n//         UNIT=3350,SPACE=(CYL,(1,1))\n//*\n//*-------------------------------------------------------------------\n//*\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,LET',REGION=1024K\n//SYSPRINT DD  SYSOUT=A\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.COBLIB\n//         DD  DISP=SHR,DSN=SYS1.LINKLIB\n//SYSLIN   DD  DSN=&&TEMPLINK,DISP=(OLD,DELETE,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=FSI.V1R2M0.LOAD(SAMPC01)\n//SYSUT1   DD  UNIT=3350,\n//         SPACE=(1024,(200,20))\n//*\n//\n./ ADD NAME=#SAMP01  8003-74304-75273-1429-00037-00034-00000-TCS3\n//SAMP01   JOB 5222,'SPRINKLE',CLASS=A,MSGCLASS=A,\n//        MSGLEVEL=(1,1)\n//ASM      EXEC  PGM=IFOX00,REGION=1024K,\n//         PARM='LINECOUNT(45)'\n//SYSLIB   DD    DISP=SHR,DSN=SYS1.MACLIB\n//         DD    DISP=SHR,DSN=SYS1.AMODGEN\n//         DD    DISP=SHR,DSN=FSI.V1R2M0.ASM\n//SYSUT1   DD    DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD    DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD    DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD    SYSOUT=*\n//SYSIN    DD    DISP=SHR,DSN=FSI.V1R2M0.ASM(SAMP01)\n//*\n//SYSPUNCH DD    DISP=SHR,DSN=FSI.V1R2M0.OBJ(SAMP01)\n//*\n//*-------------------------------------------------------------------\n//*\n//COPY     EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSUT1   DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(SAMP01)\n//         DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSISTUB)\n//SYSUT2   DD DSN=&&TEMPLINK,\n//         DISP=(NEW,PASS,DELETE),\n//         DCB=(BLKSIZE=80,LRECL=80,RECFM=F),\n//         UNIT=3350,SPACE=(CYL,(1,1))\n//*\n//*-------------------------------------------------------------------\n//*\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL',REGION=1024K\n//SYSPRINT DD  SYSOUT=A\n//SYSLIN   DD  DSN=&&TEMPLINK,DISP=(OLD,DELETE,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=FSI.V1R2M0.LOAD(SAMP01)\n//SYSUT1   DD  UNIT=3350,\n//         SPACE=(1024,(200,20))\n//*\n//\n./ ADD NAME=#SAMP02  8003-74304-75273-1430-00037-00037-00000-TCS3\n//SAMP02   JOB 5222,'SPRINKLE',CLASS=A,MSGCLASS=A,\n//        MSGLEVEL=(1,1)\n//ASM      EXEC  PGM=IFOX00,REGION=1024K,\n//         PARM='LINECOUNT(45)'\n//SYSLIB   DD    DISP=SHR,DSN=SYS1.MACLIB\n//         DD    DISP=SHR,DSN=SYS1.AMODGEN\n//         DD    DISP=SHR,DSN=FSI.V1R2M0.ASM\n//SYSUT1   DD    DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD    DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD    DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD    SYSOUT=*\n//SYSIN    DD    DISP=SHR,DSN=FSI.V1R2M0.ASM(SAMP02)\n//*\n//SYSPUNCH DD    DISP=SHR,DSN=FSI.V1R2M0.OBJ(SAMP02)\n//*\n//*-------------------------------------------------------------------\n//*\n//COPY     EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSUT1   DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(SAMP02)\n//         DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSISTUB)\n//SYSUT2   DD DSN=&&TEMPLINK,\n//         DISP=(NEW,PASS,DELETE),\n//         DCB=(BLKSIZE=80,LRECL=80,RECFM=F),\n//         UNIT=3350,SPACE=(CYL,(1,1))\n//*\n//*-------------------------------------------------------------------\n//*\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL',REGION=1024K\n//SYSPRINT DD  SYSOUT=A\n//SYSLIN   DD  DSN=&&TEMPLINK,DISP=(OLD,DELETE,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=FSI.V1R2M0.LOAD(SAMP02)\n//SYSUT1   DD  UNIT=3350,\n//         SPACE=(1024,(200,20))\n//*\n//\n./ ADD NAME=#SAMP03  8001-75302-75302-1811-00037-00037-00000-TCS3\n//SAMP03   JOB 5222,'SPRINKLE',CLASS=A,MSGCLASS=A,\n//        MSGLEVEL=(1,1)\n//ASM      EXEC  PGM=IFOX00,REGION=1024K,\n//         PARM='LINECOUNT(45)'\n//SYSLIB   DD    DISP=SHR,DSN=SYS1.MACLIB\n//         DD    DISP=SHR,DSN=SYS1.AMODGEN\n//         DD    DISP=SHR,DSN=FSI.V1R2M0.ASM\n//SYSUT1   DD    DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD    DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD    DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD    SYSOUT=*\n//SYSIN    DD    DISP=SHR,DSN=FSI.V1R2M0.ASM(SAMP03)\n//*\n//SYSPUNCH DD    DISP=SHR,DSN=FSI.V1R2M0.OBJ(SAMP03)\n//*\n//*-------------------------------------------------------------------\n//*\n//COPY     EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSUT1   DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(SAMP03)\n//         DD DISP=SHR,DSN=FSI.V1R2M0.OBJ(FSISTUB)\n//SYSUT2   DD DSN=&&TEMPLINK,\n//         DISP=(NEW,PASS,DELETE),\n//         DCB=(BLKSIZE=80,LRECL=80,RECFM=F),\n//         UNIT=3350,SPACE=(CYL,(1,1))\n//*\n//*-------------------------------------------------------------------\n//*\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL',REGION=1024K\n//SYSPRINT DD  SYSOUT=A\n//SYSLIN   DD  DSN=&&TEMPLINK,DISP=(OLD,DELETE,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=FSI.V1R2M0.LOAD(SAMP03)\n//SYSUT1   DD  UNIT=3350,\n//         SPACE=(1024,(200,20))\n//*\n//\n./ ADD NAME=FSIDFLT  8004-74303-74303-1720-00067-00062-00000-TCS3\nFSIDFLT  CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING FSIDFLT,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n*\n*/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z\n*\n*\nDISPLAY  DS    0H\n         $DISPLAY ('FSIDFLT')\n*\n*\n         $VGET ('ZCMD','50',ZCMD)\n*\n*\n         OC    ZCMD,=CL50' '\n         CLC   =C'END ',ZCMD\n         B     EXIT\n         B     DISPLAY\n*\n*\nEXIT      DS    0H\n          L     R13,4(,R13)\n          LM    R14,R12,12(R13)\n          SLR   R15,R15\n          BR    R14\n*\n*\n          LTORG ,\n*\n*\nMSG       DC    CL8' '\nCSR       DC    CL8' '\n*\n*\nSAVEA     DC    18F'0'\n*\n*\nZCMD      DC    CL50' '\n*\n*\nR0        EQU   0\nR1        EQU   1\nR2        EQU   2\nR3        EQU   3\nR4        EQU   4\nR5        EQU   5\nR6        EQU   6\nR7        EQU   7\nR8        EQU   8\nR9        EQU   9\nR10       EQU   10\nR11       EQU   11\nR12       EQU   12\nR13       EQU   13\nR14       EQU   14\nR15       EQU   15\n*\n*\n          END   ,\n./ ADD NAME=FSIDSPLY 8005-74303-74303-1443-00058-00057-00000-TCS3\nDISPLAY  CSECT ,\n         SAVE  (14,12),,*\n         LR    R12,R15\n         USING DISPLAY,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n         LR    R11,R1             PARAMETER LIST\n*\n         L     R1,0(,R11)\n         ST    R1,PNLPARM+0\n         L     R1,8(,R11)\n         ST    R1,PNLPARM+8\n*\n         L     R1,4(,R11)        POINT TO MESSAGE\n         LTR   R1,R1             ANY\n         BZ    MSG010\n*\n         LA    R1,4(,R11)\n         L     R15,=V(FSIERMSG)\n         BALR  R14,R15\n         L     R1,0(,R1)\n*\nMSG010   DS    0H\n         ST    R1,PNLPARM+4\n*\n         LA    R1,PNLPARM\n         L     R15,=V(FSIPANL)\n         BALR  R14,R15\n*\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         LM    R0,12,20(R13)\n         BR    R14\n*\nSAVEA    DS    18F\nPNLPARM  DC    A(0,0,0)\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n./ ADD NAME=FSIERMSG 8006-74301-74302-1617-00305-00287-00000-TCS3\nFSIERMSG CSECT ,\n         SAVE  (14,12),,*\n         LR    R12,R15\n         USING FSIERMSG,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n         LR    R11,R1             SAVE INPUT PARM LIST\n*\n         L     R2,0(,R11)         GET MESSAGE ID\n         LA    R3,8               MAX LENGTH\n         LA    R9,0\n         MVC   PDSMBR,=CL8' '\n         LA    R4,PDSMBR\n*\nINIT010  DS    0H\n         CLI   0(R2),C' '         END OF MESSAGE ID?\n         BE    INIT022\n*\n         LTR   R3,R3              CHECK LENGTH\n         BNP   INIT022            -- TOO LONG\n*\n         MVC   0(1,R4),0(R2)\n         LA    R2,1(,R2)\n         LA    R4,1(,R4)\n         S     R3,=F'1'\n         LA    R9,1(,R9)\n         B     INIT010\n*\n*\nINIT020  DS    0H\n         LA    R1,1               INVALID MESSAGE ID\n         B     ERRORXIT\n*\n*\nINIT022  DS    0H\n         CLC   =CL8' ',PDSMBR\n         BE    INIT020\n*\n         MVC   MSGID,PDSMBR\n         BCTR  R4,0\n         MVI   0(R4),C' '         REMOVE LAST CHAR\n*\nINIT025  DS    0H\n         LA    R1,PDSPARAM        POINT TO PARAM LIST\n         L     R15,=V(FSIPDS)\n         BALR  R14,R15            CALL ROUTINE\n         B     *+4(R15)           CHECK RC\n         B     INIT060            OK\n         B     INIT180            EOF\n         B     INIT030            ERROR\n*\nINIT030  DS    0H\n         LR    R1,R0\n         B     *+4(R1)\n         B     INIT040\n         B     INIT040\n         B     INIT050\n*\n*\nINIT040  DS    0H\n         LA    R1,2          PDS MEMBER NOT FOUND\n         B     ERRORXIT\n*\n*\nINIT050  DS    0H            FILE FAILED TO OPEN\n         LA    R1,3\n         B     ERRORXIT\n*\n*\nINIT060  DS    0H            FILE FAILED TO OPEN\n         L     R1,PDSLRECL\n         C     R1,=F'80'     VERIFY LRECL\n         BE    INIT070       BRANCH IF OK\n*\n         LA    R1,4          INVALID LRECL\n         B     ERRORXIT\n*\n*\nINIT070  DS    0H\n         L     R2,PDSREC\n         LR    R1,R9\n         BCTR  R1,0\n         EX    R1,INITCLC\n*INITCLC CLC   0(1,R2),MSGID\n         BNE   INIT025\n*\n         LA    R3,80\nINIT080  DS    0H\n         CLI   0(R2),C' '\n         BE    INIT100\n         LA    R2,1(,R2)\n         BCT   R3,INIT080\n*\nINIT090  DS    0H\n         LA    R1,5          INVALID MESSAGE FORMAT\n         B     ERRORXIT\n*\n*\nINIT100  DS    0H\n         LA    R2,1(,R2)\n         S     R3,=F'1'\n         BNP   INIT090\n*\nINIT110  DS    0H\n         CLI   0(R2),C' '\n         BNE   INIT120\n         LA    R2,1(,R2)\n         BCT   R3,INIT110\n         B     INIT090\n*\n*\nINIT120  DS    0H\n         CLI   0(R2),C''''        EXPECTING A QUOTE\n         BNE   INIT090\n*\n         LA    R2,1(,R2)\n         S     R3,=F'1'\n         BNP   INIT090\n*\n         MVI   SHORTMSG,C' '\n         MVC   SHORTMSG+1(L'SHORTMSG-1),SHORTMSG\n         MVI   LONGMSG,C' '\n         MVC   LONGMSG+1(L'LONGMSG-1),LONGMSG\n         LA    R4,SHORTMSG\n         LA    R5,L'SHORTMSG\n*\nINIT130  DS    0H\n         CLI   0(R2),C''''        END OF MESSAGE?\n         BNE   INIT135            NO - BRANCH\n*\n         CLI   1(R2),C''''        DOUBLE QUOTES?\n         BNE   INIT140            YES - BRANCH\n*\n         LA    R2,1(,R2)          SKIP OVER SECOND QUOTE\n         S     R3,=F'1'           SUBTRACT ONE FROM LENGTH\n         BNP   INIT090\n*\nINIT135  DS    0H\n         LTR   R5,R5\n         BNP   INIT090\n*\n         MVC   0(1,R4),0(R2)\n         LA    R4,1(,R4)\n         LA    R2,1(,R2)\n         S     R5,=F'1'\n         BCT   R3,INIT130\n         B     INIT090\n*\n*\nINIT140  DS    0H\n         LA    R1,PDSPARAM        POINT TO PARAM LIST\n         L     R15,=V(FSIPDS)\n         BALR  R14,R15            CALL ROUTINE\n         B     *+4(R15)           CHECK RC\n         B     INIT150            OK\n         B     INIT175            EOF\n         B     INIT030            ERROR\n*\n*\nINIT150  DS    0H\n         L     R2,PDSREC          POINT TO INPUT RECORD\n         CLI   0(R2),C''''        EXPECTING ONLY A QUOTE\n         BNE   INIT175            NO -  NO LONG MESSAGE\n*\n         LA    R2,1(,R2)\n         L     R3,PDSLRECL\n         BCTR  R3,0\n         LA    R4,LONGMSG\n         LA    R5,L'LONGMSG\n*\nINIT160  DS    0H\n         CLI   0(R2),C''''         LOOK FOR END OF MSG\n         BNE   INIT170             NO - MOVE IT\n*\n         CLI   1(R2),C''''         TWO SIDE-BY-SIDE?\n         BNE   INIT175             NO - END OF THE MSG\n*\n         LA    R2,1(,R2)\n         S     R3,=F'1'\n*\nINIT170  DS    0H\n         LTR   R5,R5\n         BNP   INIT090\n*\n         MVC   0(1,R4),0(R2)\n         LA    R2,1(,R2)\n         LA    R4,1(,R4)\n         S     R3,=F'1'\n         S     R5,=F'1'\n         BNP   INIT090\n         B     INIT160\n*\n*\nINIT175  DS    0H\n         MVC   PDSMBR,=CL8'********'\n         LA    R1,PDSPARAM        POINT TO PARAM LIST\n         L     R15,=V(FSIPDS)\n         BALR  R14,R15            CALL ROUTINE\n*\n         B     VARS010            GO PLUG IN VARIABLES...\n*\n*\nINIT180  DS    0H\n         LA    R1,6               MESSAGE NOT FOUND\n         B     ERRORXIT\n*\n*\nVARS010  DS    0H\n         B     SCAN010            GO DETERMINE MESSAGE LENGTHS\n*\n*\nSCAN010  DS    0H\n         LA    R4,SHORTMSG\n         LA    R4,L'SHORTMSG-1(,R4)  POINT TO END OF MSG\n         LA    R5,L'SHORTMSG\n*\nSCAN020  DS    0H\n         CLI   0(R4),C' '\n         BNE   SCAN030            FOUND END OF MSG\n*\n         BCTR  R4,0\n         BCT   R5,SCAN020\n*\nSCAN030  DS    0H\n         STH   R5,SHORTLEN        SAVE MSG LENGTH\n*\n         LA    R4,LONGMSG\n         LA    R4,L'LONGMSG-1(,R4)  POINT TO END OF MSG\n         LA    R5,L'LONGMSG\n*\nSCAN040  DS    0H\n         CLI   0(R4),C' '\n         BNE   SCAN050            FOUND END OF MSG\n*\n         BCTR  R4,0\n         BCT   R5,SCAN040\n*\nSCAN050  DS    0H\n         STH   R5,LONGLEN        SAVE MSG LENGTH\n*\n*\n         LA    R1,RETPARM\n         L     R13,4(,R13)        UNCHAIN SA\n         L     R14,12(,R13)\n         LM    R2,R12,28(R13)\n         SLR   R15,R15\n         BR    R14                RETURN TO CALLER\n*\n*\nERRORXIT DS    0H\n         LR    R0,R1              SAVE ERROR CODE\n         XC    SHORTLEN,SHORTLEN\n         XC    LONGLEN,LONGLEN\n         LA    R1,RETPARM\n         L     R13,4(,R13)        UNCHAIN SA\n         L     R14,12(,R13)\n         LM    R2,R12,28(R13)\n         LA    R15,8\n         BR    R14                RETURN TO CALLER\n*\n*\nINITCLC  CLC   0(1,R2),MSGID       EXECUTED COMPARE\n*\n*\nRETPARM  DC    A(SHORTLEN,LONGLEN)\n*\nPDSPARAM DC    A(PDSMBR,PDSREC,PDSLRECL,PDSDDN)\nPDSREC   DC    A(0)\nPDSLRECL DC    F'0'\nPDSMBR   DC    CL8' '\nPDSDDN   DC    CL8'FSIMLIB'\n*\nMSGID    DC    CL8' '\n*\nSHORTLEN DC    H'0'\nSHORTMSG DC    CL70' '\nLONGLEN  DC    H'0'\nLONGMSG  DC    CL70' '\n*\n*\nSAVEA    DC    18F'0'\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         END   ,\n./ ADD NAME=FSIFUNC  8001-74303-75273-1537-00006-00005-00000-TCS3\nFSIFUNC  CSECT ,\n         DC    A(0)     VGET\n         DC    A(0)     VPUT\n         DC    A(0)     DISPLAY\n         DC    A(0)     VDEFINE\n         END   ,\n./ ADD NAME=FSIPANL  8036-74296-75273-1534-00714-00022-00000-TCS3\nFSIPANL  CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING FSIPANL,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n         LR    R11,R1             SAVE INPUT PARMS\n*\n         MVI   ATTRLIST,0\n         MVC   ATTRLIST+1(L'ATTRLIST-1),ATTRLIST\n         MVI   ATTRLIST+0,C'%'\n         MVI   ATTRLIST+1,ECT$TXTH\n         MVI   ATTRLIST+2,C'+'\n         MVI   ATTRLIST+3,ECT$TXTL\n         MVI   ATTRLIST+4,C'_'\n         MVI   ATTRLIST+5,ECT$INL\n*\n         MVI   ATTRLIST+6,X'FF'\n         MVI   ATTRLIST+7,X'FF'\n*\n         L     R10,0(,R11)        GET PANEL NAME\n         MVC   PDSMBR,0(R10)      MOVE IN PANEL NAME\n         MVC   PDSDDNM,=CL8'FSIPLIB'  MOVE IN DDNAME\n*\n         LA    R1,PDSPARM\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n         B     *+4(R15)           CHECK RC\n         B     START000           OK\n         B     ERROR01            EOF\n         B     ERROR02            ERROR\n*\n*\nSTART000 DS    0H\n         L     R4,PDSREC          POINT TO RECORD\n         CLC   =C')ATTR ',0(R4)   ATTR SECTION ?\n         BE    ATTR010            YES - BRANCH\n*\n         CLC   =C')BODY ',0(R4)   BODY SECTION ?\n         BE    BODY010            YES - BRANCH\n*\n         B     ERROR03            ELSE - ERROR\n*\n*\nATTR010  DS    0H\n         LA    R4,6(,R4)          SKIP OVER )BODY\n         LA    R5,74              LENGTH\nATTR020  DS    0H\n         CLI   0(R4),C' '         SKIP OVER SPACES\n         BNE   ATTR030\n         LA    R4,1(,R4)\n         BCT   R5,ATTR020         LOOP BACK\n         B     ATTR040            NO DEFAULT ATTRS...\n*\n*\nATTR030  DS    0H\n         C     R5,=F'12'          OUT OF ROOM?\n         BL    ERROR04\n*\n         CLC   =C'DEFAULT(',0(R4)   WHAT WE EXPECT\n         BNE   ERROR05\n*\n         LA    R4,8(,R4)\n         S     R5,=F'8'\n         CLC   =C') ',3(R4)       CLOSING PAREN?\n         BNE   ERROR06\n*\n         MVC   ATTRLIST+0(1),0(R4)\n         MVC   ATTRLIST+2(1),1(R4)\n         MVC   ATTRLIST+4(1),2(R4)\n*\nATTR040  DS    0H\n         LA    R1,PDSPARM\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n         B     *+4(R15)           CHECK RC\n         B     ATTR050            OK\n         B     ERROR07            EOF\n         B     ERROR08            ERROR\n*\n*\nATTR050  DS    0H\n         L     R4,PDSREC          POINT TO INPUT RECORD\n         LA    R5,80\n*\n         CLC   =C')BODY ',0(R4)   START OF BODY SECTION?\n         BE    BODY010            YES - BRANCH\n*\nATTR060  DS    0H\n         CLI   0(R4),C' '         SKIP OVER BLANKS\n         BNE   ATTR070\n         LA    R4,1(,R4)\n         BCT   R5,ATTR060\n         B     ATTR050            BLANK LINE / IGNORE\n*\n*\nATTR070  DS    0H\n         CLI   1(R4),C' '         MUST BE SINGLE CHAR\n         BNE   ERROR09\n*\n         MVC   ATTRCHAR,0(R4)     SAVE IT\n         MVI   ATTRTYPE,ECT$TEXT  DEFAULT IS TEXT\n         MVI   ATTRINTN,ECT$LOW   DEFAULT IS LOW\n         MVI   ATTRCAPS,C'Y'      DEFAULT IS YES\n*\n         LA    R4,2(,R4)\n         S     R5,=F'2'\n         BNP   ATTR210            BRANCH IF DONE\n*\nATTR080  DS    0H\n         CLI   0(R4),C' '\n         BNE   ATTR090\n         LA    R4,1(,R4)\n         BCT   R5,ATTR080\n         B     ATTR210\n*\n*\nATTR090  DS    0H\n         CLC   =C'TYPE(',0(R4)\n         BE    ATTR100\n*\n         CLC   =C'INTENS(',0(R4)\n         BE    ATTR140\n*\n         CLC   =C'CAPS(',0(R4)\n         BE    ATTR180\n*\n         B     ERROR10\n*\n*\nATTR100  DS    0H\n         LA    R4,5(,R4)\n         S     R5,=F'5'\n         BNP   ERROR11\n*\n         CLC   =C'TEXT)',0(R4)\n         BE    ATTR110\n*\n         CLC   =C'INPUT)',0(R4)\n         BE    ATTR120\n*\n         CLC   =C'OUTPUT)',0(R4)\n         BE    ATTR130\n*\n         B     ERROR12\n*\n*\nATTR110  DS    0H\n         MVI   ATTRTYPE,ECT$TEXT\n         LA    R4,5(,R4)\n         S     R5,=F'5'\n         BNP   ERROR13\n         B     ATTR080\n*\nATTR120  DS    0H\n         MVI   ATTRTYPE,ECT$IN\n         LA    R4,6(,R4)\n         S     R5,=F'6'\n         BNP   ERROR14\n         B     ATTR080\n*\nATTR130  DS    0H\n         MVI   ATTRTYPE,ECT$OUT\n         LA    R4,7(,R4)\n         S     R5,=F'7'\n         BNP   ERROR15\n         B     ATTR080\n*\n*\nATTR140  DS    0H\n         LA    R4,7(,R4)\n         S     R5,=F'7'\n         BNP   ERROR41\n*\n         CLC   =C'HIGH)',0(R4)\n         BE    ATTR150\n*\n         CLC   =C'LOW)',0(R4)\n         BE    ATTR160\n*\n         CLC   =C'NON)',0(R4)\n         BE    ATTR170\n*\n         B     ERROR16\n*\n*\nATTR150  DS    0H\n         MVI   ATTRINTN,ECT$HI\n         LA    R4,5(,R4)\n         S     R5,=F'5'\n         BNP   ERROR17\n         B     ATTR080\n*\nATTR160  DS    0H\n         MVI   ATTRINTN,ECT$LOW\n         LA    R4,4(,R4)\n         S     R5,=F'4'\n         BNP   ERROR18\n         B     ATTR080\n*\nATTR170  DS    0H\n         MVI   ATTRINTN,ECT$NON\n         LA    R4,4(,R4)\n         S     R5,=F'4'\n         BNP   ERROR19\n         B     ATTR080\n*\n*\nATTR180  DS    0H\n         CLC   =C'OFF)',0(R4)\n         BE    ATTR190\n*\n         CLC   =C'ON)',0(R4)\n         BE    ATTR200\n*\n         B     ERROR20\n*\n*\nATTR190  DS    0H\n         MVI   ATTRCAPS,C'N'\n         LA    R4,4(,R4)\n         S     R5,=F'4'\n         BNP   ERROR21\n         B     ATTR080\n*\nATTR200  DS    0H\n         MVI   ATTRCAPS,C'7'\n         LA    R4,3(,R4)\n         S     R5,=F'3'\n         BNP   ERROR22\n         B     ATTR080\n*\n*\nATTR210  DS    0H\n         LA    R1,ATTRLIST\nATTR220  DS    0H\n         CLI   0(R1),X'FF'\n         BE    ATTR230\n*\n         LA    R1,2(,R1)\n         B     ATTR220\n*\n*\nATTR230  DS    0H\n         MVC   0(1,R1),ATTRCHAR\n         MVC   1(1,R1),ATTRTYPE\n         OC    1(1,R1),ATTRINTN\n*\n         MVI   2(R1),X'FF'\n         MVI   3(R1),X'FF'\n*\n*\n         B     ATTR040\nBODY010  DS    0H\n         GETMAIN R,LV=1920    GETMAIN BODY AREA\n         ST    R1,PANEL\n         LR    R0,R1\n         LA    R1,1920\n         SLR   R14,R15\n         SLR   R15,R15\n         MVCL  R0,R14\n*\n         L     R4,PANEL\n         LA    R5,0\n*\nBODY020  DS    0H\n         LA    R1,PDSPARM\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n         B     *+4(R15)           CHECK RC\n         B     BODY030            OK\n         B     END010             EOF\n         B     ERROR23            ERROR\n*\n*\nBODY030  DS    0H\n         L     R2,PDSREC          POINT TO INPUT RECORD\n         CLC   =C')END ',0(R2)    END OF PANEL DEF?\n         BE    END010             YES -BRANCH\n*\n         CLC   =C')PROC ',0(R2)\n         BE    PROC010\n*\n         C     R5,=F'24'\n         BNL   ERROR23            TOO MANY LINES....\n*\n*\n         MVC   0(80,R4),0(R2)\n         LA    R4,80(,R4)\n         LA    R5,1(,R5)\n         B     BODY020\n*\n*\nPROC010  DS    0H\n         GETMAIN R,LV=8000\n         ST    R1,ZVARS\n         LR    R6,R1\n         LR    R0,R1\n         L     R1,=A(8000)\n         SLR   R14,R15\n         SLR   R15,R15\n         MVCL  R0,R14\n*\n         MVC   0(8,R6),=XL8'FFFFFFFFFFFFFFFF'\n*\n         LA    R1,PDSPARM\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n         B     *+4(R15)           CHECK RC\n         B     PROC020            OK\n         B     END010             EOF\n         B     ERROR24            ERROR\n*\n*\nPROC020  DS    0H\n         L     R4,PDSREC\n         LA    R5,80\n         CLC   =C')END ',0(R4)\n         BE    END010\n*\nPROC030  DS    0H\n         CLI   0(R4),C' '\n         BNE   PROC040\n         LA    R4,1(,R4)\n         BCT   R5,PROC030\n         B     PROC010\n*\n*\nPROC040  DS    0H\n         CLC   =C'.ZVARS',0(R4)\n         BNE   ERROR25\n*\n         LA    R4,6(,R4)\n         S     R5,=F'6'\n         BNP   ERROR26\n*\nPROC050  DS    0H\n         CLI   0(R4),C' '\n         BNE   PROC070\n         LA    R4,1(,R4)\n         BCT   R5,PROC050\n*\n         LA    R1,PDSPARM\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n         B     *+4(R15)           CHECK RC\n         B     PROC060            OK\n         B     ERROR27            EOF\n         B     ERROR28            ERROR\n*\n*\nPROC060  DS    0H\n         L     R4,PDSREC\n         LA    R5,80\n         B     PROC050\n*\n*\nPROC070  DS    0H\n         CLI   0(R4),C'='\n         BNE   ERROR29\n*\n         LA    R4,1(,R4)\n         S     R5,=F'1'\n         BNP   ERROR30\n*\nPROC080  DS    0H\n         CLI   0(R4),C' '\n         BNE   PROC100\n         LA    R4,1(,R4)\n         BCT   R5,PROC080\n*\n         LA    R1,PDSPARM\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n         B     *+4(R15)           CHECK RC\n         B     PROC090            OK\n         B     ERROR31            EOF\n         B     ERROR32            ERROR\n*\n*\nPROC090  DS    0H\n         L     R4,PDSREC\n         LA    R5,80\n         B     PROC080\n*\n*\nPROC100  DS    0H\n         CLC   =C'''(',0(R4)\n         BNE   ERROR33\n*\n         LA    R4,2(,R4)\n         S     R5,=F'2'\n         BNP   ERROR34\n*\nPROC110  DS    0H\n         CLI   0(R4),C' '\n         BNE   PROC120\n*\n         LA    R4,1(,R4)\n         BCT   R5,PROC110\n*\nPROC115  DS    0H\n         LA    R1,PDSPARM\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n         B     *+4(R15)           CHECK RC\n         B     PROC118            OK\n         B     ERROR35            EOF\n         B     ERROR36            ERROR\n*\n*\nPROC118  DS    0H\n         L     R4,PDSREC\n         LA    R5,80\n         B     PROC110\n*\n*\nPROC120  DS    0H\n         MVC   WORKVAR,=CL8' '    CLEAR OUT WORK VAR\n         LA    R2,WORKVAR\n         LA    R3,0               VAR NAME LENGTH\n*\nPROC130  DS    0H\n         C     R3,=F'8'           MAX LENGTH?\n         BNL   ERROR37\n*\n         MVC   0(1,R2),0(R4)      COPY IN CHAR\n         LA    R4,1(,R4)\n         S     R5,=F'1'\n         BNP   PROC140            BRANCH IF END...\n*\n         LA    R2,1(,R2)\n         LA    R3,1(,R3)\n*\n         CLI   0(R4),C' '         END OF VAR NAME?\n         BE    PROC140            YES - BRANCH\n*\n         CLI   0(R4),C')'         END OF VAR LIST?\n         BE    PROC150            YES - BRANCH\n         B     PROC130\n*\n*\nPROC140  DS    0H\n         MVC   0(8,R6),WORKVAR    MOVE INTO VECTOR LIST\n         MVC   8(8,R6),=XL8'FFFFFFFFFFFFFFFF'\n         LA    R6,8(,R6)          POINT TO NEXT SLOT\n         LTR   R5,R5\n         BNP   PROC115\n         B     PROC110\n*\n*\nPROC150  DS    0H\n         CLC   =C')''',0(R4)\n         BNE   ERROR38\n*\n         MVC   0(8,R6),WORKVAR    MOVE INTO VECTOR LIST\n         MVC   8(8,R6),=XL8'FFFFFFFFFFFFFFFF'\n*\nPROC160  DS    0H\n         LA    R1,PDSPARM\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n         B     *+4(R15)           CHECK RC\n         B     PROC170            OK\n         B     END010             EOF\n         B     ERROR39            ERROR\n*\n*\nPROC170  DS    0H\n         L     R4,PDSREC\n         CLC   =C')END ',0(R4)\n         BE    END010\n*\n         CLC   =CL80' ',0(R4)\n         BNE   ERROR40\n*\n         B     PROC170\n*\n*\nEND010   DS    0H\n         MVC   PDSMBR,=CL8'********'\n         L     R15,=V(FSIPDS)     PDS READER\n         BALR  R14,R15            OPEN/READ\n*\n         LA    R1,ATTRLIST\n         ST    R1,SCRNPARM+0\n         L     R1,PANEL\n         ST    R1,SCRNPARM+4\n         L     R1,ZVARS\n         ST    R1,SCRNPARM+8\n         L     R1,4(,R11)\n         ST    R1,SCRNPARM+12\n         MVC   SCRNPARM+16(8),=CL8' '\n         L     R1,8(,R11)\n         MVC   SCRNPARM+24(8),0(R1)\n*\n*\n*        $VSTO ('ZCMD','1',' ')   CLEAR THE ZCMD VARIABLE\n*\n*\n         LA    R1,SCRNPARM\n         L     R15,=V(FSISCRN)\n         BALR  R14,R15\n*\n*\n         LA    R6,SCRNPARM\n         USING SCR,R6\n*\n         MVC   AID,SCRAID\n         DROP  R6\n*\n         CLC   =CL8' ',AID       EMPTY ?\n         BE    CMD040\n*\n         MVI   AIDCMD,C' '\n         MVC   AIDCMD+1(L'AIDCMD-1),AIDCMD\n*\n         $VLOC (AID,'128',AIDCMD)\n*\n         $VLOC ('ZCMD','128',ZCMD)\n*\nCMD010   DS    0H\n         LA    R2,AIDCMD+127\n         LA    R3,AIDCMD\n*\nCMD020   DS    0H\n         CR    R2,R3\n         BNH   CMD040\n*\n         CLI   0(R2),C' '\n         BNE   CMD030\n*\n         BCT   R2,CMD020\n*\n*\nCMD030   DS    0H\n         LA    R2,2(,R2)\n         LR    R1,R2\n         SR    R1,R3\n         LA    R3,127\n         SR    R3,R1\n         BCTR  R3,0\n         EX    R3,CMDMVC\n*CMDMVC  MVC   0(1,R2),ZCMD\n*\n         $VSTO ('ZCMD','128',AIDCMD)\n*\n*\n         B     CMD040\n*\nCMDMVC   MVC   0(1,R2),ZCMD       EXECUTED INSTRUCTION\n*\nCMD040   DS    0H\n         L     R4,ZVARS\n         LTR   R4,R4\n         BZ    FREE010\n*\n         FREEMAIN R,LV=8000,A=(R4)\n         XC    ZVARS,ZVARS\n*\nFREE010  DS    0H\n         L     R4,PANEL\n         FREEMAIN R,LV=1920,A=(R4)\n         XC    PANEL,PANEL\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nERROR01  LA    R2,1\n         B     ERROR00\nERROR02  LA    R2,2\n         B     ERROR00\nERROR03  LA    R2,3\n         B     ERROR00\nERROR04  LA    R2,4\n         B     ERROR00\nERROR05  LA    R2,5\n         B     ERROR00\nERROR06  LA    R2,6\n         B     ERROR00\nERROR07  LA    R2,7\n         B     ERROR00\nERROR08  LA    R2,8\n         B     ERROR00\nERROR09  LA    R2,9\n         B     ERROR00\nERROR10  LA    R2,10\n         B     ERROR00\nERROR11  LA    R2,11\n         B     ERROR00\nERROR12  LA    R2,12\n         B     ERROR00\nERROR13  LA    R2,13\n         B     ERROR00\nERROR14  LA    R2,14\n         B     ERROR00\nERROR15  LA    R2,15\n         B     ERROR00\nERROR16  LA    R2,16\n         B     ERROR00\nERROR17  LA    R2,17\n         B     ERROR00\nERROR18  LA    R2,18\n         B     ERROR00\nERROR19  LA    R2,19\n         B     ERROR00\nERROR20  LA    R2,20\n         B     ERROR00\nERROR21  LA    R2,21\n         B     ERROR00\nERROR22  LA    R2,22\n         B     ERROR00\nERROR23  LA    R2,23\n         B     ERROR00\nERROR24  LA    R2,24\n         B     ERROR00\nERROR25  LA    R2,25\n         B     ERROR00\nERROR26  LA    R2,26\n         B     ERROR00\nERROR27  LA    R2,27\n         B     ERROR00\nERROR28  LA    R2,28\n         B     ERROR00\nERROR29  LA    R2,29\n         B     ERROR00\nERROR30  LA    R2,30\n         B     ERROR00\nERROR31  LA    R2,31\n         B     ERROR00\nERROR32  LA    R2,32\n         B     ERROR00\nERROR33  LA    R2,33\n         B     ERROR00\nERROR34  LA    R2,34\n         B     ERROR00\nERROR35  LA    R2,35\n         B     ERROR00\nERROR36  LA    R2,36\n         B     ERROR00\nERROR37  LA    R2,37\n         B     ERROR00\nERROR38  LA    R2,38\n         B     ERROR00\nERROR39  LA    R2,39\n         B     ERROR00\nERROR40  LA    R2,40\n         B     ERROR00\nERROR41  LA    R2,41\n         B     ERROR00\nERROR00  ABEND 303\n*\n*\nSAVEA    DC    18F'0'\n*\nPDSPARM  DC    A(PDSMBR,PDSREC,PDSLRECL,PDSDDNM)\nPDSMBR   DC    CL8' '\nPDSDDNM  DC    CL8'FSIPLIB'\nPDSREC   DC    A(0)\nPDSLRECL DC    F'0'\n*\nWORKVAR  DC    CL8' '\nPANEL    DC    A(0)\nZVARS    DC    A(0)\n*\nSCRNPARM DC    A(0),A(0),A(0),A(0),CL8' ',CL8' '\n*\nATTRCHAR DC    C' '\nATTRTYPE DC    X'00'\nATTRINTN DC    X'00'\nATTRCAPS DC    X'00'\n*\n*\nAID      DC    CL8' '\n*\n*\n         LTORG ,\n*\nAIDCMD   DS    CL128\nZCMD     DS    CL128\n*\nATTRLIST DC    XL128'00'\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*\n         $FSIECT ,\n         $FSISCR ,\n*\n         END   ,\n./ ADD NAME=FSIPDS   8001-74296-74296-1044-00223-00223-00000-TCS3\nFSIPDS   TITLE 'READ A PDS MEMBER AND DEBLOCK'\n***********************************************************************\n*       THIS JOB WILL READ AND DEBLOCK A PDS MEMBER                   *\n*                                                                     *\n*       UPON ENTRY REGISTER ONE POINTS TO A PARAMETER LIST            *\n*                                                                     *\n*        WORD ONE  POINTER TO MEMBER NAME TO BE PROCESSED             *\n*        WORD TWO  POINTER TO A FULL WORD IN WHICH THE RECORD ADDRESS *\n*                  WILL BE PLACED                                     *\n*        WORD THREE POINTER TO A FULL WORD IN WHICH THE LRECL WILL BE *\n*                  PLACED                                             *\n*        WORD FOUR POINTER TO DD NAME                                 *\n*                                                                     *\n*        IF THE MEMBER NAME IS CHANGED, ON THE NEXT CALL PROCESSING   *\n*        WILL BEGIN FOR A NEW MEMBER                                  *\n*                                                                     *\n*        IF THE MEMBER NAME IS C'********' THE CURRENT PROCESSING WILL*\n*        BE TERMINATED AND THE DCB CLOSED. THIS SHOULD BE DONE AT THE *\n*        END OF ALL PROCESSING                                        *\n*                                                                     *\n*                                                                     *\n*             UPON RETURN, REGISTER 15 CONTAINS A RETURN CODE         *\n*                 AND REGISTER 0 CONTAINS A REASON CODE.              *\n*                                                                     *\n*              R15    R0                                              *\n*              ---    --                                              *\n*               0    N/A     REQUEST COMPLETED SUCESSFULLY            *\n*               4    N/A     END OF FILE  CURRENT MEMBER              *\n*               8     4      DD STATEMENT NOT FOUND                   *\n*               8     8      MEMBER NOT FOUND                         *\n*                                                                     *\n***********************************************************************\n         TITLE '*** P R O G R A M    E N T R Y'\n***********************************************************************\n*                  P R O G R A M   E N T R Y                          *\n***********************************************************************\n         SPACE 3\nFSIPDS   CSECT\n         SAVE  (14,12),,FSIPDS_V2_&SYSDATE_&SYSTIME_TCS3_12/82\n         LR    R12,R15            SET BASE\n         USING FSIPDS,R12\n         LA    R15,SAVEA          POINT TO SAVEA\n         ST    R13,4(,R15)        CHAIN\n         ST    R15,8(,R13)             SAVE\n         LR    R13,R15                     AREAS\n         LR    R11,R1             SAVE PARM PTR\n         TITLE '*** I N I T I A L   P R O C E S S I N G'\n***********************************************************************\n*                I N I T I A L   P R O C E S S I N G                  *\n***********************************************************************\n         SPACE 3\n         L     R2,0(,R11)         FIND MEMBER NAME\n         CLC   ASTRK,0(R2)        IS IT CLOSE REQUEST\n         BE    CLOSE              YES - BRANCH\n         L     R2,12(,R11)        FIND DD NAME\n         CLC   DDNAME,0(R2)       CHECK FOR NEW DD NAME\n         BNE   NEWDD              YES - GO PROCESS\n         TM    DCB+48,X'10'       IS DCB OPEN\n         BO    INIT010            YES - CONTINUE\n         B     NEWDD              ELSE - PROCESS NEW DD\nINIT010  DS    0H\n         TITLE '*** P R O C E S S   R E A D'\n***********************************************************************\n*                     P R O C E S S   R E A D                         *\n***********************************************************************\n         SPACE 3\nREAD     DS    0H\n         L     R2,0(,R11)         POINT TO MEMBER\n         CLC   MEMBER,0(R2)       IS IT NEW MEMBER\n         BE    READ010            NO - CONTINUE\n         MVC   MEMBER,0(R2)       SAVE MEM NAME\n         XC    RECPTR,RECPTR      ZERO POINTER\n         FIND  DCB,MEMBER,D\n         LTR   R15,R15            WAS IT FOUND ?\n         BZ    READ010            YES - CONTINUE\n         LA    R15,8              RC = 8\n         LA    R0,8               CODE = 8\n         B     RETURN             AND EXIT\nREAD010  DS    0H\n         L     R2,RECPTR          GET RECORD POINTER\n         LTR   R2,R2              DO WE NEED A READ\n         BNZ   READ020            NO-CONTINUE\n         L     R7,BUF             POINT TO INPUT BUFFER\n         READ  READDECB,SF,DCB,(R7)\n         CHECK READDECB\n         LH    R2,DCB+62          GET BLOCKSIZE\n         L     R1,READDECB+16     POINT TO IOB\n         SH    R2,14(,R1)         COMPUTE ACTUAL BLOCKSIZE\n         ST    R2,BLKLEN          SAVE\n         LR    R2,R7              POINT TO INPUT BUFFER\nREAD020  DS    0H\n         LR    R8,R2              CURRENT RECORD ADDRESS IN R8\n         LH    R9,DCB+82          GET LRECL\n         LA    R2,0(R9,R2)        BUMP TO NEXT RECORD\n         ST    R2,RECPTR          SAVE ADDRESS\n         L     R2,BLKLEN          GET LEN REMAINING\n         SR    R2,R9              ADJUST\n         BP    READ030            BRANCH IN NOT END OF BLOCK\n         XC    RECPTR,RECPTR      RESET BUFFER POINTER\nREAD030  DS    0H\n         ST    R2,BLKLEN          SAVE BLK LEN\n         L     R2,4(,R11)         RECORD RETURN\n         ST    R8,0(R2)           RETURN RECORD\n         L     R2,8(,R11)         BLOCK LEN\n         ST    R9,0(,R2)          RETURN RECORD LEN\n         LA    R15,0              SET RC\n         LA    R0,0\n         B     RETURN\n         TITLE '*** P R O C E S S   C L O S E   R E Q U E S T'\n***********************************************************************\n*             P R O C E S S   C L O S E   R E Q U E S T               *\n***********************************************************************\n         SPACE 3\nCLOSE    DS    0H\n         TM    DCB+48,X'10'       IS DCB OPEN\n         BNO   CLOSE010           NO - SKIP CLOSE\n         LH    R2,DCB+62          POINT TO BLKSIZE\n         L     R3,BUF             ADDRESS\n         FREEMAIN R,LV=(R2),A=(R3)\n         CLOSE (DCB)\nCLOSE010 DS    0H\n         MVC   DDNAME,=8XL1'FF'   RESET DDNAME\n         MVC   MEMBER,=8XL1'FF'   RESET MEMBER NAME\n         LA    R15,0              SET RC\n         LA    R0,0\n         B     RETURN\n         TITLE '*** P R O C E S S   E N D   O F   F I L E'\n***********************************************************************\n*             P R O C E S S   E N D   O F   F I L E                   *\n***********************************************************************\n         SPACE 3\nEOF      DS    0H\n         LA    R15,4              SET RC\n         LA    R0,0\n         MVC   MEMBER,=8XL1'FF'   RESET MEMBER NAME\n         B     RETURN\n         TITLE '*** P R O C E S S   N E W   D D N A M E'\n***********************************************************************\n*             P R O C E S S   N E  W   D D N A M E                    *\n***********************************************************************\n         SPACE 3\nNEWDD    DS    0H\n         TM    DCB+48,X'10'       IS DCB OPEN\n         BNO   NEWDD010           NO - SKIP CLOSE\n         LH    R2,DCB+62          GET BLKSIZE\n         L     R3,BUF             POINT TO BUFFER\n         FREEMAIN R,LV=(R2),A=(R3)\n         CLOSE (DCB)\nNEWDD010 DS    0H\n         L     R2,12(,R11)        POINT TO DDNAME\n         EXTRACT FWORD,FIELDS=TIOT\n         L     R1,FWORD           POINT TO TIOT\n         LA    R1,24(,R1)         POINT TO DD SECTION\n         SLR   R0,R0              CLEAR WORK REG\nNEWDD020 DS    0H\n         IC    R0,0(,R1)          GET ENTRY LENGTH\n         LR    R3,R1              SAVE PTR TO ENTRY IN R3\n         CLC   0(8,R2),4(R1)      IS THE THE ENTRY\n         BXLE  R1,R0,NEWDD030     BRANCH IF NO MORE\n         BNE   NEWDD020           NO - TRY NEXT\n         B     NEWDD040           CONTINUE ON\nNEWDD030 DS    0H\n         LA    R15,8              RC\n         LA    R0,4               REASON CODE\n         B     RETURN             AND EXIT\nNEWDD040 DS    0H\n         MVC   DCB+40(8),0(R2)    PLUG IN NEW DDNAME\n         MVC   DDNAME,0(R2)       SAVE DDNAME\n         OPEN  (DCB,INPUT)\n         LH    R2,DCB+62          GET BLKSIZE\n         GETMAIN R,LV=(R2)        GET A BUFFER\n         ST    R1,BUF             SAVE ADDRESS\n         MVC   MEMBER,FFS         RESET MEMBER NAME\n         B     READ               GO PROCESS IT\n         TITLE '*** R E T U R N    T O   C A L L E R'\n***********************************************************************\n*             R E T U R N   T O    C A L L E R                        *\n***********************************************************************\n         SPACE 3\nRETURN   DS    0H\n         L     R13,4(,R13)        UNCHAIN\n         L     R14,12(,R13)\n         LM    R1,R12,24(R13)\n         BR    R14                RETURN\n         TITLE '*** D A T A   A R E A S'\n***********************************************************************\n*                       D A T A    A R E A S                          *\n***********************************************************************\n         SPACE 3\nBUF      DC    F'0'\nBLKLEN   DC    F'0'\nRECPTR   DC    F'0'\nFWORD    DC    F'-1'\nSAVEA    DS    18F\nASTRK    DC    C'********'\nFFS      DC    X'FFFFFFFFFFFFFFFF'\n         PRINT NOGEN\nDCB      DCB   DSORG=PO,                                               X\n               MACRF=R,                                                X\n               DDNAME=XXXXXXXX,                                        X\n               EODAD=EOF\n         SPACE 2\nMEMBER   DC    X'FFFFFFFFFFFFFFFF'\nDDNAME   DC    X'FFFFFFFFFFFFFFFF'\n         SPACE 5\n         TITLE '***  R E G I S T E R   E Q U A T E S ***'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./ ADD NAME=FSISCRN  8023-74294-75274-1416-00707-00588-00000-TCS3\nFSISCRN   CSECT ,\n          SAVE  (14,12),,*\n*\n          LR    R12,R15\n          USING FSISCRN,R12\n*\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n*\n         LR    R11,R1\n         USING SCR,R11\n*\n*\n         XC    CSRPOS,CSRPOS\n         XC    TRTAB,TRTAB\n*\n         L     R4,=A(TRTAB)\n         L     R2,SCRATTRS        PONIT TO ATTR ARRAY\nATTR010  DS    0H\n         CLC   =X'FFFF',0(R2)     END OF LIST\n         BE    ATTR020            YES - DONE\n*\n         SLR   R1,R1              ZERO R1\n         IC    R1,0(,R2)          GET ATTR CHAR\n         LA    R1,0(R1,R4)        CALC OFFSET INTO TABLE\n         MVC   0(1,R1),1(R2)      MOVE IN ENCODED ATTRIBUTES\n         LA    R2,2(,R2)          POINT TO NEXT ENTRY\n         B     ATTR010            LOOP BACK\n*\n*\nATTR020  DS    0H\n         GETMAIN R,LV=4096\n         ST      R1,BUFFER\n         ST      R1,BUFFERP\n*\n         GETMAIN R,LV=4096\n         ST      R1,INBUF\n*\n         L     R3,=A(SVARSIZE*200)\n         GETMAIN R,LV=(R3)\n         ST    R1,VARTAB\n*\n         LR    R0,R1            CLEAR THE SCREEN VAR TABLE\n         LR    R1,R3\n         SLR   R14,R14\n         SLR   R15,R15\n         MVCL  R0,R14\n*\n*\n         L     R1,SCRPANEL        GET POINTER TO PANEL\n         ST    R1,PANELP          SAVE\n*\n         LA    R1,1               PRIME ROW\n         ST    R1,ROW\n         LA    R1,0               PRIME COL\n         ST    R1,COL\n*\n         LA    R4,=X'27F5C31140403C404040'\n         LA    R5,10\n*\nPREFIX   DS    0H\n         ICM   R1,B'0001',0(R4)\n         BAL   R14,PUTCHAR\n         LA    R4,1(,R4)\n         BCT   R5,PREFIX\n*\n*\nTXTLOOP  DS    0H\n         BAL   R14,GETCHAR\n         LTR   R15,R15\n         BNZ   DONE\n*\nTXTLOP10 DS    0H\n         CLI   CHARTYPE,0       FIELD DEFINITION CHAR?\n         BE    TXTLOP20         NO - BRANCH\n*\n         TM    CHARTYPE,X'03'  OUTPUT FIELD ?\n         BO    INPT            PROCESS INPUT/OUTPUT FIELD\n         TM    CHARTYPE,X'01'  INPUT FIELD ?\n         BO    INPT            PROCESS INPUT/OUTPUT FIELD\n         B     TXT             PROCESS TEXT FIELD\n*\n*\nTXTLOP20 DS    0H\n         BAL   R14,PUTCHAR\n         B     TXTLOOP\n***********************************************************************\n*\n*\n***********************************************************************\nTXT      DS    0H\n         IC    R1,=X'11'   START FIELD\n         BAL   R14,PUTCHAR\n*\n         L     R0,ROW\n         L     R1,COL\n         BAL   R14,CNVTSBA\n*\n         LR    R5,R15\n         LR    R1,R15\n         SRL   R1,8\n         BAL   R14,PUTCHAR\n*\n         LR    R1,R5\n         BAL   R14,PUTCHAR\n*\n         IC    R1,=X'1D'       START FIELD\n         BAL   R14,PUTCHAR\n         IC    R1,CHARATTR     GET 3270 ATTRIB CHAR\n         BAL   R14,PUTCHAR\n*\n         B     TXTLOOP\n***********************************************************************\n* INPUT / OUTPUT FIELD\n***********************************************************************\nINPT     DS    0H\n         IC    R1,=X'11'   START FIELD\n         BAL   R14,PUTCHAR\n*\n         L     R0,ROW\n         L     R1,COL\n         BAL   R14,CNVTSBA\n*\n         LR    R5,R15\n         LR    R1,R15\n         SRL   R1,8\n         BAL   R14,PUTCHAR\n*\n         LR    R1,R5\n         BAL   R14,PUTCHAR\n*\n         IC    R1,=X'1D'       START FIELD\n         BAL   R14,PUTCHAR\n         IC    R1,CHARATTR     GET 3270 ATTRIB CHAR\n         BAL   R14,PUTCHAR\n*\n* START A SVAR TABLE ENTRY\n*\n         L     R10,VARTAB\n         USING SVAR,R10\n*\nINPT002  DS    0H\n         CLC   SVARBUFA,=XL2'0000'\n         BE    INPT004              FOUND EMPTY SLOT\n*\n         LA    R10,SVARSIZE(,R10)      POINT TO NEXT ENTRY\n         B     INPT002\n*\n*\nINPT004  DS    0H\n         L     R0,ROW\n         L     R1,COL\n         LA    R1,1(,R1)\n         BAL   R14,CNVTSBA\n*\n         STCM  R15,B'0011',SVARBUFA\n*\n         TM    CHARTYPE,X'03'      OUTPUT FIELD?\n         BO    INPT006             YES - DON'T SET DEFAULT CSR\n         CLC   =X'0000',CSRPOS     SAVED CSR POSITION?\n         BNE   INPT006             YES - BRANCH\n*\n         STCM  R15,B'0011',CSRPOS  SAVE\nINPT006  DS    0H\n*\n* PROCESS VAR NAME\n*\nINPT010  DS    0H\n         LA    R4,WORKNAME\n         LA    R5,8              MAX VAR NAME LENGTH\n         SLR   R3,R3             FIELD LENGTH\n         MVC   WORKNAME,=CL8' '\nINPT020  DS    0H\n         BAL   R14,GETCHAR       GET NEXT CHAR\n         LTR   R15,R15           CHECK FOR EOF\n         BNZ   INPT040           YES - BRANCH\n*\n         CLI   CHARTYPE,X'00'\n         BNE   INPT050\n*\n         CLI   CHAR,C' '      END OF NAME?\n         BE    INPT030\n*\n         C     R5,=F'1'       NAME TOO LONG\n         BL    INPT030        YES -  BRANCH\n*\n         MVC   0(1,R4),CHAR   COPY VAR NAME\n         LA    R4,1(,R4)\n         S     R5,=F'1'\n*\n         LA    R3,1(,R3)          INCREMENT FIELD LENGTH\n         B     INPT020\n*\n*\nINPT030  DS    0H\n         LA    R3,1(,R3)       INCREMENT FIELD LENGTH\nINPT035  DS    0H\n         BAL   R14,GETCHAR\n         LTR   R15,R15\n         BNZ   INPT040\n*\n         CLI   CHARTYPE,X'00'\n         BNE   INPT050\n*\n         LA    R3,1(,R3)       INCREMENT FIELD LENGTH\n         B     INPT035\n*\n*\nINPT040  DS    0H\n         MVI   CHAR,X'FF'\n*\nINPT050  DS    0H\n         MVC   SVARNAME,WORKNAME\n         STH   R3,SVARLEN\n*\n*\n         CLI   CHAR,X'FF'\n         BE    DONE                BRANCH IF EOF\n*\n         B     TXTLOP10            GO START NEXT FIELD\n*\n         DROP  R10\n*\n*\n*--------------------------------------------------------------------\n*\n*\n*\n*--------------------------------------------------------------------\n*\nDONE     DS    0H\n         L     R10,VARTAB\n         USING SVAR,R10\n         L     R9,SCRZVARS\nZVARS010 DS    0H\n         CLC   SVARBUFA,=XL2'0000'  END OF VAR TABLE?\n         BE    ZVARS040             YES - BRANCH\n*\n         CLC   =CL8'Z',SVARNAME     IS THIS A ZVAR ?\n         BNE   ZVARS020             NO - SKIP IT\n*\n         CLC   =XL8'FFFFFFFFFFFFFFFF',0(R9)  END OF LIST?\n         BE    ZVARS030             YES - TOO BAD...\n*\n         MVC   SVARNAME,0(R9)       MOVE IN NAME\n         LA    R9,8(,R9)            NEXT NAME IN VECTOR\n*\nZVARS020 DS    0H\n         LA    R10,SVARSIZE(,R10)       POINT TO NEXT ENTRY\n         B     ZVARS010\n*\n*\nZVARS030 DS    0H\n         ABEND 111\n*\n*\n         DROP  R10\nZVARS040 DS    0H\n*\n         L     R10,VARTAB\n         USING SVAR,R10\nINSV010  DS    0H\n         CLC   SVARBUFA,=XL2'0000'  END OF VAR TABLE?\n         BE    INSV050              YES - BRANCH\n*\n         LA    R1,SVARNAME          VAR NAME\n         ST    R1,VPARAM\n         LH    R1,SVARLEN\n         ST    R1,VPLEN\n         LA    R1,VPLEN\n         ST    R1,VPARAM+4\n         LA    R1,VWORK\n         ST    R1,VPARAM+8\n*\n         LA    R1,VPARAM\n         L     R15,=V(VLOC)\n         BALR  R14,R15\n*\n         LTR   R15,R15\n         BNZ   INSV040            NOT FOUND\n*\n         IC    R1,=X'11'            SBA\n         BAL   R14,PUTCHAR\n         IC    R1,SVARBUFA\n         BAL   R14,PUTCHAR\n         IC    R1,SVARBUFA+1\n         BAL   R14,PUTCHAR\n*\nINSV020  DS    0H\n         LH    R3,SVARLEN        VAR AREA LENGTH\n         LA    R4,VWORK\nINSV030  DS    0H\n         IC    R1,0(,R4)\n         BAL   R14,PUTCHAR\n         LA    R4,1(,R4)\n         BCT   R3,INSV030\n*\nINSV040  DS    0H\n         LA    R10,SVARSIZE(,R10)       POINT TO NEXT ENTRY\n         B     INSV010\n*\n*\n         DROP  R10\n*\n*\nINSV050  DS    0H\n         L     R3,SCRMSG          ANY MESSAGE TO DISPLAY?\n         LTR   R3,R3\n         BZ    INSV080            NO - BRANCH\n*\n         LA    R2,2(,R3)          POINT TO DATA\n         LH    R3,0(,R3)          GET LENGTH\n*\n         LTR   R3,R3              ZERO LENGTH?\n         BZ    INSV080            YES - NO MESSAGE...\n         C     R3,=F'70'          MAX LENGTH\n         BNH   INSV060\n*\n         LA    R3,70\nINSV060  DS    0H\n         LA    R1,79\n         SR    R1,R3              STARTING COL\n         BCTR  R1,0               BACK UP 1 MORE\n         LA    R0,1\n         BAL   R14,CNVTSBA        GO CALC BUFFER POS\n         LR    R5,R15             SAVE BUFFER ADDR\n         IC    R1,=X'11'\n         BAL   R14,PUTCHAR\n*\n         LR    R1,R5\n         SRL   R1,8\n         BAL   R14,PUTCHAR\n         LR    R1,R5\n         BAL   R14,PUTCHAR\n*\n         IC    R1,=X'1D'       START FIELD\n         BAL   R14,PUTCHAR\n         IC    R1,=X'F8'\n         BAL   R14,PUTCHAR\n         IC    R1,=C' '\n         BAL   R14,PUTCHAR\n*\nINSV070  DS    0H\n         IC    R1,0(R2)\n         BAL   R14,PUTCHAR\n         LA    R2,1(,R2)\n         BCT   R3,INSV070\n*\nINSV080  DS    0H\n         CLC   SCRCSR,=CL8' '     ANY CURSOR FIELD SPECIFIED?\n         BE    CSRP030            NO - USE A DEFAULT\n*\n         L     R10,VARTAB         POINT TO SCREEN VAR TABLE\n         USING SVAR,R10\n*\nCSRP010  DS    0H\n         CLC   SVARBUFA,=XL2'0000'  END OF TABLE?\n         BE    CSRP030            YES - USE DEFAULT CSR POS\n*\n         CLC   SCRCSR,SVARNAME    IS THIS OUR FIELD?\n         BE    CSRP020            YES, USE IT\n*\n         LA    R10,SVARSIZE(,R10) TRY NEXT FIELD\n         B     CSRP010\n*\n*\nCSRP020  DS    0H\n         MVC   CSRPOS,SVARBUFA    SET CURSOR POSITION\n*\nCSRP030  DS    0H\n         CLC   =X'0000',CSRPOS    ANY CURSOR POSITION?\n         BE    DONE010            NO - BRANCH\n*\n         IC    R1,=X'11'\n         BAL   R14,PUTCHAR\n         IC    R1,CSRPOS\n         BAL   R14,PUTCHAR\n         IC    R1,CSRPOS+1\n         BAL   R14,PUTCHAR\n         IC    R1,=X'13'\n         BAL   R14,PUTCHAR\n*\n         DROP  R10\n*\nDONE010  DS    0H\n         L     R5,BUFFERP\n         S     R5,BUFFER\n         L     R4,BUFFER\n         TPUT  (R4),(R5),FULLSCR\n*\n*\n         LTR   R15,R15\n         BZ    TPUTOK\n*\n         ABEND 101\nTPUTOK   DS    0H\n*\n*\n         L     R4,INBUF\n         L     R5,=A(4096)\n         TGET  (R4),(R5),ASIS\n*\n*\nINVAR    DS    0H\n         LR    R5,R1         SAVE INPUT LENGTH\n         MVC   AID,0(R4)     SAVE AID VALUE\n         LA    R4,3(,R4)     SKIP OVER AID/CSR POS\n         S     R5,=F'3'      ADJUST LENGTH\n         BNP   INVAR070      BRANCH IF DONE\n         CLI   0(R4),X'11'   START FLD?\n         BNE   INVAR060      SOME TYPE OF ERROR\n*\nINVAR010 DS    0H\n         LA    R6,1(,R4)     SAVE START OF FIELD\n         LA    R4,3(,R4)     POINT TO FLD DATA\n         SLR   R3,R3         ZERO FIELD LENGTH\n         S     R5,=F'3'      SKIP OVER SF+BUFADR\n         BNP   INVAR030      BRANCH IF AT END\n*\nINVAR020 DS    0H\n         CLI   0(R4),X'11'   START OF NEW FIELD ?\n         BE    INVAR030      YES - BRANCH\n*\n         LA    R3,1(,R3)     ADD ONE TO FIELD LENGTH\n         LA    R4,1(,R4)\n         BCT   R5,INVAR020   LOOP BACK\n*\nINVAR030 DS    0H\n         L     R10,VARTAB     SVAR START\n         USING SVAR,R10\n*\nINVAR040 DS    0H\n         CLC   =XL2'0000',SVARBUFA   END OF TABLE ?\n         BE    INVAR060              VAR NOT FOUND\n*\n         CLC   SVARBUFA,0(R6)        IS THIS OUR VAR\n         BE    INVAR050              YES - BRANCH\n*\n         LA    R10,SVARSIZE(,R10)      INCREMENT TO NEXT\n         B     INVAR040              LOOP BACK\n*\n*\nINVAR050 DS    0H\n         LA    R1,SVARNAME\n         ST    R1,VPARAM\n         ST    R3,VPLEN\n         LA    R1,VPLEN\n         ST    R1,VPARAM+4\n         LA    R1,2(,R6)\n         ST    R1,VPARAM+8\n*\n         LA    R1,VPARAM\n         L     R15,=V(VSTO)\n         BALR  R14,R15\n*\n         LTR   R5,R5              END OF DATA STREAM ?\n         BNE   INVAR010           NO - START NEW FIELD\n         B     INVAR070\n*\n*\nINVAR060 DS    0H\n         ABEND 103\n*\n*\nINVAR070 DS    0H\n         MVC   SCRAID,=CL8' '     CLEAR AID VALUE\n         LA    R1,AIDTABLE        POINT TO LIST OF AID VALUES\nINVAR080 DS    0H\n         CLI   0(R1),X'FF'        END OF TABLE?\n         BE    INVAR090           YES - BRANCH\n*\n         CLC   AID,0(R1)          IS THIS OUR ENTRY\n         BE    INVAR090\n*\n         LA    R1,5(,R1)\n         B     INVAR080\n*\n*\nINVAR090 DS    0H\n         MVC   SCRAID(4),1(R1)\n*\n*\n         DROP  R10\n*\n*\n         L     R2,BUFFER\n         FREEMAIN R,LV=4096,A=(R2)\n*\n         L     R2,INBUF\n         FREEMAIN R,LV=4096,A=(R2)\n*\n         L     R3,=A(SVARSIZE*200)\n         L     R2,VARTAB\n         FREEMAIN R,LV=(R3),A=(R2)\n*\n*\n          L     R13,4(,R13)\n          LM    R14,R12,12(R13)\n          SLR   R15,R15\n          BR    R14\n*\n*\n*\n*\n*\n***********************************************************************\n*\n* OUTPUT: R15 = RC (4=EOF)  R1=XXXC\n*\n***********************************************************************\nGETCHAR   DS    0H\n          L     R1,COL\n          LA    R1,1(,R1)\n          ST    R1,COL\n*\n          C     R1,=F'80'\n          BNH   NEXTCH10\n*\n          LA    R1,1\n          ST    R1,COL\n          L     R1,ROW\n          LA    R1,1(,R1)\n          ST    R1,ROW\n*\n          C     R1,=F'24'\n          BH    NEXTCH20\n*\n*\nNEXTCH10  DS    0H\n          L     R15,PANELP\n          ICM   R1,B'0001',0(R15)\n          MVC   CHAR,0(R15)\n*\n          MVC   CHARTYPE,0(R15)\n          TR    CHARTYPE,TRTAB\n*\n          LA    R15,1(,R15)\n          ST    R15,PANELP\n*\n         SLR   R15,R15\n*\n         CLI   CHARTYPE,0\n         BER   R14\n*\n          MVC   CHARATTR,CHARTYPE\n          NI    CHARATTR,X'0F'\n          TR    CHARATTR,ATTRTAB\n*\n          SLR   R15,R15\n          BR    R14\n*\n*\nNEXTCH20  DS    0H\n          LA    R15,4\n          BR    R14\n*\n*\n***********************************************************************\n*\n* INPUT: R1 = XXXC\n*\n***********************************************************************\nPUTCHAR  DS    0H\n         L     R15,BUFFERP\n         STCM  R1,B'0001',0(R15)\n         LA    R15,1(,R15)\n         ST    R15,BUFFERP\n         BR    R14\n*\n*\n***********************************************************************\n*\n* INPUT: R0=ROW, R1=COL\n* OUTPUT: R15 = SBA ADDR\n*\n***********************************************************************\nCNVTSBA   DS   0H\n          BCTR R0,0\n          BCTR R1,0\n          MH   R0,=H'80'\n          AR   R1,R0\n          SLL  R1,2\n          STCM R1,B'0010',SBACMD\n          SRL  R1,2\n          STCM R1,B'0001',SBACMD+1\n          NC   SBACMD(2),=X'3F3F'\n          TR   SBACMD(2),TBL3270\n          SLR  R15,R15\n          ICM  R15,B'0011',SBACMD\n          BR   R14\n*\nSBACMD    DC   XL2'0000'\n*\n*\nAIDTABLE DS    0C\n         DC    X'7D',C'    '      ENTER\n         DC    X'F1',C'PF01'\n         DC    X'F2',C'PF02'\n         DC    X'F3',C'PF03'\n         DC    X'F4',C'PF04'\n         DC    X'F5',C'PF05'\n         DC    X'F6',C'PF06'\n         DC    X'F7',C'PF07'\n         DC    X'F8',C'PF08'\n         DC    X'F9',C'PF09'\n         DC    X'7A',C'PF10'\n         DC    X'7B',C'PF11'\n         DC    X'7C',C'PF12'\n         DC    X'C1',C'PF13'\n         DC    X'C2',C'PF14'\n         DC    X'C3',C'PF15'\n         DC    X'C4',C'PF16'\n         DC    X'C5',C'PF17'\n         DC    X'C6',C'PF18'\n         DC    X'C7',C'PF19'\n         DC    X'C8',C'PF20'\n         DC    X'C9',C'PF21'\n         DC    X'4A',C'PF22'\n         DC    X'4B',C'PF23'\n         DC    X'4C',C'PF24'\n         DC    X'6C',C'PA1 '\n         DC    X'6E',C'PA2 '\n         DC    X'6B',C'PA3 '\n         DC    X'FF',CL4' '\n*\n*\nROW       DC    F'1'\nCOL       DC    F'0'\nPANELP    DC    A(0)\nBUFFER    DC    A(0)\nBUFFERP   DC    A(0)\nINBUF     DC    A(0)\nCSRPOS    DC    X'0000'\nVARTAB    DC    A(0)\nVPARAM    DC    A(0,0,0)     VPUT/VGET PARM LIST\nVPLEN     DC    F'0'\nAID       DC    X'00'\nCHAR      DC    C' '\nCHARTYPE  DC    C' '\nCHARATTR  DC    C' '\nWORKNAME  DC    CL8' '\nVWORK     DC    CL256' '\n*\n*\nTBL3270   DC   X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n          DC   X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n          DC   X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n          DC   X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n*\n*\nATTRTAB   DC   X'F040F0F0F8C8F8F87C4C7C7CF040F0F0'\n*\n*\nCLEARSCR  DC   X'27F5C31140403C404040'\n*\n*\n          LTORG ,\n*\n*\nSAVEA     DC    18F'0'\n*\n*\nTRTAB    DC    XL256'00'          ESCAPE CHAR TRANSLATE TABLE\n*\n*\n*\n*\nR0        EQU   0\nR1        EQU   1\nR2        EQU   2\nR3        EQU   3\nR4        EQU   4\nR5        EQU   5\nR6        EQU   6\nR7        EQU   7\nR8        EQU   8\nR9        EQU   9\nR10       EQU   10\nR11       EQU   11\nR12       EQU   12\nR13       EQU   13\nR14       EQU   14\nR15       EQU   15\n*\n* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n*\n         $FSIECT ,\n*\n* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n*\nSVAR     DSECT ,\nSVARBUFA DS    XL2\nSVARLEN  DS    XL2\nSVARZNUM DS    XL2\n         DS    XL2\nSVARNAME DS    CL8\nSVARSIZE EQU   *-SVAR\n*\n*\n         $FSISCR ,\n*\n*\n          END   ,\n./ ADD NAME=FSISTART 8012-74303-75280-2155-00198-00026-00000-TCS3\nFSISTART CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING FSISTART,R12\n*\n         LA    R11,SAVEA\n         ST    R11,8(,R13)\n         ST    R13,4(,R11)\n         LR    R13,R11\n*\n         LR    R11,R1             SAVE CALLING PARM\n*\n***********************************************************************\n*                       LOOK FOR FSILLIB DD CARD\n***********************************************************************\n*\n         L     R1,16              ==>CVT\n         L     R1,0(,R1)          ==>OLD/NEW\n         L     R1,4(,R1)          ==>TCB\n         L     R1,12(,R1)         ==>TIOT\n*\n         LA    R1,24(,R1)         DD SECTION OF TIOT\n         SLR   R0,R0\n*\nFINDD010 DS    0H\n         ICM   R0,B'0001',0(R1)   GET LENGTH OF DD ENTRY\n         BZ    FINDD030           DD NOT FOUND\n*\n         CLC   =CL8'FSILLIB',4(R1)  FIND OUR DD ENTRY?\n         BE    FINDD030\n*\n         AR    R1,R0              POINT TO NEXT ENTRY\n         B     FINDD010           LOOP BACK\n*\n*\nFINDD020 DS    0H\n         OPEN  (FSILLIB,INPUT)\n*\n*\nFINDD030 DS    0H\n         TM    FSILLIB+48,X'10'   IS DCB OPEN\n         BNO   LOAD010            NO - CAN USE\n*\n         LOAD  EP=FSIFUNC,DCB=FSILLIB\n         LR    R10,R0             SAVE EP\n         B     LOAD020\n*\n*\nLOAD010  DS    0H\n         LOAD  EP=FSIFUNC\n         LR    R10,R0             SAVE EP\n*\nLOAD020  DS    0H\n         L     R1,=V(VPUT)\n         ST    R1,0(,R10)\n         L     R1,=V(VGET)\n         ST    R1,4(,R10)\n         L     R1,=V(DISPLAY)\n         ST    R1,8(,R10)\n         L     R1,=V(VDEFINE)\n         ST    R1,12(,R10)\n*\n*\n         TM    0(R11),X'80'       OS TYPE PARM LIST?\n         BNO   CMD000             NO - MUST BE TSO PARM LIST\n*\n         L     R2,0(,R11)         POINT TO PARM LIST\n         LH    R3,0(,R2)          GET PARM LENGTH\n         LA    R2,2(,R2)          POINT TO DATA\n         B     CMD030\n*\n*\nCMD000   DS    0H\n         L     R2,0(,R11)         POINT TO CBUF\n         LH    R3,0(,R2)          GET BUF LENGTH\n         LA    R2,4(,R2)          POINT TO DATA\n         S     R3,=F'4'           ADJUST LENGTH\n         BNP   CMD050             NO - OPERAND\n*\nCMD010   DS    0H\n         CLI   0(R2),C' '         LOOK FOR A SPACE\n         BE    CMD020\n         LA    R2,1(,R2)\n         BCT   R3,CMD010\n         B     CMD050             NO OPERAND FOUND\n*\n*\nCMD020   DS    0H\n         CLI   0(R2),C' '\n         BNE   CMD030\n         LA    R2,1(,R2)\n         BCT   R3,CMD020\n         B     CMD050             NO OPERAND FOUND\n*\n*\nCMD030   DS    0H\n         MVC   STARTPGM,=CL8' '\n         LA    R4,STARTPGM\n         LA    R5,8\n*\nCMD040   DS    0H\n         CLI   0(R2),C' '         END ?\n         BE    CMD050             YES - ALL DONE\n*\n         LTR   R5,R5\n         BNP   CMD050\n*\n         MVC   0(1,R4),0(R2)\n         LA    R4,1(,R4)\n         LA    R2,1(,R2)\n         S     R5,=F'1'\n         BCT   R3,CMD040\nCMD050   DS    0H\n*\n*\n         STFSMODE ON,INITIAL=YES\n         STTMPMD ON\n*\n         OC     STARTPGM,=CL8' '\n*\n         TM    FSILLIB+48,X'10'   DCB OPEN?\n         BNO   ATTCH010           NO - CANT USE IT\n*\n         LA     R1,PARM\n         ATTACH EPLOC=STARTPGM,ECB=ECB,DCB=FSILLIB\n         ST     R1,TCB\n*\n         B     WAIT\n*\n*\nATTCH010 DS    0H\n         LA     R1,PARM\n         ATTACH EPLOC=STARTPGM,ECB=ECB\n         ST     R1,TCB\n*\n*\nWAIT     DS     0H\n         WAIT   1,ECB=ECB\n*\n         DETACH TCB\n*\n         STLINENO LINE=1\n         STFSMODE OFF\n         STTMPMD OFF\n*\n*\n         TM    FSILLIB+48,X'10'   DCB OPEN?\n         BNO   EXIT               NO - SKIP CLOSE\n*\n         CLOSE (FSILLIB)\n*\n*\nEXIT     DS    0H\n*\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nECB      DC    F'0'\nTCB      DC    F'0'\n*\n*\n         DS    0F\nPARM     DC    X'80',AL3(PARM2)\n         DS    H'0'\nPARM2    DS    H'0'\n*\n*\nSTARTPGM DC    CL8'FSIDFLT'\n*\nSAVEA    DS    18F\n*\n*\n         PRINT NOGEN\nFSILLIB  DCB   DSORG=PO,MACRF=R,DDNAME=FSILLIB\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n./ ADD NAME=FSISTUB  8002-74303-75273-1537-00114-00105-00000-TCS3\nFSISTUB  CSECT ,\n         ENTRY VPUT\nVPUT     DS    0H\n         SAVE  (14,12),,FSI_VPUT\n         USING VPUT,R15\n         L     R12,=A(FSISTUB)\n         LA    R10,0\n         B     COMMON\n*\n*\n         ENTRY VGET\nVGET     DS    0H\n         SAVE  (14,12),,FSI_VGET\n         USING VGET,R15\n         L     R12,=A(FSISTUB)\n         LA    R10,4\n         B     COMMON\n*\n*\n         ENTRY DISPLAY\nDISPLAY  DS    0H\n         SAVE  (14,12),,FSI_DISPLAY\n         USING DISPLAY,R15\n         L     R12,=A(FSISTUB)\n         LA    R10,8\n         B     COMMON\n*\n*\n         ENTRY VDEFINE\nVDEFINE  DS    0H\n         SAVE  (14,12),,FSI_VDEFINE\n         USING VDEFINE,R15\n         L     R12,=A(FSISTUB)\n         LA    R10,12\n         B     COMMON\n*\n*\nCOMMON   DS    0H\n         DROP  R15\n         USING FSISTUB,R12\n         LR    R11,R1            SAVE CALLING PARMS\n*\n         LA    R1,SAVEA\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n*\n         L     R4,16              CVT\n         L     R4,0(,R4)          OLD/NEW\n         L     R4,4(,R4)          CURRENT TCB\n*\nLOK010   DS    0H\n         L     R5,X'2C'(,R4)      JPQ (CDE CHAIN)\n*\nLOK020   DS    0H\n         LTR   R5,R5              ANYTHING THERE?\n         BZ    LOK030             NO - GO UP ONE TCB\n*\n         CLC   =CL8'FSIFUNC',8(R5)  LOOK FOR OUR INTERFACE MODULE\n         BE    LOK050             GOODIE, WE FOUND IT\n*\n         L     R5,0(,R5)          NEXT CDE\n         B     LOK020             LOOP BACK\n*\n*\nLOK030   DS    0H\n         L     R1,X'7C'(,R4)      JSTCB\n         N     R1,=A(X'FFFFFF')\n         N     R4,=A(X'FFFFFF')\n         CR    R1,R4              END OF LIST?\n         BE    LOK040             YES -\n*\n         L     R4,X'84'(,R4)      ATTACHING TCB\n         B     LOK010\n*\n*\nLOK040   DS    0H\n         TPUT  ERRMSG,L'ERRMSG\n         ABEND 888      NOT RUNNING IN A FSI ENVIRONMENT\n*\n*\nLOK050   DS    0H\n         L     R15,X'10'(,R5)     GET EP\n         L     R15,0(R10,R15)     GET FUNC EP\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R15\n*\n*\n*\nERRMSG   DC    C'FSI888 - NOT RUNNING IN A FSI ENVIRONMENT'\n*\n*\nSAVEA    DS    18F\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n./ ADD NAME=FSIVDEF  8001-75273-75280-2122-00100-00086-00000-TCS3\nVDEFINE  CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING VDEFINE,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n         L     R8,0(,R1)          VAR NAME\n         L     R9,12(,R1)         VAR LENGTH\n         L     R9,0(,R9)\n         L     R10,4(,R1)         VAR DATA\n         L     R7,8(,R1)          VAR TYPE\n         L     R7,0(,R7)\n*\n*\n         C     R7,=F'1'           FIXED/NUMERIC\n         BL    ERROR              BRANCH IF ERROR\n         C     R7,=F'2'           CHAR\n         BH    ERROR\n*\n*\n         L     R11,=V(VARDEFS)\n*\n         USING VARP,R11\n*\nFIND010  DS    0H\n         CLC   VARPNAME,0(R8)     SEARCH FOR MATCHING NAME\n         BE    UPDVAR             BRANCH IF FOUND\n*\n         CLC   VARPNAME,=X'0000000000000000'  EMPTY SLOT?\n         BE    NEWVAR             YES - GO CREATE VAR ENTRY\n*\n         LA    R11,16(,R11)       POINT TO NEXT ENTRY\n         B     FIND010            AND LOOP BACK\n*\n*\nUPDVAR   DS    0H\nNEWVAR   DS    0H\n         MVC   VARPNAME,0(R8)     COPY IN VAR NAME\n         C     R9,=F'256'         CHECK MAX LENGTH\n         BNH   NEWV010            BRANCH IF OK\n*\n         LA    R9,256             TRUNC TO MAX LEN\nNEWV010  DS    0H\n         STH   R9,VARPLEN         SAVE VAR LENGTH\n         STC   R7,VARPTYPE        SAVE VAR TYPE\n         ST    R10,VARPDATA       SAVE DATA ADDRESS\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nERROR    DS    0H\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         LA    R15,8\n         BR    R14\n*\n*\n* ---------------------------------------------------------------------\n*\n*\n         LTORG ,\n*\n*\nSAVEA    DC    18F'0'\n*\n*\nVARP     DSECT ,\nVARPNAME DS    CL8      VAR NAME\nVARPDATA DS    A        POINTER TO DATA\nVARPLEN  DS    H        VAR LENGTH\nVARPTYPE DS    X        TYPE: 1=FIXED, 2=CHAR\n         DS    X\nVARPELEN EQU   *-VARP\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n./ ADD NAME=FSIVGET  8001-74294-74294-2147-00116-00116-00000-TCS3\nVGET     CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING VGET,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n         L     R8,0(,R1)          VAR NAME\n         L     R9,4(,R1)          VAR LENGTH\n         L     R9,0(,R9)\n         L     R10,8(,R1)         VAR DATA\n*\n         L     R11,=V(VARPOOL)\n*\n         USING VARP,R11\n*\nFIND010  DS    0H\n         CLC   VARPNAME,0(R8)     SEARCH FOR MATCHING NAME\n         BE    GETVAR             BRANCH IF FOUND\n*\n         CLC   VARPNAME,=X'0000000000000000'  EMPTY SLOT?\n         BE    FIND020            YES - VAR NOT FOUND\n*\n         LA    R11,16(,R11)       POINT TO NEXT ENTRY\n         B     FIND010            AND LOOP BACK\n*\n*\nFIND020  DS    0H\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         LA    R15,8\n         BR    R14\n*\n*\n*----------------------------------------------------------------------\n*\n*\nGETVAR   DS    0H\n         C     R9,=F'256'         CHECK MAX LENGTH\n         BNH   GETV010            BRANCH IF OK\n*\n         LA    R9,256             TRUNC TO MAX LEN\nGETV010  DS    0H\n         MVI   0(R10),C' '        START CLEARING TARGET AREA\n         LR    R1,R9              COPY LENGTH\n         BCTR  R1,0               SUBTRACT ONE\n         LTR   R1,R1              CHECK FOR ZERO\n         BZ    GETV020            YES - SKIP CLAER\n         BCTR  R1,0\n         EX    R1,GETVMVC1        CLEAR AREA\n*ETVMVC1 MVC   1(0,R10),0(R10)    EXECUTED MOVE\n*\nGETV020  DS    0H\n         LR    R1,R9              TARGET AREA LENGTH\n         LH    R2,VARPLEN         GET VAR LENGTH\n         CR    R1,R2\n         BL    GETV030            USE SMALLEST OF SRC / TGT\n*\n         LR    R1,R2              SET LENGTH\n*\nGETV030  DS    0H\n         L     R4,VARPDATA        POINT TO VAR DATA\n         BCTR  R1,0               FOR EX\n         EX    R1,GETVMVC2\n*ETVMVC2 MVC   0(1,R10),0(R4)\n*\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nGETVMVC1 MVC   1(0,R10),0(R10)    EXECUTED MOVE\nGETVMVC2 MVC   0(1,R10),0(R4)\n*\n*\n* ---------------------------------------------------------------------\n*\n*\n         LTORG ,\n*\n*\nSAVEA    DC    18F'0'\n*\n*\nVARP     DSECT ,\nVARPNAME DS    CL8\nVARPLEN  DS    H\n         DS    XL2\nVARPDATA DS    A\nVARPELEN EQU   *-VARP\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n./ ADD NAME=FSIVLOC  8005-75273-75281-1104-00188-00117-00000-TCS3\nVLOC     CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING VLOC,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n         L     R8,0(,R1)          VAR NAME\n         L     R9,4(,R1)          VAR LENGTH\n         L     R9,0(,R9)\n         L     R10,8(,R1)         VAR DATA\n*\n         L     R11,=V(VARDEFS)\n*\n         USING VARP,R11\n*\nFIND010  DS    0H\n         CLC   VARPNAME,0(R8)     SEARCH FOR MATCHING NAME\n         BE    GETVAR             BRANCH IF FOUND\n*\n         CLC   VARPNAME,=X'0000000000000000'  EMPTY SLOT?\n         BE    FIND020            YES - VAR NOT FOUND\n*\n         LA    R11,16(,R11)       POINT TO NEXT ENTRY\n         B     FIND010            AND LOOP BACK\n*\n*\nFIND020  DS    0H\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         LA    R15,8\n         BR    R14\n*\n*\n*----------------------------------------------------------------------\n*\n*\nGETVAR   DS    0H\n         CLI   VARPTYPE,X'1'      FIXED/NUMERIC ?\n         BE    NUMVAR             YES - BRANCH\n*\n         C     R9,=F'256'         CHECK MAX LENGTH\n         BNH   GETV010            BRANCH IF OK\n*\n         LA    R9,256             TRUNC TO MAX LEN\nGETV010  DS    0H\n         MVI   0(R10),C' '        START CLEARING TARGET AREA\n         LR    R1,R9              COPY LENGTH\n         BCTR  R1,0               SUBTRACT ONE\n         LTR   R1,R1              CHECK FOR ZERO\n         BZ    GETV020            YES - SKIP CLAER\n         BCTR  R1,0\n         EX    R1,GETVMVC1        CLEAR AREA\n*ETVMVC1 MVC   1(0,R10),0(R10)    EXECUTED MOVE\n*\nGETV020  DS    0H\n         LR    R1,R9              TARGET AREA LENGTH\n         LH    R2,VARPLEN         GET VAR LENGTH\n         CR    R1,R2\n         BL    GETV030            USE SMALLEST OF SRC / TGT\n*\n         LR    R1,R2              SET LENGTH\n*\nGETV030  DS    0H\n         L     R4,VARPDATA        POINT TO VAR DATA\n         BCTR  R1,0               FOR EX\n         EX    R1,GETVMVC2\n*ETVMVC2 MVC   0(1,R10),0(R4)\n*\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nGETVMVC1 MVC   1(0,R10),0(R10)    EXECUTED MOVE\nGETVMVC2 MVC   0(1,R10),0(R4)\n*\n*\n*----------------------------------------------------------------------\n*\n*\nNUMVAR   DS    0H\n         C     R9,=F'256'         CHECK MAX LENGTH\n         BNH   NUMV010            BRANCH IF OK\n*\n         LA    R9,256             TRUNC TO MAX LEN\nNUMV010  DS    0H\n         MVI   0(R10),C' '        START CLEARING TARGET AREA\n         LR    R1,R9              COPY LENGTH\n         BCTR  R1,0               SUBTRACT ONE\n*\n         LTR   R1,R1              CHECK FOR ZERO\n         BZ    NUMV020            YES - SKIP CLAER\n*\n         BCTR  R1,0\n         EX    R1,NUMVMVC1        CLEAR AREA\n*UMVMVC1 MVC   1(0,R10),0(R10)    EXECUTED MOVE\n*\nNUMV020  DS    0H\n         L     R4,VARPDATA        ADDRESS OF DATA\n         L     R2,0(,R4)          GET BINARY DATA VALUE\n         CVD   R2,DOUBLE          CONVERT TO PACKED DECIMAL\n         LA    R1,EDWK+15\n         MVC   EDWK,=X'40202020202020202020202020202120'\n         EDMK  EDWK,DOUBLE\n         LR    R5,R1              SAVE ADDR OF 1ST DIGIT\n         LA    R2,EDWK+15\n         SR    R2,R1              GET THE LENGTH OF THE DATA\n         LA    R2,1(,R2)          ADJUST AND PLACE IN R2\n*\n         LR    R1,R9              TARGET AREA LENGTH\n         CR    R1,R2              COMPARE TARGET TO SOURCE LENGTH\n         BL    NUMV030            BRANCH IF SOURCE IS LARGER\n*\n         LA    R4,0(R1,R10)       POINT TO END OF TGT FIELD\n         SR    R4,R2              BACK UP LENGTH OF SRC FIELD\n         BCTR  R2,0               ADJUST FOR EX\n         EX    R2,NUMVMVC3        MOVE IN DATA\n*UMVMVC3 MVC   0(1,R4),0(R5)\n         B     EXIT               AND WE ARE DONE!\n*\n*\n*\nNUMV030  DS    0H\n         BCTR  R1,0               ADJUST FOR EX\n         EX    R1,NUMVMVC3        MOVE IN DATA\n*UMVMVC2 MVC   0(1,R10),0(R5)\n         B     EXIT               AND WE ARE DONE!\n*\n*\nEXIT     DS    0H\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nNUMVMVC1 MVC   1(0,R10),0(R10)    EXECUTED MOVE\nNUMVMVC2 MVC   0(1,R10),0(R5)\nNUMVMVC3 MVC   0(1,R4),0(R5)\n*\n*\n* ---------------------------------------------------------------------\n*\n*\n         LTORG ,\n*\n*\nDOUBLE   DC    D'0'\nEDWK     DC    XL16'00'\n*\n*\nSAVEA    DC    18F'0'\n*\n*\nVARP     DSECT ,\nVARPNAME DS    CL8\nVARPDATA DS    A\nVARPLEN  DS    H\nVARPTYPE DS    X\n         DS    X\nVARPELEN EQU   *-VARP\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n./ ADD NAME=FSIVPUT  8000-74294-74294-2138-00119-00119-00000-TCS3\nVPUT     CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING VPUT,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n         L     R8,0(,R1)          VAR NAME\n         L     R9,4(,R1)          VAR LENGTH\n         L     R9,0(,R9)\n         L     R10,8(,R1)         VAR DATA\n*\n         L     R11,=V(VARPOOL)\n*\n         USING VARP,R11\n*\nFIND010  DS    0H\n         CLC   VARPNAME,0(R8)     SEARCH FOR MATCHING NAME\n         BE    UPDVAR             BRANCH IF FOUND\n*\n         CLC   VARPNAME,=X'0000000000000000'  EMPTY SLOT?\n         BE    NEWVAR             YES - GO CREATE VAR ENTRY\n*\n         LA    R11,16(,R11)       POINT TO NEXT ENTRY\n         B     FIND010            AND LOOP BACK\n*\n*\nNEWVAR   DS    0H\n         MVC   VARPNAME,0(R8)     COPY IN VAR NAME\n         C     R9,=F'256'         CHECK MAX LENGTH\n         BNH   NEWV010            BRANCH IF OK\n*\n         LA    R9,256             TRUNC TO MAX LEN\nNEWV010  DS    0H\n         STH   R9,VARPLEN         SAVE VAR LENGTH\n         GETMAIN R,LV=256         ALLOC STORAGE\n         ST    R1,VARPDATA        SAVE ADDRESS\n         MVI   0(R1),C' '         CLEAR\n         MVC   1(255,R1),0(R1)         OUT AREA\n*\n         LR    R3,R9\n         BCTR  R3,0\n         EX    R3,NEWVMVC         MOVE DATA\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nNEWVMVC  MVC   0(1,R1),0(R10)     EXECUTED MOVE\n*\n*\n*----------------------------------------------------------------------\n*\n*\nUPDVAR   DS    0H\n         MVC   VARPNAME,0(R8)     COPY IN VAR NAME\n         C     R9,=F'256'         CHECK MAX LENGTH\n         BNH   UPDV010            BRANCH IF OK\n*\n         LA    R9,256             TRUNC TO MAX LEN\nUPDV010  DS    0H\n         STH   R9,VARPLEN         SAVE VAR LENGTH\n         L     R1,VARPDATA        GET DATA ADDRESS\n         MVI   0(R1),C' '         CLEAR\n         MVC   1(255,R1),0(R1)         OUT AREA\n*\n         LR    R3,R9\n         BCTR  R3,0\n         EX    R3,UPDVMVC         MOVE DATA\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nUPDVMVC  MVC   0(1,R1),0(R10)     EXECUTED MOVE\n*\n*\n* ---------------------------------------------------------------------\n*\n*\n         LTORG ,\n*\n*\nSAVEA    DC    18F'0'\n*\n*\nVARP     DSECT ,\nVARPNAME DS    CL8\nVARPLEN  DS    H\n         DS    XL2\nVARPDATA DS    A\nVARPELEN EQU   *-VARP\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n./ ADD NAME=FSIVSTO  8002-75273-75302-2108-00172-00118-00000-TCS3\nVSTO     CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING VSTO,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n         L     R8,0(,R1)          VAR NAME\n         L     R9,4(,R1)          VAR LENGTH\n         L     R9,0(,R9)\n         L     R10,8(,R1)         VAR DATA\n*\n         L     R11,=V(VARDEFS)\n*\n         USING VARP,R11\n*\nFIND010  DS    0H\n         CLC   VARPNAME,0(R8)     SEARCH FOR MATCHING NAME\n         BE    GETVAR             BRANCH IF FOUND\n*\n         CLC   VARPNAME,=X'0000000000000000'  EMPTY SLOT?\n         BE    FIND020            YES - VAR NOT FOUND\n*\n         LA    R11,16(,R11)       POINT TO NEXT ENTRY\n         B     FIND010            AND LOOP BACK\n*\n*\nFIND020  DS    0H\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         LA    R15,8\n         BR    R14\n*\n*\n*----------------------------------------------------------------------\n*\n*\nGETVAR   DS    0H\n         CLI   VARPTYPE,1         IS IT NUMERIC ?\n         BE    NUMVAR             YES - BRANCH\n*\n         CLI   VARPTYPE,2         CHAR DATA ?\n         BNE   ERROR              NO - DON'T KNOW WHAT IT IS\n*\n         L     R6,VARPDATA\n         LH    R5,VARPLEN\n         C     R9,=F'256'         CHECK MAX LENGTH\n         BNH   GETV010            BRANCH IF OK\n*\n         LA    R9,256             TRUNC TO MAX LEN\nGETV010  DS    0H\n         MVI   0(R6),C' '         START CLEARING TARGET AREA\n         LR    R1,R5              COPY LENGTH\n         BCTR  R1,0               SUBTRACT ONE\n         LTR   R1,R1              CHECK FOR ZERO\n         BZ    GETV020            YES - SKIP CLAER\n         BCTR  R1,0\n         EX    R1,GETVMVC1        CLEAR AREA\n*ETVMVC1 MVC   1(0,R6),0(R6)      EXECUTED MOVE\n*\nGETV020  DS    0H\n         LR    R2,R9              AREA LENGTH\n         LH    R1,VARPLEN         GET VAR LENGTH\n         CR    R1,R2\n         BL    GETV030            USE SMALLEST OF SRC / TGT\n*\n         LR    R1,R2              SET LENGTH\n*\nGETV030  DS    0H\n         BCTR  R1,0               FOR EX\n         EX    R1,GETVMVC2\n*ETVMVC2 MVC   0(1,R6),0(R10)\n*\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\n*----------------------------------------------------------------------\n*\n*\nNUMVAR   DS    0H\n         LA    R1,0\n         ST    R1,ACCUM           CLEAR ACCUMULATOR\n*\nNUMV010  DS    0H\n         CLI   0(R10),C'0'        CHECK FOR VALID NUMBER\n         BL    NUMV020\n         CLI   0(R10),C'9'\n         BH    NUMV020\n*\n         MH    R1,=H'10'          SHIFT OVER\n         SLR   R2,R2\n         IC    R2,0(R10)\n         N     R2,=A(X'0F')\n         AR    R1,R2\n         ST    R1,ACCUM           SAVE NEW VALUE\n*\n         LA    R10,1(,R10)\n         BCT   R9,NUMV010         LOOP BACK\n*\nNUMV020  DS    0H\n         L     R1,ACCUM\n         L     R2,VARPDATA\n         ST    R1,0(,R2)          SAVE NEW VALUE\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15            SET ERROR RC\n         BR    R14\n*\n*\n*\n*----------------------------------------------------------------------\n*\n*\nERROR    DS    0H\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         LA    R15,8              SET ERROR RC\n         BR    R14\n*\n*\nGETVMVC1 MVC   1(0,R6),0(R6)      EXECUTED MOVE\nGETVMVC2 MVC   0(1,R6),0(R10)\n*\n*\n* ---------------------------------------------------------------------\n*\n*\nACCUM    DC    F'0'\n*\n*\n         LTORG ,\n*\n*\nSAVEA    DC    18F'0'\n*\n*\nVARP     DSECT ,\nVARPNAME DS    CL8\nVARPDATA DS    A\nVARPLEN  DS    H\nVARPTYPE DS    X\n         DS    X\nVARPELEN EQU   *-VARP\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n./ ADD NAME=SAMPC01  8033-75274-75281-1641-00132-00021-00000-TCS3\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'SAMPC01'.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SOURCE-COMPUTER. IBM-360.\n       OBJECT-COMPUTER. IBM-360.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       77  STOP-FLAG  PIC 9 VALUE 0.\n       77  LOGIN-FLAG PIC 9 VALUE 0.\n       77  ERRSTAT    PIC X VALUE SPACES.\n       77  ERRSTAT1   PIC X VALUE SPACES.\n       01  DISPLAY-PARMS.\n           10 SCREEN-NAME  PIC X(8) VALUE 'SAMP01A'.\n           10 MESSAGE-ID   PIC X(8) VALUE SPACES.\n           10 CURSOR-FIELD PIC X(8) VALUE SPACES.\n       01  SCREEN-VARS.\n           10 PF01 PIC X(8) VALUE 'HELP'.\n           10 PF13 PIC X(8) VALUE 'HELP'.\n           10 PF03 PIC X(8) VALUE 'END'.\n           10 PF15 PIC X(8) VALUE 'END'.\n           10 PF04 PIC X(8) VALUE 'RETN'.\n           10 PF16 PIC X(8) VALUE 'RETN'.\n           10 ZSTAT PIC X(2) VALUE SPACES.\n           10 USERID PIC X(8) VALUE SPACES.\n           10 PASSWD PIC X(8) VALUE SPACES.\n           10 ZCMD   PIC X(50) VALUE SPACES.\n           10 HITS  PIC S9(5) COMP VALUE +0.\n           10 LPF01 PIC X(8) VALUE 'PF01'.\n           10 LPF13 PIC X(8) VALUE 'PF13'.\n           10 LPF03 PIC X(8) VALUE 'PF03'.\n           10 LPF15 PIC X(8) VALUE 'PF15'.\n           10 LPF04 PIC X(8) VALUE 'PF04'.\n           10 LPF16 PIC X(8) VALUE 'PF16'.\n           10 LZSTAT  PIC X(8) VALUE 'ZSTAT'.\n           10 LUSERID PIC X(8) VALUE 'USERID'.\n           10 LPASSWD PIC X(8) VALUE 'PASSWD'.\n           10 LZCMD   PIC X(8) VALUE 'ZCMD'.\n           10 LHITS   PIC X(8) VALUE 'HITS'.\n           10 VDEF-LEN  PIC S9(5) COMP VALUE +1.\n           10 VDEF-TYPE PIC S9(5) COMP VALUE +2.\n           10 VDEF-TYPE-NUM  PIC S9(5) COMP VALUE +1.\n           10 VDEF-TYPE-CHAR PIC S9(5) COMP VALUE +2.\n           10 VDEF-OPT  PIC S9(5) COMP VALUE +0.\n       PROCEDURE DIVISION.\n       000-START-RUN.\n           PERFORM 000-DEFINE-VARS.\n           PERFORM 000-LOGIN-LOOP THRU 000-LOGIN-LOOP-EXIT\n                   UNTIL STOP-FLAG = 1 OR\n                         LOGIN-FLAG = 1.\n           IF STOP-FLAG = 1\n              GO TO 999-END-RUN.\n           MOVE 'SAMP01B' TO SCREEN-NAME.\n           PERFORM 000-PROCESS-LOOP THRU 000-PROCESS-LOOP-EXIT\n                   UNTIL STOP-FLAG = 1.\n           GO TO 999-END-RUN.\n       000-LOGIN-LOOP.\n           MOVE ERRSTAT TO ERRSTAT1.\n           MOVE SPACES  TO ERRSTAT.\n           PERFORM 000-DISPLAY THRU 000-DISPLAY-EXIT.\n           MOVE 'SAMP0105' TO MESSAGE-ID.\n           IF USERID = SPACES\n              PERFORM 000-VALIDATE-USERID THRU\n                      000-VALIDATE-USERID-EXIT\n              GO TO 000-LOGIN-LOOP-EXIT.\n           IF PASSWD NOT = 'SECRET'\n              PERFORM 000-VALIDATE-PASSWD THRU\n                      000-VALIDATE-PASSWD-EXIT\n              GO TO 000-LOGIN-LOOP-EXIT.\n           MOVE 1 TO LOGIN-FLAG.\n       000-LOGIN-LOOP-EXIT.\n       000-PROCESS-LOOP.\n           MOVE SPACES  TO ERRSTAT.\n           PERFORM 000-DISPLAY THRU 000-DISPLAY-EXIT.\n           MOVE 'SAMP0105' TO MESSAGE-ID.\n       000-PROCESS-LOOP-EXIT.\n       000-VALIDATE-USERID.\n           MOVE 'USERID' TO CURSOR-FIELD.\n           MOVE 'U' TO ERRSTAT.\n           IF ERRSTAT1 = 'U'\n              MOVE 'SAMP0102' TO MESSAGE-ID\n           ELSE\n              MOVE 'SAMP0101' TO MESSAGE-ID.\n       000-VALIDATE-USERID-EXIT.\n       000-VALIDATE-PASSWD.\n           MOVE 'PASSWD' TO CURSOR-FIELD.\n           MOVE SPACES TO PASSWD.\n           MOVE 'P' TO ERRSTAT.\n           IF ERRSTAT1 = 'P'\n              MOVE 'SAMP0104' TO MESSAGE-ID\n           ELSE\n              MOVE 'SAMP0103' TO MESSAGE-ID.\n       000-VALIDATE-PASSWD-EXIT.\n       000-DISPLAY.\n           MOVE SPACES TO ZCMD.\n           CALL 'DISPLAY' USING SCREEN-NAME,\n                                MESSAGE-ID,\n                                CURSOR-FIELD.\n           ADD +1 TO HITS.\n           MOVE SPACES  TO MESSAGE-ID.\n           MOVE SPACES  TO CURSOR-FIELD.\n           IF ZCMD = 'END' MOVE 1 TO STOP-FLAG.\n       000-DISPLAY-EXIT.\n       000-DEFINE-VARS.\n           MOVE 8 TO VDEF-LEN.\n           CALL 'VDEFINE' USING LPF01, PF01,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           CALL 'VDEFINE' USING LPF03, PF03,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           CALL 'VDEFINE' USING LPF04, PF04,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           CALL 'VDEFINE' USING LPF13, PF13,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           CALL 'VDEFINE' USING LPF15, PF15,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           CALL 'VDEFINE' USING LPF16, PF16,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           CALL 'VDEFINE' USING LUSERID, USERID,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           CALL 'VDEFINE' USING LPASSWD, PASSWD,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           MOVE 2 TO VDEF-LEN.\n           CALL 'VDEFINE' USING LZSTAT, ZSTAT,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           MOVE 50 TO VDEF-LEN.\n           CALL 'VDEFINE' USING LZCMD, ZCMD,\n                                 VDEF-TYPE, VDEF-LEN, VDEF-OPT.\n           MOVE 4 TO VDEF-LEN.\n           CALL 'VDEFINE' USING LHITS, HITS,\n                                 VDEF-TYPE-NUM, VDEF-LEN, VDEF-OPT.\n       999-END-RUN.\n           STOP RUN.\n./ ADD NAME=SAMP01   8036-74297-75302-1805-00187-00133-00000-TCS3\nSAMP01   CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING SAMP01,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n*\n         $VDEF ('PF03',PF03,2,8,0)\n*\n         $VDEF ('PF15',PF15,2,8,0)\n*\n*\n         $VDEF ('ZSTAT',ZSTAT,2,2,0)\n*\n         $VDEF ('USERID',USERID,2,8,0)\n*\n         $VDEF ('PASSWD',PASSWD,2,8,0)\n*\n         $VDEF ('ZCMD',ZCMD,2,50,0)\n*\n         $VDEF ('HITS',HITS,1,4,0)\n*\n*/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z\n*\n         XC    ERRSTAT,ERRSTAT\nLOGIN    DS    0H\n         MVC   ERRSTAT1,ERRSTAT\n         XC    ERRSTAT,ERRSTAT\n*\n         $DISPLAY ('SAMP01A',MSGID,CSRFLD)\n*\n         L     R1,HITS\n         LA    R1,1(,R1)\n         ST    R1,HITS\n*\n         MVC   MSGID,=CL8' '\n         MVC   CSRFLD,=CL8' '\n*\n*\n         OC    ZCMD,=CL50' '\n         CLC   =C'END ',ZCMD\n         BE    GOOD900\n*\n*\n         CLC   =CL8' ',USERID\n         BE    LOG010\n*\n         OC    PASSWD,=CL8' '\n         CLC   =CL8'SECRET',PASSWD\n         BNE   LOG020\n*\n         B     GOOD010\n*\n*\nLOG010   DS    0H\n         MVI   ERRSTAT,C'U'\n         CLI   ERRSTAT1,C'U'\n         BE    LOG015\n*\n         MVC   MSGID,=CL8'SAMP0101'\n         B     LOGIN\n*\n*\nLOG015   DS    0H\n         MVC   MSGID,=CL8'SAMP0102'\n         B     LOGIN\n*\n*\nLOG020   DS    0H\n         MVC   PASSWD,=CL8' '\n*\n         MVI   ERRSTAT,C'P'\n         CLI   ERRSTAT1,C'P'\n         BE    LOG025\n*\n         MVC   MSGID,=CL8'SAMP0103'\n         MVC   CSRFLD,=CL8'PASSWD'\n         B     LOGIN\n*\n*\nLOG025   DS    0H\n         MVC   MSGID,=CL8'SAMP0104'\n         MVC   CSRFLD,=CL8'PASSWD'\n         B     LOGIN\n*\n*\n*\n*/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z\n*\n*\nGOOD010  DS    0H\n*\nGOOD020  DS    0H\n         $DISPLAY ('SAMP01B',MSGID,CSRFLD)\n*\n         L     R1,HITS\n         LA    R1,1(,R1)\n         ST    R1,HITS\n*\n         MVC   MSGID,=CL8' '\n         MVC   CSRFLD,=CL8' '\n*\n         OC    ZCMD,=CL50' '\n         CLC   =C'END ',ZCMD\n         BE    GOOD900\n*\n         MVC   MSGID,=CL8'SAMP0105'\n         B     GOOD020\n*\n*\nGOOD900  DS    0H\n         TPUT  HELLOMSG,HELLOLEN\n*\n*\n          L     R13,4(,R13)\n          LM    R14,R12,12(R13)\n          SLR   R15,R15\n          BR    R14\n*\n*\n*\n*\n*\n*\n*\nPDSMBR   DC    CL8'TEST01'\nCSRFLD   DC    CL8' '\n*\n*\nMSGID    DC    CL8' '\n*\n*\n*\n*\nHITS     DC    F'0'\n*\nPF03     DC    CL8'END'\nPF15     DC    CL8'END'\nZSTAT    DC    CL2'OK'\nUSERID   DC    CL8' '\nPASSWD   DC    CL8' '\nZCMD     DC    CL50' '\n*\n*\nERRSTAT  DC    C' '\nERRSTAT1 DC    C' '\n*\n*\n         DS    0H\nHELLOMSG DC    C'THE USERID=<'\nHELLOUSR DC    CL8' ',C'> PASSWORD=<'\nHELLOPWD DC    CL8' ',C'>'\nHELLOLEN EQU   *-HELLOMSG\n*\n*\n          LTORG ,\n*\n*\nSAVEA     DC    18F'0'\n*\n*\n*\n*\nR0        EQU   0\nR1        EQU   1\nR2        EQU   2\nR3        EQU   3\nR4        EQU   4\nR5        EQU   5\nR6        EQU   6\nR7        EQU   7\nR8        EQU   8\nR9        EQU   9\nR10       EQU   10\nR11       EQU   11\nR12       EQU   12\nR13       EQU   13\nR14       EQU   14\nR15       EQU   15\n*\n*\n          END   ,\n./ ADD NAME=SAMP02   8018-74304-75302-1807-00123-00178-00000-TCS3\nSAMP02   CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING SAMP02,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n*\n         L     R1,16              CVT\n         L     R1,0(,R1)          OLD/NEW\n         L     R1,4(,R1)          TCB\n         L     R1,12(,R1)         TIOT\n         MVC   JOB,0(R1)\n         MVC   PROC,16(R1)\n*\n         $VDEF ('ZUSER',JOB,1,8,0)\n*\n         $VDEF ('ZPROC',PROC,2,8,0)\n*\n         $VDEF ('PF03',PFK03,2,8,0)\n*\n         $VDEF ('PF15',PFK15,2,8,0)\n*\n         $VDEF ('PF01',PFK01,2,8,0)\n*\n         $VDEF ('PF13',PFK13,2,8,0)\n*\n         $VDEF ('PF04',PFK04,2,8,0)\n*\n         $VDEF ('PF16',PFK16,2,8,0)\n*\n         $VDEF ('ZCMD',ZCMD,2,50,0)\n*\n*\n*/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z\n*\n*\nLOOP     DS    0H\n*\n         $DISPLAY ('SAMP02A',MSGID)\n*\n         MVC   MSGID,=CL8' '\n*\n         OC    ZCMD,=CL50' '\n         CLC   =C'END ',ZCMD\n         BE    EXIT\n*\n*\n         CLC   =C'X ',ZCMD\n         BE    EXIT\n*\n         CLC   ZCMD(2),=C'0 '\n         BL    BADCMD\n*\n         CLC   ZCMD(2),=C'9 '\n         BH    BADCMD\n*\n*\n         MVI   ZCMD,C' '\n         MVC   ZCMD+1(L'ZCMD-1),ZCMD\n         MVC   MSGID,=CL8'SAMP0201'\n         B     LOOP\n*\n*\nBADCMD   DS    0H\n         MVC   MSGID,=CL8'SAMP0202'\n         B     LOOP\n*\n*\n*/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z\n*\n*\nEXIT     DS    0H\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nZCMD     DC    CL50' '\n*\n*\n         LTORG ,\n*\n*\nMSGID    DC    CL8' '\nJOB      DC    CL8' '\nPROC     DC    CL8' '\nPFK01    DC    CL8'HELP    '\nPFK13    DC    CL8'HELP    '\nPFK03    DC    CL8'END     '\nPFK15    DC    CL8'END     '\nPFK04    DC    CL8'RETN    '\nPFK16    DC    CL8'RETN    '\n*\n*\nSAVEA    DC    18F'0'\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*\n         END   ,\n./ ADD NAME=SAMP03   8002-75302-75302-1811-00098-00123-00000-TCS3\nSAMP03   CSECT ,\n         SAVE  (14,12),,*\n*\n         LR    R12,R15\n         USING SAMP03,R12\n*\n         LA    R11,SAVEA\n         ST    R13,4(,R11)\n         ST    R11,8(,R13)\n         LR    R13,R11\n*\n*\n         $VDEF ('PF03',PFK03,2,8,0)\n*\n         $VDEF ('PF15',PFK15,2,8,0)\n*\n         $VDEF ('PF01',PFK01,2,8,0)\n*\n         $VDEF ('PF13',PFK13,2,8,0)\n*\n         $VDEF ('PF04',PFK04,2,8,0)\n*\n         $VDEF ('PF16',PFK16,2,8,0)\n*\n         $VDEF ('ZCMD',ZCMD,2,50,0)\n*\n         $VDEF ('NUMBER',NUMBER,1,4,0)\n*\n*\n*/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z\n*\n*\nLOOP     DS    0H\n*\n         $DISPLAY ('SAMP03A',MSGID)\n*\n         MVC   MSGID,=CL8' '\n*\n         OC    ZCMD,=CL50' '\n         CLC   =C'END ',ZCMD\n         BE    EXIT\n*\n*\n         CLC   =C'X ',ZCMD\n         BE    EXIT\n*\n         B     LOOP\n*\n*\n*/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z/Z\n*\n*\nEXIT     DS    0H\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n*\n*\nZCMD     DC    CL50' '\n*\n*\n         LTORG ,\n*\n*\nMSGID    DC    CL8' '\nPFK01    DC    CL8'HELP    '\nPFK13    DC    CL8'HELP    '\nPFK03    DC    CL8'END     '\nPFK15    DC    CL8'END     '\nPFK04    DC    CL8'RETN    '\nPFK16    DC    CL8'RETN    '\nNUMBER   DC    F'0'\n*\n*\nSAVEA    DC    18F'0'\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*\n         END   ,\n./ ADD NAME=VARDEFS  8001-75273-75273-1427-00053-00053-00000-TCS3\nVARDEFS  CSECT ,\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         END   ,\n./ ADD NAME=VARPOOL  8000-75273-75273-1416-00053-00053-00000-TCS3\nVARPOOL  CSECT ,\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         DC    XL20'00'\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOAD": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031\\x1f\\x01\\x031\\x1f\\x01\\x16\\x01F\\x01F\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-07T00:00:00", "modifydate": "2003-11-07T01:16:00", "lines": 326, "newlines": 326, "modlines": 0, "user": "FSI120"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LOADT": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031/\\x01\\x031/ \\x04\\x01`\\x01`\\x00\\x00\\xd9\\xc5\\xe5\\xd3\\xd6\\xc1\\xc4@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T20:04:00", "lines": 352, "newlines": 352, "modlines": 0, "user": "REVLOAD"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MLIB": {"ttr": 4868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031\\x1f\\x01\\x031\\x1f\\x01\\x16\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-07T00:00:00", "modifydate": "2003-11-07T01:16:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FSI120"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "MLIBT": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031/\\x01\\x031/\\x19C\\x00\\t\\x00\\t\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T19:43:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "FSI120"}, "text": "./ ADD NAME=SAMP010  8002-74301-74304-1315-00005-00005-00000-TCS2\nSAMP0101 'INVALID USERID ENTERED'\nSAMP0102 'HINT: USE ANYTHING FOR THE USERID'\nSAMP0103 'INVALID PASSWORD ENTERED'\nSAMP0104 'HINT: TRY USING ''SECRET'' FOR THE PASSWORD'\nSAMP0105 'HINT: TRY USING ''END'' FOR A COMMAND'\n./ ADD NAME=SAMP020  8001-74304-74304-1512-00002-00005-00000-TCS2\nSAMP0201 'COMMAND NOT IMPLEMENTED'\nSAMP0202 'INVALID COMMAND'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OBJ": {"ttr": 4872, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031\\x1f\\x01\\x031\\x1f\\x01\\x16\\x01\\xf7\\x01\\xf7\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-07T00:00:00", "modifydate": "2003-11-07T01:16:00", "lines": 503, "newlines": 503, "modlines": 0, "user": "FSI120"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "OBJT": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031/\\x01\\x031/\\x19E\\x01\\xad\\x01\\xad\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T19:45:00", "lines": 429, "newlines": 429, "modlines": 0, "user": "FSI120"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PLIB": {"ttr": 5131, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031\\x1f\\x01\\x031\\x1f\\x01\\x16\\x00\\xa0\\x00\\xa0\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-07T00:00:00", "modifydate": "2003-11-07T01:16:00", "lines": 160, "newlines": 160, "modlines": 0, "user": "FSI120"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PLIBT": {"ttr": 5378, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x01\\x031/\\x01\\x031/\\x19H\\x00\\x96\\x00\\x96\\x00\\x00\\xc6\\xe2\\xc9\\xf1\\xf2\\xf0@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2003-11-08T00:00:00", "modifydate": "2003-11-08T19:48:00", "lines": 150, "newlines": 150, "modlines": 0, "user": "FSI120"}, "text": "./ ADD NAME=FSIDFLT  8003-74303-74303-1719-00029-00029-00000-TCS3\n)ATTR DEFAULT(%+_)\n ! TYPE(OUTPUT) INTENS(HIGH)\n : TYPE(INPUT)  INTENS(NON)\n)BODY\n+------------------------------------------------------------------------------\n+\n+\n+\n+\n+               %@@@@@@@@@@@@@@     @@@@@@@@@@@    @@@@@@@@@@@@\n+              %@@@@@@@@@@@@@@    @@@@@@@@@@@@    @@@@@@@@@@@@\n+             %@@@@              @@@@                @@@@\n+            %@@@@@@@@@@         @@@@@@@@@@         @@@@\n+           %@@@@@@@@@@                @@@@        @@@@\n+          %@@@@              @@@@@@@@@@@@    @@@@@@@@@@@@\n+         %@@@@              @@@@@@@@@@@     @@@@@@@@@@@@\n+\n+\n+\n+              -----------------------------------------------\n+              |                                             |\n+              |    %NO INITIAL PROGRAM SPECIFIED TO RUN+    |\n+              |                                             |\n+              -----------------------------------------------\n+\n+\n+\n%===>_ZCMD                                                             +\n)END\n./ ADD NAME=SAMP01A  8014-74296-75281-1043-00032-00024-00000-TCS3\n)ATTR DEFAULT(%+_)\n ! TYPE(OUTPUT) INTENS(HIGH)\n : TYPE(INPUT)  INTENS(NON)\n)BODY\n+\n+                                 +TEST PANEL\n+\n+\n+\n+               %@@@@@@@@@@@@@@     @@@@@@@@@@@    @@@@@@@@@@@@\n+              %@@@@@@@@@@@@@@    @@@@@@@@@@@@    @@@@@@@@@@@@\n+             %@@@@              @@@@                @@@@\n+            %@@@@@@@@@@         @@@@@@@@@@         @@@@\n+           %@@@@@@@@@@                @@@@        @@@@\n+          %@@@@              @@@@@@@@@@@@    @@@@@@@@@@@@\n+         %@@@@              @@@@@@@@@@@     @@@@@@@@@@@@\n+\n+       !Z       +\n+                           +USERID%===>_Z       +\n+\n+                           +PASSWD%===>:Z       +\n+\n+\n+\n+\n+\n!HITS    %HITS+\n%===>_ZCMD                                                             +\n)PROC\n .ZVARS = '(ZSTAT USERID\n                  PASSWD)'\n)END\n./ ADD NAME=SAMP01B  8007-74299-75281-1626-00028-00029-00000-TCS3\n)ATTR DEFAULT(%+_)\n ! TYPE(OUTPUT) INTENS(HIGH)\n)BODY\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ WELCOME TO FSI TEST SYSTEM\n+\n+     PLEASE ENTER A COMMAND TO CONTINUE\n+\n+     CURRENTLY THE ONLY%VALID+COMMANDS ARE:\n+         %END+\n+\n+\n+\n+\n+\n+\n+\n!HITS    %HITS+\n%===>_ZCMD                                                             +\n)END\n./ ADD NAME=SAMP02A  8011-74304-74304-1550-00028-00027-00000-TCS3\n)ATTR DEFAULT(%+:)\n # TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%--------------------------------- FSI MAIN MENU ------------------------------\n%OPTION ===>:ZCMD                                                              +\n+                                                            USERID  -#ZUSER   +\n   %0 +DEFAULTS    - ALTER / DISPLAY SESSION DEFAULS         TIME    -#ZTIME   +\n   %1 +VIEW        - DISPLAY SOURCE DATA OR OUTPUT LISTINGS  SYSTEM  -#ZSYS    +\n   %2 +EDIT        - UPDATE / CREATE A MEMBER OR DATASET     TSO-PROC-#ZPROC   +\n   %3 +UTILITY     - ENTER UTILITY\n   %4 +ASSEMBLER   - FOREGROUND ASSEMBLER AND LINK\n   %5 +USER        - EXECUTE RPF USER ROUTINE\n   %6 +TSO         - EXECUTE TSO COMMANDS\n   %7 +TUTORIAL    - DISPLAY HELP INFORMATION\n   %8 +TEST        - ENTER TEST MODE (AUTHORIZED)\n   %9 +OPERATOR    - ENTER OPERATOR MODE\n   %X +EXIT        - TERMINATE FSI\n+\n+HIT%PF03/15+TO TERMINATE FSI\n% ____________________________\n%|                            |\n%| FSI VERSION 1 RELEASE 1.0  |\n%|                            |\n%| WRITTEN BY TOMMY SPRINKLE  |\n%| TOMMY@TOMMYSPRINKLE.COM    |\n%|____________________________|                                        +\n+\n)END\n./ ADD NAME=SAMP03A  8001-75302-75302-1815-00028-00028-00000-TCS3\n)ATTR DEFAULT(%+:)\n # TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%--------------------------------- FSI TEST PANEL -----------------------------\n%OPTION ===>:ZCMD                                                              +\n+\n+  +A NUMERIC FIELD%==>:NUMBER+\n+\n+  +THE NUMERIC FIELD (#NUMBER+)\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+HIT%PF03/15+TO TERMINATE FSI\n+\n+\n+\n+\n+\n+\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT654/FILE654.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT654", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}