{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012758000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE778.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE778.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x18'", "DS1TRBAL": "b'\\x08\\xc4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05L\\x00\\x08\\x05L\\x00\\n\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04L\\x00\\x00\\x01\\x08\\x01O\\x01\\x08\\x01O\\x08V\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf6@@@'", "ispf": {"version": "04.76", "flags": 0, "createdate": "2008-01-14T00:00:00", "modifydate": "2008-01-14T08:56:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-476"}, "text": "REGULAR CBT TAPE - VERSION 476    FILE:  778\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT476.FILE778\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 476 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/14/08    08:56:17    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00H\\x01\\x08\\x01O\\x01\\x08\\x01O\\x083\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-01-14T00:00:00", "modifydate": "2008-01-14T08:33:48", "lines": 24, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    RXGIMAPI - a driver to GIMAPI (new tool) by Daniel Gaeta\nFrom:       dfgaeta@br.ibm.com\nDate:       Thu, 10 Jan 2008 14:56:39 -0200\nTo:         sbgolob@cbttape.org\n\nHi Sam,\n\nI have created a new tool to use with SMP/E.\nIt is just a driver to use with GIMAPI (API) to generate new\nreports from SMP/E database using to REXX language.\n\nUsing some variables as GIMCSI,GIMZONE,GIMENTRY,GIMSENTRY and\nGIMFILTER we can select a lot of information and get the output\nusing OUTTRAP function. These variables will be available to\nusing RXGIMAPI.\n\nI am sending a XMIT with a #INDEX and #DOC members.\n\nLet me know if you have an additional comment.\n\nRegards!\n\nDaniel\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x009\\x01\\x08\\x01\\x0f\\x01\\x08\\x01\\x0f\\x11B\\x00\"\\x00\\x08\\x00\\x00\\xc4\\xc6\\xc7\\xc1\\xc5\\xe3\\xc1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2008-01-10T00:00:00", "modifydate": "2008-01-10T11:42:39", "lines": 34, "newlines": 8, "modlines": 0, "user": "DFGAETA"}, "text": "DEAR FRIENDS,\n\nSOMETIMES WE NEED TO GENERATE REPORTS FROM SMP AND POST PROCESS THEIR\nSYSOUTS.\nSMP/E SINCE 3.2 HAS A GIMAPI MODULE, A API TO SOLVE THIS ISSUES BUT\nJUST BAL, PL/I AND C PROGRAM CAN USE IT.\nI CREATED A RXGIMAPI TO ABLE TO USE IN REXX PROGRAMS THROUGH REXX\nVARIABLES.\n\nVARIABLES :\n\nGIMCSI='WWZ038.SR#2008A.IFA810.GLOBAL.CSI'\nA CSI VSAM DATASET\n\nGIMZONE='IFA810T'\nA ZONE ENTRY, CAN BE : GLOBAL, ALLTZONES OR ALLDZONES\n(SEE MANUAL TO MORE INSTRUCTIONS)\n\nGIMENTRY='SYSMOD'\nUSED WITH GIMZONE\n(SEE MANUAL TO MORE INSTRUCTIONS)\n\nGIMSENTRY='*'\nUSED WITH GIMENTRY\n(SEE MANUAL TO MORE INSTRUCTIONS)\n\nGIMFILTER=\"FMID='HADG810'\"\nA FILTER TO RESULTS\n(SEE MANUAL TO MORE INSTRUCTIONS)\n\nLET ME KNOW IF YOU HAVE AN ADDITIONAL COMMENTS.\n\nDFGAETA@BR.IBM.COM\nGAETA, DANIEL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#INDEX": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\"\\x01\\x08\\x01\\x0f\\x01\\x08\\x01\\x0f\\x114\\x00\\x03\\x00\\x01\\x00\\x00\\xc4\\xc6\\xc7\\xc1\\xc5\\xe3\\xc1@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-01-10T00:00:00", "modifydate": "2008-01-10T11:34:22", "lines": 3, "newlines": 1, "modlines": 0, "user": "DFGAETA"}, "text": "ALXEXCOM - BAL PROGRAM TO MANIPULATE REXX VARIABLES\nGIMREXX  - REXX SAMPLE PROGRAM\nRXGIMAPI - A FRONT END TO GIMAPI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE778": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04L\\x00\\x00\\x01\\x08\\x01O\\x01\\x08\\x01O\\x08V\\x00\\x06\\x00\\x06\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf6@@@'", "ispf": {"version": "04.76", "flags": 0, "createdate": "2008-01-14T00:00:00", "modifydate": "2008-01-14T08:56:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "CBT-476"}, "text": "//***FILE 778 is from Daniel F. Gaeta and contains a set of         *   FILE 778\n//*           programs to access the SMP/E API, GIMAPI, through     *   FILE 778\n//*           REXX variables, to produce reports from SMP/E zones.  *   FILE 778\n//*                                                                 *   FILE 778\n//*           email:  dfgaeta@br.ibm.com                            *   FILE 778\n//*                                                                 *   FILE 778\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALXEXCOM": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x003\\x01\\x05 \\x1f\\x01\\x073/!Q\\x00\\x9a\\x00\\xa8\\x00\\x00\\xc4\\xc6\\xc7\\xc1\\xc5\\xe3\\xc1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2005-07-20T00:00:00", "modifydate": "2007-11-28T21:51:33", "lines": 154, "newlines": 168, "modlines": 0, "user": "DFGAETA"}, "text": "    TITLE 'ALXEXCOM - PROGRAM TO PROCESS REXX  VARIABLES'\nALXEXCOM CSECT\nALXEXCOM AMODE 31\nALXEXCOM RMODE ANY\n         PRINT ON,GEN\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nNO_STORAGE   EQU   20\nBAD_FUNCTION EQU   24\n         EJECT\n****************************************************************\n*  SAVE LOGIC AND ENTRY SETUP OF PROGRAM.                      *\n****************************************************************\n         STM   R14,R12,12(R13)     SAVE IN CALLERS SAVEAREA\n         LR    R12,R15\n         USING ALXEXCOM,R12\n*        LR    R11,R1              LOAD UP THE PARAMETER LIST\n         L     R11,0(R1)           LOAD UP THE PARAMETER LIST\n         USING PARMLIST,R11\n         CLC   FUNCTION(5),FETCH_KW  VERIFY GOOD FUNCTION\n         BE    GOOD_FUNCTION         YES, THEN GO AROUND\n         CLC   FUNCTION(5),STORE_KW  VERIFY GOOD FUNCTION\n         BE    GOOD_FUNCTION         YES, THEN GO AROUNT\n         LA    R15,BAD_FUNCTION    LOAD UP PREDETERMINED RC\n         B     RETURN2             AND GET OUT\nGOOD_FUNCTION  EQU   *\n         L     R3,VARIABLE_COUNT   GET THE COUNT\n         SLL   R3,5                MULTIPLY BY 32 FOR SHVBLOCK\n         LA    R2,STORAGE_SIZE     GET THE SIZE OF OUR STORAGE\n         AR    R3,R2               TOTAL FOR GETMAIN\n         GETMAIN RC,LV=(3)\n         LTR   R15,R15             SEE IF VALID GETMAIN\n         BZ    GOOD_STORAGE        YES, THEN CONTINUE MACDUFF\n         LA    R15,NO_STORAGE      LOAD UP PREDETERMINED RC\n         B     RETURN2             AND GET OUT\nGOOD_STORAGE   EQU  *\n         ST    R1,8(R13)           SAVE OUR SAVERAREA\n         ST    R13,4(R1)           SAVE THEIR SAVEAREA\n         LR    R13,R1              LOAD OURS\n         USING STORAGE,R13\n         LA    R10,0(R2,R13)        ADDRESS TO THE SHVBLOCK\n         ST    R10,SHVBLOCK_ADDRESS SAVE THIS LOCATION\n         USING SHVBLOCK,R10         LET R10 ADDRESS THE SHV BLOCKS\n         ST    R3,GETMAIN_LENGTH    SAVE THIS FOR FREEMAIN\n*******************************************************************\n*  WE ARE NOW GOING TO LOOP THROUGH THE VARIABLE PARAMETER LIST,  *\n* INITIALIZE THE SHVBLOCKS, LOAD THE IRXEXCOM PROGRAM AND THEN    *\n* CALL IT, THE RETURN CODE WILL BE SAVED IN THE PARAMETER LIST    *\n* FIELD AS WELL AS IN REGISTER 15.                                *\n*******************************************************************\n         LA    R4,VARIABLE_FIELDS   GET THIS LOCATION FOR 1ST VARIABLE\n         L     R3,VARIABLE_COUNT    RELOAD THE COUNT\nLOOPINIT XC    0(32,R10),0(R10)     MAKE SURE THE 32 BYTES ARE ZERO\n         MVC   SHVCODE(1),FUNCTION  MOVE IN F FOR FETCH OR S FOR STORE\n         ICM   R15,15,0(R4)         MOVE IN VARIABLE NAME LENGTH\n         STCM  R15,15,SHVNAML       SAVE THE LENGTH\n         LA    R5,4(R4)             GET THE ADDRESS OF VARIABLE NAME\n         ST    R5,SHVNAMA           MOVE IN ADDRESS OF VARIABLE NAME\n         LA    R4,4(R4,R15)         INCREMENT PAST VARIABLE NAME\n         ICM   R15,15,0(R4)         MOVE IN VARIABLE NAME LENGTH\n         STCM  R15,15,SHVVALL       SAVE THE LENGTH OF VARIABLE DATA\n         LA    R5,4(R4)             GET THE ADDRESS OF VARIABLE DATA\n         ST    R5,SHVVALA           MOVE IN ADDRESS OF VARIABLE DATA\n         CLI   SHVCODE,SHVFETCH     SEE IF FETCH\n         BNE   ITSSTORE             NO, THEN DO NOT UPDATE BUFFER\n         STCM  R15,15,SHVBUFL       SAVE THE LENGTH OF VARIABLE DATA\n*  I MOVED ITSSTORE UP ONE LINE\nITSSTORE LA    R4,4(R4,R15)         INCREMENT PAST VARIABLE NAME\n         CH    R3,HW1               IS THIS THE LAST TIME THROUGH\n         BE    FALL_THROUGH         YES, THEN JUST GET OUT\n         LA    R15,32(R10)          INCREMENT TO NEXT SHV\n         ST    R15,SHVNEXT          SAVE THIS LOCATION IN CURRENT\n         LR    R10,R15              AND UPDATE TO NEXT SHV BLOCK\n         BCT   R3,LOOPINIT          LOOP THROUGH UNTIL DONE\nFALL_THROUGH   EQU   *              GET LOCATION POINTER\n         L     R10,SHVBLOCK_ADDRESS         RELOAD REGISTER 10 TO INIT\n         LOAD  EP=IRXEXCOM\n         LR    R15,R0\n         SLR   R0,R0\n         MVC   CALLSTOR(CALLLEN),CALLXCOM\n         CALL  (15),(REXXPGM,PARM2,PARM2,(10)),VL,MF=(E,CALLSTOR)\n         ST    R15,RETURN_CODE\n         LR    R5,R15                SAVE THIS FOR LATER RELOAD\n         CLC   FUNCTION(5),FETCH_KW  SEE IF THIS WAS A FETCH REQUEST\n         BNE   FREESTOR              NO, THEN FINISH UP AND GO HOME\n*******************************************************************\n*  IF THIS WAS A FETCH FUNCTION THEN WE HAVE TO LOOP BACK THRU    *\n* AND UPDATE THE LENGTH FIELDS FOR THE FETCHED VARIABLES. THE     *\n* FIRST TWO BYTES OF THE VARIABLE DATA LENGTH FIELD WILL BE       *\n* USED TO STORE THE LENGTHS RETURNED FROM IRXEXCOM.               *\n*******************************************************************\n         LA    R4,VARIABLE_FIELDS   GET THIS LOCATION FOR 1ST VARIABLE\n         L     R3,VARIABLE_COUNT    RELOAD THE COUNT\n         L     R10,SHVBLOCK_ADDRESS RELOAD REGISTER 10 TO INIT\nLOOP_FETCH     EQU    *\n         ICM   R15,15,0(R4)         MOVE IN VARIABLE NAME LENGTH\n         LA    R4,4(R4,R15)         INCREMENT PAST VARIABLE NAME\n         ICM   R15,15,0(R4)         LOAD THE LENGTH FOR INCREMENT\n         L     R14,SHVVALL          LOAD THE LENGTH OF VARIABLE READ\n         STCM  R14,3,0(R4)          SAVE THE VARIABLE NAME LENGTH\n         LA    R4,4(R4,R15)         INCREMENT PAST VARIABLE NAME\n         LA    R10,32(R10)          INCREMENT TO NEXT SHV\n         BCT   R3,LOOP_FETCH        LOOP THROUGH UNTIL DONE\n**\n*******************************************\n*  LET'S FINISH IT UP AND GO HOME BOYS    *\n*******************************************\nFREESTOR EQU   *\n         L     R0,GETMAIN_LENGTH\n         LR    R1,R13\n         L     R13,4(R13)             SO WE CAN GET OUT OF HERE\n         FREEMAIN RC,A=(1),LV=(0)\nRETURN1  LR    R15,R5\nRETURN2  L     R14,12(R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nREXXPGM  DC    CL8'IRXEXCOM'\nPARM2    DC    F'0'\nHW1      DC    H'1'\nFETCH_KW DC    CL8'FETCH '\nSTORE_KW DC    CL8'STORE '\nCALLXCOM CALL ,(*,*,*,*),VL,MF=L\nCALLLEN  EQU  *-CALLXCOM\n         LTORG\nSTORAGE  DSECT\nSAVEAREA          DS   18F\nSHVBLOCK_ADDRESS  DS   F\nGETMAIN_LENGTH    DS   F\nCALLSTOR          CALL ,(*,*,*,*),VL,MF=L\n**\nSTORAGE_SIZE      EQU  *-SAVEAREA\n*\nPARMLIST DSECT\nFUNCTION        DS    CL8\nVARIABLE_COUNT  DS    F\nRETURN_CODE     DS    F\n*  THIS PORTION WILL ADDRESS ALL VARIABLES WITH THE PROPER VALUES\nVARIABLE_FIELDS DS    F\n         IRXSHVB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GIMREXX": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x013\\x00V\\x01\\x073/\\x01\\x073?\\x14H\\x00\\r\\x00\\x03\\x00\\x00\\xc4\\xc6\\xc7\\xc1\\xc5\\xe3\\xc1@@@'", "ispf": {"version": "01.51", "flags": 0, "createdate": "2007-11-28T00:00:00", "modifydate": "2007-11-29T14:48:56", "lines": 13, "newlines": 3, "modlines": 0, "user": "DFGAETA"}, "text": "/* REXX */\nGIMCSI='WWZ038.SR#2008A.IFA810.GLOBAL.CSI'\nGIMZONE='IFA810T'\nGIMENTRY='SYSMOD'\nGIMSENTRY='*'\nGIMFILTER=\"FMID='HADG810'\"\nZZ=OUTTRAP('GIMOUT.')\nADDRESS TSO \"CALL 'DFGAETA.LOAD(RXGIMAPI)' 'TEST(ERROR,INSPIN,,*)/'\"\nZZ=OUTTRAP()\nDO I=1 TO GIMOUT.0\n  SAY GIMOUT.I\nEND\nEXIT 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXGIMAPI": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01@\\x00\\x08\\x01\\x073/\\x01\\x08\\x01\\x0f\\x114\\x00\\xe6\\x00\\xbd\\x00\\x00\\xc4\\xc6\\xc7\\xc1\\xc5\\xe3\\xc1@@@'", "ispf": {"version": "01.64", "flags": 0, "createdate": "2007-11-28T00:00:00", "modifydate": "2008-01-10T11:34:08", "lines": 230, "newlines": 189, "modlines": 0, "user": "DFGAETA"}, "text": "         TITLE  'SMP REXX INTERFACE'\n***********************************************************************\n*        PROGRAM  : RXGIMAPI                                          *\n*        FUNCTION : A FRONT END TO GIMAPI (API) FROM SMP/E            *\n*        AUTHOR   : GAETA (DFGAETA@BR.IBM.COM)                        *\n***********************************************************************\n         MACRO\n         RXVAR  &FUNC='FETCH'\n         MVC    RXFUNC,=CL8'&FUNC'\n         LA     1,RXPLIST\n         L      15,ALXEXCOM\n         BALR   14,15\n         MEND\n*\nBALAPI   CSECT\n         STM    14,12,12(13)\n         LR     12,15\n@PSTART  EQU    BALAPI\n         USING  @PSTART,12\n         ST     13,SAVE+4\n         LA     14,SAVE\n         ST     14,8(13)\n         LR     13,14\nBALAPI   AMODE 31\n*        RETRIEVE CSI NAME AND SET GIM CONTROL BLOCK\n         XC    QUERY_PARMS,QUERY_PARMS\n         RXVAR FUNC=FETCH\n         LA    3,VDDATA1\n         ST    3,PCSI\n         LH    3,VDLEN1\n         ST    3,CSILEN\n*        RETRIEVE ZONE NAME AND SET GIM CONTROL BLOCK\n         LA    3,VDDATA2\n         ST    3,PZONE\n         LH    3,VDLEN2\n         ST    3,ZONELEN\n*        RETRIEVE ENTRY NAME AND SET GIM CONTROL BLOCK\n         LA    3,VDDATA3\n         ST    3,PENTRY\n         LH    3,VDLEN3\n         ST    3,ENTRYLEN\n*        RETRIEVE SUBENTRY NAME AND SET GIM CONTROL BLOCK\n         LA    3,VDDATA4\n         ST    3,PSUBENTRY\n         LH    3,VDLEN4\n         ST    3,SUBENTRYLEN\n*        RETRIEVE FILTER NAME AND SET GIM CONTROL BLOCK\n         LA    3,VDDATA5\n         ST    3,PFILTER\n         LH    3,VDLEN5\n         ST    3,FILTERLEN\n*\n* NOW LOAD THE API\n*\n         LA    2,APIPGM\n         LOAD EPLOC=(2),LOADPT=PGMADR\n*\n* NOW DO THE QUERY\n*\n         L     15,PGMADR\n         CALL (15),(QUERYCMD,QUERY_PARMS@,CMDOUT,APILANG,RC,CC,MSG@)\n*\n*\n* NOW SEE WHAT WAS RETURNED\n*\n         L     3,RC\n         LTR   3,3\n         BNZ   ERRPRINT\n*\n* ESTABLISH ADDRESSABILITY\n*\n         OPEN (SYSPRINT,OUTPUT)\n         L     3,CMDOUT\n         USING ENTRY_LIST,3\n         L      4,ENTRIES\n         USING CSIENTRY,4\n         L      5,SUBENTRIES\n         USING SUBENTRY,5\n         L      6,SUBENTDATA\n         USING ITEM_LIST,6\n         L      7,DATA\n         USING RETDATA,7\n*\n* PRINT ENTRIES\n*\nPRTENT   LTR    4,4\n         BZ     CLOSEOUT\n         MVI    BUFFER,C' '\n         MVC    BUFFER+1(119),BUFFER\n         MVC    BUFFER(8),ENTRYNAME\n         MVC    BUFFER+10(7),ZONENAME\n         LA     2,ANSICHAR\n         PUT    SYSPRINT,(2)\n         B      PRTSUB\nMOREENT  L      4,CSINEXT\n         B      PRTENT\n*\n* PRINT SUBENTRIES\n*\nPRTSUB   LTR    5,5\n         BZ     MOREENT\n         MVI    BUFFER,C' '\n         MVC    BUFFER+1(119),BUFFER\n         MVC    BUFFER(11),SUBTYPE\n         PUT    SYSPRINT,(2)\n         B      PRTDATA\nMORESUB  L      5,SUBNEXT\n         B      PRTSUB\n*\n* PRINT DATA\n*\nPRTDATA  LTR    7,7\n         BZ     MORESUB\n         L      8,DATALEN\nCHECKLEN C      8,OUTRECLN\n         BNH    SETLEN\n         L      8,OUTRECLN\nSETLEN   LA    15,1\n         SLR    8,15\n         MVI   BUFFER,C' '\n         MVC   BUFFER+1(119),BUFFER\n         EX     8,@MOVDATA\n         LA   2,ANSICHAR\n         PUT  SYSPRINT,(2)\n         L      8,DATALEN\n         C      8,OUTRECLN\n         BNH    MORESUB\n         S      8,OUTRECLN\n         ST     8,DATALEN\n         A      7,OUTRECLN\n         B      CHECKLEN\n*\n* PRINT ERROR MESSAGES\n*\nERRPRINT OPEN   (SYSPRINT,OUTPUT)\n         L      6,MSG@\n         L      7,DATA\n         L      8,DATALEN\nCHKMSGLN C      8,OUTRECLN\n         BNH    SETMSGLN\n         L      8,OUTRECLN\nSETMSGLN LA     15,1\n         SLR    8,15\n         MVI    BUFFER,C' '\n         MVC    BUFFER+1(119),BUFFER\n         EX     8,@MOVDATA\n         LA     2,ANSICHAR\n         PUT    SYSPRINT,(2)\n         L      8,DATALEN\n         C      8,OUTRECLN\n         BNH    CLOSEOUT\n         S      8,OUTRECLN\n         ST     8,DATALEN\n         A      4,OUTRECLN\n         B      CHKMSGLN\n*\nCLOSEOUT CLOSE  SYSPRINT\n*\n* NOW FREE THE STORAGE OBTAINED DURING THE QUERY\n*\nCLEANUP  L     15,PGMADR\n         CALL (15),(FREECMD,0,CMDOUT,APILANG,RC,CC,MSG@)\n*\n* NOW DELETE GIMAPI\n*\n         DELETE EPLOC=APIPGM\n*\n* EXIT\n*\nEXIT     LA     15,0\n         L      13,4(,13)\n         L      14,12(,13)\n         LM     00,12,20(13)\n         BR     14\n*\n*\n@MOVDATA MVC    BUFFER(0),RETDATA\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=121,RECFM=FBA\nANSICHAR DC     CL1' '\nBUFFER   DS     CL120\n*MYCSI    DC     CL26'WWP115.GSD2007B.GLOBAL.CSI'\n*MYZONE   DC     CL7'DB2810T'\n*MYENTRY  DC     CL6'SYSMOD'\n*MYFILTER DC     CL18'SMODTYPE=''USERMOD'''\n*MYSUBNTY DC     CL3'*'\nAPIPGM   DC     CL8'GIMAPI  '\nQUERYCMD DC     CL8'QUERY   '\nFREECMD  DC     CL8'FREE    '\nAPILANG  DC     CL3'ENU'\n         DS     0F\nQUERY_PARMS@ DC AL4(QUERY_PARMS)\nPGMADR   DC     AL4(0)\nCMDOUT   DC     AL4(0)\nMSG@     DC     AL4(0)\nOUTRECLN DC     F'120'\nRC       DS     F'0'\nCC       DS     F'0'\nSAVE     DC     18F'0'\nALXEXCOM               DC    V(ALXEXCOM)\n*\n         DS    0D\nLTSTORE  DC    CL8'STORE   '\nLTFETCH  DC    CL8'FETCH   '\nRXPLIST  DC    A(RXFUNC)\nRXFUNC   DC    CL8' '\nRXVCOUNT DC    F'5'\nRXRC     DC    F'0'\nVNLEN1   DC    AL4(6)\nVNNAME1  DC    CL6'GIMCSI'\nVDLEN1   DC    AL4(80)\nVDDATA1  DC    CL80' '\nVNLEN2   DC    AL4(7)\nVNNAME2  DC    CL7'GIMZONE'\nVDLEN2   DC    AL4(80)\nVDDATA2  DC    CL80' '\nVNLEN3   DC    AL4(8)\nVNNAME3  DC    CL8'GIMENTRY'\nVDLEN3   DC    AL4(80)\nVDDATA3  DC    CL80' '\nVNLEN4   DC    AL4(9)\nVNNAME4  DC    CL9'GIMSENTRY'\nVDLEN4   DC    AL4(80)\nVDDATA4  DC    CL80' '\nVNLEN5   DC    AL4(9)\nVNNAME5  DC    CL9'GIMFILTER'\nVDLEN5   DC    AL4(80)\nVDDATA5  DC    CL80' '\n         GIMMASM\nRETDATA  DSECT  CL0\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT778/FILE778.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT778", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}