{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011348000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 705432, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE156.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 705432, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 705432, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE156.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0c\\n'", "DS1TRBAL": "b\"'\\x94\""}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x16\\x00\\x0b\\x01\\x17\\x00\\x08\\x00\\r'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$SPACE": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/x-empty", "datatype": "binary", "extension": ".x-empty"}, "@BLANK": {"ttr": 517, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                            @BLANK\n&NAME    @BLANK &AREA=                                                    @BLANK\n.*********************************************************************    @BLANK\n&NAME    MVI   &AREA,X'40'                                                @BLANK\n         MVC   &AREA+1(L'&AREA-1),&AREA                                   @BLANK\n.*********************************************************************    @BLANK\n         MEXIT                                                            @BLANK\n         MEND                                                             @BLANK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@CALL": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                             @CALL\n&NAME    @CALL &ROUTINE,&ENTRY=0                                           @CALL\n.*********************************************************************     @CALL\n.*         MACRO IS USED TO CALL SUBROUTINES                         *     @CALL\n.*********************************************************************     @CALL\n&NAME    LA    R1,&ENTRY                                                   @CALL\n         L     R15,@&ROUTINE                                               @CALL\n         BALR  R14,R15                                                     @CALL\n.*********************************************************************     @CALL\n           MEND                                                            @CALL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@DASH": {"ttr": 521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                             @DASH\n&NAME    @DASH &AREA=                                                      @DASH\n.*********************************************************************     @DASH\n&NAME    MVI   &AREA,X'60'                                                 @DASH\n         MVC   &AREA+1(L'&AREA-1),&AREA                                    @DASH\n.*********************************************************************     @DASH\n         MEXIT                                                             @DASH\n         MEND                                                              @DASH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@ERROR": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                            @ERROR\n&NAME    @ERROR &ROUTINE,&RETURN,&ERRFLD,&ERRLOC                          @ERROR\n.*********************************************************************    @ERROR\n.*         MACRO IS USED TO CALL ERROR SUBROUTINE                    *    @ERROR\n.*         MAINLINE ROUTINES ONLY                                    *    @ERROR\n.*********************************************************************    @ERROR\n&NAME    MVC   ERRFLD,=CL4'&ERRFLD'                                       @ERROR\n         MVC   ERRLOC,=CL4'&ERRLOC'                                       @ERROR\n         L     R15,@&ROUTINE                                              @ERROR\n         BALR  R14,R15                                                    @ERROR\n         B     &RETURN                                                    @ERROR\n.*********************************************************************    @ERROR\n           MEND                                                           @ERROR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILL": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                             @FILL\n&NAME    @FILL &AREA=,&CHAR=40                                             @FILL\n.*********************************************************************     @FILL\n&NAME    MVI   &AREA,X'&CHAR'                                              @FILL\n         MVC   &AREA+1(L'&AREA-1),&AREA                                    @FILL\n.*********************************************************************     @FILL\n         MEXIT                                                             @FILL\n         MEND                                                              @FILL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FMTREG": {"ttr": 527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                           @FMTREG\n&NAME    @FMTREG &REG,&FWORD,&DWORD,&TRTAB                               @FMTREG\n*********************************************************************    @FMTREG\n*                                                                   *    @FMTREG\n*       MACRO IS USED TO FORMAT A REGISTER FOR PRINTING             *    @FMTREG\n*                                                                   *    @FMTREG\n*********************************************************************    @FMTREG\n*                                                                   *    @FMTREG\n*       THE AREAS POINTED TO BY &FWORD AND &DWORD                   *    @FMTREG\n*       SHOULD BE DEFINDED AS SHOWN BELOW:                          *    @FMTREG\n*                                                                   *    @FMTREG\n*       *                                                           *    @FMTREG\n*                DS    0F                                           *    @FMTREG\n*       FWORD    DS    XL5                                          *    @FMTREG\n*       *                                                           *    @FMTREG\n*                DS    0D                                           *    @FMTREG\n*       DWORD    DS    XL9                                          *    @FMTREG\n*       *                                                           *    @FMTREG\n*                                                                   *    @FMTREG\n*********************************************************************    @FMTREG\n*                                                                   *    @FMTREG\n*       THE FORMAT OF THE TRANSLATE TABLE NEEDED TO FORMAT          *    @FMTREG\n*       THE REGISTER FOR PRINTING IS SHOWN BELOW                    *    @FMTREG\n*                                                                   *    @FMTREG\n*       *                                                           *    @FMTREG\n*       HEXTAB   DS    0XL256                                       *    @FMTREG\n*       *                  ' 0 1 2 3 4 5 6 7 8 9 A B C D E F'       *    @FMTREG\n*       ROW0TOE  DC    240XL1'40'                                   *    @FMTREG\n*       ROWF     DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'       *    @FMTREG\n*       *                  ' 0 1 2 3 4 5 6 7 8 9 A B C D E F'       *    @FMTREG\n*       *                                                           *    @FMTREG\n*                                                                   *    @FMTREG\n*********************************************************************    @FMTREG\n         LCLC  &FLEN,&DLEN                                               @FMTREG\n&FLEN    SETC  '(5)'                                                     @FMTREG\n&DLEN    SETC  '(9)'                                                     @FMTREG\n&NAME    XC    &FWORD,&FWORD                                             @FMTREG\n         XC    &DWORD,&DWORD                                             @FMTREG\n         ST    &REG,&FWORD                                               @FMTREG\n         UNPK  &DWORD.&DLEN,&FWORD.&FLEN                                 @FMTREG\n&DLEN    SETC  '(8)'                                                     @FMTREG\n         TR    &DWORD.&DLEN,&TRTAB                                       @FMTREG\n         MEND                                                            @FMTREG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@MVC": {"ttr": 529, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                              @MVC\n&NAME    @MVC   &MOUT,&MIN                                                  @MVC\n.*********************************************************************      @MVC\n&NAME    MVI   &MOUT,X'40'                                                  @MVC\n         MVC   &MOUT+1(L'&MOUT-1),&MOUT                                     @MVC\n         MVC   &MOUT+0(L'&MIN),&MIN                                         @MVC\n.*********************************************************************      @MVC\n         MEXIT                                                              @MVC\n         MEND                                                               @MVC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@REGS": {"ttr": 531, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "           MACRO                                                           @REGS\n           @REGS                                                           @REGS\n.*********************************************************************     @REGS\n.*                                                                   *     @REGS\n.*         MACRO IS USED TO DEFINE REGISTER EQUATES                  *     @REGS\n.*         REGISTERS 0 TO 15 ARE DONE                                *     @REGS\n.*                                                                   *     @REGS\n.*********************************************************************     @REGS\n           LCLA      &X                                                    @REGS\n&X         SETA      0                                                     @REGS\n.REGS      ANOP                                                            @REGS\nR&X        EQU       &X                                                    @REGS\n&X         SETA      &X+1                                                  @REGS\n           AIF       (&X LE 15).REGS                                       @REGS\n           MEND                                                            @REGS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@ZERO": {"ttr": 533, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                             @ZERO\n&NAME    @ZERO  &AREA=                                                     @ZERO\n.*********************************************************************     @ZERO\n&NAME    MVI   &AREA,X'00'                                                 @ZERO\n         MVC   &AREA+1(L'&AREA-1),&AREA                                    @ZERO\n.*********************************************************************     @ZERO\n         MEXIT                                                             @ZERO\n         MEND                                                              @ZERO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@ZREGS": {"ttr": 535, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "           MACRO                                                          @ZREGS\n           @ZREGS &REGS                                                   @ZREGS\n.*********************************************************************    @ZREGS\n.*         MACRO IS USED TO CLEAR REGISTERS                          *    @ZREGS\n.*         DEFAULTS ARE 2 THRU 11                                    *    @ZREGS\n.*********************************************************************    @ZREGS\n         LCLA  &NREGS,&A,&B                                               @ZREGS\n&NREGS   SETA  N'&REGS                                                    @ZREGS\n         AIF   (&NREGS LT 1).SETREGS                                      @ZREGS\n         AIF   (&NREGS GT 2).ERR00                                        @ZREGS\n.*                                                                   *    @ZREGS\n&A       SETA  &REGS(1)                                                   @ZREGS\n&B       SETA  &REGS(2)                                                   @ZREGS\n.*                                                                   *    @ZREGS\n         AIF   ('&A' LT '2').ERR01                                        @ZREGS\n         AIF   ('&A' GT '11').ERR02                                       @ZREGS\n         AIF   ('&B' LT '2').ERR03                                        @ZREGS\n         AIF   ('&B' GT '11').ERR04                                       @ZREGS\n.*                                                                   *    @ZREGS\n         AGO   .CLRREGS                                                   @ZREGS\n.*                                                                   *    @ZREGS\n.SETREGS ANOP                                                             @ZREGS\n&A       SETA  2                                                          @ZREGS\n&B       SETA  11                                                         @ZREGS\n.CLRREGS ANOP                                                             @ZREGS\n.REGS    ANOP                                                             @ZREGS\n         SR    &A,&A                                                      @ZREGS\n&A       SETA  &A+1                                                       @ZREGS\n         AIF   (&A LE &B).REGS                                            @ZREGS\n         MEXIT                                                            @ZREGS\n.*                                                                   *    @ZREGS\n.ERR00   MNOTE 8,'EXCESSIVE NUBER OF REGISTERS SPECIFIED'                 @ZREGS\n         MEXIT                                                            @ZREGS\n.ERR01   MNOTE 8,'START REGISTER VALUE LESS THAN 2'                       @ZREGS\n         MEXIT                                                            @ZREGS\n.ERR02   MNOTE 8,'START REGISTER VALUE GREATER THAN 11'                   @ZREGS\n         MEXIT                                                            @ZREGS\n.ERR03   MNOTE 8,'STOP REGISTER VALUE LESS THAN 2'                        @ZREGS\n         MEXIT                                                            @ZREGS\n.ERR04   MNOTE 8,'STOP REGISTER VALUE GREATER THAN 11'                    @ZREGS\n         MEXIT                                                            @ZREGS\n.*                                                                   *    @ZREGS\n          MEND                                                            @ZREGS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASAPART": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x07\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x10R\\x02\\xa6\\x02\\xa6\\x00\\x00\\xc1\\xd9\\xe3\\xc9\\xc3\\xd3\\xc5@@@'", "ispf": {"version": "07.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T10:52:00", "lines": 678, "newlines": 678, "modlines": 0, "user": "ARTICLE"}, "text": " 11 June 1990                                                            article\n                                                                         article\n     Preface                                                             article\n                                                                         article\n       This article addresses the exploitation of a                      article\n       new source of system maintenance information.                     article\n       The program referenced in this article has                        article\n       been submitted for distribution on the NaSPA                      article\n       MVS VIP tape.                                                     article\n                                                                         article\n       When writing the article the author has                           article\n       assumed that the reader is familiar with the                      article\n       IBMLink program offering and has a basic                          article\n       working knowledge of SMP/E (Release 5).                           article\n                                                                         article\n       The article and program were written by Kim                       article\n       Westerling, a Senior System Programmer for                        article\n       the Mutual of Omaha Companies of Omaha,                           article\n       Nebraska. He is a member and Vice-President                       article\n       of the Great Plains Chapter.                                      article\n                                                                         article\n                                                                         article\n     Introduction                                                        article\n                                                                         article\n       System Programmers are constantly looking for                     article\n       ways to improve the availability and                              article\n       reliability of the systems they install and                       article\n       maintain. Over the years, hardware and                            article\n       software vendors have provided various tools                      article\n       to the System Programmer to help in this                          article\n       noble cause.                                                      article\n                                                                         article\n       The most visible of these tools was SMP/E.                        article\n       While SMP/E has provided a significant                            article\n       reduction in the effort required to install                       article\n       and maintain system software, a large portion                     article\n       of the System Programmer's activities still                       article\n       require some outside assistance. This outside                     article\n       assistance usually takes the form of the                          article\n       vendor's technical support area.                                  article\n                                                                         article\n       More and more vendors are providing access to                     article\n       their problem management data bases via                           article\n       dial-up bulletin boards. IBM's contribution                       article\n       in this area is the IBM Information Network                       article\n       and the IBMLink application. These facilities                     article\n       are available through either a dedicated SNA                      article\n       connection or a dial-up line.                                     article\n                                                                         article\n                                                                         article\n     IBMLink and ServiceLink                                             article\n                                                                         article\n       With the availability of the IBMLink                              article\n       application, a number of new tools are                            article\n       available to the System Programmer. These                         article\n       tools make it easier for System Programmers                       article\n       to resolve problems in the MVS and VM                             article\n       operating System and associated IBM products                      article\n       installed at their facilities. The System                         article\n       Programmer now has direct access to                               article\n       facilities that historically required                             article\n       intervention by the IBM Support Center or                         article\n       local branch office. The most interesting                         article\n       component of IBMLink for the System                               article\n       Programmer is ServiceLink. As of January 1,                       article\n       1990, ServiceLink consists of six separate                        article\n       services. These are:                                              article\n                                                                         article\n       SRCHSERV - Service Information Search                             article\n       PSP      - Preventive Service Planning                            article\n       SRD      - Service Request and Delivery                           article\n       ASAP     - Automatic Software Alert Process                       article\n       ETR      - Electronic Technical Response                          article\n       AST      - APAR Status Tracking                                   article\n                                                                         article\n       - SRCHSERV allows the System Programmer to                        article\n         search the APAR, PTF, SECOM, and Technical                      article\n         Question and Answer libraries.                                  article\n                                                                         article\n       - PSP gives the System Programmer access to                       article\n         Preventive Service Planning libraries.                          article\n                                                                         article\n       - SRD allows the System Programmer to order                       article\n         APAR and PTF fixes, via magnetic or                             article\n         electronic medias.                                              article\n                                                                         article\n       - ASAP gives the System Programmer the                            article\n         ability to receive notifications concerning                     article\n         critical maintenance for the MVS, VM, and                       article\n         DPPX/370 products.                                              article\n                                                                         article\n       - ETR gives the System Programmer the ability                     article\n         to electronically report problems and to                        article\n         ask questions of a technical nature.                            article\n                                                                         article\n       - AST allows the System Programmer to track                       article\n         open APARs. The System Programmer is                            article\n         notified whenever a change is made to the                       article\n         APAR's record.                                                  article\n                                                                         article\n       Some of the features of ServiceLink require                       article\n       special authorization from IBM. See your IBM                      article\n       account representative for more information.                      article\n                                                                         article\n       This article will focus on the data provided                      article\n       by the ASAP service. The following                                article\n       description of the ASAP service is excerpted                      article\n       from the SERVICELINK USER'S GUIDE, SH52-0300.                     article\n                                                                         article\n         \"ASAP notifications include information                         article\n         about high-impact and pervasive (HIPER)                         article\n         APARs, PTFs in error, zaps in error, and                        article\n         the corresponding fixes. You list the                           article\n         product(s) that you want to be notified                         article\n         about in your ASAP profile.                                     article\n                                                                         article\n         ASAP lists the products that you have                           article\n         requested to be notified about, and the                         article\n         corresponding APARs and PTFs. This list                         article\n         is called your 'ASAP notification list'.\"                       article\n                                                                         article\n       Each entry in the ASAP notification list                          article\n       contains eight fields. These fields are:                          article\n                                                                         article\n         1. APAR/Fixing PTF - The number of the                          article\n            APAR or fixing PTF.                                          article\n                                                                         article\n         2. Notify Type - The category of the                            article\n            notification.                                                article\n            a. HIPERAPAR                                                 article\n            b. HIPER FIX                                                 article\n            c. PE                                                        article\n            d. PE FIX                                                    article\n            e. PE DELETE                                                 article\n            f. ZE APAR                                                   article\n                                                                         article\n         3. APAR/PE PTF - The number of the APAR                         article\n            or PE PTF.                                                   article\n                                                                         article\n         4. Product Number - For MVS this is the                         article\n            product FMID. For VM and DPPX/370                            article\n            this is the component identifier.                            article\n                                                                         article\n         5. Release - The release number of the                          article\n            component identifier, VM and DPPX/370                        article\n            only.                                                        article\n                                                                         article\n         6. Notify Date - The date that IBM                              article\n            changed the APAR or PTF.                                     article\n                                                                         article\n         7. Order Number - The number IBM assigned                       article\n            to your PTF order (PE FIX and HIPER                          article\n            FIX only).                                                   article\n                                                                         article\n         8. Product Identifier - The name of the                         article\n            product.                                                     article\n                                                                         article\n       In addition to the notifications, the ASAP                        article\n       service allows you to order fixing PTFs,                          article\n       delete entries from the notification list,                        article\n       or request that SMP/E HOLD and RELEASE                            article\n       cards be generated. A complete description                        article\n       of the ASAP service can be found in the                           article\n       SERVICELINK USER'S GUIDE, SH52-0300.                              article\n                                                                         article\n       While there is a large amount of information                      article\n       available in the ASAP data, IBM has not yet                       article\n       provided the System Programmer with any tools                     article\n       to help automate the utilization of this                          article\n       information. Reviewing and cross referencing                      article\n       the ASAP data has been strictly a manual                          article\n       process. The IEBASAP utility program attempts                     article\n       to reduce the manual effort involved in using                     article\n       the ASAP data.                                                    article\n                                                                         article\n                                                                         article\n     What is IEBASAP?                                                    article\n                                                                         article\n       IEBASAP is a utility program designed to                          article\n       process the ASAP data from the IBM                                article\n       ServiceLink application. The program                              article\n       maintains the ASAP notification data in a                         article\n       VSAM KSDS data set. The program will also                         article\n       report on the contents of the data set.                           article\n       IEBASAP has the capability to                                     article\n       cross-reference the ASAP data with the                            article\n       installation's SMP/E data to determine if                         article\n       an installation has in-error maintenance                          article\n       installed, or if any known fixing                                 article\n       maintenance is installed. While the IEBASAP                       article\n       program supports both MVS and VM ASAP data,                       article\n       it can currently only be executed on an MVS                       article\n       system.                                                           article\n                                                                         article\n       IEBASAP has four primary commands; UPDATE,                        article\n       LIST, XREF, and CLEANUP. The UPDATE command                       article\n       is used to create and maintain the ASAP                           article\n       data base. The LIST routine is used to                            article\n       print the contents of the ASAP data base.                         article\n       The XREF command is used to cross reference                       article\n       the ASAP data base against an SMP/E TARGET                        article\n       or DLIB zone. The CLEANUP command is used                         article\n       to delete records from the ASAP data base                         article\n       when the FMID in the ASAP record is no                            article\n       longer in the SMP/E GLOBAL zone. Each of                          article\n       these commands is discussed in greater                            article\n       detail later in the article. Only the                             article\n       UPDATE and LIST commands support VM format                        article\n       data.                                                             article\n                                                                         article\n       The SET command is used to indicate whether                       article\n       the data being processed is MVS or VM and                         article\n       to set the page length for the output                             article\n       reports. The default data type is MVS and                         article\n       the default page length is 60. The SET                            article\n       control card is shown in Figure 1.                                article\n                                                                         article\n                                                                         article\n     Why IEBASAP?                                                        article\n                                                                         article\n       IEBASAP was written to help process an ever                       article\n       increasing number of ASAP notifications. As                       article\n       more FMIDs were placed in the ASAP profile,                       article\n       the number of notifications received also                         article\n       increased. Early on it had been decided to                        article\n       'process' the ASAP notifications on a weekly                      article\n       basis, rather than as they arrived. The                           article\n       reason for this was that on some days there                       article\n       might not be any new ASAP notifications or                        article\n       the ASAP data would be the only reason for                        article\n       logging onto IBMLink.                                             article\n                                                                         article\n       The weekly processing worked well with                            article\n       smaller numbers of notifications, but the                         article\n       larger shipments of notifications were                            article\n       becoming difficult to process. The time to                        article\n       review the notifications on IBMLink, then                         article\n       print a copy to either a local printer or                         article\n       to a userid on a local host, check the                            article\n       notifications against the SMP/E data bases,                       article\n       and so on, was growing. In addition to the                        article\n       time involved in checking the ASAP data,                          article\n       the overhead of maintaining a record of the                       article\n       ASAP data increased as well.                                      article\n                                                                         article\n       Something was needed to help automate the                         article\n       process. IEBASAP started simply as a way to                       article\n       keep track of the ASAP notifications. It read                     article\n       an input file consisting of the notifications                     article\n       and created/updated the data base. The data                       article\n       base was 'printed' using IDCAMS REPRO to copy                     article\n       the data to a sequential data set and then                        article\n       printed using IEBGENER.                                           article\n                                                                         article\n                                                                         article\n     The ASAP Notifications                                              article\n                                                                         article\n       The ASAP notifications can be made available                      article\n       for processing on the user's system in                            article\n       multiple ways. The first is to print the data                     article\n       to a local printer and then enter the data                        article\n       manually. The second, and recommended method,                     article\n       is to 'print' the data to a userid on a local                     article\n       host. The data is sent in TSO                                     article\n       TRANSMIT/RECEIVE format. The TSO RECEIVE                          article\n       command is then used to retrieve the ASAP                         article\n       data. Users that use dial-up access could                         article\n       capture the data on their PC and then upload                      article\n       the data to their host system.                                    article\n                                                                         article\n       The data is loaded with the following DCB                         article\n       attributes; RECFM of FB, LRECL of 89, and a                       article\n       BLKSIZE of 32752. The format of the ASAP                          article\n       notifications is shown in Figure 2. The                           article\n       names shown are those used by the program.                        article\n       A sample of the ASAP notifications is shown                       article\n       in Example 1. This sample will be the basis                       article\n       for all IEBASAP examples.                                         article\n                                                                         article\n       It is recommended that the ASAP                                   article\n       notifications be pre-sorted using the                             article\n       control card shown in Figure 3. This will                         article\n       insure that the notifications are processed                       article\n       consistently each time the program is                             article\n       executed.                                                         article\n                                                                         article\n                                                                         article\n     The IEBASAP Data Base                                               article\n                                                                         article\n       The ASAP data base is a VSAM KSDS data set.                       article\n       The IDCAMS control cards for the allocation                       article\n       of the data set are listed in Figure 4. The                       article\n       data set must be primed with a blank record                       article\n       or IEBASAP will terminate with an error when                      article\n       accessing the VSAM data set. The ASAP data                        article\n       base is defined with a SHAREOPTIONS of 2,                         article\n       allowing for an unrestricted number of read                       article\n       users and only one write user.                                    article\n                                                                         article\n       The data base records are 72 bytes in length                      article\n       and have a 16-byte key. The key for the ASAP                      article\n       data base record consists of the APAR and the                     article\n       FMID from the ASAP notification. The FMID in                      article\n       the ASAP notification is nine bytes long.                         article\n       This is because the VM notifications use a                        article\n       9-byte component identifier versus the 7-byte                     article\n       MVS FMID. The format of the ASAP data base                        article\n       records is shown in Figure 5. The names shown                     article\n       are those used by the program.                                    article\n                                                                         article\n                                                                         article\n     IEBASAP Data Sets                                                   article\n                                                                         article\n       The program uses several different data                           article\n       sets during execution. The program creates                        article\n       two output report data sets, ASAPOUT and                          article\n       ASAPRPT. Both have an LRECL of 121 and a                          article\n       RECFM of FBA. Sample output can be seen in                        article\n       Examples 2 through 6.                                             article\n                                                                         article\n       The ASAPOUT data set contains the control                         article\n       cards used in the execution of the program,                       article\n       messages from the program relating to the                         article\n       control cards and any input records that                          article\n       were not processed by the program.                                article\n                                                                         article\n       The ASAPRPT data set contains information                         article\n       detailing the actions performed against the                       article\n       ASAP data base.                                                   article\n                                                                         article\n       The ASAPDB DD statement is used to identify                       article\n       the ASAP data base.                                               article\n                                                                         article\n       The ASAPUPD DD statement is used to                               article\n       identify the ASAP notification data set.                          article\n       The ASAPUPD DD statement is required only                         article\n       when executing the UPDATE command.                                article\n                                                                         article\n       The SMPCSI DD statement identifies an SMP/E                       article\n       GLOBAL zone. The SMPCSI DD statement is                           article\n       required only when executing the XREF and                         article\n       CLEANUP commands.                                                 article\n                                                                         article\n       No DD statements are needed for the TARGET                        article\n       or DLIB zones. The IEBASAP program will                           article\n       dynamically allocate these data sets as                           article\n       needed. The data set names are determined                         article\n       by examining the ZONE INDEX records in the                        article\n       GLOBAL zone. IEBASAP does issue ENQUEUEs                          article\n       for the SMP/E data sets using the same                            article\n       QNAME and RNAMEs as SMP/E to insure data                          article\n       set integrity.                                                    article\n                                                                         article\n       The SYSIN DD statement is used to provide                         article\n       the program control cards. The control                            article\n       cards are 80-byte images. The command name                        article\n       must begin between columns 1 and 16.                              article\n                                                                         article\n       The ASAPOUT, ASAPRPT, ASAPDB, and SYSIN DD                        article\n       statements are required for all executions                        article\n       of the program.                                                   article\n                                                                         article\n       Sample JCL is shown in Figure 6.                                  article\n                                                                         article\n                                                                         article\n     UPDATE Command                                                      article\n                                                                         article\n       The UPDATE command creates and maintains                          article\n       the data base of ASAP notifications. The                          article\n       UPDATE command has only one option, CHECK.                        article\n       The CHECK option allows the user to                               article\n       simulate the update of the data base. The                         article\n       control card is shown in Figure 1.                                article\n                                                                         article\n       The UPDATE command reads records from the                         article\n       ASAPUPD data set and then does a read                             article\n       against the ASAP data base to determine if                        article\n       a corresponding record exists. If the                             article\n       record exists, the new or changed                                 article\n       information is merged with the existing                           article\n       record. If the record does not exist, it is                       article\n       added to the data base.                                           article\n                                                                         article\n       For each new or updated data base record a                        article\n       record is written to the ASAPRPT data set.                        article\n       Samples of the reports produced by the                            article\n       UPDATE command are in Example 3.                                  article\n                                                                         article\n       Currently only HIPERAPAR, HIPER FIX, PE,                          article\n       and PE FIX records are processed by                               article\n       IEBASAP. See the 'Future of IEBASAP'                              article\n       section later in this article for comments                        article\n       on other record types.                                            article\n                                                                         article\n                                                                         article\n     LIST Command                                                        article\n                                                                         article\n       The LIST command prints the contents of the                       article\n       ASAP data base. The LIST command has two                          article\n       options, FMID(xyynnnn) and FMIDGRP(yy). The                       article\n       FMID option allows the user to list only                          article\n       the entries in the data base for the                              article\n       specified FMID. The FMIDGRP option allows                         article\n       the user to list the entries for the                              article\n       specified group of FMIDs.                                         article\n                                                                         article\n       I.E. FMID(HVT3102) will list records for                          article\n       that ACF/VTAM FMID and FMIDGRP(VT) will list                      article\n       records for all FMIDs relating to ACF/VTAM.                       article\n       The FMID and FMIDGRP options are used                             article\n       primarily with MVS format data. The control                       article\n       card is shown in Figure 1.                                        article\n                                                                         article\n       The LIST command reads the ASAP data base                         article\n       sequentially and a record is written to the                       article\n       ASAPRPT data set for each record in the data                      article\n       base. Samples of the reports produced by the                      article\n       LIST command are in Example 4.                                    article\n                                                                         article\n                                                                         article\n     XREF Command                                                        article\n                                                                         article\n       The XREF command cross references the ASAP                        article\n       data base records against an SMP/E TARGET                         article\n       or DLIB zone. There is one required                               article\n       parameter for the XREF command, the TARGET                        article\n       or DLIB zone that IEBASAP is to use. The                          article\n       XREF command has two options, CLEANUP and                         article\n       CHECK. The CLEANUP option will delete from                        article\n       the ASAP data base any records that contain                       article\n       a fixing PTF that is installed in the                             article\n       specified zone. The CHECK option allows the                       article\n       user to simulate the deletion of records                          article\n       from the ASAP data base. The CHECK option                         article\n       is valid only with the CLEANUP option. If                         article\n       specified without the CLEANUP option, it is                       article\n       ignored. The control card is shown in                             article\n       Figure 1.                                                         article\n                                                                         article\n       The XREF command reads the ASAP data base                         article\n       sequentially and the FMID from each ASAP                          article\n       record is checked against the GLOBAL zone's                       article\n       FMID list. If the FMID is not in the FMID                         article\n       list, the next ASAP record is retrieved. If                       article\n       the FMID is in the FMID list, the ASAP                            article\n       record is checked for a PE PTF. If there is                       article\n       a PE PTF, the specified zone is checked for                       article\n       the PE PTF. The ASAP record is then checked                       article\n       for a fixing PTF. When there is a fixing                          article\n       PTF, the specified zone is checked for the                        article\n       fixing PTF. If the fixing PTF is not in the                       article\n       specified zone, the GLOBAL zone is checked                        article\n       to see if the fixing PTF has been received.                       article\n       If the CLEANUP option was specified and the                       article\n       fixing PTF is installed in the specified                          article\n       zone, the corresponding ASAP data base                            article\n       record is deleted.                                                article\n                                                                         article\n       Records are written to the ASAPRPT data set                       article\n       detailing the results of the processing                           article\n       described above. Samples of the reports                           article\n       produced by the XREF command are in                               article\n       Example 5.                                                        article\n                                                                         article\n                                                                         article\n     CLEANUP Command                                                     article\n                                                                         article\n       The CLEANUP command deletes records from                          article\n       the ASAP data base when the FMID in the                           article\n       ASAP record is no longer in the GLOBAL                            article\n       zone's FMID list. The CLEANUP command has                         article\n       one option, CHECK. The CHECK option allows                        article\n       the user to simulate the deletion of                              article\n       records from the data base. The control                           article\n       card is shown in Figure 1.                                        article\n                                                                         article\n       The CLEANUP command reads the ASAP data                           article\n       base sequentially and the FMID from each                          article\n       ASAP record is checked against the GLOBAL                         article\n       zone's FMID list. If the FMID is in the                           article\n       FMID list, the next ASAP record is                                article\n       retrieved. If not, the corresponding ASAP                         article\n       data base record is deleted.                                      article\n                                                                         article\n       A record is written to ASAPRPT data set for                       article\n       each record deleted. Samples of the reports                       article\n       produced by the CLEANUP command are in                            article\n       Example 6.                                                        article\n                                                                         article\n                                                                         article\n     SHARE Requirements                                                  article\n                                                                         article\n       SHARE requirement SOMVSE90011, 'IBMLink ASAP                      article\n       Needs Automated Process to Interact with                          article\n       SMP/E', identifies five requirements to IBM                       article\n       regarding the processing of the ASAP data.                        article\n       IEBASAP was started in the fall of 1989 with                      article\n       no knowledge of the SHARE requirements until                      article\n       the ballot arrived in February of 1990.                           article\n                                                                         article\n       The current and future versions of IEBASAP                        article\n       address these requirements to some degree.                        article\n       Unfortunately, IBM has not yet announced                          article\n       the added capabilities needed to fulfill                          article\n       all of the requirements. The most                                 article\n       significant of the required capabilities                          article\n       are:                                                              article\n                                                                         article\n         1. The ability to receive ASAP data                             article\n         directly at the customer's host without                         article\n         having to logon to IBMLink.                                     article\n                                                                         article\n         2. The ability to interact with the other                       article\n         ServiceLink facilities from the                                 article\n         customer's host processor.                                      article\n                                                                         article\n       IEBASAP is a first step in allowing the                           article\n       System Programmer to manage his/her ASAP                          article\n       data in an automated manner and to continue                       article\n       to take a pro-active approach to installing                       article\n       maintenance to the MVS and VM operating                           article\n       systems.                                                          article\n                                                                         article\n                                                                         article\n     Future of IEBASAP                                                   article\n                                                                         article\n       The IEBASAP program is not yet fully                              article\n       developed. Future enhancements will include                       article\n       a DELETE command, expanded reporting                              article\n       capabilities, and support for ZE APAR and                         article\n       PE DELETE records. The ZE APAR and PE                             article\n       DELETE records are presently written to the                       article\n       ASAPOUT data set when they are encountered                        article\n       in the ASAPUPD data set. IEBASAP currently                        article\n       identifies an APAR that is written against                        article\n       more than one PTF by putting the literal                          article\n       *MULTI* in the PE PTF field of the ASAP                           article\n       record.                                                           article\n                                                                         article\n                                                                         article\n     Availability of IEBASAP                                             article\n                                                                         article\n       The IEBASAP program, as described in this                         article\n       article, has been submitted for distribution                      article\n       on the NaSPA MVS VIP tape. Comments and                           article\n       questions concerning the program and its                          article\n       use can be sent to the address in the                             article\n       source.                                                           article\n                                                                         article\n       As with any program on the VIP tape the                           article\n       user must evaluate the program to determine                       article\n       if the program will introduce any exposure                        article\n       in their systems. The IEBASAP program does                        article\n       read the SMP/E data sets directly. As a                           article\n       result the user must take appropriate                             article\n       action to insure that no SMP/E functions                          article\n       are executing at the same time as IEBASAP.                        article\n                                                                         article\n                                                                         article\n     Figure 1 - IEBASAP Control Cards                                    article\n                                                                         article\n     ---------------------------------------------                       article\n     |                                           |                       article\n     |  SET PAGELEN(nn) DATATYPE(xxx)            |                       article\n     |                                           |                       article\n     |  UPDATE < CHECK >                         |                       article\n     |                                           |                       article\n     |  LIST < FMID(xyynnnn) >                   |                       article\n     |       < FMIDGRP(yy) >                     |                       article\n     |                                           |                       article\n     |  XREF ZONE(xxxxxxx) < CLEANUP CHECK >     |                       article\n     |                                           |                       article\n     |  CLEANUP < CHECK >                        |                       article\n     |                                           |                       article\n     ---------------------------------------------                       article\n                                                                         article\n                                                                         article\n     Figure 2 - ASAP Notification Record Format                          article\n                                                                         article\n     ---------------------------------------------                       article\n     |                                           |                       article\n     | UPDREC1  0CL89    ASAP NOTIFICATION       |                       article\n     | UPDFLDA  CL7      APAR/FIXING PTF         |                       article\n     |          CL2      *                       |                       article\n     | UPDTYPE  CL9      TYPE                    |                       article\n     |          CL2      *                       |                       article\n     | UPDFLDB  CL7      PE PTF/APAR             |                       article\n     |          CL2      *                       |                       article\n     | UPDFMID  CL9      FMID                    |                       article\n     |          CL2      *                       |                       article\n     | UPDREL   CL3      PRODUCT RELEASE (VM)    |                       article\n     |          CL2      *                       |                       article\n     | UPDDATE  CL8      DATE                    |                       article\n     |          CL2      *                       |                       article\n     | UPDONUM  CL9      ORDER NUMBER            |                       article\n     |          CL2      *                       |                       article\n     | UPDPID   CL23     PRODUCT ID              |                       article\n     |                                           |                       article\n     ---------------------------------------------                       article\n                                                                         article\n                                                                         article\n     Figure 3 - ASAP Notification Sort Control                           article\n                                                                         article\n     ---------------------------------------------                       article\n     |                                           |                       article\n     | SORT FIELDS=(52,2,CH,A,     Year          |                       article\n     |              46,2,CH,A,     Month         |                       article\n     |              49,2,CH,A,     Day           |                       article\n     |               1,7,CH,A,     Field A       |                       article\n     |              30,7,CH,A,     FMID          |                       article\n     |              21,7,CH,A)     Field B       |                       article\n     |                                           |                       article\n     ---------------------------------------------                       article\n                                                                         article\n                                                                         article\n     Figure 4 - ASAP Data Base Allocation                                article\n                                                                         article\n     ---------------------------------------------                       article\n     |                                           |                       article\n     | DEFINE CLUSTER(NAME(asap.data.base)   -   |                       article\n     |          FREESPACE(25,5) KEYS(16 0) -     |                       article\n     |          RECORDSIZE(72 72) -              |                       article\n     |          SHAREOPTIONS(2) -                |                       article\n     |          VOLUMES(volser) ) -              |                       article\n     |        DATA(NAME(asap.data.base.DATA) -   |                       article\n     |          CONTROLINTERVALSIZE(4096) -      |                       article\n     |          TRACKS(p s) ) -                  |                       article\n     |        INDEX(NAME(asap.data.base.INDEX) - |                       article\n     |          TRACKS(p s) IMBED )              |                       article\n     | REPRO OUTDATASET(asap.data.base) -        |                       article\n     |          IFILE(primer)                    |                       article\n     |                                           |                       article\n     ---------------------------------------------                       article\n                                                                         article\n                                                                         article\n     Figure 5 - ASAP Data Base Record Format                             article\n                                                                         article\n     ---------------------------------------------                       article\n     |                                           |                       article\n     | ASAPREC  0CL72    ASAP DATA BASE RECORD   |                       article\n     | ASAPKEY  0CL16                            |                       article\n     | ASAPAPAR CL7      APAR                    |                       article\n     | ASAPFMID CL9      FMID                    |                       article\n     |          CL1      *                       |                       article\n     | ASAPPTF  CL7      FIXING PTF              |                       article\n     |          CL1      *                       |                       article\n     | ASAPPE   CL7      PTF IN ERROR            |                       article\n     |          CL1      *                       |                       article\n     | ASAPSTAT CL1      STATUS (H=HIPER)        |                       article\n     |          CL1      *                       |                       article\n     | ASAPREL  CL3      PRODUCT RELEASE (VM)    |                       article\n     |          CL1      *              *        |                       article\n     | ASAPPID  CL23     PRODUCT ID              |                       article\n     |          CL1      *              *        |                       article\n     | ASAPDATE CL8      DATE                    |                       article\n     |          CL1      *              *        |                       article\n     |                                           |                       article\n     ---------------------------------------------                       article\n                                                                         article\n                                                                         article\n     Figure 6 - Sample JCL                                               article\n                                                                         article\n     ---------------------------------------------                       article\n     |                                           |                       article\n     |  //STEPONE  EXEC  PGM=IEBASAP             |                       article\n     |  //ASAPOUT  DD  SYSOUT=*                  |                       article\n     |  //ASAPRPT  DD  SYSOUT=*                  |                       article\n     |  //ASAPDB   DD  DSN=asap.data.base,       |                       article\n     |  //         DISP=SHR                      |                       article\n     |  //SMPCSI   DD  DSN=your.global.csi,      |                       article\n     |  //         DISP=SHR                      |                       article\n     |  //ASAPUPD  DD  DSN=asap.notify,DISP=SHR  |                       article\n     |  //SYSIN    DD  *                         |                       article\n     |  control cards go here                    |                       article\n     |  /*                                       |                       article\n     |                                           |                       article\n     ---------------------------------------------                       article\n                                                                         article\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASAPCNVT": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13\\x7f\\x00\\x91\\x13\\x7f\\x15X\\x00Q\\x00Q\\x00\\x00\\xe5\\xc5\\xd9\\xf1\\xf1\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-17T00:00:00", "modifydate": "1991-05-17T15:58:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "VER1104"}, "text": "*--------------------------------------*                                ASAPCNVT\n* THIS PROGRAM WAS WRITTEN TO CONVERT  *                                ASAPCNVT\n* PRE-1990 FORMAT ASAP RECORDS TO THE  *                                ASAPCNVT\n* 1990 AND LATER FORMAT.               *                                ASAPCNVT\n*                                      *                                ASAPCNVT\n* JCL IS IN MBR JCLCNVT                *                                ASAPCNVT\n*--------------------------------------*                                ASAPCNVT\n         PRINT NOGEN                                                    ASAPCNVT\nASAPCNVT CSECT                                                          ASAPCNVT\n         @REGS                                                          ASAPCNVT\n         @ZREGS                                                         ASAPCNVT\n*--------------------------------------*                                ASAPCNVT\nBEGIN    STM   14,12,12(13)                                             ASAPCNVT\n         BALR  12,0                                                     ASAPCNVT\n         USING *,12                                                     ASAPCNVT\n         ST    13,SAVEAREA+4                                            ASAPCNVT\n         LA    13,SAVEAREA                                              ASAPCNVT\n*--------------------------------------*                                ASAPCNVT\n         @BLANK AREA=OLDREC1                                            ASAPCNVT\n         @BLANK AREA=NEWREC1                                            ASAPCNVT\n*--------------------------------------*                                ASAPCNVT\nOPENIN   OPEN  (OLDASAP,INPUT)                                          ASAPCNVT\nOPENOUT  OPEN  (NEWASAP,OUTPUT)                                         ASAPCNVT\n*--------------------------------------*                                ASAPCNVT\nGETASAP  GET   OLDASAP,OLDREC1                                          ASAPCNVT\n         MVC   NEWFLDA,OLDFLDA                                          ASAPCNVT\n         MVC   NEWTYPE,OLDTYPE                                          ASAPCNVT\n         MVC   NEWFLDB,OLDFLDB                                          ASAPCNVT\n         MVC   NEWFMID,OLDFMID                                          ASAPCNVT\n         MVC   NEWPID,OLDPID                                            ASAPCNVT\n         MVC   NEWDATE,OLDDATE                                          ASAPCNVT\n         PUT   NEWASAP,NEWREC1                                          ASAPCNVT\n         B     GETASAP                                                  ASAPCNVT\n*--------------------------------------*                                ASAPCNVT\nCLOSEUP  CLOSE (OLDASAP)               *                                ASAPCNVT\n         CLOSE (NEWASAP)               *                                ASAPCNVT\n*--------------------------------------*                                ASAPCNVT\nRETURN   L     13,SAVEAREA+4           *                                ASAPCNVT\n         LM    14,12,12(13)            *                                ASAPCNVT\n         SR    15,15                   *                                ASAPCNVT\n         BR    14                      *                                ASAPCNVT\n*--------------------------------------*                                ASAPCNVT\n         DS    0D                                                       ASAPCNVT\nSAVEAREA DS    18F                                                      ASAPCNVT\nOLDREC1  DS    0CL85                   ASAP OLDATE RECORD               ASAPCNVT\nOLDFLDA  DS    CL7                     APAR/PTF                         ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nOLDTYPE  DS    CL9                     TYPE                             ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nOLDFLDB  DS    CL7                     PTF/APAR                         ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nOLDFMID  DS    CL7                     FMID                             ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nOLDPID   DS    CL21                    PRODUCT ID                       ASAPCNVT\n         DS    CL3                     *                                ASAPCNVT\nOLDDATE  DS    CL8                     DATE                             ASAPCNVT\n         DS    CL15                    *                                ASAPCNVT\nOLDREC1L EQU   *-OLDREC1                                                ASAPCNVT\n*                                                                       ASAPCNVT\nNEWREC1  DS    0CL89                   ASAP NEWATE RECORD               ASAPCNVT\nNEWFLDA  DS    CL7                     APAR/PTF                         ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nNEWTYPE  DS    CL9                     TYPE                             ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nNEWFLDB  DS    CL7                     PTF/APAR                         ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nNEWFMID  DS    CL9                     FMID                             ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nNEWREL   DS    CL3                     PRODUCT RELEASE                  ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nNEWDATE  DS    CL8                     DATE                             ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nNEWONUM  DS    CL9                     ORDER NUMBER                     ASAPCNVT\n         DS    CL2                     *                                ASAPCNVT\nNEWPID   DS    CL23                    PRODUCT ID                       ASAPCNVT\nNEWREC1L EQU   *-NEWREC1                                                ASAPCNVT\n*                                                                       ASAPCNVT\nOLDASAP  DCB   DDNAME=OLDASAP,DSORG=PS,MACRF=GM,EODAD=CLOSEUP           ASAPCNVT\nNEWASAP  DCB   DDNAME=NEWASAP,DSORG=PS,MACRF=PM                         ASAPCNVT\n*                                                                       ASAPCNVT\n         END   ASAPCNVT                                                 ASAPCNVT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASAPCNV2": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13\\x7f\\x00\\x91\\x13\\x7f\\x15X\\x00R\\x00R\\x00\\x00\\xe5\\xc5\\xd9\\xf1\\xf1\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-17T00:00:00", "modifydate": "1991-05-17T15:58:00", "lines": 82, "newlines": 82, "modlines": 0, "user": "VER1104"}, "text": "*--------------------------------------*                                ASAPCNV2\n* THIS PROGRAM WAS WRITTEN TO CONVERT  *                                ASAPCNV2\n* PRE-VERSION 8 ASAP DATA BASE RECORDS *                                ASAPCNV2\n* TO VERSION 8 AND LATER FORMAT.       *                                ASAPCNV2\n*--------------------------------------*                                ASAPCNV2\n         PRINT NOGEN                                                    ASAPCNV2\nASAPCNV2 CSECT                                                          ASAPCNV2\n         @REGS                                                          ASAPCNV2\n*--------------------------------------*                                ASAPCNV2\nBEGIN    STM   14,12,12(13)                                             ASAPCNV2\n         BALR  12,0                                                     ASAPCNV2\n         USING *,12                                                     ASAPCNV2\n         ST    13,SAVEAREA+4                                            ASAPCNV2\n         LA    13,SAVEAREA                                              ASAPCNV2\n*--------------------------------------*                                ASAPCNV2\n         @BLANK AREA=OLDREC                                             ASAPCNV2\n         @BLANK AREA=NEWREC                                             ASAPCNV2\n*--------------------------------------*                                ASAPCNV2\nOPENIN   OPEN  (OLDASAP,INPUT)                                          ASAPCNV2\nOPENOUT  OPEN  (NEWASAP,OUTPUT)                                         ASAPCNV2\n*--------------------------------------*                                ASAPCNV2\nGETASAP  GET   OLDASAP,OLDREC                                           ASAPCNV2\n         MVC   NEWAPAR,OLDAPAR                                          ASAPCNV2\n         MVC   NEWFMID,OLDFMID                                          ASAPCNV2\n         MVC   NEWPTF,OLDPTF                                            ASAPCNV2\n         MVC   NEWPE,OLDPE                                              ASAPCNV2\n         MVC   NEWREL,OLDREL                                            ASAPCNV2\n         MVC   NEWPID,OLDPID                                            ASAPCNV2\n         MVC   NEWDATE,OLDDATE                                          ASAPCNV2\n         MVC   NEWHIP,OLDSTAT                                           ASAPCNV2\n         PUT   NEWASAP,NEWREC                                           ASAPCNV2\n         B     GETASAP                                                  ASAPCNV2\n*--------------------------------------*                                ASAPCNV2\nCLOSEUP  CLOSE (OLDASAP)               *                                ASAPCNV2\n         CLOSE (NEWASAP)               *                                ASAPCNV2\n*--------------------------------------*                                ASAPCNV2\nRETURN   L     13,SAVEAREA+4           *                                ASAPCNV2\n         LM    14,12,12(13)            *                                ASAPCNV2\n         SR    15,15                   *                                ASAPCNV2\n         BR    14                      *                                ASAPCNV2\n*--------------------------------------*                                ASAPCNV2\n         DS    0D                                                       ASAPCNV2\nSAVEAREA DS    18F                                                      ASAPCNV2\n*                                                                       ASAPCNV2\nOLDREC   DS    0CL72                   ASAP OLDATE RECORD               ASAPCNV2\nOLDKEY   DS    0CL16                   *                                ASAPCNV2\nOLDAPAR  DS    CL7                     APAR                             ASAPCNV2\nOLDFMID  DS    CL9                     TYPE                             ASAPCNV2\n         DS    CL1                     *                                ASAPCNV2\nOLDPTF   DS    CL7                     FIXING PTF                       ASAPCNV2\n         DS    CL1                     *                                ASAPCNV2\nOLDPE    DS    CL7                     FMID                             ASAPCNV2\n         DS    CL1                     *                                ASAPCNV2\nOLDSTAT  DS    CL1                     STATUS                           ASAPCNV2\n         DS    CL1                     *                                ASAPCNV2\nOLDREL   DS    CL3                     PRODUCT RELEASE                  ASAPCNV2\n         DS    CL1                     *                                ASAPCNV2\nOLDPID   DS    CL23                    TITLE                            ASAPCNV2\n         DS    CL1                     *                                ASAPCNV2\nOLDDATE  DS    CL8                     DATE                             ASAPCNV2\n         DS    CL15                    *                                ASAPCNV2\nOLDRECL EQU    *-OLDREC                                                 ASAPCNV2\n*                                                                       ASAPCNV2\nNEWREC   DS    0CL72                   ASAP NEWATE RECORD               ASAPCNV2\nNEWKEY   DS    0CL16                   *                                ASAPCNV2\nNEWAPAR  DS    CL7                     APAR                             ASAPCNV2\nNEWFMID  DS    CL9                     TYPE                             ASAPCNV2\nNEWPTF   DS    CL7                     FIXING PTF                       ASAPCNV2\nNEWPE    DS    CL7                     FMID                             ASAPCNV2\nNEWHIP   DS    CL1                     STATUS                           ASAPCNV2\nNEWZE    DS    CL1                     STATUS                           ASAPCNV2\nNEWNUMP  DS    CL2                     STATUS                           ASAPCNV2\nNEWREL   DS    CL3                     PRODUCT RELEASE                  ASAPCNV2\nNEWPID   DS    CL23                    TITLE                            ASAPCNV2\nNEWDATE  DS    CL8                     DATE                             ASAPCNV2\n         DS    CL4                     *                                ASAPCNV2\nNEWRECL EQU    *-NEWREC                                                 ASAPCNV2\n*                                                                       ASAPCNV2\nOLDASAP  DCB   DDNAME=OLDASAP,DSORG=PS,MACRF=GM,EODAD=CLOSEUP           ASAPCNV2\nNEWASAP  DCB   DDNAME=NEWASAP,DSORG=PS,MACRF=PM                         ASAPCNV2\n*                                                                       ASAPCNV2\n         END   ASAPCNV2                                                 ASAPCNV2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASAPDOC": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'IEBASAP - DOCUMENTATION'\n*--------------------------------------------------------------------*\n*-- **********      READ THIS BEFORE USING PROGRAM      ********** --*\n*--                                                                --*\n*--   NEITHER THE AUTHOR OR HIS EMPLOYER, PRESENT OR FUTURE,       --*\n*--   OFFER ANY FORMAL STATEMENT OF SUPPORT FOR THIS PROGRAM.      --*\n*--   THE PROGRAM IS MADE AVAILABLE FOR USE IN THE PUBLIC          --*\n*--   DOMAIN ON AN AS IS BASIS. NO LIABILITY IS ACCEPTED FOR       --*\n*--   DAMAGE CAUSED BY THE USE OR MISUSE OF THIS PROGRAM. THE      --*\n*--   USER OF THIS PROGRAM ACCEPTS ALL RESPONSIBILITY FOR THE      --*\n*--   USE OF AND CONSEQUENCES INCURED AS THE RESULT OF THE USE     --*\n*--   OF THIS PROGRAM.                                             --*\n*--                                                                --*\n*-- **********      READ THIS BEFORE USING PROGRAM      ********** --*\n*--------------------------------------------------------------------*\n*--                                                                --*\n*--  SEND ALL CORRESPONDENCE RELATING TO THE PROGRAM TO:           --*\n*--                                                                --*\n*--      KIM WESTERLING                                            --*\n*--      COMPUTER SYSTEMS SOFTWARE - 2 CSS                         --*\n*--      MUTUAL OF OMAHA PLAZA                                     --*\n*--      OMAHA, NE  68175                                          --*\n*--                                                                --*\n*--      WORK PHONE: 402-342-7600  EXT. 3362                       --*\n*--                                                                --*\n*--  INQUIRIES AND REQUESTS FOR INFORMATION WILL BE HANDLED AS     --*\n*--  TIME PERMITS. NO OBLIGATION TO RESPOND IS IMPLIED OR ASSUMED  --*\n*--  BY THE PROGRAM AUTHOR.                                        --*\n*--                                                                --*\n*--------------------------------------------------------------------*\n*--                                                                --*\n*--  CHANGE LOG   # - IDENTIFIES CURRENT ACTIVITY                  --*\n*--               * - IDENTIFIES PLANNED FUTURE UPDATES            --*\n*--                                                                --*\n*--  ALL LEVELS OF THE PROGRAM WILL INCORPORATE NUMEROUS SMALL     --*\n*--  CHANGES. MINOR ENHANCEMENTS AND NEW MESSAGES ARE SOME OF THE  --*\n*--  ITEMS THAT MAY BE INCLUDED AND NOT LISTED IN THIS CHANGE LOG. --*\n*--  FIXES TO ERRORS IN THE CODE WILL NOT BE LISTED UNLESS THEY    --*\n*--  ARE TO FIX SEVERE DESIGN AND LOGIC PROBLEMS IN THE PROGRAM.   --*\n*--                                                                --*\n*--------------------------------------------------------------------*\n*--  VERSION     DESCRIPTION                                       --*\n*--------------------------------------------------------------------*\n*--                                                                --*\n*--   01.01      CREATED THE UPDATE ROUTINE.                       --*\n*--   01.02      ADDED THE CHECK FEATURE.                          --*\n*--                                                                --*\n*--   02.01      CREATED THE LIST ROUTINE.                         --*\n*--   02.02      ADDED LIST FMID(XXXXXXX) FEATURE.                 --*\n*--   02.03      ADDED LIST FMIDGRP(XX) FEATURE.                   --*\n*--                                                                --*\n*--   03.01      CREATED THE SET ROUTINE.                          --*\n*--                                                                --*\n*--   04.01      CREATED THE CLEANUP ROUTINE.                      --*\n*--   04.02      ADDED CHECK FEATURE.                              --*\n*--                                                                --*\n*--   05.01      CREATED THE XREF ROUTINE.                         --*\n*--   05.02      ADDED CLEANUP FEATURE.                            --*\n*--   05.03      ADDED CHECK TO CLEANUP FEATURE.                   --*\n*--                                                                --*\n*--   06.01      ENHANCED THE PAGE HEADERS.                        --*\n*--              HEADERS NOW 5 LINES, PAGE NUMBERS GENERATED,      --*\n*--              PROGRAM LEVEL AND DATE/TIME ADDED.                --*\n*--   06.02      MISC CLEANUP. ADDED CODE TO RESET THE GLOBAL AND  --*\n*--              REQUESTED ZONE RPLS TO THEIR DEFAULTS VALUES.     --*\n*--   06.03      CREATED ERROR ROUTINE.                            --*\n*--                                                                --*\n*--   07.01      ADDED CURRENT PROCESSING INFO TO PAGE HEADERS     --*\n*--              SMP CSI DSN'S AND VOLSER'S ADDED TO HEADERS.      --*\n*--              HEADERS ARE NOW 7 LINES.                          --*\n*--   07.02      RECORD COUNTS ADDED TO THE OUTPUT REPORTS.        --*\n*--              UPDATE RTN - RECORDS ADDED AND RECORDS UPDATED.   --*\n*--              XREF RTN - PE'S INSTALLED AND RECORD DELETED.     --*\n*--              CLEANUP RTN - RECORDS DELETED.                    --*\n*--              LIST RTN - RECORDS IN ASAPDB.                     --*\n*--              PUT IN CODE TO INSURE PAGELEN NEVER LESS THAN     --*\n*--              PAGE HEADER LENGTH PLUS ONE.                      --*\n*--   07.03      ADDED HEADERS AND SEPERATORS TO SYSPRINT REPORTS. --*\n*--              CHANGE DDNAME SYSPRINT TO ASAPOUT.                --*\n*--   07.04      ADDED ENQUEUE FOR GIMSMP QNAME AND CSI RNAME.     --*\n*--              X-SYSTEM/LOCAL ENQUEUE.                           --*\n*--                                                                --*\n*--   08.00      RE-ORGANIZED THE ASAP DB RECORDS. DATA BASE       --*\n*--              RECORDS SHOULD BE UNLOADED USING IDCAMS REPRO,    --*\n*--              REFORMATTED USING THE ASAPCNV2 PROGRAM, AND       --*\n*--              THE DATA BASE RELOADED INTO AN EMPTY CLUSTER      --*\n*--              USING IDCAMS REPRO.                               --*\n*--   08.01      REWORKED THE MAIN ROUTINE.                        --*\n*--   08.02      CONVERT PRINT ROUTINES TO SUBROUTINES USED BY     --*\n*--              ALL MAINLINE ROUTINES. SIMILAR TO ERROR ROUTINE.  --*\n*--   08.03      SUPPORT ZE APAR RECORDS. CHANGE THE HIPER FLAG    --*\n*--              TO BE THREE FLAGS, HIPER, ZE APAR, AND NUMBER     --*\n*--              OF PE'S IDENTIFIED. USE HIPER AND ZE APAR.        --*\n*--              NUMBER OF PE'S FOR FUTURE USE.                    --*\n*--                                                                --*\n*--   09.01      SUPPORT PE DELETE RECORDS FOR ASAPDB RECORDS      --*\n*--              HAVING SINGLE PE IDENTIFIED.                      --*\n*--   09.02      REWORKED THE UPDATE ROUTINE. DUPLICATED CODE HAS  --*\n*--              BEEN REMOVED. ROUTINE STREAMLINED.                --*\n*--   09.03      CHECK FOR APAR SUPERCEDED WHEN NO FIXING PTF IS   --*\n*--              IDENTIFIED IN ASAP RECORD. XREF PROCESSING.       --*\n*--                                                                --*\n*--   10.01      MACRO CHANGES:                                    --*\n*--                - @PRT CHANGED TO @CALL                         --*\n*--                - @DASH/@BLANK/@ZERO CHANGED TO @FILL           --*\n*--                  PARAMETER CHAR= USED TO SPECIFY FILL CHAR     --*\n*--              MEMBERS IEBASAPJ/K/L/M COMBINED INTO ONE MEMBER   --*\n*--                IEBASAPJ.                                       --*\n*--              MULTIPLE UPDATES TO LABELS TO STANDARIZED THE     --*\n*--                LABELS.                                         --*\n*--              THE ENTRY/EXIT CODE IN THE ERROR ROUTINE WAS      --*\n*--                CHANGED TO MATCH THE OTHER ROUTINES.            --*\n*--   10.02      A VSAM POINT WAS ADDED TO ALL ROUTINES THAT       --*\n*--                ACCESS THE ASAP DATA BASE IN SEQUENTIAL         --*\n*--                MODE. ALLOWS THE USE OF BLSR.                   --*\n*--   10.03      THE GLOBAL ZONE PROCESSING WAS MOVED TO A         --*\n*--                SEPARATE ROUTINE.                               --*\n*--   10.04      THE REQUESTED ZONE PROCESSING WAS MOVED TO A      --*\n*--                SEPARATE ROUTINE.                               --*\n*--   10.05      THE REQUESTED ZONE READ SUBROUTINE PROCESSING     --*\n*--                WAS MOVED TO A SEPARATE ROUTINE.                --*\n*--                                                                --*\n*-- * 11.01      NUMEROUS LABEL CHANGES, CODE CLEANUP, AND REMOVAL --*\n*--                OF UNUSED DATA AREAS AND CODE.                  --*\n*-- * 11.02      THE GLOBAL ZONE READ PROCESSING WAS MOVED TO A    --*\n*--                SEPARATE ROUTINE.                               --*\n*-- * 11.03      XREF ROUTINE CHANGED TO CHECK THE REQZONE FOR     --*\n*--                THE FMID INSTEAD OF THE GLOBAL ZONE. THIS IS    --*\n*--                WILL ALLOW FOR MORE ACCURATE XREF REPORTING.    --*\n*-- * 11.04      XREF PROCESSING UPDATED. NEW CODE FLOW IS:        --*\n*--                - CHECK IS FMID IS INSTALLED IN REQZONE         --*\n*--                - IF NO FIX AND MULTIPLE PE'S, IS APAR INST?    --*\n*--                - IF PE ID'ED, IS IT INSTALLED?                 --*\n*--                - IF FIX ID'ED, IS IT INSTALLED?                --*\n*--                - IS APAR FIX INSTALLED?                        --*\n*--                - CHECK GLOBAL ZONE FOR FIXING PTF?             --*\n*--                - ERASE ASAP RECORD IF FIX INSTALLED?           --*\n*--                THIS FIXES A PROBLEM WHERE SOME ASAP DB RECORDS --*\n*--                WERE NOT IN XREF OUTPUT.                        --*\n*--                NEW MESSAGE (30) TO INDICATE NO FIX/MULTIPLE    --*\n*--                PE RECORDS.                                     --*\n*--                                                                --*\n*-- * __.__ __   XREF FMID AND FMIDGRP FEATURES ADDED. ALLOWS SAME --*\n*--              FUNCTIONALITY AS WITH THE LIST COMMAND.           --*\n*--                                                                --*\n*-- * __.01      UPDATE ROUTINE WILL CHECK TO SEE IF THE FMID OF   --*\n*--              THE ASAP RECORD IS IN THE USER'S GLOBAL ZONE.     --*\n*--              COMMAND OPTION FMIDS(ALL/INSTALLED) DEFAULT=ALL   --*\n*-- * __.03      ADDED MSG ASAP106, NUMBER OF PE INSTALLED         --*\n*--              ADDED MSG ASAP107, NUMBER OF PE DELETES           --*\n*--              ADDED MSG ASAP108, NUMBER OF ZE APARS             --*\n*--              RECORD COUNTS AND SUMMARIES MAINTAINED IN PRIME   --*\n*--              RECORD OF THE DATABASE. THESE FIELDS ARE SET AND  --*\n*--              MAINTAINED BY THE UPDATE AND XREF ROUTINES.       --*\n*--                                                                --*\n*-- * __.__ __   ADD DATA CHECKING FOR UPDATE ACTIONS. IF DATA     --*\n*--              DOES NOT CHANGE, THEN DON'T UPDATE RECORD. IF     --*\n*--              UPDREC DATE LESS THAN OR EQUAL TO RECORD DATE,    --*\n*--              THEN DON'T PROCESS UPDATE.                        --*\n*--                                                                --*\n*-- * __.__ __   ADD AFTERDATE OPTION TO XREF AND LIST COMMANDS.   --*\n*--              THIS ALLOWS FOR SHORTER LISTINGS WHEN XREF OR     --*\n*--              LIST IS NEEDED FROM LAST X DAYS OF UPDATES,       --*\n*--              AFTERDATE(MM/DD/YY).                              --*\n*--                                                                --*\n*-- * __.__ __   ADD ENQUEUE FOR ASAP DATA BASE. RNAME(IEBASAP).   --*\n*--              QNAME(DSN). EXCLUSIVE AND CROSS-SYSTEM.           --*\n*--              RDJFCB FOR ASAPUPD AND ASAPACB.                   --*\n*--                                                                --*\n*-- * __.__ __   XREF INSTPE FEATURE ADDED. LISTS ONLY INSTALLED   --*\n*--              PE RECORDS IN ASAPRPT REPORT. MSG105 NOW ONLY     --*\n*--              GENERATED ON CLEANUP RUNS (RECS DELETED).         --*\n*--              NEW MESSAGE WITH NUMBER OF INST'ED PE'S.          --*\n*--                                                                --*\n*-- * __.__ __   HIGHLIGHT ALL WARNING AND ERROR MESSAGES IN       --*\n*--              ASAPRPT REPORTS. NEW OPTION ON SET COMMAND.       --*\n*--              SET HIGHLITE(Y/N). DEFAULT IS N.                  --*\n*--                                                                --*\n*-- * __.__ __   PROCESS ONLY HIPER RECORDS. NEW OPTION ON THE     --*\n*--              SET COMMAND. USED BY LIST AND XREF.               --*\n*--              SET RECTYPE(ALL/HIPER) ALL IS DEFAULT.            --*\n*--              ADD HIPER COUNT TO OUTPUT REPORTS (LIST AND XREF) --*\n*--                                                                --*\n*-- * __.__ __   REDO ALL MESSAGE NUMBERS. MESSAGES NOW RELATED    --*\n*--              TO COMMAND BEING EXECUTED.                        --*\n*--                                                                --*\n*-- * __.__ __   COMMENTS ALLOWED IN SYSIN CONTROL CARD STREAM.    --*\n*--              * IN COLUMNS 1 THROUGH 16.                        --*\n*--                                                                --*\n*-- * __.__ __   SUPPORT MULTIPLE PE'S FOR EACH ASAPDB RECORD.     --*\n*--              USE NUMBER OF PE'S IDENTIFIED FLAG.               --*\n*--                                                                --*\n*-- * __.__ __   ADD SUPPORT FOR INPUT FROM PSP REC AND HOLDDATA.  --*\n*--                                                                --*\n*-- * __.__ __   ALLOW USE OF DYNAMIC INPUT FILES. UPDATE COMMAND  --*\n*--              OPTIONS ASAPDB(DDNAME) AND UPDDS(DDNAME).         --*\n*--                                                                --*\n*-- * __.__ __   ADDED XREF FEATURE TO UPDATE COMMAND.             --*\n*--                                                                --*\n*-- * __.__ __   ADDED DATASETS USED LISTS FOR EACH COMMAND EXEC.  --*\n*--                                                                --*\n*-- * __.__ __   USE AN EXTERNAL TABLE FOR PRODUCT ID NAME.        --*\n*--              IF THE TABLE IS PRESENT IN THE SYSTEM IT WOULD    --*\n*--              BE USED. RESIDE IN EITHER THE JOB'S STEPLIB OR    --*\n*--              IN THE SYSTEM LINKLIST.                           --*\n*--                                                                --*\n*-- * __.01      CREATED DELETE ROUTINE. DELETES DONE FROM         --*\n*--              ASAPDEL DD IF NO PARAMETERS SUPPLIED.             --*\n*-- * __.02      ADDED DELETE FMID(XXXXXXX) FEATURE.               --*\n*-- * __.03      ADDED DELETE FMIDGRP(XX) FEATURE.                 --*\n*--                                                                --*\n*-- * __.01      CREATED UNLOAD FUNCTION. ALLOW UNLOAD OF ASAPDB,  --*\n*--              IN ASAP RECORD FORMAT, TO ASAPUNLD DD.            --*\n*-- * __.02      ADDED UNLOAD FMID(XXXXXXX) FEATURE.               --*\n*-- * __.03      ADDED UNLOAD FMIDGRP(XX) FEATURE.                 --*\n*--                                                                --*\n*--------------------------------------------------------------------*\n*--   THE FORMAT OF ALL SUPPORTED COMMANDS IS LISTED BELOW.        --*\n*--   *****************************     *******************        --*\n*--   ********** COMMAND **********     ***** DEFAULT *****        --*\n*--   **************.**************  *  *********.*********        --*\n*--   SET                                                          --*\n*--     DATATYPE(MVS/VM)             O          MVS                --*\n*--     PAGELEN(60/NN)               O          060                --*\n*--                                                                --*\n*--   UPDATE                                                       --*\n*--     CHECK                        O                             --*\n*--                                                                --*\n*--   LIST                                                         --*\n*--     FMID(XXXXXXX)                O                             --*\n*--     FMIDGRP(XX)                  O                             --*\n*--                                                                --*\n*--   XREF                                                         --*\n*--     ZONE(XXXXXXX)                R          NONE               --*\n*--     CLEANUP                      O                             --*\n*--     CHECK                        O                             --*\n*--                                                                --*\n*--   CLEANUP                                                      --*\n*--     CHECK                        O                             --*\n*--                                                                --*\n*--------------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMASAP": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13\\x7f\\x00\\x91\\x13\\x7f\\x15X\\x00\\n\\x00\\n\\x00\\x00\\xe5\\xc5\\xd9\\xf1\\xf1\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-17T00:00:00", "modifydate": "1991-05-17T15:58:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "VER1104"}, "text": "//*                                                                      ASMASAP\n//ASMASAP   EXEC  ASMHCL                                                 ASMASAP\n//C.SYSLIB  DD  DISP=SHR,DSN=asap.source.dataset                         ASMASAP\n//          DD  DISP=SHR,DSN=SYS1.MACLIB                                 ASMASAP\n//C.SYSIN   DD  DISP=SHR,DSN=asap.source.dataset(IEBASAP)                ASMASAP\n//L.SYSLMOD DD  DISP=SHR,DSN=your.program.load.library                   ASMASAP\n//L.SYSIN   DD  *                                                        ASMASAP\n  NAME IEBASAP(R)                                                        ASMASAP\n/*                                                                       ASMASAP\n//                                                                       ASMASAP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEBASAP": {"ttr": 1032, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT NOGEN\n         COPY  ASAPDOC\n         TITLE 'IEBASAP - CONTROL ROUTINE'\n*--------------------------------------------------------------------*\n*---  R00  -  *                                                   ---*\n*---  R01  -  *                                                   ---*\n*---  R02  -  SYSIN INPUT RECORDS                                 ---*\n*---  R03  -  WORK / RETURN CODE FROM VSAM                        ---*\n*---  R04  -  WORK / REASON CODE OR ERROR CODE FROM VSAM          ---*\n*---  R05  -  WORK /                                              ---*\n*---  R06  -  WORK / DCB OPEN / INTERNAL BAL REG                  ---*\n*---  R07  -  WORK /                                              ---*\n*---  R08  -  WORK /                                              ---*\n*---  R09  -  DCB AREA                    PASSED TO ALL ROUTINES  ---*\n*---  R10  -  WORK AREA                   PASSED TO ALL ROUTINES  ---*\n*---  R11  -  BASE REGISTER #2            IF REQUIRED (RESERVED)  ---*\n*---  R12  -  BASE REGISTER #1                                    ---*\n*---  R13  -  *                                                   ---*\n*---  R14  -  *                                                   ---*\n*---  R15  -  *                                                   ---*\n*--------------------------------------------------------------------*\n         @REGS\nIEBASAP  CSECT\nRTNMAIN  SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #0\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING IEBASAP,R12,R11         EST ROUTINE ADDRESSABILITY\n         LR    R11,R12\n         A     R11,RMF4096\n*\n         LA    R2,RSA1                 LOAD ADDR OF SAVEAREA #1\n         ST    R13,4(R2)               SAVE ADDR OF SAVEAREA #0 IN\n*                                      SAVEAREA #1\n         ST    R2,8(R13)               SAVE ADDR OF SAVEAREA #1 IN\n*                                      SAVEAREA #0\n         LR    R13,R2                  LOAD ADDR OF SAVEAREA #1 IN R13\n*\n         @ZREGS (2,10)                 CLEAR REGS 2 THROUGH 10\n*\n         L     R9,@DCB                 LOAD ADDR OF DCB AREA\n         USING DCBAREA,R9              *\n*\n         L     R10,@WORK               LOAD ADDR OF WORK AREA\n         USING WORKAREA,R10            *\n*\n         B     RMOOPN                  *\n*\nRSA1     DS    18F                     SAVEAREA #1\nRSA2     DS    18F                     SAVEAREA #2\nRSA3     DS    18F                     SAVEAREA #3\nRSA4     DS    18F                     SAVEAREA #4\nRMF4096  DC    F'4096'                 *\n*--------------------------------------------------------------------*\nRMOOPN   OPEN  (ASAPOUT,OUTPUT)        OPEN ASAPOUT DATASET\n         LA    R6,ASAPOUT              LOAD ADDR OF DCB\n         USING IHADCB,R6               *\n         TM    DCBOFLGS,X'10'          WAS DD STATEMENT MISSING?\n         BNZ   RMIOPN                  YES,\n*\nRMOOERR  @ERROR RTNERR,RTNMAIN0,MOO,OO *\n*\n         DROP  R6                      *\n*--------------------------------------------------------------------*\nRMIOPN   OPEN  (SYSIN,INPUT)           OPEN SYSIN DATASET\n         LA    R6,SYSIN                LOAD ADDR OF DCB\n         USING IHADCB,R6               *\n         TM    DCBOFLGS,X'10'          WAS DD STATEMENT MISSING?\n         BNZ   RMHDR                   YES,\n*\nRMIOERR  @ERROR RTNERR,RTNMAIN1,MOI,OI *\n*\n         DROP  R6                      *\n*--------------------------------------------------------------------*\nRMHDR    ZAP   OPAGCTR,P0              ZERO ASAPOUT PAGE COUNTER\n         ZAP   OLINCTR,P0              ZERO ASAPOUT LINE COUNTER\n*\n         @CALL RTNOHDR                 WRITE INITIAL ASAPOUT HEADERS\n*--------------------------------------------------------------------*\nRMSGET   GET   SYSIN                   READ SYSIN RECORD\n         LR    R2,R1                   LOAD ADDR OF SYSIN RECORD\n         @FILL AREA=CNTLAREA,CHAR=40   CLEAR VALIDATION WORK AREA\n*\n         MVC   MSG000A(80),0(R2)       PUT CONTROL CARD IN MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         @FILL AREA=MSG000,CHAR=40     CLEAR GENERAL USE MSG AREA\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         LR    R3,R2                   COPY ADDR OF CONTROL CARD START\n         XR    R8,R8                   COPY ADDR OF CONTROL CARD START\n*\nRMCK01   CLC   SET,0(R3)               IS THIS A SET REQUEST?\n         BNE   RMCK02                  NO,\n         BAL   R6,RMSET                CALL CONTROL CARD VERFICATION\n         B     RMRET                   CALL PROCESSING ROUTINE\n*\nRMCK02   CLC   UPDATE,0(R3)            IS THIS AN UPDATE REQUEST?\n         BNE   RMCK03                  NO,\n         BAL   R6,RMUPD                CALL CONTROL CARD VERFICATION\n         B     RMRET                   CALL PROCESSING ROUTINE\n*\nRMCK03   CLC   LIST,0(R3)              IS THIS A LIST REQUEST?\n         BNE   RMCK04                  NO,\n         BAL   R6,RMLIST               CALL CONTROL CARD VERFICATION\n         B     RMRET                   CALL PROCESSING ROUTINE\n*\nRMCK04   CLC   XREF,0(R3)              IS THIS A XREF REQUEST?\n         BNE   RMCK05                  NO,\n         BAL   R6,RMXREF               CALL CONTROL CARD VERFICATION\n         B     RMRET                   CALL PROCESSING ROUTINE\n*\nRMCK05   CLC   CLEANUP,0(R3)           IS THIS A CLEANUP REQUEST?\n         BNE   RMCK06                  NO,\n         BAL   R6,RMCLN                CALL CONTROL CARD VERFICATION\n         B     RMRET                   CALL PROCESSING ROUTINE\n*\nRMCK06   CLC   DELETE,0(R3)            IS THIS A DELETE REQUEST?\n         BNE   RMCK99                  NO,\n         BAL   R6,RMDEL                CALL CONTROL CARD VERFICATION\n         B     RMRET                   CALL PROCESSING ROUTINE\n*\nRMCK99   A     R8,F1                   ADD 1 TO COLUMN COUNTER\n         C     R8,F16                  HAVE WE CHECKED COLUMN 16?\n         BE    RMCRDERR                YES,\n         LA    R3,1(,R3)               POINT TO NEXT POSITION\n         B     RMCK01                  CHECK NEXT POSITION\n*\nRMCRDERR @MVC  MSG000A,MSG904          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RMNEXT                  GET NEXT SYSIN RECORD\n*\nRMRET    C     R15,F0                  IS ROUTINE CODE = 0?\n         BE    RMNEXT                  YES, GET NEXT SYSIN RECORD\n*\n         L     R15,RTNADDR(R15)        LOAD ADDR OF REQUESTED ROUTINE\n         BALR  R14,R15                 CALL REQUESTED ROUTINE\n*\nRMNEXT   @FILL AREA=MSG000,CHAR=40     CLEAR GENERAL USE MSG AREA\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RMSGET                  GET NEXT SYSIN RECORD\n*--------------------------------------------------------------------*\nRTNMAIN@ EQU   *                       DCB=SYSIN EODAD ROUTINE\n*--------------------------------------------------------------------*\nRTNMAIN2 CLOSE (SYSIN)                 CLOSE SYSIN DATASET\n*--------------------------------------------------------------------*\nRTNMAIN1 CLOSE (ASAPOUT)               CLOSE ASAPOUT DATASET\n*--------------------------------------------------------------------*\nRTNMAIN0 L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n*\n         DS    0D\n@DCB     DC    A(DCBAREA)              ADDR OF ACB AND DCB AREA\n@WORK    DC    A(WORKAREA)             ADDR OF PROGRAM WORK AREA\n*--------------------------------------------------------------------*\nRMSET    ST    R6,RETADDR              SAVE RETURN ADDRESS\n         MVC   RTNCODE,F0              INDICATE AN UPDATE REQUEST\n*\n         LA    R3,4(,R3)               POINT PAST COMMAND\n         LA    R4,80                   LOAD MAX LENGTH OF CMD BUFFER\n         LA    R5,4                    LOAD LENGTH OF COMMAND\n         SR    R4,R5                   SUB CMD LEN FROM BUFFER LEN\n         SR    R4,R8                   SUB CHKED POS FROM BUFFER LEN\n         LR    R5,R3                   LOAD ADDR OF SUB-PARAMETERS\n         S     R5,F2                   BACKUP 2 POSITIONS\n         STH   R4,0(,R5)               STORE LENGTH OF REMAINING BUFFER\n         LR    R3,R5                   LOAD ADDR OF CMD BUFFER\n         KEYVAL (R3),#KTSET            CALL VALIDATION ROUTINE\n         C     R15,F0                  WAS VALIDATION CODE A 0?\n         BE    RMS002                  YES, PARAMETER(S) SPECIFIED\n         C     R15,F20                 WAS VALIDATION CODE A 20?\n         BE    RMS001                  YES, INVALID PAGELEN VALUE\n         B     RMSERR                  ALL OTHERS - AN ERROR\n*\nRMS001   ZAP   PAGELEN,P60             SET DEFAULT PAGELEN\n         OI    PAGELEN+2,X'0F'         FORCE TO NUMERIC\n         @MVC  MSG000A,MSG900          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RMS004                  YES,\n*\nRMS002   CLI   #KDPAGE,X'40'           WAS A PAGELEN SUPPLIED?\n         BE    RMS004                  NO,\n*\nRMS003   PACK  PAGELEN,CNTLPAGE        USE SUPPLIED PAGELEN\n         OI    PAGELEN+2,X'0F'         FORCE TO NUMERIC\n         CP    PAGELEN,P8              IS THE PAGELEN LESS THAN 8?\n         BL    RMS001                  YES, USE THE DEFAULT OF 60 LPP\n         @MVC  MSG000A,MSG901          GET MSG\n         UNPK  MSG000A+24(2),PAGELEN   GET PAGELEN FOR MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\nRMS004   CLC   CNTLDATA,MVS            IS USER FORCING MVS DATA?\n         BE    RMSETMVS                YES,\n         CLC   CNTLDATA,VM             IS USER FORCING VM DATA?\n         BE    RMSETVM                 YES,\n         CLC   CNTLDATA,BLANKS         IS USER DEFAULTING TO MVS DATA?\n         BE    RMSETMVS                YES,\n         @MVC  MSG000A,MSG902          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RMSERR                  RETURN WITH AN ERROR\nRMSETMVS MVC   DATATYPE,MVS            SET DATATYPE TO MVS\n         @MVC  MSG000A,MSG903          GET MSG\n         @MVC  MSG000A+31,MVS          SET MSG DATATYPE TO MVS\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RMSET@                  RETURN\nRMSETVM  MVC   DATATYPE,VM             SET DATATYPE TO VM\n         @MVC  MSG000A,MSG903          GET MSG\n         @MVC  MSG000A+31,VM           SET MSG DATATYPE TO VM\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\nRMSET@   @FILL AREA=MSG000,CHAR=40     GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         L     R6,RETADDR              LOAD RETURN ADDRESS\n         L     R15,RTNCODE             SET THE ROUTINE CODE IN R15\n         BR    R6                      RETURN\n*\nRMSERR   @MVC  MSG000A,MSG908          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   RTNCODE,F0              RESET ROUTINE CODE TO 0\n         B     RMSET@                  RETURN\n*--------------------------------------------------------------------*\nRMUPD    ST    R6,RETADDR              SAVE RETURN ADDRESS\n         MVC   RTNCODE,F4              INDICATE AN UPDATE EQUEST\n*\n         LA    R3,7(,R3)               POINT PAST COMMAND\n         LA    R4,80                   LOAD MAX LENGTH OF CMD BUFFER\n         LA    R5,7                    LOAD LENGTH OF COMMAND\n         SR    R4,R5                   SUB CMD LEN FROM BUFFER LEN\n         SR    R4,R8                   SUB CHKED POS FROM BUFFER LEN\n         LR    R5,R3                   LOAD ADDR OF SUB-PARAMETERS\n         S     R5,F2                   BACKUP 2 POSITIONS\n         STH   R4,0(,R5)               STORE LENGTH OF REMAINING BUFFER\n         LR    R3,R5                   LOAD ADDR OF CMD BUFFER\n         KEYVAL (R3),#KTUPD            CALL VALIDATION ROUTINE\n         C     R15,F16                 WAS VALIDATION CODE A 16?\n         BE    RMUPD@                  RETURN\n         C     R15,F0                  WAS VALIDATION CODE A 0?\n         BNE   RMUERR                  ALL OTHERS - AN ERROR\n         MVI   CHECKRUN,C'Y'           INDICATE A CHECK RUN\n*\nRMUPD@   L     R6,RETADDR              LOAD RETURN ADDRESS\n         L     R15,RTNCODE             SET THE ROUTINE CODE IN R15\n         BR    R6                      RETURN\n*\nRMUERR   @MVC  MSG000A,MSG908          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   RTNCODE,F0              RESET RETURN CODE\n         B     RMUPD@                  RETURN\n*--------------------------------------------------------------------*\nRMLIST   ST    R6,RETADDR              SAVE RETURN ADDRESS\n         MVC   RTNCODE,F8              INDICATE A LIST REQUEST\n*\n         LA    R3,5(,R3)               POINT PAST COMMAND IN CMD BUFFER\n         LA    R4,80                   LOAD MAX LENGTH OF CMD BUFFER\n         LA    R5,5                    LOAD LENGTH OF COMMAND\n         SR    R4,R5                   SUB CMD LEN FROM BUFFER LEN\n         SR    R4,R8                   SUB CHKED POS FROM BUFFER LEN\n         LR    R5,R3                   LOAD ADDR OF SUB-PARAMETERS\n         S     R5,F2                   BACKUP 2 POSITIONS\n         STH   R4,0(,R5)               STORE LENGTH OF REMAINING BUFFER\n         LR    R3,R5                   LOAD ADDR OF CMD BUFFER\n         KEYVAL (R3),#KTLIST           CALL VALIDATION ROUTINE\n         C     R15,F16                 WAS VALIDATION CODE A 16?\n         BE    RMLIST@                 RETURN\n         C     R15,F0                  WAS VALIDATION CODE A 0?\n         BNE   RMLERR                  ALL OTHERS - AN ERROR\n*\nRML001   CLI   #KDFMID,C' '            IS THIS A LIST FMID?\n         BE    RML002                  NO,\n         MVI   CHECKFMD,C'Y'           YES, SET CHECK FMID FLAG\nRML002   CLI   #KDFGRP,C' '            IS THIS A LIST FMIDGRP?\n         BE    RMLFLGS                 NO,\n         MVI   CHECKFMG,C'Y'           YES, SET CHECK FMIDGRP FLAG\nRMLFLGS  CLC   FMIDFLGS,=CL2'YY'       WERE BOTH SPECIFIED?\n         BE    RMLERR                  YES,\n*\nRMLIST@  L     R6,RETADDR              LOAD RETURN ADDRESS\n         L     R15,RTNCODE             SET THE ROUTINE CODE IN R15\n         BR    R6                      RETURN\n*\nRMLERR   @MVC  MSG000A,MSG909          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RMLIST@                 RETURN\n*--------------------------------------------------------------------*\nRMXREF   ST    R6,RETADDR              SAVE RETURN ADDRESS\n         MVC   RTNCODE,F12             INDICATE AN XREF REQUEST\n*\n         CLC   DATATYPE,MVS            IS THE DATA FOR MVS?\n         BE    RMXCHK                  YES,\n         @MVC  MSG000A,MSG913          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         @MVC  MSG000A,MSG908          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   RTNCODE,F0              RESET RETURN CODE\n         B     RMXREF@                 RETURN\n*\nRMXCHK   LA    R3,5(,R3)               POINT PAST COMMAND\n         LA    R4,80                   LOAD MAX LENGTH OF CMD BUFFER\n         LA    R5,5                    LOAD LENGTH OF COMMAND\n         SR    R4,R5                   SUB CMD LEN FROM BUFFER LEN\n         SR    R4,R8                   SUB CHKED POS FROM BUFFER LEN\n         LR    R5,R3                   LOAD ADDR OF SUB-PARAMETERS\n         S     R5,F2                   BACKUP 2 POSITIONS\n         STH   R4,0(,R5)               STORE LENGTH OF REMAINING BUFFER\n         LR    R3,R5                   LOAD ADDR OF CMD BUFFER\n         KEYVAL (R3),#KTXREF           CALL VALIDATION ROUTINE\n         C     R15,F0                  WAS VALIDATION CODE A 0?\n         BNE   RMXERR                  ALL OTHERS - AN ERROR\n         CLI   #KDZONE,C' '            WAS ZONE SUPPLIED?\n         BNE   RMX001                  YES,\n*\n         @MVC  MSG000A,MSG910          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         @MVC  MSG000A,MSG908          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   RTNCODE,F0              RESET RETURN CODE\n         B     RMXREF@                 RETURN\n*\nRMX001   CLI   #KDCLEAN,X'00'          WAS CLEANUP SPECIFIED?\n         BNE   RMXREF@                 NO,\n         MVI   CLEANRUN,C'Y'           YES, SET CLEANUP FLAG\nRMX002   CLI   #KDCHECK,X'00'          WAS CHECK SPECIFIED?\n         BNE   RMXREF@                 NO,\n         MVI   CHECKRUN,C'Y'           YES, SET CHECK FLAG\n*\nRMXREF@  @FILL AREA=MSG000,CHAR=40     GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         L     R6,RETADDR              LOAD RETURN ADDRESS\n         L     R15,RTNCODE             SET THE ROUTINE CODE IN R15\n         BR    R6                      RETURN\n*\nRMXERR   @MVC  MSG000A,MSG908          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   RTNCODE,F0              RESET RETURN CODE\n         B     RMXREF@                 RETURN\n*--------------------------------------------------------------------*\nRMCLN    ST    R6,RETADDR              SAVE RETURN ADDRESS\n         MVC   RTNCODE,F16             INDICATE A CLEANUP REQUEST\n*\n         CLC   DATATYPE,MVS            IS THE DATA FOR MVS?\n         BE    RMCCHK                  YES,\n         @MVC  MSG000A,MSG914          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         @MVC  MSG000A,MSG908          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   RTNCODE,F0              RESET RETURN CODE\n         B     RMCLN@                  RETURN\n*\nRMCCHK   LA    R3,8(,R3)               POINT PAST COMMAND\n         LA    R4,80                   LOAD MAX LENGTH OF CMD BUFFER\n         LA    R5,8                    LOAD LENGTH OF COMMAND\n         SR    R4,R5                   SUB CMD LEN FROM BUFFER LEN\n         SR    R4,R8                   SUB CHKED POS FROM BUFFER LEN\n         LR    R5,R3                   LOAD ADDR OF SUB-PARAMETERS\n         S     R5,F2                   BACKUP 2 POSITIONS\n         STH   R4,0(,R5)               STORE LENGTH OF REMAINING BUFFER\n         LR    R3,R5                   LOAD ADDR OF CMD BUFFER\n         KEYVAL (R3),#KTCLEAN          CALL VALIDATION ROUTINE\n         C     R15,F16                 WAS VALIDATION CODE A 16?\n         BE    RMCLN@                  RETURN\n         C     R15,F0                  WAS VALIDATION CODE A 0?\n         BNE   RMCERR                  ALL OTHERS - AN ERROR\n*\n         MVI   CHECKRUN,C'Y'           INDICATE A CHECK RUN\n*\nRMCLN@   @FILL AREA=MSG000,CHAR=40     GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         L     R6,RETADDR              LOAD RETURN ADDRESS\n         L     R15,RTNCODE             SET THE ROUTINE CODE IN R15\n         BR    R6                      RETURN\n*\nRMCERR   @MVC  MSG000A,MSG908          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   RTNCODE,F0              RESET RETURN CODE\n         B     RMCLN@                  RETURN\n*--------------------------------------------------------------------*\nRMDEL    ST    R6,RETADDR              SAVE RETURN ADDRESS\n         MVC   RTNCODE,F20             INDICATE A DELETE REQUEST\n*\n         LA    R3,8(,R3)               POINT PAST COMMAND\n         LA    R4,80                   LOAD MAX LENGTH OF CMD BUFFER\n         LA    R5,7                    LOAD LENGTH OF COMMAND\n         SR    R4,R5                   SUB CMD LEN FROM BUFFER LEN\n         SR    R4,R8                   SUB CHKED POS FROM BUFFER LEN\n         LR    R5,R3                   LOAD ADDR OF SUB-PARAMETERS\n         S     R5,F2                   BACKUP 2 POSITIONS\n         STH   R4,0(,R5)               STORE LENGTH OF REMAINING BUFFER\n         LR    R3,R5                   LOAD ADDR OF CMD BUFFER\n         KEYVAL (R3),#KTDEL            CALL VALIDATION ROUTINE\n         C     R15,F16                 WAS VALIDATION CODE A 16?\n         BE    RMDEL@                  RETURN\n         C     R15,F0                  WAS VALIDATION CODE A 0?\n         BNE   RMDERR                  ALL OTHERS - AN ERROR\n*\n         MVI   CHECKRUN,C'Y'           INDICATE A CHECK RUN\n*\nRMDEL@   L     R6,RETADDR              LOAD RETURN ADDRESS\n         L     R15,RTNCODE             SET THE ROUTINE CODE IN R15\n         BR    R6                      RETURN\n*\nRMDERR   @MVC  MSG000A,MSG908          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   RTNCODE,F0              RESET RETURN CODE\n         B     RMDEL@                  RETURN\n***********************************************************************\n*        KEYVAL TABLES                                                *\n***********************************************************************\nKEYTAREA EQU   *\n#KTSET   DS    0D\n         KEYT  DATATYPE,,#KDDATA,,(1,1),                               +\n               FIELD1=(,,,)\n         KEYT  PAGELEN,,#KDPAGE,NUMERIC,(1,1),                         +\n               FIELD1=(,,,),LEN=2,                                     +\n               END=YES\n*\n#KTUPD   DS    0D\n         KEYT  CHECK,,#KDCHECK,,(0,0),                                 +\n               FIELD1=(,,,),                                           +\n               END=YES\n*\n#KTLIST  DS    0D\n         KEYT  FMID,,#KDFMID,,(1,1),                                   +\n               FIELD1=(,,,)\n         KEYT  FMIDGRP,,#KDFGRP,,(1,1),                                +\n               FIELD1=(,,,)\n         KEYT  CHECK,,#KDCHECK,,(0,0),                                 +\n               FIELD1=(,,,),                                           +\n               END=YES\n*\n#KTXREF  DS    0D\n         KEYT  ZONE,,#KDZONE,,(1,1),                                   +\n               FIELD1=(,,,)\n         KEYT  CLEANUP,,#KDCLEAN,,(0,0),                               +\n               FIELD1=(,,,)\n         KEYT  CHECK,,#KDCHECK,,(0,0),                                 +\n               FIELD1=(,,,),                                           +\n               END=YES\n*\n#KTCLEAN DS    0D\n         KEYT  CHECK,,#KDCHECK,,(0,0),                                 +\n               FIELD1=(,,,),                                           +\n               END=YES\n*\n#KTDEL   DS    0D\n         KEYT  CHECK,,#KDCHECK,,(0,0),                                 +\n               FIELD1=(,,,),                                           +\n               END=YES\n*\nKEYTLEN  EQU   *-KEYTAREA\n*--------------------------------------------------------------------*\n         DROP  R9                      *\n         DROP  R10                     *\n         DROP  R11                     *\n         DROP  R12                     *\n*\n         LTORG                         IEBASAP\n*\nLENMAIN  EQU   *-RTNMAIN\n*--------------------------------------------------------------------*\n         TITLE 'IEBASAP - UPDATE ROUTINE'\n         COPY  IEBASAPA\n         TITLE 'IEBASAP - LIST ROUTINE'\n         COPY  IEBASAPB\n         TITLE 'IEBASAP - XREF ROUTINE'\n         COPY  IEBASAPC\n         TITLE 'IEBASAP - CLEANUP ROUTINE'\n         COPY  IEBASAPD\n         TITLE 'IEBASAP - DELETE ROUTINE'\n         COPY  IEBASAPH\n         TITLE 'IEBASAP - ERROR ROUTINE'\n         COPY  IEBASAPI\n         TITLE 'IEBASAP - PRINT ROUTINES'\n         COPY  IEBASAPJ\n         TITLE 'IEBASAP - GLOBAL CSI/ZONE ROUTINES'\n         COPY  IEBASAPK\n         TITLE 'IEBASAP - REQZONE CSI/ZONE ROUTINES'\n         COPY  IEBASAPL\n         TITLE 'IEBASAP - READ GLOBAL ZONE ROUTINES'\n         COPY  IEBASAPM\n         TITLE 'IEBASAP - READ REQZONE ZONE ROUTINES'\n         COPY  IEBASAPN\n         TITLE 'IEBASAP - PROGRAM WORK AREAS'\n         COPY  IEBASAPE\n         TITLE 'IEBASAP - PROGRAM ACB AND DCB AREA'\n         COPY  IEBASAPF\n*--------------------------------------------------------------------*\nLENASAP  EQU   *-IEBASAP\n*--------------------------------------------------------------------*\n         TITLE 'IEBASAP - PROGRAM DSECTS'\n         COPY  IEBASAPG\n***********************************************************************\n         END   IEBASAP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPA": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11?\\x00\\x91\\x11?\\x18P\\x01\\xa7\\x01\\xa7\\x00\\x00|\\xc4\\xe5\\xc7\\xc6\\xf0\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-23T00:00:00", "modifydate": "1991-04-23T18:50:00", "lines": 423, "newlines": 423, "modlines": 0, "user": "@DVGF09"}, "text": "* ------------------------------------------------------------------ *\nRTNUPD   SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNUPD,R12,R11          EST ROUTINE ADDRESSABILITY\n         LR    R11,R12\n         A     R11,RUF4096\n*\n         LA    R2,72(R13)              LOAD ADDR OF SAVEAREA #2\n         ST    R13,4(R2)               SAVE ADDR OF SAVEAREA #1 IN\n*                                      SAVEAREA #2\n         ST    R2,8(R13)               SAVE ADDR OF SAVEAREA #2 IN\n*                                      SAVEAREA #1\n         LR    R13,R2                  LOAD ADDR OF SAVEAREA #2 IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n*\n         B     RUROPN                  *\n*\nRUF4096  DC    F'4096'                 *\n* ------------------------------------------------------------------ *\nRUROPN   OPEN  (ASAPRPT,OUTPUT)        OPEN REPORT DATASET\n         LA    R6,ASAPRPT              LOAD ADDR OF DCB\n         USING IHADCB,R6               *\n         TM    DCBOFLGS,X'10'          WAS DD STATEMENT MISSING?\n         BNZ   RUAOPN                  NO,\n*\nRUROERR  EQU   *\n         @ERROR RTNERR,RTNUPD0,UOR,OR    /UPDATE/OPEN/ASAPRPT//\n*\n         DROP  R6\n* ------------------------------------------------------------------ *\nRUAOPN   XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         OPEN  (ASAPACB)               OPEN ASAP DATABASE\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RUAMOD1                 YES,\n*\nRUAOERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB ACB=ASAPACB,AREA=ERROR,LENGTH=4,FIELDS=(ERROR)\n         LTR   R15,R15                 WAS SHOWACB SUCCESSFUL?\n         BZ    RUAOF1                  YES,\n*\n         @ERROR RTNERR,RTNUPD1,USA1,SA1  /UPDATE/SHOWCB/ASAPRPL/#1/\n*\nRUAOF1   L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RTNUPD1,UOAR,OA   /UPDATE/OPEN/ASAPRPL/REGS/\n* ------------------------------------------------------------------ *\nRUAMOD1  MODCB RPL=ASAPRPL,OPTCD=(DIR,KEQ,FKS)  MODIFY ASAP RPL\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RUUJFCB                 YES,\n*\n         @ERROR RTNERR,RTNUPD3,UMA1,MA1  /UPDATE/MODCB/ASAPRPL/#1/\n* ------------------------------------------------------------------ *\nRUUJFCB  @FILL AREA=UPDDSN,CHAR=00     CLEAR DSN WORK AREA\n         @FILL AREA=UPDVOL,CHAR=00     CLEAR VOLSER WORK AREA\n*\n         RDJFCB (ASAPUPD)              READ JFCB FOR ASAPUPD\n         LTR   R15,R15                 WAS RDJFCB SUCESSFUL?\n         BNZ   RUUJERR                 NO,\n*\n         MVC   UPDDSN,JFCB+0           COPY DSN\n         MVC   UPDVOL,JFCB+118         COPY VOLSER\n         B     RUUOPN                  *\n*\nRUUJERR  EQU   *\n         @ERROR RTNERR,RTNUPD2,UJU,JU    /UPDATE/RDJFCB/ASAPUPD//\n* ------------------------------------------------------------------ *\nRUUOPN   OPEN  (ASAPUPD,INPUT)         OPEN ASAPUPD DATABASE\n         LA    R6,ASAPUPD              LOAD ADDR OF DCB\n         USING IHADCB,R6               *\n         TM    DCBOFLGS,X'10'          WAS DD STATEMENT MISSING?\n         BNZ   RUHDR                   NO,\n*\nRUUOERR  EQU   *\n         @ERROR RTNERR,RTNUPD2,UOU,OU    /UPDATE/OPEN/ASAPUPD//\n*\n         DROP  R6\n* ------------------------------------------------------------------ *\nRUHDR    ZAP   RPAGCTR,P0              ZERO ASAPRPT PAGE COUNTER\n         ZAP   RLINCTR,P0              ZERO ASAPRPT LINE COUNTER\n         ZAP   TRNCTR,P0               ZERO TRANSACTION COUNTER\n         ZAP   ADDCTR,P0               ZERO ADDED RECORDS COUNTER\n         ZAP   UPDCTR,P0               ZERO UPDATED RECORDS COUNTER\n         ZAP   DELCTR,P0               ZERO DELETED RECORDS COUNTER\n*\nRUHDR3   @FILL AREA=HDR3DATA,CHAR=40   CLEAR HEADER WORK AREA\n         LA    R6,HDR3FUNC             LOAD ADDR COMMAND DESCRIPTION\n         MVC   0(7,R6),UPDATE          INDICATE UPDATE COMMAND\n         LA    R6,7(,R6)               POINT PAST LITERAL\n         CLI   CHECKRUN,C'Y'           IS THIS A CHECK RUN?\n         BNE   RUHDR3A                 NO,\n         MVC   0(6,R6),CHECK           INDICATE CHECK RUN\n         LA    R6,6(,R6)               POINT PAST LITERAL\nRUHDR3A  MVC   0(10,R6),PROCESS        COMPLETE HDR3\n*\nRUHDR1   MVC   HDR1MSG,GENHDR1         COMPLETE HDR1\n*\nRUHDR2   MVC   HDR2MSG,GENHDR2         COMPLETE HDR2\n*\n         @CALL RTNRHDR                 WRITE INITIAL REPORT HEADERS\n* ------------------------------------------------------------------ *\nRUUGET   @FILL AREA=ASAPREC,CHAR=00    ZERO ASAP RECORD AREA\n         MVI   RECTYPE,C' '            CLEAR RECORD TYPE FLAG\n*\n         GET   ASAPUPD                 READ UPDATE RECORD\n         LR    R2,R1                   GET ADDR OF RECORD\n         USING UPDREC,R2               MAP RECORD\n         AP    TRNCTR,P1               ADD 1 TO TRANSACTION COUNTER\n*\n         @FILL AREA=MSG000,CHAR=40     CLEAR ASAPOUT MSG AREA\n         MVI   MSG000+1,C'*'           PUT IN FRAMING CHARACTER\n         MVC   MSG000+3(89),0(R2)      MOVE IN UPDATE RECORD\n         MVI   MSG000+95,C'*'          PUT IN FRAMING CHARACTER\n* ------------------------------------------------------------------ *\nRUUCHK   CLC   HIPAPAR,UPDTYPE         IS THIS A HIPER APAR?\n         BE    KEYAPAR                 YES, BUILD KEY\n         CLC   HIPFIX,UPDTYPE          IS THIS A HIPER FIX?\n         BE    KEYFIX                  YES, BUILD KEY\n         CLC   PE,UPDTYPE              IS THIS A PE?\n         BE    KEYAPAR                 YES, BUILD KEY\n         CLC   PEFIX,UPDTYPE           IS THIS A PE FIX?\n         BE    KEYFIX                  YES, BUILD KEY\n         CLC   PEDEL,UPDTYPE           IS THIS A PE DELETE?\n         BE    KEYDEL                  YES,\n         CLC   ZEAPAR,UPDTYPE          IS THIS A ZE APAR?\n         BE    KEYZEPAR                YES,\n*\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         @MVC  MSG000A,MSG905          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RUUGET                  GET NEXT UPDATE RECORD\n* ------------------------------------------------------------------ *\nKEYAPAR  MVC   ASAPAPAR,UPDFLDA        GET APAR NUMBER\n         MVI   ASAPAPAR,C'A'           SET 1ST CHAR OF APAR TO AN 'A'\n         MVC   ASAPFMID,UPDFMID        GET FMID\n         MVI   RECTYPE,C'A'            INDICATE THIS IS AN APAR REC\n         B     RUAMOD2                 PROCESS THIS UPDATE RECORD\n*\nKEYFIX   MVC   ASAPAPAR,UPDFLDB        GET APAR NUMBER\n         MVI   ASAPAPAR,C'A'           SET 1ST CHAR OF APAR TO AN 'A'\n         MVC   ASAPFMID,UPDFMID        GET FMID\n         MVI   RECTYPE,C'F'            INDICATE THIS IS A FIX REC\n         B     RUAMOD2                 PROCESS THIS UPDATE RECORD\n*\nKEYDEL   MVC   ASAPAPAR,UPDFLDA        GET APAR NUMBER\n         MVI   ASAPAPAR,C'A'           SET 1ST CHAR OF APAR TO AN 'A'\n         MVC   ASAPFMID,UPDFMID        GET FMID\n         MVI   RECTYPE,C'D'            INDICATE THIS IS A PE DEL REC\n         B     RUAMOD2                 PROCESS THIS UPDATE RECORD\n*\nKEYZEPAR MVC   ASAPAPAR,UPDFLDA        GET APAR NUMBER\n         MVI   ASAPAPAR,C'A'           SET 1ST CHAR OF APAR TO AN 'A'\n         MVC   ASAPFMID,UPDFMID        GET FMID\n         MVI   RECTYPE,C'Z'            INDICATE THIS IS AN APAR REC\n         B     RUAMOD2                 PROCESS THIS UPDATE RECORD\n*---------------------------------------------------------------------*\nRUAMOD2  MODCB RPL=ASAPRPL,OPTCD=(UPD) MODIFY ASAP RPL\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RUAGET                  YES,\n*\n         @ERROR RTNERR,RTNUPD3,UMA2,MA2  /UPDATE/MODCB/ASAPRPL/#2/\n*---------------------------------------------------------------------*\nRUAGET   TR    ASAPREC,TRTAB1          TRANSLATE ALL X'00' TO X'40'\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         GET   RPL=ASAPRPL             READ RECORD FROM ASAP DATABASE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RUUPD                   YES, EXISTING RECORD - GO UPD\n*\nRUAGERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RUAGF1                  YES,\n*\n         @ERROR RTNERR,RTNUPD3,USA2,SA2  /UPDATE/SHOWCB/ASAPRPL/#2/\n*\nRUAGF1   L     R4,FEEDBACK             SAVE FEEDBACK CODE\n         CLC   FEEDBACK,F16            WAS FEEDBACK A 16?\n         BE    RUADD                   YES, NEW RECORD - GO ADD\n*\n         @ERROR RTNERR,RTNUPD3,URAR,RA1  /UPDATE/GET/ASAPRPL/REGS/\n*---------------------------------------------------------------------*\nRUUPD    MVI   UPDACT,C'U'             INDICATE \"UPDATE\" PROCESS\n         CLI   RECTYPE,C'A'            IS THIS AN APAR RECORD?\n         BE    UPDAPAR                 YES,\n         CLI   RECTYPE,C'F'            IS THIS A FIX RECORD?\n         BE    UPDFIX                  YES,\n         CLI   RECTYPE,C'D'            IS THIS A PE DEL RECORD?\n         BE    UPDPEDEL                YES,\n         CLI   RECTYPE,C'Z'            IS THIS A ZE APAR RECORD?\n         BE    UPDZE                   YES,\n         B     UPDERR                  NEITHER TYPE - ERROR\n*\nUPDAPAR  CLI   ASAPPE,C'U'             HAS A PE BEEN ID'ED?\n         BE    UPDPE#                  YES, COMPARE PE NUMBERS\n         CLI   ASAPPE,C'*'             HAVE MULTI PE'S BEEN ID'ED?\n         BE    UPDHIPER                YES, GO COMPLETE UPDATE\n         MVC   ASAPPE,UPDFLDB          SET THE INITIAL PE NUMBER\n         B     UPDHIPER                GO COMPLETE UPDATE\nUPDPE#   CLC   ASAPPE,UPDFLDB          IS NEW PE SAME AS OLD PE?\n         BE    UPDHIPER                YES, GO COMPLETE UPDATE\n         MVC   ASAPPE,MULTI            NO, INDICATE MULTI PE'S\n         B     UPDHIPER                GO COMPLETE UPDATE\n*\nUPDFIX   CLI   ASAPPTF,C'U'            HAS A FIX BEEN ID'ED?\n         BE    UPDFIX#                 YES, COMPARE FIX NUMBERS\n         MVC   ASAPPTF,UPDFLDA         NO, SET THE INITIAL FIX NUMBER\n         B     UPDHIPER                GO COMPLETE UPDATE\nUPDFIX#  CLC   ASAPPTF,UPDFLDA         IS NEW FIX SAME AS OLD FIX?\n         BE    UPDHIPER                YES, GO COMPLETE UPDATE\n         MVC   ASAPPTF,MULTI           NO, INDICATE MULTI FIX'ES\n         B     UPDHIPER                GO COMPLETE UPDATE\n*\nUPDPEDEL CLC   ASAPPE,MULTI            ARE THERE MULTIPLE PE'S?\n         BE    RUBADPE                 YES,\n         CLC   ASAPPE,UPDFLDB          NO, DOES UPD PE MATCH ASAPDB?\n         BE    RUADEL                  YES, GO DELETE THIS RECORD\n         B     RUBADPE\n*\nUPDZE    MVI   ASAPZE,C'Z'             SET ZE APAR FLAG\n         B     UPDHIPER                GO COMPLETE UPDATE\n*\nUPDHIPER CLI   UPDTYPE,C'H'            IS THIS A HIPER RECORD?\n         BNE   UPDNOHIP                NO,\n         MVI   ASAPHIP,C'H'            YES, SET HIPER STATUS\nUPDNOHIP MVC   ASAPDATE,UPDDATE        GET DATE\n         @MVC  RLINEMSG,MSG020         GET MSG\n         AP    UPDCTR,P1               ADD 1 TO UPDATE COUNTER\n* ------------------------------------------------------------------ *\nUPDPUT   TR    ASAPREC,TRTAB1          TRANSLATE ALL X'00' TO X'40'\n*\n         CLI   CHECKRUN,C'Y'           IS THIS A CHECK RUN?\n         BE    RURREC                  YES,\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         PUT   RPL=ASAPRPL             WRITE RECORD TO ASAP DATABASE\n         LTR   R15,R15                 WAS PUT SUCCESSFUL?\n         BZ    RURREC                  YES,\n*\nRUAPERR1 LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RUAPF1                  YES,\n*\n         @ERROR RTNERR,RTNUPD3,USA3,SA3  /UPDATE/SHOWCB/ASAPRPL/#3/\n*\nRUAPF1   L     R4,FEEDBACK             SAVE FEEDBACK CODE\n*\n         @ERROR RTNERR,RTNUPD3,UWAR,WA1  /UPDATE/PUT/ASAPRPL/UPDATE/\n*---------------------------------------------------------------------*\nRUADD    MVI   UPDACT,C'A'             INDICATE \"ADD\" PROCESS\n         CLI   RECTYPE,C'A'            IS THIS AN APAR RECORD?\n         BE    ADDAPAR                 YES,\n         CLI   RECTYPE,C'F'            IS THIS A FIX RECORD?\n         BE    ADDFIX                  YES,\n         CLI   RECTYPE,C'D'            IS THIS A PE DEL RECORD?\n         BE    RUBADPE                 YES,\n         CLI   RECTYPE,C'Z'            IS THIS A ZE APAR RECORD?\n         BE    ADDZE                   YES,\n         B     UPDERR                  NEITHER TYPE - ERROR\n*\nADDAPAR  MVC   ASAPPE,UPDFLDB          YES, GET PE ID\n         B     ADDHIPER                GO COMPLETE ADD\n*\nADDFIX   MVC   ASAPPTF,UPDFLDA         YES, GET FIX ID\n         B     ADDHIPER                GO COMPLETE ADD\n*\nADDZE    MVI   ASAPZE,C'Z'             YES, GET ZE APAR ID\n         B     ADDHIPER                GO COMPLETE ADD\n*\nADDHIPER CLI   UPDTYPE,C'H'            IS THIS A HIPER RECORD?\n         BNE   ADDNOHIP                NO,\n         MVI   ASAPHIP,C'H'            YES, SET HIPER STATUS\nADDNOHIP MVC   ASAPPID,UPDPID          GET PID\n         MVC   ASAPDATE,UPDDATE        GET DATE\n         MVC   ASAPREL,UPDREL          GET RELEASE NUMBER\n         @MVC  RLINEMSG,MSG019         GET MSG\n         AP    ADDCTR,P1               ADD 1 TO UPDATE COUNTER\n* ------------------------------------------------------------------ *\nRUAMOD3  MODCB RPL=ASAPRPL,OPTCD=(NUP) MODIFY ASAP RPL\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    ADDPUT                  NO,\n*\n         @ERROR RTNERR,RTNUPD3,UMA3,MA3  /UPDATE/MODCB/ASAPRPL/#3/\n* ------------------------------------------------------------------ *\nADDPUT   TR    ASAPREC,TRTAB1          TRANSLATE ALL X'00' TO X'40'\n*\n         CLI   CHECKRUN,C'Y'           IS THIS A CHECK RUN?\n         BE    RURREC                  YES,\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         PUT   RPL=ASAPRPL             WRITE RECORD TO ASAP DB\n         LTR   R15,R15                 WAS PUT SUCCESSFUL?\n         BZ    RURREC                  YES,\n*\nRUAPERR2 LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RUAPF2                  YES,\n*\n         @ERROR RTNERR,RTNUPD3,USA4,SA4  /UPDATE/SHOWCB/ASAPRPL/#4/\n*\nRUAPF2   L     R4,FEEDBACK             SAVE FEEDBACK CODE\n*\n         @ERROR RTNERR,RTNUPD3,UWAR,WA2  /UPDATE/PUT/ASAPRPL/REGS/\n* ------------------------------------------------------------------ *\nRUADEL   CLI   CHECKRUN,C'Y'           IS THIS A CHECK RUN?\n         BE    RUERASED                YES,\n*\n         XR    R3,R3\n         XR    R4,R4\n*\n         ERASE RPL=ASAPRPL\n         LTR   R15,R15\n         BZ    RUERASED\n*\nRUAEERR  LR    R3,R15\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15\n         BZ    RUAEF1\n*\n         @ERROR RTNERR,RTNUPD3,USA5,SA5\n*\nRUAEF1   L     R4,FEEDBACK\n*\n         @ERROR RTNERR,RTNUPD3,UDAR,EA\n* ------------------------------------------------------------------ *\nRUERASED @MVC  RLINEMSG,MSG021\n         AP    DELCTR,P1\n         B     RURREC\n* ------------------------------------------------------------------ *\nRURREC   MVC   RPTAPAR,ASAPAPAR        GET APAR NUMBER\n         MVC   RPTFMID,ASAPFMID        GET FMID\n         MVC   RPTPTF,ASAPPTF          GET FIXING PTF NUMBER\n         MVC   RPTPE,ASAPPE            GET PE PTF NUMBER\n         MVC   RPTREL,ASAPREL          GET RELEASE NUMBER\n         MVC   RPTPID,ASAPPID          GET PRODUCT IDENTIFIER\n         MVC   RPTDATE,ASAPDATE        GET DATE\n         MVC   RPTZE,ASAPZE            GET ZE APAR FLAG\n         MVI   RPTHIP,C' '             SET HIPER STATUS\n         CLI   ASAPHIP,C'H'            IS THE APAR HIPER?\n         BNE   RURREC@                 NO,\n         MVI   RPTHIP,C'H'             YES, RESET HIPER STATUS\nRURREC@  EQU   *\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         B     RUUGET                  GET NEXT UPDATE RECORD\n*---------------------------------------------------------------------*\nUPDERR   @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         MVC   MSG000+3(80),MSG905     GET MSG\n         CLI   UPDACT,C'U'             IS THIS AN UPDATE REQUEST?\n         BNE   UPDERR11                NO, MUST BE AN ADD REQUEST\n         MVC   MSG000+44(15),=CL15'ROUTINE: UPDATE'\n         B     UPDERRB                 *\nUPDERR11 MVC   MSG000+44(15),=CL15'ROUTINE: ADD   '\nUPDERRB  @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RUUGET                  GET NEXT UPDATE RECORD\n* ------------------------------------------------------------------ *\nRUBADPE  @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         @MVC  MSG000A,MSG907          GET MSG\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RUUGET\n* ------------------------------------------------------------------ *\nRTNUPD@  @FILL AREA=MSG000,CHAR=40     CLEAR OUTPUT RECORD\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         @FILL AREA=RPTLINE,CHAR=40    CLEAR REPORT RECORD\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n*\n         OI    TRNCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG102          GET MSG\n         UNPK  MSG000A+9(5),TRNCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         OI    ADDCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG103          GET MSG\n         UNPK  MSG000A+9(5),ADDCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         OI    UPDCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG104          GET MSG\n         UNPK  MSG000A+9(5),UPDCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         OI    DELCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG105          GET MSG\n         UNPK  MSG000A+9(5),DELCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         @FILL AREA=MSG000,CHAR=40     CLEAR OUTPUT RECORD\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n* ------------------------------------------------------------------ *\nRTNUPD3  CLOSE (ASAPUPD)               CLOSE ASAPRPT DATASET\n* ------------------------------------------------------------------ *\nRTNUPD2  CLOSE ASAPACB                 CLOSE ASAP DATABASE\n* ------------------------------------------------------------------ *\nRTNUPD1  CLOSE (ASAPRPT)               CLOSE ASAPRPT DATASET\n* ------------------------------------------------------------------ *\nRTNUPD0  L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n*---------------------------------------------------------------------*\n         DROP  R2                      *\n         DROP  R9                      *\n         DROP  R10                     *\n         DROP  R11                     *\n         DROP  R12                     *\n*\n         LTORG                         IEBASAPA\n*\nLENUPD   EQU   *-RTNUPD\n*---------------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEBASAPB": {"ttr": 1537, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------ *\nRTNLIST  SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNLIST,R12,R11         EST ROUTINE ADDRESSABILITY\n         LR    R11,R12\n         A     R11,RLF4096\n*\n         LA    R2,72(R13)              LOAD ADDR OF SAVEAREA #2\n         ST    R13,4(R2)               SAVE ADDR OF SAVEAREA #1 IN\n*                                      SAVEAREA #2\n         ST    R2,8(R13)               SAVE ADDR OF SAVEAREA #2 IN\n*                                      SAVEAREA #1\n         LR    R13,R2                  LOAD ADDR OF SAVEAREA #2 IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n*\n         B     RLROPN                  *\n*\nRLF4096  DC    F'4096'                 *\n* ------------------------------------------------------------------ *\nRLROPN   OPEN  (ASAPRPT,OUTPUT)        OPEN REPORT DATASET\n         LA    R6,ASAPRPT              LOAD ADDR OF DCB\n         USING IHADCB,R6               *\n         TM    DCBOFLGS,X'10'          WAS DD STATEMENT MISSING?\n         BNZ   RLAOPN                  NO,\n*\nRLROERR  EQU   *\n         @ERROR RTNERR,RTNLIST0,LOR,OR   /LIST/OPEN/ASAPRPT//\n*\n         DROP  R6\n* ------------------------------------------------------------------ *\nRLAOPN   XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         OPEN  (ASAPACB)               OPEN ASAP DATABASE\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RLAMOD1                 YES, RETURN TO CALLER\n*\nRLAOERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB ACB=ASAPACB,AREA=ERROR,LENGTH=4,FIELDS=(ERROR)\n         LTR   R15,R15                 WAS SHOWACB SUCCESSFUL?\n         BZ    RLAOF1                  YES,\n*\n         @ERROR RTNERR,RTNLIST1,LSA1,SA1 /LIST/SHOWCB/ASAPDB/#1/\n*\nRLAOF1   L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RTNLIST1,LOAR,OA  /LIST/OPEN/ASAPDB/REGS/\n* ------------------------------------------------------------------ *\nRLAMOD1  MODCB RPL=ASAPRPL,OPTCD=(SEQ)  MODIFY ASAP RPL\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RLAPNT                  YES,\n*\n         @ERROR RTNERR,RTNLIST2,LMA1,MA1 /LIST/MODCB/ASAPRPL/#1/\n* ------------------------------------------------------------------ *\nRLAPNT   @FILL AREA=ASAPKEY,CHAR=40    BLANK RECORD KEY, PRIME REC\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         POINT RPL=ASAPRPL             POSITION TO PRIME RECORD\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RLHDR                   YES,\n*\nRLAPERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RLAPF1                  YES,\n*\n         @ERROR RTNERR,RTNLIST2,LSA,SA   /LIST/SHOWCB/ASAPRPL//\n*\nRLAPF1   L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RTNLIST2,LPAR,PA  /LIST/POINT/ASAPRPL/REGS/\n* ------------------------------------------------------------------ *\nRLHDR    ZAP   RPAGCTR,P0              ZERO ASAPRPT PAGE COUNTER\n         ZAP   RLINCTR,P0              ZERO ASAPRPT LINE COUNTER\n         ZAP   RECCTR,P0               ZERO RECORDS IN DB COUNTER\n*\nRLHDR3   @FILL AREA=HDR3DATA,CHAR=40   CLEAR HEADER WORK AREA\n         LA    R6,HDR3FUNC             LOAD ADDR COMMAND DESCRIPTION\n         MVC   0(5,R6),LIST            INDICATE LIST COMMAND\n         LA    R6,5(,R6)               POINT PAST LITERAL\n         CLI   CHECKFMD,C'Y'           WAS FMID SPECIFIED?\n         BNE   RLHDR3A                 NO,\n         MVC   0(5,R6),=CL5'FMID('     INDICATE FMID RESTRICTION\n         LA    R6,5(,R6)               POINT PAST LITERAL\n         MVC   0(7,R6),CNTLFMID        MOVE IN FMID\n         LA    R6,7(,R6)               POINT PAST FMID\n         MVI   0(R6),C')'              COMPLETE LITERAL\n         LA    R6,2(,R6)               POINT PAST LITERAL\n         B     RLHDR3B                 *\nRLHDR3A  CLI   CHECKFMG,C'Y'           WAS FMID GROUP SPECIFIED?\n         BNE   RLHDR3B                 NO,\n         MVC   0(8,R6),=CL8'FMIDGRP('  INDICATE FMIDGRP RESTRICTION\n         LA    R6,8(,R6)               POINT PAST LITERAL\n         MVC   0(2,R6),FMIDGRP         MOVE IN FMID GROUP\n         LA    R6,2(,R6)               POINT PAST FMID GROUP\n         MVI   0(R6),C')'              COMPLETE LITERAL\n         LA    R6,2(,R6)               POINT PAST LITERAL\nRLHDR3B  MVC   0(10,R6),PROCESS        COMPLETE HDR3\n*\n         @FILL AREA=HDR1MSG,CHAR=40    COMPLETE HDR1\n*\n         MVC   HDR2MSG,GENHDR2         COMPLETE HDR2\n*\n         @CALL RTNRHDR                 WRITE INITIAL REPORT HEADERS\n* ------------------------------------------------------------------ *\nRLAGET   @FILL AREA=ASAPREC,CHAR=40    BLANK ASAP RECORD\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         GET   RPL=ASAPRPL             READ RECORD FROM ASAP DB\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RLCKPRIM                YES,\n*\nRLAGERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RLAGF1                  YES,\n*\n         @ERROR RTNERR,RTNLIST2,LSA2,SA2 /LIST/SHOWCB/ASAPRPL/#2/\n*\nRLAGF1   L     R4,FEEDBACK             SAVE FEEDBACK CODE\n         CLC   FEEDBACK,F4             WAS FEEDBACK A 4?\n         BE    RTNLIST@                YES, END OF FILE\n*\n         @ERROR RTNERR,RTNLIST2,LRAR,RA1 /LIST/GET/ASAPRPL/REGS/\n* ------------------------------------------------------------------ *\nRLCKPRIM CLC   ASAPKEY,BLANKS          IS THIS THE PRIME RECORD?\n         BE    RLAGET                  YES, GET NEXT RECORD\n* ------------------------------------------------------------------ *\nRLCKFMID CLI   CHECKFMD,C'Y'           ARE WE DOING LIST FMID?\n         BNE   RLCKFGRP                NO,\n         CLC   ASAPFMID,CNTLFMID       YES, DOES FMID MATCH?\n         BNE   RLAGET                  NO, GET NEXT RECORD\n         B     RLRREC                  YES, PRINT RECORD\n*\nRLCKFGRP CLI   CHECKFMG,C'Y'           ARE WE DOING LIST FMIDGRP?\n         BNE   RLRREC                  NO,\n         CLC   FMIDGRP,ASAPFMID+1      YES, DOES FMIDGRP MATCH?\n         BNE   RLAGET                  NO, GET NEXT RECORD\n         B     RLRREC                  YES, PRINT REOCRD\n* ------------------------------------------------------------------ *\nRLRREC   MVC   RPTAPAR,ASAPAPAR        GET APAR NUMBER\n         MVC   RPTFMID,ASAPFMID        GET FMID\n         MVC   RPTPTF,ASAPPTF          GET FIXING PTF NUMBER\n         MVC   RPTPE,ASAPPE            GET PE PTF NUMBER\n         MVC   RPTPID,ASAPPID          GET PRODUCT IDENTIFIER\n         MVC   RPTREL,ASAPREL          GET RELEASE NUMBER\n         MVC   RPTDATE,ASAPDATE        GET DATE\n         MVC   RPTHIP,ASAPHIP          SET HIPER STATUS\n         MVC   RPTZE,ASAPZE            SET ZE APAR STATUS\nRLRREC@  EQU   *\n*\nRLRREC1  @FILL AREA=RLINEMSG,CHAR=40   CLEAR REPORT LINE MESSAGE\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         AP    RECCTR,P1               ADD 1 TO RECORD COUNTER\n         B     RLAGET                  NO, READ NEXT RECORD FROM DB\n* ------------------------------------------------------------------ *\nRTNLIST@ @FILL AREA=MSG000,CHAR=40     CLEAR OUTPUT RECORD\n         @FILL AREA=RPTLINE,CHAR=40    CLEAR REPORT RECORD\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n*\n         OI    RECCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG101          GET MSG\n         UNPK  MSG000A+9(5),RECCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         @FILL AREA=MSG000,CHAR=40     CLEAR OUTPUT AREA\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n* ------------------------------------------------------------------ *\nRTNLIST2 CLOSE ASAPACB                 CLOSE ASAP DATABASE\n* ------------------------------------------------------------------ *\nRTNLIST1 CLOSE (ASAPRPT)               CLOSE REPORT DATASET\n* ------------------------------------------------------------------ *\nRTNLIST0 L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n* ------------------------------------------------------------------ *\n         DROP  R9                      *\n         DROP  R10                     *\n         DROP  R11                     *\n         DROP  R12                     *\n*\n         LTORG                         IEBASAPB\n*\nLENLIST  EQU   *-RTNLIST\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPC": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x91\\x11?\\x00\\x91\\x11O\\x16W\\x01\\xb8\\x01\\xaa\\x00\\x00|\\xc4\\xe5\\xc7\\xc6\\xf0\\xf9@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1991-04-23T00:00:00", "modifydate": "1991-04-24T16:57:00", "lines": 440, "newlines": 426, "modlines": 0, "user": "@DVGF09"}, "text": "* ------------------------------------------------------------------ *\nRTNXREF  SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNXREF,R12,R11         EST ROUTINE ADDRESSABILITY\n         LR    R11,R12                 *\n         A     R11,RXF4096             *\n*\n         LA    R2,72(R13)              LOAD ADDR OF SAVEAREA #2\n         ST    R13,4(R2)               SAVE ADDR OF SAVEAREA #1 IN\n*                                      SAVEAREA #2\n         ST    R2,8(R13)               SAVE ADDR OF SAVEAREA #2 IN\n*                                      SAVEAREA #1\n         LR    R13,R2                  LOAD ADDR OF SAVEAREA #2 IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n*\n         B     RXROPN                  *\n*\nRXF4096  DC    F'4096'                 *\n* ------------------------------------------------------------------ *\nRXROPN   OPEN  (ASAPRPT,OUTPUT)        OPEN REPORT DATASET\n         LA    R6,ASAPRPT              LOAD ADDR OF DCB\n         USING IHADCB,R6               *\n         TM    DCBOFLGS,X'10'          WAS DD STATEMENT MISSING?\n         BNZ   RXAOPN                  NO,\n*\nRXROERR  EQU   *\n         @ERROR RTNERR,RTNXREF0,XOR,OR   /XREF/OPEN/ASAPRPT//\n*\n         DROP  R6\n* ------------------------------------------------------------------ *\nRXAOPN   XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         OPEN  (ASAPACB)               OPEN ASAP DATABASE\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RXAMOD1                 YES, RETURN TO CALLER\n*\nRXAOERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB ACB=ASAPACB,AREA=ERROR,LENGTH=4,FIELDS=(ERROR)\n         LTR   R15,R15                 WAS SHOWACB SUCCESSFUL?\n         BZ    RXAOF1                  YES,\n*\n         @ERROR RTNERR,RTNXREF1,XSA1,SA1 /XREF/SHOWCB/ASAPDB/#1/\n*\nRXAOF1   L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RTNXREF1,XOAR,OA  /XREF/OPEN/ASAPDB/REGS/\n* ------------------------------------------------------------------ *\nRXAMOD1  MODCB RPL=ASAPRPL,OPTCD=(SEQ,UPD)\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RXAPNT                  YES,\n*\n         @ERROR RTNERR,RTNXREF2,XMA1,MA1 /XREF/MODCB/ASAPRPL/#1/\n* ------------------------------------------------------------------ *\nRXAPNT   @FILL AREA=ASAPKEY,CHAR=40    BLANK RECORD KEY, PRIME REC\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         POINT RPL=ASAPRPL             POSITION TO PRIME RECORD\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RXGBL                   YES,\n*\nRXAPERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RXAPF1                  YES,\n*\n         @ERROR RTNERR,RTNXREF2,XSA,SA   /XREF/SHOWCB/ASAPRPL//\n*\nRXAPF1   L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RTNXREF2,XPAR,PA  /XREF/POINT/ASAPRPL/REGS/\n* ------------------------------------------------------------------ *\nRXGBL    @CALL RTNGBL                  GLOBAL ZONE/CSI ROUTINE\n*\n         C     R15,F0                  GLOBAL ZONE/CSI ACQUIRED?\n         BE    RXZONE                  YES,\n         C     R15,F4                  GLOBAL ZONE/CSI NOT ACQUIRED?\n         BE    RTNXREF2                YES,\n*\n         ABEND 122,DUMP                IMPOSSIBLE ERROR, LARGE ROACH\n* ------------------------------------------------------------------ *\nRXZONE   @CALL RTNZONE                 REQUESTED ZONE/CSI ROUTINE\n*\n         C     R15,F0                  REQUESTED ZONE/CSI ACQUIRED?\n         BE    RXHDR                   YES,\n         C     R15,F4                  REQUESTED ZONE/CSI NOT ACQUIRED?\n         BE    RTNXREF3                YES,\n*\n         ABEND 122,DUMP                IMPOSSIBLE ERROR, LARGE ROACH\n* ------------------------------------------------------------------ *\nRXHDR    ZAP   RPAGCTR,P0              ZERO REPORT PAGE COUNTER\n         ZAP   RLINCTR,P0              ZERO REPORT LINE COUNTER\n         ZAP   RECCTR,P0               ZERO RECORDS IN DB COUNTER\n         ZAP   DELCTR,P0               ZERO DELETED RECORDS COUNTER\n*\nRXHDR3   @FILL AREA=HDR3DATA,CHAR=40   CLEAR HEADER WORK AREA\n         LA    R6,HDR3FUNC             LOAD ADDR COMMAND DESCRIPTION\n         MVC   0(5,R6),XREF            INDICATE XREF COMMAND\n         LA    R6,5(,R6)               POINT PAST LITERAL\n         MVC   0(5,R6),=CL5'ZONE('     INDICATE ZONE\n         LA    R6,5(,R6)               POINT PAST LITERAL\n         MVC   0(7,R6),CNTLZONE        MOVE IN ZONE NAME\n         LA    R6,7(,R6)               POINT PAST ZONE NAME\n         MVI   0(R6),C')'              COMPLETE LITERAL\n         LA    R6,2(,R6)               POINT PAST LITERAL\n         CLI   CLEANRUN,C'Y'           IS THIS A CLEANUP RUN?\n         BNE   RXHDR3A                 NO,\n         MVC   0(8,R6),CLEANUP         INDICATE CLEANUP RUN\n         LA    R6,8(,R6)               POINT PAST LITERAL\nRXHDR3A  CLI   CHECKRUN,C'Y'           IS THIS A CHECK RUN?\n         BNE   RXHDR3B                 NO,\n         MVC   0(6,R6),CHECK           INDICATE CHECK RUN\n         LA    R6,6(,R6)               POINT PAST LITERAL\nRXHDR3B  MVC   0(10,R6),PROCESS        COMPLETE HDR3\n*\nRXHDR3C  XR    R8,R8                   *\n         LA    R6,P02DATA              LOAD ADDR OF DYNAM DATASET\nRXHDR3D  A     R8,F1                   ADD 1 TO COUNTER\n         CLI   0(R6),C' '              IS THIS POSITION A BLANK?\n         BE    RXHDR3E                 YES, END OF DSN\n         CLI   0(R6),X'00'             IS THIS POSITION A NULL?\n         BE    RXHDR3E                 YES, END OF DSN\n         C     R8,F44                  HAVE WE CHECKED 44 POSITIONS?\n         BE    RXHDR3Z                 YES, DSN ERROR\n         LA    R6,1(,R6)               POINT TO NEXT POSITION\n         B     RXHDR3D                 CHECK NEXT POSITION\nRXHDR3E  L     R7,F44                  LOAD MAX DSN LENGTH\n         SR    R7,R8                   SUB CURRENT DSN LENGTH\n         LA    R6,HDR3DSN              LOAD ADDR OF DSN OUTPUT AREA\n         AR    R6,R7                   ADD OFFSET INTO OUTPUT AREA\n         EX    R8,MOVEDSN              MOVE IN DSN\n         MVI   HDR3DSN+44,C'/'         MOVE IN SEPARATOR\n         MVC   HDR3VOL,P07DATA         MOVE IN VOLSER FOR CSI\n         B     RXHDR1                  *\n*\nMOVEDSN  MVC   0(0,R6),P02DATA         MOVE DSN TO OUTPUT AREA\n*\nRXHDR3Z  @ERROR RTNERR,RXHDR1,XHR,HDR3   /XREF/?/ASAPRPT/?/\n*\nRXHDR1   MVC   HDR1MSG,GENHDR1         COMPLETE HDR1\n*\nRXHDR2   MVC   HDR2MSG,GENHDR2         COMPLETE HDR2\n*\n         @CALL RTNRHDR                 WRITE INITIAL REPORT HEADERS\n* ------------------------------------------------------------------ *\nRXAGET   @FILL AREA=ASAPREC,CHAR=40    *\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         GET   RPL=ASAPRPL             READ RECORD FROM ASAP DATABASE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RXCKPRIM                YES,\n*\nRXAGERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RXAGF1                  YES,\n*\n         @ERROR RTNERR,RTNXREF4,XSA2,SA1 /XREF/SHOWCB/ASAPRPL/#2/\n*\nRXAGF1   L     R4,FEEDBACK             SAVE FEEDBACK CODE\n         CLC   FEEDBACK,F4             WAS FEEDBACK A 4?\n         BE    RTNXREF@                YES, END OF FILE\n*\n         @ERROR RTNERR,RTNXREF4,XRAR,RA1 /XREF/GET/ASAPRPL/REGS/\n*\nRXCKPRIM CLC   ASAPKEY,BLANKS          IS ASAPKEY BLANK?\n         BE    RXAGET                  YES, GET NEXT ASAP RECORD\n* ------------------------------------------------------------------ *\n         AP    RECCTR,P1               ADD 1 TO RECORD COUNTER\n* ------------------------------------------------------------------ *\n         @FILL AREA=ZONEREC,CHAR=00    CLEAR ZONE RECORD\n         MVC   ZZONEID,ZONEID          INSERT ZONEID\n         MVC   ZRTYP,=XL2'6F00'        INSERT RECORD TYPE\n         MVC   ZRSUBTYP,=XL2'0100'     INSERT RECORD SUBTYPE\n         MVC   ZSEQNO,=XL2'0000'       INSERT SEQUENCE NUMBER\n* ------------------------------------------------------------------ *\nRXCKFMD  MVC   ZKEYDATA(7),ASAPFMID      INSERT RECORD NAME\n         MVI   ZKEYDATA+7,C' '\n         MVC   ZDATA(7),ASAPFMID       INSERT FMID\n         MVI   ZDATA+7,C' '\n*\n         @CALL RTNRDZ                  CALL REQZONE READ ROUTINE\n*\n         C     R15,F0                  RECORD FOUND?\n         BE    RXRREC                  YES,\n         C     R15,F4                  RECORD NOT FOUND?\n         BE    RXAGET                  YES,\n*\n         @ERROR RTNERR,RTNXREF4,XRZ,CFMD\n* ------------------------------------------------------------------ *\nRXRREC   MVC   RPTAPAR,ASAPAPAR        GET APAR NUMBER\n         MVC   RPTFMID,ASAPFMID        GET FMID\n         MVC   RPTPTF,ASAPPTF          GET FIXING PTF NUMBER\n         MVC   RPTPE,ASAPPE            GET PE PTF NUMBER\n         MVC   RPTPID,ASAPPID          GET PRODUCT IDENTIFIER\n         MVC   RPTDATE,ASAPDATE        GET DATE\n         MVC   RPTHIP,ASAPHIP          SET HIPER STATUS\n         MVC   RPTZE,ASAPZE            SET ZE APAR STATUS\n* ------------------------------------------------------------------ *\nRXCKNFMP CLC   ASAPPTF,BLANKS          NO FIX\n         BNE   RXCKNFNP                NO,\n         CLC   ASAPPE,MULTI            AND MULTIPLE PE\n         BNE   RXCKNFNP                NO,\n*\n         @MVC  RLINEMSG,MSG030         YES,\n         @CALL RTNRLIN                 *\n         B     RXCKSUP                 *\n* ------------------------------------------------------------------ *\nRXCKNFNP CLC   ASAPPTF,BLANKS          NO FIX\n         BNE   RXCKPE                  NO,\n         CLC   ASAPPE,BLANKS           AND MULTIPLE PE\n         BNE   RXCKPE                  NO,\n*\n         @MVC  RLINEMSG,MSG031         YES,\n         @CALL RTNRLIN                 *\n         B     RXCKSUP                 *\n* ------------------------------------------------------------------ *\nRXCKPE   CLC   ASAPPE,BLANKS           IS THERE A PE IDENTIFIED?\n         BE    RXCKFIX                 NO,\n         CLC   ASAPPE,MULTI            ARE THERE MULTIPLE PE?\n         BE    RXCKFIX                 YES,\n*\n         @FILL AREA=ZDATA,CHAR=00      CLEAR ZONE RECORD DATA\n         MVC   ZKEYDATA(7),ASAPPE      USE PE FOR ZONE KEYNAME\n         MVI   ZKEYDATA+7,C' '\n         MVC   ZDATA(7),ASAPPE         USE PE FOR ZONE RECDATA\n         MVI   ZDATA+7,C' '\n*\n         @CALL RTNRDZ                  CALL REQZONE READ ROUTINE\n*\n         C     R15,F0                  RECORD FOUND?\n         BE    RXYESPE                 YES,\n         C     R15,F4                  RECORD NOT FOUND?\n         BE    RXNOPE                  YES,\n*\n         @ERROR RTNERR,RTNXREF4,XRZ,CPE\n*\nRXYESPE  @MVC  RLINEMSG,MSG022         PE INSTALLED\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         B     RXCKFIX                 *\n*\nRXNOPE   @MVC  RLINEMSG,MSG023         PE NOT INSTALLED\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         B     RXCKFIX                 *\n* ------------------------------------------------------------------ *\nRXCKFIX  CLC   ASAPPTF,BLANKS          IS THERE A FIX IDENTIFIED?\n         BE    RXCKSUP                 NO, CHECK FOR APAR FIX/SUP\n*\n         @FILL AREA=ZDATA,CHAR=00      CLEAR ZONE RECORD DATA\n         MVC   ZKEYDATA(7),ASAPPTF     USE FIX FOR ZONE KEYNAME\n         MVI   ZKEYDATA+7,C' '\n         MVC   ZDATA(7),ASAPPTF        USE FIX FOR ZONE REC DATA\n         MVI   ZDATA+7,C' '\n*\n         @CALL RTNRDZ                  CALL REQZONE READ ROUTINE\n*\n         C     R15,F0                  RECORD FOUND?\n         BE    RXYESFIX                YES,\n         C     R15,F4                  RECORD NOT FOUND?\n         BE    RXNOFIX                 YES,\n*\n         @ERROR RTNERR,RTNXREF4,XRZ,CFIX\n*\nRXYESFIX @MVC  RLINEMSG,MSG024         FIX INSTALLED\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         B     RXCKERAS\n*\nRXNOFIX  @MVC  RLINEMSG,MSG025         FIX NOT INSTALLED\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         B     RXCKSUP\n* ------------------------------------------------------------------ *\nRXCKSUP  @FILL AREA=ZDATA,CHAR=00      CLEAR ZONE RECORD DATA\n         MVC   ZKEYDATA(7),ASAPAPAR\n         MVI   ZKEYDATA+7,C' '\n         MVC   ZDATA(7),ASAPAPAR\n         MVI   ZDATA+7,C' '\n*\n         @CALL RTNRDZ                  CALL REQZONE READ ROUTINE\n*\n         C     R15,F0                  RECORD FOUND?\n         BE    RXZMOD2                 YES,\n         C     R15,F4                  RECORD NOT FOUND?\n         BE    RXCKGBL                 YES,\n*\n         @ERROR RTNERR,RTNXREF4,XRZ1,CSUP\n*\nRXZMOD2  MODCB RPL=ZONERPL,OPTCD=(GEN),KEYLEN=16\n         LTR   R15,R15\n         BZ    RXCKSUP3\n*\n         @ERROR RTNERR,RTNXREF4,XMZ2,MZ2\n*\nRXCKSUP3 MVC   ZKEYDATA(7),ASAPAPAR\n         MVC   ZRSUBTYP,=XL2'0170'\n*\n         @CALL RTNRDZ                  CALL REQZONE READ ROUTINE\n         ST    R15,@R15                SAVE REG15\n*\nRXZMOD3  MODCB RPL=ZONERPL,OPTCD=(FKS),KEYLEN=24\n         LTR   R15,R15\n         BZ    RXCKSUP4\n*\n         @ERROR RTNERR,RTNXREF4,XMZ3,MZ3\n*\nRXCKSUP4 L     R15,@R15\n         C     R15,F0                  IS THERE A SUPBY RECORD?\n         BE    RXYESSUP\n         C     R15,F4                  IS THERE NO SUPBY RECORD?\n         BE    RXNOSUP\n*\n         @ERROR RTNERR,RTNXREF4,XRZ2,CSUP\n*\nRXYESSUP MVC   MSG028+35(7),ZDATA      YES,\n         @MVC  RLINEMSG,MSG028\n         @CALL RTNRLIN\n         B     RXCKERAS\n*\nRXNOSUP  @MVC  RLINEMSG,MSG029         NO,\n         @CALL RTNRLIN\n* ------------------------------------------------------------------ *\nRXCKGBL  CLC   ASAPPTF,BLANKS          NO FIX IDE'ED?\n         BE    RXAGET                  YES,\n*\n         @FILL AREA=GBLREC,CHAR=00     CLEAR GLOBAL ZONE RECORD AREA\n*\n         MVC   GZONEID,=XL2'0000'      INSERT ZONEID\n         MVC   GRTYP,=XL2'6F00'        INSERT RECORD TYPE\n         MVC   GKEYDATA(7),ASAPPTF     INSERT RECORD NAME\n         MVI   GKEYDATA+7,C' '\n         MVC   GRSUBTYP,=XL2'0100'     INSERT RECORD SUB-TYPE\n         MVC   GSEQNO,=XL2'0000'       INSERT SEQUENCE NUMBER\n         MVC   GDATA(7),ASAPPTF        INSERT FIX NUMBER\n         MVI   GDATA+7,C' '\n*\n         @CALL RTNRDG                  READ GLOBAL ZONE ROUTINE\n*\n         C     R15,F0                  RECORD FOUND?\n         BE    RXYESGBL                YES,\n         C     R15,F4                  RECORD NOT FOUND?\n         BE    RXNOGBL                 YES,\n*\n         @ERROR RTNERR,RTNXREF4,XRG,CGBL\n*\nRXYESGBL @MVC  RLINEMSG,MSG026         FIX IS ONSITE\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         B     RXAGET                  GET NEXT ASAP RECORD\n*\nRXNOGBL  @MVC  RLINEMSG,MSG027         FIX IS NOT ONSITE\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         B     RXAGET                  GET NEXT ASAP RECORD\n* ------------------------------------------------------------------ *\nRXCKERAS CLI   CLEANRUN,C'Y'           IS THIS A CLEANUP RUN?\n         BNE   RXAGET                  NO, GET NEXT ASAP RECORD\n*\n         CLI   CHECKRUN,C'Y'           IS THIS A CHECK RUN?\n         BE    RXERASED                YES,\n*\nRXADEL   XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         ERASE RPL=ASAPRPL             DELETE REC FROM ASAP DATABASE\n         LTR   R15,R15                 WAS ERASE SUCCESSFUL?\n         BZ    RXERASED                YES,\n*\nRXAEERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RXAEF1                  NO,\n*\n         @ERROR RTNERR,RTNXREF4,XSA3,SA3 /XREF/SHOWCB/ASAPRPL/#3/\n*\nRXAEF1   L     R4,FEEDBACK             SAVE FEEDBACK CODE\n*\n         @ERROR RTNERR,RTNXREF4,XDAR,EA  /XREF/ERASE/ASAPRPL/REGS/\n*\nRXERASED @MVC  RLINEMSG,MSG021         YES, GET MESSAGE\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         AP    DELCTR,P1               ADD 1 TO DELETED COUNTER\n         B     RXAGET                  GET NEXT ASAP RECORD\n* ------------------------------------------------------------------ *\nRTNXREF@ @FILL AREA=MSG000,CHAR=40     CLEAR OUTPUT RECORD\n         @FILL AREA=RPTLINE,CHAR=40    CLEAR REPORT RECORD\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n*\n         OI    RECCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG101          GET MSG\n         UNPK  MSG000A+9(5),RECCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         OI    DELCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG105          GET MSG\n         UNPK  MSG000A+9(5),DELCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         @FILL AREA=MSG000,CHAR=40     CLEAR OUTPUT RECORD\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n* ------------------------------------------------------------------ *\nRTNXREF4 @CALL RTNZONE,ENTRY=4         REQUESTED ZONE/CSI ROUTINE\n*\n         C     R15,F0                  WAS RETURN CODE A 0?\n         BE    RTNXREF3                YES,\n         C     R15,F4                  WAS RETURN CODE A 4?\n         BE    RTNXREF3                YES,\n*\n         ABEND 122,DUMP                IMPOSSIBLE ERROR, LARGE ROACH\n* ------------------------------------------------------------------ *\nRTNXREF3 @CALL RTNGBL,ENTRY=4          GLOBAL ZONE/CSI ROUTINE\n*\n         C     R15,F0                  WAS RETURN CODE A 0?\n         BE    RTNXREF2                YES,\n         C     R15,F4                  WAS RETURN CODE A 4?\n         BE    RTNXREF2                YES,\n*\n         ABEND 122,DUMP                IMPOSSIBLE ERROR, LARGE ROACH\n* ------------------------------------------------------------------ *\nRTNXREF2 CLOSE ASAPACB                 CLOSE ASAP DATABASE\n* ------------------------------------------------------------------ *\nRTNXREF1 CLOSE (ASAPRPT)               CLOSE ASAPRPT DATASET\n* ------------------------------------------------------------------ *\nRTNXREF0 L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n* ------------------------------------------------------------------ *\n         DROP  R9                      *\n         DROP  R10                     *\n         DROP  R11                     *\n         DROP  R12                     *\n*\n         LTORG                         IEBASAPC\n*\nLENXREF  EQU   *-RTNXREF\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPD": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11?\\x00\\x91\\x11?\\x18F\\x00\\xe9\\x00\\xe9\\x00\\x00|\\xc4\\xe5\\xc7\\xc6\\xf0\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-23T00:00:00", "modifydate": "1991-04-23T18:46:00", "lines": 233, "newlines": 233, "modlines": 0, "user": "@DVGF09"}, "text": "* ------------------------------------------------------------------ *\nRTNCLN   SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNCLN,R12,R11          EST ROUTINE ADDRESSABILITY\n         LR    R11,R12\n         A     R11,RCF4096\n*\n         LA    R2,72(R13)              LOAD ADDR OF SAVEAREA #2\n         ST    R13,4(R2)               SAVE ADDR OF SAVEAREA #1 IN\n*                                      SAVEAREA #2\n         ST    R2,8(R13)               SAVE ADDR OF SAVEAREA #2 IN\n*                                      SAVEAREA #1\n         LR    R13,R2                  LOAD ADDR OF SAVEAREA #2 IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n*\n         B     RCROPN                  *\n*\nRCF4096  DC    F'4096'                 *\n* ------------------------------------------------------------------ *\nRCROPN   OPEN  (ASAPRPT,OUTPUT)        OPEN REPORT DATASET\n         LA    R6,ASAPRPT              LOAD ADDR OF DCB\n         USING IHADCB,R6               *\n         TM    DCBOFLGS,X'10'          WAS DD STATEMENT MISSING?\n         BNZ   RCAOPN                  NO,\n*\nRCROERR  EQU   *\n         @ERROR RTNERR,RTNCLN0,COR,OR    /CLEANUP/OPEN/ASAPRPT//\n*\n         DROP  R6\n* ------------------------------------------------------------------ *\nRCAOPN   XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         OPEN  (ASAPACB)               OPEN ASAP DATABASE\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RCAMOD1                 YES, RETURN TO CALLER\n*\nRCAOERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB ACB=ASAPACB,AREA=ERROR,LENGTH=4,FIELDS=(ERROR)\n         LTR   R15,R15                 WAS SHOWACB SUCCESSFUL?\n         BZ    RCAOF1                  YES,\n*\n         @ERROR RTNERR,RTNCLN1,CSA1,SA1  /CLEANUP/SHOWCB/ASAPDB/#1/\n*\nRCAOF1   L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RTNCLN1,COAR,OA   /CLEANUP/OPEN/ASAPDB/REGS/\n* ------------------------------------------------------------------ *\nRCAMOD1  MODCB RPL=ASAPRPL,OPTCD=(SEQ,UPD)  MODIFY ASAP RPL\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RCAPNT                  YES,\n*\n         @ERROR RTNERR,RTNCLN2,CMA1,MA1  /CLEANUP/MODCB/ASAPRPL/#1/\n* ------------------------------------------------------------------ *\nRCAPNT   @FILL AREA=ASAPKEY,CHAR=40    BLANK RECORD KEY, PRIME REC\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         POINT RPL=ASAPRPL             POSITION TO PRIME RECORD\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RCGBL                   YES,\n*\nRCAPERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RCAPF1                  YES,\n*\n         @ERROR RTNERR,RTNCLN2,CSA,SA   /CLEANUP/SHOWCB/ASAPRPL//\n*\nRCAPF1   L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RTNCLN2,CPAR,PA  /CLEANUP/POINT/ASAPRPL/REGS/\n* ------------------------------------------------------------------ *\nRCGBL    @CALL RTNGBL                  GLOBAL ZONE/CSI ROUTINE\n*\n         C     R15,F0                  WAS RETURN CODE A 0?\n         BE    RCHDR                   YES,\n         C     R15,F4                  WAS RETURN CODE A 4?\n         BE    RTNCLN2                 YES,\n*\n         ABEND 122,DUMP                IMPOSSIBLE ERROR, LARGE ROACH\n* ------------------------------------------------------------------ *\nRCHDR    ZAP   RPAGCTR,P0              ZERO REPORT PAGE COUNTER\n         ZAP   RLINCTR,P0              ZERO REPORT LINE COUNTER\n         ZAP   RECCTR,P0               ZERO RECORDS IN DB COUNTER\n         ZAP   DELCTR,P0               ZERO DELETED RECORDS COUNTER\n*\nRCHDR3   @FILL AREA=HDR3DATA,CHAR=40   CLEAR HEADER WORK AREA\n         LA    R6,HDR3FUNC             LOAD ADDR COMMAND DESCRIPTION\n         MVC   0(8,R6),CLEANUP         INDICATE CLEANUP COMMAND\n         LA    R6,8(,R6)               POINT PAST LITERAL\n         CLI   CHECKRUN,C'Y'           IS THIS A CHECK RUN?\n         BNE   RCHDR3A                 NO,\n         MVC   0(6,R6),CHECK           INDICATE CHECK RUN\n         LA    R6,6(,R6)               POINT PAST LITERAL\nRCHDR3A  MVC   0(10,R6),PROCESS        COMPLETE HDR3\n*\nRCHDR1   MVC   HDR1MSG,GENHDR1         COMPLETE HDR1\n*\nRCHDR2   MVC   HDR2MSG,GENHDR2         COMPLETE HDR2\n*\n         @CALL RTNRHDR                 WRITE INITIAL REPORT HEADERS\n* ------------------------------------------------------------------ *\nRCAGET   @FILL AREA=ASAPREC,CHAR=40    CLEAR ASAP RECORD AREA\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         GET   RPL=ASAPRPL             READ RECORD FROM ASAP DATABASE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RCCKPRIM                YES,\n*\nRCAGERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RCAGF1                  NO,\n*\n         @ERROR RTNERR,RTNCLN3,CSA2,SA2  /CLEANUP/SHOWCB/ASAPRPL/#2/\n*\nRCAGF1   L     R4,FEEDBACK             SAVE FEEDBACK CODE\n         CLC   FEEDBACK,F4             WAS FEEDBACK A 4?\n         BE    RTNCLN@                 YES, END OF FILE\n*\n         @ERROR RTNERR,RTNCLN3,CRAR,RA1  /CLEANUP/GET/ASAPRPL/REGS/\n* ------------------------------------------------------------------ *\nRCCKPRIM CLC   ASAPKEY,BLANKS          IS THIS THE PRIME RECORD?\n         BE    RCAGET                  YES, GET NEXT RECORD\n         AP    RECCTR,P1               ADD 1 TO RECORD COUNTER\n* ------------------------------------------------------------------ *\nRCGGET2  @FILL AREA=GBLREC,CHAR=00     CLEAR GLOBAL ZONE RECORD AREA\n*\n         MVC   GZONEID,=XL2'0000'      INSERT ZONEID\n         MVC   GRTYP,=XL2'0300'        INSERT RECORD TYPE\n         MVC   GKEYDATA,GLOBAL         INSERT RECORD NAME\n         MVC   GRSUBTYP,=XL2'2030'     INSERT RECORD SUB-TYPE\n         MVC   GSEQNO,=XL2'0000'       INSERT SEQUENCE NUMBER\n         MVC   GDATA(7),ASAPFMID       INSERT FMID\n         MVI   GDATA+7,C' '\n*\n         @CALL RTNRDG                  READ GLOBAL ZONE ROUTINE\n*\n         C     R15,F0                  RECORD FOUND?\n         BE    RCAGET                  YES,\n         C     R15,F4                  RECORD NOT FOUND?\n         BE    RCRREC                  YES,\n*\n         @ERROR RTNERR,RTNCLN3,CRG,CFMD\n* ------------------------------------------------------------------ *\nRCRREC   EQU   *\n         MVC   RPTAPAR,ASAPAPAR        GET APAR NUMBER\n         MVC   RPTFMID,ASAPFMID        GET FMID\n         MVC   RPTPTF,ASAPPTF          GET FIXING PTF NUMBER\n         MVC   RPTPE,ASAPPE            GET PE PTF NUMBER\n         MVC   RPTPID,ASAPPID          GET PRODUCT IDENTIFIER\n         MVC   RPTDATE,ASAPDATE        GET DATE\n         MVC   RPTHIP,ASAPHIP          SET HIPER STATUS\n         MVC   RPTZE,ASAPZE            SET ZER APAR STATUS\nRCRREC@  EQU   *                       *\n* ------------------------------------------------------------------ *\nRCADEL   CLI   CHECKRUN,C'Y'           IS THIS A CHECK RUN?\n         BE    RCERASED                YES,\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         ERASE RPL=ASAPRPL             DELETE REC FROM ASAP DATABASE\n         LTR   R15,R15                 WAS ERASE SUCCESSFUL?\n         BZ    RCERASED                YES,\n*\nRCAEERR  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ASAPRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RCAEF1                  NO,\n*\n         @ERROR RTNERR,RTNCLN3,CSA3,SA3  /CLEANUP/SHOWCB/ASAPRPL/#3/\n*\nRCAEF1   L     R4,FEEDBACK             SAVE FEEDBACK CODE\n*\n         @ERROR RTNERR,RTNCLN3,CDAR,EA   /CLEANUP/ERASE/ASAPRPL/REGS/\n* ------------------------------------------------------------------ *\nRCERASED @MVC  RLINEMSG,MSG021         COMPLETE REPORT RECORD\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n         AP    DELCTR,P1               ADD 1 TO DELETED COUNTER\n         B     RCAGET                  GO READ NEXT RECORD FROM DB\n* ------------------------------------------------------------------ *\nRTNCLN@  @FILL AREA=MSG000,CHAR=40     CLEAR OUTPUT RECORD\n         @FILL AREA=RPTLINE,CHAR=40    CLEAR REPORT RECORD\n         @CALL RTNRLIN                 WRITE RECORD TO ASAPRPT\n*\n         OI    RECCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG101          GET MSG\n         UNPK  MSG000A+9(5),RECCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         OI    DELCTR+2,X'0F'          FORCE TO NUMERIC\n         @MVC  MSG000A,MSG105          GET MSG\n         UNPK  MSG000A+9(5),DELCTR     UNPACK COUNTER\n         PUT   ASAPRPT,MSG000          WRITE RECORD TO ASAPRPT\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\n         @FILL AREA=MSG000,CHAR=40     CLEAR OUTPUT RECORD\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n* ------------------------------------------------------------------ *\nRTNCLN3  @CALL RTNGBL,ENTRY=4          GLOBAL ZONE/CSI ROUTINE\n*\n         C     R15,F0                  WAS RETURN CODE A 0?\n         BE    RTNCLN2                 YES,\n         C     R15,F4                  WAS RETURN CODE A 4?\n         BE    RTNCLN2                 YES,\n*\n         ABEND 122,DUMP                IMPOSSIBLE ERROR, LARGE ROACH\n* ------------------------------------------------------------------ *\nRTNCLN2  CLOSE ASAPACB                 CLOSE ASAP DATABASE\n* ------------------------------------------------------------------ *\nRTNCLN1  CLOSE (ASAPRPT)               CLOSE ASAPRPT DATASET\n* ------------------------------------------------------------------ *\nRTNCLN0  L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n* ------------------------------------------------------------------ *\n         DROP  R9                      *\n         DROP  R10                     *\n         DROP  R11                     *\n         DROP  R12                     *\n*\n         LTORG                         IEBASAPD\n*\nLENCLN   EQU   *-RTNCLN\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPE": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x91\\x11?\\x00\\x91\\x11O\\x16F\\x01\\x8e\\x01\\x8e\\x00\\x00|\\xc4\\xe5\\xc7\\xc6\\xf0\\xf9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1991-04-23T00:00:00", "modifydate": "1991-04-24T16:46:00", "lines": 398, "newlines": 398, "modlines": 0, "user": "@DVGF09"}, "text": "***********************************************************************\n*        WORKING STORAGE                                              *\n***********************************************************************\n         DS    0D\nWORKAREA DS    0CL4096\n*---------------------------------------------------------------------*\n*        PROGRAM CONSTANTS                                            *\n*---------------------------------------------------------------------*\nASAPLVL  DC    CL5'11.04'              IEBASAP PROGRAM LEVEL\n*\nRTNADDR  DC    A(RTNMAIN)              \"0\" - MAIN ROUTINES\n         DC    A(RTNUPD)               \"4\"\n         DC    A(RTNLIST)              \"8\"\n         DC    A(RTNXREF)              \"12\"\n         DC    A(RTNCLN)               \"16\"\n         DC    A(RTNDEL)               \"20\"\n*        DC    A(RTNUNLD)              \"24\"\n*\n* COMMON ROUTINES\n*\n@RTNERR  DC    A(RTNERR)               ERROR ROUTINE\n@RTNRLIN DC    A(RTNRLIN)              ASAPRPT LINE ROUTINE\n@RTNRHDR DC    A(RTNRHDR)              ASAPRPT HEADER ROUTINE\n@RTNOLIN DC    A(RTNOLIN)              ASAPOUT LINE ROUTINE\n@RTNOHDR DC    A(RTNOHDR)              ASAPOUT HEADER ROUTINE\n@RTNGBL  DC    A(RTNGBL)               GLOBAL ZONE/CSI ROUTINE\n@RTNZONE DC    A(RTNZONE)              REQZONE ZONE/CSI ROUTINE\n@RTNRDG  DC    A(RTNRDG)               READ GLOBAL ZONE ROUTINE\n@RTNRDZ  DC    A(RTNRDZ)               READ REQZONE ROUTINE\n*---------------------------------------------------------------------*\n*               '12345678901234567890123456789012345678901234567890'\nMSG019   DC    C'ASAP019I RECORD ADDED TO ASAP DATABASE'\nMSG020   DC    C'ASAP020I RECORD UPDATED IN ASAP DATABASE'\nMSG021   DC    C'ASAP021I RECORD DELETED FROM ASAP DATABASE'\nMSG022   DC    C'ASAP022W PTF IN ERROR INSTALLED'\nMSG023   DC    C'ASAP023I PTF IN ERROR NOT INSTALLED'\nMSG024   DC    C'ASAP024I FIXING PTF INSTALLED'\nMSG025   DC    C'ASAP025W FIXING PTF NOT INSTALLED'\nMSG026   DC    C'ASAP026I FIXING PTF HAS BEEN RECEIVED'\nMSG027   DC    C'ASAP027W FIXING PTF HAS NOT BEEN RECEIVED'\nMSG028   DC    C'ASAP028I APAR LASTSUP''ED BY SYSMOD XXXXXXX'\nMSG029   DC    C'ASAP029I APAR FIX INSTALLED'\nMSG030   DC    C'ASAP030W NO FIX AND MULTIPLE PE IDENTIFIED'\nMSG031   DC    C'ASAP031W NO FIX AND NO PE(S) IDENTIFIED'\n*\n*               '12345678901234567890123456789012345678901234567890'\nMSG101   DC    C'ASAP101I XXXXX RECORDS IN ASAP DATA BASE'\nMSG102   DC    C'ASAP102I XXXXX TRANSACTIONS PROCESSED FROM ASAPUPD'\nMSG103   DC    C'ASAP103I XXXXX RECORD(S) ADDED TO ASAP DATA BASE'\nMSG104   DC    C'ASAP104I XXXXX RECORD(S) UPDATED IN ASAP DATA BASE'\nMSG105   DC    C'ASAP105I XXXXX RECORD(S) DELETED FROM ASAP DATA BASE'\n*\n*               '12345678901234567890123456789012345678901234567890'\nMSG900   DC    C'ASAP900W PAGELEN VALUE INVALID, SET TO 60'\nMSG901   DC    C'ASAP901I PAGELEN SET TO XX'\nMSG902   DC    C'ASAP902W DATATYPE VALUE INVALID'\nMSG903   DC    C'ASAP903I DATATYPE VALUE SET TO XXX'\nMSG904   DC    C'ASAP904E INVALID CONTROL CARD - BYPASSED'\nMSG905   DC    C'ASAP905W INVALID UPDATE RECORD - BYPASSED'\nMSG906   DC    C'ASAP906I RECORD NOT PROCESSED - ZE APAR'\nMSG907   DC    C'ASAP907I RECORD NOT PROCESSED - PE DELETE'\nMSG908   DC    C'ASAP908E CONTROL CARD BYPASSED DUE TO AN ERROR'\nMSG909   DC    C'ASAP909E INVALID PARAMETER SPECIFIED'\nMSG910   DC    C'ASAP910E ZONE NOT SPECIFIED FOR XREF COMMAND'\nMSG911   DC    C'ASAP911E OPEN FOR ASAPRPT DATASET FAILED'\nMSG912   DC    C'ASAP912E OPEN FOR ASAP UPDATE DATASET FAILED'\nMSG913   DC    C'ASAP913E XREF COMMAND NOT VALID WITH VM DATA'\nMSG914   DC    C'ASAP914E CLEANUP COMMAND NOT VALID WITH VM DATA'\nMSG915   DC    C'ASAP915E CONTROL CARD BYPASSED - INVALID PARAMETER'\nMSG996   DC    C'ASAP996E INVALID FUNCTION IDENTIFIER'\nMSG997   DC    C'ASAP997E INVALID FILE IDENTIFIER'\nMSG998   DC    C'ASAP998I EXECUTION CONTINUED'\nMSG999   DC    C'ASAP999E EXECUTION TERMINATED'\n*---------------------------------------------------------------------*\nF0       DC    F'0'                    *\nF1       DC    F'1'                    *\nF2       DC    F'2'                    *\nF4       DC    F'4'                    *\nF8       DC    F'8'                    *\nF12      DC    F'12'                   *\nF16      DC    F'16'                   *\nF20      DC    F'20'                   *\nF44      DC    F'44'                   *\n*\nP0       DC    PL3'0'                  *\nP1       DC    PL3'1'                  *\nP4       DC    PL3'4'                  *\nP7       DC    PL3'7'                  *\nP8       DC    PL3'8'                  *\nP60      DC    PL3'60'                 *\n*\nBLANKS   DC    80CL1' '                *\n*---------------------------------------------------------------------*\nMVS      DC    CL3'MVS'                *\nVM       DC    CL3'VM '                *\n*\nHIPAPAR  DC    CL9'HIPERAPAR'          *\nHIPFIX   DC    CL9'HIPER FIX'          *\nPE       DC    CL9'PE       '          *\nPEFIX    DC    CL9'PE FIX   '          *\nPEDEL    DC    CL9'PE DELETE'          *\nZEAPAR   DC    CL9'ZE APAR  '          *\n*\nMULTI    DC    CL7'*MULTI*'            *\nGLOBAL   DC    CL8'GLOBAL  '           *\nZPOOL    DC    CL8'ZPOOL1  '           *\nGIMSMP   DC    CL8'GIMSMP  '           *\n*\nSET      DC    CL4'SET '               *\nLIST     DC    CL5'LIST '              *\nXREF     DC    CL5'XREF '              *\nDELETE   DC    CL7'DELETE '            *\nUPDATE   DC    CL7'UPDATE '            *\nCLEANUP  DC    CL8'CLEANUP '           *\n*\nCHECK    DC    CL6'CHECK '             *\nPROCESS  DC    CL10'PROCESSING '       *\n*\nDDNASAP  DC    CL8'ASAPDB  '           *\nDDNIN    DC    CL8'SYSIN   '           *\nDDNOUT   DC    CL8'ASAPOUT '           *\nDDNRPT   DC    CL8'ASAPRPT '           *\nDDNUPD   DC    CL8'ASAPUPD '           *\nDDNZONE  DC    CL8'SMPZONE '           *\n*---------------------------------------------------------------------*\n*\n* TRANS X'00' TO X'40' AND ALL LOWER CASE TO UPPER CASE\n*\nTRTAB1   DS    0XL256\n*               ' 0 1 2 3 4 5 6 7 8 9 A B C D E F'\nNUM00    DC    X'400102030405060708090A0B0C0D0E0F'\nNUM10    DC    X'101112131415161718191A1B1C1D1E1F'\nNUM20    DC    X'202122232425262728292A2B2C2D2E2F'\nNUM30    DC    X'303132333435363738393A3B3C3D3E3F'\nNUM40    DC    X'404142434445464748494A4B4C4D4E4F'\nNUM50    DC    X'505152535455565758595A5B5C5D5E5F'\nNUM60    DC    X'606162636465666768696A6B6C6D6E6F'\nNUM70    DC    X'707172737475767778797A7B7C7D7E7F'\nNUM80    DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'\nNUM90    DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\nNUMA0    DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\nNUMB0    DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\nNUMC0    DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\nNUMD0    DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\nNUME0    DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\nNUMF0    DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n*               ' 0 1 2 3 4 5 6 7 8 9 A B C D E F'\n*---------------------------------------------------------------------*\n*\n* FORMAT THE HEX CONTENTS OF A REGISTER FOR PRINTING AS AN 8 BYTE FIELD\n*\nHEXTAB   DS    0XL256\n*               ' 0 1 2 3 4 5 6 7 8 9 A B C D E F'\nROW0TOE  DC    240XL1'40'\nROWF     DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n*               ' 0 1 2 3 4 5 6 7 8 9 A B C D E F'\n*---------------------------------------------------------------------*\n***********************************************************************\n*---------------------------------------------------------------------*\n*        WORK AREAS                                                   *\n*---------------------------------------------------------------------*\nERRMSG1  DS    0CL80\n         DC    CL42'ASAP900E ERROR ENCOUNTERED PROCESSING THE '\nERRMSG1A DS    CL08\n         DC    CL30' DATASET                      '\nERRMSG1L EQU   *-ERRMSG1\n*\nERRMSG2  DS    0CL80\n         DC    CL31'         ERROR OCCURRED DURING '\nERRMSG2A DS    CL49\nERRMSG2L EQU   *-ERRMSG2\n*\nERRMSG3  DS    0CL80\n         DC    CL19'         RPLERRCD: '\nERRMSG3A DS    CL08\n         DC    CL11' RPLRSNCD: '\nERRMSG3B DS    CL08\n         DC    CL24' ERROR CODE + LOCATION: '\nERRMSG3C DS    CL04\n         DC    CL01','\nERRMSG3D DS    CL04\n         DC    CL01' '\nERRMSG3L EQU   *-ERRMSG3\n*\nMSG000   DS    0CL121\n         DC    CL01' '\nMSG000A  DS    CL120\n***********************************************************************\nVSAMMSG  DS    CL128                   *\n*\n         DS    0F\nJFCB     DS    CL176                   *\n*\nGBLXLIST DC    X'87',AL3(JFCB)\nUPDXLIST DC    X'87',AL3(JFCB)\n*\nRTNCODE  DS    F                       *\nFEEDBACK DS    F                       *\nERROR    DS    F                       *\nRETADDR  DS    F                       R14 SAVE AREA (RETURN ADDRESS)\n*\nERRFLD   DS    0CL4                    *\nEROUTINE DS    CL1                     *\nEFUNC    DS    CL1                     *\nEFILE    DS    CL1                     *\nEDATA    DS    CL1                     *\n*\nERRLOC   DS    CL4                     *\n*\nRTNEFLGS DS    0CL16\nREFCLN   DS    CL1                     *\nREFDEL   DS    CL1                     *\nREFERR   DS    CL1                     *\nREFGBL   DS    CL1                     *\nREFLIST  DS    CL1                     *\nREFMAIN  DS    CL1                     *\nREFRDG   DS    CL1                     *\nREFRDZ   DS    CL1                     *\nREFUPD   DS    CL1                     *\nREFXREF  DS    CL1                     *\nREFZONE  DS    CL1                     *\n         DS    CL1                     *\n         DS    CL1                     *\n         DS    CL1                     *\n         DS    CL1                     *\n         DS    CL1                     *\n*\n         DS    0D\nPAGELEN  DC    PL3'60'                 REPORT PAGE LENGTH - 60 LINES\nRPAGCTR  DC    PL3'00'                 REPORT PAGE COUNTER\nRLINCTR  DC    PL3'00'                 REPORT PAGE LINE COUNTER\nOPAGCTR  DC    PL3'00'                 OUTPUT PAGE COUNTER\nOLINCTR  DC    PL3'00'                 OUTPUT PAGE LINE COUNTER\n*\nRECCTR   DS    PL3                     MSG101 RECS IN ASAP DB\nTRNCTR   DS    PL3                     MSG102 RECS IN ASAPUPD DATA SET\nADDCTR   DS    PL3                     MSG103 RECS ADDED TO DB\nUPDCTR   DS    PL3                     MSG104 RECS UPDATED IN DB\nDELCTR   DS    PL3                     MSG105 RECS DELETED FROM DB\n*\nDATATYPE DC    CL3'MVS'                DATA TYPE INPUT TO PROGRAM\nUPDACT   DS    CL1                     *\nRECTYPE  DS    CL1                     *\nPEINST   DS    CL1                     PE INSTALLED\nFIXINST  DS    CL1                     FIX INSTALLED\nAPARINST DS    CL1                     APAR INSTALLED\nFIXRECD  DS    CL1                     FIX RECEIVED\n*\n         DS    0F\nFULLWORD DS    XL5                     *\n         DS    0D\nDBLWORD  DS    XL9                     *\n*\n         DS    0D\nDATE     DS    CL8                     *\nTIME     DS    CL8                     *\n@R0      DS    F                       *\n@R1      DS    F                       *\n@R15     DS    F                       *\n***********************************************************************\n         DS    0D\nZONEDATA DS    0CL68                   *\nZONEDDN  DS    CL8                     *\nZONETYPE DS    CL8                     *\nZONEDSN  DS    CL44                    *\nZONEID   DS    XL2                     *\nZONEVOL  DS    CL6                     *\n*\nGBLDSN   DS    CL44\nGBLVOL   DS    CL6\nUPDDSN   DS    CL44\nUPDVOL   DS    CL6\n*\nZONEDATL EQU   *-ZONEDATA              *\n***********************************************************************\n*        ENQUEUE/DEQUEUE PARAMETERS                                   *\n***********************************************************************\nQNAME    DS    CL8\n         DS    0CL48\nRNAMELEN DS    0XL4\n         DS    XL3\nRNAME    DS    0CL45\n         DS    XL1\nRNAMEDSN DS    CL44\n***********************************************************************\n*        DYNAMIC ALLOCATION PARAMETERS                                *\n***********************************************************************\nS99WORK  DS    0D\nS99PTR   DC    X'80',AL3(S99PARM)      *\n*\nS99PARM  EQU   *\nS99LEN   DC    XL1'14'                 PARMLIST FOR ALLOCATION\nS99CODE  DC    XL1'01'                 *\nS99FLAG1 DC    XL2'0000'               *\nS99ERROR DS    XL2                     *\nS99INFO  DS    XL2                     *\nS99TXPTR DC    AL4(S99TEXT)            *\nS99RBEXT DC    F'0'                    *\nS99FLAG2 DC    F'0'                    *\n*\nS99TEXT  DS    0F\n         DC    X'00',AL3(S99PARM1)     ADDR OF PARM LIST TEXT ENTRY\n         DC    X'00',AL3(S99PARM2)     ADDR OF PARM LIST TEXT ENTRY\n         DC    X'00',AL3(S99PARM3)     ADDR OF PARM LIST TEXT ENTRY\n         DC    X'00',AL3(S99PARM4)     ADDR OF PARM LIST TEXT ENTRY\n         DC    X'00',AL3(S99PARM5)     ADDR OF PARM LIST TEXT ENTRY\n         DC    X'00',AL3(S99PARM6)     ADDR OF PARM LIST TEXT ENTRY\n         DC    X'80',AL3(S99PARM7)     ADDR OF PARM LIST TEXT ENTRY\n*\nS99PARM1 DS    0H\nP01KEY   DC    XL2'0001'               DDNAME\nP01NUM   DC    XL2'0001'               *\nP01LEN   DC    XL2'0008'               *\nP01DATA  DS    CL8                     *\n*                                      *\nS99PARM2 DS    0H\nP02KEY   DC    XL2'0002'               DSNAME\nP02NUM   DC    XL2'0001'               *\nP02LEN   DC    XL2'002C'               *\nP02DATA  DS    CL44                    *\n*\nS99PARM3 DS    0H\nP03KEY   DC    XL2'0004'               DISP1\nP03NUM   DC    XL2'0001'               *\nP03LEN   DC    XL2'0001'               *\nP03DATA  DC    XL1'08'                 *\n*\nS99PARM4 DS    0H\nP04KEY   DC    XL2'0005'               DISP2\nP04NUM   DC    XL2'0001'               *\nP04LEN   DC    XL2'0001'               *\nP04DATA  DC    XL1'08'                 *\n*\nS99PARM5 DS    0H\nP05KEY   DC    XL2'0006'               DISP3\nP05NUM   DC    XL2'0001'               *\nP05LEN   DC    XL2'0001'               *\nP05DATA  DC    XL1'08'                 *\n*\nS99PARM6 DS    0H\nP06KEY   DC    XL2'001C'               FREE=CLOSE\nP06NUM   DC    XL2'0000'               *\n*\nS99PARM7 DS    0H\nP07KEY   DC    XL2'005D'               RETURN VOLSER\nP07NUM   DC    XL2'0001'               *\nP07LEN   DC    XL2'0006'               *\nP07DATA  DS    CL6                     *\n*\nS99WORKL EQU   *-S99WORK\n***********************************************************************\n*        KEYVAL DATA RETURN AREAS                                     *\n***********************************************************************\n         DS    0D\nCNTLAREA DS    0CL39\nFMIDFLGS DS    0CL2                    *\nCHECKFMD DS    CL1                     *\nCHECKFMG DS    CL1                     *\n*\n#KDDATA  DS    0CL5                    *\n         DC    CL1' '                  *\n         DC    CL1' '                  *\nCNTLDATA DC    CL3'   '                *\n*\n#KDPAGE  DS    0CL4                    *\n         DC    CL1' '                  *\n         DC    CL1' '                  *\nCNTLPAGE DC    CL2'  '                 *\n*\n#KDZONE  DS    0CL9                    *\n         DC    CL1' '                  *\n         DC    CL1' '                  *\nCNTLZONE DC    CL7'       '            *\n*\n#KDFMID  DS    0CL9                    *\n         DC    CL1' '                  *\n         DC    CL1' '                  *\nCNTLFMID DC    CL7'       '            *\n*\n#KDFGRP  DS    0CL4                    *\n         DC    CL1' '                  *\n         DC    CL1' '                  *\nFMIDGRP  DC    CL2'  '                 *\n*\n#KDCHECK DS    0CL3                    *\n         DC    CL1' '                  *\n         DC    CL1' '                  *\nCHECKRUN DC    CL1' '                  *\n*\n#KDCLEAN DS    0CL3                    *\n         DC    CL1' '                  *\n         DC    CL1' '                  *\nCLEANRUN DC    CL1' '                  *\n*\nCNTLLEN  EQU   *-CNTLAREA\n***********************************************************************\nLENWORK  EQU   *-WORKAREA\n*---------------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEBASAPF": {"ttr": 2051, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "DCBAREA  DS    0CL4096\n***********************************************************************\n*        ASAPRPT HEADERS AND RECORD DEFINITIONS                       *\n***********************************************************************\nRPTHDR0  DS    0CL121\n         DC    CL01'1'\n         DC    CL05'DATE '\nHDR0DATE DS    CL06                    YY.DDD\n         DC    CL08'  TIME '\nHDR0TIME DS    CL08                    HH:MM:SS\n         DC    CL17'                 '\n         DC    CL17'IEBASAP - LEVEL  '\nHDR0LVL  DS    CL05                    VV.RR\n         DC    CL03' - '\nHDR0DDN  DS    CL08\n         DC    CL39'                                  PAGE '\nHDR0PAGE DS    CL04                    9999\nRPTHDR0L EQU   *-RPTHDR0\n*\nRPTHDR1  DS    0CL121\n         DC    CL01' '\n         DC    CL08' APAR   '\n         DC    CL10' FMID     '\n         DC    CL08' FIXBY  '\n         DC    CL08'PE-PTF  '\n         DC    CL07'FLAGS  '\n         DC    CL04'REL '\n         DC    CL24' PRODUCT ID             '\n         DC    CL09'ASAPDATE '\nHDR1MSG  DS    CL42\nRPTHDR1L EQU   *-RPTHDR1\n*\nRPTHDR2  DS    0CL121\n         DC    CL01' '\n         DC    CL08'------- '\n         DC    CL10'--------- '\n         DC    CL08'------- '\n         DC    CL08'------- '\n         DC    CL07'------ '\n         DC    CL04'--- '\n         DC    CL24'----------------------- '\n         DC    CL09'-------- '\nHDR2MSG  DS    CL42\nRPTHDR2L EQU   *-RPTHDR2\n*\nRPTHDR3  DS    0CL121\n         DC    CL01' '\n         DC    CL23'ASAP STATUS REPORT FOR '\nHDR3DATA DS    0CL97\nHDR3FUNC DS    CL45\nHDR3DSN  DS    CL46\nHDR3VOL  DS    CL06\nRPTHDR3L EQU   *-RPTHDR3\n*\nRPTLINE  DS    0CL121\nRPTDATA  DS    0CL79\n         DS    CL01\nRPTAPAR  DS    CL07\n         DS    CL01\nRPTFMID  DS    CL09\n         DS    CL01\nRPTPTF   DS    CL07\n         DS    CL01\nRPTPE    DS    CL07\n         DS    CL01\nRPTSTAT  DS    0CL05\nRPTHIP   DS    CL01\n         DS    CL01\nRPTZE    DS    CL01\n         DS    CL01\nRPTNUMP  DS    CL02\n         DS    CL01\nRPTREL   DS    CL03\n         DS    CL01\nRPTPID   DS    CL23\n         DS    CL01\nRPTDATE  DS    CL08\n         DS    CL01\nRLINEMSG DS    CL42\nRPTLINEL EQU   *-RPTLINE\n*\nGENHDR1  DS    0CL42\n         DC    CL30' ACTION                       '\n         DC    CL12'            '\n*\nGENHDR2  DS    0CL42\n         DC    CL30'------------------------------'\n         DC    CL12'------------'\n*\nXRFHDR1  DS    0CL42\n         DC    CL30'  ZONEID   DATE    TIME       '\n         DC    CL12'            '\n*\nXRFHDR2  DS    0CL42\n         DC    CL30'--------- ------ --------     '\n         DC    CL12'            '\n***********************************************************************\n*        ACB, RPL, AND VSAM RECORD DEFINITIONS                        *\n***********************************************************************\n@ASAPACB DS    0H\nASAPACB  ACB   AM=VSAM,                ASAP CONTROL DATA SET ACB       +\n               DDNAME=ASAPCDS,                                         +\n               MACRF=(KEY,DIR,SEQ,IN,OUT,SIS),                         +\n               MAREA=VSAMMSG,                                          +\n               MLEN=128\n*\n@ASAPRPL DS    0H\nASAPRPL  RPL   ACB=ASAPACB,            ASAP CONTROL DATA SET RPL       +\n               AM=VSAM,                                                +\n               AREA=ASAPREC,                                           +\n               AREALEN=72,                                             +\n               ARG=ASAPKEY,                                            +\n               KEYLEN=16,                                              +\n               MSGAREA=VSAMMSG,                                        +\n               MSGLEN=128,                                             +\n               OPTCD=(KEY,MVE),                                        +\n               RECLEN=72\n*\n@ASAPREC DS    0H\nASAPREC  DS    0CL72                   ASAP RECORD FORMAT\nASAPKEY  DS    0CL16\nASAPAPAR DS    CL7                     APAR\nASAPFMID DS    CL9                     FMID\nASAPPTF  DS    CL7                     FIXING PTF\nASAPPE   DS    CL7                     PTF IN ERROR\nASAPHIP  DS    CL1                     HIPER (Y OR N)\nASAPZE   DS    CL1                     ZE APAR (Y OR N)\nASAPNUMP DS    CL2                     NUMBER OF PE'S\nASAPREL  DS    CL3                     PRODUCT RELEASE\nASAPPID  DS    CL23                    TITLE\nASAPDATE DS    CL8                     DATE\n         DS    CL4                     *\nASAPRECL EQU   *-ASAPREC\n*---------------------------------------------------------------------*\n@GBLACB  DS    0H\nGBLACB   ACB   AM=VSAM,                GLOBAL ZONE ACB                 +\n               DDNAME=SMPCSI,                                          +\n               EXLST=GBLXLIST,                                         +\n               MACRF=(KEY,DIR,SEQ,IN),                                 +\n               MAREA=VSAMMSG,                                          +\n               MLEN=128\n*\n@GBLRPL  DS    0H\nGBLRPL   RPL   ACB=GBLACB,             GLOBAL ZONE RPL                 +\n               AM=VSAM,                                                +\n               AREA=GBLREC,                                            +\n               AREALEN=143,                                            +\n               ARG=GBLKEY,                                             +\n               KEYLEN=14,                                              +\n               MSGAREA=VSAMMSG,                                        +\n               MSGLEN=128,                                             +\n               OPTCD=(KEY,SEQ,KEQ,GEN,MVE)\n*\n@GBLREC  DS    0H\nGBLREC   DS    0CL143                  GLOBAL ZONE RECORD\nGBLKEY   DS    0CL14\nGZONEID  DS    XL2                     ZONE ID\nGRTYP    DS    XL2                     RECORD TYPE\nGKEYDATA DS    CL8                     KEY DATA\nGRSUBTYP DS    XL2                     RECORD SUBTYPE\nGSEQNO   DS    XL2                     SEQUENCE FIELD\nGDATA    DS    CL127                   *\nGBLRECL  EQU   *-GBLREC\n*---------------------------------------------------------------------*\n@ZONEACB DS    0H\nZONEACB  ACB   AM=VSAM,                GLOBAL ZONE ACB                 +\n               DDNAME=XXXXXXXX,                                        +\n               MACRF=(KEY,DIR,SEQ,IN),                                 +\n               MAREA=VSAMMSG,                                          +\n               MLEN=128\n*\n@ZONERPL DS    0H\nZONERPL  RPL   ACB=ZONEACB,            GLOBAL ZONE RPL                 +\n               AM=VSAM,                                                +\n               AREA=ZONEREC,                                           +\n               AREALEN=143,                                            +\n               ARG=ZONEKEY,                                            +\n               KEYLEN=16,                                              +\n               MSGAREA=VSAMMSG,                                        +\n               MSGLEN=128,                                             +\n               OPTCD=(KEY,SEQ,KEQ,GEN,MVE)\n*\n@ZONEREC DS    0H\nZONEREC  DS    0CL143                  GLOBAL ZONE RECORD\nZONEKEY  DS    0CL16\nZZONEID  DS    XL2                     ZONE ID\nZRTYP    DS    XL2                     RECORD TYPE\nZKEYDATA DS    CL8                     KEY DATA\nZRSUBTYP DS    XL2                     RECORD SUBTYPE\nZSEQNO   DS    XL2                     SEQUENCE FIELD\nZDATA    DS    CL127                   *\nZONERECL EQU   *-ZONEREC\n***********************************************************************\n*        PROGRAM DCBS                                                 *\n***********************************************************************\n@SYSPRNT DS    0H\nASAPOUT DCB    DDNAME=ASAPOUT,DSORG=PS,MACRF=PM,                       +\n               RECFM=FBA,LRECL=121\n@SYSIN   DS    0H\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,                         +\n               EODAD=RTNMAIN@\n@ASAPRPT DS    0H\nASAPRPT  DCB   DDNAME=ASAPRPT,DSORG=PS,MACRF=PM,                       +\n               RECFM=FBA,LRECL=121\n@ASAPUPD DS    0H\nASAPUPD  DCB   DDNAME=ASAPUPD,DSORG=PS,MACRF=GL,                       +\n               EODAD=RTNUPD@,EXLST=UPDXLIST\n*\nDCBLEN   EQU   *-DCBAREA\nDCBEND   DS    0H\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPG": {"ttr": 2056, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*        PROGRAM DSECTS                                              *\n*--------------------------------------------------------------------*\nUPDREC   DSECT\n*\n* FILE SHOULD BE SORTED BY DATE, APAR/PTF, FMID, PTF/APAR             *\n*\nUPDREC1  DS    0CL89                   ASAP UPDATE RECORD\nUPDFLDA  DS    CL7                     APAR/PTF\n         DS    CL2                     *\nUPDTYPE  DS    CL9                     TYPE\n         DS    CL2                     *\nUPDFLDB  DS    CL7                     PTF/APAR\n         DS    CL2                     *\nUPDFMID  DS    CL9                     FMID\n         DS    CL2                     *\nUPDREL   DS    CL3                     PRODUCT RELEASE\n         DS    CL2                     *\nUPDDATE  DS    CL8                     DATE\n         DS    CL2                     *\nUPDONUM  DS    CL9                     ORDER NUMBER\n         DS    CL2                     *\nUPDPID   DS    CL23                    PRODUCT ID\nUPDREC1L EQU   *-UPDREC1\n*---------------------------------------------------------------------*\n         DCBD  DSORG=PS,DEVD=DA\n*---------------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPH": {"ttr": 2058, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RTNDEL   SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNDEL,R12,R11          EST ROUTINE ADDRESSABILITY\n         LR    R11,R12\n         A     R11,RDF4096\n*\n         LA    R2,72(R13)              LOAD ADDR OF SAVEAREA #2\n         ST    R13,4(R2)               SAVE ADDR OF SAVEAREA #1 IN\n*                                      SAVEAREA #2\n         ST    R2,8(R13)               SAVE ADDR OF SAVEAREA #2 IN\n*                                      SAVEAREA #1\n         LR    R13,R2                  LOAD ADDR OF SAVEAREA #2 IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     RDROPN                  *\n*\nRDF4096  DC    F'4096'                 *\n*--------------------------------------------------------------------*\nRDROPN   EQU   *\n*--------------------------------------------------------------------*\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*--------------------------------------------------------------------*\nRTNDEL@  EQU   *\n*--------------------------------------------------------------------*\nRTNDEL0  L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n*--------------------------------------------------------------------*\n         DROP  R9\n         DROP  R10\n         DROP  R11\n         DROP  R12\n*\n         LTORG                         IEBASAPH\n*\nLENDEL   EQU   *-RTNDEL\n*--------------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPI": {"ttr": 2060, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*-------------------------------------------------------------------*\nRTNERR   SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNERR,R12              EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,ERRSAVE              LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     ERR                     *\n*\nERRSAVE  DS    18F                     *\n*-------------------------------------------------------------------*\nERR      LA    R3,TROUTINE             *\n         XR    R4,R4                   *\n         XR    R5,R5                   *\nRECHK    CLC   EROUTINE,0(R3)          *\n         BE    REMATCH                 *\n         CLI   0(R3),X'FF'             *\n         BE    RENOMTCH                *\n         LA    R3,1(,R3)               *\n         A     R4,F1                   *\n         B     RECHK                   *\nREMATCH  LA    R5,RTNEFLGS             *\n         LA    R5,0(R4,R5)             *\n         MVI   0(R5),C'Y'              *\n         B     REMSG101                *\nRENOMTCH EQU   *                       *\n*-------------------------------------------------------------------*\nREMSG101 CLI   EFILE,C'A'              *\n         BNE   REMSG102                *\n         MVC   ERRMSG1A(8),DDNASAP     *\n         B     REMSG199                *\n*\nREMSG102 CLI   EFILE,C'G'              *\n         BNE   REMSG103                *\n         MVC   ERRMSG1A(8),GLOBAL      *\n         B     REMSG199                *\n*\nREMSG103 CLI   EFILE,C'R'              *\n         BNE   REMSG104                *\n         MVC   ERRMSG1A(8),DDNRPT      *\n         B     REMSG199                *\n*\nREMSG104 CLI   EFILE,C'U'              *\n         BNE   REMSG105                *\n         MVC   ERRMSG1A(8),DDNUPD      *\n         B     REMSG199                *\n*\nREMSG105 CLI   EFILE,C'Z'              *\n         BNE   REMSG106                *\n         MVC   ERRMSG1A(8),DDNZONE     *\n         B     REMSG199                *\n*\nREMSG106 CLI   EFILE,C'I'              *\n         BNE   REMSG107                *\n         MVC   ERRMSG1A(8),DDNIN       *\n         B     REMSG199                *\n*\nREMSG107 CLI   EFILE,C'O'              *\n         BNE   REMSG198                *\n         MVC   ERRMSG1A(8),DDNOUT      *\n         B     REMSG199                *\n*\nREMSG198 @MVC  MSG000A,MSG997          *\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\nREMSG199 @MVC  MSG000A,ERRMSG1         *\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*-------------------------------------------------------------------*\nREMSG201 CLI   EFUNC,C'A'              *\n         BNE   REMSG202                *\n         @MVC  ERRMSG2A,EMSG01         *\n         B     REMSG299                *\n*\nREMSG202 CLI   EFUNC,C'D'              *\n         BNE   REMSG203                *\n         @MVC  ERRMSG2A,EMSG02         *\n         B     REMSG299                *\n*\nREMSG203 CLI   EFUNC,C'M'              *\n         BNE   REMSG204                *\n         @MVC  ERRMSG2A,EMSG03         *\n         B     REMSG299                *\n*\nREMSG204 CLI   EFUNC,C'O'              *\n         BNE   REMSG205                *\n         @MVC  ERRMSG2A,EMSG04         *\n         B     REMSG299                *\n*\nREMSG205 CLI   EFUNC,C'R'              *\n         BNE   REMSG206                *\n         @MVC  ERRMSG2A,EMSG05         *\n         B     REMSG299                *\n*\nREMSG206 CLI   EFUNC,C'S'              *\n         BNE   REMSG207                *\n         @MVC  ERRMSG2A,EMSG06         *\n         B     REMSG299                *\n*\nREMSG207 CLI   EFUNC,C'W'              *\n         BNE   REMSG208                *\n         @MVC  ERRMSG2A,EMSG07         *\n         B     REMSG299                *\n*\nREMSG208 CLI   EFUNC,C'?'              *\n         BNE   REMSG209                *\n         @MVC  ERRMSG2A,EMSG08         *\n         B     REMSG299                *\n*\nREMSG209 CLI   EFUNC,C'C'              *\n         BNE   REMSG210                *\n         @MVC  ERRMSG2A,EMSG09         *\n         B     REMSG299                *\n*\nREMSG210 CLI   EFUNC,C'J'              *\n         BNE   REMSG211                *\n         @MVC  ERRMSG2A,EMSG10         *\n         B     REMSG299                *\n*\nREMSG211 CLI   EFUNC,C'E'              *\n         BNE   REMSG212                *\n         @MVC  ERRMSG2A,EMSG11         *\n         B     REMSG299                *\n*\nREMSG212 CLI   EFUNC,C'F'              *\n         BNE   REMSG213                *\n         @MVC  ERRMSG2A,EMSG12         *\n         B     REMSG299                *\n*\nREMSG213 CLI   EFUNC,C'H'              *\n         BNE   REMSG214                *\n         @MVC  ERRMSG2A,EMSG13         *\n         B     REMSG299                *\n*\nREMSG214 CLI   EFUNC,C'P'              *\n         BNE   REMSG298                *\n         @MVC  ERRMSG2A,EMSG14         *\n         B     REMSG299                *\n*\nREMSG298 @MVC  MSG000A,MSG996          *\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*\nREMSG299 @MVC  MSG000A,ERRMSG2         *\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n*-------------------------------------------------------------------*\nREMSG301 MVC   ERRMSG3C,ERRFLD         *\n         MVC   ERRMSG3D,ERRLOC         *\n*\n         CLI   EDATA,C'R'\n         BE    REMSG302\n         @FILL AREA=ERRMSG3A,CHAR=40\n         @FILL AREA=ERRMSG3B,CHAR=40\n         B     REMSG399\n*\nREMSG302 @FMTREG R3,FULLWORD,DBLWORD,HEXTAB\n         MVC   ERRMSG3A(8),DBLWORD     *\n*\n         @FMTREG R4,FULLWORD,DBLWORD,HEXTAB\n         MVC   ERRMSG3B(8),DBLWORD     *\n*\nREMSG399 @MVC  MSG000A,ERRMSG3         *\n         @CALL RTNOLIN                 WRITE RECORD TO ASAPOUT\n         B     RTNERR@\n* ------------------------------------------------------------------ *\nRTNERR@  EQU   *\n*\nRTNERR0  L     R13,4(R13)              *\n         RETURN (14,12)                *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n* ------------------------------------------------------------------ *\nTROUTINE DC    CL1'C',CL12'CLEANUP     '\n         DC    CL1'D',CL12'DELETE      '\n         DC    CL1'E',CL12'ERROR       '\n         DC    CL1'G',CL12'GLOBAL      '\n         DC    CL1'L',CL12'LIST        '\n         DC    CL1'M',CL12'MAIN        '\n         DC    CL1'R',CL12'READZONE    '\n         DC    CL1'U',CL12'UPDATE      '\n         DC    CL1'X',CL12'XREF        '\n         DC    CL1'Z',CL12'REQZONE     '\n         DC    XL1'FF'                 END OF TABLE\n*---------------------------------------------------------------------*\nTFUNC    DC    CL1'A',CL12'DYNALLOC    '\n         DC    CL1'C',CL12'CLOSE       '\n         DC    CL1'D',CL12'VSAM ERASE  '\n         DC    CL1'E',CL12'ENQUEUE     '\n         DC    CL1'F',CL12'DEQUEUE     '\n         DC    CL1'H',CL12'RPTHDR      '\n         DC    CL1'J',CL12'RDJFCB      '\n         DC    CL1'K',CL12'ENTRY CODE  '\n         DC    CL1'M',CL12'MODCB       '\n         DC    CL1'O',CL12'OPEN        '\n         DC    CL1'P',CL12'VSAM POINT  '\n         DC    CL1'R',CL12'VSAM GET    '\n         DC    CL1'S',CL12'SHOWCB      '\n         DC    CL1'W',CL12'VSAM PUT    '\n         DC    CL1'?',CL12'UNKNOWN     '\n         DC    XL1'FF'                 END OF TABLE\n*---------------------------------------------------------------------*\nTFILE    DC    CL1'A',CL12'ASAPDB      '\n         DC    CL1'G',CL12'GLOBAL      '\n         DC    CL1'I',CL12'SYSIN       '\n         DC    CL1'O',CL12'ASAPOUT     '\n         DC    CL1'R',CL12'ASAPPRT     '\n         DC    CL1'U',CL12'ASAPUDP     '\n         DC    CL1'Z',CL12'SMPZONE     '\n         DC    XL1'FF'                 END OF TABLE\n*---------------------------------------------------------------------*\nTDATA    DC    CL1'C',CL12'NOT CSI     '\n         DC    CL1'D',CL12'DSNAME ERR  '\n         DC    CL1'Q',CL12'REQZONE     '\n         DC    CL1'R',CL12'REGS        '\n         DC    CL1'Z',CL12'NO ZONE     '\n         DC    CL1'#',CL12'SEQUENCE #  '\n         DC    XL1'FF'                 END OF TABLE\n* ------------------------------------------------------------------ *\n*               '12345678901234567890123456789012345678901234567890'\nEMSG01   DC    C'DYNAMIC ALLOCATION PROCESSING'\nEMSG02   DC    C'VSAM DELETE (ERASE) PROCESSING'\nEMSG03   DC    C'VSAM MODCB (MODIFY CONTROL BLOCK) PROCESSING'\nEMSG04   DC    C'DATASET OPEN PROCESSING'\nEMSG05   DC    C'VSAM READ (GET) PROCESSING'\nEMSG06   DC    C'VSAM SHOWCB (SHOW CONTROL BLOCK) PROCESSING'\nEMSG07   DC    C'VSAM WRITE (PUT) PROCESSING'\nEMSG08   DC    C'FUNCTION IDENTIFICATION'\nEMSG09   DC    C'DATASET CLOSE PROCESSING'\nEMSG10   DC    C'RDJFCB PROCESSING'\nEMSG11   DC    C'DATASET ENQUEUE PROCESSING'\nEMSG12   DC    C'DATASET DEQUEUE PROCESSING'\nEMSG13   DC    C'REPORT HEADER PROCESSING'\nEMSG14   DC    C'VSAM POINT PROCESSING'\n* ------------------------------------------------------------------ *\n         LTORG                         IEBASAPI\n*\nLENERR   EQU   *-RTNERR\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPJ": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x17 \\x00\\xd9\\x00\\xda\\x00\\x00|\\xc4\\xe5\\xc7\\xc6\\xf0\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T17:20:00", "lines": 217, "newlines": 218, "modlines": 0, "user": "@DVGF09"}, "text": "* ------------------------------------------------------------------ *\nRTNRLIN  SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNRLIN,R12             EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,RLINSAVE             LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     RLIN                    *\n*\nRLINSAVE DS    18F                     *\n* ------------------------------------------------------------------ *\nRLIN     PUT   ASAPRPT,RPTLINE         WRITE REPORT RECORD\n         AP    RLINCTR,P1              ADD 1 TO LINE CTR\n         CP    RLINCTR,PAGELEN         HAS PAGELEN BEEN REACHED?\n         BNE   RTNRLIN@                NO, RETURN TO CALLER\n         @CALL RTNRHDR                 CALL ASAPRT HEADER ROUTINE\n* ------------------------------------------------------------------ *\nRTNRLIN@ @FILL AREA=RPTLINE,CHAR=40\n*\nRTNRLIN0 L     R13,4(R13)              *\n         RETURN (14,12)                *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n*\n         LTORG                         IEBASAPJ\n*\nLENRLIN  EQU   *-RTNRLIN\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------ *\nRTNRHDR  SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNRHDR,R12             EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,RHDRSAVE             LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     RHDR                    *\n*\nRHDRSAVE DS    18F                     *\n* ------------------------------------------------------------------ *\nRHDR     TIME  DEC,ZONE=LT             *\n         ST    R1,@R1                  *\n         UNPK  DATE,@R1                *\n         SRA   R0,4(0)                 *\n         ST    R0,@R0                  *\n         OI    @R0+3,X'0F'             *\n         UNPK  TIME,@R0                *\n*\n         MVC   DATE+2(2),DATE+3        *\n         MVI   DATE+4,C'.'             *\n         MVC   HDR0DATE,DATE+2         *\n         MVC   TIME+0(2),TIME+2        *\n         MVC   TIME+3(2),TIME+4        *\n         MVI   TIME+2,C':'             *\n         MVI   TIME+5,C':'             *\n         MVC   HDR0TIME,TIME           *\n*\n         MVC   HDR0LVL,ASAPLVL         *\n         MVC   HDR0DDN,DDNOUT\n*\n         AP    RPAGCTR,P1\n         OI    RPAGCTR+2,X'0F'\n         UNPK  HDR0PAGE,RPAGCTR        *\n         PUT   ASAPRPT,RPTHDR0         WRITE REPORT HEADER 0\n*\n         @FILL AREA=RPTLINE,CHAR=40    CLEAR OUTPUT RECORD\n         PUT   ASAPRPT,RPTLINE         WRITE BLANK REPORT RECORD\n*\n         PUT   ASAPRPT,RPTHDR3         WRITE REPORT HEADER 3\n*\n         PUT   ASAPRPT,RPTLINE         WRITE BLANK REPORT RECORD\n*\n         PUT   ASAPRPT,RPTHDR1         WRITE REPORT HEADER 1\n*\n         PUT   ASAPRPT,RPTHDR2         WRITE REPORT HEADER 2\n*\n         PUT   ASAPRPT,RPTLINE         WRITE BLANK REPORT RECORD\n*\n         ZAP   RLINCTR,P7              SET LINE COUNTER TO 7\n* ------------------------------------------------------------------ *\nRTNRHDR@ EQU   *\n*\nRTNRHDR0 L     R13,4(R13)              *\n         RETURN (14,12)                *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n*\n         LTORG                         IEBASAPI\n*\nLENRHDR  EQU   *-RTNRHDR\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------ *\nRTNOLIN  SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNOLIN,R12             EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,OLINSAVE             LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     OLIN                    *\n*\nOLINSAVE DS    18F                     *\n* ------------------------------------------------------------------ *\nOLIN     PUT   ASAPOUT,MSG000          WRITE REPORT RECORD\n         AP    OLINCTR,P1              ADD 1 TO LINE CTR\n         CP    OLINCTR,PAGELEN         HAS PAGELEN BEEN REACHED?\n         BNE   RTNOLIN@                NO, RETURN TO CALLER\n         @CALL RTNOHDR                 CALL ASAOUT HEADER ROUTINE\n* ------------------------------------------------------------------ *\nRTNOLIN@ EQU   *\n         @FILL AREA=MSG000,CHAR=40\n*\nRTNOLIN0 L     R13,4(R13)              *\n         RETURN (14,12)                *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n*\n         LTORG                         IEBASAPJ\n*\nLENOLIN  EQU   *-RTNOLIN\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------ *\nRTNOHDR  SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNOHDR,R12             EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,OHDRSAVE             LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     OHDR                    *\n*\nOHDRSAVE DS    18F                     *\n* ------------------------------------------------------------------ *\nOHDR     TIME  DEC,ZONE=LT             *\n         ST    R1,@R1                  *\n         UNPK  DATE,@R1                *\n         SRA   R0,4(0)                 *\n         ST    R0,@R0                  *\n         OI    @R0+3,X'0F'             *\n         UNPK  TIME,@R0                *\n*\n         MVC   DATE+2(2),DATE+3        *\n         MVI   DATE+4,C'.'             *\n         MVC   HDR0DATE,DATE+2         *\n         MVC   TIME+0(2),TIME+2        *\n         MVC   TIME+3(2),TIME+4        *\n         MVI   TIME+2,C':'             *\n         MVI   TIME+5,C':'             *\n         MVC   HDR0TIME,TIME           *\n*\n         MVC   HDR0LVL,ASAPLVL         *\n         MVC   HDR0DDN,DDNOUT\n*\n         AP    OPAGCTR,P1\n         OI    OPAGCTR+2,X'0F'\n         UNPK  HDR0PAGE,OPAGCTR        *\n         PUT   ASAPOUT,RPTHDR0         WRITE REPORT HEADER 0\n*\n         @FILL AREA=MSG000A,CHAR=40    CLEAR OUTPUT RECORD\n         PUT   ASAPOUT,MSG000          WRITE BLANK OUTPUT RECORD\n*\n         @FILL AREA=MSG000A,CHAR=60    DASH OUTPUT RECORD\n         PUT   ASAPOUT,MSG000          WRITE DASHED OUTPUT RECORD\n*\n         @FILL AREA=MSG000A,CHAR=40    CLEAR OUTPUT RECORD\n         PUT   ASAPOUT,MSG000          WRITE BLANK OUTPUT RECORD\n*\n         ZAP   OLINCTR,P4              SET LINE COUNTER TO 4\n* ------------------------------------------------------------------ *\nRTNOHDR@ EQU   *\n*\nRTNOHDR0 L     R13,4(R13)              *\n         RETURN (14,12)                *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n*\n         LTORG                         IEBASAPI\n*\nLENOHDR  EQU   *-RTNOHDR\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPK": {"ttr": 2310, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------ *\n* ENTRY CODE OF 0 INDICATES ALLOCATION                               *\n*   - GET THE DSN OF THE GLOBAL CSI                                  *\n*   - ENQUEUE THE GLOBAL CSI DATA SET                                *\n*   - OPEN THE GLOBAL CSI                                            *\n*   - VERFIY THAT THE DATA SET CONTAINS SMP/E DATA                   *\n*   - MODIFY THE ACB FOR FULL-KEY, DIRECT ACCESS                     *\n*                                                                    *\n* ENTRY CODE OF 4 INDICATES DEALLOCATION                             *\n*   - MODIFY THE ACB FOR GENERIC KEY, SEQUENTIAL ACCESS              *\n*   - CLOSE THE GLOBAL CSI                                           *\n*   - DEQUEUE THE GLOBAL CSI DATA SET                                *\n*                                                                    *\n* ANY ERROR CAUSES THE ROUTINE TO RETURN A NON-ZERO (4) RETURN CODE. *\n* ------------------------------------------------------------------ *\nRTNGBL   SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNGBL,R12              EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,GBLSAVE              LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     GBL                     *\n*\nGBLSAVE  DS    18F                     *\n* ------------------------------------------------------------------ *\nGBL      MVI    REFGBL,C'N'            RESET ERROR FLAG\n         C      R1,F0                  IS ENTRY FOR ALLOCATION?\n         BZ     RGJFCB                 YES,\n         C      R1,F4                  IS ENTRY FOR DEALLOCATION?\n         BZ     RGMOD2                 YES,\n*\n         @ERROR RTNERR,RTNGBL@,GK,0    /GBLZONE/ENTCODE///\n* ------------------------------------------------------------------ *\nRGJFCB   @FILL AREA=GBLDSN,CHAR=00     CLEAR DSN WORK AREA\n         @FILL AREA=GBLVOL,CHAR=00     CLEAR VOLSER WORK AREA\n*\n         RDJFCB (GBLACB)               READ JFCB FOR GLOBAL\n         LTR   R15,R15                 WAS RDJFCB SUCESSFULL?\n         BNZ   RGJERR                  NO,\n*\n         MVC   GBLDSN,JFCB+0           COPY DSN\n         MVC   GBLVOL,JFCB+118         COPY VOLSER\n         B     RGENQ                   *\n*\nRGJERR   EQU   *\n         @ERROR RTNERR,RTNGBL@,GJG,0   /GBLZONE/RDJFCB/GBLACB//\n* ------------------------------------------------------------------ *\nRGENQ    MVC   QNAME,GIMSMP            SET RNAME\n         MVC   RNAMEDSN,GBLDSN         SET QNAME\n*\n         XR    R3,R3                   *\n         XR    R4,R4                   *\n         LA    R3,RNAMEDSN             LOAD ADDR OF DSN\nRGENQDSN CLI   0(R3),X'40'             IS THIS POSITION A BLANK?\n         BE    RGENQLEN                YES,\n         CLI   0(R3),X'00'             IS THIS POSITION A NULL?\n         BE    RGENQLEN                YES,\n         C     R4,F44                  HAVE WE CHECKED ALL POSITIONS?\n         BE    RGEDERR                 YES,\n         LA    R3,1(,R3)               POINT TO NEXT POSITION\n         A     R4,F1                   ADD 1 TO COUNTER\n         B     RGENQDSN                CHECK NEXT POSITION\nRGENQLEN ST    R4,RNAMELEN             SAVE LENGTH OF DSN\n*\n         ENQ   (QNAME,RNAME,E,0,SYSTEMS),RET=USE\n*\n         LTR   R15,R15                 WAS ENQUEUE SUCESSFUL?\n         BZ    RGOPN                   YES,\n*\nRGEERR   EQU   *\n         @ERROR RTNERR,RTNGBL@,GEG,0   /GBLZONE/ENQUEUE/GBLACB//\n*\nRGEDERR  EQU   *\n         @ERROR RTNERR,RTNGBL@,GEGD,0  /GBLZONE/ENQUEUE/GBLACB/DSNAME/\n* ------------------------------------------------------------------ *\nRGOPN    XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         OPEN  (GBLACB)                OPEN ASAP DATABASE\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RGGET                   YES,\n*\nRGOERR   LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB ACB=GBLACB,AREA=ERROR,LENGTH=4,FIELDS=(ERROR)\n         LTR   R15,R15                 WAS SHOWACB SUCCESSFUL?\n         BZ    RGOFDBK                 YES,\n*\n         @ERROR RTNERR,RGDEQ,GSG1,0    /GBLZONE/SHOWCB/GBLACB/#1/\n*\nRGOFDBK  L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RGDEQ,GOGR,0    /GBLZONE/OPEN/GBLRPL/REGS/\n* ------------------------------------------------------------------ *\nRGGET    @FILL AREA=GBLREC,CHAR=00     *\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         GET   RPL=GBLRPL              READ RECORD FROM GLOBAL ZONE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RGGCKGR                 YES,\n*\nRGGERR   LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=GBLRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWRPL SUCCESSFUL?\n         BZ    RGGFDBK                 YES,\n*\n         @ERROR RTNERR,RGCLOSE,GSG2,0  /GBLZONE/SHOWCB/GBLRPL/#2/\n*\nRGGFDBK  L     R4,FEEDBACK             SAVE FEEDBACK CODE\n*\n         @ERROR RTNERR,RGCLOSE,GRGR,0  /GBLZONE/GET/GBLRPL/REGS/\n*\nRGGCKGR  CLC   GKEYDATA,ZPOOL          IS THIS THE ZPOOL RECORD?\n         BE    RGMOD1                  YES,\n*\n         @ERROR RTNERR,RGCLOSE,GRGC,0  /GBLZONE/GET/GBLRPL/NOTCSI/\n* ------------------------------------------------------------------ *\nRGMOD1   MODCB RPL=GBLRPL,KEYLEN=24,OPTCD=(FKS,DIR)\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RTNGBL0                 YES,\n*\n         @ERROR RTNERR,RGCLOSE,GMG1,0  /GBLZONE/MODCB/GBLRPL/#1/\n* ------------------------------------------------------------------ *\nRGMOD2   MODCB RPL=GBLRPL,KEYLEN=14,OPTCD=(GEN,SEQ)\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RGCLOSE                 YES,\n*\n         @ERROR RTNERR,RGCLOSE,GMG2,0  /GBLZONE/MODCB/GBLRPL/#2/\n* ------------------------------------------------------------------ *\nRGCLOSE  XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         CLOSE (GBLACB)                OPEN ASAP DATABASE\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RGDEQ                   YES,\n*\nRGCERR   LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB ACB=GBLACB,AREA=ERROR,LENGTH=4,FIELDS=(ERROR)\n         LTR   R15,R15                 WAS SHOWACB SUCCESSFUL?\n         BZ    RGCFDBK                 YES,\n*\n         @ERROR RTNERR,RGDEQ,GSG3,0    /GBLZONE/SHOWCB/GBLACB/#3/\n*\nRGCFDBK  L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RGDEQ,GCGR,0    /GBLZONE/CLOSE/GBLRPL/REGS/\n* ------------------------------------------------------------------ *\nRGDEQ    MVC   QNAME,GIMSMP            SET RNAME\n         MVC   RNAMEDSN,GBLDSN         SET QNAME\n*\n         XR    R3,R3                   *\n         XR    R4,R4                   *\n         LA    R3,RNAMEDSN             LOAD ADDR OF DSN\nRGDEQDSN CLI   0(R3),X'40'             IS THIS POSITION A BLANK?\n         BE    RGDEQLEN                YES,\n         CLI   0(R3),X'00'             IS THIS POSITION A NULL?\n         BE    RGDEQLEN                YES,\n         C     R4,F44                  HAVE WE CHECKED ALL POSITIONS?\n         BE    RGDDERR                 YES,\n         LA    R3,1(,R3)               POINT TO NEXT POSITION\n         A     R4,F1                   ADD 1 TO COUNTER\n         B     RGDEQDSN                CHECK NEXT POSITION\nRGDEQLEN ST    R4,RNAMELEN             SAVE LENGTH OF DSN\n*\n         DEQ   (QNAME,RNAME,0,SYSTEMS),RET=HAVE\n*\n         LTR   R15,R15                 WAS DEQUEUE SUCESSFUL?\n         BZ    RTNGBL@                 YES,\n*\nRGDERR   EQU   *\n         @ERROR RTNERR,RTNGBL@,GFG,0   /GBLZONE/DEQUEUE/GBLACB//\n*\nRGDDERR  EQU   *\n         @ERROR RTNERR,RTNGBL@,GFGD,0  /GBLZONE/DEQUEUE/GBLACB/DSNAME/\n* ------------------------------------------------------------------ *\nRTNGBL@  CLI   REFGBL,C'Y'             WAS THE ERROR FLAG SET?\n         BE    RTNGBL4                 YES,\n* ------------------------------------------------------------------ *\nRTNGBL0  L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n* ------------------------------------------------------------------ *\nRTNGBL4  L     R13,4(R13)              *\n         RETURN (14,12),,RC=4          *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n*\n         LTORG                         *\n*\nLENGBL   EQU   *-RTNGBL\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPL": {"ttr": 2314, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------ *\n* ENTRY CODE OF 0 INDICATES ALLOCATION                               *\n*   - CHECK TO SEE IF REQUESTED ZONE RECORD IS IN GLOBAL ZONE        *\n*   - ENQUEUE THE REQZONE CSI DATA SET                               *\n*   - DYNAMICALLY ALLOCATE THE REQUESTED ZONE CSI DATA SET           *\n*   - OPEN THE REQZONE CSI                                           *\n*   - VERFIY THAT THE DATA SET CONTAINS SMP/E DATA                   *\n*   - VERFIY THAT THE DATA SET CONTAINS THE REQUESTED ZONE           *\n*   - MODIFY THE ACB FOR FULL-KEY, DIRECT ACCESS                     *\n*                                                                    *\n* ENTRY CODE OF 4 INDICATES DEALLOCATION                             *\n*   - MODIFY THE ACB FOR GENERIC KEY, SEQUENTIAL ACCESS              *\n*   - CLOSE THE REQZONE CSI                                          *\n*   - DEQUEUE THE REQZONE CSI DATA SET                               *\n*                                                                    *\n* ANY ERROR CAUSES THE ROUTINE TO RETURN A NON-ZERO (4) RETURN CODE. *\n* ------------------------------------------------------------------ *\nRTNZONE  SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNZONE,R12             EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,ZONESAVE             LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     ZONE                    *\n*\nZONESAVE DS    18F                     *\n* ------------------------------------------------------------------ *\nZONE     MVI    REFZONE,C'N'           RESET ERROR FLAG\n         C      R1,F0                  IS ENTRY FOR ALLOCATION?\n         BZ     RZCHKZON               YES,\n         C      R1,F4                  IS ENTRY FOR DEALLOCATION?\n         BZ     RZMOD2                 YES,\n*\n         @ERROR RTNERR,RTNZONE@,ZK,0   /ZONEZONEE/ENTCODE///\n* ------------------------------------------------------------------ *\nRZCHKZON @FILL AREA=GBLREC,CHAR=00     ZERO GLOBAL ZONE RECORD AREA\n*\n         MVC   GZONEID,=XL2'0000'      INSERT ZONEID\n         MVC   GRTYP,=XL2'0300'        INSERT RECORD TYPE\n         MVC   GKEYDATA,GLOBAL         INSERT RECORD NAME\n         MVC   GRSUBTYP,=XL2'2010'     INSERT RECORD SUSBTYPE\n         MVC   GSEQNO,=XL2'0000'       INSERT SEQUENCE NUMBER\n         MVC   GDATA(8),CNTLZONE       INSERT REQUESTED ZONENAME\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         GET   RPL=GBLRPL              READ RECORD FROM GLOBAL ZONE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RZENQ                   YES,\n*\nRZGERR   LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=GBLRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWCB SUCCESSFUL?\n         BZ    RZGFDBK                 YES,\n*\n         @ERROR RTNERR,RTNZONE@,ZSG,0  /ZONE/SHOWCB/GBLRPL//\n*\nRZGFDBK  L     R4,FEEDBACK             SAVE FEEDBACK CODE\n         CLC   FEEDBACK,F16            WAS FEEDBACK A 16?\n         BE    RZQERR                  YES, REQZONE NOT PRESENT\n*\n         @ERROR RTNERR,RTNZONE@,ZRGR,0 /ZONE/GET/GBLRPL/REGS/\n*\nRZQERR   EQU   *\n         @ERROR RTNERR,RTNZONE@,ZRZQ,0 /ZONE/GET/GBLRPL/NOREQZONE/\n* ------------------------------------------------------------------ *\nRZENQ    @FILL AREA=ZONEDATA,CHAR=00   CLEAR WORK AREA\n*\n         MVC   ZONEDATA,GDATA          GET DATA FROM GLOBAL ZONE RECORD\n         TR    ZONEDATA,TRTAB1         TRANSLATE ALL X'00' TO X'40'\n*\n         MVC   QNAME,GIMSMP            SET QNAME\n         MVC   RNAMEDSN,ZONEDSN        SET RNAME\n*\n         XR    R3,R3                   *\n         XR    R4,R4                   *\n         LA    R3,RNAMEDSN             LOAD ADDR OF DSN\nRZENQDSN CLI   0(R3),X'40'             IS THIS POSTIION A BLANK?\n         BE    RZENQLEN                YES,\n         CLI   0(R3),X'00'             IS THIS POSITION A NULL?\n         BE    RZENQLEN                YES,\n         C     R4,F44                  HAVE WE CHECKED ALL POSITIONS?\n         BE    RZEDERR                 YES,\n         LA    R3,1(,R3)               POINT TO NEXT POSITION\n         A     R4,F1                   ADD 1 TO COUNTER\n         B     RZENQDSN                CHECK NEXT POSITION\nRZENQLEN ST    R4,RNAMELEN             SAVE LENGTH OF DSN\n*\n         ENQ   (QNAME,RNAME,E,0,SYSTEMS),RET=USE\n*\n         LTR   R15,R15                 WAS ENQUEUE SUCESSFUL?\n         BZ    RZDYNAM                 YES,\n*\nRZEERR   EQU   *\n         CLI   3(R15),X'08'            ALREADY HAVE ENQUEUE?\n         BE    RZDYNAM                 YES, MULTI ZONES IN CSI\n         CLI   3(R15),X'14'            ALREADY HAVE ENQUEUE?\n         BE    RZDYNAM                 YES, MULTI ZONES IN CSI\n         @ERROR RTNERR,RTNZONE@,ZEZ,0  /ZONE/ENQUEUE/ZONEACB//\n*\nRZEDERR  EQU   *\n         @ERROR RTNERR,RTNZONE@,ZEZD,0 /ZONE/ENQUEUE/ZONEACB/DSNAME/\n* ------------------------------------------------------------------ *\nRZDYNAM  MVC   P01DATA,ZONEDDN         INSERT DDNAME IN S99 PARMLIST\n         MVC   P02DATA,ZONEDSN         INSERT DSNAME IN S99 PARMLIST\n         MVC   P07DATA,BLANKS          CLEAR VOLSER RETURN AREA\n         LA    R1,S99PTR               LOAD ADDR OF S99 PARMLIST\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         DYNALLOC                      CALL DYNAMIC ALLOCATION\n         LTR   R15,R15                 WAS ALLOCATION SUCCESSFUL?\n         BZ    RZOPN                   YES,\n*\n         @ERROR RTNERR,RZDEQ,ZAZR,0    /ZONE/DYNALLOC/ZONEACB/REGS/\n* ------------------------------------------------------------------ *\nRZOPN    MVC   ZONEACB+40(8),ZONEDDN   USE ZONENAME FOR DDNAME\n*\n         XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         OPEN  (ZONEACB)               OPEN ASAP DATABASE\n         LTR   R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RZGET1                  YES,\n*\nRZOERR   LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB ACB=ZONEACB,AREA=ERROR,LENGTH=4,FIELDS=(ERROR)\n         LTR   R15,R15                 WAS SHOWACB SUCCESSFUL?\n         BZ    RZOFDBK                 YES,\n*\n         @ERROR RTNERR,RZDEQ,ZSZ1,0    /ZONE/SHOWCB/ZONEACB/#1/\n*\nRZOFDBK  L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RZDEQ,ZOZR,0    /ZONE/OPEN/ZONEACB/REGS/\n* ------------------------------------------------------------------ *\nRZGET1   XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         GET   RPL=ZONERPL             READ RECORD FROM GLOBAL ZONE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RZGCKZR1                YES,\n*\nRZGERR1  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ZONERPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWRPL SUCCESSFUL?\n         BZ    RZGFDBK1                YES,\n*                                      *\n         @ERROR RTNERR,RZCLOSE,ZSZ2,0  /ZONE/SHOWCB/ZONERPL/#2/\n*\nRZGFDBK1 L     R4,FEEDBACK             SAVE FEEDBACK CODE\n*\n         @ERROR RTNERR,RZCLOSE,ZRZR,1 /ZONE/GET/ZONERPL/REGS/\n*\nRZGCKZR1 CLC   ZKEYDATA,ZPOOL          IS THIS THE ZPOOL1 RECORD?\n         BE    RZGET2                  YES,\n*\n         @ERROR RTNERR,RZCLOSE,ZRZC,0  /ZONE/GET/ZONERPL/NOTCSI/\n* ------------------------------------------------------------------ *\nRZGET2   XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         GET   RPL=ZONERPL             READ RECORD FROM ZONE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RZGCKZR2                YES,\n*\nRZGERR2  LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ZONERPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWRPL SUCCESSFUL?\n         BZ    RZGFDBK2                YES,\n*                                      *\n         @ERROR RTNERR,RZCLOSE,ZSZ3,0  /ZONE/SHOWCB/ZONERPL/#3/\n*\nRZGFDBK2 L     R4,FEEDBACK             SAVE FEEDBACK CODE\n*\n         @ERROR RTNERR,RZCLOSE,ZRZR,1  /ZONE/GET/ZONERPL/REGS/\n*\nRZGCKZR2 CLC   =XL4'00000200',ZONEKEY  IS THIS A ZONE RECORD?\n         BE    RZGCKZR3                YES,\n         BH    RZGET2                  NOT YET,\n*\n         @ERROR RTNERR,RZCLOSE,ZRZZ,0  /ZONE/GET/ZONERPL/NOZONE/\n*\nRZGCKZR3 CLC   ZDATA(8),ZONEDDN        IS DDNAME'S RECORD PRESENT?\n         BNE   RZGET2                  NO, TRY AGAIN\n         MVC   ZONEID,ZONEREC+4        YES, GET ZONEID KEY\n* ------------------------------------------------------------------ *\nRZMOD1   MODCB RPL=ZONERPL,KEYLEN=24,OPTCD=(FKS,DIR)\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RTNZONE0                YES,\n*\n         @ERROR RTNERR,RZCLOSE,ZMZ1,0  /ZONE/MODCB/ZONERPL/#1/\n* ------------------------------------------------------------------ *\nRZMOD2   MODCB RPL=ZONERPL,KEYLEN=14,OPTCD=(GEN,SEQ)\n         LTR   R15,R15                 WAS MODIFY SUCCESSFUL?\n         BZ    RZCLOSE                 YES,\n*\n         @ERROR RTNERR,RZCLOSE,XMZ2,0  /ZONE/MODCB/ZONERPL/#1/\n* ------------------------------------------------------------------ *\nRZCLOSE  XR    R3,R3                   CLEAR REG 3\n         XR    R4,R4                   CLEAR REG 4\n*\n         CLOSE (ZONEACB)               OPEN ASAP DATABASE\n         LTR  R15,R15                 WAS OPEN SUCCESSFUL?\n         BZ    RZDEQ                   YES,\n*\nRZCERR   LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB ACB=ZONEACB,AREA=ERROR,LENGTH=4,FIELDS=(ERROR)\n         LTR   R15,R15                 WAS SHOWACB SUCCESSFUL?\n         BZ    RZCFDBK                 YES,\n*\n         @ERROR RTNERR,RZDEQ,ZSZ4,0    /ZONE/SHOWCB/ZONEACB/#4/\n*\nRZCFDBK  L     R4,ERROR                SAVE ERROR CODE\n*\n         @ERROR RTNERR,RZDEQ,ZCGR,0    /ZONE/OPEN/ZONERPL/REGS/\n* ------------------------------------------------------------------ *\nRZDEQ    MVC   QNAME,GIMSMP            SET QNAME\n         MVC   RNAMEDSN,ZONEDSN        SET RNAME\n*\n         XR    R3,R3                   *\n         XR    R4,R4                   *\n         LA    R3,RNAMEDSN             LOAD ADDR OF DSN\nRZDEQDSN CLI   0(R3),X'40'             IS THIS POSTIION A BLANK?\n         BE    RZDEQLEN                YES,\n         CLI   0(R3),X'00'             IS THIS POSITION A NULL?\n         BE    RZDEQLEN                YES,\n         C     R4,F44                  HAVE WE CHECKED ALL POSITIONS?\n         BE    RZDDERR                 YES,\n         LA    R3,1(,R3)               POINT TO NEXT POSITION\n         A     R4,F1                   ADD 1 TO COUNTER\n         B     RZDEQDSN                CHECK NEXT POSITION\nRZDEQLEN ST    R4,RNAMELEN             SAVE LENGTH OF DSN\n*\n         DEQ   (QNAME,RNAME,0,SYSTEMS),RET=HAVE\n*\n         LTR   R15,R15                 WAS DEQUEUE SUCESSFUL?\n         BZ    RTNZONE@                YES,\n*\nRZDERR   EQU   *\n         @ERROR RTNERR,RTNZONE@,ZFZ,0  /XREF/DEQUEUE/ZONEACB//\n*\nRZDDERR  EQU   *\n         @ERROR RTNERR,RTNZONE@,ZFZ,0  /XREF/DEQUEUE/ZONEACB/DSNAME/\n* ------------------------------------------------------------------ *\nRTNZONE@ CLI   REFZONE,C'Y'\n         BE    RTNZONE4\n* ------------------------------------------------------------------ *\nRTNZONE0 L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n* ------------------------------------------------------------------ *\nRTNZONE4 L     R13,4(R13)              *\n         RETURN (14,12),,RC=4          *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n*\n         LTORG                         *\n*\nLENZONE  EQU   *-RTNZONE\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPM": {"ttr": 2564, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------ *\n* SUBROUTINE TO READ RECORDS FROM THE GLOBAL ZONE                    *\n*                                                                    *\n* RETURN CODES:                                                      *\n*   0 - RECORD FOUND                                                 *\n*   4 - RECORD NOT FOUND                                             *\n*   8 - ERROR                                                        *\n* ------------------------------------------------------------------ *\nRTNRDG   SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNRDG,R12              EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,RDGSAVE              LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     RDG                     *\n*\nRDGSAVE  DS    18F                     *\n* ------------------------------------------------------------------ *\nRDG      MVI   REFRDG,C'N'\n* ------------------------------------------------------------------ *\nRDGLOBAL XR    R3,R3                   *\n         XR    R4,R4                   *\n*\n         GET   RPL=GBLRPL              READ RECORD FROM REQUESTED ZONE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RTNRDG0                 YES,\n*\n         LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=GBLRPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWRPL SUCCESSFUL?\n         BZ    RDGFDBK                 YES,\n*\n         @ERROR RTNERR,RTNRDG8,RSG,0   /READZONE/SHOWCB/GBLRPL//\n*\nRDGFDBK  L     R4,FEEDBACK             SAVE FEEDBACK CODE\n         CLC   FEEDBACK,F16            WAS FEEDBACK A 16?\n         BE    RTNRDG4                 YES, RECORD NOT FOUND\n*\n         @ERROR RTNERR,RTNRDG8,RRGR,0  /READZONE/GET/GBLRPL/REGS/\n* ------------------------------------------------------------------ *\nRTNRDG0  L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n* ------------------------------------------------------------------ *\nRTNRDG4  L     R13,4(R13)              *\n         RETURN (14,12),,RC=4          *\n* ------------------------------------------------------------------ *\nRTNRDG8  L     R13,4(R13)              *\n         RETURN (14,12),,RC=8          *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n*\n         LTORG                         *\n*\nLENRDG   EQU   *-RTNRDG\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBASAPN": {"ttr": 2566, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------ *\n* SUBROUTINE TO READ RECORDS FROM THE REQUESTED ZONE                 *\n*                                                                    *\n* RETURN CODES:                                                      *\n*   0 - RECORD FOUND                                                 *\n*   4 - RECORD NOT FOUND                                             *\n*   8 - ERROR                                                        *\n* ------------------------------------------------------------------ *\nRTNRDZ   SAVE  (14,12),,*              SAVE CALLERS REGS IN SAVEAREA #1\n*\n         LR    R12,R15                 LOAD ROUTINE ENTRY POINT ADDR\n         USING RTNRDZ,R12              EST ROUTINE ADDRESSABILITY\n*\n         LA    R2,RDZSAVE              LOAD ADDR OF OUR SAVEAREA\n         ST    R13,4(R2)               SAVE ADDR OF CALLER SAVEAREA IN\n*                                      OUR SAVEAREA\n         ST    R2,8(R13)               SAVE ADDR OF OUR SAVEAREA IN\n*                                      CALLER SAVEAREA\n         LR    R13,R2                  LOAD ADDR OF OUR SAVEAREA IN R13\n*\n         USING DCBAREA,R9              R9 SHOULD POINT TO DCB AREA\n         USING WORKAREA,R10            R10 SHOULD POINT TO WORK AREA\n         B     RDZ                     *\n*\nRDZSAVE  DS    18F                     *\n* ------------------------------------------------------------------ *\nRDZ      MVI   REFRDZ,C'N'\n* ------------------------------------------------------------------ *\nRDZONE   XR    R3,R3                   *\n         XR    R4,R4                   *\n*\n         GET   RPL=ZONERPL             READ RECORD FROM REQUESTED ZONE\n         LTR   R15,R15                 WAS GET SUCCESSFUL?\n         BZ    RTNRDZ0                 YES,\n*\n         LR    R3,R15                  SAVE RETURN CODE\n         SHOWCB RPL=ZONERPL,AREA=FEEDBACK,LENGTH=4,FIELDS=(FDBK)\n         LTR   R15,R15                 WAS SHOWRPL SUCCESSFUL?\n         BZ    RDZFDBK                 YES,\n*\n         @ERROR RTNERR,RTNRDZ8,RSZ,0   /READZONE/SHOWCB/ZONERPL//\n*\nRDZFDBK  L     R4,FEEDBACK             SAVE FEEDBACK CODE\n         CLC   FEEDBACK,F16            WAS FEEDBACK A 16?\n         BE    RTNRDZ4                 YES, RECORD NOT FOUND\n*\n         @ERROR RTNERR,RTNRDZ8,RRZR,0  /READZONE/GET/ZONERPL/REGS/\n* ------------------------------------------------------------------ *\nRTNRDZ0  L     R13,4(R13)              *\n         RETURN (14,12),,RC=0          *\n* ------------------------------------------------------------------ *\nRTNRDZ4  L     R13,4(R13)              *\n         RETURN (14,12),,RC=4          *\n* ------------------------------------------------------------------ *\nRTNRDZ8  L     R13,4(R13)              *\n         RETURN (14,12),,RC=8          *\n* ------------------------------------------------------------------ *\n         DROP  R9\n         DROP  R10\n         DROP  R12\n*\n         LTORG                         *\n*\nLENRDZ   EQU   *-RTNRDZ\n* ------------------------------------------------------------------ *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLCNVT": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13\\x7f\\x00\\x91\\x13\\x7f\\x15Y\\x00\\x07\\x00\\x07\\x00\\x00\\xe5\\xc5\\xd9\\xf1\\xf1\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-17T00:00:00", "modifydate": "1991-05-17T15:59:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "VER1104"}, "text": "//*                                                                      JCLCNVT\n//ZCASAP   EXEC  PGM=ASAPCNVT                                            JCLCNVT\n//STEPLIB  DD  DISP=SHR,DSN=your.program.load.library                    JCLCNVT\n//OLDASAP  DD  DISP=OLD,DSN=dataset.of.old.format.asap                   JCLCNVT\n//NEWASAP  DD  DISP=OLD,DSN=dataset.of.new.format.asap                   JCLCNVT\n/*                                                                       JCLCNVT\n//                                                                       JCLCNVT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCLCNV2": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13\\x7f\\x00\\x91\\x13\\x7f\\x15Y\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe5\\xc5\\xd9\\xf1\\xf1\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-17T00:00:00", "modifydate": "1991-05-17T15:59:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "VER1104"}, "text": "//*\n//STEP1    EXEC  PGM=IEFBR14\n//OLDDATA  DD  DSN=dsn.of.the.old.data,DISP=(NEW,CATLG),\n//         UNIT=SYSDA,SPACE=(TRK,(5,1)),\n//         DCB=(RECFM=FB,LRECL=72,BLKSIZE=9000)\n//NEWDATA  DD  DSN=dsn.of.the.new.data,DISP=(NEW,CATLG),\n//         UNIT=SYSDA,SPACE=(TRK,(5,1)),\n//         DCB=(RECFM=FB,LRECL=72,BLKSIZE=9000)\n//*\n//STEP2    EXEC  PGM=IDCAMS\n//SYSPRINT DD  SYSOUT=*\n//ASAPDB   DD  DSN=asap.data.base,DISP=SHR\n//SYSIN    DD  *\n  REPRO INFILE(ASAPDB) OUTDATASET(dsn.of.the.old.data)\n/*\n//STEP3    EXEC  PGM=ASAPCNV2\n//STEPLIB  DD  DISP=SHR,DSN=your.program.load.library\n//OLDASAP  DD  DISP=OLD,DSN=dsn.of.the.old.data\n//NEWASAP  DD  DISP=OLD,DSN=dsn.of.the.new.data\n/*\n//STEP4    EXEC  PGM=IDCAMS\n//SYSPRINT DD  SYSOUT=*\n//ASAPDB   DD  DSN=asap.data.base,DISP=SHR\n//SYSIN    DD  *\n  REPRO INDATASET(dsn.of.the.new.data) OUTFILE(ASAPDB) REPLACE\n/*\n//STEP5    EXEC  PGM=IEFBR14\n//OLDDATA  DD  DSN=dsn.of.the.old.data,DISP=(OLD,KEEP)\n//NEWDATA  DD  DSN=dsn.of.the.new.data,DISP=(OLD,KEEP)\n//*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCL0": {"ttr": 2572, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13\\x7f\\x00\\x91\\x13\\x7f\\x15Y\\x00:\\x00:\\x00\\x00\\xe5\\xc5\\xd9\\xf1\\xf1\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-17T00:00:00", "modifydate": "1991-05-17T15:59:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "VER1104"}, "text": "//*                                                                         JCL0\n//* THIS JCL IS USED TO LOAD AND PROCESS THE MAIN ASAP DATABASE.            JCL0\n//* THE USER SHOULD CUSTOMIZE A COPY OF THIS JCL TO MEET THEIR              JCL0\n//* DAY TO DAY ASAP PROCESSING REQUIREMENTS.                                JCL0\n//*                                                                         JCL0\n//* ITEMS IN LOWER CASE ARE INTENDED TO BE CUSTOMIZED BY THE USER.          JCL0\n//*                                                                         JCL0\n//ALLOCDB  EXEC  PGM=IDCAMS                                                 JCL0\n//SYSPRINT DD  SYSOUT=*                                                     JCL0\n//volser   DD  DISP=SHR,UNIT=3380,VOL=SER=volser                            JCL0\n//PRIMER   DD  DISP=SHR,DSN=primer.data.set                                 JCL0\n//SYSIN    DD *                                                             JCL0\n DELETE asap.data.base CLUSTER                                              JCL0\n DEFINE CLUSTER( NAME(asap.data.base)         -                             JCL0\n                 FREESPACE(25,5) KEYS(16 0)          -                      JCL0\n                 RECORDSIZE(72 72)                  -                       JCL0\n                 SHAREOPTIONS(2)                     -                      JCL0\n                 VOLUMES(volser) )                   -                      JCL0\n        DATA   ( NAME(asap.data.base.DATA) -                                JCL0\n                 CONTROLINTERVALSIZE(4096)           -                      JCL0\n                 TRACKS(5 1) )                   -                          JCL0\n        INDEX  ( NAME(asap.data.base.INDEX) -                               JCL0\n                 TRACKS(1  1) IMBED )                                       JCL0\n  REPRO OUTDATASET(asap.data.base) IFILE(PRIMER)                            JCL0\n/*                                                                          JCL0\n//SUMSORT  EXEC  SORTV,OUT='*'                                              JCL0\n//*----------------------------------------------------------------*//      JCL0\n//*-----     DATA IS SUM-SORTED TO REMOVE DUPLICATES          -----*//      JCL0\n//*----------------------------------------------------------------*//      JCL0\n//SORTIN   DD  DISP=SHR,DSN=dataset.of.asap.data                            JCL0\n//SORTOUT  DD  DISP=SHR,DSN=dataset.of.summed.asap.data                     JCL0\n//SYSIN    DD *                                                             JCL0\n  SORT FIELDS=(1,70,CH,A)                                                   JCL0\n  SUM FIELDS=NONE                                                           JCL0\n/*                                                                          JCL0\n//sort     EXEC  SORTV,OUT='*'                                              JCL0\n//*----------------------------------------------------------------*//      JCL0\n//*-----     DATA IS SORTED BY: YEAR(A),MONTH(A),DAY(A),      -----*//      JCL0\n//*-----                        FLDA(A),FMID(A),FLDB(A)       -----*//      JCL0\n//*----------------------------------------------------------------*//      JCL0\n//SORTIN   DD  DISP=SHR,DSN=dataset.of.summed.asap.data                     JCL0\n//SORTOUT  DD  DISP=SHR,DSN=dataset.of.summed.asap.data                     JCL0\n//SYSIN    DD *                                                             JCL0\n  SORT FIELDS=(52,2,CH,A,46,2,CH,A,49,2,CH,A,                               JCL0\n                1,7,CH,A,30,7,CH,A,21,7,CH,A)                               JCL0\n  END                                                                       JCL0\n/*                                                                          JCL0\n//ZCASAP   EXEC  PGM=IEBASAP                                                JCL0\n//STEPLIB  DD  DISP=SHR,DSN=your.program.load.library                       JCL0\n//ASAPOUT  DD  SYSOUT=*                                                     JCL0\n//ASAPRPT  DD  SYSOUT=*                                                     JCL0\n//ASAPCDS  DD  DSN=asap.data.base,DISP=SHR                                  JCL0\n//ASAPUPD  DD  DISP=SHR,DSN=dataset.of.summed.asap.data                     JCL0\n//SMPCSI   DD  DISP=SHR,DSN=the.smpe.global.csi                             JCL0\n//SYSIN    DD  *                                                            JCL0\n  ***** commands go here *****                                              JCL0\n/*                                                                          JCL0\n//                                                                          JCL0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCL1": {"ttr": 2574, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x13\\x7f\\x00\\x91\\x13\\x7f\\x15Y\\x00\\x10\\x00\\x10\\x00\\x00\\xe5\\xc5\\xd9\\xf1\\xf1\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-17T00:00:00", "modifydate": "1991-05-17T15:59:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "VER1104"}, "text": "//*                                                                         JCL1\n//* THIS JCL IS USED TO EXECUTE JUST THE IEBASAP PROGRAM.                   JCL1\n//* THE USER SHOULD CUSTOMIZE A COPY OF THIS JCL TO MEET THEIR              JCL1\n//* DAY TO DAY ASAP PROCESSING REQUIREMENTS.                                JCL1\n//*                                                                         JCL1\n//ZCASAP   EXEC  PGM=IEBASAP                                                JCL1\n//STEPLIB  DD  DISP=SHR,DSN=your.program.load.library                       JCL1\n//ASAPOUT  DD  SYSOUT=*                                                     JCL1\n//ASAPRPT  DD  SYSOUT=*                                                     JCL1\n//ASAPCDS  DD  DSN=asap.data.base,DISP=SHR                                  JCL1\n//ASAPUPD  DD  DISP=SHR,DSN=dataset.of.summed.asap.data                     JCL1\n//SMPCSI   DD  DISP=SHR,DSN=the.smpe.global.csi                             JCL1\n//SYSIN    DD  *                                                            JCL1\n  ***** commands go here *****                                              JCL1\n/*                                                                          JCL1\n//                                                                          JCL1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "KEYT": {"ttr": 2576, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                              KEYT\n&NAME    KEYT  &KEYWORD,&RTN,&AREA,&TYPE,&VALCNT,&FIELD1=,&FIELD2=,    X    KEYT\n               &FIELD3=,&FIELD4=,&FIELD5=,&FIELD6=,&FIELD7=,           X    KEYT\n               &FIELD8=,&FIELD9=,&FIELD10=,&FIELD11=,&FIELD12=,        X    KEYT\n               &FIELD13,&FIELD14=,&FIELD15=,&END=,                     X    KEYT\n               &LEN=                                                        KEYT\n         LCLA  &KVVN,&CNTR1,&KVLL,&CNTR2                                    KEYT\n         LCLC  &P1,&P2,&P3,&P4,&LEN1,&LEN2                                  KEYT\n         AIF   ('&SYSLIST(1)' NE '').KVRM020 ONLY REQUIRED KEYWORD          KEYT\n         MNOTE 8,'1ST PARM MISSING AND IS REQUIRED'                         KEYT\n         MEXIT                                                              KEYT\n.KVRM020 ANOP                                                               KEYT\n&KVLL    SETA  K'&SYSLIST(1)-1     SET KEYWORD LENGTH-1                     KEYT\n&NAME    DC    AL1(&KVLL)          KEY LENGTH-1                             KEYT\n         AIF   ('&SYSLIST(2)' NE '').KVRM030 IS EXIT RTN SPECIFIED          KEYT\n         DC    SL2(0)              EXIT RTN NOT SPECIFIED                   KEYT\n         DC    SL2(0)              EXIT PARM NOT SPECIFIED                  KEYT\n         AGO   .KVRM049                                                     KEYT\n.KVRM030 ANOP                                                               KEYT\n         DC    SL2(&SYSLIST(2,1))  EXIT ROUTINE ADDR                        KEYT\n         AIF   (N'&SYSLIST(2) NE 1).KVRM046                                 KEYT\n         DC    SL2(0)              NO RTN PARM INFO REQUESTED               KEYT\n         AGO   .KVRM049                                                     KEYT\n.KVRM046 ANOP                                                               KEYT\n         DC    SL2(&SYSLIST(2,2))  EXIT RTN PARM SPECIFIED                  KEYT\n.KVRM049 ANOP                                                               KEYT\n         AIF   ('&SYSLIST(3)' NE '').KVRM050                                KEYT\n         DC    SL2(0)              NO AREA SPECIFIED                        KEYT\n         AGO   .KVRM060                                                     KEYT\n.KVRM050 ANOP                                                               KEYT\n         DC    SL2(&AREA)          AREA ADDR SPECIFIED                      KEYT\n.KVRM060 ANOP                                                               KEYT\n         AIF   ('&LEN' NE '').KVRM070                                       KEYT\n         DC    AL1(0)              VALUE LENGTH LOW DEFAULT                 KEYT\n         DC    AL1(0)              VALUE LENGTH HIGH DEFAULT                KEYT\n         AGO   .KVRM078                                                     KEYT\n.KVRM070 ANOP                                                               KEYT\n&LEN1    SETC  '&LEN(1)'                                                    KEYT\n&LEN2    SETC  '&LEN(2)'                                                    KEYT\n         AIF   ('&LEN1' NE '').KVRM074                                      KEYT\n         DC    AL1(1)              VALUE LENGTH LOW IMPLIED                 KEYT\n         AGO   .KVRM077                                                     KEYT\n.KVRM074 ANOP                                                               KEYT\n         DC    AL1(&LEN1)          VALUE LENGTH LOW SPECIFIED               KEYT\n.KVRM076 ANOP                                                               KEYT\n         AIF   ('&LEN2' NE '').KVRM077                                      KEYT\n         DC    AL1(&LEN1)          VALUE LENGTH HIGH SPECIFIED              KEYT\n         AGO   .KVRM078                                                     KEYT\n.KVRM077 ANOP                                                               KEYT\n         DC    AL1(&LEN2)          VALUE LENGTH HIGH SPECIFIED              KEYT\n.KVRM078 ANOP                                                               KEYT\n         AIF   (N'&SYSLIST(5) NE 0).KVRM090 VALUE COUNT SPECIFIED           KEYT\n         DC    AL1(1)              VALUE COUNT LOW DEFAULT                  KEYT\n         DC    AL1(1)              VALUE COUNT HIGH DEFAULT                 KEYT\n         AGO   .KVRM110                                                     KEYT\n.KVRM090 ANOP                                                               KEYT\n         AIF   (N'&SYSLIST(5) NE 1).KVRM094                                 KEYT\n         AIF   ('&SYSLIST(5,1)' EQ '(').KVRM094                             KEYT\n         DC    AL1(0)              VALUE COUNT LOW IMPLIED                  KEYT\n         DC    AL1(&VALCNT)        VALUE COUNT HIGH SPECIFIED               KEYT\n         AGO   .KVRM110                                                     KEYT\n.KVRM094 ANOP                                                               KEYT\n         AIF   ('&SYSLIST(5,1)' EQ ')').KVRM096                             KEYT\n         DC    AL1(&SYSLIST(5,1))  VALUE COUNT LOW                          KEYT\n         DC    AL1(&SYSLIST(5,2))  VALUE COUNT HIGH                         KEYT\n         AGO   .KVRM110                                                     KEYT\n.KVRM096 ANOP                                                               KEYT\n         DC    AL1(&SYSLIST(5,1))  VALUE COUNT HIGH                         KEYT\n.KVRM110 ANOP                                                               KEYT\n         AIF   ('&SYSLIST(4)' NE '').KVRM120                                KEYT\n         DC    X'00'               NO VALUE VALIDATION REQUESTED            KEYT\n         AGO   .KVRM160                                                     KEYT\n.KVRM120 ANOP                                                               KEYT\n         AIF   ('&SYSLIST(4)' NE 'ALPHA').KVRM130                           KEYT\n         DC    X'01'               ALPHA VALIDATION REQUESTED               KEYT\n         AGO   .KVRM160                                                     KEYT\n.KVRM130 ANOP                                                               KEYT\n         AIF   ('&SYSLIST(4)' NE 'NUMERIC').KVRM140                         KEYT\n         DC    X'02'               NUMERIC VALIDATION REQUESTED             KEYT\n         AGO   .KVRM160                                                     KEYT\n.KVRM140 ANOP                                                               KEYT\n         AIF   ('&SYSLIST(4)' NE 'ALPHANUM').KVRM150                        KEYT\n         DC    X'03'               ALPHANUM VALIDATION REQUESTED            KEYT\n         AGO   .KVRM160                                                     KEYT\n.KVRM150 ANOP                                                               KEYT\n         MNOTE 8,'INVALID VALIDATION TYPE SPECIFIED  &TYPE'                 KEYT\n.KVRM160 ANOP                                                               KEYT\n         AIF   ('&FIELD1' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD2' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD3' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD4' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD5' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD6' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD7' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD8' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD9' EQ '' ).KVRM166                                   KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD10' EQ '' ).KVRM166                                  KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD11' EQ '' ).KVRM166                                  KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD12' EQ '' ).KVRM166                                  KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD13' EQ '' ).KVRM166                                  KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD14' EQ '' ).KVRM166                                  KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n         AIF   ('&FIELD15' EQ '' ).KVRM166                                  KEYT\n&KVVN    SETA  &KVVN+1                                                      KEYT\n.KVRM166 ANOP                                                               KEYT\n         DC    AL1(&KVVN)          COUNT OF FIELDS SPECIFIED                KEYT\n         DC    C'&KEYWORD'         REQUESTED KEYWORD                        KEYT\n         AGO   .KVRM300                                                     KEYT\n.KVRM180 ANOP                                                               KEYT\n         AIF   ('&END' NE 'YES').KVRM190                                    KEYT\n         DC    X'FFFF'             END OF TABLE INDICATIOR                  KEYT\n.KVRM190 ANOP                                                               KEYT\n         MEXIT                                                              KEYT\n.KVRM300 ANOP                                                               KEYT\n         AIF   ('&FIELD1' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  1                                                            KEYT\n&P1      SETC  '&FIELD1(1)'                                                 KEYT\n&P2      SETC  '&FIELD1(2)'                                                 KEYT\n&P3      SETC  '&FIELD1(3)'                                                 KEYT\n&P4      SETC  '&FIELD1(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM320 ANOP                                                               KEYT\n         AIF   ('&FIELD2' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  2                                                            KEYT\n&P1      SETC  '&FIELD2(1)'                                                 KEYT\n&P2      SETC  '&FIELD2(2)'                                                 KEYT\n&P3      SETC  '&FIELD2(3)'                                                 KEYT\n&P4      SETC  '&FIELD2(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM330 ANOP                                                               KEYT\n         AIF   ('&FIELD3' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  3                                                            KEYT\n&P1      SETC  '&FIELD3(1)'                                                 KEYT\n&P2      SETC  '&FIELD3(2)'                                                 KEYT\n&P3      SETC  '&FIELD3(3)'                                                 KEYT\n&P4      SETC  '&FIELD3(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM340 ANOP                                                               KEYT\n         AIF   ('&FIELD4' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  4                                                            KEYT\n&P1      SETC  '&FIELD4(1)'                                                 KEYT\n&P2      SETC  '&FIELD4(2)'                                                 KEYT\n&P3      SETC  '&FIELD4(3)'                                                 KEYT\n&P4      SETC  '&FIELD4(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM350 ANOP                                                               KEYT\n         AIF   ('&FIELD5' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  5                                                            KEYT\n&P1      SETC  '&FIELD5(1)'                                                 KEYT\n&P2      SETC  '&FIELD5(2)'                                                 KEYT\n&P3      SETC  '&FIELD5(3)'                                                 KEYT\n&P4      SETC  '&FIELD5(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM360 ANOP                                                               KEYT\n         AIF   ('&FIELD6' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  6                                                            KEYT\n&P1      SETC  '&FIELD6(1)'                                                 KEYT\n&P2      SETC  '&FIELD6(2)'                                                 KEYT\n&P3      SETC  '&FIELD6(3)'                                                 KEYT\n&P4      SETC  '&FIELD6(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM370 ANOP                                                               KEYT\n         AIF   ('&FIELD7' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  7                                                            KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM380 ANOP                                                               KEYT\n         AIF   ('&FIELD8' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  8                                                            KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM390 ANOP                                                               KEYT\n         AIF   ('&FIELD9' EQ '').KVRM180                                    KEYT\n&CNTR1   SETA  9                                                            KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM3A0 ANOP                                                               KEYT\n         AIF   ('&FIELD10' EQ '').KVRM180                                   KEYT\n&CNTR1   SETA  10                                                           KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM3B0 ANOP                                                               KEYT\n         AIF   ('&FIELD11' EQ '').KVRM180                                   KEYT\n&CNTR1   SETA  11                                                           KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM3C0 ANOP                                                               KEYT\n         AIF   ('&FIELD12' EQ '').KVRM180                                   KEYT\n&CNTR1   SETA  12                                                           KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM3D0 ANOP                                                               KEYT\n         AIF   ('&FIELD13' EQ '').KVRM180                                   KEYT\n&CNTR1   SETA  13                                                           KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM3E0 ANOP                                                               KEYT\n         AIF   ('&FIELD14' EQ '').KVRM180                                   KEYT\n&CNTR1   SETA  14                                                           KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM3F0 ANOP                                                               KEYT\n         AIF   ('&FIELD15' EQ '').KVRM180                                   KEYT\n&CNTR1   SETA  15                                                           KEYT\n&P1      SETC  '&FIELD7(1)'                                                 KEYT\n&P2      SETC  '&FIELD7(2)'                                                 KEYT\n&P3      SETC  '&FIELD7(3)'                                                 KEYT\n&P4      SETC  '&FIELD7(4)'                                                 KEYT\n         AGO   .KVRM500                                                     KEYT\n.KVRM500 ANOP                                                               KEYT\n         AIF   ('&P1' NE '').KVRM720                                        KEYT\n         DC    X'00'               NO VALUE IS SPECIFIED                    KEYT\n         AGO   .KVRM730                                                     KEYT\n.KVRM720 ANOP                                                               KEYT\n&CNTR2   SETA  K'&P1                                                        KEYT\n         DC    AL1(&CNTR2)         LENGTH OF VALUE SPECIFIED                KEYT\n.KVRM730 ANOP                                                               KEYT\n         AIF   ('&P2' EQ '').KVRM900                                        KEYT\n         AIF   ('&P2' NE 'N').KVRM750                                       KEYT\n         DC    X'01'               N  OP CODE                               KEYT\n         AGO   .KVRM800                                                     KEYT\n.KVRM750 ANOP                                                               KEYT\n         AIF   ('&P2' NE 'O').KVRM760                                       KEYT\n         DC    X'02'               O  OP CODE                               KEYT\n         AGO   .KVRM800                                                     KEYT\n.KVRM760 ANOP                                                               KEYT\n         AIF   ('&P2' NE 'M').KVRM770                                       KEYT\n         DC    X'03'               M  OP CODE                               KEYT\n         AGO   .KVRM800                                                     KEYT\n.KVRM770 ANOP                                                               KEYT\n         AIF   ('&P2' NE 'X').KVRM780                                       KEYT\n         DC    X'04'               X OP CODE                                KEYT\n         AGO   .KVRM800                                                     KEYT\n.KVRM780 ANOP                                                               KEYT\n         MNOTE 8,'INVALID OP SPECIFIED IN FIELDN='                          KEYT\n         MEXIT                                                              KEYT\n.KVRM800 ANOP                                                               KEYT\n         AIF   ('&P3' NE '').KVRM820                                        KEYT\n         MNOTE 8,'TO ADDR REQ AND NOT SPECIFIED IN FIELDN='                 KEYT\n         MEXIT                                                              KEYT\n.KVRM820 ANOP                                                               KEYT\n         DC    SL2(&P3)            TO ADDRESS                               KEYT\n         AIF   ('&P4' NE '').KVRM830                                        KEYT\n         MNOTE 8,'FROM ADDR REQ AND NOT SPECIFIED IN FIELDN='               KEYT\n         MEXIT                                                              KEYT\n.KVRM830 ANOP                                                               KEYT\n         DC    SL2(&P4)            FROM ADDRESS                             KEYT\n         DC    AL2(L'&P3)          LENGTH OF TO ADDRESS                     KEYT\n.KVRM834 ANOP                                                               KEYT\n         AIF   ('&P1' NE '').KVRM840                                        KEYT\n         AGO   .KVRM950                                                     KEYT\n.KVRM840 ANOP                                                               KEYT\n         DC    C'&P1'              VALUE CONSTANT                           KEYT\n         AGO   .KVRM950                                                     KEYT\n.KVRM900 ANOP                                                               KEYT\n         AIF   ('&P3' EQ '').KVRM920                                        KEYT\n         MNOTE 8,'MISSING PARMS IN FIELDN= PARAMETER'                       KEYT\n         MEXIT                                                              KEYT\n.KVRM920 ANOP                                                               KEYT\n         AIF   ('&P4' EQ '').KVRM930                                        KEYT\n         MNOTE 8,'MISSING PARMS IN FIELDN= PARAMETER'                       KEYT\n         MEXIT                                                              KEYT\n.KVRM930 ANOP                                                               KEYT\n         DC    X'00'               NO OP CODE                               KEYT\n         DC    SL2(0)              NO TO ADDR                               KEYT\n         DC    SL2(0)              NO FROM ADDR                             KEYT\n         DC    SL2(0)              NO TO LENGTH                             KEYT\n.KVRM950 ANOP                                                               KEYT\n         AIF   (&CNTR1 EQ 1).KVRM320                                        KEYT\n         AIF   (&CNTR1 EQ 2).KVRM330                                        KEYT\n         AIF   (&CNTR1 EQ 3).KVRM340                                        KEYT\n         AIF   (&CNTR1 EQ 4).KVRM350                                        KEYT\n         AIF   (&CNTR1 EQ 5).KVRM360                                        KEYT\n         AIF   (&CNTR1 EQ 6).KVRM370                                        KEYT\n         AIF   (&CNTR1 EQ 7).KVRM380                                        KEYT\n         AIF   (&CNTR1 EQ 8).KVRM390                                        KEYT\n         AIF   (&CNTR1 EQ 9).KVRM3A0                                        KEYT\n         AIF   (&CNTR1 EQ 10).KVRM3B0                                       KEYT\n         AIF   (&CNTR1 EQ 11).KVRM3C0                                       KEYT\n         AIF   (&CNTR1 EQ 12).KVRM3D0                                       KEYT\n         AIF   (&CNTR1 EQ 13).KVRM3E0                                       KEYT\n         AIF   (&CNTR1 EQ 14).KVRM3F0                                       KEYT\n         AIF   (&CNTR1 EQ 15).KVRM180                                       KEYT\n         MEND                                                               KEYT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KEYVAL": {"ttr": 2821, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                            KEYVAL\n&NAME    KEYVAL &STRING,&TABLE,&PRINT=OFF                                 KEYVAL\n         GBLC  &KVRCSEC            CSECT NAME                             KEYVAL\n         LCLC  &CSNAME             OUTER CSECT NAME                       KEYVAL\n         LCLB  &KVRCSON            LOCAL SWITCH FOR CSECT GENERATION      KEYVAL\n.**********************************************************************   KEYVAL\n.***                                                                ***   KEYVAL\n.***  MACRO  NAME: KEYWORD VALIDATION ROUTINE                       ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  GENERAL FUNCTION: TO VALIDATE A CHARACTER STRING CONTAINING   ***   KEYVAL\n.***                    KEYWORDS AND VALUES AND PERFORM REQUESTED   ***   KEYVAL\n.***                    OPERATIONS AS SPECIFIED IN THE KEYWORD      ***   KEYVAL\n.***                    VALIDATION TABLE DEFINED WITH ONE OR MORE   ***   KEYVAL\n.***                    KEYT MACROS.  THIS MACRO EXPANDS TO AN      ***   KEYVAL\n.***                    INDEPENDENT CSECT UPON INITIAL INVOCATION   ***   KEYVAL\n.***                    AND IS ACCESSED VIA V-TYPE ADDRESSING       ***   KEYVAL\n.***                    FOR SUBSEQUENT INVOCATIONS.  THERE ARE 2    ***   KEYVAL\n.***                    BASIC PARTS TO THIS MACRO.  THE FIRST PART  ***   KEYVAL\n.***                    SETS UP THE APPROPRIATE PARMS BASED UPON    ***   KEYVAL\n.***                    THE USER PARAMETERS SUPPLIED.  THE SECOND   ***   KEYVAL\n.***                    PART DOES THE STRING MANIPULATION, PERFORMS ***   KEYVAL\n.***                    THE REQUESTED FUNCTIONS AND SETS RETURN     ***   KEYVAL\n.***                    CODES.                                      ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  ENTRY REGS:   R1                                              ***   KEYVAL\n.***  (PART 1)      R2                                              ***   KEYVAL\n.***                R3                                              ***   KEYVAL\n.***                R4                                              ***   KEYVAL\n.***                R5                                              ***   KEYVAL\n.***                R6                                              ***   KEYVAL\n.***                R7                                              ***   KEYVAL\n.***                R8                                              ***   KEYVAL\n.***                R9                                              ***   KEYVAL\n.***                R10                                             ***   KEYVAL\n.***                R11                                             ***   KEYVAL\n.***                R12                                             ***   KEYVAL\n.***                R13  SAVE AREA                                  ***   KEYVAL\n.***                R14                                             ***   KEYVAL\n.***                R15                                             ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  ENTRY REGS:   R0   AL4  ADDR OF CHAR STRING                   ***   KEYVAL\n.***  (PART 2)      R1   AL4  ADDRESS OF 1ST KEYT ENTRY             ***   KEYVAL\n.***                R2                                              ***   KEYVAL\n.***                R3                                              ***   KEYVAL\n.***                R4                                              ***   KEYVAL\n.***                R5                                              ***   KEYVAL\n.***                R6                                              ***   KEYVAL\n.***                R7                                              ***   KEYVAL\n.***                R8                                              ***   KEYVAL\n.***                R9                                              ***   KEYVAL\n.***                R10                                             ***   KEYVAL\n.***                R11                                             ***   KEYVAL\n.***                R12                                             ***   KEYVAL\n.***                R13  SAVE AREA                                  ***   KEYVAL\n.***                R14  RETURN ADDRESS                             ***   KEYVAL\n.***                R15  ENTRY ADDRESS                              ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  REGISTER USAGE:  R0   WORK                                    ***   KEYVAL\n.***                   R1   WORK                                    ***   KEYVAL\n.***                   R2   WORK                                    ***   KEYVAL\n.***                   R3   CHAR STRING LENGTH                      ***   KEYVAL\n.***                   R4   CHAR STRING ADDRESS                     ***   KEYVAL\n.***                   R5   WORK                                    ***   KEYVAL\n.***                   R6   WORK                                    ***   KEYVAL\n.***                   R7   WORK                                    ***   KEYVAL\n.***                   R8   WORK                                    ***   KEYVAL\n.***                   R9   SAVED RETURN CODE                       ***   KEYVAL\n.***                   R10  WORK                                    ***   KEYVAL\n.***                   R11  PROGRAM BASE                            ***   KEYVAL\n.***                   R12  WORKAREA BASE                           ***   KEYVAL\n.***                   R13  OLD SAVEAREA                            ***   KEYVAL\n.***                   R14  KEYWORD TABLE BASE                      ***   KEYVAL\n.***                   R15  RETURN CODE                             ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  AUTHOR: E STEWART                DATE: 05/29/80               ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  ATTRIBUTES: RENT,REUS,REFR                                    ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  CALLED BY: UTILITY FUNCTION                                   ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  MACROS USED: GETMAIN,FREEMAIN                                 ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  ROUTINES CALLED: NONE                                         ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  NORMAL EXIT: BR R14                                           ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  EXIT REGS:     R0   AL4  ADDR OF KEYWORD IN CHAR STRING WHERE ***   KEYVAL\n.***                           VALIDATION ERROR OCCURED             ***   KEYVAL\n.***                 R1   AL4  ADDR OF VALUE IN CHAR STRING WHERE   ***   KEYVAL\n.***                           VALIDATION ERROR OCCURED             ***   KEYVAL\n.***                 R15       00  KEYWORD(S)VALUE(S) FOUND AND     ***   KEYVAL\n.***                               OP(S) PERFORMED                  ***   KEYVAL\n.***                           04  KEYWORD(S) FOUND, SOME VALUE NOT ***   KEYVAL\n.***                               FOUND IN KEYT                    ***   KEYVAL\n.***                           08  A KEYWORD WAS NOT FOUND IN KEYT  ***   KEYVAL\n.***                           12  'VALCNT' DID NOT PASS VALIDATION ***   KEYVAL\n.***                           16  MORE INPUT EXPECTED, I.E. ONLY   ***   KEYVAL\n.***                               BLANKS, COMMENTS, OR ),BLANK WAS ***   KEYVAL\n.***                               FOUND. OTHERWISE RC=00 WOULD HAVE***   KEYVAL\n.***                               BEEN RETURNED.                   ***   KEYVAL\n.***                           20  'TYPE' DID NOT PASS VALIDATION.  ***   KEYVAL\n.***                           24  'LEN' DID NOT PASS VALIDATION.   ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  ABEND CODES: NONE (I HOPE)                                    ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  MESSAGES ISSUED: NONE                                         ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  DSECTS/MACROS USED: NONE FROM AN EXTERNAL SOURCE              ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***  SPECIAL NOTES:                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.***                                                                ***   KEYVAL\n.**********************************************************************   KEYVAL\n         AIF   ('&KVRCSEC' NE '').KVRBALR CSECT ALREADY ASSIGNED          KEYVAL\n&KVRCSEC SETC  'KVR'.'&SYSNDX'   SET CSECT NAME                           KEYVAL\n&KVRCSON SETB  1                   SAY CSECT ASSIGNED THIS PASS           KEYVAL\n.KVRBALR ANOP                                                             KEYVAL\n         AIF   (N'&SYSLIST(1) EQ  1 AND N'&SYSLIST(2) EQ 1).KVRM010       KEYVAL\n         MNOTE 8,'OPERAND SUBLISTS NOT PERMITTED'                         KEYVAL\n         MEXIT                                                            KEYVAL\n.KVRM010 ANOP                                                             KEYVAL\n         AIF   ('&NAME' EQ '').KVRM014                                    KEYVAL\n&NAME    DS    0H                  SET LABEL NAME                         KEYVAL\n.KVRM014 ANOP                                                             KEYVAL\n         AIF   ('&SYSLIST(1)' EQ '(0)' OR '&SYSLIST(1)' EQ '(R0)').KVRMX  KEYVAL\n               040           STRING AND LENGTH ALREADY OK                 KEYVAL\n         AIF   ('&SYSLIST(1)' EQ '(0)' OR '&SYSLIST(2)' EQ '(R0)').KVRMX  KEYVAL\n               020                CHAR STRING ALREADY IN R0               KEYVAL\n         AIF   ('&STRING'(1,1) EQ '(').KVRM016 REG NOTATION               KEYVAL\n         LA    0,&STRING           GET ADDR OF CHAR STRING                KEYVAL\n         AGO   .KVRM020                                                   KEYVAL\n.KVRM016 ANOP                                                             KEYVAL\n         LR    0,&STRING           GET ADDR OF CHAR STRING                KEYVAL\n.KVRM020 ANOP                                                             KEYVAL\n         AGO   .KVRM040                                                   KEYVAL\n.KVRM040 ANOP                                                             KEYVAL\n         AIF   ('&SYSLIST(2)' EQ '(1)' OR '&SYSLIST(2)' EQ '(R1)').KVRMX  KEYVAL\n               060                                                        KEYVAL\n         AIF   ('&TABLE'(1,1) EQ '(').KVRM050 REG NOTATION                KEYVAL\n         LA    1,&TABLE            KEYWORD TABLE ADDRESS                  KEYVAL\n         AGO   .KVRM060                                                   KEYVAL\n.KVRM050 ANOP                                                             KEYVAL\n         LR    1,&TABLE            KEYWORD TABLE ADDRESS                  KEYVAL\n.KVRM060 ANOP                                                             KEYVAL\n         L     15,=V(&KVRCSEC)     GET CSECT NAME                         KEYVAL\n         BALR  14,15               GO TO VALIDATION ROUTINE               KEYVAL\n         AIF   (NOT(&KVRCSON)).NOGO TERMINATE IF ALREADY EXPANDED         KEYVAL\n         PUSH  USING,PRINT                                                KEYVAL\n         AIF   ('&PRINT' EQ 'ON').KVRM070 NO LIST                         KEYVAL\n         PRINT OFF                 TURN PRINT OFF                         KEYVAL\n         AGO   .KVRM072                                                   KEYVAL\n.KVRM070 ANOP                                                             KEYVAL\n         PRINT ON,GEN              TURN ON PRINT                          KEYVAL\n.KVRM072 ANOP                                                             KEYVAL\n&CSNAME  SETC  '&SYSECT'                                                  KEYVAL\n&KVRCSEC CSECT                                                            KEYVAL\n         USING *,11                SET UP BASE                            KEYVAL\n         STM   14,12,12(13)        SAVE REGS                              KEYVAL\n         LR    11,15               GET BASE ADDRESS                       KEYVAL\n         USING KVDSVR,14           TABLE ADDRESS BASE                     KEYVAL\n         USING KVWAVR,12           WORKAREA BASE                          KEYVAL\n         GETMAIN R,LV=KVWALNTH     GET WORKAREA                           KEYVAL\n         LR    12,1                PUT INTO BASE REG                      KEYVAL\n         L     4,20(13)            GET STRING ADDRESS INTO REG 4          KEYVAL\n         SR    3,3                 CLEAR WORK REG                         KEYVAL\n         ICM   3,3,0(4)            GET STRING LENGTH                      KEYVAL\n         LA    4,2(,4)             BUMP OVER STRING LENGTH                KEYVAL\n         MVI   KVWAFL1,0           CLEAR FLAG BYTE                        KEYVAL\n         MVI   KVWAKWVA,0          CLEAR COUNT BYTE                       KEYVAL\n         MVC   KVWASAV1(4*13),20(13) SAVE REGS 0-12                       KEYVAL\n         MVC   KVWASAV1+(4*14)(4*2),12(13) SAVE REGS 14-15                KEYVAL\n         ST    13,KVWASAV1+(4*13)  SAVE REG 13 FROM CALLER                KEYVAL\nKVR004   DS    0H                                                         KEYVAL\n         L     14,24(13)           TABLE ADDRESS                          KEYVAL\n         XC    0(KVWACLR,12),0(12)   CLEAR WORKAREA                       KEYVAL\n         LTR   3,3                 Q. ANY DATA TO SCAN                    KEYVAL\n         BP    KVR005              A. YES, CONTINUE AS NORMAL             KEYVAL\n         LA    9,16                SET BAD RC                             KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR005   DS    0H                                                         KEYVAL\n         SR    2,2                 CLEAR FOR LATER                        KEYVAL\n         ST    4,KVWALOC           SAVE STRING LOC                        KEYVAL\n         ST    4,KVWAKEY           SAVE STRING LOC                        KEYVAL\n         BCTR  3,0                 REDUCE BY ONE                          KEYVAL\n         EX    3,KVTR1VR           SEARCH FOR NON BLANK                   KEYVAL\n         LA    3,1(,3)             GET ORIG LENGTH                        KEYVAL\n         CLM   2,1,KVAX00          Q. ANYTHING FOUND                      KEYVAL\n         BNE   KVR006              A. YES, SEE WHAT IT IS                 KEYVAL\n         LA    9,16                SET BLANKS RETURN CODE                 KEYVAL\n         B     KVR900              RETURN TO CALLER                       KEYVAL\nKVR006   DS    0H                                                         KEYVAL\n         LR    5,1                 SAVE REG 1                             KEYVAL\n         SR    1,4                 GET NEW                                KEYVAL\n         SR    3,1                 DATA LENGTH                            KEYVAL\n         LR    4,5                 GET NEW LOCATION                       KEYVAL\n         CLM   2,1,KVASLASH        Q. COULD THIS BE COMMENT               KEYVAL\n         BNE   KVR020              A. NO, CONTINUE                        KEYVAL\n         CLI   1(4),C'*'           Q .WAS THIS A COMMENT                  KEYVAL\n         BE    KVR008              A. YES, CONTINUE                       KEYVAL\n         LA    9,8                 SAY INVALID KEYWORD                    KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR008   DS    0H                  VALIDATE COMMENT                       KEYVAL\n         LA    4,2(4)              BUMP OVER /*                           KEYVAL\n         BCTR  3,0                 REDUCE COUNT                           KEYVAL\n         BCTR  3,0                 REDUCE COUNT                           KEYVAL\nKVR010   DS    0H                                                         KEYVAL\n         CLI   0(4),C'*'           Q. IS IT REALLY A COMMENT              KEYVAL\n         BE    KVR014              A. YES, CONTINUE                       KEYVAL\nKVR012   DS    0H                                                         KEYVAL\n         LA    4,1(4)              BUMP ADDRESS                           KEYVAL\n         BCT   3,KVR010            LOOP THROUGH                           KEYVAL\n         LA    9,8                 SET RETURN CODE                        KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR014   DS 0H                                                            KEYVAL\n         CLI   1(4),C'/'           Q. IS 2ND CHAR A SLASH                 KEYVAL\n         BNE   KVR012              A. NO, CONTINUE SCAN FOR END           KEYVAL\n         LA    4,2(4)              BUMP OVER */                           KEYVAL\n         BCTR  3,0                 REDUCE COUNT                           KEYVAL\n         BCTR  3,0                 REDUCE COUNT                           KEYVAL\n         B     KVR005              AND CONTINUE SCAN                      KEYVAL\nKVR020   DS    0H                  VALIDATE CHARACTERS FOUND              KEYVAL\n         ST    4,KVWALOC           SAVE STRING ADDR                       KEYVAL\n         ST    4,KVWAKEY           SAVE STRING ADDR                       KEYVAL\n         SR    5,5                 CLEAR FOR KEYWORD COMPARE              KEYVAL\n         SR    6,6                 CLEAR FOR KEYWORD COMPARE              KEYVAL\n         SR    7,7                 CLEAR FOR KEYWORD COMPARE              KEYVAL\nKVR022   DS    0H                                                         KEYVAL\n         IC    5,KVLL0001          GET KEYWORD LEN                        KEYVAL\n         EX    5,KVCVR             Q. KEYWORD FOUND                       KEYVAL\n         BE    KVR080              A. YES,CONTINUE                        KEYVAL\nKVR023   DS    0H                                                         KEYVAL\n         IC    6,KVVN0001          GET COUNT OF VALUE ENTRIES             KEYVAL\n         LA    14,0(14,5)          BUMP OVER VARIABLE KEYWORD             KEYVAL\n         LTR   6,6                 Q. ANY MORE VALUES TO DO               KEYVAL\n         BZ    KVR028              A. NO, CONTINUE AS IS                  KEYVAL\nKVR024   DS    0H                                                         KEYVAL\n         IC    7,KVVL0001          LENGTH OF VALUE KEYWORD                KEYVAL\n         LA    14,KVVG0001(7,14)   BUMP OVER VALUE ENTRY                  KEYVAL\n         BCT   6,KVR024            CONTINUE THRU ALL VALUES               KEYVAL\nKVR028   DS    0H                                                         KEYVAL\n         LA    14,KVKL0001+1(14)   BUMP OVER KEYWORD ENTRY                KEYVAL\n         CLC   KVAFFFF,KVDSVR      Q. LAST ENTRY                          KEYVAL\n         BNE   KVR022              A. NO, CONTINUE SCAN                   KEYVAL\n         LA    9,8                 SET RETURN CODE                        KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR080   DS    0H                  KEYWORD FOUND                          KEYVAL\n         LA    6,1(5,4)            GO TO NEXT BYTE BEYOND KEYWORD         KEYVAL\n         CLI   0(6),C'('           Q. IS THIS DELIMITER                   KEYVAL\n         BE    KVR082              A. YES, CONTINUE                       KEYVAL\n         CLI   0(6),C' '           Q. IS THIS DELIMITER                   KEYVAL\n         BE    KVR082              A. YES, CONTINUE                       KEYVAL\n         CLI   0(6),C','           Q. IS THIS DELIMITER                   KEYVAL\n         BE    KVR082              A. YES, CONTINUE                       KEYVAL\n         LR    9,3                 CURRENT LENGTH                         KEYVAL\n         SR    9,5                 MINUS KEYWORD EX LENGTH                KEYVAL\n         BCTR  9,0                 MINUS ONE                              KEYVAL\n         LTR   9,9                 Q. ANY DATA LEFT IN STRING             KEYVAL\n         BZ    KVR082              A. NO, JUST CONTINUE NORMALLY          KEYVAL\n         SR    6,6                 CLEAR FOR LATER                        KEYVAL\n         B     KVR023              ELSE LOOK FOR ANOTHER KEYWORD          KEYVAL\nKVR082   DS    0H                                                         KEYVAL\n         SR    6,6                 CLEAR WORK REG                         KEYVAL\n         ICM   6,3,KVRA0001        GET EXIT ROUTINE ADDR                  KEYVAL\n         BZ    KVR084              BRANCH IF NOT SPECIFIED                KEYVAL\n         SRDL  6,12                GET REG INTO R6                        KEYVAL\n         SLL   6,2                 X 4                                    KEYVAL\n         LA    1,KVWASAV1          ADDR OF SAVE AREA                      KEYVAL\n         L     6,0(6,1)            GET CONTENTS OF RTN BASE REG           KEYVAL\n         SRL   7,20                SHIFT TO LOWER END                     KEYVAL\n         LA    7,0(7,6)            GET ROUTINE ADDRESS                    KEYVAL\n         ST    7,KVWARTN           SAVE RTN ADDRESS                       KEYVAL\nKVR084   DS    0H                                                         KEYVAL\n         SR    6,6                 CLEAR WORK REG                         KEYVAL\n         ICM   6,3,KVRP0001        GET EXIT ROUTINE PARM                  KEYVAL\n         BZ    KVR088              BRANCH IF NOT SPECIFIED                KEYVAL\n         SRDL  6,12                GET REG INTO R6                        KEYVAL\n         SLL   6,2                 X 4                                    KEYVAL\n         LA    1,KVWASAV1          ADDR OF SAVE AREA                      KEYVAL\n         L     6,0(6,1)            GET CONTENTS OF PARM BASE REG          KEYVAL\n         SRL   7,20                SHIFT TO LOWER END                     KEYVAL\n         LA    7,0(7,6)            GET PARM ADDRESS                       KEYVAL\n         ST    7,KVWAPRM           SAVE PARM ADDRESS                      KEYVAL\nKVR088   DS    0H                                                         KEYVAL\n         LA    4,1(5,4)            GO TO NEXT BYTE BEYOND KEYWORD         KEYVAL\n         SR    3,5                 REDUCE STRING COUNT                    KEYVAL\n         BCTR  3,0                 REDUCE STRING COUNT                    KEYVAL\n         CLI   0(4),C'('           Q. VALUE(S) SPECIFIED                  KEYVAL\n         BE    KVR110              A. YES, CONTINUE                       KEYVAL\n         CLI   KVVN0001,0          Q. ANY VALUES REQUIRED                 KEYVAL\n         BNE   KVR090              A. NO, JUST RETURN                     KEYVAL\n         SR    9,9                 SET ZERO RETURN CODE                   KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR090   DS    0H                                                         KEYVAL\n         MVI   KVWAKWVA,0          CLEAR COUNT                            KEYVAL\n         B     KVR172              GO PROCESS THIS KEYWORD                KEYVAL\nKVR110   DS    0H                  MOVE ALL VALUES TO LOCAL STORAGE       KEYVAL\n         SR    1,1                 CLEAR FOR LATER                        KEYVAL\n         MVI   KVWAKWVA,0          CLEAR COUNT                            KEYVAL\n         BCTR  3,0                 REDUCE COUNT                           KEYVAL\n         LA    4,1(4)              BUMP TO NEXT BYTE                      KEYVAL\n         CLI   0(4),C')'           Q. NULL KEYWORDS                       KEYVAL\n         BNE   KVR120              A. NO, CONTINUE NORMALLY               KEYVAL\n         B     KVR140              GO PROCESS NULL ENTRY                  KEYVAL\nKVR120   DS    0H                                                         KEYVAL\n         SR    1,1                 CLEAR FOR LATER                        KEYVAL\n         CLI   0(4),C''''          Q. QUOTED STRING FOR THIS VALUE        KEYVAL\n         BNE   KVR124              A. NO, DONT SET FLAG                   KEYVAL\n         MVI   KVWAQUO,1           SAY IN QUOTE MODE                      KEYVAL\n         LA    4,1(,4)             BUMP OVER QUOTE                        KEYVAL\n         BCTR  3,0                 REDUCE STRING COUNT                    KEYVAL\nKVR124   DS    0H                                                         KEYVAL\n         LA    2,KVWATMP           ADDR OF TEMP WORK AREA                 KEYVAL\n         LR    5,4                 SAVE OLD VALUES LOCATION               KEYVAL\n         ST    5,KVWALOC           SAVE STRING ADDR                       KEYVAL\nKVR130   DS    0H                                                         KEYVAL\n         CLI   0(4),C','           Q. COMMA DELIMITER                     KEYVAL\n         BE    KVR140              A. YES, SAVE THIS KEYWORD              KEYVAL\n         CLI   0(4),C')'           Q. TERMINATING DELIMITER               KEYVAL\n         BE    KVR140              A. YES, PROCESS END KEYWORD VALUES     KEYVAL\n         CLI   0(4),C''''          Q. END OF QUOTED STRING                KEYVAL\n         BNE   KVR134              A. NO, CONTINUE                        KEYVAL\n         LA    4,1(,4)             BUMP ADDRESS                           KEYVAL\n         BCTR  3,0                 REDUCE COUNT                           KEYVAL\n         LA    1,1(,1)             ADD 1 FOR LATER STRING MOVE            KEYVAL\n         CLI   0(4),C''''          Q. REALLY END OF STRING                KEYVAL\n         BE    KVR134              A. NO, NOT YET JUST DOUBLE QUOTES      KEYVAL\n         MVI   KVWAQUO,0           RESET QUOTE MODE FLAG                  KEYVAL\n         B     KVR130              AND CONTINUE                           KEYVAL\nKVR134   DS    0H                                                         KEYVAL\n         MVC   0(1,2),0(4)         SAVE THIS BYTE                         KEYVAL\n         LA    2,1(,2)             BUMP WORK BYTE                         KEYVAL\n         LA    4,1(4)              GO TO NEXT BYTE                        KEYVAL\n         BCT   3,KVR130            CONTINUE SCAN                          KEYVAL\n         LA    9,4                 SET RETURN CODE                        KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR140   DS    0H                  PROCESS FOUND VALUE                    KEYVAL\n         CLI   KVWAQUO,0           Q. ARE WE IN QUOTE MODE                KEYVAL\n         BNE   KVR134              A. YES, IGNORE OTHER DELIMITERS        KEYVAL\n         LR    6,4                 SAVE NEW ADDR                          KEYVAL\n         SR    6,5                 GET VALUE LENGTH                       KEYVAL\n         SR    6,1                 SUBTRACT ANY QUOTED STRING BYTES       KEYVAL\n         SR    5,5                 CLEAR WORK REG                         KEYVAL\n         ICM   5,1,KVWAKWVA        GET WORK AREA COUNT                    KEYVAL\n         BNZ   KVR146              BRANCH IF ALREADY SOME IN THERE        KEYVAL\n         LA    8,KVWAKWVA+1        GET NEXT LOC ADDRESS                   KEYVAL\n         B     KVR148              AND CONTINUE                           KEYVAL\nKVR146   DS    0H                  LOOK FOR VALUES END LOCATION           KEYVAL\n         LA    8,KVWAKWVA+1        GET START ADDRESS                      KEYVAL\n         SR    7,7                 CLEAR WORK REG                         KEYVAL\n         ICM   7,1,KVWAKWVA+1      GET LENGTH OF LAST ONE                 KEYVAL\nKVR147   DS    0H                                                         KEYVAL\n         LA    8,1(7,8)            GO TO NEXT SLOT                        KEYVAL\n         ICM   7,1,0(8)            GET NEXT LENGTH                        KEYVAL\n         BCT   5,KVR147            LOOP THRU                              KEYVAL\nKVR148   DS    0H                  MOVE NEW VALUE IN NOW                  KEYVAL\n         LTR   6,6                 Q. NULL VALUE SPECIFIED                KEYVAL\n         BNZ   KVR150              A. NO, CONTINUE MVC                    KEYVAL\n         STC   6,0(8)              SAVE NULL VALUE LENGTH                 KEYVAL\n         B     KVR160              AND UPDATE VALUES COUNT                KEYVAL\nKVR150   DS    0H                  MOVE NEW VALUES INTO WORKAREA          KEYVAL\n         L     5,KVWALOC           RESTORE STRING ADDR                    KEYVAL\n         STC   6,0(8)              SAVE STRING LENGTH                     KEYVAL\n         BCTR  6,0                 REDUCE COUNT                           KEYVAL\n         EX    6,KVM1VR            PERFORM THE MOVE                       KEYVAL\n         TM    KVVT0001,X'FF'      Q. ANY VALIDATION REQUIRED             KEYVAL\n         BZ    KVR160              A. NO, JUST CONTINUE                   KEYVAL\n         SR    2,2                 CLEAR WORK REG                         KEYVAL\n         ICM   2,1,KVVT0001        GET VALIDATION CODE                    KEYVAL\n         SLL   2,2                 X 4                                    KEYVAL\n         B     *+0(2)              GO TO VALIDATE IT                      KEYVAL\n         B     KVR154              ALPHA                                  KEYVAL\n         B     KVR156              NUMERIC                                KEYVAL\n         B     KVR158              ALPH/NUMERIC                           KEYVAL\nKVR154   DS    0H                  ALPHA VALIDATION                       KEYVAL\n         EX    6,KVTR2VR           A. ALPHA FIELD                         KEYVAL\n         BZ    KVR160              A. YES, CONTINUE                       KEYVAL\nKVR155   DS    0H                  ERROR RETURN                           KEYVAL\n         LA    9,20                SET RC                                 KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR156   DS    0H                  NUMERIC                                KEYVAL\n         EX    6,KVTR3VR           Q. NUMERIC FIELD                       KEYVAL\n         BZ    KVR160              A. YES, CONTINUE                       KEYVAL\n         B     KVR155              ELSE SET BAD RC                        KEYVAL\nKVR158   DS    0H                  ALPHA/NUMERIC                          KEYVAL\n         EX    6,KVTR4VR           Q. ALPHA/NUMERIC                       KEYVAL\n         BZ    KVR160              A. YES, CONTINUE                       KEYVAL\n         B     KVR155              ELSE ERROR RETURN                      KEYVAL\nKVR160   DS    0H                                                         KEYVAL\n         CLI   KVVLL001,0          Q. WAS VALUE LEN VALIDATION REQUSTED   KEYVAL\n         BE    KVR169              A. NO, BYPASS LENGTH VALIDATION        KEYVAL\n         LA    6,1(,6)             RESTORE FULL LENGTH                    KEYVAL\n         CLM   6,1,KVVLL001        Q. WAS LOW VALUE PRECEEDED             KEYVAL\n         BL    KVR168              A. YES, ERROR CONDITION                KEYVAL\n         CLM   6,1,KVVLH001        Q. WAS HIGH VALUE EXCEEDED             KEYVAL\n         BH    KVR168              A. YES, ERROR CONDITION                KEYVAL\n         B     KVR169              VALUE LENGTH PASSED VALIDATION         KEYVAL\nKVR168   DS    0H                                                         KEYVAL\n         LA    9,24                SET VALUE ERROR                        KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR169   DS    0H                                                         KEYVAL\n         IC    7,KVWAKWVA          GET CURRENT COUNT                      KEYVAL\n         LA    7,1(,7)             ADD ONE                                KEYVAL\n         STC   7,KVWAKWVA          AND SAVE THE COUNT                     KEYVAL\n         CLI   0(4),C')'           Q. WAS IT ENDING DELIMETER             KEYVAL\n         BE    KVR170              A. YES, TERMINATE SCAN                 KEYVAL\n         LA    4,1(,4)             BUMP OVER COMMA                        KEYVAL\n         BCTR  3,0                 REDUCE STRING LENGTH                   KEYVAL\n         B     KVR120              CONTINUE FOR MORE KEYWORDS             KEYVAL\nKVR170   DS    0H                  PROCESS ENDING DELIMITER               KEYVAL\n         LA    4,1(,4)             BUMP OVER )                            KEYVAL\n         BCTR  3,0                 REDUCE COUNT                           KEYVAL\nKVR172   DS    0H                  PROCESS ENDING DELIMITER               KEYVAL\n         SR    5,5                 CLEAR WORK REG                         KEYVAL\n         SR    6,6                 CLEAR WORK REG                         KEYVAL\n         ICM   5,1,KVHV0001        GET VALUE(S) COUNT HIGH NUMBER         KEYVAL\n         BNZ   KVR180              GO HERE IF NOT ZERO COUNT              KEYVAL\n         CLM   5,1,KVWAKWVA        Q. WAS COUNT FOUND ALSO ZERO           KEYVAL\n         BE    KVR180              A. YES, CONTINUE WITHOUT ERROR YET     KEYVAL\nKVR174   DS    0H                                                         KEYVAL\n         LA    9,12                SAY COUNT EXCEEDED                     KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR180   DS    0H                                                         KEYVAL\n         CLM   5,1,KVWAKWVA        Q. HIGH COUNT EXCEEDED                 KEYVAL\n         BL    KVR174              A. YES, ERROR AND GET OUT              KEYVAL\n         ICM   5,1,KVLV0001        GET LOW VALUE(S) COUNT                 KEYVAL\n         BZ    KVR182              GET OUT IF ZERO COUNT                  KEYVAL\n         CLM   5,1,KVWAKWVA        Q. COUNT LESS THAN LOW VALUE           KEYVAL\n         BH    KVR174              A. YES, GET OUT WITH ERROR             KEYVAL\nKVR182   DS    0H                                                         KEYVAL\n         ICM   5,3,KVAA0001        Q. IS THERE AN AREA PROVIDED           KEYVAL\n         BZ    KVR200              A. NO, JUST CONTINUE                   KEYVAL\n         SR    6,6                 CLEAR WORK REG                         KEYVAL\n         SR    7,7                 CLEAR WORK REG                         KEYVAL\n         ICM   6,3,KVAA0001        GET WORKAREA ADDRESS                   KEYVAL\n         SRDL  6,12                GET REG NO. INTO R2                    KEYVAL\n         SLL   6,2                 X 4                                    KEYVAL\n         LA    1,KVWASAV1          ADDR OF SAVE AREA                      KEYVAL\n         L     6,0(6,1)            GET CONTENTS OF AREA BASE REG          KEYVAL\n         SRL   7,20                SHIFT TO LOWER END                     KEYVAL\n         LA    6,0(7,6)            GET WORKAREA ADDRESS                   KEYVAL\n         LA    5,KVWAKWVA          GET MY AREA ADDRESS                    KEYVAL\n         SR    2,2                 CLEAR WORK REG                         KEYVAL\n         IC    2,KVWAKWVA          GET COUNT                              KEYVAL\n         MVC   0(1,6),KVWAKWVA     MOVE COUNT BYTE                        KEYVAL\n         LA    6,1(,6)             BUMP OVER COUNT BYTE                   KEYVAL\n         LA    5,1(,5)             BUMP OVER COUNT BYTE                   KEYVAL\nKVR184   DS    0H                                                         KEYVAL\n         MVC   0(1,6),0(5)         MOVE FIRST LENGTH BYTE                 KEYVAL\n         LTR   2,2                 WAS ANYTHING IN THE AREA               KEYVAL\n         BNZ   KVR186              YES, CONTINUE WITH MOVE                KEYVAL\n         MVI   KVWAKWVA,1          SAY SOMETHING WAS THERE                KEYVAL\n         B     KVR200              AND CONTINUE                           KEYVAL\nKVR186   DS    0H                                                         KEYVAL\n         SR    7,7                 CLEAR FOR NEXT INSTR                   KEYVAL\n         ICM   7,1,0(5)            GET BYTE COUNT                         KEYVAL\n         BNZ   KVR188              BRANCH FOR NON ZERO MOVE               KEYVAL\n         LA    6,1(,6)             BUMP OVER NULL BYTE                    KEYVAL\n         LA    5,1(,5)             BUMP OVER NULL BYTE                    KEYVAL\n         B     KVR194              AND CONTINUE                           KEYVAL\nKVR188   DS    0H                                                         KEYVAL\n         BCTR  7,0                 REDUCE BY ONE                          KEYVAL\n         EX    7,KVM2VR            MOVE DATA OVER                         KEYVAL\nKVR190   DS    0H                                                         KEYVAL\n         LA    6,2(7,6)            BUMP OVER OUTPUT                       KEYVAL\n         LA    5,2(7,5)            BUMP OVER INPUT                        KEYVAL\nKVR194   DS    0H                                                         KEYVAL\n         BCT   2,KVR184            COUNTINUE MOVE                         KEYVAL\nKVR200   DS    0H                  SEE IF VALUES TO BE COMPARED           KEYVAL\n         SPACE                                                            KEYVAL\n*        AT THIS POINT THE VALUES HAVE BEEN MOVED TO MY WORKAREA          KEYVAL\n*        AND TO THE USER WORK AREA IF AREA HAS BEEN SPECIFIED             KEYVAL\n*        IN THE KEYT MACRO                                                KEYVAL\n         SPACE                                                            KEYVAL\n         SR    2,2                 CLEAR WORK REG                         KEYVAL\n         ICM   2,1,KVVN0001        Q. WERE ANY VALUES TO BE VERIFIED      KEYVAL\n*                                     OR WAS THERE WORK TO BE DONE        KEYVAL\n         BNZ   KVR220              A. YES, CONTINUE AS USUAL              KEYVAL\n         SR    9,9                 CLEAR RC                               KEYVAL\n         B     KVR900              AND RETURN TO CALLER                   KEYVAL\nKVR220   DS    0H                                                         KEYVAL\n         ST    2,KVVNCNT           SAVE COUNT                             KEYVAL\n         ST    14,KVWAR14          SAVE KEYT ADDR                         KEYVAL\n         LA    5,KVWAKWVA+1        ADDR OF FOUND VALUES                   KEYVAL\n         ST    5,KVWASV            SAVE VALUES ADDR                       KEYVAL\n         MVC   KVWASVC,KVWAKWVA    SAVE VALUES COUNT                      KEYVAL\n         SR    2,2                 CLEAR REG                              KEYVAL\n         ICM   2,1,KVWASVC         Q. ANY VALUES FOUND                    KEYVAL\n         BNZ   KVR230              A. YES, CONTINUE WITH COUNT            KEYVAL\n         MVI   KVWASVC,1           ELSE SAY AT LEAST ONE FOUND            KEYVAL\nKVR230   DS    0H                                                         KEYVAL\n         L     2,KVVNCNT           GET COUNT                              KEYVAL\n         L     14,KVWAR14          GET TABLE ADDR                         KEYVAL\n         L     5,KVWASV            GET ADDR OF CURRENT VALUE TO FIND      KEYVAL\n         SR    1,1                 CLEAR WORK REG                         KEYVAL\n         ICM   1,1,KVWASVC         GET COUNT                              KEYVAL\n         BZ    KVR500              STOP SCAN IF NONE LEFT                 KEYVAL\n         BCTR  1,0                 REDUCE COUNT                           KEYVAL\n         STC   1,KVWASVC           SAVE NEW COUNT                         KEYVAL\n         ICM   1,1,0(5)            GET LENGTH OF CURRENT VALUE            KEYVAL\n         LA    1,1(1,5)            BUMP TO WHERE NEW VALUE WILL BE        KEYVAL\n         ST    1,KVWASV            AND SAVE ADDRESS                       KEYVAL\n         SR    7,7                 CLEAR FOR LATER                        KEYVAL\n         IC    7,KVLL0001          GET KEYWORD LENGTH                     KEYVAL\n         LA    14,0(14,7)          BUMP OVER VARIABLE LENGTH KEYWORD      KEYVAL\nKVR240   DS    0H                  SCAN TABLE FOR THIS VALUE              KEYVAL\n         ST    2,KVWAR2            SAVE CURRENT COUNT                     KEYVAL\n         ICM   7,1,KVVL0001        LENGTH OF VALUE                        KEYVAL\n         BZ    KVR300              IF NO KEYWORD VALUE HAS BEEN PUT       KEYVAL\n*                                  IN KEYT DONT LOOK FOR A MATCH, JUST    KEYVAL\n*                                  DO THE WORK IF ANY                     KEYVAL\n         BCTR  7,0                 REDUCE FOR EX INSTR                    KEYVAL\n         EX    7,KVC2VR            Q. ARE VALUES EQUAL                    KEYVAL\n         BE    KVR300              A. YES, GO SEE IF ANY WORK TO DO       KEYVAL\nKVR250   DS    0H                                                         KEYVAL\n         L     2,KVWAR2            RELOAD LOOP COUNTER                    KEYVAL\n         SR    1,1                 CLEAR WORK REG                         KEYVAL\n         IC    1,KVVL0001          GET LENGTH OF VALUE                    KEYVAL\n         LA    14,KVVG0001(1,14)   GO TO NEXT ENTRY                       KEYVAL\n         BCT   2,KVR240            AND CONTINUE SCAN                      KEYVAL\n         CLI   KVWAVF,X'FF'        Q. WERE VALUE(S) MATCHED IN KEYT       KEYVAL\n         BE    KVR260              A. YES, CONTINUE WITH NO ERRORS        KEYVAL\n         LA    9,4                 VALUE NOT FOUND RC                     KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR260   DS    0H                                                         KEYVAL\n         MVI   KVWAVF,0            RESET VALUES FOUND FLAG                KEYVAL\n         B     KVR230              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR300   DS    0H                  VALUE FOUND SEE IF ANY WORK TO DO      KEYVAL\n         MVI   KVWAVF,X'FF'        SAY VALUES FOUND                       KEYVAL\n         TM    KVOP0001,X'FF'      Q. ANY OP CODES SPECIFIED              KEYVAL\n         BNZ   KVR320              A. YES, SEE IF SOME WORK TO DO         KEYVAL\n         B     KVR250              ELSE CONTINUE VALUES SCAN              KEYVAL\nKVR320   DS    0H                  DECODE OP CODES AND DO THEM            KEYVAL\n         LA    6,KVVV0001          GET ADDR OF VALUES ENTRY               KEYVAL\n         LA    1,KVWAFLN           ADDR OF SAVE TABLE                     KEYVAL\n         ICM   7,15,KVWACN1        GET CURRENT COUNT OF VALUES ALREADY    KEYVAL\n*                                  PROCESSED                              KEYVAL\n         BZ    KVR326              ADD THIS ONE IF NONE YET               KEYVAL\nKVR322   DS    0H                                                         KEYVAL\n         C     6,0(1)              Q. ALREADY PROCESSED THIS ENTRY        KEYVAL\n         BE    KVR250              A. YES BYPASS FURTHER PROCESSING       KEYVAL\n         LA    1,4(,1)             BUMP TABLE ADDRESS                     KEYVAL\n         BCT   7,KVR322            CONTINUE SCAN                          KEYVAL\nKVR326   DS    0H                                                         KEYVAL\n         ST    6,0(1)              SAVE ADDRESS OF THIS ENTRY FOR LATER   KEYVAL\n*                                  COMPARE OF OTHER VALUES                KEYVAL\n         L     7,KVWACN1           GET OLD COUNT                          KEYVAL\n         LA    7,1(,7)             ADD 1 TO IT                            KEYVAL\n         ST    7,KVWACN1           AND SAVE IT                            KEYVAL\n         SR    6,6                 CLEAR WORK REG                         KEYVAL\n         SR    7,7                 CLEAR WORK REG                         KEYVAL\n         ICM   6,3,KVTO0001        GET TO ADDRESS                         KEYVAL\n         SRDL  6,12                GET REG NO. INTO R2                    KEYVAL\n         SLL   6,2                 X 4                                    KEYVAL\n         LA    1,KVWASAV1          ADDR OF SAVE AREA                      KEYVAL\n         L     6,0(6,1)            GET CONTENTS OF TO BASE REG            KEYVAL\n         SRL   7,20                SHIFT TO LOWER END                     KEYVAL\n         LA    2,0(7,6)            GET TO ADDREESS                        KEYVAL\n         SR    6,6                 CLEAR WORK REG                         KEYVAL\n         SR    7,7                 CLEAR WORK REG                         KEYVAL\n         ICM   6,3,KVFR0001        GET FROM ADDRESS                       KEYVAL\n         SRDL  6,12                GET REG NO. INTO R6                    KEYVAL\n         SLL   6,2                 X 4                                    KEYVAL\n         LTR   6,6                 Q. WAS THIS SELF DEFINING TERM         KEYVAL\n         BZ    KVR330              A. YES, DONT LOAD NONEXISTENT BASE     KEYVAL\n         LA    1,KVWASAV1          ADDR OF SAVE AREA                      KEYVAL\n         L     6,0(6,1)            GET CONTENTS OF FROM BASE REG          KEYVAL\nKVR330   DS    0H                                                         KEYVAL\n         SRL   7,20                SHIFT TO LOWER END                     KEYVAL\n         LA    8,0(7,6)            GET FROM ADDRESS                       KEYVAL\n         SR    1,1                 CLEAR WORK REG                         KEYVAL\n         ICM   1,3,KVOL0001        GET LENGTH OF FIELD                    KEYVAL\n         BCTR  1,0                 GET EX LENGTH                          KEYVAL\n         SR    7,7                 CLEAR WORK REG                         KEYVAL\n         IC    7,KVOP0001          GET OP CODE                            KEYVAL\n         SLL   7,2                 MULTIPLY BY 4                          KEYVAL\n         B     *+0(7)              BRANCH TO OP CODE ROUTINE              KEYVAL\n         B     KVR360              N OP CODE SPECIFIED                    KEYVAL\n         B     KVR380              O OP CODE SPECIFIED                    KEYVAL\n         B     KVR400              M OP CODE SPECIFIED                    KEYVAL\n         B     KVR420              X OP CODE SPECIFIED                    KEYVAL\nKVR360   DS    0H                  N OP CODE                              KEYVAL\n         LTR   6,6                 Q. WAS FROM FIELD SELF DEFINING        KEYVAL\n         BNZ   KVR366              A. NO, CONTINUE STOR-STOR OPERATION    KEYVAL\n         EX    8,KVOPNI            ISSUE THE AND OP CODE STOR-IMED        KEYVAL\n         B     KVR250              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR366   DS    0H                  N OP CODE                              KEYVAL\n         EX    1,KVOPN             ISSUE THE AND OP CODE STOR-STOR        KEYVAL\n         B     KVR250              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR380   DS    0H                  O OP CODE                              KEYVAL\n         LTR   6,6                 Q. WAS FROM FIELD SELF DEFINING        KEYVAL\n         BNZ   KVR386              A. NO, CONTINUE STOR-STOR OPERATION    KEYVAL\n         EX    8,KVOPOI            ISSUE THE OR OP CODE STOR-IMED         KEYVAL\n         B     KVR250              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR386   DS    0H                  N OP CODE                              KEYVAL\n         EX    1,KVOPO             ISSUE THE OR OP CODE STOR-STOR         KEYVAL\n         B     KVR250              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR400   DS    0H                  M OP CODE                              KEYVAL\n         LTR   6,6                 Q. WAS FROM FIELD SELF DEFINING        KEYVAL\n         BNZ   KVR406              A. NO, CONTINUE STOR-STOR OPERATION    KEYVAL\n         EX    8,KVOPMI            ISSUE THE MVC OP CODE STOR-IMED        KEYVAL\n         B     KVR250              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR406   DS    0H                  N OP CODE                              KEYVAL\n         EX    1,KVOPM             ISSUE THE MVC OP CODE STOR-STOR        KEYVAL\n         B     KVR250              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR420   DS    0H                  N OP CODE                              KEYVAL\n         LTR   6,6                 Q. WAS FROM FIELD SELF DEFINING        KEYVAL\n         BNZ   KVR426              A. NO, CONTINUE STOR-STOR OPERATION    KEYVAL\n         EX    8,KVOPXI            ISSUE THE XI OP CODE STOR-IMED         KEYVAL\n         B     KVR250              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR426   DS    0H                  N OP CODE                              KEYVAL\n         EX    1,KVOPX             ISSUE THE XC OP CODE STOR-STOR         KEYVAL\n         B     KVR250              AND CONTINUE WITH OTHER VALUES         KEYVAL\nKVR500   DS    0H                  ALL VALUES SCANNED                     KEYVAL\n         SR    9,9                 CLEAR RC                               KEYVAL\n         B     KVR900              AND RETURN                             KEYVAL\nKVR900   DS    0H                  RETURN POINT                           KEYVAL\n         LTR   9,9                 Q . RC=00                              KEYVAL\n         BNZ   KVR930              A. NO, CONTINUE RETURN TO CALLER       KEYVAL\n         ICM   1,15,KVWARTN        Q. RTN TO CALL                         KEYVAL\n         BZ    KVR910              A. NO, CONTINUE NO CALL                KEYVAL\n         ST    14,KVWAR14          SAVE REG 14                            KEYVAL\n         LR    15,1                GET RTN ADDR                           KEYVAL\n         LA    0,KVWAKWVA          GET STRING ADDR                        KEYVAL\n         ST    13,KVWASAV+4        SAVE CALLERS SAVE AREA ADDR            KEYVAL\n         LA    13,KVWASAV          MY SAVE AREA                           KEYVAL\n         L     1,KVWAPRM           GET PARM DATA ADDR                     KEYVAL\n         BALR  14,15               CALL USERS ROUTINE                     KEYVAL\n         L     14,KVWAR14          RESTORE REG 14                         KEYVAL\n         L     13,KVWASAV+4        RESTORE REG 13                         KEYVAL\nKVR910   DS    0H                                                         KEYVAL\n         MVI   KVWAFL1,1           SAY AT LEAST 1 GOOD FIND               KEYVAL\n         B     KVR004              GO DO MORE NOW                         KEYVAL\nKVR930   DS    0H                                                         KEYVAL\n         L     4,KVWALOC           SAVE STRING LOCATION                   KEYVAL\n         L     5,KVWAKEY           SAVE KEYWORD LOCATION                  KEYVAL\n         CLI   KVWAFL1,0           Q. ANY GOOD FINDS                      KEYVAL\n         BE    KVR950              A. NO, LEAVE RC AS IS                  KEYVAL\n         C     9,KVASIX            Q. WAS RC=16                           KEYVAL\n         BNE   KVR950              A. NO, LEAVE RC AS IS                  KEYVAL\n         SR    9,9                 SET ZERO RC                            KEYVAL\nKVR950   DS    0H                                                         KEYVAL\n         LR    1,12                GET WORKAREA ADDRESS                   KEYVAL\n         LA    0,KVWALNTH          GET WORKAREA LENGTH                    KEYVAL\n         FREEMAIN R,LV=(0),A=(1)   FREE WORKAREA                          KEYVAL\n         LR    15,9                SETUP RETURN CODE                      KEYVAL\n         LM    6,12,11*4(13)       RESTORE REGS                           KEYVAL\n         LR    0,5                 PUT IN KEYWORD LOCATION                KEYVAL\n         LR    1,4                 PUT IN STRING LOCATION                 KEYVAL\n         LM    2,5,7*4(13)         RESTORE OTHER REGS                     KEYVAL\n         L     14,3*4(13)          RESTORE RETURN REG                     KEYVAL\n         BR    14                  RETURN TO CALLER                       KEYVAL\n         SPACE 4                                                          KEYVAL\nKVOPN    NC    0(0,2),0(8)                                                KEYVAL\nKVOPNI   NI    0(2),0                                                     KEYVAL\nKVOPO    OC    0(0,2),0(8)                                                KEYVAL\nKVOPOI   OI    0(2),0                                                     KEYVAL\nKVOPM    MVC   0(0,2),0(8)                                                KEYVAL\nKVOPMI   MVI   0(2),0                                                     KEYVAL\nKVOPX    XC    0(0,2),0(8)                                                KEYVAL\nKVOPXI   XI    0(2),0                                                     KEYVAL\nKVCVR    CLC   KVKV0001(0),0(4)                                           KEYVAL\nKVTR1VR  TRT   0(0,4),KTVRT1-X'40'                                        KEYVAL\nKVTR2VR  TRT   1(0,8),KTVRT3-X'40' ALPHA TEST                             KEYVAL\nKVTR3VR  TRT   1(0,8),KTVRT2-X'40' NUMERIC TEST                           KEYVAL\nKVTR4VR  TRT   1(0,8),KTVRT4-X'40' ALPHA/NUMERIC TEST                     KEYVAL\nKVC2VR   CLC   KVVV0001(0),1(5)                                           KEYVAL\nKVM1VR   MVC   1(0,8),KVWATMP                                             KEYVAL\nKVM2VR   MVC   1(0,6),1(5)                                                KEYVAL\nKTVRT1   DC    10X'00',C'\u00a2.<(+|&&',9X'00',C'!$*);\u00ac-/',10X'00',C'%_>?'     KEYVAL\n         DC    9X'00',C''':#@ =\"',X'00',C'ABCDEFGHI',7X'00'               KEYVAL\n         DC    C'JKLMNOPQR',8X'00',C'STUVWXYZ',23X'00',C'ABCDEFGHI'       KEYVAL\n         DC    7X'FF'                                                     KEYVAL\n         DC    C'ABCDEFGHI',7X'00',C'JKLMNOPQR',8X'00',C'STUVWXYZ'        KEYVAL\n         DC    6X'00',C'0123456789'                                       KEYVAL\nKTVRT2   DC    176X'FF',10X'00'                                           KEYVAL\nKTVRT3   DC    129X'FF',41X'00',16X'FF'                                   KEYVAL\nKTVRT4   DC    11X'FF',X'00',15X'FF',2X'00',30X'FF',2X'00'                KEYVAL\n         DC    68X'FF',63X'00'                                            KEYVAL\nKVAKVVG  DC    Y(KVVG0001)                                                KEYVAL\nKVAFFFF  DC    X'FFFF'                                                    KEYVAL\nKVASIX   DC    F'16'                                                      KEYVAL\nKVAX00   DC    X'00'                                                      KEYVAL\nKVASLASH DC    C'/'                                                       KEYVAL\nKVDSVR   DSECT                                                            KEYVAL\nKVLL0001 DS    AL1                 LENGTH OF KEY-1                        KEYVAL\nKVRA0001 DS    SL2                 RTN ADDRESS                            KEYVAL\nKVRP0001 DS    SL2                 RTN PARM                               KEYVAL\nKVAA0001 DS    SL2                 AREA ADDRESS                           KEYVAL\nKVVLL001 DS    AL1                 VALUE LENGTH LOW                       KEYVAL\nKVVLH001 DS    AL1                 VALUE LENGTH HIGH                      KEYVAL\nKVLV0001 DS    AL1                 VALUE COUNT LOW                        KEYVAL\nKVHV0001 DS    AL1                 VALUE COUNT HIGH                       KEYVAL\nKVVT0001 DS    XL1                 VALUE TYPE                             KEYVAL\nKVTA0001 EQU   X'01'               ALPHA TYPE                             KEYVAL\nKVTN0001 EQU   X'02'               NUMERIC TYPE                           KEYVAL\nKVTB0001 EQU   X'03'               ALPHA OR NUMERIC TYPE                  KEYVAL\nKVVN0001 DS    AL1                 COUNT OF VALUE ENTRIES                 KEYVAL\nKVKL0001 EQU   *-KVLL0001          LENGTH OF TABLE ENTRY MINUS KEYWORD    KEYVAL\nKVKV0001 DS    C                   KEYWORD                                KEYVAL\nKVVL0001 DS    AL1                 VALUE LENGTH                           KEYVAL\nKVOP0001 DS    XL1                 OP CODE                                KEYVAL\nKVVA0001 EQU   X'01'               N  OP CODE                             KEYVAL\nKVVO0001 EQU   X'02'               O  OP CODE                             KEYVAL\nKVVM0001 EQU   X'03'               M  OP CODE                             KEYVAL\nKVVX0001 EQU   X'04'               X  OP CODE                             KEYVAL\nKVTO0001 DS    SL2                 TO ADDRESS                             KEYVAL\nKVFR0001 DS    SL2                 FROM ADDRESS                           KEYVAL\nKVOL0001 DS    AL2                 LENGTH OF TO FIELD                     KEYVAL\nKVVG0001 EQU   *-KVVL0001          ENTRY LENGTH MINUS VALUE CONSTANT      KEYVAL\nKVVV0001 DS    C                   VALUE CONSTANT                         KEYVAL\nKVLA0001 EQU   *,2                 LAST ENTRY =X'FFFF'                    KEYVAL\nKVWAVR   DSECT                                                            KEYVAL\nKVWAVF   DS    X                   VALUES FOUND FLAG                      KEYVAL\nKVWAQUO  DS    X                   QUOTED STRING MODE FLAG                KEYVAL\nKVWASV   DS    F                   ADDR OF VALUES FOUND                   KEYVAL\nKVWASAV  DS    18F                 SAVE AREA TO CALL RTN                  KEYVAL\nKVWARTN  DS    F                   ADDRESS OF RTN TO CALL                 KEYVAL\nKVWAPRM  DS    F                   ADDRESS OF RTN PARM                    KEYVAL\nKVWALOC  DS    F                   LOCATION OF INPUT STRING               KEYVAL\nKVWAR14  DS    F                   SAVE AREA FOR REG 14                   KEYVAL\nKVWAR2   DS    F                   SAVE AREA FOR REG 2                    KEYVAL\nKVVNCNT  DS    F                   VALUE COUNT SAVEAREA                   KEYVAL\nKVWAKEY  DS    F                   ADDRESS OF CURRENT KEYWORD IN STRING   KEYVAL\nKVWACN1  DS    F                   COUNT OF VALUE ADDRS IN KVWAFLN        KEYVAL\nKVWASVC  DS    X                   COUNT OF VALUES FOUND                  KEYVAL\nKVWACLR  EQU   *-KVWAVR            LENGTH OF WORKAREA TO CLEAR            KEYVAL\nKVWAFL1  DS    X                   FLAG TO SHOW SOME GOOD WORDS FOUND     KEYVAL\nKVWASAV1 DS    16F                 SAVE AREA FOR CALLERS REGS             KEYVAL\nKVWAKWVA DS    512X                WORKAREA FOR VALUE MOVE                KEYVAL\nKVWAFLN  DS    15XL4               SAVEAREA FOR MAX COUNT OF FIELDN'S     KEYVAL\nKVWATMP  DS    256X                WORKAREA FOR TEMP VALUE MOVE           KEYVAL\nKVWALNTH EQU   *-KVWAVR            LENGTH OF WORKAREA TO ALLOC            KEYVAL\n&CSNAME  CSECT                                                            KEYVAL\n         POP   USING,PRINT                                                KEYVAL\n.NOGO    ANOP                                                             KEYVAL\n         MEND                                                             KEYVAL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VIPDOC": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91\\x13\\x7f\\x00\\x91\\x19\\x1f\\x12U\\x00\\xb0\\x00\\xb0\\x00\\x00|\\xc4\\xe5\\xc7\\xc6\\xf0\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-05-17T00:00:00", "modifydate": "1991-07-10T12:55:00", "lines": 176, "newlines": 176, "modlines": 0, "user": "@DVGF09"}, "text": "  **********************************************************************\n\n                                 ADDENDUM\n\n                 National Systems Programmers Association\n\n                          Software Documentation\n\n  **********************************************************************\n\n  Contributor's Name: Kim A. Westerling\n  NaSPA User ID: WestKimF\n\n  Will you provide telephone assistance? Yes\n  Phone # (402) 342-7600 Ext. 3362\n\n  Will you provide updates? Yes\n  Last date updated: 10 July 1991\n\n  System Description: The IEBASAP program is an utility program that\n  was designed to automate some of the handling of the data provided\n  from IBM's SoftwareXcel ASAP service. The program builds and maintains\n  a VSAM format data base using the ASAP notifications as input. The\n  program can cross reference this data against an installations SMP/E\n  (release 5) CSI/ZONE data sets to determine if any known PE\n  maintenance and/or any known fixing maintenance for identified is\n  installed. The latest release is Version 11.04.\n\n  **********************************************************************\n\n* Module name: @CALL\n* Operating system: MVS                   Module type: MACRO\n* Moduel Description: Calls the specified subroutine. Supports the\n*                     the specification of an entry code in R1.\n\n  Module name: @ERROR                     Module type: MACRO\n  Operating system: MVS\n  Module Description: Calls the IEBASAP error routine to write messages\n                      to the ASAPOUT data set.\n\n* Module name: @FILL                      Module type: MACRO\n* Operating system: MVS\n* Module Description: Used to clear or fill an area using the\n*                     hex character in the parameter CHAR.\n\n  Module name: @FMTREG                    Module type: MACRO\n  Operating system: MVS\n  Module Description: Used to format the contents of a register for\n                      printing.\n\n  Module name: @MVC                       Module type: MACRO\n  Operating system: MVS\n  Module Description: Used to move data from one area to another using\n                      the length of the sending area.\n\n  Module name: @REGS                      Module type: MACRO\n  Operating system: MVS\n  Module Description: Register equates.\n\n  Module name: @ZREGS                     Module type: MACRO\n  Operating system: MVS\n  Module Description: Used to clear a range of registers using XR.\n\n  Module name: ASAPART                    Module type: DOC\n  Operating system: MVS\n  Module Description: Copy of the original article discussing the\n                      IEBASAP program. Was published in the September\n                      1990 issue of Technical Support. 6 example outputs\n                      were included.\n\n  Module name: ASAPCNVT                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Program to convert ASAP data from prior to 1 Jan\n                      1990 to the new format. Converts from the previous\n                      default format to the current default format.\n\n  Module name: ASAPCNV2\n  Operating system: MVS                   Module type: PGM(ASM)\n  Module description: Converts the ASAP data base records from\n                      Version 7 format to Version 8 or later format.\n\n  Module name: ASAPDOC                    Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Copy module containing change log, liability\n                      statement, and author's address.\n\n  Module name: ASMASAP                    Module type: JCL\n  Operating system: MVS\n  Module Description: Sample JCL to assemble and link IEBASAP program.\n\n  Module name: IEBASAP                    Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Main routine.\n\n  Module name: IEBASAPA                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Update routine.\n\n  Module name: IEBASAPB                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: List routine.\n\n  Module name: IEBASAPC                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Xref routine.\n\n  Module name: IEBASAPD                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Cleanup routine.\n\n  Module name: IEBASAPE                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Program work areas.\n\n  Module name: IEBASAPF                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Program report headers, VSAM ACB's, and DCB's.\n\n  Module name: IEBASAPG                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Record DSECTs.\n\n  Module name: IEBASAPH                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Delete routine (BR14).\n\n  Module name: IEBASAPI                   Module type: PGM(ASM)\n  Operating system: MVS\n  Module Description: Error routine.\n\n* Module name: IEBASAPJ                   Module type: PGM(ASM)\n* Operating system: MVS\n* Module Description: Print routines, report and headers.\n\n* Module name: IEBASAPK                   Module type: PGM(ASM)\n* Operating system: MVS\n* Module Description: Global CSI/ZONE acquisition routines.\n\n* Module name: IEBASAPL                   Module type: PGM(ASM)\n* Operating system: MVS\n* Module Description: Requested CSI/ZONE acquisition routines.\n\n* Module name: IEBASAPM                   Module type: PGM(ASM)\n* Operating system: MVS\n* Module Description: Read GLOBAL Zone routine.\n\n* Module name: IEBASAPN                   Module type: PGM(ASM)\n* Operating system: MVS\n* Module Description: Read Requested Zone routine.\n\n  Module name: JCLCNVT                    Module type: JCL\n  Operating system: MVS\n  Module Description: Sample JCL to execute the ASAP conversion program.\n\n  Module name: JCLCNV2                    Module type: JCL\n  Operating system: MVS\n  Module Description: Sample JCL to execute the ASAP conversion program.\n\n  Module name: JCL0                       Module type: JCL\n  Operating system: MVS\n  Module Description: Sample JCL to define and load the ASAP VSAM\n                      data base.\n\n  Module name: JCL1                       Module type: JCL\n  Operating system: MVS\n  Module Description: Sample JCL to execute the IEBASAP program.\n\n  Module name: KEYT                       Module type: MACRO\n  Operating system: MVS\n  Module Description: Used to validate control card paramaters.\n\n  Module name: KEYVAL                     Module type: MACRO\n  Operating system: MVS\n  Module Description: Used to validate control card paramaters.\n\n  **********************************************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT156/FILE156.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT156", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}