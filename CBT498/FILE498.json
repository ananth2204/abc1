{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012217000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1175720, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE498.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1175720, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE498.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\x08'", "DS1TRBAL": "b'>\\xd2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xcb\\x00\\x06\\x03\\xcc\\x00\\n\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x19\\x01\\t5\\x7f\\x01\\t5\\x7f F\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-12-23T00:00:00", "modifydate": "2009-12-23T20:46:19", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  498\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE498\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 10,981 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/23/09    20:46:19    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x002\\x01\\t\\x04/\\x01\\t\\x04/\\x154\\x00q\\x00q\\x00\\x00\\xc4\\xd6\\xe3\\xc3\\xe6\\xe2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2009-02-11T00:00:00", "modifydate": "2009-02-11T15:34:32", "lines": 113, "newlines": 113, "modlines": 0, "user": "DOTCWS"}, "text": "\n\n\n               SUBROUTINES, UTILITIES AND MACROS ABSTRACTS VOLUME\n                                   Utilities\n\n  Module Name: MTCHMRG                            Date: 03/00\n  Title: Match/Merge                              Programmer: C. Schneiderwent\n  ****************************************************************************\n\n  1.   The purpose of this program is to provide a convenient method of match\n       merging two datasets.\n\n  2.   The program performs the following functions:\n\n       *    Match/merge SYSUT1 and SYSUT2\n       *    Matching records are concatenated and output to SYSUT3,\n            SYSUT2 records are concatenated to the end of the matching\n            SYSUT1 records\n       *    Unmatched SYSUT1 records are output to SYSUT4\n       *    Unmatched SYSUT2 records are output to SYSUT5\n       *    Matched SYSUT1 records are output to SYSUT6\n       *    Matched SYSUT2 records are output to SYSUT7\n       *    At least one of SYSUT3, SYSUT4, SYSUT5, SYSUT6, SYSUT7 must be\n            specified in the execution JCL\n\n       Program processing is determined by parameters or a control card.\n       The format of the parameters is\n\n       PARM='000120002300042'\n             LLLLL1111122222\n\n       LLLLL = Length of key\n       11111 = Offset of key in SYSUT1\n       22222 = Offset of key in SYSUT2\n\n       The control card parameter is identical and is specified on\n       SYSIN.  If the parm is present it overrides the presence of SYSIN.\n       If the parm is absent, SYSIN must be specified.\n\n       Return Codes:\n\n       0 - normal EOJ\n       1 - multiple records with the same key found in both input files\n       8 - error, see SYSPRINT\n\n       When multiple records with the same key are found in both input\n       files, each such record from SYSUT1 is matched with each such\n       record from SYSUT2.\n\n       Informational messages are written to SYSPRINT.\n\n\n\n  MTCHMRG                              Issued: 03/00                    Page 2\n  ****************************************************************************\n\n  Sample execution JCL\n\n  //MRG00001 EXEC PGM=MTCHMRG,PARM='000040000400000'\n  //SYSUT1   DD  DSN=input.file.one,DISP=(OLD,PASS)\n  //SYSUT2   DD  DSN=input.file.two,DISP=(OLD,PASS)\n  //SYSUT3   DD  DISP=(NEW,PASS,DELETE),\n  //             AVGREC=U,\n  //             LRECL=sum of SYSUT1 LRECL and SYSUT2 LRECL,\n  //             RECFM=FB,\n  //             SPACE=(same as LRECL,(1000,100)),\n  //             UNIT=WORK\n  //SYSUT4   DD  DISP=(NEW,PASS,DELETE),\n  //             AVGREC=U,\n  //             LRECL=same as SYSUT1 LRECL,\n  //             RECFM=FB,\n  //             SPACE=(same as LRECL,(1000,100)),\n  //             UNIT=WORK\n  //SYSUT5   DD  DISP=(NEW,PASS,DELETE),\n  //             AVGREC=U,\n  //             LRECL=same as SYSUT2 LRECL,\n  //             RECFM=FB,\n  //             SPACE=(same as LRECL,(1000,100)),\n  //             UNIT=WORK\n  //SYSUT6   DD  DISP=(NEW,PASS,DELETE),\n  //             AVGREC=U,\n  //             LRECL=same as SYSUT1 LRECL,\n  //             RECFM=FB,\n  //             SPACE=(same as LRECL,(1000,100)),\n  //             UNIT=WORK\n  //SYSUT7   DD  DISP=(NEW,PASS,DELETE),\n  //             AVGREC=U,\n  //             LRECL=same as SYSUT2 LRECL,\n  //             RECFM=FB,\n  //             SPACE=(same as LRECL,(1000,100)),\n  //             UNIT=WORK\n  //SYSPRINT DD  SYSOUT=*\n\n  Note that SYSUT3, SYSUT4, SYSUT5, SYSUT6 and SYSUT7 need not all be\n  specified.  If the desired function is to detect only unmatched\n  records from SYSUT2, only SYSUT5 need be specified.\n\n  4.   Source Language:  Assembler\n\n  5.   Limitations:\n\n       *    This program will only process sequential datasets\n       *    This program will only process fixed length records\n       *    The key comparison is a CLC instruction (CLCL when the\n            key length exceeds 256) so it is inadvisable to use\n            packed data as a key unless you are certain the sign\n            nibbles are consistent\n       *    Since SYSUT3 consists of concatenated records from\n            the two input files, there is an inherent length\n            limitation: the sum of the two input LRECLs must\n            be <= the maximum LRECL possible\n       *    Both input files must be sorted by the match merge key\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$README": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00P\\x01\\x01\\x00\\x8f\\x01\\x04\\x01_\\x10#\\x00\\x07\\x00\\x02\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-01-08T00:00:00", "modifydate": "2004-01-15T10:23:50", "lines": 7, "newlines": 2, "modlines": 0, "user": "CBT-464"}, "text": "$DOC     Documentation for MTCHMRG utility\n$README  This member\nJRETURND Standard exit logic macro\nJSAVED   Standard entry logic macro\nMTCHMRG  Source code to the MTCHMRG utility\nREGISTER Standard register equates macro\nTESTDATA XMIT format PDS of test JCL and data for testing your changes\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE498": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x12\\x01\\t5\\x7f\\x01\\t5\\x7f F\\x00+\\x00+\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-12-23T00:00:00", "modifydate": "2009-12-23T20:46:12", "lines": 43, "newlines": 43, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 498 is from Craig Schneiderwent and contains a match      *   FILE 498\n//*           merge program in Assembler, to combine two sequential *   FILE 498\n//*           files.                                                *   FILE 498\n//*                                                                 *   FILE 498\n//*           email:  cschneidpublic@yahoo.com                      *   FILE 498\n//*                   include MTCHMRG in Subject: line              *   FILE 498\n//*                                                                 *   FILE 498\n//*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  *   FILE 498\n//*                                                                 *   FILE 498\n//*        $DOC     Documentation for MTCHMRG utility               *   FILE 498\n//*        $README  This member                                     *   FILE 498\n//*        JRETURND Standard exit logic macro                       *   FILE 498\n//*        JSAVED   Standard entry logic macro                      *   FILE 498\n//*        MTCHMRG  Source code to the MTCHMRG utility              *   FILE 498\n//*        REGISTER Standard register equates macro                 *   FILE 498\n//*        TESTDATA Test materials pds in TSO XMIT format           *   FILE 498\n//*                                                                 *   FILE 498\n//*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  *   FILE 498\n//*                                                                 *   FILE 498\n//*           PROGRAM NAME: MTCHMRG                                 *   FILE 498\n//*           AUTHOR: CRAIG SCHNEIDERWENT                           *   FILE 498\n//*           Date:      16-DEC-1999                                *   FILE 498\n//*           Updated:   06-Jan-2009                                *   FILE 498\n//*           PURPOSE: MATCH MERGE TWO FILES                        *   FILE 498\n//*                                                                 *   FILE 498\n//*           KEY COMPARISON IS A CLC INSTRUCTION                   *   FILE 498\n//*                                                                 *   FILE 498\n//*           EXEC PGM=MTCHMRG,PARM='000120002300042'               *   FILE 498\n//*                                  LLLLL1111122222                *   FILE 498\n//*                                                                 *   FILE 498\n//*           LLLLL = LENGTH OF KEY                                 *   FILE 498\n//*           11111 = OFFSET OF KEY IN SYSUT1                       *   FILE 498\n//*           22222 = OFFSET OF KEY IN SYSUT2                       *   FILE 498\n//*                                                                 *   FILE 498\n//*           ABOVE PARAMETER CAN ALSO BE SPECIFIED ON SYSIN        *   FILE 498\n//*                                                                 *   FILE 498\n//*           SYSUT3 WILL CONTAIN CONCATENATED MATCHING             *   FILE 498\n//*                  SYSUT1 AND SYSUT2 RECORDS                      *   FILE 498\n//*           SYSUT4 WILL CONTAIN UNMATCHED SYSUT1 RECORDS          *   FILE 498\n//*           SYSUT5 WILL CONTAIN UNMATCHED SYSUT2 RECORDS          *   FILE 498\n//*           SYSUT6 WILL CONTAIN MATCHED SYSUT1 RECORDS            *   FILE 498\n//*           SYSUT7 WILL CONTAIN MATCHED SYSUT2 RECORDS            *   FILE 498\n//*                                                                 *   FILE 498\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JRETURND": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x02\\x01\\x03\\x03\\x8f\\x01\\x03\\x03\\x8f\\t@\\x00B\\x00B\\x00\\x01\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-02-07T00:00:00", "modifydate": "2003-02-07T09:40:02", "lines": 66, "newlines": 66, "modlines": 1, "user": "MACRO"}, "text": "         MACRO\n&LABEL   JRETURND  &A,&B,&RC=,&R=\n         GBLC  &JSYSTEM\n*\n*        MACRO JRETURND VERSION 03\n*        STANDARD LINKAGE CONVENTION/RESTORE MACRO\n*\n         AIF   ('&A' EQ 'DOS').DOS\n         AIF   ('&A' EQ 'STATIC').DOS\n         AIF   ('&A' EQ 'EXPRESS').DOS\n         AIF   ('&A' EQ 'OS').OS\n         AIF   ('&A' EQ 'DYNAMIC').OS\n         AIF   ('&A' EQ 'REENTER').OS\n         AIF   ('&A' NE '').ERROR\n.* PASS THRU IF PARAMETER 1 IS OMITTED\n         AIF   ('&JSYSTEM' EQ 'OS').OS\n         AIF   ('&JSYSTEM' EQ 'DOS').DOS\n.*\n.* OPTION 1\n.DOS     ANOP\n         AIF   ('&R' EQ '').DOS1\n         AIF   ('&R' NE 'FP').ERROR\n         LD    0,80(13)                 RESTORE FLT PT REG 0\n         LD    2,88(13)                 RESTORE FLT PT REG 2\n         LD    4,96(13)                 RESTORE FLT PT REG 4\n         LD    6,104(13)                RESTORE FLT PT REG 6\n.DOS1    ANOP\n&LABEL   L     13,4(0,13)               GET A(CALLERS SAVE AREA)\n         AGO   .COMMON\n.* OPTION 2\n.OS      ANOP\n&LABEL   L     13,4(0,13)               GET A(CALLERS SAVE AREA)\n         STM   15,1,16(13)              PRESERVE REGISTERS 15,0,1\n*                                       WHERE THEY WERE SAVED AT ENTRY\n         L     1,8(0,13)                SET UP TO FREE SAVE AREA\n         AIF   ('&R' EQ '').OS1\n         AIF   ('&R' NE 'FP').ERROR\n         LD    0,72(1)                  RESTORE FLT PT REG 0\n         LD    2,80(1)                  RESTORE FLT PT REG 2\n         LD    4,88(1)                  RESTORE FLT PT REG 4\n         LD    6,96(1)                  RESTORE FLT PT REG 6\n         FREEMAIN  R,LV=104,A=(1)       FREE SAVE AREA FOR THIS MODULE\n         LM    15,1,16(13)              RESTORE 15,0,1\n         AGO   .COMMON\n.OS1     ANOP\n         FREEMAIN R,LV=72,A=(1)       FREE SAVE AREA FOR THIS MODULE\n         LM    15,1,16(13)              RESTORE 15,0,1\n.COMMON  ANOP\n         L     14,12(0,13)              RESTORE RETURN ADDRESS\n         AIF   ('&RC' EQ '').NORC\n         AIF   ('&B' EQ '').NOB1\n         RETURN &B,RC=&RC\n         AGO   .RETNT\n.NOB1    ANOP\n         RETURN (2,12),RC=&RC\n         AGO   .RETNT\n.NORC    AIF   ('&B' EQ '').NOB2\n         RETURN &B\n         AGO   .RETNT\n.NOB2    ANOP\n         RETURN (2,12)\n.RETNT   ANOP\n         MEXIT\n.ERROR   MNOTE 8,'PARAMETER ERROR, GENERATION TERMINATED'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JSAVED": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x02\\x01\\x03\\x03\\x8f\\x01\\x03\\x03\\x8f\\t@\\x00W\\x00W\\x00\\x01\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-02-07T00:00:00", "modifydate": "2003-02-07T09:40:02", "lines": 87, "newlines": 87, "modlines": 1, "user": "MACRO"}, "text": "         MACRO\n&LABEL   JSAVED &A,&R=\n         GBLC  &JSYSTEM\n         GBLC  &PANSTAT\n*\n*        MACRO JSAVED  VERSION 04A\n*        STANDARD LINKAGE CONVENTION/SAVE MACRO\n*\n&LABEL   SAVE  (14,12),,*\n         AIF   ('&A' EQ 'DOS').DOS\n         AIF   ('&A' EQ 'STATIC').DOS\n         AIF   ('&A' EQ 'EXPRESS').DOS\n         AIF   ('&A' EQ 'OS').OS\n         AIF   ('&A' EQ 'DYNAMIC').OS\n         AIF   ('&A' EQ 'REENTER').OS\n         AIF   ('&A' NE '').ERROR\n.* PASS THRU IF PARAMETER 1 IS OMITTED\n         AIF   ('&JSYSTEM' EQ 'OS').OS\n         AIF   ('&JSYSTEM' EQ 'DOS').DOS\n.DOS     ANOP\n*\n*        STATIC SAVE AREA PROVIDED IN THIS PROGRAM\n*\n         AIF   ('&R' EQ '').DOS1\n         AIF   ('&R' NE 'FP').ERROR\n         CNOP  2,8                      PROVIDE ALIGNMENT\n         BASR  1,0                      PROVIDE ADDRESSING FOR S.A.\n         BAS   1,166(0,1)               BRANCH AROUND SAVE AREA\n         DC    27F'0'                   SAVE AREA\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL3' ',CL5'&SYSTIME'     TIME OF ASSEMBLY\n         DC    CL38'&PANSTAT '\n         STD   0,80(1)                  SAVE FLT PT REG 0\n         STD   2,88(1)                  SAVE FLT PT REG 2\n         STD   4,96(1)                  SAVE FLT PT REG 4\n         STD   6,104(1)                 SAVE FLT PT REG 6\n         AGO   .COM\n.DOS1    ANOP\n         CNOP  2,4                      PROVIDE ALIGNMENT\n         BASR  1,0                      PROVIDE ADDRESSING FOR S.A.\n         BAS   1,130(0,1)               BRANCH AROUND SAVE AREA\n         DC    18F'0'                   SAVE AREA\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL3' ',CL5'&SYSTIME'     TIME OF ASSEMBLY\n         DC    CL38'&PANSTAT '\n         AGO   .COM\n.OS      ANOP\n*\n*        DYNAMIC SAVE AREA FOR RE-ENTRANT CODE\n*\n         AIF   ('&R' EQ '').OS1\n         AIF   ('&R' NE 'FP').ERROR\n         BASR  14,0                     PROVIDE ADDRESSING FOR CODE\n         USING *,14\n         B     *+L'*+8+8+38             FOR TSSR 01578 (11-26-96) (JTS)\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL3' ',CL5'&SYSTIME'     TIME OF ASSEMBLY\n         DC    CL38'&PANSTAT '          PANVALET MODULE/VERSION INFO\n         GETMAIN R,LV=104               ACQUIRE STORAGE FOR SAVE AREA\n         STD   0,72(1)                  SAVE FLT PT REG 0\n         STD   2,80(1)                  SAVE FLT PT REG 2\n         STD   4,88(1)                  SAVE FLT PT REG 4\n         STD   6,96(1)                  SAVE FLT PT REG 6\n         DROP  14\n         AGO   .COM\n.OS1     ANOP\n         BASR  14,0                     PROVIDE ADDRESSING FOR CODE\n         USING *,14\n         B     *+L'*+8+8+38             FOR TSSR 01578 (11-26-96) (JTS)\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL3' ',CL5'&SYSTIME'     TIME OF ASSEMBLY\n         DC    CL38'&PANSTAT '          PANVALET MODULE/VERSION INFO\n         GETMAIN R,LV=72                ACQUIRE STORAGE FOR SAVE AREA\n         DROP  14\n.COM     ANOP\n         SR    14,14                    CLEAR R14 TO NULL FORWARD CHAIN\n         STM   13,14,4(1)               STORE BACK CHAIN, 0 FWD CHAIN\n         ST    1,8(0,13)                SET PREVIOUS S.A. FORWARD CHAIN\n         LM    13,1,8(13)               RESTORE ENTRY REGISTERS\n*\n*        REGISTER 13 POINTS TO THE SAVE AREA FOR THIS PROGRAM\n*        IT MUST REMAIN THIS WAY FOR ANY CALLS AND FOR RETURN\n*\n         MEXIT\n.ERROR   MNOTE 8,'PARAMETER ERROR, GENERATION TERMINATED'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MTCHMRG": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x06\\x01\\t5\\x7f\\x01\\t5\\x7f\\x149\\x07A\\x07A\\x00\\x00\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2009-12-23T00:00:00", "modifydate": "2009-12-23T14:39:06", "lines": 1857, "newlines": 1857, "modlines": 0, "user": "SOURCE"}, "text": "*                                      IDENTIFICATION DIVISION\n* PROGRAM NAME: MTCHMRG\n* AUTHOR: CRAIG SCHNEIDERWENT\n* DATE: 16-DEC-1999\n* PURPOSE: MATCH MERGE TWO FILES\n*\n* KEY COMPARISON IS A CLC INSTRUCTION IF THE KEY LENGTH IS 256 OR LESS,\n* ELSE IT IS A CLCL INSTRUCTION.  GENERALLY THIS MEANS YOU MUST BE\n* CAREFUL WHEN YOUR KEY CONTAINS PACKED DATA, AS THE SIGN NIBBLES MUST\n* MATCH EXACTLY.  EVEN THOUGH X'123C' AND X'123A' ARE BOTH +123, THEY\n* WILL _NOT_ COMPARE EQUAL IN THE CONTEXT OF THIS PROGRAM.\n*\n* EXEC PGM=MTCHMRG,PARM='000120002300042'\n*                        LLLLL1111122222\n*\n* LLLLL = LENGTH OF KEY\n* 11111 = OFFSET OF KEY IN SYSUT1\n* 22222 = OFFSET OF KEY IN SYSUT2\n*\n* ABOVE PARAMETER CAN ALSO BE SPECIFIED ON SYSIN\n*\n* SYSUT3 WILL CONTAIN CONCATENATED MATCHING SYSUT1 AND SYSUT2 RECORDS\n* SYSUT4 WILL CONTAIN UNMATCHED SYSUT1 RECORDS\n* SYSUT5 WILL CONTAIN UNMATCHED SYSUT2 RECORDS\n* SYSUT6 WILL CONTAIN MATCHED SYSUT1 RECORDS\n* SYSUT7 WILL CONTAIN MATCHED SYSUT2 RECORDS\n*\n* AT LEAST ONE OF SYSUT3, 4, 5, 6, 7 MUST BE PRESENT IN THE JCL\n*\n* RETURN CODES\n* 0 - SUCCESS\n* 1 - SUCCESS, MULTIPLE RECORDS WITH EQUAL KEYS IN BOTH INPUTS\n* 8 - ERROR, SEE SYSPRINT\n*\n*\n*\n* //MRG00001 EXEC PGM=MTCHMRG,PARM='000060000000000'\n* //SYSUT1   DD  DSN=MANDATORY.INPUT.FILE\n* //SYSUT2   DD  DSN=MANDATORY.INPUT.FILE\n* //SYSUT3   DD  DSN=OPTIONAL.OUTPUT.FILE    AT LEAST ONE\n* //SYSUT4   DD  DSN=OPTIONAL.OUTPUT.FILE      OF THESE FIVE\n* //SYSUT5   DD  DSN=OPTIONAL.OUTPUT.FILE        DD STATEMENTS\n* //SYSUT6   DD  DSN=OPTIONAL.OUTPUT.FILE          MUST BE\n* //SYSUT7   DD  DSN=OPTIONAL.OUTPUT.FILE            PRESENT\n* //SYSPRINT DD  SYSOUT=*\n* //SYSUDUMP DD  SYSOUT=*\n*\n* BASIC ALGORITHM\n*\n* PRIMING READS:\n* READ SYSUT1 AND ADD TO WRK1 LIST UNTIL KEY BREAK\n* READ SYSUT2 AND ADD TO WRK2 LIST UNTIL KEY BREAK\n* MATCH MERGE START:\n* KEYS EQUAL:\n*                    WRITE SYSUT6\n*                    WRITE SYSUT7\n*                    CONCATENATE AND WRITE SYSUT3\n*                    READ SYSUT1 AND ADD TO WRK1 LIST UNTIL KEY BREAK\n*                    READ SYSUT2 AND ADD TO WRK2 LIST UNTIL KEY BREAK\n*                    GO TO MATCH MERGE START:\n* WRK1 KEY LOW:\n*                    WRITE WRK1 LIST TO SYSUT4\n*                    READ SYSUT1 AND ADD TO WRK1 LIST UNTIL KEY BREAK\n*                    GO TO MATCH MERGE START:\n* WRK1 KEY HIGH:\n*                    WRITE WRK2 LIST TO SYSUT5\n*                    READ SYSUT2 AND ADD TO WRK2 LIST UNTIL KEY BREAK\n*                    GO TO MATCH MERGE START:\n*\n*\n* 03-APR-2002\n* PERFORMANCE HACKS:\n*   CHANGED ALGORITHM SO TO BE LESS MEMORY ALLOCATION INTENSE\n*   CHANGED CONCATENATION TO AVOID 4 LOADS AND AN MVCL UNDER\n* SOME CIRCUMSTANCES\n*   COSMETIC FIX TO INDICATE SYSUT4 AND/OR SYSUT5 WERE WRITTEN\n* WHEN SYSUT3 IS NOT PRESENT\n*   AESTHETIC FIX - REMOVED COMMENTED-OUT DEBUGGING CODE\n*\n* 20-NOV-2002\n* PERFORMANCE HACKS:\n*   REMOVED SUPERFLUOUS MVCL FOR SYSUT4 AND SYSUT5 RECORDS\n*   COUNTERS IN RD1WR000 AND RD2WR000 ARE NOW KEPT IN A WORK\n* REGISTER AND STORED AT EXIT FROM THE ROUTINE INSTEAD OF LOAD+\n* INCREMENT+STORE EACH TIME (FOUND A SPARE WORK REGISTER)\n*   REMOVED SOME SUPERFLUOUS ST AND L INSTRUCTIONS FOR SUBROUTINES\n* THAT DIDN'T ALTER REGISTER 14\n*   ASSEMBLER SERVICES REFERENCE NOW SAYS STORAGE MACRO SHOULD USE\n* LOC=31 INSTEAD OF LOC=ANY\n*\n* 29-FEB-2003\n* ADDED PROCESSING FOR SYSUT6 AND SYSUT7\n*\n* 23-JUL-2003\n* PERFORMANCE HACK: LOCALITY OF REFERENCE.\n* IT TURNS OUT THAT UPDATING DATA THAT IS CLOSE TO THE CODE THAT\n* UPDATES IT CAUSES A PERFORMANCE DEGRADATION.  MOVED SOME MINI SAVE\n* AREAS (PLACES FOR A SUBROUTINE TO STUFF R14) TO THE DYNAMICALLY\n* ALLOCATED $WRKSTRG DSECT FOR A 20% - 30% CPU REDUCTION.\n*\n* 26-NOV-2003\n* ADDED CHECK FOR F FORMAT IN JFCB AFTER OPEN OF SYSUT1 AND SYSUT2\n* TO PREVENT ATTEMPTS TO PROCESS NON-FIXED RECORD LENGTH FILES.\n* FACTORED OUT THE RDJFCB MACRO INTO ITS OWN SUBROUTINE.\n* MOVED MORE MINI SAVE AREAS TO WORKING-STORAGE.\n* CORRECTED A TYPO IN A COMMENT.\n* CORRECTED CLOSE OF SYSUT6 AND SYSUT7 - THEY WERE BOTH MISTAKENLY\n* CLOSING SYSUT5.  GO FIGURE.\n* MOVED QSAM BUFFERS ABOVE THE 16M LINE BY ADDING DCBE RMODE31=BUFF\n* FOR SYSUT1 THRU SYSUT7.\n* FIXED A BUG FOUND BY DAVE FREY: IF YOUR KEY LENGTH WAS ONE MORE THAN\n* A MULTIPLE OF 8 YOU WOULD GET UNPREDICTABLE RESULTS.  SOMETIMES\n* MANIFESTED ITSELF AS AN S202 ABEND IN THE I/O SUBSYSTEM.\n*\n* 15-NOV-2004\n* CHANGED THE EXIT LISTS FOR SYSUT1 AND SYSUT2 FROM TYPE 07 TO TYPE 13\n* AND ADDED LOGIC TO DISPLAY ALL THE CONCATENATED DSNS FOR THESE TWO\n* DDS.  CHANGED THE VERIFICATION OF THE PRESENCE OF SYSUT1 AND SYSUT2\n* FROM RDJFCB TO DEVTYPE.  CHANGED THE ALLOCATION OF LINKED LIST\n* ELEMENTS FROM THE STORAGE MACRO TO CPOOL.  IN SITUATIONS WHERE THERE\n* ARE MANY DUPLICATE KEYS THIS SEEMS TO SAVE SIGNIFICANT CPU.\n*\n* 05-OCT-2005\n* IT TURNS OUT YOU CAN'T DO A CPOOL BUILD WITH A CELL SIZE < 4 WITHOUT\n* GETTING A SC78 ABEND.  ADDED CODE TO ENSURE THIS DOESN'T HAPPEN: IF\n* SYSUT1 OR SYSUT2 LRECLS ARE < 4 BYTES THE CELL SIZE IS SET TO 4.\n* THIS WORKS BECAUSE THE REST OF THE CODE WORKS OFF THE ACTUAL LRECL.\n*\n* 06-JAN-2009\n* ADDED LOGIC TO DETECT A KEY LENGTH > 256 AND PERFORM A CLCL\n* FOR KEY COMPARISON IN SUCH CASES.  THE ACTUAL CHI TO DETERMINE\n* WHETHER A CLC OR CLCL IS PERFORMED USES 255 FOR COMPARISON\n* BECAUSE THE VALUE STORED IN THE KYLN FULLWORD ALREAD HAS BEEN\n* DECREMENTED BY 1 FOR MVC AND CLC PURPOSES.  SUGGESTED BY TINUS TAUTE.\n*\n* 17-DEC-2009\n* FIXED BUG FOUND BY ARBEL WEIZMAN.  RECORD ADDRESS WAS BEING SET\n* INCORRECTLY IN SUBROUTINE MVREC200.  L  R6,R4 WAS INCORRECTLY\n* CODED.  NOW USING THE ACTUAL STORAGE AREA INSTEAD OF FANCY TRICKS.\n* MOVEKY1 AND MOVEKY2 WERE ALSO PROBLEMATIC AND HAVE BEEN CORRECTED.\n* ALSO ADDED AN ARBITRARY VERSION NUMBER OF 3.01 TO DISTINGUISH\n* BETWEEN DIFFERENT VERSIONS.  THIS IS NOW DISPLAYED ON SYSPRINT.\n*\n*\nMTCHMRG  AMODE 31\nMTCHMRG  RMODE 24\nALCTWORK AMODE 31\nALCTWORK RMODE 24\nSETUP    AMODE 31\nSETUP    RMODE 24\n*                                  WRK1 AND WRK2 LISTS DSECT\n$MRGWORK DSECT\nNEXT     DS    F\nPREV     DS    F\nWORKREC  DS    F\nWORKFLAG DS    F\n#LAST1   EQU   B'00000001'         LAST LIST ITEM IN USE\n#CPYDONE EQU   B'00000010'         THIS LIST ITEM ALREADY COPIED\n#WRTDONE EQU   B'00000100'         THIS LIST ITEM ALREADY WRITTEN\n#CPYRSET EQU   B'11111101'         TURN OFF ITEM ALREADY COPIED\n#MRGWORK EQU   *-$MRGWORK\n*                                  WORKING-STORAGE DSECT\n$WRKSTRG DSECT\nRC       DS    F\nREC1A    DS    F                   ADDRESS OF SYSUT1 RECORD\nREC2A    DS    F                   ADDRESS OF SYSUT2 RECORD\nREC3A    DS    F                   ADDRESS OF SYSUT3 RECORD\nREC3C    DS    F                   ADDR OF SYSUT3 REC FOR CONCATENATION\nREC1KYA  DS    F                   ADDRESS OF SYSUT1 RECORD KEY\nREC2KYA  DS    F                   ADDRESS OF SYSUT2 RECORD KEY\nWRK1X    DS    F                   CURRENT WRK1 LIST ITEM ADDRESS\nWRK2X    DS    F                   CURRENT WRK2 LIST ITEM ADDRESS\nWRK1H    DS    F                   ADDRESS OF WRK1 LIST HEAD\nWRK2H    DS    F                   ADDRESS OF WRK2 LIST HEAD\nWRK1T    DS    F                   ADDRESS OF WRK1 LIST TAIL\nWRK2T    DS    F                   ADDRESS OF WRK2 LIST TAIL\nLRECL1   DS    F                   LRECL FOR SYSUT1\nLRECL2   DS    F                   LRECL FOR SYSUT2\nLRECL3   DS    F                   LRECL FOR SYSUT3\nCOUNT1   DS    F                   COUNT OF RECORDS READ FROM SYSUT1\nCOUNT2   DS    F                   COUNT OF RECORDS READ FROM SYSUT2\nCOUNT3   DS    F                   COUNT OF RECORDS WRITTEN TO SYSUT3\nCOUNT4   DS    F                   COUNT OF RECORDS WRITTEN TO SYSUT4\nCOUNT5   DS    F                   COUNT OF RECORDS WRITTEN TO SYSUT5\nCOUNT6   DS    F                   COUNT OF RECORDS ADDED TO WRK1\nCOUNT7   DS    F                   COUNT OF RECORDS ADDED TO WRK2\nCOUNT8   DS    F                   COUNT OF RECORDS WRITTEN TO SYSUT6\nCOUNT9   DS    F                   COUNT OF RECORDS WRITTEN TO SYSUT7\n         DS    0D                  DOUBLE WORD ALIGNMENT\nKYLNP    DS    PL8                 KEY LENGTH PACKED\nKYOSET1P DS    PL8                 KEY OFFSET IN SYSUT1 RECORD PACKED\nKYOSET2P DS    PL8                 KEY OFFSET IN SYSUT2 RECORD PACKED\nCOUNTP   DS    PL8                 USED TO OUTPUT COUNT FIELDS\nLRECLP   DS    PL8\nKYLN     DS    F                   KEY LENGTH BINARY\nKYOSET1  DS    F                   KEY OFFSET IN SYSUT1 RECORD BINARY\nKYOSET2  DS    F                   KEY OFFSET IN SYSUT2 RECORD BINARY\nPARMLEN  DS    H                   LENGTH OF PARMS\n         DS    0F                  FULLWORD ALIGNMENT\nNULLFILE DS    CL8                 LITERAL FOR DD DUMMY TESTING\nCLCL$GRR DS    4F                  MINI SA FOR BEFORE/AFTER CLCL\nMVCL$GRR DS    4F                  MINI SA FOR BEFORE/AFTER MVCL\nFLAG     DS    XL1\n#EOFW1   EQU   B'00000001'         EOF ON WRK1 LIST\n#EOFW2   EQU   B'00000010'         EOF ON WRK2 LIST\n#KYEQ    EQU   B'00000100'         KEYS ARE EQUAL\n#KY1HI   EQU   B'00001000'         WRK1 KEY > WRK2 KEY\n#KY1LO   EQU   B'00010000'         WRK1 KEY < WRK2 KEY\n#EOFW12  EQU   B'00000011'         USED TO TEST EOF ON WRK1 AND 2\n#NOEOFW1 EQU   B'11111110'         USED TO TURN OFF WRK1 EOF FLAG\n#NOEOFW2 EQU   B'11111101'         USED TO TURN OFF WRK2 EOF FLAG\nFLAG2    DS    XL1\n#EOFS1   EQU   B'00000001'         EOF ON SYSUT1\n#EOFS2   EQU   B'00000010'         EOF ON SYSUT2\n#DONES1  EQU   B'00010000'         DONE WITH LAST RECORD FROM SYSUT1\n#DONES2  EQU   B'00100000'         DONE WITH LAST RECORD FROM SYSUT2\n#DONES12 EQU   B'00110000'         DONE WITH LAST RECORDS FROM BOTH\n#EMTYS1  EQU   B'01000000'         SYSUT1 EMPTY\n#EMTYS2  EQU   B'10000000'         SYSUT2 EMPTY\n#EMTYS12 EQU   B'11000000'         BOTH EMPTY\nFLAG3    DS    XL1\n#MULTK1  EQU   B'01000000'         MULTIPLE WRK1 RECS WITH SAME KEY\n#MULTK2  EQU   B'10000000'         MULTIPLE WRK2 RECS WITH SAME KEY\n#MULTK12 EQU   B'11000000'         MULT WRK1 AND 2 RECS W/SAME KEY\n#MULTFST EQU   B'00100000'         FIRST TIME THRU MULT RECS\nFLAG4    DS    XL1\n#PRST3   EQU   B'10000000'         SYSUT3 PRESENT\n#PRST4   EQU   B'01000000'         SYSUT4 PRESENT\n#PRST5   EQU   B'00100000'         SYSUT5 PRESENT\n#PRST6   EQU   B'00010000'         SYSUT6 PRESENT\n#PRST7   EQU   B'00001000'         SYSUT7 PRESENT\n*                                  ERROR MESSAGES\nMSGERR01 DS    0CL80\nMSGE0101 DS    CL12\nMSGEDD01 DS    CL01\nMSGE0201 DS    CL16\n         DS    CL51\nMSGERR02 DS    0CL80\nMSGE0102 DS    CL23\nMSGEDD02 DS    CL01\nMSGE0202 DS    CL01\n         DS    CL55\nMSGERR03 DS    0CL80\nMSGE0103 DS    CL34\nMSGEDD03 DS    CL01\nMSGE0203 DS    CL08\nMSGELR03 DS    CL05\nMSGE0303 DS    CL01\n         DS    CL31\nMSGERR04 DS    0CL80\nMSGE0104 DS    CL43\n         DS    CL01\nMSGE0204 DS    CL29\n         DS    CL07\nMSGERR05 DS    0CL80\nMSGE0105 DS    CL21\nMSGEL105 DS    CL05\nMSGE0205 DS    CL22\nMSGEL205 DS    CL05\nMSGE0305 DS    CL18\nMSGEL305 DS    CL05\nMSGE0405 DS    CL04\n*\nMSGERR06 DS    0CL80\nMSGE0106 DS    CL12\nMSGE0206 DS    CL01\n         DS    CL01\nMSGE0306 DS    CL44\n         DS    CL01\nMSGE0406 DS    CL21\n*                                  INFORMATIONAL MESSAGES\nMSGINF01 DS    0CL80\nMSGI0101 DS    CL06\nMSGI0201 DS    CL04\nMSGIDS01 DS    CL54\n         DS    CL16\nMSGINF02 DS    0CL80\nMSGI0102 DS    CL05\nMSGIDD02 DS    CL01\nMSGI0202 DS    CL09\nMSGIOP02 DS    CL07\nMSGI0302 DS    CL03\nMSGICT02 DS    CL10\n         DS    CL45\nMSGINF04 DS    0CL80\nMSGI0104 DS    CL05\nMSGIDD04 DS    CL01\nMSGI0204 DS    CL14\nMSGIKO04 DS    CL05\n         DS    CL55\nMSGINF05 DS    0CL80\nMSGI0105 DS    CL13\nMSGIKL05 DS    CL05\n         DS    CL62\n         DS    0D\nMSGINF06 DS    CL80\nMSGINF03 DS    CL80                DEBUGGING\n#PRINT   EQU   80\nINREC    DS    0D\nINKYLN   DS    CL5\nINKYOS1  DS    CL5\nINKYOS2  DS    CL5\n         DS    CL65\n#INREC   EQU   *-INREC\nMVREC1SA DS    F                   MINI SAVE AREA\nMVREC2SA DS    F                   MINI SAVE AREA\nRD1WRR14 DS    F                   MINI SAVE AREA\nRD2WRR14 DS    F                   MINI SAVE AREA\nKYSEQSA  DS    F                   MINI SAVE AREA\nCONCATSA DS    F                   MINI SAVE AREA\nKY1LTSA  DS    F                   MINI SAVE AREA\nKY2LTSA  DS    F                   MINI SAVE AREA\nPUTSYS4A DS    F                   MINI SAVE AREA\nPUTSYS5A DS    F                   MINI SAVE AREA\nPUTSYS6A DS    F                   MINI SAVE AREA\nPUTSYS7A DS    F                   MINI SAVE AREA\nMYJFCBSA DS    F                   MINI SAVE AREA\nGETSYS1A DS    F                   MINI SAVE AREA\nGETSYS2A DS    F                   MINI SAVE AREA\nDISPLAYA DS    F                   MINI SAVE AREA\nFREELSTA DS    F                   MINI SAVE AREA\nDSPLSA   DS    F                   MINI SAVE AREA\nINFDSNSA DS    F                   MINI SAVE AREA\nDEVTYWK  DS    0F                  DEVTYPE WORK AREA\n         DS    XL24\n#WRKSTRG EQU   *-$WRKSTRG\n         DSECT\n         IEFJFCBN LIST=YES\nMTCHMRG  CSECT\n         REGISTER\n*\n         JSAVED\n         BALR  R11,0\n         USING *,R11,R12\n         LA    R12,4095(R11)\n         LA    R12,1(R12)\n*\n         ST    R1,LINKADDR             KEEP PARAMETER LIST ADDRESS\n         L     R2,LINKADDR             WORKING OFF R2\n         MVC   PARMADDR,0(R2)          GOTO ADDR IN R2 & GET ADDR\n         L     R3,PARMADDR             STORE THAT ADDR IN R3\n         STORAGE OBTAIN,LENGTH=#WRKSTRG,ADDR=WRKGSTRG,LOC=(31,64)\n         L     R10,WRKGSTRG            WORKING-STORAGE DSECT\n         USING $WRKSTRG,R10\n         USING $MRGWORK,R9\n         OPEN  (SYSPRINT,OUTPUT),MODE=31\nCKPRMLN  EQU   *\n         MVC   PARMLEN,0(R3)           SAVE LENGTH OF PARM\n         CLC   =H'0',PARMLEN           WAS THERE A PARM ?\n         BNE   FROMPARM                YES - PROCESS IT\nFRMSYSIN EQU   *\n         OPEN  (SYSIN,INPUT),MODE=31   NO PARM SO OPEN SYSIN\n         GET   SYSIN,INREC             READ PARAMETERS FROM SYSIN\n         CLOSE (SYSIN),MODE=31         CLOSE SYSIN\n         B     SETUP0                  BRANCH AROUND PARM PROCESSING\nFROMPARM EQU   *\n         MVC   INKYLN,2(R3)            GET KEY LENGTH\n         MVC   INKYOS1,7(R3)           GET KEY OFFSET IN SYSUT1\n         MVC   INKYOS2,12(R3)          GET KEY OFFSET IN SYSUT2\nSETUP0   EQU   *\n         L     R15,$SETUP\n         BASR  R14,R15             DO INITIAL HOUSEKEEPING\n         LA    R2,MSGINF06\n         BAS   R14,DISPLAY         DISPLAY VERSION IDENTIFIER\n         DEVTYPE =C'SYSUT1  ',DEVTYWK IS SYSUT1 PRESENT ?\n         C     R15,=F'4'\n         BNH   SWITCH01\n         BAS   R14,XDEVTY          DEVTYPE WENT SOUTH\nSWITCH01 EQU   *\n         B     *+4(R15)            SWITCH( R15 )\n         B     OK01                  CASE 0:\n         B     ERR01                 CASE 4:\nOK01     EQU   *\n         OPEN  (SYSUT1,INPUT),MODE=31\n         LA    R8,SYSUT1\n         BAS   R14,RDMYJFCB        GET SYSUT1 INFO NOW THAT IT'S OPEN\n         L     R7,ARLAREA          POINT TO SYSUT1 INFO\n         LR    R2,R7               COPY OF R7\n         LA    R7,4(R7)            POINT PAST LEADING FULLWORD\n         USING INFMJFCB,R7\n         MVC   MSGE0206,=C'1'\n         MVC   MSGE0306,JFCBDSNM\n         TM    JFCRECFM,JFCFIX     FIXED RECORD LENGTH?     B'10000000'\n         BNO   PUTERR06            NO - ERROR\n         TM    JFCRECFM,JFCUND     UNDEFINED RECORD LENGTH? B'11000000'\n         BO    PUTERR06            YES - ERROR\n         LH    R8,JFCLRECL         SAVE LRECL\n         ST    R8,LRECL1\n         L     R8,KYOSET1\n         A     R8,KYLN\n         LA    R8,1(R8)           PREVIOUSLY SUBTRACTED 1 FOR MVC & CLC\n         CL    R8,LRECL1           KEY OSET+LENGTH > LRECL ?\n         BH    ERR03               YES - ERROR\n         LR    R7,R2               RESTORE R7 FOR DSPLJFCB\n         MVC   MSGI0101,=C'SYSUT1'\n         MVC   MSGI0201,=C' IS '\n         BAS   R14,DSPLJFCB\n         DEVTYPE =C'SYSUT2  ',DEVTYWK IS SYSUT2 PRESENT ?\n         C     R15,=F'4'\n         BNH   SWITCH02\n         BAS   R14,XDEVTY          DEVTYPE WENT SOUTH\nSWITCH02 EQU   *\n         B     *+4(R15)            SWITCH( R15 )\n         B     OK02                  CASE 0:\n         B     ERR04                 CASE 4:\nOK02     EQU   *\n         OPEN  (SYSUT2,INPUT),MODE=31\n         LA    R8,SYSUT2\n         BAS   R14,RDMYJFCB        GET SYSUT2 INFO NOW THAT IT'S OPEN\n         L     R7,ARLAREA          POINT TO SYSUT1 INFO\n         LR    R2,R7               COPY OF R7\n         LA    R7,4(R7)            POINT PAST LEADING FULLWORD\n         MVC   MSGE0206,=C'2'\n         MVC   MSGE0306,JFCBDSNM\n         TM    JFCRECFM,JFCFIX     FIXED RECORD LENGTH?     B'10000000'\n         BNO   PUTERR06            NO - ERROR\n         TM    JFCRECFM,JFCUND     UNDEFINED RECORD LENGTH? B'11000000'\n         BO    PUTERR06            YES - ERROR\n         LH    R8,JFCLRECL         SAVE LRECL\n         ST    R8,LRECL2\n         L     R8,KYOSET2\n         A     R8,KYLN\n         LA    R8,1(R8)           PREVIOUSLY SUBTRACTED 1 FOR MVC & CLC\n         CL    R8,LRECL2           KEY OSET+LENGTH > LRECL ?\n         BH    ERR06               YES - ERROR\n         LR    R7,R2               RESTORE R7 FOR DSPLJFCB\n         MVC   MSGI0101,=C'SYSUT2'\n         MVC   MSGI0201,=C' IS '\n         BAS   R14,DSPLJFCB\n         LA    R8,SYSUT3\n         LA    R7,MYJFCB           MAKE USING STATEMENT TRUE\n         BAS   R14,RDMYJFCB        IS SYSUT3 PRESENT ?\n         C     R15,=F'8'\n         BNH   SWITCH03\n         BAS   R14,XRDJFCB         RDJFCB WENT SOUTH\nSWITCH03 EQU   *\n         B     *+4(R15)            SWITCH( R15 )\n         B     OK03                  CASE 0:\n         B     OK03A                 CASE 4:\n         B     ERR07                 CASE 8:\nOK03     EQU   *\n         CLC   NULLFILE,JFCBDSNM\n         BE    OK03A\n         L     R8,LRECL1           COMPUTE CORRECT LRECL\n         A     R8,LRECL2\n         ST    R8,LRECL3\n         OI    FLAG4,#PRST3        INDICATE SYSUT3 IS PRESENT\n         MVC   MSGI0101,=C'SYSUT3'\n         MVC   MSGI0201,=C' IS '\n         BAS   R14,INFDSN\n         LA    R2,MSGINF01\n         BAS   R14,DISPLAY         DISPLAY SYSUT3 DSN\nOK03A    EQU   *\n         LA    R8,SYSUT4\n         BAS   R14,RDMYJFCB        IS SYSUT4 PRESENT ?\n         C     R15,=F'8'\n         BNH   SWITCH04\n         BAS   R14,XRDJFCB         RDJFCB WENT SOUTH\nSWITCH04 EQU   *\n         B     *+4(R15)            SWITCH( R15 )\n         B     OK04                  CASE 0:\n         B     OK04A                 CASE 4:\n         B     ERR08                 CASE 8:\nOK04     EQU   *\n         CLC   NULLFILE,JFCBDSNM\n         BE    OK04A\n         OI    FLAG4,#PRST4        INDICATE SYSUT4 IS PRESENT\n         MVC   MSGI0101,=C'SYSUT4'\n         MVC   MSGI0201,=C' IS '\n         BAS   R14,INFDSN\n         LA    R2,MSGINF01\n         BAS   R14,DISPLAY         DISPLAY SYSUT4 DSN\nOK04A    EQU   *\n         LA    R8,SYSUT5\n         BAS   R14,RDMYJFCB        IS SYSUT5 PRESENT ?\n         C     R15,=F'8'\n         BNH   SWITCH05\n         BAS   R14,XRDJFCB         RDJFCB WENT SOUTH\nSWITCH05 EQU   *\n         B     *+4(R15)            SWITCH( R15 )\n         B     OK05                  CASE 0:\n         B     OK05A                 CASE 4:\n         B     ERR09                 CASE 8:\nOK05     EQU   *\n         CLC   NULLFILE,JFCBDSNM\n         BE    OK05A\n         OI    FLAG4,#PRST5        INDICATE SYSUT5 IS PRESENT\n         MVC   MSGI0101,=C'SYSUT5'\n         MVC   MSGI0201,=C' IS '\n         BAS   R14,INFDSN\n         LA    R2,MSGINF01\n         BAS   R14,DISPLAY         DISPLAY SYSUT5 DSN\nOK05A    EQU   *\n         LA    R8,SYSUT6\n         BAS   R14,RDMYJFCB        IS SYSUT6 PRESENT ?\n         C     R15,=F'8'\n         BNH   SWITCH06\n         BAS   R14,XRDJFCB         RDJFCB WENT SOUTH\nSWITCH06 EQU   *\n         B     *+4(R15)            SWITCH( R15 )\n         B     OK06                  CASE 0:\n         B     OK06A                 CASE 4:\n         B     ERR12                 CASE 8:\nOK06     EQU   *\n         CLC   NULLFILE,JFCBDSNM\n         BE    OK06A\n         OI    FLAG4,#PRST6        INDICATE SYSUT6 IS PRESENT\n         MVC   MSGI0101,=C'SYSUT6'\n         MVC   MSGI0201,=C' IS '\n         BAS   R14,INFDSN\n         LA    R2,MSGINF01\n         BAS   R14,DISPLAY         DISPLAY SYSUT6 DSN\nOK06A    EQU   *\n         LA    R8,SYSUT7\n         BAS   R14,RDMYJFCB        IS SYSUT7 PRESENT ?\n         C     R15,=F'8'\n         BNH   SWITCH07\n         BAS   R14,XRDJFCB         RDJFCB WENT SOUTH\nSWITCH07 EQU   *\n         B     *+4(R15)            SWITCH( R15 )\n         B     OK07                  CASE 0:\n         B     OK07A                 CASE 4:\n         B     ERR13                 CASE 8:\nOK07     EQU   *\n         CLC   NULLFILE,JFCBDSNM\n         BE    OK07A\n         OI    FLAG4,#PRST7        INDICATE SYSUT7 IS PRESENT\n         MVC   MSGI0101,=C'SYSUT7'\n         MVC   MSGI0201,=C' IS '\n         BAS   R14,INFDSN\n         LA    R2,MSGINF01\n         BAS   R14,DISPLAY         DISPLAY SYSUT7 DSN\nOK07A    EQU   *\n         TM    FLAG4,B'11111000'   AT LEAST ONE OUTPUT DEFINED ?\n         BZ    ERR10               NO - ERROR\n*                                  GET SPACE FOR INPUT RECORDS\n         L     R2,LRECL1\n         STORAGE OBTAIN,LENGTH=(R2),ADDR=REC1A,LOC=(31,64)\n         L     R2,LRECL2\n         STORAGE OBTAIN,LENGTH=(R2),ADDR=REC2A,LOC=(31,64)\n         TM    FLAG4,#PRST3\n         BZ    MALLOCKY\n         L     R2,LRECL3\n         STORAGE OBTAIN,LENGTH=(R2),ADDR=REC3A,LOC=(31,64)\n         L     R2,REC3A            ADDRESS OF SYSUT3 RECORD\n         A     R2,LRECL1           COMPUTE OFFSET FOR CONCATENATION\n         ST    R2,REC3C            SAVE FOR LATER\nMALLOCKY EQU   *\n*                                  GET SPACE FOR KEYS\n         L     R2,KYLN\n         LA    R2,1(R2)           PREVIOUSLY SUBTRACTED 1 FOR MVC & CLC\n         STORAGE OBTAIN,LENGTH=(R2),ADDR=REC1KYA,LOC=(31,64)\n         STORAGE OBTAIN,LENGTH=(R2),ADDR=REC2KYA,LOC=(31,64)\n*                                  OPEN FILES\nOPEN0    EQU   *\n         TM    FLAG4,#PRST3        SYSUT3 PRESENT ?\n         BZ    OPEN1               NO - BRANCH AROUND\n         OPEN  (SYSUT3,OUTPUT),MODE=31\n         LA    R8,SYSUT3\n         BAS   R14,RDMYJFCB        GET SYSUT3 INFO NOW THAT IT'S OPEN\n         LH    R8,JFCLRECL         GET ACTUAL LRECL\n         C     R8,LRECL3           ACTUAL LRECL = CORRECT LRECL ?\n         BNE   ERR11               NO - ERROR\n         DROP  R7\nOPEN1    EQU   *\n         TM    FLAG4,#PRST4        SYSUT4 PRESENT ?\n         BZ    OPEN2               NO - BRANCH AROUND\n         OPEN  (SYSUT4,OUTPUT),MODE=31\nOPEN2    EQU   *\n         TM    FLAG4,#PRST5        SYSUT5 PRESENT ?\n         BZ    OPEN3               NO - BRANCH AROUND\n         OPEN  (SYSUT5,OUTPUT),MODE=31\nOPEN3    EQU   *\n         TM    FLAG4,#PRST6        SYSUT6 PRESENT ?\n         BZ    OPEN4               NO - BRANCH AROUND\n         OPEN  (SYSUT6,OUTPUT),MODE=31\nOPEN4    EQU   *\n         TM    FLAG4,#PRST7        SYSUT7 PRESENT ?\n         BZ    ANNOUNCE            NO - BRANCH AROUND\n         OPEN  (SYSUT7,OUTPUT),MODE=31\n*\nANNOUNCE EQU   *\n         LA    R2,KYOSET1P         MAKE\n         UNPK  MSGIKO04,5(3,R2)        SYSUT1\n         LA    R2,MSGIKO04                    KEY OFFSET\n         OI    L'MSGIKO04-1(R2),X'F0'                   READABLE\n         MVI   MSGIDD04,C'1'\n         LA    R2,MSGINF04         POINT TO MESSAGE TO DISPLAY\n         BAS   R14,DISPLAY         DISPLAY SYSUT1 KEY OFFSET\n         LA    R2,KYOSET2P         MAKE\n         UNPK  MSGIKO04,5(3,R2)        SYSUT2\n         LA    R2,MSGIKO04                   KEY OFFSET\n         OI    L'MSGIKO04-1(R2),X'F0'                  READABLE\n         MVI   MSGIDD04,C'2'\n         LA    R2,MSGINF04         POINT TO MESSAGE TO DISPLAY\n         BAS   R14,DISPLAY         DISPLAY SYSUT2 KEY OFFSET\n         LA    R2,KYLNP            MAKE\n         UNPK  MSGIKL05,5(3,R2)        KEY\n         LA    R2,MSGIKL05                LENGTH\n         OI    L'MSGIKL05-1(R2),X'F0'           READABLE\n         LA    R2,MSGINF05         POINT TO MESSAGE TO DISPLAY\n         BAS   R14,DISPLAY         DISPLAY KEY LENGTH\n         CPOOL BUILD,                                                  -\n               HDR='MTCHMRGWORKSPACELINKLIST',                         -\n               CPID=CMRGWORK,                                          -\n               LOC=31,                                                 -\n               PCELLCT=10,                                             -\n               SCELLCT=1000,                                           -\n               CSIZE=#MRGWORK        MAX SIZE\n         L     R7,LRECL1             SYSUT1 LRECL\n         C     R7,=F'4'              MIN SIZE OF CELL\n         BNL   SIZEOK01              BRANCH AROUND IF BIGGER THAN MIN\n         L     R7,=F'4'              LOAD MINIMUM SIZE\nSIZEOK01 EQU   *\n         CPOOL BUILD,                                                  -\n               HDR='MTCHMRGWORKSPACESYSUT1  ',                         -\n               CPID=CWRKREC1,                                          -\n               LOC=31,                                                 -\n               PCELLCT=10,                                             -\n               SCELLCT=1000,                                           -\n               CSIZE=(R7)            MAX SIZE\n         L     R7,LRECL2             SYSUT2 LRECL\n         C     R7,=F'4'              MIN SIZE OF CELL\n         BNL   SIZEOK02              BRANCH AROUND IF BIGGER THAN MIN\n         L     R7,=F'4'              LOAD MINIMUM SIZE\nSIZEOK02 EQU   *\n         CPOOL BUILD,                                                  -\n               HDR='MTCHMRGWORKSPACESYSUT2  ',                         -\n               CPID=CWRKREC2,                                          -\n               LOC=31,                                                 -\n               PCELLCT=10,                                             -\n               SCELLCT=1000,                                           -\n               CSIZE=(R7)            MAX SIZE\n*\n*                                  ALLOCATE HEAD-OF-LIST ITEMS\n         LA    R8,WRK1H\n         L     R7,CWRKREC1         SYSUT1 CPOOL\n         L     R15,$ALCTWRK        ADDRESS OF ALLOCATION ROUTINE\n         BASR  R14,R15             PERFORM ALCTWORK\n         MVC   WRK1T,WRK1H         COPY HEAD TO TAIL\n         MVC   WRK1X,WRK1H         COPY HEAD TO CURRENT\n         LA    R8,WRK2H\n         L     R7,CWRKREC2         SYSUT2 CPOOL\n         L     R15,$ALCTWRK        ADDRESS OF ALLOCATION ROUTINE\n         BASR  R14,R15             PERFORM ALCTWORK\n         MVC   WRK2T,WRK2H         COPY HEAD TO TAIL\n         MVC   WRK2X,WRK2H         COPY HEAD TO CURRENT\n*\n*                                  PRIMING READS\nPRMREAD0 EQU   *\n         BAS   R14,GETSYS1\n         TM    FLAG2,#EOFS1        EOF ON SYSUT1 ?\n         BZ    PRMREAD1            NO - BRANCH AROUND\n         OI    FLAG2,#DONES1       SYSUT1 DONE\n         OI    FLAG2,#EMTYS1       SYSUT1 EMPTY\n         L     R2,REC1A            POINT AT RECEIVING AREA\n         L     R3,LRECL1           SET ITS LENGTH\n         LA    R4,0                SET DUMMY FROM ADDRESS\n         IC    R5,=X'00'           SET PADDING CHARACTER\n         SLL   R5,24               SHIFT TO PADDING POSITION\n         MVCL  R2,R4               BLANK OUT THE AREA\nPRMREAD1 EQU   *\n         BAS   R14,MOVEKY1         COPY KEY FROM SYSUT1 REC TO HOLD\n         BAS   R14,GETSYS2\n         TM    FLAG2,#EOFS2        EOF ON SYSUT2 ?\n         BZ    PRMREAD2            NO - BRANCH AROUND\n         OI    FLAG2,#DONES2       SYSUT2 DONE\n         OI    FLAG2,#EMTYS2       SYSUT2 EMPTY\n         L     R2,REC2A            POINT AT RECEIVING AREA\n         L     R3,LRECL2           SET ITS LENGTH\n         LA    R4,0                SET DUMMY FROM ADDRESS\n         IC    R5,=X'00'           SET PADDING CHARACTER\n         SLL   R5,24               SHIFT TO PADDING POSITION\n         MVCL  R2,R4               BLANK OUT THE AREA\nPRMREAD2 EQU   *\n         BAS   R14,MOVEKY2         COPY KEY FROM SYSUT2 REC TO HOLD\n         TM    FLAG2,#EOFS1        EOF ON SYSUT1 ?\n         BO    PRMREAD3            YES - BRANCH AROUND\n         BAS   R14,RD1WR000\nPRMREAD3 EQU   *\n         TM    FLAG2,#EOFS2        EOF ON SYSUT2 ?\n         BO    MRGLOOP0            YES - BRANCH AROUND\n         BAS   R14,RD2WR000\nMRGLOOP0 EQU   *\n         TM    FLAG2,#EMTYS12      BOTH EMPTY ?\n         BO    CLOSEUP0            YES - LEAVE\n         TM    FLAG2,#EMTYS1       SYSUT1 EMPTY ?\n         BO    DONES100            YES - ACT LIKE SYSUT1 IS DONE\n         TM    FLAG2,#EMTYS2       SYSUT2 EMPTY ?\n         BO    DONES200            YES - ACT LIKE SYSUT2 IS DONE\n         NI    FLAG,B'11100011'    CLEAR BITS FOR <, > AND =\n         L     R9,WRK1H            ADDRESS OF WRK1 LIST HEAD\n         L     R2,WORKREC          ADDRESS OF WRK1 RECORD\n         A     R2,KYOSET1          ADDRESS OF KEY\n         L     R9,WRK2H            ADDRESS OF WRK2 LIST HEAD\n         L     R4,WORKREC          ADDRESS OF WRK2 RECORD\n         A     R4,KYOSET2          ADDRESS OF KEY\n         L     R6,KYLN             LOAD KEY LENGTH\n         CHI   R6,255              MUST WE DO A CLCL ?\n         BH    CLCL1               YES - BRANCH\n         EX    R6,CMPRKY           DO COMPARISON\n         BH    MRGKY1HI\n         BL    MRGKY1LO\n         BE    MRGKYEQ\nCLCL1    EQU   *                   MUST DO A CLCL DUE TO LONG KEY\n         LA    R6,1(,R6)           KEY WAS STORED -1 FOR CLC\n         LR    R3,R6               LENGTH OF KEY\n         LR    R5,R6               LENGTH OF KEY\n         STM   R2,R5,CLCL$GRR      CLCL MUNGES THE REGISTERS\n         CLCL  R2,R4               R2 AND R4 WERE SET BEFORE BRANCH\n         LM    R2,R5,CLCL$GRR      RELOAD MY REGISTERS\n         BH    MRGKY1HI\n         BL    MRGKY1LO\nMRGKYEQ  EQU   *                   KY1 = KY2\n         OI    FLAG,#KYEQ\n         B     MRGTST0\nMRGKY1HI EQU   *                   KY1 > KY2\n         OI    FLAG,#KY1HI\n         B     MRGTST0\nMRGKY1LO EQU   *                   KY1 < KY2\n         OI    FLAG,#KY1LO\nMRGTST0  EQU   *\n*\n*                                  TESTING FOR DONE CONDITIONS - IF\n*                                  SYSUT1 IS DONE ALL REMAINING SYSUT2\n*                                  RECORDS SHOULD BE WRITTEN TO SYSUT5.\n*                                  IF SYSUT2 IS DONE ALL REMAINING\n*                                  SYSUT1 RECORDS SHOULD BE WRITTEN TO\n*                                  SYSUT4.\n*\n         TM    FLAG2,#DONES1       ALL DONE WITH SYSUT1 ?\n         BO    DONES100            YES - FINISH UP\n         TM    FLAG2,#DONES2       ALL DONE WITH SYSUT2 ?\n         BO    DONES200            YES - FINISH UP\nNOTDONE  EQU   *                   NORMAL, NOT EOF, CONDITIONS\n         TM    FLAG,#KYEQ          KY1=KY2 ?\n         BO    MRGTST1\n         TM    FLAG,#KY1LO         KY1<KY2 ?\n         BO    MRGTST2\n         TM    FLAG,#KY1HI         KY1>KY2 ?\n         BO    MRGTST3\n         ABEND 111,DUMP,STEP,USER  THEORETICALLY WE CAN'T GET TO HERE\nMRGTST1  EQU   *\n         TM    FLAG4,B'10011000'   SYSUT3, 6, 7 PRESENT ?\n         BZ    MRGTST1A            NO - NO NEED TO PROCESS\n         BAS   R14,KYSEQ000\n         B     SETDONE0\nMRGTST1A EQU   *\n         OI    FLAG,#EOFW1\n         OI    FLAG,#EOFW2\n         B     SETDONE0\nMRGTST2  EQU   *\n         TM    FLAG4,#PRST4        SYSUT4 PRESENT ?\n         BZ    MRGTST2A            NO - NO NEED TO PROCESS\n         BAS   R14,KY1LT000\n         B     SETDONE0\nMRGTST2A EQU   *\n         OI    FLAG,#EOFW1\n         B     SETDONE0\nMRGTST3  EQU   *\n         TM    FLAG4,#PRST5        SYSUT5 PRESENT ?\n         BZ    MRGTST3A            NO - NO NEED TO PROCESS\n         BAS   R14,KY2LT000\n         B     SETDONE0\nMRGTST3A EQU   *\n         OI    FLAG,#EOFW2\nSETDONE0 EQU   *\n         TM    FLAG2,#DONES12      DONE WITH SYSUT1 AND SYSUT2 ?\n         BO    CLOSEUP0            YES - WE'RE DONE\n         TM    FLAG,#KYEQ          KEYS WERE EQUAL ?\n         BO    BOTH0               YES - PROCESS BOTH SYSUT1 AND SYSUT2\n         TM    FLAG,#KY1HI         SYSUT1 KEY WAS HIGH ?\n         BO    JUSTS2              YES - PROCESS JUST SYSUT2\n         B     JUSTS1              PROCESS JUST SYSUT1\nBOTH0    EQU   *\n         TM    FLAG2,#DONES1       ALL DONE WITH SYSUT1 ?\n         BO    BOTH2               YES - BRANCH AROUND\n         TM    FLAG2,#EOFS1        EOF ON SYSUT1 ?\n         BO    BOTH1               YES - BRANCH AROUND\n         BAS   R14,MOVEKY1         MOVE KEY FROM SYSUT1 REC TO HOLD\n         BAS   R14,RD1WR000        PROCESS UNTIL SYSUT1 KEY NOT = HOLD\n         B     BOTH2\nBOTH1    EQU   *\n         BAS   R14,MVREC100\nBOTH2    EQU   *\n         TM    FLAG2,#DONES2       ALL DONE WITH SYSUT2 ?\n         BO    SETDONE1            YES - BRANCH AROUND\n         TM    FLAG2,#EOFS2        EOF ON SYSUT2 ?\n         BO    BOTH3               YES - BRANCH AROUND\n         BAS   R14,MOVEKY2         MOVE KEY FROM SYSUT2 REC TO HOLD\n         BAS   R14,RD2WR000        PROCESS UNTIL SYSUT2 KEY NOT = HOLD\n         B     SETDONE2\nBOTH3    EQU   *\n         BAS   R14,MVREC200\n         B     SETDONE1\nJUSTS1   EQU   *\n         TM    FLAG2,#DONES1       ALL DONE WITH SYSUT1 ?\n         BO    SETDONE1            YES - BRANCH AROUND\n         TM    FLAG2,#EOFS1        EOF ON SYSUT1 ?\n         BO    JUSTS1A             YES - BRANCH AROUND\n         BAS   R14,MOVEKY1         MOVE KEY FROM SYSUT1 REC TO HOLD\n         BAS   R14,RD1WR000        PROCESS UNTIL SYSUT1 KEY NOT = HOLD\n         B     SETDONE2\nJUSTS1A  EQU   *\n         BAS   R14,MVREC100\n*                                  VERY SPECIFIC SITUATION:\n*                                  BOTH SYSUT1 AND SYSUT2 ARE AT EOF.\n*                                  THIS HAPPENS IF THE LAST RECORD IN\n*                                  BOTH FILES CONTAINS A UNIQUE KEY.\n         TM    FLAG2,#DONES2\n         BO    SETDONE1\n         TM    FLAG2,#EOFS2\n         BZ    SETDONE1\n         BAS   R14,MVREC200\n         B     SETDONE1\n*\nJUSTS2   EQU   *\n         TM    FLAG2,#DONES2       ALL DONE WITH SYSUT2 ?\n         BO    SETDONE1            YES - BRANCH AROUND\n         TM    FLAG2,#EOFS2        EOF ON SYSUT2 ?\n         BO    JUSTS2A             YES - BRANCH AROUND\n         BAS   R14,MOVEKY2         MOVE KEY FROM SYSUT2 REC TO HOLD\n         BAS   R14,RD2WR000        PROCESS UNTIL SYSUT2 KEY NOT = HOLD\n         B     SETDONE2\nJUSTS2A  EQU   *\n         BAS   R14,MVREC200\n*                                  VERY SPECIFIC SITUATION:\n*                                  BOTH SYSUT1 AND SYSUT2 ARE AT EOF.\n*                                  THIS HAPPENS IF THE LAST RECORD IN\n*                                  BOTH FILES CONTAINS A UNIQUE KEY.\n         TM    FLAG2,#DONES1\n         BO    SETDONE1\n         TM    FLAG2,#EOFS1\n         BZ    SETDONE1\n         BAS   R14,MVREC100\nSETDONE1 EQU   *\n         B     MRGLOOP0\nSETDONE2 EQU   *\n         B     MRGLOOP0\n*\nMVREC100 EQU   *\n         ST    R14,MVREC1SA\n         L     R9,WRK1X\n         BAS   R14,CMPRKY1         SYSUT1 ALREADY IN WRK1 ?\n         BE    MVREC101            YES - NO MOVE NEEDED\n         L     R6,REC1A            POINT TO SYSUT1 REC\n         L     R7,LRECL1           LENGTH FOR MVCL\n         L     R2,WORKREC          POINT TO WRK1 REC\n         L     R3,LRECL1           LENGTH FOR MVCL\n         MVCL  R2,R6               MOVE SYSUT1 REC TO WRK1 REC\nMVREC101 EQU   *\n         TM    FLAG,B'00010100'    KY1 <= KY2 ?\n         BZ    MVREC102            NO - BRANCH AROUND\n         OI    FLAG2,#DONES1       DONE WITH SYSUT1\nMVREC102 EQU   *\n         L     R14,MVREC1SA\n         BR    R14\n*\nMVREC200 EQU   *\n         ST    R14,MVREC2SA\n         L     R9,WRK2X\n         BAS   R14,CMPRKY2         SYSUT2 ALREADY IN WRK2 ?\n         BE    MVREC201            YES - NO MOVE NEEDED\n         L     R6,REC2A            POINT TO SYSUT2 REC\n         L     R7,LRECL2           LENGTH FOR MVCL\n         L     R2,WORKREC          POINT TO WRK2 REC\n         L     R3,LRECL2           LENGTH FOR MVCL\n         MVCL  R2,R6               MOVE SYSUT2 REC TO WRK2 REC\nMVREC201 EQU   *\n         TM    FLAG,B'00001100'    KY1 >= KY2 ?\n         BZ    MVREC202            NO - BRANCH AROUND\n         OI    FLAG2,#DONES2       DONE WITH SYSUT2\nMVREC202 EQU   *\n         L     R14,MVREC2SA\n         BR    R14\n*\nRD1WR000 EQU   *                   READ SYSUT1 AND ADD TO WRK1 LIST\n         ST    R14,RD1WRR14\n         SR    R6,R6               INITIALIZE WRK1 RECORD COUNT\n         L     R9,WRK1H            POINT TO HEAD OF LINKED LIST\n         ST    R9,WRK1X            MAKE HEAD OF LIST CURRENT LIST ITEM\nRD1WR001 EQU   *\n         MVC   WORKFLAG,=F'0'\n         L     R2,REC1A            ADDRESS OF SYSUT1 RECORD\n         L     R3,LRECL1           SYSUT1 LRECL\n         L     R4,WORKREC          ADDRESS OF CURRENT LIST ITEM RECORD\n         L     R5,LRECL1           SYSUT1 LRECL\n         MVCL  R4,R2               COPY SYSUT1 RECORD TO LIST ITEM\n         LA    R6,1(R6)            INCREMENT WRK1 RECORD COUNT\n         BAS   R14,GETSYS1\n         TM    FLAG2,#EOFS1        SYSUT1 EOF ?\n         BO    RD1WR005            YES - DONE\n         BAS   R14,CMPRKY1         COMPARE RECORD KEY TO HOLD AREA\n         BNE   RD1WR005            NOT EQUAL MEANS DONE WITH THIS SET\nRD1WR002 EQU   *\n         CLC   NEXT,=F'0'          END OF LIST ?\n         BE    RD1WR003            YES - BRANCH TO ALLOCATE\n         MVC   WRK1X,NEXT          MAKE NEXT LIST ITEM CURRENT\n         B     RD1WR004\nRD1WR003 EQU   *\n         LA    R8,WRK1X            POINT TO CURRENT LIST ITEM\n         L     R7,CWRKREC1         SYSUT1 CPOOL\n         L     R15,$ALCTWRK        ADDRESS OF ALLOCATION ROUTINE\n         BASR  R14,R15             PERFORM ALCTWORK\n         L     R9,WRK1X            POINT TO CURRENT LIST ITEM\n         MVC   PREV,WRK1T          CHAIN THE RECORD BACKWARD\n         L     R9,WRK1T            POINT TO TAIL OF LIST\n         MVC   NEXT,WRK1X          CHAIN THE RECORD FORWARD\n         L     R9,NEXT             POINT TO CURRENT LIST ITEM\n         MVC   WRK1T,WRK1X         MAKE TAIL ADDR = CURRENT ADDR\nRD1WR004 EQU   *\n         L     R9,WRK1X            ADDRESS OF CURRENT LIST ITEM\n         B     RD1WR001            DO IT AGAIN\nRD1WR005 EQU   *\n         OI    WORKFLAG,#LAST1     FLAG CURRENT ITEM AS LAST USED\n         MVC   WRK1X,WRK1H         MAKE CURRENT ITEM = HEAD\n         NI    FLAG,#NOEOFW1       TURN OFF WRK1 EOF FLAG\n         ST    R6,COUNT6           SAVE WRK1 RECORD COUNT\n         L     R14,RD1WRR14\n         BR    R14\n*\nRD2WR000 EQU   *                   READ SYSUT2 AND ADD TO WRK2 LIST\n         ST    R14,RD2WRR14\n         SR    R6,R6               INITIALIZE WRK2 COUNTER\n         L     R9,WRK2H            POINT TO HEAD OF LINKED LIST\n         ST    R9,WRK2X            MAKE HEAD OF LIST CURRENT LIST ITEM\nRD2WR001 EQU   *\n         MVC   WORKFLAG,=F'0'\n         L     R2,REC2A            ADDRESS OF SYSUT1 RECORD\n         L     R3,LRECL2           SYSUT2 LRECL\n         L     R4,WORKREC          ADDRESS OF CURRENT LIST ITEM RECORD\n         L     R5,LRECL2           SYSUT2 LRECL\n         MVCL  R4,R2               COPY SYSUT2 RECORD TO LIST ITEM\n         LA    R6,1(R6)            INCREMENT WRK2 COUNTER\n         BAS   R14,GETSYS2\n         TM    FLAG2,#EOFS2        SYSUT1 EOF ?\n         BO    RD2WR005            YES - DONE\n         BAS   R14,CMPRKY2         COMPARE RECORD KEY TO HOLD AREA\n         BNE   RD2WR005            NOT EQUAL MEANS DONE WITH THIS SET\nRD2WR002 EQU   *\n         CLC   NEXT,=F'0'          END OF LIST ?\n         BE    RD2WR003            YES - BRANCH TO ALLOCATE\n         MVC   WRK2X,NEXT          MAKE NEXT LIST ITEM CURRENT\n         B     RD2WR004\nRD2WR003 EQU   *\n         LA    R8,WRK2X            POINT TO CURRENT LIST ITEM\n         L     R7,CWRKREC2         SYSUT2 CPOOL\n         L     R15,$ALCTWRK        ADDRESS OF ALLOCATION ROUTINE\n         BASR  R14,R15             PERFORM ALCTWORK\n         L     R9,WRK2X            POINT TO CURRENT LIST ITEM\n         MVC   PREV,WRK2T          CHAIN THE RECORD BACKWARD\n         L     R9,WRK2T            POINT TO TAIL OF LIST\n         MVC   NEXT,WRK2X          CHAIN THE RECORD FORWARD\n         L     R9,NEXT             POINT TO CURRENT LIST ITEM\n         MVC   WRK2T,WRK2X         MAKE TAIL ADDR = CURRENT ADDR\nRD2WR004 EQU   *\n         L     R9,WRK2X            ADDRESS OF CURRENT LIST ITEM\n         B     RD2WR001            DO IT AGAIN\nRD2WR005 EQU   *\n         OI    WORKFLAG,#LAST1     FLAG CURRENT ITEM AS LAST USED\n         MVC   WRK2X,WRK2H         MAKE CURRENT ITEM = HEAD\n         NI    FLAG,#NOEOFW2       TURN OFF WRK2 EOF FLAG\n         ST    R6,COUNT7           SAVE WRK2 RECORD COUNT\n         L     R14,RD2WRR14\n         BR    R14\n*\nKYSEQ000 EQU   *\n*                                  CONCATENATE WRK1 AND WRK2\n*                                  RECORDS IN SYSUT3 RECORD AND\n*                                  WRITE SYSUT3.\n*\n*                                  THE TRICKY PART IS DEALING WITH THE\n*                                  TWO FILES BOTH HAVING MULTIPLE\n*                                  RECORDS WITH EQUAL KEYS.  IN THAT\n*                                  CASE WRK1 IS READ ONCE AFTER\n*                                  EACH EOF OF WRK2 AND WRK2\n*                                  IS RESTARTED.\n*\n         ST    R14,KYSEQSA\n         CLC   COUNT6,=F'1'\n         BNH   KYSEQ001\n         OI    FLAG3,#MULTK1       MULT RECS W/EQ KEYS\nKYSEQ001 EQU   *\n         CLC   COUNT7,=F'1'\n         BNH   KYSEQ002\n         OI    FLAG3,#MULTK2       MULT RECS W/EQ KEYS\n         TM    FLAG3,#MULTK12      MULT RECS W/EQ KEYS IN BOTH FILES ?\n         BO    KYSEQM00            YES - SPECIAL HANDLING\nKYSEQ002 EQU   *\n         TM    FLAG4,#PRST3        SYSUT3 PRESENT ?\n         BZ    KYSEQ003            NO - BYPASS CONCATENATION\n         BAS   R14,CONCAT12\nKYSEQ003 EQU   *\n         TM    FLAG4,#PRST6        SYSUT6 PRESENT ?\n         BZ    KYSEQ004            NO - BYPASS WRITING SYSUT6\n         L     R9,WRK1X            POINT TO LIST ITEM FROM SYSUT1\n         TM    WORKFLAG,#WRTDONE   RECORD ALREADY WRITTEN TO SYSUT6 ?\n         BO    KYSEQ004            YES - BYPASS WRITING SYSUT6\n         L     R4,WORKREC          POINT TO RECORD IN LIST FROM SYSUT1\n         BAS   R14,PUTSYS6         WRITE SYSUT6\nKYSEQ004 EQU   *\n         TM    FLAG4,#PRST7        SYSUT7 PRESENT ?\n         BZ    KYSEQ005            NO - BYPASS WRITING SYSUT7\n         L     R9,WRK2X            POINT TO LIST ITEM FROM SYSUT2\n         TM    WORKFLAG,#WRTDONE   RECORD ALREADY WRITTEN TO SYSUT7 ?\n         BO    KYSEQ005            YES - BYPASS WRITING SYSUT7\n         L     R4,WORKREC          POINT TO RECORD IN LIST FROM SYSUT2\n         BAS   R14,PUTSYS7         WRITE SYSUT7\nKYSEQ005 EQU   *\n         TM    FLAG,#EOFW1         WRK1 EOF ?\n         BO    KYSEQ006            YES - DON'T TRY TO READ\n         BAS   R14,GETWRK1         READ WRK1\nKYSEQ006 EQU   *\n         TM    FLAG,#EOFW2         WRK2 EOF ?\n         BO    KYSEQ007            YES - DON'T TRY TO READ\n         BAS   R14,GETWRK2         READ WRK2\nKYSEQ007 EQU   *\n         TM    FLAG,#EOFW12        WRK1 AND WRK2 EOF ?\n         BNO   KYSEQ002            NO - LOOP\nKYSEQ008 EQU   *\n         MVI   FLAG3,X'00'         TURN OFF ALL BITS IN FLAG3\n         NI    FLAG,#NOEOFW1\n         NI    FLAG,#NOEOFW2\n         L     R14,KYSEQSA\n         BR    R14\n*\nKYSEQM00 EQU   *\n         MVC   RC,=F'1'            INDICATE MULT EQ KEYS IN BOTH INPUTS\nKYSEQM01 EQU   *\n         TM    FLAG4,#PRST3        SYSUT3 PRESENT ?\n         BZ    KYSEQM02            NO - BYPASS CONCATENATION\n         BAS   R14,CONCAT12        CONCATENATE AND WRITE TO SYSUT3\nKYSEQM02 EQU   *\n         TM    FLAG4,#PRST6        SYSUT6 PRESENT ?\n         BZ    KYSEQM03            NO - BYPASS WRITING SYSUT6\n         L     R9,WRK1X            POINT TO LIST ITEM FROM SYSUT1\n         TM    WORKFLAG,#WRTDONE   RECORD ALREADY WRITTEN TO SYSUT6 ?\n         BO    KYSEQM03            YES - BYPASS WRITING SYSUT6\n         L     R4,WORKREC          POINT TO RECORD IN LIST FROM SYSUT1\n         BAS   R14,PUTSYS6         WRITE SYSUT6\nKYSEQM03 EQU   *\n         TM    FLAG4,#PRST7        SYSUT7 PRESENT ?\n         BZ    KYSEQM04            NO - BYPASS WRITING SYSUT7\n         L     R9,WRK2X            POINT TO LIST ITEM FROM SYSUT2\n         TM    WORKFLAG,#WRTDONE   RECORD ALREADY WRITTEN TO SYSUT7 ?\n         BO    KYSEQM04            YES - BYPASS WRITING SYSUT7\n         L     R4,WORKREC          POINT TO RECORD IN LIST FROM SYSUT2\n         BAS   R14,PUTSYS7         WRITE SYSUT7\nKYSEQM04 EQU   *\n         BAS   R14,GETWRK2         GET ANOTHER RECORD FROM WORK1 LIST\n         TM    FLAG,#EOFW2         END OF WORK1 LIST ?\n         BZ    KYSEQM01            NO - BRANCH\nKYSEQM05 EQU   *\n         MVC   WRK2X,WRK2H         MAKE CURRENT ADDR = HEAD\n         NI    FLAG,#NOEOFW2       TURN OFF WRK2 EOF FLAG\n         BAS   R14,GETWRK1\n         TM    FLAG,#EOFW1\n         BZ    KYSEQM01\nKYSEQM06 EQU   *\n         MVI   FLAG3,X'00'         TURN OFF ALL BITS IN FLAG3\n         OI    FLAG,#EOFW2\n         L     R14,KYSEQSA\n         BR    R14\n*\nCONCAT12 EQU   *                   CONCATENATE RECORDS AND WRITE SYSUT3\n         ST    R14,CONCATSA\n         L     R9,WRK1X\n         TM    WORKFLAG,#CPYDONE   ALREADY COPIED ? (PERFORMANCE HACK)\n         BO    CPYW2S3             YES - BRANCH AROUND\n         L     R6,REC3A            POINT TO SYSUT3 REC\n         L     R7,LRECL1           LENGTH FOR MVCL\n         L     R2,WORKREC          POINT TO WRK1 REC\n         LR    R3,R7               LENGTH FOR MVCL\n         MVCL  R6,R2               MOVE WRK1 REC TO SYSUT3 REC\n         OI    WORKFLAG,#CPYDONE   MARK LIST ITEM AS ALREADY COPIED\nCPYW2S3  EQU   *                   COPY WRK2 REC TO SYSUT3 REC\n         L     R9,WRK2X\n         L     R6,REC3C            POINT PAST WHAT WE JUST MOVED\n         L     R7,LRECL2           LENGTH FOR MVCL\n         L     R4,WORKREC          POINT TO WRK2 REC\n         LR    R5,R7               LENGTH FOR MVCL\n         MVCL  R6,R4               CONCATENATE WRK2 REC\n         L     R6,REC3A            POINT TO SYSUT3 REC\n         PUT   SYSUT3,(R6)         WRITE OUT SYSUT3 REC\n         L     R8,COUNT3           COUNT OF SYSUT3 RECORDS\n         LA    R8,1(R8)            ADD 1 TO R8 GIVING R8\n         ST    R8,COUNT3           SAVE COUNT OF SYSUT3 RECORDS\n         L     R14,CONCATSA\n         BR    R14\n*\nKY1LT000 EQU   *\n*                                  WRITE WRK1 RECORD WITH NO\n*                                  MATCHING WRK2 RECORD TO SYSUT4.\n*                                  PRESENCE OF SYSUT4 IN THE JCL IS\n*                                  TESTED FOR NEAR THE MRGTST0 LABEL.\n         ST    R14,KY1LTSA\nKY1LT001 EQU   *\n         TM    FLAG,#EOFW1         WRK1 EOF ?\n         BO    KY1LT002            YES - RETURN\n         L     R9,WRK1X\n         L     R2,WORKREC          POINT TO WRK1 REC\n         BAS   R14,PUTSYS4\n         TM    FLAG2,#DONES1       DONE WITH SYSUT1 ?\n         BO    KY1LT002            YES - RETURN\n         BAS   R14,GETWRK1\n         B     KY1LT001\nKY1LT002 EQU   *\n         L     R14,KY1LTSA\n         BR    R14\n*\nKY2LT000 EQU   *\n*                                  WRITE WRK2 RECORD WITH NO\n*                                  MATCHING WRK1 RECORD TO SYSUT5.\n*                                  PRESENCE OF SYSUT5 IN THE JCL IS\n*                                  TESTED FOR NEAR THE MRGTST0 LABEL.\n         ST    R14,KY2LTSA\nKY2LT001 EQU   *\n         TM    FLAG,#EOFW2         WRK2 EOF ?\n         BO    KY2LT002            YES - RETURN\n         L     R9,WRK2X\n         L     R4,WORKREC          POINT TO WRK2 REC\n         BAS   R14,PUTSYS5\n         TM    FLAG2,#DONES2       DONE WITH SYSUT2 ?\n         BO    KY2LT002            YES - RETURN\n         BAS   R14,GETWRK2\n         B     KY2LT001\nKY2LT002 EQU   *\n         L     R14,KY2LTSA\n         BR    R14\n*\nDONES100 EQU   *\n         L     R9,WRK2X\n         TM    FLAG4,#PRST5        SYSUT5 PRESENT ?\n         BZ    DONES105            NO PLACE TO WRITE - RETURN\n         TM    FLAG2,#DONES2       SYSUT2 DONE ?\n         BO    DONES105            YES - RETURN\n         TM    FLAG,#EOFW2         WRK2 EOF ?\n         BO    DONES102            YES - TRY BUFFER\nDONES101 EQU   *\n         L     R4,WORKREC          POINT TO WRK2 REC\n         BAS   R14,PUTSYS5\n         BAS   R14,GETWRK2\n         TM    FLAG,#EOFW2         WRK2 EOF ?\n         BZ    DONES101            NO - LOOP\nDONES102 EQU   *\n         BAS   R14,CMPRKY2         BUFFER ALREADY WRITTEN ?\n         BE    DONES103            YES - BRANCH\n         L     R4,REC2A            POINT TO SYSUT2 REC  !\n         BAS   R14,PUTSYS5\nDONES103 EQU   *\n         TM    FLAG2,#EOFS2        SYSUT2 EOF ?\n         BO    DONES105            YES - RETURN\nDONES104 EQU   *\n         BAS   R14,GETSYS2\n         TM    FLAG2,#EOFS2        SYSUT2 EOF ?\n         BO    DONES105            YES - RETURN\n         BAS   R14,PUTSYS5\n         B     DONES104            LOOP\nDONES105 EQU   *\n         B     CLOSEUP0\n*\nDONES200 EQU   *\n         L     R9,WRK1X\n         TM    FLAG4,#PRST4        SYSUT4 PRESENT ?\n         BZ    DONES205            NO PLACE TO WRITE - RETURN\n         TM    FLAG2,#DONES1       SYSUT1 DONE ?\n         BO    DONES205            YES - RETURN\n         TM    FLAG,#EOFW1         WRK1 EOF ?\n         BO    DONES202            YES - TRY BUFFER\nDONES201 EQU   *\n         L     R2,WORKREC\n         BAS   R14,PUTSYS4\n         BAS   R14,GETWRK1\n         TM    FLAG,#EOFW1         WRK1 EOF ?\n         BZ    DONES201            NO - LOOP\nDONES202 EQU   *\n         BAS   R14,CMPRKY1         BUFFER ALREADY WRITTEN ?\n         BE    DONES203            YES - BRANCH\n         L     R2,REC1A\n         BAS   R14,PUTSYS4\nDONES203 EQU   *\n         TM    FLAG2,#EOFS1        SYSUT1 EOF ?\n         BO    DONES205            YES - RETURN\nDONES204 EQU   *\n         BAS   R14,GETSYS1\n         TM    FLAG2,#EOFS1        SYSUT1 EOF ?\n         BO    DONES205            YES - RETURN\n         BAS   R14,PUTSYS4\n         B     DONES204\nDONES205 EQU   *\n         B     CLOSEUP0\n*\nRDMYJFCB EQU   *\n         ST    R14,MYJFCBSA\n         RDJFCB ((R8))\n         L     R14,MYJFCBSA\n         BR    R14\n*\nGETSYS1  EQU   *\n         ST    R14,GETSYS1A\n         L     R2,REC1A            POINT TO SYSUT1 RECORD\n         LA    R8,GETSYS1B         SET UP FOR EODAD\n         GET   SYSUT1,(R2)\n         L     R8,COUNT1           GET SYSUT1 RECORD COUNT\n         LA    R8,1(R8)            ADD 1 TO R8 GIVING R8\n         ST    R8,COUNT1           SAVE SYSUT1 RECORD COUNT\nGETSYS1B EQU   *\n         L     R14,GETSYS1A\n         BR    R14\n*\nGETSYS2  EQU   *\n         ST    R14,GETSYS2A\n         L     R4,REC2A            POINT TO SYSUT2 RECORD\n         LA    R8,GETSYS2B         SET UP FOR EODAD\n         GET   SYSUT2,(R4)\n         L     R8,COUNT2           GET SYSUT2 RECORD COUNT\n         LA    R8,1(R8)            ADD 1 TO R8 GIVING R8\n         ST    R8,COUNT2           SAVE SYSUT2 RECORD COUNT\nGETSYS2B EQU   *\n         L     R14,GETSYS2A\n         BR    R14\n*\nPUTSYS4  EQU   *\n         ST    R14,PUTSYS4A\n         LR    R6,R2\n         PUT   SYSUT4,(R6)\n         L     R8,COUNT4           COUNT OF SYSUT4 RECORDS\n         LA    R8,1(R8)            ADD 1 TO R8 GIVING R8\n         ST    R8,COUNT4           SAVE COUNT OF SYSUT4 RECORDS\n         L     R14,PUTSYS4A\n         BR    R14\n*\nPUTSYS5  EQU   *\n         ST    R14,PUTSYS5A\n         LR    R6,R4\n         PUT   SYSUT5,(R6)\n         L     R8,COUNT5           COUNT OF SYSUT5 RECORDS\n         LA    R8,1(R8)            ADD 1 TO R8 GIVING R8\n         ST    R8,COUNT5           SAVE COUNT OF SYSUT5 RECORDS\n         L     R14,PUTSYS5A\n         BR    R14\n*\nPUTSYS6  EQU   *\n         ST    R14,PUTSYS6A\n         LR    R6,R4\n         PUT   SYSUT6,(R6)\n         L     R8,COUNT8           COUNT OF SYSUT6 RECORDS\n         LA    R8,1(R8)            ADD 1 TO R8 GIVING R8\n         ST    R8,COUNT8           SAVE COUNT OF SYSUT6 RECORDS\n         OI    WORKFLAG,#WRTDONE\n         L     R14,PUTSYS6A\n         BR    R14\n*\nPUTSYS7  EQU   *\n         ST    R14,PUTSYS7A\n         LR    R6,R4\n         PUT   SYSUT7,(R6)\n         L     R8,COUNT9           COUNT OF SYSUT7 RECORDS\n         LA    R8,1(R8)            ADD 1 TO R8 GIVING R8\n         ST    R8,COUNT9           SAVE COUNT OF SYSUT7 RECORDS\n         OI    WORKFLAG,#WRTDONE\n         L     R14,PUTSYS7A\n         BR    R14\n*\nGETWRK1  EQU   *\n         TM    FLAG2,#DONES1\n         BO    GETWRK1B\n         L     R9,WRK1X\n         CLC   NEXT,=F'0'\n         BE    GETWRK1B\n         TM    WORKFLAG,#LAST1\n         BO    GETWRK1B\n         L     R9,NEXT\n         ST    R9,WRK1X\n         NI    WORKFLAG,#CPYRSET\n         B     GETWRK1C\nGETWRK1B EQU   *\n         OI    FLAG,#EOFW1\nGETWRK1C EQU   *\n         BR    R14\n*\nGETWRK2  EQU   *\n         TM    FLAG2,#DONES2\n         BO    GETWRK2B\n         L     R9,WRK2X\n         CLC   NEXT,=F'0'\n         BE    GETWRK2B\n         TM    WORKFLAG,#LAST1\n         BO    GETWRK2B\n         L     R9,NEXT\n         ST    R9,WRK2X\n         B     GETWRK2C\nGETWRK2B EQU   *\n         OI    FLAG,#EOFW2\nGETWRK2C EQU   *\n         BR    R14\n*\nMOVEKY   MVC   0(0,R2),0(R4)       EX'D MOVE OF KEY\n*\nMOVEKY1  EQU   *\n         L     R4,REC1A\n         A     R4,KYOSET1          POINT TO KEY IN SYSUT1 RECORD\n         L     R2,REC1KYA          POINT TO KEY HOLD AREA\n         L     R6,KYLN             LOAD KEY LENGTH\n         CHI   R6,255              DO WE NEED TO DO AN MVCL ?\n         BH    MOVEKY1A            YES - BRANCH\n         EX    R6,MOVEKY           MOVE KEY TO HOLD AREA\n         B     MOVEKY1E\nMOVEKY1A EQU   *                   LONG KEY NEEDS MVCL\n         STM   R2,R5,MVCL$GRR\n         L     R3,KYLN             LENGTH OF KEY\n         LA    R3,1(R3)            PREVIOUSLY SUBTRACTED 1, ADD IT BACK\n         LR    R5,R3               LENGTH AGAIN\n         MVCL  R2,R4\n         LM    R2,R5,MVCL$GRR\nMOVEKY1E EQU   *\n         BR    R14\n*\nMOVEKY2  EQU   *\n         L     R4,REC2A\n         A     R4,KYOSET2          POINT TO KEY IN SYSUT2 RECORD\n         L     R2,REC2KYA          POINT TO KEY HOLD AREA\n         L     R6,KYLN             LOAD KEY LENGTH\n         CHI   R6,255              DO WE NEED TO DO AN MVCL ?\n         BH    MOVEKY2A            YES - BRANCH\n         EX    R6,MOVEKY           MOVE KEY TO HOLD AREA\n         B     MOVEKY2E\nMOVEKY2A EQU   *                   LONG KEY NEEDS MVCL\n         STM   R2,R5,MVCL$GRR\n         L     R3,KYLN             LENGTH OF KEY\n         LA    R3,1(R3)            PREVIOUSLY SUBTRACTED 1, ADD IT BACK\n         LR    R5,R3               LENGTH AGAIN\n         MVCL  R2,R4\n         LM    R2,R5,MVCL$GRR\nMOVEKY2E EQU   *\n         BR    R14\n*\nCMPRKY   CLC   0(0,R2),0(R4)       EX'D COMPARISON OF KEYS\n*\nCMPRKY1  EQU   *\n         L     R4,REC1A\n         A     R4,KYOSET1          POINT TO KEY IN SYSUT1 RECORD\n         L     R2,REC1KYA          POINT TO KEY HOLD AREA\n         L     R15,KYLN            LOAD KEY LENGTH\n         CHI   R15,255             DO WE NEED TO DO A CLCL ?\n         BH    CMPRKY1C            YES - BRANCH\n         EX    R15,CMPRKY          COMPARE RECORD KEY TO HOLD AREA\n         B     CMPRKY1E\nCMPRKY1C EQU   *\n         LA    R15,1(,R15)         LENGTH WAS STORED -1 FOR CLC\n         LR    R3,R15              LENGTH\n         LR    R5,R15              LENGTH\n         STM   R2,R5,CLCL$GRR      CLCL MUNGES THE REGISTERS\n         CLCL  R2,R4               COMPARE RECORD KEY TO HOLD AREA\n         LM    R2,R5,CLCL$GRR      RELOAD MY REGISTERS\nCMPRKY1E EQU   *\n         BR    R14\n*\nCMPRKY2  EQU   *\n         L     R4,REC2A\n         A     R4,KYOSET2          POINT TO KEY IN SYSUT2 RECORD\n         L     R2,REC2KYA          POINT TO KEY HOLD AREA\n         L     R15,KYLN            LOAD KEY LENGTH\n         CHI   R15,255             DO WE NEED TO DO A CLCL ?\n         BH    CMPRKY2C            YES - BRANCH\n         EX    R15,CMPRKY          COMPARE RECORD KEY TO HOLD AREA\n         B     CMPRKY2E\nCMPRKY2C EQU   *\n         LA    R15,1(,R15)         LENGTH WAS STORED -1 FOR CLC\n         LR    R3,R15              LENGTH\n         LR    R5,R15              LENGTH\n         STM   R2,R5,CLCL$GRR      CLCL MUNGES THE REGISTERS\n         CLCL  R2,R4               COMPARE RECORD KEY TO HOLD AREA\n         LM    R2,R5,CLCL$GRR      RELOAD MY REGISTERS\nCMPRKY2E EQU   *\n         BR    R14\n*\nERR01    EQU   *\n         MVI   MSGEDD01,C'1'\n         B     PUTERR01\nERR02    EQU   *\n         MVI   MSGEDD02,C'1'\n         B     PUTERR02\nERR03    EQU   *\n         MVI   MSGEDD03,C'1'\n         L     R2,LRECL1\n         CVD   R2,LRECLP\n         LA    R2,LRECLP\n         UNPK  MSGELR03,5(3,R2)\n         LA    R2,MSGELR03\n         OI    L'MSGELR03-1(R2),X'F0'\n         B     PUTERR03\nERR04    EQU   *\n         MVI   MSGEDD01,C'2'\n         B     PUTERR01\nERR05    EQU   *\n         MVI   MSGEDD02,C'2'\n         B     PUTERR02\nERR06    EQU   *\n         MVI   MSGEDD03,C'2'\n         L     R2,LRECL2\n         CVD   R2,LRECLP\n         LA    R2,LRECLP\n         UNPK  MSGELR03,5(3,R2)\n         LA    R2,MSGELR03\n         OI    L'MSGELR03-1(R2),X'F0'\n         B     PUTERR03\nERR07    EQU   *\n         MVI   MSGEDD02,C'3'\n         B     PUTERR02\nERR08    EQU   *\n         MVI   MSGEDD02,C'4'\n         B     PUTERR02\nERR09    EQU   *\n         MVI   MSGEDD02,C'5'\n         B     PUTERR02\nERR10    EQU   *\n         LA    R2,MSGERR04\n         BAS   R14,DISPLAY\n         MVC   RC,=F'8'\n         B     GOBACK\nERR11    EQU   *\n         CVD   R8,LRECLP\n         LA    R2,LRECLP\n         UNPK  MSGEL105,5(3,R2)\n         LA    R2,MSGEL105\n         OI    L'MSGEL105-1(R2),X'F0'\n         L     R2,LRECL1\n         CVD   R2,LRECLP\n         LA    R2,LRECLP\n         UNPK  MSGEL205,5(3,R2)\n         LA    R2,MSGEL205\n         OI    L'MSGEL205-1(R2),X'F0'\n         L     R2,LRECL2\n         CVD   R2,LRECLP\n         LA    R2,LRECLP\n         UNPK  MSGEL305,5(3,R2)\n         LA    R2,MSGEL305\n         OI    L'MSGEL305-1(R2),X'F0'\n         B     PUTERR05\nERR12    EQU   *\n         MVI   MSGEDD02,C'6'\n         B     PUTERR02\nERR13    EQU   *\n         MVI   MSGEDD02,C'7'\n         B     PUTERR02\nPUTERR01 EQU   *\n         LA    R2,MSGERR01\n         BAS   R14,DISPLAY\n         MVC   RC,=F'8'\n         B     GOBACK\nPUTERR02 EQU   *\n         LA    R2,MSGERR02\n         BAS   R14,DISPLAY\n         MVC   RC,=F'8'\n         B     GOBACK\nPUTERR03 EQU   *\n         LA    R2,MSGERR03\n         BAS   R14,DISPLAY\n         MVC   RC,=F'8'\n         B     GOBACK\nPUTERR05 EQU   *\n         LA    R2,MSGERR05\n         BAS   R14,DISPLAY\n         MVC   RC,=F'8'\n         B     GOBACK\nPUTERR06 EQU   *\n         LA    R2,MSGERR06\n         BAS   R14,DISPLAY\n         MVC   RC,=F'8'\n         B     GOBACK\nXRDJFCB  EQU   *\n*        IF THIS CODE IS EXECUTED RDJFCB RETURNED SOMETHING\n*        OTHER THAN 0, 4 OR 8.  R15 CONTAINS THE RETURNED VALUE.\n*        R14 CONTAINS THE RETURN ADDRESS SO YOU CAN SEE WHICH\n*        DD STATEMENT HAD ITS RDJFCB GO BAD.\n         ABEND 222,DUMP,STEP,USER,REASON=(R15)\n*\nXDEVTY   EQU   *\n*        IF THIS CODE IS EXECUTED DEVTYPE RETURNED SOMETHING\n*        OTHER THAN 0 OR 4.  R15 CONTAINS THE RETURNED VALUE.\n*        R14 CONTAINS THE RETURN ADDRESS SO YOU CAN SEE WHICH\n*        DD STATEMENT HAD ITS DEVTYPE GO BAD.\n         ABEND 333,DUMP,STEP,USER,REASON=(R15)\n*\nCLOSEUP0 EQU   *\n         CLOSE (SYSUT1),MODE=31\n         CLOSE (SYSUT2),MODE=31\n         MVC   MSGIOP02(4),=C'READ'\n         MVI   MSGIDD02,C'1'\n         L     R8,COUNT1\n         CVD   R8,COUNTP\n         UNPK  MSGICT02,COUNTP\n         OI    MSGICT02+L'MSGICT02-1,X'F0'\n         LA    R2,MSGINF02\n         BAS   R14,DISPLAY\n         MVI   MSGIDD02,C'2'\n         L     R8,COUNT2\n         CVD   R8,COUNTP\n         UNPK  MSGICT02,COUNTP\n         OI    MSGICT02+L'MSGICT02-1,X'F0'\n         BAS   R14,DISPLAY\n         TM    FLAG4,#PRST3\n         BZ    CLOSEUP1\n         CLOSE (SYSUT3),MODE=31\n         MVC   MSGIOP02(7),=C'WRITTEN'\n         MVI   MSGIDD02,C'3'\n         L     R8,COUNT3\n         CVD   R8,COUNTP\n         UNPK  MSGICT02,COUNTP\n         OI    MSGICT02+L'MSGICT02-1,X'F0'\n         BAS   R14,DISPLAY\nCLOSEUP1 EQU   *\n         TM    FLAG4,#PRST4\n         BZ    CLOSEUP2\n         CLOSE (SYSUT4),MODE=31\n         MVC   MSGIOP02(7),=C'WRITTEN'\n         MVI   MSGIDD02,C'4'\n         L     R8,COUNT4\n         CVD   R8,COUNTP\n         UNPK  MSGICT02,COUNTP\n         OI    MSGICT02+L'MSGICT02-1,X'F0'\n         BAS   R14,DISPLAY\nCLOSEUP2 EQU   *\n         TM    FLAG4,#PRST5\n         BZ    CLOSEUP3\n         CLOSE (SYSUT5),MODE=31\n         MVC   MSGIOP02(7),=C'WRITTEN'\n         MVI   MSGIDD02,C'5'\n         L     R8,COUNT5\n         CVD   R8,COUNTP\n         UNPK  MSGICT02,COUNTP\n         OI    MSGICT02+L'MSGICT02-1,X'F0'\n         BAS   R14,DISPLAY\nCLOSEUP3 EQU   *\n         TM    FLAG4,#PRST6\n         BZ    CLOSEUP4\n         CLOSE (SYSUT6),MODE=31\n         MVC   MSGIOP02(7),=C'WRITTEN'\n         MVI   MSGIDD02,C'6'\n         L     R8,COUNT8\n         CVD   R8,COUNTP\n         UNPK  MSGICT02,COUNTP\n         OI    MSGICT02+L'MSGICT02-1,X'F0'\n         BAS   R14,DISPLAY\nCLOSEUP4 EQU   *\n         TM    FLAG4,#PRST7\n         BZ    RLSESTRG\n         CLOSE (SYSUT7),MODE=31\n         MVC   MSGIOP02(7),=C'WRITTEN'\n         MVI   MSGIDD02,C'7'\n         L     R8,COUNT9\n         CVD   R8,COUNTP\n         UNPK  MSGICT02,COUNTP\n         OI    MSGICT02+L'MSGICT02-1,X'F0'\n         BAS   R14,DISPLAY\nRLSESTRG EQU   *\n         L     R2,LRECL1\n         STORAGE RELEASE,LENGTH=(R2),ADDR=REC1A\n         L     R2,KYLN\n         STORAGE RELEASE,LENGTH=(R2),ADDR=REC1KYA\n         STORAGE RELEASE,LENGTH=(R2),ADDR=REC2KYA\n         L     R2,LRECL2\n         STORAGE RELEASE,LENGTH=(R2),ADDR=REC2A\n         TM    FLAG4,#PRST3\n         BZ    GOBACK\n         L     R2,LRECL3\n         STORAGE RELEASE,LENGTH=(R2),ADDR=REC3A\n         L     R9,CMRGWORK\n         BAS   R14,FREELIST\n         L     R9,CWRKREC1\n         BAS   R14,FREELIST\n         L     R9,CWRKREC2\n         BAS   R14,FREELIST\nGOBACK   EQU   *\n         CLOSE (SYSPRINT),MODE=31\n         L     R15,RC              LOAD RETURN CODE\n         JRETURND\n*\nCLSSYSU1 EQU   *\n         CLOSE (SYSUT1),MODE=31\n         OI    FLAG2,#EOFS1\n         BR    R8\nCLSSYSU2 EQU   *\n         CLOSE (SYSUT2),MODE=31\n         OI    FLAG2,#EOFS2\n         BR    R8\n*\nFREELIST EQU   *\n         ST    R14,FREELSTA\n         CPOOL DELETE,CPID=(R9)\nFREERTN  EQU   *\n         L     R14,FREELSTA\n         BR    R14\n*\nDSPLJFCB EQU   *\n         ST    R14,DSPLSA\n         LH    R6,ARLRTRVD\nLOOP01   EQU   *\n         MVC   INFO_LEN,0(R7)\n         LA    R7,4(R7)                  POINT TO JFCB\n         USING INFMJFCB,R7               MAP JFCB\n         BAS   R14,INFDSN                CONSTRUCT DSN IN MESSAGE\n         LA    R2,MSGINF01\n         BAS   R14,DISPLAY               DISPLAY DSN\n         MVI   MSGINF01,C' '\n         MVC   MSGINF01+1(L'MSGINF01-1),MSGINF01\n         AHI   R7,-4                     ADJUST FOR LEADING FULLWORD\n         AH    R7,INFO_LEN               POINT AT NEXT ENTRY\n         BCT   R6,LOOP01                 DO IT AGAIN\n         XR    R4,R4                     CLEAR R4\n         ICM   R4,B'0111',ARLRLEN        STUFF LENGTH OF GETMAIN IN R4\n         XR    R5,R5                     CLEAR R5\n         ICM   R5,B'0001',ARLPOOL        STUFF SUBPOOL IN R5\n         L     R6,ARLAREA                ADDRESS OF GETMAINED AREA\n         FREEMAIN RU,LV=(R4),SP=(R5),A=(R6) FREE WHAT RDJFCB GETMAINED\n         L     R14,DSPLSA\n         BR    R14\n         DROP  R7\n*\nINFDSN   EQU   *\n         ST    R14,INFDSNSA\n         USING INFMJFCB,R7               MAP JFCB\n         MVI   MSGIDS01,C' '\n         MVC   MSGIDS01+1(L'MSGIDS01-1),MSGIDS01\n         MVC   MSGIDS01(L'JFCBDSNM),JFCBDSNM  MOVE DSN TO OUTPUT\n         TM    JFCBIND1,JFCPDS           IS THIS A PDS MEMBER?\n         BNO   NOTMBR                    NO  - BRANCH\n         LA    R5,MSGIDS01\nCK4BLNK1 EQU   *                         LOOKING FOR FIRST BLANK\n         CLI   0(R5),C' '                IS THIS CHAR A BLANK?\n         BE    BLNKFND1                  YES - BRANCH\n         LA    R5,1(R5)                  POINT AT NEXT CHAR\n         B     CK4BLNK1                  DO IT AGAIN\nBLNKFND1 EQU   *\n         MVI   0(R5),C'('                MOVE IN LEFT PAREN\n         LA    R5,1(R5)                  POINT AT NEXT CHAR\n         MVC   0(L'JFCBELNM,R5),JFCBELNM MOVE MEMBER NAME\nCK4BLNK2 EQU   *                         LOOKING FOR A BLANK\n         CLI   0(R5),C' '                IS THIS CHAR A BLANK?\n         BE    BLNKFND2                  YES - BRANCH\n         LA    R5,1(R5)                  POINT AT NEXT CHAR\n         B     CK4BLNK2                  DO IT AGAIN\nBLNKFND2 EQU   *\n         MVI   0(R5),C')'                MOVE IN RIGHT PAREN\nNOTMBR   EQU   *\n         L     R14,INFDSNSA\n         BR    R14\n         DROP  R7\n*\nDISPLAY  EQU   *\n         ST    R14,DISPLAYA\n         PUT   SYSPRINT,(R2)\n         L     R14,DISPLAYA\n         BR    R14\n*                                  WORKING-STORAGE SECTION\nLINKADDR DC    F'0'\nPARMADDR DC    F'0'\nWRKGSTRG DC    F'0'\nCMRGWORK DC    F'0'   CPOOL ID\nCWRKREC1 DC    F'0'   CPOOL ID\nCWRKREC2 DC    F'0'   CPOOL ID\nINFO_LEN DC    H'0'\n$SETUP   DC    A(SETUP)\n$ALCTWRK DC    A(ALCTWORK)\nTYPE13X  DS    0F\n         DC    X'93',AL3(ARL)\nARL      IHAARL DSECT=NO,DESCR=YES\nTYPE07X  DC    X'87',AL3(MYJFCB)\nMYJFCB   DC    XL(JFCBLGTH)'00'\n*        LTORG\n*                                      FILE SECTION\n*                                      MESSAGES\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               RECFM=F,                                                X\n               LRECL=#PRINT,                                           X\n               MACRF=PM,                                               X\n               DCBE=SYSPRINE\nSYSPRINE DCBE  RMODE31=BUFF\n*                                      OPTIONAL INPUT CARD\nSYSIN    DCB   DSORG=PS,                                               X\n               DDNAME=SYSIN,                                           X\n               MACRF=GM,                                               X\n               DCBE=SYSINE\nSYSINE   DCBE  RMODE31=BUFF\n*                                      INPUT FILE 1\nSYSUT1   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT1,                                          X\n               MACRF=GM,                                               X\n               EXLST=TYPE13X,                                          X\n               DCBE=SYSUT1E\nSYSUT1E  DCBE  RMODE31=BUFF,EODAD=CLSSYSU1\n*                                      INPUT FILE 2\nSYSUT2   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT2,                                          X\n               MACRF=GM,                                               X\n               EXLST=TYPE13X,                                          X\n               DCBE=SYSUT2E\nSYSUT2E  DCBE  RMODE31=BUFF,EODAD=CLSSYSU2\n*                                      OUTPUT FILE 1\nSYSUT3   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT3,                                          X\n               MACRF=PM,                                               X\n               EXLST=TYPE07X,                                          X\n               DCBE=SYSUT3E\nSYSUT3E  DCBE  RMODE31=BUFF\n*                                      OUTPUT FILE 2\nSYSUT4   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT4,                                          X\n               MACRF=PM,                                               X\n               EXLST=TYPE07X,                                          X\n               DCBE=SYSUT4E\nSYSUT4E  DCBE  RMODE31=BUFF\n*                                      OUTPUT FILE 3\nSYSUT5   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT5,                                          X\n               MACRF=PM,                                               X\n               EXLST=TYPE07X,                                          X\n               DCBE=SYSUT5E\nSYSUT5E  DCBE  RMODE31=BUFF\n*                                      OUTPUT FILE 4\nSYSUT6   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT6,                                          X\n               MACRF=PM,                                               X\n               EXLST=TYPE07X,                                          X\n               DCBE=SYSUT6E\nSYSUT6E  DCBE  RMODE31=BUFF\n*                                      OUTPUT FILE 5\nSYSUT7   DCB   DSORG=PS,                                               X\n               DDNAME=SYSUT7,                                          X\n               MACRF=PM,                                               X\n               EXLST=TYPE07X,                                          X\n               DCBE=SYSUT7E\nSYSUT7E  DCBE  RMODE31=BUFF\n*\nSETUP    CSECT\n*                                  INITIALIZE WORKING-STORAGE\n         JSAVED\n         BALR  R11,0\n         USING *,R11\n         USING $WRKSTRG,R10            WORKING-STORAGE DSECT\n         MVC   WRK1X,=F'0'\n         MVC   WRK2X,=F'0'\n         MVC   WRK1H,=F'0'\n         MVC   WRK2H,=F'0'\n         MVC   WRK1T,=F'0'\n         MVC   WRK2T,=F'0'\n         MVC   LRECL1,=F'0'\n         MVC   LRECL2,=F'0'\n         MVC   LRECL3,=F'0'\n         MVC   KYLN,=F'0'\n         MVC   KYOSET1,=F'0'\n         MVC   KYOSET2,=F'0'\n         MVC   KYLNP,=PL8'0'\n         MVC   KYOSET1P,=PL8'0'\n         MVC   KYOSET2P,=PL8'0'\n         MVI   FLAG,X'00'          TURN OFF FLAGS\n         MVI   FLAG2,X'00'         TURN OFF FLAGS\n         MVI   FLAG3,X'00'         TURN OFF FLAGS\n         MVC   RC,=F'0'            SET RETURN CODE TO ZERO\n         MVC   NULLFILE,=C'NULLFILE' LITERAL FOR DD DUMMY TESTING\n\n*                                  PACK THE PARMS\n         PACK  KYLNP,INKYLN\n         PACK  KYOSET1P,INKYOS1\n         PACK  KYOSET2P,INKYOS2\n*                                  CONVERT PARMS TO BINARY AND KEEP\n         CVB   R9,KYLNP\n         BCTR  R9,0                SUBTRACT 1 FOR MVC AND CLC\n         ST    R9,KYLN\n         CVB   R9,KYOSET1P\n         ST    R9,KYOSET1\n         CVB   R9,KYOSET2P\n         ST    R9,KYOSET2\n         LA    R9,MSGERR01\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGERR01-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGERR02\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGERR02-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGERR03\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGERR03-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGERR04\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGERR04-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGERR05\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGERR05-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGERR06\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGERR06-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGINF01\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGINF01-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGINF02\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGINF02-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGINF03\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGINF03-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGINF04\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGINF04-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGINF05\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGINF05-1,R9),0(R9)  INITIALIZE THE REST\n         LA    R9,MSGINF06\n         MVI   0(R9),C' '          INITIALIZE MESSAGE FIRST BYTE\n         MVC   1(L'MSGINF06-1,R9),0(R9)  INITIALIZE THE REST\n         MVC   MSGE0101,=C'ERROR: SYSUT'\n         MVC   MSGE0201,=C' MUST BE DEFINED'\n         MVC   MSGE0102,=C'ERROR: RDJFCB FOR SYSUT'\n         MVC   MSGE0202,=C' RC=8'\n         MVC   MSGE0103,=C'ERROR: KEY LENGTH + OFFSET > SYSUT'\n         MVC   MSGE0203,=C' LRECL ('\n         MVC   MSGE0303,=C')'\n         MVC   MSGE0104,=C'ERROR: AT LEAST ONE OF SYSUT3 SYSUT4 SYSUT5'\n         MVC   MSGE0204,=C'SYSUT6 SYSUT7 MUST BE DEFINED'\n         MVC   MSGE0105,=C'ERROR: SYSUT3 LRECL ('\n         MVC   MSGE0205,=C') NOT = SYSUT1 LRECL ('\n         MVC   MSGE0305,=C') + SYSUT2 LRECL ('\n         MVC   MSGE0405,=C')   '\n         MVC   MSGE0106,=C'ERROR: SYSUT'\n         MVC   MSGE0406,=C'IS NOT FIXED FORMAT  '\n         MVC   MSGI0101,=C'SYSUT'\n         MVC   MSGI0201,=C' IS '\n         MVC   MSGI0102,=C'SYSUT'\n         MVC   MSGI0202,=C' RECORDS '\n         MVC   MSGI0302,=C' = '\n         MVC   MSGI0104,=C'SYSUT'\n         MVC   MSGI0204,=C' KEY OFFSET = '\n         MVC   MSGI0105,=C'KEY LENGTH = '\n         MVC   MSGINF06(20),=C'MTCHMRG VERSION 3.01'\n         JRETURND\nALCTWORK CSECT\n* ON ENTRY\n*   R8 ADDRESS OF WHERE TO STORE THE ALLOCATED $MRGWORK ADDRESS\n*   R7 LENGTH TO ALLOCATE FOR WORKREC INSIDE OF $MRGWORK\n*\n         JSAVED\n         BALR  R11,0\n         USING *,R11\n         USING $WRKSTRG,R10            WORKING-STORAGE DSECT\n         USING $MRGWORK,R9\n         CPOOL GET,U,CPID=CMRGWORK,REGS=SAVE\n         ST    R1,0(,R8)\n         LR    R9,R1\n         CPOOL GET,U,CPID=(R7),REGS=SAVE\n         ST    R1,WORKREC\n         MVC   PREV,=F'0'\n         MVC   NEXT,=F'0'\n         MVC   WORKFLAG,=F'0'\nALCTRTN  EQU   *\n         JRETURND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGISTER": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x01\\x0f\\x01\\x01\\x01\\x0f\\x17&\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-10T00:00:00", "modifydate": "2001-01-10T17:26:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         REGISTER &LABEL=R,&REG1=0,&REG2=15,&NUM1=0\n         LCLA  &A,&B\n&A       SETA  &REG1\n&B       SETA  &NUM1\n.COUNTOK ANOP\n&LABEL.&A EQU  &B\n         AIF   (&A EQ &REG2).END\n&A       SETA  &A+1\n&B       SETA  &B+1\n         AGO   .COUNTOK\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTDATA": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x009\\x01\\x03\\x03\\x8f\\x01\\x04\\x01_\\x10!\"P\"\"\\x00\\x00\\xe3\\xc5\\xe2\\xe3\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-02-07T00:00:00", "modifydate": "2004-01-15T10:21:39", "lines": 8784, "newlines": 8738, "modlines": 0, "user": "TESTJCL"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT498/FILE498.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT498", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}