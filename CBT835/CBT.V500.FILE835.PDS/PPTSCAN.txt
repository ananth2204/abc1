         TITLE 'SCAN THE PPT TABLE'
ZERO     EQU   X'00'                   ZERO
SPACE    EQU   C' '                    SPACE
SIGNF    EQU   X'F0'                   POSITIVE SIGN
PPTSCAN  CSECT
PPTSCAN  AMODE 31
PPTSCAN  RMODE 24
         BAKR  R14,0                   SAVE CALLER'S ARS + GPRS
*                                      IN THE LINKAGE STACK
         USING PPTSCAN,R12             SET UP PROGRAM BASE REGISTER
         LAE   R12,0(R15,0)            SET UP PROGRAM BASE REGISTER
GETWORK  EQU   *
         L     R9,=AL4(WORKALEN)       WORK AREA LENGTH
         STORAGE OBTAIN,LENGTH=(R9),ADDR=(R10),SP=0,KEY=8,             X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         LR    R13,R1                  @ THE WORKAREA
         USING SAVEAREA,R13            INFORM THE ASSEMBLER
         LA    R0,SAVEAREA             @ THE WORKAREA
         LA    R1,WORKALEN(0,0)        LENGTH
         LA    R14,=X'00'              ZERO FILL
         SR    R15,R15                 PROPAGATE
         MVCL  R0,R14                  CLEAR THE AREA
         MVC   PREVSA,=C'F1SA'         PUT ACRONYM INTO SAVEAREA
*                                      TO INDICATE STATUS SAVED ON
*                                      THE LINKAGE STACK.
CONTROL  EQU   *                       MAIN PROGRAM CONTROL
         BAS   R2,SCANPPT              SCAN THE PPT
         B     RETURN                  RETURN TO CALLER
RETURN   EQU   *
         LAE   R1,0(R13,0)             ADDRESS TO FREE
         L     R9,=AL4(WORKALEN)       WORK AREA LENGTH
         STORAGE RELEASE,ADDR=(R1),LENGTH=(R9),SP=0,KEY=8,             X
               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')
         L     R15,RETCODE             SET RC
         PR                            RESTORE CALLER'S AR'S
*                                      GPRS 2-14 AND RETURN
*                                      TO CALLER
SCANPPT  EQU  *                        SCAN THE PPT TABLE
         STCM  R2,B'1111',RET@         STORE RETURN @
         MVC   PPTMACRO,PPTABLE        MOVE THE IEFPPSCN MACRO AREA
         XC    PPTTOKEN,PPTTOKEN       START AT TOP OF PPT
PPTRUN   EQU  *
         MODESET MODE=SUP,KEY=ZERO     SUPERVISOR KEY 0 STATE
         LA    R9,PPTINFO              @ PPT RETURN AREA
         LA    R10,PPTMACRO            @ PPT MACRO AREA
         IEFPPSCN REQUEST=NEXT,TOKEN=PPTTOKEN,PPTINFO=(R9),            X
               MF=(E,(R10),COMPLETE)
         LTR   R15,R15                 END OF SCAN?
         BNZ   PPTEND                  END THE PPT SCAN
         MODESET MODE=PROB,KEY=NZERO   PROBLEM KEY 8 STATE
         LA    R8,PPTENT               @ OF PPT INFO
         USING PPT1,R8                 INFORM THE ASSEMBLER
         LA    R9,FMTPPT               @ FORMATTED PPT ENTRY
         USING GENPPT,R9               INFORM THE ASSEMBLER
         MVC   GPPTNAME,PPTNAME        PROGRAM NAME
         MVC   GPPTNCNC,=CL3'NO '      DEFAULT
         TM    PPTBYTE1,PPTNCNCL       NON CANCEL?
         BNO   SPECPKEY                NO-
         MVC   GPPTNCNC,=CL3'YES'      SET
SPECPKEY EQU   *
         MVC   GPPTSKEY,=CL3'NO '      DEFAULT
         TM    PPTBYTE1,PPTSKEY        SPECIAL STORAGE KEY?
         BNO   NONSWAP                 NO-
         MVC   GPPTSKEY,=CL3'YES'      SET
NONSWAP  EQU   *
         MVC   GPPTNSWP,=CL3'NO '      DEFAULT
         TM    PPTBYTE1,PPTNSWP        NON-SWAPPABLE?
         BNO   PRIV                    NO-
         MVC   GPPTNSWP,=CL3'YES'      SET
PRIV     EQU   *
         MVC   GPPTPRIV,=CL3'NO '      DEFAULT
         TM    PPTBYTE1,PPTPRIV        PRIVILEGED?
         BNO   SYSTASK                 NO-
         MVC   GPPTPRIV,=CL3'YES'      SET
SYSTASK  EQU   *
         MVC   GPPTSYST,=CL3'NO '      DEFAULT
         TM    PPTBYTE1,PPTSYSTK       SYSTEM TASK?
         BNO   NDSI                    NO-
         MVC   GPPTSYST,=CL3'YES'      SET
NDSI     EQU   *
         MVC   GPPTNDSI,=CL3'NO '      DEFAULT
         TM    PPTBYTE1,PPTNDSI        DATASET INTEGRITY?
         BO    NOPASS                  NO-
         MVC   GPPTNDSI,=CL3'YES'      SET
NOPASS   EQU   *
         MVC   GPPTNOPS,=CL3'NO '      DEFAULT
         TM    PPTBYTE1,PPTNOPAS       BYPASS PASSWORD PROTECTION?
         BNO   PROTKY                  NO-
         MVC   GPPTNOPS,=CL3'YES'      SET
PROTKY   EQU   *
         SR    R7,R7                   ZEROIZE
         IC    R7,PPTKEY               PICK UP THE PROTECT KEY
         SRL   R7,4(0)                 MOVE INTO LOW BYTE
         CVD   R7,DW                   CONVERT TO DECIMAL
         UNPK  UNPKKEY,PROTKEY         MAKE IT READABLE
         OI    UNPKKEY+L'UNPKKEY-1,X'F0'  FORCE SIGN TO F
         MVC   GPPTKEYS,UNPKKEY+1      MOVE TO REXX AREA
CPUAFF   EQU   *
         LA    R5,PPTCPUA              @ CPU AFFINITY
         LA    R6,L'PPTCPUA            LENGTH TO CONVERT
         LA    R7,GPPTCPUA             @ OUTPUT AREA
CPUAFFCN EQU   *
         SR    R4,R4                   ZEROIZE
         IC    R4,0(R5)                CHARACTER TO CONVERT
         SRL   R4,4(0)                 REMOVE LOW NIBBLE
         STC   R4,CHAR                 STORE
         BAL   R2,HEXCONV              DO THE HEX CONVERSION
         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA
         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA
         MVC   CHAR,0(R5)              NEXT NIBBLE
         NI    CHAR,X'0F'              REMOVE LOW NIBBLE
         BAL   R2,HEXCONV              DO THE HEX CONVERSION
         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA
         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA
         LA    R5,1(,R5)               NEXT BYTE TO CONVERT
         BCT   R6,CPUAFFCN             DO WHILE R6 > 0?
P2LPU    EQU   *
         MVC   GPPT2LPU,=CL3'NO '      DEFAULT
         TM    PPTPUBYT,PPT2LPU        2ND LEVEL PREFERED STORAGE
         BNO   P1LPU                   NO-
         MVC   GPPT2LPU,=CL3'YES'      SET
P1LPU    EQU   *
         MVC   GPPT1LPU,=CL3'NO '      DEFAULT
         TM    PPTPUBYT,PPT1LPU        1ST LEVEL PREFERED STORAGE   PG1
         BNO   PORIG                   NO-
         MVC   GPPT2LPU,=CL3'YES'      SET                          PG1
PORIG    EQU  *
         MVC   GPPTORIG,=CL3'YES'      DEFAULT
         TM    PPTORIG,PPTDEFLT        ORIGIN?
         BO    BLDSTEM                 BUILD THE STEM VARIABLE
         MVC   GPPTORIG,=CL3'NO '      SET
BLDSTEM  EQU   *
         XR    R7,R7                   ZEROIZE
         ICM   R7,B'0011',NEXTSTEM     CURRENT STEM VALUE
         LA    R7,1(,R7)               UPDATE STEM
         STCM  R7,B'0011',NEXTSTEM     STORE BACK
         BAL   R2,STEMBLD              BUILD REXX STEM VARIABLE
         LTR   R15,R15                 STEM BUILD OKAY?
         BZ    PPTRUN                  YES-
         ST    R15,RETCODE2            STORE THE RETURN CODE
         MVC   RETCODE,=AL4(4)         SCAN ERROR
         B     RSETMODE                RETURN TO CALLER
PPTEND   EQU   *
         C     R15,=F'4'               TRUE END OF SCAN?
         BE    STEM0                   YES-
         ST    R15,RETCODE2            STORE THE RETURN CODE
         MVC   RETCODE,=AL4(8)         SCAN ERROR
         B     RSETMODE                RETURN TO CALLER
STEM0    EQU   *
         MVC   STEMCNT,NEXTSTEM        NO OF STEMS CREATED
         XC    NEXTSTEM,NEXTSTEM       CLEAR
         BAL   R2,STEMBLD              BUILD REXX STEM VARIABLE
         LTR   R15,R15                 STEM BUILD OKAY?
         BZ    ALLDONE                 YES-
         ST    R15,RETCODE2            STORE THE RETURN CODE
         MVC   RETCODE,=AL4(4)         SCAN ERROR
         B     RSETMODE                RETURN TO CALLER
ALLDONE  EQU   *
         SR    R15,R15                 RC=0
         ST    R15,RETCODE2            STORE THE RETURN CODE
         XC    RETCODE,RETCODE         SET TO ZERO
RSETMODE EQU   *
         MODESET MODE=PROB,KEY=NZERO   PROBLEM KEY 8 STATE
         ICM    R2,B'1111',RET@        RESET RETURN @
         BR     R2                     RETURN TO CALLER
HEXCONV  EQU   *                       PRINT HEX ROUTINE
         CLI   CHAR,X'09'              > 9?
         BH    HEX10                   YES-
         OI    CHAR,X'F0'              RANGE F0-F9
         BR    R2                      RETURN TO CALLER
HEX10    EQU   *
         XR    R4,R4                   ZEROIZE
         IC    R4,CHAR                 INSERT CHAR INTO REG
         SH    R4,=H'9'                GET CHAR NO
         STC   R4,CHAR                 STORE
         OI    CHAR,X'C0'              RANGE C0-C6
         BR    R2                      RETURN TO CALLER
STEMBLD  EQU   *                       BUILD STEM ROUTINE
         SR    R7,R7                   ZEROIZE
         ICM   R7,B'0011',NEXTSTEM     NEXT STEM(EX .XXX)
         CVD   R7,DW                   CONVERT TO DECIMAL
         MVC   STEM,=XL4'40202120'     EDIT PATTERN
         LA    R1,STEM+L'STEM-1        @ LAST CHARACTER
         EDMK  STEM,STEMNO             CONVERT TO CHAR
         LA    R14,STEM+L'STEM-1       CALCULATE THE LENGTH
         SR    R14,R1                  OF THE NUMBER
         XC    STEMNAME,STEMNAME       CLEAR
         MVC   STEMNAME(L'STEMLIT),STEMLIT  BUILD PPTENT.
         EX    R14,MOVESTEM            BUILD PPTENT.XXX
         LA    R7,STEMNAME             @ OF STEM NAME
         STCM  R7,B'1111',STEMPTR      STEM @
         LA    R14,L'STEMLIT+1(,R14)   LENGTH OF STEM NAME
         STCM  R14,B'1111',STEMLEN     STEM LENGTH
         CLC   NEXTSTEM,=XL2'0000'     CREATING STEM 0?
         BNE   NOTSTEM0                NO-
         SR    R7,R7                   ZEROIZE
         ICM   R7,B'0011',STEMCNT      NEXT STEM(EX .XXX)
         CVD   R7,DW                   CONVERT TO DECIMAL
         MVC   STEM,=XL4'40202120'     EDIT PATTERN
         LA    R1,STEM+L'STEM-1        @ LAST CHARACTER
         EDMK  STEM,STEMNO             CONVERT TO CHAR
         LA    R14,STEM+L'STEM-1       CALCULATE THE LENGTH
         SR    R14,R1                  OF THE NUMBER
         STCM  R1,B'1111',STEMVAL@     @ OF STEM VALUE
         LA    R14,1(,R14)             LENGTH OF STEM NAME
         STCM  R14,B'1111',STEMVALL    STEM VALUE LENGTH
         B     SETTOKEN                SET THE TOKEN
NOTSTEM0 EQU   *
         STCM  R9,B'1111',STEMVAL@     ADDRESS OF STEM VALUE
         MVC   STEMVALL,=AL4(GPPTLEN)  STEM VALUE LENGTH
SETTOKEN EQU   *
         XC    IKJTOKEN,IKJTOKEN       NO REQUIRED FOR THIS CALL
         XC    RCODE441,RCODE441       RETURN CODE
         L     R15,CVTPTR              CVT @
         USING CVT,R15                 INFORM THE ASSEMBLER
         L     R15,CVTTVT              TSCT @
         USING TSVT,R15                INFORM THE ASSEMBLER
         L     R15,TSVTVACC            IKJCT441 @
         LTR   R15,R15                 ENTRY POINT FOUND?
         BNZ   CALL441                 YES- DO A CALL
LINK441  EQU   *
         MVC   LINKAREA,LINKL          LINK SL=L
         MVC   CALLAREA,CALLL          PROG PROGRAM LIST
         LINK  EP=IKJCT441,                                            X
               PARAM=(ECODE,           ENTRY CODE                      X
               STEMPTR,                POINTER TO STEM NAME            X
               STEMLEN,                LENGTH  OF STEM NAME            X
               STEMVAL@,               POINTER TO STEM VALUE           X
               STEMVALL,               LENGTH  OF STEM VALUE           X
               IKJTOKEN,               TOKEN                           X
               ECTPARM,                NOT REQUIRED                    X
               RCODE441),              RETURN CODE                     X
               VL=1,                   EOL                             X
               MF=(E,CALLAREA),        CALL AREA                       X
               SF=(E,LINKAREA)         LINK AREA
         B     CHKRET                  CHECK THE RETURN CODE
CALL441  EQU   *
         MVC   CALLAREA,CALLL          PROG PROGRAM LIST
         CALL  (15),                                                   X
               (ECODE,                 ENTRY CODE                      X
               STEMPTR,                POINTER TO STEM NAME            X
               STEMLEN,                LENGTH  OF STEM NAME            X
               STEMVAL@,               POINTER TO STEM VALUE           X
               STEMVALL,               LENGTH  OF STEM VALUE           X
               IKJTOKEN,               TOKEN                           X
               ECTPARM,                NOT REQUIRED                    X
               RCODE441),              RETURN CODE                     X
               VL,                     EOL                             X
               MF=(E,CALLAREA)
         B     CHKRET                  CHECK THE RETURN CODE
CHKRET   EQU   *
         BR    R2                      RETURN TO CALLER
MOVESTEM MVC   STEMNAME+L'STEMLIT(0),0(R1)
         LTORG
STEMLIT  DC    CL7'PPTENT.'            STEM
ECTPARM  DC    X'FFFFFFFF'             ECT
ECODE    DC    AL4(TSVEUPDT)           CREATE CODE
*
* PPTSCAN ASSEMBLER ROUTINE
*
         TITLE 'LINK LIST AREA'
LINKL    LINK SF=L
LINKLEN EQU  *-LINKL                   LENGTH
CALLL    CALL ,(,,,,,,,),MF=L
CALLLEN EQU  *-CALLL                   LENGTH
         TITLE 'IEFPPSCN LIST AREA'
         IEFPPSCN MF=(L,PPTABLE,0D)
         TITLE 'WORKAREA DSECT'
WORKAREA DSECT
SAVEAREA DS    CL72                    SAVEAREA
PREVSA   EQU   SAVEAREA+4,4            @ OF PREVIOUS SAVEAREA
RET@     DS    F                       RETURN @
RETCODE  DS    F                       RETURN CODE AREA
RETCODE2 DS    F                       USER RETURN CODE
DW       DS    D                       WORK AREA
UNPKKEY  EQU   DW,3                    UNPACKED PROTECT KEY
UNPKSTEM EQU   DW,3                    UNPACKED STEM
PROTKEY  EQU   DW+6,2                  PROTECT KEY
STEMNO   EQU   DW+6,2                  STEM NO
CHAR     DS    C                       A LONE CHARACTER
NEXTSTEM DS    XL2                     NEXT STEM VARIABLE NO
STEMCNT  DS    XL2                     MAX STEM VARIABLES
STEM     DS    CL4                     CONSTRUCTED STEM NO
STEMNAME DS    CL10                    CONSTRUCTED STEM NAME
PPTTOKEN DS    XL4                     IEFPPSCN TOKEN
PPTMACRO DS    CL(PPTABLEL)            IEFPPSCN MACRO AREA
PPTINFO  DS    0X                      PPT RETURN AREA
PPTELEN  DS    AL2                     MAX PPT ENTRY LENGTH
PPTENT   DS    CL(L'PPTENTRY)          PPT ENTRY LENGTH
FMTPPT   DS    CL(GPPTLEN)             FORMATTED PPT AREA
PARMLIST DS    0F
STEMPTR  DS    F                       STEM PTR
STEMLEN  DS    F                       STEM LEN
STEMVAL@ DS    F                       STEM VALUE @
STEMVALL DS    F                       STEM VAL LENGTH
IKJTOKEN DS    F                       TOKEN
RCODE441 DS    F                       RETURN CODE
         DS    0F
LINKAREA DS    CL(LINKLEN)             LINK AREA
CALLAREA DS    CL(CALLLEN)             PARM LIST AREA
WORKALEN EQU   *-WORKAREA              WORK AREA LENGTH
GENPPT   DSECT                         GENERATED PPT TABLE ENTRY
GPPTNAME DS    CL8                     PROGRAM NAME
GPPTNCNC DS    CL3                     NON/CANCEL
GPPTSKEY DS    CL3                     SPECIAL PROTECT KEY
GPPTNSWP DS    CL3                     NON/SWAPPABLE
GPPTPRIV DS    CL3                     PRIVILEGED
GPPTSYST DS    CL3                     SYSTEM TASK
GPPTNDSI DS    CL3                     DSI
GPPTNOPS DS    CL3                     BYPASS PASSWORD PROTECTION
GPPTKEYS DS    CL2                     PROTECT KEY
GPPTCPUA DS    CL4                     CPU AFFINITY
GPPT2LPU DS    CL3                     2ND LEVEL STORAGE
GPPT1LPU DS    CL3                     1ST LEVEL STORAGE
GPPTORIG DS    CL3                     ENTRY ORIGIN
GPPTLEN  EQU   *-GENPPT                ENTRY LENGTH
         YREGS
         CVT   DSECT=YES,LIST=NO       CVT DSECT
         IEFJESCT                      JES2 CT
         IEFZB610                      PPT
         IKJTSVT                       TSVT
         END   PPTSCAN
