{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012920000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE835.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE835.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x06\\x01'", "DS1TRBAL": "b'\\xe2\\xfa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\xcc\\x00\\x01\\x05\\xcc\\x00\\x07\\x00\\x07'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00\\x14\\x01\\x19\\x08\\x0f\\x01\\x19\\x08\\x0f#W\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-03-21T00:00:00", "modifydate": "2019-03-21T23:57:14", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  835\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE835\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 19 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,268 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/21/19    23:57:14    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x10#\\x1f\\x01\\x10#\\x1f\\x12\\x01\\x00(\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-08-19T00:00:00", "modifydate": "2010-08-19T12:01:35", "lines": 40, "newlines": 40, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Member A1E1B892 in CBT830\nFrom:     \"GILES,Peter\" <peter.giles@deewr.gov.au>\nDate:     Thu, 19 Aug 2010 08:42:36 +1000\nTo:       <sbgolob@cbttape.org>\n\nFolks\n\nI think the following correction should be made to this member\n\nCorrection\n\nSWTEST     SOFTWARE.CBT830.SRC(A1E1B892) - 01.01           Columns 00001\nCommand ===>                                                 Scroll ===>\n000192 P1LPU    EQU   *\n000193          MVC   GPPT1LPU,=CL3'NO '      DEFAULT\n000194          TM    PPTPUBYT,PPT1LPU        1ST LEVEL PREFERED STORAGE\n000195          BNO   PORIG                   NO-\n000196          MVC   GPPT1LPU,=CL3'YES'      SET\n000197 PORIG    EQU  *\n\nOld code\n\nP1LPU    EQU   *\n         MVC   GPPT1LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT1LPU        2ND LEVEL PREFERED STORAGE\n         BNO   PORIG                   NO-\n         MVC   GPPT2LPU,=CL3'NO '      SET\nPORIG    EQU  *\n\nPeter Giles\nSystems Programmer\nITSG\nDEEWR\nC14BR2\nLevel 2, 14 Brindabella Cct, Pialligo ACT 2609\nTel  +61 2 6121 8081\nFax  +61 2 6276 4908\nMob    0411 074 964\npeter.giles@deewr.gov.au\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x18\\x01\\x10#\\x1f\\x01\\x11\\x03?\\x19\\x08\\x00:\\x00+\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2010-08-19T00:00:00", "modifydate": "2011-02-02T19:08:18", "lines": 58, "newlines": 43, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  RE: Member A1E1B892 in CBT830\nFrom:     \"GILES,Peter\" <peter.giles@deewr.gov.au>\nDate:     Thu, 19 Aug 2010 14:32:02 +1000\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nSam\n\nThis is a PPT display using a load module to supply a Rexx\nroutine.\n\nThe display is similar to MXI, PPT .\nI noticed the error when comparing MXI;PPT  and the PPT display\nI have highlighted the two corrections to the assembler code.\n\nPeter Giles\nSystems Programmer\nITSG\nDEEWR\nC14BR2\nLevel 2, 14 Brindabella Cct, Pialligo ACT 2609\nTel  +61 2 6121 8081\nFax  +61 2 6276 4908\nMob    0411 074 964\npeter.giles@deewr.gov.au\n\n  - - - - - - - - - - - - - - - - - - - - - - - - -\n\nFrom: Sam Golob \u00ddmailto:sbgolob@cbttape.org\u00a8\nSent: Thursday, 19 August 2010 2:20 PM\nTo: GILES,Peter\nSubject: Re: Member A1E1B892 in CBT830\n\nHi Peter,\n\n    I'll try and get to this when I can.  Thanks for pointing it\n    out.  If I have questions about what the code is supposed to\n    do, I'll ask them now.  What is the code supposed to do?  And\n    what did you correct?  Thanks much.\n\n    All the best of everything to you and your family.\n\nSincerely,    Sam\n\nApparent changes:\n\n    ----+----1----+----2----+----3----+----4----+----5----+----6---\n                                                                      MAT=  193\nI -          TM    PPTPUBYT,PPT1LPU        2ND LEVEL PREFERED STORAGE RPL=    1\nD -          TM    PPTPUBYT,PPT1LPU        1ST LEVEL PREFERED STORAGE\n                                                                      MAT=    1\nI -          MVC   GPPT2LPU,=CL3'NO '      SET                        RPL=    1\nD -          MVC   GPPT2LPU,=CL3'YES'      SET\n                                                                      MAT=  190\nD -          YREGS                                                    DEL=    1\n                                                                      MAT=  165\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE03": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00T\\x01\\x11\\x03?\\x01\\x11\\x03?\\x19Y\\x001\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-02-02T00:00:00", "modifydate": "2011-02-02T19:59:54", "lines": 49, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "(I didn't have to email myself.)\n\nThis note is from Sam Golob, and concerns the new program called\nPPTD (PPT Display), and its associated members.  All new members\nincluded in this pds are:\n\n  PPTD   -  PPTD assembler source for PPT display program\n  PPTD$  -  JCL to assemble and linkedit PPTD\n  TSOB   -  REXX to trap and ISPF Browse PUTLINE program output\n  TSOE   -  REXX to trap and ISPF Edit PUTLINE program output\n  TSOR   -  REXX to trap and TSO REVIEW PUTLINE program output\n  TSOV   -  REXX to trap and ISPF View PUTLINE program output\n\nPPTD is an APF-authorized TSO command which displays the PPT entries\non the TSO screen, and not in an ISPF pop-up window the way PPTSCANR\ndoes.  The advantage is that you can trap the output and use the\nTSOx display REXX programs from Mark Zelden, to display the command\noutput in scrollable, full-screen mode.  In particular, TSOR does\nnot need ISPF.  TSOR can be run from TSO READY mode, because it\ninvokes the REVIEW TSO command which does not need ISPF.  REVIEW is\non CBT File 134 (source modules) and 135 (load modules).  (Generally\ninclude all members starting with REV**** and their aliases.)\n\nA not-generally-known fact about the newer versions of the REVIEW\ncommand, is that it has an ISPF-Edit-like attachment called REVEDIT,\nwhich allows ISPF-like editing of datasets, while in TSO READY mode,\nwithout ISPF being present.  To enter REVIEW's EDIT mode, type UPDATE\nin the REVIEW command line, or U in a REVIEW member list instead of S.\n\nI use the EDIT function of REVIEW as an ISPF recovery tool, when\nISPF can't come up because of allocations and such.  I fix the\nallocation CLISTs with REVIEW's EDIT function, and then bring ISPF\nup when everything is right.\n\nPPTD follows the same display logic as PPTSCAN and PPTSCANR, and\ncontains pretty much the same information as they do.\n\nTo authorize the PPTD command (as well as the PPTSCAN command), they\nmust be listed in the PARMLIB member IKJTSOxx under AUTHCMD (NAMES()).\nFor other (niftier) methods of authorizing a TSO command, see CBT\nFiles 185 and 797.\n\nAny questions, please write to Sam Golob.\n\n    email:  sbgolob@cbttape.org  or sbgolob@attglobal.net\n\nBest of everything.......\n\n      SG  - 02/02/2011\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE04": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x08\\x01\\x19\\x07\\x9f\\x01\\x19\\x08\\x0f\"W\\x00\\x12\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-20T00:00:00", "modifydate": "2019-03-21T22:57:08", "lines": 18, "newlines": 35, "modlines": 0, "user": "SBGOLOB"}, "text": "Latest revision OF PPTD...\n\nVersion 1.2.1 - Mar 20, 2019\n\nFixed return code processing even though you think you may not\nneed it.  After all, you're just displaying the PPT entries, and\nwhat do you need a return code for (if you're authorized and it\nworks)?\n\nWell, the return code processing was messed up, and I fixed it so\nthat if you are authorized, you have RC=0, and if you're not\nauthorized, you have RC=4 (the default \"bad code\" from the TESTAUTH\nmacro).\n\nIf you want, you can set the non-auth return code to anything you\nwant.  See the line after label NOTAUTH in column 1.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$ORIGINL": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00H\\x01\\x10 o\\x01\\x10#\\x1f\\x13\\x07\\x02(\\x02'\\x00\\x00\\xd5\\xd6\\xe5\\xf1\\xf9\\xf9\\xf4@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-07-25T00:00:00", "modifydate": "2010-08-19T13:07:48", "lines": 552, "newlines": 551, "modlines": 0, "user": "NOV1994"}, "text": "Scanning the PPT\n\nThe Program Properties Table (PPT) contains a list of programs\nthat require special properties such as:\n\n1      Being non-swappable\n\n2      Having a program protect key other than 8\n\n3      Running in privileged state\n\n4      Dataset integrity\n\n5      Bypass security protection\n\n6      CPU affinity.\n\nMVS/ESA is packaged with a default PPT that contains IBM\nprograms that require these special properties. Examples of these\nprograms are:\n\n1      IEEMB860 - Master\n\n2      HASJES20 - JES2\n\n3      CSVLLCRE - LLA\n\n4      IFASMF - SMF.\n\nThe properties are assigned at job-step attach time by the initiator\nmodule IEFSD162. An installation can supplement the IBM\ndefault list at IPL time by using the PARMLIB member\nSCHEDxx or dynamically using the operator SET SCH=(xx,L)\ncommand. This article contains an ISPF/PDF windowed dialog\nthat will display all the entries in the PPT and, for each program,\nwill display the assigned properties. To obtain the PPT entries, the\nIEFPPSCN macro is used. This prevents the system from\ndynamically updating the PPT while it is being scanned.\n\nThis dialog is made up of the following code elements:\n\no      PPTPAN01 - panel.\n\no      PPTPAN02 - panel.\n\no      PPTSCAN - Assembler routine which obtains the PPT\n      information by executing macro IEFPPSCN. It communicates\n      the PPT details back to the REXX program PPTSCANR by\n      calling IKJCT441 to create REXX stem variables. PPTSCAN\n      will set the following return codes:\n\n      0 - successful invocation\n\n      4 - stem build error\n\n      8 - PPT scan error.\n\no      PPTSCANR - REXX EXEC which calls PPTSCAN to\n      obtain the PPT information for display.\n\nThe Assembler routine PPTSCAN must be linked into an\nauthorized library with the attribute AC(1); this is because of the\nrequirements of the IEFPPSCN macro. The TSO PARMLIB\nmember IKJTSO00 must be updated to include command\nPPTSCAN in the AUTHCMD section of this member. To invoke\nthis dialog execute the REXX EXEC PPTSCANR from an ISPF\nmenu panel or from option 6 of TSO. The REXX EXEC\nPPTSCANR includes a LIBDEF command for panel invocation.\nThis can be removed or updated as required.\n\n         TITLE 'SCAN THE PPT TABLE'\nZERO     EQU   X'00'                   ZERO\nSPACE    EQU   C' '                    SPACE\nSIGNF    EQU   X'F0'                   POSITIVE SIGN\nPPTSCAN  CSECT\nPPTSCAN  AMODE 31\nPPTSCAN  RMODE 24\n         BAKR  R14,0                   SAVE CALLER'S ARS + GPRS\n*                                      IN THE LINKAGE STACK\n         USING PPTSCAN,R12             SET UP PROGRAM BASE REGISTER\n         LAE   R12,0(R15,0)            SET UP PROGRAM BASE REGISTER\nGETWORK  EQU   *\n         L     R9,=AL4(WORKALEN)       WORK AREA LENGTH\n         STORAGE OBTAIN,LENGTH=(R9),ADDR=(R10),SP=0,KEY=8,             X\n               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')\n         LR    R13,R1                  @ THE WORKAREA\n         USING SAVEAREA,R13            INFORM THE ASSEMBLER\n         LA    R0,SAVEAREA             @ THE WORKAREA\n         LA    R1,WORKALEN(0,0)        LENGTH\n         LA    R14,=X'00'              ZERO FILL\n         SR    R15,R15                 PROPAGATE\n         MVCL  R0,R14                  CLEAR THE AREA\n         MVC   PREVSA,=C'F1SA'         PUT ACRONYM INTO SAVEAREA\n*                                      TO INDICATE STATUS SAVED ON\n*                                      THE LINKAGE STACK.\nCONTROL  EQU   *                       MAIN PROGRAM CONTROL\n         BAS   R2,SCANPPT              SCAN THE PPT\n         B     RETURN                  RETURN TO CALLER\nRETURN   EQU   *\n         LAE   R1,0(R13,0)             ADDRESS TO FREE\n         L     R9,=AL4(WORKALEN)       WORK AREA LENGTH\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R9),SP=0,KEY=8,             X\n               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')\n         L     R15,RETCODE             SET RC\n         PR                            RESTORE CALLER'S AR'S\n*                                      GPRS 2-14 AND RETURN\n*                                      TO CALLER\nSCANPPT  EQU  *                        SCAN THE PPT TABLE\n         STCM  R2,B'1111',RET@         STORE RETURN @\n         MVC   PPTMACRO,PPTABLE        MOVE THE IEFPPSCN MACRO AREA\n         XC    PPTTOKEN,PPTTOKEN       START AT TOP OF PPT\nPPTRUN   EQU  *\n         MODESET MODE=SUP,KEY=ZERO     SUPERVISOR KEY 0 STATE\n         LA    R9,PPTINFO              @ PPT RETURN AREA\n         LA    R10,PPTMACRO            @ PPT MACRO AREA\n         IEFPPSCN REQUEST=NEXT,TOKEN=PPTTOKEN,PPTINFO=(R9),            X\n               MF=(E,(R10),COMPLETE)\n         LTR   R15,R15                 END OF SCAN?\n         BNZ   PPTEND                  END THE PPT SCAN\n         MODESET MODE=PROB,KEY=NZERO   PROBLEM KEY 8 STATE\n         LA    R8,PPTENT               @ OF PPT INFO\n         USING PPT1,R8                 INFORM THE ASSEMBLER\n         LA    R9,FMTPPT               @ FORMATTED PPT ENTRY\n         USING GENPPT,R9               INFORM THE ASSEMBLER\n         MVC   GPPTNAME,PPTNAME        PROGRAM NAME\n         MVC   GPPTNCNC,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNCNCL       NON CANCEL?\n         BNO   SPECPKEY                NO-\n         MVC   GPPTNCNC,=CL3'YES'      SET\nSPECPKEY EQU   *\n         MVC   GPPTSKEY,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTSKEY        SPECIAL STORAGE KEY?\n         BNO   NONSWAP                 NO-\n         MVC   GPPTSKEY,=CL3'YES'      SET\nNONSWAP  EQU   *\n         MVC   GPPTNSWP,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNSWP        NON-SWAPPABLE?\n         BNO   PRIV                    NO-\n         MVC   GPPTNSWP,=CL3'YES'      SET\nPRIV     EQU   *\n         MVC   GPPTPRIV,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTPRIV        PRIVILEGED?\n         BNO   SYSTASK                 NO-\n         MVC   GPPTPRIV,=CL3'YES'      SET\nSYSTASK  EQU   *\n         MVC   GPPTSYST,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTSYSTK       SYSTEM TASK?\n         BNO   NDSI                    NO-\n         MVC   GPPTSYST,=CL3'YES'      SET\nNDSI     EQU   *\n         MVC   GPPTNDSI,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNDSI        DATASET INTEGRITY?\n         BO    NOPASS                  NO-\n         MVC   GPPTNDSI,=CL3'YES'      SET\nNOPASS   EQU   *\n         MVC   GPPTNOPS,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNOPAS       BYPASS PASSWORD PROTECTION?\n         BNO   PROTKY                  NO-\n         MVC   GPPTNOPS,=CL3'YES'      SET\nPROTKY   EQU   *\n         SR    R7,R7                   ZEROIZE\n         IC    R7,PPTKEY               PICK UP THE PROTECT KEY\n         SRL   R7,4(0)                 MOVE INTO LOW BYTE\n         CVD   R7,DW                   CONVERT TO DECIMAL\n         UNPK  UNPKKEY,PROTKEY         MAKE IT READABLE\n         OI    UNPKKEY+L'UNPKKEY-1,X'F0'  FORCE SIGN TO F\n         MVC   GPPTKEYS,UNPKKEY+1      MOVE TO REXX AREA\nCPUAFF   EQU   *\n         LA    R5,PPTCPUA              @ CPU AFFINITY\n         LA    R6,L'PPTCPUA            LENGTH TO CONVERT\n         LA    R7,GPPTCPUA             @ OUTPUT AREA\nCPUAFFCN EQU   *\n         SR    R4,R4                   ZEROIZE\n         IC    R4,0(R5)                CHARACTER TO CONVERT\n         SRL   R4,4(0)                 REMOVE LOW NIBBLE\n         STC   R4,CHAR                 STORE\n         BAL   R2,HEXCONV              DO THE HEX CONVERSION\n         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA\n         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA\n         MVC   CHAR,0(R5)              NEXT NIBBLE\n         NI    CHAR,X'0F'              REMOVE LOW NIBBLE\n         BAL   R2,HEXCONV              DO THE HEX CONVERSION\n         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA\n         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA\n         LA    R5,1(,R5)               NEXT BYTE TO CONVERT\n         BCT   R6,CPUAFFCN             DO WHILE R6 > 0?\nP2LPU    EQU   *\n         MVC   GPPT2LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT2LPU        2ND LEVEL PREFERED STORAGE\n         BNO   P1LPU                   NO-\n         MVC   GPPT2LPU,=CL3'YES'      SET\nP1LPU    EQU   *\n         MVC   GPPT1LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT1LPU        1ST LEVEL PREFERED STORAGE   PG1\n         BNO   PORIG                   NO-\n         MVC   GPPT2LPU,=CL3'YES'      SET                          PG1\nPORIG    EQU  *\n         MVC   GPPTORIG,=CL3'YES'      DEFAULT\n         TM    PPTORIG,PPTDEFLT        ORIGIN?\n         BO    BLDSTEM                 BUILD THE STEM VARIABLE\n         MVC   GPPTORIG,=CL3'NO '      SET\nBLDSTEM  EQU   *\n         XR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',NEXTSTEM     CURRENT STEM VALUE\n         LA    R7,1(,R7)               UPDATE STEM\n         STCM  R7,B'0011',NEXTSTEM     STORE BACK\n         BAL   R2,STEMBLD              BUILD REXX STEM VARIABLE\n         LTR   R15,R15                 STEM BUILD OKAY?\n         BZ    PPTRUN                  YES-\n         ST    R15,RETCODE2            STORE THE RETURN CODE\n         MVC   RETCODE,=AL4(4)         SCAN ERROR\n         B     RSETMODE                RETURN TO CALLER\nPPTEND   EQU   *\n         C     R15,=F'4'               TRUE END OF SCAN?\n         BE    STEM0                   YES-\n         ST    R15,RETCODE2            STORE THE RETURN CODE\n         MVC   RETCODE,=AL4(8)         SCAN ERROR\n         B     RSETMODE                RETURN TO CALLER\nSTEM0    EQU   *\n         MVC   STEMCNT,NEXTSTEM        NO OF STEMS CREATED\n         XC    NEXTSTEM,NEXTSTEM       CLEAR\n         BAL   R2,STEMBLD              BUILD REXX STEM VARIABLE\n         LTR   R15,R15                 STEM BUILD OKAY?\n         BZ    ALLDONE                 YES-\n         ST    R15,RETCODE2            STORE THE RETURN CODE\n         MVC   RETCODE,=AL4(4)         SCAN ERROR\n         B     RSETMODE                RETURN TO CALLER\nALLDONE  EQU   *\n         SR    R15,R15                 RC=0\n         ST    R15,RETCODE2            STORE THE RETURN CODE\n         XC    RETCODE,RETCODE         SET TO ZERO\nRSETMODE EQU   *\n         MODESET MODE=PROB,KEY=NZERO   PROBLEM KEY 8 STATE\n         ICM    R2,B'1111',RET@        RESET RETURN @\n         BR     R2                     RETURN TO CALLER\nHEXCONV  EQU   *                       PRINT HEX ROUTINE\n         CLI   CHAR,X'09'              > 9?\n         BH    HEX10                   YES-\n         OI    CHAR,X'F0'              RANGE F0-F9\n         BR    R2                      RETURN TO CALLER\nHEX10    EQU   *\n         XR    R4,R4                   ZEROIZE\n         IC    R4,CHAR                 INSERT CHAR INTO REG\n         SH    R4,=H'9'                GET CHAR NO\n         STC   R4,CHAR                 STORE\n         OI    CHAR,X'C0'              RANGE C0-C6\n         BR    R2                      RETURN TO CALLER\nSTEMBLD  EQU   *                       BUILD STEM ROUTINE\n         SR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',NEXTSTEM     NEXT STEM(EX .XXX)\n         CVD   R7,DW                   CONVERT TO DECIMAL\n         MVC   STEM,=XL4'40202120'     EDIT PATTERN\n         LA    R1,STEM+L'STEM-1        @ LAST CHARACTER\n         EDMK  STEM,STEMNO             CONVERT TO CHAR\n         LA    R14,STEM+L'STEM-1       CALCULATE THE LENGTH\n         SR    R14,R1                  OF THE NUMBER\n         XC    STEMNAME,STEMNAME       CLEAR\n         MVC   STEMNAME(L'STEMLIT),STEMLIT  BUILD PPTENT.\n         EX    R14,MOVESTEM            BUILD PPTENT.XXX\n         LA    R7,STEMNAME             @ OF STEM NAME\n         STCM  R7,B'1111',STEMPTR      STEM @\n         LA    R14,L'STEMLIT+1(,R14)   LENGTH OF STEM NAME\n         STCM  R14,B'1111',STEMLEN     STEM LENGTH\n         CLC   NEXTSTEM,=XL2'0000'     CREATING STEM 0?\n         BNE   NOTSTEM0                NO-\n         SR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',STEMCNT      NEXT STEM(EX .XXX)\n         CVD   R7,DW                   CONVERT TO DECIMAL\n         MVC   STEM,=XL4'40202120'     EDIT PATTERN\n         LA    R1,STEM+L'STEM-1        @ LAST CHARACTER\n         EDMK  STEM,STEMNO             CONVERT TO CHAR\n         LA    R14,STEM+L'STEM-1       CALCULATE THE LENGTH\n         SR    R14,R1                  OF THE NUMBER\n         STCM  R1,B'1111',STEMVAL@     @ OF STEM VALUE\n         LA    R14,1(,R14)             LENGTH OF STEM NAME\n         STCM  R14,B'1111',STEMVALL    STEM VALUE LENGTH\n         B     SETTOKEN                SET THE TOKEN\nNOTSTEM0 EQU   *\n         STCM  R9,B'1111',STEMVAL@     ADDRESS OF STEM VALUE\n         MVC   STEMVALL,=AL4(GPPTLEN)  STEM VALUE LENGTH\nSETTOKEN EQU   *\n         XC    IKJTOKEN,IKJTOKEN       NO REQUIRED FOR THIS CALL\n         XC    RCODE441,RCODE441       RETURN CODE\n         L     R15,CVTPTR              CVT @\n         USING CVT,R15                 INFORM THE ASSEMBLER\n         L     R15,CVTTVT              TSCT @\n         USING TSVT,R15                INFORM THE ASSEMBLER\n         L     R15,TSVTVACC            IKJCT441 @\n         LTR   R15,R15                 ENTRY POINT FOUND?\n         BNZ   CALL441                 YES- DO A CALL\nLINK441  EQU   *\n         MVC   LINKAREA,LINKL          LINK SL=L\n         MVC   CALLAREA,CALLL          PROG PROGRAM LIST\n         LINK  EP=IKJCT441,                                            X\n               PARAM=(ECODE,           ENTRY CODE                      X\n               STEMPTR,                POINTER TO STEM NAME            X\n               STEMLEN,                LENGTH  OF STEM NAME            X\n               STEMVAL@,               POINTER TO STEM VALUE           X\n               STEMVALL,               LENGTH  OF STEM VALUE           X\n               IKJTOKEN,               TOKEN                           X\n               ECTPARM,                NOT REQUIRED                    X\n               RCODE441),              RETURN CODE                     X\n               VL=1,                   EOL                             X\n               MF=(E,CALLAREA),        CALL AREA                       X\n               SF=(E,LINKAREA)         LINK AREA\n         B     CHKRET                  CHECK THE RETURN CODE\nCALL441  EQU   *\n         MVC   CALLAREA,CALLL          PROG PROGRAM LIST\n         CALL  (15),                                                   X\n               (ECODE,                 ENTRY CODE                      X\n               STEMPTR,                POINTER TO STEM NAME            X\n               STEMLEN,                LENGTH  OF STEM NAME            X\n               STEMVAL@,               POINTER TO STEM VALUE           X\n               STEMVALL,               LENGTH  OF STEM VALUE           X\n               IKJTOKEN,               TOKEN                           X\n               ECTPARM,                NOT REQUIRED                    X\n               RCODE441),              RETURN CODE                     X\n               VL,                     EOL                             X\n               MF=(E,CALLAREA)\n         B     CHKRET                  CHECK THE RETURN CODE\nCHKRET   EQU   *\n         BR    R2                      RETURN TO CALLER\nMOVESTEM MVC   STEMNAME+L'STEMLIT(0),0(R1)\n         LTORG\nSTEMLIT  DC    CL7'PPTENT.'            STEM\nECTPARM  DC    X'FFFFFFFF'             ECT\nECODE    DC    AL4(TSVEUPDT)           CREATE CODE\n\nPPTSCAN ASSEMBLER ROUTINE\n\n         TITLE 'LINK LIST AREA'\nLINKL    LINK SF=L\nLINKLEN EQU  *-LINKL                   LENGTH\nCALLL    CALL ,(,,,,,,,),MF=L\nCALLLEN EQU  *-CALLL                   LENGTH\n         TITLE 'IEFPPSCN LIST AREA'\n         IEFPPSCN MF=(L,PPTABLE,0D)\n         TITLE 'WORKAREA DSECT'\nWORKAREA DSECT\nSAVEAREA DS    CL72                    SAVEAREA\nPREVSA   EQU   SAVEAREA+4,4            @ OF PREVIOUS SAVEAREA\nRET@     DS    F                       RETURN @\nRETCODE  DS    F                       RETURN CODE AREA\nRETCODE2 DS    F                       USER RETURN CODE\nDW       DS    D                       WORK AREA\nUNPKKEY  EQU   DW,3                    UNPACKED PROTECT KEY\nUNPKSTEM EQU   DW,3                    UNPACKED STEM\nPROTKEY  EQU   DW+6,2                  PROTECT KEY\nSTEMNO   EQU   DW+6,2                  STEM NO\nCHAR     DS    C                       A LONE CHARACTER\nNEXTSTEM DS    XL2                     NEXT STEM VARIABLE NO\nSTEMCNT  DS    XL2                     MAX STEM VARIABLES\nSTEM     DS    CL4                     CONSTRUCTED STEM NO\nSTEMNAME DS    CL10                    CONSTRUCTED STEM NAME\nPPTTOKEN DS    XL4                     IEFPPSCN TOKEN\nPPTMACRO DS    CL(PPTABLEL)            IEFPPSCN MACRO AREA\nPPTINFO  DS    0X                      PPT RETURN AREA\nPPTELEN  DS    AL2                     MAX PPT ENTRY LENGTH\nPPTENT   DS    CL(L'PPTENTRY)          PPT ENTRY LENGTH\nFMTPPT   DS    CL(GPPTLEN)             FORMATTED PPT AREA\nPARMLIST DS    0F\nSTEMPTR  DS    F                       STEM PTR\nSTEMLEN  DS    F                       STEM LEN\nSTEMVAL@ DS    F                       STEM VALUE @\nSTEMVALL DS    F                       STEM VAL LENGTH\nIKJTOKEN DS    F                       TOKEN\nRCODE441 DS    F                       RETURN CODE\n         DS    0F\nLINKAREA DS    CL(LINKLEN)             LINK AREA\nCALLAREA DS    CL(CALLLEN)             PARM LIST AREA\nWORKALEN EQU   *-WORKAREA              WORK AREA LENGTH\nGENPPT   DSECT                         GENERATED PPT TABLE ENTRY\nGPPTNAME DS    CL8                     PROGRAM NAME\nGPPTNCNC DS    CL3                     NON/CANCEL\nGPPTSKEY DS    CL3                     SPECIAL PROTECT KEY\nGPPTNSWP DS    CL3                     NON/SWAPPABLE\nGPPTPRIV DS    CL3                     PRIVILEGED\nGPPTSYST DS    CL3                     SYSTEM TASK\nGPPTNDSI DS    CL3                     DSI\nGPPTNOPS DS    CL3                     BYPASS PASSWORD PROTECTION\nGPPTKEYS DS    CL2                     PROTECT KEY\nGPPTCPUA DS    CL4                     CPU AFFINITY\nGPPT2LPU DS    CL3                     2ND LEVEL STORAGE\nGPPT1LPU DS    CL3                     1ST LEVEL STORAGE\nGPPTORIG DS    CL3                     ENTRY ORIGIN\nGPPTLEN  EQU   *-GENPPT                ENTRY LENGTH\n         YREGS\n         CVT   DSECT=YES,LIST=NO       CVT DSECT\n         IEFJESCT                      JES2 CT\n         IEFZB610                      PPT\n         IKJTSVT                       TSVT\n         END   PPTSCAN\n\nPPTSCANR REXX EXEC\n\n/**rexx**/\n/*  Program-id           PPTSCANR                                  */\n/*  Remarks              Display the PPT                           */\n/*trace i*/\naddress \"ISPEXEC\" \"LIBDEF ISPPLIB DATASET ID('XXXXXX.PANELS')\"\nppttable:\nADDRESS \"ISPEXEC\" \"CONTROL DISPLAY LOCK\" /* LOCK THE TERMINAL      */\nif (rc > 8) then do                      /* error?                 */\n   say 'Lock error    rc = 'rc''         /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* and quit               */\nend\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(6) COLUMN(10)\" /* pop up position    */\nADDRESS \"ISPEXEC\" \"DISPLAY PANEL(PPTPAN02)\"\nif (rc > 8) then do                      /* error?                 */\n   say 'Display error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* and quit               */\nend\nPPTSCAN                                  /* scan the ppt           */\nif (rc \u00ac= 0) then do                     /* error?                 */\n   say 'PPTSCAN Error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* and quit               */\nend\ncall ppttable_build                      /* build the ppt table    */\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove popup           */\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(3) COLUMN(1)\"  /* pop up position    */\nADDRESS \"ISPEXEC\" \"TBDISPL PPTTAB PANEL(PPTPAN01)\"\nif (rc > 8) then do                      /* error?                 */\n   say 'tbdispl error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* and quit               */\nend\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove menu popup      */\nADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"       /* remove allocation      */\nexit(0)                                  /* quit                   */\nppttable_build:\nADDRESS \"ISPEXEC\" \"TBCREATE PPTTAB NOWRITE REPLACE\"\nif (rc >  4) then do                     /* call okay?             */\n   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* lets quit              */\nend\nztdmark=    '-------------------------------------------------------------------\n--------'\nADDRESS  \"ISPEXEC\" \"VPUT    (PPTENTRY,ZTDMARK) SHARED\"\ntabrows=  100                            /* max table rows         */\npptdibm=  0                              /* init                   */\npptndibm= 0                              /* init                   */\ndo i= 1 to pptent.0                      /* add the ppt ents to an */\n                                         /* ispf table for display */\n   pptentry= substr(pptent.i,1,8)        /* program name           */\n                                         /* non-cancel             */\n   pptentry= pptentry||'  '||substr(pptent.i,9,3)\n                                         /* special protect key    */\n   pptentry= pptentry||'   '||substr(pptent.i,12,3)\n                                         /* non-swappable          */\n   pptentry= pptentry||'     '||substr(pptent.i,15,3)\n                                         /* privileged             */\n   pptentry= pptentry||'   '||substr(pptent.i,18,3)\n                                         /* system task            */\n   pptentry= pptentry||'  '||substr(pptent.i,21,3)\n                                         /* dsi                    */\n   pptentry= pptentry||'   '||substr(pptent.i,24,3)\n                                         /* bypass password prot   */\n   pptentry= pptentry||'  '||substr(pptent.i,27,3)\n                                         /* protection key         */\n   pptentry= pptentry||'    '||substr(pptent.i,30,2)\n                                         /* cpu affinity           */\n   pptentry= pptentry||'  '||substr(pptent.i,32,4)\n                                         /* 2LPU                   */\n   pptentry= pptentry||'  '||substr(pptent.i,36,3)\n                                         /* 1LPU                   */\n   pptentry= pptentry||'  '||substr(pptent.i,39,3)\n                                         /* default entry          */\n   pptentry= pptentry||' '||substr(pptent.i,42,3)\n   if substr(pptent.i,42,3) = 'YES' then /* IBM-supplied default?  */\n      pptdibm= pptdibm + 1               /* yes                    */\n   else\n      pptndibm= pptndibm + 1             /* no                     */\n   ADDRESS \"ISPEXEC\" \"TBADD PPTTAB       /* add the entries        */\n            SAVE(PPTENTRY)\n            MULT(\"TABROWS\")\"\n   if (rc \u00ac= 0) then do                  /* call okay?             */\n      say 'tbadd error    rc = 'rc''     /* no- inform the user    */\n      ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation      */\n      exit(rc)                           /* let's quit             */\n   end\nend\nADDRESS \"ISPEXEC\" \"TBTOP PPTTAB\"         /* position to top of tab */\nif (rc \u00ac= 0) then do                     /* call okay?             */\n   say 'tbtop error    rc = 'rc''        /* no- inform the user    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* let's quit             */\nend\nreturn\n\nPPTPAN01 PANEL\n\n)ATTR\n_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)\n% TYPE(TEXT)    COLOR(RED)\n* TYPE(TEXT)    COLOR(YELLOW)\n+ TYPE(TEXT)    COLOR(WHITE)\n# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)\n? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)\n@ TYPE(OUTPUT)  COLOR(RED)\n)BODY WINDOW(77,18)\n%\n%COMMAND ===>_ZCMD      %                                SCROLL ===>_AMT   +\n%\n%IBM Supplied Default Entries=#z   %\n%Non IBM Supplied Default Entries=#z   %\n%\n*Program   Non  Special  Non  Priv System DSI Bypass Prot CPU  2LPU 1LPU IBM\n* Name     Cncl Prot/Key Swap SRM   Task       Pass  Key  Aff            DEF\n%\n)MODEL\n#Z                                                                          %\n)INIT\n.ZVARS= '(PPTDIBM,PPTNDIBM,PPTENTRY)'\n&ZCMD= ' '\n&ZWINTTL=  'PPT Table'\n)REINIT\n&ZCMD= ' '\n)PROC\n)END\n\nPPTPAN02 PANEL\n\n)ATTR\n_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)\n% TYPE(TEXT)    COLOR(RED)\n* TYPE(TEXT)    COLOR(YELLOW)\n+ TYPE(TEXT)    COLOR(WHITE)\n# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)\n? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)\n@ TYPE(OUTPUT)  COLOR(RED)\n)BODY WINDOW(55,5)\n%\n%    ----------------------------------------------\n%    |  PPT Search in progress. Please wait.      |\n%    ----------------------------------------------\n%\n)INIT\n&ZCMD= ' '\n&ZWINTTL=  'PPT Search'\n)REINIT\n&ZCMD= ' '\n)PROC\n)END\n\n\nR F Perretta\nSenior Systems Programmer (UK)                                           c Xepho\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE835": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00X\\x01\\x19\\x08\\x0f\\x01\\x19\\x08\\x0f#V\\x00(\\x00(\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-03-21T00:00:00", "modifydate": "2019-03-21T23:56:58", "lines": 40, "newlines": 40, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 835 is from Peter Giles and contains a corrected version  *   FILE 835\n//*           of the PPT scan program package that was published    *   FILE 835\n//*           in the Xephon MVS Update issue of November 1994.      *   FILE 835\n//*           This package displays its output in an ISPF pop-up    *   FILE 835\n//*           window, using the REXX exec called PPTSCANR.          *   FILE 835\n//*                                                                 *   FILE 835\n//*           This program was originally written and submitted     *   FILE 835\n//*           to Xephon by R.F. Perretta.  Xephon materials (most   *   FILE 835\n//*           of them) are now supported at www.cbttape.org.  The   *   FILE 835\n//*           original program was on CBT Tape File 830, member     *   FILE 835\n//*           A1E1B892.  Look there.  There are 926 articles        *   FILE 835\n//*           there, in CBT File 830, which contain a lot of good   *   FILE 835\n//*           stuff.  You can now use these Xephon materials in     *   FILE 835\n//*           good conscience.                                      *   FILE 835\n//*                                                                 *   FILE 835\n//*           Program PPTSCAN has to be run APF authorized and be   *   FILE 835\n//*           in the AUTHCMD (IKJEFTE2) table.  See CBT File 185    *   FILE 835\n//*           for help.  Parmlib member IKJEFTxx is the affected    *   FILE 835\n//*           PARMLIB member (entry AUTHCMD (NAMES(...)).           *   FILE 835\n//*                                                                 *   FILE 835\n//*     >>>>  Added members:  PPTD, PPTD$, TSOV, TSOE, TSOB,        *   FILE 835\n//*                 and TSOR, described as follows:                 *   FILE 835\n//*                                                                 *   FILE 835\n//*           Sam Golob has written another program, PPTD, to       *   FILE 835\n//*           display the PPT entries.  This one is a vanilla TSO   *   FILE 835\n//*           command, APF authorized, which does not use ISPF,     *   FILE 835\n//*           but which uses the TSO PUTLINE interface, enabling    *   FILE 835\n//*           the output to be trapped and displayed                *   FILE 835\n//*           (full-screen) using Mark Zelden's TSOV, TSOB, TSOE    *   FILE 835\n//*           and TSOR execs, which are included here.  These       *   FILE 835\n//*           execs trap the command output, and (respectively)     *   FILE 835\n//*           ISPF VIEW, EDIT, BROWSE it.  TSOR calls Greg          *   FILE 835\n//*           Price's REVIEW command that doesn't need ISPF (CBT    *   FILE 835\n//*           Files 134, 135) and displays ALL the output,          *   FILE 835\n//*           full-screen and scrollable, from TSO READY mode.      *   FILE 835\n//*                                                                 *   FILE 835\n//*           email:  peter.giles@deewr.gov.au                      *   FILE 835\n//*                                                                 *   FILE 835\n//*           email:  sbgolob@cbttape.org                           *   FILE 835\n//*                                                                 *   FILE 835\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ARTICLE": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x01\\x10#\\x1f\\x01\\x10#\\x1f\\x117\\x00F\\x00F\\x00\\x00\\xc4\\xd6\\xc3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-08-19T00:00:00", "modifydate": "2010-08-19T11:37:20", "lines": 70, "newlines": 70, "modlines": 0, "user": "DOC"}, "text": "Scanning the PPT\n\nThe Program Properties Table (PPT) contains a list of programs\nthat require special properties such as:\n\n1      Being non-swappable\n\n2      Having a program protect key other than 8\n\n3      Running in privileged state\n\n4      Dataset integrity\n\n5      Bypass security protection\n\n6      CPU affinity.\n\nMVS/ESA is packaged with a default PPT that contains IBM\nprograms that require these special properties. Examples of these\nprograms are:\n\n1      IEEMB860 - Master\n\n2      HASJES20 - JES2\n\n3      CSVLLCRE - LLA\n\n4      IFASMF - SMF.\n\nThe properties are assigned at job-step attach time by the initiator\nmodule IEFSD162. An installation can supplement the IBM\ndefault list at IPL time by using the PARMLIB member\nSCHEDxx or dynamically using the operator SET SCH=(xx,L)\ncommand. This article contains an ISPF/PDF windowed dialog\nthat will display all the entries in the PPT and, for each program,\nwill display the assigned properties. To obtain the PPT entries, the\nIEFPPSCN macro is used. This prevents the system from\ndynamically updating the PPT while it is being scanned.\n\nThis dialog is made up of the following code elements:\n\no      PPTPAN01 - panel.\n\no      PPTPAN02 - panel.\n\no      PPTSCAN - Assembler routine which obtains the PPT\n      information by executing macro IEFPPSCN. It communicates\n      the PPT details back to the REXX program PPTSCANR by\n      calling IKJCT441 to create REXX stem variables. PPTSCAN\n      will set the following return codes:\n\n      0 - successful invocation\n\n      4 - stem build error\n\n      8 - PPT scan error.\n\no      PPTSCANR - REXX EXEC which calls PPTSCAN to\n      obtain the PPT information for display.\n\nThe Assembler routine PPTSCAN must be linked into an\nauthorized library with the attribute AC(1); this is because of the\nrequirements of the IEFPPSCN macro. The TSO PARMLIB\nmember IKJTSO00 must be updated to include command\nPPTSCAN in the AUTHCMD section of this member. To invoke\nthis dialog execute the REXX EXEC PPTSCANR from an ISPF\nmenu panel or from option 6 of TSO. The REXX EXEC\nPPTSCANR includes a LIBDEF command for panel invocation.\nThis can be removed or updated as required.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PPTD": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00)\\x01\\x11\\x03/\\x01\\x19\\x08\\x0f\"4\\x03\\x11\\x00\\x15\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2011-02-01T00:00:00", "modifydate": "2019-03-21T22:34:29", "lines": 785, "newlines": 21, "modlines": 0, "user": "SBGOLOB"}, "text": "PPTD     TITLE 'PPTD - DISPLAY PROGRAM PROPERTIES TABLE.'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS AN APF         *\n*                   AUTHORIZED TSO COMMAND.  IT IS BEST RUN USING     *\n*                   A MECHANISM TO CAPTURE THE OUTPUT AND DISPLAY     *\n*                   IT ON THE FULL SCREEN, SUCH AS TSOV, TSOB,        *\n*                   TSOE AND TSOR FROM MARK ZELDEN.                   *\n*                                                                     *\n*         SYNTAX:   PPTD                                              *\n*                     OR                                              *\n*                   TSOV PPTD, TSOE PPTD, TSOR PPTD, ETC.             *\n*                                                                     *\n*       FUNCTION:   TO LIST THE ENTRIES TO THE PROGRAM PROPERTIES     *\n*                   TABLE OF THE Z/OS OPERATING SYSTEM.  THESE ARE    *\n*                   SPECIAL PROGRAMS THAT RUN WITH SPECIAL PROPER-    *\n*                   TIES, SUCH AS NON-CANCELABLE, NON-SWAPPABLE,      *\n*                   OR IN A PARTICULAR STORAGE KEY, ETC.              *\n*                                                                     *\n*          AUTHOR:  SAM GOLOB           VERSION:   1.2.1              *\n*                                                                     *\n*            DATE:  FEB 02, 2011                                      *\n*                                                                     *\n*        FEATURES:  USES PUTLINE INTERFACE WITH MACRO APUT AND        *\n*                   MODULE EPUTL INCLUDED.                            *\n*                                                                     *\n*         CHANGES:  MAR 20, 2019 - RETURN CODE CONTROL.....           *\n*                   VERS. 1.2.1    RC=0 WHEN AUTHORIZED               *\n*                                  RC=4 WHEN NOT AUTHORIZED           *\n*                                  UNCOMMENT THE LINE AFTER LABEL     *\n*                                  NOTAUTH, AND PUT IN ANY CODE YOU   *\n*                                  WANT, FOR NOT AUTHORIZED ACTION.   *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------ *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------ *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\nPPTD     AMODE 31\nPPTD     RMODE 24\nPPTD     CSECT\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING PPTD,R12,R11,R10    BASE REGISTERS\n         LA    R11,2048(,R12)      LOAD EM UP.\n         LA    R11,2048(,R11)\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         LR    R15,R13             SAVE CALLER'S SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          STORE HIS SAVEAREA INTO MINE + 4\n         ST    R13,8(,R15)         STORE MINE INTO HIS SAVEAREA + 8\nINITCON  DS    0H\n         ZAP   IBMCOUNT,=P'0'\n         ZAP   IBMCONOT,=P'0'\nRUNCHAIN DS    0H\n         L     R5,X'10'                  CVT\n         L     R5,X'128'(,R5)            POINT TO JESCT\n         L     R5,X'68'(,R5)             POINT TO PPT HEADER\n         LR    R6,R5               R5 IS BEGINNING. R6 WILL MOVE.\n         ST    R5,SAVER5A\n         HEX   MSGLINE+44,4,SAVER5A\n         APUT  MSGLINE,L'MSGLINE   TITLE\nGETHEADR DS    0H                        GET PPT HEADER FIELDS\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n         MODESET MODE=SUP,KEY=ZERO       SWITCH TO KEY=0\n         MVC   CPTHDR(32),0(R5)          SAVE ENTIRE PPT HEADER\n         MODESET MODE=PROB,KEY=NZERO     SWITCH BACK TO OWN KEY\n         LH    R7,CPTUSED                HOW MANY USED ENTRIES?\n         ST    R7,SAVER7A                SAFEKEEPING\n         BAL   R9,FORMATH                FORMAT HEADER FIELDS\n         LA    R6,32(,R6)                POINT TO FIRST PPT ENTRY\nLOOP     DS    0H                        GET PPT ENTRIES\n         ST    R7,SAVER7B\n*        XC    ENTFLAGS(8),ENTFLAGS      CLEAR FLAGS\n*        MVC   PGMNAME,PGMNAME-1         CLEAR NAME\n         MODESET MODE=SUP,KEY=ZERO       SWITCH TO KEY=0\n         MVC   MPTENTRY(16),0(R6)        MOVE PPT ENTRY OUT\n         MODESET MODE=PROB,KEY=NZERO     SWITCH BACK TO OWN KEY\n         MVC   MSGLINE2(8),PGMNAME\n         HEX   MSGLINE2+10,4,ENTFLAGS\n         HEX   MSGLINE2+20,4,ENTFLAGS+4\n*        APUT  MSGLINE2,L'MSGLINE2       DISPLAY MESSAGE ON THE TUBE\n         BAL   R9,FORMATE                FORMAT THE DATA IN FLAGS\n         LA    R6,16(,R6)                BUMP TO NEXT PPT ENTRY\n         HEX   MSGLINE3,4,SAVER7B\n*        APUT  MSGLINE3,L'MSGLINE3\n         BCT   R7,LOOP                   FOR AS MANY AS THERE ARE\n         APUT  ENDMSG,L'ENDMSG\n         BAL   R9,FINISHM\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nRETURN   DS    0H\n         LA    R15,0               FORCE RC=0\n         L     R13,SAVE+4          RELOAD CALLER'S SAVEAREA POINTER\n         L     R14,12(,R13)        RELOAD R14\n         MVC   16(4,R13),=A(0)     FORCE RC=0\n         LM    R0,R12,20(R13)      RELOAD REST OF REGISTERS\n         BR    R14                 RETURN TO CALLER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     S  U  B  R  O  U  T  I  N  E  S                             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNOTAUTH  DS    0H                  R15 HAS THE RC FROM TESTAUTH\n*        LA    R15,8               PUT IN ANY CODE YOU WANT....\n*                                  DEFAULT IS RC=4 FROM TESTAUTH\n         STM   R14,R12,SAVERRS     SAVE REGS FOR APUT\n         APUT  NOTAUTHM,L'NOTAUTHM\n         LM    R14,R12,SAVERRS     RELOAD REGS\n         L     R13,SAVE+4          RELOAD CALLER'S SAVEAREA POINTER\n         L     R14,12(,R13)        RELOAD R14\n         LM    R0,R12,20(R13)      RELOAD REST OF REGISTERS NOT 15\n         BR    R14                 RETURN TO CALLER\nNOTAUTHM DC    C'This program has to be run APF-Authorized.'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFORMATH  DS    0H\n         ST    R9,SAVER9B\n         ST    R4,SAVER4A\n         LH    R4,CPTHDR+10\n*        LH    R4,CPTUSED\n         CVD   R4,CVDAREA\n         MVC   MSGLINN+46(10),MASK10\n         ED    MSGLINN+46(10),CVDAREA+4\n         MVI   MSGLINN+54,C' '\n         APUT  MSGLINN,L'MSGLINN\n         APUT  FENTMS1,L'FENTMS1\n         APUT  FENTMS2,L'FENTMS2\n         APUT  FENTMS3,L'FENTMS3\n         L     R4,SAVER4A\n         L     R9,SAVER9B\n         BR    R9\nMASK10   DC    XL10'40202020202020202120'\nMASK46   DC    XL6'402020202120'\nIBMCOUNT DC    PL5'0'\nIBMCONOT DC    PL5'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFORMATE  DS    0H\n         ST    R9,SAVER9C\n         ST    R7,SAVER7C\n         MVC   GENPPT,GENPPT-1\n         LA    R8,MPTENTRY\n         USING PPT1,R8\n*-->\n         MVC   GPPTNAME,PPTNAME        PROGRAM NAME\n         MVC   GPPTNCNC,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNCNCL       NON CANCEL?\n         BNO   SPECPKEY                NO-\n         MVC   GPPTNCNC,=CL3'YES'      SET\nSPECPKEY DS    0H\n         MVC   GPPTSKEY,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTSKEY        SPECIAL STORAGE KEY?\n         BNO   NONSWAP                 NO-\n         MVC   GPPTSKEY,=CL3'YES'      SET\nNONSWAP  DS    0H\n         MVC   GPPTNSWP,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNSWP        NON-SWAPPABLE?\n         BNO   PRIV                    NO-\n         MVC   GPPTNSWP,=CL3'YES'      SET\nPRIV     DS    0H\n         MVC   GPPTPRIV,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTPRIV        PRIVILEGED?\n         BNO   SYSTASK                 NO-\n         MVC   GPPTPRIV,=CL3'YES'      SET\nSYSTASK  DS    0H\n         MVC   GPPTSYST,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTSYSTK       SYSTEM TASK?\n         BNO   NDSI                    NO-\n         MVC   GPPTSYST,=CL3'YES'      SET\nNDSI     DS    0H\n         MVC   GPPTNDSI,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNDSI        DATASET INTEGRITY?\n         BO    NOPASS                  NO-\n         MVC   GPPTNDSI,=CL3'YES'      SET\nNOPASS   DS    0H\n         MVC   GPPTNOPS,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNOPAS       BYPASS PASSWORD PROTECTION?\n         BNO   PROTKY                  NO-\n         MVC   GPPTNOPS,=CL3'YES'      SET\nPROTKY   DS    0H\n         SR    R7,R7                   ZEROIZE\n         IC    R7,PPTKEY               PICK UP THE PROTECT KEY\n         SRL   R7,4(0)                 MOVE INTO LOW BYTE\n         CVD   R7,DW                   CONVERT TO DECIMAL\n         UNPK  UNPKKEY,PROTKEY         MAKE IT READABLE\n         OI    UNPKKEY+L'UNPKKEY-1,X'F0'  FORCE SIGN TO F\n         MVC   GPPTKEYS,UNPKKEY+1      MOVE TO REXX AREA\nCPUAFF   DS    0H\n         LA    R5,PPTCPUA              @ CPU AFFINITY\n         LA    R3,L'PPTCPUA            LENGTH TO CONVERT\n         LA    R7,GPPTCPUA             @ OUTPUT AREA\nCPUAFFCN DS    0H\n         SR    R4,R4                   ZEROIZE\n         IC    R4,0(R5)                CHARACTER TO CONVERT\n         SRL   R4,4(0)                 REMOVE LOW NIBBLE\n         STC   R4,CHAR                 STORE\n         BAL   R9,HEXCONV              DO THE HEX CONVERSION\n         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA\n         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA\n         MVC   CHAR,0(R5)              NEXT NIBBLE\n         NI    CHAR,X'0F'              REMOVE LOW NIBBLE\n         BAL   R9,HEXCONV              DO THE HEX CONVERSION\n         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA\n         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA\n         LA    R5,1(,R5)               NEXT BYTE TO CONVERT\n         BCT   R3,CPUAFFCN             DO WHILE R3 > 0?\nP2LPU    DS    0H\n         MVC   GPPT2LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT2LPU        2ND LEVEL PREFERED STORAGE\n         BNO   P1LPU                   NO-\n         MVC   GPPT2LPU,=CL3'YES'      SET\nP1LPU    DS    0H\n         MVC   GPPT1LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT1LPU        1ST LEVEL PREFERED STORAGE   PG1\n         BNO   PORIG                   NO-\n         MVC   GPPT2LPU,=CL3'YES'      SET                          PG1\nPORIG    DS    0H\n         MVC   GPPTORIG,=CL3'YES'      DEFAULT\n         TM    PPTORIG,PPTDEFLT        ORIGIN?\n         BO    IBMYES\n         MVC   GPPTORIG,=CL3'NO '      SET\n         B     IBMNO\nIBMYES   DS    0H\n         AP    IBMCOUNT,=P'1'\n         B     FORMEOUT\nIBMNO    DS    0H\n         AP    IBMCONOT,=P'1'\nFORMEOUT DS    0H\n         APUT  GENPPT,L'GENPPT\n*-->\n         L     R7,SAVER7C\n         L     R9,SAVER9C\n         DROP  R8\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXCONV  EQU   *                       PRINT HEX ROUTINE\n         ST    R9,SAVER9D\n         CLI   CHAR,X'09'              > 9?\n         BH    HEX10                   YES-\n         OI    CHAR,X'F0'              RANGE F0-F9\n         BR    R2                      RETURN TO CALLER\nHEX10    EQU   *\n         XR    R4,R4                   ZEROIZE\n         IC    R4,CHAR                 INSERT CHAR INTO REG\n         SH    R4,=H'9'                GET CHAR NO\n         STC   R4,CHAR                 STORE\n         OI    CHAR,X'C0'              RANGE C0-C6\n         L     R9,SAVER9D\n         BR    R9                      RETURN TO CALLER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFINISHM  DS    0H\n         ST    R9,SAVER9E\n         MVC   MSGIBM+43(6),MASK46\n         ED    MSGIBM+43(6),IBMCOUNT+2\n         APUT  MSGIBM,L'MSGIBM\n         MVC   MSGIBMNO+43(6),MASK46\n         ED    MSGIBMNO+43(6),IBMCONOT+2\n         APUT  MSGIBMNO,L'MSGIBMNO\n         L     R9,SAVER9E\n         BR    R9                      RETURN TO CALLER\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     D  A  T  A     A  R  E  A  S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVE     DC    18F'0'              MY SAVE AREA\nCVDAREA  DS    D\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    CL2' '\nMPTENTRY DC    0CL16\nPGMNAME  DC    CL8' '\nENTFLAGS DC    8X'00'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVER4A  DC    F'0'\nSAVER5A  DC    F'0'\nSAVER6A  DC    F'0'\nSAVER7A  DC    F'0'\nSAVER7B  DC    F'0'\nSAVER7C  DC    F'0'\nSAVER9A  DC    F'0'\nSAVER9B  DC    F'0'\nSAVER9C  DC    F'0'\nSAVER9D  DC    F'0'\nSAVER9E  DC    F'0'\nSAVER15A DC    F'0'\nSAVERRS  DS    16F\nMSGLOOP  DC    CL16' '\nMSGLINE  DC    C'PPT DISPLAY - V1.2.1      PPT ADDRESS IS:            '\nMSGLINN  DC  C'--------------------      NUMBER OF ENTRIES:           '\nMSGLINE2 DC    CL30' '                      LINE FOR MESSAGE\nMSGLINE3 DC    CL30' '                      LINE FOR MESSAGE\nMSGIBM   DC    C'Number of IBM Supplied  Default Entries:           '\nMSGIBMNO DC    C'Number of Non-IBM added Parmlib Entries:           '\nDW       DS    D                       WORK AREA\nUNPKKEY  EQU   DW,3                    UNPACKED PROTECT KEY\nUNPKSTEM EQU   DW,3                    UNPACKED STEM\nPROTKEY  EQU   DW+6,2                  PROTECT KEY\nSTEMNO   EQU   DW+6,2                  STEM NO\nCHAR     DS    C                       A LONE CHARACTER\n         LTORG\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTOTIBMM  DC    C' IBM  Supplied  Default  Entries = '\nTOTNIBMM DC    C' Non IBM Supplied Default Entries= '\nFENTMS1  DC    C' PROGRAM  NON  SPEC  NON  PRIV SYST DSI BYPS PROT CPU X\n                2LPU 1LPU IBM '\nFENTMS2  DC    C'  NAME    CNCL PR/KY SWAP SRM  TASK     PASS KEY  AFF X\n                          DEF '\nFENTMS3  DC    C'--------  ---- ----- ---- ---- ---- --- ---- ---- ----X\n                ---- ---- --- '\nENDMSG   DC    C'--------------------'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    CL1' '                  BLANK FOR CLEARING AREA\nGENPPT   DS    0CL68                   GENERATED PPT TABLE ENTRY\nGPPTNAME DC    CL8'X'                  PROGRAM NAME\n         DC    CL2' '\nGPPTNCNC DC    CL3'X'                  NON/CANCEL\n         DC    CL2' '\nGPPTSKEY DC    CL3'X'                  SPECIAL PROTECT KEY\n         DC    CL3' '\nGPPTNSWP DC    CL3'X'                  NON/SWAPPABLE\n         DC    CL2' '\nGPPTPRIV DC    CL3'X'                  PRIVILEGED\n         DC    CL2' '\nGPPTSYST DC    CL3'X'                  SYSTEM TASK\n         DC    CL2' '\nGPPTNDSI DC    CL3'X'                  DSI\n         DC    CL1' '\nGPPTNOPS DC    CL3'X'                  BYPASS PASSWORD PROTECTION\n         DC    CL2' '\nGPPTKEYS DC    CL2'X'                  PROTECT KEY\n         DC    CL3' '\nGPPTCPUA DC    CL4'X'                  CPU AFFINITY\n         DC    CL1' '\nGPPT2LPU DC    CL3'X'                  2ND LEVEL STORAGE\n         DC    CL2' '\nGPPT1LPU DC    CL3'X'                  1ST LEVEL STORAGE\n         DC    CL2' '\nGPPTORIG DC    CL3'X'                  ENTRY ORIGIN\nGPPTLEN  EQU   *-GENPPT                ENTRY LENGTH\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         ST    R9,SAVER9A\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         L     R9,SAVER9A\n         BR    R9                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\nHEXSAVE  DS    4F\nSAVE1401 DS    4F\n* HEADER FIELDS ---- PREFIX IS \"CPT\" RATHER THAN \"PPT\"\nCPTHDR   DS    0CL32\nCPTID    DS    CL4   IDENTIFIER 'PPT '\nCPTVERS  DS    XL1   VERSION NUMBER\nCPTCVERS EQU   X'01' CURRENT VERSION NUMBER\n         DS    XL1   RESERVED\nCPTHDRLN DS    H     LENGTH OF PPT HEADER\nCPTENTLN DS    H     LENGTH OF A PPT ENTRY\nCPTUSED  DS    H     NUMBER OF USED PPT ENTRIES\nCPTENTS  DS    H     TOTAL NUMBER OF PPT ENTRIES\n         DS    H     RESERVED\nCPTMSGAD DS    XL4   ADDRESS OF MSGAREA USED IN IEFPPT\nCPTIB650 DS    XL4   ADDRESS OF MESSAGE MODULE IEFIB650\nCPTOLD   DS    A     ADDRESS OF NEXT LOGICALLY DELETED PPT\n         DS    CL4   RESERVED\n         SPACE\n* PPT ENTRY FIELDS ---- PREFIX IS \"CPT\" RATHER THAN \"PPT\"\nCPT1     DSECT\n         SPACE\nCPTENTRY DS    0CL16 MAPPING OF A PPT ENTRY\nCPTNAME  DS    CL8   PROGRAM NAME\nCPTBYTE1 DS    C     FIRST BYTE OF PROPERTIES\nCPTNCNCL EQU   X'80' THIS PROGRAM IS NON-CANCELABLE\nCPTSKEY  EQU   X'40' THIS PROGRAM REQUIRES THE SPECIAL PROTECT\n*                    KEY IN PPTKEY\nCPTNSWP  EQU   X'20' THIS PROGRAM IS TO BE AUTHORIZED TO BE\n*                    NON-SWAPPABLE\nCPTPRIV  EQU   X'10' THIS PROGRAM IS TO BE 'PRIVILEGED' (WITH\n*                    RESPECT TO THE SYSTEM RESOURCES MANAGER)\nCPTSYSTK EQU   X'08' THIS PROGRAM IS A SYSTEM TASK\nCPTNDSI  EQU   X'04' THIS PROGRAM IS NOT TO BE GIVEN DATA SET\n*                    INTEGRITY\nCPTNOPAS EQU   X'02' BYPASS PASSWORD PROTECTION\nCPTNHUSI EQU   X'01' Region and MEMLIMIT values and limits set\n*                    or affected by the IEFUSI exit are not\n*                    honored for the program. Set to on when PPT\n*                    option NOHONORIEFUSIREGION is specified in\n*                    SCHEDxx. This bit is also set explicitly\n*                    for some program entries in the IBM default\n*                    PPT table IEFSDPPT.\n* THE REMAINING BIT IS RESERVED\n         SPACE\nCPTKEY   DS    C -   THIS KEY IS TO BE GIVEN TO THE PROGRAM\n*                    BEING ATTACHED IF PPTSKEY IS ON\n*        THE EQUATES FOR PROTECT KEYS FOLLOW, TO INSURE THAT\n*        PROTECT KEYS ARE DEFINED AS THE HIGH ORDER 4 BITS OF\n*        THE BYTE. KEYS 9-15 ARE FOR V=R PROGRAMS and Key 9\n*        is only used when the Subpool Override is not enabled.\nCPTKEY0  EQU   X'00'\nCPTKEY1  EQU   X'10'\nCPTKEY2  EQU   X'20'\nCPTKEY3  EQU   X'30'\nCPTKEY4  EQU   X'40'\nCPTKEY5  EQU   X'50'\nCPTKEY6  EQU   X'60'\nCPTKEY7  EQU   X'70'\nCPTKEY8  EQU   X'80'\nCPTKEY9  EQU   X'90'\nCPTKEYA  EQU   X'A0'\nCPTKEYB  EQU   X'B0'\nCPTKEYC  EQU   X'C0'\nCPTKEYD  EQU   X'D0'\nCPTKEYE  EQU   X'E0'\nCPTKEYF  EQU   X'F0'\nCPTCPUA  DS    BL2   BIT MASK OF CPU'S ON WHICH THIS PROGRAM CAN\n*                    RUN (SHOULD BE X'FFFF' IF AFFINITY IS NOT\n*                    REQUIRED)\nCPTFLGS  DS    0F    FLAG BYTES\nCPTPUBYT DS    CL1   Miscellaneous Flags\nCPT2LPU  EQU   X'80' 2ND LEVEL PREFERRED USAGE\nCPT1LPU  EQU   X'40' 1ST LEVEL PREFERRED USAGE\nCPTN2LP  EQU   X'20' NOT 2ND LEVEL PREFERRED USAGE\nCPTCRPG  EQU   X'01' CRITICALPAGING specified - program is\n*                    critical to Hyperswap operation and should\n*                    not allow any of its pages to be stolen\n* THE REMAINING BITS ARE RESERVED\nCPTORIG  DS    CL1   PPT ENTRY ORIGIN\nCPTDEFLT EQU   X'80' FROM IBM SUPPLIED DEFAULT TABLE\n* THE REMAINING BITS ARE RESERVED\n         DS    CL2   RESERVED\nCPTLEN   EQU   *-CPT1 LENGTH OF AN ENTRY\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         IEFZB610\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PPTD$": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00P\\x00\\x965\\x7f\\x01\\x19\\x07\\x9f\\x18\\x12\\x00\\x1c\\x00?\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1996-12-22T00:00:00", "modifydate": "2019-03-20T18:12:50", "lines": 28, "newlines": 63, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT497.FILE835(PPTD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB497835\n SETCODE AC(1)\n ENTRY   PPTD\n NAME    PPTD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PPTPAN01": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x10#\\x1f\\x01\\x10#\\x1f\\x11@\\x00\\x1c\\x00\\x1c\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-08-19T00:00:00", "modifydate": "2010-08-19T11:40:02", "lines": 28, "newlines": 28, "modlines": 0, "user": "PANEL"}, "text": ")ATTR\n_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)\n% TYPE(TEXT)    COLOR(RED)\n* TYPE(TEXT)    COLOR(YELLOW)\n+ TYPE(TEXT)    COLOR(WHITE)\n# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)\n? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)\n@ TYPE(OUTPUT)  COLOR(RED)\n)BODY WINDOW(77,18)\n%\n%COMMAND ===>_ZCMD      %                                SCROLL ===>_AMT   +\n%\n%IBM Supplied Default Entries=#z   %\n%Non IBM Supplied Default Entries=#z   %\n%\n*Program   Non  Special  Non  Priv System DSI Bypass Prot CPU  2LPU 1LPU IBM\n* Name     Cncl Prot/Key Swap SRM   Task       Pass  Key  Aff            DEF\n%\n)MODEL\n#Z                                                                          %\n)INIT\n.ZVARS= '(PPTDIBM,PPTNDIBM,PPTENTRY)'\n&ZCMD= ' '\n&ZWINTTL=  'PPT Table'\n)REINIT\n&ZCMD= ' '\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PPTPAN02": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x19\\x01\\x10#\\x1f\\x01\\x10#\\x1f\\x11@\\x00\\x17\\x00\\x17\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-08-19T00:00:00", "modifydate": "2010-08-19T11:40:19", "lines": 23, "newlines": 23, "modlines": 0, "user": "PANEL"}, "text": "PPTPAN02 PANEL\n\n)ATTR\n_ TYPE(INPUT)   INTENS(HIGH) COLOR(YELLOW)\n% TYPE(TEXT)    COLOR(RED)\n* TYPE(TEXT)    COLOR(YELLOW)\n+ TYPE(TEXT)    COLOR(WHITE)\n# TYPE(OUTPUT)  INTENS(HIGH) COLOR(BLUE)\n? TYPE(OUTPUT)  INTENS(HIGH) COLOR(RED)\n@ TYPE(OUTPUT)  COLOR(RED)\n)BODY WINDOW(55,5)\n%\n%    ----------------------------------------------\n%    |  PPT Search in progress. Please wait.      |\n%    ----------------------------------------------\n%\n)INIT\n&ZCMD= ' '\n&ZWINTTL=  'PPT Search'\n)REINIT\n&ZCMD= ' '\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PPTSCAN": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x18\\x01\\x10#\\x1f\\x01\\x10#\\x1f\\x12\\x11\\x01B\\x01A\\x00\\x00\\xc1\\xe2\\xe2\\xc5\\xd4\\xc2@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2010-08-19T00:00:00", "modifydate": "2010-08-19T12:11:18", "lines": 322, "newlines": 321, "modlines": 0, "user": "ASSEMB"}, "text": "         TITLE 'SCAN THE PPT TABLE'\nZERO     EQU   X'00'                   ZERO\nSPACE    EQU   C' '                    SPACE\nSIGNF    EQU   X'F0'                   POSITIVE SIGN\nPPTSCAN  CSECT\nPPTSCAN  AMODE 31\nPPTSCAN  RMODE 24\n         BAKR  R14,0                   SAVE CALLER'S ARS + GPRS\n*                                      IN THE LINKAGE STACK\n         USING PPTSCAN,R12             SET UP PROGRAM BASE REGISTER\n         LAE   R12,0(R15,0)            SET UP PROGRAM BASE REGISTER\nGETWORK  EQU   *\n         L     R9,=AL4(WORKALEN)       WORK AREA LENGTH\n         STORAGE OBTAIN,LENGTH=(R9),ADDR=(R10),SP=0,KEY=8,             X\n               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')\n         LR    R13,R1                  @ THE WORKAREA\n         USING SAVEAREA,R13            INFORM THE ASSEMBLER\n         LA    R0,SAVEAREA             @ THE WORKAREA\n         LA    R1,WORKALEN(0,0)        LENGTH\n         LA    R14,=X'00'              ZERO FILL\n         SR    R15,R15                 PROPAGATE\n         MVCL  R0,R14                  CLEAR THE AREA\n         MVC   PREVSA,=C'F1SA'         PUT ACRONYM INTO SAVEAREA\n*                                      TO INDICATE STATUS SAVED ON\n*                                      THE LINKAGE STACK.\nCONTROL  EQU   *                       MAIN PROGRAM CONTROL\n         BAS   R2,SCANPPT              SCAN THE PPT\n         B     RETURN                  RETURN TO CALLER\nRETURN   EQU   *\n         LAE   R1,0(R13,0)             ADDRESS TO FREE\n         L     R9,=AL4(WORKALEN)       WORK AREA LENGTH\n         STORAGE RELEASE,ADDR=(R1),LENGTH=(R9),SP=0,KEY=8,             X\n               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')\n         L     R15,RETCODE             SET RC\n         PR                            RESTORE CALLER'S AR'S\n*                                      GPRS 2-14 AND RETURN\n*                                      TO CALLER\nSCANPPT  EQU  *                        SCAN THE PPT TABLE\n         STCM  R2,B'1111',RET@         STORE RETURN @\n         MVC   PPTMACRO,PPTABLE        MOVE THE IEFPPSCN MACRO AREA\n         XC    PPTTOKEN,PPTTOKEN       START AT TOP OF PPT\nPPTRUN   EQU  *\n         MODESET MODE=SUP,KEY=ZERO     SUPERVISOR KEY 0 STATE\n         LA    R9,PPTINFO              @ PPT RETURN AREA\n         LA    R10,PPTMACRO            @ PPT MACRO AREA\n         IEFPPSCN REQUEST=NEXT,TOKEN=PPTTOKEN,PPTINFO=(R9),            X\n               MF=(E,(R10),COMPLETE)\n         LTR   R15,R15                 END OF SCAN?\n         BNZ   PPTEND                  END THE PPT SCAN\n         MODESET MODE=PROB,KEY=NZERO   PROBLEM KEY 8 STATE\n         LA    R8,PPTENT               @ OF PPT INFO\n         USING PPT1,R8                 INFORM THE ASSEMBLER\n         LA    R9,FMTPPT               @ FORMATTED PPT ENTRY\n         USING GENPPT,R9               INFORM THE ASSEMBLER\n         MVC   GPPTNAME,PPTNAME        PROGRAM NAME\n         MVC   GPPTNCNC,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNCNCL       NON CANCEL?\n         BNO   SPECPKEY                NO-\n         MVC   GPPTNCNC,=CL3'YES'      SET\nSPECPKEY EQU   *\n         MVC   GPPTSKEY,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTSKEY        SPECIAL STORAGE KEY?\n         BNO   NONSWAP                 NO-\n         MVC   GPPTSKEY,=CL3'YES'      SET\nNONSWAP  EQU   *\n         MVC   GPPTNSWP,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNSWP        NON-SWAPPABLE?\n         BNO   PRIV                    NO-\n         MVC   GPPTNSWP,=CL3'YES'      SET\nPRIV     EQU   *\n         MVC   GPPTPRIV,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTPRIV        PRIVILEGED?\n         BNO   SYSTASK                 NO-\n         MVC   GPPTPRIV,=CL3'YES'      SET\nSYSTASK  EQU   *\n         MVC   GPPTSYST,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTSYSTK       SYSTEM TASK?\n         BNO   NDSI                    NO-\n         MVC   GPPTSYST,=CL3'YES'      SET\nNDSI     EQU   *\n         MVC   GPPTNDSI,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNDSI        DATASET INTEGRITY?\n         BO    NOPASS                  NO-\n         MVC   GPPTNDSI,=CL3'YES'      SET\nNOPASS   EQU   *\n         MVC   GPPTNOPS,=CL3'NO '      DEFAULT\n         TM    PPTBYTE1,PPTNOPAS       BYPASS PASSWORD PROTECTION?\n         BNO   PROTKY                  NO-\n         MVC   GPPTNOPS,=CL3'YES'      SET\nPROTKY   EQU   *\n         SR    R7,R7                   ZEROIZE\n         IC    R7,PPTKEY               PICK UP THE PROTECT KEY\n         SRL   R7,4(0)                 MOVE INTO LOW BYTE\n         CVD   R7,DW                   CONVERT TO DECIMAL\n         UNPK  UNPKKEY,PROTKEY         MAKE IT READABLE\n         OI    UNPKKEY+L'UNPKKEY-1,X'F0'  FORCE SIGN TO F\n         MVC   GPPTKEYS,UNPKKEY+1      MOVE TO REXX AREA\nCPUAFF   EQU   *\n         LA    R5,PPTCPUA              @ CPU AFFINITY\n         LA    R6,L'PPTCPUA            LENGTH TO CONVERT\n         LA    R7,GPPTCPUA             @ OUTPUT AREA\nCPUAFFCN EQU   *\n         SR    R4,R4                   ZEROIZE\n         IC    R4,0(R5)                CHARACTER TO CONVERT\n         SRL   R4,4(0)                 REMOVE LOW NIBBLE\n         STC   R4,CHAR                 STORE\n         BAL   R2,HEXCONV              DO THE HEX CONVERSION\n         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA\n         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA\n         MVC   CHAR,0(R5)              NEXT NIBBLE\n         NI    CHAR,X'0F'              REMOVE LOW NIBBLE\n         BAL   R2,HEXCONV              DO THE HEX CONVERSION\n         MVC   0(1,R7),CHAR            MOVE TO OUTPUT AREA\n         LA    R7,1(,R7)               NEXT POSITION IN OUTPUT AREA\n         LA    R5,1(,R5)               NEXT BYTE TO CONVERT\n         BCT   R6,CPUAFFCN             DO WHILE R6 > 0?\nP2LPU    EQU   *\n         MVC   GPPT2LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT2LPU        2ND LEVEL PREFERED STORAGE\n         BNO   P1LPU                   NO-\n         MVC   GPPT2LPU,=CL3'YES'      SET\nP1LPU    EQU   *\n         MVC   GPPT1LPU,=CL3'NO '      DEFAULT\n         TM    PPTPUBYT,PPT1LPU        1ST LEVEL PREFERED STORAGE   PG1\n         BNO   PORIG                   NO-\n         MVC   GPPT2LPU,=CL3'YES'      SET                          PG1\nPORIG    EQU  *\n         MVC   GPPTORIG,=CL3'YES'      DEFAULT\n         TM    PPTORIG,PPTDEFLT        ORIGIN?\n         BO    BLDSTEM                 BUILD THE STEM VARIABLE\n         MVC   GPPTORIG,=CL3'NO '      SET\nBLDSTEM  EQU   *\n         XR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',NEXTSTEM     CURRENT STEM VALUE\n         LA    R7,1(,R7)               UPDATE STEM\n         STCM  R7,B'0011',NEXTSTEM     STORE BACK\n         BAL   R2,STEMBLD              BUILD REXX STEM VARIABLE\n         LTR   R15,R15                 STEM BUILD OKAY?\n         BZ    PPTRUN                  YES-\n         ST    R15,RETCODE2            STORE THE RETURN CODE\n         MVC   RETCODE,=AL4(4)         SCAN ERROR\n         B     RSETMODE                RETURN TO CALLER\nPPTEND   EQU   *\n         C     R15,=F'4'               TRUE END OF SCAN?\n         BE    STEM0                   YES-\n         ST    R15,RETCODE2            STORE THE RETURN CODE\n         MVC   RETCODE,=AL4(8)         SCAN ERROR\n         B     RSETMODE                RETURN TO CALLER\nSTEM0    EQU   *\n         MVC   STEMCNT,NEXTSTEM        NO OF STEMS CREATED\n         XC    NEXTSTEM,NEXTSTEM       CLEAR\n         BAL   R2,STEMBLD              BUILD REXX STEM VARIABLE\n         LTR   R15,R15                 STEM BUILD OKAY?\n         BZ    ALLDONE                 YES-\n         ST    R15,RETCODE2            STORE THE RETURN CODE\n         MVC   RETCODE,=AL4(4)         SCAN ERROR\n         B     RSETMODE                RETURN TO CALLER\nALLDONE  EQU   *\n         SR    R15,R15                 RC=0\n         ST    R15,RETCODE2            STORE THE RETURN CODE\n         XC    RETCODE,RETCODE         SET TO ZERO\nRSETMODE EQU   *\n         MODESET MODE=PROB,KEY=NZERO   PROBLEM KEY 8 STATE\n         ICM    R2,B'1111',RET@        RESET RETURN @\n         BR     R2                     RETURN TO CALLER\nHEXCONV  EQU   *                       PRINT HEX ROUTINE\n         CLI   CHAR,X'09'              > 9?\n         BH    HEX10                   YES-\n         OI    CHAR,X'F0'              RANGE F0-F9\n         BR    R2                      RETURN TO CALLER\nHEX10    EQU   *\n         XR    R4,R4                   ZEROIZE\n         IC    R4,CHAR                 INSERT CHAR INTO REG\n         SH    R4,=H'9'                GET CHAR NO\n         STC   R4,CHAR                 STORE\n         OI    CHAR,X'C0'              RANGE C0-C6\n         BR    R2                      RETURN TO CALLER\nSTEMBLD  EQU   *                       BUILD STEM ROUTINE\n         SR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',NEXTSTEM     NEXT STEM(EX .XXX)\n         CVD   R7,DW                   CONVERT TO DECIMAL\n         MVC   STEM,=XL4'40202120'     EDIT PATTERN\n         LA    R1,STEM+L'STEM-1        @ LAST CHARACTER\n         EDMK  STEM,STEMNO             CONVERT TO CHAR\n         LA    R14,STEM+L'STEM-1       CALCULATE THE LENGTH\n         SR    R14,R1                  OF THE NUMBER\n         XC    STEMNAME,STEMNAME       CLEAR\n         MVC   STEMNAME(L'STEMLIT),STEMLIT  BUILD PPTENT.\n         EX    R14,MOVESTEM            BUILD PPTENT.XXX\n         LA    R7,STEMNAME             @ OF STEM NAME\n         STCM  R7,B'1111',STEMPTR      STEM @\n         LA    R14,L'STEMLIT+1(,R14)   LENGTH OF STEM NAME\n         STCM  R14,B'1111',STEMLEN     STEM LENGTH\n         CLC   NEXTSTEM,=XL2'0000'     CREATING STEM 0?\n         BNE   NOTSTEM0                NO-\n         SR    R7,R7                   ZEROIZE\n         ICM   R7,B'0011',STEMCNT      NEXT STEM(EX .XXX)\n         CVD   R7,DW                   CONVERT TO DECIMAL\n         MVC   STEM,=XL4'40202120'     EDIT PATTERN\n         LA    R1,STEM+L'STEM-1        @ LAST CHARACTER\n         EDMK  STEM,STEMNO             CONVERT TO CHAR\n         LA    R14,STEM+L'STEM-1       CALCULATE THE LENGTH\n         SR    R14,R1                  OF THE NUMBER\n         STCM  R1,B'1111',STEMVAL@     @ OF STEM VALUE\n         LA    R14,1(,R14)             LENGTH OF STEM NAME\n         STCM  R14,B'1111',STEMVALL    STEM VALUE LENGTH\n         B     SETTOKEN                SET THE TOKEN\nNOTSTEM0 EQU   *\n         STCM  R9,B'1111',STEMVAL@     ADDRESS OF STEM VALUE\n         MVC   STEMVALL,=AL4(GPPTLEN)  STEM VALUE LENGTH\nSETTOKEN EQU   *\n         XC    IKJTOKEN,IKJTOKEN       NO REQUIRED FOR THIS CALL\n         XC    RCODE441,RCODE441       RETURN CODE\n         L     R15,CVTPTR              CVT @\n         USING CVT,R15                 INFORM THE ASSEMBLER\n         L     R15,CVTTVT              TSCT @\n         USING TSVT,R15                INFORM THE ASSEMBLER\n         L     R15,TSVTVACC            IKJCT441 @\n         LTR   R15,R15                 ENTRY POINT FOUND?\n         BNZ   CALL441                 YES- DO A CALL\nLINK441  EQU   *\n         MVC   LINKAREA,LINKL          LINK SL=L\n         MVC   CALLAREA,CALLL          PROG PROGRAM LIST\n         LINK  EP=IKJCT441,                                            X\n               PARAM=(ECODE,           ENTRY CODE                      X\n               STEMPTR,                POINTER TO STEM NAME            X\n               STEMLEN,                LENGTH  OF STEM NAME            X\n               STEMVAL@,               POINTER TO STEM VALUE           X\n               STEMVALL,               LENGTH  OF STEM VALUE           X\n               IKJTOKEN,               TOKEN                           X\n               ECTPARM,                NOT REQUIRED                    X\n               RCODE441),              RETURN CODE                     X\n               VL=1,                   EOL                             X\n               MF=(E,CALLAREA),        CALL AREA                       X\n               SF=(E,LINKAREA)         LINK AREA\n         B     CHKRET                  CHECK THE RETURN CODE\nCALL441  EQU   *\n         MVC   CALLAREA,CALLL          PROG PROGRAM LIST\n         CALL  (15),                                                   X\n               (ECODE,                 ENTRY CODE                      X\n               STEMPTR,                POINTER TO STEM NAME            X\n               STEMLEN,                LENGTH  OF STEM NAME            X\n               STEMVAL@,               POINTER TO STEM VALUE           X\n               STEMVALL,               LENGTH  OF STEM VALUE           X\n               IKJTOKEN,               TOKEN                           X\n               ECTPARM,                NOT REQUIRED                    X\n               RCODE441),              RETURN CODE                     X\n               VL,                     EOL                             X\n               MF=(E,CALLAREA)\n         B     CHKRET                  CHECK THE RETURN CODE\nCHKRET   EQU   *\n         BR    R2                      RETURN TO CALLER\nMOVESTEM MVC   STEMNAME+L'STEMLIT(0),0(R1)\n         LTORG\nSTEMLIT  DC    CL7'PPTENT.'            STEM\nECTPARM  DC    X'FFFFFFFF'             ECT\nECODE    DC    AL4(TSVEUPDT)           CREATE CODE\n*\n* PPTSCAN ASSEMBLER ROUTINE\n*\n         TITLE 'LINK LIST AREA'\nLINKL    LINK SF=L\nLINKLEN EQU  *-LINKL                   LENGTH\nCALLL    CALL ,(,,,,,,,),MF=L\nCALLLEN EQU  *-CALLL                   LENGTH\n         TITLE 'IEFPPSCN LIST AREA'\n         IEFPPSCN MF=(L,PPTABLE,0D)\n         TITLE 'WORKAREA DSECT'\nWORKAREA DSECT\nSAVEAREA DS    CL72                    SAVEAREA\nPREVSA   EQU   SAVEAREA+4,4            @ OF PREVIOUS SAVEAREA\nRET@     DS    F                       RETURN @\nRETCODE  DS    F                       RETURN CODE AREA\nRETCODE2 DS    F                       USER RETURN CODE\nDW       DS    D                       WORK AREA\nUNPKKEY  EQU   DW,3                    UNPACKED PROTECT KEY\nUNPKSTEM EQU   DW,3                    UNPACKED STEM\nPROTKEY  EQU   DW+6,2                  PROTECT KEY\nSTEMNO   EQU   DW+6,2                  STEM NO\nCHAR     DS    C                       A LONE CHARACTER\nNEXTSTEM DS    XL2                     NEXT STEM VARIABLE NO\nSTEMCNT  DS    XL2                     MAX STEM VARIABLES\nSTEM     DS    CL4                     CONSTRUCTED STEM NO\nSTEMNAME DS    CL10                    CONSTRUCTED STEM NAME\nPPTTOKEN DS    XL4                     IEFPPSCN TOKEN\nPPTMACRO DS    CL(PPTABLEL)            IEFPPSCN MACRO AREA\nPPTINFO  DS    0X                      PPT RETURN AREA\nPPTELEN  DS    AL2                     MAX PPT ENTRY LENGTH\nPPTENT   DS    CL(L'PPTENTRY)          PPT ENTRY LENGTH\nFMTPPT   DS    CL(GPPTLEN)             FORMATTED PPT AREA\nPARMLIST DS    0F\nSTEMPTR  DS    F                       STEM PTR\nSTEMLEN  DS    F                       STEM LEN\nSTEMVAL@ DS    F                       STEM VALUE @\nSTEMVALL DS    F                       STEM VAL LENGTH\nIKJTOKEN DS    F                       TOKEN\nRCODE441 DS    F                       RETURN CODE\n         DS    0F\nLINKAREA DS    CL(LINKLEN)             LINK AREA\nCALLAREA DS    CL(CALLLEN)             PARM LIST AREA\nWORKALEN EQU   *-WORKAREA              WORK AREA LENGTH\nGENPPT   DSECT                         GENERATED PPT TABLE ENTRY\nGPPTNAME DS    CL8                     PROGRAM NAME\nGPPTNCNC DS    CL3                     NON/CANCEL\nGPPTSKEY DS    CL3                     SPECIAL PROTECT KEY\nGPPTNSWP DS    CL3                     NON/SWAPPABLE\nGPPTPRIV DS    CL3                     PRIVILEGED\nGPPTSYST DS    CL3                     SYSTEM TASK\nGPPTNDSI DS    CL3                     DSI\nGPPTNOPS DS    CL3                     BYPASS PASSWORD PROTECTION\nGPPTKEYS DS    CL2                     PROTECT KEY\nGPPTCPUA DS    CL4                     CPU AFFINITY\nGPPT2LPU DS    CL3                     2ND LEVEL STORAGE\nGPPT1LPU DS    CL3                     1ST LEVEL STORAGE\nGPPTORIG DS    CL3                     ENTRY ORIGIN\nGPPTLEN  EQU   *-GENPPT                ENTRY LENGTH\n         YREGS\n         CVT   DSECT=YES,LIST=NO       CVT DSECT\n         IEFJESCT                      JES2 CT\n         IEFZB610                      PPT\n         IKJTSVT                       TSVT\n         END   PPTSCAN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PPTSCAN$": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x10\\x01\\x10#\\x1f\\x01\\x19\\x08\\x0f\"A\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-08-19T00:00:00", "modifydate": "2019-03-21T22:41:10", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//*SMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT497.FILE835(PPTSCAN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB497835\n NAME    PPTSCAN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PPTSCANR": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x01\\x01\\x10#\\x1f\\x01\\x19\\x08\\x0f\"H\\x00d\\x00d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-08-19T00:00:00", "modifydate": "2019-03-21T22:48:01", "lines": 100, "newlines": 100, "modlines": 0, "user": "SBGOLOB"}, "text": "/**rexx**/\n/*  Program-id           PPTSCANR                                  */\n/*  Remarks              Display the PPT                           */\n/*trace i*/\n/* --------------------------------------------------------------- */\n/* Change the next line to point to your panel dataset in ISPPLIB. */\n/* --------------------------------------------------------------- */\naddress \"ISPEXEC\" \"LIBDEF ISPPLIB DATASET ID('XXXXXX.PANELS')\"\nppttable:\nADDRESS \"ISPEXEC\" \"CONTROL DISPLAY LOCK\" /* LOCK THE TERMINAL      */\nif (rc > 8) then do                      /* error?                 */\n   say 'Lock error    rc = 'rc''         /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* and quit               */\nend\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(6) COLUMN(10)\" /* pop up position    */\nADDRESS \"ISPEXEC\" \"DISPLAY PANEL(PPTPAN02)\"\nif (rc > 8) then do                      /* error?                 */\n   say 'Display error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* and quit               */\nend\nPPTSCAN                                  /* scan the ppt           */\nif (rc \u00ac= 0) then do                     /* error?                 */\n   say 'PPTSCAN Error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* and quit               */\nend\ncall ppttable_build                      /* build the ppt table    */\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove popup           */\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(3) COLUMN(1)\"  /* pop up position    */\nADDRESS \"ISPEXEC\" \"TBDISPL PPTTAB PANEL(PPTPAN01)\"\nif (rc > 8) then do                      /* error?                 */\n   say 'tbdispl error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* and quit               */\nend\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove menu popup      */\nADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"       /* remove allocation      */\nexit(0)                                  /* quit                   */\nppttable_build:\nADDRESS \"ISPEXEC\" \"TBCREATE PPTTAB NOWRITE REPLACE\"\nif (rc >  4) then do                     /* call okay?             */\n   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* lets quit              */\nend\nztdmark=    '-------------------------------------------------------------------\n--------'\nADDRESS  \"ISPEXEC\" \"VPUT    (PPTENTRY,ZTDMARK) SHARED\"\ntabrows=  100                            /* max table rows         */\npptdibm=  0                              /* init                   */\npptndibm= 0                              /* init                   */\ndo i= 1 to pptent.0                      /* add the ppt ents to an */\n                                         /* ispf table for display */\n   pptentry= substr(pptent.i,1,8)        /* program name           */\n                                         /* non-cancel             */\n   pptentry= pptentry||'  '||substr(pptent.i,9,3)\n                                         /* special protect key    */\n   pptentry= pptentry||'   '||substr(pptent.i,12,3)\n                                         /* non-swappable          */\n   pptentry= pptentry||'     '||substr(pptent.i,15,3)\n                                         /* privileged             */\n   pptentry= pptentry||'   '||substr(pptent.i,18,3)\n                                         /* system task            */\n   pptentry= pptentry||'  '||substr(pptent.i,21,3)\n                                         /* dsi                    */\n   pptentry= pptentry||'   '||substr(pptent.i,24,3)\n                                         /* bypass password prot   */\n   pptentry= pptentry||'  '||substr(pptent.i,27,3)\n                                         /* protection key         */\n   pptentry= pptentry||'    '||substr(pptent.i,30,2)\n                                         /* cpu affinity           */\n   pptentry= pptentry||'  '||substr(pptent.i,32,4)\n                                         /* 2LPU                   */\n   pptentry= pptentry||'  '||substr(pptent.i,36,3)\n                                         /* 1LPU                   */\n   pptentry= pptentry||'  '||substr(pptent.i,39,3)\n                                         /* default entry          */\n   pptentry= pptentry||' '||substr(pptent.i,42,3)\n   if substr(pptent.i,42,3) = 'YES' then /* IBM-supplied default?  */\n      pptdibm= pptdibm + 1               /* yes                    */\n   else\n      pptndibm= pptndibm + 1             /* no                     */\n   ADDRESS \"ISPEXEC\" \"TBADD PPTTAB       /* add the entries        */\n            SAVE(PPTENTRY)\n            MULT(\"TABROWS\")\"\n   if (rc \u00ac= 0) then do                  /* call okay?             */\n      say 'tbadd error    rc = 'rc''     /* no- inform the user    */\n      ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation      */\n      exit(rc)                           /* let's quit             */\n   end\nend\nADDRESS \"ISPEXEC\" \"TBTOP PPTTAB\"         /* position to top of tab */\nif (rc \u00ac= 0) then do                     /* call okay?             */\n   say 'tbtop error    rc = 'rc''        /* no- inform the user    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(rc)                              /* let's quit             */\nend\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOB": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"BROWSE DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOE": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"EDIT   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOR": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x07\\x11\\x7f\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/**************************************************/\n/* NOTE:  Use of this EXEC requires the REVIEW    */\n/*        command from CBT file 134 or 135.       */\n/**************************************************/\n/* REVIEW command output.  This has an advantage  */\n/* over TSOE/TSOB/TSOV in that it works under     */\n/* native TSO (TSO READY) without ISPF.           */\n/**************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(SYSALLDA) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress TSO     \"REVIEW       \"||ddnm||\"    FILE\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOV": {"ttr": 1298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00F\\x01\\x07\\x11\\x7f\\x01\\t)_\\x11\\x19\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2009-10-22T11:19:46", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/****************************************************/\n/* There is really no advantage to using TSOV over  */\n/* TSOE since a temporary data set is used, but     */\n/* to complete the TSO* set of EXECs - here it is.  */\n/****************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,200) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"VIEW   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT835/FILE835.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT835", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}