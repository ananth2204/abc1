{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011211000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3115658, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 22, "INMDSNAM": "CBT.V500.FILE088.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE088.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x002\\x0e'", "DS1TRBAL": "b'0X'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\x89\\x00\\x06\\x00\\x8c\\x00\\x0b\\x003'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t\\x02\\x7f\\x01\\t\\x02\\x7f\\x00R\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-01-27T00:00:00", "modifydate": "2009-01-27T00:52:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  088\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE088\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 99 MEMBERS COUNTED; CUMULATIVE SIZE IS 28,907 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/27/09    00:52:53    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ABSTNEW": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x159\\x01@\\x01A\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T15:39:00", "lines": 320, "newlines": 321, "modlines": 0, "user": "SBGOLOB"}, "text": "This is the File abstract as of 02/20/00\n\n        Brian Westerman\n        Director of Research & Development\n        Syzygy Incorporated             Syzygy Incorporated\n        1381 Kildaire Farm Road         897 Oak Park Blvd\n        Suite 326                       Suite 500\n        Cary, NC  27511-5525            Pismo Beach, CA  93449\n                     Phone:(800) 767-2244\n                     Fax:  (800) 366-4082\n\n\nUnless otherwise noted, all programs support OS/390 V2.8 and below\n(within reason)\n\nCurrent Operating Systems at Syzygy (we support these for customer\ntesting)\n\nMVS 3.8E\nMVS/SP 1.3.6\nMVS/XA 2.2.3\nMVS/ESA 3.1\nMVS/ESA 4.3\nMVS/ESA 5.1\nOS/390 1.3\nOS/390 2.4\nOS/390 2.5\nOS/390 2.7\nOS/390 2.8\nOS/390 2.9  --- testing\n\nWe also have various releases of VM, VM/ESA and DOS/VSE but they don't\napply to this file.\n\n\n\nThe following Items have been added as of 2/20/00\n\nAUTO  -  Automatic command and job scheduler.  This code was originaly\non the CBT tape many years ago, but stopped working when MVS/ESA V5 came\nout because of some new ways of doing things with that version of MVS.\nThis program allows you to schedule jobs or commands to run at any time\nof day, any day of week any month of (well you get the picture).\nIt runs as a started task (time=1440) and you can use it to automatically\nschedule anything.  You can also fire off anything in it's files (by time\nor jobname) at any time.  There are 2 datasets that you will need to\ncreate, in the code they are SYZYGY.AUTO.COMMANDS and SYZYGY.AUTO.JOBS,\n(you should probably rename those) and the directions are easy to follow\nand are located in the first few hundred lines of hte code. We have\nused this as our ONLY scheduling system for years, and when we go to\ncustomer sites for contracts, we normally set it up for our stuff and\nthe customer typically moves over to using it before we leave.  It's\nvery easy to use and uses no resources.  You can give it a very high\npriority, (and probably should), we have thousands of jobs and commands\nscheduled with this guy every day, and it typically uses less than 1\nminute (between 25 and 45 sec) of CPU time per month, (We IPL once per\nmonth wheather we need to or not). You can concatonate command and/or\njob libraries as needed so that you can have production and test jobs.\nYou can run as many copies of this little address space as you want\nfor different purposes (test and production), but don't forget to use\ndifferent command libraries because you will end up doing everything\nmultiple times if you don't remember.\n\nCOMMANDZ  -  This program was originally copied from the CBT tape\nand was originally written by John V. Hooper to execute a stack of\ncommands to automate processing.  I have added a slew of code to\nthis program so that now you can use it for scheduling and also\nI have included IF/Then logic parameters.  The added code allos\nthe following functions:\n             IFSTARTED JOBNAME - THIS GIVES THE ABILITY TO  *      @BHW\n*            EXECUTE COMMANDS WHICH FOLLOW THIS COMMAND     *      @BHW\n*            ONLY IF THE SPECIFIED JOBNAME IS ACTIVE.  THE  *      @BHW\n*            ENDIF COMMAND ENDS THE IF NEST OF COMMANDS     *      @BHW\n\n             IFSTOPPED JOBNAME - THIS GIVES THE ABILITY TO  *      @BHW\n*            EXECUTE COMMANDS WHICH FOLLOW THIS COMMAND     *      @BHW\n*            ONLY IF THE SPECIFIED JOBNAME IS NOT ACTIVE.   *      @BHW\n*            THE ENDIF COMMAND ENDS THE IF NEST OF COMMANDS *      @BHW\n\n             WTO=TEXT  - ALLOWS YOU TO ISSUE WTOS OF        *      @BHW\n*            ANYTHING YOU WANT TO SAY, UP TO 72 CHARACTERS  *      @BHW\n*            THE FORMAT IS WTO=TEXT YOU WANT TO SAY         *      @BHW\n\n             STOPCODE=NNNN -  ALLOWS YOU TO END PROCESSING  *      @BHW\n*            AND OPTIONALLY SET A CONDITION CODE OF UP TO   *      @BHW\n*            4 NUMERIC DIGITS                               *      @BHW\n*            THE FORMAT IS STOPCODE OR STOPCODE=NNNN WHERE  *      @BHW\n*            NNNN IS FROM 1 TO 4 DIGITS, IF YOU SPECIFY MORE*      @BHW\n*            THAN 4 DIGITS, THE NUMBERS AFTER THE 4TH WILL  *      @BHW\n*            BE IGNORED\n\nSHUTDOWN  -  Sample command file which shows how to use the new\nfeaturs of COMMANDZ to control the shutdown of the system.\n\nNOKEEP  -   This is an MPF exit which will COMPLETELY suppress\nmessages from everywhere so you need to be careful, if you have\nmessages that you have successfully kept from going to to console\nbut still go to syslog then this is what you need.  We have a large\nphantom network and therefore we used to get over 1 million\nlines from VTAM/TCP about the nodes that were not up.  We used\nthis little exit to keep from sending those to syslog and we\nhave saved ourseleves a lot of time and it make looking for\nproblems easier because you don't have to search around the\nuseless messages in syslog.\n\nREDMSG  -  This program was also originally from the CBT Tape,\nand was changed somewhat. It allows you to display a message\non the console if the preceeding step had a non-zero return code.\n\nSLSUX06 -  Storage Tek Silo Exit 6.  This code has also been\ngiven to STK as of 1/99 and will be distributed by them, but\nsince I wrote it, I wanted to put it here as well.  This exit\ngets invoked on cartridge insert/eject processing.  We had a\nproblem whereby when the operators printed the CA-1 scratch\npick list, they didn't know which tapes were already in the\nsilo and which ones were outside (and available to be picked).\nThis exit was already being used to flag tapes as scratch as\nsoon as they were entered, (the one that STK has in their book\nand on the sample tapes does not work), so I changed it so that\nthe tapes are now flagged as in or out of the silo.  I had a\ntalk with Computer Associates and they were nice enough to\ndesignate a flag which shows in or out of the silo, you can even\nshow which silo it's in, (if you have more than 1) with this code.\nIt allows a lot of flexibility and has saved us the cost of a\nlot of operator overtime.  They also get less upset about who\nhas to pick tapes now!\n\nSYZYGYEJ  -  This program will take the output from a TMSGRW\nrun and create SLUADMIN input to eject the tapes.  This is a\nfollow on to the STK exit 6 previously outlined.  The member\nSYZYGYE$ is the JCL for this program.\n\nSYZYGYVR  -  This program will produce a VERY fast scratch listing\nand it is in a format which lends itself very nicely to multi\ncolumnizing with SAS for the operators to pick tapes from.\n\nMULTICOL -  Small SAS program from somewhere that demonstrats\nthe multi column stuff for the syzygyvr program.\n\nSYZREORG  -  Program which will greatly increase the speed of\nload/unload/reorg jobs for VSAM KSDS datasets.  The buffers are\naltered automatically by the job which tends to increase the\nspeed of the job by a great deal.  You can also do this by changing\nthe JCL, but this is easier.\n\nThe following files are also in this dataset:\n\nCATLIST - EXEC TO READ CATALOG AND CREATE A COMPLETE IDCAMS EXPORT\n          JCL TO BACKUP ALL CATALOGS IN THE SYSTEM.  ANY TIME\n          YOU CREATE A NEW CATALOG, (OR DELETE ONE) ALL YOU NEED TO\n          DO IS RUN THE SYSBLD00 JOB WHICH EXECUTES THIS EXEC AND\n          WILL BUILD A SYSCATBK JOBSTREAM. (ONE IS INCLUDED HERE\n          AS WELL)\nEX8     - OS/390 COMPATABLE EXIT 8 FOR SENDING JOB END MAX COND CODE.\n          (SEE EXIT08 STUFF BELOW)\nEX16    - OS/390 COMPATABLE EXIT 16 FOR SENDING JOB END MAX COND CODE.\n          (SEE EXIT16 STUFF BELOW)\nEXIT004 - JCL SCAN EXIT (4) TO MAKE /** CARD A COMMENT (WE HAVE SOME\n          PRETTY DUMB USERS, AND TO MAKE THE /*NOSETUP CARD A COMMENT\n          SINCE WE USED TO REQUIRE EITHER A SETUP OR A NOSETUP\n          IN THE PAST WE HAD TO AT LEAST IGNORE IT UNTIL OUR\n          USERS CHANGED ALL OF THERE JCL (IT'S BEEN OVER A YEAR NOW\n          AND THEY STILL SAY THAT THEY ARE WORKING ON IT!!!)\nEXIT010 - NOTIFY EXIT (10) TO SEND THE JOB ENDED NOTIFY MESSAGE TO\n          WYLBUR USERS WHO SUBMIT JOBS,  IT LOOKS FOR A NOTIFY\n          MESSAGE FOR A WYLBUR USER AND REFORMATS IT INTO A\n          F WYLBUR,TO XXXXXX AND THEN THE MESSAGE TEXT.\nEXITP20 - END OF JOB INPUT EXIT (20) WHICH WILL CAUSE A JOB TO BE ROUTED\n          TO ANOTHER CPU IN A MULT ACCESS SPOOL COMPLEX AUTOMATICALLY\n          WITHOUT MAKING THE USER TYPE IN THE /*ROUTE STUFF\nEXIT020 - END OF JOB INPUT EXIT (20) WHICH CHECKS THE JCT OF THE JOB\n          ALSO THE JCL TO SE IF THE GUY ASKED FOR A SPECIAL PRIORITY\n          AND IF SO HE WILL ISSUE A MESSAGE TO THE OPERATOR WHICH\n          WILL BE HIGHLIGHTED AND NOT ROLL OFF THE SCREEN WHICH\n          TELLS HIM THAT A SPECIAL PRIORITY JOB WAS SUBMITTED\nEX05... - 3   JES2 COMMAND EXITS (5) WHICH WILL DO VARIOUS THINGS\n          LIKE NOT ALLOW THE OPERATOR TO PURGE THE ENTIRE QUEUE\n          AND WILL DISPLAY JOB SETUPS WITH A COMMAND.\nEX005UD - JES2 EXIT(5) WHICH WILL GIVE YOU THE $UNDUMP COMMAND\n          THIS ALLOWS YOU TO UNDO EVERTHING THAT YOU HAVE DONE WITH\n          THE $DUMP COMMAND, SO THAT YOU DON'T HAVE TO DUMP AND RELOAD\n          EVERTHING JUST BECAUSE YOU FORGOT A PARAMETER ON YOUR\n          $DUMP COMMAND.\nJX05    - JES 2.2.0 VERSION OF THE ABOVE EX05... STUFF\nJ005$DV - JES 2.2.0 $DV COMMAND TO DISPLAY DASD VOLUMES FROM JES2\nJ005LOAD- JES 2.2.0 $LOAD COMMAND TO LOAD NEW COPIES OF EXITS\nEXIT008 - JCT WRITE EXIT FOR JES2 EXIT(8) WHICH WILL PUT THE CONDITION\n          CODE OF THE JOB STEP INTO THE JCT IF IT IS GREATER THAN\n          WHAT IS ALREADY THERE.  THIS EXIT WORKS IN CONJUNCTION\n          WITH EXIT016 AND EXIT008 MUST BE IN LPALIB.  IT IS VERY\n          SMALL SO THERE IS LITTLE WORRY ABOUT PUTTING IT THERE.\nJX08    - MVS/XA 2.2.0 VERSION OF EXIT008 ABOVE\nEXIT016 - THIS JES EXIT(16) GETS INVOKED AT JOB TERMINATION AND WILL\n          TAKE THE DATA PLACED IN THE JCT BY EXIT8 AND FORMAT A NOTIFY\n          MESSAGE FOR TSO USERS AS TO THE MAX CONDITION CODE OF THE\n          STEP AS WELL AS WHETHER IT ABENDED OR NOT WITH EITHER A\n          SYSTEM OR USER ABEND. THE USERS ARE VERY PLEASED.\nJX16    - JES 2.2.0 VERSION OF THE ABOVE EXIT016\nEXIT212 - THIS JES EXIT(212) IS A DUMPER/LOADER EXIT WHICH ALLOWS YOU\n          TO DYNAMICALLY ALLOCATE THE DUMPER/LOADER TAPE DSN INSTEAD\n          OF ALWAYS HAVEING TO HAVE A PRE-ALLOCATED TAPE DSN.  THIS HAS\n          SOLVED ALOT OF HEADACHES FOR THE OPERATIONS STAFF ... AND ME.\n          THIS REQUIRES THE PRCJ2212 USERMOD TO JES.  ALL THE MOD\n          DOES IS ADD THE $EXIT POINT INTO HASPSTAM.\nEX99 ---- PROGRAM USED BY PRCM0005 SYSMOD\nFINDASCB- PROGRAM INDEXES THROUGH ASVT AND WILL LOCATE A JOB OR\n          ADDRESS SPACE WHO'S NAME MATCHES WHAT YOU PUT IN REG1\nGETINFO - PROGRAM ORIGINALLY FROM NTL BUT HAS SOME MINOR CHANGES AND\n          ALSO HAS BEEN CHANGED TO RUN ON A MVS/SP SYSTEM INSTEAD\n          OF OR I SHOULD SAY AS WELL AS MVS/XA\nIEFACTRT  THIS IS PRETTY STANDARD STUFF EXCEP THAT IT UPDATES THE\n          JOBS OUTPUT RESOLUTION MESSAGE AREA WITH WHAT WE LIKE\n          TO CALL \"BOX SCORES\".  THIS IS SIMALAR TO WHAT IBM'S\n          FREEBEE DOES BUT PUTS IT IN A BETTER PLACE.  YOU MAY\n          WANT TO CHANGE SOME CODE SINCE WE ALSO DO A COUPLE OF\n          CALCULATIONS TO TELL THE USER APPROXIMATELY WHAT THE JOB\n          COST TO RUN.  THE CHARGE CODE IS VERY SIMPLE SO NO ONE\n          SHOULD HAVE ANY PROBLEMS.\nJES215MD- TWO MODS TO JES 2.1.5 THE FIRST IS TO HASPSSSM TO PUT\n          THE DATE ON THE INITIATOR STARTED MESSAGE $HASP373\n          THE SECOND MOD IS TO HASPCOMM IT ALLOWS THE $D'JOBNAME\n          COMMAND TO ACT AS A GENERIC JOBNAME DISPLAY\n          IE. IF YOU ENTERED $D'IMS   , YOU WOULD GET\n          A LIST OF ALL JOBS IN ALL QUEUES WHO'S PREFIX MATCHED\n          THE LETTERS \"IMS\".  OPERATORS LIKE IT A LOT.\nMCS  ---- A VERY UNIQUE SPY COMMAND FROM ONE OF THE PRC SUBSIDIARIES\n          I'M NOT SURE WHICH ONE, BUT I LIKE THE CODE\nMINIGEN - THE GOOD OLD MINIGEN, WE HAVE USED IT FOR YEARS AND\n          CONTRARY TO POPULAR BELIEF IT CAN BE USED EVEN IF YOU\n          ARE ADDING A NEW DEVICE TYPE.  THE BEST WAY TO USE THIS\n          GUY IS TO BROWSE YOUR STAGE1 OUTPUT AND FIND ALL\n          OCCURRENCES OF \" EXEC  ASMS\"  THE MOD=XXXXXXX PARAMETER\n          ON EACH ONE OF THESE GUYS SHOULD BE PUT IN THE ASSEM (\n          SECTION OF THE MINIGEN.  THIS IS A HELL OF A LOT SAFER\n          THAN A IOGEN AND THISA WAY WE NEVER LOOSE ANY USERMODS\nPANBKPRT- THIS GUY WILL TAKE A PANVALET BACKUP TAPE AND CREATE A\n          LISTING OF WHAT PROGRAMS AND VERSIONS AND SIZE AND ALL\n          IS ON THE TAPE. JUST AS IF IT WERE STILL ON DISK.\n          THIS WAY YOU DONT HAVE TO RESTORE THE WHOLE TAPE DOWN\n          JUST TO FIND SOMTHING THAT YOU DON'T REALLY KNOW THE NAME\n          OF OR EVEN GUESS AT.\nPOSTER -- DOES WHAT IT SAYS, CREATES POSTERS-BANNERS.\nPRCJ2001- JES2/SP 1.3.4 MOD TO ALLOW GENERIC $D'XXX' FOR PARTIAL\n          JOBNAMES.\nPRCJ2004- JES2/SP 1.3.4 MOD TO MAKE THE DEFAULT TSU AND STC MESSAGE\n          CLASS A FOR JOBS THAT THEY SUBMIT.  THIS ALLOWS YOU TO STILL\n          SET THE &STCMCLAS AND &TSUMCLAS TO A DELETE CLASS TO KEEP\n          FROM GETTING ALL OF THE USELESS JCL AND STILL NOT HAVE TO PUT\n          A MSGCLASS= PARM ON ALL JOBCARDS.  YOU DON'T NEED THIS IF YOU\n          HAVE TSO/E FOR TSO BUT WE DON'T HAVE THE MONEY TO THROW AWAY\n          ON THAT KIND OF PRODUCT AND WE ALSO HAVE A COUPLE OF STC'S\n          THAT SUBMIT JOBS AND THIS HAS BEEN INDIPENSIBLE.\nPRCJ2212- JES2/SP 1.3.4 MOD TO ADD $EXIT 212 TO HASPSTAM FOR DYNAMIC\n          DUMPER/LOADER DSN'S.\nPRCM0001- SET IEALIMIT TO NOT GIVE ANY EXTRA MEMORY.  IN MOST SHOPS\n          POEPLE DON'T CARE ABOUT GIVING A JOB A LITTLE EXTRA, BUT\n          OUR ACCOUNTING SYSTEM IS MEMORY INTENSIVE SO WE CAN'T\n          ALLOW JOBS TO GET ANY MORE THAN THEY ASK FOR.\nPRCM0002- THIS MOD WILL ALLOW DEFAULT TSO DYNAMIC ALLOCATION TO\n          BE SHR INSTEAD OF OLD.  THIS IS FOR NON-TSO/E SYSTEMS,\n          IF YOU HAVE TSO/E THERE IS ALREADY ANOTHER MOD ON THE CBT\n          TAPE FOR THIS SAME TYPE OF THING. BUT IT IS ALOT BIGGER.\n          I GUESS THAT'S BECAUSE YOU HAVE TO ACTUALLY PAY FOR TSO/E.\nPRCM0003- THIS MOD MUST BE APPLIED WITH THE PRCM0004 MOD WHICH IS ON\nPRCM0004  THIS SAME FILE.  THE FIRST ONE IS A DUMMY MOD SO THAT I WILL\n          BE INFORMED IF THERE IS ANY MAINTENANCE THAT EFFECTS THIS MOD\n          BEFORE ITS TOO LATE.  YOU DON'T NEED TO PUT IT ON IF YOU DON'T\n          WANT TO.  THIS MOD WILL PUT THE EXCP COUNTS ON THE IEF285I\n          MESSAGE THAT COMES OUT ON YOUR JOB LISTING IE.\n          IEF285I  C7BRIAN.VTOC.LOAD      KEPT       2123 EXCP\n          IEF285I  DATASET.NAME           KEPT          0 EXCP\nPRCM0005- MOD TO ALLOW YOU TO HAVE TSO DEFAULT ALLOCATE TO PACKS THAT\n          ARE NOT MOUNTED AS PUBLIC OR STORAGE.  IT COMES WITH A PROGRAM\n          CALLED EX99 WHICH IS THE ACTUAL PCF EXIT THAT IS USED. YOU\n          DO NOT HAVE TO HAVE PCF TO USE THIS MOD. WE DON'T HAVE IT\n          AND WE RUN FINE.  YOU CAN SET THE ATTR2 FIELD IN THE PSCB TO\n          ANY VOLUME THAT YOU WANT OR YOU CAN USE THE SETVOL PROGRAM\n          ON THIS FILE TO DO IT FOR YOU AUTOMATICALLY\nPRCM0010- THIS MOD WILL ELIMINATE THE DATASET NOT FREED; IS NOT\n          ALLOCATED MESSAGE. FROM THE TSO ALLOC COMMAND.\nPRCM0017- THIS MOD WILL ELIMINATE THE CN(00) BEING APPEND TO MESSAGES\n          FROM THE OPERATOR AND ON THE NOTIFY OF JOB ENDED STUFF.\nTALK ---- CLIST TO DO ISPF FULL SCREEN SENDS TO PEOPLE\nTALKP---- PANEL TO USE WITH THE TALK CLIST (PUT IT IN ISPPLIB CONCAT)\nULX..---- ISPF BASED VTOC ANALYSIS AND REPORTING FACILITY\nUSAGE   - TSO COMMAND TO DISPLAY SESSION COST.\nWAITPROG- RUNS AS A BATHC JOB AND WILL ACCEPT A PARM THAT HAS THE\n          NUMBER OF SECONDS THAT YOU WOULD LIKE TO WAIT AND DISPLAYS\n          IT ON THE OS CONSOLE FOR THE OPERATOR IT HIGHLIGHTS IT AND\n          WILL NOT ROLL OFF THE SCREEN.  WHEN THE TIME EXPIRES IT WILL\n          ISSUE A DOM TO DELETE THE MESSAGE AND PUT OUT A REGULAR\n          MESSAGE ABOUT REQUESTED TIME EXPIRED. THE JOBNAME IS ALSO\n          PUT IN BOTH MESSAGES.\nXJ2PTP -- THIS IS A JES 2.1.5 EXIT TO DRAIN ALL OF THE TP LINES IN\n          THE NETWORK WITH A SINGLE COMMAND $PTP. IT IS EXTREMELY\n          USEFULL EVEN IF YOU DON'T HAVE OVER 600 LINES LIKE US.\n          YOU CAN ALSO START ALL TP WITH $STP OR RESTART WITH\n          $ETP TO ACCOMPLISH A LOT OF WORK QUICKLY.\nXJ2NET -- THIS IS A JES2 EXIT13 WHICH IS REQUIRED IF YOU WANT\n          TO NOTIFY A TSO USER WHEN DATA IS RECEIVED FROM ANOTHER\n          JES NODE. IT ADDS SOME NEAT STUFF LIKE HOW MANY LINES\n          AND SUCH.\nIEFUJV -- SMF UJV EXIT TO FORCE STANDARDS FOR MVS/XA 2.2.0\nITACCTBL- TABLE USED BY THE MVS 2.2.0 VERSION OF IEFUJV FOR ACCOUNT #S\nIEFUTL  - MVS/XA 2.2.0 SMF UTL EXIT\nIEFU29  - MVS/XA 2.2.0 SMF U29 EXIT\nIEFU83  - MVS/XA 2.2.0 SMF U83 EXIT\nIGGPRE00- MVS/XA 2.2.0 DADSM IGGPRE00 EXIT.  THIS EXIT USES 2 TABLES\n          TSOTABL AND NODTABL WHICH ARE LOADED DYNAMICALLY AND CAN\n          BE CHANGED ON THE FLY.  THIS EXIT WILL ALLOW STUFF TO BE\n          ALLOCATED OR RENAMED ONLY TO THE PACKS WHICH WE DECIDE\n          SHOULD GET THE PREFIXES.  THIS EXIT IS VERY POWERFUL AND\n          IS EXTREMELY VERSATILE.  THIS EXIT REQUIRES THE  MACROS\n          CONNECT, EQUREGS, RELEASE, SETAMODE WHICH ARE ALSO\n          INCLUDED IN THIS DATASET.\nNODTAB22- MVS/XA 2.2.0 VERSION OF THE NODETABLE FOR THE IGGPRE00\n          EXIT.  THIS ONE GOES IN LINKLIST.\nTSOTAB22- MVS/XA 2.2.0 VERSION OF THE TSO UID TABLE FOR THE IGGPRE00\n          EXIT.  THIS ONE GOES IN LINKLIST.\nGood Luck\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$ABSTOLD": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x159\\x00\\xd9\\x00\\xda\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T15:39:00", "lines": 217, "newlines": 218, "modlines": 0, "user": "SBGOLOB"}, "text": "SEE THE FILE $ABSTNEW FOR THE NEWEST ABSTRACT FOR THIS FILE\n\nTHIS FILE DESCRIBES MEMBERS THAT HAVE CHANGED BEFORE 5/6/99\n\nTHIS FILE CONTAINS MODS PROGRAMS AND EXITS FOR MVS/SP 1.3\nMVS/XA 2.1.5, MVS/XA 2.2.0 AND MVS/ESA 3.1  MOST OF THE\nMEMBERS WHICH WERE WRITTEN TO WORK ON XA 2.2.0 ALREADY HAVE THE\nNECESSARY CODE TO ALSO WORK ON MVS/ESA AND OLDER VERSIONS OF XA.\n\nMY NEW ADDRESS AND PHONE NUMBER ARE\n      BRIAN WESTERMAN\n      SYZYGY INCORPORATED\n      1381 KILDAIRE FARM ROAD\n      MAIL STOP 326\n      CARY,  NC  27511-5525\n\n      (800) 767-2244\n\nMY NEW SYSTEM IS AT OS/390 LEVEL 2.4.0 WITH JES2\nWE NOW HAVE 2 9672'S AND WE WILL BE INSTALLING THE NEXT OS/390 BETA\nVERY SOON.  I WILL INCREASE MY EFFORT TO ADD PRODUCTS HERE AND\nAS THEY ARE TESTED ON 390 I WILL UPDATE THE PROGRAMS TO REFLECT THAT.\n\nSOME OF THE MODS AND PROGRAMS ARE AT MVS/SP 1.3.4 LEVEL, THE ONES\nTHAT HAVE BEEN UPGRADED TO XA 2.2.0 ARE REVFLECTED IN THE TEXT.\nPLEASE NOTE THAT SOME OF THE MVS/SP MODULES AND MODS WILL WORK\nALSO ON MVS/XA. MANY ARE ALREADY OS/390 COMPATABLE, (EVEN IF THEY\nDON'T SAY IT YET)\n\nTHE FOLLOWING ARE MODIFICATIONS AND PROGRAMS WRITTEN HERE AT SYZYGY\nOR BRIPER, OR PRC CORP. BEFORE I LEFT THERE TO COME HERE,\nEITHER BY MYSELF OR STOLEN FROM A FRIEND AND MODIFIED TO WORK HERE.\nSYSMODS START WITH FORMAT PRCM FOR MVS MODS AND PRCJ FOR JES2 MODS\nOUR CURRENT SYSTEM IS MVS/SP 1.3.3 AT 8603 AND JES2/SP 1.3.4 AT\n   (THATS THE OLD SYSTEM)\n8601. ALL OF THE STUFF ON THIS FILE WORKS VERY WELL AND IF THERE ARE\nANY QUESTIONS AT ALL, PLEASE FEEL FREE TO CALL ME AT.\n      BRIAN WESTERMAN\n      SEE ADDRESS ABOVE     .\n\nI HAVE A LARGE NUMBER OF PROGRAMS AND MODS AND WILL SEND THEM\nPERIODICALLY AS I CLEAN UP SOME OF MY CODE.  I AM NOT VERY WELL\nKNOWN FOR DOCUMENTATION AND I AM ATTEMPTING TO PUT AS MUCH IN THE\nCODE AS I CAN BEFORE I SUBMIT IT.\n\nCATLIST - EXEC TO READ CATALOG AND CREATE A COMPLETE IDCAMS EXPORT\n          JCL TO BACKUP ALL CATALOGS IN THE SYSTEM.  ANY TIME\n          YOU CREATE A NEW CATALOG, (OR DELETE ONE) ALL YOU NEED TO\n          DO IS RUN THE SYSBLD00 JOB WHICH EXECUTES THIS EXEC AND\n          WILL BUILD A SYSCATBK JOBSTREAM. (ONE IS INCLUDED HERE\n          AS WELL)\nEX8     - OS/390 COMPATABLE EXIT 8 FOR SENDING JOB END MAX COND CODE.\n          (SEE EXIT08 STUFF BELOW)\nEX16    - OS/390 COMPATABLE EXIT 16 FOR SENDING JOB END MAX COND CODE.\n          (SEE EXIT16 STUFF BELOW)\nEXIT004 - JCL SCAN EXIT (4) TO MAKE /** CARD A COMMENT (WE HAVE SOME\n          PRETTY DUMB USERS, AND TO MAKE THE /*NOSETUP CARD A COMMENT\n          SINCE WE USED TO REQUIRE EITHER A SETUP OR A NOSETUP\n          IN THE PAST WE HAD TO AT LEAST IGNORE IT UNTIL OUR\n          USERS CHANGED ALL OF THERE JCL (IT'S BEEN OVER A YEAR NOW\n          AND THEY STILL SAY THAT THEY ARE WORKING ON IT!!!)\nEXIT010 - NOTIFY EXIT (10) TO SEND THE JOB ENDED NOTIFY MESSAGE TO\n          WYLBUR USERS WHO SUBMIT JOBS,  IT LOOKS FOR A NOTIFY\n          MESSAGE FOR A WYLBUR USER AND REFORMATS IT INTO A\n          F WYLBUR,TO XXXXXX AND THEN THE MESSAGE TEXT.\nEXITP20 - END OF JOB INPUT EXIT (20) WHICH WILL CAUSE A JOB TO BE ROUTED\n          TO ANOTHER CPU IN A MULT ACCESS SPOOL COMPLEX AUTOMATICALLY\n          WITHOUT MAKING THE USER TYPE IN THE /*ROUTE STUFF\nEXIT020 - END OF JOB INPUT EXIT (20) WHICH CHECKS THE JCT OF THE JOB\n          ALSO THE JCL TO SE IF THE GUY ASKED FOR A SPECIAL PRIORITY\n          AND IF SO HE WILL ISSUE A MESSAGE TO THE OPERATOR WHICH\n          WILL BE HIGHLIGHTED AND NOT ROLL OFF THE SCREEN WHICH\n          TELLS HIM THAT A SPECIAL PRIORITY JOB WAS SUBMITTED\nEX05... - 3   JES2 COMMAND EXITS (5) WHICH WILL DO VARIOUS THINGS\n          LIKE NOT ALLOW THE OPERATOR TO PURGE THE ENTIRE QUEUE\n          AND WILL DISPLAY JOB SETUPS WITH A COMMAND.\nEX005UD - JES2 EXIT(5) WHICH WILL GIVE YOU THE $UNDUMP COMMAND\n          THIS ALLOWS YOU TO UNDO EVERTHING THAT YOU HAVE DONE WITH\n          THE $DUMP COMMAND, SO THAT YOU DON'T HAVE TO DUMP AND RELOAD\n          EVERTHING JUST BECAUSE YOU FORGOT A PARAMETER ON YOUR\n          $DUMP COMMAND.\nJX05    - JES 2.2.0 VERSION OF THE ABOVE EX05... STUFF\nJ005$DV - JES 2.2.0 $DV COMMAND TO DISPLAY DASD VOLUMES FROM JES2\nJ005LOAD- JES 2.2.0 $LOAD COMMAND TO LOAD NEW COPIES OF EXITS\nEXIT008 - JCT WRITE EXIT FOR JES2 EXIT(8) WHICH WILL PUT THE CONDITION\n          CODE OF THE JOB STEP INTO THE JCT IF IT IS GREATER THAN\n          WHAT IS ALREADY THERE.  THIS EXIT WORKS IN CONJUNCTION\n          WITH EXIT016 AND EXIT008 MUST BE IN LPALIB.  IT IS VERY\n          SMALL SO THERE IS LITTLE WORRY ABOUT PUTTING IT THERE.\nJX08    - MVS/XA 2.2.0 VERSION OF EXIT008 ABOVE\nEXIT016 - THIS JES EXIT(16) GETS INVOKED AT JOB TERMINATION AND WILL\n          TAKE THE DATA PLACED IN THE JCT BY EXIT8 AND FORMAT A NOTIFY\n          MESSAGE FOR TSO USERS AS TO THE MAX CONDITION CODE OF THE\n          STEP AS WELL AS WHETHER IT ABENDED OR NOT WITH EITHER A\n          SYSTEM OR USER ABEND. THE USERS ARE VERY PLEASED.\nJX16    - JES 2.2.0 VERSION OF THE ABOVE EXIT016\nEXIT212 - THIS JES EXIT(212) IS A DUMPER/LOADER EXIT WHICH ALLOWS YOU\n          TO DYNAMICALLY ALLOCATE THE DUMPER/LOADER TAPE DSN INSTEAD\n          OF ALWAYS HAVEING TO HAVE A PRE-ALLOCATED TAPE DSN.  THIS HAS\n          SOLVED ALOT OF HEADACHES FOR THE OPERATIONS STAFF ... AND ME.\n          THIS REQUIRES THE PRCJ2212 USERMOD TO JES.  ALL THE MOD\n          DOES IS ADD THE $EXIT POINT INTO HASPSTAM.\nEX99 ---- PROGRAM USED BY PRCM0005 SYSMOD\nFINDASCB- PROGRAM INDEXES THROUGH ASVT AND WILL LOCATE A JOB OR\n          ADDRESS SPACE WHO'S NAME MATCHES WHAT YOU PUT IN REG1\nGETINFO - PROGRAM ORIGINALLY FROM NTL BUT HAS SOME MINOR CHANGES AND\n          ALSO HAS BEEN CHANGED TO RUN ON A MVS/SP SYSTEM INSTEAD\n          OF OR I SHOULD SAY AS WELL AS MVS/XA\nIEFACTRT  THIS IS PRETTY STANDARD STUFF EXCEP THAT IT UPDATES THE\n          JOBS OUTPUT RESOLUTION MESSAGE AREA WITH WHAT WE LIKE\n          TO CALL \"BOX SCORES\".  THIS IS SIMALAR TO WHAT IBM'S\n          FREEBEE DOES BUT PUTS IT IN A BETTER PLACE.  YOU MAY\n          WANT TO CHANGE SOME CODE SINCE WE ALSO DO A COUPLE OF\n          CALCULATIONS TO TELL THE USER APPROXIMATELY WHAT THE JOB\n          COST TO RUN.  THE CHARGE CODE IS VERY SIMPLE SO NO ONE\n          SHOULD HAVE ANY PROBLEMS.\nJES215MD- TWO MODS TO JES 2.1.5 THE FIRST IS TO HASPSSSM TO PUT\n          THE DATE ON THE INITIATOR STARTED MESSAGE $HASP373\n          THE SECOND MOD IS TO HASPCOMM IT ALLOWS THE $D'JOBNAME\n          COMMAND TO ACT AS A GENERIC JOBNAME DISPLAY\n          IE. IF YOU ENTERED $D'IMS   , YOU WOULD GET\n          A LIST OF ALL JOBS IN ALL QUEUES WHO'S PREFIX MATCHED\n          THE LETTERS \"IMS\".  OPERATORS LIKE IT A LOT.\nMCS  ---- A VERY UNIQUE SPY COMMAND FROM ONE OF THE PRC SUBSIDIARIES\n          I'M NOT SURE WHICH ONE, BUT I LIKE THE CODE\nMINIGEN - THE GOOD OLD MINIGEN, WE HAVE USED IT FOR YEARS AND\n          CONTRARY TO POPULAR BELIEF IT CAN BE USED EVEN IF YOU\n          ARE ADDING A NEW DEVICE TYPE.  THE BEST WAY TO USE THIS\n          GUY IS TO BROWSE YOUR STAGE1 OUTPUT AND FIND ALL\n          OCCURRENCES OF \" EXEC  ASMS\"  THE MOD=XXXXXXX PARAMETER\n          ON EACH ONE OF THESE GUYS SHOULD BE PUT IN THE ASSEM (\n          SECTION OF THE MINIGEN.  THIS IS A HELL OF A LOT SAFER\n          THAN A IOGEN AND THISA WAY WE NEVER LOOSE ANY USERMODS\nPANBKPRT- THIS GUY WILL TAKE A PANVALET BACKUP TAPE AND CREATE A\n          LISTING OF WHAT PROGRAMS AND VERSIONS AND SIZE AND ALL\n          IS ON THE TAPE. JUST AS IF IT WERE STILL ON DISK.\n          THIS WAY YOU DONT HAVE TO RESTORE THE WHOLE TAPE DOWN\n          JUST TO FIND SOMTHING THAT YOU DON'T REALLY KNOW THE NAME\n          OF OR EVEN GUESS AT.\nPOSTER -- DOES WHAT IT SAYS, CREATES POSTERS-BANNERS.\nPRCJ2001- JES2/SP 1.3.4 MOD TO ALLOW GENERIC $D'XXX' FOR PARTIAL\n          JOBNAMES.\nPRCJ2004- JES2/SP 1.3.4 MOD TO MAKE THE DEFAULT TSU AND STC MESSAGE\n          CLASS A FOR JOBS THAT THEY SUBMIT.  THIS ALLOWS YOU TO STILL\n          SET THE &STCMCLAS AND &TSUMCLAS TO A DELETE CLASS TO KEEP\n          FROM GETTING ALL OF THE USELESS JCL AND STILL NOT HAVE TO PUT\n          A MSGCLASS= PARM ON ALL JOBCARDS.  YOU DON'T NEED THIS IF YOU\n          HAVE TSO/E FOR TSO BUT WE DON'T HAVE THE MONEY TO THROW AWAY\n          ON THAT KIND OF PRODUCT AND WE ALSO HAVE A COUPLE OF STC'S\n          THAT SUBMIT JOBS AND THIS HAS BEEN INDIPENSIBLE.\nPRCJ2212- JES2/SP 1.3.4 MOD TO ADD $EXIT 212 TO HASPSTAM FOR DYNAMIC\n          DUMPER/LOADER DSN'S.\nPRCM0001- SET IEALIMIT TO NOT GIVE ANY EXTRA MEMORY.  IN MOST SHOPS\n          POEPLE DON'T CARE ABOUT GIVING A JOB A LITTLE EXTRA, BUT\n          OUR ACCOUNTING SYSTEM IS MEMORY INTENSIVE SO WE CAN'T\n          ALLOW JOBS TO GET ANY MORE THAN THEY ASK FOR.\nPRCM0002- THIS MOD WILL ALLOW DEFAULT TSO DYNAMIC ALLOCATION TO\n          BE SHR INSTEAD OF OLD.  THIS IS FOR NON-TSO/E SYSTEMS,\n          IF YOU HAVE TSO/E THERE IS ALREADY ANOTHER MOD ON THE CBT\n          TAPE FOR THIS SAME TYPE OF THING. BUT IT IS ALOT BIGGER.\n          I GUESS THAT'S BECAUSE YOU HAVE TO ACTUALLY PAY FOR TSO/E.\nPRCM0003- THIS MOD MUST BE APPLIED WITH THE PRCM0004 MOD WHICH IS ON\nPRCM0004  THIS SAME FILE.  THE FIRST ONE IS A DUMMY MOD SO THAT I WILL\n          BE INFORMED IF THERE IS ANY MAINTENANCE THAT EFFECTS THIS MOD\n          BEFORE ITS TOO LATE.  YOU DON'T NEED TO PUT IT ON IF YOU DON'T\n          WANT TO.  THIS MOD WILL PUT THE EXCP COUNTS ON THE IEF285I\n          MESSAGE THAT COMES OUT ON YOUR JOB LISTING IE.\n          IEF285I  C7BRIAN.VTOC.LOAD      KEPT       2123 EXCP\n          IEF285I  DATASET.NAME           KEPT          0 EXCP\nPRCM0005- MOD TO ALLOW YOU TO HAVE TSO DEFAULT ALLOCATE TO PACKS THAT\n          ARE NOT MOUNTED AS PUBLIC OR STORAGE.  IT COMES WITH A PROGRAM\n          CALLED EX99 WHICH IS THE ACTUAL PCF EXIT THAT IS USED. YOU\n          DO NOT HAVE TO HAVE PCF TO USE THIS MOD. WE DON'T HAVE IT\n          AND WE RUN FINE.  YOU CAN SET THE ATTR2 FIELD IN THE PSCB TO\n          ANY VOLUME THAT YOU WANT OR YOU CAN USE THE SETVOL PROGRAM\n          ON THIS FILE TO DO IT FOR YOU AUTOMATICALLY\nPRCM0010- THIS MOD WILL ELIMINATE THE DATASET NOT FREED; IS NOT\n          ALLOCATED MESSAGE. FROM THE TSO ALLOC COMMAND.\nPRCM0017- THIS MOD WILL ELIMINATE THE CN(00) BEING APPEND TO MESSAGES\n          FROM THE OPERATOR AND ON THE NOTIFY OF JOB ENDED STUFF.\nTALK ---- CLIST TO DO ISPF FULL SCREEN SENDS TO PEOPLE\nTALKP---- PANEL TO USE WITH THE TALK CLIST (PUT IT IN ISPPLIB CONCAT)\nULX..---- ISPF BASED VTOC ANALYSIS AND REPORTING FACILITY\nUSAGE   - TSO COMMAND TO DISPLAY SESSION COST.\nWAITPROG- RUNS AS A BATHC JOB AND WILL ACCEPT A PARM THAT HAS THE\n          NUMBER OF SECONDS THAT YOU WOULD LIKE TO WAIT AND DISPLAYS\n          IT ON THE OS CONSOLE FOR THE OPERATOR IT HIGHLIGHTS IT AND\n          WILL NOT ROLL OFF THE SCREEN.  WHEN THE TIME EXPIRES IT WILL\n          ISSUE A DOM TO DELETE THE MESSAGE AND PUT OUT A REGULAR\n          MESSAGE ABOUT REQUESTED TIME EXPIRED. THE JOBNAME IS ALSO\n          PUT IN BOTH MESSAGES.\nXJ2PTP -- THIS IS A JES 2.1.5 EXIT TO DRAIN ALL OF THE TP LINES IN\n          THE NETWORK WITH A SINGLE COMMAND $PTP. IT IS EXTREMELY\n          USEFULL EVEN IF YOU DON'T HAVE OVER 600 LINES LIKE US.\n          YOU CAN ALSO START ALL TP WITH $STP OR RESTART WITH\n          $ETP TO ACCOMPLISH A LOT OF WORK QUICKLY.\nXJ2NET -- THIS IS A JES2 EXIT13 WHICH IS REQUIRED IF YOU WANT\n          TO NOTIFY A TSO USER WHEN DATA IS RECEIVED FROM ANOTHER\n          JES NODE. IT ADDS SOME NEAT STUFF LIKE HOW MANY LINES\n          AND SUCH.\nIEFUJV -- SMF UJV EXIT TO FORCE STANDARDS FOR MVS/XA 2.2.0\nITACCTBL- TABLE USED BY THE MVS 2.2.0 VERSION OF IEFUJV FOR ACCOUNT #S\nIEFUTL  - MVS/XA 2.2.0 SMF UTL EXIT\nIEFU29  - MVS/XA 2.2.0 SMF U29 EXIT\nIEFU83  - MVS/XA 2.2.0 SMF U83 EXIT\nIGGPRE00- MVS/XA 2.2.0 DADSM IGGPRE00 EXIT.  THIS EXIT USES 2 TABLES\n          TSOTABL AND NODTABL WHICH ARE LOADED DYNAMICALLY AND CAN\n          BE CHANGED ON THE FLY.  THIS EXIT WILL ALLOW STUFF TO BE\n          ALLOCATED OR RENAMED ONLY TO THE PACKS WHICH WE DECIDE\n          SHOULD GET THE PREFIXES.  THIS EXIT IS VERY POWERFUL AND\n          IS EXTREMELY VERSATILE.  THIS EXIT REQUIRES THE  MACROS\n          CONNECT, EQUREGS, RELEASE, SETAMODE WHICH ARE ALSO\n          INCLUDED IN THIS DATASET.\nNODTAB22- MVS/XA 2.2.0 VERSION OF THE NODETABLE FOR THE IGGPRE00\n          EXIT.  THIS ONE GOES IN LINKLIST.\nTSOTAB22- MVS/XA 2.2.0 VERSION OF THE TSO UID TABLE FOR THE IGGPRE00\n          EXIT.  THIS ONE GOES IN LINKLIST.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE088": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t\\x02\\x7f\\x01\\t\\x02\\x7f\\x00R\\x01\\xc4\\x01\\xc4\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-01-27T00:00:00", "modifydate": "2009-01-27T00:52:00", "lines": 452, "newlines": 452, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 088 is from Brian Westerman of Syzygy Inc. of Cary,       *   FILE 088\n//*           North Carolina and Pismo Beach, California.           *   FILE 088\n//*           The following is a list of what is in the file.       *   FILE 088\n//*           This file is in IEBUPDTE SYSIN format.                *   FILE 088\n//*                                                                 *   FILE 088\n//*     My new address and phone number are                         *   FILE 088\n//*                                                                 *   FILE 088\n//*           Brian Westerman                                       *   FILE 088\n//*           Syzygy Incorporated                                   *   FILE 088\n//*           Director of Research and Development                  *   FILE 088\n//*           897 Oak Park Blvd #500                                *   FILE 088\n//*           Pismo Beach, CA  93449                                *   FILE 088\n//*                                                                 *   FILE 088\n//*           (800) 767-2244                                        *   FILE 088\n//*           (800) 366-4082 - fax                                  *   FILE 088\n//*                                                                 *   FILE 088\n//*     email:    Brian_Westerman@SyzygyInc.com                     *   FILE 088\n//*                                                                 *   FILE 088\n//*   This is the File abstract as of 02/20/00.                     *   FILE 088\n//*                                                                 *   FILE 088\n//*   Unless otherwise noted, all programs support OS/390 V2.8      *   FILE 088\n//*   and below (within reason)                                     *   FILE 088\n//*                                                                 *   FILE 088\n//*   Current Operating Systems at Syzygy (we support these         *   FILE 088\n//*   for customer testing)                                         *   FILE 088\n//*                                                                 *   FILE 088\n//*               MVS 3.8E                                          *   FILE 088\n//*               MVS/SP 1.3.6                                      *   FILE 088\n//*               MVS/XA 2.2.3                                      *   FILE 088\n//*               MVS/ESA 3.1                                       *   FILE 088\n//*               MVS/ESA 4.3                                       *   FILE 088\n//*               MVS/ESA 5.1                                       *   FILE 088\n//*               OS/390 1.3                                        *   FILE 088\n//*               OS/390 2.4                                        *   FILE 088\n//*               OS/390 2.5                                        *   FILE 088\n//*               OS/390 2.7                                        *   FILE 088\n//*               OS/390 2.8                                        *   FILE 088\n//*               OS/390 2.9  --- testing                           *   FILE 088\n//*                                                                 *   FILE 088\n//*   We also have various releases of VM, VM/ESA and DOS/VSE       *   FILE 088\n//*   but they don't apply to this file.                            *   FILE 088\n//*                                                                 *   FILE 088\n//*   The following Items have been added as of 2/20/00.            *   FILE 088\n//*                                                                 *   FILE 088\n//*   AUTO  -  Automatic command and job scheduler.  This code      *   FILE 088\n//*            was originaly on the CBT tape many years ago, but    *   FILE 088\n//*            stopped working when MVS/ESA V5 came out because     *   FILE 088\n//*            of some new ways of doing things with that version   *   FILE 088\n//*            of MVS.  This program allows you to schedule jobs    *   FILE 088\n//*            or commands to run at any time of day, any day of    *   FILE 088\n//*            week any month of (well you get the picture).  It    *   FILE 088\n//*            runs as a started task (time=1440) and you can use   *   FILE 088\n//*            it to automatically schedule anything.  You can      *   FILE 088\n//*            also fire off anything in it's files (by time or     *   FILE 088\n//*            jobname) at any time.  There are 2 datasets that     *   FILE 088\n//*            you will need to create, in the code they are        *   FILE 088\n//*            SYZYGY.AUTO.COMMANDS and SYZYGY.AUTO.JOBS, (you      *   FILE 088\n//*            should probably rename those) and the directions     *   FILE 088\n//*            are easy to follow and are located in the first      *   FILE 088\n//*            few hundred lines of hte code. We have used this     *   FILE 088\n//*            as our ONLY scheduling system for years, and when    *   FILE 088\n//*            we go to customer sites for contracts, we normally   *   FILE 088\n//*            set it up for our stuff and the customer typically   *   FILE 088\n//*            moves over to using it before we leave.  It's very   *   FILE 088\n//*            easy to use and uses no resources.  You can give     *   FILE 088\n//*            it a very high priority, (and probably should), we   *   FILE 088\n//*            have thousands of jobs and commands scheduled with   *   FILE 088\n//*            this guy every day, and it typically uses less       *   FILE 088\n//*            than 1 minute (between 25 and 45 sec) of CPU time    *   FILE 088\n//*            per month, (We IPL once per month wheather we need   *   FILE 088\n//*            to or not). You can concatonate command and/or job   *   FILE 088\n//*            libraries as needed so that you can have             *   FILE 088\n//*            production and test jobs.  You can run as many       *   FILE 088\n//*            copies of this little address space as you want      *   FILE 088\n//*            for different purposes (test and production), but    *   FILE 088\n//*            don't forget to use different command libraries      *   FILE 088\n//*            because you will end up doing everything multiple    *   FILE 088\n//*            times if you don't remember.                         *   FILE 088\n//*                                                                 *   FILE 088\n//*   COMMANDZ  -  This program was originally copied from          *   FILE 088\n//*           the CBT tape and was originally written by John V.    *   FILE 088\n//*           Hooper to execute a stack of commands to automate     *   FILE 088\n//*           processing.  I have added a slew of code to this      *   FILE 088\n//*           program so that now you can use it for scheduling     *   FILE 088\n//*           and also I have included IF/Then logic parameters.    *   FILE 088\n//*           The added code allows the following functions:        *   FILE 088\n//*                                                                 *   FILE 088\n//*           (A new copy has been supplied by Brian.  Please       *   FILE 088\n//*            see member COMMAND@.)                                *   FILE 088\n//*                                                                 *   FILE 088\n//*           IFSTARTED JOBNAME - THIS GIVES THE ABILITY TO         *   FILE 088\n//*                EXECUTE COMMANDS WHICH FOLLOW THIS COMMAND       *   FILE 088\n//*                ONLY IF THE SPECIFIED JOBNAME IS ACTIVE.  THE    *   FILE 088\n//*                ENDIF COMMAND ENDS THE IF NEST OF COMMANDS       *   FILE 088\n//*                                                                 *   FILE 088\n//*           IFSTOPPED JOBNAME - THIS GIVES THE ABILITY TO         *   FILE 088\n//*                EXECUTE COMMANDS WHICH FOLLOW THIS COMMAND       *   FILE 088\n//*                ONLY IF THE SPECIFIED JOBNAME IS NOT ACTIVE.     *   FILE 088\n//*                THE ENDIF COMMAND ENDS THE IF NEST OF COMMANDS   *   FILE 088\n//*                                                                 *   FILE 088\n//*           WTO=TEXT  - ALLOWS YOU TO ISSUE WTOS OF ANYTHING      *   FILE 088\n//*                YOU WANT TO SAY, UP TO 72 CHARACTERS THE         *   FILE 088\n//*                FORMAT IS WTO=TEXT YOU WANT TO SAY               *   FILE 088\n//*                                                                 *   FILE 088\n//*           STOPCODE=NNNN -  ALLOWS YOU TO END PROCESSING         *   FILE 088\n//*                AND OPTIONALLY SET A CONDITION CODE OF UP TO     *   FILE 088\n//*                4 NUMERIC DIGITS.                                *   FILE 088\n//*                THE FORMAT IS STOPCODE OR STOPCODE=NNNN WHERE    *   FILE 088\n//*                NNNN IS FROM 1 TO 4 DIGITS, IF YOU SPECIFY MORE  *   FILE 088\n//*                THAN 4 DIGITS, THE NUMBERS AFTER THE 4TH WILL    *   FILE 088\n//*                BE IGNORED.                                      *   FILE 088\n//*                                                                 *   FILE 088\n//*   SHUTDOWN  -  Sample command file which shows how to use       *   FILE 088\n//*           the new featurs of COMMANDZ to control the            *   FILE 088\n//*           shutdown of the system.                               *   FILE 088\n//*                                                                 *   FILE 088\n//*   NOKEEP  -   This is an MPF exit which will COMPLETELY         *   FILE 088\n//*           suppress messages from everywhere so you need to be   *   FILE 088\n//*           careful, if you have messages that you have           *   FILE 088\n//*           successfully kept from going to to console but        *   FILE 088\n//*           still go to syslog then this is what you need.  We    *   FILE 088\n//*           have a large phantom network and therefore we used    *   FILE 088\n//*           to get over 1 million lines from VTAM/TCP about the   *   FILE 088\n//*           nodes that were not up.  We used this little exit     *   FILE 088\n//*           to keep from sending those to syslog and we have      *   FILE 088\n//*           saved ourseleves a lot of time and it make looking    *   FILE 088\n//*           for problems easier because you don't have to         *   FILE 088\n//*           search around the useless messages in syslog.         *   FILE 088\n//*                                                                 *   FILE 088\n//*   REDMSG  -  This program was also originally from the CBT      *   FILE 088\n//*           Tape, and was changed somewhat. It allows you to      *   FILE 088\n//*           display a message on the console if the preceding     *   FILE 088\n//*           step had a non-zero return code.                      *   FILE 088\n//*                                                                 *   FILE 088\n//*   SLSUX06 -  Storage Tek Silo Exit 6.  This code has also been  *   FILE 088\n//*           given to STK as of 1/99 and will be distributed by    *   FILE 088\n//*           them, but since I wrote it, I wanted to put it here   *   FILE 088\n//*           as well.  This exit gets invoked on cartridge         *   FILE 088\n//*           insert/eject processing.  We had a problem whereby    *   FILE 088\n//*           when the operators printed the CA-1 scratch pick      *   FILE 088\n//*           list, they didn't know which tapes were already in    *   FILE 088\n//*           the silo and which ones were outside (and available   *   FILE 088\n//*           to be picked).  This exit was already being used to   *   FILE 088\n//*           flag tapes as scratch as soon as they were entered,   *   FILE 088\n//*           (the one that STK has in their book and on the        *   FILE 088\n//*           sample tapes does not work), so I changed it so that  *   FILE 088\n//*           the tapes are now flagged as in or out of the silo.   *   FILE 088\n//*           I had a talk with Computer Associates and they were   *   FILE 088\n//*           nice enough to designate a flag which shows in or     *   FILE 088\n//*           out of the silo, you can even show which silo it's    *   FILE 088\n//*           in, (if you have more than 1) with this code.  It     *   FILE 088\n//*           allows a lot of flexibility and has saved us the      *   FILE 088\n//*           cost of a lot of operator overtime.  They also get    *   FILE 088\n//*           less upset about who has to pick tapes now!           *   FILE 088\n//*                                                                 *   FILE 088\n//*   SYZYGYEJ  -  This program will take the output from a         *   FILE 088\n//*           TMSGRW run and create SLUADMIN input to eject the     *   FILE 088\n//*           tapes.  This is a follow on to the STK exit 6         *   FILE 088\n//*           previously outlined.  The member SYZYGYE$ is the      *   FILE 088\n//*           JCL for this program.                                 *   FILE 088\n//*                                                                 *   FILE 088\n//*   SYZYGYVR  -  This program will produce a VERY fast scratch    *   FILE 088\n//*           listing and it is in a format which lends itself      *   FILE 088\n//*           very nicely to multi columnizing with SAS for the     *   FILE 088\n//*           operators to pick tapes from.                         *   FILE 088\n//*                                                                 *   FILE 088\n//*   MULTICOL -  Small SAS program from somewhere that             *   FILE 088\n//*           demonstrates the multi column stuff for the           *   FILE 088\n//*           SYZYGYVR program.                                     *   FILE 088\n//*                                                                 *   FILE 088\n//*   SYZREORG  -  Program which will greatly increase the speed    *   FILE 088\n//*           of load/unload/reorg jobs for VSAM KSDS datasets.     *   FILE 088\n//*           The buffers are altered automatically by the job      *   FILE 088\n//*           which tends to increase the speed of the job by a     *   FILE 088\n//*           great deal.  You can also do this by changing the     *   FILE 088\n//*           JCL, but this is easier.                              *   FILE 088\n//*                                                                 *   FILE 088\n//*   The following files are also in this dataset:                 *   FILE 088\n//*                                                                 *   FILE 088\n//*     CATLIST - EXEC TO READ CATALOG AND CREATE A COMPLETE        *   FILE 088\n//*               IDCAMS EXPORT JCL TO BACKUP ALL CATALOGS IN       *   FILE 088\n//*               THE SYSTEM.  ANY TIME YOU CREATE A NEW            *   FILE 088\n//*               CATALOG, (OR DELETE ONE) ALL YOU NEED TO DO       *   FILE 088\n//*               IS RUN THE SYSBLD00 JOB WHICH EXECUTES THIS       *   FILE 088\n//*               EXEC AND WILL BUILD A SYSCATBK JOBSTREAM.         *   FILE 088\n//*               (ONE IS INCLUDED HERE AS WELL)                    *   FILE 088\n//*                                                                 *   FILE 088\n//*     EX8     - OS/390 COMPATABLE EXIT 8 FOR SENDING JOB END      *   FILE 088\n//*               MAX COND CODE.  (SEE EXIT08 STUFF BELOW)          *   FILE 088\n//*                                                                 *   FILE 088\n//*     EX16    - OS/390 COMPATABLE EXIT 16 FOR SENDING JOB END     *   FILE 088\n//*               MAX COND CODE.  (SEE EXIT16 STUFF BELOW)          *   FILE 088\n//*                                                                 *   FILE 088\n//*     EXIT004 - JCL SCAN EXIT (4) TO MAKE /** CARD A COMMENT      *   FILE 088\n//*               (WE HAVE SOME PRETTY DUMB USERS, AND TO MAKE      *   FILE 088\n//*               THE /*NOSETUP CARD A COMMENT SINCE WE USED TO     *   FILE 088\n//*               REQUIRE EITHER A SETUP OR A NOSETUP IN THE        *   FILE 088\n//*               PAST WE HAD TO AT LEAST IGNORE IT UNTIL OUR       *   FILE 088\n//*               USERS CHANGED ALL OF THERE JCL (IT'S BEEN OVER    *   FILE 088\n//*               A YEAR NOW AND THEY STILL SAY THAT THEY ARE       *   FILE 088\n//*               WORKING ON IT!!!)                                 *   FILE 088\n//*                                                                 *   FILE 088\n//*     EXIT010 - NOTIFY EXIT (10) TO SEND THE JOB ENDED NOTIFY     *   FILE 088\n//*               MESSAGE TO WYLBUR USERS WHO SUBMIT JOBS,  IT      *   FILE 088\n//*               LOOKS FOR A NOTIFY MESSAGE FOR A WYLBUR USER      *   FILE 088\n//*               AND REFORMATS IT INTO A F WYLBUR,TO XXXXXX        *   FILE 088\n//*               AND THEN THE MESSAGE TEXT.                        *   FILE 088\n//*                                                                 *   FILE 088\n//*     EXITP20 - END OF JOB INPUT EXIT (20) WHICH WILL CAUSE A     *   FILE 088\n//*               JOB TO BE ROUTED TO ANOTHER CPU IN A MULTI        *   FILE 088\n//*               ACCESS SPOOL COMPLEX AUTOMATICALLY WITHOUT        *   FILE 088\n//*               MAKING THE USER TYPE IN THE /*ROUTE STUFF         *   FILE 088\n//*                                                                 *   FILE 088\n//*     EXIT020 - END OF JOB INPUT EXIT (20) WHICH CHECKS THE       *   FILE 088\n//*               JCT OF THE JOB ALSO THE JCL TO SE IF THE GUY      *   FILE 088\n//*               ASKED FOR A SPECIAL PRIORITY AND IF SO HE WILL    *   FILE 088\n//*               ISSUE A MESSAGE TO THE OPERATOR WHICH WILL BE     *   FILE 088\n//*               HIGHLIGHTED AND NOT ROLL OFF THE SCREEN WHICH     *   FILE 088\n//*               TELLS HIM THAT A SPECIAL PRIORITY JOB WAS         *   FILE 088\n//*               SUBMITTED.                                        *   FILE 088\n//*                                                                 *   FILE 088\n//*     EX05... - 3   JES2 COMMAND EXITS (5) WHICH WILL DO          *   FILE 088\n//*               VARIOUS THINGS LIKE NOT ALLOW THE OPERATOR TO     *   FILE 088\n//*               PURGE THE ENTIRE QUEUE AND WILL DISPLAY JOB       *   FILE 088\n//*               SETUPS WITH A COMMAND.                            *   FILE 088\n//*                                                                 *   FILE 088\n//*     EX005UD - JES2 EXIT(5) WHICH WILL GIVE YOU THE $UNDUMP      *   FILE 088\n//*               COMMAND THIS ALLOWS YOU TO UNDO EVERTHING         *   FILE 088\n//*               THAT YOU HAVE DONE WITH THE $DUMP COMMAND, SO     *   FILE 088\n//*               THAT YOU DON'T HAVE TO DUMP AND RELOAD            *   FILE 088\n//*               EVERTHING JUST BECAUSE YOU FORGOT A PARAMETER     *   FILE 088\n//*               ON YOUR $DUMP COMMAND.                            *   FILE 088\n//*                                                                 *   FILE 088\n//*     JX05    - JES 2.2.0 VERSION OF THE ABOVE EX05... STUFF      *   FILE 088\n//*                                                                 *   FILE 088\n//*     J005$DV - JES 2.2.0 $DV COMMAND TO DISPLAY DASD VOLUMES     *   FILE 088\n//*               FROM JES2                                         *   FILE 088\n//*                                                                 *   FILE 088\n//*     J005LOAD- JES 2.2.0 $LOAD COMMAND TO LOAD NEW COPIES OF     *   FILE 088\n//*               EXITS                                             *   FILE 088\n//*                                                                 *   FILE 088\n//*     EXIT008 - JCT WRITE EXIT FOR JES2 EXIT(8) WHICH WILL        *   FILE 088\n//*               PUT THE CONDITION CODE OF THE JOB STEP INTO       *   FILE 088\n//*               THE JCT IF IT IS GREATER THAN WHAT IS ALREADY     *   FILE 088\n//*               THERE.  THIS EXIT WORKS IN CONJUNCTION WITH       *   FILE 088\n//*               EXIT016 AND EXIT008 MUST BE IN LPALIB.  IT IS     *   FILE 088\n//*               VERY SMALL SO THERE IS LITTLE WORRY ABOUT         *   FILE 088\n//*               PUTTING IT THERE.                                 *   FILE 088\n//*                                                                 *   FILE 088\n//*     JX08    - MVS/XA 2.2.0 VERSION OF EXIT008 ABOVE             *   FILE 088\n//*                                                                 *   FILE 088\n//*     EXIT016 - THIS JES EXIT(16) GETS INVOKED AT JOB             *   FILE 088\n//*               TERMINATION AND WILL TAKE THE DATA PLACED IN      *   FILE 088\n//*               THE JCT BY EXIT8 AND FORMAT A NOTIFY MESSAGE      *   FILE 088\n//*               FOR TSO USERS AS TO THE MAX CONDITION CODE OF     *   FILE 088\n//*               THE STEP AS WELL AS WHETHER IT ABENDED OR NOT     *   FILE 088\n//*               WITH EITHER A SYSTEM OR USER ABEND. THE USERS     *   FILE 088\n//*               ARE VERY PLEASED.                                 *   FILE 088\n//*                                                                 *   FILE 088\n//*     JX16    - JES 2.2.0 VERSION OF THE ABOVE EXIT016            *   FILE 088\n//*                                                                 *   FILE 088\n//*     EXIT212 - THIS JES EXIT(212) IS A DUMPER/LOADER EXIT        *   FILE 088\n//*               WHICH ALLOWS YOU TO DYNAMICALLY ALLOCATE THE      *   FILE 088\n//*               DUMPER/LOADER TAPE DSN INSTEAD OF ALWAYS          *   FILE 088\n//*               HAVING TO HAVE A PRE-ALLOCATED TAPE DSN.          *   FILE 088\n//*               THIS HAS SOLVED ALOT OF HEADACHES FOR THE         *   FILE 088\n//*               OPERATIONS STAFF ... AND ME.  THIS REQUIRES       *   FILE 088\n//*               THE PRCJ2212 USERMOD TO JES.  ALL THE MOD         *   FILE 088\n//*               DOES IS ADD THE $EXIT POINT INTO HASPSTAM.        *   FILE 088\n//*                                                                 *   FILE 088\n//*     EX99 ---- PROGRAM USED BY PRCM0005 SYSMOD                   *   FILE 088\n//*                                                                 *   FILE 088\n//*     FINDASCB- PROGRAM INDEXES THROUGH ASVT AND WILL LOCATE      *   FILE 088\n//*               A JOB OR ADDRESS SPACE WHO'S NAME MATCHES WHAT    *   FILE 088\n//*               YOU PUT IN REG1.                                  *   FILE 088\n//*                                                                 *   FILE 088\n//*     GETINFO - PROGRAM ORIGINALLY FROM NTL BUT HAS SOME          *   FILE 088\n//*               MINOR CHANGES AND ALSO HAS BEEN CHANGED TO        *   FILE 088\n//*               RUN ON A MVS/SP SYSTEM INSTEAD OF OR I SHOULD     *   FILE 088\n//*               SAY AS WELL AS MVS/XA.                            *   FILE 088\n//*                                                                 *   FILE 088\n//*     IEFACTRT- THIS IS PRETTY STANDARD STUFF EXCEPT THAT IT      *   FILE 088\n//*               UPDATES THE JOBS OUTPUT RESOLUTION MESSAGE        *   FILE 088\n//*               AREA WITH WHAT WE LIKE TO CALL \"BOX SCORES\".      *   FILE 088\n//*               THIS IS SIMILAR TO WHAT IBM'S FREEBEE DOES        *   FILE 088\n//*               BUT PUTS IT IN A BETTER PLACE.  YOU MAY WANT      *   FILE 088\n//*               TO CHANGE SOME CODE SINCE WE ALSO DO A COUPLE     *   FILE 088\n//*               OF CALCULATIONS TO TELL THE USER APPROXIMATELY    *   FILE 088\n//*               WHAT THE JOB COST TO RUN.  THE CHARGE CODE IS     *   FILE 088\n//*               VERY SIMPLE SO NO ONE SHOULD HAVE ANY             *   FILE 088\n//*               PROBLEMS.                                         *   FILE 088\n//*                                                                 *   FILE 088\n//*     JES215MD- TWO MODS TO JES 2.1.5 THE FIRST IS TO HASPSSSM    *   FILE 088\n//*               TO PUT THE DATE ON THE INITIATOR STARTED          *   FILE 088\n//*               MESSAGE $HASP373 THE SECOND MOD IS TO HASPCOMM    *   FILE 088\n//*               IT ALLOWS THE $D'JOBNAME COMMAND TO ACT AS A      *   FILE 088\n//*               GENERIC JOBNAME DISPLAY IE. IF YOU ENTERED        *   FILE 088\n//*               $D'IMS   , YOU WOULD GET A LIST OF ALL JOBS IN    *   FILE 088\n//*               ALL QUEUES WHO'S PREFIX MATCHED THE LETTERS       *   FILE 088\n//*               \"IMS\".  OPERATORS LIKE IT A LOT.                  *   FILE 088\n//*                                                                 *   FILE 088\n//*     MCS  ---- A VERY UNIQUE SPY COMMAND FROM ONE OF THE PRC     *   FILE 088\n//*               SUBSIDIARIES.  I'M NOT SURE WHICH ONE, BUT I      *   FILE 088\n//*               LIKE THE CODE.                                    *   FILE 088\n//*                                                                 *   FILE 088\n//*     MINIGEN - THE GOOD OLD MINIGEN, WE HAVE USED IT FOR         *   FILE 088\n//*               YEARS AND CONTRARY TO POPULAR BELIEF IT CAN BE    *   FILE 088\n//*               USED EVEN IF YOU ARE ADDING A NEW DEVICE TYPE.    *   FILE 088\n//*               THE BEST WAY TO USE THIS GUY IS TO BROWSE YOUR    *   FILE 088\n//*               STAGE1 OUTPUT AND FIND ALL OCCURRENCES OF \"       *   FILE 088\n//*               EXEC  ASMS\"  THE MOD=XXXXXXX PARAMETER ON EACH    *   FILE 088\n//*               ONE OF THESE GUYS SHOULD BE PUT IN THE ASSEM (    *   FILE 088\n//*               SECTION OF THE MINIGEN.  THIS IS A HELL OF A      *   FILE 088\n//*               LOT SAFER THAN A IOGEN AND THIS WAY WE NEVER      *   FILE 088\n//*               LOSE ANY USERMODS                                 *   FILE 088\n//*                                                                 *   FILE 088\n//*     PANBKPRT- THIS GUY WILL TAKE A PANVALET BACKUP TAPE AND     *   FILE 088\n//*               CREATE A LISTING OF WHAT PROGRAMS AND VERSIONS    *   FILE 088\n//*               AND SIZE AND ALL IS ON THE TAPE. JUST AS IF IT    *   FILE 088\n//*               WERE STILL ON DISK.  THIS WAY YOU DONT HAVE TO    *   FILE 088\n//*               RESTORE THE WHOLE TAPE DOWN JUST TO FIND          *   FILE 088\n//*               SOMTHING THAT YOU DON'T REALLY KNOW THE NAME      *   FILE 088\n//*               OF OR EVEN GUESS AT.                              *   FILE 088\n//*                                                                 *   FILE 088\n//*     POSTER -- DOES WHAT IT SAYS, CREATES POSTERS-BANNERS.       *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCJ2001- JES2/SP 1.3.4 MOD TO ALLOW GENERIC $D'XXX' FOR    *   FILE 088\n//*               PARTIAL JOBNAMES.                                 *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCJ2004- JES2/SP 1.3.4 MOD TO MAKE THE DEFAULT TSU AND     *   FILE 088\n//*               STC MESSAGE CLASS A FOR JOBS THAT THEY SUBMIT.    *   FILE 088\n//*               THIS ALLOWS YOU TO STILL SET THE &STCMCLAS AND    *   FILE 088\n//*               &TSUMCLAS TO A DELETE CLASS TO KEEP FROM          *   FILE 088\n//*               GETTING ALL OF THE USELESS JCL AND STILL NOT      *   FILE 088\n//*               HAVE TO PUT A MSGCLASS= PARM ON ALL JOBCARDS.     *   FILE 088\n//*               YOU DON'T NEED THIS IF YOU HAVE TSO/E FOR TSO     *   FILE 088\n//*               BUT WE DON'T HAVE THE MONEY TO THROW AWAY ON      *   FILE 088\n//*               THAT KIND OF PRODUCT AND WE ALSO HAVE A COUPLE    *   FILE 088\n//*               OF STC'S THAT SUBMIT JOBS AND THIS HAS BEEN       *   FILE 088\n//*               INDISPENSABLE.                                    *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCJ2212- JES2/SP 1.3.4 MOD TO ADD $EXIT 212 TO             *   FILE 088\n//*               HASPSTAM FOR DYNAMIC DUMPER/LOADER DSN'S.         *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCM0001- SET IEALIMIT TO NOT GIVE ANY EXTRA MEMORY.        *   FILE 088\n//*               IN MOST SHOPS POEPLE DON'T CARE ABOUT GIVING      *   FILE 088\n//*               A JOB A LITTLE EXTRA, BUT OUR ACCOUNTING          *   FILE 088\n//*               SYSTEM IS MEMORY INTENSIVE SO WE CAN'T ALLOW      *   FILE 088\n//*               JOBS TO GET ANY MORE THAN THEY ASK FOR.           *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCM0002- THIS MOD WILL ALLOW DEFAULT TSO DYNAMIC           *   FILE 088\n//*               ALLOCATION TO BE SHR INSTEAD OF OLD.  THIS IS     *   FILE 088\n//*               FOR NON-TSO/E SYSTEMS, IF YOU HAVE TSO/E          *   FILE 088\n//*               THERE IS ALREADY ANOTHER MOD ON THE CBT TAPE      *   FILE 088\n//*               FOR THIS SAME TYPE OF THING. BUT IT IS ALOT       *   FILE 088\n//*               BIGGER.  I GUESS THAT'S BECAUSE YOU HAVE TO       *   FILE 088\n//*               ACTUALLY PAY FOR TSO/E.                           *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCM0003- THIS MOD MUST BE APPLIED WITH THE PRCM0004 MOD    *   FILE 088\n//*     PRCM0004- WHICH IS ON THIS SAME FILE.  THE FIRST ONE IS A   *   FILE 088\n//*               DUMMY MOD SO THAT I WILL BE INFORMED IF THERE     *   FILE 088\n//*               IS ANY MAINTENANCE THAT EFFECTS THIS MOD BEFORE   *   FILE 088\n//*               ITS TOO LATE.  YOU DON'T NEED TO PUT IT ON IF     *   FILE 088\n//*               YOU DON'T WANT TO.  THIS MOD WILL PUT THE EXCP    *   FILE 088\n//*               COUNTS ON THE IEF285I MESSAGE THAT COMES OUT ON   *   FILE 088\n//*               YOUR JOB LISTING IE.                              *   FILE 088\n//*                                                                 *   FILE 088\n//*             IEF285I  C7BRIAN.VTOC.LOAD    KEPT     2123 EXCP    *   FILE 088\n//*             IEF285I  DATASET.NAME         KEPT        0 EXCP    *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCM0005- MOD TO ALLOW YOU TO HAVE TSO DEFAULT ALLOCATE     *   FILE 088\n//*               TO PACKS THAT ARE NOT MOUNTED AS PUBLIC OR        *   FILE 088\n//*               STORAGE.  IT COMES WITH A PROGRAM CALLED EX99     *   FILE 088\n//*               WHICH IS THE ACTUAL PCF EXIT THAT IS USED.        *   FILE 088\n//*               YOU DO NOT HAVE TO HAVE PCF TO USE THIS MOD.      *   FILE 088\n//*               WE DON'T HAVE IT AND WE RUN FINE.  YOU CAN        *   FILE 088\n//*               SET THE ATTR2 FIELD IN THE PSCB TO ANY VOLUME     *   FILE 088\n//*               THAT YOU WANT OR YOU CAN USE THE SETVOL           *   FILE 088\n//*               PROGRAM ON THIS FILE TO DO IT FOR YOU             *   FILE 088\n//*               AUTOMATICALLY                                     *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCM0010- THIS MOD WILL ELIMINATE THE DATASET NOT           *   FILE 088\n//*               FREED; IS NOT ALLOCATED MESSAGE. FROM THE TSO     *   FILE 088\n//*               ALLOC COMMAND.                                    *   FILE 088\n//*                                                                 *   FILE 088\n//*     PRCM0017- THIS MOD WILL ELIMINATE THE CN(00) BEING          *   FILE 088\n//*               APPEND TO MESSAGES FROM THE OPERATOR AND ON       *   FILE 088\n//*               THE NOTIFY OF JOB ENDED STUFF.                    *   FILE 088\n//*                                                                 *   FILE 088\n//*     TALK ---- CLIST TO DO ISPF FULL SCREEN SENDS TO PEOPLE      *   FILE 088\n//*                                                                 *   FILE 088\n//*     TALKP---- PANEL TO USE WITH THE TALK CLIST (PUT IT IN       *   FILE 088\n//*               ISPPLIB CONCAT)                                   *   FILE 088\n//*                                                                 *   FILE 088\n//*     ULX..---- ISPF BASED VTOC ANALYSIS AND REPORTING            *   FILE 088\n//*               FACILITY                                          *   FILE 088\n//*                                                                 *   FILE 088\n//*     USAGE   - TSO COMMAND TO DISPLAY SESSION COST.              *   FILE 088\n//*                                                                 *   FILE 088\n//*     WAITPROG- RUNS AS A BATHC JOB AND WILL ACCEPT A PARM        *   FILE 088\n//*               THAT HAS THE NUMBER OF SECONDS THAT YOU WOULD     *   FILE 088\n//*               LIKE TO WAIT AND DISPLAYS IT ON THE OS            *   FILE 088\n//*               CONSOLE FOR THE OPERATOR IT HIGHLIGHTS IT AND     *   FILE 088\n//*               WILL NOT ROLL OFF THE SCREEN.  WHEN THE TIME      *   FILE 088\n//*               EXPIRES IT WILL ISSUE A DOM TO DELETE THE         *   FILE 088\n//*               MESSAGE AND PUT OUT A REGULAR MESSAGE ABOUT       *   FILE 088\n//*               REQUESTED TIME EXPIRED. THE JOBNAME IS ALSO       *   FILE 088\n//*               PUT IN BOTH MESSAGES.                             *   FILE 088\n//*                                                                 *   FILE 088\n//*     XJ2PTP -- THIS IS A JES 2.1.5 EXIT TO DRAIN ALL OF THE      *   FILE 088\n//*               TP LINES IN THE NETWORK WITH A SINGLE COMMAND     *   FILE 088\n//*               $PTP. IT IS EXTREMELY USEFULL EVEN IF YOU         *   FILE 088\n//*               DON'T HAVE OVER 600 LINES LIKE US.  YOU CAN       *   FILE 088\n//*               ALSO START ALL TP WITH $STP OR RESTART WITH       *   FILE 088\n//*               $ETP TO ACCOMPLISH A LOT OF WORK QUICKLY.         *   FILE 088\n//*                                                                 *   FILE 088\n//*     XJ2NET -- THIS IS A JES2 EXIT13 WHICH IS REQUIRED IF        *   FILE 088\n//*               YOU WANT TO NOTIFY A TSO USER WHEN DATA IS        *   FILE 088\n//*               RECEIVED FROM ANOTHER JES NODE. IT ADDS SOME      *   FILE 088\n//*               NEAT STUFF LIKE HOW MANY LINES AND SUCH.          *   FILE 088\n//*                                                                 *   FILE 088\n//*     IEFUJV -- SMF UJV EXIT TO FORCE STANDARDS FOR MVS/XA        *   FILE 088\n//*               2.2.0                                             *   FILE 088\n//*                                                                 *   FILE 088\n//*     ITACCTBL- TABLE USED BY THE MVS 2.2.0 VERSION OF IEFUJV     *   FILE 088\n//*               FOR ACCOUNT #S                                    *   FILE 088\n//*                                                                 *   FILE 088\n//*     IEFUTL  - MVS/XA 2.2.0 SMF UTL EXIT                         *   FILE 088\n//*                                                                 *   FILE 088\n//*     IEFU29  - MVS/XA 2.2.0 SMF U29 EXIT                         *   FILE 088\n//*                                                                 *   FILE 088\n//*     IEFU83  - MVS/XA 2.2.0 SMF U83 EXIT                         *   FILE 088\n//*                                                                 *   FILE 088\n//*     IGGPRE00- MVS/XA 2.2.0 DADSM IGGPRE00 EXIT.  THIS EXIT      *   FILE 088\n//*               USES 2 TABLES TSOTABL AND NODTABL WHICH ARE       *   FILE 088\n//*               LOADED DYNAMICALLY AND CAN BE CHANGED ON THE      *   FILE 088\n//*               FLY.  THIS EXIT WILL ALLOW STUFF TO BE            *   FILE 088\n//*               ALLOCATED OR RENAMED ONLY TO THE PACKS WHICH      *   FILE 088\n//*               WE DECIDE SHOULD GET THE PREFIXES.  THIS EXIT     *   FILE 088\n//*               IS VERY POWERFUL AND IS EXTREMELY VERSATILE.      *   FILE 088\n//*               THIS EXIT REQUIRES THE  MACROS CONNECT,           *   FILE 088\n//*               EQUREGS, RELEASE, SETAMODE WHICH ARE ALSO         *   FILE 088\n//*               INCLUDED IN THIS DATASET.                         *   FILE 088\n//*                                                                 *   FILE 088\n//*     NODTAB22- MVS/XA 2.2.0 VERSION OF THE NODETABLE FOR THE     *   FILE 088\n//*               IGGPRE00 EXIT.  THIS ONE GOES IN LINKLIST.        *   FILE 088\n//*                                                                 *   FILE 088\n//*     TSOTAB22- MVS/XA 2.2.0 VERSION OF THE TSO UID TABLE FOR     *   FILE 088\n//*               THE IGGPRE00 EXIT.  THIS ONE GOES IN LINKLIST.    *   FILE 088\n//*                                                                 *   FILE 088\n//*     Good Luck!                                                  *   FILE 088\n//*                                                                 *   FILE 088\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AUTO": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x05\\x0f\\x01\\x02\\x05\\x0f#W\\x06\\x8f\\x06\\x8f\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-02-19T00:00:00", "modifydate": "2002-02-19T23:57:00", "lines": 1679, "newlines": 1679, "modlines": 0, "user": "SYZYGYB"}, "text": "//SYZYGYBA JOB (PS01),'SYZYGYB',\n//            CLASS=A,MSGCLASS=X,\n//            NOTIFY=SYZYGYB,REGION=8M\n//*-----------------------------------------------*\n//*   LIB: SYZYGY.FILE332.PDS(AUTO)\n//*   DOC: ASSEMBLE AND LINK\n//*-----------------------------------------------*\n//ASSEMB  EXEC ASSEMBLE,PARM.LINK='LIST,XREF,AC=1'\n//ASM.SYSLIB  DD\n//          DD\n//          DD\n//SYSIN    DD  *\n*----------------------------------------------------------------------\n*    BW- MACRO  CODE STARTS ABOUT 400 LINES DOWN\n*    BW- ACTUAL CODE STARTS ABOUT 1015 LINES DOWN\n*----------------------------------------------------------------------\n*        THIS ROUTINE PROVIDES FOR JOB SUBMISSION AND AUTOMATIC\n*        COMMANDS IN AN MVS/JES2 ENVIRONMENT.  IT'S FUNCTIONS\n*        ARE THREE-FOLD AND ARE EXPLAINED BELOW.\n*\n*\n*        1=RDR  ALLOW AN EASY WAY OF PRESENTING JOBS TO JES2 VIA AN\n*               OPERATOR MODIFY COMMAND.\n*\n*        2=CMD  ALLOW AN EASY WAY OF PRESENTING MULTIPLE COMMANDS TO\n*               MVS/JES2 VIA AN OPERATOR MODIFY COMMAND.\n*\n*        3=AUTO ALLOW FOR TIME-OF-DAY/DAY-OF-WEEK AUTOMATIC COMMANDS\n*\n*\n*        THE USER MUST PROVIDE A STARTED TASK PROCEDURE IN SYS1.PROCLIB\n*        WHICH IS STARTED AT IPL TIME.  ONCE ACTIVE, IT WILL PROCESS\n*        USER DEFINED COMMANDS BY DAY OF WEEK (USER DEFINED).\n*        ALSO, IT WILL SUPPORT OPERATOR MODIFY COMMANDS (DEMAND)\n*        EITHER SUBMIT JOBS (MEMBERS) TO THE INTERNAL READER OR\n*        EXECUTE COMMANDS (MEMBER LISTS).\n*\n*        FOR THE JOB SUBMISSION FEATURE, ONE OR MORE PARTITIONED\n*        DATASET(S) ARE USED.  FOR THE COMMAND/AUTO-COMMAND\n*        FUNCTIONS, ANOTHER PARTITIONED DATASET IS USED.  EACH\n*        ARE DESCRIBED BELOW (BY DDNAME).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*\n*\n*        DDNAME     USE AND FUNCTION\n*        --------   -------------------------------------------------\n*\n*\n*        INTRDR     REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE JES2 INTERNAL\n*                   READER.\n*\n*        JOB00      REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE NAME OF A\n*                   PARTITIONED DATASET WHICH CONTAINS MEMBERS\n*                   TO BE SUBMITTED TO JES2.\n*\n*        JOB??      OPTIONAL WHEN THE JOB-SUBMISSION FUNCTION IS USED.\n*                   ANY NUMBER OF ADDITIONAL 'JOB??' DDCARDS MAY BE\n*                   USED TO ALLOW FOR SPECIALIZED FUNCTION (WITH\n*                   DUPLICATE MEMBER NAMES).  THIS OPTION IS SIMILAR\n*                   TO THE MULTIPLE 'PROC??' DDCARDS WITHIN THE JES2\n*                   STARTUP PROC.  USE OF THESE OPTIONAL LIBRARIES\n*                   IS CONTROLED BY THE OPERATOR (VIA THE 'D=??'\n*                   KEYWORD, AS DETAILED BELOW).\n*\n*        COMMANDS   THIS DD STATEMENT IS REQUIRED FOR EITHER THE\n*                   OPERATOR COMMAND-LIST OR THE AUTO-COMMAND\n*                   FUNCTION.  IT SHOULD CONTAIN MEMBERS (LISTS\n*                   OF COMMANDS) IN THE FORMAT DESCRIBED UNDER THE\n*                   HEADING 'COMMAND RECORD SYNTAX' BELOW.\n*\n*\n*        THE FOLLOWING IS AN EXAMPLE OF THE TYPE OF PROC TO\n*        BE ADDED TO YOUR SYS1.PROCLIB.  NOTE THAT THE 'JOB00'\n*        DDNAME IS REQUIRED TO USE THE JOB SUBMISSION FUNCTION\n*        WHILE 'JOB01' AND 'JOB02' ARE OPTIONAL (USED IN THIS\n*        CASE AS REMOTE JOB CONTROL LIBRARIES).\n*\n*        //AUTO     EXEC PGM=AUTO,TIME=1440,DPRTY=(7,9)\n*        //STEPLIB  DD DISP=SHR,DSN=USER.LIBRARY    <---- AUTHORIZED\n*        //INTRDR   DD SYSOUT=(A,INTRDR)\n*        //COMMANDS DD DISP=SHR,DSN=SYS1.COMMANDS\n*        //JOB00    DD DISP=SHR,DSN=RMT0.JCL.LIB\n*        //JOB01    DD DISP=SHR,DSN=RMT1.JCL.LIB\n*        //JOB02    DD DISP=SHR,DSN=RMT2.JCL.LIB\n*\n*        USE OF THE OPTIONAL 'JOB??' DDNAMES IS SPECIFIED BY THE\n*        OPERATOR USING THE 'D=' OPERAND (DETAILED BELOW).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF NORMAL OPERATOR COMMANDS\n*        JOB SUBMISSION USE:\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        START     S AUTO.A     NORMAL OPERATOR START-UP.  THE FIRST\n*                               AUTOMATIC COMMAND TO BE PROCESSED\n*                               WILL BE THE MEMBER WITH A NAME THAT\n*                               SPECIFIED A TIME GREATER THAN CURRENT.\n*                               HOWEVER, DEMAND COMMAND EXECUTION\n*                               AS WELL AS JOB SUBMISSION IS AVAILABLE\n*                               IMMEDIATELY.\n*\n*        IPL       S AUTO.A,PARM=IPLMEM\n*                               SAME AS ABOVE, EXCEPT THAT THE COMMAND\n*                               MEMBER NAMED IN THE PARM FIELD WILL BE\n*                               EXECUTED BEFORE ANY OTHER REQUESTS\n*                               (AUTOMATIC OR OPERATOR REQUESTED\n*                               COMMAND).  THIS PROVIDES AN ALTERNATIVE\n*                               TO THE 'SYS1.PARMLIB(COMMND??)' OPTION\n*                               PROVIDED BY MVS.  IT ALSO PROVIDES FOR\n*                               ANY TYPE OF COMMAND (JES2 COMMANDS AS\n*                               WELL AS MVS COMMANDS).\n*\n*        SUBMIT    F A,MEMBER1  SUBMIT 'MEMBER1' TO THE JES2 INTERNAL\n*                               READER.  SINCE THE 'D=??' OPTION WAS\n*                               NOT USED, THE MEMBER WILL BE READ FROM\n*                               THE 'JOB00' DD (WHICH WILL REMAIN OPEN\n*                               OPEN UNTIL SOMETHING OTHER UNTIL 'D=??'\n*                               IS SPECIFIED AND IS NOT THE SAME AS THE\n*                               ONE USED PREVIOUSLY).\n*\n*        SUBMIT    F A,MEMBER1,MEMBER2,....,MEMBERN\n*                               SUBMIT MULTIPLE MEMBERS TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=??' WAS NOT\n*                               SPECIFIED, THE 'JOB00' IS AGAIN USED.\n*\n*        SUBMIT    F A,MEMBER1,D=01\n*                               SUBMIT A MEMBER (JOB) TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=01' WAS\n*                               SPECIFIED, THE 'JOB00' FILE IS CLOSED\n*                               AND THE 'JOB01' FILE IS OPENED TO\n*                               READ THE MEMBER.  THIS FILE WILL\n*                               REMAIN OPEN UNTIL THE 'D=??' IS\n*                               CHANGED (FROM 'D=01') OR IS NOT\n*                               SPECIFIED ('D=00' IS THE DEFAULT).\n*\n*        SUBMIT    F A,MEMBER1,MEMBER02,.....,MEMBERN,D=01\n*                               SAME AS THE ABOVE, HOWEVER, MULTIPLE\n*                               MEMBERS WILL BE READ FROM THE 'JOB01'\n*                               FILE AND SUBMITTED.  NOTE THAT THE\n*                               'D=??' KEYWORD MUST BE SPECIFIED AS\n*                               THE LAST OPTION.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF OPERATOR COMMANDS TO SCHEDULE\n*        COMMAND LISTS.\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        COMMAND   F A,-MEMBER1 CAUSE A LIST OF COMMANDS TO BE EXECUTED\n*                               BY MVS (OR JES2).  NOTE THAT THE DASH\n*                               (HYPHEN) AS A PREFIX TO THE MEMBER\n*                               NAME IDENTIFIES THE REQUEST AS A\n*                               COMMAND REQUEST (DEMAND).  THE NAMED\n*                               MEMBER WILL BE READ FROM THE FILE\n*                               IDENTIFIED BY THE DD 'COMMANDS'.  EACH\n*                               COMMAND READ WILL BE EXECUTED IF RE-\n*                               QUESTED FOR THE CURRENT DAY (THE SYNTAX\n*                               SYNTAX OF THE 'COMMANDS' RECORDS ARE\n*                               DEFINED BELOW UNDER 'COMMAND RECORD\n*                               SYNTAX').\n*\n*        COMMAND   F A,-MEMBER1,MEMBER2,.....,MEMBERN\n*                               CAUSE A LIST OF MEMBERS TO BE PROCESSED\n*                               BY MVS (OR JES2).  EACH MEMBER MAY\n*                               CONTAIN MULTIPLE COMMANDS. AGAIN NOTE\n*                               THAT THE DASH IDENTIFIES THE REQUEST\n*                               AS A DEMAND COMMAND REQUEST.\n*\n*        SHUTDOWN  P A          TO TERMINATE THIS ROUTINE, SIMPLY\n*                               ENTER AN OPERATOR STOP COMMAND.\n*\n*        SHUTDOWN  F A,-SHUTDOWN\n*                               TO ALLOW A LIST OF 'SHUTDOWN' COMMANDS\n*                               TO BE EXECUTED PRIOR TO STOPPING THIS\n*                               ROUTINE (SUCH AS $PI, I SMF, P RMF ETC)\n*                               THE 'P A' COMMAND MAY BE ADDED TO THE\n*                               END OF THE SHUTDOWN MEMBER.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE AUTOMATIC COMMAND FUNCTION IS NOT CONTROLLED BY THE\n*        OPERATOR.  INSTEAD, IT OPERATES ON A 1440 MINUTE CYCLE\n*        (60 MINUTES/HOUR AND 24 HOURS/DAY) WITHIN DAY-OF-WEEK\n*        AND MONTH-OF-YEAR CYCLES.  THIS MEANS THAT COMMANDS MAY\n*        BE SCHEDULED AT A SPECIFIED TIME OF DAY ON ANY (OR ALL)\n*        DAY(S) OF THE WEEK OR ANY DAY OF THE MONTH.\n*\n*        COMMANDS TO BE EXECUTED ARE CONATAINED IN MEMBERS THAT\n*        RESIDE IN THE 'COMMANDS' LIBRARY.  EACH MEMBER TO BE\n*        AUTOMATICALLY PROCESSED IS NAMED AS FOLLOWS.\n*\n*            @0100   THIS LIST OF COMMANDS IS TO BE PROCESSED AT\n*                    1:00 IN THE MORNING.\n*            @1423   THIS MEMBER WILL BE PROCESSED AT 2:23 PM.\n*\n*            @0000   THIS MEMBER WILL BE PROCESSED AT MIDNIGHT.\n*\n*        NOTE THAT THE MEMBER NAMES TO BE PROCESSED AUTOMATICALLY\n*        MUST BE PREFIXED WITH THE 'AT SIGN' (@), HOWEVER, THESE\n*        MEMBERS ARE NOT RESTRICTED FROM 'DEMAND' USE.\n*\n*\n*        COMMAND RECORD SYNTAX\n*\n*        EACH MEMBER CONTAINED IN THE 'COMMANDS' LIBRARY MUST FOLLOW\n*        THE SYNTAX DEFINED BELOW.  THIS IS TRUE FOR BOTH DEMAND\n*        COMMAND LISTS AS WELL AS AUTOMATIC COMMAND LISTS.\n*\n*        AN ASTERISK (*) IN COLUMN 1 DENOTES A COMMENT RECORD AND IS\n*        IGNORED BY THE PROCESSOR.  COMMANDS (RECORDS) ARE PROCESSED\n*        ONLY ON SPECIFIED DAYS OF THE WEEK AS INDICATED IN THE DAYS\n*        FIELD.  DAYS OF THE WEEK MUST BE IN THE ORDER SHOWN.\n*\n*        A NON-BLANK IN THE 'DAY-OF-THE-WEEK' FIELD REQUESTS PROCESSING\n*        ON THAT DAY.\n*\n*        FORMAT:\n*\n*        1    ===>BLANK            (AN ASTERISK SIGNIFIES A COMMENT)\n*        2-6  ===>MM/DD            (MONTH/DAY SPEC - SLASH REQ'D!)\n*        15   ===>(BLANK)\n*        8-14 ===>MTWTFSS          (DAY-OF-WEEK SPECIFICATION)\n*        15   ===>(BLANK)\n*        16   ===>COMMAND DATA     (THROUGH COLUMN 71)\n*        72   ===>CONTINUATION     (ONLY ONE CONTINUATION ALLOWED)\n*\n*        AN ASTERISK IN EITHER THE MM FIELD OR THE DD FIELD ALLOWS\n*        EXECUTION FOR ALL MONTHS OR ALL DAYS.  ASTERISKS IN BOTH\n*        FIELDS EFFECTIVELY NULLIFIES DAY-WITHIN-MONTH CRITERIA\n*        (IF '**/**' IS SPECIFIED, THE COMMAND IS SUBJECT ONLY TO\n*        DAY OF WEEK CRITERIA WHICH IS THE SAME AS ALL BLANKS IN\n*        THE MM/DD FIELD).  IF THE MM/DD FIELD IS NON-BLANK,\n*        THE REQUEST WILL BE PROCESSED ON THE MONTH/DAY SPECIFIED\n*        BUT IS ALSO SUBJECT TO DAY OF WEEK SPECIFICATIONS.\n*        IF A REQUEST IS TO BE PROCESSED ON THE SAME DAY OF EVERY\n*        MONTH, SPECIFY THE MONTH AS ASTERISKS ('**/05').  IF A\n*        REQUEST IS TO BE PROCESSED EVERY DAY OF A GIVEN MONTH,\n*        SPECIFY THE DAY AS ASTERISKS ('09/**').\n*\n*        CONTINUATION IS SUPPORTED ONLY IF THE SUBSEQUENT RECORD\n*        HAS 'ALL' BLANKS IN COLUMNS 1 THROUGH 15 AND CONTINUED\n*        DATA BEGINS IN COLUMN 16.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF AUTOMATIC COMMANDS:\n*\n*   COLUMNS:  1      8       16                                   71\n*             ..     .       .                                    .\n*   COL-1---->*MM/DD MTWTFSS COMMAND------------------------------>72\n*\n* MEMBER=@0300\n*   COL-1---->       XXXXXX  F A,BACKUP1,BACKUP2,BACKUP3\n*   COL-1---->             X F A,BACKUPWK\n*   COL-1----> **/01 ******* F A,MONTH01\n*   COL-1----> **/01      S  F A,FIRSTSAT  SCHEDULE JOB ONLY ON THE\n*   COL-1----> **/02      S  F A,FIRSTSAT  1ST SATURDAY OF THE MONTH\n*   COL-1----> **/03      S  F A,FIRSTSAT            \"\n*   COL-1----> **/04      S  F A,FIRSTSAT            \"\n*   COL-1----> **/05      S  F A,FIRSTSAT            \"\n*   COL-1----> **/06      S  F A,FIRSTSAT            \"\n*   COL-1----> **/07      S  F A,FIRSTSAT            \"\n* MEMBER=@0755\n*   COL-1---->       MTWTF   START TCAM\n* MEMBER=@0800\n*   COL-1---->       MTWTF   F TCAM,TS=START\n*   COL-1---->       MTWTF   $HQ,P\n*   COL-1---->       MTWTF   $AQ,T\n* MEMBER=@0900\n*   COL-1---->       -       SEND 'TODAY IS BLUE MONDAY...KEEP SMILING*\n*   COL-1---->               '\n*   COL-1---->        -      SEND 'TODAY IS TUESDAY...FOUR MORE TO GO'\n*   COL-1---->         -     SEND 'TODAY IS WEDNESDAY...YOUR HALF WAY'\n*   COL-1---->          -    SEND 'TODAY IS THURSDAY...HANG IN THERE'\n*   COL-1---->           -   SEND 'THANK GOD IT''S FRIDAY'\n*   COL-1---->            -  SEND 'IT''S SATURDAY... DIDN''T YOU FINIS*\n*   COL-1---->               H?'\n*   COL-1---->             - SEND 'WOW... EVEN SUNDAY YOU WORK!!!!!!'\n* MEMBER=@1645\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN AT FIVE SHARP'\n* MEMBER=@1655\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN IN FIVE MINUTE*\n*   COL-1---->               S'\n* MEMBER=@1659\n*   COL-1---->       MTWTF   SE '**** TSO IS GOING DOWN IN ONE MINUTE X\n*   COL-1---->               ****'\n*   COL-1---->       MTWTF   SE '****   YOU WILL RECEIVE NO WARNING   X\n*   COL-1---->               ****'\n* MEMBER=@1700\n*   COL-1---->       MTWTF   F TCAM,TS=STOP\n*   COL-1---->       MTWTF   $HQ,T\n*   COL-1---->       MTWTF   $AQ,P\n*   COL-1----> 05/17 ******* F A,TESTJOB  SCHEDULE ONLY ON MAY 17\n*   COL-1----> 05/16 *****   F A,TESTWKDY SCHEDULE ONLY ON MAY 16 WD\n*   COL-1----> 05/16      ** F A,TESTWKND SCHEDULE ONLY ON MAY 16 WE\n* MEMBER=@1702\n*   COL-1---->       MTWTF   Z TP\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF OPERATOR 'DEMAND' COMMANDS:\n*\n*   COL-1---->*      MTWTFSS COMMAND--------------------------->72\n*\n* MEMBER=IPL                            (  S AUTO.A,PARM=IPL  )\n*   COL-1---->       XXXXXXX S RMF.RMF\n*   COL-1---->       XXXXXXX S OPSWTR.OPSWTR\n*   COL-1---->       XXXXXXX F A,-VARYCONS,VARYALL,SETJES\n* MEMBER=SETJES                         (  F A,-SETJES )\n*   COL-1---->       XXXXXXX $TPRT1,Q=A\n*   COL-1---->       XXXXXXX $TI9,Z\n*   COL-1---->       XXXXXXX $SI9\n*   COL-1---->       XXXXXXX $SPRT1\n* MEMBER=SHUTDOWN                       (  F A,-SHUTDOWN  )\n*   COL-1---->       XXXXXXX $P\n*   COL-1---->       XXXXXXX $IPRT1\n*   COL-1---->       XXXXXXX $PLNE1\n*   COL-1---->       XXXXXXX $ELNE1\n*   COL-1---->       XXXXXXX P OPSWTR\n*   COL-1---->       XXXXXXX P RMF\n*   COL-1---->       XXXXXXX P A\n* MEMBER=UNLOAD                         (  F A,-UNLOAD  )\n*   COL-1---->       XXXXXXX U 180\n*   COL-1---->       XXXXXXX U 181\n*   COL-1---->       XXXXXXX U 182\n* MEMBER=VARYALL                        (  F A,-VARYALL  )\n*   COL-1---->       XXXXXXX V 180-188,ONLINE\n*   COL-1---->       XXXXXXX V 150-158,OFFLINE\n*   COL-1---->       XXXXXXX V 160-16F,ONLINE\n* MEMBER=VARYCONS                       (  F A,-VARYCONS  )\n*   COL-1---->       XXXXXXX V 120,CONSOLE,ROUT=(1,2,8,9,10,12,13,14,1*\n*   COL-1---->               5)\n*   COL-1---->       XXXXXXX V 121,CONSOLE,ROUT=(3,4,5,6)\n*   COL-1---->       XXXXXXX V 122,CONSOLE,ROUT=(7)\n*   COL-1---->       XXXXXXX V O-123,CONSOLE,ROUT=ALL\n* MEMBER=VARYOFF                        (  F A,-VARYOFF  )\n*   COL-1----> 09/**      XX V 150-158,OFFLINE  ONLY FOR SEPT WKEND\n*   COL-1---->       XXXXXXX V 160-168,OFFLINE\n*   COL-1---->       XXXXXXX V 170-178,OFFLINE\n*\n*  NOTE THAT THE COMMAND-LIST MEMBER MAY INCLUDE COMMANDS FOR THIS\n*  ROUTINE AS WELL.  THIS MAY OR MAY NOT BE DESIRABLE SINCE IF NOT\n*  CAUTIOUS, A LOOP COULD RESULT.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THIS ROUTINE IS 'NOT' RE-ENTRANT AND MUST BE LINKED AS\n*        'AUTHORIZED'.\n*\n*\n*\n*        MODIFIED:\n*\n*        BRIAN WESTERMAN JUNE 1980-96 REPLACED STIMER EXIT ROUTINE\n*                        CALLED ENTRY950 WITH NEW ROUTINE TO FIX\n*                        S102 ABEND UNDER MVS/ESA V5.1+OS/390\n*                        JAN  1998 ALTERED FOR OS/390 R2\n*                        DEC 2001 REMOVED OLD 1988 \"FAST SYSTEM\" CODE\n*                                 EVEN SLOW SYSTEMS ARE NOW TOO FAST\n*                        DEC 2001 CHANGED STIMER FROM 235959000 TO\n*                                 240000000 TO CORRECT MIDNIGHT PROBS\n*                                 ON ANYTHING FASTER THAN A 3081\n*\n*        GERALD URBANEK JANUARY, 1988 WESTERN ATLAS INTERNATIONAL ..\n*        HOUSTON, TEXAS\n*\n*        CORRECTED TIMING PROBLEMS AT MIDNIGHT ON LIGHTLY LOADED\n*        HIGH SPEED PROCESSORS.\n*        (REMOVED DEC 2001, NO LONGER FUNCTIONS CORRECTLY)\n*\n*\n*\n*\n*        REGISTER USAGE\n*\n*        R0   - WORK\n*        R1   - WORK\n*        R2   - WORK\n*        R3   - WORK\n*        R4   - WORK\n*        R5   - WORK\n*        R6   - WORK\n*        R7   - WORK\n*        R8   - UNUSED\n*        R9   - QEDIT ORIGIN BASE\n*        R10  - DCBS\n*        R11  - BASE # 1\n*        R12  - BASE # 2\n*        R13  - SAVE AREA\n*        R14  - BAL\n*        R15  - WORK\n*\n*----------------------------------------------------------------------\n*   BW-MACROS ADED HERE SO THEY DON'T GET LOST\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n*        $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $STCK  &NOGEN\n         LCLC   &L\n.**********************************************************************\n.****                                                             *****\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****\n.****                                                             *****\n.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****\n.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****\n.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****\n.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****\n.****    CONSTANTS.                                               *****\n.****                                                             *****\n.****    DAY    DS   X      A BINARY NUMBER (HEX) RELATIVE TO     *****\n.****                       THE DAY OF THE WEEK AS FOLLOWS        *****\n.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,     *****\n.****                       3=THURSDAY, 4=FRIDAY,                 *****\n.****                       5=SATURDAY, 6=SUNDAY                  *****\n.****                                                             *****\n.****    DATE   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE DATE IN MM/DD/YY FORMAT           *****\n.****                                                             *****\n.****    TIME   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE TIME IN HH:MM:SS FORMAT           *****\n.****                                                             *****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****\n.****                                                             *****\n.**********************************************************************\n&L       SETC  '&SYSNDX'\n&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES AFT EPOCH)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,=F'951424'      DIVIDE TO GET REMAINING SECONDS (R5)\n         LR    14,15              COPY TO WORK REG\nS&L.B    SL    14,=F'60'          DECREMENT BY 60 SECONDS\n         BM    S&L.S              LESS THAN SIXTY, CONTINUE\n         SL    15,=F'60'          MORE THAN SIXTY, ADJUST FOR LEAP\n         AL    1,=F'1'            BUMP MINUTES\n         B     S&L.B              CHECK AGAIN\nS&L.S    CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+6(2),26(13)   MOVE THE SECONDS\n         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES\n         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+3(2),26(13)   MOVE THE MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS\n         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME(2),26(13)     MOVE THE HOURS\n         MVI   TIME+2,C':'        ADD COLIN\n         MVI   TIME+5,C':'        ADD COLIN\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY\n         STC   0,DAY              SET RELATIVE DAY OF WEEK\n         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         L     1,16               GET CVT ADDRESS\n         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA\n         ZAP   8(8,13),=P'0'      ZERO WORK AREA\n         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION\n         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LA    15,S&L.T           LOAD ADDR OF TABLE\n         CVB   1,8(13)            CONVERT TO BIN\n         SLL   1,30               SHIFT ALL BUT LAST TWO\n         LTR   1,1                TEST RESIDUAL\n         BNZ   *+8                NOT 0, BRANCH\n         LA    15,S&L.TL          LEAP YEAR\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    DATE+1,C'0'        INSURE NUMERICS\n         OI    DATE+4,C'0'        INSURE NUMERICS\n         OI    DATE+7,C'0'        INSURE NUMERICS\n         MVI   DATE+2,C'/'        ADD SLASH\n         MVI   DATE+5,C'/'        ADD SLASH\n         B     S&L.E              BRANCH AROUND CONSTANTS\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF    (T'&NOGEN NE 'O').NOGEN   NOGEN SPECIFIED, SKIP\nDAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK\nDATE     DC    C'  /  /  '        CURRENT DATE\nTIME     DC    C'  :  :  '        CURRENT TIME\n.NOGEN   ANOP\nS&L.E    DS    0H\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n*          DATA SET SFALLOC    AT LEVEL 006 AS OF 05/17/78\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*               DDDDDDDDD                     AAAAAAAAAA              *\n*              DDDDDDDDDD                   AAAAAAAAAAAA              *\n*             DD       DD                  AA        AA               *\n*            DD        DD                 AA        AA                *\n*           DD        DD                 AA        AA                 *\n*          DD        DD                 AAAAAAAAAAAA                  *\n*         DD        DD                 AAAAAAAAAAAA                   *\n*        DD        DD                 AA        AA                    *\n*       DD        DD                 AA        AA                     *\n*      DD        DD                 AA        AA                      *\n*     DDDDDDDDDDD                  AA        AA                       *\n*    DDDDDDDDDD                   AA        AA                        *\n*                                                                     *\n* 1978                                                                *\n*        USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE        *\n*              PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'    *\n*              PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST    *\n*              CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.          *\n*              EX. -      PARMLIB   DA  DSN='SYS1.PARMLIB'            *\n*                                   ... ANY OTHER CODE                *\n*                                   LA  R1,PARMLIB                    *\n*                                   SVC 99                            *\n*                                   ... ANY OTHER CODE                *\n*        DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY    *\n*              PARMETERS THAT WILL BE GENERATED FOR DYNAMIC           *\n*              ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.  *\n*              THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO     *\n*              ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE     *\n*              PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF     *\n*              ALLOCATING IT.                                         *\n*                                                                     *\n*        LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.    *\n*              SOME OF THESE ARE :                                    *\n*                      1. DAER    WHICH  POINTS TO THE ERROR CODE     *\n*                                       FROM SVC 99                   *\n*                      2. DAIN    WHICH  POINTS TO THE INFORMATION    *\n*                                       CODE FROM SVC 99              *\n*              ALSO, EACH VALUE SUCH AS THE DSNAME TO ALLOCATE        *\n*              HAS A LABEL ASSOCIATED WITH IT FOR EASY REFERENCE.     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         MACRO\n&NAME    DA    &DSN=,              THE DATASET NAME                    X\n               &DDN=,              DDNAME TO ALLOCATE OR DEALLOCATE    X\n               &MEM=,              MEMBER NAME FOR PDS OR BIAS FOR GDG X\n               &STATUS=,           PRIMARY DISPOSITION                 X\n               &DISP=,             DISPOSITION IF NORMAL EOJ           X\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         X\n               &SPACE=,            PRIMARY SPACE REQUIREMENT           X\n               &TYPSP=,            TYPE OF SPACE TO ALLOCATE           X\n               &SECSP=,            SECONDARY SPACE REQUIREMENT         X\n               &VOLSER=,           VOLUME SERIAL #                     X\n               &UNIT=,             UNIT DESIGNATION                    X\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      X\n               &FREE=,             DEALLOCATE AT CLOSE                 X\n               &COPIES=,           COPIES OF YOUR SYSOUT               X\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             X\n               &EXPDT=,            EXPIDATION DATE                     X\n               &RETPD=,            RETENTION PERIOD                    X\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           X\n               &BLKSIZE=,          BLOCK SIZE                          X\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       X\n               &FORM=,             FORM NAME SPECIFICATION.            X\n               &LRECL=,            LOGICAL RECORD LENGTH               X\n               &DIRSP=,            # OF DIRECTORY BLOCKS OR INDEX SPACEX\n               &RLSE=,             TO REQUEST THE RELEASE OF UNUSED SP X\n               &UNQSUF=,           UNIQUE SUFFIX FOR LABEL NAMES LEN=4 X\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   X\n               &DEALLOC=\n         LCLA  &A,&K,&A2\n         LCLC  &X,&NM\n&X       SETC  '&UNQSUF'\n&NAME    DS    0F\n         DC    X'80'\n         DC    AL3(DARB&X)\nDARB&X   DS    0F\n         DC    AL1(20)\n         AIF   (T'&DEALLOC EQ 'O').ALLOC\n         DC    AL1(02)             THIS CONTROL BLOCK IS FOR DEALLOCATE\n         AGO   .PAST\n.ALLOC   DC    AL1(01)             THIS CONTROL IS FOR ALLOCATION\n.PAST    DC    AL2(0)\nDAER&X   DC    AL2(0)              ERROR CODE FROM DYNAMIC ALLOCATION\nDAIN&X   DC    AL2(0)              INFORMATION CODE FROM DYNALLOC\n         DC    A(TS&X)             POINTER TO CALL LIST FOR SVC 99\n         DC    XL8'0'              RESERVED\n&A       SETA  1\n         DS    0F                  FULLWORD ALIGNED\nTS&A&X   DC    X'0001'             KEY FOR DDNAME SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&DDN\n         DC    XL2'&K'             LENGTH OF DDNAME SPECIFIED\nDADN&X   DC    C'&DDN'             DDNAME PLUGGED IN HERE\n&A       SETA  &A+1\n         AIF   (T'&DSN EQ 'O').A\n         DS    0F\nTS&A&X   DC    X'0002'             KEY FOR DSNAME SPECIFICATION\n         DC    XL2'1'\n         DC    AL2(44)             LENGTH OF DSNAME MAX IS 44\nDADS&X   DC    CL44'&DSN'          DSNAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.A       AIF   (T'&MEM EQ 'O').B\n         DS    0F\nTS&A&X   DC    X'0003'             KEY FOR MEMBER OR GDG SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&MEM\n         DC    XL2'&K'             LENGTH OF SPECFIED MEMBER NAME\nDAMB&X   DC    C'&MEM'             THE MEMBER NAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.B       AIF   (T'&STATUS EQ 'O').C\n         DS    0F\nTS&A&X   DC    X'0004'             KEY FOR PRIMARY DISPOSITION OF DDN\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE CODE\n&A       SETA  &A+1\n         AIF   ('&STATUS' EQ 'OLD').B1       OLD = X'01'\n         AIF   ('&STATUS' EQ 'MOD').B2       MOD = X'02'\n         AIF   ('&STATUS' EQ 'NEW').B3       NEW = X'04'\n         AIF   ('&STATUS' EQ 'SHR').B4       SHR = X'08'\n         MNOTE 8,'&STATUS INVALID FOR STATUS'\n         AGO   .C\n.B1      DC    X'1'                CONSTANT FOR DISP=OLD\n         AGO   .C\n.B2      DC    X'2'                CONSTANT FOR DISP=MOD\n         AGO   .C\n.B3      DC    X'4'                CONSTANT FOR DISP=NEW\n         AGO   .C\n.B4      DC    X'8'                CONSTANT FOR DISP=SHR\n         AGO   .C\n.C       AIF   (T'&DISP EQ 'O').D\n         DS    0F\nTS&A&X   DC    X'0005'             KEY FOR NORMAL EOJ SPECIFICATION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS WILL ALWAYS BE A ONE BYTE KEY\n         AIF   ('&DISP' EQ 'UNCATLG').C1     UNCATLG = X'01'\n         AIF   ('&DISP' EQ 'CATLG').C2       CATLG   = X'02'\n         AIF   ('&DISP' EQ 'DELETE').C3      DELETE  = X'04'\n         AIF   ('&DISP' EQ 'KEEP').C4        KEEP    = X'08'\n         MNOTE 8,'&DISP INVALID FOR DISP'    ALL ELSE IS WRONG\n         AGO   .D\n.C1      DC    X'1'                CONSTANT FOR UNCATLG AT NORMAL EOJ\n         AGO   .D\n.C2      DC    X'2'                CONSTANT FOR CATLG  AT NORMAL EOJ\n         AGO   .D\n.C3      DC    X'4'                CONSTANT FOR DELETE AT NORMAL EOJ\n         AGO   .D\n.C4      DC    X'8'                CONSTANT FOR KEEP   AT NORMAL EOJ\n         AGO   .D\n.D       AIF   (T'&CDISP EQ 'O').E\n         DS    0F\nTS&A&X   DC    X'0006'             KEY FOR ABNORMAL EOJ DISPOSITION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE KEY\n         AIF   ('&CDISP' EQ 'UNCATLG').D1      UNCATLG = X'01'\n         AIF   ('&CDISP' EQ 'CATLG').D2        CATLG   = X'02'\n         AIF   ('&CDISP' EQ 'DELETE').D3       DELETE  = X'04'\n         AIF   ('&CDISP' EQ 'KEEP').D4         KEEP    = X'08'\n         MNOTE 8,'&CDISP INVALID FOR DISP'     ALL ELSE IS WRONG\n         AGO   .E\n.D1      DC    X'1'                CONSTANT FOR UNCATLG IF ABEND\n         AGO   .E\n.D2      DC    X'2'                CONSTANT FOR CATLG  IF ABEND\n         AGO   .E\n.D3      DC    X'4'                CONSTANT FOR DELETE IF ABEND\n         AGO   .E\n.D4      DC    X'08'               CONSTANT FOR KEEP   IF ABEND\n         AGO   .E\n.E       AIF   (T'&TYPSP EQ 'O').I\n         DS    0F\n         AIF   ('&TYPSP' EQ 'TRK').E1  IF TYPE OF SPACE SPECIFICATION\n         AIF   ('&TYPSP' EQ 'CYL').E2  IS NOT TRACKS OR CYLINDERS THEN\nTS&A&X   DC    X'0009'                 IT MUST BE IN BLOCKS\n         DC    XL1'1'\n         DC    XL1'3'\n         DC    AL3(&TYPSP)\n&A       SETA  &A+1\n         AGO   .F\n.E1      ANOP\nTS&A&X   DC    X'0007'             SPACE IS TO BE ALLOCATED IN TRKS\n         DC    XL2'0'\n&A       SETA  &A+1\n         AGO   .F\n.E2      ANOP\nTS&A&X   DC    X'0008'             SPACE IS TO BE ALLOCATED IN CYLS\n         DC    XL2'0'\n&A       SETA  &A+1\n.F       AIF   (T'&SPACE EQ 'O').FO\n         DS    0F\nTS&A&X   DC    X'000A'             KEY TO SPECIFY PRIMARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASP&X   DC    AL3(&SPACE)\n&A       SETA  &A+1\n         AGO   .G\n.FO      MNOTE 8,'PRIMARY SPACE OMITTED'   TYPSP REQUIRES AT LEAST\n         AGO   .I                  THE PRIMARY SPACE SPECIFICATION\n.G       AIF   (T'&SECSP EQ 'O').H\n         DS    0F\nTS&A&X   DC    X'000B'             KEY TO SPECIFY SECONDARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASS&X   DC    AL3(&SECSP)\n&A       SETA  &A+1\n.H       AIF   (T'&DIRSP EQ 'O').I\n         DS    0F\nTS&A&X   DC    X'000C'             KEY TO SPECIFY DIRECTORY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDADI&X   DC    AL3(&DIRSP)\n&A       SETA  &A+1\n.I       AIF   (T'&VOLSER EQ 'O').J\n         DS    0F\nTS&A&X   DC    X'0010'             KEY TO SPECIFY A PARTICULAR VOLSER\n         DC    XL2'1'\n&K       SETA  K'&VOLSER           PICK UP LENGTH OF NAME SPECIFIED\n         DC    XL2'&K'             AND USE THAT LENGTH\nDAVO&X   DC    C'&VOLSER'          AND NAME\n&A       SETA  &A+1\n.J       AIF   (T'&UNIT EQ 'O').K\n         DS    0F\nTS&A&X   DC    X'0015'             KEY FOR UNIT SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&UNIT             PICK UP LENGTH OF UNIT NAME GIVEN\n         DC    AL2(&K)             THEN USE THAT LENGTH\nDAUN&X   DC    C'&UNIT'            AND NAME\n&A       SETA  &A+1\n.K       AIF   (T'&SYSOUT EQ 'O').L\n         DS    0F\nTS&A&X   DC    X'0018'             KEY FOR SYSOUT CLASS SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&SYSOUT\n         DC    AL2(&K)\nDASY&X   DC    C'&SYSOUT'\n&A       SETA  &A+1\n.L       AIF   (T'&FORM EQ 'O').M\n         DS    0F\nTS&A&X   DC    X'001A'             KEY FOR FORMS ID SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&FORM             PICK UP LENGTH OF FORMS ID\n         DC    AL2(&K)             AND USE THAT LENGTH\nDAFM&X   DC    C'&FORM'            AND THAT FORM NUMBER\n&A       SETA  &A+1\n.M       AIF   (T'&FREE EQ 'O').N\n         AIF   ('&FREE' NE 'CLOSE').M2\n         DS    0F\nTS&A&X   DC    X'001C'             KEY TO SPECIFY FREE=CLOSE\nDACL&X   DC    XL2'0'              MUST BE CODED FREE=CLOSE\n&A       SETA  &A+1                ALL ELSE WILL GENERATE MNOTE\n         AGO   .N\n.M2      MNOTE 8,'&FREE INVALID FOR FREE'\n.N       AIF   (T'&COPIES EQ 'O').O\n         DS    0F\nTS&A&X   DC    X'001D'             KEY TO SPECIFY MULTIPLE COPIES\n         DC    XL2'1'              OF OUTPUT.\n         DC    XL2'1'\nDACO&X   DC    AL1(&COPIES)        NUMBER OF COPIES REQUESTED\n&A       SETA  &A+1\n.O       AIF   (T'&LABEL EQ 'O').P\n         DS    0F\nTS&A&X   DC    X'001E'             KEY TO SPECIFY TYPE LABEL\n         DC    XL2'1'\n         DC    XL2'1'              LENGTH OF THIS FIELD IS ALWAYS ONE\n&A       SETA  &A+1\n         AIF   ('&LABEL' EQ 'NL').O1     NL  = X'01'\n         AIF   ('&LABEL' EQ 'SL').O2     SL  = X'02'\n         AIF   ('&LABEL' EQ 'NSL').O3    NSL = X'04'\n         AIF   ('&LABEL' EQ 'SUL').O4    SUL = X'08'\n         AIF   ('&LABEL' EQ 'BLP').O5    BLP = X'10'\n         AIF   ('&LABEL' EQ 'LTM').O6    LTM = X'21'\n         AIF   ('&LABEL' EQ 'AL').O7     AL  = X'40'\n         AIF   ('&LABEL' EQ 'AUL').O8    AUL = X'48'\n         MNOTE 8,'&LABEL INVALID FOR LABEL'\n         AGO   .P\n.O1      DC    X'1'               LABEL = NL\n         AGO   .P\n.O2      DC    X'2'                LABEL = SL\n         AGO   .P\n.O3      DC    X'04'               LABEL = NSL\n         AGO   .P\n.O4      DC    X'08'               LABEL = SUL\n         AGO   .P\n.O5      DC    X'10'               LABEL = BLP\n         AGO   .P\n.O6      DC    X'21'               LABEL = LTM\n         AGO   .P\n.O7      DC    X'40'               LABEL = AL\n         AGO   .P\n.O8      DC    X'48'               LABEL = AUL\n         AGO   .P\n.P       AIF   (T'&EXPDT EQ 'O').Q\n         DS    0F\nTS&A&X   DC    X'0022'             KEY TO SPECIFY EXPIRATION DATE\n         DC    XL2'1'\n         DC    XL2'5'              FIELD IS FIVE NUMERICS\nDAEX&X   DC    CL5'&EXPDT'         AND IS PUT IN HERE\n&A       SETA  &A+1\n.Q       AIF   (T'&RETPD EQ 'O').R\n         DS    0F\nTS&A&X   DC    X'0023'             KEY TO SPECIFY A RETENTION PERIOD\n         DC    XL2'1'\n         DC    XL2'2'              MAXIMUM LENGTH IS TWO\nDARP&X   DC    AL2(&RETPD)         AND IS PLACED HERE.\n&A       SETA  &A+1\n.R       AIF   (T'&DUMMY EQ 'O').S\n         DS    0F\nTS&A&X   DC    X'0024'             KEY TO ALLOCATE A DUMMY DATA SET\n         DC    XL2'0'\n         DC    XL2'0'\n         DC    X'0'\n&A       SETA  &A+1\n.S       AIF   (T'&BLKSIZE EQ 'O').T\n         DS    0F\nTS&A&X   DC    X'0030'             KEY TO SPECIFY THE BLOCKSIZE\n         DC    XL2'1'\n         DC    XL2'2'\nDABS&X   DC    AL2(&BLKSIZE)\n&A       SETA  &A+1\n.T       AIF   (T'&FUNC EQ 'O').U\n         DS    0F\n         AIF   ('&FUNC' EQ 'I').T2\n         MNOTE 8,'&FUNC INVALID FOR FUNC'\n         AGO   .U\n.T2      ANOP\nTS&A&X   DC    X'005A'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    X'80'\n&A       SETA  &A+1\n.U       AIF   (T'&LRECL EQ 'O').V\n         DS    0F\nTS&A&X   DC    X'0042'             KEY TO SPECIFY THE LRECL\n         DC    XL2'1'\n         DC    XL2'2'\n         DC    AL2(&LRECL)\n&A       SETA  &A+1\n.V       AIF   (T'&RLSE EQ 'O').W\n         DS    0F\nTS&A&X   DC    X'000D'             KEY  TO SPECIFY RELEASE SPACE\n         DC    XL2'0'\n&A       SETA  &A+1\n.W       AIF   (T'&DCB EQ 'O').X\n         DS    0F\nTS&A&X   DC    X'002C' KEY TO SPECIFY DCB REFERENCE NAME\n         DC    XL2'1'\n&K       SETA  K'&DCB\n         DC    XL2'&K'             LENGTH OF DSN SPECIFIED\nDCB&X    DC    C'&DCB'             DSNAME TO COPY DCB FROM\n&A       SETA  &A+1\n.X       ANOP\n.*\n.*\n.*\n.*\n         DS    0F\n&A2      SETA  1\n&A       SETA  &A-1\n&NM      SETC  'TS&X'\n.CM1     AIF   (&A2 EQ &A).CM2\n&NM      DC    A(TS&A2&X)\n&NM      SETC  ' '\n&A2      SETA  &A2+1\n         AGO   .CM1\n.CM2     DC    X'80'\n         DC    AL3(TS&A2&X)\n         MEND\n*----------------------------------------------------------------------\n*   BW - END OF MACROS\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZATION\n*\n*----------------------------------------------------------------------\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nAUTO     $PROLOG R11,R12          ENTRY LINKAGE\n         USING IHADCB,R10         DCB DSECT\n         B     ENTRY010\nXOFFSET  EQU   BWPOST-AUTO\n*\nBWPOST   STM   R14,R12,12(R13)\n         LR    R11,R15\n         LA    R15,XOFFSET\n         SR    R11,R15\n         LA    R12,4095\n         LA    R12,1(R11,R12)\n         LR    R3,R13\n         LA    R13,EXITSA\n         ST    R3,4(0,R13)\n         ST    R13,8(0,R3)\n         POST  TIMEECB\n         L     R13,4(0,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\nEXITSA   DS    18F\nENTRY010 DS    0H\n         L     R1,0(R1)           PARM POINTER\n         XR    R2,R2              CLEAR R2\n         ICM   R2,3,0(R1)         ANY PARM ?\n         BZ    BBB010             NO - NOT STARTED AT IPL\n         CH    R2,=H'8'           MAX PARM LENGTH ?\n         BNH   AAA010             NO - OK\n         WTO   '** AUTO ** - INVALID PARM LENGTH, IGNORED'\n         B     BBB010\nAAA010   EQU   *\n         BCTR  R2,R0              DECR FOR EXECUTE\n         EX    R2,MVC010          MOVE PARM TO MEMBER\nBBB010   EQU   *\n         OPEN  (COMMANDS,,DIR,,INTRDR,(OUTPUT))\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  IS IT OPEN ?\n         BZ    ERROR1             NO - ERROR\n         BAL   R14,ENTRY999       SET UP THE DATE/TIME/DAY FIELDS\n         L     R0,BUFSIZE         MAX BLKSIZE\n         GETMAIN R,LV=(0)\n         ST    R1,BUFFER          STORE FOR USE AS READ BUFFER\nEXIT010  EQU   *\n         B     ENTRY020\n         LTORG\nMVC010   MVC   MEMBER(0),2(R1)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZE CONSOLE COMMUNICATION INTERFACE\n*\n*----------------------------------------------------------------------\nENTRY020 DS    0H\n         EXTRACT COMM,'S',FIELDS=(COMM)\n         L     R1,COMM            GET ADDRESS OF COMMUNICATIONS FIELDS\n         L     R0,0(R1)           GET COMMUNICATIONS ECB ADDRESS\n         ST    R0,COMMECB         SAVE ECB ADDRESS IN WAIT LIST\n         LA    R9,4(R1)           GET ORIGIN ADDRESS FOR QEDIT\n         ICM   R1,15,0(R9)        IS THERE A START COMMAND CIB WAITING\n         BZ    AAA020             NO, MUST BE BATCH EXECUTION\n         QEDIT ORIGIN=(R9),BLOCK=(R1)  YES, FREE START COMMAND CIB\nAAA020   EQU   *\n         QEDIT ORIGIN=(R9),CIBCTR=255  ALLOW STACKED COMMANDS (255)\nEXIT020  EQU   *\n         B     ENTRY030\nCOMM     DC    F'0'\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        IPL COMMAND EXECUTION\n*\n*----------------------------------------------------------------------\nENTRY030 DS    0H\n         CLC   MEMBER,BLANKS      ANY PARM ?\n         BE    EXIT030            NO - THIS IS NOT IPL START\n         BAL   R14,ENTRY900       PROCESS IPL MEMBER\nEXIT030  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SET UP TIMER\n*\n*----------------------------------------------------------------------\nENTRY040 DS    0H\n         POINT DIR,=X'00000100'   POINT TO FIRST RECORD IN DIRECTORY\n         USING DIRDSECT,R3\n         TIME  DEC\n         STCM  R0,12,HHMM         STORE TIME HHMM\n         UNPK  @TIME(5),HHMM      MOVE TO STIMER TIME FIELD\n         MVC   @TIME+4(2),=2C'0'\nAAA040   EQU   *\n         L     R3,BUFFER          ADDR OF BUFFER\n         READ  DIRDECB,SF,DIR,(R3),'S'  READ DIRECTORY\n         CHECK DIRDECB            AND OF COURSE WAIT\n         XR    R1,R1              CLEAR A WORK REG\n         ICM   R1,3,0(R3)         LNGTH OF DATA IN DIR BLK\n         LA    R5,0(R1,R3)        END OF DATA IN DIR BLK\n         LA    R3,2(R3)           INCR TO FIRST MEMBER NAME\nLOOP040A EQU   *\n         CLC   DIRNAME,=8X'FF'    END OF MEMBERS ?\n         BE    DDD040             YES - CHECK FOR LO MEMBER\n         CLI   DIRNAME,C'@'       TOD MEMBER ?\n         BNE   CCC040             NO -SKIP IT\n         LA    R1,DIRNAME+1       SECOND BYTE OF DIRNAME\n         LA    R15,4              LOOP CONTROL - HHMM\nLOOP040B EQU   *\n         TM    0(R1),X'F0'        NUMERIC ?\n         BNO   CCC040             NO - SKIP THIS MEMBER\n         LA    R1,1(R1)           BUMP TO NEXT BYTE\n         BCT   R15,LOOP040B\n         CLC   DIRNAME+6(2),BLANKS  MUST BE BLANKS\n         BE    BBB040             YES - OK\n         MVC   WTO040+28(8),DIRNAME  NO - INFORM OPER\nWTO040   WTO   '** AUTO ** - MEMBER //////// INVALID FOR TOD PROCESSINGX\n               , IGNORED'\n         B     CCC040\nBBB040   EQU   *\n         CLC   DIRNAME+1(4),@TIME  MUST BE HIGHER\n         BH    GGG040             PROCESS THIS MEMBER\nCCC040   EQU   *\n         NI    DIRC,X'1F'         TURN OFF UNNEEDED BITS\n         XR    R1,R1              CLEAR R1\n         IC    R1,DIRC            NUMBER OF USER HALFWORDS\n         SLL   R1,1               NUMBER OF USER BYTES\n         LA    R3,12(R1,R3)       INCR TO NEXT DIR ENTRY\n         CR    R3,R5              PAST END OF DIR BLOCK ?\n         BL    LOOP040A           NO - CHECK THIS DIR ENTRY\n         B     AAA040             YES - GET NEXT DIR BLOCK\nDDD040   EQU   *                  ALSO EODAD FOR DIR READS\n         AP    HHMM,=P'1000'      ADD 1 HOUR\n         MVI   HHMM+1,X'00'       CLEAR MM\n         CP    HHMM,=P'24000'     MIDNITE ?\n         BL    EEE040             NO - OK\n*    FOLLOWING TWO INSTRUCTIONS ADDED TO CORRECT TIMING PROBLEMS AT\n*    MIDNIGHT ON LIGHTLY LOADED HIGH SPEED PROCESSORS\n*    (REMOVED 12/15/2001 NO LONGER APPLIES TO EVEN SLOW SYSTEMS)\n*         CLC   @TIME(4),=C'2359'  IS IT MIDNIGHT  ????      GRU 01/88\n*         BE    ENTRY040           YES GET PAST MIDNIGHT     GRU 01/88\n*\n*\n         MVC   @TIME,=C'24000000' SET MIDNIGHT AS TIMER VALUE BHW 12/01\n         B     III040             GO TO IT\nEEE040   EQU   *\n         UNPK  @TIME(5),HHMM      SET DEFAULT TO CHECK AGAIN NEXT HOUR\n         B     HHH040\nGGG040   EQU   *\n         MVC   @TIME(4),DIRNAME+1  YES - NEW TIMER VALUE\nHHH040   EQU   *\n         MVC   @TIME+4(4),=4C'0'\nIII040   EQU   *\n         XC    TIMEECB,TIMEECB\n         STIMER  REAL,BWPOST,TOD=@TIME\nEXIT040  EQU   *\n         B     ENTRY050\n         DROP  R3\n         LTORG\nHHMM     DC    PL3'0'\n@TIME    DC    D'0'\n         EJECT\n*----------------------------------------------------------------------\n*\n*        WAIT FOR MODIFY OR TIMER POP\n*\n*----------------------------------------------------------------------\nENTRY050 DS    0H\n         WAIT  1,ECBLIST=ECBLIST,LONG=YES  WAIT UNTIL AN ECB IS POSTED\n         L     R1,COMMECB         ADDR OF COMMUNICATIONS ECB\n         CLI   0(R1),X'00'        CHECK FOR OPERATOR REQUEST\n         BNE   ENTRY060           YES--GO TO PROCESS OPER REQ\n         CLI   TIMEECB,X'00'      DID THE TIMER POP ?\n         BNE   ENTRY300           YES--GO PROCESS TIME REQUEST\n         B     ENTRY050           HMMM.. DON'T KNOW, RETRY\n         LTORG\nECBLIST  DS    0F\nCOMMECB  DC    A(0)\n         DC    X'80',AL3(TIMEECB)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        CHECK FOR OPERATOR REQUEST\n*\n*----------------------------------------------------------------------\nENTRY060 DS    0H\n         L     R3,0(R9)           GET ADDRESS OF THE CIB\n         USING CIBSECT,R3         ALLOW ADDRESSABILITY\n         CLI   CIBVERB,X'40'      IS IT THE STOP COMMAND ?\n         BE    RETURN             YES - TO CLEAN UP ROUTINE\n         MVC   COMMDATA,BLANKS    CLEAR THE DATA BUFFER\n         IC    R15,CIBDSIZE+1     GET SIZE OF MODIFY DATA\n         BCTR  R15,R0             DECREMENT FOR EXECUTE\n         EX    R15,MOVE060        MOVE TO COMMDATA\n         QEDIT ORIGIN=(R9),BLOCK=(R3)  FREE THE CIB\n         OC    COMMDATA,BLANKS    UPPER CASE\n         CLI   COMMDATA,C'-'      IS IT A COMMAND REQUEST ?\n         BE    ENTRY200           YES - PROCESS IT\n         B     ENTRY100           NO - ASSUME JOB\n         LTORG\nMOVE060  MVC   COMMDATA(0),CIBDATA  MOVE DATA TO WORK AREA\n         DROP  R3                 FREE THE USING REGISTER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DETERMINE WHICH DDNAME TO USE FOR SUBMIT\n*\n*----------------------------------------------------------------------\nENTRY100 DS    0H\n         LA    R10,JOBDCB         ADDR OF JOB DCB\n         LA    R3,COMMDATA        ADDR OF INPUT DATA\nLOOP100A EQU   *\n         CLI   0(R3),C' '         END OF DATA ?\n         BE    AAA100             YES - DEFAULT DDNAME\n         CLC   0(3,R3),=C',D='    IS THIS DDNAME OVERRIDE?\n         BE    BBB100             NO, CONTINUE UNTIL ONE IS FOUND\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         B     LOOP100A           BRANCH BACK\nAAA100   EQU   *\n         MVC   0(5,R3),=C',D=00'  ASSUME DEFAULT\nBBB100   EQU   *\n         TM    DCBOFLGS,DCBOFOPN  JOB CNTL DCB OPEN ?\n         BZ    CCC100             NO - OPEN IT\n         CLC   OPENDCB,3(R3)      SAME AS LAST ONE ?\n         BE    EXIT100            YES - OK\n         CLOSE ((R10))            NO - CLOSE IT\n         XC    OPENDCB,OPENDCB    CLEAR LAST OPENED\nCCC100   EQU   *\n         MVC   DADNJCL+3(2),3(R3)   MODIFY DYNAMIC ALLOCATION PARMS\n         LA    R4,DSNTABLE          TABLE OF DSNS TO DDNAMES\nCCC100L  DS    0H\n         CLC   0(2,R4),3(R3)        RIGHT DDNAME SUFFIX ?\n         BE    CCC100A              GO DO ALLOCATION\n         CLC   0(2,R4),=X'FFFF'     END OF TABLE ?\n         BNE   CCC100B              NO BUMP TO NEXT ENTRY\n         MVC   CCC100M+33(2),3(R3)  MOVE DD SUFFIX TO WTO\n*               89012345678901234567890123456789012345678901234567890\nCCC100M  WTO   '** AUTO ** DDNAME SUFFIX // NOT DEFINED IN TABLE USING X\n               00 AS A DEFAULT'\n         MVC   3(2,R3),=C'00'       SET UP DEFAULT\n         B     CCC100\nCCC100B  DS    0H\n         LA    R4,46(R4)            NEXT ENTRY IN TABLE PLEASE.\n         B     CCC100L              TRY THAT ENTRY ON FOR SIZE\nCCC100A  DS    0H\n         MVC   DADSJCL(44),2(R4)    SAVE THE DATASET TO ALLOCATE.\n         LA    R1,JCLALOC\n         DYNALLOC\n         LTR   R15,R15              ALLOCATION GOOD ?\n         BZ    CCC100D\n         MVC   DATASET(44),DADSJCL MOVE DSNAME TO TITLE\n         WTO   MF=(E,TITLE)\n         LH    R6,TITLE            GET LENGTH OF WTO.\n         LH    R7,TITLE+2          GET MCS FLAGS FROM WTO\n         SH    R6,HALF4            GET LENGTH OF MESSAGE TEXT\n         STC   R6,TITLE+3          SAVE LENGTH FOR SDUMP\n         SDUMP HDRAD=TITLE+3\n         STH   R7,TITLE+2          RESTORE MCS FLAGS FROM WTO.\n         B     ENTRY050            GO WAIT FOR MORE WORK\nCCC100D  DS    0H\n         MVC   DCBDDNAM+3(2),3(R3)  MODIFY DDNAME\n         OPEN  ((R10))\n         TM    DCBOFLGS,DCBOFOPN  DID IT OPEN THIS TIME ?\n         BZ    ERROR2             NO - ERROR\n         MVC   OPENDCB,3(R3)      SAVE LAST OPENED\nEXIT100  EQU   *\n         MVC   0(5,R3),=CL5' '    CLEAR THE 'D=XX' PARM\n         B     ENTRY110\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SUBMIT EACH MEMBER SPECIFIED IN THE PARMLIST\n*\n*----------------------------------------------------------------------\nENTRY110 DS    0H\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  IS THE INTRDR OPEN ?\n         BZ    ENTRY050           NO, IGNORE REQUEST\n         LA    R3,COMMDATA        ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA110   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP110  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB110             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB110             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP110        BACK TO CHECK NEXT CHAR\n         B     ERROR3             MEMBER NAME LONGER THAN 8 CHARS\nBBB110   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE110        MOVE MEMBER NAME\n         FIND  ((R10)),MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    CCC110             YES - OK\n         MVC   WTO110+25(8),MEMBER\n*               890123456789012345\nWTO110   WTO   '** AUTO ** - JOB //////// NOT FOUND'\n         B     EEE110             GO TO EODAD ROUTINE\nCCC110   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  READDECB,SF,(R10),(R5),'S'\n         CHECK READDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,READDECB+16     ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nDDD110   EQU   *\n         PUT   INTRDR,(R5)        SUBMIT JCL\n         BXLE  R5,R6,DDD110       BUMP TO NEXT REC IN BLOCK AND PUT\n         B     CCC110             READ ANOTHER BLOCK\nEEE110   EQU   *\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   FFF110             NO, FLUSH THE INTERNAL READER\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA110             NO, PROCESS IT\nFFF110   EQU   *\n         PUT   INTRDR,EOF         /*EOF\nEXIT110  EQU   *                  END OF ALL SUBMITS\n         CLOSE ((R10))            CLOSE AND DE-ALLOCATE JOBDCB.\n         B     ENTRY050           CHECK FOR ANY MORE COMMANDS\nMOVE110  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMAND EXECUTION REQUEST BY OPERATOR\n*\n*----------------------------------------------------------------------\nENTRY200 DS    0H\n         LA    R3,COMMDATA+1      ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA200   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP200  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB200             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB200             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP200        BACK TO CHECK NEXT CHAR\n         B     ERROR4             MEMBER NAME LONGER THAN 8 CHARS\nBBB200   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE200        MOVE MEMBER NAME\n         BAL   R14,ENTRY900       PROCESS COMMAND\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   EXIT200            NO, DONE\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA200             NO, PROCESS IT\nEXIT200  EQU   *\n         B     ENTRY050\n         LTORG\nMOVE200  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS TIME INTERVAL REQUESTS (THE TIMER HAS POPPED)\n*\n*----------------------------------------------------------------------\nENTRY300 DS    0H\n         MVC   MEMBER,BLANKS      CLEAR\n         MVI   MEMBER,C'@'        PREFIX\n         MVC   MEMBER+1(4),@TIME  BUILD NAME\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BNZ   EXIT300            NO, MUST BE NULL TIMER\n         BAL   R14,ENTRY900\nEXIT300  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMANDS\n*\n*----------------------------------------------------------------------\nENTRY900 DS    0H\n         ST    R14,ST900          SAVE RETURN ADDR\n         LA    R10,COMMANDS       DCB ADDR\n         TM    DCBOFLGS,DCBOFOPN  IS THE COMMANDS OPEN ?\n         BZ    EXIT900            NO, IGNORE REQUEST\n         BAL   R14,ENTRY999       RE-ESTABLISH DATE, TIME, AND DAY\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    AAA900             YES - PROCESS IT\n         MVC   WTO900+25(8),MEMBER\nWTO900   WTO   '** AUTO ** - CMD //////// NOT FOUND'\n         B     EXIT900            GO TO EODAD ROUTINE\nAAA900   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  CMDDECB,SF,(R10),(R5),'S'\n         CHECK CMDDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,CMDDECB+16      ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nBBB900   EQU   *\n         CLI   CONTFLAG,X'FF'     IS THE CONTINUATION FLAG ON ?\n         BNE   EEE900             NO, NORMAL PROCESSING\n         CLC   0(15,R5),BLANKS    IS IT A VALID CONT RECORD ?\n         BE    DDD900             YES, OK\nCCC900   EQU   *\n         MVC   WTO900A+25(8),MEMBER MOVE MEMBER NAME\nWTO900A  WTO   '** AUTO ** - CMD //////// INVALID CONTINUATION, SKIP'\n         MVI   CONTFLAG,X'00'     RESET CONT FLAG\n         B     JJJ900             SKIP THE RECORD\nDDD900   EQU   *\n         MVC   CMDBUF+56(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BNE   CCC900             YES - ERROR ONLY ONE CONT ALLOWED\n         MVI   CONTFLAG,X'00'     RESET THE CONTINUATION FLAG\n         B     III900             PROCESS COMPLETE COMMAND\nEEE900   EQU   *\n         CLI   0(R5),C'*'         COMMENT ?\n         BE    KKK900             YES - SKIP IT\n         CLC   1(5,R5),BLANKS     ANY MONTH/DAY PROCESSING?\n         BE    HHH900             NO, PROCESS DAY OF WEEK ONLY\n         CLI   3(R5),C'/'         VALID MONTH/DAY SPECIFICATION?\n         BE    FFF900             YES - OK\n         MVC   WTO900B+25(8),MEMBER MOVE MEMBER NAME\nWTO900B  WTO   '** AUTO ** - CMD //////// INVALID MONTH/DAY, SKIPPED'\n         B     KKK900             SKIP THE RECORD\nFFF900   EQU   *\n         CLC   1(5,R5),=C'**/**'  ANY MONTH/DAY PROCESSING?\n         BE    HHH900             YES, PROCESS DAY OF WEEK ONLY\n         CLC   1(5,R5),DATE       IS THIS A HIT?\n         BE    HHH900             YES, CHECK FOR CORRECT DAY OF WEEK\n         CLC   4(2,R5),=C'**'     WAS ANY DAY SPECIFIED ?\n         BNE   GGG900             NO, CHECK FOR ANY MONTH\n         CLC   1(2,R5),DATE       YES, IS THIS THE CORRECT MONTH\n         BE    HHH900             YES, PROCESS DAY OF WEEK NEXT\n         B     KKK900             NO - SKIP IT\nGGG900   EQU   *\n         CLC   1(2,R5),=C'**'     WAS ANY MONTH SPECIFIED ?\n         BNE   KKK900             NO - SKIP IT\n         CLC   4(2,R5),DATE+3     YES, IS THIS THE CORRECT DAY\n         BNE   KKK900             NO - SKIP IT\nHHH900   EQU   *\n         SR    R1,R1              CLEAR FOR DAY INDEX\n         IC    R1,DAY             GET DAY INDEX\n         LA    R1,7(R5,R1)        POINT TO TODAYS PROCESS FLAG\n         CLI   0(R1),C' '         PROCESS FLAG ON FOR TODAY ?\n         BE    KKK900             NO -SKIP IT\n         MVC   CMDBUF(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BE    III900             NO - PROCESS COMMAND\n         MVI   CONTFLAG,X'FF'     SET THE CONTINUATION FLAG\n         B     KKK900             GET NEXT RECORD\nIII900   MODESET KEY=ZERO         GET KEY ZERO AND AUTH\n         LM    R0,R1,SVCREGS      GET SVC 34 REGS\n         SVC   34                 SCHEDULE COMMAND\n         MODESET KEY=NZERO        RELEASE AUTHORIZATION\nJJJ900   EQU   *\n         MVC   CMDBUF(115),BLANKS CLEAR THE COMMAND BUFFER\nKKK900   EQU   *\n         BXLE  R5,R6,BBB900       BUMP TO NEXT REC IN BLOCK\n         B     AAA900             READ ANOTHER BLOCK\nEXIT900  EQU   *                  EODAD\n         L     R14,ST900          RETURN ADDR\n         BR    R14\n         LTORG\nST900    DC    F'-1'\nCONTFLAG DC    X'00'\nSVCREGS  DC    F'0'               REG 0 FOR SVC 34\n         DC    A(SVCCIB)          REG 1 FOR SVC 34\nSVCCIB   DC    AL2(118)           MAXIMUM LENGHT OF COMMAND\n         DC    H'0'               SVC 34 PADDING\nCMDBUF   DC    CL120' '           COMMAND BUFFER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        TIMER EXIT\n**** THIS ROUTINE REPLAED BY BWPOST AT BEGINNING OF PROGRAM\n*----------------------------------------------------------------------\n***********************************************************************\n*  ENTRY950 DS    0H                                                  *\n*           USING *,R15                                               *\n*           STM   R14,R12,4(R13)     SAVE REGS                        *\n*           L     R12,=A(AUTO)                                        *\n*           DROP  R15                                                 *\n*           POST  TIMEECB                                             *\n*           LM    R14,R12,4(R13)     RESTORE REGS                     *\n*  EXIT950  EQU   *                                                   *\n*           BR    R14                                                 *\n***********************************************************************\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DAY/DATE ROUTINE (FROM THE MACHINE CLOCK)\n*\n*----------------------------------------------------------------------\nENTRY999 DS    0H\n         ST    R14,SAVE999        SAVE BAL REG\n         $STCK NOGEN              GENERATE THE DATE, TIME AND DAY\nEXIT999  EQU   *\n         L     R14,SAVE999        RELOAD BAL REG\n         BR    R14\n         LTORG\nSAVE999  DC    F'-1'\nDAY      DC    X'99'              RELATIVE DAY OF WEEK (0=MONDAY)\nDATE     DC    D'0'               DATE MM/DD/YY\nTIME     DC    D'0'               TIME HH:MM:SS\n         EJECT\n*----------------------------------------------------------------------\n*\n*        END OF JOB\n*\n*----------------------------------------------------------------------\nRETURN   DS    0H\n         TM    DCBOFLGS,DCBOFOPN  IS THE JCL DCB OPEN?\n         BZ    AAARET             NO, SKIP THE CLOSE\n         CLOSE ((10))             CLOSE THE DCB\nAAARET   EQU   *\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  COMMANDS OPEN ?\n         BZ    BBBRET             NO, SKIP THE CLOSE\n         CLOSE (COMMANDS,,DIR)    CLOSE BOTH DCBS\nBBBRET   EQU   *\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  HOW ABOUT THE INTRDR ?\n         BZ    CCCRET             NO, SKIP THAT CLOSE\n         CLOSE (INTRDR)           CLOSE THE INTERNAL READER\nCCCRET   EQU   *\n         L     R1,BUFFER\n         L     R0,BUFSIZE\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15            CLEAR RETCODE\n         $EPILOG\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ERROR ROUTINES\n*\n*----------------------------------------------------------------------\nERROR1   DS    0H\n         WTO   '** AUTO ** - COMMANDS DD CARD MISSING, TERMINATING'\n         B     RETURN\n*----------------------------------------------------------------------\nERROR2   DS    0H\n         MVC   WTO2+23(2),3(R3)\nWTO2     WTO   '** AUTO ** - D=// OPEN ERROR, JOB NOT SUBMITTED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR3   DS    0H\n         MVC   WTO3+25(8),0(R4)\nWTO3     WTO   '** AUTO ** - JOB //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR4   DS    0H\n         MVC   WTO4+25(8),0(R4)\nWTO4     WTO   '** AUTO ** - CMD //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n         EJECT\n*----------------------------------------------------------------------\n*\n*        STORAGE AREAS\n*\n*----------------------------------------------------------------------\n         DC    C'TIMEECB IS +4 AFTER ='\nBUFSIZE  DC    F'32760'\nTIMEECB  DC    F'0'\nBUFFER   DC    F'0'\nMEMBER   DC    CL8' '\nOPENDCB  DC    CL2' '\nHOLDCIB  DC    CL256' '\nCOMMDATA DC    CL256' '\nBLANKS   DC    CL256' '\n*                        1         2         3         4         5\n*               123456789012345678901234567890123456789012345678901234\nTITLE    WTO   '                                             CAN NOT BEX\n                ALLOCATED AT THIS TIME TRY LATER',                     X\n               ROUTCDE=(1,2,11),MF=L\nDATASET  EQU   TITLE+4\nHALF4    DC    H'4'\nEOF      DC    CL80'/*EOF'\nDSNTABLE DS    0F\n         DC    C'00',CL44'SYZYGY.AUTO.JOBS'\n         DC    C'01',CL44' '\n         DC    C'02',CL44' '\n         DC    C'03',CL44' '\n         DC    C'04',CL44' '\n         DC    C'05',CL44' '\n         DC    C'06',CL44' '\n         DC    C'07',CL44' '\n         DC    C'08',CL44' '\n         DC    C'09',CL44' '\n         DC    C'10',CL44' '\n         DC    X'FFFF'\nJCLALOC  DA    DDN=JOB00,                                              X\n               DSN=SYZYGY.AUTO.JOBS,                                   X\n               STATUS=SHR,                                             X\n               UNQSUF=JCL,                                             X\n               FREE=CLOSE\n         EJECT\n         PRINT NOGEN\nCOMMANDS DCB   DDNAME=COMMANDS,DSORG=PO,MACRF=R,EODAD=EXIT900\nDIR      DCB   DDNAME=COMMANDS,DSORG=PS,MACRF=RP,EODAD=DDD040,         X\n               LRECL=256,BLKSIZE=256,RECFM=FB\nJOBDCB   DCB   DDNAME=JOB00,DSORG=PO,MACRF=R,EODAD=EEE110\nINTRDR   DCB   DDNAME=INTRDR,DSORG=PS,MACRF=PM,                        X\n               LRECL=80,BLKSIZE=80,RECFM=F\n         EJECT\nCIBSECT  DSECT ,                  COMMAND INPUT BUFFER MAPPING\nCIBCIB   DS    F                  ADDRESS OF NEXT CIB IN CHAIN\nCIBVERB  DS    C                  CIB VERB CODE\nCIBSIZE  DS    C                  SIZE OF THE COMMAND INPUT BUFFER\nCIBRSVD1 DS    H                  RESERVED\nCIBRSVD2 DS    C                  RESERVED\nCIBTSOID DS    CL3                TSO TERMINAL ID\nCIBCONID DS    C                  CONSOLE ID OF STARTED TASK\nCIBRSVD3 DS    C                  RESERVED\nCIBDSIZE DS    H                  SIZE OF USER DATA WITHIN CIB\nCIBDATA  DS    C                  COMMAND DATA AS ENTERED BY OPERATOR\nDIRDSECT DSECT\nDIRNAME  DS    CL8\nDIRTTR   DS    CL3\nDIRC     DS    CL1\n         DCBD  DSORG=PO\n*        IKJTCB DSECT=YES,LIST=YES ENERATES TCB DSECT\n         CVT   DSECT=YES          GENERATES CVT DSECT\n         END\n//LINK.SYSLMOD DD  DSN=SYS1.SYZYGY.LINKLIB(AUTO),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CATLIST": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\xaa\\x00\\xaa\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 170, "newlines": 170, "modlines": 0, "user": "SYZYGYB"}, "text": "/* CATLIST  REXX                                  */\n/*                                                */\n/* - Obtain Master Catalog name from SYS1.PROCLIB */\n/* - Obtain Master Catalog volume from LISTDSI    */\n/* - Obtain usercat names/volumes from LISTCAT    */\n/* - Generate catalog backup job                  */\n/*                                                */\n/* Created 23Jan95 TRS                            */\n/* fixed   23Nov97 BHW                            */\n/*                                                */\n\ntrace off\n\nstrt = 0                  /* counters for substr  */\nfnsh = 0                  /* counters for substr  */\nindx = 0                  /* usercatalog counter  */\n\nprofsave = SYSVAR(syspref)\n\"PROFILE NOPREFIX MSGID\"\n\n/* Do LISTCAT for SYS1.PROCLIB to get mcat name   */\n\nMCTrap = outtrap('MCTrap.')\n\"LISTCAT VOL ENTRY(SYS1.PROCLIB)\"\n\nif rc > 0 then do           /* get out if errors  */\n   do y = 1 to MCTrap.0\n      say MCTrap.y\n      end\n   \"PROFILE PREFIX(\" profsave\n   exit\n   end\n\nelse do y = 1 to MCTrap.0\n   if index(MCTrap.y,'IN-CAT') > 0 then do\n      strt = index(MCTrap.y,'IN-CAT') + 11\n      fnsh = 44\n      mcatname = strip(substr(MCTrap.y,strt,fnsh))\n      end\n   end\n\n/* Do LISTDSI on \"mcatname\" to get mcat volume    */\n\ndsinfo = LISTDSI(mcatname)\nmcatvol = SYSVOLUME\n\n/* Do LISTCAT for usercatalogs/volsers            */\n\nLCTrap = outtrap('LCTrap.')\n\"LISTCAT USERCATALOG VOLUME CATALOG(\" mcatname \")\"\n\nif rc > 0 then do\n   do y = 1 to LCTrap.0\n      say LCTrap.y\n      end\n   \"PROFILE PREFIX(\" profsave\n   exit\n   end\n\nelse do y = 1 to LCTrap.0\n\n   strt = 0\n   fnsh = 0\n\n   if index(LCTrap.y,'USERCATALOG') > 0 then do\n      indx = indx + 1\n      strt = index(LCTrap.y,'USERCATALOG') + 16\n      fnsh = 44\n      ucatname.indx = strip(substr(LCTrap.y,strt,fnsh))\n      strtex = index(ucatname.indx,'.') + 1\n      ucatex.indx = substr(ucatname.indx,strtex)\n      end\n\n   else if index(LCTrap.y,'VOLSER') > 0 then do\n      strt = index(LCTrap.y,'VOLSER') + 18\n      fnsh = 6\n      ucatvol.indx = strip(substr(LCTrap.y,strt,fnsh))\n      end\n\n   end\n\n/* Build jobstream here                           */\n\nqueue '//SYSCATBK  JOB (SYST,06),''Catalog Backup'','\nqueue '//        CLASS=7,'\nqueue '//        MSGCLASS=W,'\nqueue '//        REGION=0M,'\nqueue '//        TIME=1439'\nqueue '//*'\nqueue '/*JOBPARM LINES=9999'\nqueue '//*************************************************************'\nqueue '//*'\nqueue '//* SYSCATBK JOB built by SYSBLD00 on' date() 'at' time()\nqueue '//*'\nqueue '//*************************************************************'\nqueue '//*'\nqueue '//SYSCATBK EXEC PGM=IDCAMS,TIME=1439'\nqueue '//MASTER    DD  DISP=SHR,DSN=' || mcatname\nqueue '//EXPMSTR   DD  DISP=(,CATLG),DSN=MVS.CATBKUP(+1),'\nqueue '//          DCB=(MODEL.DCB,RECFM=VBA,LRECL=125,BLKSIZE=629),'\nqueue '//          LABEL=(1,SL,EXPDT=99000),'\nqueue '//          UNIT=3490,VOL=(,RETAIN)'\nqueue '//LSTMSTR   DD  DISP=(,KEEP),DSN=MVS.MCATLIST,'\nqueue '//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),'\nqueue '//          LABEL=(2,SL,RETPD=0),'\nqueue '//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR'\n\ndo i = 1 to indx\n\n   if index(ucatname,'ABR.UCAT') = 0 then do\n\n      expfile = 2*i+1\n      lstfile = 2*i+2\n      catddn  = '//INUCAT' || i\n      expddn  = '//OUTEXP' || i\n      lstddn  = '//OUTLST' || i\n\n      queue '//*'\n      queue catddn || ' DD DISP=SHR,DSN=' || ucatname.i\n      queue expddn || ' DD DISP=(,KEEP),DSN=MVS.EX.' || ucatex.i || ','\n      queue '//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),'\n      queue '//          LABEL=(' || expfile || ',SL,RETPD=0),'\n      queue '//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR'\n      queue lstddn || ' DD DISP=(,KEEP),DSN=MVS.LC.' || ucatex.i || ','\n      queue '//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),'\n      queue '//          LABEL=(' || lstfile || ',SL,RETPD=0),'\n      queue '//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR'\n\n      end\n\n   end\n\nqueue '//SYSPRINT  DD  SYSOUT=*'\nqueue '//SYSIN     DD  *'\n\nqueue ' EXPORT' mcatname 'OUTFILE(EXPMSTR) TEMPORARY'\nqueue ' IF MAXCC<=4 THEN -'\nqueue '    LISTCAT CAT(' || mcatname || ') OUTFILE(LSTMSTR) ALL'\n\ndo i = 1 to indx\n\n   queue ' IF MAXCC<=4 THEN -'\n   queue '    EXPORT' ucatname.i 'OUTFILE(OUTEXP' || i || ') TEMPORARY'\n   queue ' IF MAXCC<=4 THEN -'\n   queue '    LISTCAT CAT(' || ucatname.i || ') OUTFILE(OUTLST',\n         || i || ') VOL'\n\n   end\n\n/* TAPEMAP step maps bkup tape and sends to Brian */\n\nqueue '//******************************************'\nqueue '//* SEND TAPEMAP OF BKUP TAPE TO PRINTER ***'\nqueue '//******************************************'\nqueue '//TAPEMAP  EXEC  PGM=TAPEMAP,               '\nqueue '//             COND=(4,LT)                  '\nqueue '//SYSPRINT DD  SYSOUT=X                     '\nqueue '//SYSPRNT2 DD  DUMMY                        '\nqueue '//SYSUT1   DD  DSN=MVS.CATBKUP(+1),         '\nqueue '//             DCB=BUFNO=30,                '\nqueue '//             DISP=SHR                     '\nqueue '//******************************************'\n\n/* EXIT code goes here                            */\n\n\"EXECIO * DISKW jobout (FINIS\"\n\n\"PROFILE PREFIX(\" profsave\nexit\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMMANDZ": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x06\\x10\\x8f\\x01\\x06\\x10\\x8f\\x01\\x06\\x00\\x03\\x00\\x03\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-04-18T00:00:00", "modifydate": "2006-04-18T01:06:31", "lines": 3, "newlines": 3, "modlines": 0, "user": "SBGOLOB"}, "text": "This version of COMMANDZ has been deleted temporarily, pending a\nrewrite.  Please bear with us.  A new program is (hopefully) coming\nsoon, to be given a different name.    S.GOLOB\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CONNECT": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\xdb\\x00\\xdb\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 219, "newlines": 219, "modlines": 0, "user": "SYZYGYB"}, "text": "         MACRO\n&NAME    CONNECT  &L,&D,&CPPL=NO,&BASE=,&PARM=,&CLEAR=,&LI=LA,&R0=,    W\n               &MODESET=,&SAVE=YES,&ID=,&ENTRY=,&ENTREG=15,            W\n               &SP=0,&MODSET=YES,                              01/06/78W\n               &COPYRT=,&EQUREGS=NO,                           11/21/86W\n               &LOC=BELOW,                                     12/08/86W\n               &AMODE=,&RMODE=,&MODSAVE=,                      12/08/86W\n               &REGSAVE=(14,12)                                04/12/77\n.*\n.*       THIS MACRO GENERATES CSECT START-UP LINKAGE.\n.*\n.*                                                             01/06/78\n.*  CHANGES:                                                   01/06/78\n.*                                                             01/06/78\n.*       01/06/78 - ADD &SP (SUBPOOL SUPPORT)                  01/06/78\n.*       11/21/86 - ADD &COPYRT (COPYRIGHT DATE) SUPPORT       11/21/86\n.*       12/08/86 - ADD &LOC (LOCATION) SUPPORT FOR XA         12/08/86\n.*                  ALSO ADDED AMODE/RMODE MODE SWITCH SUPPORT 01/06/78\n.*       12/11/87 - ADDED SUPPORT FOR \"COPYRT=NO\"              12/11/87\n.*       03/09/88 - ADDED DUAL XA/NONXA SUPPORT                03/09/88\n.*                                                             01/06/78\n         GBLC  &SYSSPLV                                        03/09/88\n         LCLA  &I,&J,&K,&N,&R                                  04/12/77\n         LCLC  &CNAME,&XRNAME,&LITLBL,&MODSAV                  04/12/77\n         LCLC  &AMODLBL,&AMOD1,&RMOD1                          01/06/78\n         LCLC  &CPYYR,&PSTCNS                                  11/21/86\n&LITLBL  SETC  'LIT&SYSNDX'\n&PSTCNS  SETC  'PST&SYSNDX'\n         SPLEVEL TEST\n         AIF   ('&SYSSPLV' EQ '1').NOMOD\n&AMOD1   SETC  '&AMODE'\n&RMOD1   SETC  '&RMODE'\n         AIF   ('&AMODE' EQ '').RMODQQ\n         AIF   ('&AMODE' EQ '24').RMOD24\n         AIF   ('&AMODE' EQ '31').RMODANY\n         AIF   ('&AMODE' EQ 'ANY').RMOD24\n         MNOTE 12,'** INVALID AMODE, &AMODE, SPECIFIED **'\n         MEXIT\n.RMODQQ  ANOP\n         AIF   ('&RMODE' EQ '').NOMOD\n         AIF   ('&RMODE' EQ 'ANY').AMOD31\n         AIF   ('&RMODE' EQ '24').AMOD24\n         MNOTE 12,'** INVALID RMODE, &RMODE, SPECIFIED **'\n         MEXIT\n.AMOD31  ANOP\n&AMOD1   SETC  '31'\n         AGO   .RMODDUN\n.AMOD24  ANOP\n&AMOD1   SETC  '24'\n         AGO   .RMODDUN\n.RMODANY ANOP\n         AIF   ('&RMODE' EQ 'ANY').RMODDUN\n         AIF   ('&RMODE' NE '').RMOD24\n&RMOD1   SETC  'ANY'\n         AGO   .RMODDUN\n.RMOD24  ANOP\n         AIF   ('&RMODE' EQ '24').RMODDUN\n         AIF   ('&RMODE' NE '').RMODERR\n&RMOD1   SETC  '24'\n         AGO   .RMODDUN\n.RMODERR MNOTE 12,'** INVALID RMODE OR AMODE/RMODE COMBINATION **'\n         MNOTE *,'** REQUESTED AMODE=&AMODE, RMODE=&RMODE **'\n         MEXIT\n.NOMOD   ANOP\n&AMOD1   SETC  ''\n&RMOD1   SETC  ''\n.RMODDUN ANOP\n         AIF   ('&COPYRT' EQ '').NOCPYRT                       11/21/86\n         AIF   ('&COPYRT' EQ 'NO').SKIPCPR                     12/11/87\n         AIF   (('&COPYRT'(1,1) EQ ''''(1,1) OR '&COPYRT'(1,1) EQ '(') +\n               AND K'&COPYRT GE 3).TRIMCPY\n&CPYYR   SETC  '&COPYRT'                                       11/21/86\n         AGO   .COPYSET                                        11/21/86\n.TRIMCPY ANOP\n&CPYYR   SETC  '&COPYRT'(2,K'&COPYRT-2)\n.SKIPCPR ANOP                                                  12/11/87\n         AGO   .SETNAME                                        12/11/87\n.NOCPYRT ANOP                                                  11/21/86\n&CPYYR   SETC  '&SYSDATE'(7,2)                                 11/21/86\n&CPYYR   SETC  '19&CPYYR'                                      11/21/86\n.COPYSET ANOP                                                  11/21/86\n.SETNAME ANOP                                                  12/11/87\n&CNAME   SETC  '&SYSECT'\n         AIF   ('&AMOD1' EQ '' AND '&RMOD1' EQ '').NOMOD2\n&CNAME   AMODE &AMOD1\n&CNAME   RMODE &RMOD1\n.NOMOD2  ANOP\n         AIF   (T'&ENTRY EQ 'O').XANOP1\n&CNAME   SETC  '&ENTRY(1)'\n.XANOP1  ANOP\n&N       SETA  N'&BASE\n         AIF   (T'&ID EQ 'O').XIDLEN\n&K       SETA  K'&ID-2\n&K       SETA  ((&K+1)/2)*2\n.XIDLEN  ANOP\n         PUSH  USING\n         USING *,&ENTREG               TEMP ADDRESSABILITY\n&NAME    B     &PSTCNS                  BRANCH AROUND ID       05/24/77\n         DROP  &ENTREG\n         POP   USING\n         DC    AL1(23)                  ID LENGTH\n         DC    CL9'&CNAME'              CSECT NAME\n         DC    CL8'&SYSDATE'            ASSEMBLY DATE\n         DC    CL6' &SYSTIME'           ASSEMBLY TIME\n         AIF   ('&COPYRT' EQ 'NO').SKIPCP2                     12/11/87\n         DC    C'COPYRIGHT (C)&CPYYR. BY BRIPER IDUSTRIES SYSTEMS CONSU+\n               LTING, ALL RIGHTS RESERVED       '             11/21/86\n.SKIPCP2 ANOP                                                  12/11/87\n         AIF   (T'&ID EQ 'O').XSAVE\n         DC    CL&K&ID\n.XSAVE   ANOP\n&PSTCNS  DS    0H\n         AIF   ('&SAVE' EQ 'NO').XBASECK\n         AIF   (T'&REGSAVE(1) NE 'N').XSAVERR\n         AIF   (&REGSAVE(1) GE 14 OR &REGSAVE(1) LE 2).XSAVE2\n         STM   14,15,12(13)             SAVE ENTRY REGISTERS\n&I       SETA  &REGSAVE(1)*4+20\n         AIF   (N'&REGSAVE NE 2).XSAVE3\n         STM   &REGSAVE(1),&REGSAVE(2),&A.(13)  SAVE REGISTERS\n         AGO   .XBASECK\n.XSAVE3  AIF   (N'&REGSAVE NE 1).XSAVERR\n         ST    &REGSAVE(1),&A.(,13)     SAVE REGISTER\n         AGO   .XBASECK\n.XSAVE2  AIF   (N'&REGSAVE NE 2).XSAVE4\n         STM   14,&REGSAVE(2),12(13)    SAVE REGISTERS\n         AGO   .XBASECK\n.XSAVE4  AIF   (N'&REGSAVE NE 1).XSAVERR\n         STM   14,&REGSAVE(1),12(13)    SAVE REGISTERS\n         AGO   .XBASECK\n.XSAVERR MNOTE 8,'** INVALID REGISTER LIST, &REGSAVE, (14,12) ASSUMED '\n.XSAVE0  ANOP\n         STM   14,12,12(13)             SAVE REGISTERS\n.XBASECK AIF   (&N EQ 0).XCPPL\n         LR    &BASE(1),&ENTREG         INITIALIZE BASE REGISTER\n         USING &CNAME,&BASE(1)\n         AIF   (&N LE 1).XCPPL\n&I       SETA  2\n.XBASE   ANOP\n&J       SETA  &I-1\n         LA    &BASE(&I),2048(&BASE(&J))\n         LA    &BASE(&I),2048(&BASE(&I))\n&K       SETA  &J*4096\n         USING &CNAME+&K,&BASE(&I)\n&I       SETA  &I+1\n         AIF   (&I LE &N).XBASE\n.XCPPL   AIF   ('&CPPL' EQ 'NO').XPARM\n         LR    &CPPL,1                  CPPL ADDRESS\n         USING CPPL,&CPPL\n         AGO   .XMODE\n.XPARM   AIF   (T'&PARM EQ 'O').XREG0\n         LR    &PARM(1),1               SAVE PARAMETER REGISTER\n         AIF   (N'&PARM NE 2).XREG0\n         USING &PARM(2),&PARM(1)        DSECT ADDRESSABILITY\n.XREG0   AIF   (T'&R0 EQ 'O').XMODE\n         LR    &R0,R0\n.XMODE   AIF   (T'&MODESET EQ 'O').XWORK\n         MODESET MF=(E,&MODESET)\n.XWORK   AIF   ('&SAVE' EQ 'NO').AMOD030 QUIT IF SAVE=NO\n         AIF   ('&SAVE' EQ 'YES').XGETM IF SAVE=YES, THEN GETMAIN\n         LA    15,&SAVE                 LOAD UP ADDRESS OF SAVE AREA\n         ST    13,4(15)                 START CHAINING SAVE AREAS\n         ST    15,8(13)                 FINISH CHAINING\n         LR    13,15                    NEW SAVE AREA ADDRESS\n         AGO   .AMOD020                 WE IS ALL THRU......\n.XGETM   AIF   (T'&L EQ 'O').AMOD020\n         &LI   R0,&L\n         AIF   ('&SYSSPLV' EQ '1').NOTXA1                      03/09/88\n         MNOTE *,'       GETMAIN RU,LV=(0),SP=&SP,LOC=&LOC  '\n         GETMAIN RU,LV=(0),SP=&SP,LOC=&LOC                     12/08/86\n         AGO   .XAJOIN1                                        03/09/88\n.NOTXA1  ANOP  ,                                               03/09/88\n         ICM   R0,8,=AL1(&SP)                                  03/09/88\n         MNOTE *,'       GETMAIN R,LV=(0)                   '  03/09/88\n         GETMAIN R,LV=(0)                                      03/09/88\n.XAJOIN1 ANOP  ,                                               03/09/88\n         ST    13,4(1)                  CONNECT SAVEAREAS\n         ST    1,8(13)\n         LR    13,1\n         AIF   (T'&D EQ 'O').XCLEAR\n         USING &D,13\n.XCLEAR  AIF   (T'&CLEAR EQ 'O').AMOD020\n         XC    0(4,13),0(13)\n         LA    R0,8(13)\n         AIF   ('&LI' EQ 'LA').XCLA\n         &LI   1,&L\n         S     1,=F'8'\n         AGO   .XCLB\n.XCLA    LA    1,&L-8\n.XCLB    SLR   14,14\n         SLR   15,15\n         MVCL  R0,14                    ZERO WORKAREA\n.AMOD020 ANOP\n         AIF   ('&SYSSPLV' EQ '1').CKREGS\n         AIF   ('&MODSET' EQ 'NO' OR '&MODSET' EQ 'N').CKREGS\n         AIF   ('&AMOD1' EQ '').CKREGS\n         AIF   ('&MODSAVE' NE '').SETMSAV\n.DFTMSAV AIF   ('&SAVE' EQ 'NO').NOMSAVE\n         L     1,4(13)                  GO GET PREVIOUS SAVE AREA\n&MODSAV  SETC  '12(1)'\n         AGO   .MSAVSET\n.SETMSAV AIF   ('&MODSAVE' EQ 'NO').NOMSAVE\n         AIF   ('&MODSAVE' EQ 'YES').DFTMSAV\n&MODSAV  SETC  '&MODSAVE'\n.MSAVSET ANOP\n         SETAMODE &AMOD1,SAVE=&MODSAV   SET NEW AMODE AND SAVE OLD ONE.\n         AGO   .CKREGS\n.NOMSAVE AIF   ('&AMOD1' EQ 'ANY').CKREGS\n         SETAMODE &AMOD1\n.CKREGS  ANOP\n         B     &LITLBL\n         LTORG ,                        INSURE ADDRESSABILITY TO CNSTS.\n&LITLBL  DS    0H\n         AIF   ('&EQUREGS' NE 'YES' AND '&EQUREGS' NE 'Y').MEND\n&I       SETA  0\n.CKRLOOP AIF   (&I GT 15).MEND\nR&I      EQU   &I\n&I       SETA  &I+1\n         AGO   .CKRLOOP\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EQUREGS": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYZYGYB"}, "text": "         MACRO\n         EQUREGS\n         LCLA  &I\n&I       SETA  0\n.LOOP    ANOP\nR&I      EQU   &I\n&I       SETA  &I+1\n         AIF   (&I LT 16).LOOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXITP20": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x001\\x001\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "SYZYGYB"}, "text": "EXIT     TITLE 'PRC JES2SP EXIT 20'\n         SPACE 5\n         COPY  $HASPGBL\n         TITLE 'HASP MODULE INFORMATION TABLE'\nEXIT020  $MODULE TITLE='JES2SP EXIT 20',                               X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $NHD,               GENERATE HASP NHD DSECT             X\n               $NIT,               GENERATE HASP NIT DSECT             X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE  DSECT            X\n               $RDRWORK,           GENERATE RDR WORK DSECT             X\n               $RAT                GENERATE RAT WORK DSECT             X\n         TITLE 'EXIT 20 - END OF JOB INPUT PHASE'\nEXIT20  $ENTRY BASE=R8             PROVIDE EXIT ROUTINE ENTRY POINT\n         USING JCTDSECT,R10         SET UP BY HASPPRPU\n        $SAVE  ,                   SAVE CALLER'S REGISTERS\n         SPACE 1\n         LR    R8,R15              ESTABLISH BASE REGISTER\n         CLC   JCTJNAME(6),=C'SYSTEM' IS THIS A TECH SUPPORT JOB?\n         BE    EX20RT              YEP, SO LEAVE IT ALL ALONE\n         MVI   RDRSIAFF,X'01'      THIS WILL CAUSE THE SYSTEM TO\n*                                  MOVE WHATEVER IS IN THE &SID1\n*                                  JES2PARM INTO ALL SYSAFFINITY\n*                                  FIELDS REGUARDLESS OF WHAT WAS\n*                                  THERE BEFORE.  IF YOU WANT TO\n*                                  FORCE THE &SID2 FIELD YOU WOULD\n*                                  MOVE A X'02' IF YOU WANT S=ANY\n*                                  THEN MOVE A X'7F'.  THIS EXIT IS\n*                                  ALWAYS RELATIVE TO WHAT IS IN THE\n*                                  JES2PARMS SO YOU WILL HAVE THE\n*                                  OPPOSITE NUMBER IN THE OTHER\n*                                  SYSTEMS JES EXIT20,\n         B     EX20RT\nEX20RT  $RETURN RC=0\n         SPACE 4\n******    EXIT LITERAL POOL     *******\n         LTORG\n         SPACE 5\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT004": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x9a\\x00\\x9a\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 154, "newlines": 154, "modlines": 0, "user": "SYZYGYB"}, "text": "EX4      TITLE '1.3.4 JES2 EXIT 4-JCL AND CONTROL CARD SCAN ROUTINE'\n***********************************************************************\n*                                                                     *\n*        JES2 EXIT 4.  JCL AND CONTROL CARD SCAN ROUTINE.             *\n*                                                                     *\n*        THIS EXIT SCANS JCL AND CONTROL STATEMENTS FOR PARMS THAT    *\n*        HAVE SPECIAL MEANING FOR TUCC.                               *\n*                                                                     *\n*                                                                     *\n*        PROCESS /*NOSETUP CARD.  MAKE IT A COMMENT                   *\n*                                 LAST CHANGE DATE-03/26/86           *\n*                                                                     *\n*        PROCESS /**       CARD.  MAKE IT A COMMENT                   *\n*                                 LAST CHANGE DATE-03/27/86           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         PRINT OFF,NOGEN          TURN OFF FOR COPY $HASPGBLS\n         COPY  $HASPGBL\n         PRINT ON,NOGEN\nEXIT004  $MODULE SYSP=(NOGEN,NOGEN,NODATA,NOGEN,NOGEN),                *\n               $HASPEQU,$KIT,$MIT,$MITETBL,$MODMAP,                    *\n               $TAB,$SJB,$PCE,$BUFFER,$JQE,$JOE,$JOT,$QSE,             *\n               $JCT,$PDDB,$IOT,$CAT,$SCAT,$HCT,$LRC,                   *\n               $RDRWORK,$EXITPL,$ERA,$DCT\nEXIT004  CSECT                    RESUME CSECT\n         SPACE 1\n         PRINT ON,GEN\n         TITLE '1.3.4 JES2 EXIT 4-JCL AND CONTROL CARD SCAN ROUTINE'\n***********************************************************************\n*                                                                     *\n*        J C L  A N D  C O N T R O L  S T A T E M E N T  S C A N      *\n*                                                                     *\n*        REGISTERS ON ENTRY ARE:                                      *\n*                                                                     *\n*        REG. 0:    0 ==> JES2 CONTROL STATEMENT.                     *\n*                   4 ==> JCL STATEMENT.                              *\n*                                                                     *\n*        REG. 1:    --> A THREE WORD PARAMETER LIST:                  *\n*                   WORD 1-ADDRESS OF STATEMENT BUFFER.               *\n*                                                                     *\n*                   WORD 2-ADDR. OF EXIT FLAG BYTE, RXITFLAG, IN PCE. *\n*                      X'01' ==> JCL STATEMENT                        *\n*                      X'02' ==> CONTROL STATEMENT                    *\n*                      X'04' ==> JOB STATEMENT                        *\n*                      X'08' ==> CONTINUE STATEMENT                   *\n*                      X'10' ==> EXIT SUPPLIED NEXT STATEMENT         *\n*                      X'20' ==> ERROR MSG. SUPPLIED BY EXIT          *\n*                                                                     *\n*                   WORD 3-ADDRESS OF THE JCTXWRK FIELD IN THE JCT.   *\n*                                                                     *\n*        REG. 2-9-----NOT SPECIFIED                                   *\n*                                                                     *\n*        REG. 10----==> JCT                                           *\n*                                                                     *\n*        REG. 11----==> HCT                                           *\n*                                                                     *\n*        REG. 12------NOT SPECIFIED                                   *\n*                                                                     *\n*        REG. 13----==> HASPRDR PCE                                   *\n*                                                                     *\n*        REG. 14------CONTAINS RETURN ADDRESS                         *\n*                                                                     *\n*        REG. 15------CONTAINS ENTRY POINT ADDRESS                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT4    $ENTRY CSECT=NO,BASE=R12\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER USAGE IN THIS EXIT:                                 *\n*                                                                     *\n*        REG. 1 AND 2-VOLATILE TRT REGISTERS.                         *\n*                                                                     *\n*        REG. 3-----USED TO HOLD COUNT REMAINING FOR TRT              *\n*                                                                     *\n*        REG. 4-----USED TO HOLD STARTING POINT FOR TRT               *\n*                                                                     *\n*        REG. 5-----QUOTE COUNT REGISTER IN TRT LOOP                  *\n*                                                                     *\n*        REG. 6 AND 7-USED AS HOLDING REGISTERS FOR REG. 3 AND 1      *\n*                                                                     *\n*        REG. 8-----USED TO HOLD ORIGINAL REG. 0 VALUE (LO BYTE)      *\n*                                                                     *\n*        REG. 9-----USED TO HOLD ORIGINAL R1.  (--> 3 WORD PARM LIST) *\n*              HI BYTE OF REG. 9 USED TO HOLD FLAG-                   *\n*                      X'80'-ORIGINAL CARD WAS A COMMENT              *\n*                      X'40'-MAKE CARD A COMMENT (RC=8)               *\n*                      X'20'-MAKE CARD A CONTROL CARD (\"/*...\")       *\n*                                                                     *\n*        REG. 10----==> JCT                                           *\n*                                                                     *\n*        REG. 11----==> HCT                                           *\n*                                                                     *\n*        REG. 12------BASE FOR CODE                                   *\n*                                                                     *\n*        REG. 13----==> HASPRDR PCE                                   *\n*                                                                     *\n*        ALL OTHER REGISTERS ARE USED AS LOCAL WORK REGISTERS,        *\n*        LINKAGE REGISTERS, MACRO PARAMETER REGISTERS, ETC.           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEX004    $SAVE NAME=TUCEX4\n         SPACE 1\n         LR    R12,R15            ********** SET BASE FOR CODE\n         USING JCTDSECT,R10\n         USING HCTDSECT,R11\n         USING PCEDSECT,R13\n         SPACE 2\n         L     R1,0(R1)           --> INPUT CARD\nCHKPRC1  CLC   0(8,R1),=C'/*NOSETUP '  NOSETUP?\n         BNE   CHKPRC2            JUST GETOUT IF NOT\n         B     COMRTRN            *\nCHKPRC2  CLC   0(3,R1),=C'/**       '  /**    ?\n         BNE   EX004RCZ           JUST GETOUT IF NOT\n         B     COMRTRN            *\n         SPACE 1\n         SPACE 1\nCOMRTRN  LA    R15,8              CONVERT TO COMMENT-SKIP PROCESSING\n         B     EX004X             EXIT WITH RC=8\n         SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN FROM EXIT004.                                         *\n*        RETURN CODES FOR REG. 15 ARE:                                *\n*          0==>CONTINUE WITH NORMAL EXIT AND HASPRDR PROCESSING       *\n*          4==>IGNORE ADDITIONAL EXITS, CONTINUE PROCESSING           *\n*          8==>FOR CONTROL STATEMENTS-CONVERT TO A JCL COMMENT,       *\n*              CLOSE OUT THE CURRENT SYSIN DATA SET, IF ANY, (OZ60043)*\n*              AND SKIP HASPRCCS PROCESSING.  WRITE STMT. TO JCL      *\n*              DATA SET.  FOR JCL STMT., PERFORM NORMAL PROCESSING.   *\n*          12==>CANCEL THE JOB-OUTPUT (JCL) IS PRODUCED.              *\n*          16==>CANCEL THE JOB-NO OUTPUT IS PRODUCED.                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEX004XIT SR    R15,R15            SET FOR NORMAL PROCESSING\n         SPACE 1\n         SPACE 1\nEX004X   $RETURN RC=(R15)         RETURN TO MAINLINE PROCESSING\n         SPACE 1\nEX004BAD LA    R15,12             INVALID JCL CARD-KILL JOB,PRINT JCL\n         B     EX004X             GO EXIT\n         SPACE 1\nEX004RCZ SR    R15,R15            NORMAL PROCESSING RETURN CODE\n         B     EX004X             GO EXIT\n         SPACE 2\n         PRINT NOGEN\n         $MODEND\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT005": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x03\\\\\\x03\\\\\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 860, "newlines": 860, "modlines": 0, "user": "SYZYGYB"}, "text": "XT5      TITLE 'PRC COMMAND EXIT ROUTINE (EXIT 5)'\n*\n*        SP JES2 COMMAND EXIT - EXIT5\n*\n*        THIS ROUTINE PROVIDES A SAMPLE EXIT5 WITH SEVERAL FUNCTIONS\n*        ADDED:\n*          1. COMMAND LOOKUP ROUTINE\n*          2. HASPCOMM MACROS AND SERVICES AVAILABLE\n*          3. $ESTAE ENVIRONMENT ESTABLISHED AROUND COMMAND PROCESSING\n*          4.  SEVERAL COMMANDS WHICH MAY OR MAY NOT BE OF INTEREST\n*              A. $DMJ EXTENSION ALLOWS MESSAGE TO BE SENT TO JOB\n*                 NOT IN EXECUTION.\n*              B. ATTACH, DETACH SUBTASK COMMANDS. I ALSO HAVE\n*                 DISPATCHER MODS TO ALLOW JES2 PCE TO COMMUNICATE\n*                 WITH SUBTASK SO ATTACHED IF ANYONE IS INTERESTED.\n*              C. DUMP JQE COMMAND\n*\n*        L=CCA VERIFICATION AND AUTOMATIC REDIRECTION IS NOT\n*        DONE HERE BUT PROBABLY SHOULD BE. IF ANYONE DOES THESE\n*        PLEASE SEND ME A COPY.\n*\n*        I THINK THE MOST SIGNIFICANT PART OF THIS EXIT IS THE\n*        INCLUSION OF HASPCOMM MACRO FACILITIES IN IT. USER\n*        COMMAND EXTENSIONS CAN BE CODED HERE IN THE SAME\n*        MANNER AS IF THE CODE WERE IN HASPCOMM. SMALL\n*        ADDITIONS TO SOME COMMANDS CAN BE DONE AS I DID THE\n*        $DMJ ADDITION. I INTEND TO 'COPY' SOME STANDARD\n*        COMMANDS INTO THIS CSECT FOR MODIFICATION RATHER\n*        THAN MAKING HASPCOMM UPDATES.\n*\n*        I WILL OF COURSE OVER TIME ADD MANY LOCAL COMMANDS\n*        HERE. I SUGGEST THAT THIS MIGHT BE A GOOD PLACE\n*        FOR OTHERS TO PUT THEIR COMMANDS FOR DISTRIBUTION.\n*\n*\n*        YOU MAY NEED TO RE-GENERATE X51010A  AFTER APPLYING\n*        MAINTENANCE IF THERE ARE ANY HITS IN THIS AREA.\n*\n         MACRO\n&NAME    MTAB  &D,&F\n         DC    C'&NAME',X'FFFFFFFFFFFF000000000000'\n         ORG   *-12+&D\n         DC    AL1(255-QUEH&F)\n         ORG   *+5\n         DC    AL1(QUEH&F)\n         ORG\n         MEND\n         TITLE 'PRC COMMAND EXIT ROUTINE (EXIT 5)'\n*\n*        MEMBER X51010A  IS GENERATED BY COPYING FROM HASPCOMM\n*        SEQUENCE NUMBERS 00645000 TO 0870000\n*\n*\n         COPY  X51010A            HASPCOMM MACRO DEFINITIONS\n         TITLE 'HASPCOMM COMMAND EXIT (EXIT5) ROUTINE'\n         USING PCEDSECT,R13\n         USING HCTDSECT,R11\n         USING JQEDSECT,R1\nCOWTO    EQU   12                 EQUATES\nCORTNORM EQU   0                   NEEDED BY\nCORTOK   EQU   4                    HASPCOMM\nCORTMSG  EQU   8                     MACROS\n*\n*        SYMBOLS TO DEFINE COMMAND TABLE ELEMENT FIELDS\n*\nCOMTEL   EQU   16                  LENGTH OF EACH COMTAB ELEMENT\nCOMTVBLN EQU   7                  VERB LENGTH\nCOMTOFF  EQU   5                  OFFSET WITHIN GROUP\nCOMTGRP  EQU   1                  ADR OF GROUP PROCESSOR\nCOMTFL   EQU   0                   LOCATION OF FLAGS WITHIN ELEMENT\nCOMTVB   EQU   8                   LOCATION OF VERB WITHIN GROUP\nCOMR     EQU   CMBFLAGR            LEVEL OF RESTRICTION FOR REMOTES  R4\nCOMS     EQU   DCTREJSY            REJECT UNLESS SYSTEM AUTHORIZATION\nCOMD     EQU   DCTREJDV            REJECT UNLESS DEVICE AUTHORIZATION\nCOMJ     EQU   DCTREJJB            REJECT UNLESS JOB AUTHORIZATION\nCOMJDS   EQU   COMJ+COMD+COMS      COMBINATION\nCOMJDSR  EQU   COMJDS+COMR        BIGGER COMBINATION\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        REDIRECTION VALUES FOR DISPLAY COMMANDS                      *\n*                                                                     *\n***********************************************************************\n$D7D     EQU   4\n$DA      EQU   1\n$DF      EQU   2\n$DI      EQU   3\n$DJ      EQU   4\n$DN      EQU   5\n$DO      EQU   6\n$DQ      EQU   7\n$DS      EQU   4\n$DT      EQU   4\n$DU      EQU   8\n         SPACE 2\nCCMDLN   EQU   15\n         TITLE 'USER EXIT COMMAND SCAN ROUTINE'\nEXIT05   $ENTRY CSECT=YES,BASE=R12  DEFINE EXIT EP\nCOMXENT  $SAVE TRACE=YES          SAVE CALLERS REGISTERS\n         LR    R12,R15            EST. BASE REG\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        SEARCH USER DEFINED COMMAND TABLE AT LOCATION \"COMTAB\"       *\n*        TO DETERMINE IF THE COMMAND AT LOCATION \"COMVERB\" IN         *\n*        THE PCE WORKAREA IS A USER DEFINED COMMAND. RETURN           *\n*        TO HASPCOMM IF COMMAND NOT IN OUR TABLE. IF COMMAND MATCH    *\n*        DO AUTHORIZATION CHECK, THEN BRANCH TO COMMAND               *\n*        PROCESSING ROUTINE. PROCESSING ROUTINE HAS USE OF MOST       *\n*        HASPCOMM MACROS, AND SHOULD RETURN VIA $CRET MACRO.          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R4,COMTAB-COMTEL   POINT TO TABLE\n         LA    R3,NBRCMDS         NBR COMMANDS IN TABLE\nSEARCH   LA    R1,1(R3)           REMAINING COUNT + 1\n         SRA   R3,1               DIVIDE BY 2\n         SRA   R1,1               DIVIDE BY 2\n         BZ    NOTFND             BIF NO MORE TO SCAN\nCHKNEXT  MH    R1,=AL2(COMTEL)    MULT BY TABLE SIZE\n         AR    R1,R4              GENERATE CURRENT ADR\n         CLC   COMVERB(2),COMTVB(R1) CHECK VERB MATCH\n**** NOTE THAT THIS BINARY SEARCH TECHNIQUE ALLOWS FOR ONLY\n****  TWO CHARACTER COMMAND NAMES. ALL PRC COMMANDS ARE AT\n****  LEAST 2 CHARS IN LENGTH SO THIS IS NO PROBLEM.\n         BL    SEARCH             SEARCH NXT ENTRY IF LOW\n         LR    R4,R1              ESTABLISH NEW BOUNDARY\n         BH    SEARCH             BIF HIGH TO NXT HALF\n         B     FOUND              RETURN IF FOUND\n         SPACE 2\nFOUND    DS    0H                 PRC COMMAND FOUND\n         IC    R1,COMTFL(R4)      PICKUP AUTHORIZATION BITS\n         N     R1,=F'15'          PURIFY\n         EX    R1,COMTMI          TEST AUTHORIZED CONSOLE\n         BNZ   COMMBAD            BIF NOT AUTHORIZED\n         SPACE 1\n***\n***      X51010C  IS COPIED FROM HASPCOMM\n***      SEQUENCE NUMBERS 21980000 - 22770000\n***       WITH LINES 22665000 AND 22670000 DELETED\n***\n         COPY  X51010C\n         SPACE 1\nCOMMBAD  DS    0H                 COMMAND INVALID\n         $CFINVC ,\n         SPACE 2\nNOTFND   DS    0H                 NOT A PRC COMMAND, RETURN\n         SR    R15,R15            ZERO RETURN CODE\n*                                  TELLS JES2 TO CONTINUE\n*                                   NORMAL PROCESSING OF COMMAND\nRETURN   DS    0H                 RETURN FROM EXIT\nCOMXRET  $RETURN RC=(R15),TRACE=YES  RETURN TO HASPCOMM\n         SPACE 1\n*        $ESTAE RETURN ADDR AFTER RECOVERY\nRECONT   LA    R15,8              SET NULL RETURN\n         B     RETURN              AND RETURN\n         TITLE 'USER COMMAND TABLE'\n***********************************************************************\n*                                                                     *\n*                   USER COMMAND TABLE                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOMTAB   DS    0F                 MUST BE IN ALPHABETICAL ORDER\n         $COMTAB DM,CMDDM,REJECT=COMJ  DEFINE DISP MSG COMMAND\n         $COMTAB JQ,CMDJQ,REJECT=COMJDSR,REDIR=$DJ  JQE DUMP COMMAND\n         $COMTAB OP,CMDOP,REDIR=$DQ   OUTPUT LIST COMMAND\n         $COMTAB QQ,CMDQQ,REJECT=COMJDSR ABEND TEST COMMAND\nNBRCMDS  EQU   (*-COMTAB)/COMTEL  NUMBER OF COMMANDS\n         TITLE 'PRC COMMAND EXIT RECOVERY ROUTINE'\n*        REGISTERS ON ENTRY:\n*        R0    SAME AS AT ABEND\n*        R1    --> ERA\n*        R2-R10  SAME AS ABEND\n*        R11   --> HCT\n*        R13   --> PCE\n*        R14   RETURN ADR\n*        R15   ENTRY ADR\n         SPACE 1\nCOMMRCVR $SAVE TRACE=YES          SAVE REGISTERS\n         LR    R8,R15             ESTABLISH\n         USING COMMRCVR,R8          RECOVERY BASE REG\n         LR    R5,R1              ESTABLISH ERA\n         USING ERADSECT,R5         ADDRESSABILITY\n         SPACE 1\n         CLC   =F'12',ERAESRG0    DO WE HAVE SDWA\n         BE    RECPERC            BIF NOT\n         L     R3,ERASDWA         --> SDWA\n         USING SDWA,R3             AND DECLARE IT\n         L     R4,ERAPRE          --> PRE\n         USING PREDSECT,R4         AND DECLARE IT\n         SPACE 1\n         TM    SDWAERRA,SDWAPCHK  PROGRAM CHECK?\n         BZ    RECPERC             BIF NOT\n         DROP  R3\n         SPACE 1\n*        TERMINATE MULTIPLE LINE WTO IN PROGRESS\n         SPACE 1\n         TM    COMFLAG,CMBFLAGU   HAVE UCMID?\n         BZ    RECBMSG            BIF NOT\n         SPACE 1\n         CLI   COMUCMA,0          IS THIS MLWTO?\n         BZ    RECBMSG             BIF NOT\n         OI    COMLINET,X'10'       ELSE SET END LINE\n         SLR   R0,R0              SET NULL LENGTH\n         BCTR  R0,0                TO TRUNC MLWTO\n         SPACE 1\n        $CWTO  L=(R0)             END ANY MLWTO\n         MVI   COMUCMA,X'00'      CLEAR UCM AREA\n         SPACE 1\n*        TELL OPERATOR COMMAND BEING DISCARDED\n         SPACE 1\nRECBMSG  MVC   COMMAND(L'RECMSGT),RECMSGT  SETUP BASIC MSG TXT\n         TM    COMINCON,X'80'     CHECK SSI FORMATTED COMMAND\n         BZ    RECSCMD             BIF NOT SSI\n         MVC   COMMAND+L'RECMSGT(RECCML),RECNETC\n         B     RECDELMS           TELL OPERATOR CMD TERMINATED\n         SPACE 1\nRECSCMD  MVC   COMMAND+L'RECMSGT(RECCML),PRETRACK\n         DROP  R4\n         SPACE 1\n*        TELL OPERATOR COMMAND WAS DELETED\n         SPACE 1\nRECDELMS $CWTO L=RECMDLN,MSGID=691  TELL ORIGINATING OPERATOR\n         SPACE 1\n*        NOW TELL MASTER CONSOLE OPERATOR\n         $WTO   COMMID,RECMDLN+L'COMMID,JOB=NO,                        C\n               ROUTE=$MAIN+$ERR,CLASS=$ALWAYS,PRI=$HI\n         SPACE 1\n*        SETUP TO RETURN OR PERCOLATE ERROR\n         SPACE 1\n         $SETRP RESUME=RECONT     SETUP RETURN ADR\n         SPACE 1\n         B     RECRET             RETURN FROM RECOVERY RTN\n         SPACE 1\nRECPERC  $SETRP PERCOLATE        SET PERCOLATE OPTION\n         SPACE 1\nRECRET   $RETURN                  RETURN TO CALLER\n         SPACE 1\n         DROP  R5\nRECMSGT  DC    C'LOCAL COMMAND TERMINATED-'\nRECCML   EQU   15                 LNGTH OF CMD TO PRINT\nRECNETC  DC    C'NETWORK COMMAND' TXT FOR FORMATED CMDS\nRECMDLN  EQU   L'RECMSGT+RECCML   TOTAL MSG LENGTH\n         DROP  R8\n         SPACE 2\n         LTORG\n         TITLE 'PRC COMMAND EXIT SERVICE ROUTINES'\n*        COPIES OF THE STARDARD SERVICE ROUTINES ARE GENERATED\n*        HERE TO ALLOW THEIR USE FROM WITHIN OUR EXIT.\nCOFCVB   $CFCVB TYPE=RES,INFO=YES,NUM=1\nCOFCVB2  $CFCVB TYPE=RES,INFO=YES,NUM=2\n         EJECT\nCOFDCTL  $CFDCTL TYPE=RES,INFO=YES\n         EJECT\nCOFINVC  $CFINVC TYPE=RES,INFO=YES\n         EJECT\nCOFINVO  $CFINVO TYPE=RES,INFO=YES\n         EJECT\n         USING JQEDSECT,R1\nCOFVQE   $CFVQE TYPE=RES,INFO=YES\n*\n         SPACE 1\n*        X51010B  IS GENERATED BY COPYING FROM HASPCOMM\n*        SEQUENCE NUMBERS 12785000 TO 15090000\n*\n*\n         COPY  X51010B            HASPCOMM ROUTINES\n*\n*        ROUTINES TO ALLOW SIMULATION OF COMMON ROUTINES\n*\n*        SIMULATE $CRET MACRO ENTRY POINT VIA EXIT RETURN\n*\n*        $CRET NORMALLY SETS R15 VALUES TO INDICATE DESIRED\n*        ACTION. RETURN FROM EXIT 5 HAS DIFFERENT VALUES:\n*          NORMAL  EXIT        MEANING\n*            0       8         NULL RETURN\n*            4      12         RETURN WITH 'OK'\n*            8      16         RETURN WITH MSG, LENGTH IN R0\n*\n         SPACE 1\nCORET    DS    0H                 ALLOW $CRET MACRO TO WORK\n         LA    R15,8(R15)         CONVERT RETURN CODE TO\n*                                  EXIT TYPE VALUE\n         $STORE R0                SAVE LENGTH PARM FOR RETURN\n         B     RETURN             RETURN TO CALLER\n         SPACE 2\nCVALIDTB DC    256X'01'            VALID JOB AND SYSOUT CLASSES\n         ORG   CVALIDTB+C'A'\n         DC      9X'00'            A-I\n         ORG   CVALIDTB+C'J'\n         DC      9X'00'            J-R\n         ORG   CVALIDTB+C'S'\n         DC      8X'00'            S-Z\n         ORG   CVALIDTB+C'0'\n         DC     10X'00'            0-9\n         DC      6X'01'\n         ORG   ,\n         SPACE 5\nCVALTABL EQU   *\n         DC    75X'01'             X'00'-X'4A'  INVALID\n         DC      X'00'             X'4B'        VALID (.)\n         DC    15X'01'             X'4C'-X'5A'  INVALID\n         DC      X'00'             X'5B'        VALID ($)\n         DC    31X'01'             X'5C'-X'7A'  INVALID\n         DC    2X'00'              X'7B',X'7C' VALID (#,@)\n         DC    68X'01'             X'7D'-X'C0' INVALID\n         DC     9X'00'             X'C1'-X'C9'  VALID (A-I)\n         DC     7X'01'             X'CA'-X'D0'  INVALID\n         DC     9X'00'             X'D1'-X'D9'  VALID (J-R)\n         DC     8X'01'             X'DA'-X'E1'  INVALID\n         DC     8X'00'             X'E2'-X'E9'  VALID (S-Z)\n         DC     6X'01'             X'EA'-X'EF'  INVALID\n         DC    10X'00'             X'F0'-X'F9'  VALID (0-9)\n         DC     6X'01'             X'FA'-X'FF'  INVALID\n         SPACE 1\n         TITLE 'COMMAND RE-PARSE ROUTINE'\n*\n*        THIS ROUTINE IS USED TO RE-PARSE A COMMAND\n*        BEFORE RETURNING TO HASPCOMM FOR PROCESSING.\n*        FOR EXAMPLE - PRC REQUIRES BOTH JOBNUMBER AND\n*        JOBNAME TO BE SUPPLIED ON THE CANCEL JOB COMMAND.\n*        WE VERIFY JOBNAME/JOBNUMBER MATCH IN THE EXIT,\n*        REMOVE JOBNAME, THEN REPARSE THE COMMAND HERE\n*        AND RETURN TO HASPCOMM.  HASPCOMM ACTUALLY\n*        PERFORMS THE CANCEL FUNCTION.\n*\n*        NOTE THAT THIS IS NOT A FULL REPARSE. IT IGNORES\n*        QUOTES FOR EXAMPLE. IT DOES FUNCTION FOR THE SPECIFIC\n*        PRC REQUIREMENTS AT THE MOMENT.\n         SPACE 1\nREPARSE  DS    0H                 SET OPERAND POINTERS\n         LA    R5,COMOPRND        --> FIRST\n         ST    R5,COMPNTER         OPERAND, SET POINTER\n         LA    R7,COMMAND+99      --> END OF MSG\nRENDLOP  CLI   0(R7),C' '         STILL BLANK?\n         BNE   RENDGOT            BIF NOT\n         BCT   R7,RENDLOP         CHECK PREVIOUS CHARACTER\nRENDGOT  LA    R6,1               BXLE INCREMENT\n         LA    R1,COMPNTER+4      NXT OPERAND POINTER\nRECMALOP CLI   0(R5),C','         COMMA?\n         BNE   RECSTEP            BIF NOT\n         LA    R5,1(R5)           --> 1ST CHAR OF OPERAND\n         ST    R5,0(R1)           SAVE OPRAND POINTER\n         LA    R1,4(R1)           STEP TO NXT POINTER\nRECSTEP  BXLE  R5,R6,RECMALOP     STEP TO NXT CHARACTER\n         LA    R5,1(R5)           --> 1 CHAR PAST END\n         ST    R5,0(R1)           SAVE END POINTER\n         LA    R7,0(R1)           END OPERAND POINTER\n         LA    R6,4               INCREMENT\n         SR    R7,R6              --> BEGINNING LAST OPERAND\n         LA    R5,COMPNTER        FIRST OPERAND POINTER\n         SPACE 1\n*        NOW SAVE REGISTERS FOR HASPCOMM\n*        WE CAN'T USE A $STORE MACRO, BECAUSE WE MUST\n*        GO BACK TWO SAVEAREAS AWAY.\n         SPACE 1\n         L     R1,PCELPSV         --> CURRENT SAVEAREA\n         L     R1,PSVPREV-PSVID(R1)  --> PREVIOUS SAVEAREA\n         STM   R5,R7,PSVR5-PSVID(R1) UPDATE HASPCOMM REGS\n         B     NOTFND              THEN RETURN TO HASPCOMM\n         TITLE 'BAD COMMAND'\n*\n*        STANDARD COMMANDS NOT ALLOWED AT PRC\n*\n*        TO DISALLOW A STANDARD COMMAND, ENTER A $COMTAB ENTRY\n*        FOR IT WITH A ROUTINE ADDRESS OF 'CMDBAD'.\n*\n*        COMMANDS ARE:\n*\nCMDBAD   DS    0H                 DEFINE ENTRY\n         USING *,R8               DECLARE ADDRESSABILITY\n         $CRET MSG='COMMAND NOT ALLOWED AT PRC'\n         LTORG\n         TITLE 'HASP COMMAND PROCESSOR PARSE RULES'\n***********************************************************************\n*                                                                     *\n*        COMMAND SUB-PROCESSOR CONVENTIONS                            *\n*                                                                     *\n* CONTENTS OF REGISTERS UPON ENTRY TO EACH COMMAND SUB-PROCESSOR      *\n*                                                                     *\n*    R0        = UNPREDICTABLE                                        *\n*    R1        = SUB-PROCESSOR ENTRY POINT                            *\n*    R2        = UNPREDICTABLE                                        *\n*    R3        = UNPREDICTABLE                                        *\n*    R4        = UNPREDICTABLE                                        *\n*    R5        = FIRST OPERAND POINTER                                *\n*    R6        = COUNT OF 4                                           *\n*    R7        = LAST OPERAND POINTER ( SET FOR BXLE WD,WE,... )      *\n*    R8        = BASE FOR COMMAND SUB-PROCESSOR                       *\n*    R11       = HCTDSECT                                             *\n*    R12       = BEGINNING OF MAIN COMMAND PROCESSOR                  *\n*    R13       = PCE OF COMMAND PROCESSOR                             *\n*    R14       = UNPREDICTABLE                                        *\n*    R15       = UNPREDICTABLE                                        *\n*                                                                     *\n* EXAMPLE EDIT OF COMMAND TEXT BEFORE ENTRY TO SUB-COMMAND PROCESSOR  *\n*                                                                     *\n* ORIGIONAL IN $WTO BUFFER  ( S OVER CHARACTER = LOWER CASE )         *\n*                                                                     *\n*         S  S S S    S S S    S    S    S                            *\n*        $V  A B C, ' A B,C '' D ', D '' E                            *\n*                                                                     *\n* FORM PASSED TO COMMAND SUB-PROCESSOR                                *\n*                                                                     *\n*                                                                     *\n*        $VABC,' A B,C ' D ',D'E                                      *\n*          1   2             3   4                                    *\n*                                                                     *\n*        $ IS LOCATED AT COMMAND                                      *\n*                                                                     *\n*        V IS SINGLE CHARACTER FORM OF VERB                           *\n*                                                                     *\n*        WD POINTS TO FIRST OF OPERAND POINTER TABLE WHICH, IN THIS   *\n*        EXAMPLE, CONTAINS FOUR WORDS OF ADDRESSES WHICH IN TURN      *\n*        LOCATES THE BEGINNING OF EACH OPERAND ( INCLUDING A NULL     *\n*        END OPERAND ). THESE LOCATIONS ARE DENOTED BY REFERANCE      *\n*        POINTS 1, 2, 3, AND 4 RESPECTIVELY. USING BXLE WD,WE,...     *\n*        INSTRUCTION WILL FALL THROUGH WITH WD POINTING TO COMNULOP   *\n*                                                                     *\n***********************************************************************\n         TITLE '$QQ COMMAND FOR TESTING $ESTAE'\nCMDQQ    $COMGRUP QQ,DELAY=YES    DEFINE ENTRY POINT\n*\n*        $QQ COMMAND ABENDS TO TEST $ESTAE\n*\n         SPACE 1\nCQQ      DS    0H                 DEFINE ENTRY\n         $CWTO MSG='$QQ COMMAND ISSUED, IT CAUSES 0C1',MSGID=000\n         SPACE 1\n         DC    H'0'               CAUSE 0C1\n         SPACE 1\n         LTORG\n         TITLE '$JQE HEX LIST COMMAND'\nCMDJQ    $COMGRUP JQ,DELAY=YES    DEFINE ENTRY POINT\n****************************************************************\n*\n*        $JQE  JOB NUMBER\n*\n*        LIST SPECIFIED JOB'S JQE IN HEX ON THE CONSOLE\n*\n****************************************************************\n         SPACE 2\nCJQ      DS    0H\n         $CFCVB POINTER=(R5),NOK=BADJN        JOB NBR TO BINARY\n         LR    R2,R1              SAVE JOB NUMBER\n         SPACE 2\n         $QLOC (R1)               FIND JQE FOR JOB\n         BNZ   JQJFND             BIF JOB FOUND\nBADJN    $CRET MSG='JOB NOT FOUND'  RETURN\n         SPACE 1\n****************************************************************\n*\n*        JQE FOUND (ADDRESSED IN R1), FORMAT AND DUMP IT\n*\n****************************************************************\n         SPACE 2\nJQJFND   DS    0H                 JQE FOUND\n         LR    R5,R1              SAVE JQE ADR\n         LA    R6,5               5 LINES OUTPUT\nJQNXLINE LA    R3,4               CONVERT 4 WORDS/LINE\n         LA    R2,COMMAND         POINT TO REPLY AREA\n         SPACE 2\nUNPKLOP  UNPK  0(9,R2),0(5,R5)  UNPACK 1 WORD\n         L     R4,=A(HEXTAB)      ADR XLATE TABLE\n         TR    0(8,R2),0(R4)      TRANSLATE IT\n         MVI   8(R2),C' '         BLANK BETWEEN WORDS\n         LA    R2,9(R2)           POINT TO NEW RECEIVING AREA\n         LA    R5,4(R5)           NEW SENDING AREA\n         BCT   R3,UNPKLOP         UNPACK NEXT WORD\n         SPACE 1\n         $CWTO L=35               SEND 1 LINE\n         BCT   R6,JQNXLINE         THEN PROCESS NEXT LINE\n         $CRET ,                  AND RETURN AFTER LAST LINE\n         SPACE 1\nHEXTAB   EQU   *-C'0'             DONT WASTE SPACE\n         DC    C'0123456789ABCDEF'   HEX TRANSLATE TABLE\n         LTORG\n         TITLE '$DM (DISPLAY MESSAGE) COMMAND'\nCMDDM    $COMGRUP DM,DELAY=YES    DISPLAY MSG ENTRY POINT\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        $ D M JOBID,TEXT -- DISPLAY MSG ON EXECUTING JOB'S LOG       *\n*             (PRC EXTENSION REMOVES REQUIREMENT THAT JOB BE          *\n*             BUSY IN EXECUTION - IT STILL MUST HAVE GONE THROUGH     *\n*             CONVERSION HOWEVER.                                     *\n*                                                                     *\n*        $ D M 'JOBNAME',TEXT -- DISPLAY MSG ON EXECUTING JOB'S LOG   *\n*                                                                     *\n*        IF JOB IS IN EXECUTION, THIS EXIT RETURNS DIRECTLY TO        *\n*        HASPCOMM TO PROCESS THE COMMAND. IN ADDITION MOST ERROR      *\n*        CONDITIONS ARE RETURNED TO HASPCOMM FOR PROCESSING.          *\n*        HASPCOMM SHOULD DISCOVER THE SAME ERROR AND ISSUE            *\n*        THE APPROPRIATE ERROR MESSAGE.                               *\n*                                                                     *\n***********************************************************************\n         USING JQEDSECT,R1                                           R4\nCDM      DS    0H                                                    R4\n*\n*        THE FOLLOWING CODE BASICALLY COPIED FROM JES2 VER 4.1\n*\n         MVC   COMJNAME,=CL8' '    BLANK OUT JOB NAME SLOT          R41\n         SLR   R2,R2               SET OFFSET FOR JOB NO            R41\n         CLI   COMOPRND+1,C'J'     CHECK FOR JOB                    R41\n         BE    CDMJOBID            BRANCH IF YES TO EXTRACT JOBID   R41\n         LA    R2,QUESTC          CHECK STC\n         CLI   COMOPRND+1,C'S'     CHECK FOR STC                    R41\n         BE    CDMJOBID            BRANCH IF YES TO EXTRACT JOBID   R41\n         LA    R2,QUETSU          CHECK TSU\n         CLI   COMOPRND+1,C'T'     CHECK FOR TSU                    R41\n         BE    CDMJOBID            BRANCH IF YES TO EXTRACT JOBID   R41\n         CLI   COMOPRND+1,C''''    SEE IF JOBNAME (STARTS W/ QUOTE) R41\n         BNE   NOTFND             RETURN TO HASPCOMM IF NOT\n         SPACE 1\n         LA    R1,COMOPRND+2       POINT TO 1ST CHAR OF JOBNAME     R41\n         L     R4,4(,R5)           POINT TO END OF NAME + 2         R41\n         SLR   R4,R1               COMPUTE MACHINE                  R41\n         SH    R4,=H'3'              TEXT LENGTH                    R41\n         BM    CDMERR              ERROR IF NOT VALID               R41\n         LA    R0,7                ENSURE                           R41\n         CLR   R4,R0                 LENGTH                         R41\n         BNH   CDMJEX                NOT                            R41\n         LR    R4,R0                 OVER 7                         R41\nCDMJEX   EX    R4,CDMJNMV          MOVE IN JOB NAME                 R41\n         SLR   R4,R4               SHOW JQE NOT FOUND YET           R41\nCDMJSCAN DS    0H                  BRANCH HERE TO RE-SCAN           R41\n        $CFJSCAN PROCESS=CDMJC0,   SCAN JOB QUEUE,                  R41C\n               EMPTY=CDMJNJF,        LOOKING FOR                    R41C\n               NEXT=CDMJNEXT,        MATCHING                       R41C\n               IGNORE=CDMJNG         JOBNAME                        R41\n         LTR   R2,R4               AT END OF SCAN, CHECK FOR ONLY 1 R41\n         BNM   CDMJXEQ               JOB FOUND, BRANCH IF SO        R41\n         SPACE 1\n*        ERROR CONDITION - MULTIPLE OR NO JOBS FOUND\n*        RETURN TO HASPCOMM AS IF WE DIDN'T PROCESS COMMAND\n*        HASPCOMM WILL ISSUE ERROR MESSAGE\n         SPACE 1\nCDMJNJF  B     NOTFND             RETURN AND LET HASPCOMM DOIT\nCDMERR   EQU   NOTFND             RETURN ON ERRORS\n         SPACE 1\nCDMJC0   CLC   JQEJNAME,COMJNAME   SEE IF DESIRED JOBNAME,          R41\n         BNE   CDMJNG                CONTINUE SCAN IF NOT           R41\n         LTR   R4,R4               SEE IF FOUND BEFORE,             R41\n         BNZ   CDMJNJF            BIF ALREADY FOUND TO HASPCOMM     R41\n         LR    R4,R1               SHOW JQE FOUND                   R41\n         B     CDMJNEXT            CONTINUE SCAN                    R41\n         SPACE 1\nCDMJOBID $CFCVB POINTER=(R5),NOK=CDMERR        EXTRACT JOBID        R41\n         CLR   R0,R1               RANGE CANNOT BE SPECIFIED        R41\n         BNE   CDMERR              ERROR IF RANGE                   R41\n        $QLOC  (R1)                SEE IF SPECIFIED JOB EXISTS      R41\n         BZ    CDMJNJF             ERROR IF JOB NOT FOUND           R41\n         IC    R15,JQEFLAG3       CHECK JOB TYPE\n         N     R15,=F'3'           TO DETERMINE\n         CR    R15,R2               IF JOB/STC/TSU\n         BNE   CDMJNJF               CORRECT\n         SPACE 1\n         LR    R2,R1               SAVE JQE POINTER IN WA           R41\n         MVC   COMJNAME,QUEJNAME(R2) SAVE JOB NAME                  R41\nCDMJXEQ  DS    0H                  ENTRY FROM $DM'JOBNAME','TEXT    R41\n         TM    QUETYPE(R2),$XEQ   QUEUED FOR XEQ?                   R41\n         BZ    NOTXEQNG           NOT EXECUTING-PRC EXTENSTION\n         CLI   QUETYPE(R2),$XEQ    RETEST FOR EXECUTION             R41\n         BE    NOTFND              ERROR IF REALLY CONVERSION       R41\n*                                  SO JUST RETURN TO HASPCOMM\n*        PRC EXTENSION DOESN'T WORK UNTIL AFTER CONVERSION\n         IC    R0,QUEFLAGS(R2)     PICK UP BUSY FLAGS FOR JOB       R41\n         N     R0,=A(QUEBUSY)      ISOLATE BUSY SYSTEM ID           R41\n         BNZ   NOTFND             BIF BUSY, LET HASPCOMM DOIT\n         TITLE 'PRC EXTENSION TO $DMJ TO REMOVE EXECUTING RESTRICTION'\n*        JOB FOR WHICH $DM HAS BEEN ISSUED IS NOT EXECUTING.\n*        GO FIND ITS LOG, AND ADD THE MESSAGE TO IT.\n         SPACE 1\nNOTXEQNG DS    0H                 JOB NOT EXECUTING\n         SR    R10,R10            SHOW NO JCT YET\n         ST    R2,PCEJQE          SAVE JQE ADR\n         MVC   COMEWORK,0(R2)     SAVE 1ST 4 BYTES FOR VERIFICATION\n         L     R1,0(R5)           --> POTENTIAL BAD OPERAND\n         BXLE  R5,R6,GOTXT        STEP TO NEXT OPERAND\n         $CFINVO OPERAND=(R1)     SAY INVALID - NO MSG\nGOTXT    LM    R4,R5,0(R5)        START/END TXT + 2\n         MVI   0(R5),X'FF'        PRESET LAST REC INDICATOR\n         SLR   R5,R4              MSG LENGTH\n         $GETBUF ,                GET A WORKING BFR\n         BNZ   GOTBFR             BIF GOT\n         MVI   BADCODE,C'B'       ERROR REASON\n         B     BADCBKS            GO SAY NOT OK\n         SPACE 1\nGOTBFR   DS    0H\n         LR    R10,R1             FOR JCT ADDRESSABILITY\n         MVI   PCEDEVTP,PCEDARD   READ DEV TYPE\n         ST    R10,PCEBUFAD       BFR ADR TO DA DCT\n         MVC   PCESEEK,QUETRAK(R2)  JCT MTTR TO DCT\n         LA    R1,PCEDADCT        --> DCT\n         MVI   BADCODE,C'J'       POTENTIAL BAD REASON\n         $EXCP (R1),WAIT=YES      READ THE JCT\n         BM    BADCBKS            BIF I/O ERROR\n         SPACE 1\n         USING JCTDSECT,R10\n         MVC   COMDWORK,JCTJOBID  SAVE JOBID FOR MSG\n         ICM   R3,15,JCTJBKEY     GET JOB KEY FOR VERIFICATION\n         MVC   PCESEEK,JCTIOT     --> IOT TRACK\n         LA    R1,PCEDADCT        --> DCT\n         MVI   BADCODE,C'I'       POTENTIAL BAD REASON\n         $EXCP (R1),WAIT=YES      READ THE IOT\n         BM    BADCBKS            BIF I/O ERROR\n         SPACE 1\n         USING IOTDSECT,R10\n         MVI   BADCODE,C'K'       POTENTIAL BAD REASON\n         C     R3,IOTJBKEY        KEY MATCH JCT?\n         BNE   BADCBKS            BIF NOT\n         L     R2,$IOTPDDB        DISPL OF FIRST PDDB\n         LA    R2,PDBLENG(R2)     --> 2ND PDDB\n         AR    R2,R10             --> LOG PDDB\n         USING PDBDSECT,R2\n         MVI   BADCODE,C'L'       SET POTENTIAL REASON\n         CLC   =H'2',PDBDSKEY     IS THIS THE LOG PDB?\n         BNE   BADCBKS            BIF NOT\n         MVC   PCESEEK,PDBMTTR    LOG MTTR\nLOGRLOP  LA    R1,PCEDADCT        --> DCT\n         $EXCP (R1),WAIT=YES      READ FIRST/NEXT LOG TRACK\n         BM    BADCBKS            BIF I/O ERROR\n         USING BUFDSECT,R10\n         C     R3,HDBJBKEY        KEY MATCH?\n         BNE   BADCBKS            BIF NOT\n         CLC   =H'2',HDBPDDBK     LOG DATASET?\n         BNE   BADCBKS            BIF NOT\n         SPACE 1\n         TM    COMEWORK+QUETYPE,$XEQ  XEQ JOB?\n         BO    USEIT              USE FIRST REC FOR INPUT JOBS\n         ICM   R1,15,HDBNXTRK     PICKUP NEXT TRACK\n         BZ    USEIT              USE LAST REC FOR OTHER JOBS\n         ST    R1,PCESEEK         ELSE SET CHAIN TRACK ADR\n         B     LOGRLOP             AND READ NEXT TRACK\n         SPACE 1\nUSEIT    DS    0H                 USE THIS LOG BUFFER\n*        WE NOW HAVE THE LOG BUFFER WE ARE GOING TO USE. SCAN FOR THE\n*        END OF THE BUFFER, AND ADD OUR MESSAGE.  ALL OUR MESSAGES\n*        THEREFORE COME AT THE END OF CONVERSION MESSAGES.\n         SPACE 1\n         LA    R2,HDBSTART        --> FIRST DATA RECORD\n         SR    R1,R1              CLEAR WORK REG\n         USING LRCDSECT,R2        DECLARE IT\n         MVI   BADCODE,C'S'       SET POTENTIAL SPANNED REC REASON\nNXTLREC  CLI   LRCTLENG,255       LAST RECORD?\n         BE    LASTLREC           BIF END\n         IC    R1,LRCTLENG        PICKUP LENGTH\n         TM    LRCFLAG1,LRC1CCTL  HAVE CARR CTL?\n         BZ    NOCCTL             BIF NOT\n         LA    R1,1(R1)           STEP LEN 1 FOR CAR CTL\nNOCCTL   TM    LRCFLAG1,LRC1SPAN  SPANNED RECORD?\n         BO    BADCBKS            CAN'T PROCESS SPANNED HERE\n         LA    R2,3(R2,R1)        STEP TO NEXT RECORD\n         B     NXTLREC             AND PROCESS IT\n         SPACE 1\nLASTLREC DS    0H                 HAVE POINTER TO LAST LOG REC\n         LA    R3,35(R5)          LNGTH FULL MSG MINUS X'FF'\n         LA    R15,5(R3,R2)       CALCULATE END ADR\n         LR    R14,R10              AND DETERMINE\n         AH    R14,$BUFSIZE         IF MSG WILL FIT\n         CR    R15,R14            DOES IT?\n         BL    FITSOK             BIF FITS\n         MVI   BADCODE,C'F'       ERROR REASON\n         B     BADCBKS            SAY NOT OK\n         SPACE 1\nFITSOK   DS    0H\n         STC   R3,LRCTLENG        SAVE LENGTH\n         MVI   LRCFLAG1,LRC1CCTL+LRC1TASA  FLAG ASA CONTROL\n         STC   R3,LRCLRECL         AND ORIGINAL LENGTH\n         LA    R2,1(R2)           STEP 1 MORE BECAUSE THIS CODE\n*                                  WAS ORIGINALLY WRITTEN NOT\n*                                  EXPECTING CARR. CTL AND THE\n*                                  ABOVE INSTR. CORRECTS FOR ASA.\n         SPACE 1\n*        WC POINTS TO NEW MESSAGE TO BE ADDED\n*        WA IS ITS NEW OUTPUT POSITION, AND WD IS ITS LENGTH\n         SPACE 1\n         TIME  DEC                TIME?\n         ST    R0,$DOUBLE           SAVE HHMMSSTH\n         MVC   2(CDMJEDTL,R2),CDMJEDIT MOVE EDIT & FILL CHARS\n         ED    2(9,R2),$DOUBLE  EDIT TIME OF DAY\n         MVC   12(8,R2),COMDWORK  JOBID TO MSG\n         TM    COMFLAG,CMBFLAGU    IF MSG FROM LOCAL CONSOLE,       R41\n         BO    CDMVCTX2              LEAVE ID AT 'OPER'             R41\n         SPACE 1\n*        THIS SECTION OF CODE ESSENTIALLY COPIED FROM JES2 R4.1\n*        IT DOES NOT PROPERLY IDENTIFY NJE NODAL OPERATORS\n*        IF SOMEONE CONVERTS THIS TO JES/SP WITH FULL NJE\n*        IDENTIFICATION, PLEASE SEND ME A COPY.\n         SPACE 1\n         MVC   X'1F'(4,R2),=X'D9202120' MOVE 'R' & EDIT PATTERN\n         SLR   R0,R0               PICK UP                          R41\n         IC    R0,COMRMT             REMOTE NUMBER                  R41\n         CVD   R0,$DOUBLE            CREATE DECIMAL NUMBER\n         LA    R1,X'22'(R2)          PRESET SIGNIF. CHAR. POINTER\n         EDMK  X'1F'(4,R2),$DOUBLE+6     EDIT NUMBER AND\n         MVC   X'20'(4,R2),0(R1)         LEFT-JUSTIFY\n         SPACE 1\nCDMVCTX2 EX    R5,MVCLOGR         MOVE TEXT\n*        END MSG MARKER (X'FF') MOVED WITH INSTR ABOVE\n         L     R2,PCEJQE          --> OUR JQE\n         CLC   COMEWORK,0(R2)     HAS JOBTYPE OR NUMBER CHANGED?\n         BNE   BADCBKS            BIF SO\n         SPACE 1\n         MVI   PCEDEVTP,PCEDAWR   MAKE DCT FOR WRITE\n         LA    R1,PCEDADCT        --> DCT\n         $EXCP (R1),WAIT=YES      REWRITE THE CONSOLE BLOCK\n         $FREEBUF (R10)           FREE OUR BUFFER\n         $CRET MSG='OK'\n         SPACE 1\nBADCBKS  DS    0H                 BAD CONTROL BLOCKS/DATA/ETC.\n         LTR   R10,R10            DID WE GET A BFR?\n         BZ    BADMSG             BIF NOT\n         $FREEBUF (R10)           FREE IT\n         SR    R10,R10            NO MORE BFR\nBADMSG   DS    0H                 SEND THE MESSAGE\n         MVC COMMAND(16),=C'$DM NOT DONE (X)'  SAY NOT OK\n         MVI   COMMAND+14,C'X'    BETTER REASON TO MSG\nBADCODE  EQU   *-3\n         $CRET L=16               THATS ALL FOLKS\n         SPACE 1\nMVCLOGR  MVC   38(*-*,R2),0(R4)   EXECUTED MOVE TEXT\nCDMJNMV  MVC   COMJNAME(*-*),0(R1) *** EXECUTE ONLY ***             R41\nCDMJEDIT DS    0C                  EDIT PATTERNS AND FILLER         R41\n         DC    X'4021204B20204B2020'                                R41\n         DC    C' JOB NNNN  '                                       R41\nS34CONST DC    C'MSG FROM OPER:    '                                R41\nS34HEADR EQU   S34DTEXT,L'S34CONST LOCATION OF ABOVE TEXT           R41\nS34EDIT  EQU   S34HEADR+9,4        EDIT PATTERN OVERLAYS 'OPER'     R41\nS34MSG   EQU   S34HEADR+16         TEXT OF MESSAGE                  R41\nCDMJEDTL EQU   *-CDMJEDIT          LENGTH FOR INITIAL MOVE          R41\n         LTORG\n         SPACE 1\n         TITLE '$OP COMMAND'\n*\n*        LIST NUMBER OF JOBS AND LINE COUNTS FOR A DESTINATION\n*\n         SPACE 1\nCMDOP    $COMGRUP OP,DELAY=YES    DEFINE OP ENTRY\nCOP      DS    0H\n         BAL   R14,COFRTD         SET DEFAULT ROUTE\n         LR    R2,R1              SAVE ROUTE CODE\n         BXH   R5,R6,DOPSCAN      BIF NO ROUTE SPECIFIED\n         BAL   R14,COFRTR         GO DECODE ROUTE CODE\n         BNZ   DOPSCAN            BIF COULDN'T DECODE\n         LR    R2,R1              SAVE ROUTE CODE\n         SPACE 1\nDOPSCAN  DS    0H                 SCAN JOES FOR JOBS THIS DEST\n*\n*        COUNT NUMBER OF JOBS AND LINES FOR PRINT STD FORMS,\n*        PRINT SPECIAL SETUP, AND PUNCH\n*\n*        COUNTS HELD IN REGS - HI BYTE = JOB COUNT, LO 3 = LINES\n*        WF=PRINT STD.\n*        WE=PRINT SPEC\n*        WD=PUNCH\n*\n         SR    R5,R5              CLEAR\n         SR    R6,R6               COUNTER\n         SR    R7,R7                REGS\n         SPACE 1\n         SR    R3,R3              SET FOR CLASS A SCAN\n         B     COPCLASS           PROCESS IT\nCOPNXTC  LA    R3,4(R3)           STEP TO NXT CLASS\n         CH    R3,=AL2((2*4*36)-1)  FINISHED?\n         BNL   COPTHRU            BIF SO\n         SPACE 1\nCOPCLASS L     R1,$JOTABLE        --> JOT\n         USING JOTDSECT,R1\n         LA    R1,JOTNTWKQ-(JOENEXT-JOEDSECT)(R3)  --> QUEUE\n         DROP  R1\n         USING JOEDSECT,R1\nCONXTJOE DS    0H                 --> NEXT JOE\n         L     R1,JOENEXT         --> NEXT JOE\n         LA    R1,0(R1)           CLEAR TOP BYTE\n         LTR   R1,R1              END OF CHAIN?\n         BZ    COPNXTC            NXT CLASS IF NONE\n         A     R1,$JOTABLE        COMPUTE ACTUAL JOE ADR\n         SPACE 1\n         L     R14,JOEDEST        DEST FROM PDDB\n         LTR   R14,R14            ONE SPECIFIED?\n         BNZ   COGOTRT            BIF SO\n         L     R4,JOEJQE          JQE OFFSET\n         LA    R4,0(R4)           PURIFY\n         AL    R4,$JOBQPTR        THEN REAL JQE ADR\n         L     R14,JQEPRTRT-JQEDSECT(R4)  PICKUP JQE DEST\nCOGOTRT  CR    R2,R14             ROUTE MATCH?\n         BNE   CONXTJOE           NXT JOE IF NOT\n         CLI   JOECURCL,C'B'      CHECK CLASS\n         BE    COPCH              COUNT PUNCH\n         BH    COSPEC             COUNT SPECIAL IF HIGH\n         SPACE 1\n         ICM   R4,15,JOECHAR      CHAR JOE OFFSET\n         BZ    COSTD              BIF NONE - NETWORK JOE\n         LA    R4,0(R4)           PURIFY\n         A     R4,$JOTABLE        REAL ADDRESS\n         SPACE 1\nCOSTD    CLC   =C'STD ',JOEFORM-JOEDSECT(R4)  STANDARD FORMS?\n         BNE   COSPEC             SPECIAL IF NOT\n         CLC   =C'********        ',JOEFCB-JOEDSECT(R4) FCB,UCS,WTR\n         BNE   COSPEC             SPECIAL IF NOT\n         SPACE 1\n         AL    R7,JOERECCT        SUMM RECORDS\n         AL    R7,=X'01000000'    COUNT JOB\n         B     CONXTJOE           NXT JOE\n         SPACE 1\nCOSPEC   AL    R6,JOERECCT        SUM RECORDS\n         AL    R6,=X'01000000'    COUNT JOB\n         B     CONXTJOE           NXT JOE\n         SPACE 1\nCOPCH    AL    R5,JOERECCT        SUM RECORDS\n         AL    R5,=X'01000000'    COUNT JOB\n         B     CONXTJOE           NXT JOE\n         SPACE 1\nCOPTHRU  DS    0H                 JOES COUNTED, BUILD REPLY\n         ST    R2,COMDWORK        INPUT PARM\n         LA    R15,COMDWORK       POINT TO DESTINATION\n         LA    R0,COMMAND         --> OUTPUT AREA\n         BAL   R14,COFRTC         CONVERT ROUTE CODE TO PRINTABLE\n         SPACE 1\nCOSPRI   MVC   COMMAND+12(11),=C'  PRINT STD'\n         LA    R4,COMMAND+22      --> OUTPUT POSITION\n         LR    R1,R7              STD COUNTS\n         BAL   R14,COPCONV        CONVERT STD\n         MVC   0(6,R4),=C' SPEC'\n         LA    R4,5(R4)           STEP OVER IT\n         LR    R1,R6              SPECIAL COUNTS\n         BAL   R14,COPCONV        CONVERT SPECIAL\n         MVC   0(6,R4),=C' PUNCH'\n         LA    R4,6(R4)           STEP OVER\n         LR    R1,R5              PUNCH COUNTS\n         BAL   R14,COPCONV        CONVERT PUNCH\n         LA    R1,COMMAND         --> FIRST POSITION\n         SR    R4,R1              CALCULATE LENGTH\n         $CRET  L=(R4)            RETURN WITH MESSAGE\n         SPACE 1\nCOPCONV  DS    0H                 CONVERT JOB AND RECORD COUNTS\n         LTR   R2,R1              SAVE INPUT\n         BZ    CONONE             BIF NOTHING THIS CATEGORY\n         SRL   R1,24              PURIFY JOE COUNT\n         CVD   R1,COMDWORK        CONVERT TO DEC\n         MVC   0(4,R4),=X'40202021' MASK\n         ED    0(4,R4),COMDWORK+6 TO EBCDIC\n         LA    R2,0(R2)           CLEAR HI BYTE OF LINECOUNT\n         CVD   R2,COMDWORK        CONVERT\n         MVC   4(8,R4),=X'4020202021202020'\n         ED    4(8,R4),COMDWORK+4 TO EBCDIC\n         LA    R4,12(R4)          STEP OVER THIS OUTPUT\n         BR    R14                RETURN\nCONONE   MVC   0(6,R4),=C' NONE '\n         LA    R4,6(R4)           STEP OVER IT\n         BR    R14                 AND RETURN\n         DROP  R1\n         LTORG\n         SPACE 2\n         PRINT GEN\n         $MODEND\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT008": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\xde\\x00\\xde\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 222, "newlines": 222, "modlines": 0, "user": "SYZYGYB"}, "text": "EX8      TITLE 'PRC - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: EXIT008                                                *\n*                                                                     *\n* DESCRIPTIVE NAME: JES2 EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT  *\n*                                                                     *\n* AUTHOR: BRIAN WESTERMAN                                             *\n*                                                                     *\n* DATE WRITTEN: MAY 1986                                              *\n*                                                                     *\n* FMID: HJE2330 (MVS/SP-JES2 1.3.4)                                   *\n*                                                                     *\n* PURPOSE: THIS EXIT PLACES OBTAINS AND STORES IN THE JCT EITHER      *\n*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *\n*          THE ABEND CODE OF THE JOB.                                 *\n*                                                                     *\n* INVOCATION POINT: EXIT008                                           *\n*                                                                     *\n* ENTRY POINT: EXIT008                                                *\n*                                                                     *\n* REGISTERS ON INPUT:                                                 *\n*     R0: CODE PASSED BY JES2                                         *\n*         =0, INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL         *\n*         =4, INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL         *\n*     R1: ADDRESS OF THE JCT                                          *\n*     R2-R10: N/A                                                     *\n*     R11: ADDRESS OF THE SSVT                                        *\n*     R12: N/A                                                        *\n*     R13: ADDRESS OF AN OS-STYLE SAVE AREA                           *\n*     R14: RETURN ADDRESS                                             *\n*     R15: ENTRY ADDRESS                                              *\n*                                                                     *\n* REGISTERS ON RETURN:                                                *\n*     R0-R1: N/A                                                      *\n*     R15: A RETURN CODE:                                             *\n*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *\n*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *\n*              PROCESSING                                             *\n*                                                                     *\n* JES2 MACROS USED:                                                   *\n*     $ENTRY, $MODEND                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nEXIT008  $MODULE ENVIRON=USER,                                         C\n               SSOB,                   REQ'D TO DETERMINE INVOKER      C\n               $BUFFER,                REQ'D BY JCT                    C\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C\n               $JCT,                   REQ'D TO SAVE ABEND/COND CODE   C\n               $MIT,                   REQ'D BY $MODEND, HCT           C\n               $SCAT,                  REQ'D BY $SVT                   C\n               $SJB,                   REQ'D TO DETERMINE INVOKER      C\n               $SVT,                   REQ'D TO DETERMINE INVOKER      C\n               $XECB                   REQ'D BY $SVT\n         TITLE 'PRC - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n*  INITIALIZATION                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT08   $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE 3\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         LR    R10,R1                  GET ADDRESS OF JCT\n         SLR   R15,R15                 SET DEFAULT RETURN CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THERE IS A JCT , IF IT IS FOR A BATCH JOB AND      *\n*  IF NOTIFY WAS REQUESTED.  IF NOT, RETURN.                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTR   R0,R0                   IS JCT BEING READ?\n         BZ    RETURN                  YES, RETURN\n         SPACE 1\n         CLI   JCTJOBID,C'J'           IS THIS A BATCH JOB?\n         BNE   RETURN                  NO, RETURN\n         SPACE 1\n         CLI   JCTTSUID,C' '           WAS NOTIFY REQUESTED?\n         BE    RETURN                  NO, RETURN\n         SPACE 1\n         TM    JCTJBOPT,JCTXBACH       IS THIS AN EXECUTION BATCH      C\n                                         MONITOR?\n         BO    RETURN                  YES, RETURN\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  FIND THE SJB ON THE JOBS EXECUTING BY CLASS QUEUE THAT BELONGS TO  *\n*  THIS JOB'S JCT.  IF THE SJB INDICATES THE JOB IS NOT IN            *\n*  TERMINATION, THEN RETURN.                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING $SVDSECT,R11            PROVIDE SSVT ADDRESSABILITY\n         SPACE 1\n         L     R2,$SVJXCLS             GET EXECUTING SJB'S QUEUE\n         USING SJBDSECT,R2             PROVIDE SJB ADDRESSABILITY\nGETSJB   DS    0H\n         LTR   R2,R2                   TEST FOR END OF QUEUE\n         BZ    RETURN                  RETURN IF NO MATCH\n         CLC   JCTJOBID(8),SJBJOBID    IS THIS THE SJB FOR THIS JCT?\n         BE    FOUNDSJB                YES, PROCESS IT\n         L     R2,SJBXQCHN             GET POINTER TO NEXT SJB\n         B     GETSJB                  LOOP BACK THRU\n         SPACE 1\nFOUNDSJB DS    0H\n         CLI   SJBXQFN1+1,SSOBTERM     WAS EXIT INVOKED BY JOB         C\n                                         TERMINATION (HOSTERM)?\n         BNE   RETURN                  NO, RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*  FIND THE OS JCT FOR THIS JOB AND CHECK TO SEE IF THE JOB ABENDED.  *\n*  IF IT DID ABEND, GET THE ABEND CODE.                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETCVT   EQU   *\n         L     R2,CVTPTR               LOAD ADDR OF CVT POINTER\n         L     R2,0(R2)                LOAD ADDR OF NEXT/CURR TCB'S\n         L     R2,OURTCB(R2)           LOAD ADDR OF OUR TCB\n         L     R2,TCBJSCB(R2)          LOAD ADDR OF JSCB\n         L     R2,JSCBACT(R2)          LOAD ADDR OF ACTIVE JSCB\n         L     R2,JSCBJCT(R2)          LOAD ADDR OF OS JCT\n         USING INJMJCT-16,R2           ESTABLISH OS JCT ADDRESSABILITY\n         SPACE 1\n         TM    JCTJSTAT,JCTABEND       DID JOB ABEND?\n         BNO   GETMAXCC                NO, GET MAXIMUM CONDITION CODE\n         L     R3,JCTACODE             YES, GET ABEND CODE\n         B     SAVECODE                GO TO SAVE IT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  IF THE JOB DID NOT ABEND, THEN SCAN THE SCT'S FOR THE JOB AND      *\n*  FIND THE MAXIMUM CONDITION CODE OUT OF ALL THE JOB'S STEPS.        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETMAXCC DS    0H\n         L     R2,JCTSDKAD             GET FIRST SCT ADDRESS\n         USING INSMSCT-16,R2           ESTABLISH SCT ADDRESSABILITY\n         SPACE 1\n         SLR   R3,R3                   ZERO OUT WORK REGISTER\n         SPACE 1\nSCTLOOP  DS    0H\n         SRL   R2,8                    GET ADDRESS IN PROPER FORM\n         LTR   R2,R2                   ARE THERE ANY MORE SCT'S?\n         BZ    SAVECODE                NO, GO TO FINISH\n         TM    SCTSTEND,SCTSTRUN       DID STEP RUN?\n         BNO   NEXTSCT                 NO, GET NEXT SCT\n         CH    R3,SCTSEXEC             IS THIS STEP'S CONDITION CODE   C\n                                         GREATER THAN THE MAXIMUM?\n         BNL   NEXTSCT                 NO, GET NEXT SCT\n         LH    R3,SCTSEXEC             YES, SAVE NEW MAX COND CODE\nNEXTSCT  DS    0H\n         L     R2,SCTANSCT             GET NEXT SCT\n         B     SCTLOOP                 LOOP TO CHECK NEXT SCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SAVE EITHER THE ABEND CODE OR THE MAXIMUM CONDITION CODE FOR       *\n*  ANY STEP OF THE JOB IN A JCT USER FIELD.  THIS INFORMATION WILL    *\n*  BE USED LATER IN EXIT016 - TSO NOTIFY.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSAVECODE DS    0H\n         ST    R3,JCTUSER1             SAVE ABEND/MAX COND CODE\n         MVI   JCTUSER1,X'80'          MARK IT AS PROCESSED\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  GO BYE-BYE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRETURN   DS    0H\n         L     R14,12(R13)             LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)          RESTORE REGISTERS\n         BR    R14                     RETURN\n         EJECT\nPATCH    DS    CL200\n         DC    CL8'ENDPATCH'\nCVTPTR   EQU   X'10'         ADDRESS OF CVT POINTER\nOURTCB   EQU   X'04'         OFFSET INTO TCB LIST OF OUR TCB ADDRESS\nTCBJSCB  EQU   X'B4'         OFFSET INTO TCB OF JSCB ADDRESS\nJSCBACT  EQU   X'15C'        OFFSET INTO JSCB OF ACTIVE JSCB ADDRESS\nJSCBJCT  EQU   X'104'        OFFSET INTO ACTIVE JSCB OF OS JCT ADDRESS\n         SPACE 3\nJCTDSCT  DSECT\n*        THIS CONTROL BLOCK IS A COPY OF OS JCT DEFINING\n*        ONLY THOSE FIELDS USED BY THIS MOD.  THE OS JCT,\n*        IEFAJCTB, CONTAINS DUPLICATE FIELD NAMES OF THOSE\n*        USED BY THE JES2 JCT (JCTID, JCTJNAM, AND JCTJMR)\n*        AND CAUSES ASSEMBLY ERRORS IF IT USED.\nINJMJCT  EQU    *\n         DS     CL5                    FILLER\nJCTJSTAT DS     1C                     JOB STATUS INDICATORS\nJCTABEND EQU    8                      BIT 4 - JCT ABEND BIT\n         DS     CL26                   FILLER\nJCTSDKAD DS     CL4                    DISK ADDRESS OF FIRST SCT\n         DS     CL132                  FILLER\nJCTACODE DS     CL4                    ABEND CODE FIELD\n         EJECT\n         PUSH   PRINT\n         PRINT  NOGEN\nSCTDSCT  DSECT\n         IEFASCTB\nSCTSTEND EQU    INSMSCT+X'AC'          BITS AND PIECES\nSCTSTRUN EQU    X'C0'                  STEP STARTED/ENDED BIT\n         POP    PRINT\nEXIT008  CSECT\n         SPACE  3\n         LTORG\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT05UD": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x011\\x011\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 305, "newlines": 305, "modlines": 0, "user": "SYZYGYB"}, "text": "EXIT05UD TITLE 'PRC UNDUMP COMMAND'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT:  MVS SP 1.3.4  LEVEL 8310                       *\n*                      JES2 FOR SP 1.3.4                              *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM PERFORMS ONLY ONE FUNCTION.  IT       *\n*        PROCESSES THE PRC ADDED \"UNDUMP\" COMMAND TO TAKE ALL         *\n*        JOBS AND SYSOUT OFF THE DUMP QUEUE AND RESTORE THEM TO       *\n*        THE QUEUES FROM WHICH THEY CAME.  THIS SYSTEM OPERATOR       *\n*        COMMAND WAS ADDED BECAUSE THERE IS NO OTHER WAY TO RE-       *\n*        STORE FROM THE DUMP QUEUE WITHOUT ACTUALLY GOING AHEAD       *\n*        WITH THE OFFLOAD/RELOAD PROCEDURE.                           *\n*                                                                     *\n*        INSTALLATION:                                                *\n*            PLANNING RESEARCH CORPORATION                            *\n*                                                                     *\n*        AUTHOR:                                                      *\n*            BRIAN WESTERMAN                                          *\n*                                                                     *\n*        CODING-STARTED:                                              *\n*            MARCH 27, 1987                                           *\n*                                                                     *\n*        REGISTER-ENTRY-CONVENTIONS:                                  *\n*            R0 - R4  = N/A                                           *\n*            R5       = A(A(CURRENT OPERAND))                         *\n*            R6       = INCRAMENT VALUE OF 4                          *\n*            R7       = A(A(LAST OPERAND))                            *\n*            R8 - R10 = N/A                                           *\n*            R11      = A(HCT)                                        *\n*            R12      = N/A                                           *\n*            R13      = A(HASPCOMM PCE)                               *\n*            R14      = RETURN ADDRESS                                *\n*            R15      = ENTRY ADDRESS                                 *\n*                                                                     *\n*        REGISTER-EXIT-CONVENTIONS:                                   *\n*            R0       = MESSAGE LENGTH IF R15 = 16                    *\n*            R1 - R14 = RESTORED TO ENTRY VALUE                       *\n*            R15      = EXIT RETURN CODE.                             *\n*                                                                     *\n*        MAINTENANCE HISTORY:                                         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\n         EJECT\nEX005UD  $MODULE   SYSP=(NOGEN,GEN,NODATA,NOGEN,NOGEN),                X\n               ENVIRON=JES2,                                           X\n               TITLE='PRC UNDUMP COMMAND',                             X\n               RESPA,                                                  X\n               $BUFFER,                HASP BUFFER                     X\n               $CAT,                   CLASS ATTRIBUTE TABLE           X\n               $COMWORK,               PCE COMMAND WORK AREA           X\n               $CMB,                   CONSOLE MESSAGE BUFFER          X\n               $DCT,                   DEVICE CONTROL TABLE            X\n               $DOE,                   DUMP OUTPUT ELEMENT             X\n               $HASPEQU,               HASP EQUATES                    X\n               $HCT,                   HASP CONTROL TABLE              X\n               $JCT,                   JOB CONTROL TABLE               X\n               $JOE,                   JOB OUTPUT ELEMENT              X\n               $JOT,                   JOB OUTPUT TABLE                X\n               $JQE,                   JOB QUEUE ENTRY                 X\n               $MIT,                   MODULE IDENTIFICATION TABLE     X\n               $PCE,                   PROCESSOR CONTROL ELEMENT       X\n               $SCAT,                  SYSOUT CLASS ATTRIBUTE TABLE    X\n               $TRP                    TRACE PARAMETER LIST\n         SPACE 1\n         TITLE '&TITLEID -- ENTRY CONVENTIONS'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n*                                                                     *\n*        REGISTER USAGE IN THIS EXIT ROUTINE:                         *\n*                                                                     *\n*        R0 - R1  = RESERVED FOR MACROS                               *\n*        R2 - R4  = ROUTINE WORK REGISTERS                            *\n*        R8       = ADDRESS OF THE JQE                                *\n*        R10      = ADDRESS OF THE JOE                                *\n*        R11      = ADDRESS OF THE HCT                                *\n*        R12      = ROUTINE'S BASE REGISTER                           *\n*        R13      = ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      = RESERVED FOR MACROS (BAL)                         *\n*        R15      = TEMPORARY WORK REGISTER                           *\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       = ADDR OF ADDR OF CURRENT OPERAND                   *\n*        R6       = INCREMENT VALUE OF 4                              *\n*        R7       = ADDR OF ADDR OF LAST OPERAND                      *\n*        R11      = ADDRESS OF THE HCT                                *\n*        R13      = ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      = RETURN ADDRESS                                    *\n*        R15      = ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         DROP ,\n         USING HCTDSECT,R11\n         USING PCEDSECT,R13\nEX05UD  $ENTRY BASE=R12\n         SPACE 1\n        $SAVE TRACE=YES         SAVE CALLER'S REGISTERS\n         LR    R12,R15          LOAD BASE REGISTER\n         LA    R8,COMMAND       POINTER TO COMMAND\n         SPACE 1\n         TITLE '&TITLEID -- VALIDITY CHECKS'\n***      CHECK FOR $UNDUMP COMMAND\n*\n         CLC   =C'UNDUMP ',COMVERB\n         BNE   RETURN0          EXIT IF NOT OUR COMMAND\n         TM    COMFLAG,CMBFLAGW COMMAND FROM REMOTE SOURCE?\n         BZ    TAG010            NO, BRANCH, CONTINUE ON.\n         LA    R2,ERMSG01       R2 = POINTER TO ERROR MESSAGE\n         LA    R3,L'ERMSG01     R3 = LENGTH OF ERROR MESSAGE\n         B     RETURN16         EXIT WITH ERROR MESSAGE\n         SPACE 1\nERMSG01  DC    C'BII999---INVALID REMOTE COMMAND'\n         SPACE 3\n***      CHECK FOR OUTSTANDING DUMP OUTPUT ELEMENTS (DOE'S)\n***       AND CANCEL REQUESTS FOR DUMPING IF NECESSARY.\n*\nTAG010   DS    0H\n         SLR   R2,R2            R2 = ZEROS\n         ICM   R3,15,$DOEPTR    R3 = A(FIRST DOE IN CHAIN)\n         BZ    TAG050           BRANCH IF NO DOE'S\nTAG020   DS    0H\n         CS    R3,R2,$DOEPTR    REMOVE ALL DOE'S FROM CHAIN\n         BNE   TAG020           TRY AGAIN IF NECESSARY\nTAG030   DS    0H\n         LTR   R3,R3            ANY MORE DOE'S IN CHAIN?\n         BZ    TAG050            NO, BRANCH, ALL DONE.\n         USING DOEDSECT,R3\n         L     R4,DOECHAIN      R4 = A(NEXT DOE OR ZERO)\n         DROP  R3\n        $FREMAIN R,LV=DOELENTH,A=(R3)\n        $CWTO MSG='PENDING DOE FREED, $DUMP WAS CANCELED',MSGID=901\n         LR    R3,R4\n         B     TAG030\n         EJECT\n***      CHECK TO SEE IF $DUMP PROCESSOR IS STILL RUNNING\n*\nTAG050   DS    0H\n         L     R15,$DMPQPCE     POINT TO DUMP QUEUE PCE BLOCK\n         USING PCEDSECT,R15\n         TM    PCEEWF,$EWFWORK  IS $DUMP PROCESSOR ACTIVE?\n         BO    TAG060            NO, BRANCH.\n         DROP  R15\n         LA    R2,ERMSG02       R2 = POINTER TO ERROR MESSAGE\n         LA    R3,L'ERMSG02     R3 = LENGTH OF ERROR MESSAGE\n         B     RETURN16         TRY AGAIN AT A LATER TIME\n         SPACE 1\nERMSG02  DC    C'BII999---NOT FINISHED DUMPING YET, TRY AGAIN LATER'\n         SPACE 3\n***      MAKE SURE NO OFFLOAD OR RELOAD DEVICES ARE RUNNING\n*\nTAG060   DS    0H\n         ICM   R3,15,$DMPDCT    R3 = A(DUMPER DEVICE CONTROL TABLE)\n         BZ    TAG080            BRANCH IF NO DUMPERS ARE DEFINED\n         USING DCTDSECT,R3\n         L     R2,DCTPCE        R2 = A(DUMPER/LOADER DEVICE PCE)\n         SLR   R4,R4            R4 = TERMINATION CONTROL\nTAG070   DS    0H\n         TM    DCTSTAT,DCTINUSE SPOOL OFF/RE-LOAD IN PROGRESS?\n         BO    TAG090            YES, DON'T ALLOW COMMAND!\n         ICM   R3,15,DCTCHAIN   END OF DCT CHAIN REACHED?\n         BZ    TAG080            YES, NO SPOOL ACTIVITY.\n         CL    R2,DCTPCE        END OF DUMPER/LOADER CHAIN?\n         BNE   TAG080            YES, NO SPOOL ACTIVITY.\n         B     TAG070            NO, CHECK THIS ONE TOO.\nTAG080   DS    0H\n         LTR   R4,R4            ALREADY DONE DUMPERS AND LOADERS?\n         BNZ   TAG110            YES, BRANCH, NOTHING RUNNING.\n         LA    R4,1\n         ICM   R3,15,$LODDCT    R3 = A(LOADER DEVICE CONTROL TABLE)\n         BZ    TAG110            BRANCH IF NO LOADERS ARE DEFINED,\n         B     TAG070            ELSE REPEAT CHECK FOR LOADERS.\n         DROP  R3\nTAG090   DS    0H\n         LA    R2,ERMSG03       R2 = POINTER TO ERROR MESSAGE\n         LA    R3,L'ERMSG03     R3 = LENGTH OF ERROR MESSAGE\n         B     RETURN16         MAKE OPERATOR POST DUMPER\n         SPACE 1\nERMSG03  DC    C'BII999---SPOOL OFFLOAD/RELOAD IN PROGRESS, POST FIRST'\n         SPACE 1\n         TITLE '&TITLEID -- RELEASE JOBS'\n***      GET EXCLUSIVE CONTROL OF SHARED QUEUES\n*\nTAG110   DS    0H\n        $QSUSE ,\n         SPACE 3\n***      CHECK ALL JOBS FOR BEING IN THE DUMP QUEUE\n*\n         LH    R3,$JOBMIN       R3 = FIRST VALID JOB NUMBER\n         LH    R4,$JOBMAX       R4 = LAST VALID JOB NUMBER\nTAG120   DS    0H\n        $QLOC  (R3)             DOES THIS JOB EXIST IN QUEUE?\n         BZ    TAG170            NO, BRANCH, NUM NOT IN USE.\n         USING JQEDSECT,R8\n         LR    R8,R1            R8 = POINTER TO JOB'S JQE\n*\n***      GET EXCLUSIVE CONTROL OF JOB QUEUE ELEMENT (JQE)\n*\n        $GETLOK TYPE=JOB,JQE=(R8)\n         CLI   JQETYPE,$DUMPQ   IS JOB ON DUMP QUEUE?\n         BNE   TAG130            NO, CHECK SYSOUT.\n*\n***      PLACE JQE BACK ON THE EXECUTION QUEUE\n*\n        $QPUT  (R8),$XEQ\n         SPACE 3\n***      CHECK ALL SYSOUT FOR BEING ON THE DUMP QUEUE\n*\nTAG130   DS    0H\n         L     R10,JQEJOE       R10 = OFFSET OF FIRST JOE\nTAG140   DS    0H\n         N     R10,$ZEROFFF     END OF JOE CHAIN REACHED?\n         BZ    TAG160            YES, BRANCH.\n         AL    R10,$JOTABLE     R10 = A(WORK JOE)\n         USING JOEDSECT,R10\n         TM    JOEFLAG2,$JOEDUMP  JOE FLAGGED FOR DUMP?\n         BZ    TAG150              NO, BRANCH.\n*\n***      PLACE JOE BACK ON THE SYSOUT QUEUE\n*\n         NI    JOEFLAG2,X'FF'-$JOEDUMP\n         LR    R2,R10           R2 = A(JOE TO BE MOVED)\n         L     R10,JOEJQNXT     R10 = OFFSET OF NEXT JOE\n        $#MOD  JOE=(R2)         QUEUE JOE BACK TO SYSOUT\n         B     TAG140           CHECK NEXT JOE IN CHAIN\n         SPACE 1\nTAG150   DS    0H\n         L     R10,JOEJQNXT     R10 = OFFSET OF NEXT JOE\n         B     TAG140           CHECK NEXT JOE IN CHAIN\n         DROP  R10\n         SPACE 3\n***      RELEASE EXCLUSIVE CONTROL OF JQE\n*\nTAG160   DS    0H\n        $FRELOK TYPE=JOB,JQE=(R8)\n         DROP  R8\nTAG170   DS    0H\n         AH    R3,=H'1'         INCRAMENT TO NEXT JOB NUMBER\n         CLR   R3,R4            END OF JOB NUMBERS REACHED?\n         BNH   TAG120            NO, BRANCH, CHECK IT OUT.\n         SPACE 3\n***      LET USER KNOW WE ARE ALL DONE\n*\n        $CWTO MSG='UNDUMP COMMAND COMPLETED',MSGID=902\n         B     RETURN12         RETURN, W/ HASP \"OK\".\n         SPACE 1\n         TITLE '&TITLEID -- EXIT'\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\n         SPACE     1\nRETURN0  DS    0H\n        $RETURN  RC=0,TRACE=YES    RETURN TO JES2\nRETURN4  DS    0H\n        $RETURN  RC=4,TRACE=YES    RETURN TO JES2\nRETURN8  DS    0H\n        $RETURN  RC=8,TRACE=YES    RETURN TO JES2\nRETURN12 DS    0H\n        $RETURN  RC=12,TRACE=YES   RETURN TO JES2\nRETURN16 DS    0H\n         MVI   COMMAND,X'40'    BLANK OUT MESSAGE AREA\n         MVC   COMMAND+1(255),COMMAND\n         LR    R0,R3\n        $STORE R0               R0 = LENGTH OF MESSAGE\n         BCTR  R3,0             R3 = EXECUTABLE LENGTH\n         EX    R3,RETURNEX\nRETURNEX MVC   COMMAND(0),0(R2) + EXECUTED +\n        $RETURN  RC=16,TRACE=YES   RETURN TO JES2\n         SPACE 1\n         TITLE '&TITLEID -- LITERALS'\n***********************************************************************\n*                                                                     *\n*        LITERALS AND CONSTANTS                                       *\n*                                                                     *\n***********************************************************************\n         LTORG\n         SPACE 1\n         TITLE '&TITLEID -- WORK AREAS'\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUDMPWORK DS    0XL128\n         DS    XL128            AVAILABLE\n         SPACE 1\n         TITLE '&TITLEID'\n         $MODEND ,\n         SPACE     3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT10": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00r\\x00r\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 114, "newlines": 114, "modlines": 0, "user": "SYZYGYB"}, "text": "EX10     TITLE '1.3.4 JES2 EXIT 10 - SEND JOB END MSG TO WYLBUR'\n***********************************************************************\n*                                                                     *\n*        JES2 EXIT 10. $WTO MESSAGE PROCESSOR                         *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         PRINT OFF,NOGEN          TURN OFF FOR COPY $HASPGBLS\n         COPY  $HASPGBL\n         PRINT ON,NOGEN\nEXIT010  $MODULE SYSP=(NOGEN,NOGEN,NODATA,NOGEN,NOGEN),                *\n               $HASPEQU,$KIT,$MIT,$MITETBL,$MODMAP,                    *\n               $TAB,$SJB,$PCE,$BUFFER,$JQE,$JOE,$JOT,$QSE,             *\n               $JCT,$PDDB,$IOT,$CAT,$SCAT,$HCT,$LRC,$CMB,              *\n               $RDRWORK,$EXITPL,$ERA,$DCT\nEXIT010  CSECT                    RESUME CSECT\n         SPACE 1\n         PRINT ON,GEN\n         TITLE '1.3.4 JES2 EXIT 10 - SEND JOB END MSG TO WYLBUR'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*        REGISTERS ON ENTRY ARE:                                      *\n*                                                                     *\n*                                                                     *\n*        REG. 1:    --> ADDRESS OF THE CMB                            *\n*                                                                     *\n*        REG. 2-9-----NOT SPECIFIED                                   *\n*                                                                     *\n*        REG. 10----==> JCT                                           *\n*                                                                     *\n*        REG. 11----==> HCT                                           *\n*                                                                     *\n*        REG. 12------NOT SPECIFIED                                   *\n*                                                                     *\n*        REG. 13----==> HASPRDR PCE                                   *\n*                                                                     *\n*        REG. 14------CONTAINS RETURN ADDRESS                         *\n*                                                                     *\n*        REG. 15------CONTAINS ENTRY POINT ADDRESS                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT10   $ENTRY CSECT=NO,BASE=R12\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER USAGE IN THIS EXIT:                                 *\n*                                                                     *\n*        REG. 1 CMB REGISTER                                          *\n*                                                                     *\n*                                                                     *\n*        REG. 10----==> JCT                                           *\n*                                                                     *\n*        REG. 11----==> HCT                                           *\n*                                                                     *\n*        REG. 12------BASE FOR CODE                                   *\n*                                                                     *\n*        REG. 13----==> HASPRDR PCE                                   *\n*                                                                     *\n*        ALL OTHER REGISTERS ARE USED AS LOCAL WORK REGISTERS,        *\n*        LINKAGE REGISTERS, MACRO PARAMETER REGISTERS, ETC.           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEX010    $SAVE NAME=PRCX10\n         SPACE 1\n         LR    R12,R15            ********** SET BASE FOR CODE\n         USING CMBDSECT,R1         NOTE CMB ADDRESSABILITY\n         USING JCTDSECT,R10\n         USING HCTDSECT,R11\n         USING PCEDSECT,R13\n         SPACE 2\n         CLC   =C'$HASP165 ',CMBMID       IS THIS A HASP165 MSG ?\n         BNE   FASTRETN                   IF NOT, GET OUT FAST\n         CLC   CMBJOBN,IEF097I            IS THIS EXTRA MSG\n         BE    NOPE                       YES,THROW IT AWAY\n         CLI   CMBUSER,C'$'            IS THIS A MSG FOR WYLBUR TO GET\n         BNE   FASTRETN                   IF NOT, GET OUT FAST\n         MVC   USERID,CMBUSER+1           STRIP '$' OFF USERID\n         MVC   JOBNUM,CMBJOBID            MOVE JOB NUMBER\n         MVC   JOBNAME,CMBJOBN            MOVE JOB NAME\n         MVC   ENDTIME,CMBTIME            MOVE TIME ENDED\n         MVC   TEXT(L'CMBTEXT),CMBTEXT    PUT MESSAGE TEXT IN\nSENDIT   LA    R3,MESSAGE                 LOAD MESSAGE INT R3\n         LA    R4,85                      PUT LENGTH IN R4\nWTOWYL   $WTO  (R3),(R4),JOB=NO,TYPE=SVC34,CMB=NO      TO WYLBUR\nNOPE     LA    R15,8               TELL NOT TO ISSUE ORIIGINAL NOTIFY\n         B     RETRN               EXIT\n         SPACE 1\nFASTRETN DS    0H                         FAST RETURN TO CALLER\n         SLR   R15,R15                    SET ZERO RETURN CODE\nRETRN    $RETURN RC=(R15)                 RETURN\n         SPACE 3\nMESSAGE  DS    0CL85\n         DC    CL2' '              BLANKS\nFWYLBUR  DC    CL12'F WYLBUR,TO '  PREFIX OF MESSAGE\nUSERID   DC    CL6'      '\n         DC    CL1' '\nENDTIME  DC    CL8'        '\n         DC    CL1' '\nJOBNUM   DC    CL8'        '\n         DC    CL1' '\nJOBNAME  DC    CL8'        '\n         DC    CL1' '\nTEXT     DC    CL37' '\nBUFFER   DC    CL150' '\nIEF097I  DC    CL8'IEF097I '        TRASH\n         SPACE 2\n         LTORG ,                   DEFINE LITERAL ORIGIN\n         TITLE 'MODIFY HASP165 MESSAGE -- EPILOG ($MODEND)'\n        $MODEND ,                  COMPLETE MODULE INFO TABLE\n         SPACE 2\n         END   ,                   END OF ASSEMBLY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT16": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\xc4\\x00\\xc4\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 196, "newlines": 196, "modlines": 0, "user": "SYZYGYB"}, "text": "EXIT016  TITLE 'PRC - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: EXIT016                                                *\n*                                                                     *\n* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT  *\n*                                                                     *\n* AUTHOR: BRIAN WESTERMAN                                             *\n*         PLANNING RESEARCH CORP.                                     *\n*                                                                     *\n*                                                                     *\n* DATE WRITTEN: MAY  1986                                             *\n*                                                                     *\n* FMID: HJE2330 (MVS/SP-JES2 1.3.4)                                   *\n*                                                                     *\n* PURPOSE: THIS EXIT MODIFIES THE $HASP165 MESSAGE BY ADDING EITHER   *\n*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *\n*          THE ABEND CODE OF THE JOB.                                 *\n*                                                                     *\n* ENTRY POINT: EXIT016                                                *\n*                                                                     *\n* REGISTERS ON INPUT:                                                 *\n*     R0: 0                                                           *\n*     R1: ADDRESS OF 3-WORD PARMETER LIST WITH THE FOLLOWING LAYOUT:  *\n*         WORD 1 (+0) ADDRESS OF THE MESSAGE TO BE SEND               *\n*         WORD 2 (+4) ADDRESS OF THE $WTO PARAMETER LIST              *\n*         WORD 3 (+8) ADDRESS OF THE JCT                              *\n*     R2-R10: N/A                                                     *\n*     R11: ADDRESS OF THE HCT                                         *\n*     R12: N/A                                                        *\n*     R13: ADDRESS OF THE OUTPUT PROCESSOR PCE                        *\n*     R14: RETURN ADDRESS                                             *\n*     R15: ENTRY ADDRESS                                              *\n*                                                                     *\n* REGISTERS ON RETURN:                                                *\n*     R0: N/A                                                         *\n*     R1: ADDRESS OF THE 3-WORD PARAMETER LIST                        *\n*     R15: A RETURN CODE:                                             *\n*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *\n*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *\n*              PROCESSING                                             *\n*          =8, TELLS JES2 NOT TO ISSUE THE NOTIFY $WTO                *\n*                                                                     *\n* JES2 MACROS USED:                                                   *\n*     $ENTRY, $SAVE, $RETURN, $MODEND                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nEXIT016  $MODULE                                                       C\n               $BUFFER,                REQ'D BY JCT                    C\n               $CAT,                   REQ'D BY HCT                    C\n               $CMB,                   REQ'D TO MAP $WTO PARM LIST     C\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C\n               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   C\n               $JCT,                   REQ'D TO GET JOBNAME, ETC.      C\n               $JQE,                   REQ'D BY HCT                    C\n               $MIT,                   REQ'D BY $MODEND, HCT           C\n               $PCE                    REQ'D TO GET PROCESSOR INFO\n         TITLE 'PRC - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n*  INITIALIZATION                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE  1\nEXIT16   $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE  2\n         $SAVE                          SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         L     R10,8(R1)               LOAD JCT ADDRESS\n         SLR   R15,R15                 SET DEFAULT RETURN CODE\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE HAS     *\n*  BEEN SAVED.  IF NOT, RETURN.                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CLI   JCTUSER1,X'80'          IS JOB'S ABEND/MAX CC SAVED?\n         BNE   RETURN                  NO, RETURN\n         CLI   JCTJTFLG,X'80'  80=FAIL,IS MESSAGE TO BE ALTERED?\n         BE    RETURN                  NO, SKIP\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PREPARE TO ALTER THE NOTIFY MESSAGE.                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         L     R4,4(R1)                GET ADDRESS OF $WTO PARM LIST\n         USING CMBWTOPL,R4             ESTABLISH $CMD ADDRESSABILITY\n         SLR   R5,R5                   ZERO WORK REGISTER\n         IC    R5,CMBML                GET MESSAGE LENGTH\n         CH    R5,=H'68'               MSG TOO LONG TO UPDATE IN PLACE?\n         BH    RETURN                  YES, RETURN (SHOULDN'T HAPPEN)\n         L     R6,0(R1)                GET ADDRESS IF MESSAGE TEXT\n         AR    R6,R5                   POINT PAST EXISTING MESSAGE TEXT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THE JOB ABENDED.  IF IT DID, GET THE ABEND CODE.   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         TM    JCTJTFLG,X'20'  20=ABEND,  DID JOB ABEND?\n         BZ    MAXCONDC                NO, GO GET MAXIMUM COND CODE\n         SPACE 1\n         L     R2,JCTUSER1             GET ABEND CODE\n         LA    R2,0(R2)                CLEAR HIGH ORDER BYTE\n         SRL   R2,12                   OBTAIN SYSTEM CODE\n         LTR   R2,R2                   WAS IT A SYSTEM CODE ABEND?\n         BZ    USRABEND                NO, GO PROCESS USER CODE ABEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ABENDED WITH A SYSTEM ABEND CODE, COME HERE TO ALTER    *\n*  THE NOTIFY MESSAGE TO INCLUDE THE SYSTEM ABEND CODE.               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSYSABEND DS    0H\n         LA    R5,10(R5)               INCR. MSG LENGTH\n         MVC   0(10,R6),=C'SYSTEM XXX' ADD SYSTEM ABEND CODE TO MSG\n         SRDL  R2,12                   CONVERT IT TO HEX\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,7(R6)                       \"\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,8(R6)                       \"\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,9(R6)                       \"\n         B     STORELEN                GO CHECK NEW MESSAGE LENGTH\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ABENDED WITH A USER ABEND CODE, COME HERE TO ALTER THE  *\n*  NOTIFY MESSAGE TO INCLUDE THE USER ABEND CODE.                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUSRABEND DS    0H\n         LA    R5,9(R5)                INCR. MSG LENGTH\n         MVC   0(9,R6),=C'USER XXXX'   ADD USER ABEND CODE TO MSG\n         LH    R2,JCTUSER1+2           GET USER ABEND CODE\n         CVD   R2,5(R6)                CONVERT TO DECIMAL\n         UNPK  5(4,R6),5(8,R6)         UNPK FOUR LOW DIGITS\n         OI    8(R6),X'F0'             SET ZONE\n         MVC   9(2,R6),=C'  '          CLEAR TWO  BYTES\n         B     STORELEN                GO CONVERT TO DEC/PRINTABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ENDED NORMALLY, COME HERE TO ALTER THE NOTIFY MESSAGE   *\n*  TO INCLUDE THE MAXIMUM CONDITION CODE FOR ANY STEP IN THE JOB.     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMAXCONDC DS    0H\n         MVC   0(20,R6),=C'- MAX COND CODE XXXX'  ADD MAXCC TO MSG\n         LA    R5,20(R5)               INCR. MESSAGE LENGTH\n         LH    R2,JCTUSER1+2           GET MAX CONDITION CODE\n         CVD   R2,16(R6)               CONVERT TO DECIMAL\n         UNPK  16(4,R6),16(8,R6)       UNPK FOUR LOW DIGITS\n         OI    19(R6),X'F0'            SET ZONE\n         MVC   20(2,R6),=C'  '         CLEAR TWO  BYTES\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  STORE NEW MESSAGE LENGTH IN CMB PARM LIST.                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSTORELEN DS    0H\n         STC   R5,CMBML                STORE MSG LEN IN CMB PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  GO BYE-BYE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRETURN   DS    0H\n        $RETURN RC=(R15)               RETURN TO CALLER\n         EJECT\nCONVTABL DC    CL16'0123456789ABCDEF'  CONVERSION TABLE\n         LTORG\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT20": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00N\\x00N\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 78, "newlines": 78, "modlines": 0, "user": "SYZYGYB"}, "text": "EXIT     TITLE 'PRC JES2SP EXIT 20'\n         SPACE 5\n         COPY  $HASPGBL\n         TITLE 'HASP MODULE INFORMATION TABLE'\nEXIT020  $MODULE TITLE='JES2SP EXIT 20',                               X\n               CVT,                GENERATE OS CVT DSECT               X\n               DEB,                GENERATE OS DEB DSECT               X\n               KEYS,               GENERATE OS KEYS DSECT              X\n               NEL,                GENERATE OS NEL DSECT               X\n               PSA,                GENERATE OS PSA DSECT               X\n               RESPA,              GENERATE JES FSI RESPA DSECT        X\n               RPL,                GENERATE OS RPL DSECT               X\n               SDWA,               GENERATE OS SDWA DSECT              X\n               TEXT,               GENERATE OS TEXT DSECT              X\n               WPL,                GENERATE OS WPL DSECT               X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $CNVWORK,           GENERATE HASP CNVWORK DSECT         X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JOT,               GENERATE HASP JOT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $LRC,               GENERATE HASP LRC DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $PPPWORK,           GENERATE PPU WORK DSECT             X\n               $RDRWORK,           GENERATE RDR WORK DSECT             X\n               $RAT,               GENERATE RAT WORK DSECT             X\n               $TAB,               GENERATE TAB WORK DSECT             X\n               $TRP                GENERATE TRP WORK DSECT\n         TITLE 'EXIT 20 - END OF JOB INPUT PHASE'\nEXIT20  $ENTRY BASE=R8             PROVIDE EXIT ROUTINE ENTRY POINT\n         USING JCTDSECT,R10         SET UP BY HASPPRPU\n        $SAVE  ,                   SAVE CALLER'S REGISTERS\n         SPACE 1\n         LR    R8,R15              ESTABLISH BASE REGISTER\n         CLC   RPRIORTY(2),=C'14'  SHOULD WE SEND MESSAGE ?\n         BL    STANDRD             LESS THAN 14 SO I GUESS SO\n         TM    JCTJBOPT,JCTPRICD   WAS /*PRI OR PRTY= SUPPLIED ?\n         BZ    EX20RT\n         MVC   XWTO014+JNUM(L'JNUM),JCTJOBID\n         MVC   XWTO014+JNAME(L'JNAME),JCTJNAME\n        $$WTO  XWTO014\nSTANDRD  CLI   RPRIORTY,C'0'\n         BE    COMP2\nCOMP1    CLC   RPRIORTY(2),=C' 7'\n         BNL   EX20RT\n         TM    JCTJBOPT,JCTPRICD   WAS /*PRI OR PRTY= SUPPLIED ?\n         BZ    EX20RT\n         OI    JCTJBOPT,JCTTHOLD   ELSE HOLD THIS SUCKER\n         B     EX20RT\nCOMP2    CLC   RPRIORTY(2),=C'07'\n         BNL   EX20RT\n         TM    JCTJBOPT,JCTPRICD   WAS /*PRI OR PRTY= SUPPLIED ?\n         BZ    EX20RT\n         OI    JCTJBOPT,JCTTHOLD   ELSE HOLD THIS SUCKER\nEX20RT  $RETURN RC=0\n         SPACE 4\n         $MID  014\nXWTO014  WTO '&MID.** JOBNUMBR JOBNAME1 IS A PRTY-14 JOB **',          X\n               ROUTCDE=1,DESC=1,MF=L\nLENWTO   EQU   *-XWTO014\nJNUM     EQU   4+9+3,8\nJNAME    EQU   JNUM+9,8\n         DROP  R10\n         SPACE 4\n******    EXIT LITERAL POOL     *******\n         LTORG\n         SPACE 5\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT212": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00{\\x00{\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 123, "newlines": 123, "modlines": 0, "user": "SYZYGYB"}, "text": "XIT212   TITLE 'PRC JES2 EXIT212 MODULE'\n         COPY  $HASPGBL\nEXIT212  $MODULE DYN,              GENERATE OS DYN DSECT               *\n               $CAT,               GENERATE HASP CAT DSECT (HCT NEEDS) *\n               $HASPEQU,           GENERATE REGISTERS AND BIT SETINGS  *\n               $BUFFER,            GENERATE HASP BUFFER DSECT          *\n               $JQE,               GENERATE HASP JQE DSECT             *\n               $JCT,               GENERATE HASP JCT DSECT             *\n               $JOE,               GENERATE HASP JOE DSECT             *\n               $DCT,               GENERATE HASP DCT DSECT             *\n               $PCE,               GENERATE HASP PCE DSECT             *\n               $MIT,               GENERATE HASP MIT DSECT             *\n               $SMF,               GENERATE HASP SMF DSECT             *\n               $TRP,               GENERATE HASP TRP DSECT             *\n               $HCT                GENERATE HASP CONTROL TABLE\n         TITLE 'EXIT POINT 212 -- DUMPER/LOADER DYNAMIC ALLOCATE'\n***********************************************************************\n*                                                                     *\n*        HASPSTAM DUMPER/LOADER ALLOCATE                              *\n*                                                                     *\n*        REG     ENTRY VALUE              EXIT VALUE                  *\n*        ---     -----------              ----------                  *\n*                                                                     *\n*        R0      ADDR OF ERROR/INFO FIELD UNCHANGED                   *\n*        R1      ADDR OF DDNAME FIELD     DYNALLOC RETURN CODE IF NZ  *\n*                                          ELSE UNCHANGED             *\n*        R2-R6   N/A                      UNCHANGED                   *\n*        R7      ADDR OF DMP/LOD DCT      UNCHANGED                   *\n*        R8-R10  N/A                      UNCHANGED                   *\n*        R11     ADDR OF HCT              UNCHANGED                   *\n*        R12     N/A                      UNCHANGED                   *\n*        R13     ADDR OF O S SAVE AREA    UNCHANGED                   *\n*        R14     RETURN ADDRESS           UNCHANGED                   *\n*        R15     ENTRY POINT ADDRESS      0 OR 4 NORMAL PROCESSING    *\n*                                         8 DATA SET ALLOCATED        *\n*                                        12 DYNALLOC ERROR            *\n*                                                                     *\n*        CC      N/A                      N/A                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING HCTDSECT,R11\n         USING DCTDSECT,R7         DCT ADDRESSABILITY\n         SPACE 2\nEX212    $ENTRY BASE=R15\n         SAVE  (14,12)             SAVE ALL REGISTERS\n         DROP  R15                 SWITCH LOCAL\n         USING EX212,R12           BASE\n         LR    R12,R15             LOCAL BASE\n         LR    R2,R1               SAVE ADDRESS OF DDNAME\n         LR    R3,R0               SAVE ADDRESS OF ERROR CODE\n         MVC   LOCDSN,XDCTDSN      COPY DATA SET NAME\n         EJECT\n         LOCATE CAMLST             SEE IF DATA SET NAME IS CATALOGED\n         LTR   R15,R15             BR IF DATA SET NAME IS\n         BZ    ISCAT                CATALOGED\n         SPACE 1\n         TM    XDCTFLG1,XDCTDUMP   GET OUT IF DATA SET NOT\n         BNO   SETRC0               CATALOGED AND THIS IS LOADER\n         LA    R1,TEXTDUMP           ELSE POINT TO DUMPER TEXT UNITS\n         B     ALLOCATE               AND GO ALLOCATE\n         SPACE 1\nISCAT    TM    XDCTFLG1,XDCTDUMP   IMMEDIATE EXIT IF THIS CATALOGED\n         BO    EXIT212E             DATA SET IS BEING USED BY A DUMPER\n         CLI   DSNAREA+4,X'80'     IMMEDIATE EXIT IF THIS CATALOGED\n         BNE   EXIT212E             IS NOT ON TAPE\n         LA    R1,TEXTLOAD           ELSE POINT TO LOADER TEXT UNITS\n         SPACE 2\nALLOCATE MVC   DYNUCNT,XDCTUNCT    UNIT COUNT\n         ST    R1,DYNALLOC+4+S99TXTPP-S99RB STUFF POINTER TO TEXT UNITS\n         LA    R1,DYNALLOC         ADDRESS OF DYNALLOC RB\n         DYNALLOC ,                DYNAMICALLY ALLOCATE\n         LTR   R1,R15              TEST RETURN CODE\n         BZ    SETRC8              SET RC = 8 IF DYNALLOC IS OK\n         SPACE 1\n         ST    R1,20+4*R1(,R13)    PASS BACK DYNALLOC RETURN CODE\n         MVC   0(4,R3),DYNALLOC+4+S99RSC-S99RB  RETURN ERROR/INFO CODES\n         LA    R15,12              SET 'BAD ALLOC' RETURN CODE\n         B     EXIT212E             AND EXIT\n         SPACE 1\nSETRC0   SR    R15,R15             SET RETURN CODE\n         B     EXIT212E             AND EXIT\n         SPACE 1\nSETRC8   LA    R15,8               SET RETURN CODE\n         MVC   0(8,R2),DYNDDN      RETURN DDNAME\nEXIT212E RETURN (14,12),RC=(15)\n         SPACE 2\nEXIT212F SR    R15,R15             SET RETURN CODE\n         BR    R14                  AND EXIT\n         EJECT\nCAMLST   CAMLST NAME,LOCDSN,,DSNAREA\nDSNAREA  DS    0D,XL265\n         SPACE 2\nDYNALLOC DC    0A(0),AL1(X'80'),AL3(*+3)\n         DC    AL1(20,S99VRBAL,S99NOCNV,0),AL2(0,0),A(*-*,0)\n         DC    AL1(S99WTUNT+S99OFFLN+S99MOUNT,0,0,0)\nTEXTDUMP DC    A(DYNDSN,DYNSTATS,DYNDISP,DYNRDDN,DYNUNIT,DYNUCT)\n         DC    A(DYNVOL)\n         ORG   *-4\n         DC    AL1(X'80')          SET END OF LIST\n         ORG   ,\nTEXTLOAD DC    A(DYNDSN,DYNSTAT2,DYNDISP2,DYNCDISP,DYNRDDN)\n         DC    A(DYNUNIT,DYNUCT)\n         ORG   *-4\n         DC    AL1(X'80')          SET END OF LIST\n         ORG   ,\nDYNDSN   DC    AL2(DALDSNAM,1,L'LOCDSN) DSN =\nLOCDSN   DC    CL44' '             DATA SET NAME\nDYNSTATS DC    AL2(DALSTATS,1,1),X'04' DISP = (NEW,\nDYNDISP  DC    AL2(DALNDISP,1,1),X'02' CATLG)\nDYNSTAT2 DC    AL2(DALSTATS,1,1),X'01' DISP = (OLD,\nDYNDISP2 DC    AL2(DALNDISP,1,1),X'01' UNCATLG,\nDYNCDISP DC    AL2(DALCDISP,1,1),X'08' KEEP)\nDYNRDDN  DC    AL2(DALRTDDN,1,8)   RETURN DDNAME\nDYNDDN   DC    CL8' '              DDNAME\nDYNUNIT  DC    AL2(DALUNIT,1,8),CL8'TAPE' UNIT = TAPE\nDYNUCT   DC    AL2(DALUNCNT,1,1)     NR OF UNITS\nDYNUCNT  DC    AL1(1)              UNIT COUNT\nDYNVOL   DC    AL2(DALVLCNT,1,1),AL1(99)\n         LTORG\n         EJECT ,\n         $MODEND ,\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EX05OPER": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x01\\x8e\\x01\\x8e\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 398, "newlines": 398, "modlines": 0, "user": "SYZYGYB"}, "text": "         TITLE 'JES2 EXIT 5 COMMAND PREPROCESSOR EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.3  LEVEL 8601                       *\n*                      JES2 FOR SP 1.3.4                              *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO SCAN ALL COMMANDS      *\n*        TO JES2 TO PREVENT SEVERAL COMMANDS AS WELL AS ELIMINATE     *\n*        THE USE OF JOB RANGES ON MANY COMMANDS.  THE USE OF          *\n*        JOB RANGES EITHER PRODUCES AN EXCESSIVE NUMBER OF CONSOLE    *\n*        MESSAGES OR PERFORMS AN UNINTENTIONAL OPERATION ON TOO       *\n*        MANY JOBS.  AN EXAMPLE OF THIS IS THE USE OF $PJ1-9999       *\n*        WHEN THE OPERATOR INTENDED TO ENTER $DJ1-9999.  THE          *\n*        RESTRICTION OF THE USE OF THE RANGE OPERAND CAUSES LESS      *\n*        PROBLEMS THAN THE ACCIDENTAL MISUSE OT THE COMMAND.          *\n*        SEE THE TABLE FOR OTHER COMMANDS LOOKED AT                   *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S E X I T 1          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $COMWORK     SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $HASPEQU     SYS1.HASPSRC                               *\n*        06)  $HASPGBL     SYS1.HASPSRC                               *\n*        07)  $HCT         SYS1.HASPSRC                               *\n*        08)  $JCT         SYS1.HASPSRC                               *\n*        09)  $JOE         SYS1.HASPSRC                               *\n*        10)  $JQE         SYS1.HASPSRC                               *\n*        11)  $MIT         SYS1.HASPSRC                               *\n*        12)  $MODEND      SYS1.HASPSRC                               *\n*        13)  $MODULE      SYS1.HASPSRC                               *\n*        14)  $PCE         SYS1.HASPSRC                               *\n*        15)  $RETURN      SYS1.HASPSRC                               *\n*        16)  $SAVE        SYS1.HASPSRC                               *\n*        17)  $STORE       SYS1.HASPSRC                               *\n*        18)  IAZRESPA     SYS1.AMODGEN                               *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nEX005OP  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 EXIT 5 COMMAND PREPROCESSOR EXIT',          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $MIT                GENERATE HASP MIT DSECT\n         TITLE 'JES2 EXIT 5 COMMAND PREPROCESSOR EXIT'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nEX05OP   $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        COMPARE THE FIRST 2 CHARACTERS IN THE COMMAND FOR AN         *\n*        ENTRY IN THE VALIDATION TABLE.                               *\n*                                                                     *\n***********************************************************************\n         LA    R2,COMTABLE         LOAD ADDRESS OF THE COMMAND TABLE\nCOMLOOP  CLI   0(R2),X'FF'         END OF TABLE?\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   0(2,R2),COMVERB     COMPARE TABLE TO ENTRY COMMAND\n         BE    CKACTION            YES, GO CHECK FOR ACTION TO TAKE\n         LA    R2,4(,R2)           INCREMENT TO NEXT TABLE ENTRY\n         B     COMLOOP             LOOP UNTIL DONE\n***********************************************************************\n*                                                                     *\n*        BRANCH TO THE INDICATED ROUTINE FOR THE COMMAND USING        *\n*        THE OFFSET IN THE COMMAND ENTRY IN A BRANCH TABLE.           *\n*                                                                     *\n***********************************************************************\nCKACTION LH    R15,2(R2)           LOAD OFFSET FROM COMMAND TABLE ENTRY\n         B     BTABLE(R15)         BRANCH TO ROUTINE\nBTABLE   B     EXIT0               00 - NOT USED\n         B     ROUT$AJ             04 - $AJ\n         B     ROUT$CJ             08 - $CJ\n         B     ROUT$DJ             12 - $DJ\n         B     ROUT$EJ             16 - $EJ\n         B     ROUT$HJ             20 - $HJ\n         B     ROUT$LJ             24 - $LJ\n         B     ROUT$OJ             28 - $OJ\n         B     ROUT$PJ             32 - $PJ\n         B     ROUT$TJ             36 - $TJ\n         B     ERROR1              40 - $TC\n         B     ERROR1              44 - $TM\n         B     ROUT$DN             48 - $DN\n         B     ROUT$PQ             52 - $PQ\n         B     EXIT0               56 - NOT USED\n         B     EXIT0               60 - NOT USED\n         B     EXIT0               64 - NOT USED\n         B     EXIT0               68 - NOT USED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $AJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$AJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$AJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $CJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$CJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$CJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $DJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$DJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$DJ          TEST RANGE VALUE\n*        BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $EJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$EJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$EJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $HJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$HJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$HJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $LJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$LJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$LJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $OJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$OJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$OJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $PJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$PJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$PJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $TJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$TJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$TJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $DN COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$DN  CR    R5,R7               SEE IF FIRST OPND SAME AS LAST\n         BE    ERROR4              YES, NO OPERANDS, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $PQ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$PQ  CR    R5,R7               SEE IF FIRST OPND SAME AS LAST\n         BE    ERROR4              YES, NO OPERANDS, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                  E R R O R     R O U T I N E S                      *\n*                                                                     *\n***********************************************************************\nERROR1   MVC   COMMAND(LMSG1),MSG1 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG1            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR2   MVC   COMMAND(LMSG2),MSG2 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG2            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR3   MVC   COMMAND(LMSG3),MSG3 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG3            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR4   MVC   COMMAND(LMSG4),MSG4 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG4            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT16   $STORE R0                 SAVE MESSAGE LENGTH\n         LA    R15,16              SET RETURN CODE TO 16\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         C K R A N G E                               *\n*                                                                     *\n*        THIS ROUTINE EXAMINES THE OPERANDS POINTER TO BY REG 1       *\n*        ON ENTRY FOR A RANGE VALUE IE. 1-9999.  IF NOT NUMERIC       *\n*        A VALUE OF ZERO WILL BE PASSED BACK IN REGISTER 1.  IF       *\n*        NOT A RANGE, A VALUE OF ONE WILL BE PASSED IN REGISTER       *\n*        1.  IF IT IS A RANGE, THE NUMBER VALUE OF THE SPAN OF        *\n*        NUMBERS WILL BE PASSED IN REGISTER 1.                        *\n*                                                                     *\n*        RETURN WILL BE MADE TO REGISTER 4 .                          *\n*                                                                     *\n***********************************************************************\nCKRANGE  LR    R2,R1               SAVE START OF VALUE1\nCKRANGE1 CLI   0(R1),C'0'          SEE IF NUMERIC\n         BL    CKRANGE2            NO, INVALID, OR END OF FIELDS\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER\n         B     CKRANGE1            LOOP\nCKRANGE2 CLI   0(R1),C'-'          IS THIS A JOB RANGE\n         BNE   CKRANGE6            NO, BRANCH\n         LR    R3,R1               SAVE LOCATION POINTER\n         SR    R3,R2               GET LENGTH OF FIELD\n         BZ    CKRANGE5            ZERO, ZERO LENGTH\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACKIT           PACK \"JOB\" NUMBER\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         ST    R15,PCEUSER0        SAVE \"JOB\" NUMBER\n         LA    R1,1(,R1)           POINT PAST '-'\n         LR    R2,R1               SAVE START OF VALUE2\nCKRANGE3 CLI   0(R1),C'0'          SEE IF NUMERIC\n         BL    CKRANGE4            NO, INVALID, OR END OF FIELDS\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER\n         B     CKRANGE3            LOOP\nCKRANGE4 LR    R3,R1               SAVE LOCATION POINTER\n         SR    R3,R2               GET LENGTH OF FIELD\n         BZ    CKRANGE5            ZERO, ZERO LENGTH\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACKIT           PACK \"JOB\" NUMBER\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         S     R15,PCEUSER0        SUBTRACT START FROM END \"JOB\" NBR\n         BM    CKRANGE5            NEGATIVE RANGE, INVALID\n         LA    R15,1(,R15)         ADD 1 FOR TRUE RANGE VALUE\n         B     CKRANGE7            GO EXIT THIS ROUTINE\nCKRANGE5 LA    R15,0               SET RANGE VALUE TO ZERO FOR ERROR\n         B     CKRANGE7            GO EXIT THIS ROUTINE\nCKRANGE6 LA    R15,1               SET RANGE VALUE TO 1\nCKRANGE7 BR    R4                  RETURN TO CALLER\n         SPACE\nPACKIT   PACK  $DOUBLE,0(0,R2)     **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nC#CEQ    DC    CL2'C='             CHARACTER CONSTANT 'C='\nMSG1     DC    C'COMMAND NOT ALLOWED IN THIS INSTALLATION'\nLMSG1    EQU   *-MSG1\nMSG2     DC    C'JOB RANGE NOT ALLOWED FOR THIS COMMAND'\nLMSG2    EQU   *-MSG2\nMSG3     DC    C'JOB CLASS MAY NOT BE CHANGED'\nLMSG3    EQU   *-MSG3\nMSG4     DC    C'VALID OPERANDS ARE REQUIRED FOR THIS COMMAND'\nLMSG4    EQU   *-MSG4\nMAX$AJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$CJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$DJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$EJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$HJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$LJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$OJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$PJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$TJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nCOMTABLE DC    CL2'AJ',AL2(4)      $AJ\n         DC    CL2'AS',AL2(4)      $AS\n         DC    CL2'AT',AL2(4)      $AT\n         DC    CL2'CJ',AL2(8)      $CJ\n         DC    CL2'CS',AL2(8)      $CS\n         DC    CL2'CT',AL2(8)      $CT\n         DC    CL2'DJ',AL2(12)     $DJ\n         DC    CL2'DS',AL2(12)     $DS\n         DC    CL2'DT',AL2(12)     $DT\n         DC    CL2'EJ',AL2(16)     $EJ\n         DC    CL2'ES',AL2(16)     $ES\n         DC    CL2'ET',AL2(16)     $ET\n         DC    CL2'HJ',AL2(20)     $HJ\n         DC    CL2'HS',AL2(20)     $HS\n         DC    CL2'HT',AL2(20)     $HT\n         DC    CL2'LJ',AL2(24)     $LJ\n         DC    CL2'LS',AL2(24)     $LS\n         DC    CL2'LT',AL2(24)     $LT\n         DC    CL2'OJ',AL2(28)     $OJ\n         DC    CL2'OS',AL2(28)     $OS\n         DC    CL2'OT',AL2(28)     $OT\n         DC    CL2'PJ',AL2(32)     $PJ\n         DC    CL2'PS',AL2(32)     $PS\n         DC    CL2'PT',AL2(32)     $PT\n         DC    CL2'TJ',AL2(36)     $TJ\n         DC    CL2'TS',AL2(36)     $TS\n         DC    CL2'TT',AL2(36)     $TT\n         DC    CL2'TC',AL2(40)     $TC\n         DC    CL2'TM',AL2(44)     $TM\n         DC    CL2'DN',AL2(48)     $DN\n         DC    CL2'PQ',AL2(52)     $PQ\n         DC    4X'FF'              END OF TABLE\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EX05STUP": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x02\\xad\\x02\\xad\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 685, "newlines": 685, "modlines": 0, "user": "SYZYGYB"}, "text": "SETUP    TITLE 'JES2 /*SETUP CARD DISPLAY SUPPORT'\n******************************************************************\n*                                                                *\n* LOAD MODULE: EX@STUP.     LIBRARY: JES2LOAD.                   *\n*                           ENVIRONMENT: JES2 MAIN TASK.         *\n*                                                                *\n*                                                                *\n*      THIS MODULE CONTAINS EXIT 5  ROUTINE TO PROCESS THE       *\n*   /*SETUP SUPPORT COMMAND - $QS.                               *\n*      OPERATOR TYPES $QSJNNN AND GETS A LIST OF SETUP CARDS     *\n*      FROM THE JOB. IF YOU ENTER $QSJNNN,L=Z IT GETS RID OF     *\n*      THE USELESS JES2 PREFIX STUFF.                            *\n*                                                                *\n*                                                                *\n******************************************************************\n         COPY  $HASPGBL\nEX005QS  $MODULE $BUFFER,                                              C\n               $HASPEQU,                                               C\n               $TAB,                                                   C\n               $QSE,                                                   C\n               $PCE,                                                   C\n               RESPA,              REQUIRED FOR $COMWORK               C\n               $COMWORK,                                               C\n               $JQE,                                                   C\n               $JOE,                                                   C\n               $JOT,                                                   C\n               $JCT,                                                   C\n               $LRC,                                                   C\n               $PDDB,                                                  C\n               $IOT,                                                   C\n               $CAT,                                                   C\n               $MITETBL,                                               C\n               $MIT,                                                   C\n               $SCAT,                                                  C\n               $XECB,                                                  C\n               $SVT,                                                   C\n               $RAT,                                                   C\n               $DCT,                                                   C\n               $CMB,                                                   C\n               $HCT,                                                   C\n               $DAS,                                                   C\n               $MODMAP\n         TITLE 'EXIT 5 ROUTINE FOR $QS COMMAND - /*SETUP DISPLAY'\nEX05QS  $ENTRY BASE=R8\n***********************************************************************\n*                                                                     *\n*    LOAD MODULE: EX@STUP.    ROUTINE:  $QSX5.                        *\n*                             ENVIRONMENT:  JES2 MAIN TASK (HASPCOMM) *\n*                                                                     *\n*    \" $ Q S \"     C O M M A N D    P R O C E S S O R.                *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        REGISTERS ON ENTRY ARE:                                      *\n*                                                                     *\n*        REG. 0 - 4 --- NOT SPECIFIED.                                *\n*                                                                     *\n*        REG. 5 --> CURRENT OPERAND PTR.                              *\n*                                                                     *\n*        REG. 6 --- VALUE OF 4.                                       *\n*                                                                     *\n*        REG. 7 --> LAST OPERAND PTR.                                 *\n*                                                                     *\n*        REG. 8-10 ---NOT SPECIFIED                                   *\n*                                                                     *\n*        REG. 11----==> HCT                                           *\n*                                                                     *\n*        REG. 12------NOT SPECIFIED                                   *\n*                                                                     *\n*        REG. 13----==> HASPCOMM PCE                                  *\n*                                                                     *\n*        REG. 14------CONTAINS RETURN ADDRESS                         *\n*                                                                     *\n*        REG. 15------CONTAINS ENTRY POINT ADDRESS                    *\n*                                                                     *\n*  RETURN CODES:                                                      *\n*                                                                     *\n*       0 - CONTINUE JES2 COMMAND PROCESSING.                         *\n*       4 - SAME AS 0.                                                *\n*       8 - BYPASS JES2 PROCESSING, NO MESSAGE.                       *\n*      12 - BYPASS JES2 PROCESSING, RETURN \"$HASP000 OK\".             *\n*      16 - BYPASS JES2 PROCESSING, ISSUE MESSAGE IN \"COMMAND\" FLD.   *\n*                                                                     *\n*                                                                     *\n*     NOTE: R12 IS USED THROUGHOUT THE PROGRAM AS HA$PCOMM BASE.      *\n*  THIS IS STILL NEEDED FOR SOME STUPID COMM MACROS ($CFRTC ETC.)     *\n*  SINCE THEY DON'T ESTABLISH LOCAL ADDRESSABILITY.                   *\n*                                                                     *\n*  ROUTINE DESCRIPTION:                                               *\n*                                                                     *\n*       THIS ROUTINE WILL PERFORM JES2 COMMAND PROCESSING FOR THE     *\n*    FOLLOWING COMMAND:                                               *\n*                                                                     *\n*    1). $QS.  SYNTAX IS AS FOLLOWS:                                  *\n*                                                                     *\n*                   $QS <JNN <-NN> >                                  *\n*                                                                     *\n*        COMMAND WILL DISPLAY SETUP CARD CONTENTS FOR JOBS IN THE     *\n*     JOB RANGE ENTERED. DEFAULT - ALL JOBS.                          *\n*                                                                     *\n*     FOR EACH SUCH JOB WITHIN JOB RANGE, THE JCT, IOT AND JCL FILES  *\n*     ARE READ FROM SPOOL. JCL FILE IS DEBLOCKED AND THE /*SETUP      *\n*     IMAGES ARE SEARCHED FOR. IF YOU HAVE A BIG NUMBER OF JOBS       *\n*     WITH /*SETUP, THIS CAN BE SLIGHTLY HEAVY.                       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n        EJECT ,\n***********************************************************************\n*                                                                     *\n*          MAINTENANCE   LOG                                          *\n*          =================                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $SAVE                      SAVE REGISTERS.\n         LR    R8,R15              LOAD BASE REGISTER.\n         USING HCTDSECT,R11        R11 HAS HCT ADDRESS.\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  EXIT IF NOT OUR COMMAND.                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   =C'QS',COMVERB          VERB = \"QS\" ??\n         BE    QSCOMM                  YES - TAKE EXIT\n*\n         B     X5RC0                   NOT OUR COMMAND. RETURN.\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PROCESS THE $QS COMMAND.                                           *\n*                                                                     *\n*  FIRST WE TRY TO SERVE MLWTO REQUESTS (L=CCA) FOR CONSOLES.         *\n*  JES2 DOES NOT GIVE THIS SERVICE TO EXIT 5 COMMAND. STILL,          *\n*  WE DON'T DO MESSAGE REDIRECTION AND CONSOLE AREA VERIFICATION.     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nQSCOMM   DS    0H\n         TM    COMFLAG,CMBFLAGU        UCM COMMAND ?\n         BZ    QSNOMLW                 NO. SKIP MLWTO TESTS.\n         CLI   COMUCMA,0               MLWTO OUTPUT ?\n         BE    QSNOMLW                 NO.\n         MVI   COMLINET,X'80'          SET FOR MLWTO CONTROL LINE.\n        $CWTO  L=L'COMMAND,MSGID=636   REPEAT THE COMMAND ENTERED.\n         MVI   COMLINET,X'20'          SET FOR DATA LINE.\nQSNOMLW  DS    0H\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  INITIALIZE COMMAND WORK AREA AND DEFAULT PARM VALUES.              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         XC    QSWORK(QSWLEN),QSWORK   ZERO W.A.\n*\n         SLR   R1,R1\n         STH   R1,QSLOWJN              LOW JOB NUMBER=ZERO\n         LH    R1,$NUMJBNO             HIGH JOB NUMBER.\n         STH   R1,QSHIGHJN             KEEP.\n         EJECT\n***********************************************************************\n*                                                                     *\n*  EXAMINE OPERANDS, BRANCH ACCORDINGLY.                              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nQSOPRND  DS    0H\n         L     R1,0(,R5)               POINT TO CURRENT OPERAND.\n         L     R0,4(,R5)               AND NEXT.\n         BXH   R5,R6,QSOPOK            BRANCH IF ONLY 1 OPERAND.\n         B     X5INVO\nQSOPOK   DS    0H\n         SR    R5,R6                   BACK TO OPERAND (BXH BUMPED R5)\n         SR    R0,R1                   LENGTH OF CURRENT OPERAND +1.\n         CH    R0,$H2                  ANY OPERAND AFTER $QS ?\n         BNH   QSOPDONE                NO. GO PROCESS COMMAND.\n         CLI   1(R1),C'J'              \"J\" OPERAND ?\n         BE    QSJ                     GO PROECSS.\n         B     X5INVO                  NO MORE VALID OPERANDS.\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PROCESS JOB NUMBER RANGE.                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nQSJ      DS    0H\n         L     R1,0(,R5)           -> OPERAND (1 BYTE BEFORE \"J\").\n         SLR   R15,R15             SET LENGTH TO ZERO\n         LA    R1,2(R1)            INDEX PAST 'SJ' ETC\n         LR    R14,R1              SAVE START OF OPERAND\n         MVI   QSLOWJN,X'FF'       SET START OF PROCESSING INDICATOR\nQSJ1     CLI   0(R1),C'-'          END OF FIRST OPERAND\n         BE    QSJ2                YES, BRANCH\n         CLI   0(R1),C','          END OF ALL OPERANDS\n         BE    QSJ2                YES, BRANCH\n         CLI   0(R1),C' '          END OF ALL OPERANDS\n         BE    QSJ2                YES, BRANCH\n         CLI   0(R1),C'0'          NUMERIC OPERAND\n         BL    X5INVO              NO, ERROR\n         CLI   0(R1),C'9'          NUMERIC OPERAND\n         BH    X5INVO              NO, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR JOB NUMBER\n         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH\n         B     QSJ1                LOOP UNTIL DONE\nQSJ2     LTR   R15,R15             TEST LENGTH\n         BZ    X5INVO              ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,QSPACKJ         PACK JOB NUMBER\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         C     R15,=F'20000'       SEE IF NUMBER TOO LARGE\n         BH    X5INVO              YES, ERROR\n         CLI   0(R1),C'-'          LOW JOB OF RANGE\n         BE    QSJ3                YES, BRANCH\n         STH   R15,QSHIGHJN        SAVE HIGH JOB NUMBER\n         CLI   QSLOWJN,X'FF'       IS THIS THE FIRST JOB NUMBER\n         BNE   QSJ4                NO, ALL DONE WITH NUMBER, BRANCH\n         STH   R15,QSLOWJN         SAVE LOW JOB NUMBER\n         B     QSJ4                ALL DONE WITH NUMBER, BRANCH\nQSJ3     CLI   QSLOWJN,X'FF'       HAS LOW JOB NUMBER ALREADY BEEN PROC\n         BNE   X5INVO              YES, ERROR\n         STH   R15,QSLOWJN         SAVE LOW JOB NUMBER\n         LA    R1,1(,R1)           INCREMENT PAST '-'\n         LR    R14,R1              SAVE START OF OPERAND\n         SLR   R15,R15             RESET LENGTH TO ZERO\n         B     QSJ1                LOOP FOR NEXT NUMBER OF RANGE\nQSPACKJ  PACK  $DOUBLE,0(0,R14)    PACK JOB NUMBER\n         SPACE 1\nQSJ4     DS    0H\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*    START JOB QUEUE SCAN, WITHIN SPECIFIED LIMITS.                   *\n*                                                                     *\n*    REGISTER USAGE:                                                  *\n*                                                                     *\n*       R0 - R3 - WORK.                                               *\n*       R4 - R5 - JOB QUEUE SCAN REGS.                                *\n*       R6 -      UNUSED.                                             *\n*       R7 -      BASE FOR HDB FROM SPOOL.                            *\n*       R8 -      PROGRAM BASE.                                       *\n*       R9 -      JES2 BUFFER (JCT, IOT, JCL FILE BUFFER).            *\n*       R10-      JQE ADDRESS.                                        *\n*       R11-      UNUSED.                                             *\n*       R12-      BASE OF HA$PCOMM (CURRENTLY UNUSED, FOR $CF.. MACROS)\n*       R13-      PCE                                                 *\n*       R14-R15 - WORK.                                              *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nQSOPDONE DS    0H\n         LA    R4,QINXJOB          PREPARE TO SCAN\n         IC    R4,$QINDEX(R4)       EXECUTION QUEUES\n         SLR   R5,R5                 BY CLASS\n*\nQSNXTQUE DS    0H\n         LA    R5,$JQHEADL(,R5)    ADD TO INDEX INTO THE QUEUE\n         CL    R5,=A($JQCLSSZ)     IS THERE ANOTHER EXEC QUEUE...\n         BH    QSENDJQE            BRANCH IF NO\n         LA    R10,0(R4,R5)        PREPARE TO SCAN NEXT EXECUTION\n         LA    R10,$JQHEADS-2*$JQHEADL-QUENEXT(R10) QUEUE\n         SPACE 1\n         USING JQEDSECT,R10        PROVIDE JQE ADDRESSABILITY\n         SPACE 1\nQSNXTJQE DS    0H\n         L     R10,JQENEXT         GET OFFSET OF JQE\n         N     R10,$ZEROFFF        END OF EXECUTION QUEUE...\n         BZ    QSNXTQUE            BR IF END OF CURRENT QUEUE\n         AL    R10,$JOBQPTR        CONVERT OFFSET TO ABSOLUTE ADDR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*     HERE WE DO SOME VALIDATION; SINCE OUR PROCESSING INVOLVES $WAIT,*\n*  IT MIGHT HAPPEN THAT THE JOB QUEUE HAS CHANGED DURING OUR PROCESS. *\n*  THUS, IF WE FIND OURSELVES ALL OF A SUDDEN IN A NON-EXECUTION      *\n*  QUEUE, IT MEANS THAT SOMETHING HAS CHANGED; THEN WE SHALL INITIATE *\n*  RECOVERY (START THE WHOLE PROCESS ANEW). STILL, SOME PROBLEMS      *\n*  MAY STILL OCCUR, SINCE WE ARE NOT SYNCHRONIZED WITH OTHER JES2     *\n*  PROCESSES; I BELIEVE THAT THE WORST THAT CAN HAPPEN IS SOME        *\n*  JOBS LISTED TWICE, OR SOME OTHERS MISSED; NO ABEND IS EXPECTED.    *\n*  THIS WILL BE VERY RARE, SO LET IT BE.                              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        TM    JQETYPE,$XEQ        ON EXECUTION QUEUE ?\n*        BZ    QSRCOVER            NO - GO RECOVER.\n*        CLI   JQETYPE,$XEQ        MAYBE CONVERSION ?\n*        BE    QSRCOVER            YES. TOO BAD.\n*\n*        TM    JQEIFLG1,QUEI1STP   /*SETUP IN JOB ??\n*        BZ    QSNXTJQE            NO - BR TO TEST NEXT JQE\n         CLC   QSLOWJN,QSHIGHJN    A SPECIFIC JOB REQUEST ?\n         BE    QSHOLDOK            YES. SHOW EVEN IF NOT HELD.\n*        TM    JQEFLAGS,QUEHOLD1   \"HOLD SINGLE\" ??\n*        BZ    QSNXTJQE            NO - HE AIN'T \"SETUP\" ANY MORE.\nQSHOLDOK DS    0H\n*        TM    JQEFLAGS,QUEBUSY    IF JOB ACTIVE,\n*        BNZ   QSNXTJQE             BR TO TEST NEXT JQE\n         LH    R0,JQEJOBNO         GET JOB NUMBER\n         CH    R0,QSLOWJN          BELOW LOWER LIMIT ?\n         BL    QSNXTJQE            DON'T TAKE.\n         CH    R0,QSHIGHJN         ABOVE HIGHER ?\n         BH    QSNXTJQE            NO GO.\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*   WE HAVE A JOB TO PROCESS. READ JOB'S JCT, THEN 1ST IOT.           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         NI    QSFLAG,FF-QSFSETUP      NO /*SETUP FOUND YET.\n         TM    QSFLAG,QSFBUF           HAVE BUFFER IN R9 ?\n         BO    QSBUFOK\n        $GETBUF TYPE=HASP,WAIT=YES     GET A JES2 BUFFER.\n         OI    QSFLAG,QSFBUF           MARK WE HAVE BUFFER.\n         LR    R9,R1                   POINT AT IT.\nQSBUFOK  DS    0H\n*\n         MVI   PCEDEVTP,PCEDARD        MARK \"READ DA\"\n         ST    R9,PCEBUFAD             STORE BUFFER ADDRESS.\n         L     R1,JQETRAK              GET JCT ADDRESS.\n         ST    R1,PCESEEK              INTO PCE FOR I/O.\n         BAL   R14,QSVMTTR             GO VALIDATE MTTR (SPOOL ONLINE) C\n                                       ... (NO RETURN IF INVALID).\n        $JCTIO ,\n         BNO   QSJCTERR                BRANCH IF UNSUCCESSFUL\n         USING JCTDSECT,R9\n         L     R0,$JOBQPTR             VALIDATE JCT:\n         AL    R0,JCTJQE               GET JQE ADDRESS FROM JCT.\n         CLR   R0,R10                  COMPARE TO CURRENT JQE.\n         BNE   QSJCTERR                SORRY, SOMETHING'S WRONG.\n         MVC   QSJBKEY,JCTJBKEY        KEEP JOB KEY.\n*\n*   READ 1ST IOT.\n*\n         MVC   PCESEEK,JCTIOT          MOVE MTTR TO PCE.\n         BAL   R14,QSVMTTR             GO VALIDATE MTTR (SPOOL ONLINE) C\n                                       ... (NO RETURN IF INVALID).\n         LA    R1,PCEDADCT             GET DA DCT.\n        $EXCP  (R1),WAIT=YES           EXCP, WAIT FOR COMPLETION.\n         BNO   QSIOTERR                SORRY.\n         DROP  R9\n         USING IOTDSECT,R9\n         CLC   IOTID,=CL4'IOT'         VALID IOT ?\n         BNE   QSIOTERR                NO - BRANCH.\n         CLC   QSJBKEY,IOTJBKEY        SAME JOB KEY ?\n         BNE   QSIOTERR                NO. SOMETHING MESSED UP.\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*  1ST PDDB IN 1ST IOT IS JCL FILE. IF VALID, READ 1ST BLOCK.         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         L     R1,IOTPDDB              OFFSET TO 1ST PDDB.\n         ALR   R1,R9                   ADDRESS OF THAT PDDB.\n         USING PDBDSECT,R1\n         CLC   PDBDSKEY,=Y(PDBINJCL)   MUST BE INPUT JCL.\n         BNE   QSPDBERR                SOME ERROR HERE.\n*\n         ICM   R0,B'1111',PDBMTTR      1ST BLOCK'S MTTR.\n         BZ    QSSTPERR                FUNNY IF JCL FILE NOT FOUND.\n         DROP  R1\n*\nQSNEWBUF DS    0H\n         ST    R0,PCESEEK              STORE MTTR FOR $EXCP.\n         BAL   R14,QSVMTTR             GO VALIDATE MTTR (SPOOL ONLINE) C\n                                       ... (NO RETURN IF INVALID).\n         LA    R1,PCEDADCT             GET DA DCT.\n        $EXCP  (R1),WAIT=YES           EXCP, WAIT FOR COMPLETION.\n         BNO   QSIOERR                 SORRY.\n         DROP  R9                      NO IOT ANY MORE.\n         USING BUFDSECT,R9\n         CLC   HDBJBKEY,QSJBKEY        SAME JOB KEY ?\n         BNE   QSIOERR                 SOMETHING WENT WRONG.\n*\n         LA    R7,HDBSTART             START OF LOGICAL RECORDS.\n         USING LRCDSECT,R7\nQSNEWLRC DS    0H\n         CLI   LRCTLENG,LRCBFEND       END OF BUFFER ??\n         BE    QSNXTBUF                YES. TRY TO READ NEXT.\n         TM    LRCFLAG1,LRC1INUL       \"NULL ON INPUT\" ?\n         BNO   QSNXTLRC                NO. WE LOOK ONLY FOR THOSE.\n         LA    R14,LRCTEXT             ASSUME NO C.C.\n         TM    LRCFLAG1,LRC1CCTL       BUT THERE MIGHT BE.\n         BNO   *+8\n         LA    R14,LRCSOUT             IF C.C., POINT AT REAL TEXT.\n         CLC   =C'/*SETUP ',0(R14)     THE RIGHT ONE ? (IGNORE C.C.).\n         BNE   QSNXTLRC                GET NEXT LRC.\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        WRITE THE MESSAGE FOR THIS JOB.                              *\n*                                                                     *\n*    THE MESSAGE CONTAINS THE CARD TEXT,  ALL EXCEPT THE '/*SETUP '   *\n*  ITSELF.                                                            *\n*                                                                     *\n*    THE   LINE IS WRITTEN WITH CMBFLAGJ ON; THIS MEANS THAT $WTO     *\n*  PROCESS WILL USE R10 AS JQE OR JCT ADDRESS TO INSERT JOB INFO.     *\n*  NOTE THAT \"JOB=YES\" IN $CWTO IN *NOT* SIMILAR: THIS ONLY \"TELLS\"   *\n*  CWTO THAT WE HAVE ALREADY INSERTED JOB INFORMATION INTO THE        *\n*  MESSAGE.                                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R0,QSM1TEXT         POINT AT TARGET.\n         LA    R1,L'QSM1TEXT       LENGTH.\n*\n         SLR   R15,R15             CLEAR FOR INSERT.\n         IC    R15,LRCTLENG        GET TEXT LENGTH\n         SH    R15,=H'8'           SUBTRACT LENGTH OF '/*SETUP '\n         BP    *+6                 IF NON-POSITIVE ..\n         SLR   R15,R15             ... MAKE ZERO.\n         ICM   R15,B'1000',=X'40'  INSERT PAD CHARACTER.\n         LA    R14,8(,R14)         ADVANCE TEXT PTR AFTER '/*SETUP '\n*\n         MVCL  R0,R14              ZOOOP .. MOVE TEXT.\n*\n         OI    COMFLAG,CMBFLAGJ    SET JOB INFO REQ'D (R10 SET TO JQE)\n*\n        $CWTO  MSG=QSMSG1,         DISPLAY MESSAGE                     C\n               L=QSM1LEN,                                              C\n               MSGID=103           AS $HASP103\n*\n         NI    COMFLAG,FF-CMBFLAGJ DELETE \"JOB=YES\"\n*\n         OI    QSFLAG,QSFFOUND+QSFSETUP  TURN ON MATCH FOUND SWITCHES\n         SPACE 2\n*\n*  LOCATE NEXT LRC.\n*\nQSNXTLRC DS    0H\n         SLR   R1,R1\n         IC    R1,LRCTLENG             GET LENGTH OF TEXT.\n         TM    LRCFLAG1,LRC1CCTL       CARRIAGE CONTROL ?\n         LA    R7,LRCTEXT(R1)          POINT TO NEXT LRC.\n         BZ    QSNEWLRC                IF NO C.C., THAT'S FINE.\n         LA    R7,LRCSOUT-LRCTEXT(,R7) ACCOUNT FOR C.C.\n         B     QSNEWLRC                PROCESS NEW LRC.\n         SPACE 2\n*\n*  TRY TO GET NEXT JES2 BUFFER MTTR ON CHAIN.\n*\nQSNXTBUF DS    0H\n         ICM   R0,B'1111',HDBNXTRK     NEXT TRACK.\n         BNZ   QSNEWBUF                IF THERE IS ONE, DE-BLOCK IT.\n*\n* END OF JOB'S JCL; IF /*SETUP NOT LOCATED, PRINT ERROR.\n*\n         TM    QSFLAG,QSFSETUP         ANYTHING FOUND ?\n         BO    QSNXTJQE                YES - OK.\n         B     QSSTPERR                SHOUT ABOUT THIS JOB.\n         DROP  R7,R9,R10\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF ALL JQES.  IF NO MESSAGES WERE ISSUED, ISSUE          *\n*        A MESSAGE THAT NO JOB WAS FOUND.                             *\n*                                                                     *\n***********************************************************************\nQSENDJQE DS    0H\n         TM    QSFLAG,QSFBUF       WAS A JES2 BUFFER OBTAINED ?\n         BZ    QSENDBUF\n        $FREEBUF (R9)              FREE THE BUFFER\n*\nQSENDBUF DS    0H\n         TM    QSFLAG,QSFFOUND     WAS A MATCH FOUND\n         BNZ   QSENDMSG            YUP, NO MESSAGE.\n*\n        $CWTO  MSG='NO SETUP JOB(S) FOUND',MSGID=919\n*\nQSENDMSG DS    0H\n         B     X5RC8               GET OUT\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*   QSVMTTR - VALIDATE MTTR IN PCESEEK.                               *\n*                                                                     *\n*      THIS ROUTINE CHECKS THE SPOOL EXTENT FROM \"PCESEEK\" (\"M\" OF    *\n*   THE MTTR) TO BE AVAILABLE FOR I/O. THE $DAS IS INSPECTED (DAS     *\n*   IN PRIVATE AREA). IF SPOOL INACTIVE FOR JOB, WE DON'T RETURN -    *\n*   BUT RATHER BRANCH TO ISSUE MESSAGE AND TAKE NEXT JOB.             *\n*                                                                     *\n*      NOTE, THAT THE EASIER WAY TO DO THAT WAS TO TEST THE JOB'S     *\n*   SPOOL MASK IN THE JQE AND REJECT IT IF NOT ALL ONLINE. HOWEVER,   *\n*   SINCE WE WANT TO GIVE BEST RESULTS, WE TRY: IT MIGHT BE THAT THE  *\n*   JOB DOES HAVE INACTIVE SPOOL EXTENTS, BUT THESE WILL NOT GET IN   *\n*   OUR WAY TO READ JCT, IOT AND JCL FILE. SO WE TEST EACH MTTR. IF   *\n*   WE BUMP INTO AN INACTIVE SPOOL EXTENT, WE GIVE UP; YOU CAN'T SAY  *\n*   WE DIDN'T GIVE IT A TRY.                                          *\n*                                                                     *\n*   INPUT:  PCESEEK = MTTR.                                           *\n*               R14 = RETURN ADDRESS.                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nQSVMTTR  DS    0H\n         SLR   R15,R15                 CLEAR FOR IC\n         IC    R15,PCESEEK             GET M OF MTTR (EXTENT NUMBER).\n         MH    R15,=Y(DASSIZ)          TIMES SIZE OF $DAS\n         AL    R15,$DASFRST            POINT TO DAS ENTRY\n         USING DASDSECT,R15\n         TM    DASFLAG,DASAVAIL        EXTENT AVAILABLE ?\n         BNZR  R14                     RETURN IF YES.\n*\n*  GET THE VOLSER AND ISSUE \"SPOOL INACTIVE\" MESSAGE.\n*\n         MVC   QSDASERV,DASVOLID       MOVE VOLID TO MESSAGE.\n         LA    R1,QSDASERM             GET MESSAGE\n         LA    R0,L'QSDASERM           AND LENGTH\n         B     QSJOBERR                GO ISSUE MESSAGE.\n         DROP  R15\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*   CONSTANTS AND VARIABLES.                                          *\n*                                                                     *\n***********************************************************************\nQSMSG1   DS    0C\nQSM1TEXT DC    CL63' '                 /*SETUP CARD TEXT.\n         DC    CL17' '                 FILLER\nQSM1LEN  EQU   *-QSMSG1\n*\nQSWORK   DS    0F                      ROUTINE WORK AREA\nQSFLAG   DS    X                       FLAGS\nQSFFOUND EQU   X'80'                   SOMETHING LISTED.\nQSFSETUP EQU   X'40'                   /*SETUP FOUND FOR THIS JOB\nQSFBUF   EQU   X'20'                   A JES2 BUFFER WAS OBTAINED.\nQSFRCVR  EQU   X'10'                   RECOVERY INITIATED FOR $QS.\n         DS    X                       ** AVAILABLE\nQSLOWJN  DS    H                       JOB NUM LOW LIMIT\nQSHIGHJN DS    H                       JOB NUM HIGH LIMIT.\nQSJBKEY  DS    XL4                     CURRENT JOB KEY.\nQSWLEN   EQU   *-QSWORK\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*  RETURN FROM EXIT.                                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nX5RC0    DS    0H\n         LA    R15,0\n         B     X5RET\n*\nX5RC8    DS    0H\n         LA    R15,8\n         B     X5RET\n*\nX5RC12   DS    0H\n         LA    R15,12\n         B     X5RET\n*\nX5RET   $RETURN RC=(R15)\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*    ERROR SITUATIONS.                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*\n*  INVALID OPERAND DETECTED.\n*\nX5INVO   DS    0H                      INVALID OPERAND.\n         MVC   X5IMOP,=CL8' '          CLEAR OPERAND IN MESSAGE.\n         LM    R2,R3,0(R5)             LOAD CURRENT & NEXT OPERANDS\n         SR    R3,R2                   GET LENGTH.\n         SH    R3,=H'2'                1 FOR DELIMITER, 1 FOR MACHINE\n         BM    X5INV10                 SKIP INSERTION IF NULL.\n         CH    R3,=H'7'                MORE THEN 8 CHARS ?\n         BNH   *+8                     NO - OK.\n         LA    R3,7                    MAXIMUM IS 8 CHARS IN MESSAGE.\n         EX    R3,X5IMVC               MOVE OPERAND TO MESSAGE.\nX5INV10  DS    0H\n*\n         LA    R0,X5IMSGL\n        $CWTO  MSG=X5IMSG,                                             C\n               MSGID=650,                                              C\n               L=(R0)\n         B     X5RC8\n*\nX5IMSG   DS    0C\nX5IMOP   DS    CL8                     OPERAND IN MESSAGE.\n         DC    C' INVALID OPERAND'\nX5IMSGL  EQU   *-X5IMSG\n*\nX5IMVC   MVC   X5IMOP(*-*),0(R2)\n         EJECT ,\n*\n*  ERROR CONDITIONS WITHIN $QS.\n*\nQSJCTERR DS    0H\n         LA    R1,QSJCTERM             GET MESSAGE\n         LA    R0,L'QSJCTERM           AND LENGTH\n         B     QSJOBERR                GO ISSUE MESSAGE.\n*\nQSIOTERR DS    0H\n         LA    R1,QSIOTERM             GET MESSAGE\n         LA    R0,L'QSIOTERM           AND LENGTH\n         B     QSJOBERR                GO ISSUE MESSAGE.\n*\nQSPDBERR DS    0H\n         LA    R1,QSPDBERM             GET MESSAGE\n         LA    R0,L'QSPDBERM           AND LENGTH\n         B     QSJOBERR                GO ISSUE MESSAGE.\n*\nQSIOERR  DS    0H\n         LA    R1,QSIOERM              GET MESSAGE\n         LA    R0,L'QSIOERM            AND LENGTH\n         B     QSJOBERR                GO ISSUE MESSAGE.\n*\nQSSTPERR DS    0H\n         LA    R1,QSSTPERM             GET MESSAGE\n         LA    R0,L'QSSTPERM           AND LENGTH\n         B     QSJOBERR                GO ISSUE MESSAGE.\n*\n* ISSUE JOB RELATED ERROR MESSAGE:\n*\n*   R0 =  MESSAGE LENGTH\n*   R1 -> MESSAGE TEXT\n*   R10-> JQE.\n*\nQSJOBERR DS    0H\n         OI    COMFLAG,CMBFLAGJ        MARK JOB INFO TO BE APPENDED\n        $CWTO  MSG=(R1),                                               C\n               L=(R0),                                                 C\n               MSGID=990\n         NI    COMFLAG,FF-CMBFLAGJ     RESET \"JOB=YES\"\n         OI    QSFLAG,QSFFOUND         FAKE /*SETUP FOUND TO SKIP THE  C\n                                       ... \"NO SETUP FOUND\" MESSAGE.\n         B     QSNXTJQE\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*   AT THIS POINT, RECOVERY IS SCHEDULED FOR JQE CHASE ERRORS: IT     *\n* MIGHT HAPPEN THAT THE JOB QUEUE IS CHANGED WHEN WE $WAIT FOR I/O.   *\n* IF WE DETECT THIS SORT OF CONDITION, WE ISSUE A MESSAGE AND START   *\n* THE JOB QUEUE SCAN ALL OVER AGAIN.                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nQSRCOVER DS    0H\n         TM    QSFLAG,QSFRCVR          RECOVERY ALREADY DONE ONCE ?\n         BO    QSRJQERR                SORRY. NO RECURSION.\n*\n        $CWTO  MSG=QSRCVERM,           \"RECOVERY INITIATED\"            C\n               L=L'QSRCVERM,                                           C\n               MSGID=990\n*\n         OI    QSFLAG,QSFRCVR                 REMEMBER RECOVERY.\n         NI    QSFLAG,FF-QSFFOUND-QSFSETUP    CLEAR FLAGS.\n         B     QSOPDONE                       START ALL OVER AGAIN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ISSUE \"LIST INCOMPLETE\" ($HASP611).                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nQSRJQERR DS    0H\n        $CWTO  MSG='LIST INCOMPLETE',                                  C\n               MSGID=611\n*\n         B     X5RC8                   TERMINATE COMMAND PROCESSOR.\n         EJECT ,\nQSJCTERM DC    C'** ERROR - JCT COULD NOT BE READ'\nQSIOTERM DC    C'** ERROR - IOT COULD NOT BE READ'\nQSPDBERM DC    C'** ERROR - INPUT JCL PDDB NOT LOCATED'\nQSIOERM  DC    C'** ERROR - I/O ERROR READING JCL FILE'\nQSSTPERM DC    C'** ERROR - /*SETUP CARD NOT FOUND FOR JOB'\nQSDASERM DC    C'** ERROR - SPOOL EXTENT INACTIVE (XXXXXX)'\nQSDASERV EQU   *-7,6,C'C'\nQSRCVERM DC    C'--- RECOVERY INITIATED FOR $QS COMMAND ---'\n         LTORG ,\n        $MODEND ,\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EX16": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\xd7\\x00\\xd7\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 215, "newlines": 215, "modlines": 0, "user": "SYZYGYB"}, "text": "EXIT016  TITLE 'SYZYGY - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: EXIT016                                                *\n*                                                                     *\n* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT  *\n*                                                                     *\n* AUTHOR: BRIAN WESTERMAN                                             *\n*         SYZYGY INCORPORATED.                                        *\n*                                                                     *\n*                                                                     *\n* DATE WRITTEN: MAY  1986                                             *\n* DATE CHANGED: NOV  1990 BRIAN WESTERMAN FOR JES2 SP 3               *\n* DATE CHANGED: NOV  1993 BRIAN WESTERMAN FOR JES2 SP 4.1             *\n* DATE CHANGED: APR  1994 BRIAN WESTERMAN FOR JES2 SP 4.3             *\n* DATE CHANGED: MAY  1996 BRIAN WESTERMAN FOR JES2 SP 5.1.0           *\n* DATE CHANGED: AUG  1997 BRIAN WESTERMAN FOR JES2 SP 5.2.0           *\n*                                                                     *\n*               LINKEDIT INTO LINKLIB OR EQUIVILENT                   *\n*                                                                     *\n*               (MVS/SP-JES2 5.1.0)                                   *\n*               JES2 V5.1 PARMS:                                      *\n*                               LOADMOD(JESXIT16) OR LINK MODULE NAME *\n*                               EXIT(016) ROUTINE=(EXIT16),....       *\n*                                                                     *\n* PURPOSE: THIS EXIT MODIFIES THE $HASP165 MESSAGE BY ADDING EITHER   *\n*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *\n*          THE ABEND CODE OF THE JOB.                                 *\n*                                                                     *\n* ENTRY POINT: EXIT16                                                 *\n*                                                                     *\n* REGISTERS ON INPUT:                                                 *\n*     R0: A CODE INDICATING IF THIS IS THE FIRST OR SUCCEEDING        *\n*         $HASP165 (JOB NNNNN ENDED -- REASON TEXT) MESSAGE           *\n*         =0, INDICATES THAT THIS IS THE FIRST (AND POSSIBLY ONLY)    *\n*             MESSAGE INDICATING THE END OF THE JOB                   *\n*         =4, INDICATES THAT THIS NOT THE FIRST MESSAGE FOR THIS      *\n*             JOB GOING THROUGH THE OUTPUT PROCESSOR                  *\n*     R1: ADDRESS OF 3-WORD PARMETER LIST WITH THE FOLLOWING LAYOUT:  *\n*         WORD 1 (+0) ADDRESS OF THE MESSAGE TO BE SEND               *\n*         WORD 2 (+4) ADDRESS OF THE $WTO PARAMETER LIST              *\n*         WORD 3 (+8) ADDRESS OF THE JCT                              *\n*     R2-R10: N/A                                                     *\n*     R11: ADDRESS OF THE HCT                                         *\n*     R12: N/A                                                        *\n*     R13: ADDRESS OF THE OUTPUT PROCESSOR PCE                        *\n*     R14: RETURN ADDRESS                                             *\n*     R15: ENTRY ADDRESS                                              *\n*                                                                     *\n* REGISTERS ON RETURN:                                                *\n*     R0: N/A                                                         *\n*     R1: ADDRESS OF THE 3-WORD PARAMETER LIST                        *\n*     R15: A RETURN CODE:                                             *\n*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *\n*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *\n*              PROCESSING                                             *\n*          =8, TELLS JES2 NOT TO ISSUE THE NOTIFY $WTO                *\n*                                                                     *\n* JES2 MACROS USED:                                                   *\n*     $MODULE, $ENTRY, $SAVE, $RETURN, $MODEND                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nEXIT016  $MODULE ENVIRON=JES2,                                         C\n               $BUFFER,                REQ'D BY JCT                    C\n               $CAT,                   REQ'D BY HCT                    C\n               $CMB,                   REQ'D TO MAP $WTO PARM LIST     C\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C\n               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   C\n               $JCT,                   REQ'D TO GET JOBNAME, ETC.      C\n               $JQE,                   REQ'D BY HCT                    C\n               $MIT,                   REQ'D BY $MODEND, HCT           C\n               $PCE                    REQ'D TO GET PROCESSOR INFO\n*EXIT016  AMODE 31\nEXIT016  RMODE 24\n         TITLE 'SYZYGY - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n*  INITIALIZATION                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE  1\nEXIT16   $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE  2\n         $SAVE                          SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         L     R10,8(,R1)              LOAD JCT ADDRESS\n         SLR   R15,R15                 SET DEFAULT RETURN CODE\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE HAS     *\n*  BEEN SAVED.  IF NOT, RETURN.                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING JCT,R10\n         SPACE 1\n         CLI   JCTUSER1,X'80'          IS JOB'S ABEND/MAX CC SAVED?\n         BNE   RETURN                  NO, RETURN\n         CLI   JCTJTFLG,X'80'  80=FAIL,IS MESSAGE TO BE ALTERED?\n         BE    RETURN                  NO, SKIP\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PREPARE TO ALTER THE NOTIFY MESSAGE.                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         L     R4,4(,R1)               GET ADDRESS OF $WTO PARM LIST\n         USING CMBWTOPL,R4             ESTABLISH $CMD ADDRESSABILITY\n         SLR   R5,R5                   ZERO WORK REGISTER\n         IC    R5,CMBML                GET MESSAGE LENGTH\n         CH    R5,=H'68'               MSG TOO LONG TO UPDATE IN PLACE?\n         BH    RETURN                  YES, RETURN (SHOULDN'T HAPPEN)\n         L     R6,0(,R1)               GET ADDRESS IF MESSAGE TEXT\n         AR    R6,R5                   POINT PAST EXISTING MESSAGE TEXT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THE JOB ABENDED.  IF IT DID, GET THE ABEND CODE.   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         TM    JCTJTFLG,X'20'  20=ABEND,  DID JOB ABEND?\n         BZ    MAXCONDC                NO, GO GET MAXIMUM COND CODE\n         SPACE 1\n         L     R2,JCTUSER1             GET ABEND CODE\n         LA    R2,0(,R2)               CLEAR HIGH ORDER BYTE\n         SRL   R2,12                   OBTAIN SYSTEM CODE\n         LTR   R2,R2                   WAS IT A SYSTEM CODE ABEND?\n         BZ    USRABEND                NO, GO PROCESS USER CODE ABEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ABENDED WITH A SYSTEM ABEND CODE, COME HERE TO ALTER    *\n*  THE NOTIFY MESSAGE TO INCLUDE THE SYSTEM ABEND CODE.               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSYSABEND DS    0H\n         LA    R5,10(,R5)              INCR. MSG LENGTH\n         MVC   0(10,R6),=C'SYSTEM XXX' ADD SYSTEM ABEND CODE TO MSG\n         SRDL  R2,12                   CONVERT IT TO HEX\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,7(,R6)                      \"\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,8(,R6)                      \"\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,9(,R6)                      \"\n         B     STORELEN                GO CHECK NEW MESSAGE LENGTH\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ABENDED WITH A USER ABEND CODE, COME HERE TO ALTER THE  *\n*  NOTIFY MESSAGE TO INCLUDE THE USER ABEND CODE.                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUSRABEND DS    0H\n         LA    R5,9(,R5)               INCR. MSG LENGTH\n         MVC   0(9,R6),=C'USER XXXX'   ADD USER ABEND CODE TO MSG\n         LH    R2,JCTUSER1+2           GET USER ABEND CODE\n         CVD   R2,5(,R6)               CONVERT TO DECIMAL\n         UNPK  5(4,R6),5(8,R6)         UNPK FOUR LOW DIGITS\n         OI    8(R6),X'F0'             SET ZONE\n         MVC   9(2,R6),=C'  '          CLEAR TWO  BYTES\n         B     STORELEN                GO CONVERT TO DEC/PRINTABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ENDED NORMALLY, COME HERE TO ALTER THE NOTIFY MESSAGE   *\n*  TO INCLUDE THE MAXIMUM CONDITION CODE FOR ANY STEP IN THE JOB.     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMAXCONDC DS    0H\n         MVC   0(20,R6),=C'- MAX COND CODE XXXX'  ADD MAXCC TO MSG\n         LA    R5,20(,R5)              INCR. MESSAGE LENGTH\n         LH    R2,JCTUSER1+2           GET MAX CONDITION CODE\n         CVD   R2,16(,R6)              CONVERT TO DECIMAL\n         UNPK  16(4,R6),16(8,R6)       UNPK FOUR LOW DIGITS\n         OI    19(R6),X'F0'            SET ZONE\n         MVC   20(2,R6),=C'  '         CLEAR TWO  BYTES\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  STORE NEW MESSAGE LENGTH IN CMB PARM LIST.                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSTORELEN DS    0H\n         STC   R5,CMBML                STORE MSG LEN IN CMB PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  GO BYE-BYE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRETURN   DS    0H\n        $RETURN RC=(R15)               RETURN TO CALLER\n         EJECT\nCONVTABL DC    CL16'0123456789ABCDEF'  CONVERSION TABLE\n         LTORG\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EX16$": {"ttr": 3084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00,\\x00,\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "SYZYGYB"}, "text": "//$SPBHW   JOB  (BHWEST,NOBOX),'SYSTEMS*BRIAN',CLASS=7,\n//     MSGCLASS=W,NOTIFY=$SPBHW,REGION=0M,TIME=1440\n//*\n//*\n//*   REFER   $SPBHW.PDS.DATA(EX16$)\n//*\n//ASMFCL PROC  CLASS='*',      -   SYSOUT CLASS\n//             MEM=,\n//             DSN='$SPBHW.PDS.DATA',\n//             LOAD='SYS1.LINKLIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=ASMA90,REGION=5M,COND=EVEN,\n//         PARM='OBJECT,NODECK'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.HASPSRC,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=2M,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=$SPBHW.VTOC.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=EX16\n//LKED.SYSIN   DD   *\n   NAME JESXIT16(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EX8": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\xf7\\x00\\xf7\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 247, "newlines": 247, "modlines": 0, "user": "SYZYGYB"}, "text": "EX8      TITLE 'SYZYGY - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: EXIT008             (CONTROL BLOCK READ/WRITE EXIT)    *\n*                                                                     *\n* DESCRIPTIVE NAME: JES2 EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT  *\n*                                                                     *\n* AUTHOR: BRIAN WESTERMAN                                             *\n*                                                                     *\n* DATE WRITTEN: MAY 1986                                              *\n* DATE CHANGED: MARCH 1990 BY GREG PRICE (PRYCROFT SIX) FOR SP3.1.1   *\n*               JANUARY 1992 BY GREG PRICE (FERNTREE) FOR SP4.2.0     *\n*               MAY 1996 BY BRIAN WESTERMAN FOR JES2 SP5.1.0          *\n*               AUG 1997 BY BRIAN WESTERMAN FOR JES2 SP5.2.0          *\n*                                                                     *\n*               LINKEDIT INTO LPALIB OR EQUIVILENT                    *\n*                                                                     *\n*               (MVS/SP-JES2 5.1.0)                                   *\n*               JES2 V5.1 PARMS:                                      *\n*                               LOADMOD(JESXIT8) OR LINK MODULE NAME  *\n*                               EXIT(008) ROUTINE=(EXIT08),....       *\n*                                                                     *\n* PURPOSE: THIS EXIT PLACES OBTAINS AND STORES IN THE JCT EITHER      *\n*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *\n*          THE ABEND CODE OF THE JOB.                                 *\n*                                                                     *\n* INVOCATION POINT: EXIT008                                           *\n*                                                                     *\n* ENTRY POINT: EXIT08                                                 *\n*                                                                     *\n* REGISTERS ON INPUT:                                                 *\n*     R0: ADDRESS OF THE XPL                                          *\n*     R1: ADDRESS OF THE JCT                                          *\n*     R2-R10: N/A                                                     *\n*     R11: ADDRESS OF THE SVT                                         *\n*     R12: N/A                                                        *\n*     R13: ADDRESS OF AN OS-STYLE SAVE AREA                           *\n*     R14: RETURN ADDRESS                                             *\n*     R15: ENTRY ADDRESS                                              *\n*                                                                     *\n* REGISTERS ON RETURN:                                                *\n*     R0-R1: N/A                                                      *\n*     R15: A RETURN CODE:                                             *\n*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *\n*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *\n*              PROCESSING                                             *\n*                                                                     *\n* JES2 MACROS USED:                                                   *\n*     $MODULE, $ENTRY, $MODEND                                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nEXIT008  $MODULE ENVIRON=USER,                                         C\n               SSOB,                   REQ'D TO DETERMINE INVOKER      C\n               RPL,                    REQ'D BY $BUFFER                C\n               $BUFFER,                REQ'D BY JCT                    C\n               $CADDR,                 REQ'D BY SOMETHING              C\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C\n               $HCCT,                  REQ'D TO DETERMINE INVOKER      C\n               $HFAME,                 REQ'D BY $HCCT                  C\n               $JCT,                   REQ'D TO SAVE ABEND/COND CODE   C\n               $MIT,                   REQ'D BY $MODEND, $HCCT         C\n               $PADDR,                 REQ'D BY SOMETHING              C\n               $PARMLST,               REQ'D BY SOMETHING              C\n               $PSV,                   REQ'D BY SOMETHING              C\n               $SCAT,                  REQ'D BY $HCCT                  C\n               $SJB,                   REQ'D TO DETERMINE INVOKER      C\n               $TQE,                   REQ'D BY $SJB                   C\n               $USERCBS,               REQ'D BY SOMETHING              C\n               $XECB,                  REQ'D BY $HCCT                  C\n               $XPL                    REQ'D TO CHECK PARAMETER LIST\n*EXIT008  AMODE 31\nEXIT008  RMODE 24\n         TITLE 'SYZYGY - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n*  INITIALIZATION                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT08   $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE 3\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         SLR   R15,R15                 SET DEFAULT RETURN CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THERE IS A JCT , IF IT IS FOR A BATCH JOB AND      *\n*  IF NOTIFY WAS REQUESTED.  IF NOT, RETURN.                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LR    R10,R0                  GET ADDRESS OF XPL\n         USING XPL,R10\n         SPACE 1\n         CLC   =C'JCT ',X008CBID       IS A JCT BEING PROCESSED?\n         BNE   RETURN                  NO\n         SPACE 1\n         CLI   XPLCOND,X008CBWR        IS A JCT BEING WRITTEN?\n         BNE   RETURN                  NO\n         DROP  R10                     XPL\n         SPACE 1\n         LR    R10,R1                  GET ADDRESS OF JCT\n         USING JCT,R10\n         SPACE 1\n         CLI   JCTJOBID,C'J'           IS THIS A BATCH JOB?\n         BNE   RETURN                  NO, RETURN\n         SPACE 1\n         CLI   JCTTSUID,C' '           WAS NOTIFY REQUESTED?\n         BE    RETURN                  NO, RETURN\n         SPACE 1\n         TM    JCTJBOPT,JCTXBMII       IS THIS AN EXECUTION BATCH      C\n               (JCTXBMII WAS JCTXBACH)   MONITOR?\n         BO    RETURN                  YES, RETURN\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  FIND THE SJB ON THE JOBS EXECUTING BY CLASS QUEUE THAT BELONGS TO  *\n*  THIS JOB'S JCT.  IF THE SJB INDICATES THE JOB IS NOT IN            *\n*  TERMINATION, THEN RETURN.                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING HCCT,R11                PROVIDE SSVT ADDRESSABILITY\n         SPACE 1\n         L     R2,CCTJXCLS             GET EXECUTING SJB'S QUEUE\n         USING SJB,R2                  PROVIDE SJB ADDRESSABILITY\nGETSJB   DS    0H\n         LTR   R2,R2                   TEST FOR END OF QUEUE\n         BZ    RETURN                  RETURN IF NO MATCH\n         CLC   JCTJOBID(8),SJBJOBID    IS THIS THE SJB FOR THIS JCT?\n         BE    FOUNDSJB                YES, PROCESS IT\n         L     R2,SJBXQCHN             GET POINTER TO NEXT SJB\n         B     GETSJB                  LOOP BACK THRU\n         SPACE 1\nFOUNDSJB DS    0H\n         CLI   SJBXQFN1+1,SSOBTERM     WAS EXIT INVOKED BY JOB         C\n                                         TERMINATION (HOSTERM)?\n         BNE   RETURN                  NO, RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*  FIND THE OS JCT FOR THIS JOB AND CHECK TO SEE IF THE JOB ABENDED.  *\n*  IF IT DID ABEND, GET THE ABEND CODE.                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETCVT   EQU   *\n         L     R2,CVTPTR               LOAD ADDR OF CVT POINTER\n         L     R2,0(,R2)               LOAD ADDR OF NEXT/CURR TCB'S\n         L     R2,OURTCB(,R2)          LOAD ADDR OF OUR TCB\n         L     R2,TCBJSCB(,R2)         LOAD ADDR OF JSCB\n         L     R2,JSCBACT(,R2)         LOAD ADDR OF ACTIVE JSCB\n         L     R2,JSCBJCT(,R2)         LOAD ADDR OF OS JCT\n         USING INJMJCT-16,R2           ESTABLISH OS JCT ADDRESSABILITY\n         SPACE 1\n         TM    JCTJSTAT,JCTABEND       DID JOB ABEND?\n         BNO   GETMAXCC                NO, GET MAXIMUM CONDITION CODE\n         L     R3,JCTACODE             YES, GET ABEND CODE\n         B     SAVECODE                GO TO SAVE IT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  IF THE JOB DID NOT ABEND, THEN SCAN THE SCT'S FOR THE JOB AND      *\n*  FIND THE MAXIMUM CONDITION CODE OUT OF ALL THE JOB'S STEPS.        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETMAXCC DS    0H\n         L     R2,JCTSDKAD             GET FIRST SCT ADDRESS\n         USING INSMSCT-16,R2           ESTABLISH SCT ADDRESSABILITY\n         SPACE 1\n         SLR   R3,R3                   ZERO OUT WORK REGISTER\n         SPACE 1\nSCTLOOP  DS    0H\n         SRL   R2,8                    GET ADDRESS IN PROPER FORM\n         LTR   R2,R2                   ARE THERE ANY MORE SCT'S?\n         BZ    SAVECODE                NO, GO TO FINISH\n         TM    SCTSTEND,SCTSTSRT+SCTSTPND  DID STEP RUN?\n         BNO   NEXTSCT                 NO, GET NEXT SCT\n         CH    R3,SCTSEXEC             IS THIS STEP'S CONDITION CODE   C\n                                         GREATER THAN THE MAXIMUM?\n         BNL   NEXTSCT                 NO, GET NEXT SCT\n         LH    R3,SCTSEXEC             YES, SAVE NEW MAX COND CODE\nNEXTSCT  DS    0H\n         L     R2,SCTANSCT             GET NEXT SCT\n         B     SCTLOOP                 LOOP TO CHECK NEXT SCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SAVE EITHER THE ABEND CODE OR THE MAXIMUM CONDITION CODE FOR       *\n*  ANY STEP OF THE JOB IN A JCT USER FIELD.  THIS INFORMATION WILL    *\n*  BE USED LATER IN EXIT016 - TSO NOTIFY.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSAVECODE DS    0H\n         ST    R3,JCTUSER1             SAVE ABEND/MAX COND CODE\n         MVI   JCTUSER1,X'80'          MARK IT AS PROCESSED\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  GO BYE-BYE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRETURN   DS    0H\n         L     R14,12(,R13)            LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)          RESTORE REGISTERS\n         BR    R14                     RETURN\n         EJECT\nPATCH    DS    CL200\n         DC    CL8'ENDPATCH'\nCVTPTR   EQU   X'10'         ADDRESS OF CVT POINTER\nOURTCB   EQU   X'04'         OFFSET INTO TCB LIST OF OUR TCB ADDRESS\nTCBJSCB  EQU   X'B4'         OFFSET INTO TCB OF JSCB ADDRESS\nJSCBACT  EQU   X'15C'        OFFSET INTO JSCB OF ACTIVE JSCB ADDRESS\nJSCBJCT  EQU   X'104'        OFFSET INTO ACTIVE JSCB OF OS JCT ADDRESS\n         SPACE 3\nJCTDSCT  DSECT\n*        THIS CONTROL BLOCK IS A COPY OF OS JCT DEFINING\n*        ONLY THOSE FIELDS USED BY THIS MOD.  THE OS JCT,\n*        IEFAJCTB, CONTAINS DUPLICATE FIELD NAMES OF THOSE\n*        USED BY THE JES2 JCT (JCTID, JCTJNAM, AND JCTJMR)\n*        AND CAUSES ASSEMBLY ERRORS IF IT USED.\nINJMJCT  EQU    *\n         DS     CL5                    FILLER\nJCTJSTAT DS     1C                     JOB STATUS INDICATORS\nJCTABEND EQU    8                      BIT 4 - JCT ABEND BIT\n         DS     CL26                   FILLER\nJCTSDKAD DS     CL4                    DISK ADDRESS OF FIRST SCT\n         DS     CL132                  FILLER\nJCTACODE DS     CL4                    ABEND CODE FIELD\n         EJECT\n         PUSH   PRINT\n         PRINT  NOGEN\nSCTDSCT  DSECT\n         IEFASCTB\n         POP    PRINT\nEXIT008  RSECT\n         SPACE  3\n         LTORG\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EX8$": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00+\\x00+\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "SYZYGYB"}, "text": "//$SPBHW   JOB  (BHWEST,NOBOX),'SYSTEMS*BRIAN',CLASS=7,\n//     MSGCLASS=W,NOTIFY=$SPBHW,REGION=0M,TIME=1440\n//*\n//*\n//*   REFER   $SPBHW.PDS.DATA(EX8$)\n//ASMFCL PROC  CLASS='*',      -   SYSOUT CLASS\n//             MEM=,\n//             DSN='$SPBHW.PDS.DATA',\n//             LOAD='SYS1.LPALIB',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=ASMA90,REGION=5M,COND=EVEN,\n//         PARM='OBJECT,NODECK'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.HASPSRC,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=2M,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=$SPBHW.VTOC.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=EX8\n//LKED.SYSIN   DD   *\n   NAME JESXIT8(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EX99": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x01\\xb8\\x01\\xb8\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 440, "newlines": 440, "modlines": 0, "user": "SYZYGYB"}, "text": "*===================================================================CCI    6.\n*                                                                   CCI    7.\n*     THIS MODULE IS THE INSTALLATION EXIT FOR DYNAMIC              CCI    8.\n*     ALLOCATION FOR DATASET ACCESS LEVEL VALIDITY CHECKING.        CCI    9.\n*                                                                   CCI   10.\n*     THE VOLUME ASSIGNMENT FEATURE OF PCF HAS BEEN REPLACED        CCI   11.\n*     WITH PRC CODE TO OBTAIN THE DEFAULT DYNAMIC ALLOCATION        CCI   12.\n*     VOLUME FROM THE USER PROFILE TABLE OR COMPUTE A VOLSER        CCI   13.\n*     OF TSO'N' WHERE 'N' COMES FROM THE LOW ORDER 4 BITS OF        CCI   14.\n*     PSCBATR2+1.  THIS FEATURE PROVIDES THE ABILITY TO MOUNT       CCI   15.\n*     TSO PACKS ON ANY DRIVES WITH A MOUNT ATTRIBUTE OF PRIVATE.    CCI   16.\n*                                                                   CCI   17.\n*     IT HAS BEEN MODIFIED BY PRC-CCI TO RUN EVEN IF THE TSO        CCI   18.\n*     USER IS RUNNING A NON-PCF TMP.  OTHER MODIFICATIONS           CCI   19.\n*     ARE DESCRIBED IN THE CODE AT LABEL 'AUTHOK'.                  CCI   20.\n*                                                                   CCI   21.\n*===================================================================CCI   22.\n         SPACE 1                                                          23.\nIEFDB401 PCFSAVE WORK=NO,TITLE=DYNAMIC_ALLOCATION_INSTALLATION_EXIT       24.\n         LR    R2,R1          SAVE PARM REG                               25.\n         L     R1,4(R2)       GET ADDR OF WORKAREA ADDR                   26.\n         L     R1,0(R1)       GET ADDR OF WORKAREA                        27.\n         LR    R8,R1          LOAD WORKAREA BASE REGISTER           CCI   28.\n         USING WORKAREA,R8    USE IT                                CCI   29.\n         LA    R1,20(R1)      REGISTER SAVEAREA STARTS AT           CCI   30.\n*                             WORKAREA+20                           CCI   31.\n         ST    R13,4(R1)      SET SAVE LINKAGE                            32.\n         ST    R1,8(R13)                                                  33.\n         LR    R13,R1                                                     34.\n*                                                                         35.\n*     LOCATE TCB AND CHECK FOR TSO WITH PCF                               36.\n*                                                                         37.\n         L     R1,16          GET CVT PTR                                 38.\n         L     R1,0(R1)       TCB DOUBLEWORD ADDR                         39.\n         L     R1,4(R1)       CURRENT TCB                                 40.\n         L     R5,X'B4'(R1)   GET JSCB PTR             TCBJSCB            41.\n         ICM   R10,15,X'108'(R5)  GET PSCB PTR FOR TSO JSCBPSCB           42.\n         USING PSCB,R10                                                   43.\n         BZ    EXITL          IF ZERO, NOT TSO USER                       44.\n         MODESET EXTKEY=ZERO   NEED KEY ZERO FOR FETCH PROTECT      CCI   45.\n         MVI   PCFIND,X'00'   INIT LOGIC SW TO PCF=YES              CCI   46.\n         L     R1,124(R1)     GET JSTCB PTR                               47.\n         LA    R15,36(R1)     POINT TO LLS PTR                            48.\nMODLP    ICM   R15,15,0(R15)  POINT TO LOAD LIST ELE                      49.\n         BNP   NOPCF          EXIT IF END OF LIST                   CCI   50.\n         L     R14,4(R15)     GET CDE PTR                                 51.\n         CLC   8(8,R14),=C'PCFTBLS ' IS PCF IN SYSTEM                     52.\n         BNE   MODLP          LOOP UNTIL FOUND                            53.\n         L     R1,112(R1)     GET FSA PTR                                 54.\n         L     R11,24(R1)     GET TMPWA PTR FROM REG 1                    55.\n         USING TMPWRKA1,R11                                               56.\n         L     R4,CPPLPTR     GET CPPL FROM TMPWA                         57.\n         USING CPPL,R4                                                    58.\n         PCFTEST CPPLECT,R4,,PCFTSO  CHECK FOR PCF                        59.\n*                                                                         60.\nNOPCF    MVI   PCFIND,X'FF'   SET LOGIC SW FOR PCF=NO               CCI   61.\n         B     PCFTSO         ....AND CONTINUE                      CCI   62.\n*                                                                         63.\nEXITL    SR    R15,R15        GOOD REQUEST                                64.\nEXIT     MODESET EXTKEY=SCHED   RETURN TO SCHED KEY                       65.\n         L     R13,4(R13)     GET PREV REG 13                             66.\n         L     R14,12(R13)    GET REG 14                                  67.\n         LM    R0,R12,20(R13) RESTORE REGS                                68.\n         BR    R14            RETURN                                      69.\n*                                                                         70.\n*     CHECK PARAMETER LIST FOR ALLOCATION BY DSNAME AND LOCATE            71.\n*     NECESSARY TEXT UNITS                                                72.\n*                                                                         73.\nPCFTSO   L     R3,0(R2)       POINT TO PARM BLOCK                         74.\n         USING S99RB,R3                                                   75.\n         CLI   S99VERB,S99VRBAL  CHECK FOR ALLOCATION REQUEST             76.\n         BNE   EXITL          NO,EXIT                                     77.\n         L     R6,S99TXTPP    GET ADDR OF TXT UNIT PTRS                   78.\n         USING S99TUPL,R6                                                 79.\n         XC    DSNA(ENDWORK-DSNA),DSNA  CLEAR UNIT SAVE AREA              80.\nLSTLOOP  ICM   R7,7,S99TUPL+1  GET A TEXT UNIT ADDRESS                    81.\n         BZ    ETXTCK         SKIP NULL ENTRIES                           82.\n         USING S99TUNIT,R7                                                83.\n         CLI   S99TUKEY+1,DALSSREQ  IS THIS SUBSYSTEM REQ                 84.\n         BE    EXITL          YES, ASSUME OK                              85.\n         CLI   S99TUKEY+1,DALDSNAM  IS THIS DSNAME KEY                    86.\n         BNE   NODSN          NO                                          87.\n         ST    R7,DSNA        SAVE UNIT ADDR                              88.\nNODSN    CLI   S99TUKEY+1,DALSTATS  IS THIS STATUS KEY                    89.\n         BNE   NOSTAT           NO                                        90.\n         MVC   STAT,S99TUPAR  SAVE STATUS PARM                            91.\nNOSTAT   CLI   S99TUKEY+1,DALNDISP  IS THIS NORMAL DISP                   92.\n         BNE   NONDSP         NO                                          93.\n         MVC   NRMT,S99TUPAR  SAVE NORMAL DISP PARM                       94.\nNONDSP   CLI   S99TUKEY+1,DALCDISP  IS THIS CONDITIONAL DISP              95.\n         BNE   NOCDSP         NO                                          96.\n         MVC   CNDT,S99TUPAR  SAVE CONDITIONAL DISP PARM                  97.\nNOCDSP   CLI   S99TUKEY+1,DALVLSER  IS THIS A VOL KEY                     98.\n         BNE   CKU1           NO                                    CCI   99.\n         ST    R7,VOLT        SAVE ADDR OF KEY ADDRESS                   100.\nCKU1     CLI   S99TUKEY+1,DALUNIT   IS THIS UNIT KEY ?              CCI  101.\n         BNE   ETXTCK         NO                                    CCI  102.\n         ST    R7,TOUNIT      SAVE 'UNIT' TXT UNIT ADDR             CCI  103.\nETXTCK   TM    S99TUPL,X'80'  LAST TEXT UNIT                             104.\n         BO    ENDTXT         IF NEGATIVE, YES                           105.\n         LA    R6,4(R6)       GET NEXT TEXT PTR                          106.\n         B     LSTLOOP        LOOP                                       107.\n*                                                                        108.\n*     BEGIN DSNAME VALIDATION                                            109.\n*                                                                        110.\nENDTXT   ST    R6,TUEND       SAVE ADDR OF LAST TEXT UNIT                111.\n         CLI   PCFIND,X'FF'   DOES SW SAY PCF=NO ??                 CCI  112.\n         BO    AUTHOK         YES - NO PCF PROCESSING               CCI  113.\n         ICM   R7,15,DSNA     GET DSNAME UNIT ADDR                       114.\n         BZ    AUTHOK         NONE, ASSUME TEMP                     CCI  115.\n         CLI   S99TULNG+1,0   PRESENT, CK LENGTH ZERO DSNAME             116.\n         BE    AUTHOK         ASSUME TEMP                           CCI  117.\n         CLI   S99TUPAR,C'&&' IS DSNAME TEMPORARY                        118.\n         BE    AUTHOK         YES, NO AUTH CHECK OR VOLUME CHECK    CCI  119.\n         CLI   S99TUPAR,C' '  DSNAME BLANK                               120.\n         BE    AUTHOK         YES, ASSUME TEMP                      CCI  121.\n         CLC   S99TULNG(10),NULLF  IS DSNAME NULLFILE                    122.\n         BE    EXITL          YES, EXIT                                  123.\n         IC    R1,PSCBATR2    GET FIRST USERDATA BYTE                    124.\n         SLL   R1,28          CLEAR COMMAND AUTH BITS                    125.\n         SRA   R1,28          REPOSITION AND CK ZERO                     126.\n         BZ    AUTHOK         IF ZERO, CHK NO FURTHER                    127.\n         STC   R1,CODE        SAVE CODE IN WORKAREA                      128.\n         CLC   PSCBUSER+7(1),S99TULNG+1  IS DSN < USERID                 129.\n         BH    NOUSPFX        YES                                        130.\n         ICM   R1,1,PSCBUSER+7  GET USERID LENGTH                        131.\n         BZ    NOUSPFX        IF BACKGROUND, MOVE ON                     132.\n         BCTR  R1,0           REDUCE FOR EXECUTE                         133.\n         EX    R1,USRIDC      COMPARE DSNAME TO USERID                   134.\n         BNE   NOUSPFX        NO MATCH                                   135.\n         LA    R1,S99TUPAR(R1)  INCREMENT PAST USERID                    136.\n         CLI   1(R1),C'.'     CHECK FOR PERIOD                           137.\n         BE    USRID          ASSUME USERID PREFIXED                     138.\n*                                                                        139.\n*     VALIDATE AGAINST SYSTEM AND RESTRICTED NAME TABLES                 140.\n*                                                                        141.\nNOUSPFX  L     R15,PCFSYSP    POINT TO SYSTEM PREFIX TABLE               142.\n         BAL   R14,CKPFX      CHECK DSNAME AGAINST ENTRIES               143.\n         B     NOSYS          IMMEDIATE RETURN MEANS NO MATCH            144.\n         TM    STAT,X'08'      MATCH FOUND, IS IT SHR ACCESS             145.\n         BZ    CKPERM         NO, OLD REQUIRES LEVEL 0                   146.\n         CLI   CODE,1           IS ACCESS CODE 1                         147.\n         BH    CKPERM         IF NOT ONE, NOT HIGH ENOUGH                148.\n         B     AUTHOK         IF ONE, OK                                 149.\nNOSYS    L     R15,PCFDSNS    POINT TO TABLE OF RESTRICTED NAMES         150.\n         BAL   R14,CKPFX      GO CHECK DSNAME                            151.\n         B     NOSTRCT        NO MATCLIFOUND                             152.\n         CLI   CODE,2           MATCH, IS USER LEVEL 2                   153.\n         BNH   AUTHOK         YES, OK                                    154.\n         TM    STAT,X'08'  IS SHR ACCESS REQUESTED                       155.\n         BZ    CKPERM         NO, USER NOT HIGH ENOUGH                   156.\n         CLI   CODE,3           IS USER LEVEL 3                          157.\n         BH    CKPERM         YES, HIGH ENOUGH FOR SHR RESTR             158.\nNOSTRCT  CLI   CODE,4           NO, MUST BE LEVEL 4 OR LESS              159.\n         BNH   AUTHOK         USER OK FOR GENERAL OS REFERENCE           160.\n         TM    STAT,X'08'  IS REFERENCE SHR                              161.\n         BZ    CKPERM         NO, NOT HIGH ENOUGH LEVEL                  162.\n         CLI   CODE,5           LEVEL 5 WILL HANDLE SHR REQUESTS         163.\n         BH    CKPERM         IF NOT THAT HIGH, ERROR                    164.\nUSRID    CLI   CODE,6           IS USER LEVEL 6 OR LESS                  165.\n         BNH   AUTHOK         YES, OK FOR USERID PREFIX                  166.\n*                                                                        167.\n*     IF DSNAME IS ALREADY ALLOCATED (BY LOGON)                          168.\n*     ALLOW ACCESS AT THE SAME OR LOWER LEVEL                            169.\n*                                                                        170.\nCKPERM   L     R5,X'15C'(R5)  GET ACTIVE JSCB PTR      JSCBACT           171.\n         L     R5,X'140'(R5)  GET QDB FOR DSAB CHAIN   JSCDSABQ          172.\n         ICM   R5,15,X'0C'(R5)  GET FIRST DSAB PTR     DSQFRSTP          173.\nDSELP    BZ    AUTHMESS       ERROR IF END OF DSABS                      174.\n         USING DSAB,R5                                                   175.\n         TM    DSABFLG1,DSABPALC    MUST BE PERMANENTLY ALLOC            176.\n         BNO   DSEINC         NO, SKIP TO NEXT                           177.\n         L     R14,DSABSIOT  GET ADDRESS OF SIOT                         178.\n         L     R15,X'9C'(R14)  GET ADDRESS OF JFCB     SJFCBPTR          179.\n         LH    R1,S99TULNG    GET DSNAME LENGTH                          180.\n         BCTR  R1,0           REDUCE FOR EXECUTE                         181.\n         EX    R1,DSECMP      COMPARE TO DSNAME IN JFCB                  182.\n         BE    DSCHKD         YES, DOUBLE CHECK                          183.\n         TM    X'2E'(R14),X'80'  CHECK FOR ALIAS                         184.\n         BNO   DSEINC         NO, SKIP                                   185.\n         L     R15,X'A0'(R14) GET JFCB EXTENSION                         186.\n         EX    R1,DSACMP      CHECK ALIAS                                187.\n         BNE   DSEINC         NO MATCH                                   188.\nDSCHKD   LA    R1,1(R15,R1)   DOUBLE CHECK MATCH                         189.\n         TM    0(R1),255-C' ' FOR FULL DSN(FLWD BY C' ' OR X'00')        190.\n         BNZ   DSEINC         NO, MOVE ON                                191.\n         TM    NRMT,7         CHECK DISP FOR KEEP                        192.\n         BNZ   AUTHMESS       NO, ERROR                                  193.\n         TM    CNDT,7         CHK COND DISP FOR KEEP                     194.\n         BNZ   AUTHMESS       NO, ERROR                                  195.\n         CLI   STAT,4         IS REQUEST FOR NEW                         196.\n         BE    AUTHMESS       YES, ERROR                                 197.\n         BH    EXITL          IF SHR, OK                                 198.\n         TM    87(R15),8      IS CURRENT ALLOC STATUS SHARED             199.\n         BZ    EXITL          NO, ALLOW EXCLUSIVE      JFCFIND2          200.\nDSEINC   ICM   R5,15,4(R5)    GET NEXT DSAB PTR                          201.\n         B     DSELP          LOOP                                       202.\n         DROP  R5                                                        203.\n  EJECT                                                                  204.\n*===================================================================CCI  205.\n*                                                                   CCI  206.\n*     PRC COMPUTER CENTER - LOCAL MODIFICATIONS                     CCI  207.\n*                                                                   CCI  208.\n*         1.  IF ALLOCATION IS NOT 'NEW' DATASET, EXIT              CCI  209.\n*         2.  IF (NEW,DELETE), THEN NULLIFY ANY VOLSER AND          CCI  210.\n*             SET UNIT=SYSDA.                                       CCI  211.\n*         3.  IF NORMAL DISP NOT DELETE, SET VOLSER TO              CCI  212.\n*             VOLSER (IF IT EXISTS) FOUND IN THE UPT (SET WITH      CCI  213.\n*             THE SETVOL COMMAND), OTHERWISE GENERATE THE DEFAULT   CCI  214.\n*             VOLUME OF TSO'N' WHERE 'N' IS THE LOW ORDER 4 BITS    CCI  215.\n*             OF FIELD PSCBATR2+1.                                  CCI  216.\n*                                                                   CCI  217.\n*===================================================================CCI  218.\n         SPACE 1                                                         219.\nAUTHOK   TM    STAT,X'04'     IS REQUEST NEW                        CCI  220.\n         BZ    EXITL          NO, GET OUT                           CCI  221.\n         TM    NRMT,X'04'    NORMAL DISP = DELETE ?                 CCI  222.\n         BZ    NODELE        NO                                     CCI  223.\n*                                                                   CCI  224.\n*     DATASET IS (NEW,DELETE) - SEND IT TO SYSDA                    CCI  225.\n*                                                                   CCI  226.\n         ICM   R7,15,VOLT    GET VOLSER TEXT UNIT                   CCI  227.\n         BZ    NOVOL         DOESN'T EXIST - FINE                   CCI  228.\n         MVI   S99TUKEY+1,X'00'    NULLIFY VOLSER TEXT UNIT         CCI  229.\nNOVOL    ICM   R7,15,TOUNIT  GET 'UNIT' TEXT UNIT                   CCI  230.\n         BZ    NEEDU         NOT THERE - FINE                       CCI  231.\n         MVI   S99TUKEY+1,X'00'    NULLIFY 'UNIT' TEXT UNIT         CCI  232.\nNEEDU    MVC   UTEXT(14),USYSDA    MOVE UNIT=SYSDA TXT UNIT         CCI  233.\n         LA    R7,UTEXT      POINT TO 'UNIT' TEXT UNIT              CCI  234.\n         BAL   R15,EXTUN     HANG ON END OF TU PTR LIST             CCI  235.\n         B     EXITL         FINI - RETURN                          CCI  236.\n*                                                                   CCI  237.\n*    DATASET NEW BUT NOT DELETE - CONTROL WHERE IT GOES             CCI  238.\n*                                                                   CCI  239.\nNODELE   EQU   *                                                    CCI  240.\n         ICM   R7,15,VOLT    GET ADDR OF 'VOLSER' TEXT UNIT         CCI  241.\n         BNZ   EXITL         ITS THERE - DON'T SET DEFAULT          CCI  242.\n         MVC   VOLU(12),UVOLSER   SKELETON 'VOLSER' TXT UNIT        CCI  243.\n         L     R7,PSCBUPT    POINT TO UPT FOR DEFAULT     VOL ?     CCI  244.\n         CLI   0(R7),X'00'  USER DEFAULT ??                         CCI  245.\n         BNE   PRIVATU       YES, GO USE IT FOR THIS REQUEST        CCI  246.\n         TM    PSCBATR2+1,X'0F'      IS THERE AN DEFAULT ??         CCI  247.\n         BZ    NODEF                 NO, INFORM AND QUIT            CCI  248.\n         SR    R7,R7         CLEAR WORKREG                          CCI  249.\n         IC    R7,PSCBATR2+1 GET DEFAULT TSO PACK NO.               CCI  250.\n         CVD   R7,CVTD       MAKE IT                                CCI  251.\n         UNPK  CVTD(1),CVTD+7(1)  SOMEWHAT                               252.\n         OI    CVTD,X'F0'    .....USEABLE                           CCI  253.\n         MVC   VOLU+6(6),=CL6'TSO'    SET TSO PACK DEFAULT          CCI  254.\n         MVC   VOLU+9(1),CVTD         ADD UNIQUE ID                 CCI  255.\n         B     SETU          STRING IT ON                           CCI  256.\nPRIVATU  MVC   VOLU+6(6),0(R7)        SET USERS DEFAULT ALLOC VOL   CCI  257.\n         SPACE 1                                                    CCI  258.\nSETU     EQU   *                                                    CCI  259.\n         LA    R7,VOLU       POINT TO DEFAULT VOLUME TXT UNIT       CCI  260.\n         ST    R7,VOLT       RECORD THE FACT WE NOW HAVE ONE        CCI  261.\n         BAL   R15,EXTUN     ADD TXT UNIT POINTER TO END            CCI  262.\n         B     EXITL         ALL DONE - EXIT                        CCI  263.\n*                                                                        264.\n*     THE FOLLOWING CODE IS USED TO ADD A TEXT UNIT POINTER              265.\n*     TO THE END OF THE TEXT UNIT POINTER LIST AND RESET THE             266.\n*     NEW 'END OF LIST'.                                                 267.\n*                                                                        268.\nEXTUN    L     R6,TUEND      GET END OF TEXT UNIT LIST PTR               269.\n         MVI   S99TUPL,0     CLEAR LIST END INDIC                        270.\n         LA    R6,4(R6)      ADD NEW UNIT                                271.\n         MVI   S99TUPL,X'80' SET NEW LIST END                            272.\n         ST    R6,TUEND      SAVE NEW END OF TXT U PTRS             CCI  273.\n         STCM  R7,7,S99TUPL+1   CHAIN IN NEW TEXT UNIT              CCI  274.\n         BR    R15           RETURN                                 CCI  275.\n*                                                                   CCI  276.\n*     USER DOES NOT HAVE A DEFAULT TSO ALLOCATION VOLUME.           CCI  277.\n*     INFORM HIM OF THIS AND QUIT.                                  CCI  278.\n*                                                                   CCI  279.\nNODEF    EQU   *                                                    CCI  280.\n     TPUT CCIVMSG,L'CCIVMSG                                         CCI  281.\n         LA    R15,4                                                CCI  282.\n         B     EXIT          STOP ALLOCATION                        CCI  283.\n         EJECT                                                           284.\n*                                                                        285.\n*     THIS CLOSED ROUTINE CHECKS A PCF TABLE LIST                        286.\n*     OF SYSTEM OR RESTRICTED DATASET PREFIXES AGAINST DSNAME            287.\n*          MATCH FOUND - RETURN ON REG 14+4                              288.\n*          NO MATCH - RETURN REG 14                                      289.\n*                                                                        290.\n         USING S99TUNIT,R7                                               291.\nCKPFX    ICM   R1,3,0(R15)        GET NUMBER OF ENTRIES                  292.\n         BZ    CKSYSOK            IF NONE, EXIT                          293.\n         LA    R1,41*2            GET LENGTH OF INDEX TABLE              294.\n         CLI   S99TUPAR,C'A'      CHECK DSNAME FIRST CHAR                295.\n         BL    CKBEGN             IF NATIONAL CHAR, START BEGIN          296.\n         CLI   S99TUPAR,C'Z'      IS DSNAME VALID                        297.\n         BH    CKSYSOK            NO, EXIT                               298.\n         IC    R1,S99TUPAR        GET FIRST CHARACTER                    299.\n         SH    R1,=H'193'         BACK UP TO MATCH TABLE                 300.\n         SLL   R1,1               DOUBLE FOR HALFWORD ENTRIES            301.\n         AR    R1,R15             MOVE TO INDEX ENTRY                    302.\n         LH    R1,2(R1)           GET INDEX VALUE                        303.\n         LTR   R1,R1              ANY ENTRIES FOR THIS CHAR              304.\n         BZ    CKSYSOK            NONE, EXIT                             305.\nCKBEGN   AR    R15,R1             MOVE TO FIRST ENTRY WITH CHAR          306.\n         SR    R1,R1              CLEAR REG                              307.\nCKLSP    IC    R1,2(R15)          GET LENGTH OF ENTRY                    308.\n         CH    R1,S99TULNG        COMPARE WITH DSNAME LENGTH             309.\n         BCTR  R1,0               REDUCE FOR EXECUTE                     310.\n         BH    CKINC1             IF PREFIX GREATER, SKIP                311.\n         EX    R1,DSNCMP          CHECK FOR MATCH                        312.\n         BE    CKSYSER            FOUND ONE                              313.\n         BL    CKSYSOK            PAST END OF TABLE                      314.\nCKINC    LA    R15,2(R1,R15)      INCREMENT PAST ENTRY                   315.\n         CLI   3(R15),C'/'        IS NEXT ENTRY EXCEPTION                316.\n         BNE   CKLSP              NO, LOOP TO NEXT ENTRY                 317.\n         IC    R1,2(R15)          GET LENGTH OF EXCEPTION                318.\n         BCTR  R1,0           ADJUST LENGTH                      PCF032  319.\n         B     CKINC              GO SKIP ENTRY                          320.\nCKINC1   CLC   S99TUPAR(1),3(R15) PAST POSSIBLE ENTRY                    321.\n         BNL   CKINC              NO, MOVE ON                            322.\nCKSYSOK  BR    R14                RETURN NO MATCH                        323.\nCKSYSER  BCTR  R15,0              DECR TO FORCE EQ EXCPT CMP             324.\n         CLC   PSCBUSER+7(1),3(R15)  PREFIX LONGER THAN USERID           325.\n         BL    CKEXCPT            YES, CHECK EXCEPTIONS                  326.\n         EX    R1,USDCMP          COMPARE PREFIX TO USERID               327.\n         BNE   CKEXCPT            NO, MOVE TO EXCEPTIONS                 328.\nCKNLSP   EX    R1,DSNCMPN         CHECK EXCEPTIONS                       329.\n         BE    CKSYSOK            MATCH, NOT RESTR                       330.\n         BL    CKSYSNO            PAS POSSIBLE ENTRY                     331.\nCKEXCPT  LA    R15,3(R1,R15)      INCREMENT TO NEXT ENTRY                332.\n         CLI   3(R15),C'/'        IS IT EXCEPTION                        333.\nCKSYSNO  BNE   4(R14)             NO, MATCH FOUND                        334.\n         IC    R1,2(R15)          YES, GET LENGTH                        335.\n         SH    R1,=H'2'           REDUCE FOR SLASH AND EXEC              336.\n         B     CKNLSP             LOOP                                   337.\n*                                                                        338.\n*     IF ACCESS REQUEST IS UNAUTHORIZED, ISSUE MESSAGE AND EXIT          339.\n*                                                                        340.\nAUTHMESS MVC   MSGA,AUTHMSG          MOVE MSG TO WORKAREA                341.\n         LA    R9,MSGA               SET ADDRESSIBILITY                  342.\n         USING AUTHMSG,R9                                                343.\n         LA    R1,AUTHMSG1           RELOCATE OUTPUT LINE DESC           344.\n         ST    R1,AUTHMSG                                                345.\n         LA    R1,AUTHMSGA                                               346.\n         ST    R1,AUTHMSG+8                                              347.\n         LA    R1,AUTHMSGB                                               348.\n         ST    R1,AUTHMSG1+8                                             349.\n         MVN   AUTHMSB2(1),CODE   GET AUTH DIGIT FOR MSG                 350.\n         MVC   AUTHMSB3(44),S99TUPAR GET UNAUTH DSNAME                   351.\n         LH    R1,AUTHMSGB      GET LENGTH WITHOUT DSNAME                352.\n         AH    R1,S99TULNG         ADD DSNAME LENGTH                     353.\n         STH   R1,AUTHMSGB      RESORE UPDATED LENGTH                    354.\n         LA    R1,AUTHMSGB(R1)    POINT TO END OF MSG                    355.\n         LA    R0,X'80'       SET ROUTCDE=9                              356.\n         STCM  R0,15,0(R1)    SET ROUTINE AND DESC CODES                 357.\n         L     R1,IOPLPTR       GET IOPL ADDR                            358.\n         PUTLINE PARM=PUTL,TERMPUT=EDIT,MF=(E,(1)), *************   **** 359.\n               OUTPUT=(AUTHMSG,TERM,MULTLVL,INFOR)                       360.\n         PCFERR ERREXIT,IKJPUTL,4  IF RET CODE GT 4, ERROR               361.\n         OI    AUTHMSGB+2,X'80'  SET MCS FLAGS                           362.\n         MVC   AUTHMSB1(7),PSCBUSER  GET USERID                          363.\n         WTO   MF=(E,AUTHMSGB)  LOG ATTEMPT TO SECURITY CONSOLE          364.\n         DROP  R9                                                        365.\n         XC    PUTL(8),PUTL   CLR STACK LIST                     PCF032  366.\n         L     R1,IOPLPTR     GET IOPL                           PCF032  367.\n         STACK  PARM=PUTL,DELETE=ALL,MF=(E,(1))                  PCF032  368.\n         PCFERR ERREXIT,IKJSTCK  CHECK FOR ERROR                 PCF032  369.\n         LA    R15,4           SET INSTALLATION EXIT REJECT              370.\n         B     EXIT               EXIT                                   371.\n*                                                                        372.\nERREXIT MVC    MSGA(CMDERR2+2-CMDERR),CMDERR  MOVE ERRMSG TO WORK        373.\n        LA     R9,MSGA            SET ADDRESSIBILITY                     374.\n        USING  CMDERR,R9                                                 375.\n        MVC    CMDERR1(8),0(R1)   MOVE IN ROUTINE NAME                   376.\n        UNPK   CMDERR2(3),RCODE+3(2)  ADD ZONES TO HEX RET CODE          377.\n        TR     CMDERR2(2),TRANS-240  CORRECT ZONES FOR A-F               378.\n        TPUT   (R9),CMDERR2+2-CMDERR  PUT ERR MSG                        379.\n        DROP   R9                                                        380.\n        LA     R15,4              SET BAD PARM RET CODE                  381.\n        B      EXIT               EXIT                                   382.\n        LTORG  ,                                                         383.\n*                                                                        384.\n*     CONSTANTS, MESSAGES, AND EXECUTED INSTRUCTIONS                     385.\n*                                                                        386.\nAUTHMSG  DC    A(AUTHMSG1,1,AUTHMSGA)                                    387.\nAUTHMSG1 DC    A(0,1,AUTHMSGB)                                           388.\nAUTHMSGA DC    Y(L'AUTHMSA1+4,0)                                         389.\nAUTHMSA1 DC    C'PCF002 UNAUTHORIZED FILE ACCESS ATTEMPTED+'             390.\nAUTHMSGB DC    Y(AUTHMSB3-AUTHMSGB,0)                                    391.\nAUTHMSB1 DC    C' USERID DATASET ACCESS CODE '                           392.\nAUTHMSB2 DC    C'0 DISALLOWS REQUESTED ACCESS TO '                       393.\nAUTHMSB3 EQU   *    PLUSS 44 BYTES FOR DSNAME                            394.\nCMDERR   DC    C'PCF010 COMMAND SYSTEM ERROR - PCFALOC '                 395.\nCMDERR1  DC    C'XXXXXXXX ERROR CODE '                                   396.\nCMDERR2  DC    C'XX '                                                    397.\nTRANS    DC    C'0123456789ABCDEF'                                       398.\nNULLF    DC    AL2(8),C'NULLFILE'  DUMMY TEXT UNIT                       399.\nCCIVMSG DC C'NO DEFAULT ALLOCATION VOLUME.  ISSUE ''SETVOL''.'           400.\n*                                                                   CCI  401.\nUSYSDA   DC    X'0015',X'0001',X'0008',CL8'SYSDA   '                CCI  402.\nUVOLSER  DC    X'0010',X'0001',X'0006',CL6'      '                  CCI  403.\n*                                                                   CCI  404.\nUSRIDC   CLC   PSCBUSER(*-*),S99TUPAR  COMPARE DSNAME TO USERID          405.\nDSECMP   CLC   S99TUPAR(*-*),0(R15)    COMPARE DSNAMES                   406.\nDSACMP   CLC   S99TUPAR(*-*),60(R15)   COMPARE WITH ALIAS                407.\nDSNCMP   CLC   S99TUPAR(*-*),3(R15)    CHK DSN AGAINST LIST ENT          408.\nUSDCMP   CLC   PSCBUSER(*-*),4(R15)    USERID TO PREFIX                  409.\nDSNCMPN  CLC   S99TUPAR(*-*),4(R15)    EXCEPTIONS TO DSNAME              410.\n         EJECT                                                           411.\n*================================================================        412.\n*                                                                        413.\n*     DSECTS FOR WORKAREAS AND PARAMETER LISTS                           414.\n*                                                                        415.\n*================================================================        416.\n         SPACE 1                                                         417.\nWORKAREA DSECT                                                           418.\n         DS    5F                 TXT UNIT PTR EXPANSION            CCI  419.\n         DS    18F                REGISTER SAVE AREA                     420.\nTOUNIT   DS    F                  ADDRESS OF 'UNIT' TXT UNIT        CCI  421.\nUTEXT    DS    CL14               'UNIT' TXT UNIT                   CCI  422.\nTUEND    DS    F                  ADDR OF LAST TEXT UNIT                 423.\nDSNA     DS    F                  ADDR OF DSNAME TEXT UNIT               424.\nVOLT     DS    F                  ADDR OF VOL TEXT UNIT ADDR             425.\nSTAT     DS    X                  ALLOC STATUS REQUEST                   426.\nNRMT     DS    X                  REQUESTED DISPOSITION                  427.\nCNDT     DS    X                  REQUESTED CONDITIONAL DISPOS           428.\nCODE     DS    X                  USER DATASET AUTHOR CODE               429.\nVOLU     DS    3F                 PCF AUTH VOL TEXT UNIT                 430.\nCVTD     DS    D                  CONVERT TO DECIMAL WORKAREA            431.\nPUTL     DS    3F                 PARAMETER LIST FOR PUTLINE             432.\nPCFIND   DS    X                  X'00'=YESPCF / X'FF'=NOPCF        CCI  433.\nMSGA     DS    CL(AUTHMSB3+44-AUTHMSG)  MSG WORK AREA                    434.\nENDWORK  EQU   *                                                         435.\n         PCFCVT                                                          436.\n         IKJCPPL                                                         437.\n         IKJECT\n         IKJTMPWA                                                   */\n*        PCFTMPWA                                                        438.\n         IKJPSCB                                                         439.\n         IEFZB4D0                                                        440.\n         IEFZB4D2                                                        441.\n         IHADSAB                                                         442.\n         END                                                             443.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EX99$": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BEX99 JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=W\n//ASMFCL PROC  CLASS=T,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='C7BRIAN.PDS.DATA',\n//             LOAD='C7BRIAN.VTOC.LOAD',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='SYSPARM(3),LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=20000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=F7DREW.PCF.CNTL,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT,REFR'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=C7BRIAN.VTOC.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=EX99\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FINDASCB": {"ttr": 3591, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00U\\x00U\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "SYZYGYB"}, "text": "FIND     TITLE 'FIND AN ASCB BY ADDRESS SPACE NAME'         *BHW 10/80*\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                              FINDASCB                               *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: FIND AN ASCB BY ADDRESS SPACE NAME.                       *\n*                                                                     *\n*                                                                     *\n* FUNCTION: FINDASCB INDEXES THROUGH THE ADDRESS SPACE VECTOR TABLE   *\n*           (ASVT) LOOKING FOR AN ASCB WHOSE INITIATED JOB NAME       *\n*           (ASCBJBNI) OR STARTED JOB NAME (ASCBJBNS) EQUALS THE      *\n*           INPUT ADDRESS SPACE NAME.                                 *\n*                                                                     *\n*                                                                     *\n* INPUT: R1 -> A(CL8'ADDRESS SPACE NAME')                             *\n*              A(F'TO RECEIVE THE ADDRESS OF THE ASCB IF FOUND')      *\n*                                                                     *\n*                                                                     *\n* OUTPUT: 2ND INPUT PARM -> REQUESTED ASCB                            *\n*                                                                     *\n*                                                                     *\n* RETURN CODES: R15 = 0 => ASCB FOUND.                                *\n*                     4 => ASCB NOT FOUND.                            *\n*                                                                     *\n*                                                                     *\n* DATA AREAS REFERENCED: CVT                                          *\n*                        ASVT                                         *\n*                        ASCB                                         *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              RETURN                                                 *\n*              REGS (USER)                                            *\n*              CVT                                                    *\n*              IHAASVT                                                *\n*              IHAASCB                                                *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTE: RENT                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nFINDASCB CSECT                FIND AN ASCB BY NAME\n         SAVE  (1,7),,FINDASCB_&SYSDATE_&SYSTIME SAVE CALLER'S REGS\n         USING FINDASCB,R15   CSECT ADDRESSABILITY\n         LM    RJOBNM,RETAD,0(R1) A(INPUT JOB NAME),A(RETURN ADDR)\n         L     R1,16          A(CVT)\n         USING CVT,R1         ADDRESSABILITY\n         L     R1,CVTASVT     A(ASVT)\n         USING ASVT,R1        ADDRESSABILITY\n         L     RMAXU,ASVTMAXU MAXIMUM NUMBER OF ASCB'S\n         LA    RENTRY,ASVTENTY A(A(1ST ASCB))\nGETASCB  L     R1,0(RENTRY) A(ASCB OR < 0 => NO ASCB)\n         LTR   R1,R1          ASCB SLOT IN USE?\n         BM    NEXTASCB       NO => GET ANOTHER ASCB\n         USING ASCB,R1        ADDRESSABILITY\n         LM    RJOBI,RJOBS,ASCBJBNI A(INIT JOB NAME),A(START JOB NAME)\n         CLC   0(8,RJOBI),0(RJOBNM) FOUND THE ASCB?\n         BE    GOTASCB        YES => GIVE IT TO OUR CALLER\n         CLC   0(8,RJOBS),0(RJOBNM) FOUND THE ASCB?\n         BE    GOTASCB        YES => RETURN IT TO OUR CALLER\nNEXTASCB LA    RENTRY,4(RENTRY) A(A(NEXT ASCB))\n         BCT   RMAXU,GETASCB  CHECKED ALL ASCB'S?\n         XC    0(4,RETAD),0(RETAD) YES => TELL THE CALLER\n         RETURN (1,7),RC=4    WE COULDN'T FIND AN ASCB\nGOTASCB  ST    R1,0(RETAD)    RETURN THE CALLER THE\n         RETURN (1,7),RC=0    ADDRESS OF THE ASCB\n         EJECT\n         REGS  ,\nRJOBNM   EQU   R2             A(INPUT JOB NAME)\nRETAD    EQU   R3             A(WORD TO RECEIVE A(ASCB))\nRMAXU    EQU   R4             MAXIMUM NUMBER OF ASCB'S\nRENTRY   EQU   R5             A(A(ASCB))\nRJOBI    EQU   R6             A(INITIATED JOB NAME)\nRJOBS    EQU   R7             A(STARTED JOB NAME)\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         EJECT                                              *BHW 12/79*\n         IHAASVT\n         EJECT                                              *BHW 12/79*\n         IHAASCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETINFO": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x06\\xe6\\x06\\xe6\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 1766, "newlines": 1766, "modlines": 0, "user": "SYZYGYB"}, "text": "GETINFO  TITLE 'GET TSO USER STUFF FROM JCT INTO CLIST VARIABLES-V1M4'  00003**6\n         PRINT OFF    MACROS BE HERE                                    00004**6\n         MACRO\n&NAME   $FINDCB  &ACOEF=,&ACTIM=,&ASCB=,&ASID=,&ASVT=,&ASXB=,          C\n               &CVT=,&FIX=,&JCT=,&JSCB=,&LCT=,&OSACT=,&OSJCT=,&OSSCT=, C\n               &RB=,&SJB=,&SSIB=,&TCB=,&TCBINT=,&TCBRCT=,&TCBSTC=,     C\n               &TCT=,&TCTI=,&TIOT=,&TQE=,&TUCCVT=,&DOC=NO\n.*       REFER TO THE DESCRIPTION AFTER THE MEND STATEMENT FOR THE\n.*       MEANING OF THE DIFFERENT OPERANDS.\n.*       THIS MACRO MAY BE USED TO OBTAIN THE ADDRESS OF ANY OR ALL OF\n.*       THE CONTROL BLOCKS DEFINED IN THE CALLING PROTOTYPE STATMENT.\n.*       BY GIVING A REGISTER (EITHER ABSOLUTE OR SYMBOLIC) FOR ANY OF\n.*       THE SPECIFIED KEYWORD PARAMETERS, THE MACRO INSTRUCTION WILL\n.*       WILL RETURN THE REQUESTED CONTROL BLOCK IN THAT REGISTER. NO\n.*       REGISTERS OTHER THAN THOSE SPECIFIED ARE DESTROYED.\n.*       THE FETCH CHAIN CAN BE STARTED AT A GIVEN BLOCK IN THE CHAIN\n.*       BY SPECIFYING THE REGISTER POINTING TO THE CONTROL BLOCK\n.*       ENCLOSED IN BRACKETS \u00dd\u00a8.\n.*\n.*       IE. A TIOT REQUEST EXPANDS TO THE FOLLOWING\n.*       $FINDCB  TIOT=X1         CALL\n.*       L     X1,X'21C'          LOAD CURRENT TCB\n.*       L     X1,X'0C'(,X1)      LOAD TIOT\n.*       $FINDCB  TCB=\u00ddX3\u00a8,TIOT=X1     CALL\n.*       L     X1,X'0C'(,X3)      LOAD TIOT\n.*\n.*         THIS MACRO WAS CREATED 20 FEBRUARY, 1979\n.*         THE LAST UPDATE FOR THIS MACRO WAS 07 JUNE, 1979\n.*         A PROGRAM DESCRIPTION IS AVAILABLE AFTER THE MEND STATEMENT\n.*\n         GBLB  &FINDDN       GLOBAL TO SET EQUATES\n         LCLC  &R1,&R2,&R3,&R4,&R5,&R6,&R7,&R8,&R9 REGISTER SYMBOLS FOR\n         LCLC  &R10,&R11,&R12,&R13,&R14,&R15,&R16  CHAIN 1\n         LCLC  &R17,&R18,&R19,&R20,&R21,&R22,&R23\n         LCLC  &R24,&R25,&R26,&R27,&R28\n         LCLC  &S1,&S2,&S3,&S4,&S5,&S6,&S7,&S8,&S9 REGISTER\n         LCLC  &S10,&S11,&S12,&S13,&S14,&S15,&S16  SYMBOLS\n         LCLC  &S17,&S18,&S19,&S20,&S21            FOR CHAIN 2\n         LCLC  &T1,&T2,&T3,&T4,&T5,&T6,&T7,&T8     REGISTER SYMBOLS FOR\n.*                                                 CHAIN 3\n.*\n.*       INCLUDE OFFSET EQUATES FIRST TIME ONLY\n         AIF   (&FINDDN).EQUDONE  SKIP IT EQUATES ARE DONE\n&FINDDN  SETB  1             INDICATE THAT IT IS DONE\n$$FASID  EQU   X'24'         'ASCBASID' - ADDRESS OF ASID\n$$FASXB  EQU   X'6C'         'ASCBASXB' - ADDRESS OF ASXB\n$$FFTCB  EQU   X'04'         'ASXBFTCB' - ADDRESS OF FIRST TCB\n$$FASVT  EQU   X'22C'        'CVTASVT'  - ADDRESS OF ASVT\n$$FVSCVT EQU   X'CC'         'CVTUSER'  - ADDRESS OF TUC VS CVT\n$$VPSIB  EQU   X'324'        'CVTVPSIB' - ADDRESS OF PAGE SERVICES\n$$FCVT   EQU   X'10'         'FLCCVT'   - ADDRESS OF CVT\n$$FOSACT EQU   X'27'         'JCTACTAD' - ADDRESS OF OS ACT (3 BYTE)\n$$FJSCA  EQU   X'15C'        'JSCBACT'  - ADDRESS OF ACTIVE JSCB\n$$FQMPI  EQU   X'F4'         'JSCBQMPI' - ADDRESS OF QUE MAN IN LCT\n$$FSSIB  EQU   X'13C'        'JSCBSSIB' - ADDRESS OF SSIB\n$$FOSJCT EQU   X'10'         'LCTJCTAD' - ADDRESS OF OS JCT\n$$FOSSCT EQU   X'14'         'LCTSCTAD' - ADDRESS OF OS SCT\n$$FASCBO EQU   X'224'        'PSAAOLD'  - ADDRESS OF CURRENT ASCB\n$$FTCBO  EQU   X'21C'        'PSATOLD'  - ADDRESS OF CURRENT TCB\n$$FLCTQ  EQU   X'F8'         'QMGR1'    - OFFSET OF QUE MAMAGER AREA\n$$FJCT   EQU   X'60'         'SJBJCT'   - ADDRESS OF JES2 JCT\n$$FSJB   EQU   X'20'         'SSIBSUSE' - ADDRESS OF JES SJB (SUBSYS)\n$$FLCTR4 EQU   X'40'         'TCBGRS4'  - REGISTER 4 POINTS TO LCT\n$$FJSCB  EQU   X'B4'         'TCBJSCB'  - ADDRESS OF CURRENT JSCB\n$$FLTC   EQU   X'88'         'TCBLTC'   - ADDRESS OF LAST TCB\n$$FRB    EQU   X'00'         'TCBRBP'   - ADDRESS OF LAST RB\n$$FTCT   EQU   X'A4'         'TCBTCT'   - ADDRESS OF MAIN TCT\n$$FTIOT  EQU   X'0C'         'TCBTIO'   - ADDRESS OF TIOT\n$$FTQE   EQU   X'78'         'TCBTME'   - ADDRESS OF TASK TQE\n$$FTCTI  EQU   X'0C'         'TCTIOTBL' - ADDRESS OF IO PART OF TCT\n$$FACOEF EQU   X'40'         'TUCACOEF' - ADDRESS OF ACCOUNT TABLE\n$$FACTIM EQU   X'3C'         'TUCACTIM' - ADDRESS OF CONVERSION\n.EQUDONE ANOP  ,             CONTINUE\n.*       ALL EQUATES ARE ESTABLISHED\n.*\n.*       PROCESS CHAIN 1, BACK TO FRONT\n         AIF   (T'&TCBRCT EQ 'O' AND T'&TCBSTC EQ 'O' AND T'&TCBINT EQ '\n               'O').NOTCBFT  JUMP IF NOT PART OF TCB CHAIN\n         AIF   (T'&OSACT EQ 'O').RROSACT USE OSACT\n         AIF   ('&OSACT'(1,1) EQ '\u00dd').RROSACT IGNORE OSACT\n&R1      SETC  '&OSACT'      SET FOR OS ACT\n.RROSACT AIF   (T'&OSJCT NE 'O').ROSJCT USE OS JCT\n&R2      SETC  '&R1'         CARRY DOWN\n         AGO   .NROSJCT      GO DO REST\n.ROSJCT  AIF   ('&OSJCT'(1,1) NE '\u00dd').UROSJCT START WITH\n&R2      SETC  '&OSJCT'(2,K'&OSJCT-2)  MOVE REGISTER\n         AGO   .RROSJCT      JUMP TO NEXT CHECK\n.UROSJCT ANOP  ,\n&R2      SETC  '&OSJCT'      SET TO PUT VALUE HERE\n.NROSJCT ANOP  ,\n&R3      SETC  '&R2'         CARRY DOWN\n.RROSJCT AIF   (T'&OSSCT EQ 'O').RROSSCT\n         AIF   ('&OSSCT' EQ '\u00dd').RROSSCT IGNORE\n&R5      SETC  '&OSSCT'      SET REG FOR OS SCT\n.RROSSCT AIF   (T'&LCT NE 'O').RLCT\n         AIF   ('&R3' EQ '').RRS3 USE OS SCT INSTEAD\n&R4      SETC  '&R3'         REGISTER FROM SCT CHAIN\n         AGO   .NRLCT        TO NEXT CHECK\n.RRS3    ANOP  ,\n&R4      SETC  '&R5'         REGISTER FROM JCT CHAIN\n         AGO   .NRLCT        TO NEXT CHECK\n.RLCT    AIF   ('&LCT'(1,1) NE '\u00dd').URLCT USE LCT\n&R4      SETC  '&LCT'(2,K'&LCT-2)      MOVE IN SYMBOL\n         AGO   .RRLCT        GO TO NEXT CHECK\n.URLCT   ANOP  ,\n&R4      SETC  '&LCT'        SET FOR STORAGE SYMBOL\n.NRLCT   ANOP  ,\n&R6      SETC  '&R4'         CARRY SYMBOL DOWN\n.RRLCT   AIF   (T'&JCT EQ 'O').RRJCT\n         AIF   ('&JCT'(1,1) EQ '\u00dd').RRJCT IGNORE START\n&R8      SETC  '&JCT'        SET LOAD SYMBOL\n.RRJCT   AIF   (T'&SJB NE 'O').RSJB\n&R9      SETC  '&R8'         CARRY REGISTER DOWN\n         AGO   .NRSJB        GO TO NEXT CHECK\n.RSJB    AIF   ('&SJB'(1,1) NE '\u00dd').URSJB  USE SJB\n&R9      SETC  '&SJB'(2,K'&SJB-2)      MOVE REGISTER\n         AGO   .RRSJB        GO TO NEXT CHECK\n.URSJB   ANOP  ,\n&R9      SETC  '&SJB'        PUT OUT REGISTER\n.NRSJB   ANOP  ,\n&R10     SETC  '&R9'         CARRY DOWN\n.RRSJB   AIF   (T'&SSIB NE 'O').RSSIB\n&R11     SETC  '&R10'        CARRY REGISTER DOWN\n         AGO   .NRSSIB       GO TO NEXT CHECK\n.RSSIB   AIF   ('&SSIB'(1,1) NE '\u00dd').URSSIB USE SSIB\n&R11     SETC  '&SSIB'(2,K'&SSIB-2)    MOVE REGISTER\n         AGO   .RRSSIB       GO TO NEXT CHECK\n.URSSIB  ANOP  ,\n&R11     SETC  '&SSIB'       PUT OUT REGISTER\n.NRSSIB  ANOP  ,\n&R12     SETC  '&R11'        CARRY DOWN\n.RRSSIB  AIF   (T'&JSCB NE 'O').RJSCB\n&R13     SETC  '&R12'        CARRY REGISTER DOWN\n         AGO   .NRJSCB       TO NEXT CHECK\n.RJSCB   AIF   ('&JSCB'(1,1) NE '\u00dd').URJSCB USE JSCB\n&R13     SETC  '&JSCB'(2,K'&JSCB-2)    MOVE IN SYMBOL\n         AGO   .RRJSCB       GO TO NEXT CHECK\n.URJSCB  ANOP  ,\n&R13     SETC  '&JSCB'       SET FOR STORAGE SYMBOL\n.NRJSCB  ANOP  ,\n&R14     SETC  '&R13'        CARRY DOWN\n.RRJSCB  AIF   (T'&TCTI EQ 'O').RRTCTI\n         AIF   ('&TCTI'(1,1) EQ '\u00dd').RRTCTI IGNORE START\n&R15     SETC  '&TCTI'       SET LOAD SYMBOL\n.RRTCTI  AIF   (T'&TCT NE 'O').RTCT\n&R16     SETC  '&R15'        CARRY REGISTER DOWN\n         AGO   .NRTCT        GO TO NEXT CHECK\n.RTCT    AIF   ('&TCT'(1,1) NE '\u00dd').URTCT  USE TCT\n&R16     SETC  '&TCT'(2,K'&TCT-2)      MOVE REGISTER\n         AGO   .RRTCT        GO TO NEXT CHECK\n.URTCT   ANOP  ,\n&R16     SETC  '&TCT'        PUT OUT REGISTER\n.NRTCT   ANOP  ,\n&R17     SETC  '&R16'        CARRY DOWN\n.RRTCT   AIF   (T'&TIOT EQ 'O').RRTIOT\n         AIF   ('&TIOT'(1,1) EQ '\u00dd').RRTIOT IGNORE START\n&R18     SETC  '&TIOT'       SET LOAD SYMBOL\n.RRTIOT  AIF   (T'&TCBINT NE 'O').TCBI\n         AIF   ('&R6' EQ '').RRS6 JUMP IF NO R6\n&R7      SETC  '&R6'         SET SAME AS LAST\n         AGO   .NRTIOT       GO TO END\n.RRS6    AIF   ('&R14' EQ '').RRS14 JUMP IF NO R14\n&R7      SETC  '&R14'        SET SAME AS LAST\n         AGO   .NRTIOT       GO TO END\n.RRS14   AIF   ('&R17' EQ '').RRS17    NEXT LONGEST\n&R7      SETC  '&R17'        SET NEXT LONGEST\n         AGO   .NRTIOT       TO END OF CHAIN\n.RRS17   ANOP  ,             LAST ENTRY IN NODE\n&R7      SETC  '&R18'        SET SAME AS LAST\n         AGO   .NRTIOT       GO TO END\n.TCBI    AIF   ('&TCBINT'(1,1) NE '\u00dd').USTCBI USE TCB\n&R7      SETC  '&TCBINT'(2,K'&TCBINT-2) MOVE IN SYMBOL\n         AGO   .NOTCBI       QUIT\n.USTCBI  ANOP  ,\n&R7      SETC  '&TCBINT'     SET FOR TCB SYMBOL\n.NRTIOT  ANOP  ,             ENTRANCE FOR NULL\n&R19     SETC  '&R7'         CARRY SYMBOL DOWN\n.NOTCBI  AIF   (T'&TCBSTC NE 'O').TCBSTC\n&R20     SETC  '&R19'        CARRY REGISTER DOWN\n         AGO   .NLTBSTC      GO TO NEXT CHECK\n.TCBSTC  AIF   ('&TCBSTC'(1,1) NE '\u00dd').USTBSTC USE TCBSTC\n&R20     SETC  '&TCBSTC'(2,K'&TCBSTC-2)  MOVE REGISTER\n         AGO   .NOTBSTC      GO TO NEXT CHECK\n.USTBSTC ANOP  ,\n&R20     SETC  '&TCBSTC'     PUT OUT REGISTER\n.NLTBSTC ANOP  ,\n&R21     SETC  '&R20'        CARRY DOWN\n.NOTBSTC AIF   (T'&TCBRCT NE 'O').TCBRCT\n&R22     SETC  '&R21'        CARRY REGISTER DOWN\n         AGO   .NLTBRCT      GO TO NEXT CHECK\n.TCBRCT  AIF   ('&TCBRCT'(1,1) NE '\u00dd').USTBRCT USE TCBRCT\n&R22     SETC  '&TCBRCT'(2,K'&TCBRCT-2)  MOVE REGISTER\n         AGO   .NOTBRCT      GO TO NEXT CHECK\n.USTBRCT ANOP  ,\n&R22     SETC  '&TCBRCT'     PUT OUT REGISTER\n.NLTBRCT ANOP  ,\n&R23     SETC  '&R22'        CARRY DOWN\n.NOTCBFT ANOP  ,             ENTRY FOR NOT TCB CHAIN\n.NOTBRCT AIF   (T'&ASXB NE 'O').ASXB\n&R24     SETC  '&R23'        CARRY REGISTER DOWN\n         AGO   .NLASXB       GO TO NEXT CHECK\n.ASXB    AIF   ('&ASXB'(1,1) NE '\u00dd').USASXB USE ASXB\n&R24     SETC  '&ASXB'(2,K'&ASXB-2)    MOVE REGISTER\n         AGO   .NOASXB       GO TO NEXT CHECK\n.USASXB  ANOP  ,\n&R24     SETC  '&ASXB'       PUT OUT REGISTER\n.NLASXB  ANOP  ,\n&R25     SETC  '&R24'        CARRY DOWN\n.NOASXB  AIF   (T'&ASID EQ 'O').NOASID\n         AIF   ('&ASID'(1,1) EQ '\u00dd').NOASID IGNORE START\n&R27     SETC  '&ASID'       SET STORE REGISTER\n.NOASID  AIF   (T'&ASCB NE 'O').ASCB\n         AIF   ('&R25' EQ '').NOR25    USE ASID INSTEAD\n&R26     SETC  '&R25'        CARRY DOWN\n         AGO   .NLASCB       TO NEXT CHECK\n.NOR25   ANOP  ,\n&R26     SETC  '&R27'        CARRY LONGER CHAIN DOWN\n         AGO   .NLASCB       TO NEXT CHECK\n.ASCB    AIF   ('&ASCB'(1,1) NE '\u00dd').USASCB USE ASCB\n&R26     SETC  '&ASCB'(2,K'&ASCB-2)    MOVE IN SYMBOL\n         AGO   .NOASCB       GO TO NEXT CHECK\n.USASCB  ANOP  ,\n&R26     SETC  '&ASCB'       SET FOR STORAGE SYMBOL\n.NLASCB  ANOP  ,\n&R28     SETC  '&R26'        CARRY SYMBOL DOWN\n.NOASCB  ANOP  ,\n.*       ALL REGISTERS FOR CHAIN 1 ESTABLISHED\n.*\n.*       PROCESS CHAIN 2, BACK TO FRONT\n         AIF   (T'&TCBRCT NE 'O' OR T'&TCBSTC NE 'O' OR T'&TCBINT NE 'O'\n               ').TCBFET     JUMP IF TCB CHAIN DONE FOR LCT\n         AIF   (T'&OSACT EQ 'O').NOOSACT USE OSACT\n         AIF   ('&OSACT'(1,1) EQ '\u00dd').NOOSACT IGNORE OSACT\n&S1      SETC  '&OSACT'      SET FOR OS ACT\n.NOOSACT AIF   (T'&OSJCT NE 'O').OSJCT USE OS JCT\n&S2      SETC  '&S1'         CARRY DOWN\n         AGO   .NLOSJCT      GO DO REST\n.OSJCT   AIF   ('&OSJCT'(1,1) NE '\u00dd').USOSJCT START WITH\n&S2      SETC  '&OSJCT'(2,K'&OSJCT-2)  MOVE REGISTER\n         AGO   .NOOSJCT      JUMP TO NEXT CHECK\n.USOSJCT ANOP  ,\n&S2      SETC  '&OSJCT'      SET TO PUT VALUE HERE\n.NLOSJCT ANOP  ,\n&S3      SETC  '&S2'         CARRY DOWN\n.NOOSJCT AIF   (T'&OSSCT EQ 'O').NOOSSCT\n         AIF   ('&OSSCT' EQ '\u00dd').NOOSSCT IGNORE\n&S5      SETC  '&OSSCT'      SET REG FOR OS SCT\n.NOOSSCT AIF   (T'&LCT NE 'O').LCT\n         AIF   ('&S3' EQ '').NOS3 USE OS SCT INSTEAD\n&S4      SETC  '&S3'         REGISTER FROM SCT CHAIN\n         AGO   .NLLCT        TO NEXT CHECK\n.NOS3    ANOP  ,\n&S4      SETC  '&S5'         REGISTER FROM JCT CHAIN\n         AGO   .NLLCT        TO NEXT CHECK\n.LCT     AIF   ('&LCT'(1,1) NE '\u00dd').USLCT USE LCT\n&S4      SETC  '&LCT'(2,K'&LCT-2)      MOVE IN SYMBOL\n         AGO   .NOLCT        GO TO NEXT CHECK\n.USLCT   ANOP  ,\n&S4      SETC  '&LCT'        SET FOR STORAGE SYMBOL\n.NLLCT   ANOP  ,\n&S6      SETC  '&S4'         CARRY SYMBOL DOWN\n.NOLCT   AIF   (T'&JCT EQ 'O').NOJCT\n         AIF   ('&JCT'(1,1) EQ '\u00dd').NOJCT IGNORE START\n&S8      SETC  '&JCT'        SET LOAD SYMBOL\n.****************************** PATTERN FOR STRAIGHT THROUGH CARRY .**\n.NOJCT   AIF   (T'&SJB NE 'O').SJB                                 .**\n&S9      SETC  '&S8'         CARRY REGISTER DOWN                   .**\n         AGO   .NLSJB        GO TO NEXT CHECK                      .**\n.SJB     AIF   ('&SJB'(1,1) NE '\u00dd').USSJB  USE SJB                 .**\n&S9      SETC  '&SJB'(2,K'&SJB-2)      MOVE REGISTER               .**\n         AGO   .NOSJB        GO TO NEXT CHECK                      .**\n.USSJB   ANOP  ,                                                   .**\n&S9      SETC  '&SJB'        PUT OUT REGISTER                      .**\n.NLSJB   ANOP  ,                                                   .**\n&S10     SETC  '&S9'         CARRY DOWN                            .**\n.****************************** PATTERN FOR STRAIGHT THROUGH CARRY .**\n.NOSJB   AIF   (T'&SSIB NE 'O').SSIB\n&S11     SETC  '&S10'        CARRY REGISTER DOWN\n         AGO   .NLSSIB       GO TO NEXT CHECK\n.SSIB    AIF   ('&SSIB'(1,1) NE '\u00dd').USSSIB USE SSIB\n&S11     SETC  '&SSIB'(2,K'&SSIB-2)    MOVE REGISTER\n         AGO   .NOSSIB       GO TO NEXT CHECK\n.USSSIB  ANOP  ,\n&S11     SETC  '&SSIB'       PUT OUT REGISTER\n.NLSSIB  ANOP  ,\n&S12     SETC  '&S11'        CARRY DOWN\n.NOSSIB  AIF   (T'&JSCB NE 'O').JSCB\n         AIF   ('&S6' EQ '').NOS6 USE ASID INSTEAD\n&S7      SETC  '&S6'         CARRY DOWN\n         AGO   .NLJSCB       TO NEXT CHECK\n.NOS6    ANOP  ,\n&S7      SETC  '&S12'        CARRY LONGER CHAIN DOWN\n         AGO   .NLJSCB       TO NEXT CHECK\n.JSCB    AIF   ('&JSCB'(1,1) NE '\u00dd').USJSCB USE JSCB\n&S7      SETC  '&JSCB'(2,K'&JSCB-2)    MOVE IN SYMBOL\n         AGO   .NOJSCB       GO TO NEXT CHECK\n.USJSCB  ANOP  ,\n&S7       SETC  '&JSCB'       SET FOR STORAGE SYMBOL\n.NLJSCB  ANOP  ,\n&S13     SETC  '&S7'         CARRY SYMBOL DOWN\n.NOJSCB  AIF   (T'&TCTI EQ 'O').NOTCTI\n         AIF   ('&TCTI'(1,1) EQ '\u00dd').NOTCTI IGNORE START\n&S15     SETC  '&TCTI'       SET LOAD SYMBOL\n.NOTCTI  AIF   (T'&TCT NE 'O').TCT\n&S16     SETC  '&S15'        CARRY REGISTER DOWN\n         AGO   .NLTCT        GO TO NEXT CHECK\n.TCT     AIF   ('&TCT'(1,1) NE '\u00dd').USTCT  USE TCT\n&S16     SETC  '&TCT'(2,K'&TCT-2)      MOVE REGISTER\n         AGO   .NOTCT        GO TO NEXT CHECK\n.USTCT   ANOP  ,\n&S16     SETC  '&TCT'        PUT OUT REGISTER\n.NLTCT   ANOP  ,\n&S17     SETC  '&S16'        CARRY DOWN\n.NOTCT   AIF   (T'&TIOT EQ 'O').NOTIOT\n         AIF   ('&TIOT'(1,1) EQ '\u00dd').NOTIOT IGNORE START\n&S18     SETC  '&TIOT'       SET LOAD SYMBOL\n.TCBFET  ANOP  ,             ENTRY FOR TCB CHAIN DONE IN OTHER\n.NOTIOT  AIF   (T'&TQE EQ 'O').NOTQE\n         AIF   ('&TQE'(1,1) EQ '\u00dd').NOTQE IGNORE START\n&S19     SETC  '&TQE'        SET LOAD SYMBOL\n.NOTQE   AIF   (T'&RB EQ 'O').NORB\n         AIF   ('&RB'(1,1) EQ '\u00dd').NORB IGNORE START\n&S20     SETC  '&RB'         SET LOAD SYMBOL\n.NORB    AIF   (T'&TCB NE 'O').TCB     REGISTER\n         AIF   ('&S13' EQ '').NOS13    FIND LONGER CHAIN\n&S14     SETC  '&S13'        SET LONGEST\n         AGO   .NLTCB        TO END OF CHAIN\n.NOS13   AIF   ('&S17' EQ '').NOS17    NEXT LONGEST\n&S14     SETC  '&S17'        SET NEXT LONGEST\n         AGO   .NLTCB        TO END OF CHAIN\n.NOS17   AIF   ('&S18' EQ '').NOS18\n&S14     SETC  '&S18'        SET TO CHAIN\n         AGO   .NLTCB        TO END OF CHAIN\n.NOS18   AIF   ('&S19' EQ '').NOS19\n&S14     SETC  '&S19'        SET TO CHAIN\n         AGO   .NLTCB        TO END OF CHAIN\n.NOS19   ANOP  ,\n&S14     SETC  '&S20'        SET FOR LAST CHAIN\n         AGO   .NLTCB        TO END OF CHAIN\n.TCB     AIF   ('&TCB'(1,1) NE '\u00dd').USTCB USE TCB\n&S14     SETC  '&TCB'(2,K'&TCB-2) MOVE IN SYMBOL\n         AGO   .NOTCB        QUIT\n.USTCB   ANOP  ,\n&S14     SETC  '&TCB'        SET FOR TCB SYMBOL\n.NLTCB   ANOP  ,\n&S21     SETC  '&S14'        SET TO BOTH\n.NOTCB   ANOP  ,             END OF CHECK\n.*       END OF CHAIN 2 PROCESSING\n.*\n.*       PROCESS CHAIN 3\n         AIF   (T'&ACOEF EQ 'O').NOACOEF\n         AIF   ('&ACOEF'(1,1) EQ '\u00dd').NOACOEF IGNORE START\n&T1      SETC  '&ACOEF'      SET LOAD SYMBOL\n.NOACOEF AIF   (T'&ACTIM EQ 'O').NOACTIM\n         AIF   ('&ACTIM'(1,1) EQ '\u00dd').NOACTIM IGNORE START\n&T3      SETC  '&ACTIM'      SET LOAD SYMBOL\n.NOACTIM AIF   (T'&TUCCVT NE 'O').TUCCVT\n         AIF   ('&T1' EQ '').NOT1 USE ASID INSTEAD\n&T2      SETC  '&T1'         CARRY DOWN\n         AGO   .NLTUCVT      TO NEXT CHECK\n.NOT1    ANOP  ,\n&T2      SETC  '&T3'         CARRY LONGER CHAIN DOWN\n         AGO   .NLTUCVT      TO NEXT CHECK\n.TUCCVT  AIF   ('&TUCCVT'(1,1) NE '\u00dd').USTUCVT USE TUCCVT\n&T2      SETC  '&TUCCVT'(2,K'&TUCCVT-2) MOVE IN SYMBOL\n         AGO   .NOTUCVT      GO TO NEXT CHECK\n.USTUCVT ANOP  ,\n&T2      SETC  '&TUCCVT'     SET FOR STORAGE SYMBOL\n.NLTUCVT ANOP  ,\n&T4      SETC  '&T2'         CARRY SYMBOL DOWN\n.NOTUCVT AIF   (T'&ASVT EQ 'O').NOASVT\n         AIF   ('&ASVT'(1,1) EQ '\u00dd').NOASVT  IGNORE START\n&T6      SETC  '&ASVT'       SET LOAD SYMBOL\n.NOASVT  AIF   (T'&FIX EQ 'O').NOFIX\n         AIF   ('&FIX'(1,1) EQ '\u00dd').NOFIX  IGNORE START\n&T7      SETC  '&FIX'        SET LOAD SYMBOL\n.********************************* PATTERN FOR A NODE .**.**.**.**.**\n.NOFIX   AIF   (T'&CVT NE 'O').CVT                                .**\n         AIF   ('&T4' EQ '').NOT4 FIND LONGEST                    .**\n&T5      SETC  '&T4'         CARRY REGISTER DOWN                  .**\n         AGO   .NLCVT        GO TO NEXT CHECK                     .**\n.NOT4    AIF   ('&T6' EQ '').NOT6 FIND LONGEST                    .**\n&T5      SETC  '&T6'         CARRY REGISTER DOWN                  .**\n         AGO   .NLCVT        GO TO NEXT CHECK                     .**\n.NOT6    ANOP  ,             SET LAST POSSIBLE                    .**\n&T5      SETC  '&T7'         SET CHAIN ALONG                      .**\n         AGO   .NLCVT        GO TO END                            .**\n.CVT     AIF   ('&CVT'(1,1) NE '\u00dd').USCVT USE CVT                 .**\n&T5      SETC  '&CVT'(2,K'&CVT-2)      MOVE REGISTER              .**\n         AGO   .NOCVT        GO TO NEXT CHECK                     .**\n.USCVT   ANOP  ,                                                  .**\n&T5      SETC  '&CVT'        PUT OUT REGISTER                     .**\n.NLCVT   ANOP  ,                                                  .**\n&T8      SETC  '&T5'         CARRY DOWN                           .**\n.********************************* PATTERN FOR A NODE .**.**.**.**.**\n.NOCVT   ANOP  ,             END OF CHAIN 3\n.*       CHAIN 3 PROCESSING FINISHED\n.*\n&NAME    DS    0H\n.*       DO LOAD STATEMENTS FOR CHAIN 1\n         AIF   ('&R28' EQ '').SKPR28   SKIP THIS LOAD\n         L     &R28,$$FASCBO      --> ASCB\n.SKPR28  AIF   ('&R27' EQ '').SKPR27   SKIP THIS LOAD\n         LH    &R27,$$FASID(,&R26) IS THE ASID\n.SKPR27  AIF   ('&R25' EQ '').SKPR25   SKIP THIS LOAD\n         L     &R25,$$FASXB(,&R26) --> ASXB\n.SKPR25  AIF   ('&R23' EQ '').SKPR23   SKIP THIS LOAD\n         L     &R23,$$FFTCB(,&R24) --> FIRST TCB (RCT)\n.SKPR23  AIF   ('&R21' EQ '').SKPR21   SKIP THIS LOAD\n         L     &R21,$$FLTC(,&R22) --> STC INIT TCB (STC)\n.SKPR21  AIF   ('&R19' EQ '').SKPR19   SKIP THIS LOAD\n         L     &R19,$$FLTC(,&R20) --> ORIGINATOR TCB (INT)\n.SKPR19  AIF   ('&R18' EQ '').SKPR18   SKIP THIS LOAD\n         L     &R18,$$FTIOT(,&R7) --> TIOT\n.SKPR18  AIF   ('&R17' EQ '').SKPR17   SKIP THIS LOAD\n         L     &R17,$$FTCT(,&R7)  --> TCT\n.SKPR17  AIF   ('&R15' EQ '').SKPR15   SKIP THIS LOAD\n         L     &R15,$$FTCTI(,&R16) --> TCTIOTBL\n.SKPR15  AIF   ('&R14' EQ '').SKPR14   SKIP THIS LOAD\n         L     &R14,$$FJSCB(,&R7) --> JSCB (CURRENT)\n         L     &R14,$$FJSCA(,&R14) --> JSCB (ACTIVE)\n.SKPR14  AIF   ('&R12' EQ '').SKPR12   SKIP THIS LOAD\n         L     &R12,$$FSSIB(,&R13) --> SSIB\n.SKPR12  AIF   ('&R10' EQ '').SKPR10   SKIP THIS LOAD\n         L     &R10,$$FSJB(,&R11) --> SJB\n.SKPR10  AIF   ('&R8' EQ '').SKPR8     SKIP THIS LOAD\n         L     &R8,$$FJCT(,&R9)   --> JES2 JCT\n.SKPR8   AIF   ('&R6' EQ '').SKPR6     SKIP THIS LOAD\n         L     &R6,$$FLCTR4(,&R7) --> LCT\n.SKPR6   AIF   ('&R5' EQ '').SKPR5     SKIP THIS LOAD\n         L     &R5,$$FOSSCT(,&R4) --> OS SCT\n.SKPR5   AIF   ('&R3' EQ '').SKPR3     SKIP THIS LOAD\n         L     &R3,$$FOSJCT(,&R4) --> OS JCT\n.SKPR3   AIF   ('&R1' EQ '').SKPR1     SKIP THIS LOAD\n         L     &R1,$$FOSACT(,&R2) --> OS ACT (-10)\n         LA    &R1,16(,&R1)       --> OS ACT\n.SKPR1   ANOP  ,             END OF CHAIN 2\n.*       LOAD STATMENTS FOR CHAIN 1 FINISHED\n.*\n.*       DO LOAD STATEMENTS FOR CHAIN 2\n         AIF   ('&S21' EQ '').SKPS21   SKIP THIS LOAD\n         L     &S21,$$FTCBO       --> CURRENT TCB\n.SKPS21  AIF   ('&S20' EQ '').SKPS20   SKIP THIS LOAD\n         L     &S20,$$FRB(,&S14)  --> RB\n.SKPS20  AIF   ('&S19' EQ '').SKPS19   SKIP THIS LOAD\n         L     &S19,$$FTQE(,&S14) --> TQE\n.SKPS19  AIF   ('&S18' EQ '').SKPS18   SKIP THIS LOAD\n         L     &S18,$$FTIOT(,&S14) --> TIOT\n.SKPS18  AIF   ('&S17' EQ '').SKPS17   SKIP THIS LOAD\n         L     &S17,$$FTCT(,&S14) --> TCT\n.SKPS17  AIF   ('&S15' EQ '').SKPS15   SKIP THIS LOAD\n         L     &S15,$$FTCTI(,&S16) --> TCTIOTBL\n.SKPS15  AIF   ('&S13' EQ '').SKPS13   SKIP THIS LOAD\n         L     &S13,$$FJSCB(,&S14) --> JSCB (CURRENT)\n         L     &S13,$$FJSCA(,&S13) --> JSCB (ACTIVE)\n.SKPS13  AIF   ('&S12' EQ '').SKPS12   SKIP THIS LOAD\n         L     &S12,$$FSSIB(,&S7) --> SSIB\n.SKPS12  AIF   ('&S10' EQ '').SKPS10   SKIP THIS LOAD\n         L     &S10,$$FSJB(,&S11) --> SJB\n.SKPS10  AIF   ('&S8' EQ '').SKPS8     SKIP THIS LOAD\n         L     &S8,$$FJCT(,&S9)   --> JES2 JCT\n.SKPS8   AIF   ('&S6' EQ '').SKPS6     SKIP THIS LOAD\n         L     &S6,$$FQMPI(,&S7)  --> LCT\n         B     FND2&SYSNDX        BRANCH AROUND OFFSET\nFND1&SYSNDX DC A($$FLCTQ)         LOAD OFFSET TO QMANG AREA\nFND2&SYSNDX S  &S6,FND1&SYSNDX    REDUCE TO START OF LCT\n.SKPS6   AIF   ('&S5' EQ '').SKPS5     SKIP THIS LOAD\n         L     &S5,$$FOSSCT(,&S4) --> OS SCT\n.SKPS5   AIF   ('&S3' EQ '').SKPS3     SKIP THIS LOAD\n         L     &S3,$$FOSJCT(,&S4) --> OS JCT\n.SKPS3   AIF   ('&S1' EQ '').SKPS1     SKIP THIS LOAD\n         L     &S1,$$FOSACT(,&S2) --> OS ACT (-10)\n         LA    &S1,16(,&S1)       --> OS ACT\n.SKPS1   ANOP  ,             END OF CHAIN 2\n.*       END OF CHAIN 2 PROCESSING\n.*\n.*       BEGIN CHAIN 3 PROCESSING\n         AIF   ('&T8' EQ '').SKPT8     SKIP THIS LOAD\n         L     &T8,$$FCVT         --> CVT\n.SKPT8   AIF   ('&T7' EQ '').SKPT7     SKIP THIS LOAD\n         L     &T7,$$VPSIB(,&T5)  --> CVTVPSIB (PAGE SERVICES)\n.SKPT7   AIF   ('&T6' EQ '').SKPT6     SKIP THIS LOAD\n         L     &T6,$$FASVT(,&T5)  --> ASVT\n.SKPT6   AIF   ('&T4' EQ '').SKPT4     SKIP THIS LOAD\n         L     &T4,$$FVSCVT(,&T5) --> TUCVSCVT\n.SKPT4   AIF   ('&T3' EQ '').SKPT3     SKIP THIS LOAD\n         L     &T3,$$FACTIM(,&T2) --> TUCACTIM\n.SKPT3   AIF   ('&T1' EQ '').SKPT1     SKIP THIS LOAD\n         L     &T1,$$FACOEF(,&T2) --> TUCACOEF\n.SKPT1   ANOP  ,             END OF CHAIN 3\n.*       PROCESSING FINISHED WITH CHAIN 3\n.*\n         MEXIT\n         AIF    ('&DOC' EQ 'NO').NODOC\n         SPACE  2\n*\n*        ACOEF  = ACCOUNTING COEFFICIENTS POINTED TO BY TUCVSCVT\n*        ACTIM  = I/O TIME, JOB CPU TIME, AND PROGRAMMER NAME TABLE\n*        ASCB   = ASCB, POINTED TO FROM X'224'\n*        ASID   = ASID AS FOUND IN THE ASCB\n*        ASVT   = ASVT POINTED TO BY THE CVT\n*        ASXB   = ASXB POINTED TO BY ASCB\n*        CVT    = CVT, ADDRESS OBTAINED FROM X'10'\n*        FIX    = ADDRESS OF PAGE SERVICES (FROM CVT)\n*        JCT    = JES2 JCT CHAINED FROM THE ACTIVE JSCB, SSIB, SJB.\n*                 EITHER TCB OR TCBINT MAY BE USED TO LOCATE THE JSCB.\n*        JSCB   = ACTIVE JSCB FROM EITHER THE TCB OR TCBINIT.\n*        LCT    = INITIATOR LCT, OBTAINED EITHER FROM THE TCBINT R4\n*                 OR THE JSCB QMANAGER POINTER (MINUS AN OFFSET)\n*        OSACT  = OS ACT, POINTED TO BY THE OS JCT\n*        OSJCT  = OS JCT, POINTED TO BY THE LCT\n*        OSSCT  = OS SCT, POINTED TO BY THE LCT\n*        RB     = RB, POINTED TO BY THE TCB\n*        SJB    = SJB, POINTED TO BY THE SSIB (SEE JSCB FOR CHAIN)\n*        SSIB   = SSIB, POINTED TO BY THE JSCB (SEE JSCB FOR CHAIN)\n*        TCB    = THE TCB POINTED TO BY LOCATION X'21C'\n*        TCBINT = THE TCB CHAINED FROM THE ASCB, ASXB. WHEN THIS TCB\n*                 IS REQUESTED, THEN THE JSCB AND LCT CHAINS (IF\n*                 REQUESTED) ARE STARTED FROM THIS REFERENCE.\n*                 IF THIS ENTRY IS NOT INCLUDED, THEN THE JSCB,\n*                 LCT CHAINS WILL START FROM THE TCB FROM X'21C'.\n*        TCBRCT = THE TCB FOR THE REGION CONTROL, POINTED TO BY ASXB\n*        TCBSTC = THE TCB FOR THE STC, CHAINED FROM THE RCT TCB.\n*        TCT    = SMF TIMING CONTROL TABLE, POINTED TO BY EITHER\n*                 THE INITIATOR TCB OR THE STEP TCB.\n*        TCTI   = THE IO PORTION OF THE TCT.\n*        TIOT   = TIOT FOR THE TCB, EITHER STEP OR TCB INIT.\n*        TQE    = THE TQE, POINTED TO FROM THE TCB\n*        TUCCVT = TUC VS CVT, POINTED TO BY THE CVT\n*\n*        THE FOLLOWING CHAINS ARE USED IN THIS MACRO;\n*    CHAIN 1                 OFF ASCB OLD\n*        X'224'\n*        28|\n*         ASCB----/\n*        27|26  25|26\n*         ASID   ASXB\n*               23|24\n*               TCBRCT\n*               21|22\n*               TCBSTC\n*               19|20\n*               TCBINT---/------/------/\n*               18| 7  17| 7  14| 7  6 | 7\n*                TIOT   TCT    JSCB   LCT-----/\n*                      15|16  12|13  5 | 4  3 | 4\n*                       TCTI   SSIB  OSSCT  OSJCT\n*                             10|11         1 | 2\n*                              SJB          OSACT\n*                             8 | 9\n*                              JCT\n*\n*    CHAIN 2                 OFF TCB OLD\n*        X'21C'\n*        21|\n*         TCB-----/------/------/------/\n*        20|14  19|14  18|14  17|14  13|14\n*         RB     TQE    TIOT   TCT    JSCB----/\n*                             15|16  12| 7  6 | 7\n*                              TCTI   SSIB   LCT-----/\n*                                    10|11  5 | 4  3 | 4\n*                                     SJB   OSSCT  OSJCT\n*                                    8 | 9         1 | 2\n*                                     JCT          OSACT\n*\n*    CHAIN 3                 OFF CVT\n*         X'10'\n*        8 |\n*         CVT-----/------/\n*        7 | 5  6 | 5  4 | 5\n*         FIX    ASVT  TUCCVT---/\n*                      3 | 2  1 | 2\n*                      ACTIM  ACOEF\n*\n*  THE SYMBOLIC REGISTER ON THE LEFT HAND SIDE OF THE '|' IS USED\n*   TO INDICATE WHETHER OR NOT THE LOAD INSTRUCTION IS DESIRED.\n*  THE CHAIN IS ESTABLISHED FROM LAST TO FIRST USING THE CONTINUING\n*   (LONGER) CHAINS TO PROVIDE THE NODES FOR THE BRANCHES.\n*  TO ADD A NEW ENTRY, OR A CHAIN OF ENTRIES:\n*   A. LOCATE THE POSITION WHERE THE NEW ENTRY BELONGS ON THE\n*      CHAINING DIAGRAM.\n*   B. IF THE ADDITION IS AN EXTENSION OF AN EXISTING CHAIN THEN\n*      ESTABLISH NEW SYMBOLIC REGISTERS FOR THE NEW INSTRUCTIONS\n*      BEGINNING WITH THE END OF THE CHAIN AND WORKING FORWARD.\n*   C. IF THE ADDITION IS A PARALLEL CHAIN, THEN USE THE RIGHT HAND\n*      SYMBOLIC REGISTER NUMBER AS THE RIGHT HAND NUMBER AT THE\n*      BEGINNING OF THE NEW CHAIN. FINISH NUMBERING THE REST OF THE\n*      CHAIN FROM LAST TO FIRST. FOLLOW THE DIAGRAM FOR THE SSIB TO\n*      SJB TO JCT AS AN EXAMPLE. (&S7 IS THE COMMON REGISTER OF THE\n*      JSCB BLOCK. THE VALUE OF &S13 WILL EQUAL THE VALUE OF &S7 IF\n*      THE CHAIN IS LOADED FROM THE TCB. &S13 WILL BE NULL AND &S7\n*      WILL BE THE REGISTER OF THE JSCB IF THE JSCB IS PROVIDED AS\n*      A STARTING ADDRESS.)\n*   D. CODE THE PROPER SETC AND AIF STATEMENTS TO SET THE NEW SYMBOLIC\n*      REGISTERS. USE THE EXISTING STATEMENTS AS A GUIDE. ALSO BUILD\n*      UP THE CONDITIONAL LOAD STATEMENTS. THE NEW CODE SHOULD BE\n*      PLACED IN THE MACRO IN THE LOGICAL RELATIONSHIP TO THE REST\n*      OF THE CHAINS. IE., PUT THE CODE BETWEEN THE INSTRUCTIONS THAT\n*      THE CHAINING DIAGRAM INDICATE.\n*\n*  THE FOLLOWING TABS WERE USED IN THE MAIN PART OF THE MACRO:\n*   TAB ON(10,16,30,35,40)\n*\n.NODOC  ANOP\n        MEND\n*          DATA SET MODESET    AT LEVEL 002 AS OF 01/15/82              00005**6\n         MACRO                                                          00006**6\n&LABEL   FMODESET &KEY=,&MF=,&RET=R14,&MODE=     CHANGE NAME TO MODESET 00007**6\n.*                                                                      00008**6\n.* CHANGE MACRO NAME TO FMODESET TO ALLOW USE OF REAL MODESET           00009**6\n.*                                                                      00010**6\n         LCLC    &PRINT         ******TO ALLOW USE OF MAGIC SVC  KT     00011**6\n&PRINT   SETC    'OFF'                                                  00012**6\n         AIF     ('&MF(1)' EQ 'E').CODE                                 00013**6\n         AIF     ('&KEY' EQ 'ZERO').GOSUP                               00014**6\n         AIF     ('&MODE' EQ 'SUP').GOSUP                               00015**6\n         AIF     ('&KEY' EQ 'NZERO').GOPROB                             00016**6\n         AIF     ('&MODE' EQ 'PROB').GOPROB                             00017**6\n MNOTE 8,'MODESET (NTL) OF &KEY NOT RECOGNIZED'                         00018**6\n         MEXIT                                                          00019**6\n.GOSUP   ANOP                                                           00020**6\n*                                                                       00021**6\n&LABEL   SR    R0,R0                    GET CODE                        00022**6\n         LA    R0,1             INDICATE KEY=0                          00023**6\n         SVC   232              DOIT PLEASE                             00024**6\n         AIF   ('&MF' NE 'L').FIN1                                 NTL* 00025**6\n         BR    &RET             RETURN TO MAINLINE                      00026**6\n*                                                                       00027**6\n.FIN1    ANOP  ,                                                   NTL* 00028**6\n         MEXIT                                                          00029**6\n.GOPROB  ANOP                                                           00030**6\n*                                                                       00031**6\n&LABEL   SR    R0,R0                    GET CODE                        00032**6\n         SVC   232                IF YOU PLEASE.....                    00033**6\n         AIF   ('&MF' NE 'L').FIN2                                 NTL* 00034**6\n         BR    &RET             RETURN TO CALLER                        00035**6\n*                                                                       00036**6\n.FIN2    ANOP  ,                                                   NTL* 00037**6\n         MEXIT                                                          00038**6\n.CODE    ANOP                                                           00039**6\n         AIF   ('&MF(1)' NE 'E').OOPS                                   00040**6\n&LABEL   BAL   &RET,&MF(2)      INVOKE ROUTINE                          00041**6\n*                                                                       00042**6\n         MEXIT                                                          00043**6\n.OOPS    ANOP                                                           00044**6\n MNOTE 12,'NTL MODESET MF NOT=L OR (E,ADDR)   MF=&MF'                   00045**6\n         MEND                                                           00046**6\n         MACRO                                                          00047**6\n         REGEQU                                                         00048**6\nR0       EQU   0                                                        00049**6\nR1       EQU   1                                                        00050**6\nR2       EQU   2                                                        00051**6\nR3       EQU   3                                                        00052**6\nR4       EQU   4                                                        00053**6\nR5       EQU   5                                                        00054**6\nR6       EQU   6                                                        00055**6\nR7       EQU   7                                                        00056**6\nR8       EQU   8                                                        00057**6\nR9       EQU   9                                                        00058**6\nR10      EQU   10                                                       00059**6\nR11      EQU   11                                                       00060**6\nR12      EQU   12                                                       00061**6\nR13      EQU   13                                                       00062**6\nR14      EQU   14                                                       00063**6\nR15      EQU   15                                                       00064**6\n         MEND                                                           00065**6\n         MACRO                                                          00066**6\n&LAB     LEAVER &WR=R13,&WL=WORKLEN                                     00067**6\n&LAB     LR    R1,&WR             WORKAREA ADDR FOR FREEMAIN            00068**6\n         LA    R0,&WL             WORKAREA LEN   \"    \"                 00069**6\n         L     R13,4(R13)         GET CALLERS SAVEAREA ADDR             00070**6\n         LR    R11,R15            SAVE RETURN CODE                      00071**6\n         FREEMAIN R,LV=(0),A=(1)                                        00072**6\n         LR    R15,R11            RESTORE RETURN CODE                   00073**6\n         RETURN (14,12),RC=(15)                                         00074**6\n         MEND                                                           00075**6\n         MACRO                                                          00076**6\n&LAB     LEAVENR                                                        00077**6\n&LAB     L     R13,4(R13)         GET CALLERS SAVEAREA ADDR             00078**6\n         RETURN (14,12),RC=(15)                                         00079**6\n         MEND                                                           00080**6\n         MACRO                                                          00081**6\n&LAB     KKPARSE &CPPL=R11,&ANS=ANS,&ECB=ECB,&PCL=PCL,&PPLA=PPLA        00082**6\n*                  DEFAULT OPERANDS :                                   00083**6\n*        KKPARSE &CPPL=R11,&ANS=ANS,&ECB=ECB,&PCL=PCL,&PPLA=PPLA        00084**6\n*                            CPPL IS THE REGISTER CONTAINING THE        00085**6\n*                                 POINTER TO THE COMMAND PROCESSOR      00086**6\n*                                 PARAMETER LIST.                       00087**6\n*                            ANS  IS A FULLWORD WHERE PARSE RETURNS     00088**6\n*                                 THE POINTER TO HIS ANSWER (IKJPARMD). 00089**6\n*                            ECB  IS A FULLWORD.                        00090**6\n*                            PCL  IS THE NAME OF THE PARSE CONTROL      00091**6\n*                                 LIST CSECT (IKJPARM).                 00092**6\n*                            PPLA IS A 7 FULLWORD AREA USED FOR         00093**6\n*                                 THE PARSE PARAMETER LIST.             00094**6\n*                                                                       00095**6\n*        KKPARSE             USES REGS R14,R15,R1,&CPPL REG             00096**6\n*                                                                       00097**6\n         USING CPPL,&CPPL         POINTS TO CPPL (PARM LIST)            00098**6\n*                                                                       00099**6\n&LAB     LA    R1,&PPLA           R1->PPL AREA                          00100**6\n         USING PPL,R1             TELL ASSEMBLER POINTS TO PPL AREA     00101**6\n*                                                                       00102**6\n*                         CONSTRUCT PARSE PARAMETER LIST                00103**6\n*                                           FOR IKJPARS :               00104**6\n*                                                                       00105**6\n         MVC   PPLUPT,CPPLUPT     UPT                                   00106**6\n         MVC   PPLECT,CPPLECT     ECT                                   00107**6\n         LA    R15,&ECB           ECB                                   00108**6\n         ST    R15,PPLECB                                               00109**6\n         L     R15,=V(&PCL.)      PCL                                   00110**6\n         ST    R15,PPLPCL                                               00111**6\n         LA    R15,&ANS           ANS                                   00112**6\n         ST    R15,PPLANS                                               00113**6\n         MVC   PPLCBUF,CPPLCBUF   CBUF                                  00114**6\n         XC    PPLUWA,PPLUWA                                            00115**6\n*                                                                       00116**6\n         DROP  R1                                                       00117**6\n         EJECT                                                          00118**6\n*        CALLTSSR EP=IKJPARS      CALL PARSE:                           00119**6\n         CALLTSSR EP=IKJPARS      CALL PARSE:                           00120**6\n         EJECT                                                          00121**6\n*                                                                       00122**6\n*                        DSECTS NEEDED BY PARSE:                        00123**6\n*                                                                       00124**6\n*CPPL    IKJCPPL                                                        00125**6\nCPPL     IKJCPPL                                                        00126**6\n*PPL     IKJPPL                                                         00127**6\nPPL      IKJPPL                                                         00128**6\n*                                                                       00129**6\nCVTMAP   DSECT                                                          00130**6\n         ORG   CVTMAP+524                                               00131**6\nCVTPARS  DS    F                                                        00132**6\nCVTPTR   EQU   16                                                       00133**6\n*                                                                       00134**6\n*                                                                       00135**6\n&SYSECT  CSECT                                                          00136**6\n         MEND                                                           00137**6\n         MACRO                                                          00138**6\n&LAB1    ENTERR &SA=SAVEAREA,&WA=WORKAREA,&WL=WORKLEN                   00139**6\n&LAB1    START                                                          00140**6\n         SAVE  (14,12),,*         HO-HUM                                00141**6\n         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING         00142**6\n         USING &LAB1,R12                                                00143**6\n         LR    R10,R1             SAVE PARM PTR R10->PARM PTR           00144**6\n         LA    R0,&WL             R0=GET LENGTH                         00145**6\n         GETMAIN R,LV=(0)         R1->WORKAREA                          00146**6\n         LR    R11,R13            R11->CALLERS SAVEAREA                 00147**6\n         LR    R13,R1             R13->WORKAREA                         00148**6\n         USING &WA.,R13                                                 00149**6\n         ST    R11,&SA.+4         SAVE HIS SAVEAREA PTR                 00150**6\n         LA    R13,&SA            R13->SAVEAREA (MINE)                  00151**6\n         ST    R13,8(,R11)        MINE IN HIS                           00152**6\n         LR    R11,R1             R11->WORKAREA IN CASE NOT SAME AS R13 00153**6\n*                       WORKAREA ADDR IS STILL R13 FOR                  00154**6\n*                       THE ASSEMBLER - IF DIFFERENT FROM R13           00155**6\n*                       THEN USE: DROP R13 AND USING &WA.,R11           00156**6\n         LR    R1,R10             RESTORE PARM PTR PTR                  00157**6\n         REGEQU                                                         00158**6\n         MEND                                                           00159**6\n         MACRO                                                          00160**6\n&LAB1    ENTERNR &SA=SAVEAREA                                           00161**6\n&LAB1    START                                                          00162**6\n         SAVE  (14,12),,*         HO-HUM                                00163**6\n         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING         00164**6\n         USING &LAB1,R12                                                00165**6\n         ST    R13,&SA.+4         SAVE HIS SAVEAREA PTR                 00166**6\n         LR    R11,R13            SAVE THE SAVE POINTER                 00167**6\n         LA    R13,&SA            R13->SAVEAREA (MINE)                  00168**6\n         ST    R13,8(,R11)        MINE IN HIS                           00169**6\n         B     ENTEX                                                    00170**6\n&SA      DS    18F                                                      00171**6\n         REGEQU                                                         00172**6\nENTEX    DS    0H                                                       00173**6\n         MEND                                                           00174**6\n         MACRO                                                          00175**6\n&LAB1    COMMENT &A,&B,&C,&D,&E,&F,&G,&H,&I,&J,&K                       00176**6\n         MEND                                                           00177**6\n         MACRO  ,                                                       00178**6\n&LABEL   STUFFIT &FIELD,&KEYWD,&PDE                                     00179**6\n         LCLC   &S                                                      00180**6\n&S       SETC   '&SYSNDX'                                               00181**6\n         SPACE  1                                                       00182**6\n         AIF   (T'&KEYWD EQ 'O').NOCHK                                  00183**6\n&LABEL   TM    &KEYWD+1,X'FF'  WAS FIELD REQUESTED?               NTL1  00184**6\n         BZ    SKPA&S          NO..SPLIT                                00185**6\n         AGO   .FINCHK                                                  00186**6\n.NOCHK   ANOP  ,                                                        00187**6\n&LABEL   L     R7,&PDE         (R7)= ADDR OF PARSE DESCRIPTOR ENTRY     00188**6\n         AGO   .SKP1                                                    00189**6\n.FINCHK  ANOP  ,                                                        00190**6\n         L     R7,&PDE         (R7)= ADDR OF PARSE DESCRIPTOR ENTRY     00191**6\n.SKP1    ANOP  ,                                                        00192**6\n         LH    R6,&PDE+4       (R6)= LENGTH OF ELEMENT                  00193**6\n         BAL   R14,LOCVAR      GO FIND THE CLIST VARIABLE               00194**6\n         LTR   R1,R1           ANY LUCK?                                00195**6\n         BZ    SKPA&S          NO.. SPLIT                               00196**6\n         SPACE 1                                                        00197**6\n         LA    R15,&FIELD      GET ADDR OF FIELD TO STUFF               00198**6\n         LH    R0,=AL2(L'&FIELD)   GET LENGTH OF FIELD TO STUFF   INTEL 00199**6\n         BAL   R14,SETVAR      GO STUFF IT AWAY INTO CLIST VAR          00200**6\nSKPA&S   DS    0H                                                       00201**6\n         SPACE 1                                                        00202**6\n         MEND  ,                                                        00203**6\n         MACRO ,                                                    NTL 00204**6\n&LABEL   STUFFITN &NUMB,&KEYWD,&PDE                                 NTL 00205**6\n         SPACE 1                                                    NTL 00206**6\n         LCLA  &L                                                   NTL 00207**6\n&L       SETA  L'&NUMB         GET LENGTH OF NUMBER                 NTL 00208**6\n         SR    R1,R1           CLEAR NUMBER REGISTER                NTL 00209**6\n         AIF   (&L NE 1).NOT1                                       NTL 00210**6\n&LABEL   IC    R1,&NUMB        GET NUMBER (1 BYTE)                  NTL 00211**6\n         AGO   .DOIT                                                NTL 00212**6\n.NOT1    ANOP  ,                                                    NTL 00213**6\n         AIF   (&L NE 2).NOT2                                       NTL 00214**6\n&LABEL   LH    R1,&NUMB        GET NUMBER (HALFWORD)                NTL 00215**6\n         AGO   .DOIT                                                NTL 00216**6\n.NOT2    ANOP  ,                                                    NTL 00217**6\n         AIF   (&L NE 4).NOT4                                       NTL 00218**6\n&LABEL   L     R1,&NUMB        GET NUMBER (FULLWORD)                NTL 00219**6\n         AGO   .DOIT                                                NTL 00220**6\n.NOT4    ANOP  ,                                                    NTL 00221**6\n MNOTE 8,'STUFFITN - LENGTH OF &NUMB IS &L - MUST BE 1,2 OR 4'      NTL 00222**6\n         MEXIT ,                                                    NTL 00223**6\n.DOIT    ANOP  ,                                                    NTL 00224**6\n         BAL   R14,FITINUM                                          NTL 00225**6\n MNOTE '        STUFFIT NUMBER,&KEYWD,&PDE   INVOKE STUFFIT'        NTL 00226**6\n         STUFFIT NUMBER,&KEYWD,&PDE                                 NTL 00227**6\n         MEND  ,                                                    NTL 00228**6\n         PRINT ON   END OF INSTREAM MACROS                              00229**6\n*                                                                       00230**6\n* TSO COMMAND   G E T I N F O                                           00231**6\n*                                                                       00232**6\n*     PURPOSE: STUFF JUNK FROM THE OS JCT/ACF2 JCT INTO CLIST           00233**6\n*              VARIABLES OF YOUR CHOICE.                                00234**6\n*                                                                       00235**6\n*   SYNTAX - (ALL OPERANDS ARE OPTIONAL)                                00236**6\n*                                 LENGTH  DESCRIPTION                   00237**6\n*      GETINFO  PGMRNAME(VAR1) /*  20     PROGRAMMER NAME            */ 00238**6\n*               BIN(VAR2)      /*   4     BIN NUMBER (SECOND ACNT FLD*/ 00239**6\n*               PHONE(VAR3)    /*  12     USER PHONE NUMBER- ACF2    */ 00240**6\n*               DEST(VAR4)     /*   8     DEFAULT SYSOUT DEST        */ 00241**6\n*               JOBCLASS(VAR5) /*   1     ACF2 DFT-SUBC              */ 00242**6\n*               MSGCLASS(VAR6) /*   1     ACF2 DFT-SUBM              */ 00243**6\n*               SYSOUT(VAR7)   /*   1     ACF2 DFT-SOUT              */ 00244**6\n*               PROJECT(VAR8)  /*   4     FIRST 4 CHARS OF ACNT FIELD*/ 00245**6\n*               SRNUM(VAR9)    /*   4     LAST  4 CHARS OF ACNT FIELD*/ 00246**6\n*               JOBNUM(VAR10)  /*   8     JES2 JOB NUMBER            */ 00247**6\n*               LINE(VAR11)    /*   8     LOGON TERMAINAL NAME       */ 00248**6\n*               DAY(VAR12)     /*   9     DAY OF THE WEEK FOR TODAY  */ 00249**6\n*               JDATE(VAR13)   /*   6     JULIAN DATE IN YY.DDD FORM */ 00250**6\n*               DATE(VAR14)    /*  13     DATE IN 'MON. DD, 19YY'    */ 00251**6\n*               ROWS(VAR15)    /*   8     CUR # LINES/SCREEN         */ 00252**6\n*               COLS(VAR16)    /*   8     CUR # CHARS/LINE           */ 00253**6\n*               PROWS(VAR17)   /*   8     PRIMARY # LINES/SCREEN     */ 00254**6\n*               PCOLS(VAR18)   /*   8     PRIMARY # CHARS/LINE       */ 00255**6\n*               AROWS(VAR19)   /*   8     ALTERNATE # LINES/SCREEN   */ 00256**6\n*               ACOLS(VAR20)   /*   8     ALTERNATE # CHARS/LINE     */ 00257**6\n*               ATTR(VAR21)    /*   4    ='YES'-PROGRAM SYMB OK ELSE */ 00258**6\n*                              /*        ='NO' -NO PROGRAM SYMB FEAT.*/ 00259**6\n*               ENVIRON(VAR22) /*   8    ='BATCH', 'TSO' OR 'TONE4'  */ 00260**6\n*               NOCOMPR        /*  KEYWORD- NO TRIM OF TRAILING BLNKS*/ 00261**6\n*                                                                       00262**6\n         GBLB  &TONE4          TONE4 MVS DEPENDENT CODE             NTL 00263**6\n         GBLB  &SP3            SP1.3 VERSION OF JES2              INTEL 00266**6\n         GBLB  &ACF314         ACF2 3.1.4 VERSION INSTALLED       INTEL 00263**6\n&TONE4   SETB  0               1=YES, 0=NO                          NTL 00264**6\n&SP3     SETB  0               1=YES, 0=NO                        INTEL 00267**6\n&ACF314  SETB  1               1=YES, 0=NO                        INTEL 00264**6\n*                                                                       00262**6\n         AIF   (&ACF314).$SK1001                                  INTEL\n         GBLC  &ACF2JCT    ACF 3.1.3                              INTEL 00268**6\n.$SK1001 ANOP  ,                                                  INTEL 00360**6\n          EJECT  ,                                                  NTL 00269**6\n*                                                                       00262**6\n*                                                                       00262**6\n*   VAR1-VAR22 ARE CLIST VARIABLE NAMES (WITHOUT THE & IN FRONT)    NTL 00270**6\n*   ALL VARIABLES MUST HAVE BEEN INITIALIZED BY A 'SET' STATMENT BEFORE 00271**6\n*   GET INFO IS INVOKED.                                                00272**6\n*                                                                       00273**6\n*   EXAMPLE:   RETURN PROGRAMMER NAME AND PHONE NUMBER:                 00274**6\n*                                                                       00275**6\n*        SET &PHON = &STR(            )                                 00276**6\n*        SET &PRGN = &STR(                    )                         00277**6\n*        GETINFO PGMR(PRGN) PHONE(PHON)                                 00278**6\n*                                                                       00279**6\n*                                                                       00280**6\n* RETURN-CODES : GETINFO RETURNS CODES IN CLIST VAR &LASTCC AS FOLLOWS; 00281**6\n*                                                                       00282**6\n*                       0 - NORMAL COMPLETION                           00283**6\n*              X'20' = 32 - VARIABLE TRUNCATED - TOO SHORT FOR FIELD    00284**6\n*              X'40' = 64 - VARIABLE NOT FOUND                          00285**6\n*              X'80' =128 - NOT RUNNING UNDER CONTROL OF CLIST          00286**6\n*                     256 - PARSE ERROR                                 00287**6\n*              NOTE: VALUES ARE ADDITIVE:                               00288**6\n*                 A RETURN CODE OF 96 =X'60' INDICATES AT LEAST ONE     00289**6\n*                 VARIABLE WAS TRUNCATED, AND ANOTHER WAS NOT FOUND.    00290**6\n*                                                                       00291**6\n*  HISTORY:                                                             00292**6\n*  V1.0    K TRUE     25 JUN 81  - INTEL CORP.                          00293**6\n*      BASED ON 'KOMM' FROM KERMIT KISER OF WASHINTON STATE DP          00294**6\n*            SERVICE CENTER (WDPSC).  STOLEN FROM COMM WERE MACROS      00295**6\n*            AND MANIPULATION OF CLIST VARIABLES ROUTINES.              00296**6\n*                                                                   NTL 00297**6\n*  V1.1   K  TRUE     12 APR 82  - INTEL CORP                       NTL 00298**6\n*      ADDED KEYWORDS:                                              NTL 00299**6\n*            ROWS,COLS,PROWS,PCOLS,AROWS,ACOLS,ATTR,ENVIRON         NTL 00300**6\n*      ADDED TONE4 SUPPORT VIA &TONE4 GBLB VARIABLE.. CODE FOR      NTL 00301**6\n*            EXTRACTION OF TONE4 LINE IS BY BILL WILLIAMS (FROM     NTL 00302**6\n*            TSO043(WHODIS) COMMAND)                                NTL 00303**6\n*      INCLUDED MODESET LOCAL MACRO AS INSTREAM SO MAGIC SVC COULD  NTL 00304**6\n*            BE USED, OR REAL MODESET (AS YOU WISH)                 NTL 00305**6\n*  V1.2  K  TRUE     13 MAR 83   - INTEL CORP                       NTL 00306**6\n*      ADDED &SP3 FLAG FOR SP1.3 JES2...NEW ACF2 CONTROL BLOCKS..   NTL 00307**6\n*  V1.3  B WILLIAMS  08 OCT 84   - INTEL CORP                     INTEL 00306**6\n*      ADDED &ACF314 FLAG FOR ACF2  3.1.5 SUPPORT                 INTEL 00307**6\n*  V1.4  B WILLIAMS  30 OCT 85   - INTEL CORP                     INTEL 00306**6\n*      WITH &ACF314 FLAG SUPPORT JES2 1.3.4 INSTALL               NTL14 00307**6\n*  V1.5  B WILLIAMS  11 DEC 85   - INTEL CORP                     NTL15\n*      MODIFY LOCVAR ROUTINE TO SUPPORT TSOE EXTENSION TABLE.     NTL15\n*  V1.6  B WILLIAMS  27 FEB 86   - INTEL CORP                     NTL16\n*      ADD SPLEVEL SET=1 FOR 370 MACRO EXPANSION (STAX)           NTL16\n*                                                                   NTL 00308**6\n* ORIGINAL SOURCE WAS:                                              NTL 00309**6\n*          DATA SET CBT934     AT LEVEL 001 AS OF 02/25/79              00310**6\n*    FROM THE CBT MODS TAPE.                                        NTL 00311**6\n*                                                                   NTL 00312**6\n*                                                                   NTL 00313**6\n         EJECT                                                          00314**6\n*.....................................................................* 00315**6\n*        STANDARD COMMAND PROCESSOR LINKAGE                           * 00316**6\n*.....................................................................* 00317**6\n         SPACE                                                          00318**6\nGETINFO  ENTERR                   R13 -> WORKAREA                       00319**6\n*                                 R12 -> GETINFO ADDRESSABILITY         00320**6\n         XC    RETCODE,RETCODE                                          00321**6\n         EJECT                                                          00322**6\n*.....................................................................* 00323**6\n*        PARSE THE INPUT BUFFER                                       * 00324**6\n*.....................................................................* 00325**6\n         SPACE                                                          00326**6\n         LR    R11,R1             SAVE THE PARM POINTER                 00327**6\n         SPLEVEL SET=1                                            NTL16\n*                                 R11 -> CPPL                           00328**6\nDOPARSE  KKPARSE                                                        00329**6\n*                                                                       00330**6\n*                                                                       00331**6\n         DROP  R11                                                      00332**6\nANALR    LTR   R15,R15            RC = 0? PARSE WENT OK?                00333**6\n         BNZ   PARSERR            NO. -> GO TO PARSE ERR                00334**6\n         L     R10,ANS            R10 -> IKJPARMD                       00335**6\n         USING IKJPARMD,R10                                             00336**6\n         EJECT                                                          00337**6\n         AIF   (&ACF314).$SKIP02                                  NTL14\n*.....................................................................* 00338**6\n*        FIND JCT                                                     * 00339**6\n*.....................................................................* 00340**6\n         SPACE 1                                                        00341**6\nJCT      EQU   R11           NEEDED BY $JCT MACRO FOR                   00342**6\n         AIF   (&SP3).$SKIP01                                     NTL14\nBUFDSECT EQU   *                 MAPPING OF THE                         00344**6\nBUFSTART EQU   *+X'58'                GLORIOUS J C T                    00345**6\n         AGO   .$SKP01E                                           INTEL 00346**6\n.$SKIP01 ANOP  ,                SP 1.3 JES2                       INTEL 00347**6\n         #ACFJES2    ,          ESTABLISH OFFSETS TO USE          INTEL 00348**6\n.$SKP01E ANOP  ,                                                  INTEL 00349**6\n         SPACE 1                                                        00350**6\nFINDJCT  $FINDCB ASCB=R2,JCT=R11   FIND THE JCT AND ASCB ADDRESS        00351**6\n         EJECT ,                                                  INTEL 00352**6\n         ST    R2,ADDRASCB         SAVE FOR POSSIBLE LATER USE          00353**6\n         USING JCTSTART,JCT        ESTABLIST ADDRESSABILITY TO JCT      00354**6\n         SPACE 1                                                  INTEL 00355**6\n         AIF   (NOT &SP3).$SKIP02                                 NTL14\n         ICM   R9,15,&ACF2JCT      TEST, GET ACF2 AREA OFFSET     INTEL 00357**6\n         LA    R9,0(JCT,R9)        CALCULATE ADDRESS              INTEL 00358**6\n         USING #ACFJCTX,R9         ADDRESSING                     INTEL 00359**6\n.$SKIP02 ANOP  ,                                                  NTL14\n         AIF   (NOT &ACF314).$SK1003                              NTL14\n         $FINDCB ASCB=R2                                          NTL15\n         ST    R2,ADDRASCB                                        NTL15\n         EJECT ,                                                  NTL15\n         USING ACCVT,R3                ADDRESS ACF CVT            INTEL\n         ACFGACVT R3,NONE=GETOUT      GET CB ADDRESSABILITY       INTEL\n         USING ACUCB,R4               ADDRESS ACF UCB             INTEL\n         ACFGUCB R4,NONE=GETOUT,INLINE=YES,SYS=AOS2 GET ACUCB ADDRESS\n         LR    R11,R15                                            NTL14\n         USING ACFASVT,R11                                        NTL14\n         USING LIDREC,R9               ADDRESS ACF LID            INTEL\n         ICM   R9,15,ACULRECP          GET ACF2 USER LID ADDRESS  INTEL\n         BZ    GETOUT                  PUNT IF NONE               INTEL\n         DROP  R3                     DROP ADDRESSABILITY         INTEL\n         DROP  R4                     DROP ADDRESSABILITY         INTEL\n         AGO   .$SK2002                                           NTL14\n.$SK1003 ANOP  ,                                                  INTEL 00360**6\n         CLC   JCTID,=CL4'JCT'     IS THIS THE REAL JCT?            NTL 00361**6\n         BE    BEGIN               YES.....GO FOR IT                NTL 00362**6\n         OI    RETCODE+2,X'02'     SET RC=512                       NTL 00363**6\n         B     GETOUT              AND SPLIT                        NTL 00364**6\n         EJECT                                                          00365**6\n.$SK2002 ANOP  ,                                                  NTL14\n*.....................................................................* 00366**6\n*        PROCESS THE PARMS                                            * 00367**6\n*.....................................................................* 00368**6\n         SPACE                                                          00369**6\nBEGIN    STUFFIT  LIDNAME,PGMRNAME,PGMRDD                               00370**6\n         AIF   (NOT &ACF314).$SK2003                              NTL14\n         STUFFIT  NTLROOMN,BINNUMB,BINDD                          NTL14\n         AGO   .$SK2004                                           NTL14\n.$SK2003 ANOP  ,                                                  NTL14\n         STUFFIT  JCTROOMN,BINNUMB,BINDD                                00371**6\n.$SK2004 ANOP  ,                                                  NTL14\n         STUFFIT  LIDPHONE,PHONE,PHONDD                                 00372**6\n         EJECT   ,                                                      00373**6\n         STUFFIT  LIDTDRMT,DEST,DESTDD                                  00374**6\n         STUFFIT  LIDTSUBC,JOBCLASS,JOBCDD                              00375**6\n         STUFFIT  LIDTSUBM,MSGCLASS,MSGCDD                              00376**6\n         EJECT   ,                                                      00377**6\n         STUFFIT  LIDTSOUT,SYSOUT,SYSODD                                00378**6\n         STUFFIT  NTLPROJ,PROJECT,PROJDD                                00379**6\n         STUFFIT  NTLSRNUM,SRNUM,SRNUDD                                 00380**6\n         EJECT   ,                                                      00381**6\n         AIF   (NOT &ACF314).$SK2005                              NTL14\n         STUFFIT  ASVJID,JOBNUMB,JOBNDD                           NTL14\n         AGO   .$SK2006                                           NTL14\n.$SK2005 ANOP  ,                                                  NTL14\n         STUFFIT  JCTJOBID,JOBNUMB,JOBNDD                               00382**6\n.$SK2006 ANOP  ,                                                  NTL14\n         BAL      R14,GETLINE#                                          00383**6\n         STUFFIT  LINEAREA,LINE,LINEDD                                  00384**6\n         STUFFIT  VLOGMODE,LOGMODE,LMODDD                           NTL 00385**6\n         EJECT   ,                                                      00386**6\n         STUFFITN TTYPE,TERMTYPE,TTYPDD                             NTL 00387**6\nNOLINE   DS       0H                                                    00388**6\n         TM       DAY+1,X'FF'      WAS DAY OF WEEK REQUESTED            00389**6\n         BZ       NODAY                                                 00390**6\n         BAL      R14,DATERTN                                           00391**6\n         STUFFIT  LEFTDAY,,DAYXDD                                       00392**6\nNODAY    DS       0H                                                    00393**6\n         EJECT                                                          00394**6\n         TM       JDATEV+1,X'FF'   WAS JULIAN DATE REQUESTED?           00395**6\n         BZ       NOJDATE                                               00396**6\n         BAL      R14,DATERTN                                           00397**6\n         STUFFIT  JDATE,,JDATDD                                         00398**6\nNOJDATE  DS       0H                                                    00399**6\n         SPACE                                                          00400**6\n         TM       GDATEV+1,X'FF'  WAS GREGORIAL DATE REQUESTED?         00401**6\n         BZ       NOGDATE                                               00402**6\n         BAL      R14,DATERTN                                           00403**6\n         STUFFIT  CDATE,,DATEDD                                         00404**6\nNOGDATE  DS       0H                                                    00405**6\n*                                                                       00406**6\n         EJECT                                                          00407**6\n*.....................................................................* 00408**6\n*        TERMINAL CHARACTERISTICS                                     * 00409**6\n*.....................................................................* 00410**6\n         SPACE                                                          00411**6\n         MVC      WHERAMI,=CL8'TSO'   INDICATE UNDER TSO            NTL 00412**6\n         L        R1,ADDRASCB         GET ASCB ADDRESS WE SAVED OFF NTL 00413**6\n         CLI      ASCBTSB-ASCB(R1),X'C0' IS THIS TONE4 LAND?        NTL 00414**6\n         BNE      NOTTONE4                                          NTL 00415**6\n         MVC      WHERAMI,=CL8'TONE4' THIS IS TONE                  NTL 00416**6\n         B        STUFFAMI                                          NTL 00417**6\nNOTTONE4 CLC      ASCBTSB-ASCB(,R1),=XL4'00' NO POINTER?            NTL 00418**6\n         BNE      STUFFAMI            SOME POINTER..MUST BE TSO     NTL 00419**6\n         MVC      WHERAMI,=CL8'BATCH' MUST BE BATCH....             NTL 00420**6\nSTUFFAMI STUFFIT  WHERAMI,ENVIRON,ENVDD  PUT ENVIRONMENT AWAY       NTL 00421**6\n         XC       PRMSZE(CLRITL),PRMSZE                             NTL 00422**6\n         GTSIZE   ,  GET CURRENT ROWS/COLS FOR TERMINAL             NTL 00423**6\n         STC      R0,CURROWS     SAVE CURRENT # LINES PER SCREEN    NTL 00424**6\n         STC      R1,CURCOLS     SAVE # CHARS/LINE                  NTL 00425**6\n         LA       R15,PRMSZE                                        NTL 00426**6\n         ST       R15,GTTERM                                        NTL 00427**6\n         LA       R15,ALTSZE                                        NTL 00428**6\n         ST       R15,GTTERM+4                                      NTL 00429**6\n         LA       R15,ATTRIB                                        NTL 00430**6\n         ST       R15,GTTERM+8                                      NTL 00431**6\n         MVI      GTTERM+8,X'80'                                    NTL 00432**6\n         GTTERM   MF=(E,GTTERM)                                     NTL 00433**6\n         STC      R15,GTTERMRC   SAVE OFF RETURN CODE               NTL 00434**6\n         EJECT    ,                                                 NTL 00435**6\n         STUFFITN CURROWS,ROWS,ROWSDD                               NTL 00436**6\n         STUFFITN CURCOLS,COLS,COLSDD                               NTL 00437**6\n         EJECT    ,                                                 NTL 00438**6\n*        OC       GTTERMRC,GTTERMRC   GTTERM WORK OK?               NTL 00439**6\n*        BNZ      GETOUT              NO...CANCEL                   NTL 00440**6\n         STUFFITN PRMROWS,PROWS,PROWSDD                             NTL 00441**6\n         STUFFITN PRMCOLS,PCOLS,PCOLSDD                             NTL 00442**6\n         EJECT    ,                                                 NTL 00443**6\n         STUFFITN ALTROWS,AROWS,AROWSDD                             NTL 00444**6\n         STUFFITN ALTCOLS,ACOLS,ACOLSDD                             NTL 00445**6\n         EJECT    ,                                                 NTL 00446**6\n         MVC      ATTRYORN,=CL4'NO'                                 NTL 00447**6\n         OC       ATTRIB+3(1),ATTRIB+3 CHECK OUT EXTENDED SYMBOLS   NTL 00448**6\n         BZ       STUFFATT                                          NTL 00449**6\n         MVC      ATTRYORN,=CL4'YES'  SET UP EXTENDED ATTRIBUTES    NTL 00450**6\nSTUFFATT STUFFIT  ATTRYORN,ATTR,ATTRDD                              NTL 00451**6\n         SPACE   2                                                      00452**6\n*.....................................................................* 00453**6\n*        EXIT                                                         * 00454**6\n*.....................................................................* 00455**6\n         SPACE                                                          00456**6\nGETOUT   L     R15,RETCODE                                              00457**6\n         LEAVER                   EXIT REENTRANT ROUTINE                00458**6\n         SPACE 2                                                        00459**6\n*                                                                       00460**6\n*       GETINFO SUBROUTINES HERE                                        00461**6\n*                                                                       00462**6\nPARSERR  EQU   *                                                        00463**6\n         OI    RETCODE+2,X'01'    RC=256                                00464**6\n         B     GETOUT                                                   00465**6\n*                                                                       00466**6\n         EJECT                                                          00467**6\n*.....................................................................* 00468**6\n*  SUBROUTINE LOCVAR:                                                 * 00469**6\n*  PURPOSE: LOCATE ADDRESS OF VARABLE IN CLIST TO POKE STUFF INTO.    * 00470**6\n*                                                                     * 00471**6\n*  ENTER WITH :                                                       * 00472**6\n*                                                                     * 00473**6\n*       (R7) = ADDR PARSE VARIABLE ENTRY (LABEL ON IKJIDENT FOR       * 00474**6\n*              SUBFIELD TO BE EXAMINED).                              * 00475**6\n*       (R6) = LENGTH OF VARIABLE TO EXAMINE                          * 00476**6\n*                                                                     * 00477**6\n*       BAL R14,LOCVAR                                                * 00478**6\n*                                                                     * 00479**6\n* ON RETURN:  (R1) = 0   NOT FOUND                                    * 00480**6\n*             (R1) \u00ac=0   (R1) = ADDR OF CLIST VARIABLE ELEMENT        * 00481**6\n*                                                                     * 00482**6\n*   REGISTERS USED:  R3,R4,R5,R6,R7,R8 (RESTORED)                     * 00483**6\n*                    R1                (NOT RESTORED)                 * 00484**6\n*.....................................................................* 00485**6\n         SPACE                                                          00486**6\nLOCVAR   STM   R3,R8,SAVEREGS                                           00487**6\n         L     R5,ECTADDR         R5->ECT                               00488**6\n         L     R5,4(,R5)          R5->IOSRL                             00489**6\n         L     R4,0(,R5)          R4->TOP OF STACK                      00490**6\nCKCLIST  TM    0(R4),X'08'        CLIST ELEMENT?                        00491**6\n         BO    GOTCL              YES->WE HAVE A CLIST                  00492**6\n         S     R4,=F'4'           R4=R4-4 (NEXT ELEMENT DOWN ON STACK)  00493**6\n         C     R4,4(,R5)          R4<BOTTOM OF STACK PTR?               00494**6\n         BNL   CKCLIST            NO ->STILL IN STACK; GO CHECK IT      00495**6\n         OI    RETCODE+3,X'80'    YES->SET RC=128                       00496**6\n         LA    R1,0               NO POINTER FOR THE WICKED             00497**6\n         LM    R3,R8,SAVEREGS     RESTORE REGISTERS                     00498**6\n         BR    R14                EXIT LOCVAR WITH ERROR                00499**6\n         SPACE 1                                                        00500**6\nGOTCL    DS    0H                 R7->VARIABLE NAME                     00501**6\n*                                 R6=VAR LENGTH FOR LENGTH COMPARE      00502**6\n         L     R5,0(,R4)          R5->LSD                               00503**6\n         L     R5,12(,R5)         R5->EXECDATA                          00504**6\n         L     R5,0(,R5)          R5->SNTAB                             00505**6\n         L     R4,8(,R5)          R4==USED TABLE LENGTH                 00506**6\n         LA    R4,0(R4,R5)        R4->END OF TABLE USED                 00507**6\n         LA    R3,12(,R5)         R3->FIRST SNTAB ENTRY                 00508**6\n         LR    R1,R6              R1=R6  VARIABLE NAME LENGTH           00509**6\n         BCTR  R1,R0              R1=R1-1 FOR EXECUTED COMPARE          00510**6\n         EJECT ,                                                        00511**6\nRLOOP    LH    R2,6(,R3)          R2=NAME LENTH                         00512**6\n         CR    R6,R2              SAME LENGTH?                          00513**6\n         BNE   LOOPCHK            NO -> CHECK DONE                      00514**6\n         EX    R1,EXCLC           COMPARE NAMES                         00515**6\n         BE    GOTIT                                                    00516**6\nLOOPCHK  LA    R3,8(R2,R3)        POINT TO NEXT ENTRY                   00517**6\n         CR    R3,R4              DONE?                                 00518**6\n         BL    RLOOP              NO->CONTINUE                          00519**6\n         SPACE 1                                                        00520**6\n         ICM   R5,15,0(R5)        R5-> EXTENSION TABLE ADDRESS    NTL15\n         BZ    RERR               NO-> GO SET ERROR               NTL15\n         L     R4,8(,R5)          R4-> USED TABLE LENGTH          NTL15\n         LA    R4,0(R4,R5)        R4-> END OF TABLE USED          NTL15\n         LA    R3,12(,R5)         R3-> FIRST SNTAB ENTRY          NTL15\n         B     RLOOP              CONTINUE WITH EXTENSION TBL     NTL15\n         SPACE 1                                                  NTL15\nRERR     LA    R1,0               SET NO FOUND AND SPLIT                00521**6\n         OI    RETCODE+3,X'40'    YES->SET RC=64                        00522**6\n         LM    R3,R8,SAVEREGS     RESTORE REGISTERS                     00523**6\n         BR    R14                EXIT LOCVAR WITH ERROR                00524**6\n         SPACE 1                                                        00525**6\nGOTIT    EQU   *                                                        00526**6\n         L     R1,0(,R3)          GET VALUE ADDR                        00527**6\n         LM    R3,R8,SAVEREGS     RESTORE REGISTERS                     00528**6\n         BR    R14                RETURN                                00529**6\n         SPACE 1                                                        00530**6\nEXCLC    CLC   0(0,R7),8(R3)      EXECUTED                              00531**6\n         EJECT                                                          00532**6\n*.....................................................................* 00533**6\n* SUBROUTINE SETVAR:                                                  * 00534**6\n*                                                                     * 00535**6\n* PURPOSE:  MOVE STUFF FROM DESIRED FIELD INTO CLIST VARIABLE FIELD   * 00536**6\n*                                                                     * 00537**6\n* ON ENTRY (R1) = ADDR CLIST VAR POINTER                              * 00538**6\n*          (R15)= ADDRESS OF INPUT FIELD (THE MOVEE...)               * 00539**6\n*          (R0) = LENGTH OF INPUT FIELD (L'MOVEE......)               * 00540**6\n*                                                                     * 00541**6\n*   BAL  R14,SETVAR                                                   * 00542**6\n*                                                                     * 00543**6\n*   ON RETURN:                                                        * 00544**6\n*                                                                     * 00545**6\n*.....................................................................* 00546**6\n         SPACE                                                          00547**6\n*                                                                       00548**6\nSETVAR   DS    0H                 R1->VALUE TABLE ENTRY                 00549**6\n         STM   R2,R4,SAVEREGS                                           00550**6\n         ST    R14,SETVR14        SAVE RETURN ADDRESS             INTEL 00551**6\n         LR    R14,R0             LOAD LENGTH INTO WORK REGISTER  INTEL 00552**6\nROOMCHK  CH    R14,2(,R1)         ROOM FOR INPUT?                 INTEL 00553**6\n         BNH   SM                 YES->MOVE IT.                         00554**6\n         OI    RETCODE+3,X'20'    SET RC=32                             00555**6\n         LH    R14,2(,R1)         NO ->GET HIS LENGTH                   00556**6\nSM       BCTR  R14,0              R14=R14-1 = MACHINE LENGTH            00557**6\n         SPACE 1                                                        00558**6\n         TM    NOCOMPR+1,X'FF'    WAS NO COMPRESS WANTED?               00559**6\n         BNZ   SKIPCPRS           ..DONT DO COMPRESS                    00560**6\nDEBLANK  LA    R2,0(R15,R14)      POINT TO LAST CHARACTER TO MOVE       00561**6\n         CLI   0(R2),C' '         IS THIS ONE A BLANK                   00562**6\n         BNE   SKIPCPRS           NO..FINISHED WITH THIS ONE            00563**6\n         BCT   R14,DEBLANK        LOOP UNTIL DONE                       00564**6\nSKIPCPRS DS    0H                                                       00565**6\n         SPACE 1                                                        00566**6\n         CLI   0(R15),C' '        IS FIRST CHAR A BLANK?                00567**6\n         BE    SETNULL            YEP...SKIP MOVE AND SET LENG=0        00568**6\n         EX    R14,SMOVE          MOVE IT                               00569**6\n         LA    R14,1(,R14)        BUMP REAL COUNT                       00570**6\nUPDTCNT  STH   R14,0(,R1)         AND SAVE COUNT AWAY                   00571**6\n         LM    R2,R4,SAVEREGS                                           00572**6\n         LR    R0,R14             PASS BACK LENGTH USED           INTEL 00573**6\n         L     R14,SETVR14        RESTORE RETURN ADDRESS          INTEL 00574**6\n         BR    R14                                                      00575**6\n         SPACE 1                                                        00576**6\nSETNULL  SR    R14,R14                                                  00577**6\n         B     UPDTCNT                                                  00578**6\n         SPACE 1                                                        00579**6\nSMOVE    MVC   4(0,R1),0(R15)     EXECUTED                              00580**6\n         EJECT                                                          00581**6\n*.....................................................................* 00582**6\n* SUBROUTINE: GETLINE#                                                * 00583**6\n*                                                                     * 00584**6\n* PURPOSE: GET TCAM UCB ADDRESS OR VTAM TERMINAL ID FOR THIS ADDRESS  * 00585**6\n*          SPACE                                                      * 00586**6\n*                                                                     * 00587**6\n* ENTER WITH (ASCBADDR) CONTAINING THE ASCB ADDRESS                   * 00588**6\n*                                                                     * 00589**6\n*      BAL   R14,GETLINE#                                             * 00590**6\n*                                                                     * 00591**6\n* RETURNS WITH 'LINEAREA' FILLED IN                                   * 00592**6\n*                                                                     * 00593**6\n*.....................................................................* 00594**6\n         SPACE                                                          00595**6\nGETLINE# STM   R3,R8,SAVEREGS                                           00596**6\n         ST    R14,GETLR14          SAVE RETURN ADDRESS           INTEL 00597**6\n         MVC   VLOGMODE,BLANKS                                      NTL 00598**6\n         XC    TTYPE,TTYPE                                          NTL 00599**6\n         L     R7,ADDRASCB        RETRIEVE ASCB ADDRESS                 00600**6\n         USING ASCB,R7                                                  00601**6\n         AIF   (NOT &TONE4).$SKP10                                TONE4 00602**6\n*                                                                 TONE4 00603**6\n*     THE FOLLOWING WILL CHECK ASCBTSB IF MARKED BY TONE 4.       TONE4 00604**6\n*     IF ITS A TONE ADDRESS SPACE THEN IT WILL GET THE USER PROC  TONE4 00605**6\n*     FROM THE TIOT AND DROP ADDRESS TO ASCB CSCB, LOCATE THE     TONE4 00606**6\n*     THE TONE CREATED ASCB CSCB FOR THIS USER AND ENSURE         TONE4 00607**6\n*     ADDRESSABILITY. W WILLIAMS - APRIL 82 - INTEL CORP          TONE4 00608**6\n*                                                                 TONE4 00609**6\n         CLI   ASCBTSB,X'C0'      IS IT A TONE ADDRESS SPACE      TONE4 00610**6\n         BNE   NOTONE             NO                              TONE4 00611**6\n         $FINDCB TCB=R5           GET CURRENT TCB                 TONE4 00612**6\n         CLI   TCBUSER(R5),C'T'   MARKED BY ATTACH                TONE4 00613**6\n         BNE   NOTONE             NO....                          TONE4 00614**6\n         L     R5,TCBJSTCB(,R5)   GET JOBSTEP TCB                 TONE4 00615**6\n         CLI   TCBUSER(R5),C'T'   MARKED BY ATTACH                TONE4 00616**6\n         BNE   NOTONE             NO....                          TONE4 00617**6\n         ICM   R5,7,TCBUSER+1(R5) GET TCBUSER                     TONE4 00618**6\n         BNZ   ITSTONE            WE GOT SOMETHING....            TONE4 00619**6\n         B     NOTONE             NO ONE HOME...                  TONE4 00620**6\n         SPACE 2                                                  TONE4 00621**6\n         USING ISCCHAIN,R5        ADDRESS CHAINING BLOCK          TONE4 00622**6\nITSTONE  CLC   ISCTSKID,=CL8'TONE'      IS THIS TPCDATA           TONE4 00623**6\n         BNE   NOTONE                   NO....                    TONE4 00624**6\n         CLC   ISCBLKID,=CL8'TPCDATA'   IS THIS BLOCK TPCDATA     TONE4 00625**6\n         BNE   NOTONE                   NO....                    TONE4 00626**6\n         ICM   R5,7,ISCBLOCK      GET TPCDATA ADDRESS             TONE4 00627**6\n         BZ    NOTONE             NO ONE HOME....                 TONE4 00628**6\n         SPACE 1                                                    NTL 00629**6\n         USING TPCDATA,R5         ADDRESS TPCDATA                 TONE4 00630**6\n         L     R8,TPCASCB         GET TONES ASCB FOR OUR TONE SESSTONE4 00631**6\n         MVC   LINEAREA(8),TPCLTERM  OK... GET LINE FROM TONE     TONE4 00632**6\n         B     LINEFIN                                            TONE4 00633**6\n         SPACE 1                                                  TONE4 00634**6\nTCBUSER  EQU   X'0A8',4          TCBUSER FIELD FROM TCB           TONE4 00635**6\nTCBJSTCB EQU   X'07C',4          TCBJSTCB FIELD FROM TCB          TONE4 00636**6\n         SPACE 1                                                  TONE4 00637**6\nNOTONE   DS    0H                                                 TONE4 00638**6\n.$SKP10  ANOP  ,                                                  TONE4 00639**6\n         L     R7,ASCBTSB         GET ADDRESS OF TSB FOR LINE ADDR      00640**6\n         USING TSB,R7             USE THE ADDRESS                       00641**6\n*                                                                   NTL 00642**6\n* JUST FOR CHUCKLES....SEE IT THIS IS BATCH                         NTL 00643**6\n*                                                                   NTL 00644**6\n         LTR   R7,R7              ANY TSB ADDRESS THERE?            NTL 00645**6\n         BNZ   DOSTAX             YES..CONTINUE                     NTL 00646**6\n         MVC   LINEAREA(8),BLANKS NO LINE HERE                      NTL 00647**6\n         B     LINEFIN                                              NTL 00648**6\n         SPACE 1                                                    NTL 00649**6\nDOSTAX   STAX  MF=(E,DEFER)       HOLD ALL CALLS PLEASE....             00650**6\n         LA    R0,1\n         SVC   232\n         MODESET MF=(E,SUPER)                                           00651**6\n         ST    1,OLDKEY                                                 00652**6\n*\n         TM    TSBFLG5,TSBVTAM    SEE IF THIS IS A TSO/VTAM TSB         00653**6\n         BO    ITSVTAM            YES....GO GET TSB EXTENSION           00654**6\nITSTCAM  UNPK  TCAMUCB(5),TSBLINE(3) UNPACK THE TSO LINE ADDRESS        00655**6\n         NC    TCAMUCB,HEXMASK                                          00656**6\n         TR    TCAMUCB,HEXTAB                                           00657**6\n         MVC   LINEAREA(3),=C'UCB'                                      00658**6\n         MVI   TCAMUCB,C'='       FIX IT UP PRETTY                      00659**6\n         MVI   TCAMUCB+4,C' '                                           00660**6\n         B     FINSUPR                                                  00661**6\n         SPACE 1                                                        00662**6\nITSVTAM  L     R8,TSBEXTNT         GET ADDRESS OF TSB EXTENSION         00663**6\n         USING TSBX,R8             ESTABLISH ADDRESSABILITY TO TSBX     00664**6\n         TM    TSBXFLG1,TSBXWREC   SEE IF TERMINAL AWAITING RECON       00665**6\n         BNO   GETSYM              NO.....GO GET SYMBOLIC NAME          00666**6\n         MVC   LINEAREA(8),DISCON  MOVE IN DISCON'D                     00667**6\n         B     FINSUPR             GO MODESET AND RESTORE OLD KEY       00668**6\nGETSYM   MVC   LINEAREA(8),TSBTRMID MOVE IN TERMINAL SYMBOLIC NAME      00669**6\n         MVC   VLOGMODE,TSBXLMOD   SAVE LOGMODE NAME                NTL 00670**6\n         MVC   TTYPE,TSBXTMTP      SAVE TERMINAL TYPE               NTL 00671**6\n*                                                                       00672**6\n         DROP  R8                                                       00673**6\nFINSUPR  DS    0H                                                       00674**6\n         SR    R0,R0                                                    00675**6\n         MODESET MF=(E,PROBLEM)                                         00676**6\n         STAX  MF=(E,RESUME)      OK TO HAVE ATTENTIONS NOW...          00677**6\n*                                                                       00678**6\n         DROP  R7                                                       00679**6\nLINEFIN  LM    R3,R8,SAVEREGS                                           00680**6\n         L     R14,GETLR14          RESTORE RETURN ADDRESS        INTEL 00681**6\n         BR    R14                                                      00682**6\n         EJECT ,                                                        00683**6\n*********************************************************************** 00684**6\n*                                                                       00685**6\n* FORMAT DATE TIME  HEADING FROM SMF30TME/SMF30DTE                      00686**6\n*   R0=TIME IN 100THS OF SECOND SINCE MIDNIGHT                          00687**6\n*   R1=DATE IN 00YYDDDS FORMAT                                          00688**6\n*                                                                       00689**6\n* RETURNS WITH CDAYN(LEN) = DDMONYY (DDD) DAY HH:MM:SS.TH               00690**6\n*                E.G.       07JUL80 (189) MON 13:45:24.56               00691**6\n*                           123456789.123456789.123456789               00692**6\n*                                                                       00693**6\n*********************************************************************** 00694**6\nDATERTN  CLI   JDATE,C'0'   HAVE WE BEEN HERE BEFORE                    00695**6\n         BHR   R14           ALREADY DONE THIS STUFF...KISS OFF         00696**6\n         STM   R14,R3,SAVEREGS                                          00697**6\n         MVC   MONMSK(MVCLEN),XMONMSK  INIT DATE/TIME WORK AREA         00698**6\n         TIME  BIN ,                                                    00699**6\n         ST    R1,DATE                 SAVE DATE FOR LATER              00700**6\n         CVD   R0,WRKD                GET TIME IN DEC 100TH/SEC         00701**6\n         DP    WRKD(8),DEC6000(3) /6000 : REM IS SS.TH                  00702**6\n         DP    WRKD(5),DEC60(2)       /60   : REM IS MM                 00703**6\n         MVC   EDITWORK(L'HHMASK),HHMASK   SETUP MULT EDIT MASK         00704**6\n         ED    EDITWORK(L'HHMASK),WRKD EDIT HH,MM,SS                    00705**6\nFINTIME  MVC   CHH(2),EDITWORK+4      MOVE IN HOURS                     00706**6\n         MVC   CMM(2),EDITWORK+8      MOVE IN MM                        00707**6\n         MVC   CSS(5),EDITWORK+12     MOVE IN SS.TH                     00708**6\n*                                                                       00709**6\n***FORMAT THE DATE INTO THE OUTPUT MSG                                  00710**6\n*                                                                       00711**6\n         MVC   WORKWORD(4),DATE        MOVE DATE TO WORK AREA.          00712**6\n         MVO   WORKWORD+1(3),WORKWORD(2)   MAKE 00YYDDDS INTO 00000YYS. 00713**6\n         UNPK  CYR(2),WORKWORD+2(2)    FORMAT YEAR.                     00714**6\n         XC    WRKD,WRKD                                                00715**6\n         MVC   WRKD+4(4),WORKWORD      CNVT YEAR TO BIN                 00716**6\n         CVB   R0,WRKD                                                  00717**6\n         ST    R0,BINYEAR              AND SAVE                         00718**6\n         TM    BINYEAR+3,X'03'         LEAP YEAR?                       00719**6\n         BNZ   MON1                    NO.                              00720**6\n         MVI   MONMSK+10,29            YES, CORRECT                     00721**6\nMON1     XC    WRKD,WRKD               CNVT DAYS TO BIN                 00722**6\n         MVC   WRKD+6(2),DATE+2                                         00723**6\n         CVB   R3,WRKD                                                  00724**6\n         ST    R3,BINDAYS              SAVE FOR LATER                   00725**6\n         XR    R1,R1                                                    00726**6\n         LA    R15,11                                                   00727**6\nMON2     IC    R1,MONMSK(R15)          COMPUTE MON & DAY                00728**6\n         SR    R3,R1                                                    00729**6\n         BNP   MONOVR                                                   00730**6\n         BCT   R15,MON2                                                 00731**6\n         B     *+6                                                      00732**6\n         EJECT ,                                                        00733**6\nMONOVR   AR    R3,R1                   CORRECT OVERDRAW                 00734**6\n         CVD   R3,WRKD                 FORMAT DAY                       00735**6\n         UNPK  CDAYN(2),WRKD+6(2)                                       00736**6\n         OI    CDAYN+1,X'F0'           FIX UP SIGN                      00737**6\n         MH    R15,=H'3'               GET TABLE OFFSET                 00738**6\n         LA    R15,MONTAB(R15)         AND POINT AT MONTH               00739**6\n         MVC   CMON(3),0(R15)          MOVE IT TO THE MSG               00740**6\n***DAY OF WEEK                                                          00741**6\n         L     R15,BINYEAR                                              00742**6\n         SH    R15,=H'69'                                               00743**6\n         BNP   OUTT                    MUST BE GREATER OR BAD           00744**6\n         XR    R14,R14                 CLEAR DAY REG                    00745**6\n         D     R14,=F'4'                                                00746**6\n         MH    R15,=H'5'                                                00747**6\n         AR    R14,R15                                                  00748**6\n         A     R14,BINDAYS                                              00749**6\n         SRDA  R14,32                                                   00750**6\n         D     R14,=F'7'               MODULO 7 FOR WEEK                00751**6\n         MH    R14,=H'09'                                               00752**6\n         LR    R0,R14                  SAVE THIS FOR LATER              00753**6\n         LA    R14,DAYTAB(R14)         POINT AT TODAY                   00754**6\n         MVC   CDAY(09),0(R14)         INSERT IN MSG                    00755**6\n         LR    R14,R0                                                   00756**6\n         LA    R14,DAYTAB1(R14)        POINT AT TODAY-LEFT JUSTIFIED    00757**6\n         MVC   LEFTDAY,0(R14)          INSERT IN MSG                    00758**6\n***                                                                     00759**6\nMOVEJD   MVC   JDATE-1(7),=X'4020204B202020'                            00760**6\n         ED    JDATE-1(7),DATE+1                                        00761**6\n         MVI   JDATE-1,C'('          RESTORE NICE FORMAT....            00762**6\n         MVC   CJDAY(3),JDATE+3         MOVE DAY TO MESSAGE             00763**6\n*                                                                       00764**6\n*                                                                       00765**6\nDATEFIND LM    R14,R3,SAVEREGS                                          00766**6\n         BR    R14                     RETURN TO MAINLINE               00767**6\n*                                                                       00768**6\nOUTT     MVC   CDAY(9),=CL9'(UNKNOWN)'                                  00769**6\n         B     MOVEJD                                                   00770**6\n         EJECT ,                                                        00771**6\n*...................................................................NTL 00772**6\n*                                                                   NTL 00773**6\n* FITINUM SUBROUTINE - CONVERT BIN NUMBER TO NICE FORMAT            NTL 00774**6\n*                                                                   NTL 00775**6\n* ENTER WITH <R1>  = NUMBER IN BINARY                               NTL 00776**6\n*            BAL   R14,FITINUM                                      NTL 00777**6\n*                                                                   NTL 00778**6\n*                                                                   NTL 00779**6\n*       USES R1,R14,R15                                             NTL 00780**6\n*.................................................................. NTL 00781**6\nFITINUM  CVD   R1,WRKD        CONVERT TO PACKED DECIMAL             NTL 00782**6\nFITINUM1 MVC   EDITWORK(L'NORMAL),NORMAL INITIALIZE THE EDIT FORMAT NTL 00783**6\n         MVC   NUMBER,BLANKS  CLEAR OUT NUMBER                      NTL 00784**6\n         LA    R1,EDITWORK+SIGNORM IN CASE OF ZEROES                NTL 00785**6\n         EDMK  EDITWORK(L'NORMAL),WRKD+2 CONVERT TO EBCDIC          NTL 00786**6\n         ST    R14,FITNR14     SAVE RETURN ADDRESS                INTEL 00787**6\n         LA    R14,EDITWORK+L'NORMAL-1 A(END OF CONVERTED NUMBER)   NTL 00788**6\n         SLR   R14,R1         LENGTH OF THE CONVERTED NUMBER - 1    NTL 00789**6\n         EX    R14,MVNUMBER   PUT THE NUMBER IN THE MSG             NTL 00790**6\n         LA    R15,1(R14,R15) A(NEXT SPOT IN MSG)                   NTL 00791**6\n         L     R14,FITNR14    RESTORE RETURN ADDRESS              INTEL 00792**6\n         BR    R14            RETURN TO OUR CALLER                  NTL 00793**6\n         SPACE 3                                                    NTL 00794**6\nMVNUMBER MVC   NUMBER(0),0(R1) MOVE NUMBER TO 'NUMBER' AREA         NTL 00795**6\n         SPACE 2                                                    NTL 00796**6\nNORMAL   DC    X'402020202020202020202020' EDIT MASK                NTL 00797**6\nSIGNORM  EQU   11             OFFSET TO LAST DIGIT                  NTL 00798**6\n         EJECT ,                                                        00799**6\n*********************************************************************** 00800**6\n*                                                                       00801**6\n*       CONSTANTS FOR DATE ROUTINE USAGE                                00802**6\n*                                                                       00803**6\n*********************************************************************** 00804**6\n         SPACE ,                                                        00805**6\nHHMASK   DC    X'40202021202022212020222120204B2020'                    00806**6\nDEC60    DC    X'060C'                                                  00807**6\nDEC6000  DC    X'06000C'                                                00808**6\nDEC50    DC    X'050C'                                                  00809**6\n*********************************************************************** 00810**6\n* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES            00811**6\n*                                                                       00812**6\nXMONMSK  DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)        )        00813**6\n         DC    CL1' '                                          )        00814**6\n*                                                              )        00815**6\n*                 YY.DDD XXXXXXXXX, MON. DD, 19NN    L  T      )        00816**6\n*                0123456789.123456789.123456789.12   E  O      )        00817**6\n         DC    C' YY.DDD XXXXXXXXX, MON. DD, 19NN)'  A  G      )        00818**6\n         DC    CL3' ',C'  '                          E  E      )        00819**6\n         DC    CL2' ',C':'                           V  T      )        00820**6\n         DC    CL2' ',C':'                           E  H      )        00821**6\n         DC    CL5'SS.TH',C'  '                         E      )        00822**6\n*                                                       R      )        00823**6\nMVCLEN   EQU   *-XMONMSK                                                00824**6\n*                                                                       00825**6\n*********************************************************************** 00826**6\nDAYTAB   DC    CL09'  TUESDAY'                                          00827**6\n         DC    CL09'WEDNESDAY'                                          00828**6\n         DC    CL09' THURSDAY'                                          00829**6\n         DC    CL09'   FRIDAY'                                          00830**6\n         DC    CL09' SATURDAY'                                          00831**6\n         DC    CL09'   SUNDAY'                                          00832**6\n         DC    CL09'   MONDAY'                                          00833**6\nDAYTAB1  DC    CL09'TUESDAY'                                            00834**6\n         DC    CL09'WEDNESDAY'                                          00835**6\n         DC    CL09'THURSDAY'                                           00836**6\n         DC    CL09'FRIDAY'                                             00837**6\n         DC    CL09'SATURDAY'                                           00838**6\n         DC    CL09'SUNDAY'                                             00839**6\n         DC    CL09'MONDAY'                                             00840**6\nMONTAB   DC    C'DECNOVOCTSEPAUGJULJUNMAYAPRMARFEBJAN'                  00841**6\n         SPACE                                                          00842**6\n* OTHER  CONSTANTS                                                    * 00843**6\n         SPACE                                                          00844**6\nHEXMASK  DC    4X'0F'                                                   00845**6\nHEXTAB   DC    C'0123456789ABCDEF'                                      00846**6\nSTARTING DC    CL8'STARTING'                                            00847**6\nDISCON   DC    CL8'DISCON''D'                                           00848**6\nBLANKS   DC    CL24' '       A BLANK LINE......                     NTL 00849**6\n         PRINT OFF                                                      00850**6\n         DS    0F                                                       00851**6\nCODE     DC    X'ABCFEDAD'                                              00852**6\n         PRINT ON                                                       00853**6\n         EJECT                                                          00854**6\n*.....................................................................* 00855**6\n*        LIST FORMS OF MACROS                                         * 00856**6\n*.....................................................................* 00857**6\n         SPACE 2                                                        00858**6\n         DS    0F                                                       00859**6\nDEFER    STAX  DEFER=YES,MF=L            HOLD DEM ATTENTIONS...         00860**6\n         SPACE 2                                                        00861**6\nRESUME   STAX  DEFER=NO,MF=L             RESUME ATTENTION HANDLING..    00862**6\n         SPACE 2                                                        00863**6\nGTTERME  GTTERM ATTRIB=*-*,PRMSZE=*-*,ALTSZE=*-*,MF=L               NTL 00864**6\n         SPACE 2                                                    NTL 00865**6\nSUPER    MODESET KEY=ZERO,MODE=SUP,MF=L                             NTL 00866**6\n         SPACE 2                                                    NTL 00867**6\nPROBLEM  MODESET KEY=NZERO,MODE=PROB,MF=L                           NTL 00868**6\n         EJECT                                                          00869**6\n*.....................................................................* 00870**6\n*        LITERAL POOL                                                 * 00871**6\n*.....................................................................* 00872**6\n         SPACE                                                          00873**6\n         LTORG                                                          00874**6\n         EJECT                                                          00875**6\n*.....................................................................* 00876**6\n*        DYNAMIC STORAGE AREA -- GETMAINED                            * 00877**6\n*.....................................................................* 00878**6\n         SPACE                                                          00879**6\nWORKAREA DSECT                                                          00880**6\nSAVEAREA DS    18F                                                      00881**6\nSAVEREGS DS    16F                                                      00882**6\nRETCODE  DS    F                                                        00883**6\nSETVR14  DS    F        RETURN REGISTER FOR SETVAR                INTEL 00884**6\nGETLR14  DS    F        RETURN REGISTER FOR GETLINE#              INTEL 00885**6\nFITNR14  DS    F        RETURN REGISTER FOR FITINUM               INTEL 00886**6\n*                                                                       00887**6\nANS      DC    F'0'                                                     00888**6\nECB      DC    F'0'                                                     00889**6\nPPLA     DS    7F                                                       00890**6\nECTADDR  EQU   PPLA+4,4                                                 00891**6\n*                                                                       00892**6\nVLOGMODE DS    CL8                                                  NTL 00893**6\nTTYPE    DS    XL2                                                  NTL 00894**6\nLINEAREA DS    CL8,CL2 PLUS PADDING....                                 00895**6\nTCAMUCB  EQU   LINEAREA+3,8                                             00896**6\nADDRASCB DS    F                                                        00897**6\n*                                                                       00898**6\nOLDKEY   DC    F'0'                                                     00899**6\nLEFTDAY  DC    CL9' '                                                   00900**6\nPRMSZE   DS    0H                                                   NTL 00901**6\nPRMROWS  DS    AL1                                                  NTL 00902**6\nPRMCOLS  DS    AL1                                                  NTL 00903**6\nALTSZE   DS    0H                                                   NTL 00904**6\nALTROWS  DS    AL1                                                  NTL 00905**6\nALTCOLS  DS    AL1                                                  NTL 00906**6\nGTTERMRC DS    X                                                    NTL 00907**6\n         DS    X                                                    NTL 00908**6\nCURROWS  DS    AL1                                                  NTL 00909**6\nCURCOLS  DS    AL1                                                  NTL 00910**6\nATTRIB   DS    F                                                    NTL 00911**6\nCLRITL   EQU   *-PRMSZE   FOR XC CLEAR                              NTL 00912**6\nATTRYORN DS    CL4                                                  NTL 00913**6\nWHERAMI  DS    CL8                                                  NTL 00914**6\nGTTERM   GTTERM ATTRIB=*-*,PRMSZE=*-*,ALTSZE=*-*,MF=L               NTL 00915**6\nGTTERML  EQU   *-GTTERM                                             NTL 00916**6\nWRKD     DC    D'0'                                                     00917**6\nNUMBER   DS    CL8            FINAL PRODUCT OF CONVERT              NTL 00918**6\n         DS    CL8            FOR EXTRA STUFF                       NTL 00919**6\nBINYEAR  DC    F'0'                                                     00920**6\nBINDAYS  DC    F'0'                                                     00921**6\nDATE     DC    F'0'                                                     00922**6\nWORKWORD DC    2F'0'                                                    00923**6\nEDITWORK DC    12H'0'                                                   00924**6\n*********************************************************************** 00925**6\n* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES            00926**6\n*                                                                       00927**6\nMONMSK   DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)        )        00928**6\n         DC    CL1' '                                          )        00929**6\n*                                                              )        00930**6\n*                 YY.DDD XXXXXXXXX, MON. DD, 19NN    L         )        00931**6\n*                0123456789.123456789.123456789.12   E         )        00932**6\nCDATMSG  DC    C' YY.DDD XXXXXXXXX, MON. DD, 19NN)'  A         )        00933**6\nJDATE    EQU   CDATMSG+01,6                          V         )        00934**6\nCDAY     EQU   CDATMSG+08,9                          E         )        00935**6\nCMON     EQU   CDATMSG+19,3                                    )        00936**6\nCDAYN    EQU   CDATMSG+24,2                          T         )        00937**6\nCYR      EQU   CDATMSG+30,2                          O         )        00938**6\nCDATE    EQU   CDATMSG+19,13                                            00939**6\n*                                                    G         )        00940**6\nCJDAY    DC    CL3' ',C') '                          E         )        00941**6\nCHH      DC    CL2' ',C':'                           T         )        00942**6\nCMM      DC    CL2' ',C':'                           H         )        00943**6\nCSS      DC    CL5'SS.TH',C' )'                      E         )        00944**6\n*                                                    R         )        00945**6\n*********************************************************************** 00946**6\nLEN      EQU   *-CDATMSG                                                00947**6\nWORKLEN  EQU   *-WORKAREA                                               00948**6\n         SPACE                                                          00949**6\nGETINFO  CSECT                                                          00950**6\n         EJECT                                                          00951**6\n*.....................................................................* 00952**6\n*        PARSE PARAMETER LIST - KEYWORDS                              * 00953**6\n*.....................................................................* 00954**6\n         SPACE                                                          00955**6\n*                                                                       00956**6\n         PRINT     NOGEN                                                00957**6\nPCL      IKJPARM                                                        00958**6\nPGMRNAME IKJKEYWD                                                       00959**6\n         IKJNAME   'PGMRNAME',SUBFLD=PGMFLD                             00960**6\nBINNUMB  IKJKEYWD                                                       00961**6\n         IKJNAME   'BIN',SUBFLD=BINFLD                                  00962**6\nPHONE    IKJKEYWD                                                       00963**6\n         IKJNAME   'PHONE',SUBFLD=PHONFLD                               00964**6\nDEST     IKJKEYWD                                                       00965**6\n         IKJNAME   'DEST',SUBFLD=DESTFLD                                00966**6\nJOBCLASS IKJKEYWD                                                       00967**6\n         IKJNAME   'JOBCLASS',SUBFLD=JOBCFLD                            00968**6\nMSGCLASS IKJKEYWD                                                       00969**6\n         IKJNAME   'MSGCLASS',SUBFLD=MSGCFLD                            00970**6\nSYSOUT   IKJKEYWD                                                       00971**6\n         IKJNAME   'SYSOUT',SUBFLD=SYSOFLD                              00972**6\nPROJECT  IKJKEYWD                                                       00973**6\n         IKJNAME   'PROJECT',SUBFLD=PROJFLD                             00974**6\nSRNUM    IKJKEYWD                                                       00975**6\n         IKJNAME   'SRNUM',SUBFLD=SRNUFLD                               00976**6\nJOBNUMB  IKJKEYWD                                                       00977**6\n         IKJNAME   'JOBNUMB',SUBFLD=JOBNFLD                             00978**6\nLINE     IKJKEYWD                                                       00979**6\n         IKJNAME   'LINE',SUBFLD=LINEFLD                                00980**6\nDAY      IKJKEYWD                                                       00981**6\n         IKJNAME   'DAY',SUBFLD=DAYXFLD                                 00982**6\nJDATEV   IKJKEYWD                                                       00983**6\n         IKJNAME   'JDATE',SUBFLD=JDATFLD                               00984**6\nGDATEV   IKJKEYWD                                                       00985**6\n         IKJNAME   'DATE',SUBFLD=DATEFLD                                00986**6\nNOCOMPR  IKJKEYWD  ,                                                    00987**6\n         IKJNAME   'NOCOMPR'                                            00988**6\n         EJECT                                                          00989**6\nROWS     IKJKEYWD                                                       00990**6\n         IKJNAME   'ROWS',SUBFLD=ROWSFLD                                00991**6\nCOLS     IKJKEYWD                                                       00992**6\n         IKJNAME   'COLS',SUBFLD=COLSFLD                                00993**6\nPROWS    IKJKEYWD                                                       00994**6\n         IKJNAME   'PROWS',SUBFLD=PROWSFLD                              00995**6\nPCOLS    IKJKEYWD                                                       00996**6\n         IKJNAME   'PCOLS',SUBFLD=PCOLSFLD                              00997**6\nAROWS    IKJKEYWD                                                       00998**6\n         IKJNAME   'AROWS',SUBFLD=AROWSFLD                              00999**6\nACOLS    IKJKEYWD                                                       01000**6\n         IKJNAME   'ACOLS',SUBFLD=ACOLSFLD                              01001**6\nATTR     IKJKEYWD                                                       01002**6\n         IKJNAME   'ATTR',SUBFLD=ATTRFLD                                01003**6\nLOGMODE  IKJKEYWD                                                       01004**6\n         IKJNAME   'LOGMODE',SUBFLD=LMODFLD                             01005**6\nTERMTYPE IKJKEYWD                                                       01006**6\n         IKJNAME   'TERMTYPE',SUBFLD=TTYPFLD                            01007**6\nENVIRON  IKJKEYWD                                                       01008**6\n         IKJNAME   'ENVIRON',SUBFLD=ENVFLD                              01009**6\n         EJECT                                                          01010**6\n*.....................................................................* 01011**6\n*        PARSE PARAMETER LIST - SUBFIELDS                             * 01012**6\n*.....................................................................* 01013**6\n         SPACE                                                          01014**6\nPGMFLD   IKJSUBF                                                        01015**6\nPGMRDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01016**6\nBINFLD   IKJSUBF                                                        01017**6\nBINDD    IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01018**6\nPHONFLD  IKJSUBF                                                        01019**6\nPHONDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01020**6\nDESTFLD  IKJSUBF                                                        01021**6\nDESTDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01022**6\nJOBCFLD  IKJSUBF                                                        01023**6\nJOBCDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01024**6\nMSGCFLD  IKJSUBF                                                        01025**6\nMSGCDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01026**6\nSYSOFLD  IKJSUBF                                                        01027**6\nSYSODD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01028**6\nPROJFLD  IKJSUBF                                                        01029**6\nPROJDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01030**6\nSRNUFLD  IKJSUBF                                                        01031**6\nSRNUDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01032**6\nJOBNFLD  IKJSUBF                                                        01033**6\nJOBNDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01034**6\nLINEFLD  IKJSUBF                                                        01035**6\nLINEDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01036**6\nDAYXFLD  IKJSUBF                                                        01037**6\nDAYXDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01038**6\nJDATFLD  IKJSUBF                                                        01039**6\nJDATDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01040**6\nDATEFLD  IKJSUBF                                                        01041**6\nDATEDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01042**6\n          EJECT   ,                                                 NTL 01043**6\nROWSFLD  IKJSUBF                                                        01044**6\nROWSDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01045**6\nCOLSFLD  IKJSUBF                                                        01046**6\nCOLSDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01047**6\nPROWSFLD IKJSUBF                                                        01048**6\nPROWSDD  IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01049**6\nPCOLSFLD IKJSUBF                                                        01050**6\nPCOLSDD  IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01051**6\nAROWSFLD IKJSUBF                                                        01052**6\nAROWSDD  IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01053**6\nACOLSFLD IKJSUBF                                                        01054**6\nACOLSDD  IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01055**6\nATTRFLD  IKJSUBF                                                        01056**6\nATTRDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01057**6\nLMODFLD  IKJSUBF                                                        01058**6\nLMODDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01059**6\nTTYPFLD  IKJSUBF                                                        01060**6\nTTYPDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01061**6\nENVFLD   IKJSUBF                                                        01062**6\nENVDD    IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01063**6\n         IKJENDP                                                        01064**6\n         PRINT     GEN                                                  01065**6\n         EJECT                                                          01066**6\n         AIF   (&ACF314).$$SKP9B                                  NTL14\n*.....................................................................* 01067**6\n*        JCT MAPPING MACRO                                            * 01068**6\n*.....................................................................* 01069**6\n         SPACE                                                          01070**6\n         SPACE 2                                                  INTEL 01071**6\n         AIF   (NOT &SP3).$$SKP9                                  NTL14\nTSO051   CSECT   ,                                                INTEL 01073**6\n         $BUFFER   ,                                              INTEL 01074**6\n         #ACFJCTX  ,       ACF2 3.1.3                             INTEL 01075**6\nTSO051   CSECT   ,                                                INTEL 01076**6\n         AGO   .$$SKP9A                                           INTEL 01077**6\n.$$SKP9  ANOP  ,                                                  INTEL 01078**6\n.$$SKP9A ANOP  ,                                                  INTEL 01079**6\n         $JCT  DOC=YES                                                  01080**6\n         SPACE 2                                                        01081**6\n         EJECT                                                          01088**6\n.$$SKP9B ANOP  ,                                                  NTL14\n*.....................................................................* 01089**6\n*       MAPPING MACROS                                                * 01090**6\n*.....................................................................* 01091**6\n         SPACE                                                          01092**6\n         PRINT NOGEN                                              INTEL 01093**6\n         IHAASCB                                                        01094**6\n         IKJTSB   LIST=YES,EXT=YES                                      01095**6\n         AIF   (NOT &TONE4).$SKP99                                TONE4 01096**6\n         TPCDATA  ,                                               TONE4 01097**6\n.$SKP99  ANOP  ,                                                  TONE4 01098**6\n         AIF   (NOT &ACF314).$SK1004                              INTEL 01072**6\n         PRINT NOGEN                                              INTEL 01093**6\n         IHAPSA                                                   INTEL\n         ACFASVT                                                  INTEL\n         ACCVT                                                    INTEL\n         ACUCB                                                    INTEL\n         PRINT     GEN                                            INTEL 01065**6\n         LIDREC                                                   INTEL\n.$SK1004 ANOP  ,                                                  TONE4 01098**6\n*.....................................................................* 01082**6\n*        OVERLAY DEFINITIONS FOR JOB ACCOUNT NUMBER                   * 01083**6\n*.....................................................................* 01084**6\n         SPACE                                                          01085**6\nNTLPROJ  EQU   LIDACCT,4                                                01086**6\nNTLSRNUM EQU   LIDACCT+4,4                                              01087**6\nNTLROOMN EQU   LIDACCT+9,4                                        NTL14\n         END ,                                                          01099**6\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GETINFO$": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00$\\x00$\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BGETI JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T\n//ASMFCL PROC  CLASS=T,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='C7BRIAN.INTEL.PDS',\n//             LOAD='C7BRIAN.VTOC.LOAD',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=20000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.ACFMAC,DISP=SHR\n//         DD  DSN=SYS1.HASPSRC,DISP=SHR\n//         DD  DSN=C7BRIAN.INTEL.PDS,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=C7BRIAN.VTOC.LOAD,DISP=SHR\n//         DD  DSN=SYS1.ACFMOD,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=TSO051\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETINFO#": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x006\\x006\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "SYZYGYB"}, "text": "  SUBJECT:   GETINFO COMMAND PROCESSOR\n\n\n  TSO COMMAND   G E T I N F O                                           00231**6\n                                                                        00232**6\n      PURPOSE: STUFF JUNK FROM THE OS JCT/ACF2 JCT INTO CLIST           00233**6\n               VARIABLES OF YOUR CHOICE.                                00234**6\n                                                                        00235**6\n    SYNTAX - (ALL OPERANDS ARE OPTIONAL)                                00236**6\n                                  LENGTH  DESCRIPTION                   00237**6\n       GETINFO  PGMRNAME(VAR1) /*  20     PROGRAMMER NAME            */ 00238**6\n                BIN(VAR2)      /*   4     BIN NUMBER (SECOND ACNT FLD*/ 00239**6\n                PHONE(VAR3)    /*  12     USER PHONE NUMBER- ACF2    */ 00240**6\n                DEST(VAR4)     /*   8     DEFAULT SYSOUT DEST        */ 00241**6\n                JOBCLASS(VAR5) /*   1     ACF2 DFT-SUBC              */ 00242**6\n                MSGCLASS(VAR6) /*   1     ACF2 DFT-SUBM              */ 00243**6\n                SYSOUT(VAR7)   /*   1     ACF2 DFT-SOUT              */ 00244**6\n                PROJECT(VAR8)  /*   4     FIRST 4 CHARS OF ACNT FIELD*/ 00245**6\n                SRNUM(VAR9)    /*   4     LAST  4 CHARS OF ACNT FIELD*/ 00246**6\n                JOBNUM(VAR10)  /*   8     JES2 JOB NUMBER            */ 00247**6\n                LINE(VAR11)    /*   8     LOGON TERMAINAL NAME       */ 00248**6\n                DAY(VAR12)     /*   9     DAY OF THE WEEK FOR TODAY  */ 00249**6\n                JDATE(VAR13)   /*   6     JULIAN DATE IN YY.DDD FORM */ 00250**6\n                DATE(VAR14)    /*  13     DATE IN 'MON. DD, 19YY'    */ 00251**6\n                ROWS(VAR15)    /*   8     CUR # LINES/SCREEN         */ 00252**6\n                COLS(VAR16)    /*   8     CUR # CHARS/LINE           */ 00253**6\n                PROWS(VAR17)   /*   8     PRIMARY # LINES/SCREEN     */ 00254**6\n                PCOLS(VAR18)   /*   8     PRIMARY # CHARS/LINE       */ 00255**6\n                AROWS(VAR19)   /*   8     ALTERNATE # LINES/SCREEN   */ 00256**6\n                ACOLS(VAR20)   /*   8     ALTERNATE # CHARS/LINE     */ 00257**6\n                ATTR(VAR21)    /*   4    ='YES'-PROGRAM SYMB OK ELSE */ 00258**6\n                               /*        ='NO' -NO PROGRAM SYMB FEAT.*/ 00259**6\n                ENVIRON(VAR22) /*   8    ='BATCH', 'TSO' OR 'WYLBUR' */ 00260**6\n                NOCOMPR        /*  KEYWORD- NO TRIM OF TRAILING BLNKS*/ 00261**6\n                                                                        00262**6\n  EXAMPLE:\n       PROC 0\n       CONTROL NOMSG NOLIST\n       SET &PGMRN(                    )  /* SET SYMBOL TO 20 CHARS */\n       SET &PHON(            )           /* SET SYMBOL TO 12 CHARS */\n       GETINFO PGMRNAME(PGMRN) PHONE(PHON)\n       WRITE MY NAME IS         ===> &PGMRN\n       WRITE MY PHONE NUMBER IS ===> &PHONE\n       EXIT CODE(0)\n\n\n\n   WILL DISPLAY THE FOLLOWING TO THE USER:\n\n   MY NAME IS         ===> BRIAN WESTERMAN\n   MY PHONE NUMBER IS ===> EXT 2093\n\n                          IF YOU HAVE ANY PROBLEMS CONTACT ME.\n                                BRIAN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HERCAUTO": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x05\\x0f\\x01\\x02\\x05\\x0f#W\\x06\\x89\\x06\\x89\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-02-19T00:00:00", "modifydate": "2002-02-19T23:57:00", "lines": 1673, "newlines": 1673, "modlines": 0, "user": "SYZYGYB"}, "text": "*    BW- THIS VERSION IS FOR PRE MVS/SP SYSTEMS ONLY\n*        IT SHOULD ONLY BE USED WITH THE HURCULES TURNKEY SYSTEM\n*        AND IS NOT MEANT TO FUNCTION ON CURRENT SYSTEMS\n*        WHICH ARE RUNNING MVS/SP, MVS/XA, OS/390 OR Z/OS\n*        THE PROGRAM WILL ASSEMBLE, BUT WILL RECEIVE A 0C1\n*        WHEN THE TIMER POPS..\n//SYZYGYBA JOB (PS01),'SYZYGYB',\n//            CLASS=A,MSGCLASS=X,\n//            NOTIFY=SYZYGYB,REGION=8M\n//*-----------------------------------------------*\n//*   LIB: SYZYGY.FILE332.PDS(AUTO)\n//*   DOC: ASSEMBLE AND LINK\n//*-----------------------------------------------*\n//ASSEMB  EXEC ASSEMBLE,PARM.LINK='LIST,XREF,AC=1'\n//ASM.SYSLIB  DD\n//          DD\n//          DD\n//SYSIN    DD  *\n*----------------------------------------------------------------------\n*    BW- MACRO  CODE STARTS ABOUT 400 LINES DOWN\n*    BW- ACTUAL CODE STARTS ABOUT 1015 LINES DOWN\n*    BW- THIS VERSION IS FOR PRE MVS/SP SYSTEMS ONLY\n*        IT SHOULD ONLY BE USED WITH THE HURCULES TURNKEY SYSTEM\n*        AND IS NOT MEANT TO FUNCTION ON CURRENT SYSTEMS\n*        WHICH ARE RUNNING MVS/SP, MVS/XA, OS/390 OR Z/OS\n*        THE PROGRAM WILL ASSEMBLE, BUT WILL RECEIVE A 0C1\n*        WHEN THE TIMER POPS..\n*----------------------------------------------------------------------\n*        THIS ROUTINE PROVIDES FOR JOB SUBMISSION AND AUTOMATIC\n*        COMMANDS IN AN MVS/JES2 ENVIRONMENT.  IT'S FUNCTIONS\n*        ARE THREE-FOLD AND ARE EXPLAINED BELOW.\n*\n*\n*        1=RDR  ALLOW AN EASY WAY OF PRESENTING JOBS TO JES2 VIA AN\n*               OPERATOR MODIFY COMMAND.\n*\n*        2=CMD  ALLOW AN EASY WAY OF PRESENTING MULTIPLE COMMANDS TO\n*               MVS/JES2 VIA AN OPERATOR MODIFY COMMAND.\n*\n*        3=AUTO ALLOW FOR TIME-OF-DAY/DAY-OF-WEEK AUTOMATIC COMMANDS\n*\n*\n*        THE USER MUST PROVIDE A STARTED TASK PROCEDURE IN SYS1.PROCLIB\n*        WHICH IS STARTED AT IPL TIME.  ONCE ACTIVE, IT WILL PROCESS\n*        USER DEFINED COMMANDS BY DAY OF WEEK (USER DEFINED).\n*        ALSO, IT WILL SUPPORT OPERATOR MODIFY COMMANDS (DEMAND)\n*        EITHER SUBMIT JOBS (MEMBERS) TO THE INTERNAL READER OR\n*        EXECUTE COMMANDS (MEMBER LISTS).\n*\n*        FOR THE JOB SUBMISSION FEATURE, ONE OR MORE PARTITIONED\n*        DATASET(S) ARE USED.  FOR THE COMMAND/AUTO-COMMAND\n*        FUNCTIONS, ANOTHER PARTITIONED DATASET IS USED.  EACH\n*        ARE DESCRIBED BELOW (BY DDNAME).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*\n*\n*        DDNAME     USE AND FUNCTION\n*        --------   -------------------------------------------------\n*\n*\n*        INTRDR     REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE JES2 INTERNAL\n*                   READER.\n*\n*        JOB00      REQUIRED IF THE JOB-SUBMISSION FUNCTION IS TO\n*                   BE USED.  IT SHOULD SPECIFY THE NAME OF A\n*                   PARTITIONED DATASET WHICH CONTAINS MEMBERS\n*                   TO BE SUBMITTED TO JES2.\n*\n*        JOB??      OPTIONAL WHEN THE JOB-SUBMISSION FUNCTION IS USED.\n*                   ANY NUMBER OF ADDITIONAL 'JOB??' DDCARDS MAY BE\n*                   USED TO ALLOW FOR SPECIALIZED FUNCTION (WITH\n*                   DUPLICATE MEMBER NAMES).  THIS OPTION IS SIMILAR\n*                   TO THE MULTIPLE 'PROC??' DDCARDS WITHIN THE JES2\n*                   STARTUP PROC.  USE OF THESE OPTIONAL LIBRARIES\n*                   IS CONTROLED BY THE OPERATOR (VIA THE 'D=??'\n*                   KEYWORD, AS DETAILED BELOW).\n*\n*        COMMANDS   THIS DD STATEMENT IS REQUIRED FOR EITHER THE\n*                   OPERATOR COMMAND-LIST OR THE AUTO-COMMAND\n*                   FUNCTION.  IT SHOULD CONTAIN MEMBERS (LISTS\n*                   OF COMMANDS) IN THE FORMAT DESCRIBED UNDER THE\n*                   HEADING 'COMMAND RECORD SYNTAX' BELOW.\n*\n*\n*        THE FOLLOWING IS AN EXAMPLE OF THE TYPE OF PROC TO\n*        BE ADDED TO YOUR SYS1.PROCLIB.  NOTE THAT THE 'JOB00'\n*        DDNAME IS REQUIRED TO USE THE JOB SUBMISSION FUNCTION\n*        WHILE 'JOB01' AND 'JOB02' ARE OPTIONAL (USED IN THIS\n*        CASE AS REMOTE JOB CONTROL LIBRARIES).\n*\n*        //AUTO     EXEC PGM=AUTO,TIME=1440,DPRTY=(7,9)\n*        //STEPLIB  DD DISP=SHR,DSN=USER.LIBRARY    <---- AUTHORIZED\n*        //INTRDR   DD SYSOUT=(A,INTRDR)\n*        //COMMANDS DD DISP=SHR,DSN=SYS1.COMMANDS\n*        //JOB00    DD DISP=SHR,DSN=RMT0.JCL.LIB\n*        //JOB01    DD DISP=SHR,DSN=RMT1.JCL.LIB\n*        //JOB02    DD DISP=SHR,DSN=RMT2.JCL.LIB\n*\n*        USE OF THE OPTIONAL 'JOB??' DDNAMES IS SPECIFIED BY THE\n*        OPERATOR USING THE 'D=' OPERAND (DETAILED BELOW).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF NORMAL OPERATOR COMMANDS\n*        JOB SUBMISSION USE:\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        START     S AUTO.A     NORMAL OPERATOR START-UP.  THE FIRST\n*                               AUTOMATIC COMMAND TO BE PROCESSED\n*                               WILL BE THE MEMBER WITH A NAME THAT\n*                               SPECIFIED A TIME GREATER THAN CURRENT.\n*                               HOWEVER, DEMAND COMMAND EXECUTION\n*                               AS WELL AS JOB SUBMISSION IS AVAILABLE\n*                               IMMEDIATELY.\n*\n*        IPL       S AUTO.A,PARM=IPLMEM\n*                               SAME AS ABOVE, EXCEPT THAT THE COMMAND\n*                               MEMBER NAMED IN THE PARM FIELD WILL BE\n*                               EXECUTED BEFORE ANY OTHER REQUESTS\n*                               (AUTOMATIC OR OPERATOR REQUESTED\n*                               COMMAND).  THIS PROVIDES AN ALTERNATIVE\n*                               TO THE 'SYS1.PARMLIB(COMMND??)' OPTION\n*                               PROVIDED BY MVS.  IT ALSO PROVIDES FOR\n*                               ANY TYPE OF COMMAND (JES2 COMMANDS AS\n*                               WELL AS MVS COMMANDS).\n*\n*        SUBMIT    F A,MEMBER1  SUBMIT 'MEMBER1' TO THE JES2 INTERNAL\n*                               READER.  SINCE THE 'D=??' OPTION WAS\n*                               NOT USED, THE MEMBER WILL BE READ FROM\n*                               THE 'JOB00' DD (WHICH WILL REMAIN OPEN\n*                               OPEN UNTIL SOMETHING OTHER UNTIL 'D=??'\n*                               IS SPECIFIED AND IS NOT THE SAME AS THE\n*                               ONE USED PREVIOUSLY).\n*\n*        SUBMIT    F A,MEMBER1,MEMBER2,....,MEMBERN\n*                               SUBMIT MULTIPLE MEMBERS TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=??' WAS NOT\n*                               SPECIFIED, THE 'JOB00' IS AGAIN USED.\n*\n*        SUBMIT    F A,MEMBER1,D=01\n*                               SUBMIT A MEMBER (JOB) TO THE JES2\n*                               INTERNAL READER.  SINCE 'D=01' WAS\n*                               SPECIFIED, THE 'JOB00' FILE IS CLOSED\n*                               AND THE 'JOB01' FILE IS OPENED TO\n*                               READ THE MEMBER.  THIS FILE WILL\n*                               REMAIN OPEN UNTIL THE 'D=??' IS\n*                               CHANGED (FROM 'D=01') OR IS NOT\n*                               SPECIFIED ('D=00' IS THE DEFAULT).\n*\n*        SUBMIT    F A,MEMBER1,MEMBER02,.....,MEMBERN,D=01\n*                               SAME AS THE ABOVE, HOWEVER, MULTIPLE\n*                               MEMBERS WILL BE READ FROM THE 'JOB01'\n*                               FILE AND SUBMITTED.  NOTE THAT THE\n*                               'D=??' KEYWORD MUST BE SPECIFIED AS\n*                               THE LAST OPTION.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE FOLLOWING ARE EXAMPLES OF OPERATOR COMMANDS TO SCHEDULE\n*        COMMAND LISTS.\n*\n*        FUNCTION  COMMAND      OPERATION\n*        --------  ------------ --------------------------------------\n*\n*        COMMAND   F A,-MEMBER1 CAUSE A LIST OF COMMANDS TO BE EXECUTED\n*                               BY MVS (OR JES2).  NOTE THAT THE DASH\n*                               (HYPHEN) AS A PREFIX TO THE MEMBER\n*                               NAME IDENTIFIES THE REQUEST AS A\n*                               COMMAND REQUEST (DEMAND).  THE NAMED\n*                               MEMBER WILL BE READ FROM THE FILE\n*                               IDENTIFIED BY THE DD 'COMMANDS'.  EACH\n*                               COMMAND READ WILL BE EXECUTED IF RE-\n*                               QUESTED FOR THE CURRENT DAY (THE SYNTAX\n*                               SYNTAX OF THE 'COMMANDS' RECORDS ARE\n*                               DEFINED BELOW UNDER 'COMMAND RECORD\n*                               SYNTAX').\n*\n*        COMMAND   F A,-MEMBER1,MEMBER2,.....,MEMBERN\n*                               CAUSE A LIST OF MEMBERS TO BE PROCESSED\n*                               BY MVS (OR JES2).  EACH MEMBER MAY\n*                               CONTAIN MULTIPLE COMMANDS. AGAIN NOTE\n*                               THAT THE DASH IDENTIFIES THE REQUEST\n*                               AS A DEMAND COMMAND REQUEST.\n*\n*        SHUTDOWN  P A          TO TERMINATE THIS ROUTINE, SIMPLY\n*                               ENTER AN OPERATOR STOP COMMAND.\n*\n*        SHUTDOWN  F A,-SHUTDOWN\n*                               TO ALLOW A LIST OF 'SHUTDOWN' COMMANDS\n*                               TO BE EXECUTED PRIOR TO STOPPING THIS\n*                               ROUTINE (SUCH AS $PI, I SMF, P RMF ETC)\n*                               THE 'P A' COMMAND MAY BE ADDED TO THE\n*                               END OF THE SHUTDOWN MEMBER.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THE AUTOMATIC COMMAND FUNCTION IS NOT CONTROLLED BY THE\n*        OPERATOR.  INSTEAD, IT OPERATES ON A 1440 MINUTE CYCLE\n*        (60 MINUTES/HOUR AND 24 HOURS/DAY) WITHIN DAY-OF-WEEK\n*        AND MONTH-OF-YEAR CYCLES.  THIS MEANS THAT COMMANDS MAY\n*        BE SCHEDULED AT A SPECIFIED TIME OF DAY ON ANY (OR ALL)\n*        DAY(S) OF THE WEEK OR ANY DAY OF THE MONTH.\n*\n*        COMMANDS TO BE EXECUTED ARE CONATAINED IN MEMBERS THAT\n*        RESIDE IN THE 'COMMANDS' LIBRARY.  EACH MEMBER TO BE\n*        AUTOMATICALLY PROCESSED IS NAMED AS FOLLOWS.\n*\n*            @0100   THIS LIST OF COMMANDS IS TO BE PROCESSED AT\n*                    1:00 IN THE MORNING.\n*            @1423   THIS MEMBER WILL BE PROCESSED AT 2:23 PM.\n*\n*            @0000   THIS MEMBER WILL BE PROCESSED AT MIDNIGHT.\n*\n*        NOTE THAT THE MEMBER NAMES TO BE PROCESSED AUTOMATICALLY\n*        MUST BE PREFIXED WITH THE 'AT SIGN' (@), HOWEVER, THESE\n*        MEMBERS ARE NOT RESTRICTED FROM 'DEMAND' USE.\n*\n*\n*        COMMAND RECORD SYNTAX\n*\n*        EACH MEMBER CONTAINED IN THE 'COMMANDS' LIBRARY MUST FOLLOW\n*        THE SYNTAX DEFINED BELOW.  THIS IS TRUE FOR BOTH DEMAND\n*        COMMAND LISTS AS WELL AS AUTOMATIC COMMAND LISTS.\n*\n*        AN ASTERISK (*) IN COLUMN 1 DENOTES A COMMENT RECORD AND IS\n*        IGNORED BY THE PROCESSOR.  COMMANDS (RECORDS) ARE PROCESSED\n*        ONLY ON SPECIFIED DAYS OF THE WEEK AS INDICATED IN THE DAYS\n*        FIELD.  DAYS OF THE WEEK MUST BE IN THE ORDER SHOWN.\n*\n*        A NON-BLANK IN THE 'DAY-OF-THE-WEEK' FIELD REQUESTS PROCESSING\n*        ON THAT DAY.\n*\n*        FORMAT:\n*\n*        1    ===>BLANK            (AN ASTERISK SIGNIFIES A COMMENT)\n*        2-6  ===>MM/DD            (MONTH/DAY SPEC - SLASH REQ'D!)\n*        15   ===>(BLANK)\n*        8-14 ===>MTWTFSS          (DAY-OF-WEEK SPECIFICATION)\n*        15   ===>(BLANK)\n*        16   ===>COMMAND DATA     (THROUGH COLUMN 71)\n*        72   ===>CONTINUATION     (ONLY ONE CONTINUATION ALLOWED)\n*\n*        AN ASTERISK IN EITHER THE MM FIELD OR THE DD FIELD ALLOWS\n*        EXECUTION FOR ALL MONTHS OR ALL DAYS.  ASTERISKS IN BOTH\n*        FIELDS EFFECTIVELY NULLIFIES DAY-WITHIN-MONTH CRITERIA\n*        (IF '**/**' IS SPECIFIED, THE COMMAND IS SUBJECT ONLY TO\n*        DAY OF WEEK CRITERIA WHICH IS THE SAME AS ALL BLANKS IN\n*        THE MM/DD FIELD).  IF THE MM/DD FIELD IS NON-BLANK,\n*        THE REQUEST WILL BE PROCESSED ON THE MONTH/DAY SPECIFIED\n*        BUT IS ALSO SUBJECT TO DAY OF WEEK SPECIFICATIONS.\n*        IF A REQUEST IS TO BE PROCESSED ON THE SAME DAY OF EVERY\n*        MONTH, SPECIFY THE MONTH AS ASTERISKS ('**/05').  IF A\n*        REQUEST IS TO BE PROCESSED EVERY DAY OF A GIVEN MONTH,\n*        SPECIFY THE DAY AS ASTERISKS ('09/**').\n*\n*        CONTINUATION IS SUPPORTED ONLY IF THE SUBSEQUENT RECORD\n*        HAS 'ALL' BLANKS IN COLUMNS 1 THROUGH 15 AND CONTINUED\n*        DATA BEGINS IN COLUMN 16.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF AUTOMATIC COMMANDS:\n*\n*   COLUMNS:  1      8       16                                   71\n*             ..     .       .                                    .\n*   COL-1---->*MM/DD MTWTFSS COMMAND------------------------------>72\n*\n* MEMBER=@0300\n*   COL-1---->       XXXXXX  F A,BACKUP1,BACKUP2,BACKUP3\n*   COL-1---->             X F A,BACKUPWK\n*   COL-1----> **/01 ******* F A,MONTH01\n*   COL-1----> **/01      S  F A,FIRSTSAT  SCHEDULE JOB ONLY ON THE\n*   COL-1----> **/02      S  F A,FIRSTSAT  1ST SATURDAY OF THE MONTH\n*   COL-1----> **/03      S  F A,FIRSTSAT            \"\n*   COL-1----> **/04      S  F A,FIRSTSAT            \"\n*   COL-1----> **/05      S  F A,FIRSTSAT            \"\n*   COL-1----> **/06      S  F A,FIRSTSAT            \"\n*   COL-1----> **/07      S  F A,FIRSTSAT            \"\n* MEMBER=@0755\n*   COL-1---->       MTWTF   START TCAM\n* MEMBER=@0800\n*   COL-1---->       MTWTF   F TCAM,TS=START\n*   COL-1---->       MTWTF   $HQ,P\n*   COL-1---->       MTWTF   $AQ,T\n* MEMBER=@0900\n*   COL-1---->       -       SEND 'TODAY IS BLUE MONDAY...KEEP SMILING*\n*   COL-1---->               '\n*   COL-1---->        -      SEND 'TODAY IS TUESDAY...FOUR MORE TO GO'\n*   COL-1---->         -     SEND 'TODAY IS WEDNESDAY...YOUR HALF WAY'\n*   COL-1---->          -    SEND 'TODAY IS THURSDAY...HANG IN THERE'\n*   COL-1---->           -   SEND 'THANK GOD IT''S FRIDAY'\n*   COL-1---->            -  SEND 'IT''S SATURDAY... DIDN''T YOU FINIS*\n*   COL-1---->               H?'\n*   COL-1---->             - SEND 'WOW... EVEN SUNDAY YOU WORK!!!!!!'\n* MEMBER=@1645\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN AT FIVE SHARP'\n* MEMBER=@1655\n*   COL-1---->       MTWTF   SE 'TSO WILL BE GOING DOWN IN FIVE MINUTE*\n*   COL-1---->               S'\n* MEMBER=@1659\n*   COL-1---->       MTWTF   SE '**** TSO IS GOING DOWN IN ONE MINUTE X\n*   COL-1---->               ****'\n*   COL-1---->       MTWTF   SE '****   YOU WILL RECEIVE NO WARNING   X\n*   COL-1---->               ****'\n* MEMBER=@1700\n*   COL-1---->       MTWTF   F TCAM,TS=STOP\n*   COL-1---->       MTWTF   $HQ,T\n*   COL-1---->       MTWTF   $AQ,P\n*   COL-1----> 05/17 ******* F A,TESTJOB  SCHEDULE ONLY ON MAY 17\n*   COL-1----> 05/16 *****   F A,TESTWKDY SCHEDULE ONLY ON MAY 16 WD\n*   COL-1----> 05/16      ** F A,TESTWKND SCHEDULE ONLY ON MAY 16 WE\n* MEMBER=@1702\n*   COL-1---->       MTWTF   Z TP\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        EXAMPLES OF OPERATOR 'DEMAND' COMMANDS:\n*\n*   COL-1---->*      MTWTFSS COMMAND--------------------------->72\n*\n* MEMBER=IPL                            (  S AUTO.A,PARM=IPL  )\n*   COL-1---->       XXXXXXX S RMF.RMF\n*   COL-1---->       XXXXXXX S OPSWTR.OPSWTR\n*   COL-1---->       XXXXXXX F A,-VARYCONS,VARYALL,SETJES\n* MEMBER=SETJES                         (  F A,-SETJES )\n*   COL-1---->       XXXXXXX $TPRT1,Q=A\n*   COL-1---->       XXXXXXX $TI9,Z\n*   COL-1---->       XXXXXXX $SI9\n*   COL-1---->       XXXXXXX $SPRT1\n* MEMBER=SHUTDOWN                       (  F A,-SHUTDOWN  )\n*   COL-1---->       XXXXXXX $P\n*   COL-1---->       XXXXXXX $IPRT1\n*   COL-1---->       XXXXXXX $PLNE1\n*   COL-1---->       XXXXXXX $ELNE1\n*   COL-1---->       XXXXXXX P OPSWTR\n*   COL-1---->       XXXXXXX P RMF\n*   COL-1---->       XXXXXXX P A\n* MEMBER=UNLOAD                         (  F A,-UNLOAD  )\n*   COL-1---->       XXXXXXX U 180\n*   COL-1---->       XXXXXXX U 181\n*   COL-1---->       XXXXXXX U 182\n* MEMBER=VARYALL                        (  F A,-VARYALL  )\n*   COL-1---->       XXXXXXX V 180-188,ONLINE\n*   COL-1---->       XXXXXXX V 150-158,OFFLINE\n*   COL-1---->       XXXXXXX V 160-16F,ONLINE\n* MEMBER=VARYCONS                       (  F A,-VARYCONS  )\n*   COL-1---->       XXXXXXX V 120,CONSOLE,ROUT=(1,2,8,9,10,12,13,14,1*\n*   COL-1---->               5)\n*   COL-1---->       XXXXXXX V 121,CONSOLE,ROUT=(3,4,5,6)\n*   COL-1---->       XXXXXXX V 122,CONSOLE,ROUT=(7)\n*   COL-1---->       XXXXXXX V O-123,CONSOLE,ROUT=ALL\n* MEMBER=VARYOFF                        (  F A,-VARYOFF  )\n*   COL-1----> 09/**      XX V 150-158,OFFLINE  ONLY FOR SEPT WKEND\n*   COL-1---->       XXXXXXX V 160-168,OFFLINE\n*   COL-1---->       XXXXXXX V 170-178,OFFLINE\n*\n*  NOTE THAT THE COMMAND-LIST MEMBER MAY INCLUDE COMMANDS FOR THIS\n*  ROUTINE AS WELL.  THIS MAY OR MAY NOT BE DESIRABLE SINCE IF NOT\n*  CAUTIOUS, A LOOP COULD RESULT.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        THIS ROUTINE IS 'NOT' RE-ENTRANT AND MUST BE LINKED AS\n*        'AUTHORIZED'.\n*\n*\n*\n*        MODIFIED:\n*\n*        BRIAN WESTERMAN JUNE 1980-96 REPLACED STIMER EXIT ROUTINE\n*                        CALLED ENTRY950 WITH NEW ROUTINE TO FIX\n*                        S102 ABEND UNDER MVS/ESA V5.1+OS/390\n*                        JAN  1998 ALTERED FOR OS/390 R2\n*                        DEC 2001 REMOVED OLD 1988 \"FAST SYSTEM\" CODE\n*                                 EVEN SLOW SYSTEMS ARE NOW TOO FAST\n*                        DEC 2001 CHANGED STIMER FROM 235959000 TO\n*                                 240000000 TO CORRECT MIDNIGHT PROBS\n*                                 ON ANYTHING FASTER THAN A 3081\n*\n*        GERALD URBANEK JANUARY, 1988 WESTERN ATLAS INTERNATIONAL ..\n*        HOUSTON, TEXAS\n*\n*        CORRECTED TIMING PROBLEMS AT MIDNIGHT ON LIGHTLY LOADED\n*        HIGH SPEED PROCESSORS.\n*        (REMOVED DEC 2001, NO LONGER FUNCTIONS CORRECTLY)\n*\n*\n*\n*\n*        REGISTER USAGE\n*\n*        R0   - WORK\n*        R1   - WORK\n*        R2   - WORK\n*        R3   - WORK\n*        R4   - WORK\n*        R5   - WORK\n*        R6   - WORK\n*        R7   - WORK\n*        R8   - UNUSED\n*        R9   - QEDIT ORIGIN BASE\n*        R10  - DCBS\n*        R11  - BASE # 1\n*        R12  - BASE # 2\n*        R13  - SAVE AREA\n*        R14  - BAL\n*        R15  - WORK\n*\n*----------------------------------------------------------------------\n*   BW-MACROS ADED HERE SO THEY DON'T GET LOST\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n*        $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n         MACRO\n&LABEL   $STCK  &NOGEN\n         LCLC   &L\n.**********************************************************************\n.****                                                             *****\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****\n.****                                                             *****\n.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****\n.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****\n.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****\n.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****\n.****    CONSTANTS.                                               *****\n.****                                                             *****\n.****    DAY    DS   X      A BINARY NUMBER (HEX) RELATIVE TO     *****\n.****                       THE DAY OF THE WEEK AS FOLLOWS        *****\n.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,     *****\n.****                       3=THURSDAY, 4=FRIDAY,                 *****\n.****                       5=SATURDAY, 6=SUNDAY                  *****\n.****                                                             *****\n.****    DATE   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE DATE IN MM/DD/YY FORMAT           *****\n.****                                                             *****\n.****    TIME   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE TIME IN HH:MM:SS FORMAT           *****\n.****                                                             *****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****\n.****                                                             *****\n.**********************************************************************\n&L       SETC  '&SYSNDX'\n&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES AFT EPOCH)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,=F'951424'      DIVIDE TO GET REMAINING SECONDS (R5)\n         LR    14,15              COPY TO WORK REG\nS&L.B    SL    14,=F'60'          DECREMENT BY 60 SECONDS\n         BM    S&L.S              LESS THAN SIXTY, CONTINUE\n         SL    15,=F'60'          MORE THAN SIXTY, ADJUST FOR LEAP\n         AL    1,=F'1'            BUMP MINUTES\n         B     S&L.B              CHECK AGAIN\nS&L.S    CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+6(2),26(13)   MOVE THE SECONDS\n         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES\n         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+3(2),26(13)   MOVE THE MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS\n         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME(2),26(13)     MOVE THE HOURS\n         MVI   TIME+2,C':'        ADD COLIN\n         MVI   TIME+5,C':'        ADD COLIN\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY\n         STC   0,DAY              SET RELATIVE DAY OF WEEK\n         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         L     1,16               GET CVT ADDRESS\n         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA\n         ZAP   8(8,13),=P'0'      ZERO WORK AREA\n         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION\n         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LA    15,S&L.T           LOAD ADDR OF TABLE\n         CVB   1,8(13)            CONVERT TO BIN\n         SLL   1,30               SHIFT ALL BUT LAST TWO\n         LTR   1,1                TEST RESIDUAL\n         BNZ   *+8                NOT 0, BRANCH\n         LA    15,S&L.TL          LEAP YEAR\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    DATE+1,C'0'        INSURE NUMERICS\n         OI    DATE+4,C'0'        INSURE NUMERICS\n         OI    DATE+7,C'0'        INSURE NUMERICS\n         MVI   DATE+2,C'/'        ADD SLASH\n         MVI   DATE+5,C'/'        ADD SLASH\n         B     S&L.E              BRANCH AROUND CONSTANTS\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF    (T'&NOGEN NE 'O').NOGEN   NOGEN SPECIFIED, SKIP\nDAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK\nDATE     DC    C'  /  /  '        CURRENT DATE\nTIME     DC    C'  :  :  '        CURRENT TIME\n.NOGEN   ANOP\nS&L.E    DS    0H\n         MEND\n         EJECT\n*----------------------------------------------------------------------\n*\n*----------------------------------------------------------------------\n*          DATA SET SFALLOC    AT LEVEL 006 AS OF 05/17/78\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*               DDDDDDDDD                     AAAAAAAAAA              *\n*              DDDDDDDDDD                   AAAAAAAAAAAA              *\n*             DD       DD                  AA        AA               *\n*            DD        DD                 AA        AA                *\n*           DD        DD                 AA        AA                 *\n*          DD        DD                 AAAAAAAAAAAA                  *\n*         DD        DD                 AAAAAAAAAAAA                   *\n*        DD        DD                 AA        AA                    *\n*       DD        DD                 AA        AA                     *\n*      DD        DD                 AA        AA                      *\n*     DDDDDDDDDDD                  AA        AA                       *\n*    DDDDDDDDDD                   AA        AA                        *\n*                                                                     *\n* 1978                                                                *\n*        USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE        *\n*              PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'UNQSUF'    *\n*              PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST    *\n*              CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.          *\n*              EX. -      PARMLIB   DA  DSN='SYS1.PARMLIB'            *\n*                                   ... ANY OTHER CODE                *\n*                                   LA  R1,PARMLIB                    *\n*                                   SVC 99                            *\n*                                   ... ANY OTHER CODE                *\n*        DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.    THE ONLY    *\n*              PARMETERS THAT WILL BE GENERATED FOR DYNAMIC           *\n*              ALLOCATION ARE THE ONES  THAT ARE SPECIFICALLY CODED.  *\n*              THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO     *\n*              ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE     *\n*              PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF     *\n*              ALLOCATING IT.                                         *\n*                                                                     *\n*        LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.    *\n*              SOME OF THESE ARE :                                    *\n*                      1. DAER    WHICH  POINTS TO THE ERROR CODE     *\n*                                       FROM SVC 99                   *\n*                      2. DAIN    WHICH  POINTS TO THE INFORMATION    *\n*                                       CODE FROM SVC 99              *\n*              ALSO, EACH VALUE SUCH AS THE DSNAME TO ALLOCATE        *\n*              HAS A LABEL ASSOCIATED WITH IT FOR EASY REFERENCE.     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         MACRO\n&NAME    DA    &DSN=,              THE DATASET NAME                    X\n               &DDN=,              DDNAME TO ALLOCATE OR DEALLOCATE    X\n               &MEM=,              MEMBER NAME FOR PDS OR BIAS FOR GDG X\n               &STATUS=,           PRIMARY DISPOSITION                 X\n               &DISP=,             DISPOSITION IF NORMAL EOJ           X\n               &CDISP=,            DISPOSITION IF ABNORMAL EOJ         X\n               &SPACE=,            PRIMARY SPACE REQUIREMENT           X\n               &TYPSP=,            TYPE OF SPACE TO ALLOCATE           X\n               &SECSP=,            SECONDARY SPACE REQUIREMENT         X\n               &VOLSER=,           VOLUME SERIAL #                     X\n               &UNIT=,             UNIT DESIGNATION                    X\n               &SYSOUT=,           CLASS SPECIFICATION FOR SYSOUT      X\n               &FREE=,             DEALLOCATE AT CLOSE                 X\n               &COPIES=,           COPIES OF YOUR SYSOUT               X\n               &LABEL=,            TYPE LABEL - SL,NL,ETC.             X\n               &EXPDT=,            EXPIDATION DATE                     X\n               &RETPD=,            RETENTION PERIOD                    X\n               &DUMMY=,            ALLOCATE A DUMMY DATA SET           X\n               &BLKSIZE=,          BLOCK SIZE                          X\n               &FUNC=,             FOR PUNCH OUTPUT INTERPRETING       X\n               &FORM=,             FORM NAME SPECIFICATION.            X\n               &LRECL=,            LOGICAL RECORD LENGTH               X\n               &DIRSP=,            # OF DIRECTORY BLOCKS OR INDEX SPACEX\n               &RLSE=,             TO REQUEST THE RELEASE OF UNUSED SP X\n               &UNQSUF=,           UNIQUE SUFFIX FOR LABEL NAMES LEN=4 X\n               &DCB=,              SPECIFY A DSNAME TO COPY DCB FROM   X\n               &DEALLOC=\n         LCLA  &A,&K,&A2\n         LCLC  &X,&NM\n&X       SETC  '&UNQSUF'\n&NAME    DS    0F\n         DC    X'80'\n         DC    AL3(DARB&X)\nDARB&X   DS    0F\n         DC    AL1(20)\n         AIF   (T'&DEALLOC EQ 'O').ALLOC\n         DC    AL1(02)             THIS CONTROL BLOCK IS FOR DEALLOCATE\n         AGO   .PAST\n.ALLOC   DC    AL1(01)             THIS CONTROL IS FOR ALLOCATION\n.PAST    DC    AL2(0)\nDAER&X   DC    AL2(0)              ERROR CODE FROM DYNAMIC ALLOCATION\nDAIN&X   DC    AL2(0)              INFORMATION CODE FROM DYNALLOC\n         DC    A(TS&X)             POINTER TO CALL LIST FOR SVC 99\n         DC    XL8'0'              RESERVED\n&A       SETA  1\n         DS    0F                  FULLWORD ALIGNED\nTS&A&X   DC    X'0001'             KEY FOR DDNAME SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&DDN\n         DC    XL2'&K'             LENGTH OF DDNAME SPECIFIED\nDADN&X   DC    C'&DDN'             DDNAME PLUGGED IN HERE\n&A       SETA  &A+1\n         AIF   (T'&DSN EQ 'O').A\n         DS    0F\nTS&A&X   DC    X'0002'             KEY FOR DSNAME SPECIFICATION\n         DC    XL2'1'\n         DC    AL2(44)             LENGTH OF DSNAME MAX IS 44\nDADS&X   DC    CL44'&DSN'          DSNAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.A       AIF   (T'&MEM EQ 'O').B\n         DS    0F\nTS&A&X   DC    X'0003'             KEY FOR MEMBER OR GDG SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&MEM\n         DC    XL2'&K'             LENGTH OF SPECFIED MEMBER NAME\nDAMB&X   DC    C'&MEM'             THE MEMBER NAME IS PLUGGED IN HERE\n&A       SETA  &A+1\n.B       AIF   (T'&STATUS EQ 'O').C\n         DS    0F\nTS&A&X   DC    X'0004'             KEY FOR PRIMARY DISPOSITION OF DDN\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE CODE\n&A       SETA  &A+1\n         AIF   ('&STATUS' EQ 'OLD').B1       OLD = X'01'\n         AIF   ('&STATUS' EQ 'MOD').B2       MOD = X'02'\n         AIF   ('&STATUS' EQ 'NEW').B3       NEW = X'04'\n         AIF   ('&STATUS' EQ 'SHR').B4       SHR = X'08'\n         MNOTE 8,'&STATUS INVALID FOR STATUS'\n         AGO   .C\n.B1      DC    X'1'                CONSTANT FOR DISP=OLD\n         AGO   .C\n.B2      DC    X'2'                CONSTANT FOR DISP=MOD\n         AGO   .C\n.B3      DC    X'4'                CONSTANT FOR DISP=NEW\n         AGO   .C\n.B4      DC    X'8'                CONSTANT FOR DISP=SHR\n         AGO   .C\n.C       AIF   (T'&DISP EQ 'O').D\n         DS    0F\nTS&A&X   DC    X'0005'             KEY FOR NORMAL EOJ SPECIFICATION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS WILL ALWAYS BE A ONE BYTE KEY\n         AIF   ('&DISP' EQ 'UNCATLG').C1     UNCATLG = X'01'\n         AIF   ('&DISP' EQ 'CATLG').C2       CATLG   = X'02'\n         AIF   ('&DISP' EQ 'DELETE').C3      DELETE  = X'04'\n         AIF   ('&DISP' EQ 'KEEP').C4        KEEP    = X'08'\n         MNOTE 8,'&DISP INVALID FOR DISP'    ALL ELSE IS WRONG\n         AGO   .D\n.C1      DC    X'1'                CONSTANT FOR UNCATLG AT NORMAL EOJ\n         AGO   .D\n.C2      DC    X'2'                CONSTANT FOR CATLG  AT NORMAL EOJ\n         AGO   .D\n.C3      DC    X'4'                CONSTANT FOR DELETE AT NORMAL EOJ\n         AGO   .D\n.C4      DC    X'8'                CONSTANT FOR KEEP   AT NORMAL EOJ\n         AGO   .D\n.D       AIF   (T'&CDISP EQ 'O').E\n         DS    0F\nTS&A&X   DC    X'0006'             KEY FOR ABNORMAL EOJ DISPOSITION\n&A       SETA  &A+1\n         DC    XL2'1'\n         DC    XL2'1'              THIS IS ALWAYS A ONE BYTE KEY\n         AIF   ('&CDISP' EQ 'UNCATLG').D1      UNCATLG = X'01'\n         AIF   ('&CDISP' EQ 'CATLG').D2        CATLG   = X'02'\n         AIF   ('&CDISP' EQ 'DELETE').D3       DELETE  = X'04'\n         AIF   ('&CDISP' EQ 'KEEP').D4         KEEP    = X'08'\n         MNOTE 8,'&CDISP INVALID FOR DISP'     ALL ELSE IS WRONG\n         AGO   .E\n.D1      DC    X'1'                CONSTANT FOR UNCATLG IF ABEND\n         AGO   .E\n.D2      DC    X'2'                CONSTANT FOR CATLG  IF ABEND\n         AGO   .E\n.D3      DC    X'4'                CONSTANT FOR DELETE IF ABEND\n         AGO   .E\n.D4      DC    X'08'               CONSTANT FOR KEEP   IF ABEND\n         AGO   .E\n.E       AIF   (T'&TYPSP EQ 'O').I\n         DS    0F\n         AIF   ('&TYPSP' EQ 'TRK').E1  IF TYPE OF SPACE SPECIFICATION\n         AIF   ('&TYPSP' EQ 'CYL').E2  IS NOT TRACKS OR CYLINDERS THEN\nTS&A&X   DC    X'0009'                 IT MUST BE IN BLOCKS\n         DC    XL1'1'\n         DC    XL1'3'\n         DC    AL3(&TYPSP)\n&A       SETA  &A+1\n         AGO   .F\n.E1      ANOP\nTS&A&X   DC    X'0007'             SPACE IS TO BE ALLOCATED IN TRKS\n         DC    XL2'0'\n&A       SETA  &A+1\n         AGO   .F\n.E2      ANOP\nTS&A&X   DC    X'0008'             SPACE IS TO BE ALLOCATED IN CYLS\n         DC    XL2'0'\n&A       SETA  &A+1\n.F       AIF   (T'&SPACE EQ 'O').FO\n         DS    0F\nTS&A&X   DC    X'000A'             KEY TO SPECIFY PRIMARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASP&X   DC    AL3(&SPACE)\n&A       SETA  &A+1\n         AGO   .G\n.FO      MNOTE 8,'PRIMARY SPACE OMITTED'   TYPSP REQUIRES AT LEAST\n         AGO   .I                  THE PRIMARY SPACE SPECIFICATION\n.G       AIF   (T'&SECSP EQ 'O').H\n         DS    0F\nTS&A&X   DC    X'000B'             KEY TO SPECIFY SECONDARY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDASS&X   DC    AL3(&SECSP)\n&A       SETA  &A+1\n.H       AIF   (T'&DIRSP EQ 'O').I\n         DS    0F\nTS&A&X   DC    X'000C'             KEY TO SPECIFY DIRECTORY SPACE\n         DC    XL2'1'\n         DC    XL2'3'              MAXIMUM LENGTH IS THREE\nDADI&X   DC    AL3(&DIRSP)\n&A       SETA  &A+1\n.I       AIF   (T'&VOLSER EQ 'O').J\n         DS    0F\nTS&A&X   DC    X'0010'             KEY TO SPECIFY A PARTICULAR VOLSER\n         DC    XL2'1'\n&K       SETA  K'&VOLSER           PICK UP LENGTH OF NAME SPECIFIED\n         DC    XL2'&K'             AND USE THAT LENGTH\nDAVO&X   DC    C'&VOLSER'          AND NAME\n&A       SETA  &A+1\n.J       AIF   (T'&UNIT EQ 'O').K\n         DS    0F\nTS&A&X   DC    X'0015'             KEY FOR UNIT SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&UNIT             PICK UP LENGTH OF UNIT NAME GIVEN\n         DC    AL2(&K)             THEN USE THAT LENGTH\nDAUN&X   DC    C'&UNIT'            AND NAME\n&A       SETA  &A+1\n.K       AIF   (T'&SYSOUT EQ 'O').L\n         DS    0F\nTS&A&X   DC    X'0018'             KEY FOR SYSOUT CLASS SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&SYSOUT\n         DC    AL2(&K)\nDASY&X   DC    C'&SYSOUT'\n&A       SETA  &A+1\n.L       AIF   (T'&FORM EQ 'O').M\n         DS    0F\nTS&A&X   DC    X'001A'             KEY FOR FORMS ID SPECIFICATION\n         DC    XL2'1'\n&K       SETA  K'&FORM             PICK UP LENGTH OF FORMS ID\n         DC    AL2(&K)             AND USE THAT LENGTH\nDAFM&X   DC    C'&FORM'            AND THAT FORM NUMBER\n&A       SETA  &A+1\n.M       AIF   (T'&FREE EQ 'O').N\n         AIF   ('&FREE' NE 'CLOSE').M2\n         DS    0F\nTS&A&X   DC    X'001C'             KEY TO SPECIFY FREE=CLOSE\nDACL&X   DC    XL2'0'              MUST BE CODED FREE=CLOSE\n&A       SETA  &A+1                ALL ELSE WILL GENERATE MNOTE\n         AGO   .N\n.M2      MNOTE 8,'&FREE INVALID FOR FREE'\n.N       AIF   (T'&COPIES EQ 'O').O\n         DS    0F\nTS&A&X   DC    X'001D'             KEY TO SPECIFY MULTIPLE COPIES\n         DC    XL2'1'              OF OUTPUT.\n         DC    XL2'1'\nDACO&X   DC    AL1(&COPIES)        NUMBER OF COPIES REQUESTED\n&A       SETA  &A+1\n.O       AIF   (T'&LABEL EQ 'O').P\n         DS    0F\nTS&A&X   DC    X'001E'             KEY TO SPECIFY TYPE LABEL\n         DC    XL2'1'\n         DC    XL2'1'              LENGTH OF THIS FIELD IS ALWAYS ONE\n&A       SETA  &A+1\n         AIF   ('&LABEL' EQ 'NL').O1     NL  = X'01'\n         AIF   ('&LABEL' EQ 'SL').O2     SL  = X'02'\n         AIF   ('&LABEL' EQ 'NSL').O3    NSL = X'04'\n         AIF   ('&LABEL' EQ 'SUL').O4    SUL = X'08'\n         AIF   ('&LABEL' EQ 'BLP').O5    BLP = X'10'\n         AIF   ('&LABEL' EQ 'LTM').O6    LTM = X'21'\n         AIF   ('&LABEL' EQ 'AL').O7     AL  = X'40'\n         AIF   ('&LABEL' EQ 'AUL').O8    AUL = X'48'\n         MNOTE 8,'&LABEL INVALID FOR LABEL'\n         AGO   .P\n.O1      DC    X'1'               LABEL = NL\n         AGO   .P\n.O2      DC    X'2'                LABEL = SL\n         AGO   .P\n.O3      DC    X'04'               LABEL = NSL\n         AGO   .P\n.O4      DC    X'08'               LABEL = SUL\n         AGO   .P\n.O5      DC    X'10'               LABEL = BLP\n         AGO   .P\n.O6      DC    X'21'               LABEL = LTM\n         AGO   .P\n.O7      DC    X'40'               LABEL = AL\n         AGO   .P\n.O8      DC    X'48'               LABEL = AUL\n         AGO   .P\n.P       AIF   (T'&EXPDT EQ 'O').Q\n         DS    0F\nTS&A&X   DC    X'0022'             KEY TO SPECIFY EXPIRATION DATE\n         DC    XL2'1'\n         DC    XL2'5'              FIELD IS FIVE NUMERICS\nDAEX&X   DC    CL5'&EXPDT'         AND IS PUT IN HERE\n&A       SETA  &A+1\n.Q       AIF   (T'&RETPD EQ 'O').R\n         DS    0F\nTS&A&X   DC    X'0023'             KEY TO SPECIFY A RETENTION PERIOD\n         DC    XL2'1'\n         DC    XL2'2'              MAXIMUM LENGTH IS TWO\nDARP&X   DC    AL2(&RETPD)         AND IS PLACED HERE.\n&A       SETA  &A+1\n.R       AIF   (T'&DUMMY EQ 'O').S\n         DS    0F\nTS&A&X   DC    X'0024'             KEY TO ALLOCATE A DUMMY DATA SET\n         DC    XL2'0'\n         DC    XL2'0'\n         DC    X'0'\n&A       SETA  &A+1\n.S       AIF   (T'&BLKSIZE EQ 'O').T\n         DS    0F\nTS&A&X   DC    X'0030'             KEY TO SPECIFY THE BLOCKSIZE\n         DC    XL2'1'\n         DC    XL2'2'\nDABS&X   DC    AL2(&BLKSIZE)\n&A       SETA  &A+1\n.T       AIF   (T'&FUNC EQ 'O').U\n         DS    0F\n         AIF   ('&FUNC' EQ 'I').T2\n         MNOTE 8,'&FUNC INVALID FOR FUNC'\n         AGO   .U\n.T2      ANOP\nTS&A&X   DC    X'005A'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    X'80'\n&A       SETA  &A+1\n.U       AIF   (T'&LRECL EQ 'O').V\n         DS    0F\nTS&A&X   DC    X'0042'             KEY TO SPECIFY THE LRECL\n         DC    XL2'1'\n         DC    XL2'2'\n         DC    AL2(&LRECL)\n&A       SETA  &A+1\n.V       AIF   (T'&RLSE EQ 'O').W\n         DS    0F\nTS&A&X   DC    X'000D'             KEY  TO SPECIFY RELEASE SPACE\n         DC    XL2'0'\n&A       SETA  &A+1\n.W       AIF   (T'&DCB EQ 'O').X\n         DS    0F\nTS&A&X   DC    X'002C' KEY TO SPECIFY DCB REFERENCE NAME\n         DC    XL2'1'\n&K       SETA  K'&DCB\n         DC    XL2'&K'             LENGTH OF DSN SPECIFIED\nDCB&X    DC    C'&DCB'             DSNAME TO COPY DCB FROM\n&A       SETA  &A+1\n.X       ANOP\n.*\n.*\n.*\n.*\n         DS    0F\n&A2      SETA  1\n&A       SETA  &A-1\n&NM      SETC  'TS&X'\n.CM1     AIF   (&A2 EQ &A).CM2\n&NM      DC    A(TS&A2&X)\n&NM      SETC  ' '\n&A2      SETA  &A2+1\n         AGO   .CM1\n.CM2     DC    X'80'\n         DC    AL3(TS&A2&X)\n         MEND\n*----------------------------------------------------------------------\n*   BW - END OF MACROS\n*----------------------------------------------------------------------\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZATION\n*\n*----------------------------------------------------------------------\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nAUTO     $PROLOG R11,R12          ENTRY LINKAGE\n         USING IHADCB,R10         DCB DSECT\nENTRY010 DS    0H\n         L     R1,0(R1)           PARM POINTER\n         XR    R2,R2              CLEAR R2\n         ICM   R2,3,0(R1)         ANY PARM ?\n         BZ    BBB010             NO - NOT STARTED AT IPL\n         CH    R2,=H'8'           MAX PARM LENGTH ?\n         BNH   AAA010             NO - OK\n         WTO   '** AUTO ** - INVALID PARM LENGTH, IGNORED'\n         B     BBB010\nAAA010   EQU   *\n         BCTR  R2,R0              DECR FOR EXECUTE\n         EX    R2,MVC010          MOVE PARM TO MEMBER\nBBB010   EQU   *\n         OPEN  (COMMANDS,,DIR,,INTRDR,(OUTPUT))\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  IS IT OPEN ?\n         BZ    ERROR1             NO - ERROR\n         BAL   R14,ENTRY999       SET UP THE DATE/TIME/DAY FIELDS\n         L     R0,BUFSIZE         MAX BLKSIZE\n         GETMAIN R,LV=(0)\n         ST    R1,BUFFER          STORE FOR USE AS READ BUFFER\nEXIT010  EQU   *\n         B     ENTRY020\n         LTORG\nMVC010   MVC   MEMBER(0),2(R1)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        INITIALIZE CONSOLE COMMUNICATION INTERFACE\n*\n*----------------------------------------------------------------------\nENTRY020 DS    0H\n         EXTRACT COMM,'S',FIELDS=(COMM)\n         L     R1,COMM            GET ADDRESS OF COMMUNICATIONS FIELDS\n         L     R0,0(R1)           GET COMMUNICATIONS ECB ADDRESS\n         ST    R0,COMMECB         SAVE ECB ADDRESS IN WAIT LIST\n         LA    R9,4(R1)           GET ORIGIN ADDRESS FOR QEDIT\n         ICM   R1,15,0(R9)        IS THERE A START COMMAND CIB WAITING\n         BZ    AAA020             NO, MUST BE BATCH EXECUTION\n         QEDIT ORIGIN=(R9),BLOCK=(R1)  YES, FREE START COMMAND CIB\nAAA020   EQU   *\n         QEDIT ORIGIN=(R9),CIBCTR=255  ALLOW STACKED COMMANDS (255)\nEXIT020  EQU   *\n         B     ENTRY030\nCOMM     DC    F'0'\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        IPL COMMAND EXECUTION\n*\n*----------------------------------------------------------------------\nENTRY030 DS    0H\n         CLC   MEMBER,BLANKS      ANY PARM ?\n         BE    EXIT030            NO - THIS IS NOT IPL START\n         BAL   R14,ENTRY900       PROCESS IPL MEMBER\nEXIT030  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SET UP TIMER\n*\n*----------------------------------------------------------------------\nENTRY040 DS    0H\n         POINT DIR,=X'00000100'   POINT TO FIRST RECORD IN DIRECTORY\n         USING DIRDSECT,R3\n         TIME  DEC\n         STCM  R0,12,HHMM         STORE TIME HHMM\n         UNPK  @TIME(5),HHMM      MOVE TO STIMER TIME FIELD\n         MVC   @TIME+4(2),=2C'0'\nAAA040   EQU   *\n         L     R3,BUFFER          ADDR OF BUFFER\n         READ  DIRDECB,SF,DIR,(R3),'S'  READ DIRECTORY\n         CHECK DIRDECB            AND OF COURSE WAIT\n         XR    R1,R1              CLEAR A WORK REG\n         ICM   R1,3,0(R3)         LNGTH OF DATA IN DIR BLK\n         LA    R5,0(R1,R3)        END OF DATA IN DIR BLK\n         LA    R3,2(R3)           INCR TO FIRST MEMBER NAME\nLOOP040A EQU   *\n         CLC   DIRNAME,=8X'FF'    END OF MEMBERS ?\n         BE    DDD040             YES - CHECK FOR LO MEMBER\n         CLI   DIRNAME,C'@'       TOD MEMBER ?\n         BNE   CCC040             NO -SKIP IT\n         LA    R1,DIRNAME+1       SECOND BYTE OF DIRNAME\n         LA    R15,4              LOOP CONTROL - HHMM\nLOOP040B EQU   *\n         TM    0(R1),X'F0'        NUMERIC ?\n         BNO   CCC040             NO - SKIP THIS MEMBER\n         LA    R1,1(R1)           BUMP TO NEXT BYTE\n         BCT   R15,LOOP040B\n         CLC   DIRNAME+6(2),BLANKS  MUST BE BLANKS\n         BE    BBB040             YES - OK\n         MVC   WTO040+28(8),DIRNAME  NO - INFORM OPER\nWTO040   WTO   '** AUTO ** - MEMBER //////// INVALID FOR TOD PROCESSINGX\n               , IGNORED'\n         B     CCC040\nBBB040   EQU   *\n         CLC   DIRNAME+1(4),@TIME  MUST BE HIGHER\n         BH    GGG040             PROCESS THIS MEMBER\nCCC040   EQU   *\n         NI    DIRC,X'1F'         TURN OFF UNNEEDED BITS\n         XR    R1,R1              CLEAR R1\n         IC    R1,DIRC            NUMBER OF USER HALFWORDS\n         SLL   R1,1               NUMBER OF USER BYTES\n         LA    R3,12(R1,R3)       INCR TO NEXT DIR ENTRY\n         CR    R3,R5              PAST END OF DIR BLOCK ?\n         BL    LOOP040A           NO - CHECK THIS DIR ENTRY\n         B     AAA040             YES - GET NEXT DIR BLOCK\nDDD040   EQU   *                  ALSO EODAD FOR DIR READS\n         AP    HHMM,=P'1000'      ADD 1 HOUR\n         MVI   HHMM+1,X'00'       CLEAR MM\n         CP    HHMM,=P'24000'     MIDNITE ?\n         BL    EEE040             NO - OK\n*    FOLLOWING TWO INSTRUCTIONS ADDED TO CORRECT TIMING PROBLEMS AT\n*    MIDNIGHT ON LIGHTLY LOADED HIGH SPEED PROCESSORS\n*    (REMOVED 12/15/2001 NO LONGER APPLIES TO EVEN SLOW SYSTEMS)\n          CLC   @TIME(4),=C'2359'  IS IT MIDNIGHT  ????      GRU 01/88\n          BE    ENTRY040           YES GET PAST MIDNIGHT     GRU 01/88\n*\n*\n         MVC   @TIME,=C'23595999' SET MIDNIGHT AS TIMER VALUE\n         B     III040             GO TO IT\nEEE040   EQU   *\n         UNPK  @TIME(5),HHMM      SET DEFAULT TO CHECK AGAIN NEXT HOUR\n         B     HHH040\nGGG040   EQU   *\n         MVC   @TIME(4),DIRNAME+1  YES - NEW TIMER VALUE\nHHH040   EQU   *\n         MVC   @TIME+4(4),=4C'0'\nIII040   EQU   *\n         XC    TIMEECB,TIMEECB\n         STIMER  REAL,ENTRY950,TOD=@TIME                                  118900\nEXIT040  EQU   *\n         B     ENTRY050\n         DROP  R3\n         LTORG\nHHMM     DC    PL3'0'\n@TIME    DC    D'0'\n         EJECT\n*----------------------------------------------------------------------\n*\n*        WAIT FOR MODIFY OR TIMER POP\n*\n*----------------------------------------------------------------------\nENTRY050 DS    0H\n         WAIT  1,ECBLIST=ECBLIST,LONG=YES  WAIT UNTIL AN ECB IS POSTED\n         L     R1,COMMECB         ADDR OF COMMUNICATIONS ECB\n         CLI   0(R1),X'00'        CHECK FOR OPERATOR REQUEST\n         BNE   ENTRY060           YES--GO TO PROCESS OPER REQ\n         CLI   TIMEECB,X'00'      DID THE TIMER POP ?\n         BNE   ENTRY300           YES--GO PROCESS TIME REQUEST\n         B     ENTRY050           HMMM.. DON'T KNOW, RETRY\n         LTORG\nECBLIST  DS    0F\nCOMMECB  DC    A(0)\n         DC    X'80',AL3(TIMEECB)\n         EJECT\n*----------------------------------------------------------------------\n*\n*        CHECK FOR OPERATOR REQUEST\n*\n*----------------------------------------------------------------------\nENTRY060 DS    0H\n         L     R3,0(R9)           GET ADDRESS OF THE CIB\n         USING CIBSECT,R3         ALLOW ADDRESSABILITY\n         CLI   CIBVERB,X'40'      IS IT THE STOP COMMAND ?\n         BE    RETURN             YES - TO CLEAN UP ROUTINE\n         MVC   COMMDATA,BLANKS    CLEAR THE DATA BUFFER\n         IC    R15,CIBDSIZE+1     GET SIZE OF MODIFY DATA\n         BCTR  R15,R0             DECREMENT FOR EXECUTE\n         EX    R15,MOVE060        MOVE TO COMMDATA\n         QEDIT ORIGIN=(R9),BLOCK=(R3)  FREE THE CIB\n         OC    COMMDATA,BLANKS    UPPER CASE\n         CLI   COMMDATA,C'-'      IS IT A COMMAND REQUEST ?\n         BE    ENTRY200           YES - PROCESS IT\n         B     ENTRY100           NO - ASSUME JOB\n         LTORG\nMOVE060  MVC   COMMDATA(0),CIBDATA  MOVE DATA TO WORK AREA\n         DROP  R3                 FREE THE USING REGISTER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DETERMINE WHICH DDNAME TO USE FOR SUBMIT\n*\n*----------------------------------------------------------------------\nENTRY100 DS    0H\n         LA    R10,JOBDCB         ADDR OF JOB DCB\n         LA    R3,COMMDATA        ADDR OF INPUT DATA\nLOOP100A EQU   *\n         CLI   0(R3),C' '         END OF DATA ?\n         BE    AAA100             YES - DEFAULT DDNAME\n         CLC   0(3,R3),=C',D='    IS THIS DDNAME OVERRIDE?\n         BE    BBB100             NO, CONTINUE UNTIL ONE IS FOUND\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         B     LOOP100A           BRANCH BACK\nAAA100   EQU   *\n         MVC   0(5,R3),=C',D=00'  ASSUME DEFAULT\nBBB100   EQU   *\n         TM    DCBOFLGS,DCBOFOPN  JOB CNTL DCB OPEN ?\n         BZ    CCC100             NO - OPEN IT\n         CLC   OPENDCB,3(R3)      SAME AS LAST ONE ?\n         BE    EXIT100            YES - OK\n         CLOSE ((R10))            NO - CLOSE IT\n         XC    OPENDCB,OPENDCB    CLEAR LAST OPENED\nCCC100   EQU   *\n         MVC   DADNJCL+3(2),3(R3)   MODIFY DYNAMIC ALLOCATION PARMS\n         LA    R4,DSNTABLE          TABLE OF DSNS TO DDNAMES\nCCC100L  DS    0H\n         CLC   0(2,R4),3(R3)        RIGHT DDNAME SUFFIX ?\n         BE    CCC100A              GO DO ALLOCATION\n         CLC   0(2,R4),=X'FFFF'     END OF TABLE ?\n         BNE   CCC100B              NO BUMP TO NEXT ENTRY\n         MVC   CCC100M+33(2),3(R3)  MOVE DD SUFFIX TO WTO\n*               89012345678901234567890123456789012345678901234567890\nCCC100M  WTO   '** AUTO ** DDNAME SUFFIX // NOT DEFINED IN TABLE USING X\n               00 AS A DEFAULT'\n         MVC   3(2,R3),=C'00'       SET UP DEFAULT\n         B     CCC100\nCCC100B  DS    0H\n         LA    R4,46(R4)            NEXT ENTRY IN TABLE PLEASE.\n         B     CCC100L              TRY THAT ENTRY ON FOR SIZE\nCCC100A  DS    0H\n         MVC   DADSJCL(44),2(R4)    SAVE THE DATASET TO ALLOCATE.\n         LA    R1,JCLALOC\n         DYNALLOC\n         LTR   R15,R15              ALLOCATION GOOD ?\n         BZ    CCC100D\n         MVC   DATASET(44),DADSJCL MOVE DSNAME TO TITLE\n         WTO   MF=(E,TITLE)\n         LH    R6,TITLE            GET LENGTH OF WTO.\n         LH    R7,TITLE+2          GET MCS FLAGS FROM WTO\n         SH    R6,HALF4            GET LENGTH OF MESSAGE TEXT\n         STC   R6,TITLE+3          SAVE LENGTH FOR SDUMP\n         SDUMP HDRAD=TITLE+3\n         STH   R7,TITLE+2          RESTORE MCS FLAGS FROM WTO.\n         B     ENTRY050            GO WAIT FOR MORE WORK\nCCC100D  DS    0H\n         MVC   DCBDDNAM+3(2),3(R3)  MODIFY DDNAME\n         OPEN  ((R10))\n         TM    DCBOFLGS,DCBOFOPN  DID IT OPEN THIS TIME ?\n         BZ    ERROR2             NO - ERROR\n         MVC   OPENDCB,3(R3)      SAVE LAST OPENED\nEXIT100  EQU   *\n         MVC   0(5,R3),=CL5' '    CLEAR THE 'D=XX' PARM\n         B     ENTRY110\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        SUBMIT EACH MEMBER SPECIFIED IN THE PARMLIST\n*\n*----------------------------------------------------------------------\nENTRY110 DS    0H\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  IS THE INTRDR OPEN ?\n         BZ    ENTRY050           NO, IGNORE REQUEST\n         LA    R3,COMMDATA        ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA110   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP110  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB110             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB110             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP110        BACK TO CHECK NEXT CHAR\n         B     ERROR3             MEMBER NAME LONGER THAN 8 CHARS\nBBB110   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE110        MOVE MEMBER NAME\n         FIND  ((R10)),MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    CCC110             YES - OK\n         MVC   WTO110+25(8),MEMBER\n*               890123456789012345\nWTO110   WTO   '** AUTO ** - JOB //////// NOT FOUND'\n         B     EEE110             GO TO EODAD ROUTINE\nCCC110   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  READDECB,SF,(R10),(R5),'S'\n         CHECK READDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,READDECB+16     ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nDDD110   EQU   *\n         PUT   INTRDR,(R5)        SUBMIT JCL\n         BXLE  R5,R6,DDD110       BUMP TO NEXT REC IN BLOCK AND PUT\n         B     CCC110             READ ANOTHER BLOCK\nEEE110   EQU   *\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   FFF110             NO, FLUSH THE INTERNAL READER\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA110             NO, PROCESS IT\nFFF110   EQU   *\n         PUT   INTRDR,EOF         /*EOF\nEXIT110  EQU   *                  END OF ALL SUBMITS\n         CLOSE ((R10))            CLOSE AND DE-ALLOCATE JOBDCB.\n         B     ENTRY050           CHECK FOR ANY MORE COMMANDS\nMOVE110  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMAND EXECUTION REQUEST BY OPERATOR\n*\n*----------------------------------------------------------------------\nENTRY200 DS    0H\n         LA    R3,COMMDATA+1      ADDRESS OF FIRST (OR ONLY) OPERAND\nAAA200   EQU   *\n         LR    R4,R3              COPY TO WORK REG\n         SR    R15,R15            CLEAR WORK REGISTER\n         LA    R14,9              SET LOOP CONTROL\nLOOP200  EQU   *\n         CLI   0(R3),C' '         END OF MEMBER NAME?\n         BE    BBB200             YES, PROCESS ONLY (LAST) MEMBER\n         CLI   0(R3),C','         DELIMITER ?\n         BE    BBB200             YES, PROCESS THIS ENTRY\n         LA    R3,1(R3)           BUMP TO NEXT CHARACTER\n         LA    R15,1(R15)         BUMP CHAR COUNT REG\n         BCT   R14,LOOP200        BACK TO CHECK NEXT CHAR\n         B     ERROR4             MEMBER NAME LONGER THAN 8 CHARS\nBBB200   EQU   *\n         BCTR  R15,R0             DECREMENT FOR MOVE\n         MVC   MEMBER(8),BLANKS   CLEAR MEMBER NAME AREA\n         EX    R15,MOVE200        MOVE MEMBER NAME\n         BAL   R14,ENTRY900       PROCESS COMMAND\n         CLI   0(R3),C','         IS THERE ANOTHER MEMBER TO PROCESS ?\n         BNE   EXIT200            NO, DONE\n         LA    R3,1(R3)           BUMP TO START OF NEXT MEMBER\n         CLI   0(R3),C' '         NULL MEMBER NAME ?\n         BNE   AAA200             NO, PROCESS IT\nEXIT200  EQU   *\n         B     ENTRY050\n         LTORG\nMOVE200  MVC   MEMBER(0),0(R4)    EXECUTED MOVE OF MEMBER NAME\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS TIME INTERVAL REQUESTS (THE TIMER HAS POPPED)\n*\n*----------------------------------------------------------------------\nENTRY300 DS    0H\n         MVC   MEMBER,BLANKS      CLEAR\n         MVI   MEMBER,C'@'        PREFIX\n         MVC   MEMBER+1(4),@TIME  BUILD NAME\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BNZ   EXIT300            NO, MUST BE NULL TIMER\n         BAL   R14,ENTRY900\nEXIT300  EQU   *\n         B     ENTRY040\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        PROCESS COMMANDS\n*\n*----------------------------------------------------------------------\nENTRY900 DS    0H\n         ST    R14,ST900          SAVE RETURN ADDR\n         LA    R10,COMMANDS       DCB ADDR\n         TM    DCBOFLGS,DCBOFOPN  IS THE COMMANDS OPEN ?\n         BZ    EXIT900            NO, IGNORE REQUEST\n         BAL   R14,ENTRY999       RE-ESTABLISH DATE, TIME, AND DAY\n         FIND  COMMANDS,MEMBER,D\n         LTR   R15,R15            MEMBER FOUND ?\n         BZ    AAA900             YES - PROCESS IT\n         MVC   WTO900+25(8),MEMBER\nWTO900   WTO   '** AUTO ** - CMD //////// NOT FOUND'\n         B     EXIT900            GO TO EODAD ROUTINE\nAAA900   EQU   *\n         L     R5,BUFFER          ADDR OF BUFFER\n         READ  CMDDECB,SF,(R10),(R5),'S'\n         CHECK CMDDECB\n         LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,CMDDECB+16      ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD    *\nBBB900   EQU   *\n         CLI   CONTFLAG,X'FF'     IS THE CONTINUATION FLAG ON ?\n         BNE   EEE900             NO, NORMAL PROCESSING\n         CLC   0(15,R5),BLANKS    IS IT A VALID CONT RECORD ?\n         BE    DDD900             YES, OK\nCCC900   EQU   *\n         MVC   WTO900A+25(8),MEMBER MOVE MEMBER NAME\nWTO900A  WTO   '** AUTO ** - CMD //////// INVALID CONTINUATION, SKIP'\n         MVI   CONTFLAG,X'00'     RESET CONT FLAG\n         B     JJJ900             SKIP THE RECORD\nDDD900   EQU   *\n         MVC   CMDBUF+56(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BNE   CCC900             YES - ERROR ONLY ONE CONT ALLOWED\n         MVI   CONTFLAG,X'00'     RESET THE CONTINUATION FLAG\n         B     III900             PROCESS COMPLETE COMMAND\nEEE900   EQU   *\n         CLI   0(R5),C'*'         COMMENT ?\n         BE    KKK900             YES - SKIP IT\n         CLC   1(5,R5),BLANKS     ANY MONTH/DAY PROCESSING?\n         BE    HHH900             NO, PROCESS DAY OF WEEK ONLY\n         CLI   3(R5),C'/'         VALID MONTH/DAY SPECIFICATION?\n         BE    FFF900             YES - OK\n         MVC   WTO900B+25(8),MEMBER MOVE MEMBER NAME\nWTO900B  WTO   '** AUTO ** - CMD //////// INVALID MONTH/DAY, SKIPPED'\n         B     KKK900             SKIP THE RECORD\nFFF900   EQU   *\n         CLC   1(5,R5),=C'**/**'  ANY MONTH/DAY PROCESSING?\n         BE    HHH900             YES, PROCESS DAY OF WEEK ONLY\n         CLC   1(5,R5),DATE       IS THIS A HIT?\n         BE    HHH900             YES, CHECK FOR CORRECT DAY OF WEEK\n         CLC   4(2,R5),=C'**'     WAS ANY DAY SPECIFIED ?\n         BNE   GGG900             NO, CHECK FOR ANY MONTH\n         CLC   1(2,R5),DATE       YES, IS THIS THE CORRECT MONTH\n         BE    HHH900             YES, PROCESS DAY OF WEEK NEXT\n         B     KKK900             NO - SKIP IT\nGGG900   EQU   *\n         CLC   1(2,R5),=C'**'     WAS ANY MONTH SPECIFIED ?\n         BNE   KKK900             NO - SKIP IT\n         CLC   4(2,R5),DATE+3     YES, IS THIS THE CORRECT DAY\n         BNE   KKK900             NO - SKIP IT\nHHH900   EQU   *\n         SR    R1,R1              CLEAR FOR DAY INDEX\n         IC    R1,DAY             GET DAY INDEX\n         LA    R1,7(R5,R1)        POINT TO TODAYS PROCESS FLAG\n         CLI   0(R1),C' '         PROCESS FLAG ON FOR TODAY ?\n         BE    KKK900             NO -SKIP IT\n         MVC   CMDBUF(56),15(R5)  MOVE COMMAND DATA TO BUFR\n         CLI   71(R5),C' '        IS THIS RECORD CONTINUED ?\n         BE    III900             NO - PROCESS COMMAND\n         MVI   CONTFLAG,X'FF'     SET THE CONTINUATION FLAG\n         B     KKK900             GET NEXT RECORD\nIII900   MODESET KEY=ZERO         GET KEY ZERO AND AUTH\n         LM    R0,R1,SVCREGS      GET SVC 34 REGS\n         SVC   34                 SCHEDULE COMMAND\n         MODESET KEY=NZERO        RELEASE AUTHORIZATION\nJJJ900   EQU   *\n         MVC   CMDBUF(115),BLANKS CLEAR THE COMMAND BUFFER\nKKK900   EQU   *\n         BXLE  R5,R6,BBB900       BUMP TO NEXT REC IN BLOCK\n         B     AAA900             READ ANOTHER BLOCK\nEXIT900  EQU   *                  EODAD\n         L     R14,ST900          RETURN ADDR\n         BR    R14\n         LTORG\nST900    DC    F'-1'\nCONTFLAG DC    X'00'\nSVCREGS  DC    F'0'               REG 0 FOR SVC 34\n         DC    A(SVCCIB)          REG 1 FOR SVC 34\nSVCCIB   DC    AL2(118)           MAXIMUM LENGHT OF COMMAND\n         DC    H'0'               SVC 34 PADDING\nCMDBUF   DC    CL120' '           COMMAND BUFFER\n         EJECT\n*----------------------------------------------------------------------\n*\n*        TIMER EXIT\n**** THIS ROUTINE REPLAED BY BWPOST AT BEGINNING OF PROGRAM FOR MVS/SP\n*----------------------------------------------------------------------\n***********************************************************************\nENTRY950 DS    0H\n         USING *,R15\n         STM   R14,R12,4(R13)     SAVE REGS\n         L     R12,=A(AUTO)\n         DROP  R15\n         POST  TIMEECB\n         LM    R14,R12,4(R13)     RESTORE REGS\nEXIT950  EQU   *\n         BR    R14\n***********************************************************************\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        DAY/DATE ROUTINE (FROM THE MACHINE CLOCK)\n*\n*----------------------------------------------------------------------\nENTRY999 DS    0H\n         ST    R14,SAVE999        SAVE BAL REG\n         $STCK NOGEN              GENERATE THE DATE, TIME AND DAY\nEXIT999  EQU   *\n         L     R14,SAVE999        RELOAD BAL REG\n         BR    R14\n         LTORG\nSAVE999  DC    F'-1'\nDAY      DC    X'99'              RELATIVE DAY OF WEEK (0=MONDAY)\nDATE     DC    D'0'               DATE MM/DD/YY\nTIME     DC    D'0'               TIME HH:MM:SS\n         EJECT\n*----------------------------------------------------------------------\n*\n*        END OF JOB\n*\n*----------------------------------------------------------------------\nRETURN   DS    0H\n         TM    DCBOFLGS,DCBOFOPN  IS THE JCL DCB OPEN?\n         BZ    AAARET             NO, SKIP THE CLOSE\n         CLOSE ((10))             CLOSE THE DCB\nAAARET   EQU   *\n         TM    COMMANDS+DCBOFLGS-IHADCB,DCBOFOPN  COMMANDS OPEN ?\n         BZ    BBBRET             NO, SKIP THE CLOSE\n         CLOSE (COMMANDS,,DIR)    CLOSE BOTH DCBS\nBBBRET   EQU   *\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN  HOW ABOUT THE INTRDR ?\n         BZ    CCCRET             NO, SKIP THAT CLOSE\n         CLOSE (INTRDR)           CLOSE THE INTERNAL READER\nCCCRET   EQU   *\n         L     R1,BUFFER\n         L     R0,BUFSIZE\n         FREEMAIN  R,LV=(0),A=(1)\n         SR    R15,R15            CLEAR RETCODE\n         $EPILOG\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n*\n*        ERROR ROUTINES\n*\n*----------------------------------------------------------------------\nERROR1   DS    0H\n         WTO   '** AUTO ** - COMMANDS DD CARD MISSING, TERMINATING'\n         B     RETURN\n*----------------------------------------------------------------------\nERROR2   DS    0H\n         MVC   WTO2+23(2),3(R3)\nWTO2     WTO   '** AUTO ** - D=// OPEN ERROR, JOB NOT SUBMITTED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR3   DS    0H\n         MVC   WTO3+25(8),0(R4)\nWTO3     WTO   '** AUTO ** - JOB //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n*----------------------------------------------------------------------\nERROR4   DS    0H\n         MVC   WTO4+25(8),0(R4)\nWTO4     WTO   '** AUTO ** - CMD //////// AND ALL FOLLOWING NOT PROCESSX\n               ED, LENGTH EXCEEDED'\n         B     ENTRY050           PROCESS NEXT COMMAND\n         EJECT\n*----------------------------------------------------------------------\n*\n*        STORAGE AREAS\n*\n*----------------------------------------------------------------------\n         DC    C'TIMEECB IS +4 AFTER ='\nBUFSIZE  DC    F'32760'\nTIMEECB  DC    F'0'\nBUFFER   DC    F'0'\nMEMBER   DC    CL8' '\nOPENDCB  DC    CL2' '\nHOLDCIB  DC    CL256' '\nCOMMDATA DC    CL256' '\nBLANKS   DC    CL256' '\n*                        1         2         3         4         5\n*               123456789012345678901234567890123456789012345678901234\nTITLE    WTO   '                                             CAN NOT BEX\n                ALLOCATED AT THIS TIME TRY LATER',                     X\n               ROUTCDE=(1,2,11),MF=L\nDATASET  EQU   TITLE+4\nHALF4    DC    H'4'\nEOF      DC    CL80'/*EOF'\nDSNTABLE DS    0F\n         DC    C'00',CL44'SYZYGY.AUTO.JOBS'\n         DC    C'01',CL44' '\n         DC    C'02',CL44' '\n         DC    C'03',CL44' '\n         DC    C'04',CL44' '\n         DC    C'05',CL44' '\n         DC    C'06',CL44' '\n         DC    C'07',CL44' '\n         DC    C'08',CL44' '\n         DC    C'09',CL44' '\n         DC    C'10',CL44' '\n         DC    X'FFFF'\nJCLALOC  DA    DDN=JOB00,                                              X\n               DSN=SYZYGY.AUTO.JOBS,                                   X\n               STATUS=SHR,                                             X\n               UNQSUF=JCL,                                             X\n               FREE=CLOSE\n         EJECT\n         PRINT NOGEN\nCOMMANDS DCB   DDNAME=COMMANDS,DSORG=PO,MACRF=R,EODAD=EXIT900\nDIR      DCB   DDNAME=COMMANDS,DSORG=PS,MACRF=RP,EODAD=DDD040,         X\n               LRECL=256,BLKSIZE=256,RECFM=FB\nJOBDCB   DCB   DDNAME=JOB00,DSORG=PO,MACRF=R,EODAD=EEE110\nINTRDR   DCB   DDNAME=INTRDR,DSORG=PS,MACRF=PM,                        X\n               LRECL=80,BLKSIZE=80,RECFM=F\n         EJECT\nCIBSECT  DSECT ,                  COMMAND INPUT BUFFER MAPPING\nCIBCIB   DS    F                  ADDRESS OF NEXT CIB IN CHAIN\nCIBVERB  DS    C                  CIB VERB CODE\nCIBSIZE  DS    C                  SIZE OF THE COMMAND INPUT BUFFER\nCIBRSVD1 DS    H                  RESERVED\nCIBRSVD2 DS    C                  RESERVED\nCIBTSOID DS    CL3                TSO TERMINAL ID\nCIBCONID DS    C                  CONSOLE ID OF STARTED TASK\nCIBRSVD3 DS    C                  RESERVED\nCIBDSIZE DS    H                  SIZE OF USER DATA WITHIN CIB\nCIBDATA  DS    C                  COMMAND DATA AS ENTERED BY OPERATOR\nDIRDSECT DSECT\nDIRNAME  DS    CL8\nDIRTTR   DS    CL3\nDIRC     DS    CL1\n         DCBD  DSORG=PO\n*        IKJTCB DSECT=YES,LIST=YES ENERATES TCB DSECT\n         CVT   DSECT=YES          GENERATES CVT DSECT\n         END\n//LINK.SYSLMOD DD  DSN=SYS1.SYZYGY.LINKLIB(AUTO),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFACTRT": {"ttr": 5124, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x05\\x87\\x05\\x87\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 1415, "newlines": 1415, "modlines": 0, "user": "SYZYGYB"}, "text": "ACTR     TITLE 'IEFACTRT - ACCOUNTING ROUTINE DOCUMENTAION'\n*        MVS SMF ACCOUNTING ROUTINE TO PUT STEP STATISTICS\n*        ON JOB OUTPUT AND THE SYSTEM CONSOLE.  OPTIONALLY,\n*        A MESSAGE MAY ALSO BE SENT TO A TSO USER.\n*\n*        REGISTER USAGE:\n*\n*              R0   ON ENTRY CONTAINS REASON FOR ENTRY + USED AS\n*                       WORK REGISTER\n*              R1   ON ENTRY POINTS TO SMF PARAMETER LIST + USED AS\n*                       WORK REGISTER\n*              R2   WORK REGISTER\n*              R3   POINTS TO SMF RECORD RDW (TYPE 4 FOR A BATCH JOB,\n*                       OR TYPE 34 FOR A TSO USER)\n*              R4   USED AS WORK REGISTER\n*              R5   WORK REGISTER\n*              R6   WORK REGISTER\n*              R7   WORK REGISTER\n*              R8   RETURN FOR BRANCH AND LINK INSTRUCTIONS +\n*                       USED AS A TEMP BASE IN ESTAE ROUTINES\n*              R9   WORK REGISTER + USED AS POINTER TO RELOCATE\n*                       SECTION OF SMF RECORD\n*              R10  BASE REGISTER\n*              R11  POINTS TO SMF PARAMETER LIST\n*              R12  ADDRESS OF LINKAGE CONTROL TABLE (USED TO PASS\n*                       PARAMETERS TO 'IEFYS' ROUTINE)\n*              R13  SAVE AREA AND BASE FOR WORKAREA DSECT\n*              R14  RESERVED FOR LINKAGE + USED AS WORK REGISTER\n*              R15  RESERVED FOR LINKAGE + USED AS WORK REGISTER\n*\n*        STEP ACCOUNTING DATA WHICH IS PRINTED IS DESCRIBED BELOW:\n*\n*              STEP NAME\n*              PROGRAM NAME (FROM JCL 'EXEC' CARD)\n*              STEP START TIME\n*              STEP STOP TIME\n*              ELAPSED TIME\n*              ALLOCATION START TIME\n*              PROGRAM LOAD TIME\n*              STEP CPU TIME UNDER TCB'S\n*              STEP CPU TIME UNDER SRB'S\n*              STORAGE USED FROM BOTTOM OF PRIVATE AREA\n*              STORAGE USED FROM TOP OF PRIVATE AREA\n*              SIZE OF PRIVATE AREA\n*              STEP COMPLETION STATUS (& CODE, IF APPLICABLE)\n*              NUMBER OF DISK UNITS USED\n*              NUMBER OF DISK EXCP'S\n*              NUMBER OF TAPE UNITS USED\n*              NUMBER OF TAPE EXCP'S\n*              NUMBER OF VIO EXCP'S (IF ANY)\n*\n*              PERFORMANCE GROUP NUMBER\n*              # OF SERVICE UNITS USED\n*              STEP ACTIVE TIME\n*              # PAGES PAGED IN\n*              # PAGES PAGED OUT\n*              # TIMES SWAPPED\n*              # PAGES SWAPPED IN\n*              # PAGES SWAPPED OUT\n*              # VIO PAGES PAGED IN\n*              # VIO PAGES PAGED OUT\n*\n*        STEP ACCOUNTING DATA WHICH IS WRITTEN ON THE SYSTEM\n*        CONSOLE IN THE FORMAT DESCRIBED BELOW\n*\n*    STEPNAME/PGMNAMEX/CP:UT:IM.EX/WA:LL:TI/CCODE/ACCTINFO/JOBNAMEX\n*\n*        WHERE:\n*\n*              STEPNAME     IS STEPNAME\n*              PGMNAMEX     IS PROGRAM NAME (FROM JCL 'EXEC' CARD)\n*              CP:UT:IM.EX  IS STEP CPU TIME (UNDER TCB'S) IN\n*                               HUNDREDTHS OF SECONDS\n*              WA:LL:TI     IS ELAPSED WALL TIME FOR STEP EXECUTION\n*              CCODE        IS STEP EXECUTION STATUS/CODE, IN ONE\n*                               OF THE FOLLOWING FORMATS:\n*                  NNNNN    CONDITION CODE IF STEP WAS EXECUTED\n*                               AND TERMINATED NORMALLY\n*                  UNNNN    USER ABEND CODE IN DECIMAL\n*                  S-HHH    SYSTEM ABEND CODE IN HEXADECIMAL\n*                  NOXEC    IF STEP WAS FLUSHED (I.E., NOT\n*                               EXECUTED AT ALL\n*              ACCTINFO     ACCOUNTING INFO (FROM JOBCARD)\n*              JOBNAMEX     JOBNAME\n*\n*        OPTIONAL TSO TERMINAL USER NOTIFICATION OF STEP\n*        TERMINATION IS REQUESTED BY CODING AN ACCOUNTING\n*        PARAMETER IN THE FOLLOWING FORMAT ON THE JCL EXEC\n*        STATEMENT OF THE STEP FOR WHICH NOTIFICATION IS DESIRED:\n*\n*    NOTIFY=USERID,OPTIONALUSERDATA\n*\n*        WHERE:\n*\n*              USERID       IS LOGON ID OF USER TO BE NOTIFIED\n*              OPTIONALUSERDATA  IS UP TO 32 BYTES OF USER\n*                               DATA WHICH MAY OPTIONALLY BE\n*                               SPECIFIED TO BE ADDED TO THE\n*                               NOTIFICATION MESSAGE\n*\n*        FORMAT OF MESSAGE SENT TO TSO USER IS AS FOLLOWS:\n*\n*    JOBNAMEX (JES2JOB#)/STEPNAME/CCODE OPTIONALUSERDATA\n*\n*        WHERE THE MEANING OF THE PARAMETERS IS AS PER ABOVE.\n*\n***********************************************************************\n         SPACE 3\n         LCLA  &SP                 SUBPOOL FOR GETMAIN FOR WORKAREA\n&SP      SETA  241\n         TITLE 'IEFACTRT - SMF JOB/STEP TERMINATION ACCOUNTING'\n         PRINT NOGEN\nLCT      DSECT\n         IEFALLCT\n         SPACE 3\nSMFR     DSECT\n         IFASMFR (4,34)       I USE THE SMF TYPE 4 RECORD DEFINITION   X\n                              TO MAP BOTH TYPE 4 AND TYPE 34 RECORDS   X\n                              --- WATCH OUT FOR DIFFERENCES\n         SPACE 3\n         PRINT GEN\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nLENFACT  EQU   106\nSPACE    EQU   X'40'\nASTERISK EQU   C'*'\nCOMMA    EQU   C','\nRPARENS  EQU   C')'\nLPARENS  EQU   C'('\nSLASH    EQU   C'/'\nDADEV    EQU   X'20'          UCBTYP MASK FOR DIRECT ACCESS            X\n                              STORAGE CLASS DEVICES\nTADEV    EQU   X'80'               UCBTYP MASK FOR MAG TAPE DEVICES\nCVTPTR   EQU   X'4C'               PSA POINTER TO CVT\n         SPACE 3\n         PRINT NOGEN\n         IEZJSCB\n         IHASDWA\n         SPACE 3\n         PRINT GEN\nIEFACTRT CSECT\n         USING LCT,R12\n         USING IEFACTRT,R15\n         B     SAVEREGS\n         DC    AL1(SAVEREGS-*)                      LENGTH\n         DC    C' IEFACTRT &SYSDATE &SYSTIME '      ** EYE CATCHER **\nSAVEREGS STM   R14,R12,12(R13)\n         DROP  R15\n         LR    R10,R15             LOAD BASE REGISTER\n         USING IEFACTRT,R10        USE R10 AS BASE\n         LR    R11,R1              SAVE PARAMETER LIST\n         LR    R5,R0               SAVE ENTRY TYPE\n         GETMAIN R,LV=AREASIZE,SP=&SP\n         USING WORKAREA,R1\n         ST    R10,SAVE10     SAVE BASE REGISTER\n         ST    R13,SAVE13     SAVE CALLER'S R13 (I AM NOT FOLLOWING    X\n                              STANDARD LINKAGE CONVENTIONS HERE ---    X\n                              THE REASON IS THAT I ALSO USE MY\n*                                  SAVEAREA AS THE 45 WORD WORKAREA\n*                                  REQUIRED BY 'IEFYS', AND I DON'T\n*                                  KNOW WHAT HE DOES WITH IT)\n         LR    R13,R1\n         DROP  R1\n         USING WORKAREA,R13\n* PROTECT YOURSELF WITH AN ESTAE\n         ST    R10,STAER10         REGISTER REQUIRED BY RETRY ROUTINE\n         ST    R13,STAER13         REGISTER REQUIRED BY RETRY ROUTINE\n         MVC   STAELIST(STAELN),STAELFRM\n         LA    R2,ERREXIT          RETRY ROUTINE ENTRY ADDRESS\n         LA    R3,STAEPRMS\n         ESTAE (2),PARAM=(3),MF=(E,STAELIST)\n         LTR   R15,R15\n         BNZ   STAEFAIL       IF ESTAE WAS NOT SUCCESSFUL,             X\n                              ISSUE ERROR MESSAGE & RETURN TO CALLER\n         L     R3,36(R11)          GET ADDRESS OF SMF RECORD\n         USING SMFRCD4,R3\n         SPACE 1\n         CH    R5,=H'12'           ENTRY FOR STEP TERMINATION ??\n         BE    STEPTERM            YES\n         L     R1,0(R11)           R1-->COMMON EXIT PARM AREA\n         CLI   SMF4RTY,5           TYPE 5 RECORD ???  WAW 10/86\n         BNE   EXIT                NO - THEN DON'T HOSE IT\n*                                  MOVE TAPE & DISK COUNTS TO\n         MVC   115(2,R3),32(R1)    LAST 2 BYTES OF TYPE 5\n*                                  PROGRAMMER NAME FIELD\n         B     EXIT                END TYPE 5 PROCESSING\n         SPACE 3\n*\n*        STEP TERMINATION PROCESSING\n*\n         SPACE 1\nSTEPTERM MVC   WTOAREA(WTO001CL),WTO001C\n         SPACE 1\n         MVI   MSGAREA,ASTERISK\n         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA\n         L     R1,28(R11)\n         CLI   1(R1),1             FIRST STEP OF JOB?\n         BNE   PRNTLIN1\n* FORMAT TIME JOB ENTERED SYSTEM (I.E., WHEN JOBCARD WAS READ, OR\n* TSO LOGON WAS RECOGNIZED)\n         CLI   SMF4RTY,34          TSO LOGON?\n         BE    TSOLOGON\n* REMOVED 5/22/86  DW\n*        L     R1,0(R11)           ADDR OF COMMON PARM AREA\n*        LA    R1,20(R1)           POINT TO ACCT & SUB ACCT\n*        LINK  EP=TMSACTRT\n         MVC   MSGJCRL,JCRLJOB\n         B     GETJCRT\nTSOLOGON MVC   MSGJCRL,JCRLTSO\nGETJCRT  MVC   MSGJCRDT,DTFMT\n         LA    R4,MSGJCRT\n         ICM   R7,15,SMF4RST\n         BAL   R8,TIME             FORMAT TIME JOB ENTERED SYSTEM\n         UNPK  MSGJCRD,SMF4RSD     FORMAT DATE JOB ENTERED SYSTEM\nPRNTLIN1 BAL   R14,PRINT           PRINT TOP BORDER OF ASTERISKS\n         SPACE 1\n         MVI   MSGAREA+1,SPACE\n         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1\n         MVC   MSGHDR,HDRMSG\n         L     R1,CVTPTR      POINT TO CVT TO GET CPU MODEL NUMBER     X\n                              AND OPERATING SYSTEM RELEASE LEVEL\n         LA    R1,0(R1)       CLEAR HIGH-ORDER BYTE\n         SH    R1,=H'6'\n         UNPK  HDRMODNR(4),0(3,R1) CPU MODEL #\n         TR    HDRMODNR,HEXTRANS-X'F0'\n         MVI   HDRMODNR+L'HDRMODNR,SPACE\n         MVC   HDRNUMB,2(R1)       OPERATING SYSTEM RELEASE #\n         MVC   HDRSUBNM,4(R1)      SUB-RELEASE #\n         MVC   HDRSID,SMF4SID      GET SMF SYSTEM ID CODE\n         BAL   R14,PRINT\n         SPACE 1\n         MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *\n         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1\n         MVC   MSGAREA+1(L'STEPMSG1),STEPMSG1\n         MVC   MSGAREA+1+25(L'MSGCORE1),MSGCORE1\n         MVC   MSGAREA+1+25+26(L'SM1B),SM1B\n         MVI   MSGAREA+1+25+26+L'SM1B+4,C'/'\n         MVC   MSGAREA+1+25+26+30(L'SM1C),SM1C\n         MVC   MSGAREA+1+25+26+30+26(L'SM1D),SM1D\n         MVC   MSGSTPN,SMF4STMN\n         CLI   SMF4STMN,SPACE      ANY STEP NAME SUPPLIED?\n         BNE   GETSTPN\n         SR    R0,R0\n         IC    R0,SMF4STN          STEP # OF THIS STEP\n         CVD   R0,DBLWORD\n         UNPK  STP#001C,DBLWORD+6(2)\n         OI    STP#001C+L'STP#001C-1,X'F0'\n         B     GETH0ST\nGETSTPN  MVC   STPN001C,SMF4STMN\nGETH0ST  LH    R1,SMF4H0ST         PROBLEM PROGRAM CORE USED\n         ST    R1,MSVMEM           SAVE FOR DOLLARS LINE CALULATION\n         CVD   R1,DBLWORD\n         ED    MSGUCORE-1(6),DBLWORD+5\n         LA    R4,MSGSTIME\n         ICM   R7,15,SMF4SIT       STEP INITIATION TIME\n         BAL   R8,TIME             FORMAT STEP INITIATION TIME\n* CALCULATE # OF TAPE DEVICES & DISK DEVICES USED BY STEP, & # OF\n* TAPE EXCPS & DISK EXCPS EXECUTED IN STEP.\n         SR    R4,R4               # DISK DEVICES USED\n         LR    R5,R4               # TAPE DEVICES USED\n         LR    R7,R5               # DISK EXCPS ISSUED\n         LR    R8,R7               # TAPE EXCPS ISSUED\n         LR    R9,R8               # VIO EXCPS ISSUED\n         LH    R2,SMF4LENN\n         AH    R2,=H'-2'\n         BNP   FORMATIO\n* GET WORKAREA FOR A TABLE IN WHICH TO STORE DEVICE ADDRESSES.\n* AS EACH SMF DEVICE ENTRY IS READ, A CHECK IS MADE TO SEE IF IT\n* A DASD OR TAPE DEVICE.  IF NOT, THE NEXT ENTRY IS READ.  IF\n* IT IS, THE 'SMF4EXCP' FIELD IS ADDED TO THE DASD OR TAPE EXCP\n* COUNTER, AS APPROPRIATE.  THEN A TABLE OF TWO BYTE DEVICE\n* ADDRESSES IS SCANNED.  IF THE DEVICE ADDRESS HAS ALREADY BEEN\n* ENCOUNTERED, A MATCHING ENTRY WILL BE FOUND IN THE TABLE.  IF\n* END OF TABLE IS REACHED (A ZERO ENTRY), THEN WE HAVE ENCOUNTERED\n* A NEW DEVICE ADDRESS --- THE ADDRESS IS INSERTED AT THE END OF\n* THE TABLE, A NEW END-OF-TABLE ENTRY IS ESTABLISHED, AND 1 IS\n* ADDED TO THE APPROPRIATE DEVICES-USED COUNTER.\n         MVC   VCORE,VCOREFMT      LIST FORM MACRO FOR CONDITIONAL     X\n                                   GETMAIN FOR DEVICE ADDRESS TABLE\n         SRL   R2,2\n         LR    R6,R2\n         SRL   R6,1                R6 HAS # OF DEVICE ENTRIES\n         LA    R2,7+2(R2)     ADD 2 BYTES FOR DUMMY TABLE ENTRY, AND   X\n                              ROUND UP TO DOUBLEWORD MULTIPLE\n         N     R2,=X'00FFFFF8'\n         GETMAIN LV=(2),A=AREAADDR,MF=(E,VCORE)\n         LTR   R1,R15\n         BNZ   IOFAILED            (R1 CONTAINS ZERO ON FALL-THRU)\n         L     R2,AREAADDR         R2 POINTS TO DEVICE ADDRESS TABLE\n         STH   R1,0(R2)       INDICATE INITIAL STATUS OF TABLE IS      X\n                              EMPTY\n         LA    R15,SMF4LENN+2\n         USING SMF4DEVC,R15\nIOLOOP   CLI   SMF4DEVC,DADEV      DIRECT ACCESS DEVICE?\n         BE    DEVDA\n         CLI   SMF4DEVC,TADEV      TAPE DEVICE?\n         BE    DEVTA\n         CLC   SMF4DEVC(4),=X'00000FFF'\n         BNE   NEXTIO\n         A     R9,SMF4EXCP         ACCUMULATE VIO EXCP'S\nNEXTIO   LA    R15,8(R15)\n         BCT   R6,IOLOOP\n         B     FREEVCOR\nDEVDA    A     R7,SMF4EXCP         ACCUMULATE DASD EXCP'S\n         LR    R14,R2              PINT TO START OF DEVICE ADDR TABLE\nFINDDA   CH    R1,0(R14)           NO MORE ENTRIES TO SCAN?\n         BE    NEWDA\n         CLC   0(2,R14),SMF4CUAD   DOES ADDRESS IN CURRENT ENTRY       X\n                              IN TABLE MATCH THAT OF CURRENT           X\n                              ENTRY IN SMF RECORD?\n         BE    NEXTIO\n         LA    R14,2(R14)          BUMP TO NEXT ENTRY IN TABLE\n         B     FINDDA\nNEWDA    MVC   0(2,R14),SMF4CUAD   ENTER NEW DEVICE ADDRESS IN TABLE\n         STH   R1,2(R14)           SET NEW END-OF-TABLE INDICATOR\n         LA    R4,1(R4)            INCREMENT #-OF-DASD-DEV-USED COUNTER\n         B     NEXTIO\nDEVTA    A     R8,SMF4EXCP         ACCUMULATE TAPE EXCP'S\n         LR    R14,R2\nFINDTA   CH    R1,0(R14)\n         BE    NEWTA\n         CLC   0(2,R14),SMF4CUAD\n         BE    NEXTIO\n         LA    R14,2(R14)\n         B     FINDTA\nNEWTA    MVC   0(2,R14),SMF4CUAD   ENTER NEW DEVICE ADDRESS IN TABLE\n         STH   R1,2(R14)           SET NEW END-OF-TABLE INDICATOR\n         LA    R5,1(R5)            INCREMENT #-OF-TAPE-DEV-USED COUNTER\n         B     NEXTIO\n         DROP  R15\nFREEVCOR FREEMAIN MF=(E,VCORE)\nFORMATIO TM    SMF4RIN,B'00000010'      IS I/O-COUNTS-POSSIBLY-INVALID X\n                                        INDICATOR ON?\n         BZ    BZ0010\n         MVI   MSGTEXCP+L'MSGTEXCP,ASTERISK\nBZ0010   LR    R0,R7                    TOTAL DISK EXCPS\n         AR    R0,R8                    + TOTAL TAPE EXCPS\n         AR    R0,R9                    + TOTAL VIO EXCPS\n         ST    R0,MSVEXCP               SAVE INTERMEDIATE TOTAL\n         CVD   R5,DBLWORD\n         UNPK  MSG#TAPE,DBLWORD+6(2)\n         OI    MSG#TAPE+L'MSG#TAPE-1,X'F0'\n         CVD   R8,DBLWORD\n         UNPK  MSGTEXCP,DBLWORD+3(5)\n         OI    MSGTEXCP+L'MSGTEXCP-1,X'F0'\n         CVD   R4,#DISKS           SAVE COUNT OF DASD DEVICES USED\n         CVD   R7,DIO              SAVE COUNT OF DASD EXCP'S\n         CVD   R9,VIO              SAVE COUNT OF VIO EXCP'S\n         MVI   IOSW,0              INDICATE DASD USE INFO AVAILABLE\n         B     IODONE\nIOFAILED MVI   IOSW,12             INDICATE DASD USE INFO NOT AVAILABLE\n         SPACE 3\nIODONE   L     R2,0(R11)           PT TO EXIT PARM LIST\n         CLI   28(R2),1            IS THIS 1ST STEP OF JOB\n         BNE   NOT1ST\n         XC    32(4,R2),32(R2)     ZERO USER COMM AREA  T&D COUNTS\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\nNOT1ST   LH    R6,LENFACT(R3)      LENGTH FACTOR FOR DEVICES\n         LA    R6,LENFACT(R6,R3)   SET LOOP END\n         LA    R8,LENFACT+2(R3)    START OF DEVICE INFO\n         SR    R0,R0               INIT SUM UP REG\n         XC    FULLWRDS+4(2),FULLWRDS+4  0 TO STEP TAPE&DISK COUNTER\n         L     R1,16               --> CVT\n         L     R4,36(R1)           CVTILK1\n         L     R7,40(R1)           CVTILK2\nTOPLOP   CR    R8,R6               ANY MORE DEVICES?\n         BNL   ENDLOP              SUM IS COMPLETE, GO SAVE\n         CLI   0(R8),X'20'         THIS A DISK UCB TYP?\n         BNE   XUCBTAPE            IF NO, GO CHECK FOR TAPE\n         LH    R14,2(R8)           CHAN ADDR/CNTRL ADDR/DEV ADDR\n         LR    R1,R14              SAVE FOR AWHILE\n         SRDL  R14,8               ISOLATE CHAN ADDR\n         SRL   R15,28              ISOLATE CNTRL ADDR\n         IC    R14,0(R14,R4)       IECILK1+CHAN ADDR->ADDR OF K\n         AR    R14,R15             CNTRL ADDR+K\n*        CLI   7(R4),X'FF'         > 248 DEVICES IN SYSTEM\n*        BNE   LESS249             ONLY SINGLE BYTE CU TABLE IF < 249\n         AR    R14,R14             2(CNTRL ADDR+ K)\n         LH    R14,0(R14,R4)       IECILK1+2(CNTRL ADDR+K)->ADDR L\n*        B     GRTR248\n*ESS249  IC    R14,0(R14,R4)       IECILK1+CNTRL ADDR+K->ADDR L\nGRTR248  N     R1,X0F              ISOLATE DEV ADDR\n         AR    R1,R14              DEV ADDR + L\n         AR    R1,R1               2(DEV ADDR +L)\n         LH    R15,0(R1,R7)        IECIKL2+2(DEVADDR+L)->UCB\n         TM    3(R15),X'04'        IS UCB A PERM RES PACK\n         BZ    XUCBCNT             NO IF BIT OFF, GO CHK MAX USE\n         OI    1(R8),X'40'         SET SYSTEM VOL BIT IN TYP 4 REC\nADDEMUP  A     R0,4(R8)            ADD TAPE AND DISK EXCPS\nMIDLOP   LA    R8,8(R8)            INCR TO NXT DEV ENTRY\n         B     TOPLOP              GO TEST FOR MORE\nXUCBTAPE CLI   0(R8),X'80'         IS THIS A TAPE UCB TYPE?\n         BNE   MIDLOP              IF NO, ALL DONE WITH IT.\nXUCBCNT  LA    R15,LENFACT+2(R3)   GET HERE 4 ONLY TAPE&NON PER RES\nXUCBSEEK CR    R15,R8              THIS POINT = CURRENT POS IN LIST\n         BNL   XUCBKEEP            IF = THEN CUR UCB IS UNIQUE, GO SUM\n         CLC   2(2,R15),2(R8)      THIS UCB= TO CURRENT UCB\n         BE    ADDEMUP             IF= THEN CUR UCB NOT UNIQUE, SKIP\n         LA    R15,8(R15)\n         B     XUCBSEEK            KEEP CHECKING FOR UNIQUE UCB\nXUCBKEEP LA    R15,1               DISK COUNTER  X'0001'\n         CLI   0(R8),X'80'         IS THIS A TAPE?\n         BNE   XUCBDISK            DISK IF BRANCH\n         LA    R15,256             TAPE COUNTER  X'0100'\nXUCBDISK AH    R15,FULLWRDS+4      ADD 'EM UP\n         STH   R15,FULLWRDS+4      SAVE TILL ALL UCB'S DONE\n         B     ADDEMUP             CONTINUE TESTING\nENDLOP   ST    R0,FULLWRDS         SAVE STEP EXCP COUNT FOR CVD\n         CLC   FULLWRDS+4(1),32(R2)  WAS A NEW MAX TAPE USAGE REACHED\n         BNH   NONUMAXT            NO IF BRANCH\n         MVC   32(1,R2),FULLWRDS+4 USE NEW MAX TAPE VALUE\nNONUMAXT CLC   FULLWRDS+5(1),33(R2)  WAS A NEW MAX DISK USAGE REACHED\n         BNH   NONUMAXD            NO IF BRANCH\n         MVC   33(1,R2),FULLWRDS+5 USE NEW MAX DISK VALUE\nNONUMAXD CLI   SMF4RTY,34          TSO STEP?\n         BE    GETSCPU             YES - BYPASS NEXT\n         L     R6,16               -> CVT\n         L     R6,296(,R6)         -> IEFJESCT\n         L     R6,24(,R6)          -> JESSCT\n         L     R6,16(,R6)          -> SSCTSSVT\n         L     R6,884(,R6)         -> $SVJXCLS SJBS EXEC JOB-BY-CLS\nJOBLOOP  CLC   0(8,R2),236(R6)     JOBNAME MATCH? (SJBJOBNM)\n         BE    JOBMATCH            YES - RECHECK\n         ICM   R6,15,200(R6)       CHAIN END? (SJBXQCHN)\n         BNZ   JOBLOOP             NO - CONTINUE TEST\n         B     GETSCPU             YES - IGNORE\nJOBMATCH L     R6,96(,R6)          -> SJBJCT\n         CLC   0(8,R2),156(R6)     JOBNAME MATCH?  (JCTJNAME)\n         BNE   GETSCPU             NO - IGNORE\n         MVC   182(2,R6),32(R2)    SET HIGH WATER  (JCTPNAME+18)\nGETSCPU  MVI   FULLWORD,0\n         L     R5,20(R11)          -> STEP CPU TIME UNDER TCB'S\n* CHECK TO SEE THAT BOTH SOURCES OF STEP CPU TIME UNDER TCB'S\n* CONTAIN THE SAME VALUE\n         LH    R1,SMF4LENN\n         LA    R1,SMF4LENN(R1)\n         CLC   1(3,R1),0(R5)\n         BE    BE0010\n         MVI   MSGTCBTM-1,ASTERISK INDICATE VALUES DISAGREE\nBE0010   MVC   FULLWORD+1(3),0(R5)\n         L     R7,FULLWORD\n         ST    R7,MSVCPU           SAVE FOR DOLLAR CALCULATIONS\n         LA    R4,MSGTCBTM\n         BAL   R8,TIMETH           FORMAT STEP CPU TIME UNDER TCB'S\n         MVC   CPUT001C,MSGTCBTM\n         BAL   R14,PRINT           PRINT MSG\n         SPACE 1\n         MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *\n         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1\n         MVC   MSGAREA+1(L'STEPMSG2),STEPMSG2\n         MVC   MSGAREA+1+25(L'MSGCORE2),MSGCORE2\n         MVC   MSGAREA+1+25+26(L'SM2B),SM2B\n         MVI   MSGAREA+1+25+26+L'SM2B+4,C'/'\n         MVC   MSGAREA+1+25+26+30(L'SM2C),SM2C\n         MVC   MSGAREA+1+25+26+30+26(L'SM2D),SM2D\n         MVC   MSGPGMN,SMF4PGMN\n         MVC   PGMN001C,SMF4PGMN\n         LH    R1,SMF4SYST         SYSTEM CORE USED ON USER'S BEHALF\n         CVD   R1,DBLWORD\n         ED    MSGSCORE-1(6),DBLWORD+5\n         CLI   IOSW,0\n         BNE   GETPTIME\n* FORMAT INFORMATION ABOUT DASD DEVICE UTILIZATION\n         TM    SMF4RIN,B'00000010'\n         BZ    BZ0020\n         MVI   MSGDEXCP+L'MSGDEXCP,ASTERISK\nBZ0020   UNPK  MSG#DISK,#DISKS+6(2)\n         OI    MSG#DISK+L'MSG#DISK-1,X'F0'\n         UNPK  MSGDEXCP,DIO+3(5)\n         OI    MSGDEXCP+L'MSGDEXCP-1,X'F0'\nGETPTIME LA    R4,MSGPTIME\n         ICM   R7,15,SMF4TME\n         BAL   R8,TIME             FORMAT STEP TERMINATION TIME\n         MVI   FULLWORD,0\n         MVC   FULLWORD+1(3),SMF4SRBT\n         L     R7,FULLWORD\n         LA    R4,MSGSRBTM\n         BAL   R8,TIMETH           FORMAT STEP CPU TIME UNDER SRB'S\n         BAL   R14,PRINT\n         SPACE 1\n         MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *\n         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1\n         MVC   MSGAREA+1(L'STEPMSG3),STEPMSG3\n         MVC   MSGAREA+1+25(L'MSGCORE3),MSGCORE3\n         MVC   MSGAREA+1+25+28(L'SM3B),SM3B\n         MVC   MSGAREA+1+25+28+28(L'SM3C),SM3C\n         MVC   MSGAREA+1+25+28+28+26(L'SM3D),SM3D\n* DETERMINE KIND OF STEP TERMINATION, & FORMAT TERMINATION CODE.\n         TM    SMF4STI,B'00000001' STEP FLUSHED?\n         BO    FLUSHED\n         TM    SMF4STI,B'00000010' ABEND?\n         BO    ABEND\n         MVC   MSGTTYPE,=C'COND'\n         MVI   TERM001C,C'0'\n         B     DSPLUCOD\nFLUSHED  MVC   MSGNOEXC,=C'-STEP NOT EXECUTED-'\n         B     NEXTFLD\nABEND    MVC   MSGTTYPE,=C'COMP'\n         TM    SMF4SCC,X'80'       USER ABEND CODE?\n         BO    USERABE\n* SYSTEM ABEND CODE\n         MVI   TERM001C,C'S'\n         MVI   MSGATYPE,C'S'\n         UNPK  DBLWORD(4),SMF4SCC(3)\n         TR    DBLWORD(3),HEXTRANS-X'F0'\n         MVC   MSGCODE3,DBLWORD\n         MVI   CODE001C,C'-'\n         MVC   CODE001C+1(3),DBLWORD\n         B     NEXTFLD\nUSERABE  MVI   MSGATYPE,C'U'\n         MVI   TERM001C,C'U'\nDSPLUCOD ICM   R1,3,SMF4SCC\n         N     R1,=X'00000FFF'\n         CVD   R1,DBLWORD\n         UNPK  MSGCODE4,DBLWORD+5(3)\n         OI    MSGCODE4+L'MSGCODE4-1,X'F0'\n         MVC   CODE001C,MSGCODE4\nNEXTFLD  LH    R1,SMF4RSH0    PRIVATE AREA SIZE (CORE AVAILABLE TO     X\n                              USER)\n         CVD   R1,DBLWORD\n         ED    MSGARESZ-1(6),DBLWORD+5\n         TM    SMF4RIN,B'00000001' V=R JOBSTEP?\n         BZ    BZ0030\n         MVC   MSGVRIND,=C'V=R'\n* GET JOBCARD ACCOUNTING INFO FOR STEP STATISTICS WTO\nBZ0030   L     R15,12(R11)\n         CLI   3(R15),1\n         BL    GETJBN\n         L     R1,16(R11)\n         BE    ONEACCTF\n         SR    R7,R7\n         IC    R7,0(R1)\n         AH    R7,=H'-1'\n         BM    ACNTFLD2\n         CH    R7,=H'3'\n         BNH   BNH010\n         LA    R7,3\nBNH010   EX    R7,MOVACCT1\nACNTFLD2 SR    R7,R7\n         IC    R7,0(R1)\n         LA    R1,1(R1,R7)\n         IC    R7,0(R1)\n         AH    R7,=H'-1'\n         BM    GETJBN\n         CH    R7,=H'3'\n         BNH   BNH020\n         LA    R7,3\nBNH020   EX    R7,MOVACCT2\n         B     GETJBN\nONEACCTF SR    R7,R7\n         IC    R7,0(R1)\n         AH    R7,=H'-1'\n         BM    GETJBN\n         CH    R7,=H'7'\n         BNH   BNH030\n         LA    R7,7\nBNH030   EX    R7,MOVACCT1\nGETJBN   MVC   JBN001C,SMF4JBN\n         ICM   R7,15,SMF4AST\n         LA    R4,MSGATIME\n         BAL   R8,TIME             FORMAT DEVICE ALLOCATION START TIME\n         ICM   R7,15,SMF4PPST\n         LA    R4,MSGLTIME\n         BAL   R8,TIME             FORMAT PROBLEM PROGRAM LOAD TIME\n* CALCULATE STEP EXECUTION ELAPSED TIME\n         ICM   R7,15,SMF4TME\n         ICM   R1,15,SMF4SIT\n         SR    R7,R1\n         BM    NEGETME\n         SR    R1,R1\n         B     TSOETCHK\nNEGETME  LA    R1,4\nTSOETCHK CLI   SMF4RTY,34\n         BE    TSOETME(R1)\n         ZAP   FULLWORD,SMF4DTE\n         SP    FULLWORD,SMF4STID\n         BZ    SAMEDAY(R1)\n         BP    MULTIDAY(R1)\n         B     MOVETME        STEP TERMINATION DATE < STEP INITIATION  X\n                              DATE IS AN ERROR - BYPASS FORMATTING     X\n                              ELAPSED TIME\n* JOB TERMINATED ON SAME DAY IT WAS INITIATED\nSAMEDAY  B     ROUNDETM\n         B     MOVETME        STEP INITIATION TIME > STEP TERMINATION  X\n                              TIME IS AN ERROR IF STEP INITIATION      X\n                              DATE = STEP TERMINATION DATE\n* THERE IS NO STEP INITIATION DATE FIELD IN A TYPE 34 (TSO USER)\n* RECORD --- DO THE BEST YOU CAN WITH THE TIME ONLY\nTSOETME  B     ROUNDETM\n         B     ADD24HRS\n* JOB TERMINATED ON A LATER DAY THAN THE ONE ON WHICH IT WAS\n* INITIATED (ELAPSED TIME WILL NOT BE CALCULATED FOR A JOB THAT RUNS\n* MORE THAN TWO DAYS OR PASSES THRU A CHANGE OF YEAR)\nMULTIPOS CP    FULLWORD,=P'1'\n         BE    ADD24HRS\n         B     MOVETME\nMULTIDAY B     MULTIPOS\n         SP    FULLWORD,=P'2'\n         BM    ADD24HRS\n         BP    MOVETME\n         A     R7,MIDTIME\nADD24HRS A     R7,MIDTIME     IF START TIME > STOP TIME, WE MUST HAVE  X\n                              PASSED THRU MIDNIGHT --- ADD 24 HRS\nROUNDETM AH    R7,=H'50'           ROUND VALUE TO NEAREST SECOND\n         LA    R4,MSGETIME\n         BAL   R8,TIME             FORMAT ELAPSED TIME FOR STEP\nMOVETME  MVC   ETME001C,MSGETIME\n         BAL   R14,PRINT\n         SPACE 1\n         TM    SMF4STI,B'00000001' WAS STEP FLUSHED?\n         BO    BODBORDR       IF IT WAS, BYPASS GENERATING             X\n                              PERFORMANCE INFORMATION\n         MVC   MSGAREA+1(130),STEPMSG4\n         BAL   R14,PRINT\n         SPACE 1\nSTEPMSG5 MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *\n         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1\n*              THE BLANKS ARE ALSO USED AS EDIT FILL BYTES\n         MVC   MSGAREA+1+10(11),=X'2020202020202020202120'\n*              COPY THE ABOVE PATTERN BASE FOR ALL OTHERS\n         MVC   MSGAREA+1+37(11),MSGAREA+1+10\n         MVC   MSGAREA+1+51(11),MSGAREA+1+10\n         MVC   MSGAREA+1+65(7),MSGAREA+1+14\n         MVC   MSGAREA+1+75(11),MSGAREA+1+10\n         MVC   MSGAREA+1+89(11),MSGAREA+1+10\n         MVC   MSGAREA+1+103(11),MSGAREA+1+10\n         MVC   MSGAREA+1+117(11),MSGAREA+1+10\n* POINT TO RELOCATE SECTION OF SMF RECORD TO GET MVS\n* PAGING/SWAP/PERFORMANCE INFORMATION\n         SR    R9,R9\n         ICM   R9,3,SMF4RLCT\n         LA    R9,SMFRCD4+4(R9)\n         USING SMF4PGIN,R9\n         SR    R1,R1\n         ICM   R1,3,SMF4PGNO       PERFORMANCE GROUP NUMBER\n         CVD   R1,DBLWORD\n         UNPK  MSGPGNO,DBLWORD+6(2)\n         OI    MSGPGNO+L'MSGPGNO-1,X'F0'\n         ICM   R7,15,SMF4ACT  GET STEP ACTIVE TIME (UNIT IS 1024       X\n                              MICROSECONDS)\n         SR    R6,R6               USE REGISTER PAIR TO HOLD VALUE\n         SLDL  R6,10               MULTIPLY BY 1024 TO GET MICROSECONDS\n         AL    R7,=A(5000)         ROUND TO NEAREST HUNDREDTH OF A SEC\n         BC    12,BC0010           BRANCH IF NO CARRY\n         LA    R6,1(R6)            INCREMENT R6 ON OVERFLOW FROM R7\nBC0010   D     R6,=A(10000)        REDUCE TO HUNDREDTHS OF SECONDS\n         LA    R4,MSGACT\n         BAL   R8,TIMETH           FORMAT STEP ACTIVE TIME\n         ICM   R1,15,SMF4SST       # SERVICE UNITS USED BY STEP\n         CVD   R1,DBLWORD\n         ED    MSGSST-1(12),DBLWORD+2\n         ICM   R1,15,SMF4PGIN\n         CVD   R1,DBLWORD\n         ED    MSGPGIN-1(12),DBLWORD+2\n         ICM   R1,15,SMF4PGOT\n         CVD   R1,DBLWORD\n         ED    MSGPGOT-1(12),DBLWORD+2\n         ICM   R1,15,SMF4NSW       # TIMES SWAPPED\n         CVD   R1,DBLWORD\n         ED    MSGNSW-1(8),DBLWORD+4\n         ICM   R1,15,SMF4PSI\n         CVD   R1,DBLWORD\n         ED    MSGPSI-1(12),DBLWORD+2\n         ICM   R1,15,SMF4PSO\n         CVD   R1,DBLWORD\n         ED    MSGPSO-1(12),DBLWORD+2\n         ICM   R1,15,SMF4VPI\n         CVD   R1,DBLWORD\n         ED    MSGVPI-1(12),DBLWORD+2\n         ICM   R1,15,SMF4VPO\n         CVD   R1,DBLWORD\n         ED    MSGVPO-1(12),DBLWORD+2\n         DROP  R9\n         BAL   R14,PRINT\n         SPACE 1\nBODBORDR MVC   MSGAREA+1(130),MSGAREA\n         CP    VIO,=P'0'           ANY VIO USAGE TO REPORT?\n         BE    PRNTBRDR\n         MVC   MSGVIOLA,VIOLABL\n         UNPK  MSGVIOCT,VIO\n         OI    MSGVIOCT+L'MSGVIOCT-1,X'F0'\n         MVI   MSGVIOSP,SPACE\nPRNTBRDR BAL   R14,PRINT           PRINT 2ND BORDER OF ASTERISKS\n         SPACE 1\n         L     R6,16          CVT ADDRESS\n         L     R4,0(,R6)      TCB/ASCB DBL WORDS\n         L     R4,12(,R4)     CURRENT ASCB ADDRESS\n         L     R6,204(,R6)    ACCTABLE ADDR FROM CVTUSER\n         LTR   R6,R6          IS THERE AN ADDR ??\n         BZ    NOEXCPTB       NO - BYPASS\n         USING ACCTABLE,R6    ADDRESSABILITY\n         CLC   UJIHDR,=CL8'UJITABLE'  VERIFY ACCTABLE\n         BNE   NOEXCPTB       NOT THERE - BYPASS\n         A     R6,UJITBLEN    POINT TO EXCP TABLE\n         DROP  R6\n         CLC   0(8,R6),=CL8'EXCPTABL'  VERIFY EXCPTABL\n         BNE   NOEXCPTB       NOT THERE - BYPASS\n         LH    R5,36(,R4)     GET ASID NUMBER\n         M     R4,=F'16'      GET DISPLACEMENT INTO EXCP TABLE\n         LA    R6,8(R5,R6)    POINT TO PROPER ASID ENTRY\n         USING EXCPTABL,R6    ADDRESSABILITY\n         CLC   SMF4RST,RDRTIME    COMPARE RDR START TIME\n         BNE   NOEXCPTB       NO MATCH - BYPASS\n         ICM   R0,15,EXCPCNT    COPY DYNAMIC ALLOC EXCP-S\n         A     R0,MSVEXCP     COMBINE WITH NON DYNAMIC EXCPS\n         ST    R0,MSVEXCP     SAVE FOR DOLLAR CALCULATIONS\n         DROP  R6\nNOEXCPTB DS    0H\n         MVI   MSGAREA+1,SPACE     CLEAR ALL BUT 1ST AND LAST *\n         MVC   MSGAREA+2(L'MSGAREA-3),MSGAREA+1\n         MVC   BLOCKC1,=C'CPU $ (' INSERT HEADERS\n         MVC   BLOCKC2,=C') + EXCP $ ('\n         MVC   BLOCKC3,=C') + MEMORY $ ('\n         MVC   BLOCKC4,=C') = TOTAL $ ('\n         MVI   BLOCKC5,C')'\n         L     R5,MSVCPU          CPU TIME\n         M     R4,=A(36)\n         D     R4,=A(100)\n         LR    R0,R5              = HUND OF $ CPU CHARGE\n         LR    R1,R5\n         BAL   R6,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKCP$,WRK$0PAT+1\n         L     R5,MSVEXCP         GET HELD EXCP SUM\n         M     R4,=A(135)\n         D     R4,=A(1000)\n         AR    R0,R5              = HUND OF $ EXCP CHARGE\n         LR    R1,R5\n         BAL   R6,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKEX$,WRK$0PAT+1\n         L     R5,MSVMEM          MEMORY USED IN 1K UNITS\n         SRL   R5,1               DIV BY 2 FOR 2K UNITS\n         M     R4,=A(57)\n         L     R4,MSVCPU          CPU USED\n         MR    R4,R4\n         D     R4,=A(10000)\n         AR    R0,R5              = HUND OF $ MEMORY CHARGE\n         LR    R1,R5\n         BAL   R6,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKME$,WRK$0PAT+1\n         LR    R1,R0              GET HUND OF $ TOTAL CHARGE\n         BAL   R6,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKTO$,WRK$0PAT+1\n         BAL   R14,PRINT           PRINT DOLLAR LINE\n         MVC   MSGAREA+1(130),MSGAREA      FILL LINE WITH *\n         BAL   R14,PRINT           PRINT BOTTOM BORDER OF ASTERISKS\n         SPACE 1\n         WTO   MF=(E,WTOAREA)      WRITE STEP STATISTICS MESSAGE TO    X\n                                   CONSOLE\n         SPACE 1\n* CHECK TO SEE IF USER HAS REQUESTED THAT NOTIFICATION OF\n* BACKGROUND JOB STEP TERMINATION BE SENT TO HIS TSO TERMINAL\n         SPACE 1\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\n*        SEND JOB STEP/LOGOFF NOTIFICATION TO TSO USER                *\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\n         MVI   SENDSW,X'00'        INITIALIZE INDICATOR\n         CLI   SMF4RTY,34          TYPE 34 RECORD?\n         BE    NOTIFY34            YES, GO SET UP FOR SAYONARA\n         LA    R6,SMF4LENN         -->  LEN FACTOR FOR DEVICES\n         AH    R6,SMF4LENN         POINT TO ACCTG FIELDS\n         SR    R4,R4               CLEAR WORK REG\n         IC    R4,4(R6)            GET NO. ACCT FIELDS\n         LTR   R4,R4               ANY ACCT FIELDS FROM EXEC STMT?\n         BZ    EXIT                NO - NO TSO NOTIFY\n         LA    R6,5(R6)            POINT TO 1ST ACCT FIELD\n         CLI   0(R6),X'06'         LENGTH 6 FROM 'NOTIFY'?\n         BNE   EXIT                NO - NO TSO NOTIFY\n         CLC   1(6,R6),NOTIFY      IS 1ST PARM 'NOTIFY'?\n         BNE   EXIT                NO - NO TSO NOTIFY\n         BCTR  R4,0                SUB 1 FROM NO. FIELDS\n         LTR   R4,R4               WAS 'NOTIFY' ONLY FIELD?\n         BZ    EXIT                YES - THEN NO TSO NOTIFY\n         LA    R6,7(,R6)           GET ADDR FOR 1ST FLD PAST ENTRY\nUID34    MVC   SEND(L'SEPFXFMT),SEPFXFMT  MOVE MASK\n*              INSURE SHASHS (/-S) ARE EVERY PLACE NEEDED\n         MVC   SEND+L'SEPFXFMT(SELEN-L'SEPFXFMT),SEND+L'SEPFXFMT-1\n         L     R1,LCTJSCB          POINT TO P/P JSCB\n         L     R1,JSCBSSIB-IEZJSCB(R1)\n         MVC   SEJOB#,X'0C'(R1)    GET JES2 JOB# FROM SSIB\n         OC    SEJOB#+3(4),=C'0000'  CHANGE BLANKS TO ZEROS\n         MVC   JBNTSO,JBN001C      MOVE JOBNAME INTO MESSAGE\n         MVC   TERMTSO,TERM001C    MOVE STEP TERM CODE TO MSG\n*\n         CLC   SMF4STMN(8),TAGNAME 'TELAGRAF' PROC ?\n         BNE   NOTAG               NO, NO VECTOR COUNTS\n         L     R14,16              R14-->CVT\n         L     R14,0(R14)          R14-->TCB WORDS\n         L     R14,4(R14)          R14-->TCB\nGOTINIT  L     R7,132(R14)         R7-->OTC\n         LTR   R7,R7               TOP OF TCB CHAIN ?\n         BZ    GVEC                YES, GET VECTOR COUNT\n         LR    R14,R7              R14-->OTC\n         B     GOTINIT\nGVEC     MVC   SMF4AST(4),168(R14) SAVE TELAGRAF VECTOR COUNT...\n*                                  ...IN 34 RCD - USE DEVICE ALLOC\n*                                  ...START TIME FIELD\n         L     R7,168(R14)         R14 = TELAGRAF VECTOR COUNT\n         XC    DUBLWORK,DUBLWORK\n         CVD   R7,DUBLWORK\n         UNPK  TERMTSO(5),DUBLWORK+5(3)\n         OI    TERMTSO+4,X'F0'\n         SR    R7,R7\n         ST    R7,168(R14)         RESET TCB VECTOR COUNT\n*\nNOTAG    MVC   PGMNTSO,PGMN001C    MOVE PROGRAM NAME\n         MVC   CPUTTSO,CPUT001C    MOVE CPU TIME\n         MVC   ETIMETSO,ETME001C   MOVE ELAPSED TIME\n         MVC   ACCTTSO,ACCT001C    MOVE ACCOUNT INFO\n         MVC   SUBATSO,SUBA001C    MOVE SUB ACCOUNT INFO\n         MVC   JBNTSO,JBN001C      MOVE JOBNAME\n         MVC   TSOA,TSOTRLR        MOVE ',LOGON,USER=(\n         XC    TSOU,TSOU           CLEAR WORK AREA (MCS?)\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\n         LA    R14,TSOU            TARGET FOR 1ST ID FIELD\nGETUID   SR    R7,R7               CLEAR WORK REG\n         IC    R7,0(R6)            GET USERID LENGTH\n         LTR   R7,R7               0? (NULL PARM)\n         BZ    NEXTID              YES - GET NEXT ID\n         CLI   0(R6),X'07'         LEN MORE THAN 7 CHARS?\n         BH    IDTOLONG            YES - IGNORE IT\n         BCTR  R7,0                DECREM FOR EX\n         EX    R7,MVCUID           MOVE USERID TO SEND MSG\n         MVI   SENDSW,X'FF'        INDICATE NOTIFY MSG TO SEND\n         LA    R15,1(R7,R14)       POINT TO 1ST CHAR AFTER ID\n         MVI   0(R15),C','         MOVE ID SEPARATOR\n         LA    R7,1(R7)            UNADJUST FROM EX\n         LA    R14,1(R14)          ADJUST FOR COMMA\nNEXTID   LA    R14,0(R7,R14)       TARGET FOR NEXT ID\nIDTOLONG LA    R6,1(R7,R6)         GET ADDR NEXT ID PARM\n         CLI   TERM001C,C'0'       WAS STEP RC = 0?\n         BE    EOSEND              YES - THEN NO MORE NOTIFIES\n         BCT   R4,GETUID           GO GET NEXT USERID\nEOSEND   CLI   SENDSW,X'FF'        IS THERE A NOTIFY MSG TO SEND?\n         BNE   EXIT                NO, THEN WRITE STEP END MSG TO CON\n         BCTR  R14,0               YES, BACK UP TO SET ')'\n         MVI   0(R14),C')'         DOIT\n         LA    R4,TSOSE-1          GET BEGIN ADDR OF MSG\n         SR    R14,R4              GET LENGTH OF NOTIFY MSG\n         SLL   R14,16              SHIFT\n         ST    R14,TSOSE           SET LENGTH\n         LA    1,1(R4)             SVC 34 PARM ADDR\n         SR    R0,R0               CLEAR REGISTER 0\n         SVC   34                  **** TSO STEP NOTIFY MESSAGE ****\n         B     EXIT\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\n*        BUILD PARAMATER LIST FOR 'CCI000I' MESSAGE AT TSO LOGOFF     *\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\n*\n*        GET LINE ADDRESS FROM TSB AND PLUG INTO TYPE 34\n*    (IF VTAM LINE, PACK LOW ORDER 3 BYTES OF TERM SYMBOLIC NAME)\n*    (INSURE NUMERIC, AND FORCE VALUE TO BE AT LEAST 800 DECIMAL)\n*\nNOTIFY34 L     R6,16               R4-->CVT\n         L     R6,0(,R6)           R4-->TCB/ASCB DBL WRDS\n         L     R6,12(,R6)          R4-->CURRENT ASCB\n         XC    SMF4SYST(2),SMF4SYST  CLEAR NOT NEEDED 2 BYTES\n         CLC   0(4,R6),=C'ASCB'    ENSURE VALIDITY\n         BNE   ASCBNOF             INVALID, NOTIFY OPERATOR\n         L     R6,60(R6)           R6-->TSB\n         TM    25(R6),X'01'        THIS A VTAM TSB?\n         BO    VTAMTSB             YES - GO GET TERM NAME\n         MVC   SMF4SYST(2),82(R6)  GET  TSBLINE (TCAM'S)\n         B     SETSAYO             BACK IN LINE CODE\nVTAMTSB  LA    R4,109(,R6)         --> XXX OF LOCNSXXX\n         CLI   104(R6),C'L'        IS IT LOCAL TERM?\n         BE    VTAMLOC             YES - USE R4 AS IS\n         CLI   104(R6),C'T'        IS IT NCP TERM?\n         BNE   SETSAYO             NO - IGNORE\n         LA    R4,106(,R6)         --> XXX OF TMXXXNN\nVTAMLOC  LA    R6,2(,R4)           --> LAST BYTE\n         LA    R7,DBLWORD+4        --> TARGET WORK AREA\nVTAMTST  LA    R1,VTAMTBL          --> VALID DIGITS TABLE\nVTAMLOP  CLC   0(1,R4),0(R1)       BYTE IN TABLE?\n         BL    SETSAYO             NO - IGNORE\n         BE    VTAMHIT             YES - GET REPLACEMENT\n         LA    R1,2(,R1)           ADVANCE IN TABLE\n         B     VTAMLOP             CONTINUE TEST\n         SPACE 1\nVTAMHIT  MVC   0(1,R7),1(R1)       PUT X'0X' TO TARGET\n         CR    R6,R4               END OF CONVERSION?\n         BNH   VTAMCON             YES - PACK 'EM IN\n         LA    R4,1(,R4)           ADVANCE TO NEXT INPUT BYTE\n         LA    R7,1(,R7)           ADVANCE TO NEXT OUTPUT BYTE\n         B     VTAMTST             CONTINUE TEST\n         SPACE 1\nVTAMCON  PACK  DBLWORD(3),DBLWORD+4(4)  PACK NUMERIC PART\n         MVC   SMF4SYST(2),DBLWORD MOVE TO SMF RECORD\n         OI    SMF4SYST,X'08'      FORCE AT LEAST 800 SERIES NUMBERS\n*\n*        NOW SEND LOGOFF MSG TO TSO USER\n*\nSETSAYO  MVC   SEND34+1(8),JBN001C FOR DUMMY ACCT PARM\n         LA    R6,0                INIT CTR\n         LA    R4,8                LOOP CTL\n         LA    R7,JBN001C          SET TO SCAN USERID FLD\nGETLEN   CLI   0(R7),C' '          END OF USERID?\n         BE    GOTLEN              YES - SET LEN IN DUMMY PARM\n         LA    R6,1(R6)            UP COUNT OF CHARS\n         LA    R7,1(R7)            NEXT CHAR IN USERID FLD\n         BCT   R4,GETLEN           SCAN\nGOTLEN   STC   R6,SEND34           SET LEN IN DUMMY PARM\n         LA    R4,2                SET NO. IDS TO NOTIFY\n         LA    R7,SEND34           START ADDR OF PARM LIST\n         STC   R6,1(R6,R7)         SET 2ND LEN FIELD\n         LA    R7,2(R6,R7)         POINT TO 2ND FLD IN LIST\n         MVC   0(8,R7),JBN001C     MOVE IN USERID\n         LA    R6,SEND34           SET PARM ADDR FOR SCANNING\n         B     UID34               GO FAKE IT OUT\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*\nASCBNOF  WTO   '* NO TSU ASCB *'\n         B     SETSAYO\n         SPACE 3\n* EXIT PROCESSING - CANCEL ESTAE, FREE WORKAREA, RESTORE REGISTERS, &\n* RETURN TO CALLER\n         SPACE 1\nEXIT     ESTAE 0\nEXIT1    DS    0H\n*        L     R15,=V(IBMACTRT)       @ ACF2 TRT EXIT DRIVER  WAW\n*        L     R14,SAVE13             @ OUR ORIGINAL REGS\n*        LM    R0,R12,20(R14)         RESTORE REGS 0-12\n*        BALR  R14,R15                CALL ACF76TRT\n         L     R10,SAVE10-WORKAREA(,R13)  RELOAD BASE REG\n         LR    R1,R13\n         L     R13,SAVE13\n         L     R0,WKAREALN\n         FREEMAIN R,LV=(0),A=(1)\n         LM    R14,R12,12(R13)     RESTORE REGS\n         SR    R1,R1\n         SR    R15,R15\n         BR    R14                 RETURN TO CALLER\n         SPACE 3\nSTAEFAIL MVC   WTOAREA(WTOSTAEL),WTOSTAE\n         CVD   R15,DBLWORD\n         UNPK  STAERC,DBLWORD+6(2)\n         OI    STAERC+L'STAERC-1,X'F0'\n         WTO   MF=(E,WTOAREA)\n         B     EXIT1\n         SPACE 3\n         TITLE 'IEFACTRT - SUBROUTINES'\n*\n*        T I M E  CONVERTS 4 BYTES BINARY TIME TO THE PRINT\n*        FORMAT 'HH:MM:SS'.  REGISTER USAGE IS AS FOLLOWS-\n*              R1  NOT USED BY 'TIME' - RESERVED FOR 'TIMETH'\n*                      ROUTINE, TO SAVE RETURN ADDRESS\n*              R4  POINTS TO LOCATION FOR TIME\n*              R6  USED FOR DIVIDE\n*              R7  USED FOR DIVIDE (CONTAINS TIME IN HUNDREDTHS OF\n*                      SECONDS, ON ENTRY)\n*              R8  RETURN REGISTER\n*\n*        THIS ROUTINE INSERTS THE :-S AND .-S\n*\n         SPACE 1\nTIME     SR    R6,R6\n         D     R6,F360000          DIVIDE BY 360000 TO GET HOURS\n         CVD   R7,DBLWORD          CONVERT HOURS TO PACKED DECIMAL\n         UNPK  0(2,R4),DBLWORD+6(2)  UNPACK HOURS\n         OI    1(R4),X'F0'         FIX SIGN\n         SRDL  R6,32               MAKE REMAINDER A DBLWORD WORD\n         D     R6,F6000            DIVIDE BY 6000 TO GET MINUTES\n         CVD   R7,DBLWORD          CONVERT MINUTES TO PACKED DECIMAL\n         UNPK  3(2,R4),DBLWORD+6(2)  UNPACK MINUTES\n         OI    4(R4),X'F0'         FIX SIGN\n         SRDL  R6,32               MAKE SEC A DBLWORD WORD IN R6 & 7\n         D     R6,F100             GET RID OF TENTHS AND HUNDREDTHS\n         CVD   R7,DBLWORD          CONVERT SECONDS TO PACKED DECIMAL\n         UNPK  6(2,R4),DBLWORD+6(2)  UNPACK SECONDS\n         OI    7(R4),X'F0'         FIX SIGN\n         MVI   2(R4),C':'          1ST COLON\n         MVI   5(R4),C':'          2ND COLON\n* NOTE THAT R6 CONTAINS TENTHS & HUNDREDS OF SECONDS. ---THIS\n* VALUE MAY BE USED AFTER RETURN TO CALLER TO EXPAND TIME\n* FROM 'HH:MM:SS' FORMAT TO 'HH:MM:SS.TH' FORMAT.\n         BR    R8                  RETURN\n         SPACE 1\n*        T I M E T H  ADDS TENTHS AND HUNDREDTHS OF SECONDS TO\n*        THE TIME FORMATTED AS 'HH:MM:SS' BY 'TIME' SUBROUTINE\n         SPACE 1\nTIMETH   LR    R1,R8               SAVE RETURN ADDRESS\n         BAL   R8,TIME\n         CVD   R6,DBLWORD\n         UNPK  9(2,R4),DBLWORD+6(2)\n         OI    10(R4),X'F0'\n         MVI   8(R4),C'.'          1ST DOT\n         BR    R1\n         SPACE 3\n*\n*        P R I N T  OUTPUTS A 132 BYTE MESSAGE AT JOB OR STEP\n*        TERMINATION TO THE SYSPRINT DEVICE.  REGISTER USAGE IS AS\n*        FOLLOWS-\n*              R12  ADDRESS OF LINKAGE CONTROL TABLE\n*              R13  POINTS TO 45 WORD AREA\n*              R14  RETURN REGISTER (PRE-LOADED BY CALLER)\n*              R15  ENTRY POINT TO IEFYS\n*\n         SPACE 1\nPRINT    CLI   SMF4RTY,34          TSO STEP TERMINATION?\n         BER   R14            ... SAVE THE CYCLES --- WE'RE            X\n                              SENDING TSO LOGON JCL TO THE             X\n                              'TRASHWTR' AT THIS TIME...\n         LA    R15,MSGAREA         GET ADDRESS OF MESSAGE\n         ST    R15,36(R12)\n         MVC   42(2,R12),MSGLENG   PASS MESSAGE LENGTH\n         L     R15,VIEFYS          GET ENTRY POINT ADDRESS\n         BR    R15                 GO THERE!\n         SPACE 1\n*\n*        B 2 $  CONVERTS A BINARY DOLLAR AMMOUNT TO EBCDIC\n*        AND FORMATS IT FOR PRINTING\n*\n*              R1   BINARY DOLLAR AND CENTS VALUE\n*              R6   RETURN REGISTER\n*              DBLWORD IS A DOUBLE WORD WORK AREA\n*              WRK$0PAT IS A 10 BYTE WORK AREA\n*\nB2$      CVD   R1,DBLWORD\n         OI    DBLWORD+7,X'0F'\n         MVC   WRK$0PAT,=X'4020206B2021204B2020'\n         ED    WRK$0PAT,DBLWORD+4\n         BR    R6\n         SPACE 1\n         TITLE 'IEFACTRT - CONSTANTS AND WORK AREAS'\n* EX-EXUTED INSTRUCTIONS\nMVCUID   MVC   0(0,R14),1(R6)\nMOVACCT1 MVC   ACCT001C(1),1(R1)\nMOVACCT2 MVC   SUBA001C(1),1(R1)\nX0F      DC    F'15'\n         SPACE 1\nVIEFYS   DC    0F'0',V(IEFYS)\nVCOREFMT GETMAIN EC,SP=&SP,MF=L\nVCORELN  EQU   *-VCOREFMT\nMSGLENG  DC    AL2(L'MSGAREA)\nSTAELFRM ESTAE TERM=NO,MF=L\nSTAELN   EQU   *-STAELFRM\nWKAREALN DC    0F'0',AL1(&SP),AL3(AREASIZE)\nMIDTIME  DC    A(24*60*60*100)     1 DAY (IN HUNDREDTHS OF SECONDS)\nF360000  DC    A(60*60*100)        1 HOUR ( \" \" \" )\nF6000    DC    A(60*100)           1 MINUTE ( \" \" \" )\nF100     DC    F'100'              1 SECOND ( \" \" \" )\n         LTORG\nVTAMTBL  DC    C'A',X'0A'          FOR VTAM TERMINAL ID CONVERSION\n         DC    C'B',X'0B'\n         DC    C'C',X'0C'\n         DC    C'D',X'0D'\n         DC    C'E',X'0E'\n         DC    C'F',X'0F'\n         DC    C'0',X'00'\n         DC    C'1',X'01'\n         DC    C'2',X'02'\n         DC    C'3',X'03'\n         DC    C'4',X'04'\n         DC    C'5',X'05'\n         DC    C'6',X'06'\n         DC    C'7',X'07'\n         DC    C'8',X'08'\n         DC    C'9',X'09'\n         DC    X'FF'              STOPPER\nHEXTRANS DC    C'0123456789ABCDEF'\n         SPACE 1\nJCRLJOB  DC    C' JOBCARD READ'\nJCRLTSO  DC    C' TSO LOGON AT'\nDTFMT    DC    C' YYDDD HH:MM:SS '\nVIOLABL  DC    C' VIO IO '\n         SPACE 1\nHDRMSG   DC    C'PRC-CCI  370/XXX VS2 RXX.XX XXXX  STEP STATISTICS'\n         SPACE 1\nSTEPMSG1 DC    C'  STEP NAME'                    25\nMSGCORE1 DC    C'USER CORE        *****K'        26\n         ORG   MSGCORE1+16\n         DC    X'402020202120'\n         ORG\nSM1B     DC    C'TAPES USED/IO'                  30\nSM1C     DC    C'START   TIME'                   26\nSM1D     DC    C'TCB TIME'                       23\n         SPACE 1\nSTEPMSG2 DC    C'  PGM  NAME'                    25\nMSGCORE2 DC    C'SYSTEM CORE      *****K'        26\n         ORG   MSGCORE2+16\n         DC    X'402020202120'\n         ORG\nSM2B     DC    C'DISKS USED/IO'                  30\nSM2C     DC    C'STOP    TIME'                   26\nSM2D     DC    C'SRB TIME'                       23\n         SPACE 1\nSTEPMSG3 DC    C'        CODE'                   25\nSPACES   EQU   STEPMSG3,8\nMSGCORE3 DC    C'PRIVATE AREA SZ  *****K'        28\n         ORG   MSGCORE3+16\n         DC    X'402020202120'\n         ORG\nSM3B     DC    C'  ALLOC TIME'                   28\nSM3C     DC    C'ELAPSED TIME'                   26\nSM3D     DC    C'  PGM LOAD'                     23\n         SPACE 1\nSTEPMSG4 DC    C'* PGNO * NR SRV UNITS * ACTIVE TIME *'\n         DC    C'* PAGES IN *** PAGES OUT ** # SWAPS * PGS SWAP IN * '\n         DC    C'PGS SWAP OUT * VIO PGS IN * VIO PGS OUT *'\n         SPACE 1\n         ORG\n         SPACE 1\nSEPFXFMT DC    C'SE ''(JES2JOB#) /'\n         SPACE 1\nWTO001C  WTO   'CCI001C (JS#XXX)/PGMNAMEX/CP:UT:IM.EX/WA:LL:TI/NOXEC/  X\n                     /JOBNAMEX',                                       X\n               ROUTCDE=(2),DESC=(6),MF=L\nWTO001CL EQU   *-WTO001C\n         SPACE 1\n*    +4        +012345678 901234567 89012345678901234567890123\nWTOSTAE  WTO   'CCI001D ''IEFACTRT'' ESTAE ENV FAILED (RC=XXX)',       X\n               ROUTCDE=(2,10),DESC=4,MF=L\nWTOSTAEL EQU   *-WTOSTAE\n         SPACE 1\nTAGNAME  DC    CL8'TELAGRAF'\nNOTIFY   DC    CL6'NOTIFY'\nTSOTRLR  DC    CL14''',LOGON,USER=('\n         TITLE 'IEFACTRT - ESTAE ERROR RECOVERY CODE'\n         DROP  R13,R10\n         USING ERREXIT,R15\nERREXIT  CH    R0,=H'12'           WAS AN SDWA SUCCESSFULLY OBTAINED?\n         BE    NOSDWA              IF NOT - RETURN QUICKLY\n         STM   R14,R12,12(R13)\n         LA    R10,0(R15)\n         SH    R10,=AL2(ERREXIT-IEFACTRT)\n         DROP  R15\n         USING IEFACTRT,R10\n         LR    R8,R15              MAKE ME A BASE\n         USING ERREXIT,R8\n         L     R2,0(R1)\n         L     R2,4(R2)\n         USING WORKAREA,R2\n         MVC   RUB,=B'0000000000100100'      INDICATE 'REGISTER        X\n                              UPDATE BLOCK' CONTAINS VALUES FOR        X\n                              REGS 10 AND 13\n         SETRP REGS=(14,12),RC=4,RETADDR=RETRY1,RETREGS=YES,RUB=RUB,   X\n               FRESDWA=YES,RECORD=YES,COMPCOD=(484,USER)\n         DROP  R10,R2\n         USING WORKAREA,R13\n         USING IEFACTRT,R10\nRETRY1   WTO   MF=(E,ABEWTO)       WRITE MESSAGE DOCUMENTING           X\n                              PROGRAM FAILURE --- FETCH THE SOFTWARE   X\n                              RECORD FROM LOGREC FOR DETAILS!\n         B     EXIT\n         SPACE 2\n         DROP  R13,R10,R8\n         USING ERREXIT,R15\nNOSDWA   LA    R0,RETRY2           ADDRESS OF RETRY ROUTINE\n         LA    R15,4               REQUEST SCHEDULING OF RETRY ROUTINE\n         DROP  R15\n         BR    R14                 RETURN\n         USING RETRY2,R15\nRETRY2   L     R10,0(R1)\n         L     R13,4(R1)\n         DROP  R15\n         USING WORKAREA,R13\n         USING IEFACTRT,R10\n         B     EXIT\n         SPACE 2\n         LTORG\nABEWTO   WTO   'CCI001D ''IEFACTRT'' ABEND',                           X\n               ROUTCDE=(2,10),DESC=4,MF=L\n         SPACE 1\nPTCHAREA DC    0D'0',8CL8'PTCHAREA'  *** PATCH AREA ***\n         TITLE 'IEFACTRT - DSECTS AND WORK AREAS'\nACCTABLE DSECT\nUJITBLEN DC    F'0'           LENGTH OF ACCT TABLE\nUJIHDR   DC    CL8'UJITABLE'  TABLE IDENTIFICATION\nSTART1   DC    F'0'\nSTART2   DC    F'0'\nSTART3   DC    F'0'\nSTART4   DC    F'0'\nSTART5   DC    F'0'\nSTART6   DC    F'0'\nSTART7   DC    F'0'\nSTARTP   DC    F'0'\nSTARTEND DC    X'FF'          END OF ADDRESS TABLE\n*\nRVOLS    DC    50XL10'00'     RESIDENT VOLSER LIST\nRVOLSEND DC    X'FF'          END OF RESIDENT VOLSER LIST\n*\nMMAP     DC    125X'00'       'M' ACCOUNTS BITMAP\nCMAP     DC    125X'00'       'C' ACCOUNTS BITMAP\nEMAP     DC    125X'00'       'E' ACCOUNTS BITMAP\nFMAP     DC    125X'00'       'F' ACCOUNTS BITMAP\nIMAP     DC    125X'00'       'I' ACCOUNTS BITMAP\nHMAP     DC    125X'00'       'H' ACCOUNTS BITMAP\nRMAP     DC    125X'00'       'R' ACCOUNTS BITMAP\nTOTABLEN DC    F'0'           TOTAL LEN OF CSA TABLE\nTBFIX    EQU   *-ACCTABLE     LENGTH OF FIXED PORTION\nNUMBERS  EQU   *\n         SPACE 3\nEXCPTABL DSECT\nRDRTIME  DS    F              READER START TIME\nEXCPCNT  DS    F              EXCP COUNT FROM TYPE 40 RECORDS\n         SPACE 3\nWORKAREA DSECT                     GETMAINED WORKAREA\nSAVEAREA DS    45F            'IEFYS' REQUIRES R13 POINT TO A          X\n                              45 WORD WORKAREA\n         ORG   SAVEAREA+18*4\nDBLWORD  DS    D                   *\nFULLWORD DS    F                   * WORKAREAS WHOSE CONTENTS ARE\nFULLWRDS DS    2F                  * WORK FOR UCB SCAN &\nAREAADDR DS    F                   * VOLITILE ACROSS CALLS TO 'IEFYS'\nVCORE    DS    CL(VCORELN)         *\n         ORG\nSAVE10   DS    F                   SAVE OUR BASE REG\nSAVE13   DS    F                   SAVE CALLER'S R13\nDUBLWORK DS    D\nMSVCPU   DS    F                   SAVE STEP CPU TIME X.XX SEC BINARY\nMSVEXCP  DS    F                   SAVE TOTAL EXCPS BINARY\nMSVMEM   DS    F                   SAVE USER MEMORY 1K BYTES BINARY\nWRK$0PAT DS    CL10                WORK AREA FOR EDIT INSTR\n         SPACE 2\nMSGAREA  DS    CL132\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN MSGAREA FOR DOLLAR TOTAL LINE\nBLOCKC1  EQU   MSGAREA+03,7        C'CPU $ ('\nBLOCKCP$ EQU   MSGAREA+10,9        CPU $-S\nBLOCKC2  EQU   MSGAREA+19,12       C') + EXCP $ ('\nBLOCKEX$ EQU   MSGAREA+31,9        EXCP $-S\nBLOCKC3  EQU   MSGAREA+40,14       C') + MEMORY $ ('\nBLOCKME$ EQU   MSGAREA+54,9        MEMORY $-S\nBLOCKC4  EQU   MSGAREA+63,13       C') = TOTAL $ ('\nBLOCKTO$ EQU   MSGAREA+76,9        TOTAL $-S\nBLOCKC5  EQU   MSGAREA+85,1        C')'\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN TOP ROW OF ASTERISKS FOR FIRST STEP\n* OF JOB\n         ORG   MSGAREA+4\nMSGJCRL  DS    C' JOBCARD READ'\nMSGJCRDT DS    C' YYDDD HH:MM:SS '\n         ORG   MSGJCRDT+1\nMSGJCRD  DS    CL5                 JULIAN DATE WHEN JOB ENTERED SYSTEM\n         DS    CL1\nMSGJCRT  DS    CL8                 TIME OF DAY WHEN JOB ENTERED SYSTEM\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN MESSAGE HEADER LINE\n         ORG   MSGAREA+43\nMSGHDR   DS    C'PRC-CCI  370/XXX VS2 RXX.XX XXXX  STEP STATISTICS'\n         ORG   MSGHDR+13\nHDRMODNR DS    CL3                 CPU MODEL (E.G., '158')\n         DS    CL6\nHDRNUMB  DS    CL2                 OPERATING SYSTEM RELEASE NUMBER\n         DS    CL1\nHDRSUBNM DS    CL2                 SUBRELEASE NUMBER\n         DS    CL1\nHDRSID   DS    CL4                 SMF SYSTEM ID CODE\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN 'STEPMSG1'\n         ORG   MSGAREA+14\nMSGSTPN  DS    CL8                 JOBSTEP NAME\n         ORG   MSGAREA+43\nMSGUCORE DS    CL5\n         ORG   MSGAREA+66\nMSG#TAPE DS    CL3                 # TAPE DEVICES ALLOCATED BY STEP\n         DS    CL1\nMSGTEXCP DS    CL9\n         ORG   MSGAREA+96\nMSGSTIME DS    CL8\n         ORG   MSGAREA+118\nMSGTCBTM DS    CL11\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN 'STEPMSG2'\n         ORG   MSGAREA+14\nMSGPGMN  DS    CL8\n         ORG   MSGAREA+43\nMSGSCORE DS    CL5\n         ORG   MSGAREA+66\nMSG#DISK DS    CL3                 # DASD DEVICES ALLOCATED BY STEP\n         DS    CL1\nMSGDEXCP DS    CL9\n         ORG   MSGAREA+96\nMSGPTIME DS    CL8\n         ORG   MSGAREA+118\nMSGSRBTM DS    CL11\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN 'STEPMSG3'\n         ORG   MSGAREA+4\nMSGNOEXC DS    C'-STEP NOT EXECUTED-'\n         ORG   MSGAREA+4\nMSGTTYPE DS    CL4\n         ORG   MSGAREA+15\nMSGATYPE DS    CL1\n         DS    CL1\nMSGCODE4 DS    0CL4\nMSGCODE3 DS    CL3\n         DS    CL1\n         ORG   MSGAREA+43\nMSGARESZ DS    CL5\n         DS    CL2\nMSGVRIND DS    CL3\n         ORG   MSGAREA+68\nMSGATIME DS    CL8\n         ORG   MSGAREA+96\nMSGETIME DS    CL8\n         ORG   MSGAREA+120\nMSGLTIME DS    CL8\n         SPACE 1\n* DEFINE VARIABLE FIELDS AT 'STEPMSG5'\n         ORG   MSGAREA+4\nMSGPGNO  DS    CL3                 PERFORMANCE GROUP NUMBER\n         ORG   MSGAREA+11\nMSGSST   DS    CL11                # SERVICE UNITS USED BY STEP\n         ORG   MSGAREA+25\nMSGACT   DS    C'HH:MM:SS.TH'      STEP ACTIVE TIME\n         ORG   MSGAREA+38\nMSGPGIN  DS    CL11\n         ORG   MSGAREA+52\nMSGPGOT  DS    CL11\n         ORG   MSGAREA+66\nMSGNSW   DS    CL7\n         ORG   MSGAREA+76\nMSGPSI   DS    CL11\n         ORG   MSGAREA+90\nMSGPSO   DS    CL11\n         ORG   MSGAREA+104\nMSGVPI   DS    CL11\n         ORG   MSGAREA+118\nMSGVPO   DS    CL11\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN BOTTOM BORDER OF ASTERISKS\n         ORG   MSGAREA+105\nMSGVIOLA DS    CL(L'VIOLABL)\nMSGVIOCT DS    CL9                 # VIO EXCPS USED IN STEP\nMSGVIOSP DS    CL1\n         SPACE 2\n         ORG\n         SPACE 2\nWTOAREA  DS    0F,CL(WTO001CL)\n         ORG   WTOAREA\n         DS    CL(WTOSTAEL)\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN STEP STATISTICS SUMMARY WTO MESSAGE\n         ORG   WTOAREA+4+8\nSTPN001C DS    CL8                 STEPNAME\nSTP#001C EQU   STPN001C+4,3        STEP # IF NO STEP NAME\n         DS    CL1\nPGMN001C DS    CL8                 PROGRAM NAME (FROM JCL 'EXEC' CARD)\n         DS    CL1\nCPUT001C DS    CL11                CPU TIME USED BY STEP\n         DS    CL1\nETME001C DS    CL8                 ELAPSED TIME FOR STEP\n         DS    CL1\nTERM001C DS    CL1                 * STEP EXECUTION STATUS\nCODE001C DS    CL4                 * AND/OR TERMINATION CODE\n         DS    CL1\nACCT001C DS    CL4                 JOB ACCOUNTING INFO\nSUBA001C DS    CL4\n         DS    CL1\nJBN001C  DS    CL8                 JOBNAME\n         SPACE 1\n* DEFINE VARIABLE FIELDS IN ESTAE-FAILED MESSAGE\n         ORG   WTOAREA+4+40\nSTAERC   DS    CL3                 RETURN CODE FROM ESTAE SVC\n         ORG\n         SPACE 2\n#DISKS   DS    D\nDIO      DS    D\nVIO      DS    D\nIOSW     DS    XL1\n         DS    0H *********** REGISTER UPDATE BLOCK (I.E., 'RUB') ---\nRUB      DS    XL2          * 'RUB' MUST BE ON A HALFWORD BOUNDARY     X\n                            * THAT IS NOT ALSO A FULLWORD BOUNDARY,    X\n                            * AND MUST IMMEDIATELY PRECEED 'STAER10'\n*                           * AND 'STAER13', IN PRECISELY THAT ORDER\nSTAEPRMS DS    0F           *\nSTAER10  DS    F            *\nSTAER13  DS    F ************\nSTAELIST DS    CL(STAELN)\n         DS    0D\n         ORG\n*  MESSAGE TO TSO USER WITH ACCT=(NOTIFY,USERID) PARAMETER\nTSOSE    DS    F\nTSOSEND  DS    0CL86\nSEND     DS    C'SE'\nSPACE1   DS    X'40'\nQUOTE1   DS    X'7D'\n         DS    C'('\nSEJOB#   DS    CL8'JOB00000'       JES2  JOB/TSU  NUMBER\n         DS    CL2') '\nJBNTSO   DS    CL8                 JOBNAME\n         DS    C'/'\nPGMNTSO  DS    CL8                 PROGRAM NAME\n         DS    C'/'\nTERMTSO  DS    CL5                 TERMINATION CODE\n         DS    C'/'\nCPUTTSO  DS    CL11                CPU TIME USED BY STEP\n         DS    C'/'\nETIMETSO DS    CL8                 ELAPSED TIME FOR STEP\n         DS    C'/'\nACCTTSO  DS    CL4                 JOB ACCOUNTING INFORMATION\nSUBATSO  DS    CL4\n         DS    C'/'\nEOSE     EQU   *\nSELEN    EQU   EOSE-SEND\nTSOA     DS    CL14                FOR ',LOGON,USER=('\nTSOU     DS    CL32              FOR '7777777,7777777,7777777,7777777)'\nSEND34   DS    CL18\nSENDSW   DS    C\nAREASIZE EQU   *-WORKAREA\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFUJV": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x04\\xdb\\x04\\xdb\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 1243, "newlines": 1243, "modlines": 0, "user": "SYZYGYB"}, "text": "         MACRO                                                    MHL1\n&LABEL   SNAPPER ,                                                MHL1\n.* MACRO USED TO CONTROL USE OF SNAP DURING TESTING               MHL1\n         GBLB  &SNAP                                              MHL1\n         AIF   (NOT &SNAP).NOSNAP                                 MHL1\n         BAL   R9,SNAPPER                                         MHL1\n.NOSNAP  MEND                                                     MHL1\n         TITLE 'ITT NORTH - PLANT 10 SMF EXIT IEFUJV'\nIEFUJV   CSECT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*   PROGRAM :  IEFUJV                                                 *\n*                                                                     *\n*   FUNCTION:  TO SCAN JCL AND CHECK FOR FOLLOWING -                  *\n*               A. JOB CARDS                                          *\n*                  1. MUST HAVE TIME AND CLASS SPECIFIED.             *\n*                  2. CLASS CAN ONLY BE A,B,C,D,E,F,G,H,I,J,K,L,S,Z,  *\n*                              M,N,R,X.                               *\n*                  3. TIME FOR CLASS A MUST BE <= 1 MIN.              *\n*                              CLASS B MUST BE <= 7 MIN.              *\n*                              CLASS L MUST BE <= 10 MIN.             *\n*                              CLASS X MUST BE <=  5 SEC.             *\n*                              CLASS N MUST BE <= 30 SEC.             *\n*                  4. ACCOUNTING FIELD MUST CONTAIN :                 *\n*                        (AA,DDDD,PPPPPPP,...)                        *\n*                      WHERE AA = APPLICATION CODE                    *\n*                            DDDD = DEPT CODE                         *\n*                            PPPPPPP = PROJRCT NUMBER(TEST JOBS ONLY) *\n*                  5. JOBNAME MUST BE OF FORM AAXXXXFL                *\n*                      WHERE AA = APPLICATION CODE                    *\n*                            F = FREQUENCY CODE(A,B,D,M,Q,R,S,T,W)    *\n*                            L = LOCATION CODE(B,C,D,H,J,P,S)         *\n*                  6. PERFORM KEYWORD IS NOT ALLOWED.                 *\n*                                                                     *\n*               B. EXEC CARDS                                         *\n*                  1. PERFORM KEYWORD IS NOT ALLOWED.                 *\n*                  2. DPRTY KEYWORD IS NOT ALLOWED.                   *\n*                                                                     *\n*               C. DD CARDS                                           *\n*                  1. FOR CLASSES A AND B TAPE ALLOCATIONS ARE        *\n*                     NOT ALLOWED.                                    *\n*                                                                     *\n*   INPUT   :  CEPA PASSED TO ROUTINE                                 *\n*              JCL STATEMENT                                          *\n*                                                                     *\n*   OUTPUT  :  IF ANY, ERROR MESSAGES TO CONSOLE AND JOBLOG           *\n*                                                                     *\n*   RETURN  :  0 IF JOB PASSED ALL CHECKING                           *\n*              4 IF FOUND AN ERROR AND JOB IS TO BE CANCELLED         *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        MODIFIED 13 FEB 84 TO FIX A LATENT BUG IN KEYWORD        MHL1*\n*               SEARCH ROUTINE. THE KEYWORD SEARCH WOULD          MHL1*\n*               FIND A KEYWORD THAT WAS AFTER THE DELIMITING      MHL1*\n*               BLANK ON A JOBCARD AND SHOULD BE TREATED AS       MHL1*\n*               A COMMENT. HOWEVER, THE EXIT WOULD TREAT IT       MHL1*\n*               AS A VALID KEYWORD. THIS WOULD ALLOW A USER       MHL1*\n*               TO CODE A ' TIME=NNN' VALUE AS A COMMENT AND      MHL1*\n*               ON A LATER JOBCARD CONTINUATION SPECIFY A         MHL1*\n*               TIME GREATER THAN THE ROUTINE WOULD NORMALLY      MHL1*\n*               ALLOW.                                            MHL1*\n*                                                                 MHL1*\n*               ACCOUNTING FIELD VALUE CHECK ROUTINE CHANGED      MHL1*\n*               TO NOT MOVE FIELDS TO WORKAREA BUT CHECK THEM     MHL1*\n*               FROM THE JOBCARD. POSSIBILITY EXISTED FOR ONE     MHL1*\n*               OR MORE ACCOUNTING FIELDS TO BE ENTERED AS        MHL1*\n*               A LONG VALUE AND GO BEYOND END OF WORKAREA.       MHL1*\n*                                                                 MHL1*\n*               TIME ROUTINE CHANGED TO ALLOW SECONDS TO BE       MHL1*\n*               SPECIFIED ON A CONTINUATION CARD.                 MHL1*\n*                                                                 MHL1*\n*               THE COMMON EXIT PARAMETER AREA WAS MAPPED WITH    MHL1*\n*               A DSECT CREATED FROM THE 'IEFJMR' MACRO FROM      MHL1*\n*               'SYS1.AMODGEN'.                                   MHL1*\n*                                                                 MHL1*\n*                                                                     *\n*        MODIFIED 02 SEP 83 TO ADD SUPPORT FOR LOCATION HARRISBURGCXV2*\n*               DOCUMENTATION CHG ONLY TO SAY HARRISBURG          CXV2*\n*               INSTEAD OF DES PLAINS                             CXV2*\n*        MODIFIED 05 MAY 83 TO ADD SUPPORT FOR LOCATION RALEIGH   CXV1*\n*                                                                     *\n*        MODIFIED 21 MAY 82 TO ADD SUPPORT FOR CLASS=X            WCH1*\n*                                                                     *\n*        MODIFIED    11/16/81                                         *\n*            PROBLEM LOG ENTRY: LOST INITIATORS AND JES2 0C4 ABENDS   *\n*            RESOLUTION: IEFUJV WAS NOT CHECKING ACCOUNTING FIELD     *\n*                        PARAMETERS ON JOB CARD FOR NULL ENTRIES.     *\n*                        SPECIFICALLY, IN THE CASE WHERE A COMMA      *\n*                        WAS PRESENT TO INDICATE ANOTHER PARAMETER    *\n*                        WOULD BE ENTERED BUT WAS FOLLOWED BY ) TO    *\n*                        CLOSE THE ACCOUNTING PARAMETER LIST.         *\n*                        I.E.//JJJJJJJJ   JOB  (AA,DDDD,)             *\n*                          THIS CODE WAS CHANGED TO CHECK FOR A       *\n*                        ZERO LENGTH ACCOUNTING FIELD AND IF FOUND    *\n*                        TO SKIP THE MOVING OF THAT PARAMETER TO THE  *\n*                        WORK AREA.  PRIOR TO THE CHANGE, THIS CODE   *\n*                        SUBTRACTED 1 FROM 0, AND MOVED 255 BYTES     *\n*                        OF INVALID PARAMETER INTO IT'S 102 BYTE      *\n*                        WORKAREA.....OVERLAYING JES2 PITABLE.        *\n*            CHANGE ID: UJV1                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT                                                    MHL1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *   MHL1\n*                                                                 MHL1\n*        THIS CONDITIONAL ASSEMBLY CODE INTEROGATES               MHL1\n*        SYSPARM FOR ONE OR MORE OPTIONS FOR TESTING              MHL1\n*        THE SUBMIT EXIT.  THE EXIT MAY BE TESTED                 MHL1\n*        THROUGH THE USE OF THE TSO TEST DRIVER OR                MHL1\n*        THROUGH NORMAL TSO SUBMIT PROCESSING.                    MHL1\n*                                                                 MHL1\n*        THE OPTIONS THAT MAY BE ENTERED ARE                      MHL1\n*                                                                 MHL1\n*              TEST .... THE EXIT IS RUN UNDER 'TESTEXIT'         MHL1\n*              SNAP .... SNAPS ARE TO BE TAKEN                    MHL1\n*                        (INCLUDES DRIVER)                        MHL1\n*                                                                 MHL1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *   MHL1\n         GBLA  &KPARM,&I1,&I2,&I3                                 MHL1\n         GBLB  &TEST,&SNAP                                        MHL1\n         GBLC  &CPARM                                             MHL1\n&KPARM   SETA  K'&SYSPARM         NUMBER OF VALUES                MHL1\n&I1      SETA  1                                                  MHL1\n&I2      SETA  1                                                  MHL1\n.PARMLUP AIF   (&I2 GT &KPARM).PARMEND                            MHL1\n         AIF   (&I2 EQ &KPARM).PARMLST                            MHL1\n         AIF   ('&SYSPARM'(&I2,1) EQ ',').PARMCOM                 MHL1\n&I2      SETA  &I2+1                                              MHL1\n         AGO   .PARMLUP                                           MHL1\n.PARMLST ANOP                                                     MHL1\n&I3      SETA  &I2-&I1+1          GET LENGTH OF VALUE             MHL1\n         AGO   .PARMSET                                           MHL1\n.PARMCOM ANOP                                                     MHL1\n&I3      SETA  &I2-&I1            GET LENGTH OF PARM              MHL1\n.PARMSET ANOP                                                     MHL1\n&CPARM   SETC  '&SYSPARM'(&I1,&I3) ISOLATE VALUE                  MHL1\n         AIF   ('&CPARM' EQ 'TEST').PARMDRV                       MHL1\n         AIF   ('&CPARM' EQ 'SNAP').PARMSNP                       MHL1\n         MNOTE 4,'SYSPARM VALUE ''&CPARM'' NOT RECOGNIZED'        MHL1\n         AGO   .PARMNXT                                           MHL1\n.PARMSNP ANOP                                                     MHL1\n&SNAP    SETB  1                                                  MHL1\n.PARMDRV ANOP                                                     MHL1\n&TEST    SETB  1                                                  MHL1\n         AGO   .PARMNXT                                           MHL1\n.PARMNXT ANOP                                                     MHL1\n&I2      SETA  &I2+1                                              MHL1\n&I1      SETA  &I2                                                MHL1\n         AGO   .PARMLUP                                           MHL1\n.PARMEND ANOP                                                     MHL1\n         EJECT\n***********************************************************************\n*     EQUATES                                                         *\n***********************************************************************\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2                  POINTER TO COMMON EXIT PARM     MHL1\n*                                 AREA (CEPA)                     MHL1\nR3       EQU   3                  POINTER TO JCL STATEMENT        MHL1\nR4       EQU   4                  POINTER TO STATEMENT TYPE       MHL1\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8                  POINTER TO 'ITACCTBL'\nR9       EQU   9                  BAL REGISTER\nR10      EQU   10\nR11      EQU   11                 BASE REGISTER                   MHL1\nR12      EQU   12                 BASE REGISTER\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n*   FOLLOWING BITS MAY BE SET IN CEPA AT OFFSET 32 (CEPUCOM)      MHL1\n         SPACE 1\n$CLASS   EQU   X'80'           CLASS IS SPECIFIED                 MHL1\n$BCLASS  EQU   X'40'           BAD CLASS IS SPECIFIED             MHL1\n$TIME    EQU   X'20'           TIME IS SPECIFIED                  MHL1\n$BTIME   EQU   X'10'           BAD TIME IS SPECIFIED              MHL1\n$BDPRTY  EQU   X'08'           DPRTY IS SPECIFIED                 MHL1\n$BPERF   EQU   X'04'           PERFORM IS SPECIFIED               MHL1\n$T1439   EQU   X'02'           TIME CHANGED FROM 1440 TO 1439     MHL1\n$TIMEP   EQU   X'01'              TIME IN PARENTHESIS             MHL1\n         SPACE 2\n*   FOLLOWING BITS MAY BE SET IN CEPA AT OFFSET 33 (CEPUCOM+1)    MHL1\n         SPACE 1\n$NOACCT  EQU   X'80'           APPLICATION CODE NOT SPECIFIED     MHL1\n$BAPPL   EQU   X'40'           BAD APPLICATION CODE               MHL1\n$BJNAME  EQU   X'20'           INVALID JOB NAME                   MHL1\n$BDEPT   EQU   X'10'           BAD DEPT SPECIFIED IN ACCT FLDS    MHL1\n$BPROJ   EQU   X'08'           BAD PROJECT SPECIFIED              MHL1\n$BLOC    EQU   X'04'           BAD LOCATION CODE IN JOBNAME       MHL1\n$BFREQ   EQU   X'02'           BAD FREQUENCY CODE IN JOBNAME      MHL1\n$JCLERR  EQU   X'01'           BAD JOBCARD FORMAT                 MHL1\n         SPACE 2\n*   FOLLOWING BITS MAY BE SET IN CEPA AT OFFSET 34 (CEPUCOM+2)    MHL1\n         SPACE 1\n$PROGNAM EQU   X'80'           PROGRAMMER NAME ON CONT. CARD      MHL1\n$SECONDS EQU   X'40'           SECONDS ON CONTINUATION CARD       MHL1\n$TESTJOB EQU   X'20'           THIS IS A TEST JOB                 MHL1\n$BADJOBN EQU   X'10'           JOBNAME NOT 8 CHARACTERS           MHL1\n         SPACE 1                                                  MHL1\n* MISCELLANEOUS EQUATES                                           MHL1\n         SPACE 1                                                  MHL1\n$FF      EQU   X'FF'                                              MHL1\n         AIF   (&TEST).SETTEST                                    MHL1\n$SUBPOOL EQU   241                SMF EXIT USE POOL 241           MHL1\n         AGO   .SETEND                                            MHL1\n.SETTEST ANOP                                                     MHL1\n$SUBPOOL EQU   0                  USE POOL 0 FOR TESTING          MHL1\n.SETEND  ANOP                                                     MHL1\n         EJECT\n***********************************************************************\n*     START OF IEFUJV - PICK UP PARMS AND DETERMINE PROCESSING        *\n***********************************************************************\n         SPACE 1\n         SAVE  (14,12),,IEFUJV.DATE(&SYSDATE).TIME(&SYSTIME)      MHL1\n         LR    R12,R15                                            MHL1\n         USING IEFUJV,R12,R11       SET UP BASE OF 12             MHL1\n         LA    R11,2048(,R12)                                     MHL1\n         LA    R11,2048(,R11)                                     MHL1\n         LM    R2,R4,0(R1)        PICK UP FOLLOWING ADDRESSES :\n*                                   R2 - COMMON EXIT PARAMETER AREA\n*                                   R3 - JCL STATEMENT\n*                                   R4 - TYPE OF JCL STATEMENT\n         USING CEPA,R2                                            MHL1\n         TM    CEPINDC,X'01'      T.S.O. FORGROUND JOB ?          MHL1\n         BO    NOCHK                YES, GET OUT OF CODE\n         SPACE 1                                                  MHL1\n         CLI   0(R4),X'01'        JOB  CARD ?\n         BE    JOBSRCH              YES, GO DO JOB CARD PROCESSING\n         CLI   0(R4),X'02'        EXEC CARD ?\n         BE    EXECSRCH             YES, GO DO EXEC PROCESSING\n*        CLI   0(R4),X'08'        PROC CARD ?                     MHL1\n*        BE    EXECSRCH             YES, GO DO EXEC PROCESSING    MHL1\n         CLI   0(R4),X'10'        HAVE WE GOTTEN ALL CARDS ?\n         BE    ANYERRS              YES, GO CHECK FOR ERRORS\n         SPACE 1\nNOCHK    LM    R14,R12,12(R13)    RESTORE CALLERS REGS\n         XR    R15,R15            SET RETURN - CONTINUE PROCESSING\n         BR    R14                RETURN TO CALLER\n         EJECT\n***********************************************************************\n*     JOB CARD PROCESSING - CHECK LOCATION AND FRQUENCY CODES         *\n***********************************************************************\n         SPACE 1\nJOBSRCH  DS    0H\n         CLI   2(R3),C' '         IS THIS FIRST JOB CARD ?        MHL1\n         BE    JOBCONT              NO, FIND KEYWORD              MHL1\n* CLEAR USER COM FIELD TO ZEROS FOR FLAGS                         MHL1\n         XC    CEPUCOM,CEPUCOM    CLEAR USER COM FIELD            MHL1\n* JOBNAME OF TSO/CMS USERID + 1 CHARACTER IS NOW ALLOWED          MHL1\n         SPACE 1                                                  MHL1\n         CLI   CEPJOB,C'X'         IS THIS USERID FORMAT?         MHL1\n         BE    JOBFORMX            YES, EXTRACT INFO FROM USERID  MHL1\n         CLC   CEPJOB(6),=CL6'PEPPER' SPECIAL OCCURRANCE?\n         BE    NOCHK               YES, CHECK NO MORE\n         CLC   CEPJOB(5),=CL5'XSPRB'  SPECIAL OCCURRANCE?\n         BE    NOCHK               YES, CHECK NO MORE\n* STANDARD FORMAT                                                 MHL1\n**    AAIIIIFL                                                    MHL1\n**    AA....... APPLICATION CODE                                  MHL1\n**      IIII... INITIALS (NOT VERIFIED)                           MHL1\n**          F.. FREQUENCY CODE                                    MHL1\n**           L. LOCATION CODE                                     MHL1\n         MVC   CEPUAPCD,CEPJOB     APPLICATION CODE               MHL1\n         MVC   CEPUFREQ,CEPJOB+6   FREQUENCY CODE                 MHL1\n         MVC   CEPULOC,CEPJOB+7    LOCATION CODE                  MHL1\n         B     CHKLOC              GO CHECK LOCATION CODE         MHL1\n* USERID FORMAT                                                   MHL1\n**    XAALIII                                                     MHL1\n**    X........ 'X' IDENTIFIES TSO/CMS USERID                     MHL1\n**     AA...... APPLICATION CODE                                  MHL1\n**       L..... LOCATION CODE                                     MHL1\n**        III.. INITIALS (NOT VERIFIED)                           MHL1\n**              FREQUENCY CODE OF 'T' IS ASSUMED                  MHL1\nJOBFORMX DS    0H                                                 MHL1\n         CLI   CEPJOB+7,C' '      JOBNAME 8 CHARACTERS?           MHL1\n         BNE   JOBFRMX8           YES, OK                         MHL1\n         OI    CEPUCOM+2,$BADJOBN NOT 8, BAD JOBNAME              MHL1\n         SNAPPER                                                  MHL1\nJOBFRMX8 DS    0H                                                 MHL1\n         MVC   CEPUAPCD,CEPJOB+1   APPLICATION CODE               MHL1\n         MVC   CEPULOC,CEPJOB+3    LOCATION CODE                  MHL1\n         MVI   CEPUFREQ,C'T'       FREQUENCY CODE                 MHL1\n* CHECK JOBNAME FOR VALID LOCATION CODE                           MHL1\nCHKLOC   DS    0H                                                 MHL1\n         CLI   CEPULOC,C'C'       IS LOCATION CAPE CANAVERAL ?    MHL1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE\n         CLI   CEPULOC,C'D'       IS LOCATION DELAWARE ?          MHL1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE\n         CLI   CEPULOC,C'H'       IS LOCATION CORPORATE ?         MHL1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE\n         CLI   CEPULOC,C'J'       IS LOCATION JOHNSON CITY ?      MHL1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE\n         CLI   CEPULOC,C'M'       IS LOCATION CORINTH  ?          MHL1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE    MHL1\n         CLI   CEPULOC,C'P'       IS LOCATION HARRISBURG  ?        CXV2\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE\n         CLI   CEPULOC,C'R'       IS LOCATION RALEIGH?             CXV1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE     CXV1\n         CLI   CEPULOC,C'S'       IS LOCATION COMPANY WIDE ?\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE\n         CLI   CEPULOC,C'U'       IS LOCATION BTM ?                WRH1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE     WRH1\n         CLI   CEPULOC,C'A'       IS LOCATION ATC ?                WRH1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE     WRH1\n         CLI   CEPULOC,C'V'       IS LOCATION VANN INDUSTRY ?      WRH1\n         BE    CHKFREQ              YES, GO CHK FREQUENCY CODE     WRH1\n         OI    CEPUCOM+1,$BLOC    INDICATE BAD LOCATION CODE      MHL1\n         SNAPPER                                                  MHL1\n         SPACE 1\n* CHECK FOR VALID FREQUENCY CODE                                  MHL1\nCHKFREQ  DS    0H                                                 MHL1\n         CLI   CEPUFREQ,C'D'      IS FREQUENCY CODE DAILY ?       MHL1\n         BE    JOBACCT              YES, GO CHK JOB ACCOUNTING\n         CLI   CEPUFREQ,C'T'      IS FREQUENCY CODE TEST ?        MHL1\n         BE    CHKFREQT             YES, SET TEST JOB             MHL1\n         CLI   CEPUFREQ,C'R'      IS FREQUENCY CODE ON REQUEST ?  MHL1\n         BE    JOBACCT              YES, GO CHK JOB ACCOUNTING\n         CLI   CEPUFREQ,C'W'      IS FREQUENCY CODE WEEKLY ?      MHL1\n         BE    JOBACCT              YES, GO CHK JOB ACCOUNTING\n         CLI   CEPUFREQ,C'B'      IS FREQUENCY CODE BIWEEKLY ?    MHL1\n         BE    JOBACCT              YES, GO CHK JOB ACCOUNTING\n         CLI   CEPUFREQ,C'M'      IS FREQUENCY CODE MONTHLY ?     MHL1\n         BE    JOBACCT              YES, GO CHK JOB ACCOUNTING\n         CLI   CEPUFREQ,C'Q'      IS FREQUENCY CODE QUARTERLY ?   MHL1\n         BE    JOBACCT              YES, GO CHK JOB ACCOUNTING\n         CLI   CEPUFREQ,C'S'      IS FREQUENCY CODE SEMIIANNUAL ? MHL1\n         BE    JOBACCT              YES, GO CHK JOB ACCOUNTING\n         CLI   CEPUFREQ,C'A'      IS FREQUENCY CODE ANNUAL ?      MHL1\n         BE    JOBACCT              YES, GO CHK JOB ACCOUNTING\n         OI    CEPUCOM+1,$BFREQ   INDICATE BAD FREQUENCY CODE     MHL1\n         SNAPPER                                                  MHL1\n         B     JOBACCT            CHECK JOB PARMS                 MHL1\n         SPACE 1                                                  MHL1\n* SET TEST JOB FLAG                                               MHL1\nCHKFREQT DS    0H                                                 MHL1\n         OI    CEPUCOM+2,$TESTJOB  SHOW TEST JOB                  MHL1\n         EJECT\n***********************************************************************\n*     JOB CARD PROCESSING - FIND ACCOUNTING FLDS AND LOAD TABLES      *\n***********************************************************************\n         SPACE 1\nJOBACCT  DS    0H\n         LA    R5,3(R3)           GET ADDR OF JCL + 3\n         LA    R14,1                                              MHL1\n         LA    R15,70(,R3)        COULMN 71                       MHL1\nJOBACT01 CLC   0(5,R5),KJOB       IS IT EQ TO ' JOB '             MHL1\n* SCAN JOBCARD TO FIND OPERATOR ' JOB '                           MHL1\n         BE    JOBACT02             YES, GO FIND '('              MHL1\n         BXLE  R5,R14,JOBACT01    BUMP TO NXT COLUMN              MHL1\n         OI    CEPUCOM+1,$NOACCT+$JCLERR NO ACCOUNT FIELDS        MHL1\n         SNAPPER                                                  MHL1\n         B     ENDJOB             END OF CARD                     MHL1\n         SPACE 1\nJOBACT02 DS    0H                                                 MHL1\n* SCAN TO LEFT PAREN THAT STARTS ACCOUNTING FIELDS                MHL1\n         LA    R5,L'KJOB(,R5)     BUMP PAST ' JOB '               MHL1\nJOBACT03 CLI   0(R5),C'('         IS IT EQ TO '('                 MHL1\n         BE    JOBACT05             YES, GO SAVE ACCNT FLDS       MHL1\n         CLI   0(R5),C' '         IS THIS A BLANK ?               MHL1\n         BNE   JOBACT04             NO, SET BAD ACCOUNTING        MHL1\n         BXLE  R5,R14,JOBACT03    BUMP TO NXT COLUMN              MHL1\nJOBACT04 OI    CEPUCOM+1,$NOACCT  END OF SRCH AREA, SET BAD ACCT  MHL1\n         SNAPPER                                                  MHL1\n         B     JOBPGMNM           SEE IF PROGRAMMER NAME          MHL1\n         SPACE 1\nJOBACT05 DS    0H                                                 MHL1\n         GETMAIN R,LV=72,SP=$SUBPOOL GET A WORK AREA              MHL1\n         ST    R13,4(,R1)         SAVE CALLERS SAVE AREA ADDR     MHL1\n         ST    R1,8(,R13)         STORE IN CALLERS                MHL1\n         LR    R13,R1             PICK UP OUR SAVE AREA           MHL1\n         LOAD  EP=ITACCTBL        LOAD TABLES                     MHL1\n         LR    R8,R0              POINT TO ACCOUNT CODES          MHL1\n         SPACE 2                                                  MHL1\n***********************************************************************\n*     JOB CARD PROCESSING - CHECK APPL CODE IN JOBNAME AND ACCNT FLD  *\n***********************************************************************\n         SPACE 1\n         L     R7,0(R8)           GET ADDR OF ACCNT TABLE         MHL1\nJOBACT06 CLC   0(2,R7),KSTARS     END OF TABLE ?                  MHL1\n         BE    JOBACT07             YES, GO SET BAD JOBNAME       MHL1\n         CLC   0(2,R7),CEPUAPCD   IS THIS OUR ACCT CODE ?         MHL1\n         BE    JOBACT10             YES, GO CHK ACCOUNTING FIELDS MHL1\n         LA    R7,2(R7)           BUMP TO NXT ENTRY IN TABLE      MHL1\n         B     JOBACT06           GO CHK THIS ENTRY               MHL1\n         SPACE 1\nJOBACT07 OI    CEPUCOM+1,$BJNAME  SET BAD JOB NAME                MHL1\n         SNAPPER                                                  MHL1\n         SPACE 2\n***********************************************************************\n*     CHECK ACCOUNTING FIELDS - FIRST THE APPLICATION CODE            *\n***********************************************************************\n         SPACE 1\nJOBACT10 DS    0H                                                 MHL1\n         LA    R14,1                                              MHL1\n         LA    R15,70(,R3)        POINT TO COLUMN 71              MHL1\n         BXH   R5,R14,JOBACT14    BUMP PAST '('                   MHL1\n         LR    R6,R5              SAVE ADDR OF FRST FLD           MHL1\nJOBACT11 DS    0H                 FIND APPICATION CODE            MHL1\n* FIND END OF APPLICATION CODE FIELD                              MHL1\n         CLI   0(R6),C','         END OF FIELD?                   MHL1\n         BE    JOBACT12           YES, CHECK VALUE                MHL1\n         CLI   0(R6),C')'         END OF FIELD?                   MHL1\n         BE    JOBACT12           YES, CHECK VALUE                MHL1\n         CLI   0(R6),C' '         END OF FIELD?                   MHL1\n         BE    JOBACT12           YES, CHECK VALUE                MHL1\n         BXLE  R6,R14,JOBACT11    END OF CARD                     MHL1\nJOBACT12 DS    0H                                                 MHL1\n         SR    R6,R5              GET LENGTH OF FIELD             MHL1\n         C     R6,=F'2'           LENGTH OF 2?                    MHL1\n         BNE   JOBACT15           NO, BAD APPLICATION CODE        MHL1\n* SEE IF APPLICATION CODE IS IN TABLE                             MHL1\n         L     R7,0(R8)           GET ADDR OF TABLE               MHL1\nJOBACT13 CLC   0(2,R7),KSTARS     END OF TABLE ?                  MHL1\n         BE    JOBACT15             YES, GO SET BAD APPL CODE     MHL1\n         CLC   0(2,R7),0(R5)      IS THIS OUR ACCT CODE ?         MHL1\n         BE    JOBACT21             YES, GO CHK DEPT CODE         MHL1\n         LA    R7,2(R7)           BUMP TO NXT ENTRY IN TABLE      MHL1\n         B     JOBACT13           GO CHK THIS ENTRY               MHL1\n         SPACE 1                                                  MHL1\nJOBACT14 DS    0H                                                 MHL1\n* END OF CARD FOUND BEFORE APPLICATION CODE                       MHL1\n         OI    CEPUCOM+1,$BAPPL+$JCLERR                           MHL1\n         B     JOBACT98           NO MORE THIS CARD               MHL1\nJOBACT15 DS    0H                                                 MHL1\n         OI    CEPUCOM+1,$BAPPL   SET BAD APPL. CODE              MHL1\n         SNAPPER                                                  MHL1\n         SPACE 2\n***********************************************************************\n*     CHECK ACCOUNTING FIELDS - NEXT THE DEPARTMENT NUMBER            *\n***********************************************************************\n         SPACE 1\nJOBACT21 DS    0H                                                 MHL1\n         AR    R5,R6              POINT TO ENDING CHARACTER       MHL1\n         CR    R5,R15             END OF CARD                     MHL1\n         BH    JOBACT23           YES, BAD DEPT                   MHL1\n         CLI   0(R5),C','         STOP ON COMMA?                  MHL1\n         BNE   JOBACT23           NO, FORMAT ERROR                MHL1\n         BXH   R5,R14,JOBACT24    BUMP PAST COMMA                 MHL1\n         LR    R6,R5              COPY ADDRESS                    MHL1\nJOBACT22 DS    0H                 FIND DEPARTMENT NUMBER          MHL1\n         CLI   0(R6),C','         END OF FIELD?                   MHL1\n         BE    JOBACT24           YES, CHECK VALUE                MHL1\n         CLI   0(R6),C')'         END OF FIELD?                   MHL1\n         BE    JOBACT24           YES, CHECK VALUE                MHL1\n         CLI   0(R6),C' '         END OF FIELD?                   MHL1\n         BE    JOBACT24           YES, CHECK VALUE                MHL1\n         BXLE  R6,R14,JOBACT22    CHECK AGAIN                     MHL1\nJOBACT23 DS    0H                                                 MHL1\n         OI    CEPUCOM+1,$BDEPT+$JCLERR END OF CARD               MHL1\n         B     JOBACT98           NOTHING ELSE TO DO              MHL1\nJOBACT24 DS    0H                                                 MHL1\n         SR    R6,R5              GET LENGTH OF FIELD             MHL1\n         C     R6,=F'4'           LEGTH OF 4?                     MHL1\n         BNE   JOBACT26           NO, BAD APPLICATION CODE        MHL1\n         L     R7,4(R8)           GET ADDR OF DEPT TABLE\nJOBACT25 CLC   0(4,R7),KSTARS     END OF TABLE ?                  MHL1\n         BE    JOBACT26             YES, GO SET BAD DEPT CODE     MHL1\n         CLC   0(4,R7),0(R5)      IS THIS OUR DEPT CODE ?         MHL1\n         BE    JOBACT31             YES, GO CHK PROJ CODE         MHL1\n         LA    R7,4(R7)           BUMP TO NXT ENTRY IN TABLE\n         B     JOBACT25           GO CHK THIS ENTRY               MHL1\n         SPACE 1\nJOBACT26 DS    0H                                                 MHL1\n         OI    CEPUCOM+1,$BDEPT   SET BAD DEPT. CODE              MHL1\n         SNAPPER                                                  MHL1\n         SPACE 2\n***********************************************************************\n*     CHECK ACCOUNTING FIELDS - NEXT THE PROJECT CODE                 *\n***********************************************************************\n         SPACE 1\nJOBACT31 DS    0H                                                 MHL1\n         AR    R5,R6              POINT TO ENDING CHARACTER       MHL1\n         CR    R5,R15             AT END OF CARD?                 MHL1\n         BH    JOBACT33           YES, ERROR                      MHL1\n         CLI   0(R5),C')'         STOP ON PAREN?                  MHL1\n         BE    JOBACT34           YES, OK IF PRODUCTION           MHL1\n         CLI   0(R5),C','         STOP ON COMMA?                  MHL1\n         BNE   JOBACT33                                           MHL1\n         BXH   R5,R14,ENDJOB      BUMP PAST COMMA                 MHL1\n         LR    R6,R5              COPY ADDRESS                    MHL1\nJOBACT32 DS    0H                 FIND PROJECT CODE               MHL1\n         CLI   0(R6),C','         END OF FIELD?                   MHL1\n         BE    JOBACT35           YES, CHECK VALUE                MHL1\n         CLI   0(R6),C')'         END OF FIELD?                   MHL1\n         BE    JOBACT35           YES, CHECK VALUE                MHL1\n         CLI   0(R6),C' '         END OF FIELD?                   MHL1\n         BE    JOBACT35           YES, CHECK VALUE                MHL1\n         BXLE  R6,R14,JOBACT32    CHECK AGAIN                     MHL1\nJOBACT33 DS    0H                                                 MHL1\n         OI    CEPUCOM+1,$JCLERR                                  MHL1\n         SNAPPER                                                  MHL1\nJOBACT34 DS    0H                 PROJECT NUMBER MISSING          MHL1\n         TM    CEPUCOM+2,$TESTJOB TEST JOB?                       MHL1\n         BNO   JOBACT98           NO, NOT BAD PROJECT             MHL1\n         OI    CEPUCOM+1,$BPROJ   END OF CARD                     MHL1\n         B     JOBACT98           NOTHING ELSE TO DO              MHL1\nJOBACT35 DS    0H                                                 MHL1\n         SR    R6,R5              GET LENGTH OF FIELD             MHL1\n         C     R6,=F'7'           LEGTH OF 7?                     MHL1\n         BE    JOBACT36           YES, GOOD PROJECT NUMBER        MHL1\n         TM    CEPUCOM+2,$TESTJOB TEST JOB?                       MHL1\n         BNO   JOBACT36           NO, NOT BAD PROJECT             MHL1\n         OI    CEPUCOM+1,$BPROJ   BAD PROJECT                     MHL1\n         SNAPPER                                                  MHL1\nJOBACT36 DS    0H                                                 MHL1\n         AR    R5,R6              POINT TO STOP CHARACTER         MHL1\nJOBACT37 DS    0H                                                 MHL1\n         CLI   0(R5),C')'         END OF FIELD                    MHL1\n         BE    JOBACT98                                           MHL1\n         BXLE  R5,R14,JOBACT37    FIND END OF ACCOUNT CODES       MHL1\n         OI    CEPUCOM+1,$JCLERR  BAD JOBCARD                     MHL1\nJOBACT98 DS    0H                                                 MHL1\n         SNAPPER                                                  MHL1\n         DELETE EP=ITACCTBL       DELETE TABLES\n         SPACE 1\nJOBACT99 DS    0H                                                 MHL1\n         LR    R1,R13             R1 = ADDRESS OF WORKAREA        MHL1\n         L     R13,4(,R13)        PICK UP CALLERS SAVE AREA       MHL1\n         FREEMAIN R,LV=72,A=(1),SP=$SUBPOOL FREE AREA             MHL1\n         SPACE 1                                                  MHL1\n         MVI   CEPUSEID,C' '       CLEAR CEPUSEID                 MHL1\n         MVC   CEPUSEID+1(L'CEPUSEID-1),CEPUSEID                  MHL1\n         TM    CEPUCOM+1,$JCLERR  FORMAT ERROR?                   MHL1\n         BO    ENDJOB             YES, CAN'T DO MORE THIS CARD    MHL1\n* FIND AND SKIP PAST PROGRAMMER NAME FIELD                        MHL1\n         LA    R15,70(,R3)        COLUMN 71                       MHL1\n         LA    R14,1                                              MHL1\n         BXH   R5,R14,ENDJOB      BUMP PAST ')'                   MHL1\n         CLI   0(R5),C','         COMMA AFTER ACCOUNT FIELDS?     MHL1\n         BE    JOBPGMNM           YES, SCAN PROGRAMMER NAME FIELD MHL1\n         CLI   0(R5),C' '         BLANK AFTER ACCOUNT FIELDS?     MHL1\n         BE    ENDJOB             YES, END OF JOBACRD             MHL1\n         OI    CEPUCOM+1,$JCLERR  FORMAT ERROR                    MHL1\n         SNAPPER                                                  MHL1\n         B     ENDJOB             CAN'T DO MORE THIS CARD         MHL1\nJOBPGMNM DS    0H                                                 MHL1\n         BXH   R5,R14,JOBPGM10    BUMP PAST ','                   MHL1\n         CLI   0(R5),C' '         CONTINUED NEXT CARD?            MHL1\n         BNE   JOBPGM11           NO, PROGRAMMER NAME THIS CARD   MHL1\nJOBPGM10 DS    0H                                                 MHL1\n         OI    CEPUCOM+2,$PROGNAM SHOW WAITING ON PROGRAMMER NAME MHL1\n         SNAPPER                                                  MHL1\n         B     ENDJOB                                             MHL1\nJOBPGM11 DS    0H                                                 MHL1\n* COME HERE IF PROGRAMMER NAME ON CONTINUATION CARD               MHL1\n         NI    CEPUCOM+2,$FF-$PROGNAM  TURN OFF PGM NAME CONT.    MHL1\n         LA    R14,1                                              MHL1\n         LA    R15,70(,R3)        COLUMN 71                       MHL1\n         CLI   0(R5),C''''        NAME IN QUOTES?                 MHL1\n         BE    JOBPGM21           YES, SCAN TO LAST QUOTE         MHL1\n* MAY BE PROGRAMMER NAME OR A KEYWORD IF PROGRAMMER NAME OMITTED  MHL1\n         LR    R6,R5              COPY ADDRESS                    MHL1\nJOBPGM12 DS    0H                                                 MHL1\n         CLI   0(R6),C'='         END OF KEYWORD?                 MHL1\n         BE    JOBKEYWD           YES, DON'T HAVE PROGRAMMER NAME MHL1\n         CLI   0(R6),C','         END OF NAME?                    MHL1\n         BE    JOBPGM13           YES, NOW CAN SCAN FOR KEYWORDS  MHL1\n         CLI   0(R6),C' '         END OF NAME?                    MHL1\n         BE    ENDJOB             YES, END OF JOBCARD             MHL1\n         BXLE  R6,R14,JOBPGM12    LOOK AT NEXT COLUMN             MHL1\n         B     ENDJOB             NAME ENDS THIS CARD             MHL1\nJOBPGM13 DS    0H                                                 MHL1\n         LR    R5,R6              GET STOPPER ADDRESS             MHL1\n         B     JOBSCAN            FIND KEYWORDS                   MHL1\nJOBPGM21 DS    0H                                                 MHL1\n* PROGRAMMER NAME IN QUOTES                                       MHL1\nJOBPGM22 DS    0H                                                 MHL1\n         BXH   R5,R14,JOBPGM24                                    MHL1\n         CLI   0(R5),C''''        ANOTHER QUOTE?                  MHL1\n         BNE   JOBPGM22           NO, TRY AGAIN                   MHL1\nJOBPGM23 DS    0H                                                 MHL1\n* CHECK FOR DOUBLE QUOTES, WHICH ACTS AS 1 CHARACTER OF NAME      MHL1\n         BXH   R5,R14,ENDJOB      BUMP PAST QUOTE                 MHL1\n         CLI   0(R5),C''''        DOUBLE QUOTE                    MHL1\n         BE    JOBPGM22           YES, CONTINUE PROGRAMMER NAME   MHL1\n         CLI   0(R5),C','         COMMA?                          MHL1\n         BE    JOBSCAN            YES, CHECK FOR KEYWORDS         MHL1\n         CLI   0(R5),C' '         BLANK?                          MHL1\n         BE    ENDJOB             YES, END OF JOBCARD             MHL1\nJOBPGM24 DS    0H                                                 MHL1\n* FORMAT ERROR IN PROGRAMMER NAME                                 MHL1\n         OI    CEPUCOM+1,$JCLERR                                  MHL1\n         SNAPPER                                                  MHL1\n         B     ENDJOB                                             MHL1\n         SPACE 1\n         EJECT\n***********************************************************************\n*     JOB CARD PROCESSING - SEARCH FOR KEYWORDS                       *\n***********************************************************************\n         SPACE 1\n* JOB CARD CONTINUED, SEARCH FOR FIRST OPERAND                    MHL1\nJOBCONT  DS    0H                                                 MHL1\n         LA    R5,3(,R3)          POINT PAST '// '                MHL1\n         LA    R14,1                                              MHL1\n         LA    R15,15(,R3)        END OF SEARCH - COLUMN 16       MHL1\nJOBCONT1 DS    0H                                                 MHL1\n         CLI   0(R5),C' '         STILL CONTINUE?                 MHL1\n         BNE   JOBCONT2           NO, SEARCH FOR KEYWORD          MHL1\n         BXLE  R5,R14,JOBCONT1    LOOK FOR END OF BLANKS          MHL1\n         OI    CEPUCOM+1,$JCLERR  CONTINUATION NOT FOUND          MHL1\n         SNAPPER                                                  MHL1\n         B     ENDJOB             GET NEXT CARD                   MHL1\nJOBCONT2 DS    0H                                                 MHL1\n* SEE IF TIME WAS CONTINUED TO NEXT CARD                          MHL1\n         TM    CEPUCOM+2,$SECONDS TIME CONTINUED?                 MHL1\n         BO    JOBTIM11           YES, SEE IF SECONDS             MHL1\n* SEE IF PROGRAMMER NAME CONTINUED ON NEXT CARD?                  MHL1\n         TM    CEPUCOM+2,$PROGNAM NAME NEEDED?                    MHL1\n         BO    JOBPGM11           YES, SEE IF NAME OR KEYWORD     MHL1\n         B     JOBKEYWD           LOOK FOR KEYWORD                MHL1\n* SCAN JOB CARD FOR KEYWORDS                                      MHL1\nJOBSCAN  DS    0H                                                 MHL1\n* LOOK TO SEE IF AT A COMMA, IF NOT SCAN TO COMMA                 MHL1\n         LA    R14,1                                              MHL1\n         LA    R15,70(,R3)        POINT TO COLUMN 71              MHL1\nJOBSCAN1 DS    0H                                                 MHL1\n         CLI   0(R5),C','         POINTING TO COMMA?              MHL1\n         BE    JOBSCAN2           YES, BUMP PAST COMMA            MHL1\n         CLI   0(R5),C' '         END OF CARD?                    MHL1\n         BE    ENDJOB             YES, GET NEXT CARD              MHL1\n         BXLE  R5,R14,JOBSCAN1    FIND A COMMA                    MHL1\n         B     ENDJOB             END OF CARD (AFTER COLUMN 71)   MHL1\nJOBSCAN2 DS    0H                                                 MHL1\n         BXH   R5,R14,ENDJOB      BUMP PAST COMMA                 MHL1\nJOBKEYWD DS    0H                                                 MHL1\n* SHOULD BE POINTING TO START OF A KEYWORD OR A BLANK OR          MHL1\n* TO THE MIDDLE OF A VALUE FOLLOWING A KEYWORD                    MHL1\n         CLI   0(R5),C' '         BLANK AFTER A COMMA?            MHL1\n         BE    ENDJOB             YES, CONTINUED NEXT CARD        MHL1\n* LOOK FOR KEYWORDS WE ARE INTERESTED IN                          MHL1\n         LA    R0,71-L'KPERFORM(,R3) LAST PLACE FOR PERFORM       MHL1\n         CR    R0,R5              SEE IF ENOUGH ROOM FOR PERFORM  MHL1\n         BL    JOBKEYW1           NO, LOOK FOR NEXT FIELD         MHL1\n         CLC   KPERFORM,0(R5)     IS IT PERFORM?                  MHL1\n         BE    JOBPERF            YES, CHECK IT OUT               MHL1\n         SPACE 1                                                  MHL1\nJOBKEYW1 DS    0H                                                 MHL1\n         LA    R0,71-L'KCLASS(,R3) LAST PLACE FOR 'CLASS='        MHL1\n         CR    R0,R5              SEE IF ENOUGH ROOM              MHL1\n         BL    JOBKEYW2           NO, LOOK FOR NEXT FIELD         MHL1\n         CLC   KCLASS,0(R5)       IS IT CLASS?                    MHL1\n         BE    JOBCLASS           YES, CHECK IT OUT               MHL1\n         CLC   KDPRTY,0(R5)       IS IT DPRTY?                    MHL1\n         BE    JOBDPRTY           YES, CHECK IT OUT               MHL1\n         SPACE 1                                                  MHL1\nJOBKEYW2 DS    0H                                                 MHL1\n         LA    R0,71-L'KTIME(,R3) LAST PLACE FOR TIME             MHL1\n         CR    R0,R5              SEE IF ENOUGH ROOM              MHL1\n         BL    JOBNEXT1           NO, LOOK FOR NEXT FIELD         MHL1\n         CLC   KTIME,0(R5)        IS IT TIME?                     MHL1\n         BE    JOBTIME            YES, CHECK IT OUT               MHL1\n         SPACE 1                                                  MHL1\nJOBNEXT  DS    0H                                                 MHL1\n         LA    R14,1                                              MHL1\n         LA    R15,70(,R3)        POINT TO COLUMN 71              MHL1\nJOBNEXT1 DS    0H                                                 MHL1\n         BXH   R5,R14,ENDJOB      POINT PAST WHATEVER             MHL1\n         B     JOBSCAN1                                           MHL1\n         SPACE 2                                                  MHL1\n******************************************************************MHL1\n*        PROCESS 'CLASS=' KEYWORD                                 MHL1\n******************************************************************MHL1\n         SPACE 1                                                  MHL1\nJOBCLASS DS    0H                                                 MHL1\n         LA    R5,6(R5)           BUMP PAST 'CLASS='              MHL1\n         CLI   0(R4),X'01'        JOB CARD? ?                     MHL1\n         BNE   JOBNEXT              NO, IGNORE 'CLASS='           MHL1\n         OI    CEPUCOM,$CLASS     INDICATE GOT CLASS              MHL1\n         CLI   0(R5),C'A'         IS IT CLASS A ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'B'         IS IT CLASS B ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'C'         IS IT CLASS C ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'D'         IS IT CLASS D ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'E'         IS IT CLASS E ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'F'         IS IT CLASS F ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'G'         IS IT CLASS G ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'H'         IS IT CLASS H ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'I'         IS IT CLASS I ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'J'         IS IT CLASS J ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'K'         IS IT CLASS K ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'L'         IS IT CLASS L ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'M'         IS IT CLASS M ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'N'         IS IT CLASS N ?                 WRH1\n         BE    JOBNEXT              YES, GO CHK TIME              WRH1\n         CLI   0(R5),C'R'         IS IT CLASS R ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'S'         IS IT CLASS S ?\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'X'         IS IT CLASS X ?                  WCH1\n         BE    JOBNEXT              YES, GO CHK TIME              MHL1\n         CLI   0(R5),C'Z'         IS IT CLASS Z ?\n         BNE   SETBCLAS              NO, GO SET BAD CLASS BIT\n         CLC   KDC,CEPJOB         IS THIS DATA CONTROL ?          MHL1\n         BE    JOBNEXT               YES, THEY CAN HAVE CLASS Z   MHL1\nSETBCLAS OI    CEPUCOM,$BCLASS    INDICATE BAD CLASS              MHL1\n         SNAPPER                                                  MHL1\n         B     JOBNEXT            GO CHK FOR TIME                 MHL1\n         SPACE 1\nKJOB     DC    C' JOB '\nKSTARS   DC    C'****'            END OF TABLE                    MHL1\nKTIME    DC    C'TIME='\nKDPRTY   DC    C'DPRTY'                                           MHL1\nKPERFORM DC    C'PERFORM'                                         MHL1\nKCLASS   DC    C'CLASS='\nKDC      DC    C'DC'\n         EJECT\n***********************************************************************\n*     JOB CARD PROCESSING - FOUND TIME=                           MHL1*\n***********************************************************************\n         SPACE 1\nJOBTIME  DS    0H\n         LA    R5,L'KTIME(,R5)    BUMP PAST TIME=                 MHL1\n         CLI   0(R4),X'01'        JOB CARD ?                      MHL1\n         BNE   JOBNEXT            NO, IGNORE TIME                 MHL1\n         LA    R15,70(,R3)        POINT TO COLUMN 71              MHL1\n         OI    CEPUCOM,$TIME      INDICATE GOT TIME               MHL1\n         CLI   0(R5),C'('         IS TIME IN PARENTHESES ?\n         BNE   JOBTIM01             NO, GO PROCESS AS SUCH        MHL1\n         OI    CEPUCOM,$TIMEP     SHOW TIME IN PARENS             MHL1\n         BXH   R5,R14,JOBTIM97    BUMP PAST '('\nJOBTIM01 DS    0H                                                 MHL1\n         LA    R0,71-L'K1440(,R3) LAST COLUMN FOR '1440'          MHL1\n         CR    R5,R0              ROOM FOR TIME=1440?             MHL1\n         BH    JOBTIM02           NOT ENOUGH ROOM                 MHL1\n         CLC   K1440,0(R5)        IS IT 'TIME=1440' ?\n         BNE   JOBTIM02             NO, GO CHK THE CLASS          MHL1\n         OI    CEPUCOM,$T1439     INDICATE CHANGED TO 1439        MHL1\n         SNAPPER                                                  MHL1\n         MVC   2(2,R5),K39        CHANGE 1440 TO 1439\nJOBTIM02 DS    0H                                                 MHL1\n         CLI   CEPCLASS,C'A'      IS IT CLASS A ?                 MHL1\n         BE    JOBTIM03             YES, CONTINUE CHECK           MHL1\n         CLI   CEPCLASS,C'B'      IS IT CLASS B ?                 MHL1\n         BE    JOBTIM03             YES, CONTINUE CHECK           MHL1\n         CLI   CEPCLASS,C'X'      IS THIS CLASS X?                MHL1\n         BE    JOBTIM03           YES, MINUTES CAN BE ZEROS       MHL1\n         CLI   CEPCLASS,C'N'      IS THIS CLASS N?                MHL1\n         BE    JOBTIM03           YES, MINUTES CAN BE ZEROS       MHL1\n         CLI   CEPCLASS,C'L'      IS IT CLASS L ?                 MHL1\n         BNE   JOBTIM99             NO, GO GET NEXT KEYWORD\nJOBTIM03 DS    0H                                                 MHL1\n         SR    R7,R7              CLEAR FOR ACCUM MINUTES         MHL1\n         LA    R15,70(,R3)        POINT TO COLUMN 71              MHL1\n         LR    R6,R5              POINT TO START OF MINUTES       MHL1\n         LA    R0,5(,R5)          POINT TO LAST PLACE FOR STOPPER MHL1\n         CR    R15,R0             COMPARE TO END OF CARD          MHL1\n         BNH   JOBTIM04                                           MHL1\n         LR    R15,R0             USE LESSER VALUE                MHL1\nJOBTIM04 CLI   0(R6),C'0'         IS THIS CHAR NUMERIC ?          MHL1\n         BL    JOBTIM05             NO, END OF TIME               MHL1\n         IC    R0,0(,R6)          GET NUMBER                      MHL1\n         N     R0,X0F             CLEAR SIGN                      MHL1\n         MH    R7,H10             JUMP ACCUM                      MHL1\n         AR    R7,R0              ACCUM MINUTES                   MHL1\n         BXLE  R6,R14,JOBTIM04    BUMP TO NEXT CHAR               MHL1\n         SR    R6,R5              GET LENGTH OF TIME              MHL1\n         C     R6,=F'4'           LENGTH GREATER THAN 4?          MHL1\n         BH    JOBTIM97           ONLY 4 DIGITS ALLOWED           MHL1\n         TM    CEPUCOM,$TIMEP     TIME IN PARENS?                 MHL1\n         BO    JOBTIM97           END OF CARD ERROR IF PARENS     MHL1\n         AR    R6,R5              POINT TO STOP CHARACTER         MHL1\n         SPACE 1                                                  MHL1\nJOBTIM05 DS    0H                                                 MHL1\n         LR    R5,R6              POINT TO STOP CHARACTER         MHL1\n         CLI   CEPCLASS,C'A'      CLASS A?                        MHL1\n         BNE   JOBTIM06           NO, SEE IF B                    MHL1\n         CH    R7,H1              COMPARE TO 1 MINUTE             MHL1\n         B     JOBTIM09           CHECK RESULTS                   MHL1\nJOBTIM06 DS    0H                                                 MHL1\n         CLI   CEPCLASS,C'B'      CLASS B?                        MHL1\n         BNE   JOBTIM07           NO, SEE IF L                    MHL1\n         CH    R7,H7              COMPARE TO 7 MINUTE             MHL1\n         B     JOBTIM09           CHECK RESULTS                   MHL1\nJOBTIM07 DS    0H                                                 MHL1\n         CLI   CEPCLASS,C'L'      CLASS L?                        MHL1\n         BNE   JOBTIM08           NO, SEE IF X                    MHL1\n         CH    R7,H10             COMPARE TO 10 MINUTE            MHL1\n         B     JOBTIM09           CHECK RESULTS                   MHL1\nJOBTIM08 DS    0H                 MUST BE CLASS=X OR N.           MHL1\n         LTR   R7,R7              MINUTES=0?                      MHL1\nJOBTIM09 DS    0H                                                 MHL1\n         BH    JOBTIM98           MINUTES TOO HIGH                MHL1\n         BL    JOBTIM99           LOW, MINUTES OK                 MHL1\n         TM    CEPUCOM,$TIMEP     TIME IN PARENS?                 MHL1\n*IF CLASS=X OR N AND NOT SECONDS, TIME WILL BE ZERO FOR JCL ERROR MHL1\n         BNO   JOBTIM99           NO, TIME STILL OK               MHL1\n         OI    CEPUCOM+2,$SECONDS SECONDS MUST BE ZERO            MHL1\n*                                 OR 5 SECONDS FOR CLASS=X        MHL1\n* CHECK FOR SECONDS                                               MHL1\nJOBTIM10 DS    0H                                                 MHL1\n         LA    R15,70(,R3)        COLUMN 71                       MHL1\n         LA    R14,1                                              MHL1\n         BXH   R5,R14,ENDJOB      POINT PAST COMMA                MHL1\n         CLI   0(R5),C' '         CONTINUED?                      MHL1\n         BE    ENDJOB             GET NEXT CARD                   MHL1\n* FALL THROUGH WITH R5 POINTING TO SECONDS                        MHL1\nJOBTIM11 DS    0H                                                 MHL1\n* COME HERE IF SECONDS CONTINUED NEXT CARD                        MHL1\n* ONLY NEED TO CHECK SECONDS IF CLASS=X,                          MHL1\n* OR CLASSES A, B, L AND MINUTES MATCH TIME LIMIT                 MHL1\n* R5 POINTS TO START OF SECONDS                                   MHL1\n         LA    R15,70(,R3)        COLUMN 71                       MHL1\n         LA    R14,1                                              MHL1\n         SR    R7,R7              ACCUM SECONDS                   MHL1\n         LA    R0,3(,R5)          POINT TO LAST POSITION FOR STOP MHL1\n         CR    R15,R0             COMPARE TO COLUMN 71            MHL1\n         BNH   JOBTIM12           USE COLUMN 71                   MHL1\n         LR    R15,R0             MAX LENGTH OF MINUTES           MHL1\nJOBTIM12 DS    0H                                                 MHL1\n         CLI   0(R5),C'0'         NUMERIC                         MHL1\n         BL    JOBTIM13           NO, MUST BE END OF SECONDS      MHL1\n         IC    R0,0(,R5)          GET NUMBER                      MHL1\n         N     R0,X0F             CLEAR SIGN                      MHL1\n         MH    R7,H10             ACCUM                           MHL1\n         AR    R7,R0                SECONDS                       MHL1\n         BXLE  R5,R14,JOBTIM12                                    MHL1\n         B     JOBTIM97           FORMAT ERROR                    MHL1\nJOBTIM13 DS    0H                                                 MHL1\n         SNAPPER                                                  MHL1\n         CLI   CEPCLASS,C'X'      CLASS=X?                        MHL1\n         BNE   JOBTIM15           NO, SECONDS MUST BE ZERO        MHL1\n         CH    R7,H5              TIME=(,5)?                      MHL1\n         BH    JOBTIM98           NO, TIME TOO HIGH               MHL1\n         B     JOBTIM99           GET NEXT KEYWORD                MHL1\nJOBTIM15 DS    0H                                                 MHL1\n         SNAPPER                                                  MHL1\n         CLI   CEPCLASS,C'N'      CLASS=X?                        MHL1\n         BNE   JOBTIM14           NO, SECONDS MUST BE ZERO        MHL1\n         CH    R7,H30             TIME=(,5)?                      MHL1\n         BH    JOBTIM98           NO, TIME TOO HIGH               MHL1\n         B     JOBTIM99           GET NEXT KEYWORD                MHL1\nJOBTIM14 DS    0H                                                 MHL1\n         LTR   R7,R7              SECONDS=0?                      MHL1\n         BZ    JOBTIM99           YES, TIME OK                    MHL1\nJOBTIM98 DS    0H                                                 MHL1\n* TIME FIELD IN ERROR                                             MHL1\n         OI    CEPUCOM,$BTIME     SET BAD TIME INDICATOR          MHL1\n         SNAPPER                                                  MHL1\nJOBTIM99 DS    0H                                                 MHL1\n         NI    CEPUCOM+2,$FF-$SECONDS  TURN OFF SECONDS FLAG      MHL1\n         B     JOBSCAN            POINTING AT ',' OR ')'          MHL1\nJOBTIM97 DS    0H                                                 MHL1\n* FORMAT ERROR IN TIME FIELD                                      MHL1\n         OI    CEPUCOM+1,$JCLERR  BAD JOBCARD                     MHL1\n         NI    CEPUCOM+2,$FF-$SECONDS  TURN OFF SECONDS FLAG      MHL1\n         SNAPPER                                                  MHL1\n         B     ENDJOB                                             MHL1\n         SPACE 1\nF1440    DC    F'1440'                                            MHL1\nX0F      DC    AL4(X'0F')                                         MHL1\nH1       DC    H'1'               1 MINUTE FOR CLASS=A            MHL1\nH7       DC    H'7'               7 MINUTES FOR CLASS=B           MHL1\nH10      DC    H'10'              10 MINUTES FOR CLASS=L          MHL1\nH5       DC    H'5'               5 SECONDS FOR CLASS=X           MHL1\nH15      DC    H'15'                                              MHL1\nH30      DC    H'30'                                              MHL1\nK1440    DC    C'1440'\nK39      DC    C'39'              CHANGE '40' TO '39'             MHL1\n         SPACE 3\n         EJECT\n***********************************************************************\n*     JOB AND EXEC CARD PROCESSING - FOUND 'DPRTY'                    *\n***********************************************************************\n         SPACE 1\nJOBDPRTY DS    0H                                                 MHL1\n         LA    R5,L'KDPRTY+1(,R5)  BUMP PAST DPRTY                MHL1\n         OI    CEPUCOM,$BDPRTY    INDICATE BAD DPRTY              MHL1\n         SNAPPER                                                  MHL1\n         B     JOBNEXT            GO CHK FOR PERFORM              MHL1\n         EJECT\n***********************************************************************\n*     JOB AND EXEC CARD PROCESSING - FOUND 'PERFORM'                  *\n***********************************************************************\n         SPACE 1\nJOBPERF  DS    0H\n         OI    CEPUCOM,$BPERF     INDICATE BAD PERFORM            MHL1\n         SNAPPER                                                  MHL1\n         LA    R5,L'KPERFORM(,R5)  POINT PAST 'PERFORM'           MHL1\n         B     JOBNEXT            GET NEXT KEYWORD                MHL1\n         SPACE 2                                                  MHL1\n******************************************************************MHL1\n*        START OF EXEC CARD PROCESSING                            MHL1\n******************************************************************MHL1\n         SPACE 1                                                  MHL1\nEXECSRCH DS    0H                                                 MHL1\n         LA    R14,1                                              MHL1\n         LA    R15,71-L'KEXEC-1(R3)  LAST PLACE FOR 'EXEC'        MHL1\n         LA    R5,2(,R3)          POINT PAST '//'                 MHL1\nEXECSRC1 DS    0H                                                 MHL1\n* SCAN ACROSS STEPNAME TO THE FIRST BLANK AFTER STEPNAME          MHL1\n         CLI   0(R5),C' '         FOUND BLANK?                    MHL1\n         BE    EXECSRC2           YES, SCAN TO NON BLANK          MHL1\n         BXLE  R5,R14,EXECSRC1    LOOK FOR BLANK                  MHL1\n         B     ENDJOB             SHOULD NEVER HAPPEN             MHL1\nEXECSRC2 DS    0H                                                 MHL1\n* SCAN ACROSS BLANKS TO OPERATOR OR OPERAND                       MHL1\n         BXH   R5,R14,ENDJOB      BUMP ACROSS BLANK               MHL1\n         CLI   0(R5),C' '         STILL ON BLANKS?                MHL1\n         BE    EXECSRC2           YES, CONTINUE SCAN              MHL1\nEXECSRC3 DS    0H                                                 MHL1\n* SEE IF OPERATOR ( EXEC ) OR KEYWORD                             MHL1\n         SNAPPER                                                  MHL1\n         CLC   KEXEC,0(R5)        LOOK FOR ' EXEC '               MHL1\n         BNE   EXECSRC6           NO, MUST BE CONTINUATION        MHL1\nEXECSRC4 DS    0H                                                 MHL1\n         LA    R5,L'KEXEC-1(,R5)  POINT PAST 'EXEC'               MHL1\n         LA    R15,70(,R3)        COLUMN 71                       MHL1\n         BXH   R5,R14,ENDJOB      COMPARE TO END OF CARD          MHL1\nEXECSRC5 DS    0H                                                 MHL1\n         CLI   0(R5),C' '         STILL BLANK                     MHL1\n         BNE   JOBKEYWD           NO, LOOK FOR KEYWORDS           MHL1\n         BXLE  R5,R14,EXECSRC5                                    MHL1\n         B     ENDJOB             SHOULD NEVER HAPPEN             MHL1\nEXECSRC6 DS    0H                                                 MHL1\n* DID NOT FIND OPERAND ' EXEC ', MUST BE CONTINUATION             MHL1\n         LR    R0,R5              COPY ADDRESS                    MHL1\n         SR    R0,R3              GET OFFSET                      MHL1\n         CH    R0,H15             START BY COLUMN 16?             MHL1\n         BNH   JOBKEYWD           YES, GOOD CONTINUE              MHL1\n         OI    CEPUCOM+1,$JCLERR  BAD CONTINUATION                MHL1\n         B     ENDJOB                                             MHL1\n         SPACE 1                                                  MHL1\nKEXEC    DC    C'EXEC '                                           MHL1\n         EJECT\n***********************************************************************\n*     END OF JCL PROCESSING                                           *\n***********************************************************************\n         SPACE 1\nENDJOB   DS    0H\n         SNAPPER                                                  MHL1\n         RETURN (14,12),RC=0                                      MHL1\n         EJECT\n***********************************************************************\n*     SEARCH FOR ANY ERRORS                                           *\n***********************************************************************\n         SPACE 1\nANYERRS  DS    0H\n         GETMAIN R,LV=72,SP=$SUBPOOL GET WORK AREA\n         ST    R1,8(,R13)         CHAIN                           MHL1\n         ST    R13,4(,R1)           SAVEAREAS                     MHL1\n         LR    R13,R1             ADDRESS OF SAVEAREA             MHL1\n         XR    R10,R10            CLEAR RETURN CODE REG\n         TM    CEPUCOM+1,$NOACCT  ANY ACCT FLD SPECIFIED ?        MHL1\n         BZ    CHK002               YES, GO CHK FOR BAD ACCT\n         BAL   R9,WTONACCT        PUT OUT WTO SAYING NO ACCT\n         SPACE 1                                                  MHL1\n* APPLICATION CODE IN ACCOUNT FIELD OK?                           MHL1\nCHK002   TM    CEPUCOM+1,$BAPPL   IS ACCT FLD OK ?                MHL1\n         BZ    CHK003               YES, GO CHK FOR DEPT NUMBER\n         BAL   R9,WTOBACCT        PUT OUT WTO SAYING BAD ACCT\n         SPACE 1                                                  MHL1\n* DEPARTMENT NUMBER IN ACCOUNT FIELD OK?                           MHL1\nCHK003   TM    CEPUCOM+1,$BDEPT   IS DEPT FLD OK ?                MHL1\n         BZ    CHK004               YES, GO CHK FOR PROJECT ID\n         BAL   R9,WTOBDEPT        PUT OUT WTO SAYING BAD ACCT\n         SPACE 1                                                  MHL1\n* CLASS SPECIFIED?                                                MHL1\nCHK004   TM    CEPUCOM,$CLASS     IS CLASS SPECIFIED ?            MHL1\n         BO    CHK005               YES, GO CHK FOR BAD CLASS\n         BAL   R9,WTONCLSS        PUT OUT WTO SAYING NO CLASS\n         SPACE 1                                                  MHL1\n* CLASS OK?                                                       MHL1\nCHK005   TM    CEPUCOM,$BCLASS    IS A BAD CLASS SPECIFIED ?      MHL1\n         BZ    CHK006               NO, GO CHK FOR TIME\n         BAL   R9,WTOBCLSS        PUT OUT WTO SAYING BAD CLASS\n         SPACE 1                                                  MHL1\n* TIME SPECIFIED?                                                 MHL1\nCHK006   TM    CEPUCOM,$TIME      IS TIME SPECIFIED ?             MHL1\n         BO    CHK007               YES, GO SEE IF BAD TIME\n         BAL   R9,WTONTIME        PUT OUT WTO SAYING NO TIME\n         SPACE 1                                                  MHL1\n* TIME OK?                                                        MHL1\nCHK007   TM    CEPUCOM,$BTIME     IS A BAD TIME SPECIFIED ?       MHL1\n         BZ    CHK008               NO, GO SEE IF TIME 1440\n         BAL   R9,WTOBTIME        PUT OUT WTO SAYING BAD TIME\n         SPACE 1                                                  MHL1\n* TIME=1440?                                                      MHL1\nCHK008   TM    CEPUCOM,$T1439     WAS TIME 1440 SPECIFIED ?       MHL1\n         BZ    CHK009               NO, GO SEE IF DPRTY\n         BAL   R9,WTOT1439        PUT OUT WTO SAYING CHANGED TIME\n         SPACE 1                                                  MHL1\n* DPRTY SPECIFIED?                                                MHL1\nCHK009   TM    CEPUCOM,$BDPRTY    WAS DPRTY SPECIFIED ?           MHL1\n         BZ    CHK010               NO, GO SEE IF PERFORM\n         BAL   R9,WTODPRTY        PUT OUT WTO SAYING BAD DPRTY\n         SPACE 1                                                  MHL1\n* PERFORM SPECIFIED?                                              MHL1\nCHK010   TM    CEPUCOM,$BPERF     WAS PERFORM SPECIFIED ?         MHL1\n         BZ    CHK011               NO, GO CHK JOBNAME\n         BAL   R9,WTOPERF         PUT OUT WTO SAYING BAD PERFORM\n         SPACE 1                                                  MHL1\n* JOBNAME BEGIN WITH VALID APPLICATION CODE?                      MHL1\nCHK011   TM    CEPUCOM+1,$BJNAME  IS JOB NAME OK ?                MHL1\n         BZ    CHK012               YES, GO CHK LOCATION CODE\n         BAL   R9,WTOBJNME        PUT OUT WTO SAYING BAD JOBNAME\n         SPACE 1                                                  MHL1\n* JOBNAME HAVE VALID LOCATION CODE?                               MHL1\nCHK012   TM    CEPUCOM+1,$BLOC    IS LOCATION CODE OK ?           MHL1\n         BNO   CHK013               YES, GO CHK FREQ CODE\n         BAL   R9,WTOBLOC         PUT OUT WTO SAYING BAD LOCATION MHL1\n         SPACE 1                                                  MHL1\n* JOBNAME HAVE VALID FREQUENCY CODE?                              MHL1\nCHK013   TM    CEPUCOM+1,$BFREQ   IS FREQUENCY CODE OK ?          MHL1\n         BNO   CHK014               YES, GO CHK PROJECT CODE\n         BAL   R9,WTOBFREQ                                        MHL1\n         SPACE 1                                                  MHL1\n* JOBNAME HAVE PROJECT CODE IF TEST JOB?                          MHL1\nCHK014   TM    CEPUCOM+1,$BPROJ   IS PROJ FLD OK ?                MHL1\n         BZ    CHK017               YES, CHK JOBNAME 8 CHARACTERS MHL1\n         BAL   R9,WTOBPROJ        PUT OUT WTO SAYING BAD PROJECT ID\n         SPACE 1                                                  MHL1\n* JOBNAME HAVE PROJECT CODE IF TEST JOB?                          MHL1\nCHK017   TM    CEPUCOM+2,$BADJOBN IS JOBNAME 8 CHARACTERS?        MHL1\n         BZ    GETOUT               YES, END OF EXIT              MHL1\n         BAL   R9,WTOBJNM8        PUT OUT WTO SAYING BAD JOBANME  MHL1\n         EJECT 1\nGETOUT   DS    0H                                                 MHL1\n         AIF   (NOT &TEST).NOTESTX                                MHL1\n         TM    CEPUCOM+1,$JCLERR  FOUND JCL ERROR?                MHL1\n         BNO   GETOUTX            NO, EXIT                        MHL1\n         WTO   'JOB FAILED - JCL ERROR',ROUTCDE=(2,11)            MHL1\nGETOUTX  DS    0H                                                 MHL1\n.NOTESTX ANOP                                                     MHL1\n         LR    R1,R13             POINTER TO WORKAREA             MHL1\n         L     R13,4(,R1)         OLD SAVEAREA                    MHL1\n         SNAPPER                                                  MHL1\n         FREEMAIN R,LV=72,A=(1),SP=$SUBPOOL FREE WORK AREA\n         LR    R15,R10            GET RETURN CODE                 MHL1\n         RETURN (14,12),RC=(15)                                   MHL1\n         SPACE 1\n         EJECT\n***********************************************************************\nWTONACCT DS    0H\n         WTO   'ACCT900E- JOB FAILED BY ACCOUNTING SYSTEM BECAUSE THEREX\n                ARE NO ACCOUNTING FIELDS',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOBACCT DS    0H\n         WTO   'ACCT901E- JOB FAILED BY ACCOUNTING SYSTEM BECAUSE OF INX\n               VALID APPLICATION CODE',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOBDEPT DS    0H\n         WTO   'ACCT902E- JOB FAILED BY ACCOUNTING SYSTEM BECAUSE OF INX\n               VALID DEPARTMENT NUMBER',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOBPROJ DS    0H\n         WTO   'ACCT912E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE TEST JX\n               OB DOES NOT HAVE VALID PROJECT ID',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTONCLSS DS    0H\n         WTO   'ACCT903E- JOB FAILED BY ACCOUNTING SYSTEM BECAUSE CLASSX\n                NOT SPECIFIED',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOBCLSS DS    0H\n         WTO   'ACCT904E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE OF INVX\n               ALID CLASS PARAMETER CODED ON JOB CARD',ROUTCDE=(2,11)\n         WTO   'ACCT904A-JOB CLASS CODED IS NOT AVAILABLE TO CUSTOMER  X\n               USE',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTONTIME DS    0H\n         WTO   'ACCT905E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE TIME FX\n               IELD WAS NOT SPECIFIED',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOBTIME DS    0H\n         WTO   'ACCT906E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE OF INVX\n               ALID TIME SPECIFICATION FOR JOB-CLASS',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOT1439 DS    0H\n         WTO   'ACCT906I-JOB HAD TIME=1440 - ACCOUNTING SYSTEM HAS CHANX\n               GED THIS TO 1439 - PLEASE CHANGE JCL',ROUTCDE=(2,11)\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTODPRTY DS    0H\n         WTO   'ACCT907E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE OF INVX\n               ALID USE OF DPRTY JCL SPECIFICATION',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOPERF  DS    0H\n         WTO   'ACCT908E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE OF INVX\n               ALID USE OF PERFORM JCL SPECIFICATION',ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOBJNME DS    0H\n         WTO   'ACCT909E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE JOBNAMX\n               E DOES NOT START WITH VALID APPLICATION CODE',          X\n               ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\nWTOBLOC  DS    0H                                                 MHL1\n         WTO   'ACCT910E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE LOCATIX\n               ON CODE IS INVALID',ROUTCDE=(2,11)                 MHL1\n         LA    R10,4              SET RETURN CODE                 MHL1\n         BR    R9                 RETURN TO CALLER                MHL1\n         SPACE 3\nWTOBFREQ DS    0H                                                 MHL1\n         WTO   'ACCT911E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE FREQUEX\n               NCY CODE IS INVALID',ROUTCDE=(2,11)                MHL1\n         LA    R10,4              SET RETURN CODE                 MHL1\n         BR    R9                 RETURN TO CALLER                MHL1\n         SPACE 3\nWTOBJNM8 DS    0H\n         WTO   'ACCT917E-JOB FAILED BY ACCOUNTING SYSTEM BECAUSE JOBNAMX\n               E IS NOT 8 CHARACTERS IN LENGTH',                       X\n               ROUTCDE=(2,11)\n         LA    R10,4              SET RETURN CODE\n         BR    R9                 RETURN TO CALLER\n         SPACE 3\n         LTORG\n         AIF   (NOT &SNAP).NOSNAP0                                MHL1\n         EJECT                                                    MHL1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *   MHL1\n*        THIS ROUTINE ISSUES A SNAP WHEN RUNNING UNDER            MHL1\n*        'TESTEXIT'. IT IS CALLED USING R9 AS THE RETURN          MHL1\n*        REGISTER.                                                MHL1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *   MHL1\nSNAPPER  DS    0H                                                 MHL1\n         STM   R0,R15,SNAPREGS    SAVE WORK REGS                  MHL1\n         DEVTYPE SNAP+40,SNAPDEV  CHECK FOR DD CARD               MHL1\n         LTR   R15,R15            CHECK FOR ZERO RETURN CODE      MHL1\n         BNZ   SNAPPER0           NO DD CARD, EXIT                MHL1\n         LA    R15,SNAPSAVE                                       MHL1\n         ST    R15,8(,R13)        CHAIN                           MHL1\n         ST    R13,4(,R15)          SAVEAREA                      MHL1\n         LR    R13,R15                                            MHL1\n         OPEN  (SNAP,(OUTPUT))                                    MHL1\nSNAPPER1 DS    0H                                                 MHL1\n         ST    R2,SNAPLIST        START OF PARMS                  MHL1\n         LA    R0,CEPLNGTH-1(,R2) END OF PARMS                    MHL1\n         ST    R0,SNAPLIST+4                                      MHL1\n         ST    R3,SNAPLIST+8      ADDRESS OF JOBCARD              MHL1\n         LA    R0,79(,R3)         END OF JOBCARD                  MHL1\n         ST    R0,SNAPLIST+12                                     MHL1\n         ST    R4,SNAPLIST+16     POINTER TO JCL TYPE             MHL1\n         LA    R0,1(,R4)          END OF POINTER                  MHL1\n         ST    R0,SNAPLIST+20                                     MHL1\n         L     R15,SNAPCNT                                        MHL1\n         SNAP  DCB=SNAP,ID=(R15),SDATA=CB,                        MHL1 -\n               LIST=SNAPLIST                                      MHL1\nSNAPPER9 DS    0H                                                 MHL1\n         LA    R0,1               ADD                             MHL1\n         A     R0,SNAPCNT          1 TO                           MHL1\n         ST    R0,SNAPCNT           SNAPCNT                       MHL1\n         CLOSE SNAP                                               MHL1\n         L     R13,4(,R13)        GET OLD SAVEAREA                MHL1\nSNAPPER0 DS    0H                                                 MHL1\n         LM    R0,R15,SNAPREGS    RESTORE CALLING REGS            MHL1\n         BR    R9                 EXIT                            MHL1\n* SNAP LIST FOR SMALL SNAP                                        MHL1\nSNAPLIST DC    2F'0'              POINTER TO CEPA                 MHL1\n         DC    2F'0'              POINTER TO JCL CARD             MHL1\n         DC    2F'0'              POINTER TO JCL TYPE             MHL1\n         DC    A(SNAPREGS)        POINTER TO SNAP REGS            MHL1\n         DC    AL1(128),AL3(SNAPREGS+63)                          MHL1\n* REGISTER SAVEAREA FOR REGS AT ENTRY TO SNAP                     MHL1\nSNAPREGS DS    16F                                                MHL1\n* SAVEAREA FOR USE BY SNAP ROUTINE                                MHL1\nSNAPSAVE DS    18F                                                MHL1\n* COUNTER FOR SNAP MACRO                                          MHL1\nSNAPCNT  DC    F'0'               COUNTER                         MHL1\n* WORKAREA FOR DEVTYPE MACRO                                      MHL1\nSNAPDEV  DS    2F                                                 MHL1\n* DCB FOR SNAP IF NEEDED                                          MHL1\nSNAP     DCB   DSORG=PS,RECFM=VBA,MACRF=W,                        MHL1 -\n               BLKSIZE=1632,LRECL=125,                            MHL1 -\n               DDNAME=SNAP                                        MHL1\n.NOSNAP0 ANOP                                                     MHL1\n         EJECT\n***********************************************************************\n*     REGISTER SAVE AREA                                              *\n***********************************************************************\n         SPACE 1\nUJVAREA  DSECT\nSAVE     DS    18F\n* COMMON EXIT PARAMETER AREA DSECT                                MHL1\n* THE FOLLOWING WAS COPIED FROM THE MACRO 'IEFJMR'                MHL1\nCEPA     DSECT                                                    MHL1\nCEPJOB   DS    CL8       JOB NAME                                 MHL1\nCEPENTRY DS    F         ENTRY TIME IN 1/100'S SEC                MHL1\nCEPEDATE DS    F         ENTRY DATE 00YYDDDF                      MHL1\nCEPCPUID DS    CL4       CPU - SID AND MDL FROM SMCA              MHL1\nCEPUSEID DS    CL8       USER ID                                  MHL1\n* CEPUSEID IS USED TO SAVE JOBNAME INFO DURING JOBNAME            MHL1\n* VALIDATION SINCE 2 JOBNAME FORMATS ARE ALLOWED                  MHL1\n* INITIALIZED TO BLANKS BY JES AT READER TIME                     MHL1\nCEPUAPCD EQU   CEPUSEID,2       APPLIACTION CODE                  MHL1\nCEPULOC  EQU   CEPUSEID+2,1     LOCATION CODE                     MHL1\nCEPUFREQ EQU   CEPUSEID+3,1     FREQUENCY CODE                    MHL1\nCEPSTEP  DS    C         STEP NUMBER                              MHL1\nCEPINDC  DS    C                       INDICATOR SWITCHES         MHL1\nCEPJOBSW EQU   X'80'  JOB FUNCTIONS REQUESTED                     MHL1\nCEPSTPSW EQU   X'40'  STEP FUNCTIONS REQUESTED                    MHL1\nCEPEXITS EQU   X'20'    USER EXITS REQUESTED                      MHL1\nCEPXONLY EQU   X'10'     EXITS ONLY SPECIFIED                     MHL1\nCEPFIND  EQU   X'01'                   FOREGROUND INDICATED       MHL1\nCEPFLG   DS    C       JOB STATUS INDICATOR                       MHL1\nCEPSTRS  EQU   X'80'   STEP RESTART                               MHL1\nCEPCHRS  EQU   X'40'   CHECKPOINT RESTART                         MHL1\nCEPCNRS  EQU   X'20'   CONTINUE RESTART                           MHL1\nCEPWARM  EQU   X'08'   WARMSTART JOB                              MHL1\nCEPCLASS DS    1C      JOB CLASS                                  MHL1\nCEPUCOM  DS    F       USER COMMUNICATION FIELD -                 MHL1\n*                        INITIALIZED TO ZEROS BY JES AT START     MHL1\n*                        OF JOB EXECUTION                         MHL1\nCEPLNGTH EQU   *-CEPJOB                                           MHL1\n         END   IEFUJV\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUJV$": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRBUJV JOB  (SP,9030,0000000),'WESTERMAN - BOX 3',\n//       CLASS=H,MSGCLASS=S,TIME=30,\n//       NOTIFY=XSPRBWW TYPRUN=HOLD\n//*\n//JS001     EXEC ASMFCL,\n//             REGION.ASM=1024K,\n//             PARM.ASM=('OBJ','NODECK','BUFSIZE(MAX)','NOTEST'),\n//             COND.LKED=(4,LT,ASM),\n//             PARM.LKED='XREF,LIST,NCAL,RENT,REUS'\n//ASM.SYSLIB   DD DSN=SYS1.SMPMTS,\n//             DCB=BLKSIZE=23200,\n//             DISP=SHR\n//             DD DSN=SYS1.AMODGEN,\n//             DISP=SHR\n//             DD DSN=SYS1.AGENLIB,\n//             DISP=SHR\n//             DD DSN=SYS1.MACLIB,\n//             DISP=SHR\n//SYSIN        DD DSN=XSPRBWW.POSSIBLE.MODS(IEFUJV),DISP=SHR\n//LKED.SYSLMOD DD DSN=ALCATEL.LINKLIB,DISP=SHR\n//LKED.SYSIN   DD *\n  NAME IEFUJV(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL": {"ttr": 6153, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x01p\\x01p\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 368, "newlines": 368, "modlines": 0, "user": "SYZYGYB"}, "text": "IEFUTL   TITLE 'ALCATEL - USER TIME LIMIT EXIT'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFUTL                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  USER TIME LIMIT EXIT                *\n*                                                                     *\n*             COPYRIGHT = NONE                                        *\n*                                                                     *\n*             FUNCTION =                                              *\n*                ALLOW JOBS TO BE CANCELLLED IF JOB (STEP) TIME       *\n*                   LIMIT EXCEEDED.                                   *\n*                ALLOW TSO SESSIONS TO HAVE ONE MORE MINUTE OF CPU    *\n*                   TIME IF JOB (STEP) TIME LIMIT EXCEEDED.           *\n*                ALLOW JOBS TO HAVE 15 MORE MINUTES OF WAIT TIME      *\n*                   IF WAIT TIME LIMIT EXCEEDED.                      *\n*                ALLOW TSO SESSIONS TO BE EXTENDED ONE TEN MINUTE     *\n*                   PERIOD.                                           *\n*                                                                     *\n*                OPERATION =                                          *\n*                   ANALYZE SMF COMMON EXIT PARAMETER AREA.           *\n*                   IF WAIT TIME LIMIT EXCEEDED SEE IF JOB.  NO,      *\n*                      EXTEND THE TSO SESSION.  IF JOB NOTIFY         *\n*                      OPERATOR THAT ONE 15 MINUTE EXTENSION WILL     *\n*                      BE GRANTED.  RETURN TO CALLER WITH A RETURN    *\n*                      CODE OF 8 IN REGISTER 15 AND THE NUMBER        *\n*                      OF SECONDS (900) OF WAIT TIME EXTENSION IN     *\n*                      REGISTER 1.  INCREMENT THE USER COMMUNICA-     *\n*                      TION FIELD TO INDICATE A WAIT TIME EXTENSION.  *\n*                   IF JOB OR STEP TIME LIMIT IS EXCEEDED SEE IF      *\n*                      TSO SESSION.  NO, CANCEL THE JOB (AS ABOVE).   *\n*                      YES, SEE IF TIME HAS ALREADY BEEN INCREMENTED  *\n*                      ONCE.  YES, EXTEND THE TSO SESSION (AS ABOVE). *\n*                      NO, INFORM THE USER THAT THE CPU TIME LIMIT    *\n*                      HAS BEEN EXCEEDED AND A 1 MINUTE EXTENSION     *\n*                      IS BEING GRANTED.  RETURN TO CALLER WITH A     *\n*                      RETURN CODE OF 8 IN REGISTER 15 AND THE        *\n*                      NUMBER OF SECONDS (60) OF CPU TIME EXTENSION   *\n*                      IN REGISTER 1.  INCREMENT THE USER COMMUNICA-  *\n*                      TION FIELD TO INDICATE A CPU TIME EXTENSION.   *\n*                                                                     *\n*             NOTES =                                                 *\n*                                                                     *\n*                DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE  *\n*                   IF A DIFFERENT CHARACTER SET IS NEEDED.           *\n*                                                                     *\n*                RESTRICTIONS = NONE                                  *\n*                                                                     *\n*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *\n*                   REGISTERS 0 TO 2  = WORK REGISTERS                *\n*                   REGISTERS 3 TO 9  = UNUSED                        *\n*                   REGISTER  10      = ADDRESS OF GETMAINED AREA     *\n*                   REGISTER  11      = ADDRESSABILITY TO COMMON      *\n*                                       EXIT PARAMETER AREA           *\n*                   REGISTER  12      = ADDRESSABILITY TO IEFUTL      *\n*                                       CSECT                         *\n*                   REGISTER  13      = SAVE AREA REGISTER            *\n*                   REGISTER  14      = RETURN ADDRESS                *\n*                   REGISTER  15      = RETURN CODE                   *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                  'ZAP*'S)                                           *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = ABOUT 600 BYTES                        *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, REENTRANT,             *\n*                   SUPERVISOR STATE, ENABLED                         *\n*                                                                     *\n*             ENTRY POINTS = IEFUTL (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM INITIATOR VIA MODULE IEATLEXT                *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO A LIST OF FULL WORDS       *\n*                THE FIRST OF WHICH POINTS TO THE SMF COMMON          *\n*                EXIT PARAMETER AREA MAPPED BY SMFCEPA DSECT          *\n*                                                                     *\n*             OUTPUT = REGISTER 15 - RETURN CODE                      *\n*                REGISTER 1 - TIME LIMIT EXTENSION                    *\n*                USER COMMUNICATION FIELD - EXTENSION COUNT           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = SEE FUNCTION ABOVE                     *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, TPUT                                     *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THE MESSAGES ISSUED BY THE PROBLEM ARE FOUND AT      *\n*                   THE LABELS MESSAGEC, MESSAGEW, AND WTOC.          *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n*        CHANGED TO CANCEL CLASS=X                                 WCH1\n***********************************************************************\nIEFUTL   CSECT\n         SAVE  (14,12),,IEFUTL.IPO.&SYSTIME_&SYSDATE SAVE REGISTERS\n         LR    R12,R15                 LOAD REGISTER 12 FROM 15\n         USING IEFUTL,R12              ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n*\n***********************************************************************\n*                                                                     *\n*        ESTABLISH ADDRESSABILITY TO SMF PARAMETER AREA DSECT         *\n*        EVALUATE REGISTER 0 = 0 - JOB CPU TIME EXCEEDED              *\n*                            = 4 - STEP CPU TIME EXCEEDED             *\n*                            = 8 - JOB WAIT TIME EXCEEDED             *\n*                                                                     *\n***********************************************************************\n*\n         L     R11,D0(R1)              LOAD POINTER TO PARAMETER AREA\n         USING SMFEPLA,R11             ESTABLISH ADDRESSABILITY TO SMF\n*                                      PARAMETER AREA DSECT\n         C     R0,FULL4                SEE IF JOB/STEP TIME EXCEEDED\n         BH    WAITTIME                NO.....GO DO ANALYSIS FOR WAIT\n*                                      TIME EXCEEDED\n*\n***********************************************************************\n*                                                                     *\n*        CPU TIME EXCEEDED - ONLY ALLOW TSO SESSION A 5  MINUTE       *\n*           EXTENSION                                                 *\n*                                                                     *\n***********************************************************************\n*\n         TM    SMFOPT,SMFTSO           SEE IF TSO SESSION\n         BNO   CHKJOB                  NO.. GO SEE IF TEST JOB\n*\n         CLI   SMFUSERC,ONE            SEE IF CPU TIME HAS NOT YET BEEN\n*                                      EXTENDED ONCE\n         BE    CANCEL                  YES...GO CANCEL TSO SESSION -\n*                                      ALREADY EXTENDED ONCE\n         TPUT  MESSAGEC,L'MESSAGEC     PUT OUT MESSAGE TO TERMINAL\n         MVI   SMFUSERC,ONE            INDICATE ONE EXTENSION GRANTED\n         L     R2,FULL8                INDICATE RETURN CODE OF 8 -\n*                                      EXTEND CPU TIME IN SECONDS\n         L     R1,FULL300              LOAD TIME EXTENSION IN SECONDS\n*                                      INTO REGISTER 1\n         B     RETURN                  GO RETURN TO CALLER\nCHKJOB   DS    0H\n         CLI   SMFJOBN,C'X'        USERID FORMAT?                 MHL1\n         BE    CANCEL              YES, ASSUME TEST JOB           MHL1\n         CLI   SMFJOBN+6,C'T'\n         BE    CANCEL\n         CLI   SMFJCLAS,C'A'\n         BE    CANCEL\n         CLI   SMFJCLAS,C'B'\n         BE    CANCEL\n         CLI   SMFJCLAS,C'X'                                       WCH1\n         BE    CANCEL                                              WCH1\n         CLI   SMFJCLAS,C'N'                                       WCH1\n         BE    CANCEL                                              WCH1\n         CLI   SMFUSERC,ONE\n         BE    NOWTOC\n         GETMAIN R,LV=JOBMSGL,SP=241\n         LR    R10,R1                  SAVE ADDRESS OF GETMAINED AREA\n         MVC   D0(JOBMSGL,R10),JOBMSG\n         MVC   44(L'SMFJOBN,R10),SMFJOBN\n         SVC   WTOSVC                  ISSUE WTO SVC\n         MVC   D0(JOBMSGL,R10),JOBMSG2\n         LR    R1,R10\n         SVC   WTOSVC                  ISSUE WTO SVC\n         FREEMAIN R,LV=JOBMSGL,A=(R10),SP=241\n*                                      FREEMAIN AREA FOR WTO DATA\nNOWTOC   MVI   SMFUSERC,ONE            INDICATE ONE EXTENSION GRANTED\n         L     R2,FULL8                INDICATE RETURN CODE OF 8 -\n*                                      EXTEND CPU TIME IN SECONDS\n         L     R1,FULL600              LOAD TIME EXTENSION IN SECONDS\n*                                      INTO REGISTER 1\n         B     RETURN                  GO RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*   WAIT TIME EXCEEDED                                                *\n*        - ALLOW TSO A 10 MINUTE EXTENSION                            *\n*        - MODIFIED TO 5 MINUTE EXTENSION 1/17/84    CXV              *\n*        - ALLOW JOB A 10 MINUTE EXTENSION AND NOTIFY OPERATOR        *\n*                                                                     *\n***********************************************************************\n*\nWAITTIME DS    0H\n         CLI   SMFUSERW,ONE            SEE IF WAIT TIME HAS NOT YET\n*                                      BEEN EXTENDED ONCE\n         BE    CANCEL                  YES...GO CANCEL JOB - WAIT TIME\n*                                      ALREADY EXTENDED ONCE\n*\n***********************************************************************\n*                                                                     *\n*        ROUTCDE=2 WAS USED SO THAT ENQ RET=TEST WAS UNNECESSARY      *\n*        ENQ RET=TEST IS NECESSARY FOR ROUTCDE=11 (WTP) WHETHER       *\n*           OR NOT THAT ROUTING OCCURS BY DEFAULT                     *\n*        WTP CAUSES AN ENQ OF THE FOLLOWING FORM:                     *\n*           MAJORNAME: SYSSJWTP                                       *\n*           MINORNAME: RPL + ASID (LENGTH OF 6)                       *\n*              RPL IS THE 4 BYTE REQUEST PARAMETER LIST POINTER       *\n*                 LOCATED AT OFFSET JSCBSMLR (X'128') IN THE JSCB     *\n*              ASID IS THE 2 BYTE ADDRESS SPACE IDENTIFIER            *\n*                 LOCATED AT OFFSET ASCBASID (X'24') IN THE ASCB      *\n*                                                                     *\n***********************************************************************\n*\n*                                      EXTEND CPU TIME IN SECONDS  CXV\n*                                      INTO REGISTER 1             CXV\n         TM    SMFOPT,SMFTSO           IS IT A TSO SESSION ?\n         BO    WAITTSO                   YES, DON'T ISSUE WTO     MHL1\n         GETMAIN R,LV=WTOL,SP=241      GETMAIN AREA FOR WTO DATA\n         LR    R10,R1                  SAVE ADDRESS OF GETMAINED AREA\n         MVC   D0(WTOL,R1),WTOC        MOVE WTOC CONSTANT INTO WORKAREA\n         MVC   WTOL-D12(L'SMFJOBN,R1),SMFJOBN  MOVE JOBNAME INTO WTO\n         SVC   WTOSVC                  ISSUE WTO SVC\n         FREEMAIN R,LV=WTOL,A=(R10),SP=241\n*                                      EXTEND CPU TIME IN SECONDS  CXV\n*                                      INTO REGISTER 1             CXV\n         L     R1,WAIT600              LOAD TIME EXTENS IN SECONDS CXV\n*                                      FREEMAIN AREA FOR WTO DATA\nNOWTO    MVI   SMFUSERW,ONE            INDICATE ONE EXTENSION GRANTED\n         L     R2,FULL8                INDICATE RETURN CODE OF 8 -\n*        L     R1,WAIT600              LOAD TIME EXTENS IN SECONDS CXV\n         TM    SMFOPT,SMFTSO\n         BO    RETURN\n         MVI   SMFUSERW,D0\n         B     RETURN                  GO RETURN TO CALLER\n         SPACE 1                                                  MHL1\n* TSO USERS GET ONE 5 MINUTE EXTENSION (AT SOME FUTURE DATE)      MHL1\nWAITTSO  DS    0H                                                 MHL1\n*        L     R1,WAIT300              LOAD TIME EXTENS IN SECONDS CXV\n         L     R1,WAIT600              LOAD TIME EXTENS IN SECONDS CXV\n*        B     NOWTO\n         CLC   =C'XOP',SMFJOBN         OPERATIONS?                MHL1\n         BE    WAITSP                  YES, CHECK TIME OF DAY     MHL1\n         CLC   =C'XSPR',SMFJOBN        SYSTEMS?                   MHL1\n         BNE   NOWTO                   NO, WAIT 1 TIME            MHL1\n* IF SYSTEMS, DON'T LOGOFF FROM 07:30 TO 17:30                    MHL1\nWAITSP   DS    0H                                                 MHL1\n         TIME  DEC                     GET TIME                   MHL1\n*        L     R1,WAIT300              LOAD TIME EXTENS IN SECONDS CXV\n         L     R1,WAIT600              LOAD TIME EXTENS IN SECONDS CXV\n*        C     R0,TIME0730             SEE IF BEFORE 07:30        MHL1\n*        BL    NOWTO                   EARLY, TIMEOUT             MHL1\n*        C     R0,TIME1730             SEE IF AFTER 17:30         MHL1\n*        BH    NOWTO                   LATE, TIMEOUT              MHL1\n         L     R2,FULL8                RETCODE = 8, EXTEND TIME   MHL1\n         B     RETURN                  RETURN TO MVS              MHL1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ZERO REGISTER 2 TO INDICATE CANCEL                           *\n*                                                                     *\n***********************************************************************\n*\nCANCEL   DS    0H\n         SLR   R2,R2                   INDICATE RETURN CODE OF ZERO -\n*                                      CONTINUE (CANCEL)\n*\n***********************************************************************\n*                                                                     *\n*        NORMAL END PROCESSING                                        *\n*                                                                     *\n***********************************************************************\n*\nRETURN   DS    0H\n         L     R14,D12(,R13)           LOAD ADDRESS FOR RETURN\n         LR    R15,R2                  LOAD RETURN CODE FROM REGISTER 2\n         LM    R2,R12,D28(R13)         RESTORE REGISTERS 2 TO 12\n         BR    R14                     RETURN TO CALLER\n         SPACE 5\n**************************** CONSTANTS ********************************\nFULL4    DC    F'4'\nFULL8    DC    F'8'\nFULL300  DC    F'300'\nFULL600  DC    F'600'\nWAIT600  DC    F'600'\nWAIT300  DC    F'300'\nTIME0730 DC    X'07300000'             07:30 IN HHMMSSTH          MHL1\nTIME1730 DC    X'17300000'             17:30 IN HHMMSSTH          MHL1\n         LTORG ,                                                  MHL1\n         EJECT\n****************************** MESSAGES *******************************\n         SPACE 2\nMESSAGEC DC    C'CPU TIME LIMIT HAS BEEN EXCEEDED. A SINGLE FIVE MINUTEX\n                EXTENSION WILL BE GRANTED. PLEASE LOGOFF SHORTLY'\n*\nJOBMSG   WTO   'CPU TIME LIMIT HAS BEEN EXCEEDED BY JOB XXXXXXXX. PLEASX\n               E CORRECT THE TIME PARAMETER IN THE JCL.',              X\n               ROUTCDE=(2),DESC=(6),MF=L\nJOBMSGL  EQU   *-JOBMSG\nJOBMSG2  WTO   'THIS IS ONLY A WARNING NOW. CHECK THE TIME PARAMETER INX\n                BOTH THE JOB AND THE EXEC CARDS.       ',              X\n               ROUTCDE=(2),DESC=(6),MF=L\n*\nWTOC     WTO   'WAIT TIME LIMIT HAS BEEN EXCEEDED. A SINGLE 10 MINUTE EX\n               XTENSION WILL BE GRANTED FOR JOB 12345678',             X\n               ROUTCDE=(2),DESC=(6),MF=L\nWTOL     EQU   *-WTOC\n*\n         SPACE 2\n***************************** PATCH AREA ******************************\n         DS    0F\nPATCH    DC    8CL4'ZAP*'\n         EJECT\n************************ DSECTS (MAPPING MACROS) **********************\nSMFEPLA  DSECT\nSMFJOBN  DS    CL8\nSMFTIME  DS    CL4\nSMFDATE  DS    CL4\nSMFSID   DS    CL4\nSMFUSID  DS    CL8\nSMFSTEP  DS    CL1\nSMFOPT   DS    CL1\nSMFTSO   EQU   X'01'\nSMFVS1   DS    CL1\nSMFJCLAS DS    CL1\nSMFUSER  DS    CL4\n         ORG   SMFUSER\nSMFUSERC DS    CL1\nSMFUSERW DS    CL1\n         ORG\n         SPACE 5\n********************************* EQUATES *****************************\nD0       EQU   0\nD12      EQU   12\nD28      EQU   28\nONE      EQU   1\nWTOSVC   EQU   35\n         SPACE 5\n***************************** REGISTER EQUATES ************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   IEFUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL$": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\"\\x00\"\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRBUTL JOB (SP,9030,0000000),'WESTERMAN   - BOX 3',\n//             TIME=30,TYPRUN=HOLD,\n//             NOTIFY=XSPRBWW,\n//             CLASS=H,MSGCLASS=S,MSGLEVEL=(1,1)\n//*\n//* DOC: THIS JOB CAN BE USED TO INSTALL THE\n//*      SMF USER TIME LIMIT EXIT, IEFUTL.\n//*\n//ASMUTL1 EXEC ASMFCL,PARM.ASM='RENT,OBJECT,NODECK',\n//             PARM.LKED='RENT,REUS,XREF,LIST'\n//ASM.SYSLIB   DD UNIT=3380,VOL=SER=R12007\n//SYSIN    DD  DSN=XSPRBWW.POSSIBLE.MODS(IEFUTL),DISP=SHR\n//LKED.SYSLMOD DD DSN=ALCATEL.LINKLIB(IEFUTL),DISP=SHR,\n//             VOL=SER=R120RS,UNIT=3380\n//SYSIN    DD  *\n      IDENTIFY IEFUTL('ALSMF01')\n/*\n//SMPAPP2 EXEC IPOSMPE,COND=(0,NE)\n//SMPPTFIN DD  *\n++ USERMOD (ALSMF01) .\n++ VER (Z038) FMID(HBB3310).\n++ VER (Z038) FMID(HBB2102).\n++ VER (Z038) FMID(JBB1326).\n++ MOD (IEFUTL) DISTLIB(AOSB3) LKLIB(ALCLINK) .\n/*\n//SMPEIN   DD  *\n  SET BOUNDARY(GLOBAL) .\n  RECEIVE      S(ALSMF01) SYSMODS .\n  SET BOUNDARY(M220TZ).\n  APPLY        S(ALSMF01) .\n  LIST         SYSMOD(ALSMF01) .\n/*\n//ALCLINK  DD  DSN=ALCATEL.LINKLIB,DISP=SHR,\n//             VOL=SER=R120RS,UNIT=3380\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU29X": {"ttr": 6407, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\xcb\\x00\\xcb\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 203, "newlines": 203, "modlines": 0, "user": "SYZYGYB"}, "text": "IEFU29   TITLE 'SMF SWITCH EXIT ROUTINE                        '\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFU29                                    *\n*                                                                     *\n*                SMF EXIT ROUTINE TO START DUMP OF SMF WHEN SMF       *\n*                SWITCH COMMAND IS ISSUED.                            *\n*                                                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                ISSUES START COMMAND FOR DUMPXY PROCEDURE.           *\n*                                                                     *\n*                OPERATION =                                          *\n*                   ISSUE COMMAND 'START DUMPXY,DSNAME=SYS1.MANN'     *\n*                   WHERE N IS REPLACED BY THE NUMBER OF THE SMF      *\n*                   DATA SET TO BE DUMPED.                            *\n*                   ISSUE WTO THAT COMMAND HAS BEEN ISSUED.           *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                                                                     *\n*                 RESTRICTIONS = NONE                                 *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2 TO 11 = UNUSED                       *\n*                    REGISTER  12      = ADDRESSABILITY TO IEFU29     *\n*                                        CSECT                        *\n*                    REGISTER  13      = ADDRESSIBILITY TO DATA DSECT *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   BINARY ZEROES)                                    *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASSEMBLER H VERSION 2                    *\n*                                                                     *\n*                MODULE SIZE = 1200 BYTES                             *\n*                                                                     *\n*                ATTRIBUTES = KEY 0, REENTRANT,                       *\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *\n*                                                                     *\n*             ENTRY POINTS = IEFU29 (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                                                                     *\n*                                                                     *\n*             INPUT = REG1 POINTS TO FULLWORD ADDRESS OF DATA SET     *\n*                     NAME (SYS1.MANX/SYS1.MANY) TO BE DUMPED .       *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BSM 0,14             *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = FOUR TO PREVENT SMF FROM ISSUING       *\n*                              MESSAGE IEE362A OR IEE362I             *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = FOUR                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN           *\n*                                                                     *\n*             CHANGE ACTIVITY = THIS MODULE HAS BEEN UPDATED          *\n*                FOR MVS/XA. THIS MODULE RUNS IN 31-BIT MODE          *\n*                ABOVE THE LINE. AS SVC 34 REQUIRES PARAMETERS        *\n*                BELOW THE LINE, STORAGE IS ACQUIRED WITH THE         *\n*                LOC=BELOW OPTION.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*             MESSAGES =                                              *\n*                INFORM OPERATOR THAT COMMAND HAS BEEN ISSUED.        *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEFU29   CSECT ,                       CSECT NAME DECLARED\nIEFU29   AMODE 31                                             IPOXA\nIEFU29   RMODE ANY                                            IPOXA\n*\n*  CONSTANT EQUATES\n*\nCMDSVC   EQU   34                      SVC TO ISSUE COMMAND\nDSNLEN   EQU   9                       LENGTH OF DSNAME FIELD\n*\nK0       EQU   0                       CONSTANT 0\nK1       EQU   1                       CONSTANT 1\nK2       EQU   2                       CONSTANT 2\nK4       EQU   4                       CONSTANT 4\nK8       EQU   8                       CONSTANT 8\nK12      EQU   12                      CONSTANT 12\nK16      EQU   16                      CONSTANT 16\n*\n* REGISTER EQUATES\n*\nR00      EQU   00                      REGISTER 0\nR01      EQU   01                      REGISTER 1\nR02      EQU   02                      REGISTER 2\nR03      EQU   03                      REGISTER 3\nR04      EQU   04                      REGISTER 4\nR05      EQU   05                      REGISTER 5\nR06      EQU   06                      REGISTER 6\nR07      EQU   07                      REGISTER 7\nR08      EQU   08                      REGISTER 8\nR09      EQU   09                      REGISTER 9\nR10      EQU   10                      REGISTER 10\nR11      EQU   11                      REGISTER 11\nR12      EQU   12                      REGISTER 12\nR13      EQU   13                      REGISTER 13\nR14      EQU   14                      REGISTER 14\nR15      EQU   15                      REGISTER 15\n         EJECT\n         SAVE  (14,12),,IEFU29_&SYSDATE SAVE REGISTERS\n         USING IEFU29,R12              SET UP BASE ADDRESSABILITY\n         USING DATA,R13                SET UP DATA AREA ADDRESSABILITY\n         LR    R12,R15                 LOAD BASE REG WITH ENTRY POINT\n         L     R08,K0(R01)             SAVE INPUT PARM(DSNAME)\n         GETMAIN RU,LV=DATALEN,SP=0,LOC=BELOW GET STORAGE        IPOXA\n         ST    R13,K4(R01)             SAVE CALLER'S SAVE AREA ADDR\n         ST    R01,K8(R13)             SAVE MY SAVE AREA ADDRESS\n         LR    R13,R01                 LOAD SAVE AREA ADDRESS\n         MVC   ENQLIST(LENQLIST),ENQLSTX LOAD IN MODEL PARM LIST\n         ENQ   MF=(E,ENQLIST)          TEST IF RESOURCE IN USE?\n         LTR   R15,R15                 WAS THE RESOURCE AVAILABLE?\n         BNZ   SKIPDUMP                NO, DO NOT START DUMP\n         MVC   WTOAREA(WTOLEN),WTOL    MOVE IN WTO MESSAGE\n         MVC   WTOAREA+DSNOFF(DSNLEN),K0(R08) MOVE DSNAME IN MSG\n         MVC   CMDAREA(CMDLEN),CMDL    MOVE IN START COMMAND\n         MVC   CMDAREA+DSNCOFF(DSNLEN),K0(R08) MOVE DSN IN START CMD\n         SLR   R00,R00                 CLEAR REG ZERO FOR SVC 34\n         LA    R01,CMDAREA             POINT TO START COMMAND\n         SVC   CMDSVC                  ISSUE START COMMAND\n         WTO   MF=(E,WTOAREA)          ISSUE MSG\nSKIPDUMP LR    R01,R13                 LOAD GETMAINED AREA\n         L     R13,K4(R13)             POINT TO CALLER'S SAVE AREA\n         FREEMAIN RU,LV=DATALEN,A=(1)  FREE GETMAINED STORAGE  IPOXA\n         LM    14,12,12(13)            RESTORE REGISTERS       IPOXA\n         LA    15,4                    SET RETURN CODE TO 4    IPOXA\n         BSM   0,R14                   RESTORE CALLER'S MODE   IPOXA\n         EJECT\n*\n*  DATA AREA\n*\nSMFQNAME DC    CL8'IPOSMF01'                                  SIPO50\nSMFRNAME DC    CL7'DATASET'\n*\nCMDL     DS    0F                      START COMMAND FORMAT FOR SVC 34\n         DC    AL2(CMDLEN),AL2(00)     LENGTH OF STRING\n         DC    C'START DUMPXY,DSNAME=XXXXXXXXX    ' . COMMAND + BLANK\n*                456789012345678901234567890123456  . CHECK COLUMNS\nCMDLEN   EQU   *-CMDL             LENGTH OF COMMAND STRING\nDSNCOFF  EQU   24                 OFFSET OF DSNAME FIELD IN CMD LIST\n*\nWTOL     WTO   'IEFU29 HAS ISSUED COMMAND ''START DUMPXY,DSNAME=XXXXXXXC\n               XX'' ',ROUTCDE=(1,2,11),MF=L\n*               456789012345678901234567890 1234567890123456789012\nWTOLEN   EQU   *-WTOL             LENGTH OF WTO STRING\nDSNOFF   EQU   51                 OFFSET OF DSNAME FIELD IN WTO LIST\nENQLSTX  ENQ   (SMFQNAME,SMFRNAME,E,,SYSTEM),RET=TEST,MF=L\n*\n* DATA DSECT - AREA TO BE GETMAIN'ED\n*\nDATA     DSECT\nSAVE     DS    18F                REGISTER SAVE AREA\nCMDAREA  DS    0F,XL(CMDLEN)      AREA FOR COMMAND\nWTOAREA  DS    0F,XL(WTOLEN)      AREA FOR WTO PARM LIST\nENQLIST  ENQ   (SMFQNAME,SMFRNAME,E,,SYSTEM),RET=TEST,MF=L\nLENQLIST EQU   *-ENQLIST          LENGTH OF WTO STRING\nRESERVED DS    4D                 RESERVED\nDATALEN  EQU   *-DATA             EQUATE FOR LENGTH OF DATA DSECT\n*\nIEFU29   CSECT                    GET BACK TO CSECT\n         DS    0D                 FORCE TO DOUBLE WORD\n*\n* PATCH AREA\n*\nMODLEN   EQU   *-IEFU29           EQUATE FOR MODULE LENGTH(- PATCH)\nPTCHLEN  EQU   ((MODLEN+7)/8+7)/8*8 PATCH AREA LENGTH EQUATE\nPTCHLNTH DC    Y(PTCHLEN)          LENGTH OF PATCH AREA\nPTCHBASE DC    S(PATCH)            BASE DISPLACED ADDRESS OF PATCH\nPATCH    DC    XL(PTCHLEN)'00'     PATCH AREA\n         END   IEFU29\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU29X$": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\"\\x00\"\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRBU29 JOB (SP,9030,0000000),'WESTERMAN   - BOX 3',\n//             TIME=30,TYPRUN=HOLD,\n//             NOTIFY=XSPRBWW,\n//             CLASS=H,MSGCLASS=S,MSGLEVEL=(1,1)\n//*\n//* DOC: THIS JOB CAN BE USED TO INSTALL THE\n//*      SMF DUMP EXIT ROUTINE, IEFU29.\n//*\n//ASMU291 EXEC ASMHCL,PARM.C='RENT,OBJECT,NODECK',\n//             PARM.L='RENT,REUS,XREF,LIST'\n//C.SYSLIB DD  UNIT=3380,VOL=SER=R12007,DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSIN  DD  DSN=XSPRBWW.POSSIBLE.MODS(IEFU29X),DISP=SHR\n//L.SYSLMOD DD DSN=ALCATEL.LINKLIB(IEFU29),DISP=SHR,\n//             VOL=SER=R120RS,UNIT=3380\n//L.SYSIN  DD  *\n      IDENTIFY IEFU29('ALSMF02')\n/*\n//SMPAPP2 EXEC IPOSMPE,COND=(0,NE)\n//SMPPTFIN DD  *\n++ USERMOD (ALSMF02) .\n++ VER (Z038) FMID(HBB3310) .\n++ VER (Z038) FMID(HBB2102) .\n++ MOD (IEFU29) DISTLIB(AOS00) LKLIB(ALCLINK) .\n/*\n//SMPEIN   DD  *\n SET BOUNDARY(GLOBAL) .\n RECEIVE       S(ALSMF02) SYSMODS .\n SET BOUNDARY(M220TZ) .\n APPLY         S(ALSMF02) .\n LIST          SYSMOD(ALSMF02) .\n/*\n//ALCLINK  DD  DSN=ALCATEL.LINKLIB,DISP=SHR,\n//             VOL=SER=R120RS,UNIT=3380\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU83X": {"ttr": 6413, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x01\\x00\\x01\\x00\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 256, "newlines": 256, "modlines": 0, "user": "SYZYGYB"}, "text": "IEFU83 TITLE 'SMF RECORD EXIT'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFU83                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME = CUSTOM-BUILT IPO SUPPLIED RECORD EXIT*\n*                                                                     *\n*             COPYRIGHT = 1983                                        *\n*                                                                     *\n*             FUNCTION =                                              *\n*             THIS MODULE RECEIVES CONTROL FROM SVC83(IEEMB830 ALIAS  *\n*             IGC0008C) BEFORE EACH RECORD IS WRITTEN TO THE SMF DATA *\n*             SET. THE FUNCTION OF THIS MODULE IS TO DETERMINE WHICH  *\n*             SMF RECORDS ARE TO BE WRITTEN TO OR DELETED FROM THE MAN*\n*             DATA SET. THIS SPECIFIC MODULE HAS A 256 BIT AREA CALLED*\n*             BITMAP SET UP WITH THE 41ST BIT SET ON(1) SPECIFYING    *\n*             THAT THE SMF RECORD TYPE 40 RECORD IS TO BE DELETED. AN *\n*             INSTALLATION CAN CHANGE THE BITMAP AREA TO DELETE OR    *\n*             KEEP ANY SMF RECORD TYPE FROM 0 TO 255 BY USING THE IBM *\n*             SERVICE AID SUPERZAP TO SET THE APROPRIATE BITS TO SUIT *\n*             ITS NEEDS.                                              *\n*                                                                     *\n*             OPERATION =                                             *\n*             UPON ENTRY REGISTER 1 POINTS TO THE RECORD DESCRIPTOR   *\n*             WORD(RDW) OF THE SMF RECORD TO BE WRITTEN. THE SMF      *\n*             RECORD NUMBER IS GOTTEN FROM THE RECORD AND TESTED      *\n*             AGAINST THE BITMASK. IF THE BITMASK FOR THAT SPECIFIC   *\n*             RECORD IS ON, THAT RECORD IS DELETED BY PUTTING A RETURN*\n*             CODE OF 4 IN REGISTER 15 AND RETURNING. IF THE BITMAP   *\n*             FOR THAT RECORD IS OFF A RETURN CODE OF 0 IS PLACED IN  *\n*             REGISTER 15 AND RETURNED TO THE CALLER.                 *\n*                                                                     *\n*             DEPENDENCIES = NONE                                     *\n*                                                                     *\n*             RESTRICTIONS = NONE                                     *\n*                                                                     *\n*             REGISTER CONVENTIONS = STANDARD CONVENTIONS.            *\n*                REGISTERS 0,2,6,8,9,10,11 = WORK REGISTERS           *\n*                REGISTERS 3,4,5,7 = UNUSED                           *\n*                REGISTER 1 = PARAMETER REGISTER                      *\n*                REGISTER 12 = BASE REGISTER                          *\n*                REGISTER 13 = SAVEAREA REG                           *\n*                REGISTER 14 = RETURN REGISTER                        *\n*                REGISTER 15 = ENTRY, TEMP BASE, RETURN CODE REGISTER *\n*                                                                     *\n*             MODULE TYPE = EXECUTABLE\n*                                                                     *\n*                PROCESSOR = THIS MODULE MUST BE ASSEMBLED WITH       *\n*                            ASSEMBLER H VERSION 2                    *\n*                                                                     *\n*                MODULE SIZE = 174 BYTES                              *\n*                                                                     *\n*                ATTRIBUTES = PROTECTION KEY 0, REENTRANT, ENABLED    *\n*                                                                     *\n*                                                                     *\n*             ENTRY POINTS = IEFU83 (ONLY ENTRY POINT)                *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO A 4 BYTE ADDRESS OF THE    *\n*                RECORD DESCRIPTOR WORD (RDW) OF THE SMF RECORD TO    *\n*                BE PROCESSED BY THE EXIT.                            *\n*                                                                     *\n*             OUTPUT= REGISTER 15 MUST CONTAIN ONE OF THE FOLLOWING:  *\n*                0 - WRITE THE SMF RECORD (KEEP)                      *\n*                4 - DO NOT WRITE THE SMF RECORD (DELETE)             *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             EXITS - NORMAL = AT PROGRAM END VIA BSM 0,14            *\n*                OUTPUT = NONE                                        *\n*                RETURN CODE = SEE FUNCTION ABOVE                     *\n*                                                                     *\n*             EXITS - ERROR = NONE                                    *\n*                OUTPUT = NONE                                        *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             TABLES/WORK AREAS =                                     *\n*                BITMAP - 256 BIT SWITCHES, 1 FOR EACH SMF RECORD TYPE*\n*                MASKS - MASKS FOR TESTING BITMAP                     *\n*                                                                     *\n*             CHANGE ACTIVITY = THIS MODULE HAS BEEN CHANGED TO       *\n*                RUN ON MVS/XA IN 31-BIT MODE ABOVE THE LINE.         *\n*                IT WILL NOT RUN ON MVS/370.                          *\n*                                                                     *\n*             CHARACTER CODE DEPENDENCY = NONE                        *\n*                                                                     *\n*             NOTES = GETMAIN FREEMAIN MACROS USED                    *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEFU83   CSECT\nIEFU83   AMODE 31                                             IPOXA\nIEFU83   RMODE ANY                                            IPOXA\nR00      EQU   0\nR01      EQU   1\nR02      EQU   2\nR03      EQU   3\nR04      EQU   4\nR05      EQU   5\nR06      EQU   6\nR07      EQU   7\nR08      EQU   8\nR09      EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  BASE REG\nR13      EQU   13                  SAVEAREA REG\nR14      EQU   14                  RETURN ADDRESS\nR15      EQU   15                  ENTRY ADDRESS & TEMPORARY BASE\nD0       EQU   0                   DI\nD3       EQU   3                     SP\nD4       EQU   4                       LA\nD5       EQU   5                         CEM\nD12      EQU   12                           ENT\nD20      EQU   20                  VAL\nD29      EQU   29                     UES\nZERO     EQU   0                   ZERO FOR BITMAP TESTING\nRC0      EQU   0                   RETURN CODE OF 0\nRC4      EQU   4                   RETURN CODE OF 4\nSAVEA    EQU   72                  SAVEAREA LENGTH\nBACKWARD EQU   4                   SAVEAREA BACKWARD POINTER OFFSET\nFORWARD  EQU   8                   SAVEAREA FORWARD POINTER OFFSET\nKEEP     EQU   X'40'\n         USING *,R15               TEMPORARY BASE FOR\n         B     START               BRANCHING AROUND\n         DC    CL8'IEFU83  '       MODULE IDENTIFIER\nSTART    EQU   *\n         STM   R14,R12,D12(R13)    SAVE CALLERS REGISTERS\n         DROP  R15                 DROP TEMPORARY BASE REGISTER\n         BALR  R12,R00             SETUP R12\n         USING *,R12                 AS MAIN BASE REGISTER\n         LR    R10,R01             SAVE PARAMETER LIST ADDRESS\n*\n* THE FOLLOWING GETMAIN IS NECESSARY ONLY IF\n*     THIS ROUTINE CALLS ANOTHER OR USES A SUPERVISOR FUNCTION\n*     THAT REQUIRES SAVE-AREA CHAINING. IT IS CODED TO PROVIDE\n*     AN EXAMPLE OF WHAT ONE MAY CODE.\n*\n         GETMAIN RU,LV=SAVEA,SP=245 GET CORE FOR SAVEAREA     IPOXA\n         ST    R13,BACKWARD(R01)   SETUP BACKWARD SAVEAREA CHAIN\n         ST    R01,FORWARD(R13)    SETUP FORWARD SAVEAREA CHAIN\n         LR    R13,R01             PUT ADDR OF THIS SAVEAREA IN REG13\n         L     R02,D0(R10)         GET ADDRESS OF SMF RECORD\n         CLI   D5(R02),X'15'       IS IT A TYPE 21 RECORD ?\n         BNE   SEEIFDEL              NO, GO SEE IF SHOULD BE DELETED\n         CLI   32(R02),X'0A'       MORE THAN 10 TEMP READ ERRORS ?\n         BH    TELLOPER              YES, GO INFORM OPERATOR\n         CLI   33(R02),X'0A'       MORE THAN 10 TEMP WRITE ERRORS ?\n         BL    SEEIFDEL              NO, GO SEE IF REC. SHOULD BE DEL.\nTELLOPER MVC   72(WTOL,R13),WTOLIST MOVE IN WTO LIST\n         LA    R01,72(R13)         GET ADDR OF WTO LIST\n         MVC   37(1,R01),26(R02)   MOVE CHANNEL ADDR TO WTO\n         CLI   37(R01),X'09'       IS IT NUMERIC ?\n         BNH   NUMCHN                YES, GO MAKE READABLE\n         IC    R11,37(R01)         GET CHNL ADDR OUT OF WTO\n         LA    R08,9               LOAD 8 WITH VALUE OF 9\n         SR    R11,R08             SUBTRACT 9 FROM ADDR\n         STC   R11,37(R01)         PUT BACK INTO WTO\n         OI    37(R01),X'C0'       MAKE IT READABLE\n         B     DOCHN               GO DO CONTROL UNIT ADDR\nNUMCHN   OI    37(R01),X'F0'       MAKE IT READABLE\nDOCHN    XR    R11,R11             CLEAR REG 11\n         IC    R11,27(R02)         PICK UP DEVICE ADDR\n         SRL   R11,4               ISOLATE CONTROL UNIT ADDR\n         STC   R11,38(R01)         MOVE TO WTO\n         CLI   38(R01),X'09'       IS IT NUMERIC ?\n         BNH   NUMERIC               YES, GO MAKE READABLE\n         IC    R11,38(R01)         GET CTRL ADDR OUT OF WTO\n         LA    R08,9               LOAD 8 WITH VALUE OF 9\n         SR    R11,R08             SUBTRACT 9 FROM ADDR\n         STC   R11,38(R01)         PUT BACK INTO WTO\n         OI    38(R01),X'C0'       MAKE IT READABLE\n         B     DODEVICE            GO DO DEVICE ADDR\nNUMERIC  OI    38(R01),X'F0'       MAKE READABLE\nDODEVICE MVC   39(1,R01),27(R02)   MOVE DEVICE ADDR TO WTO\n         NI    39(R01),X'0F'       CLEAR OUT CTRL ADDR\n         CLI   39(R01),X'09'       IS IT NUMERIC ?\n         BNH   DEVNUM                YES, GO MAKE READABLE\n         IC    R11,39(R01)         GET DEV ADDR OUT OF WTO\n         LA    R08,9               LOAD 8 WITH VALUE OF 9\n         SR    R11,R08             SUBTRACT 9 FROM ADDR\n         STC   R11,39(R01)         PUT BACK INTO WTO\n         OI    39(R01),X'C0'       MAKE IT READABLE\n         B     DOWTO               GO ISSUE WTO\nDEVNUM   OI    39(R01),X'F0'       MAKE READABLE\nDOWTO    SVC   35\n         EJECT\n         SPACE 1\nSEEIFDEL LA    R11,BITMAP          PUT ADDR OF BITMAP IN WORKREG\n         XR    R08,R08             CLEAR WORKREG\n         IC    R08,D5(R02)         GET SMF RECORD NUMBER FROM RECORD\n         SRDA  R08,D3              ISOLATE WHICH BYTE IT'S IN\n         SRL   R09,D29             ISOLATE THE BIT\n         IC    R09,MASKS(R09)      GET THE APPROPRIATE MASK\n         LA    R10,BITMAP(R08)     GET THE BYTE ADDRESS\n         EX    R09,TM              TEST TO SEE IF BIT IN BITMAP ON\n         BO    DELETE              ON-SET RETURN CODE TO 4 FOR NO WRITE\n         LA    R06,RC0             OFF-SET RETURN CODE TO 0 FOR WRITE\nFINISH   EQU   *\n         LR    R01,R13             PUT AREA TO BE FREED IN PARM REG\n         L     R13,D4(R13)         RESET SAVEAREA\n* THE FOLLOWING FREEMAIN IS OPTIONAL. SEE COMMENT ABOVE ABOUT\n*     THE GETMAIN\n         FREEMAIN RU,LV=SAVEA,A=(R01),SP=245 FREE SAVEAREA CORE IPOXA\n         L     R14,D12(R13)        RESTORE RETURN ADDRESS\n         LR    R15,R06             PUT RETURN CODE IN RETURN CODE REG\n         LM    R00,R12,D20(R13)    RESTORE REGS ZERO THRU 12    IPOXA\n         BSM   0,R14               RESTORE CALLER MODE AND RETURN IPOXA\nDELETE   EQU   *\n         LA    R06,RC4             SET RETURN CODE TO 4 - NO WRITE\n         B     FINISH              GO FREE SAVEAREA AND RETURN\nWTOLIST  WTO   '** OPERATOR - PLEASE CLEAN DRIVE XXX ASAP **',         X\n               ROUTCDE=(1,9),DESC=11,MF=L\nWTOL     EQU   *-WTOLIST\nMASKS    DC    X'8040201008040201' BITMAP  TESTING\nTM       TM    0(R10),ZERO         TO TEST THE BITMAP FOR 0 OR 1\n***********************************************************************\n* IN THIS SPECIFIC EXAMPLE THE BITMAP AREA IS SET TO DELETE SMF RECORD\n* TYPE 40 FROM BEING PRINTED. YOU MAY SET THE BITMAP INDICATOR FOR ANY\n* SMF RECORD TYPE YOU DO NOT WANT PRINTED BY SETTING THE APPROPRIATE\n* SWITCH TO 1. .\n***********************************************************************\nBITMAP   DC    B'00000000'         BITMAP FOR SMF RECORD 0 THRU 7\n         DC    B'00000000'         BITMAP FOR SMF RECORD 8 THRU 15\n         DC    B'00000000'         BITMAP FOR SMF RECORD 16 THRU 23\n         DC    B'00000000'         BITMAP FOR SMF RECORD 24 THRU 31\n         DC    B'00000000'         BITMAP FOR SMF RECORD 32 THRU 39\n         DC    B'10000000'         BITMAP FOR SMF RECORD 40 THRU 47\n         DC    B'00000000'         BITMAP FOR SMF RECORD 48 THRU 55\n         DC    B'00000000'         BITMAP FOR SMF RECORD 56 THRU 63\n         DC    B'00000000'         BITMAP FOR SMF RECORD 64 THRU 71\n         DC    B'00000000'         BITMAP FOR SMF RECORD 72 THRU 79\n         DC    B'00000000'         BITMAP FOR SMF RECORD 80 THRU 87\n         DC    B'00000000'         BITMAP FOR SMF RECORD 88 THRU 95\n         DC    B'00000000'         BITMAP FOR SMF RECORD 96 THRU 103\n         DC    B'00000000'         BITMAP FOR SMF RECORD 104 THRU 111\n         DC    B'00000000'         BITMAP FOR SMF RECORD 112 THRU 119\n         DC    B'00000000'         BITMAP FOR SMF RECORD 120 THRU 127\n         DC    B'00000000'         BITMAP FOR SMF RECORD 128 THRU 135\n         DC    B'00000000'         BITMAP FOR SMF RECORD 136 THRU 143\n         DC    B'00000000'         BITMAP FOR SMF RECORD 144 THRU 151\n         DC    B'00000000'         BITMAP FOR SMF RECORD 152 THRU 159\n         DC    B'00000000'         BITMAP FOR SMF RECORD 160 THRU 167\n         DC    B'00000000'         BITMAP FOR SMF RECORD 168 THRU 175\n         DC    B'00000000'         BITMAP FOR SMF RECORD 176 THRU 183\n         DC    B'00000000'         BITMAP FOR SMF RECORD 184 THRU 191\n         DC    B'00000000'         BITMAP FOR SMF RECORD 192 THRU 199\n         DC    B'00000000'         BITMAP FOR SMF RECORD 200 THRU 207\n         DC    B'00000000'         BITMAP FOR SMF RECORD 208 THRU 215\n         DC    B'00000000'         BITMAP FOR SMF RECORD 216 THRU 223\n         DC    B'00000000'         BITMAP FOR SMF RECORD 224 THRU 231\n         DC    B'00000000'         BITMAP FOR SMF RECORD 232 THRU 239\n         DC    B'00000000'         BITMAP FOR SMF RECORD 240 THRU 247\n         DC    B'00000000'         BITMAP FOR SMF RECORD 248 THRU 255\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU83X$": {"ttr": 6660, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRBU83 JOB (SP,9030,0000000),'WESTERMAN   - BOX 3',\n//             TIME=30,TYPRUN=HOLD,\n//             NOTIFY=XSPRBWW,\n//             CLASS=H,MSGCLASS=S\n//*\n//* DOC: THIS JOB CAN BE USED TO INSTALL THE\n//*      SMF WRITER EXIT ROUTINE, IEFU83.\n//*\n//ASMU831 EXEC ASMHCL,PARM.C='RENT,OBJECT,NODECK',\n//             PARM.L='RENT,REUS,XREF,LIST'\n//C.SYSLIB DD  UNIT=3380,VOL=SER=R12007,DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSIN  DD  DSN=XSPRBWW.POSSIBLE.MODS(IEFU83X),DISP=SHR\n//L.SYSLMOD DD DSN=ALCATEL.LINKLIB(IEFU83),DISP=SHR,\n//             VOL=SER=R120RS,UNIT=3380\n//L.SYSIN  DD  *\n      IDENTIFY IEFU83('ALSMF03')\n/*\n//SMPAPP2 EXEC IPOSMPE,COND=(0,NE)\n//SMPPTFIN DD  *\n++ USERMOD (ALSMF03) .\n++ VER (Z038) FMID(HBB3310) .\n++ VER (Z038) FMID(HBB2102) .\n++ MOD (IEFU83) DISTLIB(AOS00) LKLIB(ALCLINK) .\n/*\n//SMPEIN   DD  *\n SET BOUNDARY(GLOBAL).\n RECEIVE       S(ALSMF03) SYSMODS.\n SET BOUNDARY(M220TZ).\n APPLY         S(ALSMF03).\n LIST          SYSMOD(ALSMF03).\n/*\n//IPOLINK  DD  DSN=ALCATEL.LINKLIB,DISP=SHR,\n//             VOL=SER=R120RS,UNIT=3380\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGGPRE00": {"ttr": 6662, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x01b\\x01b\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 354, "newlines": 354, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRBWW3 JOB  (SP,9030,0000000),'WESTERMAN   - BOX 3',\n//         CLASS=H,MSGCLASS=S,TIME=5,\n//         NOTIFY=XSPRBWW,REGION=4096K TYPRUN=HOLD\n//*\n//ASM      EXEC  PGM=IEV90,PARM=OBJECT,REGION=200K\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS4.ACF510.ACFMAC,DISP=SHR\n//         DD  DSN=XSPRBWW.POSSIBLE.MODS,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5)),DSN=&&SYSUT1\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5)),\n//             DSN=&&SYSUT2\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5)),DSN=&&SYSUT3\n//SYSPUNCH DD  DUMMY,DCB=(LRECL=80,BLKSIZE=80,RECFM=FB)\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSLIN   DD  DISP=(MOD,PASS),UNIT=SYSSQ,SPACE=(CYL,(5,5,0)),\n//             DSN=&&OBJSET,DCB=BLKSIZE=400\n//SYSIN    DD  *\nDADSM    TITLE 'IGGPRE00 - ROUINE FOR ALL DADSM EXIT FUNCTIONS'\n***********************************************************************\n* I G G P R E 0 0  - DADSM EXIT ROUTINE FOR IGGPRE00/IGGPOST0         *\n*                                                                     *\n* FUNCTION - THIS ROUTINE PERFORMS ALL FUNCTIONS FOR THE IGGPRE00     *\n*                                                                     *\n* ATTRIBUTES:  RENT, REUS, REFR, KEY 0, SUPERVISOR STATE, AMODE=ANY,  *\n*              RMODE=24.                                              *\n*                                                                     *\n* ENTRY ENVIRONMENT:                                                  *\n*     R0=0 IF A PREPROCESSING EXIT IS BEING TAKEN,                    *\n*     R0=4 IF A POSTPROCESSING EXIT IS BEING TAKEN.                   *\n*     AMODE=31 ON ENTRY.                                              *\n*     R1=ADDRESS OF PREPL, THE DADSM EXIT PARAMETER LIST.             *\n*     R13=SAVE AREA ADDRESS                                           *\n*     R14=RETURN ADDRESS                                              *\n*     R15=ENTRY POINT ADDRESS                                         *\n*                                                                     *\n* EXIT ENVIRONMENT:                                                   *\n*     R0-R14=SAME AS WHEN ENTERED.                                    *\n*     R15=0 TO ALLOW FUNCTION ON CURRENT VOLUME,                      *\n*     R15=4 TO DISALLOW FUNCTION ON CURRENT VOLUME BUT ALLOW DADSM    *\n*           PROCESSING TO CONTINUE WITH OTHER VOLUMES, OR             *\n*     R15=8 TO DISALLOW FUNCTION ON CURRENT VOLUME AND ABORT DADSM    *\n*           PROCESSING.                                               *\n*                                                                     *\n* REASON CODES GIVEN:                                                 *\n*     REASON=0004 - TEMPORARY DATA SET ALLOCATION ATTEMPTED, BUT      *\n*           THE CURRENT VOLUME HAS BEEN DEFINED TO EXCLUDE TEMPORARY  *\n*           DATA SET ALLOCATIONS (ONLY GIVEN ON \"ALLOCATE\" CALLS).    *\n*                                                                     *\n*     REASON=0008 - DATA SET NAME IS INVALID; THE HIGH LEVEL          *\n*           QUALIFIER IS IN THE \"EXCLUDE\" LIST OR IS NOT IN THE       *\n*           \"INCLUDE\" LIST, EITHER FOR THE CURRENT VOLUME OR THE      *\n*           GLOBAL LIST.                                              *\n*                                                                     *\n*     REASON=000C - THE VOLUME IS DEFINED AS BEING ACF2-PROTECTED,    *\n*           AND THE USER IS NOT AUTHORIZED TO PERFORM THE SPECIFIED   *\n*           FUNCTION.                                                 *\n*                                                                     *\n*  ONLY ALLOCATE AND RENAME CALLS ARE EXAMINED.                       *\n*                                                                     *\n*  WRITTEN ON 09/10/88 BY BRIAN WESTERMAN -  BRIPER INDUSTRIES        *\n*                                            SYSTEMS CONSULTING       *\n*  UPDATE HISTORY:                                                    *\n*    02/25/89  BHW - ADDED CODE FOR ACF2 CHECKS                       *\n*    12/09/89  BHW - ADDED SPECIAL CODE FOR ALCATEL                   *\n*                                                                     *\n***********************************************************************\n         EJECT\nIGGPRE00 CSECT\n         CONNECT  WORKSIZE,WORK,BASE=R12,PARM=R2,R0=R3,CLEAR=YES,      X\n               AMODE=ANY,RMODE=24,LOC=BELOW,COPYRT=1988\n         USING PREPL,R2            ADDRX. OF PARM LIST\n         MVI   CURRDSN,C' '\n         MVC   CURRDSN+1(L'CURRDSN-1),CURRDSN\n         CLI   IEXFUNC,IEXALL      TEST FUNCTION:  ALLOCATE?\n         BE    ALLOC8\n         CLI   IEXFUNC,IEXREN      TEST FUNCTION:  RENAME?\n         BE    RENAME\n         B     RETN00              ELSE ALLOW NORMAL PROCESSING.\n         EJECT\nALLOC8   DS    0H                  ALLOCATE A NEW DATASET.\n         TM    IEXFLAG,IEXVIO\n         BO    RETN00              IF NO UCB, IT IS A VIO, SO O.K.\n*\n         L     R10,IEXPTR1            LOAD ADDRESS OF JFCB\n         USING INFMJFCB,R10           ESTABLISH ADDRESSABILITY\n         TM    JFCBIND2,JFCTEMP       IS THIS A TEMP DATASET\n         BO    RETN00                 YES THEN EXIT RC = 0\n*\n         L     R3,IEXDSN              GET ADDRESS OF DSNAME\n*\nCONCHECK EQU   *                      CONTINUE PROCESSING\n*\n         L     R11,IEXUCB             LOAD ADDRESS OF UCB\n         USING UCBOB,R11              ESTABLISH ADDRESSABILITY\n         MVC   WKVOLID(6),UCBVOLI     SAVE VOLUME SERIAL\n         CLI   UCBVOLI+3,C'6'         IS THIS A SCRATCH PACK R--6--\n         BE    RETN00                 YES THEN EXIT RC = 0\n         CLC   UCBVOLI(2),=C'R1'      VOL SER USING CURRENT STANDARD\n         BNE   RETN00                 NO THEN EXIT\n*\nACF2STUF EQU   *\n         ACFGACVT R9,NONE=RETURN01 GET ACFCVT\n         USING ACCVT,R9\n         ACFGUCB R8,NONE=RETURN02  GET ACFUCB\n         USING ACUCB,R8\n         XR    R15,R15             CLEAR R15\n         CLC   ACULID(7),=C'XSPRDBG'   SPECIAL ID ?\n         BE    RETN00              YES -- ALWAYS ALLOW CALL.\n         CLC   ACULID(6),=C'PEPPER'   SPECIAL ID ?\n         BE    RETN00              YES -- ALWAYS ALLOW CALL.\n         MVC   WKUID(7),ACULID     SAVE USERID FOR LATER\n         MVC   CURRDSN,0(R3)       SAVE CURRENT DATA SET NAME\n         B     ALOC002A            COMMENT OUT IF TESTING\n         WTO   MF=(E,WTODBG1)\n         MVC   WTOPARM(WTODSNL),WTODSN\n         MVC   WTOPARM+WTODSNI(L'WTODSNI),WTODBG1+WTODSNI\n         MVC   WTOPARM+WTODSNA(L'CURRDSN),CURRDSN\n         WTO   MF=(E,WTOPARM)\nALOC002A DS    0H\n         SR    R5,R5               CLEAR REG 5\n         DROP  R9\n         DROP  R8\n         LR    R4,R3                  REG 4 :=A(DSNAME)\nLOOP1    CLI   0(R4),C' '             END OF DSNAME\n         BE    ENDLOOP1               YES THEN END LOOP\n         CLI   0(R4),C'.'             END OF FIRST NODE\n         BE    ENDLOOP1               YES THEN END LOOP\n         LA    R4,1(R4)               POINT TO NEXT CHARACTER\n         B     LOOP1                  GO AROUND AGAIN\n*\nENDLOOP1 EQU   *\n         LA    R4,1(R4)               START OF SECOND NODE (IF ANY)\n*\nENDLOOP2 EQU   *\n*\n*                                     REG 3  = A(DSNAME)\n*                                     REG 4  = A(START OF SECOND NODE)\n*\n         CLI   0(R3),C'X'             FIRST CHAR OF DSNAME = X\n         BNE   NONTSO                 NO THEN NOT TSO DATASET\n*                                     ELSE PERFORM TSO CHECKING\n         EJECT\n**********************************************************************\n**                                                                  **\n**                                                                  **\n**       CHECK THE TABLE OF TSO IDS AGAINST THE HIGH LEVEL NODE     **\n**       OF THE DATASET. THE TABLE IS IN THE FORMAT                 **\n**                                                                  **\n**                                                                  **\n**               XXXXXXXXN                                          **\n**                                                                  **\n**        WHERE   XXXXXXXX IS THE HIGH LEVEL NODE                   **\n**                N        IS THE APPLICATION CODE (AND IS ALSO     **\n**                         THE 4TH CHARACTER OF THE VOLUME NAME     **\n**                                                                  **\n**        THE HIGH LEVEL NODES IN THE TABLE CONTAINS * IN           **\n**        THE ANY CHARACTER TO INDICATE A WILDCARD CHARACTER        **\n**        ANY CHARACTER IS VALID IN A COMPARISON TO A WILDCARD      **\n**        AND IT CAN APPEAR ANY WHERE IN THE NODE. IF A WILDCARD    **\n**        CHARACTER IS USED THEN NO SPECIFIC CHARACTER CAN BE USED  **\n**        IN THE SAME POSITION. THE FIRST WORD OF THE TABLE         **\n**        CONTAINS THE ADDRESS OF THE LAST ENTRY OF THE TABLE.      **\n**        THE LAST TABLE ENTRY IS ALL '*' AND HAS AN APPLICATION    **\n**        CODE OF 7 WHICH IS WHERE ALL MISC AND UNDEFINED FILES     **\n**        ARE TO BE ALLOCATED.                                      **\n**                                                                  **\n**                                                                  **\n**********************************************************************\n         SPACE 3\n         LOAD  EP=TSOTABL,ERRET=ERREXIT\n*                                     LOAD TABLE OF TSO DATASETS\n*                                     REG 0 CONTAINS THE ADDRESS\n*                                     REG 1 CONTAINS THE LENGTH\n         B     SRCHTAB\nNONTSO   EQU   *\n         LOAD  EP=NODTABL,ERRET=ERREXIT\n*                                     LOAD TABLE OF NON TSO DATASETS\n*                                     REG 0 CONTAINS THE ADDRESS\n*                                     REG 1 CONTAINS THE LENGTH\nSRCHTAB  EQU   *\n         LR    R6,R0                  SAVE THE ADDRESS OF THE TABLE\n         L     R9,0(R6)               GET ADDRESS OF END OF TABLE\n         LA    R6,4(R6)               GET ADDRESS OF FIRST ENTRY\nLOOP3    EQU   *                      REPEAT UNTIL END OF TABLE OR\n*                                     UNTIL THE LAST ENTRY IS REACHED\n         LR    R7,R6                  SAVE ADDRESS OF ENTRY\n         CLC   0(4,R7),=C'****'       IS IT LAST ENTRY\n         BE    ENDLOOP3               YES THEN END LOOP\n*\n         LR    R8,R3                  GET ADDRESS OF DSNAME\nLOOP4    EQU   *\n         CLI   0(R8),C'.'             END OF FIRST NODE\n         BE    ENDLOOP3               YES EXIT LOOPS  MATCH FOUND\n         CLI   0(R8),C' '             END OF NODE\n         BE    ENDLOOP3               YES EXIT LOOP   MATCH FOUND\n*\n         CLI   0(R7),C'*'             IS IT A WILDCARD CHARACTER\n         BE    MATCHCH                YES THEN CHARACTER MATCHES\n         CLC   0(1,R7),0(R8)          COMPARE CHARACTERS\n         BE    MATCHCH                CHARACTERS MATCH\n         BH    NOMATCH                TABLE GT DSNAME CHAR\n         B     ENDLOOP4               TABLE LT DSNAME CHAR\n*\nMATCHCH  LA    R7,1(R7)               GET NEXT TABLE CHAR\n         LA    R8,1(R8)               GET NEXT TABLE CHAR\n         B     LOOP4                  CHECK THESE CHARACTERS\n*\nENDLOOP4 EQU   *\n         LA    R6,9(R6)               GET NEXT TABLE ENTRY\n         B     LOOP3\n*\nNOMATCH  LR    R6,R9                  POINT TO LAST TABLE ENTRY\n*\nENDLOOP3 EQU   *                      R6 POINTS TO THE THE ENTRY\n*                                     THAT MATCHES OR THE LAST ENTRY\n         CLI   8(R6),C'2'             IS IT A RALEIGH/JC FILE\n         BNE   COMPARE                NO THEN CONTINUE PROCESSING\n         CLC   0(2,R4),=C'X.'         IS IT A USER FILE           DBG7\n         BE    TESTPACK                                           DBG7\n         CLC   0(2,R4),=C'T.'         IS IT A TEST FILE\n         BE    TESTPACK                                           FJD5\n         CLC   0(5,R4),=C'SCDB.'      IS IT A SC DB FILE          FJD5\n         BE    TESTPACK                                           FJD5\n         B     COMPARE                NO THEN CONTINUE PROCESSING FJD5\nTESTPACK CLI   WKVOLID+3,C'3'         YES THEN APPL CODE IS 3 NOT 2\n         BE    DELTABLE\n         L     R5,=F'4'               NO THEN SET RETURN CODE OF 4\n         B     DELTABLE\n*\n*\nCOMPARE  EQU   *\n         CLC   8(1,R6),WKVOLID+3      DO APPLICATION CODES MATCH\n         BE    DELTABLE\n         CLI   8(R6),C'*'             IS IT A WILD CARD CHARACTER\n         BE    DELTABLE\n         L     R5,=F'4'               SET RETURN CODE OF 4\n         B     DELTABLE\n*\n*\n*\n*\n*---------------------------------------------------------------------\n*               ERRORS AND RETURN (ERROR HANDLING)\n*---------------------------------------------------------------------\nRETURN01 EQU   *\n         WTO   'IGGPRE00: ACF2 CVT NOT FOUND',ROUTCDE=11\n         B     RETN00                  TESTING PURPOSES\n*****    B     CONTIN\nRETURN02 EQU   *\n         WTO   'IGGPRE00: ACF2 UCB NOT FOUND',ROUTCDE=11\n         B     RETN00                  TESTING PURPOSES\n******   B     CONTIN\n*\n         EJECT\nDELTABLE EQU   *                       DELETE THE TABLE\n*\n         CLI   0(R3),C'X'             FIRST CHAR OF DSNAME = X\n         BNE   DELNTSO                NO THEN NOT TSO DATASET\n*\n         DELETE EP=TSOTABL            DELETE TSOTABLE\n         B     EXIT\n*\nDELNTSO  DELETE EP=NODTABL            DELETE NON TSO TABLE\n         B     EXIT\n*\n*\n         EJECT\nRENAME   DS    0H\n         L     R6,IEXPTR1          GET USER RENAME PARM LIST\n         USING RENDSECT,R6\n         L     R3,NEWNAME\n         B     ALLOC8\n         EJECT\nEXIT     C     R5,=F'4'\n         BNE   RETN00\n*        WTO   MF=(E,WTODBG2)\n*        MVC   WTOPARM(WTODSNL),WTODSN\n*        MVC   WTOPARM+WTODSNI(L'WTODSNI),WTODBG1+WTODSNI\n*        MVC   WTOPARM+WTODSNA(L'CURRDSN),CURRDSN\n*        WTO   MF=(E,WTOPARM)\n         LR    R15,R5\n         SR    R5,R5               CLEAR REG 5\n         B     RETURN\nERREXIT  EQU   *\n         WTO   'ERROR LOADING TABLE MODULE(S)',ROUTCDE=(2,11)\nRETN00   DS    0H\n         SR    R15,R15\nRETURN   DS    0H\n         RELEASE  WORKSIZE,RC=(R15)\n         EJECT\nWTODSN   WTO   'MMMMMMM  DSN=----+----1----+----2----+----3----+----4--X\n               --  ',ROUTCDE=(11),DESC=(7),MF=L\nWTODSNL  EQU   *-WTODSN\nWTODSNI  EQU   4,7,C'C'\nWTODSNA  EQU   17,44,C'C'\nWTODBG1  WTO   'BII699I  DADSM DEBUG - FUNCTION CALLED IS: ALLOCATE  ',X\n               ROUTCDE=(11),DESC=(7),MF=L\nWTODBG2  WTO   'BII699I  DADSM VIOLATION - DATASET WILL NOT BE ALLOCATEX\n               D',ROUTCDE=(11),DESC=(7),MF=L\n         LTORG\nWORK     DSECT\nREGSAVE  DS    18F\nSUBSAVE  DS    18F\nPFXPARM  DS    2A\nGBLADDR  DS    A\nVOLENTRY DS    A\nWKVOLID  DS    CL6\nWKUID    DS    CL8\nWTOPARM  WTO   '----+----1----+----2----+----3----+----4----+----5----+X\n               ----6----+----7----+----8',                             X\n               ROUTCDE=(11),DESC=(7),MF=L\n*\nCURRDSN  DS    CL44\n         DS    0D\nWORKSIZE EQU   *-WORK\n         EJECT\nRENDSECT DSECT                        RENAME DSECT\n         DS    0H\n         DS    F\nOLDNAME  DS    F                      ADDRESS OF OLD NAME\nNEWNAME  DS    F                      ADDRESS OF NEW NAME\n         EQUREGS\n         PRINT NOGEN\nJFCB     DSECT                        JFCB DSECT GENERATES A NAME\n         IEFJFCBN                     OF INFMJFCB\n*\n*        UCB DSECT                    UCB DSET GENERATES A NAME OF\n*                                     UCBOB\n         IEFUCBOB LIST=YES,PREFIX=YES\n*\n         PRINT GEN\n         IECIEXPL\n         PRINT NOGEN\n         ACCVT\n         ACUCB\n         ACFASVT\n         END   IGGPRE00\n/*\n/*\n//L EXEC PGM=IEWL,\n//       PARM='MAP,LET,LIST,RENT,REUS,REFR,AMODE=ANY,RMODE=24',\n//           COND=(4,LT,ASM),REGION=96K\n//SYSLIN  DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//        DD  DDNAME=SYSIN\n//SYSLMOD DD DSN=ALCATEL.LINKLIB(IGGPRE00),DISP=SHR\n//SYSUT1  DD  SPACE=(CYL,(3,2)),DSN=&&SYSUT1,\n//        UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD))\n//SYSPRINT DD SYSOUT=*\n//SYSIN   DD  *\n INCLUDE ACFLIB($ACFGCVT)\n INCLUDE ACFLIB(ACF00GCB)\n//ACFLIB  DD DSN=SYS4.ACF510.ACFMOD,DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ITACCTBL": {"ttr": 6669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x01\\xb6\\x01\\xb6\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 438, "newlines": 438, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRCXVA JOB (SP,9030,SP00060),'VISH     BX-3 ',\n//           CLASS=A,MSGCLASS=S,TIME=(1),\n//           NOTIFY=XSPRCXV\n//*--------------------------------------*\n//*    REFER SPJ.MVS.SORCLIB(ITACCTBL)   *\n//*--------------------------------------*\n//ACL      PROC MOD=,                         MODULE NAME,\n//           PRT='*',                         SYSOUT CLASS,\n//           SYSLIB='SYS1.LINKLIB',           AUTOMATIC CALL LIBRARY,\n//           SYSLMOD='SYS1.LINKLIB',          LOAD LIBRARY,\n//           APARM=,                          ASSEMBLER PARMS,\n//           LKED='IEWL',                     LINKAGE EDITOR NAME,\n//           LPARM=                           LINK EDIT PARMS.\n//*\n//C        EXEC PGM=IFOX00,PARM='NODECK,OBJECT,BUFSIZE(MAX)&APARM'\n//SYSLIB            DD DSN=SPR.MACLIB,DISP=SHR\n//                  DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1            DD UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2            DD UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3            DD UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT          DD SYSOUT=&PRT,DCB=BLKSIZE=1089\n//SYSPUNCH          DD DUMMY\n//SYSGO             DD DSN=&OBJSET,UNIT=3380,\n//           SPACE=(80,(200,50)),DISP=(MOD,PASS)\n//L        EXEC PGM=&LKED,PARM='XREF,LET,LIST&LPARM',\n//           REGION=128K,COND=(4,LT)\n//SYSLIB            DD DSN=&SYSLIB,DISP=SHR\n//SYSLIN            DD DSN=&OBJSET,UNIT=3380,\n//           SPACE=(80,(200,50)),DISP=(MOD,DELETE)\n//                  DD DDNAME=SYSIN\n//SYSLMOD           DD DSN=&SYSLMOD(&MOD),DISP=SHR\n//SYSUT1            DD UNIT=VIO,SPACE=(1024,(50,20))\n//SYSPRINT          DD SYSOUT=&PRT,DCB=BLKSIZE=1089\n//         PEND\n//*\n//U05ACL   EXEC ACL,MOD=ITACCTBL,LPARM=',RENT,REUS'\n//C.SYSIN           DD *\nITACCTBL TITLE '-- ITT TELECOM JOB ACCOUNTING TABLES'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*               REFER SPJ.MVS.SORCLIB(ITACCTBL)                 *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n         MACRO\n&L       ITDEPTNO &DEPT\n.*-------------------------------------------------------*\n.*   GENERATE DEPARTMENT-NUMBER ENTRIES FOR THE JOB-CARD *\n.*   ACCOUNTING-INFO VERIFICATION.                       *\n.*-------------------------------------------------------*\n         AIF   ('&L' EQ '').ENDLAB\n&L       DS    0H\n.ENDLAB  ANOP\n         AIF   (K'&DEPT EQ 4).GENDEPT\n         MNOTE 8,'ITDEPTNO: DEPT-NO MUST BE 4 CHARS LONG'\n         MEXIT\n.GENDEPT ANOP\nDEPT&DEPT DC    CL4'&DEPT'\n         MEND\n         EJECT\n         PRINT NOGEN\nITACCTBL CSECT\n*\n**** PTRS TO APPLICATION-CODE LIST AND DEPT-NO LIST.  THESE TWO\n*    VALUES MUST NOT BE MOVED.\n*\n         DC    A(APLCODES)     ADDR OF APPLICATION-CODE LIST\n         DC    A(DEPTNOS)      ADDR OF DEPT-NO LIST\n*\n         DC    C'ITACCTBL'              MODULE NAME\n         DC    C'&SYSDATE_&SYSTIME'     DATE/TIME ASSEMBLED\n         SPACE 3\n**** LIST OF VALID APPLICATION CODES\n*\n         DC    A(ENDAPL-APLCODES) LENGTH OF LIST OF APPLICATION CODES\nAPLCODES EQU   *\n         DC    C'AA'              ABSTRACT ACCOUNTING\n         DC    C'AC'              AUTOMATED CUST ENG.\n         DC    C'AD'              ADMINISTRATION\n         DC    C'AE'              APPLICATION ENGINEERING  FJD 850213\n         DC    C'AM'              ADVANCED ENG MFG.     REH21582\n         DC    C'AP'              ACCOUNTS PAYABLE\n         DC    C'AR'              ACCOUNTS RECIEVABLE\n         DC    C'AS'              MFG ASSEMBLY         FJD 850213\n         DC    C'AU'              APPLICATION UTILITIES\n         DC    C'BB'              BOOKING AND BILLING\n         DC    C'BD'              BUDGET\n         DC    C'BF'              BARE FACTS\n         DC    C'BK'              BOOKING\n         DC    C'BL'              BILLING\n         DC    C'BM'              BILL OF MATERIAL\n         DC    C'BP'              BUSINESS PLANNING\n         DC    C'BR'              BANK RECONCILLIATION\n         DC    C'BS'              BOY SCOUTS /SERVICE BILLING\n         DC    C'BT'              BAD DEBTS\n         DC    C'CA'              COST ACCOUNTING\n         DC    C'CB'              CONTRACT BILLING\n         DC    C'CC'              CYCLE COUNT\n         DC    C'CD'              CONVERTED FROM DOS\n         DC    C'CE'              CUSTOMER EQUIPMENT\n         DC    C'CG'              CAPACITY PLANNING\n         DC    C'CH'              CASH RECEIPTS\n         DC    C'CI'\n         DC    C'CL'              CALIBRATION LAB\n         DC    C'CM'              CALC MATERIAL - WIP AND 120\n         DC    C'CP'              CAPACITY PLANNING\n         DC    C'CR'              CASH RECEIPTS\n         DC    C'CS'              COST OF SALES\n         DC    C'CT'              CUSTOMER STATUS\n         DC    C'CU'              NAME AND ADDRESS UPDATE\n         DC    C'CX'              1240 CHARTS\n         DC    C'DB'              DATA BASE\n         DC    C'DC'              DATA CONTROL\n         DC    C'DF'              DATA COMMUNICATIONS\n         DC    C'DH'              DOCUMENT HISTORY\n         DC    C'DM'              DEFECTIVE MATERIALS\n         DC    C'DR'              DEFERRED RENTAL\n         DC    C'EA'              ENGINEERING - HARDWARE PRODUCTION\n         DC    C'EB'              ENGINEERING - SOFTWARE PRODUCTION\n         DC    C'EC'              ENGINEERING - HARDWARE DESIGN\n         DC    C'ED'              ENGINEERING - SOFTWARE-CONFIG/CONTROL\n         DC    C'EE'              ENGINEERING - RESEARCH AND TECHNOLOGY\n         DC    C'EF'              ENGINEERING - DIAGNOSTIC/TEST\n         DC    C'EG'              ENGINEERING - LOAD TAPE GENERATION\n         DC    C'EH'              ENGINEERING - RETROFIT\n         DC    C'EI'              ENGINEERING - APPLICATION DEVELOPMENT\n         DC    C'EJ'              ENGINEERING - PHYSICAL DESIGN SUPPORT\n         DC    C'EK'              ENGINEERING - PLANNING AND BUDGETING\n         DC    C'EL'              ENGINEERING - ADMINISTRATIVE SERVICES\n         DC    C'EM'              ENGINEERING - R & D MACKAY\n         DC    C'EN'              ENGINEERING - LOAD TAPES\n         DC    C'EO'              ENGINEERING - SOFTWARE-MAINT/TEST\n         DC    C'EP'              ENGINEERING - SOFTWARE-ADMINISTRATION\n         DC    C'EQ'              ENGINEERING - SOFTWARE-CALLHANDLING\n         DC    C'ER'              ENGINEERING - J.C.\n         DC    C'ES'              ENGINEERING - SNAP SUPPORT\n         DC    C'ET'              ENGINEERING - SOFTWARE-TEST & ANAL\n         DC    C'EV'              ENGINEERING - SYSTEMS DESIGN & DEVEL.\n         DC    C'EX'              ENGINEERING - CIT\n         DC    C'EY'              ENGINEERING - TAC CUSTOMER SUPP\n         DC    C'FA'              FIXED ASSETS\n         DC    C'FB'              FABRICATIONS\n         DC    C'FI'              FINANCIAL\n         DC    C'FL'              TELECOMMUNICATION FINANCING\n         DC    C'FV'              FIELD INVENTORY\n         DC    C'GF'              GENERAL FUND\n         DC    C'GI'              GROUP INSURANCE\n         DC    C'GL'              GENERAL LEDGER\n         DC    C'IC'              INVENTORY CONTROL\n         DC    C'IN'              INVENTORY CONTROL\n         DC    C'IS'              ISI PAYROLL TEMP PER BWC  85/01/21\n         DC    C'LA'              LABELS: CUSTOMER, EMPLOYEE\n         DC    C'LB'              LABOR HOURLY\n         DC    C'LC'              LIFE CYCLE COUNT\n         DC    C'LE'              1240 BTM              FJD 85/01/18\n         DC    C'LH'              LABOR HOURLY\n         DC    C'LI'              LABOR IMPROVEMENTS\n         DC    C'LL'              MFG LOW-LEVEL DATABASE\n         DC    C'LR'              LABORATORY REPORTING\n         DC    C'LS'              LABOR SALARY\n         DC    C'LV'              PAYPOINT\n         DC    C'MA'              MAINTENANCE\n         DC    C'MB'              MISCELLANEOUS BILLING\n         DC    C'MC'              MANUFACTURING AMAPS\n         DC    C'ME'              MANUFACTURING ENGINEERING    81/08/25\n         DC    C'MF'              MFG TEST(BOB HILL)     021982\n         DC    C'MG'              MFG (GENERAL)\n         DC    C'MK'              MARKETING\n         DC    C'ML'              CUSTOMER MAILING LIST\n         DC    C'MO'              MFG ORDERS\n         DC    C'MP'              MFG PICKING LIST\n         DC    C'MS'              MASTER SCHEDULE (PMO)        81/04/14\n         DC    C'MT'              MATERIAL\n         DC    C'NA'              PRINT NAME AND ADDRESS\n         DC    C'NB'              NEW BUSINESS\n         DC    C'NM'              NETWORK MARKETING        FJD 85/02/21\n         DC    C'NP'              NEW PRODUCT LAB          FJD 85/02/21\n         DC    C'NS'              NETWORK SWITCHING        FJD 85/01/18\n         DC    C'OA'              OFFICE SYSTEMS           FJD 85/01/23\n         DC    C'OB'              SALES ORDER BILLING\n         DC    C'OC'              ORDER CONTROL            FJD 85/01/31\n         DC    C'OE'              ORDER ENTRY\n         DC    C'OF'              OFFICE SYSTEMS           FJD 85/02/21\n         DC    C'OI'              SALES ORDER INPUT\n         DC    C'OP'              COMPUTER OPERATIONS\n         DC    C'OR'              SALES ORDER PROCESSING\n         DC    C'OS'              SALES ORDER SCAN\n         DC    C'PA'              APPLICATION PROGRAMMING\n         DC    C'PB'              PRINTED CIRCUIT OPERATION FJD85/02/21\n         DC    C'PC'              PROJECT CONTROL\n         DC    C'PD'              PARKS\n         DC    C'PE'              PERSONNEL\n         DC    C'PG'              PROGESS REPORTING\n         DC    C'PH'              HOURLY PAYROLL\n         DC    C'PI'              PHYSICAL INVENTORY\n         DC    C'PJ'              PROJECT ACCOUNTING\n         DC    C'PK'              PACKING SLIPS\n         DC    C'PL'              PACKING LIST\n         DC    C'PM'              PROJECT MANAGEMENT           81/03/13\n         DC    C'PN'              PART NUMBER DATABASE\n         DC    C'PO'              PURCHASE ORDER\n         DC    C'PP'              PRODUCTION PLANNING    FJD  85/02/8\n         DC    C'PR'              PROCESS SHEETS\n         DC    C'PS'              SALARY PAYROLL\n         DC    C'PU'              PURCHASING\n         DC    C'PV'              PURCHASE PRICE VARIANCE\n         DC    C'PY'              PAYROLL\n         DC    C'QA'              QUALITY ASSURANCE\n         DC    C'QC'              QUALITY CONTROL\n         DC    C'QT'              QUALITY TEST\n         DC    C'RC'              RENTAL CHARGES\n         DC    C'RE'              RENEWALS\n         DC    C'RM'              REMARKS\n         DC    C'RN'              PARTS OPERATION DATABASE\n         DC    C'RO'              ROUTING OPERATIONS DATABASE\n         DC    C'RP'              REQUIREMENTS PLANNING\n         DC    C'RR'              ORDER REPAIR AND RETURN\n         DC    C'RS'              RECEIVING/STORES\n         DC    C'RT'              ROUTING\n         DC    C'SA'              SALES ACTIVITY\n         DC    C'SB'              SERVICE BUREAU\n         DC    C'SC'              SALES ORDER COST\n         DC    C'SD'              SHOP ORDER DATABASE\n         DC    C'SF'              SERVICE FEES\n         DC    C'SH'              STOCK HEADERS\n         DC    C'SI'              SYSTEMS INSTALLATION INC.   REH 51882\n         DC    C'SJ'              SPECIAL PROJECTS\n         DC    C'SK'              STOCK LOCATION\n         DC    C'SL'              SUBSIDIARY LEDGER\n         DC    C'SM'              SCRAM\n         DC    C'SO'              SALES ORDER PROPOSAL\n         DC    C'SP'              SYSTEM PROGRAMMING\n         DC    C'SR'              ORDER RELEASE OF SHOP PACKET\n         DC    C'SV'              ITT SAVINGS\n         DC    C'SX'              STATE, COUNTY, CITY\n         DC    C'SY'              SHIPPING ACTIVITY\n         DC    C'TA'              TIME AND ATTENDANCE\n         DC    C'TC'              TOOL CRIB\n         DC    C'TF'              TRAFFIC                FJD  85/02/21\n         DC    C'TL'              TRAVEL LETTERS\n         DC    C'TN'              1240 ENG APPLICATIONS\n         DC    C'TO'              1240 TOOL DATASET      FJD  85/01/18\n         DC    C'TR'              TECH SVCS TRANS        FJD  85/02/21\n         DC    C'TS'              TSOCS\n         DC    C'TX'              TAX ACCURAL SYSTEM\n         DC    C'UR'              UNION REPORTING\n         DC    C'WH'              WIRE AND HARDWARE\n         DC    C'WP'              WORK IN PROCESS\n         DC    C'XA'              CROSS REFERENCE ACCOUNTS\n         DC    C'XE'              SYSTEM 1240 CMS TO MVS   MHL 060484\nENDAPL   DC    C'**'              TABLE STOPPER\n         EJECT\n**** LIST OF VALID DEPARTMENT NUMBERS\n*\n         DC    A(ENDDEPT-DEPTNOS) LENGTH OF LIST OF DEPT. NUMBERS\nDEPTNOS  EQU   *\n         SPACE 1\n* DEPARTMENT NUMBERS BEGINNING WITH '0' ARE TO BE USED FOR\n* PRODUCTION CHARGE ALLOCATIONS.  THEY WILL APPEAR ON THE\n* MONTHLY CHARGEBACK REPORT AND BE ALLOCATED TO THE CORRECT\n* DEPARTMENTS BY HAND. THIS WILL ALLOW THE CHARGES TO BE\n* ALLOCATED ON A PERCENTAGE BASIS TO MULTIPLE DEPARTMENTS.\n         SPACE 1\n         ITDEPTNO 0070       NSD    - OASIS ALLOCATION\n         SPACE 1\n* TRUE DEPARTMENT NUMBERS START HERE\n* THESE DEPTS WERE UPDATED FEB 85 TO REFLECT DEPT NUMBER CHANGES\n         SPACE 1\n         ITDEPTNO 1200       NSD    - COMPTROLLER\n         ITDEPTNO 1230       MACKAY - COMPTROLLER\n         ITDEPTNO 1400       NSD    - INDUSTRIAL RELATIONS\n         ITDEPTNO 1420       NSD    - EMPLOYEE RELATIONS\n         ITDEPTNO 2200       NSD    - SII ADMINISTRATION\n         ITDEPTNO 2220       NSD    - SII FIELD\n         ITDEPTNO 2320       NSD    - SII RALEIGH\n         ITDEPTNO 2330       NSD    - SII PUERTO RICO\n         ITDEPTNO 2400       NSD    - CAE\n         ITDEPTNO 2610       MACKAY - ADMINISTRATION\n         ITDEPTNO 2620       MACKAY - NAT PARTS CENTRE\n         ITDEPTNO 2640       NSD    - NEW ORLEANS\n         ITDEPTNO 2800       MACKAY - GREENVILLE\n         ITDEPTNO 2880       NSD    - CLEVELAND\n         ITDEPTNO 2990       MACKAY - MARINE TRAFFIC\n         ITDEPTNO 3110       NSD    - MARKETING MANAGEMENT\n         ITDEPTNO 3120       NSD    - PRODUCT MARKETING MGMT\n         ITDEPTNO 3140       NSD    - P M DATA NETWORKS\n         ITDEPTNO 3160       NSD    - P M SWITCHING\n         ITDEPTNO 3170       NSD    - PRODUCT PORTFOLIO\n         ITDEPTNO 3180       NSD    - ADVANCED SYSTEMS PLANNING\n         ITDEPTNO 3240       NSD    - NATIONAL ACCT RBOC\n         ITDEPTNO 3250       NSD    - CUSTOMER SYS ENGR 1240\n         ITDEPTNO 3320       NSD    - WESTERN REGION 1240\n         ITDEPTNO 3350       NSD    - NETWORK SYSTEMS ENGINEERING\n         ITDEPTNO 3410       NSD    - P M TRUNK AND SUBSCR TX\n         ITDEPTNO 3420       NSD    - MARKETING OPERATIONS\n         ITDEPTNO 3430       NSD    - BUSINESS SYSTEMS\n         ITDEPTNO 3480       NSD    - PROPOSAL ENGINEERING\n         ITDEPTNO 3490       NSD    - TOTAL SALES AND MARKETING\n         ITDEPTNO 3500       NSD    - INTL GOVT AND IND SALES\n         ITDEPTNO 3510       NSD    - PRIVATE NETWORK SALES\n         ITDEPTNO 3520       NSD    - EXPORT AND GOVERNMENT SALES\n         ITDEPTNO 3700       MACKAY - MARKETING\n         ITDEPTNO 3750       NSD    - PRODUCT ENGINEERING ADMIN\n         ITDEPTNO 3760       NSD    - APPLICATIONS ENGINEERING\n         ITDEPTNO 3770       NSD    - DESIGN ENGINEERING\n         ITDEPTNO 3780       NSD    - ENGINEERING SUPPORT\n         ITDEPTNO 3800       NSD    - TECHNICAL SERVICES\n         ITDEPTNO 3820       NSD    - TECHNICAL PUBLICATIONS\n         ITDEPTNO 3840       NSD    - PRODUCT DOCUMENTATION\n         ITDEPTNO 3850       NSD    - REQUIREMENTS AND STANDARDS\n         ITDEPTNO 3860       NSD    - PROGRAM MANAGEMENT SUPP\n         ITDEPTNO 3870       NSD    - TECHNICAL SERVICE\n         ITDEPTNO 3880       NSD    - CUSTOMER SERVICE OPS\n         ITDEPTNO 3900       ???    - ????????????????????\n         ITDEPTNO 3910       1240   - PRODUCT INTEGRITY\n         ITDEPTNO 3920       NSD    - PRODUCT INTEGRITY\n         ITDEPTNO 4050       NSD    - COMPTROLLER\n         ITDEPTNO 4100       NSD    - TECHNOLOGY VP STAFF\n         ITDEPTNO 4120       NSD    - ADVANCED SYSTEMS\n         ITDEPTNO 4210       NSD    - ENGINEERING ADMINISTRATION\n         ITDEPTNO 4220       NSD    - ADMIN TECHNICAL SERVICES\n         ITDEPTNO 4230       NSD    - CAPE SOFTWARE\n         ITDEPTNO 4240       B&CC   - BUSINESS AND SPEC   1240\n         ITDEPTNO 4310       NSD    - TAC\n         ITDEPTNO 4320       NSD    - APPL. ENG\n         ITDEPTNO 4330       NSD    - SOFTWARE TEST AND ANALYSIS\n         ITDEPTNO 4340       NSD    - ??????   1240\n         ITDEPTNO 4350       NSD    - SOFTWARE ANALYSIS AND DESIGN\n         ITDEPTNO 4370       NSD    - SOFTWARE DESIGN\n         ITDEPTNO 4400       NSD    - ENGINEERING\n         ITDEPTNO 4410       NSD    - 1240 SOFTWARE DEVELOPMENT & ADMIN\n         ITDEPTNO 4415       NSD  ? - TDC SOFTWARE DEVELOPMENT A\n         ITDEPTNO 4420       NSD    - SOFTWARE TOOLS\n         ITDEPTNO 4430       NSD  ? - TDC SOFTWARE SYS. ENG. ADMIN.\n         ITDEPTNO 4440       NSD    - SOFTWARE ENGINEERING\n         ITDEPTNO 4450       NSD    - SWITCH SYS ENG 1240\n         ITDEPTNO 4470       NSD    - 1240 PERFORMANCE ENG   FJD 850429\n         ITDEPTNO 4600       MACKAY - DEVELOPMENT ENGINEERING\n         ITDEPTNO 4610       1240   - STP  1240\n         ITDEPTNO 4620       NSD    - PROGRAM DIRECTOR 1240\n         ITDEPTNO 4630       NSD    - MFG INTRO AND EMC\n         ITDEPTNO 4670       NSD    - COMPONENT TECHNOLOGY\n         ITDEPTNO 4675       NSD  ? - CAPE SUPPORT\n         ITDEPTNO 4680       NSD    - MECHANICAL ENG AND DESIGN\n         ITDEPTNO 4700       NSD    - ENGINEER CIT\n         ITDEPTNO 4800       NSD    - SYSTEMS DEVELOPMENT\n         ITDEPTNO 4810       NSD    - SYSTEMS DESIGN\n         ITDEPTNO 4830       NSD    - RTC SYSTEMS ANALYSIS\n         ITDEPTNO 4850       NSD  ? - SYSTEMS DESIGN\n         ITDEPTNO 4870       NSD  ? - SYSTEMS ACCEPTANCE\n         ITDEPTNO 4880       NSD  ? - RTC SYSTEMS TESTING\n         ITDEPTNO 4900       NSD    - RTC  1210 STAFF\n         ITDEPTNO 4910       NSD    - PRODUCT MAINTENANCE\n         ITDEPTNO 4920       NSD    - SOFTWARE DEVELOPMENT\n         ITDEPTNO 5200       MANUF. - MODEL SHOP\n         ITDEPTNO 5300       MANUF. - MAINTENANCE\n         ITDEPTNO 5350       MANUF. - MANUFACTURING ADMINISTRATION\n         ITDEPTNO 5400       MANUF. - MFG SYS ADMIN\n         ITDEPTNO 5410       MANUF. - MFG ENG\n         ITDEPTNO 5420       MANUF. - TEST ENGINEERING\n         ITDEPTNO 5430       MANUF. - ADVANCED MANUF  ENGINEERING\n         ITDEPTNO 5440       MANUF. - MANUFACTURING SYSTEMS DIV\n         ITDEPTNO 5460       MANUF. - TEST DESIGN ENG\n         ITDEPTNO 5480       MANUF. - TEST ENG MAINTENANCE\n         ITDEPTNO 5500       MANUF. - PRODUCTION PLANNING\n         ITDEPTNO 5510       MANUF. - PREPROCESS STORES\n         ITDEPTNO 5520       MANUF. - FINISHED GOODS STORES\n         ITDEPTNO 5560       MACKAY - MATERIAL\n         ITDEPTNO 5590       MANUF. - INVENTORY CONTROL\n         ITDEPTNO 5600       MANUF. - PURCHASING\n         ITDEPTNO 5700       MANUF. - PCB OPERATIONS\n         ITDEPTNO 5750       MANUF. - EMPLOYEE RELATIONS J C\n         ITDEPTNO 5800       MANUF. - VANN INDUSTYRIES\n         ITDEPTNO 5820       1240   - CIM           FJD  05/13/85\n         ITDEPTNO 5900       MANUF. - MFG OPS\n         ITDEPTNO 5920       MACKAY - MANUFACTURING OPS\n         ITDEPTNO 5930       MANUF. - COTRACT ASSEMBLY ADMIN.\n         ITDEPTNO 5940       NSD    - JC MFG OPS ADMIN\n         ITDEPTNO 5950       MANUF. - TRAFFIC\n         ITDEPTNO 5960       MANUF. - AMTC ADMIN.\n         ITDEPTNO 6310       MANUF. - MACHINE WIRE WRAP\n         ITDEPTNO 6350       NSD  . - 1240 FRAME ASSEMBLY\n         ITDEPTNO 6500       MANUF. - PB CHEMICAL\n         ITDEPTNO 6520       NSD  . - PCB PROCESS CONTROL\n         ITDEPTNO 6530       MANUF. - PB MULTILAYER\n         ITDEPTNO 6600       MANUF. - PB ASSEMBLY OPERATIONS\n         ITDEPTNO 6610       MANUF. - PB AUTOINSERTION\n         ITDEPTNO 6800       MACKAY - MFG ASSEMBLY\n         ITDEPTNO 7100       MANUF. - QUALITY ADMINISTRATION\n         ITDEPTNO 7110       MANUF. - QUALITY SERVICES\n         ITDEPTNO 7120       MANUF. - POST PAYPOINT INSPECTION\n         ITDEPTNO 7200       MANUF. - VENDOR QUALITY\n         ITDEPTNO 7400       MANUF. - QUALITY ENGINEERING\n         ITDEPTNO 7430       MANUF. - CALIBRATION\n         ITDEPTNO 8120       NSD    - REPAIR AND RETURN\n         ITDEPTNO 8150       MANUF. - CONTRACT TEST\n         ITDEPTNO 8160       MANUF. - PC AUTO TEST\n         ITDEPTNO 8170       MANUF. - SWITCHING TEST\n         ITDEPTNO 8180       MANUF. - INCIRCUIT TEST\n         ITDEPTNO 8190       MANUF. - IND SPC TEST\n         ITDEPTNO 8200       MANUF. - SPAN LINE TEST\n         ITDEPTNO 8210       MANUF. - PCM TEST\n         ITDEPTNO 8250       MANUF. - MULTIPLEX TEST\n         ITDEPTNO 8280       MANUF. - SUBSCRIBER TEST\n         ITDEPTNO 8290       MANUF. - SUB ASSEMBLY TEST\n         ITDEPTNO 8310       MACKAY - INSPECTION\n         ITDEPTNO 8330       MANUF. - SUB ASSB FINAL INSP\n         ITDEPTNO 8370\n         ITDEPTNO 9010       MIS\n         ITDEPTNO 9020       MIS\n         ITDEPTNO 9030       MIS\n         ITDEPTNO 9040       MIS\n         ITDEPTNO 9050       MIS\n         ITDEPTNO 9060       MIS\n         ITDEPTNO 9070       MIS\n         ITDEPTNO 9080       MIS\n         ITDEPTNO 9090       MIS\n         ITDEPTNO 9100       GROUP  - A & G\n         ITDEPTNO 9110       GROUP  - COMPTROLLER\n         ITDEPTNO 9120       GROUP  - LEGAL\n         ITDEPTNO 9200       NSD    - HIGHWOODS OCCUPANCY\n         ITDEPTNO 9350       B&CC ? - OCCUPANCY SPRINGFIELD\n         ITDEPTNO 9500       B&CC ? - PRESIDENT\n         ITDEPTNO 9540       B&CC ? - ?????????\n         ITDEPTNO 9560       B&CC ? - COMPTROLLER\n         ITDEPTNO 9600       B&CC ? - ENGINEERING\n         ITDEPTNO 9610       B&CC ? - ENG PROD DEVELOPMENT\n         ITDEPTNO 9620       B&CC ? - ENG SYSTEMS EFFECTIVENESS\n         ITDEPTNO 9630       B&CC ? - ENG ADVANCED SYSTEMS\n         ITDEPTNO 9640       B&CC ? - ENG ADMINISTRATION\n         ITDEPTNO 9670       B&CC ? - ENG RETAIL PROD DEVELOP\n         ITDEPTNO 9800       B&CC ? - VP MARKETING\n         ITDEPTNO 9810       B&CC ? - PRODUCT MANAGEMENT\n         ITDEPTNO 9820       B&CC ? - STRAT MKTG PLANNING\n         ITDEPTNO 9830       B&CC ? - AARKETING SERVICES\n         ITDEPTNO 9900       B&CC ? - HQ SALES ADMIN\nENDDEPT  DC    CL4'****'       TABLE END\n         SPACE 5\n         END   ITACCTBL\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JES215MD": {"ttr": 6920, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "SYZYGYB"}, "text": "./ CHANGE NAME=HASPSSSM   SP2.1.5\n         L     R1,16               PICK UP CVT ADDRESS           AMXJ07\n         MVC   HJSMSG1V,XONDATE    SET UP EDIT PATTERN           AMXJ07\n         ED    HJSMSG1V,CVTDATE+1-CVT(R1) EDIT                   AMXJ07\nXONDATE  DC    X'40202061202020'   DATE EDIT PATTERN             AMXJ07\nHJSMSG1A WTO   '&MID.STARTED - INIT XX - CLASS Y - SYS ZZZZ - DATE XX/XX\n               XX',ROUTCDE=2,DESC=6,MF=L                         AMXJ07\nHJSMSG1V EQU   JCTWORK+4+9+45,7                                  AMXJ07\n./ CHANGE NAME=HASPCOMM      SP2.1.5\nCD7DCLEN EQU   COMNULOP-4,1        SAVE AREA FOR INSERT CHAR  AMX   $D'\n         BNE   *+6                 NO DOES NOT END IN TIC     AMX   $D'\n         BCTR  R1,0                POINT TO END OF STRING     AMX   $D'\n         SLR   R5,R5               ZERO QUEUE POINTER         AMX   $D'\n         STC   R1,CD7DCLEN         SAVE LENGTH                AMX   $D'\nCD7DPRO  IC    R15,CD7DCLEN        RESTORE LENGTH             AMX   $D'\n         CLC   COMJNAME(0),JQEJNAME    COMPARE FOR MATCH      AMX   $D'\n         EX    R15,*-6             EXECUTE COMPARE            AMX   $D'\n./ ENDUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JX05": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x08\\xcd\\x08\\xcd\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 2253, "newlines": 2253, "modlines": 0, "user": "SYZYGYB"}, "text": "         TITLE 'HASP COMMAND PROCESSOR -- PROLOG (LOCAL MACROS)'   @133\n         MACRO -- $COMGRUP -- DEFINE GROUP OF COMMAND SUB-PROCESSORS\n&NAME    $COMGRUP &A0,&A1,&A2,&A3,&A4,&A5,&A6,&A7,&A8,&A9,&AA,&AB,&AC, C\n               &AD,&AE,&AF,&B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7,&B8,&B9,    C\n               &DELAY=NO\n         LCLC  &I\n         GBLC  &COMGRUP\n&NAME    DS    0H\n         USING *,R8                ADDRESSABILITY\n&COMGRUP SETC  '&NAME'\n         AIF   ('&DELAY' EQ 'NO').A\n         AGO   .C\n.A       BR    R1                  GO TO SUB-PROCESSOR SELECTED\n         AGO   .XIT\n.C       ANOP\n&I       SETC  '&SYSNDX'\nCOF&I    DS    0H                  'BR R1' TO ENTER SUB-PROCESSOR\n.XIT     MEND\n         EJECT\n         MACRO -- $COMTAB -- DEFINE COMMAND TABLE ENTRY            SPR2\n&NAME    $COMTAB &VERB,&GROUP,&REDIR=0,&REJECT=0,&LABEL=           SPR2\n         LCLC  &V                                                  SPR2\n&V       SETC  '&VERB'                                             SPR2\n         AIF   ('&V'(1,1) EQ '''' AND '&LABEL' EQ '').BADLAB       SPR2\n         AIF   ('&V' EQ '' OR '&GROUP' EQ '').BADPOS               SPR2\n         SPACE 1                                                   SPR2\n&NAME    DC    0F'0',AL1(&REDIR*16+&REJECT),AL4(&GROUP)            SPR2\n         AIF   ('&V'(1,1) EQ '''').REMOVE                          SPR2\n         AIF   ('&LABEL' NE '').USELAB                             SPR2\n         DC    AL2(C&V-&GROUP)                                     SPR2\n         AGO   .GETVLEN                                            SPR2\n.REMOVE  ANOP                                                      SPR2\n&V       SETC  '&V'(2,K'&V-2)                                      SPR2\n.USELAB  DC    AL2(&LABEL-&GROUP)                                  SPR2\n.GETVLEN ANOP                                                      SPR2\nA&SYSNDX DS    AL1                                                 SPR2\n         DC    C'&V'                                               SPR2\nB&SYSNDX EQU   *                                                   SPR2\n         ORG   A&SYSNDX                                            SPR2\n         DC    AL1(B&SYSNDX-A&SYSNDX-2)                            SPR2\n         DC    CL7'&V',AL1(0)                                      SPR2\n         SPACE 1                                                   SPR2\n         MEXIT                                                     SPR2\n.BADLAB  MNOTE 8,'LABEL=  KEYWORD SPECIFICATION MISSING'           SPR2\n         MEXIT                                                     SPR2\n.BADPOS  MNOTE 8,'MISSING VERB OR GROUP SPECIFICATION'             SPR2\n         MEND                                                      SPR2\n         EJECT                                                     SPR2\n         MACRO -- $CRET -- RETURN TO MAIN COMMAND PROCESSOR\n&NAME    $CRET &MSG=,&L=,&INFO=,&MSGID=,&JOB=NO                    SPR2\n         LCLA  &CNT\n         LCLC  &F                                                  SPR2\n         AIF   ('&INFO' EQ '' OR '&INFO' EQ 'NO').Z                @133\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $CRET -- RETURN TO MAIN COMMAND PROCESSOR                    *\n*                                                                     *\n*        ROUTINE MAY ISSUE $WTO AND $WAIT AS DIRECTED BY CALLER       *\n*                                                                     *\n* REGISTERS USED                                                      *\n*        R0    = LENGTH OF MESSAGE IF RESPONSE REQUESTED, NOT MSG=OK  *\n*        R1    = MESSAGE ADDRESS -- COMMAND                           *\n*        R15   = RETURN CODE -- NO MESSAGE, OK, OR GENERAL MESSAGE    *\n*                                                                     *\n***********************************************************************\n.Z       ANOP\n&NAME    DS    0H                                                  SPR2\n         AIF   ('&MSG' EQ '' AND '&L' EQ '').H\n         AIF   ('&MSGID' EQ '').ST                                 SPR2\n         AIF   ('&JOB' NE 'NO').YES                                SPR2\n&F       SETC  'F'                                                 SPR2\n         AGO   .MS                                                 SPR2\n.YES     ANOP                                                      SPR2\n&F       SETC  'E'                                                 SPR2\n.MS      ANOP                                                      SPR2\n        $MID   &MSGID                                              SPR2\n         MVC   COMMID,=X'&MSGID&F'                                 SPR2\n.ST      AIF   ('&L' EQ '').F                                      SPR2\n         AIF   ('&L'(1,1) EQ '(').A\n         LA    R0,&L\n         AGO   .C\n.A       AIF   ('&L' EQ '(R0)').B\n         LR    R0,&L(1)\n.B       AIF   ('&MSG' EQ '').E\n         MNOTE 4,'REGISTER FORM OF LENGTH INVALID'\n         MEXIT\n.C       AIF   ('&MSG' EQ '').E\n         AIF   ('&MSG'(1,1) EQ '(').D\n         MVC   COMMAND(&L),&MSG                                    SPR2\n         AGO   .E\n.LITERAL ANOP\n&CNT     SETA  K'&MSG-2\n         MVC   COMMAND(&CNT),=C&MSG\n         LA    R0,&CNT             SET LENGTH OF MSG IN R0\n         AGO   .E\n.D       MVC   COMMAND(&L),0&MSG\n.E       B     X005RC16            RETURN AND ISSUE MESSAGE     JOR0385\n         MEXIT                                                  JOR0385\n.F       AIF   ('&MSG' EQ 'OK').G\n         AIF   ('&MSG'(1,1) EQ '''').LITERAL\n         MNOTE 4,'LENGTH REQUIRED'\n         MEXIT\n.G      $MID   000                                                 SPR2\n         B     X005RC12            RETURN AND ISSUE OK MESSAGE  JOR0385\n         MEXIT                                                  JOR0385\n.H       B     X005RC00            NORMAL RETURN                JOR0385\n         MEND\n         EJECT\n         MACRO\n         $COMTBL &DOC=DOC\nCOMTBL   DSECT\nCOMTFL   DS    0X                  FLAGS\nCOMTGRUP DS    A                   ADDR OF COMMAND PROCESSOR\nCOMTOFF  DS    Y                   LOCATION OF ENTRY OFFSET\nCOMTVB   DS    CL1                 VERB\nCOMTVOP  DS    CL1                 FIRST OPERAND\nCOMTEL   EQU   *-COMTBL            LENGTH OF EACH ENTRY\n&SYSECT  CSECT\n         MEND\n         EJECT\n         COPY  $HASPGBL            COPY HASP GLOBALS\nJESEX005 $MODULE NOTICE=SP220,                                     J215*\n               SYSP=(NOGEN,GEN,NODATA,NOGEN,NOGEN),             JOR0385*\n               TITLE='JESEX005 - EXIT 5',                       JOR0385*\n               ENVIRON=JES2,                                    JOR0485*\n               DCB,               GENERATE MVS DCB DSECT          XCOMM+\n               DEB,               GENERATE MVS DEB DSECT          XCOMM+\n               RESPA,             GENERATE JES FSI JSPA DSECT     XCOMM+\n               SDWA,              GENERATE MVS SDWA DSECT         XCOMM+\n               UCB,               GENERATE MVS UCB DSECT          XCOMM+\n               $HCT,$PADDR,       GENERATE HASP HCT DSECT         XCOMM+\n               $BUFFER,           GENERATE HASP BUFFER DSECT      XCOMM+\n               RPL,               REQ'D BY $BUFFER                 J215+\n               $JCT,              GENERATE HASP JCT DSECT         XCOMM+\n               $ERA,              GENERATE HASP ERA DSECT         XCOMM+\n               $SMF,              GENERATE HASP SMF DSECT         XCOMM+\n               $DCT,              GENERATE HASP DCT DSECT         XCOMM+\n               $JQE,              GENERATE HASP JQE DSECT         XCOMM+\n               $JOE,              GENERATE HASP JOE DSECT         XCOMM+\n               $PCE,              GENERATE HASP PCE DSECT         XCOMM+\n               $COMWORK,          GENERATE HASP COMWORK DSECT     XCOMM+\n               $CKPWORK,          GENERATE HASP CKPWORK DSECT     XCOMM+\n               $CAT,              GENERATE HASP CAT DSECT         XCOMM+\n               $MIT,              GENERATE HASP MIT DSECT         XCOMM+\n               $QSE,              GENERATE HASP QSE DSECT         XCOMM+\n               $KIT,              GENERATE HASP KIT DSECT         XCOMM+\n               $PRE,              GENERATE HASP PRE DSECT         XCOMM+\n               $HASPEQU,          GENERATE HASP EQUATES           XCOMM+\n               $DAS,              GENERATE HASP DAS DSECT         XCOMM+\n               $CWA,              GENERATE HASP CWA DSECT          J215+\n               $BPM,              GENERATE HASP BPM DSECT         XCOMM+\n               $SVT,$HFAME,       GENERATE HASP SVT DSECT         XCOMM+\n               $SCAT,             GENERATE HASP SCAT DSECT        XCOMM+\n               $JOT,              GENERATE HASP JOT DSECT         XCOMM+\n               $IOT,              GENERATE HASP IOT DSECT         XCOMM+\n               $LCK,              GENERATE HASP LCK DSECT         XCOMM+\n               $TAB,              GENERATE HASP TAB DSECT         XCOMM+\n               $MODMAP,           GENERATE HASP MODMAP DSECT      XCOMM+\n               $XECB,             GENERATE HASP XECB DSECT        XCOMM+\n               $TQE,              GENERATE HASP TQE DSECT         XCOMM+\n               $PDDB,             GENERATE HASP PDDB DSECT        XCOMM+\n               $RAT,              GENERATE HASP RAT DSECT       JOR0485+\n               $RDT,              GENERATE HASP RAT DSECT       JOR8611+\n               $SCANTAB,$SCANWA,  GENERATE HASP RAT DSECT       JOR8611+\n               $CMB               GENERATE HASP CMB DSECT         XCOMM\n         $COMTBL DOC=NO\n         TITLE 'EXIT POINT 5 -- JES2 COMMAND PREPROCESSOR'\n***********************************************************************\n*                                                                     *\n*        JES2 COMMAND PREPROCESSOR                                    *\n*                                                                     *\n*        REG     ENTRY VALUE              EXIT VALUE                  *\n*        ---     -----------              ----------                  *\n*                                                                     *\n*        R0-R4   N/A                      UNCHANGED                   *\n*        R5      ADDR OF CURRENT OPERAND  UNCHANGED                   *\n*        R6      4                        UNCHANGED                   *\n*        R7      ADDR OF THE LAST OPERAND UNCHANGED                   *\n*        R8-R10  N/A                      UNCHANGED                   *\n*        R11     ADDR OF HCT              UNCHANGED                   *\n*        R12     N/A                      UNCHANGED                   *\n*        R13     ADDR OF PCE              UNCHANGED                   *\n*        R14     RETURN ADDRESS           UNCHANGED                   *\n*        R15     ENTRY POINT ADDRESS      0 AND 4 STANDARD PROCESSING *\n*                                         8 - NO STD PROS + $CRET     *\n*                                         12- NO STD PROS + $CRET \"OK\"*\n*                                         16- NO STD PROS + $CRET MSG *\n*                                                                     *\n*        CC      N/A                      N/A                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nJESEP005 $ENTRY BASE=R9\n         EJECT\n         $SAVE TRACE=YES\n         LR    R9,R15              SET LOCAL BASE\n         SPACE 1                                                  XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        INITIALIZE R?? FOR HASPCOMM BASED SERVICE ROUTINES     * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\n***      L     R??,$COMMXSV       POINT AT COMM SERVICE VECTOR    XX005\n***      L     R??,32(,R??)       R?? NO BASE REG FOR COMM SERV   XX005\n         SPACE 1                                                  XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        ESTABLISH ESTAE ENVIRONMENT                            * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\n         L     R14,=A(XCOMRCVR)    R14 => MBX005 RECOVERY EP      XX005\n        $ESTAE RECADDR=(R14)       CREATE ESTAE ENVIRONMENT       XX005\n         SPACE 1                                                  XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        MOVE PORTION OF THE COMMAND CURRENTLY BEING PROCESSED  * XX005\n*        INTO THE PRE (PRETRACK) FOR THE PROCESSOR RECOVERY     * XX005\n*        ROUTINE (XCOMRCVR)                                     * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\n         L     R14,PCEPRE          GET ADDRESS OF PRE             XX005\n         USING PRE,R14        ADDRESSABILITY                       J215\n         SPACE 1                                                  XX005\n         MVC   PRETRACK(CCMDLN),COMMAND     MOVE COMMAND INTO PRE XX005\n         MVI   PRELOGLN,CCMDLN     SET LENGTH OF DATA IN PRETRACK XX005+\n                                     TO BE RECORDED IN LOGREC     XX005\n         SPACE 1                                                  XX005\n         DROP  R14                 KILL ADDRESSABILITY            XX005\n         EJECT                                                    XX005\n***************************************************************** MB026\n*                                                               * MB026\n*        LOOK UP CMD IN TABLE                                   * MB026\n*                                                               * MB026\n***************************************************************** MB026\n         SPACE 1                                                  MB026\n         LA    R4,MBCMDLST         POINT TO FAST LOOKUP TABLE     XX005\n         LA    R2,FTBLENTS         SET NBR OF FAST TBLE ENTRIES   XX005\n         SPACE 1                                                  XX005\nMOMHIT   CLC   0(1,R4),COMVERB     CHECK FOR HIT IN TABLE         XX005\n         BH    X005RC00            IF TABLE HIGHER -- NOT OUR CMD XX005\n         BE    MOMGETP             IF EQUAL -- GO GET PROCESSOR   XX005\n         LA    R4,FTBLENTL(,R4)    POINT TO NEXT TABLE ENTRY      XX005\n         BCT   R2,MOMHIT           DECREMENT COUNT & LOOP AGAIN   XX005\n         B     X005RC00            IF NOT FOUND -- NOT OUR CMD    XX005\n         SPACE 1                                                  XX005\nMOMGETP  ICM   R4,B'1111',1(R4)    GET MAIN TABLE ADDRESS          J215\n         LA    R2,CTBLENTS         SET NBR OF TABLES ENTRIES      XX005\n         SPACE 1                                                  XX005\nMOMSRL   CLC   MOMTVB(1,R4),COMVERB  CHECK TO SEE IF VERB IN RANGEXX005\n         BH    X005RC00            IF NOT IN RANGE, NOT OUR CMD   XX005\n         IC    R14,MOMTVBLN(,R4)   GET VERB LENGTH                XX005\n         EX    R14,MOMVCLC         LOOK AT WHOLE VERB             XX005\n         BE    MOMFND              BRANCH IF VERB FOUND           XX005\n         SPACE 1                                                  XX005\nMOMSRC   LA    R4,CTBLENTL(,R4)    POINT TO NEXT ENTRY            XX005\n         BCT   R2,MOMSRL           DECREMENT COUNT & LOOP AGAIN   XX005\n         B     X005RC00            NOT OURS OR BAD SYNTAX         XX005\n         EJECT                                                    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        COME HERE IF COMMAND ISSUED FROM UNAUTHORIZED CONSOLE  * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nMOMBAD   TM    COMFLAG,CMBFLAGU    IS THIS UCM                    XX005\n         BZ    MOMBADA             DISPLAY ERROR IF NOT           XX005\n         BAL   R3,MOMVCCA          VERIFY CCA (NO RETURN IF BAD)  XX005\n         CLI   COMUCMA,0           MLWTO                          XX005\n         BZ    MOMBADA             DISPLAY ERROR IF YES           XX005\n         MVI   COMLINET,X'80'      SET CONTROL LINE               XX005\n        $CWTO  L=L'COMMAND,MSGID=949      WRITE TO OPERATOR       XX005\n         MVI   COMLINET,X'20'      SET DATA LINE                  XX005\nMOMBADA  MVC   COMMAND(L'MBVINVMB),MBVINVMB MOVE IN INVALID MSG   XX005\n         LA    R0,L'MBVINVMB            SETUP LENGTH REG0         XX005\n         $STORE R0                      STORE FOR JES2            XX005\n         B     X005RC16                 GO TO EXIT ROUTINE        XX005\n         EJECT                                                    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        J2XCOMM COMMON RETURN ROUTINES *                       * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\n*        +0  --  CONTINUE WITH NORMAL COMMAND PROCESSING          XX005\nX005RC00 DS    0H                                                 XX005\n         XR    R15,R15             SET RC=0                     JOR0585\n         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005\n         SPACE 2                                                  XX005\n*        +4  --  CONTINUE WITH NORMAL COMMAND PROCESSING          XX005\nX005RC04 DS    0H                                                 XX005\n         LA    R15,4               SET RC=4                     JOR0585\n         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005\n         SPACE 2                                                  XX005\n*        +8  --  PERFORM $CRET NORMAL RETURN -- (DELETES COMMAND) XX005\nX005RC08 DS    0H                                                 XX005\n         LA    R15,8               SET RC=8                     JOR0585\n         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005\n         SPACE 2                                                  XX005\n*        +12 --  ISSUE $CRET OK MESSAGE                           XX005\nX005RC12 DS    0H                                                 XX005\n         LA    R15,12              SET RC=12                    JOR0585\n         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005\n         SPACE 2                                                  XX005\n*        +16 --  ISSUE $CRET MESSAGE  --  TEXT IN 'COMMAND' AREA  XX005\n*                                         MESSAGE LENGTH IN R0    XX005\nX005RC16 DS    0H                                                 XX005\n        $STORE R0                  PRESERVE MSG LENGTH          JOR0585\n         LA    R15,16              SET RC=16                    JOR0585\n         B     ESTAECAN            BRANCH TO COMMON RETURN        XX005\n         SPACE 2                                                  XX005\nESTAECAN DS    0H                  CANCEL J2XCOMM ESTAE ENVIRON   XX005\n         ICM   R3,B'1111',PCEPRE   GET ADDRESS OF PRE             XX005\n         BZ    X005RTN             IF NONE, SKIP ESTAE CANCEL     XX005\n         ST    R15,PCEUSER0       SAVE RETURN CODE              JOR0585\n        $ESTAE CANCEL              CANCEL ESTAE ENVIRONMENT       XX005\n         L     R15,PCEUSER0       RESTORE RETURN CODE           JOR0585\nX005RTN  DS    0H                                                 XX005\n        $RETURN RC=(R15),TRACE=YES RETURN TO MAINLINE HASPCOMM    XX005\n         EJECT                                                    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        COMMAND FOUND IN TABLE -- CHECK CONSOLE AUTHORITY      * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nMOMFND   IC    R1,MOMTFL(,R4)      PICK UP RESTRICTION BITS       XX005\n         N     R1,=A(X'F')         PURIFY                         XX005\n         EX    R1,MOMTMI           TEST FOR AUTHORIZED CONSOLE    XX005\n         BNZ   MOMBAD              BR IF UNAUTHORIZED CONSOLE     XX005\n         SPACE 1                                                  XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\n         TM    COMFLAG,CMBFLAGU    IS THIS UCM...                 XX005\n         BZ    MOMGOOD             IF NOT SKIP REDIRECTION        XX005\n         SPACE 1                                                  XX005\n         TM    MBLFLG,MBLFLGC+MBLFLGR CONSOLE SET OR REMOTE SYSTEMXX005\n         BNZ   MOMRPT              SKIP AUTOMATIC L=CCA           XX005\n         SPACE 1                                                  XX005\n         SR    R1,R1               ZERO WORK                      XX005\n         IC    R1,MOMTFL(0,R4)     PICK UP REDIRECT OFFSET        XX005\n         SRA   R1,4                ALIGN TO LOW HEX DIGIT         XX005\n         BZ    MOMRPT              IF ZERO NO REDIRECTION         XX005\n         SPACE 1                                                  XX005\n         BCTR  R1,0                REDUCE BY 1                    XX005\n         AR    R1,R1               DOUBLE                         XX005\n         SR    R2,R2               ZERO WORK                      XX005\n         IC    R2,COMUCM           PICK UP CURRENT UCM            XX005\n         AIF   ('&FMID' EQ 'HJE2330 ').SP134A,                     J134*\n               ('&FMID' EQ 'HJE2215 ').SP134A,                     J215*\n               ('&FMID' EQ 'HJE2221 ').SP134A                      J220\n         CH    R2,COMCONNO         CHECK FOR TOO HIGH             XX005\n         BH    MOMRPT              FORGET AUTOMATIC IF TOO HIGH   XX005\n         SPACE 1                                                  XX005\n         L     R14,COMEXTEN        POINT TO EXTENDED AREA         XX005\n         USING CWA,R14         AND ESTABLISH ADDRESSABILITY        J215\n         SPACE 1                                                  XX005\n         AGO   .CONTA                                             XX005\n.SP134A  ANOP                                                     XX005\n         SPACE 1                                                  XX005\n         L     R14,$COMEXTN        POINT TO EXTENDED AREA    @134 XX005\n         USING CWA,R14        ADDRESSABILITY                       J215\n         SPACE 1                                                  XX005\n         CH    R2,CWAOCON          CHECK FOR TOO HIGH              J215\n         BH    MOMRPT              FORGET AUTOMATIC IF TOO HIGH   XX005\n.CONTA   ANOP                                                     XX005\n         MH    R2,CWALCON          MULTIPLY BY LENGTH DIMENSION    J215\n         AR    R1,R2               COMBINE OFFSETS                XX005\n         LA    R1,CWARESP-CWACONL(R1) POINT TO ELEMENT             J215\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID           J215\n         TM    MBLFLG,MBLFLGA      HAS AREA BEEN SET              XX005\n         BO    MOMRPT              SKIP AUTOMATIC IF YES          XX005\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA                    J215\n         SPACE 1                                                  XX005\n         DROP  R14                                                XX005\n         SPACE 1                                                  XX005\nMOMRPT   BAL   R3,MOMVCCA          VERIFY CCA (NO RETURN IF BAD)  XX005\n         CLI   COMUCMA,0           TEST FOR MLWTO                 XX005\n         BZ    MOMGOOD              IF NOT, SKIP                  XX005\n         MVI   COMLINET,X'80'      SET CONTROL LINE               XX005\n         SPACE 1                                                  XX005\n        $CWTO  L=L'COMMAND,MSGID=936      WRITE TO OPERATOR       XX005\n         SPACE 1                                                  XX005\n         MVI   COMLINET,X'20'      SET DATA LINE                  XX005\n         EJECT                                                    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*    COMMAND FOUND CONTINUE TO PROCESS IT                       * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nMOMGOOD  DS    0H                                                 XX005\n         L     R8,MOMTGRP(,R4)     GET ADDRESS OF GROUP PROCESSOR XX005\n         LH    R1,MOMTOFF(,R4)     GET OFFSET OF SUBPROCESSSOR    XX005\n         ALR   R1,R8               COMPUTE ADDR OF SUBPROCESSOR   XX005\n         BR    R8                  GO TO GROUP PROCESSOR          XX005\n         SPACE 1                                                  XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        SUBROUTINE TO VERIFY CONSOLE/AREA                      * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nMOMVCCA  TM    MBLFLG,MBLFLGR      REMOTE SYSTEM UCM              XX005\n         BOR   R3                  UCM AND AREA OK                XX005\n         SPACE 1                                                  XX005\n         AIF   ('&FMID' EQ 'HJE2330 ').SP134B,                     J134*\n               ('&FMID' EQ 'HJE2215 ').SP134B,                     J215*\n               ('&FMID' EQ 'HJE2221 ').SP134B                      J220\n         L     R2,COMEXTEN         POINT TO EXTENDED WORK AREA    XX005\n         AGO   .CONTB                                             XX005\n.SP134B  ANOP                                                     XX005\n         L     R2,$COMEXTN         POINT TO EXTENDED AREA    @134 XX005\n.CONTB   ANOP                                                     XX005\n         USING CWA,R2          AND ESTABLISH ADDRESSABILITY        J215\n         SPACE 1                                                  XX005\n         MVC   XASCID(1),COMUCM   SET UCM                         XX005\n         MVC   XASDID(1),COMUCMA  SET AREA                        XX005\n         CLI   XASDID,0           ZERO AREA                       XX005\n         BNZ   MOMSSAOP           SKIP NSI                        XX005\n         MVI   XASDID,C'Z'        FORCE AREA Z                    XX005\nMOMSSAOP MVC   XAU(1),COMUCM      TELL OS SOURCE IS SAME AS OUTPUTXX005\n         MVI   XAN,X'22'          SET ID FOR VERIFIER             XX005\n         MODESET EXTKEY=ZERO      GET KEY 0                       XX005\n         L     R15,CWA7603D       POINT TO OS VERIFICATION ROUTIN  J215\n         BALR  R14,R15            ENTER IT                        XX005\n         MODESET EXTKEY=HASP      GET KEY 1                       XX005\n         CH    R15,=H'4'          CHECK FOR SERIOUS ERROR         XX005\n         BNHR  R3                 SKIP NEXT IF CONSOLE/AREA OK    XX005\n         SLR   R10,R10            ZERO WORK                       XX005\n         ICM   R10,B'0101',COMUCM+(COMUCMA-COMUCMA) PICK UP UCM IDXX005\n*                                                    AND AREA     XX005\n         MVI   COMUCMA,0          FORCE NO MLWTO (NO PREVIOUS LINEXX005\n         CH    R15,=H'12'         IS CONSOLE DOWN                 XX005\n         BNE   *+16               DO NOT SET LOGICAL CONSOLE      XX005\n         MVC   COMFLAG(4),MOWTOL  DESTROY APPARENT SOURCE INFO    XX005\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD XX005\n         EJECT                                                    XX005\n        $CWTO  L=L'COMMAND,MSGID=936      WRITE TO OPERATOR       XX005\n         SPACE 1                                                  XX005\n         MVC   COMMAND(MBVINVL),MBVINV MOVE DIAGNOSTIC TEXT       XX005\n         STC   R10,MBVINVA         SET AREA                       XX005\n         SRL   R10,8               ALIGN CONSOLE ID               XX005\n         $CFCVE VALUE=(R10)        CONVERT TO EBCDIC              XX005\n         SPACE 1                                                  XX005\n         MVC   MBVINVC,COMDWORK+3 SET INTO TEXT                   XX005\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER        XX005\n         MVC   COMMAND(MBVINVL),MBVINV                            XX005\n         LA    R1,COMMAND                                         XX005\n        $CWTO  L=MBVINVL,MSGID=999      WRITE TO OPERATOR         XX005\n         B     X005RC08                                           XX005\n      TITLE 'HASP COMMAND SERVICES  -- (COFCVB)   - CONVERT TO BINARY'\nCOFCVB1 $CFCVB TYPE=RES,INFO=YES,NUM=1                             @133\n         EJECT                                                     @133\nCOFCVB2 $CFCVB TYPE=RES,INFO=YES                                   @133\n         SPACE 1                                                  XX005\n      TITLE 'HASP COMMAND SERVICES  -- (COFSEL)   - ROUTINE SELECTION'\n***********************************************************************\n*                                                                     *\n*        COFSEL -- SELECT A ROUTINE BASED ON KEY INPUT CHARACTER      *\n*                                                                     *\n*        ROUTINE MATCHES THE DESIGNATED INPUT CHARACTER AGAINST       *\n*        THE LIST OF ARGUMENTS PROVIDED AND TRANSFERS CONTROL TO      *\n*        THE ROUTINE DESIGNATED BY THE CORRESPONDING ADDRESS.         *\n*        NO $WAITS ARE ISSUED.                                        *\n*                                                                     *\n* REGISTERS UPON ENTRY                                                *\n*        R1    = ADDRESS OF INPUT CHARACTER                           *\n*        R14   = RETURN ( USED IF NO MATCH FOUND )                    *\n*        R15   = TABLE ADDRESS                                        *\n*                                                                     *\n* EXITS                                                               *\n*        R1   - ADDRESS OF INPUT CHARACTER                            *\n*        R14  - RETURN OR SUB-ROUTINE ADDRESS                         *\n*        R15  - LENGTH OF SUBPARAMETER KEYWORD                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                   @130\nCOFSEL   ST    R14,$DOUBLE         SAVE RETURN ADDRESS             @130\n         SLR   R14,R14             ZERO FOR INSERT                 @130\n         SPACE 1                                                   @130\nCOFSEL1  IC    R14,COFSELL(,R15)   GET MACHINE LENGTH OF SUBPARM   @130\n         EX    R14,COFSELE         COMPARE ENTRY WITH PARAMETER    @130\n         BNE   COFSEL2             BRANCH IF NOT EQUAL             @130\n         ST    R14,$DOUBLE         STORE MACHINE LENGTH            @130\n         L     R14,COFSELA(,R15)   GET ADDRESS OF RETURN POINT     @130\n         L     R15,$DOUBLE         GET MACHINE LENGTH OF SUBPARM   @130\n         LA    R15,1(,R15)         ACTUAL LENGTH                   @130\n         BR    R14                 EXIT TO SUB-ROUTINE             @130\n         SPACE 1                                                   @130\nCOFSEL2  LA    R15,COFSELF+1(R14,R15)   STEP THROUGH THE TABLE     @130\n         CLI   COFSELV(R15),FF     IS THIS THE END OF TABLE...     @130\n         BL    COFSEL1             LOOP WHILE STILL IN TABLE       @130\n         SPACE 1                                                   @130\n         L     R14,$DOUBLE         RELOAD RETURN ADDRESS           @130\n         BR    R14                  AND RETURN IN ERROR            @130\n         SPACE 1                                                   @130\nCOFSELE  CLC   COFSELV(*-*,R15),0(R1)  **** EXECUTE ONLY ****      @130\n         SPACE 1                                                   @130\n*                                                                  @130\n*        SYMBOLS TO DEFINE SUBPARAMETER TABLE FIELDS               @130\n*                                                                  @130\n         SPACE 1                                                   @130\nCOFSELF  EQU   5                   LENGTH OF FIXED LENGTH PORTION  @130\nCOFSELA  EQU   0                   LOCATION OF ENTRY ROUTINE ADDR  @130\nCOFSELL  EQU   4                   LOCATION OF LENGTH OF SUBPARM   @130\nCOFSELV  EQU   5                   LOCATION OF VARIABLE LNG PARM   @130\n         EJECT\nMOMVCLC  CLC   MOMTVB(*-*,R4),COMVERB *** EXECUTE ONLY ***        XX005\nMOMTMI   TM    COMAUTH,*-*         *** EXECUTE ONLY ***           XX005\n         SPACE 1                                                  XX005\n         DROP  R2                                                 XX005\n         EJECT                                                    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*   C O M M A N D   E D I T   R O U T I N E   C O N S T A N T S * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX   XX005\nMBVINVMB DC    C'COMMAND IS INVALID FROM THIS CONSOLE'            XX005\nMBVINVLB EQU   *-MBVINVMB                                         XX005\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '            XX005\nMBVINVL  EQU   *-MBVINV                                           XX005\nMBVINVC  EQU   COMMAND+MBVINVL-16,2                               XX005\nMBVINVA  EQU   MBVINVC+2,1                                        XX005\nMBLPTRN  DC    C'00',X'0000'       WORK AREA PATTERN              XX005\nMBLHI    EQU   COMEWORK            HIGH DIGIT OF CONSOLE 'CC'     XX005\nMBLLO    EQU   COMEWORK+1          LOW DIGIT OF CONSOLE 'CC'      XX005\nMBLFLG   EQU   COMEWORK+2          FLAG BYTE                      XX005\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER     XX005\nMBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM XX005\nMBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED     XX005\nMBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED        XX005\nMBLAREA  EQU   COMEWORK+3          AREA SPECIFICATION             XX005\nMBLCLEQ  DC    C',L='              SPECIAL PARAMETER ID           XX005\n         SPACE 1                                                  XX005\nCOMMREJ  DC    CL42'COMMAND REJECTED-JES2 SHUTDOWN IN PROGRESS'   XX005\nCOMMIDC  $MSG  000                 RESPONSE MESSAGE ID            XX005\n         SPACE 3                                                  XX005\nMOMTEL   EQU   16                  LENGTH OF EACH COMTAB ELEMENT  XX005\nMOMTFL   EQU   0,1                 FLGS FOR REJECT & REDIRECTION  XX005\nMOMTGRP  EQU   1,4                 GROUP PROCESSOR ADDRESS        XX005\nMOMTOFF  EQU   5,2                 SUBPROCESSOR OFFSET            XX005\nMOMTVBLN EQU   7,1                 VERB LENGTH -1                 XX005\nMOMTVB   EQU   8,7                 THE VERB                       XX005\nMOMTFLGS EQU   15,1                FLAGS FOR SPECIAL PROCESSING   XX005\nMOMR     EQU   CMBFLAGR            LEVEL OF RESTRICTION FOR RMTS  XX005\nMOMS     EQU   DCTREJSY            REJECT UNLESS SYSTEM AUTH      XX005\nMOMD     EQU   DCTREJDV            REJECT UNLESS DEVICE AUTH      XX005\nMOMJ     EQU   DCTREJJB            REJECT UNLESS JOB AUTH         XX005\nMOMJDS   EQU   MOMJ+MOMD+MOMS      COMBINATION                    XX005\nMOMRS    EQU   MOMR+MOMS           COMBINATION                    XX005\nMOMRJ    EQU   MOMR+MOMJ           COMBINATION                    XX005\n         TITLE 'CONSTANTS AND EQUATES'\n***********************************************************************\n*                                                                     *\n*        REDIRECTION VALUES FOR DISPLAY COMMANDS                      *\n*                                                                     *\n***********************************************************************\n$D7D     EQU   4\n$DA      EQU   1\n$DF      EQU   2\n$DI      EQU   3\n$DJ      EQU   4\n$DN      EQU   5\n$DO      EQU   6\n$DQ      EQU   7\n$DS      EQU   4\n$DT      EQU   4\n$DU      EQU   8\n         SPACE 5\nCOMR     EQU   CMBFLAGR            LEVEL OF RESTRICTION FOR REMOTES\nCOMS     EQU   DCTREJSY            REJECT UNLESS SYSTEM AUTHORIZATION\nCOMD     EQU   DCTREJDV            REJECT UNLESS DEVICE AUTHORIZATION\nCOMJ     EQU   DCTREJJB            REJECT UNLESS JOB AUTHORIZATION\nCOMJDS   EQU   COMJ+COMD+COMS      COMBINATION\nCOMRS    EQU   COMR+COMS           COMBINATION\nCOMRJ    EQU   COMR+COMJ           COMBINATION\n         SPACE 2                                                  XX005\nMBVERCMD CLC   MOMTVB(*-*,R4),COMVERB *****EXECUTE ONLY *******   XX005\n         SPACE 2                                                  XX005\n$MAXMSG  EQU   43                 = MAXIMUM MSG LENGTH            XX005\nCCMDLN   EQU   15                 = LENGTH OF CMD TO BE MOVED     XX005\n         SPACE 3\n         LTORG  ,                                                 XX005\n         TITLE 'SPAC COMMAND TABLES   '\nMBCMDLST DS    0C                  BEGIN COMMAND FAST LOOK-UP TBL  J215\n         DC    C'D',AL4(MBTBLD)                                    J215\nFTBLENTL EQU   *-MBCMDLST          FAST LOOK-UP TABLE ENTRY LEN    J215\n         DC    C'J',AL4(MBTBLJ)                                    J215\n         DC    C'P',AL4(MBTBLP)                                    J215\n         DC    C'T',AL4(MBTBLT)                                    J215\n         DC    C'X',AL4(MBTBLX)                                    J215\n         SPACE 1\nFTBLENTS EQU   (*-MBCMDLST)/FTBLENTL    NBR OF TBL ENTRIES        XX005\n         SPACE 2                                                  XX005\n         DS    0F                                                 XX005\n$$DMY    $COMTAB $$DMY,$$DMY,LABEL=$$DMY      DUMMY $COMTAB ENTRY XX005\nCTBLENTL EQU   *-$$DMY                                            XX005\n         SPACE 1                                                  XX005\nMBCMDTBL DS    0F                 BEGIN MELLON BANK CMD TBL       XX005\nCOMTAB   DS    0F\nMBTBLC   EQU   *                                                  XX005\nMBTBLD   EQU   *                                                  XX005\n         $COMTAB DDESTID,SPDESTID,REJECT=COMS,REDIR=$DF         JOR8611\n         $COMTAB DK,HASPQCTL,REJECT=COMR+COMS  D QCONTROL\n         $COMTAB DRES,HASPRES,REDIR=$DF\nMBTBLH   EQU     *\nMBTBLJ   EQU     *\n         $COMTAB JA,SPACCMDS,REDIR=$DF\n         $COMTAB JF,SPACCMDS,REDIR=$DF\n         $COMTAB JJ,SPACCMDS,REDIR=$DF\n         $COMTAB JK,HASPRES,REDIR=$DF\n         $COMTAB JP,SPACCMDS,REDIR=$DF\n         $COMTAB JQ,SPACCMDS,REDIR=$DF\n         $COMTAB JS,SPACCMDS,REDIR=$DF\n         $COMTAB JT,SPACCMDS,REDIR=$DF\nMBTBLK   EQU     *\nMBTBLL   EQU     *\nMBTBLP   EQU     *\n         $COMTAB 'P ',HASPPS,REJECT=COMR+COMS,  NO-OP '$P '     JOR0585*\n               LABEL=CP40                                       JOR0585\n         $COMTAB PSYS,HASPPS,REJECT=COMR+COMS  $P SYS (DRAIN SYSTEM)\nMBTBLQ   EQU     *\nMBTBLS   EQU     *\nMBTBLT   EQU     *\n         $COMTAB TDESTID,SPDESTID,REJECT=COMS,REDIR=$DF         JOR8611\n         $COMTAB TK,HASPQCTL,REJECT=COMR+COMS  SET QCTL\n         $COMTAB TC,HASPTC                     $T CON (RMTS)\nMBTBLX   EQU     *\n         $COMTAB XJ,HASPXJ,REJECT=COMR+COMS    PURGE GOSH DARNIT\n         $COMTAB XS,HASPXJ,REJECT=COMR+COMS    PURGE GOSH DARNIT\n         $COMTAB XT,HASPXJ,REJECT=COMR+COMS    PURGE GOSH DARNIT\nMBTBLY   EQU     *\nCTBLENTS EQU   (*-MBCMDTBL)/CTBLENTL           NBR OF TBL ENTRIES XX005\nCOMTABE  EQU   *-1\n         SPACE 2\n         LTORG\n         TITLE '           SPAC COMMAND PROCESSOR  ---  INITIALIZATION'\n***************************************************************\n*                                                             *\n*  JESEX005    COMMAND PROCESSOR  ---  INITIAL ENTRY POINT    *\n*                                                             *\n*                                                             *\n***************************************************************\n         SPACE 2\nSPACCMDS $COMGRUP JA,JF,JJ,JP,JQ,JS,JT,DELAY=NO\n         SPACE 3\n**********************************************************************\n*                                                                    *\n*  J COMMAND QUEUE PROCESSING COMMAND                                *\n*                                                                    *\n*    JFXXXX      PROCESS FORM CODE XXXX                              *\n*                                                                    *\n*    JJXXXX                                                          *\n*    JSXXXX      PROCESS ALL FORMS FOR JOB STC OR TSU  XXXX          *\n*    JTXXXX                                                          *\n*                                                                    *\n*    JA          PROCESS ALL ACTIVE JOES AND DISPLAY REMAINING PRINT *\n*                                                                    *\n*    JP          PROCESS ALL JOES WITH + 250,000 LINES               *\n*                                                                    *\n*    JQX         PROCESS ALL FORMS FOR A SPECIFIC QUEUE              *\n*                       A-Z 0-9 AND + FOR NETWORK QUEUE              *\n*                                                                    *\n*    JQXR        PROCESS ALL FORMS FOR A SPECIFIC REMOTE QUEUE       *\n*                       A-Z 0-9                                      *\n*                                                                    *\n**********************************************************************\n         TITLE '                SPAC COMMAND SETUP'             JOR0585\nJOTBAR   EQU   R7                 JOT BASE REG                  JOR0585\n         USING JOT,JOTBAR    ENABLE JOT DSECT                      J215\nJQEBAR   EQU   R6                 JQE BASE REG                  JOR0585\n         USING JQE,JQEBAR    ENABLE JQE DSECT                      J215\nJOEBAR   EQU   R5                 JOE BASE REG                  JOR0585\n         USING JOE,JOEBAR    ENABLE JOE DSECT                      J215\nCLSBAR   EQU   R4                 CLASS QUEUE BASE REG          JOR0585\nCHRJOBAR EQU   R3                 CHAR JOE BASE REG             JOR0585\n         EJECT\n**********************************************************************\n*                                                                    *\n*    THIS ROUTINE IS ENTERED WHEN LOOKING FOR A SPECIFIC FORM        *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nCJF      MVC   CJJFORMS,COMMAND+3  SAVE FORM CODE\n         XC    CJHJOB,CJHJOB       CLEAR FOR FORMS SEARCH\n         BAL   R14,COFRTD          GO SET ROUTING\n         B     SCANJOES            GO PROCESS FORMS\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*    THIS ROUTINE IS ENTERED WHEN LOOKING ACTIVE JOBS                *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nCJA      MVI   CJJFORMS,X'FF'      SET FLAG FOR ACTIVE JOBS\n         XC    CJHJOB,CJHJOB       CLEAR FOR FORMS SEARCH\n         BAL   R14,COFRTD          GO SET ROUTING\n         B     SCANJOES            GO PROCESS FORMS\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*    THIS ROUTINE IS ENTERED WHEN LOOKING FOR PIGS                   *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nCJP      MVI   CJJFORMS,X'FD'      SET FLAG FOR ACTIVE JOBS\n         XC    CJHJOB,CJHJOB       CLEAR FOR FORMS SEARCH\n         BAL   R14,COFRTD          GO SET ROUTING\n         B     SCANJOES            GO PROCESS FORMS\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*    THIS ROUTINE IS ENTERED WHEN SCANNING A QUEUE                   *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nCJQ      MVI   CJJFORMS,X'FE'      SET FLAG FOR ACTIVE JOBS\n         XC    CJHJOB,CJHJOB       CLEAR FOR FORMS SEARCH\n         BAL   R14,COFRTD          GO SET ROUTING\n         LA    R1,37               LOAD NUMBER OF ENTRIES\nCJQLOOP  LA    R15,CJQTBL(R1)      POINT TO TABLE ENTRY         JOR0585\n         CLC   COMMAND+3(1),0(R15) CHECK FOR THIS QUEUE         JOR0585\n         BE    CJQFND              GO PROCESS ON A HIT\n         SPACE 1\n         BCT   R1,CJQLOOP          LOWER ENTRIES BY ONE\n         SPACE 2\n         B     CJMSG650            GO ISSUE INVALID OPERAND\n         SPACE 2\nCJQFND   BCTR  R1,0                LOWER COUNT BY ONE\n         LTR   R1,R1               CHECK REG 1 FOR ZERO\n         BZ    CJQFND0             IF ZERO BYPASS\n         SLL   R1,3                MULTIPLY BY EIGHT\n         CLI   COMMAND+4,C'R'      TEST FOR REMOTE QUEUE\n         BE    CJQFND0             YES. LEAVE DISPLACEMENT\n         S     R1,=F'4'            LOWER DISPLACEMENT BY 4\n         SPACE 1\nCJQFND0  L     JOTBAR,$JOTABLE     LOAD START OF JOT TABLE\n         LA    CLSBAR,JOTNTWKQ-(JOENEXT-JOE)                       J215\n         LA    CLSBAR,0(CLSBAR,R1)                              JOR0585\n         B     CKCLS\n         SPACE 2\nCJQTBL   DC    C' +ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*      THIS ROUTINE IS ENTERED WHEN LOOKING FOR A SPECIFIC JOB       *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nCJJ      DS    0H                  ENTRY ADDRESSABILITY\nCJT      DS    0H                  ENTRY ADDRESSABILITY\nCJS      DS    0H                  ENTRY ADDRESSABILITY\n         BAL   R14,COFRTD          GO SET ROUTING\n         BAL   R14,CVTJNUM        CONVERT NUMBER TO BINARY\n         STH   R2,CJHJOB          STORE BINARY NUMBER\n        $QLOC  (R2)                TRY TO LOCATE JOB\n         LTR   JQEBAR,R1           CHECK FOR GOOD JQE\n         BZ    MSG666              IF NO JQE BRANCH TO MSG\n         SPACE 2\nCJCKSTC  TM    JQEFLAG3,JQE3STC    IS THIS STC                     J215\n         BNO   CJCKTSU             NO TRY TSU TYPE\n         CLI   COMOPRND,C'S'       ARE WE LOOKING FOR STC\n         BNE   MSG666              NO..   ISSUE NO JOB FOUND MESSAGE\n         B     SCANJOES            GO FORMAT OUTPUT\nCJCKTSU  TM    JQEFLAG3,JQE3TSU    IS THIS TSU?                    J215\n         BNO   CJCKJOB             NO GO CHECK FOR JOB\n         CLI   COMOPRND,C'T'       ARE WE LOOKING FOR TSU\n         BNE   MSG666              NO ..  ISSUE NO JOB FOUND MESSAGE\n         B     SCANJOES            GO FORMAT OUTPUT\nCJCKJOB  CLI   COMOPRND,C'J'       ARE WE LOOKING FOR JOB\n         BE    SCANJOES            YES GO FORMAT OUTPUT\n         B     MSG666              NO..   ISSUE NO JOB FOUND MESSAGE\n         SPACE 2\nMSG666   $CRET MSG=MSGNOJOB,L=L'MSGNOJOB,MSGID=666\n         SPACE 2\nMSGNOJOB DC    CL15'NO JOB(S) FOUND'\n         EJECT\n**********************************************************************\n*                                                                    *\n*      SCAN CLASS QUEUES FOR FORMS OR JOB NUMBER                     *\n*                                                                    *\n**********************************************************************\n         SPACE 3\nSCANJOES L     JOTBAR,$JOTABLE\n         LA    CLSBAR,JOTNTWKQ-(JOENEXT-JOE) BACK TO START         J215\nCKCLS    LR    JOEBAR,CLSBAR       LOAD START OF THIS CLS QUE   JOR0585\nNEXTJOE  L     JOEBAR,JOENEXT                                   JOR0585\n         N     JOEBAR,$ZEROFFF     CLEAR FLAG                   JOR0585\n         BZ    NEXTCLS             Y: DONE WITH THIS ONE           J215\n         ALR   JOEBAR,JOTBAR       GET CHAR JOE ADDR            JOR0585\n         CLI   JOETYPE,JOEFREE     FREE JOE?                    JWT0488\n         BE    NEXTJOE             Y: BYPASS                    JWT0488\n         SPACE 1\n         CLC   CJCROUT(2),$OWNNODE IS THIS FOR OUR NODE\n         BNE   CKROUT              NO GO CHECK FOR ROUTING\n         CLC   CJCROUT+2(2),=H'0' CHECK REMOTE NUMBER\n         BE    CKROUT2             BYPASS ROUT CHECK\nCKROUT   CLC   JOEROUT,CJCROUT     CHECK IF THIS IS FOR REMOTE\n         BNE   NEXTJOE             NO GO GET NEXT JOE\n         SPACE 1\nCKROUT2  L     JQEBAR,JOEJQE       GET JQE  OFFSET              JOR0585\n         N     JQEBAR,$ZEROFFF     CLEAR FLAG BYTE              JOR0585\n         AL    JQEBAR,$JOBQPTR     GET JQE ADDR                 JOR0585\n         L     CHRJOBAR,JOECHAR    GET CHAR JOE OFFSET          JOR0585\n         N     CHRJOBAR,$ZEROFFF   CLEAR FLAG BYTE              JOR0585\n         BZ    NEXTJOE             NO CHAR JOE THEN SKIP IT\n         ALR   CHRJOBAR,JOTBAR     GET CHAR JOE ADDR            JOR0585\n*   CHECK FOR MATCH ON JOB NUMBER OR FORM AS NEEDED\n         SR    R1,R1               CLEAR REG                    JOR0585\n         ICM   R1,B'0011',CJHJOB   LOAD JOB NUMBER INTO REG     JOR0585\n         BZ    FORMCHK             IF ZERO GO PROCESS FORM CODE\n         CLM   R1,B'0011',JQEJOBNO COMPARE JOB NUMBER           JOR0585\n         BE    CJSSEG              GOT IT FORMAT LINE\n         B     NEXTJOE             TRY THE NEXT JOE\nFORMCHK  CLC   CJJFORMS,JOEFORM-JOE(CHRJOBAR) CK FORM CODE         J215\n         BE    CJSSEG              GOT IT\n         CLI   CJJFORMS,X'F9'      LOOKING FOR ACTIVE JOBS\n         BH    CJSSEG              YES.  GO PROCESS\n         B     NEXTJOE             TRY  NEXT\nNEXTCLS  CLI   CJJFORMS,X'FE'      LOOKING FOR SPECIAL CLASS\n         BE    CJNOJOP             YES GOTO NORMAL END\n         LA    CLSBAR,4(,CLSBAR)   BUMP TO NEXT CLASS           JOR0585\n         LA    JOEBAR,JOTCLSQ+JOTCLSSZ-(JOENEXT-JOE)               J215\n         CLR   CLSBAR,JOEBAR       ARE WE AT END OF QUEUE?      JOR0585\n         BNL   CJNOJOP             Y: NORMAL END\n         B     CKCLS               N: PROCESS NEXT CLASS\n         EJECT\n**********************************************************************\n*                                                                    *\n*      FORMAT JOE INFORMATION FOR DISPLAY                            *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nCJSSEG   DS    0H\n         CLI   CJJFORMS,X'FF'     LOOKING FOR ACTIVE JOBS ONLY\n         BNE   SKIP000            IF NOT BYPASS ACTIVE CHECK\n         TM    JOEFLAG1,JOE1BUSY   IS THIS JOE BUSY?               J215\n         BZ    FMTEXIT            NO.   GOTO EXIT\n         SPACE 2\nSKIP000  DS    0H\n         MVC   COMMAND(L'DFCON),DFCON MOVE IN OVERLAY\n* JOB TYPE (JOB, STC, TSU)                                      JOR0585\n         MVC   COMDWORK(1),JQEFLAG3 COPY JQE FLAG3              JOR0585\n         NI    COMDWORK,JQE3JOB   OFF ALL BUT JOB TYPE FLAGS       J215\n         XR    R1,R1              CLEAR TYPE TBL INDEX REG      JOR0585\n         IC    R1,COMDWORK        FLAGS INTO INDEX REG          JOR0585\n         SLL   R1,1               MULT FLAG VALUE BY 2          JOR0585\n         LA    R1,JOBTYPES(R1)    PT TO APPROP TYPE LIT         JOR0585\n         MVC   COMMAND+DFCTYPE(L'DFCTYPE),0(R1)                 JOR0585\n* JOB NUMBER                                                    JOR0585\n         LH    R0,JQEJOBNO        GET JOB NUMBER                JOR0585\n        $CFCVE VALUE=(R0)         CONVERT TO EBCDIC             JOR0585\n         MVC   COMMAND+DFCJNUM(L'DFCJNUM),COMDWORK+1 JOB NUM    JOR0585\n* JOBNAME                                                       JOR0585\n         MVC   COMMAND+DFCJOBN(L'DFCJOBN),JQEJNAME JOBNAME      JOR0585\n* CLASS                                                         JOR0585\n         MVC   COMMAND+DFCCLASS(L'DFCCLASS),JOECURCL CLASS      JOR0585\n* PRIORITY                                                      JOR0585\n         LH    R0,JOEPRIO          GET PRIORITY                 JOR0585\n         LTR   R0,R0               CHECK IF ZERO\n         BNZ   *+8                 BRANCH IF JOE PRIO NOT ZERO\n         IC    R0,JQEPRIO          USE JQE PRIORITY             JOR0585\n         SRL   R0,4                SHIFT FOUR BITS\n        $CFCVE VALUE=(R0)          CONVERT TO EBCDIC            JOR0585\n         MVC   COMMAND+DFCPRIO(L'DFCPRIO),COMDWORK+2 PRIORITY   JOR0585\n* FORMS                                                         JOR0585\n         MVC   COMMAND+DFCFORM(L'DFCFORM),JOEFORM-JOE(CHRJOBAR)    J215\n* FCB                                                           JOR0585\n         MVC   COMMAND+DFCFCB(L'DFCFCB),JOEFCB-JOE(CHRJOBAR)       J215\n* WTR ONLY IF NONBLANK (OVERLAYS REC COUNT)                     JOR0585\n         CLC   =C'        ',JOEWTRID-JOE(CHRJOBAR) BLANK?          J215\n         BE    SKIP001             BRANCH AROUND WTRID MOVE\n         CLI   CJJFORMS,X'FD'      LOOKING FOR PIGS\n         BE    FMTEXIT             YES EXIT WITHOUT PRINTING\n***      MVC   COMMAND+DFCREC#(L'DFCREC#),$BLANKS BLANK COUNT   JOR0585\n         MVC   COMMAND+DFCWTR(L'DFCWTR),JOEWTRID-JOE(CHRJOBAR)     J215\n         B     SKIP002\nSKIP001  EQU   *                                                JOR0585\n* REC COUNT                                                     JOR0585\n         ICM   R1,15,JOERECCT      LOAD RECORD COUNT\n         CLI   CJJFORMS,X'FD'      LOOKING FOR PIGS\n         BNE   SKIP001A            NO BYPASS\n         C     R1,=F'250000'       COMPARE TO 250,000\n         BL    FMTEXIT             LOW EXIT\nSKIP001A TM    JOEFLAG2,JOE2SLEC   IS SELECT FLAG ON               J215\n         BO    SKIP001B            YES PROCESS AS HOLD\n         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1 JOB HELD?                J215\n         BZ    CHKBUSY             BRANCH TO NEXT CHECK\nSKIP001B MVI   COMMAND+DFCJSTX+1,C'H' MOVE IN HELD INDICATOR    JOR0585\n         B     SETLNCNT            CONTINUE                     JOR0585\nCHKBUSY  TM    JOEFLAG1,JOE1BUSY   TEST FOR BUSY                   J215\n         BZ    SETLNCNT            CONTINUE                     JOR0585\n         MVI   COMMAND+DFCJSTX,C'A' MOVE IN BUSY INDICATOR      JOR0585\n         MVC   COMMAND+DFCJSTX+1(1),JOEFLAG1 FLAG TO LINE          J215\n         NI    COMMAND+DFCJSTX+1,JOE1BUSY OFF ALL BUT SYSID        J215\n         OI    COMMAND+DFCJSTX+1,X'F0' MAKE PRINTABLE           JOR0585\nSETLNCNT EQU   *                   PROCESS LINE COUNT           JOR0585\n         XR    R0,R0              PREPARE FOR POSSIBLE DIVIDE   JOR0585\n         C     R1,=F'99999'       NUMBER FITS INTO DISPLAY?     JOR0585\n         BNH   DISPLCNT           Y: DISPLAY AS IS              JOR0585\n         A     R1,=F'500'         ADD 500 FOR ROUNDING          JOR0585\n         D     R0,=F'1000'        REDUCE BY A THOUSAND          JOR0585\n         MVI   COMMAND+DFCREC#F,C'K' INDICATE THOUSANDS FACTOR  JOR0585\n         C     R1,=F'99999'       NUMBER FITS INTO DISPLAY?     JOR0585\n         BNH   DISPLCNT           Y: DISPLAY AS IS              JOR0585\n         A     R1,=F'500'         ADD 500 FOR ROUNDING          JOR0585\n         XR    R0,R0              PREPARE FOR SECOND DIVIDE     JWT0788\n         D     R0,=F'1000'        REDUCE BY A THOUSAND          JOR0585\n         MVI   COMMAND+DFCREC#F,C'M' INDICATE MILLIONS FACTOR   JOR0585\nDISPLCNT CVD   R1,COMDWORK        CONVERT LINE CONT TO DECIMAL  JOR0585\n         MVC   COMMAND+DFCREC#-1(6),=X'402020202120' EDIT PAT   JOR0585\n         ED    COMMAND+DFCREC#-1(6),COMDWORK+5 EDIT LINE COUNT  JOR0585\n         MVI   COMMAND+DFCREC#-1,C'=' REPLACE EQUAL SIGN        JOR0585\nSKIP002  EQU   *                                                JOR0585\n* JOE SEGMENT/GROUP IDS                                         JOR0585\n         MVC   COMMAND+DFCOGID(L'JOENAME),JOENAME SEG ID        JOR0585\n         SPACE 1                                                JOR0585\n         LH    R0,JOEID1          GET JOE GROUP 1ST ID          JOR0585\n         BAL   R14,DSPJOEID       PUT ID INTO DISPLAY           JOR0585\n         LH    R0,JOEID2          GET JOE GROUP 2ND ID          JOR0585\n         BAL   R14,DSPJOEID       PUT ID INTO DISPLAY           JOR0585\n         SPACE 2\n         LA    R0,COMMAND+L'DFCON+1 END OF MESSAGE\n         TRT   COMMAND+DFCOGID(DFCTRTL),BLANKTRT FIND A BLANK   JOR0585\n         BZ    DISPLIT            NO BLANK: USE END OF LINE     JOR0585\n         LR    R0,R1              COPY PTR TO BLANK             JOR0585\nDISPLIT  BAL   R14,CJKPRNT         DISPLAY A LINE               JOR0585\n         SPACE 2\n         CLI   CJJFORMS,X'F9'      CHECKING FOR ACTIVE ONLY\n         BH    FMTEXIT             YES BYPASS SECOND LINE\n         SPACE 2\n         MVC   COMMAND(L'DFCON1),DFCON1  MOVE IN OVERLAY\n         MVI   COMDWORK,C'N'       SET DEFAULT VALUE OF NO\n         CLI   JOEUCS-JOE(CHRJOBAR),C'A' CHK FOR UCS               J215\n         BL    SKIP003             FLAG 2ND LINE TO PRINT\n         MVI   COMDWORK,C'Y'       REQ PRINT 2ND LINE\n         MVC   COMMAND+28(4),JOEUCS-JOE(CHRJOBAR) JOE UCS          J215\nSKIP003  TM    JOEFLAGC-JOE(CHRJOBAR),JOEFCBRT CK FOR BURST        J215\n         BNO   SKIP004             IF OFF LEAVE AS NO\n         MVI   COMDWORK,C'Y'       FLAG 2ND LINE TO PRINT\n         MVI   COMMAND+17,C'Y'     SET BURST TO YES\nSKIP004  CLI   JOEFLASH-JOE(CHRJOBAR),C'A' CHK FOR FLSH            J215\n         BL    SKIP005             NO SKIP AROUND MOVE\n         MVI   COMDWORK,C'Y'       FLAG 2ND LINE TO PRINT\n         MVC   COMMAND+21(4),JOEFLASH-JOE(CHRJOBAR) FLASH          J215\nSKIP005  CLI   COMDWORK,C'Y'       PRINT 2ND LINE?              JOR0585\n         BNE   FMTEXIT             N: BYPASS PRINT              JOR0585\n         LA    R0,COMMAND+L'DFCON1                              JOR0585\n         BAL   R14,CJKPRNT         DISPLAY A LINE               JOR0585\n         SPACE 2\nFMTEXIT  DS    0H                  EXIT ADDRESSABILITY\n         B     NEXTJOE             RETURN AFTER LINE FORMATING\n         SPACE 2\n**********************************************************************\n*                                                                    *\n*        END OF PASS THROUGH ALL JOES                                *\n*                                                                    *\n**********************************************************************\n         SPACE 2\nCJNOJOP  TM    CJFLAGS,CJJOEOK     DID WE FIND ANY\n         BZ    CJEMPTY             EXIT WITH DIAGNOSTIC IF NO\n         B     X005RC08            RETURN\n         SPACE 2\nCJEMPTY  CLI   CJJFORMS,X'FF'      ARE WE LOOKING FOR ACTIVE\n         BE    MSG666              YES RETURN WITH NO JOBS MSG\n         SPACE 2\n         $CRET MSG=CJMPRT,L=L'CJMPRT,MSGID=619\n         SPACE 2\nCJMPRT   DC    CL16'NO OUTPUT QUEUED'\n         SPACE 3                                                JOR0585\nDSPJOEID EQU   *                  DISPLAY JOE ID                JOR0585\n         ST    R14,PCEUSER0       SAVE LINK REG                 JOR0585\n        $CFCVE VALUE=(R0)         CONVERT TO EBCDIC             JOR0585\n         TRT   COMMAND+DFCOGID(DFCTRTL),BLANKTRT FIND A BLANK   JOR0585\n         MVI   0(R1),C'.'         ID SEPARATOR                  JOR0585\n         LA    R15,COMDWORK       PT TO CONVERTED NUMBER        JOR0585\n         LA    R0,5               MAX NUMBER DIGITS             JOR0585\nJOEIDLP  CLI   0(R15),C'0'        NON-BLANK FOUND?              JOR0585\n         BL    JOEIDLPX           N: SKIP IT                    JOR0585\n         MVC   1(1,R1),0(R15)     DIGIT TO DISPLAY              JOR0585\n         LA    R1,1(,R1)          PT TO NEXT LOC                JOR0585\nJOEIDLPX LA    R15,1(,R15)        PT TO NEXT DIGIT              JOR0585\n         BCT   R0,JOEIDLP         GET NEXT DIGIT                JOR0585\n         L     R14,PCEUSER0       RESTORE LINK REG              JOR0585\n         BR    R14                RETURN TO CALLER              JOR0585\n         EJECT\n***********************************************************************\n*                                                                     *\n*   SUBROUTINE -- COFRTD  (DEFAULT RANGE CONVERSION)                  *\n*   ----------                                                        *\n*       THIS ROUTINE TAKES A ROUTE CODE FROM THE COMWORK AREA         *\n*   AND RETURNS A MAXIMUM RANGE IF IT ISN'T A REMOTE WORKSTATION.     *\n*   OTHERWISE, IT CHECKS FOR OUR NODE, AND IF IT IS, IT LOOKS UP      *\n*   THE REMOTE NUMBER IN THE RAT AND RETURNS IT AS THE HIGH AND       *\n*   LOW BOUND ANSWER.                                                 *\n*                                                                     *\n* REGISTERS      ENTRY                 EXIT                           *\n* ---------      -----                 ----                           *\n*   R0      -     N/A              HIGH BOUND ANSWER                  *\n*   R1      -     N/A              LOW BOUND ANSWER                   *\n*   R11     -   HCT POINTER          UNCHANGED                        *\n*   R14     -   RETURN ADDR          UNCHANGED                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                   SPR2\nCOFRTD   L     R1,COMJROUT         PICK UP DEFAULT ROUTE CODE      SPR2\n         LR    R0,R1               COPY                              R4\n         TM    COMFLAG,CMBFLAGW    THIS REMOTE WORKSTATION           R4\n         BO    COFRTDRW            LOOK AT REMOTE WORKSTATION IF YES R4\n         AL    R0,=A($MAXRJE)      SET HIGH RANGE              @OZ52738\n         B     COFRTD1             RETURN                            R4\n         SPACE 1                                                   SPR2\nCOFRTDRW CLM   R1,B'1100',$OWNNODE  THIS OUR NODE                  SPR2\n         BNE   COFRTD1             RETURN IF NOT                   SPR2\n         LH    R1,COMJRMT          LOAD REMOTE NUMBER              SPR2\n         BCTR  R1,0                REDUCE BY ONE                     R4\n         MH    R1,=Y(RATTLE)       GET OFFSET                        R4\n         AL    R1,$RATABLE         POINT TO RAT ELEMENT              R4\n         L     R0,RATROUTE-RAT(,R1) PICK UP RMT ROUTING   @OZ52738 J215\n         LR    R1,R0               MAKE A COPY OF IT               SPR2\n         SPACE 2\nCOFRTD1  DS    0H                  GET ADDRESSABILITY\n         LR    R2,R1              SAVE LOW BOUND ONLY\n         LR    R15,R2               COPY ROUTING                JOR0585\n         NI    CJFLAGS,FF-CJJOEOK-CJSTC-CJTSU\n         STCM  R2,B'1111',CJEROUT SAVE END ROUTE\n         ST    R15,CJCROUT        SAVE STARTING ROUTE           JOR0585\n         STCM  R15,15,CJSVRT      SAVE STARTING ROUTE           JOR0585\n         BR    R14                RETURN\n         EJECT\n**********************************************************************\n*                                                                    *\n*        CONVERT JOB NUMBER TO BINARY                                *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nCVTJNUM  LA    R1,4                LOAD MAX OF FOUR DIGITS\n         SR    R2,R2               CLEAR ACCUMULATOR\n         LA    R15,COMMAND+3       LOAD START OF JOB NUMBER\nLOOPNUM  CLI   0(R15),C'0'         IS THIS A NUMBER\n         BL    CJMSG650            IF BELOW ZERO BAD NUMBER\n         CLI   0(R15),C'9'         IS THIS A NUMBER\n         BH    CJMSG650            IF ABOVE NINE BAD NUMBER\n         IC    R0,0(R15)           LOAD NUMBER INTO REGISTER\n         N     R0,=X'0000000F'     STRIP HIGH ORDER BITS\n         AR    R2,R0               ADD TO ACCUMULATOR\n         CLI   1(R15),C' '         IF BLANK RETURN TO CALLER\n         BER   R14                 RETURN\n         LA    R15,1(R15)          BUMP TO NEXT CHARACTER\n         MH    R2,=H'10'           MULTIPLY BY 10\n         BCT   R1,LOOPNUM          CHECK FOR 4 DIGITS\nNUMERR   B     CJMSG650            WRITE ERROR MESSAGE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DISPLAY A LINE                                               *\n*                                                                     *\n***********************************************************************\nCJKPRNT  EQU   *                                                JOR0585\n         ST    R14,PCEUSER0       SAVE LINK REG                 JOR0585\n         OI    CJFLAGS,CJJOEOK     INDICATE THAT WE HAD A HIT\n         LA    R1,COMMAND          PT TO START OF LINE          JOR0585\n         SR    R0,R1               GET COUNT\n         $CWTO L=(R0)\n         NI    CJFLAGS,FF-CJSOMJO TURN OFF FLUSH BIT\n         L     R14,PCEUSER0       RESTORE LINK REG              JOR0585\n         BR    R14                 RETURN                       JOR0585\n         EJECT\n***************************************************************\n*                                                             *\n*        PUT OUT INVALID OPERAND MESSAGE                      *\n*                                                             *\n***************************************************************\nCJMSG650 LA    R1,COMMAND+3        POINT TO OPERAND\n         MVC   COMMAND(9),0(R1)    INVALID OPERAND\n         MVC   COMMAND+9(16),=C' INVALID OPERAND'\n         $CRET L=25\n         SPACE 1\n         DROP  JOEBAR,JQEBAR,JOTBAR DISABLE DSECTS              JOR0585\n         EJECT\n*FCON    DC C'X        X        P=   OG=    .     F=     C=     Q=  L= X\n                      '\nDFCON    DC C'YNNNN J        P=    F=         C=     Q=   L=       OG= *\n                                 '                              JOR0585\n* OFFSETS TO FIELDS IN CONSOLE LINE                             JOR0585\nDFCTYPE  EQU   00,1               JOB TYPE (JOB, STC, TSU)      JOR0585\nDFCJNUM  EQU   01,4               JOB NUMBER                    JOR0585\nDFCJOBN  EQU   06,8               JOBNAME                       JOR0585\nDFCPRIO  EQU   17,3               PRIORITY                      JOR0585\nDFCFORM  EQU   23,8               FORMS                         JOR0585\nDFCFCB   EQU   34,4               FCB                           JOR0585\nDFCCLASS EQU   41,1               CLASS                         JOR0585\nDFCWTR   EQU   43,8               WTR IF SPEC'D                 JOR0585\nDFCJSTX  EQU   43,2               JOB STATUS (A#, H, OR L)      JOR0585\nDFCREC#  EQU   46,5               REC COUNT                     JOR0585\nDFCREC#F EQU   51,1               REC COUNT FACTOR (NULL, K, M) JOR0585\nDFCOGID  EQU   56                 SEG/GROUP IDS                 JOR0585\nDFCTRTL  EQU   L'DFCON-DFCOGID    MAX LENGTH OF BLANK TRT       JOR0585\n         SPACE 1\nDFCON1   DC C'               B=N O=**** T=****'\n         SPACE 1                                                JOR0585\nJOBTYPES DC    C'J S T '          JOB TYPES\n         SPACE 1                                                JOR0585\nBLANKTRT EQU   *-C' '             TRT TBL TO FIND BLANK         JOR0585\n         DC    C' '               MARK BLANK                    JOR0585\n         DC    XL(C'9'-C' ')'00'  OTHER CHARS NULL              JOR0585\n***********************************************************************\n*                                                                     *\n*        MISCELLANEOUS                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCJJFORMS EQU   COMPNTER,4         FORMS CHARACTERISITCS\n         SPACE 1\n*        FLAG SETTINGS FOR CJFLAGS\n         SPACE 1\nCJJOEOK  EQU   B'10000000'        AT LEAST ONE JOE HAD INFO\nCJSOMJO  EQU   B'01000000'        THIS JOE HAS SOME TO DISPLAY\nCJ00001  EQU   B'00100000'        RESERVED FOR FUTURE USE\nCJ00002  EQU   B'00010000'        RESERVED FOR FUTURE USE\nCJ00003  EQU   B'00001000'        RESERVED FOR FUTURE USE\nCJANYJ   EQU   B'00000011'        DISPLAY ANY ELIGIBLE JOB\nCJTSU    EQU   B'00000010'        DISPLAY ONLY ELIGIBLE TSUS\nCJSTC    EQU   B'00000001'        DISPLAY ONLY ELIGIBLE STCS\nCJJOB    EQU   B'00000000'        DISPLAY ONLY ELIGIBLE JOBS\n         SPACE 2\nCJREGS2  EQU   COMREGSV+4,4       REGISTER SAVE AREA\nCJFLAGS  EQU   COMREGSV+8,1       FLAGS\nCJEROUT  EQU   COMREGSV+12,4      LAST ROUTING\nCJHJOB   EQU   COMREGSV+22,2      HIGH JOB NUMBER RANGE\nCJSVRT   EQU   COMREGSV+24,4      CURRENT ROUTING\nCJCROUT  EQU   COMREGSV+28,4      CURRENT ROUTING\n         SPACE 2\n         LTORG\n         TITLE 'HASP COMMAND PROCESSOR HASPRES --   RESOURCE COMMAND'\n***************************************************************\n*  THIS COMMAND WILL DISPLAY THE CURRENT UTILIZATION OF       *\n*  JES2 RESOURCES.                                            *\n*                                                             *\n*  THIS COMMAND WAS COPIED FROM MELLON BANK MODS 133/134      *\n*                                                             *\n***************************************************************\n         SPACE 2\nHASPRES  $COMGRUP DRES,JK\n         SPACE 2\nCDRES    DS    0H                        ROUTINE ENTRY POINT\n         MVC   COMMAND(L'CDRESHDR),CDRESHDR      SET TITLE        MB082\n        $CWTO  L=30                WRITE-TO-OPERATOR              MB082\n         MVI   COMMAND,C' '        BLANK OUT                      MB082\n         MVC   COMMAND+1(29),COMMAND     WORKAREA                 MB082\n***                                                               MB082\n         MVC   COMMAND+2(4),=C'LBUF'     *** LBUF ***             MB082\n         L     R5,$BFRMAP                POINT AT LBUF BMP        MB082\n         LH    R5,BPMBUFCT-BPM(,R5) GET AVAILABLE LBUF CNT         J215\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082\n         LH    R5,$NUMBUF                GET CNT OF LBUFS DEFINED MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082\n        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082\n***                                                               MB082\n         MVC   COMMAND+2(4),=C'TPBF'     *** TPBF ***             MB082\n         L     R5,$TPBFMAP               POINT AT TPBF BMP        MB082\n         LH    R5,BPMBUFCT-BPM(,R5) GET AVAILABLE TPBF CNT         J215\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082\n         LH    R5,$NUMTPBF               GET CNT OF TPBFS DEFINED MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082\n        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082\n***                                                               MB082\n         MVC   COMMAND+2(4),=C'CMBS'     *** CMBS ***             MB082\n         LH    R5,$CMBFREC               GET CNT OF AVAIL. CMBS   MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082\n         LH    R5,$NUMCMBS               GET CNT OF CMBS DEFINED  MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082\n        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082\n***                                                               MB082\n         MVC   COMMAND+2(4),=C'SMFB'     *** SMFB ***             MB082\n         LH    R5,$SMFFREC               GET CNT OF AVAIL. SMFBS  MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082\n         LH    R5,$NUMSMFB               GET CNT OF SMFBS DEFINED MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082\n        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082\n***                                                               MB082\n         MVC   COMMAND+2(4),=C'TGS '     *** TGS  ***             MB082\n         L     R6,$TGTOTAL               R6 =  TGS DEFINED        MB082\n         L     R5,$TGALLOC               R5 =  TGS ALLOCATED      MB082\n         CVD   R6,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082\n         SR    R6,R5                     R6 =  TGS AVAILABLE      MB082\n         CVD   R6,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082\n        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082\n***                                                               MB082\n         MVC   COMMAND+2(4),=C'JQES'     *** JQES ***             MB082\n         LH    R5,$JQEFREC               GET CNT OF AVAIL. JQES   MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082\n         LH    R5,$MAXJOBS               GET CNT OF JQES DEFINED  MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082\n        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082\n***                                                               MB082\n         MVC   COMMAND+2(4),=C'JOES'     *** JOES ***             MB082\n         L     R5,$JOTABLE               R5 => JOT                MB082\n         LH    R5,JOTFREC-JOT(,R5)  GET CNT OF AVAIL. JOES         J215\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+12(L'CJEDIT),$DWORK+5 EDIT AVAILABLE COUNT MB082\n         LH    R5,$NUMJOES               GET CNT OF JOES DEFINED  MB082\n         CVD   R5,$DWORK                 TO PACKED                MB082\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT      MOVE IN EDIT PTRN MB082\n         ED    COMMAND+23(L'CJEDIT),$DWORK+5 EDIT DEFINED COUNT   MB082\n        $CWTO  L=30                      WRITE-TO-OPERATOR        MB082\n***                                                               MB082\n         B     X005RC08                  RETURN TO MAINLINE HASP  MB082\nCDRESHDR DC    CL30'RESOURCE   AVAILABLE   DEFINED'               MB082\nCJEDIT   DC    X'402020212020' GENERAL EDIT PATTERN\n         SPACE 1                                                  MB082\n         LTORG ,                   EXPAND LITERAL POOL            MB082\n         TITLE 'HASP COMMAND PROCESSOR HASPRES --   TGS UTILIZATION'\n***************************************************************\n*   THIS ROUTINE WILL DISPLAY THE TGS IN USE AND ALSO THE     *\n*   RANGE INTO WHICH THEY FALL.  THE SIZE OF A TG IS EST.     *\n*   TO BE 5500 LINES THIS VALUE CAN BE ADJUSTED, IF THE       *\n*   TGS IN USE DO NOT AGREE WITH THE SYSTEM COUNT OF TGS USED.*\n*                                                             *\n*   RANGE 1..       0 -   5000  LINES                         *\n*   RANGE 2..    5001 -  20000  LINES                         *\n*   RANGE 3..   20001 -  50000  LINES                         *\n*   RANGE 4..   50001 - 150000  LINES                         *\n*   RANGE 5..  150001 -  ---->  LINES                         *\n*                                                             *\n***************************************************************\n         SPACE 2\nCJK      DS    0H                 SET ADDRESSABILITY\n         MVC   SPACSEG1(3),SPACZERO CLEAR RANGE 1 SEGMENT CNT\n         MVC   SPACTGS1(3),SPACZERO CLEAR RANGE 1 TGS COUNTER\n         MVC   SPACSEG2(3),SPACZERO CLEAR RANGE 2 SEGMENT CNT\n         MVC   SPACTGS2(3),SPACZERO CLEAR RANGE 2 TGS COUNTER\n         MVC   SPACSEG3(3),SPACZERO CLEAR RANGE 3 SEGMENT CNT\n         MVC   SPACTGS3(3),SPACZERO CLEAR RANGE 3 TGS COUNTER\n         MVC   SPACSEG4(3),SPACZERO CLEAR RANGE 4 SEGMENT CNT\n         MVC   SPACTGS4(3),SPACZERO CLEAR RANGE 4 TGS COUNTER\n         MVC   SPACSEG5(3),SPACZERO CLEAR RANGE 5 SEGMENT CNT\n         MVC   SPACTGS5(3),SPACZERO CLEAR RANGE 5 TGS COUNTER\n         EJECT\n***************************************************************\n*     SCAN THE JOES AND TEST THE LINE COUNT FOR THE PROPER    *\n*     RANGE.   ALSO CHECK AND BYPASS ANY SEGMENTS THAT ARE    *\n*     FOR THE BACKUP WRITER.                                  *\n*                                                             *\n***************************************************************\n         SPACE 2\n         USING JOT,R7                                              J215\n         USING JOE,R1                                              J215\n         SPACE 2\n         L     R7,$JOTABLE        LOAD THE JOT ADDRESS\n         LA    R3,JOTRDYWQ-(JOENEXT-JOE) LOAD START OF QUE         J215\nCJCKCLS  LR    R1,R3              LOAD START OF CLASS QUE\nCJTNXTJ  L     R1,JOENEXT\n         N     R1,$ZEROFFF        CLEAR BITS\n         BZ    CJNEXTC            IF ZERO GET NEXT QUE\n         ALR   R1,R7              ADD JOT ADDRESS TO OFFSET\n         CLC   JOERNODE,$OWNNODE  IS THIS FOR HERE\n         BNE   SPACCJ1            IF NOT FOR HERE FOR PROCESS\n         CLC   JOEREMOT,$NUMRJE   IS THIS FOR BWTR\n         BE    CJTNXTJ            YES GO PROCESS NEXT JOE\n         SPACE 2\n*        PROCESS OUTPUT RANGE\nSPACCJ1  SR    R14,R14            CLEAR REG 14\n         L     R15,JOERECCT       LOAD RECORD COUNT\n         LH    R4,$TGSIZE         BUFFERS PER TRACK GROUP\n         DR    R14,R4             DIVIDE BY BUFF PER TG\n         SR    R14,R14            CLEAR REG FOR DIVIDE\n         D     R14,SPACCNST       DIVIDE LINES PER BUFFER\n         LA    R15,1(R15)         ADD ONE FOR INCOMPLETE TG\n         SPACE 2\n         CVD   R15,$DWORK         CONVERT TGS COUNT\n         CH    R15,=H'1'          COMPARE FOR RANGE 1\n         BH    SPACR2\n         AP    SPACSEG1(3),SPACONE BUMP COUNT BY ONE\n         AP    SPACTGS1(3),$DWORK+5(3)\n         B     CJTNXTJ            GO PROCESS NEXT JOE\nSPACR2   DS    0H\n         CH    R15,=H'5'          COMPARE FOR RANGE 2\n         BH    SPACR3\n         AP    SPACSEG2(3),SPACONE BUMP COUNT BY ONE\n         AP    SPACTGS2(3),$DWORK+5(3)\n         B     CJTNXTJ            GO PROCESS NEXT JOE\nSPACR3   DS    0H\n         CH    R15,=H'25'         COMPARE FOR RANGE 3\n         BH    SPACR4\n         AP    SPACSEG3(3),SPACONE BUMP COUNT BY ONE\n         AP    SPACTGS3(3),$DWORK+5(3)\n         B     CJTNXTJ            GO PROCESS NEXT JOE\nSPACR4   DS    0H\n         CH    R15,=H'125'        COMPARE FOR RANGE 4\n         BH    SPACR5\n         AP    SPACSEG4(3),SPACONE BUMP COUNT BY ONE\n         AP    SPACTGS4(3),$DWORK+5(3)\n         B     CJTNXTJ            GO PROCESS NEXT JOE\nSPACR5   DS    0H\n         AP    SPACSEG5(3),SPACONE BUMP COUNT BY ONE\n         AP    SPACTGS5(3),$DWORK+5(3)\n         B     CJTNXTJ            GO PROCESS NEXT JOE\n         SPACE 3\nCJNEXTC  DS    0H\n         LA    R3,4(R3)           BUMP TO NEXT CLASS\n         LA    R1,JOTCLSQ+JOTCLSSZ-(JOENEXT-JOE)                   J215\n         CLR   R3,R1              ARE WE AT END OF QUEUE\n         BNL   CJWTO              AT END GO WRITE TO OPERATOR\n         B     CJCKCLS\n         EJECT\nCJWTO    DS    0H                      WRITE TO OPERATOR\n         MVC   COMMAND(L'CJTGHDR1),CJTGHDR1 SET TITLE 1\n         $CWTO L=30                    WRITE-TO-OPERATOR\n         MVC   COMMAND(L'CJTGHDR2),CJTGHDR2 SET TITLE 2\n         $CWTO L=30                    WRITE-TO-OPERATOR\n         MVI   COMMAND,C' '            BLANK OUT\n         MVC   COMMAND+1(29),COMMAND      WORKAREA\n         SPACE 3\n***\n         MVC   COMMAND+1(7),=C'000-001'\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+12(L'CJEDIT),SPACSEG1 EDIT SEGMENT COUNT\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+23(L'CJEDIT),SPACTGS1 EDIT TGS COUNT\n         $CWTO L=30\n         SPACE 3\n***\n         MVC   COMMAND+1(7),=C'002-005'\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+12(L'CJEDIT),SPACSEG2 EDIT SEGMENT COUNT\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+23(L'CJEDIT),SPACTGS2 EDIT TGS COUNT\n         $CWTO L=30\n         SPACE 3\n***\n         MVC   COMMAND+1(7),=C'006-025'\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+12(L'CJEDIT),SPACSEG3 EDIT SEGMENT COUNT\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+23(L'CJEDIT),SPACTGS3 EDIT TGS COUNT\n         $CWTO L=30\n         SPACE 3\n***\n         MVC   COMMAND+1(7),=C'026-125'\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+12(L'CJEDIT),SPACSEG4 EDIT SEGMENT COUNT\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+23(L'CJEDIT),SPACTGS4 EDIT TGS COUNT\n         $CWTO L=30\n         SPACE 3\n***\n         MVC   COMMAND+1(7),=C'126-UP '\n         MVC   COMMAND+12(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+12(L'CJEDIT),SPACSEG5 EDIT SEGMENT COUNT\n         MVC   COMMAND+23(L'CJEDIT),CJEDIT MOVE IN EDIT PATTERN\n         ED    COMMAND+23(L'CJEDIT),SPACTGS5 EDIT TGS COUNT\n         $CWTO L=30\n***\n         B     X005RC08           RETURN\n         EJECT\nSPACCNST DC    F'33'\nSPACZERO DC    PL3'0'\nSPACONE  DC    PL3'1'\nCJTGHDR1 DC    CL30'      TRACK GROUP USAGE'\nCJTGHDR2 DC    CL30' RANGE   SEGMENT   TOTAL TGS '\nSPACSEG1 EQU   COMMAND+160\nSPACTGS1 EQU   COMMAND+163\nSPACSEG2 EQU   COMMAND+166\nSPACTGS2 EQU   COMMAND+169\nSPACSEG3 EQU   COMMAND+172\nSPACTGS3 EQU   COMMAND+175\nSPACSEG4 EQU   COMMAND+178\nSPACTGS4 EQU   COMMAND+181\nSPACSEG5 EQU   COMMAND+184\nSPACTGS5 EQU   COMMAND+187\n         TITLE 'HASP COMMAND PROCESSOR HASPQCTL -- QCONTROL COMMANDS'\n***********************************************************************\n*                                                                     *\n*        QUEUE CONTROL COMMANDS                                       *\n*                                                                     *\n*        $T K,H=HOLDTIME,M=MINDORM,X=MAXDORM,WAR2RN                   *\n*                                                                     *\n*        $D K  DISPLAY QUEUE CONTROL VALUES                           *\n*                                                                     *\n***********************************************************************\nHASPQCTL $COMGRUP DK,TK\n         SPACE 2\nCTK      BXH   R5,R6,CTKINVOX      / B IF NO PARM'S\nCTKMO    L     R1,0(R5)            ADDR OF THIS PARM\n         CLI   1(R1),C'='          ENSURE PROPER FORMAT\n         BNE   CTKINVO             / IT IS NOT\n         $CFSEL (H,CTKH),(M,CTKM),(W,CTKW),(X,CTKX),OPERAND=(R1)\n         SPACE 2\n         B     CTKINVO\nCTKINVOX L     R1,0(R5)            ADDR OF INVALID PARM\nCTKINVO  MVC   COMMAND(9),0(R1)    INVALID OPERAND\n         MVC   COMMAND+9(16),=CL16' INVALID OPERAND'\n        $CRET  L=25\n         SPACE 1\nCTKH     LA    R4,$MINHOLD         ADDR OF HOLD PARM\n         B     CTKON               / GO CONVERT AND SET\n         SPACE 1\nCTKM     LA    R4,$MINDORM         ADDR OF MINDORM PARM\n         B     CTKON               / GO CONVERT AND SET VALUES\n         SPACE 1\nCTKW     LA    R4,$LOCKOUT         ADDR OF WARN PARM               J215\n         B     CTKON               / GO CONVERT AND SET\n         SPACE 1\nCTKX     LA    R4,$MAXDORM         ADDR OF MAXDORM PARM\nCTKON    $CFCVB POINTER=(R5),NOK=CTKINVOX\n         MH    R0,=H'100'          CONVERT TO HUNDRETHS\n         LNR   R0,R0               SET TO NEGATIVE VALUE\n         ST    R0,0(R4)            SET NEW QCONTROL VALUE\n         BXLE  R5,R6,CTKMO         / GO TRY FOR MORE\n* MAKE SURE CHECKPOINT PROCESSOR WAKES UP\n         L     R1,$CKPTPCE         ADDR OF CHECKPOINT PCE\n         DROP  R13                 KILL COMM PCE ADDRESSABILITY\n         USING PCE,R1         CKPT PCE ADDRESSABILITY              J215\n         $TTIMER CKPSTQE,CANCEL    DELETE FROM QUEUE\n         L     R1,$CKPTPCE         ADDR OF CHECKPOINT PCE\n         OI    CKPSTQE+TQEPCE,X'80' FAKE TIMER POP                 J215\n         DROP  R1                  KILL CKPT PCE ADDRESSABILITY\n         USING PCE,R13        BACK TO COMM PCE                     J215\n         $POST (R1),WORK           TELL HIM SOME WORK EXISTS\n         $POST $HASPECF,CKPTW      DO A CHECKPOINT WRITE           J215\n         EJECT\nCDK      MVC   COMMAND(CDKL),CDKMSG COMMAND RESPONSE SKELETON\n         L     R2,$LOCKOUT         R2RN VALUE                      J215\n         LPR   R2,R2               SET VALUE POSITIVE\n         CVD   R2,COMDWORK         TO PACKED\n         ED    CDKW,COMDWORK+4     TO EBCDIC\n*\n         L     R2,$MINHOLD         HOLD VALUE\n         LPR   R2,R2               SET VALUE POSITIVE\n         CVD   R2,COMDWORK         TO PACKED\n         ED    CDKH,COMDWORK+4     TO EBCDIC\n*\n         L     R2,$MINDORM         MINDORM VALUE\n         LPR   R2,R2               SET VALUE POSITIVE\n         CVD   R2,COMDWORK         TO PACKED\n         ED    CDKM,COMDWORK+4     TO EBCDIC\n*\n         L     R2,$MAXDORM         MAXDORM TIME\n         LPR   R2,R2               SET VALUE POSITIVE\n         CVD   R2,COMDWORK         TO PACKED\n         ED    CDKX,COMDWORK+4     TO EBCDIC\n*\n        $CRET  L=CDKL\n         SPACE 2\nCDKMSG   DC    C'WARN(W)='\nCDKWX    DC    X'4020202020214B2020'\nCDKW     EQU   COMMAND+CDKWX-CDKMSG,L'CDKWX\n         DC    C'  HOLD(H)='\nCDKHX    DC    X'4020202020214B2020'\nCDKH     EQU   COMMAND+CDKHX-CDKMSG,L'CDKHX\n         DC    C'  MINDORM(M)='\nCDKMX    DC    X'4020202020214B2020'\nCDKM     EQU   COMMAND+CDKMX-CDKMSG,L'CDKMX\n         DC    C'  MAXDORM(X)='\nCDKXX    DC    X'4020202020214B2020'\nCDKX     EQU   COMMAND+CDKXX-CDKMSG,L'CDKXX\nCDKL     EQU   *-CDKMSG            MSG LENGTH\n         TITLE 'HASP COMMAND PROCESSOR HASPTC -- $T CON RMT COMMANDS'\n***********************************************************************\n*                                                                     *\n*        ACCEPTS ABBREVIATED $T CON COMMANDS FROM REMOTE              *\n*                                                                     *\n*        RATHER THAN THE  $T RN.CON COMMAND THAT ALLOWS               *\n*                                                                     *\n*        REMOTE STATIONS TO MODIFY THEIR OWN CONSOLES.                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nHASPTC   $COMGRUP TC\n         SPACE 2\nCTC      DS    0H\n         TM    COMFLAG,CMBFLAGW    IS IT A REMOTE ENTRY?\n         BNO   X005RC00            / IF NOT\n         L     R1,0(,R5)           FIRST OPERAND\n         CLC   =CL3'CON',0(R1)     IS IT A 'CON' COMMAND?\n         BNE   X005RC00            / IF NOT\n         CLC   COMTONOD,$OWNNODE   IS THIS OUR OWN NODE?\n         BNE   X005RC08            / IF NOT\n         SPACE 1\n         LH    R2,COMJRMT          GET REMOTE NO.\n         BCTR  R2,0                   MINUS 1\n         MH    R2,=AL2(RATTLE)     COMPUTE RAT\n         AL    R2,$RATABLE            OFFSET\n         USING RAT,R2                                              J215\n         SPACE 1\n         BXLE  R5,R6,CTORSEL       EXAMINE IF MORE OPERANDS\nCTORSET  NI    RATCONF,255-RATCONFT-RATCONFJ  RESET OPTIONS\n         OC    RATCONF,COMNULOP    SET SELECTIONS\n        $CRET  MSG=OK              RETURN WITH 'OK' MESSAGE\n         SPACE 1\nCTORSEL  L     R1,0(0,R5)          POINT TO OPERAND\n         CLC   0(2,R1),=C'D='      CHECK FOR D=\n         BNE   CTINVO              ERROR IN OPERAND\n         CLI   2(R1),C'M'          IS IT AN 'M' REQUEST?\n         BNE   CTTSTJ              / IF NOT\n         B     CTORSET             GO SET FLAG FOR MSG TEXT ONLY.\n         SPACE 1\nCTTSTJ   CLI   2(R1),C'J'          IS IT A 'J' REQUEST?\n         BNE   CTTSTT              / IF NOT\n         OI    COMNULOP,RATCONFJ   GO SET TO DISPLAY JOB, TEXT FLAG\n         B     CTORSET             SET FLAG\n         SPACE 1\nCTTSTT   CLI   2(R1),C'T'          DISPLAY = T REQUEST?\n         BNE   CTINVS              / IF NOT - ERROR IN SELECT\n         OI    COMNULOP,RATCONFT   GO SET TO DISPLAY JOB, TEXT FLAG\n         B     CTORSET             SET FLAG\n         EJECT\nCTINVO  $CRET  MSG='INVALID OPERAND'\n         SPACE 1\nCTINVS  $CRET  MSG='INVALID DISPLAY SELECTION'\n         TITLE 'PURGE GOSH DARNIT COMMAND'\nHASPXJ   $COMGRUP XJ\nCXJ      DS    0H\nCXS      DS    0H\nCXT      DS    0H\n        $CFCVB POINTER=(R5),NOK=X005RC08\n         LR    R1,R0               JOB NUMBER\n        $QSUSE ,                  MAKE SURE NO CKPT IN PROGRESS JOR0585\n        $QLOC  (R1),X005RC08       FIND JQE\n         USING JQE,R1         JQE ADDRESSABILITY                   J215\n         BXH   R5,R6,X005RC08      EXIT IF NOT AT LEAST 2 OPERANDS\n         L     R2,0(R5)            ADDRESS OF PASSWORD\n         CLC   =C'SCPX',0(R2)      EXIT IF PASSWORD\n         BNE   X005RC08             NOT MATCHED\n         XC    JQEHLDCT,JQEHLDCT   ZERO HELD COUNT                 @133\n         NI    JQEFLAG3,FF-JQE3UNSP  TURN OFF UPSPUN FLAG          J215\n         NI    JQEFLAG1,FF-JQE1HLDA-JQE1HLD1-JQE1HLD2  RESET HOLD  J215\n         SPACE 1                                                   @133\n        $#CAN  JQE=(R1)            CANCEL ALL JOBS OUTPUT          @133\n         SPACE 1                                                   @133\n         LA    R0,$PURGE           QUEUE JOB FOR PURGE             @133\n        $QMOD  (R1),(R0)           PUT JOB ON PURGE QUEUE          @133\n         SPACE 1                                                   @133\n        $CRET  MSG=OK              RETURN WITH \"OK\"\n         DROP  R1\n         TITLE 'HASP COMMAND PROCESSOR HASPPS -- DRAIN SYSTEM' RGPNOV82\n***********************************************************************\n*                                                                     *\n*        IGNORE '$P ' COMMAND TO DRAIN SYSTEM.  DRAIN SYSTEM          *\n*                                                                     *\n*        ONLY WHEN '$P SYS' COMMAND IS RECEIVED.                      *\n*                                                                     *\n***********************************************************************\nHASPPS   $COMGRUP P,PSYS                                       RGPNOV82\n         SPACE 2                                               RGPNOV82\nCP40     DS    0H                                              RGPNOV82\n***      MVC   CP40CHAR(1),$CCOMCHR INSERT COMM CHAR IN MSG    RGPNOV82\n***      $CRET MSG=CP40MSG,L=L'CP40MSG,MSGID=949               RGPNOV82\n         MVC   COMMAND+L'CP40MSG(L'CP40MSG),CP40MSG TO WK AREA  JOR0585\n         MVC   COMMAND+L'CP40MSG+(CP40CHAR-CP40MSG)(1),$CCOMCHR       \"\n         $CRET MSG=COMMAND+L'CP40MSG,L=L'CP40MSG,MSGID=949      JOR0585\n         SPACE 1                                               RGPNOV82\nCP40MSG  DS    0CL50                                           RGPNOV82\n         DC    CL27'COMMAND REJECTED -- ISSUE '''              RGPNOV82\nCP40CHAR DC    CL23'$P SYS'' TO DRAIN SYSTEM'                  RGPNOV82\n         SPACE 1                                               RGPNOV82\nCPSYS    DS    0H                                              RGPNOV82\n         CLC   =C'PSYS',COMVERB  IS THIS $P SYS                RGPNOV82\n         BNE   X005RC00          BR IF NOT                     RGPNOV82\n         SPACE 1                                               RGPNOV82\n         OI    $STATUS,$DRAINED  RESET DRAIN FLAGS             RGPNOV82\nCPSYSDRN $CRET MSG='SYSTEM DRAINING',MSGID=623   TELL OPERATOR RGPNOV82\n         TITLE 'HASP COMMAND PROCESSOR HASPSJ -- SELECT JOB'\n***********************************************************************\n*                                                                     *\n*        $SJXXXX ALLOWS OPERATOR TO SPECIFY THE JOB                   *\n*        WHICH HE WISHES TO SELECT NEXT.                              *\n*                                                                     *\n***********************************************************************\nHASPSJ   $COMGRUP SG\n         SPACE 2\n         USING JQE,R1         JQE ADDRESSABILITY                   J215\n         SPACE 1\nCSJ      DS    0H\n        $CFCVB POINTER=(R5),NOK=CSJINVO\n        $QLOC  (R0),CSJINVO        ATTEMPT TO LOCATE JOB\n         MVC   COMMAND(04),=C'JOB '\n        $CFCVE (R0)                JOB NUMBER TO EBCDIC\n         MVC   COMMAND+4(4),COMDWORK+1 TO MESSAGE\n         TM    JQEFLAG1,JQE1BUSY   DO NOT ACCEPT IF                J215\n         BNZ   CSJBUSY              JOB IS ALREADY BUSY\n         TM    JQEFLAG3,JQE3JOB    DO NOT ACCEPT IF                J215\n         BNZ   CSJNOTJ              JOB IS NOT BATCH JOB\n         TM    JQETYPE,$XEQ        DO NOT ACCEPT\n         BNO   CSJNOTXQ             JOB IF IT IS\n         CLI   JQETYPE,$XEQ          NOT READY\n         BE    CSJNOTXQ               TO EXECUTE\n        $POST  $HASPECF,JOB        WAKE UP INITIATORS\n*        STH   R0,$NEXTJQE         REMEMBER JOB NUMBER\n         MVC   COMMAND+8(22),=C' WILL BE SELECTED NEXT'\n        $CRET  L=30\n         SPACE 2\nCSJINVO  L     R1,0(R5)            ADDRESS OF INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    INVALID OPERAND\n         MVC   COMMAND(16),=C' INVALID OPERAND'\n        $CRET  L=25\n         SPACE 2\nCSJBUSY  MVC   COMMAND+8(29),=C' REJECTED BECAUSE JOB IS BUSY'\n        $CRET  L=37\n         SPACE 2\nCSJNOTJ  MVC   COMMAND+8(33),=C' REJECTED BECAUSE IT IS NOT A JOB'\n        $CRET  L=41\n         SPACE 2\nCSJNOTXQ MVC   COMMAND+8(44),=C' REJECTED BECAUSE IT IS NOT READY TO EX*\n               ECUTE'\n        $CRET  L=52\n         LTORG                                                  JOR8611\n         TITLE 'SPAC $D/$T DESTID COMMAND'\n***********************************************************************\n*\n* THIS SECTION PROCESS $D/$T DESTID COMMAND TO DISPALY OR ALTER DESTID\n*   DEFINITIONS SET FROM JESPARM. ANY DESTID CAN BE DISPLAYED BY NAME.\n*   ONLY DESTIDS DEFINED IN THE RDT CAN BE DISPLAYED BY DEST OR\n*   REPLACED. ANY DESTID ADDED WILL RESULT IN A NEW ENTRY IN A NEWLY\n*   GETMAINED RDT HOOKED INTO THE SVT WITH OLD RDT FREEMAINED.\n*\n* COMMAND FORMAT:\n*\n*   $D DESTID,N(AME)=XXX\n*      FUNCTION: DISPLAY CURRENT DEST BY NAME XXX\n*   $D DESTID,D(EST)=N#R#\n*      FUNCTION: DISPLAY ALL CURRENT NAMES EQUIVALENT TO DEST N#R#\n*   $T DESTID,N(AME)=XXX,D(EST)=N#R#,REP(LACE)\n*      CHANGE CURRENT NAME XXX TO POINT TO DEST N#R#\n*   $T DESTID,N(AME)=XXX,D(EST)=N#R#,ADD\n*      ADD NEW NAME XXX TO POINT TO DEST N#R#\n*\n* MSGS: (ALL HAVE MSGID 900)\n*\n* INFORMATIONAL MSGS:\n*   DISPLAY OR SET RESULTS\n*\n* ERROR MSGS:\n*   INVALID SYNTAX\n*   INVALID KEYWORD\n*   INVALID OR MISSING NAME OR DEST PARAMETER\n*   MISSING OR CONFLICTING ADD/REPLACE PARAMETERS\n*   UNABLE TO GET SP241 STORAGE FOR NEW RDT (ADD ONLY)\n*   UNABLE TO ADD AS REQUESTED, ALREADY DEFINED\n*   UNABLE TO REPLACE AS REQUESTED, NAME NOT CURRENTLY IN RDT\n*\n* WRITTEN 11/86 BY J. O. SKIP ROBINSON, SPAC/MVS SERVICES\n*   SOME CODE ADAPTED FROM IBM DESTID PARM PROCESSING LOGIC\n*\n***********************************************************************\n         SPACE 1\nSPDESTID $COMGRUP DDESTID,TDESTID,DELAY=NO\n         SPACE 1\nCDDESTID EQU   *                   EP FOR $DDESTID\nCTDESTID EQU   *                   EP FOR $TDESTID\n         SPACE 1\nNDQBAR   EQU   R4                  BASE REG FOR WORK NDQ\n         USING NDQ,NDQBAR          ENABLE NDQ DSECT\nRDTBAR   EQU   R5                  BASE REG FOR WORK RDT\n* NOTE: RDTBAR MUST NOT BE USED FOR OTHER THAN $GETWORK POINTER!\n         USING RDT,RDTBAR          ENABLE RDT DSECT\nSVTBAR   EQU   R6                  BASE REG FOR SVT\n         USING SVT,SVTBAR          ENABLE SVT DSECT\n         L     SVTBAR,$SVT         GET SVT ADDRESS\nNEWRDTP  EQU   R7                  PTR TO NEW RDT (ADD ONLY)\n         SPACE 1\n         SLR   RDTBAR,RDTBAR       ZERO RDT WORK AREA PTR\n         $GETWORK WORDS=NDQSIZ/4+1,USE=UNDQ GET NDQ WORK AREA\n         SPACE 1\n         LR    NDQBAR,R1           COPY WORK NDQ PTR\n         ST    NDQBAR,PCEUSER0     SET PTR FOR $SCAN\n         $SCAN SCAN=SET,           SCAN OPER CMD                       *\n               TABLES=DESTIDTP,    PT TO TBL PAIR                      *\n               PARM=COMMAND+9,     START AT FIRST OPND                 *\n               PARMLEN=132         SET SUFFICIENT LENGTH\n         SPACE 1\n         B     PDESTBRT(R15)       PROC PER SCAN RESULTS\nPDESTBRT EQU   *                   BR TBL PER SCAN RESULTS\n         B     PDESTSOK            SCAN OK (0)\n         B     PDESTSOK            OBSOLETE KEYWORD (4)\n         B     PDESTERK            KEYWORD ERROR (8)\n         B     PDESTERS            SYNTAX ERROR (12)\n         EJECT\nPDESTSOK EQU   *                   $SCAN WAS OK\n         CLI   NDQDEST,0           DEST SPECIFIED ...\n         BNH   PDESTPRC             NO, BYPASS NODE/RMT\n         CLC   NDQDEST,=CL10'LOCAL'  LOCAL SPECIFIED ...\n         BE    PDESTPRC             YES, GO PROCESS\n         CLI   NDQDEST,C'U'        UNIT SPECIFICATION ...\n         BE    PDESTD               YES, GO PROCESS\n         CLI   NDQDEST,C'R'        REMOTE SPECIFICATION ...\n         BE    PDESTD               YES, GO PROCESS\n         CLI   NDQDEST,C'N'        NODE SPECIFICATION ...\n         BNE   PDESTERD             NO, ERROR\n         SPACE 1\nPDESTD   CLI   NDQDEST+1,C'0'      SECOND CHARACTER NUMERIC ...\n         BL    PDESTERD             NO, ERROR\n         LA    R1,NDQDEST+2        PREPARE FOR NEXT TESTS\n         BAL   R14,PDESTCK         CHECK FOR NUMERICS\n         SPACE 1\n         CLI   0(R1),C' '          CHECK FOR END OF DESTINATION,\n         BE    PDESTPRC             YES, VALID, GO PROCESS NDQ\n         CLI   0(R1),C'R'          NEW FIELD POSSIBLE PART OF RMT ...\n         BNE   PDESTERD             NO, ERROR\n         CLI   NDQDEST,C'N'        NEW FIELD PART OF RMT FOR NODE ...\n         BNE   PDESTERD             NO, ERROR\n         SPACE 1\n         CLI   1(R1),C'0'          ANY NUMERICS FOLLOWING NXXXXR ...\n         BL    PDESTERD             NO, ERROR\n         LA    R1,2(,R1)           POINT TO NUMERICS FOR RMT\n         BAL   R14,PDESTCK         VALIDATE REMOTE PORTION\n         LTR   R0,R0               ALL NUMERICS FOUND ...\n         BZ    PDESTPRC             YES, VALID, GO PROCESS\n         CLI   0(R1),C' '          PROPER ENDING FOUND ...\n         BNE   PDESTERD             NO, ERROR\n         BE    PDESTPRC            Y: CONTINUE\n         SPACE 3\nPDESTCK  LA    R0,3                PREPARE TO TEST FOR NUMERICS\nPDESTDL  CLI   0(R1),C'0'          CHECK FOR PART OF NUMBER\n         BLR   R14                  TERMINATOR, RETURN FOR CHECKS\n         LA    R1,1(,R1)           BUMP POINTER WITHIN NDQDEST\n         BCT   R0,PDESTDL          LOOP BACK FOR NEXT CHARACTER,\n         BR    R14                   RETURN IF FOUND THREE NUMERICS\n         EJECT\nPDESTPRC EQU   *\n         CLI   COMVERB,C'T'        IS THIS A SET?\n         BE    PDESTSET            Y: CONTINUE\n         SPACE 3\nPDESTDSP EQU   *                   DISPLAY DESTID INFO\n         CLI   NDQNAME,0           NAME SPECIFIED?\n         BH    PDESTDNR            Y: ATTEMPT TO DISPLAY DEST\n         SPACE 3\nPDESTDNM EQU   *                   DISPLAY NAME(S) GIVEN DEST\n         BAL   R14,PDESTRDT        GO BUILD WORK RDT\n         SPACE 1\nPDESTLDS EQU   *                   LOC ALL MATCHING DEST\n         L     R7,SVTRDT           POINT TO START OF RDT\n         MVC   COMMAND(L'PDESTM2),PDESTM2 MSG TO WORK AREA\n         MVC   COMMAND+PDESTM2D(L'NDQDEST),NDQDEST OPER DEST TO MSG\n         LA    R3,COMMAND+PDESTM2N PT TO FIRST NAME SLOT\n         LA    R2,PDESTM2#         GET COUNT OF MSG NAME SLOTS\n         MVI   PCEUSER0,L'PDESTM5  INIT NO-FOUND MSG LENGTH\nPDESTLDL EQU   *                   LOOP THRU RDT\n         C     R7,SVTRDTE          END OF RDT?\n         BH    PDESTLD4            Y: ALL DONE\n* COMPARE WORK RDT TO RDT ENTRY, INCL NODE, RMT, AND FLAGS\n         CLC   RDTROUTE(RDTSIZ-(RDTROUTE-RDT)),RDTROUTE-RDT(R7)\n         BNE   PDESTLD2            NOT OUR GUY\n         MVC   0(L'RDTNAME,R3),RDTNAME-RDT(R7) NAME TO MSG\n         MVI   PCEUSER0,0          ZERO NO-FOUND MSG LENGTH\n         LA    R3,L'PDESTM2N(,R3)  PT TO NEXT NAME SLOT\n         BCT   R2,PDESTLD2         NEXT RDT IF MSG NOT FULL\n         $CWTO L=L'PDESTM2,MSGID=900 ONE MSG TO OPER\n         SPACE 1\n         MVC   COMMAND(L'PDESTM2),PDESTM2 MSG TO WORK AREA\n         MVC   COMMAND+PDESTM2D(L'NDQDEST),NDQDEST OPER DEST TO MSG\n         LA    R3,COMMAND+PDESTM2N PT TO FIRST NAME SLOT\n         LA    R2,PDESTM2#         GET COUNT OF MSG NAME SLOTS\nPDESTLD2 LA    R7,RDTSIZ(,R7)      PT TO NEXT RDT\n         B     PDESTLDL            TRY NEXT RDT\nPDESTLD4 CH    R2,=Y(PDESTM2#)     ANOTHER MSG TO SEND?\n         BNL   PDESTLD6            N: CONTINUE\n         LA    R0,L'PDESTM2        SET MSG LENGTH\n         B     PDESTXIT            ISSUE LAST MSG AND CLEAN UP\nPDESTLD6 SLR   R0,R0               CLEAR MSG LENGTH\n         ICM   R0,B'0001',PCEUSER0 ANY MSG ISSUED?\n         BZ    PDESTXIT            Y: GO CLEAN UP\n         MVC   COMMAND(L'PDESTM5),PDESTM5 MSG TO WORK AREA\n         MVC   COMMAND+PDESTM5D(L'NDQDEST),NDQDEST OPER DEST TO MSG\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         EJECT\nPDESTDNR EQU   *                   DISPLAY DEST GIVEN NAME\n         $DEST NDQNAME,$OWNNODE,LEN=L'NDQNAME,ERR=PDESTERN GET NODE/RMT\n         SPACE 1\n         ST    R1,PCEUSER0         SAVE NODE/RMT\n         MVC   COMMAND(L'PDESTM1),PDESTM1 MSG TO WORK AREA\n         MVC   COMMAND+PDESTM1N(L'NDQNAME),NDQNAME NAME TO MSG\n         LA    R0,COMMAND+PDESTM1D INDICATE\n         ST    R0,PCEUSER1            DISPLAY START\n         L     R0,PCEUSER0         GET NODE/RMT\n         SRL   R0,16               NODE TO BOTTOM OF REG\n         LTR   R0,R0               ANY NODE NUMBER?             SCHUDEL\n         BZ    PDESTDNU            NO, IS \"U\" FORMAT            SCHUDEL\n         MVC   COMBWORK,=C'N'      INDICATE 'NODE'\n         BAL   R14,PDESTEDT        GO EDIT NODE INTO MSG\n         L     R0,PCEUSER0         GET NODE/RMT\n         ICM   R0,B'1100',$ZEROES  ZERO NODE NUM\n         MVC   COMBWORK,=C'R'      INDICATE 'RMT'\n         BAL   R14,PDESTEDT        GO EDIT RMT INTO MSG\n         LA    R0,L'PDESTM1        SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         SPACE 1                                                SCHUDEL\nPDESTDNU L     R0,PCEUSER0         GET NODE/RMT                 SCHUDEL\n         ICM   R0,B'1100',$ZEROES  ZERO NODE NUM                SCHUDEL\n         MVC   COMBWORK,=C'U'      INDICATE SPECIAL LOCAL       SCHUDEL\n         BAL   R14,PDESTEDT        GO EDIT NUM INTO MSG         SCHUDEL\n         LA    R0,L'PDESTM1        SET MSG LENGTH               SCHUDEL\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP       SCHUDEL\n         EJECT\nPDESTSET EQU   *                   ADD OR REPLACE DESTID\n         CLI   NDQNAME,0           NAME SPECIFIED?\n         BNH   PDESTERN            N: ERR\n         CLI   NDQDEST,0           DEST SPECIFIED?\n         BNH   PDESTERD            N: ERROR\n         TM    NDQCOMFL,NDQCFADD+NDQCFREP CHECK ADD/REP KWDS\n         BZ    PDESTERM            ERR: NEITHER SPECIFIED\n         BO    PDESTERC            ERR: BOTH SPECIFIED\n         $DEST NDQNAME,$OWNNODE,LEN=L'NDQNAME,ERR=PDESTST2 GET NODE/RMT\n         SPACE 1\n* FALL THRU: NAME CURRENTLY DEFINED TO JES\n         TM    NDQCOMFL,NDQCFREP   OPER WANTS REPLACE?\n         BO    PDESTST4            Y: CONTINUE\n         BNO   PDESTERA            N: ERR, CAN'T ADD\n* COME HERE IF NAME NOT CURRENTLY DEFINED TO JES\nPDESTST2 TM    NDQCOMFL,NDQCFADD   OPER WANTS ADD?\n         BNO   PDESTERP            N: ERR, CAN'T REPLACE\nPDESTST4 EQU   *\n         BAL   R14,PDESTRDT        GO BUILD WORK RDT\n         SPACE 1\nPDESTLNM EQU   *                   LOC NAME IN RDT\n         L     R1,SVTRDT           POINT TO START OF RDT\nPDESTLNL EQU   *                   LOOP THRU RDT\n         C     R1,SVTRDTE          END OF RDT?\n         BH    PDESTLNX            Y: ALL DONE\n         CLC   RDTNAME,RDTNAME-RDT(R1) WORK RDT VS. TBL ENTRY\n         BNH   PDESTLNX            EQUAL OR LOWER, ALL DONE\n         LA    R1,RDTSIZ(,R1)      PT TO NEXT RDT\n         B     PDESTLNL            TRY NEXT RDT\nPDESTLNX EQU   *\n         SPACE 1\n         TM    NDQCOMFL,NDQCFREP   IS THIS REPLACE?\n         BO    PDESTREP            Y: GO REPLACE NAME\n         EJECT\nPDESTADD EQU   *                   ADD NAME TO RDT\n         LR    R2,R1               COPY ENTRY INSERT LOC PTR\n         L     R3,SVTRDTE          PT TO LAST RDT ENTRY\n         LA    R3,RDTSIZ*2+8(,R3)  INCR FOR LAST/NEW RDT, HDR\n         SL    R3,SVTRDT           CALC NEW RDT SIZE\n         $GETMAIN C,LV=(R3),SP=241,LOC=BELOW GET NEW RDT\n         SPACE 1\n         LTR   R15,R15             GETMAIN OK?\n         BNZ   PDESTERG            N: CAN'T CONTINUE\n         LR    NEWRDTP,R1          COPY NEW RDT PTR\n         MVC   0(4,NEWRDTP),=CL4'RDT' SET EYE CATCHER\n         ST    R3,4(,NEWRDTP)      SAVE RDT LENGTH\n         MVI   4(NEWRDTP),241        AND SUBPOOL\n         SPACE 1\n         LA    R14,8(,NEWRDTP)     PT TO NEW RDT 1ST ENTRY\n         L     R0,SVTRDT           PT TO OLD RDT 1ST ENTRY\n         LR    R1,R2               COPY INSERT LOC PTR\n         SL    R1,SVTRDT           CALC SRC LENGTH TO MOVE\n         LR    R15,R1              TGT LENGTH SAME\n         MVCL  R14,R0              COPY RDT UP TO INSERT\n         MVC   0(RDTSIZ,R14),RDT   INSERT NEW RDT ENTRY\n         LA    R14,RDTSIZ(,R14)    PT TO NEXT TGT LOC\n         L     R1,SVTRDTE          PT TO OLD RDT LAST ENTRY\n         LA    R1,RDTSIZ(,R1)      PT TO OLD RDT END\n         SLR   R1,R0               CALC SRC LENGTH LEFT TO MOVE\n         LR    R15,R1              TGT LENGTH SAME\n         MVCL  R14,R0              COPY REST OF OLD RDT\n         SPACE 1\n         LA    R2,8(,NEWRDTP)      PT TO NEW RDT 1ST ENTRY\n         SLR   R3,R3               GET NEW RDT\n         ICM   R3,B'0111',4+1(NEWRDTP) STORAGE LENGTH\n         SH    R3,=Y(RDTSIZ+8)     LESS HDR AND LAST ENTRY LENGTH\n         ALR   R3,R2               PT TO NEW RDT LAST ENTRY\n         SPACE 1\n         L     R1,SVTRDT           PT TO OLD RDT\n         SL    R1,$F8              BACK TO EYE CATCHER\n         L     R0,4(,R1)           GET LENGTH AND SUBPOOL\n         STM   R2,R3,SVTRDT        NEW RDT START/END INTO SVT\n         $FREMAIN R,LV=(R0),A=(R1) FREE OLD RDT\n         SPACE 1\n         MVC   COMMAND(L'PDESTM4),PDESTM4 MSG TO WORK AREA\n         MVC   COMMAND+PDESTM4N(L'NDQNAME),NDQNAME NAME TO MSG\n         MVC   COMMAND+PDESTM4D(L'NDQDEST),NDQDEST DEST TO MSG\n         LA    R0,L'PDESTM4        SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         EJECT\nPDESTREP EQU   *                   REPLACE NAME IN RDT\n         CLC   RDTNAME,RDTNAME-RDT(R1) NAME NOW IN RDT?\n         BNE   PDESTERP            ERR: CAN ONLY REPL RDT ENTRY\n         MVC   0(RDTSIZ,R1),RDT    REPLACE RDT ENTRY\n         MVC   COMMAND(L'PDESTM3),PDESTM3 MSG TO WORK AREA\n         MVC   COMMAND+PDESTM3N(L'NDQNAME),NDQNAME NAME TO MSG\n         MVC   COMMAND+PDESTM3D(L'NDQDEST),NDQDEST DEST TO MSG\n         LA    R0,L'PDESTM3        SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         EJECT\nPDESTEDT EQU   *                   EDIT NODE/RMT INTO MSG\n         LTR   R0,R0               ANYTHING TO DISPLAY?\n         BZR   R14                 N: BYE BYE\n         ST    R14,COMWREGS        SAVE LINK REG\n         CVD   R0,COMDWORK         NODE TO DECIMAL\n         MVC   COMRWORK(L'PDESTEDP),PDESTEDP ED PAT TO WORK\n         LA    R1,COMRWORK+L'PDESTEDP-1 PRIME SIGNIFCANCE PTR\n         LR    R15,R1              COPY SIGNIFICANCE PTR\n         EDMK  COMRWORK(L'PDESTEDP),COMDWORK+5 EDIT VALUE\n         SLR   R15,R1              CALC MACH LEN TO MOVE\n         L     R14,PCEUSER1        GET DEST PTR\n         EX    R15,PDESTMOV        EDITED VALUE TO DEST\n         MVC   0(1,R14),COMBWORK   EYEBALL TO MSG\n         LA    R0,1+1(R15,R14)     CALC NEXT DEST LOC\n         ST    R0,PCEUSER1         UPDATE DEST PTR\n         L     R14,COMWREGS        RESTORE LINK REG\n         BR    R14                 RETURN TO CALLER\n         SPACE 2\nPDESTMOV MVC   1(*-*,R14),0(R1)    <<EX'D>> NODE/RMT TO MSG\n         EJECT\nPDESTRDT EQU   *                   BUILD WORK RDT FROM WORK NDQ\n         ST    R14,COMWREGS        SAVE LINK REG\n         $GETWORK WORDS=RDTSIZ/4+1,USE=URDT GET RDT WORK AREA\n         SPACE 1\n         LR    RDTBAR,R1           COPY WORK AREA PTR\n         $DEST NDQDEST,$OWNNODE,LEN=L'NDQDEST,ERR=PDESTERD\n         SPACE 1\n         XC    RDT(RDTSIZ),RDT     CLEAR WORK RDT\n         MVC   RDTNAME,NDQNAME     OPER NAME TO WORK RDT\n         MVC   RDTNODE,$ZEROES     ZERO NODE NUMBER\n         CLI   NDQDEST,C'N'        TEST FOR USER-SET NODE NUMBER\n         BE    PDESTSND             NO - BRANCH\n         CLC   NDQDEST,=CL8'LOCAL'  TEST FOR LOCAL ROUTING\n         BE    PDESTSND            YES - BRANCH\n         CLC   NDQDEST,=CL8'R0'    TEST FOR R0 (LOCAL) ROUTING\n         BNE   PDESTSRM            NO - SKIP NODE SET\nPDESTSND STCM  R1,B'1100',RDTNODE  SET NODE IN RDT\n         MVI   RDTFLAG,RDTFLAGN    SET TO LOAD NODE\n         SPACE 1\nPDESTSRM STH   R1,RDTRMTNO         SET REMOTE/UNIT NUMBER\n         CLI   NDQDEST,C'U'        TEST FOR USER-SET UNIT NUMBER\n         BNE   PDESTCKR             NO - BRANCH\n         MVI   RDTFLAG,RDTFLAGU     YES - FLAG UNIT SPECIFICATION\n         B     PDESTRDX            CONTINUE\n         SPACE 1\nPDESTCKR CLC   RDTRMTNO,$ZEROES    TEST FOR REMOTE\n         BE    PDESTRDX            BR IF NO\n         OI    RDTFLAG,RDTFLAGR    SET TO LOAD REMOTE NUMBER\n         SPACE 3\nPDESTRDX EQU   *                   WORK RDT LOOKS OK\n         L     R14,COMWREGS        RESTORE LINK REG\n         BR    R14                 RETURN TO CALLER\n         EJECT\nPDESTERK EQU   *                   INVALID KEYWORD\n         MVC   COMMAND(L'PDESTMKE),PDESTMKE MSG TO 'COMMAND'\n         LA    R0,L'PDESTMKE       SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         SPACE 1\nPDESTERS EQU   *                   INVALID SYNTAX\n         MVC   COMMAND(L'PDESTMSE),PDESTMSE MSG TO 'COMMAND'\n         LA    R0,L'PDESTMSE       SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         SPACE 1\nPDESTERG EQU   *                   ERR: NO SP 241 STORAGE\n         MVC   COMMAND(L'PDESTMGE),PDESTMGE MSG TO 'COMMAND'\n         LA    R0,L'PDESTMGE       SET MSG LENGTH\n         B     PDESTXIT            CONTINUE\n         SPACE 1\nPDESTERN EQU   *                   MISSING OR INV NAME\n         MVC   COMMAND(L'PDESTMNE),PDESTMNE MSG TO 'COMMAND'\n         LA    R0,L'PDESTMNE       SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         SPACE 1\nPDESTERD EQU   *                   MISSING OR INV DEST\n         MVC   COMMAND(L'PDESTMDE),PDESTMDE MSG TO 'COMMAND'\n         LA    R0,L'PDESTMDE       SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         SPACE 1\nPDESTERM EQU   *                   ADD/REPL MISSING\n         MVC   COMMAND(L'PDESTMME),PDESTMME MSG TO 'COMMAND'\n         LA    R0,L'PDESTMME       SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         SPACE 1\nPDESTERC EQU   *                   CONFLICTING ADD/REPL\n         MVC   COMMAND(L'PDESTMCE),PDESTMCE MSG TO 'COMMAND'\n         LA    R0,L'PDESTMCE       SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         SPACE 1\nPDESTERA EQU   *                   ERR: NAME ALREADY DEFINED\n         MVC   COMMAND(L'PDESTMEA),PDESTMEA MSG TO WORK AREA\n         MVC   COMMAND+PDESTEAN(L'NDQNAME),NDQNAME NAME TO MSG\n         LA    R0,L'PDESTMEA       SET MSG LENGTH\n         B     PDESTXIT            ISSUE MSG AND CLEAN UP\n         SPACE 1\nPDESTERP EQU   *                   ERR: NAME NOT FOUND IN RDT\n         MVC   COMMAND(L'PDESTMEP),PDESTMEP MSG TO WORK AREA\n         MVC   COMMAND+PDESTEPN(L'NDQNAME),NDQNAME NAME TO MSG\n         LA    R0,L'PDESTMEP       SET MSG LENGTH\n         B     PDESTXIT            CONTINUE\n         EJECT\nPDESTXIT EQU   *                   CLEAN UP, ISSUE MSG, EXIT\n         LTR   R0,R0               ANY MSG?\n         BZ    PDESTXT2            N: BYPASS WTO\n         $CWTO L=(R0),MSGID=900    MSG TO OPER\n         SPACE 1\nPDESTXT2 LTR   RDTBAR,RDTBAR       ANY RDT WORK AREA?\n         BZ    PDESTXT4            N: BYPASS RETURN WROK AREA\n         $RETWORK (RDTBAR)         RETURN RDT WORK AREA\n         SPACE 1\nPDESTXT4 $RETWORK (NDQBAR)         RETURN NDQ WORK AREA\n         SPACE 1\nPDESTRET B     X005RC08            EXIT WITH NO MSG\n         EJECT\n         LTORG\n         SPACE 3\nDESTIDTP DC    A(DESTIDTB),A(0)    SCAN TBL PAIR\nPDESTEDP DC    X'402020202120'     NODE/RMT EDIT PATTERN\n         SPACE 1\nPDESTM1  DC    C'NAME=X        DEST=X         '\nPDESTM1N EQU   05,L'NDQNAME        FOR INSERTING NAME\nPDESTM1D EQU   19,L'NDQDEST        FOR INSERTING DEST\n         SPACE 1\nPDESTM2# EQU   5                   COUNT OF NAMES PER LINE\nPDESTM2  DC    CL(21+9*PDESTM2#-1)'DEST=X          NAME=X'\nPDESTM2D EQU   05,L'NDQDEST        FOR INSERTING DEST\nPDESTM2N EQU   21,L'NDQNAME+1      FOR INSERTING FIRST NAME\n         SPACE 1\nPDESTM3  DC    C'RDT REPLACED, NAME=X        DEST=X         '\nPDESTM3N EQU   19,L'NDQNAME\nPDESTM3D EQU   33,L'NDQDEST\n         SPACE 1\nPDESTM4  DC    C'RDT ADDED, NAME=X        DEST=X         '\nPDESTM4N EQU   16,L'NDQNAME\nPDESTM4D EQU   30,L'NDQDEST\n         SPACE 1\nPDESTM5  DC    C'X          HAS NO MATCHING RDT ENTRIES'\nPDESTM5D EQU   00,L'NDQDEST\n         SPACE 1\nPDESTMEA DC    C'X        NOT ADDED: ALREADY DEFINED'\nPDESTEAN EQU   00,L'NDQNAME        FOR INSERTING NAME\n         SPACE 1\nPDESTMEP DC    C'X        NOT REPLACED: NOT FOUND IN RDT'\nPDESTEPN EQU   00,L'NDQNAME        FOR INSERTING NAME\n         SPACE 1\nPDESTMKE DC    C'DESTID: INVALID KEYWORD SPECIFIED'\nPDESTMSE DC    C'DESTID: INVALID COMMAND SYNTAX'\nPDESTMNE DC    C'DESTID: INVALID OR MISSING NAME= PARAMETER'\nPDESTMDE DC    C'DESTID: INVALID OR MISSING DEST= PARAMETER'\nPDESTMGE DC    C'DESTID: UNABLE TO OBTAIN SP 241 FOR NEW RDT'\nPDESTMME DC    C'DESTID: MISSING ADD OR REPLACE PARAMETER'\nPDESTMCE DC    C'DESTID: CONFLICTING ADD/REPLACE PARAMETERS'\n         EJECT\nDESTIDTB $SCANTAB TABLE=(USER,NOENTRY)\n         $SCANTAB NAME=DEST,MINLEN=1,                                  *\n               CB=PCE,                                                 *\n               CBIND=(PCEUSER0,PCE,L),                                 *\n               CONV=CHARAN,                                            *\n               RANGE=(1,L'NDQDEST),                                    *\n               DSECT=NDQ,                                              *\n               FIELD=NDQDEST\n         $SCANTAB NAME=NAME,MINLEN=1,                                  *\n               CB=PCE,                                                 *\n               CBIND=(PCEUSER0,PCE,L),                                 *\n               CONV=CHARJANS,                                          *\n               RANGE=(1,L'NDQNAME),                                    *\n               DSECT=NDQ,                                              *\n               FIELD=NDQNAME\n         $SCANTAB NAME=REPLACE,MINLEN=3,                               *\n               CB=PCE,                                                 *\n               CBIND=(PCEUSER0,PCE,L),                                 *\n               CONV=FLAG,VALUE=(,NDQCFREP,FF),                         *\n               DSECT=NDQ,                                              *\n               FIELD=NDQCOMFL\n         $SCANTAB NAME=ADD,                                            *\n               CB=PCE,                                                 *\n               CBIND=(PCEUSER0,PCE,L),                                 *\n               CONV=FLAG,VALUE=(,NDQCFADD,FF),                         *\n               DSECT=NDQ,                                              *\n               FIELD=NDQCOMFL\n         $SCANTAB TABLE=END\n         SPACE 3\nNDQ      DSECT                     DEF OUR FIELD IN WORK NDQ\nNDQCOMFL EQU   NDQ+NDQSIZ-1        NDQ COM FLAG\nNDQCFADD EQU   B'10000000'         'ADD' SPECIFIED\nNDQCFREP EQU   B'01000000'         'REPLACE' SPECIFIED\n         SPACE 3\nJESEX005 CSECT                     RESUME CSECT\n         SPACE 2\n         DROP  NDQBAR,RDTBAR,SVTBAR\n        TITLE 'MELLON EXIT005 COMMAND PROCESSOR RECOVERY ROUTINE' XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        XCOMRCVR - PROCESSOR RECOVERY ROUNTINE                 * XX005\n*                                                               * XX005\n*        THIS ROUNTINE WILL RECOVER FROM PROGRAM                * XX005\n*        CHECKS BY DISCARDING THE COMMAND CURRRENTLY            * XX005\n*        BEING PROCESSED AND THEN RETURN TO 'X005RC08'          * XX005\n*        WHERE IT WILL RETURN TO JES2 WITH A CODE 8             * XX005\n*        WHICH WILL CAUSE JES2 TO IGNORE THE COMMAND            * XX005\n*                                                               * XX005\n*        REGISTERS UPON ENTRY -                                 * XX005\n*                                                               * XX005\n*            R0 - SAME AS AT ABEND                              * XX005\n*            R1 - POINTER TO ERA                                * XX005\n*      R2 - R10 - SAME AS AT ABEND                              * XX005\n*           R11 - POINTER TO HCT                                * XX005\n*           R13 - POINTER TO PCE                                * XX005\n*           R14 - RETURN ADDRESS                                * XX005\n*           R15 - ENTRY ADDRESS                                 * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nXCOMRCVR $SAVE                     SAVE CALLERS REGISTERS         XX005\n         SPACE 1                                                  XX005\n         LR    R8,R15              GET ADDRESS OF RECOVERY RTN    XX005\n         USING XCOMRCVR,R8         SET ADDRESSABILITY FOR RTN     XX005\n         SPACE 1                                                  XX005\n         LR    R5,R1               GET ADDRESS OF ERA IN R5       XX005\n         USING ERA,R5         SET ADDRESSABILITY FOR ERA           J215\n         SPACE 1                                                  XX005\n         CLC   ERAESRG0,=F'12'     IS THERE A SDWA....            XX005\n         BE    CPERC               BRANCH IF NO                   XX005\n         SPACE 1                                                  XX005\n         L     R3,ERASDWA          GET ADDRESS OF SDWA            XX005\n         USING SDWA,R3             SET ADDRESSABILITY FOR SDWA    XX005\n         SPACE 1                                                  XX005\n         L     R4,ERAPRE           GET ADDRESS OF PRE             XX005\n         USING PRE,R4         SET ADDRESSABILITY FOR PRE           J215\n         EJECT                                                    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        TEST FOR PROGRAM CHECK  (SDWAPCHK)                     * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\n         TM    SDWAERRA,SDWAPCHK   TEST FOR PROGRAM CHECK         XX005\n         BZ    CPERC               BRANCH IF NOT A PROGRAM CHECK  XX005\n         SPACE 1                                                  XX005\n         DROP  R3                  KILL ADDRESSABILITY FOR SDWA   XX005\n         SPACE 1                                                  XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        END ANY MULTIPLE LINE WTO IN PROGRESS                  * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\n         TM    COMFLAG,CMBFLAGU    TEST FOR UCMID .(OWN OR OTHER) XX005\n         BZ    CSETMSG             BRANCH IF OTHER                XX005\n         SPACE 1                                                  XX005\n         CLI   COMUCMA,0           IS THIS A MLWTO...             XX005\n         BZ    CSETMSG             BRANCH IF NO                   XX005\n         SPACE 1                                                  XX005\n         OI    COMLINET,X'10'      SET END LINE                   XX005\n         SPACE 1                                                  XX005\n         SLR   R0,R0               SET NULL MESSAGE LENGTH        XX005\n         BCTR  R0,0              SET LENGTH TO -1 TO TRUNC MLWTO  XX005\n         SPACE 1                                                  XX005\n        $CWTO  L=(R0)              END ANY MLWTO IN PROGRESS      XX005\n         SPACE 1                                                  XX005\n         MVI   COMUCMA,X'00'       CLEAR UCM AREA TO INSURE CMD   XX005+\n                                     TERMINATED MSG IS NOT MLWTO  XX005\n         EJECT                                                    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        INFORM OPERATOR OF COMMAND THAT WILL BE DISCARDED.     * XX005\n*        'NETWORK COMMAND' WILL BE USED FOR SSI FORMATTED       * XX005\n*        COMMANDS.                                              * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nCSETMSG  MVC   COMMAND(L'CMSGTXT),CMSGTXT   MOVE IN MESSAGE TEXT  XX005\n         SPACE 1                                                  XX005\n         TM    COMINCON,X'80'     TEST FOR SSI FORMATTED COMMAND  XX005\n         BZ    CPREMSG            BRANCH IF NOT SSI FORMATTED CMD XX005\n         SPACE 1                                                  XX005\n         MVC   COMMAND+L'CMSGTXT(CCMDLN),CNETCMD MOVE IN FORMATED XX005+\n                                                     COMMAND TEXT XX005\n         B     CMSGTOOP            GO SEND MESSAGE TO OPERATOR    XX005\n         SPACE 1                                                  XX005\nCPREMSG  MVC   COMMAND+L'CMSGTXT(CCMDLN),PRETRACK MOVE IN PORTION XX005+\n                                                      OF COMMAND  XX005\n         SPACE 1                                                  XX005\n         DROP  R4                  KILL ADDRESSABILITY FOR PRE    XX005\n         SPACE 1                                                  XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        SEND COMMAND TERMINATED MESSAGE TO CONSOLE WHERE THE   * XX005\n*        COMMAND ORIGINATED AND ALSO TO THE MAIN CONSOLE        * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nCMSGTOOP $CWTO L=CMLENGTH,MSGID=691   SEND MESSAGE TO WHERE       XX005+\n                                         COMMAND ORIGINATED       XX005\n         SPACE 1                                                  XX005\n        $WTO   COMMID,CMLENGTH+L'COMMID,JOB=NO,       SEND MSG TO XX005+\n               ROUTE=$MAIN+$ERR,CLASS=$ALWAYS,PRI=$HI MASTER CON  XX005\n         EJECT                                                    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*      $SETRP                                                   * XX005\n*        SET UP OPTIONS (RESUME OR PERCOLATE)                   * XX005\n*        AND RETURN TO CALLER.                                  * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\n         L     R14,=A(X005RC08)    R14 => DELETE COMMAND RETURN   XX005\n        $SETRP RESUME=(R14)        SET RESUMPTION ADDRESS         XX005\n         SPACE 1                                                  XX005\n         B     CRETURN             GO TO RETURN                   XX005\n         SPACE 1                                                  XX005\nCPERC   $SETRP PERCOLATE           SET PERCOLATE OPTION           XX005\n         SPACE 1                                                  XX005\nCRETURN $RETURN                    RETURN TO CALLER               XX005\n         SPACE 1                                                  XX005\n         DROP  R5                  KILL ADDRESSABILITY FOR ERA    XX005\n***************************************************************** XX005\n*                                                               * XX005\n*        CONSTANTS FOR XCOMRCVR PROCESSOR RECOVERY ROUTINE      * XX005\n*                                                               * XX005\n***************************************************************** XX005\n         SPACE 1                                                  XX005\nCMSGTXT  DC    C'COMMAND TERMINATED - '   CMD TERMINATED MSG TEXT XX005\n         SPACE 1                                                  XX005\nCNETCMD  DC    C'NETWORK COMMAND' FOR FORMATED COMMANDS THIS TEXT XX005+\n                                      WILL BE USED INSTEAD OF THE XX005+\n                                          ACTUAL COMMAND          XX005\n         SPACE 1                                                  XX005\nCMLENGTH EQU   L'CMSGTXT+CCMDLN    TOTAL MESSAGE LENGTH           XX005\n         SPACE 2                                                  XX005\n         LTORG ,                   EXPAND LITERAL POOL            XX005\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JX05$": {"ttr": 7941, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRBJX5 JOB  (SP,9030,0000000),'WESTERMAN   - BOX 3',\n//         CLASS=H,MSGCLASS=S,TIME=99,\n//         NOTIFY=XSPRBWW,REGION=4096K TYPRUN=HOLD\n//*\n//*\n//ASM    EXEC  PGM=IEV90,PARM=OBJECT,REGION=1200K\n//SYSLIB DD DSN=SYS1.HASPSRC,DISP=SHR,DCB=BLKSIZE=23000,\n//       VOL=SER=R12002,UNIT=SYSDA\n//       DD DSN=SYS1.MACLIB,DISP=SHR,\n//       VOL=SER=R12007,UNIT=SYSDA\n//       DD DSN=SYS1.AMODGEN,DISP=SHR,\n//       VOL=SER=R12002,UNIT=SYSDA\n//       DD DSN=ALCATEL.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY,DCB=BLKSIZE=80\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),\n//             DSN=&&LOADSET\n//*YSIN DD DSN=XSPRBWW.POSSIBLE.MODS(JX05),DISP=SHR\n//*YSIN DD DSN=XSPRBWW.POSSIBLE.MODS(J005$DV),DISP=SHR\n//SYSIN DD DSN=XSPRBWW.POSSIBLE.MODS(J005LOAD),DISP=SHR\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,XREF,AMODE=31,RMODE=24',\n//        REGION=1000K,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD DSN=ALCATEL.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//*  NAME JESEX005(R)\n//*  NAME J005$DV(R)\n//*  NAME J005LOAD(R)\n//SYSIN DD *\n  NAME J005LOAD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JX08": {"ttr": 7943, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\xeb\\x00\\xeb\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 235, "newlines": 235, "modlines": 0, "user": "SYZYGYB"}, "text": "JX008    TITLE 'BII - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: JX008                                                  *\n*                                                                     *\n* DESCRIPTIVE NAME: JES2 EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT  *\n*                                                                     *\n* AUTHOR: BRIAN WESTERMAN                                             *\n*                                                                     *\n* DATE WRITTEN: AUGUST 1989                                           *\n*                                                                     *\n* FMID: HJE2330 (MVS/SP-JES2 2.2.0)                                   *\n*                                                                     *\n* PURPOSE: THIS EXIT PLACES OBTAINS AND STORES IN THE JCT EITHER      *\n*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *\n*          THE ABEND CODE OF THE JOB.                                 *\n*                                                                     *\n* INVOCATION POINT: EX008                                             *\n*                                                                     *\n* ENTRY POINT: EX008                                                  *\n*                                                                     *\n* REGISTERS ON INPUT:                                                 *\n*     R0: CODE PASSED BY JES2                                         *\n*         =0, INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL         *\n*         =4, INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL         *\n*     R1: ADDRESS OF THE JCT                                          *\n*     R2-R10: N/A                                                     *\n*     R11: ADDRESS OF THE SSVT                                        *\n*     R12: N/A                                                        *\n*     R13: ADDRESS OF AN OS-STYLE SAVE AREA                           *\n*     R14: RETURN ADDRESS                                             *\n*     R15: ENTRY ADDRESS                                              *\n*                                                                     *\n* REGISTERS ON RETURN:                                                *\n*     R0-R1: N/A                                                      *\n*     R15: A RETURN CODE:                                             *\n*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *\n*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *\n*              PROCESSING                                             *\n*                                                                     *\n* JES2 MACROS USED:                                                   *\n*     $ENTRY, $MODEND                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nJX008    $MODULE ENVIRON=USER,                                         C\n               SSOB,                   REQ'D TO DETERMINE INVOKER      C\n               $BUFFER,                REQ'D BY JCT                    C\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C\n               $JCT,                   REQ'D TO SAVE ABEND/COND CODE   C\n               $MIT,                   REQ'D BY $MODEND, HCT           C\n               $SCAT,                  REQ'D BY $SVT                   C\n               $SJB,                   REQ'D TO DETERMINE INVOKER      C\n               $SVT,                   REQ'D TO DETERMINE INVOKER      C\n               RPL,                    REQ'D BY $BUFFER                C\n               $TQE,                   REQ'D BY $SJB                   C\n               $HFAME,                 REQ'D BY $SVT                   C\n               $XECB                   REQ'D BY $SVT\n         TITLE 'BII - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n*  INITIALIZATION                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEX008    $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE 3\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         LR    R10,R1                  GET ADDRESS OF JCT\n         USING JCT,R10                 GET ADDRESS OF JCT\n         SLR   R15,R15                 SET DEFAULT RETURN CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THERE IS A JCT , IF IT IS FOR A BATCH JOB AND      *\n*  IF NOTIFY WAS REQUESTED.  IF NOT, RETURN.                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTR   R0,R0                   IS JCT BEING READ?\n         BZ    RETURN                  YES, RETURN\n         SPACE 1\n         CLI   JCTJOBID,C'J'           IS THIS A BATCH JOB?\n         BNE   RETURN                  NO, RETURN\n         SPACE 1\n         CLI   JCTTSUID,C' '           WAS NOTIFY REQUESTED?\n         BE    RETURN                  NO, RETURN\n         SPACE 1\n         TM    JCTJBOPT,JCTXBACH       IS THIS AN EXECUTION BATCH      C\n                                         MONITOR?\n         BO    RETURN                  YES, RETURN\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  FIND THE SJB ON THE JOBS EXECUTING BY CLASS QUEUE THAT BELONGS TO  *\n*  THIS JOB'S JCT.  IF THE SJB INDICATES THE JOB IS NOT IN            *\n*  TERMINATION, THEN RETURN.                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SVT,R11                 PROVIDE SSVT ADDRESSABILITY\n         XR    R2,R2\nGETSJB   DS    0H\n         L     R3,PSAAOLD-PSA\n         LH    R2,ASCBASID-ASCB(R3)\n         LR    R4,R2\n         BCTR  R4,0\n         LTR   R4,R4\n         BNP   RETURN\n         SLL   R2,2\n         AL    R2,SVTHAVT\n         L     R2,0(0,R2)\n         USING SJB,R2\n         CLC   SJBJOBNM(4),=C'INIT'\n         BNE   FOUNDSJB\n         L     R2,SJBSJB\n         LTR   R2,R2                   TEST FOR END OF QUEUE\n         BZ    RETURN                  RETURN IF NO MATCH\nFOUNDSJB DS    0H\n         CLI   SJBXQFN1+1,SSOBTERM     WAS EXIT INVOKED BY JOB         C\n                                         TERMINATION (HOSTERM)?\n         BNE   RETURN                  NO, RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*  FIND THE OS JCT FOR THIS JOB AND CHECK TO SEE IF THE JOB ABENDED.  *\n*  IF IT DID ABEND, GET THE ABEND CODE.                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETCVT   EQU   *\n         L     R2,CVTPTR               LOAD ADDR OF CVT POINTER\n         L     R2,0(R2)                LOAD ADDR OF NEXT/CURR TCB'S\n         L     R2,OURTCB(R2)           LOAD ADDR OF OUR TCB\n         L     R2,TCBJSCB(R2)          LOAD ADDR OF JSCB\n         L     R2,JSCBACT(R2)          LOAD ADDR OF ACTIVE JSCB\n         L     R2,JSCBJCT(R2)          LOAD ADDR OF OS JCT\n         USING INJMJCT-16,R2           ESTABLISH OS JCT ADDRESSABILITY\n         SPACE 1\n         TM    JCTJSTAT,JCTABEND       DID JOB ABEND?\n         BNO   GETMAXCC                NO, GET MAXIMUM CONDITION CODE\n         L     R3,JCTACODE             YES, GET ABEND CODE\n         B     SAVECODE                GO TO SAVE IT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  IF THE JOB DID NOT ABEND, THEN SCAN THE SCT'S FOR THE JOB AND      *\n*  FIND THE MAXIMUM CONDITION CODE OUT OF ALL THE JOB'S STEPS.        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETMAXCC DS    0H\n         L     R2,JCTSDKAD             GET FIRST SCT ADDRESS\n         USING INSMSCT-16,R2           ESTABLISH SCT ADDRESSABILITY\n         SPACE 1\n         SLR   R3,R3                   ZERO OUT WORK REGISTER\n         SPACE 1\nSCTLOOP  DS    0H\n         SRL   R2,8                    GET ADDRESS IN PROPER FORM\n         LTR   R2,R2                   ARE THERE ANY MORE SCT'S?\n         BZ    SAVECODE                NO, GO TO FINISH\n         TM    SCTSTEND,SCTSTRUN       DID STEP RUN?\n         BNO   NEXTSCT                 NO, GET NEXT SCT\n         CH    R3,SCTSEXEC             IS THIS STEP'S CONDITION CODE   C\n                                         GREATER THAN THE MAXIMUM?\n         BNL   NEXTSCT                 NO, GET NEXT SCT\n         LH    R3,SCTSEXEC             YES, SAVE NEW MAX COND CODE\nNEXTSCT  DS    0H\n         L     R2,SCTANSCT             GET NEXT SCT\n         B     SCTLOOP                 LOOP TO CHECK NEXT SCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SAVE EITHER THE ABEND CODE OR THE MAXIMUM CONDITION CODE FOR       *\n*  ANY STEP OF THE JOB IN A JCT USER FIELD.  THIS INFORMATION WILL    *\n*  BE USED LATER IN EXIT016 - TSO NOTIFY.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSAVECODE DS    0H\n         ST    R3,JCTUSER1             SAVE ABEND/MAX COND CODE\n         MVI   JCTUSER1,X'80'          MARK IT AS PROCESSED\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  GO BYE-BYE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRETURN   DS    0H\n         L     R14,12(R13)             LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)          RESTORE REGISTERS\n         BR    R14                     RETURN\n         EJECT\nPATCH    DS    CL200\n         DC    CL8'ENDPATCH'\nCVTPTR   EQU   X'10'         ADDRESS OF CVT POINTER\nOURTCB   EQU   X'04'         OFFSET INTO TCB LIST OF OUR TCB ADDRESS\nTCBJSCB  EQU   X'B4'         OFFSET INTO TCB OF JSCB ADDRESS\nJSCBACT  EQU   X'15C'        OFFSET INTO JSCB OF ACTIVE JSCB ADDRESS\nJSCBJCT  EQU   X'104'        OFFSET INTO ACTIVE JSCB OF OS JCT ADDRESS\n         SPACE 3\n***********************************************************************\nJCTDSCT  DSECT                                                     *\n*  *        THIS CONTROL BLOCK IS A COPY OF OS JCT DEFINING           *\n*  *        ONLY THOSE FIELDS USED BY THIS MOD.  THE OS JCT,          *\n*  *        IEFAJCTB, CONTAINS DUPLICATE FIELD NAMES OF THOSE         *\n*  *        USED BY THE JES2 JCT (JCTID, JCTJNAM, AND JCTJMR)         *\n*  *        AND CAUSES ASSEMBLY ERRORS IF IT USED.                    *\nINJMJCT  EQU    *                                                  *\n         DS     CL5                    FILLER                      *\nJCTJSTAT DS     1C                     JOB STATUS INDICATORS       *\nJCTABEND EQU    8                      BIT 4 - JCT ABEND BIT       *\n         DS     CL26                   FILLER                      *\nJCTSDKAD DS     CL4                    DISK ADDRESS OF FIRST SCT   *\n         DS     CL132                  FILLER                      *\nJCTACODE DS     CL4                    ABEND CODE FIELD            *\n***********************************************************************\n         EJECT\n         PUSH   PRINT\n         PRINT  NOGEN\nSCTDSCT  DSECT\n         IEFASCTB\nSCTSTRUN EQU    X'C0'                  STEP STARTED/ENDED BIT\n         POP    PRINT\n         IHAPSA\n         IHAASCB\nJX008    CSECT\n         SPACE  3\n         LTORG\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JX08$": {"ttr": 7948, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRBJ08 JOB  (SP,9030,0000000),'WESTERMAN   - BOX 3',\n//         CLASS=H,MSGCLASS=S,TIME=99,\n//         NOTIFY=XSPRBWW,REGION=4096K TYPRUN=HOLD\n//*\n//*\n//ASM    EXEC  PGM=IEV90,PARM=OBJECT,REGION=1200K\n//SYSLIB DD DSN=SYS1.HASPSRC,DISP=SHR,DCB=BLKSIZE=23000,\n//       VOL=SER=R12002,UNIT=SYSDA\n//       DD DSN=SYS1.MACLIB,DISP=SHR,\n//       VOL=SER=R12007,UNIT=SYSDA\n//       DD DSN=SYS1.AMODGEN,DISP=SHR,\n//       VOL=SER=R12002,UNIT=SYSDA\n//*      DD DSN=ALCATEL.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY,DCB=BLKSIZE=80\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),\n//             DSN=&&LOADSET\n//SYSIN DD DSN=XSPRBWW.POSSIBLE.MODS(JX08),DISP=SHR\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,XREF',\n//        REGION=1000K,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD DSN=ALCATEL.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSIN DD *\n  NAME JX008(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JX16": {"ttr": 7950, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\xd8\\x00\\xd8\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "SYZYGYB"}, "text": "JX016    TITLE 'BII - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: JX016                                                  *\n*                                                                     *\n* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT  *\n*                                                                     *\n* AUTHOR: BRIAN WESTERMAN                                             *\n*         BRIPER INDUSTRIES SYSTEMS CONSULTING                        *\n*                                                                     *\n*                                                                     *\n* DATE WRITTEN: AUGUST 1989                                           *\n*                                                                     *\n* FMID: HJE2330 (MVS/SP-JES2 2.2.0)                                   *\n*                                                                     *\n* PURPOSE: THIS EXIT MODIFIES THE $HASP165 MESSAGE BY ADDING EITHER   *\n*          THE MAXIMUM CONDITON CODE OF ALL THE STEPS IN A JOB OR     *\n*          THE ABEND CODE OF THE JOB.                                 *\n*                                                                     *\n* ENTRY POINT: EX016                                                  *\n*                                                                     *\n* REGISTERS ON INPUT:                                                 *\n*     R0: 0                                                           *\n*     R1: ADDRESS OF 3-WORD PARMETER LIST WITH THE FOLLOWING LAYOUT:  *\n*         WORD 1 (+0) ADDRESS OF THE MESSAGE TO BE SEND               *\n*         WORD 2 (+4) ADDRESS OF THE $WTO PARAMETER LIST              *\n*         WORD 3 (+8) ADDRESS OF THE JCT                              *\n*     R2-R10: N/A                                                     *\n*     R11: ADDRESS OF THE HCT                                         *\n*     R12: N/A                                                        *\n*     R13: ADDRESS OF THE OUTPUT PROCESSOR PCE                        *\n*     R14: RETURN ADDRESS                                             *\n*     R15: ENTRY ADDRESS                                              *\n*                                                                     *\n* REGISTERS ON RETURN:                                                *\n*     R0: N/A                                                         *\n*     R1: ADDRESS OF THE 3-WORD PARAMETER LIST                        *\n*     R15: A RETURN CODE:                                             *\n*          =0, CONTINUE NORMAL EXIT OR JES2 PROCESSING                *\n*          =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH NORMAL        *\n*              PROCESSING                                             *\n*          =8, TELLS JES2 NOT TO ISSUE THE NOTIFY $WTO                *\n*                                                                     *\n* JES2 MACROS USED:                                                   *\n*     $ENTRY, $SAVE, $RETURN, $MODEND                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nJX016    $MODULE                                                       C\n               $BUFFER,                REQ'D BY JCT                    C\n               $CAT,                   REQ'D BY HCT                    C\n               $CMB,                   REQ'D TO MAP $WTO PARM LIST     C\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C\n               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   C\n               $JCT,                   REQ'D TO GET JOBNAME, ETC.      C\n               $JQE,                   REQ'D BY HCT                    C\n               $MIT,                   REQ'D BY $MODEND, HCT           C\n               RPL,                    REQ'D BY $BUFFER                C\n               $PADDR,                 REQ'D BY $HCT                   C\n               $PCE,                   REQ'D TO GET PROCESSOR INFO     C\n               SSOB                    REQ'D FOR IEFSSJT\n         TITLE 'BII - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'\n***********************************************************************\n*                                                                     *\n*  INITIALIZATION                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE  1\nEX016    $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE  2\n         $SAVE                          SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         L     R10,8(R1)                LOAD JCT ADDRESS WAS 8(R1) 220\n         USING JCT,R10                 NEW USING BHW 220\n         SLR   R15,R15                 SET DEFAULT RETURN CODE\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THIS IS FIRST MESSAGE INDICATING END OF JOB        *\n***********************************************************************\n         SPACE 1\n         LTR   R0,R0\n         BNZ   RETURN\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE HAS     *\n*  BEEN SAVED.  IF NOT, RETURN.                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CLI   JCTUSER1,X'80'          IS JOB'S ABEND/MAX CC SAVED?\n         BNE   RETURN                  NO, RETURN\n         CLI   JCTJTFLG,SSJTJFAL    80=FAIL,IS MESSAGE TO BE ALTERED?\n         BE    RETURN                  NO, SKIP\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PREPARE TO ALTER THE NOTIFY MESSAGE.                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         L     R4,4(R1)                GET ADDRESS OF $WTO PARM LIST\n         USING CMBWTOPL,R4             ESTABLISH $CMD ADDRESSABILITY\n         SLR   R5,R5                   ZERO WORK REGISTER\n         IC    R5,CMBML                GET MESSAGE LENGTH\n         CH    R5,=H'68'               MSG TOO LONG TO UPDATE IN PLACE?\n         BH    RETURN                  YES, RETURN (SHOULDN'T HAPPEN)\n         L     R6,0(R1)                GET ADDRESS IF MESSAGE TEXT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  CHECK TO SEE IF THE JOB ABENDED.  IF IT DID, GET THE ABEND CODE.   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         TM    JCTJTFLG,SSJTABND       20=ABEND,  DID JOB ABEND?\n         BZ    MAXCONDC                NO, GO GET MAXIMUM COND CODE\n         SPACE 1\n         BCTR  R5,0\n         BCTR  R5,0\n         AR    R6,R5\n         CLI   0(R6),C' '\n         BE    NOINCR\n         LA    R6,2(R6)\n         LA    R5,2(R5)\nNOINCR   EQU   *\n         L     R2,JCTUSER1             GET ABEND CODE\n         LA    R2,0(R2)                CLEAR HIGH ORDER BYTE\n         SRL   R2,12                   OBTAIN SYSTEM CODE\n         LTR   R2,R2                   WAS IT A SYSTEM CODE ABEND?\n         BZ    USRABEND                NO, GO PROCESS USER CODE ABEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ABENDED WITH A SYSTEM ABEND CODE, COME HERE TO ALTER    *\n*  THE NOTIFY MESSAGE TO INCLUDE THE SYSTEM ABEND CODE.               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSYSABEND DS    0H\n         LA    R5,10(R5)               INCR. MSG LENGTH\n         MVC   0(10,R6),=C'SYSTEM XXX' ADD SYSTEM ABEND CODE TO MSG\n         SRDL  R2,12                   CONVERT IT TO HEX\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,7(R6)                       \"\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,8(R6)                       \"\n         SR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,9(R6)                       \"\n         B     STORELEN                GO CHECK NEW MESSAGE LENGTH\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ABENDED WITH A USER ABEND CODE, COME HERE TO ALTER THE  *\n*  NOTIFY MESSAGE TO INCLUDE THE USER ABEND CODE.                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUSRABEND DS    0H\n         LA    R5,9(R5)                INCR. MSG LENGTH\n         MVC   0(9,R6),=C'USER XXXX'   ADD USER ABEND CODE TO MSG\n         LH    R2,JCTUSER1+2           GET USER ABEND CODE\n         CVD   R2,5(R6)                CONVERT TO DECIMAL\n         UNPK  5(4,R6),5(8,R6)         UNPK FOUR LOW DIGITS\n         OI    8(R6),X'F0'             SET ZONE\n         MVC   9(2,R6),=C'  '          CLEAR TWO  BYTES\n         B     STORELEN                GO CONVERT TO DEC/PRINTABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  IF THE JOB ENDED NORMALLY, COME HERE TO ALTER THE NOTIFY MESSAGE   *\n*  TO INCLUDE THE MAXIMUM CONDITION CODE FOR ANY STEP IN THE JOB.     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMAXCONDC DS    0H\n         AR    R6,R5\n         MVC   0(20,R6),=C'- MAX COND CODE XXXX'  ADD MAXCC TO MSG\n         LA    R5,20(R5)               INCR. MESSAGE LENGTH\n         LH    R2,JCTUSER1+2           GET MAX CONDITION CODE\n         CVD   R2,16(R6)               CONVERT TO DECIMAL\n         UNPK  16(4,R6),16(8,R6)       UNPK FOUR LOW DIGITS\n         OI    19(R6),X'F0'            SET ZONE\n         MVC   20(2,R6),=C'  '         CLEAR TWO  BYTES\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  STORE NEW MESSAGE LENGTH IN CMB PARM LIST.                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSTORELEN DS    0H\n         STC   R5,CMBML                STORE MSG LEN IN CMB PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  GO BYE-BYE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRETURN   DS    0H\n        $RETURN RC=(R15)               RETURN TO CALLER\n         EJECT\nCONVTABL DC    CL16'0123456789ABCDEF'  CONVERSION TABLE\n         LTORG\n        $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JX16$": {"ttr": 8196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "SYZYGYB"}, "text": "//XSPRBJ16 JOB  (SP,9030,0000000),'WESTERMAN   - BOX 3',\n//         CLASS=H,MSGCLASS=S,TIME=99,\n//         NOTIFY=XSPRBWW,REGION=4096K TYPRUN=HOLD\n//*\n//*\n//ASM    EXEC  PGM=IEV90,PARM=OBJECT,REGION=1200K\n//SYSLIB DD DSN=SYS1.HASPSRC,DISP=SHR,DCB=BLKSIZE=23000,\n//       VOL=SER=R12002,UNIT=SYSDA\n//       DD DSN=SYS1.MACLIB,DISP=SHR,\n//       VOL=SER=R12007,UNIT=SYSDA\n//       DD DSN=SYS1.AMODGEN,DISP=SHR,\n//       VOL=SER=R12002,UNIT=SYSDA\n//*      DD DSN=ALCATEL.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY,DCB=BLKSIZE=80\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),\n//             DSN=&&LOADSET\n//SYSIN DD DSN=XSPRBWW.POSSIBLE.MODS(JX16),DISP=SHR\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,XREF',\n//        REGION=1000K,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD DSN=ALCATEL.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//*  NAME JESEX005(R)\n//*  NAME J005$DV(R)\n//*  NAME J005LOAD(R)\n//SYSIN DD *\n  NAME JX016(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J005$DV": {"ttr": 8198, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x02m\\x02m\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 621, "newlines": 621, "modlines": 0, "user": "SYZYGYB"}, "text": "         TITLE 'JES2 $DV COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $DV COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $DV        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*        THE $DV COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $D V,VVVVVV       WHERE                                      *\n*                                                                     *\n*             VVVVVV IS THE VOLSER OR PREFIX TO BE DISPLAYED          *\n*                                                                     *\n*                  OR                                                 *\n*                                                                     *\n*        $D V,@UUU         WHERE                                      *\n*                                                                     *\n*             UUU IS THE UNIT ADDRESS OR PORTION OF THE UNIT          *\n*                 ADDRESS TO BE DISPLAYED                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP900 MESSAGE WILL BE ISSUED FOR EACH VOLUME       *\n*            WHICH IS FOUND.                                          *\n*                                                                     *\n*        $HASP900 VVVVVV UUU DEVTYP MNT/ATTR USECNT                   *\n*                                                                     *\n*                                                                     *\n*        2)  THE HASP919 MESSAGE WILL BE ISSUED WHEN NO OUTPUT        *\n*            GROUP MATCHES THE SELECTION CRITERIA.                    *\n*                                                                     *\n*        $HASP919 NO VOLUME(S) FOUND                                  *\n*                                                                     *\n*                                                                     *\n*        3)  THE HASP950 MESSAGE WILL BE ISSUED WHEN AN INVALID       *\n*            OPERAND KEYWORD OR VALUE IS DETECTED.                    *\n*                                                                     *\n*        $HASP950 ......... INVALID OPERAND                           *\n*                                                                     *\n*        4)  THE HASP951 MESSAGE WILL BE ISSUED WHEN MORE THAN        *\n*            ONE OPERAND IS ENTERED.                                  *\n*                                                                     *\n*        $HASP951 TOO MANY OPERANDS                                   *\n*                                                                     *\n*        4)  THE HASP952 MESSAGE WILL BE ISSUED WHEN NO VOLSER        *\n*            IS ENTERED.                                              *\n*                                                                     *\n*        $HASP952 NO VOLSER ENTERED                                   *\n*                                                                     *\n*        5)  THE HASP999 MESSAGE WILL BE ISSUED WHEN THE L=CCA        *\n*            OPERAND SPECIFIES AN INVALID CONSOLE OR DISPLAY          *\n*            AREA.                                                    *\n*                                                                     *\n*        $HASP999 RESPONSE LOCATION L=CCA UNAVAILABLE                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ D V            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CMB         SYS1.HASPSRC                               *\n*        04)  $COMWORK     SYS1.HASPSRC                               *\n*        05)  $CWA         SYS1.HASPSRC                               *\n*        06)  $CWTO        SYS1.HASPSRC                               *\n*        07)  $ENTRY       SYS1.HASPSRC                               *\n*        08)  $GETBUF      SYS1.HASPSRC                               *\n*        09)  $FREEBUF     SYS1.HASPSRC                               *\n*        10)  $HASPEQU     SYS1.HASPSRC                               *\n*        11)  $HASPGBL     SYS1.HASPSRC                               *\n*        12)  $HCT         SYS1.HASPSRC                               *\n*        13)  $JOE         SYS1.HASPSRC                               *\n*        14)  $MIT         SYS1.HASPSRC                               *\n*        15)  $MODEND      SYS1.HASPSRC                               *\n*        16)  $MODULE      SYS1.HASPSRC                               *\n*        17)  $PADDR       SYS1.HASPSRC                               *\n*        18)  $PCE         SYS1.HASPSRC                               *\n*        19)  $RETURN      SYS1.HASPSRC                               *\n*        20)  $SAVE        SYS1.HASPSRC                               *\n*        21)  $STORE       SYS1.HASPSRC                               *\n*        22)  IAZRESPA     SYS1.AMODGEN                               *\n*        23)  IEFUCBOB     SYS1.AMODGEN                               *\n*        24)  IEZCVT       SYS1.AMODGEN                               *\n*        25)  IFGRPL       SYS1.MACLIB                                *\n*        26)  MODESET      SYS1.AMODGEN                               *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$DV  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $DV COMMAND PROCESSOR',                     X\n               $CMB,               GENERATE HASP CMB     DSECT         X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               CVT,                GENERATE MVS  CVT DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL,                GENERATE MVS  IFGRPL DSECT          X\n               UCB                 GENERATE MVS  UCB DSECT\n               SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n$DVWORK  DSECT                     COMMAND WORK AREA\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nSWITCH   DS    X                   MISCELLANEOUS BIT SWITCHES\nFOUND    EQU   X'80'               A VOLUME HAS BEEN FOUND\n*\nDEVCLASS DS    X                   IOSVSUCB DEVICE TYPE\n         DS    0D\nWRKA     DS    CL10                EXIT WORK AREA\nSCANWORK DS    CL100               IOSVSUCB SCAN WORK AREA\nUCBADDR  DS    F                   ADDRESS OF UCB\nIOSVSUCB DS    F                   ADDRESS OF IOSVSUCB ROUTINE\nSCANPARM DS    0F                  IOSVSUCB PARM LIST\nSCANP1   DS    F                   ADDRESS OF WORK AREA\nSCANP2   DS    F                   ADDRESS OF DEVICE TYPE FIELD\nSCANP3   DS    F                   ADDRESS OF UCB RETURN AREA\nMESSAGE  DS    CL100               MESSAGE WORK AREA\n*\nMSG1     EQU   MESSAGE             FIRST MESSAGE\nUNITADD  DS    CL3                 UNIT ADDRESS FOR SEARCH\nVOLSER   DS    CL6                 VOLSER FOR SEARCH\nVOLEN    DS    H                   LENGTH OF VOLSER\nDETAIL   EQU   MESSAGE,35          DETAIL LINE\nOUTVOL   EQU   MESSAGE,6           OUTPUT VOLSER\nOUTADDR  EQU   MESSAGE+8,3         OUTPUT DEVICE ADDRESS\nOUTDEVT  EQU   MESSAGE+12,6        OUTPUT DEVICE TYPE\nOUTMNT1  EQU   MESSAGE+19,4        FIRST MOUNT ATTRIBUTE\nOUTSLASH EQU   MESSAGE+23,1        CONSTANT '/'\nOUTMNT2  EQU   MESSAGE+24,5        SECOND MOUNT ATTRIBUTE\nOUTCLASS EQU   MESSAGE+30,1        OUTPUT SPECIAL CLASS\nOUTUCNT  EQU   MESSAGE+32,3        OUTPUT USE COUNT\nJ005$DV  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $DV COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$DV  $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $DV COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(2),=C'DV'   ISF IF THIS IS THE $DV COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $D V,VOLSER        OR                                        *\n*        $D V,@UUU                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING $DVWORK,R9          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$DVWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCDVNSPEC BXH   R5,R6,CDVOK         IF NO MORE EXIT\n         L     R1,0(,R5)           POINT TO OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE VOLSER OR UNITADDRESS SUBPARAMETER               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCDVVOL   L     R1,0(,R5)           POINT TO OPERAND\n         LR    R14,R1              SAVE SUBPARAMETER ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\n         MVC   VOLSER,BLANKS       SET VOLSER TO BLANKS\n         MVC   UNITADD,BLANKS      SET UNITADDRESS TO BLANKS\nCDVVOL1  CLI   0(R1),C' '          END OF SUBPARAMETER STRING\n         BE    CDVVOL2             YES, BRANCH\n         CLI   0(R1),C','          END OF SUBPARAMETER STRING\n         BE    XTRAOPND            YES, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF SUBPARAM\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CDVVOL1             LOOP\nCDVVOL2  LTR   R15,R15             TEST LENGTH\n         BZ    BADOPND             ZERO, ERROR\n         CLI   0(R14),C'@'         SEE IF UNITADDRESS SPECIFICATION\n         BE    CDVVOL3             YES, BRANCH\n         CH    R15,=H'6'           SEE IF GT 6\n         BH    BADOPND             GREATER THAN 6, ERROR\n         STH   R15,VOLEN           SAVE VOLSER LENGTH\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEVOL         SAVE VOLSER\n         EX    R15,TRTVOL          TEST VOLSER\n         BNZ   BADOPND             NOT VALID, ERROR\n         B     CDVNSPEC            GET NEXT SPECIFICATION\nCDVVOL3  BCTR  R15,0               REDUCE LENGTH BY 1 FOR @\n         LTR   R15,R15             TEST LENGTH\n         BZ    BADOPND             ZERO, ERROR\n         CH    R15,=H'3'           SEE IF GT 3\n         BH    BADOPND             GREATER THAN 3, ERROR\n         STH   R15,VOLEN           SAVE UNITADD LENGTH\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEUNIT        SAVE UNITADDRESS\n         EX    R15,TRTUNIT         TEST UNITADD\n         BNZ   BADOPND             NOT VALID, ERROR\n         B     CDVNSPEC            GET NEXT SPECIFICATION\nMOVEVOL  MVC   VOLSER(0),0(R14)    MOVE VOLSER TO SAVE AREA\nMOVEUNIT MVC   UNITADD(0),1(R14)   MOVE UNITADDRESS TO SAVE AREA\nTRTVOL   TRT   VOLSER(0),TRTBL     TEST VOLSER\nTRTUNIT  TRT   UNITADD(0),TRTBL    TEST UNITADD\nTRTBL    DC    256X'01'            VALID VOLSER OR UNITADD CHARS\n         ORG   TRTBL+C'A'\n         DC    9X'00'              A-I\n         ORG   TRTBL+C'J'\n         DC    9X'00'              J-R\n         ORG   TRTBL+C'S'\n         DC    8X'00'              S-Z\n         ORG   TRTBL+C'0'\n         DC    10X'00'             0-9\n         ORG\n         EJECT\n*****************************************************************\n*                                                               *\n*        CHECK FOR REDIRECTION OF RESPONSES                     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nCDVOK    TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\nREDIR    TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   REDIR1              SKIP AUTOMATIC L=CCA\n         LA    R1,2                LOAD REDIRECT OFFSET FOR $DV\n*                                  SAME AS FOR $DF\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    REDIR1              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    REDIR1              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*        ROUTINE TO VERIFY CONSOLE/AREA                         *\n*                                                               *\n*****************************************************************\n         SPACE 1\nREDIR1   TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BO    REDIR3              YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   REDIR2              YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nREDIR2   MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNH   REDIR3              NO, GO ISSUE ERROR MESSAGE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA(4),=X'F0212020' SET EDIT MASK\n         ED    WRKA(4),$DOUBLE+6   EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,WRKA+2      MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\nREDIR3   CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BE    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n         B     MSGGOOD             CONTINUE\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN THE UCBS FOR THE REQUESTED VOLSER(S)                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        SCAN UCB TABLE                                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMSGGOOD  CLI   VOLSER,0            SEE IF A VOLSER ENTERED\n         BE    NOOPND              NO, ERROR\nUCBLKUP  L     R1,CVTPTR           GET CVT ADDRESS\n         L     R6,CVTUCBSC-CVT(R1) POINT TO UCB SCAN SERVICE RTN\n         ST    R6,IOSVSUCB         SAVE ADDR OF UCB SCAN ROUTINE\n         MVI   DEVCLASS,UCB3DACC   SET FOR DASD UCBS ONLY\n         LA    R1,SCANWORK         LOAD ADDRESS OF SCAN WORK AREA\n         ST    R1,SCANP1           SAVE IN PARM LIST\n         LA    R1,DEVCLASS         LOAD ADDRESS OF DEVICE CLASS\n         ST    R1,SCANP2           SAVE IN PARM LIST\n         LA    R1,UCBADDR          LOAD ADDRESS OF UCB RETURN\n         ST    R1,SCANP3           SAVE IN PARM LIST\n         OI    SCANP3,X'80'        TURN ON HIGH ORDER BIT\n         XC    SCANWORK,SCANWORK   CLEAR SCAN SERVICE WORK AREA\nCDVLOOP  L     R15,IOSVSUCB        LOAD ADDR OF UCB SCAN ROUTINE\n         LA    R1,SCANPARM         LOAD ADDRESS OF UCB SCAN PARM\n         BALR  R14,R15             GO TO UCB SCAN SERVICE ROUTINE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ENDUCBS             NOT ZERO, END OF UCBS\n         L     R8,UCBADDR          LOAD UCB ADDRESS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TEST EACH UCB FOR PROPER ATTRIBUTES                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING UCBCMSEG,R8         SET ADDRESSABILITY TO UCB\n         TM    UCBTBYT3,UCB3DACC   DIRECT ACCESS?\n         BZ    CDVLOOP             NO\n         TM    UCBSTAT,UCBONLI     ONLINE?\n         BNO   CDVLOOP             NO, IGNORE DEVICE\n         CLC   UCBTBYT3(2),=X'2005' DATA CELL?\n         BE    CDVLOOP             IF SO SKIP IT\n         TM    UCBVOLI,X'FF'       ANY NAME?\n         BZ    CDVLOOP             NO, IGNORE IT\n***********************************************************************\n*                                                                     *\n*        SEE IF OUR VOLSER                                            *\n*                                                                     *\n***********************************************************************\n         LH    R1,VOLEN            LOAD VOLSER/UNITADD LENGTH\n         BCTR  R1,0                MACHINE LENGTH\nUSENAME  CLI   UNITADD,C' '        SEE IF UNITADDRESS SPECIFIED\n         BNE   USEUNIT             YES, BRANCH\n         EX    R1,EXCLC1           SEE IF THIS IS A MATCH\n         BE    USEUCB              YES, GO FORMAT THE UCB\n         B     CDVLOOP             NO, SKIP IT\n         SPACE 1\nUSEUNIT  EX    R1,EXCLC2           SEE IF THIS IS A MATCH\n         BE    USEUCB              YES, GO FORMAT THE UCB\n         B     CDVLOOP             NO, SKIP IT\n         SPACE 1\nEXCLC1   CLC   VOLSER(0),UCBVOLI   *** EXECUTE ONLY ***\nEXCLC2   CLC   UNITADD(0),UCBNAME  *** EXECUTE ONLY ***\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT UCB INFORMATION                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUSEUCB   DS    0H\n         OI    SWITCH,FOUND        TURN ON FOUND SWITCH\n         MVC   DETAIL,BLANKS       CLEAR THE DETAIL LINE\n         MVC   OUTVOL,UCBVOLI      MOVE VOLSER TO DETAIL LINE\n         MVC   OUTADDR,UCBNAME     MOVE UNIT ADDRESS TO DETAIL LINE\n         PRINT OFF\n***********************************************************************\n*                                                                     *\n*        SET THE ICM MASK FOR THE UCB USER FIELD.  IN SP SYSTEMS      *\n*        THE LENGTH IS 1.  IN XA SYSTEMS THE LENGTH IS 2.  CODE       *\n*        IS SET FOR ANY LENGTH UP TO 4.                               *\n*                                                                     *\n***********************************************************************\n         LCLA  &MASK\n&MASK    SETA  1\n         AIF   (L'UCBUSER EQ 1).LENOK\n&MASK    SETA  3\n         AIF   (L'UCBUSER EQ 2).LENOK\n&MASK    SETA  7\n         AIF   (L'UCBUSER EQ 3).LENOK\n&MASK    SETA  15\n.LENOK   ANOP\n         PRINT ON\n         XR    R1,R1               ZERO REG FOR IC\n         ICM   R1,&MASK,UCBUSER    LOAD USE COUNT\n         CVD   R1,DOUBLE           CONVERT USE COUNT TO PACKED\n         OI    DOUBLE+7,X'0F'      FIX SIGN BITS\n         UNPK  OUTUCNT,DOUBLE+6(2) MOVE USE COUNT TO DETAIL LINE\n         MVC   OUTDEVT,=CL6'3350'  SET DEVICE TYPE TO 3350\n         CLI   UCBTBYT4,X'0B'      IS THIS A 3350?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3380'  SET DEVICE TYPE TO 3380\n         CLI   UCBTBYT4,X'0E'      IS THIS A 3380?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3330-1' SET DEVICE TYPE TO 3330-1\n         CLI   UCBTBYT4,X'0D'      IS THIS A 3330-1?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3330'  SET DEVICE TYPE TO 3330\n         CLI   UCBTBYT4,X'09'      IS THIS A 3330?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3340'  SET DEVICE TYPE TO 3340\n         CLI   UCBTBYT4,X'0A'      IS THIS A 3340?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3375'  SET DEVICE TYPE TO 3375\n         CLI   UCBTBYT4,X'0C'      IS THIS A 3375?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'2305-2' SET DEVICE TYPE TO 2305-2\n         CLI   UCBTBYT4,X'07'      IS THIS A 2305-2?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'2305-1' SET DEVICE TYPE TO 2305-1\n         CLI   UCBTBYT4,X'06'      IS THIS A 2305-1?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'2314'  SET DEVICE TYPE TO 2314\n         CLI   UCBTBYT4,X'08'      IS THIS A 2314?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'UNKN'  SET DEVICE TYPE TO UNKN\nCKMNT1   MVC   OUTMNT1,=CL4'PRIV'  SET 1ST MOUNT ATTR TO PRIV\n         TM    UCBSTAB,UCBBPRV     IS IT MOUNTED PRIVATE?\n         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR\n         MVC   OUTMNT1,=CL4'STRG'  SET 1ST MOUNT ATTR TO STRG\n         TM    UCBSTAB,UCBBSTR     IS IT MOUNTED AS STORAGE?\n         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR\n         MVC   OUTMNT1,=CL4'PUBL'  SET 1ST MOUNT ATTR TO PUBL\n         TM    UCBSTAB,UCBBPUB     IS IT MOUNTED PUBLIC?\n         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR\n         MVC   OUTMNT1,=CL4'UNKN'  SET 1ST MOUNT ATTR TO UNKN\nCKMNT2   MVI   OUTSLASH,C'/'       SET SLASH CONSTANT\n         MVC   OUTMNT2,=CL5'RSDNT' SET 2ND MOUNT ATTR TO RSDNT\n         TM    UCBSTAT,UCBPRES     IS IT MOUNTED PERM RESIDENT?\n         BO    SPECLASS            YES, GO CHECK FOR SPEC CLASS\n         MVC   OUTMNT2,=CL5'RSERV' SET 2ND MOUNT ATTR TO RSERV\n         TM    UCBSTAT,UCBRESV     IS IT MOUNTED RESERVED?\n         BO    SPECLASS            YES, GO CHECK FOR SPEC CLASS\n         MVC   OUTMNT2,=CL5'UNKN'  SET 2ND MOUNT ATTR TO UNKN\nSPECLASS MVI   OUTCLASS,C'S'       SET TO SYSRES VOLUME\n         TM    UCBSTAT,UCBSYSR     IS IT THE SYSRES VOLUME?\n         BO    ENDFMT              YES, END OF FORMAT ROUTINE\n         MVI   OUTCLASS,C'P'       SET TO PAGING VOLUME\n         TM    UCBSTAB,UCBPGFL     IS IT USED AS A PAGING VOLUME?\n         BO    ENDFMT              YES, END OF FORMAT ROUTINE\n         MVI   OUTCLASS,C' '       SET TO NO SPECIAL CLASS\nENDFMT   DS    0H\n***********************************************************************\n*                                                                     *\n*        WRITE THE MESSAGE FOR THIS UCB                               *\n*                                                                     *\n***********************************************************************\n         LA    R0,35               WRITE FIRST MESSAGE\n         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\nSETFND   OI    SWITCH,FOUND        TURN ON MATCH FOUND SWITCH\n         B     CDVLOOP             GO GET ANOTHER UCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF ALL UCBS.  IF NO MESSAGES WERE ISSUED, ISSUE          *\n*        A MESSAGE THAT NO VOLUMES WERE FOUND.                        *\n*                                                                     *\n***********************************************************************\nENDUCBS  TM    SWITCH,FOUND        WAS A MATCH FOUND\n         BZ    NOUTPUT             NO, BRANCH\n         B     EXIT8               GET OUT\nNOUTPUT  $CWTO MSG='NO VOLUME(S) FOUND',MSGID=919  ISSUE MESSAGE\n         B     EXIT8               GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        INVALID $DV OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPND  L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET ERROR MSG\n         LA    R0,25               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=950    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        TOO MANY $DV OPERANDS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nXTRAOPND MVC   COMMAND(18),=C' TOO MANY OPERANDS' SET ERROR MSG\n         LA    R0,18               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=951    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        NO VOLSER ENTERED                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNOOPND   MVC   COMMAND(18),=C' NO VOLSER ENTERED' SET ERROR MSG\n         LA    R0,18               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=952    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    DS    0H\n         $FREEBUF (R9)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         SPACE 3\nBLANKS   DC    100C' '             STRING OF BLANKS\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005LOAD": {"ttr": 8452, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\xf7\\x00\\xf7\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 247, "newlines": 247, "modlines": 0, "user": "SYZYGYB"}, "text": "         TITLE 'JES2 $LOAD COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $LOAD COMMAND *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $LOAD      *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        THE $LOAD COMMAND HAS THE FOLLOWING SYNTAX:                  *\n*                                                                     *\n*        $LOAD                                                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP000 MESSAGES ARE MADE UPON COMPLETION OF         *\n*            COMMAND                                                  *\n*                                                                     *\n*        $HASP000 MODULE RELOADED                                     *\n*                                                                     *\n*        $HASP000 MODULE IS NOT IN THE LMT                            *\n*                                                                     *\n*        $HASP000 MODULE LOAD ERROR                                   *\n*                                                                     *\n*        $HASP000 MODULE INVALID                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S $ L O A D          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $COMWORK     SYS1.HASPSRC                               *\n*        04)  $CWA         SYS1.HASPSRC                               *\n*        05)  $DCT         SYS1.HASPSRC                               *\n*        06)  $ENTRY       SYS1.HASPSRC                               *\n*        07)  $HASPEQU     SYS1.HASPSRC                               *\n*        08)  $HASPGBL     SYS1.HASPSRC                               *\n*        09)  $HCT         SYS1.HASPSRC                               *\n*        10)  $JCT         SYS1.HASPSRC                               *\n*        11)  $JOE         SYS1.HASPSRC                               *\n*        12)  $JQE         SYS1.HASPSRC                               *\n*        13)  $LMT         SYS1.HASPSRC                               *\n*        14)  $MIT         SYS1.HASPSRC                               *\n*        15)  $MITETBL     SYS1.HASPSRC                               *\n*        16)  $MODEND      SYS1.HASPSRC                               *\n*        17)  $MODULE      SYS1.HASPSRC                               *\n*        18)  $PADDR       SYS1.HASPSRC                               *\n*        19)  $PCE         SYS1.HASPSRC                               *\n*        20)  $PDDB        SYS1.HASPSRC                               *\n*        21)  $PPPWORK     SYS1.HASPSRC                               *\n*        22)  $QLOC        SYS1.HASPSRC                               *\n*        23)  $QSE         SYS1.HASPSRC                               *\n*        24)  $RETURN      SYS1.HASPSRC                               *\n*        25)  $SAVE        SYS1.HASPSRC                               *\n*        26)  $SJB         SYS1.HASPSRC                               *\n*        27)  $TQE         SYS1.HASPSRC                               *\n*        28)  $XIT         SYS1.HASPSRC                               *\n*        29)  $XRT         SYS1.HASPSRC                               *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005LOAD $MODULE $HASPEQU,                                             X\n               DEB,                                                    X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL,                GENERATE HASP RPL DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $LMT,               GENERATE HASP LMT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $MITETBL,           GENERATE HASP MITETBL DSECT         X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $PIT,               GENERATE HASP PIT DSECT             X\n               $PPPWORK,           GENERATE HASP PPPWORK DSECT         X\n               $SJB,               GENERATE HASP SJB DSECT             X\n               $TQE,               GENERATE HASP TQE DSECT             X\n               $XIT,               GENERATE HASP XIT DSECT             X\n               $XRT                GENERATE HASP XRT DSECT\n         EJECT\nJ005LOAD CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $LOAD COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005LOAD $ENTRY BASE=(R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $LOAD COMMAND                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CLC   COMVERB(4),=C'LOAD'   SEE IF THIS IS THE $LOAD COMMAND\n         BNE   EXIT0                 NO. LET JES HANDLE IT\n         SPACE 1\n         USING HCT,R11               ADDRESS HCT\n         USING PCE,R13               ADDRESS PCE\n         LA    R2,COMVERB\n         LA    R0,MSGL               LOAD MESSAGE LENGTH\n         $STORE (R0)                 STORE IT IN MESSAGE AREA\n         SPACE 1\n         MVC   PCEUSER0(8),5(R2)     MOVE MODULE NAME\n         MVC   COMMAND(MSGL),MSGOK   MOVE 'OK' MESSAGE\n         MVC   COMMAND(8),PCEUSER0   MOVE MODULE NAME\n         CLC   PCEUSER0(8),EDLOAD    THIS PGM?\n         BE    EXITERR3              YES - ERROR\n         SPACE 1\n         USING LMT,R2                ADDRESS LMT\n         L     R2,$LMTADDR           LOAD LMT ADDRESS\nEXITLOD1 EQU   *\n         CLC   LMTMODNM,PCEUSER0     NAMES EQUAL?\n         BE    EXITLOD2              YES - CONTINUE\n         CLI   LMTMODNM,X'00'        END OF TABLE?\n         BE    EXITERR1              YES - ERROR\n         LA    R2,LMTLNGTH(,R2)      POINT TO NEXT ENTRY\n         B     EXITLOD1              TRY NEXT ONE\nEXITLOD2 EQU   *\n         SPACE 1\n         DELETE EPLOC=PCEUSER0,RELATED=('NEXT LOAD')\n         SPACE 1\n         LOAD  EPLOC=PCEUSER0,ERRET=EXITERR2,                          X\n               RELATED=('PREVIOUS DELETE')\n         SPACE 1\n         LTR   R0,R0                 DID WE GET IT?\n         BZ    EXITERR2              NO - ERROR\n         ST    R0,LMTMITAD           YES - STORE IT\n         B     EXITTBL               GO FILE THE XIT TABLE\n         DROP  R2\n********************************************************************\n*                     EXITTBL                                      *\n********************************************************************\nEXITTBL  EQU   *\n         L     R1,$XITADDR           GET XIT ADDRESS\n         USING XIT,R1                XIT ENTRY ADDRESSABILITY\n         USING MTE,R3                MITETBL ADDRESSABILITY\n         USING XRT,R2                XRT ENTRY ADDRESSABILITY\n         LA    R4,256                GET NO. OF XIT ENTRIES\n         LR    R6,R0                 SAVE MIT ADDRESS\nEXITTBL1 ICM   R2,15,XITXRTAD        GET NEXT XRT POINTER\n         BZ    EXITTBL6              IF NO XRT, SKIP\n         SPACE 1\n         SLR   R5,R5                 CLEAR FOR INSERT\n         IC    R5,XIT#RTNS           GET NO. OF RTNS IN XRT\nEXITTBL2 L     R3,MITENTAD-MIT(,R6)  GET MITETBL ADDRESS\nEXITTBL3 CLI   MTENAME,X'FF'         IS THIS THE END OF THE TABLE\n         BE    EXITTBL5              YES - GO GET NEXT XRTE\n         CLC   XRTRNAME,MTENAME      IS ROUTINE NAME IN MIT?\n         BE    EXITTBL4              YES - UPDATE XRT\n         LA    R3,MTELEN(,R3)        POINT TO NEXT MITETBL ENTRY\n         B     EXITTBL3              NO - LOOP TO NEXT ENTRY\nEXITTBL4 MVC   XRTRADDR,MTEADDR      SET ROUTINE ADDR IN XRT\n         SPACE 1\nEXITTBL5 LA    R2,XRTLNGTH(,R2)      BUMP TO NEXT XRT ENTRY\n         BCT   R5,EXITTBL2            UNTIL ENTIRE XRT DONE\nEXITTBL6 LA    R1,XITLNGTH(,R1)      BUMP TO NEXT XIT ENTRY\n         BCT   R4,EXITTBL1            UNTIL ENTIRE XIT DONE\n         B     EXIT16\n********************************************************************\n*                     EXITERR                                      *\n********************************************************************\nEXITERR1 EQU   *\n         MVC   COMMAND(MSGL),MSGERR1 MOVE 'NOT LOADED' MSG\n         MVC   COMMAND(8),PCEUSER0   MOVE MODULE NAME\n         B     EXIT16\nEXITERR2 EQU   *\n         MVC   COMMAND(MSGL),MSGERR2 MOVE 'NOT FOUND' MSG\n         MVC   COMMAND(8),PCEUSER0   MOVE MODULE NAME\n         B     EXIT16\nEXITERR3 EQU   *\n         MVC   COMMAND(MSGL),MSGERR3 MOVE 'INVALID' MSG\n         MVC   COMMAND(8),PCEUSER0   MOVE MODULE NAME\n         B     EXIT16\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT16   LA    R15,16              LOAD RETURN CODE\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n********************************************************************\n*                  DATA AREAS                                      *\n********************************************************************\nEDLOAD   DC    CL8'J005LOAD'\nMSGOK    DC    C'XXXXXXXX RELOADED             '\nMSGERR1  DC    C'XXXXXXXX IS NOT IN THE LMT    '\nMSGERR2  DC    C'XXXXXXXX LOAD ERROR           '\nMSGERR3  DC    C'XXXXXXXX INVALID              '\nMSGL     EQU   *-MSGERR3\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MCS": {"ttr": 8457, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x04\\x1b\\x04\\x1b\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 1051, "newlines": 1051, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BMCS   JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=A\n//  EXEC ASMFCL,\n//     MAC1='SYS1.AMODGEN',\n//     PARM.ASM='OBJ',\n//     PARM.LKED='NCAL,LET,AC=1'\nDIDOCS   TITLE 'D I D O C S - SIMULATE OS CONSOLE FOR TSO USER '\n*        AUTOUPDATE MODE WORKS WITH SNA AND NON SNA SYSTEMS\n*\n*\n*        NEED AMODGEN FOR IEECUCM AND CVT.\n*        REAL CODE STARTS ABOUT 694 LINES DOWN FROM HERE\n         MACRO\n&NAME    PGM   &BASE=R12,&SAVE=$$SAVE,&START=$$START,&EOJ=$$EOJ,&RC=16\n&NAME    CSECT\n         B     14(0,R15)           BRANCH AROUND PROGRAM ID.\n         DC    AL1(8)              CSECT NAME LENGTH.\n         DC    CL8'&NAME'          CSECT IDENTIFIER.\n         DC    X'FF'               FILLER.\n         STM   R14,R12,12(R13)     STORE THE REGISTERS.\n         LR    &BASE,R15           ESTABLISH ADDRESSABILITY.\n         USING &NAME,&BASE         TELL ASSEMBLER ABOUT BASE REGISTER.\nR0       EQU   0                   REGISTER 0.\nR1       EQU   1                   REGISTER 1.\nR2       EQU   2                   REGISTER 2.\nR3       EQU   3                   REGISTER 3.\nR4       EQU   4                   REGISTER 4.\nR5       EQU   5                   REGISTER 5.\nR6       EQU   6                   REGISTER 6.\nR7       EQU   7                   REGISTER 7.\nR8       EQU   8                   REGISTER 8.\nR9       EQU   9                   REGISTER 9.\nR10      EQU   10                  REGISTER 10.\nR11      EQU   11                  REGISTER 11.\nR12      EQU   12                  REGISTER 12.\nR13      EQU   13                  REGISTER 13.\nR14      EQU   14                  REGISTER 14.\nR15      EQU   15                  REGISTER 15.\n         LA    R15,&SAVE           ADDRESS OF OUR SAVE AREA.\n         ST    R13,4(R15)          BACKWARD SAVE AREA CHAIN.\n         ST    R15,8(R13)          FORWARD SAVE AREA CHAIN.\n         LR    R13,R15             POINT R13 TO CURRENT SAVE AREA.\n         B     &START              BRANCH TO ENTRY CODE.\n&EOJ     CH    R15,$$RC            IS RETURN CODE HIGHER THAN &RC?\n         BNH   *+6                 YES - LETS ZERO R15.\n         SR    R15,R15             ZERO OUT REGISTER 15.\n         L     R13,&SAVE+4         POINT R13 TO PREVIOUS SAVE AREA.\n         L     R14,12(R13)         RESTORE REGISTER 14.\n         LM    R0,R12,20(R13)      RESTORE THE REGISTERS.\n         BR    R14                 RETURN TO OS.\n&SAVE    DS    18F                 OUR SAVE AREA.\n$$RC     DC    H'&RC'              RETURN CODE.\n$$START  DS    0H                  DEFAULT ENTRY POINT.\n         MEND\n         MACRO\n         IEERDCM\n*     01/15/73          LEVEL=05                              MB Y02958\nDCMTSRT  DSECT DCMTSPTR\nDCMADTRN DS    A                   POINTER TO PAGABLE DCM\n         DS    CL1                 RESERVED\nDCMRFLGS DS    BL1                 FLAGS\nDCMDOM   EQU   X'10'               DOM MUST BE TRIED\nDCMNIPP  EQU   X'08'               DCM WAS USED BY NIP\nDCMLEN   DS    H                   LENGTH OF PAGABLE DCM\nDCMADKP  DS    A                   ADDRESS OF ROUTED K COMMAND\n*                                   PARAMETER LIST\nDCMTOPAR DS    CL1                 TOP DISPLAY AREA DEFINED\nDCMTOPDS DS    CL1                 TOP DISPLAY ON SCREEN\n         DS    BL1                 RESERVED\nDCMDEVTY DS    BL1                 DEVICE TYPE FLAGS\nDCMTY60  EQU   X'80'               USABLE FOR SD\nDCMTY50  EQU   X'40'               NOT USABLE FOR SD\nDCMADSDS DS    A                   POINTER TO FIRST SDS SUPPORT AREA\nDCMRMS   DS    CL1                 NUMBER OF CCWS TO WRITE\nDCMADRMS DS    AL3                 POINTER TO RMS CCWS\nDCMWLAST DS    A                   PT CON Q ENTRY LAST OUT (O-O-L)\nDCMRMSAL DS    H                   NUMBER LINES IN MSG AREA\nDCMDOMKY DS    H                   CONSOLE DOM ELEMENT        MC XM5812\nDCMSUBAD DS    A                   POINTER TO SUB CONTROL BLOCK\nDCMADMFK DS    A                   POINTER TO RESIDENT PFK AREA\nDCMINTVL DS    H                   INTERVAL FOR THIS DCM\nDCMTMCTR DS    H                   TIME COUNTER FOR THIS DCM\nDCMR2FLG DS    BL1                 TIMER FLAGS\nDCMRXSFL EQU   X'80'               FULL SCREEN FLAG\nDCMRXUNV EQU   X'40'               UNVIEWABLE MESSAGE DISPLAYED\nDCMRXTMR EQU   X'20'               TIMER FLAG\nDCMRXRLL EQU   X'10'               READY TO ROLL\nDCMRXDEL EQU   X'08'               PENDING DELETE REQUEST\nDCMRXTIM EQU   X'02'               TIMER ELAPSED FOR THIS DISPLAY\nDCMR3FLG DS    BL1                 MISC FLAGS\nDCMSTSWT EQU   X'80'               CHANGING STATUS OF OUTPUT ONLY CON\nDCMKVIP  EQU   X'40'               ENTRY FOR K VARY COMMAND\nDCMCLPR  EQU   X'20'               CLOSE IN PROCESS\nDCMRXSCN EQU   X'10'               ASY ERROR MESSAGE ON SCREEN\nDCMR3PKA EQU   X'08'               DA I/O COMPLETE\nDCMRXHMT EQU   X'04'               FULL SCREEN SIMULATED      MC YM4102\n         DS    H                   RESERVED\nDCMRQDEL DS    A                   DELETE REQUEST BUFFER\n         DS    A                   DELETE REQUEST BUFFER\nDCMMSGSV DS    A                   POINTER TO SAVED NIP MESSAGES\nDCMPACB  EQU   *                   SACB PREFIX\nDCMPLN   DS    FL2                 SYSGEN LENGTH OF AREA\nDCMPLNPR DS    H                   LENGTH OF SACB PREFIX-IN BYTES\nDCMPRSZ  EQU   *-DCMPACB           SIZE OF PREFIX\nDCMACB   EQU   *                   SACB\nDCMACBNX DS    A                   POINTER TO NEXT SACB\nDCMAID   DS    CL1                 AREA ID\nDCMASACB DS    BL1                 SACB FLAGS\nDCMAUSE  EQU   X'80'               AREA PRESENTLY DEFINED     MB Y02958\n*    IF DCMAUSE IS OFF, A SYSGEND AREA HAS BEEN FREED E.G. K A,NONE\nDCMAGM   EQU   X'40'               GETMAINED SACB\nDCMALN   DS    FL2                 LENGTH OF AREA\nDCMATOP  DS    FL1                 TOP ROW OF AREA\nDCMACLR  EQU   *                   REINITIALIZED PORTION      MB Y02958\nDCMAROW  DS    FL1                 ROW TO BE WRITTEN NEXT\nDCMAFR   DS    H                   FRAME ON SCREEN\nDCMAMJWQ DS    A                   POINTER TO CON Q ENTRY FOR MAJOR\nDCMAMIN  DS    A                   POINTER TO MINOR WQE\nDCMATIME DS    F                   TIME CONTROL LINE WAS WRITTEN\nDCMAMT   DS    XL2                 RESERVED                   MB Y02958\nDCMAFLG1 DS    XL1                 AREA FLAGS1\nDCMADISP EQU   X'40'               DISPLAY IN AREA\nDCMADEND EQU   X'20'               END OF DISPLAY ON SCREEN\nDCMAFRPR EQU   X'10'               FRAMING IN PROGRESS\nDCMAFULL EQU   X'08'               FRAME FULL\nDCMABL   EQU   X'04'               BLANKING TO BE DONE\nDCMAFLG2 DS    XL1                 AREA FLAGS 2\nDCMALMIN EQU   X'80'               SAVED POINTER TO LAST MINOR OUTPUT\nDCMAWCON EQU   X'40'               WRITE CONTROL LINE\nDCMARCON EQU   X'20'               REWRITE CONTROL LINE\nDCMAMJFR EQU   X'10'               MAJOR WQE HAS BEEN FOUND\nDCMADFLG DS    XL1                 DYNAMIC DISPLAY FLAGS      MB Y02958\nDCMADD   EQU   X'80'               TRACK IN AREA              MB Y02958\nDCMAHOLD EQU   X'40'               TRACK IN HOLD MODE         MB Y02958\nDCMACSIB EQU   X'20'               TRACK WITH CONTINUATION LINE IN     *\n                                   SCREEN IMAGE BUFFER        MB Y02958\nDCMATRCK DS    X                   TRACK REQUEST INDICATORS   MB Y02958\nDCMATJOB EQU   X'80'               TRACK JOBS                 MB Y02958\nDCMATJBL EQU   X'40'               TRACK JOBS,LIST            MB Y02958\nDCMATTS  EQU   X'08'               TRACK TS                   MB Y02958\nDCMATTSL EQU   X'04'               TRACK TS,LIST              MB Y02958\nDCMATA   EQU   X'88'               TRACK A                    MB Y02958\nDCMATAL  EQU   X'44'               TRACK A,LIST               MB Y02958\nDCMAUTME DS    XL2                 UTME=NNN VALUE             MB Y02958\nDCMATECB DS    F                   TRACK CANCEL ECB ADDRESS   MB Y02958\nDCMAPAD  DS    F                   RESERVED                   MB Y02958\nDCMACBND EQU   *                   SACB END\nDCMCLRLN EQU   *-DCMACLR           LENGTH FOR REINITIALIZING  MB Y02958\nDCMACBSZ EQU   *-DCMACB            SACB SIZE\nDCMREND  DS    0C                  END OF DCM\n         MEND  , */\n         MACRO\n         IEETDCM\n*     12/15/72          LEVEL=04\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                         WORK AND SAVE AREAS                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDCMSTRT  DSECT DCMSTPTR\n         DS    0F                  FULL WORD ALIGNMENT\n         DS    H                   DCM LENGTH\n         DS    H                   PADDING\n         SPACE 4\nDCMFLG1  DS    BL1                 DCM AREA INDICATORS\n         SPACE 2\nDCMOUTPT EQU   X'02'               DCM UPDATED FOR OUTPUT ONLY\n         SPACE 4\nDCMATI   DC    X'00'               SAVED UCB ATTN INDEX      MC SA55058\n         DC    AL2(0)              RESERVED                  MC SA55058\n         SPACE 2\nDCMWTINT DS    A                   DCMWTINT INITIAL VALUE\nDCMLNCNT DS    H                   NUMBER OF LINES TO BLANK  MC SA53462\nDCMLNNUM DC    X'00'               FIRST LINE TO BLANK       MC SA53462\n         DC    X'00'               RESERVED                  MC SA53462\nDCMPACK  DS    F                   AREA TO PLACE NUMBER FOR PACKING\nDCMCVBIN DS    F                   AREA FOR CONVERSION TO BINARY\n         SPACE 2\nDCMTIMES DS    BL1                 TIME RTNS INDICATOR BYTE\n         SPACE 2\nDCMTIMER EQU   X'80'               TIME ELAPSED FOR THIS DISPLAY\nDCMOPTTI EQU   X'40'               OPTIONS TO TI RTN\nDCMOTTMM EQU   X'10'               OPTIONS OR TI RTNS TO MSG MODULE\nDCMTASYN EQU   X'04'               TIMER SET FOR ASYNC ERROR MSG\nDCMOCTTI EQU   X'02'               OPEN-CLOSE TO TI RTN\nDCMRMTTI EQU   X'01'               ROLL MODE TO TIMER ROUTINE\n         EJECT\n         DS    XL1                 UNUSED\n         SPACE 2\nDCMELGN  DS    H                   ENTRY AREA LAST CHARACTER POINTER\n         SPACE 2\nDCMBUFAD DS    A                   POINTER TO BUFFER ADDRESS TABLE\nDCMDOMPK DS    A                   ADDRESS OF FIRST DOM NUMBER\nDCMAMTAB DS    A                   ADDRESS OF FIRST SCT ENTRY\nDCMADSEC DS    A                   ADDRESS OF FIRST SSCT ENTRY\nDCMADDRL DS    A                   ADDRESS OF LAST SCT ENTRY\nDCMASCRN DS    A                   POINTER TO SCREEN IMAGE BUFFER\nDCMLSCRN DS    A                   POINTER TO LAST BUFFER LINE\nDCMWTBUF DS    A                   SCREEN LENGTH POINTER\nDCMAINS  DS    A                   POINTER TO INSTRUCTION LINE\nDCMAENTR DS    A                   POINTER TO ENTRY AREA\nDCMAWARN DS    A                   POINTER TO WARNING LINE\nDCMADCHP DS    A                   ADDRESS OF CHANNEL PROGRAM AREA\nDCMPFKLN DS    A                   POINTER TO PFK LINE\nDCMCXSVE DS    F                   CXSA SAVE AREA\nDCMADOPN DS    A                   ADDRESS OF COMMAND OPERAND\nDCMDSAV  DS    5F                  SAVE AND WORK AREA\n         SPACE 2\n*           INPUT BUFFER FOR ISSUING SVC 34 AND SVC 35                *\n*           FIELDS DCMWQEXP THROUGH DCMINPUT MUST REMAIN IN ORDER     *\nDCMWQEXP DS    0F                  ENSURE FULL WORD BOUNDARY\nDCMINLGN DS    H                   FIELD FOR INPUT LENGTH\nDCMMCSFL DS    H                   MCS FLAGS FIELD\nDCMINPUT DS    32F                 INPUT MESSAGE TEXT\n         SPACE 2\nDCMLGNTH DS    H                   LENGTH OF A LINE\nDCMBAINC DS    H                   ADDRESS TO INSERT CURSOR\nDCMIRCTR DS    H                   INTERVENTION REQ'D MSG COUNTER\nDCMBADLN DS    H                   BUFFER ADDR TO BEGIN MSG WRITE\nDCMBYTCT DS    H                   NUMBER OF BYTES TO WRITE\nDCMADNUM DS    H                   NEXT LINE NUMBER\nDCMAXLGN DS    H                   MAXIMUM LINE LENGTH\nDCMMSGAL DS    H                   NUMBER OF LINES IN MESSAGE AREA\nDCMRMINC DS    H                   INCREMENT INTO RMI\nDCMSCTCN DS    H                   LENGTH OF ONE SCT ENTRY\nDCMCORLN DS    H                   LENGTH OF DCM LINE IN CORE\n         DS    H                   TIME COUNTER\nDCMPFKNM DS    XL1                 NUMBER OF KEY BEING PROCESSED\nDCMPFKKN DS    XL1                 LIST KEY NUMBER\n         EJECT\nDCMDEL   DS    CL2                 DEL VALUE\nDCMCON   DS    CL1                 CON VALUE\nDCMSEG   DS    FL1                 SEG VALUE\nDCMDL    DS    FL1                 DISPLAY AREA OPTION\nDCMRNUM  DS    FL1                 ROLL NUMBER VALUE\nDCMRTME  DS    H                   ROLL TIME VALUE\n         SPACE 2\n*  DEFAULT VALUES FOR OPTIONS\nDCMSEGDF DS    FL1                 SEG DEFAULT\nDCMRNUMD DS    FL1                 RNUM DEFAULT\nDCMRTMED DS    H                   RTME DEFAULT\n         SPACE 2\nDCMASKEN DS    XL1                 ENTER MASK\nDCMASKCN DS    XL1                 CANCEL MASK\nDCMASKCR DS    XL1                 CURSOR MASK\nDCMASKLP DS    XL1                 LIGHT PEN MASK\nDCMASKPF DS    XL1                 PFK MASK\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                         COMMUNICATIONS AREA                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nDCMOPTST DS    BL1                 STATUS OF SCREEN CONTROL OPTIONS\n         SPACE 2\nDCMOPTVR EQU   X'80'               DELETE VERIFICATION  CON=(Y=1,N=0)\nDCMOPTAD EQU   X'40'               AUTOMATIC DELETION   DEL=(Y=1,N=0)\nDCMOPTSG EQU   X'20'               DEFAULT SEGMENT SPECIFIED  SEG=(0=0)\nDCMOPRLL EQU   X'10'               ROLL MODE  (Y=1,N=0)\n         SPACE 4\nDCMCS    DS    BL1                 OPEN/CLOSE REQUEST\n         SPACE 2\nDCMCSC   EQU   X'80'               CLOSE REQUEST\nDCMCSO   EQU   X'40'               OPEN REQUEST\n         SPACE 4\nDCMUTILT DS    BL1                 RESERVED\n         SPACE 2\nDCMUTILA EQU   X'80'               THESE BITS ARE\nDCMUTILB EQU   X'40'                 INITIALIZED AND USED\nDCMUTILC EQU   X'20'                 SOLELY WITHIN\nDCMUTILD EQU   X'10'                 EACH MODULE\nDCMUTILE EQU   X'08'               THEY ARE NEVER\nDCMUTILF EQU   X'04'               USED FOR INTERFACE\nDCMTEST1 EQU   X'02'               FOR TESTING\nDCMTEST2 EQU   X'01'               FOR TESTING\n         SPACE 4\nDCMDSTAT DS    BL1                 CURRENT DISPLAY STATUS\n         SPACE 2\nDCMDSTNM EQU   X'20'               MESSAGES ARE NUMBERED\nDCMDSTNH EQU   X'10'               MSGS NUMBERED - HOLD OPTION\nDCMDSINR EQU   X'08'               INTERVENTION REQ'D DELETION TRIED\nDCMDSAUT EQU   X'04'               AUTOMATIC DELETION TRIED\n         SPACE 4\nDCMMCSST DS    BL1                 MCS INTERFACE BYTE\n         SPACE 2\nDCMDUSE  EQU   X'80'               OUR SUPPORT IN CONTROL\nDCMOOMSS EQU   X'04'               MESSAGE STREAM ENTRY\nDCMOOSDS EQU   X'01'               STATUS DISPLAY ENTRY\n         SPACE 4\nDCMIOUNQ DS    BL1                 UNIQUE IO BYTE\n         SPACE 2\n*  UNIQUE INTERFACE BITS FOR 2260\nDCMIO226 EQU   X'80'               RMI PERFORMED\nDCMRPCUR EQU   X'40'               ADVANCE CURSOR TO BLANKS\nDCMFRSCN EQU   X'20'               PUT OUTPUT IN HOLD MODE\n*  UNIQUE INTERFACE BITS FOR 2250\nDCMRDARM EQU   X'10'               PERFORM READ AFTER RMI\nDCMW2250 EQU   X'08'               DEVICE IS 2250\nDCMINNOR EQU   X'04'               NORMAL INSTRUCTION LINE\nDCMINERR EQU   X'02'               ERROR INSTRUCTION LINE\n         SPACE 4\nDCMIOCM1 DS    BL1                 IO COMMUNICATIONS BYTE 1\n         SPACE 2\nDCMDORMI EQU   X'80'               ISSUE RMI\nDCMSOUND EQU   X'40'               SOUND ALARM\nDCMWRWRN EQU   X'20'               WRITE WARNING LINE\nDCMWRMSG EQU   X'10'               WRITE FULL MESSAGE AREA\nDCMWRPAR EQU   X'08'               WRITE PARTIAL MESSAGE AREA\nDCMWRINS EQU   X'04'               WRITE INSTRUCTION LINE\nDCMWRENT EQU   X'02'               WRITE ENTRY AREA\nDCMINSC  EQU   X'01'               INSERT CURSOR\n         EJECT\nDCMIOCM2 DS    BL1                 IO COMMUNICATIONS BYTE 2\n         SPACE 2\nDCMBLENT EQU   X'80'               BLANK ENTRY AREA\nDCMBLWRL EQU   X'40'               BLANK LEFT HALF WARNING LINE\nDCMBLWRR EQU   X'20'               BLANK RIGHT HALF WARNING LINE\nDCMINSSH EQU   X'10'               INIT AND SHIFT INSTRUCTION LINE\nDCMWINFD EQU   X'08'               WRITE INFORMATIONAL DISPLAY\nDCMERASE EQU   X'04'               PERFORM ERASE\nDCMIOCRD EQU   X'02'               PERFORM READ (2250,22DOC)\nDCMWRASY EQU   X'01'               WRITE ASYNC ERROR MSG TO MID-SCREEN\n         SPACE 4\nDCMIOCM3 DS    BL1                 IO COMMUNICATIONS BYTE 3\n         SPACE 2\nDCMOPRMI EQU   X'80'               RMI AFTER OPEN TO UNLOCK KEYBOARD\nDCMSSRG  EQU   X'40'               SUPPRESS START REGENERATION\nDCMWRPFK EQU   X'10'               DCM WRITE PFK AREA\nDCMPFKAT EQU   X'08'               PFK ATTENTION\nDCMRDPFK EQU   X'04'               PFK AREA READ\nDCMACPFK EQU   X'02'               TURN ACTIVE PFK LIGHTS ON\nDCMLTPFK EQU   X'01'               TURN ALL PFK LIGHTS ON\n         SPACE 4\nDCMLINEN DS    XL1                 LINE NUMBER TO BEGIN WRITE\n         SPACE 2\nDCMCULNO DS    XL1                 LINE IN ENTRY AREA TO INSERT CURSOR\n         SPACE 2\nDCMPOSCU DS    XL1                 POSITION TO INSERT CURSOR\n         SPACE 4\nDCMASYNC DS    BL1                 ASYN ERROR COMMUNICATIONS/RETRY BYTE\n         SPACE 2\nDCMASDA  EQU   X'40'               RETRY BIT\nDCMASIN  EQU   X'20'               RETRY BIT\nDCMASBA  EQU   X'10'               RETRY BIT\nDCMASLOG EQU   X'08'               LOG ASYNCHRONOUS ERROR\n         EJECT\nDCMCOM1  DS    BL1                 COMMUNICATIONS BYTE\n         SPACE 2\nDCMLPENT EQU   X'80'               ENTER BY LP OR CURSOR\nDCMIOPRD EQU   X'40'               READ PERFORMED\nDCMCOMRM EQU   X'20'               RMI PERFORMED\nDCMCOMAU EQU   X'10'               PERFORM AUTO DELETE\nDCMCOMRD EQU   X'08'               PERFORM REGULAR DELETE\nDCMCOMNM EQU   X'04'               NUMBER MESSAGES\nDCMCANCL EQU   X'01'               INDICATE CANCEL TO COMMAND ROUTINE\n         SPACE 3\nDCMCOM2  DS    BL1                 COMMUNICATIONS BYTE\n         SPACE 2\nDCMCM2I  EQU   X'80'               INPUT TO BE PROCESSED\nDCMSPLIT EQU   X'40'               MSG TO BE SPLIT\nDCMCOMAR EQU   X'20'               ACCEPTED REPLY\nDCMERPF  EQU   X'08'               ERASE PERF-PROC CAN NOW CLOSE DEVICE\nDCMCMIN5 EQU   X'04'               RETURN TO INTER. 5 FOR BLNK\nDCMCBLNK EQU   X'02'               BLANKING REQUIRED\nDCMAE    EQU   X'01'               CLEANUP FOR ASY ERROR\n         SPACE 3\nDCMCOM3  DS    BL1                 COMMUNICATIONS BYTE\n         SPACE 2\nDCMCDSP3 EQU   X'80'               DISPLAY 3 COMPLETED WORK\nDCMRTPFK EQU   X'40'               RETURN TO PFK ROUTINE\nDCMVLPFK EQU   X'20'               VERIFYING LAST COMMAND\nDCMXINT1 EQU   X'10'               ENTRY FOR INTERFACE 1 ROUTINE\nDCMOLUNV EQU   X'08'               O-O-L MSG CAUSED UNVIEW. MSG.\nDCMPFKWR EQU   X'04'               WRITE PFK UPDATES TO LIB\nDCMOLHLD EQU   X'02'               OUT OF LINE MESSAGES HELD  MB Y02958\nDCMCMIN7 EQU   X'01'               RETURN TO INTER. 7 FOR BLANKING\n         SPACE 3\nDCMCMSG1 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 1\n         SPACE 2\nDCMMSGWT EQU   X'80'               MOVE IN MESSAGE WAITING\nDCMUNMSG EQU   X'40'               MOVE IN UNVIEWABLE MESSAGE\nDCMSTEX  EQU   X'20'               MOVE IN STATUS EXISTS\nDCMCHOPT EQU   X'10'               MOVE IN CHANGE OPTIONS\nDCMELONG EQU   X'08'               MOVE IN ENTRY TOO LONG\nDCMWRCDL EQU   X'04'               MOVE IN CON=N,DEL=Y\nDCMDELNT EQU   X'02'               MOVE IN DEL UNCHANGED, NO TIMER\n         EJECT\nDCMCMSG2 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 2\n         SPACE 2\nDCMDLREQ EQU   X'80'               MOVE IN DELETION REQUESTED\nDCMRQINC EQU   X'40'               MOVE IN REQUEST INCONSISTENT\nDCMMSGCR EQU   X'20'               MOVE IN INVALID CURSOR OPERATION\nDCMINVOP EQU   X'10'               MOVE IN INVALID OPERAND\nDCMCILLP EQU   X'08'               MOVE IN ILLEGAL LP OPERATION\nDCMDELRI EQU   X'04'               MOVE IN DELETE REQUEST INCONSISTANT\nDCMASYRT EQU   X'02'               MOVE IN ASYN ERROR RETRYABLE\nDCMASYCD EQU   X'01'               MOVE IN ASYN ERROR MAYBE RETRYABLE\n         SPACE 4\nDCMCMSG3 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 3\n         SPACE 2\nDCMCMRLL EQU   X'80'               MOVE IN ROLL MODE MESSAGE\nDCMCDLR1 EQU   X'40'               NO DELETABLE MESSAGES\nDCMCDLR2 EQU   X'20'               INVALID RANGE\nDCMCDLR3 EQU   X'10'               SEG EQU TO ZERO\nDCMCDLR4 EQU   X'08'               DISPLAY NOT ON SCREEN\nDCMCDLR5 EQU   X'04'               INVALID OPERAND\nDCMDTBSY EQU   X'01'               COMMAND REJECTED - TASK BUSY\n         SPACE 4\nDCMCMSG4 DS    BL1                 MSG MODULE COMMUNICATIONS BYTE 4\n         SPACE 2\nDCMPFKNA EQU   X'80'               MOVE IN PFK NOT ALLOCATED FOR\nDCMPFKND EQU   X'40'               MOVE IN PFK NOT DEFINED\nDCMPFKNO EQU   X'20'               MOVE IN NO PFK ALLOCATION\nDCMPFKIP EQU   X'10'               MOVE IN PFK IN PROCESS\n         SPACE 4\nDCMSVC34 DS    BL1                 SVC 34 COMMUNICATION BYTE\n         SPACE 2\nDCMMYCMD EQU   X'80'               COMMAND TO BE HANDLED BY THIS CONS\nDCMINVLD EQU   X'40'               INVALID K COMMAND\nDCMTYPE1 EQU   X'20'               K COMMAND IS NOT ROUTABLE\n         SPACE 2\nDCMPAD   DS    X                   RESERVED COMMUNICATION BYTE   Y02958\nDCMIONDX DS    X                   INDEX FOR SELECTING THE    MB Y02958\n*                                  APPROPRIATE I/O ROUTINE    MB Y02958\n*                                  X'04' - M/165 CONSOLE      MB Y02958\n*                                  X'08' - 2250               MB Y02958\n*                                  X'0C' - 2260               MB Y02958\n*                                  X'10' - 3277               MB Y02958\nDCMTEST  DS    H                   RESERVED FOR TESTING       MB Y02958\n         EJECT\n**                                                                   **\n*                        MODULE ADDRESSES                             *\n**                                                                   **\n         SPACE 1                                              MB Y02958\nDCMIORTN DS    F                   APPROIATE I/O ROUTINE      MB Y02958\n*                  NAME   TRACE ID   DESCRIPTION              MB Y02958\n*                 IEECVETH    EH   3066(M/165) IO ROUTINE     MB Y02958\n*                 IEECVETP    EP   2250 IO ROUTINE            MB Y02958\n*                 IEECVETR    ER   2260 IO ROUTINE            MB Y02958\n*                 IEECVETU    EU   3277 IO ROUTINE            MB Y02958\n         SPACE 1                                              MB Y02958\n*                  NAME   TRACE ID   DESCRIPTION              MB Y02958\nDCMNPRZ  DS    F  IEECVFT1    F1   PROCESSOR 0 LOAD ONE       MB Y02958\nDCMNPROC DS    F  IEECVET1    E1   PROCESSOR ROUTINE LOAD ONE MB Y02958\nDCMNDSP1 DS    F  IEECVET2    E2   DISPLAY ROUTINE 1          MB Y02958\nDCMNDSP2 DS    F  IEECVET3    E3   DISPLAY ROUTINE 2          MB Y02958\nDCMNDSP3 DS    F  IEECVFT2    F2   DISPLAY ROUTINE 3          MB Y02958\nDCMNCMD1 DS    F  IEECVET4    E4   COMMAND ROUTINE 1          MB Y02958\nDCMNDEL1 DS    F  IEECVET6    E6   DELETE ROUTINE 1           MB Y02958\nDCMNDEL2 DS    F  IEECVET7    E7   DELETE ROUTINE 2           MB Y02958\nDCMNDEL3 DS    F  IEECVET8    E8   DELETE ROUTINE 3           MB Y02958\nDCMNDEL4 DS    F  IEECVET9    E9   DELETE ROUTINE 4           MB Y02958\nDCMNOPT1 DS    F  IEECVETA    EA   OPTIONS ROUTINE 1          MB Y02958\nDCMNPFK1 DS    F  IEECVFTA    FA   PFK ROUTINE 1              MB Y02958\nDCMNPFK2 DS    F  IEECVFTB    FB   PFK ROUTINE 2              MB Y02958\nDCMNERRO DS    F  IEECVETC    EC   ASYNCHRONOUS ERROR ROUTINE MB Y02958\nDCMNMSG1 DS    F  IEECVETD    ED   MESSAGE ROUTINE 1          MB Y02958\nDCMNMSG2 DS    F  IEECVETE    EE   MESSAGE ROUTINE 2          MB Y02958\nDCMNMSG3 DS    F  IEECVFTD    FD   MESSAGE ROUTINE 3          MB Y02958\nDCMNLPCR DS    F  IEECVETF    EF   LIGHT PEN/CURSOR SERVICE   MB Y02958\nDCMNOPCL DS    F  IEECVETG    EG   OPEN-CLOSE ROUTINE         MB Y02958\nDCMNCLN  DS    F  IEECVFTG    FG   CLEANUP MODULE             MB Y02958\nDCMNROLL DS    F  IEECVETJ    EJ   ROLL MODE ROUTINE          MB Y02958\nDCMNTIMR DS    F  IEECVETK    EK   TIMER INTERPRETER ROUTINE  MB Y02958\nDCMNINT1 DS    F  IEECVFTL    FL   INTERFACE 1 ROUTINE        MB Y02958\nDCMNINT2 DS    F  IEECVFTM    FM   INTERFACE 2 ROUTINE        MB Y02958\nDCMNINT3 DS    F  IEECVFTN    FN   INTERFACE 3 ROUTINE        MB Y02958\nDCMNINT4 DS    F  IEECVFTO    FO   INTERFACE 4 ROUTINE        MB Y02958\nDCMNINT5 DS    F  IEECVFTP    FP   INTERFACE 5 ROUTINE        MB Y02958\nDCMNINT6 DS    F  IEECVFTQ    FQ   INTERFACE 6 ROUTINE        MB Y02958\nDCMNINT7 DS    F  IEECVFTT    FT   INTERFACE 7 ROUTINE        MB Y02958\n         SPACE 2\nDCMTRACE DS    CL30                DIDOCS MODULE TRACE AREA   MB Y02958\nDCMTRAC2 EQU   DCMTRACE+2          TRACE MOVE FROM-ADDRESS    MB Y02958\nDCMTRLEN EQU   *-DCMTRACE          LENGTH FOR TRACE MOVE      MB Y02958\nDCMTREN1 DS    C                   1ST BYTE OF TRACE ENTRY    MB Y02958\nDCMTREN2 DS    C                   2ND BYTE OF TRACE ENTRY    MB Y02958\n         EJECT\n*  FIRST BYTE OF SCT ENTRIES\nDCMMSGWR EQU   X'80'               WTOR MESSAGE DISPLAYED IN LINE\nDCMMSGIN EQU   X'40'               MESSAGE DISPLAYED IN LINE\nDCMMSGCN EQU   X'20'               MESSAGE CONTINUED ON NEXT LINE\nDCMMSGJK EQU   X'10'               TO WRITE OUT-OF-LINE DISPLAY FROM\n*                                  MAY CONTAIN JUNK (SDS INTERFACE 2)\nDCMMSGAD EQU   X'08'               MESSAGE CAN BE DELETED AUTOMATICALLY\nDCMMSGRD EQU   X'04'               REQUEST HAS SPECIFIED MSG BE REMOVED\nDCMMSGIF EQU   X'02'               INFORMATIONAL MESSAGE IN LINE\nDCMMSGST EQU   X'01'               END OF TABLE INDICATOR\n         SPACE 2\n*  SECOND BYTE OF SCT ENTRIES\nDCMMSGAC EQU   X'80'               ACTION MESSAGE\nDCMMSGC7 EQU   X'40'               DESCRIPTOR CODE 7 MESSAGE\nDCMMSGDM EQU   X'20'               MESSAGE HAS BEEN DOMMED\nDCMMSGAR EQU   X'10'               MESSAGE IS AN ACCEPTED REPLY\nDCMMSGIR EQU   X'08'               INTERVENTION REQUIRED MESSAGE\nDCMMSGCT EQU   X'04'               CONTINUATION LINE\nDCMMSGPP EQU   X'02'               ISSUED BY PROBLEM PROGRAM\nDCMMSGCL EQU   X'01'               CONTROL LINE OF IN LINE MLWTO\n         SPACE 2\n*  SECONDARY SCT ENTRIES\nDCMSECCL EQU   X'80'               CONTROL LINE OF OUT OF LINE DISPLAY\nDCMSECLL EQU   X'40'               LABEL LINE OF OUT OF LINE DISPLAY\nDCMSECDL EQU   X'20'               DATA LINE OF OUT OF LINE DISPLAY\nDCMSECBL EQU   X'10'               THIS LINE IS BLANKED\nDCMSECDD EQU   X'02'               LINE RESERVED FOR DYNAMIC DISPLAY\nDCMSECST EQU   X'01'               END OF TABLE INDICATOR\nDCMEND   DS    0C                  END OF DCM\n         MEND  , */\n*********************D C M S   M A C R O S*****************************\n*\n         MACRO\n&CSECT   XSTART &STAE=NO,&XCMD=YES,&LV=(18*4)\n*        SPACE 4\n         DCMSREGS\n*        SPACE 4\n&CSECT   CSECT\n         SAVE  (14,12),,*\n         USING &CSECT,R15\n         LR    R5,R1               SAVE PARM INPUT REGISTER HERE\n         LR    R12,R15             ESTABLISH A BASE\n         USING &CSECT,R12\n         DROP  R15\n         CNOP  0,4\n         BAL   R1,*+8              LENGTH FOR A STANDARD SAVE AREA\n         DC    A(&LV.)              AND USER SPECIFIED LENGTH (LV)\n         L     R0,0(,R1)\n         SVC   10\n*\n*\n*        EXPLICIT GETMAIN EXPANSION DONE TO FIX BUGS\n*\n*        GETMAIN R,LV=(0)          GET A SAVE AREA\n*                                   ------\n*                                  | S  L |\n         ST    R13,4(R1)           | T  I |  SAVE ADDRESS OF PREVIOUS\n         ST    R1,8(R13)           | D  N |  CREATE FORWARD POINTER\n         LR    R13,R1              |    K |  AND USE R13 JUST FOR FUN\n*                                   ------\n         AIF   ('&STAE' NE 'YES').X1\n         L     R10,=V(XCMDSTAE)\n         ESTAE (R10),CT            SET ESTAE ENVIRONMENT\n.X1      ANOP\n         LR    R1,R5               RESTORE PARM REGISTER\n         EJECT\n         MEND\n         MACRO\n         DCMSREGS &R\n*        COPY  DCMSGBLS\n.*                                                                    *\n.*       G B L A    D C M S  G R O U P                                *\n.*                                                                    *\n         GBLA  &DP(33) .\n         GBLA  &GCT .\n         GBLA  &GCOUNT .\n.*       GBLA  &LVNUM .                                          BFG001\n         GBLA  &REG .\n.*                                                                    *\n.*       G B L B    D C M S  G R O U P                                *\n.*                                                                    *\n         GBLB  &DBLE .\n         GBLB  &LIST .\n         GBLB  &DBUG .\n         GBLB  &EQU .\n         GBLB  &WDSW .\n         GBLB  &RENT .\n         GBLB  &PLG .\n         GBLB  &ONETM .\n         GBLB  &DASHS .\n         GBLB  &PWRK .\n         GBLB  &RCD .\n         GBLB  &DCMSCLR .\n         GBLB  &DCMSHEX .\n         GBLB  &DCMSDEC .\n         GBLB  &DCMSWRK .\n         GBLB  &DCMSCRN .\n         GBLB  &DCMSCST .\n.*                                                                    *\n.*       G B L C    D C M S  G R O U P                                *\n.*                                                                    *\n         GBLC  &WD(33) .\n         GBLC  &NAM .\n         GBLC  &DNAM .\n         GBLC  &ONAM .\n         GBLC  &INAM .\n         GBLC  &RNAM .\n         GBLC  &NDX .\n         GBLC  &CSECT .\n         GBLC  &DSECT .\n         GBLC  &DCMSHLP\n         GBLC  &LVNUM                                            BFG001\n         AIF   (&EQU).END\n&EQU     SETB  1\n          AIF   (&LIST).LIST\n          AGO   .LISTX\n.LIST    ANOP\n         SPACE\n.END     MEXIT\n.LISTX    ANOP\n         SPACE 8\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        G E N E R A L   R E G I S T E R   E Q U A T E S              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 4\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         SPACE 8\n*                                                                     *\n*                                                                     *\n*              R E G I S T E R    U S A G E                           *\n*                                                                     *\n*                                                                     *\n         SPACE 6\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        R0         PARAMETER REGISTER                                *\n*        R1         PARAMETER LIST REGISTER                           *\n*        R2         SUBROUTINE LINKAGE REGISTER                       *\n*        R3         WORK REGISTER                                     *\n*        R4         WORK REGISTER                                     *\n*        R5         WORK REGISTER                                     *\n*        R6         WORK REGISTER                                     *\n*        R7         WORK REGISTER                                     *\n*        R8         WORK REGISTER                                     *\n*        R9         WORK REGISTER                                     *\n*        R10        IOCB/DSECT REGISTER                               *\n*        R11        PARM/WORK  REGISTER                               *\n*        R12        BASE REGISTER                                     *\n*        R13        SAVE AREA REGISTER                                *\n*        R14        RETURN LINKAGE REGISTER                           *\n*        R15        ENTRY POINT LINKAGE REGISTER                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n         MEND\n         PRINT ON\n*.\n***********************************************************************\n*                                                                     *\n* TSO COMMAND -  D I D O C S -                                        *\n*                                                                     *\n* PURPOSE: FOR TSO OPER PRIVLEDGE USERS, SIMULATE AN OS 3277 CONSOLE  *\n*    AT THEIR TSO TUBE BY PEEKING AT THE DIDOCS CONSOLE MESSAGE       *\n*    BUFFERS IN CSA.  DIDOCS ACCEPTS A REPLY FROM THE USER.           *\n*    NON-BLANK REPLIES ARE FORMATTED INTO A CMD AND ISSUED VIA        *\n*    SVC34,  BLANK REPLIES JUST CAUSE THE SCREEN TO BE UPDATED.       *\n*    ANY COMMANDS ISSUED VIA SVC34 ARE ALSO LOGGED VIA A WTO SO THAT  *\n*    YOUR AUDITORS AND OPERATIONS KNOW WHAT IS GOING ON.              *\n*                                                                     *\n* THIS CODE IS BASED ON THE DIDOCS COMMAND FROM THE SHARE DCMS SYSTEM.*\n* ORIGINAL CODE GENERATED BY FRED LUDDY OF AMDAHL CORP.               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* TO INVOKE:   TYPE  DIDOCS                                           *\n*                                                                     *\n* ERROR MESSAGE:                                                      *\n*   NO ACCEPTABLE (3277) CONSOLES FOUND                               *\n*                                                                     *\n* EXIT FROM DIDOCS IS VIA  PFK3.                                      *\n*                                                                     *\n***********************************************************************\n*  NOTE: TO USE 'REAL' MODESET, CHANGE MACRO NAME IN 'PRINT OFF'      *\n*      SECTION TO 'FMODESET' AND REASSEMBLE.                          *\n*      LINK WITH 'AC(1)', AND AUTHORIZE COMMAND VIA ENTRY IN IKJEFTE8.*\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nDIDOCS   PGM    ,                NON REENT CHEAP PGM\n         EXTRACT MF=(E,EXTRPSCB)      YES..CHECK FOR OPER PRIVLEDGE\n         L     R1,ANSWER\n         USING PSCB,R1\n                                  EJECT\n*********************************************************************\n*                                                                   *\n*  CHECK USER AUTHORITY                                             *\n*                                                                   *\n*     THREE POSSIBLE AUTHORITITES                                   *\n*                                                                   *\n*     $     - DO ANYTHING WITH NO LOGGING                           *\n*     L     - DO ANYTHING BUT LOG IT ALL                            *\n*     BLANK - DO ALL BUT $ COMMANDS AND LOG IT ALL                  *\n*                                                                   *\n*********************************************************************\nCHKOPER  CLC   PSCBUSER(3),=C'C7B'\n         BE    OPEROK\n         CLC   PSCBUSER(3),=C'F7D'\n         BE    OPEROK\n         CLC   PSCBUSER(6),=C'PEPPER'\n         BE    OPEROK\n         CLC   PSCBUSER(6),=C'MIS1RR'\n         BE    OPEROK\n         CLC   PSCBUSER(6),=C'T7BOBD'\n         BE    OPEROK\n         CLC   PSCBUSER(6),=C'T7DESK'\n         BE    OPEROK\n         CLC   PSCBUSER(6),=C'MIS1DH'\n         BE    OPEROK\n         CLC   PSCBUSER(4),=C'C5FR'\n         BE    OPEROK\n         CLC   PSCBUSER(7),=C'Q7SCOTT'\n         BNE   END1\nOPEROK   DS    0H\n         DROP  R1\n         ESTAE ABTERM                  SET ABEND EXIT\n*\n         B     TERMSET\n*\n*  ABEND EXIT - TURN AUTHORIZATION OFF\n*\nABTERM   DS    0H\n         USING ABTERM,R15              ADDRESSABILITY\n         SR    R0,R0              SET UP FOR AUTHORIZATION OFF\n         SVC   232                AUTHORIZE OFF\n         SR    R15,R15            CONTINUE ABEND\n         BR    R14                     AND EXIT\n         DROP  R15\n*\n*  INITIALIZATION CONTINUES\n*\nTERMSET  DS    0H\n         STTMPMD KEYS=ALL\n         GTSIZE\n         ST    R0,HOLDLPD         STORE # LINES PER LINE\n         ST    R1,HOLDCPL         STORE # CHARS PER DISPLAY\n         STSIZE SIZE=80,LINE=24   SET TO MOD 2\n*\n         LA    R0,1               SET UP FOR AUTHORIZATION\n         SVC   232                AUTHORIZE\n*\n         MODESET MODE=PROB,KEY=ZERO\n         ESAR  R5                  GET SEC ASID\n         ST    R5,SASID            KEEP IT\n         AXSET AX=ONE              SET AX TO ALLOW SSAR\n*\n         OI    SWITCHES,CLEARON    SEND FULLSCREEN WITH CLEAR\n         L     R1,CVTPTR           AND IN THE BEGINNING...\n         L     R1,CVTCUCB-CVT(R1)  ...\n         USING UCM,R1\n         LM    R3,R5,UCMVEA        R3 -> TO THE FIRST UCME\n*                                   R4 CONTAINS UCME LENGTH\n*                                    R5 -> TO THE LAST UCME\nDID0     DS    0H                  SEARCH FOR SOMETHING USEFUL\n         USING UCMLIST,R3\n         L     R1,UCMUCB           DEBUGGING\n         MVC   UNITXXX(3),13(R1)   ...\n         TM    UCMATR,UCMUF        IS IT ACTIVE ?\n         BZ    DID1                NO.. UNUSEABLE\n*\n         L     R10,UCMXB           IS IT GRAPHICS ?\n         LTR   R10,R10             ...\n         BZ    DID1                NO.. USELESS\n         TM    UCMDISP1,UCMDISPA   IS IT THE MASTER    CBT-AXC\n         BZ    DID1                NO.. USELESS        CBT-AXC\n         USING DCMTSRT,R10         POINT TO THE DCM\n         L     R6,DCMADTRN         FIND  THE PAGEABLE DCM (TDCM)\n         LTR   R6,R6               DOES IT EXIST ?\n         BZ    DID1                NO...\n         LA    R7,CONASID          GET CONSOLE ASID\n         SSAR  R7                  SET CONSOLE AS SECONDARY\n         LA    R7,LOCDCM           THE 'TO' ADDRESS\n         LA    R3,L'LOCDCM         LENGTH OF THE 'TO'\n         SR    R15,R15             ZERO R15 FOR 'FROM' KEY\n*\nMOVEEM   DS    0H\n         MVCP  0(R3,R7),0(R6),R15  MOVE IT\n         BZ    DCMMOVED\n         LA    R6,256(R6)          BUMP 'FROM' ADDRESS BY 256\n         LA    R7,256(R7)          BUMP 'TO' ADDRESS BY 256\n         SH    R3,=H'256'          DECREMENT LENGTH OF MOVE LEFT\n         B     MOVEEM              GO BACK AGAIN\n*\nDCMMOVED DS    0H\n         L     R5,SASID            RESTORE PREVIOUS SECONDARY\n         SSAR  R5                  SHOULD BE PRIMARY\n         LA    R6,LOCDCM           ADDRESS OF COPY OF DCM BUFFER\n         USING DCMSTRT,R6          A LITTLE\n         CLI   DCMIONDX,X'10'      IS IT A 3270 ?\n         MVC   XUCMID,UCMID        SAVE THIS\n         BE    ALLOCSCR            YES BY DINGLES !\n*                                      DINGLES ?\nDID1     DS    0H\n         BXLE  R3,R4,DID0          GET THE NEXT ENTRY\n         ABEND 4\n*\n* A CONSOLE HAS BEEN FOUND COPY THE SCREEN AND DISPLAY IT FOR THE USER\n*        R3 ->  UCME\n*        R10 -> RDCM\n*        R6 ->  TDCM\n*\nALLOCSCR DS    0H\n         LH    R2,DCMMSGAL         NUMBER OF LINES IN MSG AREA\n         AH    R2,=H'2'            ADD TWO MORE LINES\n         MH    R2,=H'80'           MULITPLE BY 80 TO GET AREA\n         STH   R2,MSGLEN           STORE IN MESSAGE AREA\n         SLA   R2,1                MULTIPLE BY 2\n         AH    R2,=AL2(SCRPREL)    ADD IN COMMANDS\n         AH    R2,=AL2(SCRSUFL)    ADD IN CURSOR POSITIONING\n         GETMAIN RU,LV=(2)         GET STORAGE\n*\n         ST    R1,PREADDR          STORE SCREEN ADDRESS\n         MVC   0(SCRPREL,R1),SCRPRE\n*\n         AH    R1,=AL2(SCRPREL)    ADD IN CMD OVERHEAD TO GET\n         ST    R1,SCRADDR          STORE MESSAGE ADDRESS\n*\n         AH    R1,MSGLEN           ADD IN MESSAGE LEN\n         MVC   0(SCRSUFL,R1),SCRSUF\n*\n         AH    R1,=AL2(SCRSUFL)    ADD IN SET CURSOR TEXT LENGTH\n         ST    R1,SC2ADDR          SCREE2 ADDRESS\n*\nGOTONE   DS    0H\n         L     R7,DCMASCRN         POINT TO  THE  FIRST INPUT LINE\n         SH    R7,=H'6'            AND BACKUP TO GET ATTRIBUTES\n         LH    R2,MSGLEN           NUMBER  OF LINES IN MSG AREA\n         L     R8,SCRADDR          OUTPUT LINE\n         STM   R4,R9,MOVEBSAV      SAVE THE REGISTERS\n         LA    R4,CONASID          GET CONSOLE ASID\n         SSAR  R4                  SET CONSOLE AS SECONDARY\n         LM    R4,R9,MOVEBSAV      GET BACK ADDRESSES\n         SR    R15,R15             'FROM' KEY\n*\nMOVEBUF  MVCP  0(R2,R8),0(R7),R15  MOVE IT\n         BZ    ENDMOVE\n         LA    R7,256(R7)          BUMP 'FROM' ADDRESS\n         LA    R8,256(R8)          BUMP 'TO' ADDRESS\n         SH    R2,=H'256'          DECREMENT THE LENGTH FIELD\n         B     MOVEBUF             GO BACK AND GET MORE\n*\nENDMOVE  L     R4,SASID\n         SSAR  R4                  SHOULD BE SAME AS PRIMARY\n         BAL   R9,WRITE            DOIT JACK !!!\n*\n         MVC   SVCRCM,LOTSBLNK\n         MVC   NOTR15,LOTSBLNK\n         OC    REPLY,LOTSBLNK      CONVERT TO UPPER CASE\n         CLI   REPLY,C' '          NULL INPUT ?\n         BE    GOTONE              YES..NO COMMAND..GO PEEK AND SHOW\n*                                  SIGH..GOT TO ISSUE THE COMMAND\n         MVC   CMNDBUF,LOTSBLNK\n         MVC   CMNDBUF(79),REPLY\n         MVC   REPLY,LOTSBLNK\n*\n         LA    R1,CMND             WELL ?\n         XR    R0,R0\n         IC    R0,XUCMID           OUR MAN IN THE COMM TASK\n         SVC   34                  FIRE HIM THRU\n         B     GOTONE              SAVE RETURN CODE\n*\nEND1     DS    0H\n         STSIZE SIZELOC=HOLDCPL,LINELOC=HOLDLPD\n         TPUT  SCRPRE,L'SCRPRE,FULLSCR  CLEAR THE SCREEN\n         STTMPMD KEYS=NO\n         SR    R0,R0              SET UP TO REMOVE AUTHORIZATION\n         SVC   232                UNAUTHORIZE\n         B    $$EOJ\n*\n* LOCAL SUBROUTINE WRITE SCREEN VIA TPUT, AND GET REPLY VIA TGET\n*\nWRITE    STM   6,9,SAVE4W\n         LH    R7,MSGLEN               LENGTH OF SCREEN\n         L     R8,SCRADDR              ADDRESS OF SCREEN\n         L     R6,SC2ADDR              ADDRESS OF SCREE2 (OLD SCREEN)\n         LR    9,7                     SET COMPARE LENGTH\n         CLCL  6,8                     OLD SCREEN = NEW SCREEN ?\n         BE    STIMER                  YES - DON'T WRITE NEW SCREEN\n*\n         LH    R0,=AL2(SCRPREL)        SET LENGTH OF TPUT BUFFER\n         AH    R0,MSGLEN               ADD IN SCREEN LENGTH\n         L     R1,PREADDR              ADDRESS OF SCREEN PREFIX\n         TM    SWITCHES,CLEARON        SHOULD WE SEND ENTIRE SCREEN?\n         BO    FULLSET\n*\n         MVC   1(1,R1),=X'F1'          WRITE COMMAND\n         B     PUTIT                   AND TPUT IT\n*\nFULLSET  DS    0H\n         MVC   1(1,R1),=X'F5'          WRITE COMMAND\n         XI    SWITCHES,CLEARON        TURN SWITCH OFF\n         AH    R0,=AL2(SCRSUFL)        ADD IN LENGTH OF SUFFIX\n*\nPUTIT    DS    0H\n         ICM   R1,B'1000',TPUTFLG        INDICATE FULL SCREEN\n         TPUT  (1),(0),R                 USE TPUT FOR IO\n*\n         L     R8,SCRADDR                MOVE NEW SCREEN TO OLD SCREEN\n         L     R6,SC2ADDR                ADDRESS OF NEW SCREEN ARE\n         LH    R7,MSGLEN                 SET LENGTHS FOR MOVE\n         LR    R9,R7                     SET LENGTHS FOR MOVE\n         MVCL  R6,R8                     MOVE CHARACTERS\n*\nSTIMER   STIMER WAIT,BINTVL=WAIT1\n         LM    6,9,SAVE4W\n         MVI   PFREPLY,C' '\n         MVC   PFREPLY+1(L'PFREPLY-1),PFREPLY\n         TGET  PFREPLY,L'PFREPLY,ASIS,NOWAIT\n*\nTGETCHK  DS    0H\n         LTR   15,15\n         BNZ   0(9)\n         CH    R15,=H'14'                IS INPUT LONGER THAN BUFFER\n         BNE   SKIPCLRQ\n*\n         TCLEARQ INPUT                  FLUSH THE TRASH\n*\nSKIPCLRQ DS    0H\n         CLI   PFREPLY,X'6E'      PA2\n         BE    TGETWAIT              YES FREEZE IT\n         CLI   PFREPLY,X'F3'      PF 3 ENTERED?\n         BE    END1                  YES...SPLIT\n         CLI   PFREPLY,X'7C'      PF 12 ENTERED?\n         BE    END1                  YES...SPLIT\n         CLI   PFREPLY,X'C3'      PF 15 ENTERED?\n         BE    END1                  YES...SPLIT\n         CLI   PFREPLY,X'4C'      PF 24 ENTERED?\n         BE    END1                  YES...SPLIT\n         CLI   PFREPLY,X'6C'      PA1   ENTERED?\n         BE    END1                  YES...SPLIT\n         CLI   PFREPLY,X'6D'      CLEAR KEY?\n         BE    SETCLR                YES...SETCLR\n         TPUT  SETCURS,L'SETCURS,FULLSCR SET THE CURSOR\n         BR    R9\n*\nSETCLR   DS    0H\n         OI    SWITCHES,CLEARON\n         L     R1,SC2ADDR          GET OLD SCREEN ADDRES\n         MVI   0(R1),X'00'         RESET HOLD SCREEN\n         BR    R9\n*\nTGETWAIT DS    0H\n         TPUT  SETCURS,L'SETCURS,FULLSCR SET THE CURSOR\n         MVI   PFREPLY,C' '\n         MVC   PFREPLY+1(L'PFREPLY-1),PFREPLY\n         TGET  PFREPLY,L'PFREPLY,ASIS\n         B     TGETCHK\n*\n***********************************************************************\n*        MESSAGES                                                     *\n***********************************************************************\n*\nSWITCHES DC    X'00'\nCLEARON  EQU   X'01'\nWAIT1    DC    F'090'\nAFLG     DC    X'0'\nCMDALLOW DC    C' '\nUNITXXX  DC    CL4' '\nSVCRCM   DC    CL9' '\nNOTR15   DC    CL8' '\n         DC    C' '\n*\n* TURN OFF FULL SCREEN (SPF) , CLEAR AND RESET CURSOR TO ROW1,COL1\n*\nTPUTFLG  DC   X'03'                   ITS FULL SCREEN TIME\n*\n***********************************************************************\n*        CONSTANTS                                                    *\n***********************************************************************\n*\nLOTSBLNK DC    CL90' '\n*\n***********************************************************************\n*        VARIABLES                                                    *\n***********************************************************************\n*\nCMND     DC    H'79',H'0'\nCMNDBUF  DC    CL80' '\nCMNDLEN  EQU   *-CMND\n*\nXUCMID   DC    X'0'\nANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT\n*\nPFREPLY  DS    0CL86               AREA TO HOLD TGET REPLY\nPFCODE   DC    CL6' '              AID+JUNK\nREPLY    DC    CL80' '             REAL REPLY\n         SPACE 1\nSASID    DS    F                   STORE FOR SECONDARY ASID\nONE      DC    H'1'                TO SET AX FOR 1\nZERO     DC    H'0'                TO SET AX FOR 0\nCONASID  EQU   5                   'CONSOLE' ASID\n*\n***********************************************************************\n*        LIST FORMS OF MACROS                                         *\n***********************************************************************\n*\nEXTRPSCB EXTRACT ANSWER,'S',FIELDS=(PSB),MF=L\n*\n***********************************************************************\n*        LITERAL POOL                                                 *\n***********************************************************************\n         LTORG\nMOVEBSAV DS    6F                REGISTER SAVE AREA\nHOLDLPD  DC    F'0'               HOLD LINES PER DISPLAY\nHOLDCPL  DC    F'0'               HOLD CHARS PER DISPLAY\n***********************************************************************\n*        SCREEN FORMAT                                                *\n***********************************************************************\nSETCURS  DC    X'27F100115AD213'                  SET CURSOR\nMSGLEN   DC    H'0'\n*\nPREADDR  DC    F'0'\nSCRADDR  DC    F'0'\nSC2ADDR  DC    F'0'\n*\nSCRPRE   DC    X'27F500'         ESCAPE - ERASE WRITE\nSCRPREL  EQU   *-SCRPRE\n*\nSCRSUF   DC    X'115AD11D4013'   SET BUFFER (22,2) / ATTRIBUTE UNPROT X\n         DC    X'115B601D70'     SET BUFFER (23,1) / ATTRIBUTE PROT\n         DC    X'115CF01D70'     SET BUFFER (23,1) / ATTRIBUTE PROT\n         DC    C'PRESS PF3 TO EXIT, PA2 TO STOP'\nSCRSUFL  EQU   *-SCRSUF\n*\nSAVE4W   DC    4F'0'\nLOCDCM   DS    CL512               COPY OF DCM AREA\n         TITLE 'MVS UCM DEFINITION'\n         IEECUCM FORMAT=NEW\n         TITLE 'MVS RESIDENT DCM DEFINITION (RDCM)'\n         IEERDCM\n         TITLE 'MVS TRANSIENT DCM DEFINITION (TDCM)'\n         IEETDCM\n         TITLE 'MVS CVT DEFINITION'\n         CVT   DSECT=YES\n         TITLE 'TSO PROTECTED STEP CONTROL BLOCK'\n         IKJPSCB\n         END\n//LKED.SYSLMOD DD DSN=SYS1.APFLIB(MCS),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MINIGEN": {"ttr": 8966, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00s\\x00s\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 115, "newlines": 115, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BMINIG JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,TIME=1440\n//* --------------------------------------------------------  *\n//* LAST MINIGEN DATE:                   NAME:\n//*                   08/13/86                BRIAN\n//*                   12/04/86                BRIAN\n//*                   12/09/86                BRIAN\n//* --------------------------------------------------------  *\n//CP EXEC PGM=IEBGENER,REGION=512K\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD  DSN=&&DUMMY(MINIMAC0),DISP=(,PASS),UNIT=SYSDA,\n//       DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),SPACE=(TRK,(1,1,1)),\n//       VOL=SER=MVS802\n//SYSIN DD DUMMY\n//SYSUT1   DD  *\n         MACRO\n         MINIMAC0\n         NOP\n         MEND\n/*\n//SJCLIN1 EXEC PGM=GIMSMP,REGION=6000K,TIME=1440\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//SMPPTS   DD  DSN=SMPE.SMPPTS,DISP=SHR\n//PARMLIB  DD  DSN=SYS1.APARMLIB,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * **\n//* ** * CHANGE TO POINT TO NEW SYSRES VOLUME    ** * ** * ** * ** * **\n//* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * **\n//CMDLIB   DD DSN=SYS1.CMDLIB,DISP=SHR,UNIT=SYSDA,VOL=SER=MVSR1A\n//LPALIB   DD DSN=SYS1.LPALIB,DISP=SHR,UNIT=SYSDA,VOL=SER=MVSR1A\n//LINKLIB  DD DSN=SYS1.LINKLIB,DISP=SHR,UNIT=SYSDA,VOL=SER=MVSR1A\n//NUCLEUS  DD DSN=SYS1.NUCLEUS,DISP=SHR,UNIT=SYSDA,VOL=SER=MVSR1A\n//* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * **\n//* ** BROWSE \"IPO1.STAGE2\" FOR ALL ASMS STEPS AND INSERT MOD NAMES  **\n//* **        IN THE ASSEM SECTION BELOW                             **\n//* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * **\n//SMPCNTL  DD  *\n  SET BDY (M211TAA).\n  UCLIN.\n  DEL SYSMOD(MINIGEN).\n  ENDUCL.\n  RESETRC.\n  SET BDY (GLOBAL).\n  UCLIN.\n  DEL SYSMOD(MINIGEN).\n  ENDUCL.\n  RESETRC.\n  SET BDY (GLOBAL).\n  RECEIVE SELECT(MINIGEN).\n  SET BOUNDARY(M211TAA).\n  JCLIN.\n  APPLY  SELECT(MINIGEN) REDO BYPASS(ID).\n//SMPPTFIN DD  *\n++  FUNCTION(MINIGEN).\n++  VER(Z038).\n++  MAC(MINIMAC0) DISTLIB(AMODGEN) TXLIB(DUMMYMAC)\n ASSEM(\n IEFWMAS1\n IEFDEVPT\n IEFWMSKA\n IEFEDTTB\n IEFSGOPT\n DCM010\n IEFSDPPT\n IEFYRCDS\n IKJEFLP0\n MSTJCL00\n IEFJESNM\n IEEMB850\n IEASVC00\n IEAVBK00\n IEECVUCM\n IECZDTAB\n IFGDEBCK\n IFBCTA00\n IEAASU00\n IEECVH1\n IEECVH2\n IEECVH3\n IEECVH4\n IEECVSUB\n IEEPFKEY\n IKJEBEPD\n IKJEBEIN\n ).\n/*\n//SMPJCLIN DD  DSN=IPO1.STAGE2,DISP=SHR\n//DUMMYMAC DD  DSN=&&DUMMY,DISP=(OLD,DELETE)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MULTICOL": {"ttr": 8969, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x005\\x005\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "SYZYGYB"}, "text": "//P0010    EXEC SAS,\n\t//             SORT=50\n\t//SASLIST  DD  SYSOUT=Q\n\t//SCRATCH  DD  DSN=&&SCRATCH,\n\t//             DISP=(NEW,PASS,DELETE),\n\t//             SPACE=(TRK,(5,5)),UNIT=SYSDA\n\t//VMF      DD  DSN=SYS3.CA.TLMS.VMF,\n\t//             DISP=SHR,\n\t//             DCB=BUFNO=255\n\t//SYSIN    DD  *\n\n\t   TITLE1 'Scratch List' ;\n\t   TITLE2 'Merrill Lynch Europe' ;\n\n\t  options errors=0 ;\n\n\t DATA _null_ ;\n\t   INFILE VMF;\n\t   FILE SCRATCH NOPRINT ;\n\t INPUT\n\t  @1    TYPE        #CHAR1.\n\t  @3    VOLUME      #CHAR6.\n\t  @130  STATUS           1.\n\t  @273  DSN         #CHAR44.\n\t ;\n\t IF STATUS  =  2  AND\n\t    TYPE EQ 'B'   ;\n\t  PUT @1 VOLUME\n\t      @10 dsn ;\n\t RUN ;\n\n\t DATA  _NULL_ ;\n\t   INFILE scratch ;\n\t   FILE PRINT N = PS ;\n\t   RETAIN I J 1 ;\n\t   I = 1 ;\n\t   J = 5 ;\n\t   DO I = 1 TO 80 BY 10 ;\n\t   DO WHILE (J LE 55) ;\n\t      INPUT  @1 VOLUME #CHAR6.\n\t             @10 dsn    #char44.\n\t       ;\n\t        PUT #J @I VOLUME  ;\n\t             J = J + 1 ;\n\t    END;\n\t             J = 5 ;\n\t    END;\n\t        PUT _PAGE_;\n\t  RUN;\n\t/*\n\t//\n\n\tAny problems please contact me.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NODTAB22": {"ttr": 8971, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x01\\xac\\x01\\xac\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 428, "newlines": 428, "modlines": 0, "user": "SYZYGYB"}, "text": "//NODTABL  JOB  (SP,9030,0000000),'WESTERMAN - BOX 3',\n//       CLASS=H,MSGCLASS=S,TIME=30,\n//       NOTIFY=XSPRBWW TYPRUN=HOLD\n//*\n//*--------------------------------------*\n//*    REFER SPJ.MVS.SORCLIB(NODTABL)    *\n//*--------------------------------------*\n//*\n//STEP01    EXEC ASMFC,PARM.ASM='DECK,NOOBJ'\n//ASM.SYSLIB  DD\n//            DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT  DD SYSOUT=*\n//ASM.SYSPUNCH  DD DSN=&&OBJECT,DISP=(,PASS),UNIT=SC,\n//           DCB=(LRECL=80,BLKSIZE=800,RECFM=FB),SPACE=(CYL,(1,1))\n//SYSUDUMP  DD SYSOUT=*\n//ASM.SYSIN DD *\nNODTABL  TITLE ' ALCATEL NETWORK NON-TSO DATASETS VOLUME VALIDATION '\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*               REFER SPR.MVS.SORCLIB(NODTABL)                  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nNODTABL  CSECT\n*\n*\n         DC    A(ENDTABL)         ADDRESS OF TABLE END\n*\n**********************************************************************\n**                                                                  **\n**                                                                  **\n**       LIST OF NON-TSO HIGH LEVEL NODES AND THE ASSOCIATED        **\n**       APPLICATION CODE. THE TABLE IS IN THE FORMAT               **\n**                                                                  **\n**                                                                  **\n**               XXXXXXXXN                                          **\n**                                                                  **\n**        WHERE   XXXXXXXX IS THE HIGH LEVEL NODE                   **\n**                N        IS THE APPLICATION CODE (AND IS ALSO     **\n**                         THE 4TH CHARACTER OF THE VOLUME NAME     **\n**                                                                  **\n**        THE HIGH LEVEL NODES IN THE TABLE CONTAINS * IN           **\n**        THE ANY CHARACTER TO INDICATE A WILDCARD CHARACTER        **\n**        ANY CHARACTER IS VALID IN A COMPARISON TO A WILDCARD      **\n**        AND IT CAN APPEAR ANY WHERE IN THE NODE. IF A WILDCARD    **\n**        CHARACTER IS USED THEN NO SPECIFIC CHARACTER CAN BE USED  **\n**        IN THE SAME POSITION.                                     **\n**        THE LAST TABLE ENTRY IS ALL '*' AND HAS AN APPLICATION    **\n**        CODE OF 7 WHICH IS WHERE ALL MISC AND UNDEFINED FILES     **\n**        ARE TO BE ALLOCATED.                                      **\n**                                                                  **\n**                                                                  **\n**********************************************************************\n*\nAPLCODES EQU   *\n         DC    C'AAR*    2'\n         DC    C'ACD*    2'\n         DC    C'ACJ*    2'\n         DC    C'ADC     7'\n         DC    C'ADD*    7'\n         DC    C'ADJ*    2'\n         DC    C'ADR*    2'\n         DC    C'AER*    2'\n         DC    C'ALCATEL 0'\n         DC    C'AME*    7'\n         DC    C'AMR*    2'\n         DC    C'AMS     0'\n         DC    C'APB*    7'\n         DC    C'APC     7'\n         DC    C'APD     7'\n         DC    C'APJ*    2'\n         DC    C'APM*    2'\n         DC    C'APR*    2'\n         DC    C'APS     7'\n         DC    C'AR      7'\n         DC    C'ARC     7'\n         DC    C'ARD     7'\n         DC    C'ARJ     2'\n         DC    C'ARR*    2'\n         DC    C'ASI*    2'\n         DC    C'ATR*    2'\n         DC    C'AUC     7'\n         DC    C'AUD     7'\n         DC    C'AUDIT   2'\n         DC    C'AUJ     2'\n         DC    C'BBD     7'\n         DC    C'BBJ     2'\n         DC    C'BBR     2'\n         DC    C'BBS     7'\n         DC    C'BDS     7'\n         DC    C'BKC     7'\n         DC    C'BKD     7'\n         DC    C'BKJ     2'\n         DC    C'BKS     7'\n         DC    C'BLC     7'\n         DC    C'BLD     7'\n         DC    C'BLG410  0'\n         DC    C'BLJ     2'\n         DC    C'BLR     2'\n         DC    C'BLS     7'\n         DC    C'BMC     7'\n         DC    C'BMD     7'\n         DC    C'BMJ     2'\n         DC    C'BPB     7'\n         DC    C'BPD     7'\n         DC    C'BPJ     2'\n         DC    C'BPR*    2'\n         DC    C'BPS     7'\n         DC    C'BRM     2'\n         DC    C'BRR*    2'\n         DC    C'BSJ     2'\n         DC    C'BSR     2'\n         DC    C'CAC     7'\n         DC    C'CAD*    7'\n         DC    C'CAG     7'\n         DC    C'CAJ*    2'\n         DC    C'CAR     2'\n         DC    C'CAS*    7'\n         DC    C'CAT*****0'\n         DC    C'CBR     2'\n         DC    C'CCR*    2'\n         DC    C'CDJ*    2'\n         DC    C'CDR*    2'\n         DC    C'CE      7'\n         DC    C'CGR*    2'\n         DC    C'CH**    4'\n         DC    C'CIC*****0'\n         DC    C'C170****0'\n         DC    C'CLC     7'\n         DC    C'CLD     7'\n         DC    C'CLJ     2'\n         DC    C'CMC     7'\n         DC    C'CMD     7'\n         DC    C'CMJ*    2'\n         DC    C'CMS     7'\n         DC    C'CPR     2'\n         DC    C'CRC     7'\n         DC    C'CRD     7'\n         DC    C'CRJ     2'\n         DC    C'CRR     2'\n         DC    C'CS      7'\n         DC    C'CSB     7'\n         DC    C'CSC     7'\n         DC    C'CSD     7'\n         DC    C'CSJ     2'\n         DC    C'CSR     2'\n         DC    C'CTL     7'\n         DC    C'DAR     1'\n         DC    C'DBN     0'\n         DC    C'DBR*    2'\n         DC    C'DBS     0'\n         DC    C'DCC     7'\n         DC    C'DCD     7'\n         DC    C'DCF     0'\n         DC    C'DCJ     1'\n         DC    C'DCR     1'\n         DC    C'DE      7'\n         DC    C'DEPT*** 7'\n         DC    C'DERRYDN 7'\n         DC    C'DFB*    1'\n         DC    C'DFR     2'\n         DC    C'DFU     1'\n         DC    C'DHC     7'\n         DC    C'DHD     7'\n         DC    C'DHJ     2'\n         DC    C'DLI     0'\n         DC    C'DMR     2'\n         DC    C'DPD*    4'\n         DC    C'DPT**** 7'\n         DC    C'DS      4'\n         DC    C'DU      1'\n         DC    C'DVB*    1'\n         DC    C'ECC     0'\n         DC    C'ECJ     4'\n         DC    C'ECR*    4'\n         DC    C'EDD*    4'\n         DC    C'EDR     4'\n         DC    C'EFD     4'\n         DC    C'EGJ     4'\n         DC    C'EIDV    4'\n         DC    C'EJJ*    2'\n         DC    C'ELR     4'\n         DC    C'ERVINBO 4'\n         DC    C'ESDV    4'\n         DC    C'ESR*    4'\n         DC    C'ETR*    2'\n         DC    C'EYR*    4'\n         DC    C'FAC     7'\n         DC    C'FAD     7'\n         DC    C'FAJ     2'\n         DC    C'FAR     2'\n         DC    C'FAS     7'\n         DC    C'FB      1'\n         DC    C'FFBA    1'\n         DC    C'FIH     7'\n         DC    C'FIJV    7'\n         DC    C'FINCAT  0'\n         DC    C'FIR*    2'\n         DC    C'FLJ     2'\n         DC    C'FSR*    2'\n         DC    C'GDDM    0'\n         DC    C'GFR*    2'\n         DC    C'GIM     0'\n         DC    C'GLB     7'\n         DC    C'GLC*    7'\n         DC    C'GLD     7'\n         DC    C'GLG     7'\n         DC    C'GLH*    7'\n         DC    C'GLJ*    2'\n         DC    C'GLP*    7'\n         DC    C'GLR*    2'\n         DC    C'GLS*    7'\n         DC    C'GTF     0'\n         DC    C'HWP     0'\n         DC    C'IBMUSER 0'\n         DC    C'ICC     7'\n         DC    C'ICD     7'\n         DC    C'ICJ*    2'\n         DC    C'ICQ     0'\n         DC    C'ICR     2'\n         DC    C'IMS*****0'\n         DC    C'INR*    2'\n         DC    C'IPCS    0'\n         DC    C'IPO1    0'\n         DC    C'ISF     0'\n         DC    C'ISP     0'\n         DC    C'ISR     0'\n         DC    C'ITT     0'\n         DC    C'I130****0'\n         DC    C'JE      4'\n         DC    C'JS      1'\n         DC    C'LBR*    2'\n         DC    C'LE21*** 4'\n         DC    C'LHC     7'\n         DC    C'LHD     7'\n         DC    C'LHJ*    2'\n         DC    C'LHS     7'\n         DC    C'LLRV    2'\n         DC    C'LMC     7'\n         DC    C'LRC     7'\n         DC    C'LRD     7'\n         DC    C'LRJ     2'\n         DC    C'LSB*    7'\n         DC    C'LSC     7'\n         DC    C'LSD     7'\n         DC    C'LSG     7'\n         DC    C'LSJ     2'\n         DC    C'LSR*    2'\n         DC    C'LSS*    7'\n         DC    C'LVJ*    2'\n         DC    C'MAR     2'\n         DC    C'MCL     7'\n         DC    C'MCR*    2'\n         DC    C'MKR     2'\n         DC    C'MLD     7'\n         DC    C'MLJ     2'\n         DC    C'MOC     7'\n         DC    C'MOD     7'\n         DC    C'MODELDCB1'\n         DC    C'MOJ     2'\n         DC    C'MPC     7'\n         DC    C'MPD     7'\n         DC    C'MPJ     2'\n         DC    C'MSJ*    2'\n         DC    C'MSR*    2'\n         DC    C'MTG     7'\n         DC    C'MTJ*    2'\n         DC    C'MVS*****0'\n         DC    C'M220****0'\n         DC    C'NCR*    0'\n         DC    C'NSD007  4'\n         DC    C'NSR*    0'\n         DC    C'NULLDCB 1'\n         DC    C'OBR     2'\n         DC    C'OIR     2'\n         DC    C'OPC     7'\n         DC    C'OPD     7'\n         DC    C'OPJ**** 1'\n         DC    C'OPR     1'\n         DC    C'OPS     7'\n         DC    C'ORR*    2'\n         DC    C'OSJ     2'\n         DC    C'OSR     2'\n         DC    C'OTRV    2'\n         DC    C'PAC     7'\n         DC    C'PAD     7'\n         DC    C'PAGE    0'\n         DC    C'PAJ*    1'\n         DC    C'PAP     7'\n         DC    C'PAR*    2'\n         DC    C'PASSWORD0'\n         DC    C'PCC*    7'\n         DC    C'PCD     7'\n         DC    C'PCJ     2'\n         DC    C'PDB     7'\n         DC    C'PDJ*    2'\n         DC    C'PEC*    7'\n         DC    C'PEJ*    2'\n         DC    C'PEPPER  0'\n         DC    C'PER     2'\n         DC    C'PHC     7'\n         DC    C'PHD     7'\n         DC    C'PHJ*    2'\n         DC    C'PHS     7'\n         DC    C'PIC*    7'\n         DC    C'PID     7'\n         DC    C'PIJ*    2'\n         DC    C'PIR*    2'\n         DC    C'PIS     7'\n         DC    C'PJJ*    2'\n         DC    C'PJR*    2'\n         DC    C'PKC     7'\n         DC    C'PKD     7'\n         DC    C'PKJ     2'\n         DC    C'PKR     2'\n         DC    C'PLI***  0'\n         DC    C'PLR*    2'\n         DC    C'PMJ     2'\n         DC    C'PMR*    2'\n         DC    C'PMS     7'\n         DC    C'PNR*    2'\n         DC    C'POC     7'\n         DC    C'POD     7'\n         DC    C'POJ*    2'\n         DC    C'POR     2'\n         DC    C'PRC     7'\n         DC    C'PRD     7'\n         DC    C'PRJ*    2'\n         DC    C'PSB*    7'\n         DC    C'PSC*    7'\n         DC    C'PSD     7'\n         DC    C'PSJ*    2'\n         DC    C'PSR     2'\n         DC    C'PSS     7'\n         DC    C'PUR*    2'\n         DC    C'PYR*    2'\n         DC    C'PYS*    2'\n         DC    C'QAC     7'\n         DC    C'QAD     7'\n         DC    C'QAJ     2'\n         DC    C'QAR     2'\n         DC    C'QCR*    2'\n         DC    C'RNR*    2'\n         DC    C'ROR*    2'\n         DC    C'RPC     7'\n         DC    C'RPD     7'\n         DC    C'RPJ     2'\n         DC    C'RPR*    2'\n         DC    C'RRR     2'\n         DC    C'RS      1'\n         DC    C'RTR     2'\n         DC    C'SAC     7'\n         DC    C'SAD     7'\n         DC    C'SAJ     2'\n         DC    C'SAR*    2'\n         DC    C'SBJ     2'\n         DC    C'SBR     2'\n         DC    C'SCC     7'\n         DC    C'SCD     7'\n         DC    C'SCJ     2'\n         DC    C'SCR*    2'\n         DC    C'SDR*    2'\n         DC    C'SHC     7'\n         DC    C'SHD     7'\n         DC    C'SHJ     2'\n         DC    C'SHS     2'\n         DC    C'SIJ*    2'\n         DC    C'SJR*    2'\n         DC    C'SKC     7'\n         DC    C'SKD     7'\n         DC    C'SKJ*    2'\n         DC    C'SLC     7'\n         DC    C'SLD     7'\n         DC    C'SLJ     2'\n         DC    C'SLR     0'\n         DC    C'SMC     7'\n         DC    C'SMD     7'\n         DC    C'SMJ     2'\n         DC    C'SMP*    0'\n         DC    C'SOC     7'\n         DC    C'SOD     7'\n         DC    C'SOJ     2'\n         DC    C'SOR*    2'\n         DC    C'SPC     7'\n         DC    C'SPD     7'\n         DC    C'SPF22   0'\n         DC    C'SPJ*****0'\n         DC    C'SPR*    0'\n         DC    C'SRR*    2'\n         DC    C'SS      0'\n         DC    C'SWAP    0'\n         DC    C'SYS******'\n         DC    C'TAPJ    7'\n         DC    C'TCR     2'\n         DC    C'TEST****0'\n         DC    C'TFB*    1'\n         DC    C'TFU     1'\n         DC    C'TKR     2'\n         DC    C'TLB*    7'\n         DC    C'TLC     7'\n         DC    C'TLD     7'\n         DC    C'TLJ     2'\n         DC    C'TLR*    2'\n         DC    C'TM**    4'\n         DC    C'TN**    4'\n         DC    C'TSC     7'\n         DC    C'TSD     7'\n         DC    C'TSJ*    2'\n         DC    C'TSR*    2'\n         DC    C'TTR*    4'\n         DC    C'TU      1'\n         DC    C'TVB*    1'\n         DC    C'UCC*    0'\n         DC    C'VB      1'\n         DC    C'VSAMDSET*'\n         DC    C'VSP3    2'\n         DC    C'VSW1    2'\n         DC    C'WPR*    2'\n         DC    C'W1      2'\n         DC    C'X       7'\nENDTABL  DC    C'********7'\n         END   NODTABL\n//LINK     EXEC PGM=IEWL,\n//         PARM='LET,LIST,MAP,XREF,RENT,REUS,SIZE=(256K,65K)'\n//SYSLIB   DD DSN=XSPRBWW.VTOC.LOAD,DISP=SHR\n//SYSUT1   DD SPACE=(CYL,(5),,CONTIG),UNIT=SC\n//SYSLIN   DD DSN=&&OBJECT,DISP=(OLD,PASS)\n//SYSLMOD  DD DSN=SYS1.LINKLIB(NODTABLN),DISP=SHR\n//SYSUDUMP DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NOKEEP": {"ttr": 9222, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x005\\x005\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "SYZYGYB"}, "text": "//$SPBHW      JOB (BHWEST,NOBOX),'$SPBHW',\n//         CLASS=7,MSGCLASS=W,TIME=1440,\n//         NOTIFY=$SPBHW,REGION=0M\n//*-----------------------------------------------*\n//*   LIB: $SPBHW.PDS.DATA(NOKEEP)\n//*   DOC: ASSEMBLE AND LINK USING ASMBHWL\n//*-----------------------------------------------*\n//ASMBHWL  EXEC ASMBHWL,\n//  PARM.C='RENT,NOALIGN',PARM.L='RENT,REUS'\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//          DD  DSN=$SPBHW.PDS.DATA,DISP=SHR\n//SYSIN    DD  *\nNOKEEP   TITLE 'NOKEEP -- WTOR EXIT TO SUPPRESS MESSAGES'\n*        USE THE FOLLOWING IN MPFLSTXX TO COMPLETELY SUPPRESS\n*        A MESSAGE EVERYWHERE.  BE CAREFUL, THE MESSGE WILL NOT\n*        BE ABLE TO BE FOUND.  IT WILL BE AS IF IT NEVER HAPPENED.\n*\n*  MSGID,SUP(YES),RETAIN(NO),USEREXIT(NOKEEP) <-- THIS MODULE IS NOKEEP\n*\n*BRIAN WESTERMAN 1/98\n*\nNOKEEP   CSECT\nNOKEEP   AMODE 31\nNOKEEP   RMODE ANY\n         USING *,R12\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         B     START\n         DC    C'PROGRAM=NOKEEP'\n         DC    C'PROPERTY OF SYZYGY INCORPORATED'\n         DC    C'AND BRIAN WESTERMAN '\n         DC    C'@1998 ALL RIGHTS RESERVED'\n         DC    C'&SYSDATE',C' &SYSTIME'\n         PRINT NOGEN\nSTART    L     R11,0(R1)      PICK UP ADDRESS OF CTXT\n         USING CTXT,R11\n         OI    CTXTRFB2,CTXTRDTM\nRETURN   LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE 1\n         LTORG\n         SPACE 3\n         PRINT   GEN\n         IEZVX100\n         PRINT NOGEN\n         REGEQU\n         END   NOKEEP\n//L.SYSLMOD DD  DSN=IPO1.LINKLIB(NOKEEP),DISP=SHR\n//REFRESH   EXEC PGM=LINKLLA\n//SYSLMOD   DD   DISP=SHR,DSN=IPO1.LINKLIB\n//SYSPRINT  DD   SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANBKPR$": {"ttr": 9224, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00(\\x00(\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "SYZYGYB"}, "text": "//ZPANBKP  JOB (IS,OTS,M00,000,64),'SYSTEMS***BRIAN',\n//      CLASS=T,MSGCLASS=R,NOTIFY=C7BRIAN TYPRUN=SCAN\n/*JOBPARM S=CPUA\n//ASMFCL PROC  CLASS=R,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='C7BRIAN.PDS.DATA',\n//             LOAD='TECH.VTOC.LOAD',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=TECH.VTOC.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//*SYSLIN   DD  DDNAME=SYSPAM\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=PANBKPRO\n//LKED.SYSIN     DD   *\n    INCLUDE  SYSLIB(PAM)\n    NAME PRTBKUP(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANBKPR#": {"ttr": 9226, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "SYZYGYB"}, "text": "PV1001104 PANVALET BACKUP TAPE DIRECTORY LISTING\n\nTHIS IS AN ASSEMBLER PROGRAM UTILIZING THE PANVALET ACCESS\nMETHOD (PAM'S) TO CREATE A PANVALET DIRECTORY LISTING OF A PREVIOUSLY\nCREATED BACKUP TAPE.\n\nTHIS DIRECTORY LISTING IS SIMILAR TO THE LISTING PRODUCED VIA A\nPAN#2 ++PRINT 1-UP,COMMENT COMMAND.\n\nTO INSTALL THIS FEATURE, SIMPLY COMPLY WITH THE STANDARD LINKING\nINSTRUCTIONS FOR PAM'S FOUND IN THE PANVALET SYSTEMS MANAGEMENT\nMANUAL.\n\nTO EXECUTE THIS PROGRAM, ALL THAT IS REQUIRED IS A PANDD3 DD STATEMENT\nREFERENCING THE PANVALET BACKUP TAPE AND A SYSPRINT DD STATEMENT FOR\nTHE PANVALET DIRECTORY LISTING.\n\nTHESE PROGRAMS RUN UNDER OS/MVS.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANBKPR@": {"ttr": 9228, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\x08\\x00\\x08\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "SYZYGYB"}, "text": "//ZPANBPRT JOB (IS,OTS,M00,000,76),'SYSTEMS***BRIAN',\n//      CLASS=T,MSGCLASS=R NOTIFY=C7BRIAN TYPRUN=HOLD\n/*JOBPARM S=CPUA\n//STEP01   EXEC PGM=PRTBKUP,REGION=512K\n//STEPLIB   DD  DSN=TECH.VTOC.LOAD,DISP=SHR\n//SYSPRINT   DD   SYSOUT=R\n//PANDD3 DD DSN=IS.OTS.PROD.PANV.ARCHIVE(0),DISP=SHR\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANBKPRT": {"ttr": 9230, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x01\\xdc\\x01\\xdc\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 476, "newlines": 476, "modlines": 0, "user": "SYZYGYB"}, "text": "*          DATA SET PV1001104A AT LEVEL 003 AS OF 02/01/80\n         TITLE 'PANVALET PROTECTION FILE DIRECTORY PRINTER'             00001\nPRTBKUP  CSECT                                                          00002\n         SPACE                                                          00003\nR0       EQU   0                   GENERAL                              00004\nR1       EQU   1                                                        00005\nR2       EQU   2                    PURPOSE                             00006\nR3       EQU   3                                                        00007\nR4       EQU   4                     REGISTER                           00008\nR5       EQU   5                                                        00009\nR6       EQU   6                      EQUATES                           00010\nR7       EQU   7                                                        00011\nLINECNT  EQU   8                                                        00012\nSEARCHER EQU   9                                                        00013\nR10      EQU   10                                                       00014\nRA       EQU   10                                                       00014\nR11      EQU   11                                                       00015\nRB       EQU   11                                                       00015\nR12      EQU   12                                                       00016\nRC       EQU   12                                                       00016\nR13      EQU   13                                                       00017\nRD       EQU   13                                                       00017\nR14      EQU   14                                                       00018\nRE       EQU   14                                                       00018\nR15      EQU   15                                                       00019\nRF       EQU   15                                                       00019\n         SPACE                                                          00020\n         SAVE  (14,12)\n         LR    RC,RF\n         USING PRTBKUP,RC\n         ST    RD,REGSAVE+4\n         LR    R2,RD\n         LA    RD,REGSAVE\n         ST    RD,8(R2)\n         SPACE                                                          00031\n         WTO   'ABOUT TO OPEN DATASETS',ROUTCDE=11\n         OPEN  (PRINT,OUTPUT)   OPEN PRINT FILE FOR DIRECTORY           00032\n         OPEN  (SYSPRINT,OUTPUT)   OPEN PRINT FILE FOR DIRECTORY        00032\n         LA    R2,SYSPRINT                                              00033\n         USING IHADCB,R2                                                00034\n         TM    DCBOFLGS,X'10'                                           00035\n         BZ    NOPRINT                                                  00036\n         WTO   'OPENED SUCESSFULLY',ROUTCDE=11\n         DROP  R2                                                       00037\n         EJECT                                                          00038\n         WTO   'BEGIN PUTS',ROUTCDE=11\n         PUT   SYSPRINT,HELLO\n         PUT   SYSPRINT,DDNAME\n         PUT   SYSPRINT,BACKUP\n         PUT   PRINT,HELLO\n         PUT   PRINT,DDNAME\n         PUT   PRINT,BACKUP\n         WTO   'END PUTS',ROUTCDE=11\n         XC    ACTION,ACTION       CLEAR PAM RETURN CODE                00039\n         CALL  POPEN,(ACTION,DDNAME,BACKUP),VL OPEN PANVALET PROT FILE  00040\n         CLC   ACTION,=F'0'                                             00041\n         BNE   OPENFAIL                                                 00042\n         SPACE                                                          00043\n         L     R1,16               R1 => CVT                            00044\n         L     R1,0(,R1)           R1 => TCB ADDR LIST                  00045\n         L     R1,4(,R1)           R1 => CURRENT TCB                    00046\n         L     R3,8(,R1)           R3 => FIRST DEB IN CHAIN             00047\nCHKDEB   LA    R3,0(,R3)           CLEAR HIGH ORDER BYTE                00048\n         LTR   R3,R3               END OF DEB CHAIN?                    00049\n         BZ    DDCLOSED             IF SO, DDNAME NOT OPEN              00050\n         L     R2,24(,R3)           ELSE R2 => DCB                      00051\n         L     R4,12(,R1)          R4 => TIOT                           00052\n         AH    R4,40(,R2)          R4 => DD ENTRY IN TIOT               00053\n         CLC   4(8,R4),DDNAME      IS THIS THE PANVALET PROT FILE DD?   00054\n         BE    *+4+4+4 >==========  IF SO, READ THE JFCB                00055\n         L     R3,4(R3)          V  ELSE R3 => NEXT DEB IN CHAIN        00056\n         B     CHKDEB            V  AND WE GO BACK TO CHECK IT          00057\n         L     R3,36(,R2) <=======                                      00058\n         LA    R4,JFCBEXIT                                              00059\n         ST    R4,36(,R2)                                               00060\n         RDJFCB ((2))                                                   00061\n         ST    R3,36(,R2)                                               00062\n         SPACE                                                          00063\n         LA    SEARCHER,BUILDPRT                                        00064\n         ZAP   PAGECNT,=P'0'                                            00065\n         BAL   R10,TOPHEAD                                              00066\n         EJECT                                                          00067\nSRCHPAN  EQU   *                                                        00068\n         SPACE                                                          00069\n         XC    ACTION,ACTION       CLEAR ACTION WORD                    00070\n         MVC   SUBSET,=CL27'SUBSET'                                     00071\n         MVC   COMMENT,=CL52'COMMENT'                                   00072\n         CALL  PSRCH,(ACTION,DIRENTRY,NAME1,NAME2,COMMENT,SUBSET),VL    00073\n         CLC   ACTION,=F'0'                                             00074\n         BNE   SRCHFAIL                                                 00075\n         CLC   DIRENTRY(2),=C'$*'                                       00076\n         BE    CLOSEPAN                                                 00077\n         BR    SEARCHER                                                 00078\n         SPACE                                                          00079\nBUILDPRT EQU   *                                                        00080\n         SPACE                                                          00081\n         MVC   PNAME,DNAME                                              00082\n         MVC   PFORMAT,DFORMAT                                          00083\n         CLC   DDATEM,DDATEA                                            00084\n         BE    *+4+6 >============                                      00085\n         MVC   PDATEM,DDATEM     V                                      00086\n         MVC   PDATEA,DDATEA <====                                      00087\n         BAL   R11,PACKUP                                               00088\n         BAL   R11,EDITPACK                                             00089\n         SPACE                                                          00090\n         LA    R3,LANGTBL                                               00091\n         LA    R4,LLANGTBL                                              00092\nLANGLOOP CLC   DTYPE,0(R3)                                              00093\n         BE    MOVELANG                                                 00094\n         LA    R3,14(R3)                                                00095\n         BCT   R4,LANGLOOP                                              00096\n         LA    R3,QUESTION-5                                            00097\nMOVELANG MVC   PTYPE,5(R3)                                              00098\n         EJECT                                                          00099\n         LA    R3,ACTTBL                                                00100\n         LA    R4,LACTTBL                                               00101\nACTLOOP  CLC   DLASTACT+1(3),0(R3)                                      00102\n         BE    MOVEACT                                                  00103\n         LA    R3,12(R3)                                                00104\n         BCT   R4,ACTLOOP                                               00105\n         CLI   DLASTACT+1,C' '                                          00106\n         BE    STATCHK                                                  00107\n         LA    R3,QUESTION-3                                            00108\nMOVEACT  MVC   PLASTACT,3(R3)                                           00109\n         MVC   PPRODACT,DLASTACT                                        00110\n         SPACE                                                          00111\nSTATCHK  LA    R3,STATTBL                                               00112\n         LA    R4,LSTATTBL                                              00113\n         LA    R5,PSTATUS                                               00114\n         LA    R6,3                                                     00115\n         LA    R7,DSTATUS                                               00116\nSTATLOOP CLC   0(1,R7),0(R3)                                            00117\n         BE    MOVESTAT                                                 00118\n         LA    R3,5(R3)                                                 00119\n         BCT   R4,STATLOOP                                              00120\nMOVESTAT MVC   0(5,R5),0(R3)                                            00121\n         LA    R3,5(R3)                                                 00122\n         LA    R5,5(R5)                                                 00123\n         LA    R7,1(R7)                                                 00124\n         BCT   R6,STATLOOP                                              00125\n         SPACE                                                          00126\n         BAL   R11,LINEOUT                                              00127\n         SPACE                                                          00128\n         CLI   COMMENT,C'*'                                             00129\n         BNE   *+4+6+4 >==========                                      00130\n         MVC   PCOMMENT,COMMENT  V                                      00131\n         SPACE 1                 V                                      00132\n         BAL   R11,LINEOUT       V                                      00133\n         SPACE 1                 V                                      00134\n         CLI   SUBENTRY,C'.' <====                                      00135\n         BE    PRTSUB                                                   00136\n         SPACE                                                          00137\n         B     SRCHPAN                                                  00138\n         EJECT                                                          00139\nCLOSEPAN EQU   *                                                        00140\n         SPACE                                                          00141\n         XC    ACTION,ACTION       CLEAR ACTION WORD                    00142\n         CALL  PCLOSE,(ACTION),VL                                       00143\n         CLC   ACTION,=F'0'                                             00144\n         BNE   CLOSFAIL                                                 00145\n         SPACE                                                          00146\nCLOSEOS  EQU   *                                                        00147\n         SPACE                                                          00148\n         CLOSE (SYSPRINT)                                               00149\n         CLOSE (PRINT)                                                  00149\n         SPACE                                                          00150\nRETURN   EQU   *                                                        00151\n         SPACE                                                          00152\nNORMEND  DS    0H                       NORMAL END ROUTINE\n         L     R15,ACTION          LOAD RETURN CODE                     00153**3\n         L     RD,4(RD)                 LOAD RECURSIVE SAVE REG\n         RETURN (14,12)\n         SPACE                                                          00158\nNOPRINT  ABEND 301                 SYSPRINT DD STMT MISSING             00159\n         SPACE                                                          00160\n*** THIS SHOULD NEVER HAPPEN ***                                        00161\nDDCLOSED ABEND 302,DUMP            PAMS DID NOT OPEN PROT FILE          00162\n         EJECT                                                          00163\nPACKUP   EQU   *                                                        00164\n         SPACE                                                          00165\n         LH    R3,DVERSION                                              00166\n         CVD   R3,DBLEWORD                                              00167\n         PACK  DLEVEL,DLEVEL                                            00168\n         PACK  DUSER,DUSER                                              00169\n         PACK  DSECURE,DSECURE                                          00170\n         PACK  DBLOCKS,DBLOCKS                                          00171\n         PACK  DSTMTS,DSTMTS                                            00172\n         PACK  DBYTES,DBYTES                                            00173\n         PACK  DSUBSET,DSUBSET                                          00174\n         BR    R11                                                      00175\n         SPACE                                                          00176\nEDITPACK EQU   *                                                        00177\n         SPACE                                                          00178\n         MVC   PVERSION,=X'402020202020'                                00179\n         ED    PVERSION,DBLEWORD+5                                      00180\n         MVC   PLEVEL,=X'40202020'                                      00181\n         ED    PLEVEL,DLEVEL+1                                          00182\n         MVC   PUSER,=X'402020202020'                                   00183\n         ED    PUSER,DUSER+1                                            00184\n         MVC   PSECURE,=X'4020'                                         00185\n         ED    PSECURE,DSECURE                                          00186\n         MVC   PBLOCKS,=X'402020202020'                                 00187\n         ED    PBLOCKS,DBLOCKS+2                                        00188\n         MVC   PSTMTS,=X'40202020202020202020'                          00189\n         ED    PSTMTS,DSTMTS+3                                          00190\n         MVC   PBYTES,=X'40202020'                                      00191\n         ED    PBYTES,DBYTES                                            00192\n         MVC   PSUBSET,=X'402020202020'                                 00193\n         ED    PSUBSET,DSUBSET+1                                        00194\n         BR    R11                                                      00195\n         SPACE                                                          00196\nPRTSUB   EQU   *                                                        00197\n         SPACE                                                          00198\n         LA    SEARCHER,PRTSUB+4+6+4                                    00199\n         ZAP   DBLEWORD,DSUBSET                                         00200\n         CVB   R3,DBLEWORD                                              00201\n         MVC   PSUBNAME,SUBNAME                                         00202\n         MVC   PSUBDATE,SUBDATE                                         00203\n         PACK  SUBSTMT,SUBSTMT                                          00204\n         MVC   PSUBSTMT,=X'402020202020'                                00205\n         ED    PSUBSTMT,SUBSTMT+2                                       00206\n         BAL   R11,LINEOUT                                              00207\n         BCT   R3,SRCHPAN                                               00208\n         LA    SEARCHER,BUILDPRT                                        00209\n         B     SRCHPAN                                                  00210\n         EJECT                                                          00211\nTOPHEAD  EQU   *                                                        00212\n         SPACE                                                          00213\n         ST    R11,SAVER                                                00214\n         AP    PAGECNT,=P'1'                                            00215\n         MVI   CARRCNTL,C'1'                                            00216\n         MVC   PRTAREA(L'HA),HA                                         00217\n         MVC   PRTAREA+112(6),=X'402020202020'                          00218\n         ED    PRTAREA+112(6),PAGECNT                                   00219\n         MVC   PRTAREA+109(4),=C'PAGE'                                  00220\n         BAL   R11,LINEOUT                                              00221\n         MVC   PRTAREA(5),=C'DSN ='                                     00222\n         MVC   PRTAREA+6(44),DSNAME                                     00223\n         MVC   PRTAREA+51(8),=C'VOLSER ='                               00224\n         MVC   PRTAREA+60(6),VOLSER                                     00225\n         BAL   R11,LINEOUT                                              00226\n         MVI   CARRCNTL,C'0'                                            00227\n         MVC   PRTAREA+120-L'H2(L'H2),H2                                00228\n         BAL   R11,LINEOUT                                              00229\n         MVC   PRTAREA(120-L'H2),H1                                     00230\n         MVC   PRTAREA+120-L'H3(L'H3),H3                                00231\n         BAL   R11,LINEOUT                                              00232\n         MVI   CARRCNTL,C'0'                                            00233\n         LA    LINECNT,LINES-9                                          00234\n         L     R11,SAVER                                                00235\n         BR    R10                                                      00236\n         SPACE                                                          00237\nBOTHEAD  EQU   *                                                        00238\n         SPACE                                                          00239\n         ST    R11,SAVER                                                00240\n         MVI   CARRCNTL,C'0'                                            00241\n         MVC   PRTAREA,H1                                               00242\n         BAL   R11,LINEOUT                                              00243\n         MVC   PRTAREA+120-L'H3(L'H3),H3                                00244\n         BAL   R11,LINEOUT                                              00245\n         L     R11,SAVER                                                00246\n         BR    R10                                                      00247\n         SPACE                                                          00248\nLINEOUT  EQU   *                                                        00249\n         SPACE                                                          00250\n         PUT   SYSPRINT,PRINTOUT                                        00251\n         MVC   PRINTOUT,BLANK                                           00252\n         BCTR  LINECNT,R11                                              00253\n         BAL   R10,BOTHEAD                                              00254\n         BAL   R10,TOPHEAD                                              00255\n         BR    R11                                                      00256\n         EJECT                                                          00257\nOPENFAIL EQU   *                                                        00258\n         SPACE                                                          00259\n         MVC   HERR+39(6),=CL6'OPEN.'                                   00260\n         MVI   CARRCNTL,C'1'                                            00261\n         BAL   R10,PRTFAIL                                              00262\n         B     CLOSEOS                                                  00263\n         SPACE                                                          00264\nSRCHFAIL EQU   *                                                        00265\n         SPACE                                                          00266\n         MVC   HERR+39(6),=CL6'SRCH.'                                   00267\n         MVI   CARRCNTL,C'1'                                            00268\n         BAL   R10,PRTFAIL                                              00269\n         B     CLOSEPAN                                                 00270\n         SPACE                                                          00271\nCLOSFAIL EQU   *                                                        00272\n         SPACE                                                          00273\n         MVC   HERR+39(6),=C'CLOSE.'                                    00274\n         BAL   R10,PRTFAIL                                              00275\n         B     CLOSEOS                                                  00276\n         SPACE                                                          00277\nPRTFAIL  EQU   *                                                        00278\n         SPACE                                                          00279\n         LA    LINECNT,3(LINECNT)                                       00280\n         MVI   PRTAREA,C'*'                                             00281\n         MVC   PRTAREA+1(46),PRTAREA                                    00282\n         BAL   R11,LINEOUT                                              00283\n         MVC   PRTAREA(47),HERR                                         00284\n         L     R3,ACTION                                                00285\n         CVD   R3,DBLEWORD                                              00286\n         UNPK  PRTAREA+19(3),DBLEWORD+6(2)                              00287\n         OI    PRTAREA+21,X'F0'                                         00288\n         BAL   R11,LINEOUT                                              00289\n         MVI   PRTAREA,C'*'                                             00290\n         MVC   PRTAREA+1(46),PRTAREA                                    00291\n         BAL   R11,LINEOUT                                              00292\n         BR    R10                                                      00293\n         EJECT                                                          00294\n* PANVALET ACCESS METHOD PARAMETERS                                     00295\n         SPACE                                                          00296\nACTION   DC    F'0'  RETURN CODE FRON PAN, SHOULD BE SET TO ZERO        00297\nREGSAVE  DS    18F\n         SPACE                                                          00298\n* POPEN PARAMETERS                                                      00299\n         SPACE                                                          00300\nDDNAME   DC    CL8'PANDD3'         DDNAME OF FILE TO BE OPENED          00301\nBACKUP   DC    CL8'BACKUP'  MUST BE CL8'BACKUP' IF PROTECTION FILE      00302\nHELLO    DC    CL50'HELLO THERE PRINT DATASET'                          00302\n         SPACE                                                          00303\n* PSRCH PARAMETERS                                                      00304\n         SPACE                                                          00305\nDIRENTRY DS    0CL80               DIR ENTRY RETURNED IN 0-UP FORMAT    00306\nDNAME    DS    CL10                NAME LEFT JUSTIFIED                  00307\nDLEVEL   DS    ZL3                 LEVEL NUMBER                         00308\nDUSER    DS    ZL4                 USER CODE                            00309\nDSECURE  DS    ZL1                 SECURITY CODE                        00310\nDTYPE    DS    CL5                 LANGUAGE TYPE                        00311\nDSTATUS  DS    0CL3                3 CHAR STATUS                        00312\nDPRODT   DS    CL1                 P-PROD  T-TEST                       00313\nDEORDD   DS    CL1                 E-ENABLE  D-DISABLE                  00314\nDAORDI   DS    CL1                 A-ACTIVE  I-INACTIVE                 00315\nDDATEM   DS    CL8                 DATE OF LAST MAINTENANCE MM/DD/YY    00316\nDDATEA   DS    CL8                 DATE OF LAST ACCESS  MM/DD/YY        00317\nDBLOCKS  DS    ZL5                 NO. OF BLOCKS                        00318\nDSTMTS   DS    ZL8                 NO. OF STATEMENTS                    00319\nDLASTACT DS    CL4                 LAST ACTION, 1ST POS. IS * IF PROD.  00320\nDBYTES   DS    ZL2                 NO. BYTES PER STATMENT               00321\nDSUBSET  DS    ZL4                 NO. OF SUBSETS(SUPERSETS ONLY)       00322\nDNAME2   DS    CL10                NAME RIGHT JUSTIFIED                 00323\n         DS    CL1                 NOT USED                             00324\nDFORMAT  DS    CL1                 N=NOFORMAT, T=TSO, ELSE BLANK        00325\nDINC     DS    CL1                 I=INCLUDE BEING EXPND (EXIT ONLY)    00326\nDVERSION DS    XL2                 VER. #(FOR PROTECTION FILES ONLY)    00327\nNAME1    DC    CL22'NO-ENTRY'      SEARCH NAME1                         00328\nNAME2    DC    CL11'NO-ENTRY'      SEARCH NAME2                         00329\nCOMMENT  DC    CL52'NO-ENTRY'      NO COMMENTS WANTED, ELSE='COMMENT'   00330\nSUBSET   DS    CL27                NO SUBSETS WANTED, ELSE='SUBSET'     00331\n         ORG   SUBSET                                                   00332\nSUBENTRY DS    0CL27                                                    00333\nSUBNAME  DS    CL11                FORMAT .XXXXXXXXXX X'S = SUBSET NME  00334\n         DS    CL1                 BLANK                                00335\nSUBDATE  DS    CL8                 DATE ATTACHED IN FORM MM/DD/YY       00336\n         DS    CL2                 BLANKS                               00337\nSUBSTMT  DS    ZL5                 # OF STMTS IN SUBSET                 00338\n         SPACE                                                          00339\n         EJECT                                                          00340\nLINES    EQU   60                  SET VALUE FOR LINES PER PAGE         00341\n         SPACE                                                          00342\nBLANK    DC    C' '                                                     00343\nPRINTOUT DS    0CL121                                                   00344\nCARRCNTL DC    C' '                                                     00345\nPRTAREA  DC    CL120' '                                                 00346\n         ORG   PRTAREA                                                  00347\nPNAME    DS    CL10                                                     00348\n         DS    CL1                                                      00349\nPLEVEL   DS    CL4                                                      00350\nPVERSION DS    CL6                                                      00351\nPUSER    DS    CL6                                                      00352\n         DS    CL1                                                      00353\nPSECURE  DS    CL2                                                      00354\n         DS    CL1                                                      00355\nPTYPE    DS    CL9                                                      00356\n         DS    CL1                                                      00357\nPFORMAT  DS    CL1                                                      00358\n         DS    CL1                                                      00359\nPSTATUS  DS    3CL5                                                     00360\n         DS    CL1                                                      00361\nPDATEM   DS    CL8                                                      00362\n         DS    CL1                                                      00363\nPDATEA   DS    CL8                                                      00364\n         DS    CL1                                                      00365\nPBLOCKS  DS    CL6                                                      00366\n         DS    CL2                                                      00367\nPSTMTS   DS    CL10                                                     00368\n         DS    CL1                                                      00369\nPPRODACT DS    CL1                                                      00370\nPLASTACT DS    CL9                                                      00371\n         ORG   *-1                                                      00372\nPBYTES   DS    CL4                                                      00373\n         DS    CL2                                                      00374\nPSUBSET  DS    CL6                                                      00375\n         ORG   PRTAREA                                                  00376\nPCOMMENT DS    CL52                                                     00377\n         ORG   PRTAREA                                                  00378\nPSUBNAME DS    CL11                                                     00379\n         DS    CL1                                                      00380\nPSUBDATE DS    CL8                                                      00381\n         DS    CL1                                                      00382\nPSUBSTMT DS    CL6                                                      00383\n         ORG                                                            00384\n         SPACE                                                          00385\nHA       DC    C'PANVALET PROTECTION FILE DIRECTORY REPORT'             00386\nH1       DC    CL12'NAME',CL23'LVL VERSN  USER',CL13'TYPE',CL11'STATUS' 00387\nH2       DC    CL61'  DATE     DATE   NO OF     NO OF      LAST   AVG  X00388\n                 NO OF'                                                 00389\nH3       DC    CL61'MAINTNED ACCESSED BLOCKS  STATEMENTS  ACTION BYTES X00390\n                SUBSETS'                                                00391\nHERR     DC    CL47'* PAM ACTION CODE ''   '' RETURNED FROM P       *'  00392\n         EJECT                                                          00393\nLANGTBL  DC    C'AUTOC',C'AUTOCODER'                                    00394\n         DC    C'ASMB ',C'ASSEMBLER'                                    00395\n         DC    C'COBOL',C'COBOL    '                                    00396\n         DC    C'ANSCB',C'ANSCOBOL '                                    00397\n         DC    C'COB72',C'COBOL-72 '                                    00398\n         DC    C'FORT ',C'FORTRAN  '                                    00399\n         DC    C'PL/1 ',C'PL/1     '                                    00400\n         DC    C'RPG  ',C'RPG      '                                    00401\n         DC    C'OBJCT',C'OBJECT   '                                    00402\n         DC    C'JCL  ',C'JCL      '                                    00403\n         DC    C'DATA ',C'DATA     '                                    00404\n         DC    C'OTHER',C'OTHER    '                                    00405\n         DC    C'UNSPC',C'UNSPECIFD'                                    00406\n         DC    C'USER1',C'USER180  '                                    00407\n         DC    C'USER2',C'USER780  '                                    00408\nLLANGTBL EQU   (*-LANGTBL)/14                                           00409\n         SPACE                                                          00410\nACTTBL   DC    C'ADD',C'ADDED    '                                      00411\n         DC    C'COP',C'COPIED   '                                      00412\n         DC    C'UPD',C'UPDATED  '                                      00413\n         DC    C'REN',C'RENAMED  '                                      00414\n         DC    C'STA',C'STATUS   '                                      00415\n         DC    C'LEV',C'LEVEL    '                                      00416\n         DC    C'USE',C'USER     '                                      00417\n         DC    C'FOR',C'FORMAT   '                                      00418\n         DC    C'FMT',C'FORMAT   '                                      00419\n         DC    C'REP',C'REPLACED '                                      00420\n         DC    C'RES',C'RESTORED '                                      00421\n         DC    C'ALL',C'ALLOCATED'                                      00422\n         DC    C'ATT',C'ATTACHED '                                      00423\n         DC    C'DET',C'DETACHED '                                      00424\n         DC    C'COM',C'COMMENT  '                                      00425\n         DC    C'SEQ',C'RESEQ    '                                      00426\nLACTTBL  EQU   (*-ACTTBL)/12                                            00427\n         SPACE                                                          00428\nSTATTBL  DC    C'TEST PROD '                                            00429\n         DC    C'ACTV INAC '                                            00430\n         DC    C'ENABLDSABL'                                            00431\nLSTATTBL EQU   (*-STATTBL)/5                                            00432\n         EJECT                                                          00433\nPAGECNT  DS    PL3                                                      00434\nQUESTION DC    9C'?'                                                    00435\nDBLEWORD DS    D                                                        00436\nSAVER    DS    F                                                        00437\nDD3JFCB  DS    CL176                                                    00438\n         ORG   DD3JFCB+0                                                00439\nDSNAME   DS    CL44                                                     00440\n         ORG   DD3JFCB+118                                              00441\nVOLSER   DS    CL6                                                      00442\n         ORG                                                            00443\n         SPACE                                                          00444\n         LTORG                                                          00445\n         SPACE                                                          00446\n         PRINT NOGEN                                                    00447\n         SPACE                                                          00448\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      X00449\n               RECFM=FBA,LRECL=121,BLKSIZE=1210                         00450\nPRINT    DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      X00449\n               RECFM=FBA,LRECL=121,BLKSIZE=1210                         00450\n         SPACE                                                          00451\n         DS    0F                                                       00452\nJFCBEXIT DC    XL1'87'                                                  00453\n         DC    AL3(DD3JFCB)                                             00454\n         SPACE                                                          00455\n         DCBD  DSORG=(PS)                                               00456\n         END                                                            00457\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "POSTER": {"ttr": 9478, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\xf8\\x00\\xf8\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 248, "newlines": 248, "modlines": 0, "user": "FILE088"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PRCJ2001": {"ttr": 9483, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SYZYGYB"}, "text": "++USERMOD(PRCJ201).\n++VER(Z038) FMID(HJE2330) PRE(UZ77168).\n++SRCUPD(HASPCOMM).\n./ CHANGE NAME=HASPCOMM                                        PRCJ201\n         LA    R9,7                ASSUME FULL LENGTH COMPARE  PRCJ201\n         CLI   COMVERB,C'D'        IS THIS A $D'... COMMAND ?  PRCJ201\n         BNE   *+6                 SKIP IF NO                  PRCJ201\n         LR    R9,R1               ELSE SET FOR SHORT COMPARE  PRCJ201\nCD7DLONG DS    0H                                              PRCJ201\n*--------CLC---COMJNAME,JQEJNAME---COMPARE FOR MATCH           PRCJ201\n         EX    R9,CD7DCLC          COMPARE FOR JOBNAME MATCH   PRCJ201\nCD7DCLC  CLC   COMJNAME(*-*),JQEJNAME  EXECUTED; JOBNAME MATCH?PRCJ201\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCJ2004": {"ttr": 9485, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYZYGYB"}, "text": "++USERMOD(PRCJ204).\n++VER(Z038) FMID(HJE2330) PRE(UZ76271,UZ77168,TT75394,UZ90341).\n++SRCUPD(HASPSSSM).\n./ CHANGE NAME=HASPSSSM\n*                                                              PRCJ204\n*  IF ALLOCATOR IS TSU/STC FORCE DCT MSGCLASS \"A\" FOR DEV      PRCJ204\n*                                                              PRCJ204\n         TM    JCTJOBFL-JCTDSECT(R7),JCTSTCJB+JCTTSUJB STC/TSU PRCJ204\n         BNZ   HALR120                               FORCE \"A\" PRCJ204\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PRCJ2212": {"ttr": 9729, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\xdc\\x00\\xdc\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 220, "newlines": 220, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BJ2SMP JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,TIME=1440\n//*\n//SMPEJOB EXEC PGM=GIMSMP,REGION=4096K,TIME=1440\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//SMPCNTL  DD  *\n  SET BDY (M211TAA).\n  UCLIN.\n  DEL SYSMOD(PRCJ212).\n  ENDUCL.\n  RESETRC.\n  SET BDY (GLOBAL).\n  UCLIN.\n  DEL SYSMOD(PRCJ212).\n  ENDUCL.\n  RESETRC.\n  SET BDY (GLOBAL).\n  RECEIVE SELECT(PRCJ212).\n  SET BOUNDARY(M211TAA).\n  APPLY  SELECT(PRCJ212) REDO RETRY (YES) .\n//SMPPTFIN DD  *\n++ USERMOD (PRCJ212) /*\n*A  ALL EXITS FROM HASPSTAM ARE CODED HERE                      BHW 127\n*B  BRIAN WESTERMAN MARCH 1987                                  BHW 127\n*C  STAM                                                        BHW 127\n*D  EXIT 212 - OPEN/ALLOCATE REQUEST FOR DUMPER/LOADER          BHW 127\n */ .\n++ VER (Z038) FMID(HJE2329) .\n++ VER (Z038) FMID(HJE2330) PRE(UZ76271,UZ90341).\n++ SRCUPD (HASPSTAM) .\n./       CHANGE NAME=HASPSTAM\n               $XIT,               GENERATE HASP XIT DSECT      BHW 127C\n               $EXITPL,            GENERATE HASP EXITPL DSECT   BHW 127C\n         COPY  STAM127A                                         BHW 127\nSBTNALLO DS    0H                                               BHW 127\n++ MAC (STAM127A) DISTLIB(HASPSRC) .\n         EJECT                                                  BHW 127\n***********************************************************************\n*                                                                     *\n*        EXIT 212 - BEFORE ALLOCATION OF DUMPER/LOADER DATA SET       *\n*                                                                     *\n*        EXIT CONDITION                                               *\n*                                                                     *\n*        REGISTER CONTENTS                                            *\n*        -------- --------                                            *\n*          R0     ADDRESS OF ERROR AND INFO CODE                      *\n*          R1     ADDRESS OF DDNAME RETURN AREA                       *\n*          R2-R6  N/A                                                 *\n*          R7     ADDRESS OF DUMPER/LOADER DCT                        *\n*          R8-R9  N/A                                                 *\n*          R11    ADDRESS OF HCT                                      *\n*          R12    N/A                                                 *\n*          R13    ADDRESS OF O S SAVE AREA                            *\n*          R14    RETURN ADDRESS                                      *\n*          R15    ENTRY POINT ADDRESS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2                                                BHW 127\n         LA    R0,SBTDAERR         ADDR OF ERROR/INFO FIELDS    BHW 127\n         LA    R1,SBTDADDN         ADDRESS OF DDNAME            BHW 127\n        $EXIT  212,ENVIRON=SUBTASK,MAXRC=12                     BHW 127\n         B     *+4(R15)            BR ON RETURN CODE            BHW 127\n         B     SBTALLO             + 0 - NORMAL PROCESSING      BHW 127\n         B     SBTALLO             + 4 - NORMAL PROCESSING      BHW 127\n         B     SBTNALLO            + 8 - ALLOCATE HAS BEEN DONE BHW 127\n         LR    R3,R1               + 12 - ALLOCATE FAILURE      BHW 127\n         B     SBTDALER            GO TERMINATE                 BHW 127\n         SPACE 1                                                BHW 127\nSBTALLO  DS    0H                                               BHW 127\n         EJECT                                                  BHW 127\n++ SRC (PRCX212) DISTLIB(HASPSRC) DISTOBJ(AOSH3) .\nXIT212   TITLE 'PRC JES2 EXIT212 MODULE'\n         COPY  $HASPGBL\nPRCX212  $MODULE DYN,              GENERATE OS DYN DSECT               *\n               $CAT,               GENERATE HASP CAT DSECT (HCT NEEDS) *\n               $BUFFER,            GENERATE HASP BUFFER DSECT          *\n               $JQE,               GENERATE HASP JQE DSECT             *\n               $JCT,               GENERATE HASP JCT DSECT             *\n               $JOE,               GENERATE HASP JOE DSECT             *\n               $DCT,               GENERATE HASP DCT DSECT             *\n               $PCE,               GENERATE HASP PCE DSECT             *\n               $MIT,               GENERATE HASP MIT DSECT             *\n               $SMF,               GENERATE HASP SMF DSECT             *\n               $TRP,               GENERATE HASP TRP DSECT             *\n               $HCT                GENERATE HASP CONTROL TABLE\n         TITLE 'EXIT POINT 212 -- DUMPER/LOADER DYNAMIC ALLOCATE'\n***********************************************************************\n*                                                                     *\n*        HASPSTAM DUMPER/LOADER ALLOCATE                              *\n*                                                                     *\n*        REG     ENTRY VALUE              EXIT VALUE                  *\n*        ---     -----------              ----------                  *\n*                                                                     *\n*        R0      ADDR OF ERROR/INFO FIELD UNCHANGED                   *\n*        R1      ADDR OF DDNAME FIELD     DYNALLOC RETURN CODE IF NZ  *\n*                                          ELSE UNCHANGED             *\n*        R2-R6   N/A                      UNCHANGED                   *\n*        R7      ADDR OF DMP/LOD DCT      UNCHANGED                   *\n*        R8-R10  N/A                      UNCHANGED                   *\n*        R11     ADDR OF HCT              UNCHANGED                   *\n*        R12     N/A                      UNCHANGED                   *\n*        R13     ADDR OF O S SAVE AREA    UNCHANGED                   *\n*        R14     RETURN ADDRESS           UNCHANGED                   *\n*        R15     ENTRY POINT ADDRESS      0 OR 4 NORMAL PROCESSING    *\n*                                         8 DATA SET ALLOCATED        *\n*                                        12 DYNALLOC ERROR            *\n*                                                                     *\n*        CC      N/A                      N/A                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING HCTDSECT,R11\n         USING DCTDSECT,R7         DCT ADDRESSABILITY\n         SPACE 2\nUSER212  $ENTRY BASE=R15\n         SAVE  (14,12)             SAVE ALL REGISTERS\n         DROP  R15                 SWITCH LOCAL\n         USING USER212,R12          BASE\n         LR    R12,R15             LOCAL BASE\n         LR    R2,R1               SAVE ADDRESS OF DDNAME\n         LR    R3,R0               SAVE ADDRESS OF ERROR CODE\n         MVC   LOCDSN,XDCTDSN      COPY DATA SET NAME\n         EJECT\n         LOCATE CAMLST             SEE IF DATA SET NAME IS CATALOGED\n         LTR   R15,R15             BR IF DATA SET NAME IS\n         BZ    ISCAT                CATALOGED\n         SPACE 1\n         TM    XDCTFLG1,XDCTDUMP   GET OUT IF DATA SET NOT\n         BNO   SETRC0               CATALOGED AND THIS IS LOADER\n         LA    R1,TEXTDUMP           ELSE POINT TO DUMPER TEXT UNITS\n         B     ALLOCATE               AND GO ALLOCATE\n         SPACE 1\nISCAT    TM    XDCTFLG1,XDCTDUMP   IMMEDIATE EXIT IF THIS CATALOGED\n         BO    EXIT212              DATA SET IS BEING USED BY A DUMPER\n         CLI   DSNAREA+4,X'80'     IMMEDIATE EXIT IF THIS CATALOGED\n         BNE   EXIT212              IS NOT ON TAPE\n         LA    R1,TEXTLOAD           ELSE POINT TO LOADER TEXT UNITS\n         SPACE 2\nALLOCATE MVC   DYNUCNT,XDCTUNCT    UNIT COUNT\n         ST    R1,DYNALLOC+4+S99TXTPP-S99RB STUFF POINTER TO TEXT UNITS\n         LA    R1,DYNALLOC         ADDRESS OF DYNALLOC RB\n         DYNALLOC ,                DYNAMICALLY ALLOCATE\n         LTR   R1,R15              TEST RETURN CODE\n         BZ    SETRC8              SET RC = 8 IF DYNALLOC IS OK\n         SPACE 1\n         ST    R1,20+4*R1(,R13)    PASS BACK DYNALLOC RETURN CODE\n         MVC   0(4,R3),DYNALLOC+4+S99RSC-S99RB  RETURN ERROR/INFO CODES\n         LA    R15,12              SET 'BAD ALLOC' RETURN CODE\n         B     EXIT212              AND EXIT\n         SPACE 1\nSETRC0   SR    R15,R15             SET RETURN CODE\n         B     EXIT212              AND EXIT\n         SPACE 1\nSETRC8   LA    R15,8               SET RETURN CODE\n         MVC   0(8,R2),DYNDDN      RETURN DDNAME\nEXIT212  RETURN (14,12),RC=(15)\n         SPACE 2\nEXIT212F SR    R15,R15             SET RETURN CODE\n         BR    R14                  AND EXIT\n         EJECT\nCAMLST   CAMLST NAME,LOCDSN,,DSNAREA\nDSNAREA  DS    0D,XL265\n         SPACE 2\nDYNALLOC DC    0A(0),AL1(X'80'),AL3(*+3)\n         DC    AL1(20,S99VRBAL,S99NOCNV,0),AL2(0,0),A(*-*,0)\n         DC    AL1(S99WTUNT+S99OFFLN+S99MOUNT,0,0,0)\nTEXTDUMP DC    A(DYNDSN,DYNSTATS,DYNDISP,DYNRDDN,DYNUNIT,DYNUCT)\n         DC    A(DYNVOL)\n         ORG   *-4\n         DC    AL1(X'80')          SET END OF LIST\n         ORG   ,\nTEXTLOAD DC    A(DYNDSN,DYNSTAT2,DYNDISP2,DYNCDISP,DYNRDDN)\n         DC    A(DYNUNIT,DYNUCT)\n         ORG   *-4\n         DC    AL1(X'80')          SET END OF LIST\n         ORG   ,\nDYNDSN   DC    AL2(DALDSNAM,1,L'LOCDSN) DSN =\nLOCDSN   DC    CL44' '             DATA SET NAME\nDYNSTATS DC    AL2(DALSTATS,1,1),X'04' DISP = (NEW,\nDYNDISP  DC    AL2(DALNDISP,1,1),X'02' CATLG)\nDYNSTAT2 DC    AL2(DALSTATS,1,1),X'01' DISP = (OLD,\nDYNDISP2 DC    AL2(DALNDISP,1,1),X'01' UNCATLG,\nDYNCDISP DC    AL2(DALCDISP,1,1),X'08' KEEP)\nDYNRDDN  DC    AL2(DALRTDDN,1,8)   RETURN DDNAME\nDYNDDN   DC    CL8' '              DDNAME\nDYNUNIT  DC    AL2(DALUNIT,1,8),CL8'TAPE' UNIT = TAPE\nDYNUCT   DC    AL2(DALUNCNT,1,1)     NR OF UNITS\nDYNUCNT  DC    AL1(1)              UNIT COUNT\nDYNVOL   DC    AL2(DALVLCNT,1,1),AL1(99)\n         LTORG\n         EJECT ,\n         $MODEND ,\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCM0001": {"ttr": 9734, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00.\\x00.\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BLIMIT JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=W\n//SMP     EXEC PGM=GIMSMP,REGION=4096K,TIME=60\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//SMPCNTL  DD  *\n  SET BDY (GLOBAL).\n  RECEIVE SELECT(PRCM001).\n  SET BOUNDARY(M211TAA).\n  APPLY  SELECT(PRCM001) REDO.\n//SMPPTFIN  DD *\n++USERMOD  (PRCM001) .\n++VER      (Z038) FMID(JBB1326) PRE(UZ60630)\n   /*       ZAP IEALIMIT                                          */ .\n++ZAP      (IEAVPRT0) DISTLIB(AOSC5) .\n   NAME  IEALIMIT\n   VER   08  4780F00A\n   REP   08  47F0\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCM0002": {"ttr": 9736, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00.\\x00.\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BSHR   JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=W\n//SMP     EXEC PGM=GIMSMP,REGION=4096K,TIME=60\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//SMPCNTL  DD  *\n  SET BDY (GLOBAL).\n  RECEIVE SELECT(PRCM002).\n  SET BOUNDARY(M211TAA).\n  APPLY  SELECT(PRCM002) REDO.\n//SMPPTFIN  DD *\n++USERMOD  (PRCM002) .\n++VER      (Z038) FMID(EBB1102) PRE(UZ80347)\n   /*       ZAP TSO ALLOC DEFAULT TO DISP=SHR                     */ .\n++ ZAP      (IKJEFD30) DISTLIB(AOST4) .\n   NAME  IKJEFD30\n   VER   021A  D201,A00C,C41E\n   REP   021A  9202,A00D,0700\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCM0003": {"ttr": 9738, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00c\\x00c\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 99, "newlines": 99, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7B285I  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=W\n//SMP     EXEC PGM=GIMSMP,REGION=4096K,TIME=60\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//* * * * * * * * * * * * * * * * * * * * * * * *\n//* THIS SYSMOD REQUIRES PRCM0004 ALSO    * * * *\n//* * * * * * * * * * * * * * * * * * * * * * * *\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//SMPCNTL  DD  *\n  SET BDY (GLOBAL).\n  RECEIVE SELECT(PRCM003).\n  SET BOUNDARY(M211TAA).\n  APPLY  SELECT(PRCM003) REDO.\n//SMPPTFIN  DD *\n++USERMOD  (PRCM003) .\n++VER      (Z038) FMID(JBB1329) PRE(UZ75725)\n   /*      ADD EXCP COUNTS TO MESSAGE IEF285I.\n           .  DESCRIPTION OF MESSAGE\n              0C0 MSGBUFFR DS    0CL74\n              0C0 MSGIDENT DS    CL10'IEF285I   '\n              0CA MSGTEXT  DS    0CL64\n              0CA MSGDSNM  DS    CL44  DSNAME\n              0F6          DS    CL01\n              0F7 MSGDISP  DS    CL12  DISP\n              103 MSGERCDE DS    CL01  ERROR CODE\n              104 MSGFLAGS DS    CL06  DESC,ROUT,TYPE\n                  *              END OF MSGBUFFR\n              10A PRLINESW DS    CL1   UNREFERENCED SYMBOL\n              10B @OLDKEY  DS    CL1   STORAGE KEY\n                  *              END OF GETMAINED AREA, LENGTH X'10C'\n              104          DS    CL1\n              105 MSGCOUNT DS    CL8' 0000000'\n              10D MSGEXCP  DS    CL5' EXCP'\n              112 MSGFLAGS DS    CL6   DESC,ROUT,TYPE\n              118 @OLDKEY  DS    CL1   STORAGE KEY\n              120 DOUBLE   DS    D     DOUBLEWORD\n                  *              END OF GETMAINED AREA, LENGTH X'128'\n           .  ONE INSTRUCTION IN THIS ZAP IS DEPENDENT ON\n              THE PTF LEVEL OF MODULE 'IEFAB4A2'.\n              GOING BACK THRU THE SAVEAREA CHAIN, THIS CODE\n              GETS IEFAB4A2'S DSABPTR FIELD, WHICH IS LOCATED\n              IN AN AREA POINTED TO BY IEFAB4A2'S REGISTER 10.\n              THE OFFSET INTO THIS AREA HAS BEEN KNOWN TO CHANGE.\n              IF IEFAB4A2 IS AT PTF UZ25602 LEVEL\n              THE OFFSET IS HEX 134, AS THESE VERIFYS WILL INDICATE.\n                 NAME IEFW21SD IEFAB4A2\n                 VER 0086 D203,A134\n                 VER 0166 BF8F,A134\n              IF IEFAB4A2 IS AT PTF UZ90089 LEVEL\n              THE OFFSET IS HEX 13C, AS THESE VERIFYS WILL INDICATE.\n                 NAME IEFW21SD IEFAB4A2\n                 VER 008C D203,A13C\n                 VER 016C BF8F,A13C\n              IF IEFAB4A2 IS AT PTF UZ68375 LEVEL\n              THE OFFSET IS HEX 138, AS THESE VERIFYS WILL INDICATE.\n                 NAME IEFW21SD IEFAB4A2\n                 VER 0086 D203,A138\n                 VER 0166 BF2F,A138\n              IF IEFAB4A2 IS NOT AT ANY OF THE ABOVE PTF LEVELS,\n              DUMP IEFAB4A2 AND LOOK FOR INSTRUCTIONS LIKE\n              THE ABOVE VERIFYS NEAR THE ABOVE OFFSETS, AND YOU\n              SHOULD BE ABLE TO FIGURE OUT THE PROPER OFFSET\n              AND CHANGE THIS ZAP IF NECESSARY.\n              */.\n++ ZAP     (IEFAB4A2) DISTLIB(AOSB3)  /* LMOD IS IEFW21SD.\n              THE ONLY PURPOSE OF THIS ZAP, WHICH CHANGES NOTHING,\n              IS TO ASSOCIATE IEFAB4A2 WITH THE USERMOD SO THAT\n              ANY IBM PTF FOR IEFAB4A2 WILL BE BLOCKED. */.\n NAME IEFAB4A2\n VER 0086 D203,A138\n REP 0086 D203,A138     DUMMY ZAP\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCM0004": {"ttr": 9741, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x90\\x00\\x90\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 144, "newlines": 144, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7B285I  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=W\n//SMP     EXEC PGM=GIMSMP,REGION=4096K,TIME=60\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//* * * * * * * * * * * * * * * * * * * * *\n//* THIS SYSMOD REQUIRES PRCM0003 ALSO  * *\n//* * * * * * * * * * * * * * * * * * * * *\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//SMPCNTL  DD  *\n  SET BDY (GLOBAL).\n  RECEIVE SELECT(PRCM004).\n  SET BOUNDARY(M211TAA).\n  APPLY  SELECT(PRCM004) REDO.\n//SMPPTFIN  DD *\n++USERMOD  (PRCM004) .\n++VER      (Z038) FMID(EBB1102).\n++ZAP     (IEFAB4B0) DISTLIB(AOSB3)  /* LMOD IS IEFW21SD */.\n NAME IEFAB4B0\n EXPAND IEFAB4B0(256)\n VER 0076 D248          MVC MSGBUFFER+1(73),MSGBUFFER\n VER 0118 41A00037      LINE1LEN IS 55\n VER 011C 1EA2          ALR   R10,R2\n VER 03E8 E600010C      SP 230, LENGTH IS 268\n VER 0052 4220B10B      STC   R2,@OLDKEY\n VER 02EE 4320B10B      IC    R2,@OLDKEY\n REP 0076 D250          MVC MSGBUFFER+1(81),MSGBUFFER\n REP 0118 41A00052      CHANGE LENGTH OF MSG FROM 55+13 TO 82\n REP 011C 0700          KEEP MGS LENGTH FIXED (DONT ADD 13)\n REP 03E8 E6000128      CHANGE LENGTH OF WORKAREA FROM 268 TO 296\n REP 0052 4220B118      STC   R2,@OLDKEY\n REP 02EE 4320B118      IC    R2,@OLDKEY\n *\n *        HOOK IN IEFAB4B0\n *\n VER 0180 45E0C300      BAL R14,WRITEMSG\n REP 0180 45E0C474      LINK TO EXCP SUBROUTINE IN EXPAND AREA\n *\n *        REGISTERS\n *  R1, R12, R15 - WORK REGISTERS\n *                 R10 - EXCP BASE REGISTER\n *                 R11 - AB4B0 WORKAREA PTR\n *                 R12 = ON EXCP EXIT, AB4B0 BASE REG\n *                 R14 - LINK RETURN REG\n *\n *                 EXCP CSECT\n *   048E = CSECT LENGTH BEFORE EXPAND\n VER 031C 90ECB05C STM R14,R12,@SA00002 SAVE REGS\n REP 0490 90ECB05C STM R14,R12,@SA00002 SAVE REGS\n REP 0494 05A0     BALR R10,0  SETUP BASE\n *                 00006 USING *,R10  INFORM ASM\n REP 0496 58100010                L    R1,CVTPTR  CVT\n REP 049A 58101000                L    R1,0(,R1)  TCB WORDS\n REP 049E 58101004                L    R1,4(,R1)  CURRENT TCB ADDRESS\n REP 04A2 58C010A4                L    R12,TCTPTR GET TCT ADDRESS\n REP 04A6 12CC                    LTR  R12,R12    IS THERE A TCT\n REP 04A8 4780A0A2                BZ   EXIT       NO, BRANCH\n REP 04AC 58C0C00C                L    R12,TCTIOTBL\n REP 04B0 12CC                    LTR  R12,R12    IS THERE A TABLE\n REP 04B2 4780A0A2                BZ   EXIT       NO, BRANCH\n *\n ************************************************************\n *\n REP 04B6 5820B058                L    R2,@PC00001+16\n REP 04BA 58202000                L    R2,0(,R2)  GET JSCBPTR\n REP 04BE 5820214C                L    R2,JSCTMCOR\n REP 04C2 1222                    LTR  R2,R2      IS IT ZERO\n REP 04C4 4780A0A2                BZ   EXIT       YES, BRANCH\n REP 04C8 58202018                L    R2,24(,R2) GET TIOT ADDRESS\n REP 04CC 58F0D004                L    R15,4(,R13) OLD SAVEAREA\n REP 04D0 58F0F03C                L    R15,60(,R15) IEFAB4A2'S R10\n * DISPLACEMENT ON NEXT INSTRUCTION MUST MATCH THAT OF IEFAB4A2   *\n REP 04D4 58FF0138                L    R15,DSABPTR  IEFAB4A2'S DSABPTR\n REP 04D8 12FF                    LTR  R15,R15    IS IT ZERO\n REP 04DA 4780A0A2                BZ   EXIT       YES, BRANCH\n *\n **************************************************************\n *\n REP 04DE 58F0F010                L    R15,DSABTIOT\n REP 04E2 1BF2                    SR   R15,R2     GET TIOT OFFSET\n REP 04E4 4110C008                LA   R1,8(,R12) POINT TO TCT LOOKUP\n REP 04E8 1722                    XR   R2,R2      GET A ZERO\n *\n REP 04EA 49201000       SEARCH   CH    R2,0(,R1) END OF LOOKUP TABLE\n REP 04EE 4780A0A2                BE    EXIT      YES, BRANCH\n REP 04F2 49F01000                CH    R15,0(,R1) TIOT OFFSET EQUAL\n REP 04F6 4780A06C                BE    FOUND     YES, BRANCH\n REP 04FA 41101004                LA    R1,4(,R1) NO, NEXT ENTRY\n *\n REP 04FE 47F0A054                B     SEARCH\n *\n REP 0502 48101002       FOUND    LH    R1,2(,R1) OFFSET TO DD ENTRY\n *\n REP 0506 4111C000                LA    R1,0(R1,R12) ADD TCT BASE\n *\n REP 050A 17CC                    XR    R12,R12   PREPARE TO IC\n REP 050C 43C01002                IC    R12,2(,R1) NUMBER OF CONCATS\n REP 0510 17FF                    XR    R15,R15   ZERO THE COUNTER\n *\n REP 0512 5AF01004       DEVLOOP  A     R15,4(,R1) ADD TO COUNTER\n *\n REP 0516 41101008                LA    R1,8(,R1)  NEXT DEVICE\n REP 051A 46C0A07C                BCT   R12,DEVLOOP LOOP IF CONCAT\n *\n REP 051E 4EF0B120                CVD   R15,DOUBLE\n REP 0522 960FB127                OI    DOUBLE+7,X'0F'\n REP 0526 D207B105A0AF            MVC   B105(8),EXCPPAT\n REP 052C DE07B105B124            ED    B105(8),DOUBLE+4(4)\n *   052C F363B10BB124            UNPK  B10B(7),DOUBLE+4(4)\n REP 0532 D203B10EA0AA            MVC   B10E(4),EXCPCON\n *\n REP 0538 98ECB05C       EXIT     LM    14,12,@SA00002\n REP 053C 47F0C300                B     WRITEMSG\n *\n REP 0540 C5E7C3D77E     EXCPCON  DC    C'EXCP='\n REP 0545 4020202020202120 CPPAT  DC    X'4020202020202120'\n IDRDATA ST85100\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCM0005": {"ttr": 9985, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00N\\x00N\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 78, "newlines": 78, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BSETV  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=W,TIME=90\n//ASMFCL PROC  CLASS=T,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='C7BRIAN.PDS.DATA',\n//             LOAD='C7BRIAN.VTOC.LOAD',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='SYSPARM(3),LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=20000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=F7DREW.PCF.CNTL,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1,RENT,REFR'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=C7BRIAN.VTOC.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=EX99\n//LKED.SYSIN  DD   *\n  NAME IEFDB401(R)\n/*\n//SMP     EXEC PGM=GIMSMP,REGION=4096K,TIME=60\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//VTOCLOAD DD DSN=C7BRIAN.VTOC.LOAD,DISP=SHR\n//SMPCNTL  DD  *\n  SET BDY (GLOBAL).\n  RECEIVE SELECT(PRCM005).\n  SET BOUNDARY(M211TAA).\n  APPLY  SELECT(PRCM005) REDO.\n//SMPPTFIN  DD *\n++USERMOD  (PRCM005) .\n++VER      (Z038) FMID(EBB1102).\n++ MOD     (IEFDB401) DISTLIB(AOSB3) LKLIB(VTOCLOAD) .\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCM0010": {"ttr": 9988, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00,\\x00,\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BPRC10 JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=W,TIME=60\n//SMP     EXEC PGM=GIMSMP,REGION=4096K,TIME=60\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//SMPCNTL  DD  *\n  SET BOUNDARY(GLOBAL).\n  RECEIVE SELECT(PRCM010).\n  SET BOUNDARY(M211TAA).\n  APPLY  SELECT(PRCM010) REDO BYPASS(ID).\n//SMPPTFIN  DD *\n++ USERMOD (PRCM010)\n   /*       ELIMINATE 'DATASET NOT FREED, IS NOT ALLOCATED' MSG   */ .\n++ VER      (Z038) FMID(EBB1102).\n++ ZAP      (IKJEFD20) DISTLIB(ACMDLIB) .\n   NAME  IKJEFD20\n   VER   0712  90ECB13C\n   REP   0712  07FE0700\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCM0017": {"ttr": 9990, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x003\\x003\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BM0017 JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=T,CLASS=A,TIME=60\n//SMP     EXEC PGM=GIMSMP,REGION=4096K,TIME=60\n//SMPCSI   DD  DSN=SMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SMPSNAP  DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//SMPLIST  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(3120,(0380,0760))\n//SMPHOLD  DD DUMMY\n//SYSUT4   DD UNIT=SYSDA,SPACE=(3120,(0038,0100)),\n//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB)\n//SMPWRK1  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK2  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK3  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK4  DD UNIT=SYSDA,\n//            SPACE=(3120,(0364,0380,111)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SMPWRK5  DD UNIT=SYSDA,\n//            SPACE=(6144,(0183,0380,195)),\n//            DCB=(RECFM=U,BLKSIZE=6144)\n//SMPCNTL  DD  *\n  SET BOUNDARY(GLOBAL).\n  RECEIVE SELECT(PRCM017).\n  SET BOUNDARY(M211TAA).\n  APPLY  CHECK SELECT(PRCM017) REDO BYPASS(ID).\n  APPLY  SELECT(PRCM017) REDO.\n//SMPPTFIN  DD *\n++USERMOD (PRCM017) /* SEND COMMAND IMPROVEMENT */.\n++VER (Z038) FMID(EBB1102) /*\n  THIS USER MOD FIXES THE SEND OPERATOR COMMAND TO NOT APPEND\n  CN(00) TO THE MESSAGE WHEN SEND IS ISSUED BY A SYSTEM TASK.\n  THIS IMPROVES THE APPEARANCE OF JES2 NOTIFY MESSAGES. */.\n++ZAP (IEEVSND6).\n NAME IEEVSND6\n VER 0078 4350,A01D\n VER 058C 0000,0000\n REP 0078 47F0,B586\n REP 058C BF51,A01D,4770,B076\n REP 0594 D205,C16D,C16C,47F0,B098\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REDMSG": {"ttr": 9992, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x15A\\x00b\\x00b\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T15:41:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "SYZYGYB"}, "text": "SYP1ZRC  CSECT                                                          SPO00007\n**********************************************************************\n**                                                                  **\n** \"SYP1ZRC\" - PROGRAM TO DISPLAY A MESSAGE OF THE USER'S CHOICE    **\n**             ON THE MVS CONSOLE.  ON A COLOR CONSOLE THE MESSAGE  **\n**             APPEARS IN RED.                                      **\n**                                                                  **\n** THIS PROGRAM IS INTENDED TO RUN IN A JOBSTREAM ONLY IF A         **\n** PREVIOUS STEP(S) PASSED A NON-ZERO RETURN CODE.  IT WILL         **\n** DISPLAY A MESSAGE FROM THE PARM FIELD ON THE OPERATOR'S          **\n** CONSOLE IN RED!                                                  **\n**                                                                  **\n** **************************************************************** **\n**                                                                  **\n** TYPICAL USAGE WITHIN A CATALOGED PROCEDURE:                      **\n**                                                                  **\n**//STEP3   EXEC PGM=ADRDSSU                                        **\n**  --- MORE JCL ----                                               **\n**//STEP4   EXEC PGM=SYP1ZRC,REGION=4K,COND=(0,EQ,STEP3),           **\n**// PARM=' WARNING --- \" &VOL \" BACKUP HAD A NON-ZERO RETURN CODE.'**\n**                                                                  **\n**  NOTE THE USAGE OF A SYMBOLIC WITHIN THE PARM (MESSAGE), WHICH   **\n**  ALLOWS MORE FLEXIBILITY WITHIN THE MESSAGE TEXT.                **\n**                                                                  **\n**  THIS PARTICULAR EXAMPLE WILL DISPLAY A RED MESSAGE IF DF/DSS    **\n**  COMPLETES WITH A NON-ZERO RETURN CODE.                          **\n**                                                                  **\n**********************************************************************\n**                                                                  **\n**  AUTHOR:             BRUCE BUTLER                                **\n**  COMPANY:            ISC SYSTEMS CORP.                           **\n**  ADDRESS:            P.O. BOX TAF C-8                            **\n**  LOCATION:           SPOKANE, WASHINGTON 99220                   **\n**  PHONE:              (509) 922-6275                              **\n**                                                                  **\n**********************************************************************\n         STM   R14,R12,12(R13) SAVE REGISTERS                           SPO00008\n         LR    R12,R15        USE R12 FOR BASE, NOT R15                 SPO00009\n         USING SYP1ZRC,R12                                              SPO00010\n         LR    R2,R13         SAVE CALLERS R13, SET UP A SAVEAREA       SPO00011\n         LA    R13,SAVEAREA   ADDRESS OF OUR SAVEAREA                   SPO00012\n         ST    R13,8(,R2)     TELL CALLER WHERE OUR SAVEAREA IS         SPO00013\n         ST    R2,SAVEAREA+4  TELL US WHERE CALLERS SAVEAREA IS         SPO00014\n         L     R2,0(R1)           LOAD ADDRESS OF DATA                  PAR00030\n         LH    R3,0(R2)           LOAD LENGTH OF DATA                   PAR00040\n         LTR   R3,R3              CHECK FOR PRESENCE OF PARM FIELD      PAR00010\n         BNZ   CKLEN              ..OK                                  PAR00020\n         MVC   PARM,DEFAULT       MOVE IN DEFAULT MESSAGE\n         B     DOIT\nCKLEN    CH    R3,=H'70'          Q. OVER MAX LENGTH\n         BNH   MOVEIT             ..NO\n         LH    R3,=H'70'          ..YES, TRUNCATE AT 70\nMOVEIT   BCTR  R3,0               SUBTRACT 1, FOR EXECUTE\n         LA    R2,2(,R2)          POINT DATA ADDRESS AROUND LENGTH      PAR00050\n         EX    R3,EXMOVE          MOVE DATA\nDOIT     WTO   MF=(E,WTOLIST)     DO THE WTO\nEOJ      LA    R15,0              PICKUP R/C                            SPO00074\n         L     R13,SAVEAREA+4 RESTORE CALLERS R13                       SPO00076\n         LM    R0,R12,20(R13) RESTORE CALLERS REGISTERS                 SPO00077\n         L     R14,12(R13)    RESTORE CALLERS R14                       SPO00078\n         BR    R14            ISSUE RETURN                              SPO00079\n         SPACE 3                                                        SPO00085\nEXMOVE   MVC   PARM(0),0(R2)\nDEFAULT DC CL70'A NON-ZERO RETURN CODE HAS BEEN DETECTED IN THIS JOB STX\n               REAM'\n         SPACE 2\n*        1         2         3         4         5         6         7\n*2345678901234567890123456789012345678901234567890123456789012345678901\n         SPACE 2\nWTOLIST  WTO   '         1         2         3         4         5     X\n                   6         7',                                       X\n               DESC=(11),ROUTCDE=(1,2,3,4,10),MF=L\n         SPACE 1\nWTOLISTE DS    0D\n         ORG   WTOLIST+4\nPARM     DC    CL70' '           PARM FIELD\n         ORG   WTOLISTE\nSAVEAREA DS    18F                                                      SPO00118\n         LTORG                                                          SPO00119\n         SPACE 1                                                        SPO00121\nR0   EQU 0                                                              SPO00123\nR1   EQU 1                                                              SPO00124\nR2   EQU 2                                                              SPO00125\nR3   EQU 3                                                              SPO00126\nR4   EQU 4                                                              SPO00127\nR5   EQU 5                                                              SPO00128\nR6   EQU 6                                                              SPO00129\nR7   EQU 7                                                              SPO00130\nR8   EQU 8                                                              SPO00131\nR9   EQU 9                                                              SPO00132\nR10  EQU 10                                                             SPO00133\nR11  EQU 11                                                             SPO00134\nR12  EQU 12                                                             SPO00135\nR13  EQU 13                                                             SPO00136\nR14  EQU 14                                                             SPO00137\nR15  EQU 15                                                             SPO00138\n         SPACE 1                                                        SPO00140\n         END                                                            SPO00141\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RELEASE": {"ttr": 9995, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00K\\x00K\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "SYZYGYB"}, "text": "         MACRO\n&NAME    RELEASE &L,&RC=0,&LI=LA,&WORKREG=14,&FREE=YES,        05/08/77W\n               &SP=0,&RI=                                      01/06/78\n.*\n.*       RELEASE UNDOES WHAT CONNECT DID.  I.E., IT FREEMAINS\n.*       ANY SAVEAREA AFTER DISCONNECTING IT, RESTORES REGISTERS,\n.*       AND RETURNS.\n.*\n.*  CHANGES:                                                   05/08/77\n.*                                                             05/08/77\n.*       05/08/77 - ADD &WORKREG,&FREE,AND CHECK &RC           05/08/77\n.*       05/25/77 - FIXUP CODE FROM 05/08/77 TO SET RC         05/25/77\n.*       01/06/78 - ADD &SP (SUBPOOL SUPPORT)                  01/06/78\n.*       12/08/86 - CHANGED TO SUPPORT XA (BSM RETURN)         12/08/86\n.*                                                             05/08/77\n         GBLC  &SYSSPLV\n         LCLC  &RIN\n         LCLB  &CODE                                           05/08/77\n         SPLEVEL TEST\n&RIN     SETC  '&RI'\n         AIF   ('&RI' EQ 'BR' OR '&RI' EQ 'BSM' OR '&RI' EQ '').RIOK\n         MNOTE 8,'INVALID OPTION, RI=&RI, RI=,  (NULL) ASSUMED '\n         AGO   .NULLRI\n.RIOK    AIF   ('&RI' NE '').SETCODE\n.NULLRI  ANOP\n&RIN     SETC  'BSM'\n         AIF   ('&SYSSPLV' NE '1').SETCODE\n&RIN     SETC  'BR'\n.SETCODE ANOP\n&CODE    SETB  ('&RC' EQ '(15)' OR '&RC' EQ '(R15)')           05/08/77\n&CODE    SETB  (&CODE OR '&RC' EQ '(0)' OR '&RC' EQ '(R0)')    05/08/77\n&CODE    SETB  (&CODE OR '&RC' EQ '(1)' OR '&RC' EQ '(R1)')    05/08/77\n         AIF   ('&FREE' EQ 'NO').XNAME                         05/08/77\n         AIF   (T'&L EQ 'O').XNOFREE\n.XNAME   ANOP                                                  05/08/77\n&NAME    LR    1,13\n         L     13,4(,13)\n         XC    8(4,13),8(13)\n         AIF   ('&L' EQ 'NOFREE' OR '&FREE' EQ 'NO').XRC       05/08/77\n         AIF   (NOT &CODE).XLI                                 05/08/77\n         LR    &WORKREG,&RC(1)          SAVE RETURN CODE       05/08/77\n.XLI     &LI   0,&L                     WORKAREA LENGTH\n         AIF   ('&SYSSPLV' EQ '1').NOTXA1\n         MNOTE *,'       FREEMAIN RU,LV=(0),A=(1),SP=&SP  '\n         FREEMAIN RU,LV=(0),A=(1),SP=&SP\n         AGO   .XAJOIN1\n.NOTXA1  ANOP\n         ICM   R0,8,=AL1(&SP)\n         MNOTE *,'       FREEMAIN R,LV=(0),A=(1)          '\n         FREEMAIN R,LV=(0),A=(1)\n.XAJOIN1 ANOP\n         AIF   (NOT &CODE).XRC                                 05/25/77\n         LR    15,&WORKREG              SET THE RETURN CODE    05/08/77\n         AGO   .XRC\n.XNOFREE AIF   (T'&NAME EQ 'O').XRC\n&NAME    DS    0H\n.XRC     AIF   (T'&RC NE 'O').RCHK\n         LM    14,12,12(13)\n         AGO   .CKRETN\n.RCHK    AIF   ('&RC' EQ '0').RLA\n         AIF   ('&RC'(1,1) NE '(').RLA\n         AIF   ('&RC(1)' EQ '15' OR '&RC(1)' EQ 'R15').RETURN  05/08/77\n         AIF   (&CODE).RETURN                                  06/01/77\n         LR    15,&RC(1)\n         AGO   .RETURN\n.RLA     LA    15,&RC\n.RETURN  L     14,12(,13)\n         LM    0,12,20(13)\n.CKRETN  AIF   ('&RIN' EQ 'BR').BRRETN\n.BSMRETN ANOP\n         BSM   0,14\n         MEXIT\n.BRRETN  ANOP\n         BR    14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETAMODE": {"ttr": 9998, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00:\\x00:\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "SYZYGYB"}, "text": "         MACRO\n&LABEL   SETAMODE  &AMOD,&R=15,&SAVE=,&TESTCVT=NO\n         GBLC  &SYSSPLV\n         LCLC  &TARGET,&REG\n         AIF   ('&AMOD' EQ '31' OR '&AMOD' EQ '24').AMODOK\n         AIF   ('&AMOD' EQ 'ANY' OR '&AMOD' EQ 'TEST').AMODOK\n         MNOTE 12,'** INVALID AMODE, &AMOD'\n         MEXIT\n.AMODOK  AIF   ('&LABEL' EQ '').NOLAB\n&LABEL   DS    0H\n.NOLAB   ANOP\n         SPLEVEL TEST\n         AIF   ('&SYSSPLV' NE '1').YESXA1\n         MEXIT\n.YESXA1  ANOP\n&TARGET  SETC  'AMOD&SYSNDX'\n         AIF   ('&TESTCVT' EQ 'NO' OR '&TESTCVT' EQ 'N').TSTDONE\n         AIF   ('&TESTCVT' EQ 'YES' OR '&TESTCVT' EQ 'Y').TSTCVT\n         MNOTE 8,'** INVALID VALUE, TESTCVT=&TESTCVT, NO ASSUMED'\n         AGO   .TSTDONE\n.TSTCVT  ANOP\n         L     &R,16\n         TM    CVTMVSE-CVT(&R),CVTMVSE   XA MODE?\n         BZ    &TARGET                   BRANCH IF NO.\n.TSTDONE ANOP\n         AIF   ('&SAVE' EQ '').NOSAVE\n         AIF   ('&SAVE'(1,1) EQ '(').REGSAVE\n         LA    &R,*+6\n         BASSM &R,&R         GET CURRENT AMODE\n         LTR   &R,&R\n         BNM   *+12          BRANCH IF NOT AMODE=31\n         OI    &SAVE,X'80'   ELSE SET AMODE BIT\n         B     *+8\n         NI    &SAVE,X'7F'   RESET AMODE BIT\n         AGO   .NOSAVE\n.REGSAVE ANOP\n         AIF   (K'&SAVE LT 3).SAVEBAD\n         AIF   ('&SAVE'(K'&SAVE,1) NE ')').SAVEBAD\n&REG     SETC  '&SAVE'(2,K'&SAVE-2)\n         LA    &R,*+6\n         BASSM &REG,&R       GET CURRENT AMODE\n         N     &REG,=A(X'80000000')  SAVE ONLY THE AMODE BIT\n         AGO   .NOSAVE\n.SAVEBAD MNOTE 8,'** INVALID AMODE SAVE REGISTER, &SAVE, IGNORED **'\n         MEXIT\n.NOSAVE  ANOP\n         AIF   ('&AMOD' EQ 'ANY' OR '&AMOD' EQ 'TEST').EXIT\n         LA    &R,&TARGET\n         AIF   ('&AMOD' EQ '31').ORIT\n         N     &R,=A(X'7FFFFFFF')\n         AGO   .REJOIN\n.ORIT    ANOP\n         O     &R,=A(X'80000000')\n.REJOIN  ANOP\n         BSM   0,&R\n.EXIT    ANOP\n&TARGET  DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHUTDOWN": {"ttr": 10000, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\xed\\x00\\xed\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 237, "newlines": 237, "modlines": 0, "user": "SYZYGYB"}, "text": "* SHUTDOWN MVS/ESA V5.2.2 AT UCSF AS OF 6/18/98\n* FIRST VARY THE VTAM CONNECTION CLOSED TO CICS'S\nF CICSPRMP,CEMT S VTAM CLOSE,IMM\nF CICSPRCA,CEMT S VTAM CLOSE,IMM\nF CICSTRMP,CEMT S VTAM CLOSE,IMM\nF CICSTRCA,CEMT S VTAM CLOSE,IMM\nF CICSTSMP,CEMT S VTAM CLOSE,IMM\nF CICSTSCA,CEMT S VTAM CLOSE,IMM\nF CICSTSGL,CEMT S VTAM CLOSE,IMM\nF CICSRETR,CEMT S VTAM CLOSE,IMM\nF CICSPRDS,CEMT S VTAM CLOSE,IMM\n* DRAIN JES2 INITS AND DEVICES\n$PI\n$PLNE1\n$PLNE2\n$PLNE3\n$PLNE4\n$PLNE5\n$PLNE6\n$PPRT1\n$PPRT2\n$PPRT3\n$PPRT4\n$PLGN1\n* WAIT 5 SECONDS FOR THE COMMANDS TO COMPLETE\nDELAY=005\n* SEE IF TSI TASKS ARE UP AND BEGIN THEIR SHUTDOWN\n* FIRST DO EOD, LATER WE WILL DO AN EOJ\nIFSTARTED TSIPROD\nREPLY TSIPROD * EOD\nENDIF\nIFSTARTED TSITEST\nREPLY TSITEST * EOD\nENDIF\nIFSTARTED ZTSIPROD\nREPLY ZTSIPROD * EOD\nENDIF\nIFSTARTED ZTSITEST\nREPLY ZTSITEST * EOD\nENDIF\n* NOW SHUT DOWN THE CICS'S\nF CICSPRMP,CEMT P SHUT IMM\nF CICSPRCA,CEMT P SHUT IMM\nF CICSTRMP,CEMT P SHUT IMM\nF CICSTRCA,CEMT P SHUT IMM\nF CICSTSMP,CEMT P SHUT IMM\nF CICSTSCA,CEMT P SHUT IMM\nF CICSTSGL,CEMT P SHUT IMM\nF CICSRETR,CEMT P SHUT IMM\nF CICSPRDS,CEMT P SHUT IMM\n* SHUT DOWN INFOPAC\nP INFOPAC\n* NOW SHUTDOWN TSO\nP TSO\n* WAIT 5 SECONDS FOR TSO TO EITHER SHUTDOWN OR ASK FOR FSTOP\nDELAY=005\n* REPLY TO OUTSTANDING TSO MESSAGE IF THERE IS ONE\nREPLY TSO * FSTOP\n* STOP TERMINAL RESET PROC\nP RESET2VM\n* STOP CANDLE SUBSYSTEM\nP KCNDL\n* STOP ENF\nP ENF\n* WAIT 5 SECONDS FOR ENF REPLY IF ANY\nDELAY=005\n* REPLY TO ENF SHUTDOWN REPLY\nREPLY ENF * Y\n* SET STK LIBRARY MANAGER OFF\n#MOD 000,OFF\n* DELAY 5 SECONDS TO LET LIBRARY MANAGER SETTLE DOWN\nDELAY=005\n* STOP SLM STARTED TASK SLS0\nP SLS0\n* STOP CCFXAPPL\nIFSTARTED CCFXAPPL\nF CCFXAPPL,SHU\nDELAY=015\nP CCFXAPPL\nENDIF\n* BRING DOWN THE CANDLE STATUS MONITOR\nP KC2PROC\n* SHUT DOWN CMF\nP MVSPAS\n* SHUT DOWN MAINVIEW\nP BBCS\n* STOP JSF\nP JSF\n* SHUTDOWN EPS\nP RUNEPS\n* SHUT DOWN RUNIUCV\nP RUNIUCV\n* WAIT 5 SECONDS FOR RUNIUCV TO CATCH UP\nDELAY=005\n* REPLY TO RUNIUCV MESSAGE TO SHUTDOWN\nREPLY RUNIUCV * YES\n* NOW SEE IF TSI TASKS ARE UP AND BEGIN THEIR SHUTDOWN\n* NOW DO EOJ\nIFSTARTED TSIPROD\nREPLY TSIPROD * EOJ\nENDIF\nIFSTARTED TSITEST\nREPLY TSITEST * EOJ\nENDIF\nIFSTARTED ZTSIPROD\nREPLY ZTSIPROD * EOJ\nENDIF\nIFSTARTED ZTSITEST\nREPLY ZTSITEST * EOJ\nENDIF\n* SHUT DOWN TCP/IP (RUNCETI)\nF RUNCETI,P CLEAR\n* WAIT 5 SECONDS FOR TCP TO CATCH UP\nDELAY=005\n* REPLY TO TCP/IP SHUTDOWN MESSAGE\nF RUNCETI * YES\n* SHUT DOWN POOLDASD\nF POOLDASD,SHUTDOWN\n* SHUT DOWN DLF PHASE 1\nF DLF,MODE=QUIESCE\n* WAIT 5 SECONDS FOR DLF TO RESPOND\nDELAY=005\n* SHUT DOWN DLF\nP DLF\n* STOP BOTH LLA AND VLF\nP LLA\nP VLF\n* STOP ZEBB ZEKE AND ZACK\n!KILL\n.KILL\nZKILL COLD\n* STOP THE APPLMON GUYS\nC APPLPRMP\nC APPLPRCA\nC APPLTRMP\nC APPLM204\nC APPLZ204\nC APPLT204\n* IF TCP/IP IS STILL UP THEN SHUT IT DOWN\nIFSTARTED RUNCETI\nF RUNCETI,P CLEAR\n* WAIT 5 SECONDS FOR TCP TO CATCH UP\nDELAY=005\n* REPLY TO TCP/IP SHUTDOWN MESSAGE\nF RUNCETI * YES\nDELAY=015\nP RUNCETI\n* WAIT 15 SECONDS\nDELAY=015\nP RUNCETI\nENDIF\n* ALL THAT SHOULD BE UP NOW ARE VTAM ACF2 AND JES2 MAKE SURE\nIFSTARTED CICSPRMP\nF CICSPRMP,CEMT P SHUT,I\nDELAY=030\nC CICSPRMP\nC APPLPRMP\nENDIF\nIFSTARTED CICSPRCA\nF CICSPRCA,CEMT P SHUT,I\nDELAY=030\nC CICSPRCA\nC APPLPRCA\nENDIF\nIFSTARTED CICSTRMP\nF CICSTRMP,CEMT P SHUT,I\nDELAY=030\nC CICSTRMP\nC APPLTRMP\nENDIF\nIFSTARTED CICSTRCA\nF CICSTRCA,CEMT P SHUT,I\nDELAY=030\nC CICSTRCA\nC APPLTRCA\nENDIF\nIFSTARTED CICSTSMP\nF CICSTSMP,CEMT P SHUT,I\nDELAY=030\nC CICSTSMP\nC APPLTSMP\nENDIF\nIFSTARTED CICSTSCA\nF CICSTSCA,CEMT P SHUT,I\nDELAY=030\nC CICSTSCA\nC APPLTSCA\nENDIF\nIFSTARTED CICSTSGL\nF CICSTSGL,CEMT P SHUT,I\nDELAY=030\nC CICSTSGL\nC APPLTSGL\nENDIF\nIFSTARTED CICSRETR\nF CICSRETR,CEMT P SHUT,I\nDELAY=030\nC CICSRETR\nC APPLRETR\nENDIF\nIFSTARTED CICSPRDS\nF CICSPRDS,CEMT P SHUT,I\nDELAY=030\nC CICSPRDS\nC APPLPRDS\nENDIF\n* MAKE SURE ALL APPLMONS ARE DOWN AGAIN\nC APPLPRMP\nC APPLPRCA\nC APPLTRMP\nC APPLM204\nC APPLZ204\nC APPLT204\n* SHUT DOWN VTAM\nZ NET,QUICK\n* WAIT 15 SECONDS TO CATCH UP\nDELAY=015\n* CHECK TCP/IP\nIFSTARTED RUNCETI\nP RUNCETI\nDELAY=015\nC RUNCETI\nENDIF\n* SHUT DOWN ACF2\nP ACF2\n* WAIT ANOTHER 10 SECONDS\nDELAY=10\n* SEE IF VTAM STILL UP\nIFACTIVE VTMLCL\nDELAY=015\nZ NET,CANCEL\nDELAY=30\nENDIF\n* SHUT DOWN JES2\n$P\nDELAY=005\n$PJES2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSUX06": {"ttr": 10244, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x04\\x9a\\x04\\x9a\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 1178, "newlines": 1178, "modlines": 0, "user": "SYZYGYB"}, "text": "//TECHBHW  JOB  (450,FMAIN),'BRIAN WESTERMAN',MSGCLASS=H,CLASS=A,\n//   NOTIFY=TECHBHW,REGION=0M,TIME=1440\n//*\n//ASSEMBLE EXEC ASMHCL,REGION.C=1024K,REGION.L=1024K,\n//             PARM.L='LET,LIST,XREF,NCAL,RENT,REFR,REUS'\n//C.SYSLIB DD\n//         DD  DISP=SHR,DSN=OEMTC.HSC.V2R0M1.SLSMAC\n//         DD  DISP=SHR,DSN=SYSX.CAI.R10.CAIMAC\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//C.SYSIN DD *\n         MACRO\n         EQUATES\n.* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n.* ** STANDARD EQUATE MACRO ** * ** * ** * ** * ** * ** * ** * ** *\n.* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nFPR0     EQU   0\nFPR2     EQU   2\nFPR4     EQU   4\nFPR6     EQU   6\n         MEND\n         MACRO\n&NAME    PRIMEH &OP1,&OP2,&OP3,&OP4,&OP5,&OP6,&LOC=(RES,ANY),&SP=0\n.*\n.*    THIS MACRO HAS BEEN REWORKED TO PROVIDE COMPLETE XA 31 BIT\n.*  ADDRESSING SUPPORT.  IT CAN ONLY BE USED WITH ASSEMBLER H.\n.*  THE PURPOSE OF THIS MACRO IS TO PROVIDE STANDARD OS LINKAGE.\n.*  IT WILL SAVE REGISTERS, CREATE THE 18 WORD SAVE AREA, AND\n.*  ESTABLISH UP TO FOUR BASE REGISTERS.  ALL OPERANDS ARE OPTIONAL\n.*  WITH ONE BASE REGISTER, REGISTER 12, AND AN UNNAMED SAVE AREA\n.*  BEING THE DEFAULTS.  IF A DYNAMIC SAVE AREA IS DESIRED, BY CODING\n.*  THE KEYWORD 'DYNAMIC' AS THE SAVE AREA NAME A 'GETMAIN' INSTEAD\n.*  OF AN 18 WORD NAMED SAVE AREA WILL BE GENERATED.  THE DEFAULT FOR\n.*  THE GETMAIN WILL BE IN THE SAME STORAGE AS THE CALLER IE; ABOVE\n.*  OR BELOW THE LINE.  THIS MAY BE OVERRIDEN BY CODING A 'LOC=VAL'\n.*  AS THE LAST PARAMATER OF THE PRIME MACRO.  YOU MUST USE THE\n.*  VALID VALUE(S) FOR THE 'LOC=' PARAMATER OF THE GETMAIN MACRO\n.*  AS DOCUMENTED IN THE 'MVS/ESA APPLICATION DEVELOPMENT MACRO\n.*  REFERENCE' MANUAL (GC28-1822-1).  IF TWO VALUES ARE CODED\n.*  THEY MUST INCLUDE THE PARENS.  THE SUBPOOL PARAMETER IS ALSO\n.*  SUPPORTED AND MAY BE CODED ON THE MACRO AS 'SP=N' WHERE N IS\n.*  THE REQUESTED STORAGE SUBPOOL.  IF THE SUBPOOL PARAMETER IS\n.*  OMMITTED 'SP=0' IS THE DEFAULT.  THE 'TERMEH' MACRO MUST BE USED\n.*  IN CONJUNCTION WITH THIS MACRO FOR PROGRAM EXIT AS THE FREEMAIN\n.*  INDICATOR MOVED TO SUPPORT XA/31 BIT ADDRESSING AND THE 'SP='\n.*  PARAMETER IS PASSED TO THE 'TERMEH' TO IDENTIFY THE PROPER\n.*  STORAGE SUBPOOL TO BE FREEMAINED.\n.*\n.*    DATE - JULY 1997 - PRIMEH CREATED FOR XA COMPATIBILITY.\n.*                       TERMEH MACRO MUST BE USED FOR SAVE\n.*                       AREA FREEMAIN COMPATIBILITY FOR PROGRAM\n.*                       TERMINATION.\n.*                       ASSEMBLER H MUST BE USED.\n.*                       SUPPORTS AMODE/RMODE = ANY.\n.*\n.****************************************************************\n.*\n.*    ROUTINE TO DETERMINE THE NUMBER OF OPERANDS THAT ARE CODED\n.*\n          LCLC  &E\n          LCLC  &EE\n          LCLC  &EEE\n          LCLC  &EEEE\n          GBLC  &SPN#\n          AIF   (T'&SP EQ 'N').AA1\n          MNOTE 12,'** ERROR ** ILLEGAL SP VALUE, MUST BE NUMERIC'\n          MEXIT\n.AA1      ANOP\n          AIF   ('&SP' LT '255').AA2\n          MNOTE 12,'** ERROR ** SP= VALUE OUT OF RANGE'\n          MEXIT\n.AA2      ANOP\n&SPN#     SETC  '&SP'\n          AIF   ('&OP6' EQ '').AA  CHECK FOR AN EXTRA OPERAND\n          MNOTE 'WARNING-EXTRA OPERAND SPECIFIED-CHECK COMPILER OUTPUT'\n.AA       ANOP\n          AIF   ('&OP5' EQ '').AB  OPERAND FIVE BLANK\n          AGO   .BA                 NO\n.AB       ANOP\n          AIF   ('&OP4' EQ '').AC  OPERAND FOUR BLANK\n          AGO   .CA                 NO\n.AC       ANOP\n          AIF   ('&OP3' EQ '').AD  OPERAND THREE BLANK\n          AGO   .DA                 NO\n.AD       ANOP\n          AIF   ('&OP2' EQ '').AE  OPERAND TWO BLANK\n          AGO   .EA                 NO\n.AE       ANOP\n          AIF   ('&OP1' EQ '').GA  OPERAND ONE BLANK\n          AGO   .FA                 NO\n.*\n.*    ROUTINE FOR FIVE OPERANDS\n.*\n.BA       ANOP                     ENTRY POINT\n&E        SETC  '&OP1'             SET BASE REGISTER ONE\n&EE       SETC  '&OP2'             SET BASE REGISTER TWO\n&EEE      SETC  '&OP3'             SET BASE REGISTER THREE\n&EEEE     SETC  '&OP4'             SET BASE REGISTER FOUR\n          AIF   ('&E' EQ '0' OR '&E' EQ '1' OR '&E' EQ '13').BB\n          AIF   ('&E' EQ '14' OR '&E' EQ '15').BB\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1' OR '&E' EQ 'R13').BB\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').BB\n          AGO   .BC\n.BB       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP1 SPECIFIED'\n.BC       AIF   ('&EE' EQ '0' OR '&EE' EQ '1' OR '&EE' EQ '13').BD\n          AIF   ('&EE' EQ '14' OR '&EE' EQ '15').BD\n          AIF   ('&EE' EQ 'R0' OR '&EE' EQ 'R1').BD\n          AIF   ('&EE' EQ 'R13' OR '&EE' EQ 'R14').BD\n          AIF   ('&EE' EQ 'R15').BD\n          AGO   .BE\n.BD       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP2 SPECIFIED'\n.BE       AIF   ('&EEE' EQ '0' OR '&EEE' EQ '1' OR '&EEE' EQ '13').BF\n          AIF   ('&EEE' EQ '14' OR '&EEE' EQ '15').BF\n          AIF   ('&EEE' EQ 'R0' OR '&EEE' EQ 'R1').BF\n          AIF   ('&EEE' EQ 'R13' OR '&EEE' EQ 'R14').BF\n          AIF   ('&EEE' EQ 'R15').BF\n          AGO   .BG\n.BF       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP3 SPECIFIED'\n.BG       AIF   ('&EEEE' EQ '0' OR '&EEEE' EQ '1').BH\n          AIF   ('&EEEE' EQ '13' OR '&EEEE' EQ '14').BH\n          AIF   ('&EEEE' EQ '15').BH\n          AIF   ('&EEEE' EQ 'R0' OR '&EEEE' EQ 'R1').BH\n          AIF   ('&EEEE' EQ 'R13' OR '&EEEE' EQ 'R14').BH\n          AIF   ('&EEEE' EQ 'R15').BH\n          AGO   .BI\n.BH       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP4 SPECIFIED'\n.BI       AIF   ('&E' EQ '' OR '&EE' EQ '' OR '&EEE' EQ '').BJ\n          AIF   ('&EEEE' EQ '').BJ\n          AGO   .BK\n.BJ       MNOTE 'ERROR - BLANK BASE REGISTER SPECIFIED'\n          MEXIT\n.BK       ANOP                     ENTRY POINT\n          AIF   ('&OP5' EQ 'DYNAMIC').BM TEST FOR A DYNAMIC S.A.\n          DS    0H\n          USING *,&E,&EE,&EEE,&EEEE ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          LA    &EEEE,1(0,0)       SET REGISTER TO A BINARY ONE\n          LA    &EE,4095(&E,&EEEE) LOAD BASE REGISTER TWO\n          LA    &EEE,4095(&EE,&EEEE) LOAD BASE REGISTER THREE\n          LA    &EEEE,4095(&EEE,&EEEE) LOAD BASE REGISTER FOUR\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,BA&SYSNDX        OBTAIN SAVE AREA ADDRESS\n&OP5      DC    18F'0',H'0'        18 WORD SAVE AREA AND TERMEH FLAG\nBA&SYSNDX ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n.BL       ANOP                     ENTRY POINT\n          ST    13,4(0,1)          STORE HIGHER SAVE AREA POINTER\n          LM    0,1,20(13)         RESTORE REGISTERS 0 AND 1\n          L     13,8(0,13)         LOAD SAVE AREA ADDRESS\n          MEXIT\n.BM       ANOP\n          DS    0H\n          USING *,&E,&EE,&EEE,&EEEE ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          LA    &EEEE,1(0,0)       SET REGISTER TO A BINARY ONE\n          LA    &EE,4095(&E,&EEEE) LOAD BASE REGISTER TWO\n          LA    &EEE,4095(&EE,&EEEE) LOAD BASE REGISTER THREE\n          LA    &EEEE,4095(&EEE,&EEEE) LOAD BASE REGISTER FOUR\n.*\n.*    ACQUIRE A SAVE AREA IN SAME VIRTUAL STORAGE THIS PROGRAM\n.*    IS EXECUTING IN (ABOVE OR BELOW THE 16 MEG. LINE)\n.*\n          MNOTE  '         GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#'\n          GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#  ACQUIRE A SAVE AREA\n          XC    0(74,1),0(1)       CLEAR ACQUIRED SAVE AREA\n          ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n          MVI   72(1),X'FF'        SET INDICATOR FOR TERME MACRO\n          AGO   .BL                TO FINISH ROUTINE\n.*\n.*    ROUTINE FOR FOUR OPERANDS\n.*\n.CA       ANOP                     ENTRY POINT\n&E        SETC  '&OP1'             SET BASE REGISTER ONE\n&EE       SETC  '&OP2'             SET BASE REGISTER TWO\n&EEE      SETC  '&OP3'             SET BASE REGISTER THREE\n&EEEE     SETC  '&OP4'             SET BASE REGISTER FOUR\n          AIF   (T'&OP4 EQ 'N').CB TEST OPERAND FOUR FOR NUMERIC\n          AGO   .CO                 NO - CONTINUE\n.CB       ANOP                     ENTRY POINT\n          AIF   ('&E' EQ '0' OR '&E' EQ '1' OR '&E' EQ '13').CC\n          AIF   ('&E' EQ '14' OR '&E' EQ '15').CC\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1' OR '&E' EQ 'R13').CC\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').CC\n          AGO   .CD\n.CC       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP1 SPECIFIED'\n.CD       AIF   ('&EE' EQ '0' OR '&EE' EQ '1' OR '&EE' EQ '13').CE\n          AIF   ('&EE' EQ '14' OR '&EE' EQ '15').CE\n          AIF   ('&EE' EQ 'R0' OR '&EE' EQ 'R1').CE\n          AIF   ('&EE' EQ 'R13' OR '&EE' EQ 'R14').CE\n          AIF   ('&EE' EQ 'R15').CE\n          AGO   .CF\n.CE       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP2 SPECIFIED'\n.CF       AIF   ('&EEE' EQ '0' OR '&EEE' EQ '1' OR '&EEE' EQ '13').CG\n          AIF   ('&EEE' EQ '14' OR '&EEE' EQ '15').CG\n          AIF   ('&EEE' EQ 'R0' OR '&EEE' EQ 'R1').CG\n          AIF   ('&EEE' EQ 'R13' OR '&EEE' EQ 'R14').CG\n          AIF   ('&EEE' EQ 'R15').CG\n          AGO   .CH\n.CG       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP3 SPECIFIED'\n.CH       AIF   ('&EEEE' EQ '0' OR '&EEEE' EQ '1').CI\n          AIF   ('&EEEE' EQ '13' OR '&EEEE' EQ '14').CI\n          AIF   ('&EEEE' EQ '15').CI\n          AIF   ('&EEEE' EQ 'R0' OR '&EEEE' EQ 'R1').CI\n          AIF   ('&EEEE' EQ 'R13' OR '&EEEE' EQ 'R14').CI\n          AIF   ('&EEEE' EQ 'R15').CI\n          AGO   .CJ\n.CI       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP4 SPECIFIED'\n.CJ       AIF   ('&E' EQ '' OR '&EE' EQ '' OR '&EEE' EQ '').CK\n          AIF   ('&EEEE' EQ '').CK\n          AGO   .CL\n.CK       MNOTE 'ERROR - BLANK BASE REGISTER SPECIFIED'\n          MEXIT\n.CL       ANOP                     ENTRY POINT\n          DS    0H\n          USING *,&E,&EE,&EEE,&EEEE ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          LA    &EEEE,1(0,0)       SET REGISTER TO A BINARY ONE\n          LA    &EE,4095(&E,&EEEE)  LOAD BASE REGISTER TWO\n          LA    &EEE,4095(&EE,&EEEE) LOAD BASE REGISTER THREE\n          LA    &EEEE,4095(&EEE,&EEEE) LOAD BASE REGISTER FOUR\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,CA&SYSNDX        OBTAIN SAVE AREA ADDRESS\n          DC    18F'0',H'0'        18 WORD SAVE AREA AND TERMEH FLAG\n.CM       ANOP                     ENTRY POINT\nCA&SYSNDX ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n.CN       ANOP                     ENTRY POINT\n          ST    13,4(0,1)          STORE HIGHER SAVE AREA POINTER\n          LM    0,1,20(13)         RESTORE REGISTERS 0 AND 1\n          L     13,8(0,13)         LOAD SAVE AREA ADDRESS\n          MEXIT\n.CO       ANOP                     ENTRY POINT\n          AIF   ('&EEEE' EQ 'R0' OR '&EEEE' EQ 'R1').CB\n          AIF   ('&EEEE' EQ 'R2' OR '&EEEE' EQ 'R3').CB\n          AIF   ('&EEEE' EQ 'R4' OR '&EEEE' EQ 'R5').CB\n          AIF   ('&EEEE' EQ 'R6' OR '&EEEE' EQ 'R7').CB\n          AIF   ('&EEEE' EQ 'R8' OR '&EEEE' EQ 'R9').CB\n          AIF   ('&EEEE' EQ 'R10' OR '&EEEE' EQ 'R11').CB\n          AIF   ('&EEEE' EQ 'R12' OR '&EEEE' EQ 'R13').CB\n          AIF   ('&EEEE' EQ 'R14' OR '&EEEE' EQ 'R15').CB\n          AIF   ('&E' EQ '0' OR '&E' EQ '1' OR '&E' EQ '13').CP\n          AIF   ('&E' EQ '14' OR '&E' EQ '15').CP\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1' OR '&E' EQ 'R13').CP\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').CP\n          AGO   .CQ\n.CP       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP1 SPECIFIED'\n.CQ       AIF   ('&EE' EQ '0' OR '&EE' EQ '1' OR '&EE' EQ '13').CR\n          AIF   ('&EE' EQ '14' OR '&EE' EQ '15').CR\n          AIF   ('&EE' EQ 'R0' OR '&EE' EQ 'R1').CR\n          AIF   ('&EE' EQ 'R13' OR '&EE' EQ 'R14').CR\n          AIF   ('&EE' EQ 'R15').CR\n          AGO   .CS\n.CR       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP2 SPECIFIED'\n.CS       AIF   ('&EEE' EQ '0' OR '&EEE' EQ '1' OR '&EEE' EQ '13').CT\n          AIF   ('&EEE' EQ '14' OR '&EEE' EQ '15').CT\n          AIF   ('&EEE' EQ 'R0' OR '&EEE' EQ 'R1').CT\n          AIF   ('&EEE' EQ 'R13' OR '&EEE' EQ 'R14').CT\n          AIF   ('&EEE' EQ 'R15').CT\n          AGO   .CU\n.CT       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP3 SPECIFIED'\n.CU       AIF   ('&E' EQ '' OR '&EE' EQ '' OR '&EEE' EQ '').CV\n          AIF   ('&EEEE' EQ '').CV\n          AGO   .CW\n.CV       MNOTE 'ERROR - BLANK BASE REGISTER SPECIFIED'\n          MEXIT\n.CW       ANOP                     ENTRY POINT\n          AIF   ('&OP4' EQ 'DYNAMIC').CX TEST FOR A DYNAMIC S.A.\n          DS    0H\n          USING *,&E,&EE,&EEE      ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          LA    &EEE,1(0,0)        SET REGISTER TO A BINARY ONE\n          LA    &EE,4095(&E,&EEE)  LOAD BASE REGISTER TWO\n          LA    &EEE,4095(&EE,&EEE) LOAD BASE REGISTER THREE\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,CA&SYSNDX        OBTAIN SAVE AREA ADDRESS\n&OP4      DC    18F'0',H'0'        18 WORD SAVE AREA AND TERMEH FLAG\n          AGO   .CM                TO FINISH ROUTINE\n.CX       ANOP                     ENTRY POINT\n          DS    0H\n          USING *,&E,&EE,&EEE      ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          LA    &EEE,1(0,0)        SET REGISTER TO A BINARY ONE\n          LA    &EE,4095(&E,&EEE)  LOAD BASE REGISTER TWO\n          LA    &EEE,4095(&EE,&EEE) LOAD BASE REGISTER THREE\n          MNOTE  '         GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#'\n          GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#  ACQUIRE A SAVE AREA\n          XC    0(74,1),0(1)       CLEAR ACQUIRED SAVE AREA\n          ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n          MVI   72(1),X'FF'        SET INDICATOR FOR TERME MACRO\n          AGO   .CN                TO FINISH ROUTINE\n.*\n.*    ROUTINE FOR THREE OPERANDS\n.*\n.DA       ANOP                     ENTRY POINT\n&E        SETC  '&OP1'             SET BASE REGISTER ONE\n&EE       SETC  '&OP2'             SET BASE REGISTER TWO\n&EEE      SETC  '&OP3'             SET BASE REGISTER THREE\n          AIF   (T'&OP3 EQ 'N').DB TEST OPERAND THREE FOR NUMERIC\n          AGO   .DM                 NO - CONTINUE\n.DB       ANOP                     ENTRY POINT\n          AIF   ('&E' EQ '0' OR '&E' EQ '1' OR '&E' EQ '13').DC\n          AIF   ('&E' EQ '14' OR '&E' EQ '15').DC\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1' OR '&E' EQ 'R13').DC\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').DC\n          AGO   .DD\n.DC       MNOTE ' WARNING - ILLEGAL BASE REGISTER &OP1 SPECIFIED'\n.DD       AIF   ('&EE' EQ '0' OR '&EE' EQ '1' OR '&EE' EQ '13').DE\n          AIF   ('&EE' EQ '14' OR '&EE' EQ '15').DE\n          AIF   ('&EE' EQ 'R0' OR '&EE' EQ 'R1').DE\n          AIF   ('&EE' EQ 'R13' OR '&EE' EQ 'R14').DE\n          AIF   ('&EE' EQ 'R15').DE\n          AGO   .DF\n.DE       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP2 SPECIFIED'\n.DF       AIF   ('&EEE' EQ '0' OR '&EEE' EQ '1' OR '&EEE' EQ '13').DG\n          AIF   ('&EEE' EQ '14' OR '&EEE' EQ '15').DG\n          AIF   ('&EEE' EQ 'R0' OR '&EEE' EQ 'R1').DG\n          AIF   ('&EEE' EQ 'R13' OR '&EEE' EQ 'R14').DG\n          AIF   ('&EEE' EQ 'R15').DG\n          AGO   .DH\n.DG       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP3 SPECIFIED'\n.DH       AIF   ('&E' EQ '' OR '&EE' EQ '' OR '&EEE' EQ '').DI\n          AGO   .DJ\n.DI       MNOTE 'ERROR - BLANK BASE REGISTER SPECIFIED'\n          MEXIT\n.DJ       ANOP                     ENTRY POINT\n          DS    0H\n          USING *,&E,&EE,&EEE      ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          LA    &EEE,1(0,0)        SET REGISTER TO A BINARY ONE\n          LA    &EE,4095(&E,&EEE)  LOAD BASE REGISTER TWO\n          LA    &EEE,4095(&EE,&EEE) LOAD BASE REGISTER THREE\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,DA&SYSNDX        OBTAIN SAVE AREA ADDRESS\n          DC    18F'0',H'0'        18 WORD SAVE AREA AND TERMEH FLAG\n.DK       ANOP                     ENTRY POINT\nDA&SYSNDX ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n.DL       ANOP                     ENTRY POINT\n          ST    13,4(0,1)          STORE HIGHER SAVE AREA POINTER\n          LM    0,1,20(13)         RESTORE REGISTERS 0 AND 1\n          L     13,8(0,13)         LOAD SAVE AREA ADDRESS\n          MEXIT\n.DM       ANOP                     ENTRY POINT\n          AIF   ('&EEE' EQ 'R0' OR '&EEE' EQ 'R1').DB\n          AIF   ('&EEE' EQ 'R2' OR '&EEE' EQ 'R3').DB\n          AIF   ('&EEE' EQ 'R4' OR '&EEE' EQ 'R5').DB\n          AIF   ('&EEE' EQ 'R6' OR '&EEE' EQ 'R7').DB\n          AIF   ('&EEE' EQ 'R8' OR '&EEE' EQ 'R9').DB\n          AIF   ('&EEE' EQ 'R10' OR '&EEE' EQ 'R11').DB\n          AIF   ('&EEE' EQ 'R12' OR '&EEE' EQ 'R13').DB\n          AIF   ('&EEE' EQ 'R14' OR '&EEE' EQ 'R15').DB\n          AIF   ('&E' EQ '0' OR '&E' EQ '1' OR '&E' EQ '13').DN\n          AIF   ('&E' EQ '14' OR '&E' EQ '15').DN\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1' OR '&E' EQ 'R13').DN\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').DN\n          AGO   .DO\n.DN       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP1 SPECIFIED'\n.DO       AIF   ('&EE' EQ '0' OR '&EE' EQ '1' OR '&EE' EQ '13').DP\n          AIF   ('&EE' EQ '14' OR '&EE' EQ '15').DP\n          AIF   ('&EE' EQ 'R0' OR '&EE' EQ 'R1').DP\n          AIF   ('&EE' EQ 'R13' OR '&EE' EQ 'R14').DP\n          AIF   ('&EE' EQ 'R15').DP\n          AGO   .DQ\n.DP       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP2 SPECIFIED'\n.DQ       AIF   ('&E' EQ '' OR '&EE' EQ '').DR\n          AGO   .DS\n.DR       MNOTE 'ERROR - BLANK BASE REGISTER SPECIFIED'\n          MEXIT\n.DS       ANOP                     ENTRY POINT\n          AIF   ('&OP3' EQ 'DYNAMIC').DT TEST FOR A DYNAMIC S.A.\n          DS    0H\n          USING *,&E,&EE           ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\nDB&SYSNDX BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          L     &EE,DC&SYSNDX      LOAD BASE REGISTER TWO\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,DA&SYSNDX        OBTAIN SAVE AREA ADDRESS\n&OP3      DC    18F'0',H'0'        18 WORD SAVE AREA AND TERMEH FLAG\nDC&SYSNDX DC    A(DB&SYSNDX+4094)  SECOND BASE REGISTER ADDRESS\n          AGO   .DK                TO FINISH ROUTINE\n.DT       ANOP                     ENTRY POINT\n          DS    0H\n          USING *,&E,&EE           ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          LA    &EE,1(0,0)         SET REGISTER TO A BINARY ONE\n          LA    &EE,4095(&E,&EE)   LOAD BASE REGISTER TWO\n          MNOTE  '         GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#'\n          GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#  ACQUIRE A SAVE AREA\n          XC    0(74,1),0(1)       CLEAR ACQUIRED SAVE AREA\n          ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n          MVI   72(1),X'FF'        SET INDICATOR FOR TERME MACRO\n          AGO   .DL                TO FINISH ROUTINE\n.*\n.*     ROUTINE FOR TWO OPERANDS\n.*\n.EA       ANOP\n&E        SETC  '&OP1'             SET BASE REGISTER ONE\n&EE       SETC  '&OP2'             SET BASE REGISTER TWO\n          AIF   (T'&OP2 EQ 'N').EB TEST OPERAND TWO FOR NUMERIC\n          AGO   .EK                 NO - CONTINUE\n.EB       ANOP                     ENTRY POINT\n          AIF   ('&E' EQ '0' OR '&E' EQ '1' OR '&E' EQ '13').EC\n          AIF   ('&E' EQ '14' OR '&E' EQ '15').EC\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1' OR '&E' EQ 'R13').EC\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').EC\n          AGO   .ED\n.EC       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP1 SPECIFIED'\n.ED       AIF   ('&EE' EQ '0' OR '&EE' EQ '1' OR '&EE' EQ '13').EE\n          AIF   ('&EE' EQ '14' OR '&EE' EQ '15').EE\n          AIF   ('&EE' EQ 'R0' OR '&EE' EQ 'R1').EE\n          AIF   ('&EE' EQ 'R13' OR '&EE' EQ 'R14').EE\n          AIF   ('&EE' EQ 'R15').EE\n          AGO   .EF\n.EE       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP2 SPECIFIED'\n.EF       AIF   ('&E' EQ '' OR '&EE' EQ '').EG\n          AGO   .EH\n.EG       MNOTE 'ERROR - BLANK BASE REGISTER SPECIFIED'\n          MEXIT\n.EH       ANOP                     ENTRY POINT\n          DS    0H\n          USING *,&E,&EE           ESTABLISH BASE REGISTERS\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\nEA&SYSNDX BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER ONE\n          L     &EE,EB&SYSNDX      LOAD BASE REGISTER TWO\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,EC&SYSNDX        OBTAIN SAVE AREA ADDRESS\n          DC    18F'0',H'0'        18 WORD SAVE AREA AND TERMEH FLAG\nEB&SYSNDX DC    A(EA&SYSNDX+4094)  SECOND BASE REGISTER ADDRESS\n.EI       ANOP\nEC&SYSNDX ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n.EJ       ANOP                     ENTRY POINT\n          ST    13,4(0,1)          STORE HIGHER SAVE AREA POINTER\n          LM    0,1,20(13)         RESTORE REGISTERS 0 AND 1\n          L     13,8(0,13)         LOAD SAVE AREA ADDRESS\n          MEXIT\n.EK       ANOP                     ENTRY POINT\n          AIF   ('&EE' EQ 'R0' OR '&EE' EQ 'R1').EB\n          AIF   ('&EE' EQ 'R2' OR '&EE' EQ 'R3').EB\n          AIF   ('&EE' EQ 'R4' OR '&EE' EQ 'R5').EB\n          AIF   ('&EE' EQ 'R6' OR '&EE' EQ 'R7').EB\n          AIF   ('&EE' EQ 'R8' OR '&EE' EQ 'R9').EB\n          AIF   ('&EE' EQ 'R10' OR '&EE' EQ 'R11').EB\n          AIF   ('&EE' EQ 'R12' OR '&EE' EQ 'R13').EB\n          AIF   ('&EE' EQ 'R14' OR '&EE' EQ 'R15').EB\n          AIF   ('&E' EQ '0' OR '&E' EQ '1' OR '&E' EQ '13').EL\n          AIF   ('&E' EQ '14' OR '&E' EQ '15').EL\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1' OR '&E' EQ 'R13').EL\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').EL\n          AGO   .EM\n.EL       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP1 SPECIFIED'\n.EM       AIF   ('&E' EQ '').EN\n          AGO   .EO\n.EN       MNOTE 'ERROR - BLANK BASE REGISTER SPECIFIED'\n          MEXIT\n.EO       ANOP                     ENTRY POINT\n          AIF   ('&OP2' EQ 'DYNAMIC').EP TEST FOR A DYNAMIC S.A.\n          DS    0H\n          USING *,&E               ESTABLISH BASE REGISTER\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABLILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,EC&SYSNDX        OBTAIN SAVE AREA ADDRESS\n&OP2      DC    18F'0',H'0'        18 WORD SAVE AREA AND TERMEH FLAG\n          AGO   .EI                TO FINISH ROUTINE\n.EP       ANOP                     ENTRY POINT\n          DS    0H\n          USING *,&E               ESTABLISH BASE REGISTER\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER\n          MNOTE  '         GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#'\n          GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#  ACQUIRE A SAVE AREA\n          XC    0(74,1),0(1)       CLEAR ACQUIRED SAVE AREA\n          ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n          MVI   72(1),X'FF'        SET INDICATOR FOR TERME MACRO\n          AGO   .EJ                TO FINISH ROUTINE\n.*\n.*     ROUTINE FOR ONE OPERAND\n.*\n.FA       ANOP                     ENTRY POINT\n&E        SETC  '&OP1'             SET BASE REGISTER\n          AIF   (T'&OP1 EQ 'N').GB TEST OPERAND ONE FOR NUMERIC\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1').GB\n          AIF   ('&E' EQ 'R2' OR '&E' EQ 'R3').GB\n          AIF   ('&E' EQ 'R4' OR '&E' EQ 'R5').GB\n          AIF   ('&E' EQ 'R6' OR '&E' EQ 'R7').GB\n          AIF   ('&E' EQ 'R8' OR '&E' EQ 'R9').GB\n          AIF   ('&E' EQ 'R10' OR '&E' EQ 'R11').GB\n          AIF   ('&E' EQ 'R12' OR '&E' EQ 'R13').GB\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').GB\n&E        SETC  '12'               SET BASE REGISTER 12\n          AIF   ('&OP1' EQ 'DYNAMIC').FD TEST FOR A DYNAMIC S.A.\n          DS    0H\n          USING *,&E               ESTABLISH BASE REGISTER\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,FA&SYSNDX        OBTAIN SAVE AREA ADDRESS\n&OP1      DC    18F'0',H'0'        18 WORD SAVE AREA AND FLAG\nFA&SYSNDX ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n          AGO   .FE                TO FINISH ROUTINE\n.FD       ANOP                     ENTRY POINT\n          DS    0H\n          USING *,&E               ESTABLISH BASE REGISTER\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER\n          MNOTE  '         GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#'\n          GETMAIN RU,LV=74,LOC=&LOC,SP=&SPN#  ACQUIRE A SAVE AREA\n          XC    0(74,1),0(1)       CLEAR ACQUIRED SAVE AREA\n          ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n          MVI   72(1),X'FF'        SET INDICATOR FOR TERME MACRO\n.FE       ANOP                     ENTRY POINT\n          ST    13,4(0,1)          STORE HIGHER SAVE AREA POINTER\n          LM    0,1,20(13)         RESTORE REGISTERS 0 AND 1\n          L     13,8(0,13)         LOAD SAVE AREA ADDRESS\n          MEXIT\n.*\n.*     ROUTINE FOR AN UNNAMED SAVE AREA AND ONE BASE REGISTER -\n.*     DEFAULT BASE REGISTER 12\n.*\n.GA       ANOP                     ENTRY POINT\n&E        SETC  '12'               SET BASE REGISTER 12\n.GB       ANOP                     ENTRY POINT\n          AIF   ('&E' EQ '0' OR '&E' EQ '1' OR '&E' EQ '13').GC\n          AIF   ('&E' EQ '14' OR '&E' EQ '15').GC\n          AIF   ('&E' EQ 'R0' OR '&E' EQ 'R1' OR '&E' EQ 'R13').GC\n          AIF   ('&E' EQ 'R14' OR '&E' EQ 'R15').GC\n          AGO   .GD\n.GC       MNOTE 'WARNING - ILLEGAL BASE REGISTER &OP1 SPECIFIED'\n.GD       AIF   ('&E' EQ '').GE\n          AGO   .GF\n.GE       MNOTE 'ERROR - BLANK BASE REGISTER SPECIFIED'\n          MEXIT\n.GF       ANOP                     ENTRY POINT\n          DS    0H\n          USING *,&E               ESTABLISH BASE REGISTER\n&NAME     BASR  15,0               INSURE PGM BASE AND MODE\n          BCTR  15,0                ADDRESSABILITY IN ENTRY\n          BCTR  15,0                 POINT REGISTER\n          STM   14,12,12(13)       SAVE REGISTERS 14 THROUGH 12\n          LR    &E,15              LOAD BASE REGISTER\n          CNOP  0,4                WORD ALIGNMENT\n          BAS   1,GA&SYSNDX        OBTAIN SAVE AREA ADDRESS\n          DC    18F'0',H'0'        18 WORD SAVE AREA AND TERMEH FLAG\nGA&SYSNDX ST    1,8(0,13)          STORE LOWER SAVE AREA POINTER\n          AGO   .FE                TO FINISH ROUTINE\n          MEND\n          MACRO\n&NAME     TERMEH &OP1\n.*\n.*    THE PURPOSE OF THIS MACRO IS TO PROVIDE STANDARD OS LINKAGE.\n.*  IT WILL RESTORE REGISTERS 2 THROUGH 14, FREE A DYNAMIC SAVE\n.*  AREA WITH A 'FREEMAIN' IF IT WAS ACQUIRED, ESTABLISH LINKAGE FOR\n.*  A 'XCTL' IF DESIRED, OR RETURN TO A CALLING CSECT OR PROGRAM.\n.*  IT SUPPORTS FULL XA/31 BIT ADDRESSING AND MUST BE USED IN\n.*  CONJUNCTION WITH THE 'PRIMEH' MACRO USED FOR PROGRAM ENTRY AND\n.*  INITIALIZATION.\n.*\n.*    DATE - JULY 1997 - REWORKED TO PROVIDE XA ADDRESSING SUPPORT.\n.*                       MUST BE USED IN CONJUNCTION WITH 'PRIMEH'.\n.*                       ASSEMBLER VERSION H REQUIRED.\n.*                       SUPPORTS AMODE/RMODE ANY.\n.*\n.*\n          GBLC  &SPN#              VALUE FOR SUBPOOL SET IN 'PRIMEH'\n.*\n&NAME     L     13,4(0,13)         LOAD HIGHER SAVE AREA ADDRESS\n          STM   0,1,20(13)         SAVE REGISTERS 0 AND 1\n          L     1,8(0,13)          LOAD SAVE AREA ADDRESS\n          CLI   72(1),X'FF'        IS SAVE AREA DYNAMIC?\n          BC    7,ZZ&SYSNDX        NO\n          LR    2,15               SAVE R15 BEFORE VS2 FREEMAIN\n          MNOTE '         FREEMAIN RU,LV=74,A=(1),SP=&SPN#'\n          FREEMAIN RU,LV=74,A=(1),SP=&SPN#  FREE THE SAVE AREA\n          LR    15,2               RESTORE R15 AFTER VS2 FREEMAIN\nZZ&SYSNDX L     14,12(0,13)        RESTORE REGISTER 14\n          LM    0,12,20(13)        RESTORE REGISTERS 0 THROUGH 12\n          AIF   ('&OP1' EQ 'XCTL').A TEST FOR A XCTL\n          BSM   0,14               RETURN TO CALLING PROGRAM\n          MEXIT\n.A        ANOP                     ENTRY POINT\n          BASR  15,0               LOAD BASE REGISTER 15\n          USING *,15               ESTABLISH BASE REGISTER\n          MEXIT\n          MEND\nSLSUX06  TITLE 'IDENTIFY SCRATCH ON INSERT PROCESSING'\n**PROLOGUE**********************************************************\n*                                                                  *\n*  CA-1 AND TMS ARE REGISTERED TRADEMARKS OF COMPUTER ASSOCIATES.  *\n*                                                                  *\n*  SLSUX06  - HSC INSERT/DELETE USER EXIT                          *\n*                                                                  *\n*  FUNCTION:  FLAG VOLUMES AS IN OR OUT OF SILO.                   *\n*             FLAG SCRATCH VOLUMES DURING ENTER PROCESSING.        *\n*             INFORMATION PASSED TO THE EXIT INCLUDES:             *\n*           VOLSER                                                 *\n*           FUNCTION (ENTER/DELETE)                                *\n*           LOCATION (LSM, PANEL, ROW, COLUMN)                     *\n*           DATE/TIME VOLUME INSERTED IN DATABASE                  *\n*           DATE/TIME VOLUME LAST SELECTED                         *\n*           NUMBER OF TIMES VOLUME SELECTED                        *\n*                                                                  *\n*  ATTRIBUTES: RE-ENTRANT, REFRESHABLE, AMODE=RMODE=24             *\n*  >>--->  NOTE: THIS PROGRAM MUST BE IN 24 BIT ADDRESSING  <---<< *\n*  >>--->         MODE IN ORDER TO INVOKE TMS CODE.         <---<< *\n*                                                                  *\n*  SERIALIZATION REQUIREMENTS:                                     *\n*      THE PARAMETER LIST PASSED TO THIS MODULE WILL BE A COPY OF  *\n*      EACH DATABASE INSERT OR DELETE TRANSACTION,  PASSED ONE AT  *\n*      A TIME, IN THE SEQUENCE THEY WERE CREATED (FIFO).           *\n*                                                                  *\n*  LINKAGE AND INPUTS  --                                          *\n*      STANDARD OS CALLING CONVENTIONS ARE USED.                   *\n*      THIS MODULE IS ENTERED IN PROBLEM STATE, USER KEY,          *\n*      24-BIT ADDRESSING MODE, NON-APF AUTHORIZED.                 *\n*                                                                  *\n*      R0      UNDEFINED                                           *\n*      R1      POINTS TO THE USER EXIT PARAMETER LIST              *\n*              MAPPED BY THE SLSUX06P MACRO.                       *\n*      R2-R12  UNDEFINED                                           *\n*      R13     REGISTER SAVE AREA.                                 *\n*      R14     RETURN ADDRESS.                                     *\n*      R15     ENTRY POINT ADDRESS.                                *\n*                                                                  *\n*  ENTRY POINTS (EXECUTABLE):                                      *\n*      SLSUX06  - HSC INSERT/DELETE USER EXIT                      *\n*                                                                  *\n*           CALLING SEQUENCE:                                      *\n*                                                                  *\n*                LA   R1,SLSUX06P          USER EXIT PLIST         *\n*                L    R15,=V(SLSUX06)      ADDRESS OF USER EXIT.   *\n*                SYNCH (R15),              BRANCH TO USER EXIT.    *\n*                      RESTORE=YES,        RESTORE REGS ON RETURN  *\n*                      KEYADDR=KEY8,       USER KEY 8              *\n*                      STATE=PROB,         PROBLEM STATE           *\n*                      AMODE=24            AMODE/RMODE=24          *\n*                                                                  *\n*           PARAMETER DESCRIPTION: SLSUX06P MACRO                  *\n*                                                                  *\n*  REGISTER CONVENTIONS:                                           *\n*      R13 = SAVE AREA POINTER                                     *\n*      R12 = PROGRAM BASE ADDRESS                                  *\n*      R11 = RESERVED FOR POSSIBLE SECOND BASE ADDRESS             *\n*      R10 = MAPS PLIST (SLSUX06P)                                 *\n*      R09 = ADDRESS OF MODULE WORKAREA                            *\n*      R08 = PRESERVE RETURN CODE ACROSS FREEMAIN                  *\n*      R02 = BAL TO COMMON ROUTINES                                *\n*                                                                  *\n*  EXIT (NORMAL):                                                  *\n*      RETURN CODE:                                                *\n*           R15 = ZERO                                             *\n*                                                                  *\n*      REGISTER CONDITION: ALL OTHER REGISTERS AS AT ENTRY.        *\n*      R01     POINTS TO THE USER EXIT PARAMETER LIST              *\n*      R15     RETURN CODE FROM EXIT PROCESSING\n*                                                                  *\n*      SPECIAL CONDITIONS:                                         *\n*           THIS CODE MUST RUN IN 24 BIT ADDRESSING MODE TO        *\n*           INTERFACE WITH TMS FUNCTIONS.                          *\n*                                                                  *\n*  EXITS (ABNORMAL):                                               *\n*      RETURN CODE:                                                *\n*           R15 =  UX06INV          INVALID ENTRY TYPE WAS PASSED  *\n*           R15 =  UX06NOPR         TERMINATE ALL EXIT CALLS       *\n*         ALL OTHER RETURN CODES ARE IGNORED BY CALLER.            *\n*                                                                  *\n*  EXTERNAL REFERENCES:                                            *\n*      GETMAIN  - MVS GETMAIN SERVICES                             *\n*      FREEMAIN - MVS FREEMAIN SERVICES                            *\n*      TMMOPTMC - CA-1 INITIALIZE THE TMS SVC LIST                 *\n*      TMMGETVL - CA-1 GET A RECORD FROM THE TMC                   *\n*      PRIMEH   - SYZYGY ENTRY LINKAGE CONVENTIONS                 *\n*      TERMEH   - SYZYGY EXIT LINKAGE CONVENTIONS                  *\n*      EQUATES  - SYZYGY STANDARD REGISTER EQUATES                 *\n*      (THERE IS NO CLOSE FOR THE TMC, IT IS AUTOMATIC)            *\n*                                                                  *\n*  MESSAGES GENERATED:                                             *\n*      WTO      - TMS NOT ACTIVE ERROR MESSAGE                     *\n*                                                                  *\n*  DATA AREAS:                                                     *\n*      SLSUX06P - HSC INSERT/DELETE EXIT PARAMETER LIST            *\n*      WORKUX06 - GETMAINED WORK AREA FOR EXIT PROCESSING          *\n*                                                                  *\n*                                                                  *\n*      TO ACTIVATE THE EXIT,  THE HSC MUST BE RE-CYCLED.  THE      *\n*      SERVER TASK USED TO INVOKE THIS CODE CONTAINS AN ESTAE      *\n*      TO PROTECT THE HSC FROM USER EXIT ABENDS.  IF AN ABEND      *\n*      IS DETECTED IN THE EXIT, IT WILL BE DISABLED.               *\n*                                                                  *\n*      THE CODE WILL RUN ASYNCRONOUSLY AND  NO  HSC RESOURCES      *\n*      ARE HELD THAT DEPEND ON THIS CODE. THEREFORE, THERE IS      *\n*      NO RESTRICTION PLACED ON THE CODE IN THIS MODULE.  ANY      *\n*      MVS SERVICE MAY BE USED, I.E. DYNAMIC ALLOCATION, I/O,      *\n*      SVCS, WTO/WTOR, ETC., WITHOUT AFFECTING HSC OPERATION.      *\n*      ANY VOLUME INSERTS OR DELETES THAT OCCUR WHILE WAITING      *\n*      FOR MVS SERVICES OR WTOR RESPONSES WILL BE QUEUED  AND      *\n*      PROCESSED IN THE SEQUENCE RECEIVED.                         *\n*                                                                  *\n*  ATTRIBUTES  --                                                  *\n*      1.  PROBLEM STATE, USER KEY                                 *\n*      2.  AMODE-RMODE=24                                          *\n*      3.  NON-APF AUTHORIZED                                      *\n*                                                                  *\n*  CHANGE HISTORY:                                                 *\n*      03/04/99-SYZYGY BRIAN WESTERMAN MAJOR REWRITE OF SAMPLE EXIT*\n*              -EXIT NOW SUPPORTS CA-1 V5.X                        *\n*                                                                  *\n**ENDPROLOGUE*******************************************************\n         EJECT\n         ENTRY SLSUX06\nSLSUX06  CSECT\n*\n*------------------------------------------------------------------*\n*  >>---> NOTE: THIS PROGRAM MUST RUN IN 24 BIT ADDRESSING         *\n*               MODE IN ORDER TO INVOKE TMS CODE.                  *\n*------------------------------------------------------------------*\n*\nSLSUX06  AMODE 24                 *** THE USER SHOULD NOT CHANGE ***\nSLSUX06  RMODE 24                 *** THE AMODE/RMODE VALUES.    ***\n*\n*  ESTABLISH CSECT ADDRESSABILITY.\n*  IF NEEDED, R11 HAS BEEN RESERVED FOR A SECOND BASE REGISTER.\n*\n         EQUATES\n         PRIMEH R12,DYNAMIC        ESTABLISH BASE & MAKE REENTRANT\n         B     UX06005\n*\n*  MODULE IDENTIFICATION.\n*    NAME, ASSEMBLY DATE AND TIME, OTHER INFO.\n*\n         DC    CL7'SYZYGY-'       EYECATCHER START.\n         DC    CL8'SLSUX06'       CSECT NAME.\n         DC    CL8'&SYSDATE'      ASSEMBLY DATE.\n         DC    CL8'        '      APAR LEVEL.\n         DC    CL5'&SYSTIME'      ASSEMBLY TIME.\n         DC    0H'0'\n*\n         EJECT\n*\nUX06005  DS    0H\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** DETERMINE THE EVENT FOR WHICH WE ARE BEING INVOKED          *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         USING SLSUX06P,R1        TEMPORARY ADDRESSABILITY\n         SR    R15,R15            CLEAR RETURN CODE IF WE LEAVE HERE\n         CLI   UX06FUNC,UX06PURG  Purge request?\n         BE    $EXIT2             BYE - WE DON'T WANT TO MESS WITH IT\n*\n         DROP  R1                 DROP AND CHANGE TO R10\n         LR    R10,R1             SAVE POINTER TO PARAMETER LIST.\n         USING SLSUX06P,R10       MAP PLIST\n*\n*  Acquire a work area to maintain re-entrant status.  This area\n*  should be below the line to conform with tms operations.\n*  save the area address in the UX06USER field in the paramter list.\n*\n         LA    R0,WKLEN           GET WORK AREA LENGTH\n*\n         GETMAIN RU,LV=(0),LOC=(BELOW,ANY)   WORK AREA BELOW 16 MEG.\n*\n         LA    R9,0(,R1)          COPY PTR TO WORK AREA\n         USING WORKUX06,R9\n*\n*  INITIALIZE THE WORK AREA\n*\n         LR    R2,R9              SET MVCL 'TO' ADDRESS\n         LA    R3,WKLEN           SET MVCL 'TO' LENGTH\n         LA    R4,KWRKCNS         SET MVCL 'FROM' ADDRESS\n         LA    R5,KWKLEN          SET MVCL 'FROM' PAD & LENGTH\n         MVCL  R2,R4              SET UP THE WORK AREA\n*\n         XC    WKRETCDE,WKRETCDE  CLEAR RETURN CODE SAVE AREA\n*\n*\n*\n         CLI   UX06FUNC,UX06DEL   EJECT  REQUEST?\n         BE    $DELETE            YES,  GO PROCESS IT.\n*\n*\n*\n         EJECT\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** WE HAVE DETERMINED THAT A VOLUME IS BEING INSERTED INTO SILO*\n* ** UNCOMMENT NEXT 2 LINES TO PUT INFO MESSAGE OUT TO CONSOLE   *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*        MVC   WKWTOTXT(L'KSADD),KSADD         MOVE IN MESSAGE TEXT\n*        BAL   R2,UX06MSG                      Write out OUR Message\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** OPEN THE CA-1 TMC CATALOG                                   *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         TMMOPTMC NOTACT=ABEND001,MF=E      OPEN TMC\n*\n         LA    R7,WKTMCREC        POINT TO TMC RECORD\n         USING TMREC,R7           MAP TMC RECORD\n         MVC   TMVOLSER,UX06VOL   SAVE VOLSER\n         MVC   VOLHOLD,UX06VOL    SAVE VOLSER (POSSIBLE SCRATCH TAPE)\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** GET THE VOLSER RECORD BY VOLSER                             *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         TMMGETVL TMVOLSER,TMREC,ABEND002,ENQ=YES\n*\n         MVC   TMVENDOR(8),=CL8'IN SILO '       SAY CART IN SILO.\n         MVI   TMROBTY,X'02'  01=IBM, 02=STK   FLAG CART IN STK SILO.\n         MVI   TMROBID,X'01'                   FLAG IN FIRST SILO.\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** PUT THE VOLUME RECORD BACK INTO THE TMC                     *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         TMMPUTVL TMREC,ABEND002,DEQ=YES         Update TMC\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** END OF TMC UPDATE PROCESS, NOW TELL HSC IT'S OKAY TO USE    *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         TM    TMFLAG1,TMDELET    IS TAPE IN DELETE STATUS ?\n         BO    $EXIT              BYE - DON'T FLAG TO HSC\n         TM    TMFLAG1,TMSCRTCH   IS IT A SCRATCH TAPE?\n         BNO   $EXIT              BYE - DON'T FLAG TO HSC\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** IF THIS IS A SCRATCH TAPE, THEN MARK IT USABLE AS SUCH NOW  *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         LR    R10,R1\n         USING SLX,R1             ESTABLISH ADDRESSABILITY\n*\n         LOAD  EP=SLSXCAL\n         ST    R0,WSCALADR        SAVE ROUTINE ADDRESS\n         LA    R5,5               GIVE IT 5 TRIES TO GET THE VOLUME\n*\nCHKVOL   DS    0H\n*\n* The STIMER is here because the tape may still be selected because\n* the report has the tape in its arm.  Try to update the record five\n* times.\n*\n         STIMER WAIT,BINTVL=WAIT  WAIT FOR AWHILE\n*\n         SLSXREQ SCRATCH,VOLSER=VOLHOLD,OPTION=SYNCH,                  X\n               XCALADR=WSCALADR,MF=(E,WSLSXREQ)\n*\n         ST    R15,RCODE                      Save Return Code\n*\n         LTR   R15,R15            IS HSC TERMINATING? (no zero R15)\n         BNZ   HSCTERM            BYE  - GET OUT OF HERE\n*\n         CLI   SLXCMDRC,SLXROK    DID WE GET THE VOLUME?\n         BE    HSCDOWN            YEP, Marked as scratch, get out.\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** FOLLOWING CODE IS FOR DEBUGGING PURPOSES, NOT PRODUCTION    *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n*        MVC   WKWTOTXT(L'KSWAIT),KSWAIT       MOVE IN MESSAGE TEXT\n*        MVC   WKWTOTXT+11(6),VOLHOLD          VOLSER TO MESSAGE\n*\n*        BAL   R2,UX06MSG                      Issue Retying Message\n*\n*        BAL   R2,UX06ERR                      Format Return Codes\n*        BAL   R2,UX06MSG                      Send return codes\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** END OF DEBUGGING CODE                                       *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         BCT   R5,CHKVOL          GO TRY AGAIN\n*\nHSCTERM  DS    0H\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** WE TRIED 5 TIMES AND DIDN'T GET THE VOLUME                  *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         MVC   WKWTOTXT(L'KSLSNS),KSLSNS      MOVE IN MESSAGE TEXT\n         MVC   WKWTOTXT+7(6),VOLHOLD          VOLSER TO MESSAGE\n         BAL   R2,UX06MSG                     GO ISSUE MESSAGE\n*\n         BAL   R2,UX06ERR                      Format Error Message\n         BAL   R2,UX06MSG                      Issue Error Message\n*\n         B     HSCDOWN            LET 'EM KNOW IT DID'NT UPDATE\n*\nHSCDOWN  DS    0H\n*\n         DELETE EP=SLSXCAL\n         B     $EXIT\n*\n         EJECT\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** VOLUME BEING EJECTED FROM THE SILO                          *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n$DELETE  DS    0H\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** UNCOMMENT THE FOLLOWING TWO LINES TO SEND MSG TO CONSOLE    *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*        MVC   WKWTOTXT(L'KSDEL),KSDEL         MOVE IN MESSAGE TEXT\n*        BAL   R2,UX06MSG                      Write out OUR Message\n*\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** OPEN THE TMC                                                *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         TMMOPTMC NOTACT=ABEND001,MF=E      OPEN TMC\n*\n         LA    R7,WKTMCREC        POINT TO TMC RECORD\n         USING TMREC,R7           MAP TMC RECORD\n         MVC   TMVOLSER,UX06VOL   SAVE VOLSER\n         MVC   VOLHOLD,UX06VOL    Save it in our DSECT\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** GET THE VOLUME RECORD FROM THE TMC                          *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         TMMGETVL TMVOLSER,TMREC,ABEND002,ENQ=YES\n*\n         MVC   TMVENDOR(8),=CL8'OUT SILO'      SET OUR FLAG\n         MVI   TMROBTY,X'00'                   FLAG CART OUT OF SILO.\n         MVI   TMROBID,X'00'                   FLAG OUT OF SILO.\n*\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n* ** UPDATE THE TMC VOLUME RECORD                                *\n* ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** * ** *\n*\n         TMMPUTVL TMREC,ABEND002,DEQ=YES         Update TMC\n*\n         B     $EXIT                             DONE\n*\n         EJECT\n* - - - -\n         TITLE 'SLSUX06 - TERMINATION PROCESSING'\n*\n*  TERMINATION EVENT INVOCATION:\n*     - RESTORE ORIGINAL REGISTER SAVE AREA PTR.\n*     - RETURN WILL BE MADE TO THE ADDRESS IN R14 UPON ENTRY.\n*     - R15 WILL CONTAIN AN ALLOWABLE RETURN CODE.\n*\n*\n*  STANDARD EXIT LINKAGE.  PICK UP RETURN CODE FROM WORK AREA.\n*\n$EXIT    DS    0H\n         LA    R2,WKLEN           LENGTH OF WORKAREA FOR FREEMAIN\n         LR    R0,R2              SETUP FOR FREEMAIN\n         LR    R1,R9              POINT TO WORK AREA\n         L     R8,WKRETCDE        SAVE RETURN CODE FOR AFTER FREEMAIN\n*\n         FREEMAIN R,LV=(0),A=(1)  FREE THE WORK AREA\n*\n         LR    R15,R8             PICK UP RETURN CODE\n         LR    R1,R10             RETURN PLIST ADDRESS TO CALLER\n$EXIT2   DS    0H\n         TERMEH\n*\n         EJECT\n*\n*     ***********  OUT OF LINE ROUTINES AND EXCEPTION PROCESSING ******\n*\n*    THIS IS TO ISSUE MSG TO INDICATE SCRATCH UTILITY MUST BE RUN\n*    TO UPDATE HSC TO PROPERLY INDICATE SCRATCH VOLUMES WHICH COULD\n*    HAVE BEEN ENTERED INTO ACS WHILE TMS WAS DOWN.\n*\nABEND001 DS    0H\n         MVC   WKWTOTXT(L'KTMSNA),KTMSNA      MOVE IN MESSAGE TEXT\n         BAL   R2,UX06MSG                     GO ISSUE MESSAGE\n         B     $EXIT              FREE UP RESOURCES AND TERMINATE\n*\n*    Have a Tape not in the TMC\n*\nABEND002 DS    0H\n         MVC   WKWTOTXT(L'KTMSNA),KTMNON      MOVE IN MESSAGE TEXT\n         MVC   WKWTOTXT(6),VOLHOLD            Move in VOL/SER\n         BAL   R2,UX06MSG                     GO ISSUE MESSAGE\n         B     $EXIT              FREE UP RESOURCES AND TERMINATE\n*\n*     COMMON ROUTINES FOR SLSUX06\n*\nUX06MSG  DS    0H\n         ST    R1,R1SAVE\n         WTO   MF=(E,WKWTO)\n         L     R1,R1SAVE\n         BR    R2\n*\n*     COMMON ROUTINES FOR SLSUX06\nUX06ERR  DS    0H\n         MVC   WKWTOTXT(L'KSRETURN),KSRETURN   MOVE IN MESSAGE TEXT\n*\n         MVC   LOOKHERE,=C'PACK#1'\n         MVC   PACKIN(5),=X'000000000F'        Init it.\n         MVC   PACKIN(4),RCODE                 R15\n         UNPK  PACKOUT,PACKIN                 Unpack it\n         TR    PACKOUT,TRTAB                  Make it displayable?>\n         MVC   WKWTOTXT+4(8),PACKOUT          Move Return code\n*\n         MVC   LOOKHERE,=C'PACK#2'\n         MVC   PACKIN(5),=X'000000000F'        Init it.\n         MVC   PACKIN+3(1),SLXCMDRC            Move Return Code\n         UNPK  PACKOUT,PACKIN                  Unpack it\n         TR    PACKOUT(8),TRTAB                Make it displayable?\n         MVC   WKWTOTXT+18(2),PACKOUT+6        Move Return code\n*\n         MVC   LOOKHERE,=C'PACK#3'\n         MVC   PACKIN(5),=X'000000000F'        Init it.\n         MVC   PACKIN(4),SLXSRC                Move Return Field\n         UNPK  PACKOUT,PACKIN                  Unpack it\n         TR    PACKOUT,TRTAB                   Make it displayable?\n         MVC   WKWTOTXT+27(8),PACKOUT          Move Return Field\n*\n         BR    R2\n*\n         DROP  ,                  DROP ALL MAPPING\n*\n         EJECT\n*\n         TITLE 'SLSUX06 - MISCELLANEOUS CONSTANTS AND EQUATES'\n         LTORG\n*\n*                             1         2         3         4\n*                   01234567890123456789012345678901234567890\nKSADD    DC    CL41'VOLUME BEING INSERTED INTO SILO          '\nKSDEL    DC    CL41'VOLUME BEING EJECTED FROM SILO           '\nKTMSNA   DC    CL41'CA-1 Not Active, need to run batch update'\nKTMNON   DC    CL41'XXXXXX not a CA-1 Controlled Tape        '\nKSLSNS   DC    CL41'VOLUME XXXXXX Scratch Failed!            '\nKSWAIT   DC    CL41'Didn''t Get xxxxxx from HSC - retrying    '\nKSRETURN DC    CL41'R15=xxxxxxxx  ERR=XX  CODE=xxxxxxxx      '\nWAIT     DS    0D                  ALIGN VALUE\n         DC    X'000001F4'         WAIT 5 SECONDS\n*\nOUTTRTB1 EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\nTRTAB    DC    240X'00',C'0123456789ABCDEF'\n*\n**********************************************************************\n*                                                                    *\n*   IF YOU MODIFY ANYTHING BETWEEN THE LABELS 'KWRKCNS' AND 'KWKLEN' *\n*   YOU MUST INSURE THAT IT WILL PROPERLY MAP INTO 'WORKUX06' DSECT. *\n*   THIS CODE WILL SELF DESTRUCT IF MAPPED INCORECTLY!               *\n*                                                                    *\n**********************************************************************\n*\n         DS    0D        ALIGN WORKING STORAGE CONSTANTS\nKWRKCNS  EQU   *\nKWKID    DC    CL8'WORKUX06'      WORK AREA BLOCK ID\n*\nKWTO     WTO   'SLSUX06 - .........................................',  X\n               ROUTCDE=(2,5),DESC=4,MF=L\n*\nKTMCEYE  DC    CL8'TMRECORD'\nKWKLEN   EQU   *-KWRKCNS\n*\n         EJECT\n*\n         TITLE 'SLSUX06 - LOCAL WORK AREA'\n*\nWORKUX06 DSECT\nWKID     DS    CL8                BLOCK ID EYEBALL\n*\n*\nWKWTO    WTO   'SLSUX06 - .........................................',  X\n               ROUTCDE=(2,5),DESC=4,MF=L\nWKWTOTXT EQU   WKWTO+14           WHERE TO MOVE MESSAGE TEXT\n*\nWKTMCEYE DS    CL8                TMRECORD EYEBALL\nWKTMCREC DS    CL340              TMC RECORD     5.0\n*\n*\n         TMMOPTMC MF=L\n*\nWSCALADR DC    F'0'               SLSXREQ ROUTINE ADDRESS\nWKRETCDE DC    F'0'               RETURN CODE SAVE AREA\n*\nLOOKHERE DS    CL8\nR1SAVE   DS    F\nRCODE    DS    F\nPACKIN   DS    CL5\nPACKOUT  DS    CL9\nVOLHOLD  DS    CL6                Hold the TMS Volume Here\n*\nWSLSXREQ SLSXREQ MF=L             LIST FORM OF MACRO\n         DC    0D'0'              DOUBLE WORD ALLIGN\nWKLEN    EQU   *-WORKUX06         LENGTH OF WORK AREA\n*\n         EJECT\n*\n         TITLE 'SLSUX06 - USER EXIT PARAMETER LIST'\n         SLSUX06P ,\n*\n         EJECT\n*\n         TITLE 'SLSUX06 - TMS RECORD LAYOUT'\nTMREC    DSECT ,\n         TMMTMREC DSECT=ALL\n*\n         EJECT\n*\n         TITLE 'SLSUX06 - SLSXREQ HSC SLSX RESPONSE MAPPING MACRO'\n         SLSXREQM ,\n*\n         END   SLSUX06\n//L.SYSLMOD DD DISP=SHR,DSN=OEMPM.HSC.V2R0M1.SLSLINK\n//L.SYSIN DD *\n ENTRY SLSUX06\n MODE AMODE(24),RMODE(24)\n NAME SLSUX06(R)\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSBLD00": {"ttr": 10755, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SYZYGYB"}, "text": "//$SPBHW   JOB  (BHWEST,NOBOX),'SYSTEMS*BRIAN',CLASS=7,\n//     MSGCLASS=W,NOTIFY=$SPBHW,REGION=0M,TIME=1440\n//*\n//*  THE OUTPUT GOES TO SYS6.ZEKE.TESTJCL FOR AUTOMATIC SUBMITS\n//*   REFER   SYSX.SYS.CNTL(SYSBLD00)\n//STEP0  EXEC PGM=IKJEFT01,PARM='%CATLIST'\n//JOBOUT   DD DISP=OLD,DSN=$SPBHW.PDS.DATA(SYSCATBK)\n//SYSPROC  DD DISP=SHR,DSN=TSO.SYSTEM.CLIST\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSCATBK": {"ttr": 10757, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\xc1\\x00\\xc1\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 193, "newlines": 193, "modlines": 0, "user": "SYZYGYB"}, "text": "//SYSCATBK  JOB (SYST,06),'Catalog Backup',\n//        CLASS=7,\n//        MSGCLASS=W,\n//        REGION=0M,\n//        TIME=1439\n//*\n/*JOBPARM LINES=9999\n//*************************************************************\n//*\n//* SYSCATBK JOB built by SYSBLD00 on 1 Feb 1998 at 17:54:56\n//*\n//*************************************************************\n//*\n//SYSCATBK EXEC PGM=IDCAMS,TIME=1439\n//MASTER    DD  DISP=SHR,DSN=CATALOG.VSYSCT0.MASTER\n//EXPMSTR   DD  DISP=(,CATLG),DSN=MVS.CATBKUP(+1),\n//          DCB=(MODEL.DCB,RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(1,SL,EXPDT=99000),\n//          UNIT=3490,VOL=(,RETAIN)\n//LSTMSTR   DD  DISP=(,KEEP),DSN=MVS.MCATLIST,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(2,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT1 DD DISP=SHR,DSN=CATALOG.ABR.UCAT\n//OUTEXP1 DD DISP=(,KEEP),DSN=MVS.EX.ABR.UCAT,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(3,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST1 DD DISP=(,KEEP),DSN=MVS.LC.ABR.UCAT,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(4,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT2 DD DISP=SHR,DSN=CATALOG.CICS212\n//OUTEXP2 DD DISP=(,KEEP),DSN=MVS.EX.CICS212,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(5,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST2 DD DISP=(,KEEP),DSN=MVS.LC.CICS212,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(6,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT3 DD DISP=SHR,DSN=CATALOG.CICS410\n//OUTEXP3 DD DISP=(,KEEP),DSN=MVS.EX.CICS410,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(7,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST3 DD DISP=(,KEEP),DSN=MVS.LC.CICS410,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(8,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT4 DD DISP=SHR,DSN=CATALOG.INFOPAC\n//OUTEXP4 DD DISP=(,KEEP),DSN=MVS.EX.INFOPAC,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(9,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST4 DD DISP=(,KEEP),DSN=MVS.LC.INFOPAC,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(10,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT5 DD DISP=SHR,DSN=CATALOG.PRODCNTL\n//OUTEXP5 DD DISP=(,KEEP),DSN=MVS.EX.PRODCNTL,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(11,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST5 DD DISP=(,KEEP),DSN=MVS.LC.PRODCNTL,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(12,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT6 DD DISP=SHR,DSN=CATALOG.SYSTEM.PRODUCTS\n//OUTEXP6 DD DISP=(,KEEP),DSN=MVS.EX.SYSTEM.PRODUCTS,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(13,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST6 DD DISP=(,KEEP),DSN=MVS.LC.SYSTEM.PRODUCTS,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(14,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT7 DD DISP=SHR,DSN=CATALOG.TESTCAT\n//OUTEXP7 DD DISP=(,KEEP),DSN=MVS.EX.TESTCAT,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(15,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST7 DD DISP=(,KEEP),DSN=MVS.LC.TESTCAT,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(16,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT8 DD DISP=SHR,DSN=CATALOG.TSOCAT1\n//OUTEXP8 DD DISP=(,KEEP),DSN=MVS.EX.TSOCAT1,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(17,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST8 DD DISP=(,KEEP),DSN=MVS.LC.TSOCAT1,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(18,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT9 DD DISP=SHR,DSN=CATALOG.TSOCAT2\n//OUTEXP9 DD DISP=(,KEEP),DSN=MVS.EX.TSOCAT2,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(19,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST9 DD DISP=(,KEEP),DSN=MVS.LC.TSOCAT2,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(20,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT10 DD DISP=SHR,DSN=CATALOG.TSOCAT3\n//OUTEXP10 DD DISP=(,KEEP),DSN=MVS.EX.TSOCAT3,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(21,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST10 DD DISP=(,KEEP),DSN=MVS.LC.TSOCAT3,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(22,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//*\n//INUCAT11 DD DISP=SHR,DSN=CATALOG.VSYSCT5\n//OUTEXP11 DD DISP=(,KEEP),DSN=MVS.EX.VSYSCT5,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(23,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//OUTLST11 DD DISP=(,KEEP),DSN=MVS.LC.VSYSCT5,\n//          DCB=(RECFM=VBA,LRECL=125,BLKSIZE=629),\n//          LABEL=(24,SL,RETPD=0),\n//          UNIT=AFF=EXPMSTR,VOL=REF=*.EXPMSTR\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  *\n EXPORT CATALOG.VSYSCT0.MASTER OUTFILE(EXPMSTR) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.VSYSCT0.MASTER) OUTFILE(LSTMSTR) ALL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.ABR.UCAT OUTFILE(OUTEXP1) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.ABR.UCAT) OUTFILE(OUTLST1) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.CICS212 OUTFILE(OUTEXP2) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.CICS212) OUTFILE(OUTLST2) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.CICS410 OUTFILE(OUTEXP3) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.CICS410) OUTFILE(OUTLST3) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.INFOPAC OUTFILE(OUTEXP4) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.INFOPAC) OUTFILE(OUTLST4) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.PRODCNTL OUTFILE(OUTEXP5) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.PRODCNTL) OUTFILE(OUTLST5) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.SYSTEM.PRODUCTS OUTFILE(OUTEXP6) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.SYSTEM.PRODUCTS) OUTFILE(OUTLST6) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.TESTCAT OUTFILE(OUTEXP7) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.TESTCAT) OUTFILE(OUTLST7) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.TSOCAT1 OUTFILE(OUTEXP8) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.TSOCAT1) OUTFILE(OUTLST8) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.TSOCAT2 OUTFILE(OUTEXP9) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.TSOCAT2) OUTFILE(OUTLST9) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.TSOCAT3 OUTFILE(OUTEXP10) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.TSOCAT3) OUTFILE(OUTLST10) VOL\n IF MAXCC<=4 THEN -\n    EXPORT CATALOG.VSYSCT5 OUTFILE(OUTEXP11) TEMPORARY\n IF MAXCC<=4 THEN -\n    LISTCAT CAT(CATALOG.VSYSCT5) OUTFILE(OUTLST11) VOL\n//******************************************\n//* SEND TAPEMAP OF BKUP TAPE TO PRINTER ***\n//******************************************\n//TAPEMAP  EXEC  PGM=TAPEMAP,\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=X\n//SYSPRNT2 DD  DUMMY\n//SYSUT1   DD  DSN=MVS.CATBKUP(+1),\n//             DCB=BUFNO=30,\n//             DISP=SHR\n//******************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYZREORG": {"ttr": 10761, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x05]\\x05]\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 1373, "newlines": 1373, "modlines": 0, "user": "SYZYGYB"}, "text": "//$SPBHW      JOB (BHWEST,NOBOX),'$SPBHW',\n//         CLASS=7,MSGCLASS=W,TIME=1440,\n//         NOTIFY=$SPBHW,REGION=0M\n//*-----------------------------------------------*\n//*   LIB: $SPBHW.PDS.DATA(SYZREORG)\n//*   DOC: ASSEMBLE AND LINK USING ASMA90\n//*-----------------------------------------------*\n//C      EXEC  PGM=ASMA90,PARM='RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//SYSIN    DD  *\nSYZREORG TITLE 'UNLOAD AND / OR LOAD A VSAM OBJECT'\n*        THE FOLLOWING IBM SUPPLIED MACROS ARE USED IN THIS PROGRAM\n*        ABEND                          . TERMINATE A TASK\n*        CALL                           . INVOKE A PROGRAM\n*        CLOSE                          . TERMINATE A DATASET\n*        DCB                            . DATA CONTROL BLOCK\n*        DELETE                         . DELETE RESPONSIBILITY\n*        EXTRACT                        . DETERMINE TIOT ADDRESS\n*        FREEMAIN                       . RELEASE STORAGE\n*        FREEPOOL                       . RELEASE BUFFER POOL\n*        GENCB                          . GENERATE A CONTROL BLOCK\n*        GET                            . READ A RECORD\n*        GETMAIN                        . ACQUIRE STORAGE\n*        LOAD                           . LOAD A PROGRAM\n*        MODCB                          . MODIFY A CONTROL BLOCK\n*        OPEN                           . PREPARE A DATASET\n*        PUT                            . WRITE A RECORD\n*        RDJFCB                         . READ JFCB\n*        SHOWCB                         . OBTAIN CONTROL BLOCK DATA\n*        TESTCB                         . TEST A CONTROL BLOCK\n*        WTO                            . WRITE TO OPERATOR\n*\n*        THE FOLLOWING IBM SUPPLIED CONTROL BLOCK MAPPINGS ARE USED\n*        DCBD                           . DCB (DSECT)\n*        IEFJFCBN                       . JFCB\n*        IEFTIOT1                       . TIOT\n*        IFGACB                         . ACB (DSECT)\n*\n*        THE PROGRAM HAS THE FOLLOWING ATTRIBUTES\n*              REENTRANT\n*              AMODE(24)\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10                       . BRANCH AND SAVE RETURN ->\nR11      EQU   11                       . PROGRAM CSECT BASE #1\nR12      EQU   12                       . PROGRAM CSECT BASE #2\nR13      EQU   13                       . -> SAVE AREA\nR14      EQU   14                       . -> RETURN\nR15      EQU   15                       . -> ENTRY POINT\n*                                       . RETURN CODE\n         TITLE 'MAIN CSECT PROCESSING CODE'\n         PRINT NOGEN\n         SPACE 1\n*        1.    CSECT PROLOG\n*              SAVE CALLER'S REGISTERS\n*              ESTABLISH CSECT ADDRESSABILITY\n*              ACQUIRE SAVE AREA AND DYNAMIC AREA\n*              CHAIN SAVE AREAS\n*        2.    PROCESS JOB STEP PARAMETER\n*        3.    CHECK TIOT FOR DDNAMES\n*        4.    CHECK BUFFER SPECIFICATIONS IN JCL\n*        5.    PROGRAM INITIALIZATION\n*        6.    PROGRAM PROCESSING\n*        7.    PROGRAM TERMINATION\n*        8.    CSECT PROLOG\n*              RESTORE CALLER'S SAVE AREA ADDRESS\n*              RELEASE ACQUIRED STORAGE\n*              RESTORE CALLER'S REGISTERS\n*              EXIT PROGRAM\n*\n*        REGISTER USAGE\n*        2                              . WORK\n*        3                              . WORK\n*        10                             . BRANCH AND SAVE RETURN\n*        11                             . CSECT BASE REGISTER 1\n*        12                             . CSECT BASE REGISTER 2\n*        13                             . -> SAVE AREA (DYNAMIC)\n*        14                             . -> RETURN\n*        15                             . -> ENTRY POINT\n*                                       . RETURN CODE\n         SPACE 1\nSYZREORG CSECT\n         STM   R14,R12,12(R13)          . SAVE CALLER'S REGISTERS\n         LR    R11,R15                  . 11 -> ENTRY POINT\n         LA    R12,4095(,R11)           . 12 -> 4095 AFTER EP\n         LA    R12,1(,R12)              . 12 -> 4096 AFTER EP\n         USING SYZREORG,R11,R12         . CSECT ADDRESSABILITY\n         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA\n         GETMAIN RU,                    . ACQUIRE DYNAMIC AREA         C\n               LV=(R3),                 .  (INCLUDES SAVE AREA)        C\n               LOC=BELOW\n         ST    R13,4(,R1)               . SAVE HSA ->\n         ST    R1,8(,R13)               . SAVE LSA ->\n         LR    R13,R1                   . 13 -> SAVE AREA\n         USING DYNAREA,R13              . DSECT ADDRESSABILITY\n         BAS   R10,JOBPARM              . PROCESS JOB STEP PARAMETER\n         BAS   R10,CHKTIOT              . CHECK TIOT\n         BAS   R10,CHKBUFF              . CHECK JCL BUFFER SPECIFICS\n         BAS   R10,INITIAL              . PERFORM INITIALIZATION\n         BAS   R10,PROCESS              . PERFORM PROCESSING\n         BAS   R10,TERMIN               . PERFORM TERMINATION\n         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA\n         LR    R2,R13                   . 2 -> DYNAMIC AREA\n         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA\n         FREEMAIN RU,                   . RELEASE STORAGE              C\n               A=(R2),                                                 C\n               LV=(R3)\n         L     R14,12(,R13)             . RESTORE RETURN ADDRESS\n         SLR   R15,R15                  . RETURN CODE ZERO\n         LM    R0,R12,20(R13)           . RESTORE CALLER'S REGISTERS\n         BR    R14                      . RETURN\n         TITLE 'CODE PROCESSING JOB STEP PARAMETER'\n*        1.    ACCESS CALLER'S PARAMETER DATA\n*        2.    VALIDATE CONTENT\n*        3.    SET BIT(S)\n*\n*        REGISTER USAGE\n*        1                              . WORK\n*        10                             . RETURN\n         SPACE 1\nJOBPARM  EQU   *\n         MVI   PARM,LOAD                . DEFAULT TO LOAD OPTION\n         L     R1,4(,R13)               . 1 -> CALLER'S SAVE AREA\n         L     R1,24(,R1)               . 1 -> PARAMETER LIST ->\n         L     R1,0(,R1)                . 1 -> PARAMETER LIST\n         CLC   0(2,R1),=H'+0'           . Q. PARAMETER SPECIFIED?\n         BER   R10                      . A. NO - USE DEFAULT\n         CLC   2(6,R1),=C'UNLOAD'       . Q. UNLOAD SPECIFIED?\n         BE    B0001                    . A. YES\n         CLC   2(5,R1),=C'REORG'        . Q. REORG SPECIFIED?\n         BE    B0002                    . A. YES\n         CLC   2(4,R1),=C'LOAD'         . Q. LOAD SPECIFIED?\n         BNE   B0003                    . A. NO - ERROR\n         BER   R10                      . A. YES - USE DEFAULT - EXIT\nB0001    EQU   *\n         MVI   PARM,UNLOAD              . SPECIFY UNLOAD\n         BR    R10                      . EXIT\nB0002    EQU   *\n         MVI   PARM,REORG               . SPECIFY REORG\n         BR    R10                      . EXIT\nB0003    EQU   *\n         WTO   MF=(E,WTO1L)             . OUTPUT ERROR MESSAGE\n         ABEND 100,                     . ABEND TASK                   C\n               DUMP\n         TITLE 'CODE PROCESSING TIOT'\n*        1.    ACCESS TIOT\n*        2.    CHECK TIOT DDNAME CONTENT\n*        3.    ENSURE MANDATORY DDNAMES PRESENT\n*        4.    CROSS-CHECK THAT IF REORG SPECIFIED IN JOB STEP\n*              PARAMETER, THEN AMSIN DDNAME MUST BE PRESENT\n*\n*        REGISTER USAGE\n*        1                              . LENGTH OF TIOT ENTRY\n*        2                              . -> TIOT\n*        10                             . RETURN\n         SPACE 1\nCHKTIOT  EQU   *\n         MVI   DDNAME,OFF               . INITIALIZE DDNAME FLAG\n         LA    R2,@TIOT                 . 2 -> TIOT ->\n         MVC   EXTRACT,EXTRACTL         . MOVE LIST FORM TO 24 BIT\n         EXTRACT (R2),                  . ISSUE EXTRACT                C\n               MF=(E,EXTRACT)\n         L     R2,@TIOT                 . 2 -> TIOT\n         USING IEFTIOT1,R2              . DSECT ADDRESSABILITY\n         SLR   R1,R1                    . 1 - ZERO\nC0001    EQU   *\n         CLI   TIOELNGH,X'00'           . Q. TIOT ENTRY LENGTH ZERO?\n         BE    C0005                    . A. YES - END OF TIOT\n         CLC   TIOEDDNM,=CL8'VSAM'      . Q. DDNAME VSAM FOUND?\n         BE    C0002                    . A. YES\n         CLC   TIOEDDNM,=CL8'QSAM'      . Q. DDNAME QSAM FOUND?\n         BE    C0003                    . A. YES\n         CLC   TIOEDDNM,=CL8'AMSIN'     . Q. DDNAME AMSIN FOUND?\n         BNE   C0004                    . A. NO\n         OI    DDNAME,AMSIN             . INDICATE AMSIN PRESENT\n         B     C0004                    . CHECK NEXT TIOT ENTRY\nC0002    EQU   *\n         OI    DDNAME,VSAM              . INDICATE VSAM PRESENT\n         B     C0004                    . CHECK NEXT TIOT ENTRY\nC0003    EQU   *\n         OI    DDNAME,QSAM              . INDICATE QSAM PRESENT\nC0004    EQU   *\n         IC    R1,TIOELNGH              . 1 - TIOT ENTRY LENGTH\n         AR    R2,R1                    . 2 -> NEXT TIOT ENTRY\n         B     C0001                    . PROCESS NEXT ENTRY\nC0005    EQU   *                        . END OF TIOT\n         MVI   ERROR,OFF                . INITIALIZE ERROR FLAG\n         TM    DDNAME,VSAM              . Q. VSAM PRESENT?\n         BO    C0006                    . A. YES\n         MVI   ERROR,ON                 . FLAG ERROR\n         WTO   MF=(E,WTO2L)             . OUTPUT MESSAGE\nC0006    EQU   *\n         TM    DDNAME,QSAM              . Q. QSAM PRESENT?\n         BO    C0007                    . A. YES\n         MVI   ERROR,ON                 . FLAG ERROR\n         WTO   MF=(E,WTO3L)             . OUTPUT MESSAGE\nC0007    EQU   *\n         TM    PARM,REORG               . Q. REORG PARAMETER?\n         BNO   C0008                    . A. NO\n         TM    DDNAME,AMSIN             . Q. AMSIN PRESENT?\n         BO    C0008                    . A. YES - VALID\n         MVI   ERROR,ON                 . FLAG ERROR\n         WTO   MF=(E,WTO4L)             . OUTPUT MESSAGE\nC0008    EQU   *\n         CLI   ERROR,OFF                . Q. ANY ERRORS?\n         BER   R10                      . A. NO - EXIT\n         ABEND 101,                     . ABEND TASK                   C\n               DUMP\n         TITLE 'CHECK JCL BUFFER SPECIFICATIONS'\n*        1.    ISSUE READ JOB FILE CONTROL BLOCK FOR VSAM OBJECT\n*        2.    SAVE VSAM OBJECT DSNAME\n*        3.    SET FLAG IF LESS THAN 10 VSAM DATA BUFFERS SPECIFIED\n*        4.    ISSUE READ JFCB FOR QSAM\n*        5.    SAVE QSAM FILE DSNAME\n*        6.    SET FLAG IF LESS THAN 10 BUFFERS SPECIFIED\n*\n*        REGISTER USAGE\n*        2                              . -> DYNAMIC DCB\n*        3                              . -> DCB EXIT\n*        4                              . -> JFCB MAPPING\n*        10                             . RETURN\n         SPACE 1\nCHKBUFF  EQU   *\n         MVI   VSAMBUFF,OFF             . INITIALIZE BUFFER FLAGS\n         MVI   QSAMBUFF,OFF\n         LA    R2,DCB1                  . 2 -> DYNAMIC DCB AREA\n         USING IHADCB,R2                . DCB DSECT ADDRESSABILITY\n         MVC   DCB1(LDUMDCB),DUMDCB     . MOVE IN \"FORM\" DCB\n         MVC   DCBDDNAM,=CL8'VSAM'      . SPECIFY DDNAME\n         LA    R4,INFMJFCB              . 4 -> JFCB MAPPING\n         ST    R4,DCBEXIT               . STORE IN DCB EXIT\n         MVI   DCBEXIT,X'87'            . INDICATE READ JFCB AND END\n         LA    R3,DCBEXIT               . 3 -> DCB EXIT\n         ST    R3,DCBEXLST              . STORE IN DCB\n         MVC   DMAL(4),RDJFCBL          . MOVE LIST FORM READ JFCB\n         RDJFCB ((R2)),                 . ISSUE READ JFCB              C\n               MF=(E,DMAL)\n         LTR   R15,R15                  . Q. READ JFCB OKAY?\n         BNZ   D0002                    . A. NO\n         MVC   VSAMDSN,JFCBDSNM         . SAVE VSAM OBJECT DSNAME\n         CLC   JFCBADBF,=H'+39'         . Q. MORE THAN 39 DATA BUFFERS?\n         BH    D0001                    . A. YES\n         MVI   VSAMBUFF,ON              . A. NO - SET FLAG FOR MODCB\nD0001    EQU   *\n         MVC   DCBDDNAM,=CL8'QSAM'      . SPECIFY DDNAME\n         MVC   DMAL(4),RDJFCBL          . MOVE LIST FORM READ JFCB\n         RDJFCB ((R2)),                 . ISSUE READ JFCB              C\n               MF=(E,DMAL)\n         LTR   R15,R15                  . Q. READ JFCB OKAY?\n         BNZ   D0002                    . A. NO\n         MVC   QSAMDSN,JFCBDSNM         . SAVE QSAM FILE DSNAME\n         CLC   JFCBADBF,=H'+49'         . Q. MORE THAN 49 BUFFERS?\n         BHR   R10                      . A. YES - EXIT\n         MVI   QSAMBUFF,ON              . A. NO - SET OPEN EXIT FLAG\n         BR    R10                      . EXIT\n         DROP  R2                       . DSECT NOT REQUIRED\nD0002    EQU   *\n         WTO   MF=(E,WTO5L)             . READ JFCB ERROR MESSAGE\n         ABEND 102,                     . ABEND TASK                   C\n               DUMP\n         TITLE 'PRE-PROCESSING INITIALIZATION - GENERATE CBS ...'\n*        1.    ISSUE READ JOB FILE CONTROL BLOCK FOR VSAM OBJECT\n*        2.    SAVE VSAM OBJECT DSNAME\n*        3.    SET FLAG IF LESS THAN 10 VSAM DATA BUFFERS SPECIFIED\n*        4.    ISSUE READ JFCB FOR QSAM\n*        5.    SAVE QSAM FILE DSNAME\n*        6.    SET FLAG IF LESS THAN 10 BUFFERS SPECIFIED\n*\n*        REGISTER USAGE\n*        2                              . -> DYNAMIC DCB\n*        3                              . -> DCB EXIT\n*        4                              . -> JFCB MAPPING\n*        10                             . RETURN\n         SPACE 1\nINITIAL  EQU   *\n         ZAP   #RECREAD,=P'+0'          . INITIALIZE ACCUMULATORS\n         ZAP   #RECWRIT,=P'+0'\n         ZAP   #PAGE,=P'+0'             . INITIALIZE REPORT ACCUMS\n         ZAP   #LINE,=P'+60'\n         MVI   FIRST,ON                 . INITIALIZE REPORT FLAG\n         MVI   OUTLINE,C' '             . INITIALIZE REPORT RECORD\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE\n         MVC   DCB1(LQSAMDCB),QSAMDCB   . MOVE QSAM FORM DCB\n         LA    R2,DCB1                  . 2 -> QSAM DYNAMIC DCB\n         MVC   DCB2(LSYSDCB),SYSDCB     . MOVE SYSOUT FORM DCB\n         LA    R9,GENRPL                . 9 - LENGTH OF LONGEST\n*                                       .   PARAMETER LIST\n         GETMAIN RU,                    . ACQUIRE STORAGE FOR PARAMETERC\n               LV=(R9),                 .   LIST                       C\n               LOC=BELOW\n         LR    R9,R1                    . 9 -> ACQUIRED STORAGE\n         GENCB BLK=ACB,                 . GENERATE AN ACB              C\n               AM=VSAM,                                                C\n               DDNAME=VSAM,                                            C\n               MACRF=(SEQ,OUT),                                        C\n               MF=(G,(R9))\n         ST    R1,@ACB                  . SAVE ACB ADDRESS\n         GENCB BLK=EXLST,               . GENERATE AN EXIT LIST        C\n               AM=VSAM,                                                C\n               EODAD=H0004,                                            C\n               MF=(G,(R9))\n         ST    R1,@EXIT                 . SAVE EXIT LIST ADDRESS\n         L     R2,@ACB                  . 2 -> ACB\n         LR    R3,R1                    . 3 -> EXIT LIST\n         MODCB ACB=(R2),                . MODIFY ACB -> EXIT LIST      C\n               EXLST=(R3),                                             C\n               MF=(G,(R9))\n         CLI   VSAMBUFF,OFF             . Q. ADDITIONAL VSAM BUFFERS?\n         BE    E0001                    . A. NO\n         MODCB ACB=(R2),                . MODIFY ACB - 40 DATA BUFFERS C\n               BUFND=40,                                               C\n               MF=(G,(R9))\nE0001    EQU   *\n         MVC   DMAL(8),OPEN2L           . MOVE LIST FORM OPEN TO DMA\n         LA    R4,DCB2                  . 4 -> SYSOUT DCB\n         OPEN  ((R2),,(R4),OUTPUT),     . OPEN ACB AND SYSOUT DCB      C\n               MF=(E,DMAL)\n         LTR   R15,R15                  . Q. OPEN OKAY?\n         BZ    E0002                    . A. YES\n         USING IFGACB,R2                . ACB DSECT ADDRESSABILITY\n         TM    ACBOFLGS,ACBOPEN         . Q. ACB OPEN OKAY?\n         BNO   E0007                    . A. NO\n         DROP  R2                       . ACB DSECT NOT REQUIRED\n         USING IHADCB,R4                . DCB DSECT ADDRESSABILITY\n         TM    DCBOFLGS,DCBOFOPN        . Q. DCB OPEN OKAY\n         BNO   E0008                    . A. NO\n         DROP  4                        . DCB DSECT NOT REQUIRED\nE0002    EQU   *\n         MVI   OBJ,ESDS                 . DEFAULT OBJECT - ESDS\n         LA    R3,4                     . 3 - DEFAULT KEY LENGTH (4)\n         ST    R3,#KEY                  . SAVE KEY LENGTH\n         TESTCB ACB=(R2),               . CHECK FOR ESDS (LIST FORM)   C\n               ATRB=ESDS,                                              C\n               MF=(L,(R9))\n         TESTCB ACB=(R2),               . Q. OBJECT AN ESDS? (EXECUTE) C\n               MF=(E,(R9))\n         BE    E0003                    . A. YES\n         MVI   OBJ,RRDS                 . SET DEFAULT TO RRDS\n         TESTCB ACB=(R2),               . Q. OBJECT AN RRDS?           C\n               ATRB=RRDS,               .   (SHARED PARAMETER LIST)    C\n               MF=(E,(R9))\n         BE    E0003                    . A. YES\n         MVI   OBJ,LDS                  . INDICATE A LINEAR DATASET\n         TESTCB ACB=(R2),               . Q. OBJECT AN LINEAR DS?      C\n               ATRB=LDS,                .   (SHARED PARAMETER LIST)    C\n               MF=(E,(R9))\n         BE    E0016                    . A. YES\n         MVI   OBJ,KSDS                 . INDICATE A KSDS\n         LA    R3,#KEY                  . 3 -> KEY LENGTH\n         SHOWCB ACB=(R2),               . DETERMINE KEY LENGTH         C\n               AREA=(R3),                                              C\n               FIELDS=KEYLEN,                                          C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         L     R3,#KEY                  . 3 - KEY LENGTH\nE0003    EQU   *\n         GETMAIN RU,                    . ACQUIRE STORAGE FOR KEY      C\n               LV=(R3),                                                C\n               LOC=BELOW\n         ST    R1,@KEY                  . SAVE KEY AREA ADDRESS\n         LA    R3,LRECL                 . 3 -> RECORD LENGTH AREA\n         SHOWCB ACB=(R2),               . DETERMINE MAXIMUM RECORD     C\n               AREA=(R3),               .   LENGTH                     C\n               FIELDS=LRECL,                                           C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         L     R3,LRECL                 . 3 - RECORD LENGTH\n         GETMAIN RU,                    . ACQUIRE STORAGE FOR RECORD   C\n               LV=(R3),                                                C\n               LOC=BELOW\n         ST    R1,@RECI                 . SAVE RECORD AREA ADDRESS\n         L     R3,@KEY                  . 3 -> KEY AREA\n         L     R4,LRECL                 . 4 - RECORD LENGTH\n         LR    R8,R1                    . 8 -> RECORD AREA\n         GENCB BLK=RPL,                 . GENERATE RPL                 C\n               ACB=(R2),                                               C\n               AM=VSAM,                                                C\n               AREA=(R8),                                              C\n               AREALEN=(R4),                                           C\n               ARG=(R3),                                               C\n               OPTCD=(SEQ,MVE),                                        C\n               MF=(G,(R9),GENRPL)\n         ST    R1,@RPL                  . SAVE RPL ADDRESS\n         TM    PARM,UNLOAD              . Q. UNLOAD REQUESTED\n         BNO   E0005                    . A. NO\n         TM    PARM,REORG               . Q. REORG  REQUESTED\n         BNO   UNCONT                   . A. NO, THEN SKIP NEXT TESTS\n         CLI   OBJ,KSDS                 . Q. KSDS OBJECT?\n         BNE   UNCONT                   . A. NO, THEN SKIP NEXT TESTS\n         TESTCB ACB=(R2),               . Q. OBJECT HAS AT LEAST       C\n               NCIS=10,   <== MODIFY?   .    THIS MANY CISPLITS?       C\n               MF=(E,(R9))              .   (SHARED PARAMETER LIST)\n         BH    UNCONT                   . A. YES, THEN DO UNLOAD\n         TESTCB ACB=(R2),               . Q. OBJECT HAS AT LEAST       C\n               NSSS=5,    <== MODIFY?   .    THIS MANY CASPLITS?       C\n               MF=(E,(R9))              .   (SHARED PARAMETER LIST)\n         BH    UNCONT                   . A. YES, THEN DO UNLOAD\n         WTO   MF=(E,WTO16L)            . OUTPUT MESSAGE\n         BAS   R10,TERMIN               . PERFORM TERMINATION\n         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA\n         LR    R2,R13                   . 2 -> DYNAMIC AREA\n         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA\n         FREEMAIN RU,                   . RELEASE DYNAMIC AREA         C\n               A=(R2),                                                 C\n               LV=(R3)\n         L     R14,12(,R13)             . RESTORE 14\n         LA    R15,2                    . 02 - RETURN CODE\n         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12\n         BR    R14                      . RETURN TO CALLER\nUNCONT   LR    R4,R1                    . 4 -> RPL\n         GET   RPL=(R4)                 . READ A RECORD\n         LTR   R15,R15                  . Q. READ OKAY?\n         BZ    E0005                    . A. YES\n         ST    R15,REG15                . SAVE 15\n         B     BTAB001(R15)             . BRANCH DEPENDENT ON 15\nBTAB001  B     E0005                    . RETURN CODE 0\n         B     E0009                    . RETURN CODE 4\n         B     E0004                    . RETURN CODE 8\n         B     E0009                    . RETURN CODE 12\nE0004    EQU   *\n         LA    R3,VSAMERC               . 3 -> ERROR CODE\n         SHOWCB RPL=(R4),               . OBTAIN RPL FEED BACK VALUE   C\n               AREA=(R3),                                              C\n               FIELDS=FDBK,                                            C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         CLC   VSAMERC,=F'116'          . Q. EMPTY OBJECT?\n         BNE   E0010                    . A. NO\n         WTO   MF=(E,WTO6L)             . OUTPUT INPUT EMPTY MESSAGE\n         XI    PARM,UNLOAD              . DE-FLAG UNLOAD PROCESS\nE0005    EQU   *\n         MVC   DMAL(4),OPEN1L           . DMA FOR ONE FILE TO CLOSE\n         CLOSE ((R2)),                  . CLOSE THE ACB                C\n               MF=(E,DMAL)\n         CLI   OBJ,ESDS                 . Q. ESDS OBJECT?\n         BE    E0006                    . A. YES\n         MODCB ACB=(R2),                . MODIFY ACB FOR KEY PROCESS   C\n               MACRF=KEY,                                              C\n               MF=(G,(R9))\n         BR    R10                      . EXIT\nE0006    EQU   *\n         L     R3,@RPL                  . 3 -> RPL\n         MODCB RPL=(R3),                . MODIFY RPL FOR RBA PROCESS   C\n               OPTCD=ADR,                                              C\n               MF=(G,(R9))\n         BR    R10                      . EXIT\nE0007    EQU   *\n         ST    R15,REG15                . SAVE CONTENT OF 15\n         WTO   MF=(E,WTO7L)             . OUTPUT ERROR MESSAGE\n         LA    R3,VSAMERC               . 3 -> ERROR CODE\n         SHOWCB ACB=(R2),               . DETERMINE ACB ERROR CODE     C\n               AREA=(R3),                                              C\n               FIELDS=ERROR,                                           C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         LM    R2,R3,VSAMERR            . 2 AND 3 ERROR DATA\n         ABEND 103,                     . ABEND TASK                   C\n               DUMP\nE0008    EQU   *\n         WTO   MF=(E,WTO8L)             . OUTPUT MESSAGE\n         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA\n         LR    R2,R13                   . 2 -> DYNAMIC AREA\n         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA\n         FREEMAIN RU,                   . RELEASE DYNAMIC AREA         C\n               A=(R2),                                                 C\n               LV=(R3)\n         L     R14,12(,R13)             . RESTORE 14\n         LA    R15,10                   . 15 - RETURN CODE\n         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12\n         BR    R14                      . RETURN TO CALLER\nE0009    EQU   *\n         LA    R3,VSAMERC               . 3 -> ERROR FIELD\n         L     R4,@RPL                  . 4 -> RPL\n         SHOWCB RPL=(R4),               . DETERMINE RPL FEED BACK CODE C\n               AREA=(R3),                                              C\n               FIELDS=FDBK,                                            C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\nE0010    EQU   *\n         WTO   MF=(E,WTO9L)             . OUTPUT GET FAILURE MESSAGE\n         LM    R2,R3,VSAMERR            . 2 AND 3 ERROR DATA\n         ABEND 104,                     . ABEND TASK                   C\n               DUMP\nE0016    EQU   *                        . LINEAR DATASET, DON'T PLAY\n         WTO   MF=(E,WTO16L)            . OUTPUT MESSAGE\n         BAS   R10,TERMIN               . PERFORM TERMINATION\n         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA\n         LR    R2,R13                   . 2 -> DYNAMIC AREA\n         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA\n         FREEMAIN RU,                   . RELEASE DYNAMIC AREA         C\n               A=(R2),                                                 C\n               LV=(R3)\n         L     R14,12(,R13)             . RESTORE 14\n         LA    R15,16                   . 15 - RETURN CODE\n         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12\n         BR    R14                      . RETURN TO CALLER\n         TITLE 'MAIN PROCESSING'\n*        1.    OBTAIN ADDRESSABILITY TO VSAM ACB AND QSAM DCB\n*        2.    IF UNLOAD REQUESTED, PERFORM UNLOAD\n*        3.    IF AMSIN DDNAME PRESENT, PERFORM IDCAMS INVOCATION\n*        4.    IF LOAD REQUESTED, PERFORM LOAD\n*\n*        REGISTER USAGE\n*        4                              . -> ACB\n*        5                              . -> DCB\n*        7                              . -> MESSAGE\n*        10                             . RETURN\n         SPACE 1\nPROCESS  EQU   *\n         ST    R10,FSAVE                . SAVE RETURN ADDRESS\n         L     R4,@ACB                  . 4 -> VSAM ACB\n         USING IFGACB,R4                . DSECT ADDRESSABILITY\n         LA    R5,DCB1                  . 5 -> QSAM DCB\n         USING IHADCB,R5                . DSECT ADDRESSABILITY\n         TM    PARM,UNLOAD              . Q. UNLOAD SPECIFIED?\n         BNO   F0001                    . A. NO\n         BAS   R10,UNLDVSAM             . PERFORM UNLOAD PROCESS\n         LA    R7,UNLDMSG               . 7 -> UNLOAD MESSAGE\n         BAS   R10,REPORT               . OUTPUT REPORT\n         MVI   OUTLINE,C'0'             . RE-INITIALIZE REPORT RECORD\n         ZAP   #RECREAD,=P'+0'          . RE-INITIALIZE RECORD COUNTS\n         ZAP   #RECWRIT,=P'+0'\nF0001    EQU   *\n         TM    DDNAME,AMSIN             . Q. AMSIN DDNAME PRESENT?\n         BNO   F0002                    . A. NO\n         BAS   R10,CALLIDC              . INVOKE IDCAMS\nF0002    EQU   *\n         L     R4,@ACB                  . 4 -> ACB\n         TM    PARM,LOAD                . Q. LOAD SPECIFIED?\n         BNO   F0003                    . A. NO\n         BAS   R10,LOADVSAM             . PERFORM LOAD PROCESS\n         LA    R7,LOADMSG               . 7 -> LOAD MESSAGE\n         BAS   R10,REPORT               . OUTPUT REPORT\nF0003    EQU   *\n         L     R10,FSAVE                . RESTORE 10\n         BR    R10                      . EXIT\n         TITLE 'TERMINATION PROCESSING'\n*        1.    RELEASE PARAMETER LIST WORK AREA\n*        2.    CLOSE SYSOUT DCB\n*        3.    FREE SYSOUT BUFFER POOL\n*\n*        REGISTER USAGE\n*        3                              . LENGTH OF PARAMETER LIST\n*        4                              . -> DCB\n*        9                              . -> PARAMETER LIST AREA\n*        10                             . RETURN\n         SPACE 1\nTERMIN   EQU   *\n         LA    R3,GENRPL                . 3 - LENGTH OF AREA\n         FREEMAIN RU,                   . RELEASE STORAGE              C\n               A=(R9),                                                 C\n               LV=(R3)\n         LA    R4,DCB2                  . 4 -> SYSOUT DCB\n         MVC   DMAL(4),OPEN1L           . CLOSE DMA FOR ONE FILE\n         CLOSE ((R4)),                  . CLOSE SYSOUT                 C\n               MF=(E,DMAL)\n         FREEPOOL (R4)                  . FREE SYSOUT BUFFER POOL\n         BR    R10                      . EXIT\n         TITLE 'CODE CONTROLLING UNLOAD OF VSAM OBJECT'\n*        1.    ESTABLISH OPEN EXIT FOR QSAM\n*        2.    OPEN VSAM AND QSAM\n*        3.    CHECK OPENS AND CHECK QSAM FOR VALID RECORD FORMAT\n*        4.    READ A VSAM RECORD\n*        5.    WRITE TO THE QSAM FILE.  THIS WILL NOT WRITE A RECORD\n*              THE FIRST TIME, ONLY RETURN THE ADDRESS OF WHERE TO\n*              BUILD THE NEXT RECORD.  ON THE SECOND AND SUBSEQUENT\n*              PUTS, THE PREVIOUS RECORD WILL BE WRITTEN, AND THE\n*              ADDRESS OF THE NEXT RECORD RETURNED.  THE LAST RECORD\n*              IS WRITTEN WHEN THE FILE IS CLOSED.  SUCH ARE THE JOYS\n*              OF PUT LOCATE PROCESSING!\n*        6.    MOVE THE INPUT RECORD TO THE OUTPUT AREA.  THIS MAY\n*              REQUIRE THE MANUFACTURE OF A RECORD DESCRIPTOR WORD\n*              (RDW) IF THE OUTPUT IS VARIABLE IN LENGTH\n*        7.    AT END OF VSAM, CLOSE FILES AND FREE BUFFER POOL\n*\n*        REGISTER USAGE\n*        1                              . -> OUTPUT RECORD\n*        2                              . -> INPUT RECORD\n*        3                              . WORK\n*        4                              . -> VSAM ACB\n*                                       . -> VSAM RPL\n*        5                              . -> QSAM DCB\n*        6                              . -> OUTPUT RECORD\n*        7                              . RECORD LENGTH\n*        9                              . -> PARAMETER LIST AREA\n*        10                             . RETURN\n         SPACE 1\nUNLDVSAM EQU   *\n         MVC   DCBEXIT+1(3),=AL3(OPENEXIT) . SPECIFY OPEN EXIT\n         MVI   DCBEXIT,X'85'\n         LA    R3,DCBEXIT               . 3 -> OPEN EXIT ->\n         ST    R3,DCBEXLST              . SAVE IN DCB\n         MVC   DMAL(8),OPEN2L           . DMAL FOR TWO FILES\n         OPEN  ((R4),,(R5),OUTPUT),     . OPEN VSAM AND QSAM           C\n               MF=(E,DMAL)\n         TM    DCBOFLGS,DCBOFOPN        . Q. QSAM OPEN OKAY?\n         BNO   H0005                    . A. NO - ERROR\n         TM    RECFM,DCBRECU            . Q. UNDEFINED RECORD FORMAT?\n         BO    H0006                    . A. YES - ERROR\n         TM    ACBOFLGS,ACBOPEN         . Q. ACB OPEN OKAY?\n         BNO   H0008                    . A. NO - ERROR\n         L     R4,@RPL                  . 4 -> RPL\n         CLI   BLKSIZE,OFF              . Q. QSAM BLKSIZE SPECIFIED?\n         BE    H0001                    . A. YES\n         WTO   MF=(E,WTO10L)            . OUTPUT NO BLKSIZE MESSAGE\nH0001    EQU   *\n         GET   RPL=(R4)                 . READ A RECORD FROM VSAM\n         LTR   R15,R15                  . Q. READ SUCCESSFUL?\n         BNZ   H0009                    . A. NO\n         PUT   (R5)                     . PUT TO QSAM\n         LR    R6,R1                    . 6 -> OUTPUT QSAM RECORD\n         AP    #RECREAD,=P'+1'          . INCREMENT RECORDS READ\n         TM    RECFM,DCBRECV            . Q. OUTPUT VARIABLE LENGTH?\n         BNO   H0002                    . A. NO\n         LA    R3,RECLEN                . 3 -> RECORD LENGTH FIELD\n         SHOWCB RPL=(R4),               . DETERMINE LENGTH OF VSAM     C\n               AREA=(R3),               .   RECORD                     C\n               FIELDS=RECLEN,                                          C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         L     R3,RECLEN                . 3 - RECORD LENGTH\n         AH    R3,=H'+4'                . INCREMENT FOR RDW\n         STH   R3,0(0,R6)               . STORE IN LL\n         XC    2(2,R6),2(R6)            . ZAP SEGMENT DATA\n         L     R3,RECLEN                . 3 - RECORD LENGTH\n         LA    R6,4(,R6)                . 6 -> AFTER CONTROL DATA\n         B     H0003\nH0002    EQU   *\n         L     R3,LRECL                 . 3 - RECORD LENGTH (FIXED)\nH0003    EQU   *\n         L     R2,@RECI                 . 2 -> INPUT RECORD\n         LR    R7,R3                    . 7 - RECORD LENGTH FOR MVCL\n         MVCL  R6,R2                    . MOVE INPUT RECORD TO OUTPUT\n         AP    #RECWRIT,=P'+1'          . INCREMENT RECORDS WRITTEN\n         B     H0001                    . READ NEXT RECORD\nH0004    EQU   *                        . VSAM EODAD ADDRESS\n         L     R4,@ACB                  . 4 -> ACB\n         MVC   DMAL(8),OPEN2L           . DMAL TO CLOSE TO FILES\n         CLOSE ((R4),,(R5)),            . CLOSE VSAM AND QSAM          C\n               MF=(E,DMAL)\n         FREEPOOL (R5)                  . FREE QSAM BUFFER POOL\n         BR    R10                      . EXIT\nH0005    EQU   *                        . QSAM OPEN FAIL\n         WTO   MF=(E,WTO11L)            . OUTPUT MESSAGE\n         B     H0007\nH0006    EQU   *                        . QSAM UNDEFINED RECORD FORMAT\n         WTO   MF=(E,WTO12L)            . OUTPUT MESSAGE\nH0007    EQU   *\n         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC\n         LR    R2,R13                   . 2 -> DYNAMIC AREA\n         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA\n         FREEMAIN RU,                   . RELEASE DYNAMIC AREA         C\n               A=(R2),                                                 C\n               LV=(R3)\n         L     R14,12(,R13)             . RESTORE 14\n         LA    R15,10                   . 15 - RETURN CODE\n         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12\n         BR    R14                      . EXIT\nH0008    EQU   *                        . OPEN FAILURE VSAM\n         ST    R15,REG15                . SAVE 15\n         WTO   MF=(E,WTO7L)             . OUTPUT MESSAGE\n         LA    R3,VSAMERC               . 3 -> ACB ERROR FIELD\n         SHOWCB ACB=(R4),               . DETERMINE ACB ERROR VALUE    C\n               AREA=(R3),                                              C\n               FIELDS=ERROR,                                           C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         LM    R2,R3,VSAMERR            . 2 AND 3 DATA FIELDS\n         ABEND 103,                     . ABEND TASK                   C\n               DUMP\nH0009    EQU   *                        . GET FAILURE VSAM\n         ST    R15,REG15                . SAVE 15\n         WTO   MF=(E,WTO13L)            . OUTPUT MESSAGE\n         LA    R3,VSAMERC               . 3 -> RPL FEED BACK FIELD\n         SHOWCB RPL=(R2),               . DETERMINE RPL FEED BACK VALUEC\n               AREA=(R3),                                              C\n               FIELDS=FDBK,                                            C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         LM    R2,R3,VSAMERR            . 2 AND 3 DATA FIELDS\n         ABEND 103,                     . ABEND TASK                   C\n               DUMP\n         TITLE 'CODE INVOKING IDCAMS'\n*        1.    LOAD IDCAMS\n*        2.    ESTABLISH IDCAMS PARAMETER LIST\n*        3.    CALL IDCAMS\n*        4.    CHECK RETURN CODE\n*        5.    DECREMENT RESPONSIBILITY COUNT\n*\n*        REGISTER USAGE\n*        0                              . MACROS\n*        1                              . WORK\n*        2                              . WORK\n*        10                             . RETURN\n         SPACE 1\nCALLIDC  EQU   *\n         LA    R2,IDCAMS                . 2 -> PROGRAM NAME\n         LOAD  EPLOC=(R2)               . LOAD INTO STORAGE\n         ST    R0,@IDCAMS               . SAVE ENTRY POINT ADDRESS\n         LA    R1,NULL                  . OPTION PARAMETER - NOT USED\n         ST    R1,@OPTION               . SAVE IN PARAMETER LIST\n         LA    R1,DNAMEL                . DDNAME PARAMETER\n         ST    R1,@DNAMEL               . SAVE IN PARAMETER LIST\n         OI    @DNAMEL,X'80'            . INDICATE LAST PARAMETER\n         L     R15,@IDCAMS              . 15 -> ENTRY POINT\n         LA    R2,@OPTION               . 2 -> PARAMETER LIST\n         CALL  (15),                    . INVOKE IDCAMS                C\n               MF=(E,(R2))\n         B     BTAB002(R15)             . BRANCH DEPENDENT ON 15\nBTAB002  B     I0001                    . RETURN CODE 0\n         B     I0001                    . RETURN CODE 4\n         B     I0002                    . RETURN CODE 8  - KIMSHEE\n         B     I0002                    . RETURN CODE 12 - DEEP KIMSHEE\n         B     I0002                    . RETURN CODE 16 - VERY DEEP\nI0001    EQU   *\n         LA    R2,IDCAMS                . 2 -> PROGRAM NAME\n         DELETE EPLOC=(R2)              . DECREMENT RESPONSIBILITY\n         BR    R10                      . EXIT\nI0002    EQU   *\n         ST    R15,REG15                . SAVE 15\n         WTO   MF=(E,WTO14L)            . OUTPUT MESSAGE\n         LA    R3,DYNLEN                . 3 - LENGTH OF DYNAMIC AREA\n         LR    R2,R13                   . 2 -> DYNAMIC AREA\n         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA\n         FREEMAIN RU,                   . RELEASE STORAGE              C\n               A=(R2),                                                 C\n               LV=(R3)\n         L     R14,12(,R13)             . RESTORE 14\n         L     R15,REG15                . RESTORE 15\n         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12\n         BR    R14                      . RETURN\n         TITLE 'CODE CONTROLLING LOAD OF VSAM OBJECT'\n*        1.    ESTABLISH OPEN EXIT FOR QSAM\n*        2.    OPEN VSAM AND QSAM\n*        3.    CHECK OPENS\n*        4.    READ A QSAM RECORD\n*        5.    MODIFY THE RPL WITH RESPECT TO RECORD LENGTH AND ADDRESS\n*        6.    WRITE TO THE VSAM FILE\n*        7.    CHECK THE RESULT OF THE WRITE (PUT) - REPORT OR ABORT AS\n*              NECESSARY\n*        8.    AT END OF QSAM, CLOSE FILES AND FREE BUFFER POOL\n*\n*        REGISTER USAGE\n*        1                              . -> OUTPUT RECORD\n*        2                              . -> INPUT RECORD\n*        3                              . WORK\n*        4                              . -> VSAM ACB\n*                                       . -> VSAM RPL\n*        5                              . -> QSAM DCB\n*        6                              . -> OUTPUT RECORD\n*        7                              . RECORD LENGTH\n*        9                              . -> PARAMETER LIST AREA\n*        10                             . RETURN\n         SPACE 1\nLOADVSAM EQU   *\n         ST    R10,JSAVE                   . SAVE 10\n         MVI   DCBMACR1,DCBMRGET+DCBMRLCG  . CHANGE MACRF TO GL\n         MVI   DCBMACR2,OFF\n         MVC   DCBEXIT+1(3),=AL3(OPENEXIT) . SPECIFY OPEN EXIT\n         MVI   DCBEXIT,X'85'\n         LA    R3,DCBEXIT               . 3 -> EXIT\n         ST    R3,DCBEXLST              . STORE IN DCB\n         MVC   DMAL(8),OPEN2L           . DMAL FOR TWO FILES\n         OPEN  ((R4),,(R5)),            . OPEN VSAM AND QSAM           C\n               MF=(E,DMAL)\n         TM    DCBOFLGS,DCBOFOPN        . Q. QSAM OPEN OKAY?\n         BNO   J0009                    . A. NO\n         TM    ACBOFLGS,ACBOPEN         . Q. VSAM OPEN OKAY?\n         BNO   J0010                    . A. NO\n         DROP  R4                       . ACB DSECT NOT REQUIRED\n         L     R4,@RPL                  . 4 -> RPL\nJ0001    EQU   *\n         GET   (R5)                     . GET QSAM RECORD\n*        AP    #RECREAD,=P'+1'          . INCREMENT RECORDS READ\n         LR    R8,R1                    . 8 -> INPUT RECORD\n         LH    R2,DCBLRECL              . 2 - LOGICAL RECORD LENGTH\n         TM    DCBRECFM,DCBRECV         . Q. VARIABLE FORMAT?\n         BNO   J0002                    . A. NO\n         SH    R2,=H'+4'                . DECREMENT LENGTH BY 4\n         LA    R8,4(,R1)                . 8 -> AFTER RDW\nJ0002    EQU   *\n         MODCB RPL=(R4),                . MODIFY RPL                   C\n               AREA=(R8),               .   RECORD ADDRESS             C\n               RECLEN=(R2),             .   RECORD LENGTH              C\n               MF=(G,(R9))\n         PUT   RPL=(R4)                 . OUTPUT RECORD\n         AP    #RECWRIT,=P'+1'          . INCREMENT RECORDS WRITTEN\n         ST    R15,REG15                . SAVE 15\n         B     BTAB003(R15)             . BRANCH DEPENDENT ON 15\nBTAB003  B     J0003                    . RETURN CODE 0\n         B     J0005                    . RETURN CODE 4\n         B     J0006                    . RETURN CODE 8\n         B     J0007                    . RETURN CODE 12\nJ0003    EQU   *                        . RETURN CODE ZERO PROCESS\n         LA    R2,RPLFDBK               . 2 -> RPL FEED BACK AREA\n         SHOWCB RPL=(R4),               . DETERMINE RPL FEED BACK      C\n               AREA=(R2),                                              C\n               FIELDS=FDBK,                                            C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         L     R15,RPLFDBK              . 15 - RPL FEED BACK\n         B     BTAB004(R15)             . BRANCH DEPENDENT ON 15\nBTAB004  B     J0001                    . FEED BACK 0  - NEXT RECORD\n         B     J0004                    . FEED BACK 4  - REPORT\n         B     J0004                    . FEED BACK 8  - REPORT\n         B     J0004                    . FEED BACK 12 - REPORT\n         B     J0004                    . FEED BACK 16 - REPORT\n         B     J0001                    . FEED BACK 20 - NEXT RECORD\n         B     J0004                    . FEED BACK 24 - REPORT\n         B     J0001                    . FEED BACK 28 - NEXT RECORD\n         B     J0001                    . FEED BACK 32 - NEXT RECORD\n         B     J0001                    . FEED BACK 36 - NEXT RECORD\n         B     J0001                    . FEED BACK 40 - NEXT RECORD\n         B     J0001                    . FEED BACK 44 - NEXT RECORD\nJ0004    EQU   *\n         SRA   R15,2                    . DIVIDE FEED BACK BY FOUR\n         BCTR  R15,R0                   . DECREMENT RESULT BY ONE\n         MH    R15,=H'+60'              . MUTLTIPLY BY SIXTY\n         LA    R7,RC0MSG                . 7 -> MESSAGE TABLE\n         AR    R7,R15                   . 7 -> SPECIFIC MESSAGE\n         BAS   R10,REPORT               . OUTPUT REPORT\n         B     J0001                    . NEXT RECORD\nJ0005    EQU   *                        . RETURN CODE FOUR PROCESSING\n         LA    R7,RC4MSG                . 7 -> SPECIFIC MESSAGE\n         BAS   R10,REPORT               . OUTPUT REPORT\n         B     J0011                    . TERMINATE\nJ0006    EQU   *                        . RETURN CODE EIGHT PROCESSING\n         LA    R7,RC8MSG                . 7 -> SPECIFIC MESSAGE\n         BAS   R10,REPORT               . OUTPUT REPORT\n         B     J0011                    . TERMINATE\nJ0007    EQU   *                        . RETURN CODE TWELVE PROCESSING\n         LA    R7,RC12MSG               . 7 -> SPECIFIC MESSAGE\n         BAS   R10,REPORT               . OUTPUT REPORT\n         B     J0011                    . TERMINATE\nJ0008    EQU   *                        . QSAM EODAD ADDRESS\n         DROP  R5                       . DCB DSECT NOT REQUIRED\n         MVC   DMAL(8),OPEN2L           . DMA LIST FOR TWO FILES\n         CLOSE ((R4),,(R5)),            . CLOSE VSAM AND QSAM          C\n               MF=(E,DMAL)\n         FREEPOOL (R5)                  . FREE QSAM BUFFER POOL\n         L     R10,JSAVE                . RESTORE 10\n         BR    R10                      . EXIT\nJ0009    EQU   *                        . QSAM DCB OPEN FAIL\n         WTO   MF=(E,WTO11L)            . OUTPUT MESSAGE\n         LA    R3,DYNLEN                . 3 - DYNAMIC AREA LENGTH\n         LR    R2,R13                   . 2 -> DYNAMIC AREA\n         L     R13,4(,R13)              . 13 -> CALLER'S SAVE AREA\n         FREEMAIN RU,                   . RELEASE STORAGE              C\n               A=(R2),                                                 C\n               LV=(R3)\n         L     R14,12(,R13)             . RESTORE 14\n         LA    R15,10                   . 15 - RETURN CODE\n         LM    R0,R12,20(R13)           . RESTORE 0 THRU 12\n         BR    R14                      . RETURN\nJ0010    EQU   *                        . VSAM OPEN ERROR\n         ST    R15,REG15                . SAVE 15\n         WTO   MF=(E,WTO7L)             . OUTPUT MESSAGE\n         LA    R3,VSAMERC               . 3 -> ACB ERROR FIELD\n         SHOWCB ACB=(R4),               . DETERMINE ACB ERROR VALUE    C\n               AREA=(R3),                                              C\n               FIELDS=ERROR,                                           C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         LM    R2,R3,VSAMERR            . 2 AND 3 DATA FIELDS\n         ABEND 103,                     . ABEND TASK                   C\n               DUMP\nJ0011    EQU   *                        . VSAM PUT ERROR\n         WTO   MF=(E,WTO15L)            . OUTPUT MESSAGE\n         L     R2,@RPL                  . 2 -> RPL\n         LA    R3,VSAMERC               . 3 -> RPL FEED BACK AREA\n         SHOWCB RPL=(R2),               . DETERMINE RPL FEED BACK CODE C\n               AREA=(R3),                                              C\n               FIELDS=FDBK,                                            C\n               LENGTH=4,                                               C\n               MF=(G,(R9))\n         LM    R2,R3,VSAMERR            . 2 AND 3 DATA FIELDS\n         ABEND 103,                     . ABEND TASK                   C\n               DUMP\n         TITLE 'CODE CONTROLLING OUTPUT OF REPORT'\n*        1.    CHECK IF HEADINGS REQUIRED\n*        2.    IF HEADINGS REQUIRED,\n*              OUTPUT HEADING LINE,\n*              IF FIRST TIME, OUTPUT DATASET INFORMATION DETAIL\n*        3.    OUTPUT REPORT DETAIL\n*\n*        REGISTER USAGE\n*        2                              . -> OUTPUT RECORD\n*        3                              . -> SYSOUT DCB\n*        7                              . -> REPORT MESSAGE\n*        10                             . RETURN\n         SPACE 1\nREPORT   EQU   *\n         LA    R2,OUTLINE               . 2 -> OUTPUT RECORD AREA\n         LA    R3,DCB2                  . 3 -> SYSOUT DCB\n         CP    #LINE,=P'+58'            . Q. HEADING REQUIRED?\n         BL    K0001                    . A. NO\n         MVC   OUTLINE,HEAD1            . MOVE HEADING DETAIL\n*                                       . OUTPUT PAGE NUMBER\n         MVC   OUTLINE+PAGEOUT+4(L'MASK5),MASK5\n         AP    #PAGE,=P'+1'\n         ED    OUTLINE+PAGEOUT+4(L'MASK5),#PAGE\n         PUT   (R3),                    . OUTPUT HEADING LINE          C\n               (R2)\n         ZAP   #LINE,=P'+1'             . RESET LINE COUNTER\n         MVI   OUTLINE,C'0'             . INITIALIZE OUTPUT RECORD\n         MVI   OUTLINE+1,C' '\n         MVC   OUTLINE+2(L'OUTLINE-2),OUTLINE+1\n         CLI   FIRST,ON                 . Q. FIRST TIME THROUGH?\n         BNE   K0001                    . A. NO\n         MVI   FIRST,OFF                . INDICATE NOT FIRST TIME\n         MVC   OUTMSG,QSAMMSG           . FORMAT QSAM DETAIL\n         MVC   OUTLRW(44),QSAMDSN       . MOVE DSNAME\n         PUT   (R3),                    . OUTPUT QSAM DETAIL           C\n               (R2)\n         MVC   OUTMSG,VSAMMSG           . FORMAT VSAM DETAIL\n         MVC   OUTLRW(44),VSAMDSN       . MOVE DSNAME\n         PUT   (R3),                    . OUTPUT VSAM DETAIL           C\n               (R2)\n         MVI   OUTLINE,C'0'             . INITIALIZE OUTPUT RECORD\n         MVI   OUTLINE+1,C' '\n         MVC   OUTLINE+2(L'OUTLINE-2),OUTLINE+1\n         AP    #LINE,=P'+4'             . INCREMENT LINE COUNTER\nK0001    EQU   *\n         MVC   OUTMSG,0(R7)             . MOVE MESSAGE\n         MVC   OUTLRW,=C'LAST RECORD WRITTEN'\n         MVC   RECOUT,MASK9             . MOVE RECORD NUMBER\n         ED    RECOUT,#RECREAD\n         PUT   (R3),                    . OUTPUT REPORT DETAIL         C\n               (R2)\n         AP    #LINE,=P'+1'             . INCREMENT LINE COUNTER\n         MVI   OUTLINE,C' '             . INITIALIZE OUTPUT RECORD\n         BR    R10                      . EXIT\n         TITLE 'OPEN EXIT FOR QSAM'\n*        1.    SAVE RECORD FORMAT\n*        2.    IF NUMBER OF BUFFERS LESS THAN 10, CHANGE TO TEN\n*        3.    IF VARIABLE\n*              A.  ZAP LRECL TO VSAM MAXIMUM RECORD PLUS FOUR\n*              B.  IF SPANNED AND LOGICAL RECORD INTERFACE NOT\n*                  ENABLED, ENABLE LOGICAL RECORD INTERFACE\n*              C.  IF BLOCKSIZE NOT SPECIFIED, ZAP TO LRECL PLUS FOUR\n*        3.    IF FIXED\n*              A.  ZAP LRECL TO VSAM MAXIMUM RECORD\n*              B.  IF BLOCKSIZE NOT SPECIFIED, ZAP TO LRECL VALUE\n*\n*        REGISTER USAGE\n*        3                              . WORK\n*        5                              . -> QSAM DCB\n*        14                             . RETURN\n         SPACE 1\nOPENEXIT EQU   *\n         USING IHADCB,R5                . DCB DSECT ADDRESSABILITY\n         MVI   BLKSIZE,OFF              . INITIALIZE BLOCKSIZE FLAG\n         MVC   RECFM,DCBRECFM           . SAVE RECORD FORMAT\n         CLI   QSAMBUFF,ON              . Q. QSAM BUFFERS TOO LOW?\n         BNE   O0001                    . A. NO\n         MVI   DCBBUFNO,X'32'           . DEFAULT TO BUFNO=50\nO0001    EQU   *\n         TM    DCBRECFM,DCBRECV         . Q. VARIABLE FORMAT?\n         BNO   O0003                    . A. NO\n         L     R3,LRECL                 . 3 - MAXIMUM RECORD LENGTH\n         AH    R3,=H'+4'                . INCREMENT BY FOUR\n         STH   R3,DCBLRECL              . SAVE IN RECORD LENGTH\n         TM    DCBRECFM,DCBRECSB        . Q. SPANNED RECORDS?\n         BNO   O0002                    . A. NO\n         TM    DCBBFTEK,DCBBFTA         . Q. BFTEK=A SPECIFIED?\n         BO    O0002                    . A. YES\n         OI    DCBBFTEK,DCBBFTA         . ENABLE BFTEK=A\nO0002    EQU   *\n         CLC   DCBBLKSI,=H'+0'          . Q. BLOCKSIZE ZERO?\n         BNER  R14                      . A. NO - EXIT\n         AH    R3,=H'+4'                . INCREMENT LRECL BY FOUR\n         STH   R3,DCBBLKSI              . SAVE AS BLOCKSIZE\n         MVI   BLKSIZE,ON               . SET BLOCKSIZE FLAG ON\n         BR    R14                      . EXIT\nO0003    EQU   *\n         CLI   DCBRECFM,DCBRECF         . Q. FIXED FORMAT?\n         BNER  R14                      . A. NO - EXIT\n         L     R3,LRECL                 . 3 - LOGICAL RECORD LENGTH\n         STH   R3,DCBLRECL              . SAVE AS RECORD LENGTH\n         CLC   DCBBLKSI,=H'+0'          . Q. BLOCKSIZE ZERO?\n         BNER  R14                      . A. NO - EXIT\n         STH   R3,DCBBLKSI              . SAVE LRECL AS BLOCKSIZE\n         MVI   BLKSIZE,ON               . SET BLOCKSIZE FLAG ON\n         BR    R14                      . EXIT\n         TITLE 'DUMMY SECTIONS'\nDYNAREA  DSECT                          . DYNAMIC AREA\n         DS    18F                      . STANDARD OS SAVE AREA\n@ACB     DS    F                        . -> ACB\n@EXIT    DS    F                        . -> EXIT LIST\n@IDCAMS  DS    F                        . -> IDCAMS ENTRY POINT\n@KEY     DS    F                        . -> KEY AREA\n@RECI    DS    F                        . -> INPUT RECORD\n@RPL     DS    F                        . -> RPL\n@TIOT    DS    F                        . -> TIOT\n#KEY     DS    F                        . LENGTH OF KEY\n#REC     DS    F                        . LENGTH OF MAXIMUM RECORD\nDCBEXIT  DS    F                        . DCB EXIT\nDMAL     DS    2F                       . DATA MANAGEMENT ADDRESS LIST\nFSAVE    DS    F                        . REGISTER SAVE AREA\nJSAVE    DS    F                        . REGISTER SAVE AREA\nIDCAMSP  DS    0F                       . IDCAMS PARAMETER LIST\n@OPTION  DS    F                        . -> OPTION\n@DNAMEL  DS    F                        . -> DDNAME LIST\nLRECL    DS    F                        . RECORD LENGTH\nRECLEN   DS    F                        . RECORD LENGTH\nRPLFDBK  DS    F                        . RPL FEED BACK\nVSAMERR  DS    0F                       . VSAM ERROR FIELDS\nREG15    DS    F                        . REGISTER 15 SAVE\nVSAMERC  DS    F                        . ACB ERROR CODE / RPL FEED BK\n#LINE    DS    PL2                      . NUMBER OF REPORT LINES\n#PAGE    DS    PL3                      . NUMBER OF REPORT PAGES\n#RECREAD DS    PL5                      . NUMBER OF RECORDS READ\n#RECWRIT DS    PL5                      . NUMBER OF RECORDS WRITTEN\nBLKSIZE  DS    CL1                      . BLOCKSIZE SPECIFICATION FLAG\n         DS    0F\nDCB1     DS    CL(LQSAMDCB)             . DYNAMIC DCB FOR QSAM\n         DS    0F\nDCB2     DS    CL(LSYSDCB)              . DYNAMIC DCB FOR SYSOUT\nDDNAME   DS    CL1                      . DDNAME FLAG\nERROR    DS    CL1                      . ERROR FLAG\n         DS    0F\nEXTRACT  DS    CL(LEXTRACT)             . EXTRACT MACRO PARAMETER LIST\nFIRST    DS    CL1                      . REPORT FIRST TIME FLAG\n         DS    0F\n         IEFJFCBN                       . JFCB MAPPING\nOBJ      DS    CL1                      . VSAM OBJECT FLAG\n         DS    0F\nOUTLINE  DS    0CL121                   . REPORT RECORD\n         DS    CL14\nOUTMSG   DS    CL60\n         DS    CL3\nOUTLRW   DS    CL19\nRECOUT   DS    CL10\n         DS    CL15\n         DS    0H\nPARM     DS    CL1                      . JOB STEP PARAMETER FLAG\nQSAMBUFF DS    CL1                      . QSAM BUFFER SPEC FLAG\nQSAMDSN  DS    CL44                     . QSAM DSNAME\nRECFM    DS    CL1                      . QSAM RECORD FORMAT FLAG\nVSAMBUFF DS    CL1                      . VSAM BUFFER SPEC FLAG\nVSAMDSN  DS    CL44                     . VSAM DSNAME\nDYNLEN   EQU   *-DYNAREA                . LENGTH OF DYNAMIC AREA\n         SPACE 2\n         DCBD  DEVD=DA,                 . DSECT MAPPING DCB            C\n               DSORG=PS\n         SPACE 2\nIEFTIOT1 DSECT                          . DSECT MAPPING TIOT\n         IEFTIOT1\n         SPACE 2\n         IFGACB                         . DSECT MAPPING ACB\n         TITLE 'LIST FORM MACROS AND FORM DCBS'\nSYZREORG CSECT\n         SPACE 1\nEXTRACTL EXTRACT ,                      . EXTRACT TIOT ADDRESS         C\n               'S',                                                    C\n               FIELDS=TIOT,                                            C\n               MF=L\nLEXTRACT EQU   *-EXTRACTL               . EXTRACT LENGTH\n         SPACE 1\nOPEN1L   OPEN  (,),                     . OPEN / CLOSE ONE FILE        C\n               MF=L\nOPEN2L   OPEN  (,,,),                   . OPEN / CLOSE TWO FILES       C\n               MF=L\n         SPACE 1\nRDJFCBL  RDJFCB (DUMDCB),               . READ JFCB                    C\n               MF=L\n         SPACE 1\n*                                       . WRITE TO OPERATOR MESSAGES\n         SPACE 1\nWTO1L    WTO   'INVALID JOB STEP PARAMETER',                           C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO2L    WTO   'VSAM DDNAME MISSING',                                  C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO3L    WTO   'QSAM DDNAME MISSING',                                  C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO4L    WTO   'AMSIN DDNAME MISSING',                                 C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO5L    WTO   'READ JOB FILE CONTROL BLOCK FAILED',                   C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO6L    WTO   'VSAM CANNOT BE UNLOADED - NO RECORDS',                 C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO7L    WTO   'OPEN FAILURE FOR VSAM',                                C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO8L    WTO   'OPEN FAILURE FOR SYSPRINT',                            C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO9L    WTO   'SERIOUS ERROR ON VSAM OBJECT',                         C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO10L   WTO   'NO BLOCK SIZE SPECIFIED, INEFFICIENT SINGLE RECORD BLOCC\n               KING USED',                                             C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO11L   WTO   'OPEN FAILURE FOR QSAM',                                C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO12L   WTO   'RECORD FORMAT U NOT PERMITTED FOR OUTPUT QSAM',        C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO13L   WTO   'GET FAILURE FOR VSAM',                                 C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO14L   WTO   'IDCAMS EXECUTED WITH A CONDITION CODE > 4',            C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO15L   WTO   'PUT FAILURE FOR VSAM',                                 C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO16L   WTO   'DATASET REORG BYPASSED, CI AND CA SPLITS BELOW MINIMUM C\n               THRESHOLDS',                                            C\n               ROUTCDE=11,                                             C\n               MF=L\nWTO17L   WTO   'VSAM DD POINTS TO LINEAR DATASET, PROCESSING ENDED',   C\n               ROUTCDE=11,                                             C\n               MF=L\n         SPACE 2\nDUMDCB   DCB   DDNAME=VSAM,             . DUMMY DCB FOR RDJFCB         C\n               DSORG=PS,                                               C\n               MACRF=GM\nLDUMDCB  EQU   *-DUMDCB                 . DCB LENGTH\n         SPACE 1\nQSAMDCB  DCB   DDNAME=QSAM,             . \"FORM\" DCB FOR QSAM          C\n               DSORG=PS,                                               C\n               EODAD=J0008,                                            C\n               MACRF=PL\nLQSAMDCB EQU   *-QSAMDCB                . DCB LENGTH\n         SPACE 1\nSYSDCB   DCB   BLKSIZE=11374,           . \"FORM\" DCB FOR SYSOUT        C\n               DDNAME=SYSOUT,                                          C\n               DSORG=PS,                                               C\n               LRECL=121,                                              C\n               MACRF=PM,                                               C\n               RECFM=ABF\nLSYSDCB  EQU   *-SYSDCB                 . DCB LENGTH\n         TITLE 'CONSTANTS, EDIT MASKS, REPORT LINES ...'\nDNAMEL   DC    Y(LDNAMEL)               . IDCAMS DDNAME LIST\n         DC    8X'00'\n         DC    8X'00'\n         DC    8X'00'\n         DC    8X'00'\n         DC    CL8'AMSIN'\n         DC    CL8'SYSPRINT'\nLDNAMEL  EQU   *-DNAMEL                 . LENGTH OF DDNAME LIST\n         SPACE 1\nNULL     DC    H'+0'                    . NULL PARAMETER\n         SPACE 1\nIDCAMS   DC    CL8'IDCAMS'              . IDCAMS PROGRAM NAME\n         SPACE 1\nMASK5    DC    XL6'402020202120'        . EDIT MASK\nMASK9    DC    XL10'40202020202020202120'\n         SPACE 1\nHEAD1    DC    CL105'1                   VSAM UNLOAD AND / OR LOAD PROGC\n               RAM                                                PAGE'\nPAGEOUT  EQU   *-HEAD1\n         DC    CL16' '\n         SPACE 1\n*                                       . REPORT MESSAGES\n         SPACE 1\nLOADMSG  DC    CL60'VSAM OBJECT SUCCESSFULLY LOADED'\nQSAMMSG  DC    CL60'QSAM FILE PROCESSED'\nRC0MSG   DC    CL60'SECONDARY ALLOCATION OR NEW VOLUME REQUIRED'\n         DC    CL60'DUPLICATE KEY CREATED IN ALTERNATE INDEX'\n         DC    CL60'WRITE BUFFER SUGGESTED'\n         DC    CL60'SEQUENCE SET RECORD CAPACITY PROBLEM - KEYS NOT COMC\n               PRESSING'\n         DC    CL60'RESERVED'\n         DC    CL60'NO BUFFER WRITES PERFORMED'\n         DC    CL60'CONTROL INTERVAL SPLIT INDICATOR DETECTED'\n         DC    CL60'MARK BUFFER INVALID'\nRC4MSG   DC    CL60'RPL ACTIVE FOR ANOTHER REQUEST'\nRC8MSG   DC    CL60'LOGIC ERROR OCCURRED DURING THE PUT OPERATION'\nRC12MSG  DC    CL60'PHYSICAL ERROR OCCURRED DURING THE PUT OPERATION'\nUNLDMSG  DC    CL60'VSAM OBJECT SUCCESSFULLY UNLOADED'\nVSAMMSG  DC    CL60'VSAM OBJECT PROCESSED'\n         SPACE 1\n*                                       . EQUATES\n         SPACE 1\nAMSIN    EQU   X'01'\nESDS     EQU   C'E'\nKSDS     EQU   C'K'\nLDS      EQU   C'L'\nLOAD     EQU   B'00000001'\nOFF      EQU   X'00'\nON       EQU   X'01'\nQSAM     EQU   X'04'\nREORG    EQU   B'00000011'\nRRDS     EQU   C'R'\nUNLOAD   EQU   B'00000010'\nVSAM     EQU   X'02'\n         SPACE 1\n*                                       . LITERAL POOL\n         SPACE 1\n         LTORG\n         END\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL,RENT',COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,BLKSIZE=3509)\n//SYSLMOD DD  DSN=IPO1.LINKLIB(SYZREORG),DISP=SHR\n//REFRESH   EXEC PGM=LINKLLA     *** REFRESH LLA FOR IPO1.LINKLIB ONLY\n//SYSLMOD   DD   DISP=SHR,DSN=IPO1.LINKLIB\n//SYSPRINT  DD   SYSOUT=*\n//*\n//* DIRECTIONS FOR USE\n//* DIRECTIONS FOR USE\n//* DIRECTIONS FOR USE\n//*\n//* UNLOAD, INVOKE IDCAMS, AND RELOAD A KSDS\n//*\n//* THIS PROGRAM WILL UNLOAD, INVOKE IDCAMS, AND RELOAD A\n//* KSDS, OR PERFORM VARIOUS PERMUTATIONS OF THE THREE PROCESSES.\n//* THE PROGRAM PERFORMS BUFFER MODIFICATION. THE PROGRAM ALSO\n//* REPORTS ANY PROBLEMS OCCURRING DURING THE LOAD PROCESS.\n//*\n//* THIS PROGRAM WILL DO ONE OR MORE OF THE FOLLOWING PROCESSES:\n//*\n//*\n//* O      UNLOAD A VSAM OBJECT\n//*\n//* O      INVOKE IDCAMS\n//*\n//* O      LOAD A VSAM OBJECT.\n//*\n//* THE PROCESSES MAY BE COMBINED AS FOLLOWS IN A SINGLE EXECUTION:\n//*\n//* O      ALL THREE - IDCAMS WILL DELETE AND DEFINE THE OBJECT (ON\n//*       THE SAME DASD VOLUME).\n//*\n//* O      THE VSAM OBJECT MAY BE UNLOADED AND IDCAMS. INVOKED\n//*\n//* O      IDCAMS MAY BE INVOKED, AND THE VSAM OBJECT LOADED.\n//*\n//* THE PROGRAM IS CONTROLLED BY A COMBINATION OF DDNAMES\n//* AND A JOB STEP PARAMETER. THE FOLLOWING DDNAMES ARE USED:\n//*\n//* QSAM      -      THIS MUST BE PRESENT, AND MUST HAVE DCB\n//*             INFORMATION.  THE DATASET MAY BE TEMPORARY.\n//*\n//* VSAM      -      THIS MUST BE PRESENT, AND MUST REFER TO A\n//*             VSAM OBJECT.\n//*\n//* SYSOUT      -      THIS MUST BE PRESENT - OUTPUT PROCESS REPORT.\n//*\n//* SYSPRINT      -      THIS MUST BE PRESENT IF IDCAMS IS TO BE\n//*             INVOKED. IT OBEYS IDCAMS REQUIREMENTS FOR\n//*             DCB, IF CODED.\n//*\n//* AMSIN      -      THIS MUST BE PRESENT IF IDCAMS IS TO BE\n//*             INVOKED. IT IS A FILE OF CARD IMAGES CONTAINING\n//*             IDCAMS CONTROL STATEMENTS. NO AMSIN\n//*             DDNAME, NO IDCAMS INVOCATION.\n//*             LRECL=80\n//*\n//* THE FOLLOWING VALUES ARE PERMITTED FOR THE JOB STEP PARAMETER:\n//*\n//* UNLOAD      -      THE VSAM OBJECT IS TO BE UNLOADED TO THE\n//*             QSAM FLAT FILE\n//*\n//* LOAD      -      THE QSAM FLAT FILE IS TO BE LOADED TO THE\n//*             VSAM OBJECT DEFAULT VALUE IF NO PARAMETER IS SPECIFIED\n//*\n//* REORG      -      THE VSAM OBJECT IS UNLOADED TO THE QSAM\n//*             FLAT FILE. IDCAMS IS INVOKED, AND THE VSAM\n//*             OBJECT IS RELOADED. THE AMSIN DDNAME MUST\n//*             BE PRESENT.\n//* ***NOTE****\n//*           -  THE REORG PARAMETER WILL ALSO CAUSE THE CHECKING OF\n//*              CI AND CA SPLITS, THE DEFAULT IS CURRENTLY SET TO 10\n//*              CI SPLITS AND 5 CA SPLITS, IF THE SPLITS ARE LESS THAN\n//*              THESE VALUES, THE REORG IS BYPASSED AND A COND CODE 2\n//*              IS SET.  TO CHANGE VALUES SEARCH FOR '<== MODIFY'\n//*\n//* JCL TO EXECUTE THE PROGRAM\n//*\n//* UNLOAD\n//*\n//* //       EXEC PGM=SYZREORG,PARM=UNLOAD\n//* //QSAM     DD DSN=UNLOAD.DATA,UNIT=3380,\n//* //         VOL=SER=MYDASD,SPACE=(CYL,(20,1),RLSE),\n//* //         DCB=(LRECL=  ,BLKSIZE=   ,RECFM=BFS)\n//* //SYSOUT   DD SYSOUT=*\n//* //VSAM     DD DSN=MY.CLUSTER,DISP=SHR,AMP='BUFND=40'\n//*\n//* UNLOAD AND IDCAMS\n//*\n//* //       EXEC PGM=SYZREORG,PARM=UNLOAD\n//* //AMSIN    DD *,DCB=BLKSIZE=80\n//*  DEL MY.CLUSTER PRG\n//*  DEF CL(                   -\n//*    NAME(MY.CLUSTER)        -\n//*    ...\n//* //QSAM     DD DSN=UNLOAD.DATA,UNIT=3380,\n//* //         VOL=SER=MYDASD,SPACE=(CYL,(20,1),RLSE),\n//* //         DCB=(LRECL=  ,BLKSIZE=   ,RECFM=BFS)\n//* //SYSOUT   DD SYSOUT=*\n//* //SYSPRINT DD SYSOUT=*\n//* //VSAM     DD DSN=MY.CLUSTER,DISP=SHR,AMP='BUFND=40'\n//*\n//* LOAD\n//*\n//* //       EXEC PGM=SYZREORG\n//* //QSAM     DD DSN=UNLOADED.DATA,DISP=OLD\n//* //SYSOUT   DD SYSOUT=*\n//* //VSAM     DD DSN=MY.CLUSTER,DISP=OLD,AMP='BUFND=40'\n//*\n//* LOAD AND IDCAMS\n//*\n//* //       EXEC PGM=SYZREORG,PARM=LOAD\n//* //AMSIN    DD *,DCB=BLKSIZE=80\n//*  DEL MY.CLUSTER PRG\n//*  DEF CL(                   -\n//*    NAME(MY.CLUSTER)        -\n//*    ...\n//* //QSAM     DD DSN=UNLOADED.DATA,DISP=OLD\n//* //SYSOUT   DD SYSOUT=*\n//* //SYSPRINT DD SYSOUT=*\n//* //VSAM     DD DSN=MY.CLUSTER,DISP=OLD,AMP='BUFND=40'\n//*\n//* REORGANIZATION (UNLOAD THEN RELOAD)\n//*\n//* //       EXEC PGM=SYZREORG,PARM=REORG\n//* //AMSIN    DD *,DCB=BLKSIZE=80\n//*  DEL MY.CLUSTER PRG\n//*  DEF CL(                   -\n//*    NAME(MY.CLUSTER)        -\n//*    ...\n//* //QSAM     DD UNIT=3380,VOL=SER=MYDASD,DISP=(,PASS),\n//* //         DCB=(LRECL=  ,BLKSIZE=    ,RECFM=BSV)\n//* //SYSOUT   DD SYSOUT=*\n//* //SYSPRINT DD SYSOUT=*\n//* //VSAM     DD DSN=MY.CLUSTER,DISP=OLD,AMP='BUFND=40'\n//*\n//* IN THE LAST TWO EXAMPLES, THE CLUSTER MUST BE DEFINED ON THE\n//* SAME VOLUME AS IT WAS PRIOR TO THE STEP BEING EXECUTED.\n//*\n//* THE RECORD FORMAT OF THE QSAM FILE MUST BEAR A RESEMBLANCE\n//* TO THE DATA TO BE PROCESSED WITH REGARD TO RECORD FORMAT.\n//* RECORD FORMAT U IS NOT PERMITTED.\n//*\n//* THE LOGICAL RECORD INTERFACE (LRI) IS USED TO PROCESS THE\n//* QSAM FILE. AS A RESULT, THE MAXIMUM LENGTH RECORD IS 32K.\n//*\n//* BECAUSE THE LRI IS USED, IF A VARIABLE SPANNED (RECORD FORMAT\n//* VS) IS SPECIFIED FOR THE QSAM FILE, A DCB SUB-PARAMETER OF\n//* 'BFTEK=A' IS ENABLED AT OPEN EXIT, IF NOT SPECIFIED IN THE JCL.\n//*\n//* THE BUFND IS CHECKED WITH SHOWCB AND IN THE JCL TO BE AT LEAST\n//* 40, IF NOT, THEN IT IS DYNAMICALLY CHANGED TO 40 FOR THE VSAM DD\n//*\n//* THE QSAM DD IS CHECKED TO HAVE A BUFNO OF AT LEAST 50, IF FOUND\n//* TO BE LESS THAN THAT, IT'S UPPED TO 50 X'32' DYNAMICALLY.\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYZYGYE$": {"ttr": 11273, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00<\\x00<\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "SYZYGYB"}, "text": "//TECHBHWE JOB  (450,FMAIN),'BRIAN WESTERMAN',MSGCLASS=H,CLASS=A,\n//   NOTIFY=TECHBHW,REGION=0M,TIME=1440\n//*\n//*\n//*   REFER   $SPBHW.PDS.DATA(TMSGRW)\n//S1LISTT  EXEC PGM=TMSGRW,REGION=2M,TIME=5,COND=(0,NE)\n//TMC      DD DISP=SHR,DSN=SYS3.CA1.TMC\n//TMSRPT   DD DSN=TECHBHW.EJECT.PDS(EJ031899),DISP=SHR\n//TMSOPTNS DD  *\nREPORT49 LOGO=NO\n//OUTPUT   DD DUMMY\n//SYSOUT   DD DUMMY\n//SORTLIB  DD DSN=SYS1.SORTLIB,DISP=SHR\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,(2))\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,(2))\n//SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,(2))\n//SORTWK04 DD UNIT=SYSDA,SPACE=(CYL,(2))\n//SORTWK05 DD UNIT=SYSDA,SPACE=(CYL,(2))\n//SORTWK06 DD UNIT=SYSDA,SPACE=(CYL,(2))\n//SYSIN    DD *\nCONTROL-SECTION\n   SORT VOLSER\n   TITLE 'TAPES AVAILABLE FOR SCRATCH THAT ARE NOT NEW'\n   DEFINE FIRST     CH 'H00000'\n   DEFINE ENDTAPE   CH 'H05000'\n   DEFINE BDAY      PD '99001'\n   DEFINE SCRT      HX '04'\n   DEFINE DELT      HX '02'\n   DEFINE STK       HX '02'\n   DEFINE SILO      HX '01'\n   DEFINE Z         BI '0000'\nPROCESS-SECTION\n  WHEN VOLSER  LT FIRST\n       REJECT\n  WHEN VOLSER  GT ENDTAPE\n       REJECT\n  WHEN BTHDATE GT BDAY\n       REJECT\n  WHEN FLAG1   ON DELT\n       REJECT\n  WHEN FLAG1 ON SCRT AND ROBTY EQ STK\n       LIST\nREPORT-SECTION\n  PRINT VOLSER\n  PRINT ROBTY\n  PRINT CRTDT\n  PRINT EXPDT\n  PRINT CJOB\n  PRINT DSN\n  PRINT VENDOR\n//EJECT   EXEC  PGM=SYZYGYEJ,REGION=8M\n//STEPLIB  DD  DSN=SYS2.TEST.LINKLIB,DISP=SHR\n//TMSGRW  DD  DSN=TECHBHW.EJECT.PDS(EJ031899),DISP=SHR\n//SYSPRINT  DD  SYSOUT=*\n//EJECTCD  DD  DSN=&&EJECT,UNIT=VIO,DISP=(NEW,PASS,DELETE),\n//       SPACE=(CYL,(1,1)),DCB=(RECFM=FB,LRECL=72,BLKSIZE=7200)\n//STKDSN  EXEC PGM=SLUADMIN,PARM=MIXED\n//SLSPRINT DD  SYSOUT=*\n//SLSIN    DD  DSN=&&EJECT,DISP=(OLD,DELETE)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYZYGYEJ": {"ttr": 11275, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\xc5\\x00\\xc5\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 197, "newlines": 197, "modlines": 0, "user": "SYZYGYB"}, "text": "*---------------------------------------------------------------------*\n*                      S Y Z Y G Y E J                                *\n*                                                                     *\n*                                                                     *\n*        THIS PROGRAM EDITS THE OUTPUT LISTING FROM TMSGRW AND MAKES  *\n*        EJECT RECORDS FOR ALUADMIN TO REMOVE TAPES FROM THE SILO.    *\n*        THE INPUT FROM TMSGRW MUST CONTAIN THE VOLSER AND THE ROBTY  *\n*        FIELDS, ANY OTHER FIELDS ARE IGNORED                         *\n*                                                                     *\n*        BRIAN WESTERMAN,  SYZYGY INCORPORATED                        *\n*                                                                     *\n*        //EJECTTP  EXEC PGM=SYZYGYEJ,PARM=NNN  (NUMBER TO EJECT)     *\n*        //STEPLIB  DD - PRIVATE LOADLIB -                            *\n*        //TMSGRW   DD - INPUT TMS VOLSER REPORT -                    *\n*        //EJECTCD  DD - FLAT FILE OF SELECTED TMS TAPES -            *\n*        //SYSPRINT DD - OPTIONAL PRINTED REPORT OF FLAT FILE -       *\n*                                                                     *\n*        NOTES: INPUT FILE COMES IN SORTED BY VOLSER.                 *\n*               IF OUTPUT FILE IS EMPTY, RETURN WITH RC=12            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n         MACRO\n&NAME    MODE   &AMODE=31\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*  SET ADDRESSING MODE.  EITHER 'MODE AMODE=31' OR 'MODE AMODE=24'  *\n.*                                                                   *\n.* NOTES: EXAMPLE - '    MODE AMODE=31  SET ADDREESSING MODE TO 31   *\n.*                  ' -MORE CODE -                                   *\n.*                  '    MODE AMODE=24  SET ADDREESSING MODE TO 24   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n         LCLC   &I\n         GBLA   &B\n&I       SETC   '&SYSNDX'\n         AIF    (&AMODE EQ 31).MOD31\n&NAME    LA     15,RMOD&I\n         BSM    0,15\nRMOD&I   DS     0H\n         AGO    .MEND\n.MOD31   ANOP\n&NAME    L      15,AMOD&I\n         BSM    0,15\nAMOD&I   DC     A(CON&I+X'80000000')\nCON&I    DS     0H\n.MEND    MEND\n         SPACE\nSYZYGYEJ AMODE 31\nSYZYGYEJ RMODE 24\nSYZYGYEJ CSECT\n         SAVE (14,12),,STKETMS_&SYSDATE._&SYSTIME\n         LR   R12,R15\n         USING STKETMS,R12\n         LA    R9,SAVE\n         ST    R13,SAVE+4\n         ST    R9,8(R13)\n         LR    R13,R9\n         SPACE\n*---------------------------------------------------------------------*\n*        HAVE TMS REPORT NOW, SO READ IN LISTING EDIT OUT HEADINGS,   *\n*        ETC, ETC\n*---------------------------------------------------------------------*\n         SPACE\nLETSGO   EQU   *\n         OPEN  (TMSGRW,INPUT,EJECTCD,(OUTPUT),SYSPRINT,(OUTPUT))\n         LA    R9,0                KEEP A TALLY OF STK RECORDS\n         MODE  AMODE=24\n         PUT   EJECTCD,EJREC       PUT INITIAL RECORD\n         MODE  AMODE=31\n         MVC   EJCMD,EJBLANK       CLEAR COMMAND PART OF RECORD\nLOOP2    EQU   *\n         MODE  AMODE=24\n         GET   TMSGRW,TMSREC\n         MODE  AMODE=31\n         LA    R5,5                CHECK 5 NUMBERS\n         LA    R6,TMSVOL           GET VOLSER\n         CLI   0(R6),C'H'          IS FIRST DIGIT AN 'H'?\n         BNE   LOOP2               NO, GET NEXT RECORD\n         LA    R6,1(,R6)           BUMP POINTER\nLOOP3    EQU   *\n         TM    0(R6),X'F0'         IS IT NUMBERIC\n         BNO   LOOP2\n         LA    R6,1(,R6)           BUMP POINTER\n         BCT   R5,LOOP3            CONTINUE CHECKING\n         SPACE\n         CLC   TMSROBTY(2),=C'02'  MAKE SURE IT'S IN THE SILO\n         BE    CONT3A\n         B     LOOP2               NOT IN SILO, GET NEXT RECORD\n         SPACE\nCONT3A   EQU   *\n         MVC   VOLSER(6),TMSVOL    MOVE IN VOLUME SERIAL\n         MVC   EJVOL(6),TMSVOL    MOVE IN VOLUME SERIAL\n         MVC   CDATE(5),TMSCDATE   MOVE IN CDATE\n         MVC   EXPDT(5),TMSEXPDT   MOVE IN EXPDT\n         MVC   CJOBN(8),TMSCJOBN   MOVE IN CREATING JOBNAME\n         MVC   DSN(44),TMSDSN      MOVE IN DSNAME\n         MODE  AMODE=24\n         PUT   SYSPRINT,TMSOREC    MIRROR THE RECORD\n         PUT   EJECTCD,EJREC       WRITE THE EJECT RECORD\nCONT3    EQU   *\n         MODE  AMODE=31\n         LA    R9,1(,R9)           KEEP TALLY\n         B     LOOP2\nEOJ2     MVC   EJVOL,=CL6'XXXXXX'  PUT DUMMY VOLSER IN\n         MVC   EJCOMMA,EJCLOSE     PUT RIGHT PARENTH IN\n         MVC   EJCONT,EJBANK       BLANK OUT REST OF THE COMMAND\n         MODE  AMODE=24\n         PUT   EJECTCD,EJREC       WRITE THE EJECT RECORD\n         MODE  AMODE=31\nEOJ      CLOSE (TMSGRW,,EJECTCD,,SYSPRINT)\n         LTR   R9,R9               DID WE GET ANY RECORDS ??\n         BNZ   ENDIT\n         LA    R15,12              GET A 12\n         ST    R15,RETCODE         STORE IT IN RETURN CODE VARIABLE\nENDIT    EQU   *\n         L     R15,RETCODE\n         L     R13,SAVE+4\n         ST    R15,16(,R13)        PUT IN RETURN CODE\n         LM    R14,R12,12(R13)     RESTORE THE REGS\n         BR    R14\n         SPACE\nTMSGRW   DCB   DSORG=PS,MACRF=GM,DDNAME=TMSGRW,EODAD=EOJ2\n         SPACE\nEJECTCD  DCB   DSORG=PS,MACRF=PM,DDNAME=EJECTCD,RECFM=FBA,LRECL=133,   X\n               BLKSIZE=3990\n         SPACE\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=133,  X\n               BLKSIZE=133\n         SPACE\n*---------------------------------------------------------------------*\n*        DATA AREA FOLLOWS.                                           *\n*---------------------------------------------------------------------*\n         SPACE\n         LTORG\n         SPACE\nSAVE     DC    18F'0'\nRETCODE  DC    F'0'                RETURN CODE\nPRTSW    DC    C'N'\nBLANKS   DC    CL6' '\n         SPACE\nTMSREC   DS    0CL133\n         DC    CL03' '\nTMSVOL   DC    CL06'XXXXXX'        04 - VOLSER\n         DC    CL03' '\nTMSROBTY DC    CL02'XX'            13 - ROBOT FIELD\n         DC    CL06' '\nTMSCDATE DC    CL08'XXXX/XXX'      21 - JULIAN CREATION DATE\n         DC    CL05' '\nTMSEXPDT DC    CL08'XXXX/XXX'      34 - JULIAN EXPDT\n         DC    CL05' '\nTMSCJOBN DC    CL08'XXXXXXXX'      47 - CREATING JOBNAME\n         DC    CL03' '\nTMSDSN   DC    CL44'     '         57 - JULIAN CREATION DATE\n         DC    CL03' '\nTMSSILO  DC    CL08'XXXXXXXX'      56 - IN SILO?\n         DC    CL55' '             FILL OUT RECORD\n         SPACE\nTMSOREC  DS    0CL133\n         DC    CL03' '\nVOLSER   DC    CL06'XXXXXX'        04 - VOLSER\n         DC    CL03' '\nCDATE    DC    CL05'XXXXX'         13 - JULIAN CREATION DATE\n         DC    CL03' '\nEXPDT    DC    CL05'XXXXX'         20 - JULIAN EXPDT\n         DC    CL03' '\nCJOBN    DC    CL08'XXXXX'         29 - CREATING JOBNAME\n         DC    CL03' '\nDSN      DC    CL44'     '         56 - DSN\n         DC    CL16' WILL BE EJECTED'\n         DC    CL55' '             FILL OUT RECORD\n         SPACE\nEJREC    DS    0CL80\nEJCMD    DC    CL14' EJECT VOLSER('\nEJVOL    DC    CL06'XXXXXX'\nEJCOMMA  DC    CL01','\nEJCONT   DC    CL59'       +'\n         SPACE\nEJBLANK  DC    CL14'              '\nEJCLOSE  DC    CL01')'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYZYGYVR": {"ttr": 11524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x01:\\x01:\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 314, "newlines": 314, "modlines": 0, "user": "SYZYGYB"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TALK": {"ttr": 11530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "SYZYGYB"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\n     SET &S1 = Y\n     GOTO FIRST\nDISIT: +\n     SET &S1 = N\nFIRST: +\n     ISPEXEC DISPLAY PANEL(TALKP)\n     IF &LASTCC = 8 THEN GOTO BYE\n     SET &T = &SUBSTR(1:5,&SYSTIME)\n     SE '&STR(&MSG1) (&T)' U(&STR(&UID)),LOGON\n     SET &MSG1 = &STR()\n     IF &STR(&MSG2) EQ &STR() THEN GOTO DISIT\n     SE '&STR(&MSG2) (&T)' U(&STR(&UID)),LOGON\n     SET &MSG2 = &STR()\n     GOTO DISIT\nBYE: +\n     ISPEXEC VPUT (UID) PROFILE\n     END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TALKP": {"ttr": 11532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "SYZYGYB"}, "text": "\n +===>_MSG1                                                          +|<==\n +===>_MSG2                                                          +|<==\n +===>_UID +     +Press%PF3+to%Exit+\n)INIT\n   IF (&S1 = N)\n      .CURSOR = MSG1\n)PROC\n      VER (&UID,NB)\n      VER (&MSG1,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOTAB22": {"ttr": 11534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\\\\\x00\\\\\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "SYZYGYB"}, "text": "//TSOTABL  JOB  (SP,9030,0000000),'WESTERMAN - BOX 3',\n//       CLASS=H,MSGCLASS=S,TIME=30,\n//       NOTIFY=XSPRBWW TYPRUN=HOLD\n//*\n//*--------------------------------------*\n//*    REFER SPJ.MVS.SORCLIB(TSOTABL)    *\n//*--------------------------------------*\n//*\n//STEP01    EXEC ASMFC,PARM.ASM='DECK,NOOBJ'\n//ASM.SYSPRINT  DD SYSOUT=*\n//ASM.SYSPUNCH  DD DSN=&&OBJECT,DISP=(,PASS),UNIT=SC,\n//           DCB=(LRECL=80,BLKSIZE=800,RECFM=FB),SPACE=(CYL,(1,1))\n//SYSUDUMP  DD SYSOUT=*\n//ASM.SYSIN DD *\nTSOTABL  TITLE ' ALCATEL NETWORK TSO DATASETS VOLUME VALIDATION '\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*               REFER SPR.MVS.SORCLIB(TSOTABL)                  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nTSOTABL  CSECT\n*\n*\n         DC    A(ENDTABL)         ADDRESS OF TABLE END\n*\n**********************************************************************\n**                                                                  **\n**                                                                  **\n**       LIST OF TSO HIGH LEVEL NODES AND THE ASSOCIATED            **\n**       APPLICATION CODE. THE TABLE IS IN THE FORMAT               **\n**                                                                  **\n**                                                                  **\n**               XXXXXXXXN                                          **\n**                                                                  **\n**        WHERE   XXXXXXXX IS THE HIGH LEVEL NODE                   **\n**                N        IS THE APPLICATION CODE (AND IS ALSO     **\n**                         THE 4TH CHARACTER OF THE VOLUME NAME     **\n**                                                                  **\n**        THE HIGH LEVEL NODES IN THE TABLE CONTAINS * IN           **\n**        THE ANY CHARACTER TO INDICATE A WILDCARD CHARACTER        **\n**        ANY CHARACTER IS VALID IN A COMPARISON TO A WILDCARD      **\n**        AND IT CAN APPEAR ANY WHERE IN THE NODE. IF A WILDCARD    **\n**        CHARACTER IS USED THEN NO SPECIFIC CHARACTER CAN BE USED  **\n**        IN THE SAME POSITION.                                     **\n**        THE LAST TABLE ENTRY IS ALL '*' AND HAS AN APPLICATION    **\n**        CODE OF 7 WHICH IS WHERE ALL MISC AND UNDEFINED FILES     **\n**        ARE TO BE ALLOCATED.                                      **\n**                                                                  **\n**                                                                  **\n**********************************************************************\n*\nAPLCODES EQU   *\n         DC    C'XAD*****7'                          5\n         DC    C'XAE*****4'                          4\n         DC    C'XAS*****7'                          5\n         DC    C'XBP*****7'                          5\n         DC    C'XCH*****4'                          4\n         DC    C'XCI*****7'                          5\n         DC    C'XCX*****4'                          4\n         DC    C'XDC*****1'                          1\n         DC    C'XE******4'                          4\n         DC    C'XFB*****7'                          5\n         DC    C'XFI*****7'                          5\n         DC    C'XGL*****7'                          5\n         DC    C'XIB*****7'                          5\n         DC    C'XIN*****7'                          5\n         DC    C'XIS*****7'                          5\n         DC    C'XLB*****7'                          5\n         DC    C'XM******7'                          5\n         DC    C'XNS*****7'                          5\n         DC    C'XNT*****7'                          5\n         DC    C'XOA*****7'                          5\n         DC    C'XOF*****7'                          1\n         DC    C'XOP*****1'                          1\n         DC    C'XP******7'                          5\n         DC    C'XQ******7'                          5\n         DC    C'XREF    7'                          5\n         DC    C'XS      0'                          5\n         DC    C'XSA*****7'                          5\n         DC    C'XSI*****7'                          5\n         DC    C'XSO*****7'                          5\n         DC    C'XSP*****0'                          0\n         DC    C'XTN*****4'                          4\nENDTABL  DC    C'********7'\n         END   TSOTABL\n//LINK     EXEC PGM=IEWL,\n//         PARM='LET,LIST,MAP,XREF,RENT,REUS,SIZE=(256K,65K)'\n//SYSLIB   DD DSN=XSPRBWW.VTOC.LOAD,DISP=SHR\n//SYSUT1   DD SPACE=(CYL,(5),,CONTIG),UNIT=SC\n//SYSLIN   DD DSN=&&OBJECT,DISP=(OLD,PASS)\n//SYSLMOD  DD DSN=SYS1.LINKLIB(TSOTABL),DISP=SHR\n//SYSUDUMP DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULX$DOC": {"ttr": 11777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00)\\x00)\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "SYZYGYB"}, "text": " ISPF DISK SPACE INFORMATION PROGRAM            VERSION 1.0    MAY 1985\n\n\n THIS PROGRAM DISPLAYS INFORMATION ABOUT AVAILABLE SPACE ON A DISK\n IN THE FORM OF ISPF PANELS.  INDEXED VTOCS ARE SUPPORTED.\n\n MEMBERS IN DISTRIBUTION LIBRARY:\n\n    ULX$DOC  -  THIS DOCUMENTATION YOU ARE READING\n    ULXL01   -  SOURCE CODE (ASSEMBLER LANGUAGE)\n    ULXO01   -  OBJECT CODE FROM ASSEMBLY OF ULXL01\n    ULXP01   -  PANEL 1\n    ULXP02   -  PANEL 2\n    ULXP03   -  PANEL 3\n    ULXH02   -  HELP FOR PANEL 2\n    ULXM01   -  MESSAGES\n\n TO INSTALL,\n   1) ASSEMBLE AND LINK-EDIT ULXL01 (OR JUST LINK-EDIT ULXO01)\n      INTO ONE OF THE FOLLOWING, AND NAME IT ULXL01.\n         A) A LINKLIST LIBRARY\n         B) LPALIB  (IN WHICH CASE AN IPL WITH CLPA IS REQUIRED)\n         C) ANY LIBRARY THAT IS ALLOCATED TO DDNAME ISPLLIB AT THE TIME\n            ISPF IS ENTERED.\n\n   2) COPY THE PANELS AND THE HELP INTO YOUR PANEL LIBRARY.\n\n   3) COPY THE MESSAGE MEMBER INTO YOUR ISPF MESSAGE LIBRARY.\n\n AT THIS POINT YOU CAN TEST IT USING THE 'DIALOG TEST' FACILITY OF\n ISPF.  FROM THE PRIMARY OPTION MENU, ENTER 7.1 AND THEN WHEN YOU GET\n THE 'INVOKE DIALOG FUNCTION' SELECTION MENU, ENTER 'ULXL01' ON THE\n 'INVOKE PROGRAM' PGM ===> LINE.\n\n IF IT WORKS, YOU CAN ADD IT TO YOUR PRIMARY OPTION MENU OR ONE OF THE\n THE UTILITY MENUS OR ONE OF YOUR OWN MENUS.  I WILL NOT ATTEMPT TO\n EXPLAIN HOW TO DO THAT HERE EXCEPT TO SAY THAT IT INVOLVES ADDING\n A STATEMENT THAT LOOKS LIKE THIS:\n        SPACE,'PGM(ULXL01)'\n TO THE ')PROC' SECTION OF ONE OF YOUR MENUS, AND YOU CAN CHANGE THE\n WORD 'SPACE' TO WHATEVER YOU WANT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXH02": {"ttr": 11779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "SYZYGYB"}, "text": "%TUTORIAL------------------- DISK SPACE INFORMATION ----------------------------\n+\n+  The disk space information panel shows how much space is available\n+  on a specified disk.\n+\n+  Cylinders available --------- The number of cylinders containing no\n+                                used tracks.\n+  Tracks available ------------ The number of unused tracks that are\n+                                in partially used cylinders.\n+  Total tracks available ------ The number of unused tracks including\n+                                all unused cylinders.\n+\n+  Extents of free space ------- An extent is a group of adjacent tracks.\n+                                This is the number of groups of unused\n+                                tracks on the volume.\n+\n+  Largest single extent ------- The largest group of adjacent unused\n+                                tracks.\n+\n+  DSCB's available in VTOC ---- The maximum number of additional data\n+                                sets that this volume can have. The\n+                                number of unused entries in the volume\n+                                table of contents..\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXL01": {"ttr": 11781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x06\\x17\\x06\\x17\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 1559, "newlines": 1559, "modlines": 0, "user": "SYZYGYB"}, "text": "         TITLE '   U L X L 0 1   '\n***********************************************************************\n*                                                                     *\n*        'ULXL01' - AN ISPF DIALOG SERVICES PROGRAM                   *\n*         FOR DISPLAYING AVAILABLE DISK SPACE.                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        DATE WRITTEN. MAY 24 1985.\n*        DATE UPDATED. MAY 24 1985.\n*        ATTRIBUTES. RE-ENTRANT.\n*        REQUIRED PANELS.    ULXP01, ULXP02, ULXP03.\n*        REQUIRED MESSAGES.  ULXM01.\n*        REQUIRED CLISTS.    NONE.\n*        MODULES LOADED. ISPEXEC.\n*        DESCRIPTION.\n*         THIS SPF DIALOG PROGRAM DISPLAYS INFORMATION ABOUT\n*         AVAILABLE SPACE ON A DISK VOLUME, FROM THE FORMAT 5\n*         DSCB'S OR THE VTOC INDEX.\n*\n*         SOME OF THE VARIABLES THAT ARE VDEFINED ARE USED ONLY\n*         FOR DEBUGGING AND DO NOT APPEAR ON THE NORMAL PANEL.\n*         THEY COULD BE ADDED TO THE PANEL FOR DEBUGGING.\n*\n*         THE FIRST 3 CHARACTERS OF THE PANEL NAMES MAY BE\n*         OVERRIDDEN BY PASSING A PARM OF 'PFX=XXX'\n*         WHERE XXX ARE THE 3 NEW CHARACTERS.\n*         THIS ALSO OVERRIDES THE FIRST 3 CHARACTERS\n*         OF THE MESSAGE ID'S.  THE MESSAGE ID'S WITHIN THE\n*         MESSAGE MEMBER MUST CORRESPOND WITH THE MEMBER NAME,\n*         SO IF YOU RENAME A MESSAGE MEMBER YOU MUST CHANGE\n*         THE MESSAGE ID'S WITHIN THAT MEMBER.\n*\n*        LOG OF CHANGES.\n*         NONE.\n*\n         SPACE\nULXL01   START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'ULXL01 '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS\n         LR    R10,R15             LOAD BASE REGISTER\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LR    R2,R1               PARM POINTER\n         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         SPACE 1\n         LR    R0,R1               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SLR   R15,R15             ZERO PAD AND 'FROM' LENGTH\n         MVCL  R0,R14              ZERO IT ALL\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN SAVEAREA\n         ST    R9,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         AGO   .ESTAE1\n***********************************************************************\n*                                                                     *\n*         SET UP ESTAE ENVIRONMENT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         STM   R10,R11,@BASES\n         MVC   ESTAEL(ESTAELL),ESTAEM\n         LA    R8,ESTAEX\n         ESTAE (R8),TERM=YES,PARAM=(R9),MF=(E,ESTAEL)\n         LTR   R15,R15\n         BNZ   EXIT12\n.ESTAE1  ANOP\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         GET OPTIONAL PREFIX FOR PANEL NAMES                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   PFX,=C'ULX'\n         L     R1,0(,R2)\n         LH    R15,0(,R1)          LENGTH OF PARM\n         LTR   R15,R15             IS THERE A PARM\n         BZ    NOPARM              NO, BRANCH\n         CH    R15,=H'4'           LONG ENOUGH FOR PFX=\n         BL    NOPARM              NO\n         CLC   2(4,R1),=C'PFX='    IS IT PFX=\n         BNE   NOPARM              NO\n         SH    R15,=H'4'           GET LENGTH OF PFX\n         BZ    NOPARM              BRANCH IF NULL\n         CH    R15,=H'3'           IS REMAINING LENGTH 3\n         BNE   NOPARM              NO\n         MVC   PFX,6(R1)           YES, CHANGE PANEL AND MESSAGE NAMES\nNOPARM   EQU   *\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         GET ENTRY POINT OF ISPLINK                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPEXEC\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MAKE 'ULXV01' A DEFINED VARIABLE                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXV01)'\n         MVC   VOLUME,=CL6' '\n         LA    R0,VOLUME\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SEE WHAT CONTROL-ERRORS-RETURN DOES                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n*              THIS KEEPS US IN CONTROL IF THE END KEY (PFK3) IS USED\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,ERRORS\n         MVC   ERRORS,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,RETURN\n         MVC   RETURN,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P01 AND WAIT FOR REPLY                        *\n*                                                                     *\n***********************************************************************\n         SPACE\nPAN01    LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP01'\n         MVC   PANEL(3),PFX\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n*              QUESTION: WHAT HAPPENS IF REPLY IS PFK 3?\nERRX01   LTR   R15,R15\n         BZ    OKPAN01\n*        LA    R1,=C'P01FAIL'\n*        LA    R0,7\n*        SVC   93\n         B     EXIT0\nOKPAN01  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         REPEAT DISPLAY IF NOTHING ENTERED                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLC   VOLUME,=CL6' '\n         BE    PAN01\n         MVC   VOLSER,VOLUME\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FIND THE UCB FOR THE SPECIFIED VOLUME                       *\n*                                                                     *\n***********************************************************************\n         SPACE\nREREAD   EQU   *\n         L     R15,16              CVTPTR\n         L     R15,40(,R15)        CVTILK2\n         B     *+8\nFINDLOOP LA    R15,2(,R15)\n         LH    R1,2(,R15)          GET UCB ADDRESS\n         N     R1,=A(X'0000FFFF')  CANCEL EFFECTS OF LEFTMOST BIT\n         BZ    FINDLOOP            IGNORE IF ADDRESS IS ZERO\n         C     R1,=A(X'0000FFFF')  END OF LIST\n         BE    FAILUCB\n         CLI   18(R1),X'20'        DASD\n         BNE   FINDLOOP            NO\n         TM    3(R1),X'80'         ONLINE?\n         BZ    FINDLOOP            NO\n         CLC   28(6,R1),VOLSER     VOLUME MATCH?\n         BNE   FINDLOOP            NO\n         MVC   DEVICE(4),16(R1)    COPY UCBTYPE\n         NI    DEVICE+1,255-X'20'  SET OFF SHARED DASD BIT\n         LA    R14,DEVICES\nDEVLOOP  CLI   0(R14),0\n         BE    DEVUNIT             UNKNOWN DEVICE TYPE\n         CLC   DEVICE(4),0(R14)\n         BE    DEVUNIT\n         LA    R14,12(,R14)\n         B     DEVLOOP\nDEVUNIT  MVC   UNITNAME,4(R14)\n         MVC   CUU,13(R1)\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OBTAIN THE FORMAT-4 DSCB FROM THE VTOC                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,CAMLST\n         MVC   0(16,R1),OBTCAM4\n         LA    R15,F4KEY\n         MVI   0(R15),X'04'\n         MVC   1(43,R15),0(R15)\n         ST    R15,4(,R1)\n         LA    R0,VOLSER\n         ST    R0,8(,R1)\n         LA    R0,F4DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS FORMAT 4 READ OK\n         BNZ   FAILUCB             NO, GO FIND OUT WHY\n         SPACE\n***********************************************************************\n*                                                                     *\n*         INITIAL VALUES FOR READING EXTENTS                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R0,EXTENCE\n         ST    R0,EXTPTR\n         SR    R0,R0\n         ST    R0,EXTCNT\n         ST    R0,BINCALLS\n         ST    R0,BINFIVES\n         XC    LRGEXT,LRGEXT\n         MVI   ORDER,C'L'          ORDERED BY LOCATION\n         MVC   MY99TXDD+6(8),=CL8' '\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CHECK FOR INDEXED VTOC                                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R7,F4DSCB\n         USING F4DSECT,R7\n         MVC   TRKCYL,DS4DEVSZ+2\n         MVC   DSRECF4,DS4DSREC\n         MVC   VTOCE,DS4VTOCE\n         MVC   VTOCI,DS4VTOCI\n         TM    DS4VTOCI,1\n         BO    INDEXED\n         SPACE\n         MVC   CCHHR(4),DS4VTOCE+2\n         MVI   CCHHR+4,2           FMT5'S START WITH RECORD 2\n         DROP  R7\n         SR    R3,R3\n         SR    R4,R4\n         SPACE\n***********************************************************************\n*                                                                     *\n*         NOT INDEXED - READ FORMAT 5 DSCB'S                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nF5OLOOP  LA    R1,CAMLST\n         MVC   0(16,R1),OBTCAM5\n         LA    R15,CCHHR\n         ST    R15,4(,R1)\n         LA    R0,VOLSER\n         ST    R0,8(,R1)\n         LA    R0,F5DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS FORMAT 5 READ OK\n         BNZ   FAILUCB             NO, GO FIND OUT WHY\n         SPACE\n         LA    R0,1\n         A     R0,BINFIVES\n         ST    R0,BINFIVES\n         SPACE\n         LA    R7,F5DSCB\n         USING F5DSECT,R7\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY EXTENTS TO AREA CONTAINING ALL EXTENTS                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   DS5FMTID(90),DS5FMTID+1  ALL 26 IN A ROW\n         LA    R14,DS5AVEXT        POINT TO FIRST OF 26\n         SR    R1,R1               COUNTER\n         L     R15,EXTPTR\n         LA    R0,26               NUMBER OF EXTENTS IN RECORD\n         MVI   DOUBLE+2,0\nF5ILOOP  CLC   0(5,R14),=X'0000000000' NULL ENTRY\n         BE    F5INXT              YES, IGNORE\n         MVC   0(5,R15),0(R14)\n         MVC   DOUBLE(2),2(R14)    CYLS\n         AH    R3,DOUBLE\n         MVC   DOUBLE+3(1),4(R14)  TRKS\n         AH    R4,DOUBLE+2\n         CLC   LRGEXT,2(R14)\n         BNL   *+10\n         MVC   LRGEXT,2(R14)\n         LA    R15,5(,R15)\n         LA    R1,1(,R1)           COUNT\nF5INXT   LA    R14,5(,R14)\n         BCT   R0,F5ILOOP\nF5IDONE  ST    R15,EXTPTR\n         A     R1,EXTCNT           ADD COUNT IN R1\n         ST    R1,EXTCNT            TO TOTAL COUNT\nF5IMORE  MVC   CCHHR,DS5PTRDS      POINT TO NEXT FORMAT5\n         CLC   CCHHR,=X'0000000000' IS THERE ANOTHER?\n         BNE   F5OLOOP             YES, GO READ IT\n         DROP  R7                  F5DSECT\n         MVC   VOLUME,VOLSER\n         ST    R3,BINCYL\n         ST    R4,BINTRK\n         B     HAVEXT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE VOLUME                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nINDEXED  LA    R1,MY99RBP\n         LA    R15,MY99RB\n         ST    R15,0(,R1)\n         OI    0(R1),X'80'\n         XC    0(20,R15),0(R15)\n         MVC   0(3,R15),=X'140140'\n         LA    R14,MY99TUPL\n         ST    R14,8(,R15)\n*\n         LA    R15,MY99TXDD\n         ST    R15,0(,R14)\n         MVC   0(14,R15),=X'0055000100084040404040404040' DALRTDDN\n*\n         LA    R15,MY99TXUN\n         ST    R15,4(,R14)\n         MVC   0(06,R15),=X'001500010003'                 DALUNIT\n         MVC   6(3,R15),CUU\n         SPACE\n         LA    R15,MY99TXVL\n         ST    R15,8(,R14)\n         MVC   0(06,R15),=X'001000010006'                 DALVLSER\n         MVC   6(6,R15),VOLSER\n         SPACE\n         LA    R15,MY99TXST\n         ST    R15,12(,R14)\n         MVC   0(07,R15),=X'00040001000108'               DALSTATS\n         SPACE\n         LA    R15,MY99TXFC\n         ST    R15,16(,R14)\n         MVC   0(04,R15),=X'001C0000'                     DALCLOSE\n         OI    16(R14),X'80'\n         SPACE\n         LA    R1,MY99RBP\n         SVC   99\n         SPACE\n         LTR   R15,R15\n         BNZ   FAILUCB\n         OI    SWA,SWA20           ALLOCATED\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN THE VTOC, TO BUILD A DEB                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R7,DYNDCBW\n         MVC   0(DYNDCBL,R7),DYNDCBM\n         MVC   DDNAM(8,R7),MY99TXDD+6\n         LA    R1,DYNJFCB\n         LA    R15,DYNEXL\n         ST    R1,0(,R15)\n         MVI   0(R15),X'87'\n         STCM  R15,7,EXLST+1(R7)\n         MVI   OPEN,X'80'\n         SPACE\n         RDJFCB ((R7)),MF=(E,OPEN)\n         SPACE\n         LTR   R15,R15\n         BNZ   FAILUCB\n         MVI   DYNJFCB,X'04'\n         MVC   DYNJFCB+1(43),DYNJFCB\n         OI    DYNJFCB+52,X'08'    DO NOT WRITE BACK DURING OPEN\n         MVI   OPEN,X'80'\n         OPEN  ((R7),INPUT),TYPE=J,MF=(E,OPEN)\n         OI    SWA,SWA10           OPENED\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE CVAFDSM TO GET NUMBER OF DSCBS AVAILABLE              *\n*                                                                     *\n***********************************************************************\n         SPACE\n         L     R7,DEBAD(,R7)\n         MVC   CVAFDSM(CVAFDSML),CVAFDSMM\n         CVAFDSM ACCESS=MAPDATA,MAP=VTOC,COUNT=YES,CTAREA=CTAREA,      +\n               DEB=(R7),                                               +\n               MAPRCDS=NO,IOAREA=NOKEEP,BRANCH=NO,MF=(E,CVAFDSM)\n         LA    R7,DYNDCBW\n         ST    R15,CVAFDSRC\n         SR    R14,R14\n         IC    R14,CVAFDSM+7\n         ST    R14,CVAFDSST\n         LTR   R15,R15\n         BZ    OKCTAREA\n         XC    CTAREA,CTAREA\nOKCTAREA EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SET UP EXTENT VARIABLES FOR FIRST CALL                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         XC    EXTENTS+1(2),EXTENTS+1\n         SR    R3,R3\n         SR    R4,R4\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE CVAFDSM                                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n*             NOTE: THE INTEGRITY OF THE MAP RECORDS READ IS MAINTAINED\n*             ONLY IF THE VTOC IS ENQUEUED AND THE VOLUME IS RESERVED.\n*             THIS PROGRAM CANNOT DO THAT BECAUSE IT IS UNAUTHORIZED.\n         SPACE\nCVAFLOOP L     R7,DEBAD(,R7)\n         MVC   CVAFDSM(CVAFDSML),CVAFDSMM\n         MVI   EXTENTS,255\n         LA    R0,1\n         A     R0,BINCALLS\n         ST    R0,BINCALLS\n         CVAFDSM ACCESS=MAPDATA,MAP=VOLUME,COUNT=NO,EXTENTS=EXTENTS,   +\n               DEB=(R7),                                               +\n               MAPRCDS=NO,IOAREA=NOKEEP,BRANCH=NO,MF=(E,CVAFDSM)\n         LA    R7,DYNDCBW\n         ST    R15,CVAFRC\n         SR    R14,R14\n         IC    R14,7(,R1)          CVSTAT\n         ST    R14,BINSTAT         SAVE CVSTAT\n         LTR   R15,R15\n         BZ    OKEXTEN\n         CH    R15,=H'4'\n         BNE   CVAFERR1\n         CLI   7(R1),32\n         BNE   CVAFERR1\nOKEXTEN  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY EXTENTS TO AREA CONTAINING ALL EXTENTS                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R14,EXTENTS+1\n         SR    R1,R1               COUNTER\n         L     R15,EXTPTR\n         SR    R0,R0\n         IC    R0,EXTENTS          NUMBER OF EXTENTS REQUESTED\n         MVI   DOUBLE+2,0\nEXTLOOP  CR    R1,R0               HAVE WE GOT THEM ALL\n         BE    EXTDONE             YES, BRANCH\n         CLC   0(5,R14),=X'0000000000' END OF DATA\n         BE    EXTEOD\n         MVC   0(5,R15),0(R14)\n         MVC   DOUBLE(2),2(R14)    CYLS\n         AH    R3,DOUBLE\n         MVC   DOUBLE+3(1),4(R14)  TRKS\n         AH    R4,DOUBLE+2\n         CLC   LRGEXT,2(R14)\n         BNL   *+10\n         MVC   LRGEXT,2(R14)\n         LA    R15,5(,R15)\n         LA    R1,1(,R1)\n         LA    R14,5(,R14)\n         B     EXTLOOP\nEXTEOD   ST    R15,EXTPTR\n         A     R1,EXTCNT\n         ST    R1,EXTCNT\n         CLI   CVAFRC+3,4\n         BE    EXTGOT\n         B     CVAFERR2            RC 0 BUT NULL EXTENT FOUND\nEXTDONE  ST    R15,EXTPTR\n         A     R1,EXTCNT\n         ST    R1,EXTCNT\n         CLI   CVAFRC+3,0\n         BNE   CVAFERR3            RC 4-32 BUT NO NULL EXTENT\nEXTMORE  SH    R15,=H'5'           POINT TO LAST EXTENT PROCESSED\n         MVC   EXTENTS+1(2),0(R15) SET BEGINNING RTA FOR NEXT REQUEST\n         B     CVAFLOOP\nEXTGOT   ST    R3,BINCYL\n         ST    R4,BINTRK\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CLOSE AND UNALLOCATE                                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R8,DYNCLOSX\nDYNCLOSE TM    SWA,SWA20           ALLOCATED\n         BZR   R8                  NO, SKIP CLOSE-AND-UNALLOCATE\n         MVI   CLOSE,X'80'\n         CLOSE ((R7)),MF=(E,CLOSE)\n         NI    SWA,255-SWA20\n         NI    SWA,255-SWA10\n         BR    R8\nDYNCLOSX EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MAKE MORE DEFINED VARIABLES                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nHAVEXT   TM    SWA,SWA80           BEEN HERE BEFORE?\n         BO    DEFINED             YES, BYPASS\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXV02)'\n         LA    R0,WRKNEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXOPT)'\n         LA    R0,WRKOPT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'1'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXUNIT)'\n         LA    R0,WRKUNIT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXCYL)'\n         LA    R0,WRKCYL\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTRK)'\n         LA    R0,WRKTRK\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXEXT)'\n         LA    R0,WRKEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLRGC)'\n         LA    R0,WRKLRGC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLRGT)'\n         LA    R0,WRKLRGT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXATOT)'\n         LA    R0,WRKATOT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLTOT)'\n         LA    R0,WRKLTOT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTPC)'\n         LA    R0,WRKTPC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSREC)'\n         LA    R0,WRKDSREC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSROS)'\n         LA    R0,WRKDSROS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSRIX)'\n         LA    R0,WRKDSRIX\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXNOTE)'\n         LA    R0,WRKNOTE\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'60'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSMRC)'\n         LA    R0,WRKDSMRC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXSTAT)'\n         LA    R0,WRKSTAT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDDNAM)'\n         LA    R0,WRKDDNAM\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXCALLS)'\n         LA    R0,WRKCALLS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXFIVES)'\n         LA    R0,WRKFIVES\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTRACS)'\n         LA    R0,WRKTRACS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXVTOC1)'\n         LA    R0,WRKVTOCE+4\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXVTOC2)'\n         LA    R0,WRKVTOCE+12\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         OI    SWA,SWA80\nDEFINED  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MOVE DATA FROM MESSAGE AREA TO DEFINED FIELDS               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VOLUME,VOLSER\n         MVC   WRKUNIT,UNITNAME\n         MVC   WRKDDNAM,MY99TXDD+6\n         MVI   WRKNOTE,C' '\n         MVC   WRKNOTE+1(L'WRKNOTE-1),WRKNOTE\n         SPACE\n         LH    R1,DSRECF4\n         BAL   R8,LJ7\n         MVC   WRKDSREC,WORK\n         MVC   WRKDSROS,WORK\n         MVC   WRKDSRIX,=CL7'N/A'\n         TM    VTOCI,1             INDEXED VTOC?\n         BNO   GOTDSCBS            NO\n         L     R15,CVAFDSRC        GET RESULT OF CVAF REQUEST\n         LTR   R15,R15             WAS CVAF SUCCESSFUL\n         BZ    IXVTOC              YES, BRANCH\n         MVC   WRKDSRIX,=CL7'ERR'\n         B     GOTDSCBS            AND SHOW VALUE FROM FORMAT 4\nIXVTOC   L     R1,CTAREA           YES, GET AVAILABLE DSCB'S\n         BAL   R8,LJ7\n         MVC   WRKDSREC,WORK\n         MVC   WRKDSRIX,WORK\nGOTDSCBS EQU   *\n         SPACE\n         L     R1,BINTRK\n         BAL   R8,LJ7\n         MVC   WRKTRK,WORK\n         SPACE\n         L     R1,BINCYL\n         BAL   R8,LJ7\n         MVC   WRKCYL,WORK\n         SPACE\n         L     R1,EXTCNT\n         BAL   R8,LJ7\n         MVC   WRKEXT,WORK\n         SPACE\n         LH    R1,LRGEXT\n         BAL   R8,LJ7\n         MVC   WRKLRGC,WORK\n         SPACE\n         SR    R1,R1\n         IC    R1,LRGEXT+2\n         BAL   R8,LJ7\n         MVC   WRKLRGT,WORK\n         SPACE\n         L     R1,BINCYL\n         MH    R1,TRKCYL\n         A     R1,BINTRK\n         BAL   R8,LJ7\n         MVC   WRKATOT,WORK\n         SPACE\n         LH    R1,LRGEXT\n         MH    R1,TRKCYL\n         SR    R0,R0\n         IC    R0,LRGEXT+2\n         AR    R1,R0\n         BAL   R8,LJ7\n         MVC   WRKLTOT,WORK\n         SPACE\n         L     R1,CVAFRC\n         BAL   R8,LJ7\n         MVC   WRKDSMRC,WORK\n         SPACE\n         L     R1,BINSTAT\n         BAL   R8,LJ7\n         MVC   WRKSTAT,WORK\n         SPACE\n         LH    R1,TRKCYL\n         BAL   R8,LJ7\n         MVC   WRKTPC,WORK\n         SPACE\n         L     R1,BINCALLS\n         BAL   R8,LJ7\n         MVC   WRKCALLS,WORK\n         SPACE\n         L     R1,BINFIVES\n         BAL   R8,LJ7\n         MVC   WRKFIVES,WORK\n         SPACE\n         TM    VTOCI,1             INDEXED\n         BO    NONA                YES, LEAVE CVAF VALUES ALONE\n         MVC   WRKDSMRC,=CL8'N/A'\n         MVC   WRKSTAT,=CL8'N/A'\n         MVC   WRKDDNAM,=CL8'N/A'\nNONA     EQU   *\n         SPACE\n         LA    R1,VTOCE\n         LA    R15,WRKVTOCE\n         LA    R0,10\n         BAL   R14,HEXCVT\n         SPACE\n         MVC   DOUBLE(8),VTOCE+2\n         LH    R14,DOUBLE+2        HH\n         LH    R0,TRKCYL           TRACKS PER CYL\n         LA    R1,1\nCOUNTEM  CLC   DOUBLE,DOUBLE+4\n         BNL   COUNTED\n         LA    R1,1(,R1)           COUNT\n         LA    R14,1(,R14)         ADD 1 TO HH\n         CR    R14,R0              IF BEYOND LAST\n         BNE   NOTLAST                THEN\n         LH    R15,DOUBLE               ADD 1\n         AH    R15,=H'1'                  TO\n         STH   R15,DOUBLE                   CC\n         SR    R14,R14                  ZERO HH\nNOTLAST  STH   R14,DOUBLE+2\n         B     COUNTEM\nCOUNTED  LR    R14,R1\n         BAL   R8,LJ7\n         MVC   WRKTRACS,WORK\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P02 AND WAIT FOR ENTER                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   WRKNEXT,=CL6' '\nPAN02    MVI   WRKOPT,C' '\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP02'\n         MVC   PANEL(3),PFX\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\nERRX02   CLC   WRKNEXT,=CL6' '     ANOTHER VOLUME ENTERED?\n         BE    ERRX02A             NO\n         MVC   VOLSER,WRKNEXT\n         B     REREAD\nERRX02A  EQU   *\n         CH    R15,=H'8'           PF3\n*        BE    PAN01               YES, BACK TO PANEL 1\n         BE    EXIT0               YES, END APPLICATION\n         CLI   WRKOPT,C'L'         LIST REQUESTED\n         BE    LISTEXT             YES\n         CLI   WRKOPT,C'S'         LIST REQUESTED\n         BE    LISTEXT             YES\n         B     PAN02               REPEAT PANEL 2\nLISTEXT  L     R6,EXTCNT       GET NUMBER OF EXTENTS\n         LTR   R6,R6           ARE THERE ANY EXTENTS\n         BZ    ERRZEX          DONE IF NOT\n         C     R6,=F'1'            ONLY ONE EXTENT?\n         BE    SORTED              YES, BYPASS SORT\n         CLI   WRKOPT,C'L'     REQUEST SORT BY LOCATION?\n         BE    SORTL           YES, BRANCH\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SORT EXTENT TABLE IN DESCENDING ORDER BY SIZE               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLI   ORDER,C'S'          ALREADY IN SIZE ORDER\n         BE    SORTED              YES, BRANCH\n         MVI   ORDER,C'S'\n         LA    R7,EXTENCE\n         BCTR  R6,0                NUMBER OF EXTENTS MINUS 1\n         MH    R6,=H'5'            SIZE OF TABLE, MINUS 5 BYTES\n         LA    R8,EXTENCE(R6)      POINT TO LAST ENTRY IN TABLE\nSORTO    SR    R0,R0\n         LA    R7,EXTENCE\nSORTI    CLC   2(3,R7),7(R7)\n         BNL   SORT2\n         XC    0(5,R7),5(R7)       SWAP\n         XC    5(5,R7),0(R7)        SWAP\n         XC    0(5,R7),5(R7)         SWAP\n         BCTR  R0,0                A SWAP TOOK PLACE\nSORT2    LA    R7,5(,R7)           NEXT PAIR\n         CR    R7,R8               IS THIS THE LAST ONE?\n         BL    SORTI               NO, LOOP\n         LTR   R0,R0               ANY SWAPS DURING THAT PASS?\n         BZ    SORTED              NO, WE ARE DONE\n         B     SORTO\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SORT EXTENT TABLE IN ASCENDING ORDER BY LOCATION            *\n*                                                                     *\n***********************************************************************\n         SPACE\nSORTL    CLI   ORDER,C'L'          ALREADY IN LOCATION ORDER\n         BE    SORTED              YES, BRANCH\n         MVI   ORDER,C'L'\n         LA    R7,EXTENCE\n         BCTR  R6,0                NUMBER OF EXTENTS MINUS 1\n         MH    R6,=H'5'            SIZE OF TABLE, MINUS 5 BYTES\n         LA    R8,EXTENCE(R6)      POINT TO LAST ENTRY IN TABLE\nSORTLO   SR    R0,R0\n         LA    R7,EXTENCE\nSORTLI   CLC   0(2,R7),5(R7)\n         BNH   SORTL2\n         XC    0(5,R7),5(R7)       SWAP\n         XC    5(5,R7),0(R7)        SWAP\n         XC    0(5,R7),5(R7)         SWAP\n         BCTR  R0,0                A SWAP TOOK PLACE\nSORTL2   LA    R7,5(,R7)           NEXT PAIR\n         CR    R7,R8               IS THIS THE LAST ONE?\n         BL    SORTLI              NO, LOOP\n         LTR   R0,R0               ANY SWAPS DURING THAT PASS?\n         BZ    SORTED              NO, WE ARE DONE\n         B     SORTLO\nSORTED   EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CREATE EXTENT TABLE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         TM    SWA,SWA08           BEEN HERE BEFORE?\n         BO    DEFINED2            YES, BYPASS\n         OI    SWA,SWA08\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBS)'   SCROLL VARIABLE\n         LA    R0,TBS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBSEQ)'\n         LA    R0,TBSEQ+1\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBEXT)'\n         LA    R0,TBEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'10'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBCYL)'\n         LA    R0,TBCYL\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBTRA)'\n         LA    R0,TBTRA\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'3'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBTRK)'\n         LA    R0,TBTRK\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBBEG)'\n         LA    R0,TBBEG\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBEND)'\n         LA    R0,TBEND\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\nDEFINED2 EQU   *\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBCREATE'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         MVC   TABLNAME,=CL8'ULXT01'\n         ST    R0,4(,R1)\n         LA    R0,KEYNAMES\n         MVC   KEYNAMES,=CL10'(TBSEQ)'\n         ST    R0,8(,R1)\n         LA    R0,VARNAMES\n         MVC   VARNAMES,=CL37'(TBEXT TBCYL TBTRA TBTRK TBBEG TBEND)'\n         ST    R0,12(,R1)\n         LA    R0,NOWRITE\n         MVC   NOWRITE,=CL8'NOWRITE'\n         ST    R0,16(,R1)\n         LA    R0,REPLACE\n         MVC   REPLACE,=CL8'REPLACE'\n         ST    R0,20(,R1)\n         OI    20(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         CH    R15,=H'4'\n         BH    ERRTC\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FORMAT DATA FOR A ROW OF THE TABLE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n* LOOP TO FORMAT EXTENTS FOR ISPF TABLE\n         L     R7,EXTCNT\n         LA    R6,EXTENCE\n         SR    R5,R5\nNXTROW   A     R5,=F'1'\n         CVD   R5,DOUBLE\n         MVC   TBSEQ,=X'402020202120'\n         ED    TBSEQ,DOUBLE+5\n         SPACE\n         LR    R1,R6\n         LA    R0,5\n         LA    R15,TBEXT\n         BAL   R14,HEXCVT\n         SPACE\n         MVC   DOUBLE(2),2(R6)\n         LH    R1,DOUBLE\n         BAL   R8,RJ7BZ\n         MVC   TBCYL,WORK+3\n         SPACE\n         SR    R1,R1\n         IC    R1,4(,R6)\n         BAL   R8,RJ7BZ\n         MVC   TBTRA,WORK+5\n         SPACE\n         MVC   DOUBLE(2),2(R6)\n         LH    R1,DOUBLE\n         MH    R1,TRKCYL\n         SR    R0,R0\n         IC    R0,4(,R6)\n         AR    R1,R0\n         ST    R1,BINTK\n         BAL   R8,RJ7BZ\n         MVC   TBTRK,WORK+3\n         SPACE\n         XC    DOUBLE(2),DOUBLE\n         MVC   DOUBLE+2(2),0(R6)\n         SR    R0,R0\n         L     R1,DOUBLE\n         LH    R15,TRKCYL\n         DR    R0,R15\n         STH   R1,BINBEG\n         STH   R0,BINBEG+2\n         SPACE\n         LA    R1,BINBEG\n         LA    R0,4\n         LA    R15,TBBEG\n         BAL   R14,HEXCVT\n         SPACE\n         XC    DOUBLE(2),DOUBLE\n         MVC   DOUBLE+2(2),0(R6)\n         SR    R0,R0\n         L     R1,DOUBLE\n         A     R1,BINTK\n         BCTR  R1,0\n         LH    R15,TRKCYL\n         DR    R0,R15\n         STH   R1,BINEND\n         STH   R0,BINEND+2\n         SPACE\n         LA    R1,BINEND\n         LA    R0,4\n         LA    R15,TBEND\n         BAL   R14,HEXCVT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FILL IN A ROW OF THE TABLE\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBADD'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         MVC   TABLNAME,=CL8'ULXT01'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         CH    R15,=H'4'\n         BH    ERRTA\n         SPACE\n         LA    R6,5(,R6)\n         BCT   R7,NXTROW       REPEAT IF ANY MORE EXTENTS\n         SPACE\n***********************************************************************\n*                                                                     *\n*         POINT CRP (CURRENT ROW POINTER) TO TOP                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBTOP'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P03 AND WAIT FOR END                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nPAN03    LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBDISPL'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         ST    R0,4(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP03'\n         MVC   PANEL(3),PFX\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         LTR   R15,R15\n         BZ    PAN03\n         B     PAN02\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SUBROUTINES\n*                                                                     *\n***********************************************************************\n         SPACE\nLJUST    CLI   WORK,C' '\n         BNER  R8\n         MVC   WORK(7),WORK+1\n         MVI   WORK+7,C' '\n         B     LJUST\n         SPACE\nLJ7      CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  WORK(7),DOUBLE+4(4)\n         LA    R0,6\nLJ7B     CLI   WORK,C'0'\n         BNER  R8\n         MVC   WORK(6),WORK+1\n         MVI   WORK+6,C' '\n         BCT   R0,LJ7B\n         BR    R8\n         SPACE\nRJ7      CVD   R1,DOUBLE\n         MVC   WORK(8),=X'4020202020202120'\n         ED    WORK(8),DOUBLE+4\n         BR    R8\n         SPACE\nRJ7BZ    CVD   R1,DOUBLE\n         MVC   WORK(8),=X'4020202020202020'\n         ED    WORK(8),DOUBLE+4\n         BR    R8\n         SPACE\nHEXCVT   MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEXCVT           DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\n         SPACE\n***********************************************************************\n*                                                                     *\n*         VDEFINE SERVICE\n*                                                                     *\n***********************************************************************\n         SPACE\nVDEFINE  LA    R1,PARAMS\n         ST    R0,8(,R1)           STORE ADDRESS OF FIELD\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VDEFINE'\n         ST    R0,0(,R1)\n         LA    R0,VDEFNAME\n         ST    R0,4(,R1)\n         LA    R0,VDEFFMT\n         ST    R0,12(,R1)\n         LA    R0,VDEFLEN\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         BR    R8\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ERROR ROUTINES\n*                                                                     *\n***********************************************************************\n         SPACE\nFAILUCB  MVC   MSG,=CL8'ULXM011A' NOT MOUNTED\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR1 CLI   CVAFRC+3,4\n         BNE   CVAFERR4\n         CLI   BINSTAT+3,10\n         BNE   CVAFERR4\n         MVC   MSG,=CL8'ULXM012A' NONINDEXED VTOC\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR2 MVC   MSG,=CL8'ULXM012B' ZERO ENTRY BUT RC WAS ZERO\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR3 MVC   MSG,=CL8'ULXM012C' END OF DATA RC BUT NO ZERO ENTRY\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR4 MVC   MSG,=CL8'ULXM012D' UNEXPECTED RC FROM CVAFDSM\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nERRZEX   MVC   MSG,=CL8'ULXM011C' NO EXTENTS\n         B     ERRM01\n         SPACE\nERRTC    MVC   MSG,=CL8'ULXM011D' TBCREATE ERROR\n         B     ERRM01\n         SPACE\nERRTA    MVC   MSG,=CL8'ULXM011E' TBADD ERROR\n         B     ERRM01\n         SPACE\n***********************************************************************\n*                                                                     *\n*         RE-DISPLAY LAST PANEL WITH MESSAGE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nERRM01   LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         ST    R0,4(,R1)\n         LA    R0,MSG\n         MVC   MSG(3),PFX\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         CLI   PANEL+5,C'1'\n         BE    ERRX01\n         B     ERRX02\n         SPACE\n***********************************************************************\n*                                                                     *\n*         RETURN TO CALLER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\nEXIT0    SR    R15,R15             RETURN CODE ZERO\n         B     EXIT\nEXIT12   LA    R15,12              RETURN CODE 12\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         L     R0,ISPEXEC          GET ENTRY POINT OF ISPLINK\n         LTR   R0,R0               WAS IT LOADED\n         BZ    NODEL               NO, BYPASS DELETE\n         DELETE EP=ISPLINK\n         XC    ISPEXEC,ISPEXEC\nNODEL    EQU   *\n         LR    R1,R13              POINT R1 TO AREA TO BE FREED\n         L     R0,@SIZE            SUBPOOL AND LENGTH\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)        RESTORE REGISTERS\n         L     14,12(,R13)         LOAD RETURN ADDRESS\n         BR    14                  RETURN\n         SPACE\n         AGO   .ESTAE2\n         SPACE\n************************************************************\n*                                                          *\n*         ESTAE EXIT                                       *\n*                                                          *\n************************************************************\n         SPACE\nESTAEX   DC    0H'0'\n         USING *,R15\n         CH    R0,ESTAE12\n         BNE   ESTASDWA\n         SPACE\n*              REG 0 IS 12\n*              STORAGE NOT AVAILABLE FOR SDWA\n*              REG  1  -  CONTAINS ABEND COMPLETION CODE\n*              REG  2  -  ADDRESS OF PARAM LIST FROM ESTAE MACRO\n*              REG 14  -  RETURN ADDRESS\n*              REG 15  -  ENTRY ADDRESS\n*              REGS 3-13  UNPREDICTABLE\n         SPACE\n         STM   14,12,ESTAEWSV+12-@DATA(R2)\n         LR    R9,R2               RESTORE R9\n         ST    R1,ESTAEWCC\n         MVI   ESTAEWSW,C'N'\n         B     ESTAEXC\nESTAE12  DC    H'12'\n         SPACE\nESTASDWA EQU   *\n         SPACE\n*              REG  1  -  ADDRESS OF SDWA\n*              REG 13  -  ADDRESS OF 72 BYTE REGISTER SAVE AREA\n*              REG 14  -  RETURN ADDRESS\n*              REG 15  -  ENTRY ADDRESS\n*              REGS 2-12  UNPREDICTABLE\n         SPACE\n         STM   14,12,12(R13)\n         L     R9,0(,R1)           RESTORE R9\n         MVC   ESTAEWCC(4),4(R1)   SAVE ABEND CODE FROM SDWA\n         MVC   ESTAEWPS(8),8(R1)   SAVE PSW FROM SDWA\n         MVC   ESTAEWSV+12(60),12(R13)\n         MVI   ESTAEWSW,C'S'\n         ST    R1,ESTAEWWA         SAVE SDWA ADDRESS\n         SPACE\n*              COMMON TO EITHER TYPE OF ENTRY.\n*              (AS LONG AS YOU DONT REFER TO SDWA)\n         SPACE\n         MVC   MESSAGE(38),=C'ABEND XXXXXXXX BASE XXXXXX PSW XXXXXX '\n         LA    R1,ESTAEWCC\n         LA    R15,MESSAGE+6\n         LA    R0,4\n         BAL   R14,HEXCVT\n         LA    R1,@BASES+1\n         LA    R15,MESSAGE+20\n         LA    R0,3\n         BAL   R14,HEXCVT\n         LA    R1,ESTAEWPS+5\n         LA    R15,MESSAGE+31\n         LA    R0,3\n         BAL   R14,HEXCVT\n         LA    R1,MESSAGE\n         LA    R0,37\n         SVC   93\n         LA    R1,MESSAGE\n         LA    R0,38\n         O     R1,=A(X'80000000')\n         SVC   93\n         SPACE\nESTAEXC  EQU   *\n         LM    R10,R11,@BASES      RESTORE BASE REGISTER\n         DROP  R15                 DROP R15 ENTRY ADDRESS\n         SPACE\nESTAEX00 EQU   *\n         CLI   ESTAEWSW,C'S'       SDWA PRESENT?\n         BNE   ESTANOWA            NO - BRANCH\n         L     R1,ESTAEWWA         YES, RESTORE SDWA ADDRESS\n         MVI   X'FC'(R1),0         SET SDWARCDE = 0\n         LM    14,12,12(13)\n         BR    R14\n         SPACE\nESTANOWA LM    14,12,ESTAEWSV+12\n         SLR   R15,R15             CONTINUE TERMINATION\n         BR    R14\n.ESTAE2  ANOP\n         DROP  R9,R10,R11          DROP ALL\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\nOBTCAM4  CAMLST SEARCH,2,3,4\n         SPACE\nOBTCAM5  CAMLST SEEK,2,3,4\n         SPACE\nCVAFDSMM CVAFDSM MF=L\nCVAFDSML EQU   *-CVAFDSMM\n         SPACE\nDEVICES  DC    X'3050200B',C'3350  ',AL2(30)\n         DC    X'3010200E',C'3380  ',AL2(15)\n         DC    X'3050200D',C'3330-1',AL2(19)\n         DC    X'30502009',C'3330  ',AL2(19)\nDEVMSS   DC    X'30582009',C'3330V ',AL2(19)\n         DC    X'3040200A',C'3340  ',AL2(12)\n         DC    X'30502007',C'2305-2',AL2(08)\n         DC    X'3010200C',C'3375  ',AL2(12)\n         DC    X'00000000',C'?     ',AL2(1)\n         SPACE\nESTAEM   ESTAE 1,MF=L\nESTAELL  EQU   *-ESTAEM\n         SPACE\nNULL     DC    CL44'(NULL)'\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\nDYNDCBM  DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(R),BLKSIZE=140\nDYNDCBL  EQU   *-DYNDCBM\n         DC    0D'0'\n         SPACE\nDDNAM    EQU   40   DCB OFFSET\nEXLST    EQU   36   DCB OFFSET\nDEBAD    EQU   44   DCB OFFSET\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nWORK     DS    CL8                 WORK AREA\nDOUBLE   DS    D                   DOUBLEWORD WORK AREA\nLINKAREA DS    2F                  LINK MACRO WORK AREA\nFLAG     DS    F\n@BASES   DS    3F                  BASE REGISTERS\nISPEXEC  DS    F\nPARAMS   DS    8F\nSERVICE  DS    CL8\nPANEL    DS    CL8\nMSG      DS    CL8\nPFX      DS    CL3\nVDEFNAME DS    CL10\nVDEFFMT  DS    CL8\nVDEFLEN  DS    F\nERRORS   DS    CL8\nRETURN   DS    CL8\nTABLNAME DS    CL8\nKEYNAMES DS    CL10\nVARNAMES DS    CL37\nNOWRITE  DS    CL8\nREPLACE  DS    CL8\nTBS      DS    CL4\nTBSEQ    DS    CL6\nTBEXT    DS    CL10,X\nTBCYL    DS    CL5\nTBTRA    DS    CL3\nTBTRK    DS    CL5\nTBBEG    DS    CL8,X\nTBEND    DS    CL8,X\nCAMLST   DS    4F\nCCHHR    DS    CL5\nVOLUME   DS    CL6\nVOLSER   DS    CL6\nDEVICE   DS    CL4\nUNITNAME DS    CL6\nCUU      DS    CL3\nS78MSG   DS    CL30\nTRKCYL   DS    H\nDSRECF4  DS    H\nWRKNEXT  DS    CL7\nWRKOPT   DS    CL1\nSWA      DS    C\nSWA80    EQU   X'80'\nSWA40    EQU   X'40'\nSWA20    EQU   X'20'\nSWA10    EQU   X'10'\nSWA08    EQU   X'08'\nVTOCE    DS    CL10\nVTOCI    DS    C\nORDER    DS    C\n         DS    0F\nF4KEY    DS    CL44\nF4DSCB   DS    CL140\nF5DSCB   DS    CL140\nWRKUNIT  DS    CL6\nWRKCYL   DS    CL4\nWRKTRK   DS    CL4\nWRKEXT   DS    CL4\nWRKLRGC  DS    CL4\nWRKLRGT  DS    CL4\nWRKATOT  DS    CL7\nWRKLTOT  DS    CL7\nWRKTPC   DS    CL7\nWRKDSREC DS    CL7\nWRKDSROS DS    CL7\nWRKDSRIX DS    CL7\nWRKDSMRC DS    CL7\nWRKSTAT  DS    CL7\nWRKDDNAM DS    CL8\nWRKCALLS DS    CL7\nWRKFIVES DS    CL7\nWRKVTOCE DS    CL21\nWRKTRACS DS    CL4\nWRKNOTE  DS    CL60\nCTAREA   DS    F\nCVAFDSRC DS    F\nCVAFDSST DS    F\nCVAFRC   DS    F\nBINCYL   DS    F\nBINTRK   DS    F\nBINLRGC  DS    F\nBINLRGT  DS    F\nBINSTAT  DS    F\nBINCALLS DS    F\nBINFIVES DS    F\nBINTK    DS    F\nBINBEG   DS    F\nBINEND   DS    F\nOPEN     DS    0F\nCLOSE    DS    F\nDYNDCBW  DS    0F,(DYNDCBL)X\nDYNEXL   DS    F\nCVAFDSM  DS    0F,(CVAFDSML)X\nDYNJFCB  DS    0F,176X\n*\nMY99RBP  DS    F       REQUEST BLOCK POINTER\nMY99RB   DS    5F      REQUEST BLOCK\nMY99TUPL DS    5A      TEXT UNIT POINTERS\nMY99TXDD DS    3H,CL8  RETURN DDNAME\nMY99TXUN DS    3H,CL3  UNIT\nMY99TXVL DS    3H,CL6  VOLSER\nMY99TXST DS    3H,CL1  DISP=SHR\nMY99TXFC DS    2H      FREE=CLOSE\n*\nESTAEL   DS    0F,(ESTAELL)X\nESTAEWSV DS    18F\nESTAEWWA DS    F\nESTAEWCC DS    F\nESTAEWPS DS    2F\nESTAEWSW DS    C\nMESSAGE  DS    CL38\n         DS    0D\nEXTCNT   DS    F\nEXTPTR   DS    F\nLRGEXT   DS    XL3,X\nEXTENTS  DS    X,255CL5\nEXTENCE  DS    2600XL5             100 FORMAT 5'S\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nF4DSECT  DSECT\n*        IECSDSL1 4\nDS4IDFMT DS    CL1\nDS4HPCHR DS    XL5\nDS4DSREC DS    XL2\nDS4HCCHH DS    XL4\nDS4NOATK DS    XL2\nDS4VTOCI DS    XL1\nDS4NOEXT DS    XL1\n         DS    XL2\nDS4DEVSZ DS    XL4\n         DS    XL8\nDS4DEVDT DS    XL1\nDS4DEVDB DS    XL1\n         DS    XL29\nDS4VTOCE DS    XL10\n         SPACE\nF5DSECT  DSECT\n*        IECSDSL1 5\nDS5KEYID DS    XL4\nDS5AVEXT DS    XL5     FIRST\nDS5EXTAV DS    XL35    SEVEN MORE\nDS5FMTID DS    XL1\nDS5MAVET DS    XL90    EIGHTEEN MORE\nDS5PTRDS DS    XL5\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXL01$": {"ttr": 12297, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BULX  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=O\n//ASMFCL PROC  CLASS=O,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='C7BRIAN.PDS.DATA',\n//             LOAD='C7BRIAN.VTOC.LOAD',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='LOAD,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,VOL=SER=MVSD1A,UNIT=SYSDA\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=C7BRIAN.VTOC.LOAD,DISP=SHR\n//         DD  DSN=ISP.V1R1M0.ISPLOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD.(&MEM),DISP=SHR\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=ULXL01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXM01": {"ttr": 12299, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "SYZYGYB"}, "text": "ULXM010  ' '\n\nULXM011A 'VOLUME NOT MOUNTED'\n\nULXM011B 'INVALID OPTION'\n\nULXM011C 'NO EXTENTS'\n\nULXM011D 'TBCREATE ERRORS'\n\nULXM011E 'TBADD ERROR'\n\nULXM012A 'NONINDEXED VTOC'\n\nULXM012B 'RC 0 BUT NULL EXTENT FOUND'\n\nULXM012C 'RC 4-32 BUT NO NULL EXTENT'\n\nULXM012D 'CVAFDSM FAILED'\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXO01": {"ttr": 12301, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\\\\\x00\\\\\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "FILE088"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "ULXP01": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SYZYGYB"}, "text": "%--------------------------- DISK SPACE INFORMATION ----------------------------\n+COMMAND ===>_ZCMD                                                     +\n%\n%Display information about available space on a disk volume..\n%\n%     + VOLUME ===>_ULXV01+\n%\n)INIT\n  .CURSOR = ULXV01\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXP02": {"ttr": 12547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYZYGYB"}, "text": "%--------------------------- DISK SPACE INFORMATION ----------------------------\n+ COMMAND =======>_ZCMD                                                +\n+ NEXT VOLUME ===>_ULXV02 +\n+                              Volume ---%&ULXV01\n+                              Device ---%&ULXUNIT\n+\n+    Tracks per cylinder -------------%&ULXTPC\n+\n+    Cylinders available -------------%&ULXCYL\n+    Tracks available ----------------%&ULXTRK\n+    Total Tracks available ----------%&ULXATOT\n+\n+    Extents of free space -----------%&ULXEXT+Enter L here to List Extents\n+                                              S for Sorted-by-Size  ===>_ULXOPT\n+    Largest single extent:\n+      Cylinders ---------------------%&ULXLRGC\n+      Tracks ------------------------%&ULXLRGT\n+      Total Tracks ------------------%&ULXLTOT\n+\n+    DSCB's available in VTOC --------%&ULXDSREC\n+       According to Format 4 ---%&ULXDSROS\n+       According to Index ------%&ULXDSRIX\n+\n+    VTOC tracks -----%&ULXTRACS  +VTOC Extent -----%&ULXVTOC1%&ULXVTOC2\n)INIT\n  .CURSOR = ULXV02\n  .HELP = ULXH02\n  &ZHTOP = ULXH01     /* TUTORIAL TABLE OF CONTENTS */\n  &ZHINDEX = ULXH00   /* TUTORIAL INDEX --1ST PAGE  */\n)PROC\n  VER (&UCVOPT,LIST,L,S,MSG=ULXM011B)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXP03": {"ttr": 12549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "SYZYGYB"}, "text": ")ATTR\n  @ TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%-------------- DISK SPACE INFORMATION -----------------------------------------\n+ COMMAND =======>_ZCMD                                        %SCROLL ===>_TBS\n+ Volume%&ULXV01 +Device%&ULXUNIT +Trk/Cyl%&ULXTPC +Extents%&ULXEXT\n+\n+      XXXX = Rel Trk of 1st Trk    YYYY = No. of Cyls    ZZ = No. of Trks\n+\n+SEQNO XXXXYYYYZZ     CYLINDERS   TRACKS   TOTAL     BEGIN CCHH  END CCHH\n+----- ----------     ---------   ------  -------    ---------- ----------\n)MODEL\n@Z    @Z                @Z        @Z      @Z         @Z         @Z\n)INIT\n  .ZVARS = '(TBSEQ TBEXT TBCYL TBTRA TBTRK TBBEG TBEND)'\n  &TBS = HALF\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USAGE": {"ttr": 12551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x02\\x7f\\x02\\x7f\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 639, "newlines": 639, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7BUSEG JOB (M096,4622,2,40),CUR.ACCT.INFO,MSGCLASS=X\n//ASM EXEC ASMFCL,ACCT=(NOTIFY,C7BRIAN),MAC1='SYS1.ACTNG.PDS',\n//         PARM.ASM='LIST,LOAD,NODECK,XREF,RENT',\n//         PARM.LKED='LIST,LET,NCAL,MAP,RENT'\n//ASM.SYSIN DD *\n         TITLE '*** USAGE1 - SESSION TO NOW STATISTICS ***'\nUSAGE1   CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING USAGE1,R12\n         LR    R2,R1          SAVE USER PARM ADDRESS\n         L     R0,=A(LEN133+WRKALEN)     GET LENGTH OF GETMAIN\n         GETMAIN R,LV=(0)     GET CORE FOR T133 RECORD\n         LR    R4,R1          START ADDRESS FOR CLEAR\n         L     R5,=A(LEN133+WRKALEN)  AND LENGTH\n         LA    R6,*           DUMMY\n         SR    R7,R7          PAD CHAR = X'00'\n         MVCL  R4,R6          CLEAR WORKING STORAGE\n         ST    R13,4(R1)\n         ST    R1,8(R13)      CHAIN S/A\n         LR    R13,R1\n         USING WRKAREA,R13\n         MVC   UDARES(2),UDARESP\n         MVC   UDANORES(2),UDANOREP\n         MVC   UTAPE(2),UTAPEP\n         MVC   UCOMM(2),UCOMMP\n         MVC   UGR(2),UGRP\n         MVC   UUR(2),UURP\n         ST    R12,EPADDR     SAVE MOD E P A\n         ST    R2,PARMADDR    SAVE USER PARM ADDRESS\n         L     R1,CVTPTR\n         USING CVT,R1\n         L     R3,CVTTCBP     TCB/ASCB DOUBLE WORDS\n         L     R6,CVTUSER     ACCTABLE ADDR FROM CVTUSER\n         ST    R6,CVTUADDR    SAVE ACCTABLE ADDRESS\n         DROP  R1\n         L     R6,12(,R3)     CURRENT ASCB ADDRESS\n         ST    R6,ASCBADDR    SAVE ASCB ADDRESS\n         L     R3,4(R3)       ADDR CURRENT TCB\n         ST    R3,TCBADDR     SAVE TCB ADDRESS\n         L     R4,196(R1)     ADDRESS OF SMCA\n         MVC   T133ID(4),16(R4)    CPUID FROM SMCA\n         L     R5,180(R3)     R5-ADDR JSCB\n         L     R5,264(R5)     R5-ADDR PSCB\n         USING PSCB,R5\n         LTR   R5,R5          IS THIS A  T S O  TASK?\n         BNZ   TSOTASK        YES - DON'T SET BATCH EXEC FLAG\n         OI    FLAGS,X'40'    SET BATCH EXECUTION FLAG\nTSOTASK  ICM   R11,15,164(R3) GET TCT ADDRESS FROM TCB\n         USING SMFTCT,R11\n*\n*  GET CONSTANT INFO FOR TYPE 133 RECORD\n*\n         MVI   T133TYPE,133   SET RECORD TYPE 133 (DEC.)\n         MVI   T133FLG,X'02'  SET SYSTEM INDICATOR = VS2'S\n         L     R8,12(R3)      R8-->TIOT\n         MVC   T133PROC(8),8(R8)     PROCNAME TO T133REC\n         LH    R1,TCTRSZ      GET PRIVATE AREA SIZE\n         AR    R1,R1          DOUBLE TO GET 1K BLOCKS\n         STCM  R1,3,T133CORA  SET PRIVATE AREA SIZE\n         ICM   R4,15,TCTLWM   GET LOW WATER MARK\n         ICM   R1,15,TCTRBA   GET ADDRESS OF PRIVATE AREA\n         SR    R4,R1          R4 - R1 = MAX STORAGE USED IN BYTES\n         SRA   R4,10          R4 / 1024 = # 1KS\n         STCM  R4,3,T133CORU\n         L     R4,TCTJMR      R4 --> JMR\n         MVC   T133UID(8),0(R4)      JOBNAME\n         MVC   T133ACCT(8),20(R4)    ACCT NO.\n         MVC   T133ODAT(4),12(R4)    JMR LOGON DATE\n         MVC   T133OTIM(4),8(R4)     JMR LOGON TIME (ITS IN .01 SEC)\n         MVC   T133STPN,28(R4)       JMR STEP NUMBER\n         L     R3,CVTUADDR    ACCTABLE ADDR FROM CVTUSER\n         LTR   R3,R3          IS THERE AN ADDR ??\n         BZ    NOEXCPTB       NO - BYPASS\n         USING ACCTABLE,R3    ADDRESSABILITY\n         CLC   UJIHDR,=CL8'UJITABLE'  VERIFY ACCTABLE\n         BNE   NOEXCPTB       NOT THERE - BYPASS\n         A     R3,UJITBLEN    POINT TO EXCP TABLE\n         DROP  R3\n         CLC   0(8,R3),=CL8'EXCPTABL'  VERIFY EXCPTABL\n         BNE   NOEXCPTB       NOT THERE - BYPASS\n         L     R4,ASCBADDR    ADDR OF CURRENT ASCB\n         USING ASCB,R4\n         LH    R5,ASCBASID    GET ASID NUMBER\n         DROP  R4\n         M     R4,=F'16'      GET DISPLACEMENT INTO EXCP TABLE\n         LA    R3,8(R5,R3)    POINT TO PROPER ASID ENTRY\n         USING EXCPTABL,R3    ADDRESSABILITY\n         CLC   T133OTIM,RDRTIME    COMPARE RDR START TIME\n         BNE   NOEXCPTB       NO MATCH - BYPASS\n         MVC   T133DYNX,EXCPCNT    COPY DYNAMIC ALLOC EXCP-S\n         DROP  R3\nNOEXCPTB TM    FLAGS,X'40'    IS BATCH EXECUTION FLAG ON?\n         BNZ   GETIO          BYPASS TSO PROCESS\n         MVC   T133LOUT(4),TCTLOUT  TERMINAL LINES OUT\n         MVC   T133LIN(4),TCTLIN    TERMINAL LINES IN\n         SPACE 2\nGETIO    BAL   R3,IOCOUNTS    GO TOTAL UP EXCPS BY DEVICE TYPE\n         LA    R1,IOACCUM     I/O COUNTS\n         LA    R4,T133EXCP    POINT TO VAR LEN EXCP SECT\n         LA    R3,6           LOOP CTL\nGLENG    ICM   R0,15,4(R1)    IS THIS EMPTY ENTRY?\n         BZ    NOEXCPS        YES - CONTINUE\n         MVC   0(8,R4),0(R1)  MOVE ENTRY TO T133 REC\n         LA    R4,8(R4)       POINT TO NEXT ENTRY\nNOEXCPS  LA    R1,8(R1)       NO - POINT TO NEXT ENTRY\n         BCT   R3,GLENG       GOBACK OR THERE ARE 6 EXCP FIELDS\nGSUB     LA    R3,T133VAR     POINT TO VAR FLD OF 133 REC\n         SR    R4,R3          GET LENGTH OF EXCP FLDS\n         STCM  R4,3,T133VAR   PUT LENGTH IN 133 REC\n         LA    R2,T133        GET ADDR OF START OF REC\n         SR    R3,R2          GET LENGTH OF FIXED PORTION\n         AR    R3,R4          ADD LENGTH OF VARIABLE SECTION\n         STCM  R3,3,T133LEN   SET LEN IN RDW\n         SPACE 3\n         TIME  BIN            GET TIME AND DATE OF RECORD\n         STCM  R1,15,T133DATE DATE\n         STCM  R0,15,T133TIME TIME\n         BAL   R3,CPUTIME     GET JOB CPU TIME\n         MVC   T133CPU,CPUANS     MOVE CPU TIME\n         CLC   T133ODAT,T133DATE   SAME DATE\n         BNE   OWELL          THATS TIRED\n         ICM   R1,15,T133TIME\n         ICM   R2,15,T133OTIM\n         SR    R1,R2          OUT-IN = CONNECT TIME\n         B     BSGETPC        GO SAVE CONNECT TIME\nOWELL    ICM   R2,15,T133OTIM HUND SEC IN\n         ICM   R1,15,T133TIME HSEC OUT\n         SR    R2,R1          HSEC IN - HSEC OUT = INVERSE ELAPTIM\n         L     R1,=F'8640000' R1 = # OF HUND SEC IN 1 DAY\n         SR    R1,R2          INVERSE ELAP - BASE = CONNECT TIME\nBSGETPC  STCM  R1,15,T133CTME STORE IN T133 AREA\n         SPACE 2\n         BAL   R3,REPORT      PUT REPORT TO REQUESTER\n         SPACE 3\n         L     R0,=A(LEN133+WRKALEN)     GET LENGTH OF GETMAIN\n         LR    R1,R13         ADDRESS OF GOTTEN MEMORY\n         L     R2,RCODE       GET RETURN CODE FROM USER PGM\n         L     R13,4(R13)     RESTORE SAVEAREA POINTER\n         FREEMAIN R,LV=(0),A=(1)                GIVE BACK MEMORY\n         LR    R15,R2         RE-ESTABLISH RETURN CODE\n*\n*        RETURN TO CALLER\n*\n         RETURN  (14,12),RC=(15)\n         SPACE 3\n* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- *\n*\n*        GET I/O COUNTS BY DEVICE TYPE\n*\n* --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- *\nIOCOUNTS SR    R1,R1          GET SET TO STORE ZEROES\n         LA    R4,IOACCUM     POINT TO I/O ACCUM TABLE\n         L     R6,TCTIOTBL    GET I/O TABLE ADDRESS IN TCT\n         USING TCTTIOT,R6\n         LA    R7,TCTIOTSD    MOVE TO FIRST LOOKUP ENTRY\nTCTDDCNT LH    R15,0(R7)      GET OFFSET TO DD ENTRY\n         LTR   R15,R15        END OF TABLE\n         BZ    TCTVAR         EXIT IF END OF TABLE\n         SR    R14,R14        CLEAR WORK\n         LA    R15,0(R6,R15)  POINT TO A DD ENTRY\n         USING TCTDDENT,R15\n         ICM   R14,1,TCTSCTR  GET NUMBER OF DEVICES\n         BNP   TCTNONB        NONE OR SYSIN, SKIP\nTCTDD    LH    R8,TCTUCBP     GET UCB ADDR\n         LTR   R8,R8          IS IT ZERO\n         BZ    TCTDDINC       IF ZERO, SKIP\n         ICM   R1,15,TCTDCTR  LOAD AND TEST EXCP FOUND\n         BZ    TCTDDINC       IF ZERO, DO NOT RECORD\n         CLI   18(R8),X'20'   DIRECT ACCESS DEVICE?\n         BNE   NOTDA          NO, CONTINUE\n         TM    3(R8),X'04'    PERMANENTLY RESIDENT?\n         BZ    NORES          NO, CONTINUE\n         LA    R4,UDARES      YES, POINT TO PERMRESDA\n         B     SNAPIO         GET IO COUNTS\nNORES    LA    R4,UDANORES    POINT TO NON-RES DA\n         B     SNAPIO         GET IO COUNTS\nNOTDA    LA    R10,4          NO. DEVICE TYPES REMAINING\n         LA    R4,UTAPE       INIT POINTER\nFINDTYPE CLC   0(1,R4),18(R8) DEVICE TYPE MATCH?\n         BE    SNAPIO         YES, GET IO COUNTS\n         LA    R4,8(R4)       POINT TO NEXT DEVTYPE IN TABLE\n         BCT   R10,FINDTYPE   CONTINUE SEARCH\n         B     TCTDDINC       NO MATCH - DO NOT RECORD\nSNAPIO   A     R1,4(,R4)      ADD ACCUM VALUE TO THIS IOCOUNT\n         ST    R1,4(,R4)      SAVE # I/O COUNTS FOR THIS DEVICE\nTCTDDINC LA    R15,TCTDCTR+4-TCTDDENT(R15) MOVE TO NEXT\n         BCT   R14,TCTDD      LOOP THROUGH UCB ENTRIES\nTCTNONB  LA    R7,TCTDCBLE-TCTIODSP(R7) MOVE TO NEXT LOOKUP\n         B     TCTDDCNT       LOOP\nTCTVAR   BR    R3             RETURN\n*\n* * * *  CPUTIME\n*\n*      OBTAIN CPUTIME FROM ACTIVE ASCB CHAIN\n*   (WHILE HERE, GET TSO LINE ADDRESS FROM TSB)\n*\n         SPACE 1\nCPUTIME  STM   R2,R6,CTSAV    R3 = RET ADDR\n         SPACE 1\n*  INITIATION\n         L     R6,ASCBADDR    CURRENT ASCB ADDRESS\n         USING ASCB,R6\n         SPACE 1\n*  ASCB PROOF\n         CLC   ASCBASCB,=C'ASCB'   IS THIS AN ASCB?\n         BNE   CTX\n         SPACE 1\n*  GET TSO LINE NUMBER\n         TM    FLAGS,X'40'         IS THIS BATCH ??\n         BO    LINEND              YES-SKIP TSO LINE NUM\n         SR    R1,R1\n         SVC   237\n         MODESET KEY=ZERO,MODE=SUP\n         L     R5,60(R6)           R5-->TSB / R6 WAS ASCB\n         TM    25(R5),X'01'        THIS A VTAM TSB?\n         BO    VTAMTSB             YES - GO GET TERM NAME\n         MVC   T133TLNE(2),82(R5)  GET  TSBLINE (TCAM'S)\n         B     LINEND              BACK IN LINE CODE\nVTAMTSB  TM    108(R5),X'F0'       NUMERIC 5TH BYTE\n         BNO   LINEND              NO - IGNORE\n         TM    107(R5),X'F0'       NUMERIC 4TH BYTE\n         BNO   LINEND              NO - IGNORE\n         TM    106(R5),X'F0'       NUMERIC 3RD BYTE\n         BNO   LINEND              NO - IGNORE\n         PACK  DWRK(3),106(4,R5)   PACK NUMERIC PART\n         MVC   T133TLNE(2),DWRK    MOVE TO T133 RECORD\n         OI    T133TLNE,X'08'      FORCE AT LEAST 800 SERIES NUMBERS\nLINEND   MODESET KEY=NZERO,MODE=PROB\n         LA    R1,4\n         SVC   237\n*  CALCULATE CPU HUND-SEC\n         LM    R2,R3,ASCBEJST      CPU TIME DBL WORD\n         SRDL  R2,22\n         SR    R2,R2\n         D     R2,=F'10'\n         ST    R3,CPUANS           CPU = HUND-SEC\n         SPACE 1\n*  CPUTIME ROUTINE EXIT\nCTXIT    LM    R2,R6,CTSAV\n         BR    R3\n*  ERROR RETURN\nCTX      XC    CPUANS,CPUANS\n         B     CTXIT\n         SPACE 1\n         DROP  R6\n         SPACE 3\n*\n* * * *  REPORT\n*\n*  PRESENT TO REQUESTOR THE TO NOW SESSION STATISTICS\n*\n         SPACE 1\nREPORT   STM   R2,R6,BSSAV\n         SPACE 1\n         TM    FLAGS,X'40'    IS IT BATCH\n         BNO   BSTSO          NO, DO TSO STUFF\n         SPACE 1\n*  BATCH  - - -\n         B     BSXIT\n         SPACE 1\n*  TSO    - - -\nBSTSO    LA    R1,BLOCKSS         FORMAT BOX (START)\n         LA    R0,L'BLOCKSS\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         LA    R1,BLOCKSP         BLOCK SPACE LINE\n         LA    R0,L'BLOCKSP\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         LA    R1,BLOCKHD1        HEADER ONE\n         LA    R0,L'BLOCKHD1\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         MVC   BLOCKWRK,BLOCKSP   INIT WORK AREA\n         MVC   BLOCKUID,T133UID   USER ID\n         MVC   BLOCKAC1,T133ACCT  MAJOR ACCOUNT NUMBER\n         MVI   BLOCKACS,C','\n         MVC   BLOCKAC2,T133ACCT+4 SUB ACCOUNT NUMBER\n         MVI   DWRK+7,X'0F'\n         MVO   DWRK+6(2),T133TLNE  TSO LINE NUMBER\n         UNPK  BLOCKLNE,DWRK+6(2)      TO REPORT LINE\n         UNPK  BLOCKDAT,T133ODAT+1(3)  LOGON DATE TO REPORT LINE\n         MVC   BLOCKYR,BLOCKDAT   PULL BACK YEAR\n         MVI   BLOCKD0,C'.'\n         MVI   BLOCK@1,C'@'\n         LA    R1,T133OTIM        LOGON TIME IN 100THS SEC\n         BAL   R3,HS2HMSH         CONVERT TO H:M:S.H\n         MVC   BLOCKLTM,0(R1)     MOVE TO OUTPUT AREA\n         MVC   BLOCKID,T133ID     CPU ID\n         LA    R1,BLOCKWRK        CONSTRUCTED REPORT LINE\n         LA    R0,L'BLOCKWRK\n         BAL   R3,PUTREPT         TPUT TO REQUESTOR\n         LA    R1,BLOCKSP         BLOCK SPACE LINE\n         LA    R0,L'BLOCKSP\n         BAL   R3,PUTREPT\n         LA    R1,BLOCKHD2        HEADER TWO\n         LA    R0,L'BLOCKHD2\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         MVC   BLOCKWRK,BLOCKSP   INIT WORK AREA\n         LA    R1,T133CTME        CONNECT TIME IN 100THS SEC\n         BAL   R3,HS2HMSH         CONVERT TO H:M:S.H\n         MVC   BLOCKCTM,0(R1)     MOVE TO OUTPUT AREA\n         LA    R1,T133CPU         CPU TIME IN 100THS SEC\n         BAL   R3,HS2HMSH         CONVERT TO H:M:S.H\n         MVC   BLOCKCPT,0(R1)     MOVE TO OUTPUT AREA\n         ICM   R1,15,T133LOUT     TERM LINES OUT\n         ICM   R0,15,T133LIN      TERM LINES IN\n         AR    R1,R0\n         ICM   R0,15,T133DYNX     DYNAMIC ALLOC EXCP-S\n         AR    R1,R0\n         LA    R2,T133EXCP        START OF DA,UR,TA,ETC EXCPS\n         LA    R4,2\nBSTSO50  CLM   R4,3,T133VAR       ALL IN VARIABLE PART SUMMED\n         BNL   BSTSO54            YES - GO PUT TO REPORT\n         ICM   R3,15,4(R2)        ARE THERE ANY EXCPS HERE\n         BZ    BSTSO52            NO - SKIP ADD\n         AR    R1,R3              YES - SUM 'EM UP\nBSTSO52  LA    R2,8(,R2)          ADVANCE TO NEXT EXCP SLOT\n         LA    R4,8(,R4)          AND UP COUNT\n         B     BSTSO50\nBSTSO54  LR    R6,R1              HOLD EXCP SUM FOR $ CALC\n         BAL   R3,B2E             CONVERT TO Z,ZZZ,ZZN\n         MVC   BLOCKEX,WRK10PAT   MOVE TO OUTPUT AREA\n         SR    R1,R1\n         ICM   R1,3,T133CORU      MEMORY USED IN 1K BLOCKS\n         BAL   R3,B2E             CONVERT TO Z,ZZZ,ZZN 1KS\n         MVC   BLOCKMEM,WRK10PAT+4   GET ZZ,ZZN PART\n         MVI   BLOCKCK,C'K'       ADD THE K\n         LA    R1,BLOCKWRK\n         LA    R0,L'BLOCKWRK\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         LA    R1,BLOCKSP         BLOCK SPACE LINE\n         LA    R0,L'BLOCKSP\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         LA    R1,BLOCKHD3        HEADER THREE\n         LA    R0,L'BLOCKHD3\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         MVC   BLOCKWRK,BLOCKSP   INIT WORK AREA\n         SR    R0,R0              SUM REGISTOR\n         ICM   R5,15,T133CTME     CONNECT TIME\n         M     R4,=F'8'           * $8/HR\n         D     R4,=A(60*60)       / # SEC/HR\n         AR    R0,R5              = HUND OF $ CON CHARGE\n         LR    R1,R5\n         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKCO$,WRK$0PAT\n         ICM   R5,15,T133CPU      CPU TIME\n         CLC   =C'M0970359',T133ACCT          FPBC BENCH MARK?\n         BNE   NOTFPDC1                       NO - NORMAL RATE\n         M     R4,=A(225*30)                  YES - USE 10 CENT RATE\n         B     ISFPDC1\nNOTFPDC1 M     R4,=A(225*36)\nISFPDC1  D     R4,=A(10000)\n         AR    R0,R5              = HUND OF $ CPU CHARGE\n         LR    R1,R5\n         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKCP$,WRK$0PAT\n         LR    R5,R6              GET HELD EXCP SUM\n         M     R4,=A(225*135)\n         D     R4,=A(100000)\n         AR    R0,R5              = HUND OF $ EXCP CHARGE\n         LR    R1,R5\n         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKEX$,WRK$0PAT\n         ICM   R5,3,T133CORU      MEMORY USED\n         CLC   =C'M0970359',T133ACCT          FPBC BENCH MARK?\n         BNE   NOTFPDC2                       NO - NORMAL RATE\n         M     R4,=A(225*19)                  YES - USE 10 CENT RATE\n         B     ISFPDC2\nNOTFPDC2 M     R4,=A(225*57)\nISFPDC2  ICM   R4,15,T133CPU      CPU USED\n         MR    R4,R4\n         D     R4,=A(2000000)\n         AR    R0,R5              = HUND OF $ MEMORY CHARGE\n         LR    R1,R5\n         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKME$,WRK$0PAT\n         LR    R1,R0              GET HUND OF $ TOTAL CHARGE\n         BAL   R3,B2$             CONVERT TO ZZ,ZZN.NN $S\n         MVC   BLOCKTO$,WRK$0PAT\n         LA    R1,BLOCKWRK\n         LA    R0,L'BLOCKWRK\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         LA    R1,BLOCKSP         BLOCK SPACE LINE\n         LA    R0,L'BLOCKSP\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         LA    R1,BLOCKSS         FORMAT BOX (STOP)\n         LA    R0,L'BLOCKSS\n         BAL   R3,PUTREPT         GENERAL TPUT ROUTINE\n         SPACE 1\n         B     BSXIT\n         SPACE 1\nPUTREPT  TPUT  (1),(0)            WRITE IMAGE TO TERMINAL\n         BR    R3                 EXIT TO CALLER\n         SPACE 1\nB2$      CVD   R1,DWRK\n         OI    DWRK+7,X'0F'\n         MVC   WRK$0PAT,=X'4020206B2021204B2020'\n         ED    WRK$0PAT,DWRK+4\n         BR    R3\n         SPACE 1\nB2E      CVD   R1,DWRK            TO PACKED DEC\n         OI    DWRK+7,X'0F'       FORCE + SIGN\n         MVC   WRK10PAT,=X'40206B2020206B202120'\n         ED    WRK10PAT,DWRK+4\n         BR    R3\n         SPACE 1\nHS2HMSH  ICM   R5,15,0(R1)        INPUT TIME IN 100THS SEC\n         SR    R4,R4              SETUP FOR DIVIDE\n         MVC   WRK11PAT,=C'HH:MM:SS.TH'  SETUP OUTPUT PATTERN\n         D     R4,=F'100'         GET 100TH OF SECS\n         CVD   R4,DWRK            PACKED DEC\n         OI    DWRK+7,X'0F'       FOXIE SIGN\n         UNPK  WRK11TH,DWRK+6(2)  HUND OF SEC\n         SR    R4,R4              SETUP FOR DIVIDE\n         D     R4,=F'60'          GET SECS\n         CVD   R4,DWRK            PACKED DEC\n         OI    DWRK+7,X'0F'       FOXIE SIGN\n         UNPK  WRK11SS,DWRK+6(2)  SEC\n         SR    R4,R4              SETUP FOR DIVIDE\n         D     R4,=F'60'          GET MIN\n         CVD   R4,DWRK            PACKED DEC\n         OI    DWRK+7,X'0F'       FOXIE SIGN\n         UNPK  WRK11MM,DWRK+6(2)  MIN\n         CVD   R5,DWRK            PACKED DEC\n         OI    DWRK+7,X'0F'       FOXIE SIGN\n         UNPK  WRK11HH,DWRK+6(2)  HR\n         LA    R1,WRK11PAT        LOCATE OUTPUT FOR CALLER\n         BR    R3                 AND RETURN TO CALLER\n*  RETURN\nBSXIT    LM    R2,R6,BSSAV\n         BR    R3\n         SPACE 3\n*   ALL THE PATTERNS ARE BELOW\nUDARESP  DC    X'20',X'40'\nUDANOREP DC    X'20',X'40'\nUTAPEP   DC    X'80',X'00'\nUCOMMP   DC    X'40',X'00'\nUGRP     DC    X'10',X'00'\nUURP     DC    X'08',X'00'\nBLOCKSS  DS    0CL72          START AND STOP OF BOX\n         DC    72C'*'\nBLOCKSP  DS    0CL72          SPACE OF BOX\n         DC    C'*'\n         DC    CL70' '\n         DC    C'*'\nBLOCKHD1 DS    0CL72\n*                01234\n         DC    C'*    '\n*                567890123\n         DC    C'USER-ID  '\n*                4567890123456\n         DC    C'ACCOUNT #    '\n*                78901\n         DC    C'TERM '\n*                234567890123456789012345\n         DC    C' LOGON DATE AND TIME    '\n*                67890\n         DC    C'NODE '\n*                12345678901\n         DC    C'          *'\nBLOCKHD2 DS    0CL72\n*                01234\n         DC    C'*    '\n*                5678901234567\n         DC    C'CONNECT TIME '\n*                8901234567890\n         DC    C' CPU TIME    '\n*                1234567890123\n         DC    C'TOTAL EXCPS  '\n*                45678901\n         DC    C'MEM USED'\n*                23456789012345678901\n         DC    C'                   *'\nBLOCKHD3 DS    0CL72\n*                01234\n         DC    C'*    '\n*                5678901234567\n         DC    C'CONNECT $ +  '\n*                890123456789\n         DC    C'    CPU $ + '\n*                01234567890\n         DC    C'   EXCP $ +'\n*                12345678901\n         DC    C' MEMORY $ ='\n*                2345678901\n         DC    C'  TOTAL $ '\n*                2345678901\n         DC    C'         *'\n         SPACE 1\n         LTORG\n         SPACE 3\n*\n*     DSECTS\n*\nWRKAREA  DSECT\nSAVEAREA DS    18F            GENERAL SAVE AREA\nDWRK     DS    D              WORK DOUBLE WORD\nBSSAV    DS    5F             SUBROUTINE SAVE AREA\nCTSAV    DS    5F             SUBROUTINE AREA\nCPUANS   DS    F              STEP CPU TIME IN HUNDREDS OF SECONDS\nPARMADDR DS    F              HOLD AREA FOR USER PGM PARM ADDRESS\nRCODE    DS    F              SAVEAREA FOR REG 15 FROM USER PGM\nEPADDR   DS    F              SAVE MODULE ENTRY POINT ADDR\nASCBADDR DS    F              ASCB ADDRESS SAVEAREA\nCVTUADDR DS    F              ACCTABLE ADDRESS SAVEAREA\nTCBADDR  DS    F              TCB ADDRESS SAVEAREA\nIOACCUM  DS    0F\nUDARES   DC    X'20',X'40',6X'00'\nUDANORES DC    X'20',X'40',6X'00'\nUTAPE    DC    X'80',X'00',6X'00'\nUCOMM    DC    X'40',X'00',6X'00'\nUGR      DC    X'10',X'00',6X'00'\nUUR      DC    X'08',X'00',6X'00'\nFLAGS    DS    X\nWRK$0PAT DS    CL10            WORK AREA TO BUILD ZZ,ZZN.NN\nWRK10PAT DS    CL10            WORK AREA TO BUILD Z,ZZZ,ZZN\nWRK11PAT DS    CL11            WORK AREA TO BUILD HH:MM:SS:TH\nWRK11HH  EQU   WRK11PAT+00,2\nWRK11MM  EQU   WRK11PAT+03,2\nWRK11SS  EQU   WRK11PAT+06,2\nWRK11TH  EQU   WRK11PAT+09,2\nBLOCKWRK DS    CL72            OUTPUT WORK AREA FOR STAT BLOCK\n* * * *  * *   * * * * * * *\nBLOCKUID EQU   BLOCKWRK+05,8\nBLOCKAC1 EQU   BLOCKWRK+14,4\nBLOCKACS EQU   BLOCKWRK+18,1\nBLOCKAC2 EQU   BLOCKWRK+19,4\nBLOCKLNE EQU   BLOCKWRK+27,3\nBLOCKYR  EQU   BLOCKWRK+32,2\nBLOCKD0  EQU   BLOCKWRK+34,1\nBLOCKDAT EQU   BLOCKWRK+33,5\nBLOCK@1  EQU   BLOCKWRK+40,1\nBLOCKLTM EQU   BLOCKWRK+43,11\nBLOCKID  EQU   BLOCKWRK+56,4\n* * * *  * *   * * * * * * *\nBLOCKCTM EQU   BLOCKWRK+05,11\nBLOCKCPT EQU   BLOCKWRK+18,11\nBLOCKEX  EQU   BLOCKWRK+31,10\nBLOCKMEM EQU   BLOCKWRK+44,6\nBLOCKCK  EQU   BLOCKWRK+50,1\n* * * *  * *   * * * * * * *\nBLOCKCO$ EQU   BLOCKWRK+05,10\nBLOCKCP$ EQU   BLOCKWRK+18,10\nBLOCKEX$ EQU   BLOCKWRK+30,10\nBLOCKME$ EQU   BLOCKWRK+41,10\nBLOCKTO$ EQU   BLOCKWRK+52,10\n         DS    0D\nWRKALEN  EQU   *-WRKAREA\n         SPACE 3\n*\n*            TYPE 133 WORK AREA\n*\nT133     EQU   *\nT133LEN  DC    XL2'00'        RECORD LENGTH\n         DC    XL2'00'        SEGMENT DESCRIPTOR\nT133FLG  DC    XL1'00'        SYSTEM INDICATOR (X'02' = VS2)\nT133TYPE DC    XL1'00'        RECORD TYPE 133 (DECIMAL)\nT133TIME DC    XL4'00'        TIME RCD WRITTEN (IN .01 SEC)\nT133DATE DC    PL4'0'         DATE RCD WRITTEN (00YYDDDF)\nT133ID   DC    CL4' '         CPU IDENTIFICATION\nT133UID  DC    CL8' '         TSO=USERID / BATCH=JOBNAME\nT133OTIM DC    XL4'00'        TSO LOGON TIME / BATCH READER TIME\nT133ODAT DC    PL4'0'         TSO LOGON DATE / BATCH READER DATE\nT133ACCT DC    CL8' '         ACCOUNT NUMBER\nT133STPN DC    XL1'00'        STEP SEQUENCE NUMBER\nT133LOUT DC    XL4'00'        TSO = TERMINAL LINES OUT\n*                             BATCH = 0\nT133LIN  DC    XL4'00'        TSO = TERMINAL LINES IN\n*                             BATCH = 0\nT133PROC DC    CL8' '         PROCEDURE NAME\nT133CORA DC    XL2'00'        CORE ALLOCATED  (IN 1K BLOCKS)\nT133CORU DC    XL2'00'        CORE USED       (IN 1K BLOCKS)\nT133CPU  DC    XL4'00'        CPU TIME        (IN .01 SEC)\nT133CTME DC    XL4'00'        CONNECT TIME    (IN .01 SEC)\nT133DYNX DC    XL4'00'        DYNAMIC ALLOC SUMMED EXCP COUNTS\nT133TLNE DC    XL2'00'        HOLD TSO LINE NUMBER (PACKED, NO SIGN)\nT133VAR  DC    XL2'00'        LEN OF EXCP FIELDS + THESE 2 BYTES\nT133EXCP DC    6XL8'00'       XL2,XL2,XL4 AS IN SMF TYPE 4/34 REC\n         DS    0D\nLEN133   EQU   *-T133\n         SPACE 3\nACCTABLE DSECT\nUJITBLEN DC    F'0'           LENGTH OF ACCT TABLE\nUJIHDR   DC    CL8'UJITABLE'  TABLE IDENTIFICATION\nSTART1   DC    F'0'\nSTART2   DC    F'0'\nSTART3   DC    F'0'\nSTART4   DC    F'0'\nSTART5   DC    F'0'\nSTART6   DC    F'0'\nSTART7   DC    F'0'\nSTARTP   DC    F'0'\nSTARTEND DC    X'FF'          END OF ADDRESS TABLE\n*\nRVOLS    DC    50XL10'00'     RESIDENT VOLSER LIST\nRVOLSEND DC    X'FF'          END OF RESIDENT VOLSER LIST\n*\nMMAP     DC    125X'00'       'M' ACCOUNTS BITMAP\nCMAP     DC    125X'00'       'C' ACCOUNTS BITMAP\nEMAP     DC    125X'00'       'E' ACCOUNTS BITMAP\nFMAP     DC    125X'00'       'F' ACCOUNTS BITMAP\nIMAP     DC    125X'00'       'I' ACCOUNTS BITMAP\nHMAP     DC    125X'00'       'H' ACCOUNTS BITMAP\nRMAP     DC    125X'00'       'R' ACCOUNTS BITMAP\nTOTABLEN DC    F'0'           TOTAL LEN OF CSA TABLE\nTBFIX    EQU   *-ACCTABLE     LENGTH OF FIXED PORTION\nNUMBERS  EQU   *\n         SPACE 3\nEXCPTABL DSECT\nRDRTIME  DS    F              READER START TIME\nEXCPCNT  DS    F              EXCP COUNT FROM TYPE 40 RECORDS\n         SPACE 3\n         CVT   LIST=YES,TSO=YES,DSECT=YES\n         SPACE 3\n         IHAASCB DSECT=YES\n         SPACE 3\n         IEFTCT\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         END   USAGE1\n//LKED.SYSLMOD DD DSN=C7BRIAN.VTOC.LOAD,DISP=SHR\n//LKED.SYSIN   DD *\n NAME USAGE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WAIT$": {"ttr": 12805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYZYGYB"}, "text": "//C7WAIT$ JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=O\n//ASMFCL PROC  CLASS=O,        -   SYSOUT CLASS\n//             MEM=,\n//             DSN='C7BRIAN.PDS.DATA',\n//             LOAD='C7BRIAN.VTOC.LOAD',\n//             WORK1=SYSDA,        DASD OUTPUT TYPE\n//             WORK2=SYSDA,        DASD WORK TYPE\n//             PRI=1,              PRIMARY ALLOCATION\n//             SEC=1,              SECONDARY ALLOCATION\n//             DIR=1,              NUMBER OF DIRECTORY BLOCKS\n//             ALLOC=TRK           ALLOC INCREMENT\n//ASM      EXEC  PGM=IFOX00,REGION=500K,COND=EVEN,\n//         PARM='OBJECT,NODECK,XREF'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSGO    DD  DSN=&&INDXOBJ,DISP=(NEW,PASS),\n//             UNIT=&WORK1.,FREE=CLOSE,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.),RLSE)\n//SYSIN    DD  DSN=&DSN.(&MEM),DISP=SHR\n//LKED     EXEC  PGM=IEWL,REGION=256K,COND=(4,LT,ASM),\n//         PARM='LIST,MAP,LET,AC=1'\n//SYSPRINT DD  SYSOUT=&CLASS\n//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2\n//SYSLIB   DD  DSN=C7BRIAN.VTOC.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=&LOAD,DISP=SHR,\n//             SPACE=(&ALLOC.,(&PRI.,&SEC.,&DIR.))\n//SYSLIN   DD  DSN=&&INDXOBJ,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//       PEND\n//ASMFCL      EXEC ASMFCL,MEM=WAITPROG\n//LKED.SYSIN   DD   *\n   NAME WAITX(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WAIT#": {"ttr": 12807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x14'\\x00\\x04\\x00\\x04\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T14:27:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "SBGOLOB"}, "text": "//C7WAIT  JOB (M096,0616,99,9999),'SYSTEMS*BRIAN',NOTIFY=C7BRIAN,\n//       MSGCLASS=O\n//STEP0     EXEC  PGM=WAITX,PARM='0020'\n//STEPLIB   DD    DSN=C7BRIAN.VTOC.LOAD,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WAITPROG": {"ttr": 12809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12\\x00\\x00E\\x00E\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:00:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "SYZYGYB"}, "text": "PROGRAM  TITLE 'SKELETON PROGRAM FOR TEST PURPOSES'\n         SPACE\nPROGR    CSECT\n*                                       REGISTER EQUATES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nRA       EQU   10\nR11      EQU   11\nRB       EQU   11\nR12      EQU   12\nRC       EQU   12\nR13      EQU   13\nRD       EQU   13\nR14      EQU   14\nRE       EQU   14\nR15      EQU   15\nRF       EQU   15\n*                                       END OF EQUATES\n         EJECT\n         SAVE  (14,12)                  SAVE REGS ON ENTRY\n         LR    RC,RF                    ESTABLISH ADDRESSABILITY\n         USING PROGR,RC                 \"         \"\n         ST    RD,REGSAVE+4             ESTABLISH LINKAGE CONVENTION\n         LR    R2,RD                    \"\n         LA    RD,REGSAVE               \"\n         ST    RD,8(R2)                 \"\n         SPACE\n* * * *  * * *  * * * * * * * * * * * *  * * * * * * * * * * * * *\n*              PROGRAM MEAT\n* * * *  * * *  * * * * * * * * * * * *  * * * * * * * * * * * * *\n         L     R2,0(0,R1)\n         MVC   TIMEREQ(4),2(R2)\n         MVC   REQUEST+36(4),TIMEREQ\n         EXTRACT TIOTADDR,'S',FIELDS=(TIOT)    GET TIOT ADDRESS\n         L     R4,TIOTADDR\n         MVC   REQUEST+4(8),0(R4)\n         WTO   MF=(E,REQUEST)\n         LR    R9,R1                    SAVE MESSAGE NUMBER\n         PACK  DBLPACK,TIMEREQ\n         CVB   R5,DBLPACK\n         MH    R5,=H'100'\n         ST    R5,BINTVL\n         STIMER WAIT,BINTVL=BINTVL\nNORMEND  DS    0H                       NORMAL END ROUTINE\n         DOM   MSG=(9)                  DELETE OLD MESSAGE\n         WTO   MF=(E,DONEIT)\n         L     RD,4(RD)                 LOAD RECURSIVE SAVE REG\n         RETURN (14,12),RC=0\n         EJECT\n         TITLE 'USER DATA AREAS'\nREGSAVE  DS    18F                      SAVE AREA FOR REGISTERS\nDBLPACK  DS    D\nBINTVL   DS    F\n         DS    0D\nREQUEST  WTO   'XXXXXXXX WAIT TIME REQUESTED IS XXXX SECONDS',        XX\n               ROUTCDE=11,DESC=2,MF=L\nDONEIT   WTO   'WAIT TIME HAS EXPIRED',ROUTCDE=11,MF=L\nTIMEREQ  DC    CL4' '\nTIOTADDR DC    A(0)                     TIOT ADDRESS.\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XJ2NET": {"ttr": 12811, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05/\\x01\\x00\\x05/\\x12C\\x00\\xbf\\x00\\xbf\\x00\\x00\\xe2\\xe8\\xe9\\xe8\\xc7\\xe8\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-21T00:00:00", "modifydate": "2000-02-21T12:43:00", "lines": 191, "newlines": 191, "modlines": 0, "user": "SYZYGYB"}, "text": "XJ2NET   TITLE 'BII USER EXIT CODE FOR HASPNET'\n*****************************************************************\n*                                                               *\n* MODULE NAME = XJ2NET      BII EXIT 13                         *\n*                                                               *\n* DESCRIPTIVE NAME = USER EXIT MODULE TO RETURN RC OF 8         *\n*                    TO NOTIFY THE TSO USER WITH HASP549 MSG.   *\n*                                                               *\n* FUNCTION = PROVIDE SUPPORT FOR TSO/E TO NOTIFY THE TSOUSER    *\n*            WHEN A FILE IS WAITING ON THE RECEIVE QUEUE.       *\n*                                                               *\n*                                                               *\n*                                                               *\n* NOTES = SEE BELOW                                             *\n*                                                               *\n*    DEPENDENCIES =                                             *\n*                                                               *\n*    RESTRICTIONS =                                             *\n*                                                               *\n*    REGISTER CONVENTIONS = SEE ENTRY POINT DOCUMENTATION.      *\n*                                                               *\n*                                                               *\n*    PATCH LABEL = NONE                                         *\n*                                                               *\n* MODULE TYPE = PROCEDURE ( CSECT TYPE )                        *\n*                                                               *\n*    ATTRIBUTES = READ ONLY, REENTRANT (BY JES2 DEFINITION).    *\n*                                                               *\n* ENTRY POINT = BII013                                          *\n*                                                               *\n*    PURPOSE = SEE FUNCTION (ABOVE).                            *\n*                                                               *\n*    LINKAGE = SEE ENTRY POINT DOCUMENTATION.                   *\n*                                                               *\n* INPUT =  SEE ENTRY POINT DOCUMENTATION.                       *\n*                                                               *\n* OUTPUT = NONE                                                 *\n*                                                               *\n* EXIT-NORMAL = RETURN TO CALLER USING RETURN MACRO             *\n*                                                               *\n* EXIT-ERROR = NONE                                             *\n*                                                               *\n* EXTERNAL REFERENCES = SEE BELOW                               *\n*                                                               *\n*    ROUTINES = NONE                                            *\n*                                                               *\n*    DATA AREAS = SEE BELOW                                     *\n*                                                               *\n* TABLES = SEE BELOW                                            *\n*                                                               *\n* MACROS =                                                      *\n*                                                               *\n* CHANGE ACTIVITY                                               *\n*                                                               *\n*     RELEASE = SP2.1.5                                         *\n*                                                               *\n*                                                               *\n*****************************************************************\n         COPY  $HASPGBL           COPY HASP GLOBALS               BHWW\nXJ2NET   $MODULE NOTICE=NONE,                                     BHWW +\n               TITLE='BII TSOE NOTIFY',                           BHWW +\n               ENVIRON=JES2,                                      BHWW +\n               $HCT,              GENERATE HASP HCT DSECT         BHWW +\n               $BUFFER,           GENERATE HASP BUFFER DSECT      BHWW +\n               RPL,               GENERATE HASP RPL    DSECT      BHWW +\n               $JCT,              GENERAGE HASP JCT DSECT         BHWW +\n               $JQE,              GENERATE HASP JQE DSECT         BHWW +\n               $JOE,              GENERATE HASP JOE DSECT         BHWW +\n               $DCT,              GENERATE HASP DCT DSECT         BHWW +\n               $PCE,              GENERATE HASP PCE DSECT         BHWW +\n               $QSE,              GENERATE HASP QSE DSECT         BHWW +\n               $CAT,              GENERATE HASP CAT DSECT         BHWW +\n               $MIT,              GENERATE HASP MIT DSECT         BHWW +\n               $PDDB,             GENERATE HASP PDDB DSECT        BHWW +\n               $NHD,              GENERATE HASP NHD DSECT         BHWW +\n               $HASPEQU           GENERATE HASP EQUATES           BHWW\n*****************************************************************\n* ENTRY POINT DOCUMENTATION:                                    *\n*                                                               *\n*     REGISTERS AT ENTRY;                                       *\n*                                                               *\n*           R0  =       = N/A                                   *\n*           R1  =       = NETWORK JOB HEADER                    *\n*           R2  =       = N/A                                   *\n*           R3  =       = N/A                                   *\n*           R4  =       = N/A                                   *\n*           R5  =       = N/A                                   *\n*           R6  =       = N/A                                   *\n*           R7  =       = N/A                                   *\n*           R8  =       = N/A                                   *\n*           R9  =       = N/A                                   *\n*           R10 =       = ADDRESS OF JCT                        *\n*           R11 =       = ADDRESS OF HCT                        *\n*           R12 =       = OUR BASE                              *\n*           R13 =       = ADDRESS OF PCE                        *\n*           R14 =       = RETURN ADDRESS                        *\n*           R15 =       = ENTRY ADDRESS                         *\n*                                                               *\n*****************************************************************\n         SPACE 3\nBII013   $ENTRY BASE=R12   PROVIDE PROCESSOR ENTRY POINT\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             ESTABLISH BASE\n         L     R2,0(,R1)           GET NJH ADDR\n         L     R3,8(,R1)           GET PDDB ADDR\n         MVC   NODEJ(8),NJHGORGN-NJH(R2)        MOVE ORIGIN NODE\n         MVC   SENDRJ(7),NJHGJNAM-NJH(R2)        MOVE ORIGIN SENDER\n         CLC   =C'TSO',SENDRJ       BEGIN WITH TSO\n         BNE   DOUSID                  NO\n         MVC   SENDRJ(7),$BLANKS       CLEAR\n         MVC   SENDRJ(5),NJHGJNAM-NJH+3(R2) MOVE TO SENDER\nDOUSID   DS    0H\n         CLC   =C'TSO',NJHGUSID-NJH(R2)\n         BNE   DOREST                  NO\n         MVC   NJHGUSID-NJH(5,R2),NJHGUSID-NJH+3(R2)\n         MVC   NJHGUSID-NJH+5(3,R2),$BLANKS\nDOREST   DS    0H\n         MVC   USERJ(7),$BLANKS       CLEAR\n         MVC   USERJ(7),PDBWTRID-PDB(R3) MOVE USERID OF RECR\n         ICM   R7,15,PDBRECCT-PDB(R3) GET RECORD COUNT\n         CVD   R7,DWORK                MAKE DEC\n         MVC   DDWORK,=X'4020202020202120' MASK IT\n         ED    DDWORK(8),DWORK+4       MAKE PRINTABLE\n         MVC   SDRCNT,DDWORK+1         MOVE TO MESSAGE\n         OC    SDRCNT,$BLANKS          MAKE UPPER CASE\n         TIME DEC\n         ST    R0,DWORK                SAVE TIME\n         ST    R1,DWORK+4              SAVE DATE\n         OI    DWORK+3,X'0F'           PUT SIGN ON\n         MVC   DDATE-1(7),=X'4021204B202020'    MAKE DATE READABLE\n         ED    DDATE-1(7),DWORK+5       SAME\n         MVC   CTME1-1(11),=X'4021204B20204B20204B20'\n         ED    CTME1-1(11),DWORK        SAME\n         MVC   DATEJ(6),DDATE          MOVE DATE\n         MVC   TIME1(8),CTME1          MOVE TIME\n         LA    R4,USERJ                POINT TO USER\n         LA    R5,7                    SET COUNT\n         MVC   USERJ1,$BLANKS\nADUSR    DS    0H\n         CLI   0(R4),C' '              END OF STRING\n         BE    ADUSR1                  YES\n         LA    R4,1(,R4)               ADJUST PTR\n         BCT   R5,ADUSR\nADUSR1   DS    0H\n         MVC   0(L'RST,R4),RST         MOVE THE REST\n         LA    R1,SENDJ1\n         SR    R4,R1\n         LA    R4,L'RST(,R4)\n         STH   R4,SENDJ1\n         LA    R0,0\n         LA    R1,SENDJ1\n         SVC   34\nEX2RET08 LA    R15,8               SET RETURN CODE 8 NOTIFY USER\n         $RETURN RC=(R15)          RETURN TO CALLER\n         SPACE 3\nEX2RET00 LA    R15,0               SET ZERO RETURN CODE.\n         $RETURN RC=(R15)          RETURN TO CALLER\n         SPACE 3\n         TITLE 'BII EXIT 013 CONSTANTS AND DSECTS      '\n*****************************************************************\nDWORK    DC    D'0'\n         DC    C' '\nDDATE    DC    CL6' '\n         DC    C' '\nCTME1    DC    CL10' '\nDDWORK   DC    CL8' '\n         DS    0F\nSENDJ1   DC    AL2(SENDE-SENDJ1)\n         DC    AL2(0)\n         DC    C'SE ',X'7D'\nDATEJ    DC    C'YY.DDD'\n         DC    C' '\nTIME1    DC    C'HH.MM.SS'\n         DC    C' '\n         DC    C'$HASP549 MAIL FROM '\nNODEJ    DC    CL8' ',C' - '\nSENDRJ   DC    CL7' ',C' '\n         DC    C'RECORDS - '\nSDRCNT   DC    CL7' ',X'7D'\n         DC    C',USER=('\nUSERJ    DC    CL7' '\nUSERJ1   DC    CL15' '\nSENDE    EQU   *\nRST      DC    C'),LOGON '\n         SPACE 1\n         LTORG\n*****************************************************************\n         DROP  ,\n         TITLE 'BII TSOE EPILOG'\n         $MODEND ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT088/FILE088.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT088", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}