./ ADD NAME=$$NOTE01 0100-14178-14178-0012-00001-00001-00000-SBGOLOB
The macro SQL_INCLUDE had to be renamed as SQLINCLU
./ ADD NAME=ABEND    0100-14178-14178-0013-00050-00050-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 10/27/05 RPI56 - correct OIHH to OILH to set dump bit
.* 04/10/06 RPI 244 - update parm support
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       ABEND &COMP,      COMPLETION CODE NNN OR (REG)                X
               &DUMP,      DUMP ALLOCATED PROGRAM STORAGE              X
               &STEP,      IGNORED                                     X
               &TYPE,      IGNORED                                     X
               &MF=I,      NOT SUPPORTED                               X
               &REASON=,   IGNORED                                     X
               &DUMPOPT=,  IGNORED                                     X
               &DUMPOPX=   IGNORED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   (N'&SYSLIST GE 1).CHKHIGH
         MNOTE 12,'ABEND COMPLETION CODE REQUIRED'
         MEXIT
.CHKHIGH AIF   (N'&SYSLIST LE 4).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(5)'
         MEXIT
.NPOK    ANOP
.*
.* ABORT TASK WITH OPTIONAL DUMP
.*
         AIF  ('&COMP'(1,1) EQ '(').REGCOMP
         LA   1,&COMP
         AGO  .CHKDUMP
.REGCOMP ANOP
         ZOPTLR 1,&COMP(1)
.CHKDUMP ANOP
         AIF  ('&DUMP' EQ '').SKIPDUMP
         OILH 1,X'8000'
.SKIPDUMP ANOP
         SVC  13 ABEND R1=COMP CODE AND HIGH BIT = DUMP PGM STORAGE
         MEXIT
.ERR1    MNOTE 12,'ABEND MF= NOT SUPPORTED'
         MEND
./ ADD NAME=ACB      0100-14178-14178-0013-00071-00071-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 07/26/07 INITIAL CODING
.* 08/19/07 RPI 680 FIX 10 MUTUALLY MISSPELLED
.* 09/04/07 RPI 691 ADD ACBNAME, ACBDCBN, ACBDCBS, ACBDCBP
.* 09/24/07 RPI 702 ADD ACBOPENC UNIQUE ACB OPEN COUNT FOR RPL RESET
.* 11/26/07 RPI 723 MOVE GETOK, GETNF FROM ACB TO RPL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       ACB   &AM=VSAM,      VSAM VS VTAM                             X
               &BUFSP=0,      MAXIMUM BUFFER SPACE FOR CLUSTER         X
               &DDNAME=,      DDNAME FOR VSAM CLUSTER DEFINITION TABLE X
               &DSNAME=0,     DSNAME FOR VSAM CLUSTER DEFINITION TABLE X
               &EXLST=0,      NOT CURRENTLY SUPPORTED                  X
               &MACRF=        PROCESSING OPTIONS
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AGO   .POSLOOP
.POSEND  ANOP
         AIF   ('&AM' NE 'VSAM').ERR1
         AIF   ('&EXLST' NE 0).ERR2
&N       DS    0D
         DC    X'A0'                    ACBID    VSAM VS VTAM
         DC    X'11'                    ACBSTYPE 11-1F VSAM 20-2F VTAM
         DC    AL2(ACBEND-IHAACB)       ACBLEN   ACB LENGTH
         DC    A(0)                     ACBAMBL  ACCESS METHOD PARMS
         DC    A(0)                     ACBIFR   VTAM INTERFACE ROUTINE
.*
.* SET ZGENMAC1-4 USING ZGENMACF SHARED WITH MODCB
.*
         GBLC  &ZGENMACF1,&ZGENMACF2,&ZGENMACF3,&ZGENMACF4
         ZGENMACF MACRF=&MACRF
         DC    B'&ZGENMACF1' ACBMACF1
         DC    B'&ZGENMACF2' ACBMACF2
         DC    B'&ZGENMACF3' ACBMACF3
         DC    B'&ZGENMACF4' ACBMACF4
         DC    X'00'                    ACBOFLAGS OPEN FLAGS
         DC    XL3'00'                  ALIGNMENT
         AIF   ('&DDNAME' EQ '').DDDEF
         DC    CL8'&DDNAME'
         AGO   .DDEND                   ACBDDNAM  DDNAME FOR VCDT CAT
.DDDEF   ANOP
         DC    CL8'&N'
.DDEND   ANOP
*
* ACB Z390 EXTENSIONS
*
         DC    A(&DSNAME)               ACBDSNAM  DSNAME FOR VCDT.390
         DC    CL8'&N'                  ACBVCLRN  ACB LABEL DEF VCLR
         DC    A(0)                     ACBVCLRA  ADDR OF VCLR ENTRY
         DC    A(0)                     ACBVAIXA  ADDR OF VAIX PTH ENT
         DC    F'0'                     ACBDCBN   NUMBER OF DCBS OPEN
         DC    A(0)                     ACBDCBA   ADDR OF DCB TABLE
         DC    F'0'                     ACBOPENC  UNIQUE ACB OPEN COUNT
         ACBD
         DCBD
         MEXIT
.ERR1    MNOTE 12,'ACB ONLY AM=VSAM IS SUPPORTED'
         MEXIT
.ERR2    MNOTE 12,'ACB EXLST NOT CURRENTLY SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=ACBD     0100-14178-14178-0013-00087-00087-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 07/26/07 INITIAL CODING
.* 08/29/07 RPI 688 SPLIT MACRF INTO MACR1-4 WITH 1 BYTE EQU'S
.* 09/04/07 RPI 691 ADD ACBVCLRN, ACBVCLRA, ACBVAIXA, ACBDCBT, ACBDCBA
.* 09/24/07 RPI 702 ADD ACBOPENC UNIQUE OPEN COUNT FOR RPL RESET
.* 11/25/07 RPI 723 ADD ACBGETNF PRE-REQ FOR KSDS UPD INSERT VS REWRITE
.* 11/26/07 RPI 723 MOVE GETOK, GETNF FROM ACB TO RPL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         ACBD
.*
.* IF ACBD ALREADY DEFINED EXIT NOW
.*
         GBLB  &Z390_ACBD
         GBLC  &Z390_ACBD_NAME,&Z390_ACBD_TYPE
         AIF   (&Z390_ACBD).EXIT
&Z390_ACBD      SETB 1
&Z390_ACBD_NAME SETC '&SYSLOC'
&Z390_ACBD_TYPE SETC '&SYSSTYP'
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'ACBD UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.*       ACCESS CONTROL BLOCK DSECT FOR VSAM
.*
IHAACB   DSECT
ACBID    DS    X              X'A0'  = VSAM VS VTAM
ACBSTYPE DS    X              X'11-1F' = VSAM SUBTYPES
ACBLEN   DS    H              LENGTH OF ACB
ACBAMBL  DS    A              AMB LIST POINTER
ACBIFR   DS    A              VTAM INTERFACE ROUTINE (O FOR VSAM)
ACBMACRF DS    F              MACRO ACCESS TYPE FLAGS
         ORG   *-4
ACBMACR1 DS    X              MACRF FLAGS BYTE 1
ACBMACR1_KEY    EQU X'80' KEY ACCESS TO KS OR RR
ACBMACR1_ADR    EQU X'40' RBA ADDRESS ACCESS TO KS OR ES
ACBMACR1_CNV    EQU X'20' CONTROL INTERAL ACCESS(NOT SUPPORTED)
ACBMACR1_SEQ    EQU X'10' SEQUENTIAL ACCESS TO KS, ES, RR
ACBMACR1_DIR    EQU X'08' DIRECT     ACCESS TO KS, ES, RR
ACBMACR1_IN     EQU X'04' INPUT ONLY FROM KS, ES, RR
ACBMACR1_OUT    EQU X'02' OUTPUT ADD, UPDATE, DELETE KS,ES,RR
ACBMACR1_UBF    EQU X'01' USER BUFFER MGT - USE AREA   (IGNORED)
ACBMACR2 DS    X              MACRF FLAGS BYTE 2
ACBMACR2_SKP    EQU X'80' SKIP SEQUENTIAL ACCESS TO KS, RR
ACBMACR2_NLOGON EQU X'40' NO LOGON REQUIRED - ALWAYS   (IGNORED)
ACBMACR2_RST    EQU X'20' DATA SET REUSABLE - ALWAYS   (IGNORED)
ACBMACR2_DSN    EQU X'10' SUBTASK SHARING BASED ON DSN (IGNORED)
ACBMACR2_AIX    EQU X'08' PROCESS ALT. INDEX VS BASE   (IGNORED)
ACBMACR2_LSR    EQU X'04' LOCAL SHARED RESOURCES       (IGNORED)
ACBMACR2_GSR    EQU X'02' GLOBAL SHARED RESOURCES      (IGNORED)
ACBMACR2_ICI    EQU X'01' IMPROVE CONTROL INT. PROC.   (IGNORED)
ACBMACR3 DS    X              MACRF FLAGS BYTE 3
ACBMACR3_DFR    EQU X'80' DEFERR PUT'S UNTIL WRTBFR    (IGNORED)
ACBMACR3_SIS    EQU X'40' SEQUENTIAL INSERT STRATEGY   (IGNORED)
ACBMACR3_CFX    EQU X'20' FIX CBS AND BUFFERS          (IGNORED)
ACBMACR4 DS    X              MACRF FLAGS BYTE 4
ACBOFLGS DS    X              OPEN FLAGS
ACBOPEN  EQU   X'80'          ACB IS OPEN
ACBGET   EQU   X'40'          GET ALLOWED
ACBPUT   EQU   X'20'          PUT ALLOWED
ACBAIXP  EQU   X'10'          USE PATH AIX KEY VERSUS PRIMARY KEY
ACBAIXU  EQU   X'08'          UPGRADE AIX INDEXES (SEE VPTH OPTION)
         DS    XL3            ALIGNMENT
ACBDDNAM DS    CL8            DDNAME > ENV VAR > VCDT_NAME[.VCLR/VPTH]
*
* ACB Z390 EXTENSIONS
*
ACBDSNAM DS    A              ADDRESS OF USER SUPPLIED VCDT[.VCLR/VPTH]
ACBVCLRN DS    CL8            VCLR NAME LABEL (CAT.VCLR MAY OVERRIDE)
ACBVCLRA DS    A              ADDRESS VCLR CLUSTER ENTRY IN VCDT CAT
ACBVAIXA DS    A              ADDRESS VAIX FOR ALTERNATE PATH  ACCESS
ACBDCBT  DS    F              TOTAL DCBS FOR VES,VX0, AND VXN UGRADES
ACBDCBA  DS    A              ADDR OF DYN ALLOC DCB TABLE
ACBOPENC DS    F              UNIQUE ACB OPEN COUNT FOR RPL RESET
ACBEND   EQU  *
          AIF  ('&Z390_ACBD_NAME' EQ '' OR '&Z390_ACBD_TYPE' EQ '').EXIX
               T
&Z390_ACBD_NAME &Z390_ACBD_TYPE
.EXIT    ANOP
         MEND
./ ADD NAME=ASMMREL  0100-14178-14178-0013-00060-00060-00000-Z390MAC
         MACRO                                                          00002
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/30/08                                                 *
.*********************************************************************
.* 07/31/08 RPI 884 USE OPSYN TO REPLACE BC WITH BR TYPE BRANCH OPS
.*********************************************************************
&N       ASMMREL &OPTION
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&OPTION' EQ 'OFF').EXIT
*
* RELATIVE BRANCH SUTSTITUTIONS FOR BASE DISPLACEMENT BRANCH
*
B        OPSYN BRU
BC       OPSYN BRC
BE       OPSYN BRE
BH       OPSYN BRH
BL       OPSYN BRL
BNE      OPSYN BRNE
BNH      OPSYN BRNH
BNL      OPSYN BRNL
BM       OPSYN BRM
BO       OPSYN BRO
BP       OPSYN BRP
BZ       OPSYN BRZ
BNM      OPSYN BRNM
BNO      OPSYN BRNO
BNP      OPSYN BRNP
BNZ      OPSYN BRNZ
BCT      OPSYN BRCT
BXH      OPSYN BRXH
BXHG     OPSYN BRXHG
BXLE     OPSYN BRXLE
BXLEG    OPSYN BRXLG
BCT      OPSYN BRCT
*
* LONG DISPLACEMENT SUBSTITUTION FOR STANDARD BASE DISPLACMENT
*
CS       OPSYN CSY
CLM      OPSYN CLMY
STCM     OPSYN STCMY
CDS      OPSYN CDSY
TM       OPSYN TMY
MVI      OPSYN MVIY
NI       OPSYN NIY
CLI      OPSYN CLIY
OI       OPSYN OIY
XI       OPSYN XIY
ICM      OPSYN ICMY
STM      OPSYN STMY
LM       OPSYN LMY
LAM      OPSYN LAMY
STAM     OPSYN STAMY
.EXIT    ANOP
         MEND
./ ADD NAME=BLDL     0100-14178-14178-0013-00051-00051-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/12/06 RPI244 ADD BLDL FOR SUPPORT OF DE= ON LINK, LOAD, XCTL
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/06 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.* BLDL SEARCH SYS390 DIRECTORIES FOR MEMBER NAMES IN LIST AND
.* SET R15 RETURN CODE:
.*   0 - ALL MEMBERS FOUND
.*   4 - ONE OR MORE NOT FOUND (R FIELD SET TO 1 IF FOUND ELSE 0)
.*   8 - LIST COUNT < 1 OR ENTRY LENGTH < 12
.*
.* BLDL LIST HAS HWORD COUNT OF NUMBER OF ENTRIES (1 OR MORE)
.* BLDL ENTRY HAS FOLLOWING FORMAT (THIS ADDR CAN BE USED IN DE=)
.*   LL    HWORD COUNT OF BYTES IN ENTRY (12 OR MORE)
.*   NAME  CL8   EBCDIC NAME
.*   TTR   XL3   TRACK AND RECORD POINTER (R=0 IF NOT FOUND ELSE > 0)
.*   K     XL1   CONCATENATION #
.*   Z     XL1   LOCATION FOUND (0=PRIVATE,1=LPA,2=JPA,3+=PARENT)
.*   C     XL1   ALIAS IF HIGH BIT ON, LENGTH OF USER DATA
.*   ???   XLN   USER DATA INCLUDED IN ENTRY LL (SUCH AS PGM LINK DATA)
.*********************************************************************
&N       BLDL  &DCB,      IGNORED                                      X
               &LIST,     BLDL LIST WITH HWORD TOTAL LENGTH            X
               &MF=I,     NOT SUPPORTED                                X
               &START=,   INGORED                                      X
               &STOP=     IGNORED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR2
         AIF   ('&LIST' EQ '').ERR1
         AIF   ('&LIST'(1,1) EQ '(').REGLIST
         LA    1,&LIST
         AGO   .SVC
.REGLIST ANOP
         ZOPTLR 1,&LIST(1)
.SVC     ANOP
         SVC   X'12' BLDL R1=BLDL LIST LL(LL,NAME,TTR,KZC,USER),(...)
         MEXIT
.ERR1    MNOTE 12,'BLDL MISSING BLDL LIST ADDRESS'
         MEXIT
.ERR2    MNOTE 12,'BLDL MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=CALL     0100-14178-14178-0013-00018-00018-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 11/14/08 RPI 953 - move CALL content to ZCALL
.*********************************************************************
&N      CALL   &NAME,                                                  X
               &PARMS,                                                 X
               &VL,            SET END OF LIST HIGH BIT                X
               &ID=,           IGNORE                                  X
               &LINKINST=BALR,                                         X
               &MF=I           I/L/E FORMS SUPPORTED
&N       ZCALL &NAME,&PARMS,&VL,ID=&ID,LINKINST=&LINKINST,MF=&MF
         MEND
./ ADD NAME=CASE     0100-14178-14178-0013-00051-00051-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/23/08.
.*             REMARKS.  ADD SPM MACROS FOR CASENTRY, CASE, ENDCASE
.********************************************************************
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.* 11/10/08 RPI 946 fill address table to avoid INIT x'F6' in 390
.* 11/19/08 RPI 964 allow use of self defining terms for index values
.********************************************************************
         CASE  &VALUE
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'CASE - MISSING CASENTRY'
               MEXIT
         AEND
         AIF   (&ZSTR_LVL_TYPE(&ZSTR_LVL) NE 'CASENTRY')
               MNOTE 8,'CASE - MISSING CASENTRY'
               MEXIT
         AEND
         AIF   (T'&VALUE EQ 'N')
               :&NVALUE SETA &VALUE
         AELSEIF ('&VALUE'(1,2) EQ 'C''')
               :&NVALUE SETA C2A('&VALUE'(3,1))
         AELSEIF ('&VALUE'(1,2) EQ 'X''')
               :&NVALUE SETA X2A('&VALUE'(3,K'&VALUE-3))
         AELSE
               MNOTE 8,'CASE INVALID INDEX VALUE - &VALUE'
               MEXIT
         AEND
         AIF   (&NVALUE GT &ZSTR_CASE_MAX(&ZSTR_LVL))
               :&ZSTR_CASE_MAX(&ZSTR_LVL) SETA &NVALUE
         AEND
         AIF   (&ZSTR_LVL_BCNT(&ZSTR_LVL) GT 0)
         B     #@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E
         AEND
         :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA &ZSTR_LVL_BCNT(&ZSTR_LVL)+1
#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&NVALUE DS 0H
#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_L LOCTR
         AIF   (&NVALUE GT &ZSTR_CASE_LAST_INDEX) rpi 946
               :&LFILL SETA (&NVALUE-&ZSTR_CASE_LAST_INDEX-1)
               AIF (&LFILL GT 0)
         DC    (&LFILL)A(0)
               AEND
               :&ZSTR_CASE_LAST_INDEX SETA &NVALUE
         AELSE
               MNOTE 8,'CASE VALUE NOT IN ASCENDING SEQUENCE - &VALUE'
         AEND
         DC    A(#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&NVALUE)
&SYSECT  CSECT
         MEND
./ ADD NAME=CASENTRY 0100-14178-14178-0013-00032-00032-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/23/08.
.*             REMARKS.  ADD SPM MACROS FOR CASENTRY, CASE, ENDCASE
.********************************************************************
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.* 11/10/08 RPI 946 fill address table to avoid INIT x'F6' in 390
.********************************************************************
         CASENTRY &REG
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ &ZSTR_MAX_LVL)
               MNOTE 8,'CASENTRY - LEVEL OVERFLOW'
               MEXIT
         AEND
         :&ZSTR_LVL SETA &ZSTR_LVL+1
         :&ZSTR_LVL_TYPE(&ZSTR_LVL) SETC 'CASENTRY'
         :&ZSTR_CASE_CNT SETA &ZSTR_CASE_CNT+1
         :&ZSTR_LVL_TCNT(&ZSTR_LVL) SETA &ZSTR_CASE_CNT
         :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA 0 RESET BLK CTR
         :&ZSTR_LVL_ELSE(&ZSTR_LVL) SETB 0 RESET OTHRWISE BLK
         :&ZSTR_LVL_TEND(&ZSTR_LVL) SETB 1 REQUEST END LABEL
         :&ZSTR_CASE_REG(&ZSTR_LVL) SETC '&REG' SAVE FOR ENDCASE CODE
         AIF ('&REG' EQ '')
             MNOTE 8,'CASENTRY - MISSING REGISTER WITH INDEX 0-N'
         AEND
#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_L LOCTR
#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_T DS 0A START CASENTRY BRANCH TABLE
&ZSTR_CASE_LAST_INDEX SETA -1 RPI 946 START FILLING TABLE AT INDEX 0
&SYSECT  CSECT
         B     #@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_G BRANCH TO CASE CODE
         MEND
./ ADD NAME=CDED     0100-14178-14178-0013-00025-00025-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2009 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 09/18/09 RPI 1063 DEFINE IHADCB DSECT
.*********************************************************************
.* Z390 ZCVT CVTCDE POINTS TO FIRST CDE SINCE THERE IS NO TCB OR RB
.*********************************************************************
         CDED
IHACDE   DSECT
CDENTRY  DS    0X
CDCHAIN  DS    A   ADDRESS OF NEXT CDE ENTRY OR 0
         DS    XL4 RESERVED
CDNAME   DS    CL8 PROGRAM NAME OF LOADED MODULE
CDENTPT  DS    A   ADDRESS OF RELOCATED ENTRY POINT
         DS    XL4 RESERVED
CDUSE    DS    H   USE COUNT
         DS    XL6
CDLOADPT DS    A   LOAD ADDRESS (MAY BE DIFFERENT FROM ENTRY) Z390 EXT
CDMODLEN DS    A   LOAD MODULE LENGTH                         Z390 EXT
CDELEN   EQU   *-IHACDE
         MEND
./ ADD NAME=CFD      0100-14178-14178-0013-00084-00084-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/17/06                                                 *
.*********************************************************************
.* 11/10/06 RPI 477 SUPPORT ASCII OPTION, REGISTER INPUT, RC=12 VS ERR
.* 11/29/06 RPI 507 SUPPORT OUT=REG (GPR OR FPR OUTPUT REG)
.*                  (NOTE OUT=(REG) INDICATES FIELD ADDR IN GPR)
.* 12/10/06 RPI 514 ADD DFP SUPPORT FOR DD, ED, AND LD TYPES
.* 04/19/06 RPI 833 add SETC quotes for HLASM compatibility
.* 06/14/08 RPI 863 add error messages for extra positional parms
.*********************************************************************
.*
.*  CONVERT FROM EBCDIC DECIMAL FIELD TO BINARY FIELD FORMAT
.*    TYPE    OUTPUT               INPUT
.*     21      128 BIT INTEGER     45 BYTE DECIMAL (SIGN+39 DIGITS)
.*     22      HFP SHORT EH        45 BYTE SCIENTIFIC (N.N( 7)+ENNNN)
.*     23      DFP SHORT EB        45 BYTE SCIENTIFIC (N.N( 7)+ENNNN)
.*     24      HFP LONG  DH        45 BYTE SCIENTIFIC (N.N(14)+ENNNN)
.*     25      BFP LONG  DB        45 BYTE SCIENTIFIC (N.N(14)+ENNNN)
.*     26      HFP EXT.  LH        45 BYTE SCIENTIFIC (N.N(34)+ENNNN)
.*     27      BFP EXT.  LB        45 BYTE SCIENTIFIC (N.N(34)+ENNNN)
.*     28      DFP LONG  DD        45 BYTE SCIENTIFIC (N.N(16)+ENNNN)
.*     29      DFP SHORT ED        45 BYTE SCIENTIFIC (N.N( 7)+ENNNN)
.*     30      DFP EXT.  LD        45 BYTE SCIENTIFIC (N.N(34)+ENNNN)
.*
.* IF LINKAGE=SVC
.*   USE CFD Z390 SVC 171 R1=A(TYPE,OUT,IN)
.* ELSE
.*   USE CFD MAINFRAME SERVICE ROUTINE MFCONMFS(TYPE,OUT,IN)
.* ENDIF
.*
.* R15 RETURN CODE
.*    0 OK
.*   12 INVALID REQUEST
.*
.*********************************************************************
&N       CFD   &TYPE,         SEE 7 CONVERSION TYPES BELOW             X
               &IN=,          SOURCE FIELD (RX OR REG)                 X
               &OUT=,         TARGET FIELD (RX OR REG)                 X
               &LINKAGE=SVC   SVC= Z390 171, MF=CALL TO FPCONMFC
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS LE 1).POSEND
         MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AGO   .POSLOOP
.POSEND  ANOP
&N       DS    0H
.SKIPDS  ANOP
         GBLB  &CFD_EQUS
         AIF   (&CFD_EQUS).SKIP_CFD_EQUS
&CFD_EQUS SETB 1
CFD_INT128 EQU 21 CONVERT TO 128 BIT INT FROM 45 BYTE SN(39)
CFD_EH   EQU   22 CONVERT TO HFP SHORT EH FROM 45 BYTE SN.N(7)+ENNNN
CFD_EB   EQU   23 CONVERT TO BFP SHORT EB FROM 45 BYTE SN.N(7)+ENNNN
CFD_DH   EQU   24 CONVERT TO HFP LONG  DH FROM 45 BYTE SN.N(14)+ENNNN
CFD_DB   EQU   25 CONVERT TO BFP LONG  DB FROM 45 BYTE SN.N(14)+ENNNN
CFD_LH   EQU   26 CONVERT TO HFP EXT.  LH FROM 45 BYTE SN.N(34)+ENNNN
CFD_LB   EQU   27 CONVERT TO BFP EXT.  LB FROM 45 BYTE SN.N(34)+ENNNN
CFD_DD   EQU   28 CONVERT TO DFP LONG  DD FROM 45 BYTE SN.N(16)+ENNNN
CFD_ED   EQU   29 CONVERT TO DFP SHORT ED FROM 45 BYTE SN.N( 7)+ENNNN
CFD_LD   EQU   30 CONVERT TO DFP EXT.  LD FROM 45 BYTE SN.N(34)+ENNNN
.SKIP_CFD_EQUS ANOP
         LA    1,=A(&TYPE,&OUT,&IN)
         AIF   ('&TYPE'(1,1) NE '(').CHKIN
         ST    &TYPE(1),0(1)
.CHKIN   ANOP
         AIF   ('&IN'(1,1) NE '(').CHKOUT
         ST    &IN(1),8(1)                  RPI 507
.CHKOUT  ANOP
         AIF   ('&OUT'(1,1) NE '(').SVC
         ST    &OUT(1),4(1)                 RPI 507
.SVC     ANOP
         AIF   ('&LINKAGE' NE 'SVC').CALL
         SVC   171 CFD Z390 SVC R1=A(TYPE,OUT,IN)
         MEXIT
.CALL    ANOP
         L     15,=V(FPCONMFC) CFD MAINFRAME CALL ROUTINE
         BASR  14,15 CALL FPCONMFC,(TYPE,OUT,IN)
         MEND
./ ADD NAME=CHECK    0100-14178-14178-0013-00043-00043-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 04/12/06 RPI244 IGNORE DSORG=
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/06 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       CHECK &DECB,                                                  X
               &DSORG=ALL,                                             X
               &MF=I        NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   (N'&SYSLIST EQ 1).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.*       CHECK COMPLETION OF SEQUENTIAL READ OR WRITE
.*
.*       CHECK ECB COMPLETION CODE IN DECB (NO WAIT REQ'D)
.*          IF      ECB = X'42' TAKE EODAD EXIT
.*          ELSE IF ECB = X'41' TAKE SYNAD EXIT
.*          ELSE    EXIT NORMALLY
.*
         AIF   ('&DECB'(1,1) EQ '(').DECBREG
         LA    1,&DECB
         AGO   .SVC
.DECBREG ANOP
         ZOPTLR 1,&DECB(1)
.SVC     ANOP
         SVC   155 CHECK R1=DECB
         MEXIT
.ERR1    MNOTE 12,'CHECK MF= NOT SUPPORTED'
         MEND
./ ADD NAME=CLOSE    0100-14178-14178-0013-00016-00016-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/15/08                                                 *
.*********************************************************************
.* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
.*********************************************************************
&N       CLOSE &DCBLIST, ((DCB,OPT),(DCB2,OPT2)..) OR (DCB) OR DCB     X
               &MODE=,   IGNORED AS IT WORKS IN EITHER MODE            X
               &MF=I,    NOT SUPPORTED                                 X
               &TYPE=    IGNORED
&N       ZCLOSE &DCBLIST,MODE=&MODE,MF=&MF,TYPE=&TYPE
         MEND
./ ADD NAME=CMDPROC  0100-14178-14178-0013-00109-00109-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 10/29/05                                                 *
.*********************************************************************
.* MAINTENANCE
.* 11/09/05 ADD &ID=0 TASK ID AND &WAIT=500 MILLISECONDS WAIT FOR READ
.* 11/11/05 FIX INCORRECT LENGHT IN R2
.* 01/09/06 RPI 163 SKIP LR FOR SAME REGISTER
.* 01/16/06 RPI 177 REQUIRE LENGTH PARM IF REC IS REGISTER FORM
.* 02/20/07 RPI 551 ADD SUPPORT FOR IP=(REG)
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 10/29/07 RPI 731 ADD CMDLOG=YES TO COPY ALL CMD STD OUTPUT TO LOG
.* 04/19/06 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.*
.* CMDPROC PROVIDES INTERFACE TO SUPPORT UP TO 10 CONCURRENT
.* WINDOWS PROCESSES:
.*  START,ID=N STARTS PROCESS WITH OR WITHOUT AUTO LOGGING OF OUTPUT
.*             IF CMDLOG=NO THEN PARENT TASK MUST ISSUE CMDPROC READ
.*             TO RETRIEVE CMD OUTPUT FROM MEMORY QUEUE.  IF MEMORY
.*             QUEUE EXCEEDS OPTION MAXQUE(1000) THEN ERROR IS ISSUED
.*             AND AUTO LOGGING IS TURNED ON FOR ALL CMDS AND
.*  STOP,ID=N  STOPS  PROCESS
.*  WRITE,REC,ID=N SENDS NULL OR DOUBLE QUOTE DELIMITED COMMAND
.*             TO A PROCESS STANDARD INPUT
.*  READ,REC,LEN,ID=N,WAIT=S READS NEXT STANDARD OUTPUT LINE FROM
.*             PROCESS.  READ WILL WAIT UP TO MILLISECOND LIMIT.
.*  RETURN CODES:
.*    0 - OPERATIN SUCCESSFUL (RECORD RETURNED FOR READ)
.*    4 - NO READ RETURNED IN TIME ALLOWED
.*    8 - NO READ RECORD RETURNED AND PROCESS ENDED
.*   12 - PROCESS ERROR OCCURRED - SEE ERROR MESSAGE ON LOG
.*********************************************************************
&N       CMDPROC &OP,&REC,&LEN,&ID=0,&WAIT=500,&CMDLOG=YES
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   (N'&SYSLIST LE 3).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(5)'
.NPOK    ANOP
         AIF   ('&OP' EQ 'START').START
         AIF   ('&OP' EQ 'STOP').STOP
         AIF   ('&OP' EQ 'WRITE').WRITE
         AIF   ('&OP' EQ 'READ').READ
         MNOTE 12,'CMDPROC UNDEFINED OPERATION - &OP'
         MEXIT
.START   ANOP
         LA    0,0 ASSUME START WITH NO CMDLOG
         AIF   ('&CMDLOG' NE 'YES').SETID
         ICM   0,4,=X'01' SET CMDLOG ON TO ROUTE ALL OUTPUT TO LOG
         AGO   .SETID
.START_CMDLOG ANOP
         LA    0,X'0100' TEXT MAXQUE START CMD WITH AUTO LOGGING
         AGO   .SETID
.STOP    ANOP
         LA    0,1  STOP COMMAND PROCESSOR
         AGO   .SETID
.WRITE   ANOP
         LA    0,2  WRITE CMD TO PROCESS
         AIF   ('&REC'(1,1) EQ '(').WRITE_REC_REG
         LA    1,&REC EBCDIC NULL TERM OR DQOUTES
         AGO   .SETID
.WRITE_REC_REG  ANOP
         ZOPTLR 1,&REC(1)
         AGO   .SETID
.READ    ANOP
         LA    0,3 READ CMD OUTPUT LINE
         AIF   ('&REC'(1,1) EQ '(').READ_REC_REG
         LA    1,&REC
         AGO   .READ_LEN
.READ_REC_REG ANOP
         ZOPTLR 1,&REC(1)
         AIF   ('&LEN' NE '').READ_LEN
         MNOTE 12,'CMDPROC READ MISSING LENGTH FOR REGISTER REC FORM'
         MEXIT
.READ_LEN ANOP
         AIF   ('&LEN' EQ '').LREC
         AIF   ('&LEN'(1,1) EQ '(').READ_LEN_REG
         LA    2,&LEN
         AGO   .READ_WAIT
.LREC    ANOP
         LA    2,L'&REC
         AGO   .READ_WAIT
.READ_LEN_REG  ANOP
         ZOPTLR 2,&LEN(1)
.READ_WAIT ANOP
         AIF   ('&WAIT'(1,1) EQ '(').READ_WAIT_REG
         LA    3,&WAIT
         AGO   .SETID
.READ_WAIT_REG  ANOP
         ZOPTLR 3,&WAIT(1)
.SETID   ANOP                                              RPI 551
         AIF   ('&ID' EQ '0').SVC
         AIF   ('&ID'(1,1) EQ '(').IDREG
         ICM   0,2,=AL1(&ID)
         AGO   .SVC
.IDREG   ANOP
         ZOPTLR 15,&ID(1)
.SKIP15  ANOP
         SLL  15,8
         OR   0,15
.SVC     ANOP
         SVC   34 R0=(BYTE3=ID,BYTE4=OP),R1=A(REC),R2=LREC,R3=MILS WAIT
         MEXIT
         MEND
./ ADD NAME=CPOOL    0100-14178-14178-0013-00061-00061-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 02/12/09                                                 *
.*********************************************************************
.* 02/12/09 RPI 996 ADD INITIAL CPOOL SUPPORT FOR BUILD AND GET
.*********************************************************************
&N       CPOOL &TYPE,        BUILD, GET, FREE, DELETE                  X
               &COND,        U,UNCOND,C,COND                           X
               &CPID=,       CPOOL ID ADDR OF FULL WORD                X
               &PCELLCT=,    PRIMARY CELL COUNT                        X
               &SCELLCT=,    SECONDARY CELL COUNT                      X
               &CSIZE=,      CELL SIZE                                 X
               &HDR=         DESCRIPTION
         AIF   ('&TYPE' EQ 'BUILD').BUILD
         AIF   ('&TYPE' EQ 'GET').GET
         MNOTE 8,'CPOOL UNKNOWN TYPE - &TYPE'
         MEXIT
.BUILD   ANOP
         GBLA  &CPOOL_ID
&CPOOL_ID SETA &CPOOL_ID+1
CPOOL_&CPOOL_ID_BUILD DS 0H
         L     R3,CPOOL_&CPOOL_ID._TL  TOTAL LENGTH
         GETMAIN R,LV=(R3)
         LR    R2,R1
         SR    R14,R14
         SR    R15,R15
         MVCL  R2,R14                   CLEAR POOL TO ZEROS
         ST    R1,CPOOL_&CPOOL_ID._SA  STARTING ADDR
         S     R1,CPOOL_&CPOOL_ID._EL  BACKUP ONE CELL
         ST    R1,CPOOL_&CPOOL_ID._CA  CURRENT  ADDR
         A     R1,CPOOL_&CPOOL_ID._EL  FORWARD ONE CELL
         A     R1,CPOOL_&CPOOL_ID._TL  FORWARD TOTAL LENGTH
         ST    R1,CPOOL_&CPOOL_ID._EA  ENDING   ADDR
         LA    R0,CPOOL_&CPOOL_ID._GET GEN RETURN R0=A(GET ENTRY)
         J     CPOOL_&CPOOL_ID._END    SKIP GET RTN AND DATA
CPOOL_&CPOOL_ID._GET DS 0H
         USING *,R15
         L     R1,CPOOL_&CPOOL_ID._CA PREV CELL ADDR
         A     R1,CPOOL_&CPOOL_ID._EL ADD  CELL LENGTH
         ST    R1,CPOOL_&CPOOL_ID._CA CURR CELL ADDR
         C     R1,CPOOL_&CPOOL_ID._EA ARE WE AT END
         BLR   R14                     NO RETURN R1=A(CURR CELL)
         SR    R1,R1                  ELSE
         BR    R14                     RETURN R1=ZERO
         DROP  R15
         DC    C&HDR              CPOOL HEADER TEXT
CPOOL_&CPOOL_ID._EL DC  A(&CSIZE) CPOOL &CPOOL_ID CELL SIZE
CPOOL_&CPOOL_ID._TL DC  A((&PCELLCT+&SCELLCT)*&CSIZE) TOT LENGTH
CPOOL_&CPOOL_ID._SA DS  A  CPOOL &CPOOL_ID STARTING ADDRESS
CPOOL_&CPOOL_ID._CA DS  A  CPOOL &CPOOL_ID CURRENT  ADDRESS
CPOOL_&CPOOL_ID._EA DS  A  CPOOL &CPOOL_ID ENDING   ADDRESS
CPOOL_&CPOOL_ID._END DS 0H
         MEXIT
.GET     ANOP
         L     R15,&CPID    GALL THE GET ROUTINE CREATED BY BUILD
         BASR  R14,R15      RETURNS CELL ADDR IN R1 ELSE 0
         MEND
./ ADD NAME=CTD      0100-14178-14178-0013-00087-00087-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 11/10/06 RPI 477 SUPPORT ASCII OPTION, REGISTER INPUT, RC=12 VS ERR
.* 11/29/06 RPI 507 SUPPORT IN=REG (GPR OR FPR INPUT VALUE IN REG)
.*                  (NOTE REG MUST NOT BE GPR 1)
.*                  (NOTE IN=(REG) INDICATES FIELD ADDR IN GPR)
.* 12/10/06 RPI 514 ADD DFP DECIMAL FLOATING POINT TYPES
.* 04/19/06 RPI 833 add SETC quotes for HLASM compatibility
.* 06/14/08 RPI 863 add error messages for extra positional parms
.*********************************************************************
.*
.*  CONVERT INPUT NUMERIC FIELD TO DISPLAY EBCDIC FORMAT
.*    TYPE    INPUT                OUTPUT
.*      1       128 BIT INTEGER      45 BYTE DECIMAL (SIGN+39 DIGITS)
.*      2       HFP SHORT EH         45 BYTE SCIENTIFIC (N.N(7)+ENNNN)
.*      3       BFP SHORT EB         45 BYTE SCIENTIFIC (N.N(7)+ENNNN)
.*      4       HFP LONG  DH         45 BYTE SCIENTIFIC (N.N(14)+ENNNN)
.*      5       BFP LONG  DB         45 BYTE SCIENTIFIC (N.N(14)+ENNNN)
.*      6       HFP EXT.  LH         45 BYTE SCIENTIFIC (N.N(34)+ENNNN)
.*      7       BFP EXT.  LB         45 BYTE SCIENTIFIC (N.N(34)+ENNNN)
.*      8       DFP LONG  DD         45 BYTE SCIENTIFIC (N.N(34)+ENNNN)
.*      9       DFP SHORT ED         45 BYTE SCIENTIFIC (N.N(34)+ENNNN)
.*     10       DFP EXT.  LD         45 BYTE SCIENTIFIC (N.N(34)+ENNNN)
.*
.* SVC 170 INPUT
.*  R1 = A(TYPE,IN,OUT)
.* SVC 170 OUTPUT
.*  R15 = 0 OK, 12 INVALID REQUEST
.*********************************************************************
&N       CTD   &TYPE,        CONVERTION TYPE - SEE BELOW               X
               &IN=,         SOURCE FIELD (RX OR REG)                  X
               &OUT=,        TARGET FIELD (RX OR REG)                  X
               &LINKAGE=SVC  USE Z390 SVC ELSE USE CALL TO FPCONMFC
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS LE 1).POSEND
         MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AGO   .POSLOOP
.POSEND  ANOP
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         GBLB  &CTD_EQUS
         AIF   (&CTD_EQUS).SKIP_CTD_EQUS
&CTD_EQUS SETB 1
CTD_INT128 EQU 1 CONVERT 128 BIT INT TO 45 BYTE EBCDIC DECIMAL
CTD_EH   EQU   2 CONVERT HFP SHORT EH TO 45 BYTE EBCDIC N.N( 6)+ENNNN
CTD_EB   EQU   3 CONVERT BFP SHORT EB TO 45 BYTE EBCDIC N.N( 7)+ENNNN
CTD_DH   EQU   4 CONVERT HFP LONG  DH TO 45 BYTE EBCDIC N.N(14)+ENNNN
CTD_DB   EQU   5 CONVERT BFP LONG  DB TO 45 BYTE EBCDIC N.N(15)+ENNNN
CTD_LH   EQU   6 CONVERT HFP EXT.  LH TO 45 BYTE EBCDIC N.N(34)+ENNNN
CTD_LB   EQU   7 CONVERT BFP EXT.  LB TO 45 BYTE EBCDIC N.N(34)+ENNNN
CTD_DD   EQU   8 CONVERT DFP LONG  DD TO 45 BYTE EBCDIC N.N(16)+ENNNN
CTD_ED   EQU   9 CONVERT DFP SHORT ED TO 45 BYTE EBCDIC N.N( 7)+ENNNN
CTD_LD   EQU  10 CONVERT DFP EXT.  LD TO 45 BYTE EBCDIC N.N(34)+ENNNN
.SKIP_CTD_EQUS ANOP
         AIF   ('&IN'(1,1) EQ '=').LIT
         LA    1,=A(&TYPE,&IN,&OUT)
         AGO   .SKPLIT
.LIT     ANOP
         LA    1,=A(&TYPE,0,&OUT)
         LA    0,&IN
         ST    0,4(1)
.SKPLIT  ANOP
         AIF   ('&TYPE'(1,1) NE '(').CHKIN
         ST    &TYPE(1),0(1)
.CHKIN   ANOP
         AIF   ('&IN'(1,1) NE '(').CHKOUT
         ST    &IN(1),4(1)
.CHKOUT  ANOP
         AIF   ('&OUT'(1,1) NE '(').SVC
         ST    &OUT(1),8(1)
.SVC     ANOP
         AIF   ('&LINKAGE' NE 'SVC').CALL
         SVC   170 CTD R1=A(TYPE,IN,OUT)
         MEXIT
.CALL    ANOP
         L     15,=V(FPCONMFC) CFD MAINFRAME CALL ROUTINE
         BASR  14,15 CALL FPCONMFC,(TYPE,OUT,IN)
         MEND
./ ADD NAME=CVTD     0100-14178-14178-0013-00032-00032-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 03/14/06 RPI 228 - ADD CVTDCB AND ALSO CVTECB, CVTPARM
.* 03/28/06 RPI 266 - CORRECT ,* VS .* ON ABOVE LINE
.* 04/10/06 RPI 276 - ADD CVTDATE IPL DATE SET BY IPL(TESTIPL1)
.* 04/23/06 RPI 286 - MOVE ZCVT FIELDS LEAVING ONLY MVS COMPAT. FIELDS
.* 04/23/06 RPI 1063  SET CVTCDE TO FIRST CDE ENTRY DEFINED BY CDED
.*********************************************************************
         CVTD
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.* EZ390 CVT DSECT - ADDRESS STORED AT LOC X'10' AND X'4C'
.*
IHACVT   DSECT
         ORG    IHACVT+X'38'
CVTDATE  DS     PL4   IPL DATE SET BY IPL(TESTIPL1)
         ORG    IHACVT+X'74'
CVTDCB   DS     X     OS FLAGS X'80' = 31 BITS, X'13' = MVS+
         ORG    IHACVT+200
CVTABEND DS     A     SECONDARY CVT  (ZERO FOR NOW)
CVTUSER  DS     A     USER POINTER
CVTCDE   DS     A     ADDRESS FIRST CDE FOR Z390 RPI 1063
         MEND
./ ADD NAME=DCB      0100-14178-14178-0013-00158-00158-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/16/08                                                 *
.*********************************************************************
.* MAINTENANCE
.* 10/12/05 ADD DCBREC AND DCBDSNAM FIELDS, AND DEFAULT DDNAME
.* 10/17/05 RPI  26 - correct missing .DDDEF label
.* 10/17/05 RPI  27 - issue error for any defined key word parms
.* 11/13/05 RPI  88 - add DCBID EBCDIC/ASCII ID for I/O verification
.* 11/16/05 RPI  95 - add DDNAME and DSNAME conflict check
.* 11/17/05 RPI  96 - add RECFM, LRECL, and BLKSIZE consistency check
.* 04/10/06 RPI 244  support RECFM A/M, allow LRECL=0
.* 05/05/06 RPI 281  add DCBE support for EODAD and SYNAD
.* 04/11/07 RPI 587  support 32 bit DCBLRECLF and DCBBLKSIF fields
.* 04/23/07 RPI 599  add call to DCBD to define referened fields
.* 08/03/07 RPI 644  zero DCBOFLGS and fix DCBMACRF when 2 operands
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.* 06/23/08 RPI 867 JUST ISSUE WARNING FOR EXLST NOT SUPPORTED
.* 09/11/08 RPI 764 ADD DCBIO TOTAL IO REQUESTS SINCE OPEN USED BY PL
.* 09/16/08 RPI 91764 ADD DCBIO TOTAL IO REQUESTS SINCE OPEN USED BY PL
.* 11/10/08 RPI 946 INIT ENTIRE DCB TO ZEROS TO AVOID INIT X'F6' FILLER
.*********************************************************************
&N       DCB   &DSORG=PS,    PHYSICAL SEQUENTIAL                       X
               &BFALN=,      IGNORE                                    X
               &BFTEK=,      IGNORE                                    X
               &BLKSIZE=0,   BLOCK SIZE                                X
               &BUFCB=,      IGNORE                                    X
               &BUFL=,       IGNORE                                    X
               &BUFNO=,      IGNORE                                    X
               &BUFOPT=,     IGNORE                                    X
               &DCBE=0,      USE DCBE EODAD AND SYNAD IF NZ  RPI 281   X
               &DDNAME=,     ENVIRONMENT VARIABLE WITH PATH OR FILE    X
               &DEVD=,       UNSUPPORTED ERROR                         X
               &DSNAME=0,    DSN AREA WITH PATH OR FILE (NULL OR "..") X
               &EODAD=0,     END OF FILE EXIT                          X
               &EXLST=,      UNSUPPORTED ERROR                         X
               &KEYLEN=,     UNSUPPORTED ERROR                         X
               &LINCT,       IGNORE                                    X
               &LRECL=0,     RECORD SIZE                               X
               &MACRF=GM,    ACCESS METHOD (GM,PM,R,W)                 X
               &OPTCD=,      IGNORE                                    X
               &RECFM=FB,    RECORD FORMAT (F,FB,V,VB,RT,VT) IGNOR A/M X
               &RECORD=0,    RECORD AREA                               X
               &SYNAD=0      ERROR EXIT
&N       DS    0D             RPI 915
         DC    XL(DCBLEN)'00' RPI 946
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AGO   .POSLOOP
.POSEND  ANOP
         AIF   ('&DEVD'   NE '').ERR2
         AIF   ('&EXLST'  EQ '').NO_EXLST
         MNOTE 4,'DCB EXLST NOT SUPPORTED YET - IGNORED'  RPI 867
.NO_EXLST ANOP
         AIF   ('&KEYLEN' NE '').ERR4
         AIF   ('&RECFM' EQ 'F').CHKF
         AIF   ('&RECFM' EQ 'FA').CHKF
         AIF   ('&RECFM' EQ 'FM').CHKF
         AIF   ('&RECFM' EQ 'FB').CHKFB
         AIF   ('&RECFM' EQ 'FBA').CHKFB
         AIF   ('&RECFM' EQ 'FBM').CHKFB
         AIF   ('&RECFM' EQ 'V').CHKV
         AIF   ('&RECFM' EQ 'VA').CHKV
         AIF   ('&RECFM' EQ 'VM').CHKV
         AIF   ('&RECFM' EQ 'VB').CHKVB
         AIF   ('&RECFM' EQ 'VBA').CHKVB
         AIF   ('&RECFM' EQ 'VBM').CHKVB
         AIF   ('&RECFM' EQ 'FT').CHKFT
         AIF   ('&RECFM' EQ 'VT').CHKVT
         MNOTE 12,'INVALID RECFM - &RECFM'
         MEXIT
.CHKF    ANOP
         AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &LRECL NE &BLKSIZE).EX
               RR_LRECL
         AGO   .CHKEND
.CHKFB   ANOP
         AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE/&LRECL*&LRECX
               L NE &BLKSIZE).ERR_LRECL
         AGO   .CHKEND
.CHKV    ANOP
         AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).EX
               RR_LRECL
         AGO   .CHKEND
.CHKVB   ANOP
         AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND (&BLKSIZE LT (&LRECL+X
               4))).ERR_LRECL
         AGO   .CHKEND
.CHKFT   ANOP
         AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).EX
               RR_LRECL
         AGO   .CHKEND
.CHKVT   ANOP
         AIF   (&LRECL EQ 0 AND &BLKSIZE EQ 0).ERR_LRECL
         AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).EX
               RR_LRECL
.CHKEND  ANOP
         AIF   ('&DDNAME' EQ '' OR '&DSNAME' EQ '0').DSNOK
         MNOTE 12,'DSNAME AND DDNAME ARE MUTUALLY EXCLUSIVE'
         MEXIT
.DSNOK   ANOP
         ORG   &N+DCBID-IHADCB        RPI88
         DC    C'DCBV1001'            RPI88
         ORG   &N+DCBDSORG-IHADCB
         DC    AL1(DCBDSORG_&DSORG) DCBDSORG
         ORG   &N+DCBEODAD-IHADCB
         DC    A(&EODAD) DCBEODAD
         ORG   &N+DCBRECFM-IHADCB
         DC    AL1(DCBRECFM_&RECFM) DCBRECFM
         ORG   &N+DCBDDNAM-IHADCB
         AIF   ('&DDNAME' EQ '').DDDEF
         DC    CL8'&DDNAME' DCBDDNAM
         AGO   .DDEND
.DDDEF   ANOP
         DC    CL8'&N' DCBDDNAME
.DDEND   ANOP
         ORG   &N+DCBOFLGS-IHADCB
         DC    AL1(0) DCBOFLGS RPI 668 ZERO (SET AT OPEN)
         ORG   &N+DCBMACRF-IHADCB
         AIF   (N'&MACRF GT 1).MACRF2 RPI 668
         DC    AL2(DCBMACRF_&MACRF(1)) DCBMACRF
         AGO   .MACRF2_END
.MACRF2  ANOP
         DC    AL2(DCBMACRF_&MACRF(1)+DCBMACRF_&MACRF(2)) DCBMACRF
.MACRF2_END ANOP
         ORG   &N+DCBSYNAD-IHADCB
         DC    A(&SYNAD) DCBSYNAD DCBSYNAD
         ORG   &N+DCBBLKSIF-IHADCB    RPI 587
         DC    F'&BLKSIZE' DCBBLKSIF  RPI 587
         ORG   &N+DCBLRECLF-IHADCB    RPI 587
         DC    F'&LRECL' DCBLRECLF    RPI 587
         ORG   &N+DCBREC-IHADCB
         DC    A(&RECORD) DCBREC
         ORG   &N+DCBDSNAM-IHADCB
         DC    A(&DSNAME) DCBDSNAM
         ORG   &N+DCBDCBE-IHADCB   RPI 281
         DC    A(&DCBE) DCBDCBE
         ORG   &N+DCBIO-IHADCB     RPI 907
         DC    A(0)     DCBIO      RPI 907 TOTAL IO COUNT SINCE OPEN
         ORG   &N+DCBLEN
.EXIT    ANOP
         DCBD
         MEXIT
.ERR_LRECL MNOTE 12,'DCB INVALID LRECL/BLKSIZE'
         AGO   .EXIT
.ERR2    MNOTE 12,'DCB DEVD NOT SUPPORTED'
         AGO   .EXIT
.ERR3    MNOTE 12,'DCB EXLST NOT SUPPORTED'
         AGO   .EXIT
.ERR4    MNOTE 12,'DCB KEYLEN NOT SUPPORTED'
         AGO   .EXIT
         MEND
./ ADD NAME=DCBD     0100-14178-14178-0013-00112-00112-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* MAINTENANCE
.* 10/12/05 ADD DCBAREA AND DCBDSNAM FIELDS
.* 10/20/05 RPI  27 - issue error for any undefined operands
.* 11/13/05 RPI  88 - add DCBID id EBCDIC/ASCII ID for I/O verification
.* 04/10/06 RPI 244  support RECFM A/M, DSORG=, unsupported DEVD=
.* 05/05/06 RPI 281  add DCBDCBE field
.* 03/12/07 RPI 558  add glba z390_dcbd to only define once for DCB/DTF
.* 03/12/07 RPI 587  add DCBBLKSIF and DCBLRECLF 32 bit len extension
.* 04/13/07 RPI 591  correct to handle DCBD before any CSECT/DSECT
.* 05/17/07 RPI 625  correct to handle LOCTR as well as CSECT/DSECT
.* 09/10/08 RPI 764  add  DCBMACRF_GL and PL locate support labels
.* 09/10/08 RPI 906  move DCBOFLGS_OPEN to X'10', add DCBOFOPN X'10'
.* 02/04/09 RPI 989  add DCBEODA (note DCBEODAD is same 31 bit addr)
.* 02/06/09 RPI 989  add DCBRECF,DCBRECBR,DCBRECFU bits (RECU never on)
.*********************************************************************
         DCBD  &DSORG=,     IGNORE                                     X
               &DEVD=       IGNORE
.*
.* IF DCBD ALREADY DEFINED EXIT NOW
.*
         GBLB  &Z390_DCBD                       RPI 591
         GBLC  &Z390_DCBD_NAME,&Z390_DCBD_TYPE  RPI 591
         AIF   (&Z390_DCBD).EXIT                RPI 591
&Z390_DCBD      SETB 1                          RPI 591
&Z390_DCBD_NAME SETC '&SYSLOC'                  RPI 591 RPI 625
&Z390_DCBD_TYPE SETC '&SYSSTYP'
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.*       DATA CONTROL BLOCK DSECT
.*
IHADCB   DSECT
         ORG   IHADCB+X'00'
DCBID    DS    CL4            DCB ID RPI88
         ORG   IHADCB+X'1A'
DCBDSORG DS    X              DATA SET ORGANIZATION
DCBDSORG_PS EQU X'40'           PHYSICAL SEQUENTIAL
DCBDSORG_DA EQU X'20'           DIRECT ACCESS
         ORG   IHADCB+X'1C'
DCBIOBAD DS    A              INPUT/OUTPUT BLOCK (TIOT TABLE INDEX)
         ORG   IHADCB+X'20'
DCBEODA  DS    0A ADDRESS OF END OF FILE EXIT 31 BIT VS 24 RPI 989
DCBEODAD DS    A ADDRESS OF END OF FILE EXIT  31 BIT VS 24
         ORG   IHADCB+X'24'
DCBRECFM DS    X              RECORD FORMAT
DCBRECF      EQU X'80'           FIXED  RPI 989
DCBRECFM_F   EQU X'80'           FIXED
DCBRECFM_FA  EQU X'80'           FIXED
DCBRECFM_FM  EQU X'80'           FIXED
DCBRECFM_V   EQU X'40'           VARIABLE
DCBRECFM_VA  EQU X'40'           VARIABLE
DCBRECFM_VM  EQU X'40'           VARIABLE
DCBRECFM_FB  EQU X'90'           FIXED BLOCKED
DCBRECBR     EQU X'10'           BLOCKED RECORDS RPI 989
DCBRECFM_FBA EQU X'90'           FIXED BLOCKED
DCBRECFM_FBM EQU X'90'           FIXED BLOCKED
DCBRECFM_VB  EQU X'50'           VARIABLE BLOCKED
DCBRECFM_VBA EQU X'50'           VARIABLE BLOCKED
DCBRECFM_VBM EQU X'50'           VARIABLE BLOCKED
DCBRECFM_FT  EQU X'A0'           FIXED ASCII TEXT
DCBRECFM_VT  EQU X'60'           VARIABLE ASCII TEXT
DCBRECU      EQU X'C0'           UNDEFINED RCDS NOT SUPPORTED RPI 989
         ORG   IHADCB+X'28'
DCBDDNAM DS    CL8            DDNAME > ENV VAR > FILE NAME
         ORG   IHADCB+X'30'
DCBOFLGS DS    X              OPEN FLAGS
DCBOFLGS_OPEN EQU X'10'          FILE OPEN (X'80' > X'10' RPI 906)_
DCBOFOPN      EQU X'10'          FILE OPEN RPI 906
DCBOFLGS_GM   EQU X'40'          READ  ALLOWED
DCBOFLGS_PM   EQU X'20'          WRITE ALLOWED
DCBOFLGS_GL   EQU X'40'          READ  ALLOWED
DCBOFLGS_PL   EQU X'20'          WRITE ALLOWED
DCBOFLGS_R    EQU X'40'          READ  ALLOWED
DCBOFLGS_W    EQU X'20'          WRITE ALLOWED
DCBOFLGS_RW   EQU X'60'          READ AND WRITE ALLOWED
         ORG   IHADCB+X'32'
DCBMACRF DS    H              MACRO REFERENCE ACCESS TYPE
DCBMACRF_GM EQU X'5000'         GET MOVE   QSAM
DCBMACRF_PM EQU X'0050'         PUT MOVE   QSAM
DCBMACRF_GL EQU X'4800'         GET LOCATE QSAM    RPI 764
DCBMACRF_PL EQU X'0048'         PUT LOCATE QSAM    RPI 764
DCBMACRF_R  EQU X'2000'         READ  RANDOM BDAM
DCBMACRF_W  EQU X'0020'         WRITE RANDOM BDAM
DCBMACRF_RW EQU X'2020'         READ/WRITE RANDOM BDAM
         ORG   IHADCB+X'38'
DCBSYNAD DS    A              ERROR EXIT
         ORG   IHADCB+X'3C'
DCBBLKSIF DS   F              BLOCK SIZE    RPI 587 32 BIT BLOCK SIZE
         ORG   IHADCB+X'3E'
DCBBLKSI DS    H              BLOCK SIZE    (ALSO UNBLOCKED MAX RECORD)
         ORG   IHADCB+X'50'
DCBLRECLF DS   F              RECORD LENGTH RPI 587 32 BIT RECORD LEN
         ORG   IHADCB+X'52'
DCBLRECL DS    H              RECORD LENGTH (MAY BE ZERO FOR UNBLOCKED)
         ORG   IHADCB+X'58'
DCBREC   DS    A      X'58'   ADDRESS OF USER SUPPLIED RECORD AREA
DCBDSNAM DS    A      X'5C'   ADDRESS OF USER SUPPLIED DSN FILE SPEC
DCBDCBE  DS    A      X'60'   ADDRESS OF DCBE EODAD/SYNAD  RPI 281
DCBIO    DS    F      X'64'   TOTAL DCB IO OPERATIONS SINCE OPEN
DCBLEN   EQU   *-IHADCB
          AIF  ('&Z390_DCBD_NAME' EQ '' OR '&Z390_DCBD_TYPE' EQ '').EXIX
               T
&Z390_DCBD_NAME &Z390_DCBD_TYPE                    RPI 591
.EXIT    MEND
./ ADD NAME=DCBE     0100-14178-14178-0013-00020-00020-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 05/05/06 RPI 281 ADD DCBE SUPPORT FOR EODAD= AND SYNAD=
.*********************************************************************
.*
.* If the DCBDCBE field in DCB is not zero then the EODAD and SYNAD
.* exit addresses will be fetched from DCDE block when required.
.* See IHADCBE for IHADCBE DSECT with DCBEEODA and DCBESYNA fields
.*********************************************************************
         MACRO
&N       DCBE  &EODAD=0,      END OF FILE EXIT ADDRESS                 X
               &SYNAD=0       I/O ERROR EXIT ADDRESS
&N       DS    0F
         DC    A(&EODAD)      DCBEEODA
         DC    A(&SYNAD)      DCBESYNA
         MEND
./ ADD NAME=DECBD    0100-14178-14178-0013-00025-00025-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.*********************************************************************
         DECBD
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.*  EVENT CONTROL BLOCKS CREATED BY READ/WRITE
.*
IHADECB  DSECT
DECBECB  DS    F
DECBTYPE DS    XL2
DECBLEN  DS    XL2
DECBDCBA DS    A
DECBAREA DS    A
DECBL    EQU   *-IHADECB
         MEND
./ ADD NAME=DEFINE   0100-14178-14178-0013-00387-00387-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/19/07                                                 *
.*********************************************************************
.* 07/31/07 RPI 668 INITIAL CODING
.* 08/04/07 RPI 668 ADD VCDTTIOT FOR ACCESSING TIOT PATH/FILE
.* 09/02/07 RPI 681 EXPAND DEFINE TO DEFINE ENTIRE VSAM CATALOG
.* 09/23/07 RPI 704 ADD CLUSTER SUPPORT FOR CONTROLINTERVALSIZE=
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 10/14/10 RPI 1130 change keyword parms and check for errors:
.*             REUSE=NO,UNIQUEKEY=YES,UPGRADE=YES,UPDATE=YES
.*********************************************************************
.*
.* DEFINE - define z390 VSAM catalog loadable table entries:
.*
.*           1. DEFINE CATALOG,        DEFINE VCDT VSAM CATALOG TABLE
.*                     NAME=           NAME OF VCDT CATALOG TABLE
.*           2. DEFINE CLUSTER,        DEFINE BASE CLUSTER (DATA/INDEX)
.*                     NAME=,          BASE OF BASE CLUSTER
.*                     INDEX=INDEXED/NONINDEXED/NUMBERED/LINEAR, TYPE
.*                     RECORDSIZE=(average,max) or fixed length, V/F
.*                     KEYS=(64,0),    KSDS PRIMARY KEY LENGTH, OFFSET
.*                     REUSE=YES,      ERASE ALL DATA AT OPEN RPI 1130
.*                     VESDSN=,        OPTIONAL DSNAME FOR VES FILE
.*                     VX0DSN=         OPTIONAL DSNAME FOR VX0 INDEX
.*                     CONTROLINTERVALSIZE= OPTIONAL CI BLOCK PADDING
.*           3. DEFINE ALTERNATEINDEX, DEFINE KSDS ALTERNATE INDEX KEY
.*                     NAME=,          NAME OF KSDS ALT IDX
.*                     RELATE=,        NAME OF BASE CLUSTER
.*                     KEYS=(64,0),    ALT KEY IN BASE CLUSTER
.*                     UNIQUEKEY=YES,  DO NOT ALLOW DUPLICATES RPI 1130
.*                     UPGRADE=YES,    UPDATE AIX FOR BASE CHANGE  1130
.*                     VXNDSN=         OPTIONAL DSNAME FOR AIX
.*           4. DEFINE PATH,           DEFINE PATH FOR KSDS ACCESS
.*                     NAME=,          NAME OF PATH
.*                     ENTRY=,         NAME OF AIX OR BASE     RPI 1130
.*                     UPDATE=YES      UPDATE AIX FOR BASE CHANGE  1130
.*           5. DEFINE END             GENERATE CATALOG TABLE
.*
.*   See example in vsam\demo and vsam\test directories:
.*     1.  vsam\demo\DEMOCAT.MLC defines demo VSAM files
.*     2.  vsam\test\TESTCAT.MLC defines test VSAM files
.*
.*     The DDNAME in ACB must point to the VCDT loadable catalog table
.*     containing the base cluster or alternate path to be opened.
.*     The DDNAME may have optional specific name appended to catalog
.*     name separated by period otherwise the ACB label field name will
.*     be the name used to search VCDT catalog for matching cluster
.*     or alternate path name.  For REPRO the OUTFILE spec pointing to
.*     catalog and entry may also be followed by [DISP=MOD] to add rcds
.*
.*  Notes:
.*    1.  Variable length VSAM records are prefixed by 4 byte length
.*        which is not included in RECORDSIZE=(average,maximum)
.*    2.  Specify INDEXED=NONINDEXED for ESDS sequential file.
.*        Specify INDEXED=NUMBERED   for RRDS relative record file.
.*        Specify INDEXED=LINEAR     for LDS  CI size required.
.*        The default is KSDS key sequened file with at primary key.
.*    3.  KSDS and VRRDS use VX0 index file to obtain XRBA of VES
.*        records.  For KSDS, the VX0 file has key field after XRBA.
.*        For VRRDS, 0 XRBA indicates no record written.  All VRRDS
.*        record XRBA's are stored with +1 added.  For KSDS files
.*        negative_value XRBA point to inserted record binary tree
.*        structure records at the end of VX0 index file.
.*        Note updates for variable records with different lengths and
.*        new inserted records are added to VRRDS and KSDS data file
.*        and the corresponding VX0 RBA pointer is updated accordingly.
.*    5.  Any number of additional alternate key indexes can be
.*        defined with contain XRBA pointers into VX0 primary index.
.*        Beware of overhead to update each alternate index file
.*        every time a record is added, deleted, or updated.
.*********************************************************************
         DEFINE &TYPE,         CATALOG,CLUSTER,ALTERNATEINDEX,PATH     X
               &NAME=,         NAME OF CATALOG, CLUSTER, AIX, OR PATH  X
               &CONTROLINTERVALSIZE=0, OPTIONAL CI SIZE NOT REQUIRED   X
               &ENTRY=,        AIX OR BASE CLUSTER NAME FOR PATH       X
               &INDEX=INDEXED, LINEAR/NONINDEXED/NUMBERED CLUSTER TYPE X
               &KEYS=(64,0),   (LENGTH,OFFSET) FOR KSDS PRI/ALT KEY    X
               &RECORDSIZE=,   FIXED LENGTH OR VAR (AVG,MAX) CLUSTER   X
               &RELATE=,       BASE CLUSTER NAME FOR ALTERNATEINDEX    X
               &REUSE=NO,      RESET HIGH XRBA AT OPEN FOR AIX/CLUSTER X
               &UNIQUEKEY=YES, REQUIRE UNIQUE AIX KEYS        RPI 1130 X
               &UPDATE=YES,    REQUIRE AIX UPDATES FOR THIS PATH  1130 X
               &UPGRADE=YES,   REQUIRE AIX UPDATE FOR THIS AIX    1130 X
               &VESDSN=, OPTIONAL CLUSTER DSNAME FOR VES (DEF NAME.VES)X
               &VX0DSN=, OPTIONAL CLUSTER DSNAME FOR VX0 (DEF NAME.VX0)X
               &VXNDSN=  OPTIONAL AIX     DSNAME FOR VXN (DEF NAME.VXN)
         COPY  ZDEFINE.CPY   INCLUDE GLOBALS SHARED WITH ZDEFINE.MAC
         AIF   (N'&SYSLIST LE 1).CHKTYPE
&ERROR   SETB  1
         MNOTE 12,'UNDEFINED PARAMETER - &SYSLIST(2)' RPI 1130
         MEXIT
.CHKTYPE ANOP
         AIF   ('&TYPE' EQ 'CATALOG').DEFINE_CATALOG
         AIF   ('&TYPE' EQ 'CLUSTER').DEFINE_CLUSTER
         AIF   ('&TYPE' EQ 'ALTERNATEINDEX').DEFINE_AIX
         AIF   ('&TYPE' EQ 'AIX').DEFINE_AIX
         AIF   ('&TYPE' EQ 'PATH').DEFINE_PATH
         AIF   ('&TYPE' EQ 'END').DEFINE_END
&ERROR   SETB  1
         MNOTE 12,'DEFINE INVALID TYPE - &TYPE'
         MEXIT
.*
.* DEFINE CATALOG
.*
.DEFINE_CATALOG ANOP
         AIF   ('&CATALOG' NE '' AND K'&CATALOG LE 8).SET_CATALOG
.SET_CATALOG ANOP
&CATALOG SETC '&NAME'
         MEXIT
.*
.* DEFINE CLUSTER
.*
.DEFINE_CLUSTER ANOP
&CLR_TOT SETA  &CLR_TOT+1
&CLR_CI(&CLR_TOT) SETA &CONTROLINTERVALSIZE
.*
.* SET BASE CLUSTER NAME
.*
.SET_CLR_NAME ANOP
         AIF   ('&NAME' NE '' AND K'&NAME LE 8).SET_CLR_NAME2
&ERROR   SETB  1
         MNOTE 12,'DEFINE INVALID BASE CLUSTER NAME - &NAME'
         MEXIT
.SET_CLR_NAME2 ANOP
&CLR_NAME(&CLR_TOT) SETC '&NAME'
.*
.* SET BASE CLUSTER TYPE
.*
.SET_CLR_TYPE ANOP
         AIF   ('&INDEX' EQ 'INDEXED').SET_CLR_KSDS
         AIF   ('&INDEX' EQ 'NONINDEXED').SET_CLR_ESDS
         AIF   ('&INDEX' EQ 'NUMBERED').SET_CLR_RRDS
         AIF   ('&INDEX' EQ 'LINEAR').SET_CLR_LDS
&ERROR   SETB  1
         MNOTE 12,'ZDEFCLR INVALID INDEX TYPE - &INDEX'
         MEXIT
.SET_CLR_KSDS ANOP
&CLR_TYPE(&CLR_TOT) SETC 'KSDS'
&CLR_KSDS(&CLR_TOT) SETB 1
         AGO   .SET_CLR_VREC
.SET_CLR_ESDS ANOP
&CLR_TYPE(&CLR_TOT) SETC 'ESDS'
&CLR_ESDS(&CLR_TOT) SETB 1
         AGO   .SET_CLR_VREC
.SET_CLR_RRDS ANOP
&CLR_TYPE(&CLR_TOT) SETC 'RRDS'
&CLR_RRDS(&CLR_TOT) SETB 1
         AGO   .SET_CLR_VREC
.SET_CLR_LDS ANOP
&CLR_TYPE(&CLR_TOT) SETC 'LDS'
&CLR_LDS(&CLR_TOT) SETB 1
         AIF   ('&CONTROLINTERVALSIZE' NE '0').SET_CLR_LDS2
         MNOTE 12,'DEFINE LINEAR REQUIRES CONTROL INTERVAL SIZE'
.SET_CLR_LDS2 ANOP
         AGO   .SET_CLR_VESDSN
.*
.* SET BASE CLUSTER VREC FLAG AND LAVG AND LMAX
.*
.SET_CLR_VREC ANOP
         AIF  (N'&RECORDSIZE EQ 2).SET_CLR_VREC2
&CLR_LMAX(&CLR_TOT) SETA &RECORDSIZE
         AGO  .SET_CLR_KEY
.SET_CLR_VREC2 ANOP
&CLR_VREC(&CLR_TOT) SETB 1
&CLR_LAVG(&CLR_TOT) SETA &RECORDSIZE(1)
&CLR_LMAX(&CLR_TOT) SETA &RECORDSIZE(2)
.*
.* SET BASE CLUSTER KSDS KEY LENGTH AND OFFSET
.*
.SET_CLR_KEY ANOP
         AIF ('&CLR_TYPE(&CLR_TOT)' NE 'KSDS').SET_CLR_REUSE
         AIF (N'&KEYS EQ 2).SET_CLR_KEY2
&ERROR   SETB  1
         MNOTE 12,'DEFINE INVALID KEYS FOR KSDS - &KEYS'
         MEXIT
.SET_CLR_KEY2 ANOP
&CLR_KLEN(&CLR_TOT) SETA &KEYS(1)
&CLR_KOFF(&CLR_TOT) SETA &KEYS(2)
         AIF   (&CLR_KOFF(&CLR_TOT)+&CLR_KLEN(&CLR_TOT) LE &CLR_LMAX(&CX
               LR_TOT)).SET_CLR_KEY3
&ERROR   SETB  1
         MNOTE 12,'DEFINE KEY EXTENDS BEYOND RECORDSIZE'
         MEXIT
.SET_CLR_KEY3 ANOP
.*
.* SET BASE CLUSTER REUSE
.*
.SET_CLR_REUSE ANOP
         AIF   ('&REUSE' EQ 'NO').SET_CLR_VESDSN
         AIF   ('&REUSE' EQ 'YES').SET_REUSE
         MNOTE 12,'REUSE MUST BE YES/NO - &REUSE'
         MEXIT
.SET_REUSE ANOP
&CLR_REUSE(&CLR_TOT) SETB 1
.*
.* SET BASE CLUSTER VESDSN
.*
.SET_CLR_VESDSN ANOP
&CLR_VES(&CLR_TOT) SETC '&NAME..VES'
         AIF   ('&VESDSN' EQ '').SET_CLR_VX0DSN
&CLR_VES(&CLR_TOT) SETC '&VSEDSN'
.*
.* SET BASE CLUSTER VX0DSN
.*
.SET_CLR_VX0DSN ANOP
&CLR_VX0(&CLR_TOT) SETC '&NAME..VX0'
         AIF   ('&VESDSN' EQ '').SET_CLR_VX0DSN2
&CLR_VX0(&CLR_TOT) SETC '&VSEDSN'
.SET_CLR_VX0DSN2 ANOP
         MEXIT
.*
.* DEFINE AIX
.*
.DEFINE_AIX ANOP
&AIX_TOT SETA  &AIX_TOT+1
.*
.* SET AIX NAME
.*
.SET_AIX_NAME ANOP
         AIF   ('&NAME' NE '' AND K'&NAME LE 8).SET_AIX_NAME2
&ERROR   SETB  1
         MNOTE 12,'DEFINE INVALID AIX NAME - &NAME'
         MEXIT
.SET_AIX_NAME2 ANOP
&AIX_NAME(&AIX_TOT) SETC '&NAME'
.*
.* SET AIX KEY LENGTH AND OFFSET
.*
.SET_AIX_KEY ANOP
         AIF (N'&KEYS EQ 2).SET_AIX_KEY2
&ERROR   SETB  1
         MNOTE 12,'DEFINE INVALID AIX KEYS LENGTH AND OFFSET - &KEYS'
         MEXIT
.SET_AIX_KEY2 ANOP
&AIX_KLEN(&AIX_TOT) SETA &KEYS(1)
&AIX_KOFF(&AIX_TOT) SETA &KEYS(2)
.*
.* SET AIX RELATE
.*
.SET_AIX_RELATE ANOP
         AIF   ('&RELATE' NE '').SET_AIX_RELATE2
&ERROR   SETB  1
         MNOTE 12,'DEFINE AIX MISSING RELATE NAME OF BASE CLUSTER'
.SET_AIX_RELATE2 ANOP
&AIX_RELATE(&AIX_TOT) SETC '&RELATE'
.*
.* SET BASE CLUSTER REUSE
.*
.SET_AIX_REUSE ANOP
         AIF   ('&REUSE' EQ 'NOREUSE').SET_AIX_UNIQUEKEY
&AIX_REUSE(&AIX_TOT) SETB 1
.*
.* SET AIX UNIQUEKEY
.*
.SET_AIX_UNIQUEKEY ANOP
         AIF   ('&UNIQUEKEY' EQ 'NO').SET_AIX_UPGRADE RPI 1130
         AIF   ('&UNIQUEKEY' EQ 'YES').SET_UNIQUEKEY
         MNOTE 12,'UNIQUEKEY MUST BE YES/NO - &UNIQUEKEY'
         MEXIT
.SET_UNIQUEKEY ANOP
&AIX_UNIQUEKEY(&AIX_TOT) SETB 1
.*
.* SET AIX UPGRADE
.*
.SET_AIX_UPGRADE ANOP
         AIF   ('&UPGRADE' EQ 'NO').SET_AIX_VXNDSN
         AIF   ('&UPGRADE' EQ 'YES').SET_UPGRADE
         MNOTE 12,'UPGRADE MUST BE YES/NO - &UPGRADE'
         MEXIT
.SET_UPGRADE ANOP
&AIX_UPGRADE(&AIX_TOT) SETB 1
.*
.* SET AIX VXNDSN
.*
.SET_AIX_VXNDSN ANOP
&AIX_VXN(&AIX_TOT) SETC '&NAME..VXN'
         AIF   ('&VXNDSN' EQ '').SET_AIX_VXNDSN2
&AIX_VXN(&AIX_TOT) SETC '&VXNDSN'
.SET_AIX_VXNDSN2 ANOP
         MEXIT
.*
.* DEFINE PATH
.*
.DEFINE_PATH ANOP
&PTH_TOT SETA  &PTH_TOT+1
.*
.* SET PATH NAME
.*
.SET_PTH_NAME ANOP
         AIF   ('&NAME' NE '' AND K'&NAME LE 8).SET_PTH_NAME2
&ERROR   SETB  1
         MNOTE 12,'DEFINE INVALID PATH NAME - &NAME'
         MEXIT
.SET_PTH_NAME2 ANOP
&PTH_NAME(&PTH_TOT) SETC '&NAME'
.*
.* SET PATH ENTRY
.*
.SET_PTH_ENTRY ANOP
         AIF   ('&ENTRY' NE '').SET_PTH_ENTRY2
&ERROR   SETB  1
         MNOTE 12,'DEFINE PATH MISSING ENTRY NAME OF AIX OR BASE'
         MEXIT
.SET_PTH_ENTRY2 ANOP
&PTH_ENTRY(&PTH_TOT) SETC '&ENTRY'
.*
.* SET PATH UPDATE
.*
.SET_PTH_UPDATE ANOP
         AIF   ('&UPDATE' EQ 'NO').SET_PTH_UPDATE2
         AIF   ('&UPDATE' EQ 'YES').SET_UPDATE
         MNOTE 12,'UPDATE MUST BE YES/NO - &UPDATE'
         MEXIT
.SET_UPDATE ANOP
&PTH_UPDATE(&PTH_TOT) SETB 1
.SET_PTH_UPDATE2 ANOP
         MEXIT
.*
.* DEFINE END
.*
.DEFINE_END ANOP
.*
.* VERIFY VAIX ENTRIES HAVE MATCHING VCLR RELATE
.*
&AIX_CUR SETA  0
.CHK_AIX ANOP
&AIX_CUR SETA  &AIX_CUR+1
         AIF   (&AIX_CUR GT &AIX_TOT).CHK_AIX_END
&CLR_CUR SETA  0
.FIND_CLR ANOP
&CLR_CUR SETA  &CLR_CUR+1
         AIF   (&CLR_CUR GT &CLR_TOT).AIX_ERR
         AIF   ('&AIX_RELATE(&AIX_CUR)' NE '&CLR_NAME(&CLR_CUR)').FIND_X
               CLR
         AIF   (&AIX_KOFF(&AIX_CUR)+&AIX_KLEN(&AIX_CUR) LE &CLR_LMAX(&CX
               LR_CUR)).CHK_AIX
&ERROR   SETB  1
         MNOTE 12,'DEFINE AIX &AIX_NAME(&AIX_CUR) KEY BEYOND CLUSTER &CX
               LR_NAME(&CLR_CUR) RECORD'
         AGO   .CHK_AIX
.AIX_ERR ANOP
&ERROR   SETB  1
         MNOTE 12,'DEFINE AIX RELATE=&AIX_RELATE(&AIX_CUR) NOT FOUND'
         AGO   .CHK_AIX
.CHK_AIX_END ANOP
.*
.* VERIFY VPTH ENTRIES HAVE MATCHING VCLR OR VAIX ENTRY
.* AND SET VPTH_AIXP ACCORDINGLY
.*
&PTH_CUR SETA  0
.CHK_PTH ANOP
&PTH_CUR SETA  &PTH_CUR+1
         AIF   (&PTH_CUR GT &PTH_TOT).CHK_PTH_END
&AIX_CUR SETA  0
.FIND_AIX ANOP
&AIX_CUR SETA  &AIX_CUR+1
         AIF   (&AIX_CUR GT &AIX_TOT).CHK_CLR
         AIF   ('&PTH_ENTRY(&PTH_CUR)' EQ '&AIX_NAME(&AIX_CUR)').SET_AIX
               XP
         AGO   .FIND_AIX
.SET_AIXP ANOP
&PTH_AIXP(&PTH_CUR) SETB 1
         AGO   .CHK_PTH
.CHK_CLR ANOP
&CLR_CUR SETA  0
.FIND_CLR2 ANOP
&CLR_CUR SETA  &CLR_CUR+1
         AIF   (&CLR_CUR GT &CLR_TOT).PTH_ERR
         AIF   ('&PTH_ENTRY(&PTH_CUR)' EQ '&CLR_NAME(&CLR_CUR)').CHK_PTX
               H
         AGO   .FIND_CLR2
.PTH_ERR ANOP
&ERROR   SETB  1
         MNOTE 12,'DEFINE PTH ENTER=&PTH_ENTRY(&PTH_CUR) NOT FOUND'
         AGO   .CHK_PTH
.CHK_PTH_END ANOP
         AIF   (&ERROR).EXIT
         ZDEFINE  , GENERATE VCDT CATALOG LOADABLE TABLE
         VCDTD    , GENERATE VCDT DSECTS
         DCBD     , GENERATE DCB  DSECT
.EXIT    ANOP
         MEXIT
./ ADD NAME=DELETE   0100-14178-14178-0013-00020-00020-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 11/17/08 RPI 953 move code to ZDELETE to share with maclibs
.*********************************************************************
&N       DELETE &DE=,      BLDL ENTRY                                  X
               &EP=,      PROGRAM NAME                                 X
               &EPLOC=,   ADDR OF PROGRAM NAME                         X
               &DDNAME=,  1-9 CHARACTER DDNAME                         X
               &DSNAME=,  RX ADDR OF DSN WITH PATH                     X
               &MF=I,     NOT SUPPORTED                                X
               &RELATED=  IGNORED
&N      ZDELETE DE=&DE,EP=&EP,EPLOC=&EPLOC,DDNAME=&DDNAME,             X
               DSNAME=&DSNAME,MF=&MF,RELATED=&RELATED
         MEND
./ ADD NAME=DEQ      0100-14178-14178-0013-00025-00025-00000-Z390MAC
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/24/06 RPI 291 - ADD AND IGNORE FOR TESTING
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
        MACRO
&N      DEQ    &LIST,  (QNAMEA,RNAMEA,LEN,STEP/SYSTEM/SYSTEMS),,,      X
               &MF=I,        L/E NOT SUPPORTED                         X
               &RET=NONE,    CHNG,HAVE,TEST,USE,NONE (CONTROL ALL)     X
               &RNL=YES,     GLOBAL RESOURCE SERIALIZATION             X
               &RELATED=,    IGNORED                                   X
               &LINKAGE=SVC, SVC INTERFACE                             X
               &UCB=         IGNORED
        AIF    ('&N' EQ '').SKIPDS
&N      DS     0H
.SKIPDS ANOP
        AIF    ('&MF' EQ 'I').EXIT
        MNOTE  12,'DEQ MF= NOT SUPPORTED'
.EXIT   ANOP
        MEND
./ ADD NAME=DO       0100-14178-14178-0013-00083-00083-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     03/27/74.
.*             REMARKS.  MACRO TO ALLOW STRUCTURED PROGRAMMING USING
.*                       IF, THEN, ELSE, AND DO UP TO TEN LEVELS DEEP
.*                       AND NO BRANCH INSTRUCTIONS. SEE IF MACRO.
.********************************************************************
.* 05/14/06 DSH Z390 RPI 316 UPDATED FOR COMPAT.
.* 07/21/06 DSH Z390 RPI 379 USE IF TO SUPPORT COMPOUND WHILE/UNTIL
.* 04/11/07 DSH Z390 RPI 589 USE ZSTRGBL AND EXPAND LEVELS TO 100
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.********************************************************************
         DO    &END,&WHILE=,&UNTIL=
         COPY  ZSTRGBL
         AIF   ('&END' NE '')
               AIF ('&END' EQ 'END')
                  ACALL DO_END
                  MEXIT
               AELSE
                  MNOTE 8,'DO - UNSUPPORTED OPTION'
                  MEXIT
               AEND
         AEND
         AIF   (&ZSTR_LVL EQ &ZSTR_MAX_LVL)
               MNOTE 8,'DO - LEVEL OVERFLOW'
               MEXIT
         AEND
         :&ZSTR_LVL SETA &ZSTR_LVL+1
         :&ZSTR_LVL_TYPE(&ZSTR_LVL) SETC 'DO'
         :&ZSTR_DO_CNT SETA &ZSTR_DO_CNT+1
         :&ZSTR_LVL_TCNT(&ZSTR_LVL) SETA &ZSTR_DO_CNT
         AIF   ('&WHILE' NE '')
               ACALL DO_WHILE
         AELSEIF ('&UNTIL' NE '')
               ACALL DO_UNTIL
         AELSE
               MNOTE 8,'DO - MISSING WHILE=, UNTIL=, OR END'
         AEND
         MEXIT
.*
.* DO END
.*
         AENTRY DO_END
         :&PARM    SETC  '&SYSLIST(2)'
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'DO - END OUT OF SEQUENCE'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'DO')
               MNOTE 8,'DO END - MISSING DO'
               MEXIT
         AEND
         B     #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_T
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E DS 0H
         :&ZSTR_LVL SETA &ZSTR_LVL-1
         AEND
.*
.* DO WHILE=(CLC,A,EQ,B)
.*
         AENTRY DO_WHILE
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_T DS 0H
         :&IFPARM  SETC  '&WHILE'(2,K'&WHILE-2)
         IF &IFPARM
               B   #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL-1)_1
         ENDIF
         B     #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_1 DS 0H
         AEND
.*
.* DO UNTIL=(CLC,A,EQ,B)
.*
         AENTRY DO_UNTIL
         B     #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_1
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_T DS 0H
         :&IFPARM  SETC  '&UNTIL'(2,K'&UNTIL-2)
         IF    &IFPARM
               B     #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL-1)_E
         ENDIF
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_1 DS 0H
         AEND
         MEND
./ ADD NAME=ELSE     0100-14178-14178-0013-00055-00055-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     03/27/74.
.*             REMARKS.  MACRO TO ALLOW STRUCTURED PROGRAMMING USING
.*                       IF, THEN, ELSE, AND DO UP TO TEN LEVELS DEEP
.*                       AND NO BRANCH INSTRUCTIONS. SEE IF MACRO.
.********************************************************************
.* 05/23/76 DSH - SUPPORT ELSEIF
.* 05/15/06 DSH - Z390 RPI 315 UPDATE FOR COMPAT.
.* 04/11/07 DSH - RPI 589 USE ZSTRGBL COPY AND EXPAND LEVELS TO 100
.* 09/23/08 DSH - RPI 909 USE ZSTRMAC SPE'S
.********************************************************************
         ELSE  &OPT
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'ELSE - MISSING IF'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'IF')
               MNOTE 8,'ELSE - MISSING IF'
               MEXIT
         AEND
         AIF   (T'&OPT EQ 'O' OR '&OPT' EQ 'BEGIN')
               ACALL ELSE_BEGIN
         AELSEIF ('&OPT' EQ 'END')
               ACALL ELSE_END
         AEND
         MEXIT
.*
.* ELSE OR ELSE BEGIN - START ELSE BLOCK
.*
        AENTRY ELSE_BEGIN
        AIF   (&ZSTR_LVL_ELSE(&ZSTR_LVL))
              MNOTE 8,'ELSE - DUPLICATE ELSE'
              MEXIT
        AEND
        :&ZSTR_LVL_ELSE(&ZSTR_LVL) SETB 1  ELSE
        :&ZSTR_LVL_TEND(&ZSTR_LVL) SETB 1  REQUEST END LABEL
        B      #@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
         AEND
.*
.* ELSE END (SAVE AS ENDIF)
.*
         AENTRY ELSE_END
         AIF   (NOT &ZSTR_LVL_ELSE(&ZSTR_LVL))
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
         AEND
         AIF   (&ZSTR_LVL_TEND(&ZSTR_LVL))
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E DS 0H
         AEND
         :&ZSTR_LVL SETA &ZSTR_LVL-1
         AEND
         MEND
./ ADD NAME=ELSEIF   0100-14178-14178-0013-00085-00085-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     05/23/76.
.*             REMARKS.  CONTROL STRUCTURE FOR CONDITIONAL EXECUTION.
.********************************************************************
.* 05/12/06 Z390 RPI 316 UPDATE FOR COMPAT.
.* 04/11/07 Z390 RPI 589 USE ZSTRGBL AND EXPAND LEVELS TO 100
.* 11/02/07 Z390 RPI 734 CORRECT BAD CONDITION CODE FOR OR CONNECTOR
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 09/23/08 RPI 909 update using ZSTRMAC SPE's
.********************************************************************
         ELSEIF
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'ELSEIF - MISSING IF'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'IF')
               MNOTE 8,'ELSEIF - MISSING IF'
               MEXIT
         AEND
         :&ZSTR_LVL_TEND(&ZSTR_LVL) SETB 1  REQUEST END LABEL
         B     #@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
         :&BLK_CNT SETA &ZSTR_LVL_BCNT(&ZSTR_LVL)+1 THIS BLK LAB FOR OR
         :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA &ZSTR_LVL_BCNT(&ZSTR_LVL)+2
         :&AND_CONN SETB 1             ASSUME AND CONNECTOR IF ANY
         :&N   SETA N'&SYSLIST         TOTAL TEST AND CONNECTOR PARMS
         :&S   SETA 1                  OPERAND INDEX
         AWHILE (&S LE &N)
               :&SN SETA  N'&SYSLIST(&S)        TEST OPERANDS
               :&OP SETC  '&SYSLIST(&S,1)'      TEST OPCODE
               AIF (&SN EQ 1)  COMPARE NOT IN QUOTES
                   :&BC SETC  '&SYSLIST(&S+2)'  TEST COMPARE MASK
                   AIF (&N LT &S+3)
                       MNOTE 8,'IF - TEST SUBLIST LENGTH INVALID - &SYSX
               LIST(&S)'
                       MEXIT
                   AEND
                   :&OPR SETC '&SYSLIST(&S+1),&SYSLIST(&S+3)'
                   :&S       SETA  &S+4-1     POS TO TEST END-1
               AELSEIF (&SN EQ 4)  OPERANDS IN QUOTES WITH CONNECTORS
                   :&BC      SETC  '&SYSLIST(&S,3)'
                   :&OPR     SETC  '&SYSLIST(&S,2),&SYSLIST(&S,4)'
               AEND
               AIF   (&AND_CONN)    IF AND EXIT IF COMPARE FAILS
         &OP   &OPR
         BC    15-&BC,#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSX
               TR_LVL)
               AELSE                IF OR  EXEC BLOCK IF TEST OK
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
                    :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA &ZSTR_LVL_BCNT(&ZSTX
               R_LVL)+1
         &OP   &OPR
         BC    15-&BC,#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSX
               TR_LVL)
               AEND
               :&S SETA  &S+1       ADVANCE TO CONNECTOR OR END
               AIF (&S LE &N)
                   :&SN SETA N'&SYSLIST(&S)
                   AIF (&SN NE 1)
                       MNOTE 8,'IF - INVALID CONNECTOR'
                       MEXIT
                   AEND
                   AIF   ('&SYSLIST(&S)' EQ 'OR')
         B     #@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&BLK_CNT
                       :&AND_CONN SETB 0
                   AELSEIF  ('&SYSLIST(&S)' EQ 'AND')
                       :&AND_CONN SETB 1
                   AELSE
                       MNOTE 8,'IF - INVALID CONNECTOR'
                       MEXIT
                   AEND
                   :&S SETA &S+1
                   AIF (&S GT &N)
                       MNOTE 8,'IF - MISSING TEST AFTER CONNECTOR'
                       MEXIT
                   AEND
               AEND
         AEND
         AIF   (NOT &AND_CONN)
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&BLK_CNT DS 0H
         AEND
         MEND
./ ADD NAME=ENDCASE  0100-14178-14178-0013-00035-00035-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/23/08.
.*             REMARKS.  ADD SPM MACROS FOR CASENTRY, CASE, ENDCASE
.********************************************************************
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.********************************************************************
         ENDCASE
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'ENDCASE - MISSING CASENTRY'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'CASENTRY')
               MNOTE 8,'ENDCASE - MISSING CASENTRY'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_BCNT(&ZSTR_LVL)' EQ 0)
               MNOTE 8,'ENDCASE - MISSING CASE(S)'
               MEXIT
         AEND
         B     #@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E
#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_A DC A(#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_X
               T)
#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_G DS 0H
         CLFI  &ZSTR_CASE_REG(&ZSTR_LVL),&ZSTR_CASE_MAX(&ZSTR_LVL)
         BH    #@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E
         SLA   &ZSTR_CASE_REG(&ZSTR_LVL),2
         A     &ZSTR_CASE_REG(&ZSTR_LVL),#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVLX
               )_A
         LT    &ZSTR_CASE_REG(&ZSTR_LVL),0(&ZSTR_CASE_REG(&ZSTR_LVL))
         BNZR  &ZSTR_CASE_REG(&ZSTR_LVL)
#@CAS_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E DS 0H
         MEND
./ ADD NAME=ENDDO    0100-14178-14178-0013-00007-00007-00000-Z390MAC
         MACRO
&N       ENDDO
.********************************************************************
.* 05/14/06 DSH Z390 RPI 316 UPDATED FOR COMPAT.
.********************************************************************
&N       DO    END
         MEND
./ ADD NAME=ENDIF    0100-14178-14178-0013-00026-00026-00000-Z390MAC
         MACRO
.********************************************************************
.* ENDIF - END OF ALTERATE SELECTION
.********************************************************************
.* 05/14/06 DSH Z390 RPI 316 UPDATE FOR COMPAT.
.* 04/11/07 DSH Z390 RPI 589 USE ZSTRGBL COPY AND EXPAND LEVELS 100
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.********************************************************************
&N       ENDIF
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'ENDIF - MISSING IF'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'IF')
               MNOTE 8,'ENDIF - MISSING IF'
               MEXIT
         AEND
         AIF   (NOT &ZSTR_LVL_ELSE(&ZSTR_LVL))
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
         AEND
         AIF   (&ZSTR_LVL_TEND(&ZSTR_LVL))
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E DS 0H
         AEND
         :&ZSTR_LVL SETA &ZSTR_LVL-1
         MEND
./ ADD NAME=ENDSEL   0100-14178-14178-0013-00032-00032-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/23/08.
.*             REMARKS.  ADD SPMS FOR SELECT,WHEN,OTHRWISE,ENDSEL
.********************************************************************
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.* 02/19/12 RPI 1192 remove dup )) from AIF
.********************************************************************
         ENDSEL
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'ENDSEL - MISSING SELECT'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'SELECT')
               MNOTE 8,'ENDSEL - MISSING SELECT'
               MEXIT
         AEND
         AIF   (&ZSTR_LVL_BCNT(&ZSTR_LVL) EQ 0)
               MNOTE 8,'ENDSEL - MISSING WHEN'
               MEXIT
         AEND
         AIF (NOT &ZSTR_LVL_ELSE(&ZSTR_LVL))
#@SEL_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
         AEND
         AIF   (&ZSTR_LVL_ELSE(&ZSTR_LVL)                              X
                OR &ZSTR_LVL_BCNT(&ZSTR_LVL) GT 1) RPI 1192
#@SEL_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E DS 0H
         AEND
         :&ZSTR_LVL SETA &ZSTR_LVL-1
         MEND
./ ADD NAME=ENQ      0100-14178-14178-0013-00024-00024-00000-Z390MAC
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/24/06 RPI 291 - ADD AND IGNORE FOR TESTING
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
        MACRO
&N      ENQ    &LIST,  (QNAMEA,RNAMEA,E/S,LEN,STEP/SYSTEM/SYSTEMS),,,  X
               &MF=I,        L/E NOT SUPPORTED YET                     X
               &RET=NONE,    CHNG,HAVE,TEST,USE,NONE (CONTROL ALL)     X
               &RNL=YES,     GLOBAL RESOURCE SERIALIZATION             X
               &RELATED=,    IGNORED                                   X
               &LINKAGE=SVC  SVC INTERFACE
        AIF    ('&N' EQ '').SKIPDS
&N      DS     0H
.SKIPDS ANOP
        AIF    ('&MF' EQ 'I').EXIT
        MNOTE  12,'ENQ MF= NOT SUPPORTED'
.EXIT   ANOP
        MEND
./ ADD NAME=EQUREGS  0100-14178-14178-0013-00048-00048-00000-Z390MAC
        MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.*  EQUREGS ,        - default to R0 - R15 symbols for 0-15 general
.*                     purpose register references
.*  EQUREGS REGS=FPR - generate F0 - F15 symbols for 0-15 floating
.*                     point registers
.*  EQUREGS TYPE=HEX - generate R0 - RF symbols for 0-15 general
.*                     purpose registers
.*  EQUREGS REGS=FPC,TYPE=HEX - generate F0 - FF symbols for FPR's
.*********************************************************************
.* 10/20/05 RPI27  - issue error for any undefined operands
.* 12/07/05 RPI119 - add FPR and hex options
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
        EQUREGS &REGS=GPR,&TYPE=DEC
        GBLB  &EQUREGS_GPR_DEC(16),&EQUREGS_GPR_HEX(16)
        GBLB  &EQUREGS_FPR_DEC(16),&EQUREGS_FPR_HEX(16)
        AIF    ('&REGS' EQ 'GPR')
               :&PFX SETC 'R'
        AELSE
               :&PFX SETC 'F'
        AEND
        LCLC   &HEX(16)
&HEX(1) SETC   '0','1','2','3','4','5','6','7',                        X
               '8','9','A','B','C','D','E','F'
        AIF   ('&SYSLIST(1)' NE '')
              MNOTE 12,'EQUREGS UNSUPPORTED OPERANDS - &SYSLIST(1)'
              MEXIT
        AEND
&I      SETA   0
        AWHILE (&I LT 16)
               AIF (NOT &(EQUREGS_&REGS._&TYPE)(&I+1))
                   :&(EQUREGS_&REGS._&TYPE)(&I+1) SETB 1
                   AIF ('&TYPE' EQ 'DEC')
                       :&PFX&I EQU &I
                   AELSE
                       :&PFX&HEX(&I+1) EQU &I
                   AEND
               AEND
               :&I SETA &I+1
        AEND
        MEND
./ ADD NAME=ERASE    0100-14178-14178-0013-00037-00037-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 08/07/07                                                 *
.*********************************************************************
.* 08/07/07 RPI 644 INITIAL CODING FOR VSAM ERASE FOLLOWING GET UPD
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       ERASE &RPL=,   VSAM REQUEST PARAMETER LIST                    X
               &MF=I    NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR2
         AIF   (N'&SYSLIST LE 0).NPOK
         MNOTE 12,'ERASE UNSUPPORTED OPERANDS - &SYSLIST(1)'
         MEXIT
.NPOK    ANOP
         AIF   ('&RPL' EQ '').ERR1
         AIF   ('&RPL'(1,1) EQ '(').RPLREG
         LA    1,&RPL
         AGO   .VSVC
.RPLREG  ANOP
         ZOPTLR 1,&RPL(1)
.VSVC    ANOP
         LA    0,RPLOPERA
         SVC   121 VSAM ERASE R0=3 R1=A(RPL)
         MEXIT
.ERR1    MNOTE 12,'ERASE REQUIRES RPL='
         MEXIT
.ERR2    MNOTE 12,'ERASE MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=ESPIE    0100-14178-14178-0013-00153-00153-00000-Z390MAC
        MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27  - issue error for any undefined operands
.* 11/20/05 RPI106 - correct alignment for SPM mask
.* 12/12/05 RPI132 - correct to support range within list (5,7,(9,11))
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 04/12/06 RPI244 SUPPORT PARAM=
.* 04/29/06 RPI305 CORRECT REGISTER FORM OF PARAM= (AIR TO AIF)
.* 06/03/06 RPI321 CORRECT MNOTE MSG TO INCLUDE MACRO NAME
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       ESPIE &OP,     SET/RESET                                      X
               &ADDR,   EXIT ADDRESS                                   X
               &LIST,   INTERRUPTION LIST (1,2...15)                   X
               &MF=I,   NOT SUPPORTED                                  X
               &PARAM=  OPTIONAL PARM TO PASS TO EXIT
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   (N'&SYSLIST LE 3).NPOK
         MNOTE 12,'ESPIE UNSUPPORTED OPERANDS - &SYSLIST(4)'
         MEXIT
.NPOK    ANOP
.*
.* Set or reset program interruption exit
.*    ESPIE SET,ADDR
.*    ESPIE RESET
.* Notes:
.*  1.  SPM can be used to set the psw program mask bits and cc:
.*         mask bit 0 - pic  8 - fixed point overflow
.*         mask bit 1 - pic 10 - packed decimal overflow
.*         mask bit 2 - pic 13 - HFP floating point exponent underflow
.*         mask bit 3 - pic 14 - HFP floating point mantissa signif.
.*  2.  If mask bit is off, then the above exceptions are not
.*      generated and cannot be handled by ESPIE or ESTAE.
.*  3.  The interrupt codes that can be specified in 3rd positional
.*      operand sublist are as follows:
.*         1 - operation
.*         2 - privilege
.*         3 - execute
.*         4 - protection
.*         5 - addressing
.*         6 - specification
.*         7 - data exception - see DXC reason codes:
.*               00 packed decimal data exception
.*               08 BFP inexact truncated
.*               0C BFP inexact incremented
.*               10 BFP underflow exact
.*               18 BFP underflow inexact truncated
.*               1C BFP underflow inexact incremented
.*               20 BFP overflow  exact
.*               28 BFP overflow  inexact truncated
.*               2C BFP overflow  inexact incremented
.*               40 BFP division by zero
.*               80 BFP invalid operation
.*         8 - fixed point overflow   (SPM mask bit x'8')
.*         9 - fixed point divide
.*        10 - decimal overflow       (SPM mask bit x'4')
.*        11 - decimal divide
.*        12 - HFP exponent overflow
.*        13 - HFP exponent underflow (SPM mask bit x'2')
.*        14 - HFP significance       (SPM mask bit x'1')
.*        15 - HFP divide
.*
.*  4.  Any of the above interrupts raised are not handled by ESPIE
.*      or ESTAE user defined exit will result in 0Cx abend.
.*
        LCLA   B(31)
        AIF    ('&PARAM' EQ '').ZPARM
        AIF    ('&PARAM'(1,1) EQ '(').REGPARM
        LA     15,&PARAM
        AGO    .ENDPARM
.REGPARM ANOP
        ZOPTLR 15,&PARAM(1)
        AGO    .ENDPARM
.ZPARM  ANOP
        SR     15,15
.ENDPARM ANOP
        AIF    ('&OP' EQ 'SET').SET
        AIF    ('&OP' EQ 'RESET').RESET
        MNOTE  8,'ESPIE INVALID OPERATION - SET/RESET - &OP'
        MEXIT
.SET    ANOP
&NP     SETA   N'&LIST
        IPM    0  GET CURRENT PGM MASK
&MASK   SETA   0
.PLOOP  ANOP
        AIF    (&NP EQ 0).SETMASK
&I1     SETA   &LIST(&NP,1)
&I2     SETA   &LIST(&NP,2)
.RLOOP  ANOP
        AIF    (&I1 GT 0 AND &I1 LT 16).SETBIT
        MNOTE  8,'ESPIE INVALID INTERRUPT CODE = &RANGE'
        MEXIT
.SETBIT ANOP
&B(&I1) SETA   1
        AIF    (&I1 EQ  8).SETM0 FIXED OVERFLOW
        AIF    (&I1 EQ 10).SETM1 DEC   OVERFLOW
        AIF    (&I1 EQ 13).SETM2 HFP   UNDERFLOW
        AIF    (&I1 EQ 14).SETM3 HFP   SIGNIFICANCE
        AGO    .NEXT
.SETM0  ANOP
&MASK   SETA   &MASK+X'0800'
        AGO    .NEXT
.SETM1  ANOP
&MASK   SETA   &MASK+X'0400'
        AGO    .NEXT
.SETM2  ANOP
&MASK   SETA   &MASK+X'0200'
        AGO    .NEXT
.SETM3  ANOP
&MASK   SETA   &MASK+X'0100'
.NEXT   ANOP
&I1     SETA   &I1+1
        AIF    (&I1 LE &I2).RLOOP
&NP     SETA   &NP-1
        AGO    .PLOOP
.SETMASK ANOP
        AIF    (&MASK EQ 0).BLDPIE
        OILH   0,&MASK
.BLDPIE ANOP
        SPM    0 TURN ON ANY MASKS REQUIRED
&I      SETA   1
&PIE    SETC   '0'
.BLOOP  ANOP
        AIF    (&I GT 31).SETR0
&PIE    SETC   '&PIE&B(&I)'
&I      SETA   &I+1
        AGO    .BLOOP
.SETR0  ANOP
        L      0,=B'&PIE'
        AIF    ('&ADDR'(1,1) EQ '(').AREG
        LA     1,&ADDR
        AGO    .SVC
.AREG   ANOP
        ZOPTLR 1,&ADDR(1)
        AGO    .SVC
.RESET  ANOP
        SR     1,1
.SVC    ANOP
        SVC    X'6D' ESPIE R0=INT BITS R1=EXIT R15=PARAM
        MEXIT
.ERR1   MNOTE 12,'ESPIE MF= NOT SUPPORTED'
        MEND
./ ADD NAME=ESTAE    0100-14178-14178-0013-00057-00057-00000-Z390MAC
        MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI  27 - issue error for any undefined operands
.* 01/09/06 RPI 163 SKIP LR FOR SAME REGISTER
.* 04/11/06 RPI 244 IGNORE UNUSED KEYWORDS, SUPPORT CV,CT,PARAM=
.* 06/03/06 RPI 321 CORRECT MNOTE MSG TO INCLUDE MACRO NAME
.* 11/10/06 RPI 475 SUPPORT CT AS IF OV
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N      ESTAE  &ADDR,          ADDRESS OF ABEND RECOVERY EXIT          X
               &TYPE,          OV=REPLACE EXIT, CT=ADD NEW EXIT        X
               &ASYNCH=NO,     IGNORE                                  X
               &MF=I,          NOT SUPPORTED                           X
               &PARAM=,        ADDRESS PASSED IN R1 IF SPECIFIED       X
               &PURGE=NONE,    IGNORE                                  X
               &RELATED=,      IGNORE                                  X
               &SDWALOC31=NO,  IGNORE                                  X
               &TERM=NO,       IGNORE                                  X
               &XCTL=NO        IGNORE
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   (N'&SYSLIST LE 2).NPOK  R[ 475
         MNOTE 12,'ESTAE UNSUPPORTED OPERANDS - &SYSLIST(2)'
.NPOK    ANOP
        AIF    ('&ADDR'(1,1) EQ '(').AREG
        LA     0,&ADDR
        AGO    .CHKP
.AREG   ANOP
        ZOPTLR 0,&ADDR(1)
.CHKP   ANOP
        AIF    ('&PARAM' EQ '').ZPARM
        AIF    ('&PARAM'(1,1) EQ '(').PREG
        LA     1,&PARAM
        AGO    .CHKTYPE
.PREG   ANOP
        ZOPTLR 1,&PARAM(1)
        AGO    .CHKTYPE
.ZPARM  ANOP
        SR     1,1
.CHKTYPE ANOP
        AIF    ('&TYPE' NE 'OV').SVC
        OILH   0,X'8000'
.SVC    ANOP
        SVC    X'3C' ESTAE R0=EXIT, R0+=CT, R0-=OV,R1=PARAM OR 0
        MEXIT
.ERR1   MNOTE  12,'ESTAE MF= NOT SUPPORTED'
        MEND
./ ADD NAME=ESTAEX   0100-14178-14178-0013-00053-00053-00000-Z390MAC
        MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 04/11/06 RPI244 COPY FROM ESTAE FOR LIMITED SUPPORT
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N      ESTAEX &ADDR,          ADDRESS OF ABEND RECOVERY EXIT          X
               &TYPE,          OV=REPLACE EXIT, CT=ADD NEW EXIT        X
               &ASYNCH=NO,     IGNORE                                  X
               &MF=I,          NOT SUPPORTED                           X
               &PARAM=,        ADDRESS PASSED IN R1 IF SPECIFIED       X
               &PURGE=NONE,    IGNORE                                  X
               &RELATED=,      IGNORE                                  X
               &SDWALOC31=NO,  IGNORE                                  X
               &TERM=NO,       IGNORE                                  X
               &XCTL=NO        IGNORE
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   (N'&SYSLIST EQ 1).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(2)'
.NPOK    ANOP
        AIF    ('&ADDR'(1,1) EQ '(').AREG
        LA     0,&ADDR
        AGO    .CHKP
.AREG   ANOP
        ZOPTLR 0,&ADDR(1)
.CHKP   ANOP
        AIF    ('&PARAM' EQ '').ZPARM
        AIF    ('&PARAM'(1,1) EQ '(').PREG
        LA     1,&PARAM
        AGO    .CHKTYPE
.PREG   ANOP
        ZOPTLR 1,&PARAM(1)
        AGO    .CHKTYPE
.ZPARM  ANOP
        SR     1,1
.CHKTYPE ANOP
        AIF    ('&TYPE' NE 'OV').SVC
        OILH   0,X'8000'
.SVC    ANOP
        SVC    X'3C' ESTAE R0=EXIT, R0+=CT, R0-=OV,R1=PARAM OR 0
        MEXIT
.ERR1   MNOTE 12,'ESTAEX MF= NOT SUPPORTED'
        MEND
./ ADD NAME=EXEC     0100-14178-14178-0013-00034-00034-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/25/06 RPI 293 ADD EXEC SQL INCLUDE SUPPORT VIA COPY
.* 05/05/06 RPI 308 GENERALIZED FOR CICS, DLI, AND SQL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.*
.* The mz390 loader parses space delimited EXEC parms and forms to
.* form standard comma delimited macro call to EXEC macro to support
.* EXEC SQL/CICS/DLI type statements.
.*
.*********************************************************************
         MACRO
&N       EXEC
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
&EXEC_TYPE      SETC  '&SYSLIST(1)'
&EXEC_CMD       SETC  '&SYSLIST(2)'
&EXEC_CMD_PARMS SETC  '&SYSLIST(3)'
&NP      SETA  N'&SYSLIST
&I       SETA  3
.PLOOP   ANOP
&I       SETA  &I+1
         AIF   (&I GT &NP).ENDPARMS
&EXEC_CMD_PARMS SETC  '&EXEC_CMD_PARMS,&SYSLIST(&I)'
         AGO   .PLOOP
.ENDPARMS ANOP
         &EXEC_TYPE._&EXEC_CMD &EXEC_CMD_PARMS
         MEND
./ ADD NAME=EXIT     0100-14178-14178-0013-00017-00017-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 05/08/06 RPI 308 ADD EXIT FOR SVC 3 USED IN CICS.MLC TO EXIT LINK
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         MACRO
&N       EXIT
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         SVC   3   EXIT FROM LINK TO CALLER OR EZ390
         MEND

./ ADD NAME=EXTRACT  0100-14178-14178-0013-00005-00005-00000-Z390MAC
         MACRO
&N       EXTRACT
&N       DS    0H
         MNOTE 12,'EXTRACT NOT SUPPORTED YET'
         MEND
./ ADD NAME=FREEMAIN 0100-14178-14178-0013-00103-00103-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI  27 - issue error for any undefined operands
.* 12/06/05 RPI 117 - support 32 bit LV= and short forms nnnK, nnnM
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 01/21/06 RPI187 CORRECT FREEMAIN and GETMAIN comments, LA/L length,
.*          limit check length, correct K/M support
.* 03/14/06 RPI 210 allow positional type operand and support LA=
.* 04/11/06 RPI 244 CHECK FOR REGISTER CONFLICT, IGNORE UNUSED KWDS,
.*          ALSO SWITCH R0=LENGTH AND R1=ADDR FOR COMPATIBILITY
.* 04/16/06 RPI 293 IGNORE SP= AND FIX MNOTES
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 01/28/11 RPI 1143 remove old bug due to offset 0777 versus 0
.*********************************************************************
&N       FREEMAIN &TYPE,      IGNORED                                  X
               &A=,        ADDRESS                                     X
               &KEY=,      NOT SUPPORTED ERROR                         X
               &LA=,       LENGTH ADDRESS                              X
               &LV=,       LENGTH VALUE                                X
               &MF=I,      NOT SUPPORTED                               X
               &RELATED=,  IGNORED                                     X
               &SP=        IGNORED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR5
         AIF   (N'&SYSLIST LE 1).NPOK   RPI 210
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(2)'
         MEXIT
.NPOK    ANOP
.*
.* FREEMAIN - RELEASE MEMORY FROM ABOVE OR BELOW 16MB LINE
.*
.*  LENGTH LV=
.*    ABSOLUTE LENGTH OR (REG)
.*  LENGTH LA=
.*    ADDRESS OF FULL WORD LENGTH OR (REG)
.*  ADDRESS A=
.*    RX OF FULLWORD OR (REG) WITH DEFAULT REG 0
.* OUTPUT
.*    ABORT WITH A0A ABEND IF REQUEST FAILS
.*
         AIF   ('&KEY' NE '').ERR2
.LA      ANOP                 RPI 210
         AIF  ('&LA' EQ '').LV
         AIF  ('&LA'(1,1) EQ '(').LAREG
         L    0,&LA
         AGO  .A
.LAREG   ANOP
         L    0,0(&LA(1)) RPI 1143
         AGO  .A
.LV      ANOP
         AIF  ('&LV' NE '').CHKLV
         MNOTE 12,'FREEMAIN LV= MISSING'
         MEXIT
.CHKLV   ANOP
         AIF  ('&LV'(1,1) EQ '(').LVREG
         AIF  ('&LV'(1,1) GE'0' AND '&LV'(1,1) LE '9').LVLIT
         L    0,=A(&LV)
         AGO  .A
.LVLIT   ANOP
&LEN     SETA &LV
         AIF  ('&LV'(K'&LV,1) NE 'K').CHKLVM
         AIF  (&LEN GT 1048576).ERR1
&LEN     SETA &LEN*1024
         AGO  .SETLV
.CHKLVM  ANOP
         AIF  ('&LV'(K'&LV,1) NE 'M').SETLV
         AIF  (&LEN GT 1024).ERR1
&LEN     SETA &LEN*1048576
.SETLV   ANOP
         L    0,=A(&LEN)  RPI 117
         AGO  .A
.LVREG   ANOP
         ZOPTLR 0,&LV(1)
.A       ANOP
         AIF  ('&A' EQ '').SVC
         AIF  ('&A'(1,1) EQ '(').AREG
         L    1,&A
         AGO  .SVC
.AREG    ANOP
         AIF   ('&A(1)' EQ '1' OR '&A(1)' EQ 'R1').SVC  RPI163
         ZOPTLR 1,&A(1)
.SVC     ANOP
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         MEXIT
.ERR1    MNOTE 12,'FREEMAIN LV LENGTH TOO LONG - &LV'
         MEXIT
.ERR2    MNOTE 12,'FREEMAIN KEY= NOT SUPPORTED'
         MEXIT
.ERR4    MNOTE 12,'FREEMAIN A=(0) INVALID'
         MEXIT
.ERR5    MNOTE 12,'FREEMAIN MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=GENCB    0100-14178-14178-0013-00124-00124-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/16/07                                                 *
.*********************************************************************
.* 09/16/07 RPI 682 INITIAL CODING
.* 09/20/07 RPI 703 CORRECT NISSING QUOTE IN AIF
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       GENCB &AM=VSAM, VSAM VS VTAM                                  X
               &BLK=,    ACB OR RPL CONTROL BLOCK GENERATION           X
               &COPIES=1,  ACB NUMBER OF COPIES TO ALLOCATE            X
               &LENGTH=, LENGTH OF USER WAREA PROVIDED                 X
               &LOC=BELOW, ALLOCATE AREA ABOVE OR BELOW 24 BIT LINE    X
               &WAREA=,  USER PROVIDED WORK AREA FOR ACB/RPL COPIES    X
               &BUFSP=0,   ACB MAXIMUM BUFFER SPACE FOR CLUSTER        X
               &DDNAME=,   ACB DDNAME FOR VSAM CLUSTER DEFINITION TABLEX
               &DSNAME=0,  ACB DSNAME FOR VSAM CLUSTER DEFINITION TABLEX
               &EXLST=0,   ACB NOT CURRENTLY SUPPORTED                 X
               &MACRF=,    ACB PROCESSING OPTIONS                      X
               &ACB=,      RPL ADDR ACB                                X
               &AREA=0,    RPL RECORD WORK AREA (DATA MVE, ADDR LOC)   X
               &AREALEN=0, RPL LENGTH OF AREA (MAX MVE, 4 FOR LOC)     X
               &ARG=0,     RPL KEY FIELD FOR KSDS ACCESS               X
               &ECB=0,     RPL ECB TO BE POSTED ON COMPLETION          X
               &KEYLEN=0,  RPL KEY LENGTH FOR GENERIC KEY SEARCH       X
               &OPTCD=,    RPL OPTIONS (SEE SUPPORTED OPTIONS ABOVE)   X
               &RECLEN=0   RPL RECORD LENGTH FOR VARIABLE LENGTH PUT
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AGO   .POSLOOP
.POSEND  ANOP
         AIF   ('&AM' EQ 'VSAM').CHK_EXLST
         MNOTE 12,'GENCB ONLY AM=VSAM IS SUPPORTED'
         MEXIT
.CHK_EXLST ANOP
         AIF   ('&EXLST' EQ '0').NOEXLST
         MNOTE 12,'GENCB ACB EXLST NOT CURRENTLY SUPPORTED'
         MEXIT
.NOEXLST ANOP
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         &BLK.D , GEN ACB/RPL DSECT AND &BLK.LEN IF NOT ALREADY DONE
&BLKEND  SETC   '&BLK.END'
&BLKSTRT SETC   'IHA&BLK'
&LBLK    SETA   &BLKEND-&BLKSTRT
&LBLKS   SETA   &COPIES*&LBLK
         AIF    (&LBLK GT 1).LBLKOK
         MNOTE  12,'GENCB LENGTH OF &BLK FROM DSECT INVALID - &LBLK'
.LBLKOK  ANOP
.*
.* INIT R14 = USER WORK AREA OR DYNAMIC ALLOC AREA
.*
         AIF   ('&LENGTH' EQ '' AND '&WAREA' EQ '').ALLOC
         AIF   ('&LENGTH' NE '').WAREA
         MNOTE 12,'GENCB MISSING LENGTH FOR WAREA'
         MEXIT
.WAREA   ANOP
         AIF   ('&WAREA'  NE '').WAREA2
         MNOTE 12,'GENCB MISSING WAREA FOR LENGTH'
         MEXIT
.WAREA2  ANOP
         AIF   ('&WAREA'(1,1) EQ '(').REGWAREA   RPI 703
         LA    1,&WAREA
         LR    14,1
         AGO   .LENGTH
.REGWAREA ANOP
         ZOPTLR 14,&WAREA(1)
.LENGTH  ANOP
         AIF   ('&LENGTH' GE '&LBLKS').CLEAR
         MNOTE 12,'GENCB &LENGTH TOO SHORT FOR &COPIES COPIES OF &BLK'
         MEXIT
.ALLOC   ANOP
         GETMAIN RU,LV=&LBLKS,LOC=&LOC
.CLEAR   ANOP
         MVI   0(1),0
         MVC   1(&LBLK-1,1),0(1) CLEAR FIRST &BLK
.CHKTYPE ANOP
&TCOPY   SETA  &COPIES
         AIF   ('&BLK' EQ 'ACB').GENACB
         AIF   ('&BLK' EQ 'RPL').GENRPL
         MNOTE 12,'GENCB ONLY BLK=ACB OR BLK=RPL SUPPORTED'
         MEXIT
.*
.* GENERATE FIRST ACB STARTING AT R1
.*
.GENACB  ANOP
         ZGENACB BUFSP=&BUFSP, ACB MAXIMUM BUFFER SPACE FOR CLUSTER    X
               DDNAME=&DDNAME, ACB DDNAME FOR CLUSTER DEFINITION TABLE X
               DSNAME=&DSNAME, ACB DSNAME FOR CLUSTER DEFINITION TABLE X
               EXLST=&EXLST,   ACB NOT CURRENTLY SUPPORTED             X
               MACRF=&MACRF    ACB PROCESSING OPTIONS
         AGO   .MAKE_COPIES
.*
.* GENERATE FIRST RPL AT R1
.*
.GENRPL  ANOP
         ZGENRPL ACB=&ACB,      RPL ADDR ACB                           X
               AREA=&AREA,      RPL WORK AREA (DATA MVE, ADDR LOC)     X
               AREALEN=&AREALEN, RPL LEN OF AREA (MAX MVE, 4 FOR LOC)  X
               ARG=&ARG,        RPL KEY FIELD FOR KSDS ACCESS          X
               ECB=&ECB,        RPL ECB TO BE POSTED ON COMPLETION     X
               KEYLEN=&KEYLEN,  RPL KEY LENGTH FOR GENERIC KEY SEARCH  X
               OPTCD=&OPTCD,    RPL OPTIONS (SEE RPL FOR LIST)         X
               RECLEN=&RECLEN   RPL REC LENGTH FOR VARIABLE LENGTH PUT
.MAKE_COPIES ANOP
         AIF   (&TCOPY LE 1).EXIT
         LR    14,1
.COPY_LOOP ANOP
&TCOPY   SETA  &TCOPY-1
         AIF   (&TCOPY LE 0).EXIT
         AHI   14,&LBLK
         MVC   0(&LBLK,14),0(1) COPY &BLK
         AGO   .COPY_LOOP
.EXIT    ANOP
         MEXIT
         MEND
./ ADD NAME=GET      0100-14178-14178-0013-00071-00071-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* MAINTENANCE
.* 10/12/05 ADD USE OF DCBREC IF RECORD NOT SPECIFIED
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 10/20/05 RPI38 - check for register conflicts
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 04/12/06 RPI163 ISSUE MNOTE ERROR FOR TYPE=P
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 06/22/07 RPI 644 ADD VSAM RPL SUPPORT VIA SVC 221 R0=1 R1=A(RPL)
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 10/01/07 RPI 709 CORRECT MNOTE TEXT
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       GET   &DCB,    DCB                                            X
               &REC,    RECORD                                         X
               &MF=I,   NOT SUPPORTED                                  X
               &RPL=,   VSAM REQUEST PARAMETER LIST                    X
               &TYPE=   TYPE=P NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR3
         AIF   (N'&SYSLIST LE 2).NPOK
         MNOTE 12,'GET UNSUPPORTED OPERANDS - &SYSLIST(3)'
         MEXIT
.NPOK    ANOP
         AIF   ('&RPL' NE '').VSAM
         AIF   ('&TYPE' NE '').ERR1
         AIF   ('&DCB'(1,1) EQ '(').DCBREG
         LA    1,&DCB
         AGO   .CHKREC
.DCBREG  ANOP
         ZOPTLR 1,&DCB(1)
.CHKREC  ANOP
         AIF   ('&REC' EQ '').RECDEF
         AIF   ('&REC'(1,1) EQ '(').RECREG
         LA    0,&REC
         AGO   .SVC
.RECREG  ANOP
         AIF   ('&REC(1)' EQ '1' OR '&REC(1)' EQ 'R1').ERR2
         ZOPTLR 0,&REC(1)
         AGO   .SVC
.RECDEF  ANOP
         L     0,DCBREC-IHADCB(1)
.SVC     ANOP
         SVC  151
         MEXIT
.VSAM    ANOP
         AIF   ('&RPL'(1,1) EQ '(').RPLREG
         LA    1,&RPL
         AGO   .VSVC
.RPLREG  ANOP
         ZOPTLR 1,&RPL(1)
.VSVC    ANOP
         LA    0,RPLOPGET
         SVC   121 VSAM GET R0=1 R1=A(RPL)
         MEXIT
.ERR1    MNOTE 12,'GET TYPE= NOT SUPPORTED'
         MEXIT
.ERR2    MNOTE 12,'GET RECORD REG INVALID - &REC(1)'
         MEXIT
.ERR3    MNOTE 12,'GET MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=GETENV   0100-14178-14178-0013-00043-00043-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/12/07                                                 *
.*********************************************************************
.* 07/12/07 RPI 413 INITIAL CODING
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/29/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.*
.* GETENV - GET ENVIRONMENT VARIABLE VALUE
.*   INPUT
.*     R0  = 1 EXTRACE SVC FUNCTION CODE
.*     R1  = ADDRESS OF NULL TERMINATED ENVIRONMENT VARIABLE NAME
.*   OUTPUT
.*     R2  = ADDRESS OF NULL TERMINATED ENVIRONMENT VARIABLE VALUE
.*           (THE AREA IS GETMAIN'D FOR ENTIRE VALUE PLUS NULL)
.*     R15 = RETURN CODE
.*             0 - OK
.*             4 - VALUE NULL
.*             8 - NAME NULL
.*
.*********************************************************************
&N       GETENV &NAME
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&NAME' EQ '').ERR1
         AIF   ('&NAME'(1,1) EQ '(').REGNAME
         LA    1,&NAME
         AGO   .SVC
.REGNAME ANOP
         ZOPTLR 1,&NAME(1)
.SVC     ANOP
         LA   0,1
         SVC  40 EXTRACT GETENV R0=1, R1=A(NAME) OUTPUT R2=A(VALUE)
         MEXIT
.ERR1    MNOTE 12,'GETENV MISSING NULL TERMINATED NAME'
         MEXIT
         MEND
./ ADD NAME=GETMAIN  0100-14178-14178-0013-00146-00146-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27  - issue error for any undefined operands
.* 12/06/05 RPI117 - allow LV=full word and nnnK or nnnM short forms
.* 01/09/06 RPI162 - correct support for nnnK and mmmM extensions.
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 01/21/06 RPI187 CORRECT FREEMAIN and GETMAIN comments, LA/L length,
.*          limit check length, correct K/M support
.* 03/14/06 RPI 210 ALLOW LOC=24,(24),31,(31),(24,31)
.* 04/11/06 RPI 244 ISSUE ERROR FOR UNSUPPORTED KW OPERANDS
.* 06/03/06 RPI 324 correct register 0 versus 1 for A= store
.* 01/23/07 RPI 542 correct output regs r0=len, r1=addr
.* 03/08/07 RPI 568 correct output regs r0=len, r1=addr comments
.* 03/12/07 RPI 575 correct to honor LOC=RES equivalent to LOC=BELOW
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       GETMAIN &TYPE,     TYPE OF REQUEST R,RC,RU ELSE UNSUPP ERROR  X
               &A=,         ADDR TO STORE ADDR                         X
               &BNDRY=,     IGNORED                                    X
               &CHECKZERO=, IGNORED                                    X
               &CONTBDY,    IGNORED                                    X
               &INADDR=,    UNSUPPORTED ERROR                          X
               &KEY=,       IGNORED                                    X
               &LA=,        ADDR OF LENGTH                             X
               &LV=,        LENGTH VALUE                               X
               &LOC=,       BELOW/RES=24, ABOVE,ANY/64=31              X
               &MF=I,       NOT SUPPORTED                              X
               &RELATED=,   IGNORED                                    X
               &SP=,        IGNORED (SEE RPI 244, 248, AND 394)        X
               &STARTBDY=   IGNORED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR4
         AIF   (N'&SYSLIST EQ 1).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(2)'
.NPOK    ANOP
.*
.* GETMAIN - ALLOCATE MEMORY FROM ABOVE OR BELOW 16MB LINE
.*
.*  TYPE
.*    R   - UNCONDITIONAL (DEFAULT IS BELOW THE LINE)
.*    RC  - CONDITIONAL (DEFAULT IS ABOVE THE LINE)
.*    RU  - UNCONDITIONAL (DEFAULT IS ABOVE THE LINE)
.*  LENGHT LA= ADDR OF LENGTH OR (REG)
.*  LENGTH LV= ABSOLUTE LENGTH OR (REG)
.*  LOCATION LOC=
.*    BELOW, RES = 24
.*    ABOVE, ANY = 31
.*  INPUT TO SVC 4
.*    R0 OPTION BITS
.*        BIT 0 - AMODE 31 ALLOCATION ABOVE LINE
.*        BIT 1 - CONDITIONAL REQUEST
.*    R1 LENGTH
.*  OUTPUT
.*    R1 = ADDRESS OF ALLOCATED AREA  RPI 568
.*    R0 = LENGTH ROUNDED UP TO *8    RPI 568
.*    R15 RETURN CODE
.*         0 - OK
.*         4 - REQUEST FAILED OR ABEND 80A IF UNCONDITIONAL
.*
         AIF   ('&INADDR' NE '').ERR2
         AIF   ('&SP'     EQ '').SKPWARN
         MNOTE 4,'GETMAIN IGNORING SP AND USING DEFAULT' RPI 394
.SKPWARN ANOP
         AIF   ('&TYPE' EQ 'R').R
         AIF   ('&TYPE' EQ 'RC').RC
         AIF   ('&TYPE' EQ 'RU').RU
         MNOTE 12,'GETMAIN INVALID TYPE - &TYPE'
         MEXIT
.R       ANOP
&ABOVE   SETB 0
&COND    SETB 0
         AGO  .LV
.RC      ANOP
&ABOVE   SETB 1
&COND    SETB 1
         AGO  .LV
.RU      ANOP
&ABOVE   SETB 1
&COND    SETB 0
.LV      ANOP
         AIF  ('&LV' NE '').CHKLV
         MNOTE 12,'GETMAIN LV= MISSING'
         MEXIT
.CHKLV   ANOP
         AIF  ('&LV'(1,1) EQ '(').LVREG
         AIF  ('&LV'(1,1) GE'0' AND '&LV'(1,1) LE '9').LVLIT
         L    1,=A(&LV)
         AGO  .LOC
.LVLIT   ANOP
&LEN     SETA &LV
         AIF  ('&LV'(K'&LV,1) NE 'K').CHKLVM
         AIF  (&LEN GT 1048576).ERR1
&LEN     SETA &LEN*1024
         AGO  .SETLV
.CHKLVM  ANOP
         AIF  ('&LV'(K'&LV,1) NE 'M').SETLV
         AIF  (&LEN GT 1024).ERR1
&LEN     SETA &LEN*1048576
.SETLV   ANOP
         L    1,=A(&LEN)  RPI 117
         AGO  .LOC
.LVREG   ANOP
         ZOPTLR 1,&LV(1)
.LOC     ANOP
         AIF  ('&LOC' EQ '').OPTIONS
         AIF  ('&LOC' EQ 'ANY').SETABOVE
         AIF  ('&LOC' EQ 'ABOVE').SETABOVE
         AIF  ('&LOC' EQ 'BELOW').SETBELOW
         AIF  ('&LOC' EQ 'RES').SETBELOW         RPI 575
         AIF  ('&LOC(1)' EQ '31' OR '&LOC(2)' EQ '31').SETABOVE
         AIF  ('&LOC(1)' EQ '24' OR '&LOC(2)' EQ '24').SETBELOW
         MNOTE 12,'GETMAIN INVALID LOC - &LOC'
         MEXIT
.SETABOVE ANOP
&ABOVE   SETB  1
         AGO   .OPTIONS
.SETBELOW ANOP
&ABOVE   SETB  0
.OPTIONS ANOP
         LA    0,B'&ABOVE&COND'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
         AIF   ('&A' EQ '').EXIT
         AIF   ('&A'(1,1) EQ '(').AREG
         ST    1,&A RPI 542
         MEXIT
.AREG    ST    1,0(&A(1)) RPI 542
         MEXIT
.ERR1    MNOTE 12,'GETMAIN LENGTH TOO LONG - &LV'
         MEXIT
.ERR2    MNOTE 12,'GETMAIN INADDR= NOT SUPPORTED'
         MEXIT
.ERR3    MNOTE 12,'GETMAIN LENGTH TOO LONG - &LV'
         MEXIT
.ERR4    MNOTE 12,'GETMAIN MF= NOT SUPPORTED'
         MEXIT
.EXIT    MEND
./ ADD NAME=GPARMOD  0100-14178-14178-0013-00022-00022-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 05/16/07                                                 *
.*********************************************************************
.* 05/16/07 RPI 604 ADD BS2000 MACRO TO SET &SYSMOD TO 24 OR 31
.*********************************************************************
         GPARMOD &MODE
         GBLC    &SYSMOD
         AIF     ('&MODE' EQ '24').MODE24
         AIF     ('&MODE' EQ '31').MODE31
         MNOTE   1,'GPARMOD &MODE INVALID'
         MEXIT
.MODE24  ANOP
&SYSMOD  SETC    '24'
         MEXIT
.MODE31  ANOP
&SYSMOD  SETC    '31'
         MEND
./ ADD NAME=GUAM     0100-14178-14178-0013-00383-00383-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 12/01/05                                                 *
.*********************************************************************
.*
.* GUI GRAPHICAL USER ACCESS METHOD MACRO FOR Z390
.*
.*********************************************************************
.* 12/01/05 RPI47 ADD GUI USER INTERFACE SUPPORT
.* 12/16/05 RPI47 ADD GUI COLOR DEFINITIONS
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 02/21/06 RPI205 RENAME GUI MACRO TO GUAM TO REDUCE CONFUSION
.* 02/24/06 RPI217 CORRECT GRAPH,TEXT COMMAND TO SET TEXT LENGTH
.* 05/08/06 RPI308 FIX WINDOW,VIEW TO SWITCH WITH NO RESET OPTIONS
.* 05/24/06 RPI227 ADD SCREEN,COLOR TO SET BACKGROUND AND TEXT COLOR
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       GUAM  &MAJOR,&MINOR
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
&NP     SETA   N'&SYSLIST
        AIF    ('&MAJOR' EQ 'WINDOW').WINDOW
        AIF    ('&MAJOR' EQ 'SCREEN').SCREEN
        AIF    ('&MAJOR' EQ 'GRAPH').GRAPH
        AIF    ('&MAJOR' EQ 'KEYBOARD').KEYBOARD
        AIF    ('&MAJOR' EQ 'MOUSE').MOUSE
        AIF    ('&MAJOR' EQ 'SOUND').SOUND
        AIF    ('&MAJOR' EQ 'SYMBOLS').SYMBOLS
        AIF    ('&MAJOR' EQ 'COLOR').COLOR
        MNOTE  12,'GUI INVALID MAJOR FUNCTION - &MAJOR'
        MEXIT
.WINDOW ANOP
        AIF    ('&MINOR' EQ 'TITLE').WINDOW_TITLE
        AIF    ('&MINOR' EQ 'LOC').WINDOW_LOC
        AIF    ('&MINOR' EQ 'SIZE').WINDOW_SIZE
        AIF    ('&MINOR' EQ 'FONT').WINDOW_FONT
        AIF    ('&MINOR' EQ 'VIEW').WINDOW_VIEW
        AIF    ('&MINOR' EQ 'GETVIEW').WINDOW_GETVIEW
        MNOTE  12,'GUI WINDOW INVALID MINOR FUNCTION - &MINOR'
        MEXIT
.WINDOW_TITLE  ANOP R1=A(TITLE) DQ OR NULL TERM
        LA     0,GUI_WINDOW_TITLE
        AIF    ('&SYSLIST(3)'(1,1) EQ '''').WINDOW_TITLE_LIT
        AIF    ('&SYSLIST(3)'(1,1) EQ '(').WINDOW_TITLE_REG
        LA     1,=A(&SYSLIST(3)) R1=A(TITLE) DQ OR NULL TERM
        AGO    .SVC
.WINDOW_TITLE_LIT ANOP
&TEXT   SETC   '&SYSLIST(3)'(2,K'&SYSLIST(3)-2)
        LA     15,=C'"&TEXT"'     R15=A(TITLE) DQ DELIMITED
        LA     1,=A(*-*)
        ST     15,0(1)            R1=A(A(TITLE))
        AGO    .SVC
.WINDOW_TITLE_REG ANOP
        LA     1,=A(*-*)
        ST     &SYSLIST(3,1),0(1) R1=A(A(TITLE))
        AGO    .SVC
.WINDOW_LOC ANOP R1=A(X,Y)
        LA     0,GUI_WINDOW_LOC
        LA     1,=A(&SYSLIST(3),&SYSLIST(4)) R1=A(X,Y) PIXELS
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP8
        ST     &SYSLIST(3,1),0(1)
.SKP8   ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP9
        ST     &SYSLIST(4,1),4(1)
.SKP9   ANOP
        AGO    .SVC
.WINDOW_SIZE ANOP R1=A(WIDTH,HEIGHT)
        LA     0,GUI_WINDOW_SIZE
        LA     1,=A(&SYSLIST(3),&SYSLIST(4)) R1=A(WIDTH,HEIGHT)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP10
        ST     &SYSLIST(3,1),0(1)
.SKP10  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP11
        ST     &SYSLIST(4,1),4(1)
.SKP11  ANOP
        AGO    .SVC
.WINDOW_FONT ANOP  R1=FONT (8,30)
        LA     0,GUI_WINDOW_FONT
        LA     15,-A(&SYSLIST(3)) R1=A(FONT SIZE) (8-30)
        LA     1,=A(*-*)
        ST     15,0(1) R1=A(A(FONT))
        AGO    .SVC
.WINDOW_VIEW ANOP  R1=VIEW (0-3)
        LA     0,GUI_WINDOW_VIEW
        AIF    ('&SYSLIST(4)' NE '').WINDOW_VIEW_PARMS
        LA     1,=A(GUI_WINDOW_VIEW_&SYSLIST(3),0,0,0)
        AGO    .SVC
.WINDOW_VIEW_PARMS ANOP
        LA     1,=A(GUI_WINDOW_VIEW_&SYSLIST(3),&SYSLIST(4),&SYSLIST(5)X
               ,&SYSLIST(6)) R1=VIEW (0-NONE,1=MCS,2=SCREEN,3=GRAPH)
        AIF    ('&SYSLIST(4)'(1,1) LT '0' OR '&SYSLIST(4)'(1,1) GT '9')X
               .SKPLIT1
        LA     15,=A(&SYSLIST(4))
        ST     15,4(1)
.SKPLIT1 ANOP
        AIF    ('&SYSLIST(5)'(1,1) LT '0' OR '&SYSLIST(5)'(1,1) GT '9')X
               .SKPLIT2
        LA     15,=A(&SYSLIST(5))
        ST     15,8(1)
.SKPLIT2 ANOP
        AGO    .SVC
.WINDOW_GETVIEW ANOP R1=VIEW (0-3)
        LA     0,GUI_WINDOW_GETVIEW SET R0 = CURRENT VIEW (0-3)
        AGO    .SVC
.SCREEN ANOP
        AIF    ('&MINOR' EQ 'READ').SCREEN_READ
        AIF    ('&MINOR' EQ 'WRITE').SCREEN_WRITE
        AIF    ('&MINOR' EQ 'FIELD').SCREEN_FIELD
        AIF    ('&MINOR' EQ 'CURSOR').SCREEN_CURSOR
        AIF    ('&MINOR' EQ 'COLOR').SCREEN_COLOR
        MNOTE  12,'GUI SCREEN INVALID MINOR FUNCTION - &MINOR'
        MEXIT
.SCREEN_READ ANOP R1=A(BUFF,LBUFF,WAIT/NOWAIT,EDIT/NOEDIT)
        LA     0,GUI_SCREEN_READ
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),GUI_&SYSLIST(5),GUI_&SYSLISX
               T(6)) R1=(BUFF,LBUFF,WAIT/NOWAIT,EDIT/NOEDIT)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP1
        ST     &SYSLIST(3,1),0(1)
.SKP1   ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP2
        ST     &SYSLIST(4,1),4(1)
.SKP2   ANOP
        AGO    .SVC
.SCREEN_WRITE ANOP R1=A(ROW,COL,BUFF,LBUFF,EDIT/NOEDIT)
        LA     0,GUI_SCREEN_READ
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),   X
               &SYSLIST(7)) R1=A(ROW,COL,BUFF,LBUFF,EDIT/NOEDIT)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP3
        ST     &SYSLIST(3,1),0(1)
.SKP3   ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP4
        ST     &SYSLIST(4,1),4(1)
.SKP4   ANOP
        AIF    ('&SYSLIST(5)'(1,1) NE '(').SKP5
        ST     &SYSLIST(3,1),8(1)
.SKP5   ANOP
        AIF    ('&SYSLIST(6)'(1,1) NE '(').SKP6
        ST     &SYSLIST(4,1),12(1)
.SKP6   ANOP
        AIF    ('&SYSLIST(7)'(1,1) NE '(').SKP7
        ST     &SYSLIST(3,1),16(1)
.SKP7   ANOP
        AGO    .SVC
.SCREEN_FIELD ANOP R1=A(ROW,COL,LFIELD)
        LA     0,GUI_SCREEN_FIELD
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),&SYSLIST(5))  R1=A(ROW,COL,X
               LFIELD)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP12
        ST     &SYSLIST(3,1),0(1)
.SKP12  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP13
        ST     &SYSLIST(4,1),4(1)
.SKP13  ANOP
        AIF    ('&SYSLIST(5)'(1,1) NE '(').SKP14
        ST     &SYSLIST(3,1),8(1)
.SKP14  ANOP
        AGO    .SVC
.SCREEN_CURSOR ANOP R1=A(ROW,COL,TYPE)
        LA     0,GUI_SCREEN_CURSOR
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),&SYSLIST(5)) R1=A(ROW,COL,TX
               YPE)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP15
        ST     &SYSLIST(3,1),0(1)
.SKP15  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP16
        ST     &SYSLIST(4,1),4(1)
.SKP16  ANOP
        AIF    ('&SYSLIST(5)'(1,1) NE '(').SKP17
        ST     &SYSLIST(3,1),8(1)
.SKP17  ANOP
        AGO    .SVC
.SCREEN_COLOR ANOP R1=A(BG_COLOR,TEXT_COLOR)
        LA     0,GUI_SCREEN_COLOR
        LA     1,=A(&SYSLIST(3),&SYSLIST(4))
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP40
        ST     &SYSLIST(3,1),0(1)
.SKP40  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP41
        ST     &SYSLIST(4,1),4(1)
.SKP41  ANOP
        AGO    .SVC
.GRAPH ANOP
        AIF    ('&MINOR' EQ 'POINT').GRAPH_POINT
        AIF    ('&MINOR' EQ 'LINE').GRAPH_LINE
        AIF    ('&MINOR' EQ 'FILL').GRAPH_FILL
        AIF    ('&MINOR' EQ 'TEXT').GRAPH_TEXT
        MNOTE  12,'GUI GRAPH INVALID MINOR FUNCTION - &MINOR'
        MEXIT
.GRAPH_POINT ANOP R1=A(X,Y,COLOR)
        LA     0,GUI_GRAPH_POINT
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),&SYSLIST(5)) R1=A(X,Y,COLORX
               )
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP37
        ST     &SYSLIST(3,1),0(1)
.SKP37  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP38
        ST     &SYSLIST(4,1),4(1)
.SKP38  ANOP
        AIF    ('&SYSLIST(5)'(1,1) NE '(').SKP39
        ST     &SYSLIST(3,1),8(1)
.SKP39  ANOP
        AGO    .SVC
.GRAPH_LINE ANOP R1=A(X1,Y1,X2,Y2,COLOR)
        LA     0,GUI_GRAPH_LINE
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),&SYX
               SLIST(7)) R1=A(X1,Y1,X2,Y2,COLOR)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP18
        ST     &SYSLIST(3,1),0(1)
.SKP18  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP19
        ST     &SYSLIST(4,1),4(1)
.SKP19  ANOP
        AIF    ('&SYSLIST(5)'(1,1) NE '(').SKP20
        ST     &SYSLIST(3,1),8(1)
.SKP20  ANOP
        AIF    ('&SYSLIST(6)'(1,1) NE '(').SKP21
        ST     &SYSLIST(3,1),12(1)
.SKP21  ANOP
        AIF    ('&SYSLIST(7)'(1,1) NE '(').SKP22
        ST     &SYSLIST(4,1),16(1)
.SKP22  ANOP
        AGO    .SVC
.GRAPH_FILL ANOP R1=A(X1,Y1,X2,Y2,COLOR)
        LA     0,GUI_GRAPH_FILL
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6),&SYX
               SLIST(7)) R1=A(X1,Y1,X2,Y2,COLOR)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP23
        ST     &SYSLIST(3,1),0(1)
.SKP23  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP24
        ST     &SYSLIST(4,1),4(1)
.SKP24  ANOP
        AIF    ('&SYSLIST(5)'(1,1) NE '(').SKP25
        ST     &SYSLIST(3,1),8(1)
.SKP25  ANOP
        AIF    ('&SYSLIST(6)'(1,1) NE '(').SKP26
        ST     &SYSLIST(3,1),12(1)
.SKP26  ANOP
        AIF    ('&SYSLIST(7)'(1,1) NE '(').SKP27
        ST     &SYSLIST(4,1),16(1)
.SKP27  ANOP
        AGO    .SVC
.GRAPH_TEXT ANOP R1=A(X,Y,'text',text_length,color)
        LA     0,GUI_GRAPH_TEXT
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),*-*,*-*,&SYSLIST(7))       X
               R1=A(X,Y,'text',text_length,COLOR)   RPI217
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP28
        ST     &SYSLIST(3,1),0(1)
.SKP28  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP29
        ST     &SYSLIST(4,1),4(1)
.SKP29  ANOP
        AIF    ('&SYSLIST(5)'(1,1) EQ '''').GRAPH_TEXT_LIT
        AIF    ('&SYSLIST(5)'(1,1) EQ '(').GRAPH_TEXT_REG
        LA     15,&SYSLIST(5)
        ST     15,8(1)
        AGO    .SVC
.GRAPH_TEXT_LIT ANOP
&TEXT   SETC   '&SYSLIST(5)'(2,K'&SYSLIST(5)-2)
        LA     15,=C'&TEXT'
        ST     15,8(1)
&LTEXT  SETA   K'&TEXT
        LA     15,&LTEXT RPI217
        ST     15,12(1)
        AGO    .SVC
.GRAPH_TEXT_REG ANOP
        ST     &SYSLIST(3,1),8(1)
        AIF    ('&SYSLIST(6)'(1,1) NE '(').SKP30
        ST     &SYSLIST(3,1),12(1)
.SKP30  ANOP
        AGO    .SVC
.KEYBOARD ANOP
        AIF    ('&MINOR' EQ 'READ').KEYBOARD_READ
        MNOTE  12,'GUI KEYBOARD INVALID MINOR FUNCTION - &MINOR'
        MEXIT
.KEYBOARD_READ ANOP R1=A(mode,char,WAIT/NOWAIT)
        LA     0,GUI_KEYBOARD_READ
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),GUI_&SYSLIST(5)) R1=A(mode,X
               char,WAIT/NOWAIT)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP31
        ST     &SYSLIST(3,1),0(1)
.SKP31  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP32
        ST     &SYSLIST(4,1),4(1)
.SKP32  ANOP
        AGO    .SVC
.MOUSE  ANOP
        AIF    ('&MINOR' EQ 'READ').MOUSE_READ
        MNOTE  12,'GUI MOUSE INVALID MINOR FUNCTION - &MINOR'
        MEXIT
.MOUSE_READ ANOP R1=A(x,y,left,right)
        LA     0,GUI_MOUSE_READ
        LA     1,=A(&SYSLIST(3),&SYSLIST(4),&SYSLIST(5),&SYSLIST(6)) R1X
               =A(x,y,left,right)
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SKP33
        ST     &SYSLIST(3,1),0(1)
.SKP33  ANOP
        AIF    ('&SYSLIST(4)'(1,1) NE '(').SKP34
        ST     &SYSLIST(4,1),4(1)
.SKP34  ANOP
        AIF    ('&SYSLIST(5)'(1,1) NE '(').SKP35
        ST     &SYSLIST(5,1),8(1)
.SKP35  ANOP
        AIF    ('&SYSLIST(6)'(1,1) NE '(').SKP36
        ST     &SYSLIST(6,1),12(1)
.SKP36  ANOP
        AGO    .SVC
.SOUND  ANOP
        AIF    ('&MINOR' EQ 'PLAY').SOUND_PLAY
        MNOTE  12,'GUI SOUND INVALID MINOR FUNCTION - &MINOR'
        MEXIT
.SOUND_PLAY ANOP R1=A(wav_file) DQ or null term
        LA     0,GUI_SOUND_PLAY
        AIF    ('&SYSLIST(3)'(1,1) NE '(').SOUND_PLAY_REG
        LA     1,&SYSLIST(3) R1=A(wave_file) DQ or null terminated
        AGO    .SVC
.SOUND_PLAY_REG ANOP
        ZOPTLR 1,&SYSLIST(3,1)
        AGO    .SVC
.SYMBOLS ANOP
GUI_WINDOW_TITLE       EQU X'0101' GUI WINDOW,TITLE,'text'
GUI_WINDOW_LOC         EQU X'0102' GUI WINDOW,LOC,x,y
GUI_WINDOW_SIZE        EQU X'0103' GUI WINDOW,width,height
GUI_WINDOW_FONT        EQU X'0104' GUI WINDOW,size (8-30)
GUI_WINDOW_VIEW        EQU X'0105' GUI WINDOW,VIEW,type (0-3)
GUI_WINDOW_VIEW_NONE   EQU 0       GUI WINDOW,VIEW,NONE window closed
GUI_WINDOW_VIEW_MCS    EQU 1       GUI WINDOW,VIEW,MCS console log
GUI_WINDOW_VIEW_SCREEN EQU 2       GUI WINDOW,VIEW,SCREEN,row,col,color
GUI_WINDOW_VIEW_GRAPH  EQU 3       GUI WINDOW,VIEW,GRAPH,x,y,color
GUI_WINDOW_GETVIEW     EQU X'0106' GUI WINDOW,GETVIEW return view 0-3
GUI_SCREEN_READ        EQU X'0201' GUI SCREEN,READ,b,lb,WAIT/NOWAIT
GUI_WAIT               EQU 1       GUI WAIT FOR KEYBOARD INPUT
GUI_NOWAIT             EQU 0       GUI NOWAIT RETURN R15=4 IF NO INPUT
GUI_SCREEN_WRITE       EQU X'0202' GUI SCREEN,WRITE,row,col,b,lb,color
GUI_SCREEN_FIELD       EQU X'0203' GUI SCREEN,FIELD,row,col,length
GUI_SCREEN_CURSOR      EQU X'0204' GUI SCREEN,CURSOR,row,col,type
GUI_SCREEN_COLOR       EQU X'0205' GUI SCREEN,COLOR,bg_color,text_color
GUI_GRAPH_POINT        EQU X'0301' GUI GRAPH,POINT,x,y,color
GUI_GRAPH_LINE         EQU X'0302' GUI GRAPH,LINE,x1,y1,x2,y2,color
GUI_GRAPH_FILL         EQU X'0303' GUI GRAPH,FILL,x1,y1,x2,y2,color
GUI_GRAPH_TEXT         EQU X'0304' GUI GRAPH,TEXT,x,y,'text',color
GUI_KEYBOARD_READ      EQU X'0401' GUI KEYBOARD,mode,char,WAIT/NOWAIT
GUI_MOUSE_READ         EQU X'0501' GUI MOUSE,x,y,left,right
GUI_BUTTON_DOWN        EQU 1 MOUSE BUTTON PRESSED DOWN
GUI_BUTTON_UP          EQU 0 MOUSE BUTTON UP
GUI_SOUND_PLAY         EQU X'0601' GUI SOUND,PLAY,wav_file
         MEXIT
.COLOR   ANOP
         AIF   (N'&SYSLIST EQ 4).COLOR_RGB
         AIF   ('&SYSLIST(2)' EQ 'RED').COLOR_RED
         AIF   ('&SYSLIST(2)' EQ 'GREEN').COLOR_GREEN
         AIF   ('&SYSLIST(2)' EQ 'BLUE').COLOR_BLUE
         AIF   ('&SYSLIST(2)' EQ 'WHITE').COLOR_WHITE
         AIF   ('&SYSLIST(2)' EQ 'BLACK').COLOR_BLACK
         MNOTE 12,'GUI COLOR UNDEFINED - &SYSLIST(2)'
         MEXIT
.COLOR_RGB ANOP
&N       DC    AL1(0,&SYSLIST(2),&SYSLIST(3),&SYSLIST(4)) RGB COLOR
         MEXIT
.COLOR_RED ANOP
         DC    AL1(0,255,0,0) RGB RED COLOR
         MEXIT
.COLOR_GREEN ANOP
         DC    AL1(0,0,255,0) RGB GREEN COLOR
         MEXIT
.COLOR_BLUE ANOP
         DC    AL1(0,0,0,255) RGB BLUE COLOR
         MEXIT
.COLOR_BLACK ANOP
         DC    AL1(0,0,0,0) RGB BLACK COLOR
         MEXIT
.COLOR_WHITE ANOP
         DC    AL1(0,255,255,255) RGB WHITE COLOR
         MEXIT
.SVC     ANOP
         SVC   84 GUAM R0LL=MAJOR/MINOR
         MEND
./ ADD NAME=IF       0100-14178-14178-0013-00084-00084-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     03/27/74.
.*             REMARKS.  CONTROL STRUCTURE FOR CONDITIONAL EXECUTION.
.********************************************************************
.* 05/23/76 DSH - SUPPORT ELSEIF.
.* 05/15/06 RPI 316 UPDATE FOR COMPAT.
.* 04/11/07 RPI     USE ZSTRGBL COPY AND EXPAND LEVELS TO 100
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.********************************************************************
         IF
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ &ZSTR_MAX_LVL)
               MNOTE 8,'IF - LEVEL OVERFLOW'
               MEXIT
         AEND
         :&ZSTR_LVL SETA &ZSTR_LVL+1
         :&ZSTR_AIF_CNT SETA &ZSTR_AIF_CNT+1   IF COUNTER
         :&ZSTR_LVL_TCNT(&ZSTR_LVL) SETA &ZSTR_AIF_CNT
         :&ZSTR_LVL_TYPE(&ZSTR_LVL) SETC 'IF'
         :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA 2     IF BLK/LAB COUNTER
         :&ZSTR_LVL_ELSE(&ZSTR_LVL) SETB 0     ELSE RESET
         :&ZSTR_LVL_TEND(&ZSTR_LVL) SETB 0     END LABEL RESET
         :&AND_CONN SETB 1             ASSUME AND CONNECTOR IF ANY
         :&N   SETA N'&SYSLIST         TOTAL TEST AND CONNECTOR PARMS
         :&S   SETA 1                  OPERAND INDEX
         :&BLK_CNT SETA 1              LAB FOR THIS BLOCK USED BY OR
         AWHILE (&S LE &N)
               :&SN SETA  N'&SYSLIST(&S)        TEST OPERANDS
               :&OP SETC  '&SYSLIST(&S,1)'      TEST OPCODE
               AIF (&SN EQ 1)  COMPARE NOT IN QUOTES
                   AIF (&N LT &S+3)
                       MNOTE 8,'IF - TEST SUBLIST LENGTH INVALID - &SYSX
               LIST(&S)'
                       MEXIT
                   AEND
                   :&BC SETC  '&SYSLIST(&S+2)'  TEST COMPARE MASK
                   :&OPR SETC '&SYSLIST(&S+1),&SYSLIST(&S+3)'
                   :&S       SETA  &S+4-1     POS TO TEST END-1
               AELSEIF (&SN EQ 4)  OPERAND IN QUOTES WITH CONNECTORS
                   :&BC      SETC  '&SYSLIST(&S,3)'
                   :&OPR     SETC  '&SYSLIST(&S,2),&SYSLIST(&S,4)'
               AEND
               AIF   (&AND_CONN)    IF AND EXIT IF COMPARE FAILS
         &OP   &OPR
         BC    15-&BC,#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSX
               TR_LVL)
               AELSE                IF OR  EXEC BLOCK IF TEST OK
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
                    :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA &ZSTR_LVL_BCNT(&ZSTX
               R_LVL)+1
         &OP   &OPR
         BC    15-&BC,#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSX
               TR_LVL)
               AEND
               :&S SETA  &S+1       ADVANCE TO CONNECTOR OR END
               AIF (&S LE &N)
                   :&SN SETA N'&SYSLIST(&S)
                   AIF (&SN NE 1)
                       MNOTE 8,'IF - INVALID CONNECTOR'
                       MEXIT
                   AEND
                   AIF   ('&SYSLIST(&S)' EQ 'OR')
         B     #@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&BLK_CNT
                       :&AND_CONN SETB 0
                   AELSEIF  ('&SYSLIST(&S)' EQ 'AND')
                       :&AND_CONN SETB 1
                   AELSE
                       MNOTE 8,'IF - INVALID CONNECTOR'
                       MEXIT
                   AEND
                   :&S SETA &S+1
                   AIF (&S GT &N)
                       MNOTE 8,'IF - MISSING TEST AFTER CONNECTOR'
                       MEXIT
                   AEND
               AEND
         AEND
         AIF   (NOT &AND_CONN)
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&BLK_CNT DS 0H
         AEND
         MEND
./ ADD NAME=IHADCBE  0100-14178-14178-0013-00016-00016-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 05/05/06 RPI 281 ADD DCBE SUPPORT FOR EODAD= AND SYNAD=
.*********************************************************************
.* See DCB DCBE= and DCBD  DCBDCBE field
.*********************************************************************
         MACRO
         IHADCBE
IHADCBE  DSECT
DCBEEODA DS    A
DCBESYNA DS    A
         MEND
./ ADD NAME=IHAEPIE  0100-14178-14178-0013-00061-00061-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 05/01/06 RPI 305 - define DSECT for ESPIE PIE control block
.* 06/17/08 RPI 845 - rename from EPIED to IHAEPIE macro and change
.*          offsets to be z/OS compatible with 64 bit reg flag on.
.*********************************************************************
         MACRO
         IHAEPIE
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'IHAEPIE UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.*  ESPIE EXTENDED PROGRAM INTERRUPTION ELEMENT (EPIE)
.*
.*  ESPIE EXIT MUST MODIFY PSW AND ANY REGS BEFORE BR 14 EXIT
.*
EPIE     DSECT
EPIEEPIE DS    CL4   C'EPIE'
EPIEPARM DS    A     A(PARAM PASSED AT ESPIE OR 0)
         DS    16F   32 bit regs not used by z390 (see EPIEG64)
EPIEPSW  DS    0XL8  (OLD PSW  (EC 24/31 BIT ONLY)
EPIEEMK1 DS    X     PSW MASK
EPIEMWP1 DS    X     PSW KEY AND MWP
EPIECCPM DS    X     PSW CONDITION CODE AND PGM MASK
         DS    X     RESERVED
EPIENXT1 DS    0F    PSW 31 BIT ADDR NEXT INSTRUCTION
EPIEAMF1 DS    X     PSW ADDRESS HIGH BYTE WITH AMODE BIT
EPIEMOD1 EQU   X'80' PSW 31 BIT AMODE BIT
EPIEADD1 DS    XL3   PSW 24 BIT ADDRESSS OF NEXT INSTRUCTION
EPIEINT  DS    0XL4  PROGRAM INTERRUPTION INFO
EPIEIRSV DS    XL1   RESERVED
EPIEILC1 DS    B     INSTRUCTION LENGTH BYTE
EPIEIL1  EQU   X'06' INSTRUCTION LENGTH MASK (2, 4, 6 LENGTH)
EPIEINC1 DS    0CL2  INTERRUPTION CODE
         ORG   EPIE+X'99'
EPIEFLGS DS    XL1   EPIE OPTION FLAGS
EPIEUP64 EQU   X'40' USE 64 BIT REGS INSTEAD OF 32 BIT
         DS    XL6   RESERVED
EPIEG64   DS   0D
EPIEG6400 DS   D
EPIEG6401 DS   D
EPIEG6402 DS   D
EPIEG6403 DS   D
EPIEG6404 DS   D
EPIEG6405 DS   D
EPIEG6406 DS   D
EPIEG6407 DS   D
EPIEG6408 DS   D
EPIEG6409 DS   D
EPIEG6410 DS   D
EPIEG6411 DS   D
EPIEG6412 DS   D
EPIEG6413 DS   D
EPIEG6414 DS   D
EPIEG6415 DS   D
EPIELEN  EQU   *-EPIE
         MEND
./ ADD NAME=IHASDWA  0100-14178-14178-0013-00042-00042-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 05/01/06 RPI 305 - define DSECT for ESTAE PIE control block
.* 06/21/08 RPI 845 - change name from ESTAD.NAC to IHAESTA.MAC
.*                    and redefine fields for z/OS compatibility
.*                    Note ESTAPSW and ESTAG64 removed as only
.*                    restart request allowed via R15=4, R0=restart
.* 06/22/08 RPI 845 - add IHASDWA passed to ESTAE exit in R1 for
.*                    access to SDWAEC1 EC PSW and SDWAG64 regs
.*                    in SDWARC4 extension.
.*********************************************************************
.* SYSTEM DIAGNOSTIC WORK AREA PASSED TO ESTA EXIT IN R1
.*  1.  Abend code stored in SDWAABSS
.*  2.  PSW at abend stored in SDWAEC1
.*  3.  16 - 64 bit GPR regs stored in SDWAG64 in SDWARC4 extension
.*  4.  For restart set R0 to new PSW address, and R15=4
.*  5.  All GPR's are restored from SDWAG64 on restart.
.*********************************************************************
         MACRO
         IHASDWA
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'IHASDWA NSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
SDWA     DSECT
SDWAPARM DS    A    ESTAE PARM ADDRESS
SDWAABSS DS    0BL4 COMPLETION CODE
SDWACMPF DS    B    COMPLETION CODE FLAGS
SDWACMPC DS    BL3  COMPLETION CODE (FIRST 12 BITS SYS,LAST 12 USER)
         ORG   SDWA+X'68'
SDWAEC1  DS    XL8  EXTENDED CONTROL PSW AT ERROR
         ORG   SDWA+X'170'
SDWAXPAD DS    A    ADDR OF POINTERS EXTENSION SDWAPTRS
SDWAPTRS DSECT
         ORG   SDWAPTRS+X'18'
SDWAXEME DS    A    ADDR OF 64 BIT REGISTER INFO
SDWARC4  DSECT
SDWAG64  DS    16XL8 16 - 64 BIT GPRS AT ERROR
         MEND
./ ADD NAME=KSIRD    0100-14178-14178-0013-00050-00050-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/26/07                                                 *
.*********************************************************************
.* 11/26/07 INITIAL CODING OF KSIR KSDS INSERT TREE RECORD CONTROL BLK
.* 01/08/08 RPI 723 REVERSE FWD/BWD FOR CONSISTENCE WITH LOW/HIGH SEQ
.* 02/18/08 RPI 807 ADD KSIRLOWH AND KSIRHGHH
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         KSIRD
.*
.* IF KSIR ALREADY DEFINED EXIT NOW
.*
         GBLB  &Z390_KSIR
         GBLC  &Z390_KSIR_NAME,&Z390_KSIR_TYPE
         AIF   (&Z390_KSIR).EXIT
&Z390_KSIR     SETB 1
&Z390_KSIR_NAME SETC '&SYSLOC'
&Z390_KSIR_TYPE SETC '&SYSSTYP'
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'KSIR UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.*       KEYED SEQUENTIAL INSERT RECORD CONTROL BLOCK
.*
.*       IF VX0 INDEX XRBA HIGH BIT (HB) THEN IT POINTS TO VES KSIT
.*       KSITTOP - XRBA TO TOP   KSIR IN BALANCED TREE
.*       KSITFST - XRBA TO FIRST KSIR IN TREE FOR SEQ FWD
.*       KSITLST - XRBA TO LAST  KSIR IN TREE FOR SEQ BWD
.*
IHAKSIR  DSECT
KSIRID   DS   CL4 KSIT ID C'KSIR'
KSIRPAR  DS   XL8 XRBA TO PARENT KSIR OR KSIT IN AVL BALANCED TREE
KSIRLOW  DS   XL8 XRBA TO NEXT LOWEST  KSIR NODE IN TREE OR -1
KSIRHIGH DS   XL8 XRBA TO NEXT HIGHEST KSIR NODE IN TREE OR -1
KSIRBWD  DS   XL8 XRBA TO NEXT LOWEST  KSIR IN TREE OR -1
KSIRFWD  DS   XL8 XRBA TO NEXT HIGHEST KSIR IN TREE OR -1
KSIRREC  DS   XL8 XRBA TO RECORD OR -1 IF DELETED
KSIRLHT  DS   X   LOW  BRANCH AVL TREE HEIGHT (0-63)
KSIRHHT  DS   X   HIGH BRANCH AVL TREE HEIGHT (0-63)
KSIRLEN  EQU  *-IHAKSIR
          AIF  ('&Z390_KSIR_NAME' EQ '' OR '&Z390_KSIR_TYPE' EQ '').EXIX
               T
&Z390_KSIR_NAME &Z390_KSIR_TYPE
.EXIT    ANOP
         MEND
./ ADD NAME=KSITD    0100-14178-14178-0013-00043-00043-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/26/07                                                 *
.*********************************************************************
.* 11/26/07 INITIAL CODING OF KSIT KSDS INSERT TREE CONTROL BLOCK
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         KSITD
.*
.* IF KSIT ALREADY DEFINED EXIT NOW
.*
         GBLB  &Z390_KSIT
         GBLC  &Z390_KSIT_NAME,&Z390_KSIT_TYPE
         AIF   (&Z390_KSIT).EXIT
&Z390_KSIT     SETB 1
&Z390_KSIT_NAME SETC '&SYSLOC'
&Z390_KSIT_TYPE SETC '&SYSSTYP'
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'KSIT UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.*       KEYED SEQUENTIAL INSERT TREE CONTROL BLOCK
.*
.*       IF VX0 INDEX XRBA IS NEG, IT POINTS TO KSIT INSERT TREE CB
.*       KSITTOP - XRBA TO TOP   KSIR AT TOP OF BALANCED TREE
.*       KSITFST - XRBA TO FIRST KSIR IN TREE FOR SEQ FWD
.*       KSITLST - XRBA TO LAST  KSIR IN TREE FOR SEQ BWD
.*
IHAKSIT  DSECT
KSITID   DS   CL4 KSIT ID C'KSIT'
KSITTOP  DS   XL8 TOP   XRBA TO TOP KSIR IN BALANCED TREE
KSITFST  DS   XL8 FIRST XRBA TO FIRST (LOWEST)  KSIR IN TREE
KSITLST  DS   XL8 LAST  XRBA TO LAST  (HIGHEST) KSIR IN TREE
KSITLEN  EQU  *-IHAKSIT
          AIF  ('&Z390_KSIT_NAME' EQ '' OR '&Z390_KSIT_TYPE' EQ '').EXIX
               T
&Z390_KSIT_NAME &Z390_KSIT_TYPE
.EXIT    ANOP
         MEND
./ ADD NAME=LINK     0100-14178-14178-0013-00138-00138-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27  - issue error for any undefined operands
.* 10/21/05 RPI41  - add PARAM= and VL= support
.* 11/13/05 RPI89  - add support for DDNAME= and DSNAME=
.* 11/16/05 RPI95  - add DDNAME= and DSNAME= conflict checking
.* 11/19/05 RPI102 - allow DDNAME or DSNAME to replace EP or EPLOC
.* 12/06/05 RPI118 - use SR vs LA, reg chk, drop BALR/USING, fix VL
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 03/28/06 RPI266 CORRECT MISSING .DSNERR LABEL (WAS .DSHERR)
.* 04/11/06 RPI244 SUPPORT DE=, UNSUPPORTED ERRET=
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 03/04/12 RPI 1194 support single parm without (...)
.*********************************************************************
.* LOAD AND EXEC PGM VIA SVC 6
.*   R0  = ADDR PGM NAME (8 BYTES SPACE FILLED)
.*   R15 = 0    USE SYS390 DEFAULT PATH FROM EZ390 PARM
.*   R15 = ADDR DSNAME FILE SPEC IF HIGH BIT OFF (NULL OR DQ DELIMITED)
.*   R15 = ADDR DDNAME IF HIGH BIT ON (8 BYTES SPACE FILLED)
.* NOTES:
.*   1.  DSNAME OR DDNAME MAY BE 1 OR MORE DIRECTORY PATHS TO SEARCH
.*       OR THEY MAY BE PATH AND FILE NAME WHICH OVERRIDES EP/EPLOC
.*   2.  RETURN CODE SET BY CALLED PGM IF SUCCESSFUL
.*   3.  ABEND WITH S806
.*********************************************************************
&N       LINK  &DCB=,         IGNORED                                  X
               &DDNAME=,      LOAD FROM DIR OR FILE DEFINED IN ENV.VAR X
               &DE=,          BLDL DIRECTORY ENTRY                     X
               &DSNAME=,      LOAD FROM RX OR (REG) FILE SPEC          X
               &EP=,          PGMNAME 1-8 CHAR                         X
               &EPLOC=,       RX LABEL OR (REG) POINTER TO PGM FIELD   X
               &ERRET=,       ERROR EXIT NOT SUPPORTED                 X
               &ID=,          IGNORED                                  X
               &LSEARCH=,     IGNORED                                  X
               &MF=I,         NOT SUPPORTED                            X
               &PARAM=,       PARAMETER LIST                           X
               &VL=1          SET HIGH BIT IN LAST PARM ADDR
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR2
         AIF   (N'&SYSLIST LE 0).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
         MEXIT
.NPOK    ANOP
         AIF    ('&ERRET' NE '').ERR1
         AIF    ('&PARAM' EQ '').ENDPARM
         AIF    ('&PARAM'(1,1) NE '(').ONEPARM RPI 1194
         LA     1,=A&PARAM
         AGO    .ONESKIP
.ONEPARM ANOP
         LA     1,=A(&PARAM)
.ONESKIP ANOP
         AIF    (&VL NE 1).ENDPARM
&OFF     SETA   N'&PARAM*4-4
         OI     &OFF.(1),X'80'
.ENDPARM ANOP
         AIF   ('&DE' NE '').DE
         AIF   ('&EP' NE '').EP
         AIF   ('&EPLOC' NE '').EPLOC
         SR    0,0
         AIF   ('&DDNAME' NE '' OR '&DSNAME' NE '').CHKDSN
         MNOTE 12,'LINK REQUIRES EP, EPLOC, DDNAME, OR DSNAME'
         MEXIT
.DE      ANOP
         AIF   ('&DE'(1,1) EQ '(').DEREG
         LA    0,&DE
         AGO   .DEADD
.DEREG ANOP
         ZOPTLR 0,&DE(1)
.DEADD   ANOP
         AHI   0,2
         AIF   ('&EP' EQ '' AND '&EPLOC' EQ '').CHKDSN
         MNOTE 12,'LINK DE EP AND EPLOC ARE MUTUALLY EXCLUSIVE'
         MEXIT
.EP      ANOP
         LA    0,=CL8'&EP'
         AGO   .CHKDSN
.EPLOC   ANOP
         AIF   ('&EPLOC'(1,1) EQ '(').EPLOCREG
         LA    0,&EPLOC
         AGO   .CHKDSN
.EPLOCREG ANOP
         AIF   ('&EPLOC(1)' EQ '1' OR '&EPLOC(1)' EQ 'R1').EPERR
         ZOPTLR 0,&EPLOC(1)
         AGO   .CHKDSN
.EPERR   ANOP
         MNOTE 12,'LINK INVALID EPLOC REG'
         MEXIT
.CHKDSN  ANOP
         AIF   ('&DSNAME' EQ '').CHKDD
         AIF   ('&DDNAME' EQ '').DSNOK
         MNOTE 12,'LINK DSNAME AND DDNAME ARE MUTUALLY EXCLUSIVE'
         MEXIT
.DSNOK   ANOP
         AIF   ('&DSNAME'(1,1) EQ '(').DSNREG
         LA    15,&DSNAME
         AGO   .SVC
.DSNREG  ANOP
         AIF   ('&DSNAME(1)' EQ '0' OR '&DSNAME(1)' EQ 'R0').DSNERR
         ZOPTLR 15,&DSNAME(1)
         AGO   .SVC
.DSNERR  ANOP
         MNOTE 12,'LINK INVALID DSNAME REG'
         MEXIT
.CHKDD   ANOP
         AIF   ('&DDNAME' EQ '').DEFPATH
         AIF   ('&DDNAME'(1,1) EQ '(').DDREG
         LA    15,=CL8'&DDNAME'
         OILH  15,X'8000' DD VS DSN
         AGO   .SVC
.DDREG   ANOP
         AIF   ('&DDNAME(1)' EQ '0' OR '&DDNAME(1)' EQ 'R0').DDERR
         ZOPTLR 15,&DDNAME(1)
.SKP1    ANOP
         OILH  15,X'8000' DD VS DSN
         AGO   .SVC
.DDERR   ANOP
         MNOTE 12,'LINK INVALID DDNAME REG'
         MEXIT
.DEFPATH ANOP
         SR    15,15 USE DEFAULT SYS390 SEARCH
.SVC     ANOP
         SVC    6 LINK R0=A(PGM) R1-PARMS R15=DDNAME/DSNAME ADDR OR 0
         MEXIT
.ERR1    MNOTE 12,'LINK ERRET= UNSUPPORTED'
         MEXIT
.ERR2    MNOTE 12,'LINK MF= UNSUPPORTED'
         MEXIT
         MEND
./ ADD NAME=LOAD     0100-14178-14178-0013-00142-00142-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27  - issue error for any undefined operands
.* 10/20/05 RPI89  - issue error for any undefined operands
.* 11/16/05 RPI95  - add DDNAME and DSNAME support and doc RC
.* 11/19/05 RPI102 - allow DDNAME/DSNAME to replace EP/EPLOC
.* 12/06/05 RPI118 - use SR vs LA, reg chk, drop BALR/USING, fix VL
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 03/28/06 RPI266 CORRECT MISSING .SKP1 TO .SKPLR1
.* 04/11/06 RPI244 ERROR ON UNSUPPORTED KEYWORDS, SUPPORT DE=,LOADPT=
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 10/23/08 RPI 921 add support for ERRET= exit on load error, ZSTRMAC
.*********************************************************************
.* LOAD PGM VIA SVC 8
.*
.* INPUT
.*   R0  = ADDR PGM NAME (8 BYTES SPACE FILLED)
.*   R15 = 0    USE SYS390 DEFAULT PATH FROM EZ390 PARM
.*   R15 = ADDR DSNAME FILE SPEC IF HIGH BIT OFF (NULL OR DQ DELIMITED)
.*   R15 = ADDR DDNAME IF HIGH BIT ON (8 BYTES SPACE FILLED)
.*
.* OUTPUT
.*   R0  = LOAD ADDRESS
.*   R15 = O IF SUCCESSFUL
.*   R15 = 4 IF LOAD FAILED
.*
.* NOTES:
.*   1.  DSNAME OR DDNAME MAY BE 1 OR MORE DIRECTORY PATHS TO SEARCH
.*       OR THEY MAY BE PATH AND FILE NAME WHICH OVERRIDES EP/EPLOC
.*********************************************************************
&N       LOAD  &DCB=,     IGNORED                                      X
               &DDNAME=,  1 TO 8 CHARACTER DDNAME                      X
               &DE=,      BLDL ENTRY                                   X
               &DSNAME=,  RX LABEL OR (REG) > NULL OR ".." DIR/DSN     X
               &EP=,      1 TO 8 CHARACTER PROGRAM NAME                X
               &EPLOC=,   RX LABEL OR (REG) > OF 8 BYTE PGM NAME       X
               &ERRET=,   NOT UNSUPPORTED                              X
               &EXTINFO=, IGNORED                                      X
               &LSEARCH=, IGNORED                                      X
               &LOADPT=,  STORE LOAD ADDRESS                           X
               &MF=I,     NOT SUPPORTED                                X
               &RELATED=  IGNORED
       AIF   ('&N' NE '')
&N       DS    0H
       AEND
       AIF   ('&MF' NE 'I')
               MNOTE 12,'LOAD MF= NOT SUPPORTED'
               MEXIT
       AEND
       AIF   (N'&SYSLIST NE 0)
               MNOTE 12,'LOAD UNSUPPORTED OPERANDS - &SYSLIST(1)'
               MEXIT
       AEND
       AIF   ('&DE' NE '')
               AIF   ('&DE'(1,1) EQ '(')
         ZOPTLR 0,&DE(1)
               AELSE
         LA    0,&DE
               AEND
         AHI   0,2
               AIF   ('&EP' NE '' OR '&EPLOC' NE '')
                     MNOTE 12,'LOAD DE EP EPLOC MUTUALLY EXCLUSIVE'
                     MEXIT
               AEND
       AELSEIF ('&EP' NE '')
         LA    0,=CL8'&EP'
               AIF   ('&EPLOC' NE '')
                     MNOTE 12,'LOAD  EP AND EPLOC MUTUALLY EXCLUSIVE'
                     MEXIT
               AEND
       AELSEIF ('&EPLOC' NE '')
               AIF   ('&EPLOC'(1,1) EQ '(')
         ZOPTLR 0,&EPLOC(1)
               AELSE
         LA    0,&EPLOC
               AEND
       AELSE
         SR    0,0
               AIF   ('&DDNAME' EQ '' AND '&DSNAME' EQ '')
                     MNOTE 12,'LOAD REQUIRES DE, EP, EPLOC, DDNAME, OR X
               DSNAME'
                     MEXIT
               AEND
       AEND
       AIF   ('&DSNAME' EQ '')
             AIF   ('&DDNAME' EQ '')
         SR    15,15 USE DEFAULT SYS390 SEARCH
               AELSE
                   AIF   ('&DDNAME'(1,1) EQ '(')
                         AIF   ('&DDNAME(1)' EQ '0' OR '&DDNAME(1)' EQ X
               'R0')
                               MNOTE 12,'LOAD DDNAME INVALID REG'
                               MEXIT
                         AEND
         ZOPTLR 15,&DDNAME(1)
                   AELSE
         LA    15,=CL8'&DDNAME'
                   AEND
         OILH  15,X'8000' DD VS DSN
               AEND
       AELSE
               AIF   ('&DDNAME' NE '')
                     MNOTE 12,'LOAD DSNAME AND DDNAME MUTUALLY EXCLUSIVX
               E'
                     MEXIT
               AEND
               AIF   ('&DSNAME'(1,1) NE '(')
         LA    15,&DSNAME
               AELSE
                   AIF   ('&DSNAME(1)' EQ '0' OR '&DSNAME(1)' EQ 'R0')
                         MNOTE 12,'LOAD DSNAME INVALID REG'
                         MEXIT
                   AEND
         ZOPTLR 15,&DSNAME(1)
               AEND
         AEND
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         AIF   ('&LOADPT' NE '')
               AIF   ('&LOADPT'(1,1) EQ '(')
         ST    0,0(&LOADPT(1))
               AELSE
         ST    0,&LOADPT
               AEND
         AEND
         AIF   ('&ERRET' NE '')             RPI 921
         LTR   15,15
               AIF  ('&ERRET'(1,1) EQ '(')
         BNZR  &ERRET(1)
               AELSE
         BNZ   &ERRET
               AEND
         AEND
         MEXIT
         MEND
./ ADD NAME=LX       0100-14178-14178-0013-00016-00016-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 04/28/06 RPI 298 CORRECT TO LOAD REGISTER PAIR AT R AND R+2
.*********************************************************************
&N       LX    &R1,&S2   LOAD  LH/LB
&N       LA    15,&S2
         LD    &R1,0(15)
         LD    &R1+2,8(15)
         MEND

./ ADD NAME=MODCB    0100-14178-14178-0013-00183-00183-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 08/10/07 INITIAL CODING TO SUPPORT AREA, RECLEN INITIALLY
.* 08/22/07 RPI 680  CORRECT REPLRECL
.* 08/27/07 RPI 688  SUPPORT RPL=(REG)
.* 09/03/07 RPI 690  ADD ARG= AND OPTCD= SUPPORT
.* 09/03/07 RPI 672  FIX 3 MISSPELLED LABELS,&OPTCDF,OPTF1/2,&MODS ERRS
.*          ADD CROSS CHECK FOR ACB/RPL OPTION MATCHS
.* 09/15/07 RPI 696  ADD SUPPORT FOR RPL OPTCD FWD DEFAULT OPTION SET
.*          ADD RPL FIELD ACB ADDR
.* 09/17/07 RPI 682  ADD ACB DDNAME, DSNAME, VCLRN,
.*          and use  ZGENMACF and ZGENOPTD
.* 09/19/07 RPI 697  SET RC=0
.* 12/08/07 RPI 750  ADD RPL KEYLEN= PARM FOR GENERIC KEY LENGTH
.* 04/19/08 RPI 833  add SETC quotes for HLASM compatibility
.* 04/23/09 RPI 1023 jm1 MNOTE 4 instead of 12 if STRNO specified
.* 04/23/09 RPI 1023 jm2 MODCB generates OI and NI instead of MVI
.* 04/23/09 RPI 1023 jm3 support for AREALEN
.*********************************************************************
&N       MODCB &ACB=,        ACB CONTROL BLOCK ADDRESS (ALSO RPL FIELD)X
               &DDNAME=,     ACB DDNAME FOR VCDT VSAM CATALOG.ENTRY    X
               &DSNAME=,     ACB DSNAME OVERRIDE ADDR VCDT CAT.ENTRY   X
               &MACRF=,      ACB OPTIONS                               X
               &VCLRN=,      ACB VCDT CATALOG DEFAULT ENTRY NAME       X
               &RPL=,        RPL REQUEST PARAMATER LIST ADDRESS        X
               &AREA=,       RPL ADDR OF RECORD AREA                   X
               &AREALEN=,    RPL AREA LENGTH       jm3                 X
               &ARG=,        RPL ADDR OF ARG FOR KEY/REC#/RBA/XRBA     X
               &KEYLEN=,     RPL GENERIC KEY LENGTH OR ZERO TO USE DEF X
               &OPTCD=,      RPL OPTION FLAGS                          X
               &RECLEN=,     RPL RECORD LENGTH                         X
               &STRNO=       UNSUPPORTED ERROR     jm1
         LCLB  &MODS         SET IF MOD FOUND
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'MODCB UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AIF   (&NPOS GT 0).POSLOOP
         MEXIT
.POSEND  ANOP
         AIF   ('&STRNO'  EQ '').NO_STRNO
         MNOTE 4,'MODCB STRNO NOT SUPPORTED YET - IGNORED'  jm1
&MODS    SETB   1
.NO_STRNO ANOP
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
.*
.*  CHECK ACB FIELDS
.*
         AIF   ('&ACB'  EQ '').CHK_RPL_FIELDS
         AIF   ('&DDNAME' NE '').DDNAME
.DDNAME_END ANOP
         AIF   ('&DSNAME' NE '').DSNAME
.DSNAME_END ANOP
         AIF   ('&MACRF'  NE '').MACRF
.MACRF_END ANOP
         AIF   ('&VCLRN' NE '').VCLRN
.VCLRN_END ANOP
.*
.* CHECK RPL FIELDS
.*
.CHK_RPL_FIELDS ANOP
         AIF   ('&RPL'  EQ '').CHK_MODS
         AIF   ('&ACB'  NE '').ACB
.ACB_END ANOP
         AIF   ('&AREA' NE '').AREA
.AREA_END ANOP
         AIF   ('&ARG'    NE '').ARG
.ARG_END ANOP
         AIF   ('&KEYLEN' NE '').KEYLEN
.KEYLEN_END ANOP
         AIF   ('&OPTCD'  NE '').OPTCD
.OPTCD_END ANOP
         AIF   ('&RECLEN' NE '').RECLEN
.RECLEN_END ANOP
         AIF   ('&AREALEN' NE '').AREALEN    jm3
.AREALEN_END ANOP
.*
.* CHECK IF ANY FIELDS FOUND
.*
.CHK_MODS ANOP
         AIF   (&MODS).EXIT
         MNOTE 12,'MODCB NO SUPPORTED FIELDS FOUND'
         MEXIT
.EXIT    ANOP
         SR    15,15
         MEXIT
.*
.* MODIFY ACB DDNAME
.*
.DDNAME  ANOP
&MODS    SETB   1
         ZMODCB &ACB,ACBDDNAM-IHAACB,&DDNAME,8
         AGO   .DDNAME_END
.*
.* MODIFY ACB DSNAME
.*
.DSNAME  ANOP
&MODS    SETB   1
         ZMODCB &ACB,ACBDSNAM-IHAACB,&DSNAME,4
         AGO   .MACRF_END
.*
.* MODIFY ACB MACRF
.*
.MACRF   ANOP
         GBLC  &ZGENMACF1,&ZGENMACF2,&ZGENMACF3,&ZGENMACF4
         ZGENMACF MACRF=&MACRF
&MODS    SETB   1
         ZMODCB &ACB,ACBMACR1-IHAACB,B'&ZGENMACF1',1
         ZMODCB &ACB,ACBMACR2-IHAACB,B'&ZGENMACF2',1
         ZMODCB &ACB,ACBMACR3-IHAACB,B'&ZGENMACF3',1
         ZMODCB &ACB,ACBMACR4-IHAACB,B'&ZGENMACF4',1
         AGO   .MACRF_END
.*
.* MODIFY ACB VCLRN VCDT VSAM CATALOG ENTRY DEFAULT NAME
.*
.VCLRN  ANOP
&MODS    SETB   1
         ZMODCB &ACB,ACBVCLRN-IHAACB,&VCLRN,8
         AGO   .VCLRN_END
.*
.* MODIFY RPL ACB ADDRESS FIELD    RPI 696
.*
.ACB     ANOP
&MODS    SETB   1
         ZMODCB &RPL,RPLACB-IHARPL,&ACB,4
         AGO   .ACB_END
.*
.* MODIFY RPL AREA
.*
.AREA    ANOP
&MODS    SETB   1
         ZMODCB &RPL,RPLAREA-IHARPL,&AREA,4
         AGO   .AREA_END
.*
.* MODIFY RPL ARG
.*
.ARG     ANOP
&MODS    SETB   1
         ZMODCB &RPL,RPLARG-IHARPL,&ARG,4
         AGO    .ARG_END
.*
.* MODIFY RPL KEYLEN
.*
.KEYLEN  ANOP
&MODS    SETB   1
         ZMODCB &RPL,RPLLKEY-IHARPL,&KEYLEN,4
         AGO    .KEYLEN_END
.*
.* MODIFY RPL OPTCD
.*
.OPTCD   ANOP
         GBLC   &ZGENOPT1,&ZGENOPT2
         GBLC   &XGENOPT1,&XGENOPT2                               jm2
         ZGENOPTD OPTCD=&OPTCD
&MODS    SETB   1
         ZMODCB &RPL,RPLOPT1-IHARPL,B'&ZGENOPT1',1,B'&XGENOPT1'   jm2
         ZMODCB &RPL,RPLOPT2-IHARPL,B'&ZGENOPT2',1,B'&XGENOPT2'   jm2
         AGO   .OPTCD_END
.*
.* MODIFY RPL LREC
.*
.RECLEN  ANOP
&MODS    SETB   1
         ZMODCB &RPL,RPLLREC-IHARPL,&RECLEN,4
         AGO   .RECLEN_END
.*
.* MODIFY RPL AREALEN
.*
.AREALEN ANOP
&MODS    SETB   1
         ZMODCB &RPL,RPLLAREA-IHARPL,&AREALEN,4                    jm3
         AGO   .AREALEN_END
.*
         MEND
./ ADD NAME=OPEN     0100-14178-14178-0013-00016-00016-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
.*********************************************************************
&N       OPEN  &DCBLIST,   ((DCB,OPT),(DCB,OPT),,) OR DCB OR (REG)     X
               &MF=I,      NOT SUPPORTED                               X
               &MODE=31,   IGNORED AS IT WORKS IN BOTH                 X
               &TYPE=      FLAG TYPE J AS UNSUPPORTED
&N       ZOPEN &DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
         MEND
./ ADD NAME=OTHRWISE 0100-14178-14178-0013-00030-00030-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/23/08.
.*             REMARKS.  ADD SPMS FOR SELECT,WHEN,OTHRWISE,ENDSEL
.********************************************************************
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.********************************************************************
         OTHRWISE  &VALUE
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'OTHRWISE - MISSING SELECT'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'SELECT')
               MNOTE 8,'OTHRWISE - MISSING SELECT'
               MEXIT
         AEND
         AIF   (&ZSTR_LVL_BCNT(&ZSTR_LVL) EQ 0)
               MNOTE 8,'OTHRWISE - MISSING WHEN'
               MEXIT
         AEND
         AIF   (&ZSTR_LVL_ELSE(&ZSTR_LVL))
               MNOTE 8,'OTHRWISE - DUPLICATE OTHRWISE'
               MEXIT
         AEND
         B     #@SEL_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E
#@SEL_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
         :&ZSTR_LVL_ELSE(&ZSTR_LVL) SETB 1
         MEND
./ ADD NAME=PENTRY   0100-14178-14178-0013-00073-00073-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/11/07                                                 *
.*********************************************************************
.* 07/11/07 RPI 654 ADD PERFORM, PM, PENTRY, PEXIT WITH RENT SUPPORT
.* 10/01/07 RPI 709 REMOVE PTRACE REFS
.*********************************************************************
&N       PENTRY
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     01/06/75.
.*             REMARKS.  PERFORM ROUTINE ENTRY POINT  RPI 709
.*
.*       REV1 01/04/78 DSH - ADD STACK OPTIONS (SEE SUBENTRY)
         GBLC  &PSTKREG,&PBASREG,&PBASLAB
         GBLB  &PSTKSW,&PBASESW,&PSAVESW,&PCHKSW
         LCLC  &STKREG
         LCLA  &OFFSET
         GBLB  &STKOPT  RPI 709 REMOVE &TRACE
         GBLC  &PENAME
         AIF   (&PBASESW EQ 0).L0
         LTORG
.L0      ANOP
&PENAME  SETC  '&N'
         DC    0H'0',CL8'&N'
         AIF   (&STKOPT EQ 1).STK
         B     *+4
&N       EQU   *
         AGO   .EXIT  RPI 709
.STK     AIF   (K'&N EQ 0).STK1
&N       DS    0H
.STK1    ANOP
         AIF   (&PSTKSW EQ 1).L1
&STKREG  SETC  '15'
         L     15,80(13)                    LOAD STACK POINTER
&OFFSET  SETA  &OFFSET+4
         AGO   .L2
.L1      ANOP
&STKREG  SETC  '&PSTKREG'
.L2      AIF   (&PCHKSW EQ 1).L3
         ST    14,0(&STKREG)  STORE LINK - NO CHECKING
&OFFSET  SETA  &OFFSET+4
         AGO   .L4
.L3      ANOP
         CLI   0(&STKREG),X'00'
         BE    *+6
         DC    X'0000'
         STCM  14,7,1(&STKREG) STORE LINK - WITH CHECKING
&OFFSET  SETA  &OFFSET+14
.L4      ANOP
         AIF   (&PBASESW EQ 0).L4A
         ST    &PBASREG,4(&STKREG) SAVE BASE
         BALR  &PBASREG,0 SET NEW BASE
         USING *,&PBASREG
&OFFSET  SETA  &OFFSET+6
&PBASLAB SETC  '&N+&OFFSET'
         LA    &STKREG,8(&STKREG)  INCREMENT STACK WITH PBASE=YES
         AGO   .L4B
.L4A     ANOP
         LA    &STKREG,4(&STKREG)  INCREMENT STACK WITHOUT BASES
.L4B     ANOP
         AIF   (&PSTKSW EQ 1).L5
         ST    15,80(13) STORE STACK
.L5      AIF   (&PSAVESW EQ 0).L6
         LM    14,15,72(13)
.L6      ANOP
.* RPI 709
.EXIT    ANOP
         MEND

./ ADD NAME=PERFORM  0100-14178-14178-0013-00053-00053-00000-Z390MAC
         MACRO                                                          00002
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/11/07                                                 *
.*********************************************************************
.* 07/11/07 RPI 654 ADD PERFORM, PM, PENTRY, PEXIT WITH RENT SUPPORT
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.*********************************************************************
&N       PERFORM &PENTRY
         GBLC  &PSTKREG,&PBASREG,&PBASLAB
         GBLB  &PSTKSW,&PBASESW,&PSAVESW,&PCHKSW
         GBLB  &STKOPT
.*
.*       SAME AS PM      - SEE SUBENTRY FOR OPTIONS
.*
.*       REV1 01/04/78 DSH - ADD OPTIONS TO STACK MODE
.*
         AIF   (&STKOPT EQ 1).STK
&N       MVC   &PENTRY-2(2),*+10
         B     &PENTRY
         DC    S(*+2)
         MEXIT
.STK     AIF   (K'&N EQ 0).STK1
&N       DS    0H
.STK1    ANOP
         AIF   (&PSAVESW EQ 0).L3
         STM   14,15,72(13)
         AIF   (&PBASESW EQ 1).L1
         BAL   14,&PENTRY
         AGO   .L2
.L1      ANOP
         ZOPTLR 15,&PBASREG
.SKIP15  ANOP
         A     15,=A(&PENTRY-PBASLAB)
         BALR  14,15
.L2      ANOP
         LM    14,15,72(13)
         AGO   .L5
.L3      ANOP
         AIF   (&PBASESW EQ 1).L4
         BAL   14,&PENTRY
         AGO   .L5
.L4      ANOP
         ZOPTLR 15,&PBASREG
.SKIP15B ANOP
         A     15,=A(&PENTRY-(&PBASLAB))
         BALR  14,15
.L5      ANOP
         MEND

./ ADD NAME=PEXIT    0100-14178-14178-0013-00058-00058-00000-Z390MAC
         MACRO                                                          00002
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/11/07                                                 *
.*********************************************************************
.* 07/11/07 RPI 654 ADD PERFORM, PM, PENTRY, PEXIT WITH RENT SUPPORT
.*********************************************************************
&N       PEXIT
.*
.*       EXIT FROM PERFORMED PROCEDURE DEFINED BY PENTRY
.*       SEE SUBENTRY FOR OPTIONS
.*
.*       REV1 01/04/78 DSH - ADD STACK OPTIONS
.*       REV2 01/17/80 DSH - CHANGE DEFAULT TEMP STACK REG. TO R14
.*                           TO ALLOW RC IN R15 TO BE RETURNED FROM
.*                           PERFORMED ROUTINE.
.*
.*
.*
         GBLC  &PSTKREG,&PBASREG,&PBASLAB
         GBLB  &PSTKSW,&PBASESW,&PSAVESW,&PCHKSW
         LCLC  &STKREG
         GBLB  &STKOPT
         GBLC  &PENAME
         AIF   (&STKOPT EQ 1).STK
&N       B     &PENAME-4
         MEXIT
.STK     AIF   (K'&N EQ 0).STK1
&N       DS    0H
.STK1    ANOP
         AIF   (&PSAVESW EQ 0).L1
         STM   14,15,72(13)
.L1      AIF   (&PSTKSW  EQ 1).L2
&STKREG  SETC  '14'
         L     14,80(13) LOAD STACK POINTER
         AGO   .L3
.L2      ANOP
&STKREG  SETC  '&PSTKREG'
.L3      ANOP
         SL    &STKREG,84(13) DECREMENT STACK
         AIF   (&PSTKSW EQ 1).L4
         ST    14,80(13) SAVE STACK
.L4      AIF   (&PBASESW EQ 0).L4A
         L     &PBASREG,4(&STKREG) RELOAD BASE
.L4A     AIF   (&PCHKSW EQ 0).L5
         ICM   14,15,0(&STKREG)  LOAD LINK WITH CHECKING
         BCR   P,14
         DC    X'0000'
         AGO   .L6
.L5      ANOP
         L     14,0(&STKREG)  LOAD LINK WITHOUT CHECKING
         BR    14
.L6      ANOP
         MEND

./ ADD NAME=PM       0100-14178-14178-0013-00053-00053-00000-Z390MAC
         MACRO                                                          00002
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/11/07                                                 *
.*********************************************************************
.* 07/11/07 RPI 654 ADD PERFORM, PM, PENTRY, PEXIT WITH RENT SUPPORT
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.*********************************************************************
&N       PM    &PENTRY
         GBLC  &PSTKREG,&PBASREG,&PBASLAB
         GBLB  &PSTKSW,&PBASESW,&PSAVESW,&PCHKSW
         GBLB  &STKOPT
.*
.*       SAME AS PM      - SEE SUBENTRY FOR OPTIONS
.*
.*       REV1 01/04/78 DSH - ADD OPTIONS TO STACK MODE
.*
         AIF   (&STKOPT EQ 1).STK
&N       MVC   &PENTRY-2(2),*+10
         B     &PENTRY
         DC    S(*+2)
         MEXIT
.STK     AIF   (K'&N EQ 0).STK1
&N       DS    0H
.STK1    ANOP
         AIF   (&PSAVESW EQ 0).L3
         STM   14,15,72(13)
         AIF   (&PBASESW EQ 1).L1
         BAL   14,&PENTRY
         AGO   .L2
.L1      ANOP
         ZOPTLR 15,&PBASREG
.SKIP15  ANOP
         A     15,=A(&PENTRY-PBASLAB)
         BALR  14,15
.L2      ANOP
         LM    14,15,72(13)
         AGO   .L5
.L3      ANOP
         AIF   (&PBASESW EQ 1).L4
         BAL   14,&PENTRY
         AGO   .L5
.L4      ANOP
         ZOPTLR 15,&PBASREG
.SKIP15B ANOP
         A     15,=A(&PENTRY-(&PBASLAB))
         BALR  14,15
.L5      ANOP
         MEND

./ ADD NAME=POINT    0100-14178-14178-0013-00082-00082-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 11/26/05 RPI111- add missing AGO
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 04/12/06 RPI244 SUPPORT TYPE=REL
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 07/11/07 RPI 654 CORRECT TO SUPPORT DCBBLKSIF
.* 08/07/07 RPI 644 ADD VSAM RPL SUPPORT VIA SVC
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       POINT &DCB,         DCB                                       X
               &REL,         RELATIVE BLOCK                            X
               &MF=I,        NOT SUPPORTED                             X
               &RBA=,        EXTENSION RELATIVE BYTE ADDR              X
               &RPL=,        VSAM RPL ADDR FOR KSDS/RRDS/ESDS          X
               &TYPE=REL     REL (ABS NOT SUPPORTED)
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR2
         AIF   (N'&SYSLIST LE 2).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(3)'
         MEXIT
.NPOK    ANOP
         AIF   ('&RPL' NE '').VSAM
.*
.* SET FILE POINTER FOR READ/WRITE RANDOM ACCESS
.*   DCB  - REQUIRED WITH DCBBLKSI DEFINED
.*   REL  - RX OF FULL WORD RELATIVE RECORD NUMBER (0-N)
.*   RBA= - RX OF DOUBLE WORD RELATIVE BYTE POSITION (OVERRIDES REL)
.*
.*   NOTE RBA= IS EXTENSION OF POINT FOR UP TO 2 GB RANDOM ACCESS
.*
         AIF   ('&TYPE' NE 'REL').ERR1
         AIF   ('&DCB'(1,1) EQ '(').DCBREG
         LA    1,&DCB
         AGO   .CHKRBA
.DCBREG  ANOP
         ZOPTLR 1,&DCB(1)
.CHKRBA  ANOP
         AIF   ('&RBA' EQ '').CHKREL
         AIF   ('&RBA'(1,1) EQ '(').RBAREG
         LG    0,&RBA
         AGO   .SVC
.RBAREG  ANOP
         LG    0,0(&RBA(1))
         AGO   .SVC            RPI111
.CHKREL  ANOP
         AIF   ('&REL'(1,1) EQ '(').RELREG
         LGF   0,&REL
         AGO   .TORBA
.RELREG  ANOP
         LGF   0,0(&REL(1))
.TORBA   ANOP
         L     15,DCBBLKSIF-IHADCB(1)      RPI 654
         MSGFR 0,15
.SVC     ANOP
         SVC   156 POINT R1=DCB R0=(64 BIT RBA)
         MEXIT
.VSAM    ANOP
         AIF   ('&RPL'(1,1) EQ '(').RPLREG
         LA    1,&RPL
         AGO   .VSVC
.RPLREG  ANOP
         ZOPTLR 1,&RPL(1)
.VSVC    ANOP
         LA    0,RPLOPPNT
         SVC   121 VSAM POINT R0=4 R1=A(RPL)
         MEXIT
.ERR1    MNOTE 12,'POINT ONLY TYPE=REL SUPPORTED'
         MEXIT
.ERR2    MNOTE 12,'POINT MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=POST     0100-14178-14178-0013-00047-00047-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/26/06 RPI 279 ADD POST SVC
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
         MACRO
&N       POST  &ECB,         POST ECB COMPLETION                       X
               &CODE,        EVENT COMPLETION CODE                     X
               &LINKAGE=SVC, IGNORED                                   X
               &MF=I,        NOT SUPPORTED                             X
               &RELATED=     IGNORED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR3
         AIF   ('&ECB' EQ '').ERR1
         AIF   ('&ECB'(1,1) EQ '(').REGECB
         LA    1,&ECB
         AGO   .CHKCODE
.REGECB  ANOP
         ZOPTLR 1,&ECB(1)
.CHKCODE ANOP
         AIF   ('&CODE' EQ '').ZCODE
         AIF   ('&CODE'(1,1) EQ '(').REGCODE
         L     0,=A(&CODE)
         AGO   .SVC
.REGCODE ANOP
         AIF   ('&CODE(1)' EQ '1' OR '&CODE(1)' EQ 'R1').ERR2
         ZOPTLR 0,&CODE(1)
         AGO   .SVC
.ZCODE   ANOP
         SR    0,0       ZERO DEFAULT CODE
.SVC     ANOP
         SVC   2 POST R0=CODE, R1=A(ECB)
         MEXIT
.ERR1    MNOTE 12,'POST REQUIRES ECB'
         MEXIT
.ERR2    MNOTE 12,'POST CODE REGISTER CONFLICTS WITH ECB REGISTER'
         MEXIT
.ERR3    MNOTE 12,'POST MF= NOT SUPPORTED'
         MEND
./ ADD NAME=PSAD     0100-14178-14178-0013-00029-00029-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/23/06                                                 *
.*********************************************************************
.* 04/23/06 RPI  286 DEFINE 8K PSA WITH SUPPORTED FIELDS
.* 09/20/09 RPI 1063 ADD PGM OLD PSW AND INSTRUCTION LENGTH FIELDS
.*                   UPDATED FOR ESPIE AND ABEND FOR EASE OF ACCESS
.*********************************************************************
         PSAD
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'PSAD UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.* PSA FIELDS IN FIRST 8K OF MEMORY
.*
IHAPSA   DSECT
         ORG    IHAPSA+X'10'
PSACVT   DS     A     LOW MEMORY POINTER TO OS CVT
         ORG    IHAPSW+X'28'
FLCPOPSW DS     XL8   PGM OLD PSW (+2=00CCMMMM,+3=INT,+4=ADDR)
         ORG    IHAPSA+X'4C'
PSACVT2  DS     A     LOW MEMORY POINTER TO OS CVT
         ORG    IHAPSW+X'8D'
FLCPIILC DS     X     INSTRUCTION LENGTH AT INTERRUPT (2,4,6)
         MEND
./ ADD NAME=PUT      0100-14178-14178-0013-00064-00064-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* MAINTENANCE
.* 10/12/05 ADD USE OF DCBREC IF RECORD NOT SPECIFIED
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 10/20/05 RPI38 - check for register conflicts
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 07/22/07 RPI 644 ADD RPL VSAM SUPPORT VIA SVC 121 R0=2, R1=A(RPL)
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       PUT   &DCB,                                                   X
               &REC,                                                   X
               &RPL=,    VSAM REQUEST PARAMETER LIST                   X
               &MF=I  NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR2
         AIF   (N'&SYSLIST LE 2).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(3)'
.NPOK    ANOP
         AIF   ('&RPL' NE '').VSAM
         AIF   ('&DCB'(1,1) EQ '(').DCBREG
         LA    1,&DCB
         AGO   .CHKREC
.DCBREG  ANOP
         ZOPTLR 1,&DCB(1)
.CHKREC  ANOP
         AIF   ('&REC' EQ '').RECDEF
         AIF   ('&REC'(1,1) EQ '(').RECREG
         LA    0,&REC
         AGO   .SVC
.RECREG  ANOP
         AIF   ('&REC(1)' EQ '1' OR '&REC(1)' EQ 'R1').ERR1
         ZOPTLR 0,&REC(1)
         AGO   .SVC
.RECDEF  ANOP
         L     0,DCBREC-IHADCB(1)
.SVC     ANOP
         SVC  152 QSAM PUT R0=REC, R1=DCB
         MEXIT
.VSAM    ANOP
         AIF   ('&RPL'(1,1) EQ '(').RPLREG
         LA    1,&RPL
         AGO   .VSVC
.RPLREG  ANOP
         ZOPTLR 1,&RPL(1)
.VSVC    ANOP
         LA    0,RPLOPPUT
         SVC   121 VSAM PUT R0=2 R1=A(RPL)
         MEXIT
.ERR1    MNOTE 12,'PUT RECORD REG INVALID - &REC(1)'
         MEXIT
.ERR2    MNOTE 12,'PUT MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=READ     0100-14178-14178-0013-00036-00036-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/15/08                                                 *
.*********************************************************************
.* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
.*********************************************************************
&N       READ  &DECB,                                                  X
               &TYPE,                                                  X
               &DCB,                                                   X
               &AREA,                                                  X
               &LENGTH,                                                X
               &MF=I        NOT SUPPORTED
         AIF   ('&LENGTH' EQ '').PARM4
&N       ZREAD &DECB,&TYPE,&DCB,&AREA,&LENGTH,MF=&MF
         MEXIT
.PARM4   ANOP
&N       ZREAD &DECB,&TYPE,&DCB,&AREA,MF=&MF
         MEND














./ ADD NAME=RESTORE  0100-14178-14178-0013-00067-00067-00000-Z390MAC
'         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 12/06/05 RPI 118- use RESTORE in RETURN and XCTL to restore regs
.* 04/26/07 RPI 601- support R0-R15 format args
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 11/10/08 RPI 942 support RC=(15) and upgrade to ZSTRMAC
.* 03/16/11 RPI 1139 SET DEFAULT RC=(15) TO AVOID SUBSTR ERROR
.*********************************************************************
&N       RESTORE &REGS,&RC='(15)' RPI 942,1139 ADD RC=(15)
       AIF   ('&N' NE '')
&N       DS    0H
       AEND
       AIF     (N'&SYSLIST NE 1)
               MNOTE 12,'RESTORE REQUIRES SINGLE REG SUBLIST OPERAND'
               MEXIT
      AEND
      AIF   ('&REGS(1)'(1,1) EQ 'R')
            :&R1 SETA   D2A('&REGS(1)'(2,K'&REGS(1)-1)) RPI 1139
      AELSE
            :&R1      SETA  &REGS(1)
      AEND
      :&R2      SETA  &R1
      AIF   ('&REGS(2)' NE '')
            AIF   ('&REGS(2)'(1,1) EQ 'R')
                  :&R2 SETA  D2A('&REGS(2)'(2,K'&REGS(2)-1))
            AELSE
                  :&R2 SETA  &REGS(2)
            AEND
       AEND
       AIF     (&R1 LT 0                                               X
                OR &R1 GT 15                                           X
                OR &R2 LT 0                                            X
                OR &R2 GT 15                                           X
                OR &R1 EQ 13                                           X
                OR &R2 EQ 13)
               MNOTE 8,'RESTORE RANGE INVALID (&R1,&R2)'
               MEXIT
       AEND
       AIF     (&R1 LT 13)
               AIF  (&R1 GT &R2 OR &R2 GT 13)
                    MNOTE 8,'RESTORE RANGE OVERLAPS R13 (&R1,&R2)'
                    MEXIT
               AEND
         LM    &R1,&R2,20+4*&R1.(13)
       AELSE
               AIF  (&R2 EQ 14 AND &R1 EQ 15)
                    MNOTE 8,'RESTORE RANGE OVERLAPS R13 (&R1,&R2)'
                    MEXIT
               AEND
               AIF  (&R1 EQ 14 AND '&RC'(1,1) EQ '(')
         L     14,12(13)
                    AIF  ('&RC(1)' NE '15' AND '&RC(1)' NE 'R15')
         LR    15,&RC(1)
                    AEND
                    AIF  (&R2 LT 14)
         LM    0,&R2,20(13)
                    AEND
               AELSE
         LM    &R1,&R2,12+4*(&R1-14)(13)
               AEND
       AEND
./ ADD NAME=RETURN   0100-14178-14178-0013-00016-00016-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 11/17/08 RPI 953 - code moved to ZRETURN to share with other maclibs
.*********************************************************************
&N       RETURN &REGS,                                                 X
               &SETFLAG,                                               X
               &MF=I,      NOT SUPPORTED                               X
               &RC=
&N      ZRETURN &REGS,&SETFLAG,MF=&MF,RC=&RC
         MEND
./ ADD NAME=RPL      0100-14178-14178-0013-00099-00099-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 06/22/07                                                 *
.*********************************************************************
.* 07/28/07 RPI 644 INITIAL CODING OF RPL OPTIONS
.* 08/04/07 RPI 644 UPDATE RPLFEEDB TO 4 BYTE CODES
.* 08/19/07 RPI 680 CORRECT LOOP GE TO GT, ADD LCLB &LRD
.* 08/29/07 RPI 688 CORRECT SETTING OF MACR1_XRBA OPTION BIT, ADD XRBA
.* 09/14/07 RPI 672 ISSUE MNOTE ERROR FOR UNDEFINED OPTIONS
.* 09/16/07 RPI 682 SHARE ZGENOPTD TO GEN OPTCD BITS
.* 09/24/07 RPI 702 REPLACE RPLXRBA WITH RPLLXRTA AND RPLCXRBA
.*          ADD RPLOPENC UNIQUE ACB OPEN COUNT FOR REPOSITION REQ'D
.* 11/26/07 RPI 723 MOVE GETOK, GETNF FLAGS TO RPLFLAG, ADD KSIT,KSIR
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.*
.* RPL 28 VSAM OPTCD OPTIONS - MODELED ON MVS 3.8 IDAVSOPT
.*
.* ADR - addressed access to KSDS or ESDS by RBA, seq access by ESDS
.* ARD - User's argument determines the record to be processed (NS)
.* ASY - Asynchronous access (ignored)
.* BWD - proceed backward for KEY, SEQ, DIR for POINT, GET, PUT, ERASE
.* CNV - control intervAL access (not supported)
.* CR  - For RLS, CR (consistent read integrity) (ignored)
.* CRE - For RLS transactional POINT and GET NUP CR locks (ignored)
.* DIR - direct access to a RRDS, KSDS, or ESDS.
.* FKS - a full key is provided as a search argument
.* FWD - Processing to proceed in a forward direction.
.* GEN - A generic key is provided as a search argument using KEYLEN
.* KEQ - key must match for GET (key,dir/skp) and POINT (key)
.* KEY - rel rcd RRDS access or key KDSD access, seq rel rcd or key
.* KGE - key GE, for RRDS rel rcd > max existing returns EOD, PUT adds
.* LOC - leave record from GET in I/O buffer (ignored)
.* LRD - Last record in the data set is to be located via POINT/GET
.* MVE - move record to/from area (ignored - always in RPL AREA=)
.* NRI - For RLS, NRI (no read integrity) (ignored)
.* NSP - For DIR, remember position for seq access until ENDREQ
.* NUP - records will not be updated, PUT stores new record, no pos
.* NWAITX - Never take the UPAD or RLSWAIT exit (ignored)
.* RBA - for ADR, use 4 byte RBA in ARG field (default)
.* SEQ - Sequential access to a RRDS, KSDS, or ESDS.
.* SKP - Skip sequential access.
.* SYN - Synchronous access (always)
.* UPD - records may be updated or deleted after DIR+UPD GET
.* WAITX  - if SYN and UPAD, take UPAD exit instead of WAIT (ignored)
.* XRBA - for ADR, use 8 byte XRBA in ARG field
.*********************************************************************
&N       RPL   &ACB=0,    VSAM ACCESS CONTROL BLOCK ADDRESS            X
               &AM=VSAM,  VSAM VS VTAM                                 X
               &AREA=0,   RECORD WORK AREA (DATA FOR MVE, ADDR FOR LOC)X
               &AREALEN=0, LENGTH OF AREA (MAX LRECL IF MVS, 4 FOR LOC)X
               &ARG=0,    KEY(KSDS), XRBA/RBA(KSDS/ESDS), REC#(RRDSS)  X
               &ECB=0,    ECB TO BE POSTED ON COMPLETION               X
               &KEYLEN=0, KEY LENGTH FOR GENERIC KEY SEARCH            X
               &NXTRPL=0, NEXT RPL IN CHAINED RPL LIST                 X
               &OPTCD=,   OPTIONS (SEE SUPPORTED OPTIONS ABOVE)        X
               &RECLEN=0  RECORD LENGTH FOR VARIABLE LENGTH PUT
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0D
.SKIPDS  ANOP
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'RPL UNSUPPORTED OPERANDS - &SYSLIST(1)'
         MEXIT
.NPOK    ANOP
         AIF   ('&AM' NE 'VSAM').ERR1
         GBLC  &ZGENOPT1,&ZGENOPT2
         ZGENOPTD OPTCD=&OPTCD
.*
.* GENERATE VSAM RPL
.*
         DC    AL1(0)             RPLTYPE   RPL ID
         DC    AL1(10)            RPLSTYPE  RPL TYPE VSAM
         DC    AL1(RPLEND-IHARPL) RPLLEN    RPL LENGTH
         DC    X'00'              (ALIGN)
         DC    A(&ECB)            RPLECB    ECB (POSTED IF PRESENT)
         DC    XL4'00'            RPLFEEDBK RPL FEEDBACK CODES
         DC    A(&KEYLEN)         RPLKEYLEN KEY LENGTH
         DC    A(&ACB)            RPLACB    ACB
         DC    A(&AREA)           RPLAREA   AREA
         DC    A(&ARG)            RPLARG    ARG (KS KEY, RR NUM)
         DC    B'&ZGENOPT1&ZGENOPT2' RPLOPT OPTION BYTES 1+2
         DC    X'0000'            (ALIGN)
         DC    A(&NXTRPL)         RPLNEXT   NEXT RPL
         DC    A(&RECLEN)         RPLRECL   RECORD LENGTH FOR PUT
         DC    XL8'00'            RPLLXRBA  LAST RCD VES/VX0 XRBA
         DC    XL8'00'            RPLCXRBA  CURR POS VES/VX0 XRBA
         DC    A(0)               RPLOPENC  UNIQUE ACB OPEN COUNT
         DC    A(&AREALEN)        RPLAREAL  AREA LENGTH
         DC    F'0'               RPLFLAG   UPD GETOK,GETNF FLAGS ETC
         DC    XL8'00'            RPLKSIT   CURRENT KSIT XRBA
         DC    XL8'00'            RPLKSIR   CURRENT KSIR XRBA
         RPLD
         MEXIT
.ERR1    MNOTE 12,'ONLY AM=VSAM IS SUPPORTED'
         MEND
./ ADD NAME=RPLD     0100-14178-14178-0013-00091-00091-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 06/23/07                                                 *
.*********************************************************************
.* 06/23/07 INITIAL CODING
.* 08/29/07 RPI 688 ADD RPLXRBA XRBA/RBA FIELD AND SPLIT OPT1/OPT2 EQU
.* 09/16/07 RPI 682 CORRECT RPLID
.* 09/16/07 RPI 702 REPLACE RPLXRBA WITH RPLCXRBA AND RPLLXRBA
.*                  ALSO ADD RPLOPENC UNIQUE ACB OPEN COUNT
.* 11/26/07 RPI 723 MOVE GETOK, GETNF FLAGS TO RPLFLAG, ADD KSIT,KSIR
.* 12/08/07 RPI 750 SPLIT RPLFLAG INTO 4 BYTE FIELDS WITH EQUATES
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         RPLD
.*
.* IF RPLD ALREADY DEFINED EXIT NOW
.*
         GBLB  &Z390_RPL
         GBLC  &Z390_RPL_NAME,&Z390_RPL_TYPE
         AIF   (&Z390_RPL).EXIT
&Z390_RPL      SETB 1
&Z390_RPL_NAME SETC '&SYSLOC'
&Z390_RPL_TYPE SETC '&SYSSTYP'
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
.*
.*       ACCESS CONTROL BLOCK DSECT FOR VSAM
.*
IHARPL   DSECT
RPLID    DS   X   RPL ID
RPLSTYPE DS   X   RPL TYPE VSAM
RPLLEN   DS   X   RPL LENGTH
         DS   X   (ALIGN)
RPLECB   DS   F   ECB ADDRESS (POSTED IF PRESENT)
RPLFEEDB DS   XL4 RPL FEEDBACK CODES (PDF,RC,COMP,REASON CODE)
RPLLKEY  DS   A   KEY LENGTH
RPLACB   DS   A   ACB
RPLAREA  DS   A   AREA
RPLARG   DS   A   ARG (KSDS KEY, RRDS REC NUMBER, OR RBA/XRBA)
RPLOPTCD DS   0H  OPTION BYTES 1 AND 2
RPLOPT1  DS   X   OPTION BYTE 1
RPLOPT1_LOC   EQU X'80' - leave record from GET in I/O buffer (IG)
RPLOPT1_DIR   EQU X'40' - direct access to RRDS, KSDS, or ESDS
RPLOPT1_SEQ   EQU X'20' - Sequential access to RRDS, KSDS, or ESDS
RPLOPT1_SKP   EQU X'10' - Skip sequential access.
RPLOPT1_ASY   EQU X'08' - Asynchronous access (ignored)
RPLOPT1_KGE   EQU X'04' - key GE, for RRDS rel rcd > max returns EOD
RPLOPT1_GEN   EQU X'02' - A generic key provided with RPLKEYL length
RPLOPT1_XRBA  EQU X'01' - for ADR, use 8 vs 4 byte RBA in ARG field
RPLOPT2  DS   X   OPTION BYTE 2
RPLOPT2_KEY   EQU X'80' - rel rcd RRDS access or key KSDS access
RPLOPT2_ADR   EQU X'40' - addressed access to KSDS or ESDS by RBA
RPLOPT2_CNV   EQU X'20' - control intervAL access (not supported)
RPLOPT2_BWD   EQU X'10' - proceed backward for KEY, SEQ, DIR
RPLOPT2_LRD   EQU X'08' - locate last record in the data set
RPLOPT2_WAITX EQU X'04' - if SYN and UPAD, take UPAD exit vs WAIT
RPLOPT2_UPD   EQU X'02' - rcds may be updated or deleted after GET
RPLOPT2_NSP   EQU X'01' - For DIR, remember position for seq access
         DS   H   (ALIGN)
RPLNEXT  DS   A   NEXT RPL
RPLLREC  DS   A   RECORD LENGTH FOR GET/PUT VAR LENGTH RECORDS
RPLLXRBA DS   XL8 XRBA OF LAST REC VES (ESDS,RRDS) OR VX0 (KSDS,VRRDS)
RPLCXRBA DS   XL8 XRBA OF CURR POS VES (ESDS,RRDS) OR VX0 (KSDS,VRRDS)
RPLOPENC DS   F   UNIQUE ACB OPEN COUNT TO DETECT RPL REPOSITION REQ'D
RPLLAREA DS   F   AREA LENGTH
RPLFLAG  DS   0F  RPL FLAG BITS FOR UPD GET ETC.
RPLFLAG1 DS   X
RPLF1GOK EQU  X'80' PREV GET SUCCESSFUL
RPLF1GNF EQU  X'40' PREV GET RECORD NOT FOUND
RPLFLAG2 DS   X
RPLFLAG3 DS   X
RPLFLAG4 DS   X
RPLKSIT  DS   XL8 XRBA OF KSIT KSDS INSERT TOP OF TREE CONTROL BLOCK
RPLKSIR  DS   XL8 XBRA OF KSIR KSDS INSERT CUR RECORD  CONTROL BLOCK
RPLEND   EQU *
*
* VSAM RPL SVC 97 AND OPEN/CLOSE ACB OPCODES IN R0
*
RPLOPGET  EQU  1 GET
RPLOPPUT  EQU  2 PUT
RPLOPERA  EQU  3 ERASE
RPLOPPNT  EQU  4 POINT
          AIF  ('&Z390_RPL_NAME' EQ '' OR '&Z390_RPL_TYPE' EQ '').EXIT
&Z390_RPL_NAME &Z390_RPL_TYPE
.EXIT    ANOP
         MEND
./ ADD NAME=RT1      0100-14178-14178-0013-00176-00176-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* MAINTENANCE
.* 10/04/05 ADD SUPPORT FOR ASCII MODE ED MASK WITH X'A0' VS X'20'
.* 11/02/05 REMOVE ASCII MODE ED MASK WITH X'A0' NO LONGER REQUIRED
.* 11/20/05 CHANGE LA 1,X'101', SVC 13 TO ABEND 101
.* 09/22/06 ADD CCLE AND CCGE OPTIONS FOR USE IN TESTTIM2 TESTS
.* 03/05/08 ADD RT1 OK - INC COUNT BY 1
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&NAME    RT1   &CMD,&CLC1,&CLC2,&LL
.*
.* REGRESSION TEST V1 COMMAND MACROS
.*
.* 1.  RT1 MAIN  - START PGM AND DISPLAY STARTUP WTO
.* 2,  RT1 START - START OF RT1 TEST MACROS FOLLOWING DATA
.* 3.  RT1 CCE   - TEST FOR PSW CC EQUAL (OPTIONAL CLC PARMS)
.* 4.  RT1 CCL   - TEST FOR PSW CC LOW   (OPTIONAL CLC PARMS)
.* 5.  RT1 CCH   - TEST FOR PSW CC HIGH  (OPTIONAL CLC PARMS)
.* 6.  RT1 CCGE  - TEST FOR PSW CC HIGH  (OPTIONAL CLC PARMS) RPI 461
.* 7.  RT1 CCLE  - TEST FOR PSW CC HIGH  (OPTIONAL CLC PARMS) RPI 461
.* 8.  RT1 CC?   - TEST FOR PSW CC = CC0-CC3
.* 9.  RT1 OK    - INC TEST COUNT BY 1
.* 9.  RT1 ABORT - ABORT WITH TOTAL TESTS TO FAILURE AND USER 101 DUMP
.*10.  RT1 END   - DISPLAY TOTAL TESTS AND ENDED OK WTO
.*
         GBLA  &RT1_TOT
         GBLC  &RT1NAME
         AIF   ('&CMD' EQ 'MAIN').RT1MAIN
         AIF   ('&CMD' EQ 'START').RT1START
         AIF   ('&CMD' EQ 'END').RT1END
&NAME    DS    0H
&RT1_TOT SETA  &RT1_TOT+1
         AIF   ('&CMD' EQ 'OK').RT1OK
         AIF   ('&CMD' EQ 'ABORT').RT1ABORT
         AIF   ('&CLC1' EQ '').NOCLC
         AIF   ('&LL'   EQ '').NOCLCLL
         LA    1,&CLC1
         LA    2,&CLC2
         CLC   0(&LL,1),0(2)
         AGO   .NOCLC
.NOCLCLL ANOP
         CLC   &CLC1,&CLC2
.NOCLC   ANOP
         AIF   ('&CMD' EQ 'CCE').RT1CCE
         AIF   ('&CMD' EQ 'CCL').RT1CCL
         AIF   ('&CMD' EQ 'CCH').RT1CCH
         AIF   ('&CMD' EQ 'CCLE').RT1CCLE
         AIF   ('&CMD' EQ 'CCGE').RT1CCGE
         AIF   ('&CMD' EQ 'CC0').RT1CC0
         AIF   ('&CMD' EQ 'CC1').RT1CC1
         AIF   ('&CMD' EQ 'CC2').RT1CC2
         AIF   ('&CMD' EQ 'CC3').RT1CC3
         MNOTE 8,'RT1 INVALID COMMAND - &CMD'
         MEXIT
.RT1MAIN ANOP
&RT1NAME SETC  '&NAME'
&RT1NAME SUBENTRY
         WTO   '&RT1NAME RT1 STARTED'
         BRCL    15,RT1_START
RT1_ABORT DS 0H
         MVI   RT1_ABORTED,C'T'
         WTO   '&RT1NAME RT1 TESTING ABORTED'
RT1_END  DS    0H
         MVC   RT1_DTOT,=X'402020202020'
         ED    RT1_DTOT,RT1_TOT
         WTO   MF=(E,RT1_WTO1)
         CLI   RT1_ABORTED,C'T'
         BE    RT1_DUMP
         WTO   '&RT1NAME RT1 ENDED OK'
         SUBEXIT
RT1_DUMP DS    0H
         ABEND 101
RT1_LINK EQU   11
RT1_DATA EQU   *
RT1_TOT  DC    PL3'0' TOTAL RT1 TESTS COMPLETED
RT1_ONE  DC    P'1'
RT1_WTO1 DC    AL2(RT1_WTO_END-*,0),C'&RT1NAME RT1 TESTS COMPLETED = '
RT1_DTOT DC    CL6' ZZZZZ'
RT1_WTO_END EQU *
RT1_ABORTED DC C'F'
         LTORG
RT1_TEST_CC0  DS    0H
         BNE   RT1_ABORT
RT1_OK   DS    0H
         AP    RT1_TOT,RT1_ONE
         BR    RT1_LINK
RT1_TEST_CC1  DS    0H
         BNL   RT1_ABORT
         AP    RT1_TOT,RT1_ONE
         BR    RT1_LINK
RT1_TEST_CC2  DS    0H
         BNH   RT1_ABORT
         AP    RT1_TOT,RT1_ONE
         BR    RT1_LINK
RT1_TEST_CC3  DS    0H
         BNO   RT1_ABORT
         AP    RT1_TOT,RT1_ONE
         BR    RT1_LINK
RT1_TEST_CCGE  DS    0H
         BL    RT1_ABORT
         AP    RT1_TOT,RT1_ONE
         BR    RT1_LINK
RT1_TEST_CCLE  DS    0H
         BH    RT1_ABORT
         AP    RT1_TOT,RT1_ONE
         BR    RT1_LINK
         MEXIT
.RT1START ANOP
RT1_START DS  0H
         MEXIT
.RT1CCE  ANOP
.RT1CC0  ANOP
RT1_TEST&RT1_TOT BAS   RT1_LINK,RT1_TEST_CC0
         USING *,RT1_LINK
         B     RT1_CCE&RT1_TOT
         LTORG
RT1_CCE&RT1_TOT DS 0H
         MEXIT
.RT1CCL  ANOP
.RT1CC1  ANOP
RT1_TEST&RT1_TOT BAS   RT1_LINK,RT1_TEST_CC1
         USING *,RT1_LINK
         B     RT1_CCL&RT1_TOT
         LTORG
RT1_CCL&RT1_TOT DS 0H
         MEXIT
.RT1CCH  ANOP
.RT1CC2  ANOP
RT1_TEST&RT1_TOT BAS   RT1_LINK,RT1_TEST_CC2
         USING *,RT1_LINK
         B     RT1_CCH&RT1_TOT
         LTORG
RT1_CCH&RT1_TOT DS 0H
         MEXIT
.RT1CC3  ANOP
RT1_TEST&RT1_TOT BAS   RT1_LINK,RT1_TEST_CC3
         USING *,RT1_LINK
         B     RT1_CC3&RT1_TOT
         LTORG
RT1_CC3&RT1_TOT DS 0H
         MEXIT
.RT1CCLE ANOP
RT1_TEST&RT1_TOT BAS   RT1_LINK,RT1_TEST_CCLE
         USING *,RT1_LINK
         B     RT1_CCLE&RT1_TOT
         LTORG
RT1_CCLE&RT1_TOT DS 0H
         MEXIT
.RT1CCGE ANOP
RT1_TEST&RT1_TOT BAS   RT1_LINK,RT1_TEST_CCGE
         USING *,RT1_LINK
         B     RT1_CCGE&RT1_TOT
         LTORG
RT1_CCGE&RT1_TOT DS 0H
         MEXIT
.RT1OK   ANOP
         BAS   RT1_LINK,RT1_OK
         USING *,RT1_LINK
         B     RT1_OK&RT1_TOT
         LTORG
RT1_OK&RT1_TOT DS 0H
         MEXIT
.RT1ABORT ANOP
         B      RT1_ABORT
         MEXIT
.RT1END  ANOP
         B      RT1_END
         MEXIT
         MEND
./ ADD NAME=SAVE     0100-14178-14178-0013-00058-00058-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI  27 - issue error for any undefined operands
.* 04/27/07 RPI 601 - support R0-R15 register references
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 01/15/09 RPI 984 correct to use R13 when ending reg > first reg
.* 03/24/11 RPI 1139 correct strings in SETA
.*********************************************************************
&N       SAVE  &REGS,   (REGS TO SAVE)                                 X
               &T,      IGNORED                                        X
               &ID,     IGNORED                                        X
               &MF=I    NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   (N'&SYSLIST LE 3).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(4)'
.NPOK    ANOP
         AIF   ('&REGS(1)'(1,1) EQ 'R').SETR1
&R1      SETA  &REGS(1)
         AGO   .CHKR2
.SETR1   ANOP
&R1      SETA  D2A('&REGS(1)'(2,K'&REGS(1)-1)) RPI 1139
.CHKR2   ANOP
&R2      SETA  &R1
         AIF   ('&REGS(2)' EQ '').CHKREGS
         AIF   ('&REGS(2)'(1,1) EQ 'R').SETR2
&R2      SETA  &REGS(2)
         AGO   .CHKREGS
.SETR2   ANOP
&R2      SETA  D2A('&REGS(2)'(2,K'&REGS(2)-1)) RPI 1139
.CHKREGS ANOP
         AIF   (&R1 LT 0 OR &R1 GT 15).ERR
         AIF   (&R2 LT 0 OR &R2 GT 15).ERR
         AIF   (&R1 EQ 13).ERR
         AIF   (&R2 EQ 13).ERR
         AIF   (&R1 GE 14).R1_GE_14
         AIF   (&R1 GT &R2).ERR OVERLAPS 13
         STM   &R1,&R2,20+4*&R1.(13)   RPI 984
         AGO   .EXIT
.R1_GE_14 ANOP
         AIF   (&R2 EQ 14 AND &R1 EQ 15).ERR OVERLAPS 13
         STM   &R1,&R2,12+4*(&R1-14)(13)
         AGO   .EXIT
.ERR     ANOP
         MNOTE 8,'MZ390E 1002 SAVE RANGE INVALID (&R1,&R2)'
.EXIT    ANOP
         MEXIT
.ERR1    MNOTE 12,'SAVE MF= NOT SUPPORTED'
         MEND
./ ADD NAME=SELECT   0100-14178-14178-0013-00024-00024-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/23/08.
.*             REMARKS.  ADD SPM MACROS FOR SELECT,WHEN,ENDSEL
.********************************************************************
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.********************************************************************
         SELECT &OP,&FIELD,&COMP
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ &ZSTR_MAX_LVL)
               MNOTE 8,'SELECT - LEVEL OVERFLOW'
               MEXIT
         AEND
         :&ZSTR_LVL SETA &ZSTR_LVL+1
         :&ZSTR_SEL_CNT SETA &ZSTR_SEL_CNT+1
         :&ZSTR_LVL_TCNT(&ZSTR_LVL) SETA &ZSTR_SEL_CNT
         :&ZSTR_LVL_TYPE(&ZSTR_LVL) SETC 'SELECT'
         :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA 0 RESET BLK CTR
         :&ZSTR_LVL_ELSE(&ZSTR_LVL) SETB 0 RESET OTHRWISE BLK
         :&ZSTR_SEL_OP(&ZSTR_LVL)  SETC '&OP'
         :&ZSTR_SEL_FLD(&ZSTR_LVL) SETC '&FIELD'
         :&ZSTR_SEL_CMP(&ZSTR_LVL) SETC '&COMP'
         MEND
./ ADD NAME=SETRP    0100-14178-14178-0013-00021-00021-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 06/23/06 RPI 845 add new SETRP macro to set restart options
.*********************************************************************
.* SET RESTART PARAMETERS FOR ESTAE EXIT
.*  1.  USER MUST SET R15=4 AND R0=RESTART PSW ADDR FOR RESTART
.*  2.  SETRP DEFAULT IS RETREGS=64 TO RESTORE ALL 64 BIT GPRS
.*********************************************************************
         MACRO
         SETRP &RETREGS=64    RESTORE ALL 16 64 BIT REGS
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'SETRP NON-SUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
         AIF   ('&RETREGS' NE '64').ERR1
         MEXIT
.ERR1    MNOTE 4,'SETRP DEFAULT IS ALWAYS RETREGS=64 FOR NOW'
         MEND
./ ADD NAME=SHOWCB   0100-14178-14178-0013-00087-00087-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 08/10/07 INITIAL CODING TO SUPPORT FDBK, AREA, RECLEN INITIALLY
.* 09/14/07 RPI 672 VERIFY RPL VS ACB
.* 09/19/07 RPI 697 SET RC=0
.* 09/24/07 RPI 702 CHANGE RPLXRBA TO RPLLXRBA
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       SHOWCB &RPL=,        RPL REQUEST PARAMATER LIST ADDRESS       X
               &ACB=,         ACB ACCESS CONTROL BLOCK                 X
               &AREA=,        USER AREA TO RECEIVE ACB/RPL FIELD       X
               &LENGTH=,      USER AREA LENGTH                         X
               &FIELDS=       NAME OF FIELD TO RETRIEVE
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'SHOWCB UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AIF   (&NPOS GT 0).POSLOOP
         MEXIT
.POSEND  ANOP
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&RPL' NE '').SHOW_RPL
         MNOTE 12,'SHOWCB ONLY SUPPORTS RPL CURRENTLY'
         MEXIT
.SHOW_RPL ANOP
         AIF   ('&AREA' EQ '').ERR1
         AIF   ('&LENGTH' EQ '').ERR2
&OFFSET  SETA  0
.LOOP    ANOP
         AIF   ('&OFFSET' GT '&LENGTH').ERR3
&I       SETA  &I+1
         AIF   (&I GT N'&FIELDS).EXIT
         AIF   ('&FIELDS(&I)' EQ 'AREA').AREA
         AIF   ('&FIELDS(&I)' EQ 'FDBK').FDBK
         AIF   ('&FIELDS(&I)' EQ 'RBA').RBA
         AIF   ('&FIELDS(&I)' EQ 'RECLEN').RECLEN
         AIF   ('&FIELDS(&I)' EQ 'XRBA').XRBA
         MNOTE 12,'SHOWCB FIELD NOT SUPPORTED - &FIELDS(&I)'
         MEXIT
.EXIT    ANOP
         SR    15,15 RC=0
         MEXIT
.AREA    ANOP  RETURN ADDRESS OF RECORD AREA
         ZSHOWCB &RPL,RPLAREA-IHARPL,&AREA,&OFFSET,4
&OFFSET  SETA  &OFFSET+4
         AIF   ('&RPL' NE '').LOOP
         MNOTE 12,'SHOWCB RPL RQUIRED FOR AREA'
         AGO   .LOOP
.FDBK    ANOP  RETURN REASON CODE FROM RPLFEEDB
         ZSHOWCB &RPL,RPLFEEDB-IHARPL+3,&AREA,&OFFSET,1
&OFFSET  SETA  &OFFSET+1
         AIF   ('&RPL' NE '').LOOP
         MNOTE 12,'SHOWCB RPL RQUIRED FOR FDBK'
         AGO   .LOOP
.RBA     ANOP
         ZSHOWCB &RPL,RPLLXRBA-IHARPL+4,&AREA,&OFFSET,4  RPI 702
&OFFSET  SETA  &OFFSET+4
         AIF   ('&RPL' NE '').LOOP
         MNOTE 12,'SHOWCB RPL RQUIRED FOR RBA'
         AGO   .LOOP
.RECLEN  ANOP
         ZSHOWCB &RPL,RPLLREC-IHARPL,&AREA,&OFFSET,4
&OFFSET  SETA  &OFFSET+4
         AIF   ('&RPL' NE '').LOOP
         MNOTE 12,'SHOWCB RPL RQUIRED FOR RECLEN'
         AGO   .LOOP
.XRBA    ANOP
         ZSHOWCB &RPL,RPLLXRBA-IHARPL,&AREA,&OFFSET,8    RPI 702
&OFFSET  SETA  &OFFSET+8
         AIF   ('&RPL' NE '').LOOP
         MNOTE 12,'SHOWCB RPL RQUIRED FOR XRBA'
         AGO   .LOOP
.ERR1    MNOTE 12,'SHOWCB REQUIRES AREA='
         MEXIT
.ERR2    MNOTE 12,'SHOWCB REQUIRES LENGTH='
         MEXIT
.ERR3    MNOTE 12,'SHOWCB FIELDS EXCEED AREA LENGTH'
         MEND
./ ADD NAME=SNAP     0100-14178-14178-0013-00204-00204-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 11/22/05 RPI 110 CORRECT FLAG SETTING FOR STORAGE, ADD REG CHK
.* 01/06/06 RPI 154 CORRECT FLAG SETTING FOR STORAGE, ADD REG CHK
.* 01/08/06 RPI 154 CORRECT FLAG SETTING FOR STORAGE, ADD REG CHK
.* 01/09/06 RPI 163 SKIP LR FOR SAME REGISTER
.* 04/11/06 RPI 244 UPDATE KW PARMS, SUPPORT PDATA=PSW
.* 04/25/06 RPI 297 USE L VS LA FOR STOARGE PARMS
.* 04/14/07 RPI 583 CHANGE PDATA=ALL TO ALSO DUMP ALL STORAGE
.* 05/15/07 RPI 623 SUPPORT ID=(REG)
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 06/23/07 RPI 642 SUPPORT TEXT=(REG)
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 04/18/09 RPI 1017 add MF=L/E support
.* 04/30/11 RPI 1143 default PDATA=ALL and use PDATA= for only storage
.*********************************************************************
.* SNAP WILL GENERATE DUMP ON LOG FILE BASED ON THESE PARMS:
.*  1. PDATA= (DEFAULT IS ALL)
.*     A. REGS   - ALL REGISTERS
.*     B.   GPR  - GENERAL PURPOSE REGISTERS
.*     C.   FPR  - FLOATING POINT REGISTERS
.*     D. CB     - ALL CONTROL BLOCKS
.*     E.   CDE  - PROGRAMS (LINK AND LOAD)
.*     F.   DCB  - DDNAME, DCB, AND DSNAME'S
.*  2. STORAGE=(ADDR1,ADDR2)
.*  3. ID=0 - IDENTIFICATION NUMBER
.*  4. TEXT=  IDENTIFICATION TEXT (EXTENDED OPTION)
.*********************************************************************
.* INPUT:
.*   R0  BIT 0 - STORAGE REQUEST (R14=START, R15=END)
.*   R0  BIT 1 = GPR REGS
.*   R0  BIT 2 = FPR REGS
.*   R0  BIT 3 = CDE LOADED 390 PROGRAMS AND FILES
.*   R0  BIT 4 = DCBS WITH DDNAME AND DSNAME
.*   R0  BIT 5 = DUMP ALL MEMORY  RPI 583
.*********************************************************************
&N       SNAP  &DCB=,        IGNORED                                   X
               &ID=0,        SHOW ID ON DUMP                           X
               &LIST=,       NOT SUPPORTED                             X
               &MF=I,        NOT SUPPORTED                             X
               &PDATA=ALL,   ALL, REGS, GPR, FPR, CDE, DCB, PSW (ALL)  X
               &SDATA=,      IGNORED                                   X
               &STORAGE=,    STORAGE ADDRESS RANGE                     X
               &STRHDR=,     NOT SUPPORTED                             X
               &SUBPLST=,    NOT SUPPORTED                             X
               &TCB=,        IGNORED                                   X
               &TEXT=        EXTENSION TEXT TO DISPLAY
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
         MEXIT
.NPOK    ANOP
         AIF   ('&LIST' NE '').ERR2
         AIF   ('&STRHDR' NE '').ERR3
         AIF   ('&SUBPLST' NE '').ERR4
&FLAGS   SETA  X'0000' DEFAULT ALL     RPI 1143
         AIF   ('&PDATA' EQ '').NPOK2
&FLAGS   SETA  0
&NP      SETA  N'&PDATA+1
.NPLOOP  ANOP
&NP      SETA  &NP-1
         AIF   (&NP EQ 0).NPOK2
         AIF   ('&PDATA(&NP)' EQ 'ALL').ALL
         AIF   ('&PDATA(&NP)' EQ 'REGS').REGS
         AIF   ('&PDATA(&NP)' EQ 'GPR').GPR
         AIF   ('&PDATA(&NP)' EQ 'FPR').FPR
         AIF   ('&PDATA(&NP)' EQ 'CDE').CDE
         AIF   ('&PDATA(&NP)' EQ 'DCB').DCB
         AIF   ('&PDATA(&NP)' EQ 'PSW').PSW
         MNOTE 8,'SNAP UNSUPPORTED PARM - &PDATA(&NP)'
         AGO   .NPLOOP
.ALL     ANOP                       8     4   2   1   8   4
&FLAGS   SETA  &FLAGS+X'7C00' NO STORAGE,GPR,FPR,CDE,DCB,ALL  RPI 583
         AGO   .NPOK2
.REGS    ANOP
&FLAGS   SETA  &FLAGS+X'6000'
         AGO   .NPLOOP
.GPR     ANOP
&FLAGS   SETA  &FLAGS+X'4000'
         AGO   .NPLOOP
.FPR     ANOP
&FLAGS   SETA  &FLAGS+X'2000'
         AGO   .NPLOOP
.CDE     ANOP
&FLAGS   SETA  &FLAGS+X'1000'
         AGO   .NPLOOP
.DCB     ANOP
&FLAGS   SETA  &FLAGS+X'0800'
         AGO   .NPLOOP
.PSW     ANOP   PSW INCLUDED BY DEFAULT
         AGO   .NPLOOP
.NPOK2   ANOP
         AIF   ('&MF' EQ 'L').LISTFORM
         AIF   ('&MF(1)' EQ 'E').EXECFORM
         AIF   ('&MF' NE 'I').ERR2
.*
.* STD FORM SNAP A MEMORY DUMP OF SPECIFIED AREA
.*
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&STORAGE' EQ '').SETUP
         AIF   (N'&STORAGE NE 2).ERR1
&FLAGS   SETA  &FLAGS+X'8000'           RPI110
         AIF   ('&STORAGE(1)'(1,1) EQ '(').ADDR1_REG
         L     14,=A(&STORAGE(1))
         AGO   .ADDR2_CHK
.ADDR1_REG ANOP
         ZOPTLR 14,&STORAGE(1,1)
.ADDR2_CHK ANOP
         AIF   ('&STORAGE(2)'(1,1) EQ '(').ADDR2_REG
         L     15,=A(&STORAGE(2))
         AGO   .SETUP
.ADDR2_REG ANOP
         AIF   ('&STORAGE(2,1)' EQ '14' OR '&STORAGE(2,1)' EQ 'R14').ERX
               R1
         ZOPTLR 15,&STORAGE(2,1)
.SETUP   ANOP
         AIF   ('&ID'(1,1) EQ '(').IDREG     RPI 623
         IILL  0,&ID                  RPI158
         AGO   .SETFLAGS
.IDREG   ANOP
         ZOPTLR 0,&ID(1)                      RPI 623
.SETFLAGS ANOP
         IILH 0,&FLAGS               RPI158
         AIF   ('&TEXT' EQ '').NOTEXT
         AIF   ('&TEXT'(1,1) EQ '(').REGTEXT  RPI 642
&TEMP    SETC  '&TEXT'
         AIF   ('&TEMP'(1,1) NE '''').SKIP
&TEMP    SETC  '&TEMP'(2,K'&TEMP-2)
.SKIP    ANOP
         LA    1,=CL60'&TEMP'
         AGO   .SVC
.REGTEXT ANOP
         ZOPTLR 1,&TEXT(1) RPI 642 PTR TO TEXT WITH NULL TERM (MAX 60)
         AGO   .SVC
.NOTEXT  ANOP
         LA    1,0
.SVC     ANOP
         SVC   51  SNAP DUMP R0=FLAGS,ID,R1=A(TEXT),R14-15=A(LOW,HIGH)
         MEXIT
.*
.* LIST FORM
.*
.LISTFORM ANOP
&N       DS    0F
         AIF   ('&STORAGE(1)' EQ '').Nl_NOSTOR
         DC    A(&STORAGE(1),&STORAGE(2)) R14-R15 STORAGE RANGE
         AGO   .NL_FLAGS
.NL_NOSTOR ANOP
         DC    A(0,0) R14-R15 STORAGE RANGE
.NL_FLAGS ANOP
         DC    AL2(&FLAGS,&ID) R0 FLAGS AND ID
&TEMP    SETC  ' '
         AIF   ('&TEXT' EQ '').NL_NOTEXT
&TEMP    SETC  '&TEXT'(2,K'&TEXT-2)
.NL_NOTEXT ANOP
         DC    A(*+4)          R1 A(TEXT)
         DC    C'&TEMP',X'00'
         MEXIT
.*
.* EXEC FORM
.*
.EXECFORM ANOP
         AIF   ('&MF(2)'(1,1) EQ '(').EF_REG
         LM    14,1,&MF(2)
         AGO   .EF_OPTS
.EF_REG  ANOP
         LM    14,1,0(&MF(2,1))
.EF_OPTS ANOP
         AIF   ('&PDATA' EQ '').EF_NOPDATA
         IILH  0,&FLAGS
.EF_NOPDATA ANOP
         AIF   (&ID EQ 0).EF_NOID
         IILL  0,&ID
.EF_NOID ANOP
         AIF   ('&TEXT' EQ '').EF_NOTEXT
         LA    1,=C&TEXT
.EF_NOTEXT ANOP
         AIF   ('&STORAGE' EQ '').SVC
         AIF   ('&STORAGE(1)'(1,1) EQ '(').EF_STORREG
         LM    14,15,=A(&STORAGE(1),&STORAGE(2))
         AGO   .SVC
.EF_STORREG ANOP
         ZOPTLR 14,&STORAGE(1)
         ZOPTLR 15,&STORAGE(2)
         AGO   .SVC
.ERR1    MNOTE 12,'SNAP INVALID STORAGE=(ADDR1,ADDR2) - &STORAGE'
         MEXIT
.ERR2    MNOTE 12,'SNAP INVALID MF= OPTION'
         MEXIT
.ERR3    MNOTE 12,'SNAP STRHDR= NOT SUPPORTED'
         MEXIT
.ERR4    MNOTE 12,'SNAP SUBPLST NOT SUPPORTED'
         MEXIT
.ERR5    MNOTE 12,'SNAP MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=SQLINCLU 0100-14178-14178-0013-00012-00012-00000-Z390MAC
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 05/05/06 RPI 308 SQL INCLUDE CMD CALLED FROM EXEC
.*********************************************************************
         MACRO
         SQL_INCLUDE &MEMBER
         &MEMBER
         MEND
./ ADD NAME=SQXTR    0100-14178-14178-0013-00019-00019-00000-Z390MAC
         MACRO
&N       SQXTR &FR1,&FR2
.*********************************************************************
.* CALCULATE DFP LD EXTENED SQUARE ROOT OF FR2 IN FR1
.* (THIS INSTRUCTION IS MISSING FROM POP - SEE HFP SQXR AND BFP SQXBR)
.* (THIS MACRO CALLS SQXTR CSECT PASSING LD ARG AT +8 IN CSECT)
.* (RESULT IS RETURNED AT +8 ELSE PGM EXCEPTION FOR NEG VALUE ETC.)
.* (SQXTR.OBJ IS LOCATED IN LINKLIB ALONG WITH SQXTR.MLC)
.*********************************************************************
.* 04/25/11 RPI 1161 correct FP2 > FR2
.*********************************************************************
&N       DS   0H
         L    15,=V(SQXTR)
         STD  &FR2,8+0(15)
         STD  &FR2+2,8+8(15)
         BASR 14,15
         LD   &FR1,8+0(15)
         LD   &FR1+2,8+8(15)
         MEND
./ ADD NAME=STFSMODE 0100-14178-14178-0013-00018-00018-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/30/05                                                 *
.*********************************************************************
.* 02/16/06 RPI136 TN3270 FULL SCREEN SUPPORT FOR TPUT/TGET
.*********************************************************************
.*
.* STFSMODE ON/OFF,INITIAL=YES/NO  SET TSO MODE
.*
.*********************************************************************
&N       STFSMODE  &MODE,&INITIAL=NO
&N       DS    0H
         MEND

./ ADD NAME=STIMER   0100-14178-14178-0013-00135-00135-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 03/03/06 RPI 209 ADD STIMER WAIT INTERVAL SUPPORT
.* 04/11/06 RPI 244 UPDATE PARMS, SUPPORT REAL
.* 04/20/06 RPI 279 ADD REAL/TASK,EXIT AND DINTVL= SUPPORT
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
.*
.*  STIMER WAIT,BINTVL=s  -  where S is RX type label of full
.*                           word containing 0.01 seconds to wait
.*
.*  STIMER WAIT,DINTVL=s  -  where S is RX type label of double
.*                           word containing PL8'HHMMSSTH' interval
.*
.*  STIMER WAIT,MICVL=s   -  where S is RX type label of doubleword
.*                           containing microseconds to wait
.*
.*  STIMER WAIT,TUINTVL=s -  where S is RX type label of doubleword
.*                           containing timer unit 26.04166 sec ms
.*
.*  STIMER REAL,EXIT,BINTVL=s  -  where S is RX type label of full
.*                           word containing 0.01 seconds to wait
.*
.*  STIMER REAL,EXIT,DINTVL=s  -  where S is RX type label of double
.*                           word containing PL8'HHMMSSTH' interval
.*
.*  STIMER REAL,EXIT,MICVL=s   -  where S is RX type label of dblword
.*                           containing microseconds to wait
.*
.*  STIMER REAL,EXIT,TUINTVL=s -  where S is RX type label of dblword
.*                           containing timer unit 26.04166 sec ms
.*
.*  REGISTER INPUT
.*    R0 - HIGH BYTE REQUEST TYPE:
.*           1=WAIT
.*           2=REAL
.*           3=TASK
.*    R0 - SECOND BYTE INTERVAL TYPE
.*           1=BINTVL  FULLWORD    0.01 SECONDS IN INTERVAL
.*           2=DINTVL  DOUBLEWORD  0000000HHMMSSTHF INTERVAL
.*           3=MICVL   DOUBLEWORD  MICROSECONDS IN INTERVAL
.*           4=TUINTVL FULLWORD    26.04166 MICROSECOND TIMER UNITS
.*    R0 - LOW 4 BYTES = EXIT ADDRESS IF NOT ZERO
.*    R1 = ADDRESS OF WORD OR DOUBLEWORD INTERVAL ARGUMENT
.*
.*********************************************************************
&N      STIMER &TYPE,      WAIT/REAL/TASK                              X
               &EXIT,      EXIT ROUTINE FOR REAL/TASK                  X
               &BINTVL=,   FULL WORD 0.01 SECONDS                      X
               &DINTVL=,   DOUBLE WORD DEC HHMMSSTH INTERVAL           X
               &ERRET=,    IGNORED                                     X
               &GMT=,      NOT SUPPORTED                               X
               &MF=I,      NOT SUPPORTED                               X
               &MICVL=,    DOUBLE WORD MICROSECONDS                    X
               &TUINTVL=   DOUBLE WORD TIMER UNTIS 26.04166 MICROSEC
        AIF   ('&N' EQ '').SKPLAB
&N      DS    0H
.SKPLAB ANOP
        AIF   ('&GMT'    NE '').ERR3
        AIF   ('&MF' NE 'I').ERR5
        AIF   ('&TYPE' EQ 'WAIT').WAIT
        AIF   ('&TYPE' EQ 'REAL').REAL
        AIF   ('&TYPE' EQ 'TASK').TASK
        MNOTE 12,'STIMER - INVALID WAIT/REAL/TASK TYPE - &TYPE'
        MEXIT
.WAIT   ANOP
        AIF   ('&EXIT' NE '').ERR4
        AIF   ('&BINTVL' EQ '').WCHK_DINTVL
        IIHF  0,X'01010000' WAIT BINTVL
        LA    1,&BINTVL
        AGO   .SVC
.WCHK_DINTVL ANOP
        AIF   ('&DINTVL' EQ '').WCHK_MICVL
        IIHF  0,X'01020000' WAIT DINTVL
        LA    1,&DINTVL
        AGO   .SVC
.WCHK_MICVL ANOP
        AIF   ('&MICVL' EQ '').WCHK_TUINTVL
        IIHF  0,X'01030000' WAIT MICVL
        LA    1,&MICVL
        AGO   .SVC
.WCHK_TUINTVL ANOP
        AIF   ('&TUINTVL' EQ '').ERR1
        IIHF  0,X'01040000' WAIT TUINTVL
        LA    1,&TUINTVL
        AGO   .SVC
.REAL   ANOP  TAKE EXIT WHEN REAL TIME INTERVAL ENDS
.TASK   ANOP  TAKE EXIT WHEN TASK ITME INTERVAL ENDS (TASK=REAL LIMIT)
        AIF   ('&EXIT' EQ '').ERR2
        AIF   ('&EXIT'(1,1) EQ '(').REGEXIT
        LA    0,&EXIT       REAL EXIT
        AGO   .RCHKTYPE
.REGEXIT ANOP
        ZOPTLR 0,&EXIT(1)    REAL EXIT
.RCHKTYPE ANOP
        AIF   ('&BINTVL' EQ '').RCHK_DINTVL
        IIHF  0,X'02010000' REAL BINTVL
        LA    1,&BINTVL
        AGO   .SVC
.RCHK_DINTVL ANOP
        AIF   ('&DINTVL' EQ '').RCHK_MICVL
        IIHF  0,X'02020000' REAL DINTVL
        LA    1,&DINTVL
        AGO   .SVC
.RCHK_MICVL ANOP
        AIF   ('&MICVL' EQ '').RCHK_TUINTVL
        IIHF  0,X'02030000' REAL MICVL
        LA    1,&MICVL
        AGO   .SVC
.RCHK_TUINTVL ANOP
        AIF   ('&TUINTVL' EQ '').ERR1
        IIHF  0,X'02040000' REAL TUINTVL
        LA    1,&TUINTVL
.SVC    ANOP
        SVC   X'2F' STIMER R0B0=TYPE,R0B1=INT, R0=EXIT, R1=INTVL ARG
        MEXIT
.ERR1   MNOTE 12,'STIMER INTERVAL OPTION NOT DEFINED'
        MEXIT
.ERR2   MNOTE 12,'STIMER EXIT ADDRESS REQUIRED FOR REAL/TASK'
        MEXIT
.ERR3   MNOTE 12,'STIMER GMT= NOT SUPPORTED'
        MEXIT
.ERR4   MNOTE 12,'STIMER WAIT DOES NOT SUPPORT EXIT ADDRESS'
        MEXIT
.ERR5   MNOTE 12,'STIMER MF= NOT SUPPORTED'
        MEXIT
        MEND
./ ADD NAME=STLINENO 0100-14178-14178-0013-00018-00018-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/30/05                                                 *
.*********************************************************************
.* 02/16/06 RPI136 TN3270 FULL SCREEN SUPPORT FOR TPUT/TGET
.*********************************************************************
.*
.* STLINENO &LINE=    SET STARTING SCREEN LINE NUMBER
.*
.*********************************************************************
&N       STLINENO  &LINE=
&N       DS    0H
         MEND

./ ADD NAME=STORAGE  0100-14178-14178-0013-00071-00071-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 03/14/06                                                 *
.*********************************************************************
.* 03/14/06 RPI 210 ADD STORAGE MACRO
.* 04/11/06 RPI 244 UPDATE KW PARMS, SUPPORT LOC=ANY
.* 06/03/06 RPI 324 CORRECT ADDR=(REG) TO STORE R0 AT 0(REG)
.* 01/23/07 RPI 542 CORRECT OUTPUT REGS R0=LEN AND R1=ADDR
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
&N       STORAGE &TYPE,      OBTAIN/RELEASE                            X
               &ADDR=,       ADDRESS TO STORE ALLOC STORAGE            X
               &BNDRY=,      IGNORE                                    X
               &CALLRKY=,    IGNORE                                    X
               &CHECKZERO=,  IGNORE                                    X
               &COND=NO,     CONDITIONAL NO/YES                        X
               &CONTBDY=,    IGNORED                                   X
               &INADDR=,     NOT SUPPORTED                             X
               &KEY=,        IGNORE                                    X
               &LENGTH=,     LENGTH OF REQUEST                         X
               &LOC=,        24,31,ANY,ABOVE,BELOW                     X
               &MF=I,        NOT SUPPORTED                             X
               &RELATED=,    IGNORE                                    X
               &RTCD=,       NOT SUPPORTED                             X
               &SP=,         IGNORE                                    X
               &STARTBDY=    IGNORE
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   (N'&SYSLIST EQ 1).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(2)'
         MEXIT
.NPOK    ANOP
         AIF   ('&INADDR' NE '').ERR1
         AIF   ('&RTCD'   NE '').ERR2
         AIF   ('&MF' NE 'I').ERR3
         AIF   ('&TYPE' EQ 'OBTAIN').OBTAIN
         AIF   ('&TYPE' EQ 'RELEASE').RELEASE
         MNOTE 12,'STORAGE TYPE NOT OBTAIN/RELEASE - &TYPE'
         MEXIT
.OBTAIN  ANOP
         AIF   ('&COND' EQ 'YES').GMRC
.GMR     ANOP
         GETMAIN R,LV=&LENGTH,LOC=&LOC
         AGO     .STORE
.GMRC    ANOP
         GETMAIN RC,LV=&LENGTH,LOC=&LOC
.STORE   ANOP
         AIF   ('&ADDR' EQ '').EXIT
         AIF   ('&ADDR'(1,1) EQ '(').STOREREG
         ST    1,&ADDR                          RPI 542
         AGO   .EXIT
.STOREREG ANOP
         ST    1,0(&ADDR(1)) RPI 324            RPI 542
.EXIT    ANOP
         MEXIT
.RELEASE ANOP
         FREEMAIN R,A=&ADDR,LV=&LENGTH
         MEXIT
.ERR1    MNOTE 12,'STORAGE INADDR= NOT SUPPORTED'
         MEXIT
.ERR2    MNOTE 12,'STORAGE RTCD= NOT SUPPORTED'
         MEXIT
.ERR3    MNOTE 12,'STORAGE MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=STTMPMD  0100-14178-14178-0013-00018-00018-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/30/05                                                 *
.*********************************************************************
.* 02/16/06 RPI136 TN3270 FULL SCREEN SUPPORT FOR TPUT/TGET
.*********************************************************************
.*
.* STTMPMD ON/OFF  SET TSO DIALOG MANAGER ON/OFF
.*
.*********************************************************************
&N       STTMPMD  &MODE
&N       DS    0H
         MEND

./ ADD NAME=STX      0100-14178-14178-0013-00015-00015-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 12/15/06 RPI 406 UPDATE FOR USE IN TESTDFP1 USING REG PAIR N,N+2
.*********************************************************************
&N       STX   &R1,&S2   STORE LH/LB
&N       LA    15,&S2
         STD   &R1,0(15)
         STD   &R1+2,8(15)
         MEND
./ ADD NAME=SUBENTRY 0100-14178-14178-0013-00207-00207-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/12/07                                                 *
.*********************************************************************
.* 04/12/07 RPI 590 COPIED FROM FPC SHARE SPLA FILE 178 CONTRIBUTION
.*          TO SUPPORT MULTIPLE BASES AND RENT OPTIONS
.* 04/26/07 RPI 601 CHANGE BASE OFFSETS FROM 4095 TO STD 4096
.* 07/11/07 RPI 654 CLEANUP - ADD DROP, CHECK RENT+R13, RWA+RWALNG
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 10/01/07 RPI 709 FIX MISSING QUOTE IN AIF AFTER .NOSTK2
.* 02/17/12 RPI 1189 REMOVE DROP 13 WHEN NOT USING 13
.*********************************************************************
.*             MACRO-ID. 'SUBENTRY'
.*             AUTHOR.   DON HIGGINS.
.*             DATE WRITTEN.  07/28/70.
.*             REMARKS.  THIS MACRO GENERATES THE CODE TO ESTABLISH A
.*                       CSECT WITH SAVE AREA AND BASE REGISTER USING
.*                       STANDARD OS LINKAGE CONVENTIONS.
.*             REV1 11/14/74 ADD REENTRANT OPTION WITH WORK AREA
.*                 1.  FOR REENTRANT LINKAGE YOU MUST SPECIFY
.*                     A.  RENT=YES
.*                     B.  AT LEAST ONE BASE REGISTER OTHER THAN 13
.*                         SUCH AS BASES=(R12)
.*                 2.  OPTIONALLY YOU CAN SPECIFY A DSECT NAME AND
.*                     LENGTH FOR A WORK AREA BUILT BEHIND SAVE AREA.
.*                     FOR EXAMPLE  RWA=MYWORK,RWALNG=8
.*             REV2 02/10/76 DSH - ADD SUBPOOL OPTION
.*             REV3 XX/XX/77 FDB - ADD STACK OPTION TO SUPPORT
.*                                 REENTRANT PERFORM, PENTRY, PEXIT
.*
.*                                 STACK=  SETS MAXIMUM DEPTH
.*                                         OF PERFORMS
.*
.*             REV4 01/04/78 DSH - ADD OPTIONS TO OPTIMIZE STACK CODE
.*                                 AND PROVIDE EXTENDED BASE REGISTERS
.*
.*                                 PSTACK= DEFINES PERMANENT REGISTER
.*                                         FOR STACK TO SAVE LOADS
.*                                         AND STORES
.*
.*                                 PBASE=YES CAUSES BASE REGISTER
.*                                           DEFINED BY BASES= TO
.*                                           BE STACKED AND A NEW
.*                                           BASE ESTABLISHED FOR
.*                                           EACH PERFORMED ROUTINE
.*
.*                                 PSAVE=NO  CAUSES R14 AND R15
.*                                           TO NOT BE SAVED ACROSS
.*                                           PERFORMS TO SAVE LOADS
.*                                           AND STORES
.*
.*                                 PCHECK=NO ELIMINATES CODE TO
.*                                           CHECK FOR STACK
.*                                           OVERFLOW/UNDERFLOW
.*
.*
.*
.*********************************************************************
&NAME    SUBENTRY &CSECT=YES,&BASES=(13),                              X
               &RENT=NO,&RWA=,&RWALNG=0,&SP=0,&STACK=0,                X
               &PSTACK=0,&PBASE=NO,&PSAVE=YES,&PCHECK=YES
         GBLC  &PSTKREG,&PBASREG,&PBASLAB
         GBLB  &PSTKSW,&PBASESW,&PSAVESW,&PCHKSW
         GBLA  &STKSIZE,&STKENT
         GBLB  &STKOPT,&RENTOPT
         LCLA  &NBASE,&S,&OFFSET
&PSTKSW  SETB  0
&PBASESW SETB  0
&PSAVESW SETB  0
&PCHKSW  SETB  0
&STKOPT  SETB  0
&RENTOPT SETB  0
         AIF   ('&CSECT'(1,1) EQ 'N').NOCSECT
&NAME    CSECT
         AGO   .STM
.NOCSECT ANOP
&NAME    DS    0D
.STM     ANOP
         AIF   ('&RENT'(1,1) EQ 'N').NORENT
&RENTOPT SETB  1
         AIF   ('&BASES(1)' EQ 'R13').ERR2  RPI 654
         AIF   (&BASES(1) EQ 13).ERR2     RPI 654
         STM   14,12,12(13)
         BAL   &BASES(1),40(15)
         USING &NAME+8,&BASES(1)
         DC    CL8'&NAME'
         DC    CL8'SESA'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         AIF   ('&STACK' EQ '0').NOSTK1
&STKOPT  SETB  1
&STKENT  SETA  4
         AIF   ('&PBASE'(1,1) EQ 'N').STK1
&PBASESW SETB  1
&STKENT  SETA  8
&PBASREG SETC  '&BASES(1)'
&PBASLAB SETC  '&NAME+8'
.STK1    ANOP
&STKSIZE SETA  20+&STKENT*&STACK+4
.NOSTK1  ANOP
         LA    0,80+&RWALNG+&STKSIZE
         AIF   ('&SP' EQ '0').SKIPSP
         LA    1,&SP
         SLL   1,24
         OR    0,1
.SKIPSP  ANOP
         LR    2,0
         GETMAIN R,LV=(0)
.*
.*       SAVE AREA, STACK, AND WORK AREA LAYOUT
.*
.*       -8     4  'SESA'
.*       -4     4  SUB POOL AND TOTAL LENGTH FOR SUBEXIT FREEMAIN
.*        0    72  STANDARD SAVE AREA
.*       72     4  R14 SAVE AREA DURING PERFORM IF PSAVE=YES
.*       76     4  R15 SAVE AREA DURING PERFORM IF PSAVE=YES
.*       80     4  STACK POINTER SAVE AREA IF NO PSTACK DEFINED
.*       84     4  LENGTH OF STACK ENTRY (4 OR 8 IF PBASE DEFINED)
.*       88     4  LOW STACK ENTRY WITH HIGH BIT ON FOR CHECKING
.*       92     X  STACK OF LENGTH DEFINED BY STACK=
.*       92+X   4  HIGH STACK ENTRY WITH HIGH BIT ON FOR CHECKING
.*       96+X   Y  WORK AREA DEFINED BY RWA= AND RWALNG=
.*
.*
         MVC   0(4,1),8(&BASES(1))
         ST    2,4(,1)
         LA    1,8(,1)
         AIF   ('&STACK' EQ '0').NOSTK2
         AIF   ('&PSAVE'(1,1) EQ 'N').L1
.*                                          IF SAVE REQUIRED
.*                                             SET SWITCH
&PSAVESW SETB  1
.L1      AIF   ('&PCHECK'(1,1) EQ 'N').L2
.*                                          IF CHECKING REQUIRED
.*                                             SET SWITCH
&PCHKSW  SETB  1
         XC    88(8+&STKENT*&STACK,1),88(1) CLEAR STACK AREA
         MVI   88(1),X'80'                  SET LOW BAD BIT
         MVI   92+&STKENT*&STACK.(1),X'80'  SET HIGH BAD BIT
.L2      ANOP
         LA    15,&STKENT
         ST    15,84(1)                     SET ENTRY LENGTH
         AIF   ('&PSTACK' NE '0').L3
.*                                          IF NO STACK REGISTER
         LA    15,92(1)
         ST    15,80(1)                       SAVE STACK POINTER
         AGO   .L4
.*                                          ELSE
.L3      ANOP
&PSTKSW  SETB  1                               SET PSTACK SWITCH
&PSTKREG SETC  '&PSTACK'                       SAVE REG FOR MACROS
         LA    &PSTKREG,92(1)                  LOAD STACK REGISTER
.L4      ANOP
.NOSTK2  ANOP
         ST    1,8(13)
         ST    13,4(1)
         LM    14,2,12(13)
         L     13,8(13)
         AIF   ('&RWALNG' EQ '0' AND '&RWA' EQ '').GEN   RPI 654
         AIF   ('&RWALNG' EQ '0' OR  '&RWA' EQ '').ERR1  RPI 654,709
         USING &RWA-(72+&STKSIZE),13
         AGO   .GEN
.NORENT  ANOP
         STM   14,12,12(13)
         BAL   15,104(15)
         DC    18F'0'
         DC    CL8'&NAME'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         ST    15,8(13)
         ST    13,4(15)
         LR    13,15
         AIF   (T'&BASES(1) NE 'N').CHKR13
         AIF   (&BASES(1) EQ 13).GENB13
         AGO   .GENBX
.CHKR13  ANOP
         AIF   ('&BASES(1)' EQ 'R13').GENB13      RPI 654
.GENBX   ANOP
         ZOPTLR &BASES(1),13
.SKIPR13 ANOP
.*       DROP  13                               RPI 654, RPI 1189
         USING &NAME+8,&BASES(1)
         AGO   .GEN
.GENB13  ANOP
         USING &NAME+8,13
.GEN     ANOP
&NBASE   SETA  N'&BASES
&S       SETA  1
.LOOP    ANOP
&S       SETA  &S+1
         AIF   (&S GT &NBASE).EXIT
&OFFSET  SETA  &OFFSET+4096                    RPI 601
         LAY   &BASES(&S),4096(&BASES(&S-1))   RPI 601
         USING &NAME+8+&OFFSET,&BASES(&S)
         AGO   .LOOP
.EXIT    ANOP
         MEXIT
.ERR1    MNOTE 'SUBENTRY PARM ERROR RWA= REQUIRES RWALNG= ALSO'
         MEXIT
.ERR2    MNOTE 'SUBENTRY PARM ERROR RENT=YES REQUIRES BASE(1) NE 13'
         MEXIT
         MEND

./ ADD NAME=SUBEXIT  0100-14178-14178-0013-00055-00055-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/12/07                                                 *
.*********************************************************************
.* 04/12/07 DSH RPI 590 COPIED FROM CBT SHARE SPLA TAPE 178 TO ADD
.*          SUPPORT FOR RENT, EXTRA BASES, ETC.
.* 04/24/07 RPI 601 CORRECT PLACEMENT OF LABEL
.* 07/11/07 RPI 654 REMOVE USED RWALNG= AND SP=
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
.*             MACRO-ID. 'SUBEXIT'.
.*             AUTHOR.   DON HIGGINS.
.*             DATE WRITTEN.  07/28/70.
.*             REMARKS.  THIS MACRO GENERATES THE CODE TO RESTORE
.*                       REGISTERS AND RETURN FROM A CSECT.  A RETURN
.*                       CODE OF ZERO IS RETURNED UNLESS A DIFFERENT
.*                       CODE IS SPECIFIED USING THE KEY WORD RC=.
.*             REV1 11/14/74 ADD REENTRANT OPTION. SEE SUBENTRY.
.*             REV2 12/09/74 ADD REG OPTION FOR RC OPERAND.
.*             REV3 02/10/76 DSH - ADD SUBPOOL OPTION
.*********************************************************************
&NAME    SUBEXIT &RC=0,&RENT=NO
         AIF   ('&NAME' EQ '').SKIPDS
&NAME    DS    0H
.SKIPDS  ANOP
         GBLB  &RENTOPT
         AIF   ('&RC'(1,1) EQ '(').RCREG
         LA    15,&RC
         AGO   .CHKRENT
.RCREG   ANOP
         ZOPTLR 15,&RC
.CHKRENT ANOP
         AIF   (&RENTOPT EQ 0).NORENT
         L     13,4(,13)
         STM   15,1,16(13)
         L     1,8(,13)
         LA    15,8
         SLR   1,15
         L     0,4(,1)
         FREEMAIN R,LV=(0),A=(1)
         LM    14,12,12(13)
         BR    14
         MEXIT
.NORENT  ANOP
         L     13,4(,13)
         L     14,12(,13)
         LM    2,12,28(13)
         BR    14
         MEND
./ ADD NAME=SYSSTATE 0100-14178-14178-0013-00025-00025-00000-Z390MAC
         MACRO                                                          00002
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/30/08                                                 *
.*********************************************************************
.* 07/30/078 RPI 885 ADD FOR COMPATIBILITY WITH ZOS APPLICATIONS
.*********************************************************************
.* 1.  ISSUE WARNING IF AMODE64=YES, ASCENV=AR, OR ARCHLVL > 2
.*********************************************************************
&N       SYSSTATE &AMODE64=NO,    DEFAULT IS AMODE24 OR AMODE31        X
               &ASCENV=P,         PRIMARY MODE (AR MODE NOT SUPPORTED) X
               &ARCHLVL=2         ARCHITECTURE LEVEL 2 FOR Z/OS
         AIF   ('&AMODE64' EQ 'NO').OK1
         MNOTE 4,'SYSSTATE AMODE64 NOT SUPPORTED YET'
.OK1     ANOP
         AIF   ('&ASCENV' EQ 'P').OK2
         MNOTE 4,'SYSSTATE ASCENV=P PRIMARY MODE ONLY SUPPORTED'
.OK2     ANOP
         AIF   (&ARCHLVL LE 2).OK3
         MNOTE 4,'SYSSTATE ARCHLVL 2 ONLY SUPPORTED'
.OK3     ANOP
         MEND
./ ADD NAME=SYSTRACE 0100-14178-14178-0013-00017-00017-00000-Z390MAC
         MACRO
&NAME    SYSTRACE &TRACE_OPTIONS
.*
.* AUTHOR. DON HIGGINS
.* DATE.   05/07/11
.* REMARKS. SET EZ390 TRACE OPTIONS FROM STRING
.*          TERMINATED BY SPACE.  THE EXECUTION TIME
.*          OPTIONS INCLUDE:
.*            1. NULL STRING TURNS ALL TRACE OPTIONS OFF
.*            2. E - INSTRUCTION TRACE ON TRE
.*            3. G - MEMORY GETMAIN/FREEMAIN
.*            4. Q - QVSAM I/O
.*            5. T - TCPIO I/O
.*            6. V - VSAM  I/O
&TEXT    SETC '&TRACE_OPTIONS'(2,K'&TRACE_OPTIONS-2)
&NAME    LA   1,=C'&TEXT '
         SVC  X'AC' SET EZ390 TRACE OPTIONS FROM STRING
./ ADD NAME=TCPIO    0100-14178-14178-0013-00135-00135-00000-Z390MAC
         MACRO
&N       TCPIO &OP,         OPERATION - OPEN, CLOSE, SEND, RECEIVE     X
               &OPTION,     NOWAIT OPTION FOR RECIEVE                  X
               &MSG=,       RX/REG ADDRESS OF MESSAGE TO SEND/RECEIVE  X
               &LMSG=,      RX,REG MSG SEND LENGTH OR RECEIVE MAX LEN  X
               &HOST=,      RX/REG ADDR OF HOST IP ADDRESS (*=LOCAL)   X
               &PORT=,      PORT NUMBER FOR ALL OPERATIONS             X
               &CONN=-1     CONNECTION NUMBER FOR SERVER SEND/RECEIVE
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 01/01/07                                                 *
.*********************************************************************
.* MAINTENANCE
.* 01/01/07 RPI 524 ADD TCPIO MACRO AND SVC X'7C' SUPPORT FOR SOCKETS
.* 02/21/07 RPI 554 ADD TCPIO NOWAIT OPTION FOR RECEIVE
.*                  REMOVE LMAX AND USE LMSG FOR SEND/RECEIVE
.*                  ADD CONN= CONNECTION ID FOR SEND OR RECEIVE
.*                  (CONN ID IS RETURNED IN R2 BY SERVER RECEIVE)
.* 03/11/07 RPI 573 ALLOW CONN=-1 IN ADDITION TO DEFAULT CONN=-1
.* 08/21/07 RPI 670 ADD REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.* SVC INPUT:
.*   R0 OP CODE 1=OPEN SERVER ON CURRENT HOST TO ACCEPT CONNECTIONS
.*     R1  PORT #
.*   R0 OP CODE 2=OPEN CLIENT CONNECTION TO ACTIVE SERVER ON HOST
.*     R1  PORT #
.*     R14 HOST IP ADDR NULL TERMINATED OR 0 FOR LOCAL HOST (HOST=*)
.*   R0 OP CODE 3=CLOSE
.*     R1  PORT #
.*   R0 OP CODE 4=SEND
.*     R1  PORT #
.*     R2  CONN # (ONLY REQUIRED FOR SERVER PORT DUE TO MULT. CONN)
.*     R14 MSG ADDRESS
.*     R15 MSG LENGTH FOR SEND
.*   R0 OP CODE 5= RECEIVE WITH OPTIONAL NOWAIT BIT 15
.*     R1  PORT #
.*     R2  CONN # (IF -1 THEN NEXT MSG FROM ANY CONNECTION)
.*     R14 MSG ADDRESS
.*     R15 MAX MESSAGE LENGTH FOR RECEOVE (ACTUAL RETURNED IN R1)
.* SVC OUTPUT
.*     R15 =  0 OK
.*     R15 =  4 NOWAIT SPECIFIED ON RECEIVE AND NO MSG READY
.*     R15 = 12 ERROR OCCURRED (SEE ERROR MESSAGES)
.*     R1  = ACTUAL MESSAGE LENGTH RETURNED FOR RECEIVE
.*     R2  = CONNECTION ID FOR SERVER PORT RECEIVE (REQUIRED FOR SEND)
.*********************************************************************
         AIF   ('&OP' EQ 'OPEN').OPEN
         AIF   ('&OP' EQ 'CLOSE').CLOSE
         AIF   ('&OP' EQ 'SEND').SEND
         AIF   ('&OP' EQ 'RECEIVE').RECEIVE
         AGO   .ERR1
.OPEN    ANOP
         AIF   ('&HOST' NE '').OPEN_CLIENT
.OPEN_SERVER ANOP
         LA    0,1           R0 = TCPIO OP OPEN SERVER PORT ON HOST
         AGO   .PORT
.OPEN_CLIENT ANOP
         LA    0,2           R0 = TCPIO OP OPEN CLIENT PORT CONN7ECTION
         AIF   ('&HOST' EQ '*').HOST_LOCAL
         AIF   ('&HOST'(1,1) EQ '(').HOSTREG
         LA    14,&HOST      R14= TCPIO HOST IP NULL TERMINATED
         AGO   .PORT
.HOST_LOCAL ANOP
         LA    14,0          R14= 0 FOR LOCAL HOST
         AGO   .PORT
.HOSTREG ANOP
         ZOPTLR 14,&HOST(1)   R14= TCPIO HOST IP NULL TERMINATED
         AGO   .PORT
.CLOSE   ANOP
         LA    0,3           R0 = TCPIO OP CLOSE PORT
         AGO   .PORT
.SEND    ANOP
         LA    0,4           R0 = TCPIO OP SEND MSG VIA PORT CONNECTION
         AGO   .CONN
.RECEIVE ANOP
         LA    0,5           R0 = TCPIO OP RECV MSG VIA PORT CONNECTION
         AIF   ('&OPTION' EQ '').CONN
         AIF   (UPPER '&OPTION' EQ 'NOWAIT').NOWAIT
         AGO   .ERR5
.NOWAIT  ANOP
         OILH  0,1           R0 BIT 15 FOR NOWAIT  RPI 554
.CONN    AIF   ('&CONN' EQ '').NOCONN
         AIF   ('&CONN' EQ '-1').NOCONN
         AIF   ('&CONN'(1,1) EQ '(').CONNREG
         L     2,&CONN
         AGO   .MSG
.NOCONN  ANOP          ASSUME CLIENT PORT SEND
         SR    2,2     (SVC WILL ISSUE ERROR IF SERVER PORT AND R2=-1)
         BCTR  2,0
         AGO   .MSG
.CONNREG ANOP
         ZOPTLR 2,&CONN(1)
.MSG     ANOP
         AIF   ('&MSG' EQ '').ERR2
         AIF   ('&MSG'(1,1) EQ '(').MSGREG
         LA    14,&MSG
         AGO   .LMSG
.MSGREG  ANOP
         ZOPTLR 14,&MSG(1)
.LMSG    ANOP
         AIF   ('&LMSG' EQ '').ERR4
         AIF   ('&LMSG'(1,1) EQ '(').LMSGREG
         AIF   (T'&LMSG EQ 'N').LMSGLIT
         L     15,&LMSG
         AGO   .PORT
.LMSGLIT ANOP
         L     15,=F'&LMSG'
         AGO   .PORT
.LMSGREG ANOP
         ZOPTLR 15,&LMSG(1)
.PORT    ANOP
         AIF   ('&PORT' EQ '').ERR3
         AIF   ('&PORT'(1,1) EQ '(').PORTREG
         LA    1,&PORT
         AGO   .SVC
.PORTREG ANOP
         ZOPTLR 1,&PORT(1)
.SVC     ANOP
         SVC   X'7C' R0=OP(1-5) R1=PORT R14=HOST/MSG R15=LMSG
         MEXIT
.ERR1    MNOTE 12,'TCPIO - INVALID OP - OPEN, CLOSE, SEND, RECEIVE'
         MEXIT
.ERR2    MNOTE 12,'TCPIO - MISSING KEYWORD MSG= FOR SEND/RECV'
         MEXIT
.ERR3    MNOTE 12,'TCPIO - MISSING KEYWORD PORT= FOR SEND/RECV'
         MEXIT
.ERR4    MNOTE 12,'TCPIO - LMSG LENGTH FOR SEND/RECEIVE REQUIRED'
         MEXIT
.ERR5    MNOTE 12,'TCPIO - INVALID OPTION - &OPTION'
         MEXIT
         MEND
./ ADD NAME=TESTCB   0100-14178-14178-0013-00046-00046-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 08/10/07 INITIAL CODING TO TEST FDBK OR RECLEN FIELDS
.* 08/19/07 RPI 680 SHOWCB TO TESTCB
.* 09/14/07 RPI 672 VERIFY RPL VS ACB
.* 09/19/07 RPI 697 SET RC=0
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       TESTCB &RPL=,        RPL REQUEST PARAMATER LIST ADDRESS       X
               &ACB=,         ACB ACCESS CONTROL BLOCK ADDRESS         X
               &FDBK=,        TEST RPL FEEDBACK REASON CODE BYTE       X
               &RECLEN=       TEST RPL LENGTH OF RECORD
         LCLB  &MODS
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'TESTCB UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AGO   .POSLOOP
.POSEND  ANOP
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         SR    15,15 RC=0
         AIF   ('&FDBK'   NE '').FDBK
         AIF   ('&RECLEN' NE '').RECLEN
         MNOTE 12,'TESTCB FIELD NOT SUPPORTED YET'
.EXIT    ANOP
         MEXIT
.FDBK    ANOP
         ZTESTCB &RPL,RPLFEEDB-IHARPL+3,&FDBK,1
         AIF   ('&RPL' NE '').EXIT
         MNOTE 'TESTCB RPL REQUIRED FOR FDBK'
         AGO   .EXIT
.RECLEN  ANOP
         ZTESTCB &RPL,RPLLREC-IHARPL,&RECLEN,4
         AIF   ('&RPL' NE '').EXIT
         MNOTE 'TESTCB RPL REQUIRED FOR RECLEN'
         AGO     .EXIT
         MEND
./ ADD NAME=TGET     0100-14178-14178-0013-00111-00111-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/30/05                                                 *
.*********************************************************************
.* 12/11/05 RPI47 - add TGET/TPUT support for GUI window
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 02/21/06 RPI211 MAKE TGET/TPUT MAINFRAME COMPATIBLE AT SVC LEVEL
.* 02/25/06 RPI211 MAKE TGET/TPUT MAINFRAME COMPATIBLE (DEMOGUI4 TEST)
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.*
.* TGET BUFFER,LBUFFER,OPTIONS
.*
.*     BUFFER  - RX or reg pointer to TN3290 data stream buffer
.*     LBUFFER - absolute value or reg length of buffer
.*     OPTIONS - the follwing options may be coded:
.*                 EDIT   - read text and remove controls (default)
.*                 NOEDIT - read text with controls
.*                 WAIT   - wait for input (default)
.*                 NOWAIT - return with R15=4 if no response avail.
.*                 ASIS   - read TN3270 data stream unedited
.*
.* TGET (R0),(R1),OPTIONS
.*
.*     If TGET (0),(1) and no options are coded then
.*     simple SVC 93 is generated so user can set options in regs
.*
.* Register input:
.*
.* R0LH = ASID (NOT USED)
.* R0LL = BUFFER LENGTH
.* R1   = LOW 24 BIT BUFFER ADDRESS (RMODE24 REQUIRED)
.* R1   = FLAGS IN HIGH BYTE
.*           X'80' - 1=TGET 0=TPUT
.*           X'40' - USERID IN R15 (NOT USED)
.*           X'20' - LOWP PROCESSING REQUIRED (NOT USED)
.*           X'10' - 1=NOWAIT 0=WAIT
.*           X'08' - 1=HOLD 0=NOHOLD
.*           X'04' - 1=BREAKIN 0=NOBREAKIN
.*           X'03' - 00=EDIT, 01=ASIS, 10=CONTROL, 11=FULLSCR
.* Register output:
.* R1    = bytes acutally read
.*********************************************************************
&N       TGET  &BUFF,                                                  X
               &LBUFF,                                                 X
               &MF=I      NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   ('&BUFF'(1,1) EQ '(').RECREG
         LA    1,&BUFF
         AGO   .CHKLEN
.RECREG  ANOP
         ZOPTLR 1,&BUFF(1)
.CHKLEN  ANOP
         AIF   ('&LBUFF'(1,1) EQ '(').LENREG
         LA    0,&LBUFF
         AGO   .SETOPT
.LENREG  ANOP
         AIF   (&LBUFF(1) NE 1).LENREGOK
         MNOTE 12,'TGET INVALID LENGTH REGISTER - &LBUFF(1)'
.LENREGOK ANOP
         ZOPTLR 0,&LBUFF(1)
.SETOPT  ANOP
&OP      SETC  '1'  X'80' 1=TGET, 0=TPUT
&USERID  SETC  '0'  X'40' 0=NO USERID IN R15    (NOT USED)
&LOWP    SETC  '0'  X'20' 0=LOWP                (NOT USED)
&WAIT    SETC  '0'  X'10' 0=WAIT, 1=NOWAIT
&HOLD    SETC  '0'  X'08' 0=NOHOLD, 1=HOLD      (NOT USED)
&BREAKIN SETC  '0'  X'04' 0=BREAKIN, 1=BREANKIN (NOT USED)
&TYPE    SETC  '00' X'03' 00=EDIT, 01=ASIS, 10=CONTROL, 11=FULLSCR
.CHKOPT  ANOP
&NP      SETA  N'&SYSLIST
         AIF   (&NP GE 3 AND '&SYSLIST(3)' EQ 'R').SVC USE REG PARMS
&I       SETA  2
.OPTLOOP ANOP
&I       SETA  &I+1
         AIF   (&I GT &NP).OPTEND
         AIF   ('&SYSLIST(&I)' EQ 'EDIT').EDIT
         AIF   ('&SYSLIST(&I)' EQ 'ASIS').ASIS
         AIF   ('&SYSLIST(&I)' EQ 'WAIT').WAIT
         AIF   ('&SYSLIST(&I)' EQ 'NOWAIT').NOWAIT
         MNOTE 12,'TGET INVALID OPTION - &SYSLIST(&I)'
         AGO   .OPTLOOP
.EDIT    ANOP
&TYPE    SETC  '00' X'03' 00=EDIT
         AGO   .OPTLOOP
.ASIS    ANOP
&TYPE    SETC  '01' X'03'  01=ASIS
         AGO   .OPTLOOP
.WAIT    ANOP
&WAIT    SETC  '0' X'10'  0=WAIT
         AGO   .OPTLOOP
.NOWAIT  ANOP
&WAIT    SETC  '1' X'10'  1=NOWAIT
         AGO   .OPTLOOP
.OPTEND  ANOP
         ICM   1,8,=B'&OP&USERID&LOWP&WAIT&HOLD&BREAKIN&TYPE'
.SVC     ANOP
         SVC   93 R0=(ASID,LENGTH) R1=(FLAGS,ADDR)
         MEXIT
.ERR1    MNOTE 12,'TGET MF= NOT SUPPORTED'
         MEND

./ ADD NAME=TIME     0100-14178-14178-0013-00166-00166-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 11/02/05 RPI68 - add SVC CLOCK options for STCK, STCKE, and JAVA
.* 11/15/05 RPI94 - add SVC NS option for nano-second interval timer
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 01/16/06 RPI175 ADD CHECK FOR MISSING ADDR PARM
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 06/22/07 RPI 662 ADD SVC TS OPTION FOR 29 CHAR NANOSEC TIMESTAMP
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 03/18/08 RPI 825 ADD EXTENDED OPTION INS TO RETURN R1=INSTR. COUNT
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       TIME  &TYPE,               DEC,BIN,MIC,STCK,STCKE,NS,TS,INS   X
               &ADDR,               STORE RESULT ADDR                  X
               &CLOCKTYPE=,         STCK/STCKE(1900),EXT JAVA (1970)   X
               &DATETYPE=YYYYDDD,   SYSTEM DATE FORMATS                X
               &LINKAGE=SVC,        SVC/SYSTEM                         X
               &MF=I,               NOT SUPPORTED                      X
               &ZONE=LT             LOCAL TIME (GMT/UTC NOT SUPPORTED)
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   (N'&SYSLIST LE 2).NPOK
         MNOTE 12,'TIME UNSUPPORTED OPERANDS - &SYSLIST(3)'
         MEXIT
.NPOK    ANOP
.*
.* RETURN TIME AND DATE IN REQUESTED FORMAT
.*
         AIF   ('&MF' NE 'I').ERR3
         AIF   ('&ZONE' NE 'LT').ERR2
         AIF   ('&LINKAGE' EQ 'SVC').SVCLINK
         AIF   ('&LINKAGE' EQ 'SYSTEM').SYSLINK
         MNOTE 12,'TIME INVALID LINKAGE TYPE - &LINKAGE'
         MEXIT
.*
.* LINKAGE=SVC DEFAULT
.*
.SVCLINK ANOP
         AIF   ('&TYPE' EQ '').SVCDEC
         AIF   ('&TYPE' EQ 'DEC').SVCDEC
         AIF   ('&TYPE' EQ 'BIN').SVCBIN
         AIF   ('&TYPE' EQ 'TU').SVCTU
         AIF   ('&TYPE' EQ 'MIC').SVCMIC
         AIF   ('&TYPE' EQ 'STCK').SVCSTCK
         AIF   ('&TYPE' EQ 'CLOCK').SVCCLOCK
         AIF   ('&TYPE' EQ 'NS').SVCNS
         AIF   ('&TYPE' EQ 'TS').SVCTS        RPI 662
         AIF   ('&TYPE' EQ 'INS').SVCINS      RPI 825
         MNOTE 12,'TIME INVALID SVC LINKAGE TYPE - &TYPE'
         MEXIT
.SVCDEC  ANOP             R1 = HEX CCYYDDDF
         LA    0,0   DEC  R0 = HEX HHMMSSTH
         AGO   .SVCSVC
.SVCBIN  ANOP
         LA    0,1   BIN  R0 = 0.01 SECONDS
         AGO   .SVCSVC
.SVCTU   ANOP
         LA    0,2   TU   R0 = 26.04166 MIC UNITS
         AGO   .SVCSVC
.SVCMIC  ANOP
         LA    0,3   MIC  0(8,R1) = DOUBLE WORD MICROSECONDS
         AGO   .SVCADDR
.SVCSTCK ANOP
         LA    0,4   STCK 0(8,R1) = TOD DOUBLE WORD (BIT 51=MIC)
.SVCADDR ANOP
         AIF   ('&ADDR' EQ '').ERR1
         AIF   ('&ADDR'(1,1) EQ '(').SVCAREG
         LA    1,&ADDR
         AGO   .SVCSVC
.SVCAREG ANOP
         ZOPTLR 1,&ADDR(1)
.SVCSVC  ANOP
         SVC   11 TIME AND DATE
         MEXIT
.SVCCLOCK ANOP
         AIF   ('&CLOCKTYPE' EQ 'STCK').CLOCK_STCK
         AIF   ('&CLOCKTYPE' EQ 'STCKE').CLOCK_STCKE
         AIF   ('&CLOCKTYPE' EQ 'JAVA').CLOCK_JAVA
         MNOTE 12,'TIME INVALID SVC CLOCK TYPE - &TYPE'
.CLOCK_STCK ANOP
         LA    0,5 CLOCK STCK - DOUBLE WORD BIT 51 MICS FROM 1900
         AGO   .SVCADDR
.CLOCK_STCKE ANOP
         LA    0,6 CLOCK STCKE - 2 DOUBLE WORDS BIT 59 MICS FROM 1900
         AGO   .SVCADDR
.CLOCK_JAVA  ANOP
         LA    0,7 CLOCK JAVA - DOUBLE WORD BIT 63 MILL-SEC FROM 1970
         AGO   .SVCADDR
.SVCNS   ANOP
         LA    0,8 NANOSECONDS - DOUBLE WORD BIT 63 NANO-SEC COUNTER
         AGO   .SVCADDR
.SVCTS   ANOP      RPI 662 YYYY-MM-DD HH:MM:SS.NNNNNNNNN (29 CHAR)
         LA    0,9 OBDC TIMESTAMP WITH 9 DIGIT NANOSECONDS
         AGO   .SVCADDR
.SVCINS  ANOP
         LA    0,16 RPI 825 R1=INSTRUCTION COUNTER
         AGO   .SVCSVC
.*
.* LINKAGE=SYSTEM
.*
.SYSLINK ANOP
         AIF   ('&TYPE' EQ '').SYSDEC
         AIF   ('&TYPE' EQ 'DEC').SYSDEC
         AIF   ('&TYPE' EQ 'BIN').SYSBIN
         AIF   ('&TYPE' EQ 'MIC').SYSMIC
         AIF   ('&TYPE' EQ 'STCK').SYSSTCK
         AIF   ('&TYPE' EQ 'STCKE').SYSSTCKE
         MNOTE 12,'TIME INVALID SYS LINKAGE TYPE - &TYPE'
         MEXIT
.SYSDEC  ANOP
         LA    0,10   DEC   0(4,R1) = HHMMSSTH
         AGO   .SYSADDR
.SYSBIN  ANOP
         LA    0,11   BIN   0(4,R1) = 0.01 SECONDS
         AGO   .SYSADDR
.SYSMIC  ANOP
         LA    0,13  MIC    0(8,R1) = MICROSECONDS
         AGO   .SYSADDR
.SYSSTCK ANOP
         LA    0,14   STCK  0(8,R1) = CLOCK (BIT 51 = MIC)
         AGO   .SYSADDR
.SYSSTCKE ANOP
         LA    0,15   SKCKE 0(16,R1) = ECLOCK (BIT 59 = MIC)
.SYSADDR ANOP
         AIF   ('&ADDR' EQ '').ERR1
         AIF   ('&ADDR'(1,1) EQ '(').SYSAREG
         LA    1,&ADDR
         AGO   .SYSDATE
.SYSAREG ANOP
         ZOPTLR 1,&ADDR(1)
.SYSDATE ANOP
         AIF   ('&TYPE' EQ 'STCKE').SYSSVC NO DATE
         AIF   ('&DATETYPE' EQ 'YYYYDDD').SYSYYYYDDD
         AIF   ('&DATETYPE' EQ 'MMDDYYYY').SYSMMDDYYYY
         AIF   ('&DATETYPE' EQ 'DDMMYYYY').SYSDDMMYYYY
         AIF   ('&DATETYPE' EQ 'YYYYMMDD').SYSYYYYMMDD
         MNOTE 12,'TIME INVALID SYS LINKAGE DATETYPE - &DATETYPE'
         MEXIT
.SYSYYYYDDD ANOP
         IILH  0,1      8(4,R1) = HEX 0YYYYDDD
         AGO   .SYSSVC
.SYSMMDDYYYY ANOP
         IILH  0,2      8(4,R1) = HEX MMDDYYYY
         AGO   .SYSSVC
.SYSDDMMYYYY ANOP
         IILH  0,3      8(4,R1) = HEX DDMMYYYY
         AGO   .SYSSVC
.SYSYYYYMMDD ANOP
         IILH  0,4      8(4,R1) = HEX YYYYMMDD
.SYSSVC  ANOP
         SVC   11 TIME AND DATE
         MEXIT
.ERR1    MNOTE 12,'TIME MISSING POSITIONAL ADDRESS PARM'
         MEXIT
.ERR2    MNOTE 12,'TIME ZONE ONLY SUPPORTS LT'
         MEXIT
.ERR3    MNOTE 12,'TIME MF= NOT SUPPORTED'
         MEND
./ ADD NAME=TN3270   0100-14178-14178-0013-00242-00242-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/30/05                                                 *
.*********************************************************************
.* 11/20/05 RPI47  - add TN3270 support functions and equates
.* 02/25/06 RPI219 - add WCC_CKD and WCC_KD for DEMOGUI4 test update
.* 03/13/06 RPI 220 ADD WCC_BKD TO SOUND ALARM
.* 03/15/06 RPI 224 ADD RA COMMAND SUPPORT (RA,ROW,COL,BYTE)
.* 04/10/06 RPI 244 ADD MISSING ERROR MESSAGES
.* 05/17/06 RPI 227 ADD GE graphic escape order X'08' to symbols
.* 04/02/07 RPI 572 CHANGE ATTR BYTES TO EBCDIC GRAPHIC CHARS.
.* 04/03/07 RPI 572 CHANGE SBA TRANSLATE X'E1' TO X'61'
.* 04/03/07 RPI 572 ADD 4 ADDITIONAL ATTR EQU'S WITH MDT SET
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 06/06/08 RPI 628 add EEOF and EINP local key cmds and WRT_EAU order
.* 06/23/08 RPI 850 add ATT_PND and ATT_UND non-display char attribute
.*********************************************************************
.*
.* TN3270 MACRO TO SUPPORT DEFINITION OF TN3270 DATA STREAMS
.*
.*   IF FIRST PARAMETER IS THE WORD SYMBOLS THEN EQUATES FOR TN3270
.*   CONTROL CHARACTERS AND ATTRIBUTES ARE GENERATED.
.*
.*   ANY NUMBER OF TN3270 SYMBOLS AND ASSOCIATED DATA BYTES
.*   CAN BE GENERATED.  SYMBOLS REQUIRING DATA BYTES MAY BE
.*   ENCLOSED IN SUBLIST WITH DATA BYTES.  FOR SBA SUBLIST THE ROW AND
.*   COLUMN MAY BE SPECIFIED IN SUBLIST FOR MACRO TO CALCULATE ADDR.
.*
.*
.*********************************************************************
&N       TN3270
         AIF   ('&N' EQ '').SKPEQU
&N       EQU   *
.SKPEQU  ANOP
         AIF   ('&SYSLIST(1)' EQ 'SYMBOLS').SYMBOLS
         LCLA  &TAB(64)
&TAB(1)  SETA  X'40',X'C1',X'C2',X'C3',X'C4',X'C5',X'C6',X'C7',        X
               X'C8',X'C9',X'4A',X'4B',X'4C',X'4D',X'4E',X'4F',        X
               X'50',X'D1',X'D2',X'D3',X'D4',X'D5',X'D6',X'D7',        X
               X'D8',X'D9',X'5A',X'5B',X'5C',X'5D',X'5E',X'5F',        X
               X'60',X'61',X'E2',X'E3',X'E4',X'E5',X'E6',X'E7', RPI572 X
               X'E8',X'E9',X'6A',X'6B',X'6C',X'6D',X'6E',X'6F',        X
               X'F0',X'F1',X'F2',X'F3',X'F4',X'F5',X'F6',X'F7',        X
               X'F8',X'F9',X'7A',X'7B',X'7C',X'7D',X'7E',X'7F'
&NP      SETA  N'&SYSLIST
&OPS     SETC  ''
.LOOP1   ANOP
&I       SETA  &I+1
         AIF   (&I GT &NP).EOF
&NPS     SETA  N'&SYSLIST(&I)
         AIF   (&NPS EQ 1).GENONE
         AIF   ('&OPS' EQ '').FLUSH1
&OPS     SETC  '&OPS'(2,K'&OPS-1)
         DC    AL1(&OPS)
&OPS     SETC  ''
.FLUSH1  ANOP
         AIF   ('&SYSLIST(&I,1)' EQ 'SBA').GENSBA
         AIF   ('&SYSLIST(&I,1)' EQ 'RA').GENRA
&J       SETA  0
.LOOP2   ANOP
&J       SETA  &J+1
         AIF   (&J LE &NPS).NEXT
         AIF   ('&OPS' EQ '').LOOP1
&OPS     SETC  '&OPS'(2,K'&OPS-1)
         DC    AL1(&OPS)
&OPS     SETC  ''
         AGO   .LOOP1
.NEXT    ANOP
         AIF   ('&SYSLIST(&I,&J)'(K'&SYSLIST(&I,&J),1) EQ '''').GENLITN
         AIF   ('&SYSLIST(&I,&J)'(K'&SYSLIST(&I,&J),1) EQ ')').GENLITN
&OPS     SETC  '&OPS,&SYSLIST(&I,&J)'
         AGO   .LOOP2
.GENLITN ANOP
         AIF   ('&OPS' EQ '').GENLITN1
&OPS     SETC  '&OPS'(2,K'&OPS-1)
         DC    AL1(&OPS)
&OPS     SETC  ''
.GENLITN1 ANOP
         DC    &SYSLIST(&I,&J)
         AGO   .LOOP2
.EOF     ANOP
         AIF   ('&OPS' EQ '').SKPDC
&OPS     SETC  '&OPS'(2,K'&OPS-1)
         DC    AL1(&OPS)
.SKPDC   ANOP
         MEXIT
.GENONE  ANOP
         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').GENLIT1
         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ ')').GENLIT1
&OPS     SETC  '&OPS,&SYSLIST(&I)'
         AGO   .LOOP1
.GENLIT1 ANOP
         AIF   ('&OPS' EQ '').GENLIT11
&OPS     SETC  '&OPS'(2,K'&OPS-1)
         DC    AL1(&OPS)
&OPS     SETC  ''
.GENLIT11 ANOP
         DC    &SYSLIST(&I)
         AGO   .LOOP1
.GENSBA  ANOP
         AIF   (N'&SYSLIST(&I) NE 3).ERR1
&ROW     SETA  &SYSLIST(&I,2)-1
&COL     SETA  &SYSLIST(&I,3)-1
         AIF   (&ROW LT 0 OR &ROW GT 23).ERR2
         AIF   (&COL LT 0 OR &COL GT 79).ERR3
&OFFSET  SETA  &ROW*80+&COL
&SBA1    SETA  &OFFSET/64
&SBA2    SETA  &OFFSET-&SBA1*64
&OPS     SETC  '&OPS,SBA,&TAB(&SBA1+1),&TAB(&SBA2+1)'
         AGO   .LOOP1
.GENRA   ANOP
         AIF   (N'&SYSLIST(&I) NE 4).ERR1
&ROW     SETA  &SYSLIST(&I,2)-1
&COL     SETA  &SYSLIST(&I,3)-1
         AIF   (&ROW LT 0 OR &ROW GT 23).ERR2
         AIF   (&COL LT 0 OR &COL GT 79).ERR3
&OFFSET  SETA  &ROW*80+&COL
&SBA1    SETA  &OFFSET/64
&SBA2    SETA  &OFFSET-&SBA1*64
&OPS     SETC  '&OPS,RA,&TAB(&SBA1+1),&TAB(&SBA2+1),&SYSLIST(&I,4)'
         AGO   .LOOP1
.SYMBOLS ANOP
*
* TN3270 CALL OPTIONS FROM TOP 16 BITS OF FIRST WORD OF PARMLIST
*
TGET_EDIT_WAIT   EQU X'80' READ,EDIT,WAIT FOR TN3270 DEVICE
TGET_EDIT_NOWAIT EQU X'90' READ,EDIT,WAIT FOR TN3270 DEVICE
TGET_ASIS_WAIT   EQU X'81' READ,ASIS,WAIT FOR TN3270 DEVICE
TGET_ASIS_NOWAIT EQU X'91' READ,ASIS,NOWAIT FOR TN3270 DEVICE
TPUT_EDIT        EQU X'00' WRITE,FULLSCN  FOR 3270 DEVICE
TPUT_ASIS        EQU X'01' WRITE,FULLSCN  FOR 3270 DEVICE
TPUT_FULLSCR     EQU X'03' WRITE,FULLSCN  FOR 3270 DEVICE
*
* TN3270 DATA STREAM PREFIX CONTROL CODES
*
ESC      EQU   X'27'       ESCAPE (OPTIONAL FOLLOWED BY WRT,WCC)
WRT      EQU   X'F1'       WRITE
WRT_EW   EQU   X'F5'       ERASE WRITE
WRT_EWA  EQU   X'7E'       ERASE WRITE ALTERNATE
WRT_EAU  EQU   X'6F'       ERASE ALL UNPROTECTED FIELDS RPI 628
WCC_BKD  EQU   X'C7'       WCC BEEP, RESET KBD, RESET MDT
WCC_KD   EQU   X'C3'       WCC RESET KBD, RESET MDT
*
* TN3270 DATA STREAM ORDERS
*
PT       EQU   X'05'       PROGRAM TAB (ADVANCE TO NEXT UNPROT FIELD)
GE       EQU   X'08'       GRAPHIC ESCAPE (REPLACE CHAR FROM APL TAB)
SBA      EQU   X'11'       SET BUFFER ADDRESS (2 ADDR BYTES)
SF       EQU   X'1D'       START FIELD        (1 - ATTRIBUTE BYTE)
EUA      EQU   X'12'       ERASE UNPROTECTED FIELDS TO (2 ADDR BYTES)
IC       EQU   X'13'       INSERT CURSOR AT CURRENT SBA
SFE      EQU   X'29'       START EXTENDED FIELD (COUNT,(ATT_TYPE,ATT))
RA       EQU   X'3C'       REPEAT TO ADDR (2 ADDR BYTES, REPEAT CHAR)
*
* TN3270 KEYBOARD INPUT AID CONTROL CODES
*
NOAID    EQU   X'60'       NO AID AVAILABLE
ENTER    EQU   X'7D'       ENTER KEY
PF1      EQU   X'F1'       PROGRAM FUNCTION KEY 1
PF2      EQU   X'F2'       PROGRAM FUNCTION KEY 2
PF3      EQU   X'F3'       PROGRAM FUNCTION KEY 3
PF4      EQU   X'F4'       PROGRAM FUNCTION KEY 4
PF5      EQU   X'F5'       PROGRAM FUNCTION KEY 5
PF6      EQU   X'F6'       PROGRAM FUNCTION KEY 6
PF7      EQU   X'F7'       PROGRAM FUNCTION KEY 7
PF8      EQU   X'F8'       PROGRAM FUNCTION KEY 8
PF9      EQU   X'F9'       PROGRAM FUNCTION KEY 9
PF10     EQU   X'7A'       PROGRAM FUNCTION KEY 10
PF11     EQU   X'7B'       PROGRAM FUNCTION KEY 11
PF12     EQU   X'7C'       PROGRAM FUNCTION KEY 12
PF13     EQU   X'C1'       PROGRAM FUNCTION KEY 13 (CTRL-ALT F1-F12)
PF14     EQU   X'C2'       PROGRAM FUNCTION KEY 14 (CTRL-ALT F1-F12)
PF15     EQU   X'C3'       PROGRAM FUNCTION KEY 15 (CTRL-ALT F1-F12)
PF16     EQU   X'C4'       PROGRAM FUNCTION KEY 16 (CTRL-ALT F1-F12)
PF17     EQU   X'C5'       PROGRAM FUNCTION KEY 17 (CTRL-ALT F1-F12)
PF18     EQU   X'C6'       PROGRAM FUNCTION KEY 18 (CTRL-ALT F1-F12)
PF19     EQU   X'C7'       PROGRAM FUNCTION KEY 19 (CTRL-ALT F1-F12)
PF20     EQU   X'C8'       PROGRAM FUNCTION KEY 20 (CTRL-ALT F1-F12)
PF21     EQU   X'C9'       PROGRAM FUNCTION KEY 21 (CTRL-ALT F1-F12)
PF22     EQU   X'4A'       PROGRAM FUNCTION KEY 22 (CTRL-ALT F1-F12)
PF23     EQU   X'4B'       PROGRAM FUNCTION KEY 23 (CTRL-ALT F1-F12)
PF24     EQU   X'4C'       PROGRAM FUNCTION KEY 24 (CTRL-ALT F1-F12)
PA1      EQU   X'6C'       PROGRAM ATTENTION 1     (CTRL-F1)
PA2      EQU   X'6E'       PROGRAM ATTENTION 2     (CTRL-F2)
PA3      EQU   X'6B'       PROGRAM ATTENTION 3     (CTRL-F3)
CLEAR    EQU   X'6D'       CLEAR SCREEN            (CTRL-C)
*
* LOCAL 3270 KEYBOARD COMMANDS - RPI 628 (SEE GZ390.JAVA)
* (THESE KEYSTROKES ONLY CHANGE TN3270 BUFFER SO NO CODE ASSIGNED)
*
* EEOF - ERASE TO END OF FIELD   (CTRL-F6)
* EINP - ERASE INPUT             (CTRL-F7)
*
* TN3270 ATTRIBUTE BYTES
*
*  BIT 0-1 CHECKSUM
*  BIT 2   PROTECTED FIELD
*  BIT 3   NUMBERIC  FIELD
*  BIT 4-5 FIELD DISPLAY
*           00=NORMAL INTENSITY
*           01=NORMAL INTENSITY PLUS LIGHT PEN
*           10=HIGH   INTENSITY NO LIGHT PEN
*           11=NON DISPLAY USED FOR HIDDEN FIELDS
*
*                EBCDIC CHAR 6bit RPI 572 See 3270 Pgmr Ref Appendix C
ATT_PAH     EQU X'F8'  '8'  38   PROTECTED HIGH INTENSITY TEXT
ATT_PND     EQU X'6C'  '%"  3C   PROTECTED NON-DISPLAY
ATT_PA      EQU X'F0'  '0'  30   PROTECTED NORMAL TEXT
ATT_UA      EQU X'40'  ' '  00   UNPROTECTED ALPHA INPUT FIELD
ATT_UN      EQU X'50'  '&'  10   UNPROTECTED NUMERIC INPUT FIELD
ATT_UND     EQU X'4C'  '<'  0C   UNPROTECTED NON-DISPLAY
ATT_PAH_MDT EQU X'F9'  '9'  39   PROTECTED HIGH INTENSITY TEXT, MDT
ATT_PA_MDT  EQU X'F1'  '1'  31   PROTECTED NORMAL TEXT, MDT
ATT_UA_MDT  EQU X'C1'  'A'  01   UNPROTECTED ALPHA INPUT FIELD, MDT
ATT_UN_MDT  EQU X'D1'  'J'  11   UNPROTECTED NUMERIC INPUT FIELD, MDT
*
* SFE ENTENDED ATTRIBUTE TYPE PREFIXES
*
SFE_BFA  EQU   X'C0'       BASIC FIELD ATTRIBUTE
SFE_HL   EQU   X'41'       EXTENDED HIGHLIGHTING
SFE_COLOR EQU  X'42'       COLOR
SFE_DEFAULT   EQU X'00'
SFE_BLUE      EQU X'F1'
SFE_RED       EQU X'F2'
SFE_PINK      EQU X'F3'
SFE_GREEN     EQU X'F4'
SFE_TURQUOISE EQU X'F5'
SFE_YELLOW    EQU X'F6'
SFE_WHITE     EQU X'F7'
         MEXIT
.ERR1    MNOTE 12,'TN3270 SBA REQUIRES ROW AND COLUMN SUBLIST'
         MEXIT
.ERR2    MNOTE 12,'TN3270 SBA ROW MUST BE 1 TO 24'
         MEXIT
.ERR3    MNOTE 12,'TN3270 SBA COLUMN MUST 1 TO 80'
         MEXIT
         MEND

./ ADD NAME=TPUT     0100-14178-14178-0013-00139-00139-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/30/05                                                 *
.*********************************************************************
.* 12/11/05 RPI47 - add TGET/TPUT support for GUI window
.* 12/16/05 RPI47 - add TGET/TPUT extension for literal edit msg
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 02/21/06 RPI211 MAKE TGET/TPUT MAINFRAME COMPATIBLE AT SVC LEVEL
.* 05/05/06 RPI308 CORRECT BUT IN .ASIS CODE FOUND DEBUGGING TESTCIC1
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.*
.* TPUT BUFFER,LBUFFER,OPTIONS
.*
.*     BUFFER  - RX or reg pointer to TN3290 data stream buffer
.*     LBUFFER - absolute value or reg length of buffer
.*     OPTIONS - the follwing options may be coded:
.*                 EDIT    - write text only and add cursor control
.*                 NOEDIT  - write text as is with cursor control
.*                 WAIT    - wait for output to be moved to buffer
.*                 NOWAIT  - return with R15=4 if no buffer avail.
.*                 ASIS    - write text as is with cursor control
.*                 CONTROL - non text (bell, reset kb, etc.)
.*                 NOHOLD  - don't wait for buffer transmission
.*                 HOLD    - wait until buffer is transmitted
.*                 NOBREAK - wait for input to be sent before write
.*                 BREAKIN - write now and discard input in process
.*                 FULLSCR - write 3270 data stream with no changes
.*                 R       - all options set in regstier 1
.*
.* TPUT (R0),(R1),R may to coded to pass all parms via registers
.*
.* Register input:
.*
.* R0LH = ASID (NOT USED)
.* R0LL = BUFFER LENGTH
.* R1   = LOW 24 BIT BUFFER ADDRESS (RMODE24 REQUIRED)
.* R1   = FLAGS IN HIGH BYTE
.*           X'80' - 1=TGET 0=TPUT
.*           X'40' - USERID IN R15 (NOT USED)
.*           X'20' - LOWP PROCESSING REQUIRED (NOT USED)
.*           X'10' - 1=NOWAIT 0=WAIT
.*           X'08' - 1=HOLD 0=NOHOLD
.*           X'04' - 1=BREAKIN 0=NOBREAKIN
.*           X'03' - 00=EDIT, 01=ASIS, 10=CONTROL, 11=FULLSCR
.*********************************************************************
&N       TPUT  &BUFF,                                                  X
               &LBUFF,                                                 X
               &MF=I      NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   ('&BUFF'(1,1) EQ '(').RECREG
         LA    1,&BUFF
         AGO   .CHKLEN
.RECREG  ANOP
         ZOPTLR 1,&BUFF(1)
.CHKLEN  ANOP
         AIF   ('&LBUFF'(1,1) EQ '(').LENREG
         LA    0,&LBUFF
         AGO   .SETOPT
.LENREG  ANOP
         AIF   (&LBUFF(1) NE 1).LENREGOK
         MNOTE 12,'TPUT INVALID LENGTH REGISTER - &LBUFF(1)'
.LENREGOK ANOP
         ZOPTLR 0,&LBUFF(1)
.SETOPT  ANOP
&OP      SETC  '0'  X'80' 1=TGET, 0=TPUT
&USERID  SETC  '0'  X'40' 0=NO USERID IN R15    (NOT USED)
&LOWP    SETC  '0'  X'20' 0=LOWP                (NOT USED)
&WAIT    SETC  '0'  X'10' 0=WAIT, 1=NOWAIT
&HOLD    SETC  '0'  X'08' 0=NOHOLD, 1=HOLD      (NOT USED)
&BREAKIN SETC  '0'  X'04' 0=NOBREAK, 1=BREANKIN
&TYPE    SETC  '00' X'03' 00=EDIT, 01=ASIS, 10=CONTROL, 11=FULLSCR
.CHKOPT  ANOP
&NP      SETA  N'&SYSLIST
         AIF   (&NP GE 3 AND '&SYSLIST(3)' EQ 'R').SVC USER REG PARMS
&I       SETA  2
.OPTLOOP ANOP
&I       SETA  &I+1
         AIF   (&I GT &NP).OPTEND
         AIF   ('&SYSLIST(&I)' EQ 'EDIT').EDIT
         AIF   ('&SYSLIST(&I)' EQ 'NOEDIT').NOEDIT
         AIF   ('&SYSLIST(&I)' EQ 'ASIS').ASIS
         AIF   ('&SYSLIST(&I)' EQ 'WAIT').WAIT
         AIF   ('&SYSLIST(&I)' EQ 'NOWAIT').NOWAIT
         AIF   ('&SYSLIST(&I)' EQ 'CONTROL').CONTROL
         AIF   ('&SYSLIST(&I)' EQ 'HOLD').HOLD
         AIF   ('&SYSLIST(&I)' EQ 'NOHOLD').NOHOLD
         AIF   ('&SYSLIST(&I)' EQ 'BREAKIN').BREAKIN
         AIF   ('&SYSLIST(&I)' EQ 'NOBREAK').NOBREAK
         AIF   ('&SYSLIST(&I)' EQ 'FULLSCR').FULLSCR
         MNOTE 12,'TPUT INVALID OPTION - &SYSLIST(&I)'
         AGO   .OPTLOOP
.EDIT    ANOP
&TYPE    SETC  '00' X'03' 00=EDIT
         AGO   .OPTLOOP
.NOEDIT  ANOP  SAME AS ASIS
.ASIS    ANOP
&TYPE    SETC  '01' X'03'  01=ASIS  RPI 308
         AGO   .OPTLOOP
.WAIT    ANOP
&WAIT    SETC  '0' X'10'  0=WAIT
         AGO   .OPTLOOP
.NOWAIT  ANOP
&WAIT    SETC  '1' X'10'  1=NOWAIT
         AGO   .OPTLOOP
.CONTROL ANOP
&TYPE    SETC  '10' X'03' 10=CONTROL (NON TEXT - BELL, KB RESET)
         AGO   .OPTLOOP
.HOLD    ANOP
&HOLD    SETC  '1' X'08' 1=HOLD UNTIL BUFFER FILLED
         AGO   .OPTLOOP
.NOHOLD  ANOP
&HOLD    SETC  '0' X'08' 1=HOLD UNTIL BUFFER FILLED
         AGO   .OPTLOOP
.BREAKIN ANOP
&BREAK   SETC  '0' X'04' 0=NOBREAK
         AGO   .OPTLOOP
.NOBREAK ANOP
&BREAK   SETC  '1' X'04' 1=BREAKIN
         AGO   .OPTLOOP
.FULLSCR ANOP
&TYPE    SETC  '11' X'03' 11=FULLSCR
         AGO   .OPTLOOP
.OPTEND  ANOP
         ICM   1,8,=B'&OP&USERID&LOWP&WAIT&HOLD&BREAKIN&TYPE'
.SVC     ANOP
         SVC   93 R0=(ASID,LENGTH) R1=(FLAGS,ADDR)
         MEXIT
.ERR1    MNOTE 12,'TPUT MF= NOT SUPPORTED'
         MEND
./ ADD NAME=TTIMER   0100-14178-14178-0013-00065-00065-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/23/05                                                 *
.*********************************************************************
.* 04/23/06 RPI 279 - add TTIMER to test or cancel STIMER REAL
.* 09/19/06 RPI 452 - return time for CANCEL,TU OR CANCEL,MIC,ADDR
.* 10/07/06 RPI 472 - set TYPE=TU for default on CANCEL
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       TTIMER &CANCEL,   CANCEL TTIMER INTERVAL IF DEFINED           X
               &TYPE,      TU (DEFAULT RETURN IN R0) OR MIC,MICADDR    X
               &ADDR,      DOUBLE WORD TO STORE MIC TIME REMAINING     X
               &ERRET=,    IGNORE                                      X
               &MF=I        NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR2
         AIF   ('&CANCEL' EQ 'CANCEL').CANCEL
         AIF   ('&TYPE' EQ '').TU
         AIF   ('&TYPE' EQ 'TU').TU
         AIF   ('&TYPE' EQ 'MIC').MIC
         AGO   .ERR3
.CANCEL  ANOP
         AIF   ('&TYPE' EQ '').CAN_TU      RPI 472
         AIF   ('&TYPE' EQ 'TU').CAN_TU
         AIF   ('&TYPE' EQ 'MIC').CAN_MIC
         AGO   .ERR3
.CAN_TU  ANOP
         LA    0,B'10' CANCEL, TU
         AGO   .SVC
.CAN_MIC ANOP
         LA    0,B'11' CANCEL, MIC'
         AIF   ('&ADDR' EQ '').ERR1
         AIF   ('&ADDR'(1,1) EQ '(').REGADDR
         LA    1,&ADDR
         AGO   .SVC
.TU      ANOP
         LA    0,B'00' NO CANCEL, TU
         AGO   .SVC
.MIC     ANOP
         LA    0,B'01' NO CANCEL, MIC
         AIF   ('&ADDR' EQ '').ERR1
         AIF   ('&ADDR'(1,1) EQ '(').REGADDR
         LA    1,&ADDR
         AGO   .SVC
.REGADDR ANOP
         ZOPTLR 1,&ADDR(1)
.SVC     ANOP
         SVC   X'2E' TTIMER (R0 BIT0=MIC BIT1=CAN, R1=A(MIC ADDR)
         MEXIT
.ERR1    MNOTE 12,'TTIMER MIC REQUIRES DOUBLE WORD ADDRESS PARM'
         MEXIT
.ERR2    MNOTE 12,'TTIMER MF= NOT SUPPORTED'
         MEXIT
.ERR3    MNOTE 12,'TTIMER - INVALID TYPE TU OR MIC - &TYPE'
         MEXIT
         MEND

./ ADD NAME=VCDTD    0100-14178-14178-0013-00110-00110-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 07/27/07                                                 *
.*********************************************************************
.* 07/27/07 RPI INITIAL CODING
.* 08/03/07 RPI 668 VCDTTIOT TABLE INDEX AFTER LOADING
.* 08/06/07 RPI 668 VCDTPATH ADDR KSDS ALT PATH IHAAIX SECTION
.* 09/03/07 RPI 681 EXPAND TO IHAVCDT, IHACLR, IHAAIX, IHAPTH
.* 09/23/07 RPI 704 ADD VCLRCI OPTIONAL CI SIZE TO SUPPORT LINEAR
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         VCDTD
.*
.* IF VCDTD ALREADY DEFINED EXIT NOW
.*
         GBLB  &Z390_VCDT
         GBLC  &Z390_VCDT_NAME,&Z390_VCDT_TYPE
         AIF   (&Z390_VCDT).EXIT
&Z390_VCDT      SETB 1
&Z390_VCDT_NAME SETC '&SYSLOC'
&Z390_VCDT_TYPE SETC '&SYSSTYP'
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'VCDTD UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
*
* IHAVCDT VSAM CATALOG DEFINITION TABLE(vcdt) DSECT
*
IHAVCDT  DSECT
VCDTID   DS    CL4   C'VCDT' ID
VCDTNAME DS    CL8   NAME OF VSAM CATALOG
VCDTCLRT DS    F     TOTAL CLR BASE CLUSTERS
VCDTCLRA DS    A     ADDR  CLR BASE CLUSTER TABLE
VCDTAIXT DS    F     TOTAL AIX ALTERNATE INDEXES
VCDTAIXA DS    A     ADDR  AIX ALTERNATE INDEXES
VCDTPTHT DS    F     TOTAL PTH PATHS
VCDTPTHA DS    A     ADDR  PTH PATH TABLE
VCDTDCBA DS    A     ADDR  MODEL DCB FOR VES/VX0/VXN ACCESS
*
* IHAVCLR VSAM BASE CLUSTER DSECT
*
IHAVCLR  DSECT
VCLRID   DS    CL4   ID C'VCLR'
VCLRNAME DS    CL8   NAME OF BASE CLUSTER
VCLRTYPE DS    CL4   TYPE OF BASE CLUSTER (ESDS/RRDS/KSDS/LDS)
VCLRFLAG DS    0F    OPTION FLAGS
VCLRFLG1 DS    X     VCDT OPTION BYTE 1
VCLRVREC EQU   X'80' RECFM=V VARIABLE LENGTH VS FIXED
VCLRRUSE EQU   X'40' REUSE OPTION RESETS EOF TO 0 AT ACB OPEN
VCLRKSDS EQU   X'08' KSDS KEY SEQUENCED (DEF) VIA VXN INDEXES
VCLRRRDS EQU   X'04' RRDS RELATIVE RECORD     VIA VX0 INDEX
VCLRESDS EQU   X'02' ESDS ENTRY SEQUENCED     VIA VX0 INDEX
VCLRLDS  EQU   X'01' LDS  LINEAR CI SEQUENCE  VIA VX0 INDEX
VCLRFLG2 DS    X     VCDT OPTION BYTE 2
VCLRFLG3 DS    X     VCDT OPTION BYTE 3
VCLRFLG4 DS    X     VCDT OPTION BYTE 4
VCLRLAVG DS    F     AVG RECORD LENGTH FOR VREC
VCLRLREC DS    F     MAX RECORD LENGTH (EXCLUDES 4 BYTE VREC LENGTH)
VCLRKLEN DS    F     KSDS PRIMARY KEY LENGTH
VCLRKOFF DS    F     KSDS PRIMARY KEY OFFSET
VCLRVESA DS    A     ADDR CLR VES DATA  OPTIONAL DSNAME (NAME.VES)
VCLRVX0A DS    A     ADDR CLR VX0 INDEX OPTIONAL DSNAME (NAME.VX0)
VCLRAIXN DS    F     NUMBER OF AIX'S WITH UPGRADE FOR THIS CLUSTER
VCLRAIXA DS    A     ADDR AIX UPGRADE TABLE OF VAIX ADDRESSES
VCLRCI   DS    A     OPTIONAL CI SIZE TO SUPPORT LINEAR ACCESS
VCLRLEN  EQU   *-IHAVCLR
*
* IHAVAIX ALTERNATE INDEX DSECT
*
IHAVAIX  DSECT
VAIXID   DS    CL4   ID C'VAIX'
VAIXNAME DS    CL8   NAME OF ALTERNATE INDEX
VAIXRELN DS    CL8   NAME OF RELATED VCLR BASE CLUSTER
VAIXFLAG DS    0F    OPTION FLAGS
VAIXFLG1 DS    X     OPTION BYTE 1
VAIXRUSE EQU   X'80' REUSE OPTION RESETS EOF TO 0 AT ACB OPEN
VAIXUKEY EQU   X'40' INFORCE UNIQUE KSDS KEYS
VAIXUAIX EQU   X'20' UPGRADE AIX ON BASE CLUSTER CHANGES
VAIXFLG2 DS    X     OPTION BYTE 2
VAIXFLG3 DS    X     OPTION BYTE 3
VAIXFLG4 DS    X     OPTION BYTE 4
VAIXKLEN DS    F     KSDS AIX KEY LENGTH
VAIXKOFF DS    F     KSDS AIX KEY OFFSET
VAIXVXNA DS    A     ADDR AIX VXN OPTIONAL DSNAME (DEF. NAME.VXN)
VAIXRELA DS    A     ADDR RELATED VCLR BASE CLUSTER
VAIXLEN  EQU   *-IHAVAIX
*
* IHAVPTH PATH DSECT
*
IHAVPTH  DSECT
VPTHID   DS    CL4 ID C'VPTH'
VPTHNAME DS    CL8 NAME OF PATH
VPTHENTN DS    CL8   NAME OF BASE CLUSTER OR ALTERNATE INDEX ENTRY
VPTHFLAG DS    0F    OPTION FLAGS
VPTHFLG1 DS    X     OPTION BYTE 1
VPTHAIXP EQU   X'80' ENTRY IS AIX PATH VS ALIAS CLUSTER NAME
VPTHAIXU EQU   X'40' UPDATE ALL UPGRADE AIX'S ON BASE CLUSTER CHANGES
VPTHFLG2 DS    X     OPTION BYTE 2
VPTHFLG3 DS    X     OPTION BYTE 3
VPTHFLG4 DS    X     OPTION BYTE 4
VPTHENTA DS    A     ADDR OF ENTRY VAIX OR VCLR CATALOG ENTRY
VPTHLEN  EQU   *-IHAVPTH
         AIF   ('&Z390_VCDT_NAME' EQ '' OR '&Z390_VCDT_TYPE' EQ '').EXIX
               T
&Z390_VCDT_NAME &Z390_VCDT_TYPE
.EXIT    ANOP
         MEND
./ ADD NAME=WAIT     0100-14178-14178-0013-00069-00069-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/28/05                                                 *
.*********************************************************************
.*
.*  WAIT ECB=ecb
.*
.*
.*********************************************************************
.* 10/20/05 RP47 - add WTOR as part of first GUAM release in v1008
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 04/10/06 RPI244 IGNORE LONG=, LINKAGE=, RELATED=, SUPPORT NUM
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       WAIT  &NUM,       EVENT COUNT (DEFAULT 1)                     X
               &ECB=,      ECB ADDRESS                                 X
               &ECBLIST=,  ECB ADDRESS LIST                            X
               &LONG=,     IGNORE                                      X
               &LINKAGE=,  IGNORE                                      X
               &MF=I,      NOT SUPPORTED                               X
               &RELATED=   IGNORE
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   (N'&SYSLIST LE 1).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(2)'
         MEXIT
.NPOK    ANOP
         AIF   ('&ECB' EQ '').CHKLIST
         SR    0,0
         AIF   ('&NUM' EQ '' OR '&NUM' EQ 1).CHKECB
         MNOTE 12,'WAIT COUNT INVALID FOR ECB= ONLY 1 SUPPORTED - &NUM'
         MEXIT
.CHKECB  ANOP
         AIF   ('&ECB'(1,1) EQ '(').ECBREG
         LA    1,&ECB
         AGO   .SVC
.ECBREG  ANOP
         ZOPTLR 1,&ECB(1)
         AGO   .SVC
.CHKLIST ANOP
         AIF   ('&ECBLIST' EQ '').ERR2
         AIF   ('&NUM' EQ '').NUM1
         LA    0,&NUM
         AGO   .CHKREG
.NUM1    ANOP
         LA    0,1
.CHKREG  ANOP
         AIF   ('&ECBLIST'(1,1) EQ '(').REGLIST
         LA    1,&ECBLIST
         AGO   .SVC
.REGLIST ANOP
         ZOPTLR 1,&ECBLIST(1)
.SVC     ANOP
         SVC   1 (R0=0,R1=A(ECB) OR (R0=NUM,R1=ECBLIST)
         MEXIT
.ERR1    MNOTE 12,'WAIT MF= NOT SUPPORTED'
         MEXIT
.ERR2    MNOTE 12,'WAIT ECB= OR ECBLIST= REQUIRED'
         MEXIT
         MEND

./ ADD NAME=WHEN     0100-14178-14178-0013-00040-00040-00000-Z390MAC
         MACRO
.********************************************************************
.*             AUTHOR.   DON HIGGINS.
.*             DATE.     09/23/08.
.*             REMARKS.  ADD SPM MACROS FOR SELECT,WHEN,ENDSEL
.********************************************************************
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.********************************************************************
         WHEN  &VALUE
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'WHEN - MISSING SELECT'
               MEXIT
         AEND
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'SELECT')
               MNOTE 8,'WHEN - MISSING SELECT'
               MEXIT
         AEND
         AIF   (&ZSTR_LVL_BCNT(&ZSTR_LVL) GT 0)
         B     #@SEL_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E
#@SEL_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H
         AEND
         AIF   (N'&SYSLIST EQ 1)
               AIF ('&ZSTR_SEL_OP(&ZSTR_LVL)' EQ '')
                   MNOTE 8,'WHEN - MISSING COMPARE OPCODE'
                   MEXIT
               AEND
         &ZSTR_SEL_OP(&ZSTR_LVL) &ZSTR_SEL_FLD(&ZSTR_LVL),&VALUE
               :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA &ZSTR_LVL_BCNT(&ZSTR_LVLX
               )+1
         BC    15-&ZSTR_SEL_CMP(&ZSTR_LVL),#@SEL_&ZSTR_LVL_TCNT(&ZSTR_LX
               VL)_&ZSTR_LVL_BCNT(&ZSTR_LVL)
         AELSE
         &SYSLIST(1) &SYSLIST(2),&SYSLIST(4)
               :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA &ZSTR_LVL_BCNT(&ZSTR_LVLX
               )+1
         BC    15-&SYSLIST(3),#@SEL_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVLX
               _BCNT(&ZSTR_LVL)
         AEND
         MEND
./ ADD NAME=WRITE    0100-14178-14178-0013-00022-00022-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/15/08                                                 *
.*********************************************************************
.* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
.*********************************************************************
&N       WRITE &DECB,                                                  X
               &TYPE,                                                  X
               &DCB,                                                   X
               &AREA,                                                  X
               &LENGTH,                                                X
               &MF=I       NOT SUPPORTED
         AIF   ('&LENGTH' EQ '').PARM4
&N       ZWRITE &DECB,&TYPE,&DCB,&AREA,&LENGTH,MF=&MF
         MEXIT
.PARM4   ANOP
&N       ZWRITE &DECB,&TYPE,&DCB,&AREA,MF=&MF
         MEND
./ ADD NAME=WTO      0100-14178-14178-0013-00078-00078-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 10/21/05 RPI41  - add MF=L support
.* 11/05/05 RPI80  - add missing .ERR1 label
.* 12/02/05 RPI114 - fix to use more unique labels to avoid dup labels
.* 12/20/05 RPI143 - allow no pos parms for MF=
.* 01/05/06 RPI153 - remove duplicate label for MF=L
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 01/12/06 RPI151 CHANGE BAL TO BRAS FOR USE WITHOUT BASE REG
.* 04/10/06 RPI244 IGNORE KEYWORDS EXCEPT TEXT= UNSUPPORTED ERROR
.* 04/25/06 RPI290 ALWAYS GEN LABEL IF ANY, CHECK MF=
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
&N       WTO   &MSG,         'TEXT' OR TEXT= REQUIRED                  X
               &TEXT=,       MULTIPLE QUOTED TEXT ELSE ERROR           X
               &MF=I,        MF=(E,ADDR) OR MF=L DEFAULT IS STD.       X
               &CART=,       IGNORED                                   X
               &CONSID=,     IGNORED                                   X
               &CONSNAME=,   IGNORED                                   X
               &DESC=,       IGNORED                                   X
               &KEY=,        IGNORED                                   X
               &MCSFLAG=,    IGNORED                                   X
               &ROUTCDE=,    IGNORED                                   X
               &TOKEN=       IGNORED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   (N'&SYSLIST LE 1).NPOK
         MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(2)'
         MEXIT
.NPOK    ANOP
         AIF   ('&MF' NE 'I').MF
         AIF   ('&TEXT' NE '').ERR2
         AIF   ('&MSG' EQ '').ERR3
&MSGTEXT SETC  '&MSG'
         AIF   ('&MSG'(1,1) EQ '''').WTOMSG
         AIF   ('&MSG'(1,2) NE '(''').ERR2
&MSGTEXT SETC  '&MSG'(2,K'&MSG-2)
.WTOMSG  ANOP
         BRAS  1,*+(WTO#&SYSNDX._EOT-*+1)/2*2
         DC    AL2(WTO#&SYSNDX._EOT-*,0),C&MSGTEXT
WTO#&SYSNDX._EOT EQU *
         SVC   35
         MEXIT
.TEXT    ANOP
         AIF   ('&TEXT' EQ '').ERR3
.MF      ANOP
         AIF   ('&MF' EQ 'L').MFL
         AIF   ('&MF(1)' NE 'E').ERR1
         AIF   ('&MF(2)' EQ '').SVC
         AIF   ('&MF(2)'(1,1) EQ '(').MFEREG
         LA    1,&MF(2)
         AGO   .SVC
.MFEREG  ANOP
         ZOPTLR 1,&MF(2)
.SVC     ANOP
         SVC   35
         MEXIT
.MFL     ANOP
         DC    AL2(WTO#&SYSNDX._EOT-*,0),C&MSG
WTO#&SYSNDX._EOT EQU *
         MEXIT
.ERR1    MNOTE 8,'WTO UNDEFINED TYPE - &MF'
         MEXIT
.ERR2    MNOTE 8,'WTO TEXT OPTION NOT SUPPORTED'
         MEXIT
.ERR3    MNOTE 8,'WTO MISSING ''MSG'' OR TEXT=INED TYPE - &MF'
         MEND

./ ADD NAME=WTOR     0100-14178-14178-0013-00137-00137-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/28/05                                                 *
.*********************************************************************
.* 10/20/05 RPI  47  - add WTOR as part of first GUAM release in v1008
.* 12/02/05 RPI 114 - make wto label more unique to avoid duplicates
.* 01/09/06 RPI 163 SKIP LR FOR SAME REGISTER
.* 01/21/06 RPI 188 REQUIRE LENGTH IF REPLY REG FORM
.* 04/12/06 RPI 244 IGNORE UNUSED KW PARMS, MNOTE ERROR FOR TEXT=
.* 04/25/06 RPI 290 ALWAYS GEN LABEL IF ANY, CHECK MF=
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 02/06/09 RPI 992 add WTOR list and execute forms
.* 05/22/10 RPI 1120 clear high bits in replay address (was NIHH)
.*********************************************************************
.*
.*  WTOR - write to operator with reply (routed to GUAM window if
.*         GUI option active and copy of msg and reply to log)
.*
.*  WTOR   'msg',reply,reply_len,ecb
.*
.*         'msg' - text to be displayed prior to waiting for reply
.*         reply - rx label or (reg) pointing to reply field
.*         reply_len - length of reply field (omit to use rx length)
.*         ecb       - rx label or (reg) of 4 byte ECB which should be
.*                     zeros when WTOR issued.  Set to X'80000000'
.*                     while waiting for reply and X'40000000' when
.*                     reply complete.  Use WAIT ECB=ecb to wait for
.*                     reply posting.
.*  INPUT:
.*    R0  - REPLY FIELD ADDR
.*    R1  - WTO MSG ADDR WITH 4 BYTE PREFIX
.*    R14 - LENGTH OF REPLY FIELD
.*    R15 - ECB ADDR
.*********************************************************************
&N       WTOR  &MSG,         PROMPT MSG FOR REPLY                      X
               &REPLY,       REPLY ADDRESS                             X
               &REPLYLEN,    REPLY LENGTH                              X
               &ECB,         ECB POSTED WHEN REPLY READY               X
               &TEXT=,       NOT SUPPORTED                             X
               &MF=I,        LIMITED MF=L AND MF=(E,WTORL) RPI 992     X
               &CART=,       IGNORED                                   X
               &CONSID=,     IGNORED                                   X
               &CONSNAME=,   IGNORED                                   X
               &DESC=,       IGNORED                                   X
               &KEY=,        IGNORED                                   X
               &MCSFLAG=,    IGNORED                                   X
               &MSGTYPE=,    IGNORED                                   X
               &RPLYISUR=,   IGNORED                                   X
               &ROUTCDE=,    IGNORED                                   X
               &TOKEN=       IGNORED
         AIF   (N'&SYSLIST LE 4).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(5)'
         MEXIT
.NPOK    ANOP
         AIF   ('&TEXT' NE '').ERR1
         AIF   ('&MF'    EQ 'L').WTORLIST RPI 992
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF(1)' EQ 'E').WTOREXEC RPI 992
         AIF   ('&MF'    NE 'I').ERR2
         BAL   1,*+(WTOR#&SYSNDX._EOT-*+1)/2*2
         DC    AL2(WTOR#&SYSNDX._EOT-*,0),C&MSG
WTOR#&SYSNDX._EOT EQU *
         AIF   ('&REPLY'(1,1) EQ  '(').REPLY_REG
         LA    0,&REPLY
         AGO   .CHKLEN
.REPLY_REG ANOP
         ZOPTLR 0,&REPLY(1)
         AIF   ('&REPLYLEN' NE '').CHKLENREG
         MNOTE 12,'WTOR REPLY LENGTH REQUIRED'
         MEXIT
.CHKLEN  ANOP
         AIF   ('&REPLYLEN' EQ '').DEFLEN
.CHKLENREG ANOP
         AIF   ('&REPLYLEN'(1,1) EQ '(').LEN_REG
         LA    14,&REPLYLEN
         AGO   .CHKECB
.LEN_REG ANOP
         AIF   ('&REPLYLEN(1)' EQ '0' OR '&REPLYLEN(1)' EQ 'R0').ERR3
         ZOPTLR 14,&REPLYLEN(1)
         AGO   .CHKECB
.DEFLEN  ANOP
         LA    14,L'&REPLY
.CHKECB  ANOP
         AIF   ('&ECB'(1,1) EQ '(').ECBREG
         LA    15,&ECB
         AGO   .SVC
.ECBREG  ANOP
         ZOPTLR 15,&ECB(1)
.SVC     ANOP
         SVC   160 WTOR R1=MSG,R0=REPLY,R14=LEN,R15=ECB
         MEXIT
.********************************************************************
.* WTOR MF=L LIST FORM       RPI 992
.********************************************************************
.WTORLIST ANOP
&N       DS    0A
         DC    AL1(&REPLYLEN)  +00 REPLY LENGTH
         DC    AL3(&REPLY)     +01 REPLY ADDR (24 BIT)
         DC    A(&ECB)         +04 REPLY ECB ADDRESS
&LMSG    SETA  K'&MSG-2
         DC    AL2(&LMSG)      +08 LENGTH OF MSG
         DC    AL2(X'8020')    +0A WTOR MCS FLAGS (PRI CON,PGMR INFO)
         DC    C&MSG           +0C MESSAGE
         MEXIT
.********************************************************************
.* WTOR MF=(E,WTORLIST) EXEC FORM   RPI 992
.********************************************************************
.WTOREXEC ANOP
         AIF   ('&MF(2)'(1,1) EQ '(').WTOREXEC_REG
         LA    1,&MF(2)   R1=WTOR LIST ADDR
         AGO   .WTOREXEC_COM
.WTOREXEC_REG ANOP
         ZOPTLR 1,&MF(2,1) R1=WTOR LIST ADDR
.WTOREXEC_COM ANOP
         L     0,0(1)      R0 =REPLY FIELD ADDR (24B REQUIRES RMODE24)
         NILH  0,X'00FF'   TURN OFF HIGH BITS IN 24 BIT ADDR RPI 1120
         SR    14,14
         IC    14,0(1)     R14=REPLY LENGTH
         L     15,4(1)     R15=ECB ADDR
         LA    1,8(1)      R1 =MSG WITH 4 BYTE PREFIX AL2(LEN,FLAGS)
         AGO   .SVC
.ERR1    MNOTE 12,'WTOR TEXT= NOT SUPPORTED'
         MEXIT
.ERR2    MNOTE 12,'WTOR MF=E/L NOT SUPPORTED'
         MEXIT
.ERR3    MNOTE 12,'WTOR REPLY LENGTH REGISTER 0 NOT ALLOWED'
         MEXIT
         MEND

./ ADD NAME=XCTL     0100-14178-14178-0013-00137-00137-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 11/16/05 RPI95 - add XCTL support with DDNAME= and DSNAME=
.* 12/06/05 RPI118 - use SR vs LA, reg chk, drop BALR/USING, fix VL
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 04/12/06 RPI244 SUPPORT DE= SAME REGISTER
.* 04/25/06 RPI290 ALWAYS GEN LABEL IF ANY, CHECK MF=
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.* XCTL AND EXEC PGM VIA SVC 7 (DELETES CALLING PGM FROM MEMORY)
.*   R0  = ADDR PGM NAME (8 BYTES SPACE FILLED)
.*   R15 = 0    USE SYS390 DEFAULT PATH FROM EZ390 PARM
.*   R15 = ADDR DSNAME FILE SPEC IF HIGH BIT OFF (NULL OR DQ DELIMITED)
.*   R15 = ADDR DDNAME IF HIGH BIT ON (8 BYTES SPACE FILLED)
.* NOTES:
.*   1.  DSNAME OR DDNAME MAY BE 1 OR MORE DIRECTORY PATHS TO SEARCH
.*       OR THEY MAY BE PATH AND FILE NAME WHICH OVERRIDES EP/EPLOC
.*   2.  RETURN CODE SET BY CALLED PGM IF SUCCESSFUL
.*   3.  ABEND WITH S906 IF NOT FOUND
.*   4.  IF (REGS) ARE SPECIFIED, THEN R13 MUST BE SET TO SAVE AREA
.*********************************************************************
&N       XCTL  &REGS,         OPTIONAL (REG) OR (REGS) TO RESTORE      X
               &DDNAME=,      LOAD FROM DIR OR FILE DEFINED IN ENV.VAR X
               &DE=,          BLDL ENTRY                               X
               &DSNAME=,      LOAD FROM RX OR (REG) FILE SPEC          X
               &EP=,          PGMNAME 1-8 CHAR                         X
               &EPLOC=,       RX LABEL OR (REG) POINTER TO PGM FIELD   X
               &ERRET=,       NOT SUPPORTED                            X
               &MF=I,         NOT SUPPORTED                            X
               &PARAM=,       PARAMETER LIST                           X
               &VL=1          SET HIGH BIT IN LAST PARM ADDR
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   (N'&SYSLIST LE 1).NPOK
         MNOTE 12,'XCTL UNSUPPORTED OPERANDS - &SYSLIST(2)'
         MEXIT
.NPOK    ANOP
         AIF    ('&MF' NE 'I').ERR2
         AIF    ('&ERRET' NE '').ERR1
         AIF    ('&PARAM' EQ '').ENDPARM
         LA     1,=A&PARAM
         AIF    ('&VL' NE 1).ENDPARM
&OFF     SETA   N'&PARAM*4-4
         OI     &OFF.(1),X'80'
.ENDPARM ANOP
         AIF   ('&DE' NE '').DE
         AIF   ('&EP' NE '').EP
         AIF   ('&EPLOC' NE '').EPLOC
         SR    0,0
         AIF   ('&DDNAME' NE '' OR '&DSNAME' NE '').CHKDSN
         MNOTE 12,'XCTL REQUIRES EP, EPLOC, DDNAME, OR DSNAME'
.DE      ANOP
         AIF   ('&DE'(1,1) EQ '(').DEREG
         LA    0,&DE
         AGO   .DEADD
.DEREG ANOP
         ZOPTLR 0,&DE(1)
.DEADD   ANOP
         AHI   0,2
         AIF   ('&EP' EQ '' AND '&EPLOC' EQ '').CHKDSN
         MNOTE 12,'XCTL DE EP AND EPLOC ARE MUTUALLY EXCLUSIVE'
         MEXIT
         MEXIT
.EP      ANOP
         LA    0,=CL8'&EP'
         AGO   .CHKDSN
.EPLOC   ANOP
         AIF   ('&EPLOC'(1,1) EQ '(').EPLOCREG
         LA    0,&EPLOC
         AGO   .CHKDSN
.EPLOCREG ANOP
         AIF   ('&EPLOC(1)' EQ '1' OR '&EPLOC(1)' EQ 'R1').EPERR
         ZOPTLR 0,&EPLOC(1)
         AGO   .CHKDSN
.EPERR   ANOP
         MNOTE 12,'XCTL INVALID EPLOC REG'
         MEXIT
.CHKDSN  ANOP
         AIF   ('&DSNAME' EQ '').CHKDD
         AIF   ('&DDNAME' EQ '').DSNOK
         MNOTE 12,'DSNAME AND DDNAME ARE MUTUALLY EXCLUSIVE'
.DSNOK   ANOP
         AIF   ('&DSNAME'(1,1) EQ '(').DSNREG
         LA    15,&DSNAME
         AGO   .CHKRST
.DSNREG  ANOP
         AIF   ('&DSNAME(1)' LE '1' OR '&DSNAME(1)' EQ 'R1').DSNERR
         ZOPTLR 15,&DSNAME(1)
         AGO   .CHKRST
.DSNERR  ANOP
         MNOTE 12,'XCTL INVALID DSNAME REG'
         MEXIT
.CHKDD   ANOP
         AIF   ('&DDNAME' EQ '').DEFPATH
         AIF   ('&DDNAME'(1,1) EQ '(').DDREG
         LA    15,=CL8'&DDNAME'
         OILH  15,X'8000' DD VS DSN
         AGO   .CHKRST
.DDREG   ANOP
         AIF   ('&DDNAME(1)' LE '1' OR &DDNAME(1) EQ 'R1').DDERR
         ZOPTLR 15,&DDNAME(1)
.SKPLR1  ANOP
         OILH  15,X'8000' DD VS DSN
         AGO   .CHKRST
.DDERR   ANOP
         MNOTE 12,'XCTL INVALID DDNAME REG'
         MEXIT
.DEFPATH ANOP
         SR    15,15 USE DEFAULT SYS390 SEARCH
.CHKRST  ANOP
         AIF   ('&REGS' EQ '').SVC
&R1      SETA  &REGS(1)
&R2      SETA  &R1
         AIF   ('&REGS(2)' EQ '').R2OK
&R2      SETA  &REGS(2)
.R2OK    ANOP
         AIF   (&R1 GT &R2 OR &R1 LT 2 OR &R2 GT 12).REGERR
         RESTORE &REGS
.SVC     ANOP
         SVC    7 XCTL R0=A(PGM) R1-PARMS R15=DDNAME/DSNAME ADDR OR 0
         MEXIT
.REGERR  ANOP
         MNOTE 12,'XCTL RESTORE RANGE MUST BE 2-12'
         MEXIT
.ERR1    MNOTE 12,'XCTL ERRET= NOT SUPPORTED'
         MEXIT
.ERR2    MNOTE 12,'XCTL MF= NOT SUPPORTED'
         MEND
./ ADD NAME=XLATE    0100-14178-14178-0013-00040-00040-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* XLATE TRANSLATE AREA TO EBCDIC OR ASCII
.*********************************************************************
.* 01/09/06 RPI 163 SKIP LR FOR SAME REGISTER
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       XLATE &AREA,&LEN,&TO=
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   (N'&SYSLIST EQ 2).NPOK
.ERR     MNOTE 12,'XLATE REQUIRES AREA,LEN,TO=A/E'
         MEXIT
.NPOK    ANOP
         AIF   ('&AREA'(1,1) EQ '(').AREAREG
         LA    0,&AREA
         AGO   .CHKLEN
.AREAREG ANOP
         ZOPTLR 0,&AREA(1)
.CHKLEN  ANOP
         AIF   ('&LEN'(1,1) EQ '(').LENREG
         LA    1,&LEN
         AGO   .CHKTO
.LENREG  ANOP
         ZOPTLR 1,&LEN(1)
.CHKTO   ANOP
         AIF   ('&TO' EQ 'E').SVC
         AIF   ('&TO' NE 'A').ERR
         OILH  0,X'8000' HIGH ADDR BIT ON FOR EBCDIC TO ASCII
.SVC     ANOP
         SVC   X'67' TRANSLATE R0=AREA R1=LEN R0 HIGH BIT FOR E>A
         MEND
./ ADD NAME=YREGS    0100-14178-14178-0013-00019-00019-00000-Z390MAC
         MACRO
         YREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
./ ADD NAME=ZCALL    0100-14178-14178-0013-00142-00142-00000-Z390MAC
        MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI  27 - issue error for any undefined operands
.* 10/21/05 RPI  41 - add VL positional parm support
.* 12/12/05 RPI  18 - correct VL bit OI instrcution (missing .)
.* 01/09/06 RPI 163 - SKIP LR FOR SAME REGISTER
.* 04/12/06 RPI 244 - IGNORE NON CRITICAL KW PARMS
.* 04/12/06 RPI 322 - support VL option with MF=L
.* 07/22/06 RPI 381 - support register substitution of parametrs
.* 11/10/06 RPI 473 - correct macro bugs and update RT\TEST\TESTCAL1
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/06 RPI 833 add SETC quotes for HLASM compatibility
.* 11/08/08 RPI 942 check for (reg) parm conflict with R1, ZSTRMAC UPDT
.* 11/14/08 RPI 953 move CALL to ZCALL to share with other macro libs
.*********************************************************************
&N      ZCALL  &NAME,                                                  X
               &PARMS,                                                 X
               &VL,            SET END OF LIST HIGH BIT                X
               &ID=,           IGNORE                                  X
               &LINKINST=BALR,                                         X
               &MF=I           I/L/E FORMS SUPPORTED
         CNOP  0,4
         AIF   ('&N' NE '')
&N       DS    0F
         AEND
         AIF   (N'&SYSLIST GT 3)
               MNOTE 12,'CALL UNSUPPORTED OPERANDS - &SYSLIST(4)'
               MEXIT
         AEND
         :&NPARMS SETA N'&PARMS
         AIF   (&NPARMS EQ 0 AND '&VL' NE '')    RPI 473
               MNOTE 12,'CALL VL INVALID WHEN NO PARMS'
               MEXIT
         AEND
         AIF   ('&MF' EQ 'I')
               ACALL STD_FORM
         AELSEIF ('&MF' EQ 'L')
               ACALL LIST_FORM
         AELSEIF ('&MF(1)' EQ 'E')
               ACALL EXEC_FORM
         AELSE
               MNOTE 12,'CALL INVALID MF=&MF'
         AEND
         MEXIT
.*
.* STD FORM
.*
         AENTRY STD_FORM
       AIF    (&NPARMS NE 0)
         BRAS   1,*+4+&NPARMS*4
         DC     A&PARMS
                :&I SETA   1
                AWHILE (&I LE &NPARMS)
                    AIF ('&PARMS(&I)'(1,1) EQ '(')
                        :&OFF     SETA   &I*4-4
                        AIF    ('&PARMS(&I,1)' EQ 1                    X
                                OR '&PARMS(&I,1)' EQ 'R1')
                        MNOTE 8,'CALL (REG) TYPE PARM MUST BE (2)-(12)'
                        MEXIT
                        AEND
         ST     &PARMS(&I,1),&OFF.(1)
                    AEND
                    :&I SETA   &I+1
                AEND
                AIF    ('&VL' EQ 'VL')
                       :&OFF     SETA   N'&PARMS*4-4
         OI     &OFF.(1),X'80'
                AEND
       AEND
       AIF   ('&NAME' NE '')
             AIF ('&NAME'(1,1) NE '(')
         LRL    15,=V(&NAME)
             AELSE
         ZOPTLR 15,&NAME(1)
             AEND
       AEND
         &LINKINST 14,15
         AEND
.*
.* LIST FORM
.*
         AENTRY LIST_FORM
       AIF    ('&VL' NE 'VL')
         DC    A&PARMS
       AELSE
               :&I SETA 1
               AWHILE (&I LT &NPARMS)
         DC    A(&PARMS(&I))
                      :&I SETA  &I+1
               AEND
         DC    A(&PARMS(&I)+X'80000000')
       AEND
         AEND
.*
.* EXEC FORM
.*
         AENTRY EXEC_FORM
         AIF    ('&MF(2)' EQ '')   RPI 473
                MNOTE 12,'CALL EXEC FORM MISSING LIST ADDR'
                MEXIT
         AEND
       AIF    ('&MF(2)' NE '(')
         LA     1,&MF(2)
       AELSE
         ZOPTLR 1,&MF(2,1)
       AEND
       :&NPARMS  SETA   N'&PARMS
       AIF    (&NPARMS GT 0)
              :&EXOFF   SETA   0
              :&I       SETA   1
              AWHILE (&I LE &NPARMS)
                    :&EXPARM  SETC   '&PARMS(&I)'
                    AIF    ('&EXPARM'(1,1) NE '(')
         LA     0,&EXPARM
         ST     0,&EXOFF.(1)
                    AELSE
         ST     &EXPARM,&EXOFF.(1)   RPI 473
                    AEND
                    :&EXOFF   SETA   &EXOFF+4
                    :&I SETA &I+1
              AEND
              AIF  ('&VL' EQ 'VL' AND &EXOFF NE 0)   RPI 473
         OI     &EXOFF-4(1),X'80'
              AEND
       AEND
       AIF   ('&NAME' NE '')
             AIF ('&NAME'(1,1) NE '(')
         LRL    15,=V(&NAME)
             AELSE
         ZOPTLR 15,&NAME(1)
             AEND
       AEND
         &LINKINST 14,15
         AEND
         MEND
./ ADD NAME=ZCLOSE   0100-14178-14178-0013-00120-00120-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 11/13/05 RPI88 - correct error in checking for DCB register parm
.* 11/26/05 RPI112- check for invalid DCB RX form (reg) vs ((reg))
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 04/10/06 RPI244 support (reg) and ignore other keywords
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/03/07 RPI 668 check return code for each svc and exit if nz
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 10/14/07 RPI 718 ISSUE MNOTE ERR FOR NN OR RNN WITHOUT ((REG),OPT)
.* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 09/12/08 RPI 764 upgrade to ZSTRMAC and allow CLOSE (reg)
.* 04/22/09 RPI 1021 add MF=L/E and cleanup reg support
.* 05/19/09 RPI 1029 remove SPM macro code for compatibility
.* 05/28/09 RPI 1045 change to only assume reg form if (...)
.*********************************************************************
&N       ZCLOSE &DCBLIST, (DCB1,OPT1,DCB2,OPT2..) OR (DCB), DCB, ((r)) X
               &MODE=,   IGNORED AS IT WORKS IN EITHER MODE            X
               &MF=I,    NOT SUPPORTED                                 X
               &TYPE=    IGNORED
         AIF   (N'&SYSLIST GT 1)
               MNOTE 12,'CLOSE UNSUPPORTED OPERANDS - &SYSLIST(2)'
               MEXIT
         AEND
         :&NP  SETA  N'&DCBLIST
         AIF   ('&MF' EQ 'L')
.*
.* LIST FORM
.*
               AIF ('&N' NE '')
                   :&N       DS    0F
               AEND
               :&I SETA  1
               AWHILE (&I LE &NP)
                   :&DCB     SETC  '&DCBLIST(&I)'
                   :&OPTION  SETC  '&DCBLIST(&I+1)'
                   AIF ('&DCB'(1,1) EQ '(')  RPI 764 RPI 1045
                       MNOTE 8,'ZCLOSE REG FORM NOT ALLOWED'
                       MEXIT
                   AEND
                   AIF   ('&OPTION' NE '')
                         MNOTE 12,'CLOSE OPTION NOT SUPPORTED - &OPTIONX
               '
                         MEXIT
                   AEND
                   AIF   (&I+1 GE &NP)
                         :&VL SETC 'X''80000000''+'
                   AELSE
                         :&VL SETC ''
                   AEND
                   DC    A(&VL&DCB)
                   :&I SETA &I+2
               AEND
         AELSEIF ('&MF(1)' EQ 'E')
.*
.* EXEC FORM
.*
               AIF   ('&N' NE '')
                    :&N       DS    0H
               AEND
               AIF  ('&MF(2)'(1,1) EQ '(')
                    ZOPTLR 14,&MF(2)
               AELSE
                    LA     14,&MF(2)
               AEND
               B    ZCLOSE_DO_LOOP&SYSNDX
ZCLOSE_DO_UNTIL&SYSNDX DS 0H
               LTR  1,1
               BM   ZCLOSE_DO_EXIT&SYSNDX
               LTR  15,15
               BNZ  ZCLOSE_DO_EXIT&SYSNDX
ZCLOSE_DO_LOOP&SYSNDX DS 0H
                    L   1,0(14)
                    SVC 20
                    AHI 14,4
               B    ZCLOSE_DO_UNTIL&SYSNDX
ZCLOSE_DO_EXIT&SYSNDX DS 0H
         AELSEIF ('&MF(1)' EQ 'I')
.*
.* STD FORM
.*
               AIF ('&N' NE '')
                   :&N       DS    0H
               AEND
               :&I SETA  1
               AWHILE (&I LE &NP)
                   :&DCB     SETC  '&DCBLIST(&I)'
                   :&OPTION  SETC  '&DCBLIST(&I+1)'
                   AIF ('&DCB'(1,1) EQ '(')  RPI 764 TPI 1045
                       ZOPTLR 1,&DCB(1)
                   AELSE
                       LA     1,&DCB
                   AEND
                   AIF   ('&OPTION' NE '')
                         MNOTE 12,'CLOSE OPTION NOT SUPPORTED - &OPTION'
                         MEXIT
                   AEND
                   SVC   20 CLOSE R1=DCB/ACB
                   :&I SETA &I+2
                   AIF    (&I LE &NP)
                          LTR   15,15
                          BNZ   Z390_CLOSE_EXIT&SYSNDX RPI 668
                   AEND
               AEND
               AIF (&NP GT 2)
                   :Z390_CLOSE_EXIT&SYSNDX EQU *
               AEND
         AELSE
               MNOTE 12,'CLOSE MF=&MF NOT SUPPORTED'
               MEXIT
         AEND
         MEND
./ ADD NAME=ZCVTD    0100-14178-14178-0013-00073-00073-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/23/06                                                 *
.*********************************************************************
.* 04/23/06 RPI 286 - DEFINE ZCVT FOR Z390 CVT AT X'2000' IN MEMORY
.* 05/02/06 RPI 305 - ADD ZCVTEPIE AND ZCVTESTA CONTROL BLOCK AREAS
.* 05/05/06 RPI 308 - ADD ZCVTEIBP AND ZCVTCAP FOR CICS SUPPORT
.* 03/11/07 RPI 558 - ADD ZCVTVSE_COMRG COMMUNICATIONS AREA
.* 04/07/07 RPI 582 - SET ZCVT_PARMA TO ADDR OF ADDR OF ZCVT_PARM
.* 05/17/07 RPI 625 - SUPPORT LOCTR AS WELL AS CSECT/DSECT
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 06/23/08 RPI 845 change ZCVTESTA to ZCVTSDWA passed to ESTAE exit
.*********************************************************************
         ZCVTD
.*
.* IF ZCVTD ALREADY DEFINED EXIT NOW
.*
         GBLC  &Z390_ZCVTD
         AIF   ('&Z390_ZCVTD' NE '').EXIT
&Z390_ZCVTD SETC '&SYSLOC &SYSSTYP'
.*
.* EZ390 ZCVT DSECT - LOCATED AT X'2000' FOLLOWING PSA IN MEMORY
.*
ZCVT     EQU    X'2000'  ABS ADDR ZCVT
IHAZCVT  DSECT
         ORG    IHAZCVT+X'00'
ZCVTUPGM DS     CL8   390 USER PROGRAM NAME LOADED AT IPL
         ORG    IHAZCVT+X'08'
ZCVTIPLP DS     CL8   390 IPL PROGRAM SPECIFIED IN IPL(PGM) OPTION
         ORG    IHAZCVT+X'10'
ZCVTFQ24 DS     A     ADDRESS OF FIRST FQE FOR 24 BIT MEM AT X'10000'
         ORG    IHAZCVT+X'14'
ZCVTFQ31 DS     A     ADDRESS OF FIRST FQE FOR 31 BIT MEM AT X'1000000'
         ORG    IHAZCVT+X'18'
ZCVTEXIT DS     XL2   SVC 3 EXIT USED AS R14 EXIT AND STIMER EXIT
         ORG    IHAZCVT+X'1C'
ZCVTGECB DS     F     TGET ECB
         ORG    IHAZCVT+X'20'
ZCVTEIBP DS     A     CICS INTERFACE CONTROL BLOCK POINTER > DFHEIBLK
         ORG    IHAZCVT+X'24'
ZCVTCAP  DS     A     CICS COMMON AREA POINTER
         ORG    IHAZCVT+X'100'
ZCVTSAVE DS     18F   SAVE AREA USED TO INIT USER PGM R13
         ORG    IHAZCVT+X'200'
ZCVTSAV2 DS     18F   SAVE AREA FOR STIMER EXIT R13
         ORG    IHAZCVT+X'300'
ZCVTPARMA DS    A     ADDRESS OF ZCVT_PARM TO SET USER R1
ZCVTPARM DS     XL256 PARM AREA
         ORG    IHAZCVT+X'400'
ZCVTEPIE DS     XL256 RESERVED FOR ESPIE EPIE CB (SEE EPIED MACRO)
         ORG    IHAZCVT+X'500'
ZCVTSDWA DS     XL256 RESERVED FOR SDWA PASSED TO ESTAE IN R1 (IHASDWA)
         ORG    IHAZCVT+X'600'
ZCVT_COMRG DS XL1024 RESERVED FOR VSE COMRG AREA (SEE vse\mac\COMRG)
ZCVT_COMRG_JOBDATE DS    CL8            0  8 MM/DD/YY (SET IF TIMING)
ZCVT_COMRG_RESV1   DS    XL4            8  4 RESERVED
ZCVT_COMRG_COMUSCR DS    XL11          12 11 USER AREA (ZERO'D)
ZCVT_COMRG_UPSI    DS    B             23  1 SWITCH BITS
ZCVT_COMRG_COMNAME DS    CL8           24  8 JOBNAME (SET TO PGMNAME)
ZCVT_COMRG_PPEND   DS    A             32  4 ADDR HIGH PGM
ZCVT_COMRG_HTPHAS  DS    A             36  4 ADDR HIGH LAST PH
ZCVT_COMRG_HTPROG  DS    A             40  4 ADDR HIGH MAX  PH ID4
ZCVT_COMRG_LABLEN  DS    H             44  2 LENGTH OF LABEL
ZCVT_COMRG_RESV2   DS    XL2           46  2 RESERVERD LENGTH ?????
ZCVT_COMRG_IJBHPHLA DS   A             48  4 ADDR HIGH MAX  PH ANY
ZCVT_ACCEPT_REPLY   DS    CL256        52 80 ACCEPT REPLY AREA RMODE24
ZCVTEND  ORG    IHAZCVT+(X'A000'-X'2000')  RESERVE UP TO CVT
&Z390_ZCVTD
.EXIT    MEND
./ ADD NAME=ZDEFINE  0100-14178-14178-0013-00128-00128-00000-Z390MAC
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/19/07                                                 *
.*********************************************************************
.* 09/04/07 RPI 681 DEFINE ZDEFINE TO GENERATE VCDT CATALOG TABLE
.* 09/23/07 RPI 704 DEFINE VCLRCI OPTIONAL CONTROL INTERVAL SIZE
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 07/17/10 RPI 865 add C'PATH' ID
.*********************************************************************
         MACRO
         ZDEFINE
         COPY  ZDEFINE.CPY       INCLUDE GLOBALS SET BY DEFINE
         AIF   ('&CATALOG' NE '').GEN_VCDT
         MNOTE 12,'ZDEFINE MISSING DEFINE CATALOG NAME='
         MEXIT
*
* VCDT VSAM CATALOG DEFINITION TABLE
*
.GEN_VCDT ANOP
VCDT     CSECT
         DC    CL4'VCDT'      VCDTID   VSAM CATALOG DEFINITION TABLE ID
         DC    CL8'&CATALOG'  VCDTNAME CATALOG NAME
         DC    F'&CLR_TOT'    VCDTCLRT TOTAL CLR BASE CLUSTER ENTRIES
         DC    A(VCLR)        VCDTCLRA ADDR  CLR ENTRIES
         DC    F'&AIX_TOT'    VCDTAIXT TOTAL AIX ALTERNATE INDEXES
         DC    A(VAIX)        VCDTAIXA ADDR  AIX ALTERNATE INDEX TABLE
         DC    F'&PTH_TOT'    VCDTPTHT TOTAL PTH PATH ENTRIES
         DC    A(VPTH)        VCDTPTHA ADDR  PTH PATH TABLE
         DC    A(DCB)         VCDTDCBA ADDR  MODEL DCB FOR VES/VX0/VZN
VCLR     CSECT , BASE CLUSTER TABLE ENTRIES
VCLRAIXS CSECT , BASE CLUSTER AIX UPGRADE ADDRESS LISTS
VCLRDSNS CSECT , BASE CLUSTER DSNAME'S (DEFAULT OR OVERRIDES)
VAIX     CSECT , ALTERNATE INDEX TABLE ENTRIES
VAIXDSNS CSECT , ALTERNATE INDEX DSNAME'S (DEFSULYT OR OVERRIDES)
VPTH     CSECT , PATH TABLE ENTRIES
DCB      CSECT , MODELDCB FOR DYNAMIC ALLOCATION VES/VX0/VXN AT OPEN
MODELDCB DCB   DSORG=PS,RECFM=F,MACRF=(GM,PM)
.GEN_CLR ANOP
&CLR_CUR SETA  0
.GEN_CLR_LOOP ANOP
&CLR_CUR SETA  &CLR_CUR+1
         AIF   (&CLR_CUR GT &CLR_TOT).GEN_AIX
*
* VCLR VSAM BASE CLUSTER TABLE ENTRY
*
VCLR     CSECT
&CLR_NAME(&CLR_CUR) DS 0F
         DC    CL4'VCLR'                  VCLRID  BASE CLUSTER ID
         DC    CL8'&CLR_NAME(&CLR_CUR)'   VCLRNAME BASE CLUSTER NAME
         DC    CL4'&CLR_TYPE(&CLR_CUR)'   VCLRTYPE BASE CLUSTER TYPE
         DC    0XL4                       VCLRFLAG BASE CLUSTER OPTIONS
         DC    BL1'&CLR_VREC(&CLR_CUR)&CLR_REUSE(&CLR_CUR).00&CLR_KSDS(X
               &CLR_CUR)&CLR_RRDS(&CLR_CUR)&CLR_ESDS(&CLR_CUR)&CLR_LDS(X
               &CLR_CUR)'
         DC    BL3'0'
         DC    F'&CLR_LAVG(&CLR_CUR)'     VCLRLAVG AVERAGE RCD LENGTH
         DC    F'&CLR_LMAX(&CLR_CUR)'     VCLRLMAX MAXIMUM RCD LENGTH
         DC    F'&CLR_KLEN(&CLR_CUR)'     VCLRKLEN KSDS PRI KEY LENGTH
         DC    F'&CLR_KOFF(&CLR_CUR)'     VCLRKOFF KSDS PRI KEY OFFSET
         DC    A(&CLR_NAME(&CLR_CUR)_VES) VCLRVESA ADDR CLR DATA  DSN
         DC    A(&CLR_NAME(&CLR_CUR)_VX0) VCLRVX0A ADDR CLR INDEX DSN
         DC    A(&CLR_CI(&CLR_CUR))       VCLRCI   OPTIONAL CI SIZE
VCLRAIXS CSECT
&CLR_NAME(&CLR_CUR)_AIX_UPGRADES DS 0F
&AIX_CUR SETA  0
.AIX_UPGRADE_LOOP ANOP
&AIX_CUR SETA  &AIX_CUR+1
         AIF   (&AIX_CUR GT &AIX_TOT).AIX_UPGRADE_END
         AIF   ('&CLR_NAME(&CLR_CUR)' EQ '&AIX_RELATE(&AIX_CUR)' AND &AX
               IX_UPGRADE(&AIX_CUR)).AIX_UPGRADE_LOOP
&CLR_AIX_UPGRADE(&CLR_CUR) SETA &CLR_AIX_UPGRADE(&CLR_CUR)+1
         DC    A(&AIX_NAME(&AIX_CUR))
         AGO   .AIX_UPGRADE_LOOP
.AIX_UPGRADE_END ANOP
VCLR     CSECT
         DC    F'&CLR_AIX_TOT(&CLR_CUR)'  VCLRAIXT TOTAL UPGRADE AIX'S
         DC    A(&CLR_NAME(&CLR_CUR)_AIX_UPGRADES) VCLRAIXA ADDR AIX'S
VCLRDSNS CSECT
&CLR_NAME(&CLR_CUR)_VES DC C'&CLR_VES(&CLR_CUR)',X'00' VES DSNAME
&CLR_NAME(&CLR_CUR)_VX0 DC C'&CLR_VX0(&CLR_CUR)',X'00' VX0 DSNAME
         AGO   .GEN_CLR_LOOP
.GEN_AIX ANOP
&AIX_CUR SETA  0
.GEN_AIX_LOOP ANOP
&AIX_CUR SETA  &AIX_CUR+1
         AIF   (&AIX_CUR GT &AIX_TOT).GEN_PTH
*
* CLR VSAM ALTERNATE INDEX TABLE ENTRY
*
VAIX     CSECT
&AIX_NAME(&AIX_CUR) DS 0F
         DC    CL4'VAIX'                  VAIXID
         DC    CL8'&AIX_NAME(&AIX_CUR)'   VAIXNAME ALTERNATE INDEX NAME
         DC    CL8'&AIX_RELATE(&AIX_CUR)' VAIXCLRN BASE CLUSTER NAME
         DC    0XL4                       VAIXFLAG AIX FLAGS
         DC    BL1'&AIX_REUSE(&AIX_CUR)&AIX_UNIQUEKEY(&AIX_CUR)&AIX_UPGX
               RADE(&AIX_CUR).00000'
         DC    BL3'0'
         DC    F'&AIX_KLEN(&AIX_CUR)'     VAIXKLEN AIX KEY LENGTH
         DC    F'&AIX_KOFF(&AIX_CUR)'     VAIXKOFF AIX KEY OFFSET
         DC    A(&AIX_NAME(&AIX_CUR)_VXN) VAIXVXNA ADDR AIX DSNAME
         DC    A(&AIX_RELATE(&AIX_CUR))   VAIXRELA ADDR RELATED CLR/AIX
VAIXDSNS CSECT
&AIX_NAME(&AIX_CUR)_VXN DC C'&AIX_VXN(&AIX_CUR)',X'00'
         AGO   .GEN_AIX_LOOP
.GEN_PTH ANOP
&PTH_CUR SETA  0
.GEN_PTH_LOOP ANOP
&PTH_CUR SETA  &PTH_CUR+1
         AIF   (&PTH_CUR GT &PTH_TOT).GEN_END
*
* PTH VSAM PATH TABLE ENTRY
*
VPTH     CSECT
&PTH_NAME(&PTH_CUR) DS 0F
         DC    C'PATH'                    PATH    ID   RPI 865
         DC    CL8'&PTH_NAME(&PTH_CUR)'   PTHNAME PATH NAME
         DC    CL8'&PTH_ENTRY(&PTH_CUR)'  PTHENTN BASE CLR OR AIX NAME
         DC    0XL4                       AIXFLAG PATH FLAGS
         DC    BL1'&PTH_AIXP(&PTH_CUR)&PTH_AIXU(&PTH_CUR).000000'
         DC    BL3'0'
         DC    A(&PTH_ENTRY(&PTH_CUR))    PTHENTA ADDR OF CLR OR AIX
         AGO   .GEN_PTH_LOOP
.GEN_END ANOP
         MEND
./ ADD NAME=ZDELETE  0100-14178-14178-0013-00102-00102-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI27  - issue error for any undefined operands
.* 11/19/05 RPI102 - allow DDNAME or DSNAME to replace EP or EPLOC
.* 12/06/05 RPI118 - use SR vs LA, reg chk, drop BALR/USING, fix VL
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 11/17/08 RPI 953 move DELETE code to ZDELETE code to share maclibs
.*********************************************************************
&N      ZDELETE &DE=,      BLDL ENTRY                                  X
               &EP=,      PROGRAM NAME                                 X
               &EPLOC=,   ADDR OF PROGRAM NAME                         X
               &DDNAME=,  1-9 CHARACTER DDNAME                         X
               &DSNAME=,  RX ADDR OF DSN WITH PATH                     X
               &MF=I,     NOT SUPPORTED                                X
               &RELATED=  IGNORED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR1
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
         AIF   ('&DE' NE '').DE
         AIF   ('&EP' NE '').EP
         AIF   ('&EPLOC' NE '').EPLOC
         SR    0,0
         AIF   ('&DDNAME' NE '' OR '&DSNAME' NE '').CHKDSN
         MNOTE 12,'DELETE REQUIRES EP, EPLOC, DDNAME, OR DSNAME'
         MEXIT
.DE      ANOP
         AIF   ('&DE'(1,1) EQ '(').DEREG
         LA    0,&DE
         AGO   .DEADD
.DEREG ANOP
         ZOPTLR 0,&DE(1)
.DEADD   ANOP
         AHI   0,2
         AIF   ('&EP' EQ '' AND '&EPLOC' EQ '').CHKDSN
         MNOTE 12,'DELETE DE EP AND EPLOC ARE MUTUALLY EXCLUSIVE'
         MEXIT
.EP      ANOP
         LA    0,=CL8'&EP'
         AIF   ('&DE' EQ '' AND '&EPLOC' EQ '').CHKDSN
         MNOTE 12,'DELETE DE EP AND EPLOC ARE MUTUALLY EXCLUSIVE'
         MEXIT
.EPLOC   ANOP
         AIF   ('&EPLOC'(1,1) EQ '(').EPLOCREG
         LA    0,&EPLOC
         AIF   ('&DE' EQ '' AND '&EP' EQ '').CHKDSN
         MNOTE 12,'DELETE DE EP AND EPLOC ARE MUTUALLY EXCLUSIVE'
         MEXIT
.EPLOCREG ANOP
         AIF   ('&EPLOC(1)' EQ '0').CHKDSN  RPI163
         LR    0,&EPLOC(1)
.CHKDSN  ANOP
         AIF   ('&DSNAME' EQ '').CHKDD
         AIF   ('&DDNAME' EQ '').DSNOK
         MNOTE 12,'DELETE DSNAME AND DDNAME ARE MUTUALLY EXCLUSIVE'
.DSNOK   ANOP
         AIF   ('&DSNAME'(1,1) EQ '(').DSNREG
         LA    15,&DSNAME
         AGO   .SVC
.DSNREG  ANOP
         AIF   ('&DSNAME(1)' EQ '0').DSNERR
         AIF   ('&DSNAME(1)' EQ '15').SVC  RPI163
         LR    15,&DSNAME(1)
         AGO   .SVC
.DSNERR  ANOP
         MNOTE 12,'DELETE INVALID DSNAME REG'
         MEXIT
.CHKDD   ANOP
         AIF   ('&DDNAME' EQ '').DEFPATH
         AIF   ('&DDNAME'(1,1) EQ '(').DDREG
         LA    15,=CL8'&DDNAME'
         OILH  15,X'8000' DD VS DSN
         AGO   .SVC
.DDREG   ANOP
         AIF   ('&DSNAME(1)' EQ '0').DDERR
         AIF   ('&DDNAME(1)' EQ '15').SKP1 RPI163
         LR    15,&DDNAME(1)
.SKP1    ANOP
         OILH  15,X'8000' DD VS DSN
         AGO   .SVC
.DDERR   ANOP
         MNOTE 12,'DELETE INVALID DDNAME REG'
         MEXIT
.DEFPATH ANOP
         SR    15,15 USE DEFAULT SYS390 SEARCH
.SVC     ANOP
         SVC   9 DELETE R0=A(NAME) R15=DSNAME/DDNAME ADDR OR 0
         MEXIT
.ERR1    MNOTE 12,'DELETE MF= NOT SUPPORTED'
         MEND
./ ADD NAME=ZGENACB  0100-14178-14178-0013-00056-00056-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/16/07                                                 *
.*********************************************************************
.* 09/16/07 RPI 682 INITIAL CODING TO GENERATE ACB AT R1 ADDR
.* 09/20/07 RPI 703 SKIP GEN FOR ZERO VALUE FIELDS
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         ZGENACB &BUFSP=0,    MAXIMUM BUFFER SPACE FOR CLUSTER         X
               &DDNAME=,      DDNAME FOR VSAM CLUSTER DEFINITION TABLE X
               &DSNAME=0,     DSNAME FOR VSAM CLUSTER DEFINITION TABLE X
               &EXLST=0,      NOT CURRENTLY SUPPORTED                  X
               &MACRF=        PROCESSING OPTIONS
&NPOS    SETA  N'&SYSLIST
.POSLOOP ANOP
         AIF   (&NPOS EQ 0).POSEND
         MNOTE 12,'ZGENACB UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
&NPOS    SETA  &NPOS-1
         AGO   .POSLOOP
.POSEND  ANOP
         AIF   ('&EXLST' EQ '0').NOEXLST
         MNOTE 12,'ZGENACB EXLST NOT SUPPORTED YET'
.NOEXLST ANOP
.*
.* SET ACBID,ACBTYPE,ACBLEN NON-ZERO FIELDS
.*
         MVC   ACBID-IHAACB(4,1),=AL1(X'A0',X'11',0,ACBEND-IHAACB)
.*
.* SET ACBMACRF USING ZGENMACF SHARED WITH ACB
.*
         MODCB ACB=(1),MACRF=&MACRF
.*
.* SET ACBDDNAM OR DEFAULT ACB#&SYSNDX
.*
&ACBDDNAM SETC '&DDNAME'
         AIF   ('&DDNAME' NE '').DDMOD
&ACBDDNAM SETC 'ACB#&SYSNDX'
.DDMOD   ANOP
         MODCB  ACB=(1),DDNAME=&ACBDDNAM
*
* SET DSNAME OVERRIDE ADDRESS IF SPECIFIED
*
         AIF   ('&DSNAME' EQ '0').END_DSNAME     RPI 703
         ZMODCB (1),ACBDSNAM-IHAACB,&DSNAME,4
.END_DSNAME ANOP
.*
.* SET DEFAULT VCLR VSAM CATALOG CLUSTER NAME ACB#SYSNDX WHICH
.* CAN BE CHANGED PRIOR TO OPEN OR MAY BE SET FROM DDNAME CATALOG
.* SUFFIX (I.E. SET DDNAME=DEMOCAT.ESF1 WILL SET ACBVCLRN TO ESF1)
.*
         MVC   ACBVCLRN-IHAACB(8,1),=CL8'ACB#&SYSNDX' ACB VCLR NAME
         MEND
./ ADD NAME=ZGENMACF 0100-14178-14178-0013-00108-00108-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/16/07                                                 *
.*********************************************************************
.* 09/16/07 RPI 682 INITIAL CODING TO GENERATE ACBMACRF FROM MACRF=
.*********************************************************************
         ZGENMACF &MACRF=
.*
.* SET 27 MACRF OPTION BITS USING PUBLIC DOMAIN MVS 3.8
.* IDAVSACB CODE AS INITIAL MODEL
.*
         LCLB  &MKEY,&MADR,&MCNV,&MSEQ,&MSKP
         LCLB  &LOGONF,&NLOGON
         LCLB  &MDIR,&IN,&OUT,&NUB,&UBF
         LCLB  &NFX,&CFX,&RST,&NRS,&DDN,&DSN
         LCLB  &NRM,&AIX,&NSR,&LSR,&GSR
         LCLB  &NCI,&ICI,&NDF,&DFR,&NIS,&SIS
&I       SETA  0
.MACRF_LOOP ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&MACRF).MACRF_CHECK
&MKEY    SETB  ('&MACRF(&I)' EQ 'KEY' OR &MKEY)
&MADR    SETB  ('&MACRF(&I)' EQ 'ADR' OR &MADR)
&MCNV    SETB  ('&MACRF(&I)' EQ 'CNV' OR &MCNV)
&MSEQ    SETB  ('&MACRF(&I)' EQ 'SEQ' OR &MSEQ)
&MSKP    SETB  ('&MACRF(&I)' EQ 'SKP' OR &MSKP)
&MDIR    SETB  ('&MACRF(&I)' EQ 'DIR' OR &MDIR)
&OUT     SETB  ('&MACRF(&I)' EQ 'OUT' OR &OUT)
&IN      SETB  ('&MACRF(&I)' EQ 'IN' OR &IN)
&NUB     SETB  ('&MACRF(&I)' EQ 'NUB' OR &NUB)
&UBF     SETB  ('&MACRF(&I)' EQ 'UBF' OR &UBF)
&NFX     SETB  ('&MACRF(&I)' EQ 'NFX' OR &NFX)
&CFX     SETB  ('&MACRF(&I)' EQ 'CFX' OR &CFX)
&DDN     SETB  ('&MACRF(&I)' EQ 'DDN' OR &DDN)
&DSN     SETB  ('&MACRF(&I)' EQ 'DSN' OR &DSN)
&NRM     SETB  ('&MACRF(&I)' EQ 'NRM' OR &NRM)
&AIX     SETB  ('&MACRF(&I)' EQ 'AIX' OR &AIX)
&NSR     SETB  ('&MACRF(&I)' EQ 'NSR' OR &NSR)
&LSR     SETB  ('&MACRF(&I)' EQ 'LSR' OR &LSR)
&GSR     SETB  ('&MACRF(&I)' EQ 'GSR' OR &GSR)
&NCI     SETB  ('&MACRF(&I)' EQ 'NCI' OR &NCI)
&ICI     SETB  ('&MACRF(&I)' EQ 'ICI' OR &ICI)
&NDF     SETB  ('&MACRF(&I)' EQ 'NDF' OR &NDF)
&DFR     SETB  ('&MACRF(&I)' EQ 'DFR' OR &DFR)
&NIS     SETB  ('&MACRF(&I)' EQ 'NIS' OR &NIS)
&SIS     SETB  ('&MACRF(&I)' EQ 'SIS' OR &SIS)
&RST     SETB  ('&MACRF(&I)' EQ 'RST' OR &RST)
&NRS     SETB  ('&MACRF(&I)' EQ 'NRS' OR &NRS)
         AGO   .MACRF_LOOP
.*
.* CHECK FOR MUTUALLY EXCLUSIVE OPTIONS
.*
.MACRF_CHECK ANOP
         LCLB  &ACBERR
.CHK1    AIF   (NOT(&UBF AND &NUB)).CHK2
         MNOTE 12,'ZGENACB ACB UBF AND NUB MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK2    AIF   (NOT(&LOGONF AND &NLOGON)).CHK3
         MNOTE 12,'ZGENACB ACB LOGONF AND NLOGON MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK3    AIF   (NOT(&RST AND &NRS)).CHK4
         MNOTE 12,'ZGENACB ACB RST AND NRS MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK4    AIF   (NOT(&NFX AND &CFX)).CHK5
         MNOTE 12,'ZGENACB ACB NFX AND CFX MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK5    AIF   (NOT(&DDN AND &DSN)).CHK6
         MNOTE 12,'ACB DDN AND DSN MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK6    AIF   (NOT(&NRM AND &AIX)).CHK7
         MNOTE 12,'ZGENACB ACB NRM AND AIX MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK7    AIF   ((NOT(&NSR AND &GSR)) AND (NOT(&GSR AND &LSR))          X
               AND (NOT(&LSR AND &NSR))).CHK8
         MNOTE 12,'ZGENACB ACB NSR, LSR, AND GXR MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK8    AIF   (NOT(&NCI AND &ICI)).CHK9
         MNOTE 12,'ZGENACB ACB NCI AND ICI MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK9    AIF   (NOT(&NDF AND &DFR)).CHK10
         MNOTE 12,'ZGENACB ACB NDF AND DFR MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK10   AIF   (NOT(&NIS AND &SIS)).CHK11
         MNOTE 12,'ZGENACB ACB NIS AND SIS MUTUALLY EXCLUSIVE'
&ACBERR  SETB  1
.CHK11   ANOP
         AIF   (NOT &ACBERR).MACRF_DEF
         MEXIT
.MACRF_DEF ANOP
.*
.* SET DEFAULT OPTIONS
.*
&MKEY    SETB  (NOT(&MADR OR &MCNV) OR &MKEY)
&MSEQ    SETB  (NOT(&MSKP OR &MDIR) OR &MSEQ)
&IN      SETB  (NOT(&OUT) OR &IN)
.*
.* GEN MACRF FLAG BYTES (SEE ACBD FOR FLAG SYMBOLS AND DESCRIPTIONS)
.*
         GBLC  &ZGENMACF1,&ZGENMACF2,&ZGENMACF3,&ZGENMACF4
&ZGENMACF1 SETC '&MKEY&MADR&MCNV&MSEQ&MDIR&IN&OUT&UBF'
&ZGENMACF2 SETC '000&MSKP&NLOGON&RST&DSN&AIX'
&ZGENMACF3 SETC '0&LSR&GSR&ICI&DFR&SIS&CFX.0'
&ZGENMACF4 SETC '00000000'
         MEND
./ ADD NAME=ZGENOPTD 0100-14178-14178-0013-00184-00184-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/16/07                                                 *
.*********************************************************************
.* 09/16/07 RPI 687  INITIAL CODING TO GEN RPL OPTCD BITS
.* 04/19/08 RPI 833  add SETC quotes for HLASM compatibility
.* 04/23/09 RPI 1024 jm2 MODCB generates OI and NI instead of MVI
.* 04/07/11 RPI 1158 REMOVE DUPLICATE LCLB ASY,XASY
.*********************************************************************
         ZGENOPTD &OPTCD=
.*
.* DEFINE 2 OPTION BYTES FROM OPTCD PARMS USING IDAVSOPT AS MODEL
.*
         LCLB  &KEY,&ADR,&CNV,&SEQ,&DIR,&SKP     6
         LCLB  &SYN,&ASY,&NUP,&UPD,&NSP,&KEQ     6
         LCLB  &KGE,&FKS,&GEN,&MVE,&LOC,&LRD     5
         LCLB  &WAITX,&NWAITX                    2
         LCLB  &ARD,&BWD,&CR,&CRE RPI 1158 ASY   5
         LCLB  &FWD,&NRI,&RBA,&XRBA              4
         LCLB  &XKEY,&XADR,&XCNV,&XSEQ,&XDIR,&XSKP     6    jm2
         LCLB  &XSYN,&XASY,&XNUP,&XUPD,&XNSP,&XKEQ     6    jm2
         LCLB  &XKGE,&XFKS,&XGEN,&XMVE,&XLOC,&XLRD     5    jm2
         LCLB  &XWAITX,&XNWAITX                        2    jm2
         LCLB  &XARD,&XBWD,&XCR,&XCRE RPI 1158 XASY    5    jm2
         LCLB  &XFWD,&XNRI,&XXRBA     RPI 1158 XRBA    4    jm2
&OPTS(1) SETC  'ADR',   1                                              X
               'ARD',   2                                              X
               'ASY',   3                                              X
               'BWD',   4                                              X
               'CNV',   5                                              X
               'CR',    6                                              X
               'CRE',   7                                              X
               'DIR',   8                                              X
               'FKS',   9                                              X
               'FWD',  10                                              X
               'GEN',  11                                              X
               'KEQ',  12                                              X
               'KEY',  13                                              X
               'KGE',  14                                              X
               'LOC',  15                                              X
               'LRD',  16                                              X
               'MVE',  17                                              X
               'NRI',  18                                              X
               'NSP',  19                                              X
               'NUP',  20                                              X
               'NWAITX', 21                                            X
               'RBA',  22                                              X
               'SEQ',  23                                              X
               'SKP',  24                                              X
               'SYN',  25                                              X
               'UPD',  26                                              X
               'WAITX', 27                                             X
               'XRBA'  28
&I       SETA  0
.OPTLOOP ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&OPTCD).CHK_OPT  RPI 680
&J       SETA  0
.FINDOPT ANOP
&J       SETA  &J+1
         AIF   (&J GT N'&OPTS).OPT_NOT_FND
         AIF   ('&OPTCD(&I)' EQ '&OPTS(&J)').OPT_FND
         AGO   .FINDOPT
.OPT_NOT_FND ANOP
         MNOTE 12,'ZGENRPL OPTCD NOT FOUND - &OPTCD(&I)'
         AGO   .OPTLOOP
.OPT_FND ANOP
&ADR     SETB  ('&OPTCD(&I)' EQ 'ADR' OR &ADR)
&ARD     SETB  ('&OPTCD(&I)' EQ 'ARD' OR &ARD)
&ASY     SETB  ('&OPTCD(&I)' EQ 'ASY' OR &ASY)
&BWD     SETB  ('&OPTCD(&I)' EQ 'BWD' OR &BWD)
&CNV     SETB  ('&OPTCD(&I)' EQ 'CNV' OR &CNV)
&CR      SETB  ('&OPTCD(&I)' EQ 'CR'  OR &CR)   NEW
&CRE     SETB  ('&OPTCD(&I)' EQ 'CRE' OR &CRE)  NEW
&DIR     SETB  ('&OPTCD(&I)' EQ 'DIR' OR &DIR)
&FKS     SETB  ('&OPTCD(&I)' EQ 'FKS' OR &FKS)
&FWD     SETB  ('&OPTCD(&I)' EQ 'FWD' OR &FWD)
&GEN     SETB  ('&OPTCD(&I)' EQ 'GEN' OR &GEN)
&KEQ     SETB  ('&OPTCD(&I)' EQ 'KEQ' OR &KEQ)
&KEY     SETB  ('&OPTCD(&I)' EQ 'KEY' OR &KEY)
&KGE     SETB  ('&OPTCD(&I)' EQ 'KGE' OR &KGE)
&LOC     SETB  ('&OPTCD(&I)' EQ 'LOC' OR &LOC)
&LRD     SETB  ('&OPTCD(&I)' EQ 'LRD' OR &LRD)
&MVE     SETB  ('&OPTCD(&I)' EQ 'MVE' OR &MVE)
&NRI     SETB  ('&OPTCD(&I)' EQ 'NRI' OR &NRI)       NEW
&NSP     SETB  ('&OPTCD(&I)' EQ 'NSP' OR &NSP)
&NUP     SETB  ('&OPTCD(&I)' EQ 'NUP' OR &NUP)
&NWAITX  SETB  ('&OPTCD(&I)' EQ 'NWAITX' OR &NWAITX)
&RBA     SETB  ('&OPTCD(&I)' EQ 'RBA' OR &RBA)       NEW
&SEQ     SETB  ('&OPTCD(&I)' EQ 'SEQ' OR &SEQ)
&SKP     SETB  ('&OPTCD(&I)' EQ 'SKP' OR &SKP)
&SYN     SETB  ('&OPTCD(&I)' EQ 'SYN' OR &SYN)
&UPD     SETB  ('&OPTCD(&I)' EQ 'UPD' OR &UPD)
&WAITX   SETB  ('&OPTCD(&I)' EQ 'WAITX' OR &WAITX)
&XRBA    SETB  ('&OPTCD(&I)' EQ 'XRBA' OR &XRBA)     NEW
         AGO   .OPTLOOP
.CHK_OPT ANOP
.*
.* CHECK MUTUALLY EXCLUSIVE OPTIONS
.*
.CHK1    AIF   (NOT(&KEY AND &ADR)).CHK2
         MNOTE 12,'ZGENRPL KEY AND ADR MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK2    AIF   (NOT(&KEY AND &CNV)).CHK3
         MNOTE 12,'ZGENRPL KEY AND CNV MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK3    AIF   (NOT(&ADR AND &CNV)).CHK4
         MNOTE 12,'ZGENRPL ADR AND CNV MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK4    AIF   (NOT(&SEQ AND &DIR)).CHK5
         MNOTE 12,'ZGENRPL SEQ AND DIR MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK5    AIF   (NOT(&SEQ AND &SKP)).CHK6
         MNOTE 12,'ZGENRPL SEQ AND SKP MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK6    AIF   (NOT(&DIR AND &SKP)).CHK7
         MNOTE 12,'ZGENRPL DIR AND SKP MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK7    AIF   (NOT(&SYN AND &ASY)).CHK8
         MNOTE 12,'ZGENRPL SYN AND ASY MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK8    AIF   (NOT(&NUP AND &UPD)).CHK9
         MNOTE 12,'ZGENRPL NUP AND UPD MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK9    AIF   (NOT(&NUP AND &NSP)).CHK10
         MNOTE 12,'ZGENRPL NUP AND NSP MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK10   AIF   (NOT(&UPD AND &NSP)).CHK11
         MNOTE 12,'ZGENRPL UPD AND NSP MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK11   AIF   (NOT(&KEQ AND &KGE)).CHK12
         MNOTE 12,'ZGENRPL KEY AND KGE MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK12   AIF   (NOT(&WAITX AND &NWAITX)).CHK13
         MNOTE 12,'ZGENRPL WAITX AND NWAITX MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK13   AIF   (NOT(&FKS AND &GEN)).CHK14
         MNOTE 12,'ZGENRPL FKS AND GEN MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK14   AIF   (NOT(&MVE AND &LOC)).CHK15
         MNOTE 12,'ZGENRPL MVE AND LOC MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK15   AIF   (NOT(&BWD AND &FWD)).CHK16
         MNOTE 12,'ZGENRPL FWD AND BWD MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHK16   AIF   (NOT(&ARD AND &LRD)).CHKEND
         MNOTE 12,'ZGENRPL ARD AND LRD MUTUALLY EXCLUSIVE'
&RPLERR  SETB  1
.CHKEND  ANOP
         GBLC  &ZGENOPT1,&ZGENOPT2
&ZGENOPT1 SETC '&LOC&DIR&SEQ&SKP&ASY&KGE&GEN&XRBA'  OPTCD BYTE 1
&ZGENOPT2 SETC '&KEY&ADR&CNV&BWD&LRD&WAITX&UPD&NSP' OPTCD BYTE 2
.*
&XADR     SETB  (&KEY OR &CNV)                              jm2
&XARD     SETB  (&LRD)                                      jm2
&XASY     SETB  (&SYN)                                      jm2
&XBWD     SETB  (&FWD)                                      jm2
&XCNV     SETB  (&KEY OR &ADR)                              jm2
&XDIR     SETB  (&SEQ OR &SKP )                             jm2
&XFKS     SETB  (&GEN)                                      jm2
&XFWD     SETB  (&BWD)                                      jm2
&XGEN     SETB  (&FKS)                                      jm2
&XKEY     SETB  (&ADR OR &CNV OR &KGE)                      jm2
&XKGE     SETB  (&KEY)                                      jm2
&XLOC     SETB  (&MVE)                                      jm2
&XLRD     SETB  (&ARD)                                      jm2
&XMVE     SETB  (&LOC)                                      jm2
&XNSP     SETB  (&NUP OR &UPD)                              jm2
&XNUP     SETB  (&NUP OR &NSP)                              jm2
&XNWAITX  SETB  (&WAITX)                                    jm2
&XSEQ     SETB  (&DIR OR &SKP)                              jm2
&XSKP     SETB  (&DIR OR &SEQ)                              jm2
&XSYN     SETB  (&ASY)                                      jm2
&XUPD     SETB  (&NUP OR &NSP)                              jm2
&XWAITX   SETB  (&NWAITX)                                   jm2
         GBLC  &XGENOPT1,&XGENOPT2                          jm2
&XGENOPT1 SETC '&XLOC&XDIR&XSEQ&XSKP&XASY&XKGE&XGEN&XXRBA'  OPTCD1
&XGENOPT2 SETC '&XKEY&XADR&XCNV&XBWD&XLRD&XWAITX&XUPD&XNSP' OPTCD2
.*
         MEND
./ ADD NAME=ZGENRPL  0100-14178-14178-0013-00079-00079-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/16/07                                                 *
.*********************************************************************
.* 09/14/07 RPI 682 INITIAL CODING TO GEN RPL AT R1
.* 09/14/07 RPI 703 SKIP GENERATING ZERO VALUE ARGS
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         ZGENRPL &ACB=0,  VSAM ACCESS CONTROL BLOCK ADDRESS            X
               &AREA=0,   RECORD WORK AREA (DATA FOR MVE, ADDR FOR LOC)X
               &AREALEN=0, LENGTH OF AREA (MAX LRECL IF MVS, 4 FOR LOC)X
               &ARG=0,    KEY FIELD FOR KSDS ACCESS                    X
               &ECB=0,    ECB TO BE POSTED ON COMPLETION               X
               &KEYLEN=0, KEY LENGTH FOR GENERIC KEY SEARCH            X
               &OPTCD=,   OPTIONS (SEE SUPPORTED OPTIONS ABOVE)        X
               &RECLEN=0  RECORD LENGTH FOR VARIABLE LENGTH PUT
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'ZGENRPL UNSUPPORTED OPERANDS - &SYSLIST(1)'
         MEXIT
.NPOK    ANOP
.*
.* SET RPL ID,TYPE,LEN
.*
         MVC   RPLID-IHARPL(3,1),=AL1(0,10,RPLEND-IHARPL)
.*
.* SET RPL ECB
.*
         AIF   ('&ECB' EQ '0').END_ECB              RPI 703
         ZMODCB (1),RPLECB-IHARPL,&ECB,4
.END_ECB ANOP
.*
.* SET RPL KEYLEN
.*
         AIF   ('&KEYLEN' EQ '0').END_KEYLEN        RPI 703
         ZMODCB (1),RPLLKEY-IHARPL,&KEYLEN,4
.END_KEYLEN ANOP
.*
.* SET RPL ACB
.*
         AIF   ('&ACB' EQ '0').END_ACB              RPI 703
         ZMODCB (1),RPLACB-IHARPL,&ACB,4
.END_ACB ANOP
.*
.* SET RPL AREA
.*
         AIF   ('&AREA' EQ '0').END_AREA            RPI 703
         ZMODCB (1),RPLAREA-IHARPL,&AREA,4
.END_AREA ANOP
.*
.* SET RPL ARG
.*
         AIF   ('&ARG' EQ '0').END_ARG              RPI 703
         ZMODCB (1),RPLARG-IHARPL,&ARG,4
.END_ARG ANOP
.*
.* SET RPL OPTCD NON-ZERO FIELD
.*
         AIF   ('&OPTCD' EQ '').END_OPTCD
         GBLC  ZGENOPT1,&ZGENOPT2
         ZGENOPTD OPTCD=&OPTCD
         MVC   RPLOPTCD-IHARPL(2,1),=B'&ZGENOPT1&ZGENOPT2'
.END_OPTCD ANOP
.*
.* SET RPL RECLEN
.*
         AIF   ('&RECLEN' EQ '0').END_RECLEN        RPI 703
         ZMODCB (1),RPLLREC-IHARPL,&RECLEN,4
.END_RECLEN ANOP
.*
.* SET RPL AREALEN
.*
         AIF   ('&AREALEN' EQ '0').END_AREALEN      RPI 703
         ZMODCB (1),RPLLAREA-IHARPL,&AREALEN,4
.END_AREALEN ANOP
         MEND
./ ADD NAME=ZKSIRD   0100-14178-14178-0013-00045-00045-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 10/05/07                                                 *
.*********************************************************************
.* 10/05/07 RPI INITIAL CODING OF KSDS INSERT RECORD DESECT
.* 08/03/07 RPI 668 VCDTTIOT TABLE INDEX AFTER LOADING
.* 08/06/07 RPI 668 VCDTPATH ADDR KSDS ALT PATH IHAAIX SECTION
.* 09/03/07 RPI 681 EXPAND TO IHAVCDT, IHACLR, IHAAIX, IHAPTH
.* 09/23/07 RPI 704 ADD VCLRCI OPTIONAL CI SIZE TO SUPPORT LINEAR
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
         ZKSIRD
.*
.* IF ZKSIRD ALREADY DEFINED EXIT NOW
.*
         GBLB  &Z390_ZKSIR
         GBLC  &Z390_ZKSIR_NAME,&Z390_ZKSIR_TYPE
         AIF   (&Z390_ZKSIR).EXIT
&Z390_ZKSIR SETB 1
&Z390_ZKSIR_NAME SETC '&SYSLOC'
&Z390_ZKSIR_TYPE SETC '&SYSSTYP'
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'ZKSIRD UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
*
* IHAZKSIT VSAM CATALOG DEFINITION TABLE(vcdt) DSECT
*
IHAZKSIR DSECT
ZKSIRID  DS    CL4    0 C'KSIR'
ZKSIRP   DS    XL8    4 XRBA OF PARENT   ZKSIR RECORD
ZKSIRL   DS    XL8   12 XRBA OF LOWER    ZKSIR RECORD
ZKSIRH   DS    XL8   20 XRBA OF HIGHER   ZKSIR RECORD
ZKSIRF   DS    XL8   28 XRBA OF FORWARD  ZKSIR RECORD
ZKSIRB   DS    XL8   36 XRBA OF BACKWARD ZKSIR RECORD
ZKSIREC  EQU   *     44 START OF FIXED OR VARIABLE KSDS DATA RECORD
ZKSIRLEN EQU   *-IHAZKSIR
         AIF   ('&Z390_ZKSIR_NAME' EQ '' OR '&Z390_ZKSIR_TYPE' EQ '').EX
               XIT
&Z390_ZKSIR_NAME &Z390_ZKSIR_TYPE
.EXIT    ANOP
         MEND
./ ADD NAME=ZKSITD   0100-14178-14178-0013-00060-00060-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 10/05/07                                                 *
.*********************************************************************
.* 10/05/07 RPI INITIAL CODING OF KSDS INSERT TREE ZKSITD
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
.*
.* ZKSIT - Z390 VSAM KSDS INSERT TREE CONTROL BLOCK
.*
.* 1.  When record is inserted in KSDS, the VX0 index pointer for
.*     next lowest or first xrba in index is replaced with negative
.*     xrba to ZKSIT control block defining balanced binary tree
.*     structure in VES containing all inserted records.
.* 2.  The ZKSIT control block has 3 pointers to ZKSIR Z390 VSAM
.*     KSDS INSERT RECORD CONTROL BLOCKS (top, lowest, and highest).
.* 3.  If first record, the existing key is moved into the tree as
.*     it may not be the lowest key after insert in which case the
.*     VX0 first record key is updated accordingly with lowest key.
.* 4.  The ZKSIR control block prefixes each inserted record and
.*     contains XRBA pointers to parent, next lower, next higher,
.*     next foward, and next backward XRBA pointers to support
.*     searching tree or reading sequentially forward or backward.
.* 5.  The high bit is set on in the next lower or higher XRBA field
.*     to indicated last add.  This flag is used to keep the tree
.*     balanced by moving nodes in tree up or down as required.
.*
.*
.*********************************************************************
         ZKSITD
.*
.* IF ZKSITD ALREADY DEFINED EXIT NOW
.*
         GBLB  &Z390_ZKSIT
         GBLC  &Z390_ZKSIT_NAME,&Z390_ZKSIT_TYPE
         AIF   (&Z390_ZKSIT).EXIT
&Z390_ZKSIT SETB 1
&Z390_ZKSIT_NAME SETC '&SYSLOC'
&Z390_ZKSIT_TYPE SETC '&SYSSTYP'
         AIF   (N'&SYSLIST EQ 0).NPOK
         MNOTE 12,'ZKSITD UNSUPPORTED OPERANDS - &SYSLIST(1)'
.NPOK    ANOP
*
* IHAZKSIT VSAM KSDS INSERT TOP OF BALANCED TREE DSECT
*
IHAZKSIT DSECT
ZKSITID  DS    CL4    0 C'KSIT'
ZKSITTOP DS    XL8    4 XRBA OF TOP   KSIR RECORD
ZKSITFST DS    XL8   12 XRBA OF FIRST KSIR RECORD
ZKSITLST DS    XL8   20 XRBA OF LAST  KSIR RECORD
ZKSITLEN EQU   *-IHAZKSIT
         AIF   ('&Z390_ZKSIT_NAME' EQ '' OR '&Z390_ZKSIT_TYPE' EQ '').EX
               XIT
&Z390_ZKSIT_NAME &Z390_ZKSIT_TYPE
.EXIT    ANOP
         MEND
./ ADD NAME=ZMFACC   0100-14178-14178-0013-00333-00333-00000-Z390MAC
        MACRO
&PROBLEM ZMFACC &SECTION,     START OR STOP                       DSH2 X
               &OP,           CODE, INPUT, OUTPUT, OR DUMP        DSH2 X
               &NAME=,        P? SOLUTION NAME REQ'D ON 1ST CALL  DSH2 X
               &RUNSYS=,      MVS, CMS, VSE, ZOS (DEFAULT IS 390) DSH2 X
               &ST=,&LEN=,&END=,&ID=  DUMP OPTIONS USED BY CMS    DSH2
.********************************************************************
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.********************************************************************
         GBLC  &ZRUNSYS           Global OS TARGET EXECUTION ID
         GBLB  &SYPOPN            IS SYSPRINT OPEN
         LCLA  &N,&L,&K
         LCLC  &WT,&TNAME,&XNAME
      AIF   ('&ZRUNSYS' NE '').GUSERUN  DON'T LOOK IF ZRUNSYS SET  DSH2
      AIF   ('&RUNSYS' NE '').GSETRUN   IF MACRO DEFINITION USE IT DSH2
&N       SETA  1                  Start index
&L       SETA  K'&SYSPARM-7       Max loop
.SYSPLP ANOP
      AIF   ('&N' GT &L).NOSYS            STOP IF TOO FAR
      AIF   ('&SYSPARM'(&N,7) EQ 'RUNSYS=').GOTSYS IF MAGIC WORD GO
&N       SETA  &N+1               Bump index
      AGO   .SYSPLP               Loop de loop
.GOTSYS ANOP
&N       SETA  &N+7               Index over 'RUNSYS='
&ZRUNSYS  SETC  '&SYSPARM'(&N,3)        GET THREE BYTE CODE
      AGO   .TSYS                 Go check validity
.NOSYS ANOP  SET                  default
         MNOTE 4,'No RUNSYS= on first ZMFACC, 390 assumed.'
&ZRUNSYS  SETC  '390'
      AGO   .TSYS
.GSETRUN ANOP
&ZRUNSYS  SETC  '&RUNSYS'        GET VALUE FROM MACRO HEADER DSH2
.TSYS ANOP
      AIF   ('&ZRUNSYS' EQ '390').SAYZOP
      AIF   ('&ZRUNSYS' EQ 'CMS').SAYZOP
      AIF   ('&ZRUNSYS' EQ 'MVS').SAYZOP
      AIF   ('&ZRUNSYS' EQ 'VSE').SAYZOP        DSH2
      AIF   ('&ZRUNSYS' EQ 'ZOS').SAYZOP        DSH2
         MNOTE 8,'ZRUNSYS=&ZRUNSYS not valid, No generation'
      MEXIT
.SAYZOP ANOP
         MNOTE 0,'ZRUNSYS=&ZRUNSYS'                          DSH2
.GUSERUN ANOP
.***** 390, MVS and CMS Version *****
.* Z390 Mainframe Assembler Coding Contest
.* macro to isolate problem solutions from
.* specific operating systems. This macro
.* may be customizied to work on users
.* specific operating system.  The functions
.* it performs are as follows:
.*  CODE,START,NAME='YOUR NAME'
.*    1.  generate standard linkage
.*        and define base register.
.*    2.  Verify problem # and name are specified and display them.
.*    3.  Generate code
.*         to display the memory between INPUT_START and INPUT_END.
.*  CODE,END
.*    1.  Generate code
.*         to display the memory between INPUT_START and INPUT_END.
.*    2.  Exit with return code 0.
.*    3.  Generate equates for Regs
.*  INPUT,START
.*    1.  Define INPUT_START on double word boundary for start
.*        of data input storage to be displayed at CODE,START time.
.*  INPUT,END
.*    1.  Define INPUT_END for end
.*        of data input storage to be displayed at CODE,START time.
.*  OUTPUT,START
.*    1.  Define OUTPUT_START on double word boundary for start
.*        of data output storage to be displayed at CODE,END time.
.*  OUTPUT,END
.*    1.  Define OUTPUT_END for end
.*        of data output storage to be displayed at CODE,END time.
.*
.*  DUMP ID=,NAME=,ST=,END=
.*    1.  Generate code to display data (CMS has no SNAP)
.****************************************************************
.* 12/13/07 Don Higgins initial version for z390 environment
.* 12/15/07 Rafa Pereira modified for MVS 3.8, Hercules environ.
.* 12/16/07 Don Higgins - merged z390 and Hercules support using
.*          test of &SYSASM for 'z390' else assume MVS compat. OS
.* 12/17/07 Chris L    Update version for 390, MVS AND CMS environment
.*                     &SYSASM specified on first ZFMACC or via
.*                     SYSPARM contains 'SYSASM=xxx'
.*                     Added DUMP section to isolate SNAP code
.* 12/18/07 DSH2 Don Higgins changes:
.*          1.  Change program ID back to P versus # for
.*              compatibility with published solutions and for
.*              compatibility with MVS 3.8 IFOX00 assembler.
.*          2.  Change ZMFACC new parm from SYSASM to RUNSYS=
.*              to avoid conflist with SYSASM keyword vs global.
.*          3.  Add support for RUNSYS=ZOS using same code as MVS
.*          4.  Add support for RUNSYS=VSE using WTO and PDUMP
.* 12/18/07 Rafa Pereira fix restrictions req'd for IFOX00
.* 12/18/07 Chris Langford change to &RUNSYS= to support SYSPARM
.*          overrides, set VSE base and save area and use EOJ exit
.* 12/19/07 CL3 Chris Langford chnage to correct MVS/ZOS SNAP msgs
.* 12/19/07 RP2 Rafa Pereira   chnage to correct MVS/ZOS SNAP areas
.* 12/19/07 CL4 Chris Langford chnage PDUMP fields and SNAP ID
.* 12/21/07 DSH3 Display RUNSYS=??? after programmer name
.* 12/22/07 DSH4 Add all 16 F?? registers with comment showing pairs
.****************************************************************
      AIF   ('&SECTION' EQ 'CODE').CODE
      AIF   ('&SECTION' EQ 'DUMP').DUMP
      AIF   ('&SECTION' EQ 'INPUT').INPUT
      AIF   ('&SECTION' EQ 'OUTPUT').OUTPUT
         MNOTE 12,'ZMFACC SECTION NOT CODE/INPUT/OUTPUT - &SECTION'
         MEXIT
.*                                                ********************
.*                                                 CODE  Routine
.*                                                ********************
.CODE    ANOP
      AIF   ('&OP' EQ 'START').CODEST
      AIF   ('&OP' EQ 'END').CODEEND
         MNOTE 12,'ZMFACC OP MUST BE START OR END - &OP'
         MEXIT
.*                                                ********************
.*                                                 CODE,START  Routine
.*                                                ********************
.CODEST ANOP
         AIF   (K'&PROBLEM LT 2 OR '&PROBLEM'(1,1) NE 'P').BADPGM DSH2
         AIF   (K'&NAME LT 2).BADNAME
&PROBLEM CSECT
         AIF   ('&ZRUNSYS' EQ 'VSE').VSEBALR
         STM   14,12,12(13)
         BAL   15,GO&SYSNDX-&PROBLEM.(15)
SV&SYSNDX DC    18F'0'
         DC    CL8'&PROBLEM'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
      AIF   ('&ZRUNSYS' NE 'MVS' AND '&ZRUNSYS' NE 'ZOS').NOSYSP  DSH2
SYSPRINT DCB   DSORG=PS,MACRF=W,RECFM=VBA,BLKSIZE=1632,LRECL=125,      X
               DDNAME=SYSPRINT
        AGO    .NOSYSP
.VSEBALR ANOP
        BAL    13,18*4(13)
        USING  *,13
        DC     18F'0'
        AGO    .SHOWID
.NOSYSP ANOP
GO&SYSNDX DS    0H
         ST    15,8(13)
         ST    13,4(15)
         LR    13,15
      USING SV&SYSNDX,13
.SHOWID  ANOP
&TNAME   SETC  '&NAME'(2,K'&NAME-2)
      AIF   ('&ZRUNSYS' EQ 'CMS').WRTER
         WTO   'ZMFACC Solution for problem &PROBLEM by &TNAME using RUX
               NSYS=&ZRUNSYS'   DSH3
      AGO   .AFWRT
.WRTER ANOP
         WRTERM 'ZMFACC Solution for problem &PROBLEM by &TNAME using RX
               UNSYS=&ZRUNSYS'  DSH3
.AFWRT ANOP
         ZMFACC DUMP,ID=1,ST=INPUTSTR,END=INPUTEND,NAME='Input Area'
         MEXIT
.*                                                ********************
.*                                                 CODE,END  Routine
.*                                                ********************
.CODEEND ANOP
      ZMFACC DUMP,ID=2,ST=OUTPUTST,END=OUTPUTEN,NAME='Output Area' RP2
      AIF   (&SYPOPN EQ 0).NOTOP
         CLOSE (SYSPRINT)
.NOTOP ANOP
         AIF   ('&ZRUNSYS' EQ 'VSE').EXITVSE
         L     13,4(,13)
         L     14,12(,13)
         LM    2,12,28(13)
         SR    15,15
         BR    14
         AGO   .EXITEND
.EXITVSE ANOP
         EOJ
.EXITEND ANOP
*        YREGS
***      REGISTER EQUATES
*
         SPACE 2
.*   Generate REG equates inline. CMS does not have YREGS
* GENERAL  REGISTERS
         SPACE
R0        EQU  0
R1        EQU  1
R2        EQU  2
R3        EQU  3
R4        EQU  4
R5        EQU  5
R6        EQU  6
R7        EQU  7
R8        EQU  8
R9        EQU  9
R10       EQU  10
R11       EQU  11
R12       EQU  12
R13       EQU  13
R14       EQU  14
R15       EQU  15
         SPACE
* FLOATING POINT REGISTERS
         SPACE
F0        EQU  0  L0
F1        EQU  1  L1
F2        EQU  2  L0+
F3        EQU  3  L1+
F4        EQU  4  L4
F5        EQU  5  L5
F6        EQU  6  L4+
F7        EQU  7  L5+
F8        EQU  8  L8
F9        EQU  9  L9
F10       EQU  10 L8+
F11       EQU  11 L9+
F12       EQU  12 L12
F13       EQU  13 L13
F14       EQU  14 L12+
F15       EQU  15 L13+
         SPACE
* EXTENDED CONTROL REGISTERS
         SPACE
C0        EQU  0
C1        EQU  1
C2        EQU  2
C3        EQU  3
C4        EQU  4
C5        EQU  5
C6        EQU  6
C7        EQU  7
C8        EQU  8
C9        EQU  9
C10       EQU  10
C11       EQU  11
C12       EQU  12
C13       EQU  13
C14       EQU  14
C15       EQU  15
         MEXIT
.*                                                ********************
.*                                                 INPUT Routine
.*                                                ********************
.INPUT   ANOP
      AIF   ('&OP' EQ 'START').INPUTST
      AIF   ('&OP' EQ 'END').INPUTE
         MNOTE 12,'ZMFACC OP MUST BE START OR END - &OP'
         MEXIT
.INPUTST ANOP
INPUTSTR DS    0F
         MEXIT
.INPUTE ANOP
INPUTEND  EQU  *
         MEXIT
.*                                                ********************
.*                                                 OUTPUT Routine
.*                                                ********************
.OUTPUT ANOP
      AIF   ('&OP' EQ 'START').OUTST
      AIF   ('&OP' EQ 'END').OUTEND
         MNOTE 12,'ZMFACC OP MUST BE START OR END - &OP'
         MEXIT
.OUTST ANOP
OUTPUTST DS    0F
         MEXIT
.OUTEND ANOP
OUTPUTEN  EQU  *
         MEXIT
.BADPGM  MNOTE 12,'ZMFACC PROGRAM NAME MUST BE P? - &PROBLEM' DSH2
         MEXIT
.BADNAME MNOTE 12,'ZMFACC PROGRAMMER NAME MUST BE DEFINED'
         MEXIT
.*                                                ********************
.*                                                 DUMP Routine
.*                                                ********************
.DUMP ANOP
&PROBLEM DS    0H
&TNAME   SETC  '&NAME'
      AIF   ('&NAME'(1,1) NE '''').SKN
&K       SETA  K'&NAME
&XNAME   SETC  '&NAME'(2,&K-2)
.SKN ANOP
&TNAME SETC 'ID:&ID &XNAME'
      AIF   ('&ZRUNSYS' NE 'CMS').DMPNCMS
         STM   2,4,RSV&SYSNDX
         LA    2,&ST
      AIF      ('&END' EQ '').DOLEN
         LA    4,&END
&WT      SETC  'END'
         SR    4,2
      AGO   .GOT
.DOLEN ANOP
         LA    4,&LEN
&WT      SETC  'LEN'
.GOT ANOP
         LINEDIT TEXT='Dump of &TNAME Starts ........ Len ........',   X
               SUB=(HEX,(2),HEX,(4)),RENT=NO
         SR    3,3
LP&SYSNDX DS    0H
  LINEDIT TEXT=' ........ .... ........ ........ ........ ........  >..X
               ..............<',RENT=NO,COMP=NO,DOT=NO,                X
               SUB=(HEX,(2),HEX,(3),HEXA,0(2),HEXA,4(2),HEXA,8(2),     X
               HEXA,12(2),CHARA,0(2))
         LA    2,16(2)
         LA    3,16(3)
         SH    4,=H'16'
         BP    LP&SYSNDX
         LM    2,4,RSV&SYSNDX
         B     A&SYSNDX
RSV&SYSNDX DS    3F
A&SYSNDX DS    0H
      MEXIT
.DMPNCMS ANOP
      AIF    ('&ZRUNSYS' EQ 'MVS').GENMDMP
      AIF    ('&ZRUNSYS' EQ 'ZOS').GENMDMP    DSH2
      AIF    ('&ZRUNSYS' EQ 'VSE').GENPDMP    DSH2
         SNAP  ID=&ID,PDATA=,STORAGE=(&ST,&END),TEXT='&XNAME'
      MEXIT
.GENPDMP ANOP                                 DSH2
      PDUMP  &ST,&END                         DSH2 CL4
      MEXIT                                   DSH2
.GENMDMP ANOP
      AIF    (&SYPOPN).DIDOPN
         OPEN  (SYSPRINT,(OUTPUT))
&SYPOPN  SETB  1                  Set 'DCB is open'
.DIDOPN ANOP
         SNAP  DCB=SYSPRINT,                                           X
               ID=&ID,PDATA=,STORAGE=(&ST,&END),         RP2 CL4       X
               STRHDR=(HDR&SYSNDX)                       CL3
         B     AF&SYSNDX  skip over message              CL3
&K       SETA  K'&XNAME   length of message              CL3
HDR&SYSNDX DC AL1(&K)                                    RP2
           DC C'&XNAME' msg for snap                     CL3
AF&SYSNDX DS 0H           skip label                     CL3
      MEXIT
      MEND
./ ADD NAME=ZMODCB   0100-14178-14178-0013-00071-00071-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 08/27/05                                                 *
.*********************************************************************
.* 08/27/07 INITIAL CODING TO SUPPORT MODCB ACB OR RPL FIELD MODS
.* 09/03/07 RPI 690  ADD OPTCD LENGTH 2 SUPPORT
.* 09/15/07 RPI 696  CORRECT SUPPORT FOR 1 BYTE FIELD LENGHTS
.* 09/15/07 RPI 682  ADD SUPPORT FOR 8 BYTE DDNAME,VCLRN TYPE MODS
.* 04/19/08 RPI 833  add SETC quotes for HLASM compatibility
.* 04/23/09 RPI 1023 jm2 MODCB generates OI and NI instead of MVI
.*********************************************************************
&N       ZMODCB &CB,         ACB/RPL ADDRESS OR (REG)                  X
               &OFFSET,      OFFSET TO TARGET FIELD                    X
               &SOURCE,      ABS VAL, RX ADDR, (REG), (S,SCON),(*,SCON)X
               &LENGTH,      LENGTH FOR ABS VAL MODS LIKE MACRF/OPTCD  X
               &CLEAN        MODCB CLEAN UP     jm2
         AIF   ('&CB'(1,1) EQ '(').REGCB
&STADDR  SETC  '&CB+&OFFSET'
         AGO   .SOURCE
.REGCB   ANOP
&STADDR  SETC  '&OFFSET.&CB'
.SOURCE  ANOP
         AIF   ('&SOURCE'(1,1) EQ '(').CHK_SCON
         AIF   ('&LENGTH' EQ '4').MV4
         AIF   ('&LENGTH' EQ '1').MV1
         AIF   ('&LENGTH' EQ '8').MV8
         MNOTE 12,'ZMODCB INVALID LENGTH - &LENGTH'
         MEXIT
.MV1     ANOP
.*        MVI   &STADDR,&SOURCE         jm2
         AIF   (T'&CLEAN EQ 'O').MV1OI
         NI    &STADDR,X'FF'-(&CLEAN)   jm2
.MV1OI   ANOP
         OI    &STADDR,&SOURCE          jm2
         MEXIT
.MV4     ANOP
         AIF   ('&SOURCE'(1,1) EQ '=').MV4LIT
         L     0,=A(&SOURCE)
         AGO   .MV4ST
.MV8     ANOP
         AIF   ('&CB'(1,1) EQ '(').MV8REG
         MVC   &CB+&OFFSET.(8),=CL8'&SOURCE'
         MEXIT
.MV8REG  ANOP
         MVC   &OFFSET.(8,&CB(1)),=CL8'&SOURCE'
         MEXIT
.MV4LIT  ANOP
         L     0,&SOURCE
.MV4ST   ANOP
         ST    0,&STADDR
         MEXIT
.CHK_SCON ANOP
         AIF   ('&SOURCE'(1,3) EQ '(S,').SCON_ADDR
         AIF   ('&SOURCE'(1,3) EQ '(*,').SCON_IADDR
.STREG   ANOP
         ST    &SOURCE(1),&STADDR
         MEXIT
.SCON_ADDR ANOP
&ADDR    SETC  '&SOURCE'(4,K'&SOURCE-4)
         LA    0,&ADDR
         ST    0,&STADDR
         MEXIT
.SCON_IADDR ANOP
&ADDR    SETC  '&SOURCE'(4,K'&SOURCE-4)
         L     0,&ADDR
         ST    0,&STADDR
         MEND
./ ADD NAME=ZOPEN    0100-14178-14178-0013-00135-00135-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/15/08                                                 *
.*********************************************************************
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 11/13/05 RPI88 - correct test for DCB register parm
.* 11/13/05 RPI96 - add additional validity checking for parms
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 04/10/06 RPI244 IGNORE OR ISSUE UNSUPPORTED ERROR, SUPPORT (REG)
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/03/07 RPI 668 check return code for each svc and exit if nz
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 09/16/07 RPI 697 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 09/16/07 RPI 682 CHANGE TO GEN DCBD REQUIRED FOR OPEN FLAG REFS
.* 10/14/07 RPI 718 ISSUE MNOTE ERR FOR NN OR RNN WITHOUT ((REG),OPT)
.* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 09/11/08 RPI 764 allow OPEN (reg) for input, use ZSTRMAC
.* 04/19/09 RPI 1021 support MF=L/E
.* 04/19/09 RPI 1023 support lower case options
.* 05/19/09 RPI 1029 remove SPM macros for compatibility
.* 05/28/09 RPI 1045 change to only assume register form if (..)
.* 01/26/11 RPI 1139 remove space from SETC expression
.*********************************************************************
&N       ZOPEN &DCBLIST,   ((DCB,OPT),(DCB,OPT),,) OR DCB OR (REG)     X
               &MF=I,      STD, LIST, OR EXEC                          X
               &MODE=31,   IGNORED AS IT WORKS IN BOTH                 X
               &TYPE=      FLAG TYPE J AS UNSUPPORTED
         AIF   (N'&SYSLIST NE 1)
               MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(2)'
               MEXIT
         AEND
.*
.* OPEN 1 OR MORE FILES DEFINED BY DCB'S WITH INPUT, OUTPUT, UPDATE
.* OPTIONS
.*
         AIF   ('&TYPE' NE '')
               MNOTE 12,'OPEN TYPE= NOT SUPPORTED'
               MEXIT
         AEND
         :&NP      SETA  N'&DCBLIST
         AIF   ('&MF' EQ 'L')
               AIF   ('&N' NE '')
                    :&N       DS    0F
               AEND
               :&I       SETA  1
               AWHILE (&I LE &NP)
                   :&DCB    SETC '&DCBLIST(&I)'
                   :&OPTION SETC (UPPER '&DCBLIST(&I+1,1)')  RPI 1023
                   AIF ('&DCB'(1,1) EQ '(') RPI 764 RPI 1045
                       MNOTE 8,'ZOPEN REGISTER FORM NOT ALLOWED'
                       MEXIT
                   AEND
                   AIF (&I+2 GE &NP)
                       :&VL SETC 'X''80000000''+'
                   AELSE
                       :&VL SETC ''
                   AEND
                   AIF ('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')
                       DC  A(&VL&DCB,DCBOFLGS_GM)   READ ONLY
                   AELSEIF   ('&OPTION' EQ 'OUTPUT')
                       DC  A(&VL&DCB,DCBOFLGS_PM)   WRITE ONLY
                   AELSEIF   ('&OPTION' EQ 'UPDATE')
                       DC  A(&VL&DCB,DCBOFLGS_RW)   READ AND WRITE
                   AELSE
                       MNOTE 12,'OPEN OPTION NOT SUPPORTED - &OPTION'
                       MEXIT
                   AEND
                   :&I SETA &I+2
               AEND
         AELSEIF ('&MF(1)' EQ 'E')
               AIF   ('&N' NE '')
                    :&N       DS    0H
               AEND
               AIF  ('&MF(2)'(1,1) EQ '(')
                    ZOPTLR 14,&MF(2)
               AELSE
                    LA     14,&MF(2)
               AEND
               B    ZOPEN_DO_LOOP&SYSNDX
ZOPEN_DO_UNTIL&SYSNDX DS 0H
               LTR  1,1
               BM   ZOPEN_DO_EXIT&SYSNDX
               LTR  15,15
               BNZ  ZOPEN_DO_EXIT&SYSNDX
ZOPEN_DO_LOOP&SYSNDX DS 0H
                    L   1,0(14)
                    L   0,4(14)
                    SVC 19
                    AHI 14,8
               B    ZOPEN_DO_UNTIL&SYSNDX
ZOPEN_DO_EXIT&SYSNDX DS 0H
         AELSEIF ('&MF'  EQ 'I')
               AIF   ('&N' NE '')
                    :&N       DS    0H
               AEND
               :&I       SETA  1
               AWHILE (&I LE &NP)
                   :&DCB    SETC '&DCBLIST(&I)'
                   :&OPTION SETC UPPER('&DCBLIST(&I+1,1)')  RPI 1023
                   AIF ('&DCB'(1,1) EQ '(') RPI 764 RPI 1045
                       ZOPTLR 1,&DCB(1)
                   AELSE
                       LA     1,&DCB
                   AEND
                   AIF ('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')
                       LA  0,DCBOFLGS_GM   READ ONLY
                   AELSEIF   ('&OPTION' EQ 'OUTPUT')
                       LA  0,DCBOFLGS_PM   WRITE ONLY
                   AELSEIF   ('&OPTION' EQ 'UPDATE')
                       LA  0,DCBOFLGS_RW   READ AND WRITE
                   AELSE
                       MNOTE 12,'OPEN OPTION NOT SUPPORTED - &OPTION'
                       MEXIT
                   AEND
                   SVC   19 OPEN R0=TYPE,R1=DCB/ACB
                   AIF    (&NP GT 2)
                         LTR   15,15
                         BNZ   Z390_OPEN_EXIT&SYSNDX RPI 668
                   AEND
                   :&I SETA &I+2
               AEND
               AIF   (&NP GT 2)
                   :Z390_OPEN_EXIT&SYSNDX EQU *
               AEND
         AELSE
               MNOTE 12,'OPEN MF= TYPE NOT SUPPORTED &MF'
               MEXIT
         AEND
         DCBD
         MEND
./ ADD NAME=ZOPTLR   0100-14178-14178-0013-00030-00030-00000-Z390MAC
         MACRO                                                          00002
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 08/22/07                                                 *
.*********************************************************************
.* 08/22/07 RPI 680 ADD ZOPTLR TO OPTIMIZE LR GENERATION
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 11/10/08 RPI 943 check for (reg) and upgrade to ZSTRMAC
.*********************************************************************
.*
.* TEST FOR SOURCE AND TARGET MATCH TO SKIP GEN OF LR.
.*
.*   1. CHECK FOR LITERAL MATCH OF &P1 VS &P2 OR R&P1 VS &P2
.*      (THIS WILL HANDLE R?? WHEN NOT DEFINED YET BY MACRO).
.*   2. IF &P2 IS DEFINED SYMBOL THEN COMPARE &P1 WITH &P2 EQU VALUE.
.*   3. ELSE GENERATE LR TO BE SAFE.
.*********************************************************************
&N       ZOPTLR &P1,&P2
       AIF   ('&N' NE '')
&N       DS    0H
       AEND
       AIF     ('&P1(1)' NE '&P2(1)'                                   X
                AND '&P1(1)' NE 'R&P2(1)'                              X
                AND 'R&P1(1)' NE '&P2(1)')
         LR    &P1,&P2
       AEND
         MEND
./ ADD NAME=ZREAD    0100-14178-14178-0013-00088-00088-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* MAINTENANCE
.* 10/13/05 ADD DCBREC SUPPORT
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 10/20/05 RPI38 - check for register conflicts
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 01/11/06 RPI170 ALLOW 'S' AS FIFTH PARM
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       ZREAD &DECB,                                                  X
               &TYPE,                                                  X
               &DCB,                                                   X
               &AREA,                                                  X
               &LENGTH,                                                X
               &MF=I        NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR3
         AIF   (N'&SYSLIST LT 5).NPOK
         AIF   (N'&SYSLIST EQ 5 AND '&SYSLIST(5)' EQ '''S''').NPOK
         MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(5)'
.NPOK    ANOP
.*
.*       SEQUENTIALLY READ BLOCK AT CURRENT FILE POSITION
.*
.*       USE CHECK TO VERIFY COMPLETION AND TAKE EODAD/SYNAD EXITS
.*       USE POINT TO CHANGE CURRENT FILE POSITION
.*
.*       DECB -  CREATED INLINE FOR REFERENCE BY CHECK (SEE DECBD)
.*       TYPE -  SF FOR SEQUENTIAL FORWARD, SB FOR SEQUENTIAL BACKWARD
.*       DCB  -  DATA CONTROL BLOCK OPENED WITH R OR RW MACRF
.*       AREA -  AREA TO RECEIVE BLOCK (MUST BE >= DCBBLKSI)
.*
         AIF   ('&DECB'(1,1) EQ '(').DECBREG
         CNOP  0,4
         BAL   1,&DECB+DECBL
&DECB    DC    F'0' DECBECB  (X'40' OK, X'41' I/O ERROR, X'42' EOF)
         DC    H'0' DECBTYPE
         DC    AL2(DECBL)
         DC    A(0) DECBDCBA OPEN DCB WITH MACRF R OR RW
         DC    A(0) DECBAREA AREA FOR BLOCK MUST BE >= DCBBLKSI
         ORG   &DECB+DECBL
         AGO   .CHKDCB
.DECBREG ANOP
         ZOPTLR 1,&DECB(1)
.CHKDCB  ANOP
         AIF   ('&DCB' EQ '').CHKAREA
         AIF   ('&DCB'(1,1) EQ '(').DCBREG
         LA    0,&DCB
         ST    0,DECBDCBA-IHADECB(1)
         AGO   .CHKAREA
.DCBREG  ANOP
         AIF   ('&DCB(1)' EQ 1 OR '&DCB(1)' EQ 'R1').ERR1
         ST    &DCB(1),DECBDCBA-IHADECB(1)
.CHKAREA ANOP
         AIF   ('&AREA' EQ '').AREADEF
         AIF   ('&AREA'(1,1) EQ '(').AREAREG
         LA    0,&AREA
         ST    0,DECBAREA-IHADECB(1)
         AGO   .SVC
.AREADEF ANOP
         L     15,DECBDCBA-IHADECB(1)
         MVC   DECBAREA-IHADECB(4,1),DCBREC-IHADCB(15)
         AGO   .SVC
.AREAREG ANOP
         AIF   ('&AREA(1)' EQ 1 OR '&AREA(1)' EQ 'R1').ERR2
         ST    &AREA(1),DECBAREA-IHADECB(1)
.SVC     ANOP
         SVC   153 READ R0=AREA, R1=DECB
         MEXIT
.ERR1    MNOTE 12,'READ INVALID DCB REGISTER - &DCB(1)'
         MEXIT
.ERR2    MNOTE 12,'READ INVALID AREA REGISTER - &AREA(1)'
         MEXIT
.ERR3    MNOTE 12,'READ MF= NOT SUPPORTED'
         MEXIT
         MEND
./ ADD NAME=ZRETURN  0100-14178-14178-0013-00042-00042-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI  27 - issue error for any undefined operands
.* 06/08/07 RPI 639 - add RC=(reg) support
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 11/10/08 RPI 942 correct to support RC=(15) and upgrade to ZSTRMAC
.* 11/17/08 RPI 953 renamed to ZRETURN to share with other maclibs
.*********************************************************************
&N      ZRETURN &REGS,                                                 X
               &SETFLAG,                                               X
               &MF=I,      NOT SUPPORTED                               X
               &RC=
       AIF   ('&N' NE '')
&N       DS    0H
       AEND
       AIF     ('&MF' NE 'I')
               MNOTE 12,'RETURN MF= NOT SUPPORTED'
               MEXIT
       AEND
       AIF     (N'&SYSLIST GT 2)
               MNOTE 12,'RETURN UNSUPPORTED OPERANDS - &SYSLIST(3)'
               MEXIT
       AEND
         RESTORE &REGS,RC=&RC
       AIF   ('&SETFLAG' EQ 'T')
         OI    15(13),1
       AEND
       AIF   ('&RC' NE '')
             AIF   ('&RC'(1,1) NE '(')
         LA    15,&RC
             AEND
       AEND
         BR    14
         MEND
./ ADD NAME=ZSHOWCB  0100-14178-14178-0013-00059-00059-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 08/27/05                                                 *
.*********************************************************************
.* 08/27/07 INITIAL CODING TO SUPPORT MODCB ACB OR RPL FIELD MODS
.* 09/14/07 RPI 672 CORRECT TARGET > AREA
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       ZSHOWCB &CB,        ACB/RPL ADDRESS OR (REG)                  X
               &CBOFF,       OFFSET TO ACB/RPL FIELD                   X
               &AREA,        RX ADDR, (REG), (S,SCON),(*,SCON)         X
               &AREAOFF,     OFFSET TO AREA FIELD                      X
               &LAREA        LENGTH OF AREA FIELD TO STORE
         AIF   ('&CB'(1,1) EQ '(').REGCB
&SADDR   SETC  '&CB+&CBOFF'
         AGO   .AREA
.REGCB   ANOP
&SADDR   SETC  '&CBOFF.&CB'
.AREA    ANOP
         AIF   ('&AREA'(1,1) EQ '(').CHK_SCON
         AIF   ('&LAREA' EQ '1').MOV1
         AIF   ('&LAREA' EQ '4').MOV4
         AIF   ('&LAREA' EQ '8').MOV8
         MNOTE 12,'ZSHOWCB INVALID AREA FIELD LENGTH - &LAREA'
         MEXIT
.MOV1    ANOP
         IC    0,&SADDR
         STC   0,&AREA+&AREAOFF
         MEXIT
.MOV4    ANOP
         L     0,&SADDR
         ST    0,&AREA+&AREAOFF
         MEXIT
.MOV8    ANOP
         LG    0,&SADDR
         STG   0,&AREA+&AREAOFF
         MEXIT
.CHK_SCON ANOP
         AIF   ('&AREA'(1,3) EQ '(S,').SCON_ADDR
         AIF   ('&AREA'(1,3) EQ '(*,').SCON_IADDR
.LREG   ANOP
         L     &AREA(1),&SADDR
         MEXIT
.SCON_ADDR ANOP
&ADDR    SETC  '&AREA'(4,K'&AREA-4)
         L     0,&SADDR
         ST    0,&ADDR+&AREAOFF
         MEXIT
.SCON_IADDR ANOP
&ADDR    SETC  '&AREA'(4,K'&AREA-4)
.LST     ANOP
         L     0,&SADDR
         L     1,&ADDR
         ST    0,&AREAOFF.(1)
         MEND
./ ADD NAME=ZSORT    0100-14178-14178-0013-00210-00210-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 11/07/09                                                *
.*********************************************************************
.* 11/07/09 RPI 865 ADD INTERNAL SORT CALLED ZSORT USING SVC X'A1'
.* 03/14/10 RPI 1110 CHANGE MEMORY=0 TO ALLOC LARGEST BLOCK AVAIL.
.* 05/24/10 RPI 1116 CORRECT TYPE AND ORDER FIELDS TO 2 BYTES
.* 07/26/10 RPI 865  CORRECT OFFSET TO KEY PARMS
.* 07/26/10 RPI 865  CORRECT EXPANDED KEY TYPES 1-7
.*********************************************************************
.* ISORT - INITIALIZE FOR INTERNAL SORT
.* PUT   - PUT UNOSRTED RECORD TO INTERNAL SORT
.* GET   - GET SORTED   RECORD FORM INTERNAL SORT
.*
.* ISORT REQUIRE FOLLOWING 3 KEYWORD PARAMETERS OR MF > PARMLIST:
.*   LRECL=    - FIXED RECORD LENGTH (MAY BE MAX VARIABLE REC LENGTH)
.*   MEMORY=   - SIZE OF SORT TABLE AVAILABLE FOR RECORDS
.*   FIELDS=   - (OFFSET,LENGTH,TYPE,A/D,,,,,)
.*               WITH FOLLOWING 4 PARAMETERS FOR EACH KEY
.*               A.  OFFSET - BYTES FROM START OF RECORD + 1
.*                   1.  +1 IS FOR COMPATIBILITY WITH IDCAMS CMDS.
.*                   2.  GENERATED OFFSET PASSED TO SORT IS +0
.*                   3.  IF REGISTER (N) USED IT CONTAINS +0 VALUE
.*                   4.  OFFSET DOES NOT INCLUDE VAR PREFIX.
.*               B.  LENGTH - LENGHT OF KEY IN BYTES
.*               C.  TYPE OF KEY:
.*                   1.  AC - ASCII CHARACTERS
.*                   2.  BI - UNSIGNED BINARY
.*                   3.  CH - EBCDIC CHARACTERS
.*                   4.  FI - SIGNED BINARY (F, H, Q - 2, 4, 8, 16)
.*                   5.  FL - FLOATING POINT (HFP,BFP,DFP 4,8,16)
.*                   6.  PD - PACKED DECIMAL (1-16)
.*                   7.  ZD - ZONED DECIMAL
.*               D.  A/D - ASCENDING OR DESCENDING SEQUENCE
.* THE GENERATED PARMLIST OR PARMLIST PASSED VIA MF=(E,addr) HAS
.* THE FOLLOWING FORMAT:
.*   OFFSET LENGTH
.*        0    4   RECORD LENGTH (MAY BE MAX VAR LENGTH)
.*        4    4   MAXIMUM MEMORY TO BE USED BY SORT
.*        8    4   OFFSET TO KEY FIELD N
.*       12    4   LENGTH OF KEY FIELD N
.*       16    2   TYPE OF KEY FIELD N (1-7 SEE ABOVE) VL BIT IF LAST
.*       18    2   ASCENDING=1 OR DESCENDING=0 FIELD N
.*
.* PUT AND GET REQUIRE FOLLOWING KEYWORD PARAMETER:
.*   REC= - ADDRESS OF RECORD AREA FOR INPUT OR OUTPUT
.*
.* RETURN CODES
.*   0  - OPERATION SUCCESSFUL
.*   4  - END OF FILE ON GET
.*  16  - SEE ERROR MESSAGE IF ZSORT ABORTS
.*
.* NOTES:
.*   1.  WOKR FILES SORTWK01 AND SORTWK02 ONLY USED IF MERGE FOR MORE
.*       THAN 2 SORTED STRINGS REQUIRED.  WORK FILES ARE DYNAMICALLY
.*       ALLOCATED TO SORTWK01.TMP AND SORTWK02.TMP IF NOT DEFINED.
.*********************************************************************
&NAME    ZSORT &OP,               ISORT, PUT, GET            ALL       X
               &FIELDS=,          (OFFSET,LENGTH,TYPE,A/D,,) IS/FS     X
               &LRECL=,           FIXED RECORD LENGTH        IS/FS     X
               &MEMORY=0,         MEMORY AVAILABLE TO ZSORT  IS/FS     X
               &REC=,             RECORD ADDRESS             PUT, GET  X
               &MF=               OPTIONAL LIST FOR EXEC ISORT/FSORT
&NAME    DS    0H
         AIF       ('&OP' EQ 'ISORT')
               ACALL ISORT
         AELSEIF   ('&OP' EQ 'PUT')
               ACALL PUT
         AELSEIF   ('&OP' EQ 'GET')
               ACALL GET
         AELSE
               MNOTE 12,'ZSORT INVALID OP (ISORT,FSORT,PUT, OR GET)'
         AEND
         MEXIT
*
* INTERNAL SORT
*
         AENTRY ISORT
         CNOP  0,4
         LA    0,1   ISORT
         ACALL INIT_PARMS
         ACALL SVC
         AEND
*
* PUT RECORD FOR INTERNAL SORT
*
         AENTRY PUT
         ACALL SET_REC
         LA    0,2   PUT
         ACALL SVC
         AEND
*
* GET SORTED RECORD FROM INTERAL SORT AND RETURN ADDR IN R1
*
         AENTRY GET
         ACALL  SET_REC
         LA    0,3   GET
         ACALL SVC
         AEND
*
*
*
         AENTRY SET_REC
       AIF   ('&MF' NE '')
             MNOTE 12,'ZSORT PUT/GET MF= NOT SUPPORED'
             MEXIT
       AEND
       AIF   ('&REC' EQ '')
             MNOTE 12,'ZSORT PUT/GET MISSING REC='
             MEXIT
       AEND
       AIF   ('&REC'(1,1) EQ '(')
         LR    1,&REC(1)
       AELSE
         LA    1,&REC
       AEND
       AEND
*
* GEN PARMS FOR ISORT
*
         AENTRY INIT_PARMS
         AIF   ('&MF' NE '')
               AIF ('&MF(2)'(1,1) EQ '(')
         LR    R1,&MF(2)
               AELSE
         LA    R1,&MF
               AEND
               AEXIT AENTRY
         AEND
&NF      SETA  N'&FIELDS/4
         BAS   1,*+4+8+(8+4)*&NF
         AIF   ('&LRECL' EQ '')
               MNOTE 8,'ZSORT - LRECL NOT DEFINED'
               MEXIT
         AEND
         DC    A(&LRECL) ZSORT LRECL
         AIF   ('&MEMORY' EQ '')
               MNOTE 8,'ZSORT - MEMORY NOT DEFINED'
               MEXIT
         AEND
         DC    A(&MEMORY) ZSORT MEMORY AVAILABLE
         AIF   ('&FIELDS' EQ '')
               MNOTE 8,'ZSORT - FIELDS=(OFF,LNG,TYPE,A/D) NOT DEFINED'
               MEXIT
         AEND
         :&I SETA 1
         AWHILE (&I LE N'&FIELDS)
         DC    A(&FIELDS(&I)-1) ZSORT KEY OFFSET
         DC    A(&FIELDS(&I+1)) ZSORT KEY LENGTH
               AIF ('&FIELDS(&I+2)' EQ 'AC')
         DC    AL2(1) ZSORT KEY TYPE AC ASCII CHARACTER
               AELSEIF ('&FIELDS(&I+2)' EQ 'BI')
         DC    AL2(2) ZSORT KEY TYPE BI UNSIGNED BINARY
               AELSEIF ('&FIELDS(&I+2)' EQ 'CH')
         DC    AL2(3) ZSORT KEY TYPE CH EBCDIC CHARACTER
               AELSEIF ('&FIELDS(&I+2)' EQ 'FI')
         DC    AL2(4) ZSORT KEY TYPE FI SIGNED BINARY (FHQ)
               AELSEIF ('&FIELDS(&I+2)' EQ 'FL')
         DC    AL2(5) ZSORT KEY TYPE FL FLOATING POINT
               AELSEIF ('&FIELDS(&I+2)' EQ 'PD')
         DC    AL2(6) ZSORT KEY TYPE PD PACKED DECIMAL
               AELSEIF ('&FIELDS(&I+2)' EQ 'ZD')
         DC    AL2(7) ZSORT KEY TYPE ZD ZONED DECIMAL
               AELSE
                   MNOTE 8,'ZSORT KEY TYPE UNKNOWN - &FIELD(&I+2)'
                   MEXIT
               AEND
               AIF ('&FIELDS(&I+3)' EQ 'A')
         DC    AL2(1) ZSORT KEY ASCENDING
               AELSEIF ('&FIELDS(&I+3)'(1,1) EQ 'D')
         DC    AL2(0) ZSORT KEY DESCENDING
               AELSE
                   MNOTE 8,'ZSORT KEY ORDER NOT A/D - &FIELD(&I+3)'
                   MEXIT
               AEND
               :&I SETA &I+4
         AEND
         ORG   *-4
         DC    X'80' OVERLAY VL BIT FOR END OF LIST
         ORG
       AIF   ('&LRECL'(1,1) EQ '(')
         ST    &LRECL(1),0(1)
       AEND
       AIF   ('&MEMORY'(1,1) EQ '(')
         ST    &MEMORY(1),4(1)
       AEND
         :&I SETA 1
         :&OFFSET SETA 8         RPI 865
         AWHILE (&I LE N'&FIELDS)
               AIF ('&FIELDS(&I)'(1,1) EQ '(')
         ST    &FIELDS(&I,1),&OFFSET.(1)       STORE AIX OFFSET REG
               AEND
               AIF ('&FIELDS(&I+1)'(1,1) EQ '(')
         ST    &FIELDS(&I+1,1),&OFFSET+4(1)   STORE AIX KEY LEN REG
               AEND
               :&OFFSET SETA &OFFSET+12
               :&I      SETA &I+4
         AEND
         AEND
*
* ISSUE ZSORT SVC
*
         AENTRY SVC
         SVC   X'A1' ZSORT R0=1-ISORT,2-PUT,3=GET R15= 4 AT EOF
         AEND
         MEND
./ ADD NAME=ZSTREQU  0100-14178-14178-0013-00035-00035-00000-Z390MAC
         MACRO
         ZSTREQU
         GBLB  &ZSTR_EQU
         AIF   (&ZSTR_EQU)
               MEXIT
         AEND
         :&ZSTR_EQU SETB 1
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
.********************************************************************
.* EQUBC - DEFINE COMMON EQU SYMBOLS FOR USE IN STRUCTURED MACROS
.********************************************************************
.* 09/27/08 RPI 909 CHANGED FROM CPY TO MAC CALLED BY ZSTRGBL.CPY
.********************************************************************
H        EQU   2
L        EQU   4
E        EQU   8
NH       EQU   13
NL       EQU   11
NE       EQU   7
O        EQU   1
P        EQU   2
M        EQU   4
Z        EQU   8
NP       EQU   13
NM       EQU   11
NZ       EQU   7
NO       EQU   14
EQ       EQU   8
GT       EQU   2
LT       EQU   4
GE       EQU   11
LE       EQU   13
         POP   PRINT,NOPRINT
         MEND
./ ADD NAME=ZTESTCB  0100-14178-14178-0013-00050-00050-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2007 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 08/27/05                                                 *
.*********************************************************************
.* 08/27/07 INITIAL CODING TO SUPPORT MODCB ACB OR RPL FIELD TESTS
.* 09/01/07 RPI 688 USE L,CL VS CLC TO FORCE 4 BYTE RECLEN TEST
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       ZTESTCB &CB,        ACB/RPL ADDRESS OR (REG)                  X
               &OFFSET,      OFFSET TO TARGET FIELD                    X
               &SOURCE,      ABS VAL, RX ADDR, (REG), (S,SCON),(*,SCON)X
               &LSOURCE      LENGTH OF SOURCE
         AIF   ('&CB'(1,1) EQ '(').REGCB
&TADDR   SETC  '&CB+&OFFSET'
         AGO   .SOURCE
.REGCB   ANOP
&TADDR   SETC  '&OFFSET.&CB'
.SOURCE  ANOP
         AIF   ('&SOURCE'(1,1) EQ '(').CHK_SCON
         AIF   ('&LSOURCE' EQ '1').CLI
         AIF   ('&LSOURCE' EQ '4').CL
         MNOTE 12,'ZTESTCB INVALID TESTCB SOURCE LENGTH - &LSOURCE'
         MEXIT
.CLI     ANOP
         CLI   &TADDR,&SOURCE
         MEXIT
.CL      ANOP
         L     0,&TADDR
         CL    0,=A(&SOURCE)
         MEXIT
.CHK_SCON ANOP
         AIF   ('&SOURCE'(1,3) EQ '(S,').SCON_ADDR
         AIF   ('&SOURCE'(1,3) EQ '(*,').SCON_IADDR
.CLREG   ANOP
         CL    &SOURCE(1),&TADDR
         MEXIT
.SCON_ADDR ANOP
&ADDR    SETC  '&SOURCE'(4,K'&SOURCE-4)
         LA    0,&ADDR
         CL    0,&TADDR
         MEXIT
.SCON_IADDR ANOP
&ADDR    SETC  '&SOURCE'(4,K'&SOURCE-4)
         L     0,&ADDR
         CL    0,&STADDR
         MEND
./ ADD NAME=ZWRITE   0100-14178-14178-0013-00088-00088-00000-Z390MAC
         MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* MAINTENANCE
.* 10/13/05 ADD DCBREC SUPPORT
.* 10/20/05 RPI27 - issue error for any undefined operands
.* 10/20/05 RPI38 - check for register conflicts
.* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
.* 01/11/06 RPI170 ALLOW 'S' AS FIFTH PARM
.* 04/25/06 RPI290 ALWAYS DEFINE LABEL IF ANY, CHECK MF=
.* 06/14/07 RPI 641 DEFAULT MF=I
.* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
.* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.*********************************************************************
&N       ZWRITE &DECB,                                                 X
               &TYPE,                                                  X
               &DCB,                                                   X
               &AREA,                                                  X
               &LENGTH,                                                X
               &MF=I       NOT SUPPORTED
         AIF   ('&N' EQ '').SKIPDS
&N       DS    0H
.SKIPDS  ANOP
         AIF   ('&MF' NE 'I').ERR3
         AIF   (N'&SYSLIST LT 5).NPOK
         AIF   (N'&SYSLIST EQ 5 AND '&SYSLIST(5)' EQ '''S''').NPOK
         MNOTE 12,'WRITE UNSUPPORTED OPERANDS - &SYSLIST(5)'
.NPOK    ANOP
.*
.*       SEQUENTIALLY WRITE BLOCK AT CURRENT FILE POSITION
.*
.*       USE CHECK TO VERIFY COMPLETION AND TAKE EODAD/SYNAD EXITS
.*       USE POINT TO CHANGE CURRENT FILE POSITION
.*
.*       DECB -  CREATED INLINE FOR REFERENCE BY CHECK (SEE DECBD)
.*       TYPE -  SF FOR SEQUENTIAL FORWARD, SB FOR SEQUENTIAL BACKWARD
.*       DCB  -  DATA CONTROL BLOCK OPENED WITH RW MACRF
.*       AREA -  AREA TO RECEIVE BLOCK (MUST BE >= DCBBLKSI)
.*
         AIF   ('&DECB'(1,1) EQ '(').DECBREG
         CNOP  0,4
         BAL   1,&DECB+DECBL
&DECB    DC    F'0' DECBECB  (X'40' OK, X'41' I/O ERROR, X'42' EOF)
         DC    H'0' DECBTYPE
         DC    AL2(DECBL)
         DC    A(0) DECBDCBA OPEN DCB WITH MACRF R OR RW
         DC    A(0) DECBAREA AREA FOR BLOCK MUST BE >= DCBBLKSI
         ORG   &DECB+DECBL
         AGO   .CHKDCB
.DECBREG ANOP
         ZOPTLR 1,&DECB(1)
.CHKDCB  ANOP
         AIF   ('&DCB' EQ '').CHKAREA
         AIF   ('&DCB'(1,1) EQ '(').DCBREG
         LA    0,&DCB
         ST    0,DECBDCBA-IHADECB(1)
         AGO   .CHKAREA
.DCBREG  ANOP
         AIF   ('&DCB(1)' EQ 1 OR '&DCB(1)' EQ 'R1').ERR1
         ST    &DCB(1),DECBDCBA-IHADECB(1)
.CHKAREA ANOP
         AIF   ('&AREA' EQ '').AREADEF
         AIF   ('&AREA'(1,1) EQ '(').AREAREG
         LA    0,&AREA
         ST    0,DECBAREA-IHADECB(1)
         AGO   .SVC
.AREADEF ANOP
         L     15,DECBDCBA-IHADECB(1)
         MVC   DECBAREA-IHADECB(4,1),DCBREC-IHADCB(15)
         AGO   .SVC
.AREAREG ANOP
         AIF   ('&AREA(1)' EQ 1 OR '&AREA(1)' EQ 'R1').ERR2
         ST    &AREA(1),DECBAREA-IHADECB(1)
.SVC     ANOP
         SVC   154 WRITE
         MEXIT
.ERR1    MNOTE 12,'WRITE INVALID DCB REGISTER - &DCB(1)'
         MEXIT
.ERR2    MNOTE 12,'WRITE INVALID AREA REGISTER - &AREA(1)'
         MEXIT
.ERR3    MNOTE 12,'WRITE MF= NOT SUPPORTED'
         MEND
