./ ADD NAME=$LA      0114-17085-19011-1901-00138-00116-00000-WJ      19
         Macro
.*-
.* $LA - build LA instruction (inner macro)
.*
.* Returns length in a global variable, length either defined by the
.* 2rd operand, or computed from the 2nd operand.
.* Syntax:
.*   $la  r1,label      -> la    r1,label
.*   $la  r1,,label     -> la    r1,label
.*   $la  r1,number     -> lgfi  r1,nnn
.*   $la  r1,4(,r3)     -> la    r1,4(,r3)                -> length=0
.*   $la  r1,(r2)       -> lr    r1,r2                    -> length=0
.*   $la  r1,'kilroy'   -> la    r1,=c'kilroy'
.*   $la  r1,0          -> slr   r1,r1                    -> length=0
.*   $la  r1,x.label    -> lx    r1,label  (x: B, F or H) -> length=0
.* The length is returned in global variable $lalen, the type in
.* global variable $latype.
.*
.* updates
.* 2017-14-03  numeric value now different from label
.* 2018-06-16  2rd operand is now alternate src, not global length
.* 2019-01-11  change global $LALENC
.*-
&mlbl    $la   &reg,&psrc,&pasrc,&pasrc2,&glen=,&src2=
         lcla  &n,&l
         lclc  &s,&c,&r,&srct,&srcl,&src
         gbla  &$lalen
         gblc  &$lalenc
         gblc  &$latype
&$lalen  seta  0
&$lalenc setc ''
.* select source
         aif   (k'&psrc   gt 0).setsrc1
         aif   (k'&pasrc  gt 0).setsrc2
         aif   (k'&pasrc2 gt 0).setsrc3
         aif   (k'&src2   gt 0).setsrc4
         mnote  8,'** $LA mising source'
.setsrc1 anop
&src     setc  '&psrc'
         ago   .setsrcn
.setsrc2 anop
&src     setc  '&pasrc'
         ago   .setsrcn
.setsrc3 anop
&src     setc  '&pasrc2'
         ago   .setsrcn
.setsrc4 anop
&src     setc  '&src2'
.setsrcn anop
.*
&s       setc  Upper('&src')
         aif   ('&s   '(1,3) eq 'L''''').litlen
&srct    setc  t'&src
&srcl    setc  Lower('&src')
.* mnote *,'type &srct'
.*-
.* what kind of 1st operand do we have?
.*-
         aif   (k'&src gt 0).cp1
         mnote 8,'src operand missing'
         mexit
.cp1     aif   ('&src '(2,1) eq '.').load
         aif   ('&src' eq '0').clr          clear register
         aif   ('&src'(1,1) eq '(').reg     register
         aif   ('&src'(1,1) eq '''').txt    text
         aif   ('&srct' eq 'N').num        number
         ago   .lbl
.*- src is 0, means clear reg
.clr     anop  ,
&$latype setc  'CLR'
&mlbl    slr   &reg,&reg
         mexit
.*- src is a number
.num     anop  ,
&$latype setc  'NUM'
&mlbl    lgfi  &reg,&src
&$lalen  seta  &src
         mexit
.*- src is a label or address
.lbl     anop  ,                           label
&$latype setc  'LBL'
&mlbl    la    &reg,&src
&$lalenc setc  'l''&src'
&c       setc  t'&src
         aif   ('&c' ne 'A').setl0
&n       seta  l'&src
&$lalen  seta  &n
         mexit
.*- src is a register
.reg     anop  ,                           register
&$latype setc  'REG'
&n       seta  (k'&src)-2
&s       setc  '&src'(2,&n)
&mlbl    lr    &reg,&s
&$lalen  seta  1                            default
         mexit
.*- src is text
.txt     anop  ,
&$latype setc  'TXT'
&s       setc  '=c&src'
&mlbl    la    &reg,&s
&n       seta  (k'&src)-2
&$lalen  seta  &n
&$lalenc setc  '&n'
         mexit
.*- load from storage
.load    anop  ,
.* mnote *,'load'
&c       setc  Upper('&srcl'(1,1))
&n       seta  (k'&src)-2
&s       setc  '&src'(3,&n)
&$latype setc  'LFS'
&$lalen  seta  0
         aif   ('&c' eq 'F' or '&c' eq 'A').loadf
         aif   ('&c' eq 'H').loadh
         aif   ('&c' eq 'B').loadb
         mnote 8,*** invalid load parm &c'
         mexit
.loadf   anop  ,
&mlbl    l     &reg,&s                     load from fullword
         mexit
.loadh   anop  ,
&mlbl    lh    &reg,&s                     load from halfword
         mexit
.loadb   anop  ,
&mlbl    sr    &reg,&reg
         ic    &reg,&s                     load from byte
         mexit
*-
.litlen  anop
&n       seta  (k'&src)-4
&$lalen  seta  &n
         la    &reg,&n                     length of literal
         mexit
*-
.setl0   anop
&$lalen  seta  0
.x       Mend
./ ADD NAME=#MODULE  0163-98127-19046-1855-00194-00169-00000-WJ      21
         Macro
.*
.* Setup module start - basereg, working storage etc.
.*
.* base=(reg1Ý,reg2Ý,reg3¨¨)      setup up to 3 baseregs
.* work=(length,label,reg)        acquire dynamic storage
.* work24=(length,label,reg)      acquire dynamic 24-bit storage
.* sa=label | *Ýn¨                save area label or inline
.* prolog=address                 address of prolog subroutine
.* epilog=address                 address of epilog subroutine
.* endÝ,rc=value¨                 return via epilog
.* returnÝ,rc=value¨              return via epilog
.*
.* Changelog
.* 2018-10-27  rc value for end can be syslist(2) i.e #module end,123
.* 2018-11-26  4th parm of work/work24 can be set to 'C' => clear stg
.* 2019-02-05  use &SYSCLOCK(1,16) instead of &SYSDATE+&SYSTIME
.*             add &ver option
.* 2019-02-14  add SYSSTATE OSREL=SYSSTATE,ARCHLVL=OSREL
.*
&mlbl    #MODULE &p1,&amode=31,&rmode=ANY,&text=,&ver=,&rc=,           c
               &base=r12,&sa=,&work=,&work24=,&sp=*future*,            c
               &prolog=,&epilog=,&xprolog=,&xepilog=
.*-
         gblb  &#modequ
         gbla  &iezbits
         gblc  &#modname,&#modrmod,&#modamod
         lcla  &n,&m
         lclc  &s,&l,&base1,&base2,&base3,&dt
         lclc  &worksz,&workrg,&worklb,&workloc,&workclr
&l        setc  '#M&sysndx'
          aif   (k'&p1 eq 0).nop1
&s        setc  Upper('&p1')
          aif   ('&s' eq 'END' or '&s' eq 'RETURN'                     c
               or '&s' eq 'EXIT').end
          mnote 8,'*** Invalid p1'
          mexit
.nop1     anop
          aif   (k'&mlbl gt 0).lblok
          mnote 8,'*** Missing label'
          mexit
.lblok    anop
&#modname setc  '&mlbl'
&#modamod setc  '&amode'
&#modrmod setc  '&rmode'
&base1    setc  '&base(1)'
&base2    setc  '&base(3)'
&base3    setc  '&base(4)'
&worksz   setc  '&work(1)&work24(1)'
&worklb   setc  '&work(2)&work24(2)'
&workrg   setc  '&work(3)&work24(3)'
&workclr  setc  Upper('&work(4)&work24(4)')
&workloc  setc  '&amode'
          aif   (n'&work24 eq 0).worklocn
&workloc  setc  '24'
.worklocn anop
.*-
.* Equate regs and bits
.*-
         push  print
         print off
&n       seta  0
         aif   (&#modequ).equregn  bits allready set
&#modequ setb  1
.equreg  anop
r&n      equ   &n
&n       seta  &n+1
         aif   (&n le 16).equreg
.equregn anop
         aif   (&iezbits ne 0).equbitn  bits allready set
         IEZBITS
.equbitn anop
         pop   print
*-
* Module start
*-
.*       SYSSTATE OSREL=SYSSTATE,ARCHLVL=OSREL
*-
&mlbl    amode &amode
&mlbl    rmode &rmode
&mlbl    Csect
         bakr  14,0
.*       sam&amode
*setup base register(s)
         lr    &base1,r15
         using &mlbl,&base1
         aif   (n'&base eq 1).basen
         lr    &base(2),&base(1)
         alfi  &base(2),4096
         using &mlbl.+4096,&base(2)
         aif   (n'&base eq 2).basen
         lr    &base(3),&base(2)
         alfi  &base(3),4096
         using &mlbl.+8192,&base(3)
.basen   anop
         j     &l.idn
&dt      setc  '&sysclock'(1,16)       YYYY-MM-DD HH:MM
         aif   (k'&text eq 0).id
&n       seta  k'&text
&s       setc  '&text'(2,&n-2)
&mlbl._id dc    c'&mlbl&ver &dt &s'
         ago   .idl
.id      anop
&mlbl._id dc    c'&mlbl&ver &dt'
.idl     anop
&mlbl._idl equ   *-&mlbl._id
&l.idn   ds    0a
.*-
.* get working storage
.*-
         aif   ('&worksz' eq '').workn
         mnote *,'obtain storage, length=&worksz,loc=&workloc'
         Storage OBTAIN,length=&worksz,loc=&workloc
         aif   (k'&workrg eq 0).workn
         lr    &workrg,r1
.* clear storage
         aif   ('&workclr' ne 'C').clrstrn
         lr    r0,r1                   target
         lgfi  r1,&worksz              target length
         la    r14,=al1(0)             source
         la    r15,1                   source length
         mvcl  r0,r14                  clear storage
.clrstrn anop
.*
         aif   (k'&worklb eq 0).workn
         using &worklb,&workrg
.workn   anop
.*-
.* setup save area
.*-
         aif   (k'&sa eq 0).saven
*setup save area
         aif   ('&sa '(1,1) eq '*').saveint
         la    r13,&sa
         ago  .saven
.saveint cnop  0,4
&s       setc  '1'
&n       seta  k'&sa
         aif   (&n eq 1).savein2
&s       setc  '&sa'(2,&n-1)
.savein2 bas   r13,*+(&s*72)+4         address internal save area
         ds    (&s*18)a                internal save area
.saven   anop
.*-
.* setup prolog
.*-
         aif   (k'&prolog ne 0).prologl
         aif   (k'&xprolog ne 0).prologv
         ago   .prologn
.prologl larl  r15,&prolog             prolog address
         ago   .prologc
.prologv l     r15,=v(&xprolog)        prolog address
.prologc basr  r14,r15                 call prolog
.prologn anop
         j     &l.X
.*-
.* setup termination
.*-
* module termination
&mlbl._X cnop  0,4
.*-
.* setup epilog
.*-
         aif   (k'&epilog eq 0 and k'&xepilog eq 0).epilogn
         lr    r2,r15                  copy rc
         aif   (k'&epilog ne 0).epilogl
         aif   (k'&epilog ne 0).epilogl
         aif   (k'&xepilog ne 0).epilogv
         ago   .epilogn
.epilogl larl  r15,&epilog             epilog address
         ago   .epilogc
.epilogv l     r15,=v(&xepilog)        epilog address
.epilogc basr  r14,r15                 call epilog
.epilogn anop
         aif   ('&worksz' eq '').xworkn
         mnote *,'release storage, length=&worksz,addr=&workrg'
         lr    r2,r15
         Storage RELEASE,length=&worksz,addr=(&workrg)
         lr    r15,r2
.xworkn  pr    ,
* end of termination
&l.X     ereg  0,1                     reload regs 0 and 1
*-
* End of module start
*-
         Mexit
.*-
.* return
.*-
.end     anop
&s       setc  '&syslist(2)'
&mlbl    $la   r15,&rc,&s,0
         j     &#modname._X
         Mend
./ ADD NAME=CLEAR    0100-17131-17131-1809-00014-00014-00000-WJ      45
         MACRO
&LBL     CLEAR &A=,&C=C' ',&L=
         LCLC  &LEN,&ADDR
&ADDR    SETC  '&A'
         AIF   (K'&A GT 0).SETL
&ADDR    SETC  '&SYSLIST(1)'
.SETL    ANOP
&LEN     SETC  'L''&ADDR.-1'
         AIF   (K'&L EQ 0).L0900
&LEN     SETC  '&L-1'
.L0900   ANOP
&LBL     MVI   &ADDR,&C
         MVC   &ADDR+1(&LEN),&ADDR
         MEND
./ ADD NAME=LOG      0114-03245-19026-0801-00052-00016-00000-WJ      44
         Macro
&lbl     Log   &p1,&p2,&ddname=SYSPRINT,&MF=,&lrecl=140,&print=
         gblc  &$log_opt_print
         lcla  &p1l
         lclc  &s,&mfp1,&mfp2,&mprint
&s       setc  Upper('&p1')
         aif   ('&s' eq 'OPT').opt
&mfp1    setc  Upper('&mf(1)')
&mfp2    setc  '&mf(2)'
&mprint  setc  '&print'
         aif   (k'&print gt 0).pr12
&mprint  setc  '&$log_opt_print'
.pr12    anop
         aif   (k'&mprint eq 0).pr1n
         push  print
         print &mprint
.pr1n    anop
         aif   ('&s' eq 'OPEN').open
         aif   ('&s' eq 'CLOSE').close
         aif   ('&s' eq 'DCB').dcb
         aif   ('&s' eq 'FIELD').field
&lbl     mvlit logr,&p1
         put   logdcb,logr
         clear logr
         ago   .q
.open    anop
&lbl     open  (logdcb,(OUTPUT))
         ago   .q
.close   anop
&lbl     close (logdcb)
         ago   .q
.dcb     anop
&s       setc  Upper('&ddname')
Logdcb   STDDCB MODEL=SYSPRINT,DDNAME=&s,lrecl=&lrecl
Logdcbl  equ   *-logdcb
&s       setc  Upper('&p2')
         aif   ('&s' eq 'FIELD').field
         ago   .q
.field   anop
logr     dc    cl&lrecl.' '
.q       anop
         aif   (k'&mprint eq 0).pr2n
         pop   print
.pr2n    anop
         mexit
.* set global options
.opt     anop
         aif   (k'&print eq 0).optprn
&$log_opt_print setc  '&print'
         mnote *,'print defailt is now &print'
.optprn  anop
.x       Mend
./ ADD NAME=MVLIT    0104-03018-18311-1550-00019-00006-00000-WJ      07
         MACRO
&lbl     MVLIT &A,&T,&LR=,&lenreg=,&LA=
.* move literal to area
.*  lr : load text length to register
.*  la : load register with address of end of text
         aif   (k'&t eq 0).nullp
         lcla  &tl
&tl      seta  (k'&t)-2
&lbl     mvc   &a.(&tl),=c&t
         aif   (k'&lr eq 0 and k'&lenreg eq 0).lrn
         la    &lr&lenreg,&tl
.lrn     anop
         aif   (k'&la eq 0).lan
         la    &la,&a+&tl
.lan     mexit
.nullp   anop
         aif   (k'&lbl eq 0).x
&lbl     ds    0h
.x       MEND
./ ADD NAME=STDDCB   0102-05113-18216-1601-00159-00141-00000-WJ      13
         MACRO
&ZNAME   STDDCB &L=,&EOD=,&B=,&DSORG=PS,&CTL=,&EXLST=0,                *
               &MODEL=,&DCBD=YES,&DDNAME=,                             *
               &LRECL=,&BLKSZ=,                                        *
               &PRINT=NOGEN,                                           *
               &DIV
.*--------------------------------------------------------------------*
.*  DO 1ST TIME PROCESS                                               *
.*  ONESW IS ALSO SET BY DCBD MACRO                                   *
.*--------------------------------------------------------------------*
         GBLB  &STDDCB,&ONESW
.*
.*--------------------------------------------------------------------*
.*  GENERATE STANDARD DCB TYPES                                       *
.*--------------------------------------------------------------------*
         LCLA  &N,&RS,&BS,&LR
         LCLC  &C,&DTYP,&DCBNM,&CSECT,&ZEOD,&NAME,&DDN,&S,&U
&NAME    SETC  (UPPER '&ZNAME')
.*
.*--------------------------------------------------------------------*
.*  SET VARIOUS OPTIONS                                               *
.*--------------------------------------------------------------------*
         AIF   (K'&DIV EQ 0).DIVN
&C       SETC  '&C'.',&DIV'             CONCATENATE OPTIONS
.DIVN    ANOP
&ZEOD    SETC  '*-*'
         AIF   (K'&EOD EQ 0).EODN
&ZEOD    SETC  '&EOD'
.EODN    ANOP
.*
.*-- DEFAULT RECORD LENGTH AND BLOCKSIZE
         AIF   (K'&LRECL EQ 0).ZRSN
&RS      SETA  &LRECL
         AIF   (K'&BLKSZ GT 0).ZBSN
&BS      SETA  4096/&RS*&RS
.ZBSN    ANOP
.ZRSN    ANOP
.*--
         PUSH  PRINT
         PRINT &PRINT
.*
.*--------------------------------------------------------------------*
.*  STANDARD DUMMY SECTION IS CREATED 1ST TIME AROUND                 *
.*--------------------------------------------------------------------*
         AIF   (&ONESW).DCBD200        BYPASS IF PREVIOUS DCBD
         AIF   ('&DCBD' EQ 'NO').DCBD200
&CSECT   SETC  '&SYSECT'
         DCBD  DSORG=&DSORG
&ONESW   SETB  1
         MNOTE *,'* DUMMY DCB IS CREATED'
&CSECT   CSECT
.DCBD200 ANOP
         AIF   (&STDDCB).DCBD400       BYPASS IF SET
STDDCBLN EQU   DCBEOB+4-IHADCB
         MNOTE *,'* LENGTH OF DCB TYPE 1 IS EQUATED TO STDDCBLN'
&STDDCB  SETB  1
.DCBD400 ANOP
.*
         AIF   (K'&NAME GT 0).NME999
         MNOTE 8,'*** ERROR : NAME ENTRY MISSING'
         AGO   .MEXIT
.NME999  ANOP
.*
.*-- DEFINE LABEL FOR DCB MACRO
         AIF   (K'&NAME EQ 0).DCBNM20
&DCBNM   SETC  '&NAME'
         AGO   .DCBNM99
.DCBNM20 ANOP
&DCBNM   SETC  'DCB&SYSNDX'
.DCBNM99 ANOP
.*--
&DDN     SETC  (UPPER '&NAME')
         AIF   (K'&DDNAME EQ 0).DDNAME2
&DDN     SETC  (UPPER '&DDNAME')
.DDNAME2 ANOP
.*--
&DTYP    SETC  '&NAME'                 DEFAULT: USE DDNAME AS MODEL
         AIF   (K'&MODEL EQ 0).TYP999
&DTYP    SETC  UPPER('&MODEL')
.TYP999  ANOP
.*
&N       SETA  1
.TN      ANOP
.*
.*--------------------------------------------------------------------*
.*   JUMP TO APPROPRIATE DCB                                          *
.*--------------------------------------------------------------------*
         AIF   ('&DTYP' EQ 'SYSPRINT'                                  +
               OR '&DTYP' EQ 'PRINT').SYSP
         AIF   ('&DTYP' EQ 'SYSIN').SYSI
         AIF   ('&DTYP' EQ 'SYSUT1').SYSUT1
         AIF   ('&DTYP' EQ 'SYSUT2').SYSUT2
         AIF   ('&MODEL' EQ 'OUTPUT').STDOUT
         AIF   ('&DTYP' EQ 'SNAPDUMP'                                  +
               OR '&DTYP' EQ 'SNAP').SNAP
         AIF   ('&DTYP' EQ 'DCBD').MEXIT
         AIF   ('&DTYP' EQ 'DSECT').MEXIT
         AIF   ('&DIV' EQ 'DSECT').MEXIT
         MNOTE  8,'*** ERROR - VALID DCB MODEL NOT DEFINED'
         MEXIT
.*
.*--------------------------------------------------------------------*
.*  SYSPRINT STANDARD DCB                                             *
.*--------------------------------------------------------------------*
.SYSP    ANOP
 MNOTE *,'* STANDARD DCB TYPE SYSPRINT - DCB=(RECFM=F,BLKSIZE=121)'
         AIF   (K'&LRECL EQ 0).SYSPLR2
&LR      SETA  &LRECL
         AGO   .SYSPLRN
.SYSPLR2 ANOP
&LR      SETA  132
.SYSPLRN ANOP
         AIF   (K'&BLKSZ EQ 0).SYSPBS2
&BS      SETA  &BLKSZ
         AGO   .SYSPBSN
.SYSPBS2 ANOP
&BS      SETA  4096/&LR*&LR            COMPUTE BLOCKSIZE
.SYSPBSN ANOP
&DCBNM   DCB   DDNAME=&DDN,MACRF=PM,DSORG=PS,                          *
               RECFM=FB&CTL,LRECL=&LR,BLKSIZE=&BS,EXLST=&EXLST
         AGO   .MEXIT
.*--------------------------------------------------------------------*
.*  SYSIN STANDARD DCB                                                *
.*--------------------------------------------------------------------*
.SYSI    ANOP
 MNOTE *,'* STANDARD DCB TYPE SYSIN'
.SYSUT1  ANOP
         AIF   (K'&EOD NE 0).SYSIDCB
 MNOTE 4,'*** WARNING - EOD MISSING'
.SYSIDCB ANOP
&DCBNM   DCB   DDNAME=&DDN,MACRF=GM,DSORG=PS,EODAD=&ZEOD,              C
               EXLST=&EXLST
         AIF   ('&ZEOD' NE '*-*').MEXIT
         AGO   .MEXIT
         MNOTE *,'* WARNING - EOD OPERAND NOT DEFINED - SET TO *-*'
         AGO   .MEXIT
.*
.*--------------------------------------------------------------------*
.*  STANDARD OUTPUT DCB                                               *
.*--------------------------------------------------------------------*
.STDOUT  ANOP
.SYSUT2  ANOP
&NAME    DCB   DDNAME=&DDN,MACRF=PM,DSORG=PS,                          *
               RECFM=FB&CTL,LRECL=&RS,BLKSIZE=&BS,EXLST=&EXLST
         AGO   .MEXIT
.*--------------------------------------------------------------------*
.*  SNAPDUMP STANDARD DCB                                             *
.*--------------------------------------------------------------------*
.SNAP    ANOP
 MNOTE *,'* STANDARD DCB TYPE SNAP, DDNAME(&DDN)'
&DCBNM   DCB   DDNAME=&DDN,MACRF=(W),RECFM=VBA,DSORG=PS,               *
               LRECL=125,BLKSIZE=882,EXLST=&EXLST
         AGO   .MEXIT
.*--------------------------------------------------------------------*
.*  END OF MACRO                                                      *
.*--------------------------------------------------------------------*
.MEXIT   ANOP
         POP   PRINT
         MEND
./ ADD NAME=STRMAKE  0149-18207-19029-1748-00292-00202-00000-WJ      15
         Macro
.* ------------------------------------------------------------------ *
.*                                                                    *
.* StrMake                                                            *
.*                                                                    *
.* Build a string from literals and fields. Specific position and     *
.* skips are also possible.                                           *
.*                                                                    *
.* Syntax                                                             *
.*                                                                    *
.*  STRMAKE fld,.,pos,.,fld,REG=R14|posreg,LR=lenreg,PRINT=print      *
.*                                                                    *
.*    fld   (field,length,conversion,out-length)                      *
.*          length, conversion and out-length are optional.           *
.*                                                                    *
.*          field         label, (reg), literal, f.address            *
.*          length        value, (reg), f|h|b.address                 *
.*          conversion                                                *
.*            C2B         storage -> binary c'0' and c'1'             *
.*            CVD  | C2D  storage -> dec                              *
.*                        in-length and out-length are reqd           *
.*            CVDR        register -> dec                             *
.*                        out-length is required                      *
.*            CVXD | C2X  hex-> dec, i.e. x'1A' -> c'F1C1'            *
.*            UNPK | P2D  packed dec i.e. x'0123C' -> c'123'          *
.*            ST          store register asis (using STCM)            *
.*            STH         store half of register asis (using STCM)    *
.*                        out-length is required                      *
.*          out-length    value, (reg), f|h|b.address                 *
.*          pos           position in string                          *
.*                        +n  skip n positions forward                *
.*                        -n  skip n positions backward               *
.*                        =n  position at n                           *
.*                        =B  position at next blank                  *
.*                                                                    *
.*    posreg        register pointing to the end of the               *
.*                  generated string. Default is R14.                 *
.*    lenreg        register set to length of string                  *
.*    print         print macro option OFF or NOGEN.                  *
.*                                                                    *
.* Registers 14, 15, 0 and 1 may be used internally as work regs, so  *
.* the 'reg' value should not be any of those.                        *
.*                                                                    *
.* Conversion sub-functions typically uses the save are for storing   *
.* intermediate values, so a save area must be available.             *
.*                                                                    *
.* ------------------------------------------------------------------ *
&mlbl    StrMake &reg=R14,&print=,&lenck=N,&lenreg=,&lr=
         aif   (k'&print eq 0).pr1n
         push  print
         print &print
.pr1n    anop
         lcla  &pix,&litl,&incr,&n,&mvcn
         lclc  &str,&fld,&srcl,&cnv,&src,&srcu,&tgt,&tgtl,&s,&lbl,&outl
         lclc  &mask,&lb1,&r,&lm(4),&unpkadr,&strl
         gblc  strmakea,strmakel,&strp2dl
&lm(1)   setc  '1'
&lm(2)   setc  '3'
&lm(3)   setc  '7'
&lm(4)   setc  '15'
.*
.* output string address
.*
&str     setc  '&syslist(1,1)'
         aif   ('&str' eq '*').setstrn
         aif   (k'&str eq 0).setstrn
         $la   &reg,&str               ->str
&strl    setc  '&syslist(1,2)'
         aif   (k'&strl ne 0).strl2
&strl    setc  'l''&str'
.strl2   anop
&strmakea setc '&str'                  remember address
&strmakel setc '&strl'                 remember length
.setstrn anop
.*-
.* do over parmlist
.*-
&pix     seta  1
.scan    anop
&lbl     setc  'SM&sysndx.#&pix'
&pix     seta  &pix+1
         aif   (&pix gt n'&syslist).quit
&src     setc  '&syslist(&pix,1)'
&srcu    setc  (UPPER '&src')
&srcl    setc  '&syslist(&pix,2)'
         aif   (k'&srcl ne 0).srcl2
&srcl    setc  'l''&src'
.srcl2   anop
&cnv     setc  (UPPER '&syslist(&pix,3)')
&outl    setc  '&syslist(&pix,4)'
.* junction 1
         aif   ('&src '(1,1) ne '=').tpositn
         aif   ('&src '(2,1) eq '(').posit     position in register
&n       seta  k'&src
&s       setc  '&src'(2,&n-1)
         aif   (t'&s eq 'N').posit
.tpositn anop
         aif   ('&srcu'(1,2) eq '=B').posbl
         aif   (T'&src eq 'N').posit
         aif   ('&src'(1,1) eq '+').skip
         aif   ('&src'(1,1) eq '-').skipb
.* the width check is not very good, but better than nothing
&s       setc  Upper('&lenck ')
         aif   ('&s'(1,1) ne 'Y' and n'&syslist(1) lt 2).lenckn
         $la   r15,&strmakea
         $la   r0,&strmakel
         ar    r15,r0
         $la   r0,&outl,&srcl
         ar    r0,&reg                    -> after insert
         cr    r0,r15
         jl    &lbl.s
         mvi   0(r14),c'+'
&s       setc  'SM&sysndx.Q'
         j     &s
&lbl.s   equ   *
.lenckn  anop
.* width check end
.* junction 2
         aif   ('&src '(1,1) eq '''').lit
         aif   (k'&cnv eq 0).mvc
         aif   ('&cnv' eq 'CVD').c2d      binary to decimal
         aif   ('&cnv' eq 'C2D').c2d              -
         aif   ('&cnv' eq 'CVDR').cvdr    binary in reg to decimal
         aif   ('&cnv' eq 'P2D').p2d      packed dec -> zoned
         aif   ('&cnv' eq 'UNPK').p2d             -
         aif   ('&cnv' eq 'C2B').c2b      byte to readable bits
         aif   ('&cnv' eq 'C2X').c2x      hex to readable hex
         aif   ('&cnv' eq 'CVX').c2x              -
         aif   ('&cnv' eq 'CVXD').c2x             -
         aif   ('&cnv' eq 'ST').st        store register
         aif   ('&cnv' eq 'STH').sth      store register halfword
         mnote 8,'invalid format: &cnv'
         ago   .quit
.*-
.* src is a field
.* 'outl' is max length
.*-
.mvc     anop
         $la   r15,&srcl
         ltr   r15,r15
         jz    &lbl.N                        no data
         aif   (k'&outl eq 0).mvc2
         $la   r0,&outl
         ltr   r0,r0                         zsro => no check
         jz    &lbl.cf1
         cr    r15,r0
         jnh   &lbl.cf1
         lr    r15,r0
.mvc2    anop
&lbl.cf1 cfi   r15,256
         jh    &lbl.l                        long string
         bctr  r15,0
         $la   r1,&src
         mvc   0(*-*,&reg),0(r1)
         ex    r15,*-6
         la    &reg,1(r15,&reg)
         j     &lbl.n
&lbl.l   equ   *
         stm   r14,r15,12(r13)
         lr    r0,&reg                       -> target
         $la   r14,&src                      -> source
         lr    r1,r15                        copy length
         mvcl  r0,r14
         lm    r14,r15,12(r13)
         ar    &reg,r15
&lbl.n   equ   *
         ago   .scan
.*-
.* Convert hex value in register to decimal
.*-
.cvdr    anop                               source is register
         cvd   &src,16(r13)
         unpk  0(&outl,&reg),16(8,r13)
         oi    &outl-1(&reg),x'f0'
         la    &reg,&outl.(,&reg)
         ago   .scan
.*-
.* Convert hex in string to decimal
.*-
.c2d     anop
         st    &reg,68(,r13)               save pos
         lr    r0,&reg                     preserve r14
         StrC2d call,from=(&src,&srcl),to=((r0),&outl)
         l     &reg,68(,r13)               load pos
         ar    &reg,r0
         ago   .scan
.*-
.* packed dec field
.*-
.p2d     anop                              packed dec
         st    &reg,68(,r13)               save pos
         lr    r0,&reg
         StrP2D call,from=(&src,&srcl),to=((r0),&outl)
         l     &reg,68(,r13)               load pos
         ar    &reg,r0
         ago   .scan
.*-
.* hex-to-char
.*-
.c2x     anop
         st    &reg,68(,r13)               save pos
.* preserve r14
         lr    r1,&reg                     to addr
.*  r14=from,r15=to,r0=len
         StrC2X call,from=(&src,&srcl),to=(r1),setlen=Y
         l     &reg,68(,r13)               load pos
         ar    &reg,r0                     update pos
         ago   .scan
.*-
.* byte to bits
.*-
.c2b     anop
         st    &reg,68(,r13)               save pos
         StrC2B call,from=&src,to=(&reg)
         l     &reg,68(,r13)               load pos
         la    &reg,8(,&reg)
         ago   .scan
.*-
.* literal
.*-
.lit     anop
         aif   (k'&src eq 3).lit100        one char
&litl    seta  k'&src-2
         mvc   0(&litl,&reg),=c&src
         la    &reg,&litl.(,&reg)
         ago   .scan
.lit100  anop
         mvi   0(&reg),c&src
         la    &reg,1(,&reg)
         ago   .scan
.*-
.* store register
.*-
.st      anop
         stcm  &src,15,0(&reg)
         la    &reg,4(,&reg)
         ago   .scan
.*-
.* store lower half of register
.*-
.sth     anop
         stcm  &src,3,0(&reg)
         la    &reg,2(,&reg)
         ago   .scan
.*-
.* skip
.*-
.skip    anop
&s       setc  '&src'(2,k'&src-1)
         ahi   &reg,&s
         ago   .scan
.skipb   anop
&s       setc  '&src'(2,k'&src-1)
         ahi   &reg,-&s
         ago   .scan
.*-
.* position pointer in string
.*-
.posit   anop
&c       setc  '&src'(2,k'&src-1)
.*       la    &reg,&strmakea+&c-1
         $la   &reg,&strmakea
         $la   r15,&c
         bctr  r15,0
         ar    &reg,r15
         ago   .scan
.*-
.* position at next blank
.*-
.posbl   anop
         cli   0(&reg.),c' '
         bne   *+8
         bct   &reg.,*-8
         la    &reg.,1(,&reg.)
         ago   .scan
.*-
.* end of macro
.*-
.quit    anop
&r       setc  '&lenreg&lr'
         aif   (k'&r eq 0).lenregn
         $la   r0,&strmakea
         sr    r14,r0
         lr    r0,r14                    copy gend length
         lr    &r,r14
.lenregn anop
         aif   (k'&print eq 0).pr2n
         pop  print
.pr2n    anop
&s       setc  'SM&sysndx.Q'
&s       ds    0h
         Mend
