{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20190324193015000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "SBGOLOB.PRSMINFO.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SBGOLOB.PRSMINFO.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "190083", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x0f'", "DS1LSTAR": "b'\\x00\\x03\\x18'", "DS1TRBAL": "b'\"\\xcc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f4\\xe0\\x00\\x04\\x98``'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f4\\xe0\\x00\\x04\\x98``'", "b'P\\xf4\\xe5x\\x00\\x00\\x06\\r\\x00\\x00\\x06\\r\\x00\\x0e\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$INSTALL": {"ttr": 791, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00E\\x01\\x19\\x08?\\x01\\x19\\x08?\\x15(\\x00\"\\x00\\r\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-24T00:00:00", "modifydate": "2019-03-24T15:28:45", "lines": 34, "newlines": 13, "modlines": 0, "user": "README"}, "text": "This product displays your IO configuration and related information.\n\n     +------------------ Main Panel -------------------+\n     |                                                 |\n     | COMMAND ===>               SCROLL ===> PAGE     |\n     |                                                 |\n     |                                                 |\n     |  Select one of the following options.           |\n     |                                                 |\n     |      _   1.  LPAR Definition Details            |\n     |          2.  Processor Information              |\n     |          3.  Dynamic I/O Update Details         |\n     |          4.  I/O Configuration Details          |\n     |                                                 |\n     |                                                 |\n     +-------------------------------------------------+\n\nThe original article by R F Perretta is reproduced in member\nPRSMINFA.\n\nIt consists of an assembler program, which must be linkedited as\nSETCODE AC(1) authorized, and it must be authorized in the TSO\nAUTHCMD table (IKJTSOxx PARMLIB member), or use the techniques\nto authorize commands, as described in CBT Files 185, and/or 797,\nIKJEFTE2 table.  And a REXX exec to drive the program, plus\na panel library of ISPF panels.\n\nAnd so the parts of this package are:\n\n1.  An assembler program:  PRSMINFO    AC(1)     (a TSO command)\n2.  A REXX exec:   PROCINFO    (you must change the panel library name)\n3.  A set of ISPF panels       (you must TSO RECEIVE them from XMIT,\n                                and make them accessible to ISPPLIB)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$RECEIVE": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00R\\x01\\x19\\x08?\\x01\\x19\\x08?\\x15\\t\\x00\\x07\\x00\\x05\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-24T00:00:00", "modifydate": "2019-03-24T15:09:52", "lines": 7, "newlines": 5, "modlines": 0, "user": "README"}, "text": "TSO COMMAND TO CREATE THE PANEL DATASET.....\n\nTSO RECEIVE INDS('SBGOLOB.PRSMINFO.PDS(PANELS))\nDSN('your.dsname') VOL(volume)\n\nRemember to rename the panel pds dataset name in the PROCINFO REXX exec.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PANELS": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x19\\x08?\\x01\\x19\\x08?\\x15\\x03\\x00\\xbf\\x00\\xbf\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-24T00:00:00", "modifydate": "2019-03-24T15:03:56", "lines": 191, "newlines": 191, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PROCINFO": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00T\\x01\\x19\\x08?\\x01\\x19\\x08?\\x14P\\x01\\x03\\x01\\x02\\x00\\x00\\xd9\\xc5\\xe7\\xe7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-24T00:00:00", "modifydate": "2019-03-24T14:50:54", "lines": 259, "newlines": 258, "modlines": 0, "user": "REXX"}, "text": "/**rexx**/\n/*  PROGRAM-ID           PROCINFO                                  */\n/*  Remarks              This REXX exec will display the following */\n/*                       information.                              */\n/*                       1. LPAR Definition details                */\n/*                       2. Requester's LPAR details               */\n/*                       3. Dynamic I/O details                    */\n/*                       4. I/O Configuration details              */\n/*trace i*/\nsave_prompt = prompt(\"off\")\noption= '  '                                /* option field       */\n/* --------------------------------------------------------------- */\n/* Change the next line to point to your panel dataset in ISPPLIB. */\n/* --------------------------------------------------------------- */\nADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB DATASET ID('SYS1.U.PANELS')\"\nmain_processing_loop:\ndo forever\n   call display_the_main_panel              /* display main panel */\n   select\n      when (poption = '1') then do          /* LPAR set up?       */\n           call lpar_definitions            /* yes-               */\n      end\n      when (poption = '2') then do          /* requester's LPAR?  */\n           call requesters_lpar_info        /* yes-               */\n      end\n      when (poption = '3') then do          /* display dynamic i/o*/\n           call display_dynamic_io_info     /* yes-               */\n      end\n      when (poption = '4') then do          /* display i/o info?  */\n           call display_io_information      /* yes-               */\n      end\n   end\n   ADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove pop-up      */\nend\nLets_Lock_The_Terminal:\nADDRESS \"ISPEXEC\" \"CONTROL DISPLAY LOCK\" /* lock the terminal      */\nif (rc > 8) then do                      /* error?                 */\n   say 'Lock error    rc = 'rc''         /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(0)                               /* and quit               */\nend\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(3) COLUMN(3)\" /* pop-up position     */\ninfo= 'Your Request Is being Processed Please Wait'\nADDRESS \"ISPEXEC\" \"DISPLAY PANEL(procpan2)\"\nif (rc > 8) then do                      /* error?                 */\n   say 'Display error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(0)                               /* and quit               */\nend\nreturn\ndisplay_the_main_panel:\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(2) COLUMN(10)\" /* pop-up position    */\nADDRESS \"ISPEXEC\" \"DISPLAY PANEL(procpan1)\"\nif (rc > 8) then do                   /* error?                    */\n   say 'Display error    rc = 'rc''   /* yes- output message       */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation         */\n   exit(0)                            /* and quit                  */\nend\nif (rc = 8) then do                   /* return?                   */\n   ADDRESS \"ISPEXEC\" \"REMPOP\"         /* remove pop-up             */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation         */\n   exit(0)                            /* and quit                  */\nend\nreturn\nlpar_definitions:\ncall Lets_Lock_The_Terminal              /* lock the terminal      */\nprsminfo                                 /* obtain the PR/SM info  */\npc= rc                                   /* return code            */\nif (pc \\= 0) then do                     /* error?                 */\n   ADDRESS \"ISPEXEC\" \"REMPOP\"            /* remove pop-up          */\n   select\n      when (pc = 4) then do              /* lra error?             */\n           say 'LRA Error:  rc = 'pc''   /* inform the user        */\n           ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation */\n           exit(0)                       /* and quit               */\n      end\n      when (pc = 8) then do              /* lra error?             */\n           say 'Diagnose Command Error:  rc = 'pc''\n           ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation */\n           exit(0)                       /* and quit               */\n      end\n      when (pc = 8) then do              /* diagnose command error */\n           say 'Diagnose Command Error:  rc = 'pc''\n           ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation */\n           exit(0)                       /* and quit               */\n      end\n      when (pc = 12) then do             /* REXX variable build err*/\n           say 'REXX Build Error:  rc = 'pc''\n           ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation */\n           exit(0)                       /* and quit               */\n      end\n      when (pc = 16) then do             /* No LPARs defined       */\n           ADDRESS \"ISPEXEC\" \"ADDPOP ROW(3) COLUMN(3)\"\n           info= '*** No LPARs Defined On This Processor ***'\n           ADDRESS \"ISPEXEC\" \"DISPLAY PANEL(procpan2)\"\n           if (rc > 8) then do\n              say 'Display error    rc = 'pc''\n              ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"\n              exit(0)\n           end\n           ADDRESS \"ISPEXEC\" \"REMPOP\"    /* remove pop-up          */\n           return                        /* return to caller       */\n      end\n      otherwise\n           say 'Invalid Return Code from PRSMINFO. rc = 'pc''\n           ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation */\n           exit(0)                       /* and quit               */\n   end\nend\nADDRESS \"ISPEXEC\" \"TBCREATE LPARTAB NOWRITE REPLACE\"\nif (rc >  4) then do                     /* call okay?             */\n   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(0)                               /* let's quit             */\nend\nADDRESS  \"ISPEXEC\" \"VPUT    (ztdmark) SHARED\"\ntabrows=  9999                           /* max table rows         */\nx= 6                                     /* starting position      */\nno_of_lpar_entries= x2d(c2x(substr(lparinf,5,1)))\ntimeslce= x2d(c2x(substr(lparinf,1,2)))  /* time slice value       */\nphyproc=  x2d(c2x(substr(lparinf,3,2)))  /* no physical processors */\n                                         /* assigned for PR/SM use */\ndo i= 1 to no_of_lpar_entries            /* do no of table entries */\n   partname= substr(lparinf,x,8)         /* partition name         */\n   partno=   x2d(c2x(substr(lparinf,x+8,1))) /* partition number   */\n   logcpus=  x2d(c2x(substr(lparinf,x+9,1))) /* partition number   */\n   wcompl=   substr(lparinf,x+10,1)      /* wait=completion        */\n   capped=   substr(lparinf,x+11,1)      /* capped                 */\n   relshr=   x2d(c2x(substr(lparinf,x+12,2))) /* partition number  */\n   ADDRESS \"ISPEXEC\" \"TBADD LPARTAB\n      SAVE(partname,partno,logcpus,relshr,wcompl,capped)\n      MULT(\"TABROWS\")\"\n   if (rc \\= 0) then do                  /* call okay?             */\n      say 'tbadd error    rc = 'rc''     /* no- inform the user    */\n      ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation      */\n      exit(0)                            /* let's quit             */\n   end\n   x= (x + 14)                           /* next table entry       */\nend\nADDRESS \"ISPEXEC\" \"REMPOP\"             /* remove pop-up            */\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(1) COLUMN(2)\" /* pop-up position     */\nADDRESS \"ISPEXEC\" \"TBTOP LPARTAB\"      /* position to top of tab   */\nif (rc \\= 0) then do                   /* call okay?               */\n   say 'tbtop error    rc = 'rc''      /* no- inform the user      */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"  /* remove allocation        */\n   exit(0)                             /* let's quit               */\nend\nADDRESS \"ISPEXEC\" \"TBDISPL LPARTAB PANEL(PROCPAN6)\"\nif (rc > 8) then do                   /* error?                    */\n   say 'tbdispl error    rc = 'rc''   /* yes- output message       */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\" /* remove allocation         */\n   exit(0)                            /* and quit                  */\nend\nADDRESS \"ISPEXEC\" \"TBCLOSE  LPARTAB\"  /* close the table           */\nif (rc \\= 0) then do                  /* call okay?                */\n   say 'tbtop error    rc = 'rc''     /* no- inform the user       */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"   /* remove allocation       */\n   exit(0)                              /* let's quit              */\nend\nADDRESS \"ISPEXEC\" \"REMPOP\"              /* remove pop-up           */\nreturn\nrequesters_lpar_info:\ncall Lets_Lock_The_Terminal             /* lock the terminal       */\ncvt=       c2x(storage(10,4))           /* cvt address             */\ncvtfmctl@= d2x((x2d(cvt))+796)          /* cvt + 796 = cvtmfctl    */\ncvtfmctl=  c2x(storage(cvtfmctl@,4))    /* cvtmfctl                */\nstgsbfls@= d2x(x2d(cvtfmctl)+173)       /* stgsbfls @              */\nstgsbfls=  storage(stgsbfls@,1)         /* stgsbfls                */\nprsmproc=  bitand(stgsbfls,'80'x)       /* test pr/sm machine      */\nprsmp= 'N'                              /* set default             */\nif (prsmproc = '80'x) then              /* pr/sm processor?        */\n   prsmp= 'Y'                           /* yes                     */\nescaproc= bitand(stgsbfls,'40'x)        /* test esca processor     */\nescap= 'N'                              /* set default             */\nif (escaproc = '40'x) then              /* esca processor?         */\n   escap= 'Y'                           /* yes                     */\nserlmach= bitand(stgsbfls,'20'x)        /* serial enabled processor*/\nsem=   'N'                              /* set default             */\nif (serlmach = '20'x) then              /* serial enabled machine? */\n   sem= 'Y'                             /* yes                     */\nswitch=  bitand(stgsbfls,'10'x)         /* switch in configuration */\nswtchp= 'N'                             /* set default             */\nif (switch = '10'x) then                /* switch in the config?   */\n   swtchp= 'Y'                          /* yes                     */\nstgsprtn@= d2x(x2d(cvtfmctl)+174)       /* stgsprtn @              */\npartnum=   storage(stgsprtn@,1)         /* partition number        */\npartnum=   c2d(partnum,1)               /* partition number        */\nstgessl@=  d2x(x2d(cvtfmctl)+176)       /* stgessl @               */\nnoestor=   storage(stgessl@,4)          /* number of estor slots   */\nnoestor=   (c2d(noestor)*4096)/1048576  /* convert to megabytes    */\nnoestor=   noestor||'M'                 /* append 'M'              */\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove pop-up          */\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(3) COLUMN(3)\" /* pop-up position     */\nADDRESS \"ISPEXEC\" \"DISPLAY PANEL(procpan3)\"\nif (rc > 8) then do                      /* error?                 */\n   say 'Display error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(0)                               /* and quit               */\nend\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove pop-up          */\nreturn\ndisplay_dynamic_io_info:\ncall Lets_Lock_The_Terminal             /* lock the terminal       */\ncvt=       c2x(storage(10,4))           /* cvt address             */\ncvtfmctl@= d2x((x2d(cvt))+796)          /* cvt + 796 = cvtmfctl    */\ncvtfmctl=  c2x(storage(cvtfmctl@,4))    /* cvtmfctl                */\nstgsdcfl@= d2x(x2d(cvtfmctl)+248)       /* stgsdcfl @              */\nstgsdcfl=  storage(stgsdcfl@,1)         /* stgsdcfl                */\ncciplx=    bitand(stgsdcfl,'20'x)       /* config chg since ipl    */\ncuipl= 'N'                              /* set default             */\nif (cuiplx = '20'x) then                /* configuration changed?  */\n   cuipl= 'Y'                           /* yes                     */\ndioex=  bitand(stgsdcfl,'10'x)          /* dynamic i/o enabled     */\ndioe= 'N'                               /* set default             */\nif (dioex = '10'x) then                 /* dynamic i/o enabled?    */\n   dioe= 'Y'                            /* yes                     */\niodfiplx= bitand(stgsdcfl,'08'x)        /* system IPLed via IODF   */\niodfipl= 'N'                            /* set default             */\nif (iodfiplx = '08'x) then              /* system IPLed via IODF?  */\n   iodfipl= 'Y'                         /* yes                     */\niocvalx=  bitand(stgsdcfl,'04'x)        /* i/o config valid        */\niocval= 'N'                             /* set default             */\nif (iocvalx = '04'x) then               /* i/o config valid?       */\n   iocval= 'Y'                          /* yes                     */\nupdperfx=  bitand(stgsdcfl,'02'x)       /* config update performed?*/\nupdperf= 'N'                            /* set default             */\nif (updperfx = '02'x) then              /* config update performed */\n   updperf= 'Y'                         /* yes                     */\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove pop-up          */\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(3) COLUMN(3)\" /* pop-up position     */\nADDRESS \"ISPEXEC\" \"DISPLAY PANEL(procpan4)\"\nif (rc > 8) then do                      /* error?                 */\n   say 'Display error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(0)                               /* and quit               */\nend\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove pop-up          */\nreturn\ndisplay_io_information:\ncall Lets_Lock_The_Terminal              /* lock the terminal      */\ncvt=       c2x(storage(10,4))            /* cvt address            */\ncvtfmctl@= d2x((x2d(cvt))+796)           /* cvt + 796 = cvtmfctl   */\ncvtfmctl=  c2x(storage(cvtfmctl@,4))     /* cvtmfctl               */\nstgstnm@=  d2x(x2d(cvtfmctl)+258)        /* stgstnm @              */\nioinfo=    storage(stgstnm@,64)          /* i/o config information */\nciodfnme=  substr(ioinfo,1,20)           /* IODF name              */\niodfsufx=  substr(ioinfo,45,2)           /* suffix of IODF name    */\niodfcd=    substr(ioinfo,49,8)           /* IODF creation date     */\niodfct=    substr(ioinfo,57,8)           /* IODF creation time     */\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove pop-up          */\nADDRESS \"ISPEXEC\" \"ADDPOP ROW(3) COLUMN(3)\" /* pop-up position     */\nADDRESS \"ISPEXEC\" \"DISPLAY PANEL(procpan5)\"\nif (rc > 8) then do                      /* error?                 */\n   say 'Display error    rc = 'rc''      /* yes- output message    */\n   ADDRESS \"ISPEXEC\" \"LIBDEF ISPPLIB\"    /* remove allocation      */\n   exit(0)                               /* and quit               */\nend\nADDRESS \"ISPEXEC\" \"REMPOP\"               /* remove pop-up          */\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PRSMINF$": {"ttr": 517, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Q\\x01\\x19\\x08?\\x01\\x19\\x08?\\x14A\\x00\\x1c\\x00\\x1b\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-24T00:00:00", "modifydate": "2019-03-24T14:41:51", "lines": 28, "newlines": 27, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(PRSMINFO)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT,REUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n SETCODE AC(1)\n ORDER   PRSMINFO\n SETSSI  CB497836\n ENTRY   PRSMINFO\n NAME    PRSMINFO(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRSMINFA": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10 o\\x01\\x10 o\\x00\\x00\\x02\\xed\\x02\\xed\\x00\\x00\\xc1\\xd9\\xe3\\xc9\\xc3\\xd3\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-07-25T00:00:00", "modifydate": "2010-07-25T00:00:00", "lines": 749, "newlines": 749, "modlines": 0, "user": "ARTICLE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PRSMINFO": {"ttr": 515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x19\\x08?\\x01\\x19\\x08?\\x142\\x01\\x1d\\x01\\x1c\\x00\\x00\\xc1\\xe2\\xe2\\xd4\\xc2\\xd3\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-24T00:00:00", "modifydate": "2019-03-24T14:32:26", "lines": 285, "newlines": 284, "modlines": 0, "user": "ASSMBLR"}, "text": "PRSMINFO TITLE 'OBTAIN PR/SM LPAR INFORMATION'\nPRSMINFO CSECT\n***********************************************************************\n*        MODULE NAME.   PRSMINFO.                                     *\n*        REMARKS.       TO RETURN THE CURRENT PR/SM SET UP AND FORMAT *\n*                       THIS INFORMATION INTO A REXX VARIABLE.        *\n*        RETURN CODES.  4  = LRA ERROR                                *\n*                       8  = DIAGNOSE COMMAND ERROR                   *\n*                       12 = REXX BUILD ERROR                         *\n*                       16 = NO LPARS DEFINED                         *\n***********************************************************************\n         TITLE 'MAIN PROCESSING LOGIC'\nPRSMINFO AMODE 31\nPRSMINFO RMODE 24\n         BAKR  R14,0                     SAVE CALLER'S ARS + GPRS\n*                                        IN THE LINKAGE STACK\n         LAE   R12,0(R15,0)              SET UP PROGRAM BASE REGISTER\nGETWORK  EQU   *\n         USING PRSMINFO,R12              INFORM THE ASSEMBLER\n         STORAGE OBTAIN,LENGTH=WORKALEN,ADDR=(R10),SP=0,KEY=8,         X\n               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')\n         LAE   R13,0(R10,0)              @ THE WORKAREA\n         USING WORKAREA,R13              INFORM THE ASSEMBLER\n         MVC   PREVSA,=C'F1SA'           PUT ACRONYM INTO SAVEAREA\n*                                        TO INDICATE STATUS SAVED ON\n*                                        THE LINKAGE STACK.\n         STAX  DEFER=YES                 NO INTERRUPTS\n         BAS   R2,GETLPAR                LET'S GET THE LPAR INFO\n         STAX  DEFER=NO                  INTERRUPTS\nRETURN   EQU   *\n         LAE   R1,0(R13,0)               ADDRESS TO FREE\n         STORAGE RELEASE,ADDR=(R1),LENGTH=WORKALEN,SP=0,KEY=8,         X\n               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')\n         LR    R15,R10                   SET RC\n         PR                             RESTORE CALLER'S ARS\n*                                       GPRS 2-14 AND RETURN\n*                                       TO CALLER\n         TITLE 'OBTAIN THE LPAR INFO'\nGETLPAR  EQU   *\n         STCM  R2,B'1111',R2STR1        STORE THE RETURN ADDRESS\n         XR    R10,R10                  CLEAR\n         MVC   MDESETX,MDESETL1         MOVE FOR EXECUTE FORM\n         MODESET MF=(E,MDESETX)         SUPV STATE KEY 0\n         STORAGE OBTAIN,LENGTH=DIAGNLEN,ADDR=(R9),SP=0,KEY=8,          X\n               LOC=(RES,ANY),COND=NO,BNDRY=PAGE\n         LR    R6,R9                    4K ADDRESS\n         LR    R7,R6                    CALCULATE PAGE FIX\n         A     R7,=AL4(DIAGNLEN-1)      ENDING ADDRESS\n         STCM  R6,B'1111',LPARINF@      STORE FOR LATER REFERENCE\n         PGSER R,FIX,A=(R6),EA=(R7),ECB=0,TCB=0,BRANCH=Y,LONG=N\n         LRA   R1,0(R6,0)               LOAD THE REAL ADDRESS\n         BNZ   LRAERR                   TRANSLATION PROBLEM\nDIAGNOSE EQU   *\n         LA    R0,4(0,0)                RETRIEVE PR/SM DATA\nDIAG0204 DC    X'83100204'              DIAGNOSE 0204\n         LTR   R0,R0                    DIAGNOSE OKAY?\n         BNZ   DIAGERR                  NO-\n         MVC   MDESETX,MDESETL2         MOVE FOR EXECUTE FORM\n         MODESET MF=(E,MDESETX)         PROB STATE KEY 8\n         USING LPARDEFS,R6              INFORM THE ASSEMBLER\n         XC    LPARTAB,LPARTAB          CLEAR\n         XR    R8,R8                    SET TO ZERO\n         XR    R3,R3                    SET TO ZERO\n         ICM   R3,B'0001',LPNOPART      NO OF PARTITIONS DEFINED\n         BZ    NOLPAR                   NO LPARS DEFINED\n         LA    R5,LPARDHL(0,0)          TABLE HEADER LENGTH\n         LA    R9,LPARTAB               @ THE LPAR TABLE\n         USING LPARTABL,R9              INFORM THE ASSEMBLER\n         MVC   TIMESLCE,LPTSLICE        TIME SLICE\n         MVC   NUMPPROC,LPNUMPP         NO OF PHYSICAL PROCESSORS\n*                                       ASSIGNED FOR PR/SM USE\n         MVC   NOPARTS,LPNOPART         NO OF CONFIGURED PARTITIONS\n         LA    R9,LPARDHL(,R9)          MOVE OVER THE HEADER\n         LA    R6,LPINFBLK(,R6)         MOVE OVER LPAR INFO BLOCK\nLPARBLD  EQU   *\n         LA    R8,1(,R8)                NO OF LPARS IN REXX VARIABLE\n         MVC   PARTNAME,LPPARTNM        LPAR NAME\n         MVC   PARTNO,LPLPNO            LPAR NO\n         XR    R4,R4                    SET TO ZERO\n         IC    R4,LPNOLCPU              NO OF LOGICAL CPUS\n         MVC   LOGCPS,LPNOLCPU          NO OF LOGICAL CPUS\n         LA    R6,L'LPPARTDE(,R6)       MOVE OVER THE PARTITION DATA\n*                                       ENTRY\n         MVI   WAITCMP,C'Y'             DEFAULT\n         TM    LPFLAG2,LPWCF            WAIT COMPLETION?\n         BO    CAPTEST                  YES-\n         MVI   WAITCMP,C'N'             WAIT COMPLETION=N\nCAPTEST  EQU   *\n         MVI   CAPPED,C'Y'              DEFAULT\n         TM    LPFLAG2,LPCAPPED         CAPPED=Y?\n         BO    CPUREL                   YES-\n         MVI   CAPPED,C'N'              CAPPED=N\nCPUREL   EQU   *\n         MVC   RELSHR,LPPRELS           CPU RELATIVE SHR\nNEXTLCPU EQU   *\n         LA    R15,L'LPLOGPDB(0,0)      LP DATA BLOCK LENGTH\n         MR    R14,R4                   MOVE OVER THE LP DATA BLOCKS\n         LA    R6,0(R15,R6)             MOVE ONTO THE NEXT LPAR\nNEXTLPAR EQU   *\n         LA    R5,LPARDEFL(,R5)         REXX VARIABLE LENGTH\n         LA    R9,LPARDEFL(,R9)         MOVE OVER THE HEADER\n         BCT   R3,LPARBLD               DO WHILE R3 > 0?\n         STC   R8,NOPARTS               NO OF LPARS IN REXX VARIABLE\nSETVAR   EQU   *\n         LA    R14,VARNAME              @ OF VARIABLE NAME TO CREATE\n         STCM  R14,B'1111',VARNPTR      STORE FOR IKJCT441\n         LA    R14,L'VARNAME(0,0)       LENGTH OF VARIABLE NAME\n         STCM  R14,B'1111',VARVNLEN     STORE FOR IKJCT441\n         LA    R14,LPARTAB              @ OF VARIABLE\n         STCM  R14,B'1111',VARVAL@      STORE FOR IKJCT441\n         STCM  R5,B'1111',VARVALLN      STORE AWAY\n         BAL   R2,REXXVAR               BUILD THE REXX VARIABLE\n         LTR   R15,R15                  DID WE BUILD THE VARIABLE?\n         BNZ   STATCHNG                 NO- DAMM IT\nBLDOK    EQU   *\n         SR    R10,R10                  BUILD OKAY\n         B     STATCHNG                 AND LET'S QUIT\nLRAERR   EQU   *\n         LA    R10,4(0,0)               RETURN CODE\n         B     PAGEFREE                 FREE THE PAGE\nDIAGERR  EQU   *\n         LA    R10,8(0,0)               RETURN CODE\n         B     PAGEFREE                 FREE THE PAGE\nNOLPAR   EQU   *\n         LA    R10,12(0,0)              RETURN CODE\n         B     STATCHNG                 GET INTO SUPVR STATE\nSTATCHNG EQU   *\n         MVC   MDESETX,MDESETL1         MOVE FOR EXECUTE FORM\n         MODESET MF=(E,MDESETX)         SUPV STATE KEY 0\nPAGEFREE EQU   *\n         ICM   R6,B'1111',LPARINF@      DIAGNOSE AREA\n         PGSER R,FREE,A=(R6),EA=(R7),TCB=0,BRANCH=Y\n         STORAGE RELEASE,LENGTH=DIAGNLEN,ADDR=(R6),SP=0,KEY=8,         X\n               COND=NO\n         MVC   MDESETX,MDESETL2         MOVE FOR EXECUTE FORM\n         MODESET MF=(E,MDESETX)         PROB STATE KEY 8\n         ICM   R2,B'1111',R2STR1       RETURN ADDRESS\n         BR    R2                      RETURN TO CALLER\n         TITLE 'DEFINE REXX VARIABLE'\nREXXVAR  EQU   *\n         XC    IKJTOKEN,IKJTOKEN       NOT REQUIRED FOR THIS CALL\n         XC    RCODE441,RCODE441       RETURN CODE\n         L     R15,CVTPTR              CVT @\n         USING CVT,R15                 INFORM THE ASSEMBLER\n         L     R15,CVTTVT              TSCT @\n         USING TSVT,R15                INFORM THE ASSEMBLER\n         L     R15,TSVTVACC            IKJCT441 @\n         LTR   R15,R15                 ENTRY POINT FOUND?\n         BNZ   CALL441                 YES- DO A CALL\nLINK441  EQU   *\n         MVC   LINKAREA,LINKL          LINK SL=L\n         MVC   CALLAREA,CALLL          PROG PROGRAM LIST\n         LINK  EP=IKJCT441,                                            X\n               PARAM=(ECODE,           ENTRY CODE                      X\n               VARNPTR,                POINTER TO VARIABLE NAME        X\n               VARVNLEN,               LENGTH  OF VARIABLE NAME        X\n               VARVAL@,                POINTER TO VARIABLE VALUE       X\n               VARVALLN,               LENGTH  OF VARIABLE             X\n               IKJTOKEN,               TOKEN                           X\n               ECTPARM,                NOT REQUIRED                    X\n               RCODE441),              RETURN CODE                     X\n               VL=1,                   EOL                             X\n               MF=(E,CALLAREA),        CALL AREA                       X\n               SF=(E,LINKAREA)         LINK AREA\n         B     CHKRET                  CHECK THE RETURN CODE\nCALL441  EQU   *\n         MVC   CALLAREA,CALLL          PROG PROGRAM LIST\n         CALL  (15),                                                   X\n               (ECODE,                 ENTRY CODE                      X\n               VARNPTR,                POINTER TO VARIABLE NAME        X\n               VARVNLEN,               LENGTH  OF VARIABLE NAME        X\n               VARVAL@,                POINTER TO VARIABLE VALUE       X\n               VARVALLN,               LENGTH  OF VARIABLE             X\n               IKJTOKEN,               TOKEN                           X\n               ECTPARM,                NOT REQUIRED                    X\n               RCODE441),              RETURN CODE                     X\n               VL,                     EOL                             X\n               MF=(E,CALLAREA)\n         B     CHKRET                  CHECK THE RETURN CODE\nCHKRET   EQU   *\n         LTR   R15,R15                 DID WE BUILD THE VARIABLE?\n         BZR   R2                      YES-\n         LA    R10,12(0,0)             SET RC INDICATOR\n         BR    R2                      RETURN TO CALLER\n         LTORG\nVARNAME  DC    CL7'LPARINF'            VARIABLE NAME\nECTPARM  DC    X'FFFFFFFF'             ECT\nECODE    DC    AL4(TSVEUPDT)           CREATE CODE\nLINKL    LINK SF=L\nLINKLEN  EQU   *-LINKL                 LENGTH\nCALLL    CALL  ,(,,,,,,,),MF=L\nCALLLEN  EQU  *-CALLL                  LENGTH\nMDESETL1 MODESET KEY=ZERO,MODE=SUP,MF=L LIST FORM OF MODESET\nMSETLEN1 EQU   *-MDESETL1              LENGTH OF PARAMETER LIST\nMDESETL2 MODESET KEY=NZERO,MODE=PROB,MF=L  LIST FORM OF MODESET\nMSETLEN2 EQU   *-MDESETL2              LENGTH OF PARAMETER LIST\n         TITLE 'STORAGE ITEMS'\nWORKAREA DSECT\nSAVEAREA DS    CL72                    SAVEAREA\nPREVSA   EQU   SAVEAREA+4,4            @ OF PREVIOUS SAVEAREA\nR2STR1   DS    F                       RETURN ADDRESS\nLPARINF@ DS    F                       DIAGNOSE 0204 AREA @\n*  IJKCT441 PARAMETERS                 UNIT NAME\nIKJTOKEN DS    F                       TOKEN\nRCODE441 DS    F                       RETURN CODE\nVARNPTR  DS    F                       VARIABLE NAME PTR\nVARVNLEN DS    F                       VARIABLE NAME LENGTH\nVARVAL@  DS    F                       VARIABLE @\nVARVALLN DS    F                       LENGTH OF VARIABLE\n         DS    0F\nLINKAREA DS    CL(LINKLEN)             LINK AREA\nCALLAREA DS    CL(CALLLEN)             PARM LIST AREA\n         DS    0F                      ALIGNMENT\nMDESETX  DS    XL(MSETLEN1)            MODESET EXECUTE FORM\nLPARTAB  DS    CL(LPARDHL+(LPARDEFL*16))  LPAR DEF TABLE\nWORKALEN EQU   *-WORKAREA              WORK AREA LENGTH\n         TITLE 'DIAGNOSE DATA BLOCK'\nLPARDEFS DSECT\nDIAGNLEN EQU   4096                    DIAGNOSE 0204 BLOCK LENGTH\nLPNOPART DS    X                       NO OF CONFIGURED PARTITIONS\nLPFLAG1  DS    X                       TIMER INFORMATION BLOCK HEADER\n*                                      FLAG\nLPPHY    EQU   X'80'                   ADDITION PARTITION NAMED\n*                                      PHYSICAL IS PRESENT. THIS\n*                                      PARTITION INCLUDES ALL THE\n*                                      UNCAPTURED TIME THAT COULD NOT\n*                                      BE ATTRIBUTED TO A SPECIFIC\n*                                      LOGICAL PARTITION.\nLPTSLICE DS    XL2                     TIME SLICE\nLPNUMPP  DS    XL2                     NUMBER OF PHYSICAL PROCESSORS\n*                                      ASSIGNED FOR PR/SM USE\nLPOFFPD  DS    XL2                     OFFSET TO THE CALLER'S PARTITION\n*                                      DATA\nLPCTODCK DS    XL8                     CURRENT TOD CLOCK READING\nLPINFBLK EQU   *-LPNOPART              INFORMATION BLOCK LENGTH\n         ORG   LPNOPART                ORG BACK\nLPPARTDE DS    0XL16                   PARTITION DATA ENTRY\nLPLPNO   DS    X                       LOGICAL PARTITION NUMBER\nLPNOLCPU DS    X                       NO OF LOGICAL CPUS ASSIGNED\n*                                      TO THIS LOGICAL PARTITION\nLPRESV1  DS    CL6                     RESERVED FOR FUTURE USE\nLPPARTNM DS    CL8                     PARTITION NAME\n         ORG   LPNOPART                ORG BACK\nLPLOGPDB DS    0XL24                   LOGICAL PROCESSOR DATA BLOCKS\nLPCPUADR DS    XL2                     LOGICAL CPU ADDRESS\nLPRESV2  DS    CL3                     RESERVED FOR FUTURE USE\nLPFLAG2  DS    X                       LOGICAL PROCESSOR FLAGS\nLPWCF    EQU   X'80'                   WAIT COMPLETION FLAG. SET BY\n*                                      WAIT COMPLETION=YES\nLPCAPPED EQU   X'40'                   PARTITION CAPPING FLAG. SET BY\n*                                      CAPPED=YES\nLPPRELS  DS    XL2                     THE PARTITION RELATIVE SHARE OF\n*                                      THE SYSTEM. THIS VALUE WILL BE\n*                                      IN THE RANGE 0-999. IF THE VALUE\n*                                      IS 65,535 THEN THE LOGICAL\n*                                      PARTITION USES DEDICATED CPUS.\nLPPCPTM1 DS    XL8                     THE ACCUMULATED NO OF MICROSECS\n*                                      DURING WHICH A PHYSICAL CPU\n*                                      WAS ASSIGNED TO THIS LOGICAL CPU\nLPPCPTM2 DS    XL8                     THE ACCUMULATED NO OF MICROSECS\n*                                      DURING WHICH A PHYSICAL CPU\n*                                      WAS ASSIGNED TO THIS LOGICAL CPU\n*                                      EXCLUDING LPAR MANAGEMENT TIME\n         TITLE 'REXX VARIABLE TABLE'\nLPARTABL DSECT\nTIMESLCE DS    XL2                     TIME SLICE\nNUMPPROC DS    XL2                     NUMBER OF PHYSICAL PROCESSORS\n*                                      ASSIGNED FOR PR/SM USE\nNOPARTS  DS    XL1                     NO OF PARTITION DEFINITIONS\n*                                      FOLLOWING\nLPARDHL  EQU   *-PARTNAME              LPAR DEF ENTRY HEADER LENGTH\n         ORG   LPARTABL\nPARTNAME DS    CL8                     PARTITION NAME\nPARTNO   DS    X                       PARTITION NUMBER\nLOGCPS   DS    X                       NO OF LOGICAL CPS ASSIGNED\nWAITCMP  DS    C                       WAIT COMPLETION\nCAPPED   DS    C                       CAPPED\nRELSHR   DS    XL2                     RELATIVE PARTITION CPU SHARE\nLPARDEFL EQU   *-PARTNAME              LPAR DEF ENTRY\n         TITLE 'CVT DSECT'\n         CVT   DSECT=YES,LIST=NO\n         TITLE 'TSVT'\n         IKJTSVT\n         YREGS\n         END   PRSMINFO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT836/CBT.V500.FILE836.PDS/PRSMINFO.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT836/CBT.V500.FILE836.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}