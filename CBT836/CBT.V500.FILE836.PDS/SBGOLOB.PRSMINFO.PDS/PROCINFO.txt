/**rexx**/
/*  PROGRAM-ID           PROCINFO                                  */
/*  Remarks              This REXX exec will display the following */
/*                       information.                              */
/*                       1. LPAR Definition details                */
/*                       2. Requester's LPAR details               */
/*                       3. Dynamic I/O details                    */
/*                       4. I/O Configuration details              */
/*trace i*/
save_prompt = prompt("off")
option= '  '                                /* option field       */
/* --------------------------------------------------------------- */
/* Change the next line to point to your panel dataset in ISPPLIB. */
/* --------------------------------------------------------------- */
ADDRESS "ISPEXEC" "LIBDEF ISPPLIB DATASET ID('SYS1.U.PANELS')"
main_processing_loop:
do forever
   call display_the_main_panel              /* display main panel */
   select
      when (poption = '1') then do          /* LPAR set up?       */
           call lpar_definitions            /* yes-               */
      end
      when (poption = '2') then do          /* requester's LPAR?  */
           call requesters_lpar_info        /* yes-               */
      end
      when (poption = '3') then do          /* display dynamic i/o*/
           call display_dynamic_io_info     /* yes-               */
      end
      when (poption = '4') then do          /* display i/o info?  */
           call display_io_information      /* yes-               */
      end
   end
   ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up      */
end
Lets_Lock_The_Terminal:
ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK" /* lock the terminal      */
if (rc > 8) then do                      /* error?                 */
   say 'Lock error    rc = 'rc''         /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(3)" /* pop-up position     */
info= 'Your Request Is being Processed Please Wait'
ADDRESS "ISPEXEC" "DISPLAY PANEL(procpan2)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
return
display_the_main_panel:
ADDRESS "ISPEXEC" "ADDPOP ROW(2) COLUMN(10)" /* pop-up position    */
ADDRESS "ISPEXEC" "DISPLAY PANEL(procpan1)"
if (rc > 8) then do                   /* error?                    */
   say 'Display error    rc = 'rc''   /* yes- output message       */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation         */
   exit(0)                            /* and quit                  */
end
if (rc = 8) then do                   /* return?                   */
   ADDRESS "ISPEXEC" "REMPOP"         /* remove pop-up             */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation         */
   exit(0)                            /* and quit                  */
end
return
lpar_definitions:
call Lets_Lock_The_Terminal              /* lock the terminal      */
prsminfo                                 /* obtain the PR/SM info  */
pc= rc                                   /* return code            */
if (pc \= 0) then do                     /* error?                 */
   ADDRESS "ISPEXEC" "REMPOP"            /* remove pop-up          */
   select
      when (pc = 4) then do              /* lra error?             */
           say 'LRA Error:  rc = 'pc''   /* inform the user        */
           ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation */
           exit(0)                       /* and quit               */
      end
      when (pc = 8) then do              /* lra error?             */
           say 'Diagnose Command Error:  rc = 'pc''
           ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation */
           exit(0)                       /* and quit               */
      end
      when (pc = 8) then do              /* diagnose command error */
           say 'Diagnose Command Error:  rc = 'pc''
           ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation */
           exit(0)                       /* and quit               */
      end
      when (pc = 12) then do             /* REXX variable build err*/
           say 'REXX Build Error:  rc = 'pc''
           ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation */
           exit(0)                       /* and quit               */
      end
      when (pc = 16) then do             /* No LPARs defined       */
           ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(3)"
           info= '*** No LPARs Defined On This Processor ***'
           ADDRESS "ISPEXEC" "DISPLAY PANEL(procpan2)"
           if (rc > 8) then do
              say 'Display error    rc = 'pc''
              ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"
              exit(0)
           end
           ADDRESS "ISPEXEC" "REMPOP"    /* remove pop-up          */
           return                        /* return to caller       */
      end
      otherwise
           say 'Invalid Return Code from PRSMINFO. rc = 'pc''
           ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation */
           exit(0)                       /* and quit               */
   end
end
ADDRESS "ISPEXEC" "TBCREATE LPARTAB NOWRITE REPLACE"
if (rc >  4) then do                     /* call okay?             */
   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* let's quit             */
end
ADDRESS  "ISPEXEC" "VPUT    (ztdmark) SHARED"
tabrows=  9999                           /* max table rows         */
x= 6                                     /* starting position      */
no_of_lpar_entries= x2d(c2x(substr(lparinf,5,1)))
timeslce= x2d(c2x(substr(lparinf,1,2)))  /* time slice value       */
phyproc=  x2d(c2x(substr(lparinf,3,2)))  /* no physical processors */
                                         /* assigned for PR/SM use */
do i= 1 to no_of_lpar_entries            /* do no of table entries */
   partname= substr(lparinf,x,8)         /* partition name         */
   partno=   x2d(c2x(substr(lparinf,x+8,1))) /* partition number   */
   logcpus=  x2d(c2x(substr(lparinf,x+9,1))) /* partition number   */
   wcompl=   substr(lparinf,x+10,1)      /* wait=completion        */
   capped=   substr(lparinf,x+11,1)      /* capped                 */
   relshr=   x2d(c2x(substr(lparinf,x+12,2))) /* partition number  */
   ADDRESS "ISPEXEC" "TBADD LPARTAB
      SAVE(partname,partno,logcpus,relshr,wcompl,capped)
      MULT("TABROWS")"
   if (rc \= 0) then do                  /* call okay?             */
      say 'tbadd error    rc = 'rc''     /* no- inform the user    */
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation      */
      exit(0)                            /* let's quit             */
   end
   x= (x + 14)                           /* next table entry       */
end
ADDRESS "ISPEXEC" "REMPOP"             /* remove pop-up            */
ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(2)" /* pop-up position     */
ADDRESS "ISPEXEC" "TBTOP LPARTAB"      /* position to top of tab   */
if (rc \= 0) then do                   /* call okay?               */
   say 'tbtop error    rc = 'rc''      /* no- inform the user      */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"  /* remove allocation        */
   exit(0)                             /* let's quit               */
end
ADDRESS "ISPEXEC" "TBDISPL LPARTAB PANEL(PROCPAN6)"
if (rc > 8) then do                   /* error?                    */
   say 'tbdispl error    rc = 'rc''   /* yes- output message       */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB" /* remove allocation         */
   exit(0)                            /* and quit                  */
end
ADDRESS "ISPEXEC" "TBCLOSE  LPARTAB"  /* close the table           */
if (rc \= 0) then do                  /* call okay?                */
   say 'tbtop error    rc = 'rc''     /* no- inform the user       */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"   /* remove allocation       */
   exit(0)                              /* let's quit              */
end
ADDRESS "ISPEXEC" "REMPOP"              /* remove pop-up           */
return
requesters_lpar_info:
call Lets_Lock_The_Terminal             /* lock the terminal       */
cvt=       c2x(storage(10,4))           /* cvt address             */
cvtfmctl@= d2x((x2d(cvt))+796)          /* cvt + 796 = cvtmfctl    */
cvtfmctl=  c2x(storage(cvtfmctl@,4))    /* cvtmfctl                */
stgsbfls@= d2x(x2d(cvtfmctl)+173)       /* stgsbfls @              */
stgsbfls=  storage(stgsbfls@,1)         /* stgsbfls                */
prsmproc=  bitand(stgsbfls,'80'x)       /* test pr/sm machine      */
prsmp= 'N'                              /* set default             */
if (prsmproc = '80'x) then              /* pr/sm processor?        */
   prsmp= 'Y'                           /* yes                     */
escaproc= bitand(stgsbfls,'40'x)        /* test esca processor     */
escap= 'N'                              /* set default             */
if (escaproc = '40'x) then              /* esca processor?         */
   escap= 'Y'                           /* yes                     */
serlmach= bitand(stgsbfls,'20'x)        /* serial enabled processor*/
sem=   'N'                              /* set default             */
if (serlmach = '20'x) then              /* serial enabled machine? */
   sem= 'Y'                             /* yes                     */
switch=  bitand(stgsbfls,'10'x)         /* switch in configuration */
swtchp= 'N'                             /* set default             */
if (switch = '10'x) then                /* switch in the config?   */
   swtchp= 'Y'                          /* yes                     */
stgsprtn@= d2x(x2d(cvtfmctl)+174)       /* stgsprtn @              */
partnum=   storage(stgsprtn@,1)         /* partition number        */
partnum=   c2d(partnum,1)               /* partition number        */
stgessl@=  d2x(x2d(cvtfmctl)+176)       /* stgessl @               */
noestor=   storage(stgessl@,4)          /* number of estor slots   */
noestor=   (c2d(noestor)*4096)/1048576  /* convert to megabytes    */
noestor=   noestor||'M'                 /* append 'M'              */
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(3)" /* pop-up position     */
ADDRESS "ISPEXEC" "DISPLAY PANEL(procpan3)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
return
display_dynamic_io_info:
call Lets_Lock_The_Terminal             /* lock the terminal       */
cvt=       c2x(storage(10,4))           /* cvt address             */
cvtfmctl@= d2x((x2d(cvt))+796)          /* cvt + 796 = cvtmfctl    */
cvtfmctl=  c2x(storage(cvtfmctl@,4))    /* cvtmfctl                */
stgsdcfl@= d2x(x2d(cvtfmctl)+248)       /* stgsdcfl @              */
stgsdcfl=  storage(stgsdcfl@,1)         /* stgsdcfl                */
cciplx=    bitand(stgsdcfl,'20'x)       /* config chg since ipl    */
cuipl= 'N'                              /* set default             */
if (cuiplx = '20'x) then                /* configuration changed?  */
   cuipl= 'Y'                           /* yes                     */
dioex=  bitand(stgsdcfl,'10'x)          /* dynamic i/o enabled     */
dioe= 'N'                               /* set default             */
if (dioex = '10'x) then                 /* dynamic i/o enabled?    */
   dioe= 'Y'                            /* yes                     */
iodfiplx= bitand(stgsdcfl,'08'x)        /* system IPLed via IODF   */
iodfipl= 'N'                            /* set default             */
if (iodfiplx = '08'x) then              /* system IPLed via IODF?  */
   iodfipl= 'Y'                         /* yes                     */
iocvalx=  bitand(stgsdcfl,'04'x)        /* i/o config valid        */
iocval= 'N'                             /* set default             */
if (iocvalx = '04'x) then               /* i/o config valid?       */
   iocval= 'Y'                          /* yes                     */
updperfx=  bitand(stgsdcfl,'02'x)       /* config update performed?*/
updperf= 'N'                            /* set default             */
if (updperfx = '02'x) then              /* config update performed */
   updperf= 'Y'                         /* yes                     */
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(3)" /* pop-up position     */
ADDRESS "ISPEXEC" "DISPLAY PANEL(procpan4)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
return
display_io_information:
call Lets_Lock_The_Terminal              /* lock the terminal      */
cvt=       c2x(storage(10,4))            /* cvt address            */
cvtfmctl@= d2x((x2d(cvt))+796)           /* cvt + 796 = cvtmfctl   */
cvtfmctl=  c2x(storage(cvtfmctl@,4))     /* cvtmfctl               */
stgstnm@=  d2x(x2d(cvtfmctl)+258)        /* stgstnm @              */
ioinfo=    storage(stgstnm@,64)          /* i/o config information */
ciodfnme=  substr(ioinfo,1,20)           /* IODF name              */
iodfsufx=  substr(ioinfo,45,2)           /* suffix of IODF name    */
iodfcd=    substr(ioinfo,49,8)           /* IODF creation date     */
iodfct=    substr(ioinfo,57,8)           /* IODF creation time     */
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(3)" /* pop-up position     */
ADDRESS "ISPEXEC" "DISPLAY PANEL(procpan5)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
return
