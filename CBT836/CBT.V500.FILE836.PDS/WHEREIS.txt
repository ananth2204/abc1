*
* Determining where a module was loaded from
*
*
* PROGRAM SOURCE CODE
*
* Original version:
* Paul Poolsaar
* Systems Programmer (Canada)                             1996
*
* Rather heavily modified by Willy Jensen, 2019.
*   TSOPUTLN line replaces TPUTs. Macro supplied by Willy Jensen
*   new macros MVLIT and CLEAR.   Macros supplied by Willy Jensen
*
         Macro
.*-
.*   TSOPUTLN - assembler macro - TSO putline not needing setup.
.*
.* The macro is self-contained in that  it does not need an external
.* subroutine, the  subroutine is generated internally  at the first
.* macro expansion.
.*
.* The macro  works even if  used in a  mdule started with  the BAKR
.* instruction, because  the generated  subroutine uses  EXTRACT and
.* LOCASCB to  get the necessary runtime  info, it does not  rely on
.* tracing back through save areas.
.*
.* It may cause a slight  performance degradation as the module must
.* format the message string, so GETMAINs and FREEMAINs a work area.
.* On the other hand, this  makes the subroutine fully reentrant and
.* reusable.
.*
.* Syntax
.*
.*  TSOPUTLN address,length (,DSECT=YES/NO)
.*           address     Address of text. Required.
.*                       May be label, (reg) or F|H|B.label for
.*                       L label, LH label or LB label.
.*           length      Length of text. Number or (reg). Default
.*                       is length of 'address'.
.*           DSECT=YES   Generate various neccessary IBM dsects.
.*           DSECT=NO    Do not generate IBM dsects. This is used
.*                       when those dsects are generated elsewhere.
.*
.* Samples
.*
.*            la    r5,120
.*            TsoPutln msg,(r5)
.*
.*            la    r4,msg
.*            TsoPutln (r4),(r5)
.*
.*            TsoPutln text
.*
.*            TsoPutln text,25
.*
.*            TsoPutln 'Just another fine day'
.*
.*            TsoPutln f.textaddr,h.textlen
.*
.*   msg      ds    cl256
.*   textaddr dc    a(test)
.*   textlen  dc    y(l'test)
.*   text     dc    c'Kilroy was here'
.*   text2    dc    c' and it is such a nice day today'
.*
.* Note
.*
.* TSOPUTLN does not work when used in a REXX function, i.e. n=PGM()
.*
.* by: Willy Jensen
.*     mail: wj-53@outlook.com
.*     web : http://harders-jensen.com/wjtech/index.html
.*-
&mlbl    TSoPutLn &print=nogen,&dsects=YES
         lcla  &n,&pn
         lclc  &q,&l,&sect,&src,&len,&p,&r
         gblb  @@tsoputln
         gblc  $xlalen
&q       setc  Upper('&syslist(1)')
         aif   ('&q' eq 'XLA').xla
&l       setc  'tp&sysndx'
&sect    setc  '&sysect'
&src     setc  '&syslist(1)'
&len     setc  '&syslist(2)'
         aif   (k'&mlbl eq 0).mlbln
&mlbl    ds    0h
.mlbln   anop
.* text address - label, (reg) or 'literal'
         TSOPUTLN xla,r1,&src
.* text length - label, (reg) or null. if null then set l'text
         TSOPUTLN xla,r0,&len,&$xlalen
         l     r15,=v(TSOPUTLN)
         basr  r14,r15
         aif   (&@@tsoputln).x
.*-
.* module
.*-
&@@tsoputln setb 1
         push  using
         push  print
         print &print
*-
* TSOPUTLN module
*-
TSOPUTLN Csect
         save  (14,12)
         lr    r12,r15
         Using TSOPUTLN,r12
         Using @tputblk,r10
         lr    r2,r1                   copy text/buffer address
         lr    r3,r0                   copy text length
*- get storage
         la    r9,@tputblkl+4(r3)      blk+text length
         Getmain R,lv=(r9),loc=31
         lr    r10,r1
         lr    r0,r10
         la    r1,@tputblkl
.*       la    r14,=al1(0)
         la    r14,tsoputln_al10
         la    r15,1
         mvcl  r0,r14
         st    r10,8(,r13)             chain
         st    r13,4(,r10)               save
         lr    r13,r10                     areas
*- copy data
         la    r1,4(,r3)               set length
         sll   r1,16                   to upper halfword
         st    r1,@tputlen             store as prefix
         la    r14,@tputtext           target address
         lr    r15,r3                  copy length
         mvcl  r14,r2                  copy text
*- obtain address of the upt through the extract facility
         la    r0,@tputiopl
         EXTRACT (0),'S',FIELDS=(PSB,ASID),MF=(E,@tputextr)
         l     r1,@tputiopl
         mvc   @tputupta,pscbupt-pscb(r1)
*- obtain address of the ect from the lwa control block
         l     r1,@tputiopl+4          asid
         LOCASCB ASID=(1)
         l     r1,ascbasxb-ascb(,r1)   -> asxb
         l     r1,asxblwa-asxb(,r1)    -> lwa
         mvc   @tputecta,lwapect-lwa(r1) get ect address
*- do putline
         xc    @tputecb,@tputecb
         xc    @tputiopl(16),@tputiopl
         l     r14,@tputupta
         l     r15,@tputecta
         PUTLINE PARM=@tputmfl,UPT=(r14),ECT=(r15),ECB=@tputecb,       c
               OUTPUT=(@tputlen,TERM,SINGLE,DATA),MF=(E,@tputiopl)
         lr    r5,r15
*- release storage
         l     r13,4(,r13)             <- callers save area
         Freemain R,lv=(r9),a=(r10)
*- back
         lr    r15,r5                  set return code
         lm    r2,r12,28(r13)          reload gregs
         l     r14,12(,r13)            return address
         br    r14                     and return
tsoputln_al10  dc al1(0)
         drop  r10,r12
*-
* TSOPUTLN local dsects
*-
@tputblk  dsect
@tputsa1  ds    18a
@tputextr EXTRACT MF=L
*         org   @tputextr
@tputecb  ds    a
@tputecta ds    a
@tputupta ds    a
*         org
@tputiopl ds    4a
@tputmfl  PUTLINE MF=L
@tputmsgl ds    a
@tputmsg  ds    cl255
@tputlen  ds    a
@tputtext ds    0c
@tputblkl equ   *-@tputblk
         aif   ('&dsects' ne 'YES').dsctn
*-
* TSOPUTLN IBM dsect expansions (if requested)
*-
         IKJPSCB
         IHAASCB
         IHAASXB
         IKJEFLWA
.dsctn   anop
         pop   print
.* rejoin csect
&sect    Csect                         resume main
         pop  using
.x       Mexit
.*-
.* XLA - subroutine, generate Lx instruction
.* Syntax: macname XLA,reg,ahat
.*                 what: label, (reg), 'literal', f/h/b.label
.*-
.XLA     anop
         lclc  &xlar,&xlap,&xla
         lcla  &xlapn,&xlan
&$xlalen setc  ''
&xlar    setc  '&syslist(2)'
&xlapn   seta  2
.xlanext anop
&xlapn   seta  &xlapn+1
         aif   (&xlapn gt n'&syslist).xlan
&xlap    setc  '&syslist(&xlapn)'
         aif   (k'&xlap eq 0).xlanext
         aif   ('&xlap '(1,1) eq '(').xlareg
         aif   ('&xlap '(1,1) eq '''').xlalit
         aif   ('&xlap  '(2,1) eq '.').xlafld
&xla     setc  t'&xlap
         aif   ('&xla' eq 'N').xlanum
         la    &xlar,&xlap
&$xlalen setc 'l''&xlap'
         mexit
.xlanum  anop
         lgfi  &xlar,&xlap
         mexit
.xlafld  anop
&xlan    seta  k'&xlap-2
&xla     setc  '&xlap'(1,1)
&xla     setc  Upper('&xla')
         aif   ('&xla' ne 'F').xlafld2
&xla     setc  ''
.xlafld2 anop
&xlap    setc  '&xlap'(3,&xlan)
         l&xla &xlar,&xlap
         mexit
.xlareg  anop
&xlan    seta  k'&xlap-2
&xlap    setc  '&xlap'(2,&xlan)
         lr    &xlar,&xlap
         mexit
.xlalit  anop
         la    &xlar,=c&xlap
&xlan    seta k'&xlap-2
&$xlalen setc '&xlan'
.xlan    mexit
         MEND

         MACRO
&mlbl    MVLIT &a,&t
         lcla  &l
&l       seta   k'&t-2
&mlbl    mvc   &a.(&l),=c&t
         MEND

         MACRO
&mlbl    CLEAR &a
&mlbl    mvi   &a,c' '
         mvc   &a+1(l'&a-1),&a
         MEND

* (mostly) original code follows
         YREGS
WHEREIS  CSECT
WHEREIS  AMODE 31
WHEREIS  RMODE ANY
         BAKR  14,0               Save regs, ARs, etc on linkage stack
         LAE   12,0(15,0)         Base register
         USING WHEREIS,12
         B     INIT               Branch around constants
         DC    CL9'WHEREIS '
         DC    CL9'&SYSDATE'
         DC    CL8'&SYSTIME'
         SPACE
INIT     EQU   *
         LR    R10,R1
         USING CPPL,R10
         STORAGE OBTAIN,LENGTH=WORKL  Get Work Area Storage
         LR    R11,R1             Address of storage
         USING WORK,R11           Addressability
         SPACE
         LAE   13,SAVEAREA        Set up save area addr in AR/R13
         MVC   4(4,13),=C'F1SA'   LS save indicator
         SPACE
         L     R3,CPPLCBUF        Get command buffer address
         LH    R1,2(,R3)          Offset of operands
         LA    R2,4(R1,R3)        Address of parm
         LH    R4,0(,R3)          Length of parm
         SH    R4,=H'4'
         SH    R4,2(,R3)
         MVC   XNAME(8),=CL8' '    Blank out field name
         LA    R7,XNAME            Address of name field

*---------------------------------------------------------------*
*  Scan command buffer for member name parm and move it into the*
*  BLDL parm list.                                              *
*---------------------------------------------------------------*
USERLOOP EQU   *
         CLI   0(R2),X'00'         end of parm?
         BE    GOTUSER
         CLI   0(R2),C' '          end of parm?
         BE    GOTUSER
         MVC   0(1,R7),0(R2)       Move in character
         LA    R2,1(,R2)           Increment pointer
         LA    R7,1(,R7)           Increment pointer
         BCT   4,USERLOOP          Get next char of member name
GOTUSER  EQU   *
         OC    XNAME(8),=CL8' '    Convert to upper case
         mvc   xmsg1(8),xname      move member name into msg

*---------------------------------------------------------------*
*  Issue BLDL to find out in which library the member is in     *
*---------------------------------------------------------------*
         LA    R5,XPARMS           Address of BLDL parms
         BLDL  0,(5),NOCONNECT     Issue BLDL
         LTR   R15,R15             BLDL worked?
*        BNZ   ERROR               no ... issue error msg
         bnz   testlpa             perhaps in lpa?

*---------------------------------------------------------------*
*  Interpret what is returned from BLDL                         *
*---------------------------------------------------------------*
PRIVATE  EQU   *
         CLI   XLIBTYPE,X'00'      Private lib?
         BNE   LINKLIB             No ... continue checking
         mvlit XMSG1+22,'private library'  Move in msg
         B     LibNum              Issue msg
LINKLIB  EQU   *
         CLI   XLIBTYPE,X'01'      Linklist dataset?
         BNE   STEPLIB             No ... Continue checking
         mvlit XMSG1+9,'in LINKLIB +'  Move in msg
         B     LibNum              Issue msg
STEPLIB  EQU   *
         CLI   XLIBTYPE,X'02'       STEPLIB ?
         BNE   PARENT              No ... Check of STEPLIB of Parent
         mvlit XMSG1+9,'in STEPLIB +'  Move in msg
         B     LibNum              Issue msg
PARENT   EQU   *
         mvlit XMSG1+9,'in STEPLIB of parent n '  Move in msg
         B     MESSAGE1            Issue msg

*---------------------------------------------------------------*
*  Figure out library module is in.                             *
*---------------------------------------------------------------*
LibNum   EQU   *
         XR    R3,R3                Clear R3
         IC    R3,XCONCAT           R3 = concat #
*
*        Make number printable
* number conversion changed by Willy Jensen
*        LA    1,0(,R3)
*        SLL   1,4
*        O     1,X'0000000F'
*        ST    1,XWORK
*        UNPK  XERROR(4),XWORK(4)
*        LA    1,=XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
*        SH    1,=H'240'
*        TR    XERROR(4),0(1)
*        MVC   XMSG1+32(2),XERROR+2 Move in concat number
         cvd   r3,dw
         unpk  XMSG1+22(4),dw
         oi    XMSG1+25,x'f0'
         CLI   XLIBTYPE,X'02'       STEPLIB ?
         BE    MESSAGE1             If in STEPLIB don't check LL concat
         XR    R2,R2                Clear R2
         M     R2,=F'45'            Length of each dataset in linklist
         L     R4,16                Address of CVT (X'10')
         USING CVT,R4               Get addressability
         L     R5,X'4DC'(R4)
         AR    R3,R5
         mvc   xmsg1+28(44),9(r3)   get dsn name where member is
         b     Message1             go tell

*---------------------------------------------------------------------*
*    Module might be in LPA                                           *
*---------------------------------------------------------------------*
TestLPA  cnop  0,4
*
* LOCATING MODULES IN THE LPA
*
* The first routine invokes an MVS function to locate a module
* on the active LPA queue by searching the Contents Directory
* Entry (CDE) chain.  This can be used to determine if a module
* has been loaded into the MLPA or FLPA, or dynamically
* loaded by a utility such as OMEGAMON, as well as retrieving
* module information like load and entry points.  Register usage
* is listed in the comments.  Note that the CDE search routine
* returns to the address in register 14 if the module was found
* and returns 4 bytes past the register 14 address if the module
* was not found.  If the module was found, register 10 will
* contain the address of the CDE.
*
***********************************************************************
*        IEAQCDSR SCANS THE CONTENTS DIRECTORY FOR AN ENTRY           *
*        REPRESENTING THE MODULE NAME REQUESTED BY THE CALLER         *
*        REGS      ON ENTRY                  ON RETURN                *
*        R0        IRRELEVANT                LEFT HALF MODULE NAME    *
*        R1            "                     RIGHT HALF MODULE NAME   *
*        R2-R7         "                     UNCHANGED                *
*        R8        A(ACTIVE LPA QUEUE HDR)       "                    *
*        R9        A(SEARCH ARGUMENT)            "                    *
*        R10       IRRELEVANT                A(CDE-IF FOUND)          *
*        R11-R13       "                     UNCHANGED                *
*        R14       A(RETURN POINT)              "                     *
*        R15       A(IEAQCDSR)               CHANGED (USED FOR BASE)  *
*        ON EXIT, IF MODULE NOT FOUND, RETURNS TO THE CALLER 4 BYTES  *
*        BEYOND THE RETURN ADDRESS INDICATED BY R14.                  *
***********************************************************************
         stm   r2,r12,28(r13)
         L     R15,CVTPTR              LOAD A(CVT)
         L     R8,CVTQLPAQ-CVT(,R15)   LOAD A(ACTIVE LPA QUEUE HEADER)
         LA    R9,XNAME                -> NAME OF MODULE
         L     R15,CVTQCDSR-CVT(,R15)  LOAD A(CDE SEARCH ROUTINE)
         BALR  R14,R15                 INVOKE CDE SEARCH ROUTINE
         B     LPA1OK                  +0 MODULE FOUND, END SEARCH
         B     LPA1NOK                 +4 MODULE NOT FOUND
LPA1OK   EQU   *
         lm    r2,r12,28(r13)
         mvlit xmsg1+9,'in LPA'
         b     message1
LPA1NOK  EQU   *
         lm    r2,r12,28(r13)
*
* SEARCHING THE LPA DIRECTORY
*
* The following routine searches the LPA directory for the
* existence of a module.  This Link Pack Directory Entry
* (LPDE) search routine and the CDE search routine above can
* be combined to locate the existence of a module in the MLPA,
* FLPA, or PLPA.  It employs the same register 14 return
* technique as the CDE search routine.  If the module is found,
* register 0 will contain the address of the LPDE.
*
***********************************************************************
*        IEAVVMSR SCANS THE LINK PACK DIRECTORY FOR AN ENTRY          *
*        REPRESENTING THE MODULE NAME REQUESTED BY THE CALLER         *
*        REGS         ON ENTRY                 ON RETURN              *
*        R0           LEFT HALF MODULE NAME    A(LPDE-IF FOUND)       *
*        R1           RIGHT HALF MODULE NAME   UNCHANGED              *
*        R2           IRRELEVANT                   "                  *
*        R3           A(CVT)                       "                  *
*        R4-R5        IRRELEVANT                   "                  *
*        R6               "                    CHANGED (USED AS BASE) *
*        R7               "                    UNCHANGED              *
*        R8-R9            "                    UNPREDICTABLE          *
*        R10-R13          "                    UNCHANGED              *
*        R14          A(RETURN POINT)              "                  *
*        R15          A(IEAVVMSR)                  "                  *
*        ON EXIT, IF MODULE NOT FOUND, RETURNS TO THE CALLER 4 BYTES  *
*        BEYOND THE RETURN ADDRESS INDICATED BY R14.                  *
***********************************************************************
         stm   r2,r12,28(r13)
         L     R0,xname                LOAD 1ST HALF OF MODULE NAME
         L     R1,xname+4              LOAD 2ND HALF OF MODULE NAME
         L     R3,CVTPTR               LOAD A(CVT)
         L     R15,CVTLPDSR-CVT(,R3)   LOAD A(LPDE SCAN ROUTINE)
         BALR  R14,R15                 GO SEARCH FOR THE MODULE
         B     LPA2OK                  +0 MODULE FOUND, END SEARCH
         B     LPA2NOK                 +4 MODULE NOT FOUND
LPA2OK   lm    r2,r12,28(r13)
*        LR    R2,R0                   ESTABLISH ADDRESSABILITY
*        USING LPDE,R2                   TO LPDE
         mvlit xmsg1+9,'in LPADIR'
         b     message1
LPA2NOK  lm    r2,r12,28(r13)
         mvlit xmsg1+9,'not found'
         b     message1

*---------------------------------------------------------------*
*    Issue WTO tell where the module resides                    *
*---------------------------------------------------------------*
MESSAGE1 equ   *
         tsoputln XMSG1
         B     RETURN

*---------------------------------------------------------------*
*    Error Message processing                                   *
*---------------------------------------------------------------*
ERROR    EQU   *
         mvlit XMSG1+9,'Error During BLDL - Return Code '
         LR    R3,R15
*
*        Make number printable
* number conversion changed by Willy Jensen
*
*        LA    1,0(,R3)
*        SLL   1,4
*        O     1,X'0000000F'
*        ST    1,XWORK
*        UNPK  XERROR(4),XWORK(4)
*        LA    1,=XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
*        SH    1,=H'240'
*        TR    XERROR(4),0(1)
         cvd   r3,dw
         unpk  XMSG1+40(8),dw
         oi    XMSG1+43,x'f0'
         tsoputln XMSG1
         B     RETURN

*---------------------------------------------------------------*
*    Return to Caller                                           *
*---------------------------------------------------------------*
RETURN   EQU   *
         LR    R1,R11
         STORAGE RELEASE,ADDR=(1),LENGTH=WORKL
         SLR   R15,R15            rc = 0
         PR                       Return

*---------------------------------------------------------------*
*    Data areas                                                 *
*---------------------------------------------------------------*
XCONNECT DS    CL8                Reserved 8 bytes for noconnect opt.
XPARMS   DC    XL2'1'             Number of entries in list
XLENGTH  DC    XL2'76'            Length of each entry
XNAME    DS    CL8                Member to be located
XTTR     DS    XL3                Relative track number and record
XCONCAT  DS    XL1                Concat number of dataset
XLIBTYPE DS    XL1                Where system found library
XX       DC    76X'00'            User data filled in by BLDL
         ltorg
WORK     DSECT
XMSG1    DS    CL80
XWORK    DS    D                  Work field
XERROR   DS    D                  Error field
dw       DS    D                  work field
fw       DS    f                  work field
SAVEAREA DS    18F                Savearea
WORKL    EQU   *-WORK
         IKJCPPL
         CVT   DSECT=YES
         IHACDE ,                 User by testlpa
         END
