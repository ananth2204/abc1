More about MVS control blocks

Roger Bowler's article, Some useful fields in MVS control blocks (MVS
Update, July 1988), is a good compendium of information that old systems
programmers have managed to pick up over the years, but which has never
before been presented all together for the rookie systems programmer.  I
would like to add the following comments to Roger's notes.

In an ACF2 shop it is possible to find a TSO user's terminal-id without
getting into key zero or being APF-authorised.  While you are there, you
can also get the JES job-id and the ACF2 logon-id (which, for a TSO job,
is the same as the TSO user-id).  Here is a bit of code to do the job:

         ACFASVT DSECT=YES             (SYS1.ACFMAC)
         ACCVT   DSECT=YES             (SYS1.ACFMAC)
         IHAASCB DSECT=YES             (SYS1.AMODGEN)
         IHAPSA  DSECT=YES             (SYS1.AMODGEN)
         .
         .
         ACFGACVT R11,NONE=NOACF2 GET ACCVT ADDRESS
         USING ACCVT,R11          SET UP BASE FOR ACCVT
         ICM   R11,B'1111',ACCASVT GET POINTER TO ACFASVT
         BZ    NOACF2             ERROR IF NONE
         USING ACFASVT,R11        SET UP BASE FOR ACFASVT
         USING PSA,R0             SET UP BASE FOR PSA
         L     R10,PSAAOLD        GET ASCB ADDR FOR THIS JOB
         USING IHAASCB,R10        SET UP BASE FOR ASCB
         LH    R4,ASCBASID        GET ASID FOR THIS JOB
         SLL   R4,ASVINDEX        CONVERT TO ACFASVT OFFSET
         LA    R11,ACFASVT(R4)    POINT TO OUR ACFASVT ENTRY
         MVC   termid(8),ASVSRC   MOVE LOGICAL SOURCE ID
         MVC   logonid(8),ASVLID  MOVE USER LOGONID
         MVC   jobid(8),ASVJID    MOVE JES JOBID

The NOACF2 label is an error branch for the odd case where ACF2 is not
up when your program is running.  The ACFGACVT macro calls the $ACFGCVT
routine, which you must link in with your program from SYS1.ACFMOD.

Roger says that the SMF system-id is used by JES2 to identify the
systems in a multi-access spool complex.  This is frequently the case,
but need not be; the SMF-id is used only if a different JES-id is not
specified in the JES2 initialisation deck.

There are valid reasons for having different JES2 and SMF system-ids for
the same machine.  For example, at one shop where I worked, the JES2
system-ids were published and never changed: SYSA for production, SYSB
for test, SYSC for engineering jobs, etc.  We kept them  the  same so
that our users  would  not have to  change  the /*JOBPARM cards they
used to route their jobs to particular systems and because it took a
JES2 cold start to change them.

However, we would change the SMF system-ids when we were testing new
versions of the operating system so we could identify the SMF records
cut during testing more easily.  The users never saw the SMF system-ids
so they were not bothered by the changes.

Here is some code to find the JES2 system-id:

         $HASPEQU ,                 (SYS1.HASPSRC--NEEDED BY $SVT)
         $SCAT ,                    (SYS1.HASPSRC--NEEDED BY $SVT)
         $XECB ,                    (SYS1.HASPSRC--NEEDED BY $SVT)
         $SVT ,                     (SYS1.HASPSRC)
         IEFJESCT ,                 (SYS1.MACLIB)
         IEFJSCVT ,                 (SYS1.MACLIB)
         CVT   DSECT=YES            (SYS1.AMODGEN)
         .
         .
         L     R8,CVTPTR            SET UP BASE FOR CVT
         USING CVTMAP,R8            ...
         L     R7,CVTJESCT          SET UP JES CONTROL TABLE BASE
         USING JESCT,R7             ...
         L     R6,JESSSCT           FIRST SSCT IS FOR JES2
         USING SSCT,R6              SET UP A BASE FOR IT
         L     R5,SSCTSSVT          SET UP BASE FOR JES2 SSVT
         USING SSVT,R5
         MVC   jesid(4),SVTSID      GET THE JES2 SYSTEM ID

The SVTSID field used to be called $SVSID - somewhere around JES2 1.3.6
it was renamed.  I should mention that you should never, ever, use
hard-coded offsets for JES2 control blocks.  The developers of JES2
think nothing of adding fields in the middle of control blocks, making
all the following offsets change.  If you refer to the fields by name
you will pick up the change by just re- assembling your program.  Of
course, when they rename the fields out from under you, you are still in
trouble.

Finding jobs by running the CSCB chain is the accepted way of doing
things, but it won't find you everything.  Some system address spaces
that are started at IPL do not have CSCBs.  They are things like
CONSOLE, the DIDOCS address space, and usually you won't want to look at
them anyway.

There are also a few jobs with extra CSCBs, most notably external
writers.  When you start an external writer, say to a printer at unit
address 00E, the external writer creates a CSCB with a CHKEY of 00E, so
that if you want to cancel the job that is printing, you can enter C 00E
on the console.

Lynn Grant
Technical Consultant (USA)    â‚¬        1988


