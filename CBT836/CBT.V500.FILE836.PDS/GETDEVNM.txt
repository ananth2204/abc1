/**rexx**/
/*  PROGRAM-ID           GETDEVNM                                  */
/*  Remarks              This REXX exec will return the unit       */
/*                       number for a volume.                      */
/*trace i*/
save_prompt = prompt("off")
dnum= '    '                                /* device number       */
status= '       '                           /* device status       */
retcode= '00000000'x                        /* ucbscan return code */
pathinfo= '                                                '
reason_code= '00000000'x                    /* ucbscan reason code */
address "ISPEXEC" "LIBDEF ISPPLIB DATASET ID('SYS1.U.PANELS')"
main_processing_loop:
do forever
   call display_the_volume_panel            /* display vol panel   */
   ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up       */
end
display_the_volume_panel:
ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(2)" /* pop-up position  */
ADDRESS "ISPEXEC" "DISPLAY PANEL(GETDEVP1)"
if (rc > 8) then do                         /* error?              */
   say 'Display error    rc = 'rc''         /* yes- output message */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"       /* remove allocation   */
   exit(0)                               /* and quit               */
end
if (rc = 8) then do                      /* return?                */
   ADDRESS "ISPEXEC" "REMPOP"            /* remove pop-up          */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
call Lets_Lock_The_Terminal              /* lock the terminal      */
ADDRESS "LINKPGM" "GETUADDR  volser dnum status pathinfo retcode reason_code"
if (retcode > '00000000'x) then do
   ADDRESS "ISPEXEC" "REMPOP"            /* remove pop-up          */
   call display_error_panel              /* display the error panel*/
   return                                /* return to caller       */
end
ADDRESS "ISPEXEC" "TBCREATE DEVNTAB NOWRITE REPLACE"
if (rc >  4) then do                     /* call okay?             */
   say 'tbcreate error    rc = 'rc''     /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* let's quit             */
end
ztdmark= ' '
ADDRESS  "ISPEXEC" "VPUT    (ztdmark) SHARED"
tabrows=  9999                           /* max table rows         */
x= 16                                    /* starting position      */
no_of_chpids= x2d(c2x(substr(pathinfo,12,4)))
if (no_of_chpids = 0) then do
   ADDRESS "ISPEXEC" "REMPOP"             /* remove pop-up         */
   pinfo= '***  No Paths Defined ***'     /* inform user           */
   ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(5)" /* pop-up position  */
   ADDRESS "ISPEXEC" "DISPLAY PANEL(getdevp3)"
   if (rc > 8) then do                    /* error?                */
      say 'Display error    rc = 'rc''    /* yes- output message   */
      ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"  /* remove allocation     */
      exit(0)                             /* and quit              */
   end
   ADDRESS "ISPEXEC" "REMPOP"             /* remove pop-up         */
   return                                 /* return to caller      */
end
sms= 'YES'                                /* set sms to yes        */
if  substr(pathinfo,1,1) = 'N' then       /* sms device?           */
    sms= 'NO '                            /* no-                   */
vstatus= ' '                              /* init                  */
select                                    /* determine vol status  */
    when status = 'ONLINE'  then
          vstatus= 'Online  '
    when status = 'OFFLINE'  then
          vstatus= 'Offline  '
    when status = 'PENDING'  then
          vstatus= 'Pending Offline  '
   otherwise
          nop
end
select                                   /* volume allocation      */
    when substr(pathinfo,5,1) = 'Y' then
          vstatus= vstatus||'Alloc  '
    when substr(pathinfo,5,1) = 'N' then
          vstatus= vstatus||'Not-Alloc  '
   otherwise
          nop
end
select                                   /* sysres                 */
    when substr(pathinfo,11,1) = 'Y' then
          vstatus= vstatus||'SYSRES  '
   otherwise
          nop
end
select                                   /* dasd reserve           */
    when substr(pathinfo,10,1) = 'Y' then
          vstatus= vstatus||'Reserved'
   otherwise
          nop
end
mntstat= ' '                             /* init                   */
select                                   /* determine vol res      */
    when substr(pathinfo,2,1) = 1 then
          mntstat= 'Resident  '
    when substr(pathinfo,2,1) = 2 then
          mntstat= 'Perm Res  '
   otherwise
          nop
end
select                                   /* determine vol status   */
    when substr(pathinfo,3,1) = 1 then
          mntstat= mntstat||'Private  '
    when substr(pathinfo,3,1) = 2 then
          mntstat= mntstat||'Public  '
    when substr(pathinfo,3,1) = 3 then
          mntstat= mntstat||'Storage  '
   otherwise
          nop
end
select                                   /* shared dasd            */
    when substr(pathinfo,4,1) = 'Y' then
          mntstat= mntstat||'Shared'
   otherwise
          nop
end
devstat=  ' '                            /* init                   */
select                                   /* device type            */
    when substr(pathinfo,9,1) = '0B'x then
          devstat= '3350  '
    when substr(pathinfo,9,1) = '0C'x then
          devstat= '3375  '
    when substr(pathinfo,9,1) = '0E'x then
          devstat= '3380  '
    when substr(pathinfo,9,1) = '0F'x then
          devstat= '3390  '
   otherwise
          nop
end
if substr(pathinfo,8,1) = 'Y' then       /* suspended channel prog?*/
   devstat= devstat||'Suspended Channel Program  '
if substr(pathinfo,6,1) = 'Y' then       /* paging device?         */
   devstat= devstat||'<Paging Device>'
ISC=  x2d(c2x(substr(pathinfo,7,1)))     /* Interrupt Subclass     */
do i= 1 to no_of_chpids                  /* do no of table entries */
   path=  c2x(substr(pathinfo,x+1,1))    /* path                   */
   select                                /* Determine Path Type    */
         when (substr(pathinfo,x+3,1)) = '01'x then
              pathtyp= 'Parallel Block Multiplexor'
         when (substr(pathinfo,x+3,1)) = '02'x then
              pathtyp= 'Parallel Byte Multiplexor'
         when (substr(pathinfo,x+3,1)) = '03'x then
              pathtyp= 'ESCON Point To Point'
         when (substr(pathinfo,x+3,1)) = '04'x then
              pathtyp= 'ESCON '
         when (substr(pathinfo,x+3,1)) = '05'x then
              pathtyp= 'ESCON Switch Point To Point'
         when (substr(pathinfo,x+3,1)) = '06'x then
              pathtyp= 'FIBER Extended'
         when (substr(pathinfo,x+3,1)) = '07'x then
              pathtyp= 'ESCON Native'
   otherwise
              pathtyp= 'UNKNOWN'
   end
   if substr(pathinfo,x+2,1) = '06'x then do /* path on-line?      */
      pathstat= 'Path ONLINE'              /* yes                  */
      call create_table_entry              /* create a table entry */
   end
   path_status= substr(pathinfo,x+2,1)     /* path status byte     */
   path_status= bitand(path_status,'20'x)  /* isolate bit required */
   if (path_status = '20'x) then do      /* path off-line due escm?*/
      pathstat= 'Path OFFLINE Due To ESCM' /* yes                  */
      call create_table_entry              /* create a table entry */
   end
   path_status= substr(pathinfo,x+2,1)     /* path status byte     */
   path_status= bitand(path_status,'10'x)  /* isolate bit required */
   if (path_status = '10'x) then do        /* path off-line due op?*/
      pathstat= 'Path OFFLINE Due To Operator'
      call create_table_entry              /* create a table entry */
   end
   path_status= substr(pathinfo,x+2,1)     /* path status byte     */
   path_status= bitand(path_status,'08'x)  /* isolate bit required */
   if (path_status = '08'x) then do    /* path off-line due cu rcv?*/
      pathstat= 'Path OFFLINE Due CU Recovery'
      call create_table_entry            /* create a table entry   */
   end
   path_status= substr(pathinfo,x+2,1)   /* path status byte       */
   path_status= bitand(path_status,'01'x) /* isolate bit required  */
   if (path_status = '01'x) then do      /* vary off-line in prog? */
      pathstat= 'Path OFFLINE In Progress'
      call create_table_entry            /* create a table entry   */
   end
   x= (x + 4)                            /* next table entry       */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
ADDRESS "ISPEXEC" "ADDPOP ROW(1) COLUMN(2)" /* pop-up position     */
ADDRESS "ISPEXEC" "TBTOP DEVNTAB"        /* position to top of tab */
if (rc ¬= 0) then do                     /* call okay?             */
   say 'tbtop error    rc = 'rc''        /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* let's quit             */
end
ADDRESS "ISPEXEC" "TBDISPL DEVNTAB PANEL(GETDEVP3)"
if (rc > 8) then do                      /* error?                 */
   say 'tbdispl error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "TBCLOSE  DEVNTAB"     /* close the table        */
if (rc ¬= 0) then do                     /* call okay?             */
   say 'tbtop error    rc = 'rc''        /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* lets quit              */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
return
Lets_Lock_The_Terminal:
ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK" /* lock the terminal      */
if (rc > 8) then do                      /* error?                 */
   say 'Lock error    rc = 'rc''         /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "ADDPOP ROW(3) COLUMN(7)" /* pop-up position     */
ADDRESS "ISPEXEC" "DISPLAY PANEL(GETDEVP2)"
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
return
display_error_panel:
select
  when (substr(pathinfo,12,1)) = 'C' then do /* UCBCOPY error?     */
       if (retcode = '00000004'x) & (reason_code = '00000001'x) then
           merr= 'VOLSER Not ONLINE'
       else
           merr= 'Error Has Occurred during call to UCBCOPY'
       end
  when (substr(pathinfo,12,1)) = 'I' then do /* UCBINFO Error?     */
       merr= 'Error Has Occurred during call to UCBINFO'
       end
otherwise
      nop                                /* nop                    */
end
urtc=  c2x(retcode)                      /* convert to character   */
ursc=  c2x(reason_code)                  /* convert to character   */
ADDRESS "ISPEXEC" "ADDPOP ROW(2) COLUMN(7)"  /* pop-up position    */
ADDRESS "ISPEXEC" "DISPLAY PANEL(GETDEVP4)"  /* display error panel*/
if (rc > 8) then do                      /* error?                 */
   say 'Display error    rc = 'rc''      /* yes- output message    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* and quit               */
end
ADDRESS "ISPEXEC" "REMPOP"               /* remove pop-up          */
return
create_table_entry:
ADDRESS "ISPEXEC" "TBADD DEVNTAB
         SAVE(path,pathtyp,pathstat)
         MULT("TABROWS")"
if (rc ¬= 0) then do                     /* call okay?             */
   say 'tbadd error    rc = 'rc''        /* no- inform the user    */
   ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"    /* remove allocation      */
   exit(0)                               /* let's quit             */
end
path= ' '                                /* reset                  */
pathtyp= ' '                             /* reset                  */
return
