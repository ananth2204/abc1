The article author is
Jon E Pearkins (Canada)

Copyright  Xephon 2003
(www.cbttape.org supports Xephon software now)

And the code author is Trevor Howard who wrote this code
approximately 20 years prior - so the early 1980's.

Making it easy to switch IDs in TSO

Have you ever hit PF3 in the ISPF Editor and had RACF refuse to
save your changes?  And then had to CANCEL, get all the way out of
ISPF, log on to a different TSO ID, find the dataset, and make
all the changes again before you can hit PF3?  The chances are
that you didn't even remember all the changes you made the first
time.

The TSO command USEID solves this, and many other problems, by
allowing you to switch IDs in the middle of virtually anything in
ISPF, TSO, or any application that runs on ISPF.  Simply type TSO
USEID in ISPF, or just USEID at a TSO READY prompt or in ISPF
Option 6, followed by the user ID you want to switch to, and
you'll be prompted for the ID's password and taken back to where
you left off.

Specifying USEID without an ID returns you to your log-on ID.
About the only things to remind you that you logged on with your
original ID are the JOBNAME and OWNER fields that you'll see if
you look at your TSO session with SDSF's DA (Display Active)
command.

If you submit a batch job, the SDSF-displayed OWNER field and the
value of &SYSUID in the job's JCL will be your assumed ID.  It's
just as if you had originally logged on to TSO with the assumed
ID and submitted the batch job. The only thing you lose is
NOTIFY=&SYSUID on the JOB card of the batch job; if you code it,
you won't receive a message when the job completes because,
technically, you're still logged on in TSO with your original
rather than your assumed ID.

IMPLEMENTATION EXAMPLE

USEID is used in one organization to try to dissuade technical
staff from always logging on with their 'super power' RACF
userIDs.  In fact, the RACF TSO segment of all such IDs has been
deleted; users must log on with their normal, slightly less
powerful ID, and then use USEID to switch to super powers only
when they need them.

It's a nice theory and, so far, it has satisfied the auditors.
But it's easy to switch to the super power ID and forget to
switch back, which can be a problem, given that most systems
programmers stay logged on all day.  However, that still doesn't
take away from the fact that USEID is an extremely handy command.

HISTORY

This code was written over 20 years ago by Trevor Howard when he
first joined the Alberta Government in Canada, and he recently
described it as the most useful 100 lines of code I ever wrote".

Because it was written so long ago, it uses the original RACF
macros, which are no longer supported, but still work.  One of IBM
Canada's top technical people recently reviewed the code and
commented that no RACF short-cuts were taken, which doubtless
explains why it has never caused any RACF problems or errors over
the many years of its use at several local z/OS sites.

NOTES

Two important areas of USEID are commented out because I haven't
had a chance to fully test them.  They are as follows:

The group checking section, including the call to AUTHCHEK, was
removed years ago at the site's request.  The group checking code
is commented out just before the GROUPOK label.  Obviously, if you
leave group checking commented out, you won't need to assemble or
include AUTHCHEK in the load module.

Code to address a new bug that surfaced recently and was tracked
down to a missing maximum length check on the user-supplied ID.
The ID length checking code is commented out after the NOSAVE
label.

ASSEMBLY

You could just separately assemble USEID and AUTHCHEK, and
linkedit them together into a load module and store it
in SYS1.CMDLIB(USEID).  The only other step you would need to
complete would be to add USEID to SYS1.PARMLIB(IKJTSO00),as is
required for all APF-authorized TSO commands:

AUTHCMD NAMES(
/*   AUTHORIZED COMMANDS
*/ +
   LISTB    LISTBC
/*
*/ +
     {rest of APF-authorized
      TSO commands}

   USEID
/* CHANGE RACF USERID
*/ +

