Obtaining the ESA LOADPARM with REXX  (was member BAE42C57 in File 830)

THE NEED

One day, I was required to change the IEASYSnn member in
SYS1.PARMLIB. When the edit selection member list displayed,
I found several IEASYSnn members. No problem, I thought, I'll
just look at LOADnn to see which IEASYSnn is the 'active'
member. Imagine my shock when I found several LOADnn
members pointing to several IEASYSnn members. My first
reaction was that I'd have to get out of my chair, go downstairs to
the computer room, and check the OPRCTL frame to see which
LOADnn member was specified. Well this was a repugnant
thought to me. My wife would say this was because I'm averse to
physical activity but, in truth, I have a compulsion to do
everything as efficiently as possible. With today's staffing realities,
I usually find myself in a minimally staffed shop, so any tool I can
lay my hands on to get the job done more quickly or easily is
welcome. Naturally those little gears in my head began to turn. I
decided that MVS/ESA had to be aware of the LOADPARM in
order to IPL and, if ESA knew about it, it must be in a control
block somewhere. So my quest began.

THE SCCB

The Prefixed Save Area (PSA) is located at hexadecimal address
zero. It is mapped by the IHAPSA macro. See Figure 1 for a
graphic example of the control block chains.

At a displacement of X'10' into the PSA is the FLCCVT, which
contains an address that points to the Communication Vector
Table (CVT). The CVT is mapped by the CVT macro. At
displacement X'340' in the CVT is the CVTSCPIN field, which
contains an address that points to the Service Call Control Block
(SCCB). The SCCB is mapped by the IHASCCB macro. At
displacement X'18' of the SCCB is the information we seek, in a
field called the SCCBPARM. The SCCBPARM is an eight-
character field that contains the same eight characters that appear
either on the OPRCTL or SYSCTL system console frames. Voila,
no trip downstairs to the computer room!

The format of the SCCBPARM (or LOADPARM if you wish) is
ddddlsin, where dddd is the device address of the volume
containing the PARMLIB dataset, ls is the load suffix (the nn in
LOADnn), i is the Initial Message Suppression Indicator (IMSI),
and n is the nucleus-id (ie the IEANUC0 suffix).

THE LOADPARM EXEC

1   /*REXX --------------------------------------------------------------*/
2   /*                                                                   */
3   /*  GRACE.EXEC(LP):                                                  */
4   /*        Just a little EXEC to display the current IPL LOADPARM.    */
5   /*                                                   GRACE  12.16.93 */
6   /*-------------------------------------------------------------------*/
7   Trace Errors
8
9   /*-------------------------------------------------------------------*/
10  /*   Obtain the Service Call Control Block Parm:                     */
11  /*     PSA (real loc x'00')                                          */
12  /*       FLCCVT (PSA + x'10') ---> CVT                               */
13  /*         CVTSCPIN (CVT + x'340') ---> SCCB                         */
14  /*           SCCBPARM (SCCB + x'18')                                 */
15  /*-------------------------------------------------------------------*/
16  cvt_ptr = GET_ADDR(0,10)
17  cvtscpin_ptr = GET_ADDR(cvt_ptr,'340')
18
19  loadparm = Storage(D2x(X2d(cvtscpin_ptr) + X2d('18')),'8')
20
21  Say 'The LOADPARM used for the current IPL is:' loadparm
22
23  Exit
24
25  GET_ADDR: Procedure
26  /*-------------------------------------------------------------------*/
27  /*   Return 4 byte hex pointer given hex addr (Arg(1)) and           */
28  /*   hex offset (Arg(2)).                                            */
29  /*-------------------------------------------------------------------*/
30  Return C2x(Storage(D2x(X2d(Arg(1)) + X2d(Arg(2))),4))

To obtain the LOADPARM information the REXX function
STORAGE is used. The STORAGE function returns a specified
number of bytes of storage from a given location. In statement 16,
the variable cvt_ptr is set to the value returned by the
GET_ADDR internal procedure. Passed to the GET_ADDR
procedure is the address of the PSA (X'00') and the displacement
into the PSA of the FLCCVT (X'10').

In statement 30, the first argument (X'00' obtained by REXX
function ARG) and the second argument (X'10' obtained with
the ARG function specifying 2 for the second argument) are
converted to decimal by the X2d function. This is done so that
they can be added together to generate the address we wish to
pass the STORAGE function. Once they are added together, the
new address is converted back to hexadecimal with the D2x
function for input to the STORAGE function. A length of four is
hard coded in this case because all address fields are 4 bytes.

Finally, the resulting decimal address is converted back to
hexadecimal with the C2x function because this new address will
be the foundation for another STORAGE request.

I coded GET_ADDR as an internal procedure simply because I
have a personal habit of coding anything I use more than once as
a procedure. I could just as easily have coded a similar statement
to statement 30 on both statements 16 and 17. In statement 17, the
variable cvtscpin_ptr is set to the address returned from the
GET_ADDR procedure. This time the cvt_ptr address is used as a
base and the displacement into the CVT of the CVTSCPIN
(X'340') is the second argument. Then in statement 19,
something similar is done one last time. The cvtscpin_ptr is the
base and the displacement into the SCCB of the SCCBPARM is
the second argument. The difference this time is that the length is
eight instead of four and we don't want the result converted to
hexadecimal because we are going to display it in statement 21.

THE END

So there we have it. Using the REXX STORAGE function, we
can chain through ESA control blocks to display information of
interest. It's much less time-consuming to type 'TSO %LC' when
you're unsure which is the 'active' LOADnn member than to
make that trip to the computer room.

Joseph R Grace
Senior Systems Programmer (USA)                                            1994

