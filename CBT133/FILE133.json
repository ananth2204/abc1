{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011306000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 881790, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 13, "INMDSNAM": "CBT.V500.FILE133.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 881790, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 881790, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE133.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0f\\x0c'", "DS1TRBAL": "b'I\\x94'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xcf\\x00\\x02\\x00\\xd0\\x00\\x02\\x00\\x10'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00$\\x01\\x162\\x9f\\x01\\x162\\x9f\\x15\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-11-24T00:00:00", "modifydate": "2016-11-24T15:00:24", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-493"}, "text": "REGULAR CBT TAPE - VERSION 493    FILE:  133\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT493.FILE133\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 47 MEMBERS COUNTED; CUMULATIVE SIZE IS 7,740 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/24/16    15:00:23    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$ASMDOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x001\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x10T\\x00\\x14\\x00\\x13\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T10:54:31", "lines": 20, "newlines": 19, "modlines": 0, "user": "AFIELD"}, "text": "CPCMD    - Enables MVS users running under VM to issue CP commands\n           and get the responses back at their TSO terminal. Can also\n           executed as a batch program or started task. Link it with\n           an alias of CP. On TSO then enter CP Q DASD for example, or\n           CP ATT 58A MVS.\nDASDSUB  - Get DASD device information from UCB. (Used by SVTOC in PLI.)\nDISASM3B - The SVC table from the DISASSEMBLER on the CBT tape. Modified\n           for MVSXA and copied into SVCTAB.\nDSSLVL   - Display current DF/DSS program level.\nJULSUB   - Date conversion subroutine. (Fixed for year 20xx. SBG)\nLASTCLPA - Command to display date and time of last CLPA. A companion\n           program to LASTIPL which is on the CBT tape.  (APF authorize)\n           (Needs TODCN and JULSUB programs.)\nLNKLST   - Display names of LINKLST datasets currently in use.\nRACFDS   - Display data about the RACF dataset(s) in use.\nSMFDS    - Display data about current SMF dataset usage.\nSVCTAB   - Program to display SVCTABLE.\nTODCN    - Program to convert timestamps into real dates and times.\nVSAMNAME - Convert and display 'real' dataset names assigned by VSAM\n           for PAGE, MAN etc.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x12U\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T12:55:27", "lines": 11, "newlines": 11, "modlines": 0, "user": "AFIELD"}, "text": "This PDS contains the following members:\n\nCLIST    - Some CLISTS to demonstrate the use of some of the utilities\n           included in this file.\nCNTL     - JCL to run some of the utilities included in this file.\nASM      - Assembler language source for some useful utilities.\n           (Broken out into separate members with userid AFIELD.)\nMACROS   - Macros necessary to assemble source in member ASM.\n           (Broken out into separate members with userid MACRO.)\nPLI      - A PL/I utilitiy to sort IEHLIST LISTVTOC output into address\n           order.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#SORT": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03'\\x8f\\x01\\x03'\\x8f\\x00D\\x00\\xa9\\x00\\xa9\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-05T00:00:00", "modifydate": "2003-10-05T00:44:00", "lines": 169, "newlines": 169, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    #SORT &FIELDS=(1,1,CH,A),&FIRST=,&LAST=,&LENGTH=\n         MNOTE *,'       #SORT     VERSION 002    12 MAR 87        ACF'\n.**********************************************************************\n.*                                                                    *\n.* #SORT                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODING TO SORT A TABLE IN ASCENDING OR     *\n.*                DESCENDING ORDER BASED ON A KEY FIELD IN EACH       *\n.*                ENTRY.                                              *\n.*                                                                    *\n.* DESCRIPTION    A BUBBLE SORT IS SORT IS PERFORMED.  THE KEYS       *\n.*                OF CONSECUTIVE ITEMS ARE COMPARED.  THE ITEMS       *\n.*                ARE SWITCHED IF NECESSARY.  PROCESSING PROCEEDS     *\n.*                TO THE NEXT PAIR OF ENTRIES.  AT THE END OF ONE     *\n.*                PASS, AT LEAST THE HIGHEST KEY IS IN THE PROPER     *\n.*                POSITION.  THE LIST IS REDUCED TO A SUBLIST         *\n.*                FROM THE FIRST ENTRY TO THE LAST ENTRY WHICH        *\n.*                WAS SWITCHED AND THE SUBLIST IS THEN PROCESSED      *\n.*                AS WAS THE ORIGINAL LIST.  THIS CONTINUES UNTIL     *\n.*                THE ENTIRE LIST HAS BEEN SORTED.  IF AT ANY POINT,  *\n.*                PROCESSING THE LIST RESULTS IN NO ENTRIES BEING     *\n.*                SWITCHED, THE LIST IS IN ORDER AND PROCESSING       *\n.*                IS TERMINATED.                                      *\n.*                                                                    *\n.*                REGISTERS 0, 1, 14, AND 15 ARE USED BY THE          *\n.*                SORT AND MUST NOT BE SPECIFIED AS FIRST OR          *\n.*                LAST VALUES.                                        *\n.*                                                                    *\n.*                REGISETR 2 IS ALSO USED IF FORMAT BI IS SELECTED.   *\n.*                                                                    *\n.* SYNTAX         NAME     #SORT FIELDS=(KEYPOS,KEYLEN,FMT,ORDER),    *\n.*                               FIRST=SYMBOL1,                       *\n.*                               LAST=SYMBOL2,                        *\n.*                               LENGTH=NUM                           *\n.*                                                                    *\n.*                NAME   - SPECIFIES THE SYMBOLIC TAG TO BE           *\n.*                         ASSIGNED TO THE FIRST INSTRUCTION          *\n.*                         GENERATED.  THIS OPERAND IS OPTIONAL.      *\n.*                                                                    *\n.*                FIELDS - SPECIFIES THE SORT PARAMETERS.             *\n.*                         KEYPOS - SPECIFIES THE RELATIVE KEY        *\n.*                                  POSITION IN THE RECORD.           *\n.*                         KEYLEN - SPECIFIES THE LENGTH OF THE KEY.  *\n.*                         FMT    - SPECIFIES THE FORMAT OF THE       *\n.*                                  DATA TO BE SORTED.                *\n.*                                  VALID FORMATS ARE CHARACTER (CH)  *\n.*                                  OR BINARY (BI).                   *\n.*                         ORDER  - SPECIFIES IF THE LIST IS TO BE    *\n.*                                  SORTED IN ASCENDING ORDER (A),    *\n.*                                  OR DESCENDING ORDER (D).  THE     *\n.*                                  DEFAULT IS A.                     *\n.*                                                                    *\n.*                FIRST  - SPECIFIES THE SYMBOLIC NAME OF THE FIRST   *\n.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *\n.*                         CONTAINS THE ADDRESS OF THE FIRST ENTRY.   *\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          *\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *\n.*                                                                    *\n.*                LAST   - SPECIFIES THE SYMBOLIC NAME OF THE LAST    *\n.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *\n.*                         CONTAINS THE ADDRESS OF THE LAST ENTRY.    *\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          *\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *\n.*                                                                    *\n.*                LENGTH - SPECIFIES THE LENGTH OF THE ENTRIES IN     *\n.*                         THE TABLE.  THIS PARAMETER IS REQUIRED.    *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         INVALID NUMBER OF ENTRIES IN FIELDS PARAMETER - 8   *\n.*                FORMAT TYPE NOT SUPPORTED                     - 8   *\n.*                FIRST VALUE NOT SPECIFIED                     - 8   *\n.*                LAST  VALUE NOT SPECIFIED                     - 8   *\n.*                LENGTH VALUE NOT SPECIFIED                    - 8   *\n.*                                                                    *\n.* EXAMPLE        SORT A TABLE OF ENTRIES WHERE THE FIRST 8 BYTES     *\n.*                ARE THE KEYS.  THE LENGTH OF EACH ENTRY IS 50       *\n.*                BYTES.                                              *\n.*                                                                    *\n.*                         #SORT FIELDS=(1,8,CH,A),LENGTH=50,         *\n.*                               FIRST=BEGIN,LAST=END                 *\n.*                                                                    *\n.*                BEGIN    DC    CL8'A',CL42'ENTRY 1'                 *\n.*                         DC    CL8'D',CL42'ENTRY 2'                 *\n.*                         DC    CL8'X',CL42'ENTRY 3'                 *\n.*                         DC    CL8'$',CL42'ENTRY 4'                 *\n.*                         DC    CL8'Q',CL42'ENTRY 5'                 *\n.*                END      DC    CL8'M',CL42'ENTRY 6'                 *\n.*                                                                    *\n.* GLOBALS                                                            *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &X,&Y,&Z\n         LCLC  &HI,&I,&LEN\n.*\n&I       SETC  '#SOR'.'&SYSNDX'(2,3)\n&X       SETA  N'&FIELDS\n         AIF   (&X NE 4).ERR1\n         AIF   ('&FIELDS(3)' EQ 'CH').OK1\n         AIF   ('&FIELDS(3)' NE 'BI').ERR2\n.OK1     ANOP\n&HI      SETC  'H'\n         AIF   ('&FIELDS(&X)' NE 'D').TESTA\n&HI      SETC  'L'\n         AGO   .SETREGS\n.TESTA   AIF   ('&FIELDS(&X)' EQ 'A').SETREGS\n         MNOTE *,'*** SORT TYPE NOT A OR D - A ASSUMED'\n.SETREGS ANOP\n&LEN     SETC  '&LENGTH'\n&X       SETA  &FIELDS(1)-1            OFFSET WITHIN RECORD\n&Y       SETA  &FIELDS(2)              LENGTH OF SORT-KEY\n.*&Z       SETA  &X+&LEN                 OFFSET WITHIN NEXT RECORD\n         AIF   ('&FIRST'  EQ '').ERR3\n         AIF   ('&LAST'   EQ '').ERR4\n         AIF   ('&LENGTH' EQ '').ERR5\n.*\n&NAME    LA    R0,&LENGTH              LOAD LENGTH OF AN ENTRY\n         AIF   ('&LAST'(1,1) EQ '(').RFORM1\n         LA    R1,&LAST                LOAD LAST ENTRY ADDRESS\n         AGO   .CONT1\n.RFORM1  LR    R1,&LAST                LOAD LAST ENTRY ADDRESS\n.CONT1   ANOP\n&I.A     SR    R14,R14                 CLEAR LAST SWITCH ADDRESS\n         AIF   ('&FIRST'(1,1) EQ '(').RFORM2\n         LA    R15,&FIRST              LOAD FIRST ENTRY ADDRESS\n         AGO   .CONT2\n.RFORM2  LR    R15,&FIRST              LOAD FIRST ENTRY ADDRESS\n.CONT2   SR    R1,R0                   POINT TO PENULTIMATE\n         CR    R15,R1                  TEST AGAINST FIRST ENTRY\n         BH    &I.D                    IF HIGH, LIST SORTED\n&I.B     EQU   *\n         AIF   ('&FIELDS(3)' EQ 'BI').BI1\n         CLC   &X.(&Y,R15),&X.+&LEN.(R15)    COMPARE KEYS\n         AGO   .SRTX\n.BI1     ANOP\n         ICM   R2,B'1111',&X.+1(R15)   LOAD VALUE INTO REG\n         C     R2,&X.+1+&LEN.(R15)     COMPARE KEYS\n.SRTX    ANOP\n         BN&HI &I.C\n         XC    0(&LEN,R15),&LEN.(R15)  SWITCH ENTRIES\n         XC    &LEN.(&LEN,R15),0(R15)\n         XC    0(&LEN,R15),&LEN.(R15)\n         LR    R14,R15                 SAVE ADDRESS OF SWITCHED ENTRY\n&I.C     BXLE  R15,R0,&I.B             POINT TO NEXT ENTRY\n         LTR   R1,R14                  COPY AND TEST LAST SWITCHED ADDR\n         BNZ   &I.A\n&I.D     EQU   *\n         MEXIT\n.ERR1    MNOTE 8,'INVALID NO. OF ENTRIES IN FIELDS PARAMETER'\n         MEXIT\n.ERR2    MNOTE 8,'FORMAT TYPE IS NOT SUPPORTED'\n         MEXIT\n.ERR3    MNOTE 8,'FIRST ENTRY ADDRESS NOT SPECIFIED.'\n         MEXIT\n.ERR4    MNOTE 8,'LAST  ENTRY ADDRESS NOT SPECIFIED.'\n         MEXIT\n.ERR5    MNOTE 8,'LENGTH NOT SPECIFIED.'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@AMODE": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x870o\\x00\\x870o\\x18\\x04\\x00I\\x00I\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-02T00:00:00", "modifydate": "1987-11-02T18:04:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    @AMODE &MODE\n.*---------------------------------------------------------------------\n.*\n.*       CHANGE ADDRESS MODE\n.*\n.*       @AMODE 24                SET ADDR MODE TO 24 BIT\n.*       @AMODE 31                SET ADDR MODE TO 31 BIT\n.*\n.*---------------------------------------------------------------------\n         LCLA  &X\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n         AIF   ('&MODE' EQ '24').A24\n         AIF   ('&MODE' EQ '31').A31\n         MNOTE 8,'INVALID MODE, MUST BE 24 OR 31'\n         MEXIT\n.A24     ANOP\n*----------------------------------------------------------------------\n*        SET AMODE=24\n*----------------------------------------------------------------------\n         ICM   R1,15,=A(MZZZ&X)\n         BSM   R0,R1              SET AMODE=24\n         AGO   .DONE\n.A31     ANOP\n*----------------------------------------------------------------------\n*        SET AMODE=31\n*----------------------------------------------------------------------\n         ICM   R1,15,=A(MZZZ&X+X'80000000')\n         BSM   R0,R1              SET AMODE=31\n.DONE    ANOP\nMZZZ&X   DS    0H\n.*---------------------------------------------------------------------\n.*---------------------------------------------------------------------\n.*\n.*       FREEWARE: THIS MACRO IS DISTRIBUTED ON AN AS-IS BASIS\n.*                 WITHOUT WARRANTY, EITHER EXPRESSED OR IMPLIED, BY:\n.*\n.*                 THE NATIONAL SYSTEMS PROGRAMMERS ASSOCIATION (NASPA)\n.*                 P.O. BOX 21525\n.*                 GREENFIELD, WI 53221\n.*\n.*\n.*       MACRO WRITTEN BY:\n.*\n.*                 PRODUCTIVITY SYSTEMS, INC.\n.*                 MILWAUKEE, WI\n.*\n.*---------------------------------------------------------------------\n.*\n.*    THIS MACRO HAS MET A BASIC SET OF PROGRAMMING AND\n.*    DOCUMENTATION STANDARDS, BUT HAS NOT BEEN PROGRAM TESTED IN ANY\n.*    FORMAL FASHION BY NASPA. THE USER IS EXPECTED TO MAKE THE FINAL\n.*    EVALUATION OF THE USE OF THIS MACRO IN THEIR ENVIRONMENT.\n.*\n.*    NASPA MAKES NO WARRANTY, EXPRESSED OR IMPLIED, OF THE FITNESS\n.*    FOR A PARTICULAR PURPOSE AS RELATES TO THE DOCUMENTATION,\n.*    FUNCTION, RESULTS, OR PERFORMANCE OF THIS MACRO.\n.*\n.*    IMPLEMENTATION AND USE OF THIS MACRO CONSTITUTES A RELEASE\n.*    FROM LIABILITY OF NASPA FOR ANY PROBLEMS ARISING FROM THE USE OF\n.*    THIS MACRO AT THE USER'S INSTALLATION.\n.*\n.*    THIS MACRO IS MADE AVAILABLE BY NASPA WITHOUT CHARGE.\n.*    RECIPIENTS ARE FREE TO MAKE THIS MACRO AVAILABLE TO OTHERS IN\n.*    LIKE MANNER, PROVIDED THIS DISCLAIMER IS KEPT INTACT.  IT MAY\n.*    NOT BE SOLD, TRADED, OR EXCHANGED FOR CASH, SERVICES, OR AS AN\n.*    INCENTIVE FOR SERVICES AND/OR OTHER PURCHASES, NOR MAY IT BE\n.*    INTEGRATED INTO ANY PROGRAM FOR SUCH USE.\n.*\n.*---------------------------------------------------------------------\n.*---------------------------------------------------------------------\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE133": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00\\x18\\x01\\x162\\x9f\\x01\\x162\\x9f\\x15\\x00\\x00i\\x00i\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-11-24T00:00:00", "modifydate": "2016-11-24T15:00:18", "lines": 105, "newlines": 105, "modlines": 0, "user": "CBT-493"}, "text": "//***FILE 133 is from Alan C. Field, and contains several of his    *   FILE 133\n//*           utilities.  This file contains the following members, *   FILE 133\n//*           with JCL to assemble them.                            *   FILE 133\n//*                                                                 *   FILE 133\n//*           Note:  Also look at CBT File 066 from Alan Field.     *   FILE 133\n//*                                                                 *   FILE 133\n//*           email:    alan_c_field@bluecrossmn.com                *   FILE 133\n//*                                                                 *   FILE 133\n//*           All this stuff now assembles cleanly on z/OS 1.13     *   FILE 133\n//*           and it seems to run OK there, too.                    *   FILE 133\n//*                                                                 *   FILE 133\n//*           For the old versions of everything, see member ASM.   *   FILE 133\n//*                                                                 *   FILE 133\n//*           CLIST    - SOME CLISTS TO DEMONSTRATE THE USE OF SOME *   FILE 133\n//*                      OF THE UTILITIES INCLUDED IN THIS FILE.    *   FILE 133\n//*                      (in IEBUPDTE SYSIN format)                 *   FILE 133\n//*                                                                 *   FILE 133\n//*           CNTL     - JCL TO RUN SOME OF THE UTILITIES INCLUDED  *   FILE 133\n//*                      IN THIS FILE.                              *   FILE 133\n//*                      (in IEBUPDTE SYSIN format)                 *   FILE 133\n//*                                                                 *   FILE 133\n//*           ASM      - ASSEMBLER LANGUAGE SOURCE FOR SOME USEFUL  *   FILE 133\n//*                      UTILITIES (now contains old assembler      *   FILE 133\n//*                      source - possibly still useful for MVS     *   FILE 133\n//*                      3.8.)                                      *   FILE 133\n//*                                                                 *   FILE 133\n//*                      New assembler source is now broken out     *   FILE 133\n//*                      into individual members, together with     *   FILE 133\n//*                      sample assembly JCL.                       *   FILE 133\n//*                                                                 *   FILE 133\n//*                 CPCMD    - ENABLES MVS USERS RUNNING UNDER VM   *   FILE 133\n//*                            TO ISSUE CP COMMANDS AND GET THE     *   FILE 133\n//*                            RESPONSES BACK AT THEIR TSO          *   FILE 133\n//*                            TERMINAL.  CAN ALSO EXECUTED AS A    *   FILE 133\n//*                            BATCH PROGRAM OR STARTED TASK.       *   FILE 133\n//*                            LINK IT WITH AN ALIAS OF CP.  ON     *   FILE 133\n//*                            TSO THEN ENTER CP Q DASD FOR         *   FILE 133\n//*                            EXAMPLE, OR CP ATT 58A MVS.          *   FILE 133\n//*                                                                 *   FILE 133\n//*                 DASDSUB  - GET DASD DEVICE INFORMATION FROM     *   FILE 133\n//*                            UCB. (USED BY SVTOC IN PLI.)         *   FILE 133\n//*                                                                 *   FILE 133\n//*                 DISASM3B - THE SVC TABLE FROM THE               *   FILE 133\n//*                            DISASSEMBLER ON THE CBT TAPE.        *   FILE 133\n//*                            MODIFIED FOR MVSXA AND COPIED INTO   *   FILE 133\n//*                            SVCTAB.                              *   FILE 133\n//*                            (Adjusted slightly by Sam Golob      *   FILE 133\n//*                            to remove most of the user SVC's     *   FILE 133\n//*                            and to add a few new IBM entries.)   *   FILE 133\n//*                                                                 *   FILE 133\n//*                 DSSLVL   - DISPLAY CURRENT DF/DSS PROGRAM       *   FILE 133\n//*                            LEVEL.                               *   FILE 133\n//*                                                                 *   FILE 133\n//*                 JULSUB   - DATE CONVERSION SUBROUTINE.          *   FILE 133\n//*                            (Adjusted slightly by Sam Golob.)    *   FILE 133\n//*                                                                 *   FILE 133\n//*                 LASTCLPA - COMMAND TO DISPLAY DATE AND TIME     *   FILE 133\n//*                            OF LAST CLPA. A COMPANION PROGRAM    *   FILE 133\n//*                            TO LASTIPL WHICH IS ON THE CBT       *   FILE 133\n//*                            TAPE.                                *   FILE 133\n//*                            (Fixed to create PUTLINE output      *   FILE 133\n//*                             by S.Golob, Mar, 2012)              *   FILE 133\n//*                            (Original version is LASTCLPO which  *   FILE 133\n//*                             uses TPUT terminal output.)         *   FILE 133\n//*                            (Fixed for z/OS 2.2 whose release    *   FILE 133\n//*                             number '77A0' sorts lower than      *   FILE 133\n//*                             z/OS 1.2, whose number is '7705'.   *   FILE 133\n//*                             Used CVTOSLV3 to determine level,   *   FILE 133\n//*                             instead of release number.)         *   FILE 133\n//*                                                                 *   FILE 133\n//*                 LNKLST   - DISPLAY NAMES OF LINKLST DATASETS    *   FILE 133\n//*                            CURRENTLY IN USE.                    *   FILE 133\n//*                                                                 *   FILE 133\n//*                 LOGTIME  - TSO COMMAND TO DISPLAY LOGON TIME    *   FILE 133\n//*                            AND DATE FOR THIS TSO SESSION.       *   FILE 133\n//*                            (Taken from PSCB Logon Time field    *   FILE 133\n//*                            and formatted like LISTCLPA display) *   FILE 133\n//*                                                                 *   FILE 133\n//*                 RACFDS   - DISPLAY DATA ABOUT THE RACF          *   FILE 133\n//*                            DATASET(S) IN USE.                   *   FILE 133\n//*                                                                 *   FILE 133\n//*                 SMFDS    - DISPLAY DATA ABOUT CURRENT SMF       *   FILE 133\n//*                            DATASET USAGE.                       *   FILE 133\n//*                                                                 *   FILE 133\n//*                 SVCTAB   - PROGRAM TO DISPLAY SVCTABLE.         *   FILE 133\n//*                            (Enhanced by Sam Golob. Please see   *   FILE 133\n//*                            notes in member SVCTAB#.)            *   FILE 133\n//*                                                                 *   FILE 133\n//*                 TODCN    - PROGRAM TO CONVERT TIMESTAMPS INTO   *   FILE 133\n//*                            REAL DATES AND TIMES.                *   FILE 133\n//*                                                                 *   FILE 133\n//*                 VSAMNAME - CONVERT AND DISPLAY 'REAL' DATASET   *   FILE 133\n//*                            NAMES ASSIGNED BY VSAM FOR PAGE,     *   FILE 133\n//*                            MAN ETC.                             *   FILE 133\n//*                                                                 *   FILE 133\n//*           MACROS   - MACROS NECESSARY TO ASSEMBLE SOURCE IN     *   FILE 133\n//*                      MEMBER ASM.  (Member contains old macros   *   FILE 133\n//*                      to fit the source in the old ASM member.)  *   FILE 133\n//*                                                                 *   FILE 133\n//*                      (Macros are now broken out into indivi-    *   FILE 133\n//*                      dual pds members, marked with id MACRO.)   *   FILE 133\n//*                                                                 *   FILE 133\n//*           SVTOC    - A PL/I UTILITY TO SORT IEHLIST LISTVTOC    *   FILE 133\n//*                      OUTPUT INTO ADDRESS ORDER.                 *   FILE 133\n//*                                                                 *   FILE 133\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASM": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x19\\x01\\x12\\x03O\\x01\\x12\\x03O\\x14\\x05\\x08-\\x08-\\x00\\x00\\xd6\\xd3\\xc4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-03T14:05:19", "lines": 2093, "newlines": 2093, "modlines": 0, "user": "OLD"}, "text": "./ ADD NAME=$$DOC\nCPCMD    - Enables MVS users running under VM to issue CP commands\n           and get the responses back at their TSO terminal. Can also\n           executed as a batch program or started task. Link it with\n           an alias of CP. On TSO then enter CP Q DASD for example, or\n           CP ATT 58A MVS.\nDASDSUB  - Get DASD device information from UCB. (Used by SVTOC in PLI.)\nDISASM3B - The SVC table from the DISASSEMBLER on the CBT tape. Modified\n           for MVSXA and copied into SVCTAB.\nDSSLVL   - Display current DF/DSS program level.\nJULSUB   - Date conversion subroutine.\nLASTCLPA - Command to display date and time of last CLPA. A companion\n           program to LASTIPL which is on the CBT tape.\nLNKLST   - Display names of LINKLST datasets currently in use.\nRACFDS   - Display data about the RACF dataset(s) in use.\nSMFDS    - Display data about current SMF dataset usage.\nSVCTAB   - Program to display SVCTABLE.\nTODCN    - Program to convert timestamps into real dates and times.\nVSAMNAME - Convert and display 'real' dataset names assigned by VSAM\n           for PAGE, MAN etc.\n./ ADD LIST=ALL,NAME=CPCMD\nCPCMD    MOWSTART SP=250\n*********************************************************************\n*                                                                   *\n* PROGRAM TO RUN ON MVS TO ISSUE VM/CP COMMAND.                     *\n* MAY BE RUN AS A TSO COMMAND, EXECUTED AS A PROGRAM, OR RUN AS A   *\n* STARTED TASK.                                                     *\n* LINK WITH AC(1). NAME IS CPCMD WITH ALIAS CP.                     *\n*                                                                   *\n* E.G. (1) // EXEC PGM=CPCMD,PARM='Q CPUID'                         *\n*      (2) CP Q CPUID                                               *\n*      (3) // EXEC PGM=CPCMD                                        *\n*          //SYSIN DD *                                             *\n*          Q CPUID                                                  *\n*          ATT 76A MVSXA 76A                                        *\n*          /*                                                       *\n*                                                                   *\n* IF IN BATCH, AND A SYSIN DD IS PRESENT, THE PARM IS IGNORED AND   *\n* THE COMMANDS ARE READ FROM THE SYSIN FILE.                        *\n*                                                                   *\n*********************************************************************\nMOWWORK  DSECT\nTIOT     DC    F'0'           EXTRACT WORK AREA, KEEP    (1)\nTSO      DC    F'0'            THESE 3 TOGETHER AND      (2)\nASID     DC    F'0'             IN THIS ORDER.           (3)\n*\nACMD     DC    A(0)           THESE FOUR FULL WORDS      (1)\nABUF     DC    A(0)            MUST REMAIN               (2)\nCMDL     DC    F'0'             IN THE SAME RELATIVE     (3)\nRESPBUFL DC    F'0'              POSITIONS.              (4)\nCMDFLG   DC    X'00'          INDIC. COMMAND, PROGRAM OR STARTED TASK\nSYSINFLG EQU   X'80'\nSTCFLG   EQU   X'04'\nBATFLG   EQU   X'02'\nTSOFLG   EQU   X'01'\n         DS    XL7            UNUSED\n         SPACE 2\nCPCMD    CSECT\n         USING CVT,R10\n         USING ASVT,R9\n         USING ASCB,R8\n         LR    R11,R1                   COPY A(PARM)\n         L     R10,16                   A(CVT)\n         L     R9,CVTASVT               A(ASVT)\n         LA    R9,ASVTFRST              -> FIRST ASVT ENTRY\n         LA    R7,TIOT                  POINT TO RETURN AREA\n         EXTRACT (7),FIELDS=(TSO,ASID,TIOT)  EXTR TO GET STUFF\n         MVI   CMDFLG,TSOFLG            INITIALIZE CMD FLAG\n         L     R7,TSO                   -> TO TSO INDICATOR\n         TM    0(R7),X'80'              ARE WE ON TSO?\n         BO    GOTTYPE                  IT WAS\n         MVI   CMDFLG,BATFLG            NOW A 1, TEST FOR JOB\n         L     R8,ASID                  GET ASID INTO A REG\n         SLL   R8,2                     MULTIPLY BY 4\n         L     R8,0(R8,R9)              NOW HAS A(OUR ASCB)\n         CLC   ASCBJBNI,=F'0'           TEST FOR JOB\n         BNE   GOTTYPE                  NOT ZERO, SO ITS A JOB\n         MVI   CMDFLG,STCFLG            NOW ITS A 2, STC\nGOTTYPE  EQU   *\n         TM    CMDFLG,TSOFLG            IN TSO MODE?\n         BO    GETPARM                  YES, SO GETPARM\n         LA    R3,=CL8'SYSIN'           DDNAME TO LOOK FOR\n         BAL   R10,TIOTSCAN             GO SEE IF THERE IS ONE\n         BNE   GETPARM                  WASN'T A SYSIN\n         OI    CMDFLG,SYSINFLG          SET SYSIN FLAG ON\n         OPEN  (SYSIN,(INPUT))          OPEN IT\n         B     COMP4                    AND GO GET WORK AREA\n*********************************************************************\n* DETERMINED WHO WE ARE, PROCESS ACCORDINGLY                        *\n*********************************************************************\nGETPARM  EQU   *\n         LR    R1,R11         RESTORE A(PARM)\n         ICM   R2,B'1111',0(R1)  POINT TO PARAMETER\n         LH    R1,0(R2)       PICK UP LENGTH\n         BL    COMP4          ONLY ONE PARM\n         SH    R1,=H'4'       CALL FROM TMP\n         SH    R1,2(R2)\n         LA    R2,2(,R2)      PREFIX IS 4 BYTES\n         AH    R2,0(R2)       SKIP OVER COMMAND NAME\n         STH   R1,0(R2)       PUT LENGTH OF CP CMD IN CORRECT PLACE\nCOMP4    EQU   *\n         LH    R5,BUFLEN              LENGTH OF BUFFER AREA\n         GETMAIN RU,LV=(R5),SP=250,BNDRY=PAGE  FOR FOR RETURNED DATA\n         ST    R1,ABUF                A(RESPBUF) - SAVE IT\n         TM    CMDFLG,SYSINFLG+BATFLG READING FROM SYSIN?\n         BO    CMDOK                  YES\n         LH    R3,0(R2)               GET LENGTH OF COMMAND\n         LTR   R3,R3                  IS THERE ANY LENGTH?\n         BP    CMDOK                  GO TRY TO DO IT\nNOCMDTXT EQU   *\n         MVC   0(26,R1),=C'NO CP COMMAND TEXT ENTERED'\n         MVI   26(R1),X'15'           NEW LINE CHAR\n         MVC   RESPBUFL,=F'27'        LENGTH OF MESSAGE\n         B     RESULT         PRETEND WE DID IT, BUT TELL ERROR MSG\nCMDOK    EQU   *\n         TM    CMDFLG,SYSINFLG+BATFLG PROCESSING A SYSIN FILE?\n         BNO   CMDOK1                 NO, USE VALUE IN PARM\n         GET   SYSIN                  GET A RECORD FROM SYSIN\n         LA    R3,71(,R1)             POINT TO END OF RECORD\nSCAN1    EQU   *\n         CLI   0(R3),C' '             A BLANK\n         BNE   SCAN2                  NO\n         BCTR  R3,0                   BACK UP A CHAR\n         B     SCAN1                  AND CHECK IT\nSCAN2    EQU   *\n         SR    R3,R1                  NOW R3 HAS LENGTH OF COMMAND\n         LA    R3,1(R3)               ADD 1 BACK TO GET REAL LENGTH\n         LR    R2,R1                  COPY POINTER TO COMMAND TEXT\n         SH    R2,=H'2'               DO THIS SO MOVCMD INSTR WILL WORK\nCMDOK1   EQU   *\n         L     R1,ABUF                RESTORE REG 1\n         ST    R3,CMDL                SAVE LENGTH\n         LH    R5,BUFLEN              RELOAD LENGTH\n         LA    R1,0(R1,R5)            GET EOBUFF.....\n         SR    R1,R3                  ....MINUS CMD LENGTH AND .....\n         N     R1,=F'-8'              .....ROUND BACK TO DOUBLEWORD.\n         ST    R1,ACMD                SAVE COMMAND ADDRESS\n         BCTR  R3,0                   AND\n         EX    R3,MOVCMD              MOVE IT TO IT'S NEW HOME\n         LR    R2,R1\n         S     R1,ABUF                SUBT START OF RESP. AREA\n         ST    R1,RESPBUFL            TO GET LENGTH\n         LA    R3,1(,R3)              GET ORIGINAL CMD LENGTH\n         LR    R0,R3                  AND COPY ITS VALUE\n         BCTR  R2,0\nMAKEUP   EQU   *\n         LA    R1,0(R2,R3)            ENSURE\n         OI    0(R1),X'40'               UPPER\n         BCT   R3,MAKEUP                     CASE\n         SPACE 3\n*********************************************************************\n* THE FOLLOWING TESTS FOR COMMANDS WE AREN'T ALLOWED TO ISSUE       *\n*********************************************************************\nNONBLNK  EQU   *\n         CLI   0(R1),X'40'              IS THIS A BLANK?\n         BNE   CMDSTRT                  NO, GO TO CHECK COMMAND\n         LA    R1,1(R1)                 POINT TO NEXT CHAR\n         BCT   R0,NONBLNK               AND CHECK IT\n         L     R1,ABUF\n         B     NOCMDTXT\nCMDSTRT  EQU   *\n         CLC   =C'CP ',0(R1)            ADJUC\n         BNE   NOCPREFX\n         LA    R1,3(,R1)                POINT TO START OF COMMAND\n         SH    R0,=H'3'                 ADJUST LENGTH\n         B     NONBLNK\nNOCPREFX EQU   *\n         CH    R0,=H'3'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'LOG',0(R1)            LOGOFF\n         BE    NOTALOWD\n         CLC   =C'I ',0(R1)             IPL\n         BE    NOTALOWD\n         CLC   =C'IPL',0(R1)            IPL\n         BE    NOTALOWD\n         CH    R0,=H'4'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'DISC',0(R1)           DISCONNECT\n         BE    NOTALOWD\n         CH    R0,=H'8'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'SHUTDOWN',0(R1)       SHUTDOWN\n         BE    NOTALOWD\nALLOWED  EQU   *\n         MODESET KEY=ZERO,MODE=SUP\n         L     R5,ABUF           A(BUF)\n         LH    R11,BUFLEN        LENGTH OF TOTAL AREA\n         BCTR  R11,0             SUBTRACT ONE\n         LA    R7,0(R5,R11)      COMPUTE END ADDRESS OF AREA\n         PGSER R,FIX,A=(R5),EA=(R7),ECB=0  FIX PAGES IN STORAGE\n         L     R8,ACMD           A(CMD)\n         LRA   R8,0(R8)          POINT TO REAL ADDRESS OF CMD\n         LRA   R9,0(R5)          POINT TO REAL ADDRESS OF BUF\n         L     R10,CMDL          LENGTH OF COMMAND TO EXECUTE\n         L     R11,RESPBUFL      LENGTH OF RETURN AREA\n         O     R10,=X'40000000'  INDICATE RETURN RESPONSE IN BUFFER\n         DC    X'838A0008'       DIAGNOSE INSTR - NO OPCODE\n         BNZ   *+8               LEAVE LEN ALONE IF NOT ALL FIT\n         ST    R11,RESPBUFL      LENGTH OF RESP\n         PGSER R,FREE,A=(R5),EA=(R7)  NOW FREE UP PAGES AGAIN\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE\nRESULT   L     R2,RESPBUFL    LOAD IN LENGTH OF RETURNED TEXT\n         LTR   R2,R2          SET COND CODE\n         BNP   FIN            NO RESPONSE TO COMMAND\n         SPACE\n*********************************************************************\n* PROCESS RESPONSE FOR CALLER                                       *\n*********************************************************************\n         L     R3,ABUF        POINT TO START OF RETURNED TEXT\n         TM    CMDFLG,BATFLG  IS THIS BATCH EXECUTION?\n         BNO   DOPUTS         NO, ITS A COMMAND OR STC\n         OPEN  (SYSPRINT,(OUTPUT)) ONLY FOR JOB/BATCH EXECUTION\n         TM    SYSPRINT+48,X'10'   DID IT OPEN?\n         BNO   FIN            NO, SOME PROBLEM SO JUST END\n         SPACE\nDOPUTS   EQU   *\n         LR    R1,R3          COPY POINTER TO START OF LINE\nSCAN     CLI   0(R3),X'15'    NEW LINE CHAR\n         BE    GETLEN         YES, SO CALCULATE LEN FOR TPUT\n         LA    R3,1(R3)       POINT TO NEXT CHAR\n         BCT   R2,SCAN        AND CHECK IT WHILE THERE ARE SOME\n         TM    CMDFLG,SYSINFLG+BATFLG   PROCESSING A SYSIN STREAM?\n         BO    CMDOK          YES, GET MORE TO DO\n         B     FIN            NO MORE BUFFER\nGETLEN   EQU   *\n         LR    R0,R3          CALCULATE LENGTH OF TEXT TO PUT\n         SR    R0,R1          LENGTH TO BE PUT\n         STH   R0,SYSPRINT+82 SAVE THE LENGTH\n         LR    R5,R0          COPY LENGTH OF TEXT\n         LR    R7,R1          COPY POINTER TO DATA\n         TPUT  (1),(0),R      ISSUE TPUT (NO-OP IN BATCH)\n         TM    CMDFLG,TSOFLG  IS IT TSO?\n         BO    NXTLINE        YES, SO DON'T DO PUT TO SYSPRINT\n         TM    CMDFLG,BATFLG  IS IT BATCH?\n         BO    BATCHPUT       YES, SO DO PUT TO SYSPRINT\n         MVI   WTOMSG+4,X'40' MOVE IN A BLANK TO BYTE 1 OF MESSAGE\n         MVC   WTOMSG+5(79),WTOMSG+4 AND BLANK ENTIRE FIELD\n         BCTR  R5,0           SUBTRACT 1 FOR EXECUTED MOVE\n         EX    R5,WTOTEXT     MOVE TEXT TO WTO MESSAGE AREA\n         WTO   MF=(E,WTOMSG)  AND DO WTO BECAUSE WE MUST BE STC\n         B     NXTLINE        GO TO NEXT LINE\nBATCHPUT EQU   *\n         PUT   SYSPRINT,(7)   WRITE OUTPUT TO SYSPRINT\nNXTLINE  LA    R3,1(R3)       -> TO CHAR FOLLOWING X'15' FOR NEXT PUT\n         BCT   R2,DOPUTS      SUBTRACT ONE FOR CHARS LEFT TO DO\n         TM    CMDFLG,SYSINFLG+BATFLG   PROCESSING A SYSIN STREAM?\n         BO    CMDOK          YES, GET MORE TO DO\n         B     FIN            NO MORE BUFFER\nNOTALOWD EQU   *\n         LA    R8,30                    LENGTH OF RESPONSE + 1\n         ST    R8,RESPBUFL              SAVE LENGTH\n         L     R15,ABUF                 A(BUFFER)\n         MVC   0(29,R15),=CL29'COMMAND NOT ALLOWED:          '\n         MVC   21(8,R15),0(R1)          MOVE IN COMMAND NAME\n         MVI   29(R15),X'15'            LF\n         B     RESULT                   RETURN\n         SPACE 2\nFIN      EQU   *\n         CLOSE (SYSPRINT,,SYSIN)        EVEN IF IT WASN'T OPEN\n         L     R1,ABUF                  ADDRESS OF WORK AREA TO FREE\n         LH    R5,BUFLEN                AND LENGTH\n         FREEMAIN R,LV=(5),A=(1),SP=250 FREE GOTTEN STORAGE\n         MOREND SP=250\n         EJECT\n***********************************************************************\n*  CODE FOR TIOTSCAN SUB                                              *\n***********************************************************************\nTIOTSCAN EQU   *\n         L     R2,TIOT          LOAD ADDRESS\n         LA    R2,24(R2)        AND AGAIN\n         XR    R4,R4            CLEAR A REGISTER\nTIOTSC1  IC    R4,0(R2)         PUT A BYTE IN A REGISTER\n         LTR   R4,R4            SEE IF IT WAS ZERO\n         BZ    NOTIN\n         TM    3(R2),B'00010000'   IS IT DD DYNAM?\n         BO    *+10             YES, SO SKIP AROUND THIS\n         CLC   0(8,R3),4(R2)    IS THIS SAME NAME AS WE ARE SEEKING\n         BCR   8,R10            YES IT IS, SO JUST RETURN\n         AR    R2,R4            POINT TO NEXT ENTRY\n         B     TIOTSC1          GO BACK AND LOOK AT IT\nNOTIN    CLI   *,0              SET CONDITION CODE NOT EQUAL\n         BR    R10              RETURN WITH NON ZERO CONDITION CODE\n         EJECT\n         DS    0H\nBUFLEN   DC    H'4096'          SIZE OF RESPONSE/COMMAND BUFFER\n*                               MAY BE SMALLER, BUT DON'T MAKE BIGGER.\nMOVCMD   MVC   0(*-*,R1),2(R2)\nWTOTEXT  MVC   WTOMSG+4(*-*),0(R7)      EXECUTED MOVE INSTR\nWTOMSG   WTO   '0123456789 123456789 123456789 123456789 123456789 1234*\n               56789 123456789 123456789',                             *\n               ROUTCDE=(2),MF=L\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),LRECL=80,RECFM=FB,     *\n               EODAD=FIN\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=U\n         IHAASVT\n         IHAASCB\n         CVT   DSECT=YES\n         END\n./ ADD LIST=ALL,NAME=DASDSUB\nDASDSUB  MOWSTART\n**********************************************************************\n* DASD SUB IS A ROUTINE TO GET CERTAIN DETAILS ABOUT A DASD DEVICE   *\n* AND RETURN THEM TO THE CALLER. IT IS USED BY SVTOC FOR ONE.        *\n* CALL DASDSUB(VOLSER,CYLS,TRKS/CYL,DSCBS,TYPE).                     *\n**********************************************************************\n         USING CVT,R2\n         USING UCBOB,R11\n         LR    R10,R1           COPY PARM POINTER\n         L     R2,16            LOAD CVT ADDRESS\n         L     R3,0(R10)        POINT TO CALLERS VOLSER\n         XC    UWORK,UWORK      CLEAR WORK AREA\n         MVI   DEVCLASS,X'20'   INDICATE SEARCH FOR DASD DEVICES\n         XC    ADDRUCB,ADDRUCB  CLEAR UCB ADDRESS\nUCBLOOP  L     R15,CVTUCBSC     A(UCB SCAN ADDRESS)\n         CALL  (15),(UWORK,DEVCLASS,ADDRUCB),VL,MF=(E,CALLIST)\n         LTR   R15,R15          SUCCESSFUL?\n         BNZ   UCBEND           END OF UCBS\n         L     R11,ADDRUCB      GET UCB ADDRESS\n         CLI   UCBID,UCBSTND    IS UCB ADDRESS VALID\n         BNE   UCBLOOP          NO\n         TM    UCBSTAT,UCBONLI  IS UCB ONLINE?\n         BNO   UCBLOOP          NO  SKIP\n         TM    UCBSTAT,UCBCHGS  CHANGING STATUS?\n         BO    UCBLOOP          YES SKIP\n         CLC   UCBVOLI,0(R3)    IS THIS OUR VOLUME'S UCB?\n         BNE   UCBLOOP\n         SPACE 1\n         L     R9,20(R11)               A(UCB COMMON EXTENSION)\n         L     R9,24(R9)                A(DEVICE CLASS EXTENSION)\n         USING DCE,R9\n         L     R2,4(R10)                A(2ND ARG), CYLS PER VOL\n         LH    R3,DCEUDCYL              # CYLS\n         BCTR  R3,0                     LESS ONE\n         ST    R3,0(R2)                 SAVE IT IN CALLERS AREA\n         L     R2,8(R10)                A(3RD ARG), TRKS PER CYL\n         LA    R3,15                    WE'LL CHEAT FOR NOW\n         ST    R3,0(R2)                 SAVE IT IN CALLERS AREA\n         L     R8,DCEVIB                GET ADDR OF VIB\n         USING VIB,R8\n         L     R2,12(R10)               A(4TH ARG), DSCBS PER TRK\n         SR    R3,R3\n         IC    R3,VIBDSCB               GET IT FROM VIB\n         ST    R3,0(R2)                 SAVE IN CALLERS AREA\n         L     R2,16(R10)               A(5TH ARG), DEV TYPE\n         MVC   0(5,R2),=C'3380 '        A 3380\n         MVI   4(R2),C'D'\n         CLI   DCEMDRDT,D3380D          A 'D' ?\n         BE    UCBEND\n         MVI   4(R2),C'J'\n         CLI   DCEMDRDT,D3380J          A 'J' ?\n         BE    UCBEND\n         MVI   4(R2),C'E'\n         CLI   DCEMDRDT,D3380E          AN 'E' ?\n         BE    UCBEND\n         MVI   4(R2),C'K'\n         CLI   DCEMDRDT,D3380K          A 'K'?\n         BE    UCBEND\n         CLI   DCEMDRDT,D3380           A STANDARD? OR CAN'T TELL\n         MVI   4(R2),C' '               BLANK\nUCBEND   EQU   *\n         MOREND\nD3380    EQU  X'14'             MDR TYPE FOR STD MODELS\nD3380D   EQU  X'1C'             MDR TYPE FOR 3380-D\nD3380E   EQU  X'1B'             MDR TYPE FOR 3380-E\n*  UCB LOOKUP WORK AREA AND PARM LIST VARIABLES\nUWORK    DS    XL100             WORK AREA, MUST BE ZEROED\nDEVCLASS DS    X                 DEVICE CLASS TO SEARCH FOR (DASD)\nADDRUCB  DS    F                 UCB ADDRESS (FULL WORD IN LENGTH)\n         SPACE 1\nCALLIST  CALL  ,(,,,),MF=L       LIST FORM FOR UCB LOOKUP\n         SPACE 1\nVIB      DSECT                   VTOC INFO BLOCK\nVIBID    DC    CL4'VIB '         EYECATCHER\n         DC    CL2' '\n         DC    CL2' '\nVIBDSCB  DC    X'00'             DSCBS PER TRACK\n         DC    X'000000'\n         DC    CL4' '\n         DC    CL2' '\n         DC    CL2' '\n         DC    CL2' '\n         DC    CL2' '\n         DC    CL2' '\nVIBSER   DC    CL6' '            VOLSER\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO\n         EJECT\n         IEFUCBOB LIST=NO\n         IECDDCE\n         END\n./ ADD LIST=ALL,NAME=DISASM3B\n         EJECT\n***********************************************************************\n* SVC NAME TABLE                                                      *\n***********************************************************************\nSVCOP    DS    0CL15                          SVC NAME TABLE\n         DC    AL1(0),CL14'EXCP/XDAP'\nSVCNAML  EQU   *-SVCOP                        LENGTH OF EACH ENTRY\n         DC    AL1(1),CL14'WAIT/WAITR/...'\n         DC    AL1(2),CL14'POST'\n         DC    AL1(3),CL14'EXIT'\n         DC    AL1(4),CL14'GETMAIN'\n         DC    AL1(5),CL14'FREEMAIN'\n         DC    AL1(6),CL14'LINK'\n         DC    AL1(7),CL14'XCTL'\n         DC    AL1(8),CL14'LOAD'\n         DC    AL1(9),CL14'DELETE'\n         DC    AL1(10),CL14'GET/FREEMAIN R'\n         DC    AL1(11),CL14'TIME'\n         DC    AL1(12),CL14'SYNCH'\n         DC    AL1(13),CL14'ABEND'\n         DC    AL1(14),CL14'SPIE'\n         DC    AL1(15),CL14'ERREXCP'\n         DC    AL1(16),CL14'PURGE'\n         DC    AL1(17),CL14'RESTORE'\n         DC    AL1(18),CL14'BLDL/FIND'\n         DC    AL1(19),CL14'OPEN'\n         DC    AL1(20),CL14'CLOSE'\n         DC    AL1(21),CL14'STOW'\n         DC    AL1(22),CL14'OPEN TYPE J'\n         DC    AL1(23),CL14'CLOSE TYPE T'\n         DC    AL1(24),CL14'DEVTYPE'\n         DC    AL1(25),CL14'TRKBAL'\n         DC    AL1(26),CL14'LOCATE, ETC'\n         DC    AL1(27),CL14'OBTAIN'\n         DC    AL1(28),CL14'''RESERVED'''\n         DC    AL1(29),CL14'SCRATCH'\n         DC    AL1(30),CL14'RENAME'\n         DC    AL1(31),CL14'FEOV'\n         DC    AL1(32),CL14'ALLOC'\n         DC    AL1(33),CL14'IOHALT'\n         DC    AL1(34),CL14'MGCR/QEDIT'\n         DC    AL1(35),CL14'WTO/WTOR'\n         DC    AL1(36),CL14'WTL'\n         DC    AL1(37),CL14'SEGLD/SEGWT'\n         DC    AL1(38),CL14'''RESERVED'''\n         DC    AL1(39),CL14'LABEL'\n         DC    AL1(40),CL14'EXTRACT'\n         DC    AL1(41),CL14'IDENTIFY'\n         DC    AL1(42),CL14'ATTACH'\n         DC    AL1(43),CL14'CIRB'\n         DC    AL1(44),CL14'CHAP'\n         DC    AL1(45),CL14'OVLYBRCH'\n         DC    AL1(46),CL14'TTIMER'\n         DC    AL1(47),CL14'STIMER'\n         DC    AL1(48),CL14'DEQ'\n         DC    AL1(49),CL14'''RESERVED'''\n         DC    AL1(50),CL14'''RESERVED'''\n         DC    AL1(51),CL14'SNAP/SDUMP'\n         DC    AL1(52),CL14'RESTART'\n         DC    AL1(53),CL14'RELEX'\n         DC    AL1(54),CL14'DISABLE'\n         DC    AL1(55),CL14'EOV'\n         DC    AL1(56),CL14'ENQ/RESERVE'\n         DC    AL1(57),CL14'FREEDBUF'\n         DC    AL1(58),CL14'RELBUF/REQBUF'\n         DC    AL1(59),CL14'OLTEP'\n         DC    AL1(60),CL14'(E)STAE/STAI'\n         DC    AL1(61),CL14'IKJEGS6A'\n         DC    AL1(62),CL14'DETACH'\n         DC    AL1(63),CL14'CHKPT'\n         DC    AL1(64),CL14'RDJFCB'\n         DC    AL1(65),CL14'''RESERVED'''\n         DC    AL1(66),CL14'BTAMTEST'\n         DC    AL1(67),CL14'''RESERVED'''\n         DC    AL1(68),CL14'SYNAD...'\n         DC    AL1(69),CL14'BSP'\n         DC    AL1(70),CL14'GSERV'\n         DC    AL1(71),CL14'ASGNBFR, ETC'\n         DC    AL1(72),CL14'''NO MACRO'''\n         DC    AL1(73),CL14'SPAR'\n         DC    AL1(74),CL14'DAR'\n         DC    AL1(75),CL14'DQUEUE'\n         DC    AL1(76),CL14'IFBSTAT'\n         DC    AL1(78),CL14'LSPACE'\n         DC    AL1(79),CL14'STATUS'\n         DC    AL1(81),CL14'SETPRT'\n         DC    AL1(82),CL14'     '\n         DC    AL1(83),CL14'SMFWTM'\n         DC    AL1(84),CL14'GRAPHICS'\n         DC    AL1(85),CL14'DDRSWAP'\n         DC    AL1(86),CL14'ATLAS'\n         DC    AL1(87),CL14'DOM'\n         DC    AL1(88),CL14'     '\n         DC    AL1(91),CL14'VOLSTAT'\n         DC    AL1(92),CL14'TCBEXCP'\n         DC    AL1(93),CL14'TGET/TPUT'\n         DC    AL1(94),CL14'STCC'\n         DC    AL1(95),CL14'SYSEVENT'\n         DC    AL1(96),CL14'STAX'\n         DC    AL1(97),CL14'IKJEGS9G'\n         DC    AL1(98),CL14'PROTECT'\n         DC    AL1(99),CL14'DYNALLOC'\n         DC    AL1(100),CL14'IKJEFFIB'\n         DC    AL1(101),CL14'QTIP'\n         DC    AL1(102),CL14'AQCTL (TCAM)'\n         DC    AL1(103),CL14'XLATE'\n         DC    AL1(104),CL14'TOPCTL (TCAM)'\n         DC    AL1(105),CL14'IMGLIB'\n         DC    AL1(107),CL14'MODESET'\n         DC    AL1(109),CL14'ESR TYPE 4'\n         DC    AL1(110),CL14'DSTATUS'\n         DC    AL1(111),CL14'''NO MACRO'''\n         DC    AL1(112),CL14'PGRLSE'\n         DC    AL1(113),CL14'PGFIX/PGFREE/..'\n         DC    AL1(114),CL14'EXCPVR'\n         DC    AL1(116),CL14'ESR TYPE 1'\n         DC    AL1(117),CL14'DEBCHK'\n         DC    AL1(119),CL14'TESTAUTH'\n         DC    AL1(120),CL14'GETMAIN/FREEMAIN'\n         DC    AL1(121),CL14'VSAM'\n         DC    AL1(122),CL14'ESR TYPE 2'\n         DC    AL1(123),CL14'PURGEDQ'\n         DC    AL1(124),CL14'TPIO'\n         DC    AL1(125),CL14'EVENTS'\n         DC    AL1(126),CL14'MSS INTERFACE'\n         DC    AL1(127),CL14' '\n         DC    AL1(128),CL14' '\n         DC    AL1(129),CL14' '\n         DC    AL1(130),CL14'RACHECK'\n         DC    AL1(131),CL14'RACINIT'\n         DC    AL1(132),CL14'RACLIST'\n         DC    AL1(133),CL14'RACDEF'\n         DC    AL1(134),CL14' '\n         DC    AL1(135),CL14' '\n         DC    AL1(136),CL14' '\n         DC    AL1(137),CL14'ESR TYPE 6'\n         DC    AL1(138),CL14'PGSER (XA)'\n         DC    AL1(139),CL14'CVAF...'\n* SVCS BELOW 200 ARE RESERVED FOR IBM\n         DC    AL1(215),CL14'CICS(HPSVC)  '\n         DC    AL1(216),CL14'CICS(CSVC)   '\n         DC    AL1(235),CL14'             '\n         DC    AL1(240),CL14'             '\n         DC    AL1(241),CL14'VSAMTUNE     '\n         DC    AL1(242),CL14'UCC7         '\n         DC    AL1(243),CL14'             '\n         DC    AL1(244),CL14'             '\n         DC    AL1(245),CL14'UCC11        '\n         DC    AL1(246),CL14'             '\n         DC    AL1(247),CL14'UCC1 (X)     '\n         DC    AL1(248),CL14'UCC1 (Y)     '\n         DC    AL1(249),CL14'DIAGNOSE     '\n         DC    AL1(250),CL14'             '\n         DC    AL1(251),CL14'             '\n         DC    AL1(252),CL14'             '\n         DC    AL1(253),CL14'             '\n         DC    AL1(254),CL14'             '\n         DC    AL1(255),CL14'JES3 SDF     '\n         DC    X'FF'                   END OF TABLE\n./ ADD LIST=ALL,NAME=DSSLVL\n**********************************************************************\n* YOU WILL NEED THE ADRMCLVL MACRO WHICH CAN BE OBTAINED FROM        *\n* SYS1.SAMPLIB.                                                      *\n**********************************************************************\nDSSLVL   MOWSTART\n         ADRMCLVL                         GET DFDSS LEVEL\n         ST    R1,DSSVMR                  SAVE RESULT\n         TM    DSSVMR,X'04'               TEST FOR SUCCESSFUL GET\n         BZ    OK                         DFDSS IS THERE\n         MVC   MSG+10(11),=C'UNAVAILABLE'\n         TPUT  MSG,L'MSG                  UNAVAILABLE MSG\n         B     FIN                        RETURN\nOK       EQU   *\n         SLL   R1,8                       MOVE IT LEFT\n         ST    R1,DSSVMR                  SAVE IT AGAIN\n         UNPK  DOUBLE(8),DSSVMR           UNPACK NUMBERS\n         MVC   MASK(4),DOUBLE+2           MOVE INTO MESSAGE\n         TPUT  MSG,LMSG                   TELL RELEASE ETC\nFIN      EQU   *\n         MOREND\nMSG      DC    C'DF/DSS IS VER/REL/MOD '\nMASK     DC    C'VMMR'\nLMSG     EQU   *-MSG\nDOUBLE   DC    D'0'\nDSSVMR   DC    F'0'\n         END\n./ ADD LIST=ALL,NAME=JULSUB\n         TITLE '   J U L S U B   '\n************************************************************\n*                                                          *\n*        'JULSUB'                                          *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.\n*        DATE WRITTEN. JUNE 4 1976.\n*        DATE UPDATED. APRIL 23 1980.\n*        ATTRIBUTES. RE-ENTRANT.\n*        REMARKS.\n*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT\n*            TO ANOTHER. THE DIFFERENT FORMATS ARE:\n*\n*            INPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               3   JULIAN       PACKED    PL4'YYYYDDDF'\n*\n*            OUTPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'\n*               8   ALPHA        8-CHAR    CL8'03JUN76 '\n*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'\n*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH\n*                                               2 - LAST OF MONTH\n*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)\n*             128   WEEKDAY      12-CHAR   CL12'SATURDAY'\n*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'\n*             512   TIME         8-CHAR    CL8'HH:MM:SS'\n*\n*            INPUT MUST BE EITHER JULIAN OR STANDARD.\n*\n*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES\n*            POINTED TO BY REGISTER 1\n*               1   THE INPUT DATE\n*               2   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE INPUT FORMAT\n*               3   THE RECEIVING FIELD FOR OUTPUT\n*               4   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE OUTPUT FORMAT\n*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)\n*            NOTES.\n*               1) MAKE OUTPUT 00YY IF INPUT IS 00YY.\n*               2) FOR CURRENT DATE, USE TYPE 1 DATE ZERO.\n         SPACE\n         MACRO\n         STAMP\n         LCLC  &ASMTIME\n&ASMTIME SETC  '&SYSTIME'(1,5)\n         DC    CL16' &SYSDATE &ASMTIME '\n         MEND\n         SPACE\nJULSUB CSECT\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'JULSUB   '\n         STAMP\n@PROLOG  STM   14,12,12(13)\n         LR    R12,15\n         LR    R2,R1\n*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS\n         L     R1,16(,R1)          GET SAVEAREA ADDRESS\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R1,R2\n         USING @DATA,13\n         SPACE\n         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR\n         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR\n         MVC   INPUT(4),0(R2)      COPY INPUT\n         XC    DOUBLE,DOUBLE\n         SLR   R14,R14             ZERO R14\n         ST    R14,FRSTLAST\n         ST    R14,TIMEB\n         CLI   3(R3),INP003        INPUT JULIAN PACKED?\n         BNE   INP01               NO - BRANCH\n         SPACE\n*              INPUT IS JULIAN PACKED\n         SPACE\n         MVC   DOUBLE+4(4),INPUT   MOVE INPUT\n         CVB   R1,DOUBLE\n         ST    R1,JB\nJULCOMM  L     R14,DOUBLE+4        SAVE 00YYDDDF\n         LH    R1,DOUBLE+4         GET 00YY\n         SLL   R1,16               GET 00YY0000\n         SRL   R1,12               GET 00000YY0\n         ST    R1,DOUBLE+4         STORE BACK 00000YY0\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n         CH    R1,=H'99'\n         BH    *+8\n         AH    R1,=H'1900'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)     SAVE YYYY CHAR\n         MVC   YYC,YYYYC+2\n*\n         ST    R14,DOUBLE+4        RESTORE 00YYDDDF\n         XC    DOUBLE(6),DOUBLE      00YYDDDF TO 0000DDDF\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR\n         CVB   R1,DOUBLE           CONVERT DDD TO BINARY\n         ST    R1,DDDB             SAVE DDD BINARY\n         SPACE\n         BAL   R9,TODD\n         BAL   R9,TOSB\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\nINP01    CLI   3(R3),INP001        INPUT JULIAN BINARY?\n         BNE   INP02               NO - BRANCH\n         L     R1,INPUT            GET BINARY YYYYDDD\n         LTR   R1,R1               ZERO?\n         BNZ   INP01A              NO - BRANCH\n         TIME  BIN\n         ST    R0,TIMEB            SAVE TIME\n         SLR   R0,R0\n         STM   R0,R1,DOUBLE\n         CVB   R1,DOUBLE\n         B     INP01B\nINP01A   CVD   R1,DOUBLE           TO DECIMAL\nINP01B   ST    R1,JB\n         B     JULCOMM             PROCEED AS IF INP003\n         SPACE\n*              CONVERT JULIAN DATE TO MONTH-DAY-YEAR\n*\n*                 INPUT  - YYYYB AND DDDB   (ALSO YYC)\n*\n*                 OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST\n         SPACE\nTODD     MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   DPM365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   DPM366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   DPM365              NO - NOT A LEAP YEAR\nDPM366   MVI   DPM+3,29            CHANGE FEB TO 29 DAYS\nDPM365   EQU   *\n         LA    R14,2               INDEX FOR DPM\n         LR    R0,R14              INDEX INCREMENT\n         L     R1,DDDB             DAY OF YEAR\nDPMLOOP  CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?\n         BE    DPMEND              EQUAL - BRANCH\n         BL    DPMWIN              LESS - BRANCH\n         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY\n         ALR   R14,R0              ADD 2 TO INDEX\n         B     DPMLOOP             LOOP\nDPMEND   MVI   FRSTLAST+3,2        LAST DAY OF MONTH\n         B     DPMCOMM\nDPMWIN   CH    R1,=H'1'            FIRST OF MONTH?\n         BNE   DPMCOMM             NO - BRANCH\n         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH\nDPMCOMM  SRL   R14,1               HALVE INDEX TO GET MM\n         ST    R1,DDB              SAVE DD BINARY\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR\n         ST    R14,MMB             SAVE MM BINARY\n         CVD   R14,DOUBLE          CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n         BR    R9\n         SPACE\n*              CONVERT MONTH NUMBER TO MONTH NAME\n*\n*                 INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)\n*\n*                 OUTPUT - MONTH AND ALPHA\n         SPACE\nTOMON    L     R15,MMB\n         MH    R15,=H'9'           MULT BY 9\n         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY\n         MVC   MONTH,0(R15)        SAVE PROSE MONTH\n         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH\n         MVC   ALPHA(2),DDC\n         MVC   ALPHA+5(2),YYC\n         MVI   ALPHA+7,C' '\n         BR    R9\n         SPACE\n*              BUILD PROSE DATE\n*\n*                 INPUT  - MONTH, DDC, YYYYC\n         SPACE\nTOPROSE  TM    3(R5),OUT016\n         BZR   R9\n         MVI   PROSE,C' '\n         MVC   PROSE+1(L'PROSE-1),PROSE\n         MVC   PROSE(9),MONTH\n         LA    R1,PROSE+9\nPROSE01  CLI   0(R1),C' '          BLANK?\n         BNE   PROSE02             NO - FOUND LAST LETTER\n         BCT   R1,PROSE01          BACK UP AND BRANCH\nPROSE02  MVC   2(2,R1),DDC\n         CLI   2(R1),C'0'          LEADING ZERO?\n         BNE   PROSE03             NO - BRANCH\n         MVC   2(1,R1),3(R1)       YES - SHIFT\n         MVI   3(R1),C' '\n         BCTR  R1,0\nPROSE03  EQU   *\n*        MVI   4(R1),C','          COMMA AFTER DAY\n*        LA    R1,1(,R1)           ADD 1 FOR COMMA\n         MVC   5(4,R1),YYYYC\n         CLC   5(2,R1),=C'00'\n         BNE   *+10\n         MVC   5(2,R1),=C'19'\n         BR    R9\n         SPACE\n*              INPUT IS YYYY/MM/DD BINARY\n         SPACE\nINP02    L     R1,INPUT\n         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF\n         LM    R14,R15,DOUBLE\n         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF\n         CVB   R1,DOUBLE\n         ST    R1,DDB\n         OI    DOUBLE+7,X'0F'\n         UNPK  DDC,DOUBLE+6(2)\n*\n         STM   R14,R15,DOUBLE\n         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F\n         L     R1,DOUBLE+4\n         SRL   R1,8\n         ST    R1,DOUBLE+4\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         CH    R1,=H'12'\n         BNH   *+8\n         LA    R1,13               SET ALL BAD MONTHS TO 13\n         ST    R1,MMB\n         UNPK  MMC,DOUBLE+6(2)\n*\n         SRDL  R14,4               GET YYYYMMDD\n         SLR   R14,R14             GET 00000000 IN R14\n         SRL   R15,12              GET 000YYYYM IN R15\n         STM   R14,R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n         CH    R1,=H'99'\n         BH    *+8\n         AH    R1,=H'1900'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)\n         MVC   YYC,YYYYC+2\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n*\n         BAL   R9,TOSB\n         BAL   R9,TOJUL\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\n*              CONVERT M/D/Y TO JULIAN\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - DDDB, DDDC, JB\n         SPACE\nTOJUL    MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   JUL365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   JUL366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   JUL365              NO - NOT A LEAP YEAR\nJUL366   MVI   DPM+3,29             CHANGE FEB TO 29 DAYS\nJUL365   EQU   *\n         L     R15,DDB              GET DAYS IN CURRENT MONTH\n         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY\n         L     R14,MMB              GET CURRENT MONTH\n         BCTR  R14,0                GET NO. OF COMPLETED MONTHS\n         LA    R1,DPM\n         LTR   R14,R14              JANUARY?\n         BNP   JULEND               YES - BRANCH\n         B     *+8\nJULOOP   LA    R1,2(,R1)            POINT TO NEXT MONTH\n         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL\n         BCT   R14,JULOOP\nJULEND   CH    R0,0(,R1)            LAST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,2         YES\n         CH    R0,=H'1'             FIRST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,1         YES\n         ST    R15,DDDB             SAVE DDD\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'       SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR\n         MVC   JC(2),YYC\n         PACK  DOUBLE,JC\n         CVB   R1,DOUBLE\n         ST    R1,JB\n         BR    R9\n         SPACE\n*\n*\n*\n         SPACE\nTOSB     MVC   WORK(4),YYYYC\n         MVC   WORK+4(2),MMC\n         MVC   WORK+6(2),DDC\n         PACK  DOUBLE,WORK(8)\n         CVB   R1,DOUBLE\n         ST    R1,SB\n         BR    R9\n         SPACE\n*              GET DAY OF WEEK\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - WEEKB, WEEKC\n*\n*              N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2\n*\n*                 WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)\n*\n*                 N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY\n*\nTOWEEK   TM    3(R5),OUT064+OUT128\n         BZR   R9\n         L     R1,DDB              SET N = D\n         L     R15,CENTB\n         L     R14,MMB\n         CH    R14,=H'2'           JAN OR FEB?\n         BH    WEEKMMOK\n         BE    WEEKFEB\n         LA    R14,13              SET M=13\n         B     WEEKYMIN\nWEEKFEB  LA    R14,14              SET M=14\nWEEKYMIN BCTR  R15,0               SET Y = Y-1\nWEEKMMOK LR    R0,R14              COPY M\n         ALR   R0,R0               GET 2M\n         ALR   R1,R0               SET N = N + 2M\n         LR    R0,R15              SAVE REDEFINED Y\n         SPACE\n         LA    R14,1(,R14)         GET M+1\n         MH    R14,=H'3'           GET 3(M+1)\n         SRDL  R14,32              SHIFT INTO R15, ZERO R14\n         D     R14,=F'5'           GET 3(M+1)/5 IN R15\n         ALR   R1,R15              SET N = N + 3(M+1)/5\n         SPACE\n         LR    R15,R0              GET Y\n         ALR   R1,R15              SET N = N + Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'4'           GET Y/4\n         ALR   R1,R15              SET N = N + Y/4\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'100'         GET Y/100\n         SLR   R1,R15              SET N = N - Y/100\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'400'         GET Y/400\n         ALR   R1,R15              SET N = N + Y/400\n         LA    R15,2               GET 2\n         ALR   R1,R15              SET N = N + 2\n         SLR   R0,R0               ZERO R0\n         D     R0,=F'7'            SET N = N/7\n         ST    R0,WEEKB            SAVE REMAINDER\n         LR    R1,R0\n         MH    R1,=H'9'\n         LA    R14,WEEKDAYS(R1)    POINT TO NAME\n         MVC   WEEKC(9),0(R14)     MOVE NAME\n         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS\n         BR    R9\n         SPACE\n*\n*              CONVERT TIMEB TO TIMEC\n*\n*                 DIVIDE BY 10,10,10,6,10,6,10,6\n*\nTOTIME   TM    2(R5),OUT512\n         BNOR  R9\n         L     R15,TIMEB\n         LA    R6,10               INITIAL DIVISOR\n         LA    R7,12               SET DIVISOR MASK\n         LA    R8,32               SHIFT COUNT\nDECLOOP  SR    R14,R14\n         DR    R14,R6\n         LR    R0,R14              SAVE REMAINDER\n         SRDL  R0,4                SHIFT INTO R1\n         SH    R8,=H'4'            DECREMENT SHIFT COUNT\n         LTR   R15,R15             QUOTIENT ZERO?\n         BZ    TOTIMX              YES - BRANCH\n         CL    R8,=F'24'           IF COUNT LT 24\n         BNL   DECLOOP             NO - BRANCH\n         XR    R6,R7               10 TO 6 TO 10 ETC\n         B     DECLOOP\nTOTIMX   SRL   R1,0(R8)            SHIFT REMAINING BITS\n         SRL   R1,4                GET 0HHMMSST\n         ST    R1,DOUBLE\n         OI    DOUBLE+3,X'0F'\n         MVC   DOUBLE+6(10),=X'402120204B20204B2020'\n         ED    DOUBLE+6(10),DOUBLE\n         MVC   TIMEC,DOUBLE+8\n         BR    R9\n         SPACE\nOUTPUT   LR    R1,R4\n         TM    3(R5),OUT001\n         BZ    *+14\n         MVC   0(4,R1),JB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT002\n         BZ    *+14\n         MVC   0(4,R1),SB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT004\n         BZ    *+14\n         MVC   0(8,R1),SC\n         LA    R1,8(,R1)\n         TM    3(R5),OUT008\n         BZ    *+14\n         MVC   0(8,R1),ALPHA\n         LA    R1,8(,R1)\n         TM    3(R5),OUT016\n         BZ    *+14\n         MVC   0(L'PROSE,R1),PROSE\n         LA    R1,L'PROSE(,R1)\n         TM    3(R5),OUT032\n         BZ    *+14\n         MVC   0(4,R1),FRSTLAST\n         LA    R1,4(,R1)\n         TM    3(R5),OUT064\n         BZ    *+14\n         MVC   0(4,R1),WEEKB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT128\n         BZ    *+14\n         MVC   0(12,R1),WEEKC\n         LA    R1,12(,R1)\n         TM    2(R5),OUT256\n         BZ    *+14\n         MVC   0(4,R1),TIMEB\n         LA    R1,4(,R1)\n         TM    2(R5),OUT512\n         BZ    *+14\n         MVC   0(8,R1),TIMEC\n         LA    R1,8(,R1)\n         BR    R9\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     13,4(,13)\n         ST    15,16(,13)\n*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nDAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\nALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '\n         DC    CL36'MAY      JUNE     JULY     AUGUST   '\n         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '\n         DC    CL09'UNKNOWN  '\nWEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '\n         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '\nWEEKBLNK EQU   WEEKDAYS+15         3 BLANKS\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nINPUT    DS    CL8\nDOUBLE   DS    D\nWORK     DS    8C\nSC       DS    0CL8\nMMC      DS    CL2\nSLASH1   DS    C\nDDC      DS    CL2\nSLASH2   DS    C\nYYC      DS    CL2\nYYYYC    DS    CL4\nDDB      DS    F\nMMB      DS    F\nYYYYB    DS    F\nCENTB    DS    F\nDDDB     DS    F\nJB       DS    F\nSB       DS    F\nWEEKB    DS    F\nFRSTLAST DS    F\nTIMEB    DS    F\nTIMEC    DS    CL8\nJC       DS    0CL5\n         DS    CL2\nDDDC     DS    CL3\nMONTH    DS    CL9\nALPHA    DS    0CL8\n         DS    CL2\nMON      DS    CL3\n         DS    CL2\n         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA\nWEEKC    DS    CL12\nPROSE    DS    CL20\nDPM      DS    13H\n@DATAL   EQU   *-@DATA\n         SPACE\nINP001   EQU   1\nINP002   EQU   2\nINP003   EQU   3\nOUT001   EQU   1\nOUT002   EQU   2\nOUT004   EQU   4\nOUT008   EQU   8\nOUT016   EQU   16\nOUT032   EQU   32\nOUT064   EQU   64\nOUT128   EQU   128\nOUT256   EQU   1\nOUT512   EQU   2\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./ ADD LIST=ALL,NAME=LASTCLPA\nLASTCLPA MOWSTART\n***********************************************************************\n*                                                                     *\n* THIS PROGRAM IS USED TO DETERMINE THE DATE AND TIME OF THE MOST     *\n* RECENT CLPA. IT CAN BE USED TO VERIFY IF THE OPERATOR REALLY DID    *\n* DO A CLPA IN RESPONSE TO IEA101A AT IPL TIME.                       *\n*                                                                     *\n***********************************************************************\n         USING CVTMAP,R11\n         L     R11,16                   A(CVT)\n         L     R1,0(R1)\n         LH    R2,0(R1)                 TEST FOR PARM\n         LTR   R2,R2                    TEST FOR NOT ZERO\n         BNZ   PARM                     PARM SUPPLIED\n* NO PARM, LOOK UP NAME OF PAGING DATASETS\n         SETMODE 31                     31-BIT ADDRESSING ON\n         L     R2,CVTASMVT              A(ASMVT)\n         L     R5,8(R2)                 A(PAGING ART)\n         L     R3,24(R5)                A(DSN LIST)\n         MVC   PAGEDSN(44),0(R3)      PLPA NAME (ALWAYS FIRST IN LIST)\n         SETMODE 24                     BACK TO 24-BIT ADDRESSES\n         B     OPEN\nPARM     EQU   *\n         BCTR  R2,0                     LESS ONE FOR EXECUTE\n         EX    R2,MVCDSN1               MOVE NAME TO OUR DATA AREA\nOPEN     EQU   *\n         USING SHWOUT,R10\n         USING SHWASSOC,R9\n***********************************************************************\n*  USE SHOWCAT FOR STARTERS TO GET CATALOG ACB AND CI FOR DSET        *\n***********************************************************************\n         LA    R10,AREA                      -> TO RETURN DATA AREA\n         SHOWCAT AREA=AREA,NAME=PAGEDSN      ISSUE MACRO TO GET INFO\n         BAL   R14,SETPTR                    SET -> TO ASSOC\n         MVC   CI(3),SHWACI                  CI OF THE ASSOCIATED ENTRY\n         L     R2,SHWACBP                    GET CATALOG ACB POINTER\n         ST    R2,ACBA                       AND SAVE IT\n         TM    48(R2),X'10'                  IS ACB OPEN?\n         BO    SETPL                         YES, SO OK TO GO ON\n         TPUT  =C'CATALOG NOT OPEN',16       TELL CALLER\n         B     RETURN                        AND EXIT\n         SPACE\n***********************************************************************\n* SET UP CATALOG FIELD PARAMETER LIST                                 *\n***********************************************************************\nSETPL    EQU   *\n         USING CTGFL,R9\n         LA    R9,FLD1\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM1                     A(FIELDNAME)\n         MVC   0(08,R2),=C'ENTNAME '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD2\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM2                     A(FIELDNAME)\n         MVC   0(08,R2),=C'DEVTYP  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD3\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM3                     A(FIELDNAME)\n         MVC   0(08,R2),=C'VOLSER  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         DROP  R9\n         SPACE\n***********************************************************************\n* SET UP CATALOG PARAMETER LIST                                       *\n***********************************************************************\n         USING CTGPL,R1\n         LA    R1,CATPL            -> CATALOG PARAMETER LIST\n         OI    CTGOPTN1,CTGBYPSS\n         NI    CTGOPTN1,255-(CTGNAME+CTGCNAME)   CI AND ACB PROVIDED\n         XC    CTGOPTN2(1),CTGOPTN2              CLEAR\n         OI    CTGOPTN3,CTGLOC+CTGNUM+CTGAM0\n         LA    R2,CI               ADDRESS OF CONTROL INTERVAL\n         ST    R2,CTGENT           SAVE IT\n         LA    R2,ACBA             A(CATALOG ACB)\n         ST    R2,CTGCAT           SAVE IT IN PARM LIST\n         LA    R2,AREA             -> WORK AREA\n         ST    R2,CTGWKA           SAVE IT IN PARM LIST\n         MVI   CTGTYPE,C'D'        INDICATE 'DATA' REQD\n         MVI   CTGNOFLD,X'03'      NUMBER OF FPLS\n         LA    R2,FLD1             POINT TO CTGFIELD\n         ST    R2,CTGFIELD         SAVE IT IN PARM LIST\n         LA    R2,FLD2             POINT TO CTGFIELD\n         ST    R2,CTGFL2           SAVE IT IN PARM LIST\n         LA    R2,FLD3             POINT TO CTGFIELD\n         ST    R2,CTGFL3           SAVE IT IN PARM LIST\n         SPACE\n         SVC   26                  ISSUE CATALOG SVC\n         LTR   R15,R15             HOW DID WE DO?\n         EJECT\n         MVC   S99TUKY2+6(44),AREA+4    MOVE PAGEDSN INTO ALLOC LIST\n         MVC   S99TUKY4+6(6),AREA+4+44+4  MOVE VOLSER INTO ALLOC LIST\n         LA    R4,DTYP            -> TO DEVICE TYPE TABLE\n         LA    R1,AREA+4+44       -> TO DEVICE TYPE\nTYPLP    EQU   *\n         CLC   0(4,R1),0(R4)      FIND MATCHING TYPE IN TABLE\n         BE    GOTTYP             GOT IT\n         LA    R4,8(R4)           -> NEXT ENTRY IN TABLE\n         B     TYPLP              GO AND TEST IT\nGOTTYP   EQU   *\n         MVC   S99TUKY5+6(4),4(R4)  INDICATE UNIT(XXXX)\n         MVI   S99VERB,X'01'      INDICATE ALLOC DSNAME(XXXXXXXX)\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               ALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         OPEN  PLPA               -> OPEN PLPA PAGE DATASET\n         GET   PLPA               GET THE FIRST RECORD\n         MVC   TSTAMP(8),32(R1)   MOVE DATA TO OUR DATA AREA\n         CLOSE PLPA               CLOSE DATASET\n         MVI   S99VERB,X'02'      INDICATE FREE DDNAME(XXXXXXXX)\n         LA    R1,S99TUPLF        -> TO FREE TEXT UNITS\n         ST    R1,S99TXTPP        AND SAVE IN PARM LIST\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               UNALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         MVC   TZONE(4),CVTTZ     MOVE TIME ZONE OFFSET INTO OUR LIST\n         LA    R1,ARGS            -> TO ARGS FOR TODCN\n         L     R15,=V(TODCN)      ADDRESS OF TIMESTAMP CONVERTER\n         BALR  R14,R15            AND GO THERE\n         MVC   TRET(2),=C'00'\n         PACK  DOUBLE+4(4),TRET(7)\n         LA    R1,PTRS\n         L     R15,=V(JULSUB)\n         BALR  R14,R15\n         LA    R15,MSGDATA\n         MVC   MSGDATA(9),DAYDATE+20 DAY OF WEEK\n         LA    R15,MSGDATA+9\nBACK1    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK1\n         LA    R15,2(,R15)\n         MVC   0(20,R15),DAYDATE   MONTH DAY YEAR\n         LA    R15,20(,R15)\nBACK2    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK2\n         LA    R15,2(,R15)\n         MVI   0(R15),C'('\n         MVC   1(2,R15),TRET+2     YY\n         MVI   3(R15),C'.'\n         MVC   4(3,R15),TRET+4     DDD\n         MVI   7(R15),C')'\n         LA    R15,9(,R15)\n         MVC   0(2,R15),=C'AT'\n         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO\n         MVC   0(8,R15),TRET+7     MOVE TIME IN\n         MVI   2(R15),C':'         MOVE IN A COLON\n         MVI   5(R15),C':'         MOVE IN A COLON\n         TPUT  MSG,LMSG            TELL CALLER\nRETURN   EQU   *\n         MOREND\nSETPTR   DS    0H\n         LA    R9,SHWASS           -> ASSOC PTRS\n         CLI   SHWTYPE,C'D'        DATA TYPE?\n         BER   R14                 YES, RETURN\n         CLI   SHWTYPE,C'I'        INDEX TYPE?\n         BER   R14                 RETURN\n         LA    R9,SHWASS0          -> TO ASSOC PTRS\n         BR    R14                 RETURN\n         EJECT\nMSG      DC    C'LAST CLPA WAS ON '\nMSGDATA  DC    CL60' '\nLMSG     EQU   *-MSG\nARGS     DC    A(TZONE)\n         DC    A(TSTAMP)\n         DC    X'80',AL3(TRET)\nTZONE    DC    F'0'\nTSTAMP   DC    XL8'FFFFFFFFFFFFFFFF'\nTRET     DC    CL24' '             RETURNED IS YYYYDDDHH.MM.SS.MMMMMM\nDTYP     EQU   *\n         DC    X'3010200E',C'3380'\n         DC    X'3010200C',C'3375'\n         DC    X'3010200B',C'3350'\n         DC    X'30102009',C'3330'\n         DC    X'3010200D',C'3330'   3330-1\n         DC    X'3010200F',C'????'\nPLPA     DCB   DDNAME=PLPA,DSORG=PS,RECFM=U,BLKSIZE=80,MACRF=GL\nS99RBPTR DC    X'80',AL3(S99RB)       SVC 99 REQUEST BLOCK PTR\nS99RB    DS    0F\nS99RBLN  DC    AL1(20)                LENGTH=20 BYTES\nS99VERB  DC    X'01'                  VERB CODE=01 (DSNAME ALLOC)\nS99FLAG1 DC    X'1000'                DONT USE EXISTING ALLOC\nS99ERROR DC    AL2(0)                 ERROR CODE\nS99INFO  DC    AL2(0)                 INFO  CODE\nS99TXTPP DC    A(S99TUPLA)            POINTER TO TEXT UNIT POINTERS\nS99RSVD1 DC    A(0)                   RESERVED\nS99FLAG2 DC    A(0)                   FLAGS 2\nS99TUPLA DC    A(S99TUKY1)            TEXT UNIT POINTERS\n         DC    A(S99TUKY2)\n         DC    A(S99TUKY3)\n         DC    A(S99TUKY4)\n         DC    X'80',AL3(S99TUKY5)    LAST PARM\nS99TUPLF DC    X'80',AL3(S99TUKY1)    LAST PARM\nS99TUNIT DS    0F\nS99TUKY1 DC    X'0001',X'0001',X'0004',C'PLPA'           DDN=PLPA\nS99TUKY2 DC    X'0002',X'0001',X'002C',CL44'*    '       DSNAME\nS99TUKY3 DC    X'0004',X'0001',X'0001',X'08'             SHR\nS99TUKY4 DC    X'0010',X'0001',X'0006',CL6'VOLSER'       VOLSER\nS99TUKY5 DC    X'0015',X'0001',X'0004',CL4'3380'         DEVTYP\n         DS    0D\nS99LENG  EQU   *-S99RBPTR                 LENGTH\n* WORK AREAS FOR JULSUB ROUTINE FOR DAY DATE CONVERSION\nDOUBLE   DS    D\nWORK     DS    32D\nDAYDATE  DC    CL48' '\nINPARM   DC    F'3'\nOUTPARM  DC    AL4(16+128)\nPTRS     DC    AL4(DOUBLE+4)\n         DC    AL4(INPARM)\n         DC    AL4(DAYDATE)\n         DC    AL4(OUTPARM)\n         DC    X'80',AL3(WORK)\n* WORK AREAS ETC FOR DSN LOOKUP\nMVCDSN1  MVC   PAGEDSN(*-*),2(R1)       EXECUTED MOVE\nPAGEDSN  DC    CL44' '\nACBA     DC    F'0'\nCI       DC    CL3' '\nFLDNM1   DC    CL8' '\nFLDNM2   DC    CL8' '\nFLDNM3   DC    CL8' '\nAREA     DC    H'512'               WORK AREA FOR\n         DC    510C' '              SHOWCAT AND SUBSEQUENTLY\n         DC    2C' '                USED BY OTHER PARTS OF PGM\n         SPACE\n         DS    0F\nCATPL    DC    (LCTGPL)X'00'\nCTGFL2   DC    F'0'\nCTGFL3   DC    F'0'\nFLD1     DC    (LCTGFL)X'00'\nFLD2     DC    (LCTGFL)X'00'\nFLD3     DC    (LCTGFL)X'00'\n         EJECT\n         IEZCTGPL\n         SPACE 5\n         IEZCTGFL\n         SPACE 5\n         IGGSHWPL\n         SPACE 5\n         CVT   DSECT=YES\n         END\n./ ADD LIST=ALL,NAME=LNKLST\nLNKLST   MOWSTART\n***********************************************************************\n* PROGRAM LISTS NAMES OF LINKLIST LIBRARIES                           *\n***********************************************************************\n         USING CVT,R2\n         L     R2,16                   A(CVT)\n         L     R3,CVTLLTA              A(LINKLIB LIST)\n         L     R9,4(R3)                NUMBER OF ENTRIES IN LIST\n         LA    R3,8(R3)                PAST FUNNY HEADING GARBAGE\n         SR    R4,R4                   CLEAR IT OUT\nNEXTNAME EQU   *\n         IC    R4,0(R3)                GET LENGTH OF NAME\n         LA    R3,1(R3)                POINT TO START OF NAME\n         TPUT  (R3),(R4)               DISPLAY NAME OF LIBRARY\n         LA    R3,44(R3)               POINT TO NEXT NAME\n         BCT   R9,NEXTNAME             GET NEXT NAME\nFIN      EQU   *\n         MOREND\n         CVT   DSECT=YES\n         END\n./ ADD LIST=ALL,NAME=RACFDS\nRACFDS   MOWSTART\nMOWWORK  DSECT\nMSG1     DC    CL80' '\nRACFDS   CSECT\n***********************************************************************\n* PROGRAM LISTS INFORMATION FROM THE RACF CVT                         *\n***********************************************************************\n         USING CVT,R2\n         L     R2,16                      POINT TO CVT\n         USING RCVT,R3\n         L     R3,CVTRAC                  POINT TO RACF CVT\n         LTR   R3,R3                      CHECK IT\n         BZ    FIN                        NOT SET\nPUTNAME  EQU   *\n         TPUT  RCVTDSN,L'RCVTDSN          DISPLAY RACF DATASET NAME\n         MVI   MSG1,X'40'                 A BLANK\n         MVC   MSG1+1(79),MSG1            BLANK IT OUT\n         LA    R4,MSG1                    POINT TO MESSAGE AREA\n         TM    RCVTSTAT,RCVTRNA           IS IT ACTIVE\n         BZ    T1\n         MVC   0(12,R4),=C'NOT ACTIVE, '  MESSAGE TO SAY ITS NOT ACTIVE\n         LA    R4,12(R4)                  NEXT MESSAGE SLOT\nT1       EQU   *\n         TM    RCVTSTAT,RCVTNLS           BYPASS STATS\n         BZ    T2\n         MVC   0(14,R4),=C'BYPASS STATS, '\n         LA    R4,14(R4)\nT2       EQU   *\n         BCTR  R4,0\n         MVI   0(R4),X'40'\n         TPUT  MSG1,L'MSG1\nFIN      EQU   *\n         MOREND\n         ICHPRCVT\n         CVT   DSECT=YES\n         END\n./ ADD LIST=ALL,NAME=SMFDS\nSMFDS    MOWSTART\n**********************************************************************\n* PROGRAM EMULATES THE OPERATOR D SMF COMMAND FOR TSO USERS.         *\n**********************************************************************\nSMFIDISP L     R4,16                CVT\n         L     R4,196(0,R4)         SMCA\n         TM    1(R4),X'80'          SMF RECORDING REQUESTED\n         BO    SMFIN                YES, SKIP MESSAGE\n         TPUT  SMFOFF,80            TELL USE SMF IS INACTIVE\n         B     FIN                  AND QUIT\nSMFIN    EQU   *\n         L     R5,248(R4)           A(END OF RDS). RDS IS DESCRIBED IN\n         L     R4,244(R4)           RDS            FICHE FOR IEECB916.\n         TPUT  SMFTITLE,80\nMORSMFDS EQU   *\n         MVC   SMFANS(10),16(R4)    SMF DSN ID\n         MVC   SMFANS+12(6),26(R4)  SMF VOLSER\n         MVC   SMFANS+19(9),=C'ALTERNATE'\n         TM    12(R4),X'04'         DS ACTIVE?\n         BO    *+10                 NO\n         MVC   SMFANS+19(9),=C'ACTIVE   '\n         TM    12(R4),X'08'         DUMP REQD?\n         BZ    *+10\n         MVC   SMFANS+19(9),=C'DUMP REQD'\n         TM    13(R5),X'60'         I/O ERROR\n         BZ    *+10                 NO\n         MVC   SMFANS+19(9),=C'I/O ERROR'\n         SR    R14,R14\n         L     R15,44(0,R4)         SMF DS NEXT BLOCK\n         BCTR  R15,0\n         CVD   R15,DOUBLEB\n         M     R14,=F'100'\n         L     R1,40(0,R4)          SMF DS CAPACITY\n         CVD   R1,DOUBLEA\n         DR    R14,R1               PERCENT FULL\n         CVD   R15,DOUBLEC\n         MVC   SMFANSOA(10),=X'40206B2020206B202120'\n         ED    SMFANSOA(10),DOUBLEA+4\n         MVC   SMFANSOB(10),=X'40206B2020206B202120'\n         ED    SMFANSOB(10),DOUBLEB+4\n         MVC   SMFANSOC(4),=X'40202120'\n         ED    SMFANSOC(4),DOUBLEC+6\n         TPUT  SMFANS,80\n         L     R4,4(R4)             NEXT RDS ON CHAIN\n         CR    R5,R4                END OF CHAIN YET\n         BNE   MORSMFDS\nFIN      EQU   *\n         MOREND\nSMFOFF   DC    CL80'SMF RECORDING INACTIVE'\nSMFTITLE DC    CL80'SMF DATASET VOLSER --STATE-- BLKS ALLOC  BLKS USED *\n               % FULL'\nSMFANS   DS    0CL80' '\n         DC    CL20' SYS1.MAN?  VOLSER  '\n         DC    CL09'ACTIVE'\nSMFANSOA DC    CL11' X,XXX,XXX '       BLKS ALLOCATED'\nSMFANSOB DC    CL11' X,XXX,XXX '       BLKS USED\nSMFANSOC DC    CL05' XXX '             % FULL\n         DC    CL24' '\nDOUBLEA  DC    D'0'\nDOUBLEB  DC    D'0'\nDOUBLEC  DC    D'0'\n         END\n./ ADD LIST=ALL,NAME=SVCTAB\n         MACRO\n&NAME    IHASVC\nSVC      DSECT\nSVCEP    DC    F'0'           SVC ENTRY POINT ADDRERSS\nSVCAMODE EQU   X'80'          SVC AMODE INDICATOR\nSVCATTR1 DC    0XL2'00'       ATTRIBUTES\nSVCTP    DC    XL1'00'        TYPE FIELD\nSVCTP1   EQU   X'00'          TYPE 1 SVC\nSVCTP2   EQU   X'80'          TYPE 2 SVC\nSVCTP34  EQU   X'C0'          TYPE 3 OR 4 SVC\nSVCTP6   EQU   X'20'          TYPE 6 SVC\nSVCAPF   EQU   X'08'          APF AUTHORIZED 1-AUTHORIZED\nSVCESR   EQU   X'04'          SVC IS PART OF THE ESR\nSVCNP    EQU   X'02'          NON-PREEMPTIVE SVC\nSVCASF   EQU   X'01'          SVC CAN BE ASSISTED\nSVCRESV1 DC    XL1'00'        RESERVED BYTE\nSVCLOCKS DC    XL2'00'        LOCK ATTRIBUTES\nSVCLL    EQU   X'80'          LOCAL LOCK NEEDED\nSVCCMS   EQU   X'40'          CMS LOCK NEEDED\nSVCOPT   EQU   X'20'          OPT LOCK NEEDED\nSVCALLOC EQU   X'10'          SALLOC LOCK NEEDED\nSVCDISP  EQU   X'08'          DISPATCHER LOCK NEEDED\n*\nSVCESRAD EQU   SVCLOCKS+1\nSVCLEN   EQU   *-SVC\n         MEND\nSVCTAB   MOWSTART\nSVCTAB   AMODE  31\nSVCTAB   RMODE  ANY\n***********************************************************************\n* THIS PROGRAM LOCATES THE SVC TABLE AND PRINTS OUT THE ATTRIBUTES    *\n* OF THE SVCS.                                                        *\n***********************************************************************\n         USING CVT,R11            CVT\n         L     R11,16             CVT ADDR\n         L     R11,CVTABEND       -> TO SECONDARY CVT\n         DROP  R11\n         USING SCVTSECT,R11       SECONDARY CVT\n         L     R11,SCVTSVCT       -> TO SVC TABLE (256 ENTRIES)\n         DROP  R11\n         USING SVC,R11            SVC TABLE\n         USING CPPL,R10\n         LR    R10,R1\n         USING IOPL,R9\n         LA    R9,IOPLADS\n         L     R3,CPPLUPT\n         L     R4,CPPLECT\n         SR    R10,R10            LOOP COUNTER FOR 256 SVCS\n         LA    R8,SVCOP           -> TO SVC NAME TABLE\n*        TPUT  HEAD,L'HEAD\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\nNEXTENT  EQU   *                  FORMAT SVC TABLE DATA\n         MVI   HEAD,X'40'         A BLANK\n         MVC   HEAD+1(79),HEAD    AND 79 MORE\n         CVD   R10,DOUBLE         MAKE SVC # DECIMAL\n         MVC   HEAD(4),=X'40202120' MOVE SVC # INTO MESSAGE\n         ED    HEAD(4),DOUBLE+6   EDIT NUMBER INTO IT\n         ST    R10,FULL           SAVE SVC NUMBER\n         UNPK  OUT(9),FULL(5)     UNPACK\n         MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n         TR    OUT(8),=C'0123456789ABCDEF'  CONVERT TO CHARACTERS\n         MVC   HEAD+6(4),=C'(  )' SPACE FOR SVC # IN HEX\n         MVC   HEAD+7(2),OUT+6    MOVE IN HEX SVC NUMBER\n         UNPK  OUT(9),SVCEP(5)    UNPACK SVC ADDRESS\n         MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n         TR    OUT(8),=C'0123456789ABCDEF' CONVERT TO CHARACTERS\n         MVC   HEAD+12(8),OUT     MOVE IN CONVERTED ADDRESS\n         MVI   HEAD+12,X'40'      BLANK OUT FIRST BYTE OF ADDRESS\n         CLI   HEAD+13,C'0'       TEST FOR A ZERO\n         BNE   *+8                SKIP ROUND MOVE\n         MVI   HEAD+13,X'40'      MAKE IT A BLANK\n         MVI   HEAD+40,C'6'       IT MUST BE A TYPE 6\n         TM    SVCTP,SVCTP6       IS IT A TYPE 6?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C'3/4' ASSUME TYPE 3 OR 4\n         TM    SVCTP,SVCTP34      IS IT A TYPE 3 OR 4?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C' 2 ' ASSUME ITS A TYPE 2\n         TM    SVCTP,SVCTP2       IS IT A TYPE 2?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVI   HEAD+40,C'1'       ASSUME ITS A TYPE 1\nGETATTR  EQU   *\n         MVI   HEAD+44,X'40'      ASSUME NOT AUTHORIZED\n         TM    SVCTP,SVCAPF       TEST FOR AUTHORIZED\n         BZ    GETAMODE           AND FOUND IT ISN'T\n         MVI   HEAD+44,C'Y'       SET IT TO AUTHORIZED\nGETAMODE EQU   *\n         TM    SVCEP,SVCAMODE     TEST FOR AMODE BIT SET\n         BZ    GETATTR1           NOT SET\n         MVC   HEAD+48(2),=C'31'  INDICATE AMODE IS 31\nGETATTR1 EQU   *\n         MVI   HEAD+52,X'40'      ASSUME SVC NOT PART OF THE ESR\n         TM    SVCTP,SVCESR       TEST FOR PART OF ESR\n         BZ    GETATTR2           AND FOUND IT ISN'T\n         MVI   HEAD+52,C'Y'       SAY ITS PART OF ESR\nGETATTR2 EQU   *\n         MVI   HEAD+56,X'40'      ASSUME ITS NON-PREMPTIVE\n         TM    SVCTP,SVCNP        AND TEST TO SEE\n         BZ    GETATTR3           AND FOUND IT ISN'T\n         MVI   HEAD+56,C'Y'       SAY IT IS\nGETATTR3 EQU   *\n         MVI   HEAD+60,X'40'      ASSUME IT CAN'T BE ASSISTED\n         TM    SVCTP,SVCASF       AND TEST TO SEE\n         BZ    LOCK0              AND FOUND IT ISN'T\n         MVI   HEAD+60,C'Y'       SAY IT IS\nLOCK0    EQU   *\n         LA    R2,HEAD+63         -> TO LOCK FIELD IN MSG TEXT\n         TM    SVCLOCKS,SVCLL     LOCAL LOCK?\n         BZ    LOCK1              NOT LOCAL LOCK\n         MVC   0(6,R2),=C'LOCAL,' MOVE IN LOCAL\n         LA    R2,6(R2)           BUMP POINTER\nLOCK1    EQU   *\n         TM    SVCLOCKS,SVCCMS    CMS LOCK?\n         BZ    LOCK2              NOT CMS LOCK\n         MVC   0(4,R2),=C'CMS,'   MOVE IN CMS\n         LA    R2,4(R2)           BUMP POINTER\nLOCK2    EQU   *\n         TM    SVCLOCKS,SVCOPT    OPT LOCK?\n         BZ    LOCK3              NOT OPT LOCK\n         MVC   0(4,R2),=C'OPT,'   MOVE IN OPT\n         LA    R2,4(R2)           BUMP POINTER\nLOCK3    EQU   *\n         TM    SVCLOCKS,SVCALLOC  ALLOC LOCK?\n         BZ    LOCK4              NOT ALLOC LOCK\n         MVC   0(6,R2),=C'ALLOC,' MOVE IN ALLOC\n         LA    R2,6(R2)           BUMP POINTER\nLOCK4    EQU   *\n         TM    SVCLOCKS,SVCDISP   DISP LOCK?\n         BZ    DONELOCK           NOT DISP LOCK\n         MVC   0(5,R2),=C'DISP,'  MOVE IN DISP\n         LA    R2,5(R2)           BUMP POINTER\nDONELOCK EQU   *\n         BCTR  R2,0               BACK POINTER UP ONE BYTE AND\n         MVI   0(R2),C' '         BLANK TRAILING COMMA\n         CLM   R10,B'0001',0(R8)  IS THIS ENTRY IN TABLE?\n         BNE   PUTMSG             NO, SO JUST PUT MESSAGE W/OUT NAME\n         MVC   HEAD+22(14),1(R8)  MOVE SVC NAME INTO MESSAGE\n         LA    R8,SVCNAML(R8)     BUMP -> TO NEXT SVC NAME ENTRY\nPUTMSG   EQU   *\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\n*        TPUT  HEAD,L'HEAD\n         LA    R11,SVCLEN(R11)    -> TO NEXT SVC TABLE ENTRY\n         LA    R10,1(R10)         ADD 1 TO COUNT OF SVCS\n         CH    R10,=H'256'        AT END YET?\n         BL    NEXTENT            NO, MORE SVCS TO TELL ABOUT YET\n         MOREND\nPARM     PUTLINE MF=L\nECB1     DC    F'0'\nIOPLADS  DC    4F'0'\nFULL     DC    F'0'\nDOUBLE   DC    D'0'\n         DC    F'0'               MUST PRECEED OUT\nOUT      DS    2F                 WORK AREA FOR UNPK\n         DS    CL1                PAD SPACE FOR UNPK\nMSG1     DC    H'84'\n         DC    H'0'\nHEAD     DC    CL80'    SVC       ADDR    ---- NAME ----  TYPE AUT AMD *\n               ESR PRE ASS LOCKS'\n*                   0123456789 123456789 123456789 123456789 123456789\n*                     123  (XX)  AAAAAAAA  SVC_NAME         3   Y   31\n*              123456789 123456789\n*               N   Y   Y     ....\n*\n* THE SVCTABLE WAS \"BORROWED\" DIRECTLY FROM THE DISASSEMBLER.\n*\n         COPY  DISASM3B\n         PRINT NOGEN\n         CVT   DSECT=YES,PREFIX=NO\n         IKJCPPL\n         IKJPTPB\n         IKJIOPL\n         IHASCVT\n         IHASVC\n         END\n./ ADD LIST=ALL,NAME=TODCN\nTODCN    MOWSTART ,           PL/I DOESNT LIKE 8 CHAR NAMES\n*TODCNVRT MOWSTART\n***********************************************************************\n* FUNCTION: CONVERT A 64 BIT TIMESTAMP OBTAINED BY STCK INTO A\n*           CHARACTER STRING GIVING YEAR, JULIAN DATE AND TIME OF DAY\n*\n* REVERSE ENGINEERED FROM AMDPRDMP AMDPRSEG\n*         BY ALAN C FIELD, OZARK AIR LINES, ST. LOUIS, MO.\n*\n* THE ENTRY CONDITIONS TO TODCNVRT ARE:\n*   R1 POINTS TO AN ARGUMENT LIST WITH 3 ADCONS\n*       THE FIRST ARGUMENT IS A CVTTZ VALUE FOR GMT ADJUSTMENT\n*       THE SECOND ARGUMENT IS AN 8 BYTE TOD CLOCK VALUE FROM STCK\n*       THE THIRD ARGUMENT IS A 24 CHARACTER RETURN AREA\n*           VALUE RETURNED IS YYYYDDDHH.MM.SS.MMMMMM\n* THE PROGRAM MASK IS DISABLED FOR FIXED POINT OVERFLOW\n***********************************************************************\n         LA    R2,1            A F'1' MEANING 'RETURN FULL DATE'\n*        LA    R2,2            TO GET TIME IN SSSSS.MMMMMM FORM\n         SR    R0,R0                       CLEAR REG\n         SPM   R0                          DISABLE FIXED POINT OVFLW\n         L     R7,4(,R1)                   POINT TO TIMESTAMP\n         MVC   TIMESTMP(8),0(R7)           MOVE IT TO OUR AREA\n*        TM    127(R12),X'20'              REQUIRED TO OFFSET FOR GMT?\n*        BNO   LAB1                        NO\n         L     R7,0(,R1)                   GET CVTTZ, TIME ZONE DIFF\n         ICM   R14,15,0(R7)                PUT IT INTO A REGISTER\n         AL    R14,TIMESTMP                ADD IT TO THE TIMESTAMP\n         ST    R14,TIMESTMP                STORE IT BACK\nLAB1     LM    R4,R5,TIMESTMP              GET TIMESTAMP INTO REGS\n         SRDL  R4,12                       DIVIDE BY 4096\n         D     R4,SIXMILL                  DIVIDE RESULT BY ...\n         LR    R7,R2                       COPY\n         SLA   R7,2                        MULTIPLY BY 4\n         L     R7,ATAB(R7)                 BRANCH TABLE\n         BR    R7                          GO TO RIGHT PLACE\n         SPACE\nRELTVTME L     R7,4(,R1)                   POINT TO TIMESTAMP\n         CLC   0(8,R7),TIME2               COMPARE IT WITH ...\n         BNE   TOD1A\n         L     R7,8(,R1)                   -> TO RETURN AREA\n         MVI   12(R7),C' '                 MOVE IN A BLANK\n         MVC   13(11,R7),12(R7)            AND BLANK LAST HALF\n         MVC   0(12,R7),ZERO1              MOVE IN ....\n         LA    R15,4                       SET RETURN CODE\n         B     FIN                         RETURN\n         SPACE\nTOD1A    LA    R7,WORK2\n         L     R14,MILLION\n         LR    R15,R4                      COPY REGISTER\n         ST    R14,WORK1\n         SLR   R14,R14                     CLEAR REG\n         D     R14,WORK1                   DIVIDE BY ...\n         ST    R15,0(,R7)                  STORE RESULT IN\n         LR    R14,R4                      COPY REGISTER\n         SRDA  R14,32                      DIVIDE\n         D     R14,WORK1\n         LR    R4,R14                      COPY REG\n         L     R2,8(,R1)                   POINT TO RETURN AREA\n         LA    R2,6(,R2)                   AND POINT 6 BYTES IN\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(6,R2),TIMESTMP+4(4)       AND PRINTABLE\n         OI    5(R2),X'F0'                 INCL LAST CHAR\n         L     R7,8(,R1)                   POINT TO RETURN AREA\n         MVI   5(R7),X'4B'                 MOVE IN A PERIOD\n         LR    R14,R5                      COPY REG\n         SRDA  R14,32                      DIVIDE BY ...\n         D     R14,MINSPDAY                MINUTES IN A DAY\n         MH    R14,=H'60'                  MULTIPLY BY 60\n         LA    R15,WORK2                   -> TO ...\n         AL    R14,0(,R15)\n         LR    R4,R14                      COPY REG\n         LR    R2,R7                       COPY REG\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(5,R2),TIMESTMP+5(3)       AND PRINTABLE\n         OI    4(R2),X'F0'                 MAKE IT PRINTABLE\n         SLR   R15,R15                     SET RC\n         B     FIN                         GO BACK\n         SPACE\nFULLDATE L     R7,4(,R1)                   POINT TO INPUT TIMESTAMP\n         CLC   0(8,R7),TIME2               COMPARE WITH ...\n         BNE   TOD2A                       NOT EQUAL, GO TO ...\n         L     R7,8(,R1)                   POINT TO RETURN AREA\n         MVI   22(R7),C' '                 MOVE IN A BLANK\n         MVI   23(R7),C' '                 MOVE IN A BLANK\n         MVC   0(22,R7),ZERO2              MOVE ....\n         LA    R15,4                       SET RC\n         B     FIN                         RETURN\n         SPACE\nTOD2A    LA    R7,WORK2                    POINT TO ...\n         L     R14,MILLION                 LOAD IN A MILLION\n         LR    R15,R4                      COPY REG\n         ST    R14,WORK1                   SAVE IT IN WORK\n         SLR   R14,R14                     CLEAR IT\n         D     R14,WORK1                   DIVIDE BY 10E6\n         ST    R15,0(,R7)                  STORE IT IN WORK\n         LR    R14,R4                      COPY AGAIN\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,WORK1                   DIVIDE BY 10E6\n         LR    R4,R14                      COPY\n         L     R2,8(,R1)                   -> TO 3ND ARG, RETURN AREA\n         LA    R2,16(,R2)                  AND POINT 16 BYTES IN\n         CVD   R4,TIMESTMP                 CONVERT TO DECIMAL\n         UNPK  0(6,R2),TIMESTMP+4(4)       MOVE IN DECIMALS OF SECS\n         OI    5(R2),X'F0'                 LAST DIGIT PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   15(R7),X'4B'                MOVE IN A PERIOD\n         LA    R14,WORK2                   -> WORK\n         L     R4,0(,R14)                  GET DATA PTD TO BY R14\n         LA    R2,13(,R7)                  -> TO SS IN RETURN AREA\n         CVD   R4,TIMESTMP                 CONVERT SECONDS\n         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT IN\n         OI    1(R2),X'F0'                 PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   12(R7),X'4B'                MOVE IN A PERIOD\n         LA    R14,60                      GET A 60\n         LR    R15,R5                      COPY REG\n         ST    R14,WORK1                   SAVE OUR 60\n         SLR   R14,R14                     CLEAR A REG\n         D     R14,WORK1                   DIVIDE BY 60\n         ST    R15,WORK2                   SAVE RESULT\n         LR    R14,R5                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE BY 60\n         LR    R4,R14                      COPY\n         LA    R2,10(,R7)                  -> TO MM IN RETURN AREA\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA\n         OI    1(R2),X'F0'                 MAKE IT PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   9(R7),X'4B'                 MOVE IN A PERIOD\n         L     R5,WORK2                    COPY\n         LA    R14,24                      HOURS IN A DAY\n         LR    R15,R5                      COPY\n         ST    R14,WORK1                   SAVE OUR 24\n         SLR   R14,R14                     CLEAR IT\n         D     R14,WORK1                   DIVIDE BY 24\n         ST    R15,WORK2                   SAVE RESULT\n         LR    R14,R5                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE BY 24\n         LR    R4,R14                      COPY\n         LA    R2,7(,R7)                   -> POINT TO HH IN RESULT\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(2,R2),TIMESTMP+6(2)       AND PRINTABLE\n         OI    1(R2),X'F0'                 ..\n         L     R7,WORK2                    GET OUR VALUE\n         C     R7,FOURYR                   COMPARE WITH DAYS IN 4 YR\n         BNL   A3C\n         L     R7,WORK2                    GET IT AGAIN\n         LA    R14,365                     DAYS IN A YEAR\n         ST    R14,WORK1                   SAVE IT\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      MOVE IT DOWN AGAIN\n         D     R14,WORK1                   DIVIDE BY DAYS IN YR\n         AL    R14,F1                      ADD ONE\n         LR    R3,R14                      COPY\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      MOVE IT DOWN AGAIN\n         D     R14,WORK1                   DIVIDE\n         AL    R15,F1900                   ADD IN 1900\n         LR    R6,R15                      COPY\n         B     AAC\nA3C      L     R7,WORK2                    COPY\n         SL    R7,FOURYR                   SUBTRACT DAYS IN 4 YEARS\n         ST    R7,WORK2                    SAVE IT\n         LA    R14,1461                    DAYS IN 4 YRS, INCL LEAP\n         ST    R14,WORK1                   SAVE IT\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE\n         LR    R5,R15                      COPY\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      SHIFT IT\n         D     R14,WORK1                   DIVIDE\n         LR    R4,R14                      COPY\n         LR    R15,R4                      COPY\n         SLR   R14,R14                     CLEAR\n         D     R14,TWOYEAR                 DAYS IN 2 YEARS\n         LR    R14,R15                     COPY\n         ALR   R14,R4                      ADD\n         LR    R15,R4                      COPY\n         ST    R14,WORK1                   SAVE IT\n         SLR   R14,R14                     CLEAR\n         D     R14,THREEYR                 DAYS IN 3 YEARS\n         LR    R14,R15                     COPY\n         AL    R14,WORK1                   ADD\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,LEAPYEAR                DAYS IN A LEAP YEAR\n         AL    R14,F1                      ADD 1\n         LR    R3,R14                      COPY\n         LR    R6,R5                       COPY\n         SLA   R6,2                        MULTIPLY BY 4\n         AL    R6,F1904                    1904\n         LR    R14,R4                      COPY\n         BCTR  R14,0                       SUBTRACT 1\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,YEAR                    DAYS IN A YEAR\n         ALR   R6,R15                      ADD\nAAC      L     R2,8(,R1)                   -> 3RD ARG\n         LA    R2,4(,R2)                   -> DDD IN RETURN FIELD\n         CVD   R3,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(3,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA\n         OI    2(R2),X'F0'                 MAKE IT PRINTABLE\n         L     R2,8(,R1)                   -> 3RD ARG\n         CVD   R6,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(4,R2),TIMESTMP+5(3)       MOVE IN YYYY\n         OI    3(R2),X'F0'                 MAKE IT PRINTABLE\n         SLR   R15,R15                     SET RC\nFIN      EQU   *\n         SPM   R3                          TURN ON FIXED OVFLW\n         MOREND RC=(15)\n         DS    0D                          ALIGN ON DOUBLEWORD\nTIMESTMP DC    CL8' '\nTIME2    DC    CL8' '\nWORK1    DC    F'0'\nWORK2    DC    F'0'\nF1       DC    F'00001'\nF4       DC    F'00004'\nF5       DC    F'00005'\nF8       DC    F'00008'\nF9       DC    F'00009'\nF12      DC    F'00012'\nYEAR     DC    F'00365'\nLEAPYEAR DC    F'00366'\nTWOYEAR  DC    F'00731'\nTHREEYR  DC    F'01096'\nMINSPDAY DC    F'01440'\nFOURYR   DC    F'01460'      DAYS IN 4 YRS, EXCL LEAP YEAR\nF1900    DC    F'01900'\nF1904    DC    F'01904'\nMILLION  DC    F'1000000'\nSIXMILL  DC    F'60000000'               SIXTY MILLION\nZERO1    DC    C'00000.000000'           SSSSS.MMMMMM (SINCE MIDNIGHT)\nZERO2    DC    C'000000000.00.00.000000' YYYYDDDHH.MM.SS.MMMMMM\nATAB     DC    A(0)\n         DC    A(FULLDATE)\n         DC    A(RELTVTME)\n         END\n./ ADD LIST=ALL,NAME=VSAMNAME\nVSAMNAME MOWSTART\n***********************************************************************\n* THIS PROGRAM IS USED TO LIST THE COMMON NAME AND THE VSAM GENERATED *\n* NAME FOR SYSTEM DATASETS SUCH AS SMF DATASETS, PAGE DATASETS ETC.   *\n* PASS THE COMMON NAME THROUGHT THE PARM.                             *\n* DOC: CATALOG DIAGNOSIS REF.                                         *\n***********************************************************************\n         USING CVTMAP,R11\n         L     R11,16                   A(CVT)\n         L     R1,0(R1)                 A(PARM)\n         LH    R2,0(R1)                 TEST FOR PARM\n         LTR   R2,R2                    TEST FOR NOT ZERO\n         BNZ   PARM                     PARM SUPPLIED\n         TPUT  =C'NO NAME SUPPLIED IN PARM',24\n         B     FIN                      CAN'T CONTINUE WITHOUT NAME\nPARM     EQU   *\n         BCTR  R2,0                     LESS ONE FOR EXECUTE\n         EX    R2,MVCDSN1               MOVE NAME TO OUR DATA AREA\nOPEN     EQU   *\n         USING SHWOUT,R10\n         USING SHWASSOC,R9\n***********************************************************************\n*  USE SHOWCAT FOR STARTERS TO GET CATALOG ACB AND CI FOR DSET        *\n***********************************************************************\n         LA    R10,AREA                      -> TO RETURN DATA AREA\n         SHOWCAT AREA=AREA,NAME=USERDSN      ISSUE MACRO TO GET INFO\n         LTR   R15,R15                       SUCCESSFUL?\n         BZ    GETCINUM                      YES, GO GET CI NUMBERS\n         MVC   MSG(44),USERDSN               MOVE BAD DSN INTO MESSAGE\n         MVC   MSG+46(09),=C'NOT FOUND'      GUESS WHY SHOWCAT FAILED\n         TPUT  MSG,80                        TELL USER\n         B     FIN                           AND QUIT\nGETCINUM EQU   *\n         BAL   R14,SETPTR                    SET -> TO ASSOC\n         MVC   CID(3),SHWACI                 CI OF THE ASSOCIATED ENTRY\n         L     R2,SHWACBP                    GET CATALOG ACB POINTER\n         ST    R2,ACBA                       AND SAVE IT\n         CLC   SHWASS0,=H'2'                 ANY ASSOCIATED PTRS?\n         BNE   CHKOPEN                       NO, SO CHECK IF CAT OPEN\n         LA    R9,4(R9)                      BUMP TO NEXT SET PTRS\n         MVC   CII(3),SHWACI                 SAVE CI OF INDEX COMPONENT\nCHKOPEN  EQU   *\n         TM    48(R2),X'10'                  IS ACB OPEN?\n         BO    SETPL                         YES, SO OK TO GO ON\n         TPUT  =C'CATALOG NOT OPEN',16       TELL CALLER\n         B     FIN                           AND EXIT\n         SPACE\n***********************************************************************\n* SET UP CATALOG FIELD PARAMETER LIST                                 *\n***********************************************************************\nSETPL    EQU   *\n         USING CTGFL,R9\n         LA    R9,FLD1                       POINT TO FIRST FIELD\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM1                     A(FIELDNAME)\n         MVC   0(08,R2),=C'ENTNAME '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD2                       POINT TO SECOND FIELD\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM2                     A(FIELDNAME)\n         MVC   0(08,R2),=C'DEVTYP  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD3                       POINT TO THIRD FIELD\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM3                     A(FIELDNAME)\n         MVC   0(08,R2),=C'VOLSER  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         DROP  R9\n         SPACE\n***********************************************************************\n* SET UP CATALOG PARAMETER LIST                                       *\n***********************************************************************\n         USING CTGPL,R1\n         LA    R1,CATPL            -> CATALOG PARAMETER LIST\n         OI    CTGOPTN1,CTGBYPSS\n         NI    CTGOPTN1,255-(CTGNAME+CTGCNAME)   CI AND ACB PROVIDED\n         XC    CTGOPTN2(1),CTGOPTN2              CLEAR\n         OI    CTGOPTN3,CTGLOC+CTGNUM+CTGAM0\n         LA    R2,CID              ADDRESS OF CONTROL INTERVAL\n         ST    R2,CTGENT           SAVE IT\n         LA    R2,ACBA             A(CATALOG ACB)\n         ST    R2,CTGCAT           SAVE IT IN PARM LIST\n         LA    R2,AREA             -> WORK AREA\n         ST    R2,CTGWKA           SAVE IT IN PARM LIST\n         MVI   CTGTYPE,C'D'        INDICATE 'DATA' REQD\n         MVI   CTGNOFLD,X'03'      NUMBER OF FPLS\n         LA    R2,FLD1             POINT TO CTGFIELD\n         ST    R2,CTGFIELD         SAVE IT IN PARM LIST\n         LA    R2,FLD2             POINT TO CTGFIELD\n         ST    R2,CTGFL2           SAVE IT IN PARM LIST\n         LA    R2,FLD3             POINT TO CTGFIELD\n         ST    R2,CTGFL3           SAVE IT IN PARM LIST\n         SPACE\n         SVC   26                  ISSUE CATALOG SVC\n         LTR   R15,R15             HOW DID WE DO?\n         EJECT\n         MVC   MSG(6),=C'DATA  '   COMPONENT TYPE\n         MVC   MSG+6(44),AREA+4    MOVE VSAM DSN INTO MSG\n         MVC   MSG+52(2),=C'ON'    MAKE MESSAGE READ BETTER\n         MVC   MSG+55(6),AREA+4+44+4  MOVE VOLSER INTO MSG\n         SPACE\n         TPUT  USERDSN,44          TELL OUR NAME\n         TPUT  MSG,80              AND NOW TELL VSAM NAME AND VOLSER\n         SPACE\n         CLC   CII,=C'   '         CII HAS DATA?\n         BE    FIN\n         LA    R1,CATPL            -> CATALOG PARAMETER LIST\n         LA    R2,CII              ADDRESS OF CONTROL INTERVAL\n         ST    R2,CTGENT           SAVE IT\n         MVI   CTGTYPE,C'I'        INDICATE 'INDEX' REQD\n         SVC   26                  ISSUE CATALOG SVC\n         MVC   MSG(6),=C'INDEX '   COMPONENT NAME\n         MVC   MSG+6(44),AREA+4    MOVE VSAM DSN INTO MSG\n         MVC   MSG+52(2),=C'ON'    MAKE IT READ BETTER\n         MVC   MSG+55(6),AREA+4+44+4  MOVE VOLSER INTO MSG\n         TPUT  MSG,80              TELL VSAM NAME\n         SPACE\nFIN      EQU   *\n         MOREND\nSETPTR   DS    0H\n         LA    R9,SHWASS           -> ASSOC PTRS\n         CLI   SHWTYPE,C'D'        DATA TYPE?\n         BER   R14                 YES, RETURN\n         CLI   SHWTYPE,C'I'        INDEX TYPE?\n         BER   R14                 RETURN\n         LA    R9,SHWASS0          -> TO ASSOC PTRS\n         BR    R14                 RETURN\n         EJECT\n* WORK AREAS ETC FOR DSN LOOKUP\nMVCDSN1  MVC   USERDSN(*-*),2(R1)       EXECUTED MOVE\nMSG      DC    CL80' '\nUSERDSN  DC    CL44' '\nACBA     DC    F'0'\nCID      DC    CL3' '               CI FOR DATA COMPONENT\nCII      DC    CL3' '               CI FOR INDEX COMPONENT\nFLDNM1   DC    CL8' '\nFLDNM2   DC    CL8' '\nFLDNM3   DC    CL8' '\nAREA     DC    H'512'               WORK AREA FOR\n         DC    510C' '              SHOWCAT AND SUBSEQUENTLY\n         DC    2C' '                USED BY OTHER PARTS OF PGM\n         SPACE\n         DS    0F\nCATPL    DC    (LCTGPL)X'00'\nCTGFL2   DC    F'0'\nCTGFL3   DC    F'0'\nFLD1     DC    (LCTGFL)X'00'\nFLD2     DC    (LCTGFL)X'00'\nFLD3     DC    (LCTGFL)X'00'\n         EJECT\n         IEZCTGPL\n         SPACE 5\n         IEZCTGFL\n         SPACE 5\n         IGGSHWPL\n         SPACE 5\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLIST": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x12T\\x00(\\x00(\\x00\\x00\\xe4\\xd5\\xd3\\xc4\\xd7\\xc4\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T12:54:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "UNLDPDS"}, "text": "./ ADD NAME=DSYS\nPROC 0\n/* DSYS - DISPLAY VARIOUS DATA ABOUT SYSTEM\nCLRSCRN\nWRITE                 =-=-=-=-=-=-= SYSTEM STATISTICS =-=-=-=-=-=-=\nWRITE\nTIMD\nWRITE\nCPUID\nWRITE\nCALL 'FIELD.TEST.LOAD(LASTCLPA)'\nWRITE\nLASTIPL\nWRITE\nCALL 'FIELD.TEST.LOAD(SMFDS)'\nWRITE\nWRITE RACF IS &SYSRACF, VER/REL/MOD = &SYSLRACF\nIF &SYSHSM  \u00ac= THEN WRITE DFHSM IS AVAILABLE, VER/REL/MOD = &SYSHSM\nELSE                WRITE DFHSM IS NOT AVAILABLE\nIF &SYSTSOE \u00ac= THEN WRITE TSO/E IS AVAILABLE, VER/REL/MOD = &SYSTSOE\nCALL 'FIELD.TEST.LOAD(DSSLVL)'\nWRITE\nWRITE LINKLIST LIBRARIES:\nCALL 'FIELD.TEST.LOAD(LNKLST)'\nWRITE\nWRITE RACF DATASET:\nCALL 'FIELD.TEST.LOAD(RACFDS)'\nWRITE\nSYSDSCAN 00:02\n./ ADD NAME=VSAMNAME\nPROC 0\n/* CPROC(VSAMNAME)\nCALL 'FIELD.TEST.LOAD(VSAMNAME)' 'SYS1.STGINDEX'\nCALL 'FIELD.TEST.LOAD(VSAMNAME)' 'SYS1.MAN1'\nCALL 'FIELD.TEST.LOAD(VSAMNAME)' 'SYS1.MAN2'\nCALL 'FIELD.TEST.LOAD(VSAMNAME)' 'SYS1.MAN3'\nCALL 'FIELD.TEST.LOAD(VSAMNAME)' 'PAGE.WETTERAU.PLPA'\nCALL 'FIELD.TEST.LOAD(VSAMNAME)' 'PAGE.WETTERAU.COMMON'\nCALL 'FIELD.TEST.LOAD(VSAMNAME)' 'PAGE.WETTERAU.LOCAL1'\nCALL 'FIELD.TEST.LOAD(VSAMNAME)' 'PAGE.WETTERAU.LOCAL2'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNTL": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x12T\\x004\\x004\\x00\\x00\\xe4\\xd5\\xd3\\xc4\\xd7\\xc4\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T12:54:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "UNLDPDS"}, "text": "./ ADD NAME=CPCMD\n//CPCMD PROC\n//GO EXEC PGM=CPCMD,PARM='&C.'\n//SYSPRINT DD SYSOUT=*\n// PEND\n// EXEC PGM=CPCMD,C='Q TAPE'\n./ ADD NAME=SVTOC\n//FIELDS JOB (),FIELD,CLASS=S,NOTIFY=FIELD,MSGCLASS=X,MSGLEVEL=(0,0)\n//* JOB(SVTOC) - SORT VTOC LIST BY EXTENT ADDRESSES\n//LISTVT EXEC PGM=IEHLIST,REGION=512K\n//SYSPRINT DD DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(30,15),RLSE),\n// DSN=&&LIST,\n// DCB=(RECFM=FB,LRECL=121,BLKSIZE=12100)\n//DD00 DD UNIT=3380,VOL=SER=MVSCAT,DISP=OLD\n//DD01 DD UNIT=3380,VOL=SER=MVSRES,DISP=OLD\n//DD02 DD UNIT=3380,VOL=SER=MVS002,DISP=OLD\n//DD04 DD UNIT=3380,VOL=SER=MVS004,DISP=OLD\n//DD07 DD UNIT=3380,VOL=SER=MVS007,DISP=OLD\n//DD08 DD UNIT=3380,VOL=SER=MVS008,DISP=OLD\n//DD09 DD UNIT=3380,VOL=SER=MVS009,DISP=OLD\n//DD10 DD UNIT=3380,VOL=SER=MVS010,DISP=OLD\n//DDTS DD UNIT=3380,VOL=SER=MVSTST,DISP=OLD\n//DD11 DD UNIT=3380,VOL=SER=MVS011,DISP=OLD\n//DD12 DD UNIT=3380,VOL=SER=MVS012,DISP=OLD\n//DD13 DD UNIT=3380,VOL=SER=MVS013,DISP=OLD\n//DD14 DD UNIT=3380,VOL=SER=MVS014,DISP=OLD\n//DD15 DD UNIT=3380,VOL=SER=MVS015,DISP=OLD\n//DD16 DD UNIT=3380,VOL=SER=MVS016,DISP=OLD\n//DD17 DD UNIT=3380,VOL=SER=MVS017,DISP=OLD\n//DD18 DD UNIT=3380,VOL=SER=MVS018,DISP=OLD\n//DD19 DD UNIT=3380,VOL=SER=MVS019,DISP=OLD\n//DD20 DD UNIT=3380,VOL=SER=MVS020,DISP=OLD\n//DD21 DD UNIT=3380,VOL=SER=MVS021,DISP=OLD\n//SYSIN DD *\n LISTVTOC FORMAT,VOL=3380=MVS012\n/*\n//*\n//*DEBUG1 EXEC PGM=ICEGENER,REGION=512K     UN-COMMENT FOR DEBUG\n//*SYSPRINT DD DUMMY\n//*SYSUT1 DD DISP=(OLD,PASS),DSN=&&LIST\n//*SYSUT2 DD SYSOUT=*\n//*SYSIN DD DUMMY\n//*\n//SVTOC EXEC PGM=SVTOC,REGION=4096K  ,PARM='/HEX'          <---*\n//STEPLIB DD DISP=SHR,DSN=FIELD.TEST.LOAD\n//        DD DISP=SHR,DSN=FIELD.PLI.LOAD\n//SYSOUT DD SYSOUT=*\n//SORTMSG DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//LIST DD DISP=(OLD,PASS),DSN=&&LIST\n//SORTIN DD DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(10,10)),\n// DSN=&&SORTIN,DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPCMD": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x10R\\x01\\x17\\x01\\x17\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T10:52:00", "lines": 279, "newlines": 279, "modlines": 0, "user": "AFIELD"}, "text": "CPCMD    MOWSTART SP=250\n*********************************************************************\n*                                                                   *\n* PROGRAM TO RUN ON MVS TO ISSUE VM/CP COMMAND.                     *\n* MAY BE RUN AS A TSO COMMAND, EXECUTED AS A PROGRAM, OR RUN AS A   *\n* STARTED TASK.                                                     *\n* LINK WITH AC(1). NAME IS CPCMD WITH ALIAS CP.                     *\n*                                                                   *\n* E.G. (1) // EXEC PGM=CPCMD,PARM='Q CPUID'                         *\n*      (2) CP Q CPUID                                               *\n*      (3) // EXEC PGM=CPCMD                                        *\n*          //SYSIN DD *                                             *\n*          Q CPUID                                                  *\n*          ATT 76A MVSXA 76A                                        *\n*          /*                                                       *\n*                                                                   *\n* IF IN BATCH, AND A SYSIN DD IS PRESENT, THE PARM IS IGNORED AND   *\n* THE COMMANDS ARE READ FROM THE SYSIN FILE.                        *\n*                                                                   *\n*********************************************************************\nMOWWORK  DSECT\nTIOT     DC    F'0'           EXTRACT WORK AREA, KEEP    (1)\nTSO      DC    F'0'            THESE 3 TOGETHER AND      (2)\nASID     DC    F'0'             IN THIS ORDER.           (3)\n*\nACMD     DC    A(0)           THESE FOUR FULL WORDS      (1)\nABUF     DC    A(0)            MUST REMAIN               (2)\nCMDL     DC    F'0'             IN THE SAME RELATIVE     (3)\nRESPBUFL DC    F'0'              POSITIONS.              (4)\nCMDFLG   DC    X'00'          INDIC. COMMAND, PROGRAM OR STARTED TASK\nSYSINFLG EQU   X'80'\nSTCFLG   EQU   X'04'\nBATFLG   EQU   X'02'\nTSOFLG   EQU   X'01'\n         DS    XL7            UNUSED\n         SPACE 2\nCPCMD    CSECT\n         USING CVT,R10\n         USING ASVT,R9\n         USING ASCB,R8\n         LR    R11,R1                   COPY A(PARM)\n         L     R10,16                   A(CVT)\n         L     R9,CVTASVT               A(ASVT)\n         LA    R9,ASVTFRST              -> FIRST ASVT ENTRY\n         LA    R7,TIOT                  POINT TO RETURN AREA\n         EXTRACT (7),FIELDS=(TSO,ASID,TIOT)  EXTR TO GET STUFF\n         MVI   CMDFLG,TSOFLG            INITIALIZE CMD FLAG\n         L     R7,TSO                   -> TO TSO INDICATOR\n         TM    0(R7),X'80'              ARE WE ON TSO?\n         BO    GOTTYPE                  IT WAS\n         MVI   CMDFLG,BATFLG            NOW A 1, TEST FOR JOB\n         L     R8,ASID                  GET ASID INTO A REG\n         SLL   R8,2                     MULTIPLY BY 4\n         L     R8,0(R8,R9)              NOW HAS A(OUR ASCB)\n         CLC   ASCBJBNI,=F'0'           TEST FOR JOB\n         BNE   GOTTYPE                  NOT ZERO, SO ITS A JOB\n         MVI   CMDFLG,STCFLG            NOW ITS A 2, STC\nGOTTYPE  EQU   *\n         TM    CMDFLG,TSOFLG            IN TSO MODE?\n         BO    GETPARM                  YES, SO GETPARM\n         LA    R3,=CL8'SYSIN'           DDNAME TO LOOK FOR\n         BAL   R10,TIOTSCAN             GO SEE IF THERE IS ONE\n         BNE   GETPARM                  WASN'T A SYSIN\n         OI    CMDFLG,SYSINFLG          SET SYSIN FLAG ON\n         OPEN  (SYSIN,(INPUT))          OPEN IT\n         B     COMP4                    AND GO GET WORK AREA\n*********************************************************************\n* DETERMINED WHO WE ARE, PROCESS ACCORDINGLY                        *\n*********************************************************************\nGETPARM  EQU   *\n         LR    R1,R11         RESTORE A(PARM)\n         ICM   R2,B'1111',0(R1)  POINT TO PARAMETER\n         LH    R1,0(R2)       PICK UP LENGTH\n         BL    COMP4          ONLY ONE PARM\n         SH    R1,=H'4'       CALL FROM TMP\n         SH    R1,2(R2)\n         LA    R2,2(,R2)      PREFIX IS 4 BYTES\n         AH    R2,0(R2)       SKIP OVER COMMAND NAME\n         STH   R1,0(R2)       PUT LENGTH OF CP CMD IN CORRECT PLACE\nCOMP4    EQU   *\n         LH    R5,BUFLEN              LENGTH OF BUFFER AREA\n         GETMAIN RU,LV=(R5),SP=250,BNDRY=PAGE  FOR FOR RETURNED DATA\n         ST    R1,ABUF                A(RESPBUF) - SAVE IT\n         TM    CMDFLG,SYSINFLG+BATFLG READING FROM SYSIN?\n         BO    CMDOK                  YES\n         LH    R3,0(R2)               GET LENGTH OF COMMAND\n         LTR   R3,R3                  IS THERE ANY LENGTH?\n         BP    CMDOK                  GO TRY TO DO IT\nNOCMDTXT EQU   *\n         MVC   0(26,R1),=C'NO CP COMMAND TEXT ENTERED'\n         MVI   26(R1),X'15'           NEW LINE CHAR\n         MVC   RESPBUFL,=F'27'        LENGTH OF MESSAGE\n         B     RESULT         PRETEND WE DID IT, BUT TELL ERROR MSG\nCMDOK    EQU   *\n         TM    CMDFLG,SYSINFLG+BATFLG PROCESSING A SYSIN FILE?\n         BNO   CMDOK1                 NO, USE VALUE IN PARM\n         GET   SYSIN                  GET A RECORD FROM SYSIN\n         LA    R3,71(,R1)             POINT TO END OF RECORD\nSCAN1    EQU   *\n         CLI   0(R3),C' '             A BLANK\n         BNE   SCAN2                  NO\n         BCTR  R3,0                   BACK UP A CHAR\n         B     SCAN1                  AND CHECK IT\nSCAN2    EQU   *\n         SR    R3,R1                  NOW R3 HAS LENGTH OF COMMAND\n         LA    R3,1(R3)               ADD 1 BACK TO GET REAL LENGTH\n         LR    R2,R1                  COPY POINTER TO COMMAND TEXT\n         SH    R2,=H'2'               DO THIS SO MOVCMD INSTR WILL WORK\nCMDOK1   EQU   *\n         L     R1,ABUF                RESTORE REG 1\n         ST    R3,CMDL                SAVE LENGTH\n         LH    R5,BUFLEN              RELOAD LENGTH\n         LA    R1,0(R1,R5)            GET EOBUFF.....\n         SR    R1,R3                  ....MINUS CMD LENGTH AND .....\n         N     R1,=F'-8'              .....ROUND BACK TO DOUBLEWORD.\n         ST    R1,ACMD                SAVE COMMAND ADDRESS\n         BCTR  R3,0                   AND\n         EX    R3,MOVCMD              MOVE IT TO IT'S NEW HOME\n         LR    R2,R1\n         S     R1,ABUF                SUBT START OF RESP. AREA\n         ST    R1,RESPBUFL            TO GET LENGTH\n         LA    R3,1(,R3)              GET ORIGINAL CMD LENGTH\n         LR    R0,R3                  AND COPY ITS VALUE\n         BCTR  R2,0\nMAKEUP   EQU   *\n         LA    R1,0(R2,R3)            ENSURE\n         OI    0(R1),X'40'               UPPER\n         BCT   R3,MAKEUP                     CASE\n         SPACE 3\n*********************************************************************\n* THE FOLLOWING TESTS FOR COMMANDS WE AREN'T ALLOWED TO ISSUE       *\n*********************************************************************\nNONBLNK  EQU   *\n         CLI   0(R1),X'40'              IS THIS A BLANK?\n         BNE   CMDSTRT                  NO, GO TO CHECK COMMAND\n         LA    R1,1(R1)                 POINT TO NEXT CHAR\n         BCT   R0,NONBLNK               AND CHECK IT\n         L     R1,ABUF\n         B     NOCMDTXT\nCMDSTRT  EQU   *\n         CLC   =C'CP ',0(R1)            ADJUC\n         BNE   NOCPREFX\n         LA    R1,3(,R1)                POINT TO START OF COMMAND\n         SH    R0,=H'3'                 ADJUST LENGTH\n         B     NONBLNK\nNOCPREFX EQU   *\n         CH    R0,=H'3'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'LOG',0(R1)            LOGOFF\n         BE    NOTALOWD\n         CLC   =C'I ',0(R1)             IPL\n         BE    NOTALOWD\n         CLC   =C'IPL',0(R1)            IPL\n         BE    NOTALOWD\n         CH    R0,=H'4'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'DISC',0(R1)           DISCONNECT\n         BE    NOTALOWD\n         CH    R0,=H'8'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'SHUTDOWN',0(R1)       SHUTDOWN\n         BE    NOTALOWD\nALLOWED  EQU   *\n         MODESET KEY=ZERO,MODE=SUP\n         L     R5,ABUF           A(BUF)\n         LH    R11,BUFLEN        LENGTH OF TOTAL AREA\n         BCTR  R11,0             SUBTRACT ONE\n         LA    R7,0(R5,R11)      COMPUTE END ADDRESS OF AREA\n         PGSER R,FIX,A=(R5),EA=(R7),ECB=0  FIX PAGES IN STORAGE\n         L     R8,ACMD           A(CMD)\n         LRA   R8,0(R8)          POINT TO REAL ADDRESS OF CMD\n         LRA   R9,0(R5)          POINT TO REAL ADDRESS OF BUF\n         L     R10,CMDL          LENGTH OF COMMAND TO EXECUTE\n         L     R11,RESPBUFL      LENGTH OF RETURN AREA\n         O     R10,=X'40000000'  INDICATE RETURN RESPONSE IN BUFFER\n         DC    X'838A0008'       DIAGNOSE INSTR - NO OPCODE\n         BNZ   *+8               LEAVE LEN ALONE IF NOT ALL FIT\n         ST    R11,RESPBUFL      LENGTH OF RESP\n         PGSER R,FREE,A=(R5),EA=(R7)  NOW FREE UP PAGES AGAIN\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE\nRESULT   L     R2,RESPBUFL    LOAD IN LENGTH OF RETURNED TEXT\n         LTR   R2,R2          SET COND CODE\n         BNP   FIN            NO RESPONSE TO COMMAND\n         SPACE\n*********************************************************************\n* PROCESS RESPONSE FOR CALLER                                       *\n*********************************************************************\n         L     R3,ABUF        POINT TO START OF RETURNED TEXT\n         TM    CMDFLG,BATFLG  IS THIS BATCH EXECUTION?\n         BNO   DOPUTS         NO, ITS A COMMAND OR STC\n         OPEN  (SYSPRINT,(OUTPUT)) ONLY FOR JOB/BATCH EXECUTION\n         TM    SYSPRINT+48,X'10'   DID IT OPEN?\n         BNO   FIN            NO, SOME PROBLEM SO JUST END\n         SPACE\nDOPUTS   EQU   *\n         LR    R1,R3          COPY POINTER TO START OF LINE\nSCAN     CLI   0(R3),X'15'    NEW LINE CHAR\n         BE    GETLEN         YES, SO CALCULATE LEN FOR TPUT\n         LA    R3,1(R3)       POINT TO NEXT CHAR\n         BCT   R2,SCAN        AND CHECK IT WHILE THERE ARE SOME\n         TM    CMDFLG,SYSINFLG+BATFLG   PROCESSING A SYSIN STREAM?\n         BO    CMDOK          YES, GET MORE TO DO\n         B     FIN            NO MORE BUFFER\nGETLEN   EQU   *\n         LR    R0,R3          CALCULATE LENGTH OF TEXT TO PUT\n         SR    R0,R1          LENGTH TO BE PUT\n         STH   R0,SYSPRINT+82 SAVE THE LENGTH\n         LR    R5,R0          COPY LENGTH OF TEXT\n         LR    R7,R1          COPY POINTER TO DATA\n         TPUT  (1),(0),R      ISSUE TPUT (NO-OP IN BATCH)\n         TM    CMDFLG,TSOFLG  IS IT TSO?\n         BO    NXTLINE        YES, SO DON'T DO PUT TO SYSPRINT\n         TM    CMDFLG,BATFLG  IS IT BATCH?\n         BO    BATCHPUT       YES, SO DO PUT TO SYSPRINT\n         MVI   WTOMSG+4,X'40' MOVE IN A BLANK TO BYTE 1 OF MESSAGE\n         MVC   WTOMSG+5(79),WTOMSG+4 AND BLANK ENTIRE FIELD\n         BCTR  R5,0           SUBTRACT 1 FOR EXECUTED MOVE\n         EX    R5,WTOTEXT     MOVE TEXT TO WTO MESSAGE AREA\n         WTO   MF=(E,WTOMSG)  AND DO WTO BECAUSE WE MUST BE STC\n         B     NXTLINE        GO TO NEXT LINE\nBATCHPUT EQU   *\n         PUT   SYSPRINT,(7)   WRITE OUTPUT TO SYSPRINT\nNXTLINE  LA    R3,1(R3)       -> TO CHAR FOLLOWING X'15' FOR NEXT PUT\n         BCT   R2,DOPUTS      SUBTRACT ONE FOR CHARS LEFT TO DO\n         TM    CMDFLG,SYSINFLG+BATFLG   PROCESSING A SYSIN STREAM?\n         BO    CMDOK          YES, GET MORE TO DO\n         B     FIN            NO MORE BUFFER\nNOTALOWD EQU   *\n         LA    R8,30                    LENGTH OF RESPONSE + 1\n         ST    R8,RESPBUFL              SAVE LENGTH\n         L     R15,ABUF                 A(BUFFER)\n         MVC   0(29,R15),=CL29'COMMAND NOT ALLOWED:          '\n         MVC   21(8,R15),0(R1)          MOVE IN COMMAND NAME\n         MVI   29(R15),X'15'            LF\n         B     RESULT                   RETURN\n         SPACE 2\nFIN      EQU   *\n         CLOSE (SYSPRINT,,SYSIN)        EVEN IF IT WASN'T OPEN\n         L     R1,ABUF                  ADDRESS OF WORK AREA TO FREE\n         LH    R5,BUFLEN                AND LENGTH\n         FREEMAIN R,LV=(5),A=(1),SP=250 FREE GOTTEN STORAGE\n         MOREND SP=250\n         EJECT\n***********************************************************************\n*  CODE FOR TIOTSCAN SUB                                              *\n***********************************************************************\nTIOTSCAN EQU   *\n         L     R2,TIOT          LOAD ADDRESS\n         LA    R2,24(R2)        AND AGAIN\n         XR    R4,R4            CLEAR A REGISTER\nTIOTSC1  IC    R4,0(R2)         PUT A BYTE IN A REGISTER\n         LTR   R4,R4            SEE IF IT WAS ZERO\n         BZ    NOTIN\n         TM    3(R2),B'00010000'   IS IT DD DYNAM?\n         BO    *+10             YES, SO SKIP AROUND THIS\n         CLC   0(8,R3),4(R2)    IS THIS SAME NAME AS WE ARE SEEKING\n         BCR   8,R10            YES IT IS, SO JUST RETURN\n         AR    R2,R4            POINT TO NEXT ENTRY\n         B     TIOTSC1          GO BACK AND LOOK AT IT\nNOTIN    CLI   *,0              SET CONDITION CODE NOT EQUAL\n         BR    R10              RETURN WITH NON ZERO CONDITION CODE\n         EJECT\n         DS    0H\nBUFLEN   DC    H'4096'          SIZE OF RESPONSE/COMMAND BUFFER\n*                               MAY BE SMALLER, BUT DON'T MAKE BIGGER.\nMOVCMD   MVC   0(*-*,R1),2(R2)\nWTOTEXT  MVC   WTOMSG+4(*-*),0(R7)      EXECUTED MOVE INSTR\nWTOMSG   WTO   '0123456789 123456789 123456789 123456789 123456789 1234*\n               56789 123456789 123456789',                             *\n               ROUTCDE=(2),MF=L\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),LRECL=80,RECFM=FB,     *\n               EODAD=FIN\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=U\n         IHAASVT\n         IHAASCB\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPCMD$": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00E\\x01\\x12\\x03O\\x01\\x12\\x03\\x9f\\x13\\x17\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-08T13:17:45", "lines": 28, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133(CPCMD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    CPCMD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DASDDEVC": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x12H\\x00\\x16\\x00\\x16\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T12:48:02", "lines": 22, "newlines": 22, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         DASDDEVC\n***********************************************************************\n* THIS MACRO HAS EQUATES FOR THE DCEMDRDT FIELD OF IECDDCE.           *\n* THE VALUES CAN BE FOUND IN THE EREP REFERENCE BOOK.                 *\n***********************************************************************\nD3380    EQU   X'14'             MDR TYPE FOR 3380 STD MODELS\nD3380D   EQU   X'1C'             MDR TYPE FOR 3380-D\nD3380E   EQU   X'1B'             MDR TYPE FOR 3380-E\n* FOLLOWING 2 COMMENTED TO AVOID DUPLICATE DEFINITIONS.\n* THEY ARE DEFINED IN SYS1.MODGEN(IECDDCE)\n*D3380J   EQU   X'21'             MDR TYPE FOR 3380-J\n*D3380K   EQU   X'23'             MDR TYPE FOR 3380-K\nD33901   EQU   X'26'             MDR TYPE FOR 3390-01\nD33902   EQU   X'27'             MDR TYPE FOR 3390-02\nD33903   EQU   X'24'             MDR TYPE FOR 3390-03\nD33909   EQU   X'32'             MDR TYPE FOR 3390-03\nD33927   EQU   X'00'             MDR TYPE FOR 3390-27 UNDEFINED\nD33954   EQU   X'00'             MDR TYPE FOR 3390-54 UNDEFINED\nD93451   EQU   X'28'             MDR TYPE FOR 9345-01\nD93452   EQU   X'29'             MDR TYPE FOR 9345-02\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DASDSUB": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x007\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x12Q\\x00T\\x00T\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T12:51:37", "lines": 84, "newlines": 84, "modlines": 0, "user": "MACRO"}, "text": "         TITLE '*** DASDSUB ***'\nDASDSUB  MOWSTART\nDASDSUB  AMODE 31\nDASDSUB  RMODE ANY\n**********************************************************************\n* DASD SUB IS A ROUTINE TO GET CERTAIN DETAILS ABOUT A DASD DEVICE   *\n* AND RETURN THEM TO THE CALLER. IT IS USED BY SVTOC FOR ONE.        *\n* CALL DASDSUB(VOLSER,CYLS,TRKS/CYL,DSCBS/TRK,TYPE).                 *\n**********************************************************************\n         LR    R10,R1           COPY PARM POINTER\n         L     R3,0(R10)        POINT TO CALLERS VOLSER\n         XC    UWORK,UWORK      CLEAR WORK AREA\n         UCBSCAN COPY,WORKAREA=UWORK,UCBAREA=UAREA,DCEAREA=UDCE,       *\n               DCELEN=UDCEL,VOLSER=(R3),DYNAMIC=YES,RANGE=ALL\n         SPACE 1\n         LA    R9,UDCE                  A(DEVICE CLASS EXTENSION)\n         USING DCE,R9\n         L     R2,4(R10)                A(2ND ARG), CYLS PER VOL\n         LH    R3,DCEUDCYL              # CYLS\n         BCTR  R3,0                     LESS ONE\n         ST    R3,0(R2)                 SAVE IT IN CALLERS AREA\n         L     R2,8(R10)                A(3RD ARG), TRKS PER CYL\n         LA    R3,15                    WE'LL CHEAT FOR NOW\n         ST    R3,0(R2)                 SAVE IT IN CALLERS AREA\n         L     R8,DCEVIB                GET ADDR OF VIB\n         USING VIB,R8\n         L     R2,12(R10)               A(4TH ARG), DSCBS PER TRK\n         SR    R3,R3\n         IC    R3,VIBDSCB               GET IT FROM VIB\n         ST    R3,0(R2)                 SAVE IN CALLERS AREA\n         L     R2,16(R10)               A(5TH ARG), DEV TYPE\n         MVC   0(5,R2),=C'3380 '        A 3380\n         MVI   4(R2),C'D'\n         CLI   DCEMDRDT,D3380D          A 'D' ?\n         BE    UCBEND\n         MVI   4(R2),C'J'\n         CLI   DCEMDRDT,D3380J          A 'J' ?\n         BE    UCBEND\n         MVI   4(R2),C'E'\n         CLI   DCEMDRDT,D3380E          AN 'E' ?\n         BE    UCBEND\n         MVI   4(R2),C'K'\n         CLI   DCEMDRDT,D3380K          A 'K'?\n         BE    UCBEND\n         MVI   4(R2),C' '               BLANK\n         CLI   DCEMDRDT,D3380           A STANDARD? OR CAN'T TELL\n         BE    UCBEND\n         MVC   0(5,R2),=C'3390 '        A 3380\n         MVI   4(R2),C'1'\n         CLI   DCEMDRDT,D33901          A '3390-01'?\n         BE    UCBEND\n         MVI   4(R2),C'2'\n         CLI   DCEMDRDT,D33902          A '3390-02'?\n         BE    UCBEND\n         MVI   4(R2),C'3'\n         CLI   DCEMDRDT,D33903          A '3390-03'?\n         MVI   4(R2),C'9'\n         CLI   DCEMDRDT,D33909          A '3390-09'?\n         BE    UCBEND\nUCBEND   EQU   *\n         MOREND\n         DASDDEVC\n*  UCB LOOKUP WORK AREA AND PARM LIST VARIABLES\nUWORK    DC    XL100'00'         WORK AREA, MUST BE ZEROED\nUAREA    DC    XL48'00'          UCB COPY\nUDCE     DC    XL128'00'         UCB DEVICE CLASS EXTENSION\nUDCEL    DC    AL2(*-UDCE)       LENGTH OF DCE EXTENSION AREA\n         SPACE 1\nVIB      DSECT                   VTOC INFO BLOCK\nVIBID    DC    CL4'VIB '         EYECATCHER\n         DC    CL2' '\n         DC    CL2' '\nVIBDSCB  DC    X'00'             DSCBS PER TRACK\n         DC    X'000000'\n         DC    CL4' '\n         DC    CL2' '\n         DC    CL2' '\n         DC    CL2' '\n         DC    CL2' '\n         DC    CL2' '\nVIBSER   DC    CL6' '            VOLSER\n         PRINT NOGEN\n         IECDDCE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DASDSUB$": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x04\\x01\\x12\\x03O\\x01\\x12\\x03\\x9f\\x12I\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-08T12:49:04", "lines": 28, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133(DASDSUB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    DASDSUB(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISASM3B": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x12\\x01\\x12\\x03\\x9f\\x01\\x13\\x01?\\x14\\x00\\x00\\xa2\\x00\\x9f\\x00\\x10\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2013-01-13T14:00:12", "lines": 162, "newlines": 159, "modlines": 16, "user": "SBGOLOB"}, "text": "         EJECT\n***********************************************************************\n* SVC NAME TABLE                                                      *\n***********************************************************************\nSVCOP    DS    0CL15                          SVC NAME TABLE\n         DC    AL1(0),CL14'EXCP/XDAP'\nSVCNAML  EQU   *-SVCOP                        LENGTH OF EACH ENTRY\n         DC    AL1(1),CL14'WAIT/WAITR/...'\n         DC    AL1(2),CL14'POST'\n         DC    AL1(3),CL14'EXIT'\n         DC    AL1(4),CL14'GETMAIN'\n         DC    AL1(5),CL14'FREEMAIN'\n         DC    AL1(6),CL14'LINK'\n         DC    AL1(7),CL14'XCTL'\n         DC    AL1(8),CL14'LOAD'\n         DC    AL1(9),CL14'DELETE'\n         DC    AL1(10),CL14'GET/FREEMAIN R'\n         DC    AL1(11),CL14'TIME'\n         DC    AL1(12),CL14'SYNCH'\n         DC    AL1(13),CL14'ABEND'\n         DC    AL1(14),CL14'SPIE'\n         DC    AL1(15),CL14'ERREXCP'\n         DC    AL1(16),CL14'PURGE'\n         DC    AL1(17),CL14'RESTORE'\n         DC    AL1(18),CL14'BLDL/FIND'\n         DC    AL1(19),CL14'OPEN'\n         DC    AL1(20),CL14'CLOSE'\n         DC    AL1(21),CL14'STOW'\n         DC    AL1(22),CL14'OPEN TYPE J'\n         DC    AL1(23),CL14'CLOSE TYPE T'\n         DC    AL1(24),CL14'DEVTYPE'\n         DC    AL1(25),CL14'TRKBAL'\n         DC    AL1(26),CL14'LOCATE, ETC'\n         DC    AL1(27),CL14'OBTAIN'\n         DC    AL1(28),CL14'''RESERVED'''\n         DC    AL1(29),CL14'SCRATCH'\n         DC    AL1(30),CL14'RENAME'\n         DC    AL1(31),CL14'FEOV'\n         DC    AL1(32),CL14'ALLOC'\n         DC    AL1(33),CL14'IOHALT'\n         DC    AL1(34),CL14'MGCR/QEDIT'\n         DC    AL1(35),CL14'WTO/WTOR'\n         DC    AL1(36),CL14'WTL'\n         DC    AL1(37),CL14'SEGLD/SEGWT'\n         DC    AL1(38),CL14'''RESERVED'''\n         DC    AL1(39),CL14'LABEL'\n         DC    AL1(40),CL14'EXTRACT'\n         DC    AL1(41),CL14'IDENTIFY'\n         DC    AL1(42),CL14'ATTACH'\n         DC    AL1(43),CL14'CIRB'\n         DC    AL1(44),CL14'CHAP'\n         DC    AL1(45),CL14'OVLYBRCH'\n         DC    AL1(46),CL14'TTIMER'\n         DC    AL1(47),CL14'STIMER'\n         DC    AL1(48),CL14'DEQ'\n         DC    AL1(49),CL14'''RESERVED'''\n         DC    AL1(50),CL14'''RESERVED'''\n         DC    AL1(51),CL14'SNAP/SDUMP'\n         DC    AL1(52),CL14'RESTART'\n         DC    AL1(53),CL14'RELEX'\n         DC    AL1(54),CL14'DISABLE'\n         DC    AL1(55),CL14'EOV'\n         DC    AL1(56),CL14'ENQ/RESERVE'\n         DC    AL1(57),CL14'FREEDBUF'\n         DC    AL1(58),CL14'RELBUF/REQBUF'\n         DC    AL1(59),CL14'OLTEP'\n         DC    AL1(60),CL14'(E)STAE/STAI'\n         DC    AL1(61),CL14'IKJEGS6A'\n         DC    AL1(62),CL14'DETACH'\n         DC    AL1(63),CL14'CHKPT'\n         DC    AL1(64),CL14'RDJFCB'\n         DC    AL1(65),CL14'''RESERVED'''\n         DC    AL1(66),CL14'BTAMTEST'\n         DC    AL1(67),CL14'''RESERVED'''\n         DC    AL1(68),CL14'SYNAD...'\n         DC    AL1(69),CL14'BSP'\n         DC    AL1(70),CL14'GSERV'\n         DC    AL1(71),CL14'ASGNBFR, ETC'\n         DC    AL1(72),CL14'''NO MACRO'''\n         DC    AL1(73),CL14'SPAR'\n         DC    AL1(74),CL14'DAR'\n         DC    AL1(75),CL14'DQUEUE'\n         DC    AL1(76),CL14'IFBSTAT'\n         DC    AL1(78),CL14'LSPACE'\n         DC    AL1(79),CL14'STATUS'\n         DC    AL1(81),CL14'SETPRT'\n         DC    AL1(82),CL14'     '\n         DC    AL1(83),CL14'SMFWTM'\n         DC    AL1(84),CL14'GRAPHICS'\n         DC    AL1(85),CL14'DDRSWAP'\n         DC    AL1(86),CL14'ATLAS'\n         DC    AL1(87),CL14'DOM'\n         DC    AL1(88),CL14'     '\n         DC    AL1(91),CL14'VOLSTAT'\n         DC    AL1(92),CL14'TCBEXCP'\n         DC    AL1(93),CL14'TGET/TPUT'\n         DC    AL1(94),CL14'STCC'\n         DC    AL1(95),CL14'SYSEVENT'\n         DC    AL1(96),CL14'STAX'\n         DC    AL1(97),CL14'IKJEGS9G'\n         DC    AL1(98),CL14'PROTECT'\n         DC    AL1(99),CL14'DYNALLOC'\n         DC    AL1(100),CL14'IKJEFFIB'\n         DC    AL1(101),CL14'QTIP'\n         DC    AL1(102),CL14'AQCTL (TCAM)'\n         DC    AL1(103),CL14'XLATE'\n         DC    AL1(104),CL14'TOPCTL (TCAM)'\n         DC    AL1(105),CL14'IMGLIB'\n         DC    AL1(107),CL14'MODESET'\n         DC    AL1(109),CL14'ESR TYPE 4'\n         DC    AL1(110),CL14'DSTATUS'\n         DC    AL1(111),CL14'''NO MACRO'''\n         DC    AL1(112),CL14'PGRLSE'\n         DC    AL1(113),CL14'PGFIX/PGFREE/..'\n         DC    AL1(114),CL14'EXCPVR'\n         DC    AL1(116),CL14'ESR TYPE 1'\n         DC    AL1(117),CL14'DEBCHK'\n         DC    AL1(119),CL14'TESTAUTH'\n         DC    AL1(120),CL14'GETMAIN/FREEMAIN'\n         DC    AL1(121),CL14'VSAM'\n         DC    AL1(122),CL14'ESR TYPE 2'\n         DC    AL1(123),CL14'PURGEDQ'\n         DC    AL1(124),CL14'TPIO'\n         DC    AL1(125),CL14'EVENTS'\n         DC    AL1(126),CL14'MSS INTERFACE'\n         DC    AL1(127),CL14' '\n         DC    AL1(128),CL14' '\n         DC    AL1(129),CL14' '\n         DC    AL1(130),CL14'RACHECK'\n         DC    AL1(131),CL14'RACINIT'\n         DC    AL1(132),CL14'RACLIST'\n         DC    AL1(133),CL14'RACDEF'\n         DC    AL1(134),CL14' '\n         DC    AL1(135),CL14' '\n         DC    AL1(136),CL14' '\n         DC    AL1(137),CL14'ESR TYPE 6'\n         DC    AL1(138),CL14'PGSER (XA)'\n         DC    AL1(139),CL14'CVAF...'\n         DC    AL1(144),CL14'PTRACE'\n         DC    AL1(145),CL14'DYNAMIC DEBUG'\n         DC    AL1(146),CL14'BPESVC'\n* SVCS BELOW 200 ARE RESERVED FOR IBM\n         DC    AL1(215),CL14'CICS(HPSVC)  '\n         DC    AL1(216),CL14'CICS(CSVC)   '\n         DC    AL1(235),CL14'             '\n         DC    AL1(240),CL14'             '\n         DC    AL1(241),CL14'             '\n         DC    AL1(242),CL14'             '\n         DC    AL1(243),CL14'             '\n         DC    AL1(244),CL14'             '\n         DC    AL1(245),CL14'             '\n         DC    AL1(246),CL14'             '\n         DC    AL1(247),CL14'             '\n         DC    AL1(248),CL14'             '\n         DC    AL1(249),CL14'             '\n         DC    AL1(250),CL14'             '\n         DC    AL1(251),CL14'             '\n         DC    AL1(252),CL14'             '\n         DC    AL1(253),CL14'             '\n         DC    AL1(254),CL14'             '\n         DC    AL1(255),CL14'             '\n         DC    X'FF'                   END OF TABLE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSSLVL": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x10R\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T10:52:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "AFIELD"}, "text": "**********************************************************************\n* YOU WILL NEED THE ADRMCLVL MACRO WHICH CAN BE OBTAINED FROM        *\n* SYS1.SAMPLIB.                                                      *\n**********************************************************************\nDSSLVL   MOWSTART\n         ADRMCLVL                         GET DFDSS LEVEL\n         ST    R1,DSSVMR                  SAVE RESULT\n         TM    DSSVMR,X'04'               TEST FOR SUCCESSFUL GET\n         BZ    OK                         DFDSS IS THERE\n         MVC   MSG+10(11),=C'UNAVAILABLE'\n         TPUT  MSG,L'MSG                  UNAVAILABLE MSG\n         B     FIN                        RETURN\nOK       EQU   *\n         SLL   R1,8                       MOVE IT LEFT\n         ST    R1,DSSVMR                  SAVE IT AGAIN\n         UNPK  DOUBLE(8),DSSVMR           UNPACK NUMBERS\n         MVC   MASK(4),DOUBLE+2           MOVE INTO MESSAGE\n         TPUT  MSG,LMSG                   TELL RELEASE ETC\nFIN      EQU   *\n         MOREND\nMSG      DC    C'DF/DSS IS VER/REL/MOD '\nMASK     DC    C'VMMR'\nLMSG     EQU   *-MSG\nDOUBLE   DC    D'0'\nDSSVMR   DC    F'0'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSSLVL$": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x03\\x01\\x12\\x03O\\x01\\x12\\x03\\x9f\\x110\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-08T11:30:03", "lines": 28, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133(DSSLVL)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    DSSLVL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEZCTGFL": {"ttr": 1806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\t\\x06\\x00\\x14\\x00\\x14\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T09:06:56", "lines": 20, "newlines": 20, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    IEZCTGFL\n         DSECT\n***********************************************************************\n* DESCRIBES THE FIELD PARAMETER LIST. DOC IS: CATALOG DIAGNOSIS REF   *\n***********************************************************************\nCTGFL    DS    0F\nCTGFLDNO DC    X'00'\nCTGFLDCD DC    X'00'\nCTGFLDGC DC    X'00'\nCTGFLDRE DC    X'00'\nCTGFLDWA DC    F'0'\nCTGFLDNM DC    F'0'\nCTGFLCHN DC    F'0'\nCTGFLDAT DC    2F'0'\n         ORG   CTGFLDAT\nCTGFLNG  DC    F'0'\nCTGFLPT  DC    F'0'\nLCTGFL   EQU   *-CTGFL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEZCTGPL": {"ttr": 1808, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\t\\x05\\x00(\\x00(\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T09:05:25", "lines": 40, "newlines": 40, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    IEZCTGPL\n         DSECT\n***********************************************************************\n* DESCRIBES THE CATALOG PARAMETER LIST. DOC IS: CATALOG DIAGNOSIS REF *\n***********************************************************************\nCTGPL    DS    0F\nCTGOPTN1 DC    X'00'\nCTGBYPSS EQU   X'80'\nCTGNAME  EQU   X'04'\nCTGCNAME EQU   X'02'\nCTGOPTN2 DC    X'00'\nCTGGTALL EQU   X'40'\nCTGOPTN3 DC    X'00'\nCTGLOC   EQU   X'20'\nCTGNUM   EQU   X'02'\nCTGAM0   EQU   X'01'\nCTGOPTN4 DC    X'00'\nCTGBYPMT EQU   X'08'\nCTGICFC  EQU   X'02'\nCTGICFOR EQU   X'01'\nCTGENT   DC    X'00',AL3(0)\nCTGCAT   DC    F'0'\n         ORG   CTGCAT\nCTGVOL   DC    F'0'\nCTGWKA   DC    F'0'\nCTGDSORG DC    X'0000'\n         ORG   CTGDSORG\nCTGOPTNS DC    X'0000'\nCTGLTCAT EQU   X'20'\nCTGTYPE  DC    X'00'\nCTGNOFLD DC    X'00'\nCTGDDNM  DC    F'0'\n         ORG   CTGDDNM\nCTGFDBK  DC    X'0000'\nCTGFBFLG DC    X'0000'\nCTGJSCB  DC    F'0'\nCTGFIELD DC    F'0'\nLCTGPL   EQU   *-CTGPL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULSUB": {"ttr": 1810, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x01\\x01\\x12\\x03\\x9f\\x01\\x13\\x01/!5\\x022\\x022\\x00\\x04\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2013-01-12T21:35:01", "lines": 562, "newlines": 562, "modlines": 4, "user": "SBGOLOB"}, "text": "         TITLE '   J U L S U B   '\n************************************************************\n*                                                          *\n*        'JULSUB'                                          *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.\n*        DATE WRITTEN. JUNE 4 1976.\n*        DATE UPDATED. APRIL 23 1980.\n*        ATTRIBUTES. RE-ENTRANT.\n*        REMARKS.\n*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT\n*            TO ANOTHER. THE DIFFERENT FORMATS ARE:\n*\n*            INPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               3   JULIAN       PACKED    PL4'YYYYDDDF'\n*\n*            OUTPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'\n*               8   ALPHA        8-CHAR    CL8'03JUN76 '\n*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'\n*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH\n*                                               2 - LAST OF MONTH\n*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)\n*             128   WEEKDAY      12-CHAR   CL12'SATURDAY'\n*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'\n*             512   TIME         8-CHAR    CL8'HH:MM:SS'\n*\n*            INPUT MUST BE EITHER JULIAN OR STANDARD.\n*\n*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES\n*            POINTED TO BY REGISTER 1\n*               1   THE INPUT DATE\n*               2   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE INPUT FORMAT\n*               3   THE RECEIVING FIELD FOR OUTPUT\n*               4   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE OUTPUT FORMAT\n*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)\n*            NOTES.\n*               1) MAKE OUTPUT 00YY IF INPUT IS 00YY.\n*               2) FOR CURRENT DATE, USE TYPE 1 DATE ZERO.\n         SPACE\n         MACRO\n         STAMP\n         LCLC  &ASMTIME\n&ASMTIME SETC  '&SYSTIME'(1,5)\n         DC    CL16' &SYSDATE &ASMTIME '\n         MEND\n         SPACE\nJULSUB CSECT\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'JULSUB   '\n         STAMP\n@PROLOG  STM   14,12,12(13)\n         LR    R12,15\n         LR    R2,R1\n*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS\n         L     R1,16(,R1)          GET SAVEAREA ADDRESS\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R1,R2\n         USING @DATA,13\n         SPACE\n         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR\n         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR\n         MVC   INPUT(4),0(R2)      COPY INPUT\n         XC    DOUBLE,DOUBLE\n         SLR   R14,R14             ZERO R14\n         ST    R14,FRSTLAST\n         ST    R14,TIMEB\n         CLI   3(R3),INP003        INPUT JULIAN PACKED?\n         BNE   INP01               NO - BRANCH\n         SPACE\n*              INPUT IS JULIAN PACKED\n         SPACE\n         MVC   DOUBLE+4(4),INPUT   MOVE INPUT\n         CVB   R1,DOUBLE\n         ST    R1,JB\nJULCOMM  L     R14,DOUBLE+4        SAVE 00YYDDDF\n         LH    R1,DOUBLE+4         GET 00YY\n         SLL   R1,16               GET 00YY0000\n         SRL   R1,12               GET 00000YY0\n         ST    R1,DOUBLE+4         STORE BACK 00000YY0\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n         CH    R1,=H'99'\n         BH    *+8\n         AH    R1,=H'2000'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)     SAVE YYYY CHAR\n         MVC   YYC,YYYYC+2\n*\n         ST    R14,DOUBLE+4        RESTORE 00YYDDDF\n         XC    DOUBLE(6),DOUBLE      00YYDDDF TO 0000DDDF\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR\n         CVB   R1,DOUBLE           CONVERT DDD TO BINARY\n         ST    R1,DDDB             SAVE DDD BINARY\n         SPACE\n         BAL   R9,TODD\n         BAL   R9,TOSB\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\nINP01    CLI   3(R3),INP001        INPUT JULIAN BINARY?\n         BNE   INP02               NO - BRANCH\n         L     R1,INPUT            GET BINARY YYYYDDD\n         LTR   R1,R1               ZERO?\n         BNZ   INP01A              NO - BRANCH\n         TIME  BIN\n         ST    R0,TIMEB            SAVE TIME\n         SLR   R0,R0\n         STM   R0,R1,DOUBLE\n         CVB   R1,DOUBLE\n         B     INP01B\nINP01A   CVD   R1,DOUBLE           TO DECIMAL\nINP01B   ST    R1,JB\n         B     JULCOMM             PROCEED AS IF INP003\n         SPACE\n*              CONVERT JULIAN DATE TO MONTH-DAY-YEAR\n*\n*                 INPUT  - YYYYB AND DDDB   (ALSO YYC)\n*\n*                 OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST\n         SPACE\nTODD     MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   DPM365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   DPM366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   DPM365              NO - NOT A LEAP YEAR\nDPM366   MVI   DPM+3,29            CHANGE FEB TO 29 DAYS\nDPM365   EQU   *\n         LA    R14,2               INDEX FOR DPM\n         LR    R0,R14              INDEX INCREMENT\n         L     R1,DDDB             DAY OF YEAR\nDPMLOOP  CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?\n         BE    DPMEND              EQUAL - BRANCH\n         BL    DPMWIN              LESS - BRANCH\n         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY\n         ALR   R14,R0              ADD 2 TO INDEX\n         B     DPMLOOP             LOOP\nDPMEND   MVI   FRSTLAST+3,2        LAST DAY OF MONTH\n         B     DPMCOMM\nDPMWIN   CH    R1,=H'1'            FIRST OF MONTH?\n         BNE   DPMCOMM             NO - BRANCH\n         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH\nDPMCOMM  SRL   R14,1               HALVE INDEX TO GET MM\n         ST    R1,DDB              SAVE DD BINARY\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR\n         ST    R14,MMB             SAVE MM BINARY\n         CVD   R14,DOUBLE          CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n         BR    R9\n         SPACE\n*              CONVERT MONTH NUMBER TO MONTH NAME\n*\n*                 INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)\n*\n*                 OUTPUT - MONTH AND ALPHA\n         SPACE\nTOMON    L     R15,MMB\n         MH    R15,=H'9'           MULT BY 9\n         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY\n         MVC   MONTH,0(R15)        SAVE PROSE MONTH\n         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH\n         MVC   ALPHA(2),DDC\n         MVC   ALPHA+5(2),YYC\n         MVI   ALPHA+7,C' '\n         BR    R9\n         SPACE\n*              BUILD PROSE DATE\n*\n*                 INPUT  - MONTH, DDC, YYYYC\n         SPACE\nTOPROSE  TM    3(R5),OUT016\n         BZR   R9\n         MVI   PROSE,C' '\n         MVC   PROSE+1(L'PROSE-1),PROSE\n         MVC   PROSE(9),MONTH\n         LA    R1,PROSE+9\nPROSE01  CLI   0(R1),C' '          BLANK?\n         BNE   PROSE02             NO - FOUND LAST LETTER\n         BCT   R1,PROSE01          BACK UP AND BRANCH\nPROSE02  MVC   2(2,R1),DDC\n         CLI   2(R1),C'0'          LEADING ZERO?\n         BNE   PROSE03             NO - BRANCH\n         MVC   2(1,R1),3(R1)       YES - SHIFT\n         MVI   3(R1),C' '\n         BCTR  R1,0\nPROSE03  EQU   *\n         MVI   4(R1),C','          COMMA AFTER DAY\n         LA    R1,1(,R1)           ADD 1 FOR COMMA\n         MVC   5(4,R1),YYYYC\n         CLC   5(2,R1),=C'00'\n         BNE   *+10\n         MVC   5(2,R1),=C'20'\n         BR    R9\n         SPACE\n*              INPUT IS YYYY/MM/DD BINARY\n         SPACE\nINP02    L     R1,INPUT\n         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF\n         LM    R14,R15,DOUBLE\n         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF\n         CVB   R1,DOUBLE\n         ST    R1,DDB\n         OI    DOUBLE+7,X'0F'\n         UNPK  DDC,DOUBLE+6(2)\n*\n         STM   R14,R15,DOUBLE\n         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F\n         L     R1,DOUBLE+4\n         SRL   R1,8\n         ST    R1,DOUBLE+4\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         CH    R1,=H'12'\n         BNH   *+8\n         LA    R1,13               SET ALL BAD MONTHS TO 13\n         ST    R1,MMB\n         UNPK  MMC,DOUBLE+6(2)\n*\n         SRDL  R14,4               GET YYYYMMDD\n         SLR   R14,R14             GET 00000000 IN R14\n         SRL   R15,12              GET 000YYYYM IN R15\n         STM   R14,R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n         CH    R1,=H'99'\n         BH    *+8\n         AH    R1,=H'2000'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)\n         MVC   YYC,YYYYC+2\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n*\n         BAL   R9,TOSB\n         BAL   R9,TOJUL\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\n*              CONVERT M/D/Y TO JULIAN\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - DDDB, DDDC, JB\n         SPACE\nTOJUL    MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   JUL365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   JUL366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   JUL365              NO - NOT A LEAP YEAR\nJUL366   MVI   DPM+3,29             CHANGE FEB TO 29 DAYS\nJUL365   EQU   *\n         L     R15,DDB              GET DAYS IN CURRENT MONTH\n         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY\n         L     R14,MMB              GET CURRENT MONTH\n         BCTR  R14,0                GET NO. OF COMPLETED MONTHS\n         LA    R1,DPM\n         LTR   R14,R14              JANUARY?\n         BNP   JULEND               YES - BRANCH\n         B     *+8\nJULOOP   LA    R1,2(,R1)            POINT TO NEXT MONTH\n         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL\n         BCT   R14,JULOOP\nJULEND   CH    R0,0(,R1)            LAST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,2         YES\n         CH    R0,=H'1'             FIRST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,1         YES\n         ST    R15,DDDB             SAVE DDD\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'       SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR\n         MVC   JC(2),YYC\n         PACK  DOUBLE,JC\n         CVB   R1,DOUBLE\n         ST    R1,JB\n         BR    R9\n         SPACE\n*\n*\n*\n         SPACE\nTOSB     MVC   WORK(4),YYYYC\n         MVC   WORK+4(2),MMC\n         MVC   WORK+6(2),DDC\n         PACK  DOUBLE,WORK(8)\n         CVB   R1,DOUBLE\n         ST    R1,SB\n         BR    R9\n         SPACE\n*              GET DAY OF WEEK\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - WEEKB, WEEKC\n*\n*              N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2\n*\n*                 WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)\n*\n*                 N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY\n*\nTOWEEK   TM    3(R5),OUT064+OUT128\n         BZR   R9\n         L     R1,DDB              SET N = D\n         L     R15,CENTB\n         L     R14,MMB\n         CH    R14,=H'2'           JAN OR FEB?\n         BH    WEEKMMOK\n         BE    WEEKFEB\n         LA    R14,13              SET M=13\n         B     WEEKYMIN\nWEEKFEB  LA    R14,14              SET M=14\nWEEKYMIN BCTR  R15,0               SET Y = Y-1\nWEEKMMOK LR    R0,R14              COPY M\n         ALR   R0,R0               GET 2M\n         ALR   R1,R0               SET N = N + 2M\n         LR    R0,R15              SAVE REDEFINED Y\n         SPACE\n         LA    R14,1(,R14)         GET M+1\n         MH    R14,=H'3'           GET 3(M+1)\n         SRDL  R14,32              SHIFT INTO R15, ZERO R14\n         D     R14,=F'5'           GET 3(M+1)/5 IN R15\n         ALR   R1,R15              SET N = N + 3(M+1)/5\n         SPACE\n         LR    R15,R0              GET Y\n         ALR   R1,R15              SET N = N + Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'4'           GET Y/4\n         ALR   R1,R15              SET N = N + Y/4\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'100'         GET Y/100\n         SLR   R1,R15              SET N = N - Y/100\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'400'         GET Y/400\n         ALR   R1,R15              SET N = N + Y/400\n         LA    R15,2               GET 2\n         ALR   R1,R15              SET N = N + 2\n         SLR   R0,R0               ZERO R0\n         D     R0,=F'7'            SET N = N/7\n         ST    R0,WEEKB            SAVE REMAINDER\n         LR    R1,R0\n         MH    R1,=H'9'\n         LA    R14,WEEKDAYS(R1)    POINT TO NAME\n         MVC   WEEKC(9),0(R14)     MOVE NAME\n         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS\n         BR    R9\n         SPACE\n*\n*              CONVERT TIMEB TO TIMEC\n*\n*                 DIVIDE BY 10,10,10,6,10,6,10,6\n*\nTOTIME   TM    2(R5),OUT512\n         BNOR  R9\n         L     R15,TIMEB\n         LA    R6,10               INITIAL DIVISOR\n         LA    R7,12               SET DIVISOR MASK\n         LA    R8,32               SHIFT COUNT\nDECLOOP  SR    R14,R14\n         DR    R14,R6\n         LR    R0,R14              SAVE REMAINDER\n         SRDL  R0,4                SHIFT INTO R1\n         SH    R8,=H'4'            DECREMENT SHIFT COUNT\n         LTR   R15,R15             QUOTIENT ZERO?\n         BZ    TOTIMX              YES - BRANCH\n         CL    R8,=F'24'           IF COUNT LT 24\n         BNL   DECLOOP             NO - BRANCH\n         XR    R6,R7               10 TO 6 TO 10 ETC\n         B     DECLOOP\nTOTIMX   SRL   R1,0(R8)            SHIFT REMAINING BITS\n         SRL   R1,4                GET 0HHMMSST\n         ST    R1,DOUBLE\n         OI    DOUBLE+3,X'0F'\n         MVC   DOUBLE+6(10),=X'402120204B20204B2020'\n         ED    DOUBLE+6(10),DOUBLE\n         MVC   TIMEC,DOUBLE+8\n         BR    R9\n         SPACE\nOUTPUT   LR    R1,R4\n         TM    3(R5),OUT001\n         BZ    *+14\n         MVC   0(4,R1),JB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT002\n         BZ    *+14\n         MVC   0(4,R1),SB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT004\n         BZ    *+14\n         MVC   0(8,R1),SC\n         LA    R1,8(,R1)\n         TM    3(R5),OUT008\n         BZ    *+14\n         MVC   0(8,R1),ALPHA\n         LA    R1,8(,R1)\n         TM    3(R5),OUT016\n         BZ    *+14\n         MVC   0(L'PROSE,R1),PROSE\n         LA    R1,L'PROSE(,R1)\n         TM    3(R5),OUT032\n         BZ    *+14\n         MVC   0(4,R1),FRSTLAST\n         LA    R1,4(,R1)\n         TM    3(R5),OUT064\n         BZ    *+14\n         MVC   0(4,R1),WEEKB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT128\n         BZ    *+14\n         MVC   0(12,R1),WEEKC\n         LA    R1,12(,R1)\n         TM    2(R5),OUT256\n         BZ    *+14\n         MVC   0(4,R1),TIMEB\n         LA    R1,4(,R1)\n         TM    2(R5),OUT512\n         BZ    *+14\n         MVC   0(8,R1),TIMEC\n         LA    R1,8(,R1)\n         BR    R9\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     13,4(,13)\n         ST    15,16(,13)\n*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nDAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\nALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '\n         DC    CL36'MAY      JUNE     JULY     AUGUST   '\n         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '\n         DC    CL09'UNKNOWN  '\nWEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '\n         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '\nWEEKBLNK EQU   WEEKDAYS+15         3 BLANKS\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nINPUT    DS    CL8\nDOUBLE   DS    D\nWORK     DS    8C\nSC       DS    0CL8\nMMC      DS    CL2\nSLASH1   DS    C\nDDC      DS    CL2\nSLASH2   DS    C\nYYC      DS    CL2\nYYYYC    DS    CL4\nDDB      DS    F\nMMB      DS    F\nYYYYB    DS    F\nCENTB    DS    F\nDDDB     DS    F\nJB       DS    F\nSB       DS    F\nWEEKB    DS    F\nFRSTLAST DS    F\nTIMEB    DS    F\nTIMEC    DS    CL8\nJC       DS    0CL5\n         DS    CL2\nDDDC     DS    CL3\nMONTH    DS    CL9\nALPHA    DS    0CL8\n         DS    CL2\nMON      DS    CL3\n         DS    CL2\n         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA\nWEEKC    DS    CL12\nPROSE    DS    CL20\nDPM      DS    13H\n@DATAL   EQU   *-@DATA\n         SPACE\nINP001   EQU   1\nINP002   EQU   2\nINP003   EQU   3\nOUT001   EQU   1\nOUT002   EQU   2\nOUT004   EQU   4\nOUT008   EQU   8\nOUT016   EQU   16\nOUT032   EQU   32\nOUT064   EQU   64\nOUT128   EQU   128\nOUT256   EQU   1\nOUT512   EQU   2\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULSUB$": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00A\\x01\\x12\\x03O\\x01\\x13\\x01/!I\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2013-01-12T21:49:41", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE133(JULSUB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    JULSUB(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LASTCLP$": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00!\\x01\\x12\\x03?\\x01\\x161\\x8f#\\x14\\x00 \\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2012-02-02T00:00:00", "modifydate": "2016-11-13T23:14:21", "lines": 32, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.AFIELD.MACROS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE133(LASTCLPA)\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE133(JULSUB)\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE133(TODCN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n ENTRY   LASTCLPA\n INCLUDE OBJECT\n SETSSI  CB493133\n SETCODE AC(1)\n NAME    LASTCLPA(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LASTCLPA": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00E\\x01\\x12\\x03\\x7f\\x01\\x161\\x9f!(\\x02\\xa0\\x01\\x07\\x01\\x9e\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2012-02-06T00:00:00", "modifydate": "2016-11-14T21:28:45", "lines": 672, "newlines": 263, "modlines": 414, "user": "PUTLINE"}, "text": "         TITLE '*** LASTCLPA ***'\n* ------------------------------------------------------------------- *\n*   IMPORTANT NOTE.   (FIXED BY SAM GOLOB - NOV 13, 2016.)            *\n*                                                                     *\n*   THERE IS A Z/OS RELEASE DEPENDENCY IN THIS CODE.  WE CHANGED THE  *\n*    TEST FOR RELEASE NUMBER BECAUSE OF THE FOLLOWING REASON.....     *\n*                                                                     *\n*   BEFORE Z/OS 1.2, THE FIRST RECORD OF THE PLPA HAD THE CORRECT     *\n*    LASTCLPA TIME.  AFTER THAT, THE SECOND RECORD CONTAINS THE       *\n*    CORRECT TIME, SO YOU HAVE TO DO AN EXTRA \"GET\", DEPENDING ON     *\n*    THE RELEASE NUMBER.  BUT YOU CAN'T DO A STRAIGHT CLC ON '7705',  *\n*    BECAUSE Z/OS 2.2 IS '77A0' AND THAT IS \"LESS\" THAN '7705', SO    *\n*    THE COMPARE FAILS WITH Z/OS 2.2, YOU DON'T DO THE EXTRA \"GET\",   *\n*    AND THE CLPA TIME DISPLAYED BY THE PROGRAM IS WRONG.             *\n*                                                                     *\n*   SOLVED THE PROBLEM BY USING CVTOSLV3, BIT X'10', TO DETERMINE     *\n*    Z/OS 1.2 OR HIGHER.  DON'T USE HBBnnnn ANY MORE, 32 BYTES        *\n*    BEFORE THE CVT STARTS, AND COMPARE ON THE VALUE OF 'nnnn'.       *\n* ------------------------------------------------------------------- *\n* -    THIS VERSION OF LASTCLPA USES PUTLINE TERMINAL OUTPUT    ----- *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         L     R4,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\nLASTCLPA MOWSTART\nLASTCLPA AMODE  31\nLASTCLPA RMODE  24\n***********************************************************************\n* THIS PROGRAM IS USED TO DETERMINE THE DATE AND TIME OF THE MOST     *\n* RECENT CLPA. IT CAN BE USED TO VERIFY IF THE OPERATOR REALLY DID    *\n* DO A CLPA IN RESPONSE TO IEA101A AT IPL TIME.                       *\n* UNDER ESA GOES IN SYS2.LINKLIB, SETCODE AC(1).                      *\n***********************************************************************\n         MVI   BIGLINE-1,X'40'\n         MVC   BIGLINE(L'BIGLINE),BIGLINE-1\n         USING CVTMAP,R11\n         L     R11,16                   A(CVT)\n         ICM   R1,15,0(R1)              POINT TO PARAMETER\n         LH    R2,0(R1)                 PICK UP LENGTH\n         BL    COMP4                    ONLY ONE PARM\n         SH    R2,=H'4'                 SUBTRACT 2 1/2 WDS OF LENGTH\n         SH    R2,2(R1)                 SUBTRACT LENGTH OF COMMAND NAME\n         BZ    NOPARM                   NO LENGTH LEFT, NO PARM\n         AH    R1,2(R1)                 SKIP OVER COMMAND NAME\n         LA    R1,4(,R1)                AND 4 BYTES OF LENGTH\nCOMP4    EQU   *\n         LTR   R2,R2                    TEST FOR NOT ZERO\n         BNZ   PARM                     PARM SUPPLIED\nNOPARM   EQU   *\n*        SETMODE 31                     31-BIT ADDRESSING ON\n         L     R2,CVTASMVT              A(ASMVT)\n         L     R5,8(R2)                 A(PAGING ART)\n         L     R3,24(R5)                A(DSN LIST)\n         MVC   PAGEDSN(44),0(R3)      PLPA NAME (ALWAYS FIRST IN LIST)\n*        SETMODE 24                     BACK TO 24-BIT ADDRESSES\n         B     OPEN\nPARM     EQU   *\n         BCTR  R2,0                     LESS ONE FOR EXECUTE\n         EX    R2,MVCDSN1               MOVE NAME TO OUR DATA AREA\nOPEN     EQU   *\n         USING SHWOUT,R10\n         USING SHWASSOC,R9\n***********************************************************************\n*  USE SHOWCAT FOR STARTERS TO GET CATALOG ACB AND CI FOR DSET        *\n***********************************************************************\n         LA    R10,AREA                      -> TO RETURN DATA AREA\n         SHOWCAT AREA=AREA,NAME=PAGEDSN      ISSUE MACRO TO GET INFO\n         BAL   R14,SETPTR                    SET -> TO ASSOC\n         MVC   CI(3),SHWACI                  CI OF THE ASSOCIATED ENTRY\n         L     R2,SHWACBP                    GET CATALOG ACB POINTER\n         ST    R2,ACBA                       AND SAVE IT\n         TM    48(R2),X'10'                  IS ACB OPEN?\n         BO    SETPL                         YES, SO OK TO GO ON\n         APUT  =C'CATALOG NOT OPEN',16       TELL CALLER\n         B     RETURN                        AND EXIT\n         SPACE\n***********************************************************************\n* SET UP CATALOG FIELD PARAMETER LIST                                 *\n***********************************************************************\nSETPL    EQU   *\n         USING CTGFL,R9\n         LA    R9,FLD1\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM1                     A(FIELDNAME)\n         MVC   0(08,R2),=C'ENTNAME '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD2\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM2                     A(FIELDNAME)\n         MVC   0(08,R2),=C'DEVTYP  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD3\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM3                     A(FIELDNAME)\n         MVC   0(08,R2),=C'VOLSER  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         DROP  R9\n         SPACE\n***********************************************************************\n* SET UP CATALOG PARAMETER LIST                                       *\n***********************************************************************\n         USING CTGPL,R1\n         LA    R1,CATPL            -> CATALOG PARAMETER LIST\n         OI    CTGOPTN1,CTGBYPSS\n         NI    CTGOPTN1,255-(CTGNAME+CTGCNAME)   CI AND ACB PROVIDED\n         XC    CTGOPTN2(1),CTGOPTN2              CLEAR\n         OI    CTGOPTN3,CTGLOC+CTGNUM+CTGAM0\n         LA    R2,CI               ADDRESS OF CONTROL INTERVAL\n         ST    R2,CTGENT           SAVE IT\n         LA    R2,ACBA             A(CATALOG ACB)\n         ST    R2,CTGCAT           SAVE IT IN PARM LIST\n         LA    R2,AREA             -> WORK AREA\n         ST    R2,CTGWKA           SAVE IT IN PARM LIST\n         MVI   CTGTYPE,C'D'        INDICATE 'DATA' REQD\n         MVI   CTGNOFLD,X'03'      NUMBER OF FPLS\n         LA    R2,FLD1             POINT TO CTGFIELD\n         ST    R2,CTGFIELD         SAVE IT IN PARM LIST\n         LA    R2,FLD2             POINT TO CTGFIELD\n         ST    R2,CTGFL2           SAVE IT IN PARM LIST\n         LA    R2,FLD3             POINT TO CTGFIELD\n         ST    R2,CTGFL3           SAVE IT IN PARM LIST\n         SPACE\n         SVC   26                  ISSUE CATALOG SVC\n         LTR   R15,R15             HOW DID WE DO?\n         EJECT\n         MVC   S99TUKY2+6(44),AREA+4    MOVE PAGEDSN INTO ALLOC LIST\n         MVC   S99TUKY4+6(6),AREA+4+44+4  MOVE VOLSER INTO ALLOC LIST\n         LA    R4,DTYP            -> TO DEVICE TYPE TABLE\n         LA    R1,AREA+4+44       -> TO DEVICE TYPE\nTYPLP    EQU   *\n         CLC   0(4,R1),0(R4)      FIND MATCHING TYPE IN TABLE\n         BE    GOTTYP             GOT IT\n         LA    R4,8(R4)           -> NEXT ENTRY IN TABLE\n         B     TYPLP              GO AND TEST IT\nGOTTYP   EQU   *\n         MVC   S99TUKY5+6(4),4(R4)  INDICATE UNIT(XXXX)\n         MVI   S99VERB,X'01'      INDICATE ALLOC DSNAME(XXXXXXXX)\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               ALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         OPEN  PLPA               -> OPEN PLPA PAGE DATASET\n         GET   PLPA               GET THE FIRST RECORD\n         LR    R9,R11             COPY CVT ADDR\n* --------------------------------------------------------------- *\n*            USE CVTOSLV3 TO DETERMINE THE SYSTEM LEVEL.          *\n*            IT MUST BE Z/OS 1.2 OR HBB7705 OR HIGHER.            *\n* --------------------------------------------------------------- *\n*                                 X'4F3' OFF THE CVT IS CVTOSLV3.\n         TM    X'4F3'(R9),X'10'   IS THIS HBB7705 OR MORE?\n         BNO   GOTTIM             NO. USE THE FIRST RECORD.\n* ---->      TEST     -----  ABOVE\n*                                 YES, HBB7705 OR HIGHER, SO..\n         GET   PLPA               GET THE SECOND RECORD\n*                                 AND USE THE TIMESTAMP FROM IT.\nGOTTIM   EQU   *\n* ---->      TEST     -----  BELOW  -----   *********\n*        STM   R14,R1,SAVE1401          DO A TEST DISPLAY\n*        MVC   BIGLINE,BIGLINE-1        TO HEX DISPLAY\n*        HEX   BIGLINE,8,32(R1)          THE RAW TIME STAMP.\n*        MVC   BIGLINE+22(14),=C'Raw Time Stamp'\n*        APUT  BIGLINE,50               TO SEE IF IT CHANGES\n*        LM    R14,R1,SAVE1401           WITHIN THE CURRENT IPL.\n*                                       (IT SHOULD NOT.)\n* ---->      TEST     -----  ABOVE  -----   *********\n         MVC   TSTAMP(8),32(R1)   MOVE DATA TO OUR DATA AREA\n         CLOSE PLPA               CLOSE DATASET\n         MVI   S99VERB,X'02'      INDICATE FREE DDNAME(XXXXXXXX)\n         LA    R1,S99TUPLF        -> TO FREE TEXT UNITS\n         ST    R1,S99TXTPP        AND SAVE IN PARM LIST\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               UNALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         MVC   TZONE(4),CVTTZ     MOVE TIME ZONE OFFSET INTO OUR LIST\n         LA    R1,ARGS            -> TO ARGS FOR TODCN\n         L     R15,=V(TODCN)      ADDRESS OF TIMESTAMP CONVERTER\n         BALR  R14,R15            AND GO THERE\n         MVC   TRET(2),=C'00'\n         PACK  DOUBLE+4(4),TRET(7)\n         LA    R1,PTRS\n         L     R15,=V(JULSUB)\n         BALR  R14,R15\n         LA    R15,MSGDATA\n         MVC   MSGDATA(9),DAYDATE+20 DAY OF WEEK\n         LA    R15,MSGDATA+9\nBACK1    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK1\n         LA    R15,2(,R15)\n         MVC   0(20,R15),DAYDATE   MONTH DAY YEAR\n         LA    R15,20(,R15)\nBACK2    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK2\n         LA    R15,2(,R15)\n         MVI   0(R15),C'('\n         MVC   1(2,R15),TRET+2     YY\n         MVI   3(R15),C'.'\n         MVC   4(3,R15),TRET+4     DDD\n         MVI   7(R15),C')'\n         LA    R15,9(,R15)\n         MVC   0(2,R15),=C'AT'\n         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO\n         MVC   0(8,R15),TRET+7     MOVE TIME IN\n         MVI   2(R15),C':'         MOVE IN A COLON\n         MVI   5(R15),C':'         MOVE IN A COLON\n*        SETMODE 24\n         APUT  MSG,LMSG            TELL CALLER\n*        SETMODE 31\nRETURN   EQU   *\n         MOREND\nSETPTR   DS    0H\n         LA    R9,SHWASS           -> ASSOC PTRS\n         CLI   SHWTYPE,C'D'        DATA TYPE?\n         BER   R14                 YES, RETURN\n         CLI   SHWTYPE,C'I'        INDEX TYPE?\n         BER   R14                 RETURN\n         LA    R9,SHWASS0          -> TO ASSOC PTRS\n         BR    R14                 RETURN\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* --------------------------------------------------------- *\n         EJECT\nSAVE1401 DS    5F                  ONE EXTRA\nHEXSAVE  DS    3F\nSAV4HEX  DC    F'0'\n         DC    C' '\nBIGLINE  DC    CL50' '\nMSG      DC    C'LAST CLPA WAS ON '\nMSGDATA  DC    CL60' '\nLMSG     EQU   *-MSG\nARGS     DC    A(TZONE)\n         DC    A(TSTAMP)\n         DC    X'80',AL3(TRET)\nTZONE    DC    F'0'\nTSTAMP   DC    XL8'FFFFFFFFFFFFFFFF'\nTRET     DC    CL24' '             RETURNED IS YYYYDDDHH.MM.SS.MMMMMM\nDTYP     EQU   *\n         DC    X'3010200F',C'3390'\n         DC    X'3010200E',C'3380'\n         DC    X'3010200C',C'3375'\n         DC    X'3010200B',C'3350'\n         DC    X'30102009',C'3330'\n         DC    X'3010200D',C'3330'   3330-1\nPLPA     DCB   DDNAME=PLPA,DSORG=PS,RECFM=U,BLKSIZE=80,MACRF=GL\nS99RBPTR DC    X'80',AL3(S99RB)       SVC 99 REQUEST BLOCK PTR\nS99RB    DS    0F\nS99RBLN  DC    AL1(20)                LENGTH=20 BYTES\nS99VERB  DC    X'01'                  VERB CODE=01 (DSNAME ALLOC)\nS99FLAG1 DC    X'1000'                DONT USE EXISTING ALLOC\nS99ERROR DC    AL2(0)                 ERROR CODE\nS99INFO  DC    AL2(0)                 INFO  CODE\nS99TXTPP DC    A(S99TUPLA)            POINTER TO TEXT UNIT POINTERS\nS99RSVD1 DC    A(0)                   RESERVED\nS99FLAG2 DC    A(0)                   FLAGS 2\nS99TUPLA DC    A(S99TUKY1)            TEXT UNIT POINTERS\n         DC    A(S99TUKY2)\n         DC    A(S99TUKY3)\n         DC    A(S99TUKY4)\n         DC    X'80',AL3(S99TUKY5)    LAST PARM\nS99TUPLF DC    X'80',AL3(S99TUKY1)    LAST PARM\nS99TUNIT DS    0F\nS99TUKY1 DC    X'0001',X'0001',X'0004',C'PLPA'           DDN=PLPA\nS99TUKY2 DC    X'0002',X'0001',X'002C',CL44'*    '       DSNAME\nS99TUKY3 DC    X'0004',X'0001',X'0001',X'08'             SHR\nS99TUKY4 DC    X'0010',X'0001',X'0006',CL6'VOLSER'       VOLSER\nS99TUKY5 DC    X'0015',X'0001',X'0004',CL4'3390'         DEVTYP\n         DS    0D\nS99LENG  EQU   *-S99RBPTR                 LENGTH\n* WORK AREAS FOR JULSUB ROUTINE FOR DAY DATE CONVERSION\nDOUBLE   DS    D\nINPARM   DC    F'3'\nDAYDATE  DC    CL48' '\nOUTPARM  DC    AL4(16+128)\nWORK     DS    32D\nPTRS     DC    AL4(DOUBLE+4)\n         DC    AL4(INPARM)\n         DC    AL4(DAYDATE)\n         DC    AL4(OUTPARM)\n         DC    X'80',AL3(WORK)\n* WORK AREAS ETC FOR DSN LOOKUP\nMVCDSN1  MVC   PAGEDSN(*-*),0(R1)       EXECUTED MOVE\nPAGEDSN  DC    CL44' '\nACBA     DC    F'0'\nCI       DC    CL3' '\nFLDNM1   DC    CL8' '\nFLDNM2   DC    CL8' '\nFLDNM3   DC    CL8' '\nAREA     DC    H'512'               WORK AREA FOR\n         DC    510C' '              SHOWCAT AND SUBSEQUENTLY\n         DC    2C' '                USED BY OTHER PARTS OF PGM\n         SPACE\n         DS    0F\nCATPL    DC    (LCTGPL)X'00'\nCTGFL2   DC    F'0'\nCTGFL3   DC    F'0'\nFLD1     DC    (LCTGFL)X'00'\nFLD2     DC    (LCTGFL)X'00'\nFLD3     DC    (LCTGFL)X'00'\n         EJECT\n         IEZCTGPL\n         SPACE 5\n         IEZCTGFL\n         SPACE 5\n         IGGSHWPL\n         SPACE 5\n         CVT   DSECT=YES\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LASTCLPO": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00D\\x01\\x12\\x03\\x7f\\x01\\x161\\x9f\"\\x02\\x01\\x1e\\x01\\x07\\x00\\x1b\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-02-06T00:00:00", "modifydate": "2016-11-14T22:02:44", "lines": 286, "newlines": 263, "modlines": 27, "user": "TPUT"}, "text": "         TITLE '*** LASTCLPA ***'\n* ------------------------------------------------------------------- *\n*   IMPORTANT NOTE.   (FIXED BY SAM GOLOB - NOV 13, 2016.)            *\n*                                                                     *\n*   THERE IS A Z/OS RELEASE DEPENDENCY IN THIS CODE.  WE CHANGED THE  *\n*    TEST FOR RELEASE NUMBER BECAUSE OF THE FOLLOWING REASON.....     *\n*                                                                     *\n*   BEFORE Z/OS 1.2, THE FIRST RECORD OF THE PLPA HAD THE CORRECT     *\n*    LASTCLPA TIME.  AFTER THAT, THE SECOND RECORD CONTAINS THE       *\n*    CORRECT TIME, SO YOU HAVE TO DO AN EXTRA \"GET\", DEPENDING ON     *\n*    THE RELEASE NUMBER.  BUT YOU CAN'T DO A STRAIGHT CLC ON '7705',  *\n*    BECAUSE Z/OS 2.2 IS '77A0' AND THAT IS \"LESS\" THAN '7705', SO    *\n*    THE COMPARE FAILS WITH Z/OS 2.2, YOU DON'T DO THE EXTRA \"GET\",   *\n*    AND THE CLPA TIME DISPLAYED BY THE PROGRAM IS WRONG.             *\n*                                                                     *\n*   SOLVED THE PROBLEM BY USING CVTOSLV3, BIT X'10', TO DETERMINE     *\n*    Z/OS 1.2 OR HIGHER.  DON'T USE HBBnnnn ANY MORE, 32 BYTES        *\n*    BEFORE THE CVT STARTS, AND COMPARE ON THE VALUE OF 'nnnn'.       *\n* ------------------------------------------------------------------- *\nLASTCLPA MOWSTART\nLASTCLPA AMODE  31\nLASTCLPA RMODE  24\n***********************************************************************\n* THIS PROGRAM IS USED TO DETERMINE THE DATE AND TIME OF THE MOST     *\n* RECENT CLPA. IT CAN BE USED TO VERIFY IF THE OPERATOR REALLY DID    *\n* DO A CLPA IN RESPONSE TO IEA101A AT IPL TIME.                       *\n* UNDER ESA GOES IN SYS2.LINKLIB, SETCODE AC(1).                      *\n***********************************************************************\n         USING CVTMAP,R11\n         L     R11,16                   A(CVT)\n         ICM   R1,15,0(R1)              POINT TO PARAMETER\n         LH    R2,0(R1)                 PICK UP LENGTH\n         BL    COMP4                    ONLY ONE PARM\n         SH    R2,=H'4'                 SUBTRACT 2 1/2 WDS OF LENGTH\n         SH    R2,2(R1)                 SUBTRACT LENGTH OF COMMAND NAME\n         BZ    NOPARM                   NO LENGTH LEFT, NO PARM\n         AH    R1,2(R1)                 SKIP OVER COMMAND NAME\n         LA    R1,4(,R1)                AND 4 BYTES OF LENGTH\nCOMP4    EQU   *\n         LTR   R2,R2                    TEST FOR NOT ZERO\n         BNZ   PARM                     PARM SUPPLIED\nNOPARM   EQU   *\n*        SETMODE 31                     31-BIT ADDRESSING ON\n         L     R2,CVTASMVT              A(ASMVT)\n         L     R5,8(R2)                 A(PAGING ART)\n         L     R3,24(R5)                A(DSN LIST)\n         MVC   PAGEDSN(44),0(R3)      PLPA NAME (ALWAYS FIRST IN LIST)\n*        SETMODE 24                     BACK TO 24-BIT ADDRESSES\n         B     OPEN\nPARM     EQU   *\n         BCTR  R2,0                     LESS ONE FOR EXECUTE\n         EX    R2,MVCDSN1               MOVE NAME TO OUR DATA AREA\nOPEN     EQU   *\n         USING SHWOUT,R10\n         USING SHWASSOC,R9\n***********************************************************************\n*  USE SHOWCAT FOR STARTERS TO GET CATALOG ACB AND CI FOR DSET        *\n***********************************************************************\n         LA    R10,AREA                      -> TO RETURN DATA AREA\n         SHOWCAT AREA=AREA,NAME=PAGEDSN      ISSUE MACRO TO GET INFO\n         BAL   R14,SETPTR                    SET -> TO ASSOC\n         MVC   CI(3),SHWACI                  CI OF THE ASSOCIATED ENTRY\n         L     R2,SHWACBP                    GET CATALOG ACB POINTER\n         ST    R2,ACBA                       AND SAVE IT\n         TM    48(R2),X'10'                  IS ACB OPEN?\n         BO    SETPL                         YES, SO OK TO GO ON\n         TPUT  =C'CATALOG NOT OPEN',16       TELL CALLER\n         B     RETURN                        AND EXIT\n         SPACE\n***********************************************************************\n* SET UP CATALOG FIELD PARAMETER LIST                                 *\n***********************************************************************\nSETPL    EQU   *\n         USING CTGFL,R9\n         LA    R9,FLD1\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM1                     A(FIELDNAME)\n         MVC   0(08,R2),=C'ENTNAME '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD2\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM2                     A(FIELDNAME)\n         MVC   0(08,R2),=C'DEVTYP  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD3\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM3                     A(FIELDNAME)\n         MVC   0(08,R2),=C'VOLSER  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         DROP  R9\n         SPACE\n***********************************************************************\n* SET UP CATALOG PARAMETER LIST                                       *\n***********************************************************************\n         USING CTGPL,R1\n         LA    R1,CATPL            -> CATALOG PARAMETER LIST\n         OI    CTGOPTN1,CTGBYPSS\n         NI    CTGOPTN1,255-(CTGNAME+CTGCNAME)   CI AND ACB PROVIDED\n         XC    CTGOPTN2(1),CTGOPTN2              CLEAR\n         OI    CTGOPTN3,CTGLOC+CTGNUM+CTGAM0\n         LA    R2,CI               ADDRESS OF CONTROL INTERVAL\n         ST    R2,CTGENT           SAVE IT\n         LA    R2,ACBA             A(CATALOG ACB)\n         ST    R2,CTGCAT           SAVE IT IN PARM LIST\n         LA    R2,AREA             -> WORK AREA\n         ST    R2,CTGWKA           SAVE IT IN PARM LIST\n         MVI   CTGTYPE,C'D'        INDICATE 'DATA' REQD\n         MVI   CTGNOFLD,X'03'      NUMBER OF FPLS\n         LA    R2,FLD1             POINT TO CTGFIELD\n         ST    R2,CTGFIELD         SAVE IT IN PARM LIST\n         LA    R2,FLD2             POINT TO CTGFIELD\n         ST    R2,CTGFL2           SAVE IT IN PARM LIST\n         LA    R2,FLD3             POINT TO CTGFIELD\n         ST    R2,CTGFL3           SAVE IT IN PARM LIST\n         SPACE\n         SVC   26                  ISSUE CATALOG SVC\n         LTR   R15,R15             HOW DID WE DO?\n         EJECT\n         MVC   S99TUKY2+6(44),AREA+4    MOVE PAGEDSN INTO ALLOC LIST\n         MVC   S99TUKY4+6(6),AREA+4+44+4  MOVE VOLSER INTO ALLOC LIST\n         LA    R4,DTYP            -> TO DEVICE TYPE TABLE\n         LA    R1,AREA+4+44       -> TO DEVICE TYPE\nTYPLP    EQU   *\n         CLC   0(4,R1),0(R4)      FIND MATCHING TYPE IN TABLE\n         BE    GOTTYP             GOT IT\n         LA    R4,8(R4)           -> NEXT ENTRY IN TABLE\n         B     TYPLP              GO AND TEST IT\nGOTTYP   EQU   *\n         MVC   S99TUKY5+6(4),4(R4)  INDICATE UNIT(XXXX)\n         MVI   S99VERB,X'01'      INDICATE ALLOC DSNAME(XXXXXXXX)\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               ALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         OPEN  PLPA               -> OPEN PLPA PAGE DATASET\n         GET   PLPA               GET THE FIRST RECORD\n         LR    R9,R11             COPY CVT ADDR\n* --------------------------------------------------------------- *\n*            USE CVTOSLV3 TO DETERMINE THE SYSTEM LEVEL.          *\n*            IT MUST BE Z/OS 1.2 OR HBB7705 OR HIGHER.            *\n* --------------------------------------------------------------- *\n*                                 X'4F3' OFF THE CVT IS CVTOSLV3.\n         TM    X'4F3'(R9),X'10'   IS THIS HBB7705 OR MORE?\n         BNO   GOTTIM             NO. USE THE FIRST RECORD.\n         GET   PLPA               GET THE SECOND RECORD\n*                                 AND USE THE TIMESTAMP FROM IT.\nGOTTIM   EQU   *\n         MVC   TSTAMP(8),32(R1)   MOVE DATA TO OUR DATA AREA\n         CLOSE PLPA               CLOSE DATASET\n         MVI   S99VERB,X'02'      INDICATE FREE DDNAME(XXXXXXXX)\n         LA    R1,S99TUPLF        -> TO FREE TEXT UNITS\n         ST    R1,S99TXTPP        AND SAVE IN PARM LIST\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               UNALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         MVC   TZONE(4),CVTTZ     MOVE TIME ZONE OFFSET INTO OUR LIST\n         LA    R1,ARGS            -> TO ARGS FOR TODCN\n         L     R15,=V(TODCN)      ADDRESS OF TIMESTAMP CONVERTER\n         BALR  R14,R15            AND GO THERE\n         MVC   TRET(2),=C'00'\n         PACK  DOUBLE+4(4),TRET(7)\n         LA    R1,PTRS\n         L     R15,=V(JULSUB)\n         BALR  R14,R15\n         LA    R15,MSGDATA\n         MVC   MSGDATA(9),DAYDATE+20 DAY OF WEEK\n         LA    R15,MSGDATA+9\nBACK1    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK1\n         LA    R15,2(,R15)\n         MVC   0(20,R15),DAYDATE   MONTH DAY YEAR\n         LA    R15,20(,R15)\nBACK2    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK2\n         LA    R15,2(,R15)\n         MVI   0(R15),C'('\n         MVC   1(2,R15),TRET+2     YY\n         MVI   3(R15),C'.'\n         MVC   4(3,R15),TRET+4     DDD\n         MVI   7(R15),C')'\n         LA    R15,9(,R15)\n         MVC   0(2,R15),=C'AT'\n         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO\n         MVC   0(8,R15),TRET+7     MOVE TIME IN\n         MVI   2(R15),C':'         MOVE IN A COLON\n         MVI   5(R15),C':'         MOVE IN A COLON\n*        SETMODE 24\n         TPUT  MSG,LMSG            TELL CALLER\n*        SETMODE 31\nRETURN   EQU   *\n         MOREND\nSETPTR   DS    0H\n         LA    R9,SHWASS           -> ASSOC PTRS\n         CLI   SHWTYPE,C'D'        DATA TYPE?\n         BER   R14                 YES, RETURN\n         CLI   SHWTYPE,C'I'        INDEX TYPE?\n         BER   R14                 RETURN\n         LA    R9,SHWASS0          -> TO ASSOC PTRS\n         BR    R14                 RETURN\n         EJECT\nMSG      DC    C'LAST CLPA WAS ON '\nMSGDATA  DC    CL60' '\nLMSG     EQU   *-MSG\nARGS     DC    A(TZONE)\n         DC    A(TSTAMP)\n         DC    X'80',AL3(TRET)\nTZONE    DC    F'0'\nTSTAMP   DC    XL8'FFFFFFFFFFFFFFFF'\nTRET     DC    CL24' '             RETURNED IS YYYYDDDHH.MM.SS.MMMMMM\nDTYP     EQU   *\n         DC    X'3010200F',C'3390'\n         DC    X'3010200E',C'3380'\n         DC    X'3010200C',C'3375'\n         DC    X'3010200B',C'3350'\n         DC    X'30102009',C'3330'\n         DC    X'3010200D',C'3330'   3330-1\nPLPA     DCB   DDNAME=PLPA,DSORG=PS,RECFM=U,BLKSIZE=80,MACRF=GL\nS99RBPTR DC    X'80',AL3(S99RB)       SVC 99 REQUEST BLOCK PTR\nS99RB    DS    0F\nS99RBLN  DC    AL1(20)                LENGTH=20 BYTES\nS99VERB  DC    X'01'                  VERB CODE=01 (DSNAME ALLOC)\nS99FLAG1 DC    X'1000'                DONT USE EXISTING ALLOC\nS99ERROR DC    AL2(0)                 ERROR CODE\nS99INFO  DC    AL2(0)                 INFO  CODE\nS99TXTPP DC    A(S99TUPLA)            POINTER TO TEXT UNIT POINTERS\nS99RSVD1 DC    A(0)                   RESERVED\nS99FLAG2 DC    A(0)                   FLAGS 2\nS99TUPLA DC    A(S99TUKY1)            TEXT UNIT POINTERS\n         DC    A(S99TUKY2)\n         DC    A(S99TUKY3)\n         DC    A(S99TUKY4)\n         DC    X'80',AL3(S99TUKY5)    LAST PARM\nS99TUPLF DC    X'80',AL3(S99TUKY1)    LAST PARM\nS99TUNIT DS    0F\nS99TUKY1 DC    X'0001',X'0001',X'0004',C'PLPA'           DDN=PLPA\nS99TUKY2 DC    X'0002',X'0001',X'002C',CL44'*    '       DSNAME\nS99TUKY3 DC    X'0004',X'0001',X'0001',X'08'             SHR\nS99TUKY4 DC    X'0010',X'0001',X'0006',CL6'VOLSER'       VOLSER\nS99TUKY5 DC    X'0015',X'0001',X'0004',CL4'3390'         DEVTYP\n         DS    0D\nS99LENG  EQU   *-S99RBPTR                 LENGTH\n* WORK AREAS FOR JULSUB ROUTINE FOR DAY DATE CONVERSION\nDOUBLE   DS    D\nINPARM   DC    F'3'\nDAYDATE  DC    CL48' '\nOUTPARM  DC    AL4(16+128)\nWORK     DS    32D\nPTRS     DC    AL4(DOUBLE+4)\n         DC    AL4(INPARM)\n         DC    AL4(DAYDATE)\n         DC    AL4(OUTPARM)\n         DC    X'80',AL3(WORK)\n* WORK AREAS ETC FOR DSN LOOKUP\nMVCDSN1  MVC   PAGEDSN(*-*),0(R1)       EXECUTED MOVE\nPAGEDSN  DC    CL44' '\nACBA     DC    F'0'\nCI       DC    CL3' '\nFLDNM1   DC    CL8' '\nFLDNM2   DC    CL8' '\nFLDNM3   DC    CL8' '\nAREA     DC    H'512'               WORK AREA FOR\n         DC    510C' '              SHOWCAT AND SUBSEQUENTLY\n         DC    2C' '                USED BY OTHER PARTS OF PGM\n         SPACE\n         DS    0F\nCATPL    DC    (LCTGPL)X'00'\nCTGFL2   DC    F'0'\nCTGFL3   DC    F'0'\nFLD1     DC    (LCTGFL)X'00'\nFLD2     DC    (LCTGFL)X'00'\nFLD3     DC    (LCTGFL)X'00'\n         EJECT\n         IEZCTGPL\n         SPACE 5\n         IEZCTGFL\n         SPACE 5\n         IGGSHWPL\n         SPACE 5\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LNKLST": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x10R\\x00\\x14\\x00\\x14\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T10:52:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "AFIELD"}, "text": "LNKLST   MOWSTART\n***********************************************************************\n* PROGRAM LISTS NAMES OF LINKLIST LIBRARIES                           *\n***********************************************************************\n         USING CVT,R2\n         L     R2,16                   A(CVT)\n         L     R3,CVTLLTA              A(LINKLIB LIST)\n         L     R9,4(R3)                NUMBER OF ENTRIES IN LIST\n         LA    R3,8(R3)                PAST FUNNY HEADING GARBAGE\n         SR    R4,R4                   CLEAR IT OUT\nNEXTNAME EQU   *\n         IC    R4,0(R3)                GET LENGTH OF NAME\n         LA    R3,1(R3)                POINT TO START OF NAME\n         TPUT  (R3),(R4)               DISPLAY NAME OF LIBRARY\n         LA    R3,44(R3)               POINT TO NEXT NAME\n         BCT   R9,NEXTNAME             GET NEXT NAME\nFIN      EQU   *\n         MOREND\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LNKLST$": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00H\\x01\\x12\\x03O\\x01\\x12\\x03\\x9f\\x12 \\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-08T12:20:48", "lines": 28, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133(LNKLST)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    LNKLST(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOGTIME": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x00\\x04\\x01\\x12\\x03\\x7f\\x01\\x162\\x9f\\x14\\x02\\x01\\xed\\x01\\x07\\x01\\xad\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "2012-02-06T00:00:00", "modifydate": "2016-11-24T14:02:04", "lines": 493, "newlines": 263, "modlines": 429, "user": "SBGOLOB"}, "text": "         TITLE '*** LOGTIME ***'\n***********************************************************************\n* THIS PROGRAM IS USED TO DETERMINE THE DATE AND TIME OF THIS USER'S  *\n* CURRENT LOGON.  YOU MIGHT WANT TO KNOW HOW LONG YOU HAVE BEEN       *\n* LOGGED ONTO TSO.                                                    *\n***********************************************************************\n* ------------------------------------------------------------------- *\n* -    THIS VERSION OF LOGTIME USES PUTLINE TERMINAL OUTPUT     ----- *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ---------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         L     R4,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* ---------------------------------------------------------------- *\nLOGTIME  MOWSTART\nLOGTIME  AMODE  31\nLOGTIME  RMODE  24\n* ---------------------------------------------------------------- *\n         MVI   BIGLINE-1,X'40'\n         MVC   BIGLINE(L'BIGLINE),BIGLINE-1\n         ICM   R1,15,0(R1)         POINT TO PARAMETER\n         LH    R2,0(,R1)           PICK UP LENGTH\n         BL    COMP4               ONLY ONE PARM\n         SH    R2,=H'4'            SUBTRACT 2 1/2 WDS OF LENGTH\n         SH    R2,2(,R1)           SUBTRACT LENGTH OF COMMAND NAME\n         BZ    NOPARM              NO LENGTH LEFT, NO PARM\n         AH    R1,2(,R1)           SKIP OVER COMMAND NAME\n         LA    R1,4(,R1)           AND 4 BYTES OF LENGTH\nCOMP4    DS    0H\nNOPARM   DS    0H\n* ---------------------------------------------------------------- *\n*        THE LOGON TIME IS IN THE PSCBLTIM FIELD OF THE PSCB,      *\n*        BUT IT IS IN STCK FORMAT (DOUBLEWORD) AND IT HAS TO       *\n*        BE INTERPRETED.  THAT'S WHAT THE TODCN AND JULSUB         *\n*        PROGRAMS ARE FOR.                                         *\n* ---------------------------------------------------------------- *\n         USING CVTMAP,R11\n         L     R11,16              FIND PSCB VIA JSCB\n         L     R11,CVTTCBP         POINT TO NEW TCB WORD\n         L     R11,4(,R11)         POINT TO OLD TCB WORD\n         DROP  R11\n         USING TCB,R11             ADDRESSABILITY TO TCB\n         L     R11,TCBJSCB         GET JSCB ADDRESS\n         DROP  R11\n         USING IEZJSCB,R11         GET ADDRESSABILITY\n         L     R11,JSCBPSCB        GET JSCB ADDRESS\n         USING PSCB,R11\n         MVC   TSTAMP(8),PSCBLTIM  GET LOGON TIME FOR FORMATTING.\n* ---------------------------------------------------------------- *\n*    THE REST OF THIS PROGRAM FORMATS THE LOGON DATE AND TIME.     *\n* ---------------------------------------------------------------- *\n         L     R15,16\n         USING CVT,R15\n         MVC   TZONE(4),CVTTZ     MOVE TIME ZONE OFFSET INTO OUR LIST\n         DROP  R15\n         DROP  R11\n         LA    R1,ARGS            -> TO ARGS FOR TODCN\n         L     R15,=V(TODCN)      ADDRESS OF TIMESTAMP CONVERTER\n         BALR  R14,R15            AND GO THERE\n         MVC   TRET(2),=C'00'\n         PACK  DOUBLE+4(4),TRET(7)\n         LA    R1,PTRS\n         L     R15,=V(JULSUB)\n         BALR  R14,R15\n         LA    R15,MSGDATA\n         MVC   MSGDATA(9),DAYDATE+20 DAY OF WEEK\n         LA    R15,MSGDATA+9\nBACK1    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK1\n         LA    R15,2(,R15)\n         MVC   0(20,R15),DAYDATE   MONTH DAY YEAR\n         LA    R15,20(,R15)\nBACK2    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK2\n         LA    R15,2(,R15)\n         MVI   0(R15),C'('\n         MVC   1(2,R15),TRET+2     YY\n         MVI   3(R15),C'.'\n         MVC   4(3,R15),TRET+4     DDD\n         MVI   7(R15),C')'\n         LA    R15,9(,R15)\n         MVC   0(2,R15),=C'AT'\n         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO\n         MVC   0(8,R15),TRET+7     MOVE TIME IN\n         MVI   2(R15),C':'         MOVE IN A COLON\n         MVI   5(R15),C':'         MOVE IN A COLON\n*        SETMODE 24\n         APUT  MSG,LMSG            TELL CALLER\n*        SETMODE 31\nRETURN   DS    0H\n         MOREND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* --------------------------------------------------------- *\n         EJECT\nSAVE1401 DS    5F                  ONE EXTRA\nHEXSAVE  DS    3F\nSAV4HEX  DC    F'0'\n         DC    C' '\nBIGLINE  DC    CL50' '\nMSG      DC    C'LOGON TIME WAS ON '\nMSGDATA  DC    CL60' '\nLMSG     EQU   *-MSG\nARGS     DC    A(TZONE)\n         DC    A(TSTAMP)\n         DC    X'80',AL3(TRET)\nTZONE    DC    F'0'\nTSTAMP   DC    XL8'FFFFFFFFFFFFFFFF'\nTRET     DC    CL24' '             RETURNED IS YYYYDDDHH.MM.SS.MMMMMM\n* WORK AREAS FOR JULSUB ROUTINE FOR DAY DATE CONVERSION\nDOUBLE   DS    D\nINPARM   DC    F'3'\nDAYDATE  DC    CL48' '\nOUTPARM  DC    AL4(16+128)\nWORK     DS    32D\nPTRS     DC    AL4(DOUBLE+4)\n         DC    AL4(INPARM)\n         DC    AL4(DAYDATE)\n         DC    AL4(OUTPARM)\n         DC    X'80',AL3(WORK)\nAREA     DC    H'512'               WORK AREA FOR\n         DC    510C' '              SHOWCAT AND SUBSEQUENTLY\n         DC    2C' '                USED BY OTHER PARTS OF PGM\n         SPACE\n         DS    0F\n         EJECT\n         IKJTCB\n         SPACE 5\n         IEZJSCB\n         SPACE 5\n         IKJPSCB\n         SPACE 5\n         CVT   DSECT=YES\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOGTIME$": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x10\\x01\\x12\\x03?\\x01\\x162\\x9f\\x14 \\x00 \\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2012-02-02T00:00:00", "modifydate": "2016-11-24T14:20:10", "lines": 32, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.AFIELD.MACROS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE133(LOGTIME)\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE133(JULSUB)\n//         DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE133(TODCN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n ENTRY   LOGTIME\n INCLUDE OBJECT\n SETSSI  CB493133\n SETCODE AC(0)\n NAME    LOGTIME(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACROS": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x12!\\x00\\xec\\x00\\xec\\x00\\x00\\xd6\\xd3\\xc4@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T12:21:00", "lines": 236, "newlines": 236, "modlines": 0, "user": "OLD"}, "text": "./ ADD NAME=MOWSTART\n         MACRO\n&NAME    MOWSTART &SAVE=(14,12),&T=,&IDENT=*,&BASE=12,&EQU=YES,&RENT=, *\n               &R1=R1,&R2=R2,&R3=R3,&R4=R4,&R5=R5,&R6=R6,&RB=RB,       *\n               &R7=R7,&R8=R8,&R9=R9,&R10=R10,&R11=R11,&R12=R12,        *\n               &R13=R13,&R14=R14,&R15=R15,&R0=R0,&AREA=SAVEAREA,       *\n               &SP=0,&SAREA=,&STOR=RES\n.* CHANGED BY RMF SO PARM CAN BE PASSED IN R0\n.* CHANGED BY ACF TO ADD STOR TO CONTROL WHERE GETMAIN OCCURS. USE RU\n         GBLB  &NREN,&NSAR\n         GBLC  &MOWSECT,&SUBP,&ARNAME,&RBASE\n         LCLA  &WK\n         LCLC  &A,&B,&TC\n         LCLC  &R0L,&R1L,&R2L,&R3L,&R4L,&R5L,&R6L,&R7L,&R8L,&R9L,&R10L\n         LCLC  &R11L,&R12L,&R13L,&R14L,&R15L\n         AIF   ('&NAME' NE '').OK\n         MNOTE 16,'THERE MUST BE AN ENTRY IN THE NAME FIELD'\n         MEXIT\n.OK      ANOP\n&NREN    SETB  ('&RENT' EQ 'NO')\n&NSAR    SETB  ('&SAREA' EQ 'NO')\n&MOWSECT SETC  '&NAME'\n&RBASE   SETC  '&RB'\n&NAME    CSECT\n         USING *,&BASE\n&TC      SETC  '&T'\n         AIF   ((&NREN) OR (&NSAR)).SAVO\n&A       SETC  '&SAVE(1)'\n         AIF   (N'&SAVE EQ 1).SAV1\n         AIF   (N'&SAVE NE 2).SAVE\n&B       SETC  '&SAVE(2)'\n.SAV1    AIF   (&A GE 3).NOTALL\n         AIF   ('&A' EQ '0').CHK1\n         AIF   (N'&SAVE EQ 2).SET0\n&B       SETC  '&A'\n         AGO   .SET0\n.CHK1    AIF   (N'&SAVE EQ 1).SET1\n         AIF   ('&B' NE '0').SET0\n.SET1    ANOP\n&B       SETC  '1'\n.SET0    ANOP\n         AIF   ('&TC' EQ 'T').SET14\n         SAVE  (0,&B),&TC,&IDENT\n         AGO   .SAVT\n.SET14   SAVE  (14,&B),,&IDENT\n         AGO   .SAVT\n.NOTALL  AIF   (&A GE 14).TEST2\n         SAVE  (0,1),&TC,&IDENT\n         SAVE  &SAVE\n         AGO   .SAVT\n.TEST2   AIF   (N'&SAVE EQ 1).SB1\n         AIF   ((&B GE 1) AND (&B LE 12)).SAVE\n.SB1     ANOP\n&B       SETC  '1'\n.SAVE    AIF   ('&B' EQ '').SAVO\n         SAVE  (&SAVE(1),&B),&TC,&IDENT\n         AGO   .SAVT\n.SAVO    SAVE  &SAVE,&TC,&IDENT\n.SAVT    ANOP\n         LR    &BASE,15\n         AIF   (&NSAR).CHKEQU\n         AIF   ('&RENT' EQ 'NO').NORENT\n&SUBP    SETC  '&SP'\n         GETMAIN RU,LV=MOWWORKL,SP=&SUBP,LOC=&STOR\n         ST    1,8(13)\n         ST    13,4(1)\n         LM    0,1,20(13)\n         L     13,8(13)\n         USING MOWWORK,13\nMOWWORK  DSECT\n         DS    18A\n&NAME    CSECT\n         AGO   .CHKEQU\n.NORENT  ST    13,&AREA+4\n         AIF   (&BASE EQ 3).SET4\n&WK      SETA  3\n         AGO   .LR\n.SET4    ANOP\n&WK      SETA  4\n.LR      LR    &WK,13\n         CNOP  0,4\n         BAL   13,*+76\n&ARNAME  SETC  '&AREA'\n&ARNAME  DC    18F'0'\n         ST    13,8(&WK)\n.CHKEQU  AIF   ('&EQU' NE 'YES').NOEQU\n&R0L     SETC  '&R0'(1,8)\n&R1L     SETC  '&R1'(1,8)\n&R2L     SETC  '&R2'(1,8)\n&R3L     SETC  '&R3'(1,8)\n&R4L     SETC  '&R4'(1,8)\n&R5L     SETC  '&R5'(1,8)\n&R6L     SETC  '&R6'(1,8)\n&R7L     SETC  '&R7'(1,8)\n&R8L     SETC  '&R8'(1,8)\n&R9L     SETC  '&R9'(1,8)\n&R10L    SETC  '&R10'(1,8)\n&R11L    SETC  '&R11'(1,8)\n&R12L    SETC  '&R12'(1,8)\n&R13L    SETC  '&R13'(1,8)\n&R14L    SETC  '&R14'(1,8)\n&R15L    SETC  '&R15'(1,8)\n         AIF   (&BASE NE 12).N12\n&R12L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N12     AIF   (&BASE NE  2).N2\n&R2L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N2      AIF   (&BASE NE  3).N3\n&R3L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N3      AIF   (&BASE NE  4).N4\n&R4L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N4      AIF   (&BASE NE  5).N5\n&R5L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N5      AIF   (&BASE NE  6).N6\n&R6L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N6      AIF   (&BASE NE  7).N7\n&R7L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N7      AIF   (&BASE NE  8).N8\n&R8L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N8      AIF   (&BASE NE  9).N9\n&R9L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N9      AIF   (&BASE NE 10).N10\n&R10L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N10     AIF   (&BASE NE 11).N11\n&R11L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N11     AIF   (&BASE NE 13).N13\n&R13L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N13     AIF   (&BASE NE 14).N14\n&R14L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N14     AIF   (&BASE NE 15).N15\n&R15L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N15     AIF   (&BASE NE  0).N0\n&R0L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N0      AIF   (&BASE NE  1).EQUS\n&R1L     SETC '&RB'(1,8)\n.EQUS    ANOP\n&R0L     EQU   0\n&R1L     EQU   1\n&R2L     EQU   2\n&R3L     EQU   3\n&R4L     EQU   4\n&R5L     EQU   5\n&R6L     EQU   6\n&R7L     EQU   7\n&R8L     EQU   8\n&R9L     EQU   9\n&R10L    EQU   10\n&R11L    EQU   11\n&R12L    EQU   12\n&R13L    EQU   13\n&R14L    EQU   14\n&R15L    EQU   15\n.NOEQU   ANOP\n         MEND\n./ ADD NAME=MOREND\n         MACRO\n&NAME    MOREND &RENT=,&RC=0,&SP=,&SAVE=(0)\n.* CHANGED BY RMF SO PARM CAN BE RETURNED IN R1\n.* CHANGED BY ACF SO RETURN CODE CAN BE IN REG OR LITERAL 19 FEB 87\n.* CHANGED BY ACF TO USE RU FORM OF FREEMAIN\n         LCLC  &A,&B\n         GBLC  &MOWSECT,&SUBP,&ARNAME\n         GBLB  &NREN,&NSAR\n         AIF   ('&SYSECT' EQ '&MOWSECT').CHKR\n&MOWSECT CSECT\n.CHKR    ANOP\n&NAME    DS    0H\n&NREN    SETB  (('&RENT' EQ 'NO') OR &NREN)\n         AIF   (&NSAR).RETR\n         AIF   (&NREN).NORENT\n         AIF   (('&SAVE(1)' NE '1') AND ('&SAVE(2)' NE '1')).NOT1\n         LR    14,1\n         LR    1,13\n         AGO   .L\n.NOT1    ANOP\n         LR    1,13\n.L       L     13,4(1)\n         AIF   (('&SAVE(1)' NE '1') AND ('&SAVE(2)' NE '1')).NS1\n         ST    14,24(13)\n.NS1     AIF   (('&SAVE(1)' NE '0') AND ('&SAVE(2)' NE '0')).NS2\n         ST    0,20(13)\n.* * * * * * * *\n.NS2     AIF   ('&RC'(1,1) EQ '(').RCREG  IF IN RX FORM  ..\n         AGO   .NS15\n.RCREG   ANOP                             ELSE, IN A REG ..\n         AIF   ('&RC' EQ '(15)').GOTRC    IF NOT REG 15..\n         AIF   ('&RC' EQ '(R15)').GOTRC   IF NOT REG 15..\n         LR    15,&RC                     LOAD R15 WITH CODE\n.GOTRC   ANOP\n.* * * * * * * *\n         ST    15,16(13)\n.NS15    ANOP\n         AIF   ('&SUBP' NE '').N0\n&SUBP    SETC  '0'\n.N0      AIF   (T'&SP EQ 'O').FR1\n&SUBP    SETC  '&SP'\n.FR1     FREEMAIN RU,LV=MOWWORKL,A=(1),SP=&SUBP\n         AIF   ('&RC' EQ '(15)').R15\n         AIF   ('&RC' EQ '(R15)').R15\n.* * * * * * * *\n         AIF   ('&RC'(1,1) EQ '(').RCREG1 IF IN RX FORM  ..\n         AGO   .NS15A\n.RCREG1  ANOP                             ELSE, IN A REG ..\n         LR    15,&RC                     LOAD R15 WITH CODE\n         AGO   .R15\n.NS15A   ANOP\n.* * * * * * * *\n         RETURN (14,12),T,RC=&RC\n         AGO   .DUMM\n.R15     ANOP\n         RETURN (14,12),T\n.DUMM    ANOP\nMOWWORK  DSECT\nMOWWORKL EQU   *-MOWWORK\n&SYSECT  CSECT\n         AGO   .LTORG\n.NORENT  ANOP\n         L     13,&ARNAME.+4\n.RETR    L     14,12(13)\n         RETURN (2,12),T,RC=&RC\n.LTORG   LTORG\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MOREND": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\t\\x04\\x00D\\x00D\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T09:04:26", "lines": 68, "newlines": 68, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    MOREND &RENT=,&RC=0,&SP=,&SAVE=(0)\n.* CHANGED BY RMF SO PARM CAN BE RETURNED IN R1\n.* CHANGED BY ACF SO RETURN CODE CAN BE IN REG OR LITERAL 19 FEB 87\n.* CHANGED BY ACF TO USE RU FORM OF FREEMAIN\n         LCLC  &A,&B\n         GBLC  &MOWSECT,&SUBP,&ARNAME\n         GBLB  &NREN,&NSAR\n         AIF   ('&SYSECT' EQ '&MOWSECT').CHKR\n&MOWSECT CSECT\n.CHKR    ANOP\n&NAME    DS    0H\n&NREN    SETB  (('&RENT' EQ 'NO') OR &NREN)\n         AIF   (&NSAR).RETR\n         AIF   (&NREN).NORENT\n         AIF   (('&SAVE(1)' NE '1') AND ('&SAVE(2)' NE '1')).NOT1\n         LR    14,1\n         LR    1,13\n         AGO   .L\n.NOT1    ANOP\n         LR    1,13\n.L       L     13,4(1)\n         AIF   (('&SAVE(1)' NE '1') AND ('&SAVE(2)' NE '1')).NS1\n         ST    14,24(13)\n.NS1     AIF   (('&SAVE(1)' NE '0') AND ('&SAVE(2)' NE '0')).NS2\n         ST    0,20(13)\n.* * * * * * * *\n.NS2     AIF   ('&RC'(1,1) EQ '(').RCREG  IF IN RX FORM  ..\n         AGO   .NS15\n.RCREG   ANOP                             ELSE, IN A REG ..\n         AIF   ('&RC' EQ '(15)').GOTRC    IF NOT REG 15..\n         AIF   ('&RC' EQ '(R15)').GOTRC   IF NOT REG 15..\n         LR    15,&RC                     LOAD R15 WITH CODE\n.GOTRC   ANOP\n.* * * * * * * *\n         ST    15,16(13)\n.NS15    ANOP\n         AIF   ('&SUBP' NE '').N0\n&SUBP    SETC  '0'\n.N0      AIF   (T'&SP EQ 'O').FR1\n&SUBP    SETC  '&SP'\n.FR1     FREEMAIN RU,LV=MOWWORKL,A=(1),SP=&SUBP\n         AIF   ('&RC' EQ '(15)').R15\n         AIF   ('&RC' EQ '(R15)').R15\n.* * * * * * * *\n         AIF   ('&RC'(1,1) EQ '(').RCREG1 IF IN RX FORM  ..\n         AGO   .NS15A\n.RCREG1  ANOP                             ELSE, IN A REG ..\n         LR    15,&RC                     LOAD R15 WITH CODE\n         AGO   .R15\n.NS15A   ANOP\n.* * * * * * * *\n         RETURN (14,12),T,RC=&RC\n         AGO   .DUMM\n.R15     ANOP\n         RETURN (14,12),T\n.DUMM    ANOP\nMOWWORK  DSECT\nMOWWORKL EQU   *-MOWWORK\n&SYSECT  CSECT\n         AGO   .LTORG\n.NORENT  ANOP\n         L     13,&ARNAME.+4\n.RETR    L     14,12(13)\n         RETURN (2,12),T,RC=&RC\n.LTORG   LTORG\n         DS    0H                 FORCE TO HALFWORD BOUNDARY\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MOWSTART": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00A\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\t\\x03\\x00\\xaa\\x00\\xaa\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T09:03:41", "lines": 170, "newlines": 170, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    MOWSTART &SAVE=(14,12),&T=,&IDENT=*,&BASE=12,&EQU=YES,&RENT=, *\n               &R1=R1,&R2=R2,&R3=R3,&R4=R4,&R5=R5,&R6=R6,&RB=RB,       *\n               &R7=R7,&R8=R8,&R9=R9,&R10=R10,&R11=R11,&R12=R12,        *\n               &R13=R13,&R14=R14,&R15=R15,&R0=R0,&AREA=SAVEAREA,       *\n               &SP=0,&SAREA=,&STOR=RES\n.* CHANGED BY RMF SO PARM CAN BE PASSED IN R0\n.* CHANGED BY ACF TO ADD STOR TO CONTROL WHERE GETMAIN OCCURS. USE RU\n         GBLB  &NREN,&NSAR\n         GBLC  &MOWSECT,&SUBP,&ARNAME,&RBASE\n         LCLA  &WK\n         LCLC  &A,&B,&TC\n         LCLC  &R0L,&R1L,&R2L,&R3L,&R4L,&R5L,&R6L,&R7L,&R8L,&R9L,&R10L\n         LCLC  &R11L,&R12L,&R13L,&R14L,&R15L\n         AIF   ('&NAME' NE '').OK\n         MNOTE 16,'THERE MUST BE AN ENTRY IN THE NAME FIELD'\n         MEXIT\n.OK      ANOP\n&NREN    SETB  ('&RENT' EQ 'NO')\n&NSAR    SETB  ('&SAREA' EQ 'NO')\n&MOWSECT SETC  '&NAME'\n&RBASE   SETC  '&RB'\n&IDENTD  SETC  '&NAME._&SYSDATE._&SYSTIME'\n&NAME    CSECT\n         USING *,&BASE\n&TC      SETC  '&T'\n         AIF   ((&NREN) OR (&NSAR)).SAVO\n&A       SETC  '&SAVE(1)'\n         AIF   (N'&SAVE EQ 1).SAV1\n         AIF   (N'&SAVE NE 2).SAVE\n&B       SETC  '&SAVE(2)'\n.SAV1    AIF   (&A GE 3).NOTALL\n         AIF   ('&A' EQ '0').CHK1\n         AIF   (N'&SAVE EQ 2).SET0\n&B       SETC  '&A'\n         AGO   .SET0\n.CHK1    AIF   (N'&SAVE EQ 1).SET1\n         AIF   ('&B' NE '0').SET0\n.SET1    ANOP\n&B       SETC  '1'\n.SET0    ANOP\n         AIF   ('&TC' EQ 'T').SET14\n         SAVE  (0,&B),&TC,&IDENTD\n         AGO   .SAVT\n.SET14   SAVE  (14,&B),,&IDENTD\n         AGO   .SAVT\n.NOTALL  AIF   (&A GE 14).TEST2\n         SAVE  (0,1),&TC,&IDENTD\n         SAVE  &SAVE\n         AGO   .SAVT\n.TEST2   AIF   (N'&SAVE EQ 1).SB1\n         AIF   ((&B GE 1) AND (&B LE 12)).SAVE\n.SB1     ANOP\n&B       SETC  '1'\n.SAVE    AIF   ('&B' EQ '').SAVO\n         SAVE  (&SAVE(1),&B),&TC,&IDENTD\n         AGO   .SAVT\n.SAVO    SAVE  &SAVE,&TC,&IDENTD\n.SAVT    ANOP\n         LR    &BASE,15\n.*       B     *+4+16\n.*       DC    CL16'&SYSDATE._&SYSTIME.'\n         AIF   (&NSAR).CHKEQU\n         AIF   ('&RENT' EQ 'NO').NORENT\n&SUBP    SETC  '&SP'\n         GETMAIN RU,LV=MOWWORKL,SP=&SUBP,LOC=&STOR\n         ST    1,8(13)\n         ST    13,4(1)\n         LM    0,1,20(13)\n         L     13,8(13)\n         USING MOWWORK,13\nMOWWORK  DSECT\n         DS    18A\n&NAME    CSECT\n         AGO   .CHKEQU\n.NORENT  ST    13,&AREA+4\n         AIF   (&BASE EQ 3).SET4\n&WK      SETA  3\n         AGO   .LR\n.SET4    ANOP\n&WK      SETA  4\n.LR      LR    &WK,13\n         CNOP  0,4\n         BAL   13,*+76\n&ARNAME  SETC  '&AREA'\n&ARNAME  DC    18F'0'\n         ST    13,8(&WK)\n.CHKEQU  AIF   ('&EQU' NE 'YES').NOEQU\n&R0L     SETC  '&R0'(1,8)\n&R1L     SETC  '&R1'(1,8)\n&R2L     SETC  '&R2'(1,8)\n&R3L     SETC  '&R3'(1,8)\n&R4L     SETC  '&R4'(1,8)\n&R5L     SETC  '&R5'(1,8)\n&R6L     SETC  '&R6'(1,8)\n&R7L     SETC  '&R7'(1,8)\n&R8L     SETC  '&R8'(1,8)\n&R9L     SETC  '&R9'(1,8)\n&R10L    SETC  '&R10'(1,8)\n&R11L    SETC  '&R11'(1,8)\n&R12L    SETC  '&R12'(1,8)\n&R13L    SETC  '&R13'(1,8)\n&R14L    SETC  '&R14'(1,8)\n&R15L    SETC  '&R15'(1,8)\n         AIF   (&BASE NE 12).N12\n&R12L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N12     AIF   (&BASE NE  2).N2\n&R2L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N2      AIF   (&BASE NE  3).N3\n&R3L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N3      AIF   (&BASE NE  4).N4\n&R4L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N4      AIF   (&BASE NE  5).N5\n&R5L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N5      AIF   (&BASE NE  6).N6\n&R6L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N6      AIF   (&BASE NE  7).N7\n&R7L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N7      AIF   (&BASE NE  8).N8\n&R8L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N8      AIF   (&BASE NE  9).N9\n&R9L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N9      AIF   (&BASE NE 10).N10\n&R10L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N10     AIF   (&BASE NE 11).N11\n&R11L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N11     AIF   (&BASE NE 13).N13\n&R13L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N13     AIF   (&BASE NE 14).N14\n&R14L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N14     AIF   (&BASE NE 15).N15\n&R15L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N15     AIF   (&BASE NE  0).N0\n&R0L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N0      AIF   (&BASE NE  1).EQUS\n&R1L     SETC '&RB'(1,8)\n.EQUS    ANOP\n&R0L     EQU   0\n&R1L     EQU   1\n&R2L     EQU   2\n&R3L     EQU   3\n&R4L     EQU   4\n&R5L     EQU   5\n&R6L     EQU   6\n&R7L     EQU   7\n&R8L     EQU   8\n&R9L     EQU   9\n&R10L    EQU   10\n&R11L    EQU   11\n&R12L    EQU   12\n&R13L    EQU   13\n&R14L    EQU   14\n&R15L    EQU   15\n.NOEQU   ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFDS": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x10R\\x00$\\x00$\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T10:52:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "AFIELD"}, "text": "RACFDS   MOWSTART\nMOWWORK  DSECT\nMSG1     DC    CL80' '\nRACFDS   CSECT\n***********************************************************************\n* PROGRAM LISTS INFORMATION FROM THE RACF CVT                         *\n***********************************************************************\n         USING CVT,R2\n         L     R2,16                      POINT TO CVT\n         USING RCVT,R3\n         L     R3,CVTRAC                  POINT TO RACF CVT\n         LTR   R3,R3                      CHECK IT\n         BZ    FIN                        NOT SET\nPUTNAME  EQU   *\n         TPUT  RCVTDSN,L'RCVTDSN          DISPLAY RACF DATASET NAME\n         MVI   MSG1,X'40'                 A BLANK\n         MVC   MSG1+1(79),MSG1            BLANK IT OUT\n         LA    R4,MSG1                    POINT TO MESSAGE AREA\n         TM    RCVTSTAT,RCVTRNA           IS IT ACTIVE\n         BZ    T1\n         MVC   0(12,R4),=C'NOT ACTIVE, '  MESSAGE TO SAY ITS NOT ACTIVE\n         LA    R4,12(R4)                  NEXT MESSAGE SLOT\nT1       EQU   *\n         TM    RCVTSTAT,RCVTNLS           BYPASS STATS\n         BZ    T2\n         MVC   0(14,R4),=C'BYPASS STATS, '\n         LA    R4,14(R4)\nT2       EQU   *\n         BCTR  R4,0\n         MVI   0(R4),X'40'\n         TPUT  MSG1,L'MSG1\nFIN      EQU   *\n         MOREND\n         ICHPRCVT\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFDS$": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00R\\x01\\x12\\x03O\\x01\\x12\\x03\\x9f\\x110\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-08T11:30:52", "lines": 28, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133(RACFDS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    RACFDS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETMODE": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03'\\x8f\\x01\\x03'\\x8f\\x00D\\x00\\x16\\x00\\x16\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-05T00:00:00", "modifydate": "2003-10-05T00:44:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&LABEL   SETMODE &AM\n.******************************************************************\n.* MACRO TO CHANGE ADDRESSING MODE FROM 31 BIT TO 24 BIT AND BACK *\n.* AGAIN. SEE SPL 31 BIT ADDRESSING.                              *\n.******************************************************************\n         AIF   ('&AM' NE '').OK\n         MNOTE 5,'MISSING OPERAND - 24 OR 31 MUST BE SPECIFIED'\n         MEXIT\n.OK      AIF   ('&LABEL' EQ '').B1\n&LABEL   EQU   *\n.B1      ANOP\n         AIF   ('&AM' EQ '31').AM31\n         LA    15,*+6                RESET TO 24-BIT\n         BSM   0,15                  ADDRESSING MODE\n         AGO   .END\n.AM31    ANOP\n         LA    15,*+10               ADDRESS PAST THE BSM\n         O     15,=A(X'80000000')    INDICATE &\n         BSM   0,15                  GET INTO 31-BIT ADDRESSING MODE\n.END     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMFDS": {"ttr": 3085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x117\\x00\\xb9\\x00\\xb9\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T11:37:34", "lines": 185, "newlines": 185, "modlines": 0, "user": "AFIELD"}, "text": "SMFDS    MOWSTART\nSMFDS    AMODE 31\nSMFDS    RMODE 24\n**********************************************************************\n* PROGRAM EMULATES THE OPERATOR D SMF COMMAND FOR TSO USERS.         *\n* ALSO IF PARM IS 'CA7', IS USED TO DEMAND A DUMP JOB FOR ANY DATA-  *\n* SETS FOUND WHICH HAVE THE DUMP REQUIRED BIT ON.                    *\n* GOES IN FIELD.TEST.LOAD                                            *\n**********************************************************************\n         L     R1,0(R1)             PARM POINTER\n         LH    R2,0(R1)             GET PARM LENGTH\n         LTR   R2,R2                ANY LENGTH?\n         BZ    TSOONLY              NO\n         CLC   2(3,R1),=C'CA7'      PARM SAYS CA7?\n         BNE   TSOONLY              NO, SO JUST DO TSO\n         OI    FLAG,CA7OPT          SET FLAG FOR CA7 OPTION PRESENT\nTSOONLY  EQU   *\n         SR    R11,R11              USE THIS REG FOR A RETURN CODE\n         L     R4,16                CVT\n         LR    R6,R4                COPY ADDRESS\n         S     R6,=F'32'            BACK UP TO CVTPRODI (HBB5510)\n         CLI   3(R6),C'4'           IS THIS REL 4?\n         BNE   *+8                  NO\n         OI    FLAG,MVSREL4         SET MVS REL 4 FLAG\n         CLI   3(R6),C'5'           IS THIS REL 5?\n         BNE   *+8                  NO\n         OI    FLAG,MVSREL5         SET MVS REL 5 FLAG\n         CLI   3(R6),C'6'           IS THIS REL 6?\n         BNE   *+8                  NO\n         OI    FLAG,MVSREL5         SET MVS REL 6 FLAG\n         CLI   3(R6),C'7'           IS THIS REL 7\n         BNE   *+8                  NO\n         OI    FLAG,MVSREL5         SET MVS REL 7 FLAG\n         OI    FLAG,MVSREL5         SET MVS REL 5/6/7 FLAG\n         L     R6,196(0,R4)         CVTSMCA\n         USING SMCABASE,R6\n         TM    SMCAMISC,SMCAUSER    SMF RECORDING REQUESTED\n         BO    SMFIN                YES, SKIP MESSAGE\n         TPUT  SMFOFF,80                 TELL USER SMF IS INACTIVE\n         B     FIN                       AND QUIT\nSMFIN    EQU   *\n         L     R5,SMCALRDS               A(LAST RDS).\n         L     R4,SMCAFRDS               A(1ST RDS).\n         USING IEEMBRDS,R4     RDS IS DESCRIBED IN FICHE FOR IFADSMF.\n         L     R1,SMCAACTP               A(ACT)\n         USING IEEMBACT,R1\n         MVC   SMFTITLE+75(2),ACTMEMID   PARMLIB MEMBER SUFFIX\n         TPUT  SMFTITLE,80               DISPLAY TITLE RECORD\nMORSMFDS EQU   *\n         LA    R14,10                    DSN LENGTH MVS REL 4\n         TM    FLAG,MVSREL4              MVS REL 4?\n         BO    *+8                       SKIP THE IC INSTR\n         IC    R14,RDSNLEN               GET LENGTH OF DSN\n         BCTR  R14,0                     REDUCE FOR EXECUTED MOVE\n         EX    R14,MVCRDSNM              PUT SMF DSNAME IN MESSAGE\n         MVC   SMFDMND+33(1),SMFANS+8    GET LAST CHAR FROM SMF DSN\n         TM    FLAG,MVSREL4              MVS REL 4?\n         BZ    *+10\n         MVC   SMFVOL(6),RDS4VOL         SMF DATASET VOLSER\n         TM    FLAG,MVSREL5              MVS REL 5?\n         BZ    *+10\n         MVC   SMFVOL(6),RDS5VOL         SMF DATASET VOLSER\n         MVC   SMFSTAT(9),=C'ALTERNATE'\n         TM    RDSFLAG,X'04'             DS ACTIVE?\n         BO    *+10                      NO\n         MVC   SMFSTAT(9),=C'ACTIVE   '\n         TM    RDSFLAG,X'08'             DUMP REQD?\n         BZ    NODUMP                    NO\n         MVC   SMFSTAT(9),=C'DUMP REQD'\n         IC    R11,SMFANS+8              GET MAN NUMBER (1, 2, 3)\n         N     R11,=X'0000000F'          MAKE IT NUMERIC ONLY\n         TM    FLAG,CA7OPT               IS THIS FLAG ON?\n         BZ    NODUMP                    NO, SO DON'T TRY TO DEMAND IT\n* AT IPL IEFU29 DOES A DEMAND, CHECK IF THIS IS CLOSE TO AN IPL\n* AND IF SO DON'T DO THE DEMAND.\n*        L     R2,SMCAITME          GET IPL TIME FROM SMCA\n*        A     R2,=A(15*6000)       ADD 15 MINUTES * 60 1/100 SECONDS\n*        TIME  BIN                  GET CURRENT TIME\n*        CR    R0,R2                WITHIN 15 MINS OF IPL?\n*        BL    FIN                  YES - DON'T DEMAND SMF DUMP JOB\n         LA    R1,=A(CA7PARM)       POINT TO PARM LIST\n         LINK  EP=U7SVC             AND DEMAND IN JOB\n         B     FIN                  AND LEAVE\nNODUMP   EQU   *\n         TM    RDSFLAG,X'02'        CLOSE PENDING?\n         BZ    *+10                 NO\n         MVC   SMFSTAT(9),=C'CLOSE PDG'\n         TM    RDSFLAG+1,X'60'      I/O ERROR\n         BZ    *+10                 NO\n         MVC   SMFSTAT(9),=C'I/O ERROR'\n         SR    R14,R14              CLEAR FOR DIVIDE\n         TM    FLAG,MVSREL4         MVS REL 4?\n         BZ    *+8                  NO\n         L     R15,RDS4NXT          SMF DS NEXT BLOCK\n         TM    FLAG,MVSREL5         MVS REL 5?\n         BZ    *+8                  NO\n         L     R15,RDS5NXT          SMF DS NEXT BLOCK\n         BCTR  R15,0\n         CVD   R15,DOUBLEB\n         M     R14,=F'100'\n         TM    FLAG,MVSREL4         MVS REL 4?\n         BZ    *+8                  NO\n         L     R1,RDS4CAP           SMF DS CAPACITY\n         TM    FLAG,MVSREL5         MVS REL 5?\n         BZ    *+8                  NO\n         L     R1,RDS5CAP           SMF DS CAPACITY\n         CVD   R1,DOUBLEA\n         DR    R14,R1               PERCENT FULL\n         CVD   R15,DOUBLEC\n         MVC   SMFANSOA(10),=X'40206B2020206B202120'\n         ED    SMFANSOA(10),DOUBLEA+4\n         MVC   SMFANSOB(10),=X'40206B2020206B202120'\n         ED    SMFANSOB(10),DOUBLEB+4\n         MVC   SMFANSOC(4),=X'40202120'\n         ED    SMFANSOC(4),DOUBLEC+6\n         TPUT  SMFANS,80\n         L     R4,RDSNEXT           NEXT RDS ON CHAIN\n         CR    R5,R4                END OF CHAIN YET?\n         BNE   MORSMFDS             NO, MORE DATASETS TO LOOK AT\nFIN      EQU   *\n         MOREND RC=(11)\nDOUBLEA  DC    D'0'\nDOUBLEB  DC    D'0'\nDOUBLEC  DC    D'0'\nMVCRDSNM MVC   SMFANS(*-*),RDSNAME     MOVE SMF DATASET NAME\nSMFOFF   DC    CL80'SMF RECORDING INACTIVE'\nSMFTITLE DC    CL80'SMF DATASET     VOLSER --STATE-- BLKS ALLOC   BLK U*\n               SED % FULL. MEM = SMFPRMXX'\n*                   0123456789 123456789 123456789 123456789 123456789\n*              123456789 123456789 123456789\nSMFANS   DS    0CL80' '\n         DC    CL16'SYS1.MAN?       '\nSMFVOL   DC    CL07'VOLSER '\nSMFSTAT  DC    CL10'ACTIVE'\nSMFANSOA DC    CL11' X,XXX,XXX '       BLKS ALLOCATED'\nSMFANSOB DC    CL11' X,XXX,XXX '       BLKS USED\nSMFANSOC DC    CL05' XXX '             % FULL\n         DC    CL(80-(*-SMFANS))' '\n         DS    0H\nCA7PARM  DC    AL2(CA7PARML)\n*                0123456789 123456789 123456789 123456789\nSMFDMND  DC    C'/LOGON SVCUSER;DEMAND,JOB=SMFDUMP?;/LOGOFF'\nCA7PARML EQU   *-SMFDMND\nFLAG     DC    X'00'\nCA7OPT   EQU   X'80'\nMVSREL4  EQU   X'40'         MVS RELEASE 4\nMVSREL5  EQU   X'20'         MVS RELEASE 5\n         SPACE\nIEEMBACT DSECT               SMF ACT - DERIVED FROM FICHE OF IEEMB833\nACTID    DC    CL4'ACT '     EYECATCHER - ACT\nACTSRCP  DC    XL4'00'       A(INPUT TO PARSE)\nACTMSDCB DC    XL4'00'       A(MESSAGE DATASET DCB)\nACTPLDCB DC    XL4'00'       A(PARMLIB DCB)\nACTOCB   DC    XL4'00'       A(1ST OCB ON CHAIN)\nACTDSNAM DC    XL4'00'\nACTOCBPL DC    XL4'00'       A(OCB BUFFER POOL)\nACTCONID DC    CL4' '        CONSOLE ID\nACTAREA  DC    XL1'00'       CONSOLE AREA ID\nACTALTCN DC    CL4' '        ALTERNATE CONSOLE ID\nACTALTAR DC    XL1'00'       ALTERNATE CONSOLE AREA\nACTRSVD1 DC    XL2'00'\nACTOPTAB DC    XL4'00'       A(OPTION TABLE)\nACTFLAGS DC    XL2'00'\nACTMEMID DC    CL2'00'       SMFPRMXX PARMLIB MEMBER SUFFIX\n         SPACE\nIEEMBRDS DSECT               SMF RECORDING DATASET DSECT\nRDSID    DS    CL4'RDS '     EYECATCHER\nRDSNEXT  DS    F             POINTER TO NEXT RDS\n         DS    F             POINTER TO PREVIOUS RDS?\nRDSFLAG  DS    3X'00'        FLAGS\nRDSNLEN  DS    X'00'         LENGTH OF RDSNAME\nRDSNAME  DS    CL44          DATASET NAME\nRDS5VOL  DS    CL6           VOLSER\n         DS    H'0'          ?\nRDS5DDN  DS    CL8           DDNAME?\nRDS5CAP  DS    F             DATASET CAPACITY\nRDS5NXT  DS    F\n         ORG   RDSNAME+10\nRDS4VOL  DS    CL6           VOLSER\nRDS4DDN  DS    CL8           DDNAME?\nRDS4CAP  DS    F             DATASET CAPACITY\nRDS4NXT  DS    F\n         SPACE\n         IEESMCA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMFDS$": {"ttr": 3089, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00B\\x01\\x12\\x03O\\x01\\x12\\x03\\x9f\\x11\\x17\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-08T11:17:42", "lines": 28, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133(SMFDS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    SMFDS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCTAB": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00#\\x01\\x12\\x03\\x9f\\x01\\x13\\x01?\\x126\\x00\\xea\\x00\\xb2\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2013-01-13T12:36:23", "lines": 234, "newlines": 178, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE 'SVCTAB - DISPLAY THE SVC TABLE '\n***********************************************************************\n*  THIS PROGRAM LOCATES THE SVC TABLE AND PRINTS OUT THE ATTRIBUTES   *\n*  OF THE SVCS.                                                       *\n***********************************************************************\n**  CHANGE LOG:                                                      **\n**    2013/01/13 - POINT OUT MISSING SVC ADDRESS BY FLAGGING AS      **\n**                 IGCERROR.  PRINT IGCERROR ADDRESS AT HEADING.     **\n**                 THIS MAKES IT EASIER TO SPOT MISSING SVC'S. (SG)  **\n**                 USE NUCLKUP TO GET EP ADDRESS OF IGCERROR AND     **\n**                 COMPARE SVC TABLE ENTRY ADDRESSES WITH IT.        **\n**                                                                   **\n**                 CHANGED PROGRAM TO USE IBM'S ACTUAL IHASVC MACRO  **\n**                 INSTEAD OF INTERNALLY DEFINED IHASVC MACRO.       **\n**                                                                   **\n***********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\nSVC      EQU   SVCENTRY\nSVCLEN   EQU   8\n* ------------------------------------------------------------------- *\nSVCTAB   MOWSTART\nSVCTAB   AMODE  31\nSVCTAB   RMODE  ANY\n***********************************************************************\n*  THIS PROGRAM LOCATES THE SVC TABLE AND PRINTS OUT THE ATTRIBUTES   *\n*  OF THE SVCS.                                                       *\n***********************************************************************\n         LR    R10,R1             SAVE OFF REGISTER 1\n*                                 LOOK UP ENTRY POINT OF IGCERROR\n         NUCLKUP BYNAME,NAME='IGCERROR',ADDR=(1)\n         ST    R1,ERRORENT        SAVE ENTRY POINT OF IGCERROR\n         MVI   LINE,X'40'         INITIALIZE BLANKING\n         MVC   LINE+1(L'LINE-1),LINE         BLANK LINE TO OUTPUT\n         MVI   LINE+1,C'>'\n         MVC   LINE+3(19),=C'IGCERROR ADDRESS:  '  PUT IN TITLE\n         HEX   LINE+22,4,ERRORENT                  PUT IN ERROR ADDR\n*        TPUT  LINE,75\n         USING CVT,R11            CVT\n         L     R11,16             CVT ADDR\n         L     R11,CVTABEND       -> TO SECONDARY CVT\n         DROP  R11\n         USING SCVTSECT,R11       SECONDARY CVT\n         L     R11,SCVTSVCT       -> TO SVC TABLE (256 ENTRIES)\n         DROP  R11\n         USING SVC,R11            SVC TABLE\n         USING CPPL,R10\n         USING IOPL,R9\n         LA    R9,IOPLADS\n         L     R3,CPPLUPT\n         L     R4,CPPLECT\n         SR    R10,R10            LOOP COUNTER FOR 256 SVCS\n         LA    R8,SVCOP           -> TO SVC NAME TABLE\n*        TPUT  HEAD,L'HEAD\n*                                 OUTPUT HEADERS\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB0,                 *\n               OUTPUT=(MSG0,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\nNEXTENT  EQU   *                  FORMAT SVC TABLE DATA\n         MVI   HEAD,X'40'         A BLANK\n         MVC   HEAD+1(79),HEAD    AND 79 MORE\n         CVD   R10,DOUBLE         MAKE SVC # DECIMAL\n         MVC   HEAD(4),=X'40202120' MOVE SVC # INTO MESSAGE\n         ED    HEAD(4),DOUBLE+6   EDIT NUMBER INTO IT\n         ST    R10,FULL           SAVE SVC NUMBER\n         UNPK  OUT(9),FULL(5)     UNPACK\n         MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n         TR    OUT(8),=C'0123456789ABCDEF'  CONVERT TO CHARACTERS\n         MVC   HEAD+6(4),=C'(  )' SPACE FOR SVC # IN HEX\n         MVC   HEAD+7(2),OUT+6    MOVE IN HEX SVC NUMBER\n         CLC   SVCEP(4),ERRORENT  IS SVC ADDR IGCERROR ?\n         BNE   IGCNOERR                  NOT, THEN JUST PUT ADDR IN\n         MVC   HEAD+12(8),=C'IGCERROR'   YES, MARK AS IGCERROR\n         MVC   HEAD+22(10),=C'''RESERVED'''   PURPOSE IS RESERVED\n         B     IGCEGOON                       DON'T PUT ENTRY POINT\nIGCNOERR DS    0H\n         HEX   HEAD+12,4,SVCEP    FORMAT SVC ENTRY POINT ADDRESS\nIGCEGOON DS    0H\n         MVI   HEAD+40,C'6'       IT MUST BE A TYPE 6\n         TM    SVCTP,SVCTP6       IS IT A TYPE 6?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C'3/4' ASSUME TYPE 3 OR 4\n         TM    SVCTP,SVCTP34      IS IT A TYPE 3 OR 4?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C' 2 ' ASSUME ITS A TYPE 2\n         TM    SVCTP,SVCTP2       IS IT A TYPE 2?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVI   HEAD+40,C'1'       ASSUME ITS A TYPE 1\nGETATTR  EQU   *\n         MVI   HEAD+44,X'40'      ASSUME NOT AUTHORIZED\n         TM    SVCTP,SVCAPF       TEST FOR AUTHORIZED\n         BZ    GETAMODE           AND FOUND IT ISN'T\n         MVI   HEAD+44,C'Y'       SET IT TO AUTHORIZED\nGETAMODE EQU   *\n         TM    SVCEP,SVCAMODE     TEST FOR AMODE BIT SET\n         BZ    GETAMOD0           NOT SET\n         MVC   HEAD+48(2),=C'31'  INDICATE AMODE IS 31\n         B     GETATTR1           GO ON\nGETAMOD0 DS    0H\n         MVC   HEAD+48(2),=C'24'  INDICATE AMODE IS 24\nGETATTR1 EQU   *\n         MVI   HEAD+52,X'40'      ASSUME SVC NOT PART OF THE ESR\n         TM    SVCTP,SVCESR       TEST FOR PART OF ESR\n         BZ    GETATTR2           AND FOUND IT ISN'T\n         MVI   HEAD+52,C'Y'       SAY ITS PART OF ESR\nGETATTR2 EQU   *\n         MVI   HEAD+56,X'40'      ASSUME ITS NON-PREMPTIVE\n         TM    SVCTP,SVCNP        AND TEST TO SEE\n         BZ    GETATTR3           AND FOUND IT ISN'T\n         MVI   HEAD+56,C'Y'       SAY IT IS\nGETATTR3 EQU   *\n         MVI   HEAD+60,X'40'      ASSUME IT CAN'T BE ASSISTED\n         TM    SVCTP,SVCASF       AND TEST TO SEE\n         BZ    LOCK0              AND FOUND IT ISN'T\n         MVI   HEAD+60,C'Y'       SAY IT IS\nLOCK0    EQU   *\n         LA    R2,HEAD+63         -> TO LOCK FIELD IN MSG TEXT\n         TM    SVCLOCKS,SVCLL     LOCAL LOCK?\n         BZ    LOCK1              NOT LOCAL LOCK\n         MVC   0(6,R2),=C'LOCAL,' MOVE IN LOCAL\n         LA    R2,6(,R2)          BUMP POINTER\nLOCK1    EQU   *\n         TM    SVCLOCKS,SVCCMS    CMS LOCK?\n         BZ    LOCK2              NOT CMS LOCK\n         MVC   0(4,R2),=C'CMS,'   MOVE IN CMS\n         LA    R2,4(,R2)          BUMP POINTER\nLOCK2    EQU   *\n         TM    SVCLOCKS,SVCOPT    OPT LOCK?\n         BZ    LOCK3              NOT OPT LOCK\n         MVC   0(4,R2),=C'OPT,'   MOVE IN OPT\n         LA    R2,4(,R2)          BUMP POINTER\nLOCK3    EQU   *\n         TM    SVCLOCKS,SVCALLOC  ALLOC LOCK?\n         BZ    LOCK4              NOT ALLOC LOCK\n         MVC   0(6,R2),=C'ALLOC,' MOVE IN ALLOC\n         LA    R2,6(,R2)          BUMP POINTER\nLOCK4    EQU   *\n         TM    SVCLOCKS,SVCDISP   DISP LOCK?\n         BZ    DONELOCK           NOT DISP LOCK\n         MVC   0(5,R2),=C'DISP,'  MOVE IN DISP\n         LA    R2,5(,R2)          BUMP POINTER\nDONELOCK EQU   *\n         BCTR  R2,0               BACK POINTER UP ONE BYTE AND\n         MVI   0(R2),C' '         BLANK TRAILING COMMA\n         CLM   R10,B'0001',0(R8)  IS THIS ENTRY IN TABLE?\n         BNE   PUTMSG             NO, SO JUST PUT MESSAGE W/OUT NAME\n*\n         CLC   SVCEP(4),ERRORENT  IS SVC ENTRY POINT = IGCERROR E.P.?\n         BNE   IGCNOER1           NO. JUST DO REGULAR PROCESSING\n         MVC   HEAD+22(10),=C'''RESERVED'''   YES. MARK AS RESERVED.\n         MVC   HEAD+32(4),=C'    '            BLANK REST OF FIELD\n         B     IGCEGOO1                       DON'T PUT NAME FROM TABLE\nIGCNOER1 DS    0H\n         MVC   HEAD+22(14),1(R8)  MOVE SVC NAME INTO MESSAGE\nIGCEGOO1 DS    0H\n*\n         LA    R8,SVCNAML(,R8)    BUMP -> TO NEXT SVC NAME ENTRY\nPUTMSG   EQU   *\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\n*        TPUT  HEAD,L'HEAD\n         LA    R11,SVCLEN(,R11)   -> TO NEXT SVC TABLE ENTRY\n         LA    R10,1(,R10)        ADD 1 TO COUNT OF SVCS\n         CH    R10,=H'256'        AT END YET?\n         BL    NEXTENT            NO, MORE SVCS TO TELL ABOUT YET\nGOTOEND  DS    0H                 BRANCH POINT\n         MOREND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\nHEXSAVE  DS    3F                     Save registers\nSAVER7A  DS    F                      Save BAL register\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPARM     PUTLINE MF=L\nECB0     DC    F'0'\nECB1     DC    F'0'\nIOPLADS  DC    4F'0'\nFULL     DC    F'0'\nERRORENT DC    F'0'               ENTRY POINT OF IGCERROR\nDOUBLE   DC    D'0'\n         DC    F'0'               MUST PRECEED OUT\nOUT      DS    2F                 WORK AREA FOR UNPK\n         DS    CL1                PAD SPACE FOR UNPK\nMSG0     DC    H'64'              PUTLINE OF IGCERROR ADDRESS\n         DC    H'0'\nLINE     DC    CL60' '\nMSG1     DC    H'84'\n         DC    H'0'\nHEAD     DC    CL80'    SVC       ADDR    ---- NAME ----  TYPE AUT AMD *\n               ESR PRE ASS LOCKS'\n*                   0123456789 123456789 123456789 123456789 123456789\n*                     123  (XX)  AAAAAAAA  SVC_NAME         3   Y   31\n*              123456789 123456789\n*               N   Y   Y     ....\n*\n* THE SVCTABLE WAS \"BORROWED\" DIRECTLY FROM THE DISASSEMBLER.\n*\n         COPY  DISASM3B\n         PRINT NOGEN\n         CVT   DSECT=YES,PREFIX=NO\n         IKJCPPL\n         IKJPTPB\n         IKJIOPL\n         IHASCVT\n         PRINT  ON,GEN\n         IHASVC LIST=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCTAB$": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x06\\x01\\x12\\x03O\\x01\\x13\\x01?\\x130\\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2013-01-13T13:30:06", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE133(SVCTAB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB486133\n SETCODE AC(0)\n NAME    SVCTAB(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCTAB$1": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x003\\x01\\x12\\x03O\\x01\\x13\\x01?\\x13'\\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2013-01-13T13:27:33", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(SVCTAB01)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB486133\n SETCODE AC(0)\n NAME    SVCTAB01(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCTAB#": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x00T\\x01\\x13\\x01?\\x01\\x13\\x01?\\x14'\\x00C\\x00)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "2013-01-13T00:00:00", "modifydate": "2013-01-13T14:27:54", "lines": 67, "newlines": 41, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes concerning the SVCTAB program.\n\nInitial changes:  Late December, 2012.\n\n1.  The program, as originally coded, did not adequately display the\n    SVC program entry point addresses.  The whole 4 bytes was not\n    displayed.  I changed that, and displayed the entire address,\n    including the high-order bit which says whether the addressing\n    mode is 24 or 31.  If you actually display this address using\n    a core-browsing program such as LOOK from CBT Tape File 264,\n    the high-order bit will be ignored anyway.\n\n    Previously, the way the program was coded, you would sometimes\n    miss real bits in the high-order part of the entry point address,\n    and as a result, you could not find the real entry point of the\n    module.  (No good.)\n\n2.  24-bit AMODE was not marked as such, but the field was left blank.\n    It is much clearer to mark the module as AMODE 24 specifically,\n    so the SVCTAB program now displays that.\n\nFirst group of notes:  S.GOLOB  -  January 13, 2013.\n\n1.  This program is nearly identical to the DSVC program in CBT\n    File 300, at least in origin.  It came from the CBT disassembler\n    on File 217, as did the DSVC program.\n\n2.  This program has been adjusted by Sam Golob in several ways:\n\n    A.  Missing SVC's have been marked with an \"entry point address\"\n        saying IGCERROR, so that it is obvious that this SVC has not\n        been installed on the running system.  The address of the\n        IGCERROR program in the Nucleus is shown once, at the top of\n        the SVCTAB display.\n\n    B.  An invocation of the NUCLKUP macro was done, to determine the\n        entry point of the IGCERROR module, before any SVC table\n        lookups are done.  That way, each entry point in an SVC table\n        entry can be compared with the entry point of IGCERROR and\n        you can easily determine if that SVC is missing or not.\n\n    C.  If the entry point in the table coincides with the entry point\n        of IGCERROR, then the \"purpose\" field of that SVC is marked\n        'RESERVED', always.  This is the --NAME-- field.\n\n    D.  The \"purpose\" field (or the --NAME-- field) of the SVC\n        display is filled in from the COPY member called DISASM3B.\n        I have adjusted most of the \"user SVC\" numbers in this table\n        to show a blank entry.  Different shops have different user\n        SVC numbers.  I left the two CICS SVC entries intact, just\n        to show you how to code the entries in this table.\n\n        Some new IBM SVC's have been introduced with z/OS recent\n        system levels.  I adjusted the DISASM3B member to coincide\n        with the latest IBM installed SVC's.  If a certain IBM SVC\n        is not installed on your system, it will still be marked\n        'RESERVED'.\n\n    E.  Previous versions of this program did not use the current\n        version of the IHASVC macro in SYS1.MODGEN.  There was a\n        copied old version of IHASVC which was coded as an internal\n        macro, in the program.  I changed the program to use IBM's\n        IHASVC macro.  This required a few other adjustments.\n\n    F.  The NUCLKUP macro does not need to be APF-authorized, so\n        the SVCTAB program does not need to be APF-authorized.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCTABO": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x10R\\x00\\xb2\\x00\\xb2\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T10:52:00", "lines": 178, "newlines": 178, "modlines": 0, "user": "AFIELD"}, "text": "         MACRO\n&NAME    IHASVC\nSVC      DSECT\nSVCEP    DC    F'0'           SVC ENTRY POINT ADDRERSS\nSVCAMODE EQU   X'80'          SVC AMODE INDICATOR\nSVCATTR1 DC    0XL2'00'       ATTRIBUTES\nSVCTP    DC    XL1'00'        TYPE FIELD\nSVCTP1   EQU   X'00'          TYPE 1 SVC\nSVCTP2   EQU   X'80'          TYPE 2 SVC\nSVCTP34  EQU   X'C0'          TYPE 3 OR 4 SVC\nSVCTP6   EQU   X'20'          TYPE 6 SVC\nSVCAPF   EQU   X'08'          APF AUTHORIZED 1-AUTHORIZED\nSVCESR   EQU   X'04'          SVC IS PART OF THE ESR\nSVCNP    EQU   X'02'          NON-PREEMPTIVE SVC\nSVCASF   EQU   X'01'          SVC CAN BE ASSISTED\nSVCRESV1 DC    XL1'00'        RESERVED BYTE\nSVCLOCKS DC    XL2'00'        LOCK ATTRIBUTES\nSVCLL    EQU   X'80'          LOCAL LOCK NEEDED\nSVCCMS   EQU   X'40'          CMS LOCK NEEDED\nSVCOPT   EQU   X'20'          OPT LOCK NEEDED\nSVCALLOC EQU   X'10'          SALLOC LOCK NEEDED\nSVCDISP  EQU   X'08'          DISPATCHER LOCK NEEDED\n*\nSVCESRAD EQU   SVCLOCKS+1\nSVCLEN   EQU   *-SVC\n         MEND\nSVCTAB   MOWSTART\nSVCTAB   AMODE  31\nSVCTAB   RMODE  ANY\n***********************************************************************\n* THIS PROGRAM LOCATES THE SVC TABLE AND PRINTS OUT THE ATTRIBUTES    *\n* OF THE SVCS.                                                        *\n***********************************************************************\n         USING CVT,R11            CVT\n         L     R11,16             CVT ADDR\n         L     R11,CVTABEND       -> TO SECONDARY CVT\n         DROP  R11\n         USING SCVTSECT,R11       SECONDARY CVT\n         L     R11,SCVTSVCT       -> TO SVC TABLE (256 ENTRIES)\n         DROP  R11\n         USING SVC,R11            SVC TABLE\n         USING CPPL,R10\n         LR    R10,R1\n         USING IOPL,R9\n         LA    R9,IOPLADS\n         L     R3,CPPLUPT\n         L     R4,CPPLECT\n         SR    R10,R10            LOOP COUNTER FOR 256 SVCS\n         LA    R8,SVCOP           -> TO SVC NAME TABLE\n*        TPUT  HEAD,L'HEAD\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\nNEXTENT  EQU   *                  FORMAT SVC TABLE DATA\n         MVI   HEAD,X'40'         A BLANK\n         MVC   HEAD+1(79),HEAD    AND 79 MORE\n         CVD   R10,DOUBLE         MAKE SVC # DECIMAL\n         MVC   HEAD(4),=X'40202120' MOVE SVC # INTO MESSAGE\n         ED    HEAD(4),DOUBLE+6   EDIT NUMBER INTO IT\n         ST    R10,FULL           SAVE SVC NUMBER\n         UNPK  OUT(9),FULL(5)     UNPACK\n         MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n         TR    OUT(8),=C'0123456789ABCDEF'  CONVERT TO CHARACTERS\n         MVC   HEAD+6(4),=C'(  )' SPACE FOR SVC # IN HEX\n         MVC   HEAD+7(2),OUT+6    MOVE IN HEX SVC NUMBER\n         UNPK  OUT(9),SVCEP(5)    UNPACK SVC ADDRESS\n         MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n         TR    OUT(8),=C'0123456789ABCDEF' CONVERT TO CHARACTERS\n         MVC   HEAD+12(8),OUT     MOVE IN CONVERTED ADDRESS\n         MVI   HEAD+12,X'40'      BLANK OUT FIRST BYTE OF ADDRESS\n         CLI   HEAD+13,C'0'       TEST FOR A ZERO\n         BNE   *+8                SKIP ROUND MOVE\n         MVI   HEAD+13,X'40'      MAKE IT A BLANK\n         MVI   HEAD+40,C'6'       IT MUST BE A TYPE 6\n         TM    SVCTP,SVCTP6       IS IT A TYPE 6?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C'3/4' ASSUME TYPE 3 OR 4\n         TM    SVCTP,SVCTP34      IS IT A TYPE 3 OR 4?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C' 2 ' ASSUME ITS A TYPE 2\n         TM    SVCTP,SVCTP2       IS IT A TYPE 2?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVI   HEAD+40,C'1'       ASSUME ITS A TYPE 1\nGETATTR  EQU   *\n         MVI   HEAD+44,X'40'      ASSUME NOT AUTHORIZED\n         TM    SVCTP,SVCAPF       TEST FOR AUTHORIZED\n         BZ    GETAMODE           AND FOUND IT ISN'T\n         MVI   HEAD+44,C'Y'       SET IT TO AUTHORIZED\nGETAMODE EQU   *\n         TM    SVCEP,SVCAMODE     TEST FOR AMODE BIT SET\n         BZ    GETATTR1           NOT SET\n         MVC   HEAD+48(2),=C'31'  INDICATE AMODE IS 31\nGETATTR1 EQU   *\n         MVI   HEAD+52,X'40'      ASSUME SVC NOT PART OF THE ESR\n         TM    SVCTP,SVCESR       TEST FOR PART OF ESR\n         BZ    GETATTR2           AND FOUND IT ISN'T\n         MVI   HEAD+52,C'Y'       SAY ITS PART OF ESR\nGETATTR2 EQU   *\n         MVI   HEAD+56,X'40'      ASSUME ITS NON-PREMPTIVE\n         TM    SVCTP,SVCNP        AND TEST TO SEE\n         BZ    GETATTR3           AND FOUND IT ISN'T\n         MVI   HEAD+56,C'Y'       SAY IT IS\nGETATTR3 EQU   *\n         MVI   HEAD+60,X'40'      ASSUME IT CAN'T BE ASSISTED\n         TM    SVCTP,SVCASF       AND TEST TO SEE\n         BZ    LOCK0              AND FOUND IT ISN'T\n         MVI   HEAD+60,C'Y'       SAY IT IS\nLOCK0    EQU   *\n         LA    R2,HEAD+63         -> TO LOCK FIELD IN MSG TEXT\n         TM    SVCLOCKS,SVCLL     LOCAL LOCK?\n         BZ    LOCK1              NOT LOCAL LOCK\n         MVC   0(6,R2),=C'LOCAL,' MOVE IN LOCAL\n         LA    R2,6(R2)           BUMP POINTER\nLOCK1    EQU   *\n         TM    SVCLOCKS,SVCCMS    CMS LOCK?\n         BZ    LOCK2              NOT CMS LOCK\n         MVC   0(4,R2),=C'CMS,'   MOVE IN CMS\n         LA    R2,4(R2)           BUMP POINTER\nLOCK2    EQU   *\n         TM    SVCLOCKS,SVCOPT    OPT LOCK?\n         BZ    LOCK3              NOT OPT LOCK\n         MVC   0(4,R2),=C'OPT,'   MOVE IN OPT\n         LA    R2,4(R2)           BUMP POINTER\nLOCK3    EQU   *\n         TM    SVCLOCKS,SVCALLOC  ALLOC LOCK?\n         BZ    LOCK4              NOT ALLOC LOCK\n         MVC   0(6,R2),=C'ALLOC,' MOVE IN ALLOC\n         LA    R2,6(R2)           BUMP POINTER\nLOCK4    EQU   *\n         TM    SVCLOCKS,SVCDISP   DISP LOCK?\n         BZ    DONELOCK           NOT DISP LOCK\n         MVC   0(5,R2),=C'DISP,'  MOVE IN DISP\n         LA    R2,5(R2)           BUMP POINTER\nDONELOCK EQU   *\n         BCTR  R2,0               BACK POINTER UP ONE BYTE AND\n         MVI   0(R2),C' '         BLANK TRAILING COMMA\n         CLM   R10,B'0001',0(R8)  IS THIS ENTRY IN TABLE?\n         BNE   PUTMSG             NO, SO JUST PUT MESSAGE W/OUT NAME\n         MVC   HEAD+22(14),1(R8)  MOVE SVC NAME INTO MESSAGE\n         LA    R8,SVCNAML(R8)     BUMP -> TO NEXT SVC NAME ENTRY\nPUTMSG   EQU   *\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\n*        TPUT  HEAD,L'HEAD\n         LA    R11,SVCLEN(R11)    -> TO NEXT SVC TABLE ENTRY\n         LA    R10,1(R10)         ADD 1 TO COUNT OF SVCS\n         CH    R10,=H'256'        AT END YET?\n         BL    NEXTENT            NO, MORE SVCS TO TELL ABOUT YET\n         MOREND\nPARM     PUTLINE MF=L\nECB1     DC    F'0'\nIOPLADS  DC    4F'0'\nFULL     DC    F'0'\nDOUBLE   DC    D'0'\n         DC    F'0'               MUST PRECEED OUT\nOUT      DS    2F                 WORK AREA FOR UNPK\n         DS    CL1                PAD SPACE FOR UNPK\nMSG1     DC    H'84'\n         DC    H'0'\nHEAD     DC    CL80'    SVC       ADDR    ---- NAME ----  TYPE AUT AMD *\n               ESR PRE ASS LOCKS'\n*                   0123456789 123456789 123456789 123456789 123456789\n*                     123  (XX)  AAAAAAAA  SVC_NAME         3   Y   31\n*              123456789 123456789\n*               N   Y   Y     ....\n*\n* THE SVCTABLE WAS \"BORROWED\" DIRECTLY FROM THE DISASSEMBLER.\n*\n         COPY  DISASM3B\n         PRINT NOGEN\n         CVT   DSECT=YES,PREFIX=NO\n         IKJCPPL\n         IKJPTPB\n         IKJIOPL\n         IHASCVT\n         IHASVC\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVCTAB01": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x002\\x01\\x12\\x03\\x9f\\x01\\x13\\x01?\\x130\\x00\\xdc\\x00\\xb2\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2013-01-13T13:30:32", "lines": 220, "newlines": 178, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE 'SVCTAB - DISPLAY THE SVC TABLE '\n***********************************************************************\n* THIS PROGRAM LOCATES THE SVC TABLE AND PRINTS OUT THE ATTRIBUTES    *\n* OF THE SVCS.                                                        *\n***********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    IHASVC\nSVC      DSECT\nSVCEP    DC    F'0'           SVC ENTRY POINT ADDRERSS\nSVCAMODE EQU   X'80'          SVC AMODE INDICATOR\nSVCATTR1 DC    0XL2'00'       ATTRIBUTES\nSVCTP    DC    XL1'00'        TYPE FIELD\nSVCTP1   EQU   X'00'          TYPE 1 SVC\nSVCTP2   EQU   X'80'          TYPE 2 SVC\nSVCTP34  EQU   X'C0'          TYPE 3 OR 4 SVC\nSVCTP6   EQU   X'20'          TYPE 6 SVC\nSVCAPF   EQU   X'08'          APF AUTHORIZED 1-AUTHORIZED\nSVCESR   EQU   X'04'          SVC IS PART OF THE ESR\nSVCNP    EQU   X'02'          NON-PREEMPTIVE SVC\nSVCASF   EQU   X'01'          SVC CAN BE ASSISTED\nSVCRESV1 DC    XL1'00'        RESERVED BYTE\nSVCLOCKS DC    XL2'00'        LOCK ATTRIBUTES\nSVCLL    EQU   X'80'          LOCAL LOCK NEEDED\nSVCCMS   EQU   X'40'          CMS LOCK NEEDED\nSVCOPT   EQU   X'20'          OPT LOCK NEEDED\nSVCALLOC EQU   X'10'          SALLOC LOCK NEEDED\nSVCDISP  EQU   X'08'          DISPATCHER LOCK NEEDED\n*\nSVCESRAD EQU   SVCLOCKS+1\nSVCLEN   EQU   *-SVC\n         MEND\nSVCTAB   MOWSTART\nSVCTAB   AMODE  31\nSVCTAB   RMODE  ANY\n***********************************************************************\n* THIS PROGRAM LOCATES THE SVC TABLE AND PRINTS OUT THE ATTRIBUTES    *\n* OF THE SVCS.                                                        *\n***********************************************************************\n         USING CVT,R11            CVT\n         L     R11,16             CVT ADDR\n         L     R11,CVTABEND       -> TO SECONDARY CVT\n         DROP  R11\n         USING SCVTSECT,R11       SECONDARY CVT\n         L     R11,SCVTSVCT       -> TO SVC TABLE (256 ENTRIES)\n         DROP  R11\n         USING SVC,R11            SVC TABLE\n         USING CPPL,R10\n         LR    R10,R1\n         USING IOPL,R9\n         LA    R9,IOPLADS\n         L     R3,CPPLUPT\n         L     R4,CPPLECT\n         SR    R10,R10            LOOP COUNTER FOR 256 SVCS\n         LA    R8,SVCOP           -> TO SVC NAME TABLE\n*        TPUT  HEAD,L'HEAD\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\nNEXTENT  EQU   *                  FORMAT SVC TABLE DATA\n         MVI   HEAD,X'40'         A BLANK\n         MVC   HEAD+1(79),HEAD    AND 79 MORE\n         CVD   R10,DOUBLE         MAKE SVC # DECIMAL\n         MVC   HEAD(4),=X'40202120' MOVE SVC # INTO MESSAGE\n         ED    HEAD(4),DOUBLE+6   EDIT NUMBER INTO IT\n         ST    R10,FULL           SAVE SVC NUMBER\n         UNPK  OUT(9),FULL(5)     UNPACK\n         MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n         TR    OUT(8),=C'0123456789ABCDEF'  CONVERT TO CHARACTERS\n         MVC   HEAD+6(4),=C'(  )' SPACE FOR SVC # IN HEX\n         MVC   HEAD+7(2),OUT+6    MOVE IN HEX SVC NUMBER\n*\n         HEX   HEAD+12,4,SVCEP\n*        UNPK  OUT(9),SVCEP(5)    UNPACK SVC ADDRESS\n*        MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n*        TR    OUT(8),=C'0123456789ABCDEF' CONVERT TO CHARACTERS\n*        MVC   HEAD+12(8),OUT     MOVE IN CONVERTED ADDRESS\n*        MVI   HEAD+12,X'40'      BLANK OUT FIRST BYTE OF ADDRESS\n*        CLI   HEAD+13,C'0'       TEST FOR A ZERO\n*        BNE   *+8                SKIP ROUND MOVE\n*        MVI   HEAD+13,X'40'      MAKE IT A BLANK\n*\n         MVI   HEAD+40,C'6'       IT MUST BE A TYPE 6\n         TM    SVCTP,SVCTP6       IS IT A TYPE 6?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C'3/4' ASSUME TYPE 3 OR 4\n         TM    SVCTP,SVCTP34      IS IT A TYPE 3 OR 4?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C' 2 ' ASSUME ITS A TYPE 2\n         TM    SVCTP,SVCTP2       IS IT A TYPE 2?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVI   HEAD+40,C'1'       ASSUME ITS A TYPE 1\nGETATTR  EQU   *\n         MVI   HEAD+44,X'40'      ASSUME NOT AUTHORIZED\n         TM    SVCTP,SVCAPF       TEST FOR AUTHORIZED\n         BZ    GETAMODE           AND FOUND IT ISN'T\n         MVI   HEAD+44,C'Y'       SET IT TO AUTHORIZED\nGETAMODE EQU   *\n         TM    SVCEP,SVCAMODE     TEST FOR AMODE BIT SET\n         BZ    GETAMOD0           NOT SET\n         MVC   HEAD+48(2),=C'31'  INDICATE AMODE IS 31\n         B     GETATTR1           GO ON\nGETAMOD0 DS    0H\n         MVC   HEAD+48(2),=C'24'  INDICATE AMODE IS 24\nGETATTR1 EQU   *\n         MVI   HEAD+52,X'40'      ASSUME SVC NOT PART OF THE ESR\n         TM    SVCTP,SVCESR       TEST FOR PART OF ESR\n         BZ    GETATTR2           AND FOUND IT ISN'T\n         MVI   HEAD+52,C'Y'       SAY ITS PART OF ESR\nGETATTR2 EQU   *\n         MVI   HEAD+56,X'40'      ASSUME ITS NON-PREMPTIVE\n         TM    SVCTP,SVCNP        AND TEST TO SEE\n         BZ    GETATTR3           AND FOUND IT ISN'T\n         MVI   HEAD+56,C'Y'       SAY IT IS\nGETATTR3 EQU   *\n         MVI   HEAD+60,X'40'      ASSUME IT CAN'T BE ASSISTED\n         TM    SVCTP,SVCASF       AND TEST TO SEE\n         BZ    LOCK0              AND FOUND IT ISN'T\n         MVI   HEAD+60,C'Y'       SAY IT IS\nLOCK0    EQU   *\n         LA    R2,HEAD+63         -> TO LOCK FIELD IN MSG TEXT\n         TM    SVCLOCKS,SVCLL     LOCAL LOCK?\n         BZ    LOCK1              NOT LOCAL LOCK\n         MVC   0(6,R2),=C'LOCAL,' MOVE IN LOCAL\n         LA    R2,6(R2)           BUMP POINTER\nLOCK1    EQU   *\n         TM    SVCLOCKS,SVCCMS    CMS LOCK?\n         BZ    LOCK2              NOT CMS LOCK\n         MVC   0(4,R2),=C'CMS,'   MOVE IN CMS\n         LA    R2,4(R2)           BUMP POINTER\nLOCK2    EQU   *\n         TM    SVCLOCKS,SVCOPT    OPT LOCK?\n         BZ    LOCK3              NOT OPT LOCK\n         MVC   0(4,R2),=C'OPT,'   MOVE IN OPT\n         LA    R2,4(R2)           BUMP POINTER\nLOCK3    EQU   *\n         TM    SVCLOCKS,SVCALLOC  ALLOC LOCK?\n         BZ    LOCK4              NOT ALLOC LOCK\n         MVC   0(6,R2),=C'ALLOC,' MOVE IN ALLOC\n         LA    R2,6(R2)           BUMP POINTER\nLOCK4    EQU   *\n         TM    SVCLOCKS,SVCDISP   DISP LOCK?\n         BZ    DONELOCK           NOT DISP LOCK\n         MVC   0(5,R2),=C'DISP,'  MOVE IN DISP\n         LA    R2,5(R2)           BUMP POINTER\nDONELOCK EQU   *\n         BCTR  R2,0               BACK POINTER UP ONE BYTE AND\n         MVI   0(R2),C' '         BLANK TRAILING COMMA\n         CLM   R10,B'0001',0(R8)  IS THIS ENTRY IN TABLE?\n         BNE   PUTMSG             NO, SO JUST PUT MESSAGE W/OUT NAME\n         MVC   HEAD+22(14),1(R8)  MOVE SVC NAME INTO MESSAGE\n         LA    R8,SVCNAML(R8)     BUMP -> TO NEXT SVC NAME ENTRY\nPUTMSG   EQU   *\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\n*        TPUT  HEAD,L'HEAD\n         LA    R11,SVCLEN(R11)    -> TO NEXT SVC TABLE ENTRY\n         LA    R10,1(R10)         ADD 1 TO COUNT OF SVCS\n         CH    R10,=H'256'        AT END YET?\n         BL    NEXTENT            NO, MORE SVCS TO TELL ABOUT YET\n         MOREND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\nHEXSAVE  DS    3F\nSAVER7A  DS    F\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPARM     PUTLINE MF=L\nECB1     DC    F'0'\nIOPLADS  DC    4F'0'\nFULL     DC    F'0'\nDOUBLE   DC    D'0'\n         DC    F'0'               MUST PRECEED OUT\nOUT      DS    2F                 WORK AREA FOR UNPK\n         DS    CL1                PAD SPACE FOR UNPK\nMSG1     DC    H'84'\n         DC    H'0'\nHEAD     DC    CL80'    SVC       ADDR    ---- NAME ----  TYPE AUT AMD *\n               ESR PRE ASS LOCKS'\n*                   0123456789 123456789 123456789 123456789 123456789\n*                     123  (XX)  AAAAAAAA  SVC_NAME         3   Y   31\n*              123456789 123456789\n*               N   Y   Y     ....\n*\n* THE SVCTABLE WAS \"BORROWED\" DIRECTLY FROM THE DISASSEMBLER.\n*\n         COPY  DISASM3B\n         PRINT NOGEN\n         CVT   DSECT=YES,PREFIX=NO\n         IKJCPPL\n         IKJPTPB\n         IKJIOPL\n         IHASCVT\n         IHASVC\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVTOC": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x000\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x12X\\x013\\x014\\x00\\x00\\xd7\\xd3\\xc9\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T12:58:30", "lines": 307, "newlines": 308, "modlines": 0, "user": "PLISRC"}, "text": " SVTOC: PROC (PARM) OPTIONS(MAIN);\n  /* TAKES IEHLIST LISTVTOC FORMAT OUTPUT AND REARRANGES IT TO SORT\n     BY CYL AND TRACK ADDRESS TO MAP PACK BY ADDRESS */\n  DCL PARM CHAR(100) VAR;\n  DCL P1 POINTER;\n  DCL LINE CHAR(121) BASED(P1);\n  DCL 1 IREC BASED(P1),\n        2 CC CHAR(1),\n        2 DSN CHAR(44),\n        2 F1 CHAR(43),\n        2 NOEXT CHAR(3),\n        2 F2 CHAR(5),\n        2 DSORG CHAR(3);\n  DCL 1 EXTREC BASED(P1),\n        2 CC CHAR(1),\n        2 F1 CHAR(21),\n        2 E1,\n          3 NUM1 PIC'ZZZ9',\n          3 E1A CHAR(24),\n        2 E2,\n          3 NUM2 PIC'ZZZ9',\n          3 E2A CHAR(24),\n        2 E3,\n          3 NUM3 PIC'ZZZ9',\n          3 E3A CHAR(24);\n  DCL 1 OREC,\n        2 NAM CHAR(44),\n        2 EXT,                  /* CHAR(28) */\n          3 NUM PIC'ZZ9',\n          3 F1 CHAR(1),\n          3 LCC PIC'ZZZ9',\n          3 F2 CHAR(2),\n          3 LHH PIC'Z9',\n          3 F3 CHAR(4),\n          3 UCC PIC'ZZZ9',\n          3 F4 CHAR(2),\n          3 UHH PIC'Z9',\n          3 F5 CHAR(1),\n          3 ORG CHAR(3),\n          3 F6 CHAR(1),\n        2 SEQ CHAR(7) INIT(' ');\n  DCL CYLS FIXED BIN(31,0);\n  DCL DASDSUB ENTRY OPTIONS(ASM INTER);\n  DCL 1 DEVCONS(5),\n        2 TYPE   CHAR(4)   INIT('3375','3380','3380','3380','0000'),\n        /*                              D,J     E      K */\n        2 DSCB   CHAR(2)   INIT(  '51',  '53',  '53',  '53',  '00'),\n        2 TRKEND PIC'99'   INIT(  '12',  '15',  '15',  '15',  '00'),\n        2 MAXCYL PIC'9999' INIT('0958','0884','1769','2654','0000');\n  DCL DEVIDX FIXED BIN(15,0);\n  DCL DSCBS FIXED BIN(31,0);\n  DCL HOLDORG CHAR(3);\n  DCL (ICYL,ITRK) FIXED BIN(31,0);\n  DCL IFREE FIXED BIN(31,0) INIT(0);\n  DCL IWORK FIXED BIN(31,0);\n  DCL PCC PIC'9999' INIT('0000');\n  DCL PHH PIC'99' INIT('01');        /* CYL 0, TRK 0 NOT AVAILABLE */\n  DCL RC FIXED BIN(31,0);\n  DCL TITLE CHAR(80) INIT('DATASET NAME                              EXT\n  #  LCC LHH     UCC UHH ORG  SPACE');\n  DCL TRKS FIXED BIN(31,0);\n  DCL TYPE CHAR(5);\n  DCL VOL CHAR(6);\n\n  ON ENDFILE(LIST) GO TO SORT;\n\n RD:\n  READ FILE(LIST) SET(P1);\n  IF SUBSTR(DSN,29,11) = 'VTOC ON VOL' THEN DO;\n     VOL = SUBSTR(LINE,42,6);\n     END;\n  IF SUBSTR(DSN,2,8) = 'FORMAT 4' THEN DO;\n     NAM = 'VOLUME TABLE OF CONTENTS FOR ' || VOL;\n     READ FILE(LIST) SET(P1);\n     STRING(EXT) = ' ';\n     READ FILE(LIST) SET(P1);\n\n     CALL DASDSUB(VOL,CYLS,TRKS,DSCBS,TYPE);\n     DEVIDX = 2;\n     IF TYPE = '3380E' THEN DEVIDX = 3;\n        ELSE IF TYPE = '3380K' THEN DEVIDX = 4;\n\n /*  IF SUBSTR(LINE,93,2) = '00' THEN SUBSTR(LINE,93,2) = '  '; */\n     LCC = SUBSTR(LINE,92,4);         /* VTOC EXTENTS */\n     LHH = SUBSTR(LINE,98,2);\n /*  IF SUBSTR(LINE,102,2) = '00' THEN SUBSTR(LINE,102,2) = '  '; */\n     UCC = SUBSTR(LINE,101,4);\n     UHH = SUBSTR(LINE,107,2);\n     WRITE FILE(SORTIN) FROM(OREC);\n     END;\n  IF (SUBSTR(DSN,1,1) \u00ac= ' ' & SUBSTR(DSN,1,1) \u00ac= '-') THEN DO;\n      NAM = DSN;\n      HOLDORG = DSORG;\n      END;\n  IF (SUBSTR(STRING(E1),1,4) = '  0 ' |\n      SUBSTR(STRING(E1),1,4) = '  3 ' |\n      SUBSTR(STRING(E1),1,4) = '  6 ' |\n      SUBSTR(STRING(E1),1,4) = '  9 ' |\n      SUBSTR(STRING(E1),1,4) = ' 12 ' |\n      SUBSTR(STRING(E1),1,4) = ' 15 ' |\n      SUBSTR(STRING(E1),1,4) = ' 16 ' |\n      SUBSTR(STRING(E1),1,4) = ' 19 ' |\n      SUBSTR(STRING(E1),1,4) = ' 22 ' |\n      SUBSTR(STRING(E1),1,4) = ' 25 ' |\n      SUBSTR(STRING(E1),1,4) = ' 28 ' |\n      SUBSTR(STRING(E1),1,4) = ' 31 ' |\n      SUBSTR(STRING(E1),1,4) = ' 34 ' |\n      SUBSTR(STRING(E1),1,4) = ' 37 ' |\n      SUBSTR(STRING(E1),1,4) = ' 40 ' |\n      SUBSTR(STRING(E1),1,4) = ' 43 ' |\n      SUBSTR(STRING(E1),1,4) = ' 46 ' |\n      SUBSTR(STRING(E1),1,4) = ' 49 ' |\n      SUBSTR(STRING(E1),1,4) = ' 52 ' |\n      SUBSTR(STRING(E1),1,4) = ' 55 ' |\n      SUBSTR(STRING(E1),1,4) = ' 58 ' |\n      SUBSTR(STRING(E1),1,4) = ' 61 ' |\n      SUBSTR(STRING(E1),1,4) = ' 64 ' |\n      SUBSTR(STRING(E1),1,4) = ' 67 ' |\n      SUBSTR(STRING(E1),1,4) = ' 70 ' |\n      SUBSTR(STRING(E1),1,4) = ' 73 ' |\n      SUBSTR(STRING(E1),1,4) = ' 76 ' |\n      SUBSTR(STRING(E1),1,4) = ' 79 ' |\n      SUBSTR(STRING(E1),1,4) = ' 82 ' |\n      SUBSTR(STRING(E1),1,4) = ' 85 ' |\n      SUBSTR(STRING(E1),1,4) = ' 88 ' |\n      SUBSTR(STRING(E1),1,4) = ' 91 ' |\n      SUBSTR(STRING(E1),1,4) = ' 94 ' |\n      SUBSTR(STRING(E1),1,4) = ' 97 ' |\n      SUBSTR(STRING(E1),1,4) = '100 ' |\n      SUBSTR(STRING(E1),1,4) = '103 ' |\n      SUBSTR(STRING(E1),1,4) = '106 ' |\n      SUBSTR(STRING(E1),1,4) = '109 ' |\n      SUBSTR(STRING(E1),1,4) = '112 ' |\n      SUBSTR(STRING(E1),1,4) = '115 ' |\n      SUBSTR(STRING(E1),1,4) = '118 ' |\n      SUBSTR(STRING(E1),1,4) = '121 ' ) & EXTREC.F1 = ' ' THEN DO;\n        STRING(EXT) = STRING(E1);\n        ORG = HOLDORG;\n        WRITE FILE(SORTIN) FROM(OREC);\n        END;\n  IF (SUBSTR(STRING(E2),1,4) = '  1 ' |\n      SUBSTR(STRING(E2),1,4) = '  4 ' |\n      SUBSTR(STRING(E2),1,4) = '  7 ' |\n      SUBSTR(STRING(E2),1,4) = ' 10 ' |\n      SUBSTR(STRING(E2),1,4) = ' 13 ' |\n      SUBSTR(STRING(E2),1,4) = ' 17 ' |\n      SUBSTR(STRING(E2),1,4) = ' 20 ' |\n      SUBSTR(STRING(E2),1,4) = ' 23 ' |\n      SUBSTR(STRING(E2),1,4) = ' 26 ' |\n      SUBSTR(STRING(E2),1,4) = ' 29 ' |\n      SUBSTR(STRING(E2),1,4) = ' 32 ' |\n      SUBSTR(STRING(E2),1,4) = ' 35 ' |\n      SUBSTR(STRING(E2),1,4) = ' 38 ' |\n      SUBSTR(STRING(E2),1,4) = ' 41 ' |\n      SUBSTR(STRING(E2),1,4) = ' 44 ' |\n      SUBSTR(STRING(E2),1,4) = ' 47 ' |\n      SUBSTR(STRING(E2),1,4) = ' 50 ' |\n      SUBSTR(STRING(E2),1,4) = ' 53 ' |\n      SUBSTR(STRING(E2),1,4) = ' 56 ' |\n      SUBSTR(STRING(E2),1,4) = ' 59 ' |\n      SUBSTR(STRING(E2),1,4) = ' 62 ' |\n      SUBSTR(STRING(E2),1,4) = ' 65 ' |\n      SUBSTR(STRING(E2),1,4) = ' 68 ' |\n      SUBSTR(STRING(E2),1,4) = ' 71 ' |\n      SUBSTR(STRING(E2),1,4) = ' 74 ' |\n      SUBSTR(STRING(E2),1,4) = ' 77 ' |\n      SUBSTR(STRING(E2),1,4) = ' 80 ' |\n      SUBSTR(STRING(E2),1,4) = ' 83 ' |\n      SUBSTR(STRING(E2),1,4) = ' 86 ' |\n      SUBSTR(STRING(E2),1,4) = ' 89 ' |\n      SUBSTR(STRING(E2),1,4) = ' 92 ' |\n      SUBSTR(STRING(E2),1,4) = ' 95 ' |\n      SUBSTR(STRING(E2),1,4) = ' 98 ' |\n      SUBSTR(STRING(E2),1,4) = '101 ' |\n      SUBSTR(STRING(E2),1,4) = '104 ' |\n      SUBSTR(STRING(E2),1,4) = '107 ' |\n      SUBSTR(STRING(E2),1,4) = '110 ' |\n      SUBSTR(STRING(E2),1,4) = '113 ' |\n      SUBSTR(STRING(E2),1,4) = '116 ' |\n      SUBSTR(STRING(E2),1,4) = '119 ' |\n      SUBSTR(STRING(E2),1,4) = '122 ' ) & EXTREC.F1 = ' ' THEN DO;\n        STRING(EXT) = STRING(E2);\n        ORG = HOLDORG;\n        WRITE FILE(SORTIN) FROM(OREC);\n        END;\n  IF (SUBSTR(STRING(E3),1,4) = '  2 ' |\n      SUBSTR(STRING(E3),1,4) = '  5 ' |\n      SUBSTR(STRING(E3),1,4) = '  8 ' |\n      SUBSTR(STRING(E3),1,4) = ' 11 ' |\n      SUBSTR(STRING(E3),1,4) = ' 14 ' |\n      SUBSTR(STRING(E3),1,4) = ' 18 ' |\n      SUBSTR(STRING(E3),1,4) = ' 21 ' |\n      SUBSTR(STRING(E3),1,4) = ' 24 ' |\n      SUBSTR(STRING(E3),1,4) = ' 27 ' |\n      SUBSTR(STRING(E3),1,4) = ' 30 ' |\n      SUBSTR(STRING(E3),1,4) = ' 33 ' |\n      SUBSTR(STRING(E3),1,4) = ' 36 ' |\n      SUBSTR(STRING(E3),1,4) = ' 39 ' |\n      SUBSTR(STRING(E3),1,4) = ' 42 ' |\n      SUBSTR(STRING(E3),1,4) = ' 45 ' |\n      SUBSTR(STRING(E3),1,4) = ' 48 ' |\n      SUBSTR(STRING(E3),1,4) = ' 51 ' |\n      SUBSTR(STRING(E3),1,4) = ' 54 ' |\n      SUBSTR(STRING(E3),1,4) = ' 57 ' |\n      SUBSTR(STRING(E3),1,4) = ' 60 ' |\n      SUBSTR(STRING(E3),1,4) = ' 63 ' |\n      SUBSTR(STRING(E3),1,4) = ' 66 ' |\n      SUBSTR(STRING(E3),1,4) = ' 69 ' |\n      SUBSTR(STRING(E3),1,4) = ' 72 ' |\n      SUBSTR(STRING(E3),1,4) = ' 75 ' |\n      SUBSTR(STRING(E3),1,4) = ' 78 ' |\n      SUBSTR(STRING(E3),1,4) = ' 81 ' |\n      SUBSTR(STRING(E3),1,4) = ' 84 ' |\n      SUBSTR(STRING(E3),1,4) = ' 87 ' |\n      SUBSTR(STRING(E3),1,4) = ' 90 ' |\n      SUBSTR(STRING(E3),1,4) = ' 93 ' |\n      SUBSTR(STRING(E3),1,4) = ' 96 ' |\n      SUBSTR(STRING(E3),1,4) = ' 99 ' |\n      SUBSTR(STRING(E3),1,4) = '102 ' |\n      SUBSTR(STRING(E3),1,4) = '103 ' |\n      SUBSTR(STRING(E3),1,4) = '108 ' |\n      SUBSTR(STRING(E3),1,4) = '111 ' |\n      SUBSTR(STRING(E3),1,4) = '114 ' |\n      SUBSTR(STRING(E3),1,4) = '117 ' |\n      SUBSTR(STRING(E3),1,4) = '120 ' |\n      SUBSTR(STRING(E3),1,4) = '123 ' ) & EXTREC.F1 = ' ' THEN DO;\n        STRING(EXT) = STRING(E3);\n        ORG = HOLDORG;\n        WRITE FILE(SORTIN) FROM(OREC);\n        END;\n  GO TO RD;\n- SORT:\n  CLOSE FILE(SORTIN);\n  PUT FILE(SYSPRINT) EDIT(TITLE) (A);\n- CALL PLISRTC(' SORT FIELDS=(49,4,CH,A,55,3,CH,A) ',\n               ' RECORD TYPE=F,LENGTH=(80) ',\n               128000,\n               RC,\n               E35A);\n\n1 E35A: PROC(DATA);\n    DCL DATA CHAR(80);\n    DCL 1 SREC LIKE OREC;\n    STRING(SREC) = DATA;\n    IF (SREC.LCC > PCC |\n        SREC.LHH > PHH) THEN DO;\n       IFREE = IFREE + 1;\n       ICYL = SREC.LCC - PCC;     /* NO CYLS IN FREE EXT */\n       ITRK = SREC.LHH - PHH;     /* NO TRKS IN FREE EXT */\n       ITRK = (ICYL * DEVCONS.TRKEND(DEVIDX)) + ITRK;\n       PUT FILE(SYSPRINT) EDIT ('FREE SPACE ===>',ITRK,' TRKS',IFREE)\n          (SKIP,A(30),F(5),A(5),X(5),F(2));\n       END;\n\n    ITRK = ((SREC.UCC * DEVCONS.TRKEND(DEVIDX)) + SREC.UHH) -\n              ((SREC.LCC * DEVCONS.TRKEND(DEVIDX)) + SREC.LHH) + 1;\n    PUT STRING(SUBSTR(DATA,74,6)) EDIT(ITRK) (F(6));\n    IF INDEX(PARM,'HEX') > 0 THEN DO;\n       IWORK = LCC;\n       SUBSTR(DATA,49,4) = TOHEX(IWORK);\n       IWORK = LHH;\n       SUBSTR(DATA,53,4) = TOHEX(IWORK);\n       IWORK = UCC;\n       SUBSTR(DATA,61,4) = TOHEX(IWORK);\n       IWORK = UHH;\n       SUBSTR(DATA,65,4) = TOHEX(IWORK);\n       END;\n    PUT FILE(SYSPRINT) EDIT(DATA) (SKIP,A);\n    PCC = SREC.UCC;\n    PHH = SREC.UHH + 1;\n    IF PHH = DEVCONS.TRKEND(DEVIDX) THEN DO;\n       PCC = PCC + 1;\n       PHH = 0;\n       END;\n    CALL PLIRETC(4);   /* GET NEXT RCD FROM SORT */\n    RETURN;\n    END E35A;\n\n1 TOHEX: PROC(A) RETURNS(CHAR(4));\n    /* THIS PROC TAKES A BINARY FULLWORD AND CONVERTS\n       TO PRINTABLE CHARACTERS IN HEX                           */\n    DCL C CHAR(4) VAR INIT(''), (A,I,AD) FIXED BIN(31),\n    HEX(0:15) CHAR(1) INIT('0','1','2','3','4','5','6','7',\n    '8','9','A','B','C','D','E','F'),\n    MOD BUILTIN;\n    AD = A;\n    DO I = 1 TO 4;\n         C = HEX(MOD(AD,16))||C;\n         AD = AD / 16;\n         END;\n    RETURN(C);\n    END TOHEX;\n\n1  /* SPECIAL CASE - FREE TO END OF PACK */\n   IF (PCC < DEVCONS.MAXCYL(DEVIDX) |\n       PHH < DEVCONS.TRKEND(DEVIDX)) THEN DO;\n       IFREE = IFREE + 1;\n       ICYL = DEVCONS.MAXCYL(DEVIDX) - PCC; /* NO CYLS IN FREE EXT */\n       ITRK = DEVCONS.TRKEND(DEVIDX) - PHH; /* NO TRKS IN FREE EXT */\n       ITRK = (ICYL * DEVCONS.TRKEND(DEVIDX)) + ITRK;\n       IF ITRK > 0 THEN\n         PUT FILE(SYSPRINT) EDIT ('FREE SPACE ===>',ITRK,' TRKS',IFREE)\n         (SKIP,A(30),F(5),A(5),X(5),F(2));\n       END;\n\n  CALL PLIRETC(0);\n  END SVTOC;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TODCN": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00C\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x10C\\x00\\xef\\x00\\xef\\x00\\x02\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T10:43:43", "lines": 239, "newlines": 239, "modlines": 2, "user": "AFIELD"}, "text": "TODCN    MOWSTART ,           PL/I DOESNT LIKE 8 CHAR NAMES\n*TODCNVRT MOWSTART\n***********************************************************************\n* FUNCTION: CONVERT A 64 BIT TIMESTAMP OBTAINED BY STCK INTO A\n*           CHARACTER STRING GIVING YEAR, JULIAN DATE AND TIME OF DAY\n*\n* REVERSE ENGINEERED FROM AMDPRDMP AMDPRSEG\n*         BY ALAN C FIELD, OZARK AIR LINES, ST. LOUIS, MO.\n*\n* THE ENTRY CONDITIONS TO TODCNVRT ARE:\n*   R1 POINTS TO AN ARGUMENT LIST WITH 3 ADCONS\n*       THE FIRST ARGUMENT IS A CVTTZ VALUE FOR GMT ADJUSTMENT\n*       THE SECOND ARGUMENT IS AN 8 BYTE TOD CLOCK VALUE FROM STCK\n*       THE THIRD ARGUMENT IS A 24 CHARACTER RETURN AREA\n*           VALUE RETURNED IS YYYYDDDHH.MM.SS.MMMMMM\n* THE PROGRAM MASK IS DISABLED FOR FIXED POINT OVERFLOW\n***********************************************************************\n         LA    R2,1            A F'1' MEANING 'RETURN FULL DATE'\n*        LA    R2,2            TO GET TIME IN SSSSS.MMMMMM FORM\n         SR    R0,R0                       CLEAR REG\n         SPM   R0                          DISABLE FIXED POINT OVFLW\n         L     R7,4(,R1)                   POINT TO TIMESTAMP\n         MVC   TIMESTMP(8),0(R7)           MOVE IT TO OUR AREA\n*        TM    127(R12),X'20'              REQUIRED TO OFFSET FOR GMT?\n*        BNO   LAB1                        NO\n         L     R7,0(,R1)                   GET CVTTZ, TIME ZONE DIFF\n         ICM   R14,15,0(R7)                PUT IT INTO A REGISTER\n         AL    R14,TIMESTMP                ADD IT TO THE TIMESTAMP\n         ST    R14,TIMESTMP                STORE IT BACK\nLAB1     LM    R4,R5,TIMESTMP              GET TIMESTAMP INTO REGS\n         SRDL  R4,12                       DIVIDE BY 4096\n         D     R4,SIXMILL                  DIVIDE RESULT BY ...\n         LR    R7,R2                       COPY\n         SLA   R7,2                        MULTIPLY BY 4\n         L     R7,ATAB(R7)                 BRANCH TABLE\n         BR    R7                          GO TO RIGHT PLACE\n         SPACE\nRELTVTME L     R7,4(,R1)                   POINT TO TIMESTAMP\n         CLC   0(8,R7),TIME2               COMPARE IT WITH ...\n         BNE   TOD1A\n         L     R7,8(,R1)                   -> TO RETURN AREA\n         MVI   12(R7),C' '                 MOVE IN A BLANK\n         MVC   13(11,R7),12(R7)            AND BLANK LAST HALF\n         MVC   0(12,R7),ZERO1              MOVE IN ....\n         LA    R15,4                       SET RETURN CODE\n         B     FIN                         RETURN\n         SPACE\nTOD1A    LA    R7,WORK2\n         L     R14,MILLION\n         LR    R15,R4                      COPY REGISTER\n         ST    R14,WORK1\n         SLR   R14,R14                     CLEAR REG\n         D     R14,WORK1                   DIVIDE BY ...\n         ST    R15,0(,R7)                  STORE RESULT IN\n         LR    R14,R4                      COPY REGISTER\n         SRDA  R14,32                      DIVIDE\n         D     R14,WORK1\n         LR    R4,R14                      COPY REG\n         L     R2,8(,R1)                   POINT TO RETURN AREA\n         LA    R2,6(,R2)                   AND POINT 6 BYTES IN\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(6,R2),TIMESTMP+4(4)       AND PRINTABLE\n         OI    5(R2),X'F0'                 INCL LAST CHAR\n         L     R7,8(,R1)                   POINT TO RETURN AREA\n         MVI   5(R7),X'4B'                 MOVE IN A PERIOD\n         LR    R14,R5                      COPY REG\n         SRDA  R14,32                      DIVIDE BY ...\n         D     R14,MINSPDAY                MINUTES IN A DAY\n         MH    R14,=H'60'                  MULTIPLY BY 60\n         LA    R15,WORK2                   -> TO ...\n         AL    R14,0(,R15)\n         LR    R4,R14                      COPY REG\n         LR    R2,R7                       COPY REG\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(5,R2),TIMESTMP+5(3)       AND PRINTABLE\n         OI    4(R2),X'F0'                 MAKE IT PRINTABLE\n         SLR   R15,R15                     SET RC\n         B     FIN                         GO BACK\n         SPACE\nFULLDATE L     R7,4(,R1)                   POINT TO INPUT TIMESTAMP\n         CLC   0(8,R7),TIME2               COMPARE WITH ...\n         BNE   TOD2A                       NOT EQUAL, GO TO ...\n         L     R7,8(,R1)                   POINT TO RETURN AREA\n         MVI   22(R7),C' '                 MOVE IN A BLANK\n         MVI   23(R7),C' '                 MOVE IN A BLANK\n         MVC   0(22,R7),ZERO2              MOVE ....\n         LA    R15,4                       SET RC\n         B     FIN                         RETURN\n         SPACE\nTOD2A    LA    R7,WORK2                    POINT TO ...\n         L     R14,MILLION                 LOAD IN A MILLION\n         LR    R15,R4                      COPY REG\n         ST    R14,WORK1                   SAVE IT IN WORK\n         SLR   R14,R14                     CLEAR IT\n         D     R14,WORK1                   DIVIDE BY 10E6\n         ST    R15,0(,R7)                  STORE IT IN WORK\n         LR    R14,R4                      COPY AGAIN\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,WORK1                   DIVIDE BY 10E6\n         LR    R4,R14                      COPY\n         L     R2,8(,R1)                   -> TO 3ND ARG, RETURN AREA\n         LA    R2,16(,R2)                  AND POINT 16 BYTES IN\n         CVD   R4,TIMESTMP                 CONVERT TO DECIMAL\n         UNPK  0(6,R2),TIMESTMP+4(4)       MOVE IN DECIMALS OF SECS\n         OI    5(R2),X'F0'                 LAST DIGIT PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   15(R7),X'4B'                MOVE IN A PERIOD\n         LA    R14,WORK2                   -> WORK\n         L     R4,0(,R14)                  GET DATA PTD TO BY R14\n         LA    R2,13(,R7)                  -> TO SS IN RETURN AREA\n         CVD   R4,TIMESTMP                 CONVERT SECONDS\n         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT IN\n         OI    1(R2),X'F0'                 PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   12(R7),X'4B'                MOVE IN A PERIOD\n         LA    R14,60                      GET A 60\n         LR    R15,R5                      COPY REG\n         ST    R14,WORK1                   SAVE OUR 60\n         SLR   R14,R14                     CLEAR A REG\n         D     R14,WORK1                   DIVIDE BY 60\n         ST    R15,WORK2                   SAVE RESULT\n         LR    R14,R5                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE BY 60\n         LR    R4,R14                      COPY\n         LA    R2,10(,R7)                  -> TO MM IN RETURN AREA\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA\n         OI    1(R2),X'F0'                 MAKE IT PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   9(R7),X'4B'                 MOVE IN A PERIOD\n         L     R5,WORK2                    COPY\n         LA    R14,24                      HOURS IN A DAY\n         LR    R15,R5                      COPY\n         ST    R14,WORK1                   SAVE OUR 24\n         SLR   R14,R14                     CLEAR IT\n         D     R14,WORK1                   DIVIDE BY 24\n         ST    R15,WORK2                   SAVE RESULT\n         LR    R14,R5                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE BY 24\n         LR    R4,R14                      COPY\n         LA    R2,7(,R7)                   -> POINT TO HH IN RESULT\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(2,R2),TIMESTMP+6(2)       AND PRINTABLE\n         OI    1(R2),X'F0'                 ..\n         L     R7,WORK2                    GET OUR VALUE\n         C     R7,FOURYR                   COMPARE WITH DAYS IN 4 YR\n         BNL   A3C\n         L     R7,WORK2                    GET IT AGAIN\n         LA    R14,365                     DAYS IN A YEAR\n         ST    R14,WORK1                   SAVE IT\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      MOVE IT DOWN AGAIN\n         D     R14,WORK1                   DIVIDE BY DAYS IN YR\n         AL    R14,F1                      ADD ONE\n         LR    R3,R14                      COPY\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      MOVE IT DOWN AGAIN\n         D     R14,WORK1                   DIVIDE\n         AL    R15,F2000                   ADD IN 2000\n         LR    R6,R15                      COPY\n         B     AAC\nA3C      L     R7,WORK2                    COPY\n         SL    R7,FOURYR                   SUBTRACT DAYS IN 4 YEARS\n         ST    R7,WORK2                    SAVE IT\n         LA    R14,1461                    DAYS IN 4 YRS, INCL LEAP\n         ST    R14,WORK1                   SAVE IT\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE\n         LR    R5,R15                      COPY\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      SHIFT IT\n         D     R14,WORK1                   DIVIDE\n         LR    R4,R14                      COPY\n         LR    R15,R4                      COPY\n         SLR   R14,R14                     CLEAR\n         D     R14,TWOYEAR                 DAYS IN 2 YEARS\n         LR    R14,R15                     COPY\n         ALR   R14,R4                      ADD\n         LR    R15,R4                      COPY\n         ST    R14,WORK1                   SAVE IT\n         SLR   R14,R14                     CLEAR\n         D     R14,THREEYR                 DAYS IN 3 YEARS\n         LR    R14,R15                     COPY\n         AL    R14,WORK1                   ADD\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,LEAPYEAR                DAYS IN A LEAP YEAR\n         AL    R14,F1                      ADD 1\n         LR    R3,R14                      COPY\n         LR    R6,R5                       COPY\n         SLA   R6,2                        MULTIPLY BY 4\n         AL    R6,F2004                    1904\n         LR    R14,R4                      COPY\n         BCTR  R14,0                       SUBTRACT 1\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,YEAR                    DAYS IN A YEAR\n         ALR   R6,R15                      ADD\nAAC      L     R2,8(,R1)                   -> 3RD ARG\n         LA    R2,4(,R2)                   -> DDD IN RETURN FIELD\n         CVD   R3,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(3,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA\n         OI    2(R2),X'F0'                 MAKE IT PRINTABLE\n         L     R2,8(,R1)                   -> 3RD ARG\n         CVD   R6,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(4,R2),TIMESTMP+5(3)       MOVE IN YYYY\n         OI    3(R2),X'F0'                 MAKE IT PRINTABLE\n         SLR   R15,R15                     SET RC\nFIN      EQU   *\n         SPM   R3                          TURN ON FIXED OVFLW\n         MOREND RC=(15)\n         DS    0D                          ALIGN ON DOUBLEWORD\nTIMESTMP DC    CL8' '\nTIME2    DC    CL8' '\nWORK1    DC    F'0'\nWORK2    DC    F'0'\nF1       DC    F'00001'\nF4       DC    F'00004'\nF5       DC    F'00005'\nF8       DC    F'00008'\nF9       DC    F'00009'\nF12      DC    F'00012'\nYEAR     DC    F'00365'\nLEAPYEAR DC    F'00366'\nTWOYEAR  DC    F'00731'\nTHREEYR  DC    F'01096'\nMINSPDAY DC    F'01440'\nFOURYR   DC    F'01460'      DAYS IN 4 YRS, EXCL LEAP YEAR\nF2000    DC    F'02000'\nF2004    DC    F'02004'\nMILLION  DC    F'1000000'\nSIXMILL  DC    F'60000000'               SIXTY MILLION\nZERO1    DC    C'00000.000000'           SSSSS.MMMMMM (SINCE MIDNIGHT)\nZERO2    DC    C'000000000.00.00.000000' YYYYDDDHH.MM.SS.MMMMMM\nATAB     DC    A(0)\n         DC    A(FULLDATE)\n         DC    A(RELTVTME)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TODCN$": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00P\\x01\\x12\\x03O\\x01\\x12\\x03\\x9f\\x111\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-08T11:31:50", "lines": 28, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133(TODCN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    TODCN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMNAM$": {"ttr": 3847, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x17\\x01\\x12\\x03O\\x01\\x12\\x03\\x9f\\x11\\x07\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-02-03T00:00:00", "modifydate": "2012-02-08T11:07:17", "lines": 28, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT484.FILE133(VSAMNAME)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    VSAMNAME(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMNAME": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x03\\x9f\\x01\\x12\\x03\\x9f\\x10R\\x00\\xa3\\x00\\xa3\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-02-08T00:00:00", "modifydate": "2012-02-08T10:52:00", "lines": 163, "newlines": 163, "modlines": 0, "user": "AFIELD"}, "text": "VSAMNAME MOWSTART\n***********************************************************************\n* THIS PROGRAM IS USED TO LIST THE COMMON NAME AND THE VSAM GENERATED *\n* NAME FOR SYSTEM DATASETS SUCH AS SMF DATASETS, PAGE DATASETS ETC.   *\n* PASS THE COMMON NAME THROUGHT THE PARM.                             *\n* DOC: CATALOG DIAGNOSIS REF.                                         *\n***********************************************************************\n         USING CVTMAP,R11\n         L     R11,16                   A(CVT)\n         L     R1,0(R1)                 A(PARM)\n         LH    R2,0(R1)                 TEST FOR PARM\n         LTR   R2,R2                    TEST FOR NOT ZERO\n         BNZ   PARM                     PARM SUPPLIED\n         TPUT  =C'NO NAME SUPPLIED IN PARM',24\n         B     FIN                      CAN'T CONTINUE WITHOUT NAME\nPARM     EQU   *\n         BCTR  R2,0                     LESS ONE FOR EXECUTE\n         EX    R2,MVCDSN1               MOVE NAME TO OUR DATA AREA\nOPEN     EQU   *\n         USING SHWOUT,R10\n         USING SHWASSOC,R9\n***********************************************************************\n*  USE SHOWCAT FOR STARTERS TO GET CATALOG ACB AND CI FOR DSET        *\n***********************************************************************\n         LA    R10,AREA                      -> TO RETURN DATA AREA\n         SHOWCAT AREA=AREA,NAME=USERDSN      ISSUE MACRO TO GET INFO\n         LTR   R15,R15                       SUCCESSFUL?\n         BZ    GETCINUM                      YES, GO GET CI NUMBERS\n         MVC   MSG(44),USERDSN               MOVE BAD DSN INTO MESSAGE\n         MVC   MSG+46(09),=C'NOT FOUND'      GUESS WHY SHOWCAT FAILED\n         TPUT  MSG,80                        TELL USER\n         B     FIN                           AND QUIT\nGETCINUM EQU   *\n         BAL   R14,SETPTR                    SET -> TO ASSOC\n         MVC   CID(3),SHWACI                 CI OF THE ASSOCIATED ENTRY\n         L     R2,SHWACBP                    GET CATALOG ACB POINTER\n         ST    R2,ACBA                       AND SAVE IT\n         CLC   SHWASS0,=H'2'                 ANY ASSOCIATED PTRS?\n         BNE   CHKOPEN                       NO, SO CHECK IF CAT OPEN\n         LA    R9,4(R9)                      BUMP TO NEXT SET PTRS\n         MVC   CII(3),SHWACI                 SAVE CI OF INDEX COMPONENT\nCHKOPEN  EQU   *\n         TM    48(R2),X'10'                  IS ACB OPEN?\n         BO    SETPL                         YES, SO OK TO GO ON\n         TPUT  =C'CATALOG NOT OPEN',16       TELL CALLER\n         B     FIN                           AND EXIT\n         SPACE\n***********************************************************************\n* SET UP CATALOG FIELD PARAMETER LIST                                 *\n***********************************************************************\nSETPL    EQU   *\n         USING CTGFL,R9\n         LA    R9,FLD1                       POINT TO FIRST FIELD\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM1                     A(FIELDNAME)\n         MVC   0(08,R2),=C'ENTNAME '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD2                       POINT TO SECOND FIELD\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM2                     A(FIELDNAME)\n         MVC   0(08,R2),=C'DEVTYP  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD3                       POINT TO THIRD FIELD\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM3                     A(FIELDNAME)\n         MVC   0(08,R2),=C'VOLSER  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         DROP  R9\n         SPACE\n***********************************************************************\n* SET UP CATALOG PARAMETER LIST                                       *\n***********************************************************************\n         USING CTGPL,R1\n         LA    R1,CATPL            -> CATALOG PARAMETER LIST\n         OI    CTGOPTN1,CTGBYPSS\n         NI    CTGOPTN1,255-(CTGNAME+CTGCNAME)   CI AND ACB PROVIDED\n         XC    CTGOPTN2(1),CTGOPTN2              CLEAR\n         OI    CTGOPTN3,CTGLOC+CTGNUM+CTGAM0\n         LA    R2,CID              ADDRESS OF CONTROL INTERVAL\n         ST    R2,CTGENT           SAVE IT\n         LA    R2,ACBA             A(CATALOG ACB)\n         ST    R2,CTGCAT           SAVE IT IN PARM LIST\n         LA    R2,AREA             -> WORK AREA\n         ST    R2,CTGWKA           SAVE IT IN PARM LIST\n         MVI   CTGTYPE,C'D'        INDICATE 'DATA' REQD\n         MVI   CTGNOFLD,X'03'      NUMBER OF FPLS\n         LA    R2,FLD1             POINT TO CTGFIELD\n         ST    R2,CTGFIELD         SAVE IT IN PARM LIST\n         LA    R2,FLD2             POINT TO CTGFIELD\n         ST    R2,CTGFL2           SAVE IT IN PARM LIST\n         LA    R2,FLD3             POINT TO CTGFIELD\n         ST    R2,CTGFL3           SAVE IT IN PARM LIST\n         SPACE\n         SVC   26                  ISSUE CATALOG SVC\n         LTR   R15,R15             HOW DID WE DO?\n         EJECT\n         MVC   MSG(6),=C'DATA  '   COMPONENT TYPE\n         MVC   MSG+6(44),AREA+4    MOVE VSAM DSN INTO MSG\n         MVC   MSG+52(2),=C'ON'    MAKE MESSAGE READ BETTER\n         MVC   MSG+55(6),AREA+4+44+4  MOVE VOLSER INTO MSG\n         SPACE\n         TPUT  USERDSN,44          TELL OUR NAME\n         TPUT  MSG,80              AND NOW TELL VSAM NAME AND VOLSER\n         SPACE\n         CLC   CII,=C'   '         CII HAS DATA?\n         BE    FIN\n         LA    R1,CATPL            -> CATALOG PARAMETER LIST\n         LA    R2,CII              ADDRESS OF CONTROL INTERVAL\n         ST    R2,CTGENT           SAVE IT\n         MVI   CTGTYPE,C'I'        INDICATE 'INDEX' REQD\n         SVC   26                  ISSUE CATALOG SVC\n         MVC   MSG(6),=C'INDEX '   COMPONENT NAME\n         MVC   MSG+6(44),AREA+4    MOVE VSAM DSN INTO MSG\n         MVC   MSG+52(2),=C'ON'    MAKE IT READ BETTER\n         MVC   MSG+55(6),AREA+4+44+4  MOVE VOLSER INTO MSG\n         TPUT  MSG,80              TELL VSAM NAME\n         SPACE\nFIN      EQU   *\n         MOREND\nSETPTR   DS    0H\n         LA    R9,SHWASS           -> ASSOC PTRS\n         CLI   SHWTYPE,C'D'        DATA TYPE?\n         BER   R14                 YES, RETURN\n         CLI   SHWTYPE,C'I'        INDEX TYPE?\n         BER   R14                 RETURN\n         LA    R9,SHWASS0          -> TO ASSOC PTRS\n         BR    R14                 RETURN\n         EJECT\n* WORK AREAS ETC FOR DSN LOOKUP\nMVCDSN1  MVC   USERDSN(*-*),2(R1)       EXECUTED MOVE\nMSG      DC    CL80' '\nUSERDSN  DC    CL44' '\nACBA     DC    F'0'\nCID      DC    CL3' '               CI FOR DATA COMPONENT\nCII      DC    CL3' '               CI FOR INDEX COMPONENT\nFLDNM1   DC    CL8' '\nFLDNM2   DC    CL8' '\nFLDNM3   DC    CL8' '\nAREA     DC    H'512'               WORK AREA FOR\n         DC    510C' '              SHOWCAT AND SUBSEQUENTLY\n         DC    2C' '                USED BY OTHER PARTS OF PGM\n         SPACE\n         DS    0F\nCATPL    DC    (LCTGPL)X'00'\nCTGFL2   DC    F'0'\nCTGFL3   DC    F'0'\nFLD1     DC    (LCTGFL)X'00'\nFLD2     DC    (LCTGFL)X'00'\nFLD3     DC    (LCTGFL)X'00'\n         EJECT\n         IEZCTGPL\n         SPACE 5\n         IEZCTGFL\n         SPACE 5\n         IGGSHWPL\n         SPACE 5\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT133/FILE133.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT133", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}