{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011454000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE193.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE193.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x06\\n'", "DS1TRBAL": "b'\\xa0\\x92'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x82\\x00\\x08\\x01\\x82\\x00\\x0e\\x00\\x07'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$REF": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93\\x15/\\x01\\x00)\\x9f\\x113\\x00\\x18\\x00\\x08\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-06-01T00:00:00", "modifydate": "2000-10-25T11:33:00", "lines": 24, "newlines": 8, "modlines": 0, "user": "WSBG"}, "text": "This is an old program that is currently being used at this site.\nContribution is from:\n\n       Steinar Aasland\n       Kvaerner Engineering a.s          P.O. Box 222\n       Prof. Kohts vei 5                 N-1324 Lysaker\n       Lysaker,  NORWAY                  NORWAY\n\n       work:  phone - 47-675-94155\n              fax   - 47-675-95979\n\nFixed May 31, 2000 by Sam Golob.\n\n   1)  Cleaned up assembly for ASMA90 (HLASM R3) - still needs FLAG(5)\n       in assembly PARM, but there are only 2 non-serious errors.\n   2)  Allow copying of 64K blocks on a tape.  Block size = 64K\n\n       Sam Golob\n       P.O. Box 906\n       Tallman, NY  10982  USA\n\n                                  email:  sbgolob@attglobal.net\n                                          sbgolob@aol.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE193": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x08?\\x01\\x00\\x17\\x7f\\x10 \\x00\\x1a\\x00\\x05\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2000-06-25T10:20:00", "lines": 26, "newlines": 5, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 193 is from Steinar Aasland, formerly of Kvaerner         *   FILE 193\n//*           Engineering in Lysaker, Norway, and contains a        *   FILE 193\n//*           tape copying program called TCOPY.  This is an        *   FILE 193\n//*           old program.                                          *   FILE 193\n//*                                                                 *   FILE 193\n//*           This program can list the contents of a tape, or      *   FILE 193\n//*           copy it to another tape.  It has some features that   *   FILE 193\n//*           are not so often found in tape copy programs.         *   FILE 193\n//*                                                                 *   FILE 193\n//*           Fixed to be able to copy 64K block size on a tape,    *   FILE 193\n//*           by Sam Golob.  Also cleaned up some assembly errors   *   FILE 193\n//*           for ASMA90.  The macro processor is now a little      *   FILE 193\n//*           less forgiving.  Shorter strings now always compare   *   FILE 193\n//*           as less, so to be accurate, you have to pad them      *   FILE 193\n//*           to the same length.                                   *   FILE 193\n//*                                                                 *   FILE 193\n//*           I have now placed the TCOPY load module on File 035.  *   FILE 193\n//*                                                                 *   FILE 193\n//*           For help concerning this file, you may contact:       *   FILE 193\n//*                                                                 *   FILE 193\n//*           Sam Golob                                             *   FILE 193\n//*           P.O. Box 906                                          *   FILE 193\n//*           Tallman, NY  10982  USA                               *   FILE 193\n//*                                                                 *   FILE 193\n//*           email:  sbgolob@attglobal.net  or sbgolob@aol.com     *   FILE 193\n//*                                                                 *   FILE 193\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CASSCOPY": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x13\\x0f\\x00\\x93\\x13\\x0f\\x17G\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe3\\xc5\\xc9\\xd5\\xc1\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-05-10T00:00:00", "modifydate": "1993-05-10T17:47:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "STEINAR"}, "text": "//XXXXXXXT JOB (80001000XH923ES110000),TAPE,MSGCLASS=X,NOTIFY=T5200AA,\n//         CLASS=S,REGION=2048K,TIME=1\n//STEG1    EXEC PGM=TCOPY\n//STEPLIB  DD DSN=T5200AA.POV.LOAD,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=TAPE,VOL=SER=INPUT,LABEL=(,BLP)\n//SYSUT2   DD UNIT=3480,VOL=SER=OUTPUT,LABEL=(,BLP)\n//SYSIN    DD *\n COPY FROMDD=SYSUT1,TODD=SYSUT2,LABEL=YES,CPYVOLID=YES,DEN=4\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TCOPY": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x93\\x13\\x0f\\x01\\x00\\x15?!X\\t\\x92\\t}\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1993-05-10T00:00:00", "modifydate": "2000-06-01T21:58:00", "lines": 2450, "newlines": 2429, "modlines": 0, "user": "WSBG"}, "text": "         PRINT GEN\n         MACRO\n         REQU  &A,&B\n         LCLA  &I,&J\n         AIF   (T'&A EQ 'N' AND T'&B EQ 'N').OK\n         MNOTE 8,'INVALID OPERAND(S), ALL REGS EQUATED'\n&J       SETA  15\n         AGO   .IN\n.OK      ANOP\n&I       SETA  &A\n&J       SETA  &B\n.IN      ANOP\nR&I      EQU   &I\n&I       SETA  &I+1\n         AIF   (&I LE &J).IN\n         MEND\n         SPACE 5\n         MACRO\n&NAME    DEFSW &SW,&NAMS,&TYPE=\n         GBLC  &SWT(10),&TNAMS(80)\n         GBLA  &PT,&PTX,&UNDSW,&DEFSWK\n         LCLA  &PT0,&NUM\n         LCLA  &PT1,&PT2,&SUB,&SWN\n.*\n.*         MACRO TO GENERATE SWITCH CONSTANTS AND EQUATES\n.*         WITH A MAXIMUM OF 8 EQUATES PER SWITCH CONSTANT\n.*\n         AIF   (T'&SW EQ 'O').GEN\n&NUM     SETA  1\n         AIF   ('&TYPE' EQ 'I').TI\n&NUM     SETA  N'&NAMS\n.TI      ANOP\n&PT1     SETA  1\n.LOP     AIF   (&PT1 GT &PT).NFND\n         AIF   ('&SWT(&PT1)' EQ '&SW').FND\n&PT1     SETA  &PT1+1\n         AGO   .LOP\n.FND     ANOP\n&PTX     SETA  &PT1\n&PT1     SETA  (&PTX-1)*8+1\n&PT2     SETA  &PT1+7\n.LOP2    AIF   ('&TNAMS(&PT1)' EQ '').END\n&PT1     SETA  &PT1+1\n         AIF   (&PT1 LE &PT2).LOP2\n         AGO   .ER2\n.END     ANOP\n&PT1     SETA  &PT1-&PT2+8\n         AIF   (&PT1+&NUM GT 9).ER2\n&PT0     SETA  &PT1-1\n         AGO   .LOOP\n.NFND    ANOP\n&PT      SETA  &PT+1\n         AIF   (&PT GT 10).ER1          TOO MANY SWITCH CONSTANTS\n         AIF   (&NUM GT 8).ER2          TOO MANY ASSOCIATED NAMES\n&PTX     SETA  &PT\n.*\n.*\n&PT1     SETA  1\n.LOOP    ANOP\n.*\n&SUB     SETA  &PT1+(&PTX-1)*8\n&TNAMS(&SUB) SETC '&NAMS(&PT1-&PT0)'\n&DEFSWK  SETA  &DEFSWK+1\n.*\n.*\n&PT1     SETA  &PT1+1\n         AIF   (&PT1-&PT0 LE &NUM).LOOP\n.*         END OF EQUATING LOOP\n&SWT(&PTX) SETC '&SW'\n         MEXIT\n.*\n.*\n.*\n.ER1     MNOTE 8,'TOO MANY SWITCH CONSTANTS'\n         MEXIT\n.ER2     MNOTE 8,'TOO MANY INTERNAL SWITCHES'\n         MEXIT\n.GEN     AIF   (&PT EQ 0).NOGEN\n         SPACE 3\n         MNOTE *,'  &DEFSWK SWITHES IN &PT BYTES DEFINED'\n         AIF   (&UNDSW EQ 0).NUN\n&PT2     SETA  (&UNDSW+7)/8\n         MNOTE *,'  &UNDSW IMPLICIT SWITCHES IN &PT2 BYTES DEFINED'\n         AIF   ('&TYPE' EQ 'I').NUN\n         MNOTE 4,'*** IMPLICITLY DEFINED SWITHES'\n.NUN     ANOP\n&PT2     SETA  1\n         AIF   (T'&NAME EQ 'O').LOOP1\n&NAME    DS    0XL&PT\n.LOOP1   ANOP\n&SWN     SETA  1\n&PT1     SETA  1\n         SPACE 3\n&SWT(&PT2)  DC X'00'\n.LOOP2   ANOP\n&SUB     SETA  &PT1+(&PT2-1)*8\n         AIF   ('&TNAMS(&SUB)' EQ '').DUN\n&TNAMS(&SUB)  EQU  &SWN\n&SWN     SETA  &SWN*2\n&PT1     SETA  &PT1+1\n         AIF   (&PT1 LE 8).LOOP2\n.DUN     ANOP\n&PT2     SETA  &PT2+1\n         AIF   (&PT2 LE &PT).LOOP1\n         SPACE 3\n         MEXIT\n.NOGEN   MNOTE *,'***  NO SWITCHES TO BE GENERATED'\n         SPACE 2\n         MEND\n         SPACE 5\n         MACRO\n&NAME    CNSRV &R,&TYPE\n         LCLA  &TST1\n         LCLC  &RR\n&RR      SETC '&R'                SET &RR\n         AIF   ('&TYPE' EQ 'R').B7\n         AIF   (K'&R NE 0).B1\n         MNOTE *,'***  REGISTER 13 ASSUMED'\n         AGO   .B2\n.*\n.B1      AIF   (&R NE 13).B3\n         AGO   .B2\n.*\n.B3      AIF   ((&R NE 0) AND (&R NE 14) ).B4\n.*\n         MNOTE 4,'*** REGISTER IS 0 OR 14,  13 ASSUMED'\n.B2      ANOP\n&TST1    SETA  1                  FORCE R13\n.*\n.B4      DS    0H\n         USING *,15\n&NAME    SAVE (14,12),T,*\n.*\n         AIF   ('&TYPE' EQ 'R' ).B9\n         AIF   ('&RR' EQ '15' OR &TST1 EQ 1).B5\n.*\n*\n         DROP  15\n         BALR  &RR,0      ESTABLISH BASE REGISTER\n         USING *,&RR\n.B5      CNOP  2,4  ALIGNMENT FOR SAVE AREA\n         ST    13,*+22+4   ESTABLISH REVERSE CHAIN IN THIS SAVE AREA\n         LR    14,13\n         LA    13,*+16\n.*                                TEST FOR R13 OR NOT\n         AIF   (&TST1 EQ 0).B6    &TST1 NOT SET, NOT R13\n.*\n         DROP  15\n         USING *+12,13            ESTABLISH BASE REGISTER\n.*\n.B6      ST    13,8(0,14) ESTABLISH FWD CHAIN IN PREVIOUS SAVE AREA\n         L     14,12(0,14)  RESTORE REGISTER 14\n         B     *+72+4  BRANCH AROUND SAVE AREA\n         DC    18F'0'      SAVE AREA\n*\n         MEXIT\n.*\n.*             RE-ENTRANT CODING\n.*\n.B7      AIF   (K'&R NE 0).B8\n         MNOTE *,'*** REGISTER 12 ASSUMED'\n&RR      SETC  '12'\n         AGO   .B4\n.*\n.B8      AIF   ( (&R GT 1) AND (&R NE 14) AND (&R NE 13) ).B4\n         MNOTE 4,'*** REGISTER IS 0,1,13, OR 14;  12 ASSUMED'\n&RR      SETC  '12'\n         AGO   .B4\n.*\n*              GET SPACE FOR SAVE AREA\n.B9      GETMAIN  R,LV=72\n*\n         LR    14,13   SAVE ADDRESS OF PREVIOUS SAVE AREA\n         ST    13,4(0,1) ESTABLISH REVERSE CHAIN IN THIS SAVE AREA\n         ST    1,8(0,13)  ESTABLISH FWD CHAIN IN PREVIOUS SAVE AREA\n         LR    13,1      POINT TO NEW SAVE AREA\n         AIF   (&RR EQ 15).B10\n         DROP  15\n         BALR  &RR,0        ESTABLISH BASE REGISTER\n         USING *,&RR\n.B10     LM    14,1,12(14)  RESTORE 14,15,0,1\n*\n         MEND\n         SPACE 5\n         MACRO\n&NAME    BOPEN &DCB,&ADR,&DRSDEEK=1\n&NAME    IHBINNRA &DCB\n         TM    48(1),X'10' .            TEST IF DCB OPEN\n         AIF   ('&ADR' EQ '&ADR(1)').NR\n         BCR   &DRSDEEK,&ADR(1)\n         MEXIT\n.NR      BC    &DRSDEEK,&ADR\n         MEND\n         SPACE 5\n         MACRO\n&NAME    BNOPEN &DCB,&ADR\n&NAME    BOPEN &DCB,&ADR,DRSDEEK=8\n         MEND\n         SPACE 5\n         MACRO\n&NAME    SWT   &OP,&SW\n         GBLA  &UNDSW\n         GBLC  &SWT(10),&TNAMS(80)\n         GBLC  &TEMPOX\n         GBLA  &TEMPCNT\n         GBLA  &PT,&PTX\n         GBLB  &BADSW\n         LCLC  &SWITCH\n         LCLC  &OPC,&SG,&OFF\n         LCLA  &PT1,&PT2,&SUB,&SWPT,&OLD\n         LCLB  &SUBSW\n         ACTR  1000\n.*\n.*         THE FOLLOWING ROUTINE SETS UP THE OP-CODE, AND SIGN CHAR.\n.*         FOR THE OUTPUT.   \"OI,XI,TM,NI\", SIGN=\"+,-\"\n.*\n&SG      SETC  '+'\n         AIF   ('&OP' NE 'OFF').N1\n&OFF     SETC  'X''FF''-'\n&SG      SETC  '-'\n&OPC     SETC  'NI'\n         AGO   .OPEX\n.N1      AIF   ('&OP' NE 'ON').N2\n&OPC     SETC  'OI'\n         AGO   .OPEX\n.N2      AIF   ('&OP' NE 'FLIP').N3\n&OPC     SETC  'XI'\n         AGO   .OPEX\n.N3      AIF   ('&OP' NE 'TEST').ER2\n&OPC     SETC  'TM'\n         AGO   .OPEX\n.ER2     SPACE 1\n         MNOTE 4,'*** UNDEFINED OPTION, ''TEST'' USED'\n&OPC     SETC  'TM'\n.OPEX    ANOP\n.*\n.*\n&PT2     SETA  &PT*8\n         AIF   (&PT EQ 0).ER1           NO SWITCHES DEFINED\n.*\n&SUB     SETA  1\n.LOOP1   ANOP                           COME HERE FOR EACH SWITCH\n&PT1     SETA  1\n.LOOP    ANOP                           COME HERE DURING SEARCH LOOP\n         AIF   ('&SW(&SUB)' EQ '&TNAMS(&PT1)').FND\n&PT1     SETA  &PT1+1\n         AIF   (&PT1 LE &PT2).LOOP\n         AIF   (&TEMPCNT GT 0 AND &TEMPCNT LT 8).TOK\n&TEMPCNT SETA  0\n&TEMPOX  SETC  'TSWT'.'&SYSNDX'\n.TOK     ANOP\n&TEMPCNT SETA  &TEMPCNT+1\n&SWITCH  SETC  '&SW(&SUB)'\n         DEFSW &TEMPOX,&SWITCH,TYPE=I\n&SWPT    SETA  &PTX\n&UNDSW   SETA  &UNDSW+1\n         AGO   .UND\n.FND     ANOP\n&SWPT    SETA  (&PT1+7)/8\n.UND     ANOP\n         AIF   (&SUBSW).SINGLE\n         AIF   (&OLD NE 0).NFRST        IF -0-, THEN FIRST TIME THRU\n&OLD     SETA  &SWPT\n         AGO   .NXT\n.NFRST   AIF   (&SWPT EQ &OLD).NXT\n         SPACE 1\n         MNOTE *,'*** SWITHCES NOT FROM SAME GROUP'\n.INDIV   MNOTE *,'*** OUTPUT INDIVIDUAL INSTRUCTIONS'\n         AIF   ('&OPC' NE 'TM').SP  OK IF NOT SWT TEST,.....\n         MNOTE 8,'*** \"TEST\" USED, ERROR WILL OCCUR'\n.SP      SPACE 1\n&SUBSW   SETB  1\n&SUB     SETA  &SUB-1                   DON-T OUTPUT LAST SWITCH\n         AGO   .OUT                     GO OUTPUT ALL PREVIOUS SWITHCES\n.NXT     ANOP\n         AIF   (&SUB EQ N'&SW).OUT      FINISHED, OUTPUT ALL SWITHCES\n&SUB     SETA  &SUB+1\n         AIF   (&SUB LE 8).LOOP1\n         SPACE 1\n         MNOTE *,'*** MORE THAN 8 SWITHCES'\n         AGO   .INDIV\n.*\n.SINGLE  ANOP\n         &OPC  &SWT(&SWPT),&OFF.&SW(&SUB)\n.AAA     ANOP\n&SUB     SETA  &SUB+1\n         AIF   (&SUB LE N'&SW).LOOP1\n         MEXIT\n.*\n.*\n.*         ROUTINE TO OUTPUT ARRAY SWITCH INSTRUCTIONS\n.*\n.OUT     ANOP\n         AIF   (&SUB EQ 1).ONE\n         AIF   (&SUB EQ 2).TWO\n         AIF   (&SUB EQ 3).THREE\n         AIF   (&SUB EQ 4).FOUR\n         AIF   (&SUB EQ 5).FIVE\n         AIF   (&SUB EQ 6).SIX\n         AIF   (&SUB EQ 7).SEVEN\n.EIGHT   ANOP\n&NAME    &OPC  &SWT(&OLD),&OFF&SW(1)&SG&SW(2)&SG&SW(3)&SG&SW(4)&SG&SW(5X\n               )&SG&SW(6)&SG&SW(7)&SG&SW(8)\n         AGO   .EXIT\n.SEVEN   ANOP\n&NAME    &OPC  &SWT(&OLD),&OFF&SW(1)&SG&SW(2)&SG&SW(3)&SG&SW(4)&SG&SW(5X\n               )&SG&SW(6)&SG&SW(7)\n         AGO   .EXIT\n.SIX     ANOP\n&NAME    &OPC  &SWT(&OLD),&OFF&SW(1)&SG&SW(2)&SG&SW(3)&SG&SW(4)&SG&SW(5X\n               )&SG&SW(6)\n         AGO   .EXIT\n.FIVE    ANOP\n&NAME    &OPC  &SWT(&OLD),&OFF&SW(1)&SG&SW(2)&SG&SW(3)&SG&SW(4)&SG&SW(5X\n               )\n         AGO   .EXIT\n.FOUR    ANOP\n&NAME    &OPC  &SWT(&OLD),&OFF&SW(1)&SG&SW(2)&SG&SW(3)&SG&SW(4)\n         AGO   .EXIT\n.THREE   ANOP\n&NAME    &OPC  &SWT(&OLD),&OFF&SW(1)&SG&SW(2)&SG&SW(3)\n         AGO   .EXIT\n.TWO     ANOP\n&NAME    &OPC  &SWT(&OLD),&OFF&SW(1)&SG&SW(2)\n         AGO   .EXIT\n.ONE     ANOP\n&NAME    &OPC  &SWT(&OLD),&OFF&SW(1)\n.*\n.EXIT    AIF   (&SUBSW).EXITS\n         MEXIT\n.EXITS   ANOP\n&SUB     SETA  &SUB+1\n         AGO   .SINGLE\n.ER1     SPACE 1\n         MNOTE 8,'*** NO SWITCHES DEFINED YET'\n         AIF   (&BADSW).ER1A\n         MNOTE *,'   NOTE THAT ALL SWITCHES MUST BE DEFINED IN A'\n         MNOTE *,'   ''DEFSW'' MACRO AT START OF PROGRAM, AND DUMPED'\n         MNOTE *,'   WHERE DESIRED BY ''DEFSW'' WITH NO OPERANDS'\n         SPACE 1\n&BADSW   SETB  1\n.ER1A    ANOP\n&NAME    NOP   0\n         MEND\n         SPACE 5\n         MACRO\n&NAME    PRINTA &ARG,&ARG2,&ARGL\n         GBLB  &IDSVCSW              INVERSE INTERNAL &DSVCSW\n         GBLB  &DRSEROR\n         LCLA  &PRINTS\n         LCLC  &AB,&EX,&RET\n         LCLC  &NAM\n         LCLA  &CNT,&QUOTS,&KNT,&PT\n         LCLC  &LQ\n         LCLA  &BRKNT\n&PRINTS  SETA  0\n&EX      SETC  'PRINTA'\n&LQ      SETC  'L'''\n         AIF   (T'&ARG EQ 'O').NOOP\n         AIF   ('&ARG'(1,1) NE '''').ER1\n&CNT     SETA  K'&ARG-2\n&KNT     SETA  &CNT\n&PT      SETA  2\n.B2      AIF   ('&ARG'(&PT,1) NE '''').B1\n&QUOTS   SETA  &QUOTS+1\n.B1      ANOP\n&PT      SETA  &PT+1\n&CNT     SETA  &CNT-1\n         AIF   (&CNT NE 0).B2\n&QUOTS   SETA  &QUOTS/2\n&KNT     SETA  &KNT-&QUOTS\n         AIF   (NOT &IDSVCSW).ND1\n&NAME    L     15,=V(ERBUF) -        ADDRESS OF OUTPUT BUFFER\n         BCTR  15,0\n         MVC   &PRINTS.(&KNT,15),=C&ARG\n         AGO   .D1\n.ND1     ANOP\n         AIF   (&KNT EQ 1).MOVE1\n         AIF   (&DRSEROR).INL1\n&NAME    MVC   ERBUF-1+&PRINTS.(&KNT),=C&ARG\n         AGO   .INL1A\n.INL1    ANOP\n&NAME    MVC   ERBUF-1+&PRINTS.(&KNT),*+10\n&BRKNT   SETA  ((&KNT+1)/2)*2\n         B     *+4+&BRKNT\n         DC    C&ARG\n.INL1A   ANOP\n         AGO   .MOVEM1\n.MOVE1   ANOP\n&NAME    MVI   ERBUF-1+&PRINTS,C&ARG\n.MOVEM1  ANOP\n.D1      ANOP\n         AIF   (T'&ARG2 EQ 'O').OLDV\n         AIF   (T'&ARGL EQ 'O').NOLEN\n         AIF   (NOT &IDSVCSW).ND2\n         MVC   &KNT+1(&ARGL,15),&ARG2\n         AGO   .D2\n.ND2     MVC   ERBUF+1+&KNT.(&ARGL),&ARG2\n.D2      AGO   .OLDV\n.NOLEN   AIF   (NOT &IDSVCSW).ND3\n         MVC   &KNT+1(&LQ&ARG2,15),&ARG2\n         AGO   .D3\n.ND3     MVC   ERBUF+1+&KNT.(&LQ&ARG2),&ARG2\n.D3      ANOP\n.OLDV    ANOP\n         AIF   (NOT &IDSVCSW).ND4\n&NAM     L     15,=V(&EX) -          ADDRESS OF ROUTINE\n&EX      SETC  '0(0,15)'\n&NAM     SETC  ''\n.ND4     ANOP\n&NAM     BAL   14,&EX\n         MEXIT\n.ER1     SPACE 1\n         MNOTE 4,'*** ILLEGAL OPERAND TO PRINTA(F) - &ARG'\n         MNOTE *,'*** NO OPERAND ASSUMED'\n         SPACE 1\n.NOOP    ANOP\n&NAM     SETC  '&NAME'\n         AGO   .OLDV\n         SPACE 5\n         MEND\n         SPACE 5\n         MACRO\n&NAME    ERROR &R,&ARG,&ARG2,&ARGL\n         GBLB  &IDSVCSW                 INVERSE INTERNAL &DSVCSW\n         GBLB  &DRSEROR\n         LCLC  &AB,&EX,&RET\n         LCLA  &CNT,&QUOTS,&KNT,&PT\n         LCLC  &LQ\n         LCLA  &BRKNT\n         AIF   ('&R' EQ 'INLINE').INL\n         AIF   ('&R' EQ 'NINLINE').NINL\n&LQ      SETC  'L'''\n         AIF   ('&ARG'(1,1) NE '''').B4\n&CNT     SETA  K'&ARG-2\n&KNT     SETA  &CNT\n&PT      SETA  2\n.B2      AIF   ('&ARG'(&PT,1) NE '''').B1\n&QUOTS   SETA  &QUOTS+1\n.B1      ANOP\n&PT      SETA  &PT+1\n&CNT     SETA  &CNT-1\n         AIF   (&CNT NE 0).B2\n&QUOTS   SETA  &QUOTS/2\n&KNT     SETA  &KNT-&QUOTS\n         AIF   (NOT &IDSVCSW).ND1\n&NAME    L     15,=V(ERBUF) -           ADDRESS OF THE OUTPUT BUFFER\n         MVC   9(&KNT,15),=C&ARG\n         AGO   .D1\n.ND1     ANOP\n         AIF   (&DRSEROR OR '&R(3)' EQ 'I').INLA\n&NAME    MVC   ERBUF+9(&KNT),=C&ARG\n         AGO   .INL1\n.INLA    ANOP\n&NAME    MVC   ERBUF+9(&KNT),*+10\n&BRKNT   SETA  ((&KNT+1)/2)*2\n         B     *+4+&BRKNT\n         DC    C&ARG\n.INL1    ANOP\n.D1      ANOP\n         AIF   (T'&ARG2 EQ 'O').OLDV\n         AIF   (T'&ARGL EQ 'O').NOLEN\n         AIF   (NOT &IDSVCSW).ND2\n         MVC   &KNT+10(&ARGL,15),&ARG2\n         AGO   .D2\n.ND2     MVC   ERBUF+10+&KNT.(&ARGL),&ARG2\n.D2      AGO   .OLDV\n.NOLEN   AIF   (NOT &IDSVCSW).ND3\n         MVC   &KNT+10(&LQ&ARG2,15),&ARG2\n         AGO   .D3\n.ND3     MVC   ERBUF+10+&KNT.(&LQ&ARG2),&ARG2\n.D3      ANOP\n.OLDV    ANOP\n&EX      SETC  'EPRINT+4'\n&RET     SETC  'EPRINT+8'\n&AB      SETC  'EPRINT'\n         AIF   (NOT &IDSVCSW).ND4\n&EX      SETC  '4(0,15)'\n&RET     SETC  '8(0,15)'\n&AB      SETC  '0(0,15)'\n         L     15,=V(EPRINT) -          ADDRESS OF PUT ROUTINE\n.ND4     AIF   ('&R(1)' NE '').OPT\n.EX      BAL   14,&EX -                 ERROR WITH NORMAL EXIT\n         AGO   .CODE\n.OPT     AIF   ('&R(1)' EQ 'E').EX\n         AIF   ('&R(1)' EQ 'R').RET\n         AIF   ('&R(1)' EQ 'A').AB\n         MNOTE 2,'ILLEGAL CODE CHCARACTER, ''E'' ASSUMED'\n         AGO   .EX\n.RET     BAL   14,&RET -                RETURN\n         AGO   .CODE\n.AB      BAL   14,&AB -                 ABEND\n.CODE    AIF   ('&R(2)' EQ '').COD      OUTPUT '0'\n         DC    AL1(&R(2))\n         MEXIT\n.COD     DC    AL1(0)\n         MEXIT\n.INL     ANOP\n&DRSEROR SETB  1\n         MEXIT\n.NINL    ANOP\n&DRSEROR SETB  0\n         MEXIT\n.B4      MNOTE 4,'ILLEGAL ARGUMENT TO ERROR - &ARG'\n         MEND\n         SPACE 5\n          MACRO\n&NAME    GOBCK &RC,&TYPE\n         LCLB  &SWITCH\n         LCLC &RCRC\n&RCRC   SETC   '0'                INITIALIZE &RCRC\n.*\n&NAME    L     13,4(0,13) -       RESTORE REGISTER 13\n.*\n         AIF   ('&TYPE' NE 'R').A02\n         AIF   ('&RC' NE '(15)' ).A01\n.*\n&SWITCH  SETB  1\n         ST    15,16(0,13)  STORE REGISTER 15 IN SAVE AREA\n.*             RE-ENTRANT RELEASE OF SAVE AREA\n*\n.A01     L     1,8(0,13) POINT TO FORWARD SAVE AREA AND FREE IT\n         FREEMAIN  R,LV=72,A=(1)     FREE SAVE AREA\n*\n.A02     AIF   (K'&RC EQ 0).A1    OPERAND OMITTED, ZERO OK\n&RCRC    SETC '&RC'               RESET &RCRC\n.*\n         AIF   ('&RC'(1,1) EQ '(' AND NOT &SWITCH).A2  OPERAND (15) ?\n.A1      ANOP                     NO, COMPILE TYPE 1\n         LM    14,12,12(13) -     RESTORE THE REGISTERS\n         MVI   12(13),X'FF' -     SET RETURN INDICATION\n         AIF   (&SWITCH).A15\n         LA   15,&RCRC  -             LOAD RETURN CODE\n.A15     BR    14 -               RETURN\n*\n         MEXIT\n.*             COMPILE TYPE 2 GOBCK\n.A2      AIF   ('&RC' EQ '(15)' ).A3\n         MNOTE 8,'***   INVALID REGISTER SPECIFICATION, MUST BE (15)'\n.A3      ANOP\n         L     14,12(0,13) -      RESTORE REGISTER 14\n         LM    0,12,20(13) -      RESTORE REGISTERS 0-12\n         MVI   12(13),X'FF' -     SET RETURN INDICATION\n         BR    14 -               RETURN\n*\n         MEND\n         SPACE 5\n         MACRO\n&NAME    PRINTF &ARG,&ARG2,&ARGL\n         GBLB  &IDSVCSW\n         GBLB  &DRSEROR\n         GBLA  &PRINTFS\n         LCLA  &PRINTS\n         LCLC  &AB,&EX,&RET\n         LCLC  &NAM,&LQ\n         LCLA  &CNT,&QUOTS,&KNT,&PT\n         LCLA  &BRKNT\n&PRINTS  SETA  &PRINTFS\n&EX      SETC  'PRINTF'\n&LQ      SETC  'L'''\n         AIF   (T'&ARG EQ 'O').NOOP\n         AIF   ('&ARG'(1,1) NE '''').ER1\n&CNT     SETA  K'&ARG-2\n&KNT     SETA  &CNT\n&PT      SETA  2\n.B2      AIF   ('&ARG'(&PT,1) NE '''').B1\n&QUOTS   SETA  &QUOTS+1\n.B1      ANOP\n&PT      SETA  &PT+1\n&CNT     SETA  &CNT-1\n         AIF   (&CNT NE 0).B2\n&QUOTS   SETA  &QUOTS/2\n&KNT     SETA  &KNT-&QUOTS\n         AIF   (NOT &IDSVCSW).ND1\n&NAME    L     15,=V(ERBUF) -        ADDRESS OF OUTPUT BUFFER\n         BCTR  15,0\n         MVC   &PRINTS.(&KNT,15),=C&ARG\n         AGO   .D1\n.ND1     ANOP\n         AIF   (&KNT EQ 1).MOVE1\n         AIF   (&DRSEROR).INL1\n&NAME    MVC   ERBUF-1+&PRINTS.(&KNT),=C&ARG\n         AGO   .INL1A\n.INL1    ANOP\n&NAME    MVC   ERBUF-1+&PRINTS.(&KNT),*+10\n&BRKNT   SETA  ((&KNT+1)/2)*2\n         B     *+4+&BRKNT\n         DC    C&ARG\n.INL1A   ANOP\n         AGO   .MOVEM1\n.MOVE1   ANOP\n&NAME    MVI   ERBUF-1+&PRINTS,C&ARG\n.MOVEM1  ANOP\n.D1      ANOP\n         AIF   (T'&ARG2 EQ 'O').OLDV\n         AIF   (T'&ARGL EQ 'O').NOLEN\n         AIF   (NOT &IDSVCSW).ND2\n         MVC   &KNT+1(&ARGL,15),&ARG2\n         AGO   .D2\n.ND2     MVC   ERBUF+1+&KNT.(&ARGL),&ARG2\n.D2      AGO   .OLDV\n.NOLEN   AIF   (NOT &IDSVCSW).ND3\n         MVC   &KNT+1(&LQ&ARG2,15),&ARG2\n         AGO   .D3\n.ND3     MVC   ERBUF+1+&KNT.(&LQ&ARG2),&ARG2\n.D3      ANOP\n.OLDV    ANOP\n         AIF   (NOT &IDSVCSW).ND4\n&NAM     L     15,=V(&EX) -          ADDRESS OF ROUTINE\n&EX      SETC  '0(0,15)'\n&NAM     SETC  ''\n.ND4     ANOP\n&NAM     BAL   14,&EX\n         MEXIT\n.ER1     SPACE 1\n         MNOTE 4,'*** ILLEGAL OPERAND TO PRINTA(F) - &ARG'\n         MNOTE *,'*** NO OPERAND ASSUMED'\n         SPACE 1\n.NOOP    ANOP\n&NAM     SETC  '&NAME'\n         AGO   .OLDV\n         SPACE 5\n         MEND\n         SPACE 5\n         MACRO\n&NAME    MINIT &CSPEC=0,&LSPEC=0,&CODSPEC=0,&ADSPEC=0\n         GBLA  &CH,&L,&CO,&AD\n&CH      SETA  &CSPEC\n&L       SETA  &LSPEC\n&CO      SETA  &CODSPEC\n&AD      SETA  &ADSPEC\n         SPACE 3\n         MNOTE *,'      START OF SEQUENCED TABLE'\n         SPACE 1\n&NAME    DS    0F\n         MEND\n         SPACE 5\n         MACRO\n&NAME    MNEM  &ARG,&CODE\n         GBLA  &CH,&L,&CO,&AD\n         GBLC  &NEW01,&OLD01\n         LCLC  &NW\n         LCLA  &LEN\n         AIF   (T'&ARG EQ 'O').END\n&LEN     SETA  K'&ARG-2\n&NEW01   SETC  '&ARG'(2,&LEN)\n&NW      SETC  '&NEW01'.'               '\n&NW      SETC  '&NW'(1,&CH)\n         AIF   ('&NW' GT '&OLD01').OK\n         SPACE 1\n         MNOTE 4,'*** OUT OF SEQUENCE'\n         SPACE 1\n.OK      ANOP\n&OLD01   SETC  '&NW'\n&NAME    DC    CL&CH&ARG\n         AIF   (&L EQ 0).A1\n         DC    AL&L.(&LEN)\n.A1      AIF   (&CO EQ 0).A2\n         DC    AL&CO.(&CODE)\n.A2      AIF   (&AD EQ 0).A3\n         DC    AL&AD.(&NEW01)\n.A3      MEXIT\n.END     DC    &CH.X'FF'\n&OLD01   SETC  ' '\n         SPACE 1\n         MNOTE *,'      END OF SEQUENCED TABLE'\n         SPACE 3\n         MEND\n         SPACE 5\n         MACRO\n&NAM     DCBE  &LRECL=,&BLKSIZE=,&BLKFACT=,&BUFNO=,&RECFM=,&CHECK=,    X\n               &REG=1,&TYPE=CLOSED,&ERROR=,&EXLST=,&CSECT=,&XRECFM=\n         GBLA  &RCFMDRS\n         GBLB  &FFMSW,&VFMSW,&BFMSW\n         LCLC  &LABL3,&LABL4,&LABL5,&LABL6,&LABL,&LABL2\n         LCLC  &LABL7,&LABL8,&LABL9,&NAME,&RC,&CSCT\n         LCLB  &ERSW,&EXSW\n         LCLA  &N,&P,&R,&X\n         SPACE 2\n&LABL    SETC  'RCFM'.'&SYSNDX'\n&CSCT    SETC  '&SYSECT'\n&FFMSW   SETB  0\n&VFMSW   SETB  0\n&BFMSW   SETB  0\n&LABL2   SETC  'ERRX'.'&SYSNDX'\n&NAME    SETC  '&NAM'\n&ERSW    SETB  (T'&ERROR NE 'O')\n&EXSW    SETB  (T'&EXLST NE 'O')\n         AIF   (T'&CSECT EQ 'O').NCS\n&CSECT   CSECT\n.NCS     AIF   ('&TYPE' NE 'CLOSED').NCK1\n         AIF   (NOT &ERSW).OKA\n         MNOTE 4,'*** ERROR= - IGNORED FOR TYPE=CLOSED'\n&ERSW    SETB  1\n         AGO   .OKA\n.NCK1    AIF   (NOT &EXSW).OKA          OK IF EXLST NOT SPECIFIED\n         MNOTE 4,'*** EXLST= IGNORED FOR TYPE=OPEN'\n&EXSW    SETB  1\n.OKA     AIF   (T'&NAM EQ 'O').NNM\n         AIF   (NOT &EXSW).NEXL\n.EXL     DS    0F\n&EXLST   DC    X'85',AL3(&NAME) .       EXIT LIST\n.NEXL    AIF   ('&TYPE' EQ 'OPEN').NTP  BR. IF NOT CLOSED\n         USING &NAME,15\n.NTP     ANOP\n&NAME    DS    0H\n         AGO   .OKN\n.NNM     AIF   ('&TYPE' EQ 'OPEN').OKN\n         AIF   (&EXSW).EXOK\n         MNOTE 12,'*** NO LABEL SPECIFIED FOR TYPE=CLOSED, TERMINATED'\n         MEXIT\n.EXOK    ANOP\n&NAME    SETC  'EXLB'.'&SYSNDX'\n         AGO   .EXL\n.OKN     SR    0,0 .                    ZERO INTO GR-0\n&R       SETA  2\n         AIF   ('&R' NE '&REG').OK\n&R       SETA  3\n.OK      AIF   ('&TYPE' NE 'OPEN').NSR\n&LABL3   SETC  'RSAV'.'&SYSNDX'\n         ST    &R,&LABL3\n.NSR     AIF   (T'&RECFM EQ 'O').NRECFM\n         DRSRECFM ,TYPE=OK              CLEAR OUT GLOBAL SWITCHES\n*\n*          RECFM =   HANDLER\n*\n&N       SETA  N'&RECFM\n         AIF   (&N LT 2 AND '&XRECFM' EQ '').NX2\n&FFMSW   SETB  1\n&VFMSW   SETB  1\n&BFMSW   SETB  1\n         AIF   ('&XRECFM' EQ '').NX2\n&RC      SETC  ''\n&X       SETA  1\n.LOPX    AIF   (&X GT N'&XRECFM).NX\n&RC      SETC  '&RC'.'&XRECFM(&X)'\n&X       SETA  &X+1\n         AGO   .LOPX\n.NX      DRSRECFM &RC,TYPE=X\n&X       SETA  &RCFMDRS\n.NX2     DRSRECFM &RECFM(1)\n         LA    &R,&RCFMDRS .                  OBTAIN DEFAULT RECFM\n         CLI   36(&REG),0 .                COMPARE RECFM TO ZERO\n         AIF   ('&XRECFM' EQ '' AND N'&RECFM EQ 1).SPEC\n.CHK1    BE    &LABL .               BR. IF RECFM IS ZERO\n         IC    &R,36(0,&REG) .              SAVE FOR FUTURE USE\n&P       SETA  1\n         AIF   ('&XRECFM' EQ '').LOP\n         NI    36(&REG),X'FF'-&X .        REMOVE EXTRA TYPES\n         AGO   .LOP\n.SPEC    BNE   &LABL+4 .             BR. IF RECFM NOT ZERO\n         AGO   .CRYON\n.LOPP    BE    &LABL .               BR. IF RECFM OK\n.LOP     DRSRECFM &RECFM(&P)            GET RECFM IN NUMERICS\n         CLI   36(&REG),&RCFMDRS .             SEE IF ALLOWABLE RECFM\n&P       SETA  &P+1\n         AIF   (&P LE &N).LOPP\n         BNE   &LABL2 .               BR. IF RECFM NOT OK\n.CRYON   ANOP\n&LABL    STC   &R,36(0,&REG) .              STORE RECFM\n.NRECFM  AIF   ('&XRECFM' EQ '' OR '&RECFM' NE '').NXRCFM\n         MNOTE 4,'*** XRECFM= SPECIFIED WITH NO RECFM PARAMTER'\n.NXRCFM  AIF   ('&LRECL' EQ '').NLRECL\n*\n*          LRECL=   HANDLER\n*\n         AIF   (T'&LRECL(1) NE 'O').LOK     BR. IF LRECL DEFAULT SPEC.\n         MNOTE 4,'*** LRECL DEFAULT NOT SPECIFIED'\n         AGO   .LOK2\n.LOK     CH    0,82(0,&REG)\n         AIF   ('&LRECL(1)'(1,1) EQ '(').LR\n         BNE   *+12 .                   BR. IF LRECL NOT ZERO\n&LABL4   SETC  'LRCL'.'&SYSNDX'\n         LH    &R,&LABL4 .             GET DEFAULT LRECL\n         STH   &R,82(0,&REG) .              STORE INTO LRECL\n         AGO   .LOK2\n.LR      BNE   *+8 .                    BR. IF LRECL NOT ZERO\n&RC      SETC  '&LRECL(1)'(2,K'&LRECL(1)-2)\n         STH   &RC,82(0,&REG) .              STORE DEFAULT LRECL\n.LOK2    AIF   (T'&LRECL(2) EQ 'O').NLRECL\n         AIF   ('&LRECL(2)'(1,1) EQ '(').LMR\n&LABL9   SETC  'LRLM'.'&SYSNDX'\n         LH    &R,&LABL9 .             GET MAXIMUM LRECL\n         CH    &R,82(0,&REG) .              COMPARE MAX. TO LRECL\n         AGO   .LMRN\n.LMR     ANOP\n&RC      SETC  '&LRECL(2)'(2,K'&LRECL(2)-2)\n         CH    &RC,82(0,&REG) .              COMPARE MAX. TO LRECL\n.LMRN    BL    &LABL2 .               BR. IF LRECL TOO HIGH\n.NLRECL  AIF   (T'&BLKFACT EQ 'O').NFCT\n*\n*          BLKFACT=    HANDLER\n*\n&LABL8   SETC  'BFCT'.'&SYSNDX'\n         CH    0,62(0,&REG) .              COMPARE BLKSIZE TO ZERO\n         AIF   (&FFMSW).SML\n         BNE   *+32 .                   BR. IF BLKSIZE NOT ZERO\n         AGO   .LRG\n.SML     BNE   *+20 .                   BR. IF BLKSIZE NOT ZERO\n.LRG     LH    &R,82(0,&REG) .              OBTAIN LRECL\n         MH    &R,&LABL8 .             MULTIPLY BY BLOCKING FACTOR\n         AIF   (&FFMSW).NOTV\n         TM    36(&REG),B'10000000' .      TEST IT RECFM='V'\n         BO    *+8 .                    BR. IF IT IS NOT 'V'\n         LA    &R,4(0,&R) .               ADD '4' FOR BLOCKED V FORMAT\n.NOTV    STH   &R,62(0,&REG) .              INSERT CALCULATED BLKSIZE\n         OI    36(&REG),B'00100000' .      FORCE BLOCKING IF BLKFACT\n.NFCT    AIF   (T'&BLKFACT NE 'O' AND '&BLKSIZE' EQ '').NBLK\n*\n*          BLKSIZE=   HANDLER\n*\n         AIF   (T'&BLKSIZE(1) NE 'O' OR T'&BLKFACT NE 'O').DOBLK\n.DBLK1   CH    0,62(0,&REG) .              COMPARE BLKSIZE TO ZERO\n         BNE   *+12 .                   BR. IF NOT ZERO\n         LH    &R,82(0,&REG) .              OBTAIN LRECL\n         STH   &R,62(0,&REG) .              STORE IN BLKSIZE\n         AGO   .NBLK1\n.DOBLK   AIF   (T'&BLKSIZE(1) EQ 'O').NBLK1\n         AIF   (T'&BLKFACT EQ 'O').NBF1\n         MNOTE 4,'*** BLKSIZE DEFAULT IGNORED WHEN BLKFACT SPECIFIED'\n         AGO   .NBLK1\n.NBF1    CH    0,62(0,&REG) .              COMPARE BLKSIZE TO ZERO\n         AIF   ('&BLKSIZE(1)'(1,1) EQ '(').BR\n         BNE   *+12 .                   BR. IF BLKSIZE NOT ZERO\n&LABL5   SETC  'BLKZ'.'&SYSNDX'\n         LH    &R,&LABL5 .             GET DEFAULT BLKSIZE\n         STH   &R,62(0,&REG) .              STORE DEFAULT BLKSIZE\n         AGO   .NBLK1\n.BR      BNE   *+8 .                    BR. IF BLKSIZE NOT ZERO\n&RC      SETC  '&BLKSIZE(1)'(2,K'&BLKSIZE(2)-2)\n         STH   &RC,62(0,&REG) .              STORE DEFAULT BLKSIZE\n.NBLK1   AIF   (T'&BLKSIZE(2) EQ 'O').NBLK\n         AIF   ('&BLKSIZE(2)'(1,1) EQ '(').BMR\n&LABL6   SETC  'BLKC'.'&SYSNDX'\n         LH    0,&LABL6 .             GET MAXIMUM BLKSIZE\n         CH    0,62(0,&REG) .              COMPARE BLKSIZE TO MAX.\n         AGO   .BMRN\n.BMR     ANOP\n&RC      SETC  '&BLKSIZE(2)'(2,K'&BLKSIZE(2)-2)\n         CH    &RC,62(0,&REG) .              COMPARE BLKSIZE TO MAX.\n.BMRN    BL    &LABL2 .               BR. IF BLKSIZE TOO LARGE\n.NBLK    AIF   ('&BUFNO' EQ '').NBUF\n*\n*          BUFNO=   HANDLER\n*\n         AIF   (T'&BUFNO(1) EQ 'O').BFRN\n         CLI   20(&REG),0 .                COMPARE BUFNO TO ZERO\n         BNE   *+8 .                    BR. IF BUFNO IS ZERO\n         AIF   ('&BUFNO(1)'(1,1) EQ '(').BFR\n         MVI   20(&REG),&BUFNO(1) .               MOVE IN DEFAULT BUFNO\n         AGO   .BFRN\n.BFR     ANOP\n&RC      SETC  '&BUFNO(1)'(2,K'&BUFNO(1)-2)\n         STC   &RC,20(0,&REG) .              STORE DEFAULT BUFNO\n.BFRN    AIF   (T'&BUFNO(2) EQ 'O').NBUF\n         AIF   ('&BUFNO(2)'(1,1) EQ '(').BFMR\n         CLI   20(&REG),&BUFNO(2) .               COMPARE TO MAX. BUFNO\n         BNH   *+8 .                    BR. IF BUFNO TOO BIG\n         MVI   20(&REG),&BUFNO(2) .               MOVE IN MAX. BUFNO\n         AGO   .NBUF\n.BFMR    SR    0,0\n         IC    0,20(0,&REG) .              GET SPECIFIED BUFNO\n&RC      SETC  '&BUFNO(2)'(2,K'&BUFNO(2)-2)\n         CR    &RC,0 .                    COMPARE TO MAX. BUFNO\n         BNH   *+8 .                    BR. IF BUFNO NOT TOO HIGH\n         STC   &RC,20(0,&REG) .              STORE MAX. BUFNO\n.NBUF    AIF   ('&CHECK' EQ '').NVC      BR. IF NOC HECK SPECIFIED\n&LABL2   SETC  'ERRX'.'&SYSNDX'\n         AIF   ('&CHECK(1)' NE 'F' AND '&CHECK' NE 'YES' OR &VFMSW).NFC\n*\n*          CROSS CHECK 'F' FORMAT\n*\n         AIF   (&FFMSW).ALB2\n         TM    36(&REG),B'01000000' .      TEST FOR RECFM=F\n         AIF   (&BFMSW).ALB1\n         BO    *+32 .                   BR. IF NOT RECFM=F\n         AGO   .ALB2\n.ALB1    BO    *+20 .                   BR. IF NOT RECFM=F\n.ALB2    LH    0,62(0,&REG) .              GET BLKSIZE\n         AIF   (&BFMSW).ALB\n         CH    0,82(0,&REG) .              COMPARE BLKSIZE TO LRECL\n         BNH   *+8 .                    BR. IF NOT BLOCKED\n         OI    36(&REG),B'00010000' .      FORCE BLOCKED IF B>L\n.ALB     SH    0,82(0,&REG) .              SUBTRACT 1 LRECL\n         BP    *-4 .                    BR. IF STILL MORE\n         BNZ   &LABL2 .               ERROR IF NOT EVEN NO. OF LRECL\n.NFC     AIF   ('&CHECK(1)' NE 'V' AND '&CHECK(2)' NE 'V' AND '&CHECK' X\n               NE 'YES' OR &FFMSW).NVC\n*\n*          CROSS CHECK 'V' FORMAT\n*\n         AIF   (&VFMSW).MUSTV\n         TM    36(&REG),B'10000000' .      CHECK IF RECFM=V\n         BO    *+28 .                   BR. IF NOT RECFM=V\n.MUSTV   ANOP\n         LH    0,82(0,&REG) .              GET LRECL\n         TM    36(&REG),B'00010000' .      CHECK IF BLKOCKED\n         BZ    *+8 .                    BR. IF NOT BLOCKED\n&LABL7   SETC  'FOUR'.'&SYSNDX'\n         AH    0,&LABL7 .             ADD FOUR TO LRECL\n         CH    0,62(0,&REG) .           COMPARE TO BLKSIZE\n         BH    &LABL2 .                 BR. IF BLKSIZE < LRECL+4\n.NVC     AIF   ('&TYPE' EQ 'OPEN').NVC1\n         BR    14\n         AGO   .DUN\n.NVC1    B     &LABL2+8 .             BR. TO EXIT STATEMENTS\n.DUN     SPACE 1\n         AIF   ('&LABL3' EQ '').N1\n&LABL3   DS    F\n.N1      DRSORG &LABL4,&LABL5,&LABL6,&LABL7,&LABL8,&LABL9,&LRECL(1),   X\n               &BLKSIZE(1),&BLKSIZE(2),4,&BLKFACT(1),&LRECL(2)\n         AIF   ('&TYPE' NE 'OPEN').CLOS\n         AIF   (T'&ERROR NE 'O').YER\n.CLOS    DC    0A(0),X'80',AL3(432) .   ABEND U-432,DUMP\n&LABL2   LR    14,&REG .                   GET ADDRESS OF DCB FOR ABEND\n         L     1,&LABL2-4 .           GET ABEND CODE\n         SVC   13 .                     ISSUE ABEND SVC\n         AIF   ('&TYPE' EQ 'OPEN').NOPE\n         DROP  15\n         AGO   .MEX\n.YER     ANOP\n&LABL2   L     &R,&LABL3 .             RESTORE SAVED REGISTER\n         B     &ERROR .                  TAKE SPEIFIED ERROR EXIT\n.NOPE    L     &R,&LABL3 .             RESTORE SAVED REGISTER\n.MEX     AIF   (T'&CSECT EQ 'O').MEX1\n&CSCT    CSECT .                        RETURN TO OLD CSECT\n.MEX1    SPACE 2\n         MEND\n         SPACE 5\n         MACRO\n         DRSRECFM  &R,&TYPE=\n         GBLA  &RCFMDRS\n         GBLB  &FFMSW,&VFMSW,&BFMSW\n         GBLB  &SAXXXX,&SBXXXX,&STXXXX,&SMXXXX,&SSXXXX\n         LCLB  &SA,&SB,&ST,&SM,&SS\n         LCLA  &N,&P,&T\n         LCLC  &C\n         AIF   ('&TYPE' EQ '').NXX\n&SAXXXX  SETB  0\n&SBXXXX  SETB  0\n&STXXXX  SETB  0\n&SMXXXX  SETB  0\n&SSXXXX  SETB  0\n.NXX     ANOP\n&N       SETA  0\n&T       SETA  K'&R\n         AIF   (&T EQ 0).DUN\n&P       SETA  1\n         AIF   ('&TYPE' NE '').LP1\n&C       SETC  '&R'(1,1)\n         AIF   ('&C' NE 'F').NF\n&VFMSW   SETB  0\n&N       SETA  &N+128\n         AGO   .VF\n.NF      AIF   ('&C' NE 'V').NV\n&FFMSW   SETB  0\n&N       SETA  &N+64\n         AGO   .VF\n.NV      AIF   ('&C' NE 'U').ER1\n&VFMSW   SETB  0\n&FFMSW   SETB  0\n&N       SETA  &N+64+128\n&SB      SETB  1                        MARK RECFM=XB ILLEGAL\n&SS      SETB  1\n.VF      ANOP\n&P       SETA  2\n.LP1     AIF   (&P GT &T).DUN\n&C       SETC  '&R'(&P,1)\n         AIF   ('&C' NE 'B' OR &SB OR &SBXXXX).NB\n&N       SETA  &N+16\n&SB      SETB  1\n         AGO   .LP2\n.NB      AIF   ('&C' NE 'S' OR &SS OR &SSXXXX).NS\n&N       SETA  &N+8\n&SS      SETB  1\n         AGO   .LP2\n.NS      AIF   ('&C' NE 'T' OR &ST OR &STXXXX).NT\n&N       SETA  &N+32\n&ST      SETB  1\n         AGO   .LP2\n.NT      AIF   ('&C' NE 'A' OR &SA OR &SM OR &SAXXXX).NA\n&N       SETA  &N+4\n&SA      SETB  1\n         AGO   .LP2\n.NA      AIF   ('&C' NE 'M' OR &SM OR &SA OR &SMXXXX).ER2\n&SM      SETB  1\n&N       SETA  &N+2\n.LP2     ANOP\n&P       SETA  &P+1\n         AGO   .LP1\n.ER2     SPACE 1\n         MNOTE 4,'*** ''RECFM=&R'' - ILLEGAL OR DUPLICATE TYPE'\n         AGO   .ERX\n.ER1     SPACE 1\n         MNOTE 4,'*** ''RECFM=&R'' - IS ILLEGAL SPECIFICATION'\n.ERX     SPACE 1\n&N       SETA  0\n         MEXIT\n.DUN     AIF   ('&TYPE' EQ '').DUN1\n&SAXXXX  SETB  (&SA)\n&SBXXXX  SETB  (&SB)\n&SMXXXX  SETB  (&SM)\n&STXXXX  SETB  (&ST)\n&SSXXXX  SETB  (&SS)\n.DUN1    ANOP\n&RCFMDRS SETA  &N\n         AIF   (&SB).NBLK\n&BFMSW   SETB  0\n.NBLK    MEND\n         SPACE 5\n         MACRO\n         DRSORG\n         LCLA  &P,&N,&PT,&T\n&N       SETA  (N'&SYSLIST)/2\n&P       SETA  1\n.LOP2    AIF   ('&SYSLIST(&P)' EQ '').LENT\n&T       SETA  1\n         AIF   (&P EQ 1).NSAM\n.LOP     AIF   ('&SYSLIST(&N+&T)' EQ '&SYSLIST(&N+&P)' AND '&SYSLIST(&TX\n               )' NE '').SAM\n&T       SETA  &T+1\n         AIF   (&T LT &P).LOP\n.NSAM    ANOP\n&SYSLIST(&P) DC Y(&SYSLIST(&N+&P))\n.LENT    ANOP\n&P       SETA  &P+1\n         AIF   (&P LE &N).LOP2\n         MEXIT\n.SAM     ANOP\n&SYSLIST(&P) EQU &SYSLIST(&T)\n         AGO   .LENT\n         MEND\n         SPACE 5\n         SPACE 5\n         MACRO\n&NAME    GOBCK2 &TO=,&RC=0\n         LCLC  &A,&B\n&B       SETC  'CGDR'.'&SYSNDX'\n&A       SETC  '&NAME'\n         AIF   ('&NAME' NE '').N\n&A       SETC  'CGDS'.'&SYSNDX'\n.N       ANOP\n&A       L     1,4(0,13)\n         CLC   17(3,1),=AL3(&TO)\n         BE    &B\n         L     2,4(0,1)\n         CLC   17(3,2),=AL3(&TO)\n         BE    *+14\n         MVI   12(1),X'FF'\n         LR    1,2\n         B     &A+14\n         LR    13,1\n         LM    14,12,12(13)\n         MVI   12(13),X'FF'\n         LA    15,&RC\n         BR    14\n&B       DS    0H\n         SPACE 1\n         MEND\n         EJECT\n         MACRO\n&NAME    IOBD  &A,&B\n***********************************************************************\n*                                                                     *\n*          DSECT FOR REPRESENTATION OF STANDARD FIELDS IN IOB         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n&NAME    DSECT\nIOBDSECT DS    0X\nIOBFLAG1 DS    X\nIOBFLAG2 DS    X\nIOBSENS0 DS    X\nIOBSENS1 DS    X\nIOBECBCC DS    0X\nIOBECBPT DS    0AL4\nIOBECB   DS    AL4\nIOBFLAG3 DS    0X\nIOBCSW   DS    XL8\nIOBSIOCC DS    0X\nIOBSTART DS    0AL4\nIOBCCW   DS    AL4\n         DS    0X .                     RESERVED\nIOBDCBPT DS    0AL4\nIOBDCB   DS    AL4\nIOBRESTR DS    AL4\nIOBINCAM DS    H\nIOBERRCT DS    H\n         SPACE 5\n         MEND\n         EJECT\n         MACRO\n&NAME    IOB   &ECB=0,&CCW=0,&DCB=0,&FLAG1=0,&FLAG2=0,&FLAG3=0\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*          IOB GENERATION FOR STANDARD FIELDS ONLY                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         DS    0D\n&NAME    DS    0CL32\n         DC    AL1(&FLAG1) .            IOBFLAG1\n         DC    AL1(&FLAG2) .            IOBFLAG2\n         DC    X'0000' .                IOBSENS0,1\n         DC    A(&ECB) .                ECB POINTER\n         DC    2A(0) ,                  IOBFLAG3 AND CSW\n         DC    A(&CCW) .                ADDRESS OF CCW\n         DC    A(&DCB) .                ADDRESS OF DCB\n         DC    F'0' .                   IOBRESTR\n         DC    H'0' .                   IOBINCAM\n         DC    H'0' .                   IOBERRCT\n         SPACE 5\n         MEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*          TCOPY - A PROGRAM TO LIST AND/OR COPY TAPE VOLUMES         *\n*          WRITTEN AT UNIVERSITY OF TORONTO JANUARY 1969              *\n*          BY DENNIS R. SMITH.                                        *\n*                                                                     *\n*          UPDATED AUGUST 4, 1970 -                                   *\n*              1) TO HANDLE A NULL FILE AS THE FIRST FILE OF AN       *\n*                  UNLABELED TAPE.                                    *\n*              2) TO PRINT THE UPDATE DATE ALONG WITH THE TITLE       *\n*\n*\n*          UPDATED MAY 10, 1971 -                                     *\n*\n*              1) TO HANDLE DEN=2 OR 3 ON CONTROL CARD                *\n*                 TO SPECIFIY OUTPUT TAPE DENSITY.                    *\n*              2) TO CHECK AND PRINT 'TO' TAPE LABEL EVEN WHEN        *\n*                 CPYVOLID=NO.                                        *\n*\n*          UPDATED OCT 13, 1971 -\n*                                                                     *\n*              1) TO PRINT FILE BLOCKCOUNT, RECORD SIZES EVEN IF      *\n*                 AN ERROR OCCURS WHILE PROCESSING FILES              *\n*              2) TO PRINT BLOCKING ATTRIBUTE, B, S, OR BS (R)        *\n*                                                                     *\n*          UPDATED APR 02, 1975 -\n*\n*              1) TO DEFAULT TAPE DENSITY DEN=3 - 1600 BPI            *\n*                 AND RETAIN DEN=2 OR 3 ON CONTROL CARD               *\n*              2) TO ASSIGN ROUT AND DESC CODES TO WTO AND WTOR       *\n*                                                                     *\n*          UPDATED MAY 10 1977 -                                      *\n*                                                                     *\n*              1) SUPPORT FOR 6250 BPI                                *\n*              2) CHANGE THE DENSITY INDICATOR IN THE HDR2 WHEN       *\n*                 COPYING TO A TAPE WITH A DIFFERENT DENSITY THAN     *\n*                 THE INPUT.                                          *\n*                                                                     *\n*          UPDATED MAY 31 2000 -      SAM GOLOB                       *\n*                                                                     *\n*              1) CLEANED UP A FEW MACROS FOR ASMA90.  STILL NEED     *\n*                 PARM OF FLAG(5) BUT THERE ARE ONLY 2 ERRORS LEFT.   *\n*              2) FIXED THIS PROGRAM SO IT WILL COPY TAPES WITH       *\n*                 BLOCKS UP TO 64K IN SIZE.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         GBLA  &PRINTFS\n         LCLC  &MONTH\n         LCLA  &YEAR,&DAY\nTCOPY    START X'5820'\n&MONTH   SETC  'MAY'\n&DAY     SETA  31\n&YEAR    SETA  2000\n&PRINTFS SETA  60\n         USING IOB,R10\n         REQU  0,15\nLKREG    EQU   9\n         DEFSW SW1,(CPYSW,LABELSW,DASDRSW,CPYVLID,TRACSW,TLABELSW,     X\n               MODSW)\n         DEFSW SW2,(KTOSW,KFROMSW,KLABELSW,KCPYSW,KTRACSW,KTODD,KFROMDDX\n               ,KNVOLID)\n         DEFSW SW5,(KOWNID,KTYPE,KMOD,KDEN)\n         DEFSW SW3,(ENDSW,DASDRP,TPMKSW,EOFOK,EOFSW)\n         DEFSW SW4,(TESTSW,QUITSW,ABSW,MANYSW)\n         DEFSW SW6,(DATASW)\n         CNSRV 12\n         LR    8,1\n         L     11,CIOAD\n         USING CIO,11\n*\n*\n         B     MAIN\nCIOAD    DC    A(CIO)\nMAIN     OPEN  (SYSIN,,SYSOUT,OUTPUT)\n         BOPEN SYSOUT,PRINTO\n         WTO   'CRF022I  FILE FAILED TO OPEN - SYSPRINT',ROUTCDE=(1,11)\nPRINTO   DS    0H\n         L     8,0(0,8)                 PARM FIELD POINTER\n         LH    1,0(0,8)\n         C     1,=F'4'\n         BL    CKSYSIN                  BR. IF PARM FILE TO SHOURT\n         CLC   2(4,8),=C'TEST'\n         BE    TAPET                    TAPE-TEST OPTION\n         C     1,=F'8'\n         BNE   CKSYSIN\n         CLC   2(8,8),=C'FULLTEST'\n         BE    TAPETF\nCKSYSIN  BNOPEN SYSIN,ER88A             ERROR IF NO SYSIN\n         SPACE 2\nLOOP     CALL  GCRD                     GET CONTROL CARD\n         LTR   15,15\n         BNZ   ERXX\n         SWT   TEST,EOFSW\n         BO    ENDPR\nLOOPM    SWT   TEST,QUITSW\n         BO    LOOP                     ERROR CHECK CARDS IF ERRORS\n*\n         CALL  TTCOPY                   PERFORM COPY\n         LTR   15,15\n         BNZ   ERXX\n         SWT   TEST,MANYSW\n         BO    LOOPM                    BR. IF TYPE=MANY\n         B     LOOP\n*\nTAPETF   SWT   ON,TRACSW                MARK TRACE DESIRED\nTAPET    WTO  'CRF011I  REPLY ''M'' TO PROCESS, ''U'' TO UNLOAD, ''C'' X\n               TO TERMINATE',ROUTCDE=(1,3,5),DESC=(3)\n         EXTRACT TIOT,FIELDS=TIOT\n         L     1,TIOT\n         LA    1,28(0,1)                POINT TO DD'S\nEXL1     CLI   0(1),X'00'               CHECK FOR END\n         BE    LOOPT1\n         CLC   0(8,1),=CL8'SYSUT1'\n         BE    UT1F                     FOUND SYSUT1\n         CLC   0(8,1),=CL8'SYSUT2'\n         BE    UT2F                     BR. IF SYSUT2 FOUND\nEXL2     LA    1,20(0,1)\n         B     EXL1\nUT1F     L     2,12(0,1)                GET UCB POINTER\n         MVC   UT1UN(3),13(2)           GET DEVICE ADDRESS\n         B     EXL2\nUT2F     L     2,12(0,1)\n         MVC   UT2UN(3),13(2)\n         B     EXL2\nLOOPT1   CLI   UT1UN,C'X'\n         BNE   UT1OK\n         MVC   UT1UN(3),UT2UN\n         MVC   TAPEIN+40(8),=CL8'SYSUT2'\nUT1OK    CLI   UT2UN,C'X'\n         BNE   UT2OK\n         MVC   UT2UN(3),UT1UN\nUT2OK    CLI   UT1UN,C'X'\n         BE    ER30\nLOOPT    SWT   ON,TLABELSW\n         SWT   ON,TESTSW\n         SWT   OFF,(LABELSW,DASDRSW)\n         PRINTA '1  TEST PROCESS FOR UNKNOWN TAPE'\nILL      SR    R0,R0\n         ST    R0,CECB\n         L     1,TIOT\n         MVC   WTOR+25(8),0(1)    PLACE JOBNAME IN MESS\n         MVC   WTOR+23+19(3),UT1UN\nWTOR     WTOR 'CRF012W  JOBNAME,, MOUNT ''---'' TAPE TO BE TESTED',    X\n               REPAD,1,CECB,ROUTCDE=(1,3,5),DESC=(3)\n         PRINT  GEN\n         WAIT  ECB=CECB\n         OI    REPAD,C' '               FORCE UPPER CASE LETTERS\n         CLI   REPAD,C'C'\n         BE    ENDPR\n         CLI   REPAD,C'U'\n         BE    RWU\n         CLI   REPAD,C'M'\n         BNE   ILL\n         CALL  TTCOPY\nLTR      LTR   15,15\n         BE    XC1\n         CLOSE  (TAPEIN)\n         PRINTA '- -------  PROCESSING TERMINATED, THIS VOLUME'\nXC1      XC    DDNAM2,TAPEIN+40\n         XC    TAPEIN+40(6),DDNAM2\n         EX    R0,XC1\nXC2      XC    UT1UN(3),UT2UN\n         XC    UT2UN(3),UT1UN\n         EX    R0,XC2\n         CLI   REPAD,C'U'\n         BE    ILL\n         B     LOOPT\nER30     ERROR (A,8),'NEITHER \"SYSUT1\" NOR \"SYSUT2\" SPECIFIED'\n*\nRWU      PRINTA '0 --- UNLOAD REQUESTED'\n         B     XC1\nCECB     DC    F'0'\nREPAD    DC    CL2'X'\n         SPACE 5\nENDPR    CLOSE (SYSOUT)\n         GOBCK 0\n         SPACE 2\nER15     ERROR (E,8),'''FROM'' TAPE , ILLEGAL LABEL FORMAT'\nER10     ERROR (E,8),'''TO'' TAPE , ILLEGAL LABEL FORMAT'\nER21     ERROR (E,8),'UNEXPECTED EOD ON  TAPEIN'\nER22     ERROR (E,8),'UNEXPECTED EOD ON  TAPEOUT'\nER88A    ERROR (A,8),'SYSIN - FAILED TO OPEN, SPECIFY PARM=TEST OR     X\n               PARM=FULLTEST FOR TAPE TEST OPTION'\nER88     ERROR (A,8),'FILE FAILED TO OPEN -',40(1),8\nER11     ERROR (E,8),'WRONG ''TO'' VOLUME SERIAL -',TOVOLSER,6\nER12     ERROR (E,8),'WRONG ''FROM'' VOLUME SERIAL -',FRVOLSER,6\nER9      ERROR (E,8),'UNEXPECTED CONTINUATION INDICATED'\nERXX     SWT   TEST,QUITSW\n         BO    LOOP\n         SWT   OFF,MANYSW\n         SWT   ON,QUITSW\n         PRINTA '--------  PROCESSING TERMINATED, SYNTAX SCAN OF CONTROL\n               L CARDS FOLLOWS'\n         B     LOOP\n*                                                                     *\nEOD      SWT   TEST,EOFOK\n         BO    EOD1\n         ERROR (A,8),'UNEXPECTED EOF ON SYSIN'\nEOD1     SWT   ON,EOFSW\n         BR    LKREG\n         EJECT\n***********************************************************************\n*                                                                     *\n*          ROUTINE TO PRINT MESSAGES                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEPRINT   SWT   ON,ABSW\n         NOP   *\n         MVC   ERBUF-1(8),=C'0-------'\n         SWT   ON,ENDSW                 MARK ABEND\nPRINTA   ST    14,EPSAV\n         BAL   14,PGCK                  CHECK FOR END OF PAGE\n         PUT   SYSOUT,ERBUF-1\n         MVI   ERBUF-1,C' '\n         MVC   ERBUF,ERBUF-1\n         SWT   TEST,ENDSW\n         BO    *+12                     BR< IF END\n         L     14,EPSAV\n         B     0(0,14)            RETURN IF PRINTA\n         SWT   TEST,DATASW\n         BNO   NOPSTAT\n         SWT   OFF,ENDSW\n         STM   9,14,ABSAV\n         PRINTA ' ------- DATA SET STATISTICS TO THIS POINT FOLLOW'\n         BAL   LKREG,PSTAT              PRINT STATISTICS ABOUT FILE\n         LM    9,14,ABSAV\nNOPSTAT  DS    0H\n         SWT   TEST,ABSW\n         BO    ABND\n         SWT   OFF,ENDSW\n         PRINT GEN\n         GOBCK2 TO=TCOPY,RC=4\n         PRINT GEN\n         SWT   TEST,TESTSW\n         BZ    ERXX\n         LA    15,4\n         B     LTR\nABND     CLOSE (SYSOUT)\n         ABEND 69,DUMP\nABSAV    DS    6F\nEPSAV    DC    F'0'\n*\nPGCK     LH    R1,PGCNT\n         CLI   ERBUF-1,C'1'\n         BE    NPG\n         CLI   ERBUF-1,C' '\n         BE    SUB1\n         CLI   ERBUF-1,C'0'\n         BE    SUB2\n         CLI   ERBUF-1,C'-'\n         BE    SUB3\n         MVI   ERBUF-1,C'-'\nSUB3     BCTR  R1,0\nSUB2     BCTR  R1,0\nSUB1     S     R1,=F'1'\n         STH   R1,PGCNT\n         BPR   14\n*          COME HERE IF NEW PAGE\nNPG      MVI   ERBUF-1,C'0'\n         LH    R1,PGCNTR\n         STH   R1,PGCNT\n         LA    R1,SYSOUT                SIMULATE PUT\n         LA    R0,HEADR\n         L     15,48(0,R1)\n         BR    15\n         SPACE 2\nPGCNTR   DC    H'55'\nPGCNT    DC    H'0'\nHEADR    DC    C'1         CBT - FILE 193 - TCOPY PROGRAM - TAPE UTILITX\n               Y, D.R.SMITH  -  '\nHEADR1   DC    C'UPDATED &MONTH &DAY, &YEAR'\n         DC    CL(133-L'HEADR-L'HEADR1)' '\n         EJECT\n*********************\n*              PRINT FILE STATISTICS                                  *\n*********************\n         SPACE 2\nPSTAT    L     R1,BLKCNT                GET NUMBER OF BLOCKS READ\n         CVD   R1,DWRD\n         MVC   ERBUF+14(6),=X'402020202120'\n         ED    ERBUF+14(6),DWRD+5\n         PRINTA '  BLOCK COUNT -'\n         MVC   ERBUF-1(39),MASK2\n         L     R1,MAXBLK\n         CVD   R1,DWRD\n         ED    ERBUF+15(6),DWRD+5\n         L     R1,MXBLKN\n         CVD   R1,DWRD\n         ED    ERBUF+32(6),DWRD+5\n         PRINTA\n         MVC   ERBUF-1(39),MASK2\n         L     R1,MINBLK\n         CVD   R1,DWRD\n         ED    ERBUF+15(6),DWRD+5\n         L     R1,MNBLKN\n         CVD   R1,DWRD\n         ED    ERBUF+32(6),DWRD+5\n         PRINTA '  MIN'\n         SWT   OFF,DATASW\n         BR    LKREG\n         EJECT\n***********************************************************************\n*          ROUTINES TO PERFORM I/O OPERATIONS                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*          READ CARDS\nCREAD    SWT   TEST,EOFSW\n         BO    ER29\n         GET   SYSIN\n         ST    R1,CBUFAD\n         LR    R3,R1\n         LA    R8,71(0,R3)\n         MVC   ERBUF(80),0(R1)\n         PRINTA\n         SWT   OFF,EOFOK\n         BR    LKREG\nER29     ERROR (A,8),'PREVIOUS EOF ON SYSIN, ANOTHER READ ATTEMPTED'\n*          REWIND\nREWIND   LA    R0,RWCCW\n         SWT   OFF,TPMKSW     IF REWIND, IGNORE PREV. TPMK     30/7/70\nEXC      ST    R0,IOBCCW\n         BAL   14,EXCP1\n         SR    15,15\n         BR    LKREG\n*\n*          BACK SPACE\nBSPBLK   LA    R0,BSPCCW\n         B     EXC\n*\n*          FORWARD SPACE\nSPACE    LA    R0,SPCCW\n         B     EXC\n*\n*          WRITE TPAE MARK\nWTPMK    SWT   TEST,CPYSW\n         BZR   LKREG\n         PRINTF ' *WRITE TAPE MARK'\n         MVC   ERRTYPE(16),=CL16'WRITE TAPE MARK'\n         LA    R0,WTMKCCW\n         LA    R10,WIOB\n         B     EXC\n*          SENSE\nSENSE    LA    R0,SENSCCW\n         B     EXC\n*\nREAD     LA    R0,RCCW\n         ST    R0,IOBCCW\n         MVC   ERRTYPE(16),=CL16'TAPE READ'\n         BAL   14,EXCP2\n         SR    15,15\n         TM    IOBCSW+4,X'01'\n         BZ    NTPMK\n         PRINTF ' --- TAPE MARK READ'\n         SWT   TEST,TPMKSW\n         BO    ENDV                     IF TWO TAPE MARKS, THEN END\n         SWT   ON,TPMKSW\n         LA    15,4\n         BR    LKREG\nNTPMK    DS    0H                   WE ARE READING DATA BLOCK SBG 05/00\n*        LH    R7,RCCW+6                GET READ LENGTH       SBG 05/00\n         XC    FULLWORK,FULLWORK     CLEAR AREA COMPLETELY    SBG 05/00\n         MVC   HALFWORK(2),RCCW+6    READ LENGTH              SBG 05/00\n         L     R7,FULLWORK      SURE YOU HAVE ENTIRE HALFWORD SBG 05/00\n*        SH    R7,IOBCSW+6              SUB. RESIDUE          SBG 05/00\n         XC    FULLWORK,FULLWORK     CLEAR AREA COMPLETELY    SBG 05/00\n         MVC   HALFWORK(2),IOBCSW+6  RESIDUAL BYTE COUNT      SBG 05/00\n         S     R7,FULLWORK           SUBTRACT FULL HALFWORD   SBG 05/00\n         STH   R7,WCCW+6                STORE IN WRITE CCW\n         SWT   OFF,TPMKSW\n         BR    LKREG\n* --------------------------------------------------------- *\nFULLWORK DS    0F       WORK AREA FOR FULL 65535 SUBTRACTION. SBG 05/00\n         DC    H'0'                                           SBG 05/00\nHALFWORK DC    H'0'                HALFWORD WORK AREA         SBG 05/00\n         DC    D'0'               FILLER                      SBG 05/00\n* --------------------------------------------------------- *\nENDV     LA    15,8\n         BR    LKREG\n*\n*          WRITE TAPE\nWRITE    SWT   TEST,CPYSW\n         BZR   LKREG\n         LA    R0,WCCW\n         ST    R0,IOBCCW\n         MVC   ERRTYPE(16),=CL16'TAPE WRITE'\n         BAL   14,EXCP3\n         SR    15,15\n         BR    LKREG\n         SPACE 5\n*          ROUTINE TO PRINT TRACE OUTPUT\nPRINTF   SWT   TEST,TRACSW\n         BO    PRINTA\n         MVC   ERBUF,ERBUF-1\n         BR    14\n         SPACE 5\n*          ROUTINE TO ISSUE EXCP\nEXCP1    DS    0H\nEXCP2    DS    0H\nEXCP3    ST    14,EXSAV\n         L     R1,IOBDCB\n         BNOPEN (1),(R14)\n         EXCP  IOB\n         L     R3,IOBECB\n         BAL   R4,WAIT\n         L     14,EXSAV\n         BR    14\nEXSAV    DC    F'0'\n*\nWAIT     WAIT  1,ECB=(R3)\n         CLI   0(R3),X'7F'\n         BNE   ISIOERR\n         MVC   ERRTYPE(16),=CL16'TAPE CONTROL'\n         BR    R4\nISIOERR  DS    0H\n         TM    IOBCSW+4,X'01'\n         BNZR  R4                       OK IF TPMK READ\nER17     ERROR (E,8),'PERMANENT I/O ERROR ON ',ERRTYPE,16\nERRTYPE  DC    CL16'TAPE CONTROL'\n         EJECT\n***********************************************************************\n*                                                                     *\n*          ROUTINE TO READ CONTROL CARDS, AND PROCESS KEYWORDS        *\n*                                                                     *\n***********************************************************************\nGCRD     CSECT\n         CNSRV 13\n         XC    SW1(3),SW1\n         XC    TOLOC,TOLOC\n         XC    FROMLOC,FROMLOC\n         XC    NEWVOL,NEWVOL\n         MVC   OWNER,OWNER-1\n         MVI   OWNER,X'00'\n         MVI   TAPEOUT+18,B'11000011'\n*                                    DEFAULT TO DEN=3 1600 BPI\n         SWT   ON,TLABELSW\n         SWT   ON,EOFOK\n         SWT   TEST,QUITSW\n         BO    NNPG\n         PRINTA '1'\nNNPG     PRINTA '-'\n         BAL   LKREG,CREAD\n         SWT   TEST,EOFSW\n         BO    NER28\n         BAL   LKREG,BLK\n         BAL   LKREG,PICK               GET CONTROL WORD\n         CLI   0(R3),C' '\n         BNE   ER2\n         CLC   WANT(5),=C'LIST '\n         BE    LST                      BR. IF LIST CARD\n         CLC   WANT(5),=C'COPY '\n         BNE   ER2                      BR. IF ILLEGAL CONTROL WORD\n         SWT   ON,(CPYSW,LABELSW)       MARK TO COPY\n         SWT   OFF,TLABELSW\nLST      BAL   LKREG,BLK\n*\n*          ROUTINES TO HANDLE KEYWORDS\n*\nLOP3     BAL   LKREG,PICK               GET KEYWORD\n         LA    R4,KTAB-12               POINT TO TABLE OF KEYWORDS\nLOP2     LA    R4,12(0,R4)\n         CLC   0(8,R4),WANT             LOOK FOR KEYWORD\n         BL    LOP2\n         BH    ER2\n         L     R1,8(0,R4)               GET ROUTINE ADDRESS\n         BR    R1\n         SPACE 5\n*\n*          ROUTINES TO HANDLE INDIVIDUAL KEYWORDS\n*\nTYPE     BAL   LKREG,BETTY1\n         DC    AL1(KTYPE)\n         BAL   LKREG,SLUFF\n         DC    C'='\n         BAL   LKREG,PICK\n         CLC   WANT(4),=C'MANY'\n         BNE   ER2\n         SWT   ON,MANYSW\n         B     NXT\n         SPACE 1\n*\n*          DEN= PARAMETER, 2 FOR 800 3 FOR 1600 BPI\nDEN      BAL   LKREG,BETTY1\n         DC    AL1(KDEN)\n         BAL   LKREG,SLUFF\n         DC    C'='\n         BAL   LKREG,PICK\n         CLC   WANT(2),=C'2 '\n         BE    DEN2\n         CLC   WANT(2),=C'3 '\n         BE    DEN3\n         CLC   WANT(2),=C'4 '\n         BNE   ER13\n         MVI   TAPEOUT+18,B'11010011'  DEN=4, 6250 BPI\n         B     NXT\nDEN3     MVI   TAPEOUT+18,B'11000011'  DEN=3, 1600 BPI\n         B     NXT\nDEN2     MVI   TAPEOUT+18,B'10000011'  DEN=2, 800 BPI\n         B     NXT\n*\nMOD      BAL   LKREG,BETTY1\n         DC    AL1(KMOD)\n         SWT   TEST,CPYSW\n         BZ    ER31\n         SWT   ON,MODSW\n         B     NXT\nER31     ERROR (R,8),'''MOD'' SPECIFIED WITH ''LIST'' OPTION, IGNORED'\n         B     NXT\n*\nNEWVOLID BAL   LKREG,BETTY\n         DC    AL1(KNVOLID)\n         SWT   ON,CPYVLID\n         LA    R5,NEWVOL\n         B     FROMT\nTODD     BAL   LKREG,BETTY\n         DC    AL1(KTODD)\n         LA    R5,TAPEOUT+40\n         B     FROMT\n*\nFROMDD   BAL   LKREG,BETTY\n         DC    AL1(KFROMDD)\n         LA    R5,TAPEIN+40             POINT TO DDNAME LOCATION\n         B     FROMT\n*\nTRACE    BAL   LKREG,BETTY\n         DC    AL1(KTRACSW)\n         BAL   LKREG,SLUFF\n         DC    C'='\n         BAL   LKREG,PICK\n         CLC   WANT(4),=C'YES '\n         BNE   NXT\n         SWT   ON,TRACSW\n         B     NXT\n*\nOWNERID  BAL   LKREG,BETTY1\n         DC    AL1(KOWNID)\n         CLC   0(2,R3),=C'='''\n         BNE   ER6\n         LA    R3,2(0,R3)\n         LR    R4,R3\n         LA    R1,10\n         LA    R0,1(0,R1)\nOWNLOP   CLI   0(R3),C''''\n         BE    FQ\n         LA    R3,1(0,R3)\n         BCT   R0,OWNLOP\nER80     ERROR (E,8),'ILLEGAL ''OWNERID'' SPECIFICATION'\nFQ       SR    R1,R0\n         BM    ER80\n         STC   1,*+5\n         MVC   OWNER(*-*),0(R4)\n         LA    R3,1(0,R3)\n         B     NXT\n*\nTO       BAL   LKREG,BETTY              CHECK FOR DUPLICATION\n         DC    AL1(KTOSW)\n         LA    R5,TOLOC\n         B     FROMT\nFROM     BAL   LKREG,BETTY\n         DC    AL1(KFROMSW)\n         LA    R5,FROMLOC\nFROMT    BAL   LKREG,SLUFF\n         DC    C'='                     SKIP THE =\n         BAL   LKREG,PICK               GET ARG\n         MVC   0(8,R5),WANT             PLACE IN 'TO' OR 'FROM' LOC\n         B     NXT\n*\nLABEL    BAL   LKREG,BETTY\n         DC    AL1(KLABELSW)\n         SWT   OFF,(TLABELSW,LABELSW)\n         BAL   LKREG,SLUFF\n         DC    C'='\n         BAL   LKREG,PICK\n         CLC   WANT(3),=C'NO '\n         BE    NXT\n         CLC   WANT(8),=C'UNKNOWN '\n         BE    UNK\n         CLC   WANT(6),=C'DASDR '\n         BE    DASDR                    BR. IF DASDR TAPE\n         CLC   WANT(3),=C'SL '\n         BE    SL\n         CLC   WANT(3),=C'NL '\n         BE    NXT\n         CLC   WANT(4),=C'BLP '\n         BE    NXT\n         CLC   WANT(4),=C'YES '\n         BNE   ER2                      BR. IF ILLEGAL\nSL       DS    0H\n         SWT   ON,LABELSW               MARK LABELLED TAPE\n         B     NXT\nUNK      SWT   ON,TLABELSW\n         B     NXT\nDASDR    SWT   ON,DASDRSW\n         B     NXT\n*\nCPYVOLID BAL   LKREG,BETTY\n         DC    AL1(KCPYSW)\n         BAL   LKREG,SLUFF\n         DC    C'='\n         BAL   LKREG,PICK\n         CLC   WANT(3),=C'NO '\n         BE    NXT                      BR. IF CPYVOLID=NO\n         CLC   WANT(4),=C'YES '\n         BNE   ER2                      ILLEGAL\n         SWT   ON,CPYVLID               MARK CPYVOLID=YES\n*\n*          COME HERE AFTER EACH KEYWORD\n*\nNXT      CLI   0(R3),C' '\n         BE    END1                     BR. IF END\n         BAL   LKREG,SLUFF\n         DC    C','                     SKIP COMMA\n         CR    R3,R8\n         BNL   *+12                     BR. IF CONTINUES\n         CLI   0(R3),C' '\n         BNE   LOP3                     BR. IF MORE ON THIS CARD\n         CLI   0(R8),C' '\n         BE    ER7\n         BAL   LKREG,CREAD\n         LA    R3,15(0,R3)              POINT TO CONT. COL.\n         B     LOP3\n*\n*          COME HERE AT END OF CONTROL STATEMENT\n*\nEND1     CLI   0(R8),C' '\n         BNE   ER9                      CONTINUATION CARD, NON EXPECTED\n         SWT   TEST,MODSW\n         BZ    NOMOD0                   BR. IF NOT MOD\n         SWT   TEST,KNVOLID\n         BNZ   ER32                  NEWVLID MAY NOT BE USED\n         SWT   TEST,(DASDRSW,CPYVLID)\n         BNZ   ER32                  MOD AND DASDR AND CPYVLID INCOMPAT\nNOMOD0   SWT   TEST,MANYSW\n         BO    NER28\n         SWT   TEST,CPYSW\n         BO    CKCOPY\n         SWT   TEST,KFROMDD\n         BNZ   NER28\nER13     ERROR (E,8),'ILLEGAL DEN= PARAMETER - ',WANT,8\nER28     ERROR (E,8),'MISSING OR CONFLICTING PARAMTERS'\nER32     ERROR (E,8),'''MOD'' OPTION NOT COMPATABLE WITH OTHER OPTIONS X\n               SPECIFIED'\nCKCOPY   SWT   TEST,(KFROMDD,KTODD)\n         BNO   ER28\n         SWT   TEST,TLABELSW\n         BO    ER28\n         CLC   TAPEIN+40(8),TAPEOUT+40\n         BE    ER28\nNER28    PRINTA '-'       SPACE AFTER CONTROL CARD             30/7/70\n         GOBCK                                                 30/7/70\nER25     ERROR (E,8),'LABEL=UNKNOWN, IS ILLEGAL FOR ''COPY'''\n         SPACE 5\n*          ROUTINE TO PICK UP UP TO 8 CHAR. WORDS\nPICK     TRT   0(9,R3),TRTB1\n         BZ    ER3                      BR. IF MORE THAN 8 CHAR.\n         LR    R2,R1\n         SR    R1,R3                    GET LENGTH\n         S     R1,=F'1'\n         BM    ER5\n         MVC   WANT,WANT-1              CLEAR WANT\n         EX    R1,MVC1                  MVC  WANT(*-*),0(R3)\n         LR    R3,R2\n         BR    LKREG\nMVC1     MVC   WANT(*-*),0(R3)\n         SPACE 5\n*          ROUTINE TO SLUFF A SPECIFIED CHARACTER\n         SPACE 2\nSLUFF    CLC   0(1,R3),0(LKREG)\n         BNE   ER6                      BR. IF NOT REQUIRED CHARACTER\n         LA    R3,1(0,R3)               SKIP CHARACTER\n         B     2(0,LKREG)\nER6      ERROR (E,8),'ILLEGAL DELIMITER',0(R3),1\n         SPACE 5\n*          ROUTINE TO SLUFF BLANKS, AND READ NEW CARD IF REQUIRED\n         SPACE 2\nBLK      CR    R3,R8\n         BNL   NEWC                     BR. IF NEW CARD NEEDED\n         CLI   0(R3),C' '\n         BNER  LKREG                    BR. IF FOUND NON-BLANK\n         LA    R3,1(0,R3)\n         B     BLK\nNEWC     CLI   0(R8),C' '\n         BE    ER7                      BR. IF NOT MARKED AS CONT.\n         LR    R10,LKREG                SAVE RETURN REGISTER\n         BAL   LKREG,CREAD\n         LA    R3,15(0,R3)              POINT OT START OF NEW CARD\n         BR    R10\n         SPACE 5\n*          ROUTINE TO CHAECK FOR DUPLICATE KEYWORDS\n         SPACE 2\nBETTY1   LA    R2,SWTT1\n         B     BETTY+4\nBETTY    LA    R2,SWTT\n         IC    R1,0(0,LKREG)            GET SWITCH\n         EX    R1,0(R2)\n         BO    ER8\n         EX    R1,4(R2)\n         B     2(0,LKREG)\nER8      ERROR (E,8),'DUPLICATE KEYWORD -',WANT,8\nSWTT     TM    SW2,0\nSWTO     OI    SW2,0\nSWTT1    TM    SW5,0\n         OI    SW5,0\n*\n*\n         PRINT GEN\n         DS    0F\nKTAB     MINIT CSPEC=8,ADSPEC=4\n         MNEM  'CPYVOLID'\n         MNEM  'DEN'\n         MNEM  'FROM'\n         MNEM  'FROMDD'\n         MNEM  'LABEL'\n         MNEM  'MOD'\n         MNEM  'NEWVOLID'\n         MNEM  'OWNERID'\n         MNEM  'TO'\n         MNEM  'TODD'\n         MNEM  'TRACE'\n         MNEM  'TYPE'\n         MNEM\n         PRINT GEN\nER2      ERROR (E,8),'UNDEFINED CONTROL OR KEYWORD -',WANT\nER3      ERROR (E,8),'KEYWORD>8 CHARACTERS -',0(R3),8\nER5      ERROR (E,8),'MISSING KEYWORD AT -',0(R3),8\nER7      ERROR (E,8),'EXPECTED CONTINUATION CARD, NON INDICATED'\n         SPACE 5\n*\n*          TRT TABLE FOR PICK\n*\nTRTB1    DS    0X\n         DC    193X'01'\n         DC    9X'00'\n         DC    7X'01'\n         DC    9X'00'\n         DC    8X'01'\n         DC    8X'00'\n         DC    6X'01'\n         DC    10X'00'\n         DC    6X'01'\n         EJECT\n***********************************************************************\n*                                                                     *\n*          ROUTINE TO COPY TAPE                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nTTCOPY   CSECT\n         CNSRV 13\n         SR    R0,R0\n         ST    R0,DSCNT\nTROPEN   OPEN  (TAPEIN,INPUT)\n         BOPEN TAPEIN,TTCOPY1\n         SWT   TEST,TESTSW\n         BZ    ER88\n         CLI   TAPEIN+45,C'2'\n         BNE   ER88\n         MVI   TAPEIN+45,C'1'\n         B     TROPEN\nTTCOPY1  SWT   TEST,CPYSW\n         BZ    NOCPYMOD                 BR. IF NO ''TO'' REQUIRED\nOPNX     OPEN  (TAPEOUT)\n         BNOPEN TAPEOUT,ER88\n         LA    R10,WIOB\n         BAL   LKREG,SENSE\n         TM    SENSED+1,X'02'\n         BZ    NOCPYMOD                 BR. IF ''TO'' TAPE NOT F-PROTEC\n         CLOSE (TAPEOUT)\n         WTOR  'CRF010W  ''TO'' TAPE FILE PROTECT. REPLY G && RE-MOUNT X\n               OR CANCEL JOB',REPLY,1,PRUECB,ROUTCDE=(1,3,5),DESC=(3)\n         WAIT  ECB=PRUECB\n         B     OPNX                     TRY AGAIN\nPRUECB   DC    F'0'\nREPLY    DC    CL1'X'\nNOCPYMOD LA    R10,RIOB\n         BAL   LKREG,REWIND             REWIND FOR SAFETY\n         SWT   TEST,(LABELSW,DASDRSW,TLABELSW)\n         BZ    NL1                      BR. IF UNLABELED\n         CALL  TLABEL                   PROCESS FIRST VOLUME LABEL\n         LTR   15,15\n         BNZ   TTCOPY1                  BR. IF WAS UNLABELSED\n         SWT   TEST,TLABELSW\n         BZ    NL1\n         SWT   ON,LABELSW\n         PRINTA '0 LABEL TEST, TAPE CONTAINS STANDARD LABELS'\nNL1      SWT   TEST,MODSW\n         BZ    NL1A                     BR. IF NOT MOD\n         PRINTF ' *START TO PROCESS ''TO'' TAPE FOR MOD'\n         MVC   IOBSAV,RIOB              SAVE FROM IOB\n         MVC   RIOB,WIOB                GET ''TO'' IOB FOR MOD PROCES\n         SWT   OFF,CPYSW                NO COPY TILL END OF MOD PROCESS\nNL1A     SWT   TEST,(LABELSW,DASDRSW)\n         BZ    DSLOP                    BR. IF NOT LABELED\n         PRINTF ' *CHECK FOR USER VOLUME LABELS'\n         LA    R6,=C'VOL'               PREPARE TO SEARCH FOR USER VOLS\nTLOP0    CALL  HEADER                   PASS ANY USER VOL. LABELS\n         B     *+4(15)\n         B     *+16\n         B     NUVL\n         B     ER15\n         B     ER23\n         PRINTF ' --- USER VOLUME LABEL PASSED'\n         B     TLOP0\nNUVL     LA    R10,RIOB\n         BAL   LKREG,BSPBLK             BACK SPACE PAST FIRST HEADER\n*\n*          NOW WE START PROCESSING HEADER LABELS\n*\nDSLOP    L     R1,DSCNT\n         LA    R1,1(0,R1)               INC. DATA-SET COUNTEDR\n         ST    R1,DSCNT\nDSLOPNC  DS    0H\n         SWT   TEST,(LABELSW,DASDRSW)\n         BZ    NL2                      BR. IF NOT LABLED\n         LA    R6,=C'HDR'               SYSTEM LABELS - 2\n         PRINTF ' *HANDLE HDR1 LABEL'\n         CALL  HEADER\n         B     *+4(15)\n         B     *+16\n         B     ER15\n         B     ER24\n         B     ENDV1                    END OF VOLUME\n         PRINTF ' --- COMPLETED'\n         PRINTF ' *HANDLE HDR2 LABEL'\n         CALL  HEADER\n         B     *+4(15)\n         B     *+16\n         B     ER24\n         B     ER15\n         B     ER23\n         PRINTF ' --- COMPLETED'\n         LA    R6,=C'UHL'               USER HEADER LABEL\n         PRINTF ' *CHECK FOR USER HEADER LABELS'\nTLOP1    CALL  HEADER\n         B     *+4(15)\n         B     *+16\n         B     ER15\n         B     TPMK\n         B     ER23\n         PRINTF ' --- USER HEADER LABEL PASSED'\n         B     TLOP1\nTPMK     BAL   LKREG,WTPMK              WRITE A TAPE MARK\nNL2      PRINTA '-'\n         MVC   ERBUF+30(20),MASK1\n         L     R1,DSCNT\n         CVD   R1,DWRD\n         ED    ERBUF+44(6),DWRD+5\n         SWT   TEST,LABELSW\n         BO    ISLAB\n         PRINTA\n         B     NLX\nISLAB    MVC   ERBUF+8(17),DSNAME\n         PRINTA '- DSNAME='\n         PRINTA\n         MVC   ERBUF+7(1),RECFM\n         LA    1,ERBUF+8\n         CLI   BLKATT,C' '\n         BE    BLKATTB\n         CLI   BLKATT,C'R'\n         BE    BLKATTR\n         MVC   0(1,1),BLKATT            MOVE IN BLOCK ATTRIBUTE\n         LA    1,1(0,1)\n         B     BLKATTB\nBLKATTR  MVC   0(2,1),=C'BS'\n         LA    1,2(0,1)\nBLKATTB  MVC   0(1,1),PRCNTRL\n         PRINTA '  RECFM='\n         LA    1,RECSIZE\n         LA    R10,4\nBLL1     CLI   0(1),C'0'\n         BNE   *+12\n         LA    1,1(0,1)\n         BCT   R10,BLL1\n         STC   R10,*+5\n         MVC   ERBUF+9(*-*),0(1)\n         PRINTA '  BLKSIZE='\n         LA    1,BLKSF\n         LA    R10,4\nBLL2     CLI   0(1),C'0'\n         BNE   *+12\n         LA    1,1(0,1)\n         BCT   R10,BLL2\n         STC   R10,*+5\n         MVC   ERBUF+7(*-*),0(1)\n         PRINTA '  LRECL='\n         MVC   ERBUF+15(6),CDATE\n         PRINTA '  CREATION DATE='\n         MVC   ERBUF+17(6),EDATE\n         PRINTA '  EXPIRATION DATE='\n         MVC   ERBUF+17(6),DSSN\n         PRINTA '  DATA SET SERIAL='\n         MVC   ERBUF+9(7),=C'800 BPI'\n         CLI   DENSITY,C'2'\n         BE    DENOK\n         MVC   ERBUF+9(8),=C'1600 BPI'\n         CLI   DENSITY,C'3'\n         BE    DENOK\n         MVC   ERBUF+9(8),=C'6250 BPI'\n         CLI   DENSITY,C'4'\n         BE    DENOK\n         MVC   ERBUF+9(8),=CL8'???'\nDENOK    PRINTA '  DENSITY='\n         MVC   ERBUF+17(17),JJSTEP\n         PRINTA '  JOB/JOB STEP ID='\nNLX      PRINTF ' *START TO COPY USER DATA'\n         SWT   ON,DATASW\n         SR    R0,R0\n         ST    R0,BLKCNT\n         ST    R0,MAXBLK\n         L     R0,=A(65535)\n         ST    R0,MINBLK\nTLOP2    LA    R10,RIOB                 POINT TO INPUT IOB\n         BAL   LKREG,READ               READ RECORD\n         B     *+4(15)\n         B     *+12\n         B     TPMK2\n         B     ER23X\n         L     R1,BLKCNT\n         LA    R1,1(0,R1)\n         ST    R1,BLKCNT\n         C     R7,MAXBLK\n         BNH   *+12                     BR. IF NOT HIGHER THAN HIGHHEST\n         ST    R1,MXBLKN\n         ST    R7,MAXBLK\n         C     R7,MINBLK\n         BNL   *+12\n         ST    R1,MNBLKN\n         ST    R7,MINBLK\n         LA    R10,WIOB\n         BAL   LKREG,WRITE\n         B     TLOP2\n*\n*          COME HERE WHEN TAPE MARK FOUND WHILE READING USER DATA\n*\nTPMK2    BAL   LKREG,WTPMK              WRITE TAPE MARK\n         SWT   TEST,(DASDRSW)\n         BZ    NDASDR1                  IF NOT DASDR, THEN END OF DATA\n         SWT   TEST,DASDRP\n         BO    NDASDR1                  BR IF ALREADY PASSED DASDR TPMK\nDASDRL   SWT   ON,DASDRP                MARK DASDR TAPE MARK PASSED\n         PRINTF ' *DASDR TAPE MARK PASSED, CONTINUE'\n         B     TLOP2\nNDASDR1  PRINTF ' --- END OF USER DATA'\n         SWT   OFF,DASDRP\n         SWT   TEST,(LABELSW,DASDRSW)\n         BZ    ENDD                     IF NOT LEBELED, THEN EOD-SET\n         LA    R6,=C'EOD'\n         PRINTF ' *READ EOD/EOV-1'\n         CALL  HEADER                   PROCESS TRALER LABEL-1\n         B     *+4(15)\n         B     *+16\n         B     NLAB2\n         B     ER24\n         B     ER23\n         PRINTF ' --- COMPLETED'\n         PRINTF ' *READ EOD/EOV-2'\n         CALL  HEADER\n         B     *+4(15)\n         B     *+16\n         B     ER24\n         B     ER15\n         B     ER23\n         PRINTF ' --- COMPLETED'\n         LA    R6,=C'UTL'\n         PRINTF ' *CHECK FOR USER TRAILER LABELS'\nTLOP4    CALL  HEADER\n         B     *+4(15)\n         B     *+16\n         B     ER15\n         B     TPMK3\n         B     ER23\n         PRINTF ' --- USER TRAILER LABEL PASSED'\n         B     TLOP4\nTPMK3    BAL   LKREG,WTPMK              WRITE A TAPE MARK\nENDD     BAL   LKREG,PSTAT              PRINT FILE STATISTICS\n         B     DSLOP\nNLAB2    SWT   TEST,TLABELSW\n         BZ    ER15                     IF NOT TEST LABEL, THEN ILLEGAL\n         SWT   OFF,(TLABELSW,LABELSW)\n         SWT   ON,DASDRSW\n         PRINTA '0 LABEL TEST, TAPE CONTAINS ''DASDR'' DATA SET'\n         PRINTA\n         LA    R10,RIOB\n         BAL   LKREG,BSPBLK\n         B     DASDRL\n         SPACE 2\nER24     ERROR (E,8),'UNEXPECTED TAPE MARK WHILE PROCESSING LABELS'\nER23     ERROR (E,8),'UNEXPECTED END OF VOLUME '\nER23X    SWT   TEST,(LABELSW,DASDRSW)\n         BNZ   ER23\nENDV1    SWT   TEST,MODSW\n         BZ    NOMOD1                   BR. IF NOT MOD\n         PRINTA '0START CONCATENATION OF ''FROM'' VOLUME'\n         SWT   OFF,MODSW\n         PRINTF ' *BACK SPACE OVER TAPE MARK TO START MOD'\n         LA    R10,RIOB\n*        BACK SPACE OVER TAPE MARK REQUIRES BACK SPACE, SPACE\n         BAL   LKREG,BSPBLK             SPACE BACK OVER TAPE MARK\n         BAL   LKREG,SPACE\n         PRINTF ' --- COMPLETED'\n         MVC   RIOB,IOBSAV              RESTORE IOB\n         LA    R10,RIOB\n         BAL   LKREG,REWIND\n         SWT   TEST,LABELSW\n         BZ    NL3                      BR. IF NOT LABELED\n         BAL   LKREG,SPACE              SPACE OVER VOL. LABEL\nNL3      SWT   ON,CPYSW\n         B     DSLOPNC\nNOMOD1   BAL   LKREG,WTPMK\n         PRINTA '0 END OF TAPE VOLUME'\n         PRINTA\n         BNOPEN TAPEOUT,NCL1\n         CLOSE (TAPEOUT)\nNCL1     CLOSE (TAPEIN)\n         GOBCK 0\n         EJECT\n*          ROUTINE TO PROCESS VOLUME LABEL\n         SPACE 2\nTLABEL   CSECT\n         CNSRV 13\n         SWT   TEST,CPYSW\n         BZ    NCPY1                    BR. IF NO COPY\n         SWT   TEST,MODSW\n         BO    CKVOL1\n         SWT   TEST,CPYVLID\n         BZ    CKVOL1\n         CLI   TOLOC,0\n         BE    LABLOK2\nCKVOL1   DS    0H\n         LA    R10,WIOB\n         PRINTF ' *READ ''TO'' TAPE LABEL'\n         BAL   LKREG,REWIND\n         BAL   LKREG,READ\n         LTR   15,15\n         BNZ   ER10\n         L     R1,BUFAD\n         USING LABELSCT,R1\n         CLC   VOLLABI(4),=C'VOL1'      CHECK IF VOL1 LABEL\n         BNE   ER10\n         MVC   TOVOLSER(6),VOLSERNO     SAVE TO VOL. SER\n         CLI   TOLOC,0\n         BE    *+14                     SKIP IF NO TOVOLSER SPEC\n         CLC   VOLSERNO(6),TOLOC        COMPARE IF CORRECT TO TAPE\n         BNE   ER11                     BR. IF NOT\n         PRINTF ' --- COMPLETED'\n         MVC   ERBUF+19(6),TOVOLSER\n         PRINTA '0   ''TO'' VOLUME SER='\nLABLOK2  LA    R10,WIOB\n         BAL   LKREG,REWIND\n         MVC   ERBUF+19(6),FRVOLSER\nNCPY1    LA    R10,RIOB\n         PRINTF ' *READ ''FROM'' TAPE LABEL'\n         BAL   LKREG,REWIND             REWIND INPUT TAPE\n         BAL   LKREG,READ               READ INPUT LABEL\n         LTR   15,15\n         BNZ   NLAB1\n         C     R7,=F'80'\n         BNE   NLAB1\n         L     R1,BUFAD\n         CLC   VOLLABI(4),=C'VOL1'\n         BNE   NLAB1\n         MVC   FRVOLSER(6),VOLSERNO\n         MVC   ERBUF+19(6),FRVOLSER     GET VOL.SER\n         PRINTA '  ''FROM'' VOLUME SER='\n         CLI   FROMLOC,0\n         BE    NCKVL\n         CLC   FRVOLSER(6),FROMLOC      CHECK FOR CORRECT VOL-SER\n         BNE   ER12\nNCKVL    CLI   OWNER,X'00'\n         BE    *+10\n         MVC   BUFFER+VOLOWNER-LABELSCT(10),OWNER\n         MVC   NOWNER(10),BUFFER+VOLOWNER-LABELSCT\n         MVC   ERBUF+9(10),NOWNER\n         PRINTA '  OWNERID='\n         PRINTA\n         PRINTF ' --- COMPLETED'\n         SWT   TEST,CPYVLID\n         BZ    WSPACE                   SPACE IF CPYVOLID=NO\n         CLI   NEWVOL,0\n         BE    *+10\n         MVC   BUFFER+VOLSERNO-LABELSCT(6),NEWVOL\n         MVC   TOVOLSER(6),BUFFER+VOLSERNO-LABELSCT\n         MVC   ERBUF+23(6),TOVOLSER\n         PRINTA '  ''TO'' VOLUME SER NOW - '\n         LA    R10,WIOB                 PREPARE TO WRITE LABEL\n         PRINTF ' *COPY ''FROM'' TAPE LABEL'\n         BAL   LKREG,WRITE\nTLABEX   PRINTF ' --- COMPLETED'\nTLABEX1  SR    15,15\n         GOBCK (15)\nWSPACE   SWT   TEST,CPYSW\n         BZ    TLABEX1\n         PRINTF ' *SPACE OVER ''TO'' LABEL'\n         LA    R10,WIOB\n         BAL   LKREG,SPACE\n         B     TLABEX\nNLAB1    SWT   TEST,TLABELSW\n         BZ    ER15\n         PRINTA '0 LABEL TEST, TAPE IS UNLABELED'\n         SWT   OFF,(LABELSW,DASDRSW,TLABELSW)\n         LA    15,4\n         B     TLABEX1+2\n         DROP  R1,R13\n         EJECT\n***********************************************************************\n*                                                                     *\n*          ROUTINE TO HANDLE HEADER AND TRAILER LABELS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nHEADER   CSECT\n         CNSRV 13\n         LA    R10,RIOB\n         BAL   LKREG,READ               READ LABEL\n         B     *+4(15)\n         B     *+12\n         B     TPMK0\n         B     TTPMK\n         C     R7,=F'80'\n         BNE   NNHDR\n         L     R1,BUFAD\n         CLC   0(3,R1),0(R6)            CHECK LABEL INDICATOR\n         BNE   NHDR                     BR. IF NOT EXPECTED LABEL\n         CLC   0(4,R1),=C'HDR1'\n         BNE   NHDR1                    BR. IF NOT HDR1\n         SWT   TEST,CPYSW\n         BZ    NCHNG                    BR. IF NOT COPY\nCHNG     MVC   BUFFER+DSSN-LABEL1(6),TOVOLSER\nNCHNG    MVC   LABEL1(80),0(R1)         GET HDR1 LABEL\nNHDR1    CLC   0(4,R1),=C'HDR2'\n         BNE   NHDR2A\n         MVC   LABEL2(80),0(R1)         GET HDR2\n         SWT   TEST,CPYSW\n         BZ    NHDR2A\n         CLC   TAPEOUT+18(1),TAPEIN+18 COMPARE THE DENSITIES\n         BE    NHDR2A\n         CLI   TAPEOUT+18,B'10000011'\n         BNE   NOT2\n         MVI   DENSITY,C'2'\n         B     NHDR2A\nNOT2     CLI   TAPEOUT+18,B'11000011'\n         BNE   NOT3\n         MVI   DENSITY,C'3'\n         B     NHDR2A\nNOT3     CLI   TAPEOUT+18,B'11010011'\n         BNE   NHDR2A\n         MVI   DENSITY,C'4'\nNHDR2A   SWT   TEST,CPYSW\n         BZ    NHDR2\n         PRINTF ' --- LABEL WRITTEN'\nNHDR2    LA    R10,WIOB\n         BAL   LKREG,WRITE\n         SR    15,15\nGBCK     GOBCK (15)\nNHDR     CLC   0(2,R6),=C'EO'\n         BNE   NNHDR\n*          TRY SOME MORE CHARACTER GROUPS IF TRAILER LABELS\n         CLC   0(3,R1),=C'EOF'\n         BE    NHDR1\n         CLC   0(3,R1),=C'EOV'\n         BNE   NNHDR\n         PRINTA '  MULTI-VOLUME DATA-SET'\n         B     NHDR1\nNNHDR    LA    15,4\n         B     GBCK\nTPMK0    LA    15,8\n         B     GBCK\nTTPMK    LA    15,12\n         B     GBCK\n         EJECT\nCIO      CSECT\n         PRINT GEN\nRIOB     IOB   ECB=RECB,                                               X\n               DCB=TAPEIN,                                             X\n               FLAG1=B'00000010'\n         SPACE 2\nWIOB     IOB   ECB=WECB,                                               X\n               DCB=TAPEOUT,                                            X\n               FLAG1=B'00000010'\n         SPACE 5\nIOBSAV   IOB   DCB=TAPEIN               SAVE AREA FOR RIOB FOR ''MOD''\nRECB     DC    F'0'\nWECB     DC    F'0'\n         PRINT GEN\nTAPEIN   DCB   DDNAME=SYSUT1,                                          X\n               MACRF=(E),                                              X\n               DSORG=PS,                                               X\n               DEVD=TA,                                                X\n               IOBAD=RIOB,                                             X\n               EODAD=ER21\n         SPACE 5\nTAPEOUT  DCB   DDNAME=SYSUT2,                                          X\n               MACRF=(E),                                              X\n               DSORG=PS,                                               X\n               DEVD=TA,                                                X\n               IOBAD=WIOB,                                             X\n               EODAD=ER22\n         SPACE 5\nBUFAD    DC    A(BUFFER)\n*\n         PRINT GEN\nSYSIN    DCB   DDNAME=SYSIN,                                           X\n               LRECL=80,                                               X\n               EODAD=EOD,                                              X\n               DSORG=PS,                                               X\n               MACRF=GL,                                               X\n               EXLST=DCBE1\n         SPACE 2\n         DCBE  EXLST=DCBE1,                                            X\n               RECFM=F,                                                X\n               XRECFM=(S,B,T),                                         X\n               BUFNO=(5,10)\n         SPACE 5\nSYSOUT   DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               EXLST=DCBE2\n         SPACE 2\n         DCBE  EXLST=DCBE2,                                            X\n               LRECL=(121,133),                                        X\n               RECFM=FA,                                               X\n               XRECFM=(S,B,T),                                         X\n               CHECK=F,                                                X\n               BUFNO=(5,10)\n         SPACE 5\n         PRINT GEN\n         DEFSW\n         PRINT GEN\n         SPACE 5\n***********************************************************************\n*                                                                     *\n*          ALL THE CCW-S\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRWCCW    CCW   X'07',0,0,4              REWIND\nBSPCCW   CCW   X'27',0,0,4              BACK SPACE BLOCK\nSPCCW    CCW   X'37',0,0,4              FORWARD SPACE BLOCK\nRCCW     CCW   X'02',BUFFER,X'20',65535     READ CCW\nWCCW     CCW   X'01',BUFFER,X'20',*-*\n*\nWTMKCCW  CCW   X'1F',0,X'40',4          WRITE TAPE MARK\nNOPCCW   CCW   X'03',0,0,4              CHAINED TO NOP\nSENSCCW  CCW   X'04',SENSED,X'20',4\n         SPACE 5\n         DC    C' '\nOWNER    DC    CL10' '\nNOWNER   DC    CL10'\u00e2\u00e2\u00e2\u00e2\u00e2\u00e2\u00e2\u00e2\u00e2\u00e2'\n         DC    C' '\nWANT     DC    CL8' '\n         DC    C' '\nERBUF    DC    CL133' '\nNEWVOL   DS    D'0'\nCBUFAD   DC    F'0'\nGBUG     DC    F'0'\nMASK2    DC    C'  MAX BLOCK LEN='\n         DC    X'402020202120'\n         DC    C', POSITION='\n         DC    X'402020202120'\nMAXBLK   DC    F'0'\nMINBLK   DC    F'65535'\nMNBLKN   DC    F'0'\nMXBLKN   DC    F'0'\nMASK1    DC    C'FILE SEQ. NO.='\n         DC    X'402020202120'\nSENSED   DC    X'0000000000000000'\nDWRD     DC    D'0'\nBLKCNT   DC    F'0'\nDSCNT    DC    F'0'\nTOLOC    DC    D'0'\nFROMLOC  DC    D'0'\nTOVOLSER DC    D'0'\nFRVOLSER DC    D'0'\nDDNAM2   DC    C'SYSUT2'\nUT2UN    DC    C'XXX'\nUT1UN    DC    C'XXX'\nTIOT     DC    F'0'\n         LTORG\n         EJECT\n*\n*          HEADER LABEL 1\n*\n         SPACE 2\nLABEL1   DC    CL80' '\n         ORG   LABEL1\nLABELID  DS    CL4\nDSNAME   DS    CL17\nDSSN     DS    CL6\nVOLSEQ   DS    CL4\nDSSEQ    DS    CL4\nGENNO    DS    CL4\nVERNO    DS    CL2\nCDATE    DS    CL6\nEDATE    DS    CL6\nDSSI     DS    CL1\nBLKCNTT  DS    CL6\n         ORG\n         SPACE 5\n*\n*          HEADER LABEL 2\n*\n         SPACE 2\nLABEL2   DC    CL80' '\n         ORG   LABEL2\nLABELID2 DS    CL4\nRECFM    DS    CL1\nRECSIZE  DS    CL5\nBLKSF    DS    CL5\nDENSITY  DS    CL1\nDSPOS    DS    CL1\nJJSTEP   DS    CL17\n         DS    2X\nPRCNTRL  DS    X\n         DS    X\nBLKATT   DS    X\n         ORG\n         EJECT\nBUFFER   DS    CL65535\n         DS    CL10\n         PRINT GEN\nIOB      IOBD\n*          LABEL DSECT\nLABELSCT DSECT\nVOLLABI  DS    CL3\nVOLNO    DS    CL1\nVOLSERNO DS    CL6\n         DS    XL10\nVOLVTOC  DS    CL10\n         DS    XL20\nVOLOWNER DS    CL10\n         DS    XL29\n         SPACE 5\n         END   TCOPY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TCOPY#": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x14_\\x01\\x00\\x15?\\x11\\x18\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-05-24T00:00:00", "modifydate": "2000-06-01T11:18:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "WSBG"}, "text": "//WSBGU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=S,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//STEPLIB  DD DISP=SHR,DSN=WSBG.HLASMR3.LOAD\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//*        DD DISP=SHR,DSN=WSBG.FILE270.MACLIB\n//SYSIN    DD DISP=SHR,DSN=WSBG.B.ASM(TCOPY)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=WSBG.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=WSBG.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB424229\n SETCODE AC(1)\n NAME    TCOPY(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TCOPYJ": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x13\\x0f\\x00\\x93\\x13\\x0f\\x17E\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe3\\xc5\\xc9\\xd5\\xc1\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-05-10T00:00:00", "modifydate": "1993-05-10T17:45:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "STEINAR"}, "text": "//T5200AAT JOB 80001000XH923ES110000,TAPE,MSGCLASS=X,NOTIFY=T5200AA,\n//         CLASS=S\n//STEG1    EXEC PGM=TCOPY\n//STEPLIB  DD DSN=T5200AA.POV.LOAD,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=TAPE,VOL=SER=INPUT,LABEL=(,BLP)\n//SYSUT2   DD UNIT=3480,VOL=SER=OUTPUT,LABEL=(,BLP)\n//SYSIN    DD *\n  COPY FROMDD=SYSUT1,TODD=SYSUT2,LABEL=YES,DEN=4,CPYVOLID=YES\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TCOPYLST": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x13\\x0f\\x00\\x93\\x13\\x0f\\x17F\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe2\\xe3\\xc5\\xc9\\xd5\\xc1\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-05-10T00:00:00", "modifydate": "1993-05-10T17:46:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "STEINAR"}, "text": "//T5200AAT JOB 80001000XH923ES110000,MSGCLASS=X,NOTIFY=T5200AA,\n//         CLASS=S\n//MSG      EXEC PGM=WTOR,\n// PARM='/ MONTER  KASSETT  MERKET   SKORT  '\n//STEG1    EXEC PGM=TCOPY\n//STEPLIB  DD DSN=T5200AA.POV.LOAD,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=3480,VOL=SER=INPUT,LABEL=(,BLP)\n//SYSIN    DD *\n LIST FROMDD=SYSUT1,LABEL=NO,DEN=4\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TPLABJ": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\\x13\\x0f\\x01\\x00\\x15?\\x156\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-05-10T00:00:00", "modifydate": "2000-06-01T15:36:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "WSBG"}, "text": "//WSBGTCPY  JOB ,S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=S,MSGCLASS=X\n//*   UNIT=TAPE\n//*\n//STEG1    EXEC PGM=TCOPY\n//STEPLIB  DD DSN=WSBG.LOAD,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=TAPE,VOL=SER=COPY01,LABEL=(,BLP)\n//SYSIN    DD *\n LIST FROMDD=SYSUT1,LABEL=UNKNOWN\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT193/FILE193.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT193", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}