{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013514000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1352078, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE936.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE936.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x16\\x02'", "DS1TRBAL": "b'\\xd1\\xfa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\t\\x8d\\x00\\x0c\\t\\x8f\\x00\\x04\\x00\\x17'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x009\\x01\\x15\"\\x1f\\x01\\x15\"\\x1f\\x13\\x02\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-08-09T00:00:00", "modifydate": "2015-08-09T13:02:39", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-490"}, "text": "REGULAR CBT TAPE - VERSION 490    FILE:  936\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT490.FILE936\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 12,432 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/09/15    13:02:39    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$MEMBERS": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x17\\x01\\x15!\\x9f\\x01\\x15!\\x9f\\x13I\\x00\\x0b\\x00\\n\\x00\\x00\\xd1\\xd6\\xc1\\xd9\\xd4\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2015-08-07T00:00:00", "modifydate": "2015-08-07T13:49:17", "lines": 11, "newlines": 10, "modlines": 0, "user": "JOARMC"}, "text": "The members in this library are:\n$README  : A short README file.\nNAWK     : The actual executable, must be copied to a z/OS UNIX directory!\nNAWK1CAT : The UNIX \"man\" page, formatted for use.\nPAXFULL  : The pax archive containing all the files, source and support.\nPAXLIST  : A list of the files in archive in PAXFULL.\nUNPAX    : Example JCL to unwind PAXFULL into a z/OS UNIX directory.\n\nYou don't need to unwind the PAXFULL member if you only want to install\nthe executable.  You can simply do the UNIX command:\n   cp -B \"//'this.library(NAWK)'\" /directory/containing/bin/nawk\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$README": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00A\\x01\\x15!\\x9f\\x01\\x15!\\x9f\\x13@\\x00\\x13\\x00\\x13\\x00\\x00\\xd1\\xd6\\xc1\\xd9\\xd4\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-08-07T00:00:00", "modifydate": "2015-08-07T13:40:41", "lines": 19, "newlines": 19, "modlines": 0, "user": "JOARMC"}, "text": "nawk for z/OS\n=============\nThe source for nawk was initially downloaded from\nftp://ftp.pbone.net/mirror/download.fedora.redhat.com/pub/fedora/linux\\\n/releases/22/Everything/source/SRPMS/n/nawk-20121220-3.fc21.src.rpm\nI processed it by doing:\n    rpm2cpio <nawk-20121220-3.fc21.src.rpm | cpio -dium\nThis contained the file awk.tar.gz, which I unwound and then deleted,\nleaving only the source.\nThat was then make the initial commit.\n\nThe only real change was in the makefile to define the proper C compiler\nexecutable and flags. The normal z/OS make command will work. I.e. this\ndistribution does not require any GNU utilities to implement.\n\nIn addition, I created the awk.1.cat file on Linux because the awk.1 file\nis in a markup form which is unusable on z/OS. The command to do so was:\n    groff -T ascii awk.1 >awk.1.cat\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE936": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00%\\x01\\x15\"\\x1f\\x01\\x15\"\\x1f\\x13\\x02\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-08-09T00:00:00", "modifydate": "2015-08-09T13:02:25", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT-490"}, "text": "//***FILE 936 is from John McKown and contains a port of NAWK       *   FILE 936\n//*           (New AWK) to z/OS.                                    *   FILE 936\n//*                                                                 *   FILE 936\n//*           AWK is a pattern-directed scanning and processing     *   FILE 936\n//*           language.                                             *   FILE 936\n//*                                                                 *   FILE 936\n//*  The members in this library are:                               *   FILE 936\n//*                                                                 *   FILE 936\n//*  $README  : A short README file.                                *   FILE 936\n//*                                                                 *   FILE 936\n//*  NAWK     : The actual executable, must be copied to a          *   FILE 936\n//*             z/OS UNIX directory!                                *   FILE 936\n//*                                                                 *   FILE 936\n//*  NAWK1CAT : The UNIX \"man\" page, formatted for use.             *   FILE 936\n//*                                                                 *   FILE 936\n//*  PAXFULL  : The pax archive containing all the files,           *   FILE 936\n//*             source and support.                                 *   FILE 936\n//*                                                                 *   FILE 936\n//*  PAXLIST  : A list of the files in archive in PAXFULL.          *   FILE 936\n//*                                                                 *   FILE 936\n//*  UNPAX    : Example JCL to unwind PAXFULL into a z/OS           *   FILE 936\n//*             UNIX directory.                                     *   FILE 936\n//*                                                                 *   FILE 936\n//*  You don't need to unwind the PAXFULL member if you only        *   FILE 936\n//*  want to install the executable.  You can simply do the         *   FILE 936\n//*  UNIX command:                                                  *   FILE 936\n//*                                                                 *   FILE 936\n//*  cp -B \"//'this.library(NAWK)'\" /directory/containing/bin/nawk  *   FILE 936\n//*                                                                 *   FILE 936\n//*       email:  john.archie.mckown@gmail.com                      *   FILE 936\n//*                                                                 *   FILE 936\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAWK": {"ttr": 524, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 R\\x01\\x15!\\x9f\\x01\\x15!\\x9f\\x16S\\x164\\x164\\x00\\x00\\xd1\\xd6\\xc1\\xd9\\xd4\\xc3@@\\x00\\x00\\x164\\x00\\x00\\x164\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2015-08-07T00:00:00", "modifydate": "2015-08-07T16:53:52", "lines": 5684, "newlines": 5684, "modlines": 0, "user": "JOARMC"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "NAWK1CAT": {"ttr": 2822, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 R\\x01\\x15!\\x9f\\x01\\x15!\\x9f\\x16S\\x00\\x8e\\x00\\x8e\\x00\\x00\\xd1\\xd6\\xc1\\xd9\\xd4\\xc3@@\\x00\\x00\\x00\\x8e\\x00\\x00\\x00\\x8e\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2015-08-07T00:00:00", "modifydate": "2015-08-07T16:53:52", "lines": 142, "newlines": 142, "modlines": 0, "user": "JOARMC"}, "text": "awk awk - pattern-directed scanning and processing language \u00dd \u00a8 \u00dd\n\u00a8 \u00dd | \u00a8 \u00dd \u00a8 scans each input for lines that match any of a set of\npatterns specified literally in or in one or more files specified\nas With each pattern there can be an associated action that  will\nbe  performed when a line of a matches the pattern.  Each line is\nmatched against  the  pattern  portion  of  every  pattern-action\nstatement;  the  associated  action is performed for each matched\npattern.  The file name means the standard  input.   Any  of  the\nform is treated as an assignment, not a filename, and is executed\nat the time it would have been opened if it were a filename.  The\noption  followed by is an assignment to be done before is execut-\ned; any number of options may be present.  The option defines the\ninput  field separator to be the regular expression An input line\nis normally made up of fields separated by  white  space,  or  by\nregular  expression  The  fields are denoted ..., while refers to\nthe entire line.  If is null, the input line is  split  into  one\nfield  per  character.  A pattern-action statement has the form A\nmissing means print the line; a missing pattern  always  matches.\nPattern-action  statements  are  separated  by  newlines or semi-\n\nbe one of the following:\nif( \u001b\u00dd4mexpression\u001b\u00dd24m ) \u001b\u00dd4mstatement\u001b\u00dd24m \u00dd else \u001b\u00dd4mstatement\u001b\u00dd24m \u00a8\nwhile( \u001b\u00dd4mexpression\u001b\u00dd24m ) \u001b\u00dd4mstatement\u001b\u00dd0m\nfor( \u001b\u00dd4mexpression\u001b\u00dd24m ; \u001b\u00dd4mexpression\u001b\u00dd24m ; \u001b\u00dd4mexpression\u001b\u00dd24m ) \u001b\u00dd4mstate\nfor( \u001b\u00dd4mvar\u001b\u00dd24m in \u001b\u00dd4marray\u001b\u00dd24m ) \u001b\u00dd4mstatement\u001b\u00dd0m\ndo \u001b\u00dd4mstatement\u001b\u00dd24m while( \u001b\u00dd4mexpression\u001b\u00dd24m )\nbreak\ncontinue\n{ \u00dd \u001b\u00dd4mstatement\u001b\u00dd24m \u001b\u00dd4m...\u001b\u00dd24m \u00a8 }\n\u001b\u00dd4mexpression\u001b\u00dd24m              # commonly \u001b\u00dd4mvar\u001b\u00dd24m \u001b\u00dd4m=\u001b\u00dd24m \u001b\u00dd4mexpressi\nprint \u00dd \u001b\u00dd4mexpression-list\u001b\u00dd24m \u00a8 \u00dd > \u001b\u00dd4mexpression\u001b\u00dd24m \u00a8\nprintf \u001b\u00dd4mformat\u001b\u00dd24m \u00dd , \u001b\u00dd4mexpression-list\u001b\u00dd24m \u00a8 \u00dd > \u001b\u00dd4mexpression\u001b\u00dd24m \u00a8\nreturn \u00dd \u001b\u00dd4mexpression\u001b\u00dd24m \u00a8\nnext                    # skip remaining patterns on this input line\nnextfile                # skip rest of this file, open next, start at top\ndelete \u001b\u00dd4marray\u001b\u00dd24m\u00dd \u001b\u00dd4mexpression\u001b\u00dd24m \u00a8# delete an array element\ndelete \u001b\u00dd4marray\u001b\u00dd24m            # delete all elements of array\nexit \u00dd \u001b\u00dd4mexpression\u001b\u00dd24m \u00a8     # exit immediately; status is \u001b\u00dd4mexpression\u001b\u00dd0\nStatements  are  terminated  by  semicolons,  newlines  or  right\nbraces.  An empty stands for String  constants  are  quoted  \" \",\nwith  the usual C escapes recognized within.  Expressions take on\nstring or numeric values as appropriate, and are built using  the\noperators (exponentiation), and concatenation (indicated by white\nspace).  The operators ! ++ -- += -= *= /= %= \u00ac= > >= < <= ==  !=\n?:  are also available in expressions.  Variables may be scalars,\narray elements (denoted or fields.  Variables are initialized  to\nthe  null string.  Array subscripts may be any string, not neces-\nsarily numeric; this allows for a  form  of  associative  memory.\nMultiple  subscripts  such as are permitted; the constituents are\nconcatenated, separated by the value of The statement prints  its\narguments  on  the standard output (or on a file if or is present\nor on a pipe if is present),  separated  by  the  current  output\nfield  separator,  and terminated by the output record separator.\nand may be literal names or parenthesized expressions;  identical\nstring  values in different statements denote the same open file.\nThe statement formats its expression list according to the format\n(see  The  built-in function closes the file or pipe The built-in\nfunction flushes any buffered output for the  file  or  pipe  The\nmathematical  functions  and  are built in.  Other built-in func-\ntions: the length of its argument taken as a string, or of if  no\nargument.   random  number on (0,1) sets seed for and returns the\nprevious seed.  truncates to an integer value  the  substring  of\nthat  begins  at  position counted from 1.  the position in where\nthe string occurs, or 0 if it does not.  the  position  in  where\nthe  regular  expression  occurs, or 0 if it does not.  The vari-\nables and are set to the  position  and  length  of  the  matched\nstring.   splits  the string into array elements ..., and returns\nThe separation is done with the regular expression  or  with  the\nfield  separator if is not given.  An empty string as field sepa-\nrator splits the string into one  array  element  per  character.\nsubstitutes for the first occurrence of the regular expression in\nthe string If is not given, is used.  same as except that all oc-\ncurrences  of the regular expression are replaced; and return the\nnumber of replacements.  the string resulting from formatting ac-\ncording  to  the  format executes and returns its exit status re-\nturns a copy of with  all  upper-case  characters  translated  to\ntheir  corresponding  lower-case  equivalents.  returns a copy of\nwith all lower-case characters translated to their  corresponding\nupper-case  equivalents.  The ``function'' sets to the next input\nrecord from the current input file; sets to the next record  from\nsets  variable  instead.   Finally, pipes the output of into each\ncall of returns the next line of output from In  all  cases,  re-\nturns  1 for a successful input, 0 for end of file, and -1 for an\nerror.  Patterns are arbitrary Boolean combinations (with of reg-\nular expressions and relational expressions.  Regular expressions\nare as in see Isolated regular expressions in a pattern apply  to\nthe entire line.  Regular expressions may also occur in relation-\nal expressions, using the operators and is a constant regular ex-\npression; any string (constant or variable) may be used as a reg-\nular expression, except in the position of  an  isolated  regular\nexpression  in  a pattern.  A pattern may consist of two patterns\nseparated by a comma; in this case, the action is  performed  for\nall  lines  from an occurrence of the first pattern though an oc-\ncurrence of the second.  A relational expression is  one  of  the\nfollowing:\nwhere  a relop is any of the six relational operators in C, and a\nmatchop is either (matches) or (does not match).   A  conditional\nis  an arithmetic expression, a relational expression, or a Bool-\nean combination of these.  The special patterns and may  be  used\nto  capture control before the first input line is read and after\nthe last.  and do not  combine  with  other  patterns.   Variable\nnames with special meanings: conversion format used when convert-\ning numbers (default regular expression used to separate  fields;\nalso  settable  by  option number of fields in the current record\nordinal number of the current record ordinal number of  the  cur-\nrent  record  in  the  current file the name of the current input\nfile input record separator (default newline) output field  sepa-\nrator  (default  blank) output record separator (default newline)\noutput format for numbers (default separates multiple  subscripts\n(default 034) argument count, assignable argument array, assigna-\nble; non-null members are taken as filenames array of environment\nvariables;  subscripts  are  names.  Functions may be defined (at\nthe position of a pattern-action statement) thus: function foo(a,\nb,  c) { ...; return x } Parameters are passed by value if scalar\nand by reference if array name; functions may  be  called  recur-\nsively.   Parameters  are  local to the function; all other vari-\nables are global.  Thus local variables may be created by provid-\ning excess parameters in the function definition.\n\nPrint lines longer than 72 characters.\nlength($0) > 72 { print $2, $1 }\nPrint first two fields in opposite order.\nBEGIN { FS = \",\u00dd \\t\u00a8*|\u00dd \\t\u00a8+\" }\n      { print $2, $1 }\nSame,  with  input  fields  separated  by comma and/or blanks and\ntabs.\n                        { s += $1 }\nEND                     { print \"sum is\", s, \" average is\", s/NR }\nAdd up first column, print sum and average.\n/start/, /stop/\nPrint all lines between start/stop pairs.\nBEGIN                   {# Simulate echo(1)\n                        for (i = 1; i < ARGC; i++) printf \"%s \", ARGV\u00ddi\u00a8\n                        printf \"\\n\"\n                        exit }\nA. V. Aho, B. W. Kernighan, P. J. Weinberger, The AWK Programming\nLanguage,  Addison-Wesley, 1988.  ISBN 0-201-07981-X There are no\nexplicit conversions between numbers and strings.   To  force  an\nexpression  to be treated as a number add 0 to it; to force it to\nbe treated as a string concatenate \"\" to it.\nThe scope rules for variables in functions are a botch; the  syn-\ntax is worse.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAXFULL": {"ttr": 2826, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 R\\x01\\x15!\\x9f\\x01\\x15!\\x9f\\x16S\\x194\\x194\\x00\\x00\\xd1\\xd6\\xc1\\xd9\\xd4\\xc3@@\\x00\\x00\\x194\\x00\\x00\\x194\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2015-08-07T00:00:00", "modifydate": "2015-08-07T16:53:52", "lines": 6452, "newlines": 6452, "modlines": 0, "user": "JOARMC"}, "mimetype": "application/x-compress", "datatype": "binary", "extension": ".x-compress"}, "PAXLIST": {"ttr": 5387, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 R\\x01\\x15!\\x9f\\x01\\x15!\\x9f\\x16S\\x00$\\x00$\\x00\\x00\\xd1\\xd6\\xc1\\xd9\\xd4\\xc3@@\\x00\\x00\\x00$\\x00\\x00\\x00$\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2015-08-07T00:00:00", "modifydate": "2015-08-07T16:53:52", "lines": 36, "newlines": 36, "modlines": 0, "user": "JOARMC"}, "text": "nawk/\nnawk/maketab.c\nnawk/FIXES\nnawk/run.c\nnawk/proctab.c\nnawk/makefile\nnawk/awkgram.y\nnawk/README\nnawk/ytabh.bak\nnawk/README.md\nnawk/b.c\nnawk/proto.h\nnawk/parse.c\nnawk/ytabc.bak\nnawk/ytab.c\nnawk/nawk-manpage.patch\nnawk/nawk.spec\nnawk/lib.c\nnawk/lex.c\nnawk/main.c\nnawk/tran.c\nnawk/awk.h\nnawk/awk.1\nnawk/ytab.h\nnawk/ytab.o\nnawk/b.o\nnawk/main.o\nnawk/parse.o\nnawk/maketab.o\nnawk/maketab\nnawk/proctab.o\nnawk/tran.o\nnawk/lib.o\nnawk/run.o\nnawk/lex.o\nnawk/nawk\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UNPAX": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00 \\x01\\x15!\\x9f\\x01\\x15!\\x9f\\x13T\\x00-\\x00\\x1f\\x00\\x00\\xd1\\xd6\\xc1\\xd9\\xd4\\xc3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2015-08-07T00:00:00", "modifydate": "2015-08-07T13:54:20", "lines": 45, "newlines": 31, "modlines": 0, "user": "JOARMC"}, "text": "//UNPAX    JOB ACCT,UNPAX,\n//         CLASS=?,\n//         MSGCLASS=?,\n//         NOTIFY=&SYSUID\n//******************************************************************//\n//*                                                                *//\n//* Please be cautious!                                            *//\n//* The only real consideration is to change the subdirectory in   *//\n//* the cd commands below to the proper value for your system.     *//\n//*                                                                *//\n//*                                                                *//\n//* Note: replace /directory/to/contain with the proper            *//\n//* z/OS UNIX directory.                                           *//\n//* Note: The pax command will create a directory called           *//\n//* 'nawk' in the aforementioned directory. That directory         *//\n//* will contain all the files. Copy (cp -p) the file named        *//\n//* nawk to a directory on your ${PATH}, if you want the nawk      *//\n//* command generally available.                                   *//\n//*                                                                *//\n//* If you only want the executable, then delete the //STDPARM and *//\n//* its data, leaving the second //STDPARM and its data alone.     *//\n//* This is a \"trick\" because if you have two DDs with the same    *//\n//* name, then the TIOT will contain _both_, but the OPEN function *//\n//* will always use the first one in the TIOT.                     *//\n//*                                                                *//\n//INSTALL  EXEC PGM=BPXBATCH,\n//         REGION=0M\n//STDOUT   DD   SYSOUT=*\n//STDERR   DD   SYSOUT=*\n//STDIN    DD   PATH='/dev/null',\n//         PATHOPTS=(ORDONLY)\n//STDPARM  DD   *\nSH cd /directory/to/contain/ &&\n   pax -pe -rzvf \"//'library.containing.nawk(PAXFULL)' &&\n   cd /user/manual/dir/man/C/cat1 &&\n   cp -T \"//'library.containing.nawk(NAW1CAT)' nawk.1\n/*\n//STDPARM  DD   *\nSH cd /directory/to/contain/executable &&\n   cp -B \"//'library.containing.nawk(NAWK)' nawk &&\n   chmod 755 nawk &&\n   cd /user/manual/dir/man/C/cat1 &&\n   cp -T \"//'library.containing.nawk(NAW1CAT)' nawk.1\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT936/FILE936.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT936", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}