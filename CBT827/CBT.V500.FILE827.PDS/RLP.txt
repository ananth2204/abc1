/*-----------------------------------------------------=Rexx=--*/
/* RLP  - Racf List Profile - V2.2                             */
/*-------------------------------------------------------------*/
/* Description:                                                */
/*   Uses ISPF table services to display and manipulate RACF   */
/*   data set profiles.                                        */
/*-------------------------------------------------------------*/
/* Panels:                                                     */
/*   RLPP00, RLPP01, RLPP02, RLPP03                            */
/* Messages                                                    */
/*   RFMAI500-RFMAI508                                         */
/* Tables                                                      */
/*   RLPT01                                                    */
/* 2nd level Execs                                             */
/*   RLP02                                                     */
/*-------------------------------------------------------------*/
/* 04/29/91 John Miller                                        */
/* 04/16/2003 John C. Miller - Version 2.0                     */
/* 01/15/2010 John C. Miller - Fixed various bugs.             */
/*    - Fixed DELETE so the ISPF table row gets deleted when   */
/*      a profile is deleted.                                  */
/*    - Fixed the "O" line command (set OWNER).                */
/*    - Added ISPEXEC DISPLAY SAVE/RESTORE to allow multiple   */
/*      line commands to be entered without going into a loop. */
/*    - Change message display so MSG2 is automatically at the */
/*      bottom of the screen for various FAILED or SUCCEEDED   */
/*      messages.                                              */
/*    - Added GR option to do a SETR GENERIC(class) REFRESH.   */
/*    - Improved some error checking and handling and made     */
/*      some messages more apropos.                            */
/*    - Fixed invocation parameter handling so that %RLP hlq   */
/*      invokes the dialog with hlq.** already in the search   */
/*      field.                                                 */
/*    - Added Options panel for saving user options:           */
/*      - Confirm profile delete option.                       */
/*      - Display RACF command entered under the covers.       */
/*    - Fixed COPY of non-DATASET CLASS profiles.              */
/* 03/19/2010 John C. Miller - Added a special function where  */
/*      if the user enters a filter value that has no generic  */
/*      characters in it, then this exec assumes that the      */
/*      value entered was a dataset name, and will build the   */
/*      list of profiles with the single profile (if it exists)*/
/*      that covers the DSN entered.  It answers the question: */
/*      What profile covers DSN?                               */
/*-------------------------------------------------------------*/
PARSE UPPER ARG args
PARSE UPPER ARG mask .

/*=============================================================*/
/* Set up default values                                       */
/*=============================================================*/
rfclass  = kget('CLASS')
function = 'RFLD'
cmdlist   = 1
userpref  = SYSVAR(SYSPREF)
mode      = 'MASK'
mode      = 'FILTER'
maxout    = 900
tabname   = 'RLPT01'
ztdmark   = '* * * END OF LIST * * *'
cc        = 0
panel     = 'RLPP01'
csr       = 'ACMD'
names     = 'PPARM1 PPARM2 PPARM3 PMSG PPARM4'
scrn      = 'FILTER'
pmsg      =  ''
ptype     =  '  Profile                         Input Data'
rebuild   = 1
rfsropt   = ""

/*=============================================================*/
/* Read ISPF PROFILE variables into memory.                    */
/*=============================================================*/
xvars = "xCMDLIST xCNFDEL "
ADDRESS ISPEXEC "VGET ( " xvars ")"

ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS ISPEXEC "VGET rpanel"
ADDRESS ISPEXEC "VGET filter"

IF (rfclass = '') THEN DO
   ADDRESS ISPEXEC "VGET rfclass"
   IF rfclass = '' THEN DO
      rfclass = 'DATASET'
      ADDRESS ISPEXEC "VPUT rfclass"
   END
END

IF (rpanel = '') | (rpanel = rpanel) THEN DO
   rpanel = panel
   ADDRESS ISPEXEC "VPUT rpanel"
END
ELSE DO
   panel = rpanel
END

IF rfclass = 'DATASET' THEN DO
   IF mask /= '' THEN prf = mask
   ELSE prf = userpref
   IF scrn = 'FILTER' THEN filter = prf".**"
   ELSE filter = prf
END
ELSE DO
   filter = mask
END
/*=============================================================*/
/* MAIN LOOP - EXIT WHEN END (PF3) IS ENTERED (RC-8)           */
/*=============================================================*/
startlp:
cc = 0
DO WHILE cc < 8
/*=============================================================*/
/* DISPLAY THE TABLE                                           */
/*=============================================================*/
TBDIS:
   /*-------------------------------------------------------------*/
   /* Decide whether or not to rebuild the profile list.          */
   /*-------------------------------------------------------------*/
   IF rebuild THEN DO
   /* IF rfclass = 'DATASET', */
      IF POS(" "filter" "," ** **.** ") > 0 THEN DO
         confmg1 = 'The filter that you have specified, 'filter', may'
         confmg2 = 'result in a very large output, and take several  '
         confmg3 = 'minutes to complete.                             '
         confact = 'proceed with filter' filter', class' rfclass'.'
         ADDRESS ISPEXEC "DISPLAY PANEL(CONFIRM)"
         IF rc = 0 THEN rebuild = 1
         ELSE DO
            filter = ''
            rebuild = 0
         END
         confmg1=; confmg2=;confmg3=
      END
      IF rebuild THEN DO
         IF \buildlist() THEN SIGNAL taberr
      END
   END

   /*-------------------------------------------------------------*/
   /* Display the profile list.                                   */
   /*-------------------------------------------------------------*/
   ADDRESS ISPEXEC "TBDISPL" tabname,
      "PANEL("panel") CURSOR("csr")"
   cc = RC
   PARSE UPPER VAR zcmd cmd cmdprms

   /*-------------------------------------------------------------*/
   /* If any search critera change, set the rebuild flag.         */
   /*-------------------------------------------------------------*/
   IF filter  /= savefilt  THEN rebuild = 1
   IF rfclass /= saveclass THEN rebuild = 1
   IF rfsropt /= saveopt   THEN rebuild = 1

/*=============================================================*/
/* PROCESS COMMANDS                                            */
/*=============================================================*/
      SELECT
         WHEN cmd  = 'L'       THEN  CALL find
         WHEN cmd  = 'LOCATE'  THEN  CALL find
         WHEN cmd  = 'F'       THEN  CALL find
         WHEN cmd  = 'FIND'    THEN  CALL find
         WHEN cmd  = 'R'       THEN  CALL refresh
         WHEN cmd  = 'REFRESH' THEN  CALL refresh
         WHEN cmd  = 'RR'      THEN  CALL raclist
         WHEN cmd  = 'RACLIST' THEN  CALL raclist
         WHEN cmd  = 'GR'      THEN  CALL genref
         WHEN cmd  = 'LL'      THEN  CALL long
         WHEN cmd  = 'LONG'    THEN  CALL long
         WHEN cmd  = 'SL'      THEN  CALL short
         WHEN cmd  = 'SHORT'   THEN  CALL short
         WHEN cmd  = '0'       THEN  CALL parameters
         OTHERWISE DO
            NOP
         END
      END
/*=============================================================*/
/* PROCESS LINE COMMANDS UNTIL ALL SELECTED ROWS ARE DONE      */
/*=============================================================*/
   DO WHILE ztdsels > 0
      ADDRESS ISPEXEC "CONTROL DISPLAY SAVE"
      SELECT
         WHEN acmd = 'A'     THEN CALL sel
         WHEN acmd = 'AM'    THEN CALL addmem
         WHEN acmd = 'ALT'   THEN CALL aalter
         WHEN acmd = 'ALTER' THEN CALL aalter
         WHEN acmd = 'DM'    THEN CALL delmem
         WHEN acmd = 'LM'    THEN CALL lstmem
         WHEN acmd = 'S'     THEN CALL list
         WHEN acmd = 'C'     THEN CALL copy
         WHEN acmd = 'L'     THEN CALL list
         WHEN acmd = 'D'     THEN CALL delete
         WHEN acmd = 'R'     THEN CALL replic
         WHEN acmd = 'U'     THEN CALL uacc
         WHEN acmd = 'G'     THEN CALL convert
         WHEN acmd = 'O'     THEN CALL owner
         OTHERWISE NOP
      END
      ADDRESS ISPEXEC "CONTROL DISPLAY RESTORE"
      IF ztdsels > 1 THEN DO
         ADDRESS ISPEXEC "TBDISPL" tabname
      END
      ELSE DO
         ztdsels = 0
      END
   END
END
SIGNAL exit

/*=============================================================*/
/* USER HAS EXITED THE DIALOG - CLEAN UP, CLOSE THE TABLE, ETC */
/*=============================================================*/
taberr:
SAY 'Error building ISPF table - Function terminated'
SIGNAL exit0

exit:
ADDRESS ISPEXEC "TBEND" tabname

exit0:
EXIT

/*=============================================================*/
/* COMMAND LINE COMMAND: 0 (Parameters)                        */
/*=============================================================*/
parameters:
   zcmd="";cc=0
   ADDRESS ISPEXEC "DISPLAY PANEL(RLPP00)"
   RETURN

/*=============================================================*/
/* COMMAND LINE COMMAND: Long                                  */
/*=============================================================*/
long:
   rpanel = 'RLPP02'
   panel  = 'RLPP02'
   ADDRESS ISPEXEC "VPUT rpanel"
   RETURN

/*=============================================================*/
/* COMMAND LINE COMMAND: Short                                 */
/*=============================================================*/
short:
   rpanel = 'RLPP01'
   panel  = 'RLPP01'
   ADDRESS ISPEXEC "VPUT rpanel"
   RETURN

/*=============================================================*/
/* COMMAND LINE COMMAND: Refresh                               */
/*=============================================================*/
refresh:
   rebuild = 1
   RETURN

/*=============================================================*/
/* COMMAND LINE COMMAND: Raclist                               */
/*=============================================================*/
genref:
   IF \is_racf_class(rfclass) THEN DO
      pmsg = "Invalid RACF Class: "rfclass"."
      pmsg = left(pmsg,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      RETURN
   END
   IF \is_generic_class(rfclass) THEN DO
      pmsg = "Invalid operation: "rfclass" is not a GENERIC class."
      pmsg = left(pmsg,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      RETURN
   END
   cmd = 'SETROPTS GENERIC('rfclass') REFRESH'
   cmd
   IF rc > 0 THEN DO
      pmsg = "FAIL: Unable to refresh generics for class "rfclass"."
      pmsg = left(pmsg,78)
      IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "cmd,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   ELSE DO
      pmsg = "OK: refreshed generic profile for class "rfclass"."
      pmsg = left(pmsg,78)
      IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "cmd,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
   END
   RETURN

/*=============================================================*/
/* COMMAND LINE COMMAND: Raclist                               */
/*=============================================================*/
raclist:
   rcmd = 'SETROPTS RACLIST('rfclass') REFRESH'
   IF \is_raclisted_class(rfclass) THEN DO
      pmsg = "Invalid operation: "rfclass" is not a RACLIST class."
      pmsg = left(pmsg,78)
      IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      RETURN
   END
   x = OUTTRAP("xx.",1)
   rcmd
   xcc = RC
   x = OUTTRAP('OFF')
   IF xcc > 0 THEN DO
      pmsg = 'FAIL: 'rcmd'. Is 'rfclass' a raclisted class?'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   ELSE DO
      pmsg = 'Raclist refresh successful for class 'rfclass'.'
      pmsg = left(pmsg,78)
      IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   RETURN

/*=============================================================*/
/* COMMAND LINE COMMAND: FIND                                  */
/*=============================================================*/
find:
   pparm1 = cmdprms"*"

   ADDRESS ISPEXEC "TBSCAN" tabname,
      "ARGLIST(pparm1) POSITION(crp)"
   crpsave = crp
   RETURN

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
/* Grouping Class Commands.                                    */
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
/*=============================================================*/
/* Line command: Addmem.                                       */
/*=============================================================*/
addmem:
   PARSE UPPER VAR pparm1 profile x
   PARSE UPPER VAR pparm2 mem x
   pparm2 = ""
   IF substr(rfclass,1,1) /= "G" THEN DO
      pmsg = 'Invalid cmd: 'rfclass' is not a grouping class.'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
      RETURN
   END
   RALTER rfclass profile "ADDMEM("mem")"
   xcc = RC
   IF xcc > 0 THEN DO
      pmsg = 'ADDMEM command failed, return code' xcc'.'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   ELSE DO
      pmsg = 'Member' mem 'added.'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   RETURN

/*=============================================================*/
/* Line command: Aalter.                                       */
/*=============================================================*/
aalter:
   PARSE UPPER VAR pparm1 profile x
   cmdparms = pparm2
   pparm2 = ""
   commd = 'RALTER 'rfclass profile cmdparms
   commd
   xcc = RC
   IF xcc > 0 THEN DO
      pmsg = 'FAIL: 'commd
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   ELSE DO
      pmsg = 'OK: 'commd
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   RETURN

/*=============================================================*/
/* Line command: Delmem.                                       */
/*=============================================================*/
delmem:
   PARSE UPPER VAR pparm1 profile x
   PARSE UPPER VAR pparm2 mem x
   pparm2 = ""
   IF substr(rfclass,1,1) /= "G" THEN DO
      pmsg = 'Invalid cmd: 'rfclass' is not a grouping class.'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
      RETURN
   END
   RALTER rfclass profile "DELMEM("mem")"
   xcc = RC
   IF xcc > 0 THEN DO
      pmsg = 'DELMEM command failed, return code' xcc'.'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   ELSE DO
      pmsg = 'Member' mem 'deleted.'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   RETURN

/*=============================================================*/
/* Line command: lstmem.                                       */
/*=============================================================*/
lstmem:
   PARSE UPPER VAR pparm1 profile x
   PARSE UPPER VAR pparm2 mem x
   pparm2 = ""
   IF substr(rfclass,1,1) /= "G" THEN DO
      pmsg = 'Invalid cmd: 'rfclass' is not a grouping class.'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
      RETURN
   END
   x = OUTTRAP("ld.",9999)
   RLIST rfclass profile
   x = OUTTRAP('OFF')
   drop lstmem.
   lstmem.0 = 2
   lstmem.1 = 'Members in profile' profile':'
   lstmem.2 = '----------------------------'
   DO qq = 1 TO ld.0
      IF POS('RESOURCES IN GROUP',ld.qq) > 0 THEN,
      DO rr = qq+2 to ld.0
         PARSE VAR ld.rr zmem .
         IF zmem = "" THEN LEAVE rr
         zz = lstmem.0 + 1
         lstmem.0 = zz
         lstmem.zz = zmem
      END
   END
   call view "lstmem."
   RETURN

/*=============================================================*/
/* LINE COMMAND U (Uacc)                                       */
/*=============================================================*/
uacc:
   PARSE UPPER VAR pparm1 ds x
   IF pparm2 = "" THEN DO
      m=""
      m1="Error: Enter new UACC value in the input field for this line."
      m1=left(m1,78)
      m2="Tab to the right under 'Data Input' heading to enter UACC."
      m2=left(m2,78)
      pmsg = m1""m2
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      RETURN
   END
   IF POS(' 'pparm2' ',' NONE READ ALTER UPDATE CONTROL ') = 0 THEN DO
      pmsg = 'Bad UACC entered:' pparm2'.'
      pmsg = pmsg' Enter valid UACC value in the "Input Data" field.'
      pmsg = left(pmsg,78)
      p2 = "Valid UACC values are: CONTROL NONE READ UPDATE ALTER"
      pmsg = pmsg""left(p2,78)
      pparm2 = ""
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
      RETURN
   END
   IF rfclass = 'DATASET' THEN DO
      rcmd = "ALTDSD '"ds"' UACC("pparm2")" pparm3
   END
   ELSE DO
      rcmd = "RALTER " rfclass ds "UACC("pparm2")"
   END
   rcmd
   xcc = RC
   IF xcc > 0 THEN DO
      pmsg = 'Command failed, UACC not changed. ' xcc
      pmsg = left(pmsg,78)
      IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
      pparm2  = ""
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   ELSE DO
      pmsg = 'UACC for 'ds' in 'rfclass' class changed to' pparm2'.'
      pmsg = left(pmsg,78)
      IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
      pparm2  = ""
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
      ADDRESS ISPEXEC "TBPUT" tabname
   END
   RETURN

/*=============================================================*/
/* LINE COMMAND S (SELECT)                                     */
/*=============================================================*/
sel:
   PARSE UPPER VAR pparm1 ds x
   CALL RLP02 ds pparm3 "CLASS("rfclass")"
   RETURN

/*=============================================================*/
/* LINE COMMAND C (COPY) and R (Replic)                        */
/*=============================================================*/
replic:
   PARSE UPPER VAR pparm1 pparm2 x
   ADDRESS ISPEXEC "TBPUT" tabname
   RETURN

copy:
trace off
   PARSE UPPER VAR pparm1 ds x
   IF pparm3 = 'GENERIC' THEN DO
      fgeneric = 'FGENERIC'
      generic = 'GENERIC'
   END
   ELSE DO
      fgeneric = ''
      generic = ''
   END

   /*----------------------------------------------------------*/
   /* Make sure user entered a new profile name in input fld.  */
   /*----------------------------------------------------------*/
   IF pparm2 = "" THEN DO
      m=""
      m1="Error: Enter new profile name in the input field "
      m1=m1"for this line."
      m1=left(m1,78)
      m2="Tab to the right under 'Data Input' heading to enter the new "
      m2=m2"profile name."
      m2=left(m2,78)
      pmsg = m1""left("",78)""m2
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      RETURN
   END

   IF rfclass = 'DATASET' THEN DO
      rcmd = "ADDSD '"pparm2"' FROM('"ds"')" generic fgeneric
   END
   ELSE DO
      rcmd = "RDEFINE "rfclass" "pparm2" FROM("ds")"
   END

   x = OUTTRAP("err.",5)
      rcmd
      xcc = RC
   x = OUTTRAP("OFF")
   IF xcc = 0 THEN DO
      temp = pparm2
      pparm2 = ''
      ADDRESS ISPEXEC "TBPUT"   tabname
      pparm1 = temp
      IF generic = 'GENERIC' THEN DO
         pparm1 = pparm1' (G)'
         pparm3 = 'GENERIC'
      END
      pmsg = 'Profile created successfully'
      pmsg = left(pmsg,78)
      IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      ADDRESS ISPEXEC "TBADD"   tabname
      ADDRESS ISPEXEC "TBSKIP"  tabname "NUMBER(+1)"
   END
   ELSE DO
      pmsg = "Error: Copy of profile "ds" failed."
      pmsg = left(pmsg,78)
      DO xxx = 1 TO err.0
         pmsg=pmsg""left(err.xxx,78)
      END
      IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
      ADDRESS ISPEXEC "TBPUT" tabname
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
   END
   RETURN

/*=============================================================*/
/* LINE COMMAND D (Delete)                                     */
/*=============================================================*/
delete:
trace off
   /*----------------------------------------------------------*/
   /* Confirm deletion of profile.                             */
   /*----------------------------------------------------------*/
   PARSE UPPER VAR pparm1 ds x
   trace off
   IF xCNFDEL = "/" THEN DO
   trace off
      confmg1 = 'Delete RACF profile' ds' in class 'rfclass':'
      confact = 'delete the profile'
      ADDRESS ISPEXEC "DISPLAY PANEL(CONFIRM)"
      IF rc > 0 THEN DO
         pmsg = 'Profile' ds 'not deleted'
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI509)"
         RETURN
      END
   END

   /*----------------------------------------------------------*/
   /* User wants to delete profile--do so.                     */
   /*----------------------------------------------------------*/
   IF pparm3 = 'GENERIC' THEN extraparms = 'GENERIC'
                ELSE extraparms = 'NOSET'
   /*----------------------------------------------------------*/
   /* Process DATASET profile.                                 */
   /*----------------------------------------------------------*/
   IF rfclass = 'DATASET' THEN DO
     rcmd = "DELDSD '"ds"'" extraparms
     rcmd
     del_rc = rc
      IF rc = 0 THEN DO
         pmsg = 'Profile' ds 'deleted'
         pmsg = left(pmsg,78)
         IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
         ADDRESS ISPEXEC "TBDELETE" tabname
      END
      ELSE DO
         pmsg = 'Profile' ds 'not deleted'
         pmsg = left(pmsg,78)
         IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
         ADDRESS ISPEXEC "TBDELETE" tabname
      END
   END
   /*----------------------------------------------------------*/
   /* Process GENERAL RESOURCE profile.                        */
   /*----------------------------------------------------------*/
   ELSE DO
      rcmd = "RDELETE "rfclass ds
      rcmd
      IF rc = 0 THEN DO
         pmsg = 'Profile' ds 'in class' rfclass 'deleted.'
         pmsg = left(pmsg,78)
         IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI509)"
         ADDRESS ISPEXEC "TBDELETE" tabname
      END
      ELSE DO
         pmsg = 'Error: Profile' ds 'in class' rfclass 'not deleted.'
         pmsg = left(pmsg,78)
         IF xCMDLIST = "/" THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI509)"
      END
   END

trace off
RETURN

/*=============================================================*/
/* LINE COMMAND G (Convert)                                    */
/*=============================================================*/
convert:
   PARSE UPPER VAR pparm1 ds x
   IF pparm3 = 'GENERIC' THEN generic = 'GENERIC'
                ELSE generic = ''
   IF generic = 'GENERIC' THEN DO
      RETURN
   END

   confmg1 = 'Discrete profile' ds
   confmg2 = 'will be converted to Generic;'
   confmsg = 'proceed with conversion'
   ADDRESS ISPEXEC "DISPLAY PANEL(CONFIRM)"
   IF RC = 0 THEN DO
      x = OUTTRAP("CMD.",5)
      /* Add a generic using the discrete as a model */
      "AD '"ds"' GENERIC FROM('"ds"')"
      /* If no good, throw error and return          */
      IF rc > 4 THEN DO
         pmsg = 'Error converting' ds'.'
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
         RETURN
      END
      /* If is good, delete the discrete profile     */
      "DELDSD '"ds"'" generic
      xcc = RC
      x = OUTTRAP("OFF")
      rebuild = 1

      /* If delete failed, try NOSET parm     */
      IF xcc > 0 THEN DO
         "DELDSD '"ds"' NOSET"
         xcc = RC
      END

      IF xcc = 0 THEN DO
         pmsg = 'Profile' ds 'converted.'
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
      END
      ELSE DO
         pmsg = 'Profile' ds 'not converted.'
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      END
   END
   ELSE DO
      pmsg = 'Profile' ds 'not converted.'
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI509)"
   END
   RETURN

/*=============================================================*/
/* LINE COMMAND L (List)                                       */
/*=============================================================*/
list:
   PARSE UPPER VAR pparm1 ds x
   IF pparm3 = 'GENERIC' THEN generic = 'GENERIC'
                ELSE generic = ''
   segments = ""
   IF rfclass =  'STARTED' THEN segments = 'STDATA'
   IF rfclass /= 'DATASET' THEN DO
      x = OUTTRAP("ld.",9999)
      "RLIST "rfclass ds generic segments "AU"
      x = OUTTRAP('OFF')
      call view "ld."
   END
   ELSE DO
      x = OUTTRAP("ld.",9999)
      "LD DA('"ds"')" generic "HISTORY AU"
      x = OUTTRAP('OFF')
      call view "ld."
   END
   return

/*=============================================================*/
/* LINE COMMAND O (Owner).  Change owner of this profile.      */
/*=============================================================*/
owner:
   PARSE VAR pparm1 zprofname zgenflag .
   IF zgenflag = '(G)' THEN zgenflag = 'GENERIC'
   ELSE zgenflag = ''
   /*----------------------------------------------------------*/
   /* Make sure user entered an owner in the input field.      */
   /*----------------------------------------------------------*/
   IF pparm2 = "" THEN DO
      m=""
      m1="Error: Enter new OWNER in the input field for this line."
      m1=left(m1,78)
      m2="Tab to the right under 'Data Input' heading to enter owner."
      m2=left(m2,78)
      pmsg = m1""left("",78)""m2
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      RETURN
   END
   IF \is_rf_group(pparm2) & \is_rf_user(pparm2) THEN DO
      m=""
      m1="Error: New owner must be a RACF userid or group."
      m1=left(m1,78)
      m2=pparm2 "is not a valid RACF userid or group."
      m2=left(m2,78)
      pmsg = m1""left("",78)""m2
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      RETURN
   END
   IF rfclass = 'DATASET' THEN DO
      rcmd = "ALTDSD '"zprofname"' OWNER("pparm2")" zgenflag
   END
   ELSE DO
      rcmd = "RALTER "rfclass" "zprofname" OWNER("pparm2")"
   END
   rcmd
   IF rc = 0 THEN DO
      pmsg = 'Owner for' pparm1 'changed to' pparm2'.'
      pmsg=left(pmsg,78)
      IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
   END
   ELSE DO
      pmsg = "Error: Unable to change owner of "zprofname" to "pparms"."
      pmsg=left(pmsg,78)
      IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
      ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
   END
   return

/*-------------------------------------------*/
/* Build new profile list table              */
/* Return "0" means no datasets found        */
/* Return "1" means ok                       */
/*-------------------------------------------*/
buildlist:
pmsg = ''
pparm2 = ''
rebuild = 0

/*----------------------------------------------------------------*/
/* Special case:  If the search filter has no generic             */
/* characters, and the class is DATASET, then find out what if    */
/* any profiles cover the entered value.                          */
/*----------------------------------------------------------------*/
IF rfclass = 'DATASET' & \is_generic(filter) THEN DO
   dsn = filter
   ADDRESS ISPEXEC "TBCREATE" tabname "NOWRITE NAMES("names") REPLACE"
   IF RC > 4 THEN RETURN 0

   /*-------------------------------------------------------------*/
   /* See if a discrete profile exists for the dataset.           */
   /*-------------------------------------------------------------*/
   x = OUTTRAP('sr.',5)
       "LISTDSD DA('"dsn"') NOGENERIC"
       cc = rc
   x = OUTTRAP('OFF')
   IF cc = 0 THEN DO
      pparm1 = dsn
      ADDRESS ISPEXEC "TBADD" tabname
      RETURN 1
   END

   /*-------------------------------------------------------------*/
   /* No discrete profile exists - Check for a generic profile.   */
   /* If one exists, parse the name out of line 1 of the output.  */
   /*-------------------------------------------------------------*/
   x = OUTTRAP('sr.',5)
       "LISTDSD DA('"dsn"') GENERIC"
       cc = rc
   x = OUTTRAP('OFF')
   IF cc = 0 THEN DO
      PARSE VAR sr.1 "INFORMATION FOR DATASET " prof
      prof = STRIP(prof,"B")
      pparm1 = prof
      ADDRESS ISPEXEC "TBADD" tabname
      RETURN 1
   END
   /*----------------------------------------------------------------*/
   /* No profiles found for the dataset entered.  Enter a dummy      */
   /* record for the table display.                                  */
   /*----------------------------------------------------------------*/
   pparm1 = 'PROFILE NOT FOUND FOR' dsn'.'
   ADDRESS ISPEXEC "TBADD" tabname
   RETURN 1
END

/*-------------------------------------------*/
/* Make sure class is valid.                 */
/*-------------------------------------------*/
IF \is_racf_class(rfclass) THEN DO
   m=""
   m1="Error: "rfclass" is not a valid RACF class."
   m1=left(m1,78)
   m2="Enter a valid RACF class to continue."
   m2=left(m2,78)
   pmsg = m1""left("",78)""m2
   ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
   rebuild = 1
END

aaa:
x = OUTTRAP("LINE.",maxout)
 "SEARCH "scrn"("filter") CLASS("rfclass")" rfsropt
 srcc = rc
x = OUTTRAP("OFF")
ADDRESS ISPEXEC "TBCREATE" tabname "NOWRITE NAMES("names") REPLACE"
IF RC > 4 THEN RETURN 0

savefilt = filter
saveclass = rfclass
saveopt   = rfsropt

IF srcc = 0 THEN DO num = 1 to line.0
   PARSE UPPER VAR line.num pparm1 gener
   IF gener = '(G)' THEN DO
      pparm1 = pparm1" (G)"
      pparm3 = "GENERIC"
   END
   ELSE DO
      pparm3 =
   END
   IF pparm1 /= '' THEN DO
      ADDRESS ISPEXEC "TBADD" tabname
   END
END
ELSE DO
   pparm1 = 'No profiles Found'
   ADDRESS ISPEXEC "TBADD" tabname
END
sortflds = 'pparm1,c,a'
ADDRESS ISPEXEC "TBSORT" tabname "FIELDS("sortflds")"
ADDRESS ISPEXEC "TBTOP"  tabname
RETURN 1


/*-------------------------------------------*/
/*-------------------------------------------*/
/*-------------------------------------------*/
/*---- s u b r o u t i n e s ----------------*/
/*-------------------------------------------*/
/*-------------------------------------------*/
/*-------------------------------------------*/

/*-------------------------------------------*/
/* Get keyword parm (return value)           */
/*-------------------------------------------*/
xget:
ARG var1,var2
pstr = " "var1" "
IF POS(" "var1" "," "args" ") = 0 THEN RETURN var2
ELSE RETURN var1

/*---------------------------------------------------------*/
/* ISPF EDIT of a stem var contents.                       */
/*---------------------------------------------------------*/
view:
PARSE ARG stem service
if service = "" THEN service = "BROWSE"
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
/* Allocate temporary file; write command output to it;    */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
##ddn = LEFT("DD"TIME('S'),7)
"ALLOC FI("##ddn") DSORG(PS) RECFM(F B) LRECL(80) BLKSIZE(8000)",
   "NEW TRACKS UNIT(SYSDA) SP(15,5)"
INTERPRET '"EXECIO * DISKW '##ddn' (STEM 'stem' FINIS"'
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
/* Assign dataid; edit or browse it; free the dataid.      */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
ADDRESS ISPEXEC "LMINIT DATAID(##id) DDNAME("##ddn")"
ADDRESS ISPEXEC service "DATAID("##id")"
ADDRESS ISPEXEC "LMFREE DATAID("##id")"

"FREE  FI("##ddn")"
return

/*-------------------------------------------*/
/* Get keyword parm (return boolean)         */
/*-------------------------------------------*/
iget:
ARG var
pstr = " "var" "
IF POS(" "var" "," "args" ") = 0 THEN RETURN 0
ELSE RETURN 1

/*-------------------------------------------*/
/* Get keyword value parameter               */
/*-------------------------------------------*/
kget:
ARG var, default
PARSE UPPER VAR args (var)'(' var ')'
IF var = '' THEN var = default
RETURN var

/*---------------------------------------------------Rexx--*/
/* JULIAN  - Convert between gregorian and julian dates.   */
/* v1.0                                                    */
/*---------------------------------------------------------*/
/* For gregorian input, assumes mm/dd/yy or mm/dd/yyyy     */
/* For julian input, assumes yyddd or yyyyddd              */
/*---------------------------------------------------------*/
/* Copyright 2003 JMIT.                                    */
/*---------------------------------------------------------*/
/* 04/08/2003 John C. Miller                               */
/*---------------------------------------------------------*/
PARSE ARG ##date .

days.1  = 31; days.2  = 28; days.3  = 31; days.4  = 30; days.5  = 31;
days.6  = 30; days.7  = 31; days.8  = 31; days.9  = 30; days.10 = 31;
days.11 = 30; days.12 = 31

/*---------------------------------------------------------*/
/* A "/" was found in the input date, so assume gregorian  */
/*---------------------------------------------------------*/
IF POS("/",##date) > 1 THEN DO
   IF length(##date) = 8 THEN DO
      year = substr(##date,7,2)
      IF year > 50 THEN year = "19"year
      ELSE year = "20"year
   END
   ELSE IF length(##date) = 10 THEN DO
      year = substr(##date,7,4)
   END
   ELSE DO
      exit
      RETURN 0
   END
   /* Adjust for leap year.                                   */
   IF year // 4= 0 THEN days.2 = 29
   month = substr(##date,1,2); day = substr(##date,4,2)
   dayctr = day
   DO z = 1 TO month-1
      dayctr = days.z + dayctr
   END
   return year"/"RIGHT("000"dayctr,3)
END
/*---------------------------------------------------------*/
/* Input was julian, so return gregorian.                  */
/*---------------------------------------------------------*/
ELSE DO
   IF length(##date) = 5 THEN DO
      year = substr(##date,1,2)
      IF year > 50 THEN year = "19"year
      ELSE year = "20"year
      day = substr(##date,3,3)
   END
   ELSE IF length(##date) = 7 THEN DO
      year = substr(##date,1,4)
      day = substr(##date,5,3)
   END
   ELSE DO
      return 0
   END
   ctr = day + 0
   DO z = 1 TO 12
      ctr = ctr - days.z
      IF ctr < 0 THEN LEAVE
   END
   ctr = ctr + days.z
   return right("00"z,2)"/"right("00"ctr,2)"/"year
END

/*-------------------------------------------------------------*/
/* is_rf_group - Returns 1 if passed value is a RACF group.    */
/*-------------------------------------------------------------*/
is_rf_group:
ARG ##grp
##x = OUTTRAP("##y.",15)
"LG "##grp
##x = OUTTRAP("OFF")
IF POS(" NAME NOT FOUND IN RACF DATA SET",##y.1) > 0 THEN RETURN 0
IF POS(" INVALID GROUP",##y.1) > 0 THEN RETURN 0
RETURN 1

/*-------------------------------------------------------------*/
/* is_rf_user - Returns 1 if passed value is a RACF user.      */
/*-------------------------------------------------------------*/
is_rf_user:
ARG ##usr
##x = OUTTRAP("##y.",15)
"LU "##usr
##x = OUTTRAP("OFF")
IF POS(" UNABLE TO LOCATE USER",##y.1) > 0 THEN RETURN 0
IF POS(" INVALID USERID",##y.1) > 0 THEN RETURN 0
RETURN 1

/*-------------------------------------------------------------*/
/* am_i_rf_special - Returns 1 if userid is RACF special.      */
/* This works even if you are not RACF SPECIAL, since you can  */
/* always list your own userid.                                */
/*-------------------------------------------------------------*/
am_i_rf_special:
##x = OUTTRAP("##y.",10)
"LU "USERID()
##x = OUTTRAP("OFF")
DO ##x = 1 TO ##y.0
   PARSE VAR ##y.##x "ATTRIBUTES=" ##attr
   IF POS("SPECIAL"," "##attr) > 0 THEN RETURN 1
END
RETURN 0

/*-------------------------------------------------------------*/
/* is_raclisted                                                */
/* Return if this is a RACF group that is RACLISTed.           */
/*-------------------------------------------------------------*/
is_raclisted_class:
PARSE UPPER ARG ##class .
IF \is_racf_class(##class) THEN RETURN 0
PARSE UPPER ARG ##class .
##classes = setr_text_block("RACLIST CLASSES =")
IF WORDPOS(##class,##classes) > 0 THEN RETURN 1
ELSE RETURN 0

/*-------------------------------------------------------------*/
/* is_generic                                                  */
/* Return if this is a RACF group that is GENERIC.             */
/*-------------------------------------------------------------*/
is_generic_class:
PARSE UPPER ARG ##class .
IF \is_racf_class(##class) THEN RETURN 0
PARSE UPPER ARG ##class .
##classes = setr_text_block("GENERIC PROFILE CLASSES =")
IF WORDPOS(##class,##classes) > 0 THEN RETURN 1
ELSE RETURN 0

/*-------------------------------------------------------------*/
/* is_global_checking                                          */
/* Return if this is a RACF group that is GLOBAL ACCESS CHKING */
/*-------------------------------------------------------------*/
is_global_access:
PARSE UPPER ARG ##class .
IF \is_racf_class(##class) THEN RETURN 0
PARSE UPPER ARG ##class .
##classes = setr_text_block("GLOBAL CHECKING CLASSES =")
IF WORDPOS(##class,##classes) > 0 THEN RETURN 1
ELSE RETURN 0

/*-------------------------------------------------------------*/
/* is_racf_class                                               */
/* Return if this is a RACF class.                             */
/*-------------------------------------------------------------*/
is_racf_class:
PARSE UPPER ARG ##class .
##x = OUTTRAP("##b.",10)
"SR CLASS("##class") MASK(¢%¢%&¢$$¢$)"
##x = OUTTRAP("OFF")
DO ##a = 1 TO ##b.0
   IF POS("INVALID CLASS"," "##b.##a) > 0 THEN RETURN 0
END
RETURN 1

/*-------------------------------------------------------------*/
/* setr_text_block                                             */
/* Return block of text in the SETR LIST output.  Accepts      */
/* the header of the desired text, such as "ACTIVE CLASSES"    */
/* and would find the desired text in a block similar to:      */
/*                                                             */
/* ACTIVE CLASSES = DATASET USER GROUP $PPSFUNC ACCTNUM        */
/*                  CCICSCMD CSFKEYS CSFSERV DCICSDCT          */
/*                  DIGTRING DIRECTRY DSNR ECICSDCT            */
/*                  GCICSTRN GCSFKEYS GSDSF GTERMINL           */
/*                  IBMOPC JCICSJCT JESSPOOL KCICSJCT          */
/*                  OPERCMDS PCICSPSB PERFGRP PMBR             */
/*                                                             */
/*-------------------------------------------------------------*/
setr_text_block:
PARSE UPPER ARG ##srchstr
###classes=""
##x = OUTTRAP("##y.",999)
"SETR LIST"
##x = OUTTRAP("OFF")
DO ##x = 1 TO ##y.0
   IF POS(##srchstr," "##y.##x) > 0 THEN DO
      PARSE VAR ##y.##x (##srchstr) ###classes
      ###classes = STRIP(###classes,"B")
      DO ##xx = ##x+1 to ##y.0
         IF SUBSTR(##y.##xx,1,5) <> "     " THEN LEAVE ##x
         ###classes = ###classes" "STRIP(##y.##xx,"B")
      END
   END
END
RETURN ###classes

/*----------------------------------------------------------------*/
/* Check for Generic characters * or %.                           */
/*----------------------------------------------------------------*/
is_generic: Procedure
ARG dsn
IF POS("*",dsn) > 0 THEN RETURN 1
IF POS("%",dsn) > 0 THEN RETURN 1
RETURN 0

