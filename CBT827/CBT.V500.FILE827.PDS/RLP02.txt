/*------------------------------------------------------=Rexx=-*/
/* RLP02 - Edit authorization list                             */
/*-------------------------------------------------------------*/
/* V 2.1                                                       */
/*-------------------------------------------------------------*/
/* Description:                                                */
/* This Rexx Exec is called by RLP exec.  The purpose is       */
/* to display in ISPF table format the authorization list for  */
/* a selected RACF dataest profile.   This exec is passed the  */
/* values of 'PROFNAM', the profile name, and the absolute     */
/* value of 'GENERIC' if the profile passed is a generic       */
/* profile.                                                    */
/*-------------------------------------------------------------*/
/* Panels:                                                     */
/*   RLPP03                                                    */
/* Messages                                                    */
/*   RFMAI500-RFMAI508                                         */
/* Tables                                                      */
/*   RLPLST01                                                  */
/* 2nd level Execs                                             */
/*   NONE                                                      */
/*-------------------------------------------------------------*/
/* 04/29/91 John Miller                                        */
/*-------------------------------------------------------------*/
/* 04/16/2003 John C. Miller - Added new functions.            */
/*-------------------------------------------------------------*/
PARSE UPPER ARG profnam x
PARSE UPPER ARG args

rfclass   = kget('CLASS','DATASET')

IF iget('GENERIC') THEN generic = 'GENERIC'
ELSE generic =


/*=============================================================*/
/* SET UP DEFAULT VALUES                                       */
/*=============================================================*/
ztdmark   = '* * * End of list * * *'
cc        = 0
panel     = 'RLPP03'
csr       = 'ACMD'
tabname   = 'RLPLST01'
maxout    = 900
names     = 'PPARM1 PPARM2'

/*=============================================================*/
/* Read ISPF PROFILE variables into memory.                    */
/*=============================================================*/
xvars = "xCMDLIST xCNFDEL "
ADDRESS ISPEXEC "VGET ( " xvars ")"

/*=============================================================*/
/* CREATE THE TEMPORARY TABLE                                  */
/*=============================================================*/
IF \authlist() THEN SIGNAL listerr
/*=============================================================*/
/* MAIN LOOP - EXIT WHEN END (PF3) IS ENTERED (RC-8)           */
/*=============================================================*/
startlp:
cc = 0
DO WHILE cc < 8
/*=============================================================*/
/* DISPLAY THE TABLE                                           */
/*=============================================================*/
tbdis:
   ADDRESS ISPEXEC "TBDISPL" tabname,
      "PANEL("panel") CURSOR("csr")"
   cc = RC
   PARSE UPPER VAR zcmd cmd cmdprms
/*=============================================================*/
/* PROCESS COMMANDS                                            */
/*=============================================================*/
      SELECT
         WHEN cmd  = 'S'     THEN  CALL sort
         WHEN cmd  = 'SORT'  THEN  CALL sort
         WHEN cmd  = 'F'     THEN  CALL find
         WHEN cmd  = 'FIND'  THEN  CALL find
         WHEN cmd  = 'L'     THEN  CALL find
         WHEN cmd  = 'LIST'  THEN  CALL find
         OTHERWISE NOP
      END
/*=============================================================*/
/* PROCESS LINE COMMANDS UNTIL ALL SELECTED ROWS ARE DONE      */
/*=============================================================*/
   DO WHILE ztdsels > 0
      PARSE UPPER VAR acmd xcmd 2 anum
      IF DATATYPE(anum) /= 'NUM' THEN anum = 0
      ELSE acmd = xcmd
      SELECT
         WHEN acmd = 'I' THEN CALL insert
         WHEN acmd = 'A' THEN CALL add
         WHEN acmd = 'D' THEN CALL delete
         WHEN acmd = 'R' THEN CALL repeat
         OTHERWISE IF (pparm1 /= '') & (pparm2 /= '') THEN call add
      END
      IF ztdsels > 1 THEN DO
         ADDRESS ISPEXEC "TBDISPL" tabname
      END
      ELSE DO
         ztdsels = 0
      END
   END
END
SIGNAL exit

/*=============================================================*/
/* USER HAS EXITED THE DIALOG - CLEAN UP, CLOSE THE TABLE, ETC */
/*=============================================================*/
listerr:
SAY 'Error creating authorization list table'

exit:
ADDRESS ISPEXEC "TBEND" tabname

exit0:
EXIT



/*=============================================================*/
/* LINE COMMAND I (INSERT)                                     */
/*=============================================================*/
insert:
/* TRACE r */
   IF anum > 0 THEN max = anum
   ELSE max = 1
   DO WHILE max > 0
   ADDRESS ISPEXEC "TBVCLEAR" tabname
   ADDRESS ISPEXEC "TBADD" tabname "ORDER"
   csr = 'PPARM1'
   ADDRESS ISPEXEC "TBTOP" tabname
   RETURN

/*=============================================================*/
/* LINE COMMAND A (ADD)                                        */
/*=============================================================*/
add:
/* TRACE r */
   IF anum > 0 THEN max = anum
   ELSE max = 1
   DO WHILE max > 0
      IF rfclass = 'DATASET' THEN DO
         rcmd = "PERMIT '"profnam"' ID("pparm1")",
         "ACCESS("pparm2") "generic
      END
      ELSE DO
         rcmd = "PERMIT "profnam" ID("pparm1") CLASS("rfclass")",
         "ACCESS("pparm2") "generic
      END
      rcmd
      cc = RC
      IF cc = 0 THEN DO
         pmsg = pparm2" permission set to" profnam "for" pparm1"."
         pmsg = left(pmsg,78)
         IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
         ADDRESS ISPEXEC "TBADD" tabname
      END
      ELSE DO
         pmsg="Error: Permit not performed."
         pmsg = left(pmsg,78)
         IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
         ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
      END
      csr = 'PPARM1'
      ADDRESS ISPEXEC "TBSKIP" tabname "NUMBER(+1)"
      max = max - 1
   END
   ADDRESS ISPEXEC "TBTOP" tabname
   RETURN

/*=============================================================*/
/* LINE COMMAND R (REPEAT)                                     */
/*=============================================================*/
repeat:
   IF anum > 0 THEN max = anum
   ELSE max = 1
   DO WHILE max > 0
      ADDRESS ISPEXEC "TBADD" tabname "ORDER"
      csr = 'PPARM1'
      csrr = crp + 1
      max = max - 1
   END
   RETURN

/*=============================================================*/
/* LINE COMMAND D (DELETE)                                     */
/*=============================================================*/
delete:
   IF anum > 0 THEN max = anum
   ELSE max = 1

   DO WHILE max > 0
      IF pparm1 /= '' THEN DO
         IF rfclass = 'DATASET' THEN DO
            rcmd = "PERMIT '"profnam"' ID("pparm1") DELETE" generic
         END
         ELSE DO
            rcmd = "PERMIT "profnam" ID("pparm1") DELETE",
            "CLASS("rfclass")" generic
         END
         rcmd
         IF cc = 0 THEN DO
            pmsg = pparm2" permission removed from",
               profnam "for" pparm1"."
            pmsg = left(pmsg,78)
            IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
            ADDRESS ISPEXEC "SETMSG MSG(RFMAI508)"
            ADDRESS ISPEXEC "TBDELETE" tabname
         END
         ELSE DO
            pmsg="Error: Permit not removed."
            pmsg = left(pmsg,78)
            IF xCMDLIST = '/' THEN pmsg=pmsg""left("Cmd was: "rcmd,78)
            ADDRESS ISPEXEC "SETMSG MSG(RFMAI507)"
         END
      END
      csr = 'ACMD'
      csrr = crp
      max = max - 1
      ADDRESS ISPEXEC "TBSKIP" tabname "NUMBER(+1)"
   END
   RETURN

/*=============================================================*/
/* COMMAND LINE COMMAND: FIND                                  */
/*=============================================================*/
find:
   pparm1 = cmdprms"*"

   ADDRESS ISPEXEC "TBSCAN" tabname,
      "ARGLIST(pparm1) POSITION(crp)"
   crpsave = crp
   RETURN


/*-------------------------------------------*/
/*-------------------------------------------*/
/*---- s u b r o u t i n e s ----------------*/
/*-------------------------------------------*/
/*-------------------------------------------*/

/*-------------------------------------------*/
/* Get keyword parm (return value)           */
/*-------------------------------------------*/
xget:
ARG var1,var2
pstr = " "var1" "
IF POS(" "var1" "," "args" ") = 0 THEN RETURN var2
ELSE RETURN var1

/*-------------------------------------------*/
/* Get keyword parm (return boolean)         */
/*-------------------------------------------*/
iget:
ARG var
pstr = " "var" "
IF POS(" "var" "," "args" ") = 0 THEN RETURN 0
ELSE RETURN 1

/*-------------------------------------------*/
/* Get keyword value parameter               */
/*-------------------------------------------*/
kget:
ARG var, default
PARSE UPPER VAR args (var)'(' var ')'
IF var = '' THEN var = default
RETURN var

/*-------------------------------------------*/
/* Build new profile access list table       */
/* Return "0" means failed                   */
/* Return "1" means ok                       */
/*-------------------------------------------*/
authlist:
/*-------------------------------------------*/
/* Trap output of approp. list command.      */
/*-------------------------------------------*/
x = OUTTRAP("LINE.",maxout)
IF rfclass = 'DATASET' THEN DO
    "LD DA('"profnam"') AU HIST"
END
ELSE DO
   "RLIST "rfclass profnam " AU HIST"
END
x = OUTTRAP("OFF")
cc = RC

/*-------------------------------------------*/
/* Parse UACC.  <<<DEFUNCT>>>                */
/*-------------------------------------------*/
IF line.0 > 4 THEN DO
  IF rfclass = 'DATASET' THEN,
     PARSE UPPER VAR line.5 P1 P2 PUACC .
  ELSE DO nnn = 1 TO 25
     PARSE UPPER VAR line.nnn P1 P2 P3 P4 .
     IF p3 p4 = 'UNIVERSAL ACCESS' THEN DO
        nnn = nnn + 2
        PARSE UPPER VAR line.nnn p1 p2 PUACC .
        LEAVE
     END
  END
END

/*-------------------------------------------*/
/* Create table and populate it.             */
/*-------------------------------------------*/
ADDRESS ISPEXEC "TBCREATE" tabname "NOWRITE NAMES("names") REPLACE"
IF RC > 4 THEN RETURN 0

afnd = 0
IF rfclass = 'DATASET' THEN header = "ID     ACCESS"
ELSE                        header = "USER      ACCESS"

IF cc = 0 THEN,
DO num = 1 to line.0
   IF \afnd THEN DO
      IF POS(header," "line.num" ") > 0 THEN DO
         afnd = 1
         num = num + 2
      END
   END
   IF afnd THEN DO
      PARSE UPPER VAR line.num pparm1 pparm2 .
      IF pparm1 = '' THEN LEAVE
      ADDRESS ISPEXEC "TBADD" tabname
   END
END
ELSE DO
   pparm1 = 'No Entries Found'
   ADDRESS ISPEXEC "TBADD" tabname
END
ADDRESS ISPEXEC "TBTOP"  tabname

/*-------------------------------------------*/
/* Get some values out for the user.         */
/*-------------------------------------------*/
IF rfclass = 'DATASET' THEN cmd = "LD DA('"profnam"') AU HIST"
ELSE                        cmd = "RLIST "rfclass profnam" AU HIST"

/* Trap command output. */
IF \(trap("lst.",cmd) < 4) THEN DO
   pline1 = ""; pline2 = ""; pline3 = ""
END
ELSE DO
   pline1 = ""; pline2 = ""; pline3 = ""
   DO zz = 1 TO lst.0
      IF POS("LEVEL  OWNER",lst.zz) = 0 THEN ITERATE
      zz2 = zz+2
      PARSE VAR lst.zz2 zlevel zowner zuacc zmyaccess zwarn .
      pline1 =       "Owner: "substr(zowner,1,13)
      pline1 = pline1"UACC: "substr(zuacc,1,12)
      pline1 = pline1"Warn: "substr(zwarn,1,9)
      pline2 = pline2"My access: "substr(zmyaccess,1,9)
      pline3 = ""
   END
   DO zz = 1 TO lst.0
      IF POS("CREATION DATE",lst.zz) = 0 THEN ITERATE
      zz = zz + 3
      PARSE VAR lst.zz zcrday zcryear .
      zcrdate = julian(zcryear""zcrday)
      pline2 = pline2"Created: "substr(zcrdate,1,12)
      LEAVE zz
   END
END

RETURN 1
sortflds = 'pparm1,c,a'
ADDRESS ISPEXEC "TBSORT" tabname "FIELDS("sortflds")"
RETURN 1

/*---------------------------------------------------------*/
/* Trap command output in a stem variable.                 */
/*---------------------------------------------------------*/
trap:
ARG stem, cmd, max

IF stem = "" THEN RETURN 8
IF cmd = "" THEN RETURN 8
IF DATATYPE(max) /= 'NUM' THEN MAX = 1000

INTERPRET "x = OUTTRAP("stem","max")"
   cmd
   cc = rc
x = OUTTRAP('OFF')
RETURN cc

/*---------------------------------------------------Rexx--*/
/* JULIAN  - Convert between gregorian and julian dates.   */
/* v1.0                                                    */
/*---------------------------------------------------------*/
/* For gregorian input, assumes mm/dd/yy or mm/dd/yyyy     */
/* For julian input, assumes yyddd or yyyyddd              */
/*---------------------------------------------------------*/
/* Copyright 2003 JMIT.                                    */
/*---------------------------------------------------------*/
/* 04/08/2003 John C. Miller                               */
/*---------------------------------------------------------*/
julian:
PARSE ARG ##date .

days.1  = 31; days.2  = 28; days.3  = 31; days.4  = 30; days.5  = 31;
days.6  = 30; days.7  = 31; days.8  = 31; days.9  = 30; days.10 = 31;
days.11 = 30; days.12 = 31

/*---------------------------------------------------------*/
/* A "/" was found in the input date, so assume gregorian  */
/*---------------------------------------------------------*/
IF POS("/",##date) > 1 THEN DO
   IF length(##date) = 8 THEN DO
      year = substr(##date,7,2)
      IF year > 50 THEN year = "19"year
      ELSE year = "20"year
   END
   ELSE IF length(##date) = 10 THEN DO
      year = substr(##date,7,4)
   END
   ELSE DO
      exit
      RETURN 0
   END
   /* Adjust for leap year.                                   */
   IF year // 4= 0 THEN days.2 = 29
   month = substr(##date,1,2); day = substr(##date,4,2)
   dayctr = day
   DO z = 1 TO month-1
      dayctr = days.z + dayctr
   END
   return year"/"RIGHT("000"dayctr,3)
END
/*---------------------------------------------------------*/
/* Input was julian, so return gregorian.                  */
/*---------------------------------------------------------*/
ELSE DO
   IF length(##date) = 5 THEN DO
      year = substr(##date,1,2)
      IF year > 50 THEN year = "19"year
      ELSE year = "20"year
      day = substr(##date,3,3)
   END
   ELSE IF length(##date) = 7 THEN DO
      year = substr(##date,1,4)
      day = substr(##date,5,3)
   END
   ELSE DO
      exit
      return 0
   END
   ctr = day + 0
   DO z = 1 TO 12
      ctr = ctr - days.z
      IF ctr < 1 THEN LEAVE
   END
   ctr = ctr + days.z
   return right("00"z,2)"/"right("00"ctr,2)"/"year
END
