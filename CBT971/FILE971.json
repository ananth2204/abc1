{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013625000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE971.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE971.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x05'", "DS1TRBAL": "b'\\x82l'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\n\\x18\\x00\\t\\n\\x19\\x00\\x03\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x001\\x01\\x180\\x8f\\x01\\x180\\x8f\\x14\\x05\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-11-04T00:00:00", "modifydate": "2018-11-04T14:05:31", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-496"}, "text": "REGULAR CBT TAPE - VERSION 496    FILE:  971\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT496.FILE971\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 17 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,340 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/04/18    14:05:31    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x19\\x01\\x18\\x03\\x7f\\x01\\x18\\x03\\x7f\\x13B\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-02-06T00:00:00", "modifydate": "2018-02-06T13:42:19", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes on EMPTYTST.\n\n1.  The original version was modified by Gerhard Postpischil, who\n    solved the problem of the S013-18 message appearing, when the\n    pds member in SYSUT1 didn't exist.  Gerhard also made sure that\n    EMPTYTST will run on MVS 3.8 as well, and he and the original\n    author went back and forth fixing any remaining bugs, in\n    collaboration.  We are hoping that this is a satisfactory and\n    reliable product, but it is (of course) subject to all CBT Tape\n    disclaimers, and you use it at your own risk.\n\n2.  For archival purposes, we are preserving the original version of\n    the EMPTYTST program source as member EMPTYT00.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE971": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00%\\x01\\x180\\x8f\\x01\\x180\\x8f\\x14\\x05\\x006\\x006\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-11-04T00:00:00", "modifydate": "2018-11-04T14:05:25", "lines": 54, "newlines": 54, "modlines": 0, "user": "CBT-496"}, "text": "//***FILE 971 is a batch program called EMPTYTST, which is          *   FILE 971\n//*           designed to find out if a sequential dataset          *   FILE 971\n//*           (DSORG=PS) or a PDS member is empty.  This may        *   FILE 971\n//*           be needed for JCL jobstreams to find out the outcome  *   FILE 971\n//*           of a job step (if it produced any data) and to        *   FILE 971\n//*           then proceed with the jobstream, depending on the     *   FILE 971\n//*           return code.                                          *   FILE 971\n//*                                                                 *   FILE 971\n//*           Support:  email to  sbgolob@cbttape.org               *   FILE 971\n//*                                                                 *   FILE 971\n//*                     email:    gerhardp@charter.net              *   FILE 971\n//*                                                                 *   FILE 971\n//*     The EMPTYTST program is reentrant.                          *   FILE 971\n//*                                                                 *   FILE 971\n//*     Improvements to the original source of EMPTYTST, were       *   FILE 971\n//*     made by Gerhard Postpischil, and bugs were corrected        *   FILE 971\n//*     through the collaboration of Gerhard and the original       *   FILE 971\n//*     author.                                                     *   FILE 971\n//*                                                                 *   FILE 971\n//*     Enhanced the SYSPRINT report with job and time information  *   FILE 971\n//*     that was already available in the JESMSGLG and JESYSMSG     *   FILE 971\n//*     reports.  You might be following the progress of your       *   FILE 971\n//*     jobs using the SYSPRINT reports only, so that information   *   FILE 971\n//*     detail is needed there.                                     *   FILE 971\n//*                                                                 *   FILE 971\n//*     Help documentation is in member EMPTYTS#.                   *   FILE 971\n//*                                                                 *   FILE 971\n//*     Sample JCL to Run - Needs SYSUT1 DDname for input dataset   *   FILE 971\n//*                   SYSPRINT is optional. PARM=Q suppresses it.   *   FILE 971\n//*                   WTO output is available with PARM=W.          *   FILE 971\n//*                                                                 *   FILE 971\n//*     //  jobcard                                                 *   FILE 971\n//*     //*                                                         *   FILE 971\n//*     //CHKEMPTY EXEC PGM=EMPTYTST,PARM=W                         *   FILE 971\n//*     //STEPLIB  DD DISP=SHR,DSN=your.steplib                     *   FILE 971\n//*     //SYSUT1   DD DISP=SHR,DSN=dataset(member)                  *   FILE 971\n//*     //SYSPRINT DD SYSOUT=*                                      *   FILE 971\n//*                                                                 *   FILE 971\n//*     Program Action:                                             *   FILE 971\n//*                                                                 *   FILE 971\n//*     RETURNS CODE = 0 IF DATASET IS NOT EMPTY.                   *   FILE 971\n//*     RETURNS CODE = 4 IF DATASET IS EMPTY.                       *   FILE 971\n//*     JCL ERROR IF A SEQUENTIAL DATASET (DSORG=PS)                *   FILE 971\n//*       DOES NOT EXIST.                                           *   FILE 971\n//*     RETURNS CODE = 8 IF PDS MEMBER DOES NOT EXIST.              *   FILE 971\n//*     RETURNS CODE = 12 IF SYSUT1 DDNAME IS MISSING.              *   FILE 971\n//*     RETURNS CODE = 16 IF SYSUT1 POINTS TO A CONCATENATION.      *   FILE 971\n//*                                                                 *   FILE 971\n//*     Codes 0, 4, and 8 return the dataset name and volume,       *   FILE 971\n//*     in the messages.  (WTO if PARM=W, SYSPRINT if it is         *   FILE 971\n//*     present as a DDname and PARM=Q was not coded.)              *   FILE 971\n//*                                                                 *   FILE 971\n//*     We hope that you'll find this to be a useful tool.          *   FILE 971\n//*                                                                 *   FILE 971\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EMPTYT$0": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00W\\x01\\x18\\x02O\\x01\\x18\\x03\\x1f\"F\\x00\\x0b\\x00\\x07\\x00\\x00\\xe3\\xc5\\xe2\\xe3\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-01-24T00:00:00", "modifydate": "2018-01-31T22:46:57", "lines": 11, "newlines": 7, "modlines": 0, "user": "TESTJCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*   TEST JOB TO SEE WHAT HAPPENS WHEN\n//*   SYSUT1 DD NAME IS MISSING -\n//*   YOU GET A CODE OF 12.\n//*\n//CHKEMPTY EXEC PGM=EMPTYTST,PARM=W\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT DD SYSOUT=*\n//*SYSUT1  DD MISSING   (SHOULD BE THE INPUT DATASET)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYT$1": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x14\\x01\\x18\\x02O\\x01\\x18\\x02O\\x19'\\x00\\x07\\x00\\x07\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-01-24T00:00:00", "modifydate": "2018-01-24T19:27:14", "lines": 7, "newlines": 7, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CHKEMPTY EXEC PGM=EMPTYTST,PARM=W\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1   DD DISP=SHR,DSN=CBT.V495.SYSUPLOG(FILE006)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYT$2": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00U\\x01\\x18\\x02O\\x01\\x18\\x02o\\x081\\x00\\x08\\x00\\x07\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-01-24T00:00:00", "modifydate": "2018-01-26T08:31:55", "lines": 8, "newlines": 7, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CHKEMPTY EXEC PGM=EMPTYTST,PARM=W\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1   DD DISP=SHR,\n// DSN=SBGOLOB.BIG.LONG.DATASET.NAME.HOW.ABOUT.THIS(NOTEMPTY)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYT$3": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x002\\x01\\x18\\x02O\\x01\\x18\\x03\\x0f\\x13#\\x00\\x08\\x00\\x07\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2018-01-24T00:00:00", "modifydate": "2018-01-30T13:23:32", "lines": 8, "newlines": 7, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CHKEMPTY EXEC PGM=EMPTYTST,PARM=W\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1   DD DISP=SHR,\n// DSN=SBGOLOB.BIG.LONG.DATASET.NAME.HOW.ABOUT.THIS(EMPTY)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYT$4": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00'\\x01\\x18\\x02O\\x01\\x18\\x02\\x8f#V\\x00\\x08\\x00\\x07\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2018-01-24T00:00:00", "modifydate": "2018-01-28T23:56:27", "lines": 8, "newlines": 7, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CHKEMPTY EXEC PGM=EMPTYTST,PARM=W\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1   DD DISP=SHR,\n// DSN=SBGOLOB.BIG.LONG.DATASET.NAME.HOW.ABOUT.THIS(NOTTHERE)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYT$5": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\t\\x01\\x18\\x02O\\x01\\x18\\x03\\x1f\"3\\x00\\x07\\x00\\x07\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2018-01-24T00:00:00", "modifydate": "2018-01-31T22:33:09", "lines": 7, "newlines": 7, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CHKEMPTY EXEC PGM=EMPTYTST,PARM=W\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1   DD DISP=SHR,DSN=SBGOLOB.EMPTYDSN\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYTP1": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x01\\x01\\x18\\x02O\\x01\\x18\\x03\\x1f 6\\x00\\n\\x00\\x07\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2018-01-24T00:00:00", "modifydate": "2018-01-31T20:36:01", "lines": 10, "newlines": 7, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CHMPTY   PROC   DSNX=,MEMB=\n//CHEKEMTY EXEC PGM=EMPTYTST,PARM=W\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&DSNX(&MEMB)\n//         PEND\n//S001     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE006\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYTP2": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00P\\x01\\x18\\x02O\\x01\\x18\\x03\\x1f\"\\x13\\x00\\x14\\x00\\x07\\x00\\x00\\xd9\\xe4\\xd5\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2018-01-24T00:00:00", "modifydate": "2018-01-31T22:13:50", "lines": 20, "newlines": 7, "modlines": 0, "user": "RUNJCL"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//CHMPTY   PROC   DSNX=,MEMB=\n//CHEKEMTY EXEC PGM=EMPTYTST,PARM=W\n//STEPLIB  DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&DSNX(&MEMB)\n//         PEND\n//S001     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE006\n//S002     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE593\n//S003     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE888\n//S004     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE760\n//S005     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE875\n//S006     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE134\n//S011     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=NOTTHERE\n//S007     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE047\n//S008     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE896\n//S009     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE311\n//S010     EXEC CHMPTY,DSNX=CBT.V495.SYSUPLOG,MEMB=FILE862\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYTS$": {"ttr": 538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x07\"_\\x01\\x18\\x03\\x0f\\x19A\\x00\\x1b\\x00\\x0e\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-08-13T00:00:00", "modifydate": "2018-01-30T19:41:06", "lines": 27, "newlines": 14, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT496.FILE971(EMPTYTST)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT,REUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   EMPTYTST\n SETSSI  CB496971\n ENTRY   EMPTYTST\n NAME    EMPTYTST(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMPTYTS#": {"ttr": 540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x18\\x03\\x1f\\x01\\x18\\x05\\x0f\\x10X\\x00\\xab\\x00]\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2018-01-31T00:00:00", "modifydate": "2018-02-19T10:58:00", "lines": 171, "newlines": 93, "modlines": 0, "user": "HELP"}, "text": "* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*                HELP FOR THE EMPTYTST PROGRAM                        *\n*                                                                     *\n*    PROGRAM :  EMPTYTST                                              *\n*                                                                     *\n*    FUNCTION:  FIND OUT IF A DATASET OR A PDS MEMBER IS EMPTY.       *\n*                                                                     *\n*    PURPOSE :  THIS PROGRAM WAS ORIGINALLY DESIGNED TO BE USED       *\n*               IN A BATCH JOBSTREAM, TO DETERMINE IF ONE OF THE      *\n*               JOB STEPS ACTUALLY WROTE DATA TO A FILE, OR IT        *\n*               DIDN'T WRITE ANY DATA, AND THE FILE IS EMPTY.         *\n*                                                                     *\n*               AFTER THAT JOB STEP, YOU RUN AN \"EMPTYTST\" STEP,      *\n*               WITH THE SYSUT1 DDNAME POINTING TO THE FILE TO BE     *\n*               TESTED.  AND EMPTYTST DETERMINES IF THE FILE HAS      *\n*               ANY DATA IN IT, OR NOT.                               *\n*                                                                     *\n*    RESTRICTIONS:  SYSUT1 CANNOT POINT TO A CONCATENATION OF         *\n*               DATASETS.  SYSUT1 MUST POINT TO A SINGLE DATASET      *\n*               OR A SINGLE PDS MEMBER.  IF SYSUT1 POINTS TO A        *\n*               CONCATENATION OF DATASETS, THEN EMPTYTST RETURNS      *\n*               A (SEVERE ERROR) CODE OF 16.                          *\n*                                                                     *\n*    ACTION  :  RETURNS CODE = 0 IF DATASET IS NOT EMPTY.             *\n*               RETURNS CODE = 4 IF DATASET IS EMPTY.                 *\n*               JCL ERROR IF A SEQUENTIAL DATASET (DSORG=PS)          *\n*                 DOES NOT EXIST.                                     *\n*               RETURNS CODE = 8 IF PDS MEMBER DOES NOT EXIST.        *\n*                 IT SHOWS THE S013-18 MESSAGE BUT BYPASSES IT.       *\n*               RETURNS CODE = 12 UPON SERIOUS I/O ERROR, USUALLY,    *\n*                 IF THE SYSUT1 DDNAME IS MISSING.                    *\n*               RETURNS CODE = 16 IF SYSUT1 IS POINTING TO A          *\n*                 DATASET CONCATENATION.                              *\n*                                                                     *\n*    SEE BELOW FOR FURTHER DOCUMENTATION.                             *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    Information from the SYSPRINT report:     (sample)               *\n*                                                                     *\n*    -------                                                          *\n*    RC = 04 CBT.V495.SYSUPLOG(FILE006) ON VOLUME DATA05 IS EMPTY     *\n*    -------                                                          *\n*    V1.2    Time of Execution:  01/31/2018  22:11:42                 *\n*    V1.2    Jobname:  SBGOLOBM  Stepname:  CHEKEMTY  Jobstep:  S001  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    This program was designed to be run in a jobstream, to           *\n*    determine whether a dataset (usually one produced by the         *\n*    jobstream) is empty or not, and to proceed according to          *\n*    the result obtained.  This result may be reported in any         *\n*    of three ways:                                                   *\n*                                                                     *\n*    1.  The return code:  0 for not-empty                            *\n*                          4 for empty                                *\n*                          8 for pds member does not exist            *\n*                         12 if the SYSUT1 DDNAME is missing          *\n*                         16 if SYSUT1 points to a concatenation      *\n*                                                                     *\n*    2.  SYSPRINT output:  This is a separate report, if that is      *\n*                          desired.  The usefulness of this is        *\n*                          determined by whomever designed the        *\n*                          jobstream.                                 *\n*                                                                     *\n*        //SYSPRINT is an optional DD name.  If SYSPRINT is not       *\n*                          coded in the JCL, then it will not         *\n*                          be opened.  If it is coded, then           *\n*                          PARM=Q can turn it off.  But PARM=W        *\n*                          when coded with PARM=Q together,           *\n*                          will still keep the WTO messages.          *\n*                                                                     *\n*    3.  A WTO message  :  If this program is being run as part       *\n*                          of a big job, then usually one would       *\n*                          want to test the system messages and       *\n*                          make a judgment from there, as to how      *\n*                          the job went.  Therefore WTO messages      *\n*                          are supplied (using PARM=W), to report     *\n*                          the result of running this program.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*    PARMS:  Parms which may be coded are either W, Q, or C.          *\n*            If these letters occur in any order in the PARM          *\n*            field, the corresponding parm will be switched on.       *\n*                                                                     *\n*            PARM=W  :  Turns on WTO messaging                        *\n*                                                                     *\n*            PARM=Q  :  Turns off SYSPRINT and will not even          *\n*                        open the SYSPRINT DD name.  (Q: Quiet)       *\n*                                                                     *\n*            PARM=C  :  When coded with W, only issues the            *\n*                        WTO messages when the return code            *\n*                        is not 0.  (C stands for \"Conditional\")      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                        HOW IT WORKS:                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* READ THE FIRST RECORD OF THE DATA SET, PDS MEMBER, OR PDSE MEMBER   *\n* THAT IS ALLOCATED TO DDNAME SYSUT1.                                 *\n* IF THE READ IS SUCCESSFUL, EXIT WITH RETURN CODE 0.                 *\n* IF THE READ HITS END-OF-FILE, EXIT WITH RETURN CODE 4,              *\n* WHICH MEANS THE DATA SET OR MEMBER IS EMPTY.                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF SYSPRINT IS ALLOCATED, A MESSAGE IS WRITTEN TO SYSPRINT.         *\n* OTHER POSSIBLE RETURN CODES ARE 12 FOR MISSING SYSUT1 DDNAME        *\n* OR 8 FOR MEMBER DOES NOT EXIST.                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* SAMPLE JCL :                                                        *\n*                 //EXEC PGM=EMPTYTST                                 *\n*                 //SYSPRINT DD SYSOUT=*                              *\n*                 //SYSUT1 DD DSN=A.B.C,DISP=SHR                      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*         OPTIONS IN THE PARM FIELD.   PARM = W Q C                   *\n*                                                                     *\n* THE PARM FIELD IS CHECKED FOR THE PRESENCE OF CERTAIN CHARACTERS    *\n* WHICH ALLOW OPTIONS TO BE SPECIFIED.                                *\n* IF MORE THAN ONE OPTION IS USED, THE CHARACTERS DO NOT NEED TO      *\n* BE SEPARATED, OR IN ANY SPECIFIC ORDER.                             *\n* IF THE PARM FIELD CONTAINS THE CHARACTER \"W\" THEN THE PROGRAM       *\n* WILL ISSUE A WTO WITH ONE OF THESE MESSAGES:                        *\n*                                                                     *\n*   EMP000I EMPTYTST - RC = 00 <DSN> ON VOLUME <VOL> IS NOT EMPTY     *\n*   EMP004I EMPTYTST - RC = 04 <DSN> ON VOLUME <VOL> IS EMPTY         *\n*   EMP008I EMPTYTST - RC = 08 <DSN> ON VOLUME <VOL> WAS NOT FOUND    *\n*   EMP012E EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISSING        *\n*   EMP016E EMPTYTST - RC = 16 ERROR - SYSUT1 IS CONCATENATION        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"W\" AND THE LETTER \"C\"        *\n* (FOR CONDITIONAL) THEN IT WILL ISSUE A WTO ONLY IF THE RETURN       *\n* CODE IS NOT ZERO.                                                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"Q\" (FOR QUIET)               *\n* THEN THE PROGRAM WILL NOT OPEN SYSPRINT EVEN IF IT IS ALLOCATED.    *\n* THIS IS INTENDED FOR RUNNING THE PROGRAM UNDER TSO WHEN A USER      *\n* PREFERS NOT TO SEE A MESSAGE EVEN THOUGH SYSPRINT MIGHT BE          *\n* ALLOCATED TO THE TERMINAL.                                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* DDNAME SYSPRINT IS OPTIONAL                                         *\n* EVEN IF DDNAME SYSPRINT IS ALLOCATED, THE PROGRAM WILL NOT          *\n* OPEN IT OR WRITE TO IT IF PARM=Q IS SPECIFIED.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* USAGE NOTE:                                                         *\n*                                                                     *\n* PRIOR TO Z/OS 1.11 WHEN A PS DATA SET THAT WAS NOT SMS-MANAGED WAS  *\n* FIRST CREATED, NO END-OF-FILE MARK WAS WRITTEN AT THE BEGINNING     *\n* OF THE DATA SET. IF A PROGRAM (LIKE THIS ONE, FOR EXAMPLE)          *\n* READ THE DATA SET BEFORE ANYTHING WAS WRITTEN TO IT, IT MIGHT       *\n* SUCCESSFULLY READ WHAT WAS THERE BEFORE THE DATA SET WAS CREATED,   *\n* AS IF THE DATA SET WERE NOT EMPTY.                                  *\n* OR IT MIGHT GET A READ ERROR BECAUSE THE RECORD THAT WAS THERE      *\n* BEFORE THE DATA SET WAS CREATED DOESN'T HAVE THE SAME RECFM, LRECL, *\n* OR BLOCK SIZE AS THE DATA SET THAT WAS CREATED.                     *\n* FOR SUCH SITUATIONS, A PROGRAM THAT CHECKS FOR AN EMPTY PS DATA SET *\n* COULD STILL DETECT THAT IT WAS EMPTY BY READING THE FORMAT 1 DSCB   *\n* FROM THE VTOC AND CHECKING THE DS1LSTAR FIELD FOR ZERO.             *\n* ON SYSTEMS RUNNING Z/OS 1.11 OR LATER, THIS IS NOT NECESSARY.       *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     IMPROVED MESSAGES                          SG1801\n* I DID A FEW OF THESE.  ALL CODES 0, 4, 8 HAVE THE DSNAME       SG1801\n* AND VOLSER INCLUDED.  ONLY ONE THAT DOESN'T IS CODE 12.        SG1801\n* A SEQUENTIAL DATASET (DSORG=PS) IF NON-EXISTENT, SHOULD        SG1801\n* GET A JCL ERROR.  IF A PDS MEMBER ISN'T THERE, THEN THE        SG1801\n* S013-18 ABEND GETS INTERCEPTED, AND A CODE = 8 IS SHOWN.       SG1801\n* MOST OF THIS WORK WAS DONE BY CBTUSER.                         SG1801\n*                                                                     *\n* THIS PROGRAM WAS WRITTEN BY CBTUSER AND WAS GREATLY IMPROVED        *\n* BY GERHARD POSTPISCHIL.                                             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EMPTYTST": {"ttr": 544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00H\\x01\\x18\\x05\\x0f\\x01\\x18\\x05\\x1f\\t\\x15\\x04x\\x04g\\x00(\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2018-02-19T00:00:00", "modifydate": "2018-02-20T09:15:48", "lines": 1144, "newlines": 1127, "modlines": 40, "user": "SOURCE"}, "text": "TEMPT    TITLE 'BATCH PROGRAM TO TELL IF A DATASET IS EMPTY'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*    PROGRAM :  EMPTYTST                                              *\n*                                                                     *\n*    FUNCTION:  FIND OUT IF A DATASET OR A PDS MEMBER IS EMPTY.       *\n*                                                                     *\n*    RESTRICTIONS:  SYSUT1 CANNOT POINT TO A CONCATENATION OF         *\n*               DATASETS.  SYSUT1 MUST POINT TO A SINGLE DATASET      *\n*               OR A SINGLE PDS MEMBER.  IF SYSUT1 POINTS TO A        *\n*               CONCATENATION OF DATASETS, THEN EMPTYTST RETURNS      *\n*               A (SEVERE ERROR) CODE OF 16.                          *\n*                                                                     *\n*    ACTION  :  RETURNS CODE = 0 IF DATASET IS NOT EMPTY.             *\n*               RETURNS CODE = 4 IF DATASET IS EMPTY.                 *\n*               JCL ERROR IF A SEQUENTIAL DATASET (DSORG=PS)          *\n*                 DOES NOT EXIST.                                     *\n*               RETURNS CODE = 8 IF PDS MEMBER DOES NOT EXIST.        *\n*               RETURNS CODE = 12 IF SYSUT1 DDNAME IS MISSING.        *\n*               RETURNS CODE = 16 IF SYSUT1 POINTS TO A DATASET       *\n*                 CONCATENATION.                                      *\n*                                                                     *\n*    SEE BELOW FOR FURTHER DOCUMENTATION.                             *\n*                                                                     *\n*    DATE WRITTEN:   JANUARY 21 2018                                  *\n*                                                                     *\n*    DATE UPDATED:   FEBRUARY 19 2018                                 *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                        HOW IT WORKS:                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* READ THE FIRST RECORD OF THE DATA SET, PDS MEMBER, OR PDSE MEMBER   *\n* THAT IS ALLOCATED TO DDNAME SYSUT1.                                 *\n* IF THE READ IS SUCCESSFUL, EXIT WITH RETURN CODE 0.                 *\n* IF THE READ HITS END-OF-FILE, EXIT WITH RETURN CODE 4,              *\n* WHICH MEANS THE DATA SET OR MEMBER IS EMPTY.                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF SYSPRINT IS ALLOCATED, A MESSAGE IS WRITTEN TO SYSPRINT.         *\n* OTHER POSSIBLE RETURN CODES ARE 12 FOR MISSING SYSUT1 DDNAME        *\n* OR 8 FOR MEMBER DOES NOT EXIST, AND 16 IF SYSUT1 POINTS TO          *\n* A DATASET CONCATENATION.                                            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* SAMPLE JCL :                                                        *\n*                 //EXEC PGM=EMPTYTST                                 *\n*                 //SYSPRINT DD SYSOUT=*                              *\n*                 //SYSUT1 DD DSN=A.B.C,DISP=SHR                      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*         OPTIONS IN THE PARM FIELD.   PARM = W Q C                   *\n*                                                                     *\n* THE PARM FIELD IS CHECKED FOR THE PRESENCE OF CERTAIN CHARACTERS    *\n* WHICH ALLOW OPTIONS TO BE SPECIFIED.                                *\n* IF MORE THAN ONE OPTION IS USED, THE CHARACTERS DO NOT NEED TO      *\n* BE SEPARATED, OR IN ANY SPECIFIC ORDER.                             *\n* IF THE PARM FIELD CONTAINS THE CHARACTER \"W\" THEN THE PROGRAM       *\n* WILL ISSUE A WTO WITH ONE OF THESE MESSAGES:                        *\n*                                                                     *\n*   EMP000I EMPTYTST - RC = 00 <DSN> ON VOLUME <VOL> IS NOT EMPTY     *\n*   EMP004I EMPTYTST - RC = 04 <DSN> ON VOLUME <VOL> IS EMPTY         *\n*   EMP008I EMPTYTST - RC = 08 <DSN> ON VOLUME <VOL> WAS NOT FOUND    *\n*   EMP012E EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISSING        *\n*   EMP016E EMPTYTST - RC = 16 ERROR - SYSUT1 IS CONCATENATION        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"W\" AND THE LETTER \"C\"        *\n* (FOR CONDITIONAL) THEN IT WILL ISSUE A WTO ONLY IF THE RETURN       *\n* CODE IS NOT ZERO.                                                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"Q\" (FOR QUIET)               *\n* THEN THE PROGRAM WILL NOT OPEN SYSPRINT EVEN IF IT IS ALLOCATED.    *\n* THIS IS INTENDED FOR RUNNING THE PROGRAM UNDER TSO WHEN A USER      *\n* PREFERS NOT TO SEE A MESSAGE EVEN THOUGH SYSPRINT MIGHT BE          *\n* ALLOCATED TO THE TERMINAL.                                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* DDNAME SYSPRINT IS OPTIONAL                                         *\n* EVEN IF DDNAME SYSPRINT IS ALLOCATED, THE PROGRAM WILL NOT          *\n* OPEN IT OR WRITE TO IT IF PARM=Q IS SPECIFIED.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* USAGE NOTE:                                                         *\n*                                                                     *\n* PRIOR TO Z/OS 1.11 WHEN A PS DATA SET THAT WAS NOT SMS-MANAGED WAS  *\n* FIRST CREATED, NO END-OF-FILE MARK WAS WRITTEN AT THE BEGINNING     *\n* OF THE DATA SET. IF A PROGRAM (LIKE THIS ONE, FOR EXAMPLE)          *\n* READ THE DATA SET BEFORE ANYTHING WAS WRITTEN TO IT, IT MIGHT       *\n* SUCCESSFULLY READ WHAT WAS THERE BEFORE THE DATA SET WAS CREATED,   *\n* AS IF THE DATA SET WERE NOT EMPTY.                                  *\n* OR IT MIGHT GET A READ ERROR BECAUSE THE RECORD THAT WAS THERE      *\n* BEFORE THE DATA SET WAS CREATED DOESN'T HAVE THE SAME RECFM, LRECL, *\n* OR BLOCK SIZE AS THE DATA SET THAT WAS CREATED.                     *\n* FOR SUCH SITUATIONS, A PROGRAM THAT CHECKS FOR AN EMPTY PS DATA SET *\n* COULD STILL DETECT THAT IT WAS EMPTY BY READING THE FORMAT 1 DSCB   *\n* FROM THE VTOC AND CHECKING THE DS1LSTAR FIELD FOR ZERO.             *\n* ON SYSTEMS RUNNING Z/OS 1.11 OR LATER, THIS IS NOT NECESSARY.       *\n* (THIS PROBLEM WAS TAKEN CARE OF BY GERHARD'S ADDITIONAL CODE.)      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     IMPROVED MESSAGES                          SG1801\n* I DID A FEW OF THESE.  ALL CODES 0, 4, 8 HAVE THE DSNAME       SG1801\n* AND VOLSER INCLUDED.  ONLY ONE THAT DOESN'T IS CODE 12.        SG1801\n* A SEQUENTIAL DATASET (DSORG=PS) IF NON-EXISTENT, SHOULD        SG1801\n* GET A JCL ERROR.  IF A PDS MEMBER ISN'T THERE, THEN THE        SG1801\n* S013-18 ABEND GETS INTERCEPTED, AND A CODE = 8 IS SHOWN.       SG1801\n* MOST OF THIS WORK WAS DONE BY CBTUSER.                         SG1801\n*                                                                     *\n* THIS PROGRAM WAS WRITTEN BY CBTUSER AND WAS GREATLY IMPROVED        *\n* BY GERHARD POSTPISCHIL.                                             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* Changes:                                                            *\n* 2018-02-18  CBT   Fix various errors                                *\n*                   Improve messages                                  *\n* 2018-02-17  CBT   Fixed check of PRTIX at GOPRINTA to PRTIX+1.      *\n*                   Don't use LRECL for SYSPRINT if RECFM unblocked.  *\n*                   Fail with rc 16 if SYSUT1 is a concatenation.     *\n* 2018-02-04  GYP   (I can't resist meddling - sorry)                 *\n*                   Changed code to assemble and execute under MVS    *\n*                   Avoid 013-18 abend on missing member              *\n*                   Avoid 001 on uninitialized MVS DS - test DS1LSTAR *\n*                   Test PDS for logical empty (no members)           *\n*                   Improved(?) message processing                    *\n*                   Require both SYS1.MACLIB and SYS1.(A)MODGEN for   *\n*                     clean assembly                                  *\n*                   Replaced new format TIME with MVS compatible code *\n*                   Handle PARM correctly for TSO CP and batch        *\n*                   Fixed 002 abend for SYSPRINT RECFM=V..            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         MACRO ,                                                GP18035\n&NM      #PUT  &LN                                              GP18035\n.*                                                              GP18035\n.*   THIS MACRO REPLACES THE ORIGINAL PUT REQUESTS. INSTEAD IT  GP18035\n.*   CALLS A SUBROUTINE THAT ADAPTS THE RECORDS TO F/V/U FORMAT GP18035\n.*                                                              GP18035\n         LCLC  &LBL                                             GP18035\n         LCLA  &K                                               GP18035\n&K       SETA  K'&LN                                            GP18035\n&LBL     SETC  '&NM'                                            GP18035\n         AIF   (&K LT 3).GOLA                                   GP18035\n         AIF   ('&LN'(1,1) NE '(' OR '&LN'(2,1) EQ '(').GOLA    GP18035\n         AIF  ('&LN'(&K,1) NE ')' OR '&LN'(&K-1,1) EQ ')').GOLA GP18035\n         AIF   ('&LN' EQ '(1)' OR '&LN' EQ '(R1)').GOBAL        GP18035\n&LBL     LR    R1,&LN(1)                                        GP18035\n&LBL     SETC  ''                                               GP18035\n         AGO   .GOBAL                                           GP18035\n.GOLA    ANOP  ,                                                GP18035\n&LBL     LA    R1,&LN                                           GP18035\n&LBL     SETC  ''                                               GP18035\n.GOBAL   ANOP  ,                                                GP18035\n&LBL     BAL   R14,GOPRINT                                      GP18035\n         MEND  ,                                                GP18035\n         SPACE 2\n         PUNCH ' ORDER EMPTYTST(P) ' MAKE DUMPS EASIER TO READ ***DEB\nEMPTYTST CSECT ,\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)\n         DC    AL1(9),CL9'EMPTYTST'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nBEGIN    STM   R14,R12,12(13)\n         LR    R10,R15\n         LR    R2,R1               SAVE POINTER TO PARM AND DDNAMES\n         L     R0,WORKSIZ\n         GETMAIN R,LV=(0)\n*DEBUG*  GETMAIN RU,LV=WORKSIZ,BNDRY=PAGE ***DEBUG - EASIER ADDRESSES\n         LR    R9,R1\n         USING WORKD,R9\n         XC    0(WORKINI,R1),0(R1)\n         ST    R13,4(,R9)          OLD ADDRESS IN NEW SAVE AREA\n         ST    R9,8(,R13)          NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R9\n         LA    R15,12\n         ST    R15,RETCODE         INITIALLY SET RETCODE TO 12\n         SPACE 1\n***********************************************************************\n*                    GET SYSTEM DATE AND TIME                         *\n***********************************************************************\n         STM   R14,R2,SUBSAVE                                   GP18035\n         AGO   .MVSDATE                                         GP18035\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY,          x\n               MF=(E,TIMEL)                                      SG1801\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         AGO   .COMDATE\n.MVSDATE ANOP  ,                                                GP18035\n         MVI   HEADDATE-1,C' '                                  GP18035\n         MVC   HEADDATE,HEADDATE-1   BLANK UNUSED BYTES         GP18035\n         MVI   DATETYPE,1         request MMDDYYYY              GP18035\n         MVI   TIMETYPE,2         request packed time           GP18035\n         OI    DATETYPE,DATLOCAL  IF ON, ADJUST FOR LOCAL TIME  GP18035\n         BAL   R14,SUBSTCK                                      GP18035\n         UNPK  DB(9),PLDATE(5)    CONVERT HEX TO UNPACKED       GP18035\n         MVI   DB+8,C'/'          DATE SEPARATOR                GP18035\n         MVC   HEADDATE(8),=AL1(0,1,8,2,3,8,6,7)                GP18035\n         TR    HEADDATE(8),DB     FORMAT DATE                   GP18035\n         UNPK  DB(9),PLTIME(5)    CONVERT HEX TO UNPACKED       GP18035\n         MVI   DB+8,C':'          DATE SEPARATOR                GP18035\n         MVC   HEADDATE+12(8),=AL1(0,1,8,2,3,8,6,7)             GP18035\n         TR    HEADDATE+12(8),DB     FORMAT DATE                GP18035\n.COMDATE LM    R14,R2,SUBSAVE                                   GP18035\n***********************************************************************\n*                                                                     *\n*         CHECK PARM FOR Q (QUIET, DON'T OPEN SYSPRINT)               *\n*                     OR W (ISSUE WTO)                                *\n*                     OR C (ISSUE WTO ONLY IF EMPTY OR ERROR)         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*LOCAL*  PARMLOAD R2,PTR=R2       GET PGM OR TSO CP PARM        GP18035\n         L     R2,0(,R2)                                        GP18035\n         LH    1+R2,0(,R2)   GET LENGTH                         GP18035\n         LTR   1+R2,1+R2     ANY                                GP18035\n         BZ    PARMLEN         NO; DON'T TEST TEXT              GP18035\n         CLI   2(R2),0       TSO CP CALL?                       GP18035\n         BH    PARMLEN         NO, USE OS FORM                  GP18035\n         OI    STATUS,FGSCP  SET TSO CP FLAG                    GP18035\n         SH    1+R2,=H'4'    ALLOW FOR LENGTH LENGTH            GP18035\n         SH    1+R2,2(,R2)   ALLOW FOR PARSED COMMAND NAME      GP18035\n         AH    R2,2(,R2)     ALLOW FOR PARSED COMMAND NAME      GP18035\n         LA    R2,2(,R2)     SKIP SECOND LENGTH                 GP18035\nPARMLEN  LA    R2,2(,R2)     SKIP FIRST LENGTH                  GP18035\n         LTR   R3,R3              IF NO PARM                    GP18035\n         BZ    PARMDONE             SKIP PARM                   GP18035\nPARMLOOP CLI   0(R2),C'Q'          Q FOR QUIET, IGNORE SYSPRINT\n         BNE   PARMW\n         MVI   OPTQ,C'Q'\n         B     PARMNEXT\nPARMW    CLI   0(R2),C'W'          W FOR ISSUE WTO\n         BNE   PARMC\n         MVI   OPTW,C'W'\n         B     PARMNEXT\nPARMC    CLI   0(R2),C'C'          C FOR ISSUE WTO IF RC NOT = 0\n         BNE   PARMNEXT\n         MVI   OPTC,C'C'\nPARMNEXT LA    R2,1(,R2)           POINT TO NEXT CHAR IN PARM\n         BCT   R3,PARMLOOP         LOOP USING PARM LENGTH IN R0\nPARMDONE DS    0H\n         L     R2,SUBSAVE+16       RESTORE R2 TO PROPER VALUE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*     GET JOBNAME STEPNAME AND PROCSTEP NAME FOR SYSPRINT REPORT      *\n*                                                                     *\n***********************************************************************\n         L     R1,X'21C'           PSATOLD                       SG1801\n         L     R1,12(,R1)          TIOT                          SG1801\n         MVC   NJOB(L'NJOB+L'PSTN+L'JSTN),0(R1)  JOB / STEP / JOBSTEP\n***********************************************************************\n*                                                                     *\n*         CHECK FOR DDNAME OVERRIDES                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*         THIS USES THE SAME CONVENTION AS UTILITIES LIKE IEBGENER.\n*         SYSPRINT OVERRIDE IS 6TH IN THE LIST OF DDNAMES\n*         SYSUT1   OVERRIDE IS 8TH IN THE LIST OF DDNAMES\n         TM    STATUS,FGSCP  PARM IN TSO CP FORMAT?             GP18035\n         BNZ   DDX             YES; NO OVERRIDE                 GP18035\n         TM    0(R2),X'80'         IF DDNAME OVERRIDES NOT PRESENT\n         BO    DDX                    SKIP OVERRIDES\n         L     R1,4(,R2)           POINT TO DDNAME LIST\n         LA    R1,0(,R1)           CLEAR HIGH 8 BITS\n         LTR   R1,R1               IF POINTER IS ZERO\n         BZ    DDX                    SKIP OVERRIDES\n         CLI   0(R1),0             IF LENGTH > 255\n         BNE   DDX                    SKIP OVERRIDES\n         CLI   1(R1),8*6           IF LIST NOT LONG ENOUGH FOR 6 DD'S\n         BL    DDX                    SKIP OVERRIDE\n         CLI   42(R1),0  (8*5+2)   IF SLOT EMPTY\n         BE    DDUT1                  SKIP OVERRIDE\n         MVC   PRTDD,42(R1)        COPY DDNAME FOR SYSPRINT\nDDUT1    CLI   1(R1),8*8           IF LIST NOT LONG ENOUGH FOR 8 DD'S\n         BL    DDX                    SKIP OVERRIDE\n         CLI   58(R1),0  (8*7+2)   IF SLOT EMPTY\n         BE    DDX                    SKIP OVERRIDE\n         MVC   UT1DD,58(R1)        COPY DDNAME FOR SYSUT1\nDDX      DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         OPEN SYSPRINT IF DDNAME SYSPRINT IS ALLOCATED               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         SLR   R4,R4               ZERO R4 TO INDICATE NO SYSUT1\n         SLR   R5,R5               ZERO R5 TO INDICATE NO SYSPRINT\n         CLI   OPTQ,C'Q'           IF THERE WAS A Q IN PARM\n         BE    PRTX                  SKIP SYSPRINT\n         LA    R5,PRTDCBW\n         MVC   0(PRTDCBL,R5),PRTDCB\n         CLI   PRTDD,0             IF SYSPRINT DDNAME OVERRIDE\n         BE    *+10                  THEN\n         MVC   DDNAM(8,R5),PRTDD     CHANGE DDNAME IN DCB\n         LA    R1,DDNAM(,R5)       POINT TO DDNAME FOR DEVTYPE\n         DEVTYPE (1),DEVAREA       CHECK FOR DDNAME IN TIOT\n         LR    R0,R5               SAVE R5\n         SLR   R5,R5               ZERO R5 TO INDICATE NO SYSPRINT\n         LTR   R15,R15             IF DEVTYPE SAYS DDNAME NOT IN TIOT\n         BNZ   PRTX                  DON'T USE SYSPRINT\n         LR    R5,R0               RESTORE R5 AND USE SYSPRINT\n         LA    R15,PRTEXIT         GET ADDRESS OF PRTEXIT\n         ST    R15,PRTEXLST        STORE ADDRESS IN PRTEXLST\n         LA    R15,PRTEXLST        GET ADDRESS OF PRTEXLST\n         MVI   0(R15),X'85'        MARK AS OPEN EXIT AND LAST ENTRY\n         STCM  R15,7,EXLSA(R5)     EXLST=PRTEXLST, PRTEXLST -> PRTEXIT\n         MVI   OPENOUT,X'80'                                    GP18035\n         OPEN  ((R5),OUTPUT),MF=(E,OPENOUT)                     GP18035\n*        TM    OFLGS(R5),X'10'     IF OPEN FAILED (DDNAME NOT PRESENT)\n*        BNO   EXIT                  EXIT\n*---------------------------------------------------------------------*\n*   The printer output characteristics were either defaulted, or set  *\n*     by the user on the DD.                                          *\n*   To accommodate all reasonable formats, we set variable PRTIX to   *\n*     0 for RECFM=U, to 4 for F, and 8 for V or D (0 offset for len). *\n*   For easier processing, we set the maximum data length into a      *\n*     full-word variable PRTMXL (avoid LRECL=X complications)         *\n*---------------------------------------------------------------------*\n         SLR   R14,R14                                          GP18035\n         SLR   R15,R15            PRESET FOR RECFM=U            GP18035\n         ICM   R14,3,BLKSI(R5)    LOAD MAX BLOCKSIZE FOR U      GP18035\n         TM    RECFM(R5),X'C0'    U ?                           GP18035\n         BO    STPRTF               SET INDEX = 0               GP18035\n         ICM   R14,3,LRECL(R5)    LOAD MAX RECORD LENGTH        GP18035\n         LA    R15,4              PRESET FOR F                  GP18035\n         TM    RECFM(R5),X'80'    F ?                           GP18035\n         BNZ   STPRTF               YES                         GP18035\n         LA    R15,8              SET FOR V OR D                GP18035\n         SH    R14,=H'4'          SET MAX DATA LENGTH           GP18035\nSTPRTF   STH   R15,PRTIX          SET PRINT BRANCH INDEX        GP18035\n         ST    R14,PRTMXL         SET MAX PRINTER DATA LENGTH   GP18035\nPRTX     DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         OPEN SYSUT1                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LA    R4,UT1DCBW\n         MVC   0(UT1DCBL,R4),UT1DCB\n         CLI   UT1DD,0             IF SYSUT1 DDNAME OVERRIDE\n         BE    *+10                  THEN\n         MVC   DDNAM(8,R4),UT1DD     CHANGE DDNAME IN DCB\n         LA    R1,DDNAM(,R4)       POINT TO DDNAME FOR DEVTYPE\n         DEVTYPE (1),DEVAREA       CHECK FOR DDNAME IN TIOT\n         LR    R0,R4               SAVE R4\n         SLR   R4,R4               ZERO R4 TO INDICATE NO SYSUT1\n         LTR   R15,R15             IF DEVTYPE SAYS DDNAME NOT IN TIOT\n         BNZ   PRNT                  EXIT WITH ERROR            CB18048\n         LR    R4,R0               RESTORE R5 AND USE SYSUT1\n*              BEGIN CHECK FOR CONCATENATION                    CB18048\n         L     R1,16               CVTPTR                       CB18048\n         L     R1,0(,R1)           TCB WORDS                    CB18048\n         L     R1,4(,R1)           CURRENT TCB                  CB18048\n         L     R1,12(,R1)          TIOT FROM TCBTIO-TCB         CB18048\n         LA    R0,24               INCREMENT TO FIRST DD        GP18050\nDDLOOP   AR    R1,R0               POINT TO FIRST/NEXT DD       GP18050\n         ICM   R0,1,0(R1)          GET ENTRY LENGTH; END IF 0   GP18050\n         BZ    PRNT                  YES, DDNAME NOT IN TIOT    CB18048\n*        PRECEDING BRANCH NEVER HAPPENS SINCE DEVTYPE CONFIRMED CB18048\n         TM    1(R1),X'80'         TIOESTTA,TIOSLTYP            CB18048\n         BO    DDLOOP                YES; ENTRY NOT IN USE      CB18048\n         CLC   4(8,R1),DDNAM(R4)   DOES TIOEDDNM MATCH SYSUT1?  CB18048\n         BNE   DDLOOP                NO; CHECK NEXT             GP18050\nDDFOUND  AR    R1,R0               GET OFFSET TO NEXT           GP18050\n         TM    1(R1),X'80'         TIOESTTA,TIOSLTYP            CB18048\n         BO    NOTCAT                YES, ENTRY NOT IN USE      CB18048\n         CLI   4(R1),C' '          IS NEXT TIOEDDNM BLANK?      CB18048\n         BNE   NOTCAT              NO, IT'S NOT A CONCATENATION CB18048\n         MVI   RETCODE+3,16        CONCATENATION NOT SUPPORTED  CB18048\n         SLR   R4,R4               SYSUT1 IS NOT OPEN           CB18048\n         B     PRNT                ISSUE MESSAGE AND QUIT       CB18048\n         SPACE 1\nNOTCAT   LA    R15,UT1ABEND        POINT TO OPEN ABEND EXIT\n         ST    R15,EXITLST         STORE IN 1ST WORD OF EXITLIST\n         MVI   EXITLST,X'11'       MARK AS OPEN ABEND EXIT (MVS)\n         LA    R15,JFCB            GET ADDRESS OF JFCB\n         ST    R15,EXITLST+4       STORE ADDRESS IN EXITLST 2ND WORD\n         MVI   EXITLST+4,X'87'     MARK AS JFCB PTR AND LAST ENTRY\n         LA    R15,EXITLST         GET ADDRESS OF EXITLST\n         STCM  R15,7,EXLSA(R4)     EXLST=EXITLST, EXITLST -> JFCB\n         MVI   OPEN,X'80'                                       GP18035\n         RDJFCB ((R4)),MF=(E,OPEN)                              GP18035\n         SPACE 1\n*---------------------------------------------------------------------*\n*   For older systems (MVS, MVT) we need to check whether the data    *\n*     set is empty by looking at DS1LSTAR (unless new-fangled type)   *\n*                                                                     *\n*   While we have the DSCB, we can also check for PS vs. PO, and      *\n*     do a member look-up with a BPAM FIND or BLDL.                   *\n*   Use of a DCB abend exit is undesirable in an environment where    *\n*     this module is called as a subroutine (e.g., the DCB could be   *\n*     left in a half-open uncloseable state)                          *\n*---------------------------------------------------------------------*\n         L     R14,PATCAM         GET THE CAMLST FLAGS          GP18035\n         LA    R15,JFCBDSNM       POINT TO THE DS NAME          GP18035\n         LA    R0,JFCBVOLS        POINT TO THE FIRST SERIAL     GP18035\n         LA    R1,DS1FMTID        POINT TO THE DESIRED RETURN   GP18035\n         STM   R14,R1,CAMLIST     COMPLETE THE LIST             GP18035\n         OBTAIN CAMLIST           GET THE DSCB                  GP18035\n         LTR   R15,R15            SUCCESSFUL ?                  GP18035\n         BH    OPFAIL               NO                          GP18035\n         TM    FM1SMSFG,X'07'     NEWFANGLED ?                  GP18035\n         BNZ   OPSEQ                YES; LSTAR USELESS          GP18035\n         TM    FM1SMSFG,X'08'     PDS/E?                        GP18035\n         BNZ   OPPO                 YES; LSTAR USELESS          GP18035\n         CLI   DS1DSORG+1,0       OLD NEWFANGLED STUFF ?        GP18035\n         BNZ   OPSEQ                YES                         GP18035\n         MVI   RETCODE+3,4        PRESET RETURN CODE FOR EMPTY  GP18035\n         ICM   R1,7,DS1LSTAR      ANYTHING IN LSTAR?            GP18035\n         BZ    PRNT                 SKIP OPEN, ETC.             GP18035\n         TM    DS1DSORG,254-DS1DSGPS-DS1DSGPO  NON-SEQUENTIAL ? GP18035\n         BNZ   OPSEQ              MAY BOMB                      GP18035\n         TM    DS1DSORG,DS1DSGPS+DS1DSGPO  SEQ OR PO ?          GP18035\n         BZ    OPSEQ              MAY BOMB                      GP18035\n         TM    DS1DSORG,DS1DSGPO  PARTITIONED?                  GP18035\n         BZ    OPSEQ                                            GP18035\n         SPACE 1\nOPPO     LA    R4,PO1DCBW         POINT TO WORKING DCB          GP18035\n         MVC   0(PO1DCBL,R4),PO1DCB   SET FOR                   GP18035\n         CLI   UT1DD,0             IF SYSUT1 DDNAME OVERRIDE    GP18035\n         BE    *+10                  THEN                       GP18035\n         MVC   DDNAM(8,R4),UT1DD     CHANGE DDNAME IN DCB       GP18035\n         LA    R15,EXITLST         EXIT LIST                    GP18035\n         STCM  R15,7,EXLSA(R4)       BUT JFCB NOT USED          GP18035\n         MVI   OPEN,X'80'          OPEN BPAM                    GP18035\n         TM    JFCBIND1,JFCPDS    JFCB WITH MEMBER NAME ?       GP18035\n         BZ    OPPORD               NO; LOOK AT FIRST DE        GP18035\n         NI    JFCBIND1,255-JFCPDS  RESET MEMBER NAME FLAG      GP18035\n         OI    JFCBTSDM,JFCNWRIT    DO NOT WRITE JFCB BACK      BG18036\n         OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEN)                  GP18035\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED               GP18035\n         BZ    OPFAIL                THEN                       GP18035\n*EXTRA*  OI    JFCBIND1,JFCPDS     RESTORE MEMBER NAME FLAG     GP18035\n         FIND  (R4),JFCBELNM,D     LOOK FOR THE MEMBER          GP18035\n         BXH   R15,R15,MEMNTF        NOT FOUND                  GP18035\n         B     OPPOCOM                                          GP18035\nOPPORD   OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEN)                  GP18035\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED               GP18035\n         BZ    OPFAIL                THEN                       GP18035\n         MVC   RDECB(PATDECBL),PATDECB  COPY OPTION BITS        GP18035\n         LA    R2,DEWORK                                        GP18035\n         READ  RDECB,SF,(R4),(R2),256,MF=E                      GP18035\n         CHECK RDECB                                            GP18035\n         CLC   DEWORK(10),=X'000EFFFFFFFFFFFFFFFF'  EMPTY PDS ? GP18035\n         BE    UT1EOF                       YES; SAY SO         GP18035\n         B     UT1NTE             RETURN NOT EMPTY              GP18035\nOPPOCOM  CLOSE MF=(E,OPEN)                                      GP18035\n         SPACE 1\nOPSEQ    LA    R4,UT1DCBW                                       GP18035\n         MVI   OPEN,X'80'\n         OPEN  ((R4),INPUT),MF=(E,OPEN)\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED\n         BNZ   UT1X                  THEN\nOPFAIL   CLOSE MF=(E,OPEN)        JUST IN CASE                  GP18035\n         SLR   R4,R4                 ZERO R4 TO INDICATE NO SYSUT1\n         TM    STATUS,FGSNOMEM       IF IT WAS MEMBER NOT FOUND\n         BZ    PRNT                    THEN\nMEMNTF   MVI   RETCODE+3,8             SET RC TO 8\n         B     PRNT                  SKIP GET\nUT1X     DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         READ FIRST RECORD OR GO TO UT1EOF STRAIGHT FROM GET         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         MVI   RETCODE+3,4         SET RETURN CODE TO 4 FOR EMPTY\n         GET   (R4)\nUT1NTE   MVI   RETCODE+3,0         SET RETURN CODE TO 0 FOR NOT EMPTY\nUT1EOF   DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         ISSUE MESSAGE TO SYSPRINT                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPRNT     LTR   R5,R5               IF SYSPRINT IS NOT OPEN\n         BZ    WTOT                  SKIP MESSAGE\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         BAL   R14,GOCLEAR   CLEAR PRINT LINE; SET RDW          GP18035\n         #PUT  MSGFR              WRITE FRAME                   GP18035\n         LA    R1,MSG16                                         CB18048\n         CLI   RETCODE+3,16       CONCATENATION ?               CB18048\n         BNL   PRTP                 SHOW MSG12                  CB18048\n         LA    R1,MSG12                                         GP18035\n         CLI   RETCODE+3,12       MISSING DD ?                  GP18035\n         BNL   PRTP                 SHOW MSG12                  GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVC   MSGLINE+1(12),MSGFR+4+1                          GP18035\n         MVC   MSGLINE+12(10),=C'PROCESSING'                    GP18035\n         MVC   MSGLINE+12+10+1(44),JFCBDSNM   ADD DATA SET NAME GP18035\n         LA    R1,MSGLINE+12+10+1  START BLANK SCAN             GP18035\n         TRT   0(45,R1),TRTBLANK    FIND END                    GP18035\n         CLI   JFCBELNM,C' '      HAVE A MEMBER OR GDG ?        GP18035\n         BNH   SKIPMEM              NO                          GP18035\n         MVI   0(R1),C'('         FRAME IT                      GP18035\n         MVC   1(8,R1),JFCBELNM   ADD NAME                      GP18035\n         TRT   0(10,R1),TRTBLANK  FIND END                      GP18035\n         MVI   0(R1),C')'         FRAME                         GP18035\n         LA    R1,1(,R1)                                        GP18035\nSKIPMEM  CLI   JFCBVOLS,C' '      ANY SERIAL ?                  GP18035\n         BNH   PRINTDSN             NO; PRINT CURRENT LINE      GP18035\n         MVC   1(2,R1),=C'ON'                                   GP18035\n         MVC   4(6,R1),JFCBVOLS   SHOW WHERE                    GP18035\nPRINTDSN #PUT  MSGRDW             AND PRINT LINE                GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         L     R6,RETCODE                                       GP18035\n         L     R1,MSGTAB(R6)      GET APPROPRIATE MESSAGE       GP18035\nPRTP     #PUT  (1)                                              GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         #PUT  MSGFR                                            GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(15),=C'EMPTYTST - V1.2'                 SG1801\n         MVC   MSGLINE+20(19),=C'Time of Execution: '            SG1801\n         MVC   MSGLINE+40(23),HEADDATE                           SG1801\n         #PUT  MSGRDW                                           GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(15),=C'EMPTYTST - V1.2'                 SG1801\n         MVC   MSGLINE+20(9),=C'Jobname: '                       SG1801\n         MVC   MSGLINE+30(8),NJOB                                SG1801\n         MVC   MSGLINE+40(9),=C'Stepname:'                       SG1801\n         MVC   MSGLINE+51(8),PSTN                                SG1801\n         MVC   MSGLINE+61(9),=C'Jobstep: '                       SG1801\n         MVC   MSGLINE+71(8),JSTN                                SG1801\n         #PUT  MSGRDW                                           GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         ISSUE MESSAGE TO CONSOLE IF PARM=W                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nWTOT     CLI   OPTW,0              IF PARM HAS NO W\n         BE    WTOX                  SKIP WTO\n         CLI   OPTC,0              IF PARM HAS W AND C\n         BE    WTOK                  AND\n         CLI   RETCODE+3,0           RETCODE IS 0\n         BE    WTOX                  SKIP WTO\nWTOK     MVI   WTOW,X'40'          CLEAR OUTPUT AREA            GP18035\n         MVC   WTOW+1(L'WTOW-1),WTOW                            GP18035\n         L     R6,RETCODE                                       GP18035\n         L     R7,SELWTO(R6)       POINT TO MESSAGE HEAD        GP18035\n         L     R8,SUFWTO(R6)       POINT TO MESSAGE END         GP18035\n         LH    R14,0(,R7)          GET TEXT LENGTH              GP18035\n         BCTR  R14,0                                            GP18035\n         EX    R14,EXMVCWTO        MOVE TEXT TO WORK AREA       GP18035\n         LTR   R8,R8               IS THERE A SUFFIX?           GP18035\n         BZ    WTOI                  NO; WTO THE MESSAGE        GP18035\n         LA    R1,WTOW+3(R14)      START OF INSERTION(S)        GP18035\n         MVC   0(44,R1),JFCB       ADD DSN TO MESSAGE - JFCBDSNM\n         TRT   0(45,R1),TRTBLANK   POSITION TO END              GP18035\n         CLI   JFCB+44,C' '        JFCBELNM (MEMBER OR GDG)     GP18035\n         BNH   WTO5                  SKIP IF NONE\n         MVI   0(R1),C'('\n         MVC   1(8,R1),JFCB+44     JFCBELNM (MEMBER NAME)\n         TRT   0(10,R1),TRTBLANK   POINT TO END OF MEMBER       GP18035\n         MVI   0(R1),C')'\n         LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\nWTO5     CLI   JFCB+118,C' '       IF VOLUME IS BLANK -JFCBVOLS\n         BE    WTO5A                SKIP VOLUME (DUMMY)\n         MVC   1(9,R1),=C'ON VOLUME'\n         MVI   10(R1),X'40'                                      SG1801\n         MVC   11(6,R1),JFCB+118   VOLUME FROM JFCB JFCBVOLS\n         LA    R1,17(,R1)          POINT PAST RIGHTMOST NONBLANK\n         MVI   17(R1),X'40'                                      SG1801\nWTO5A    LH    R14,0(,R8)          GET LENGTH OF SUFFIX - 1     GP18035\n         EX    R14,EXMVCSUF        MOVE IT                      GP18035\n         LA    R0,WTOW             WORK AREA ADDRESS            GP18035\n         SR    R1,R0               LENGTH LESS SUFFIX           GP18035\n         LA    R1,2(R14,R1)        WTO LENGTH                   GP18035\n         STH   R1,WTOW             STASH COMPLETE LENGTH        GP18035\n         LA    R1,WTOW(R1)         RESTORE END ADDRESS          GP18035\nWTOI     DS    0H\n         MVC   0(4,R1),WTMROUT     DESCRIPTOR AND ROUTING CODES GP18035\n         WTO   MF=(E,WTOW)\nWTOX     B     CLSE                                             GP18035\n         SPACE 1\nEXMVCWTO MVC   WTOW(*-*),0(R7)     MOVE LENGTH AND TEXT         GP18035\nEXMVCSUF MVC   1(*-*,R1),2(R8)     MOVE SUFFIX                  GP18035\nSELWTO   DC    A(WTM00,WTM04,WTM08,WTM12,WTM16) MESSAGE TEXT    GP18035\nSUFWTO   DC    A(WTS00,WTS04,WTS08,0,0)    MESSAGE SUFFIX       GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         CLOSE SYSUT1                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLSE     LTR   R4,R4               IF SYSUT1 NOT OPEN\n         BZ    CLSP                  SKIP CLOSE\n         CLOSE MF=(E,OPEN)                                      GP18035\n         BAL   R6,FREEPOOL\n         SPACE 1\nCLSP     LTR   R5,R5               IF SYSPRINT NOT OPEN\n         BZ    EXIT                  SKIP CLOSE\n         CLOSE MF=(E,OPENOUT)                                   GP18035\n         LR    R4,R5\n         BAL   R6,FREEPOOL\n         SPACE 1\nEXIT     L     R2,RETCODE\n         LR    R1,R13             POINT TO ADDRESS TO FREEMAIN\n         L     R0,WORKSIZ         LENGTH TO FREEMAIN\n         L     R13,4(,R13)        RESTORE ORIGINAL R13\n         FREEMAIN R,A=(1),LV=(0)\n*        DROP  R9\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE 1\nFREEPOOL TM    BUFCA+2(R4),1      FREEPOOLED BEFORE?            GP18035\n         BNZR  R6                   YES; DON'T DO IT AGAIN      GP18035\n         ICM   R1,7,BUFCA(R4)     DIRTY POOL ?                  GP18035\n         BZR   R6                   YES; DON'T ABEND (30A/90A)  GP18035\n         FREEPOOL (R4)\n         BR    R6\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   PRINT SUBROUTINE                                                  *\n*    INPUT: R1 : AL2(LEN+4,0),CC,TEXT(<=120)                          *\n*   BUILDS APPROPRIATE RECORD IN DCB BUFFER                           *\n*    FOR MACHINE CODE, USES X'09' WRITE/SPACE                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGOPRINT  STM   R14,R7,SUBSAVE                                   GP18035\n         L     R3,PRTMXL     GET MAXIMUM DATA LENGTH            GP18035\n         LH    R7,0(,R1)     GET CALLER'S LENGTH                GP18035\n         SH    R7,=H'4'        CALLER'S RDW                     GP18035\n         LA    R6,4(,R1)     SKIP RDW                           GP18035\n         TM    RECFM(R5),X'06'  CONTROL CHARACTER               GP18035\n         BNZ   GOPRINTA                                         GP18035\n         LA    R6,1(,R6)     SKIP CC                            GP18035\n         SH    R7,=H'1'      NO CC                              GP18035\nGOPRINTA CLI   PRTIX+1,4     TEST RECFM                         CB18048\n         BE    GOPRINTB        FOR F, KEEP DCBLRECL             GP18037\n         CR    R3,R7         KEEP THE MINIMUM                   GP18035\n         BNH   *+6                                              GP18035\n         LR    R3,R7         DESIRED DATA LENGTH                GP18035\n         STH   R3,LRECL(R5)  PLACE RECORD LENGTH INTO DCB       GP18035\nGOPRINTB PUT   (R5)          GET A RECORD SPACE                 GP18035\n         LR    R2,R1         PRESET OUTPUT ADDRESS              GP18035\n         ICM   R7,8,=X'40'   REQUEST BLANK FILL                 GP18035\n         LH    R15,PRTIX     GET BRANCH INDEX                   GP18035\n         B     GOPRINTT(R15)   HANDLE BY RECFM TYPE             GP18035\nGOPRINTT  B    GOPRTF        REALLY U                           GP18035\n          B    GOPRTF                                           GP18035\n*NEXT*    B    GOPRTV                                           GP18035\nGOPRTV   LA    R0,4(,R3)     LENGTH WITH RDW                    GP18035\n         SLL   R0,16         POSITION HIGH                      GP18035\n         STCM  R0,15,0(R1)   BUILD RDW                          GP18035\n         LA    R2,4(,R1)                                        GP18035\n         LR    R1,R2         FOR MCC                            GP18035\nGOPRTF   MVCL  R2,R6         MOVE TEXT WITH FILL                GP18035\n         TM    RECFM(R5),X'02'  MCC?                            GP18035\n         BZ    GOPRINTX           NO; DONE                      GP18035\n         MVI   0(R1),X'09'   WRITE/SPACE MCC                    GP18035\nGOPRINTX LM    R14,R7,SUBSAVE                                   GP18035\n         SPACE 1\n*---------------------------------------------------------------------*\n*   Clear print line for next user                                    *\n*---------------------------------------------------------------------*\nGOCLEAR  MVI   MSGLINE,C' '                                     GP18035\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE  CLEAR PRINT LINE GP18035\n         MVC   MSGRDW(4),=AL2(L'MSGLINE+4,0)                    GP18035\n         BR    R14                                              GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DCB OPEN EXIT FOR SYSPRINT                                  *\n*                                                                     *\n*         SET ATTRIBUTES IF NEEDED FOR SYSOUT OR TERMINAL OR DUMMY    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         PUSH  USING                                            GP18035\n         DROP  ,                                                GP18035\n         USING PRTEXIT,R15                                      GP18035\n         SPACE 1\n*   ENTRY CONDITIONS                          RESULT\n*   RECFM   LRECL  BLKSIZE\n*\n*     0        0       0        DEFAULT    FBA   121   121\n*     0        0      BL                   U      BL    BL\n*     0       RL       0                   FBA    RL    RL\n*     0       RL      BL                   FBA    RL    BL MAY FAIL NEQ\n*\n*     F        0       0                   F     121   121\n*     F        0      BL                   F      BL    BL\n*     F       RL       0                   F      RL    RL\n*     F       RL      BL                   F      RL    BL MAY FAIL NEQ\n*\n*     V        0       0                   V     121   121\n*     V        0      BL                   V      BL-4  BL\n*     V       RL       0                   V      RL    RL+4\n*     V       RL      BL                   V      RL    BL\n*\n*     U        0       0                   U     121   121\n*     U        0      BL                   U      BL    BL\n*     U       RL       0                   U      RL    RL\n*     U       RL      BL                   U      RL    BL\n*\n*  NOTE THAT THESE SETTINGS ARE NOT GENERAL, NOR OPTIMIZED FOR\n*  DEVICE TYPES, BUT ADEQUATE FOR THE SIX OR SO LINES PRODUCED.\n*  NEGLIGIBLE PERFORMANCE IMPROVEMENTS COULD BE HAD BY\n*  SETTING/RESETTING THE BLOCKED FLAG.\n*\n*  ALSO NOTE A POSSIBLE ABEND WHEN USER SPECIFIES BOTH LRECL AND\n*  INCOMPATIBLE BLOCK SIZE FOR RECFM=0 OR F...\n*\nPRTEXIT  SLR   R3,R3                                            GP18035\n         ICM   R3,3,LRECL(R1)     LOAD RECORD LENGTH            GP18035\n         BNZ   PRTEXBK              USE USER'S                  GP18035\n         LH    R4,BLKSI(,R1)      GET BLOCK SIZE                GP18035\n         LTR   R4,R4              ANY BLOCK SIZE?               GP18035\n         BZ    PRTEXNB              NO; USE DEFAULT FOR BOTH    GP18050\n         LR    R3,R4              PROVISIONALLY COPY BLKSIZE    GP18050\n         CLI   RECFM(R1),0        ANY RECFM ?                   GP18050\n         BNE   *+8                  YES                         GP18050\n         MVI   RECFM(1),X'C0'     SET TO RECFM=U (SAFEST)       GP18050\n         TM    RECFM(1),X'80'     F/U ?                         GP18050\n         BNZ   PRTEXST              YES, USE IT                 GP18050\n         SH    R3,=H'4'           ADJUST FOR BDW IN V/D         GP18050\n         B     PRTEXST              AND USE THAT                GP18050\n         SPACE 1\nPRTEXNB  CLI   RECFM(R1),0         IF NO RECFM\n         BNE   *+8                   THEN\n         MVI   RECFM(R1),X'94'       SET RECFM=FBA\n         LA    R3,120             DEFAULT BLOCK SIZE (NO CC)    GP18035\n         TM    RECFM(R1),X'06'    CARRIAGE CONTROL?             GP18035\n         BZ    *+8                  NO                          GP18035\n         LA    R3,1(,R3)          INCREASE DEFAULT              GP18035\n         TM    RECFM(R1),X'80'    RECFM=F OR U ?                GP18035\n         BNZ   PRTEXBK              YES; RECORD LENGTH SET      GP18035\n         LA    R3,4(,R3)          ALLOW FOR RDW                 GP18035\n*NEXT*   B     PRTEXBK                                          GP18035\n         SPACE 1\nPRTEXBK  LH    R4,BLKSI(,R1)      GET BLOCK SIZE                GP18035\n         LTR   R4,R4              ANY BLOCK SIZE?               GP18035\n         BNZ   PRTEXST              YES                         GP18035\n         LR    R4,R3              USE BLKSIZE = LRECL           GP18035\n         TM    RECFM(R1),X'80'    RECFM=U OR F ?                GP18035\n         BNZ   PRTEXST              YES; DONE                   GP18035\n         LA    R4,4(,R4)          ADD BDW TO BLOCK              GP18035\n         SPACE 1\nPRTEXST  STH   R3,LRECL(,R1)      SET RECORD LENGTH             GP18035\n         STH   R4,BLKSI(,R1)        AND BLOCK SIZE              GP18035\nPRTEXBR  BR    R14\n         POP   USING                                            GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DCB OPEN ABEND EXIT FOR SYSUT1                              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         PUSH  USING                                            GP18035\nUT1ABEND DS    0H\n         L     R8,0(,R1)           GET COMPLETION CODE\n         N     R8,=A(X'FFF0FF00')\n         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND\n         BE    UT1MEMBR            YES, BRANCH\n         MVI   4(R1),0             NO, ABNORMALLY TERMINATE\n         BR    R14\nUT1MEMBR OI    STATUS,FGSNOMEM     INDICATE MEMBER NOT FOUND\n         MVI   3(R1),4             IGNORE THE ABEND\n         BR    R14\n         DROP  R9\n         POP   USING                                            GP18035\n         EJECT ,\n         TITLE 'S U B S T C K  ***  MVS STCKCONV FACILITY'\n***********************************************************************\n*   THIS ROUTINE IS INVOKED BY (LOCAL) MACRO $TCKCONV AND PRODUCES    *\n*   THE SAME OUTPUT AS IBM'S STCKCONV ROUTINE UNDER ESA AND LATER.    *\n*   ADAPTED FOR INLINE USE.                                           *\n***********************************************************************\n*   PROCESS DATE - SHIFT TOD CLOCK AND DIVIDE AS PER PoOPS TO GET     *\n*   DAYS SINCE BASE, WHICH IS 1900/01/01 FOR MVS & LATER SYSTEMS      *\n***********************************************************************\n*   Input:                                                            *\n*   Time format in TIMETYPE                                           *\n*    01 BIN or MIC                                                    *\n*    02 DEC or MIC                                                    *\n*    20 STCK format                                                   *\n*                                                                     *\n*                                                                     *\n*   Date format in DATETYPE                                           *\n*    00 YYYYDDD                                                       *\n*    01 MMDDYYYY                                                      *\n*    02 DDMMYYYY                                                      *\n*    03 YYYYMMDD                                                      *\n*                                                                     *\n*    40 local time                                                    *\n***********************************************************************\nSUBSTCK  STM   R14,R12,12(R13)    SAVE A ;LOT                   GP18035\n         STCK  PLTOD                                            GP18035\n         LM    R2,R3,PLTOD   GET TOD CLOCK VALUE                GP18035\n         TM    DATETYPE,DATLOCAL  RETURN LOCAL TIME ?           GP18035\n         BZ    USEGMT                                           GP18035\n         L     R1,CVTPTR                                        GP18035\n         USING CVT,R1                                           GP18035\n         TM    CVTDCB,X'80'  MVS OR IS IT LATER ?               GP18035\n         BNZ   ADJNEW        OLD; USE TIME ZONE ADJUST          GP18035\n         AL    R2,CVTTZ      ADD OLD VERSION OF LOCAL TIME      GP18035\n         B     USEGMT        SKIP AROUND                        GP18035\nADJNEW   L     R1,CVTEXT2    GET CVT EXTENSION                  GP18035\n         USING CVTXTNT2,R1   MAP CVT EXTENSION                  GP18035\n         AL    R2,X'38'(,R1)    ADD CVTLDTOL  ADD HIGH/LEFT     GP18035\n         AL    R3,X'3C'(,R1)    ADD CVTLDTOR  ADD LOW/RIGHT     GP18035\n         BNO   USEGMT        NO CARRY                           GP18035\n         AL    R2,=F'1'      PROPAGATE CARRY                    GP18035\n         DROP  R1                                               GP18035\nUSEGMT   SRDL  R2,24         ADJUST                             GP18035\n         D     R2,=X'0141DD76'  GET DAYS SINCE 1900.001 PER PoOPS\n         ST    R3,DAYS                                          GP18035\n         ST    R2,MICS                                          GP18035\n         C     R3,=F'365'    IN FIRST YEAR ?                    GP18035\n         BNL   NOTBASE       NO                                 GP18035\n         MVC   YEAR,=F'1900'                                    GP18035\n         LA    R3,1(,R3)     FIX UP                             GP18035\n         ST    R3,DAY        SET 1900.DDD                       GP18035\n         B     MAKEDATE                                         GP18035\n         SPACE 2                                                GP18035\nNOTBASE  S     R3,=F'365'    CHANGE BASE TO 1901                GP18035\n         ST    R3,DAYS       SAVE                               GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'1461'   GET NUMBER OF LEAP YEAR EPOCHS     GP18035\n         LR    R7,R3         SAVE NUMBER OF LEAP YEARS          GP18035\n         LR    R6,R2         SAVE NUMBER OF YEARS IN CURR. 4 YEAR CYCLE\n         LA    R0,1          DEFAULT FUDGE TO 1                 GP18035\n         C     R2,=F'1460'   LAST DAY OF LEAP YEAR ?            GP18035\n         BNE   CALCYR        NO                                 GP18035\n         BCTR  R2,0                                             GP18035\n         LR    R6,R2         UPDATE                             GP18035\n         LA    R0,2          SET FUDGE TO 2                     GP18035\nCALCYR   LR    R3,R6                                            GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'365'                                       GP18035\n         AR    R2,R0         GET JULIAN DAY                     GP18035\n         ST    R2,DAY        SAVE IT                            GP18035\n         LR    R3,R6                                            GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'365'    GET YEARS IN R3                    GP18035\n         LR    R2,R7         LEAPS                              GP18035\n         SLA   R2,2          *4                                 GP18035\n         AR    R3,R2         ADD                                GP18035\n         A     R3,=F'1901'   ADD BASE                           GP18035\n         ST    R3,YEAR                                          GP18035\nMAKEDATE L     R2,YEAR                                          GP18035\n         TM    DATETYPE,3    NEED TO CONVERT DAY TO MONTH/DAY ? GP18035\n         BNZ   MAKEDMON      YES                                GP18035\n         MH    R2,=H'1000'                                      GP18035\n         A     R2,DAY        ADD DAY IN YEAR                    GP18035\n         CVD   R2,DB         PACK                               GP18035\n         L     R2,DB+4                                          GP18035\n         SRL   R2,4          REMOVE SIGN                        GP18035\n         ST    R2,PLDATE     RETURN DATE                        GP18035\n         B     GETTIME                                          GP18035\n         SPACE 1                                                GP18035\nMAKEDMON L     R1,DAY        GET BINARY DAY                     GP18035\n         SLR   R0,R0         SET FOR NO LEAP DAY ADJUSTMENT     GP18035\n*  N.B.: THIS WORKS UNTIL 2099 ONLY                             GP18035\n         EX    R2,EXISLEAP   TEST FOR MULTIPLE OF FOUR          GP18035\n         BNZ   NOTALEAP      BRANCH IF NOT A LEAP YEAR          GP18035\n         CH    R1,=H'60'     IS THIS ON, BEFORE, OR AFTER LEAP DAY?\n         BL    NOTALEAP      BEFORE; TREAT NORMALLY             GP18035\n         BH    ONELESS       AFTER; ADJUST DAY                  GP18035\n         LA    R0,1          SET LEAP DAY ADJUSTMENT            GP18035\nONELESS  BCTR  R1,0          ONE LESS TO FIX DAYS AFTER LEAP    GP18035\nNOTALEAP LA    R4,DATETABL   GET TABLE OF CUMULATIVE DAYS       GP18035\n         LR    R5,R4         SAVE                               GP18035\nFINDMON  CH    R1,2(,R4)     IN THIS MONTH?                     GP18035\n         BNH   FOUNDMON      YES; PROCESS                       GP18035\n         LA    R4,2(,R4)     INCREMENT                          GP18035\n         B     FINDMON       AND TRY AGAIN                      GP18035\nFOUNDMON SH    R1,0(,R4)     SUBTRACT DAYS IN PRIOR MONTHS      GP18035\n         AR    R1,R0         ADJUST 1 IF LEAP DAY               GP18035\n         LA    R4,2(,R4)     FINAGLE TO MAKE MONTH COME OUT RIGHT\n         SR    R4,R5         GET OFFSET TO MONTH                GP18035\n         SRL   R4,1          GET MONTH (1-12)                   GP18035\n*  WE NOW HAVE FULL YEAR IN R2, MONTH IN R4, AND DAY IN R1      GP18035\n         TM    DATETYPE,X'03'   YYYYMMDD ?                      GP18035\n         BO    DATEMISO                                         GP18035\n         TM    DATETYPE,X'01'   MMDDYYYY                        GP18035\n         BZ    DATEMDY                                          GP18035\n         MH    R4,=H'100'                                       GP18035\n         AR    R4,R1                                            GP18035\n         B     DATEMCOM                                         GP18035\nDATEMDY  MH    R1,=H'100'                                       GP18035\n         AR    R4,R1                                            GP18035\nDATEMCOM MH    R4,=H'10000'                                     GP18035\n         AR    R4,R2            MMDDYYYY OR DDMMYYYY            GP18035\n         B     DATEMOUT                                         GP18035\nDATEMISO MH    R2,=H'100'                                       GP18035\n         AR    R4,R2            YYYYMM                          GP18035\n         MH    R4,=H'100'                                       GP18035\n         AR    R4,R1            YYYYMMDD                        GP18035\nDATEMOUT CVD   R4,DB                                            GP18035\n         LM    R2,R3,DB                                         GP18035\n         SRDL  R2,4          REMOVE SIGN                        GP18035\n         ST    R3,PLDATE     RETURN DATE                        GP18035\n         SPACE 1\n***********************************************************************\n*   PROCESS TIME - HAVE MICROSECONDS, BUT LOW 12 BITS LOST IN SHIFT   *\n*   RESTORE BEFORE DECIDING WHETHER THEY'RE NEEDED                    *\n*   BRANCH BY REQUEST TYPE TO APPROPRIATE FORMATTING                  *\n***********************************************************************\nGETTIME  LM    R4,R5,PLTOD   GET CLOCK VALUE BACK               GP18035\n         SRDL  R4,24         FINAGLE                            GP18035\n         L     R3,MICS       GET REMAINDER                      GP18035\n         SLR   R2,R2         CLEAR FOR DIVIDE                   GP18035\n         SLDL  R2,12         REPOSITION                         GP18035\n         OR    R3,R4         REGAIN LOST BITS                   GP18035\n*LOCAL*  BIX   VAL=TIMETYPE,PFX=RTIM,ERR=RTIMERR,LOC=(,BIN,DEC,MIC)\n         IC    R15,TIMETYPE                                     GP18035\n         LA    R0,3                                             GP18035\n         NR    R15,R0        ISOLATE SIGNIFICANT PORTION        GP18035\n         CH    R15,=Y(4)     VALID INDEX ?                      GP18035\n         BNL   RTIMERR       NO; TOO HIGH                       GP18035\n         SLL   R15,1         CONVERT INDEX TO OFFSET            GP18035\n         LH    R15,*+8(R15)       LOAD LABEL OFFSET FROM BASE   GP18035\n         B     EMPTYTST(R15) ENTER ROUTINE                      GP18035\n         DC    AL2(RTIMERR-EMPTYTST)    1 ERROR                 GP18035\n         DC    AL2(RTIMBIN-EMPTYTST)    2        BRANCH         GP18035\n         DC    AL2(RTIMDEC-EMPTYTST)    3        BRANCH         GP18035\n         DC    AL2(RTIMMIC-EMPTYTST)    4        BRANCH         GP18035\n         SPACE 1                                                GP18035\nRTIMDEC  D     R2,=F'1000000'  CONVERT TO SECONDS               GP18035\n         CVD   R2,DB2        FRACTIONS                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'60'     GET SECONDS                        GP18035\n         ST    R2,SECS                                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'60'     GET MINUTES                        GP18035\n         ST    R2,MINS                                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'24'                                        GP18035\n         ST    R2,HOUR                                          GP18035\n         CVD   R2,PLTIME     MAKE HOUR PACKED                   GP18035\n         MP    PLTIME,=P'100'  MAKE ROOM FOR MINUTES            GP18035\n         L     R2,MINS                                          GP18035\n         CVD   R2,DB                                            GP18035\n         AP    PLTIME,DB     ADD MINUTES                        GP18035\n         MP    PLTIME,=P'100'  MAKE ROOM FOR SECONDS            GP18035\n         L     R2,SECS                                          GP18035\n         CVD   R2,DB                                            GP18035\n         AP    PLTIME,DB     ADD SECONDS                        GP18035\n         MP    PLTIME,=P'1000000'  ROOM FOR MICROSECONDS        GP18035\n         AP    PLTIME,DB2    ADD THOSE IN                       GP18035\n*0C7*    MP    PLTIME,=P'1000'     LEFT-JUSTIFY IN RESPONSE     GP18035\n         LM    R2,R3,PLTIME  LOAD PACKED VALUE                  GP18035\n         N     R3,=X'FFFFFFF0'  REMOVE SIGN                     GP18035\n         SLDL  R2,3*4        SHIFT THREE DIGITS                 GP18035\n         O     R3,=X'0000000C'  RESTORE SIGN                    GP18035\n         STM   R2,R3,PLTIME  SAVE PACKED VALUE                  GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMMIC  SLDL  R2,12         ALIGN MICROSECONDS IN BIT 51       GP18035\n         STM   R2,R3,PLTIME  RETURN IT                          GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMBIN  D     R2,=F'10000'  CONVERT TO 1/100TH SECOND          GP18035\n         ST    R3,PLTIME     RETURN IT                          GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMERR  MVI   RETCODE,16    INVALID PARAMETER LIST             GP18035\n         SPACE 1                                                GP18035\nPGMEXIT  L     R14,12(,R13)                                     GP18035\n         L     R15,RETCODE                                      GP18035\n         LM    R0,R12,20(R13)                                   GP18035\n         BR    R14                                              GP18035\n         SPACE 1                                                GP18035\nEXISLEAP TM    =X'03',*-*    MULTIPLE OF FOUR?                  GP18035\n         SPACE 1                                                GP18035\n*  TABLE OF DAYS IN PRIOR MONTH                                 GP18035\nDATETABL DC   H'0,31,59,90,120,151,181,212,243,273,304,334,365' GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DATA AREAS                                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTORG\n         SPACE 1\n         DC    0D'0'\nPATCAM   CAMLST SEARCH,*-*,*-*,*-*     PATTERN FOR DSCB 1       GP18035\n         ORG   PATCAM+4                ONLY NEED FLAGS          GP18035\n         READ  PATDECB,SF,*-*,*-*,*-*,MF=L                      GP18035\nPATDECBL EQU   *-PATDECB               LENGTH TO MOVE           GP18035\n         SPACE 1\nWTM00    WTO   'EMP000I EMPTYTST - RC = 00',                           *\n               ROUTCDE=(4,11),MF=L\nWTMROUT  EQU   *-4,4,C'X'         ROUTING/DESCRIPTOR CODES      GP18035\nWTM04    WTO   'EMP004I EMPTYTST - RC = 04',                           *\n               ROUTCDE=(4,11),MF=L\nWTM08    WTO   'EMP008I EMPTYTST - RC = 08',                           *\n               ROUTCDE=(4,11),MF=L\nWTM12    WTO   'EMP012E EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISS+\n               ING',ROUTCDE=(4,11),MF=L\nWTM16    WTO   'EMP016E EMPTYTST - RC = 16 ERROR - SYSUT1 IS CONCATENAT+\n               ION',ROUTCDE=(4,11),MF=L                         CB18048\nWTS00    DC    AL2(12-1),C'IS NOT EMPTY'                        GP18035\nWTS04    DC    AL2(08-1),C'IS EMPTY'                            GP18035\nWTS08    DC    AL2(16-1),C'MEMBER NOT FOUND'                    GP18035\n         DC    0D'0'\n         PRINT NOGEN\nUT1DCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),EODAD=UT1EOF   GP18035\nUT1DCBL  EQU   *-UT1DCB\n         SPACE 1\nPO1DCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,EODAD=UT1EOF,            *\n               RECFM=U,LRECL=264,BLKSIZE=264  CHEAT  ?          GP18035\nPO1DCBL  EQU   *-PO1DCB                                         GP18035\n         SPACE 1\nPRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PL)              GP18035\nPRTDCBL  EQU   *-PRTDCB\n         SPACE 1\nMSGTAB   DC    A(MSG00,MSG04,MSG08)                             GP18035\nMSG00    WTO   ' EMPTYTST - RC = 00 DATA SET IS NOT EMPTY',MF=L GP18035\nMSG04    WTO   ' EMPTYTST - RC = 04 DATA SET IS EMPTY',MF=L     GP18035\nMSG08    WTO   ' EMPTYTST - RC = 08 MEMBER NOT FOUND',MF=L      GP18035\nMSG12    WTO   ' EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISSING',  *\n               MF=L                                             GP18035\nMSG16    WTO   ' EMPTYTST - RC = 16 ERROR - SYSUT1 IS CONCATENATION',  *\n               MF=L                                             CB18048\nMSGFR    WTO   ' EMPTYTST - -------',MF=L                       GP18035\n         SPACE 1\nTRTBLANK DC    AL1(4),255AL1(0)   QUICK END OF STRING LOCATE    GP18035\n         ORG   TRTBLANK+C' '                                    GP18035\n         DC    AL1(4)             STOP ON BLANK                 GP18035\n         ORG   ,                                                GP18035\n         SPACE 1\n         DC    0D'0'\nWORKD    DSECT\n         DS    18F\nSUBSAVE  DS    10F                Multiple use save area        GP18035\nDOUBLE   DS    D\nRETCODE  DS    F\nOPTC     DS    C\nOPTQ     DS    C\nOPTW     DS    C\nSTATUS   DS    C             STATUS FLAGS\nFGSNOMEM EQU   X'10'           MEMBER NOT FOUND\nFGSCP    EQU   X'01'           PARM IS FOR TSO CP               GP18035\nNJOB     DS    CL8                     JOB NAME                  SG1801\nPSTN     DS    CL8                     STEP NAME                 SG1801\nJSTN     DS    CL8                     JOB STEP NAME FOR PROCS   SG1801\nUT1DD    DS    CL8\nPRTDD    DS    CL8\nDEVAREA  DS    2F\nOPEN     OPEN  (*-*),MF=L         SYSUT1 OPEN/CLOSE/RDJFCB      GP18035\nOPENOUT  OPEN  (*-*),MF=L         SYSPRINT OPEN/CLOSE           GP18035\nPRTEXLST DS    F\nEXITLST  DS    2F\nPRTMXL   DS    F             MAXIMUM PRINT DATA LENGTH          GP18035\nPRTIX    DS    H             PRINT PROCESSING INDEX (0-U;4-F;8-VD)\nWORKINI  EQU   *-WORKD\nMSGRDW   DS    AL2(L'MSGLINE+4,0)                               GP18035\nMSGLINE  DS    CL121         MESSAGE WITH CC                     SG1801\n*NEW*TIMEL    TIME  LINKAGE=SYSTEM,MF=L                         GP18035\n         READ  RDECB,SF,*-*,*-*,*-*,MF=L                        GP18035\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\n         DS    X        1/2                                     GP18035\nHEADDATE DC    CL23' '  2/2\n         SPACE 1                                                GP18035\nPLTOD    DS    D             INPUT STCK VALUE                   GP18035\nPLTIME   DS    D             FAKE FOR ALIGNMENT                 GP18035\nPLDATE   DS    F             RETURNED DATE                      GP18035\nDATETYPE DS    X             DATE TYPE (0-J, 1-MDY, 2-DMY, 3-YMD)\nDATLOCAL EQU   X'40'           IF ON, ADJUST FOR LOCAL VS. GMT  GP18035\nTIMETYPE DS    X             TIME TYPE (1-BIN, 2-DEC, 3-MIC)    GP18035\n         SPACE 1                                                GP18035\nDB       DS    D             WORK WORDS                         GP18035\nDB2      DS    D             WORK WORDS                         GP18035\nMICS     DS    F             REMAINDER AFTER DAY DIVISION       GP18035\nDAYS     DS    F             DAYS FROM BASE                     GP18035\nYEAR     DS    F             YEAR                               GP18035\nDAY      DS    F             DAY IN CURRENT YEAR                GP18035\nHOUR     DS    F             TIME: HOUR                         GP18035\nMINS     DS    F             TIME: MINUTES                      GP18035\nSECS     DS    F             TIME: SECONDS                      GP18035\n         SPACE 1                                                GP18035\nUT1DCBW  DS    0F,(UT1DCBL)X\nPO1DCBW  DS    0F,(PO1DCBL)X                                    GP18035\nPRTDCBW  DS    0F,(PRTDCBL)X\nDEWORK   DS    XL256,XL8     DIRECTORY ENTRY + KEY (?)          GP18035\n         ORG   DEWORK          REUSE                            GP18035\nWTOW     DS    XL124 LONGEST WTO MSG (W/RDW)                    GP18035\nMSGW     DS    0F,CL112 LONGEST MSG IS 108, ROUNDED TO 8-BYTE MULTIPLE\n         ORG   ,                                                GP18035\n         SPACE 1\nCAMLIST  DS    5A                 (ONLY USING 4)                GP18035\n         IECSDSL1 1               MAP FORMAT 1 DSCB             GP18035\n         DS    XL5                SPACE FOR CCHHR               GP18035\nFM1FLAG1 EQU   DS1NOBDB+1,1,C'X'  MORE FLAGS                    GP18035\nFM1SMSFG EQU   FM1FLAG1+17,1,C'X'  SMS FLAG                     GP18035\n         SPACE 1\nJFCB     DS    0F                                               GP18035\n         IEFJFCBN ,                                             GP18035\n         DS    0D\nWORKLEN  EQU   *-WORKD\n         SPACE 1\nBUFCA    EQU   21                                               GP18035\nEODAD    EQU   33\nRECFM    EQU   36\nEXLSA    EQU   37\nDDNAM    EQU   40\nOFLGS    EQU   48\nBLKSI    EQU   62\nLRECL    EQU   82\n         SPACE 1                                                GP18035\n         PRINT NOGEN                                            GP18035\n         CVT   DSECT=YES\n         SPACE 1\n         YREGS ,                                                 SG1801\n         END   ENTRY0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EMPTYT00": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00 \\x01\\x18\\x02\\x1f\\x01\\x18\\x03/\\x13\\x03\\x02\\xa8\\x00l\\x00\\x00\\xd6\\xd3\\xc4\\xe2\\xd9\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2018-01-21T00:00:00", "modifydate": "2018-02-01T13:03:20", "lines": 680, "newlines": 108, "modlines": 0, "user": "OLDSRC"}, "text": "         TITLE 'BATCH PROGRAM TO TELL IF A DATASET IS EMPTY'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*    PROGRAM :  EMPTYTST                                              *\n*                                                                     *\n*    FUNCTION:  FIND OUT IF A DATASET OR A PDS MEMBER IS EMPTY.       *\n*                                                                     *\n*    ACTION  :  RETURNS CODE = 0 IF DATASET IS NOT EMPTY.             *\n*               RETURNS CODE = 4 IF DATASET IS EMPTY.                 *\n*               JCL ERROR IF A SEQUENTIAL DATASET (DSORG=PS)          *\n*                 DOES NOT EXIST.                                     *\n*               RETURNS CODE = 8 IF PDS MEMBER DOES NOT EXIST.        *\n*                 IT SHOWS THE S013-18 MESSAGE BUT BYPASSES IT.       *\n*               RETURNS CODE = 12 UPON SERIOUS I/O ERROR.             *\n*                                                                     *\n*    SEE BELOW FOR FURTHER DOCUMENTATION.                             *\n*                                                                     *\n*    DATE WRITTEN:   JANUARY 21 2018                                  *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                        HOW IT WORKS:                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* READ THE FIRST RECORD OF THE DATA SET, PDS MEMBER, OR PDSE MEMBER   *\n* THAT IS ALLOCATED TO DDNAME SYSUT1.                                 *\n* IF THE READ IS SUCCESSFUL, EXIT WITH RETURN CODE 0.                 *\n* IF THE READ HITS END-OF-FILE, EXIT WITH RETURN CODE 4,              *\n* WHICH MEANS THE DATA SET OR MEMBER IS EMPTY.                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF SYSPRINT IS ALLOCATED, A MESSAGE IS WRITTEN TO SYSPRINT.         *\n* OTHER POSSIBLE RETURN CODES ARE 12 FOR MISSING SYSUT1 DDNAME        *\n* OR 8 FOR MEMBER DOES NOT EXIST.                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* SAMPLE JCL :                                                        *\n*                 //EXEC PGM=EMPTYTST                                 *\n*                 //SYSPRINT DD SYSOUT=*                              *\n*                 //SYSUT1 DD DSN=A.B.C,DISP=SHR                      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*         OPTIONS IN THE PARM FIELD.   PARM = W Q C                   *\n*                                                                     *\n* THE PARM FIELD IS CHECKED FOR THE PRESENCE OF CERTAIN CHARACTERS    *\n* WHICH ALLOW OPTIONS TO BE SPECIFIED.                                *\n* IF MORE THAN ONE OPTION IS USED, THE CHARACTERS DO NOT NEED TO      *\n* BE SEPARATED, OR IN ANY SPECIFIC ORDER.                             *\n* IF THE PARM FIELD CONTAINS THE CHARACTER \"W\" THEN THE PROGRAM       *\n* WILL ISSUE A WTO WITH ONE OF THESE MESSAGES:                        *\n*                                                                     *\n*   EMP000I EMPTYTST - RC = 00 <DSN> ON VOLUME <VOL> IS NOT EMPTY     *\n*   EMP004I EMPTYTST - RC = 04 <DSN> ON VOLUME <VOL> IS EMPTY         *\n*   EMP008I EMPTYTST - RC = 08 <DSN> ON VOLUME <VOL> WAS NOT FOUND    *\n*   EMP012I EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISSING        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"W\" AND THE LETTER \"C\"        *\n* (FOR CONDITIONAL) THEN IT WILL ISSUE A WTO ONLY IF THE RETURN       *\n* CODE IS NOT ZERO.                                                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"Q\" (FOR QUIET)               *\n* THEN THE PROGRAM WILL NOT OPEN SYSPRINT EVEN IF IT IS ALLOCATED.    *\n* THIS IS INTENDED FOR RUNNING THE PROGRAM UNDER TSO WHEN A USER      *\n* PREFERS NOT TO SEE A MESSAGE EVEN THOUGH SYSPRINT MIGHT BE          *\n* ALLOCATED TO THE TERMINAL.                                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* DDNAME SYSPRINT IS OPTIONAL                                         *\n* EVEN IF DDNAME SYSPRINT IS ALLOCATED, THE PROGRAM WILL NOT          *\n* OPEN IT OR WRITE TO IT IF PARM=Q IS SPECIFIED.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* USAGE NOTE:                                                         *\n*                                                                     *\n* PRIOR TO Z/OS 1.11 WHEN A PS DATA SET THAT WAS NOT SMS-MANAGED WAS  *\n* FIRST CREATED, NO END-OF-FILE MARK WAS WRITTEN AT THE BEGINNING     *\n* OF THE DATA SET. IF A PROGRAM (LIKE THIS ONE, FOR EXAMPLE)          *\n* READ THE DATA SET BEFORE ANYTHING WAS WRITTEN TO IT, IT MIGHT       *\n* SUCCESSFULLY READ WHAT WAS THERE BEFORE THE DATA SET WAS CREATED,   *\n* AS IF THE DATA SET WERE NOT EMPTY.                                  *\n* OR IT MIGHT GET A READ ERROR BECAUSE THE RECORD THAT WAS THERE      *\n* BEFORE THE DATA SET WAS CREATED DOESN'T HAVE THE SAME RECFM, LRECL, *\n* OR BLOCK SIZE AS THE DATA SET THAT WAS CREATED.                     *\n* FOR SUCH SITUATIONS, A PROGRAM THAT CHECKS FOR AN EMPTY PS DATA SET *\n* COULD STILL DETECT THAT IT WAS EMPTY BY READING THE FORMAT 1 DSCB   *\n* FROM THE VTOC AND CHECKING THE DS1LSTAR FIELD FOR ZERO.             *\n* ON SYSTEMS RUNNING Z/OS 1.11 OR LATER, THIS IS NOT NECESSARY.       *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     IMPROVED MESSAGES                          SG1801\n* I DID A FEW OF THESE.  ALL CODES 0, 4, 8 HAVE THE DSNAME       SG1801\n* AND VOLSER INCLUDED.  ONLY ONE THAT DOESN'T IS CODE 12.        SG1801\n* A SEQUENTIAL DATASET (DSORG=PS) IF NON-EXISTENT, SHOULD        SG1801\n* GET A JCL ERROR.  IF A PDS MEMBER ISN'T THERE, THEN THE        SG1801\n* S013-18 ABEND GETS INTERCEPTED, AND A CODE = 8 IS SHOWN.       SG1801\n* MOST OF THIS WORK WAS DONE BY CBTUSER.                         SG1801\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEMPTYTST CSECT\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)\n         DC    AL1(9),CL9'EMPTYTST'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nBEGIN    STM   14,12,12(13)\n         LR    R10,R15\n         LR    R2,R1               SAVE POINTER TO PARM AND DDNAMES\n         L     R0,WORKSIZ\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING WORKD,R9\n         XC    0(WORKINI,R1),0(R1)\n         ST    R13,4(,R9)          OLD ADDRESS IN NEW SAVE AREA\n         ST    R9,8(,R13)          NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R9\n         LA    R15,12\n         ST    R15,RETCODE         INITIALLY SET RETCODE TO 12\n         SPACE\n***********************************************************************\n*                    GET SYSTEM DATE AND TIME                         *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY,          x\n               MF=(E,TIMEL)                                      SG1801\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         LM    R14,R2,SAVE1402\n***********************************************************************\n*                                                                     *\n*         CHECK PARM FOR Q (QUIET, DON'T OPEN SYSPRINT)               *\n*                     OR W (ISSUE WTO)                                *\n*                     OR C (ISSUE WTO ONLY IF EMPTY OR ERROR)         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM LENGTH\n         LH    R0,0(,R1)           GET PARM LENGTH\n         LTR   R0,R0               IF NO PARM\n         BZ    PARMDONE              SKIP PARM\n         LA    R1,2(,R1)           POINT TO 1ST CHAR IN PARM\nPARMLOOP CLI   0(R1),C'Q'          Q FOR QUIET, IGNORE SYSPRINT\n         BNE   PARMW\n         MVI   OPTQ,C'Q'\n         B     PARMNEXT\nPARMW    CLI   0(R1),C'W'          W FOR ISSUE WTO\n         BNE   PARMC\n         MVI   OPTW,C'W'\n         B     PARMNEXT\nPARMC    CLI   0(R1),C'C'          C FOR ISSUE WTO IF RC NOT = 0\n         BNE   PARMNEXT\n         MVI   OPTC,C'C'\nPARMNEXT LA    R1,1(,R1)           POINT TO NEXT CHAR IN PARM\n         BCT   R0,PARMLOOP         LOOP USING PARM LENGTH IN R0\nPARMDONE EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*     GET JOBNAME STEPNAME AND PROCSTEP NAME FOR SYSPRINT REPORT      *\n*                                                                     *\n***********************************************************************\n         L     R1,X'21C'           PSATOLD                       SG1801\n         L     R1,12(,R1)          TIOT                          SG1801\n         MVC   NJOB(8),0(R1)       JOB NAME                      SG1801\n         MVC   PSTN(8),8(R1)       JOB STEP                      SG1801\n         MVC   JSTN(8),16(R1)      JOBSTEP NAME FOR PROCS        SG1801\n***********************************************************************\n*                                                                     *\n*         CHECK FOR DDNAME OVERRIDES                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n*         THIS USES THE SAME CONVENTION AS UTILITIES LIKE IEBGENER.\n*         SYSPRINT OVERRIDE IS 6TH IN THE LIST OF DDNAMES\n*         SYSUT1   OVERRIDE IS 8TH IN THE LIST OF DDNAMES\n         TM    0(R2),X'80'         IF DDNAME OVERRIDES NOT PRESENT\n         BO    DDX                    SKIP OVERRIDES\n         L     R1,4(,R2)           POINT TO DDNAME LIST\n         LA    R1,0(,R1)           CLEAR HIGH 8 BITS\n         LTR   R1,R1               IF POINTER IS ZERO\n         BZ    DDX                    SKIP OVERRIDES\n         CLI   0(R1),0             IF LENGTH > 255\n         BNE   DDX                    SKIP OVERRIDES\n         CLI   1(R1),8*6           IF LIST NOT LONG ENOUGH FOR 6 DD'S\n         BL    DDX                    SKIP OVERRIDE\n         CLI   42(R1),0  (8*5+2)   IF SLOT EMPTY\n         BE    DDUT1                  SKIP OVERRIDE\n         MVC   PRTDD,42(R1)        COPY DDNAME FOR SYSPRINT\nDDUT1    CLI   1(R1),8*8           IF LIST NOT LONG ENOUGH FOR 8 DD'S\n         BL    DDX                    SKIP OVERRIDE\n         CLI   58(R1),0  (8*7+2)   IF SLOT EMPTY\n         BE    DDX                    SKIP OVERRIDE\n         MVC   UT1DD,58(R1)        COPY DDNAME FOR SYSUT1\nDDX      EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN SYSPRINT IF DDNAME SYSPRINT IS ALLOCATED               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         SR    R4,R4               ZERO R4 TO INDICATE NO SYSUT1\n         SR    R5,R5               ZERO R5 TO INDICATE NO SYSPRINT\n         CLI   OPTQ,C'Q'           IF THERE WAS A Q IN PARM\n         BE    PRTX                  SKIP SYSPRINT\n         LA    R5,PRTDCBW\n         MVC   0(PRTDCBL,R5),PRTDCB\n         CLI   PRTDD,0             IF SYSPRINT DDNAME OVERRIDE\n         BE    *+10                  THEN\n         MVC   DDNAM(8,R5),PRTDD     CHANGE DDNAME IN DCB\n         LA    R1,DDNAM(,R5)       POINT TO DDNAME FOR DEVTYPE\n         DEVTYPE (1),DEVAREA       CHECK FOR DDNAME IN TIOT\n         LR    R0,R5               SAVE R5\n         SR    R5,R5               ZERO R5 TO INDICATE NO SYSPRINT\n         LTR   R15,R15             IF DEVTYPE SAYS DDNAME NOT IN TIOT\n         BNZ   PRTX                  DON'T USE SYSPRINT\n         LR    R5,R0               RESTORE R5 AND USE SYSPRINT\n         LA    R15,PRTEXIT         GET ADDRESS OF PRTEXIT\n         ST    R15,PRTEXTA         STORE ADDRESS IN PRTEXTA\n         LA    R15,PRTEXTA         GET ADDRESS OF PRTEXTA\n         MVI   0(R15),X'85'        MARK AS OPEN EXIT AND LAST ENTRY\n         STCM  R15,7,EXLSA(R5)     EXLST=PRTEXTA, PRTEXTA -> PRTEXIT\n         MVI   OPEN,X'80'\n         OPEN  ((R5),OUTPUT),MF=(E,OPEN)\n*        TM    OFLGS(R5),X'10'     IF OPEN FAILED (DDNAME NOT PRESENT)\n*        BNO   EXIT                  EXIT\nPRTX     EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN SYSUT1                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R4,UT1DCBW\n         MVC   0(UT1DCBL,R4),UT1DCB\n         LA    R15,UT1EOF\n         STCM  R15,7,EODAD(R4)\n         CLI   UT1DD,0             IF SYSUT1 DDNAME OVERRIDE\n         BE    *+10                  THEN\n         MVC   DDNAM(8,R4),UT1DD     CHANGE DDNAME IN DCB\n         LA    R1,DDNAM(,R4)       POINT TO DDNAME FOR DEVTYPE\n         DEVTYPE (1),DEVAREA       CHECK FOR DDNAME IN TIOT\n         LR    R0,R4               SAVE R4\n         SR    R4,R4               ZERO R4 TO INDICATE NO SYSUT1\n         LTR   R15,R15             IF DEVTYPE SAYS DDNAME NOT IN TIOT\n         BNZ   PRNT                  DON'T USE SYSPRINT\n         LR    R4,R0               RESTORE R5 AND USE SYSUT1\n         LA    R15,UT1ABEND        POINT TO OPEN ABEND EXIT\n         ST    R15,EXITLST         STORE IN 1ST WORD OF EXITLIST\n         MVI   EXITLST,X'11'       MARK AS OPEN ABEND EXIT (MVS)\n         LA    R15,JFCB            GET ADDRESS OF JFCB\n         ST    R15,EXITLST+4       STORE ADDRESS IN EXITLST 2ND WORD\n         MVI   EXITLST+4,X'87'     MARK AS JFCB PTR AND LAST ENTRY\n         LA    R15,EXITLST         GET ADDRESS OF EXITLST\n         STCM  R15,7,EXLSA(R4)     EXLST=EXITLST, EXITLST -> JFCB\n         MVI   RDJFW,X'80'\n         RDJFCB ((R4)),MF=(E,RDJFW)\n         MVI   OPEN,X'80'\n         OPEN  ((R4),INPUT),MF=(E,OPEN)\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED\n         BO    UT1X                  THEN\n         SR    R4,R4                 ZERO R4 TO INDICATE NO SYSUT1\n         TM    STATUS,X'10'          IF IT WAS MEMBER NOT FOUND\n         BZ    PRNT                    THEN\n         MVI   RETCODE+3,8             SET RC TO 8\n         B     PRNT                  SKIP GET\nUT1X     EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         READ FIRST RECORD OR GO TO UT1EOF STRAIGHT FROM GET         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVI   RETCODE+3,4         SET RETURN CODE TO 4 FOR EMPTY\n         GET   (R4)\n         MVI   RETCODE+3,0         SET RETURN CODE TO 0 FOR NOT EMPTY\nUT1EOF   EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE MESSAGE TO SYSPRINT                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\nPRNT     LTR   R5,R5               IF SYSPRINT IS NOT OPEN\n         BZ    WTOT                  SKIP MESSAGE\n*---------------------->  PRINT TITLE TO SYSPRINT  <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(18),=C'EMPTYTST - -------'              SG1801\n         LA    R0,MSGLINE                                        SG1801\n         PUT   (R5),(0)                                          SG1801\n*---------------------->  PRINT TITLE TO SYSPRINT  <-----------* SG1801\n         LA    R1,MSG08\n         CLI   RETCODE+3,8         IF RC = 8, MEMBER NOT FOUND\n         BE    DSN0                  GET DSNAME\n         LA    R1,MSG12\n         CLI   RETCODE+3,8         IF RC > 8                     SG1801\n         BH    PRT4                  USE MSG12\nDSN0     EQU   *                                                 SG1801\n         MVI   MSGW,C' '\n         MVC   MSGW+1(79),MSGW\n         MVC   MSGW+4(19),=C' EMPTYTST - RC = 00'\n         MVC   MSGW+24(44),JFCB    JFCB+JFCBDSNM-INFMJFCB\n         LA    R0,44               MAX ITERATIONS\n         LA    R1,MSGW+24+43       POINT TO END OF DSN\nDSN1     CLI   0(R1),C' '          IS THIS LAST NONBLANK\n         BNE   DSN2                YES, BRANCH\n         BCTR  R1,0                BACK UP 1 CHARACTER\n         BCT   R0,DSN1             DECREMENT AND BRANCH\nDSN2     LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\n         CLI   JFCB+44,C' '        JFCBELNM (MEMBER NAME)\n         BE    PRT1                  SKIP IF NONE\n         MVI   0(R1),C'('\n         MVC   1(8,R1),JFCB+44     JFCBELNM (MEMBER)\n         LA    R0,8                MAX ITERATIONS\n         LA    R1,8(,R1)           POINT TO END OF MEMBER\nDSN3     CLI   0(R1),C' '          IS THIS LAST NONBLANK\n         BNE   DSN4                YES, BRANCH\n         BCTR  R1,0                BACK UP 1 CHARACTER\n         BCT   R0,DSN3             DECREMENT AND BRANCH\nDSN4     LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\n         MVI   0(R1),C')'\n         LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\nPRT1     CLI   JFCB+118,C' '       IF VOLUME IS BLANK - JFCBVOLS\n         BE    PRT1A                SKIP VOLUME (DUMMY)\n         MVC   1(9,R1),=C'ON VOLUME'\n         MVC   11(6,R1),JFCB+118   VOLUME FROM JFCB JFCBVOLS\n         LA    R1,17(,R1)          POINT PAST RIGHTMOST NONBLANK\nPRT1A    EQU   *                                                 SG1801\n         CLI   RETCODE+3,8                                       SG1801\n         BNE   PRT1B                                             SG1801\n         MVC   1(13,R1),=C'WAS NOT FOUND'                        SG1801\n         LA    R1,14(,R1)                                        SG1801\n         MVI   MSGW+22,C'8'        CHANGE 00 TO 08               SG1801\n         B     PRT3                                              SG1801\nPRT1B    EQU   *                                                 SG1801\n         CLI   RETCODE+3,0\n         BNE   PRT2\n         MVC   1(12,R1),=C'IS NOT EMPTY'\n         LA    R1,13(,R1)\n         B     PRT3\nPRT2     MVC   1(8,R1),=C'IS EMPTY'\n         LA    R1,9(,R1)\n         MVI   MSGW+22,C'4'        CHANGE 00 TO 04\nPRT3     LA    R0,MSGW\n         SR    R1,R0               COMPUTE MESSAGE LENGTH\n         SLL   R1,16               SHIFT INTO RDW FORM\n         ST    R1,MSGW             SET RDW\n         LA    R1,MSGW\nPRT4     TM    RECFM(R5),X'C0'     IF SYSPRINT IS RECFM U\n         BO    PRTU                  GO TO PRTU\n         TM    RECFM(R5),X'40'     IF SYSPRINT IS RECFM V\n         BO    PRTV                  GO TO PRTV\n         MVI   PBUF,C' '\n         MVC   PBUF+1(136),PBUF\n         LH    R14,0(,R1)          GET LENGTH OF MESSAGE INCL RDW\n         SH    R14,=H'5'           REDUCE LENGTH BY 4 AND 1 FOR EX\n         B     *+10\n         MVC   PBUF(0),4(R1)\n         EX    R14,*-6             COPY MSG TO PBUF\n         LA    R0,PBUF\n         B     PRTP\nPRTV     LH    R14,BLKSI(,R5)      GET DCB RECORD LENGTH IF UNBLOCKED\n         SH    R14,=H'4'           COMPUTE MAX RECORD LENGTH\n         TM    RECFM(R5),X'10'     IF RECFM INDICATES BLOCKED\n         BZ    *+10                  THEN\n         LH    R14,LRECL(,R5)        GET MAX RECORD LENGTH FROM LRECL\n         CH    R14,0(,R1)          COMPARE TO MESSAGE LENGTH IN RDW\n         BL    WTOT                SKIP PUT IF MESSAGE TOO LONG\n         LR    R0,R1               POINT R0 TO MESSAGE RDW\n         B     PRTP\nPRTU     LH    R0,0(,R1)           GET LENGTH FROM MESSAGE RDW\n         SH    R0,=H'4'            COMPUTE LENGTH WITHOUT RDW\n         STH   R0,LRECL(,R5)       SET RECORD SIZE IN DCB FOR RECFM U\n         LA    R0,4(,R1)           POINT R0 PAST RDW TO MESSAGE\nPRTP     EQU   *\n         PUT   (R5),(0)\n*---------------------->  PRINT TITLE TO SYSPRINT  <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(18),=C'EMPTYTST - -------'              SG1801\n         LA    R0,MSGLINE                                        SG1801\n         PUT   (R5),(0)                                          SG1801\n*---------------------->  PRINT TITLE TO SYSPRINT  <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(15),=C'EMPTYTST - V1.2'                 SG1801\n         MVC   MSGLINE+20(19),=C'Time of Execution: '            SG1801\n         MVC   MSGLINE+40(23),HEADDATE                           SG1801\n         LA    R0,MSGLINE                                        SG1801\n         PUT   (R5),(0)                                          SG1801\n*---------------------->  PRINT TITLE TO SYSPRINT  <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(15),=C'EMPTYTST - V1.2'                 SG1801\n         MVC   MSGLINE+20(9),=C'Jobname: '                       SG1801\n         MVC   MSGLINE+30(8),NJOB                                SG1801\n         MVC   MSGLINE+40(9),=C'Stepname:'                       SG1801\n         MVC   MSGLINE+51(8),PSTN                                SG1801\n         MVC   MSGLINE+61(9),=C'Jobstep: '                       SG1801\n         MVC   MSGLINE+71(8),JSTN                                SG1801\n         LA    R0,MSGLINE                                        SG1801\n         PUT   (R5),(0)                                          SG1801\n*---------------------->  PRINT TITLE TO SYSPRINT  <-----------* SG1801\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE MESSAGE TO CONSOLE IF PARM=W                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nWTOT     CLI   OPTW,0              IF PARM HAS NO W\n         BE    WTOX                  SKIP WTO\n         CLI   OPTC,0              IF PARM HAS W AND C\n         BE    WTOK                  AND\n         CLI   RETCODE+3,0           RETCODE IS 0\n         BE    WTOX                  SKIP WTO\n         CLI   RETCODE+3,8                                       SG1801\n         BE    WTOK8                                             SG1801\nWTOK     EQU   *                                                 SG1801\n         MVI   WTOW,X'40'          CLEAR OUTPUT AREA             SG1801\n         MVC   WTOW+1(L'WTOW-1),WTOW                             SG1801\n         MVC   WTOW(WTM12L),WTM12\n         B     WTOK8S                                            SG1801\nWTOK8    EQU   *                                                 SG1801\n         MVI   WTOW,X'40'          CLEAR OUTPUT AREA             SG1801\n         MVC   WTOW+1(L'WTOW-1),WTOW                             SG1801\nWTOK8S   EQU   *                                                 SG1801\n         CLI   RETCODE+3,8         IF RETCODE > 8\n         BH    WTOI                  USE WTM12 WHICH NEEDS NO CHANGE\n         BE    WTO00EI                        = 8 GO HANDLE      SG1801\n         CLI   RETCODE+3,4                                       SG1801\n         BL    WTO00GO                        < 4 DO ZERO        SG1801\n         BE    WTO00FO                        = 4 GO HANDLE      SG1801\n         B     WTO00GO               CATCHALL. SHOULDN'T HAPPEN  SG1801\nWTO00EI  EQU   *                                                 SG1801\n         MVC   WTOW(WTM08L),WTM08  IF 8, WRITE MSG, DSN NOEXIST  SG1801\n         MVC   WTOW+4+27(44),JFCB  ADD DSN TO MESSAGE - JFCBDSNM\n         B     WTO00PA               PASS THE CODE FOR 0.        SG1801\nWTO00FO  EQU   *                                                 SG1801\n         MVC   WTOW(WTM04L),WTM04  IF 4, WRITE MSG, DSN EMPTY    SG1801\n         MVC   WTOW+4+27(44),JFCB  ADD DSN TO MESSAGE - JFCBDSNM\n         B     WTO00PA                                           SG1801\nWTO00GO  MVC   WTOW(WTM00L),WTM00  USE WTM00 WHICH NEEDS DSN ADDED\n         MVC   WTOW+4+27(44),JFCB  ADD DSN TO MESSAGE - JFCBDSNM\nWTO00PA  EQU   *                                                 SG1801\n         LA    R0,44               MAX ITERATIONS\n         LA    R1,WTOW+4+27+43     POINT TO END OF DSN\nWTO1     CLI   0(R1),C' '          IS THIS LAST NONBLANK\n         BNE   WTO2                YES, BRANCH\n         BCTR  R1,0                BACK UP 1 CHARACTER\n         BCT   R0,WTO1             DECREMENT AND BRANCH\nWTO2     LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\n         CLI   JFCB+44,C' '        JFCBELNM (MEMBER NAME)\n         BE    WTO5                  SKIP IF NONE\n         MVI   0(R1),C'('\n         MVC   1(8,R1),JFCB+44     JFCBELNM (MEMBER NAME)\n         LA    R0,8                MAX ITERATIONS\n         LA    R1,8(,R1)           POINT TO END OF MEMBER\nWTO3     CLI   0(R1),C' '          IS THIS LAST NONBLANK\n         BNE   WTO4                YES, BRANCH\n         BCTR  R1,0                BACK UP 1 CHARACTER\n         BCT   R0,WTO3             DECREMENT AND BRANCH\nWTO4     LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\n         MVI   0(R1),C')'\n         LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\nWTO5     CLI   JFCB+118,C' '       IF VOLUME IS BLANK -JFCBVOLS\n         BE    WTO5A                SKIP VOLUME (DUMMY)\n         MVC   1(9,R1),=C'ON VOLUME'\n         MVI   10(R1),X'40'                                      SG1801\n         MVC   11(6,R1),JFCB+118   VOLUME FROM JFCB JFCBVOLS\n         LA    R1,17(,R1)          POINT PAST RIGHTMOST NONBLANK\n         MVI   17(R1),X'40'                                      SG1801\nWTO5A    EQU   *                                                 SG1801\n         CLI   RETCODE+3,8         DATASET NOT FOUND?            SG1801\n         BE    WTO5B               GO HANDLE.                    SG1801\n         CLI   RETCODE+3,0         DATASET NOT EMPTY?            SG1801\n         BNE   WTO6                TELL EM.                      SG1801\n         MVC   1(12,R1),=C'IS NOT EMPTY'\n         LA    R1,13(,R1)\n         B     WTO7\nWTO5B    EQU   *                                                 SG1801\n         MVC   0(10,R1),=C' NOT FOUND'                           SG1801\n         LA    R1,10(,R1)                                        SG1801\n         B     WTO7                                              SG1801\nWTO6     MVC   1(8,R1),=C'IS EMPTY'\n         LA    R1,9(,R1)\n         MVI   WTOW+29,C'4'        CHANGE 00 TO 04\nWTO7     MVC   0(4,R1),WTM00+WTM00L-4  DESCRIPTOR AND ROUTING CODES\n         LA    R0,WTOW\n         SR    R1,R0               COMPUTE MESSAGE LENGTH\n         STH   R1,WTOW\nWTOI     EQU   *\n         WTO   MF=(E,WTOW)\nWTOX     EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CLOSE SYSUT1                                                *\n*                                                                     *\n***********************************************************************\n         SPACE\nCLSE     LTR   R4,R4               IF SYSUT1 NOT OPEN\n         BZ    CLSP                  SKIP CLOSE\n         MVI   CLOSE,X'80'\n         CLOSE ((R4)),MF=(E,CLOSE)\n         BAL   R6,FREEPOOL\n         SPACE\nCLSP     LTR   R5,R5               IF SYSPRINT NOT OPEN\n         BZ    EXIT                  SKIP CLOSE\n         MVI   CLOSE,X'80'\n         CLOSE ((R5)),MF=(E,CLOSE)\n         LR    R4,R5\n         BAL   R6,FREEPOOL\n         SPACE\nEXIT     L     R2,RETCODE\n         LR    R1,R13             POINT TO ADDRESS TO FREEMAIN\n         L     R0,WORKSIZ         LENGTH TO FREEMAIN\n         L     R13,4(,R13)        RESTORE ORIGINAL R13\n         FREEMAIN R,A=(1),LV=(0)\n*        DROP  R9\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\nFREEPOOL FREEPOOL (R4)\n         BR    R6\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DCB OPEN EXIT FOR SYSPRINT                                  *\n*                                                                     *\n*         SET ATTRIBUTES IF NEEDED FOR SYSOUT OR TERMINAL OR DUMMY    *\n*                                                                     *\n***********************************************************************\n         SPACE\nPRTEXIT  CLI   RECFM(R1),0         IF NO RECFM\n         BNE   *+8                   THEN\n         MVI   RECFM(R1),X'94'       SET RECFM=FBA\n         TM    RECFM(R1),X'C0'     IF RECFM U\n         BO    PRTEXBL               GO CHECK BLKSI\n         TM    RECFM(R1),X'10'     IF RECFM INDICATES BLOCKED\n         BZ    PRTEXBL               THEN\n         CLC   LRECL(2,R1),=H'0'     IF NO LRECL\n         BNE   PRTEXBL                 THEN\n         CLC   BLKSI(2,R1),=H'0'       IF BLKSI IS ZERO\n         BE    PRTEXLR                   THEN USE LRECL 121\n         MVC   LRECL(2,R1),BLKSI(R1)   ELSE USE BLKSI AS LRECL\n         B     PRTEXBL\nPRTEXLR  MVC   LRECL(2,R1),=H'121' USE LRECL 121\nPRTEXBL  CLC   BLKSI(2,R1),=H'0'   IF NO BLKSI\n         BNE   PRTEXBR               THEN\n         MVC   BLKSI(2,R1),=H'121'   USE BLKSI 121\n         TM    RECFM(R1),X'C0'       IF RECFM U\n         BO    PRTEXBR                 DONE\n         TM    RECFM(R1),X'40'       IF RECFM V\n         BZ    PRTEXBR                 THEN\n         MVC   BLKSI(2,R1),=H'125'     USE BLKSI 125\nPRTEXBR  BR    R14\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DCB OPEN ABEND EXIT FOR SYSUT1                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nUT1ABEND EQU   *\n         L     R8,0(,R1)           GET COMPLETION CODE\n         N     R8,=A(X'FFF0FF00')\n         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND\n         BE    UT1MEMBR            YES, BRANCH\n         MVI   4(R1),0             NO, ABNORMALLY TERMINATE\n         BR    R14\nUT1MEMBR OI    STATUS,X'10'        INDICATE MEMBER NOT FOUND\n         MVI   3(R1),4             IGNORE THE ABEND\n         BR    R14\n         DROP  R9\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DATA AREAS                                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         DC    0D'0'\nWTM00    WTO   'EMP000I EMPTYTST - RC = 00 <DSN> IS NOT EMPTY',        +\n               ROUTCDE=(4,11),MF=L\nWTM00L   EQU   *-WTM00\nWTM04    WTO   'EMP004I EMPTYTST - RC = 00 <DSN> IS EMPTY',            +\n               ROUTCDE=(4,11),MF=L\nWTM04L   EQU   *-WTM04\nWTM08    WTO   'EMP008I EMPTYTST - RC = 08 <DSN> MEMBER NOT FOUND',    +\n               ROUTCDE=(4,11),MF=L\nWTM08L   EQU   *-WTM08\nWTM12    WTO   'EMP012I EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISS+\n               ING',                                                   +\n               ROUTCDE=(4,11),MF=L\nWTM12L   EQU   *-WTM12\n         DC    0D'0'\n         PRINT NOGEN\nUT1DCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),EODAD=0\nUT1DCBL  EQU   *-UT1DCB\nPRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),EODAD=0\nPRTDCBL  EQU   *-PRTDCB\nMSG08    DC    AL2(MSG08L,0),C' EMPTYTST - RC = 08 MEMBER NOT FOUND'\nMSG08L   EQU   *-MSG08\nMSG12    DC    AL2(MSG12L,0),C' EMPTYTST - RC = 12 ERROR OCCURRED - SYS+\n               UT1 MISSING'\nMSG12L   EQU   *-MSG12\n         DC    0D'0'\nWORKD    DSECT\n         DS    18F\nDOUBLE   DS    D\nRETCODE  DS    F\nOPTC     DS    C\nOPTQ     DS    C\nOPTW     DS    C\nSTATUS   DS    C\nNJOB     DS    CL8                     JOB NAME                  SG1801\nPSTN     DS    CL8                     STEP NAME                 SG1801\nJSTN     DS    CL8                     JOB STEP NAME FOR PROCS   SG1801\nUT1DD    DS    CL8\nPRTDD    DS    CL8\nDEVAREA  DS    2F\nOPEN     DS    F\nCLOSE    DS    F\nPRTEXTA  DS    F\nEXITLST  DS    2F\nRDJFW    DS    F\nWORKINI  EQU   *-WORKD\nMSGLINE  DS    CL121                                             SG1801\nTIMEL    TIME  LINKAGE=SYSTEM,MF=L\nSAVE1402 DS    6F                 Extra fullword for safety             08376\nTIMED    DS    CL7                                                      08377\nDATED    DS    CL9                                                      08378\nDATETIME DS    4F                                                       08379\n         ORG   DATETIME                                                 08380\nTIME     DS    CL4                                                      08381\n         DS    CL4                                                      08382\nDATE     DS    CL5                                                      08383\n         DS    CL3                                                      08384\nHEADDLIT DS    0CL31              Literal for headings - date and time  08385\n         DC    CL6'Today:'                                              08386\n         DC    CL2' '                                                   08387\nHEADDATE DC    CL23' '                                                  08388\nUT1DCBW  DS    0F,(UT1DCBL)X\nPRTDCBW  DS    0F,(PRTDCBL)X\nWTOW     DS    0F,CL120 LONGEST WTO MSG\nPBUF     DS    144C     LONGEST LRECL 137, ROUNDED TO 8-BYTE MULTIPLE\nJFCB     DS    0F,176C\nMSGW     DS    0F,CL112 LONGEST MSG IS 108, ROUNDED TO 8-BYTE MULTIPLE\n         DS    0D\nWORKLEN  EQU   *-WORKD\n         SPACE\nEODAD    EQU   33\nRECFM    EQU   36\nEXLSA    EQU   37\nDDNAM    EQU   40\nOFLGS    EQU   48\nBLKSI    EQU   62\nLRECL    EQU   82\n         SPACE\n*DJFCB   DSECT\n*        IEFJFCBN\n         SPACE\n         YREGS                                                   SG1801\n         END   ENTRY0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EMPTYT01": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Q\\x01\\x18\\x03\\x7f\\x01\\x18\\x03\\x7f\\x13\\x11\\x04\\x1b\\x04\\x19\\x04\\x08\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-02-06T00:00:00", "modifydate": "2018-02-06T13:11:51", "lines": 1051, "newlines": 1049, "modlines": 1032, "user": "GERHARD"}, "text": "TEMPT    TITLE 'BATCH PROGRAM TO TELL IF A DATASET IS EMPTY'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*    PROGRAM :  EMPTYTST                                              *\n*                                                                     *\n*    FUNCTION:  FIND OUT IF A DATASET OR A PDS MEMBER IS EMPTY.       *\n*                                                                     *\n*    ACTION  :  RETURNS CODE = 0 IF DATASET IS NOT EMPTY.             *\n*               RETURNS CODE = 4 IF DATASET IS EMPTY.                 *\n*               JCL ERROR IF A SEQUENTIAL DATASET (DSORG=PS)          *\n*                 DOES NOT EXIST.                                     *\n*               RETURNS CODE = 8 IF PDS MEMBER DOES NOT EXIST.        *\n*                 IT SHOWS THE S013-18 MESSAGE BUT BYPASSES IT.       *\n*               RETURNS CODE = 12 UPON SERIOUS I/O ERROR.             *\n*                                                                     *\n*    SEE BELOW FOR FURTHER DOCUMENTATION.                             *\n*                                                                     *\n*    DATE WRITTEN:   JANUARY 21 2018                                  *\n*                                                                     *\n*    DATE UPDATED:   FEBRUARY 6 2018                                  *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                        HOW IT WORKS:                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* READ THE FIRST RECORD OF THE DATA SET, PDS MEMBER, OR PDSE MEMBER   *\n* THAT IS ALLOCATED TO DDNAME SYSUT1.                                 *\n* IF THE READ IS SUCCESSFUL, EXIT WITH RETURN CODE 0.                 *\n* IF THE READ HITS END-OF-FILE, EXIT WITH RETURN CODE 4,              *\n* WHICH MEANS THE DATA SET OR MEMBER IS EMPTY.                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF SYSPRINT IS ALLOCATED, A MESSAGE IS WRITTEN TO SYSPRINT.         *\n* OTHER POSSIBLE RETURN CODES ARE 12 FOR MISSING SYSUT1 DDNAME        *\n* OR 8 FOR MEMBER DOES NOT EXIST.                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* SAMPLE JCL :                                                        *\n*                 //EXEC PGM=EMPTYTST                                 *\n*                 //SYSPRINT DD SYSOUT=*                              *\n*                 //SYSUT1 DD DSN=A.B.C,DISP=SHR                      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*         OPTIONS IN THE PARM FIELD.   PARM = W Q C                   *\n*                                                                     *\n* THE PARM FIELD IS CHECKED FOR THE PRESENCE OF CERTAIN CHARACTERS    *\n* WHICH ALLOW OPTIONS TO BE SPECIFIED.                                *\n* IF MORE THAN ONE OPTION IS USED, THE CHARACTERS DO NOT NEED TO      *\n* BE SEPARATED, OR IN ANY SPECIFIC ORDER.                             *\n* IF THE PARM FIELD CONTAINS THE CHARACTER \"W\" THEN THE PROGRAM       *\n* WILL ISSUE A WTO WITH ONE OF THESE MESSAGES:                        *\n*                                                                     *\n*   EMP000I EMPTYTST - RC = 00 <DSN> ON VOLUME <VOL> IS NOT EMPTY     *\n*   EMP004I EMPTYTST - RC = 04 <DSN> ON VOLUME <VOL> IS EMPTY         *\n*   EMP008I EMPTYTST - RC = 08 <DSN> ON VOLUME <VOL> WAS NOT FOUND    *\n*   EMP012I EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISSING        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"W\" AND THE LETTER \"C\"        *\n* (FOR CONDITIONAL) THEN IT WILL ISSUE A WTO ONLY IF THE RETURN       *\n* CODE IS NOT ZERO.                                                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"Q\" (FOR QUIET)               *\n* THEN THE PROGRAM WILL NOT OPEN SYSPRINT EVEN IF IT IS ALLOCATED.    *\n* THIS IS INTENDED FOR RUNNING THE PROGRAM UNDER TSO WHEN A USER      *\n* PREFERS NOT TO SEE A MESSAGE EVEN THOUGH SYSPRINT MIGHT BE          *\n* ALLOCATED TO THE TERMINAL.                                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* DDNAME SYSPRINT IS OPTIONAL                                         *\n* EVEN IF DDNAME SYSPRINT IS ALLOCATED, THE PROGRAM WILL NOT          *\n* OPEN IT OR WRITE TO IT IF PARM=Q IS SPECIFIED.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* USAGE NOTE:                                                         *\n*                                                                     *\n* PRIOR TO Z/OS 1.11 WHEN A PS DATA SET THAT WAS NOT SMS-MANAGED WAS  *\n* FIRST CREATED, NO END-OF-FILE MARK WAS WRITTEN AT THE BEGINNING     *\n* OF THE DATA SET. IF A PROGRAM (LIKE THIS ONE, FOR EXAMPLE)          *\n* READ THE DATA SET BEFORE ANYTHING WAS WRITTEN TO IT, IT MIGHT       *\n* SUCCESSFULLY READ WHAT WAS THERE BEFORE THE DATA SET WAS CREATED,   *\n* AS IF THE DATA SET WERE NOT EMPTY.                                  *\n* OR IT MIGHT GET A READ ERROR BECAUSE THE RECORD THAT WAS THERE      *\n* BEFORE THE DATA SET WAS CREATED DOESN'T HAVE THE SAME RECFM, LRECL, *\n* OR BLOCK SIZE AS THE DATA SET THAT WAS CREATED.                     *\n* FOR SUCH SITUATIONS, A PROGRAM THAT CHECKS FOR AN EMPTY PS DATA SET *\n* COULD STILL DETECT THAT IT WAS EMPTY BY READING THE FORMAT 1 DSCB   *\n* FROM THE VTOC AND CHECKING THE DS1LSTAR FIELD FOR ZERO.             *\n* ON SYSTEMS RUNNING Z/OS 1.11 OR LATER, THIS IS NOT NECESSARY.       *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     IMPROVED MESSAGES                          SG1801\n* I DID A FEW OF THESE.  ALL CODES 0, 4, 8 HAVE THE DSNAME       SG1801\n* AND VOLSER INCLUDED.  ONLY ONE THAT DOESN'T IS CODE 12.        SG1801\n* A SEQUENTIAL DATASET (DSORG=PS) IF NON-EXISTENT, SHOULD        SG1801\n* GET A JCL ERROR.  IF A PDS MEMBER ISN'T THERE, THEN THE        SG1801\n* S013-18 ABEND GETS INTERCEPTED, AND A CODE = 8 IS SHOWN.       SG1801\n* MOST OF THIS WORK WAS DONE BY CBTUSER.                         SG1801\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* Changes:  (I can't resist meddling - sorry)                         *\n*  2018-02-04  GYP  Changed code to assemble and execute under MVS    *\n*                   Avoid 013-18 abend on missing member              *\n*                   Avoid 001 on uninitialized MVS DS - test DS1LSTAR *\n*                   Test PDS for logical empty (no members)           *\n*                   Improved(?) message processing                    *\n*                   Require both SYS1.MACLIB and SYS1.(A)MODGEN for   *\n*                     clean assembly                                  *\n*                   Replaced new format TIME with MVS compatible code *\n*                   Handle PARM correctly for TSO CP aand batch       *\n*                   Fixed 002 abend for SYSPRINT RECFM=V..            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         MACRO ,                                                GP18035\n&NM      #PUT  &LN                                              GP18035\n.*                                                              GP18035\n.*   THIS MACRO REPLACES THE ORIGINAL PUT REQUESTS. INSTEAD IT  GP18035\n.*   CALLS A SUBROUTINE THAT ADAPTS THE RECORDS TO F/V/U FORMAT GP18035\n.*                                                              GP18035\n         LCLC  &LBL                                             GP18035\n         LCLA  &K                                               GP18035\n&K       SETA  K'&LN                                            GP18035\n&LBL     SETC  '&NM'                                            GP18035\n         AIF   (&K LT 3).GOLA                                   GP18035\n         AIF   ('&LN'(1,1) NE '(' OR '&LN'(2,1) EQ '(').GOLA    GP18035\n         AIF  ('&LN'(&K,1) NE ')' OR '&LN'(&K-1,1) EQ ')').GOLA GP18035\n         AIF   ('&LN' EQ '(1)' OR '&LN' EQ '(R1)').GOBAL        GP18035\n&LBL     LR    R1,&LN(1)                                        GP18035\n&LBL     SETC  ''                                               GP18035\n         AGO   .GOBAL                                           GP18035\n.GOLA    ANOP  ,                                                GP18035\n&LBL     LA    R1,&LN                                           GP18035\n&LBL     SETC  ''                                               GP18035\n.GOBAL   ANOP  ,                                                GP18035\n&LBL     BAL   R14,GOPRINT                                      GP18035\n         MEND  ,                                                GP18035\n         SPACE 2\n         PUNCH ' ORDER EMPTYTST(P) ' MAKE DUMPS EASIER TO READ ***DEB\nEMPTYTST CSECT ,\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)\n         DC    AL1(9),CL9'EMPTYTST'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nBEGIN    STM   R14,R12,12(13)\n         LR    R10,R15\n         LR    R2,R1               SAVE POINTER TO PARM AND DDNAMES\n         L     R0,WORKSIZ\n         GETMAIN R,LV=(0)\n*DEBUG*  GETMAIN RU,LV=WORKSIZ,BNDRY=PAGE ***DEBUG - EASIER ADDRESSES\n         LR    R9,R1\n         USING WORKD,R9\n         XC    0(WORKINI,R1),0(R1)\n         ST    R13,4(,R9)          OLD ADDRESS IN NEW SAVE AREA\n         ST    R9,8(,R13)          NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R9\n         LA    R15,12\n         ST    R15,RETCODE         INITIALLY SET RETCODE TO 12\n         SPACE 1\n***********************************************************************\n*                    GET SYSTEM DATE AND TIME                         *\n***********************************************************************\n         STM   R14,R2,SUBSAVE                                   GP18035\n         AGO   .MVSDATE                                         GP18035\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY,          x\n               MF=(E,TIMEL)                                      SG1801\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         AGO   .COMDATE\n.MVSDATE ANOP  ,                                                GP18035\n         MVI   HEADDATE-1,C' '                                  GP18035\n         MVC   HEADDATE,HEADDATE-1   BLANK UNUSED BYTES         GP18035\n         MVI   DATETYPE,1         request MMDDYYYY              GP18035\n         MVI   TIMETYPE,2         request packed time           GP18035\n         OI    DATETYPE,DATLOCAL  IF ON, ADJUST FOR LOCAL TIME  GP18035\n         BAL   R14,SUBSTCK                                      GP18035\n         UNPK  DB(9),PLDATE(5)    CONVERT HEX TO UNPACKED       GP18035\n         MVI   DB+8,C'/'          DATE SEPARATOR                GP18035\n         MVC   HEADDATE(8),=AL1(0,1,8,2,3,8,6,7)                GP18035\n         TR    HEADDATE(8),DB     FORMAT DATE                   GP18035\n         UNPK  DB(9),PLTIME(5)    CONVERT HEX TO UNPACKED       GP18035\n         MVI   DB+8,C':'          DATE SEPARATOR                GP18035\n         MVC   HEADDATE+12(8),=AL1(0,1,8,2,3,8,6,7)             GP18035\n         TR    HEADDATE+12(8),DB     FORMAT DATE                GP18035\n.COMDATE LM    R14,R2,SUBSAVE                                   GP18035\n***********************************************************************\n*                                                                     *\n*         CHECK PARM FOR Q (QUIET, DON'T OPEN SYSPRINT)               *\n*                     OR W (ISSUE WTO)                                *\n*                     OR C (ISSUE WTO ONLY IF EMPTY OR ERROR)         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*LOCAL*  PARMLOAD R2,PTR=R2       GET PGM OR TSO CP PARM        GP18035\n         L     R2,0(,R2)                                        GP18035\n         LH    1+R2,0(,R2)   GET LENGTH                         GP18035\n         LTR   1+R2,1+R2     ANY                                GP18035\n         BZ    PARMLEN         NO; DON'T TEST TEXT              GP18035\n         CLI   2(R2),0       TSO CP CALL?                       GP18035\n         BH    PARMLEN         NO, USE OS FORM                  GP18035\n         OI    STATUS,FGSCP  SET TSO CP FLAG                    GP18035\n         SH    1+R2,=H'4'    ALLOW FOR LENGTH LENGTH            GP18035\n         SH    1+R2,2(,R2)   ALLOW FOR PARSED COMMAND NAME      GP18035\n         AH    R2,2(,R2)     ALLOW FOR PARSED COMMAND NAME      GP18035\n         LA    R2,2(,R2)     SKIP SECOND LENGTH                 GP18035\nPARMLEN  LA    R2,2(,R2)     SKIP FIRST LENGTH                  GP18035\n         LTR   R3,R3              IF NO PARM                    GP18035\n         BZ    PARMDONE             SKIP PARM                   GP18035\nPARMLOOP CLI   0(R2),C'Q'          Q FOR QUIET, IGNORE SYSPRINT\n         BNE   PARMW\n         MVI   OPTQ,C'Q'\n         B     PARMNEXT\nPARMW    CLI   0(R2),C'W'          W FOR ISSUE WTO\n         BNE   PARMC\n         MVI   OPTW,C'W'\n         B     PARMNEXT\nPARMC    CLI   0(R2),C'C'          C FOR ISSUE WTO IF RC NOT = 0\n         BNE   PARMNEXT\n         MVI   OPTC,C'C'\nPARMNEXT LA    R2,1(,R2)           POINT TO NEXT CHAR IN PARM\n         BCT   R3,PARMLOOP         LOOP USING PARM LENGTH IN R0\nPARMDONE DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*     GET JOBNAME STEPNAME AND PROCSTEP NAME FOR SYSPRINT REPORT      *\n*                                                                     *\n***********************************************************************\n         L     R1,X'21C'           PSATOLD                       SG1801\n         L     R1,12(,R1)          TIOT                          SG1801\n         MVC   NJOB(L'NJOB+L'PSTN+L'JSTN),0(R1)  JOB / STEP / JOBSTEP\n***********************************************************************\n*                                                                     *\n*         CHECK FOR DDNAME OVERRIDES                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*         THIS USES THE SAME CONVENTION AS UTILITIES LIKE IEBGENER.\n*         SYSPRINT OVERRIDE IS 6TH IN THE LIST OF DDNAMES\n*         SYSUT1   OVERRIDE IS 8TH IN THE LIST OF DDNAMES\n         TM    STATUS,FGSCP  PARM IN TSO CP FORMAT?             GP18035\n         BNZ   DDX             YES; NO OVERRIDE                 GP18035\n         TM    0(R2),X'80'         IF DDNAME OVERRIDES NOT PRESENT\n         BO    DDX                    SKIP OVERRIDES\n         L     R1,4(,R2)           POINT TO DDNAME LIST\n         LA    R1,0(,R1)           CLEAR HIGH 8 BITS\n         LTR   R1,R1               IF POINTER IS ZERO\n         BZ    DDX                    SKIP OVERRIDES\n         CLI   0(R1),0             IF LENGTH > 255\n         BNE   DDX                    SKIP OVERRIDES\n         CLI   1(R1),8*6           IF LIST NOT LONG ENOUGH FOR 6 DD'S\n         BL    DDX                    SKIP OVERRIDE\n         CLI   42(R1),0  (8*5+2)   IF SLOT EMPTY\n         BE    DDUT1                  SKIP OVERRIDE\n         MVC   PRTDD,42(R1)        COPY DDNAME FOR SYSPRINT\nDDUT1    CLI   1(R1),8*8           IF LIST NOT LONG ENOUGH FOR 8 DD'S\n         BL    DDX                    SKIP OVERRIDE\n         CLI   58(R1),0  (8*7+2)   IF SLOT EMPTY\n         BE    DDX                    SKIP OVERRIDE\n         MVC   UT1DD,58(R1)        COPY DDNAME FOR SYSUT1\nDDX      DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         OPEN SYSPRINT IF DDNAME SYSPRINT IS ALLOCATED               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         SLR   R4,R4               ZERO R4 TO INDICATE NO SYSUT1\n         SLR   R5,R5               ZERO R5 TO INDICATE NO SYSPRINT\n         CLI   OPTQ,C'Q'           IF THERE WAS A Q IN PARM\n         BE    PRTX                  SKIP SYSPRINT\n         LA    R5,PRTDCBW\n         MVC   0(PRTDCBL,R5),PRTDCB\n         CLI   PRTDD,0             IF SYSPRINT DDNAME OVERRIDE\n         BE    *+10                  THEN\n         MVC   DDNAM(8,R5),PRTDD     CHANGE DDNAME IN DCB\n         LA    R1,DDNAM(,R5)       POINT TO DDNAME FOR DEVTYPE\n         DEVTYPE (1),DEVAREA       CHECK FOR DDNAME IN TIOT\n         LR    R0,R5               SAVE R5\n         SLR   R5,R5               ZERO R5 TO INDICATE NO SYSPRINT\n         LTR   R15,R15             IF DEVTYPE SAYS DDNAME NOT IN TIOT\n         BNZ   PRTX                  DON'T USE SYSPRINT\n         LR    R5,R0               RESTORE R5 AND USE SYSPRINT\n         LA    R15,PRTEXIT         GET ADDRESS OF PRTEXIT\n         ST    R15,PRTEXLST        STORE ADDRESS IN PRTEXLST\n         LA    R15,PRTEXLST        GET ADDRESS OF PRTEXLST\n         MVI   0(R15),X'85'        MARK AS OPEN EXIT AND LAST ENTRY\n         STCM  R15,7,EXLSA(R5)     EXLST=PRTEXLST, PRTEXLST -> PRTEXIT\n         MVI   OPENOUT,X'80'                                    GP18035\n         OPEN  ((R5),OUTPUT),MF=(E,OPENOUT)                     GP18035\n*        TM    OFLGS(R5),X'10'     IF OPEN FAILED (DDNAME NOT PRESENT)\n*        BNO   EXIT                  EXIT\n*---------------------------------------------------------------------*\n*   The printer output characteristics were either defaulted, or set  *\n*     by the user on the DD.                                          *\n*   To accommodate all reasonable formats, we set variable PRTIX to   *\n*     0 for RECFM=U, to 4 for F, and 8 for V or D (0 offset for len). *\n*   For easier processing, we set the maximum data length into a      *\n*     full-word variable PRTMXL (avoid LRECL=X complications)         *\n*---------------------------------------------------------------------*\n         SLR   R14,R14                                          GP18035\n         SLR   R15,R15            PRESET FOR RECFM=U            GP18035\n         ICM   R14,3,BLKSI(R5)    LOAD MAX BLOCKSIZE FOR U      GP18035\n         TM    RECFM(R5),X'C0'    U ?                           GP18035\n         BO    STPRTF               SET INDEX = 0               GP18035\n         ICM   R14,3,LRECL(R5)    LOAD MAX RECORD LENGTH        GP18035\n         LA    R15,4              PRESET FOR F                  GP18035\n         TM    RECFM(R5),X'80'    F ?                           GP18035\n         BNZ   STPRTF               YES                         GP18035\n         LA    R15,8              SET FOR V OR D                GP18035\n         SH    R14,=H'4'          SET MAX DATA LENGTH           GP18035\nSTPRTF   STH   R15,PRTIX          SET PRINT BRANCH INDEX        GP18035\n         ST    R14,PRTMXL         SET MAX PRINTER DATA LENGTH   GP18035\nPRTX     DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         OPEN SYSUT1                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LA    R4,UT1DCBW\n         MVC   0(UT1DCBL,R4),UT1DCB\n         CLI   UT1DD,0             IF SYSUT1 DDNAME OVERRIDE\n         BE    *+10                  THEN\n         MVC   DDNAM(8,R4),UT1DD     CHANGE DDNAME IN DCB\n         LA    R1,DDNAM(,R4)       POINT TO DDNAME FOR DEVTYPE\n         DEVTYPE (1),DEVAREA       CHECK FOR DDNAME IN TIOT\n         LR    R0,R4               SAVE R4\n         SLR   R4,R4               ZERO R4 TO INDICATE NO SYSUT1\n         LTR   R15,R15             IF DEVTYPE SAYS DDNAME NOT IN TIOT\n         BNZ   PRNT                  DON'T USE SYSPRINT\n         LR    R4,R0               RESTORE R5 AND USE SYSUT1\n         LA    R15,UT1ABEND        POINT TO OPEN ABEND EXIT\n         ST    R15,EXITLST         STORE IN 1ST WORD OF EXITLIST\n         MVI   EXITLST,X'11'       MARK AS OPEN ABEND EXIT (MVS)\n         LA    R15,JFCB            GET ADDRESS OF JFCB\n         ST    R15,EXITLST+4       STORE ADDRESS IN EXITLST 2ND WORD\n         MVI   EXITLST+4,X'87'     MARK AS JFCB PTR AND LAST ENTRY\n         LA    R15,EXITLST         GET ADDRESS OF EXITLST\n         STCM  R15,7,EXLSA(R4)     EXLST=EXITLST, EXITLST -> JFCB\n         MVI   OPEN,X'80'                                       GP18035\n         RDJFCB ((R4)),MF=(E,OPEN)                              GP18035\n         SPACE 1\n*---------------------------------------------------------------------*\n*   For older systems (MVS, MVT) we need to check whether the data    *\n*     set is empty by looking at DS1LSTAR (unless new-fangled type)   *\n*                                                                     *\n*   While we have the DSCB, we can also check for PS vs. PO, and      *\n*     do a member look-up with a BPAM FIND or BLDL.                   *\n*   Use of a DCB abend exit is undesirable in an environment where    *\n*     this module is called as a subroutine (e.g., the DCB could be   *\n*     left in a half-open uncloseable state)                          *\n*---------------------------------------------------------------------*\n         L     R14,PATCAM         GET THE CAMLST FLAGS          GP18035\n         LA    R15,JFCBDSNM       POINT TO THE DS NAME          GP18035\n         LA    R0,JFCBVOLS        POINT TO THE FIRST SERIAL     GP18035\n         LA    R1,DS1FMTID        POINT TO THE DESIRED RETURN   GP18035\n         STM   R14,R1,CAMLIST     COMPLETE THE LIST             GP18035\n         OBTAIN CAMLIST           GET THE DSCB                  GP18035\n         LTR   R15,R15            SUCCESSFUL ?                  GP18035\n         BH    OPFAIL               NO                          GP18035\n         TM    FM1SMSFG,X'07'     NEWFANGLED ?                  GP18035\n         BNZ   OPSEQ                YES; LSTAR USELESS          GP18035\n         TM    FM1SMSFG,X'08'     PDS/E?                        GP18035\n         BNZ   OPPO                 YES; LSTAR USELESS          GP18035\n         CLI   DS1DSORG+1,0       OLD NEWFANGLED STUFF ?        GP18035\n         BNZ   OPSEQ                YES                         GP18035\n         MVI   RETCODE+3,4        PRESET RETURN CODE FOR EMPTY  GP18035\n         ICM   R1,7,DS1LSTAR      ANYTHING IN LSTAR?            GP18035\n         BZ    PRNT                 SKIP OPEN, ETC.             GP18035\n         TM    DS1DSORG,254-DS1DSGPS-DS1DSGPO  NON-SEQUENTIAL ? GP18035\n         BNZ   OPSEQ              MAY BOMB                      GP18035\n         TM    DS1DSORG,DS1DSGPS+DS1DSGPO  SEQ OR PO ?          GP18035\n         BZ    OPSEQ              MAY BOMB                      GP18035\n         TM    DS1DSORG,DS1DSGPO  PARTITIONED?                  GP18035\n         BZ    OPSEQ                                            GP18035\n         SPACE 1\nOPPO     LA    R4,PO1DCBW         POINT TO WORKING DCB          GP18035\n         MVC   0(PO1DCBL,R4),PO1DCB   SET FOR                   GP18035\n         CLI   UT1DD,0             IF SYSUT1 DDNAME OVERRIDE    GP18035\n         BE    *+10                  THEN                       GP18035\n         MVC   DDNAM(8,R4),UT1DD     CHANGE DDNAME IN DCB       GP18035\n         LA    R15,EXITLST         EXIT LIST                    GP18035\n         STCM  R15,7,EXLSA(R4)       BUT JFCB NOT USED          GP18035\n         MVI   OPEN,X'80'          OPEN BPAM                    GP18035\n         TM    JFCBIND1,JFCPDS    JFCB WITH MEMBER NAME ?       GP18035\n         BZ    OPPORD               NO; LOOK AT FIRST DE        GP18035\n         NI    JFCBIND1,255-JFCPDS  RESET MEMBER NAME FLAG      GP18035\n         OI    JFCBTSDM,JFCNWRIT    DO NOT WRITE JFCB BACK      BG18036\n         OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEN)                  GP18035\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED               GP18035\n         BZ    OPFAIL                THEN                       GP18035\n*EXTRA*  OI    JFCBIND1,JFCPDS     RESTORE MEMBER NAME FLAG     GP18035\n         FIND  (R4),JFCBELNM,D     LOOK FOR THE MEMBER          GP18035\n         BXH   R15,R15,MEMNTF        NOT FOUND                  GP18035\n         B     OPPOCOM                                          GP18035\nOPPORD   OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEN)                  GP18035\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED               GP18035\n         BZ    OPFAIL                THEN                       GP18035\n         MVC   RDECB(PATDECBL),PATDECB  COPY OPTION BITS        GP18035\n         LA    R2,DEWORK                                        GP18035\n         READ  RDECB,SF,(R4),(R2),256,MF=E                      GP18035\n         CHECK RDECB                                            GP18035\n         CLC   DEWORK(10),=X'000EFFFFFFFFFFFFFFFF'  EMPTY PDS ? GP18035\n         BE    UT1EOF                       YES; SAY SO         GP18035\n         B     UT1NTE             RETURN NOT EMPTY              GP18035\nOPPOCOM  CLOSE MF=(E,OPEN)                                      GP18035\n         SPACE 1\nOPSEQ    LA    R4,UT1DCBW                                       GP18035\n         MVI   OPEN,X'80'\n         OPEN  ((R4),INPUT),MF=(E,OPEN)\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED\n         BNZ   UT1X                  THEN\nOPFAIL   CLOSE MF=(E,OPEN)        JUST IN CASE                  GP18035\n         SLR   R4,R4                 ZERO R4 TO INDICATE NO SYSUT1\n         TM    STATUS,FGSNOMEM       IF IT WAS MEMBER NOT FOUND\n         BZ    PRNT                    THEN\nMEMNTF   MVI   RETCODE+3,8             SET RC TO 8\n         B     PRNT                  SKIP GET\nUT1X     DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         READ FIRST RECORD OR GO TO UT1EOF STRAIGHT FROM GET         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         MVI   RETCODE+3,4         SET RETURN CODE TO 4 FOR EMPTY\n         GET   (R4)\nUT1NTE   MVI   RETCODE+3,0         SET RETURN CODE TO 0 FOR NOT EMPTY\nUT1EOF   DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         ISSUE MESSAGE TO SYSPRINT                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPRNT     LTR   R5,R5               IF SYSPRINT IS NOT OPEN\n         BZ    WTOT                  SKIP MESSAGE\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         BAL   R14,GOCLEAR   CLEAR PRINT LINE; SET RDW          GP18035\n         #PUT  MSGFR              WRITE FRAME                   GP18035\n         LA    R1,MSG12                                         GP18035\n         CLI   RETCODE+3,12       MISSING DD ?                  GP18035\n         BNL   PRTP                 SHOW MSG12                  GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVC   MSGLINE+1(12),MSGFR+4+1                          GP18035\n         MVC   MSGLINE+12(10),=C'PROCESSING'                    GP18035\n         MVC   MSGLINE+12+10+1(44),JFCBDSNM   ADD DATA SET NAME GP18035\n         LA    R1,MSGLINE+12+10+1  START BLANK SCAN             GP18035\n         TRT   0(45,R1),TRTBLANK    FIND END                    GP18035\n         CLI   JFCBELNM,C' '      HAVE A MEMBER OR GDG ?        GP18035\n         BNH   SKIPMEM              NO                          GP18035\n         MVI   0(R1),C'('         FRAME IT                      GP18035\n         MVC   1(8,R1),JFCBELNM   ADD NAME                      GP18035\n         TRT   0(10,R1),TRTBLANK  FIND END                      GP18035\n         MVI   0(R1),C')'         FRAME                         GP18035\n         LA    R1,1(,R1)                                        GP18035\nSKIPMEM  CLI   JFCBVOLS,C' '      ANY SERIAL ?                  GP18035\n         BNH   PRINTDSN             NO; PRINT CURRENT LINE      GP18035\n         MVC   1(2,R1),=C'ON'                                   GP18035\n         MVC   4(6,R1),JFCBVOLS   SHOW WHERE                    GP18035\nPRINTDSN #PUT  MSGRDW             AND PRINT LINE                GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         L     R6,RETCODE                                       GP18035\n         L     R1,MSGTAB(R6)      GET APPROPRIATE MESSAGE       GP18035\nPRTP     #PUT  (1)                                              GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         #PUT  MSGFR                                            GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(15),=C'EMPTYTST - V1.2'                 SG1801\n         MVC   MSGLINE+20(19),=C'Time of Execution: '            SG1801\n         MVC   MSGLINE+40(23),HEADDATE                           SG1801\n         #PUT  MSGRDW                                           GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(15),=C'EMPTYTST - V1.2'                 SG1801\n         MVC   MSGLINE+20(9),=C'Jobname: '                       SG1801\n         MVC   MSGLINE+30(8),NJOB                                SG1801\n         MVC   MSGLINE+40(9),=C'Stepname:'                       SG1801\n         MVC   MSGLINE+51(8),PSTN                                SG1801\n         MVC   MSGLINE+61(9),=C'Jobstep: '                       SG1801\n         MVC   MSGLINE+71(8),JSTN                                SG1801\n         #PUT  MSGRDW                                           GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         ISSUE MESSAGE TO CONSOLE IF PARM=W                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nWTOT     CLI   OPTW,0              IF PARM HAS NO W\n         BE    WTOX                  SKIP WTO\n         CLI   OPTC,0              IF PARM HAS W AND C\n         BE    WTOK                  AND\n         CLI   RETCODE+3,0           RETCODE IS 0\n         BE    WTOX                  SKIP WTO\nWTOK     MVI   WTOW,X'40'          CLEAR OUTPUT AREA            GP18035\n         MVC   WTOW+1(L'WTOW-1),WTOW                            GP18035\n         L     R6,RETCODE                                       GP18035\n         L     R7,SELWTO(R6)       POINT TO MESSAGE HEAD        GP18035\n         L     R8,SUFWTO(R6)       POINT TO MESSAGE END         GP18035\n         LH    R14,0(,R7)          GET TEXT LENGTH              GP18035\n         BCTR  R14,0                                            GP18035\n         EX    R14,EXMVCWTO        MOVE TEXT TO WORK AREA       GP18035\n         LTR   R8,R8               IS THERE A SUFFIX?           GP18035\n         BZ    WTOI                  NO; WTO THE MESSAGE        GP18035\n         LA    R1,WTOW+3(R14)      START OF INSERTION(S)        GP18035\n         MVC   0(44,R1),JFCB       ADD DSN TO MESSAGE - JFCBDSNM\n         TRT   0(45,R1),TRTBLANK   POSITION TO END              GP18035\n         CLI   JFCB+44,C' '        JFCBELNM (MEMBER OR GDG)     GP18035\n         BNH   WTO5                  SKIP IF NONE\n         MVI   0(R1),C'('\n         MVC   1(8,R1),JFCB+44     JFCBELNM (MEMBER NAME)\n         TRT   0(10,R1),TRTBLANK   POINT TO END OF MEMBER       GP18035\n         MVI   0(R1),C')'\n         LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\nWTO5     CLI   JFCB+118,C' '       IF VOLUME IS BLANK -JFCBVOLS\n         BE    WTO5A                SKIP VOLUME (DUMMY)\n         MVC   1(9,R1),=C'ON VOLUME'\n         MVI   10(R1),X'40'                                      SG1801\n         MVC   11(6,R1),JFCB+118   VOLUME FROM JFCB JFCBVOLS\n         LA    R1,17(,R1)          POINT PAST RIGHTMOST NONBLANK\n         MVI   17(R1),X'40'                                      SG1801\nWTO5A    LH    R14,0(,R8)          GET LENGTH OF SUFFIX - 1     GP18035\n         EX    R14,EXMVCSUF        MOVE IT                      GP18035\n         LA    R0,WTOW             WORK AREA ADDRESS            GP18035\n         SR    R1,R0               LENGTH LESS SUFFIX           GP18035\n         LA    R1,2(R14,R1)        WTO LENGTH                   GP18035\n         STH   R1,WTOW             STASH COMPLETE LENGTH        GP18035\n         LA    R1,WTOW(R1)         RESTORE END ADDRESS          GP18035\nWTOI     DS    0H\n         MVC   0(4,R1),WTMROUT     DESCRIPTOR AND ROUTING CODES GP18035\n         WTO   MF=(E,WTOW)\nWTOX     B     CLSE                                             GP18035\n         SPACE 1\nEXMVCWTO MVC   WTOW(*-*),0(R7)     MOVE LENGTH AND TEXT         GP18035\nEXMVCSUF MVC   1(*-*,R1),2(R8)     MOVE SUFFIX                  GP18035\nSELWTO   DC    A(WTM00,WTM04,WTM08,WTM12)  MESSAGE TEXT         GP18035\nSUFWTO   DC    A(WTS00,WTS04,WTS08,0)      MESSAGE SUFFIX       GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         CLOSE SYSUT1                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLSE     LTR   R4,R4               IF SYSUT1 NOT OPEN\n         BZ    CLSP                  SKIP CLOSE\n         CLOSE MF=(E,OPEN)                                      GP18035\n         BAL   R6,FREEPOOL\n         SPACE 1\nCLSP     LTR   R5,R5               IF SYSPRINT NOT OPEN\n         BZ    EXIT                  SKIP CLOSE\n         CLOSE MF=(E,OPENOUT)                                   GP18035\n         LR    R4,R5\n         BAL   R6,FREEPOOL\n         SPACE 1\nEXIT     L     R2,RETCODE\n         LR    R1,R13             POINT TO ADDRESS TO FREEMAIN\n         L     R0,WORKSIZ         LENGTH TO FREEMAIN\n         L     R13,4(,R13)        RESTORE ORIGINAL R13\n         FREEMAIN R,A=(1),LV=(0)\n*        DROP  R9\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE 1\nFREEPOOL TM    BUFCA+2(R4),1      FREEPOOLED BEFORE?            GP18035\n         BNZR  R6                   YES; DON'T DO IT AGAIN      GP18035\n         ICM   R1,7,BUFCA(R4)     DIRTY POOL ?                  GP18035\n         BZR   R6                   YES; DON'T ABEND (30A/90A)  GP18035\n         FREEPOOL (R4)\n         BR    R6\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   PRINT SUBROUTINE                                                  *\n*    INPUT: R1 : AL2(LEN+4,0),CC,TEXT(<=120)                          *\n*   BUILDS APPROPRIATE RECORD IN DCB BUFFER                           *\n*    FOR MACHINE CODE, USES X'09' WRITE/SPACE                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGOPRINT  STM   R14,R7,SUBSAVE                                   GP18035\n         L     R3,PRTMXL     GET MAXIMUM DATA LENGTH            GP18035\n         LH    R7,0(,R1)     GET CALLER'S LENGTH                GP18035\n         SH    R7,=H'4'        CALLER'S RDW                     GP18035\n         LA    R6,4(,R1)     SKIP RDW                           GP18035\n         TM    RECFM(R5),X'06'  CONTROL CHARACTER               GP18035\n         BNZ   GOPRINTA                                         GP18035\n         LA    R6,1(,R6)     SKIP CC                            GP18035\n         SH    R7,=H'1'      NO CC                              GP18035\nGOPRINTA CLI   PRTIX,4       TEST RECFM                         GP18037\n         BE    GOPRINTB        FOR F, KEEP DCBLRECL             GP18037\n         CR    R3,R7         KEEP THE MINIMUM                   GP18035\n         BNH   *+6                                              GP18035\n         LR    R3,R7         DESIRED DATA LENGTH                GP18035\n         STH   R3,LRECL(R5)  PLACE RECORD LENGTH INTO DCB       GP18035\nGOPRINTB PUT   (R5)          GET A RECORD SPACE                 GP18035\n         LR    R2,R1         PRESET OUTPUT ADDRESS              GP18035\n         ICM   R7,8,=X'40'   REQUEST BLANK FILL                 GP18035\n         LH    R15,PRTIX     GET BRANCH INDEX                   GP18035\n         B     GOPRINTT(R15)   HANDLE BY RECFM TYPE             GP18035\nGOPRINTT  B    GOPRTF        REALLY U                           GP18035\n          B    GOPRTF                                           GP18035\n*NEXT*    B    GOPRTV                                           GP18035\nGOPRTV   LA    R0,4(,R3)     LENGTH WITH RDW                    GP18035\n         SLL   R0,16         POSITION HIGH                      GP18035\n         STCM  R0,15,0(R1)   BUILD RDW                          GP18035\n         LA    R2,4(,R1)                                        GP18035\n         LR    R1,R2         FOR MCC                            GP18035\nGOPRTF   MVCL  R2,R6         MOVE TEXT WITH FILL                GP18035\n         TM    RECFM(R5),X'02'  MCC?                            GP18035\n         BZ    GOPRINTX           NO; DONE                      GP18035\n         MVI   0(R1),X'09'   WRITE/SPACE MCC                    GP18035\nGOPRINTX LM    R14,R7,SUBSAVE                                   GP18035\n         SPACE 1\n*---------------------------------------------------------------------*\n*   Clear print line for next user                                    *\n*---------------------------------------------------------------------*\nGOCLEAR  MVI   MSGLINE,C' '                                     GP18035\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE  CLEAR PRINT LINE GP18035\n         MVC   MSGRDW(4),=AL2(L'MSGLINE+4,0)                    GP18035\n         BR    R14                                              GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DCB OPEN EXIT FOR SYSPRINT                                  *\n*                                                                     *\n*         SET ATTRIBUTES IF NEEDED FOR SYSOUT OR TERMINAL OR DUMMY    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         PUSH  USING                                            GP18035\n         DROP  ,                                                GP18035\n         USING PRTEXIT,R15                                      GP18035\nPRTEXIT  CLI   RECFM(R1),0         IF NO RECFM\n         BNE   *+8                   THEN\n         MVI   RECFM(R1),X'94'       SET RECFM=FBA\n         SPACE 1\n         SLR   R3,R3                                            GP18035\n         ICM   R3,3,LRECL(R1)     LOAD RECORD LENGTH            GP18035\n         BNZ   PRTEXBK              USE USER'S                  GP18035\n         LA    R3,120             DEFAULT BLOCK SIZE (NO CC)    GP18035\n         TM    RECFM(R1),X'06'    CARRIAGE CONTROL?             GP18035\n         BZ    *+8                  NO                          GP18035\n         LA    R3,1(,R3)          INCREASE DEFAULT              GP18035\n         TM    RECFM(R1),X'80'    RECFM=F OR U ?                GP18035\n         BNZ   PRTEXBK              YES; RECORD LENGTH SET      GP18035\n         LA    R3,4(,R3)          ALLOW FOR RDW                 GP18035\n*NEXT*   B     PRTEXBK                                          GP18035\n         SPACE 1\nPRTEXBK  LH    R4,BLKSI(,R1)      GET BLOCK SIZE                GP18035\n         LTR   R4,R4              ANY BLOCK SIZE?               GP18035\n         BNZ   PRTEXST              YES                         GP18035\n         LR    R4,R3              USE BLKSIZE = LRECL           GP18035\n         TM    RECFM(R1),X'80'    RECFM=U OR F ?                GP18035\n         BNZ   PRTEXST              YES; DONE                   GP18035\n         LA    R4,4(,R4)          ADD BDW TO BLOCK              GP18035\n         SPACE 1\nPRTEXST  STH   R3,LRECL(,R1)      SET RECORD LENGTH             GP18035\n         STH   R4,BLKSI(,R1)        AND BLOCK SIZE              GP18035\nPRTEXBR  BR    R14\n         POP   USING                                            GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DCB OPEN ABEND EXIT FOR SYSUT1                              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         PUSH  USING                                            GP18035\nUT1ABEND DS    0H\n         L     R8,0(,R1)           GET COMPLETION CODE\n         N     R8,=A(X'FFF0FF00')\n         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND\n         BE    UT1MEMBR            YES, BRANCH\n         MVI   4(R1),0             NO, ABNORMALLY TERMINATE\n         BR    R14\nUT1MEMBR OI    STATUS,FGSNOMEM     INDICATE MEMBER NOT FOUND\n         MVI   3(R1),4             IGNORE THE ABEND\n         BR    R14\n         DROP  R9\n         POP   USING                                            GP18035\n         EJECT ,\n         TITLE 'S U B S T C K  ***  MVS STCKCONV FACILITY'\n***********************************************************************\n*   THIS ROUTINE IS INVOKED BY (LOCAL) MACRO $TCKCONV AND PRODUCES    *\n*   THE SAME OUTPUT AS IBM'S STCKCONV ROUTINE UNDER ESA AND LATER.    *\n*   ADAPTED FOR INLINE USE.                                           *\n***********************************************************************\n*   PROCESS DATE - SHIFT TOD CLOCK AND DIVIDE AS PER PoOPS TO GET     *\n*   DAYS SINCE BASE, WHICH IS 1900/01/01 FOR MVS & LATER SYSTEMS      *\n***********************************************************************\n*   Input:                                                            *\n*   Time format in TIMETYPE                                           *\n*    01 BIN or MIC                                                    *\n*    02 DEC or MIC                                                    *\n*    20 STCK format                                                   *\n*                                                                     *\n*                                                                     *\n*   Date format in DATETYPE                                           *\n*    00 YYYYDDD                                                       *\n*    01 MMDDYYYY                                                      *\n*    02 DDMMYYYY                                                      *\n*    03 YYYYMMDD                                                      *\n*                                                                     *\n*    40 local time                                                    *\n***********************************************************************\nSUBSTCK  STM   R14,R12,12(R13)    SAVE A ;LOT                   GP18035\n         STCK  PLTOD                                            GP18035\n         LM    R2,R3,PLTOD   GET TOD CLOCK VALUE                GP18035\n         TM    DATETYPE,DATLOCAL  RETURN LOCAL TIME ?           GP18035\n         BZ    USEGMT                                           GP18035\n         L     R1,CVTPTR                                        GP18035\n         USING CVT,R1                                           GP18035\n         TM    CVTDCB,X'80'  MVS OR IS IT LATER ?               GP18035\n         BNZ   ADJNEW        OLD; USE TIME ZONE ADJUST          GP18035\n         AL    R2,CVTTZ      ADD OLD VERSION OF LOCAL TIME      GP18035\n         B     USEGMT        SKIP AROUND                        GP18035\nADJNEW   L     R1,CVTEXT2    GET CVT EXTENSION                  GP18035\n         USING CVTXTNT2,R1   MAP CVT EXTENSION                  GP18035\n         AL    R2,X'38'(,R1)    ADD CVTLDTOL  ADD HIGH/LEFT     GP18035\n         AL    R3,X'3C'(,R1)    ADD CVTLDTOR  ADD LOW/RIGHT     GP18035\n         BNO   USEGMT        NO CARRY                           GP18035\n         AL    R2,=F'1'      PROPAGATE CARRY                    GP18035\n         DROP  R1                                               GP18035\nUSEGMT   SRDL  R2,24         ADJUST                             GP18035\n         D     R2,=X'0141DD76'  GET DAYS SINCE 1900.001 PER PoOPS\n         ST    R3,DAYS                                          GP18035\n         ST    R2,MICS                                          GP18035\n         C     R3,=F'365'    IN FIRST YEAR ?                    GP18035\n         BNL   NOTBASE       NO                                 GP18035\n         MVC   YEAR,=F'1900'                                    GP18035\n         LA    R3,1(,R3)     FIX UP                             GP18035\n         ST    R3,DAY        SET 1900.DDD                       GP18035\n         B     MAKEDATE                                         GP18035\n         SPACE 2                                                GP18035\nNOTBASE  S     R3,=F'365'    CHANGE BASE TO 1901                GP18035\n         ST    R3,DAYS       SAVE                               GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'1461'   GET NUMBER OF LEAP YEAR EPOCHS     GP18035\n         LR    R7,R3         SAVE NUMBER OF LEAP YEARS          GP18035\n         LR    R6,R2         SAVE NUMBER OF YEARS IN CURR. 4 YEAR CYCLE\n         LA    R0,1          DEFAULT FUDGE TO 1                 GP18035\n         C     R2,=F'1460'   LAST DAY OF LEAP YEAR ?            GP18035\n         BNE   CALCYR        NO                                 GP18035\n         BCTR  R2,0                                             GP18035\n         LR    R6,R2         UPDATE                             GP18035\n         LA    R0,2          SET FUDGE TO 2                     GP18035\nCALCYR   LR    R3,R6                                            GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'365'                                       GP18035\n         AR    R2,R0         GET JULIAN DAY                     GP18035\n         ST    R2,DAY        SAVE IT                            GP18035\n         LR    R3,R6                                            GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'365'    GET YEARS IN R3                    GP18035\n         LR    R2,R7         LEAPS                              GP18035\n         SLA   R2,2          *4                                 GP18035\n         AR    R3,R2         ADD                                GP18035\n         A     R3,=F'1901'   ADD BASE                           GP18035\n         ST    R3,YEAR                                          GP18035\nMAKEDATE L     R2,YEAR                                          GP18035\n         TM    DATETYPE,3    NEED TO CONVERT DAY TO MONTH/DAY ? GP18035\n         BNZ   MAKEDMON      YES                                GP18035\n         MH    R2,=H'1000'                                      GP18035\n         A     R2,DAY        ADD DAY IN YEAR                    GP18035\n         CVD   R2,DB         PACK                               GP18035\n         L     R2,DB+4                                          GP18035\n         SRL   R2,4          REMOVE SIGN                        GP18035\n         ST    R2,PLDATE     RETURN DATE                        GP18035\n         B     GETTIME                                          GP18035\n         SPACE 1                                                GP18035\nMAKEDMON L     R1,DAY        GET BINARY DAY                     GP18035\n         SLR   R0,R0         SET FOR NO LEAP DAY ADJUSTMENT     GP18035\n*  N.B.: THIS WORKS UNTIL 2099 ONLY                             GP18035\n         EX    R2,EXISLEAP   TEST FOR MULTIPLE OF FOUR          GP18035\n         BNZ   NOTALEAP      BRANCH IF NOT A LEAP YEAR          GP18035\n         CH    R1,=H'60'     IS THIS ON, BEFORE, OR AFTER LEAP DAY?\n         BL    NOTALEAP      BEFORE; TREAT NORMALLY             GP18035\n         BH    ONELESS       AFTER; ADJUST DAY                  GP18035\n         LA    R0,1          SET LEAP DAY ADJUSTMENT            GP18035\nONELESS  BCTR  R1,0          ONE LESS TO FIX DAYS AFTER LEAP    GP18035\nNOTALEAP LA    R4,DATETABL   GET TABLE OF CUMULATIVE DAYS       GP18035\n         LR    R5,R4         SAVE                               GP18035\nFINDMON  CH    R1,2(,R4)     IN THIS MONTH?                     GP18035\n         BNH   FOUNDMON      YES; PROCESS                       GP18035\n         LA    R4,2(,R4)     INCREMENT                          GP18035\n         B     FINDMON       AND TRY AGAIN                      GP18035\nFOUNDMON SH    R1,0(,R4)     SUBTRACT DAYS IN PRIOR MONTHS      GP18035\n         AR    R1,R0         ADJUST 1 IF LEAP DAY               GP18035\n         LA    R4,2(,R4)     FINAGLE TO MAKE MONTH COME OUT RIGHT\n         SR    R4,R5         GET OFFSET TO MONTH                GP18035\n         SRL   R4,1          GET MONTH (1-12)                   GP18035\n*  WE NOW HAVE FULL YEAR IN R2, MONTH IN R4, AND DAY IN R1      GP18035\n         TM    DATETYPE,X'03'   YYYYMMDD ?                      GP18035\n         BO    DATEMISO                                         GP18035\n         TM    DATETYPE,X'01'   MMDDYYYY                        GP18035\n         BZ    DATEMDY                                          GP18035\n         MH    R4,=H'100'                                       GP18035\n         AR    R4,R1                                            GP18035\n         B     DATEMCOM                                         GP18035\nDATEMDY  MH    R1,=H'100'                                       GP18035\n         AR    R4,R1                                            GP18035\nDATEMCOM MH    R4,=H'10000'                                     GP18035\n         AR    R4,R2            MMDDYYYY OR DDMMYYYY            GP18035\n         B     DATEMOUT                                         GP18035\nDATEMISO MH    R2,=H'100'                                       GP18035\n         AR    R4,R2            YYYYMM                          GP18035\n         MH    R4,=H'100'                                       GP18035\n         AR    R4,R1            YYYYMMDD                        GP18035\nDATEMOUT CVD   R4,DB                                            GP18035\n         LM    R2,R3,DB                                         GP18035\n         SRDL  R2,4          REMOVE SIGN                        GP18035\n         ST    R3,PLDATE     RETURN DATE                        GP18035\n         SPACE 1\n***********************************************************************\n*   PROCESS TIME - HAVE MICROSECONDS, BUT LOW 12 BITS LOST IN SHIFT   *\n*   RESTORE BEFORE DECIDING WHETHER THEY'RE NEEDED                    *\n*   BRANCH BY REQUEST TYPE TO APPROPRIATE FORMATTING                  *\n***********************************************************************\nGETTIME  LM    R4,R5,PLTOD   GET CLOCK VALUE BACK               GP18035\n         SRDL  R4,24         FINAGLE                            GP18035\n         L     R3,MICS       GET REMAINDER                      GP18035\n         SLR   R2,R2         CLEAR FOR DIVIDE                   GP18035\n         SLDL  R2,12         REPOSITION                         GP18035\n         OR    R3,R4         REGAIN LOST BITS                   GP18035\n*LOCAL*  BIX   VAL=TIMETYPE,PFX=RTIM,ERR=RTIMERR,LOC=(,BIN,DEC,MIC)\n         IC    R15,TIMETYPE                                     GP18035\n         LA    R0,3                                             GP18035\n         NR    R15,R0        ISOLATE SIGNIFICANT PORTION        GP18035\n         CH    R15,=Y(4)     VALID INDEX ?                      GP18035\n         BNL   RTIMERR       NO; TOO HIGH                       GP18035\n         SLL   R15,1         CONVERT INDEX TO OFFSET            GP18035\n         LH    R15,*+8(R15)       LOAD LABEL OFFSET FROM BASE   GP18035\n         B     EMPTYTST(R15) ENTER ROUTINE                      GP18035\n         DC    AL2(RTIMERR-EMPTYTST)    1 ERROR                 GP18035\n         DC    AL2(RTIMBIN-EMPTYTST)    2        BRANCH         GP18035\n         DC    AL2(RTIMDEC-EMPTYTST)    3        BRANCH         GP18035\n         DC    AL2(RTIMMIC-EMPTYTST)    4        BRANCH         GP18035\n         SPACE 1                                                GP18035\nRTIMDEC  D     R2,=F'1000000'  CONVERT TO SECONDS               GP18035\n         CVD   R2,DB2        FRACTIONS                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'60'     GET SECONDS                        GP18035\n         ST    R2,SECS                                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'60'     GET MINUTES                        GP18035\n         ST    R2,MINS                                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'24'                                        GP18035\n         ST    R2,HOUR                                          GP18035\n         CVD   R2,PLTIME     MAKE HOUR PACKED                   GP18035\n         MP    PLTIME,=P'100'  MAKE ROOM FOR MINUTES            GP18035\n         L     R2,MINS                                          GP18035\n         CVD   R2,DB                                            GP18035\n         AP    PLTIME,DB     ADD MINUTES                        GP18035\n         MP    PLTIME,=P'100'  MAKE ROOM FOR SECONDS            GP18035\n         L     R2,SECS                                          GP18035\n         CVD   R2,DB                                            GP18035\n         AP    PLTIME,DB     ADD SECONDS                        GP18035\n         MP    PLTIME,=P'1000000'  ROOM FOR MICROSECONDS        GP18035\n         AP    PLTIME,DB2    ADD THOSE IN                       GP18035\n*0C7*    MP    PLTIME,=P'1000'     LEFT-JUSTIFY IN RESPONSE     GP18035\n         LM    R2,R3,PLTIME  LOAD PACKED VALUE                  GP18035\n         N     R3,=X'FFFFFFF0'  REMOVE SIGN                     GP18035\n         SLDL  R2,3*4        SHIFT THREE DIGITS                 GP18035\n         O     R3,=X'0000000C'  RESTORE SIGN                    GP18035\n         STM   R2,R3,PLTIME  SAVE PACKED VALUE                  GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMMIC  SLDL  R2,12         ALIGN MICROSECONDS IN BIT 51       GP18035\n         STM   R2,R3,PLTIME  RETURN IT                          GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMBIN  D     R2,=F'10000'  CONVERT TO 1/100TH SECOND          GP18035\n         ST    R3,PLTIME     RETURN IT                          GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMERR  MVI   RETCODE,16    INVALID PARAMETER LIST             GP18035\n         SPACE 1                                                GP18035\nPGMEXIT  L     R14,12(,R13)                                     GP18035\n         L     R15,RETCODE                                      GP18035\n         LM    R0,R12,20(R13)                                   GP18035\n         BR    R14                                              GP18035\n         SPACE 1                                                GP18035\nEXISLEAP TM    =X'03',*-*    MULTIPLE OF FOUR?                  GP18035\n         SPACE 1                                                GP18035\n*  TABLE OF DAYS IN PRIOR MONTH                                 GP18035\nDATETABL DC   H'0,31,59,90,120,151,181,212,243,273,304,334,365' GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DATA AREAS                                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTORG\n         SPACE 1\n         DC    0D'0'\nPATCAM   CAMLST SEARCH,*-*,*-*,*-*     PATTERN FOR DSCB 1       GP18035\n         ORG   PATCAM+4                ONLY NEED FLAGS          GP18035\n         READ  PATDECB,SF,*-*,*-*,*-*,MF=L                      GP18035\nPATDECBL EQU   *-PATDECB               LENGTH TO MOVE           GP18035\n         SPACE 1\nWTM00    WTO   'EMP000I EMPTYTST - RC = 00',                           *\n               ROUTCDE=(4,11),MF=L\nWTMROUT  EQU   *-4,4,C'X'         ROUTING/DESCRIPTOR CODES      GP18035\nWTM04    WTO   'EMP004I EMPTYTST - RC = 04',                           *\n               ROUTCDE=(4,11),MF=L\nWTM08    WTO   'EMP008I EMPTYTST - RC = 08',                           *\n               ROUTCDE=(4,11),MF=L\nWTM12    WTO   'EMP012I EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISS+\n               ING',ROUTCDE=(4,11),MF=L\nWTS00    DC    AL2(12-1),C'IS NOT EMPTY'                        GP18035\nWTS04    DC    AL2(08-1),C'IS EMPTY'                            GP18035\nWTS08    DC    AL2(16-1),C'MEMBER NOT FOUND'                    GP18035\n         DC    0D'0'\n         PRINT NOGEN\nUT1DCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),EODAD=UT1EOF   GP18035\nUT1DCBL  EQU   *-UT1DCB\n         SPACE 1\nPO1DCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,EODAD=UT1EOF,            *\n               RECFM=U,LRECL=264,BLKSIZE=264  CHEAT  ?          GP18035\nPO1DCBL  EQU   *-PO1DCB                                         GP18035\n         SPACE 1\nPRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PL)              GP18035\nPRTDCBL  EQU   *-PRTDCB\n         SPACE 1\nMSGTAB   DC    A(MSG00,MSG04,MSG08)                             GP18035\nMSG00    WTO   ' EMPTYTST - RC = 00 DATA SET IS NOT EMPTY',MF=L GP18035\nMSG04    WTO   ' EMPTYTST - RC = 04 DATA SET IS EMPTY',MF=L     GP18035\nMSG08    WTO   ' EMPTYTST - RC = 08 MEMBER NOT FOUND',MF=L      GP18035\nMSG12    WTO   ' EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISSING',  *\n               MF=L                                             GP18035\nMSGFR    WTO   ' EMPTYTST - -------',MF=L                       GP18035\n         SPACE 1\nTRTBLANK DC    AL1(4),255AL1(0)   QUICK END OF STRING LOCATE    GP18035\n         ORG   TRTBLANK+C' '                                    GP18035\n         DC    AL1(4)             STOP ON BLANK                 GP18035\n         ORG   ,                                                GP18035\n         SPACE 1\n         DC    0D'0'\nWORKD    DSECT\n         DS    18F\nSUBSAVE  DS    10F                Multiple use save area        GP18035\nDOUBLE   DS    D\nRETCODE  DS    F\nOPTC     DS    C\nOPTQ     DS    C\nOPTW     DS    C\nSTATUS   DS    C             STATUS FLAGS\nFGSNOMEM EQU   X'10'           MEMBER NOT FOUND\nFGSCP    EQU   X'01'           PARM IS FOR TSO CP               GP18035\nNJOB     DS    CL8                     JOB NAME                  SG1801\nPSTN     DS    CL8                     STEP NAME                 SG1801\nJSTN     DS    CL8                     JOB STEP NAME FOR PROCS   SG1801\nUT1DD    DS    CL8\nPRTDD    DS    CL8\nDEVAREA  DS    2F\nOPEN     OPEN  (*-*),MF=L         SYSUT1 OPEN/CLOSE/RDJFCB      GP18035\nOPENOUT  OPEN  (*-*),MF=L         SYSPRINT OPEN/CLOSE           GP18035\nPRTEXLST DS    F\nEXITLST  DS    2F\nPRTMXL   DS    F             MAXIMUM PRINT DATA LENGTH          GP18035\nPRTIX    DS    H             PRINT PROCESSING INDEX (0-U;4-F;8-VD)\nWORKINI  EQU   *-WORKD\nMSGRDW   DS    AL2(L'MSGLINE+4,0)                               GP18035\nMSGLINE  DS    CL121         MESSAGE WITH CC                     SG1801\n*NEW*TIMEL    TIME  LINKAGE=SYSTEM,MF=L                         GP18035\n         READ  RDECB,SF,*-*,*-*,*-*,MF=L                        GP18035\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\n         DS    X        1/2                                     GP18035\nHEADDATE DC    CL23' '  2/2\n         SPACE 1                                                GP18035\nPLTOD    DS    D             INPUT STCK VALUE                   GP18035\nPLTIME   DS    D             FAKE FOR ALIGNMENT                 GP18035\nPLDATE   DS    F             RETURNED DATE                      GP18035\nDATETYPE DS    X             DATE TYPE (0-J, 1-MDY, 2-DMY, 3-YMD)\nDATLOCAL EQU   X'40'           IF ON, ADJUST FOR LOCAL VS. GMT  GP18035\nTIMETYPE DS    X             TIME TYPE (1-BIN, 2-DEC, 3-MIC)    GP18035\n         SPACE 1                                                GP18035\nDB       DS    D             WORK WORDS                         GP18035\nDB2      DS    D             WORK WORDS                         GP18035\nMICS     DS    F             REMAINDER AFTER DAY DIVISION       GP18035\nDAYS     DS    F             DAYS FROM BASE                     GP18035\nYEAR     DS    F             YEAR                               GP18035\nDAY      DS    F             DAY IN CURRENT YEAR                GP18035\nHOUR     DS    F             TIME: HOUR                         GP18035\nMINS     DS    F             TIME: MINUTES                      GP18035\nSECS     DS    F             TIME: SECONDS                      GP18035\n         SPACE 1                                                GP18035\nUT1DCBW  DS    0F,(UT1DCBL)X\nPO1DCBW  DS    0F,(PO1DCBL)X                                    GP18035\nPRTDCBW  DS    0F,(PRTDCBL)X\nDEWORK   DS    XL256,XL8     DIRECTORY ENTRY + KEY (?)          GP18035\n         ORG   DEWORK          REUSE                            GP18035\nWTOW     DS    XL124 LONGEST WTO MSG (W/RDW)                    GP18035\nMSGW     DS    0F,CL112 LONGEST MSG IS 108, ROUNDED TO 8-BYTE MULTIPLE\n         ORG   ,                                                GP18035\n         SPACE 1\nCAMLIST  DS    5A                 (ONLY USING 4)                GP18035\n         IECSDSL1 1               MAP FORMAT 1 DSCB             GP18035\n         DS    XL5                SPACE FOR CCHHR               GP18035\nFM1FLAG1 EQU   DS1NOBDB+1,1,C'X'  MORE FLAGS                    GP18035\nFM1SMSFG EQU   FM1FLAG1+17,1,C'X'  SMS FLAG                     GP18035\n         SPACE 1\nJFCB     DS    0F                                               GP18035\n         IEFJFCBN ,                                             GP18035\n         DS    0D\nWORKLEN  EQU   *-WORKD\n         SPACE 1\nBUFCA    EQU   21                                               GP18035\nEODAD    EQU   33\nRECFM    EQU   36\nEXLSA    EQU   37\nDDNAM    EQU   40\nOFLGS    EQU   48\nBLKSI    EQU   62\nLRECL    EQU   82\n         SPACE 1                                                GP18035\n         PRINT NOGEN                                            GP18035\n         CVT   DSECT=YES\n         SPACE 1\n         YREGS ,                                                 SG1801\n         END   ENTRY0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EMPTYT02": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x08\\x01\\x18\\x05\\x0f\\x01\\x18\\x05\\x0f\\x13B\\x04T\\x04C\\x04H\\xd7\\xd9\\xc5\\xe5\\xc9\\xe4\\xe2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2018-02-19T00:00:00", "modifydate": "2018-02-19T13:42:08", "lines": 1108, "newlines": 1091, "modlines": 1096, "user": "PREVIUS"}, "text": "TEMPT    TITLE 'BATCH PROGRAM TO TELL IF A DATASET IS EMPTY'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n*    PROGRAM :  EMPTYTST                                              *\n*                                                                     *\n*    FUNCTION:  FIND OUT IF A DATASET OR A PDS MEMBER IS EMPTY.       *\n*                                                                     *\n*    RESTRICTIONS:  SYSUT1 CANNOT POINT TO A CONCATENATION OF         *\n*               DATASETS.  SYSUT1 MUST POINT TO A SINGLE DATASET      *\n*               OR A SINGLE PDS MEMBER.  IF SYSUT1 POINTS TO A        *\n*               CONCATENATION OF DATASETS, THEN EMPTYTST RETURNS      *\n*               A (SEVERE ERROR) CODE OF 16.                          *\n*                                                                     *\n*    ACTION  :  RETURNS CODE = 0 IF DATASET IS NOT EMPTY.             *\n*               RETURNS CODE = 4 IF DATASET IS EMPTY.                 *\n*               JCL ERROR IF A SEQUENTIAL DATASET (DSORG=PS)          *\n*                 DOES NOT EXIST.                                     *\n*               RETURNS CODE = 8 IF PDS MEMBER DOES NOT EXIST.        *\n*               RETURNS CODE = 12 IF SYSUT1 DDNAME IS MISSING.        *\n*               RETURNS CODE = 16 IF SYSUT1 POINTS TO A DATASET       *\n*                 CONCATENATION.                                      *\n*                                                                     *\n*    SEE BELOW FOR FURTHER DOCUMENTATION.                             *\n*                                                                     *\n*    DATE WRITTEN:   JANUARY 21 2018                                  *\n*                                                                     *\n*    DATE UPDATED:   FEBRUARY 18 2018                                 *\n*                                                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                        HOW IT WORKS:                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* READ THE FIRST RECORD OF THE DATA SET, PDS MEMBER, OR PDSE MEMBER   *\n* THAT IS ALLOCATED TO DDNAME SYSUT1.                                 *\n* IF THE READ IS SUCCESSFUL, EXIT WITH RETURN CODE 0.                 *\n* IF THE READ HITS END-OF-FILE, EXIT WITH RETURN CODE 4,              *\n* WHICH MEANS THE DATA SET OR MEMBER IS EMPTY.                        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF SYSPRINT IS ALLOCATED, A MESSAGE IS WRITTEN TO SYSPRINT.         *\n* OTHER POSSIBLE RETURN CODES ARE 12 FOR MISSING SYSUT1 DDNAME        *\n* OR 8 FOR MEMBER DOES NOT EXIST, AND 16 IF SYSUT1 POINTS TO          *\n* A DATASET CONCATENATION.                                            *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* SAMPLE JCL :                                                        *\n*                 //EXEC PGM=EMPTYTST                                 *\n*                 //SYSPRINT DD SYSOUT=*                              *\n*                 //SYSUT1 DD DSN=A.B.C,DISP=SHR                      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*         OPTIONS IN THE PARM FIELD.   PARM = W Q C                   *\n*                                                                     *\n* THE PARM FIELD IS CHECKED FOR THE PRESENCE OF CERTAIN CHARACTERS    *\n* WHICH ALLOW OPTIONS TO BE SPECIFIED.                                *\n* IF MORE THAN ONE OPTION IS USED, THE CHARACTERS DO NOT NEED TO      *\n* BE SEPARATED, OR IN ANY SPECIFIC ORDER.                             *\n* IF THE PARM FIELD CONTAINS THE CHARACTER \"W\" THEN THE PROGRAM       *\n* WILL ISSUE A WTO WITH ONE OF THESE MESSAGES:                        *\n*                                                                     *\n*   EMP000I EMPTYTST - RC = 00 <DSN> ON VOLUME <VOL> IS NOT EMPTY     *\n*   EMP004I EMPTYTST - RC = 04 <DSN> ON VOLUME <VOL> IS EMPTY         *\n*   EMP008I EMPTYTST - RC = 08 <DSN> ON VOLUME <VOL> WAS NOT FOUND    *\n*   EMP012E EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISSING        *\n*   EMP016E EMPTYTST - RC = 16 ERROR - SYSUT1 IS CONCATENATION        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"W\" AND THE LETTER \"C\"        *\n* (FOR CONDITIONAL) THEN IT WILL ISSUE A WTO ONLY IF THE RETURN       *\n* CODE IS NOT ZERO.                                                   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* IF THE PARM FIELD CONTAINS THE LETTER \"Q\" (FOR QUIET)               *\n* THEN THE PROGRAM WILL NOT OPEN SYSPRINT EVEN IF IT IS ALLOCATED.    *\n* THIS IS INTENDED FOR RUNNING THE PROGRAM UNDER TSO WHEN A USER      *\n* PREFERS NOT TO SEE A MESSAGE EVEN THOUGH SYSPRINT MIGHT BE          *\n* ALLOCATED TO THE TERMINAL.                                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* DDNAME SYSPRINT IS OPTIONAL                                         *\n* EVEN IF DDNAME SYSPRINT IS ALLOCATED, THE PROGRAM WILL NOT          *\n* OPEN IT OR WRITE TO IT IF PARM=Q IS SPECIFIED.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* USAGE NOTE:                                                         *\n*                                                                     *\n* PRIOR TO Z/OS 1.11 WHEN A PS DATA SET THAT WAS NOT SMS-MANAGED WAS  *\n* FIRST CREATED, NO END-OF-FILE MARK WAS WRITTEN AT THE BEGINNING     *\n* OF THE DATA SET. IF A PROGRAM (LIKE THIS ONE, FOR EXAMPLE)          *\n* READ THE DATA SET BEFORE ANYTHING WAS WRITTEN TO IT, IT MIGHT       *\n* SUCCESSFULLY READ WHAT WAS THERE BEFORE THE DATA SET WAS CREATED,   *\n* AS IF THE DATA SET WERE NOT EMPTY.                                  *\n* OR IT MIGHT GET A READ ERROR BECAUSE THE RECORD THAT WAS THERE      *\n* BEFORE THE DATA SET WAS CREATED DOESN'T HAVE THE SAME RECFM, LRECL, *\n* OR BLOCK SIZE AS THE DATA SET THAT WAS CREATED.                     *\n* FOR SUCH SITUATIONS, A PROGRAM THAT CHECKS FOR AN EMPTY PS DATA SET *\n* COULD STILL DETECT THAT IT WAS EMPTY BY READING THE FORMAT 1 DSCB   *\n* FROM THE VTOC AND CHECKING THE DS1LSTAR FIELD FOR ZERO.             *\n* ON SYSTEMS RUNNING Z/OS 1.11 OR LATER, THIS IS NOT NECESSARY.       *\n* (THIS PROBLEM WAS TAKEN CARE OF BY GERHARD'S ADDITIONAL CODE.)      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     IMPROVED MESSAGES                          SG1801\n* I DID A FEW OF THESE.  ALL CODES 0, 4, 8 HAVE THE DSNAME       SG1801\n* AND VOLSER INCLUDED.  ONLY ONE THAT DOESN'T IS CODE 12.        SG1801\n* A SEQUENTIAL DATASET (DSORG=PS) IF NON-EXISTENT, SHOULD        SG1801\n* GET A JCL ERROR.  IF A PDS MEMBER ISN'T THERE, THEN THE        SG1801\n* S013-18 ABEND GETS INTERCEPTED, AND A CODE = 8 IS SHOWN.       SG1801\n* MOST OF THIS WORK WAS DONE BY CBTUSER.                         SG1801\n*                                                                     *\n* THIS PROGRAM WAS WRITTEN BY CBTUSER AND WAS GREATLY IMPROVED        *\n* BY GERHARD POSTPISCHIL.                                             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* Changes:                                                            *\n* 2018-02-18  CBT   Detect SYSUT1 pointing to a concatenation         *\n*                   Fix various errors                                *\n*                   Improve messages                                  *\n* 2018-02-04  GYP   (I can't resist meddling - sorry)                 *\n*                   Changed code to assemble and execute under MVS    *\n*                   Avoid 013-18 abend on missing member              *\n*                   Avoid 001 on uninitialized MVS DS - test DS1LSTAR *\n*                   Test PDS for logical empty (no members)           *\n*                   Improved(?) message processing                    *\n*                   Require both SYS1.MACLIB and SYS1.(A)MODGEN for   *\n*                     clean assembly                                  *\n*                   Replaced new format TIME with MVS compatible code *\n*                   Handle PARM correctly for TSO CP aand batch       *\n*                   Fixed 002 abend for SYSPRINT RECFM=V..            *\n*  2018-02-17  CBT  Fixed check of PRTIX at GOPRINTA to PRTIX+1.      *\n*                   Don't use LRECL for SYSPRINT if RECFM unblocked.  *\n*                   Fail with rc 16 if SYSUT1 is a concatenation.     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         MACRO ,                                                GP18035\n&NM      #PUT  &LN                                              GP18035\n.*                                                              GP18035\n.*   THIS MACRO REPLACES THE ORIGINAL PUT REQUESTS. INSTEAD IT  GP18035\n.*   CALLS A SUBROUTINE THAT ADAPTS THE RECORDS TO F/V/U FORMAT GP18035\n.*                                                              GP18035\n         LCLC  &LBL                                             GP18035\n         LCLA  &K                                               GP18035\n&K       SETA  K'&LN                                            GP18035\n&LBL     SETC  '&NM'                                            GP18035\n         AIF   (&K LT 3).GOLA                                   GP18035\n         AIF   ('&LN'(1,1) NE '(' OR '&LN'(2,1) EQ '(').GOLA    GP18035\n         AIF  ('&LN'(&K,1) NE ')' OR '&LN'(&K-1,1) EQ ')').GOLA GP18035\n         AIF   ('&LN' EQ '(1)' OR '&LN' EQ '(R1)').GOBAL        GP18035\n&LBL     LR    R1,&LN(1)                                        GP18035\n&LBL     SETC  ''                                               GP18035\n         AGO   .GOBAL                                           GP18035\n.GOLA    ANOP  ,                                                GP18035\n&LBL     LA    R1,&LN                                           GP18035\n&LBL     SETC  ''                                               GP18035\n.GOBAL   ANOP  ,                                                GP18035\n&LBL     BAL   R14,GOPRINT                                      GP18035\n         MEND  ,                                                GP18035\n         SPACE 2\n         PUNCH ' ORDER EMPTYTST(P) ' MAKE DUMPS EASIER TO READ ***DEB\nEMPTYTST CSECT ,\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)\n         DC    AL1(9),CL9'EMPTYTST'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nBEGIN    STM   R14,R12,12(13)\n         LR    R10,R15\n         LR    R2,R1               SAVE POINTER TO PARM AND DDNAMES\n         L     R0,WORKSIZ\n         GETMAIN R,LV=(0)\n*DEBUG*  GETMAIN RU,LV=WORKSIZ,BNDRY=PAGE ***DEBUG - EASIER ADDRESSES\n         LR    R9,R1\n         USING WORKD,R9\n         XC    0(WORKINI,R1),0(R1)\n         ST    R13,4(,R9)          OLD ADDRESS IN NEW SAVE AREA\n         ST    R9,8(,R13)          NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R9\n         LA    R15,12\n         ST    R15,RETCODE         INITIALLY SET RETCODE TO 12\n         SPACE 1\n***********************************************************************\n*                    GET SYSTEM DATE AND TIME                         *\n***********************************************************************\n         STM   R14,R2,SUBSAVE                                   GP18035\n         AGO   .MVSDATE                                         GP18035\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY,          x\n               MF=(E,TIMEL)                                      SG1801\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         AGO   .COMDATE\n.MVSDATE ANOP  ,                                                GP18035\n         MVI   HEADDATE-1,C' '                                  GP18035\n         MVC   HEADDATE,HEADDATE-1   BLANK UNUSED BYTES         GP18035\n         MVI   DATETYPE,1         request MMDDYYYY              GP18035\n         MVI   TIMETYPE,2         request packed time           GP18035\n         OI    DATETYPE,DATLOCAL  IF ON, ADJUST FOR LOCAL TIME  GP18035\n         BAL   R14,SUBSTCK                                      GP18035\n         UNPK  DB(9),PLDATE(5)    CONVERT HEX TO UNPACKED       GP18035\n         MVI   DB+8,C'/'          DATE SEPARATOR                GP18035\n         MVC   HEADDATE(8),=AL1(0,1,8,2,3,8,6,7)                GP18035\n         TR    HEADDATE(8),DB     FORMAT DATE                   GP18035\n         UNPK  DB(9),PLTIME(5)    CONVERT HEX TO UNPACKED       GP18035\n         MVI   DB+8,C':'          DATE SEPARATOR                GP18035\n         MVC   HEADDATE+12(8),=AL1(0,1,8,2,3,8,6,7)             GP18035\n         TR    HEADDATE+12(8),DB     FORMAT DATE                GP18035\n.COMDATE LM    R14,R2,SUBSAVE                                   GP18035\n***********************************************************************\n*                                                                     *\n*         CHECK PARM FOR Q (QUIET, DON'T OPEN SYSPRINT)               *\n*                     OR W (ISSUE WTO)                                *\n*                     OR C (ISSUE WTO ONLY IF EMPTY OR ERROR)         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*LOCAL*  PARMLOAD R2,PTR=R2       GET PGM OR TSO CP PARM        GP18035\n         L     R2,0(,R2)                                        GP18035\n         LH    1+R2,0(,R2)   GET LENGTH                         GP18035\n         LTR   1+R2,1+R2     ANY                                GP18035\n         BZ    PARMLEN         NO; DON'T TEST TEXT              GP18035\n         CLI   2(R2),0       TSO CP CALL?                       GP18035\n         BH    PARMLEN         NO, USE OS FORM                  GP18035\n         OI    STATUS,FGSCP  SET TSO CP FLAG                    GP18035\n         SH    1+R2,=H'4'    ALLOW FOR LENGTH LENGTH            GP18035\n         SH    1+R2,2(,R2)   ALLOW FOR PARSED COMMAND NAME      GP18035\n         AH    R2,2(,R2)     ALLOW FOR PARSED COMMAND NAME      GP18035\n         LA    R2,2(,R2)     SKIP SECOND LENGTH                 GP18035\nPARMLEN  LA    R2,2(,R2)     SKIP FIRST LENGTH                  GP18035\n         LTR   R3,R3              IF NO PARM                    GP18035\n         BZ    PARMDONE             SKIP PARM                   GP18035\nPARMLOOP CLI   0(R2),C'Q'          Q FOR QUIET, IGNORE SYSPRINT\n         BNE   PARMW\n         MVI   OPTQ,C'Q'\n         B     PARMNEXT\nPARMW    CLI   0(R2),C'W'          W FOR ISSUE WTO\n         BNE   PARMC\n         MVI   OPTW,C'W'\n         B     PARMNEXT\nPARMC    CLI   0(R2),C'C'          C FOR ISSUE WTO IF RC NOT = 0\n         BNE   PARMNEXT\n         MVI   OPTC,C'C'\nPARMNEXT LA    R2,1(,R2)           POINT TO NEXT CHAR IN PARM\n         BCT   R3,PARMLOOP         LOOP USING PARM LENGTH IN R0\nPARMDONE DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*     GET JOBNAME STEPNAME AND PROCSTEP NAME FOR SYSPRINT REPORT      *\n*                                                                     *\n***********************************************************************\n         L     R1,X'21C'           PSATOLD                       SG1801\n         L     R1,12(,R1)          TIOT                          SG1801\n         MVC   NJOB(L'NJOB+L'PSTN+L'JSTN),0(R1)  JOB / STEP / JOBSTEP\n***********************************************************************\n*                                                                     *\n*         CHECK FOR DDNAME OVERRIDES                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*         THIS USES THE SAME CONVENTION AS UTILITIES LIKE IEBGENER.\n*         SYSPRINT OVERRIDE IS 6TH IN THE LIST OF DDNAMES\n*         SYSUT1   OVERRIDE IS 8TH IN THE LIST OF DDNAMES\n         TM    STATUS,FGSCP  PARM IN TSO CP FORMAT?             GP18035\n         BNZ   DDX             YES; NO OVERRIDE                 GP18035\n         TM    0(R2),X'80'         IF DDNAME OVERRIDES NOT PRESENT\n         BO    DDX                    SKIP OVERRIDES\n         L     R1,4(,R2)           POINT TO DDNAME LIST\n         LA    R1,0(,R1)           CLEAR HIGH 8 BITS\n         LTR   R1,R1               IF POINTER IS ZERO\n         BZ    DDX                    SKIP OVERRIDES\n         CLI   0(R1),0             IF LENGTH > 255\n         BNE   DDX                    SKIP OVERRIDES\n         CLI   1(R1),8*6           IF LIST NOT LONG ENOUGH FOR 6 DD'S\n         BL    DDX                    SKIP OVERRIDE\n         CLI   42(R1),0  (8*5+2)   IF SLOT EMPTY\n         BE    DDUT1                  SKIP OVERRIDE\n         MVC   PRTDD,42(R1)        COPY DDNAME FOR SYSPRINT\nDDUT1    CLI   1(R1),8*8           IF LIST NOT LONG ENOUGH FOR 8 DD'S\n         BL    DDX                    SKIP OVERRIDE\n         CLI   58(R1),0  (8*7+2)   IF SLOT EMPTY\n         BE    DDX                    SKIP OVERRIDE\n         MVC   UT1DD,58(R1)        COPY DDNAME FOR SYSUT1\nDDX      DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         OPEN SYSPRINT IF DDNAME SYSPRINT IS ALLOCATED               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         SLR   R4,R4               ZERO R4 TO INDICATE NO SYSUT1\n         SLR   R5,R5               ZERO R5 TO INDICATE NO SYSPRINT\n         CLI   OPTQ,C'Q'           IF THERE WAS A Q IN PARM\n         BE    PRTX                  SKIP SYSPRINT\n         LA    R5,PRTDCBW\n         MVC   0(PRTDCBL,R5),PRTDCB\n         CLI   PRTDD,0             IF SYSPRINT DDNAME OVERRIDE\n         BE    *+10                  THEN\n         MVC   DDNAM(8,R5),PRTDD     CHANGE DDNAME IN DCB\n         LA    R1,DDNAM(,R5)       POINT TO DDNAME FOR DEVTYPE\n         DEVTYPE (1),DEVAREA       CHECK FOR DDNAME IN TIOT\n         LR    R0,R5               SAVE R5\n         SLR   R5,R5               ZERO R5 TO INDICATE NO SYSPRINT\n         LTR   R15,R15             IF DEVTYPE SAYS DDNAME NOT IN TIOT\n         BNZ   PRTX                  DON'T USE SYSPRINT\n         LR    R5,R0               RESTORE R5 AND USE SYSPRINT\n         LA    R15,PRTEXIT         GET ADDRESS OF PRTEXIT\n         ST    R15,PRTEXLST        STORE ADDRESS IN PRTEXLST\n         LA    R15,PRTEXLST        GET ADDRESS OF PRTEXLST\n         MVI   0(R15),X'85'        MARK AS OPEN EXIT AND LAST ENTRY\n         STCM  R15,7,EXLSA(R5)     EXLST=PRTEXLST, PRTEXLST -> PRTEXIT\n         MVI   OPENOUT,X'80'                                    GP18035\n         OPEN  ((R5),OUTPUT),MF=(E,OPENOUT)                     GP18035\n*        TM    OFLGS(R5),X'10'     IF OPEN FAILED (DDNAME NOT PRESENT)\n*        BNO   EXIT                  EXIT\n*---------------------------------------------------------------------*\n*   The printer output characteristics were either defaulted, or set  *\n*     by the user on the DD.                                          *\n*   To accommodate all reasonable formats, we set variable PRTIX to   *\n*     0 for RECFM=U, to 4 for F, and 8 for V or D (0 offset for len). *\n*   For easier processing, we set the maximum data length into a      *\n*     full-word variable PRTMXL (avoid LRECL=X complications)         *\n*---------------------------------------------------------------------*\n         SLR   R14,R14                                          GP18035\n         SLR   R15,R15            PRESET FOR RECFM=U            GP18035\n         ICM   R14,3,BLKSI(R5)    LOAD MAX BLOCKSIZE FOR U      GP18035\n         TM    RECFM(R5),X'C0'    U ?                           GP18035\n         BO    STPRTF               SET INDEX = 0               GP18035\n         TM    RECFM(R5),X'10'    IF NOT BLOCKED                CB18048\n         BZ    *+8                   DON'T USE LRECL            CB18048\n         ICM   R14,3,LRECL(R5)    LOAD MAX RECORD LENGTH        GP18035\n         LA    R15,4              PRESET FOR F                  GP18035\n         TM    RECFM(R5),X'80'    F ?                           GP18035\n         BNZ   STPRTF               YES                         GP18035\n         LA    R15,8              SET FOR V OR D                GP18035\n         SH    R14,=H'4'          SET MAX DATA LENGTH           GP18035\nSTPRTF   STH   R15,PRTIX          SET PRINT BRANCH INDEX        GP18035\n         ST    R14,PRTMXL         SET MAX PRINTER DATA LENGTH   GP18035\nPRTX     DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         OPEN SYSUT1                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LA    R4,UT1DCBW\n         MVC   0(UT1DCBL,R4),UT1DCB\n         CLI   UT1DD,0             IF SYSUT1 DDNAME OVERRIDE\n         BE    *+10                  THEN\n         MVC   DDNAM(8,R4),UT1DD     CHANGE DDNAME IN DCB\n         LA    R1,DDNAM(,R4)       POINT TO DDNAME FOR DEVTYPE\n         DEVTYPE (1),DEVAREA       CHECK FOR DDNAME IN TIOT\n         LR    R0,R4               SAVE R4\n         SLR   R4,R4               ZERO R4 TO INDICATE NO SYSUT1\n         LTR   R15,R15             IF DEVTYPE SAYS DDNAME NOT IN TIOT\n         BNZ   PRNT                  EXIT WITH ERROR            CB18048\n         LR    R4,R0               RESTORE R5 AND USE SYSUT1\n*              BEGIN CHECK FOR CONCATENATION                    CB18048\n         L     R1,16               CVTPTR                       CB18048\n         L     R1,0(,R1)           TCB WORDS                    CB18048\n         L     R1,4(,R1)           CURRENT TCB                  CB18048\n         L     R1,12(,R1)          TIOT FROM TCBTIO-TCB         CB18048\n         LA    R1,24(,R1)          TOIENTRY-TIOT                CB18048\nDDLOOP   CLI   0(R1),0             TIOELNGH ZERO, END OF TIOT   CB18048\n         BE    PRNT                YES, DDNAME NOT IN TIOT      CB18048\n*        PRECEDING BRANCH NEVER HAPPENS SINCE DEVTYPE CONFIRMED CB18048\n         TM    1(R1),X'80'         TIOESTTA,TIOSLTYP            CB18048\n         BO    DDNEXT              YES, ENTRY NOT IN USE        CB18048\n         CLC   4(8,R1),DDNAM(R4)   DOES TIOEDDNM MATCH SYSUT1?  CB18048\n         BE    DDFOUND             YES, BRANCH                  CB18048\nDDNEXT   SLR   R15,R15             PREPARE FOR IC               CB18048\n         IC    R15,0(,R1)          TIOELNGH, GET OFFSET TO NEXT CB18048\n         LA    R1,0(R15,R1)        POINT TO NEXT ENTRY IN TIOT  CB18048\n         B     DDLOOP              KEEP LOOKING                 CB18048\nDDFOUND  IC    R15,0(,R1)          GET OFFSET TO NEXT           CB18048\n         LA    R1,0(R15,R1)        POINT TO NEXT ENTRY IN TIOT  CB18048\n         TM    1(R1),X'80'         TIOESTTA,TIOSLTYP            CB18048\n         BO    NOTCAT              YES, ENTRY NOT IN USE        CB18048\n         CLI   4(R1),C' '          IS NEXT TIOEDDNM BLANK?      CB18048\n         BNE   NOTCAT              NO, IT'S NOT A CONCATENATION CB18048\n         MVI   RETCODE+3,16        CONCATENATION NOT SUPPORTED  CB18048\n         SR    R4,R4               SYSUT1 IS NOT OPEN           CB18048\n         B     PRNT                ISSUE MESSAGE AND QUIT       CB18048\nNOTCAT   LA    R15,UT1ABEND        POINT TO OPEN ABEND EXIT\n         ST    R15,EXITLST         STORE IN 1ST WORD OF EXITLIST\n         MVI   EXITLST,X'11'       MARK AS OPEN ABEND EXIT (MVS)\n         LA    R15,JFCB            GET ADDRESS OF JFCB\n         ST    R15,EXITLST+4       STORE ADDRESS IN EXITLST 2ND WORD\n         MVI   EXITLST+4,X'87'     MARK AS JFCB PTR AND LAST ENTRY\n         LA    R15,EXITLST         GET ADDRESS OF EXITLST\n         STCM  R15,7,EXLSA(R4)     EXLST=EXITLST, EXITLST -> JFCB\n         MVI   OPEN,X'80'                                       GP18035\n         RDJFCB ((R4)),MF=(E,OPEN)                              GP18035\n         SPACE 1\n*---------------------------------------------------------------------*\n*   For older systems (MVS, MVT) we need to check whether the data    *\n*     set is empty by looking at DS1LSTAR (unless new-fangled type)   *\n*                                                                     *\n*   While we have the DSCB, we can also check for PS vs. PO, and      *\n*     do a member look-up with a BPAM FIND or BLDL.                   *\n*   Use of a DCB abend exit is undesirable in an environment where    *\n*     this module is called as a subroutine (e.g., the DCB could be   *\n*     left in a half-open uncloseable state)                          *\n*---------------------------------------------------------------------*\n         L     R14,PATCAM         GET THE CAMLST FLAGS          GP18035\n         LA    R15,JFCBDSNM       POINT TO THE DS NAME          GP18035\n         LA    R0,JFCBVOLS        POINT TO THE FIRST SERIAL     GP18035\n         LA    R1,DS1FMTID        POINT TO THE DESIRED RETURN   GP18035\n         STM   R14,R1,CAMLIST     COMPLETE THE LIST             GP18035\n         OBTAIN CAMLIST           GET THE DSCB                  GP18035\n         LTR   R15,R15            SUCCESSFUL ?                  GP18035\n         BH    OPFAIL               NO                          GP18035\n         TM    FM1SMSFG,X'07'     NEWFANGLED ?                  GP18035\n         BNZ   OPSEQ                YES; LSTAR USELESS          GP18035\n         TM    FM1SMSFG,X'08'     PDS/E?                        GP18035\n         BNZ   OPPO                 YES; LSTAR USELESS          GP18035\n         CLI   DS1DSORG+1,0       OLD NEWFANGLED STUFF ?        GP18035\n         BNZ   OPSEQ                YES                         GP18035\n         MVI   RETCODE+3,4        PRESET RETURN CODE FOR EMPTY  GP18035\n         ICM   R1,7,DS1LSTAR      ANYTHING IN LSTAR?            GP18035\n         BZ    PRNT                 SKIP OPEN, ETC.             GP18035\n         TM    DS1DSORG,254-DS1DSGPS-DS1DSGPO  NON-SEQUENTIAL ? GP18035\n         BNZ   OPSEQ              MAY BOMB                      GP18035\n         TM    DS1DSORG,DS1DSGPS+DS1DSGPO  SEQ OR PO ?          GP18035\n         BZ    OPSEQ              MAY BOMB                      GP18035\n         TM    DS1DSORG,DS1DSGPO  PARTITIONED?                  GP18035\n         BZ    OPSEQ                                            GP18035\n         SPACE 1\nOPPO     LA    R4,PO1DCBW         POINT TO WORKING DCB          GP18035\n         MVC   0(PO1DCBL,R4),PO1DCB   SET FOR                   GP18035\n         CLI   UT1DD,0             IF SYSUT1 DDNAME OVERRIDE    GP18035\n         BE    *+10                  THEN                       GP18035\n         MVC   DDNAM(8,R4),UT1DD     CHANGE DDNAME IN DCB       GP18035\n         LA    R15,EXITLST         EXIT LIST                    GP18035\n         STCM  R15,7,EXLSA(R4)       BUT JFCB NOT USED          GP18035\n         MVI   OPEN,X'80'          OPEN BPAM                    GP18035\n         TM    JFCBIND1,JFCPDS    JFCB WITH MEMBER NAME ?       GP18035\n         BZ    OPPORD               NO; LOOK AT FIRST DE        GP18035\n         NI    JFCBIND1,255-JFCPDS  RESET MEMBER NAME FLAG      GP18035\n         OI    JFCBTSDM,JFCNWRIT    DO NOT WRITE JFCB BACK      BG18036\n         OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEN)                  GP18035\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED               GP18035\n         BZ    OPFAIL                THEN                       GP18035\n*EXTRA*  OI    JFCBIND1,JFCPDS     RESTORE MEMBER NAME FLAG     GP18035\n         FIND  (R4),JFCBELNM,D     LOOK FOR THE MEMBER          GP18035\n         BXH   R15,R15,MEMNTF        NOT FOUND                  GP18035\n         B     OPPOCOM                                          GP18035\nOPPORD   OPEN  ((R4),INPUT),TYPE=J,MF=(E,OPEN)                  GP18035\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED               GP18035\n         BZ    OPFAIL                THEN                       GP18035\n         MVC   RDECB(PATDECBL),PATDECB  COPY OPTION BITS        GP18035\n         LA    R2,DEWORK                                        GP18035\n         READ  RDECB,SF,(R4),(R2),256,MF=E                      GP18035\n         CHECK RDECB                                            GP18035\n         CLC   DEWORK(10),=X'000EFFFFFFFFFFFFFFFF'  EMPTY PDS ? GP18035\n         BE    UT1EOF                       YES; SAY SO         GP18035\n         B     UT1NTE             RETURN NOT EMPTY              GP18035\nOPPOCOM  CLOSE MF=(E,OPEN)                                      GP18035\n         SPACE 1\nOPSEQ    LA    R4,UT1DCBW                                       GP18035\n         MVI   OPEN,X'80'\n         OPEN  ((R4),INPUT),MF=(E,OPEN)\n         TM    OFLGS(R4),X'10'     IF OPEN FAILED\n         BNZ   UT1X                  THEN\nOPFAIL   CLOSE MF=(E,OPEN)        JUST IN CASE                  GP18035\n         SLR   R4,R4                 ZERO R4 TO INDICATE NO SYSUT1\n         TM    STATUS,FGSNOMEM       IF IT WAS MEMBER NOT FOUND\n         BZ    PRNT                    THEN\nMEMNTF   MVI   RETCODE+3,8             SET RC TO 8\n         B     PRNT                  SKIP GET\nUT1X     DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         READ FIRST RECORD OR GO TO UT1EOF STRAIGHT FROM GET         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         MVI   RETCODE+3,4         SET RETURN CODE TO 4 FOR EMPTY\n         GET   (R4)\nUT1NTE   MVI   RETCODE+3,0         SET RETURN CODE TO 0 FOR NOT EMPTY\nUT1EOF   DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         ISSUE MESSAGE TO SYSPRINT                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPRNT     LTR   R5,R5               IF SYSPRINT IS NOT OPEN\n         BZ    WTOT                  SKIP MESSAGE\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         BAL   R14,GOCLEAR   CLEAR PRINT LINE; SET RDW          GP18035\n         #PUT  MSGFR              WRITE FRAME                   GP18035\n         LA    R1,MSG16                                         CB18048\n         CLI   RETCODE+3,16       CONCATENATION ?               CB18048\n         BNL   PRTP                 SHOW MSG12                  CB18048\n         LA    R1,MSG12                                         GP18035\n         CLI   RETCODE+3,12       MISSING DD ?                  GP18035\n         BNL   PRTP                 SHOW MSG12                  GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVC   MSGLINE+1(12),MSGFR+4+1                          GP18035\n         MVC   MSGLINE+12(10),=C'PROCESSING'                    GP18035\n         MVC   MSGLINE+12+10+1(44),JFCBDSNM   ADD DATA SET NAME GP18035\n         LA    R1,MSGLINE+12+10+1  START BLANK SCAN             GP18035\n         TRT   0(45,R1),TRTBLANK    FIND END                    GP18035\n         CLI   JFCBELNM,C' '      HAVE A MEMBER OR GDG ?        GP18035\n         BNH   SKIPMEM              NO                          GP18035\n         MVI   0(R1),C'('         FRAME IT                      GP18035\n         MVC   1(8,R1),JFCBELNM   ADD NAME                      GP18035\n         TRT   0(10,R1),TRTBLANK  FIND END                      GP18035\n         MVI   0(R1),C')'         FRAME                         GP18035\n         LA    R1,1(,R1)                                        GP18035\nSKIPMEM  CLI   JFCBVOLS,C' '      ANY SERIAL ?                  GP18035\n         BNH   PRINTDSN             NO; PRINT CURRENT LINE      GP18035\n         MVC   1(2,R1),=C'ON'                                   GP18035\n         MVC   4(6,R1),JFCBVOLS   SHOW WHERE                    GP18035\nPRINTDSN #PUT  MSGRDW             AND PRINT LINE                GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         L     R6,RETCODE                                       GP18035\n         L     R1,MSGTAB(R6)      GET APPROPRIATE MESSAGE       GP18035\nPRTP     #PUT  (1)                                              GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         #PUT  MSGFR                                            GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(15),=C'EMPTYTST - V1.2'                 SG1801\n         MVC   MSGLINE+20(19),=C'Time of Execution: '            SG1801\n         MVC   MSGLINE+40(23),HEADDATE                           SG1801\n         #PUT  MSGRDW                                           GP18035\n*---------------------->  PRINT HEADER TO SYSPRINT <-----------* SG1801\n         MVI   MSGLINE,X'40'                                     SG1801\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE                    SG1801\n         MVC   MSGLINE+1(15),=C'EMPTYTST - V1.2'                 SG1801\n         MVC   MSGLINE+20(9),=C'Jobname: '                       SG1801\n         MVC   MSGLINE+30(8),NJOB                                SG1801\n         MVC   MSGLINE+40(9),=C'Stepname:'                       SG1801\n         MVC   MSGLINE+51(8),PSTN                                SG1801\n         MVC   MSGLINE+61(9),=C'Jobstep: '                       SG1801\n         MVC   MSGLINE+71(8),JSTN                                SG1801\n         #PUT  MSGRDW                                           GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         ISSUE MESSAGE TO CONSOLE IF PARM=W                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nWTOT     CLI   OPTW,0              IF PARM HAS NO W\n         BE    WTOX                  SKIP WTO\n         CLI   OPTC,0              IF PARM HAS W AND C\n         BE    WTOK                  AND\n         CLI   RETCODE+3,0           RETCODE IS 0\n         BE    WTOX                  SKIP WTO\nWTOK     MVI   WTOW,X'40'          CLEAR OUTPUT AREA            GP18035\n         MVC   WTOW+1(L'WTOW-1),WTOW                            GP18035\n         L     R6,RETCODE                                       GP18035\n         L     R7,SELWTO(R6)       POINT TO MESSAGE HEAD        GP18035\n         L     R8,SUFWTO(R6)       POINT TO MESSAGE END         GP18035\n         LH    R14,0(,R7)          GET TEXT LENGTH              GP18035\n         BCTR  R14,0                                            GP18035\n         EX    R14,EXMVCWTO        MOVE TEXT TO WORK AREA       GP18035\n         LTR   R8,R8               IS THERE A SUFFIX?           GP18035\n         BZ    WTOI                  NO; WTO THE MESSAGE        GP18035\n         LA    R1,WTOW+3(R14)      START OF INSERTION(S)        GP18035\n         MVC   0(44,R1),JFCB       ADD DSN TO MESSAGE - JFCBDSNM\n         TRT   0(45,R1),TRTBLANK   POSITION TO END              GP18035\n         CLI   JFCB+44,C' '        JFCBELNM (MEMBER OR GDG)     GP18035\n         BNH   WTO5                  SKIP IF NONE\n         MVI   0(R1),C'('\n         MVC   1(8,R1),JFCB+44     JFCBELNM (MEMBER NAME)\n         TRT   0(10,R1),TRTBLANK   POINT TO END OF MEMBER       GP18035\n         MVI   0(R1),C')'\n         LA    R1,1(,R1)           POINT PAST RIGHTMOST NONBLANK\nWTO5     CLI   JFCB+118,C' '       IF VOLUME IS BLANK -JFCBVOLS\n         BE    WTO5A                SKIP VOLUME (DUMMY)\n         MVC   1(9,R1),=C'ON VOLUME'\n         MVI   10(R1),X'40'                                      SG1801\n         MVC   11(6,R1),JFCB+118   VOLUME FROM JFCB JFCBVOLS\n         LA    R1,17(,R1)          POINT PAST RIGHTMOST NONBLANK\n         MVI   17(R1),X'40'                                      SG1801\nWTO5A    LH    R14,0(,R8)          GET LENGTH OF SUFFIX - 1     GP18035\n         EX    R14,EXMVCSUF        MOVE IT                      GP18035\n         LA    R0,WTOW             WORK AREA ADDRESS            GP18035\n         SR    R1,R0               LENGTH LESS SUFFIX           GP18035\n         LA    R1,2(R14,R1)        WTO LENGTH                   GP18035\n         STH   R1,WTOW             STASH COMPLETE LENGTH        GP18035\n         LA    R1,WTOW(R1)         RESTORE END ADDRESS          GP18035\nWTOI     DS    0H\n         MVC   0(4,R1),WTMROUT     DESCRIPTOR AND ROUTING CODES GP18035\n         WTO   MF=(E,WTOW)\nWTOX     B     CLSE                                             GP18035\n         SPACE 1\nEXMVCWTO MVC   WTOW(*-*),0(R7)     MOVE LENGTH AND TEXT         GP18035\nEXMVCSUF MVC   1(*-*,R1),2(R8)     MOVE SUFFIX                  GP18035\nSELWTO   DC    A(WTM00,WTM04,WTM08,WTM12,WTM16) MESSAGE TEXT    GP18035\nSUFWTO   DC    A(WTS00,WTS04,WTS08,0,0)    MESSAGE SUFFIX       GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         CLOSE SYSUT1                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLSE     LTR   R4,R4               IF SYSUT1 NOT OPEN\n         BZ    CLSP                  SKIP CLOSE\n         CLOSE MF=(E,OPEN)                                      GP18035\n         BAL   R6,FREEPOOL\n         SPACE 1\nCLSP     LTR   R5,R5               IF SYSPRINT NOT OPEN\n         BZ    EXIT                  SKIP CLOSE\n         CLOSE MF=(E,OPENOUT)                                   GP18035\n         LR    R4,R5\n         BAL   R6,FREEPOOL\n         SPACE 1\nEXIT     L     R2,RETCODE\n         LR    R1,R13             POINT TO ADDRESS TO FREEMAIN\n         L     R0,WORKSIZ         LENGTH TO FREEMAIN\n         L     R13,4(,R13)        RESTORE ORIGINAL R13\n         FREEMAIN R,A=(1),LV=(0)\n*        DROP  R9\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE 1\nFREEPOOL TM    BUFCA+2(R4),1      FREEPOOLED BEFORE?            GP18035\n         BNZR  R6                   YES; DON'T DO IT AGAIN      GP18035\n         ICM   R1,7,BUFCA(R4)     DIRTY POOL ?                  GP18035\n         BZR   R6                   YES; DON'T ABEND (30A/90A)  GP18035\n         FREEPOOL (R4)\n         BR    R6\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*   PRINT SUBROUTINE                                                  *\n*    INPUT: R1 : AL2(LEN+4,0),CC,TEXT(<=120)                          *\n*   BUILDS APPROPRIATE RECORD IN DCB BUFFER                           *\n*    FOR MACHINE CODE, USES X'09' WRITE/SPACE                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGOPRINT  STM   R14,R7,SUBSAVE                                   GP18035\n         L     R3,PRTMXL     GET MAXIMUM DATA LENGTH            GP18035\n         LH    R7,0(,R1)     GET CALLER'S LENGTH                GP18035\n         SH    R7,=H'4'        CALLER'S RDW                     GP18035\n         LA    R6,4(,R1)     SKIP RDW                           GP18035\n         TM    RECFM(R5),X'06'  CONTROL CHARACTER               GP18035\n         BNZ   GOPRINTA                                         GP18035\n         LA    R6,1(,R6)     SKIP CC                            GP18035\n         SH    R7,=H'1'      NO CC                              GP18035\nGOPRINTA CLI   PRTIX+1,4     TEST RECFM                         CB18048\n         BE    GOPRINTB        FOR F, KEEP DCBLRECL             GP18037\n         CR    R3,R7         KEEP THE MINIMUM                   GP18035\n         BNH   *+6                                              GP18035\n         LR    R3,R7         DESIRED DATA LENGTH                GP18035\n         STH   R3,LRECL(R5)  PLACE RECORD LENGTH INTO DCB       GP18035\nGOPRINTB PUT   (R5)          GET A RECORD SPACE                 GP18035\n         LR    R2,R1         PRESET OUTPUT ADDRESS              GP18035\n         ICM   R7,8,=X'40'   REQUEST BLANK FILL                 GP18035\n         LH    R15,PRTIX     GET BRANCH INDEX                   GP18035\n         B     GOPRINTT(R15)   HANDLE BY RECFM TYPE             GP18035\nGOPRINTT  B    GOPRTF        REALLY U                           GP18035\n          B    GOPRTF                                           GP18035\n*NEXT*    B    GOPRTV                                           GP18035\nGOPRTV   LA    R0,4(,R3)     LENGTH WITH RDW                    GP18035\n         SLL   R0,16         POSITION HIGH                      GP18035\n         STCM  R0,15,0(R1)   BUILD RDW                          GP18035\n         LA    R2,4(,R1)                                        GP18035\n         LR    R1,R2         FOR MCC                            GP18035\nGOPRTF   MVCL  R2,R6         MOVE TEXT WITH FILL                GP18035\n         TM    RECFM(R5),X'02'  MCC?                            GP18035\n         BZ    GOPRINTX           NO; DONE                      GP18035\n         MVI   0(R1),X'09'   WRITE/SPACE MCC                    GP18035\nGOPRINTX LM    R14,R7,SUBSAVE                                   GP18035\n         SPACE 1\n*---------------------------------------------------------------------*\n*   Clear print line for next user                                    *\n*---------------------------------------------------------------------*\nGOCLEAR  MVI   MSGLINE,C' '                                     GP18035\n         MVC   MSGLINE+1(L'MSGLINE-1),MSGLINE  CLEAR PRINT LINE GP18035\n         MVC   MSGRDW(4),=AL2(L'MSGLINE+4,0)                    GP18035\n         BR    R14                                              GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DCB OPEN EXIT FOR SYSPRINT                                  *\n*                                                                     *\n*         SET ATTRIBUTES IF NEEDED FOR SYSOUT OR TERMINAL OR DUMMY    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         PUSH  USING                                            GP18035\n         DROP  ,                                                GP18035\n         USING PRTEXIT,R15                                      GP18035\nPRTEXIT  CLI   RECFM(R1),0         IF NO RECFM\n         BNE   *+8                   THEN\n         MVI   RECFM(R1),X'94'       SET RECFM=FBA\n         SPACE 1\n         SLR   R3,R3                                            GP18035\n         ICM   R3,3,LRECL(R1)     LOAD RECORD LENGTH            GP18035\n         BNZ   PRTEXBK              USE USER'S                  GP18035\n         LA    R3,120             DEFAULT BLOCK SIZE (NO CC)    GP18035\n         TM    RECFM(R1),X'06'    CARRIAGE CONTROL?             GP18035\n         BZ    *+8                  NO                          GP18035\n         LA    R3,1(,R3)          INCREASE DEFAULT              GP18035\n         TM    RECFM(R1),X'80'    RECFM=F OR U ?                GP18035\n         BNZ   PRTEXBK              YES; RECORD LENGTH SET      GP18035\n         LA    R3,4(,R3)          ALLOW FOR RDW                 GP18035\n*NEXT*   B     PRTEXBK                                          GP18035\n         SPACE 1\nPRTEXBK  LH    R4,BLKSI(,R1)      GET BLOCK SIZE                GP18035\n         LTR   R4,R4              ANY BLOCK SIZE?               GP18035\n         BNZ   PRTEXST              YES                         GP18035\n         LR    R4,R3              USE BLKSIZE = LRECL           GP18035\n         TM    RECFM(R1),X'80'    RECFM=U OR F ?                GP18035\n         BNZ   PRTEXST              YES; DONE                   GP18035\n         LA    R4,4(,R4)          ADD BDW TO BLOCK              GP18035\n         SPACE 1\nPRTEXST  TM    RECFM(R1),X'10'    IF NOT BLOCKED                CB18048\n         BZ    *+8                  DON'T SET LRECL             CB18048\n         STH   R3,LRECL(,R1)      SET RECORD LENGTH             GP18035\n         STH   R4,BLKSI(,R1)        AND BLOCK SIZE              GP18035\nPRTEXBR  BR    R14\n         POP   USING                                            GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DCB OPEN ABEND EXIT FOR SYSUT1                              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         PUSH  USING                                            GP18035\nUT1ABEND DS    0H\n         L     R8,0(,R1)           GET COMPLETION CODE\n         N     R8,=A(X'FFF0FF00')\n         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND\n         BE    UT1MEMBR            YES, BRANCH\n         MVI   4(R1),0             NO, ABNORMALLY TERMINATE\n         BR    R14\nUT1MEMBR OI    STATUS,FGSNOMEM     INDICATE MEMBER NOT FOUND\n         MVI   3(R1),4             IGNORE THE ABEND\n         BR    R14\n         DROP  R9\n         POP   USING                                            GP18035\n         EJECT ,\n         TITLE 'S U B S T C K  ***  MVS STCKCONV FACILITY'\n***********************************************************************\n*   THIS ROUTINE IS INVOKED BY (LOCAL) MACRO $TCKCONV AND PRODUCES    *\n*   THE SAME OUTPUT AS IBM'S STCKCONV ROUTINE UNDER ESA AND LATER.    *\n*   ADAPTED FOR INLINE USE.                                           *\n***********************************************************************\n*   PROCESS DATE - SHIFT TOD CLOCK AND DIVIDE AS PER PoOPS TO GET     *\n*   DAYS SINCE BASE, WHICH IS 1900/01/01 FOR MVS & LATER SYSTEMS      *\n***********************************************************************\n*   Input:                                                            *\n*   Time format in TIMETYPE                                           *\n*    01 BIN or MIC                                                    *\n*    02 DEC or MIC                                                    *\n*    20 STCK format                                                   *\n*                                                                     *\n*                                                                     *\n*   Date format in DATETYPE                                           *\n*    00 YYYYDDD                                                       *\n*    01 MMDDYYYY                                                      *\n*    02 DDMMYYYY                                                      *\n*    03 YYYYMMDD                                                      *\n*                                                                     *\n*    40 local time                                                    *\n***********************************************************************\nSUBSTCK  STM   R14,R12,12(R13)    SAVE A ;LOT                   GP18035\n         STCK  PLTOD                                            GP18035\n         LM    R2,R3,PLTOD   GET TOD CLOCK VALUE                GP18035\n         TM    DATETYPE,DATLOCAL  RETURN LOCAL TIME ?           GP18035\n         BZ    USEGMT                                           GP18035\n         L     R1,CVTPTR                                        GP18035\n         USING CVT,R1                                           GP18035\n         TM    CVTDCB,X'80'  MVS OR IS IT LATER ?               GP18035\n         BNZ   ADJNEW        OLD; USE TIME ZONE ADJUST          GP18035\n         AL    R2,CVTTZ      ADD OLD VERSION OF LOCAL TIME      GP18035\n         B     USEGMT        SKIP AROUND                        GP18035\nADJNEW   L     R1,CVTEXT2    GET CVT EXTENSION                  GP18035\n         USING CVTXTNT2,R1   MAP CVT EXTENSION                  GP18035\n         AL    R2,X'38'(,R1)    ADD CVTLDTOL  ADD HIGH/LEFT     GP18035\n         AL    R3,X'3C'(,R1)    ADD CVTLDTOR  ADD LOW/RIGHT     GP18035\n         BNO   USEGMT        NO CARRY                           GP18035\n         AL    R2,=F'1'      PROPAGATE CARRY                    GP18035\n         DROP  R1                                               GP18035\nUSEGMT   SRDL  R2,24         ADJUST                             GP18035\n         D     R2,=X'0141DD76'  GET DAYS SINCE 1900.001 PER PoOPS\n         ST    R3,DAYS                                          GP18035\n         ST    R2,MICS                                          GP18035\n         C     R3,=F'365'    IN FIRST YEAR ?                    GP18035\n         BNL   NOTBASE       NO                                 GP18035\n         MVC   YEAR,=F'1900'                                    GP18035\n         LA    R3,1(,R3)     FIX UP                             GP18035\n         ST    R3,DAY        SET 1900.DDD                       GP18035\n         B     MAKEDATE                                         GP18035\n         SPACE 2                                                GP18035\nNOTBASE  S     R3,=F'365'    CHANGE BASE TO 1901                GP18035\n         ST    R3,DAYS       SAVE                               GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'1461'   GET NUMBER OF LEAP YEAR EPOCHS     GP18035\n         LR    R7,R3         SAVE NUMBER OF LEAP YEARS          GP18035\n         LR    R6,R2         SAVE NUMBER OF YEARS IN CURR. 4 YEAR CYCLE\n         LA    R0,1          DEFAULT FUDGE TO 1                 GP18035\n         C     R2,=F'1460'   LAST DAY OF LEAP YEAR ?            GP18035\n         BNE   CALCYR        NO                                 GP18035\n         BCTR  R2,0                                             GP18035\n         LR    R6,R2         UPDATE                             GP18035\n         LA    R0,2          SET FUDGE TO 2                     GP18035\nCALCYR   LR    R3,R6                                            GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'365'                                       GP18035\n         AR    R2,R0         GET JULIAN DAY                     GP18035\n         ST    R2,DAY        SAVE IT                            GP18035\n         LR    R3,R6                                            GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'365'    GET YEARS IN R3                    GP18035\n         LR    R2,R7         LEAPS                              GP18035\n         SLA   R2,2          *4                                 GP18035\n         AR    R3,R2         ADD                                GP18035\n         A     R3,=F'1901'   ADD BASE                           GP18035\n         ST    R3,YEAR                                          GP18035\nMAKEDATE L     R2,YEAR                                          GP18035\n         TM    DATETYPE,3    NEED TO CONVERT DAY TO MONTH/DAY ? GP18035\n         BNZ   MAKEDMON      YES                                GP18035\n         MH    R2,=H'1000'                                      GP18035\n         A     R2,DAY        ADD DAY IN YEAR                    GP18035\n         CVD   R2,DB         PACK                               GP18035\n         L     R2,DB+4                                          GP18035\n         SRL   R2,4          REMOVE SIGN                        GP18035\n         ST    R2,PLDATE     RETURN DATE                        GP18035\n         B     GETTIME                                          GP18035\n         SPACE 1                                                GP18035\nMAKEDMON L     R1,DAY        GET BINARY DAY                     GP18035\n         SLR   R0,R0         SET FOR NO LEAP DAY ADJUSTMENT     GP18035\n*  N.B.: THIS WORKS UNTIL 2099 ONLY                             GP18035\n         EX    R2,EXISLEAP   TEST FOR MULTIPLE OF FOUR          GP18035\n         BNZ   NOTALEAP      BRANCH IF NOT A LEAP YEAR          GP18035\n         CH    R1,=H'60'     IS THIS ON, BEFORE, OR AFTER LEAP DAY?\n         BL    NOTALEAP      BEFORE; TREAT NORMALLY             GP18035\n         BH    ONELESS       AFTER; ADJUST DAY                  GP18035\n         LA    R0,1          SET LEAP DAY ADJUSTMENT            GP18035\nONELESS  BCTR  R1,0          ONE LESS TO FIX DAYS AFTER LEAP    GP18035\nNOTALEAP LA    R4,DATETABL   GET TABLE OF CUMULATIVE DAYS       GP18035\n         LR    R5,R4         SAVE                               GP18035\nFINDMON  CH    R1,2(,R4)     IN THIS MONTH?                     GP18035\n         BNH   FOUNDMON      YES; PROCESS                       GP18035\n         LA    R4,2(,R4)     INCREMENT                          GP18035\n         B     FINDMON       AND TRY AGAIN                      GP18035\nFOUNDMON SH    R1,0(,R4)     SUBTRACT DAYS IN PRIOR MONTHS      GP18035\n         AR    R1,R0         ADJUST 1 IF LEAP DAY               GP18035\n         LA    R4,2(,R4)     FINAGLE TO MAKE MONTH COME OUT RIGHT\n         SR    R4,R5         GET OFFSET TO MONTH                GP18035\n         SRL   R4,1          GET MONTH (1-12)                   GP18035\n*  WE NOW HAVE FULL YEAR IN R2, MONTH IN R4, AND DAY IN R1      GP18035\n         TM    DATETYPE,X'03'   YYYYMMDD ?                      GP18035\n         BO    DATEMISO                                         GP18035\n         TM    DATETYPE,X'01'   MMDDYYYY                        GP18035\n         BZ    DATEMDY                                          GP18035\n         MH    R4,=H'100'                                       GP18035\n         AR    R4,R1                                            GP18035\n         B     DATEMCOM                                         GP18035\nDATEMDY  MH    R1,=H'100'                                       GP18035\n         AR    R4,R1                                            GP18035\nDATEMCOM MH    R4,=H'10000'                                     GP18035\n         AR    R4,R2            MMDDYYYY OR DDMMYYYY            GP18035\n         B     DATEMOUT                                         GP18035\nDATEMISO MH    R2,=H'100'                                       GP18035\n         AR    R4,R2            YYYYMM                          GP18035\n         MH    R4,=H'100'                                       GP18035\n         AR    R4,R1            YYYYMMDD                        GP18035\nDATEMOUT CVD   R4,DB                                            GP18035\n         LM    R2,R3,DB                                         GP18035\n         SRDL  R2,4          REMOVE SIGN                        GP18035\n         ST    R3,PLDATE     RETURN DATE                        GP18035\n         SPACE 1\n***********************************************************************\n*   PROCESS TIME - HAVE MICROSECONDS, BUT LOW 12 BITS LOST IN SHIFT   *\n*   RESTORE BEFORE DECIDING WHETHER THEY'RE NEEDED                    *\n*   BRANCH BY REQUEST TYPE TO APPROPRIATE FORMATTING                  *\n***********************************************************************\nGETTIME  LM    R4,R5,PLTOD   GET CLOCK VALUE BACK               GP18035\n         SRDL  R4,24         FINAGLE                            GP18035\n         L     R3,MICS       GET REMAINDER                      GP18035\n         SLR   R2,R2         CLEAR FOR DIVIDE                   GP18035\n         SLDL  R2,12         REPOSITION                         GP18035\n         OR    R3,R4         REGAIN LOST BITS                   GP18035\n*LOCAL*  BIX   VAL=TIMETYPE,PFX=RTIM,ERR=RTIMERR,LOC=(,BIN,DEC,MIC)\n         IC    R15,TIMETYPE                                     GP18035\n         LA    R0,3                                             GP18035\n         NR    R15,R0        ISOLATE SIGNIFICANT PORTION        GP18035\n         CH    R15,=Y(4)     VALID INDEX ?                      GP18035\n         BNL   RTIMERR       NO; TOO HIGH                       GP18035\n         SLL   R15,1         CONVERT INDEX TO OFFSET            GP18035\n         LH    R15,*+8(R15)       LOAD LABEL OFFSET FROM BASE   GP18035\n         B     EMPTYTST(R15) ENTER ROUTINE                      GP18035\n         DC    AL2(RTIMERR-EMPTYTST)    1 ERROR                 GP18035\n         DC    AL2(RTIMBIN-EMPTYTST)    2        BRANCH         GP18035\n         DC    AL2(RTIMDEC-EMPTYTST)    3        BRANCH         GP18035\n         DC    AL2(RTIMMIC-EMPTYTST)    4        BRANCH         GP18035\n         SPACE 1                                                GP18035\nRTIMDEC  D     R2,=F'1000000'  CONVERT TO SECONDS               GP18035\n         CVD   R2,DB2        FRACTIONS                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'60'     GET SECONDS                        GP18035\n         ST    R2,SECS                                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'60'     GET MINUTES                        GP18035\n         ST    R2,MINS                                          GP18035\n         SLR   R2,R2                                            GP18035\n         D     R2,=F'24'                                        GP18035\n         ST    R2,HOUR                                          GP18035\n         CVD   R2,PLTIME     MAKE HOUR PACKED                   GP18035\n         MP    PLTIME,=P'100'  MAKE ROOM FOR MINUTES            GP18035\n         L     R2,MINS                                          GP18035\n         CVD   R2,DB                                            GP18035\n         AP    PLTIME,DB     ADD MINUTES                        GP18035\n         MP    PLTIME,=P'100'  MAKE ROOM FOR SECONDS            GP18035\n         L     R2,SECS                                          GP18035\n         CVD   R2,DB                                            GP18035\n         AP    PLTIME,DB     ADD SECONDS                        GP18035\n         MP    PLTIME,=P'1000000'  ROOM FOR MICROSECONDS        GP18035\n         AP    PLTIME,DB2    ADD THOSE IN                       GP18035\n*0C7*    MP    PLTIME,=P'1000'     LEFT-JUSTIFY IN RESPONSE     GP18035\n         LM    R2,R3,PLTIME  LOAD PACKED VALUE                  GP18035\n         N     R3,=X'FFFFFFF0'  REMOVE SIGN                     GP18035\n         SLDL  R2,3*4        SHIFT THREE DIGITS                 GP18035\n         O     R3,=X'0000000C'  RESTORE SIGN                    GP18035\n         STM   R2,R3,PLTIME  SAVE PACKED VALUE                  GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMMIC  SLDL  R2,12         ALIGN MICROSECONDS IN BIT 51       GP18035\n         STM   R2,R3,PLTIME  RETURN IT                          GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMBIN  D     R2,=F'10000'  CONVERT TO 1/100TH SECOND          GP18035\n         ST    R3,PLTIME     RETURN IT                          GP18035\n         B     PGMEXIT                                          GP18035\n         SPACE 1                                                GP18035\nRTIMERR  MVI   RETCODE,16    INVALID PARAMETER LIST             GP18035\n         SPACE 1                                                GP18035\nPGMEXIT  L     R14,12(,R13)                                     GP18035\n         L     R15,RETCODE                                      GP18035\n         LM    R0,R12,20(R13)                                   GP18035\n         BR    R14                                              GP18035\n         SPACE 1                                                GP18035\nEXISLEAP TM    =X'03',*-*    MULTIPLE OF FOUR?                  GP18035\n         SPACE 1                                                GP18035\n*  TABLE OF DAYS IN PRIOR MONTH                                 GP18035\nDATETABL DC   H'0,31,59,90,120,151,181,212,243,273,304,334,365' GP18035\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         DATA AREAS                                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTORG\n         SPACE 1\n         DC    0D'0'\nPATCAM   CAMLST SEARCH,*-*,*-*,*-*     PATTERN FOR DSCB 1       GP18035\n         ORG   PATCAM+4                ONLY NEED FLAGS          GP18035\n         READ  PATDECB,SF,*-*,*-*,*-*,MF=L                      GP18035\nPATDECBL EQU   *-PATDECB               LENGTH TO MOVE           GP18035\n         SPACE 1\nWTM00    WTO   'EMP000I EMPTYTST - RC = 00',                           *\n               ROUTCDE=(4,11),MF=L\nWTMROUT  EQU   *-4,4,C'X'         ROUTING/DESCRIPTOR CODES      GP18035\nWTM04    WTO   'EMP004I EMPTYTST - RC = 04',                           *\n               ROUTCDE=(4,11),MF=L\nWTM08    WTO   'EMP008I EMPTYTST - RC = 08',                           *\n               ROUTCDE=(4,11),MF=L\nWTM12    WTO   'EMP012E EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISS+\n               ING',ROUTCDE=(4,11),MF=L\nWTM16    WTO   'EMP016E EMPTYTST - RC = 16 ERROR - SYSUT1 IS CONCATENAT+\n               ION',ROUTCDE=(4,11),MF=L                         CB18048\nWTS00    DC    AL2(12-1),C'IS NOT EMPTY'                        GP18035\nWTS04    DC    AL2(08-1),C'IS EMPTY'                            GP18035\nWTS08    DC    AL2(16-1),C'MEMBER NOT FOUND'                    GP18035\n         DC    0D'0'\n         PRINT NOGEN\nUT1DCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),EODAD=UT1EOF   GP18035\nUT1DCBL  EQU   *-UT1DCB\n         SPACE 1\nPO1DCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,EODAD=UT1EOF,            *\n               RECFM=U,LRECL=264,BLKSIZE=264  CHEAT  ?          GP18035\nPO1DCBL  EQU   *-PO1DCB                                         GP18035\n         SPACE 1\nPRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PL)              GP18035\nPRTDCBL  EQU   *-PRTDCB\n         SPACE 1\nMSGTAB   DC    A(MSG00,MSG04,MSG08)                             GP18035\nMSG00    WTO   ' EMPTYTST - RC = 00 DATA SET IS NOT EMPTY',MF=L GP18035\nMSG04    WTO   ' EMPTYTST - RC = 04 DATA SET IS EMPTY',MF=L     GP18035\nMSG08    WTO   ' EMPTYTST - RC = 08 MEMBER NOT FOUND',MF=L      GP18035\nMSG12    WTO   ' EMPTYTST - RC = 12 ERROR OCCURRED - SYSUT1 MISSING',  *\n               MF=L                                             GP18035\nMSG16    WTO   ' EMPTYTST - RC = 16 ERROR - SYSUT1 IS CONCATENATION',  *\n               MF=L                                             CB18048\nMSGFR    WTO   ' EMPTYTST - -------',MF=L                       GP18035\n         SPACE 1\nTRTBLANK DC    AL1(4),255AL1(0)   QUICK END OF STRING LOCATE    GP18035\n         ORG   TRTBLANK+C' '                                    GP18035\n         DC    AL1(4)             STOP ON BLANK                 GP18035\n         ORG   ,                                                GP18035\n         SPACE 1\n         DC    0D'0'\nWORKD    DSECT\n         DS    18F\nSUBSAVE  DS    10F                Multiple use save area        GP18035\nDOUBLE   DS    D\nRETCODE  DS    F\nOPTC     DS    C\nOPTQ     DS    C\nOPTW     DS    C\nSTATUS   DS    C             STATUS FLAGS\nFGSNOMEM EQU   X'10'           MEMBER NOT FOUND\nFGSCP    EQU   X'01'           PARM IS FOR TSO CP               GP18035\nNJOB     DS    CL8                     JOB NAME                  SG1801\nPSTN     DS    CL8                     STEP NAME                 SG1801\nJSTN     DS    CL8                     JOB STEP NAME FOR PROCS   SG1801\nUT1DD    DS    CL8\nPRTDD    DS    CL8\nDEVAREA  DS    2F\nOPEN     OPEN  (*-*),MF=L         SYSUT1 OPEN/CLOSE/RDJFCB      GP18035\nOPENOUT  OPEN  (*-*),MF=L         SYSPRINT OPEN/CLOSE           GP18035\nPRTEXLST DS    F\nEXITLST  DS    2F\nPRTMXL   DS    F             MAXIMUM PRINT DATA LENGTH          GP18035\nPRTIX    DS    H             PRINT PROCESSING INDEX (0-U;4-F;8-VD)\nWORKINI  EQU   *-WORKD\nMSGRDW   DS    AL2(L'MSGLINE+4,0)                               GP18035\nMSGLINE  DS    CL121         MESSAGE WITH CC                     SG1801\n*NEW*TIMEL    TIME  LINKAGE=SYSTEM,MF=L                         GP18035\n         READ  RDECB,SF,*-*,*-*,*-*,MF=L                        GP18035\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\n         DS    X        1/2                                     GP18035\nHEADDATE DC    CL23' '  2/2\n         SPACE 1                                                GP18035\nPLTOD    DS    D             INPUT STCK VALUE                   GP18035\nPLTIME   DS    D             FAKE FOR ALIGNMENT                 GP18035\nPLDATE   DS    F             RETURNED DATE                      GP18035\nDATETYPE DS    X             DATE TYPE (0-J, 1-MDY, 2-DMY, 3-YMD)\nDATLOCAL EQU   X'40'           IF ON, ADJUST FOR LOCAL VS. GMT  GP18035\nTIMETYPE DS    X             TIME TYPE (1-BIN, 2-DEC, 3-MIC)    GP18035\n         SPACE 1                                                GP18035\nDB       DS    D             WORK WORDS                         GP18035\nDB2      DS    D             WORK WORDS                         GP18035\nMICS     DS    F             REMAINDER AFTER DAY DIVISION       GP18035\nDAYS     DS    F             DAYS FROM BASE                     GP18035\nYEAR     DS    F             YEAR                               GP18035\nDAY      DS    F             DAY IN CURRENT YEAR                GP18035\nHOUR     DS    F             TIME: HOUR                         GP18035\nMINS     DS    F             TIME: MINUTES                      GP18035\nSECS     DS    F             TIME: SECONDS                      GP18035\n         SPACE 1                                                GP18035\nUT1DCBW  DS    0F,(UT1DCBL)X\nPO1DCBW  DS    0F,(PO1DCBL)X                                    GP18035\nPRTDCBW  DS    0F,(PRTDCBL)X\nDEWORK   DS    XL256,XL8     DIRECTORY ENTRY + KEY (?)          GP18035\n         ORG   DEWORK          REUSE                            GP18035\nWTOW     DS    XL124 LONGEST WTO MSG (W/RDW)                    GP18035\nMSGW     DS    0F,CL112 LONGEST MSG IS 108, ROUNDED TO 8-BYTE MULTIPLE\n         ORG   ,                                                GP18035\n         SPACE 1\nCAMLIST  DS    5A                 (ONLY USING 4)                GP18035\n         IECSDSL1 1               MAP FORMAT 1 DSCB             GP18035\n         DS    XL5                SPACE FOR CCHHR               GP18035\nFM1FLAG1 EQU   DS1NOBDB+1,1,C'X'  MORE FLAGS                    GP18035\nFM1SMSFG EQU   FM1FLAG1+17,1,C'X'  SMS FLAG                     GP18035\n         SPACE 1\nJFCB     DS    0F                                               GP18035\n         IEFJFCBN ,                                             GP18035\n         DS    0D\nWORKLEN  EQU   *-WORKD\n         SPACE 1\nBUFCA    EQU   21                                               GP18035\nEODAD    EQU   33\nRECFM    EQU   36\nEXLSA    EQU   37\nDDNAM    EQU   40\nOFLGS    EQU   48\nBLKSI    EQU   62\nLRECL    EQU   82\n         SPACE 1                                                GP18035\n         PRINT NOGEN                                            GP18035\n         CVT   DSECT=YES\n         SPACE 1\n         YREGS ,                                                 SG1801\n         END   ENTRY0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT971/FILE971.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT971", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}