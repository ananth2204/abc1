{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011912000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1058148, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE388.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1058148, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1058148, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE388.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x11\\x06'", "DS1TRBAL": "b'f\\xcc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xc8\\x00\\x02\\x02\\xc9\\x00\\x04\\x00\\x12'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00(\\x01\\x165o\\x01\\x165o\\x14P\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-12-21T00:00:00", "modifydate": "2016-12-21T14:50:28", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-493"}, "text": "REGULAR CBT TAPE - VERSION 493    FILE:  388\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT493.FILE388\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 19 MEMBERS COUNTED; CUMULATIVE SIZE IS 9,437 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/21/16    14:50:28    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\"\\x00\\x86(_\\x01\\x165o\\x14I\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "2016-12-21T14:49:22", "lines": 17, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "$$DOC........THIS FILE\nASMFGSAM.....JCL\nASMSCHED.....JCL\nASMSRUN......JCL\nDESCRIBE.....INFORMATION ABOUT THE SYSTEM\nEXPORT.......JCL TO UNLOAD THE FILE\nFAKEGSAM.....OBJECT DECK\nFGSAM........SOURCE CODE\nGSAMCALL.....FAKE GSAM CALL MACRO\nGSB..........GSAM SSIMULATION ROUTINE\"S PARAMETER BLOCK\nSCHEDALC.....TSO CLIST\nSCHEDRUN.....SOURCE CODE\nSCHEDULE.....SOURCE CODE\nSFR..........SCHEDULE FILE RECORD MACRO\nSRUNPROC.....JCL\nTSOHELP......TSO HELP MEMBER\nOLD8FR.......OLD (?) COPY OF SFR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE388": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00\\x10\\x01\\x165o\\x01\\x165o\\x14P\\x00g\\x00g\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-12-21T00:00:00", "modifydate": "2016-12-21T14:50:10", "lines": 103, "newlines": 103, "modlines": 0, "user": "CBT-493"}, "text": "//***FILE 388 is from David B. Cole and contains his operator       *   FILE 388\n//*     commands scheduling facility.  An upgraded version of       *   FILE 388\n//*     this code is available from his web site - below:           *   FILE 388\n//*                                                                 *   FILE 388\n//*            see   schedrun.zip                                   *   FILE 388\n//*                                                                 *   FILE 388\n//*    Dave Cole has updated most of his contributions, and         *   FILE 388\n//*    they are available for direct download from his web          *   FILE 388\n//*    site at www.colesoft.com.  The following list of             *   FILE 388\n//*    his software is currently available there:                   *   FILE 388\n//*                                                                 *   FILE 388\n//*         Cole Software LLC's File Upload/Download Area           *   FILE 388\n//*                                                                 *   FILE 388\n//*       The following shareware is available for download         *   FILE 388\n//*                                                                 *   FILE 388\n//*      Filename   Platform            Description                 *   FILE 388\n//*                                                                 *   FILE 388\n//*    asm2zap.zip   z/OS      A utility for converting an          *   FILE 388\n//*                            assembly listing into SUPERZAP       *   FILE 388\n//*                            cards.                               *   FILE 388\n//*                                                                 *   FILE 388\n//*    blksptrk.zip  z/OS      A TSO command that computes and      *   FILE 388\n//*                            displays track capacities for any    *   FILE 388\n//*                            IBM DASD device for any BLKSIZE,     *   FILE 388\n//*                            with or without key fields.          *   FILE 388\n//*                                                                 *   FILE 388\n//*    macros.zip    z/OS      A set of Assembler/390 macros        *   FILE 388\n//*                            needed for assembling the various    *   FILE 388\n//*                            programs available from Cole         *   FILE 388\n//*                            Software LLC.                        *   FILE 388\n//*                                                                 *   FILE 388\n//*    schedrun.zip  z/OS      A set of MVS programs for            *   FILE 388\n//*                            scheduling the execution of System   *   FILE 388\n//*                            Operator Commands on an interval     *   FILE 388\n//*                            or calander basis. Can be used to    *   FILE 388\n//*                            control production scheduling.       *   FILE 388\n//*                                                                 *   FILE 388\n//*    xrefasm.zip   z/OS      A pair of programs for producing     *   FILE 388\n//*                            master cross-reference listings      *   FILE 388\n//*                            for multi-assembly programs.         *   FILE 388\n//*                                                                 *   FILE 388\n//*              Colesoft Marketing, Inc.                           *   FILE 388\n//*              414 3rd ST. NE                                     *   FILE 388\n//*              Charlottesville, VA 22902 USA                      *   FILE 388\n//*              540-456-8210                                       *   FILE 388\n//*              www.colesoft.com                                   *   FILE 388\n//*              email:  dbcole@gmail.com                           *   FILE 388\n//*                                                                 *   FILE 388\n//*     FOR ADDITIONAL INFORMATION PLEASE SEE THE MEMBER CALLED     *   FILE 388\n//*     $$DOC AND READ THE FOLLOWING :                              *   FILE 388\n//*                                                                 *   FILE 388\n//*     A PROGRAM HAS BEEN WRITTEN TO PRINT OUT THE AUTOMATIC       *   FILE 388\n//*     SCHEDULING FACILITY FILE BY MAY & SPEH AND IS CONTAINED     *   FILE 388\n//*     IN FILE 422 OF THIS TAPE                                    *   FILE 388\n//*                                                                 *   FILE 388\n//*     THE MACROS NEEDED FOR THIS SYSTEM ARE CONTAINED IN          *   FILE 388\n//*     FILE 408 OF THIS TAPE                                       *   FILE 388\n//*                                                                 *   FILE 388\n//*     THE SCHEDULE FACILITY MAKES IT POSSIBLE TO SCHEDULE THE     *   FILE 388\n//*     AUTOMATIC EXECUTION OF ANY OPERATOR COMMAND AT ANY TIME     *   FILE 388\n//*     OF DAY ON ANY DATE.  THE EXECUTION OF THE COMMAND CAN       *   FILE 388\n//*     BE REPEATED ACCORDING TO ANY OF A LARGE VARIETY OF          *   FILE 388\n//*     DAILY, WEEKLY, MONTHLY, AND/OR YEARLY REPEAT CYCLES.        *   FILE 388\n//*     (SEE THE ACCOMPANYING TSO HELP FILE FOR DETAILS).           *   FILE 388\n//*                                                                 *   FILE 388\n//*     THE SCHEDULE FACILITY SUPPORTS AN OVERRIDE CAPABILITY       *   FILE 388\n//*     WHEREBY PARTICULAR SETS OF PERIODICALLY SCHEDULED           *   FILE 388\n//*     COMMANDS CAN BE OVERRIDDEN ON SELECTED DATES (SUCH AS       *   FILE 388\n//*     HOLIDAYS) WITH ANOTHER SET OF COMMANDS TO BE EXECUTED       *   FILE 388\n//*     INSTEAD.  SUCH OVERRIDES CAN BE DEFINED EVEN YEARS IN       *   FILE 388\n//*     ADVANCE, IF DESIRED.                                        *   FILE 388\n//*                                                                 *   FILE 388\n//*     THE SCHEDULE FACILITY PERMITS THE DEFINITION OF A           *   FILE 388\n//*     \"WINDOW\" PERIOD (DEFINED SEPARATELY FOR EACH SCHEDULED      *   FILE 388\n//*     AUTOMATIC COMMAND) WHEREBY:                                 *   FILE 388\n//*                                                                 *   FILE 388\n//*        - IF THE SYSTEM IS DOWN AT THE TIME THAT A COMMAND       *   FILE 388\n//*          IS SCHEDULED TO BE EXECUTED,                           *   FILE 388\n//*                                                                 *   FILE 388\n//*        - BUT IF THE SYSTEM COMES UP ANY TIME DURING THE         *   FILE 388\n//*          SPECIFIED \"WINDOW PERIOD\" FOLLOWING THE COMMAND'S      *   FILE 388\n//*          SCHEDULED TIME,                                        *   FILE 388\n//*                                                                 *   FILE 388\n//*        - THEN THAT COMMAND WILL BE EXECUTED ANYWAY.             *   FILE 388\n//*                                                                 *   FILE 388\n//*     THUS THE EXECUTION OF IMPORTANT COMMANDS WON'T BE           *   FILE 388\n//*     MISSED JUST BECAUSE THE SYSTEM WASN'T UP IN TIME.           *   FILE 388\n//*                                                                 *   FILE 388\n//*     IN JES2 \"MULTI-ACCESS SPOOL\" CONFIGURATIONS, THE            *   FILE 388\n//*     SCHEDULE FACILITY'S VSAM DATA BASE CAN BE SHARED            *   FILE 388\n//*     BETWEEN MULTIPLE SYSTEMS, AND OPERATOR COMMANDS CAN BE      *   FILE 388\n//*     SCHEDULED TO EXECUTE ON EITHER ONE OR THE OTHER (OR         *   FILE 388\n//*     \"ANY\") OF THE ATTACHED CPUS.                                *   FILE 388\n//*                                                                 *   FILE 388\n//*     THE SCHEDULE FACILITY CAN MAINTAIN A LOG FILE WHERE IT      *   FILE 388\n//*     RECORDS A TIMESTAMPED COPY OF ALL OPERATOR COMMANDS         *   FILE 388\n//*     THAT IT ISSUES.                                             *   FILE 388\n//*                                                                 *   FILE 388\n//*     THE SCHEDULE FACILITY IS DESIGNED TO EXECUTE IN A JES2      *   FILE 388\n//*     ENVIRONMENT.  IF YOU WISH TO USE IT IN A JES3 SYSTEM,       *   FILE 388\n//*     THEN YOU MUST MAKE SUITABLE MODIFICATIONS TO THE            *   FILE 388\n//*     FACILITY'S SOURCE CODE.                                     *   FILE 388\n//*                                                                 *   FILE 388\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMFGSAM": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE388"}, "text": "//* JOBCARD *//\n//*\n//ASM     EXEC PGM=IFOX00,REGION=1024K,\n//             PARM=(RENT,TERM,TEST,LOAD,NODECK)\n//*\n//***********************************************************\n//*      DAVE COLE'S \"#\" MACROS                             *\n//SYSLIB   DD  DSN=SYS3.COLE.MACLIB,DISP=SHR                *\n//***********************************************************\n//*\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSSQ,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//SYSUT2   DD  UNIT=SYSSQ,SPACE=(CYL,(15,5))\n//SYSUT3   DD  UNIT=SYSSQ,SPACE=(CYL,(15,5))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSGO    DD  DSN=SYS3.SCHEDULE.SOURCLIB(FAKEGSAM),DISP=OLD\n//SYSIN    DD  DSN=SYS3.SCHEDULE.SOURCLIB(FGSAM),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMSCHED": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x009\\x009\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 57, "newlines": 57, "modlines": 0, "user": "FILE388"}, "text": "//* JOBCARD *//\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM=(TERM,TEST,LOAD,NODECK,RENT)\n//*\n//***********************************************************\n//*      DAVE COLE'S \"#\" MACROS                             *\n//SYSLIB   DD  DSN=SYS3.COLE.MACLIB,DISP=SHR                *\n//***********************************************************\n//*\n//***********************************************************\n//*      SCHEDULE'S SFR MACRO AND FAKEGSAM'S GSAMCALL AND   *\n//*      GSB MACROS. IF YALE'S GSAM IUP (AVAILABLE THROUGH  *\n//*      IBM) IS INSTALLED, THEN PRECEDE THIS DD CARD WITH  *\n//*      ONE POINTING TO THE DATASET THAT CONTAINS THE REAL *\n//*      GSAMCALL AND GSB MACROS.                           *\n//         DD  DSN=SYS3.SCHEDULE.R2L1.SOURCLIB,DISP=SHR     *\n//***********************************************************\n//*\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//*\n//***********************************************************\n//*      MACRO LIBRARY FOR COMNET'S LOCAL \"ALWFLAGS\" MACRO. *\n//*      OTHER INSTALLATIONS SHOULD REWRITE SCHEDULE'S      *\n//*      AUTHORITY CHECKING CODE AS PER THEIR LOCAL         *\n//*      STANDARDS (REMOVING THE \"ALWFLAGS\" MACRO CALL IN   *\n//*      THE PROCESS) AND REMOVE THE FOLLOWING DD CARD AS   *\n//*      WELL.                                              *\n//         DD  DSN=DS.J0PDS7.MACLIB,DISP=SHR                *\n//***********************************************************\n//*\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSSQ,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(CYL,(1,1),RLSE),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=SYS3.SCHEDULE.R2L1.SOURCLIB(SCHEDULE),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,\n//             PARM=(TEST,XREF,LET,LIST,RENT),\n//             COND=(0,LT)\n//*\n//***********************************************************\n//*      FAKEGSAM OBJECT MODULE. REMOVE IF YALE'S GSAM IUP  *\n//*      (AVAILABLE THROUGH IBM) IS INSTALLED.              *\n//SYSLIB   DD  DSN=SYS3.SCHEDULE.R2L1.SOURCLIB,DISP=SHR     *\n//***********************************************************\n//*\n//SYSLMOD  DD  DSN=SYS3.SCHEDULE.R2L1.LOAD,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  *\n         ALIAS SCHED\n         NAME  SCHEDULE(R)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMSRUN": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x009\\x009\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 57, "newlines": 57, "modlines": 0, "user": "FILE388"}, "text": "//* JOBCARD *//\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM=(TERM,TEST,LOAD,NODECK,RENT)\n//*\n//***********************************************************\n//*      DAVE COLE'S \"#\" MACROS                             *\n//SYSLIB   DD  DSN=SYS3.COLE.MACLIB,DISP=SHR                *\n//***********************************************************\n//*\n//***********************************************************\n//*      SCHEDULE'S SFR MACRO AND FAKEGSAM'S GSAMCALL AND   *\n//*      GSB MACROS. IF YALE'S GSAM IUP (AVAILABLE THROUGH  *\n//*      IBM) IS INSTALLED, THEN PRECEDE THIS DD CARD WITH  *\n//*      ONE POINTING TO THE DATASET THAT CONTAINS THE REAL *\n//*      GSAMCALL AND GSB MACROS.                           *\n//         DD  DSN=SYS3.SCHEDULE.R2L1.SOURCLIB,DISP=SHR     *\n//***********************************************************\n//*\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//*\n//***********************************************************\n//*      LOCAL JES2 MACROS ($SVT ONLY)                      *\n//         DD  DSN=JES2.MACLIB,DISP=SHR                     *\n//*                                                         *\n//*      COMNET LOCAL SUBMACROS USED BY $SVT. OTHER         *\n//*      INSTALLATIONS SHOULD DISCARD THE FOLLOWING.        *\n//         DD  DSN=DS.J0PDM7.NIHMACS,DISP=SHR               *\n//         DD  DSN=DS.J0PDM7.MACJSM,DISP=SHR                *\n//         DD  DSN=DS.J0PDB7.MACLIB,DISP=SHR                *\n//         DD  DSN=DS.J0PDS7.MACLIB,DISP=SHR                *\n//         DD  DSN=ALPHA.MACLIB30,DISP=SHR                  *\n//***********************************************************\n//*\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSSQ,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(CYL,(1,1),RLSE),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=SYS3.SCHEDULE.R2L1.SOURCLIB(SCHEDRUN),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,\n//             PARM=(TEST,XREF,LET,LIST,RENT),\n//             COND=(0,LT)\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//*\n//***********************************************************\n//*      FAKEGSAM OBJECT MODULE. REMOVE IF YALE'S GSAM IUP  *\n//*      (AVAILABLE THROUGH IBM) IS INSTALLED.              *\n//SYSLIB   DD  DSN=SYS3.SCHEDULE.R2L1.SOURCLIB,DISP=SHR     *\n//***********************************************************\n//*\n//SYSLMOD  DD  DSN=SYS3.SCHEDULE.R2L1.LOAD(SCHEDRUN),DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DESCRIBE": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\xe0\\x00\\xe0\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 224, "newlines": 224, "modlines": 0, "user": "FILE388"}, "text": "THE SCHEDULE FACILITY                            Dave Cole\n                                                 RR#2 Box 712\n                                                 Afton, Va. 22920\n                                                 October 1983\n\n                                                 (202)537-7201 (work)\n                                                 (703)456-6764 (home)\n\n\n\nFUNCTIONAL SUMMARY\n\nThe SCHEDULE facility makes it possible to schedule the automatic\nexecution of any operator command at any time of day on any date.\nThe execution of the command can be repeated according to any of\na large variety of daily, weekly, monthly, and/or yearly repeat cycles.\n(See the accompanying TSO HELP file for details).\n\nThe SCHEDULE facility supports an override capability whereby\nparticular sets of periodically scheduled commands can be overridden on\nselected dates (such as holidays) with another set of commands to be\nexecuted instead. Such overrides can be defined even years in advance,\nif desired.\n\nThe SCHEDULE facility permits the definition of a \"window\" period\n(defined separately for each scheduled automatic command) whereby:\n\n   - If the system is down at the time that a command is scheduled to\n     be executed,\n\n   - But if the system comes up any time during the specified \"window\n     period\" following the command's scheduled time,\n\n   - Then that command will be executed anyway.\n\nThus the execution of important commands won't be missed just because\nthe system wasn't up in time.\n\nIn JES2 \"Multi-Access Spool\" configurations, the SCHEDULE facility's\nVSAM data base can be shared between multiple systems, and operator\ncommands can be scheduled to execute on either one or the other (or\n\"any\") of the attached CPUs.\n\nThe SCHEDULE facility can maintain a log file where it records a\ntimestamped copy of all operator commands that it issues.\n\nThe SCHEDULE facility is designed to execute in a JES2 environment. If\nyou wish to use it in a JES3 system, then you must make suitable\nmodifications to the facility's source code.\n\n\n\nOPERATIONAL OVERVIEW\n\nThis SCHEDULE facility consists of two programs: an authorized TSO\ncommand processor named SCHEDULE, and an authorized started task named\nSCHEDRUN. The TSO command (\"SCHEDULE\") is used to create, display, and\nmanipulate the schedule of automatic operator commands. (This schedule\nis kept in a VSAM key-sequenced dataset. It is NOT the same schedule\nimplemented by the JES2 \"automatic commands facility\"). The\nstarted-task (\"SCHEDRUN\") reads the schedule of automatic commands, and\nexecutes them at the appointed time.\n\nBoth the SCHEDULE TSO command and the SCHEDRUN started-task will\nattempt to use Yale's GSAM IUP (available through IBM) to access the\n\"schedule\" VSAM dataset. If the GSAM IUP is not available, the SCHEDULE\nfacility will use normal dataset allocation and VSAM I/O to access the\nVSAM file.\n\nThe SCHEDULE TSO command operates as follows:\n\n   - If a suitably authorized TSO user wishes to examine or modify the\n     automatic commands schedule, he types SCHEDULE. He is then placed\n     in subcommand mode. The user can then use the following\n     subcommands:\n\n     - HELP to learn how to use the SCHEDULE facility.\n\n     - DISPLAY to examine the commands schedule.\n\n     - SCHEDULE to add new entries to the commands schedule.\n\n     - CHANGE either to change existing command schedule entries or to\n       create new entries that are modelled on existing entries.\n\n     - DELETE to delete entries from the commands schedule.\n\n     - END to leave the SCHEDULE command processor and return to READY.\n\n   - Upon leaving the SCHEDULE command processor, if the user has done\n     anything to change the commands schedule, then a \"S SCHEDRUN\"\n     operator command is automatically issued (via SVC 34) so that the\n     next execution time of the next automatic operator command can be\n     re-evaluated.\n\n   - If Yale's GSAM IUP is not installed, then whenever the SCHEDULE\n     command processor is invoked, it searches for its VSAM schedule\n     dataset as follows:\n\n     - If a ddname of SCHEDULE has been pre-allocated, then the command\n       processor assumes that it points to the desired VSAM dataset, so\n       it opens it and uses it.\n\n     - If the SCHEDULE ddname cannot be found, then the command\n       processor attempts to dynamically allocate (SHR) a dataset named\n       SYSVSAM.SCHEDULE. If this succeeds, then it is opened and used.\n\n     - If the dynamic allocation fails, then the SCHEDULE command\n       processor also fails.\n\nThe SCHEDRUN started-task operates as follows:\n\n   - Whenever it executes, it examines the automatic schedule to\n     determine if any automatic commands are schedule to be issued\n     right now. If so, then it issues SVC 34 to execute them.\n\n   - It then examines the schedule to see when the next automatic\n     command needs to be executed. It then issues a JES2 \"$TA ...\"\n     command that will cause SCHEDRUN to be re-executed either at that\n     time or at the next midnight, which ever is sooner. Thus unless\n     the \"$TA\" commands are interfered with, SCHEDRUN will execute\n     automatically whenever necessary.\n\nNote, \"extra\" executions of SCHEDRUN do no damage. If SCHEDRUN is\nexecuted at any time when no automatic commands are scheduled,\nit does nothing more than determine when it next needs to be executed\nand schedules a JES2 automatic command \"$TA ...\" to cause itself to be\nre-executed at the correct time.\n\nAfter each IPL a \"S SCHEDRUN\" operator command needs to be issued in\norder to get the schedule process going. This can be done in any of the\nfollowing ways:\n\n   - The operator can be instructed to manually issue the \"S SCHEDRUN\"\n     command during each IPL (not recommended since he might forget).\n\n   - A \"S SCHEDRUN\" command may be placed in SYS1.PARMLIB(COMMND00).\n\n   - A \"$VS,'S SCHEDRUN'\" command may be placed among the JES2\n     initialization parameters.\n\n\n\nTHE INSTALLATION OF THE SCHEDULE FACILITY\n\n 1.) Use IEBCOPY to load the SCHEDULE source library to disk. (Call it\n     SYS3.SCHEDULE.SOURCLIB).\n\n 2.) Use IEBCOPY to load the \"#-macros\" (miscellaneous useful macros)\n     to disk. (Call it SYS3.COLE.MACLIB).\n\n 3.) In the initialization section of the source code for both the\n     SCHEDULE and SCHEDRUN programs, there is rudimentary code for\n     checking the authority of the invoking user. Make any\n     modifications to this code that your installation deems necessary.\n\n 4.) Assemble and linkedit SYS3.SCHEDULE.SOURCLIB(SCHEDULE) into an\n     authorized TSO commands library. Use\n     SYS3.SCHEDULE.SOURCLIB(ASMSCHED) as model JCL. Note the JCL\n     changes to be made if the Yale GSAM IUP is installed on your\n     system.\n\n 5.) Update the IKJEFTE2 CSECT (Privileged TSO commands) of the\n     IKJEFT02 load module (the TSO TMP) to include the names of the\n     SCHEDULE command and its chosen aliases, if any.\n\n 6.) Assemble and linkedit SYS3.SCHEDULE.SOURCLIB(SCHEDRUN) into an\n     authorized link-library. Use SYS3.SCHEDULE.SOURCLIB(ASMSRUN) as\n     model JCL. Note the JCL changes to be made if the Yale GSAM IUP is\n     installed on your system.\n\n 7.) Create, in a proclib accessable to started-tasks, a proc named\n     SCHEDRUN. This proc should be modelled on\n     SYS3.SCHEDULE.SOURCLIB(SRUNPROC). Note, the SCHEDLOG DD may be\n     DUMMYed out. Also note the JCL changes to be made if the Yale\n     GSAM IUP is installed on your system.\n\n     - If this proc is named anything other than SCHEDRUN, then the\n       source for both the SCHEDRUN started-task and the SCHEDULE\n       TSO command must be suitably modified.\n\n 8.) If a SCHEDLOG dataset is to be used, then:\n\n     - Allocate one with the following attributes: DCB=(DSORG=PS,\n       RECFM=VB,LRECL=267,BLKSIZE=nnn)\n\n     - Implement a facility to periodically print it out and empty it.\n       This might consist of a started task (or other automatically\n       readable job) that can be invoked periodically (say monthly) by\n       the schedule facility itself.\n\n 9.) Allocate the VSAM dataset that will contain the schedule of\n     automatic commands. Use the CLIST in\n     SYS3.SCHEDULE.SOURCLIB(SCHEDALC) as a model.\n\n     - If Yale's GSAM IUP is not installed, then the VSAM dataset\n       should be named SYSVSAM.SCHEDULE. If you wish to use a different\n       name, then the source for the SCHEDULE TSO command must be\n       suitably modified.\n\n     - If Yale's GSAM IUP is installed, then this VSAM dataset must be\n       defined to GSAM with the file name SCHEDULE.\n\n10.) Copy SCHEDULE's HELP file from SYS3.SCHEDULE.SOURCLIB(TSOHELP) to\n     a suitable TSO HELP library (one that is accessible only to\n     authorized members of your staff). Name the file \"SCHEDULE\" and\n     give it any alias names that you expect to use for referencing the\n     SCHEDULE command.\n\n11.) Print out a listing of the HELP file and study it to learn how to\n     use the SCHEDULE command and its subcommands.\n\n12.) Provide a mechanism for automatically issuing the \"S SCHEDRUN\"\n     command during every IPL. This can be accomplished by:\n\n     - putting a \"S SCHEDRUN\" command in SYS1.PARMLIB(COMMND00), or by\n\n     - putting a \"$VS,'S SCHEDRUN'\" command into the JES2\n       initialization parameters dataset.\n\n13.) Logon to TSO and type SCHEDULE. This will initialize schedule's\n     VSAM dataset (first time only) and then place you in subcommand\n     mode where you can define the automatic commands schedule that you\n     desire.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXPORT": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE388"}, "text": "//*\n//UNLOAD  EXEC PGM=IEBCOPY,REGION=1024K\n//SYSPRINT DD  SYSOUT=*\n//I1       DD  DSN=SYS3.SCHEDULE.R2L1.SOURCLIB,DISP=SHR\n//I2       DD  DSN=DS.J0PDBC.MACLIB,DISP=SHR\n//O1A      DD  DSN=SYS3.SCHEDULE.SOURCLIB,UNIT=TAPE62,DISP=(,PASS)\n//O2A      DD  DSN=DS.J0PDBC.MACLIB,VOL=REF=*.O1A,LABEL=2,DISP=(,PASS)\n//O1B      DD  DSN=*.O1A,VOL=REF=*.O1A,LABEL=3,DISP=(,PASS)\n//O2B      DD  DSN=*.O2A,VOL=REF=*.O1A,LABEL=4,DISP=(,KEEP)\n         C     I=I1,O=O1A\n         C     I=I2,O=O2A\n         C     I=I1,O=O1B\n         C     I=I2,O=O2B\n//*\n//DOC     EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=SYS3.SCHEDULE.R2L1.SOURCLIB(DESCRIBE),DISP=SHR\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FAKEGSAM": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x01/\\x01/\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 303, "newlines": 303, "modlines": 0, "user": "FILE388"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FGSAM": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x04\\x18\\x04\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 1048, "newlines": 1048, "modlines": 0, "user": "FILE388"}, "text": "FAKEGSAM TITLE 'SUBSTITUTE GSAM ROUTINE'\nFAKEGSAM CSECT ,\n         PRINT NOGEN\n         SPACE 3\n*************************************************************\n*        PSA = PREFIXED STORAGE AREA                        *\n*        PSA = DSECT AND BASE                               *\n*************************************************************\n         SPACE 1\n         IHAPSA ,\n         SPACE 3\n*************************************************************\n*        TCB = TASK CONTROL BLOCK                           *\n*        TCBFIX = PREFIX AND BASIC SECTIONS DSECT           *\n*        TCBFIX = PREFIX SECTION BASE                       *\n*        TCB = BASIC SECTION BASE                           *\n*        TCBXTNT2 = COMMON EXTENSION DSECT AND BASE         *\n*************************************************************\n         SPACE 1\n         IKJTCB LIST=YES\n         SPACE 3\n*************************************************************\n*        TIOT = TASK INPUT/OUTPUT TABLE                     *\n*        DSECT CARD NOT GENERATED                           *\n*        TIOCNJOB = BASIC SECTION BASE                      *\n*        TIOENTRY = DD ENTRY BASE                           *\n*        TIOESTTB = DEVICE ENTRY BASE                       *\n*************************************************************\n         SPACE 1\nTIOT     DSECT ,\n         IEFTIOT1 ,\n         SPACE 3\n*************************************************************\n*        ACB = ACCESS METHOD CONTROL BLOCK (VSAM)           *\n*        IFGACB = DSECT AND BASE                            *\n*************************************************************\n         SPACE 1\n         IFGACB ,\n         SPACE 3\n*************************************************************\n*        RPL = REQUEST PARAMETER LIST (VSAM)                *\n*        IFGRPL = DSECT AND BASE                            *\n*************************************************************\n         SPACE 1\n         IFGRPL ,\n         SPACE 3\n*************************************************************\n*        STANDARD REGISTER NAMES                            *\n*************************************************************\n         SPACE 1\n         #REGS R,                  STANDARD REGISTER NAMES             *\n               (BASE1REG,R12),     PROGRAM BASE REGISTER               *\n               (GSBREG,R10),       GSAM REQUEST BLOCK POINTER          *\n               (FGGREG,R9),        GLOBAL DATA AREA POINTER            *\n               (FGLREG,R8)         LOCAL DATA AREA POINTER\n         SPACE 3\n         PRINT ON,GEN,NODATA\nFAKEGSAM CSECT ,\n         TITLE 'OCMA MAP -- VSAM OPEN/CLOSE/TCLOSE MESSAGE AREA HEADER'\nOCMA     DSECT ,\nOCMAFLAG DS    B                   FLAG BYTE\nOCMAFMAH EQU   B'10000000'         A COMPLETE MESSAGE HAEDER EXISTS\nOCMAMAHL DS    HL2                 L'MESSAGE AREA HEADER\nOCMARQT  DS    X                   REQUEST TYPE\nOCMARO   EQU   1                   OPEN REQUEST\nOCMARC   EQU   2                   CLOSE REQUEST\nOCMARTC  EQU   3                   TCLOSE REQUEST\nOCMADDN  DS    CL8                 DDNAME BEING OPENED/CLOSED\nOCMAECNT DS    H                   ERROR COUNT\nOCMAMCNT DS    H                   ERROR MESSAGE COUNT\nOCMAMADR DS    A                   --> 1ST ERROR MESSAGE\nOCMAHZ   DS    0X                  EO-OCMA HEADER\nOCMAHLEN EQU   OCMAHZ-OCMA         L'OCMA HEADER\n         TITLE 'GSB MAP -- GSAM REQUEST BLOCK'\n         GSB   ,\n         SPACE 3\n*************************************************************\n*        MODIFIED GSB FIELDS FOR FAKEGSAM SUPPORT           *\n*************************************************************\n         SPACE 1\nFGSBOFLG EQU   GSBFLG1             OPEN FLAGS\nFGSBOPEN EQU   B'01000000'         THE \"GSAM\" FILE HAS BEEN OPENED\nFGSBFGG  EQU   GSBINDX,4           AFTER OPEN: --> FFG\n         TITLE 'FGG MAP -- GLOBAL DATA AREA'\nFGG      DSECT ,\n         SPACE 3\n*************************************************************\n*        THE FOLLOWING AREA IS INITIALIZED AS A UNIT, SO IT *\n*        MUST CONFORM TO THE SHAPE OF THE STATIC DATA AREA  *\n*        NAMED \"FGREL\".                                     *\n*************************************************************\n         SPACE 1\nFGGREL   DS    0F                  START OF AREA\nFGGID    DC    CL8'FAKEGSAM'       AREA ID\n         SPACE 1\nFGGACB   ACB   AM=VSAM,                                                *\n               BUFND=4,                                                *\n               BUFNI=10,                                               *\n               DDNAME=FILLEDIN,    FROM GSBFILE                        *\n               MACRF=(DIR,SEQ,IN,OUT),                                 *\n               MAREA=*-*,                                              *\n               MLEN=L'FGLOCMA,                                         *\n               PASSWD=*-*          POINTS TO GSBPASSW\n         SPACE 1\nFGGRPL   RPL   ACB=FGGACB,                                             *\n               AM=VSAM,                                                *\n               AREA=*-*,           FROM GSBBUFA                        *\n               AREALEN=*-*,        FROM GSBBUFL                        *\n               ARG=*-*,            POINTS TO GSBBUFX                   *\n               ECB=*-*,            FROM GSBECB                         *\n               MSGAREA=*-*,        FROM GSBMSGA                        *\n               MSGLEN=L'GSBMSGX,                                       *\n               OPTCD=(KEY,SYN,KGE,NWAITX,MVE),                         *\n               RECLEN=*-*          FROM GSBRECL\n         SPACE 1\nFGGOPEN  OPEN  FGGACB,MF=L\n         SPACE 1\nFGGRELL  EQU   *-FGGREL            LENGTH OF AREA\n         SPACE 3\n*************************************************************\n*        SHOWCB PLIST AND SINKS                             *\n*************************************************************\n         SPACE 1\nSHOWPLST SHOWCB ACB=*-*,                                               *\n               AREA=SHOWAREA,      GSB FEEDBACK FIELDS                 *\n               LENGTH=SHOWALEN,    TOTAL FIELDS LENGTH                 *\n               FIELDS=(KEYLEN,     KEY KENGTH                          *\n               RKP,                RELATIVE KEY POSITION               *\n               LRECL,              MAX RECORD LENGTH                   *\n               CINV,               CONTROL INTERVAL LENGTH             *\n               ENDRBA),            HIGH RBA                            *\n               MF=L                LIST FORM\n         SPACE 1\nSHOWAREA DS    0F\nFGGKEYLN DS    F                   KEYLEN\nFGGKEYOF DS    F                   RKP\nFGGMAXRL DS    F                   LRECL\nFGGCISIZ DS    F                   CINV\nSHGSBNFO EQU   FGGKEYLN,*-FGGKEYLN FIELDS COPIED TO THE GSB\nFGGHIRBA DS    F                   ENDRBA\nSHOWALEN EQU   *-SHOWAREA\n         SPACE 3\n*************************************************************\n*        MISC DATA                                          *\n*************************************************************\n         SPACE 1\nFGGMKYLN DS    H                   KEY LENGTH-1\n         SPACE 1\nFGGPVKEY DS    CL256               PREVIOUS KEY (FOR CONTROLLING\n*                                  SEQUENTIAL GETS)\n         #TEST SIZE=(L'FGGPVKEY,EQ,L'FGLKEY)\n         SPACE 1\nFGGFLAG  DS    B                   FLAG BYTE\nFGGFPVKY EQU   B'10000000'         THE CONTENTS OF FGGPVKEY ARE VALID\n         SPACE 3\n*************************************************************\n*        END OF GLOBAL DATA AREA                            *\n*************************************************************\n         SPACE 1\nFGGEND   DS    0D\nFGGLEN   EQU   FGGEND-FGG\n         TITLE 'FGL MAP -- LOCAL DATA AREA'\n*************************************************************\n*        STANDARD REGISTER SAVE AREA                        *\n*************************************************************\n         SPACE 1\nFGL      #DSA  ,\n         SPACE 3\nSAVEVSIO DS    4A                  FGGET\nSAVESRCH DS    16A                 SRCH\n         SPACE 3\nFGLCALTP DS    AL1                 GSAM CALL TYPE\nFGLCTREA EQU   0                   READ\nFGLCTWRI EQU   1                   WRITE\nFGLCTREW EQU   2                   REWRITE\nFGLCTDEL EQU   3                   DELETE\nFGLCTREL EQU   4                   RELEASE\nFGLCTMON EQU   5                   MONITER\nFGLCTMAI EQU   6                   MAINTAIN\nFGLCTFIN EQU   7                   FINISH\n         SPACE 3\nFGLKEYAD DS    A                   --> KEY IN RECORD BUFFER\nFGLKEY   DS    CL256               SEARCH KEY BUFFER\n         SPACE 3\nFGLOCMA  DS    CL512               VSAM OPEN/CLOSE/TCLOSE MSG AREA\n         SPACE 3\n*************************************************************\n*        DATA FOR CALLING IDCAMS WITH A VERIFY REQUEST.     *\n*************************************************************\n         SPACE 1\nAMSPLIST DS    4A                  PLIST\nAMSIOLST DS    7A                  I/O LIST\n         SPACE 1\nVERIFY   DC    C' VERIFY FILE('\nVERDDN   DS    CL(L'ACBDDNM),C') '\n         SPACE 3\n*************************************************************\n*        END OF LOCAL DATA AREA                             *\n*************************************************************\n         SPACE 1\nFGLEND   DS    0D\nFGLLEN   EQU   FGLEND-FGL\n         TITLE 'ERROR CODES CONTROL ENTRY MAP'\nERC      DSECT ,\nERCRETUR DS    FL1                 GSAM RETURN CODE\nERCREASO DS    FL1                 GSAM REASON CODE\n         SPACE 3\n*************************************************************\n*        NOTE, THE FOLLOWING FIELDS DO NOT APPEAR IN ALL    *\n*        ENTRIES. THEY MUST NOT BE REFERENCED BY THE CODE   *\n*        AT 'FGRETURN'.                                     *\n*************************************************************\n         SPACE 1\nERCVRETU DS    FL1                 MAPPED FROM VSAM RETURN CODE\nERCVREAL DS    FL1                  AND VSAM REASON CODE RANGE (LOW)\nERCVREAH DS    FL1                  AND VSAM REASON CODE RANGE (HIGH)\nERCELEN  EQU   *-ERC               ENTRY LENGTH\n         TITLE 'ENTRY PROCESSING'\n*************************************************************\n*        STANDARD REENTRANT ENTRY LINKAGE                   *\n*************************************************************\n         SPACE 1\nFAKEGSAM #ENTER BASES=(BASE1REG),SAVTYPE=(RENT,FGLLEN)\n         SPACE 1\n         LR    FGLREG,R13          LOAD FGL POINTER\n         USING FGL,FGLREG          DECLARE ITS BASE\n         STC   R0,FGLCALTP         SAVE THE CALL TYPE\n         SPACE 1\n         LR    GSBREG,R1           COPY GSB POINTER\n         USING GSB,GSBREG          DECLARE ITS BASE\n         SR    FGGREG,FGGREG       SIGNAL NO FGG POINTER (YET)\n         SPACE 3\n*************************************************************\n*        IF THIS IS THE FIRST CALL, THEN OBTAIN A GLOBAL    *\n*        DATA AREA, INITIALIZE IT, AND OPEN AN ACB FOR THE  *\n*        VSAM FILE TO BE PROCESSED.                         *\n*************************************************************\n         SPACE 1\nFGRETRY  TM    FGSBOFLG,FGSBOPEN   IS THE ACB ALREADY OPEN?\n         BNZ   FGOPENED            YES, NOT THE FIRST CALL\n         SPACE 1\n         LA    R0,FGGLEN           NO, GET L'FGG\n         GETMAIN R,LV=(0)          ALLOCATE AN FGG\n         LR    FGGREG,R1           COPY ITS POINTER\n         USING FGG,FGGREG          DECLARE ITS BASE\n         SPACE 1\n         LR    R0,FGGREG           CLEAR -\n         LA    R1,FGGLEN            THE -\n         MVCL  R0,R14                FGG (R15=0 FROM GETMAIN)\n         ST    FGGREG,FGSBFGG      SAVE THE FGG POINTER IN THE GSB\n         SPACE 3\n*************************************************************\n*        INITIALIZE AN ACB FOR THE FILE TO BE PROCESSED.    *\n*************************************************************\n         SPACE 1\n         MVC   FGGREL(FGGRELL),FGREL INITIALIZE ACB, ETC.\n         #TEST SIZE=(FGGRELL,EQ,FGRELL)\n         LA    R15,FGGACB          --> ACB\n         USING IFGACB,R15          DCL ACB BASE\n         ST    R15,RPLDACB-IFGRPL+FGGRPL LINK TO THE RPL\n         MVC   ACBDDNM,GSBFILE     GET THE DDNAME\n         TM    GSBPASSW,255-C' '   IS A PASSWORD PROVIDED?\n         BZ    FGOPNPWD            NO, PROCEED\n         LA    R0,GSBPASSW         YES, --> IT\n         ST    R0,ACBPASSW         STORE INTO THE ACB\nFGOPNPWD DS    0H\n         SPACE 3\n*************************************************************\n*        IF THIS IS ACTUALLY A FINISH REQUEST, THEN DON'T   *\n*        BOTHER TO ACTUALLY OPEN THEN VSAM FILE.            *\n*************************************************************\n         SPACE 1\n         CLI   FGLCALTP,FGLCTFIN   \"FINISH\" REQUEST?\n         BE    FGOPENED            YES, SKIP OPEN PROCESSING\n         SPACE 3\n*************************************************************\n*        SCAN THE TIOT TO SEE IF THE DESIRED FILE IS        *\n*        DEFINED.                                           *\n*************************************************************\n         SPACE 1\n         L     R1,PSATOLD-PSA      --> MY TCB\n         L     R1,TCBTIO-TCB(,R1)  --> MY TIOT\n         LA    R0,TIOENTRY-TIOT    OFFSET TO 1ST DD ENTRY\n         USING TIOENTRY,R1         DCL TIOT DD-ENTRY BASE\n         SPACE 1\n         BALR  R14,0               LOAD LOOP HEAD\n         AR    R1,R0               --> NEXT DD ENTRY\n         ICM   R0,1,TIOELNGH       GET ITS LENGTH; EO-TIOT?\n         BZ    FGERRUDF            YES, OPEN WILL FAIL; ERROR RETURN\n         CLC   ACBDDNM,TIOEDDNM    NO, DESIRED DDNAME FOUND?\n         BNER  R14                 NOT YET; KEEP SCANNING\n         DROP  R1                  YES, RELEASE TIOENTRY BASE\n         SPACE 3\n*************************************************************\n*        THE DESIRED FILE IS DEFINED. ATTEMPT TO OPEN IT.   *\n*************************************************************\n         SPACE 1\n         LA    R0,FGLOCMA          --> OCMA\n         ST    R0,ACBMSGAR         LINK TO THE ACB\n         OPEN  ((R15)),MF=(E,FGGOPEN) OPEN THE ACB\n         DROP  R15                 RELEASE ACB BASE\n         SPACE 1\n         TM    ACBOFLGS-IFGACB+FGGACB,ACBOPEN OK?\n         BNZ   FGOPENOK            YES, DONE HERE\n         SPACE 3\n*************************************************************\n*        THE OPEN HAS FAILED. ASSUMING THAT THE FAILURE CAN *\n*        BE CORRECTED, LINK TO IDCAMS WITH A \"VERIFY\"       *\n*        REQUEST, AND THEN REATTEMPT THE OPEN REQUEST.      *\n*************************************************************\n         SPACE 1\n         LA    R14,=H'0'           --> NULL PARMS\n         SR    R15,R15             NO DDNAMES SUBSTITUTE LIST\n         SR    R0,R0               NO PAGE NUMBER PARAMETER\n         LA    R1,AMSIOLST         --> I/O ROUTINES CONTROL LIST\n         STM   R14,R1,AMSPLIST     BUILD IDCAMS' PLIST\n         OI    AMSPLIST+12,B'10000000' SET EO-PLIST SIGNAL\n         SPACE 1\n         LA    R14,2               GET I/O LIST ENTRY COUNT\n         LA    R15,=CL10'DDSYSPRINT' 1ST ENTRY IS FOR SYSPRINT\n         L     R0,=A(SYSPRINT)     --> SYSPRINT HANDLER\n         SR    R1,R1               NO USER DATA\n         LA    R2,=CL10'DDSYSIN'   2ND ENTRY IS FOR SYSIN\n         L     R3,=A(SYSIN)        --> SYSIN HANDLER\n         LA    R4,FGL              LOAD USER DATA (--> FGL)\n         STM   R14,R4,AMSIOLST     BUILD I/O LIST FOR IDCAMS\n         SPACE 1\n         MVC   VERDDN,ACBDDNM-IFGACB+FGGACB MAKE DDNAME AVAIL TO\n*                                  THE 'SYSIN' HANDLER ROUTINE THAT\n*                                  IDCAMS WILL BE REQUIRED TO USE\n         LA    R1,AMSPLIST         --> PLIST\n         LINK  EP=IDCAMS           CALL IDCAMS\n         SPACE 1\n         OPEN  MF=(E,FGGOPEN)      REATTEMPT THE OPEN REQUEST\n         TM    ACBOFLGS-IFGACB+FGGACB,ACBOPEN OPEN OK NOW?\n         BNZ   FGOPENOK            YES, DONE HERE\n         SPACE 3\n*************************************************************\n*        THE OPEN FAILURE PERSISTS. SETUP AN ERROR MESSAGE  *\n*        FOR THE CALLER, AND THEN RETURN WITH AN ERROR      *\n*        INDICATION.                                        *\n*************************************************************\n         SPACE 1\n         LA    R1,GSBMSGX          --> POSSIBLE ERROR MSG RETURN BUFFER\n         TM    GSBBUFA,B'10000000' CONTIGUOUS BUFFERS PRESENT?\n         BNZ   FGOFGMSG            YES, PROCEED\n         ICM   R1,15,GSBMSGA       NO, --> NON-CONTIG MSG BUF; EXIST?\n         BZ    FGOFMSGZ            NO, FORGET RETURNING A MESSAGE\nFGOFGMSG DS    0H                  YES, PROCEED\n         SPACE 1\n         MVI   0(R1),C' '          INSURE AT LEAST ONE BLANK IN MSG\n         LA    R0,1(,R1)           COPY AND ADVANCE MSG SCANNER\n         LA    R1,L'GSBMSGX-1      GET L'MSG SINK\n         SPACE 1\n         L     R15,=AL1(C' ',0,0,0) ASSUME NO SOURCE MSG\n         ICM   R2,15,ACBMSGAR-IFGACB+FGGACB --> OCMA; EXIST?\n         BZ    FGOFCMSG            NO, CLEAR GSBMSGA W/O A SOURCE MSG\n         USING OCMA,R2             YES, DCL OCMA BASE\n         TM    OCMAFLAG,OCMAFMAH   IS THE OCMA LONG ENOUGH TO HOLD AN\n*                                  OMCA HEADER?\n         BZ    FGOFCMSG            NO, NO SOURCE MSG\n         ICM   R14,3,OCMAMCNT      YES, WAS AT LEAST ONE MSG BUFFERED?\n         BZ    FGOFCMSG            NO, NO SOURCE MSG\n         ICM   R14,15,OCMAMADR     YES, --> 1ST MSG; EXIST?\n         BZ    FGOFCMSG            NO, NO SOURCE MSG\n         ICM   R15,3,0(R14)        YES, GET ITS LENGTH+4\n         LA    R14,4(,R14)         --> MSG DATA\n         SH    R15,=H'4'           GET L'MSG\n         CLM   R15,3,=X'7FFF'      WAS THE LENGTH VALID?\n         BNH   FGOFCMSG            YES, PROCEED\n         L     R15,=AL1(C' ',0,0,0) NO, JUST PREPAER TO CLEAR SINK\n         DROP  R2                  RELEASE OCMA BASE\nFGOFCMSG MVCL  R0,R14              COPY MSG OR JUST CLAER SINK\nFGOFMSGZ B     FGERROPN            GO MAKE AN ERROR RETURN\n         SPACE 3\n*************************************************************\n*        THE OPEN HAS SUCCEEDED.                            *\n*************************************************************\n         SPACE 1\nFGOPENOK OI    FGSBOFLG,FGSBOPEN   REMEMBER THE GSB IS NOW OPEN\n         XC    ACBMSGAR-IFGACB+FGGACB,ACBMSGAR-IFGACB+FGGACB CLEAR PTR\n         SPACE 3\n*************************************************************\n*        EXTRACT SOME INFORMATION ABOUT THE VSAM FILE.      *\n*************************************************************\n         SPACE 1\n         SHOWCB ACB=(S,FGGACB),                                        *\n               AREA=(S,SHOWAREA),  GSB FEEDBACK FIELDS                 *\n               LENGTH=SHOWALEN,    LENGTH THEREOF                      *\n               FIELDS=(KEYLEN,     KEY KENGTH                          *\n               RKP,                RELATIVE KEY POSITION               *\n               LRECL,              MAX RECORD LENGTH                   *\n               CINV,               CONTROL INTERVAL LENGTH             *\n               ENDRBA),            HIGH RBA                            *\n               MF=(G,SHOWPLST)\n         SPACE 1\n         L     R0,FGGKEYLN         GET KEY LENGTH\n         CL    R0,=A(L'FGLKEY)     WITHIN LIMITS?\n         #DIE  H                   NO, DESIGN ERROR\n         BCTR  R0,0                YES, ADJUST FOR 'EX'\n         STH   R0,FGGMKYLN         STORE\n         SPACE 3\n*************************************************************\n*        USE THE EXTRACTED INFORMATION AND OTHER            *\n*        INFORMATION TO FILL IN THE GSB FEEDBACK FIELDS     *\n*************************************************************\n         SPACE 1\n         MVC   GSBFILKL(L'GSBFILKL+L'GSBFILKO+L'GSBFILRL+L'GSBFILCL),SH*\n               GSBNFO              COPY SOME OF IT TO THE GSB\n         #TEST SIZE=(L'GSBFILKL+L'GSBFILKO+L'GSBFILRL+L'GSBFILCL,EQ,L'S*\n               HGSBNFO)\n         SPACE 1\n         MVI   GSBFILAC,GSBACC2    SIGNAL \"UPDATE ACCESS PERMITTED\"\n         MVI   GSBFILFG,GSBRDWT    SIGNAL \"FULL ACCESS PERMITTED\"\n         SPACE 3\n*************************************************************\n*        RESUME COMMON CODE. THE FILE IS OPEN. VALIDATE THE *\n*        FGG.                                               *\n*************************************************************\n         SPACE 1\nFGOPENED DS    0H\n         DROP  FGGREG              RELEASE FGG BASE\n         L     FGGREG,FGSBFGG      --> FGG\n         USING FGG,FGGREG          DCL FGG BASE\n         CLC   FGGID,FGID          IS THE FGG POINTER VALID?\n         BNE   FGERRFGG            NO, ERROR EXIT\n         SPACE 3\n*************************************************************\n*        LOCATE AND EXTRACT A COPY OF THE CURRENT           *\n*        PROCESSING KEY.                                    *\n*************************************************************\n         SPACE 1\n         L     R1,GSBBUFA          --> RECORD BUFFER (MAYBE)\n         CH    R1,=H'-1'           BUFFER IN A SPECIAL PLACE?\n         BNE   FGBUFA              NO, PROCEED\n         LA    R1,GSBBUFX          YES, --> IT\nFGBUFA   A     R1,FGGKEYOF         --> RECORD'S KEY AREA\n         ST    R1,FGLKEYAD         SAVE FOR PROCESSING\n         SPACE 1\n         LH    R15,FGGMKYLN        GET KEY LENGTH-1\n         MVC   FGLKEY(*-*),0(R1)   (EXECUTED)\n         EX    R15,*-6             COPY KEY TO LOCAL BUFFER\n         #TEST SIZE=(L'FGLKEY,LE,256)\n         SPACE 3\n*************************************************************\n*        BRANCH ACCORDING TO THE GSAM CALL TYPE.            *\n*************************************************************\n         SPACE 1\n         SR    R1,R1               CLEAR FOR INSERT\n         IC    R1,FGLCALTP         GET THE CALL TYPE CODE\n         SLL   R1,2                CNVRT TO FWORD OFFSET\n         B     *+4(R1)             ENTER BRANCH VECTOR\n         SPACE 1\n         B     FGREAD              0 READ\n         B     FGWRITE             1 WRITE\n         B     FGREWRIT            2 REWRITE\n         B     FGDELETE            3 DELETE\n         B     FGRELEAS            4 RELEASE\n         #DIE  C,15,'GSAM MONITER NOT SUPPORTED'\n         #DIE  C,15,'GSAM MAINTAIN NOT SUPPORTED'\n         B     FGFINISH            7 FINISH\n         TITLE 'FGREAD -- GSAM READ REQUESTS'\n*************************************************************\n*        IF THIS IS A SEQUENTIAL GET, THEN INSURE THAT      *\n*        VSAM'S NOTION OF THE CURRENT POSITION MATCHES THE  *\n*        USER'S NOTION. IF NOT, THEN USE THE USER'S NOTION. *\n*************************************************************\n         SPACE 1\nFGREAD   TM    GSBFLGS,GSBDIR      DIRECT REQUEST?\n         BNZ   FGRSEQOK            YES, IT'S OK; SKIP THIS JUNK\n         TM    FGGFLAG,FGGFPVKY    NO, SEQUENTIAL; IS MY RECORD OF THE\n*                                  PREVIOUSLY READ KEY VALID?\n         BZ    FGRPOSIT            PROBABLY NOT, GO ESTABLISH POSITION\n*                                  USING THE USER'S KEY\n         CLC   FGGPVKEY,FGLKEY     YES, IS THE USER PLAYING MUSICAL\n*                                  POSITIONING ON ME?\n         BNE   FGRPOSIT            YES, GO ESTABLISH POSITION USING THE\n*                                  USER'S KEY\nFGRSEQOK DS    0H                  NO, PROCEED\n         SPACE 3\n*************************************************************\n*        ATTEMPT \"JOE GET\" AND SEE WHAT HAPPENS             *\n*************************************************************\n         SPACE 1\n         SR    R15,R15             NO SPECIAL OPTCD OVERRIDES\n         BAL   R14,VSAMGET         ATTEMPT THE GET\n         CLM   R15,2,=AL1(0)       RETURN=0?\n         BNE   FGRCKEOD            NO, GO CHECK FOR EOD\n         SPACE 1\n         TM    GSBFLGS,GSBBACK+GSBDIR YES, BACKWARDS/DIRECT?\n         BNO   FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY\n         SPACE 3\n*************************************************************\n*        A \"NORMAL RETURN\" HAS BEEN RECEIVED FOR A          *\n*        BACKWARDS/DIRECT READ REQUEST. SUCH A GSAM REQUEST *\n*        IMPLIES A \"KLE\" SEARCH. IF I GOT A \"KEQ\" RESULT,   *\n*        THEN FINE. IF NOT, THEN I GOT A \"KGT\" RESULT WHICH *\n*        I NOW HAVE TO CONVERT TO A \"KLT\" RESULT.           *\n*************************************************************\n         SPACE 1\n         LH    R15,FGGMKYLN        GET KEY LENGTH-1\n         L     R1,FGLKEYAD         --> KEY JUST READ\n         CLC   FGLKEY(*-*),0(R1)   (EXECUTED)\n         EX    R15,*-6             \"KEQ\" RESULT?\n         BE    FGROKCHK            YES, GO SAVE MY NEW POSITION, IF ANY\n*        FALL THROUGH              NO, RESULT WAS \"KGT\". I MUST NOW\n*                                  CONVERT THAT TO A \"KLT\" RESULT.\n         SPACE 3\n*************************************************************\n*        FORCED SEQUENTIAL READ (FORWARDS OR BACKWARDS)     *\n*************************************************************\n         SPACE 1\nFGRNPSEQ L     R15,=AL1(RPLDIR,RPLSEQ,0,0) FORCE \"SEQ\"\n         BAL   R14,VSAMGET         GET NEXT/PRIOR SEQUENTIAL RECORD\n         B     FGROKCHK            GO SAVE MY NEW POSITION, IF ANY\n         SPACE 3\n*************************************************************\n*        \"EOD\" HANDLING                                     *\n*************************************************************\n         SPACE 1\nFGRCKEOD CLM   R15,3,=AL1(8,4)     VSAM EOD ERROR?\n         BNE   FGRCKPOS            NO, SKIP\n         TM    GSBFLGS,GSBBACK+GSBDIR YES, BACKWARDS/DIRECT REQUEST?\n         BNO   FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY\n         SPACE 3\n*************************************************************\n*        VSAM EOD HAS OCCURED DURING A GSAM                 *\n*        BACKWARDS/DIRECT REQUEST. THIS MEANS THAT THE USER *\n*        WANTS THE LAST RECORD IN THE FILE.                 *\n*************************************************************\n         SPACE 1\nFGRLASTR L     R15,=AL1(RPLSEQ,RPLDIR,0,RPLBWD+RPLLRD) FORCED OPTCDS\n         BAL   R14,VSAMGET         VSAM GET\n         B     FGROKCHK            GO SAVE MY NEW POSITION, IF ANY\n         SPACE 3\n*************************************************************\n*        \"POSITIONING ERROR\" HANDLING                       *\n*************************************************************\n         SPACE 1\nFGRCKPOS CLM   R15,3,=AL1(8,88)    VSAM POSITIONING ERROR?\n         BNE   FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY\n         SPACE 1\nFGRPOSIT L     R15,=AL1(RPLSEQ,RPLDIR,0,0) YES, FORCE DIRECT GET\n         BAL   R14,VSAMGET         VSAM GET\n         CLM   R15,2,=AL1(0)       \"AOK\"?\n         BE    FGRCKPO2            PROBABLY, GO CHECK FOR FURTHER\n         CLM   R15,3,=AL1(8,4)     NO, \"EOD\"?\n         BNE   FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY\n         TM    GSBFLGS,GSBBACK     YES, GSAM BACKWARDS REQUEST?\n         BNZ   FGRLASTR            YES, GO GET FILE'S LAST RECORD\n         B     FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY\n         SPACE 3\n*************************************************************\n*        A DIRECT GET (AFTER A POSITIONING FAILURE ON A     *\n*        SEQUENTIAL GET) HAS SUCCEEDED. IF THIS IS A GSAM   *\n*        FORWARDS REQUEST, AND IF THE VSAM-GET RESULT WAS   *\n*        \"KGT\", THEN FINE. OTHERWISE, A VSAM SEQUENTIAL GET *\n*        (FORWARDS OR BACKWARDS) IS NOW NEEDED TO GET THE   *\n*        CORRECT RECORD.                                    *\n*************************************************************\n         SPACE 1\nFGRCKPO2 LH    R15,FGGMKYLN        GET KEY LENGTH-1\n         L     R1,FGLKEYAD         --> KEY JUST READ\n         CLC   FGLKEY(*-*),0(R1)   (EXECUTED)\n         EX    R15,*-6             \"KEQ\" RESULT?\n         BE    FGRNPSEQ            YES, NOW PERFORAM A SEQ-GET\n         TM    GSBFLGS,GSBBACK     NO, RESULT WAS \"KGT\"; GSAM-BACK?\n         BNZ   FGRNPSEQ            YES, CONVERT TO \"KLT\" RESULT\n         SPACE 3\n*************************************************************\n*        THE GET REQUEST HAS EITHER COMPLETED OR FAILED. IF *\n*        IT HAS COMPLETED SUCCESSFULLY, THEN SAVE THE       *\n*        CURRENT POSITIONING INFORMATION.                   *\n*************************************************************\n         SPACE 1\nFGROKCHK NI    FGGFLAG,255-FGGFPVKY ASSUME FAILURE\n         CLI   RPLRTNCD-IFGRPL+FGGRPL,0 RIGHT?\n         BNE   FGRCODES            YES, EXIT TO THE CALLER\n         MVC   FGGPVKEY,FGLKEY     YES, SAVE THIS NEW KEY\n         OI    FGGFLAG,FGGFPVKY    REMEMVER VALID POSITIONING INFO\n         B     FGRCODES            EXIT TO THE CALLER\n         TITLE 'FGWRITE -- GSAM WRITE REQUESTS'\n*************************************************************\n*        INSERT A NEW RECORD INTO THE FILE                  *\n*************************************************************\n         SPACE 1\nFGWRITE  TM    RPLOPT2-IFGRPL+FGGRPL,RPLUPD DO I OWN A RECORD?\n         BZ    FGWNOWN             NO, PROCEED\n         SR    R15,R15             YES, SIGNAL \"NO OPTCDS OVERRIDES\"\n         BAL   R14,VSAMENDR        RELEASE THE OWNED RECORD\nFGWNOWN  DS    0H\n         SPACE 1\n         L     R15,=AL1(0,0,RPLLRD+RPLUPD,RPLNSP)\n         BAL   R14,VSAMPUT         WRITE THE NEW RECORD\n         B     FGRCODES            EXIT TO CALLER\n         TITLE 'FGREWRIT -- GSAM REWRITE REQUESTS'\n*************************************************************\n*        IF THE CURRENT RECORD IS OWNED FOR UPDATE, THEN    *\n*        REWRITE IT.                                        *\n*************************************************************\n         SPACE 1\nFGREWRIT TM    RPLOPT2-IFGRPL+FGGRPL,RPLUPD DO I OWN THE CURRENT RCD?\n         BZ    FGERRPOS            NO, ERROR EXIT\n         SPACE 1\n         SR    R15,R15             YES, SET \"DO NOT MUCK -\n         BCTR  R15,0                WITH THE OPTCDS\" SIGNAL\n         BAL   R14,VSAMPUT         REWRITE THE CURRENT RECORD\n         B     FGRCODES            EXIT TO CALLER\n         TITLE 'FGDELETE -- GSAM DELETE REQUESTS'\n*************************************************************\n*        IF THE CURRENT RECORD IS OWNED, THEN DELETE IT.    *\n*************************************************************\n         SPACE 1\nFGDELETE TM    RPLOPT2-IFGRPL+FGGRPL,RPLUPD DO I OWN THE CRNT RCD?\n         BZ    FGERRPOS            NO, ERROR EXIT\n         SPACE 1\n         SR    R15,R15             YES, SET \"DON'T MUCK WITH -\n         BCTR  R15,0                THE OPTCDS\" SIGNAL\n         BAL   R14,VSAMERAS        DELETE THE CURRENT RECORD\n         B     FGRCODES            EXIT TO CALLER\n         TITLE 'FGRELEAS -- GSAM RELEASE REQUESTS'\n*************************************************************\n*        IF I OWN THE CURRENT RECORD, THEN RELEASE IT       *\n*************************************************************\n         SPACE 1\nFGRELEAS TM    RPLOPT2-IFGRPL+FGGRPL,RPLUPD DO I OWN THE CURRENT RCD?\n         BZ    FGERRPOS            NO, ERROR EXIT\n         SR    R15,R15             YES, SIGNAL \"NO OPTCDS OVERRIDES\"\n         BAL   R14,VSAMENDR        RELEASE THE CURRENT RECORD\n         B     FGRCODES            EXIT TO CALLER\n         TITLE 'FGFINISH -- GSAM FINISH REQUESTS'\n*************************************************************\n*        CLOSE THE VSAM FILE AND RETURN TO THE CALLER.      *\n*************************************************************\n         SPACE 1\nFGFINISH NI    FGSBOFLG,255-FGSBOPEN CLEAR GSB'S \"OPEN\" SIGNAL\n         TM    ACBOFLGS-IFGACB+FGGACB,ACBOPEN IS THE FILE OPEN?\n         BZ    FGFINRET            NO, DONE HERE\n         CLOSE MF=(E,FGGOPEN)      YES, CLOSE THE VSAM FILE\n         B     FGFINRET            EXIT TO CALLER\n         TITLE 'ERROR AND NORMAL RETURNS TO CALLER'\n*************************************************************\n*        MAP THE VSAM RETURN/REASON CODES INTO GSAM CODES.  *\n*************************************************************\n         SPACE 1\nFGRCODES LA    R15,ERCMAP          --> CODES MAP\n         LA    R0,ERCELEN          GET L'MAP ENTRY\n         LA    R1,ERCMAPZ          --> EO-MAP\n         BAL   R14,SRCH            SEARCH THE MAP; VSAM CODES FOUND?\n         LR    R2,R1               (COPY THE POSSIBLE ERC PTR)\n         BE    FGRETURN            YES, TO RETURN TO FAKEGSAM'S CALLER\n         #DIE  'UNANTICIPATED VSAM RETURN/REASON CODE' NO, LOGIC ERROR\n         SPACE 3\n*************************************************************\n*        DISTINGUISH VARIOUS RETURNS                        *\n*************************************************************\n         SPACE 1\nFGFINRET BAL   R2,FGRETURN         NORMAL FINISH PROCESSING RETURN\n         DC    AL1(0,0)\n         SPACE 1\nFGERRUDF BAL   R2,FGRETURN         UNDEFINED FILE\n         DC    AL1(GSAMEFIL,0)\n         SPACE 1\nFGERROPN BAL   R2,FGRETURN         OPEN FAILURE\n         DC    AL1(GSAMEFIL,-1)\n         SPACE 1\nFGERRPOS BAL   R2,FGRETURN         UPDATE SEQUENCE ERROR\n         DC    AL1(GSAMEPOS,8)\n         SPACE 1\nFGERRFGG BAL   R2,FGRETURN         BAD FGG ERROR\n         DC    AL1(GSAMEPRM,16)\n         SPACE 3\n*************************************************************\n*        DEVELOP THE VARIOUS GSAM RETURN AND REASON CODES.  *\n*************************************************************\n         SPACE 1\n         USING ERC,R2              DCL ERC BASE\nFGRETURN LH    R15,=H'-1'          ASSUME VSAM FUNCTION CODE N/A\n         CLI   ERCRETUR,GSAMEIO    VSAM PHYSICAL I/O ERROR?\n         BNE   FGFUNCTI            NO, ASSUMPTION CORRECT\n         SR    R15,R15             YES, CLEAR FOR INSERT\n         IC    R15,RPLCMPON-IFGRPL+FGGRPL GET VSAM FUNCTION CODE\nFGFUNCTI ST    R15,GSBVSFN         STORE INTO GSB\n         SPACE 1\n         SR    R15,R15             CLEAR FOR INSERT\n         IC    R15,ERCREASO        GET GSAM REASON CODE\n         CLI   ERCREASO,X'100'-1   USE VSAM REASON CODE?\n         BNE   FGREASON            NO, PROCEED\n         IC    R15,ACBERFLG-IFGACB+FGGACB YES, ASSUME OPEN/CLOSE ERROR\n         CLI   ERCRETUR,GSAMEFIL   RIGHT?\n         BE    FGREASON            YES, PROCEED\n         IC    R15,RPLERRCD-IFGRPL+FGGRPL NO, GET VSAM REASON CODE\nFGREASON ST    R15,GSBVSAM         STORE INTO GSB\n         SPACE 3\n*************************************************************\n*        IF THE VSAM FILE IS NOT OPEN, THEN RELEASE THE FGG *\n*        AND RESTORE THE GSB.                               *\n*************************************************************\n         SPACE 1\n         TM    ACBOFLGS-IFGACB+FGGACB,ACBOPEN IS THE FILE OPEN?\n         BNZ   KEEPFGG             YES, SKIP\n         NI    FGSBOFLG,255-FGSBOPEN NO, INSURE GSB \"OPEN-FILE\" SIGNAL\n*                                  IS OFF\n         LA    R0,FGGLEN           GET L'FGG\n         FREEMAIN R,LV=(0),A=(FGGREG) RELEASE THE FGG\n         PUSH  USING               SAVE STATUS\n         DROP  FGGREG              RELEASE THE FGG BASE\n         SR    FGGREG,FGGREG       CLEAR THE FGG PTR\n         ST    FGGREG,FGSBFGG      CLEAR THE GSB LINK TO THE FGG\nKEEPFGG  DS    0H\n         SPACE 3\n         MVI   GSBECB,X'7F'        INSURE THAT THE GSB ECB IS POSTED\n         SPACE 3\n*************************************************************\n*        EXIT TO MY CALLER                                  *\n*************************************************************\n         SPACE 1\n         IC    R15,ERCRETUR        GET GSAM RETURN CODE\n         #EXIT ((R14,R12)),RC=(R15) RETURN TO CALLER\n         POP   USING               RESTORE STATUS (FGG BASE)\n         DROP  R2                  RELEASE ERC BASE\n         TITLE 'FGVSAMIO -- VSAM I/O ROUTINE'\n*************************************************************\n*        DISTINGUISH VARIOUS CALL TYPES                     *\n*************************************************************\n         SPACE 1\nVSAMGET  ICM   R14,8,=AL1(VSIOVGET-VSIOVECT) LOAD \"GET\" SIGNAL\n         B     FGVSAMIO            PROCEED\n         SPACE 1\nVSAMPUT  ICM   R14,8,=AL1(VSIOVPUT-VSIOVECT) LOAD \"PUT\" SIGNAL\n         B     FGVSAMIO            PROCEED\n         SPACE 1\nVSAMERAS ICM   R14,8,=AL1(VSIOVERA-VSIOVECT) LOAD \"ERASE\" SIGNAL\n         B     FGVSAMIO            PROCEED\n         SPACE 1\nVSAMENDR ICM   R14,8,=AL1(VSIOVEND-VSIOVECT) LOAD \"ENDREQ\" SIGNAL\n         B     FGVSAMIO            PROCEED\n         SPACE 3\n*************************************************************\n*        COMMON ENTRY POINT                                 *\n*************************************************************\n         SPACE 1\nFGVSAMIO STM   R14,R1,SAVEVSIO     SAVE REGISTERS\n         LA    R1,FGGRPL           --> RPL\n         USING IFGRPL,R1           DCL RPL BASE\n         SPACE 3\n*************************************************************\n*        SET RPL OPTCD FLAGS ASSUMING ALL RELEVENT GSB      *\n*        FLAGS ARE OFF. THEN EXAMINE THE GSB FLAGS TO SEE   *\n*        HOW THE RPL OPTCD FLAGS SHOULD REALLY BE SET.      *\n*************************************************************\n         SPACE 1\n         CL    R15,=F'-1'          SHOULD I MUCK WITH THE OPTCDS?\n         BE    VSIOPTOK            NO, SKIP\n         SPACE 1\n         MVI   RPLOPT1,RPLSEQ+RPLKGE+RPLECBSW YES, LOAD OPTCD1\n         MVI   RPLOPT2,RPLNSP+RPLKEY LOAD OPTCD2\n         SPACE 1\n         TM    GSBFLGS,GSBUPD      UPDATE?\n         BZ    FGETNUPD            NO, SKIP\n         XI    RPLOPT2,RPLNSP+RPLUPD YES, FLIP FLAGS\nFGETNUPD DS    0H\n         SPACE 1\n         TM    GSBFLGS,GSBDIR      DIRECT?\n         BZ    FGETNDIR            NO, SKIP\n         XI    RPLOPT1,RPLSEQ+RPLDIR YES, FLIP FLAGS\n         B     FGETNBWD            SKIP NEXT\nFGETNDIR DS    0H\n         SPACE 1\n         TM    GSBFLGS,GSBBACK     BACKWARDS?\n         BZ    FGETNBWD            NO, SKIP\n         OI    RPLOPT2,RPLBWD      YES, FLIP FLAG\nFGETNBWD DS    0H\n         SPACE 3\n*************************************************************\n*        PROPAGATE OTHER INFORMATION FROM THE GSB TO THE    *\n*        RPL.                                               *\n*************************************************************\n         SPACE 1\n         L     R15,GSBBUFL         GET L'BUFFER\n         ST    R15,RPLBUFL\n         SPACE 1\n         ICM   R15,15,GSBBUFA      --> BUFFER; SPECIAL LOCATION?\n         BNM   FGETBUFA            NO, PROCEED\n         LA    R15,GSBBUFX         YES, --> IT\nFGETBUFA ST    R15,RPLAREA\n         SPACE 1\n         L     R15,GSBRECL         GET L'RECORD\n         ST    R15,RPLRLEN\n         SPACE 1\n         LA    R0,L'GSBMSGX        ASSUME MSG AREA; GET MANDATORY LEN\n         LA    R15,GSBMSGX         ASSUME SPECIALLY LOCATED\n         TM    GSBBUFA,B'10000000' SPECIALLY LOCATED BUFFERS?\n         BNZ   FGETMSGA            YES, PROCEED\n         ICM   R15,15,GSBMSGA      NO, LOAD MSG AREA PTR; EXIST?\n         BNZ   FGETMSGA            YES, PROCEED\n         SR    R0,R0               GET SET L'MSG=0 (==> NO MSG AREA)\nFGETMSGA ST    R15,RPLERMSA\n         STH   R0,RPLEMLEN\n         SPACE 1\n         LA    R15,GSBECB          --> ECB\n         ST    R15,RPLECB\n         SPACE 1\n         LA    R15,FGLKEY          --> POSSIBLE SEARCH KEY\n         ST    R15,RPLARG          STORE\n         SPACE 3\n*************************************************************\n*        NOW SET RPL OPTCD BITS ACCORDING TO THE MANDATORY  *\n*        REQUIREMENTS OF THIS SPECIFIC CALL.                *\n*************************************************************\n         SPACE 1\n         L     R15,SAVEVSIO+4      RESTORE REQUIRED SETTINGS CONTROL\n         X     R15,=X'FF00FF00'    FLIP THE ANDED BITS\n         OI    RPLOPT2,*-*         (EXECUTED)\n         EX    R15,*-4             TURN ON OPTCD2 BITS\n         SPACE 1\n         SRL   R15,8               SHIFT THE SOURCE\n         B     *+8                 SKIP EXECUTED STMT\n         NI    RPLOPT2,*-*         (EXECUTED)\n         EX    R15,*-4             TURN OFF OPTCD2 BITS\n         SPACE 1\n         SRL   R15,8               SHIFT THE SOURCE\n         OI    RPLOPT1,*-*         (EXECUTED)\n         EX    R15,*-4             TURN ON OPTCD1 BITS\n         SPACE 1\n         SRL   R15,8               SHIFT THE SOURCE\n         B     *+8                 SKIP EXECUTED STMT\n         NI    RPLOPT1,*-*         (EXECUTED)\n         EX    R15,*-4             TURN OFF OPTCD1 BITS\n         SPACE 1\nVSIOPTOK DS    0H\n         SPACE 3\n*************************************************************\n*        ISSUE THE VSAM I/O REQUEST                         *\n*************************************************************\n         SPACE 1\n         DROP  R1                  RELEASE RPL BASE\n         SR    R15,R15             CLEAR FOR INSERT\n         IC    R15,SAVEVSIO        LOAD CALL TYPE\n         B     VSIOVECT(R15)       ENTRY BRANCH VECTOR\n         SPACE 1\nVSIOVECT DS    0H\nVSIOVGET B     VSIOGET\nVSIOVPUT B     VSIOPUT\nVSIOVERA B     VSIOERAS\nVSIOVEND B     VSIOENDR\n         SPACE 1\nVSIOGET  GET   RPL=(1)             VSAM GET\n         MVC   GSBRECL,RPLRLEN-IFGRPL+FGGRPL FEEDBACK THE LRECL\n         MVC   GSBRBA,RPLDDDD-IFGRPL+FGGRPL RETURN CRNT RBA (IF ANY)\n         LTR   R15,R15             GET OK?\n         BZ    VSIOAFTR            YES, PROCEED\n         NI    RPLOPT2-IFGRPL+FGGRPL,255-RPLUPD NO, CLEAR OWNERSHIP\n         NI    FGGFLAG,255-FGGFPVKY SEQ-GET POSITION INFO NOW BAD\n         B     VSIOAFTR            RESUME COMMON CODE\n         SPACE 1\nVSIOPUT  PUT   RPL=(1)             VSAM PUT\n         MVC   GSBRBA,RPLDDDD-IFGRPL+FGGRPL RETURN CRNT RBA (IF ANY)\n         NI    RPLOPT2-IFGRPL+FGGRPL,255-RPLUPD DON'T OWN RCD NOW\n         NI    FGGFLAG,255-FGGFPVKY SEQ-GET POSITION INFO NOW BAD\n         LTR   R15,R15             I/O OK?\n         BNZ   VSIOAFTR            NO, DONE HERE\n         LA    R1,FGGRPL           YES, INSURE RPL PTR RESTORED\n         B     VSIOENDR            GO FLUSH BUFFER\n         SPACE 1\nVSIOERAS ERASE RPL=(1)             VSAM ERASE\n         MVC   GSBRBA,RPLDDDD-IFGRPL+FGGRPL RETURN CRNT RBA (IF ANY)\n         NI    RPLOPT2-IFGRPL+FGGRPL,255-RPLUPD DON'T OWN RCD NOW\n         NI    FGGFLAG,255-FGGFPVKY SEQ-GET POSITION INFO NOW BAD\n         LTR   R15,R15             I/O OK?\n         BNZ   VSIOAFTR            NO, DONE HERE\n         LA    R1,FGGRPL           YES, INSURE RPL PTR RESTORED\n         SPACE 1\nVSIOENDR ENDREQ RPL=(1)            VSAM ENDREQ\n         NI    RPLOPT2-IFGRPL+FGGRPL,255-RPLUPD DON'T OWN RCD NOW\n         NI    FGGFLAG,255-FGGFPVKY SEQ-GET POSITION INFO NOW BAD\nVSIOAFTR DS    0H\n         SPACE 3\n*************************************************************\n*        HANDLE ERRORS THAT RESULT FROM REQUESTS THAT ARE   *\n*        INVALID DURING THE CREATION OF VSAM DATASETS. IF   *\n*        THE FILE IS TRUELY STILL EMPTY, THEN PASS THE      *\n*        ERROR CONDITION BACK TO THE CALLER. IF THE FILE IS *\n*        NOT EMPTY, THEN CLOSE IT AND THEN RE-OPEN IT AND   *\n*        THEN RETRY THE REQUEST.                            *\n*************************************************************\n         SPACE 1\n         CLI   RPLRTNCD-IFGRPL+FGGRPL,8 DATA ERROR?\n         BNE   VSIONCRE            NO, FORGET IT\n         CLI   RPLERRCD-IFGRPL+FGGRPL,116 YES, INVALID REQUEST DURING\n*                                  FILE CREATION?\n         BNE   VSIONCRE            NO, SKIP\n         SHOWCB MF=(E,SHOWPLST)    YES, EXTRACT THE HIGH RBA\n         SPACE 1\n         ICM   R15,15,FGGHIRBA     IS THE FILE STILL EMPTY?\n         BZ    VSIONCRE            YES, JUST RETURN THE ERROR TO CALLER\n         SPACE 1\n         CLOSE MF=(E,FGGOPEN)      NO, CLOSE THE FILE\n         NI    FGSBOFLG,255-FGSBOPEN RESET THE GSB\n         SPACE 1\n         LA    R0,FGGLEN           GET L'FGG\n         FREEMAIN R,LV=(0),A=(FGGREG) FREE THE FGG\n         SR    FGGREG,FGGREG       CLEAR FGG POINTER\n         ST    FGGREG,FGSBFGG      CLEAR FGG POINTER\n         B     FGRETRY             GO RE-OPEN AND RETRY\nVSIONCRE DS    0H\n         SPACE 3\n*************************************************************\n*        LOAD RETURN CODES AND RETURN TO CALLER             *\n*************************************************************\n         SPACE 1\n         LM    R14,R1,SAVEVSIO     RESTORE REGISTERS\n         SR    R15,R15             CLEAR FOR INSERTS\n         ICM   R15,2,RPLRTNCD-IFGRPL+FGGRPL GET VSAM RETURN CODE\n         IC    R15,RPLERRCD-IFGRPL+FGGRPL GET REASON CODE\n         BR    R14                 RETURN TO CALLER\n         TITLE 'SRCH -- SORTED LIST SEARCH ROUTINE'\nSRCH     #SEARCH SVID=SAVESRCH,CMPRID=COMPARE\n         TITLE 'COMPARE -- ERROR CODES MAP SEARCH COMPARE ROUTINE'\n         USING ERC,R15             DCL ERC BASE\nCOMPARE  CLC   RPLRTNCD-IFGRPL+FGGRPL,ERCVRETU RIGHT RETURN CODE?\n         BNER  R14                 NO, RETURN TO SEARCH\n         CLC   RPLERRCD-IFGRPL+FGGRPL,ERCVREAL YES, REASON CODE WITHIN\n*                                  LOW LIMIT?\n         BNHR  R14                 NO, OR JUST BARELY; RETURN TO SEARCH\n         CLC   RPLERRCD-IFGRPL+FGGRPL,ERCVREAH YES, WITH HI LIMIT TOO?\n         BNLR  R14                 NO, OR JUST BARELY; RETURN TO SEARCH\n         CR    R14,R14             YES, SET \"FOUND\" SIGNAL\n         BR    R14                 RETURN TO SEARCH\n         DROP  R15                 RELEASE ERC BASE\n         TITLE 'STATIC DATA AREA'\n*************************************************************\n*        THE FOLLOWING DATA IS USED TO INITIALIZE A SECTION *\n*        OF THE FGG AS A UNIT, SO IT MUST CONFORM TO THE    *\n*        SHAPE OF \"FGGREL\" IN THE FGG.                      *\n*************************************************************\n         SPACE 1\nFGREL    DS    0F                  START OF AREA\nFGID     DC    CL8'FAKEGSAM'\n         SPACE 1\nFGACB    ACB   AM=VSAM,                                                *\n               BUFND=4,                                                *\n               BUFNI=10,                                               *\n               DDNAME=FILLEDIN,    FROM GSBFILE                        *\n               MACRF=(DIR,SEQ,IN,OUT),                                 *\n               MAREA=*-*,                                              *\n               MLEN=L'FGLOCMA,                                         *\n               PASSWD=*-*          POINTS TO GSBPASSW\n         SPACE 1\nFGRPL    RPL   ACB=*-*,                                                *\n               AM=VSAM,                                                *\n               AREA=*-*,           FROM GSBBUFA                        *\n               AREALEN=*-*,        FROM GSBBUFL                        *\n               ARG=*-*,            POINTS TO GSBBUFX                   *\n               ECB=*-*,            FROM GSBECB                         *\n               MSGAREA=*-*,        FROM GSBMSGA                        *\n               MSGLEN=L'GSBMSGX,                                       *\n               OPTCD=(KEY,SYN,KGE,NWAITX,MVE),                         *\n               RECLEN=*-*          FROM GSBRECL\n         SPACE 1\nFGOPEN   OPEN  *-*,MF=L\n         SPACE 1\nFGRELL   EQU   *-FGREL             LENGTH OF AREA\n         EJECT ,\n*************************************************************\n*        VSAM TO GSAM ERROR CODES MAP                       *\n*************************************************************\n         SPACE 1\nERCMAP   DS    0X\n         DC    AL1(0,-1,0,0,X'FF')\n         DC    AL1(GSAMEKEY,-1,8,4,8)\n         DC    AL1(GSAMEKEY,-1,8,16,16)\n         DC    AL1(GSAMEDS,-1,8,24,32)\n         DC    AL1(GSAMEKEY,-1,8,36,36)\n         DC    AL1(GSAMECOR,36,8,40,40)\n         DC    AL1(GSAMEREC,-1,8,44,44)\n         DC    AL1(GSAMEREC,-1,8,100,100)\n         DC    AL1(GSAMEREC,-1,8,108,108)\n         DC    AL1(GSAMEDS,-1,8,116,116)\n         DC    AL1(GSAMEREC,-1,8,140,140)\n         DC    AL1(GSAMEDS,-1,8,144,144)\n         DC    AL1(GSAMEKEY,-1,8,148,148)\n         DC    AL1(GSAMECOR,36,8,152,152)\n         DC    AL1(GSAMEKEY,-1,8,192,192)\n         DC    AL1(GSAMEIO,-1,12,0,X'FF')\n         DC    AL1(GSAMEBUG,0,X'FF',X'FF',X'FF')\nERCMAPZ  DS    0X                  END OF MAP\n         SPACE 3\n         LTORG ,\n         TITLE 'SYSPRINT -- DUMMY SYSPRINT I/O ROUTINE FOR IDCAMS'\nSYSPRINT SR    R15,R15             SET RC=0\n         BR    R14                 NOP BACK TO IDCAMS\n         TITLE 'SYSIN -- I/O ROUTINE FOR IDCAMS'\n*************************************************************\n*                                                           *\n*        SYSIN -- THIS ROUTINE HANDLES SYSIN I/O FOR        *\n*        IDCAMS. ESSENTIALLY ALL IT DOES IS RETURN A VERIFY *\n*        COMMAND TO IDCAMS. THIS ROUTINE IS USED ONLY WHEN  *\n*        AN OPEN ATTEMPT FOR A GIVEN \"GSAM\" FILE HAS        *\n*        FAILED.                                            *\n*                                                           *\n*************************************************************\n         SPACE 1\nSYSIN    STM   R14,R12,12(R13)     SAVE ALL REGISTERS\n         LR    R12,R15             LOAD A LOCAL BASE\n         USING SYSIN,R12           DECLARE IT\n         SPACE 1\n         L     R2,4(,R1)           --> CALL FLAGS\n         CLI   0(R2),X'0C'         IS THIS A PUT REQUEST?\n         #DIE  E                   YES, LOGIC ERROR\n         CLI   0(R2),X'08'         NO, IS THIS A GET REQUEST?\n         BNE   SYSIN0              NO, OPEN/CLOSE; RETURN AOK\n         SPACE 1\n         L     R11,0(,R1)          YES, --> THE FGL\n         USING FGL,R11             DCL THE FGL BASE\n         CLI   VERIFY,0            IS THIS THE FIRST GET REQUEST?\n         BNE   SYSIN4              NO, RETURN SIGNALLING \"NO MORE\n*                                  GETS, PLEASE\"\n         MVC   VERIFY,=C' VERIFY FILE(' YES, BUILD VERIFY COMMAND\n         #TEST SIZE=(L'VERIFY,EQ,13)\n         LA    R15,VERDDN+L'VERDDN  --> PAST PROBLEM DDNAME\n         BALR  R14,0               LOAD LOOP HEAD\n         BCTR  R15,0               BACK UP\n         TM    0(R15),255-C' '     TRAILING BLANK?\n         BER   R14                 YES, CONTINUE THE BACKSCAN\n         MVC   1(2,R15),=C') '     NO, APPEND TRAILER\n         LA    R14,VERIFY-3        --> SO COMMAND\n         SR    R15,R14             GET L'COMMAND\n         LA    R14,VERIFY          --> TRUE SO-COMMAND\n         L     R1,8(,R1)           --> RETURN DATA AREA\n         STM   R14,R15,0(R1)       RETURN COMMAND DESCRIPTOR TO IDCAMS\n         B     SYSIN0              RETURN AOK\n         SPACE 3\nSYSIN4   BAL   R0,SYSINRET         RETURN RC=4\nSYSIN0   BAL   R0,SYSINRET         RETURN RC=0\nSYSINRET LA    R15,SYSINRET        LOAD VECTOR BASE\n         SR    R15,R0              GET RC\n         LA    R15,0(,R15)         PURIFY\n         SPACE 1\n         L     R14,12(,R13)        RESTORE REGISTER\n         LM    R0,R12,20(R13)      RESTORE REGISTERS\n         DROP  R11                 RELEASE FGL BASE\n         DROP  R12                 RELEASE LOCAL BASE\n         BR    R14                 RETURN TO IDCAMS\n         SPACE 3\n         LTORG ,\n         SPACE 3\n         END   ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GSAMCALL": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\xdf\\x00\\xdf\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 223, "newlines": 223, "modlines": 0, "user": "FILE388"}, "text": "         MACRO\n&LABEL   GSAMCALL &VERB,                                               *\n               &MF=,                                                   *\n               &POOL=,                                                 *\n               &FILE=,                                                 *\n               &OPTIONS=,                                              *\n               &BUFFER=,                                               *\n               &BUFFLEN=,                                              *\n               &RECLEN=,                                               *\n               &MSGAREA=,                                              *\n               &RBA=,                                                  *\n               &PASS=\n.************************************************************\n.*                                                          *\n.* MACRO NAME = GSAMCALL                                    *\n.*                                                          *\n.* DESCRIPTIVE NAME = FAKE GSAM CALL MACRO.                 *\n.*                                                          *\n.* FUNCTION = MODIFIES A GSB AND \"BALR\"S TO A GSAM          *\n.*            SIMULATION ROUTINE WHICH TRANSLATES THE GSAM  *\n.*            CALL INTO A SIMPLE VSAM CALL.                 *\n.*                                                          *\n.* PROCESSOR = ASSEMBLER XF                                 *\n.*                                                          *\n.* DATA AREAS = GSB                                         *\n.*                                                          *\n.************************************************************\n         LCLC  &SET\n         LCLC  &RESET\n         LCLA  &I,&GSAMSVC\n         LCLB  &ZERO\n         LCLC  &R\n.************************************************************\n.*       CHANGE THE FOLLOWING LINE IF A DIFFERENT SVC       *\n.*       NUMBER IS ASSIGNED AT YOUR INSTALLATION            *\n.************************************************************\n&GSAMSVC SETA  999                 IMPLIES GSAM NOT AVAILABLE\n         AIF   (K'&LABEL EQ 0).NOLAB\n&LABEL   DS    0H\n.NOLAB   ANOP\n.*       LOCATE THE GSB\n         AIF   ('&MF(1)' NE 'E').BADMF\n         AIF   ('&MF(2)' EQ '').BADMF\n         AIF   ('&MF(2)' EQ '(1)').GOTMF\n         IHBSETR &MF(2),1\n.GOTMF   ANOP\n.*       PROCESS OPTIONS LOOP\n&I       SETA  1\n.OPTLOOP AIF   ('&OPTIONS(&I)' EQ '').ENDOPT\n         AIF   ('&OPTIONS(&I)' NE 'RESET').NZERO\n&ZERO    SETB  (1)\n         AGO   .NEXTOPT\n.NZERO   AIF   ('&OPTIONS(&I)' NE 'INITIAL').NA1\n         MVC   GSBID-GSB(4,1),=CL4'GSB'\n         XC    4(GSBLEN-4,1),4(1)\n&ZERO    SETB  (1)\n         AGO   .NEXTOPT\n.NA1     AIF   ('&OPTIONS(&I)' NE 'WAIT').NA2\n&SET     SETC  '&SET+GSBWAIT'\n         AGO   .NEXTOPT\n.NA2     AIF   ('&OPTIONS(&I)' NE 'NOWAIT').NB1\n&RESET   SETC  '&RESET-GSBWAIT'\n         AGO   .NEXTOPT\n.NB1     AIF   ('&OPTIONS(&I)' NE 'UPDATE').NB2\n&SET     SETC  '&SET+GSBUPD'\n         AGO   .NEXTOPT\n.NB2     AIF   ('&OPTIONS(&I)' NE 'NOUPDATE').NC1\n&RESET   SETC  '&RESET-GSBUPD'\n         AGO   .NEXTOPT\n.NC1     AIF   ('&OPTIONS(&I)' NE 'ASYNC').NC2\n&SET     SETC  '&SET+GSBASYNC'\n         AGO   .NEXTOPT\n.NC2     AIF   ('&OPTIONS(&I)' NE 'SYNC').ND1\n&RESET   SETC  '&RESET-GSBASYNC'\n         AGO   .NEXTOPT\n.ND1     AIF   ('&OPTIONS(&I)' NE 'DIR').ND2\n&SET     SETC  '&SET+GSBDIR'\n         AGO   .NEXTOPT\n.ND2     AIF   ('&OPTIONS(&I)' NE 'SEQ').NE1\n&RESET   SETC  '&RESET-GSBDIR'\n         AGO   .NEXTOPT\n.NE1     AIF   ('&OPTIONS(&I)' NE 'BACK').NE2\n&SET     SETC  '&SET+GSBBACK'\n         AGO   .NEXTOPT\n.NE2     AIF   ('&OPTIONS(&I)' NE 'FWD').NF1\n&RESET   SETC  '&RESET-GSBBACK'\n         AGO   .NEXTOPT\n.NF1     AIF   ('&OPTIONS(&I)' NE 'PTY').NF2\n&SET     SETC  '&SET+GSBPTY'\n         AGO   .NEXTOPT\n.NF2     AIF   ('&OPTIONS(&I)' NE 'NOPTY').NH1\n&RESET   SETC  '&RESET-GSBPTY'\n         AGO   .NEXTOPT\n.NH1     AIF   ('&OPTIONS(&I)' NE 'ABTERM').NH2\n&SET     SETC  '&SET+GSBABTRM'\n         AGO   .NEXTOPT\n.NH2     AIF   ('&OPTIONS(&I)' NE 'NOABTERM').NI1\n&RESET   SETC  '&RESET-GSBABTRM'\n         AGO   .NEXTOPT\n.NI1     AIF   ('&OPTIONS(&I)' NE 'DEBUG').NI2\n&SET     SETC  '&SET+GSBDEBUG'\n         AGO   .NEXTOPT\n.NI2     AIF   ('&OPTIONS(&I)' NE 'NODEBUG').NJ1\n&RESET   SETC  '&RESET-GSBDEBUG'\n         AGO   .NEXTOPT\n.NJ1     MNOTE 8,'GSAM002E INVALID OPTION &OPTIONS(&I)'\n.NEXTOPT ANOP\n&I       SETA  &I+1\n         AGO   .OPTLOOP\n.ENDOPT  ANOP\n.*       NOW EXPAND OUT OPTION BIT SETTING INSTRUCTIONS\n         AIF   (&ZERO).SET2\n         AIF   ('&SET' EQ '').SET1\n&SET     SETC  '&SET'(2,K'&SET-1)\n         OI    GSBFLGS-GSB(1),&SET\n.SET1    AIF   ('&RESET' EQ '').SET3\n         NI    GSBFLGS-GSB(1),X'FF'&RESET\n         AGO   .SET3\n.SET2    AIF   ('&SET' EQ '').SET3\n&SET     SETC  '&SET'(2,K'&SET-1)\n         MVI   GSBFLGS-GSB(1),&SET\n.SET3    ANOP\n         AIF   ('&POOL' EQ '').NOPOOL\n&R       SETC  '&POOL(1)'\n         AIF   ('&R' NE '&POOL').GOTPOOL\n         LA    15,&POOL\n&R       SETC  '15'\n.GOTPOOL ANOP\n         STH   &R,GSBPOOL-GSB(,1)\n.NOPOOL  AIF   ('&FILE' EQ '').NOFILE\n         AIF   ('&FILE'(1,1) NE '''').GETFILE\n         MVC   GSBFILE-GSB(8,1),=CL8&FILE\n         AGO   .NOFILE\n.GETFILE ANOP\n&R       SETC  '&FILE(1)'\n         AIF   ('&R' NE '&FILE').GOTFILE\n         LA    15,&FILE\n&R       SETC  '15'\n.GOTFILE ANOP\n         MVC   GSBFILE-GSB(8,1),0(&R)\n.NOFILE  AIF   ('&BUFFER' EQ '').NOBUF\n&R       SETC  '&BUFFER(1)'\n         AIF   ('&R' NE '&BUFFER').GOTBUF\n         AIF   ('&BUFFER' NE '-1').GETBUF\n         SR    15,15\n         BCTR  15,0\n         AGO   .GETBUF2\n.GETBUF  ANOP\n         LA    15,&BUFFER\n.GETBUF2 ANOP\n&R       SETC  '15'\n.GOTBUF  ANOP\n         ST    &R,GSBBUFA-GSB(,1)\n.NOBUF   AIF   ('&BUFFLEN' EQ '').NOBUFL\n&R       SETC  '&BUFFLEN(1)'\n         AIF   ('&R' NE '&BUFFLEN').GOTBUFL\n         LA    15,&BUFFLEN\n&R       SETC  '15'\n.GOTBUFL ANOP\n         ST    &R,GSBBUFL-GSB(,1)\n.NOBUFL  AIF   ('&RECLEN' EQ '').NORECL\n&R       SETC  '&RECLEN(1)'\n         AIF   ('&R' NE '&RECLEN').GOTRECL\n         LA    15,&RECLEN\n&R       SETC  '15'\n.GOTRECL ANOP\n         ST    &R,GSBRECL-GSB(,1)\n.NORECL  AIF   ('&MSGAREA' EQ '').NOMSG\n&R       SETC  '&MSGAREA(1)'\n         AIF   ('&R' NE '&MSGAREA').GOTMSG\n         LA    15,&MSGAREA\n&R       SETC  '15'\n.GOTMSG  ANOP\n         ST    &R,GSBMSGA-GSB(,1)\n.NOMSG   AIF   ('&RBA' EQ '').NORBA\n&R       SETC  '&RBA(1)'\n         AIF   ('&R' NE '&RBA').GOTRBA\n         LA    15,&RBA\n&R       SETC  '15'\n.GOTRBA  ANOP\n         MVC   GSBRBA-GSB(4,1),0(&R)\n.NORBA   AIF   ('&PASS' EQ '').NOPASS\n&R       SETC  '&PASS(1)'\n         AIF   ('&R' NE '&PASS').GOTPASS\n         LA    15,&PASS\n&R       SETC  '15'\n.GOTPASS ANOP\n         ST    &R,GSBPASSW-GSB(,1)\n.NOPASS  AIF   ('&VERB' EQ 'MODIFY').EXIT\n         AIF   ('&VERB' NE 'READ').NREAD\n         SR    0,0                 INDICATE READ\n         AGO   .SVC\n.NREAD   AIF   ('&VERB' NE 'WRITE').NWRITE\n         LA    0,1                 INDICATE WRITE\n         AGO   .SVC\n.NWRITE  AIF   ('&VERB' NE 'REWRITE').NREWRIT\n         LA    0,2                 INDICATE REWRITE\n         AGO   .SVC\n.NREWRIT AIF   ('&VERB' NE 'DELETE').NDEL\n         LA    0,3                 INDICATE DELETE\n         AGO   .SVC\n.NDEL    AIF   ('&VERB' NE 'RELEASE').NRLSE\n         LA    0,4                 INIDCATE RELEASE\n         AGO   .SVC\n.NRLSE   AIF   ('&VERB' NE 'MONITOR').NMON\n         LA    0,5                 INDICATE MONITOR\n         AGO   .SVC\n.NMON    AIF   ('&VERB' NE 'MAINTAIN').NMAINT\n         LA    0,6                 INDICATE MAINTAIN\n         AGO   .SVC\n.NMAINT  AIF   ('&VERB' NE 'FINISH').VERBERR\n         LA    0,7\n         AGO   .SVC\n.VERBERR MNOTE 8,'GSAM001E UNRECOGNIZED VERB: &VERB'\n.SVC     AIF   (&GSAMSVC GT 255).FAKEIT\n         SVC   &GSAMSVC            ISSUE SVC\n         MEXIT\n.FAKEIT  ANOP\n         L     R15,=V(FAKEGSAM)    --> SUBSTITUTE ROUTINE\n         BALR  R14,R15             GO PERFORM THE VSAM I/O\n         MEXIT\n.BADMF   MNOTE 8,'GSAM003E IMPROPER OR OMITTED ''MF'' PARAMETER'\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GSB": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\x9a\\x00\\x9a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 154, "newlines": 154, "modlines": 0, "user": "FILE388"}, "text": "         MACRO\n         GSB   &DSECT=YES\n.************************************************************\n.*                                                          *\n.* MACRO NAME = GSB                                         *\n.*                                                          *\n.* DESCRIPTIVE NAME = GSAM SIMULATION ROUTINE'S PARAMETER   *\n.*                    BLOCK.                                *\n.*                                                          *\n.* PROCESSOR = ASSEMBLER XF                                 *\n.*                                                          *\n.************************************************************\n*************************************************************\n*                                                           *\n*        GSB -- GSAM SVC PARAMETER BLOCK                    *\n*                                                           *\n*************************************************************\n         SPACE 1\n         IEZBITS ,\n         AIF   ('&DSECT' NE 'YES').NODSECT\nGSB      DSECT ,\n         AGO   .YESDSEC\n.NODSECT ANOP\nGSB      DS    0F                  ALIGNMENT\n.YESDSEC ANOP\nGSBID    DC    CL4'GSB'            MUST BE FILLED IN\nGSBFILE  DS    CL8                 FILE NAME DEFINED TO GSRTASK\nGSBPOOL  DS    H                   VALUES 0-7. KEY OF GSR POOL.\nGSBFLGW  DS    0H                  OPTION BITS FOR USER -\nGSBFLG1  DS    X                    IN HALFWORD SO THEY CAN -\nGSBFLGS  DS    X                     BE SET IN FORTRAN AND COBOL\nGSBWAIT  EQU   BIT0                INDICATION THAT USER\n*                                  WANTS TO WAIT FOR A\n*                                  RECORD. APPLICABLE ONLY\n*                                  IF UPDATE INDICATOR SET.\nGSBUPD   EQU   BIT1                USER WANTS TO UPDATE THE\n*                                  RECORD. GSAM WILL OBTAIN\n*                                  OWNERSHIP OF THE RECORD\nGSBASYNC EQU   BIT2                THE USER WANTS TO\n*                                  ASYNCHRONOUSLY CONTEND FOR\n*                                  RECORD OWNERSHIP.\n*                                  GSBUPD MUST BE ON,\n*                                  GSBWAIT MUST BE OFF\nGSBDIR   EQU   BIT3                THIS IS A DIRECT REQUEST.\n*                                  FOR A KSDS, A KEY IS IN\n*                                  THE BUFFER. OTHERWISE, IT\n*                                  IS IN GSBRBA.\nGSBBACK  EQU   BIT4                THIS IS A 'BACKWARDS'\n*                                  OPERATION. THE USER WANTS\n*                                  TO SEQUENTIALLY READ RECORDS\n*                                  IN DESCENDING ORDER OF KEY OR\n*                                  ADDRESS. GSBDIR MUST BE OFF.\nGSBPTY   EQU   BIT5                PRIORITY REQUEST. CALLER\n*                                  MUST BE IN SYSTEM KEY OR\n*                                  SUPERVISOR STATE. UPDATE BIT\n*                                  MUST BE ON. CALLER WILL\n*                                  STEAL RECORD OWNERSHIP FROM\n*                                  ANYONE WHO HOLDS IT.\nGSBABTRM EQU   BIT6                ABEND MY TASK WHEN GSAM\n*                                  GOES DOWN OR THIS FILE IS\n*                                  PURGED\nGSBDEBUG EQU   BIT7                INVOKE DBC (REQUIRES AUTH\n*                                  LEVEL 2 AND DEBUG FLAG)\nGSBINDX  DS    H                   INDEX OF OUR GSAM PLACEHOLDER\n*                                  SET TO ZERO BEFORE FIRST CALL\n*                                  USER MUST NOT SUBSEQUENTLY\n*                                  MODIFY THIS FIELD\nGSBRSV1  DS    H                   RESERVED\nGSBBUFL  DS    F                   TOTAL LENGTH OF BUFFER WHOSE\n*                                  ADDRESS IS SPECIFIED IN GSBBUFA.\n*                                  SPECIFIED BY USER.\n*                                  ON A READ REQUEST, BUFFER IS\n*                                  PADDED WITH BLANKS FOR A LENGTH OF\n*                                  GSBBUFL.\n*                                  CANNOT BE GREATER THAN INSTALLATION\n*                                  SPECIFIED MAX.\nGSBBUFA  DS    A                   -> USER BUFFER FOR READS, REWRITES,\n*                                  DELETES.\n*                                  IF F'-1' THEN THE MSG AREA & BUFFER\n*                                  FOLLOW THE GSB (FOR LANGUAGES THAT\n*                                  DO NOT SUPPORT THE PTR DATA TYPE)\nGSBRECL  DS    A                   FOR READ, LENGTH OF BUFFER RETURNED\n*                                  TO USER. FOR REWRITE, WRITE, LENGTH\n*                                  OF RECORD, SUPPLIED BY USER.\n*                                  MUST BE >0, <=GSBBUFL\nGSBMSGA  DS    A                   ->128 BYTE AREA FOR RETURNING I/O\n*                                  ERROR MESSAGES, OR NULL.\nGSBVSAM  DS    F                   VSAM FEEDBACK CODE THAT CAUSED\n*                                  THE SVC'S NON-0 RETURN CODE. 0 IF\n*                                  NONE APPLIES.\n*                                  OR, ON SUCCESSFUL COMPLETION,\n*                                  THE VSAM FEEDBACK CODE FOR 0\n*                                  RETURN CODE. (SEE VSAM MANUAL).\nGSBVSFN  DS    F                   VSAM FUNCTION CODE ON LOGICAL\n*                                  OR PHYSICAL ERROR. -1 WHEN NONE\n*                                  APPLIES.\nGSBECB   DS    A                   ECB WHICH WILL BE POSTED\n*                                  WHEN ASYNCHRONOUS REQUEST FOR\n*                                  RECORD OWNERSHIP COMPLETES\nGSBRBA   DS    F                   RBA OF RECORD FOR READ, REWRITE,\n*                                  WRITE (RETURNED BY SVC).\n*                                  ONLY TRUE WHEN GSBPATH IS OFF\n*                                  RBAS ARE NOT RETURNED BY VSAM FOR\n*                                  A PATH.\nGSBPASSW DS    CL8                 PASSWORD-FOR EXAMINATION BY\n*                                  INSTALLATION EXITS\n*        THE GSBFIL.. FIELDS ARE RETURNED TO THE USER\n*        WHENEVER THE GSAM FILE SPECIFIED IS FOUND BY THE SVC.\nGSBFILKL DS    F                   KEY LENGTH OF FILE. 0 FOR ESDS.\nGSBFILKO DS    F                   KEY OFFSET IN RECS. 0 FOR ESDS.\n*                                  0-INDEXED.\nGSBFILRL DS    F                   MAXINUM RECORD LENGTH FOR THE FILE.\nGSBFILCL DS    F                   CONTROL INTERVAL LENGTH OF FILE\n*                                  (RETURNED W/ OTHER GSBFIL.. FIELDS)\nGSBFILAC DS    C                   ACCESS CODE OF FILE\n*                                  RETURNED WITH OTHER GSBFIL.. INFO\nGSBACC1  EQU   C'1'                READ-ONLY ACCESS.\nGSBACC2  EQU   C'2'                UPDATE ACCESS.\nGSBACC3  EQU   C'3'                WRITE-ONLY,TO AN ESDS.\nGSBFILFG DS    C                   FLAGS RETURNED,DESCRIBING FILE\n*                                  (ALONG WITH OTHER GSBFIL.. FIELDS)\nGSBRD    EQU   C'R'                READ ONLY\nGSBWT    EQU   C'W'                WRITE ONLY\nGSBRDWT  EQU   C'*'                FULL ACCESS\nGSBNO    EQU   C'C'                NO ACCESS\nGSBLEN   EQU   *-GSB\n         SPACE 3\n*************************************************************\n* OPTIONAL FIELDS (IF GSBBUFA IS F'-1')                     *\n*************************************************************\n         SPACE 1\nGSBMSGX  DS    CL128               CONTIGUOUS MESSAGE AREA\nGSBBUFX  DS    0C                  CONTIGUOUS BUFFER.\n         SPACE 3\n*************************************************************\n*        RETURN CODES TO CALLER OF GSAM SVC:                *\n*        (NOTE THAT MEANINGS OF RETURN CODES DEPEND ON      *\n*        THE VSAM RETURN CODE-GSBVSAM).                     *\n*************************************************************\n         SPACE 1\nGSAMEKEY EQU   4                   KEY OR ENDFILE CONDITION\nGSAMEREC EQU   8                   RECORD CONDITION\nGSAMENAV EQU   12                  SOME GSR OBJECT UNAVAILABLE\nGSAMEFIL EQU   16                  UNDEFINEDFILE CONDITION.\nGSAMEPOS EQU   20                  POSITIONING ERROR.\nGSAMEDS  EQU   24                  DATASET FULL OR BAD.\nGSAMEAUT EQU   28                  AUTHORIZATION ERROR.\nGSAMEACC EQU   32                  WRONG KIND OF ACCESS FOR THISFILE.\nGSAMECOR EQU   36                  NOT ENOUGH CORE AVAILABLE.\nGSAMEPRM EQU   40                  PARMS BAD OR INCONSISTANT.\nGSAMEIO  EQU   44                  I/O PHYSICAL ERROR\nGSAMEBUG EQU   48                  BUG IN THE SVC\nGSAMEUBG EQU   52                  BUG IN INSTALLATION EXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OLD8FR": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\x7f\\x00\\x7f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 127, "newlines": 127, "modlines": 0, "user": "FILE388"}, "text": "         MACRO\n&NME     SFR   &MF=D\n         LCLC  &D\n         AIF   ('&MF(1)' EQ 'L').MFL\n         AIF   ('&MF(1)' EQ 'D').MFD\n         MNOTE 8,'MF(1)=&MF(1) IS INVALID. MF(1)=D IS ASSUMED.'\n.MFD     ANOP\n&D       SETC  'DSECT'\n         AIF   ('&MF(2)' EQ '').MFDOK3\n         AIF   ('&MF(2)'(1,1) EQ 'Y').MFDOK3\n&D       SETC  'DS'\n         AIF   ('&MF(2)'(1,1) EQ 'N').MFDOK3\n         MNOTE 8,'MF=&MF IS INVALID. MF=(&MF(1),N) IS ASSUMED.'\n.MFDOK3  ANOP\n*************************************************************\n*                                                           *\n*        SFR -- SCHEDULE FILE RECORD                        *\n*                                                           * 02/84 DBC\n*        ALL TIMESTAMPS IN THE SCHEDULE FILE ARE LOCAL      * 02/84 DBC\n*        TIME.                                              * 02/84 DBC\n*                                                           *\n*        A NEW SCHEDULE FILE CAN BE ALLOCATED VIA AN AMS    *\n*        COMMAND SUCH AS THE FOLLOWING:                     *\n*                                                           *\n*        DEF CL(NAME('SYSVSAM.SCHEDULE') VOL(SYSRES) -      *\n*            ATT(3) CODE(SCHEDULE) ERAS KEYS(12 0) -        *\n*            OWNER(DAVECOLE) TO(99365) UNQ MRPW(XYZZY) -    *\n*            RDPW(SCHEDULE)) -                              *\n*                                                           *\n*            DATA(NAME('SYSVSAM.SCHEDULE.DATA')-            *\n*            RECORDS(1000 100) RECSZ(X'48' X'12D')) -       *\n*                                                           *\n*            INDEX(NAME('SYSVSAM.SCHEDULE.INDEX'))          *\n*                                                           *\n*************************************************************\n         SPACE 1\n         AIF   ('&NME' EQ '').MFDOK1\n&NME     &D    0H\nSFR      DS    0H                  MAP NAME\n         AGO   .MFDOK2\n.MFDOK1  ANOP\nSFR      &D    0H\n.MFDOK2  ANOP\nSFRYR    DS    H                   SCHEDULED YEAR\nSFRMO    DS    H                   SCHEDULED MONTH\nSFRDY    DS    H                   SCHEDULED DAY\nSFRYMD   EQU   SFRYR,*-SFRYR       DATE SEGMENT\nSFRHR    DS    H                   SCHEDULED HOUR\nSFRMN    DS    H                   SCHEDULED MINUTE\nSFRHM    EQU   SFRHR,*-SFRHR       TIME-OF-DAY SEGMENT\nSFRTIME  EQU   SFRYR,*-SFRYR       SCHEDULED TIME\nSFRID    DS    H                   UNIQUE IDENTIFICATION NUMBER\nSFRKEY   EQU   SFRYR,*-SFRYR       RECORD'S KEY FIELD\nSFRNAME  DS    CL8                 APPLICATION NAME\n         SPACE 1\nSFRWK    DS    H                   SCHEDULED DAY OF THE WEEK\n         SPACE 1\nSFRXYR   DS    H                   YEAR OF LAST EXECUTION\nSFRXMO   DS    H                   MONTH OF LAST EXECUTION\nSFRXDY   DS    H                   DAY OF LAST EXECUTION\nSFRXYMD  EQU   SFRXYR,*-SFRXYR     DATE SEGMENT\nSFRXHR   DS    H                   HOUR OF LAST EXECUTION\nSFRXMN   DS    H                   MINUTE OF LAST EXECUTION\nSFRXHM   EQU   SFRXHR,*-SFRXHR     TIME-OF-DAY SEGMENT\nSFRXTIME EQU   SFRXYR,*-SFRXYR     LAST EXECUTION TIME\n         SPACE 1\nSFRWHR   DS    H                   LENGTH OF EXECUTION WINDOW: HOURS\nSFRWMN   DS    H                   LENGTH OF EXECUTION WINDOW: MINUTES\n         SPACE 1\nSFRSYSID DS    CL4                 SMF-SYSID OF SYSTEM ON WHICH THIS\n*                                  COMMAND MAY BE EXECUTED. X'0000'\n*                                  IMPLIES \"ANY\" SYSTEM.\n         SPACE 1\nSFRFLAG  DS    B                   FLAG BYTE\nSFRFIPLF EQU   B'10000000'         FORCE REEXECUTION OF THIS COMMAND\n*                                  IF AN IPL OCCURS WITHIN THE CURRENT\n*                                  WINDOW EVEN IF THIS COMMAND HAS\n*                                  ALREADY BEEN EXECUTED IN THIS SAME\n*                                  WINDOW.\nSFRFOVRD EQU   B'01000000'         THIS COMMAND OVERRIDES ALL OTHER\n*                                  COMMANDS FOR THIS APPLICATION FOR\n*                                  THIS DATE FOR WHICH THIS FLAG IS\n*                                  OFF.\nSFRFOBSO EQU   B'00100000'         THIS COMMAND IS OBSOLETE. (SET BY\n*                                  SCHEDRUN. CHECKED BY SCHEDULE).\n         SPACE 1\nSFRCMDL  DS    2H                  L'COMMAND TEXT, ZERO\nSFRCMD   DS    CL255               COMMAND TEXT\n         SPACE 1\nSFREND   EQU   *                   MAX END OF SFR\nSFRLEN   EQU   SFREND-SFR          MAX L'SFR\n         SPACE 3\n*************************************************************\n*        SCHEDULE FILE'S MASTER RECORD                      *\n*************************************************************\n         SPACE 1\n         ORG   SFR                 LOCATE TO START OF BUFFER\nSFMR     DS    0H\nSFMRKEY  DS    XL(L'SFRKEY)      | KEY (ALL HEX-FF)\nSFMRFID  DC    CL8'SCHEDULE'     V FILE ID\nSFMRNXID DS    H                   NEXT DATA RECORD ID VALUE\nSFMREND  EQU   *                   EO-SFMR\nSFMRLEN  EQU   SFMREND-SFMR        L'SFMR\n         ORG   SFREND              RELOCATE HIGH\n         MEXIT\n.*\n.MFL     AIF   ('&MF(2)' EQ '').MFLD\n         AIF   ('&MF(2)'(1,1) EQ 'M').MFLM\n         MNOTE 8,'MF=&MF IS INVALID. MF=L IS ASSUMED'\n.MFLD    ANOP\n&NME     DS    0H\n         DC    5H'0'               SCHEDULED TIME\n         DC    2H'0'               SFRID, SFRWK\n         DC    5H'0'               LAST EXECUTION TIME\n         DC    2H'0'               EXECUTION WINDOW\n         DC    CL4' '              APPLICATION NAME\n         DC    B'00000000'         FLAG BYTE\n         DC    2H'0'               SFRCMDL\n         DC    CL255' '            SFRCMD\n         MEXIT\n.*\n.MFLM    ANOP\n&NME     DS    0H\n         DC    (L'SFMRKEY)X'FF'    SFMRKEY\n         DC    CL(L'SFMRFID)'SCHEDULE' SFMRFID\n         DC    H'0'                SFMRNXID\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SCHEDALC": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\x07\\x00\\x07\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 7, "newlines": 7, "modlines": 0, "user": "FILE388"}, "text": "PROC 1 VOLUME\nDEF CL(NAME('SYSVSAM.SCHEDULE') VOL(&VOLUME) ATT(3) CODE(SCHEDULE) -\nERAS KEYS(12 0) OWNER(OWNERID) TO(99365) UNQ -\nMRPW(PASSWORD) CTLPW(PASSWORD) UPDPW(PASSWORD) RDPW(PASSWORD)) -\nDATA(NAME('SYSVSAM.SCHEDULE.DATA') RECORDS(1000 100) -\nRECSZ(X'48' X'12D')) -\nINDEX(NAME('SYSVSAM.SCHEDULE.INDEX'))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCHEDRUN": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x07V\\x07V\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 1878, "newlines": 1878, "modlines": 0, "user": "FILE388"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "SCHEDULE": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x10\\xfa\\x10\\xfa\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 4346, "newlines": 4346, "modlines": 0, "user": "FILE388"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "SFR": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\x88\\x00\\x88\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 136, "newlines": 136, "modlines": 0, "user": "FILE388"}, "text": "         MACRO\n&NME     SFR   &MF=D\n.*\n.*     MODIFICATION HISTORY\n.*\n.*     07/86 MDL ADDED EQUATES TO SUPPORT NEW WEEKDAY FEATURES:\n.*               SFRWKXCT - WEEKDAY IS CURRENT DAY\n.*               SFRWKNOT - WEEKDAY IS NOT CURRENT DAY\n.*\n         LCLC  &D\n         AIF   ('&MF(1)' EQ 'L').MFL\n         AIF   ('&MF(1)' EQ 'D').MFD\n         MNOTE 8,'MF(1)=&MF(1) IS INVALID. MF(1)=D IS ASSUMED.'\n.MFD     ANOP\n&D       SETC  'DSECT'\n         AIF   ('&MF(2)' EQ '').MFDOK3\n         AIF   ('&MF(2)'(1,1) EQ 'Y').MFDOK3\n&D       SETC  'DS'\n         AIF   ('&MF(2)'(1,1) EQ 'N').MFDOK3\n         MNOTE 8,'MF=&MF IS INVALID. MF=(&MF(1),N) IS ASSUMED.'\n.MFDOK3  ANOP\n*************************************************************\n*                                                           *\n*        SFR -- SCHEDULE FILE RECORD                        *\n*                                                           * 02/84 DBC\n*        ALL TIMESTAMPS IN THE SCHEDULE FILE ARE LOCAL      * 02/84 DBC\n*        TIME.                                              * 02/84 DBC\n*                                                           *\n*        A NEW SCHEDULE FILE CAN BE ALLOCATED VIA AN AMS    *\n*        COMMAND SUCH AS THE FOLLOWING:                     *\n*                                                           *\n*        DEF CL(NAME('SYSVSAM.SCHEDULE') VOL(SYSRES) -      *\n*            ATT(3) CODE(SCHEDULE) ERAS KEYS(12 0) -        *\n*            OWNER(DAVECOLE) TO(99365) UNQ MRPW(XYZZY) -    *\n*            RDPW(SCHEDULE)) -                              *\n*                                                           *\n*            DATA(NAME('SYSVSAM.SCHEDULE.DATA')-            *\n*            RECORDS(1000 100) RECSZ(X'48' X'12D')) -       *\n*                                                           *\n*            INDEX(NAME('SYSVSAM.SCHEDULE.INDEX'))          *\n*                                                           *\n*************************************************************\n         SPACE 1\n         AIF   ('&NME' EQ '').MFDOK1\n&NME     &D    0H\nSFR      DS    0H                  MAP NAME\n         AGO   .MFDOK2\n.MFDOK1  ANOP\nSFR      &D    0H\n.MFDOK2  ANOP\nSFRYR    DS    H                   SCHEDULED YEAR\nSFRMO    DS    H                   SCHEDULED MONTH\nSFRDY    DS    H                   SCHEDULED DAY\nSFRYMD   EQU   SFRYR,*-SFRYR       DATE SEGMENT\nSFRHR    DS    H                   SCHEDULED HOUR\nSFRMN    DS    H                   SCHEDULED MINUTE\nSFRHM    EQU   SFRHR,*-SFRHR       TIME-OF-DAY SEGMENT\nSFRTIME  EQU   SFRYR,*-SFRYR       SCHEDULED TIME\nSFRID    DS    H                   UNIQUE IDENTIFICATION NUMBER\nSFRKEY   EQU   SFRYR,*-SFRYR       RECORD'S KEY FIELD\nSFRNAME  DS    CL8                 APPLICATION NAME\n         SPACE 1\nSFRWK    DS    H                   SCHEDULED DAY OF THE WEEK\nSFRWKNOT EQU   B'10000000'            EXACT WEEKDAY MATCHING    7/86MDL\nSFRWKXCT EQU   B'01000000'            EXACT WEEKDAY MATCHING    7/86MDL\n         SPACE 1\nSFRXYR   DS    H                   YEAR OF LAST EXECUTION\nSFRXMO   DS    H                   MONTH OF LAST EXECUTION\nSFRXDY   DS    H                   DAY OF LAST EXECUTION\nSFRXYMD  EQU   SFRXYR,*-SFRXYR     DATE SEGMENT\nSFRXHR   DS    H                   HOUR OF LAST EXECUTION\nSFRXMN   DS    H                   MINUTE OF LAST EXECUTION\nSFRXHM   EQU   SFRXHR,*-SFRXHR     TIME-OF-DAY SEGMENT\nSFRXTIME EQU   SFRXYR,*-SFRXYR     LAST EXECUTION TIME\n         SPACE 1\nSFRWHR   DS    H                   LENGTH OF EXECUTION WINDOW: HOURS\nSFRWMN   DS    H                   LENGTH OF EXECUTION WINDOW: MINUTES\n         SPACE 1\nSFRSYSID DS    CL4                 SMF-SYSID OF SYSTEM ON WHICH THIS\n*                                  COMMAND MAY BE EXECUTED. X'0000'\n*                                  IMPLIES \"ANY\" SYSTEM.\n         SPACE 1\nSFRFLAG  DS    B                   FLAG BYTE\nSFRFIPLF EQU   B'10000000'         FORCE REEXECUTION OF THIS COMMAND\n*                                  IF AN IPL OCCURS WITHIN THE CURRENT\n*                                  WINDOW EVEN IF THIS COMMAND HAS\n*                                  ALREADY BEEN EXECUTED IN THIS SAME\n*                                  WINDOW.\nSFRFOVRD EQU   B'01000000'         THIS COMMAND OVERRIDES ALL OTHER\n*                                  COMMANDS FOR THIS APPLICATION FOR\n*                                  THIS DATE FOR WHICH THIS FLAG IS\n*                                  OFF.\nSFRFOBSO EQU   B'00100000'         THIS COMMAND IS OBSOLETE. (SET BY\n*                                  SCHEDRUN. CHECKED BY SCHEDULE).\n         SPACE 1\nSFRCMDL  DS    2H                  L'COMMAND TEXT, ZERO\nSFRCMD   DS    CL255               COMMAND TEXT\n         SPACE 1\nSFREND   EQU   *                   MAX END OF SFR\nSFRLEN   EQU   SFREND-SFR          MAX L'SFR\n         SPACE 3\n*************************************************************\n*        SCHEDULE FILE'S MASTER RECORD                      *\n*************************************************************\n         SPACE 1\n         ORG   SFR                 LOCATE TO START OF BUFFER\nSFMR     DS    0H\nSFMRKEY  DS    XL(L'SFRKEY)      | KEY (ALL HEX-FF)\nSFMRFID  DC    CL8'SCHEDULE'     V FILE ID\nSFMRNXID DS    H                   NEXT DATA RECORD ID VALUE\nSFMREND  EQU   *                   EO-SFMR\nSFMRLEN  EQU   SFMREND-SFMR        L'SFMR\n         ORG   SFREND              RELOCATE HIGH\n         MEXIT\n.*\n.MFL     AIF   ('&MF(2)' EQ '').MFLD\n         AIF   ('&MF(2)'(1,1) EQ 'M').MFLM\n         MNOTE 8,'MF=&MF IS INVALID. MF=L IS ASSUMED'\n.MFLD    ANOP\n&NME     DS    0H\n         DC    5H'0'               SCHEDULED TIME\n         DC    2H'0'               SFRID, SFRWK\n         DC    5H'0'               LAST EXECUTION TIME\n         DC    2H'0'               EXECUTION WINDOW\n         DC    CL4' '              APPLICATION NAME\n         DC    B'00000000'         FLAG BYTE\n         DC    2H'0'               SFRCMDL\n         DC    CL255' '            SFRCMD\n         MEXIT\n.*\n.MFLM    ANOP\n&NME     DS    0H\n         DC    (L'SFMRKEY)X'FF'    SFMRKEY\n         DC    CL(L'SFMRFID)'SCHEDULE' SFMRFID\n         DC    H'0'                SFMRNXID\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SRUNPROC": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x00\\n\\x00\\n\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 10, "newlines": 10, "modlines": 0, "user": "FILE388"}, "text": "//IEFPROC EXEC PGM=SCHEDRUN\n//SCHEDLOG DD  DSN=SYS3.SCHEDRUN.LOG,DISP=MOD\n//*\n//***********************************************************\n//*      IF YALE'S GSAM IUP (AVAILABLE THROUGH IBM IS       *\n//*      INSTALLED, THEN REMOVE THE FOLLOWING CARD.         *\n//SCHEDULE DD  DSN=SYSVSAM.SCHEDULE,DISP=SHR                *\n//***********************************************************\n//*\n//SYSUDUMP DD  SYSOUT=A\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOHELP": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x00\\x86(_\\x00\\x86(_\\x14E\\x02\\xb8\\x02\\xb8\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-10-12T00:00:00", "modifydate": "1986-10-12T14:45:17", "lines": 696, "newlines": 696, "modlines": 0, "user": "FILE388"}, "text": "COPYRIGHT DAVID B. COLE - 1980.\n)F FUNCTION -\nThe SCHEDULE command displays and alters the automatic operator\ncommands schedule. (These are the operator commands that are issued\nautomatically by the system at particular dates and times).\n\n)X SYNTAX -\nSCHEDULE \"a subcommand and its operands\"\n\nAlias    - SCHED\n\nRequired - none.\n\nDefault  - If no operands are given, then subcommands are prompted\n           for.\n\nNotes    - If operands are given, then they are processed as a\n           subcommand. In this case when the subcommand is finished,\n           the SCHEDULE command processor ends without prompting for\n           more subcommands.\n\n)O OPERANDS -\nOperands are optional. If given, then they are processed as a\nsubcommand. The following are subcommands of the SCHEDULE command\nprocessor.\n\n))SCHEDULE - Adds entries to the automatic operator commands schedule.\n))DISPLAY  - Displays entries in the automatic operator commands\n             schedule.\n))CHANGE   - Changes existing entries in the automatic operator\n             commands schedule. Also can be used to create new entries\n             that are similar to existing entries.\n))DELETE   - Removes entries from the automatic operator commands\n             schedule.\n))END      - Terminates the SCHEDULE command processor.\n))HELP     - Displays complete subcommand usage information.\n\n)S SUBCOMMANDS - SCHEDULE, DISPLAY, CHANGE, DELETE, END, and HELP.\n\n=SCHEDULE=S\n)F FUNCTION -\nThe SCHEDULE subcommand adds an entry to the automatic operator\ncommands schedule.\n\n)X SYNTAX -\nSCHEDULE 'operator command' SYSID(system id) DATE(mm/dd/yy) TIME(hh:mm)\n         NAME(application name) WEEKDAY(day name) WINDOW(hh:mm)\n         \u00ddNOT\u00a8IPLFORCED \u00ddNO\u00a8OVERRIDE\n\nAlias    - The minimum abreviation is S.\n\nRequired - 'operator command', DATE, TIME, and NAME.\n\nDefaults - SYSID(CRNT) WEEKDAY(ANY) WINDOW(\"until midnight\")\n           NOTIPLFORCED NOOVERRIDE.\n\n)O OPERANDS -\n\n))'OPERATOR COMMAND' - This is required. It gives the operator command\nthat is to be automatically scheduled. The command may be any command\nthat can be issued from an operator's console. The command must be\nenclosed within single quotes ('). Imbedded quotes must be represented\nby pairs of quotes; i.e., a ' appearing within the command must be\nrepresented by '' (not \").\n\n))SYSID(system id) - For multi-system configurations, this operand\nspecifies on which computer this scheduled command is permitted to be\nexecuted. \"System id\" must be the \"SMF-id\" of the desired computer.\nSystem ids consist of from one to four alphameric characters.\n\n\"SYSID(CRNT)\" means the \"current computer\" - i.e., the computer which\nyou are currently logged on to. This is the default.\n\n\"SYSID(ANY)\" means \"any computer\". The scheduled command may be\nexecuted by any computer in the configuration - which ever one gets\naround to it first.\n\n))SYSTEM(system id) - This is an alias for SYSID.\n\n))DATE(mm/dd/yy) - This is required. It gives the date or dates on\nwhich the operator command is to be executed.\n\nmm, dd, and/or yy may each be given as a dash (-). This is a \"wild\ncard\" character that causes that field to match any value. For example,\na dash given for mm means \"any month\".\n\nIf yy is equal to or less than 50, then the 21st century is assumed.\n\nWhen - is given for mm, then a value of 31 given for dd means \"the\nlast day of the month\" - even those months that are shorter than 31\ndays.\n\nExamples:      DATE(2/9/80)        means February 2, 1980.\n               DATE(2/8/40)        means February 2, 2040.\n               DATE(-/31/81)       means The last day of every month in\n                                         1981.\n               DATE(-/1/-)         means The first day of every month\n                                         in every year.\n               DATE(-/-/-)         means Everyday.\n\n))TIME(hh:mm) - This is required. It gives the time of day at which the\noperator command is to be executed. hh:mm is a 24-hour clock; i.e.,\nafternoon hours are represented by values of 13 through 23 for hh.\n\n))NAME(application name) - This is required. It gives a name by which\nthis and other automatic commands can be referenced. \"Application name\"\nis a single name consisting of from one to eight alphameric or national\ncharacters. The first character cannot be numeric.\n\nAll scheduled commands having the same application name can be\nreferenced as a group by the DISPLAY and DELETE commands. In addition,\nthe \"scope\" of overriding scheduled commands is defined in terms of\napplication names. Type HELP SCHEDULE O(OVERRIDE) for more information.\n\n))WEEKDAY(day name) - This modifies the date on which the automatic\ncommand is to be executed. If a date selected by the DATE operand does\nnot fall on the weekday named by this operand, then the command is not\nissued.\n\n\"Day name\" must be either the name of a weekday or a unique abreviation\nof the name of a weekday.\n\n\"Day name\" may be preceeded by a not sign (\u00ac): e.g., WEEKDAY(\u00acTHU).\nIn this case, if a date selected by the DATE operand falls on the\nweekday named by this operand, then the command is not issued.\n\n\"Day name\" may be preceeded by a plus sign (+): e.g., WEEKDAY(+THU).\nIn this case, if a date selected by the DATE operand does not fall on\nthe weekday named by this operand, then the execution of the automatic\ncommand is delayed until the named weekday arrives.\n\n\"Day name\" may be preceeded by a minus sign (-): e.g., WEEKDAY(-THU).\nIn this case if the selected date does not fall on the named weekday,\nthen the execution of the automatic command, instead of being delayed,\nis moved forward to the desired weekday.\n\nExamples:      DATE(6/-/83) WEEKDAY(TUE)   means every Tuesday in\n                                                 June, 1983.\n               DATE(-/-/-) WEEKDAY(WED)    means Every Wednesday.\n               DATE(-/-/-) WEEKDAY(\u00acWED)   means Every Day of the year\n                                                 that is not Wednesday.\n               DATE(2/1/80) WEEKDAY(+THU)  means the Thursday that is\n                                                 on or following\n                                                 February 1, 1980. In\n                                                 this case that would\n                                                 be February 7th.\n               DATE(-/1/-) WEEKDAY(+MON)   means The first Monday of\n                                                 every month.\n               DATE(-/31/-) WEEKDAY(-FRI)  means the last Friday of\n                                                 every month.\n\nThe default value for WEEKDAY is ANY.\n\n))WINDOW(hh:mm) - This gives the length of time following the\nscheduled execution of an automatic command that the command can still\nbe executed if, for some reason such as a system crash, the command was\nnot executed when it was supposed to be.\n\nThe default value is \"0:00\" which has the special meaning \"until\nmidnight\".\n\nThe window cannot extend past midnight.\n\n))IPLFORCED - This indicates that if the system crashes and is re-IPLed\nwithin the \"window\" period for this automatic command, then this\ncommand is to be executed after the IPL even if it has already been\nexecuted before the IPL. The default is NOTIPLFORCED.\n\nWhen a scheduled command defined with the IPLFORCED attribute is\ndisplayed, the letter I appears in the FLAGS column.\n\n))NOTIPLFORCED - nullifies IPLFORCED. Type HELP SCHEDULE O(IPLFORCED)\nfor more information.\n\n))OVERRIDE - This causes the scheduling of certain automatic commands\nto be overridden by this command for a particular date. The\ncircumstances are these.\n\n         - The commands to be overridden must have the same application\n           name as this command.\n         - The commands to be overridden must not themselves be\n           designated as \"override\" commands.\n         - The commands to be overridden will be overridden only on\n           those dates that this command will execute. The time of day\n           is not relevent.\n\nUse the \"DISPLAY DATE(mm/dd/yy) NAME(application name) BOTH\" command to\nfind which automatic commands are overridden. Those commands showing\nthe letter O in the FLAGS column override all commands without\nthe O flag.\n\nThe default is NOOVERRIDE.\n\n))NOOVERRIDE - nullifies OVERRIDE. Type HELP SCHEDULE O(OVERRIDE) for\nmore information.\n\n=DISPLAY=DI\n)F FUNCTION -\nThe DISPLAY subcommand displays one or more entries in the automatic\noperator commands schedule.\n\n)X SYNTAX -\nDISPLAY YESTERDAY | TODAY | TOMORROW | DATE(mm/dd/yy) | ANYTIME\n                  | OBSOLETE | ID(identification numbers)\n        NAME(application names) SYSID(system ids)\n        OVERRIDE | NOOVERRIDE | BOTH | EITHER\n        SHORT | LONG\n\nAlias    - The minimum abreviation is DI.\n\nRequired - none.\n\nDefault  - ANYTIME SYSID(ALL) EITHER LONG and all names.\n\nNotes    - YESTERDAY, TODAY, TOMORROW, DATE, ANYTIME, OBSOLETE, and ID\n           are mutually exclusive.\n         - OVERRIDE, NOOVERRIDE, BOTH, and EITHER are mutually\n           exclusive.\n         - SHORT and LONG are mutually exclusive.\n         - Type HELP DISPLAY O(FLAGS) for a description of the\n           displayed flag characters.\n\n)O OPERANDS -\n\n))YESTERDAY - limits the display of scheduled commands to those that\nexecuted yesterday. The default is ANYTIME.\n\n))TODAY - limits the display of scheduled commands to those that\nexecute today. The default is ANYTIME.\n\n))TOMORROW - limits the display of scheduled commands to those that\nwill execute tomorrow. The default is ANYTIME.\n\n))DATE(mm/dd/yy) - limits the display of scheduled commands to those\nthat will execute on the given date. If yy is 50 or less, then the\n21st century is assumed. When this operand is omitted, the default is\nANYTIME.\n\n))ANYTIME - does not limit the display of scheduled commands with\nrespect to either execution date or ID number or obsolescense. This is\nthe default.\n\nAn alias for ANYTIME is ALL.\n\n))ALL - This is an alias for ANYTIME.\n\n))OBSOLETE - limits the display to those scheduled commands that are\nobsolete - i.e., those commands that can never execute again. The\ndefault is ANYTIME.\n\nWhen an obsolete scheduled command is displayed, the letter N appears\nin the FLAGS column.\n\n))ID(identification numbers) - limits the display of scheduled commands\nto those having the given identification numbers. \"Identification\nnumbers\" is a list of one or more decimal numbers or pairs of decimal\nnumbers joined by a colin (:). Each number must be in the range of 0 to\n65535. When joined pair of numbers are given, the second number must be\nequal to or larger than the first. Such pairs indicate a range of\nscheduled commands to be displayed.\n\nWhen this operand is omitted, the default is ANYTIME.\n\n))NAME(application names) - limits the display to only those scheduled\ncommands associated with the given applications. \"Application names\" is\na list of one or more names each of which consists of from one to eight\nalphameric or national characters. The first character of each name\ncannot be numeric.\n\nType HELP SCHEDULE O(NAME) for more information.\n\n))SYSID(system ids) - For multi-system configurations. This operand\nlimits the selection of scheduled commands to those that are permitted\nto be executed on the computers having the listed system ids.\n\nA \"system id\" is a four-character identifier assigned by SMF to a\ncomputer (for accounting purposes). Each character is alphameric.\n\nThe \"SYSID\" operand may specify any number of system identifiers. If a\nscheduled command matches any listed identifier, then it is selected.\n\n\"SYSID(CRNT)\" means the \"current computer\" - i.e., the computer which\nyou are currently logged on to.\n\n\"SYSID(ANY)\" limits the selection to those scheduled commands that are\npermitted to execute on any computer in the configuration.\n\n\"SYSID(ALL)\" does not limit the selection. This is the default.\n\nExample:\n\n         SYSID(AAA6 ANY)\n         This selects those scheduled commands that must be executed\n         specifically by the computer named \"AAA6\" as well as those\n         commands that may be executed by any computer in the\n         configuration. (Scheduled commands that must be executed\n         specifically by the \"CC58\" computer are not selected).\n\n))SYSTEM(system ids) - This is an alias for SYSID.\n\n))OVERRIDE - limits the display to only those scheduled commands that\nare overrides. The default is EITHER. Type HELP SCHEDULE O(OVERRIDE)\nfor more information.\n\nWhen an overriding scheduled command is displayed, the letter O appears\nin the FLAGS column.\n\n))NOOVERRIDE - limits the display to only those scheduled commands that\nare not overrides. The default is EITHER. Type\nHELP SCHEDULE O(OVERRIDE) for more information.\n\n))BOTH - displays scheduled commands without reguard to whether or not\nthey are overrides. The default is EITHER. Type\nHELP SCHEDULE O(OVERRIDE) for more information.\n\nWhen an overriding scheduled command is displayed, the letter O appears\nin the FLAGS column.\n\n))EITHER - If the display of scheduled commands is limited to a\nparticular date (via the DATE, YESTERDAY, TODAY, or TOMORROW\noperands), then for particular application names if overriding\nscheduled commands exist for that date, then they are displayed and the\noverridden commands are not displayed. If no overriding commands exist\nfor that date for the application, then the non-overriding commands are\ndisplayed.\n\nWhen an overriding scheduled command is displayed, the letter O appears\nin the FLAGS column.\n\nIf a specific date is not given, then EITHER functions exactly like\nBOTH.\n\nEITHER is the default.\n\n))LONG - displays a discriptive message for each scheduled command\nselected for display. This is the default.\n\nAliases for LONG are PROMPT and NOPROMPT. (Don't ask why. That's just\nthe way it is).\n\n))PROMPT - This is an alias for LONG.\n\n))NOPROMPT - This is an alias for LONG.\n\n))SHORT - displays only a count of the number of scheduled commands\nselected by the DISPLAY command. Individual descriptive messages are\nnot generated. The default is LONG.\n\n))FLAGS - Characters appearing in the FLAGS column of the displays have\nthe following meanings:\n\n         I - This scheduled command has been defined with the\n             IPLFORCED attribute. Type HELP SCHEDULE O(IPLFORCED) for\n             more information.\n         O - This scheduled command is an OVERRIDE. Type\n             HELP SCHEDULE O(OVERRIDE) for more information.\n         N - This scheduled command is OBSOLETE. It will never be\n             executed again. Type HELP DISPLAY O(OBSOLETE) for\n             more information.\n\n=CHANGE=C\n)F FUNCTION -\nThe CHANGE subcommand changes one or more characteristics of one or\nmore entries in the automatic operator commands schedule.\n\n)X SYNTAX -\nCHANGE ID(identification numbers) \u00ddNO\u00a8COPY\n       COMMAND('operator command') DATE(mm/dd/yy) TIME(hh:mm)\n       NAME(application name) SYSID(system id) WEEKDAY(day name)\n       WINDOW(hh:mm) \u00ddNOT\u00a8IPLFORCED \u00ddNO\u00a8OVERRIDE\n\nAlias    - The minimum abreviation is C.\n\nRequired - ID.\n\nDefaults - NOCOPY\n         - Leave unchanged those items not specified.\n\n)O OPERANDS -\n\n))ID(identification numbers) - identifies which scheduled commands are\nto be changed. \"Identification numbers\" is a list of one or more\ndecimal numbers or pairs of decimal numbers joined by a colin (:). Each\nnumber must be in the range of 0 to 65535. When joined pair of numbers\nare given, the second number must be equal to or larger than the first.\nSuch pairs indicate a range of scheduled commands to be changed.\n\nWhen multiple scheduled commands are being changed, they are all\nchanged identically.\n\nThe ID operand is required. There is no default.\n\n))COPY - causes a copy of the original record(s) to be made before any\nchanges are made to that record. Thus when the COPY operand is used,\nthe original record(s) remains unchanged, and the changed record\nbecomes a new record in the SCHEDULE file.\n\nThe default is NOCOPY.\n\n))NOCOPY - causes all changes to be made directly to the selected\nrecord(s). A copy of the original record(s) is not kept.\n\nThis is the default.\n\n))COMMAND('operator command') - gives the new operator command\nthat is to be automatically scheduled. The command may be any command\nthat can be issued from an operator's console. The command must be\nenclosed within single quotes ('). Imbedded quotes must be represented\nby pairs of quotes; i.e., a ' appearing within the command must be\nrepresented by '' (not \").\n\nThis operand is optional. If omitted, then the operator command to be\nissued remains unchanged.\n\n))DATE(mm/dd/yy) - gives the new date or dates on\nwhich the operator command is to be executed.\n\nmm, dd, and/or yy may each be given as a dash (-). This is a \"wild\ncard\" character that causes that field to match any value. For example,\na dash given for mm means \"any month\".\n\nIf yy is equal to or less than 50, then the 21st century is assumed.\n\nWhen - is given for mm, then a value of 31 given for dd means \"the\nlast day of the month\" - even those months that are shorter than 31\ndays.\n\nExamples:      DATE(2/9/80)        means February 2, 1980.\n               DATE(2/8/40)        means February 2, 2040.\n               DATE(-/31/81)       means The last day of every month in\n                                         1981.\n               DATE(-/1/-)         means The first day of every month\n                                         in every year.\n               DATE(-/-/-)         means Everyday.\n\n))TIME(hh:mm) - gives the new time of day at which the\noperator command is to be executed. hh:mm is a 24-hour clock; i.e.,\nafternoon hours are represented by values of 13 through 23 for hh.\n\n))NAME(application name) - gives a new name by which\nthis automatic command can be referenced. \"Application name\"\nis a single name consisting of from one to eight alphameric or national\ncharacters. The first character cannot be numeric.\n\nAll scheduled commands having the same application name can be\nreferenced as a group by the DISPLAY and DELETE commands. In addition,\nthe \"scope\" of overriding scheduled commands is defined in terms of\napplication names. Type HELP CHANGE O(OVERRIDE) for more information.\n\n))SYSID(system id) - For multi-system configurations, this operand\nspecifies on which computer this scheduled command is permitted to be\nexecuted. \"System id\" must be the \"SMF-id\" of the desired computer.\nSystem ids consist of from one to four alphameric characters.\n\n\"SYSID(CRNT)\" means the \"current computer\" - i.e., the computer which\nyou are currently logged on to.\n\n\"SYSID(ANY)\" means \"any computer\". The scheduled command may be\nexecuted by any computer in the configuration - which ever one gets\naround to it first.\n\n))SYSTEM(system id) - This is an alias for SYSID.\n\n))WEEKDAY(day name) - This modifies the date on which the automatic\ncommand is to be executed. If a date selected by the DATE operand does\nnot fall on the weekday named by this operand, then the command is not\nissued.\n\n\"Day name\" must be either the name of a weekday or a unique abreviation\nof the name of a weekday.\n\n\"Day name\" may be preceeded by a not sign (\u00ac): e.g., WEEKDAY(\u00acTHU).\nIn this case, if a date selected by the DATE operand falls on the\nweekday named by this operand, then the command is not issued.\n\n\"Day name\" may be preceeded by a plus sign (+): e.g., WEEKDAY(+THU).\nIn this case, if a date selected by the DATE operand does not fall on\nthe weekday named by this operand, then the execution of the automatic\ncommand is delayed until the named weekday arrives.\n\n\"Day name\" may be preceeded by a minus sign (-): e.g., WEEKDAY(-THU).\nIn this case if the selected date does not fall on the named weekday,\nthen the execution of the automatic command, instead of being delayed,\nis moved forward to the desired weekday.\n\nExamples:      DATE(6/-/83) WEEKDAY(TUE)   means every Tuesday in\n                                                 June, 1983.\n               DATE(-/-/-) WEEKDAY(WED)    means Every Wednesday.\n               DATE(-/-/-) WEEKDAY(\u00acWED)   means Every Day of the year\n                                                 that is not Wednesday.\n               DATE(2/1/80) WEEKDAY(+THU)  means the Thursday that is\n                                                 on or following\n                                                 February 1, 1980. In\n                                                 this case that would\n                                                 be February 7th.\n               DATE(-/1/-) WEEKDAY(+MON)   means The first Monday of\n                                                 every month.\n               DATE(-/31/-) WEEKDAY(-FRI)  means the last Friday of\n                                                 every month.\n\nSpecifying WEEKDAY(ANY) removes the weekday modifier from the\nscheduled commands being changed.\n\n))WINDOW(hh:mm) - gives the length of time following the\nscheduled execution of an automatic command that the command can still\nbe executed if, for some reason such as a system crash, the command was\nnot executed when it was supposed to be.\n\nThe window cannot extend past midnight.\n\nThe special value \"0:00\" has the meaning \"until midnight\".\n\n))IPLFORCED - This indicates that if the system crashes and is re-IPLed\nwithin the \"window\" period for this automatic command, then this\ncommand is to be executed after the IPL even if it has already been\nexecuted before the IPL.\n\nWhen a scheduled command defined with the IPLFORCED attribute is\ndisplayed, the letter I appears in the FLAGS column.\n\n))NOTIPLFORCED - nullifies IPLFORCED. Type HELP CHANGE O(IPLFORCED)\nfor more information.\n\n))OVERRIDE - This causes the scheduling of certain automatic commands\nto be overridden by this command for a particular date. The\ncircumstances are these.\n\n         - The commands to be overridden must have the same application\n           name as this command.\n         - The commands to be overridden must not themselves be\n           designated as \"override\" commands.\n         - The commands to be overridden will be overridden only on\n           those dates that this command will execute. The time of day\n           is not relevent.\n\nUse the \"DISPLAY DATE(mm/dd/yy) NAME(application name) BOTH\" command to\nfind which automatic commands are overridden. Those commands showing\nthe letter O in the FLAGS column override all commands without\nthe O flag.\n\n))NOOVERRIDE - nullifies OVERRIDE. Type HELP CHANGE O(OVERRIDE) for\nmore information.\n\n=DELETE=DE\n)F FUNCTION -\nThe DELETE subcommand removes one or more entries from the automatic\noperator commands schedule.\n\n)X SYNTAX -\nDELETE YESTERDAY | TODAY | TOMORROW | DATE(mm/dd/yy) | ANYTIME\n                 | OBSOLETE | ID(identification numbers)\n       NAME(application names) SYSID(sytem ids)\n       OVERRIDE | NOOVERRIDE | BOTH | EITHER\n       SHORT | LONG | PROMPT\n\nAlias    - The minimum abreviation is DE.\n\nRequired - at least one of either YESTERDAY, TODAY, DATE, ANYTIME, ID,\n           OBSOLETE, NAME, or SYSID.\n\nDefault  - EITHER PROMPT\n\nNotes    - YESTERDAY, TODAY, TOMORROW, DATE, ANYTIME, OBSOLETE, and ID\n           are mutually exclusive. (Note that NAME and SYSID are not\n           mutually exclusive with these).\n         - OVERRIDE, NOOVERRIDE, BOTH, and EITHER are mutually\n           exclusive.\n         - SHORT, LONG, and PROMPT are mutually exclusive.\n\n)O OPERANDS -\n\n))YESTERDAY - limits the deletion of scheduled commands to those that\nexecuted yesterday.\n\n))TODAY - limits the deletion of scheduled commands to those that\nexecute today.\n\n))TOMORROW - limits the deletion of scheduled commands to those that\nwill execute tomorrow.\n\n))DATE(mm/dd/yy) - limits the deletion of scheduled commands to those\nthat will execute on the given date. If yy is 50 or less, then the\n21st century is assumed.\n\n))ANYTIME - does not limit the deletion of scheduled commands with\nrespect to either execution date or ID number or obsolescense. This is\nthe default.\n\nAn alias for ANYTIME is ALL.\n\n))ALL - This is an alias for ANYTIME.\n\n))OBSOLETE - limits the deletion to those scheduled commands that are\nobsolete - i.e., those commands that can never execute again. The\ndefault is ANYTIME.\n\n))ID(identification numbers) - limits the deletion of scheduled\ncommands to those having the given identification numbers.\n\"Identification numbers\" is a list of one or more decimal numbers or\npairs of decimal numbers joined by a colin (:). Each number must be in\nthe range of 0 to 65535. When joined pairs of numbers are given, the\nsecond number must be equal to or larger than the first. Such pairs\nindicate a range of  scheduled commands to be deleted.\n\n))NAME(application names) - limits the deletion to only those scheduled\ncommands associated with the given applications. \"Application names\" is\na list of one or more names each of which consists of from one to eight\nalphameric or national characters. The first character of each name\ncannot be numeric.\n\nType HELP SCHEDULE O(NAME) for more information.\n\n))SYSID(system ids) - For multi-system configurations. This operand\nlimits the selection of scheduled commands to those that are permitted\nto be executed on the computers having the listed system ids.\n\nA \"system id\" is a four-character identifier assigned by SMF to a\ncomputer (for accounting purposes). Each character is alphameric.\n\nThe \"SYSID\" operand may specify any number of system identifiers. If a\nscheduled command matches any listed identifier, then it is selected.\n\n\"SYSID(CRNT)\" means the \"current computer\" - i.e., the computer which\nyou are currently logged on to.\n\n\"SYSID(ANY)\" limits the selection to those scheduled commands that are\npermitted to execute on any computer in the configuration.\n\n\"SYSID(ALL)\" does not limit the selection. This is the default.\n\nExample:\n\n         SYSID(AAA6 ANY)\n         This selects those scheduled commands that must be executed\n         specifically by the computer named \"AAA6\" as well as those\n         commands that may be executed by any computer in the\n         configuration. (Scheduled commands that must be executed\n         specifically by the \"CC58\" computer are not selected).\n\n))SYSTEM(system ids) - This is an alias for SYSID.\n\n))OVERRIDE - limits the deletion to only those scheduled commands that\nare overrides. The default is EITHER. Type HELP SCHEDULE O(OVERRIDE)\nfor more information.\n\n))NOOVERRIDE - limits the deletion to only those scheduled commands\nthat are not overrides. The default is EITHER. Type\nHELP SCHEDULE O(OVERRIDE) for more information.\n\n))BOTH - deletes scheduled commands without reguard to whether or not\nthey are overrides. The default is EITHER. Type\nHELP SCHEDULE O(OVERRIDE) for more information.\n\n))EITHER - If the deletion of scheduled commands is limited to a\nparticular date (via the DATE, YESTERDAY, TODAY, or TOMORROW\noperands), then for particular application names if overriding\nscheduled commands exist for that date, then they are deleted and the\noverridden commands are not deleted. If no overriding commands exist\nfor that date for the application, then the non-overriding commands are\ndeleted.\n\nIf a specific date is not given, then EITHER functions exactly like\nBOTH.\n\nEITHER is the default.\n\n))PROMPT - displays a descriptive message for each scheduled command to\nbe deleted, and then prompts you to may a final delete/no-delete\ndecision for that scheduled command. This is the default.\n\n\n))LONG - displays a discriptive message for each scheduled command\nto be deleted, and then deletes it (without prompting you for a final\ndecision). The default is PROMPT.\n\n))SHORT - displays only a count of the number of scheduled commands\ndeleted. Individual descriptive messages are not displayed. Nor are you\nprompted for a final delete/no-delete decision.\n\nThe default is PROMPT.\n\n=END=E\n)F FUNCTION -\nThe END subcommand causes the SCHEDULE command processor to end. If a\nSCHEDULE, CHANGE, or DELETE subcommand has been issued, then the END\nsubcommand automatically causes a 'S SCHEDRUN' operator command to be\nissued. By this means, the system is notified of possible changes to\nthe automatic operator commands schedule.\n\n)X SYNTAX\nEND\n\nAlias - The minimum abreviation is E.\n\n)O OPERANDS - none.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT388/FILE388.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT388", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}