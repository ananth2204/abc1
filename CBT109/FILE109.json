{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011243000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE109.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE109.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x05'", "DS1TRBAL": "b'\\xb8X'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xb7\\x00\\x01\\x00\\xb7\\x00\\x06\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"#DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "    THIS MEMBER IS A SHORT DESCRIPTION OF THE MEMBERS INCLUDED IN THIS\n    FILE.\n\n    ASMACTRT IS THE JCL WE USE TO ASSEMBLE THE SMF EXIT IEFACTRT.  YOU\n             WILL NEED TO CHANGE THE JCL ACCORDINGLY.\n\n    IEFACTRT IS THE SOURCE CODE FOR THE IEFACTRT EXIT AS WE USE IT.\n             THIS SOURCE IS A COMBINATION OF VARIOUS IEFACTRT ROUTINES\n             FROM PREVIOUS CBT TAPES AND SOME OF MY OWN ENHANCEMENTS.\n             IT HAS BEEN WRITTEN TO USE THE SMF TYPE 30 RECORD AND TO\n             RUN IN 31 BIT ADDRESSING MODE.  AN EXAMPLE OF THE OUTPUT\n             IS INCLUDED IN ANOTHER FILE ON THIS TAPE. THIS EXIT WILL\n             WORK UNDER MVS/XA 2.2 AND MVS/ESA.  IT SHOULD BE ABLE TO\n             RUN UNDER PREVIOUS XA RELEASES.\n\n             FEATURES - ISSUSES A WTO TO THE SYSTEM CONSOLE WITH THE\n                        COMPLETION CODE OF EACH STEP.\n\n                      - WRITES THE WTO INFORMATION TO THE JOBLOG\n\n                      - GIVES EXCP STATS FOR EACH DD ALLOCATED.\n\n                      - DDNAME, CONCATENATION NUMBER, AND DEVICE ADDRESS\n                        ARE INCLUDED. ON MESSAGE LOG.\n\n     LNKACTRT JCL USED TO LINK THE IEFACTRT EXIT.  THE JCL WILL HAVE TO\n              BE CHANGED.\n\n     CBPUC001 THIS MODULE IS THE USER INTERFACE MODULE (UIM) WE WROTE\n              TO SUPPORT 2260 UNDER MVS/XA 2.2.  IT ALSO WORKS FOR ESA\n\n     IEAMLT99 THIS MODULE IS ALSO REQUIRED TO SUPPORT THE 2260'S\n\n                        DISCLAIMER\n\n     THESE PROGRAMS ARE BEING USED SUCCESSFULLY IN OUR ENVIRONMENT.\n     SUPPORT IS ON AN AS IS BASIS.  THESE MODULES HAVE BEEN RUNNING\n     SUCCESSFULLY UNDER MVS/XA 2.2 AND MVS/ESA.  THEY SHOULD BE ABLE\n     TO RUN WITH EARLIER RELEASES OF MVS/XA.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMACTRT": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//RAC02DSG JOB (8275,SSS,5,10,0,,,D,,111,BA908275),'TSD/SSS WIEBL-8',\n// CLASS=Z,MSGCLASS=A\n/*JOBPARM S=BSYS,L=999\n/*ROUTE PRINT TSO\n//*\n//SA EXEC ASMHCL,WTR=M,PARM.ASM='LOAD,NODECK,RENT',\n// PARM.LKED='LET,LIST,XREF,RENT,REFR,NCAL,REUS'\n//SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR\n//       DD DSN=SYS1.AMODGEN,DISP=SHR\n//ASM.SYSIN DD DSN=BA90.USERSMF.SOURCE(IEFACTRT),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS1.USRMODS(IEFACTRT),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBPUC001": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'BUILD UIM FOR 2260'\n****** START OF SPECIFICATIONS ***************************************\n*\n*01* MODULE NAME = CBPUC001\n*\n*01* DESCRIPTIVE NAME = SAMPLE UNIT INFORMATION MODULE (UIM)\n*\n*01* FUNCTION =\n*      UIMS DEFINE DEVICE DEPENDENT SUPPORT TO MVS THROUGH THE MVSCP.\n*      THIS SAMPLE UIM IS AN EXAMPLE TO USE TO DEFINE DEVICE SUPPORT\n*      TO THE MVSCP FOR DEVICES THAT IBM DOES NOT SUPPORT. THIS SAMPLE\n*      USES THE DUMMY DEVICE AS THE SAMPLE UNIT. FOR MORE INFORMATION,\n*      REFER TO MVS/XA SPL: SYSTEM MODIFICATIONS.\n*\n*      CUSTOMER-WRITTEN UIMS MUST BE NAMED CBPUCXXX, WHERE XXX IS A\n*      DECIMAL NUMBER IN THE RANGE OF 001 TO 256. CBPUC001 MUST BE\n*      RENAMED TO CBPUCXXX TO CAUSE IT TO BE INVOKED BY THE MVSCP.\n*\n*02*   OPERATION =\n*      THE IOS FUNCTIONAL INITIALIZATION ROUTINE (CBPIFIR) CALLS\n*      CBPUC001. USING THE DEVICE INFORMATION CONTAINED IN CBPUC001,\n*      A DEVICE INFORMATION TABLE (DIT) IS BUILT FOR THE GENERIC\n*      ASSOCIATED WITH THE DEVICE. CBPUC001 CALLS THE DIT BUILD ROUTINE\n*      (CBPADIT) TO CREATE THE DIT. IN THIS EXAMPLE, DUMMY IS THE\n*      DEFINED DEVICE.\n*\n*      WHEN THE IOS CONTROL BLOCK BUILD ROUTINE (CBPICBBR) IS\n*      PROCESSING EACH IODEVICE INTERNAL TEXT RECORD, THIS UIM AND\n*      THE UIMS FOR OTHER DEVICES ARE POLLED. (AN IODEVICE INTERNAL\n*      TEXT RECORD IS THE CONTROL BLOCK REPRESENTATION OF AN IODEVICE\n*      STATEMENT.) THIS POLLING IS TO FIND THE UIM THAT RECOGNIZES\n*      THE UNIT SPECIFIED ON THE IODEVICE STATEMENT. IF THE UIM\n*      RECOGNIZES THE UNIT, THE UIM CHECKS THE VALIDITY OF THE\n*      SPECIFIED IODEVICE STATEMENT. IF THE STATEMENT IS VALID, THE\n*      UIM CALLS THE DEVICE FEATURES TABLE BUILD ROUTINE (CBPIDFT)\n*      TO BUILD A DEVICE FEATURES TABLE (DFT). A DFT IS BUILT FOR\n*      EACH UNIT SPECIFIED ON THE IODEVICE STATEMENT. THE MVSCP USES\n*      THE DFTS TO BUILD THE UCBS FOR THE I/O CONFIGURATION.\n*\n*      IN THIS SAMPLE, ADDRESS, OFFLINE AND UNIT ARE PARAMETERS\n*      RECOGNIZED BY THIS DEVICE.\n*\n*      IN THIS SAMPLE, NO FEATURES ARE RECOGNIZED BY THIS DEVICE.\n*\n*\n*03*     RECOVERY OPERATION =\n*          IF AN ABEND OCCURS IN CBPUC001, THE ESTAE ROUTINE IN MODULE\n*          CBPMVSCP WILL PROVIDE THE DIAGNOSTIC INFORMATION.\n*\n*02*   DEPENDENCIES = NONE\n*\n*02*   RESTRICTIONS = NONE\n*\n*02*   REGISTER CONVENTIONS = SEE REGISTER DECLARATIONS\n*\n*02*   PATCH LABEL = @PSPACE\n*\n*01* MODULE TYPE = PROCEDURE\n*\n*02*   PROCESSOR = ASSEMBLER-H\n*\n*02*   MODULE SIZE = FOR EXACT SIZE SEE ASSEMBLER LISTING\n*\n*02*   ATTRIBUTES =\n*\n*03*     LOCATION = PRIVATE\n*\n*03*     STATE = PROBLEM\n*\n*03*     AMODE = 31\n*\n*03*     RMODE = ANY\n*\n*03*     KEY = USER\n*\n*03*     MODE = TASK\n*\n*03*     SERIALIZATION = NONE\n*\n*03*     TYPE = NON-REUSABLE\n*\n*01* ENTRY POINT = CBPUC001\n*\n*02*   PURPOSE = SEE FUNCTION\n*\n*02*   LINKAGE = STANDARD LINKAGE\n*\n*03*     CALLERS =\n*          CBPIFIR  - IOS FUNCTIONAL INITIALIZATION ROUTINE\n*          CBPICBBR - IOS CONTROL BLOCK BUILD ROUTINE\n*\n*01* INPUT = UCA\n*\n*02*   ENTRY REGISTERS =\n*        REGISTER     0 - UNDEFINED\n*        REGISTER     1 - POINTER TO A ONE WORD PARAMETER LIST,\n*                         DEFINED AS FOLLOWS:\n*                           WORD 1 - ADDRESS OF THE UCA\n*        REGISTERS 2-12 - UNDEFINED\n*        REGISTER    13 - ADDRESS OF AN 18-WORD SAVE AREA\n*        REGISTER    14 - RETURN ADDRESS\n*        REGISTER    15 - ENTRY POINT ADDRESS\n*\n*01* OUTPUT =\n*       CAUSES DIT FOR THE GENERIC SUPPORTED BY THIS UIM TO BE BUILT\n*       CAUSES DFTS FOR UNIT RECOGNIZED BY THIS UIM TO BE BUILT\n*       MODIFIES UCA\n*\n*02*   EXIT REGISTERS =\n*        REGISTERS 0-15 - RESTORED TO CONTENTS ON ENTRY\n*\n*02*   RETURN CODES = NONE\n*\n*01* EXIT NORMAL = RETURNS TO THE CALLER\n*\n*01* EXIT ERROR = NONE\n*\n*01* EXTERNAL REFERENCES =\n*\n*02*   ROUTINES =\n*       CBPADIT  - DIT BUILD ROUTINE\n*       CBPIDFT  - DFT BUILD ROUTINE\n*       CBPIPARM - PARAMETER CHECKER ROUTINE\n*\n*02*   DATA AREAS =\n*        CBPZDIAG - DIAGNOSTIC STACK ENTRY\n*\n*02*   CONTROL-BLOCKS =\n*        COMMON NAME  MACRO NAME   USAGE\n*        -----------  ----------   -----------\n*        CPVT         CBPZCPVT     READ\n*        DFP          CBPZDFP      WRITE\n*        DIP          CBPYDIP      WRITE\n*        IODV         CBPZIODV     READ/WRITE\n*        ITRH         CBPZITRH     READ\n*        PCP          CBPZPCP      READ/WRITE\n*        UCA          CBPZUCA      READ/WRITE\n*\n*01* TABLES = NONE\n*\n*01* MACROS EXECUTABLE =\n*      CBPZLOG\n*      CBPZPPDS\n*\n*01* CHANGE ACTIVITY = NONE\n*\n*01* SERIALIZATION = NONE\n*\n*01* MESSAGES =  NONE\n*\n*01* ABEND CODES = NONE\n*\n*01* WAIT STATE CODES = NONE\n*\n***** END OF SPECIFICATIONS ******************************************\n         EJECT\nCBPUC001 CSECT\nCBPUC001 RMODE ANY\nCBPUC001 AMODE 31\n         USING *,R15\n         USING UCA,R6               DEFINE POINTER TO UCA\n         USING CPVT,R7              DEFINE POINTER TO CPVT\n         USING ITRH,R5              DEFINE POINTER TO IODV\n         B     START\n         DC    AL1(LENGTH-LENEBCDC) LENGTH OF EBCDIC DESCRIPTION\nLENEBCDC DC    C'CBPUC001'          EBCDIC DESCRIPTION OF MODULE\n         DC    C'&SYSDATE'          COMPILE DATE\nLENGTH   EQU   *\nSTART    STM   R14,R12,12(R13)      SAVE CALLER'S REGISTERS\n         LR    R11,R15              SET BASE REGISTER CONTENTS\n         DROP  R15                  DROP R15 AS BASE REGISTER\n         USING CBPUC001,R11         ESTABLISH ADDRESSABILITY TO\n*                                   UIM CSECT\n         ST    R13,SAVAREA+4        ESTABLISH BACKWARD LINKAGE IN\n*                                   CURRENT SAVEAREA\n         LA    R10,SAVAREA          OBTAIN SAVEAREA ADDRESS\n         ST    R10,8(R13)           ESTABLISH FORWARD LINKAGE IN\n*                                   CALLER'S SAVEAREA\n         LR    R13,R10              PLACES THIS UIMS OWN SAVEAREA\n*                                   ADDRESS IN REGISTER 13\n         L     R6,0(R1)             ESTABLISH ADDRESSABILITY TO UCA\n         L     R7,UCACPVTP          ESTABLISH ADDRESSABILITY TO CPVT\n         L     R5,UCAIODVP          ESTABLISH ADDRESSABILITY TO IODV\n*        WTO   'ENTERING THIS PROGRAM',ROUTCDE=11\n*\n***********************************************************************\n*  PUSHES A NEW ENTRY ON THE DIAGNOSTIC STACK                         *\n***********************************************************************\n*\nBEGN     CBPZPPDS PUSH,DIAG=DIAGDATA\n*\n         EJECT\n***********************************************************************\n*  FOR CALL TO BUILD DIT FOR THE GENERIC DEVICE                       *\n***********************************************************************\n*\n         CLI   UCAUIMRT,UCARINIT    TEST THE CALLER'S FUNCTION CODE\n*                                   TO DETERMINE IF THE PURPOSE OF THIS\n*                                   CALL IS TO BUILD A DIT FOR THE\n*                                   GENERIC DEVICE.\n         BNE   TSDFTBLD             IF THE CALL IS NOT TO BUILD A DIT,\n*                                   TEST TO SEE IF PURPOSE IS TO BUILD\n*                                   DFTS.\n         BAL   R14,BUILDDIT         CALLS ROUTINE TO BUILD THE DIT\n         B     RTN                  BRANCH TO CODE THAT REMOVES THE\n*                                   DIAGNOSTIC STACK ENTRY AND RETURNS\n*                                   TO THE CALLER\n*\n***********************************************************************\n*  FOR CALLS TO BUILD DFTS FOR THE SAMPLE DEVICE (IODEVICE CALLS).    *\n***********************************************************************\n*\nTSDFTBLD CLI   UCAUIMRT,UCARDFTB    TEST THE CALLER'S FUNCTION CODE\n*                                   TO DETERMINE IF THE PURPOSE OF THIS\n*                                   CALL IS TO BUILD DFTS FOR THE\n*                                   RECOGNIZED DEVICE.\n         BNE   RTN                  IF THE CALL IS NOT TO BUILD DFTS,\n*                                   RETURN TO CALLER.\n         CLC   IODVUNIT,UNITNM      COMPARE THE DEVICE SPECIFIED ON THE\n*                                   INTERNAL TEXT RECORD TO THE DEVICE\n*                                   NAME RECOGNIZED BY THIS MODULE.\n         BNE   RTN                  IF THE DEVICE IN THE INTERNAL TEXT\n*                                   RECORD DOES NOT MATCH THE SUPPORTED\n*                                   DEVICE IN THIS UIM, THEN IT REMOVES\n*                                   THE DIAGNOSTIC STACK ENTRY AND\n*                                   RETURNS TO CALLER.\n         OI    UCAFLAG1,UCARECOG    INDICATE THAT THE UIM HAS\n*                                   RECOGNIZED THIS DEVICE.\n         BAL   R14,PARMCHEK         CALL ROUTINE TO VALIDATE THE\n*                                   PARAMETERS SPECIFIED FOR THE DEVICE\n*                                   IN THE INTERNAL TEXT RECORD.\n         TM    IODVUIMF,IODVUINV    CHECK TO SEE IF AN ERROR CONDITION\n*                                   HAS BEEN FOUND.\n         BO    RTN                  IF SO, REMOVE DIAGNOSTIC ENTRY\n*                                   AND RETURN TO CALLER\n         BAL   R14,BUILDDFT         CALL ROUTINE TO BUILD DFTS FOR THE\n*                                   DEVICE RECOGNIZED BY THIS UIM\n         EJECT\n***********************************************************************\n*  POPS THE TOP ENTRY FROM THE DIAGNOSTIC STACK.                      *\n***********************************************************************\n*\nRTN      CBPZPPDS POP,DIAG=DIAGDATA\n*\n***********************************************************************\n*  RESTORES CALLER'S REGISTERS AND RETURNS                            *\n***********************************************************************\n*\n         L     R13,4(R13)           OBTAINS CALLERS SAVEAREA.\n         LM    R14,R12,12(R13)      RESTORE CALLER'S REGISTERS.\n         BR    R14                  RETURN TO CALLER.\n         EJECT\n*\n***********************************************************************\n*  THIS ROUTINE INITIALIZES THE DIT BUILD PARAMETER LIST              *\n***********************************************************************\n*\nBUILDDIT ST    R14,SAVWORD1         PLACE RETURN ADDRESS IN SAVEAREA.\n         XC    DIP,DIP              ZERO OUT DIT BUILD PARAMETER LIST.\n         MVC   DIPID,DIPIDNM        INSERT CONTROL BLOCK ID\n         MVI   DIPVER,DIPVERN       PLACE VERSION NUMBER IN PARAMETER\n*                                   LIST.\n         MVC   DIPNAME,GNRCNM       PLACE NAME OF GENERIC DEVICE NAME\n*                                   IN DIP.\n         MVC   DIPUCBTY,GNRCTYP1    INITIALIZE ALLOCATION UCB TYPE\n*                                   INFORMATION.\n         MVC   DIPGPTPR,GNRCPRT1    INITIALIZE GENERIC PREFERENCE\n*                                   TABLE PRIORITY.\n***********************************************************************\n*  CALLS THE DIT BUILD ROUTINE.                                       *\n***********************************************************************\n         ST    R6,PARMAREA          STORE ADDRESS OF UCA IN FIRST WORD\n*                                   OF PARMAREA.\n         LA    R10,DIP              STORE ADDRESS OF DIP IN SECOND WORD\n*                                   OF PARMAREA.\n         ST    R10,PARMAREA+4\n         LA    R1,PARMAREA          STORE ADDRESS OF PARAMETER LIST\n*                                   IN REGISTER 1\n         L     R15,UCADITP\n         BALR  R14,R15              CALL ROUTINE TO BUILD DITS\n         L     R14,SAVWORD1\n         BR    R14\n         EJECT\n***********************************************************************\n*  THIS ROUTINE BUILDS THE PARAMETER LIST SO THAT THE PARAMETER       *\n*  CHECKER CAN INSURE THAT THE REQUIRED PARAMETERS ARE ALL SPECIFIED  *\n*  AND IDENTIFY ANY UNSUPPORTED PARAMETERS.                           *\n***********************************************************************\nPARMCHEK ST    R14,SAVWORD1         STORE RETURN ADDRESS IN SAVEAREA\n         XC    PCP,PCP              ZERO OUT THE PCP\n         MVC   PCPID,PCPIDNM        PLACE CONTROL BLOCK ID IN PCP\n***********************************************************************\n*  TURNS ON BITS CORRESPONDING TO THE PARAMETERS THAT THE SPECIFIED   *\n*  DEVICE SUPPORTS.                                                   *\n***********************************************************************\n         OI    IODVFLG1-IODVPRMS+PCPSUPP,IODVFADP    ADAPTER PARAMETER\n         OI    IODVFLG1-IODVPRMS+PCPSUPP,IODVFADD    ADDRESS PARAMETER\n         OI    IODVFLG2-IODVPRMS+PCPSUPP,IODVFUNI    UNIT PARAMETER\n         OI    IODVFLG2-IODVPRMS+PCPSUPP,IODVFTCU    TCU  PARAMETER\n*        OI    IODVFLG1-IODVPRMS+PCPSUPP,IODVFOFF    OFFLINE PARAMETER\n***********************************************************************\n*  TURNS ON BITS CORRESPONDING TO THE PARAMETERS THAT THE             *\n*  SPECIFIED DEVICE REQUIRES.                                         *\n***********************************************************************\n         OI    IODVFLG1-IODVPRMS+PCPSUPP,IODVFADP    ADAPTER PARAMETER\n         OI    IODVFLG1-IODVPRMS+PCPSUPP,IODVFADD    ADDRESS PARAMETER\n         OI    IODVFLG2-IODVPRMS+PCPSUPP,IODVFUNI    UNIT PARAMETER\n         OI    IODVFLG2-IODVPRMS+PCPSUPP,IODVFTCU    TCU  PARAMETER\n         ST    R6,PARMAREA          STORE ADDRESS OF UCA IN FIRST WORD\n*                                   OF PARMAREA.\n         LA    R10,PCP              STORE ADDRESS OF PCP IN SECOND WORD\n*                                   OF PARMAREA.\n         ST    R10,PARMAREA+4\n         LA    R1,PARMAREA          STORE ADDRESS OF PARAMETERS LIST\n*                                   IN REGISTER 1\n         L     R15,UCAPARMP\n         BALR  R14,R15              CALL ROUTINE TO VALIDATE PARAMETERS\n         L     R14,SAVWORD1         RESTORE RETURN ADDRESS TO MAIN\n*                                   ROUTINE.\n         BR    R14                  RETURN TO CALLER.\n         EJECT\n*\n***********************************************************************\n*  THE DFT BUILD ROUTINE FOLLOWS. THE FOLLOWING STEPS ARE EXECUTED    *\n*  1) ZEROS THE DFP AND INSERTS THE CONTROL BLOCK ID                  *\n*  2) SETS THE GENERIC NAME OF THE DEVICE                             *\n*  3) INITIALIZES DDT AND MLT NAMES                                   *\n*  4) INITIALIZES NUMBER OF SENSE BYTES AND STATISTICS TABLE ENTRIES  *\n*  5) INITIALIZES UCB TYPE FIELD                                      *\n***********************************************************************\nBUILDDFT ST    R14,SAVWORD1         PLACE RETURN ADDRESS IN SAVEAREA.\n         XC    DFP,DFP              ZERO OUT THE DFP.\n         LA    R2,DFPMLTNL          INITIALIZE POINTER TO MLT NAME LIST\n         ST    R2,DFPMLTLP          PUT THIS VALUE IN THE DFP\n         XC    DFPMLTNL,DFPMLTNL    ZERO OUT THE MLT NAME LIST\n         MVC   DFPID,DFPCBID        PLACE CONTROL BLOCK ID IN DFP.\n         MVC   DFPNAME,IODVUNIT     PLACE GENERIC NAME OF DEVICE IN DFP\n         MVC   DFPMLTNM,NAMEMLT     INITIALIZE MLT NAME.\n         MVC   DFPMLTLC,ONE         INITIALIZE MLT COUNT.\n         MVC   DFPDDTNM,NAMEDDT     INITIALIZE DDT NAME.\n         MVI   DFPSNSCT,SENSBYT#    INITIALIZE NUMBER OF SENSE BYTES.\n         MVI   DFPDSTCT,STATETY#    INITIALIZE COUNT OF STATISTICS\n*                                   TABLE ENTRIES.\n         MVC   DFPUCBTY,GNRCTYP1    INITIALIZE DFT UCB TYPE\n*                                   INFORMATION.\n         MVI   DFPETI,ERPINDEX      SET ERP INDEX\n         OI    DFPFLAG1,MIHPB       MIH BYPASSED = YES\n         TM    IODVFLG1,IODVFOFF    OFFLINE SPECIFIED?\n         BZ    LOOPINIT             IF NOT, SKIP AHEAD\n         OI    DFPFLAG1,DFPOFFLN    OFFLINE, IF SPECIFIED\n***********************************************************************\n*  THIS LOOP MANAGES SUCCESSIVE CALLS TO THE DFT BUILD ROUTINE        *\n***********************************************************************\n*\nLOOPINIT LH    R9,IODVNBRD          OBTAIN NUMBER OF REQUESTED DEVICES\n         L     R10,IODVDNBR         OBTAIN DEVICE NUMBER\nDFTLOOP  TM    IODVUIMF,IODVUINV    TEST TO SEE IF TEXT RECORD MARKED\n*                                   INVALID.\n         BO    DONEDFTB             IF SO, DO NOT MAKE ANY MORE CALLS\n*                                   TO BUILD DFTS.\n         ST    R10,DFPDNBR          ESTABLISH DEVICE NUMBER TO BE SENT\n*                                   TO DFT BUILD ROUTINE.\n         ST    R6,PARMAREA          INITIALIZE PARAMETER AREA\n         LA    R4,DFP\n         ST    R4,PARMAREA+4\n         LA    R1,PARMAREA          STORE ADDRESS OF PARAMETER LIST\n*                                   IN REGISTER 1.\n         L     R15,UCADFTP          OBTAIN THE ENTRY POINT ADDRESS FROM\n*                                   THE UCA\n         BALR  R14,R15              CALL ROUTINE TO BUILD DFT.\n         A     R10,ONE              INCREMENT DEVICE NUMBER\n         BCT   R9,DFTLOOP           LOOP UNTIL EVERY DEVICE DEFINED\nDONEDFTB L     R14,SAVWORD1         RESTORE RETURN ADDRESS FROM\n*                                   SAVEAREA.\n         BR    R14                  RETURN TO MAIN PROCEDURE\n         EJECT\n**********************************************************************\n*                                                                    *\n*  THE FOLLOWING WORD SERVES AS SAVEAREA FOR REGISTER 14 WHEN        *\n*  INTERNAL PROCEDURES ARE CALLED.                                   *\n*                                                                    *\n**********************************************************************\n*\nSAVWORD1 DS    F\n*\n**********************************************************************\n*                                                                    *\n*  THE FIRST TWO OF THE FOLLOWING WORDS SERVE AS THIS MODULE'S       *\n*  PARAMETER AREA FOR EXTERNAL CALLS.                                *\n*  THE NEXT 18 WORDS SERVE AS THE MODULE SAVEAREA.                   *\n*                                                                    *\n**********************************************************************\n*\nPARMAREA DS    2F\nSAVAREA  DS    18F\n*\n**********************************************************************\n*                                                                    *\n*  DEVICE DEPENDENT CONSTANTS                                        *\n*                                                                    *\n**********************************************************************\n*\nONE      DC    F'1'                 CONSTANT ONE\nSTATETY# EQU   1                    NUMBER OF STATISTICS TABLE ENTRIES\nSENSBYT# EQU   2                    NUMBER OF SENSE BYTES\nERPINDEX EQU   41                   ERP INDEX\nMIHPB    EQU   X'20'                BYPASS MIH\nGNRCPRT1 DC    F'6400'              GENERIC PREF VALUE.\nGNRCNM   DC    CL8'2260'            GENERIC NAME.\nUNITNM   DC    CL8'2260'            DEVICE NAME.\nGNRCTYP1 DC    XL4'51004082'        UCB TYPE\nNAMEDDT  DC    CL8'IECVDDT2'\nNAMEMLT  DC    CL8'IEAMLT99'\n*\n**********************************************************************\n*                                                                    *\n*  REGISTER EQUATES                                                  *\n*                                                                    *\n**********************************************************************\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5                    IODV POINTER.\nR6       EQU   6                    UCA POINTER.\nR7       EQU   7                    CPVT POINTER.\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n**********************************************************************\n*                                                                    *\n*  THIS MACRO INVOCATION GENERATES A DIAGNOSTIC STACK ENTRY          *\n*                                                                    *\n**********************************************************************\n*\nDIAGDATA CBPZDIAG MODNAME=CBPUC001,CSECT=CBPUC001,COMP=U2260,          X\n               DESC='UIM FOR 2260'\n         EJECT\n         CBPZDFP\n         EJECT\n         CBPYDIP\n         EJECT\n         CBPZPCP\n         EJECT\n         CBPZCPVT\n         EJECT\n         CBPZITRH\n         EJECT\n         CBPZUCA\n         EJECT\n*        CBPZIODV\n         EJECT\n*        CBPZPCP\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEAMLT99": {"ttr": 769, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " TITLE  'IEAMLT99 - MODULE LISTS TABLE'\n*  /* START OF SPECIFICATIONS ****\n*\n*01* MODULE NAME = IEAMLT99\n*\n*01* DESCRIPTIVE NAME = THIS MODULE LISTS TABLE (MLT) CAN BE USED AS\n*                       THE PROTOTYPE FOR THE MLT FOR A UNIT RECORD\n*                       DEVICE IN WHICH YOU SPECIFY THE ERROR RECOVERY\n*                       PROCEDURE (ERP). THE STANDARD UNIT RECORD\n*                       DEVICE SUPPORT EXITS ARE ALSO USED.\n*\n*01* FUNCTION =\n*      IEAMLT99 IS A LOAD MODULE THAT CONTAINS THE LIST OF\n*      NUCLEUS DEVICE DEPENDENT MODULE NAMES AND THE LIST OF\n*      LINK PACK AREA (LPA) DEVICE DEPENDENT MODULE NAMES\n*      REQUIRED FOR THE UNITVALUE DEVICE.\n*\n*02*   OPERATION =\n*      IF THE I/O CONFIGURATION SELECTED FOR AN IPL DEFINES THE\n*      SPECIFIED DEVICE, THE SYSTEM LOADS THE CORRESPONDING MLT INTO\n*      THE IPL WORK SPACE. THE LISTED NUCLEUS MODULES ARE LOADED\n*      FROM SYS1.NUCLEUS INTO NUCLEUS REGION AND THE LISTED LPA\n*      MODULES ARE LOADED FROM SYS1.LINKLIB, OR ANY DATA SET IN\n*      THE LINK LIST (LNKLST) CONCATENATION, INTO THE LPA.\n*\n*03*     RECOVERY OPERATION =  N/A\n*\n*01* NOTES =\n*\n*02*   DEPENDENCIES = NONE\n*\n*02*   RESTRICTIONS = NONE\n*\n*02*   REGISTER CONVENTIONS = N/A\n*\n*02*   PATCH LABEL = THERE IS NO PATCH LABEL. HOWEVER, THE IOSDMLT\n*                    MACRO BUILDS UNUSED ENTRIES AT THE END OF THE\n*                    NUCLEUS AND LPA MODULE LISTS. ADDITIONAL MODULE\n*                    NAMES CAN BE ZAPPED INTO THESE ENTRIES AND THE\n*                    APPROPRIATE MODULE LIST COUNT CAN BE INCREMENTED.\n*\n*01* MODULE TYPE = TABLE\n*\n*02*   PROCESSOR = N/A\n*\n*02*   MODULE SIZE = FOR EXACT SIZE SEE ASSEMBLER LISTING\n*\n*02*   ATTRIBUTES =\n*\n*03*     LOCATION = IPL WORK SPACE\n*\n*03*     STATE = N/A\n*\n*03*     AMODE = N/A\n*\n*03*     RMODE = N/A\n*\n*03*     KEY = N/A\n*\n*03*     MODE = N/A\n*\n*03*     SERIALIZATION = NONE\n*\n*03*     TYPE = N/A\n*\n*01* MACROS EXECUTABLE = N/A\n*\n*01* CHANGE ACTIVITY = NONE\n*\n***** END OF SPECIFICATIONS ******************************************/\n* UNITVALUE NUCLEUS AND LPA DEVICE SUPPORT MODULES\nIEAMLT99 IOSDMLT                                                       X\n               NUCL=(IECVDDT2,IECVXURS,IECVXTPT,IECVOPTC),             X\n               LPAL=(IECLMSGC,IGE0004A)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFACTRT": {"ttr": 772, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "IEFACTRT TITLE 'SMF JOB/STEP TERMINATION EXIT ROUTINE     '\n*********************************************************************\n*                                                                   *\n*   EXIT USES THE SMF TYPE 30 RECORD.  IT IS WRITTEN USING          *\n*   31 BIT ADDRESSING MODE.  IT WILL ALSO ELIMINATE THE WRITING     *\n*   OF END OF STEP AND END OF JOB MESSAGES FOR TSO USERS.  IT       *\n*   ALSO USES AN ESTAE ROUTINE.                                     *\n*                                                                   *\n*   MODIFIED ON 9/11/88 TO ADD EXCP COUNTS TO MSGLOG FOR DEVICES    *\n*   AND ADD DDNAME FOR UNITS. VIO DEVICES ARE INDICATED BY \"VIO\".   *\n*   SERVICE UNITS ARE ADDED ALSO.                                   *\n*                                                                   *\n*        R3    POINTS TO EXIT PARAMETER LIST                        *\n*        R4    BASE FOR SMF RECORD                                  *\n*        R5    BASE FOR SMF RECORD SECTION PROCESSING               *\n*        R11   SECOND PROGRAM BASE                                  *\n*        R12   PROGRAM BASE AND ENTRY FOR IEFYS                     *\n*        R13   SAVE AREA POINTER AND POINTER TO 45F FOR IEFYS       *\n*                                                                   *\n*********************************************************************\n         EJECT                                                      *\nIEFACTRT CSECT ,                                                    *\nIEFACTRT AMODE 31                                                   *\nIEFACTRT RMODE ANY                                                  *\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\nCK       EQU   C'K'\nC0       EQU   C'0'\nSUBPOOL  EQU   X'252'\n         TITLE 'INITIALIZATION'\n         SPLEVEL SET=2            GET XA LEVEL IF REQUIRED AS WE ARE\n*                                 RUNNING IN 31 BIT MODE\n         SAVE  (14,12),,IEFACTRT.&SYSDATE.&SYSTIME                  *\n         USING IEFACTRT,R12,R11                                     *\n         LR    R12,R15            SET                               *\n         LA    R15,1               BASE                             *\n         LA    R11,4095(R15,R12)    REGISTER USAGE                  *\n         USING DATA,R13           SET UP DATA DSECT ADDR            *\n         USING JMR,R3             SET UP ADDRESSABILITY TO COMMON   *\n         L     R3,PARMEPRM-PARMS(0,R1)  COMMON AREA ADDRESS         *\n         TM    JMRINDC,JMRFIND    IS IT TIME SHARING USER?\n         BO    QUICKOUT           YES, EXIT BEFORE GETMAIN\n         GETMAIN  RU,LV=LDATA,SP=SUBPOOL GET STORAGE FOR DATA CSECT\n         ST    R13,SAVEBK-SAVE(,R1) SAVE CALLER'S AREA ADDR         *\n         ST    R1,SAVEFW          SAVE MY SAVE AREA ADDRESS         *\n         LR    R15,R1             SAVE GETMAINED STORE ADDRESS      *\n         L     R1,SAVER1          RELOAD REGISTERS AFTER GETMAIN    *\n         L     R2,SAVER0          RELOAD REG2 WITH REG0 ENTRY CODE  *\n         LR    R13,R15          LOAD REGISTER 13 WITH GETMAINED ADDR\n         MVC   PARMS(LPARMS),0(R1) SAVE INPUT PARMS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET UP RECOVERY ENVIRONMENT                                  *\n*                                                                     *\n***********************************************************************\n         LA    R0,RTRYRTN1        RETRY ROUTINE - NO SDWA\n         ST    R0,ESTAPARM        STORE IN PARAMETER LIST\n         LA    R0,RTRYRTN2        RETRY ROUTINE - WITH SDWA\n         ST    R0,ESTAPARM+4      STORE IN PARAMETER LIST\n         STM   R12,R13,ESTAPARM+8 STORE BASE & DATA REG IN PARM\n         SPACE\n         MVC   ESTAEW(LESTAEL),ESTAEL MOVE IN ESTAE PARAMETER LIST\n         ESTAE RECOVERY,CT,PARAM=ESTAPARM,MF=(E,ESTAEW) SETUP RCVRY\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE REASON FOR ENTRY  STEP/JOB TERMINATION             *\n*                                                                     *\n***********************************************************************\n         L     R4,PARMRECD         LOAD ADDRESS OF SMF RECORD\n         C     R2,R30CODE          IS IT SMF TYPE 30 TERMINATION\n         BNE   EXIT                NO - EXIT\n         SPACE\n         TIME  BIN                 GET CURRENT TIME/DATE\n         STM   R0,R1,TIMEDATE      SAVE BINARY DATE AND TIME VALUES\n         SPACE\n         MVI   MSG1,C' '          MOVE BLANK TO MSG1 LINE\n         MVC   MSG1+1(131),MSG1   FILL WITH BLANKS\n         SPACE\n         USING SMFRCD30,R4\n         CLI   SMF30SON+1,1        CHECK IF SEGMENT IS THERE\n         BL    EXIT                NO - EXIT\n         SPACE\n         LR    R5,R4              GET RECORD ADDRESS\n         A     R5,SMF30SOF        POINT TO SS SEGMENT\n         USING SMF30PSS,R5\n         CLC   SMF30TYP,R30JOB    WAS IT JOB TERMINATION\n         BE    JOBTRM             GO PROCESS JOB TERMINATION\n         SPACE\n         CLC   SMF30TYP,R30STEP   WAS IT STEP TERMINATION\n         BNE   EXIT               NO - EXIT\n         DROP R5\n         TITLE 'STEP TERMINATION MESSAGE FORMATTING ROUTINE'\n***********************************************************************\n*                                                                     *\n*        PROCESS STEP TERMINATION INFORMATION                         *\n*                                                                     *\n***********************************************************************\nSTEPTERM EQU   *\n         SR    R0,R0             ZERO OUT REGISTER 0\n         LR    R1,R0             ZERO OUT REGISTER 1\n         L     R2,PARMINDC       POINT TO STEP NUMBER\n         ICM   R1,1,1(R2)        GET STEP NUMBER\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   M1SNO(3),EDWORK2+L'EDWORK2-L'M1SNO MOVE STEP NUMBER IN\n         SPACE\n         SR    R0,R0             ZERO OUT REGISTER 0\n         LR    R1,R1             ZERO OUT REGISTER 1\n         L     R2,PARMJOBC       POINT TO JOB CPU TIME\n         ICM   R1,7,0(R2)        GET JOB CPU TIME\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   JOBCPUTM,EDWORK+L'EDWORK-L'JOBCPUTM  SAVE JOB CPUTIME\n         SPACE\n***********************************************************************\n*                                                                     *\n*        PROCESS ID SEGMENT                                           *\n*                                                                     *\n***********************************************************************\n         CLI   SMF30ION+1,1      CHECK IF SEGMENT IS THERE\n         BL    EXIT              NO - EXIT\n         SPACE\n         CLI   SMF30RON+1,1      CHECK IF SEGMENT IS THERE\n         BL    T30DDEXT          NO - THIS IS AN EXCP EXTENSION RECORD\n         SPACE\n         LR    R5,R4             GET RECORD ADDRESS\n         A     R5,SMF30IOF       POINT TO ID SEGMENT\n         USING SMF30ID,R5\n         SPACE\n         MVI   WTO1TXT,C'*'      MOVE ASTERISK TO MESSAGE LINE\n         MVC   WTO1TXT+1(131),WTO1TXT FILL WITH ASTERISKS\n         LA    R0,X'0'           PUT MESSAGE TO JOB MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         MVC   WTO1TXT+51(27),STEPHDNG MOVE IN STEP HEADER\n         LA    R0,X'0'           PUT MESSAGE TO JOB MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         LA    R0,X'0'           PUT MESSAGE TO JOB MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVC   WTO1TXT+2(9),STPNMHDR MOVE IN STEP NAME HEADER\n         MVC   WTO1TXT+16(8),SMF30STM MOVE IN STEP NAME\n         SPACE\n         MVC   M1JN(8),SMF30JBN  JOBNAME                           S\n         MVC   M1SN(8),SMF30STM  STEP NAME                         S\n         MVC   M1PN(8),SMF30PGM  PROGRAM NAME                      S\n         SPACE\n         LH    R1,SMF30PGN       GET PERFORMANCE GROUP NUMBER\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   PGNSTOR,EDWORK2+L'EDWORK2-L'PGNSTOR SAVE PERFORM GROUP\n         SPACE\n         MVC   WTO1TXT+28(10),STRTHDR MOVE IN START TIME HEADER\n         SR    R0,R0             ZERO OUT REGISTER 0\n         SR    R1,R1             ZERO OUT REGISTER 1\n         ICM   R1,7,SMF30SIT+1   GET TIME STEP STARTED\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   WTO1TXT+40(11),EDWORK+L'EDWORK-11 MOVE IN START TIME\n         SPACE\n         L     R1,CURRTIME       GET TIME STEP ENDED\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   END30TME,EDWORK+L'EDWORK-L'END30TME  STORE ENDED TIME\n         SPACE\n         SR    R0,R0             ZERO OUT REGISTER 0\n         L     R1,CURRTIME       GET TIME STEP ENDED\n         ICM   R0,7,SMF30SIT+1   GET TIME STEP STARTED\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   ELAPTIME,EDWORK+L'EDWORK-L'ELAPTIME  STORE ELAPSED TIME\n         SPACE\n***********************************************************************\n*                                                                     *\n*        PROCESS STORAGE AND PAGING DATA                              *\n*                                                                     *\n***********************************************************************\n         CLI   SMF30RON+1,1       CHECK IF SEGMENT IS THERE\n         BL    T30DDEXT           NO - THIS IS AN EXCP EXTENSION RECORD\n         SPACE\n         LR    R5,R4              GET RECORD ADDRESS\n         A     R5,SMF30ROF        POINT TO STORAGE AND PAGE SEGMENT\n         USING SMF30SAP,R5\n         SPACE\n         MVC   WTO1TXT+54(14),VRTSUSEH MOVE IN VIRTUAL SYSTEM HEADER\n         LH    R1,SMF30SYS       GET VIRTUAL SYSTEM STORAGE USED\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+70(6),EDWORK2+L'EDWORK2-6 MOVE VIRT SYS STOR\n         MVI   WTO1TXT+76,CK     MOVE IN A K\n         SPACE\n         LH    R1,SMF30PRV       GET VIRTUAL PRIVATE STORAGE USED\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   PRVSTOR,EDWORK2+L'EDWORK2-L'PRVSTOR STORE VIRT PVT STOR\n         SPACE\n         MVC   WTO1TXT+80(8),PGINHDR MOVE IN PAGE INS HEADER\n         L     R1,SMF30PGI       GET VIRTUAL SYSTEM STORAGE USED\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+95(8),EDWORK2+L'EDWORK2-8 MOVE PAGE IN COUNT\n         SPACE\n         L     R1,SMF30NSW        GET SWAP OUT COUNT                S\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   NSWSTOR,EDWORK2+L'EDWORK2-L'NSWSTOR STORE # OF SWAPS\n         SPACE\n         L     R1,SMF30PSI        PAGES SWAPPED IN                  S\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   PSISTOR,EDWORK2+L'EDWORK2-L'PSISTOR STORE # OF PSI\n         SPACE\n         L     R1,SMF30PGO        PAGE OUTS                         S\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   PGOSTOR,EDWORK2+L'EDWORK2-L'PGOSTOR STORE # OF PGO\n         SPACE\n         L     R1,SMF30PSO        PAGES SWAPPED OUT                 S\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   PGOSTOR,EDWORK2+L'EDWORK2-L'PGOSTOR STORE # OF PGO\n         SPACE\n         L     R1,SMF30VPI        VIO PAGES IN                      S\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   VPISTOR,EDWORK2+L'EDWORK2-L'VPISTOR STORE # OF VPI\n         SPACE\n         L     R1,SMF30VPO        VIO PAGES OUT                     S\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   VPOSTOR,EDWORK2+L'EDWORK2-L'VPOSTOR STORE # OF VPO\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS CPU ACCOUNTING SEGMENT                               *\n*                                                                     *\n***********************************************************************\n         CLI   SMF30CON+1,1      CHECK IF SEGMENT IS THERE\n         BL    EXIT              NO - EXIT\n         SPACE\n         LR    R5,R4             GET RECORD ADDRESS\n         A     R5,SMF30COF       POINT TO ACCOUNTING SEGMENT\n         USING SMF30CAS,R5\n         SPACE\n         MVC   WTO1TXT+105(8),STCPUHDR MOVE IN STEP CPU TIME HEADER\n         SR    R0,R0             ZERO OUT REGISTER 0\n         SR    R1,R1             ZERO OUT REGISTER 1\n         ICM   R1,7,SMF30CPT+1   GET STEP CPU TIME\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   WTO1TXT+119(11),EDWORK+L'EDWORK-11  MOVE CPU TIME\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         SPACE\n         MVC   WTO1TXT+2(8),PGMNMHDR MOVE IN PROGRAME NAME HEADER\n         MVC   WTO1TXT+16(8),M1PN MOVE IN PROGRAM NAME\n         SPACE\n         MVC   WTO1TXT+28(10),STOPTMHD MOVE IN ENDED TIME HEADER\n         MVC   WTO1TXT+39(11),END30TME MOVE IN STEP END TIME\n         SPACE\n         MVC   WTO1TXT+54(14),VRTCUSEH MOVE VIRTUAL PVT USED HEADER\n         MVC   WTO1TXT+70(6),PRVSTOR MOVE IN PRIVATE STORAGE USED\n         MVI   WTO1TXT+76,CK     MOVE IN A K\n         SPACE\n         MVC   WTO1TXT+80(9),PGOUTHDR MOVE IN PAGE OUT HEADER\n         MVC   WTO1TXT+95(8),PGOSTOR MOVE IN NUMBER OF PAGE OUTS\n         SPACE\n         MVC   WTO1TXT+105(8),JOBCPUHD MOVE IN JOB CPUTIME HEADER\n         MVC   WTO1TXT+119(11),JOBCPUTM MOVE IN JOB CPUTIME\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         SPACE\n         MVC   WTO1TXT+2(13),DPRTYHDR MOVE IN DISPATCH PRTY HEADER\n         LH    R1,SMF30PTY       GET DISPATCH PRIORITY\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+16(3),EDWORK2+L'EDWORK2-3 MOVE IN DISPATCH PRTY\n         SPACE\n         MVC   WTO1TXT+28(10),ELAPHDR MOVE IN ELAPSED TIME HEADER\n         MVC   WTO1TXT+39(11),ELAPTIME MOVE IN ELAPSE TIME\n         SPACE\n         MVC   WTO1TXT+54(12),NUMSWPHD MOVE NUMBER OF SWAPS HEADER\n         MVC   WTO1TXT+70(8),NSWSTOR MOVE IN NUMBER OF SWAPS\n         SPACE\n         MVC   WTO1TXT+80(12),PGSWPHDR MOVE NUMBER OF PAGES HEADER\n         MVC   WTO1TXT+95(8),PSISTOR MOVE NUMBER OF PAGE SWAP INS\n         SPACE\n         MVC   WTO1TXT+105(8),STPSRBHD MOVE IN STEP SRB HEADER\n         SR    R0,R0             ZERO OUT REGISTER 0\n         SR    R1,R1             ZERO OUT REGISTER 1\n         ICM   R1,7,SMF30CPS+1   GET STEP SRB TIME\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   WTO1TXT+119(11),EDWORK+L'EDWORK-11  MOVE SRB TIME\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         SPACE\n         MVC   WTO1TXT+2(11),PRFGRPHD MOVE IN PERFORMANCE GROUP HEADER\n         MVC   WTO1TXT+20(3),PGNSTOR MOVE IN PERFORMANCE GROUP NUMBER\n         SPACE\n***********************************************************************\n*                                                                     *\n*        PROCESS COMPLETION CODE SEGMENT                              *\n*                                                                     *\n***********************************************************************\n         CLI   SMF30TON+1,1        CHECK IF SEGMENT IS THERE\n         BL    EXIT                NO - EXIT\n         SPACE\n         LR    R5,R4              GET RECORD ADDRESS\n         A     R5,SMF30TOF        POINT TO COMP CODE SEGMENT\n         USING SMF30CMP,R5\n         SPACE\n         LA    R1,SMF30STI        POINT TO STEP TERMINATION INDICATOR\n         SR    R0,R0              ZERO OUT REGISTER 0\n         LH    R0,SMF30SCC        GET COMPLETION CODE\n         BAL   R14,PRETCDE        CONVERT FOR PRINT\n         SPACE\n         MVC   WTO1TXT+105(15),STPCCHDR MOVE COMPLETION CODE HEADER\n         MVC   WTO1TXT+125(5),M1CC  MOVE IN COMPLETION CODE\n         SPACE\n***********************************************************************\n*                                                                     *\n*        PROCESS PERFORMANCE SEGMENT                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLI   SMF30PON+1,1      CHECK IF SEGMENT IS THERE\n         BL    EXIT              NO - EXIT\n         SPACE\n         LR    R5,R4             GET RECORD ADDRESS\n         A     R5,SMF30POF       POINT TO PERFORMANCE SEGMENT\n         USING SMF30PRF,R5\n         SPACE\n         MVC   WTO1TXT+28(10),SRVCHDR MOVE IN SERVICE UNITS HEADER\n         L     R1,SMF30SRV       GET TOTAL SERVICE UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+39(11),EDWORK2+L'EDWORK2-11 MOVE SERVICE UNITS\n         SPACE\n         MVC   WTO1TXT+54(14),TACTHDR MOVE TRANS ACTIVE TIME HEADER\n         L     R1,SMF30TAT       GET STEP TRANSACTION ACTIVE TIME\n         SLL   R1,10\n         SR    R0,R0             ZERO OUT REGISTER 0\n         D     R0,=F'10000'\n         SR    R0,R0\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   WTO1TXT+70(11),EDWORK+L'EDWORK-11 MOVE TRANS ACT TIME\n         SPACE\n         LA    R0,X'1'            PUT MESSAGE TO JESMSG,JOBLOG+SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE             S\n         SPACE\n         MVI   WTO1TXT,C'*'      MOVE ASTRISK TO MESSAGE LINE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         MVI   WTO1TXT+131,C'*'  MOVE ASTRISK TO MESSAGE LINE\n         SPACE\n         MVC   WTO1TXT+3(18),STORHDR MOVE IN STORAGE UNITS HEADER\n         L     R1,SMF30MSO       GET MAIN STORAGE UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+22(11),EDWORK2+L'EDWORK2-11 MOVE STORAGE UNITS\n         SPACE\n         MVC   WTO1TXT+38(9),CPUHDR MOVE IN CPU UNITS HEADER\n         L     R1,SMF30CSU       GET TOTAL CPU UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+52(11),EDWORK2+L'EDWORK2-11 MOVE CPU UNITS\n         SPACE\n         MVC   WTO1TXT+68(9),SRBHDR MOVE IN SRB UNITS HEADER\n         L     R1,SMF30SRB       GET TOTAL SRB UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+82(11),EDWORK2+L'EDWORK2-11 MOVE SRB UNITS\n         SPACE\n         MVC   WTO1TXT+98(9),IOHDR MOVE IN IO UNITS HEADER\n         L     R1,SMF30IO        GET TOTAL IO UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+112(11),EDWORK2+L'EDWORK2-11 MOVE IO UNITS\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS EXCP DATA                                            *\n*                                                                     *\n***********************************************************************\nEXCPCODE EQU   *\n         CLI   SMF30EON+1,1        CHECK IF SEGMENT IS THERE\n         BL    JBSTPEND            NO - GO TO JOB STEP END\n         SPACE\n         LH    R6,SMF30EON        GET NUMBER OF EXCP SEGMENTS\n         LR    R5,R4              GET RECORD ADDRESS\n         A     R5,SMF30EOF        POINT TO EXCP SEGMENT\n         USING SMF30EXP,R5\n         SPACE\n         SR    R9,R9              ZERO OUT REGISTER\n         MVI   WTO1TXT,C'*'       MOVE ASTERISK TO MESSAGE LINE\n         MVC   WTO1TXT+1(131),WTO1TXT FILL ENTIRE LINE WITH ASTRISKS\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '     MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1  FILL LINE WITH BLANKS\n         MVC   WTO1TXT+52(15),EXCPHDR1 MOVE IN EXCP STASTISTICS HEADER\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '     MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1  FILL LINE WITH BLANKS\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVC   WTO1TXT+3(28),EXCPHDR2 MOVE IN EXCP HEADER 2\n         MVC   WTO1TXT+33(28),EXCPHDR2 MOVE IN EXCP HEADER 2\n         MVC   WTO1TXT+63(28),EXCPHDR2 MOVE IN EXCP HEADER 2\n         MVC   WTO1TXT+93(28),EXCPHDR2 MOVE IN EXCP HEADER 2\n         EJECT\nFIRSTDD  EQU   *\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\nDDEXTCNT EQU   *\n         MVI   WTO1TXT+1,C' '     MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1  FILL LINE WITH BLANKS\n         LA    R3,WTO1TXT+3       LOAD ADDRESS OF MESSAGE LINE\n         LA    R7,4               LOAD NUMBER OF UNITS PER LINE\n         SPACE\nCHECKDDN EQU   *\n         CLC   SAVEDDN,SMF30DDN   IS THE DDNAME SAME AS PREVIOUS\n         BNE   NEWDDN             NO - THIS IS A NEW DDNAME\n         L     R1,CONCAT#         GET CONCAT DD NUMBER\n         A     R1,=F'1'           ADD ONE TO NUMBER\n         ST    R1,CONCAT#         SAVE CONCAT DD NUMBER\n         BAL   R14,PCOUNT         GO CONVERT IT\n         MVC   9(3,R3),EDWORK2+L'EDWORK2-3 MOVE IN CONCAT #\n         MVI   9(R3),C'+'         MOVE IN PLUS SIGN\n         B     NEXTDDN            COMPLETE PROCESSING\n         SPACE\nNEWDDN   EQU   *\n         XC    CONCAT#,CONCAT#    CLEAR OUT WORK AREA\n         MVC   SAVEDDN,SMF30DDN   SAVE NEW DDNAME\n         SPACE\nNEXTDDN  EQU   *\n         CLC   SMF30CUA,=X'7FFF'  IS IT A VIO UCB\n         BNE   TESTJES2           NO, GO TEST FOR JES2\n         SPACE\n         MVC   0(8,R3),SMF30DDN   MOVE IN DD NAME\n         MVC   14(3,R3),=C'VIO'   MOVE TO MESSAGE FIELD\n         B     GETEXCPS           GO GET EXCP COUNT\n         SPACE\nTESTJES2 EQU   *\n         CLC   SMF30CUA,=H'0'     IS IT A JES2 UCB\n         BE    JES2UCB            YES, GO BYPASS\n         SPACE\n         CLC   SMF30DDN(3),=C'SYS' DOES DDNAME BEGIN WITH SYS\n         BNE   MOVEDDNS           NO - PROCESS DDNAME NORMALLY\n         SPACE\n         CLC   SMF30DDN+3(5),=C'00000' CHECK IF LAST 5 CHAR IS NUMERIC\n         BL    MOVEDDNS           NO - PROCESS DDNAME NORMALLY\n         SPACE\n         CLC   SMF30BLK,=F'0'     IS THERE ANY EXCP COUNT\n         BE    JES2UCB            NO -  GO BYPASS\n         SPACE\nMOVEDDNS EQU   *\n         MVC   0(8,R3),SMF30DDN   MOVE IN DD NAME\n         MVC   RWORK(2),SMF30CUA  MOVE OVER THE BINARY CUA\n         UNPK  RWORK+3(5),RWORK(3) UNPACK ADDRESS\n         TR    RWORK+4(3),TRTAB-C0 TRANSLATE TO PRINTABLE CHARACTER\n         MVC   14(3,R3),RWORK+4   MOVE TO MESSAGE FIELD\n         SPACE\nGETEXCPS EQU   *\n         L     R1,SMF30BLK        GET EXCP COUNTS\n         AR    R9,R1              ACCUMULATE EXCP COUNTS\n         BAL   R14,PCOUNT         CONVERT IT\n         MVC   20(8,R3),EDWORK2+L'EDWORK2-8 MOVE IN EXCP COUNT\n         SPACE\n         AH    R5,SMF30ELN        POINT TO NEXT EXCP ENTRY\n         LA    R3,30(R3)          LOAD ADDRESS OF MESSAGE LINE\n         SPACE\n         BCT   R6,MOREDDS         ANY MORE EXCP ENTRIES IN RECORD\n         CLC   SMF30EOR,=H'0'     ANY MORE EXCP IN FOLLOWING RECORDS\n         BE    LASTPUT            NO, GO DEAL WITH THAT\n         SPACE\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         B     EXIT\n         SPACE\nMOREDDS  EQU   *\n         BCT   R7,CHECKDDN        ROOM FOR MORE IN OUTPUT LINE\n         B     FIRSTDD            NO, GO GET NEXT EXCP\n         SPACE\nT30DDEXT EQU   *\n         MVI   WTO1TXT,C'*'       MOVE ASTERISK TO MESSAGE LINE\n         MVI   WTO1TXT+131,C'*'   MOVE ASTERISK TO MESSAGE LINE\n         SPACE\n         LH    R6,SMF30EON        GET NUMBER OF EXCP SEGMENTS\n         LR    R5,R4              GET RECORD ADDRESS\n         A     R5,SMF30EOF        POINT TO EXCP SEGMENT\n         B     DDEXTCNT           CONTINUE EXCP PROCESSING\n         SPACE\nJES2UCB  EQU   *\n         AH    R5,SMF30ELN        POINT TO NEXT EXCP ENTRY\n         BCT   R6,CHECKDDN        ANY MORE EXCP ENTRIES IN RECORD\n         EJECT\nLASTPUT  EQU   *\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '     MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1  FILL LINE WITH BLANKS\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '     MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1  FILL LINE WITH BLANKS\n         MVC   WTO1TXT+2(10),EXCPHDR3 MOVE IN EXCP TOTAL HEADER\n         SPACE\n         LR    R1,R9              LOAD TOTAL EXCP COUNT\n         BAL   R14,PCOUNT         CONVERT IT\n         MVC   WTO1TXT+15(8),EDWORK2+L'EDWORK2-8 MOVE IN EXCP COUNT\n         SPACE\n         MVC   WTO1TXT+30(12),EXCPHDR4 MOVE IN VIO PAGE IN HEADER\n         MVC   WTO1TXT+45(8),VPISTOR  MOVE IN VIO PAGE IN COUNT\n         SPACE\n         MVC   WTO1TXT+60(13),EXCPHDR5 MOVE IN VIO PAGE OUT HEADER\n         MVC   WTO1TXT+76(8),VPOSTOR  MOVE IN VIO PAGE OUT CNT\n         SPACE\n         MVC   WTO1TXT+91(16),EXCPHDR6 MOVE IN PAGES SWAPPED IN COUNT\n         MVC   WTO1TXT+110(8),PSISTOR  MOVE PAGES SWAPPED IN\n         SPACE\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '     MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL LINE WITH BLANKS\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT,C'*'       MOVE ASTERISK TO MESSAGE LINE\n         MVC   WTO1TXT+1(131),WTO1TXT FILL ENTIRE LINE WITH ASTRISKS\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         B     EXIT                                                 S\n         TITLE 'JOB TERMINATION MESSAGE FORMATTING ROUTINE'\n***********************************************************************\n*                                                                     *\n*        PROCESS JOB TERMINATION INFORMATION                          *\n*                                                                     *\n***********************************************************************\nJOBTRM   EQU   *\n         MVI   WTO1TXT,C'*'      MOVE ASTERISK TO MESSAGE LINE\n         MVC   WTO1TXT+1(131),WTO1TXT FILL WITH ASTERISKS\n         LA    R0,X'0'           PUT MESSAGE TO JOB MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         MVC   WTO1TXT+51(26),JOBHDNG MOVE IN STEP HEADER\n         LA    R0,X'0'           PUT MESSAGE TO JOB MESSAGE LOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         LA    R0,X'0'           PUT MESSAGE TO JOB MESSAGE LOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         SPACE\n         MVC   WTO1TXT+3(8),JOBNMHDR MOVE JOBNAME HEADER IN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        PROCESS ID SEGMENT                                           *\n*                                                                     *\n***********************************************************************\n         CLI   SMF30ION+1,1      CHECK IF SEGMENT IS THERE\n         BL    EXIT              NO - EXIT\n         SPACE\n         LR    R5,R4              * GET RECORD ADDRESS\n         A     R5,SMF30IOF        * POINT TO ID SEGMENT\n         USING SMF30ID,R5\n         CLI   SMF30ION+1,1       * IS ID SEGMENT THERE\n         BL    EXIT\n         SPACE\n         MVC   M1JN(8),SMF30JBN   MOVE JOBNAME TO WTO MESSAGE  J\n         MVC   WTO1TXT+15(8),SMF30JBN MOVE JOBNAME TO MESSAGE\n         MVC   WTO1TXT+25(8),SMF30JNM MOVE IN JES2 JOB NUMBER\n         SPACE\n         MVC   CLASSTOR,SMF30CLS  STORE JOB CLASS\n         SPACE\n         MVC   PGMRNAME,SMF30USR  STORE PROGRAMMER NAME INFORMATION\n         SPACE\n         LH    R1,SMF30PGN       GET PERFORMANCE GROUP NUMBER\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   PGNSTOR,EDWORK2+L'EDWORK2-L'PGNSTOR SAVE PERFORM GROUP\n         SPACE\n         SR    R0,R0             ZERO OUT REGISTER 0\n         SR    R1,R1             ZERO OUT REGISTER 1\n         ICM   R1,7,SMF30SIT+1   GET TIME STEP STARTED\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   ITMESTOR,EDWORK+L'EDWORK-L'ITMESTOR STORE START TIME\n         SPACE\n         L     R1,CURRTIME       GET TIME JOB ENDED\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   END30TME,EDWORK+L'EDWORK-L'END30TME  STORE ENDED TIME\n         SPACE\n         SR    R0,R0             ZERO OUT REGISTER 0\n         L     R1,CURRTIME       GET TIME JOB ENDED\n         ICM   R0,7,SMF30SIT+1   GET TIME STEP STARTED\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   ELAPTIME,EDWORK+L'EDWORK-L'ELAPTIME  STORE ELAPSED TIME\n         SPACE\n         MVC   DATEWORK,SMF30STD  GET DATE JOB STARTED\n         BAL   R14,PDATE          CONVERT DATE\n         SPACE\n***********************************************************************\n*                                                                     *\n*        PROCESS CPU ACCOUNTING SEGMENT                               *\n*                                                                     *\n***********************************************************************\n         CLI   SMF30CON+1,1      CHECK IF SEGMENT IS THERE\n         BL    EXIT              NO - EXIT\n         SPACE\n         LR    R5,R4             GET RECORD ADDRESS\n         A     R5,SMF30COF       POINT TO ACCOUNTING SEGMENT\n         USING SMF30CAS,R5\n         SPACE\n         MVC   WTO1TXT+63(8),JOBCPHDR MOVE IN JOB CPU TIME HEADER\n         SR    R0,R0             ZERO OUT REGISTER 0\n         SR    R1,R1             ZERO OUT REGISTER 1\n         ICM   R1,7,SMF30CPT+1   GET JOB CPU TIME\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   WTO1TXT+73(11),EDWORK+L'EDWORK-11  MOVE CPU TIME\n         SPACE\n         MVC   WTO1TXT+96(8),STPSRBHD MOVE IN JOB SRB TIME HEADER\n         SR    R0,R0             ZERO OUT REGISTER 0\n         SR    R1,R1             ZERO OUT REGISTER 1\n         ICM   R1,7,SMF30CPS+1   GET JOB SRB TIME\n         BAL   R14,PCLOCK        CONVERT TIME\n         MVC   WTO1TXT+116(11),EDWORK+L'EDWORK-11  MOVE SRB TIME\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVC   WTO1TXT+3(10),PGMRHDR MOVE IN PROGRAMMER NAME HEADER\n         MVC   WTO1TXT+15(20),PGMRNAME MOVE IN PROGRAMMER INFORMATION\n         SPACE\n         MVC   WTO1TXT+63(9),IDATEHDR MOVE IN JOB START DATE HEADER\n         MVC   WTO1TXT+73(8),DTEGSTOR MOVE IN JOB START DATE(GREGORIAN)\n         MVC   WTO1TXT+84(6),DTEJSTOR MOVE IN JOB START DATE(JULIAN)\n         MVC   WTO1TXT+96(15),ITIMEHDR MOVE IN JOB START TIME HEADER\n         MVC   WTO1TXT+116(11),ITMESTOR MOVE IN JOB START TIME\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVC   WTO1TXT+3(9),SYSIDHDR MOVE IN SYSTEM ID HEADER\n         MVC   WTO1TXT+15(4),SMF30SID MOVE IN SYSTEM ID\n         SPACE\n         MVC   DATEWORK,CURRDATE  GET DATE JOB ENDED\n         BAL   R14,PDATE          CONVERT DATE\n         SPACE\n         MVC   WTO1TXT+63(9),EDATEHDR MOVE IN JOB END DATE HEADER\n         MVC   WTO1TXT+73(8),DTEGSTOR MOVE IN JOB END DATE(GREGORIAN)\n         MVC   WTO1TXT+84(6),DTEJSTOR MOVE IN JOB END DATE(JULIAN)\n         MVC   WTO1TXT+96(16),ETIMEHDR MOVE IN JOB END TIME HEADER\n         MVC   WTO1TXT+116(11),END30TME MOVE IN JOB END TIME\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVC   WTO1TXT+3(5),CLSHDR MOVE IN CLASS HEADER\n         MVC   WTO1TXT+15(1),CLASSTOR MOVE IN EXECUTION CLASS\n         SPACE\n         MVC   WTO1TXT+25(11),PRFGRPHD MOVE IN PERFORMANCE GROUP HEADER\n         MVC   WTO1TXT+40(3),PGNSTOR MOVE IN PERFORMANCE GROUP\n         SPACE\n***********************************************************************\n*                                                                     *\n*        PROCESS PERFORMANCE SEGMENT                                  *\n*                                                                     *\n***********************************************************************\n         CLI   SMF30PON+1,1      CHECK IF SEGMENT IS THERE\n         BL    EXIT              NO - EXIT\n         SPACE\n         LR    R5,R4             GET RECORD ADDRESS\n         A     R5,SMF30POF       POINT TO PERFORMANCE SEGMENT\n         USING SMF30PRF,R5\n         SPACE\n         MVC   WTO1TXT+63(10),SRVCHDR MOVE IN SERVICE UNITS HEADER\n         L     R1,SMF30SRV       GET TOTAL SERVICE UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+72(11),EDWORK2+L'EDWORK2-11 MOVE SERVICE UNITS\n         SPACE\n         MVC   WTO1TXT+96(12),ELTMEHDR MOVE IN JOB END TIME HEADER\n         MVC   WTO1TXT+116(11),ELAPTIME MOVE IN JOB END TIME\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVC   WTO1TXT+3(18),STORHDR MOVE IN STORAGE UNITS HEADER\n         L     R1,SMF30MSO       GET MAIN STORAGE UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+22(11),EDWORK2+L'EDWORK2-11 MOVE STORAGE UNITS\n         SPACE\n         MVC   WTO1TXT+38(9),CPUHDR MOVE IN CPU UNITS HEADER\n         L     R1,SMF30CSU       GET TOTAL CPU UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+52(11),EDWORK2+L'EDWORK2-11 MOVE CPU UNITS\n         SPACE\n         MVC   WTO1TXT+68(9),SRBHDR MOVE IN SRB UNITS HEADER\n         L     R1,SMF30SRB       GET TOTAL SRB UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+82(11),EDWORK2+L'EDWORK2-11 MOVE SRB UNITS\n         SPACE\n         MVC   WTO1TXT+98(9),IOHDR MOVE IN IO UNITS HEADER\n         L     R1,SMF30IO        GET TOTAL IO UNITS\n         BAL   R14,PCOUNT        CONVERT IT\n         MVC   WTO1TXT+112(11),EDWORK2+L'EDWORK2-11 MOVE IO UNITS\n         SPACE\n         LA    R0,X'0'           PUT TO SYSTEM MESSAGE LOG\n         BAL   R14,MSGRTN        GO TO MESSAGE ROUTINE\n         SPACE\n         MVI   WTO1TXT+1,C' '    MOVE BLANK TO MESSAGE LINE\n         MVC   WTO1TXT+2(129),WTO1TXT+1 FILL WITH BLANKS\n         SPACE\n         MVC   M1CC(4),=CL4' EOJ' MOVE END OF JOB TO COMPLETION CODE\n         LA    R0,X'1'            PUT MESSAGE TO JESMSG,JOBLOG+SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE             J\n         SPACE\n         EJECT\n***********************************************************************\n*                                                                     *\n*     CLOSE BOX IF NO EXCP SEGMENT AVAILABLE OR IF JOB TERMINATION    *\n*                                                                     *\n***********************************************************************\nJBSTPEND EQU   *\n         MVI   WTO1TXT,C'*'       MOVE ASTERISK TO MESSAGE LINE\n         MVC   WTO1TXT+1(131),WTO1TXT FILL ENTIRE LINE WITH ASTRISKS\n         LA    R0,X'0'            011 PUT TO JOBLOG, SYSLOG\n         BAL   R14,MSGRTN         GO TO MESSAGE ROUTINE\n         TITLE 'EXIT PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXIT BACK TO CALLER                                          *\n*                                                                     *\n***********************************************************************\nEXIT     DS    0H                  EXIT PROLOG\n         ESTAE 0                   CANCEL ESTAE EXIT\nRTRYRTN2 DS    0H                  ESTAE RETRY ROUTINE WITH SDWA\n*                                  JUST FREE STORAGE AND EXIT\n         LR    R1,R13              GET FREEMAIN ADDRESS\n         L     R13,SAVEBK         LOAD OLD REG 13\n         FREEMAIN RU,LV=LDATA,A=(1),SP=SUBPOOL FREE DATA DSECT STORAGE\n         SPACE\nQUICKOUT DS    0H\n         LM    14,12,12(13)      RESTORE REGISTERS\n         LA    15,0              SET RETURN CODE\n         BSM   0,14              RETURN TO CALLER IN ITS MODE\n         TITLE 'WTO PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ROUTINE TO WRITE MESSAGES TO SYSTEM MESSAG LOG AND           *\n*        ISSUE WTO TO WRITE MESSAGES TO JOB LOG                       *\n*                                                                     *\n***********************************************************************\nMSGRTN   DS    0H\n         STM   R14,R1,SAVEAR2     SAVE A FEW REGISTERS\n         L     R2,SAVEBK          EXTRACT VALUE IN R12 @ ENTRY TO ACTRT\n         L     R2,68(R2)          R2 NOW HAS VALUE OF ORIGINAL R12\n         SPACE\n         LA    R0,WTO1TXT         ADDRESS OF MESSAGE\n         ST    R0,36(R2)          SAVE INTO SYSTEM AREA\n         MVC   42(2,R2),=AL2(132) LENGTH SAVE INTO SYSTEM AREA\n         SPACE\n         LR    R7,R12             REMEMBER R12 IS OUR BASE REG!!!\n         L     R15,=V(IEFYS)      ENTRY TO IEFYS\n         LR    R12,R2             PUT IN VALUE IEFYS WANTS\n         BALR  R14,R15            GO TO IEFYS\n         LR    R12,R7             RESTORE R12 IMMEDIATELY\n         SPACE\n         L     R0,SAVEAR2+8       RESTORE R0\n         LTR   R0,R0              WAS IT ZERO\n         BZ    MSGRTNEX           YES, DON'T DO WTO\n         SPACE\n         MVC   WTO1MCS,MCSFLAG    MOVE IN MCSFLAG\n         MVC   WTO1DESC,DESC      MOVE IN DESCRIPTOR CODES\n         MVC   WTO1ROUT,ROUT      MOVE IN ROUTE CODES\nDOWTO    EQU   *\n         LA    R1,L'WTO1TXT+4     GET LENGTH FOR WTO\n         STH   R1,WTO1LEN         STORE IN WTO PARMLIST\n         MVC   WTO1TXT,=CL132' '  CLEAR WTO MESSAGE AREA\n         MVC   WTO1TXT(32),MSG1   MOVE MESSAGE SEGMENT TO WTO\n         MVC   WTO1TXT+38(12),=CL12'------------'  MOVE IN DASHES\n         MVC   WTO1TXT+51(5),M1CC MOVE IN COMPLETION CODE\n         SPACE\n         WTO   MF=(E,WTO1)        ISSUE WTO\nMSGRTNEX EQU   *\n         LM    R14,R1,SAVEAR2     RESTORE REGISTERS\n         BR    R14                RETURN TO CALLER\n         EJECT\n*********************************************************************\n*                                                                   *\n*        ESTAE EXIT ROUTINE                                         *\n*                                                                   *\n*********************************************************************\nRECOVERY DS    0H\n         USING *,R15              SET UP ADDRESSABILITY\n         LA    R4,4               PUT 4 IN REGISTER FOR COMPARE\n         CR    R0,R4              IS SDWA PRESENT?\n         BNE   HAVESDWA           YES, BR TO PROCESS WITH SDWA\n         L     R0,0(R2)           LOAD RETRY ADDRESS FROM PARAM LIST\n         LA    R15,4              SET RETCODE TO RETRY ADDR IN R0\n         BR    R14                RETURN TO PROCESSOR WITH RETRY ADDR\nHAVESDWA DS    0H                 ENTER HERE IF SDWA PRESENT\n         ST    R14,12(R13)        SAVE RETURN ADDRESS\n         L     R2,0(R1)           LOAD PARAM LIST ADDR FROM SDWA\n         L     R2,4(R2)           LOAD RETRY ADDRESS\n         SETRP RC=4,,RETADDR=(2),RETREGS=YES,FRESDWA=YES,REGS=(14)\n         DROP  R15\n         SPACE\n*********************************************************************\n*                                                                   *\n*        ESTAE RETRY ROUTINE WHEN NO SDWA WAS PRESENT               *\n*                                                                   *\n*********************************************************************\nRTRYRTN1 DS    0H                 RETRY ROUTINE WITH NO SDWA PRESENT\n         LM    R12,R13,8(R1)      LOAD REGS FOR ESTAE PARM LIST\n         B     RTRYRTN2           AND GET OUT\n         TITLE 'TIME CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   REG 1 HAS FIRST TIME                                 *\n*                REG 0 HAS SECOND TIME\n*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *\n*                                                                     *\n***********************************************************************\nPCLOCK   SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         SR    R1,R0               GET TIME DIFFERENCE\n         BNL   LSTH24              IF DIFFERENCE>=0 THEN SKIP\n         A     R1,HR24             ELSE ADD 24 HOURS TO TIME\nLSTH24   DS    0H                  SKIPPED TO HERE\n         ST    R1,WORK            * KEEP FOR OTHER CALCULATION\n         SLR   R0,R0               ZERO REG FOR DIVIDE\n         D     R0,=F'360000'      * DIV TIME BY 360000 FOR HOURS\n         LR    R8,R1              * SAVE HOURS FOR LATER PROCESSING\n         M     R0,=F'100'         * PUT HH INTO HHMM FORMAT\n         LR    R6,R1              * SAVE HHMM FOR LATER PROCESSING\n         L     R1,WORK            * RELOAD TIME\n         SR    R0,R0              * ZERO OUT REGISTER 0\n         D     R0,=F'6000'        * GET TOTAL NUMBER OF MINUTES\n         LR    R7,R1              * SAVE TOTAL NUMBER OF MINUTES\n         LR    R1,R8              * RELOAD NUMBER OF HOURS\n         M     R0,=F'60'          * CONVERT HOURS TO MINUTES\n         SR    R7,R1              * GET MINUTES LESS THAN AN HOUR\n         AR    R6,R7              * ADD MINUTES TO HHMM\n         LR    R1,R7              * RELOAD NUMBER OF MINUTES\n         M     R0,=F'60'          * CONVERT MINUTES TO SECONDS\n         M     R0,=F'100'         * CONVERT SECONDS TO HUNDREDTHS\n         LR    R5,R1              * SAVE NUMBER OF SECONDS\n         LR    R1,R8              * RELOAD HOURS FOR PROCESSING\n         M     R0,=F'60'          * CONVERT HOURS TO MINUTES\n         M     R0,=F'60'          * CONVERT MINUTES TO SECONDS\n         M     R0,=F'100'         * CONVERT SECONDS TO HUNDREDTHS\n         AR    R5,R1              * ADD SEC FROM HOURS TO SEC FROM MIN\n         L     R8,WORK            * RELOAD TIME\n         SR    R8,R5              * GET REMAINING SECONDS\n         LR    R1,R6              * LOAD HHMM INTO REGISTER\n         M     R0,=F'10000'       * MAKE IT HHMMSSTT FORMAT\n         AR    R1,R8              * ADD SSTT TO HHMMSSTT\nNOTOVER  EQU   *\n         CVD   R1,DWORD            CONVERT TIME TO DECIMAL\n         MVC   EDWORK,EDMASK       MOVE IN EDIT MASK\n         ED    EDWORK,DWORD+3      CONVERT TO CHARACTER\n         RETURN (14,12)            RETURN TO CALLER\n         TITLE   'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*   DATE CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   FIELD CALLED DATEWORK                                *\n*        OUTPUT  FIELD CALLED DTEGSTOR HAS MM/DD/YY FORMAT            *\n*                FIELD CALLED DTEJSTOR HAS YY.DDD   FORMAT            *\n*                                                                     *\n***********************************************************************\nPDATE    SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         MVC   DTEWORK+4(4),DATEWORK MOVE DATE TO WORK AREA\nDATERTN  EQU   *\n         LA    R6,12               SET NUMBER OF MONTHS\n         XC    DTEWORK+8(8),DTEWORK+8 CLEAR OUT WORK AREA\n         MVI   DTEWORK+15,X'0C'    MAKE A SIGN FOR PACKED DECIMAL\n         MVO   DTEWORK+14(2),DTEWORK+4(2) SHIFT YEAR NEXT TO SIGN\n         CVB   R1,DTEWORK+8        CONVERT YEAR TO BINARY FORMAT\n         SR    R0,R0               ZERO OUT REGISTER 0\n         D     R0,=F'4'            DIVIDE YEAR BY FOUR. IF THER IS NO\n*                             REMAINDER IN R0 THEN THIS IS A LEAPYEAR\nDATERTN1 EQU   *\n         LR    R7,R6               SET TABLE INDEX TO MONTH VALUE\n         SLA   R7,1                ADJUST INDEX FOR TWO ELEMENTS\n         LTR   R0,R0               IS THERE A REMAINDER IN REG 0\n         BP    REGYEAR             IF THERE IS GET ADDR OF REG TABLE\n         LA    R7,LEAPTABL-2(R7)   OTHERWISE IT'S LEAP YEAR\n         B     CHEKDATE            GO TO CHECK DATE\nREGYEAR  EQU   *\n         LA    R7,JULDAYS-2(R7)    GET REGULAR TABLE\nCHEKDATE EQU   *\n         CP    DTEWORK+6(2),0(2,R7) IS CURRENT DATE HIGHER OR NOT\n         BH    DATERTN2            YES - WE'VE FOUND MONTH\n         BCT   R6,DATERTN1         NO - TRY NEXT LOWER\nDATERTN2 EQU   *\n         SP    DTEWORK+6(2),0(2,R7) SUBTRACT ENTRY FROM CURRENT DAY\n         LA    R7,24(R7)           INDEX TO MONTH TABLE FROM JULS\n         MVC   DTEGSTOR(2),0(R7)   MOVE MONTH FROM TABLE TO OUTPUT\n         MVI   DTEGSTOR+2,C'/'     MOVE SEPERATOR TO OUTPUT\n         UNPK  DTEWORK(5),DTEWORK+5(3) GET VALUE OF NEW JULIAN DATE\n         OI    DTEWORK+4,X'F0'     ZONE LAST DIGIT\n         MVC   DTEGSTOR+3(2),DTEWORK+3 MOVE CURRENT DAY TO OUTPUT\n         MVI   DTEGSTOR+5,C'/'     MOVE SEPERATOR TO OUTPUT\n         MVC   DTEGSTOR+6(2),DTEWORK MOVE YEAR FROM NEW JULIAN DATE\n         MVC   DTEWORK+4(4),DATEWORK RESTORE ORIGINAL JULIAN DATE\n         UNPK  DTEWORK(5),DTEWORK+5(3) GET VALUE OF NEW JULIAN DATE\n         OI    DTEWORK+4,X'F0'     ZONE LAST DIGIT\n         MVC   DTEJSTOR(2),DTEWORK MOVE YEAR TO OUTPUT\n         MVI   DTEJSTOR+2,C'.'     MOVE SEPERATOR TO OUTPUT\n         MVC   DTEJSTOR+3(3),DTEWORK+2 MOVE DAY TO OUTPUT\nPDTEEX   RETURN (14,12)            RETURN TO CALLER\n         TITLE   'COMPLETION CODE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *\n*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *\n*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *\n*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *\n*                                                                     *\n***********************************************************************\nPRETCDE  SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         TM    0(R1),SMF30FLH      WAS STEP FLUSHED\n         BNO   NOFLUSH             NO,BRANCH PAST\n         MVC   M1CC(4),NXEQ        MOVE IN NOT EXECUTED MESSAGE\n         B     PRETEXT             BR TO RETURN\nNOFLUSH  TM    0(R1),SMF30ABD      DID IT ABEND?\n         BO    STPABEND            YES, GO CONVERT ABEND CODE\n         N     R0,=A(X'FFF')       ZERO UNUSED PORTION\n         CVD   R0,RWORK            GET ADDRESS OF COND FIELD\n         MVC   M1CC-1(L'M1CC+1),=X'402120202020' MOVE IN EDIT MASK\n         ED    M1CC-1(L'M1CC+1),RWORK+5 CONVERT RET CODE TO CHAR\n         MVI   M1CC,C'R'           MOVE IN R FOR RETURN CODE\n         B     PRETEXT             BR TO RETURN\nSTPABEND CLM   R0,2,=X'80'         WAS IT A USER ABEND CODE?\n         BL    SYSABND             NO, PROCESS SYSTEM ABEND CODE.\n         N     R0,=A(X'FFF')       TURN OFF X'80' BIT\n         CVD   R0,RWORK            CONVERT FOR OUTPUT\n         MVC   M1CC-1(L'M1CC+1),=X'402120202020' MOVE IN EDIT MASK\n         ED    M1CC-1(L'M1CC+1),RWORK+5 CONVERT TO CHARACTER\n         MVI   M1CC,C'U'           MOVE IN 'U' USER ABEND\n         B     PRETEXT             BR TO RETURN\nSYSABND  STH   R0,RWORK            STORE ABEND CODE\n         UNPK  RWORK+3(5),RWORK(3) ADD ZONES TO CC FIELD\n         TR    RWORK+4(3),TRTAB-C0 TRANSLATE TO CHARACTERS\n         MVC   M1CC+1(L'M1CC-1),RWORK+4 MOVE TO OUTPUT LINE\n         MVI   M1CC,C'S'           MOVE IN S FOR SYSTEM ABEND\nPRETEXT  RETURN (14,12)            RETURN TO CALLER\n         TITLE 'CONVERT BINARY DATA TO CHARACTER'\n***********************************************************************\n*                                                                     *\n*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *\n*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *\n*                                                                     *\n***********************************************************************\nPCOUNT   SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         CVD   R1,DWORD            CONVERT COUNT TO DECIMAL\n         MVC   EDWORK2,EDMASK2     MOVE IN EDIT MASK\n         ED    EDWORK2,DWORD+2     CONVERT TO CHARACTER\nPCNTEX   RETURN (14,12)            RETURN TO CALLER\n         TITLE 'CONSTANTS AND EQUATES'\n*********************************************************************\n*                                                                   *\n*        CONSTANTS AND EQUATES                                      *\n*                                                                   *\n*********************************************************************\nEXCPHDR1 DC    CL15'EXCP STATISTICS'\nEXCPHDR2 DC    CL28'DDNAME   CC# UNIT EXCP COUNT'\nEXCPHDR3 DC    CL10'EXCP TOTAL'\nEXCPHDR4 DC    CL12'VIO PAGE INS'\nEXCPHDR5 DC    CL13'VIO PAGE OUTS'\nEXCPHDR6 DC    CL16'PAGES SWAPPED IN'\nSTEPHDNG DC    CL27'STEP TERMINATION STATISTICS'\nSTPNMHDR DC    CL9'STEP NAME'\nJOBHDNG  DC    CL26'JOB TERMINATION STATISTICS'\nJOBNMHDR DC    CL8'JOB NAME'\nPGMRHDR  DC    CL10'PROGRAMMER'\nJOBCPHDR DC    CL8'CPU TIME'\nSTPSRBHD DC    CL8'SRB TIME'\nIDATEHDR DC    CL9'INIT DATE'\nEDATEHDR DC    CL9'TERM DATE'\nSYSIDHDR DC    CL9'SYSTEM ID'\nCPUHDR   DC    CL9'CPU UNITS'\nSRBHDR   DC    CL9'SRB UNITS'\nIOHDR    DC    CL9'I/O UNITS'\nCLSHDR   DC    CL5'CLASS'\nELTMEHDR DC    CL12'ELAPSED TIME'\nSTORHDR  DC    CL18'MAIN STORAGE UNITS'\nITIMEHDR DC    CL15'INITIATION TIME'\nETIMEHDR DC    CL16'TERMINATION TIME'\nSTRTHDR  DC    CL10'START TIME'\nVRTSUSEH DC    CL14'VIRT SYS  USED'\nVRTCUSEH DC    CL14'VIRT CORE USED'\nPGINHDR  DC    CL8'PAGE INS'\nSTCPUHDR DC    CL8'STEP CPU'\nPGMNMHDR DC    CL8'PGM NAME'\nSTOPTMHD DC    CL10'STOP  TIME'\nPGOUTHDR DC    CL9'PAGE OUTS'\nJOBCPUHD DC    CL8'JOB  CPU'\nDPRTYHDR DC    CL13'DISPATCH PRTY'\nELAPHDR  DC    CL10'ELAP. TIME'\nNUMSWPHD DC    CL12'NUMBER SWAPS'\nPGSWPHDR DC    CL12'NUMBER PAGES'\nSRVCHDR  DC    CL10'SERV UNITS'\nTACTHDR  DC    CL14'TRANS ACT TIME'\nSTPCCHDR DC    CL15'COMPLETION CODE'\nPRFGRPHD DC    CL11'PERF. GROUP'\n         SPACE\nR30CODE  DC    F'20'         TYPE 30 SMF RECORD INDICATOR\nR30STEP  DC    H'4'          TYPE 30 STEP TERMINATION INDICATOR\nR30JOB   DC    H'5'          TYPE 30 JOB TERMINATION INDICATOR\n         SPACE\nHR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS\nEDMASK   DC    XL13'402120207A20207A20204B2020'\nEDMASK2  DC    XL14'4020202020206B2020206B202120'\nNXEQ     DC    CL4'NXEQ'\n         EJECT\nJULDAYS  DC    PL2'0,31,59,90,120,151,181,212,243,273,304,334'\nMONTHS   DC    C'010203040506070809101112'\n*        FOR LEAP YEARS USE THE FOLLOWING TABLE\nLEAPTABL DC    PL2'0,31,60,91,121,152,182,213,244,274,305,335'\n         DC    C'010203040506070809101112'\n         EJECT\n         DS    0H\nMCSFLAG  DC    B'1000000000000000' ROUTE MESSAGE TO CONSOLES\n*                0123456789ABCDEF\nDESC     DC    B'0000000000000000' NO DESCRIPTOR CODES\n*                1234567890123456\nROUT     DC    B'0100000000100000' ROUTE CODE=(2,11)\n*                1234567890123456\n         SPACE\n*\n*  DEFINE ESTAE LIST FORM FOR MVS/XA\n*\nESTAEL   ESTAE MF=L          CREATE MODEL ESTAE PARM LIST\nLESTAEL  EQU   *-ESTAEL      NAME ITS LENGTH\n         SPACE\n*********************************************************************\n*                                                                   *\n*        TRANSLATE TABLE FOR HEX CONVERSION                         *\n*                                                                   *\n*********************************************************************\n         DC    240X'00'\nTRTAB    DC    C'0123456789ABCDEF'\n         TITLE 'LITERAL POOL'\n         LTORG\n         TITLE 'DSECT FOR EXIT AND MESSAGE FORMAT'\nDATA     DSECT                                                      *\nSAVE     DS    18F              SAVE AREA FOR REGISTERS ON ENTRY\n         ORG   SAVE\nSAVEXX   DS    F\nSAVEBK   DS    F\nSAVEFW   DS    F\nSAVER14  DS    F\nSAVER15  DS    F\nSAVER0   DS    F\nSAVER1   DS    F\n         DS    11F\n*\nEDWORK   DS    XL13'00'\nEDWORK2  DS    XL14'00'\nWORK     DS    F\nCONCAT#  DS    F\nDWORD    DS    D\nRWORK    DS    D\nDTEWORK  DS    CL16\n         SPACE\nTIMEDATE DS    0D\nCURRTIME DS    F\nCURRDATE DS    F\n         SPACE\nESTAEW   DS    XL(LESTAEL)      ESTAE PARM LIST AREA\nESTAPARM DS    4F               PARAMETER LIST PASSED TO RETRY ROUTINE\n*              RETRY ROUTINE ADDRESS NO SWDA OBTAINED\n*              RETRY ROUTINE ADDRESS SWDA OBTAINED\n*              BASE REGISTER 12\n*              BASE REGISTER 13\n*\nSAVEAR2  DS    6F               INTERNAL SAVE REGISTER SAVE AREA\n*\nPARMS    DS    0F               PARMS PASSED IN REG 1 TO ROUTINE\nPARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA\nPARMSTEP DS    F                PTR TO STEPNAME FIELD\nPARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD\nPARMJOBC DS    F                PTR TO JOB CPU TIME FIELD\nPARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS\nPARMSTPC DS    F                PTR TO STEP CPU TIME FIELD\nPARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS\nPARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER\nPARMCOND DS    F                PTR TO CONDITION CODE FIELD\nPARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN\nLPARMS   EQU   *-PARMS\n         SPACE\nEND30TME DS    CL11\nELAPTIME DS    CL11\nJOBCPUTM DS    CL11\nPGNSTOR  DS    CL3\nPRVSTOR  DS    CL6\nNSWSTOR  DS    CL8\nPSISTOR  DS    CL8\nPGOSTOR  DS    CL8\nVPOSTOR  DS    CL8\nVPISTOR  DS    CL8\nPSOSTOR  DS    CL8\nCLASSTOR DS    CL1\nITMESTOR DS    CL11\nSAVEDDN  DS    CL8\nDTEGSTOR DS    CL8             GREGORIAN DATE\nDTEJSTOR DS    CL6             JULIAN DATE\nDATEWORK DS    PL4\nPGMRNAME DS    CL20\n         SPACE\nMSG1     DS    0CL132                                               *\n         DS    CL1                                                  *\nM1JN     DS    CL8                JOBNAME                           *\n         DS    CL1                                                  *\nM1SNO    DS    CL3                STEP NUMBER                       *\n         DS    CL1                                                  *\nM1SN     DS    CL8                STEPNAME                          *\n         DS    CL1                                                  *\nM1PN     DS    CL8                PROGRAM NAME                      *\n         DS    CL58                                                 *\n         DS    CL2                                                  *\nM1CC     DS    CL5                COMPLETION CODE                   *\n         DS    CL36                                                 *\nM1LEN    EQU   *-MSG1                                               *\n         EJECT\nLWTO1    EQU   132+10\n         DS    0F\nWTO1     DS    0CL(LWTO1)\nWTO1LEN  DS    XL2\nWTO1MCS  DS    XL2\nWTO1TXT  DS    CL132\nWTO1DESC DS    XL2\nWTO1ROUT DS    XL2\n         DS    XL2\n         EJECT\n         IFASMFR 30\nSMF30XA  EQU     X'04'       HEADER INDICATES MVS/XA RECORD\n         EJECT\n         PRINT OFF\n         IEFJMR\n         IHASDWA DSECT=YES\n         PRINT ON\n         EJECT\n         PRINT ON\nDATA     DSECT\n         DS    6D            RESERVE FOR ZAPS\nLDATA    EQU   *-DATA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LNKACTRT": {"ttr": 1284, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//RAC02DSG JOB (8275,SSS,5,10,0,,,D,,111,BA908275),'TSD/SSS WIEBL-8',\n// CLASS=Z,MSGCLASS=A\n/*JOBPARM S=BSYS,L=999\n/*ROUTE PRINT TSO\n//*\n//LKED   EXEC  PGM=IEWL,\n//             PARM='LIST,LET,XREF,NCAL,RENT'\n//SYSPRINT DD  SYSOUT=A\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(19,10))\n//USRMODS  DD  DISP=SHR,DSN=SYS1.USRMODS\n//AOSB3    DD  DISP=SHR,DSN=SYS1.AOSB3\n//SYSLMOD  DD  DISP=SHR,DSN=SYS7.PSCP.LPALIB,UNIT=3380,VOL=SER=RES0ZB\n//SYSLIN  DD *\n         INCLUDE   AOSB3(IEFTB724)\n         INCLUDE   USRMODS(IEFACTRT)       <== CHECK MODULE NAME ???\n         ENTRY     IEFACTRT\n         NAME      IEFACTRT(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT109/FILE109.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT109", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}