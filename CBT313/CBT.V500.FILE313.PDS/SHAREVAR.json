{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SLBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20200704201812000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 133120, "INMDSORG": "PO", "INMTYPE": "Data Library", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 1, "INMDSNAM": "SLBD.SHAREVAR.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 133120, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 133120, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SLBD.SHAREVAR.PDS": {"COPYR1": {"type": "PDSE", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 8, "DVACLASS": 32, "DVAUNIT": 0, "DVAMAXRC": 32760, "DVACYL": 256, "DVATRK": 256, "DVATRKLN": 65535, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "extents": ["b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "b'\\x00\\x11HH\\x00\\x00\\x00\\x00\\x00\\x00\\x00~\\x00\\xff\\x7f\\x00'", "b'\\x00\\x11HH\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xfd\\x00\\xff\\x7f\\x00'", "b'\\x00\\x11HH\\x00\\x00\\x00\\xfe\\x00\\x00\\x00\\xff\\x00\\xff\\x02\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$README": {"ttr": 59, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00H\\x01 \\x15\\x8f\\x01 \\x15\\x8f\\x07V\\x00?\\x00?\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-06-06T00:00:00", "modifydate": "2020-06-06T07:56:48", "lines": 63, "newlines": 63, "modlines": 0, "user": "README"}, "text": "SHAREVAR is a REXX program designed to make it easy to share REXX\nvariables, including stems, between different REXX programs.  Only stems\nthat are numeric,and for which stem.0 has the count, are supported.\n\nAll listed variables, including stem variables will be encoded into\nthe ISPF variable that is then saved in the ISPF Shared variable Pool\nwith a Put and all variables in the list will be reconstituted on the\nGet.\n\nExamples are provided:\n\n          TVX is the driver demonstration exec. Invoke it with a dataset\n          name, or let it default to SYS1.PARMLIB, and it invokes TVX0\n          to create a set of REXX variables and a stem. The variables\n          are then 'put' to an ISPF variable of 'dsi'. Next TVX invokes\n          TVX1 to 'get' the 'dsi' variable, decodes it to recreate all\n          of the original variables, including the stem. TVX1 then\n          displays, using the say instruction, the variables and their\n          values.\n\nUsage:    To use SHAREVAR, copy the entire member into the REXX\n          programs that will be using it.\n\nSyntax:     rc = sharevar(action ispfvar list)\n\n            rc = return code\n\n            Action is:  Put or Get\n                  Put will create the ISPF variable with\n                      the provided list of rexx variables\n                      'encoded' within.\n                  Get will restore the rexx variables\n\n            ispfvar is the ISPF variable name to use\n\n            list is a list, enclosed in quotes, of REXX\n                    variables to be Put (shared).\n\nExamples:   rc = sharevar('put' 'myispfvar' ,\n                          'userid var1 var2 stem1. stem2.')\n            rc = sharevar('get' 'myisfvar')\n\nUsage Notes: This code must be copied into each of the\n              REXX execs in which it will be used\n\n              If called and not under ISPEXEC then it\n              will Address ISPExec\n\n              Each REXX variable will be 'encoded' with an\n              x'01' before each variable or stem value.\n              Each stem value will be encoded on it's own\n              and only numeric stems are supported.\n\n              Sample:  is the x'01'\n\n               USERID slbd  stem.0 4  stem.1 abc ...\n\n              Procedure is not used as it hides all the\n              routines variables which must be exposed.\n              Since we don't know which variables to\n              expose - none are.\n\nDependencies: Must be used under ISPF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SHAREVAR": {"ttr": 67, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00U\\x01 \\x15/\\x01 \\x18o\\x15\\x15\\x00\\x96\\x00\\x88\\x00\\x00\\xe2\\xc8\\xc1\\xd9\\xc5@@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2020-05-31T00:00:00", "modifydate": "2020-07-04T15:15:55", "lines": 150, "newlines": 136, "modlines": 0, "user": "SHARE"}, "text": "  /* --------------------  rexx procedure  -------------------- *\n  | Name:      SHAREVAR                                        |\n  |                                                            |\n  | Function:  Share REXX variables, including stems, among    |\n  |            different REXX routines using an ISPF variable. |\n  |                                                            |\n  |            All listed variables, including stem variables  |\n  |            will be encoded into the ispf variable that     |\n  |            is then saved in the ISPF Shared variable Pool  |\n  |            with a Put and all variables in the list will   |\n  |            be reconstituted on the Get.                    |\n  |                                                            |\n  |            Only stems with numeric suffixes are supported  |\n  |            with stem.0 having the count of stems.          |\n  |                                                            |\n  | Syntax:    rc = sharevar(action ispfvar list)              |\n  |                                                            |\n  |            rc = return code                                |\n  |                                                            |\n  |            Action is:  Put or Get                          |\n  |                  Put will create the ispf variable with    |\n  |                      the provided list of rexx variables   |\n  |                      'encoded' within.                     |\n  |                  Get will restore the rexx variables       |\n  |                                                            |\n  |            ispfvar is the ISPF variable name to use        |\n  |                                                            |\n  |            list is a list, enclosed in quotes, of REXX     |\n  |                    variables to be Put (shared).           |\n  |                                                            |\n  | Examples:  rc = sharevar('put' 'ispfvar' ,                 |\n  |                          'userid var1 var2 stem1. stem2.') |\n  |            rc = sharevar('get' 'ispfvar')                  |\n  |                                                            |\n  | Usage Notes: This code must be copied into each of the     |\n  |              REXX execs in which it will be used           |\n  |                                                            |\n  |              If called and not under ISPEXEC then it       |\n  |              will Address ISPExec                          |\n  |                                                            |\n  |              Each REXX variable will be 'encoded' with an  |\n  |              x'01' before each variable or stem value.     |\n  |              Each stem value will be encoded on it's own   |\n  |              and only numeric stems are supported.         |\n  |                                                            |\n  |              Sample: | is the x'01'                        |\n  |                                                            |\n  |              | USERID slbd | stem.0 4 | stem.1 abc ...     |\n  |                                                            |\n  |              Procedure is not used as it hides all the     |\n  |              routines variables which must be exposed.     |\n  |              Since we don't know which variables to        |\n  |              expose - none are.                            |\n  |                                                            |\n  | Dependencies: Must be used under ISPF                      |\n  |                                                            |\n  | Author:    Lionel B. Dyck                                  |\n  |                                                            |\n  | History:  (most recent on top)                             |\n  |            05/31/20 LBD - Refine/cleanup code              |\n  |            05/30/20 LBD - Creation                         |\n  |                                                            |\n  * ---------------------------------------------------------- */\nShareVar:\n  arg @svact @svispfv @svlist\n\n  /* ------------------- *\n  | Define our defaults |\n  * ------------------- */\n  @svshrv = ''\n  @svx01   = '01'x   /* separator */\n\n  /* --------------------------------------- *\n  | Check Addressing and Set ISPEXEC if not |\n  * --------------------------------------- */\n  @save_address = address()\n  if @save_address /= 'ISPEXEC' then\n  Address ISPExec\n\n  /* ------------------ *\n  | Process the Action |\n  * ------------------ */\n  Select\n    /* -------------------------------------------------------------- *\n    | Action: PUT                                                    |\n    |                                                                |\n    | Captures the requested rexx variables and adds them to an      |\n    | ispf variable. For stem variables each stem # will be added    |\n    | with it's #. Stems that do not use #'s for the suffix are      |\n    | not supported.                                                 |\n    |                                                                |\n    | Each rexx variable, or stem variable, is separated by a hex 01 |\n    | which will be used to parse them on the GET.                   |\n    * -------------------------------------------------------------- */\n    When @svact = 'PUT' then do\n      do @svri = 1 to words(@svlist)\n        @sv = word(@svlist,@svri)\n        if right(@sv,1) /= '.'\n        then  @svshrv = @svshrv''@svx01''@sv value(@sv)\n        else do\n          @sv = substr(@sv,1,length(@sv)-1)\n          @svc = value(@sv'.0')\n          @svshrv = @svshrv''@svx01'' @sv'.0' @svc\n          do @svi = 1 to @svc\n            @svs = value(@sv'.'@svi)\n            @svshrv = @svshrv''@svx01'' @sv'.'@svi @svs\n          end\n        end\n      end\n      /* set the ispf variable name in @svispfv\n      contents to the value of the data in\n      @svshrv variable */\n      x = value(@svispfv,@svshrv)\n      'vput ('@svispfv') shared'\n    end\n    /* ---------------------------------------------------------- *\n    | Action: GET                                                |\n    |                                                            |\n    | VGET the ISPF variable and parse it out to recreate all of |\n    | the REXX variables that were PUT.                          |\n    * ---------------------------------------------------------- */\n    When @svact = 'GET' then do\n      'vget ('@svispfv') shared'\n      @vputvar = value(@svispfv)\n      do until strip(@vputvar) = ''\n        parse value @vputvar with @rxs (@svx01) @vputvar\n        if strip(@rxs) = '' then iterate\n        parse value @rxs with @rxv @rxs\n        x = value(@rxv,@rxs)\n      end\n      /* ------------------------------ *\n      | Free the ispf variable/storage |\n      * ------------------------------ */\n      'verase ('@svispfv') shared'\n    end\n    Otherwise do\n      if @save_address = 'TSO' then Address TSO\n      return 8\n    end\n  end\n\n  /* ---------------------- *\n  | Clean up our variables |\n  * ---------------------- */\n  drop @vputvar @svact @svispfv @svlist ,\n    @sv @rxv @rxs @svs @svi @svri @svc @svx01\n\n  if @save_address = 'TSO' then Address TSO\n\n  return 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TVX": {"ttr": 53, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00)\\x01 \\x15\\x1f\\x01 \\x15\\x8f\\x07@\\x00\\x14\\x00\\x06\\x00\\x00\\xc4\\xc5\\xd4\\xd6@@@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2020-05-30T00:00:00", "modifydate": "2020-06-06T07:40:29", "lines": 20, "newlines": 6, "modlines": 0, "user": "DEMO"}, "text": "/* rexx */\narg dsn\n\nif dsn = '' then dsn = \"'sys1.parmlib'\"\n\n parse source . . . DDName EXECdsn .\n if EXECdsn = '?' then do\n    x = listdsi(ddname 'file')\n    EXECdsn = sysdsname\n    end\n\nSay 'Executing and Altlib from:' \"'\"execdsn\"'\"\nsay ' '\n\n\"altlib act app(exec) dataset('\"execdsn\"')\"\n'%tvx0' dsn\nAddress ISPexec\n'Select cmd(%tvx1)'\nAddress TSO\n'altlib deact app(exec)'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TVX0": {"ttr": 63, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00H\\x01 \\x15\\x1f\\x01 \\x18o\\x15\\x13\\x00\\xba\\x00\\x84\\x00\\x00\\xc4\\xc5\\xd4\\xd6@@@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2020-05-30T00:00:00", "modifydate": "2020-07-04T15:13:48", "lines": 186, "newlines": 132, "modlines": 0, "user": "DEMO"}, "text": "/* rexx */\narg dsn\nx = listdsi(dsn smsinfo dir)\n\nc = 0\ncall addvar 'sysuid'\ncall addvar 'syscpu'\ncall addvar 'syshsm'\ncall addvar 'syslracf'\ncall addvar 'sysracf'\ncall addvar 'syssrv'\ncall addvar 'systsoe'\ncall addvar 'sysjes'\ncall addvar 'sysnode'\ncall addvar 'systermid'\nvar.0 = c\n\nx = sharevar('put' 'dsi' ,\n  'SYSUSED SYSUNIT SYSALLOC SYSEATTR SYSDSSMS SYSDSORG SYSRACFA ',\n  'SYSUNITS SYSRECFM SYSCREATE SYSLRECL SYSEADSCB SYSREASON     ',\n  'SYSKEYLEN SYSEXDATE SYSADIRBLK SYSBLKSTRK SYSBLKSIZE         ',\n  'SYSMEMBERS SYSMSGLVL2 SYSNUMVOLS SYSMSGLVL1 SYSEXTENTS       ',\n  'SYSVOLUME SYSDSNAME SYSREFDATE SYSUDIRBLK SYSTRKSCYL         ',\n  'SYSSECONDS SYSVOLUMES SYSCREATEJOB SYSPASSWORD SYSMGMTCLASS  ',\n  'SYSDATACLASS SYSUPDATED SYSUSEDPAGES SYSCREATETIME           ',\n  'SYSCREATESTEP SYSUSEDEXTENTS SYSUSEDPERCENT SYSSEQDSNTYPE    ',\n  'SYSALLOCPAGES SYSSTORCLASS SYSPRIMARY var.')\n\nexit\n\naddvar:\n  arg opt\n  c = c + 1\n  var.c = left(opt,20) '=' strip(sysvar(opt))\n  return\n\n  /* --------------------  rexx procedure  -------------------- *\n  | Name:      SHAREVAR                                        |\n  |                                                            |\n  | Function:  Share REXX variables, including stems, among    |\n  |            different REXX routines using an ISPF variable. |\n  |                                                            |\n  |            All listed variables, including stem variables  |\n  |            will be encoded into the ispf variable that     |\n  |            is then saved in the ISPF Shared variable Pool  |\n  |            with a Put and all variables in the list will   |\n  |            be reconstituted on the Get.                    |\n  |                                                            |\n  |            Only stems with numeric suffixes are supported  |\n  |            with stem.0 having the count of stems.          |\n  |                                                            |\n  | Syntax:    rc = sharevar(action ispfvar list)              |\n  |                                                            |\n  |            rc = return code                                |\n  |                                                            |\n  |            Action is:  Put or Get                          |\n  |                  Put will create the ispf variable with    |\n  |                      the provided list of rexx variables   |\n  |                      'encoded' within.                     |\n  |                  Get will restore the rexx variables       |\n  |                                                            |\n  |            ispfvar is the ISPF variable name to use        |\n  |                                                            |\n  |            list is a list, enclosed in quotes, of REXX     |\n  |                    variables to be Put (shared).           |\n  |                                                            |\n  | Examples:  rc = sharevar('put' 'ispfvar' ,                 |\n  |                          'userid var1 var2 stem1. stem2.') |\n  |            rc = sharevar('get' 'ispfvar')                  |\n  |                                                            |\n  | Usage Notes: This code must be copied into each of the     |\n  |              REXX execs in which it will be used           |\n  |                                                            |\n  |              If called and not under ISPEXEC then it       |\n  |              will Address ISPExec                          |\n  |                                                            |\n  |              Each REXX variable will be 'encoded' with an  |\n  |              x'01' before each variable or stem value.     |\n  |              Each stem value will be encoded on it's own   |\n  |              and only numeric stems are supported.         |\n  |                                                            |\n  |              Sample: | is the x'01'                        |\n  |                                                            |\n  |              | USERID slbd | stem.0 4 | stem.1 abc ...     |\n  |                                                            |\n  |              Procedure is not used as it hides all the     |\n  |              routines variables which must be exposed.     |\n  |              Since we don't know which variables to        |\n  |              expose - none are.                            |\n  |                                                            |\n  | Dependencies: Must be used under ISPF                      |\n  |                                                            |\n  | Author:    Lionel B. Dyck                                  |\n  |                                                            |\n  | History:  (most recent on top)                             |\n  |            05/31/20 LBD - Refine/cleanup code              |\n  |            05/30/20 LBD - Creation                         |\n  |                                                            |\n  * ---------------------------------------------------------- */\nShareVar:\n  arg @svact @svispfv @svlist\n\n  /* ------------------- *\n  | Define our defaults |\n  * ------------------- */\n  @svshrv = ''\n  @svx01   = '01'x   /* separator */\n\n  /* --------------------------------------- *\n  | Check Addressing and Set ISPEXEC if not |\n  * --------------------------------------- */\n  @save_address = address()\n  if @save_address /= 'ISPEXEC' then\n  Address ISPExec\n\n  /* ------------------ *\n  | Process the Action |\n  * ------------------ */\n  Select\n    /* -------------------------------------------------------------- *\n    | Action: PUT                                                    |\n    |                                                                |\n    | Captures the requested rexx variables and adds them to an      |\n    | ispf variable. For stem variables each stem # will be added    |\n    | with it's #. Stems that do not use #'s for the suffix are      |\n    | not supported.                                                 |\n    |                                                                |\n    | Each rexx variable, or stem variable, is separated by a hex 01 |\n    | which will be used to parse them on the GET.                   |\n    * -------------------------------------------------------------- */\n    When @svact = 'PUT' then do\n      do @svri = 1 to words(@svlist)\n        @sv = word(@svlist,@svri)\n        if right(@sv,1) /= '.'\n        then  @svshrv = @svshrv''@svx01''@sv value(@sv)\n        else do\n          @sv = substr(@sv,1,length(@sv)-1)\n          @svc = value(@sv'.0')\n          @svshrv = @svshrv''@svx01'' @sv'.0' @svc\n          do @svi = 1 to @svc\n            @svs = value(@sv'.'@svi)\n            @svshrv = @svshrv''@svx01'' @sv'.'@svi @svs\n          end\n        end\n      end\n      /* set the ispf variable name in @svispfv\n      contents to the value of the data in\n      @svshrv variable */\n      x = value(@svispfv,@svshrv)\n      'vput ('@svispfv') shared'\n    end\n    /* ---------------------------------------------------------- *\n    | Action: GET                                                |\n    |                                                            |\n    | VGET the ISPF variable and parse it out to recreate all of |\n    | the REXX variables that were PUT.                          |\n    * ---------------------------------------------------------- */\n    When @svact = 'GET' then do\n      'vget ('@svispfv') shared'\n      @vputvar = value(@svispfv)\n      do until strip(@vputvar) = ''\n        parse value @vputvar with @rxs (@svx01) @vputvar\n        if strip(@rxs) = '' then iterate\n        parse value @rxs with @rxv @rxs\n        x = value(@rxv,@rxs)\n      end\n      /* ------------------------------ *\n      | Free the ispf variable/storage |\n      * ------------------------------ */\n      'verase ('@svispfv') shared'\n    end\n    Otherwise do\n      if @save_address = 'TSO' then Address TSO\n      return 8\n    end\n  end\n\n  /* ---------------------- *\n  | Clean up our variables |\n  * ---------------------- */\n  drop @vputvar @svact @svispfv @svlist ,\n    @sv @rxv @rxs @svs @svi @svri @svc @svx01\n\n  if @save_address = 'TSO' then Address TSO\n\n  return 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TVX1": {"ttr": 65, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x000\\x01 \\x15\\x1f\\x01 \\x18o\\x15\\x14\\x00\\xd5\\x00\\xa7\\x00\\x00\\xc4\\xc5\\xd4\\xd6@@@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2020-05-30T00:00:00", "modifydate": "2020-07-04T15:14:30", "lines": 213, "newlines": 167, "modlines": 0, "user": "DEMO"}, "text": "/* rexx */\n\nx = sharevar('get' 'dsi')\n\nsay 'Reporting out the stem that was passed:'\nsay ' '\ndo i = 1 to var.0\n   say 'stem value' right(i,2) 'is' var.i\n   end\n\nsay ' '\nsay left('-',70,'-')\nsay ' '\n\nSay 'The Listdsi variables are:'\nsay ' '\n  say  'sysdsname           '          sysdsname\n  say  'sysadirblk          '         sysadirblk\n  say  'sysalloc            '           sysalloc\n  say  'sysallocpages       '      sysallocpages\n  say  'sysblksize          '         sysblksize\n  say  'sysblkstrk          '         sysblkstrk\n  say  'syscreate           '          syscreate\n  say  'syscreatejob        '       syscreatejob\n  say  'syscreatestep       '      syscreatestep\n  say  'syscreatetime       '      syscreatetime\n  say  'sysdataclass        '     sysdataclass\n  say  'sysdsorg            '         sysdsorg\n  say  'sysdssms            '         sysdssms\n  say  'syseadscb           '        syseadscb\n  say  'syseattr            '         syseattr\n  say  'sysexdate           '        sysexdate\n  say  'sysextents          '     sysextents\n  say  'syskeylen           '        syskeylen\n  say  'syslrecl            '         syslrecl\n  say  'sysmembers          '     sysmembers\n  say  'sysmgmtclass        '     sysmgmtclass\n  say  'sysmsglvl1          '     sysmsglvl1\n  say  'sysmsglvl2          '     sysmsglvl2\n  say  'sysnumvols          '     sysnumvols\n  say  'syspassword         '      syspassword\n  say  'sysprimary          '     sysprimary\n  say  'sysracfa            '         sysracfa\n  say  'sysreason           '        sysreason\n  say  'sysrecfm            '         sysrecfm\n  say  'sysrefdate          '     sysrefdate\n  say  'sysseconds          '     sysseconds\n  say  'sysseqdsntype       '    sysseqdsntype\n  say  'sysstorclass        '     sysstorclass\n  say  'systrkscyl          '     systrkscyl\n  say  'sysudirblk          '     sysudirblk\n  say  'sysunit             '          sysunit\n  say  'sysunits            '         sysunits\n  say  'sysupdated          '     sysupdated\n  say  'sysused             '          sysused\n  say  'sysusedextents      ' sysusedextents\n  say  'sysusedpages        '     sysusedpages\n  say  'sysusedpercent      ' sysusedpercent\n  say  'sysvolume           '        sysvolume\n  say  'sysvolumes          '     sysvolumes\n\nexit\n\n  /* --------------------  rexx procedure  -------------------- *\n  | Name:      SHAREVAR                                        |\n  |                                                            |\n  | Function:  Share REXX variables, including stems, among    |\n  |            different REXX routines using an ISPF variable. |\n  |                                                            |\n  |            All listed variables, including stem variables  |\n  |            will be encoded into the ispf variable that     |\n  |            is then saved in the ISPF Shared variable Pool  |\n  |            with a Put and all variables in the list will   |\n  |            be reconstituted on the Get.                    |\n  |                                                            |\n  |            Only stems with numeric suffixes are supported  |\n  |            with stem.0 having the count of stems.          |\n  |                                                            |\n  | Syntax:    rc = sharevar(action ispfvar list)              |\n  |                                                            |\n  |            rc = return code                                |\n  |                                                            |\n  |            Action is:  Put or Get                          |\n  |                  Put will create the ispf variable with    |\n  |                      the provided list of rexx variables   |\n  |                      'encoded' within.                     |\n  |                  Get will restore the rexx variables       |\n  |                                                            |\n  |            ispfvar is the ISPF variable name to use        |\n  |                                                            |\n  |            list is a list, enclosed in quotes, of REXX     |\n  |                    variables to be Put (shared).           |\n  |                                                            |\n  | Examples:  rc = sharevar('put' 'ispfvar' ,                 |\n  |                          'userid var1 var2 stem1. stem2.') |\n  |            rc = sharevar('get' 'ispfvar')                  |\n  |                                                            |\n  | Usage Notes: This code must be copied into each of the     |\n  |              REXX execs in which it will be used           |\n  |                                                            |\n  |              If called and not under ISPEXEC then it       |\n  |              will Address ISPExec                          |\n  |                                                            |\n  |              Each REXX variable will be 'encoded' with an  |\n  |              x'01' before each variable or stem value.     |\n  |              Each stem value will be encoded on it's own   |\n  |              and only numeric stems are supported.         |\n  |                                                            |\n  |              Sample: | is the x'01'                        |\n  |                                                            |\n  |              | USERID slbd | stem.0 4 | stem.1 abc ...     |\n  |                                                            |\n  |              Procedure is not used as it hides all the     |\n  |              routines variables which must be exposed.     |\n  |              Since we don't know which variables to        |\n  |              expose - none are.                            |\n  |                                                            |\n  | Dependencies: Must be used under ISPF                      |\n  |                                                            |\n  | Author:    Lionel B. Dyck                                  |\n  |                                                            |\n  | History:  (most recent on top)                             |\n  |            05/31/20 LBD - Refine/cleanup code              |\n  |            05/30/20 LBD - Creation                         |\n  |                                                            |\n  * ---------------------------------------------------------- */\nShareVar:\n  arg @svact @svispfv @svlist\n\n  /* ------------------- *\n  | Define our defaults |\n  * ------------------- */\n  @svshrv = ''\n  @svx01   = '01'x   /* separator */\n\n  /* --------------------------------------- *\n  | Check Addressing and Set ISPEXEC if not |\n  * --------------------------------------- */\n  @save_address = address()\n  if @save_address /= 'ISPEXEC' then\n  Address ISPExec\n\n  /* ------------------ *\n  | Process the Action |\n  * ------------------ */\n  Select\n    /* -------------------------------------------------------------- *\n    | Action: PUT                                                    |\n    |                                                                |\n    | Captures the requested rexx variables and adds them to an      |\n    | ispf variable. For stem variables each stem # will be added    |\n    | with it's #. Stems that do not use #'s for the suffix are      |\n    | not supported.                                                 |\n    |                                                                |\n    | Each rexx variable, or stem variable, is separated by a hex 01 |\n    | which will be used to parse them on the GET.                   |\n    * -------------------------------------------------------------- */\n    When @svact = 'PUT' then do\n      do @svri = 1 to words(@svlist)\n        @sv = word(@svlist,@svri)\n        if right(@sv,1) /= '.'\n        then  @svshrv = @svshrv''@svx01''@sv value(@sv)\n        else do\n          @sv = substr(@sv,1,length(@sv)-1)\n          @svc = value(@sv'.0')\n          @svshrv = @svshrv''@svx01'' @sv'.0' @svc\n          do @svi = 1 to @svc\n            @svs = value(@sv'.'@svi)\n            @svshrv = @svshrv''@svx01'' @sv'.'@svi @svs\n          end\n        end\n      end\n      /* set the ispf variable name in @svispfv\n      contents to the value of the data in\n      @svshrv variable */\n      x = value(@svispfv,@svshrv)\n      'vput ('@svispfv') shared'\n    end\n    /* ---------------------------------------------------------- *\n    | Action: GET                                                |\n    |                                                            |\n    | VGET the ISPF variable and parse it out to recreate all of |\n    | the REXX variables that were PUT.                          |\n    * ---------------------------------------------------------- */\n    When @svact = 'GET' then do\n      'vget ('@svispfv') shared'\n      @vputvar = value(@svispfv)\n      do until strip(@vputvar) = ''\n        parse value @vputvar with @rxs (@svx01) @vputvar\n        if strip(@rxs) = '' then iterate\n        parse value @rxs with @rxv @rxs\n        x = value(@rxv,@rxs)\n      end\n      /* ------------------------------ *\n      | Free the ispf variable/storage |\n      * ------------------------------ */\n      'verase ('@svispfv') shared'\n    end\n    Otherwise do\n      if @save_address = 'TSO' then Address TSO\n      return 8\n    end\n  end\n\n  /* ---------------------- *\n  | Clean up our variables |\n  * ---------------------- */\n  drop @vputvar @svact @svispfv @svlist ,\n    @sv @rxv @rxs @svs @svi @svri @svc @svx01\n\n  if @save_address = 'TSO' then Address TSO\n\n  return 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT313/CBT.V500.FILE313.PDS/SHAREVAR.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT313/CBT.V500.FILE313.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}