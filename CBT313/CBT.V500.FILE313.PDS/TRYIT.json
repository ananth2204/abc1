{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SLBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20200713135818000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "SLBD.TRYIT.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SLBD.TRYIT.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 32760, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200195", "DS1SCEXT": "b'\\x80\\x7f\\xd0'", "DS1SCALO": "b'P\\x00\\x00\\x02'", "DS1LSTAR": "b'\\x00\\x03\\x02'", "DS1TRBAL": "b'\\xb8\\xe0'"}, "COPYR2": {"deb": "b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x10\\x80\\x00\\x04yPP'", "extents": ["b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x10\\x80\\x00\\x04yPP'", "b'X\\xfa\\x11\\xc0\\x00\\x00\\x01v\\x00\\x00\\x01v\\x00\\x03\\x00\\x04'", "b'X\\xfa\\x11\\xc0\\x00\\x00\\x00\\x1d\\x00\\x00\\x00\\x1d\\x00\\x01\\x00\\x02'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 8, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x01\\x01\\x17\\x01\\x1f\\x01\\x17\\x11o\\x13P\\x00\\x11\\x00@\\x00\\x00\\xe3\\xd9\\xe8\\xc9\\xe3@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2017-01-11T00:00:00", "modifydate": "2017-04-26T13:50:01", "lines": 17, "newlines": 64, "modlines": 0, "user": "TRYIT"}, "text": "TRYIT is an ISPF Edit macro that will invoke current edit data. See the\ntutorial for more information.\n\n   Members:\n\n      $DOC     - this member\n      $RECV    - Exec to Receive the ISPF EXEC, PANELS, and SAMPLES\n      PANELS   - TSO Transmit of the ISPF Panels\n      REXX     - RUNC REXX Library in TSO Transmit\n\nInstallation:\n\nExecute the $RECV exec to create EXEC, and PANELS libraries.\n\nInstallation:\n   1. Copy the restored EXEC members into your SYSEXEC (or SYSPROC) library\n   2. Copy the restored PANELS members into your ISPPLIB library\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$RECV": {"ttr": 10, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x10 \\x19\\x01\\x164\\x7f\\x01\\x17\\x11o\\x13Y\\x00R\\x00n\\x00\\x00\\xe3\\xd9\\xe8\\xc9\\xe3@@@\\x00\\x00\\x00R\\x00\\x00\\x00n\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.16", "flags": 32, "createdate": "2016-12-12T00:00:00", "modifydate": "2017-04-26T13:59:19", "lines": 82, "newlines": 110, "modlines": 0, "user": "TRYIT"}, "text": "        /* this rexx exec is expected to be invoked by the EXEC command\n           thus:\n\n           EXec 'dsname(RECEIVE)'\n\n           Prompting will occur for hlq\n\n           and it will then issue the TSO RECEIVE command for the\n           the following members to create these new data sets:\n\n           Member       Dataset\n           EXEC         hlq.EXEC\n           PANELS       hlq.PANELS\n\n           You will then need to copy these datasets/members into\n           datasets for production use.\n\n           After these data sets are created several of the members\n           of this install data set will be browsed.\n           */\n\n        parse source x1 x2 x3 x4 dsn .\n         x = PROMPT(\"ON\") /* enable prompting */\n\n        say \"Enter desired hlq for target data sets\",\n            \"(default is\" sysvar(\"syspref\")\".TRYIT.NEW):\"\n        pull hlq\n        hlq = strip(hlq)\n\n        if hlq = \"\" then hlq = sysvar(\"syspref\")\".TRYIT.NEW\"\n        hlq = translate(hlq)\n\n        Say \"Using HLQ:\" hlq\n\n        /* ----------------------------------------------- *\n         * Check for an ISPF environment and then check to *\n         * see if the receive target datasets exist. If so *\n         * then compress  them before the receive.         *\n         * ----------------------------------------------- */\n        if sysvar('sysispf') = \"ACTIVE\" then do\n           Address ISPEXEC\n           call do_comp   \"'\"hlq\".exec'\"\n           call do_comp   \"'\"hlq\".panels'\"\n           Address TSO\n           end\n\n        /* ------------------------------------------------------------ *\n         * Process the TSO RECEIVE command on all the pertinent members *\n         * ------------------------------------------------------------ */\n        queue \"dsn('\"hlq\".exec')\"\n        \"Receive inds('\"dsn\"(exec)')\"\n        queue \"dsn('\"hlq\".panels')\"\n        \"Receive inds('\"dsn\"(panels)')\"\n\n        /* -------------------------------------------- *\n         * If ISPF is active show key members in Browse *\n         * -------------------------------------------- */\n        if sysvar('sysispf') <> \"ACTIVE\" then exit\n        Address ISPEXEC\n           \"Browse dataset('\"dsn\"($doc)')\"\n           \"Browse dataset('\"dsn\"($userdoc)')\"\n\n        /* ------------------------------------------------- *\n         * Now display a list of the received datasets using *\n         * ISPF LMM services (ISPF 3.4)                      *\n         * ------------------------------------------------- */\n        Address ISPExec\n        \"LMDINIT LISTID(LISTID) LEVEL(\"hlq\")\"\n        \"LMDDISP LISTID(\"ListId\") Confirm(Yes)\",\n                \"View(Volume)\"\n        \"LMDFREE LISTID(\"ListId\")\"\n\n         Exit\n\n         Do_Comp: procedure\n         arg compdsn\n         if sysdsn(compdsn) /= 'OK' then return\n         say \"Compressing:\"  compdsn\n         \"LMInit dataid(compress) enq(exclu) dataset(\"compdsn\")\"\n         \"LMComp Dataid(\"compress\")\"\n         \"LMFree Dataid(\"compress\")\"\n         return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$USERDOC": {"ttr": 12, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x17\\x11o\\x01\\x19\\x05\\x9f\\tW\\x00z\\x00x\\x00\\x00\\xe3\\xd9\\xe8\\xc9\\xe3@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2017-04-26T00:00:00", "modifydate": "2019-02-28T09:57:00", "lines": 122, "newlines": 120, "modlines": 0, "user": "TRYIT"}, "text": "Users Guide for TRYIT\nby Lionel B. Dyck\n\nRevised Feb 28, 2019\n\n===== Table of Contents\n\n      Source and License\n      Introduction\n      Usage\n\n===== Source and License\n\nThe full source for TRYIT is distributed with the package, which may\nbe found at http://www.lbdsoftware.com\n\nLicense: This code is distributed under the GPL License which may\nbe found at http://www.gnu.org/copyleft/gpl.html\n\n===== Introduction\n\nTRYIT is an ISPF Edit command that is designed to be used to test an\nAssembler program, CLIST, REXX Exec, JCL, ISPF Panel or ISPF Skeleton\nwhile it is being edited. The way this works is such that the JCL,\nCLIST, REXX Exec, ISPF Panel, or ISPF Skeleton does *not* have to be in\na library in the existing SYSPROC, SYSEXEC, ISPPLIB, or ISPSLIB\nallocations thus allowing the development and testing in other, less\ncritical, data sets.\n\nIf a JCL Syntax checking product is available then TRYIT can be used\nto invoke it - this is assuming the product can be invoked as an ISPF\nEdit Macro (e.g. CA-JCLCheck and JCLPrep).\n\nFor Assembler programs the active member will be assembled and optionally\nlinkedited into a specified target library. After entering TRYIT the user\nwill be prompted to enter the assembly and linkedit information if the\nmember is determined to be an assembler program.\n\nFor CLIST and REXX Exec members the active data set in which the member\nresides will be allocated using the TSO ALTLIB facility and then the\nmember executed, along with any passed optional parameters.\n\nFor ISPF Panels and ISPF Skeletons the active data set in which the\nmember resides will be allocated using the ISPF LIBDEF facility then\nthen the panel Displayed or Selected based upon the parameters provided\nto TRYIT. If there are any errors in the panel or skeleton an ISPF\nmessage will be displayed and the error may then be corrected using ISPF\nEdit and TRYIT used once again to verify the panel or skeleton - all\nwithout the need to split the screen and invoke ISPF Test.\n\nNote there are limitations to the Skeleton testing as variables and\nimbed tables may not be available.\n\nBecause of the use of ALTLIB or LIBDEF the member being tested will be\nable to find subroutines or other ISPF Panels providing they reside\nwithin the data set being edited thus allowing an entire package to be\ndeveloped, updated, and/or tested, in less critical libraries.\n\nThe type of member being edited is dynamically determined with a default\nof REXX Exec assumed if all the tests fail. The tests include:\n\n        1) The data set suffix\n           - Assembler: ASM ASSEM\n           - CLIST: CLIST, SYSPROC, CMDPROC\n           - REXX:  EXEC, REXX, SYSEXEC\n           - Panel: PANEL, PANELS, ISPPLIB\n           - Skels: SKEL, SKELS, ISPSLIB\n        2) CLIST: Look for PROC followed by a number on record 1\n        3) REXX: Look for the word REXX in record 1\n        4) Panel: Look for any of these in record 1\n           )ATTR )PANEL )CCSID )PROC )BODY )INIT )REINIT ..PREP:\n        5) JCL: First record starts with //\n\nThis provides a very easy method for iterative testing and updating of\nthe member until the member works as desired.\n\n===== Usage\n\nUse TRYIT from any ISPF Edit command line while editing a CLIST, REXX Exec, or\nISPF Panel. The syntax is:\n\n    TRYIT optional-parms\n\nThe optional-parms are:\n\n     ? to display the ISPF Tutorial\n\n     For CLISTs and REXX Execs any parameters that the member being edited\n     would need to have passed to it.\n\n     For Assembler there are not supported options at this time.\n\n     For ISPF Panels one, or more, of the following:\n\n         APPL followed by a 1 to 4 character application id to be\n             used when SEL is specified to select the panel\n         POP will cause the panel to be displayed as a popup\n             - optionally POP may be followed by a row and column\n               to be used for the popup\n         SEL will Select the panel instead of just Displaying it\n         TUT will display the panel as an ISPF Tutorial\n             (default is to just display the panel)\n\n     For example:\n\n          EDIT       hlq.test.exec(sample)\n          Command ===> tryit opt1 opt2\n\nUpon completion of the processing of the member a message is displayed\nin the upper right with a return code or short message with a long\nmessage, available by pressing PF1 (Help), with more information.  For\nCLISTs and REXX Execs the return code is whatever the CLIST or REXX Exec\nreturn while for ISPF Panels the message is either a zero return code if\nthere are no problems or the short and long error messages generated by\nthe ISPF Display, Selection, or Tutorial services.\n\nFor Assembler programs upon completion of the assembly the assembly\nlisting will be displayed using ISPF browse. If a load library is\nspecified under the link edit options then after the linkedit the\nlinkedit listing will also be displayed using ISPF Browse.  The\nlinkedit will only occur if the assembly completes with a return code\nless than 8.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EXEC": {"ttr": 257, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PANELS": {"ttr": 769, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT313/CBT.V500.FILE313.PDS/TRYIT.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT313/CBT.V500.FILE313.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}