{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011727000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 11874772, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 15, "INMDSNAM": "CBT.V500.FILE313.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 11874772, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 11874772, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE313.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\xb6\\x03'", "DS1TRBAL": "b'\\xba\\xbc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02>\\x00\\r\\x02K\\x00\\x00\\x00\\xb7'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x07\\x01  \\x9f\\x01  \\x9f\\x146\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-07-27T00:00:00", "modifydate": "2020-07-27T14:36:07", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  313\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE313\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 45 MEMBERS COUNTED; CUMULATIVE SIZE IS 112,357 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/27/20    14:36:07    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x05 \\x04\\x00\\x99\\x18?\\x01\\x14\\x08/\\t\\x11\\x00\\x0e\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.05", "flags": 32, "createdate": "1999-07-02T00:00:00", "modifydate": "2014-03-23T09:11:04", "lines": 14, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "To RECEIVE members of this dataset, some of which are in TSO TRANSMIT\n(or XMIT) format, do the following:  Under TSO, say:\n\n     RECEIVE INDS(this.dataset(member))\n\nand either press ENTER at the prompt, or supply DSN(  ) and/or\nVOL(  ) keywords, to control the output dataset name, and where it\nwill be placed.\n\nThese tools are provided by:\n  Lionel B. Dyck\n  email:   lbdyck@gmail.com\n  website: www.lbdsoftware.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$SOFTPUB": {"ttr": 520, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x01 Q\\x00\\x99\\x18\\x7f\\x01\\x14\\x08/\\t\\x04\\x00\\x18\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.01", "flags": 32, "createdate": "1999-07-06T00:00:00", "modifydate": "2014-03-23T09:04:51", "lines": 24, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "This file contains a user friendly front-end to IBM's BookManager\nRead/MVS.  It is designed to make it easier for your users to use\nthe large number of IBM and other softcopy publications.\n\nTo install:\n\n1.  Unzip this file (you've probably already done this)\n\n2.  Do a binary upload to MVS into a RECFM=FB LRECL=80 dataset\n\n3.  Process the dataset with IEBUPDTE into a PDS with RECFM=FB\n    LRECL=80\n\n4.  Follow the instructions in the PDS.  Some members will\n    require that you issue TSO RECEIVE INDS(dsname(member)) to\n    extract into something that you can use.\n\nIf you find this useful, have questions or comments (or\ncomplaints) please let me know.\n\n  Lionel B. Dyck\n  email:   lbdyck@gmail.com\n  website: www.lbdsoftware.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE313": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00G\\x01  \\x9f\\x01  \\x9f\\x145\\x01/\\x01/\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-07-27T00:00:00", "modifydate": "2020-07-27T14:35:47", "lines": 303, "newlines": 303, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 313 is from Lionel Dyck in Austin, Texas and contains     *   FILE 313\n//*           quite a few ISPF interface packages, and other        *   FILE 313\n//*           stuff.                                                *   FILE 313\n//*                                                                 *   FILE 313\n//*           The member list probably more accurately reflects     *   FILE 313\n//*           the contents of this file, than does the description  *   FILE 313\n//*           of some details, below.  This file is constantly      *   FILE 313\n//*           being revised.  For reference, please see Lionel's    *   FILE 313\n//*           web site at:   http://www.lbdsoftware.com             *   FILE 313\n//*                                                                 *   FILE 313\n//*           email:  lbdyck@gmail.com                              *   FILE 313\n//*                                                                 *   FILE 313\n//*    Lionel Dyck's large collection of utilities has now been     *   FILE 313\n//*    divided between Files 312, 313, 314, and 969.  All member    *   FILE 313\n//*    names beginning with A-R are on File 312.  Names beginning   *   FILE 313\n//*    with S-TS are on File 313.  Names from TX-Z are on File      *   FILE 313\n//*    314.  File 969 contains the PDSEGEN ISPF application to      *   FILE 313\n//*    exploit the capabilities of using PDSE Version 2 member      *   FILE 313\n//*    generations.                                                 *   FILE 313\n//*                                                                 *   FILE 313\n//*    These four files contain quite a few separate utility        *   FILE 313\n//*    packages which are unrelated to each other.  You can tell    *   FILE 313\n//*    which members of these files belong to the same utility      *   FILE 313\n//*    package, by the similarities in their member names.          *   FILE 313\n//*                                                                 *   FILE 313\n//*    Some utility packages will have several member names         *   FILE 313\n//*    associated with them.  But these should all be similar       *   FILE 313\n//*    to each other, letting you know that they belong to the      *   FILE 313\n//*    same utility package.  You can see this, by looking at       *   FILE 313\n//*    the member list shown below, so you can get the idea         *   FILE 313\n//*    about how this packaging arrangement works.                  *   FILE 313\n//*                                                                 *   FILE 313\n//*    Documentation files which are in WORD format, or PDF         *   FILE 313\n//*    format, have been included to make the use of the package    *   FILE 313\n//*    associated with the doc, easier.  Usually a doc file in      *   FILE 313\n//*    FB-80 EBCDIC text, has been included too.  To use the        *   FILE 313\n//*    WORD or PDF format documentation, you have to download the   *   FILE 313\n//*    member in BINARY to a PC, and look at the resulting file     *   FILE 313\n//*    on the PC, using Microsoft WORD, or Adobe ACROBAT reader,    *   FILE 313\n//*    respectively.                                                *   FILE 313\n//*                                                                 *   FILE 313\n//*    DSN=CBT500.FILE313   (fairly up to date for Version 500)     *   FILE 313\n//*                                                                 *   FILE 313\n//*       NAME       VER.MOD   LAST MODIFIED     SIZE   ID          *   FILE 313\n//*       $DOC        01.05   2014/03/23 09:11     14 SBGOLOB       *   FILE 313\n//*       $SOFTPUB    01.01   2014/03/23 09:04     24 SBGOLOB       *   FILE 313\n//*       SAVELAB     02.01   2020/02/08 17:28   1690 SAVELAB       *   FILE 313\n//*       SDSFEXT     01.21   2018/05/18 10:19    751 SDSFEXT       *   FILE 313\n//*       SDSFEXT#    01.20   2015/12/04 17:55   2069 PDF           *   FILE 313\n//*       SDSFEXT@    01.20   2015/12/04 17:55    640 MSWORD        *   FILE 313\n//*       SDSFEXTC    01.11   2015/12/04 13:01     51 SYSLBD        *   FILE 313\n//*       SDSFPA$$    01.28   2003/04/28 08:57     19 SYSLBD        *   FILE 313\n//*       SDSFPAG$    01.19   2001/02/20 10:52      9 SYSLBD        *   FILE 313\n//*       SDSFPAG#    01.28   2003/04/28 08:57   4894 PDF           *   FILE 313\n//*       SDSFPAG@    01.28   2003/04/28 08:57   5888 MSWORD        *   FILE 313\n//*       SDSFPAGE    01.28   2003/04/28 08:57   1106 SYSLBD        *   FILE 313\n//*       SDSFP119    01.19   2001/09/28 12:46    899 SYSLBD        *   FILE 313\n//*       SDSFP19#    01.19   2001/09/06 23:44   1905 PDF           *   FILE 313\n//*       SETCLIP     01.03   2019/02/07 06:44   1707 SETCLIP       *   FILE 313\n//*       SETCLIP#    01.00   2016/11/06 21:28   5471 PDF           *   FILE 313\n//*       SETCLIP@    01.00   2016/11/06 21:28    922 MSWORD        *   FILE 313\n//*       SETCLIPP    01.00   2016/11/06 21:46   3204 POWERPT       *   FILE 313\n//*       SHAREVAR    01.01   2020/07/04 15:18    673 SHAREV        *   FILE 313\n//*       SLM         01.06   2006/11/10 08:00   5195 SYSLBD        *   FILE 313\n//*       SLM$        01.06   2002/12/14 23:10     23 SYSLBD        *   FILE 313\n//*       SLM#        01.06   2006/11/10 08:01   6872 PDF           *   FILE 313\n//*       SLM@        01.06   2006/11/10 08:02   2586 MSWORD        *   FILE 313\n//*       SLMCHANG    01.06   2006/11/10 07:57     82 SYSLBD        *   FILE 313\n//*       SOFTPUB     01.00   2000/12/26 17:30  43974 SYSLBD        *   FILE 313\n//*       SOFTPUB$    01.01   2014/03/23 09:04     24 SBGOLOB       *   FILE 313\n//*       SPELLC      01.02   2020/01/26 08:53   7102 SPELLC        *   FILE 313\n//*       SPELLC$     01.01   2004/11/04 23:44    199 SPELLC        *   FILE 313\n//*       SPELLC$#    01.01   2004/11/04 23:44     37 SPELLC        *   FILE 313\n//*       SPELLCHG    01.01   2020/01/26 08:31    266 SPELLC        *   FILE 313\n//*       TERSE       01.00   2002/04/25 01:56    715 SYSLBD        *   FILE 313\n//*       TMAILQRY    01.00   2000/04/05 16:34    399 SYSLBD        *   FILE 313\n//*       TRYIT       03.02   2020/07/13 09:11   1452 TRYIT         *   FILE 313\n//*       TRYIT$      02.02   2005/03/07 19:08    118 SYSLBD        *   FILE 313\n//*       TSOEMAIL    01.00   2000/04/13 22:28   8120 SYSLBD        *   FILE 313\n//*       TSOPROF     01.02   2018/02/09 10:31    541 LBD           *   FILE 313\n//*       TSOTRAP     01.22   2016/07/14 09:05    135 SYSLBD        *   FILE 313\n//*       TSOTRAP1    01.00   2000/02/16 16:55     30 OLD           *   FILE 313\n//*       TSO8CHAR    01.03   2020/02/03 08:07     31 SLBD          *   FILE 313\n//*       TUTORPRT    01.02   2020/03/14 11:10    226 TUTOR         *   FILE 313\n//*       TXT2CSV     01.02   2017/06/29 13:03   1254 LBD           *   FILE 313\n//*                                                                 *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member SAVELAB                                              *   FILE 313\n//*            *** Updated 02/08/2020 ***                           *   FILE 313\n//*                                                                 *   FILE 313\n//*     SAVELAB is an ispf edit macro that will save the labels     *   FILE 313\n//*     used in the current edit member. This allows you to set     *   FILE 313\n//*     labels and then restore them when you return to work on     *   FILE 313\n//*     the member again later.                                     *   FILE 313\n//*                                                                 *   FILE 313\n//*     SAVELAB has the following parameter options:                *   FILE 313\n//*                                                                 *   FILE 313\n//*        No option - restore all saved labels                     *   FILE 313\n//*        ERASE - Comletely erase the ALL saved labels for ALL     *   FILE 313\n//*                members                                          *   FILE 313\n//*        EXPORT - Save the saved labels in a PDS member           *   FILE 313\n//*        FREE - Free saved labels for this member                 *   FILE 313\n//*        HELP - Show this help info - alias is ?                  *   FILE 313\n//*        IMPORT - Import the saved labels from a PDS member       *   FILE 313\n//*        LIST - List all active labels in the data                *   FILE 313\n//*        LISTS- Selection list of all active labels               *   FILE 313\n//*        SAVE - Save all labels                                   *   FILE 313\n//*        SHOW - Show the ISPF variable info on the saved labels   *   FILE 313\n//*        SHOW ALL - Show all members with saved labels            *   FILE 313\n//*        WHY  - Display reasons to use Edit Labels                *   FILE 313\n//*                                                                 *   FILE 313\n//*        Abbreviations are:  ERA, F, H, S, SH, EX, IM, W          *   FILE 313\n//*                                                                 *   FILE 313\n//*     SAVELAB saves the current dataset(member) as the            *   FILE 313\n//*     key and then every label and associated record              *   FILE 313\n//*     number in an ISPF variable. This variable is used           *   FILE 313\n//*     for all saved labels and may not exceed 32K bytes           *   FILE 313\n//*     (a warning message at 32,000 is issued).                    *   FILE 313\n//*                                                                 *   FILE 313\n//*     To use:                                                     *   FILE 313\n//*     1. While in ISPF Edit, after having created labels,         *   FILE 313\n//*     issue SAVELAB SAVE                                          *   FILE 313\n//*     2. When returning to ISPF Edit, issue SAVELAB to            *   FILE 313\n//*     restore all labels                                          *   FILE 313\n//*     3. If SAVELAB used to restore labels or SAVELAB SAVE        *   FILE 313\n//*     is issued then using PF3 (END) to end Edit will also        *   FILE 313\n//*     issue the SAVELAB SAVE command before ending.               *   FILE 313\n//*                                                                 *   FILE 313\n//*     Note: If ISPF Edit is entered under a different ISPF        *   FILE 313\n//*     Profile then the saved labels may not be the same,          *   FILE 313\n//*     or even exist, as when using a different ISPF               *   FILE 313\n//*     Profile.                                                    *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member SDSFEXT                                              *   FILE 313\n//*            - Updated 5/18/2018                                  *   FILE 313\n//*                                                                 *   FILE 313\n//*     SDSFEXT is a utility using the older, non-SDSF REXX,        *   FILE 313\n//*     interface to SDSF.  It is designed to use SDSF to extract   *   FILE 313\n//*     a specific DDname for every JOB in the spool that matches   *   FILE 313\n//*     the specified jobname.  The extracted data is then placed   *   FILE 313\n//*     into a pre-allocated dataset referenced by a DDname in      *   FILE 313\n//*     the command.                                                *   FILE 313\n//*                                                                 *   FILE 313\n//*     EDITPAGE is a frontend to SDSFPAGE that is a more logical   *   FILE 313\n//*     name than SDSFPAGE when used as a pure ISPF Edit command.   *   FILE 313\n//*                                                                 *   FILE 313\n//*     SDSFPAGE is a tool designed to be used with SDSF to browse, *   FILE 313\n//*     print to sysout, print to a data set, or e-mail (using      *   FILE 313\n//*     XMITIP) a page or range of pages from a job in the spool.   *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member SETCLIP                                              *   FILE 313\n//*            - Updated 2/7/19                                     *   FILE 313\n//*                                                                 *   FILE 313\n//*     SETCLIP is an ISPF Clipboard Manager                        *   FILE 313\n//*                                                                 *   FILE 313\n//*     SetClip will perform two functions depending on how it is   *   FILE 313\n//*     invoked.                                                    *   FILE 313\n//*                                                                 *   FILE 313\n//*     Syntax:  %setclip option                                    *   FILE 313\n//*                                                                 *   FILE 313\n//*     Where option is:   blank     invokes the ISPF Dialog to     *   FILE 313\n//*                                  define and setup the user      *   FILE 313\n//*                                  clipboards                     *   FILE 313\n//*                        non-blank to just setup the clipboards   *   FILE 313\n//*                                                                 *   FILE 313\n//*     When the option is blank an ISPF panel (setclipp) is        *   FILE 313\n//*     displayed that allows the user to define up to 10 (the IBM  *   FILE 313\n//*     default limit) Edit clipboards.                             *   FILE 313\n//*                                                                 *   FILE 313\n//*     Change the default # of clipboards in the ISPF Config       *   FILE 313\n//*     option MAXIMUM_NUMBER_OF_EDIT_CLIPBOARDS.                   *   FILE 313\n//*                                                                 *   FILE 313\n//*     The panel requests both a clipboard name and the dataset, or*   FILE 313\n//*     dataset(member), that contains the text that will be copied *   FILE 313\n//*     into the clipboard. If the start and/or ending row numbers  *   FILE 313\n//*     are not specified then all records will be copied into the  *   FILE 313\n//*     clipboard.                                                  *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member SHAREVAR                                             *   FILE 313\n//*                                                                 *   FILE 313\n//*        Updated 7/4/2020                                         *   FILE 313\n//*                                                                 *   FILE 313\n//*     A REXX Exec to pass REXX variables, including stems, to     *   FILE 313\n//*     another REXX Exec which uses this routine to recreate       *   FILE 313\n//*     all the passed variables.                                   *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member SLM                                                  *   FILE 313\n//*                                                                 *   FILE 313\n//*     SLM or System Library Manager to provide the user with a    *   FILE 313\n//*     list of the active system PARMLIB datasets and mebers to    *   FILE 313\n//*     choose from.  Edit and Browse are supported with Save-to    *   FILE 313\n//*     enabled to edit a member from one library and save it into  *   FILE 313\n//*     another specific library (e.g. the first or second in the   *   FILE 313\n//*     list).                                                      *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member SPELLC                                               *   FILE 313\n//*                                                                 *   FILE 313\n//*     SPELLC is Spell Checker written as an ISPF Edit macro that  *   FILE 313\n//*     is invoked on the ISPF Edit command line with or without    *   FILE 313\n//*     any other parameters. It will immediately ask the user if   *   FILE 313\n//*     they have their own dictionary.                             *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member TERSE                                                *   FILE 313\n//*                                                                 *   FILE 313\n//*     TERSE is a package of 2 exec's. PACKDS and UNPACKDS that    *   FILE 313\n//*     simplify using the IBM TERSE utility.                       *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member TRYIT - Updated 07/13/2020 to V3.7                   *   FILE 313\n//*                                                                 *   FILE 313\n//*     TRYIT is an ISPF Edit command that is designed to be used   *   FILE 313\n//*     to test an Assembler program, CLIST, REXX Exec, JCL, ISPF   *   FILE 313\n//*     Panel or ISPF Skeleton while it is being edited. The way    *   FILE 313\n//*     this works is such that the JCL, CLIST, REXX Exec, ISPF     *   FILE 313\n//*     Panel, or ISPF Skeleton does *not* have to be in a library  *   FILE 313\n//*     in the existing SYSPROC, SYSEXEC, ISPPLIB, or ISPSLIB       *   FILE 313\n//*     allocations thus allowing the development and testing in    *   FILE 313\n//*     other, less critical, data sets.                            *   FILE 313\n//*                                                                 *   FILE 313\n//*     If a JCL Syntax checking product is available then TRYIT    *   FILE 313\n//*     can be used to invoke it - this is assuming the product     *   FILE 313\n//*     can be invoked as an ISPF Edit Macro (e.g. CA-JCLCheck      *   FILE 313\n//*     and JCLPrep).                                               *   FILE 313\n//*                                                                 *   FILE 313\n//*     For Assembler programs the active member will be assembled  *   FILE 313\n//*     and optionally linkedited into a specified target library.  *   FILE 313\n//*     After entering TRYIT the user will be prompted to enter     *   FILE 313\n//*     the assembly and linkedit information if the member is      *   FILE 313\n//*     determined to be an assembler program.                      *   FILE 313\n//*                                                                 *   FILE 313\n//*     For CLIST and REXX Exec members the active data set in      *   FILE 313\n//*     which the member resides will be allocated using the TSO    *   FILE 313\n//*     ALTLIB facility and then the member executed, along with    *   FILE 313\n//*     any passed optional parameters.                             *   FILE 313\n//*                                                                 *   FILE 313\n//*     For ISPF Panels and ISPF Skeletons the active data set in   *   FILE 313\n//*     which the member resides will be allocated using the ISPF   *   FILE 313\n//*     LIBDEF facility then then the panel Displayed or Selected   *   FILE 313\n//*     based upon the parameters provided to TRYIT. If there are   *   FILE 313\n//*     any errors in the panel or skeleton an ISPF message will    *   FILE 313\n//*     be displayed and the error may then be corrected using      *   FILE 313\n//*     ISPF Edit and TRYIT used once again to verify the panel or  *   FILE 313\n//*     skeleton - all without the need to split the screen and     *   FILE 313\n//*     invoke ISPF Test.                                           *   FILE 313\n//*                                                                 *   FILE 313\n//*     Note there are limitations to the Skeleton testing as       *   FILE 313\n//*     variables and imbed tables may not be available.            *   FILE 313\n//*                                                                 *   FILE 313\n//*     Because of the use of ALTLIB or LIBDEF the member being     *   FILE 313\n//*     tested will be able to find subroutines or other ISPF       *   FILE 313\n//*     Panels providing they reside within the data set being      *   FILE 313\n//*     edited thus allowing an entire package to be developed,     *   FILE 313\n//*     updated, and/or tested, in less critical libraries.         *   FILE 313\n//*                                                                 *   FILE 313\n//*     The type of member being edited is dynamically determined   *   FILE 313\n//*     with a default of REXX Exec assumed if all the tests fail.  *   FILE 313\n//*     The tests include:                                          *   FILE 313\n//*                                                                 *   FILE 313\n//*       1) The data set suffix                                    *   FILE 313\n//*            clist = \"CLIST SYSPROC CMDPROC\"                      *   FILE 313\n//*            rexx  = \"REXX  SYSEXEC  EXEC\"                        *   FILE 313\n//*            asm   = \"ASM   ASSEM\"                                *   FILE 313\n//*            jcl   = \"JCL   CNTL\"                                 *   FILE 313\n//*            panel = \"PANEL PANELS  ISPPLIB *PLIB *PENU *PDEU\"    *   FILE 313\n//*            skl   = \"SKL  SKEL SKELS  ISPSLIB *SLIB *SENU *SDEU\" *   FILE 313\n//*       2) CLIST: Look for PROC followed by a number on record 1  *   FILE 313\n//*       3) REXX: Look for the word REXX in record 1               *   FILE 313\n//*       4) Panel: Look for any of these in record 1               *   FILE 313\n//*          )ATTR )PANEL )CCSID )PROC )BODY )INIT )REINIT ..PREP:  *   FILE 313\n//*       5) JCL: First record starts with //                       *   FILE 313\n//*       6) SKEL: First record )CM, )SEL, or )SET                  *   FILE 313\n//*                                                                 *   FILE 313\n//*     This provides a very easy method for iterative testing and  *   FILE 313\n//*     updating of the member until the member works as desired.   *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member TSOPROF  (created 1991 - added 2/9/2018)             *   FILE 313\n//*                                                                 *   FILE 313\n//*     TSOPROF makes it easy to review and the key TSO PROFILE     *   FILE 313\n//*     settings.                                                   *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member TSOTRAP                                              *   FILE 313\n//*                                                                 *   FILE 313\n//*     TSOTRAP is a handy ISPF command that will issue whatever    *   FILE 313\n//*     TSO command you give it, outtrap the results, and allow the *   FILE 313\n//*     user to then Browse or Edit the results.                    *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member TUTORPRT- Updated 3/14/20                            *   FILE 313\n//*                                                                 *   FILE 313\n//*     TUTORPRT is a REXX exec that will 'print' ISPF tutorial     *   FILE 313\n//*     panels. Provide the dataset name where the panels are       *   FILE 313\n//*     and the name of a starting tutorial panel. Optionally       *   FILE 313\n//*     specify if the output should be text, or in RTF or PDF      *   FILE 313\n//*     formats (if RTF or PDF then the txt2rtf or txt2pdf tools    *   FILE 313\n//*     will be needed (see file 314 for both).                     *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member TXT2CSV - Updated 06/29/17                           *   FILE 313\n//*                                                                 *   FILE 313\n//*     Convert a text file into a CSV.                             *   FILE 313\n//*                                                                 *   FILE 313\n//*     Member TSO8CHAR - Added 02/03/20                            *   FILE 313\n//*                                                                 *   FILE 313\n//*     Detect if TSO 8 Character Userids are enabled and           *   FILE 313\n//*     return that info to the caller.                             *   FILE 313\n//*                                                                 *   FILE 313\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SAVELAB": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x007\\x01\\x03)\\x0f\\x01 \\x03\\x9f\\x17(\\x06\\x9a\\x01\\x1f\\x00\\x00\\xe2\\xc1\\xe5\\xc5\\xd3\\xc1\\xc2@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "2003-10-17T00:00:00", "modifydate": "2020-02-08T17:28:37", "lines": 1690, "newlines": 287, "modlines": 0, "user": "SAVELAB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SDSFEXT": {"ttr": 1287, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x15 \"\\x01\\x07\\x16\\x8f\\x01\\x18\\x13\\x8f\\x10\\x19\\x02\\xef\\x02U\\x00\\x00\\xe2\\xc4\\xe2\\xc6\\xc5\\xe7\\xe3@\\x00\\x00\\x02\\xef\\x00\\x00\\x02U\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.21", "flags": 32, "createdate": "2007-06-17T00:00:00", "modifydate": "2018-05-18T10:19:22", "lines": 751, "newlines": 597, "modlines": 0, "user": "SDSFEXT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SDSFEXT#": {"ttr": 1545, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x14 \\x00\\x01\\x07\\x16\\x8f\\x01\\x153\\x8f\\x17U\\x08\\x15\\x08\\x15\\x00\\x00\\xd7\\xc4\\xc6@@@@@\\x00\\x00\\x08\\x15\\x00\\x00\\x08\\x15\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.20", "flags": 32, "createdate": "2007-06-17T00:00:00", "modifydate": "2015-12-04T17:55:00", "lines": 2069, "newlines": 2069, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "SDSFEXT@": {"ttr": 2563, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x14 \\x00\\x01\\x07\\x16\\x8f\\x01\\x153\\x8f\\x17U\\x02\\x80\\x02\\x80\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@\\x00\\x00\\x02\\x80\\x00\\x00\\x02\\x80\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.20", "flags": 32, "createdate": "2007-06-17T00:00:00", "modifydate": "2015-12-04T17:55:00", "lines": 640, "newlines": 640, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "SDSFEXTC": {"ttr": 2820, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x0b \\x14\\x01\\x02\\x14\\x0f\\x01\\x153\\x8f\\x13\\x01\\x003\\x00\\x04\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x003\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.11", "flags": 32, "createdate": "2002-05-20T00:00:00", "modifydate": "2015-12-04T13:01:14", "lines": 51, "newlines": 4, "modlines": 0, "user": "SYSLBD"}, "text": "Change History:\n\n    Version 1.20   12/04/2015\n                  - Courtesy of Bill Smith\n\n    Version 1.10   06/12/2007\n                  - Updates from Rick Turnbull\n                    - allow ddname of * for all ddnames\n\n    Version 1.09   06/10/2004\n                  - Updates from Billy Smith\n                    - insert TOP command after Filter Procstep\n\n    Version 1.08   05/04/2004\n                  - Updates from Daryl Johnson\n                    - use mvsvar for jobname\n                    - change test for NP in SDSF output\n\n    Version 1.07   03/17/2004\n                   - Add input option to allow extract of input data\n\n    Version 1.06   10/02/2003\n                   - Correction for FILTER STEPNAME thanks to Rick Turnbull\n\n    Version 1.05   11/02/2002\n                   - Correction for jobname * to set active on\n\n    Version 1.04   10/18/2002\n                   - Change to call sdsf instead of isfafd\n\n    Version 1.03   10/17/2002\n                   - support procstep specification\n                   - if jobname = * then default active to on\n                   - change from using PT to X for extract to a file\n\n    Version 1.02   10/15/2002\n                   - add option for current jobname\n                   - support multiple ddnames\n                   - allow stepname.ddname\n\n    Version 1.01   08/27/2002\n                   - add jobnum option\n\n    Version 1.00   05/21/2002\n                   - cleanup and add version to code\n\n    Version 0.2    05/20/2002\n                   - rewrite of job selection\n\n    Version 0.1    05/20/2002\n                   - creation of this exec\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SDSFPA$$": {"ttr": 2822, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x1c \\x00\\x01\\x03\\x11\\x8f\\x01\\x03\\x11\\x8f\\x08W\\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.28", "flags": 32, "createdate": "2003-04-28T00:00:00", "modifydate": "2003-04-28T08:57:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "SYSLBD"}, "text": "To install you need to:\n\n1.  Unzip (which you obviously have done since you are reading\nthis)\n2.  Upload sdsfpage.xmit to your MVS system using the following\n    characteristics\n    - binary\n    - RECFM=FB\n    - LRECL=80\n3.  After the upload issue on TSO:\n    RECEIVE INDS(upload.dsn)\n\nthen read the $doc member of the resulting PDS.\n\nNote: This version of SDSFPAGE has a dependency on XMITIP Version\n4.50 (or higher) if the e-mail option is used.\n\nYou should consider updating the documentation (*.doc) for your\nlocal requirements)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SDSFPAG$": {"ttr": 2824, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x13 \\x00\\x01\\x01\\x05\\x1f\\x01\\x01\\x05\\x1f\\x10R\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x00\\t\\x00\\x00\\x00\\t\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.19", "flags": 32, "createdate": "2001-02-20T00:00:00", "modifydate": "2001-02-20T10:52:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSLBD"}, "text": "SDSFPAGE is an ISPF Edit macro dialog that works with\nSDSF to select specific pages for browsing, printing,\ncopy to data set, or e-mail. The user enters SDSF and\nthen invokes the SDSF Editor (SE selection command) on\na job or ddname and then enters SDSFPAGE to be prompted\nfor what pages to select.  Works with both ASA and\nMachine carriage control spool files. (finalized just\ntoday)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SDSFPAG#": {"ttr": 2826, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x1c \\x00\\x01\\x03\\x11\\x8f\\x01\\x03\\x11\\x8f\\x08W\\x13\\x1e\\x13\\x1e\\x00\\x00\\xd7\\xc4\\xc6@@@@@\\x00\\x00\\x13\\x1e\\x00\\x00\\x13\\x1e\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.28", "flags": 32, "createdate": "2003-04-28T00:00:00", "modifydate": "2003-04-28T08:57:00", "lines": 4894, "newlines": 4894, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "SDSFPAG@": {"ttr": 4867, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x1c \\x00\\x01\\x03\\x11\\x8f\\x01\\x03\\x11\\x8f\\x08W\\x17\\x00\\x17\\x00\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@\\x00\\x00\\x17\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.28", "flags": 32, "createdate": "2003-04-28T00:00:00", "modifydate": "2003-04-28T08:57:00", "lines": 5888, "newlines": 5888, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "SDSFPAGE": {"ttr": 7175, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x1c \\x00\\x01\\x03\\x11\\x8f\\x01\\x03\\x11\\x8f\\x08W\\x04R\\x04R\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x04R\\x00\\x00\\x04R\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.28", "flags": 32, "createdate": "2003-04-28T00:00:00", "modifydate": "2003-04-28T08:57:00", "lines": 1106, "newlines": 1106, "modlines": 0, "user": "SYSLBD"}, "mimetype": "audio/x-mp4a-latm", "datatype": "binary", "extension": ".x-mp4a-latm"}, "SDSFP119": {"ttr": 7685, "alias": false, "halfwords": 40, "notes": 0, "parms": "b\"\\x01\\x13 \\x00\\x01\\x01'\\x1f\\x01\\x01'\\x1f\\x12F\\x03\\x83\\x03\\x83\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x03\\x83\\x00\\x00\\x03\\x83\\x00\\x00\\x00\\x00\"", "ispf": {"version": "01.19", "flags": 32, "createdate": "2001-09-28T00:00:00", "modifydate": "2001-09-28T12:46:00", "lines": 899, "newlines": 899, "modlines": 0, "user": "SYSLBD"}, "mimetype": "audio/x-mp4a-latm", "datatype": "binary", "extension": ".x-mp4a-latm"}, "SDSFP19#": {"ttr": 7945, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x13 \\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f#D\\x07q\\x07q\\x00\\x00\\xd7\\xc4\\xc6@@@@@\\x00\\x00\\x07q\\x00\\x00\\x07q\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.19", "flags": 32, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T23:44:00", "lines": 1905, "newlines": 1905, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "SETCLIP": {"ttr": 8714, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00A\\x01\\x161\\x1f\\x01\\x19\\x03\\x8f\\x06D\\x06\\xab\\x06\\x9f\\x00\\x00\\xe2\\xc5\\xe3\\xc3\\xd3\\xc9\\xd7@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-11-06T00:00:00", "modifydate": "2019-02-07T06:44:41", "lines": 1707, "newlines": 1695, "modlines": 0, "user": "SETCLIP"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SETCLIP#": {"ttr": 9480, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x161\\x1f\\x01\\x161\\x1f!(\\x15_\\x15_\\x00\\x00\\xd7\\xc4\\xc6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-11-06T00:00:00", "modifydate": "2016-11-06T21:28:18", "lines": 5471, "newlines": 5471, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "SETCLIP@": {"ttr": 11782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x161\\x1f\\x01\\x161\\x1f!(\\x03\\x9a\\x03\\x9a\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-11-06T00:00:00", "modifydate": "2016-11-06T21:28:18", "lines": 922, "newlines": 922, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "datatype": "binary", "extension": ".docx"}, "SETCLIPP": {"ttr": 12289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x161\\x1f\\x01\\x161\\x1f!F\\x0c\\x84\\x0c\\x84\\x00\\x00\\xd7\\xd6\\xe6\\xc5\\xd9\\xd7\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-11-06T00:00:00", "modifydate": "2016-11-06T21:46:18", "lines": 3204, "newlines": 3204, "modlines": 0, "user": "POWERPT"}, "mimetype": "application/vnd.openxmlformats-officedocument.presentationml.presentation", "datatype": "binary", "extension": ".pptx"}, "SHAREVAR": {"ttr": 13571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01 \\x15\\x8f\\x01 \\x18o\\x15\\x18\\x02\\xa1\\x02\\xa1\\x00\\x00\\xe2\\xc8\\xc1\\xd9\\xc5\\xe5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-06-06T00:00:00", "modifydate": "2020-07-04T15:18:42", "lines": 673, "newlines": 673, "modlines": 0, "user": "SHAREV"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SLM": {"ttr": 13828, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x06 \\x00\\x01\\x061O\\x01\\x061O\\x08\\x00\\x14K\\x14K\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x14K\\x00\\x00\\x14K\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.06", "flags": 32, "createdate": "2006-11-10T00:00:00", "modifydate": "2006-11-10T08:00:00", "lines": 5195, "newlines": 5195, "modlines": 0, "user": "SYSLBD"}, "mimetype": "audio/x-mp4a-latm", "datatype": "binary", "extension": ".x-mp4a-latm"}, "SLM$": {"ttr": 15879, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x06 \\x00\\x01\\x024\\x8f\\x01\\x024\\x8f#\\x10\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.06", "flags": 32, "createdate": "2002-12-14T00:00:00", "modifydate": "2002-12-14T23:10:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "SYSLBD"}, "text": "Readme.Txt for System Library Management Package\n\nThis package contains the following files:\n\n        slm.xmit\n        readme.txt\n        System Library Manager Users and Installers Guide.doc\n\nTo install you need to:\n\n1.  Unzip (which you obviously have done since you are reading this)\n2.  Upload slm.xmit to your MVS system using the following\n    characteristics\n    - binary\n    - RECFM=FB\n    - LRECL=80\n3.  After the upload issue on TSO:\n    RECEIVE INDS(upload.dsn)\n\nthen read the $doc member of the resulting PDS.\n\nThe microsoft word document contains installation and usage\ninformation.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SLM#": {"ttr": 15881, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x06 \\x00\\x01\\x061O\\x01\\x061O\\x08\\x01\\x1a\\xd8\\x1a\\xd8\\x00\\x00\\xd7\\xc4\\xc6@@@@@\\x00\\x00\\x1a\\xd8\\x00\\x00\\x1a\\xd8\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.06", "flags": 32, "createdate": "2006-11-10T00:00:00", "modifydate": "2006-11-10T08:01:00", "lines": 6872, "newlines": 6872, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "SLM@": {"ttr": 18695, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x06 \\x00\\x01\\x061O\\x01\\x061O\\x08\\x02\\n\\x1a\\n\\x1a\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@\\x00\\x00\\n\\x1a\\x00\\x00\\n\\x1a\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.06", "flags": 32, "createdate": "2006-11-10T00:00:00", "modifydate": "2006-11-10T08:02:00", "lines": 2586, "newlines": 2586, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "SLMCHANG": {"ttr": 19720, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x06 \\x14\\x01\\x061O\\x01\\x061O\\x07W\\x00R\\x00R\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x00R\\x00\\x00\\x00R\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.06", "flags": 32, "createdate": "2006-11-10T00:00:00", "modifydate": "2006-11-10T07:57:14", "lines": 82, "newlines": 82, "modlines": 0, "user": "SYSLBD"}, "text": "Change History for the System Library Manager\n\n Version    Date      Description\n 1.06       09/25/06  Several fixes/enhancements to the SLMJ2PRC exec\n 1.05       01/23/03  New PLIB option to pass a pre-allocated DD for use\n                      New assembler subroutine, SLMDDQ, to return the\n                      dsname and volser instead of using QBASELIB which\n                      only returns the dsnames for a DD.\n 1.04       01/17/03  Correct NEW option with no member parameter\n 1.03       01/17/03  Correct NEW option for new member and correct bug\n                      in Move\n 1.02       12/20/02  Add total count to Removing Duplicates popup\n 1.01       12/16/02  Add NOSYS option so SLM can be used by normal users\n                      as a simple source member manager\n                      Fix the NEW option to create a new member.\n                      Clean up help panels (such as they are)\n                      Add REPORT option on each of the table display panels\n                         to display the active customization settings\n                      Improve validation for library names when inserted.\n                      Improve processing if the target datset has an error\n                         on copy, rename, edit, or move.\n                      Add saveloc option to determine for saveopt/saveoptu\n                         options of 4, 6, and other (not 1,2,3,5) and the\n                         member length is less than 8 then append the\n                         save character instead of changing the last. If\n                         length is 8 then change the last character.\n                      If only one library do not execute the routine to\n                         remove inactive members.\n                      Add information to $doc and documentation about the\n                         web based group and listserv.\n\n 1.00       12/09/02  Declared Production and Released\n\n 0.99b      12/06/02  More cleanup\n                      Improve messages for Edit/Rename of inactive members\n                      Add system id to PARMLIB and ADD JES2 Procs\n                      Add system id and userid for ADD ddnames\n                      Add panel prompt for library inserts\n                         New panel slmtp\n                      Add option for sequence numbers on the member compare.\n                      Fixup Compare so Enter causes compare to go and PF3\n                         ends it.\n                      Support ADD JES2 to add the active JES2 static defined\n                         PROCxx along with the PROCLibs from the Master JCL\n                         as $PROCMST or $PROCnn\n                      Add pick list of datasets for the member compare.\n                      Add new ADD option to library table display which\n                         will allow ADD ddname to dynamically add the\n                         currently allocated ddname temporarily.\n                      Move SLMLOCAL exec inline at end of SLM exec\n                      Allow Point-and-Shoot for member selection\n                         (browse)\n                      Improve positioning for inserted libraries and\n                         library definitions\n                      Add View member selection option\n                      Add command EDIT to member table display to allow\n                         E Member on the command line\n                      Update TESTSLM to dynamcially determine hlq for\n                         test libraries\n                      Remove libdef for isptlib/isptabl\n                         replace with libdef for slmlib\n                      Add library option to tbcreate/tbopen/tbclose\n                      Improve messages if the table is in use or enq'd\n                      Add active filter to the display if used\n                      Add version to primary panel\n                      Rearrange line selection actions to alpha for members\n 0.998      11/18/02  Fix Compare option\n                      Don't allow MOVE if the member has the Staging suffix\n                      Don't make backup copies of the working member\n                      Add save option 6 to save prior 9 versions of member\n 0.997      11/18/02  Add new FILTER command\n                      Combine table display panels into 1 eliminating\n                        two table display panels and two help panels\n                      Fix ACTive and DUPlicate options (again)\n 0.996      11/15/02  Fix ACTive display\n 0.995      11/15/02  Fix $RECEIVE exec\n                      Add ASM source to package\n                      Fix display for Parmlib dataset setup\n 0.994      11/14/02  Fix active display\n                      Fix message slmsg013\n 0.993      11/14/02  Bypass table delete if the member copy rc > 0\n 0.992      11/13/02  Continued cleanup for general release\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SOFTPUB": {"ttr": 19723, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 \\x00\\x01\\x006\\x1f\\x01\\x006\\x1f\\x170\\xab\\xc6\\xab\\xc6\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\xab\\xc6\\x00\\x00\\xab\\xc6\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2000-12-26T00:00:00", "modifydate": "2000-12-26T17:30:00", "lines": 43974, "newlines": 43974, "modlines": 0, "user": "SYSLBD"}, "mimetype": "audio/x-mp4a-latm", "datatype": "binary", "extension": ".x-mp4a-latm"}, "SOFTPUB$": {"ttr": 37641, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x01 Q\\x00\\x99\\x18\\x7f\\x01\\x14\\x08/\\t\\x04\\x00\\x18\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.01", "flags": 32, "createdate": "1999-07-06T00:00:00", "modifydate": "2014-03-23T09:04:51", "lines": 24, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "This file contains a user friendly front-end to IBM's BookManager\nRead/MVS.  It is designed to make it easier for your users to use\nthe large number of IBM and other softcopy publications.\n\nTo install:\n\n1.  Unzip this file (you've probably already done this)\n\n2.  Do a binary upload to MVS into a RECFM=FB LRECL=80 dataset\n\n3.  Process the dataset with IEBUPDTE into a PDS with RECFM=FB\n    LRECL=80\n\n4.  Follow the instructions in the PDS.  Some members will\n    require that you issue TSO RECEIVE INDS(dsname(member)) to\n    extract into something that you can use.\n\nIf you find this useful, have questions or comments (or\ncomplaints) please let me know.\n\n  Lionel B. Dyck\n  email:   lbdyck@gmail.com\n  website: www.lbdsoftware.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SPELLC": {"ttr": 37643, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x18\\x01\\x16\\x10\\x8f\\x01 \\x02o\\x08S\\x1b\\xbe\\x14!\\x00\\x00\\xe2\\xd7\\xc5\\xd3\\xd3\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2016-04-17T00:00:00", "modifydate": "2020-01-26T08:53:18", "lines": 7102, "newlines": 5153, "modlines": 0, "user": "SPELLC"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SPELLC$": {"ttr": 40707, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x00\\x16 \\x00\\x01\\x04\\x11\\x7f\\x01\\x040\\x9f#D\\x00\\xc7\\x001\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x00\\xc7\\x00\\x00\\x001\\x00\\x00\\x00\\x00'", "ispf": {"version": "00.22", "flags": 32, "createdate": "2004-04-26T00:00:00", "modifydate": "2004-11-04T23:44:00", "lines": 199, "newlines": 49, "modlines": 0, "user": "SYSLBD"}, "text": "This data set contains an ISPF Edit command to spell check your data.\n\nMembers of this data set:\n\n    $DOC     What you are reading\n    $MORE    Information on where to find words to add to or create a\n             public dictionary. The referenced URL refers to the web\n             site for the Dictionaries for International Ispell which\n             lists sources for words for most languages.\n    EXEC     The REXX Exec Library in TSO Transmit format\n    GERMAN   A German dictionary in TSO Transmit Format\n    PANELS   The ISPF Panels Library in TSO Transmit format\n    RECEIVE  A REXX command to be executed to rebuild members\n             EXEC, RECEIVE, and GERMAN\n    WBAD     A small member that can be used to verify SPELLC where\n             there are invalid words\n    WGOOD    A small member that can be used to verify SPELLC\n             where all words are valid.\n    WORDS    Sample starter dictionary (English)\n             *** please share updates with the author so others\n             *** may benefit from your updated word list\n\n             Alternate dictionaries can be created for other\n             languages but only one installation dictionary is\n             allowed at any point in time.\n\n    The REXX Exec Library Members are:\n    SPELLC   The ISPF Edit command written in REXX to do the Spelling\n             verification\n    SPELLCA  The ISPF Edit command written in REXX to add words to the\n             users personal dictionary (thanks to Russ Nesbitt)\n    SPELLCDF The ISPF Edit command default REXX exec\n    SPELLCPN The REXX Exec that contains the dynamic versions of the\n             ISPF panels and which will load them\n\n    The ISPF Panel Library Members are:\n    SPELLCD  The ISPF Panel to prompt for a user dictionary data set\n    SPELLCH  The ISPF Help Panel\n    SPELLCP  The ISPF PopUp Panel that displays the Spell Checking\n             Progress\n\n==================================================================\nSupport and Discussions.\n\nThe most current version of this package can be found at my web site\nat http://www.lbdsoftware.com\n\n  ****************************************************************\n  * A discussion forum is available at                           *\n  * http://www.lbdsoftware.com/forum for this package and others *\n  * found on the site.                                           *\n  ****************************************************************\n\n==================================================================\nSpecial Thanks to:\n\n               Asher Aremband\n               Hartmut Beckmann\n               John Kalinich\n               Russell Nesbitt\n               Sam Golob\n\nfor their contributions to this package.\n==================================================================\n\nInstallation:\n\n    1. Copy member WORDS into a sequential data set that can be\n       accessed by all TSO/ISPF users. A DCB of RECFM=VB LRECL=84\n       is suggested.\n    2. Edit member SPELLCDF and update as appropriate\n       ** see Local Customization section below\n    3. Copy member SPELLC, SPELLCA, and SPELLCDF into a CLIST or\n       REXX library in your SYSPROC or SYSEXEC concatenation.\n    4. If the panelloc value in SPELLCDF is non-null then Copy members\n       SPELLCD, SPELLCH, and SPELLCP into an ISPF Panel library in your\n       ISPPLIB concatenation, otherwise this step is not required.\n\n==================================================================\n\nLocal Customization\n\nAll local customization should occur within the SPELLCDF REXX Exec,\nhowever if you find something that needs changing elsewhere let me know.\n\nThe variables to set in SPELLCDF are:\n\n    dictdsn      The data set name of the public dictionary\n    email        The e-mail address to display in the first popup\n                 panel as the address to send words to add to the\n                 public dictionary (please set this to your address\n                 and do not leave it as mine)\n    alpha        The alphabet in upper case (may be customized\n                 for NLS support)\n    from         Special characters to be translated to blanks\n                 before each line of words is processed\n    panelloc     Determines if SPELLC will use the ISPF Panels\n                 from an existing ISPPLIB library or if the Panels\n                 should be dynamically loaded into a temporary\n                 library and then LIBDEF'd to access them.\n    other        Characters if found in a word cause the word\n                 to be ignored (and thus assumed to be correctly\n                 spelled)\n    usrmodel     A data set name model to be used to allocate\n                 the users personal dictionary if they have not\n                 already done so. This is used in SPELLCA on its\n                 first use if the personal dictionary variable\n                 is null.\n\n*** Note the nls variables will be supported in the future ***\n==================================================================\n\nUsage SPELLC:\n\nSPELLC is and ISPF Edit macro that is invoked on the ISPF Edit command\nline with or without any other parameters. It will immediately ask the\nuser if they have their own dictionary.\n\nSyntax:   SPELLC <optional-parameters>\n\n      The optional parameters allowed are:\n\n      Starting line number or label\n      Ending line number or label\n\n      If a ending line number or label is specified then a starting\n      line number or label is required.\n\n      An alternate way to specify a range of lines to check is to use a\n      S followed by a number (e.g. S9 to check 9 lines) or a pair of SSs\n      to mark a range.\n\nIf the user has their own dictionary then the words in it will be added to the\ninstallation dictionary for the spelling check. A null data set name is\nacceptable on this panel.\n\nThe spell checking is performed using the following 'rules':\n\n    1. Each line of text in the ISPF Edit (or View) data set is read from\n       top to bottom\n    2. Each line will have the characters :,?()*=;<>|$ translated to blanks\n       see the from variable in SPELLCDF for the complete list\n    3. Each word (a string of characters without an intervening blank)\n       is then converted to upper case for checking\n    4. Words that begin with numbers are not checked\n    5. The word is tested and if found then checking continues\n       with the next word, otherwise\n       a. Words ending with S, 'S, and 'D are checked as if the S, 'S, and\n          'D are not there.\n       b. Words with these other characters 0123456789_-@ are ignored\n    6. Upon completion the invalid words are displayed in sorted sequence\n       at the top of the data set in ISPF message format.\n    7. A message is inserted after each line with an invalid word indicating\n       the misspelling on the prior line\n\n==================================================================\n\nUsage SPELLCA:\n\nSPELLCA is an ISPF Edit command that will add words to the users personal\ndictionary. To use:\n\n    1. Enter SPELLCA on the ISPF Edit Command Line\n    2. Move the cursor to the word to be added\n    3. Press enter\n\nThis assumes that a personal dictionary has been defined. If one has not\nbeen defined then a message indicating that is displayed.\n\n==================================================================\n\nUser Dictionary\n\nThe user dictionary is any sequential data set or member of a partitioned data\nset that conforms to the following format:\n\n    1. records with * in column 1 are comments\n    2. words are separated by blanks or on separate records\n\nIt is suggested that the dictionary be allocated using RECFM=VB LRECL=84\nand that more than one word be on a record.\n\n==================================================================\n\nComments, suggestions, and complaints should be directed to the author\nto:\n\n  Lionel B. Dyck\n  Kaiser Permanente Information Technology\n  25 N. Via Monte Ave.\n  Walnut Creek, CA 94598\n  (925) 926-5332\n  Internet: lionel.b.dyck@kp.org\n\n==================================================================\nWarranty and Guarantee - none.\n==================================================================\nLicense: This code is distributed under the GPL License which may\nbe found at http://www.gnu.org/copyleft/gpl.html\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SPELLC$#": {"ttr": 40711, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x00\\x16 \\x00\\x01\\x04\\x12\\x8f\\x01\\x040\\x9f#D\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x00%\\x00\\x00\\x00%\\x00\\x00\\x00\\x00'", "ispf": {"version": "00.22", "flags": 32, "createdate": "2004-05-07T00:00:00", "modifydate": "2004-11-04T23:44:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYSLBD"}, "text": "You can find more words to fill your dictionary at:\n\n   http://fmg-www.cs.ucla.edu/geoff/ispell-dictionaries.html\n\nBe careful - some of the files have over 300,000 words - many of which\nwill *never* be used by anyone (unless they are doing a crossword puzzle)\nand having them in your public dictionary will just slow the loading of\nthe dictionary down.\n\nThe best way to use these is to upload the words you select from these\ndictionaries to your z/os host into a sequential data set. After upload\nuse ISPF Edit on them and do the following:\n\n1. Exclude All\n2. On the line number enter UC to upper case all words\n3. Flip  (to expose all words)\n4. On the top line enter TF (text flow) so that as many words as\n   possible will be on each line\n5. You now have your dictionary\n\nIf you wish to merge this set of words with a current dictionary do the\nfollowing after upload:\n\n1. Edit the current dictionary of words\n2. On the command line enter COPY data-set-name where the file is that\n   you uploaded\n3. On the command line enter Exclude All\n4. In the row selection field enter UC to upper case all words\n5. On the first line in the selection field enter TF2 (text flow to\n   column 2) which should flow all words so there is only one word per line\n6. On the command line enter SORT\n7. If you have a copy around of the command to remove duplicates use it\n   (http://home.flash.net/~mzelden/mvsfiles/deldups.txt by Mark Zeldon\n    is a good one if you need it)\n8. On the first line in the selection field (numbers) enter TF (text\n   flow) to place as many words as possible on each line\n9. You now have your dictionary\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SPELLCHG": {"ttr": 40713, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00!\\x01\\x04\\x18\\x0f\\x01 \\x02o\\x081\\x01\\n\\x00\\xe9\\x00\\x00\\xe2\\xd7\\xc5\\xd3\\xd3\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-06-28T00:00:00", "modifydate": "2020-01-26T08:31:21", "lines": 266, "newlines": 233, "modlines": 0, "user": "SPELLC"}, "text": "Change History for the SPELLC ISPF Edit Command\n\n   01/26/2020 - 2.3\n              - Add a LOT more words (23,428 words)\n\n   05/12/2017 - 2.3\n              - Add missing Otherwise to Select\n              - Extracted paneld from SPELLCPN into panels dataset\n                for sharing for those that don't want dynamic panels\n\n   05/10/2017 - 2.3\n              - Add / to be translated to blank\n\n   02/17/2017  - 2.2\n             * Added more words (19,568 words)\n\n   04/06/2016  - 2.2\n             * Added more words\n\n   11/03/2004  - 2.2\n             * Exec changes\n               - SPELLC   to validate being called as an ISPF Edit command\n                          and *not* as a TSO command\n\n   08/12/2004  - 2.1\n             * Exec changes\n               - SPELLC   to add missing sub routine sub_novalue\n\n   07/16/2004  - 2.0a\n             * Misc changes\n               - more words\n\n   07/15/2004  - 2.0\n             * Misc changes\n               - more words\n\n   06/18/2004  - 2.0\n             * Exec changes\n               - SPELLC   to add support for dynamic panels where the\n                          panels are dynamically loaded from SPELLCPN\n               - SPELLCA  to support changed return from SPELLCDF\n               - SPELLCDF to add new panelloc variable\n               - SPELLCPN to load all the ISPF panels which are inline in\n                          this exec to a dynamic libdef panel library\n             * Misc changes\n               - $DOC changed to mention the new panelloc option\n               - more words\n\n   05/28/2004  - 1.9\n             * Exec changes\n               - SPELLCDF to add & to the from list of variables\n             * Misc changes\n               - more words\n\n   05/21/2004  - 1.9\n             * Exec changes\n               - SPELLC updated to:\n                 - support using S<n> or SS to define a\n                   range of lines to spell check.\n               - SPELLCDF to add % to the from list of variables\n             * Misc changes\n               - more words\n\n   05/21/2004  - 1.8\n             * Exec changes\n               - SPELLC updated to resolve an issue if the labels on the\n                 command are separated by more than a single blank.\n                 (thx to Asher for spotting this)\n\n   05/17/2004  - 1.7\n             * Exec changes\n               - SPELLC updated to resolve a missing information line if\n                 a misspelled word contained a '\n\n   05/14/2004  - 1.6\n             * Exec changes\n               - SPELLC updated:\n                 - with changes by Asher Aremband.  to place messages\n                   closer to range checked\n                 - flow all to less than column 73\n               - SPELLCA updated to:\n                 - flow all to less than column 73\n               - SPELLCDF updated to:\n                 - flow all to less than column 73\n             * Panel Changes\n               - SPELLCD update to clean up panel attributes\n             * Misc changes\n               - more words\n\n   05/11/2004  - 1.5\n             * Exec changes\n               - RECEIVE to receive the member GERMAN into\n                 hlq.NEW.SPELLC.GERMAN.WORDS\n             * Misc changes\n               GERMAN - a starter German dictionary from Hartmut Beckmann\n                 in TSO Transmit format (to preserve the national language\n                 characters)\n\n   05/11/2004  - 1.5\n             * Exec changes\n               - Change SPELLC to\n                 - clean up the progress popup display routine and to\n                   display every 'n' records based on file size thanks\n                   to Asher Aremband.\n                 - Clean up nls support by Hartmut\n                 - Clean up code and comments\n                 - Thanks to Asher Aremband for a routine to handle\n                   words with a / in them\n                 - New option on SPELLCD panel to ignore words in all caps\n               - Change SPELLCA to\n                 - better test for the cursor in an invalid location\n                 - translate out from the selected word the from and\n                   nls_from characters\n                 - improve messages\n                 - don't add the word to a comment line\n               - Change to SPELLCDF for better NLS support by Hartmut Beckmann\n                 - add vertical bar to the from translation table to blanks\n             * Misc changes\n               - Added member $MORE to document where to get words for a\n                 public dictionary for many languages as well as additional\n                 words for english.\n               - Updated RECEIVE to browse the $more member after the\n                 receive has completed\n               - Updated WORDS with more words and removed a few\n               - Updated member WBAD so that it can be used to verify\n                 and demonstrate spelling verification with the IGNORE\n                 Caps option enabled (Yes) and disabled (No)\n             * Panel changes\n               - Changed panel SPELLCD to:\n                 - redesign so no longer a popup panel\n                 - add new option to ignore (or not) words in all caps\n               - Changed panel SPELLCP to:\n                 - make the display of the progress panel default to NO.\n                 - to display the count of words from the public dictionary\n\n   05/05/2004  - 1.4\n             * Exec changes\n               - Change SPELLC to correct a problem introduced in 1.3\n                 of skipping records during the spell check is the\n                 progress panel is displayed.\n\n   05/05/2004  - 1.3\n             * Misc changes\n               - Enhanced the $DOC member of the distribution data set\n               - Updated WORDS with more words\n               - Update the $DOC to remind folks of the discussion forums\n                 at http://www.lbdsoftware.com/forum\n             * Exec changes\n               - Change SPELLCDF Exec to\n                 - support a new variable to build a model data set\n                   name for the user dictionary\n                 - support nls variables for future use\n               - Change SPELLCA Exec to\n                 - change test for cursor position to <1 instead of <2\n                 - add new words on existing lines if line length < 80\n                 - improve the message if there is no user dictionary\n                   defined.\n                 - if a user dictionary model dsn is passed from SPELLCDF\n                   then allocate it if there is no user dictionary\n                 - test to insure we don't add the same word multiple times\n                 - if user dictionary dsn there but the data set has been\n                   deleted then reallocate it\n               - Updated SPELLC to\n                 - change msgline to infoline for messages as msgline is\n                   limited to 72 chars\n                 - do a shift left max to start with\n                 - add elapsed time routine from John Kalinich\n                 - support popup option selection on the SPELLCD panel\n                 - change popup progress to display every fifth record\n                   to reduce overhead\n                 - remove the message line with the data set being checked\n                 - accept and ignore the user dictionary model passed from\n                   SPELLCDF\n             * Panel changes\n               - Changed panel SPELLCP to support elapsed time\n                 and to ask the user if they want the progress popup\n\n   05/03/2004  - 1.2\n               - Change SPELLC Exec to move alpha, from and other\n                 variables to SPELLCDF\n               - Update SPELLCDF to set from and other\n               - Updates to SPELLCA to\n                 - initialize the starting position of the word to 1\n                 - remove special characters (use other variable) from\n                   the word before adding\n               - Updated WORDS with more words\n\n   05/01/2004  - 1.1\n               - Change SPELLC Exec display message of invalid words\n                 to a message line of *'s under the misspelled word\n                 and split the data set name into a separate line in\n                 the first message.\n               - exclude all lines with valid words\n               - Updated WORDS with more words\n\n   04/30/2004  - 1.0\n               - Designated this release 1.0\n               - Repackaged with EXEC and PANELS members in TSO Transmit\n                 format and added the RECEIVE member to reconstitute them.\n\n   04/30/2004  - 0.6\n               - Updated WORDS with more words\n               - Updated SPELLC Exec to move test for 1st char alpha\n                 after quotes have been removed\n               - Updated panels SPELLCD, SPELLCH, SPELLCP with minor\n                 cosmetic change\n\n   04/30/2004  - 0.5\n               - Updated WORDS with more words\n               - Added new SPELLCA command to add words to the users\n                 personal dictionary (thanks to Russ Nesbitt)\n               - Updated ISPF Panel SPELLCP to change text\n               - Updated ISPF Panel SPELLCD\n                 - based on ispf version use ver with dsnameq\n                   (to add trailing quote)\n                   ** thanks to Hartmut Beckmann **\n                 - change the range fields to pad _ and justify right\n               - Add ISPF Help Panel SPELLCH\n               - Updated SPELLC Exec to correct the number for passed\n                 labels\n\n   04/29/2004  - 0.4\n               - Updated WORDS with more words (9,925)\n               - Updated SPELLCP panel to clarify record count\n                 and to display the words in the public and the\n                 private dictionary\n               - Updated SPELLCD panel to remove typo\n               - Added SPELLCDF exec\n               - Updated SPELLC to:\n                 - moved defaults to new SPELLCDF exec\n                 - translate out more special chars\n                 - allow labels or line numbers for starting and ending\n                   range to check\n                 - capture the word counts for public and private\n                   dictionaries\n                 - Support a a start and stop line label\n                 - Increase to 6 the words on the invalid summary\n                   line\n                 - Correction to catch words like \"this is a txxt\".\n\n   04/28/2004  - 0.3\n               - Updated SPELLCD panel to clean up colors\n                 and to add a command entry field\n               - Updated SPELLCP panel to tell more\n               - Updated SPELLC exec to:\n                 - Correct message is all spells ok\n                 - Remove special chars from end of word\n               - Updated WORDS with more words (7,834)\n\n   04/27/2004  - 0.2\n               - Updated word list to over 8000 words\n               - Change SPELLC exec to:\n                 - variable for e-mail to send word updates\n                   (should be your address and not mine as this\n                    is for your users - you can send them to me)\n                 - place more than 1 word on the summary lines of\n                   invalid words\n                 - remove translation of . - _ from words and ignore\n                   words with these in them\n                 - allow user to cancel spell check at the prompt for\n                   user dictionary\n                 - save user dictionary data set name in ISPF Profile\n               - SPELLCD panel update to use variable for e-mail\n\n   04/26/2004  - 0.1\n                 Creation of this tool\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TERSE": {"ttr": 40961, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 \\x00\\x01\\x02\\x11_\\x01\\x02\\x11_\\x01V\\x02\\xcb\\x02\\xcb\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x02\\xcb\\x00\\x00\\x02\\xcb\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2002-04-25T00:00:00", "modifydate": "2002-04-25T01:56:00", "lines": 715, "newlines": 715, "modlines": 0, "user": "SYSLBD"}, "mimetype": "audio/x-mp4a-latm", "datatype": "binary", "extension": ".x-mp4a-latm"}, "TMAILQRY": {"ttr": 41220, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 \\x00\\x01\\x00\\to\\x01\\x00\\to\\x164\\x01\\x8f\\x01\\x8f\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x01\\x8f\\x00\\x00\\x01\\x8f\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2000-04-05T00:00:00", "modifydate": "2000-04-05T16:34:00", "lines": 399, "newlines": 399, "modlines": 0, "user": "SYSLBD"}, "mimetype": "audio/x-mp4a-latm", "datatype": "binary", "extension": ".x-mp4a-latm"}, "TRYIT": {"ttr": 41227, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x02\\x008\\x01\\x05\\x06\\x7f\\x01 \\x19_\\t\\x11\\x05\\xac\\x04z\\x00\\x00\\xe3\\xd9\\xe8\\xc9\\xe3@@@@@'", "ispf": {"version": "03.02", "flags": 0, "createdate": "2005-03-08T00:00:00", "modifydate": "2020-07-13T09:11:38", "lines": 1452, "newlines": 1146, "modlines": 0, "user": "TRYIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "TRYIT$": {"ttr": 41988, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x02\\x02 \\x02\\x01\\x04\\x13_\\x01\\x05\\x06o\\x19\\x08\\x00v\\x00i\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x00v\\x00\\x00\\x00i\\x00\\x00\\x00\\x00'", "ispf": {"version": "02.02", "flags": 32, "createdate": "2004-05-14T00:00:00", "modifydate": "2005-03-07T19:08:02", "lines": 118, "newlines": 105, "modlines": 0, "user": "SYSLBD"}, "text": "Users Guide for TRYIT\nby Lionel B. Dyck\n\nRevised March 7, 2005\n\n===== Table of Contents\n\n      Source and License\n      Introduction\n      Usage\n\n===== Source and License\n\nThe full source for TRYIT is distributed with the package, which may\nbe found at http://www.lbdsoftware.com\n\nLicense: This code is distributed under the GPL License which may\nbe found at http://www.gnu.org/copyleft/gpl.html\n\n===== Introduction\n\nTRYIT is an ISPF Edit command that is designed to be used to test an\nAssembler program, CLIST, REXX Exec, JCL, ISPF Panel or ISPF Skeleton\nwhile it is being edited. The way this works is such that the JCL,\nCLIST, REXX Exec, ISPF Panel, or ISPF Skeleton does *not* have to be in\na library in the existing SYSPROC, SYSEXEC, ISPPLIB, or ISPSLIB\nallocations thus allowing the development and testing in other, less\ncritical, data sets.\n\nIf a JCL Syntax checking product is available then TRYIT can be used\nto invoke it - this is assuming the product can be invoked as an ISPF\nEdit Macro (e.g. CA-JCLCheck and JCLPrep).\n\nFor Assembler programs the active member will be assembled and optionally\nlinkedited into a specified target library. After entering TRYIT the user\nwill be prompted to enter the assembly and linkedit information if the\nmember is determined to be an assembler program.\n\nFor CLIST and REXX Exec members the active data set in which the member\nresides will be allocated using the TSO ALTLIB facility and then the\nmember executed, along with any passed optional parameters.\n\nFor ISPF Panels and ISPF Skeletons the active data set in which the\nmember resides will be allocated using the ISPF LIBDEF facility then\nthen the panel Displayed or Selected based upon the parameters provided\nto TRYIT. If there are any errors in the panel or skeleton an ISPF\nmessage will be displayed and the error may then be corrected using ISPF\nEdit and TRYIT used once again to verify the panel or skeleton - all\nwithout the need to split the screen and invoke ISPF Test.\n\nNote there are limitations to the Skeleton testing as variables and\nimbed tables may not be available.\n\nBecause of the use of ALTLIB or LIBDEF the member being tested will be\nable to find subroutines or other ISPF Panels providing they reside\nwithin the data set being edited thus allowing an entire package to be\ndeveloped, updated, and/or tested, in less critical libraries.\n\nThe type of member being edited is dynamically determined with a default\nof REXX Exec assumed if all the tests fail. The tests include:\n\n        1) The data set suffix\n           - Assembler: ASM ASSEM\n           - CLIST: CLIST, SYSPROC, CMDPROC\n           - REXX:  EXEC, REXX, SYSEXEC\n           - Panel: PANEL, PANELS, ISPPLIB\n           - Skels: SKEL, SKELS, ISPSLIB\n        2) CLIST: Look for PROC followed by a number on record 1\n        3) REXX: Look for the word REXX in record 1\n        4) Panel: Look for any of these in record 1\n           )ATTR )PANEL )CCSID )PROC )BODY )INIT )REINIT ..PREP:\n        5) JCL: First record starts with //\n\nThis provides a very easy method for iterative testing and updating of\nthe member until the member works as desired.\n\n===== Usage\n\nUse TRYIT from any ISPF Edit command line while editing a CLIST, REXX Exec, or\nISPF Panel. The syntax is:\n\n    TRYIT optional-parms\n\nThe optional-parms are:\n\n     For CLISTs and REXX Execs any parameters that the member being edited\n     would need to have passed to it.\n\n     For Assembler there are not supported options at this time.\n\n     For ISPF Panels one, or more, of the following:\n\n         APPL followed by a 1 to 4 character application id to be\n             used when SEL is specified to select the panel\n         POP will cause the panel to be displayed as a popup\n         SEL will Select the panel instead of just Displaying it\n         TUT will display the panel as an ISPF Tutorial\n             (default is to just display the panel)\n\n     For example:\n\n          EDIT       hlq.test.exec(sample)\n          Command ===> tryit opt1 opt2\n\nUpon completion of the processing of the member a message is displayed\nin the upper right with a return code or short message with a long\nmessage, available by pressing PF1 (Help), with more information.  For\nCLISTs and REXX Execs the return code is whatever the CLIST or REXX Exec\nreturn while for ISPF Panels the message is either a zero return code if\nthere are no problems or the short and long error messages generated by\nthe ISPF Display, Selection, or Tutorial services.\n\nFor Assembler programs upon completion of the assembly the assembly\nlisting will be displayed using ISPF browse. If a load library is\nspecified under the link edit options then after the linkedit the\nlinkedit listing will also be displayed using ISPF Browse.  The\nlinkedit will only occur if the assembly completes with a return code\nless than 8.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TRYITCHG": {"ttr": 41991, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x02\\x02  \\x01\\x04\\x13_\\x01\\x05\\x08\\x0f\\tY\\x008\\x00\\x14\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x008\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x00'", "ispf": {"version": "02.02", "flags": 32, "createdate": "2004-05-14T00:00:00", "modifydate": "2005-03-21T09:59:20", "lines": 56, "newlines": 20, "modlines": 0, "user": "SYSLBD"}, "text": "Change history for TRYIT:\n\n 2.2  03/08/2005 - Add check that TRYIT is being invoked as a\n                   ISPF Macro (thanks to Hartmut)\n 2.1  03/07/2005 - Support for ISPF SKELS (from Hartmut)\n 2.0  07/12/2004 - Make ASM Panel scrollable (from Hartmut)\n                 - For ASM make sure active library is last when\n                   not explicit\n 1.9  07/08/2004 - Change so active library in SYSLIB is now set\n                   by the user or by default is the last in the\n                   concat for ASM\n                 - If the first maclib is null then the active\n                   data set will be defined for it for ASM\n                 - Correct to support additional assembler parms\n 1.8  07/08/2004 - Message clean up for JCL\n 1.7  07/07/2004 - Add JCL Syntax Checking option\n                   ** requires a JCL Syntax checking product\n 1.6  06/30/2004 - Updated ISPF Panel (thx Hartmut)\n                 - Add 4 site customization maclibs (thx Hartmut)\n                 - Add site specific syslib for ispf and gddm\n                   (thx Hartmut)\n 1.5  06/24/2004 - New ISPF Panel for TRYITASM thx to hartmut with\n                   new Term option (Term or Noterm)\n                 - New Panel option to Retain List and Obj data sets\n                 - All Panels will now be copied into a temp library to\n                   avoid the ISPF bldl memory\n                 - *Remove* external panel - use inline only\n 1.4  06/14/2004 - Move the ISPF Panel inline (thanks to code from\n                   Hartmut Beckmann\n                 - Add % to clist/rexx calls - thx hartmutt\n 1.3  05/21/2004 - Improve detection of REXX Exec by looking for /*\n                   prior to the word REXX in line 1\n 1.2  05/19/2004 - Correct link edit parms\n 1.1  05/18/2004 - Enhanced\n                 - Support Assembler programs (assemble and link)\n                   - include new ispf panel (tryitasm)\n                 - Support config option to allow copy changed member\n                   to a temp member\n 1.0  05/17/2004 - Repackaged with distribution pds\n                 - included users guide\n                 - correct test for prep panels\n                 - Add Newappl and Passlib if SEL for panels\n                 - New APPL keyword to TRYIT for ISPF Sel testing\n 0.5  05/14/2004 - Correct setmsg for panels\n                 - Correct source changed msg\n 0.4  05/14/2004 - Update to:\n                 - improve test for ISPF Panels\n                 - add SEL option for ISPF panels to Select\n                 - add TUT option for ISPF tutorial panels\n 0.3  05/14/2004 - Update by Kenneth Tomiak to find PROC # on first\n                   line, )PANEL, and moved check for changed code up.\n      05/13/04 - Clean up messages\n 0.2  05/13/04 - Update to msgs by Asher Aremband - Support for CLIST,\n                 EXEC, and ISPF Panel members thanks to a suggestion by\n                 Hartmut Beckmann.\n 0.1  05/12/04 - Creation\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOEMAIL": {"ttr": 41993, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 \\x00\\x01\\x00\\x10O\\x01\\x00\\x10O\"(\\x1f\\xb8\\x1f\\xb8\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@\\x00\\x00\\x1f\\xb8\\x00\\x00\\x1f\\xb8\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2000-04-13T00:00:00", "modifydate": "2000-04-13T22:28:00", "lines": 8120, "newlines": 8120, "modlines": 0, "user": "SYSLBD"}, "mimetype": "audio/x-mp4a-latm", "datatype": "binary", "extension": ".x-mp4a-latm"}, "TSOPROF": {"ttr": 45318, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x02 $\\x01\\x18\\x04\\x0f\\x01\\x18\\x04\\x0f\\x101\\x02\\x1d\\x02*\\x00\\x00\\xd3\\xc2\\xc4@@@@@\\x00\\x00\\x02\\x1d\\x00\\x00\\x02*\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.02", "flags": 32, "createdate": "2018-02-09T00:00:00", "modifydate": "2018-02-09T10:31:24", "lines": 541, "newlines": 554, "modlines": 0, "user": "LBD"}, "text": "/* ---------------------  rexx procedure  ---------------------- *\n * Name:      TSOPROF                                            *\n *                                                               *\n * Function:  Process the TSO Profile command via an ISPF        *\n *            PANEL.                                             *\n *                                                               *\n * Syntax:    Either:                                            *\n *            %TSOPROF                                           *\n *        or                                                     *\n *            TSOPROF                                            *\n *                                                               *\n * ISPF Requirements:                                            *\n *                                                               *\n *      Panels:  TSOPROF                                         *\n *                                                               *\n *      ISP Command Table Entry:                                 *\n *          TSOPROF   4  SELECT CMD(%TSOPROF)                    *\n *                    TSO/E Profile review and update dialog     *\n *                                                               *\n * Author:    Lionel B. Dyck                                     *\n *                                                               *\n * History:                                                      *\n *            02/09/18 - Put all panels inline and add a tutorial*\n *                       panel                                   *\n *                     - update for 8 char userids               *\n *            08/11/16 - Updated to add VARSTORAGE               *\n *            01/10/91 - Created by Lionel Dyck                  *\n *                                                               *\n * Notes:  1)  The non-VTAM PROFILE options of LINE/NOLINE       *\n *             and CHAR/NOCHAR are not supported.                *\n *                                                               *\n *         2)  The RECOVER/NORECOVER options are not supported   *\n *             at Rockwell and thus are not supported by this    *\n *             dialog.                                           *\n * ------------------------------------------------------------- */\n\n  x = outtrap(\"prof.\",'*')\n  \"PROFILE\"\n  x = outtrap(\"off\")\n\ndisp:\n  if wordpos(\"PROMPT\",prof.1) > 0\n  then prompt = \"YES\"\n  else prompt = \"NO\"\n\n  if wordpos(\"PAUSE\",prof.1) > 0\n  then pause = \"YES\"\n  else pause = \"NO\"\n\n  if wordpos(\"INTERCOM\",prof.1) > 0\n  then intercom = \"YES\"\n  else intercom = \"NO\"\n\n  if wordpos(\"MSGID\",prof.1) > 0\n  then msgid = \"YES\"\n  else msgid = \"NO\"\n\n  if wordpos(\"MODE\",prof.1) > 0\n  then mode = \"YES\"\n  else mode = \"NO\"\n\n  if wordpos(\"WTPMSG\",prof.1) > 0\n  then wtpmsg = \"YES\"\n  else wtpmsg = \"NO\"\n\n  if pos('VARSTORAGE(',prof.1) > 0 then\n  parse value prof.1 with . 'VARSTORAGE('varstor')' .\n\n/* ------------------------------------ *\n | Change varstor for the panel display |\n * ------------------------------------ */\n  if varstor = 'HIGH'\n  then varstor = 'YES'\n  else varstor = 'NO'\n\n/* ---------------------------------------------------- *\n *   Disabled because we do not use recover here        *\n * ---------------------------------------------------- *\nif wordpos(\"RECOVER\",prof.1) > 0 then recover = \"YES\"\n                                    else recover = \"NO\"\n * ---------------------------------------------------- */\n\n  if wordpos(\"NOPREFIX\",prof.1) > 0 then prefix = \"\"\n  else parse value prof.1 with . \"PREFIX(\" prefix \")\" .\n\n/* ---------------------- *\n | Load the ISPF Panel(s) |\n * ---------------------- */\n  load_info = loadispf()\n\n  Address ISPEXEC \"DISPLAY PANEL(TSOPROF)\"\n  drc = rc\n  if drc > 0 then do\n    zedsmsg = \"\"\n    zedlmsg = \"TSO Profile Processing terminated\"\n    signal do_message\n  end\n\n  if prompt   = \"YES\"\n  then prompt = \"PROMPT\"\n  else prompt = \"NOPROMPT\"\n\n  if pause    = \"YES\"\n  then pause = \"PAUSE\"\n  else pause = \"NOPAUSE\"\n\n  if intercom = \"YES\"\n  then intercom = \"INTERCOM\"\n  else intercom = \"NOINTERCOM\"\n\n  if msgid    = \"YES\"\n  then msgid = \"MSGID\"\n  else msgid = \"NOMSGID\"\n\n  if mode     = \"YES\"\n  then mode = \"MODE\"\n  else mode = \"NOMODE\"\n\n  if varstor  = 'YES'\n  then varstor = 'VARSTORAGE(HIGH)'\n  else varstor = 'VARSTORAGE(LOW)'\n\n  if wtpmsg   = \"YES\" then wtpmsg = \"WTPMSG\"\n  else wtpmsg = \"NOWTPMSG\"\n\n  recover = \"\"\n/* ---------------------------------------------------- *\n *   Disabled because we do not use recover here        *\n * ---------------------------------------------------- *\n if recover = \"YES\" then recover = \"RECOVER\"\n                    else recover = \"NORECOVER\"\n * ---------------------------------------------------- */\n\n  if prefix = \"\"\n  then prefix = \"NOPREFIX\"\n  else prefix = \"PREFIX(\"prefix\")\"\n\n  \"PROFILE\" prompt pause intercom msgid mode wtpmsg ,\n    recover prefix varstor\n\n  zedsmsg = \"\"\n  zedlmsg = \"Profile:\" prompt pause intercom msgid mode wtpmsg,\n    recover prefix varstor\n\n/* ------------------------------- *\n | Issue ISPF Message about action |\n | Free the ISPF Panel Library     |\n | Exit                            |\n * ------------------------------- */\ndo_message:\n  Address ISPEXEC\n  \"SETMSG MSG(ISRZ000)\"\n  do until length(load_info) = 0\n    parse value load_info with dd libd load_info\n    \"libdef\" libd\n    address tso \"free f(\"dd\")\"\n  end\n  Exit 0\n\n/* --------------------  rexx procedure  -------------------- *\n * Name:      LoadISPF                                        *\n *                                                            *\n * Function:  Load ISPF elements that are inline in the       *\n *            REXX source code.                               *\n *                                                            *\n * Syntax:    rc = loadispf()                                 *\n *                                                            *\n *            The inline ISPF resources are limited to        *\n *            ISPF Messages, Panels, and Skeletons,           *\n *                 CLISTs and EXECs are also supported.       *\n *                                                            *\n *            The inline resources must start in column 1     *\n *            and use the following syntax:                   *\n *                                                            *\n *            >START    used to indicate the start of the     *\n *                      inline data                           *\n *                                                            *\n *            >END    - used to indicate the end of the       *\n *                      inline data                           *\n *                                                            *\n *            Each resource begins with a type record:        *\n *            >type name                                      *\n *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *\n *                     name is the name of the element        *\n *                                                            *\n * Sample usage:                                              *\n *          -* rexx *-                                        *\n *          load_info = loadispf()                            *\n *          ... magic code happens here (your code) ...       *\n *          Address ISPEXEC                                   *\n *          do until length(load_info) = 0                    *\n *             parse value load_info with dd libd load_info   *\n *             if left(libd,6) = \"ALTLIB\" then do             *\n *                if libd = \"ALTLIBC\" then lib = \"CLIST\"      *\n *                                    else lib = \"EXEC\"       *\n *                Address TSO,                                *\n *                  \"Altlib Deact Application(\"lib\")\"         *\n *                end                                         *\n *             else \"libdef\" libd                             *\n *             address tso \"free f(\"dd\")\"                     *\n *             end                                            *\n *          exit                                              *\n *          >Start inline elements                            *\n *          >Panel panel1                                     *\n *          ...                                               *\n *          >Msg msg1                                         *\n *          ...                                               *\n *          >End of inline elements                           *\n *                                                            *\n * Returns:   the list of ddnames allocated for use along     *\n *            with the libdef's performed or altlib           *\n *                                                            *\n *            format is ddname libdef ddname libdef ...       *\n *                   libdef may be altlibc or altlibe         *\n *                   for altlib clist or altlib exec          *\n *                                                            *\n * Notes:     Entire routine must be included with REXX       *\n *            exec - inline with the code.                    *\n *                                                            *\n * Comments:  The entire rexx program is processed from the   *\n *            last record to the first to find the >START     *\n *            record at which point all records from that     *\n *            point on are processed until the >END           *\n *            statement or the end of the program is found.   *\n *                                                            *\n *            It is *strongly* suggested that the inline      *\n *            elements be at the very end of your code so     *\n *            that the search for them is faster.             *\n *                                                            *\n *            Inline ISPTLIB or ISPLLIB were not supported    *\n *            because the values for these would have to be   *\n *            in hex.                                         *\n *                                                            *\n * Author:    Lionel B. Dyck                                  *\n *                                                            *\n * History:                                                   *\n *            08/29/17 - Fixup static values that were vars   *\n *            05/31/17 - Change default directory count       *\n *            12/09/16 - update for add_it routine            *\n *            05/10/16 - correction for clist and exec        *\n *            04/19/16 - bug correction                       *\n *            06/04/04 - Enhancements for speed               *\n *            08/05/02 - Creation                             *\n *                                                            *\n * ---------------------------------------------------------- *\n * Disclaimer: There is no warranty, either explicit or       *\n * implied with this code. Use it at your own risk as there   *\n * is no recourse from either the author or his employeer.    *\n * ---------------------------------------------------------- */\nLoadISPF: Procedure\n\n  parse value \"\" with null kmsg kpanel kskel first returns ,\n    kclist kexec\n/* ------------------------------------------------------- *\n * Find the InLine ISPF Elements and load them into a stem *\n * variable.                                               *\n *                                                         *\n * Elements keyword syntax:                                *\n * >START - start of inline data                           *\n * >CLIST name                                             *\n * >EXEC name                                              *\n * >MSG name                                               *\n * >PANEL name                                             *\n * >SKEL name                                              *\n * >END   - end of all inline data (optional if last)      *\n * ------------------------------------------------------- */\n  last_line = sourceline()\n  do i = last_line to 1 by -1\n    line = sourceline(i)\n    if translate(left(line,6)) = \">START \" then leave\n  end\n  rec = 0\n/* --------------------------------------------------- *\n * Flag types of ISPF resources by testing each record *\n * then add each record to the data. stem variable.    *\n * --------------------------------------------------- */\n  do j = i+1 to last_line\n    line = sourceline(j)\n    if translate(left(line,5)) = \">END \"   then leave\n    if translate(left(line,7)) = \">CLIST \" then kclist = 1\n    if translate(left(line,6)) = \">EXEC \"  then kexec  = 1\n    if translate(left(line,5)) = \">MSG \"   then kmsg   = 1\n    if translate(left(line,7)) = \">PANEL \" then kpanel = 1\n    if translate(left(line,6)) = \">SKEL \"  then kskel  = 1\n    rec  = rec + 1\n    data.rec = line\n  end\n\n/* ----------------------------------------------------- *\n * Now create the Library and Load the Member(s)         *\n * ----------------------------------------------------- */\n  Address ISPExec\n/* ----------------------------- *\n * Assign dynamic random ddnames *\n * ----------------------------- */\n  clistdd = \"lc\"random(999)\n  execdd  = \"le\"random(999)\n  msgdd   = \"lm\"random(999)\n  paneldd = \"lp\"random(999)\n  skeldd  = \"ls\"random(999)\n\n/* ---------------------------------------- *\n *  LmInit and LmOpen each resource library *\n * ---------------------------------------- */\n  if kclist <> null then do\n    call alloc_dd clistdd\n    \"Lminit dataid(clist) ddname(\"clistdd\")\"\n    \"LmOpen dataid(\"clist\") Option(Output)\"\n    returns = strip(returns clistdd 'ALTLIBC')\n  end\n  if kexec <> null then do\n    call alloc_dd execdd\n    \"Lminit dataid(exec) ddname(\"execdd\")\"\n    \"LmOpen dataid(\"exec\") Option(Output)\"\n    returns = strip(returns execdd 'ALTLIBE')\n  end\n  if kmsg <> null then do\n    call alloc_dd msgdd\n    \"Lminit dataid(msg) ddname(\"msgdd\")\"\n    \"LmOpen dataid(\"msg\") Option(Output)\"\n    returns = strip(returns msgdd 'ISPMLIB')\n  end\n  if kpanel <> null then do\n    call alloc_dd paneldd\n    \"Lminit dataid(panel) ddname(\"paneldd\")\"\n    \"LmOpen dataid(\"panel\") Option(Output)\"\n    returns = strip(returns paneldd 'ISPPLIB')\n  end\n  if kskel <> null then do\n    call alloc_dd skeldd\n    \"Lminit dataid(skel) ddname(\"skeldd\")\"\n    \"LmOpen dataid(\"skel\") Option(Output)\"\n    returns = strip(returns skeldd 'ISPSLIB')\n  end\n\n/* ----------------------------------------------- *\n * Process all records in the data. stem variable. *\n * ----------------------------------------------- */\n  do i = 1 to rec\n    record = data.i\n    recordu = translate(record)\n    if left(recordu,5) = \">END \" then leave\n    if left(recordu,7) = \">CLIST \" then do\n      if first = 1 then call add_it\n      type = \"Clist\"\n      first = 1\n      parse value record with x name\n      iterate\n    end\n    if left(recordu,6) = \">EXEC \" then do\n      if first = 1 then call add_it\n      type = \"Exec\"\n      first = 1\n      parse value record with x name\n      iterate\n    end\n    if left(recordu,5) = \">MSG \" then do\n      if first = 1 then call add_it\n      type = \"Msg\"\n      first = 1\n      parse value record with x name\n      iterate\n    end\n    if left(recordu,7) = \">PANEL \" then do\n      if first = 1 then call add_it\n      type = \"Panel\"\n      first = 1\n      parse value record with x name\n      iterate\n    end\n    if left(recordu,6) = \">SKEL \" then do\n      if first = 1 then call add_it\n      type = \"Skel\"\n      first = 1\n      parse value record with x name\n      iterate\n    end\n   /* --------------------------------------------*\n    * Put the record into the appropriate library *\n    * based on the record type.                   *\n    * ------------------------------------------- */\n    Select\n      When type = \"Clist\" then\n      \"LmPut dataid(\"clist\") MODE(INVAR)\" ,\n        \"DataLoc(record) DataLen(255)\"\n      When type = \"Exec\" then\n      \"LmPut dataid(\"exec\") MODE(INVAR)\" ,\n        \"DataLoc(record) DataLen(255)\"\n      When type = \"Msg\" then\n      \"LmPut dataid(\"msg\") MODE(INVAR)\" ,\n        \"DataLoc(record) DataLen(80)\"\n      When type = \"Panel\" then\n      \"LmPut dataid(\"panel\") MODE(INVAR)\" ,\n        \"DataLoc(record) DataLen(80)\"\n      When type = \"Skel\" then\n      \"LmPut dataid(\"skel\") MODE(INVAR)\" ,\n        \"DataLoc(record) DataLen(80)\"\n      Otherwise nop\n    end\n  end\n  if type <> null then call add_it\n/* ---------------------------------------------------- *\n * Processing completed - now lmfree the allocation and *\n * Libdef the library.                                  *\n * ---------------------------------------------------- */\n  if kclist <> null then do\n    Address TSO,\n      \"Altlib Act Application(Clist) File(\"clistdd\")\"\n    \"LmFree dataid(\"clist\")\"\n  end\n  if kexec <> null then do\n    Address TSO,\n      \"Altlib Act Application(Exec) File(\"execdd\")\"\n    \"LmFree dataid(\"exec\")\"\n  end\n  if kmsg <> null then do\n    \"LmFree dataid(\"msg\")\"\n    \"Libdef ISPMlib Library ID(\"msgdd\") Stack\"\n  end\n  if kpanel <> null then do\n    \"Libdef ISPPlib Library ID(\"paneldd\") Stack\"\n    \"LmFree dataid(\"panel\")\"\n  end\n  if kskel <> null then do\n    \"Libdef ISPSlib Library ID(\"skeldd\") Stack\"\n    \"LmFree dataid(\"skel\")\"\n  end\n  return returns\n\n/* --------------------------- *\n * Add the Member using LmmAdd *\n * based upon type of resource *\n * --------------------------- */\nAdd_It:\n  Select\n    When type = \"Clist\" then\n    \"LmmAdd dataid(\"clist\") Member(\"name\")\"\n    When type = \"Exec\" then\n    \"LmmAdd dataid(\"exec\") Member(\"name\")\"\n    When type = \"Msg\" then\n    \"LmmAdd dataid(\"msg\") Member(\"name\")\"\n    When type = \"Panel\" then\n    \"LmmAdd dataid(\"panel\") Member(\"name\")\"\n    When type = \"Skel\" then\n    \"LmmAdd dataid(\"skel\") Member(\"name\")\"\n    Otherwise nop\n  end\n  type = null\n  return\n\n/* ------------------------------ *\n * ALlocate the temp ispf library *\n * ------------------------------ */\nAlloc_DD:\n  arg dd\n  Address TSO\n  if pos(left(dd,2),\"lc le\") > 0 then\n  \"Alloc f(\"dd\") unit(sysda) spa(5,5) dir(5)\",\n    \"recfm(v b) lrecl(255) blksize(32760)\"\n  else\n  \"Alloc f(\"dd\") unit(sysda) spa(5,5) dir(5)\",\n    \"recfm(f b) lrecl(80) blksize(23440)\"\n  return\n>Start\n>Panel TSOPROF\n)ATTR DEFAULT(%+_)\n%   TYPE(TEXT) INTENS(HIGH)\n_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)\n# TYPE(TEXT) INTENS(HIGH) COLOR(yellow)\n+ TYPE(TEXT) INTENS(LOW) COLOR(turq)\n@ TYPE(OUTPUT) INTENS(HIGH) COLOR(yellow)\n)BODYExpand(\\\\)\n#-\\-\\ (TSO Profile Review/Update) \\-\\-\n%Command ===>_ZCMD\n%\n%    Specify#YES%or#NO%for the following options:\n%\n    _Z   +    #PROMPT     +for additional information if required\n    _Z   +    #INTERCOM   +messages from other terminal users\n    _Z   +    #PAUSE      +prompt via ? for second level messages\n    _Z   +    #MSGID      +display message identifiers\n    _Z   +    #MODE       +display mode messages on the terminal\n    _Z   +    #VARSTORAGE +location for REXX variables (Yes=High No=Low)\n    _Z   +    #WTPMSG     +display write-to-programmer messages\n%\n%    Verify the your prefix below as this is used for all unqualified data set\n%    allocations.  This is normally the same as your TSO userid (@ZUSER   %)\n%\n    _Z        #PREFIX  +prefix for unqualified data sets or null\n+\n+\n%    Make any desired changes and press#ENTER%to effect the changes.\n%    Press#END%to cancel changes.\n)INIT\n  .CURSOR = ZCMD\n  .zvars = '(prompt intercom pause msgid mode varstor wtpmsg prefix)'\n  .help = tsoprofh\n)PROC\n   &PROMPT = TRANS(TRUNC(&PROMPT,1) Y,YES N,NO)\n   VER (&PROMPT,LIST,YES,NO)\n   &INTERCOM = TRANS(TRUNC(&INTERCOM,1) Y,YES N,NO)\n   VER (&INTERCOM,LIST,YES,NO)\n   &PAUSE    = TRANS(TRUNC(&PAUSE,1) Y,YES N,NO)\n   VER (&PAUSE,LIST,YES,NO)\n   &MSGID    = TRANS(TRUNC(&MSGID,1) Y,YES N,NO)\n   VER (&MSGID,LIST,YES,NO)\n   &MODE     = TRANS(TRUNC(&MODE,1) Y,YES N,NO)\n   VER (&MODE,LIST,YES,NO)\n   &VARSTOR  = TRANS(TRUNC(&VARSTOR,1) Y,YES N,NO)\n   VER (&VARSTOR,NB,LIST,YES,NO)\n   &WTPMSG   = TRANS(TRUNC(&WTPMSG,1) Y,YES N,NO)\n   VER (&WTPMSG,LIST,YES,NO)\n   VER (&PREFIX,NAME)\n)END\n   The following are here because we do not use RECOVER as an allowed option\n   but you can if you wish to use this dialog and want recover.\n   _Z  +    #RECOVER +use the TSO EDIT recovery function for all TSO EDIT sessio\n   &RECOVER  = TRANS(TRUNC(&RECOVER,1) Y,YES N,NO)\n   VER (&RECOVER,LIST,YES,NO)\n   .zvars = '(prompt intercom pause msgid mode wtpmsg recover prefix)'\n>Panel TSOPROFH\n)ATTR DEFAULT(%+_)\n   # TYPE(TEXT) INTENS(HIGH) COLOR(yellow)\n   @ TYPE(OUTPUT) INTENS(HIGH) COLOR(yellow)\n)BODY Expand(\\\\)\n#-\\-\\ (TSO Profile Review/Update Tutorial) \\-\\-\n%Command ===>_ZCMD\n%\n+This dialog allows the user to review, and optionally update, some of the\n#TSO Profile+settings.\n%\n+See the TSO Help for#PROFILE+for more details.\n+\n+After changes have been made use the#ENTER+key to lock in the changes,\n+or press the#END+key to cancel the changes.\n)INIT\n  .CURSOR = ZCMD\n  &ZCONT = TSOPROFH\n)PROC\n)END\n>End\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOTRAP": {"ttr": 45573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x13\\x01\\x16\\x19o\\x01\\x16\\x19o\\t\\x05\\x00\\x87\\x00\\x87\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2016-07-14T00:00:00", "modifydate": "2016-07-14T09:05:13", "lines": 135, "newlines": 135, "modlines": 0, "user": "SYSLBD"}, "text": "        /* --------------------  rexx procedure  -------------------- *\n         * Name:      TSOTrap                                         *\n         *                                                            *\n         * Function:  Issue a TSO Command, CLIST, EXEC and            *\n         *            capture (trap) the generated messages           *\n         *            then display those in ISPF Browse               *\n         *                                                            *\n         * Syntax:    %tsotrap opt tso-command command-parameters     *\n         *                                                            *\n         *            opt is optional and if used must be:            *\n         *                -B to indicate browse of the messages       *\n         *                -E to indicate edit of the messages         *\n         *                                                            *\n         *            tso-command is any TSO Command, Clist, or Exec  *\n         *            command-parameters are any paramters to the     *\n         *            tso-command                                     *\n         *                                                            *\n         * Author:    Lionel B. Dyck                                  *\n         *                                                            *\n         * History:                                                   *\n         *            07/14/16 - Change from stemview to stemedit     *\n         *            03/11/16 - Add -E and -B options to edit/browse *\n         *                       - use stemview for Browse or Edit if *\n         *                         stemview variable set              *\n         *            03/08/16 - Addition of comments and to use      *\n         *                       a more accurate LRECL                *\n         *                     - Use STEMVIEW if installed            *\n         *                       (see *custom* below)                 *\n         *            12/14/94 - Creation                             *\n         * ---------------------------------------------------------- */\n\n        /* ---------------------- *\n         * Define our environment *\n         * ---------------------- */\n        savemsg = msg(\"on\")\n        Call on error\n        Address ISPEXEC \"CONTROL ERRORS RETURN\"\n\n        /* ----------------------------------------- *\n         * Update the stemview variable to 0 if the  *\n         * STEMVIEW tool is not installed.  If it is *\n         * installed set it to 1.     *custom*       *\n         * ----------------------------------------- */\n        stemview = 1\n        trapopt = '-B'\n\n        /* ------------------------------------------ *\n         * Process the TSO Command and its parameters *\n         * ------------------------------------------ */\n        parse arg command\n        if length(command) = 0 then do\n           zedsmsg = \"\"\n           zedlmsg = \"Try TSOTRAP one more time with a command\"\n           Address ISPExec \"SetMSG MSG(isrz000)\"\n           x = msg(savemsg)\n           exit\n           end\n\n        /* ----------------------------------------------------- *\n         * Test for a -E or -B option prior to the trap command. *\n         * ----------------------------------------------------- */\n         if left(command,1) = '-' then do\n            parse value command with trapopt command\n            trapopt = translate(trapopt)\n            if wordpos(trapopt,'-E -B') = 0 then do\n               say 'Error'\n               say 'Valid options are:'\n               say '   -B to browse the results (default)'\n               say '   -E to edit the results'\n               say ' '\n               say 'Exiting - try again.'\n               exit 8\n               end\n           end\n\n        /* -------------------------------- *\n         * 1) Setup the OUTTRAP environment *\n         * 2) Issue the TSO command         *\n         * 3) Close the OUTTRAP environment *\n         * -------------------------------- */\n        Call outtrap \"LINE.\"\n        Address TSO command\n        Call outtrap \"OFF\"\n\n        /* ----------------------------------------- *\n         * Test for captured (trapped) messages      *\n         *                                           *\n         * Then find the max LRECL of those messages *\n         *                                           *\n         * Then Allocate a temporary dataset         *\n         * Write the messages to that dataset        *\n         * Browse the dataset                        *\n         * ----------------------------------------- */\n        If line.0 > 0\n        Then do\n           /* find the max lrecl */\n              maxl = 0\n              do i = 1 to line.0\n                 if maxl < length(line.i) then maxl = length(line.i)\n                 end\n            if stemview = 1 then do\n               if trapopt = '-E' then\n               CALL stemedit 'Edit','line.',,,\"TSOTRAP Command:\" command,,maxl\n               if trapopt = '-B' then\n               CALL stemedit 'Browse','line.',,,\"TSOTRAP Command:\" command,,maxl\n               end\n            else do\n              /* allocate a temp file to browse the results */\n              cmd_dd = \"C\"random()\n              \"ALLOCATE FILE(\"cmd_dd\") REUSE UNIT(vio) SPACE(1 1)\" ,\n                       \"CYL DSORG(PS) RECFM(V B) LRECL(\"maxl+4\")\"\n              \"EXECIO\" line.0 \"DISKW\" cmd_dd \"(STEM LINE. FINIS)\"\n              Address ISPEXEC \"LMINIT DATAID(DATAID) DDNAME(\"cmd_dd\")\"\n              if trapopt = '-B' then\n                  Address ISPEXEC \"BROWSE DATAID(\"dataid\")\"\n              if trapopt = '-E' then\n                  Address ISPEXEC \"EDIT DATAID(\"dataid\")\"\n              Address ISPEXEC \"LMFREE DATAID(\"dataid\")\"\n              \"FREE FILE(\"cmd_dd\")\"\n              End\n           End\n\n           x = msg(savemsg)\n        Exit\n\n        /* ---------------- *\n         * Error Processing *\n         * ---------------- */\n        Error:\n        Zerrsm = \"Return code\" rc\n        Zerrlm = \"Return code from command is\" rc\n        Zerralrm = \"YES\"\n        Zerrhm = \"*\"\n        Address ISPEXEC \"SETMSG MSG(ISRZ002)\"\n        Return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOTRAP1": {"ttr": 45576, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 \\x00\\x01\\x00\\x04\\x7f\\x01\\x00\\x04\\x7f\\x16U\\x00\\x1e\\x00\\x1e\\x00\\x00\\xd6\\xd3\\xc4@@@@@\\x00\\x00\\x00\\x1e\\x00\\x00\\x00\\x1e\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2000-02-16T00:00:00", "modifydate": "2000-02-16T16:55:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "OLD"}, "text": "        /*********************************REXX**********************************\n        * Execute a TSO Command and Browse the Output                          *\n        ***********************************************************************/\n        Trace \"OFF\"\n        Call on error\n        Address ISPEXEC \"CONTROL ERRORS RETURN\"\n        Call outtrap \"LINE.\"\n        Address TSO arg(1)\n        Call outtrap \"OFF\"\n        If line.0 > 0\n        Then do\n           cmd_dd = \"C\"random()\n           \"ALLOCATE FILE(\"cmd_dd\") REUSE UNIT(SYSVIO) SPACE(1 1) CYLINDER\",\n                    \"DSORG(PS) RECFM(V B) LRECL(255)\"\n           \"EXECIO\" line.0 \"DISKW\" cmd_dd \"(STEM LINE. FINIS)\"\n           Address ISPEXEC \"LMINIT DATAID(DATAID) DDNAME(\"cmd_dd\")\"\n           Address ISPEXEC \"BROWSE DATAID(\"dataid\")\"\n           Address ISPEXEC \"LMFREE DATAID(\"dataid\")\"\n           \"FREE FILE(\"cmd_dd\")\"\n           End\n        Exit\n\n        Error:\n\n        Zerrsm = \"Return code\" rc\n        Zerrlm = \"Return code from command is\" rc\n        Zerralrm = \"YES\"\n        Zerrhm = \"*\"\n        Address ISPEXEC \"SETMSG MSG(ISRZ002)\"\n        Return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSO8CHAR": {"ttr": 45578, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x03\\x01 \\x03?\\x01 \\x03O\\x08\\x07\\x00\\x1f\\x00\\x17\\x00\\x00\\xe2\\xd3\\xc2\\xc4@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2020-02-02T00:00:00", "modifydate": "2020-02-03T08:07:03", "lines": 31, "newlines": 23, "modlines": 0, "user": "SLBD"}, "text": "/* --------------------  rexx procedure  -------------------- \\\n | Name:      TSO8CHAR                                        |\n |                                                            |\n | Function:  Display or return the current state of the      |\n |            TSO 8 Character Userid setting.                 |\n |                                                            |\n | Syntax:    %TSO8CHAR                                       |\n |         or TSO8CHAR=TSO8CHAR()                             |\n |                                                            |\n | Note:      To enable 8 character TSO Userids               |\n |            update PARMLIB member IKJTSOxx by adding        |\n |            a statement:  LOGON USERIDMAX(8)                |\n |                                                            |\n | Author:    Lionel B. Dyck                                  |\n |                                                            |\n | Return Codes:                                              |\n |        0 = Not on z/OS 2.3 or later                        |\n |        7 = TSO Userid length at 7                          |\n |        8 = TSO Userid length at 8                          |\n |                                                            |\n | History:                                                   |\n |            02/02/20 - Creation                             |\n \\ ---------------------------------------------------------- */\n parse source source\n\n CVT      = C2D(Storage(10,4))\n TSVT     = C2D(Storage(D2X(CVT + 156),4))   /* cvt + 9c */\n TSVTUMXL = C2D(Storage(D2X(TSVT + 6),1))    /* tsvt + 6 */\n\n if word(source,2) = 'FUNCTION' then return tsvtumxl\n else  say 'TSO Userid Limit:' tsvtumxl\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TUTORPRT": {"ttr": 45580, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00#\\x01 \\x07?\\x01 \\x07O\\x11\\x10\\x00\\xe2\\x00\\xe0\\x00\\x00\\xe3\\xe4\\xe3\\xd6\\xd9@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2020-03-13T00:00:00", "modifydate": "2020-03-14T11:10:23", "lines": 226, "newlines": 224, "modlines": 0, "user": "TUTOR"}, "text": "/* --------------------  rexx procedure  -------------------- *\n | Name:      tutorprt                                        |\n |                                                            |\n | Function:  Extract the ISPF tutorial text into a file      |\n |            for use.                                        |\n |                                                            |\n | Syntax:    %tutorprt dsname starting-panel opt             |\n |                                                            |\n |            If the starting panel ends with an * then       |\n |            all members in the dsname starting with the     |\n |            panel prefix will be processed.                 |\n |                                                            |\n |            if opt is:                                      |\n |                 blank - no-cc and view results             |\n |                 A generate with ASA CC                     |\n |                 P generate with ASA CC and call txt2pdf    |\n |                 R generate with ASA CC and call txt2rtf    |\n |                 H generate with ASA CC and call txt2html   |\n |                                                            |\n | Notes:     All attribute characters will be translated     |\n |            to blanks.                                      |\n |                                                            |\n | Author:    Lionel B. Dyck                                  |\n |                                                            |\n | History:  (most recent on top)                             |\n |            03/14/20 LBD - bug fix caused blank lines       |\n |            02/26/20 LBD - Creation                         |\n |                                                            |\n * ---------------------------------------------------------- */\n  arg dsn start ccopt\n\n  if length(dsn) = 0 then do\n    say 'missing a dataset name and starting panel name'\n    say 'exiting try again...'\n    exit 8\n  end\n\n  if length(start) = 0 then do\n    say 'missing a starting panel name'\n    say 'exiting try again...'\n    exit 12\n  end\n\n  x = listdsi(dsn)\n  if x > 0 then do\n    say 'bad dsn' dsn\n    say sysmsglvl2\n    exit 8\n  end\n\n  dsn = sysdsname\n\n  parse value '' with order next done null\n  tc = 0\n  dd = 'te'time('s')\n\n  if right(start,1) = '*' then do\n    call outtrap 'm.'\n    'listd' \"'\"dsn\"' M\"\n    call outtrap 'off'\n    parse value start with pref'*'\n    start = null\n    pl = length(pref)\n    do i = 7 to m.0\n      m = word(m.i,1)\n      if left(m,pl) = pref then\n      order = order m\n    end\n  end\n\n  if start /= null then order = start order\n\n  do until length(order) = 0\n    parse value order with next order\n    if next = null then leave\n    call read next\n  end\n\n  if sysvar('syspref') = null then hlq = sysvar('sysuid')\n  else hlq = sysvar('syspref')\n  if start = null then start = pref\n  tutordsn = \"'\"hlq\".tutor.\"start\".text'\"\n  call outtrap 'x.'\n  'delete' tutordsn\n  call outtrap 'off'\n  if ccopt /= null then do\n    recfm = 'v b a'\n    lrecl = '85'\n  end\n  else do\n    recfm = 'v b'\n    lrecl = '84'\n  end\n  'alloc f('dd') new spa(15,15) tr recfm('recfm') lrecl('lrecl')' ,\n    'ds('tutordsn') blksize(0)'\n  'execio * diskw' dd '(finis stem text.'\n  'free  f('dd')'\n\n  call outtrap 'x.'\n  Select\n    When ccopt = 'A' then call list_ds\n    When ccopt = 'H' then do\n      tutorpdf = \"'\"hlq\".tutor.\"start\".html'\"\n      '%txt2html in' tutordsn 'out' tutorpdf ,\n        'CC Yes'\n        end\n    When ccopt = 'R' then do\n      tutorrtf = \"'\"hlq\".tutor.\"start\".rtf'\"\n      '%txt2rtf' tutordsn tutorrtf ,\n         'CC FONT 9' ,\n         'MARGINS 0.8/0.8/1.0/1.0' ,\n         'ORIENTATION PORTRAIT' ,\n         'PAPER LETTER' ,\n         'LINESPACE 1'\n         call list_ds\n    end\n    When ccopt = 'P' then do\n      tutorpdf = \"'\"hlq\".tutor.\"start\".pdf'\"\n      '%txt2pdf in' tutordsn 'out' tutorpdf ,\n      'FONT 9/Courier/100' ,\n      'CC Yes' ,\n      'CONFIRM Yes' ,\n      'LPI 8' ,\n      'TM 0.5 BM 0.5 LM 0.5 RM 0.5' ,\n      'ORIENT Portrait' ,\n      'PAPER let//'\n         call list_ds\n    end\n    Otherwise call list_ds\n  end\n  call outtrap 'off'\n  exit\n\nList_DS:\n  hlq = hlq'.tutor.'start\n  Address ISPExec\n  \"LMDINIT LISTID(LISTID) LEVEL(\"hlq\")\"\n  \"LMDDISP LISTID(\"ListId\") Confirm(Yes)\",\n    \"View(Volume)\"\n  \"LMDFREE LISTID(\"ListId\")\"\n  return\n\nread:\n  arg panel\n  if wordpos(panel,done) = 0\n  then done = done panel\n  else return\n  parse value '' with next attrs expand hit pan rexx area\n  tc = tc + 1\n  text.tc = '>Panel' panel\n  if ccopt /= null then text.tc = '1'text.tc\n  tc = tc + 1\n  text.tc = left('-',80,'-')\n  if ccopt /= null then text.tc = ' 'text.tc\n  \"alloc f(\"dd\") shr reuse ds('\"dsn\"(\"panel\")')\"\n  'execio * diskr 'dd '(finis stem in.'\n  'free  f('dd')'\n/* --------------------------------- *\n | hit = 0 checking for data we need |\n | hit = 1 in the Proc section       |\n | hit = 2 found the body            |\n * --------------------------------- */\n  do i = 1 to in.0\n    d = translate(in.i)\n    if word(d,1) = '/*' then iterate\n    if left(d,5) = '*REXX' then rexx = 1\n    if left(d,8) = '*ENDREXX' then rexx = 0\n    if rexx = 1 then iterate\n    if left(d,5) = ')ATTR' then do\n      hit = 0\n      if pos('(',d) > 0 then parse value d with x '('attrs')' .\n      else attrs = '%+_'\n    end\n    if hit = 0 then do\n      if pos('TYPE',d) > 0 then do\n        at = strip(word(d,1))\n        if length(at) = 2 then at = x2c(at)\n        attrs = attrs''at\n      end\n      if pos('AREA',d) > 0 then do\n        at  = word(d,1)\n        if length(at) = 2 then at = x2c(at)\n        area = at\n        attrs = attrs''at\n      end\n    end\n    if left(d,5) = ')INIT' then hit = 3\n    if left(d,5) = ')BODY' then do\n      hit = 2\n      if pos('EXPAND',d) > 0 then parse value d with . 'EXPAND('expand')'\n      attrs = attrs''expand\n    end\n    if left(d,5) = ')PROC' then hit = 1\n    if left(d,4) = ')END' then do\n      tc = tc + 1\n      text.tc = left('-',80,'-')\n      if ccopt /= null then text.tc = ' 'text.tc\n      return\n    end\n    if hit = 0 then iterate\n    if hit = 2 then do\n      if area /= null then\n      if left(d,1) = area then iterate\n      if word(d,1) = ')AREA' then iterate\n      if pos('===>',d) > 0 then iterate\n      if left(d,1) = ')' then iterate\n      tc = tc + 1\n      text.tc = translate(in.i,' ',attrs)\n      if ccopt /= null then text.tc = ' 'text.tc\n    end\n    if hit = 1 then do\n      if word(d,1) = '&ZSEL' then iterate\n      if pos(',',d) > 0 then parse value d with x','pan .\n      if x = '*' then iterate\n      if left(pan,1) = '*' then pan = substr(pan,2)\n      pan = translate(pan)\n      if wordpos(pan,order) = 0 then\n      order =  order pan\n      if pos('&ZCONT',d) > 0 then parse value d with x '=' next .\n    end\n    if hit = 3 then do\n      if pos('&ZCONT',d) > 0 then parse value d with x '=' next .\n    end\n    if next /= null then order = next order\n  end\n  return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TXT2CSV": {"ttr": 45827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x003\\x01\\x161?\\x01\\x17\\x18\\x0f\\x13\\x03\\x04\\xe6\\x00\\xc4\\x00\\x00\\xd3\\xc2\\xc4@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2016-11-08T00:00:00", "modifydate": "2017-06-29T13:03:33", "lines": 1254, "newlines": 196, "modlines": 0, "user": "LBD"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "TXT2RTF": {"ttr": 46339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x161?\\x01\\x161?\\x01!\\x02\\x9d\\x02\\x9d\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-11-08T00:00:00", "modifydate": "2016-11-08T01:21:14", "lines": 669, "newlines": 669, "modlines": 0, "user": "SYSLBD"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT313/FILE313.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT313", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}