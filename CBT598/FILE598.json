{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012432000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 823004, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE598.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 823004, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 823004, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE598.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0e\\x03'", "DS1TRBAL": "b'\\xc1\\x1c'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04b\\x00\\x08\\x04c\\x00\\x07\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x045\\x00\\x00\\x01\\x02)?\\x01\\x02)?\\t6\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf3@@@'", "ispf": {"version": "04.53", "flags": 0, "createdate": "2002-10-20T00:00:00", "modifydate": "2002-10-20T09:36:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-453"}, "text": "REGULAR CBT TAPE - VERSION 453    FILE:  598\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT453.FILE598\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 7,464 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/20/02    09:36:08    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC0": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02)\\x1f\\x01\\x02)\\x1f\\x01\"\\x00\\x12\\x00\\x12\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-18T00:00:00", "modifydate": "2002-10-18T01:22:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "RLRICE"}, "text": "Sam,\n\nThis is about all that I found that was worth anything.\nI didn't find any of the JCL I had used to assemble or\nexecute any of this stuff.\n\nI started out on DOS/VS in 1977.  This was DOS/VS\nRelease 34 and before DOS/VS became DOS/VSE.\n\nI started working with MVS in 1982 when it was MVS/SP 3.8.\nThis was before XA, ESA, OS/390, and whatever it is called\nnow (Z/os?).  All this stuff was 24-bit.... whoever thought\nthat we would need more than a 16-Meg address space?\n\nI wrote most of this as learning exercises when I first\nstarted working with MVS. I'm sure that this stuff has\nplenty of bugs.  None of it requires any APF authorization\nso it shouldn't cause too much damage if it blows up.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x01\\x02)\\x1f\\x01\\x02)\\x1f\\x01\\x06\\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-18T00:00:00", "modifydate": "2002-10-18T01:06:34", "lines": 19, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "Subj: On vacation yesterday\nDate: 10/17/2002 9:26:31 AM Eastern Daylight Time\nFrom:    rlrice@skylark.ppco.com (Richard Rice)\nTo:    sbgolob@aol.com\n\n\n\nSam,\n\nI think I was successful in e-mailing the source, maclib,\nand some documentation.  It has been about 20 years since\nsome of this stuff was written so I don't remember for\ncertain what JCL I used to assemble and/or execute it.\nI think I have all the macros that any of the source will\nneed.\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLOAD": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00T\\x01\\x02)?\\x01\\x02)?\\t5\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-10-20T00:00:00", "modifydate": "2002-10-20T09:35:54", "lines": 31, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*--------------------------------------------------------------*//\n//*    This job will create a partitioned dataset from the       *//\n//*    $$HELP member in this file.                               *//\n//*--------------------------------------------------------------*//\n//LOA1 EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=userid.FILE035.PDS\n//SYSUT1   DD DISP=SHR,DSN=userid.FILE598.PDS(DOC)\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DISP=(NEW,CATLG,DELETE),DSN=userid.FILE598.DOC,\n//   DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),\n//   SPACE=(TRK,(15,15,44),RLSE)\n//*\n//LOA2 EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=userid.FILE035.PDS\n//SYSUT1   DD DISP=SHR,DSN=userid.FILE598.PDS(MACLIB)\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DISP=(NEW,CATLG,DELETE),DSN=userid.FILE598.MACLIB,\n//   DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),\n//   SPACE=(TRK,(15,15,44),RLSE)\n//*\n//LOA3 EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=userid.FILE035.PDS\n//SYSUT1   DD DISP=SHR,DSN=userid.FILE598.PDS(SOURCE)\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DISP=(NEW,CATLG,DELETE),DSN=userid.FILE598.SOURCE,\n//   DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),\n//   SPACE=(TRK,(45,15,44),RLSE)\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE598": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x04\\x01\\x01\\x02_\\x01\\x02)\\x1f\\x080\\x00\\x11\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-10-18T08:30:04", "lines": 17, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 598 is from Richard L. Rice and contains some utilities   *   FILE 598\n//*           that are very interesting, even though they are       *   FILE 598\n//*           old (i.e. they were written a long time ago).         *   FILE 598\n//*                                                                 *   FILE 598\n//*           email:  rlrice@skylark.ppco.com                       *   FILE 598\n//*                   rlrice@ppco.com                               *   FILE 598\n//*                                                                 *   FILE 598\n//*     Short description of contents:                              *   FILE 598\n//*                                                                 *   FILE 598\n//*       AIXUTIL  - utility to create VSAM alternate indexes       *   FILE 598\n//*       FILEUTIL - print records from sequential files            *   FILE 598\n//*       PDSUTIL  - search pds members to find strings             *   FILE 598\n//*       VSAMUTIL - print records from VSAM files                  *   FILE 598\n//*       XLOC     - string search optimizable, based on            *   FILE 598\n//*                  frequency of occurrence                        *   FILE 598\n//*       XSORT    - a very fast in-core table sorter               *   FILE 598\n//*                                                                 *   FILE 598\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOC": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02)\\x1f\\x01\\x02)\\x1f\\x01&\\x00\\x86\\x00\\x86\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-18T00:00:00", "modifydate": "2002-10-18T01:26:00", "lines": 134, "newlines": 134, "modlines": 0, "user": "RLRICE"}, "text": "./ ADD NAME=AIXUTIL  0100-02291-02291-0122-00023-00023-00000-RLRICE\nThis utility was used to speed up building alternate indexes\non VSAM clusters.  I don't remember too many of the details\nabout this.  I know you define a cluster, define the index,\nand define a \"PATH\".  It seems like you also had to run a\nIDCAMS command to actually build the index.  This program\nwas intended to replace the IDCAMS command to build the index.\nIf my memory serves correctly, it was much faster than IDCAMS.\nI would imagine by now IBM has changed IDCAMS to be as fast\nor faster than this.\n\nThe best I can make out from the source, this is the only\nmodule, so all you should have to do is assemble and link-edit\nit.  To run it, it looks like it needs DD statements for\n\n   AIXPRT      printed messages\n   BASE        the base cluster\n   AIX         the alternate index cluster\n   SORTIN      work area.  One record per base cluster record\n               is written to this file with the base and secondary\n               keys.\n\nI don't remember for sure, but I have to believe you would also\nneed DD statements for SORT (SORTWKx, SYSOUT ?)\n./ ADD NAME=DOC      0100-02291-02291-0122-00018-00018-00000-RLRICE\nSam,\n\nThis is about all that I found that was worth anything.\nI didn't find any of the JCL I had used to assemble or\nexecute any of this stuff.\n\nI started out on DOS/VS in 1977.  This was DOS/VS\nRelease 34 and before DOS/VS became DOS/VSE.\n\nI started working with MVS in 1982 when it was MVS/SP 3.8.\nThis was before XA, ESA, OS/390, and whatever it is called\nnow (Z/os?).  All this stuff was 24-bit.... whoever thought\nthat we would need more than a 16-Meg address space?\n\nI wrote most of this as learning exercises when I first\nstarted working with MVS. I'm sure that this stuff has\nplenty of bugs.  None of it requires any APF authorization\nso it shouldn't cause too much damage if it blows up.\n./ ADD NAME=FILEUTIL 0100-02291-02291-0122-00021-00021-00000-RLRICE\nSource files FILECOMM, FILEPH00, FILEPH01, FILEPH02, and FILEPH03\nare all components of a utility I called FILEUTIL.\n\nAll five source files need to be assembled and then link-edited\ntogether to make one load module.  The entry point should be\nFILEPH00.  The assembly SYSLIB will need to reference the maclib\nthat has FILECOMM and XLOC.\n\nThis program allows you to print records from sequential files.\nThe program has a HELP function that prints off a list of control\nstatements and their parameters.\n\nI could not find the JCL used to assemble or execute FILEUTIL.\n\nIt looks like the JCL needs DDs for:\n\n   SYSIN       control statements\n   SYSUT1      sequential file to be read/scanned\n   SYSUT2      If \"COPY\" is requested, the selected records\n               will be copied to this file\n   PRINTER     sysout\n./ ADD NAME=PDSUTIL  0100-02291-02291-0122-00012-00012-00000-RLRICE\nSource files PDSCOMM, PDSPH00, PDSPH01, PDSPH02, and PDSPH03\nmake up a utility I called PDSUTIL.\n\nYou need to assemble all five source files and link-edit them\ninto one load module.  The entry point should be PDSPH00.\nThe assembler SYSLIB needs to reference the maclib with PDSCOMM\nand XLOC.\n\nThe utility searches through PDSes one member at a time for\nmembers with specified strings.  There is a \"HELP\" command\nthat will print out a list of the control statements and their\nparameters.\n./ ADD NAME=VSAMUTIL 0100-02291-02291-0122-00019-00019-00000-RLRICE\nSource files VSAMCOMM, VSAMPH00, VSAMPH01, VSAMPH02, and VSAMPH03\nare all components of a utility I called VSAMUTIL.\n\nAll five source files need to be assembled and then link-edited\ntogether to make one load module.  The entry point should be\nVSAMPH00.  The assembly SYSLIB will need to reference the maclib\nthat has VSAMCOMM and XLOC.\n\nThis program allows you to print records from VSAM files.\nThe program has a HELP function that prints off a list of control\nstatements and their parameters.\n\nI could not find the JCL used to assemble or execute VSAMUTIL.\n\nIt looks like the JCL needs DDs for:\n\n   SYSIN       control statements\n   PRINTER     sysout\n   VSAMFILE    the VSAM file\n./ ADD NAME=XLOC     0100-02291-02291-0122-00028-00028-00000-RLRICE\nXLOC searches for strings.\n\nWhat makes this program different is that you can optimize\nthe search based on what is called a \"frequency of occurance\"\ntable.  For example if you are searching source files, the\nletters q, x, and z occur less frequently than vowels like\na or e.  If you are searching object code, values like x'30'\nwould probably occur less often than x'00' or x'40'.\n\nTo use XLOC, you need to make a call to \"initialize\".  On\nthe \"initialize\" call, the string you are searching for is\ntranslated  using the frequency of occurance table.  Then\nthe value that is least likely to occur is saved plus the\ndisplacement into the string where that value was located.\nFor example if you were searching for the literal string\n\"unique\", the value least likely to occur is probably the\nletter \"q\" which is in the fifth byte of the string.  XLOC\nwould contruct a 256 translate table with all bytes zero\nexcept the byte corresponding to the letter \"q\" or x'71'.\nThen on subsequent calls, XLOC uses a TRT instruction to\nlocate any q's in the string being searched.  If the TRT\nfinds a \"q\", XLOC will \"back up\" four bytes (because the\nq is in the fifth postion of the string we are looking for)\nand check for the entire string (\"unique\").\n\nThe XLOC macro will generate a table that is pretty well\noptimized for searching for text strings.  You can code\nyour own tables if you wish.\n./ ADD NAME=XSORT    0100-02291-02291-0122-00006-00006-00000-RLRICE\nXSORT is an in-core table sorter.\nThe XSORT macro can be used to generate the parameter list.\nThe XSORT module has to be link-edited with the program.\n\nI have seen several other sorts.  This is the fastest one\nI ever found.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MACLIB": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02)\\x1f\\x01\\x02)\\x1f\\x01&\\x03L\\x03L\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-18T00:00:00", "modifydate": "2002-10-18T01:26:00", "lines": 844, "newlines": 844, "modlines": 0, "user": "RLRICE"}, "text": "./ ADD NAME=FILECOMM 0100-02291-02291-0122-00093-00093-00000-RLRICE\n         MACRO\n         FILECOMM\n         DC    CL16'*** FILECOMM ***'\nCOMSAVE  DC    9D'0'                   REGISTER SAVE AREA\nCOMMAXL  DC    F'10000'                MAXIMUM LINES TO PRINT\nCOMSKIP  DC    H'0'                    NUMBER OF RECORDS TO SKIP\nCOMCOUNT DC    H'0'                    NUMBER OF RECORDS TO PRINT\nCOMSCAN1 DC    CL80' '                 SCAN 1 ARGUEMENT\nCOMSCN1L DC    H'0'                    SCAN 1 ARGUEMENT LENGTH\nCOMZ1BGN DC    H'0'                    SCAN START OFFSET\nCOMZ1END DC    H'0'                    SCAN END OFFSET\nCOMSCAN2 DC    CL80' '                 SCAN 2 ARGUEMENT\nCOMSCN2L DC    H'0'                    SCAN 2 ARGUEMENT LENGTH\nCOMZ2BGN DC    H'0'                    SCAN START OFFSET\nCOMZ2END DC    H'0'                    SCAN END OFFSET\nCOMTRGR  DC    CL80' '                 TRIGGER VALUE\nCOMTRGL  DC    H'0'                    TRIGGER VALUE LENGTH\nCOMTZBGN DC    H'0'                    SCAN START OFFSET\nCOMTZEND DC    H'0'                    SCAN END OFFSET\nCOMTITLE DC    CL80' '                 PAGE TITLE\nCOMSPACE DC    C'D'                    SPACING\n$DOUBLE  EQU   C'D'                    .. DOUBLE SPACING\n$SINGLE  EQU   C'S'                    .. SINGLE SPACING\nCOMHEX   DC    C'H'                    HEX CONTROL\n$HEX     EQU   C'H'                    .. PRINT VERTICAL HEX\nCOMSCTRL DC    C' '                    SCAN 1/SCAN 2 RELATIONSHIP\n$AND     EQU   C'A'                    .. USING 'AND' LOGIC\n$OR      EQU   C'O'                    .. USING 'OR' LOGIC\nCOMCOPY  DC    C' '                    COPY FLAG\n$COPY    EQU   C'C'                    .. COPY REQUESTED\nCOMHELP  DC    C' '                    COPY FLAG\n$HELP    EQU   C'H'                    .. HELP REQUESTED\nCOMFLAG  DC    X'00'                   FLAGS/INDICATORS\n$ERROR   EQU   X'80'                   .. FATAL ERROR ENCOUNTERED\n$SKIP    EQU   X'40'                   .. USING SKIP\n$COUNT   EQU   X'20'                   .. USING COUNT\n$SCTRL   EQU   X'10'                   .. USING SCAN CONTROL\n$100     EQU   X'08'                   .. FIRST 100 FORMAT\nCOMSCN1F DC    X'00'                   SCAN 1 PARAMETERS\n$SCAN1   EQU   X'80'                   .. USING SCAN 1\n$Z1BGN   EQU   X'40'                   .. USING ZONE BEGIN\n$Z1END   EQU   X'20'                   .. USING ZONE END\nCOMSCN1T DC    256X'00'                'XLOC' TRANSLATE TABLE\nCOMSCN1P XLOC  WORK=COMSCN1T,          'XLOC' PARAMETER LIST           +\n               STRING=COMSCAN1,        .. SEARCH ARGUEMENT             +\n               MF=L\nCOMSCN2F DC    X'00'                   SCAN 2 PARAMETERS\n$SCAN2   EQU   X'80'                   .. USING SCAN 2\n$Z2BGN   EQU   X'40'                   .. USING ZONE BEGIN\n$Z2END   EQU   X'20'                   .. USING ZONE END\nCOMSCN2T DC    256X'00'                'XLOC' TRANSLATE TABLE\nCOMSCN2P XLOC  WORK=COMSCN2T,          'XLOC' PARAMETER LIST           +\n               STRING=COMSCAN2,        .. SEARCH ARGUEMENT             +\n               MF=L\nCOMTRGRF DC    X'00'                   TRIGGER PARAMETERS\n$TRIGGER EQU   X'80'                   .. USING TRIGGER\n$TZBGN   EQU   X'40'                   .. USING ZONE BEGIN\n$TZEND   EQU   X'20'                   .. USING ZONE END\nCOMTRGRT DC    256X'00'                'XLOC' TRANSLATE TABLE\nCOMTRGRP XLOC  WORK=COMTRGRT,          'XLOC' PARAMETER LIST           +\n               STRING=COMTRGR,         .. SEARCH ARGUEMENT             +\n               MF=L\nCOMPAGE  DC    PL3'0'                  PAGE NUMBER\nCOMLINE  DC    PL2'0'                  LINE NUMBER\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     DCB'S                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nSYSUT1   DCB   DSORG=PS,                                               +\n               EODAD=*,                                                +\n               MACRF=GL,                                               +\n               DDNAME=SYSUT1,                                          +\n               EXLST=UT1EXLST\nJFCBREQ  RDJFCB (SYSUT1),MF=L\nUT1EXLST DC    AL1(X'87'),AL3(JFCBAREA)\nJFCBAREA DS    0F\n         IEFJFCBN\nSYSUT2   DCB   DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               DDNAME=SYSUT2\nSYSIN    DCB   DSORG=PS,                                               +\n               MACRF=GM,                                               +\n               LRECL=80,                                               +\n               RECFM=F,                                                +\n               DDNAME=SYSIN,                                           +\n               EODAD=*\nPRINTER  DCB   DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               LRECL=121,                                              +\n               RECFM=FBA,                                              +\n               DDNAME=SYSPRINT\n         MEND\n./ ADD NAME=VSAMCOMM 0100-02291-02291-0122-00106-00106-00000-RLRICE\n         MACRO\n         VSAMCOMM\n         DC    CL16'*** VSAMCOMM ***'\nCOMSAVE  DC    9D'0'                   REGISTER SAVE AREA\nCOMMAXL  DC    F'10000'                MAXIMUM LINES TO PRINT\nCOMLRECL DC    F'0'                    VSAM FILE LRECL\nCOMKEYL  DC    F'0'                    VSAM FILE KEY LENGTH\nCOMRKP   DC    F'0'                    VSAM FILE RELATIVE KEY POSITION\nCOMSKIP  DC    H'0'                    NUMBER OF RECORDS TO SKIP\nCOMCOUNT DC    H'0'                    NUMBER OF RECORDS TO PRINT\nCOMSCAN1 DC    CL80' '                 SCAN 1 ARGUEMENT\nCOMSCN1L DC    H'0'                    SCAN 1 ARGUEMENT LENGTH\nCOMZ1BGN DC    H'0'                    SCAN START OFFSET\nCOMZ1END DC    H'0'                    SCAN END OFFSET\nCOMSCAN2 DC    CL80' '                 SCAN 2 ARGUEMENT\nCOMSCN2L DC    H'0'                    SCAN 2 ARGUEMENT LENGTH\nCOMZ2BGN DC    H'0'                    SCAN START OFFSET\nCOMZ2END DC    H'0'                    SCAN END OFFSET\nCOMTRGR  DC    CL80' '                 TRIGGER VALUE\nCOMTRGL  DC    H'0'                    TRIGGER VALUE LENGTH\nCOMTZBGN DC    H'0'                    SCAN START OFFSET\nCOMTZEND DC    H'0'                    SCAN END OFFSET\nCOMTITLE DC    CL80' '                 PAGE TITLE\nCOMSPACE DC    C'D'                    SPACING\n$DOUBLE  EQU   C'D'                    .. DOUBLE SPACING\n$SINGLE  EQU   C'S'                    .. SINGLE SPACING\nCOMHEX   DC    C'H'                    HEX CONTROL\n$HEX     EQU   C'H'                    .. PRINT VERTICAL HEX\nCOMSCTRL DC    C' '                    SCAN 1/SCAN 2 RELATIONSHIP\n$AND     EQU   C'A'                    .. USING 'AND' LOGIC\n$OR      EQU   C'O'                    .. USING 'OR' LOGIC\nCOMHELP  DC    C' '                    COPY FLAG\n$HELP    EQU   C'H'                    .. HELP REQUESTED\nCOMFLAG  DC    X'00'                   FLAGS/INDICATORS\n$ERROR   EQU   X'80'                   .. FATAL ERROR ENCOUNTERED\n$SKIP    EQU   X'40'                   .. USING SKIP\n$COUNT   EQU   X'20'                   .. USING COUNT\n$SCTRL   EQU   X'10'                   .. USING SCAN CONTROL\n$100     EQU   X'08'                   .. FIRST100 FORMAT\n$FROMKEY EQU   X'04'                   .. USING FROM KEY\n$TOKEY   EQU   X'02'                   .. USING TO KEY\nCOMACBF  DC    X'00'                   VSAM FILE INDICATORS\n$KSDS    EQU   X'80'                   .. DATASET IS A KSDS\n$RRDS    EQU   X'40'                   .. DATASET IS AN RRDS\n$ESDS    EQU   X'20'                   .. DATASET IS AN ESDS\nCOMSCN1F DC    X'00'                   SCAN 1 PARAMETERS\n$SCAN1   EQU   X'80'                   .. USING SCAN 1\n$Z1BGN   EQU   X'40'                   .. USING ZONE BEGIN\n$Z1END   EQU   X'20'                   .. USING ZONE END\nCOMSCN1T DC    256X'00'                'XLOC' TRANSLATE TABLE\nCOMSCN1P XLOC  WORK=COMSCN1T,          'XLOC' PARAMETER LIST           +\n               STRING=COMSCAN1,        .. SEARCH ARGUEMENT             +\n               MF=L\nCOMSCN2F DC    X'00'                   SCAN 2 PARAMETERS\n$SCAN2   EQU   X'80'                   .. USING SCAN 2\n$Z2BGN   EQU   X'40'                   .. USING ZONE BEGIN\n$Z2END   EQU   X'20'                   .. USING ZONE END\nCOMSCN2T DC    256X'00'                'XLOC' TRANSLATE TABLE\nCOMSCN2P XLOC  WORK=COMSCN2T,          'XLOC' PARAMETER LIST           +\n               STRING=COMSCAN2,        .. SEARCH ARGUEMENT             +\n               MF=L\nCOMTRGRF DC    X'00'                   TRIGGER PARAMETERS\n$TRIGGER EQU   X'80'                   .. USING TRIGGER\n$TZBGN   EQU   X'40'                   .. USING ZONE BEGIN\n$TZEND   EQU   X'20'                   .. USING ZONE END\nCOMTRGRT DC    256X'00'                'XLOC' TRANSLATE TABLE\nCOMTRGRP XLOC  WORK=COMTRGRT,          'XLOC' PARAMETER LIST           +\n               STRING=COMTRGR,         .. SEARCH ARGUEMENT             +\n               MF=L\nCOMPAGE  DC    PL3'0'                  PAGE NUMBER\nCOMLINE  DC    PL2'0'                  LINE NUMBER\nCOMFKEYL DC    X'00'                   FROM KEY LENGTH\nCOMFKEY  DC    CL80' '                 FROM KEY\nCOMTKEYL DC    X'00'                   TO KEY LENGTH\nCOMTKEY  DC    CL80' '                 TO KEY\n               EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*             ACB/EXIT LIST/JFCB DATA                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nVSAMFILE ACB   AM=VSAM,                                                +\n               DDNAME=VSAMFILE,                                        +\n               EXLST=VSAMXLST\nJFCBREQ  RDJFCB (VSAMFILE),MF=L\nVSAMXLST DC    AL1(X'87'),AL3(JFCBAREA)\nJFCBAREA DS    0F\n         IEFJFCBN\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      DCB'S                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nSYSIN    DCB   DSORG=PS,                                               +\n               MACRF=GM,                                               +\n               LRECL=80,                                               +\n               RECFM=F,                                                +\n               DDNAME=SYSIN,                                           +\n               EODAD=*\nPRINTER  DCB   DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               LRECL=121,                                              +\n               RECFM=FBA,                                              +\n               DDNAME=SYSPRINT\n         MEND\n./ ADD NAME=XLOC     0100-02291-02291-0122-00358-00358-00000-RLRICE\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*                      MACRO PARAMETERS                              *\n.*                                                                    *\n.*  TYPE -------- EITHER 'CALL', 'INIT', 'DSECT', OR 'TABLE'          *\n.*  ERROR ------- ADDRESS OF NOT FOUND ROUTINE                        *\n.*  STRING ------ ADDRESS OF SUBSTRING TO BE LOCATED                  *\n.*  STRLEN ------ LENGTH OF SUBSTRING TO BE LOCATED                   *\n.*  WORK -------- ADDRESS OF A 256 BYTE WORK AREA                     *\n.*  RECORD ------ ADDRESS OF SOURCE RECORD TO BE SCANNED              *\n.*  TABLE ------- ADDRESS OF A FREQUENCY LOOK-UP TABLE                *\n.*  MF ---------- EITHER 'I', 'L', OR '(E,ADDR)'                      *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         MACRO\n&NAME    XLOC &TYPE=SCAN,              'SCAN', 'INIT', 'TABLE', 'DSECT'+\n               &STRING=,               ADDRESS OF STRING               +\n               &STRLEN=,               LENGTH OF STRING                +\n               &RECORD=,               ADDR OF SOURCE RECORD           +\n               &RECLEN=,               LENGTH OF RECORD                +\n               &WORK=,                 256 BYTE WORK AREA ADDRESS      +\n               &ERROR=,                BRANCH HERE IF UNSUCCESSFUL     +\n               &TABLE=,                ADDR OF FREQUENCY TABLE         +\n               &MF=I                   MACRO FORMAT\n            AIF   (T'&TYPE EQ 'O').ERR0010\n            AIF   (T'&MF EQ 'O').ERR0020\n            AIF   ('&TYPE' EQ 'DSECT').DSECT\n            AIF   ('&TYPE' EQ 'TABLE').TABLE\n            AIF   ('&TYPE' EQ 'SCAN').LBL0010\n            AIF   ('&TYPE' EQ 'INIT').LBL0010\n            MNOTE 8,'INVALID ''TYPE'' PARAMETER'\n            MEXIT\n.* ------------------------------------------------------------------ *\n.*   CHECK THE MACRO FORMAT AND EXPAND ACCORDINGLY                    *\n.* ------------------------------------------------------------------ *\n.LBL0010    ANOP\n            AIF   ('&MF' EQ 'L').LIST\n            AIF   ('&MF(1)' EQ 'E').EXEC\n            AIF   ('&MF' NE 'I').ERR0020\n.* ------------------------------------------------------------------ *\n.*   INLINE   EXPANSION                                               *\n.* ------------------------------------------------------------------ *\n            AIF   (T'&RECORD EQ 'O').ERR0030\n            AIF   (T'&STRING EQ 'O').ERR0040\n            AIF   (T'&STRLEN EQ 'O').ERR0050\n            AIF   (T'&WORK EQ 'O').ERR0060\n            AIF   (T'&TABLE EQ 'O').ERR0070\n            AIF   ('&STRING'(1,1) NE '(').I001\n            ST    &STRING(1),STRA&SYSNDX  STRING ADDRESS\n.I001       ANOP\n            AIF   ('&STRLEN'(1,1) NE '(').I002\n            ST    &STRLEN(1),STRL&SYSNDX  STRING LENGTH\n.I002       ANOP\n            AIF   ('&RECORD'(1,1) NE '(').I003\n            ST    &RECORD(1),RECA&SYSNDX  WORK AREA\n.I003       ANOP\n            AIF   ('&RECORD'(1,1) NE '(').I004\n            ST    &RECORD(1),RECA&SYSNDX  RECORD ADDRESS\n.I004       ANOP\n            AIF   ('&RECLEN'(1,1) NE '(').I005\n            ST    &RECLEN(1),RECL&SYSNDX  TABLE ADDRESS\n.I005       ANOP\n            AIF   ('&WORK'(1,1) NE '(').I006\n            ST    &WORK(1),WORK&SYSNDX    WORK AREA ADDRESS\n.I006       ANOP\n            AIF   ('&TABLE'(1,1) NE '(').I007\n            ST    &TABLE(1),TBLE&SYSNDX\n.I007       ANOP\n            BAL   1,PLST&SYSNDX           SET PARM LIST ADDRESS\n            AIF   ('&TYPE' EQ 'INIT').I008\nCMD&SYSNDX  DC    C'S'                    SCAN COMMAND\n            AGO   .I009\n.I008       ANOP\nCMD&SYSNDX  DC    C'N'                    NEW STRING\n.I009       ANOP\nSTAT&SYSNDX DC    C' '                    STATUS\nFOCC&SYSNDX DC    C' '                    LEAST OBSERVED CHARACTER\n            DC    C' '\n            AIF   ('&STRING'(1,1) EQ '(').I010\nSTRA&SYSNDX DC    A(&STRING.)             STRING ADDRESS\n            AGO   .I011\n.I010       ANOP\nSTRA&SYSNDX DC    A(0)                    STRING ADDRESS\n.I011       ANOP\n            AIF   ('&STRLEN'(1,1) EQ '(').I012\nSTRL&SYSNDX DC    A(&STRLEN.)             STRING LENGTH\n            AGO   .I013\n.I012       ANOP\nSTRL&SYSNDX DC    A(0)                    STRING LENGTH\n.I013       ANOP\n            AIF   ('&RECORD'(1,1) EQ '(').I014\nRECA&SYSNDX DC    A(&RECORD.)             RECORD ADDRESS\n            AGO   .I015\n.I014       ANOP\nRECA&SYSNDX DC    A(0)                    RECORD ADDRESS\n.I015       ANOP\n            AIF   ('&RECLEN'(1,1) EQ '(').I016\nRECL&SYSNDX DC    A(&RECLEN.)             TABLE LENGTH\n            AGO   .I017\n.I016       ANOP\nRECL&SYSNDX DC    A(0)                    TABLE ADDRESS\n.I017       ANOP\n            AIF   ('&WORK'(1,1) EQ '(').I018\nWORK&SYSNDX DC    A(&WORK.)               WORK AREA ADDRESS\n            AGO   .I019\n.I018       ANOP\nWORK&SYSNDX DC    A(0)                    WORK AREA ADDRESS\n.I019       ANOP\n            AIF   ('&TABLE'(1,1) EQ '(').I020\nTBLE&SYSNDX DC    A(&TABLE.)              FOC TABLE ADDRESS\n            AGO   .I021\n.I020       ANOP\nTBLE&SYSNDX DC    A(0)                    FOC TABLE ADDRESS\n.I021       ANOP\nFOCD&SYSNDX DC    A(0)                    LEAST SEEN CHARACTER DSPL\nEPA&SYSNDX  DC    V(XLOC)                 XLOC MODULE ENTRY POINT\nPLST&SYSNDX DS    0H\n            L     R15,EPA&SYSNDX          LOAD ENTRY POINT ADDRESS\n            BALR  R14,R15                 CALL XLOC\n            AIF   (T'&ERROR EQ 'O').EXIT\n            CLI   STAT&SYSNDX,C' '        SUCCESSFUL??\n            AIF   ('&ERROR'(1,1) EQ '(').I022\n            BNE   &ERROR                  NO\n            AGO   .EXIT\n.I022       ANOP\n            BNER  &ERROR(1)               NO\n            AGO   .EXIT\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*  EXECUTE   EXPANSION                                               *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n.EXEC    ANOP\n         AIF   ('&MF(2)'(1,1) EQ '(').E000\n         LA    R1,&MF(2)                    PARM LIST\n         AGO   .E001\n.E000    ANOP\n         LR    R1,&MF(2)                    PARM LIST\n.E001    ANOP\n         PUSH  USING\n         USING XLOCLIST,R1                  DEFINE PARMLIST BASE\n         AIF   (T'&STRING EQ 'O').E002\n         AIF   ('&STRING'(1,1) NE '(').E002\n         ST    &STRING(1),XLOCSTRA          SEARCH STRING ADDRESS\n.E002    ANOP\n         AIF   (T'&STRLEN EQ 'O').E003\n         AIF   ('&STRLEN'(1,1) NE '(').E003\n         ST    &STRLEN(1),XLOCSTRL          SEARCH STRING LENGTH\n.E003    ANOP\n         AIF   (T'&RECORD EQ 'O').E004\n         AIF   ('&RECORD'(1,1) NE '(').E004\n         ST    &RECORD(1),XLOCRECA          RECORD ADDRESS\n.E004    ANOP\n         AIF   (T'&RECLEN EQ 'O').E005\n         AIF   ('&RECLEN'(1,1) NE '(').E005\n         ST    &RECLEN(1),XLOCRECL          RECORD LENGTH\n.E005    ANOP\n         AIF   (T'&WORK EQ 'O').E006\n         AIF   ('&WORK'(1,1) NE '(').E006\n         ST    &WORK(1),XLOCWORK            WORK AREA\n.E006    ANOP\n         AIF   (T'&TABLE EQ 'O').E007\n         AIF   ('&TABLE'(1,1) NE '(').E007\n         ST    &TABLE(1),XLOCTBLE           FOC TABLE ADDRESS\n.E007    ANOP\n         AIF   (T'&STRING EQ 'O').E008\n         AIF   ('&STRING'(1,1) EQ '(').E008\n         LA    R0,&STRING                   STRING ADDRESS\n         ST    R0,XLOCSTRA                  SET STRING ADDRESS\n.E008    ANOP\n         AIF   (T'&STRLEN EQ 'O').E009\n         AIF   ('&STRLEN'(1,1) EQ '(').E009\n         LA    R0,&STRLEN                   STRING LENGTH\n         ST    R0,XLOCSTRL                  SET STRING LENGTH\n.E009    ANOP\n         AIF   (T'&RECORD EQ 'O').E010\n         AIF   ('&RECORD'(1,1) EQ '(').E010\n         LA    R0,&RECORD                   RECORD ADDRESS\n         ST    R0,XLOCRECA                  SET RECORD ADDRESS\n.E010    ANOP\n         AIF   (T'&RECLEN EQ 'O').E011\n         AIF   ('&RECLEN'(1,1) EQ '(').E011\n         LA    R0,&RECLEN                   RECORD LENGTH\n         ST    R0,XLOCRECL                  SAVE RECORD LENGTH\n.E011    ANOP\n         AIF   (T'&WORK EQ 'O').E012\n         AIF   ('&WORK'(1,1) EQ '(').E012\n         LA    R0,&WORK                     WORK AREA ADDRESS\n         ST    R0,XLOCWORK                  SET WORK AREA ADDRESS\n.E012    ANOP\n         AIF   (T'&TABLE EQ 'O').E013\n         AIF   ('&TABLE'(1,1) EQ '(').E013\n         LA    R0,&TABLE                    TABLE ADDRESS\n         ST    R0,XLOCTBLE                  SET TABLE ADDRESS\n.E013    ANOP\n         AIF   ('&TYPE' EQ 'INIT').E014\n         MVI   XLOCCMD,$XLOCS               SET COMMAND\n         AGO   .E015\n.E014    ANOP\n         MVI   XLOCCMD,$XLOCNEW             SET COMMAND\n.E015    ANOP\n         L     R15,XLOCEPA                  XLOC MODULE ENTRY POINT\n         BALR  R14,R15                      CALL XLOC\n         AIF   (T'&ERROR EQ 'O').E017\n         CLI   XLOCSTAT,$XLOCOK             SUCCESSFUL??\n         AIF   ('&ERROR'(1,1) EQ '(').E016\n         BNE   &ERROR                       NO\n         POP   USING\n         AGO   .EXIT\n.E016    ANOP\n         BNER  &ERROR(1)                    NO\n.E017    ANOP\n         POP   USING\n         AGO   .EXIT\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*   LIST   EXPANSION                                                 *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n.LIST    ANOP\n         AIF   (T'&NAME EQ 'O').ERR0080\n&NAME    DS    0F\n         AIF   ('&TYPE' EQ 'INIT').L001\n         DC    C'S'                         SCAN COMMAND\n         AGO   .L002\n.L001    ANOP\n         DC    C'N'                         NEW STRING COMMAND\n.L002    ANOP\n         DC    C' '                         STATUS BYTE\n         DC    C' '                         LEAST FREQUENT CHARACTER\n         DC    C' '\n         AIF   (T'&STRING EQ 'O').L003\n         AIF   ('&STRING'(1,1) EQ '(').L003\n         DC    A(&STRING.)                  STRING ADDRESS\n         AGO   .L004\n.L003    ANOP\n         DC    A(0)                         STRING ADDRESS\n.L004    ANOP\n         AIF   (T'&STRLEN EQ 'O').L005\n         AIF   ('&STRLEN'(1,1) EQ '(').L005\n         DC    A(&STRLEN)                   STRING LENGTH\n         AGO   .L006\n.L005    ANOP\n         DC    A(0)                         STRING LENGTH\n.L006    ANOP\n         AIF   (T'&RECORD EQ 'O').L007\n         AIF   ('&RECORD'(1,1) EQ '(').L007\n         DC    A(&RECORD.)                  RECORD ADDRESS\n         AGO   .L008\n.L007    ANOP\n         DC    A(0)                         RECORD ADDRESS\n.L008    ANOP\n         AIF   (T'&RECLEN EQ 'O').L009\n         AIF   ('&RECLEN'(1,1) EQ '(').L009\n         DC    A(&RECLEN.)                  RECORD LENGTH\n         AGO   .L010\n.L009    ANOP\n         DC    A(0)                         RECORD LENGTH\n.L010    ANOP\n         AIF   (T'&WORK EQ 'O').L011\n         AIF   ('&WORK'(1,1) EQ '(').L011\n         DC    A(&WORK.)                    WORK AREA ADDRESS\n         AGO   .L012\n.L011    ANOP\n         DC    A(0)                         WORK AREA ADDRESS\n.L012    ANOP\n         AIF   (T'&TABLE EQ 'O').L013\n         AIF   ('&TABLE'(1,1) EQ '(').L013\n         DC    A(&TABLE.)                   TABLE ADDRESS\n         AGO   .L014\n.L013    ANOP\n         DC    A(0)                         TABLE ADDRESS\n.L014    ANOP\n         DC    A(0)                         LEAST SEEN CHARACTER DSPL\n         DC    V(XLOC)                      XLOC MODULE ENTRY POINT\n         AGO   .EXIT\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*                  DSECT EXPANSION                                   *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n.DSECT   ANOP\nXLOCLIST DSECT\nXLOCCMD  DS    C             COMMAND\n$XLOCS   EQU   C'S'          .. SCAN\n$XLOCNEW EQU   C'N'          .. NEW STRING\nXLOCSTAT DS    C             STATUS\n$XLOCOK  EQU   C' '          .. SUCCESSFUL\n$XLOCNF  EQU   C'N'          .. SEARCH ARG NOT FOUND\n$XLOCER1 EQU   C'1'          .. SEARCH ARG LENGTH < 1\n$XLOCER2 EQU   C'2'          .. SEARCH ARG LENGTH > 256\nXLOCFOCC DS    C             LEAST FREQUENTLY EXPECTED CHARACTER\n         DS    C\nXLOCSTRA DS    A             SEARCH STRING ADDRESS\nXLOCSTRL DS    A             SEARCH STRING LENGTH\nXLOCRECA DS    A             CURRENT RECORD ADDRESS\nXLOCRECL DS    A             CURRENT RECORD LENGTH\nXLOCWORK DS    A             WORK AREA\nXLOCTBLE DS    A             FOC TABLE ADDRESS\nXLOCFOCD DS    A             DISPLACEMENT TO LEAST SEEN CHARACTER\nXLOCEPA  DS    A             ADDRESS OF XLOC MODULE\n         AGO   .EXIT\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*  GENERATE A DEFAULT FREQUENCY TABLE                                *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n.TABLE   ANOP\n         AIF   (T'&NAME EQ 'O').ERR0080\n&NAME    DS    0F\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'09040404040404040404040404040404'   X'00' - X'0F'\n         DC    X'04040404040404040404040404040404'   X'10' - X'1F'\n         DC    X'04040404040404040404040404040404'   X'20' - X'2F'\n         DC    X'04040404040404040404040404040404'   X'30' - X'3F'\n         DC    X'09040404040404040404040404040404'   X'40' - X'4F'\n         DC    X'04040404040404040404040404040404'   X'50' - X'5F'\n         DC    X'04040404040404040404040404040404'   X'60' - X'6F'\n         DC    X'04040404040404040404040404040404'   X'70' - X'7F'\n         DC    X'04090909090908080908040404040404'   X'80' - X'8F'\n         DC    X'04070709080909060409040404040404'   X'90' - X'9F'\n         DC    X'04040909050403020100040404040404'   X'A0' - X'AF'\n         DC    X'04040404040404040404040404040404'   X'B0' - X'BF'\n         DC    X'04090909090908080908040404040404'   X'C0' - X'CF'\n         DC    X'04070709080909060409040404040404'   X'D0' - X'DF'\n         DC    X'04040909050403020100040404040404'   X'E0' - X'EF'\n         DC    X'09090909090909090909040404040409'   X'F0' - X'FF'\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n*\n*             VALUES\n*  -------------------------------------------------------------------\n*  ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 X'00' X'FF' X'40'  ALL OTHERS\n*  99999889877989964999543210 9999999999    9     9     9       4\n*\n         AGO   .EXIT\n.* ------------------------------------------------------------------ *\n.*                                                                    *\n.*  ERROR MESSAGES                                                    *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n.ERR0010 MNOTE 8,'TYPE NOT SPECIFIED OR INVALID'\n         MEXIT\n.ERR0020 MNOTE 8,'NO MF OPERAND SPECIFIED OR INVALID'\n         MEXIT\n.ERR0030 MNOTE 8,'NO RECORD ADDRESS SPECIFIED'\n         MEXIT\n.ERR0040 MNOTE 8,'NO SEARCH STRING SPECIFIED'\n         MEXIT\n.ERR0050 MNOTE 8,'NO SUBSTRING LENGTH SPECIFIED'\n         MEXIT\n.ERR0060 MNOTE 8,'NO WORK AREA PROVIDED'\n         MEXIT\n.ERR0070 MNOTE 8,'NO FREQUENCY TABLE PROVIDED'\n         MEXIT\n.ERR0080 MNOTE 8,'NAME MUST BE SPECIFIED FOR MF=L OR TYPE=TABLE'\n         MEXIT\n.EXIT    ANOP\n         MEND\n./ ADD NAME=XSORT    0100-02291-02291-0122-00283-00283-00000-RLRICE\n         MACRO\n&NAME    XSORT &TYPE=CALL,             * TYPE OF CALL, DSECT OR CALL   +\n               &LRECL=,                * LOGICAL RECORD LENGTH         +\n               &OFFSET=,               * OFFSET INTO RECORD TO KEY     +\n               &KEYLEN=,               * LENGTH OF KEY                 +\n               &COUNT=,                * NUMBER OF ENTRIES             +\n               &DATA=,                 * ADDRESS OF DATA STRUCTURE     +\n               &ERROR=,                * ERROR ADDRESS                 +\n               &MF=I                   * MACRO FORMAT I,L, OR E\n.**********************************************************************\n.*                                                                    *\n.*     XSORT |TYPE=DSECT| |,LRECL=###| |,OFFSET=###| |,ERROR=XXXX|    *\n.*           |TYPE=CALL | | LRECL=(#)| | OFFSET=(#)|                  *\n.*                                                                    *\n.*           |,KEYLEN=###| |,COUNT=###| |,DATA=###| |,MF=(E,XXX)|     *\n.*           | KEYLEN=(#)| | COUNT=(#)| | DATA=(#)| | MF=(E,(#))|     *\n.*                                                  | MF=L      |     *\n.*                                                  | MF=I      |     *\n.*                                                                    *\n.*                                                                    *\n.*                                                                    *\n.*    TYPE=DSECT|CALL ------ TYPE OF MACRO INVOKATION                 *\n.*                                                                    *\n.*    ERROR=XXXX ----------- LABEL OF STATEMENT TO RECEIVE CONTROL    *\n.*                           IF AN ERROR OCCURS                       *\n.*                                                                    *\n.*    LRECL=#|(#) ---------- LOGICAL RECORD LENGTH, EITHER AN ABSOLUTE*\n.*                           VALUE OR THE LOW HALFWORD OF A REGISTER. *\n.*                                                                    *\n.*    OFFSET=#|(#) --------- OFFSET INTO LRECL FOR KEY, EITHER AN     *\n.*                           ABS VALUE OR LOW HALFWORD OF A REGISTER. *\n.*                                                                    *\n.*    KEYLEN=#|(#) --------- LENGTH OF KEY, EITHER AN ABS VALUE OR A  *\n.*                           LOW HALFWORD OF A REGISTER.              *\n.*                                                                    *\n.*    COUNT=#|(#) ---------- NUMBER OF RECORDS IN THE LIST TO SORT,   *\n.*                           EITHER AN ABS VALUE OR LOW HALFWORD      *\n.*                           OF A REGISTER                            *\n.*                                                                    *\n.*    DATA=X|(#) ----------- ADDRESS OF LIST TO SORT, EITHER A LABEL  *\n.*                           OR A REGISTER.                           *\n.*                                                                    *\n.*    MF=(E,XXXX) ---------- EXECUTE FORM OF THE MACRO. THIS MACRO    *\n.*    MF=(E(#))              USES A LIST PRE-BUILT BY THE LIST FORM   *\n.*                           TO MAINTAIN RE-ENTRANCY. MAY EITHER      *\n.*                           REFERENCE A LABEL OR A REGISTER MAY      *\n.*                           CONTAIN THE ADDRESS OF THE LIST.         *\n.*                                                                    *\n.*    MF=L ----------------- GENERATES A LIST. THIS FORM DOES NOT     *\n.*                           GENERATE EXECUTABLE CODE. IT IS USED     *\n.*                           IN CONJUNCTION WITH THE EXECUTE FORM     *\n.*                           TO CONSTRUCT A LIST (PARAMETER LIST).    *\n.*                                                                    *\n.*    MF=I ----------------- INLINE FORM. GENERATES THE PARAMETER     *\n.*                           LIST INLINE WITH EXECUTABLE CODE. THIS   *\n.*                           IS THE DEFAULT FORM.                     *\n.*                                                                    *\n.**********************************************************************\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         AIF   ('&TYPE' NE 'CALL').BADCALL\n         AIF   ('&MF(1)' EQ 'E').EXEC\n         AIF   ('&MF' EQ 'L').LIST\n         AIF   (T'&LRECL EQ 'O').NLRECL\n         AIF   (T'&OFFSET EQ 'O').NOFFSET\n         AIF   (T'&KEYLEN EQ 'O').NKEYLEN\n         AIF   (T'&COUNT EQ 'O').NCOUNT\n         AIF   (T'&DATA EQ 'O').NDATA\n.**********************************************************************\n.*                                                                    *\n.*                      INLINE EXPANSION                              *\n.*                                                                    *\n.**********************************************************************\n         AIF   (T'&NAME EQ 'O').NONAME\n&NAME    DS    0H\n.NONAME  ANOP\n         AIF   ('&LRECL'(1,1) NE '(').I001\n         STH   &LRECL(1),P001&SYSNDX\n.I001    ANOP\n         AIF   ('&OFFSET'(1,1) NE '(').I002\n         STH   &OFFSET(1),P002&SYSNDX\n.I002    ANOP\n         AIF   ('&KEYLEN'(1,1) NE '(').I003\n         STH   &KEYLEN(1),P003&SYSNDX\n.I003    ANOP\n         AIF   ('&COUNT'(1,1) NE '(').I004\n         STH   &COUNT(1),P004&SYSNDX\n.I004    ANOP\n         AIF   ('&DATA'(1,1) NE '(').I005\n         STCM  &DATA(1),15,P005&SYSNDX\n.I005    ANOP\n         BAL   1,EXS&SYSNDX          JUMP AROUND PARM LIST\n         AIF   ('&LRECL'(1,1) NE '(').I007\nP001&SYSNDX DC   AL2(0)              LRECL\n         AGO   .I007A\n.I007    ANOP\nP001&SYSNDX DC   AL2(&LRECL)         LRECL\n.I007A   ANOP\n         AIF   ('&OFFSET'(1,1) NE '(').I008\nP002&SYSNDX DC   AL2(0)              OFFSET\n         AGO   .I008A\n.I008    ANOP\nP002&SYSNDX DC   AL2(&OFFSET)        OFFSET\n.I008A   ANOP\n         AIF   ('&KEYLEN'(1,1) NE '(').I009\nP003&SYSNDX DC   AL2(0)              KEY LENGTH\n         AGO   .I009A\n.I009    ANOP\nP003&SYSNDX DC   AL2(&KEYLEN)        KEY LENGTH\n.I009A   ANOP\n         AIF   ('&COUNT'(1,1) NE '(').I010\nP004&SYSNDX DC   AL2(0)              COUNT\n         AGO   .I010A\n.I010    ANOP\nP004&SYSNDX DC   AL2(&COUNT)         COUNT\n.I010A   ANOP\n         AIF   ('&DATA'(1,1) NE '(').I011\nP005&SYSNDX DC   AL4(0)              DATA ADDRESS\n         AGO   .I011A\n.I011    ANOP\nP005&SYSNDX DC   AL4(&DATA)          DATA ADDRESS\n.I011A   ANOP\nEPA&SYSNDX DC   VL4(XSORT)           ENTRY POINT ADDRESS OF SORT RTN\nEXS&SYSNDX DS   0H\n         ICM  15,15,EPA&SYSNDX       LOAD ENTRY POINT ADDRESS\n         BALR 14,15                  CALL SORT ROUTINE\n         AIF  (T'&ERROR EQ 'O').I013\n         LTR  15,15                  CHECK IF ERROR\n         BNZ  &ERROR                 NOT ZERO, ABORT\n.I013    ANOP\n         AGO  .ENDMAC\n.**********************************************************************\n.*                                                                    *\n.*                 LIST FORM EXPANSION                                *\n.*                                                                    *\n.**********************************************************************\n.LIST    ANOP\n         AIF  (T'&NAME EQ 'O').NONAME1\n&NAME    DS    0F                    FORCE ALIGNMENT\n.NONAME1 ANOP\n         AIF  (T'&LRECL EQ 'O').L001\nL001&SYSNDX DC   AL2(&LRECL)         LOGICAL RECORD LENGTH\n         AGO  .L001A\n.L001    ANOP\nL001&SYSNDX DC   AL2(0)              LOGICAL RECORD LENGTH\n.L001A   ANOP\n         AIF  (T'&OFFSET EQ 'O').L002\nL002&SYSNDX DC   AL2(&OFFSET)        OFFSET\n         AGO  .L002A\n.L002    ANOP\nL002&SYSNDX DC   AL2(0)              OFFSET\n.L002A   ANOP\n         AIF  (T'&KEYLEN EQ 'O').L003\nL003&SYSNDX DC   AL2(&KEYLEN)        KEY LENGTH\n         AGO  .L003A\n.L003    ANOP\nL003&SYSNDX DC   AL2(0)              KEY LENGTH\n.L003A   ANOP\n         AIF  (T'&COUNT EQ 'O').L004\nL004&SYSNDX DC   AL2(&COUNT)         COUNT OF RECORDS\n         AGO  .L004A\n.L004    ANOP\nL004&SYSNDX DC   AL2(0)              COUNT OF RECORDS\n.L004A   ANOP\n         AIF  (T'&DATA EQ 'O').L005\nL005&SYSNDX DC   AL4(&DATA)          ADDRESS OF DATA\n         AGO  .L005A\n.L005    ANOP\nL005&SYSNDX DC   AL4(0)              ADDRESS OF DATA\n.L005A   ANOP\n         DC    VL4(XSORT)             ENTRY POINT ADDRESS\n         AGO  .ENDMAC\n.**********************************************************************\n.*                                                                    *\n.*                   EXECUTE FORM EXPANSION                           *\n.*                                                                    *\n.**********************************************************************\n.EXEC    ANOP\n         AIF  (T'&NAME EQ 'O').E001\n&NAME    DS   0H\n.E001    ANOP\n         LA   1,&MF(2)               LOAD ADDRESS OF PARM LIST\n         AIF  (T'&LRECL EQ 'O').E002\n         AIF  ('&LRECL'(1,1) EQ '(').E002A\n         LA   0,&LRECL               LOAD LRECL\n         STH  0,0(,1)                STORE LRECL\n         AGO  .E002\n.E002A   ANOP\n         STH  &LRECL(1),0(,1)        STORE LRECL\n.E002    ANOP\n         AIF  (T'&OFFSET EQ 'O').E003\n         AIF  ('&OFFSET'(1,1) EQ '(').E003A\n         LA   0,&OFFSET              LOAD OFFSET\n         STH  0,2(,1)                STORE OFFSET\n         AGO  .E003\n.E003A   ANOP\n         STH  &OFFSET(1),2(,1)       STORE OFFSET\n.E003    ANOP\n         AIF  (T'&KEYLEN EQ 'O').E004\n         AIF  ('&KEYLEN'(1,1) EQ '(').E004A\n         LA   0,&KEYLEN              LOAD KEYLEN\n         STH  0,4(,1)                STORE KEYLEN\n         AGO  .E004\n.E004A   ANOP\n         STH  &KEYLEN(1),4(,1)       STORE KEYLEN\n.E004    ANOP\n         AIF  (T'&COUNT EQ 'O').E005\n         AIF  ('&COUNT'(1,1) EQ '(').E005A\n         LA   0,&COUNT               LOAD COUNT\n         STH  0,6(,1)                STORE COUNT\n         AGO  .E005\n.E005A   ANOP\n         STH  &COUNT(1),6(,1)        STORE COUNT\n.E005    ANOP\n         AIF  (T'&DATA EQ 'O').E006\n         AIF  ('&DATA'(1,1) EQ '(').E006A\n         LA   0,&DATA                LOAD DATA ADDRESS\n         STCM 0,15,8(1)              STORE DATA ADDRESS\n         AGO  .E006\n.E006A   ANOP\n         STCM &DATA(1),15,8(1)       STORE DATA ADDRESS\n.E006    ANOP\n         L    15,12(,1)              LOAD ENTRY POINT ADDRESS\n         BALR 14,15                  CALL SORT ROUTINE\n         AIF  (T'&ERROR EQ 'O').E008\n         LTR  15,15                  WAS THERE AN ERROR ???\n         BNZ  &ERROR                 YES, BRANCH\n.E008    ANOP\n         AGO  .ENDMAC\n.**********************************************************************\n.*                                                                    *\n.*                 TYPE=DSECT EXPANSION                               *\n.*                                                                    *\n.**********************************************************************\n.DSECT   ANOP\n         DSECT\n         AIF   (T'&NAME EQ 'O').D001\n&NAME    DS    0F\n.D001    ANOP\n***********************************************************************\n*                                                                     *\n*      * * * * * * *  SORT PARAMETER LIST FORMAT  * * * * * * *       *\n*                                                                     *\n*     0 (00) - +----------+----------+                                *\n*              |  PLRECL  |  POFFSET |                                *\n*     4 (04) - +----------+----------+                                *\n*              | PKEYLEN  |  PCOUNT  |                                *\n*     8 (08) - +----------+----------+                                *\n*              |       PDATA         |                                *\n*    12 (0C) - +---------------------+                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPLRECL   DS    H                     LOGICAL RECORD LENGTH\nPOFFSET  DS    H                     OFFSET INTO RECORD FOR KEY\nPKEYLEN  DS    H                     LENGTH OF KEY\nPCOUNT   DS    H                     NUMBER OF ENTRIES IN LIST\nPDATA    DS    A                     ADDRESS OF LIST TO SORT\n         AGO   .ENDMAC\n.**********************************************************************\n.*                                                                    *\n.*                  ERROR MESSAGES                                    *\n.*                                                                    *\n.**********************************************************************\n.BADCALL ANOP\n         MNOTE 12,'&TYPE IS INVALID CALL TYPE.'\n         MEXIT\n.NLRECL  ANOP\n         MNOTE 8,'LRECL OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'\n         MEXIT\n.NOFFSET ANOP\n         MNOTE 8,'OFFSET OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'\n         MEXIT\n.NKEYLEN ANOP\n         MNOTE 8,'KEYLEN OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'\n         MEXIT\n.NCOUNT  ANOP\n         MNOTE 8,'COUNT OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'\n         MEXIT\n.NDATA   ANOP\n         MNOTE 8,'DATA OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'\n         MEXIT\n.ENDMAC  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SOURCE": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02)\\x1f\\x01\\x02)\\x1f\\x01&\\x18\\xf5\\x18\\xf5\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-18T00:00:00", "modifydate": "2002-10-18T01:26:00", "lines": 6389, "newlines": 6389, "modlines": 0, "user": "RLRICE"}, "text": "./ ADD NAME=AIXUTIL  0100-02291-02291-0123-00433-00433-00000-RLRICE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   If a VSAM alternate index is built on a large base cluster,       *\n*   IDCAMS may not be able to sort all of the data in core.  The      *\n*   external work files used by IDCAMS must be VSAM ESDSs.  This      *\n*   causes several problems getting the JCL in to production control. *\n*   This utility builds the AIX by reading the base cluster and       *\n*   calling the SORT utility to sort the records.  The SORT utility   *\n*   allows the use of non-VSAM temporary work files that can be       *\n*   easily handled by production control.  Also IDCAMS sorts the      *\n*   entire base record, this utility only sorts the alternate index   *\n*   key and base keys so the data involved in the sort is much        *\n*   smaller and efficient.                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nAIXUTIL  CSECT\n         USING AIXUTIL,R12         DEFINE BASE                          ASE00100\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT                       ASE00120\n         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS  ASE00130\n         LA    R13,SAVEAREA        POINT TO OUR SAVE AREA               ASE00140\n         ST    R13,8(R2)           CHAIN FORWARD                        ASE00150\n         ST    R2,4(R13)           CHAIN BACKWARD                       ASE00160\n         B     INIT0000\n         DC    CL6'&SYSDATE'       DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'       TIME OF ASSEMBLY\n         DC    C'AIXUTIL'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Open print, base, and aix datasets                           *\n*        The base cluster is verified to be a KSDS.                   *\n*        The base cluster key length and relative key position        *\n*           are obtained via SHOWCB.                                  *\n*        The AIX key and position in the base cluster are obtained    *\n*           via SHOWCB from the AIX ACB.                              *\n*        Once the key lengths and positions are known:                *\n*            1) the work file LRECL and BLKSIZE can be calculated     *\n*            2) an I/O area for the work file can be GEMTAINed        *\n*            3) the sort key length can be filled in in the SORT      *\n*               statement                                             *\n*            4) the record size can be filled in in the RECORD        *\n*               statement                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0000 DS    0H\n         OPEN  (AIXPRT,OUTPUT)     OPEN PRINTER DCB\n         OPEN  (BASE)              OPEN ACB\n         CH    R15,H4              ACB OPENED SUCCESSFULLY?\n         BH    ERR0010             NO\n         MVC   PLINE(MSG01L),MSG01 COPY MESSAGE 01\n         BAL   R10,PRT0000         PRINT MESSAGE\n         TESTCB ACB=BASE,          TEST ACB                            +\n               ATRB=KSDS,          .. IS IT A KSDS?                    +\n               ERET=ERR0020        .. NO\n         SHOWCB ACB=BASE,          SHOW ACB ATTRIBUTES                 +\n               AREA=BASEDATA,      .. AREA RETURNED                    +\n               LENGTH=8,           .. SIZE OF 'BASEDATA'               +\n               FIELDS=(KEYLEN,RKP)    RETURN KEY LENGTH AND POSITION\n         LTR   R15,R15             SHOWCB SUCCESSFUL?\n         BNZ   ERR0030             NO\n         OPEN  (AIX)               OPEN ALTERNATE INDEX\n         CH    R15,H4              ACB OPENED SUCCESSFULLY?\n         BH    ERR0040             NO\n         MVC   PLINE(MSG07L),MSG07 COPY MESSAGE 07\n         BAL   R10,PRT0000         PRINT MESSAGE\n         SHOWCB ACB=AIX,           SHOW ACB ATTRIBUTES                 +\n               AREA=AIXDATA,       .. AREA RETURNED                    +\n               LENGTH=8,           .. SIZE OF 'AIXDATA'                +\n               FIELDS=(KEYLEN,AIXRKP) RETURN KEY LENGTH AND POSITION\n         LTR   R15,R15             OPEN SUCCESSFUL?\n         BNZ   ERR0050             NO\n         LA    R2,SORTIN           WORK FILE DCB\n         USING IHADCB,R2           DEFINE BASE\n         L     R1,BASEKEYL         BASE CLUSTER KEY LENGTH\n         A     R1,AIXKEYL          PLUS AIX KEY LENGTH\n         STH   R1,DCBLRECL         SET LRECL\n         CVD   R1,DWORD            CONVERT TO DECIMAL\n         ED    MSG08RSZ,DWORD+5    EDIT RECORD SIZE\n         ED    SORTKEYL,DWORD+5    EDIT IN SORT KEY LENGTH\n         ED    SORTRECL,DWORD+5    EDIT SORT RECORD SIZE\n         SR    R8,R8               CLEAR REGISTER\n         L     R9,$BLKSIZE         TARGET BLOCK SIZE\n         DR    R8,R1               COMPUTE RECORDS PER BLOCK\n         SR    R8,R8               DROP REMAINDER\n         MR    R8,R1               COMPUTE ACTUAL BLOCK SIZE\n         STH   R9,DCBBLKSI         SET BLOCK SIZE\n         CVD   R9,DWORD            CONVERT TO DECIMAL\n         ED    MSG08BSZ,DWORD+5    EDIT BLOCK SIZE\n         MVC   PLINE(MSG08L),MSG08 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Now that the work file LRECL and BLKSIZE are set, we can     *\n*        open the workfile DCB.                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         OPEN  (SORTIN,OUTPUT)     OPEN SORTIN (WORK FILE)\n         GETMAIN RU,               ACQUIRE AN I/O AREA                 +\n               LV=(R9),            .. SIZE OF AREA                     +\n               LOC=BELOW           .. FROM 24-BIT STORAGE\n         LR    R8,R1               COPY I/O STORAGE ADDRESS\n         L     R2,BASEKEYL         BASE KEY LENGTH\n         STC   R2,AIXRECPL         SET POINTER LENGTH (BASE KEY LEN)\n         BCTR  R2,0                FOR EXECUTES\n         L     R3,BASERKP          BASE CLUSTER KEY POSITION\n         L     R4,AIXKEYL          AIX KEY LENGTH\n         STC   R4,AIXRECAL         SET ALTERNATE KEY LENGTH\n         BCTR  R4,0                FOR EXECUTES\n         L     R5,AIXRKP           AIX KEY POSTION IN BASE CLUSTER\n         LA    R6,1(R4,R8)         BASE KEY ADDRESS IN I/O AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Read the base cluster and write the work file records        *\n*                                                                     *\n*         Data in the records is                                      *\n*              AIX key                                                *\n*              BASE key                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPROC0010 DS    0H\n         GET   RPL=READRPL         READ A RECORD\n         LTR   R15,R15             READ SUCCESSFUL?\n         BNZ   ERR0060             NO\n         L     R7,VSAMRECA         BASE RECORD ADDRESS\n         LA    R1,0(R5,R7)         AIX KEY ADDRESS IN BASE RECORD\n         EX    R4,AIXKYMV1         COPY AIX KEY TO WORK RECORD\n         LA    R1,0(R3,R7)         BASE KEY ADDRESS IN BASE RECORD\n         EX    R2,BSEKYMV1         COPY BASE KEY TO WORK AREA\n         PUT   SORTIN,(R8)         WRITE WORK RECORD\n         AP    WORKCNT,P1          ADD 1 TO NUMBER OF RECORDS WRITTEN\n         B     PROC0010            LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        EOF has been reached on the base cluster                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPROC0020 DS    0H\n         CLOSE SORTIN\n         CLOSE BASE\n         ED    MSG10CNT,WORKCNT    EDIT NUMBER OF RECORDS WRITTEN\n         MVC   PLINE(MSG10L),MSG10 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Call SORT to sort the work file into AIX key sequence        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R1,SORTPRMP         SORT PARM POINTER ADDRESS\n         LINK  EP=SORT             LINK TO SORT\n         LTR   R15,R15             SORT SUCCESSFUL?\n         BNZ   ERR0070             NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Open the work file as input and build the AIX                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         OPEN  (SORTIN,INPUT)      OPEN WORK FILE\n         GET   SORTIN,(R8)         READ A WORK FILE RECORD\n         B     PROC0040            ENTER MAIN LOGIC\nPROC0030 DS    0H\n         GET   SORTIN,(R8)         READ NEXT WORK FILE RECORD\n         EX    R4,AIXKYCLC         SAME KEY AS LAST RECORD?\n         BE    PROC0050            YES\n         L     R10,VSAMRECL        RECORD SIZE\n         MODCB RPL=WRITERPL,       MODIFY THE RPL                      +\n               RECLEN=(R10)        .. INSERT CURRENT RECORD SIZE\n         PUT   RPL=WRITERPL        WRITE THE RECORD TO TO AIX\n         LTR   R15,R15             SUCCESSFUL?\n         BNZ   ERR0080             NO\nPROC0040 DS    0H\n         XC    AIXRECP#,AIXRECP#   RESET NUMBER OF KEYS IN RECORD\n         LA    R1,6(R2)            MINIMUM RECORD SIZE (5+BASE KEY LEN)\n         ST    R1,VSAMRECL         SET RECORD LENGTH\n         EX    R4,AIXKYMV2\n         LA    R7,AIXRECKY+1(R4)   FIRST BASE KEY AREA\nPROC0050 DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,AIXRECP#       NUMBER OF POINTERS SO FAR\n         LA    R1,1(R1)            PLUS 1 KEY\n         STCM  R1,3,AIXRECP#       SAVE TOTAL\n         L     R1,VSAMRECL         RECORD LENGTH SO FAR\n         LA    R1,1(R1,R2)         PLUS LENGTH OF 1 MORE KEY\n         ST    R1,VSAMRECL         SAVE TOTAL\n         EX    R2,BSEKYMV2         COPY KEY TO AIX RECORD\n         LA    R7,1(R7,R2)         UPDATE OUTPUT ADDRESS\n         B     PROC0030            READ ALL WORK RECORDS\nPROC0060 DS    0H\n         L     R10,VSAMRECL        RECORD SIZE\n         MODCB RPL=WRITERPL,       MODIFY THE RPL                      +\n               RECLEN=(R10)        .. INSERT CURRENT RECORD SIZE\n         PUT   RPL=WRITERPL        WRITE LAST RECORD TO AIX\n         LTR   R15,R15             SUCCESSFUL?\n         BNZ   ERR0080             NO\n         B     EXIT0000            AND EXIT\nJUNKMVC  MVC   PLINE(0),AIXREC\nAIXKYMV1 MVC   0(0,R8),0(R1)       COPY AIX KEY TO WORK RECORD\nAIXKYMV2 MVC   AIXRECKY(0),0(R8)   COPY AIX KEY TO AIX RECORD\nAIXKYCLC CLC   AIXRECKY(0),0(R8)   CHECK KEYS\nBSEKYMV1 MVC   0(0,R6),0(R1)       COPY BASE KEY TO WORK RECOD\nBSEKYMV2 MVC   0(0,R7),0(R6)       COPY BASE KEY TO AIX RECORD\nERR0010  DS    0H\n         ST    R15,DWORD           SAVE RETURN CODE\n         UNPK  MSG02RC(5),DWORD+2(3)\n         MVZ   MSG02RC,HEX0F0F     CLEAR ZONES\n         TR    MSG02RC,HEXCHAR     TRANSLATE TO PRINTABLE\n         MVI   MSG02RC+4,C' '      RESTORE BLANK\n         MVC   PLINE(MSG02L),MSG02 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n         ABEND 1,DUMP,,USER\nERR0020  DS    0H\n         MVC   PLINE(MSG03L),MSG03 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n         MVI   RC,16               SET RETURN CODE\n         B     EXIT0000            EXIT\nERR0030  DS    0H\n         ST    R15,DWORD           SAVE RETURN CODE\n         UNPK  MSG04RC(5),DWORD+2(3)\n         MVZ   MSG04RC,HEX0F0F     CLEAR ZONES\n         TR    MSG04RC,HEXCHAR     TRANSLATE TO PRINTABLE\n         MVI   MSG04RC+4,C' '      RESTORE BLANK\n         MVC   PLINE(MSG04L),MSG04 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n         ABEND 2,DUMP,,USER\nERR0040  DS    0H\n         ST    R15,DWORD           SAVE RETURN CODE\n         UNPK  MSG05RC(5),DWORD+2(3)\n         MVZ   MSG05RC,HEX0F0F     CLEAR ZONES\n         TR    MSG05RC,HEXCHAR     TRANSLATE TO PRINTABLE\n         MVI   MSG05RC+4,C' '      RESTORE BLANK\n         MVC   PLINE(MSG05L),MSG05 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n         ABEND 3,DUMP,,USER\nERR0050  DS    0H\n         ST    R15,DWORD           SAVE RETURN CODE\n         UNPK  MSG06RC(5),DWORD+2(3)\n         MVZ   MSG06RC,HEX0F0F     CLEAR ZONES\n         TR    MSG06RC,HEXCHAR     TRANSLATE TO PRINTABLE\n         MVI   MSG06RC+4,C' '      RESTORE BLANK\n         MVC   PLINE(MSG06L),MSG06 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n         ABEND 4,DUMP,,USER\nERR0060  DS    0H\n         ST    R15,DWORD           SAVE RETURN CODE\n         UNPK  MSG09RC(5),DWORD+2(3)\n         MVZ   MSG09RC,HEX0F0F     CLEAR ZONES\n         TR    MSG09RC,HEXCHAR     TRANSLATE TO PRINTABLE\n         MVI   MSG09RC+4,C' '      RESTORE BLANK\n         MVC   PLINE(MSG09L),MSG09 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n         ABEND 5,DUMP,,USER\nERR0070  DS    0H\n         ST    R15,DWORD           SAVE RETURN CODE\n         UNPK  MSG11RC(5),DWORD+2(3)\n         MVZ   MSG11RC,HEX0F0F     CLEAR ZONES\n         TR    MSG11RC,HEXCHAR     TRANSLATE TO PRINTABLE\n         MVI   MSG11RC+4,C' '      RESTORE BLANK\n         MVC   PLINE(MSG11L),MSG11 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n         ABEND 6,DUMP,,USER\nERR0080  DS    0H\n         ST    R15,DWORD           SAVE RETURN CODE\n         UNPK  MSG12RC(5),DWORD+2(3)\n         MVZ   MSG12RC,HEX0F0F     CLEAR ZONES\n         TR    MSG12RC,HEXCHAR     TRANSLATE TO PRINTABLE\n         MVI   MSG12RC+4,C' '      RESTORE BLANK\n         MVC   PLINE(MSG12L),MSG12 COPY MESSAGE\n         BAL   R10,PRT0000         PRINT MESSAGE\n         ABEND 7,DUMP,,USER\nPRT0000  DS    0H\n         PUT   AIXPRT,PLINE        WRITE PRINT LINE\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         BR    R10                 DONE\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  END OF JOB PROCESSING                             *\n*                                                                    *\n*--------------------------------------------------------------------*\nEXIT0000 DS    0H\n         CLOSE AIXPRT\n         CLOSE SORTIN\n         CLOSE AIX\n         SR    R15,R15             CLEAR REGISTER\n         IC    R15,RC              SET RETURN CODE\n         L     R13,4(R13)          RESTORE SAVE AREA ADDRESS\n         L     R14,12(R13)         RESTORE R14\n         LM    R0,R12,20(R13)      RESTORE REMAINING REGISTERS\n         BR    R14                 EXIT\n         LTORG\n*--------------------------------------------------------------------*\n*                                                                    *\n*                CONSTANTS/WORKAREAS                                 *\n*                                                                    *\n*--------------------------------------------------------------------*\nDWORD    DS    D\nSAVEAREA DS    18F\nBASEDATA DS    0F\nBASEKEYL DS    F                   BASE KSDS KEY LENGTH\nBASERKP  DS    F                   BASE KSDS RELATIVE KEY POSITION\nAIXDATA  DS    0F\nAIXKEYL  DS    F                   AIX KEY LENGTH\nAIXRKP   DS    F                   AIX KEY POSITION IN BASE CLUSTER\n$BLKSIZE DC    A(8000)\nVSAMRECA DS    F                   VSAM RECORD ADDRESS\nVSAMRECL DS    F                   VSAM RECORD LENGTH\nSORTPRMP DC    A(SORTPRM+X'80000000')\n         DS    H                   ALIGNMENT\nSORTPRM  DC    Y(SORTPRML-2)       LENGTH OF PARM LIST\n         DC    A(SORTBEGN)         SORT STATEMENT BEGINNING\n         DC    A(SORTEND)          SORT STATEMENT END\n         DC    A(RECDBEGN)         RECORD STATEMENT BEGINNING\n         DC    A(RECDEND)          RECORD STATEMENT END\n         DC    A(0)                E15/E32 EXIT ADDRESS\n         DC    A(0)                E35 EXIT ADDRESS\nSORTPRML EQU   *-SORTPRM\nH4       DC    H'4'\nH8       DC    H'8'\nSORTBEGN DS    0C\n         DC    C' SORT FIELDS=('\nSORTKEYP DC    CL5'00001'          DOESN'T CHANGE\n         DC    C','\nSORTKEYL DC    XL6'F02020202020'\n         DC    C',CH,A)'\nSORTEND  DS    0C\nRECDBEGN DS    0C\n         DC    C' RECORD TYPE=F,LENGTH='\nSORTRECL DC    XL6'F02020202020'\n         DC    C' '\nRECDEND  DS    0C\nRC       DC    X'00'\nWORKCNT  DC    PL4'0'\nP1       DC    P'1'\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\n         DC    C' '\nPLINE    DC    CL133' '\nMSG01    DC    C'BASE ACB IS OPEN'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    C'BASE ACB OPEN ERROR, R15='\nMSG02RC  DC    CL4' '\n         DC    C' '\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    C'BASE CLUSTER IS NOT A KSDS'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    C'BASE ACB SHOWCB ERROR, R15='\nMSG04RC  DC    CL4' '\n         DC    C' '\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    C'AIX ACB OPEN ERROR, R15='\nMSG05RC  DC    CL4' '\n         DC    C' '\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    C'AIX ACB SHOWCB ERROR, R15='\nMSG06RC  DC    CL4' '\n         DC    C' '\nMSG06L   EQU   *-MSG06\nMSG07    DC    C'AIX ACB IS OPEN'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    C'WORK FILE RECORD SIZE='\nMSG08RSZ DC    X'402020202120'\n         DC    C', BLOCK SIZE='\nMSG08BSZ DC    X'402020202120'\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    C'BASE CLUSTER READ ERROR, R15='\nMSG09RC  DC    CL4' '\n         DC    C' '\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    C'NUMBER OF RECORDS IN WORK FILE='\nMSG10CNT DC    X'4020202020202120'\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    C'SORT FAILED, R15='\nMSG11RC  DC    CL4' '\n         DC    C' '\nMSG11L   EQU   *-MSG11\nMSG12    DS    0C\n         DC    C'AIX PUT FAILED, R15='\nMSG12RC  DC    CL4' '\n         DC    C' '\nMSG12L   EQU   *-MSG12\nAIXPRT   DCB   DSORG=PS,                                               +\n               DDNAME=AIXPRT,                                          +\n               RECFM=FBA,                                              +\n               LRECL=L'PLINE,                                          +\n               MACRF=PM\nSORTIN   DCB   DSORG=PS,                                               +\n               DDNAME=SORTIN,                                          +\n               RECFM=FB,                                               +\n               LRECL=0,                                                +\n               BLKSIZE=0,                                              +\n               EODAD=PROC0060,                                         +\n               MACRF=(PM,GM)\nREADRPL  RPL   AM=VSAM,                                                +\n               ACB=BASE,                                               +\n               AREA=VSAMRECA,                                          +\n               AREALEN=4,                                              +\n               OPTCD=(KEY,SEQ,FWD,SYN,NUP,LOC)\nWRITERPL RPL   AM=VSAM,                                                +\n               ACB=AIX,                                                +\n               AREA=AIXREC,                                            +\n               RECLEN=0,                                               +\n               OPTCD=(KEY,SEQ,FWD,SYN,MVE)\nBASE     ACB   AM=VSAM,                                                +\n               DDNAME=BASE,                                            +\n               EXLST=BASEEXIT,                                         +\n               MACRF=(IN)\nBASEEXIT EXLST AM=VSAM,                                                +\n               EODAD=(PROC0020,A)\nAIX      ACB   AM=VSAM,                                                +\n               DDNAME=AIX,                                             +\n               MACRF=(OUT,AIX)\nAIXREC   DS    0A\n         DC    XL1'01'             INDEX CONTAINS PRIME KEYS\nAIXRECPL DC    XL1'00'             POINTER LENGTH (BASE KEY LENGTH)\nAIXRECP# DC    XL2'0000'           NUMBER OF POINTERS IN THIS RECORD\nAIXRECAL DC    XL1'00'             ALTERNATE KEY LENGTH\nAIXRECKY DS    4000X               ALTERNATE KEYS\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         DCBD  DSORG=PS\n*---------------------------------------------------------------------*\n*                  REGISTER EQUATES                                   *\n*---------------------------------------------------------------------*\n         COPY  REGEQU\n         END   AIXUTIL\n./ ADD NAME=FILECOMM 0100-02291-02291-0123-00008-00008-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FILE UTILITY COMMON AREAS                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nFILECOMM CSECT\n         FILECOMM\n         END   FILECOMM\n./ ADD NAME=FILEPH00 0100-02291-02291-0123-00588-00588-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*           THIS PHASE:                                               *\n*              1) OPENS THE FILES                                     *\n*              2) READS THE CONTROL CARDS                             *\n*              3) DOES LIMITED PARAMETER VALIDATION CHECKING          *\n*              4) PASSES CONTROL TO THE CROSS CHECKING PHASE          *\n*                                                                     *\n*---------------------------------------------------------------------*\nFILEPH00 CSECT\n         USING FILEPH00,R15            SPECIFY CSECT BASE\n         ID                            DATE AND TIME COMPILED\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         L     R12,VCOMM               COMMON MODULE ADDRESS\n         USING FILECOMM,R12            DEFINE COMMON BASE\n         LA    R2,COMSAVE              SAVE AREA ADDRESS\n         ST    R13,4(R2)               CHAIN\n         ST    R2,8(R13)               CHAIN\n         LR    R13,R2                  POINT TO NEW SAVE AREA\n         LR    R11,R15                 LOAD NEW BASE REGISTER\n         LA    R10,2048(R11)           2ND BASE REGISTER\n         LA    R10,2048(R10)           2ND BASE REGISTER\n         DROP  R15                     DISCONTINUE OLD BASE\n         USING FILEPH00,R11,R10        RESUME WITH NEW BASE\n         USING IHADCB,R2               DEFINE DCB DSECT BASE\n         LA    R2,PRINTER\n         OPEN  ((R2),OUTPUT)           OPEN PRINT FILE\n         LA    R2,SYSUT1\n         OPEN  ((R2),INPUT)            OPEN INPUT FILE\n         RDJFCB MF=(E,JFCBREQ)         READ JFCB\n*---------------------------------------------------------------------*\n*                                                                     *\n*           SCAN THE TIOT FOR A 'SYSIN' DD                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EXTRACT TIOTADDR,FIELDS=TIOT  EXTRACT ADDRESS OF TIOT          WMW02330\n         L     R3,TIOTADDR             LOAD ADDRESS OF MY TIOT          WMW08140\n         USING TIOT1,R3                DECLARE DSECT BASE               WMW08150\n         SR    R4,R4                   CLEAR FOR TIOT ENTRY LENGTH      WMW08160\nTIOT0010 DS    0H                                                       WMW08180\n         ICM   R4,1,TIOELNGH           INSERT LENGTH OF THIS ENTRY      WMW08190\n         BZ    PHSE0000                SYSIN DD DOES NOT EXIST          WMW08200\n         CLC   TIOEDDNM,=CL8'SYSIN'    IS SYSIN DD PRESENT ???          WMW08210\n         BE    READ0000                YES                              WMW08220\nTIOT0020 DS    0H                                                       WMW08390\n         AR    R3,R4                   ADD LENGTH TO BASE               WMW08400\n         B     TIOT0010                KEEP CHECKING THE TIOT           WMW08410\n*---------------------------------------------------------------------*\n*                                                                     *\n*           SYSIN DD EXISTS, SO PROCESS CONTROL CARDS                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nREAD0000 DS    0H\n         LA    R2,SYSIN\n         LA    R1,CLSE0000             END OF DATA ROUTINE ADDRESS\n         STCM  R1,7,DCBEODAD+1         INSERT ROUTINE ADDRESS IN DCB\n         OPEN  ((R2),INPUT)            OPEN CONTROL FILE\n         BAL   R9,HEADINGS             PRINT HEADINGS\nREAD0010 DS    0H\n         LA    R2,SYSIN\n         GET   (R2),CARDAREA           READ A CONTROL RECORD\n         MVC   PLINE+1(L'CARDAREA),CARDAREA\n         MVI   PLINE,C'0'              DOUBLE SPACE\n         BAL   R9,PRT0000              PRINT CONTROL CARD\n         CLI   CARDAREA,C'*'           COMMENT CARD??\n         BE    READ0010                YES\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK FOR KEYWORDS                                        *\n*                                                                     *\n*       WITHIN THE KEYWORD PROCESSING ROUTINES REGISTER USAGE IS:     *\n*       R7  CURRENT ADDRESS IN WORK AREA                              *\n*       R3  ADDRESS OF NUMERIC TARGETS                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nPARM0000 DS    0H\n         LA    R7,CARDAREA             INITIALIZE CURRENT ADDRESS REG\nPARM0010 DS    0H\n         CLI   0(R7),C' '              END OF CARD?\n         BE    READ0010                YES\n         CLC   =C'SKIP=',0(R7)         SKIP CONTROL CARD?\n         BE    SKIP0000                YES\n         CLC   =C'COUNT=',0(R7)        COUNT CONTROL CARD?\n         BE    COUNT000                YES\n         CLC   =C'MAXLINES=',0(R7)     OUTPUT LINES LIMIT CARD?\n         BE    MAXL0000                YES\n         CLC   =C'SCAN=',0(R7)         SCAN1 VALUE CONTROL CARD?\n         BE    SCAN1010                YES\n         CLC   =C'SCAN1=',0(R7)        SCAN1 VALUE CONTROL CARD?\n         BE    SCAN1000                YES\n         CLC   =C'ZONE=',0(R7)         ZONE1 CONTROL CARD?\n         BE    ZONE1010                YES\n         CLC   =C'ZONE1=',0(R7)        ZONE1 CONTROL CARD?\n         BE    ZONE1000                YES\n         CLC   =C'SCAN2=',0(R7)        SCAN2 VALUE CONTROL CARD?\n         BE    SCAN2000                YES\n         CLC   =C'ZONE2=',0(R7)        ZONE2 CONTROL CARD?\n         BE    ZONE2000                YES\n         CLC   =C'TZONE=',0(R7)        TRIGGER ZONE CARD?\n         BE    TZONE000                YES\n         CLC   =C'TRIGGER=',0(R7)      TRIGGER CONTROL CARD?\n         BE    TRGR0000                YES\n         CLC   =C'TITLE=',0(R7)        TITLE CONTROL CARD?\n         BE    TITLE000                YES\n         CLC   =C'NOHEX',0(R7)         NO HEX?\n         BE    NOHEX000                YES\n         CLC   =C'SINGLE',0(R7)        SINGLE SPACING REQUEST??\n         BE    SPCE0000                YES\n         CLC   =C'SCANCTRL',0(R7)      SCAN CONTROL REQUEST??\n         BE    SCTRL000                YES\n         CLC   =C'COPY',0(R7)          COPY REQUEST??\n         BE    COPY0000                YES\n         CLC   =C'HELP',0(R7)          HELP REQUEST??\n         BE    HELP0000                YES\n         CLC   =C'FIRST100',0(R7)      FIRST100 REQUEST??\n         BE    FIRST100                YES\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0006           INVALID PARAMETER\n         BAL   R9,PRT0000              PRINT MESSAGE\n         B     READ0010                READ NEXT STATEMENT\nSPCE0000 DS    0H\n         LA    R7,7(R7)                POINT PAST KEYWORD\n         MVI   COMSPACE,$SINGLE        SET SINGLE SPACING\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nNOHEX000 DS    0H\n         MVI   COMHEX,C' '             SET NO HEX FLAG\n         LA    R7,6(R7)                POINT PAST KEYWORD\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSKIP0000 DS    0H\n         LA    R7,5(R7)                POINT TO END OF KEYWORD\n         OI    COMFLAG,$SKIP           INDICATE SKIP REQUESTED\n         LA    R3,COMSKIP              POINT TO OUTPUT AREA\n         BAL   R8,CNV0000              CONVERT QUANTITY\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nCOUNT000 DS    0H\n         LA    R7,6(R7)                POINT END OF KEYWORD\n         LA    R3,COMCOUNT             POINT TO OUTPUT AREA\n         OI    COMFLAG,$COUNT          TURN ON COUNT FLAG\n         BAL   R8,CNV0000              GO CONVERT AMOUNT\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nMAXL0000 DS    0H\n         LA    R7,9(R7)                POINT END OF KEYWORD\n         LA    R3,COMMAXL              POINT TO OUTPUT AREA\n         BAL   R8,CNV0000              GO CONVERT AMOUNT\n         ST    R2,COMMAXL  *MICKEY-MOUSE*  STORE MAX LINES\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nCOPY0000 DS    0H\n         MVI   COMCOPY,$COPY           SET COPY FLAG\n         LA    R7,5(R7)                POINT PAST KEYWORD\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nHELP0000 DS    0H\n         MVI   COMHELP,$HELP           SET HELP FLAG\n         LA    R7,5(R7)                POINT PAST KEYWORD\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nFIRST100 DS    0H\n         OI    COMFLAG,$100            SET FIRST100 FLAG\n         LA    R7,9(R7)                POINT PAST KEYWORD\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSCTRL000 DS    0H\n         LA    R7,9(R7)                POINT END OF KEYWORD\n         OI    COMFLAG,$SCTRL          TURN ON SCAN CONTROL FLAG\n         CLC   =C'1 AND 2',0(R7)       REQUEST FOR 1 AND 2??\n         BNE   SCTRL010                NO\n         MVI   COMSCTRL,$AND           SET 'AND' INDICATOR\n         LA    R7,8(R7)                ADVANCE INPUT ADDRESS\n         B     PARM0010                LOOK FOR MORE PARAMETERS\nSCTRL010 DS    0H\n         CLC   =C'1 OR 2',0(R7)        REQUEST FOR 1 OR 2??\n         BNE   SCTRL020                NO\n         MVI   COMSCTRL,$OR            SET 'OR' INDICATOR\n         LA    R7,7(R7)                ADVANCE INPUT ADDRESS\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nSCTRL020 DS    0H\n         MVC   PLINE,MSG0009           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT MESSAGE\n         OI    COMFLAG,$ERROR          INDICATE ERROR OCCURRED\n         B     READ0010                BYPASS REMAINDER OF CARD\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS SCAN/TRIGGER/OR TITLE                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN1000 DS    0H\n         LA    R7,1(R7)                ADVANCE 1 EXTRA BYTE\nSCAN1010 DS    0H\n         LA    R7,5(R7)                POINT TO SCAN VALUE\n         MVI   HEXFLAG,C' '            TURN OFF HEX INDICATOR\n         CLC   =C'X''',0(R7)           HEX VALUE??\n         BNE   SCAN1020                NO\n         MVI   HEXFLAG,$HEX            INDICATE HEX SCAN VALUE\n         LA    R7,1(R7)                BYPASS HEX INDICATOR\nSCAN1020 DS    0H\n         BAL   R8,SCAN5000             BEGIN INTREPRETING SCAN CARD\n         MVC   COMSCAN1,SCANDATA       MOVE SCAN DATA\n         LH    R15,SCANLEN             SCAN PARAMETER LENGTH\n         BCTR  R15,0                   MINUS 1 FOR EXECUTES\n         CLI   HEXFLAG,$HEX            WAS SCAN 'HEX'??\n         BNE   SCAN1030                NO\n         TM    SCANLEN+1,X'01'         IS LENGTH ODD??\n         BO    SCAN1040                YES\n         EX    R15,HEXTRT              TEST DATA\n         BNZ   SCAN5120                INVALID HEX DATA\n         EX    R15,HEXTR               TRANSLATE FOR PACKING\n         SRL   R15,1                   DIVIDE BY 2\n         PACK  COMSCAN1+00(6),SCANDATA+00(11)\n         PACK  COMSCAN1+05(6),SCANDATA+10(11)\n         PACK  COMSCAN1+10(6),SCANDATA+20(11)\n         PACK  COMSCAN1+15(6),SCANDATA+30(11)\n         PACK  COMSCAN1+20(6),SCANDATA+40(11)\n         PACK  COMSCAN1+25(6),SCANDATA+50(11)\n         PACK  COMSCAN1+30(6),SCANDATA+60(11)\n         PACK  COMSCAN1+35(6),SCANDATA+70(11)\nSCAN1030 DS    0H\n         LA    R15,1(R15)              RESTORE FULL LENGTH\n         STH   R15,COMSCN1L            SAVE LENGTH OF SEARCH ARGUEMENT\n         OI    COMSCN1F,$SCAN1         SCAN IN EFFECT\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSCAN1040 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0001           MOVE ERROR MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSCAN2000 DS    0H\n         LA    R7,6(R7)                POINT TO SCAN VALUE\n         MVI   HEXFLAG,C' '            TURN OFF HEX INDICATOR\n         CLC   =C'X''',0(R7)           HEX VALUE??\n         BNE   SCAN2010                NO\n         MVI   HEXFLAG,$HEX            INDICATE HEX SCAN VALUE\n         LA    R7,1(R7)                BYPASS HEX INDICATOR\nSCAN2010 DS    0H\n         BAL   R8,SCAN5000             BEGIN INTREPRETING SCAN CARD\n         MVC   COMSCAN2,SCANDATA       MOVE SCAN DATA\n         LH    R15,SCANLEN             SCAN PARAMETER LENGTH\n         BCTR  R15,0                   MINUS 1 FOR EXECUTES\n         CLI   HEXFLAG,$HEX            WAS SCAN 'HEX'??\n         BNE   SCAN2020                NO\n         TM    SCANLEN+1,X'01'         IS LENGTH ODD??\n         BO    SCAN2030                YES\n         EX    R15,HEXTRT              TEST DATA\n         BNZ   SCAN5120                INVALID HEX DATA\n         EX    R15,HEXTR               TRANSLATE FOR PACKING\n         SRL   R15,1                   DIVIDE BY 2\n         PACK  COMSCAN2+00(6),SCANDATA+00(11)\n         PACK  COMSCAN2+05(6),SCANDATA+10(11)\n         PACK  COMSCAN2+10(6),SCANDATA+20(11)\n         PACK  COMSCAN2+15(6),SCANDATA+30(11)\n         PACK  COMSCAN2+20(6),SCANDATA+40(11)\n         PACK  COMSCAN2+25(6),SCANDATA+50(11)\n         PACK  COMSCAN2+30(6),SCANDATA+60(11)\n         PACK  COMSCAN2+35(6),SCANDATA+70(11)\nSCAN2020 DS    0H\n         LA    R15,1(R15)              RESTORE FULL LENGTH\n         STH   R15,COMSCN2L            SAVE LENGTH OF SEARCH ARGUEMENT\n         OI    COMSCN2F,$SCAN2         SCAN IN EFFECT\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSCAN2030 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0001           MOVE ERROR MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nTRGR0000 DS    0H\n         LA    R7,8(R7)                POINT TO SCAN VALUE\n         MVI   HEXFLAG,C' '            TURN OFF HEX INDICATOR\n         CLC   =C'X''',0(R7)           HEX VALUE??\n         BNE   TRGR0010                NO\n         MVI   HEXFLAG,$HEX            INDICATE HEX SCAN VALUE\n         LA    R7,1(R7)                BYPASS HEX INDICATOR\nTRGR0010 DS    0H\n         BAL   R8,SCAN5000             BEGIN INTREPRETING SCAN CARD\n         MVC   COMTRGR,SCANDATA        MOVE SCAN DATA\n         LH    R15,SCANLEN             SCAN PARAMETER LENGTH\n         BCTR  R15,0                   MINUS 1 FOR EXECUTES\n         CLI   HEXFLAG,$HEX            WAS VALUE HEX??\n         BNE   TRGR0020                NO\n         TM    SCANLEN+1,X'01'         IS LENGTH ODD??\n         BO    TRGR0030                YES\n         EX    R15,HEXTRT              TEST DATA\n         BNZ   SCAN5120                INVALID HEX DATA\n         EX    R15,HEXTR               TRANSLATE FOR PACKING\n         SRL   R15,1                   DIVIDE BY 2\n         PACK  COMTRGR+00(6),SCANDATA+00(11)\n         PACK  COMTRGR+05(6),SCANDATA+10(11)\n         PACK  COMTRGR+10(6),SCANDATA+20(11)\n         PACK  COMTRGR+15(6),SCANDATA+30(11)\n         PACK  COMTRGR+20(6),SCANDATA+40(11)\n         PACK  COMTRGR+25(6),SCANDATA+50(11)\n         PACK  COMTRGR+30(6),SCANDATA+60(11)\n         PACK  COMTRGR+35(6),SCANDATA+70(11)\nTRGR0020 DS    0H\n         LA    R15,1(R15)              RESTORE FULL LENGTH\n         STH   R15,COMTRGL             SAVE LENGTH OF SEARCH ARGUEMENT\n         OI    COMTRGRF,$TRIGGER       SCAN IN EFFECT\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nTRGR0030 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0001           MOVE ERROR MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nTITLE000 DS    0H\n         LA    R7,6(R7)                POINT TO SCAN VALUE\n         BAL   R8,SCAN5000             BEGIN INTERPRET TITLE\n         MVC   COMTITLE,SCANDATA       MOVE SCAN DATA\n         B     PARM0010                CONTINUE SCANNING PARAMETERS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS SCAN/TRIGGER/ OR TITLE VALUES                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN5000 DS    0H\n         MVC   SCANDATA,SCANDATA-1     INITIALIZE WORK AREA\n         LA    R1,SCANDATA             START OF SCAN WORK AREA\n         SR    R2,R2                   ZERO LENGTH\n         CLI   0(R7),X'7D'             OPENING QUOTE?\n         BNE   SCAN5100                NO ???\n         LA    R7,1(R7)                ADD 1 TO ADDRESS\nSCAN5010 DS    0H\n         CLI   0(R7),X'7D'             QUOTE?\n         BE    SCAN5040                YES\nSCAN5020 DS    0H\n         MVC   0(1,R1),0(R7)           MOVE TO OUTPUT VALUE\n         LA    R1,1(R1)                ADD 1 TO ADDRESS\n         LA    R2,1(R2)                ADD 1 TO LENGTH\nSCAN5030 DS    0H\n         LA    R7,1(R7)                ADD 1 TO ADDRESS\n         C     R1,=A(SCANDATA+70)      END OF WORK AREA?\n         BE    SCAN5110                YES... NO ENDING QUOTE\n         B     SCAN5010                CONTINUE\nSCAN5040 DS    0H\n         CLI   1(R7),X'7D'             DOUBLE QUOTE?\n         BNE   SCAN5050                NO\n         LA    R7,1(R7)                ADD 1 TO ADDRESS\n         B     SCAN5020                MOVE IT INTO OUTPUT\nSCAN5050 DS    0H\n         STH   R2,SCANLEN              SAVE LENGTH\n         LA    R7,2(R7)                POINT TO NEXT PARAMETER\n         BR    R8                      RETURN\nSCAN5100 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0002           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     READ0010                BYPASS REMAINDER OF THIS CARD\nSCAN5110 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0003           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     READ0010                BYPASS REMAINDER OF THIS CARD\nSCAN5120 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0008           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE PARAMETERS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS ZONE FOR SCAN OR TRIGGER                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nZONE1000 DS    0H\n         LA    R7,1(R7)                1 EXTRA FOR ZONE1\nZONE1010 DS    0H\n         LA    R7,5(R7)                POINT PAST KEYWORD\n         LA    R3,COMZ1BGN             POINT TO ZONE START\n         BAL   R8,CNV0000              CONVERT NUMBER\n         OC    COMZ1BGN,COMZ1BGN       STARTING POSITION ZERO??\n         BZ    ZONE1020                NO STARTING POSITION\n         OI    COMSCN1F,$Z1BGN         ZONE1 STARTING FLAG\nZONE1020 DS    0H\n         CLI   0(R7),C' '              ENDING ZONE PRESENT??\n         BE    READ0010                NO\n         CLI   0(R7),C','              ENDING ZONE PRESENT??\n         BE    ZONE1030                NO\n         LA    R3,COMZ1END             POINT TO ZONE END\n         BAL   R8,CNV0000              CONVERT NUMBER\n         CLC   COMZ1END,COMZ1BGN       IS BEGIN LARGER THAN END?\n         BL    ZONE5000                YES\n         OC    COMZ1END,COMZ1END       LOAD ENDING POSITION\n         BZ    ZONE5000                BAD ZONE\n         OI    COMSCN1F,$Z1END         ZONE END FLAG\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nZONE1030 DS    0H\n         LA    R7,1(R7)                ADVANCE INPUT ADDRESS\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nZONE2000 DS    0H\n         LA    R7,6(R7)                POINT PAST KEYWORD\n         LA    R3,COMZ2BGN             POINT TO ZONE START\n         BAL   R8,CNV0000              CONVERT NUMBER\n         OC    COMZ2BGN,COMZ2BGN       STARTING POINT ZERO??\n         BZ    ZONE2010                NO STARTING POSITION\n         OI    COMSCN2F,$Z2BGN         ZONE2 STARTING FLAG\nZONE2010 DS    0H\n         CLI   0(R7),C' '              ENDING ZONE PRESENT??\n         BE    READ0010                NO\n         CLI   0(R7),C','              ENDING ZONE PRESENT??\n         BE    ZONE1030                NO\n         LA    R3,COMZ2END             POINT TO ZONE END\n         BAL   R8,CNV0000              CONVERT NUMBER\n         CLC   COMZ2END,COMZ2BGN       IS BEGIN LARGER THAN END?\n         BL    ZONE5000                NO\n         OC    COMZ2END,COMZ2END       ENDING POSITION ZERO??\n         BZ    ZONE5000                BAD ZONE\n         BCTR  R1,0                    CONVERT TO OFFSET\n         STH   R1,COMZ2END             SAVE ENDING OFFSET\n         OI    COMSCN2F,$Z2END         ZONE END FLAG\n         B     PARM0010\nTZONE000 DS    0H\n         LA    R7,6(R7)                POINT PAST KEYWORD\n         LA    R3,COMTZBGN             POINT TO ZONE START\n         BAL   R8,CNV0000              CONVERT NUMBER\n         OC    COMTZBGN,COMTZBGN       LOAD STARTING POSITION\n         BZ    TZONE010                NO STARTING POSITION\n         OI    COMTRGRF,$TZBGN         TRIGGER STARTING FLAG\nTZONE010 DS    0H\n         CLI   0(R7),C' '              ENDING ZONE PRESENT??\n         BE    READ0010                NO\n         CLI   0(R7),C','              ENDING ZONE PRESENT??\n         BE    ZONE1030                NO\n         LA    R3,COMTZEND             POINT TO ZONE END\n         BAL   R8,CNV0000              CONVERT NUMBER\n         CLC   COMTZEND,COMTZBGN       IS BEGIN LARGER THAN END?\n         BL    ZONE5000                NO\n         OC    COMTZEND,COMTZEND       ENDING POSITION ZERO??\n         BZ    ZONE5000                BAD ZONE\n         OI    COMTRGRF,$TZEND         ZONE END FLAG\n         B     PARM0010\nZONE5000 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0004           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT MESSAGE\n         B     PARM0010                CONTINUE PROCESSING PARAMETERS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CONVERT CHARACTER TO BINARY                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nCNV0000  DS    0H\n         TRT   0(12,R7),NUMTAB         SCAN NUMBER\n         BZ    CNV0030                 BAD NUMBER\n         CLI   0(R1),C' '              STOP ON A BLANK??\n         BE    CNV0010                 YES\n         CLI   0(R1),C','              STOP ON A COMMA??\n         BNE   CNV0030                 NO .. INVALID NUMERIC DATA\n         XC    0(2,R3),0(R3)           ZERO RESULT\nCNV0010  DS    0H\n         SR    R1,R7                   COMPUTE LENGTH OF NUMBER\n         BZ    CNV0020                 NUMBER OMITTED\n         BCTR  R1,0                    REDUCE BY 1 FOR EXECUTES\n         MVC   CNVBEGIN,CNVBEGIN-1     INITIALIZE\n         LA    R2,CNVBEGIN+10          POINT AT CONVERT BEGIN\n         SR    R2,R1                   COMPUTE STARTING ADDRESS\n         EX    R1,CNVMOVE              MOVE NUMBER TO STARTING\n         PACK  DWORD,CNVBEGIN          PACK THE VALUE\n         CVB   R2,DWORD                CONVERT IT TO BINARY\n         STH   R2,0(R3)                SAVE AMOUNT\n         LA    R7,2(R1,R7)             POINT TO NEXT PARAMETER\n         BR    R8                      RETURN\nCNV0020  DS    0H\n         LA    R7,1(R7)                POINT TO NEXT FIELD\n         BR    R8                      PROCESSING COMPLETE\nCNV0030  DS    0H\n         MVC   PLINE,MSG0005           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT MESSAGE\n         B     PARM0010                CONTINUE PROCESSING PARAMETERS\nCNVMOVE  MVC   0(0,R2),0(R7)           MOVE FOR PACKING\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADING ROUTINES                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER\n         PUT   (R2),PRCC               PRINT\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C' '               SINGLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C'0'               DOUBLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\nPRT0010  DS    0H\n         CP    COMLINE,P65             TIME FOR HEADINGS?\n         BLR   R9                      NO\nHEADINGS DS    0H\n         AP    COMPAGE,P1              ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'402020202120' EDIT WORD\n         ED    PRPAGE,COMPAGE          EDIT PAGE NUMBER\n         LA    R2,PRINTER\n         PUT   (R2),HEADING            PRINT PAGE HEADING\n         PUT   (R2),HELPHEAD           PRINT 'HELP' HEADING\n         ZAP   COMLINE,P3              RESET LINE COUNT\n         BR    R9                      RETURN\nCLSE0000 DS    0H\n         LA    R2,SYSIN\n         CLOSE ((R2))                  CLOSE SYSIN\nPHSE0000 DS    0H\n         L     R15,VPH1                ADDRESS OF NEXT PHASE\n         BR    R15                     CONTINUE WITH NEXT PHASE\nHEXTRT   TRT   SCANDATA(0),HEXTAB1     TEST HEX DATA\nHEXTR    TR    SCANDATA(0),HEXTAB2     TRANSLATE DATA FOR PACKING\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     WORKAREAS                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nDWORD    DC    D'0'                    FOR CVB'S\nVCOMM    DC    V(FILECOMM)             ADDRESS OF 'COMMON'\nVPH1     DC    V(FILEPH01)             ADDRESS OF PHASE '01'\nTIOTADDR DC    F'0'\nSCANLEN  DC    H'0'                    LENGTH OF SCAN/TRIGGER/TITLE\n         DC    C' '\nSCANDATA DC    CL80' '                 SCAN/TRIGGER/ OR TITLE DATA\nP0       DC    P'0'\nP1       DC    P'1'\nP3       DC    P'3'\nP65      DC    P'65'\nHEXFLAG  DC    X'00'\n         DC    C'0'\nCNVBEGIN DC    CL11'0'                 CONVERSION BEGINNING\n         DC    C' '\nPLINE    DS    0CL121\nPRCC     DC    C' '                    CARRIAGE CONTROL\nPAREA    DC    CL120' '                PRINT AREA\nCARDAREA DC    CL80' '                 CARD FILE I/O AREA\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL109'       FILE UTILITY CONTROL STATEMENTS'\n         DC    C'PAGE '\nPRPAGE   DC    CL6' '\nHELPHEAD DC    CL121'0 FOR A LIST OF PARAMETERS AND THEIR USAGE SPECIFY+\n                ''HELP'' ON A CONTROL STATEMENT'\n         LTORG\nMSG0001  DC    CL121'  HEX STRING HAS ODD NUMBER OF CHARACTERS'\nMSG0002  DC    CL121'  NO OPEN QUOTE FOR SCAN, TRIGGER, OR TITLE'\nMSG0003  DC    CL121'  NO CLOSING QUOTE FOR SCAN, TRIGGER, OR TITLE'\nMSG0004  DC    CL121'  INVALID ZONE FOR SCAN OR TRIGGER'\nMSG0005  DC    CL121'  INVALID NUMERIC VALUE'\nMSG0006  DC    CL121'  UNKNOWN PARAMETER'\nMSG0007  DC    CL121'  INVALID ZONE FOR SCAN OR TRIGGER'\nMSG0008  DC    CL121'  INVALID HEX DATA'\nMSG0009  DC    CL121'  INVALID SCANCTRL VALUE (MUST BE ''1 AND 2'' OR '+\n               '1 OR 2'')'\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nNUMTAB   DC    256X'FF'\n         ORG   NUMTAB+C'0'\n         DC    10X'00'\n         ORG   NUMTAB+256\nHEXTAB1  DC    256X'FF'\n         ORG   HEXTAB1+C'A'\n         DC    06X'00'\n         ORG   HEXTAB1+C'0'\n         DC    10X'00'\n         ORG   HEXTAB1+256\nHEXTAB2  DC    256X'00'\n         ORG   HEXTAB2+C'A'\n         DC    X'AABBCCDDEEFF'\n         ORG   HEXTAB2+C'0'\n         DC    X'00112233445566778899'\n         ORG   HEXTAB2+256\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     DSECTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nFILECOMM DSECT\n         FILECOMM\n         DCBD  DSORG=PS\n         PRINT NOGEN\n         DSECT                                                          WMW26810\n         IEFTIOT1                                                       WMW26820\n         PRINT GEN\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     REGISTER EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY  REGEQU\n         END   FILEPH00\n./ ADD NAME=FILEPH01 0100-02291-02291-0123-00394-00394-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*           THIS PHASE:                                               *\n*              1) CROSS CHECKS PARAMETERS                             *\n*              2) INITIALIZES SCAN AND TRIGGER TABLES                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nFILEPH01 CSECT\n         USING FILEPH01,R15            SPECIFY CSECT BASE\n         ID                            DATE AND TIME COMPILED\n         LR    R10,R15                 COPY BASE ADDRESS\n         LA    R11,2048(R10)           SET 2ND BASE\n         LA    R11,2048(R11)           .. 4K FROM FIRST BASE\n         DROP  R15                     DROP PREVIOUS BASE\n         USING FILEPH01,R10,R11        RESUME WITH NEW BASE\n         L     R12,VCOMM               COMMON MODULE ADDRESS\n         USING FILECOMM,R12            DEFINE COMMON BASE\n         USING IHADCB,R2               DEFINE DCB DSECT BASE\n         CLI   COMHELP,$HELP           HELP REQUESTED??\n         BE    HELP0000                YES\n         TM    COMFLAG,$100            FIRST100 REQUESTED??\n         BO    FIRST100                YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CROSS CHECK SCAN AND ZONE PARAMETERS                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0000 DS    0H\n         TM    COMSCN1F,$SCAN1         IS SCAN 1 IN EFFECT??            WMW02330\n         BO    TEST0020                YES                              WMW08140\n         TM    COMSCN1F,$Z1BGN         IS ZONE BEGIN IN EFFECT??        WMW08150\n         BO    TEST0010                YES .. NOT ALLOWED               WMW08160\n         TM    COMSCN1F,$Z1END         IS ZONE END IN EFFECT??          WMW08180\n         BNO   TEST0020                NO                               WMW08190\nTEST0010 DS    0H                                                       WMW08200\n         MVC   PLINE,MSG0001           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0020 DS    0H                                                       WMW08400\n         TM    COMSCN2F,$SCAN2         IS SCAN 2 IN EFFECT??            WMW02330\n         BO    TEST0040                YES                              WMW08140\n         TM    COMSCN2F,$Z2BGN         IS ZONE BEGIN IN EFFECT??        WMW08150\n         BO    TEST0030                YES .. NOT ALLOWED               WMW08160\n         TM    COMSCN2F,$Z2END         IS ZONE END IN EFFECT??          WMW08180\n         BNO   TEST0040                NO                               WMW08190\nTEST0030 DS    0H                                                       WMW08200\n         MVC   PLINE,MSG0002           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0040 DS    0H                                                       WMW08400\n         TM    COMTRGRF,$TRIGGER       IS TRIGGER IN EFFECT??           WMW02330\n         BO    TEST0060                YES                              WMW08140\n         TM    COMTRGRF,$TZBGN         IS ZONE BEGIN IN EFFECT??        WMW08150\n         BO    TEST0050                YES .. NOT ALLOWED               WMW08160\n         TM    COMTRGRF,$TZEND         IS ZONE END IN EFFECT??          WMW08180\n         BNO   TEST0060                NO                               WMW08190\nTEST0050 DS    0H                                                       WMW08200\n         MVC   PLINE,MSG0003           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CROSS CHECK SCAN1, SCAN2, AND SCANCTRL                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0060 DS    0H                                                       WMW08400\n         TM    COMSCN2F,$SCAN2         SCAN2 SPECIFIED??\n         BNO   TEST0065                NO\n         TM    COMSCN1F,$SCAN1         SCAN1 SPECIFIED??\n         BO    TEST0065                YES\n         MVC   PLINE,MSG0021           MOVE MESSAGES\n         OI    COMFLAG,$ERROR          INDICATE ERROR\n         BAL   R9,PRT0000              PRINT MESSAGE\nTEST0065 DS    0H\n         TM    COMFLAG,$SCTRL          SCAN CONTROL SPECIFIED??\n         BNO   TEST0080                NO\n         TM    COMSCN1F,$SCAN1         WAS SCAN 1 SPECIFIED??\n         BNO   TEST0070                NO .. NOT ALLOWED\n         TM    COMSCN2F,$SCAN2         WAS SCAN 2 SPECIFIED??\n         BO    TEST0080                YES\nTEST0070 DS    0H                                                       WMW08200\n         MVC   PLINE,MSG0004           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK ZONE(S) AGAINST DCB MAXIMUM RECORD LENGTH           *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0080 DS    0H                                                       WMW08200\n         TM    COMSCN1F,$SCAN1         SCAN1 IN EFFECT??\n         BNO   TEST0100                NO\n         LA    R2,SYSUT1               DCB ADDRESS\n         TM    COMSCN1F,$Z1BGN         ZONE BEGIN GIVEN??\n         BNO   TEST0090                NO\n         CLC   COMZ1BGN,DCBLRECL       TOO LARGE??\n         BNH   TEST0090                NO\n         MVC   PLINE,MSG0005           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0090 DS    0H\n         TM    COMSCN1F,$Z1END         ZONE END GIVEN??\n         BNO   TEST0100                NO\n         CLC   COMZ1END,DCBLRECL       TOO LARGE??\n         BNH   TEST0100                NO\n         MVC   PLINE,MSG0006           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0100 DS    0H\n         TM    COMSCN2F,$SCAN2         SCAN2 IN EFFECT??\n         BNO   TEST0120                NO\n         LA    R2,SYSUT1               DCB ADDRESS\n         TM    COMSCN2F,$Z2BGN         ZONE BEGIN GIVEN??\n         BNO   TEST0110                NO\n         CLC   COMZ2BGN,DCBLRECL       TOO LARGE??\n         BNH   TEST0110                NO\n         MVC   PLINE,MSG0007           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0110 DS    0H\n         TM    COMSCN2F,$Z2END         ZONE END GIVEN??\n         BNO   TEST0120                NO\n         CLC   COMZ2END,DCBLRECL       TOO LARGE??\n         BNH   TEST0120                NO\n         MVC   PLINE,MSG0008           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0120 DS    0H\n         TM    COMTRGRF,$TRIGGER       TRIGGER IN EFFECT??\n         BNO   TEST0140                NO\n         LA    R2,SYSUT1               DCB ADDRESS\n         TM    COMTRGRF,$TZBGN         ZONE BEGIN GIVEN??\n         BNO   TEST0130                NO\n         CLC   COMTZBGN,DCBLRECL       TOO LARGE??\n         BNH   TEST0130                NO\n         MVC   PLINE,MSG0009           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0130 DS    0H\n         TM    COMTRGRF,$TZEND         ZONE END GIVEN??\n         BNO   TEST0140                NO\n         CLC   COMTZEND,DCBLRECL       TOO LARGE??\n         BNH   TEST0150                NO\n         MVC   PLINE,MSG0010           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK NOHEX AGAINST SPACING                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0140 DS    0H\n         CLI   COMHEX,$HEX             PRINT HEX??\n         BNE   TEST0150                NO\n         CLI   COMSPACE,$SINGLE        SINGLE SPACING REQUESTED??\n         BNE   TEST0150                NO\n         MVC   PLINE,MSG0014           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK ZONE WIDTH'S AGAINST SCAN ARGUEMENTS                *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0150 DS    0H\n         TM    COMSCN1F,$SCAN1         SCAN 1 IN EFFECT??\n         BNO   TEST0170                NO\n         TM    COMSCN1F,$Z1BGN+$Z1END  USING START AND END??\n         BNO   TEST0160                NO\n         LH    R1,COMZ1END             END OF ZONE\n         SH    R1,COMZ1BGN             MINUS START OF ZONE\n         LA    R1,1(R1)                FULL NUMBER OF COLUMNS\n         CH    R1,COMSCN1L             ZONE TOO SMALL??\n         BNL   TEST0160                NO\n         MVC   PLINE,MSG0011           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n         B     TEST0170                CHECK SCAN 2\nTEST0160 DS    0H\n         LH    R3,COMSCN1L             LENGTH OF STRING\n         XLOC  TYPE=INIT,              INITIALIZE SCAN                 +\n               STRLEN=(R3),            STRING LENGTH                   +\n               STRING=COMSCAN1,        ARGUEMENT                       +\n               WORK=COMSCN1T,          TRANSLATE TABLE FOR SCAN 1      +\n               TABLE=FOCTABLE,         FREQUENCY OF OCCURRENCE TABLE   +\n               MF=(E,COMSCN1P)         SCAN 1 PARAMETER LIST\n         CLI   COMSCN1P+(XLOCSTAT-XLOCLIST),$XLOCOK  INITIALIZE OK??\n         BE    TEST0170                YES\n         MVC   PLINE,MSG0015           ASSUME LENGTH IS < 1\n         CLI   COMSCN1P+(XLOCSTAT-XLOCLIST),$XLOCER1\n         BE    TEST0165                LENGTH < 1\n         MVC   PLINE,MSG0016           LENGTH > 256\nTEST0165 DS    0H\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         OI    COMFLAG,$ERROR          SET ERROR FLAG\nTEST0170 DS    0H\n         TM    COMSCN2F,$SCAN2         SCAN 2 IN EFFECT??\n         BNO   TEST0190                NO\n         TM    COMSCN2F,$Z2BGN+$Z2END  USING START AND END??\n         BNO   TEST0180                NO\n         LH    R1,COMZ2END             END OF ZONE\n         SH    R1,COMZ2BGN             MINUS START OF ZONE\n         LA    R1,1(R1)                FULL NUMBER OF COLUMNS\n         CH    R1,COMSCN2L             ZONE TOO SMALL??\n         BNL   TEST0180                NO\n         MVC   PLINE,MSG0012           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n         B     TEST0190                CHECK TRIGGER\nTEST0180 DS    0H\n         LH    R3,COMSCN2L             LENGTH OF STRING\n         XLOC  TYPE=INIT,              INITIALIZE SCAN                 +\n               STRLEN=(R3),            STRING LENGTH                   +\n               STRING=COMSCAN2,        ARGUEMENT                       +\n               WORK=COMSCN2T,          TRANSLATE TABLE FOR SCAN 2      +\n               TABLE=FOCTABLE,         FREQUENCY OF OCCURRENCE TABLE   +\n               MF=(E,COMSCN2P)         SCAN 2 PARAMETER LIST\n         CLI   COMSCN2P+(XLOCSTAT-XLOCLIST),$XLOCOK  INITIALIZE OK??\n         BE    TEST0190                YES\n         MVC   PLINE,MSG0017           ASSUME LENGTH < 1\n         CLI   COMSCN2P+(XLOCSTAT-XLOCLIST),$XLOCER1\n         BE    TEST0185                LENGTH < 1\n         MVC   PLINE,MSG0018           LENGTH > 256\nTEST0185 DS    0H\n         BAL   R9,PRT0000              PRINT MESSAGE\n         OI    COMFLAG,$ERROR          SET ERROR FLAG\nTEST0190 DS    0H\n         TM    COMTRGRF,$TRIGGER       TRIGGER IN EFFECT??\n         BNO   TEST0210                NO\n         TM    COMTRGRF,$TZBGN+$TZEND  USING START AND END??\n         BNO   TEST0200                NO\n         LH    R1,COMTZEND             END OF ZONE\n         SH    R1,COMTZBGN             MINUS START OF ZONE\n         LA    R1,1(R1)                FULL NUMBER OF COLUMNS\n         CH    R1,COMTRGL              ZONE TOO SMALL??\n         BNL   TEST0200                NO\n         MVC   PLINE,MSG0013           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n         B     TEST0190                CHECK TRIGGER\nTEST0200 DS    0H\n         LH    R3,COMTRGL              LENGTH OF STRING\n         XLOC  TYPE=INIT,              INITIALIZE SCAN                 +\n               STRLEN=(R3),            STRING LENGTH                   +\n               STRING=COMTRGR,         ARGUEMENT                       +\n               WORK=COMTRGRT,          TRANSLATE TABLE FOR TRIGGER     +\n               TABLE=FOCTABLE,         FREQUENCY OF OCCURRENCE TABLE   +\n               MF=(E,COMTRGRP)         TRIGGER PARAMETER LIST\n         CLI   COMTRGRP+(XLOCSTAT-XLOCLIST),$XLOCOK  INITIALIZE OK??\n         BE    TEST0210                YES\n         MVC   PLINE,MSG0019           ASSUME LENGTH < 1\n         CLI   COMTRGRP+(XLOCSTAT-XLOCLIST),$XLOCOK  INITIALIZE OK??\n         BE    TEST0205                LENGTH < 1\n         MVC   PLINE,MSG0020           LENGTH > 256\nTEST0205 DS    0H\n         BAL   R9,PRT0000              PRINT MESSAGE\n         OI    COMFLAG,$ERROR          SET ERROR FLAG\nTEST0210 DS    0H\n         TM    COMFLAG,$ERROR          HAS AN ERROR OCCURRED??\n         BNO   PHSE0000                NO\n         MVC   PLINE,MSG0025           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         B     PHSE0000                GO TO NEXT PROGRAM PHASE\nHELP0000 DS    0H\n         MVC   PLINE,MSG0030           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT IT\n         B     PHSE0010                GO TO NEXT PROGRAM PHASE\nFIRST100 DS    0H\n         MVC   PLINE,MSG0040           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT IT\n         MVC   PLINE,MSG0041           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT IT\n         MVC   PLINE,MSG0042           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT IT\n         B     TEST0000                PERFORM NORMAL CHECKING\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADING ROUTINES                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER\n         PUT   (R2),PRCC               PRINT\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C' '               SINGLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C'0'               DOUBLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\nPRT0010  DS    0H\n         CP    COMLINE,P60             TIME FOR HEADINGS?\n         BLR   R9                      NO\nHEADINGS DS    0H\n         AP    COMPAGE,P1              ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'402020202120' EDIT WORD\n         ED    PRPAGE,COMPAGE          EDIT PAGE NUMBER\n         LA    R2,PRINTER\n         PUT   (R2),HEADING            PRINT\n         ZAP   COMLINE,P0              RESET LINE COUNT\n         BR    R9                      RETURN\nPHSE0000 DS    0H\n         L     R15,VPH2                ADDRESS OF NEXT PHASE\n         BR    R15                     CONTINUE WITH NEXT PHASE\nPHSE0010 DS    0H\n         L     R15,VPH3                ADDRESS OF NEXT PHASE\n         BR    R15                     CONTINUE WITH NEXT PHASE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     WORKAREAS                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nDWORD    DC    D'0'                    FOR CVB'S\nVCOMM    DC    V(FILECOMM)             ADDRESS OF 'COMMON'\nVPH2     DC    V(FILEPH02)             ADDRESS OF PHASE '02'\nVPH3     DC    V(FILEPH03)             ADDRESS OF PHASE '03'\nP0       DC    P'0'\nP1       DC    P'1'\nP60      DC    P'60'\nFOCTABLE XLOC  TYPE=TABLE              FREQUENCY OF OCCURRENCE TABLE\nPLINE    DS    0CL121\nPRCC     DC    C' '                    CARRIAGE CONTROL\nPAREA    DC    CL120' '                PRINT AREA\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL109'       FILE UTILITY CONTROL STATEMENTS'\n         DC    C'PAGE '\nPRPAGE   DC    CL6' '\nMSG0001  DC    CL121'  ZONE OR ZONE1 SPECIFIED WITHOUT SCAN OR SCAN1'\nMSG0002  DC    CL121'  ZONE2 SPECIFIED WITHOUT SCAN2'\nMSG0003  DC    CL121'  TZONE SPECIFIED WITHOUT TRIGGER'\nMSG0004  DC    CL121'  SCANCTRL NOT ALLOWED WITHOUT SCAN 1 AND SCAN 2'\nMSG0005  DC    CL121'  ZONE1 BEGIN IS LARGER THAN RECORD LENGTH'\nMSG0006  DC    CL121'  ZONE1 END IS LARGER THAN RECORD LENGTH'\nMSG0007  DC    CL121'  ZONE2 BEGIN IS LARGER THAN RECORD LENGTH'\nMSG0008  DC    CL121'  ZONE2 END IS LARGER THAN RECORD LENGTH'\nMSG0009  DC    CL121'  TZONE BEGIN IS LARGER THAN RECORD LENGTH'\nMSG0010  DC    CL121'  TZONE END IS LARGER THAN RECORD LENGTH'\nMSG0011  DC    CL121'  ZONE SMALLER THAN SCAN ARGUEMENT LENGTH'\nMSG0012  DC    CL121'  ZONE2 SMALLER THAN SCAN2 ARGUEMENT LENGTH'\nMSG0013  DC    CL121'  TZONE SMALLER THAN TRIGGER ARGUEMENT LENGTH'\nMSG0014  DC    CL121'  SINGLE SPACING ALLOWED ONLY WITH ''NOHEX'''\nMSG0015  DC    CL121'  SCAN/SCAN1 LENGTH < 1'\nMSG0016  DC    CL121'  SCAN/SCAN1 LENGTH > 256'\nMSG0017  DC    CL121'  SCAN2 LENGTH < 1'\nMSG0018  DC    CL121'  SCAN2 LENGTH > 256'\nMSG0019  DC    CL121'  TRIGGER LENGTH < 1'\nMSG0020  DC    CL121'  TRIGGER LENGTH > 256'\nMSG0021  DC    CL121'  SCAN2 SPECIFIED WITHOUT SCAN/SCAN1'\nMSG0025  DC    CL121'0 ***** ERRORS DETECTED, EXECUTION ABORTED *****'\nMSG0030  DC    CL121'0 ***** HELP REQUESTED, ALL OTHER PARAMETERS IGNOR+\n               ED *****'\nMSG0040  DC    CL121'0 ***** FIRST100 REQUESTED, NOHEX AND SINGLE SPACI+\n               NG FORCED'\nMSG0041  DC    CL121'  RECORDS WILL BE TRUNCATED AT 100 CHARACTERS'\nMSG0042  DC    CL121'  LOGICAL RECORD NUMBER AND RECORD LENGTHS WILL BE+\n                SUPPRESSED'\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     DSECTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nFILECOMM DSECT\n         FILECOMM\n         XLOC  TYPE=DSECT\n         DCBD  DSORG=PS\n         PRINT NOGEN\n         PRINT GEN\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     REGISTER EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   FILEPH01\n./ ADD NAME=FILEPH02 0100-02291-02291-0123-00533-00533-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*           THIS MODULE IS THE ACTUAL READ/PRINT MODULE               *\n*                                                                     *\n*---------------------------------------------------------------------*\nFILEPH02 CSECT\n         USING FILEPH02,R15            SPECIFY CSECT BASE\n         ID                            DATE AND TIME COMPILED\n         LR    R11,R15                 COPY BASE ADDRESS\n         DROP  R15                     DROP PREVIOUS BASE\n         USING FILEPH02,R11            RESUME WITH NEW BASE\n         L     R12,VCOMM               COMMON MODULE ADDRESS\n         USING FILECOMM,R12            DEFINE COMMON BASE\n         USING IHADCB,R2               DEFINE DCB DSECT BASE\n         TM    COMFLAG,$ERROR          ERROR FLAG ON??\n         BO    EXIT0010                YES, EXIT\n         ZAP   COMPAGE,P0              RESET PAGE NUMBER\n         LA    R2,SYSUT1               POINT TO INPUT DCB\n         CLI   COMCOPY,$COPY           COPY FLAG ON??\n         BNE   INIT0010                NO\n         LA    R3,SYSUT2\n         MVC   DCBRECFM-IHADCB(L'DCBRECFM,R3),DCBRECFM\n         MVC   DCBLRECL-IHADCB(L'DCBLRECL,R3),DCBLRECL\n         MVC   DCBBLKSI-IHADCB(L'DCBBLKSI,R3),DCBBLKSI\n         OPEN  ((R3),OUTPUT)         OPEN 'COPY' FILE\nINIT0010 DS    0H\n         LA    R1,EXIT0010             END OF DATA ROUTINE\n         STCM  R1,7,DCBEODAD+1         INSERT IT INTO DCB\n         TM    COMFLAG,$100            FIRST 100 FORMAT??\n         BO    ATTR0060                YES, SKIP RECORD FORMAT\n         LA    R1,PRRECFM              POINT TO RECORD FORMAT\n         MVI   0(R1),C'U'              INDICATE UNDEFINED FORMAT\n         TM    DCBRECFM,DCBRECU        UNDEFINED FORMAT??\n         BO    ATTR0010                YES\n         MVI   0(R1),C'V'              INDICATE VARIABLE FORMAT\n         TM    DCBRECFM,DCBRECV        VARIABLE LENGTH RECORDS??\n         BO    ATTR0010                YES\n         MVI   0(R1),C'F'              INDICATE FIXED LENGTH\nATTR0010 DS    0H\n         LA    R1,1(R1)                NEXT ATTRIBUTE POSITION\n         TM    DCBRECFM,DCBRECBR       BLOCKED??\n         BNO   ATTR0020                NO\n         MVI   0(R1),C'B'              INDICATE BLOCKED\n         LA    R1,1(R1)                NEXT ATTRIBUTE POSITION\nATTR0020 DS    0H\n         TM    DCBRECFM,DCBRECSB       SPANNED RECORDS??\n         BNO   ATTR0030                NO\n         MVI   0(R1),C'S'              INDICATE SPANNED\n         LA    R1,1(R1)                NEXT ATTRIBUTE POSITION\nATTR0030 DS    0H\n         TM    DCBRECFM,DCBRECCA       ASA CONTROL CHARACTERS\n         BNO   ATTR0040                NO\n         MVI   0(R1),C'A'              INDICATE ASA\n         B     ATTR0050                CONTINUE\nATTR0040 DS    0H\n         TM    DCBRECFM,DCBRECCM       MACHINE CONTROL CHARACTERS\n         BNO   ATTR0050                NO\n         MVI   0(R1),C'M'              INDICATE MACHINE\nATTR0050 DS    0H\n         LH    R1,DCBLRECL             RECORD LENGTH\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         ED    PRLRECL,DWORD+5         EDIT RECORD SIZE\n         LH    R1,DCBBLKSI             GET BLOCK SIZE\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         ED    PRBLKSI,DWORD+5         EDIT BLOCK SIZE\nATTR0060 DS    0H\n         BAL   R10,HEADINGS            PRINT HEADINGS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS SKIP IF REQUESTED                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSKIP0000 DS    0H\n         TM    COMFLAG,$SKIP           SKIP REQUESTED??\n         BNO   TRGR0000                NO\n         SR    R3,R3                   CLEAR REGISTER\n         ICM   R3,3,COMSKIP            NUMBER OF RECORDS TO SKIP\n         BZ    TRGR0000                NO RECORDS TO SKIP\nSKIP0010 DS    0H\n         BAL   R9,READ0000             READ A RECORD\n         BCT   R3,SKIP0010             LOOP REQUESTED NUMBER OF TIMES\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS TRIGGER IF REQUESTED                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRGR0000 DS    0H\n         TM    COMTRGRF,$TRIGGER       TRIGGER REQUESTED??\n         BNO   PROC0000                NO\nTRGR0010 DS    0H\n         BAL   R9,READ0000             READ A RECORD\n         LA    R2,SYSUT1               MAKE SURE R2 IS AIMED RIGHT\n         CLC   COMTZBGN,RECLEN         IS RECORD TOO SMALL??\n         BH    TRGR0010                YES\n         SR    R3,R3                   ASSUME ZONE BEGIN\n         TM    COMTRGRF,$TZBGN         ZONE BEGIN GIVEN??\n         BNO   TRGR0020                NO\n         CLC   COMTZBGN,RECLEN         IS RECORD TOO SMALL??\n         BH    PROC0000                YES\n         LH    R3,COMTZBGN             ZONE BEGIN\n         BCTR  R3,0                    RELATIVE TO ZERO\nTRGR0020 DS    0H\n         LH    R4,RECLEN               RECORD LENGTH\n         TM    COMTRGRF,$TZEND         ZONE END REQUESTED??\n         BNO   TRGR0030                NO\n         CH    R4,COMTZEND             SMALLER THAN ENDING ZONE??\n         BL    TRGR0030                YES\n         LH    R4,COMTZEND             USE ENDING ZONE\nTRGR0030 DS    0H\n         L     R5,RECADDR              RECORD ADDRESS\n         AR    R5,R3                   PLUS ZONE BEGIN\n         SR    R4,R3                   SCAN LENGTH\n         LH    R6,COMTRGL              STRING LENGTH\n         XLOC  RECORD=(R5),            RECORD ADDRESS                  +\n               RECLEN=(R4),            RECORD LENGTH                   +\n               STRING=COMTRGR,         SEARCH STRING                   +\n               STRLEN=(R6),            SEARCH STRING LENGTH            +\n               ERROR=TRGR0010,         STRING NOT FOUND                +\n               MF=(E,COMTRGRP)         TRIGGER PARAMETER LIST\n         B     PROC0020                BYPASS READ IN 'PROC'\n*---------------------------------------------------------------------*\n*                                                                     *\n*           MAIN READ/PRINT PROCEDURE                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC0000 DS    0H\n         TM    COMFLAG,$COUNT          COUNT REQUESTED??\n         BNO   PROC0010                NO\n         CLC   RECPRT,COMCOUNT         ENOUGH RECORDS PRINTED??\n         BNL   EXIT0010                YES\nPROC0010 DS    0H\n         BAL   R9,READ0000             READ A RECORD\nPROC0020 DS    0H\n         MVI   SCANFLAG,X'00'          TURN OFF SCAN INDICATORS\n         TM    COMSCN1F,$SCAN1         SCAN 1 REQUESTED??\n         BNO   PROC0050                NO\n         LA    R2,SYSUT1               MAKE SURE R2 IS AIMED RIGHT\n         SR    R3,R3                   ASSUME NO ZONE BEGIN\n         TM    COMSCN1F,$Z1BGN         ZONE BEGIN GIVEN??\n         BNO   PROC0030                NO\n         CLC   COMZ1BGN,RECLEN         IS RECORD TOO SMALL??\n         BH    PROC0000                YES\n         LH    R3,COMZ1BGN             ZONE BEGIN\n         BCTR  R3,0                    RELATIVE TO ZERO\nPROC0030 DS    0H\n         LH    R4,RECLEN               RECORD LENGTH\n         TM    COMSCN1F,$Z1END         ZONE END REQUESTED??\n         BNO   PROC0040                NO\n         CH    R4,COMZ1END             RECORD SMALLER THAN ZONE END??\n         BL    PROC0040                YES\n         LH    R4,COMZ1END             USE ZONE END\nPROC0040 DS    0H\n         L     R5,RECADDR              RECORD ADDRESS\n         AR    R5,R3                   PLUS ZONE BEGIN\n         SR    R4,R3                   SCAN LENGTH\n         LH    R6,COMSCN1L             STRING LENGTH\n         XLOC  RECORD=(R5),            RECORD ADDRESS                  +\n               RECLEN=(R4),            RECORD LENGTH                   +\n               STRING=COMSCAN1,        SEARCH STRING                   +\n               STRLEN=(R6),            SEARCH STRING LENGTH            +\n               ERROR=PROC0050,         STRING NOT FOUND                +\n               MF=(E,COMSCN1P)         TRIGGER PARAMETER LIST\n         OI    SCANFLAG,$1FND          INDICATE SCAN 1 FOUND\nPROC0050 DS    0H\n         TM    COMSCN2F,$SCAN2         SCAN 2 REQUESTED??\n         BNO   PROC0080                NO\n         LA    R2,SYSUT1               MAKE SURE R2 IS AIMED RIGHT\n         SR    R3,R3                   ASSUME NO ZONE BEGIN\n         TM    COMSCN2F,$Z2BGN         ZONE BEGIN GIVEN??\n         BNO   PROC0060                NO\n         CLC   COMZ2BGN,RECLEN         IS RECORD TOO SMALL??\n         BH    PROC0000                YES\n         LH    R3,COMZ2BGN             ZONE BEGIN\n         BCTR  R3,0                    RELATIVE TO ZERO\nPROC0060 DS    0H\n         LH    R4,RECLEN               RECORD LENGTH\n         TM    COMSCN2F,$Z2END         ZONE END REQUESTED??\n         BNO   PROC0070                NO\n         CH    R4,COMZ2END             RECORD SMALLER THAN ZONE END??\n         BL    PROC0070                YES\n         LH    R4,COMZ2END             LIMIT SEARCH TO ZONE END\nPROC0070 DS    0H\n         L     R5,RECADDR              RECORD ADDRESS\n         AR    R5,R3                   PLUS ZONE BEGIN\n         SR    R4,R3                   SCAN LENGTH\n         LH    R6,COMSCN2L             STRING LENGTH\n         XLOC  RECORD=(R5),            RECORD ADDRESS                  +\n               RECLEN=(R4),            RECORD LENGTH                   +\n               STRING=COMSCAN2,        SEARCH STRING                   +\n               STRLEN=(R6),            SEARCH STRING LENGTH            +\n               ERROR=PROC0080,         STRING NOT FOUND                +\n               MF=(E,COMSCN2P)         TRIGGER PARAMETER LIST\n         OI    SCANFLAG,$2FND          INDICATE SCAN 2 FOUND\nPROC0080 DS    0H\n         CLI   COMSCTRL,C'A'           SCAN 1 AND SCAN 2 REQUIRED??\n         BNE   PROC0090                NO\n         TM    SCANFLAG,$1FND+$2FND    WERE 1 AND 2 FOUND??\n         BNO   PROC0000                NO\nPROC0090 DS    0H\n         TM    COMSCN1F,$SCAN1         SCAN 1 REQUESTED??\n         BNO   PROC0100                NO\n         TM    SCANFLAG,$1FND          WAS SCAN 1 FOUND??\n         BO    PROC0110                ACCEPT THE RECORD\n         CLI   COMSCTRL,C'O'           SCAN 1 OR SCAN 2 ALLOWED??\n         BNE   PROC0000                NO\nPROC0100 DS    0H\n         TM    COMSCN2F,$SCAN2         SCAN 2 REQUESTED??\n         BNO   PROC0110                NO\n         TM    SCANFLAG,$2FND          WAS SCAN 2 FOUND??\n         BNO   PROC0000                NO\nPROC0110 DS    0H\n         BAL   R9,RPRT0000             PRINT THE RECORD\n         B     PROC0000                REPEAT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           READ INPUT FILE                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nREAD0000 DS    0H\n         LA    R2,SYSUT1               INPUT FILE ADDRESS\n         GET   (R2)                    READ A RECORD\n         L     R14,RECNBR              LOGICAL RECORD NUMBER\n         LA    R14,1(R14)              ADD 1\n         ST    R14,RECNBR              SAVE RECORD NUMBER\n         ST    R1,RECADDR              SAVE DATA ADDRESS\n         MVC   RECLEN,DCBLRECL         MOVE RECORD LENGTH\n         TM    DCBRECFM,DCBRECV        VARIABLE LENGTH RECORDS?\n         BNOR  R9                      NO\n         MVC   RECLEN,0(R1)            MOVE RECORD LENGTH\n         BR    R9                      RETURN\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           FORMAT RECORD                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nRPRT0000 DS    0H\n         L     R8,RECADDR              DATA ADDRESS\n         CLI   COMCOPY,$COPY           COPY OF RECORD WANTED??\n         BNE   RPRT0005                NO\n         LA    R3,SYSUT2               OUTPUT DCB\n         PUT   (R3),(R8)               WRITE THE RECORD\nRPRT0005 DS    0H\n         LH    R1,RECPRT               NUMBER OF RECORDS PRINTED\n         LA    R1,1(R1)                ADD 1\n         STH   R1,RECPRT               SAVE RECORDS PRINTED\n         MVC   RPRTLEN,RECLEN          COPY RECORD LENGTH\n         ZAP   CENTURY,P0              ZERO 100'S ACCUMULATOR\nRPRT0010 DS    0H\n         TM    COMFLAG,$100            FIRST 100 FORMAT??\n         BO    RPRT0020                YES\n         CLI   COMHEX,$HEX             RECORD TO BE PRINTED IN HEX\n         BNE   RPRT0020                NO\n         CP    COMLINE,P55             ENOUGH LINES FOR 1 'GROUP'??\n         BNH   RPRT0020                YES\n         BAL   R10,HEADINGS            FORCE HEADINGS\nRPRT0020 DS    0H\n         LH    R3,RPRTLEN              DATA LENGTH\n         LTR   R3,R3                   ZERO?\n         BZR   R9                      EXIT\n         CH    R3,H100                 TOO MUCH FOR 1 LINE??\n         BNH   RPRT0030                NO\n         LH    R3,H100                 LIMIT LENGTH TO 100\nRPRT0030 DS    0H\n         BCTR  R3,0                    ADJUST FOR EXECUTE\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         EX    R3,CHARMVC              MOVE CHARACTER\n         EX    R3,CHARTR               TRANSLATE OUT UNPRINTABLES\n         TM    COMFLAG,$100            FIST100 FORMAT??\n         BO    RPRT0050                YES\n         CP    CENTURY,P0              FIRST LINE FOR RECORD??\n         BNE   RPRT0040                NO\n         MVI   PR#,C'#'                MOVE IN RECORD NUMBER PREFIX\n         L     R1,RECNBR               CURRENT LOGICAL RECORD NUMBER\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         MVC   PRRECNBR,=X'402020202021'\n         ED    PRRECNBR,DWORD+5        EDIT RECORD NUMBER\n         MVC   PRSIZE,=C' SIZE'        MOVE RECORD SIZE PREFIX\n         LH    R1,RECLEN               CURRENT RECORD SIZE\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         MVC   PRRECLEN,=X'402020202021'\n         ED    PRRECLEN,DWORD+5        EDIT RECORD NUMBER\nRPRT0040 DS    0H\n         MVI   PRCC,C' '               SINGLE SPACE CONTROL\n         CLI   COMSPACE,$SINGLE        SINGLE SPACING?\n         BE    RPRT0050                YES\n         MVI   PRCC,C'0'               DOUBLE SPACE CONTROL\nRPRT0050 DS    0H\n         BAL   R10,PRT0000             PRINT CHARACTER\n         TM    COMFLAG,$100            FIRST 100 FORMAT??\n         BOR   R9                      YES\n         CLI   COMHEX,$HEX             RECORD TO BE PRINTED IN HEX??\n         BNE   RPRT0060                NO\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         EX    R3,CHARMVC              MOVE CHARACTER\n         EX    R3,NUMRNULL             NULL NUMERIC\n         EX    R3,HEXTR                TRANSLATE ZONES\n         BAL   R10,PRT0000             PRINT ZONES\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         EX    R3,CHARMVC              MOVE CHARACTER\n         EX    R3,ZONENULL             NULL ZONES\n         EX    R3,HEXTR                TRANSLATE NUMERIC'S\n         BAL   R10,PRT0000             PRINT NUMERICS\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         MVC   PR100,=X'402020202020'  EDIT WORD\n         ED    PR100,CENTURY           EDIT 100'S COUNTER\n         EX    R3,SCALEMVC             MOVE SCALE\n         BAL   R10,PRT0000             PRINT SCALE\nRPRT0060 DS    0H\n         AP    CENTURY,P10             ADD TO 100'S COUNTER\n         LA    R3,1(R3)                RESTORE DATA LENGTH\n         LH    R1,RPRTLEN              DATA LENGTH\n         SR    R1,R3                   REMAINING LENGTH\n         STH   R1,RPRTLEN              SAVE LENGTH LEFT\n         LA    R8,100(R8)              NEXT 100 BYTES\n         B     RPRT0010                REPEAT\nCHARMVC  MVC   PAREA+20(0),0(R8)       MOVE CHARACTER\nCHARTR   TR    PAREA+20(0),CHRTABLE    TRANSLATE OUT UNPRINTABLES\nZONENULL MVZ   PAREA+20(0),HEXZEROS    NULLIFY ZONES\nNUMRNULL MVN   PAREA+20(0),HEXZEROS    NULLIFY NUMERICS\nHEXTR    TR    PAREA+20(0),HEXTABLE    TRANSLATE TO PRINTABLE\nSCALEMVC MVC   PAREA+20(0),SCALE       MOVE SCALE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADING ROUTINES                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         CLC   TOTLINES,COMMAXL        EXCEEDED OUTPUT LINE MAXIMUM??\n         BH    EXIT0000                YES\n         LA    R2,PRINTER\n         PUT   (R2),PRCC               PRINT\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         CLI   PRCC,C' '               SINGLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         CLI   PRCC,C'0'               DOUBLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\nPRT0010  DS    0H\n         CP    COMLINE,P60             TIME FOR HEADINGS?\n         BLR   R10                     NO\nHEADINGS DS    0H\n         AP    COMPAGE,P1              ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'402020202120' EDIT WORD\n         ED    PRPAGE,COMPAGE          EDIT PAGE NUMBER\n         MVC   PRTITLE,COMTITLE        MOVE PAGE TITLE\n         LA    R2,PRINTER\n         PUT   (R2),HEADING            PRINT PAGE HEADING\n         ZAP   COMLINE,P1              SET LINE COUNT TO 1\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         LA    R2,PRINTER\n         MVC   DSNDSN,JFCBDSNM         MOVE DATASET NAME TO HEADING\n         PUT   (R2),DSNLINE            PRINT DATASET NAME LINE\n         AP    COMLINE,P1              ADD 1 TO LINE COUNT\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         TM    COMFLAG,$100            FIRST 100 FORMAT??\n         BOR   R10                     YES, EXIT HERE\n         PUT   (R2),ATTRLINE           PRINT FILE ATTRIBUTE LINE\n         AP    COMLINE,P1              ADD 1 TO LINE COUNT\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         BR    R10                     RETURN\nEXIT0000 DS    0H\n         LA    R2,PRINTER\n         PUT   (R2),MAXLMSG            PRINT MESSAGE\nEXIT0010 DS    0H\n         LA    R2,SYSUT1               INPUT FILE ADDRESS\n         CLOSE ((R2))                  CLOSE INPUT FILE\n         LA    R2,PRINTER              PRINTER FILE ADDRESS\n         CLOSE ((R2))                  CLOSE PRINT FILE\n         CLI   COMCOPY,$COPY           'COPYING' RECORDS??\n         BNE   EXIT0020                NO\n         LA    R2,PRINTER              PRINTER FILE ADDRESS\n         CLOSE ((R2))                  CLOSE PRINT FILE\nEXIT0020 DS    0H\n         L     R13,4(R13)              RESTORE SAVE AREA ADDRESS\n         L     R14,12(R13)             RESTORE REGISTER 14\n         LM    R0,R12,20(R13)          RESTORE ALL OTHER REGISTERS\n         SR    R15,R15                 RETURN CODE\n         BR    R14                     EXIT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTORG\nDWORD    DC    D'0'\nVCOMM    DC    V(FILECOMM)             'COMMON' MODULE ADDRESS\nRECADDR  DC    A(0)                    CURRENT REOCRD ADDRESS\nTOTLINES DC    F'0'                    TOTAL LINES PRINTED\nRECNBR   DC    F'0'                    CURRENT RECORD'S RECORD NUMBER\nFONE     DC    F'1'                    CONSTANT\nRECLEN   DC    H'0'                    CURRENT RECORD LENGTH\nRECPRT   DC    H'0'                    NUMBER OF RECORDS PRINTED\nRPRTLEN  DC    H'0'                    PRINT ROUTINE WORK LENGTH\nH100     DC    H'100'                  CONSTANT\nP0       DC    P'0'                    CONSTANT\nP1       DC    P'1'                    CONSTANT\nP3       DC    P'3'                    CONSTANT\nP10      DC    P'10'                   CONSTANT\nP55      DC    P'55'                   CONSTANT\nP60      DC    P'60'                   CONSTANT\nCENTURY  DC    PL3'0'                  100'S COUNTER\nSCANFLAG DC    X'00'                   SCAN RESULTS INDICATORS\n$1FND    EQU   X'80'                   .. SCAN 1 FOUND\n$2FND    EQU   X'40'                   .. SCAN 2 FOUND\nHEXZEROS DC    100X'00'                CONSTANT\n*                   0 1 2 3 4 5 6 7 8 9 A B C D E F                     VUT16120\nCHRTABLE DC    XL16'40404040404040404040404040404040'     X'00' - X'0F' VUT16130\n         DC    XL16'40404040404040404040404040404040'     X'10' - X'1F' VUT16140\n         DC    XL16'40404040404040404040404040404040'     X'20' - X'2F' VUT16150\n         DC    XL16'40404040404040404040404040404040'     X'30' - X'3F' VUT16160\n         DC    XL16'404040404040404040404A4B4C4D4E4F'     X'40' - X'4F' VUT16170\n         DC    XL16'504040404040404040405A5B5C5D5E5F'     X'50' - X'5F' VUT16180\n         DC    XL16'60614040404040404040406B6C6D6E6F'     X'60' - X'6F' VUT16190\n         DC    XL16'404040404040404040407A7B7C7D7E7F'     X'70' - X'7F' VUT16200\n         DC    XL16'40404040404040404040408B8C8D8E8F'     X'80' - X'8F' VUT16210\n         DC    XL16'40404040404040404040409B9C9D9E9F'     X'90' - X'9F' VUT16220\n         DC    XL16'4040404040404040404040ABACADAEAF'     X'A0' - X'AF' VUT16230\n         DC    XL16'4040404040404040404040BBBCBDBEBF'     X'B0' - X'BF' VUT16240\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'     X'C0' - X'CF' VUT16250\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'     X'D0' - X'DF' VUT16260\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'     X'E0' - X'EF' VUT16270\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'     X'F0' - X'FF' VUT16280\n*                   0 1 2 3 4 5 6 7 8 9 A B C D E F                     VUT16120\nHEXTABLE DC    CL16'0123456789ABCDEF'                     X'00' - X'0F'\n         DC    CL16'1               '                     X'10' - X'1F'\n         DC    CL16'2               '                     X'20' - X'2F'\n         DC    CL16'3               '                     X'30' - X'3F'\n         DC    CL16'4               '                     X'40' - X'4F'\n         DC    CL16'5               '                     X'50' - X'5F'\n         DC    CL16'6               '                     X'60' - X'6F'\n         DC    CL16'7               '                     X'70' - X'7F'\n         DC    CL16'8               '                     X'80' - X'8F'\n         DC    CL16'9               '                     X'90' - X'9F'\n         DC    CL16'A               '                     X'A0' - X'AF'\n         DC    CL16'B               '                     X'B0' - X'BF'\n         DC    CL16'C               '                     X'C0' - X'CF'\n         DC    CL16'D               '                     X'D0' - X'DF'\n         DC    CL16'E               '                     X'E0' - X'EF'\n         DC    CL16'F               '                     X'F0' - X'FF'\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL14' '\nPRTITLE  DC    CL80' '\n         DC    CL15' '\n         DC    C'PAGE '\nPRPAGE   DC    CL6' '\nSCALE    DC    CL100'1...5...10...15...20...25...30...35...40...45...50+\n               ...55...60...65...70...75...80...85...90...95..100'\nDSNLINE  DC    C' RECORDS PRINTED FROM DATASET:'\nDSNDSN   DC    CL44' '\n         DC    CL50' '\nMAXLMSG  DC    CL121'- ********** OUTPUT EXCEEDED, PROGRAM TERMINATED *+\n               *********'\nATTRLINE DC    C' '\n         DC    C'RECORD FORMAT '\nPRRECFM  DC    CL5' '                  SYSUT1 RECORD FORMAT\n         DC    C'   RECORD SIZE'\nPRLRECL  DC    X'4020206B202120'       SYSUT1 LOGICAL RECORD LENGTH\n         DC    C'   BLOCK SIZE'\nPRBLKSI  DC    X'4020206B202120'       SYSUT1 BLOCK SIZE\n         DC    CL75' '\nPLINE    DS    0CL121\nPRCC     DC    C' '                    CARRIAGE CONTROL\nPAREA    DS    0CL120                  PRINT AREA\n         DC    CL14' '\nPR100    DC    X'402020202020'         100'S PREFIX\n         ORG   PAREA\nPR#      DC    C' '                    RECORD NUMBER PREFIX\nPRRECNBR DC    X'402020202021'         RECORD NUMBER\nPRSIZE   DC    C' SIZE'\nPRRECLEN DC    X'402020202021'         RECORD SIZE\n         DC    C'  '\n         DC    CL100' '\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nFILECOMM DSECT\n         FILECOMM\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         XLOC  TYPE=DSECT\n         EJECT\n         DCBD  DSORG=PS\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     REGISTER EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   FILEPH02\n./ ADD NAME=FILEPH03 0100-02291-02291-0123-00254-00254-00000-RLRICE\n         MACRO\n&NAME    HELP  &DATA\n         LCLC  &NDX\n&NDX     SETC  '&SYSNDX'\n&NAME    DS    0C\n         DC    AL2(E&NDX-B&NDX)\nB&NDX    DS    0C\n         DC    C&DATA\nE&NDX    DS    0C\n         MEND\nFILEPH03 CSECT\n         USING FILEPH03,R15            SPECIFY CSECT BASE\n         ID                            DATE AND TIME COMPILED\n         LR    R11,R15                 COPY BASE ADDRESS\n         DROP  R15                     DROP PREVIOUS BASE\n         USING FILEPH03,R11            RESUME WITH NEW BASE\n         L     R12,VCOMM               COMMON MODULE ADDRESS\n         USING FILECOMM,R12            DEFINE COMMON BASE\n         BAL   R10,HEADINGS            PRINT 'HELP' HEADINGS\n         LA    R9,HELPDATA             HELP DATA\nHELP0010 DS    0H\n         CLI   0(R9),X'FF'             END OF HELP DATA??\n         BE    EXIT0000                YES\n         MVC   PLINE,PLINE-1           CLEAR PRINT AREA\n         SR    R3,R3                   CLEAR FOR LENGTH\n         ICM   R3,3,0(R9)              DATA LENGTH\n         BCTR  R3,0                    ADJUST FOR EXECUTE\n         EX    R3,HELPMVC              MOVE HELP DATA\n         BAL   R10,PRT0000             PRINT HELP DATA\n         LA    R9,3(R3,R9)             NEXT HELP DATA\n         B     HELP0010                PRINT NEXT LINE\nHELPMVC  MVC   PLINE(0),2(R9)          MOVE HELP DATA\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADING ROUTINES                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER\n         PUT   (R2),PRCC               PRINT\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C' '               SINGLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C'0'               DOUBLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\nPRT0010  DS    0H\n         CP    COMLINE,P55             TIME FOR HEADINGS?\n         BLR   R10                     NO\nHEADINGS DS    0H\n         AP    COMPAGE,P1              ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'402020202120' EDIT WORD\n         ED    PRPAGE,COMPAGE          EDIT PAGE NUMBER\n         LA    R2,PRINTER\n         PUT   (R2),HEADING            PRINT PAGE HEADING\n         LA    R2,PRINTER\n         ZAP   COMLINE,P1              RESET LINE COUNT\n         BR    R10                     RETURN\nEXIT0000 DS    0H\n         LA    R2,SYSUT1               INPUT FILE ADDRESS\n         CLOSE ((R2))                  CLOSE INPUT FILE\n         LA    R2,PRINTER              PRINTER FILE ADDRESS\n         CLOSE ((R2))                  CLOSE PRINT FILE\n         CLI   COMCOPY,$COPY           'COPYING' RECORDS??\n         BNE   EXIT0010                NO\n         LA    R2,SYSUT2               OUTPUT FILE ADDRESS\n         CLOSE ((R2))                  CLOSE OUTPUT FILE\nEXIT0010 DS    0H\n         L     R13,4(R13)              RESTORE SAVE AREA ADDRESS\n         L     R14,12(R13)             RESTORE REGISTER 14\n         LM    R0,R12,20(R13)          RESTORE ALL OTHER REGISTERS\n         SR    R15,R15                 RETURN CODE\n         BR    R14                     EXIT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTORG\nVCOMM    DC    V(FILECOMM)             'COMMON' MODULE ADDRESS\nP0       DC    P'0'                    CONSTANT\nP1       DC    P'1'                    CONSTANT\nP55      DC    P'55'                   CONSTANT\nHEADING  DS    0C\n         DC    CL111'1                   FILE UTILITY CONTROL PARAMETER+\n               S'\n         DC    C'PAGE'\nPRPAGE   DC    CL6' '\n         DC    C' '\nPLINE    DS    0CL121\nPRCC     DC    C' '\n         DC    CL120' '\n         EJECT\nHELPDATA DS    0H\n         HELP  '0                     FILE UTILITY PARAMETERS'\n         HELP  '0*                 AN ASTERISK IN COLUMN 1 SPECIFIES A +\n               COMMENT.  THE'\n         HELP  '                   REMAINDER OF THE RECORD WILL BE IGNO+\n               RED.  ANY NUMBER'\n         HELP  '                   OF COMMENTS MAY BE USED INTERMIXED W+\n               ITH PARAMETER'\n         HELP  '                   STATEMENTS IN ANY ORDER.'\n         HELP  '0COPY              SPECIFIES THAT THE RECORDS PRINTED W+\n               ILL ALSO BE COPIED'\n         HELP  '                   TO THE DATASET POINTED TO BY THE ''S+\n               YSUT2'' DD.'\n         HELP  '0COUNT=NNN         SPECIFIES THE MAXIMUM NUMBER OF RECO+\n               RDS TO BE PRINTED.'\n         HELP  '                   NOTE THAT THIS IS NOT THE NUMBER OF +\n               RECORDS READ.  IF'\n         HELP  '                   SCAN(S) ARE USED MANY MORE RECORDS M+\n               AY BE READ THAN'\n         HELP  '                   ARE PRINTED.'\n         HELP  '0MAXLINES=NNNNN    SPECIFIES THE MAXIMUM NUMBER OF LINE+\n               S TO BE PRINTED.'\n         HELP  '                   THIS CAN PREVENT ''RUN AWAY'' PRINT.+\n                DEFAULT=10000.'\n         HELP  '0NOHEX             SPECIFIES THAT THE CHARACTER PORTION+\n                ONLY BE PRINTED.'\n         HELP  '                   ZONE, NUMERIC, AND SCALE LINES WILL +\n               BE SUPPRESSED.'\n         HELP  '0SKIP=NNN          SPECIFIES A NUMBER OF RECORDS TO BE +\n               SKIPPED BEFORE ANY'\n         HELP  '                   OTHER PARAMETERS ARE PROCESSED (SUCH+\n                AS SCAN OR TRIGGER).'\n         HELP  '0   SCAN='' ''       SPECIFIES A DATA STRING TO BE LOCA+\n               TED IN EACH RECORD'\n         HELP  ' OR SCAN=X'' ''      BEFORE IT IS SELECTED TO BE PRINTE+\n               D.  THIS PROVIDES'\n         HELP  ' OR SCAN1='' ''      A METHOD TO ''FILTER'' DESIRED REC+\n               ORDS.  THE STRING MAY'\n         HELP  ' OR SCAN1=X'' ''     BE EITHER IN CHARACTER OR HEX.  DE+\n               FAULT IS CHARACTER.'\n         HELP  '                   THE LETTER ''X'' PRECEEDING THE OPEN+\n               ING QUOTE INDICATES'\n         HELP  '                   THAT THE DATA IS IN HEX.'\n         HELP  '0   SCAN2='' ''      SPECIFIES A SECOND DATA STRING TO +\n               BE LOCATED IN EACH'\n         HELP  ' OR SCAN2=X'' ''     RECORD.  SCAN OR SCAN1 MUST BE USE+\n               D WHEN SCAN2 IS USED'\n         HELP  '                   (IF YOU ONLY HAVE ONE STRING USE SCA+\n               N OR SCAN1).  THE'\n         HELP  '                   RELATIONSHIP OF SCAN1 AND SCAN2 MAY +\n               BE ''AND'' OR ''OR''.'\n         HELP  '                   IF ''AND'', THEN BOTH SCAN1 AND SCAN+\n               2 MUST BE FOUND IN'\n         HELP  '                   THE SAME RECORD BEFORE IT WILL BE PR+\n               INTED.  IF ''OR'','\n         HELP  '                   THEN IF EITHER SCAN1 OR SCAN2 IS FOU+\n               ND IN A RECORD IT'\n         HELP  '                   WILL BE PRINTED.  THIS RELATIONSHIP +\n               IS DETERMINED BY'\n         HELP  '                   THE ''SCANCTRL'' PARAMETER.'\n         HELP  '0SCANCTRL=1 OR 2   SPECIFIES THE RELATIONSHIP OF SCAN/S+\n               CAN1 AND SCAN2.'\n         HELP  '     OR            THIS PARAMETER IS ONLY VALID WHEN SC+\n               AN/SCAN1 AND'\n         HELP  ' SCANCTRL=1 AND 2  SCAN2 ARE SPECIFIED.'\n         HELP  '0SINGLE            SPECIFIES SINGLE SPACING.  THIS IS V+\n               ALID ONLY WHEN'\n         HELP  '                   ''NOHEX'' IS ALSO SPECIFIED.'\n         HELP  '0FIRST100          FORCES SINGLE SPACING, NOHEX, SUPPRE+\n               SSES FILE DCB  '\n         HELP  '                   ATTRIBUTES, LOGICAL RECORD NUMBER, A+\n               ND TRUNCATES'\n         HELP  '                   RECORDS AT 100 CHARACTERS.'\n         HELP  '0TITLE='' ''         SPECIFIES A CHARACTER STRING TO BE+\n                PRINTED IN THE'\n         HELP  '                   HEADINGS OF EACH PAGE.'\n         HELP  ' TRIGGER='' ''       SIMILAR TO ''SCAN'' THIS SPECIFIES+\n                A DATA STRING TO'\n         HELP  '                   LOCATE IN A RECORD BEFORE PRINTING A+\n               NY RECORDS.'\n         HELP  '0ZONE=NNN          SPECIFIES A STARTING AND ENDING POSI+\n               TION WITHIN THE'\n         HELP  '   OR              RECORDS TO FIND THE SCAN/SCAN1 VALUE+\n               .  THIS'\n         HELP  ' ZONE1=NNN         PARAMETER IS VALID ONLY WHEN SCAN/SC+\n               AN1 IS ALSO'\n         HELP  '                   SPECIFIED.'\n         HELP  '0ZONE2=NNN         SAME AS ZONE/ZONE1 FOR THE ''SCAN2''+\n                PARAMETER.'\n         HELP  '0TZONE=NNN         SAME AS ZONE/ZONE1 FOR THE ''TRIGGER+\n               '' PARAMETER.'\n         HELP  '-                     USAGE NOTES'\n         HELP  '0   THE FILE UTILITY WILL READ ANY SEQUENTIAL DATASET O+\n               R PDS MEMBER'\n         HELP  ' THAT IS SUPPORTED BY THE MVS QSAM ACCESS METHOD.  THE +\n               RECORD FORMAT,'\n         HELP  ' RECORD LENGTH, AND BLOCK SIZE ARE PRINTED IN THE HEADI+\n               NG OF EACH PAGE.'\n         HELP  ' SINCE RECORDS MAY BE OF VARIABLE LENGTH, THE LENGTH OF+\n                EACH RECORD'\n         HELP  ' IS PRINTED IN THE PREFIX AREA OF THE FIRST LINE OF EAC+\n               H RECORD.  THE'\n         HELP  ' RELATIVE RECORD NUMBER OF EACH RECORD IS ALSO PRINTED +\n               IN THE PREFIX'\n         HELP  ' OF THE FIRST LINE FOR EACH RECORD.'\n         HELP  '0   THE CONTROL STATEMENTS ARE PRINTED SO YOU CAN LATER+\n                VERIFY SCAN/'\n         HELP  ' TRIGGER/SKIP OR OTHER PARAMETERS, OR AS DOCUMENTATION +\n               OF HOW THE'\n         HELP  ' PRINTED RECORDS WERE SELECTED.'\n         HELP  '0   ANY NUMBER OF CONTROL STATEMENTS MAY BE USED.  YOU +\n               MAY SPECIFY ONE'\n         HELP  ' OR MORE PARAMETERS ON EACH STATEMENT.  SEPARATE PARAME+\n               TERS WITH COMMAS.'\n         HELP  ' THE FIRST BLANK FOLLOWING A COMPLETE PARAMETER MARKS T+\n               HE END OF THE'\n         HELP  ' PARAMETERS, THE REMAINING COLUMNS WILL BE IGNORED AND +\n               CAN BE USED FOR'\n         HELP  ' COMMENTS.  STATEMENTS CANNOT BE CONTINUED.'\n         HELP  '0   DD STATEMENTS REQUIRED ARE:'\n         HELP  '0      SYSUT1    - INPUT DATASET'\n         HELP  '       SYSPRINT  - PRINT OUTPUT'\n         HELP  '       SYSUT2    - OUTPUT DATASET (ONLY IF THE ''COPY''+\n                FUNCTION IS USED)'\n         HELP  '0   THE SYSIN DD STATEMENT IS OPTIONAL.  IF OMITTED, AL+\n               L RECORDS WILL'\n         HELP  ' BE PRINTED IN HEX.'\n         DC    X'FFFF'\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nFILECOMM DSECT\n         FILECOMM\n         DCBD  DSORG=PS\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     REGISTER EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   FILEPH03\n./ ADD NAME=PDSCOMM  0100-02291-02291-0123-00007-00007-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*               COMMON MODULE                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n        PDSBLOK BLOCK=COMM,TYPE=CSECT\n        END\n./ ADD NAME=PDSPH00  0100-02291-02291-0123-00950-00950-00000-RLRICE\n*---------------------------------------------------------------------*\n*     NAME: PDSPH00                                                   *\n*                                                                     *\n* FUNCTION: THIS MODULE OPENS ALL FILES IN THE 'FILECOMM' BLOCK AND   *\n*           READS THE CONTROL STATEMENTS.  THE SCANNED DATASET NAME   *\n*           AND DCB INFORMATION IS PRINTED IN THE HEADINGS, AND       *\n*           CONTROL STATEMENTS LISTED TO PROVIDE A METHOD TO REVIEW   *\n*           OR VERIFY HOW A PARTICULAR SCAN WAS PERFORMED.            *\n*                                                                     *\n*           EACH SCAN RECORD WILL BE ALLOCATED TO A SEPARATE OUTPUT   *\n*           DD SO EACH REQUESTED SCAN VALUE WILL BE PRINTED ON A      *\n*           LOGICALLY SEPARATE REPORT.  THE DD'S FOR THESE REPORTS    *\n*           ARE DYNAMICALLY ALLOCATED VIA THE 'DAIR' FACILITY,        *\n*           ALLOWING YOU TO SCAN ON VARYING NUMBERS OF SCAN ARGUEMENTS*\n*           WITHOUT HAVING TO CHANGE THE JCL.                         *\n*                                                                     *\n*           WHEN ALL CONTROL STATEMENTS HAVE BEEN PROCESSED, CONTROL  *\n*           IS EITHER PASSED TO 'PDSPH01' FOR SCANNING THE PDS, OR    *\n*           'PDSPH02' FOR THE 'HELP' FUNCTION.                        *\n*                                                                     *\n*       THE CONTROL STATEMENTS ARE:                                   *\n*                                                                     *\n*     COMMENT: AN ASTERISK '*' IN COLUMN 1 DENOTES THE STATEMENT IS   *\n*              A COMMENT.  ANY NUMBER OF COMMENTS MAY BE USED IN ANY  *\n*              ORDER.                                                 *\n*                                                                     *\n*     LINE COUNT: (LINECT= IN COLUMNS 1-7).  THE LINE COUNT MAY BE    *\n*              SET TO A VALUE IN THE RANGE 10-999 (THREE DIGITS MAX). *\n*              LINE COUNT IS GLOBAL, THAT IS IT APPLIES TO THE        *\n*              SYSPRINT OUTPUT AND ALL SCAN OUTPUT FILES.  DEFAULT    *\n*              LINE COUNT IS 72.                                      *\n*                                                                     *\n*     OUTPUT CLASS: (CLASS= IN COLUMNS 1-6).  THE OUTPUT CLASS        *\n*              ALLOCATED BY THE DYNAMIC SCAN DD FUNCTION MAY BE       *\n*              CHANGED TO ANY CLASS (A-Z AND 0-9).  THE CLASS MAY     *\n*              BE CHANGED MULTIPLE TIMES IF DESIRED AND APPLIES ONLY  *\n*              TO DYNAMIC ALLOCATION OF SCAN DD'S FOLLOWING THE CLASS *\n*              CONTROL STATEMENT.  DEFAULT CLASS IS 'X'.              *\n*                                                                     *\n*     CHARACTER SCAN:  (SCAN=' IN COLUMNS 1-6).  SPECIFIES A STRING TO*\n*              BE SEARCHED FOR.  THE VALUE MAY BE 1 TO 70 CHARACTERS  *\n*              IN LENGTH AND MUST BE ENCLOSED IN APOSTROPHES.         *\n*              APOSTROPHES IN THE SEARCH ARGUEMENT MUST BE SPECFIED   *\n*              AS TWO APOSTROPHES ('O''CLOCK').                      *\n*                                                                     *\n*     HEX SCAN: (SCAN=X' IN COLUMNS 1-7).  SPECIFIES A HEX STRING TO  *\n*              BE SEARCHED FOR.  THE VALUE MAY BE 1 TO 35 BYTES       *\n*              (2-70 HEX CHARACTERS).                                 *\n*                                                                     *\n*     HELP: (HELP IN COLUMNS 1-4).  REQUEST THE PDSSCAN HELP REPORT.  *\n*              NO ACTUAL SCAN WILL BE PERFORMED, ONLY THE HELP REPORT *\n*              WILL BE PRINTED.                                       *\n*                                                                     *\n*                                                                     *\n*  JCL REQUIRED TO EXECUTE THE PDSSCAN UTILITY IS:                    *\n*                                                                     *\n*   //...      JOB                                                    *\n*   //PDSSCAN  EXEC PGM=PDSSCAN                                       *\n*   //SYSUT1   DD  DSN=PDS NAME,DISP=SHR                              *\n*   //SYSPRINT DD  SYSOUT=*                                           *\n*   //SYSIN    DD  *                                                  *\n*      CONTROL STATEMENTS                                             *\n*      .                                                              *\n*      .                                                              *\n*      .                                                              *\n*   /*                                                                *\n*   //                                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nPDSPH00 CSECT\n         USING PDSPH00,R12,R8                                           ASE00100\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT                       ASE00120\n         LA    R8,2048(R12)        INITIALIZE 2NDARY BASE\n         LA    R8,2048(R8)         ... DITTO\n         L     R10,VCOMM           COMMON MODULE ADDRESS\n         USING PDSCOMM,R10         DEFINE COMM BASE\n         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS  ASE00130\n         LA    R13,COMMSAVE        POINT TO OUR SAVE AREA               ASE00140\n         ST    R13,8(R2)           CHAIN FORWARD                        ASE00150\n         ST    R2,4(R13)           CHAIN BACKWARD                       ASE00160\n         B     INIT0000\n         DC    C'PDS SCAN PH00 INITIALIZATION MODULE'\nINIT0000 DS    0H\n         LA    R2,PRINTER          PRINTER DCB\n         OPEN  ((R2),OUTPUT)       OPEN PRINTER DCB\n         LA    R2,SYSIN            CONTROL STATEMENT DCB\n         USING IHADCB,R2           DEFINE DCB BASE\n         LA    R1,EOF0000          SYSIN END OF FILE ROUTINE\n         STCM  R1,7,DCBEODA        INSERT END OF FILE ADDRESS\n         OPEN  ((R2),INPUT)        OPEN CONTROL STATEMENT DCB\n         LA    R2,PDSDIR           PDS DIRECTORY DCB\n         OPEN  ((R2),INPUT)        OPEN DIRECTORY DCB\n         LA    R2,PDSMEM           PDS MEMBER DCB\n         OPEN  ((R2),INPUT)        OPEN PDS MEMBER DCB\n         RDJFCB MF=(E,JFCBREQ)     READ JFCB FOR THIS DATASET\n         LA    R1,COMMRF           TRANSLATED RECORD FORMAT\n         MVI   0(R1),C'U'          ASSUME UNDEFINE FORMAT\n         TM    DCBRECFM,DCBRECU    UNDEFINED??\n         BO    ATTR0010            YES\n         MVI   0(R1),C'V'          ASSUME VARIABLE LENGTH RECORDS\n         TM    DCBRECFM,DCBRECV    VARIABLE LENGTH RECORDS??\n         BO    ATTR0010            YES\n         MVI   0(R1),C'F'          ASSUME FIXED LENGTH RECORDS\nATTR0010 DS    0H\n         LA    R1,1(R1)            ADVANCE ADDRESS\n         TM    DCBRECFM,DCBRECBR   BLOCKED RECORDS??\n         BNO   ATTR0020            NO\n         MVI   0(R1),C'B'          INDICATE BLOCKED\n         LA    R1,1(R1)            ADVANCE ADDRESS\nATTR0020 DS    0H\n         TM    DCBRECFM,DCBRECSB   SPANNED RECORDS??\n         BNO   ATTR0030            NO\n         MVI   0(R1),C'S'          INDICATE SPANNED\n         LA    R1,1(R1)            ADVANCE ADDRESS\nATTR0030 DS    0H\n         TM    DCBRECFM,DCBRECCA   ASA CONTROL CHARACTERS??\n         BNO   ATTR0040            NO\n         MVI   0(R1),C'A'          INDICATE ASA CONTROL CHARACTERS\n         LA    R1,1(R1)            ADVANCE ADDRESS\nATTR0040 DS    0H\n         TM    DCBRECFM,DCBRECCM   MACHINE CONTROL CHARACTERS??\n         BNO   ATTR0050            NO\n         MVI   0(R1),C'M'          INDICATE MACHINE CONTROL CHARACTERS\nATTR0050 DS    0H\n         MVC   COMMRSZ,DCBLRECL    COPY RECORD LENGTH\n         MVC   COMMBSZ,DCBBLKSI    COPY BLOCK SIZE\n         BAL   R9,HEAD0000         PRINT HEADING\n         MVC   PRDSN,JFCBDSNM      COPY DATASET NAME\n         MVC   PRRECFM,COMMRF      COPY TRANSLATED RECORD FORMAT\n         SR    R1,R1               CLEAR FOR RECORD SIZE\n         ICM   R1,3,COMMRSZ        RECORD SIZE\n         CVD   R1,DWORD            CONVERT TO DECIMAL\n         MVC   PRLRECL,=X'402020202120'\n         ED    PRLRECL,DWORD+5     EDIT RECORD LENGTH\n         ICM   R1,3,COMMBSZ        BLOCK SIZE\n         CVD   R1,DWORD            CONVERT TO DECIMAL\n         MVC   PRBLKSZ,=X'402020202120'\n         ED    PRBLKSZ,DWORD+5     EDIT BLOCK SIZE\n         MVC   PLINE(DSNLINEL),DSNLINE\n         BAL   R9,PRT0000          PRINT DATASET NAME\n         MVC   PLINE(DCBLINEL),DCBLINE\n         BAL   R9,PRT0000          PRINT DCB INFO\n         MVC   PLINE(MSG0L),MSG0   MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT 'HELP' INFO MESSAGE\n         LA    R1,ALORB            DAIR REQUEST BLOCK\n         USING S99RB,R1            DEFINE BASE\n         MVI   S99VERB,S99VRBAL    INSERT ALLOCATION VERB\n         MVI   S99RBLN,S99RBEND-S99RB     INSERT RB LENGTH\n         LA    R2,ALOPARM          FIRST TEXT UNIT ADDRESS\n         ST    R2,S99TXTPP         INSERT TEXT ADDRESS ADDRESS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS CONTROL STATEMENTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC0000 DS    0H\n         GET   SYSIN,CTLAREA       READ CONTROL STATEMENT\n         MVC   PLINE+1(CTLAREAL),CTLAREA\n         CLI   CTLAREA,C'*'        COMMENT??\n         BE    PROC0010            YES\n         MVI   PLINE,C'0'          DOUBLE SPACE\nPROC0010 DS    0H\n         BAL   R9,PRT0000          PRINT CONTROL STATEMENT\n         CLI   CTLAREA,C'*'        COMMENT??\n         BE    PROC0000            READ NEXT CONTROL STATEMENT\n         CLC   =C'LINECT=',CTLAREA LINE COUNT CONTROL STATEMENT??\n         BE    LINE0000            YES\n         CLC   =C'SCAN=X''',CTLAREA HEX SCAN CONTROL STATEMENT??\n         BE    SCAN0000            YES\n         CLC   =C'SCAN=''',CTLAREA SCAN CONTROL STATEMENT??\n         BE    SCAN1000            YES\n         CLC   =C'ZONE=',CTLAREA   ZONE CONTROL STATEMENT??\n         BE    ZONE0000            YES\n         CLC   =C'CLASS=',CTLAREA  SYSOUT CLASS CONTROL STATEMENT??\n         BE    CLASS000            YES\n         CLC   =C'HELP ',CTLAREA   'HELP' CONTROL STATEMENT??\n         BE    HELP0000            YES\n         CLC   =C'NAME=',CTLAREA   'NAME' CONTROL STATEMENT??\n         BE    NAME0000            YES\n         CLC   =C'ABEND ',CTLAREA  'ABEND' CONTROL STATEMENT??\n         BE    ABEND000            YES\n         MVC   PLINE(MSG1L),MSG1   INVALID COMMAND MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS LINE COUNT CONTROL STATEMENT                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nLINE0000 DS    0H\n         LA    R1,3                MAXIMUM NUMBER OF DIGITS\n         MVC   NUMWORK,=C'00000'   INITIALIZE WORK AREA\n         LA    R2,CTLAREA+7        FIRST DIGIT\nLINE0010 DS    0H\n         CLI   0(R2),C' '          BLANK??\n         BE    LINE0020            YES\n         CLI   0(R2),C'0'          VALID DIGIT??\n         BL    LINE0030            NO\n         CLI   0(R2),C'9'          VALID DIGIT??\n         BH    LINE0030            NO\n         MVC   NUMWORK(4),NUMWORK+1\n         MVC   NUMWORK+4(1),0(R2)  MOVE DIGIT TO UNITS POSITION\n         LA    R2,1(R2)            NEXT DIGIT\n         B     LINE0010            PROCESS ALL DIGITS\nLINE0020 DS    0H\n         PACK  DWORD,NUMWORK       PACK LINE COUNT\n         CP    DWORD,P10           LINE COUNT TOO SMALL??\n         BL    LINE0040            YES\n         ZAP   COMMAXL,DWORD       SET MAX LINE COUNT\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nLINE0030 DS    0H\n         MVC   PLINE(MSG2L),MSG2   MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nLINE0040 DS    0H\n         MVC   PLINE(MSG3L),MSG3   MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS SYSOUT CLASS CONTROL STATEMENT                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nCLASS000 DS    0H\n         CLI   CTLAREA+6,C'A'      VALID CLASS??\n         BL    CLASS020            NO\n         CLI   CTLAREA+6,C'Z'      VALID CLASS??\n         BNH   CLASS010            YES\n         CLI   CTLAREA+6,C'0'      VALID CLASS??\n         BL    CLASS020            NO\n         CLI   CTLAREA+6,C'9'      VALID CLASS??\n         BH    CLASS020            NO\nCLASS010 DS    0H\n         MVC   PRTCLASS,CTLAREA+6  SET NEW SYSOUT CLASS\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nCLASS020 DS    0H\n         MVC   PLINE(MSG9L),MSG9   MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS HEX SCAN CONTROL STATEMENTS                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN0000 DS    0H\n         NI    PGMFLAGS,255-$VALIDSC TURN OFF VALID SCAN FLAG\n         SR    R1,R1               CLEAR FOR LENGTH\n         LA    R2,CTLAREA+7        FIRST HEX DIGIT\n         LA    R3,70               MAXIMUM HEX DIGITS\nSCAN0010 DS    0H\n         CLI   0(R2),X'7D'         CLOSING QUOTE??\n         BE    SCAN0030            YES\n         CLI   0(R2),C'A'          VALID HEX DIGIT??\n         BL    SCAN0050            NO\n         CLI   0(R2),C'G'          VALID HEX DIGIT??\n         BL    SCAN0020            YES\n         CLI   0(R2),C'0'          VALID HEX DIGIT??\n         BL    SCAN0050            NO\n         CLI   0(R2),C'9'          VALID HEX DIGIT??\n         BH    SCAN0050            NO\nSCAN0020 DS    0H\n         LA    R1,1(R1)            ADD TO LENGTH\n         LA    R2,1(R2)            NEXT HEX DIGIT\n         BCT   R3,SCAN0010         LOOP\n         B     SCAN0060            NO CLOSING QUOTE\nSCAN0030 DS    0H\n         STH   R1,TEMPL            STORE LENGTH\n         TM    TEMPL+1,X'01'       IS LENGTH ODD??\n         BO    SCAN0070            YES, INVALID\n         LTR   R1,R1               LENGTH ZERO??\n         BZ    SCAN0080            YES, INVALID\n         SRL   R1,1                DIVIDE LENGTH BY 2\n         STH   R1,TEMPL            SAVE 'EFFECTIVE' LENGTH\n         MVC   TEMPVAL,CTLAREA+5   MOVE SCAN VALUE\n         NC    CTLAREA+7(70),HEX1F1F  DROP HIGH ZONE BITS\n         TR    CTLAREA+7(70),PACKTBL  TRANSLATE FOR PACKING\n         LA    R2,TEMPARG          SCAN VALUE\n         LA    R3,CTLAREA+7        START OVER\nSCAN0040 DS    0H\n         PACK  0(2,R2),0(3,R3)     PACK A DIGIT\n         LA    R2,1(R2)            NEXT SCAN VALUE BYTE\n         LA    R3,2(R3)            NEXT 'HEX' BYTE\n         BCT   R1,SCAN0040         PACK ALL BYTES\n         B     SCAN2000            BUILD SCAN BLOCK\nSCAN0050 DS    0H\n         MVC   PLINE(MSG4L),MSG4   INVALID HEX DIGIT\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nSCAN0060 DS    0H\n         MVC   PLINE(MSG5L),MSG5   NO CLOSING QUOTE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nSCAN0070 DS    0H\n         MVC   PLINE(MSG6L),MSG6   ODD NUMBER OF HEX DIGITS\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nSCAN0080 DS    0H\n         MVC   PLINE(MSG7L),MSG7   LENGTH ZERO\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PROCESS CHARACTER SCAN CONTROL STATEMENTS                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN1000 DS    0H\n         NI    PGMFLAGS,255-$VALIDSC TURN OFF VALID SCAN FLAG\n         LA    R1,CTLAREA+6        FIRST BYTE OF SCAN VALUE\n         MVI   TEMPARG,C' '        INITIALIZE ARGUEMENT\n         MVC   TEMPARG+1(L'TEMPARG-1),TEMPARG\n         LA    R2,TEMPARG          FIRST BYTE OF SCAN ARGUEMENT\n         LA    R3,70               MAXIMUM SCAN ARGUEMENT LENGTH\n         SR    R4,R4               ZERO FOR LENGTH\nSCAN1010 DS    0H\n         CLI   0(R1),X'7D'         CLOSING QUOTE??\n         BNE   SCAN1020            NO\n         CLI   1(R1),C' '          BLANK??\n         BE    SCAN1030            YES... ENDING QUOTE\n         CLI   1(R1),X'7D'         DOUBLE QUOTE??\n         BNE   SCAN1040            NO... INVALID SYNTAX\n         LA    R1,1(R1)            SKIP 1 QUOTE\n         BCT   R3,SCAN1020         MINUS 1 FROM LENGTH\n         B     SCAN0060            NO CLOSING QUOTE\nSCAN1020 DS    0H\n         MVC   0(1,R2),0(R1)       COPY TO SCAN ARG\n         LA    R1,1(R1)            NEXT INPUT BYTE\n         LA    R2,1(R2)            NEXT ARGUEMENT BYTE\n         LA    R4,1(R4)            ARGUEMENT LENGTH\n         BCT   R3,SCAN1010         TRY AGAIN\n         B     SCAN0060            NO CLOSING QUOTE\nSCAN1030 DS    0H\n         MVC   TEMPVAL,TEMPARG     COPY ARGUEMENT TO VALUE\n         STH   R4,TEMPL            SAVE SEARCH VALUE LENGTH\n         B     SCAN2000            BUILD SCAN BLOCK\nSCAN1040 DS    0H\n         MVC   PLINE(MSG8L),MSG8   LENGTH ZERO\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        INITIALIZE SCAN BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN2000 DS    0H\n         LA    R0,SCANBLOKL        SCAN BLOCK LENGTH\n         GETMAIN R,LV=(0)          ACQUIRE STORAGE FOR SCAN BLOCK\n         LTR   R15,R15             GETMAIN SUCCESSFUL??\n         BNZ   ERR1000             NO\n         LR    R11,R1              COPY STORAGE ADDRESS\n         USING SCANBLOK,R11        DEFINE BASE\n         XC    SCANNEXT,SCANNEXT   ZERO NEXT IN CHAIN\n         MVC   SCANL,TEMPL         COPY SCAN ARGUEMENT LENGTH\n         MVC   SCANVAL,TEMPVAL     COPY SCAN VALUE (SOURCE)\n         MVC   SCANARG,TEMPARG     COPY SCAN VALUE (CONVERTED)\n         MVC   SCANDCB(96),INITDCB COPY DCB\n         MVC   SCANPARM(INITPARML),INITPARM\n         ZAP   SCANLC,P0           INITIALIZE LINE COUNT\n         ZAP   SCANPC,P0           INITIALIZE PAGE COUNT\n         LH    R3,SCANL            SCAN ARGUEMENT LENGTH\n         XLOC  TYPE=INIT,          INITIALIZE XLOC                     +\n               STRLEN=(R3),        .. STRING LENGTH                    +\n               STRING=SCANARG,     .. SEARCH STRING                    +\n               WORK=SCANWORK,      .. WORK AREA FOR THIS STRING        +\n               TABLE=COMMFOC,      .. FREQUENCY OF OCCURRENCE TABLE    +\n               MF=(E,SCANPARM)     .. EXECUTION FORM\n         CLI   SCANPARM+(XLOCSTAT-XLOCLIST),$XLOCOK   SUCCESSFUL INIT??\n         BNE   ERR2000             NO\n         AP    DDCNT,P1            ADD 1 TO DD NAMES ALLOCATED\n         MVC   DDWORK+2(6),=X'F02020202020'\n         ED    DDWORK+2(6),DDCNT   EDIT DD NUMBER\n         MVC   DDWORK(3),=C'PRT'   INSERT 'PRT'\n         MVC   DAIRWORK(DAIRWORKL),DAIRINIT   INITIALIZE CONSTANTS\n         MVC   DAIRDD,DDWORK       MOVE DD NAME\n         LA    R2,SCANDCB          DCB WITHIN SCAN BLOCK\n         MVC   DCBDDNAM,DDWORK     COPY NAME TO DCB\n         MVC   SCANDD,DDWORK       SAVE NAME FOR DEALLOCATION\n         LA    R1,ALORBA           REQUEST BLOCK ADDRESS ADDRESS\n         SVC   99                  ISSUE DAIR SVC\n         LTR   R15,R15             SUCCESSFUL??\n         BNZ   ERR3000             NO\n         LA    R1,COMMANCH         SCAN BLOCK ANCHOR\nSCAN2010 DS    0H\n         ICM   R2,15,0(R1)         SCAN BLOCK ADDRESS\n         BZ    SCAN2020            END OF CHAIN FOUND\n         LR    R1,R2               COPY SCAN BLOCK ADDRESS\n         B     SCAN2010            SEARCH FOR END OF CHAIN\nSCAN2020 DS    0H\n         ST    R11,0(R1)           ADD NEW BLOCK TO END OF CHAIN\n         ST    R11,CURRSCAN        SAVE CURRENT SCAN BLOCK ADDRESS\n         OI    PGMFLAGS,$VALIDSC   TURN ON VALID SCAN FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ZONE PROCESSING                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nZONE0000 DS    0H\n         OC    CURRSCAN,CURRSCAN   HAS SCAN BLOCK BEEN SET??\n         BZ    ZONE0100            NO\n         TM    PGMFLAGS,$VALIDSC   LAST SCAN VALID??\n         BNO   ZONE0180            NO\n         L     R11,CURRSCAN        CURRENT SCAN BLOCK\n         MVI   SCANFLAG,X'00'      RESET ALL FLAGS\n         LA    R2,CTLAREA+5        FIRST DIGIT OF ZONE\n         CLI   0(R2),C','          ZONE BEGIN OMITTED??\n         BE    ZONE0030            YES\n         LA    R3,6                LOOP LIMITER\n         MVC   NUMWORK,=C'00000'   INITIALIZE WORK AREA\nZONE0010 DS    0H\n         CLI   0(R2),C' '          END OF STATEMENT??\n         BE    ZONE0020            YES\n         CLI   0(R2),C','          DELIMITER??\n         BE    ZONE0020            YES\n         CLI   0(R2),C'0'          VALID DIGIT??\n         BL    ZONE0110            NO\n         CLI   0(R2),C'9'          VALID DIGIT??\n         BH    ZONE0110            NO\n         MVC   NUMWORK(4),NUMWORK+1\n         MVC   NUMWORK+4(1),0(R2)  MOVE TO DIGITS POSITION\n         LA    R2,1(R2)            NEXT DIGIT\n         BCT   R3,ZONE0010         LOOP\n         B     ZONE0120            TOO MANY DIGITS\nZONE0020 DS    0H\n         PACK  DWORD,NUMWORK       PACK ZONE BEGIN\n         CVB   R1,DWORD            CONVERT TO BINARY\n         LTR   R1,R1               ZERO??\n         BZ    ZONE0130            YES\n         CH    R1,COMMRSZ          LARGER THAN RECORD LENGTH??\n         BH    ZONE0140            YES\n         STH   R1,SCANBGN          SET ZONE BEGIN\n         OI    SCANFLAG,$SCANBGN   INDICATE ZONE BEGIN VALID\nZONE0030 DS    0H\n         CLI   0(R2),C','          DELIMITER??\n         BNE   ZONE0060            NO... TEST ZONE WIDTH\n         LA    R2,1(R2)            SKIP DELIMITER\n         CLI   0(R2),C' '          END OF STATEMENT??\n         BE    ZONE0060            YES... TEST ZONE WIDTH\n         LA    R3,6                LOOP LIMITER\n         MVC   NUMWORK,=C'00000'   INITIALIZE WORK AREA\nZONE0040 DS    0H\n         CLI   0(R2),C' '          END OF STATEMENT??\n         BE    ZONE0050            YES\n         CLI   0(R2),C'0'          VALID DIGIT??\n         BL    ZONE0110            NO\n         CLI   0(R2),C'9'          VALID DIGIT??\n         BH    ZONE0110            NO\n         MVC   NUMWORK(4),NUMWORK+1\n         MVC   NUMWORK+4(1),0(R2)  MOVE TO DIGITS POSITION\n         LA    R2,1(R2)            NEXT DIGIT\n         BCT   R3,ZONE0040         LOOP\n         B     ZONE0120            TOO MANY DIGITS\nZONE0050 DS    0H\n         PACK  DWORD,NUMWORK       PACK ZONE BEGIN\n         CVB   R1,DWORD            CONVERT TO BINARY\n         LTR   R1,R1               ZERO??\n         BZ    ZONE0150            YES\n         CH    R1,COMMRSZ          LARGER THAN RECORD LENGTH??\n         BH    ZONE0160            YES\n         CH    R1,SCANBGN          LESS THAN BEGIN??\n         BL    ZONE0170            YES\n         STH   R1,SCANEND          SET ZONE END\n         OI    SCANFLAG,$SCANEND   INDICATE ZONE END VALID\nZONE0060 DS    0H\n         SR    R1,R1               ASSUME NO ZONE BEGIN\n         TM    SCANFLAG,$SCANBGN   BEGIN POSITION GIVEN??\n         BNO   ZONE0070            NO\n         LH    R1,SCANBGN          ZONE BEGIN\n         BCTR  R1,0                RELATIVE TO ZERO\nZONE0070 DS    0H\n         LH    R2,COMMRSZ          ASSUME NO ZONE END\n         TM    SCANFLAG,$SCANEND   ZONE END GIVEN??\n         BNO   ZONE0080            NO\n         LH    R2,SCANEND          LIMIT TO ZONE END\nZONE0080 DS    0H\n         SR    R2,R1               ZONE WIDTH (MAX)\n         CH    R2,SCANL            LESS THAN STRING LENGTH??\n         BNL   PROC0000            NO...\n         MVC   PLINE(MSG22L),MSG22 MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0100 DS    0H\n         MVC   PLINE(MSG13L),MSG13 MOVE MESSAGE (NO SCAN SET)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0110 DS    0H\n         MVC   PLINE(MSG14L),MSG14 MOVE MESSAGE (INVALID DIGIT)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0120 DS    0H\n         MVC   PLINE(MSG15L),MSG15 MOVE MESSAGE (TOO MANY DIGITS)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0130 DS    0H\n         MVC   PLINE(MSG16L),MSG16 MOVE MESSAGE (ZONE BEGIN ZERO)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0140 DS    0H\n         MVC   PLINE(MSG17L),MSG17 MOVE MESSAGE (ZONE BEGIN > LRECL)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0150 DS    0H\n         MVC   PLINE(MSG18L),MSG18 MOVE MESSAGE (ZONE END ZERO)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0160 DS    0H\n         MVC   PLINE(MSG19L),MSG19 MOVE MESSAGE (ZONE END > LRECL)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0170 DS    0H\n         MVC   PLINE(MSG20L),MSG20 MOVE MESSAGE (ZONE END < ZONE BEGIN)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nZONE0180 DS    0H\n         MVC   PLINE(MSG21L),MSG21 MOVE MESSAGE (LAST SCAN INVALID)\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        HELP PROCESSING                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nHELP0000 DS    0H\n         MVC   PLINE(MSG10L),MSG10 MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMHL    SET HELP FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        NAME FILTERING                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nNAME0000 DS    0H\n         CLI   CTLAREA+5,C' '     ANY DATA AT ALL?\n         BE    NAME0120           NO NAME GIVEN\n         CLI   CTLAREA+5,C'*'     FIRST CHARACTER AN ASTERISK?\n         BE    NAME0130           YES.. DON'T ALLOW\n         LA    R2,CTLAREA+5       FIRST CHARACTER OF NAME\n         LA    R3,8               MAXIMUM SCAN LENGTH\n         XC    NAMEWORK(8*NAMEL),NAMEWORK CLEAR ALL NAMES\n         LA    R4,NAMEWORK        FIRST ELEMENT'S ADDRESS IN WORK AREA\n         USING NAMEDISP,R4        DEFINE BASE\n         SR    R5,R5              INITIALIZE DISPLACEMENT\nNAME0010 DS    0H\n         LA    R6,NAMEDATA        FIRST CHARACTER OF DATA\n         SR    R7,R7              INITIALIZE LENGTH\nNAME0020 DS    0H\n         CLI   0(R2),C' '         END OF PATTERN?\n         BE    NAME0030           YES\n         CLI   0(R2),C'*'         ASTERISK?\n         BE    NAME0050           YES\n         CLI   0(R2),C'+'         PLUS SIGN?\n         BE    NAME0070           YES\n         MVC   0(1,R6),0(R2)      MOVE TO NAME DATA\n         LA    R2,1(R2)\n         LA    R6,1(R6)\n         LA    R7,1(R7)           ADD 1 TO LENGTH\n         BCT   R3,NAME0020        KEEP GOING\nNAME0030 DS    0H\n         LTR   R7,R7              LENGTH = ZERO?\n         BZ    NAME0040           YES\n         STH   R5,NAMEDISP        SET DISPLACEMENT\n         STH   R7,NAMELEN         SET PARTIAL (OR FULL LENGTH)\n         LA    R4,NAMEL(R4)       NEXT ELEMENT\n         AR    R5,R7              DISP = DISP + LENGTH\nNAME0040 DS    0H\n         LTR   R3,R3              END OF DATA REACHED?\n         BZ    NAME0090           ADD THIS ENTRY TO NAME CHAIN\n         MVC   NAMEDATA,BLANKS    SET DATA TO BLANKS\n         STH   R5,NAMEDISP        SET DISPLACEMENT\n         STH   R3,NAMELEN         SET PARTIAL (OR FULL LENGTH)\n         B     NAME0090           ADD THIS ENTRY TO NAME CHAIN\nNAME0050 DS    0H\n         CLI   1(R2),C' '         IS NEXT CHARACTER A BLANK?\n         BNE   NAME0060           YES.. ADD THIS ENTRY TO CHAIN\n         LTR   R7,R7              LENGTH = ZERO?\n         BZ    NAME0090           ADD THIS ENTRY TO NAME CHAIN\n         STH   R5,NAMEDISP        SET DISPLACEMENT\n         STH   R7,NAMELEN         SET LENGTH\n         B     NAME0090           ADD THIS ENTRY TO NAME CHAIN\nNAME0060 DS    0H\n         MVC   PLINE(MSG24L),MSG24 MOVE MESSAGE\n         BAL   R9,PRT0000         PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB   SET ABORT FLAG\n         B     PROC0000           READ NEXT CONTROL STATEMENT\nNAME0070 DS    0H\n         CLI   1(R2),C'*'         IS NEXT CHARACTER AN ASTERISK?\n         BE    NAME0140           YES.. DON'T ALLOW\n         LTR   R7,R7              LENGTH ZERO?\n         BZ    NAME0080           YES\n         STH   R5,NAMEDISP        SET DISPLACEMENT\n         STH   R7,NAMELEN         SET LENGTH\n         LA    R4,NAMEL(R4)       NEXT ELEMENT\n         AR    R5,R7              DISP = DISP + NEW LENGTH\nNAME0080 DS    0H\n         LA    R5,1(R5)           DISP = DISP + 1\n         LA    R2,1(R2)           SCAN POINT = SCAN POINT + 1\n         BCT   R3,NAME0010        KEEP GOING\nNAME0090 DS    0H\n         OC    NAMEWORK(8*NAMEL),NAMEWORK    ALL ENTRIES STILL EMPTY?\n         BZ    NAME0150           YES.. GOOD TRY\n         ICM   R2,15,COMMNAME     NAME CHAIN ANCHOR ADDRESS\n         LA    R3,COMMNAME        ADDRESS'S ADDRESS\n         USING NAMEBLOK,R2        DEFINE BASE\n         DROP  R4\nNAME0100 DS    0H\n         BZ    NAME0110           NOTHING ON THE CHAIN\n         LA    R3,NAMENEXT        ADDRESS'S ADDRESS\n         ICM   R2,15,NAMENEXT     NEXT BLOCK ON THE CHAIN\n         B     NAME0100           KEEP FOLLOWING THE CHAIN\nNAME0110 DS    0H\n         LA    R0,(8*NAMEL)+4     LENGTH OF NAME BLOCK\n         GETMAIN R,LV=(0)         ACQUIRE NAME BLOCK STORAGE\n         ST    R1,0(R3)           SET FORWARD POINTER IN LAST BLOCK\n         LR    R2,R1              SET BASE\n         XC    0((8*NAMEL)+4,R2),0(R2)\n         XC    NAMENEXT,NAMENEXT  CLEAR FORWARD POINTER IN THIS BLOCK\n         MVC   NAMEDISP(8*NAMEL),NAMEWORK\n         B     PROC0000           READ NEXT CONTROL STATEMENT\nNAME0120 DS    0H\n         MVC   PLINE(MSG23L),MSG23 MOVE MESSAGE\n         BAL   R9,PRT0000         PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB   SET ABORT FLAG\n         B     PROC0000           READ NEXT CONTROL STATEMENT\nNAME0130 DS    0H\n         MVC   PLINE(MSG25L),MSG25 MOVE MESSAGE\n         BAL   R9,PRT0000         PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB   SET ABORT FLAG\n         B     PROC0000           READ NEXT CONTROL STATEMENT\nNAME0140 DS    0H\n         MVC   PLINE(MSG26L),MSG26 MOVE MESSAGE\n         BAL   R9,PRT0000         PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB   SET ABORT FLAG\n         B     PROC0000           READ NEXT CONTROL STATEMENT\nNAME0150 DS    0H\n         MVC   PLINE(MSG27L),MSG27 MOVE MESSAGE\n         BAL   R9,PRT0000         PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB   SET ABORT FLAG\n         B     PROC0000           READ NEXT CONTROL STATEMENT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ABEND ON DEMAND                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nABEND000 DS    0H\n         DC    H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ERROR ROUTINES                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nERR1000  DS    0H                  GETMAIN FAILURE\n         STH   R15,DWORD           SAVE RETURN CODE\n         UNPK  PRGMR15(5),DWORD(3) UNPACK GETMAIN RETURN CODE\n         MVZ   PRGMR15,HEX0F0F     TURN OFF ZONES\n         TR    PRGMR15,HEXCHAR     TRANSLATE TO PRINTABLE\n         MVI   PRGMR15+4,C' '      RESTORE BLANK\n         MVC   PLINE(GMLINEL),GMLINE  MOVE ERROR MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nERR2000  DS    0H                  XLOC INITIALIZATION FAILURE\n         CLI   SCANPARM+(XLOCSTAT-XLOCLIST),$XLOCER1  STRING LENGTH <1?\n         BE    ERR2010             YES\n         MVC   PLINE(MSG11L),MSG11 MOVE MESSAGE\n         B     ERR2020             SKIP MSG FOR TOO LONG\nERR2010  DS    0H\n         MVC   PLINE(MSG12L),MSG12 MOVE MESSAGE\nERR2020  DS    0H\n         BAL   R9,PRT0000          PRINT MESSAGE\n         OI    COMMFLAG,$COMMAB    SET ABORT FLAG\n         B     PROC0000            READ NEXT CONTROL STATEMENT\nERR3000  DS    0H\n         STH   R15,DWORD           SAVE RETURN CODE\n         LA    R1,ALORB            REQUEST BLOCK\n         UNPK  PR99ERR(5),S99ERROR(3)\n         UNPK  PR99INFO(5),S99INFO(3)\n         UNPK  PR99R15(5),DWORD(3)\n         MVZ   PR99ERR,HEX0F0F     TURN OFF ZONES\n         MVZ   PR99INFO,HEX0F0F    TURN OFF ZONES\n         MVZ   PR99R15,HEX0F0F     TURN OFF ZONES\n         TR    PR99ERR,HEXCHAR     TRANSLATE ERROR CODE\n         TR    PR99INFO,HEXCHAR    TRANSLATE INFO CODE\n         TR    PR99R15,HEXCHAR     TRANSLATE RETURN CODE\n         MVI   PR99ERR+4,C' '      RESTORE BLANK\n         MVI   PR99INFO+4,C' '     RESTORE BLANK\n         MVI   PR99R15+4,C' '      RESTORE BLANK\n         MVC   PLINE(PR99LINEL),PR99LINE\n         BAL   R9,PRT0000          PRINT ERROR MESSAGE\n         B     PROC0000            READ NEXT CONTROL STATEMENT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINTING/HEADINGS                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER          PRINT DCB\n         PUT   (R2),PLINE          WRITE TO PRINTER\n         AP    COMMLINE,P1         ADD 1 TO LINE COUNT\n         CLI   PLINE,C' '          SINGLE SPACED??\n         BE    PRT0010             YES\n         AP    COMMLINE,P1         ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         CP    COMMLINE,COMMAXL    TIME FOR HEADING??\n         BLR   R9                  NO\nHEAD0000 DS    0H\n         AP    COMMPAGE,P1         ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,=X'402020202120'\n         ED    HEADPAGE,COMMPAGE   EDIT PAGE NUMBER\n         MVC   PLINE(HEADINGL),HEADING\n         PUT   PRINTER,PLINE       WRITE HEADING\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         ZAP   COMMLINE,P0         RESET LINE COUNT\n         BR    R9                  DONE\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  END OF JOB PROCESSING                             *\n*                                                                    *\n*--------------------------------------------------------------------*\nEOF0000  DS    0H\n         LA    R2,SYSIN            CONTROL STATEMENT DCB\n         CLOSE ((R2))              CLOSE CONTROL STATEMENT DCB\n         TM    COMMFLAG,$COMMAB    ABORT FLAG ON??\n         BNO   EXIT0000            NO\n         MVC   PLINE(MSG99L),MSG99 MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         L     R13,4(R13)          RESTORE SAVE AREA ADDRESS\n         LM    R14,R12,12(R13)     RESTORE REMAINING REGISTERS\n         LA    R15,16              SET RETURN CODE\n         BR    R14                 EXIT\nEXIT0000 DS    0H\n         TM    COMMFLAG,$COMMHL    HELP REQUESTED??\n         BO    EXIT0010            YES\n         L     R15,VPH01           ADDRESS OF NEXT PHASE\n         BR    R15                 LINK TO PHASE 01\nEXIT0010 DS    0H\n         L     R15,VPH02           ADDRESS OF HELP MODULE\n         BR    R15                 LINK TO HELP MODULE\n         LTORG\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  WORK AREAS                                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nDWORD    DC    D'0'                DOUBLE WORD WORK AREA\nVCOMM    DC    V(PDSCOMM)          ADDRESS OF COMMON MODULE\nVPH01    DC    V(PDSPH01)          ADDRESS OF SCAN MODULE\nVPH02    DC    V(PDSPH02)          ADDRESS OF 'HELP' MODULE\nCURRSCAN DC    A(0)                ADDRESS OF CURRENT 'SCANBLOK'\nPGMFLAGS DC    X'00'               PROGRAM FLAGS\n$VALIDSC EQU   X'80'               .. LAST SCAN PASSED EDIT CHECKS\nP0       DC    P'0'                CONSTANT\nP1       DC    P'1'                CONSTANT\nP10      DC    P'10'               CONSTANT\nDDCNT    DC    PL3'0'              NUMBER OF DYNAMICALLY ALLOCATED DD'S\nDDWORK   DC    CL8' '              DDNAME WORK AREA\nNUMWORK  DC    C'00000'            NUMERIC CONVERSION WORK AREA\nDAIRWORK DS    0A\nDAIRDDP  DS    AL2,AL2,AL2\nDAIRDD   DS    CL8\nDAIRCLP  DS    AL2,AL2,AL2\n         DS    C\nDAIRWORKL EQU  *-DAIRWORK\nDAIRINIT DC    AL2(DALDDNAM),AL2(1),AL2(8)\n         DC    CL8' '\n         DC    AL2(DALSYSOU),AL2(1),AL2(1)\nPRTCLASS DC    C'X'\nALORBA   DC    A(ALORB+X'80000000')\nALORB    DC    (S99RBEND-S99RB)X'00'\nALOPARM  DS    0A\n         DC    A(DAIRDDP)\n         DC    A(DAIRCLP+X'80000000')\nTEMPL    DC    H'0'\nTEMPARG  DC    CL70' '\nTEMPVAL  DC    CL70' '\nNAMEWORK DC    (8*NAMEL)X'00'\nBLANKS   DC    CL8' '\nDSNLINE  DS    0C\n         DC    C' PDS NAME:'\nPRDSN    DC    CL44' '\nDSNLINEL EQU   *-DSNLINE\nDCBLINE  DS    0C\n         DC    C' RECORD FORMAT:'\nPRRECFM  DC    CL4' '\n         DC    C'   RECORD LENGTH'\nPRLRECL  DC    CL6' '\n         DC    C'   BLOCK SIZE'\nPRBLKSZ  DC    CL6' '\nDCBLINEL EQU   *-DCBLINE\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL32' '\n         DC    C'PDS SCAN UTILITY'\n         DC    CL22' '\n         DC    C'PAGE'\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nMSG0     DC    C' ENTER ''HELP'' ON A CONTROL STATEMENT FOR INSTRUCTION+\n               S ON HOW TO USE ''PDSSCAN''.'\nMSG0L    EQU   *-MSG0\nMSG1     DC    C' INVALID CONTROL STATEMENT'\nMSG1L    EQU   *-MSG1\nMSG2     DC    C' INVALID DIGIT ON ''LINECT'' STATEMENT'\nMSG2L    EQU   *-MSG2\nMSG3     DC    C' LINECT<10 INVALID AND IGNORED'\nMSG3L    EQU   *-MSG3\nMSG4     DC    C' INVALID HEX DIGIT, SCAN NOT PERFORMED FOR THIS CONTRO+\n               L STATEMENT'\nMSG4L    EQU   *-MSG4\nMSG5     DC    C' NO CLOSING QUOTE, SCAN NOT PERFORMED FOR THIS CONTROL+\n                STATEMENT'\nMSG5L    EQU   *-MSG5\nMSG6     DC    C' ODD NUMBER OF HEX DIGITS, SCAN NOT PERFORMED FOR THIS+\n                CONTROL STATEMENT'\nMSG6L    EQU   *-MSG6\nMSG7     DC    C' ZERO LENGTH ARGUEMENT NOT ALLOWED, SCAN NOT PERFORMED+\n                FOR THIS CONTROL STATEMENT'\nMSG7L    EQU   *-MSG7\nMSG8     DC    C' INVALID SYNTAX, SCAN NOT PERFORMED FOR CONTROL STATEM+\n               ENT'\nMSG8L    EQU   *-MSG8\nMSG9     DC    C' INVALID SYSOUT CLASS, CLASS REMAINS UNCHANGED'\nMSG9L    EQU   *-MSG9\nMSG10    DC    C' ** HELP REQUESTED, NO SCAN WILL BE PERFORMED'\nMSG10L   EQU   *-MSG10\nMSG11    DC    C' XLOC INITIALIZATION FAILURE, SEARCH STRING LENGTH <  +\n               1'\nMSG11L   EQU   *-MSG11\nMSG12    DC    C' XLOC INITIALIZATION FAILURE, SEARCH STRING LENGTH >  +\n               256'\nMSG12L   EQU   *-MSG12\nMSG13    DC    C' NO VALID SCAN DEFINED BEFORE ZONE STATEMENT'\nMSG13L   EQU   *-MSG13\nMSG14    DC    C' INVALID DIGIT IN ZONE VALUE'\nMSG14L   EQU   *-MSG14\nMSG15    DC    C' TOO MANY DIGITS IN ZONE VALUE'\nMSG15L   EQU   *-MSG15\nMSG16    DC    C' ZERO IS INVALID AS ZONE BEGIN VALUE'\nMSG16L   EQU   *-MSG16\nMSG17    DC    C' ZONE BEGIN VALUE LARGER THAN PDS LRECL'\nMSG17L   EQU   *-MSG17\nMSG18    DC    C' ZERO IS INVALID AS ZONE END VALUE'\nMSG18L   EQU   *-MSG18\nMSG19    DC    C' ZONE END VALUE LARGER THAN PDS LRECL'\nMSG19L   EQU   *-MSG19\nMSG20    DC    C' ZONE BEGIN VALUE LARGER THAN ZONE END VALUE'\nMSG20L   EQU   *-MSG20\nMSG21    DC    C' PREVIOUS SCAN STATEMENT CONTAINED ERRORS, ZONE IGNORE+\n               D'\nMSG21L   EQU   *-MSG21\nMSG22    DC    C' ZONE WIDTH IS LESS THAN SCAN STRING LENGTH'\nMSG22L   EQU   *-MSG22\nMSG23    DC    C' NAME OMITTED ON A NAME STATEMENT'\nMSG23L   EQU   *-MSG23\nMSG24    DC    C' AT LEAST 1 BLANK IS REQUIRED FOR A DELIMITER FOLLOWIN+\n               G AN ASTERISK IN THE NAME'\nMSG24L   EQU   *-MSG24\nMSG25    DC    C' ASTERISK NOT ALLOWED AS FIRST NAME CHARACTER (WOULD C+\n               AUSE ALL MEMBERS TO BE SCANNED)'\nMSG25L   EQU   *-MSG25\nMSG26    DC    C' PLUS SIGN PRECEEDING AN ASTERISK (+*) IS UNNECESSARY.+\n               '\nMSG26L   EQU   *-MSG26\nMSG27    DC    C' NAME=++++++++ IS NOT ALLOWED (SAME AS NAME=*), WOULD +\n               CAUSE ALL MEMBERS TO BE SCANNED'\nMSG27L   EQU   *-MSG27\nMSG99    DC    C'0 ** SEVERE ERROR OCCURRED, PROGRAM ABORTING **'\nMSG99L   EQU   *-MSG99\nPR99LINE DS    0C\n         DC    C'0'\n         DC    C'DYNAMIC ALLOCATION FAILURE, R15='\nPR99R15  DC    CL4' '\n         DC    C'   S99ERROR='\nPR99ERR  DC    CL4' '\n         DC    C'   S99INFO='\nPR99INFO DC    CL4' '\n         DC    C' '\nPR99LINEL EQU  *-PR99LINE\nGMLINE   DS    0C\n         DC    C'0'\n         DC    C'GETMAIN FAILURE, R15='\nPRGMR15  DC    CL4' '\n         DC    C' '\nGMLINEL  EQU   *-GMLINE\nHEX0F0F  DC    8X'0F'\nHEX1F1F  DC    70X'1F'\nHEXCHAR  DC    C'0123456789ABCDEF'\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nPACKTBL  DC    X'000A0B0C0D0E0F000000000000000000'\n         DC    X'00010203040506070809000000000000'\n         DC    C' '\nPLINE    DC    CL133' '\nCTLAREA  DC    CL80' '\nCTLAREAL EQU   *-CTLAREA\nINITPARM XLOC  MF=L\nINITPARML EQU  *-INITPARM\nINITDCB  DCB   DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               LRECL=133,                                              +\n               RECFM=FBA,                                              +\n               DDNAME=PRT0000\n*--------------------------------------------------------------------*\n*                  COMMON AREA                                       *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=COMM,TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  SCAN BLOCK                                        *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=SCAN,TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  NAME BLOCK                                        *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=NAME,TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  XLOC PARM LIST                                    *\n*--------------------------------------------------------------------*\n         XLOC    TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  DCB DSECT                                         *\n*--------------------------------------------------------------------*\n         DCBD      DSORG=PO\n*---------------------------------------------------------------------*\n*                  REGISTER EQUATES                                   *\n*---------------------------------------------------------------------*\n         COPY  REGEQU\n         IEFZB4D0\n         IEFZB4D2\n         END   PDSPH00\n./ ADD NAME=PDSPH01  0100-02291-02291-0123-00446-00446-00000-RLRICE\n*---------------------------------------------------------------------*\n*     NAME: PDSPH01                                                   *\n*                                                                     *\n* FUNCTION: THIS MODULE RECEIVES CONTROL FROM THE INITIALIZATION      *\n*           PHASE PDSPH00.  THE FILES IN THE COMMON MODULE 'PDSCOMM'  *\n*           HAVE ALREADY BEEN OPENED, THE CONTROL STATEMENTS          *\n*           PROCESSED, AND THE SCAN BLOCKS BUILT.                     *\n*                                                                     *\n*           THE FIRST STEP IS TO OPEN THE PRINTER DCB'S IN EACH       *\n*           SCAN BLOCK.  THE DD'S WERE DYNAMICALLY ALLOCATED BY       *\n*           PDSPH00.                                                  *\n*                                                                     *\n*           WHEN ALL SCAN PRINT DCB'S ARE OPEN, THE ACTUAL MEMBER-BY- *\n*           MEMBER SCAN IS PERFORMED.                                 *\n*                                                                     *\n*           AT EOF IN THE DIRECTORY, CONTROL IS PASSED TO THE         *\n*           CLEAN-UP/TERMINATION MODULE PDSPH03.                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nPDSPH01  CSECT\n         USING PDSPH01,R12                                              ASE00100\n         LR    R12,R15               LOAD PERMANENT                     ASE00120\n         USING IHADCB,R2             DEFINE DCB DSECT BASE\n         USING PDSCOMM,R10           DEFINE COMM BASE\n         USING SCANBLOK,R11          DEFINE SCAN BLOCK BASE\n         B     INIT0000\n         DC    C'PDS SCAN PHASE 01'\nINIT0000 DS    0H\n         ICM   R11,15,COMMANCH       FIRST SCAN BLOCK ON THE CHAIN\n         BZ    ERR1000               NO BLOCKS ON CHAIN\nINIT0010 DS    0H\n         LA    R2,SCANDCB            PRINT DCB WITHIN SCAN BLOCK\n         OPEN  ((R2),OUTPUT)         OPEN PRINT DCB\n         BAL   R9,SHEAD000           WRITE HEADING\n         ICM   R11,15,SCANNEXT       NEXT SCAN BLOCK ON CHAIN\n         BNZ   INIT0010              PROCESS ALL SCAN BLOCKS\n         LA    R2,PDSMEM             MEMBER DCB\n         LA    R1,PROC0180           MEMBER EOF\n         STCM  R1,7,DCBEODA          INSERT ADDRESS INTO DCB\n         LA    R2,PDSDIR             DIRECTORY DCB\n         LA    R1,EXIT0000           DIRECTORY END OF FILE\n         STCM  R1,7,DCBEODA          INSERT ADDRESS INTO DCB\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        ALL SCAN BLOCKS HAVE BEEN BUILT, ALL PRINT DCB'S ARE OPEN.   *\n*        IT IS TIME TO BEGIN THE ACTUAL MEMBER-BY-MEMBER SCAN.        *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC0000 DS    0H\n         LA    R2,PDSDIR             DIRECTORY DCB\n         GET   (R2),DIRAREA          READ A BLOCK OF DIRECTORY\n         LH    R3,DIRAREA            BYTES OF DATA IN RECORD\n         SH    R3,H2                 MINUS 2 FOR LENGTH\n         LA    R4,DIRAREA+2          FIRST DIRECTORY ENTRY IN BLOCK\n         USING DIRDSECT,R4           DEFINE BASE\nPROC0010 DS    0H\n         CLI   0(R4),X'FF'           END OF DIRECTORY??\n         BE    EXIT0000              YES\n         ICM   R5,15,COMMNAME        FIRST NAME FILTER BLOCK\n         BZ    PROC0050              NOTHING ON THE CHAIN..\n         USING NAMEBLOK,R5           DEFINE BASE\nPROC0020 DS    0H\n         LA    R6,NAMEDISP           FIRST DATA ELEMENT\n         USING NAMEDISP,R6           DEFINE BASE\nPROC0030 DS    0H\n         OC    0(NAMEL,R6),0(R6)     UNUSED ELEMENT?\n         BZ    PROC0050              YES.. ALL ELEMENTS MATCH\n         LH    R1,NAMELEN            LENGTH OF THIS NAME ELEMENT\n         LH    R2,NAMEDISP           DISPLACMENT INTO NAME\n         AR    R2,R4                 PLUS NAME'S BASE ADDRESS\n         BCTR  R1,0                  ADJUST FOR EXECUTE\n         EX    R1,NAMECLC            DOES ELEMENT MATCH?\n         BNE   PROC0040              NO.. TRY NEXT NAME FILTER\n         LA    R6,NAMEL(R6)          NEXT NAME ELEMENT\n         B     PROC0030              TEST THIS ELEMENT\nNAMECLC  CLC   NAMEDATA(0),0(R2)     ELEMENTS MATCH?\nPROC0040 DS    0H\n         ICM   R5,15,NAMENEXT        NEXT ELEMENT ON CHAIN\n         BNZ   PROC0020              CHECK THIS FILTER ENTRY\n         B     PROC0180              NO FILTER MATCHED.. SKIP MEMBER\nPROC0050 DS    0H\n         MVC   COMMMEM,0(R4)         MOVE MEMBER NAME\n         MVC   TTRZ(3),DIRTTR        MOVE TO FULLWORD BOUNDARY\n         MVI   TTRZ+3,X'00'          SET 'Z' TO ZERO\n         LA    R2,PDSMEM             MEMBER DCB\n         POINT (R2),TTRZ,TYPE=REL    ISSUE POINT\n         LTR   R15,R15               LOCATED SUCCESSFULLY??\n         BNZ   ERR2000               NO\n         XC    COMMRECN,COMMRECN     ZERO LOCICAL RECORD NUMBER\nPROC0060 DS    0H\n         LA    R2,PDSMEM             MEMBER DCB\n         CLI   COMMRF,C'U'           RECFORM 'U' RECORDS??\n         BE    PROC0070              YES\n         XC    READECB1,READECB1     CLEAR READ ECB\n         READ  READECB1,             READ BLOCK OF MEMBER              +\n               SF,                   .. SEQUENTIALLY FORWARD           +\n               (R2),                 .. DCB                            +\n               MEMAREA,              .. I/O AREA                       +\n               ,                     .. BLOCK SIZE FROM DCB\n         CHECK READECB1              WAIT FOR I/O COMPLETION\n         B     PROC0080\nPROC0070 DS    0H\n         XC    READECB2,READECB2     CLEAR READ ECB\n         READ  READECB2,             READ BLOCK OF MEMBER              +\n               SF,                   .. SEQUENTIALLY FORWARD           +\n               (R2),                 .. DCB                            +\n               MEMAREA,              .. I/O AREA                       +\n               32000                 .. SPECIFY RECORD LENGTH\n         CHECK READECB2              WAIT FOR I/O COMPLETION\nPROC0080 DS    0H\n         LA    R2,PDSMEM             MEMBER DCB\n         LH    R5,DCBBLKSI           BLOCK SIZE FROM DCB\n         L     R1,DCBIOBA            IOB ADDRESS\n         SH    R1,H8                 DCB POINTS AT IOB+8\n         USING IOB,R1                DEFINE BASE\n         SH    R5,IOBSTDRD+14        LENGTH ACTUALLY READ\n         CLI   COMMRF,C'V'           VARIABLE LENGTH RECORDS??\n         BNE   PROC0100              NO\n         SH    R5,H4                 MINUS LENGTH OF BLOCK DESCRIPTOR\n         LA    R6,MEMAREA+4          FIRST RECORD IN BLOCK\nPROC0090 DS    0H\n         SR    R7,R7                 CLEAR FOR LENGTH\n         ICM   R7,3,0(R6)            LENGTH OF CURRENT RECORD\n         B     PROC0110\nPROC0100 DS    0H\n         LA    R6,MEMAREA            FIRST RECORD IN BLOCK\n         SR    R7,R7                 CLEAR FOR LENGTH\n         ICM   R7,3,COMMRSZ          RECORD LENGTH\nPROC0110 DS    0H\n         L     R1,COMMRECN           CURRENT LOGICAL RECORD NUMBER\n         LA    R1,1(R1)              ADD 1\n         ST    R1,COMMRECN           SAVE RECORD NUMBER\n         L     R11,COMMANCH          FIRST SCAN BLOCK ON CHAIN\nPROC0120 DS    0H\n         LR    R15,R7                COPY RECORD LENGTH\n         SR    R1,R1                 CLEAR FOR START POSITION\n         TM    SCANFLAG,$SCANBGN     BEGIN POSITION GIVEN??\n         BNO   PROC0130              NO\n         CH    R15,SCANBGN           START POSITION > RECORD LENGTH??\n         BL    PROC0160              YES... CANNOT BE ON THIS RECORD\n         LH    R1,SCANBGN            SCAN START POSITION\n         BCTR  R1,0                  RELATIVE TO ZERO\nPROC0130 DS    0H\n         TM    SCANFLAG,$SCANEND     END POSITION GIVEN??\n         BNO   PROC0140              NO\n         CH    R15,SCANEND           END POSITION < LRECL??\n         BL    PROC0140              NO\n         LH    R15,SCANEND           LIMIT TO ZONE END\nPROC0140 DS    0H\n         SR    R15,R1                EFFECTIVE SCAN LENGTH\n         LH    R2,SCANL              SCAN STRING LENGTH\n         CR    R15,R2                SCAN LENGTH < STRING LENGTH??\n         BL    PROC0160              YES... CANNOT BE ON THIS RECORD\n         LA    R14,0(R1,R6)          SCAN STARTING ADDRESS\n         XLOC  RECORD=(R14),         DATA TO SCAN                      +\n               RECLEN=(R15),         .. LENGTH TO SCAN                 +\n               STRING=SCANARG,       .. SEARCH STRING                  +\n               STRLEN=(R2),          .. STRING LENGTH                  +\n               ERROR=PROC0160,       .. STRING NOT FOUND               +\n               MF=(E,SCANPARM)       .. EXECUTION FORM\n         MVC   PRMEM,COMMMEM         MOVE MEMBER NAME\n         L     R1,COMMRECN           CURRENT RECORD NUMBER\n         CVD   R1,DWORD              CONVERT TO DECIMAL\n         MVC   PRRECN,=X'4020202020202120'\n         ED    PRRECN,DWORD+4        EDIT RELATIVE RECORD NUMBER\n         LR    R1,R7                 COPY RECORD LENGTH\n         CH    R1,H100               TOO MUCH DATA??\n         BNH   PROC0150              NO\n         LH    R1,H100               LIMIT TO 100 BYTES\nPROC0150 DS    0H\n         BCTR  R1,0                  ADJUST FOR EXECUTE\n         EX    R1,DATAMVC            MOVE PORTION OF RECORD\n         EX    R1,DATATR             TRANSLATE OUT UNPRINTABLES\n         MVC   PLINE(MEMLINEL),MEMLINE\n         BAL   R9,SPRT0000           PRINT\nPROC0160 DS    0H\n         ICM   R11,15,SCANNEXT       NEXT SCAN BLOCK ON CHAIN\n         BNZ   PROC0120              PROCESS ALL BLOCKS\n         CLI   COMMRF,C'U'           UNDEFINED RECORD FORMAT??\n         BE    PROC0060              YES... NO 'LOGICAL RECORDS'\n         AR    R6,R7                 NEXT RECORD IN BLOCK\n         SR    R5,R7                 LENGTH LEFT IN BLOCK\n         BZ    PROC0060              READ ANOTHER BLOCK\n         BM    ERR3000               SHOULD NEVER HAPPEN\n         CLI   COMMRF,C'V'           VARIABLE LENGTH RECORDS??\n         BE    PROC0170              YES\n         ICM   R7,3,COMMRSZ          RECORD SIZE\n         B     PROC0110              SCAN THIS RECORD\nPROC0170 DS    0H\n         ICM   R7,3,0(R6)            RECORD SIZE\n         B     PROC0110              SCAN THIS RECORD\nPROC0180 DS    0H\n         NI    DIRC,X'1F'            TURN OFF ALL BUT LENGTH BITS\n         SR    R1,R1                 CLEAR REGISTER\n         IC    R1,DIRC               HALFWORDS OF USER DATA\n         AR    R1,R1                 BYTES OF USER DATA\n         LA    R1,DIRUSER-DIRDSECT(R1)  TOTAL LENGTH\n         SR    R3,R1                 DIRECTORY DATA REMAINING\n         BZ    PROC0000              READ NEXT DIRECTORY BLOCK\n         AR    R4,R1                 NEXT MEMBER\n         B     PROC0010              PROCESS NEXT MEMBER\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MAINLINE PRINTING/HEADINGS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER          PRINT DCB\n         PUT   (R2),PLINE          WRITE TO PRINTER\n         AP    COMMLINE,P1         ADD 1 TO LINE COUNT\n         CLI   PLINE,C' '          SINGLE SPACED??\n         BE    PRT0010             YES\n         AP    COMMLINE,P1         ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         CP    COMMLINE,COMMAXL    TIME FOR HEADING??\n         BLR   R9                  NO\nHEAD0000 DS    0H\n         AP    COMMPAGE,P1         ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,=X'402020202120'\n         ED    HEADPAGE,COMMPAGE   EDIT PAGE NUMBER\n         MVC   PLINE(HEADINGL),HEADING\n         PUT   PRINTER,PLINE       WRITE HEADING\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         ZAP   COMMLINE,P0         RESET LINE COUNT\n         BR    R9                  ALL DONE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SCAN PRINTING/HEADINGS                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nSPRT0000 DS    0H\n         LA    R2,SCANDCB          DCB WITHIN CURRENT SCAN BLOCK\n         PUT   (R2),PLINE          WRITE TO CURRENT SCAN PRINT\n         MVC   PLINE,PLINE-1       CLEAR PRINT LINE\n         AP    SCANLC,P1           ADD 1 TO LINE COUNT\n         CP    SCANLC,COMMAXL      TIME FOR HEADING??\n         BLR   R9                  NO\nSHEAD000 DS    0H\n         AP    SCANPC,P1           ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,=X'402020202021'\n         ED    HEADPAGE,SCANPC     EDIT PAGE COUNT\n         MVC   PLINE(HEADINGL),HEADING\n         PUT   (R2),PLINE          WRITE HEADING\n         MVC   PLINE,PLINE-1       CLEAR PRINT LINE\n         MVC   HEADDSN,JFCBDSNM    MOVE DATASET NAME\n         MVC   PLINE(SUBHEAD1L),SUBHEAD1\n         PUT   (R2),PLINE          WRITE SUB HEADING 1\n         MVC   PLINE,PLINE-1       CLEAR PRINT LINE\n         MVC   HEADRF,COMMRF       MOVE RECORD FORMAT\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,COMMRSZ        RECORD SIZE\n         CVD   R1,DWORD            CONVERT TO DECIMAL\n         MVC   HEADRSZ,=X'402020202120'\n         ED    HEADRSZ,DWORD+5     EDIT RECORD SIZE\n         ICM   R1,3,COMMBSZ        BLOCK SIZE\n         CVD   R1,DWORD            CONVERT TO DECIMAL\n         MVC   HEADBSZ,=X'402020202120'\n         ED    HEADBSZ,DWORD+5     EDIT BLOCK SIZE\n         MVC   PLINE(SUBHEAD2L),SUBHEAD2\n         PUT   (R2),PLINE          WRITE HEADING\n         MVC   PLINE,PLINE-1       CLEAR PRINT LINE\n         MVC   PRVAL,SCANVAL       MOVE SCAN VALUE TO HEADING\n         MVC   PLINE(SUBHEAD3L),SUBHEAD3\n         PUT   (R2),PLINE          WRITE HEADING\n         MVC   PLINE,PLINE-1       CLEAR PRINT LINE\n         MVC   PLINE,PLINE-1       CLEAR PRINT LINE\n         MVC   PLINE(SUBHEAD4L),SUBHEAD4\n         PUT   (R2),PLINE          WRITE HEADING\n         MVC   PLINE,PLINE-1       CLEAR PRINT LINE\n         ZAP   SCANLC,P7           SET LINE COUNT\n         BR    R9                  DONE FINALLY!!\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  ERROR PROCESSING                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nERR1000  DS    0H\n         MVC   PLINE(MSG1L),MSG1   MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     EXIT0000            LINK TO CLEAN-UP MODULE\nERR2000  DS    0H\n         STH   R15,DWORD           SAVE RETURN CODE\n         UNPK  PRPT15(5),DWORD(3)  UNPACK POINT RETURN CODE\n         MVZ   PRPT15,HEX0F0F      TURN OFF ZONES\n         TR    PRPT15,HEXCHAR      TRANSLATE RETURN CODE\n         MVI   PRPT15+4,C' '       RESTORE BLANK\n         MVC   PLINE(PTLINEL),PTLINE\n         BAL   R9,PRT0000          PRINT ERROR MESSAGE\n         B     EXIT0000            EXIT\nERR3000  DS    0H\n         MVC   PLINE(MSG2L),MSG2   MOVE MESSAGE\n         BAL   R9,PRT0000          PRINT MESSAGE\n         DC    H'0'                DIAGNOSTIC DUMP TIME\n         SPACE 2\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  LINK TO CLEAN-UP                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nEXIT0000 DS    0H\n         L     R15,VPH03           CLEAN-UP/TERMINATION MODULE\n         BR    R15                 LINK TO CLEAN-UP MODULE\n         SPACE 2\nDATAMVC  MVC   PRDATA(0),0(R6)     MOVE PORTION OF RECORD\nDATATR   TR    PRDATA(0),PRTABLE   TRANSLATE OUT UNPRINTABLES\n         LTORG\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  WORK AREAS                                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nDWORD    DC    D'0'\nVPH03    DC    V(PDSPH03)\nTTRZ     DC    F'0'\nH2       DC    H'2'\nH4       DC    H'4'\nH8       DC    H'8'\nH100     DC    H'100'\nP0       DC    P'0'\nP1       DC    P'1'\nP7       DC    P'7'\nMSG2     DC    C'0 LENGTH REMAINING IN BLOCK WENT NEGATIVE, INTERNAL ER+\n               ROR'\nMSG2L    EQU   *-MSG2\nMSG1     DC    C'0 ** NO SCAN VALUES REQUESTED, SCAN BYPASSED **'\nMSG1L    EQU   *-MSG1\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL32' '\n         DC    C'PDS SCAN UTILITY'\n         DC    CL22' '\n         DC    C'PAGE'\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nSUBHEAD1 DS    0C\n         DC    C'0'\n         DC    CL10' '\n         DC    C'DATASET NAME:'\nHEADDSN  DC    CL44' '\nSUBHEAD1L EQU  *-SUBHEAD1\nSUBHEAD2 DS    0C\n         DC    C' '\n         DC    CL10' '\n         DC    C'RECORD FORMAT:'\nHEADRF   DC    CL4' '\n         DC    C'   RECORD SIZE:'\nHEADRSZ  DC    CL6' '\n         DC    C'   BLOCK SIZE:'\nHEADBSZ  DC    CL6' '\nSUBHEAD2L EQU  *-SUBHEAD2\nSUBHEAD3 DS    0C\n         DC    C' '\n         DC    CL10' '\n         DC    C'SCAN VALUE:'\nPRVAL    DC    CL70' '\nSUBHEAD3L EQU  *-SUBHEAD3\nSUBHEAD4 DS    0C\n         DC    C'0'\n         DC    CL8'MEMBER'\n         DC    CL2' '\n         DC    CL8'RECORD #'\n         DC    CL2' '\n         DC    C'*'\n         DC    43C'-'\n         DC    C' RECORD DATA '\n         DC    42C'-'\n         DC    C'*'\nSUBHEAD4L EQU  *-SUBHEAD4\nMEMLINE  DS    0C\n         DC    C' '\nPRMEM    DC    CL8' '\n         DC    CL2' '\nPRRECN   DC    CL8' '\n         DC    CL2' '\nPRDATA   DC    CL100' '\nMEMLINEL EQU   *-MEMLINE\nPTLINE   DS    0C\n         DC    C'0'\n         DC    C'POINT MACRO FAILURE, R15='\nPRPT15   DC    CL4' '\n         DC    C' '\nPTLINEL  EQU   *-PTLINE\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\n*                   0 1 2 3 4 5 6 7 8 9 A B C D E F                     VUT16120\nPRTABLE  DC    XL16'40404040404040404040404040404040'     X'00' - X'0F' VUT16130\n         DC    XL16'40404040404040404040404040404040'     X'10' - X'1F' VUT16140\n         DC    XL16'40404040404040404040404040404040'     X'20' - X'2F' VUT16150\n         DC    XL16'40404040404040404040404040404040'     X'30' - X'3F' VUT16160\n         DC    XL16'404040404040404040404A4B4C4D4E4F'     X'40' - X'4F' VUT16170\n         DC    XL16'504040404040404040405A5B5C5D5E5F'     X'50' - X'5F' VUT16180\n         DC    XL16'60614040404040404040406B6C6D6E6F'     X'60' - X'6F' VUT16190\n         DC    XL16'404040404040404040407A7B7C7D7E7F'     X'70' - X'7F' VUT16200\n         DC    XL16'40404040404040404040408B8C8D8E8F'     X'80' - X'8F' VUT16210\n         DC    XL16'40404040404040404040409B9C9D9E9F'     X'90' - X'9F' VUT16220\n         DC    XL16'4040404040404040404040ABACADAEAF'     X'A0' - X'AF' VUT16230\n         DC    XL16'4040404040404040404040BBBCBDBEBF'     X'B0' - X'BF' VUT16240\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'     X'C0' - X'CF' VUT16250\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'     X'D0' - X'DF' VUT16260\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'     X'E0' - X'EF' VUT16270\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'     X'F0' - X'FF' VUT16280\n         DC    C' '\nPLINE    DC    CL133' '\nDIRAREA  DS    128H\nMEMAREA  DS    CL32000\n*--------------------------------------------------------------------*\n*                  COMMON AREA                                       *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=COMM,TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  SCAN BLOCK                                        *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=SCAN,TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  NAME FILTER BLOCK                                 *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=NAME,TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  XLOC PARAMETER LIST DSECT                         *\n*--------------------------------------------------------------------*\n         XLOC   TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  DCB DSECT                                         *\n*--------------------------------------------------------------------*\n         DCBD   DSORG=PO\n*--------------------------------------------------------------------*\n*                  DIRECTORY DSECT                                   *\n*--------------------------------------------------------------------*\nDIRDSECT DSECT\nDIRNAME  DS    CL8\nDIRTTR   DS    CL3\nDIRC     DS    X\nDIRUSER  DS    0C\n*--------------------------------------------------------------------*\n*                  IOB DSECT                                         *\n*--------------------------------------------------------------------*\n         IEZIOB\n*---------------------------------------------------------------------*\n*                  REGISTER EQUATES                                   *\n*---------------------------------------------------------------------*\n         COPY  REGEQU\n         END   PDSPH01\n./ ADD NAME=PDSPH02  0100-02291-02291-0123-00201-00201-00000-RLRICE\n*---------------------------------------------------------------------*\n*     NAME: PDSPH02                                                   *\n*                                                                     *\n* FUNCTION: THIS MODULE RECEIVES CONTROL FROM THE INITIALIZATION      *\n*           PHASE PDSPH00 WHEN THE HELP FUNCSTION IS REQUESTED.       *\n*           THE HELP REPORT IS PRINTED TO THE SYSPRINT DD.            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         HELP &A\n         DC   AL2(E&SYSNDX-B&SYSNDX)\nB&SYSNDX DS   0C\n         DC   C&A\nE&SYSNDX DS   0C\n         MEND\nPDSPH02  CSECT\n         USING PDSPH02,R12                                              ASE00100\n         LR    R12,R15             LOAD PERMANENT                       ASE00120\n         USING PDSCOMM,R10         DEFINE COMM BASE\n         B     INIT0000\n         DC    C'PDS SCAN PHASE 02 (HELP MODULE)'\nINIT0000 DS    0H\n         BAL   R9,HEAD0000         FORCE NEW HEADING\n         LA    R3,HELPTBL          HELP TABLE ADDRESS\nINIT0010 DS    0H\n         CLI   0(R3),X'FF'         END OF TABLE??\n         BE    EXIT0000            YES\n         SR    R4,R4               CLEAR FOR LENGTH\n         ICM   R4,3,0(R3)          LENGTH OF LINE\n         BCTR  R4,0                ADJUST FOR MVC\n         EX    R4,HELPMVC          MOVE HELP DATA TO PRINT\n         BAL   R9,PRT0000          PRINT HELP DATA\n         LA    R3,3(R3,R4)         NEXT LINE OF HELP DATA\n         B     INIT0010            PRINT ALL HELP DATA\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINTING/HEADINGS                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER          PRINT DCB\n         PUT   (R2),PLINE          WRITE TO PRINTER\n         AP    COMMLINE,P1         ADD 1 TO LINE COUNT\n         CLI   PLINE,C' '          SINGLE SPACED??\n         BE    PRT0010             YES\n         AP    COMMLINE,P1         ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         CP    COMMLINE,COMMAXL    TIME FOR HEADING??\n         BLR   R9                  NO\nHEAD0000 DS    0H\n         AP    COMMPAGE,P1         ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,=X'402020202120'\n         ED    HEADPAGE,COMMPAGE   EDIT PAGE NUMBER\n         MVC   PLINE(HEADINGL),HEADING\n         PUT   PRINTER,PLINE       WRITE HEADING\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         ZAP   COMMLINE,P0         RESET LINE COUNT\n         BR    R9                  ALL DONE\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  END OF JOB PROCESSING                             *\n*                                                                    *\n*--------------------------------------------------------------------*\nEXIT0000 DS    0H\n         L     R15,VPH03           END OF JOB MODULE ENTRY POINT\n         BR    R15                 LINK TO EOJ/CLEAN-UP MODULE\nHELPMVC  MVC   PLINE(0),2(R3)      MOVE HELP DATA TO PRINT LINE\n         LTORG\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  WORK AREAS                                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nVPH03    DC    V(PDSPH03)\nP0       DC    P'0'\nP1       DC    P'1'\n         DC    C' '\nPLINE    DC    CL133' '\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL32' '\n         DC    C'PDS SCAN UTILITY'\n         DC    CL22' '\n         DC    C'PAGE'\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nHELPTBL  DS    0C\n HELP '0THE PDSSCAN UTILITY PROVIDES A MEANS TO SCAN A PDS MEMBER-BY-'\n HELP ' MEMBER FOR ONE OR MORE STRINGS OF DATA.  THE STRINGS MAY BE'\n HELP ' SPECIFIED IN EITHER CHARACTER OR HEX.  CHARACTER STRINGS MAY'\n HELP ' BE 1 TO 70 CHARACTERS IN LENGTH, HEX STRINGS MAY BE 1 TO 35'\n HELP ' BYTES IN LENGTH.  EACH SCAN ARGUEMENT WILL BE ASSIGNED A'\n HELP ' SEPARATE REPORT (DD''S ARE DYNAMICALLY ALLOCATED).'\n HELP '0THE PDS DATASET NAME AND DCB INFORMATION IS PRINTED IN THE'\n HELP ' HEADINGS, AND CONTROL STATEMENTS LISTED SO YOU MAY VERIFY'\n HELP ' OR REVIEW HOW A PARTICULAR SCAN WAS PERFORMED.'\n HELP '0WHEN A RECORD IS FOUND THAT CONTAINS A REQUESTED STRING, THE'\n HELP ' MEMBER NAME, LOGICAL RECORD NUMBER, AND UP TO 100 CHARACTERS'\n HELP ' OF THE RECORD ARE PRINTED.'\n HELP '0CONTROL STATEMENTS ARE:'\n HELP '0  COMMENTS: AN ASTERISK ''*'' IN COLUMN 1 DENOTES A COMMENT.'\n HELP '             AS MANY COMMENTS AS DESIRED MAY BE USED IN ANY'\n HELP '             ORDER.'\n HELP '0  LINE COUNT: (LINECT= IN COLUMNS 1-7) SPECIFIES A MAXIMUM'\n HELP '             LINE COUNT FOR ALL REPORTS.  THIS LINE COUNT IS'\n HELP '             GLOBAL IN THAT IT APPLIES TO ALL PRINT DD''S.'\n HELP '             DEFAULT LINE COUNT IS 72.'\n HELP '0  OUTPUT CLASS: (CLASS= IN COLUMNS 1-6) SPECIFIES A SYSOUT'\n HELP '             CLASS FOR DYNAMICALLY ALLOCATED SCAN REPORTS.'\n HELP '             ANY CLASS (A-Z AND 0-9) MAY BE ALLOCATED AND MAY'\n HELP '             BE CHANGED AS OFTEN AS DESIRED.  THE CLASS APPLIES'\n HELP '             TO SCAN STATEMENTS FOLLOWING THE ''CLASS'''\n HELP '             STATEMENT.  DEFAULT CLASS IS ''X''.'\n HELP '0  CHARACTER SCAN: (SCAN='' IN COLUMNS 1-6) SPECIFIES A'\n HELP '             CHARACTER STRING TO BE SCANNED FOR.  THE STRING'\n HELP '             MUST BE ENCLOSED IN APOSTROPHES.  IF THE STRING'\n HELP '             CONTAINS AN APOSTROPHE, CODE IT AS A DOUBLE'\n HELP '             APOSTROPHE JUST LIKE FOR THE ASSEMBLER.  THE'\n HELP '             STRING MAY BE 1 TO 70 CHARACTERS IN LENGTH.'\n HELP '0  HEX SCAN: (SCAN=X'' IN COLUMNS 1-7) SPECIFIES A HEX STRING'\n HELP '             TO BE SCANNED FOR.  THE STRING MUST BE ENCLOSED IN'\n HELP '             APOSTROPHES.  THE STRING MUST CONTAIN VALID HEX'\n HELP '             CHARACTERS (A-F, 0-9) AND MAY BE 1-35 BYTES OR'\n HELP '             2-70 HEX CHARACTERS (MUST BE AN EVEN NUMBER).'\n HELP '0  MEMBER NAME FILTERING: (NAME= IN COLUMNS 1-5) SPECIFIES A'\n HELP '             FILTER STATEMENT.  BY DEFAULT PDSSCAN SCANS ALL'\n HELP '             MEMBERS OF THE SOURCE PDS.  YOU MAY LIMIT WHICH'\n HELP '             MEMBERS ARE SCANNED BY SPECIFING NAME STATEMENTS.'\n HELP '             NAMES CAN BE SPECIFIC OR MAY CONTAIN \"WILD CARD\"'\n HELP '             CHARACTERS.  THE PLUS SIGN (+) MAY BE USED TO'\n HELP '             INDICATE THAT ANY VALUE IN ITS POSITION IS TO BE'\n HELP '             ACCEPTED.  THE PLUS SIGN MAY BE THE FIRST, LAST,'\n HELP '             OR ANY INTERMEDIARY CHARACTER.  AN ASTERISK (*)'\n HELP '             MAY BE USED TO INDICATE THAT ANY VALUE IN ITS'\n HELP '             POSITION AND ANY VALUES IN ALL FOLLOWING POSITIONS'\n HELP '             ARE TO BE ACCEPTED.  FOR EXAMPLE:'\n HELP ' '\n HELP '                   NAME=ABC     WOULD ALLOW ONLY MEMBER ABC,'\n HELP '                                MEMBER ABCD WOULD BE REJECTED.'\n HELP ' '\n HELP '                   NAME=A+C     WOULD ALLOW MEMBER ABC OR A1C'\n HELP '                                OR AXC.  MEMBERS AB OR ABCD'\n HELP '                                WOULD NOT BE SELECTED.'\n HELP ' '\n HELP '                   NAME=AB+     WOULD SELECT MEMBER ABC, AB1,'\n HELP '                                OR ABX.  MEMBERS AB OR ABCD'\n HELP '                                WOULD NOT BE SELECTED.'\n HELP ' '\n HELP '                   NAME=++C     WOULD ALLOW MEMBER ABC, XYC,'\n HELP '                                OR CCC.  MEMBER ABCD WOULD NOT'\n HELP '                                BE SELECTED.'\n HELP ' '\n HELP '                   NAME=++      WOULD ALLOW ANY 2 CHARACTER'\n HELP '                                NAMED MEMBER TO BE SCANNED.'\n HELP ' '\n HELP '                   NAME=AB*     WOULD ALLOW ANY MEMBER THAT'\n HELP '                                BEGINS WITH THE LETERS ''AB''.'\n HELP '                                MEMBERS AB, ABC, ABCD, OR'\n HELP '                                AB123456 WOULD BE SCANNED.'\n HELP ' '\n HELP '0  HELP: (HELP IN COLUMNS 1-4) REQUESTS THIS HELP REPORT TO'\n HELP '             BE PRINTED.  SCANNING WILL BE SUPPRESSED.'\n HELP '0JCL TO EXECUTE THE UTILITY IS:'\n HELP '0  //........ JOB .....'\n HELP '   //PDSSCAN  EXEC PGM=PDSSCAN'\n HELP '   //STEPLIB  DD DSN=.......,DISP=SHR'\n HELP '   //SYSPRINT DD SYSOUT=*'\n HELP '   //SYSUT1   DD DSN=.......,DISP=SHR  (PDS TO BE SCANNED)'\n HELP '   //SYSIN    DD *'\n HELP '        .'\n HELP '        CONTROL STATEMENTS'\n HELP '        .'\n HELP '   /*'\n HELP '   //'\n         DC    X'FF'\n*--------------------------------------------------------------------*\n*                  COMMON AREA                                       *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=COMM,TYPE=DSECT\n*---------------------------------------------------------------------*\n*                  REGISTER EQUATES                                   *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   PDSPH02\n./ ADD NAME=PDSPH03  0100-02291-02291-0123-00183-00183-00000-RLRICE\n*---------------------------------------------------------------------*\n*     NAME: PDSPH03                                                   *\n*                                                                     *\n* FUNCTION: THIS MODULE RECEIVES CONTROL FROM EITHER THE SCAN         *\n*           MODULE PDSPH01, OR THE HELP MODULE PDSPH02.  ITS          *\n*           PURPOSE IS TO CLOSE ALL DCB'S, DYNAMICALLY DE-ALLOCATE    *\n*           THE DD'S ASSIGNED TO THE SCAN BLOCKS, FREE THE SCAN       *\n*           BLOCKS, AND TERMINATE THIS UTILITY.                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nPDSPH03  CSECT\n         USING PDSPH03,R12                                              ASE00100\n         LR    R12,R15             LOAD PERMANENT                       ASE00120\n         USING PDSCOMM,R10         DEFINE COMM BASE\n         USING SCANBLOK,R11        DEFINE SCAN BLOCK BASE\n         B     INIT0000\n         DC    C'PDS SCAN MODULE 03 (UTILITY CLEAN-UP AND TERMINATE)'\nINIT0000 DS    0H\n         ICM   R11,15,COMMANCH     FIRST SCAN BLOCK ON CHAIN\n         BZ    CLOSE040            NO BLOCKS ON CHAIN\n         LA    R1,DALORB           DEALLOCATION REQUEST BLOCK\n         USING S99RB,R1            DEFINE REQUEST BLOCK BASE\n         MVI   S99VERB,S99VRBUN    DEALLOCATION VERB\n         MVI   S99RBLN,S99RBEND-S99RB\n         LA    R2,DALOPARM         DEALLOCATION PARAMETERS\n         ST    R2,S99TXTPP         INSERT TEXT ADDRESS ADDRESS\nCLOSE010 DS    0H\n         LA    R2,SCANDCB          DCB WITHIN SCAN BLOCK\n         CLOSE ((R2))              CLOSE THE DCB\n         MVC   DAIRWORK(DAIRWORKL),DAIRINIT    INITIALIZE\n         MVC   DAIRDD,SCANDD       MOVE DD NAME\n         LA    R1,DALORBA          REQEST BLOCK ADDRESS ADDRESS\n         SVC   99                  DE-ALLOCATE PRINT DD\n         LTR   R15,R15             DE-ALLOCATION SUCCESSFUL??\n         BNZ   ERR1000             NO\nCLOSE020 DS    0H\n         LR    R1,R11              COPY SCAN BLOCK ADDRESS\n         ICM   R11,15,SCANNEXT     NEXT ON CHAIN\n         LA    R0,SCANBLOKL        LENGTH OF BLOCK\n         FREEMAIN R,A=(R1),LV=(R0) FREEMAIN SCAN BLOCK\n         LTR   R15,R15             FREEMIAN SUCCESSFUL??\n         BNZ   ERR2000             NO\nCLOSE030 DS    0H\n         LTR   R11,R11             REACHED END OF CHAIN??\n         BNZ   CLOSE010            NO\nCLOSE040 DS    0H\n         ICM   R1,15,COMMNAME      FIRST NAME FILTER BLOCK\nCLOSE050 DS    0H\n         BZ    CLOSE060            NO MORE TO FREE\n         L     R2,NAMENEXT-NAMEBLOK(R1)  NEXT ON CHAIN\n         FREEMAIN R,A=(1),LV=4+(8*NAMEL)\n         LTR   R1,R2               COPY NEXT BLOCK'S ADDRESS\n         B     CLOSE050            FREE ALL FILTER BLOCKS\nCLOSE060 DS    0H\n         LA    R2,PDSDIR           PDS DIRECTORY DCB\n         CLOSE ((R2))              CLOSE DIRECTORY DCB\n         LA    R2,PDSMEM           PDS MEMBER DCB\n         CLOSE ((R2))              CLOSE MEMBER DCB\n         LA    R2,PRINTER          MAINLINE PRINT DCB\n         CLOSE ((R2))              CLOSE PRINTER DCB\n         B     EXIT0000            AND EXIT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        MAINLINE PRINTING/HEADINGS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER          PRINT DCB\n         PUT   (R2),PLINE          WRITE TO PRINTER\n         AP    COMMLINE,P1         ADD 1 TO LINE COUNT\n         CLI   PLINE,C' '          SINGLE SPACED??\n         BE    PRT0010             YES\n         AP    COMMLINE,P1         ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         CP    COMMLINE,COMMAXL    TIME FOR HEADING??\n         BLR   R9                  NO\nHEAD0000 DS    0H\n         AP    COMMPAGE,P1         ADD 1 TO PAGE COUNT\n         MVC   HEADPAGE,=X'402020202120'\n         ED    HEADPAGE,COMMPAGE   EDIT PAGE NUMBER\n         MVC   PLINE(HEADINGL),HEADING\n         PUT   PRINTER,PLINE       WRITE HEADING\n         MVC   PLINE,PLINE-1       CLEAR PRINT I/O AREA\n         ZAP   COMMLINE,P0         RESET LINE COUNT\n         BR    R9                  ALL DONE\nERR1000  DS    0H\n         STH   R15,DWORD           SAVE RETURN CODE\n         LA    R1,DALORB           REQUEST BLOCK\n         UNPK  PR99ERR(5),S99ERROR(3)\n         UNPK  PR99INFO(5),S99INFO(3)\n         UNPK  PR99R15(5),DWORD(3)\n         MVZ   PR99ERR,HEX0F0F     TURN OFF ZONES\n         MVZ   PR99INFO,HEX0F0F    TURN OFF ZONES\n         MVZ   PR99R15,HEX0F0F     TURN OFF ZONES\n         TR    PR99ERR,HEXCHAR     TRANSLATE ERROR CODE\n         TR    PR99INFO,HEXCHAR    TRANSLATE INFO CODE\n         TR    PR99R15,HEXCHAR     TRANSLATE RETURN CODE\n         MVI   PR99ERR+4,C' '      RESTORE BLANK\n         MVI   PR99INFO+4,C' '     RESTORE BLANK\n         MVI   PR99R15+4,C' '      RESTORE BLANK\n         MVC   PLINE(PR99LINEL),PR99LINE\n         BAL   R9,PRT0000          PRINT ERROR MESSAGE\n         B     CLOSE020            TRY TO CONTINUE\nERR2000  DS    0H\n         STH   R15,DWORD           SAVE RETURN CODE\n         UNPK  PRFREE15(5),DWORD(3)\n         MVZ   PRFREE15,HEX0F0F    TURN OFF ZONES\n         TR    PRFREE15,HEXCHAR    TRANSLATE RETURN CODE\n         MVI   PRFREE15+4,C' '     RESTORE BLANK\n         MVC   PLINE(FREELINEL),FREELINE\n         BAL   R9,PRT0000          PRINT ERROR MESSAGE\n         B     CLOSE030            TRY TO CONTINUE\nEXIT0000 DS    0H\n         L     R13,4(R13)          RESTORE ORIGINAL SAVE AREA\n         LM    R14,R12,12(R13)     RESTORE REMAINING REGISTERS\n         SR    R15,R15             SET RETURN CODE\n         BR    R14                 TERMINATE\n         LTORG\n*--------------------------------------------------------------------*\n*                                                                    *\n*                  WORK AREAS                                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nDWORD    DC    D'0'\nP0       DC    P'0'\nP1       DC    P'1'\nDALORBA  DC    A(DALORB+X'80000000')\nDALOPARM DC    A(DAIRDDP+X'80000000')\nDALORB   DS    (S99RBEND-S99RB)X'00'\nDAIRWORK DS    0A\nDAIRDDP  DS    AL2,AL2,AL2\nDAIRDD   DS    CL8\nDAIRWORKL EQU  *-DAIRWORK\nDAIRINIT DC    AL2(DALDDNAM),AL2(1),AL2(8)\n         DC    CL8' '\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL32' '\n         DC    C'PDS SCAN UTILITY'\n         DC    CL22' '\n         DC    C'PAGE'\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nPR99LINE DS    0C\n         DC    C'0'\n         DC    C'DYNAMIC DE-ALLOCATION FAILURE, R15='\nPR99R15  DC    CL4' '\n         DC    C'   S99ERROR='\nPR99ERR  DC    CL4' '\n         DC    C'   S99INFO='\nPR99INFO DC    CL4' '\n         DC    C' '\nPR99LINEL EQU  *-PR99LINE\nFREELINE DS    0C\n         DC    C'0'\n         DC    C'FREEMAIN FAILURE, R15='\nPRFREE15 DC    CL4' '\n         DC    C' '\nFREELINEL EQU  *-FREELINE\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\nPLINE    DC    CL133' '\n*--------------------------------------------------------------------*\n*                  COMMON AREA                                       *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=COMM,TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  SCAN BLOCK                                        *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=SCAN,TYPE=DSECT\n*--------------------------------------------------------------------*\n*                  NAME FILTER BLOCK                                 *\n*--------------------------------------------------------------------*\n         PDSBLOK BLOCK=NAME,TYPE=DSECT\n         IEFZB4D0\n         IEFZB4D2\n*---------------------------------------------------------------------*\n*                  REGISTER EQUATES                                   *\n*---------------------------------------------------------------------*\n         COPY  REGEQU\n         END   PDSPH03\n./ ADD NAME=VSAMCOMM 0100-02291-02291-0123-00008-00008-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        VSAM UTILITY COMMON AREAS                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nVSAMCOMM CSECT\n         VSAMCOMM\n         END   VSAMCOMM\n./ ADD NAME=VSAMPH00 0100-02291-02291-0123-00742-00742-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*           THIS PHASE:                                               *\n*              1) OPENS THE FILES                                     *\n*              2) READS THE CONTROL CARDS                             *\n*              3) DOES LIMITED PARAMETER VALIDATION CHECKING          *\n*              4) PASSES CONTROL TO THE CROSS CHECKING PHASE          *\n*                                                                     *\n*---------------------------------------------------------------------*\nVSAMPH00 CSECT\n         USING VSAMPH00,R15            SPECIFY CSECT BASE\n         ID                            DATE AND TIME COMPILED\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         L     R12,VCOMM               COMMON MODULE ADDRESS\n         USING VSAMCOMM,R12            DEFINE COMMON BASE\n         LA    R2,COMSAVE              SAVE AREA ADDRESS\n         ST    R13,4(R2)               CHAIN\n         ST    R2,8(R13)               CHAIN\n         LR    R13,R2                  POINT TO NEW SAVE AREA\n         LR    R11,R15                 LOAD NEW BASE REGISTER\n         LA    R10,2048(R11)           2ND BASE REGISTER\n         LA    R10,2048(R10)           2ND BASE REGISTER\n         DROP  R15                     DISCONTINUE OLD BASE\n         USING VSAMPH00,R11,R10        RESUME WITH NEW BASE\n         LA    R2,PRINTER              PRINT FILE\n         OPEN  ((R2),OUTPUT)           OPEN PRINT FILE\n         LA    R2,SYSIN                CONTROL FILE\n         OPEN  ((R2),INPUT)            OPEN CONTROL FILE\n         MVC   VSAMMAC,=CL8'OPEN'      LAST MACRO IS 'OPEN'\n         LA    R2,VSAMFILE             VSAM ACB\n         OPEN  ((R2))                  OPEN INPUT FILE\n         LTR   R15,R15                 OPENED SUCCESSFULLY??\n         BNZ   OPEN0040                NO\n         RDJFCB MF=(E,JFCBREQ)         READ JFCB\n         MVI   COMACBF,X'00'           CLEAR ALL FLAGS\n         MVC   VSAMMAC,=CL8'TESTCB'    LAST MACRO IS 'TESTCB'\n         LA    R2,VSAMFILE             INPUT FILE ACB\n         TESTCB ACB=(R2),              TEST ACB                        +\n               ATRB=KSDS,              .. FOR KSDS ORGANIZATION        +\n               ERET=OPEN0040           .. TEST FAILED\n         BNE   OPEN0010                NOT KSDS...\n         OI    COMACBF,$KSDS           INDICATE DATASET IS KSDS\n         B     OPEN0030                ISSUE SHOWCB\nOPEN0010 DS    0H\n         TESTCB ACB=(R2),              TEST ACB                        +\n               ATRB=RRDS,              .. FOR RRDS ORGANIZATION        +\n               ERET=OPEN0040           .. TEST FAILED\n         BNE   OPEN0020                NOT RRDS\n         OI    COMACBF,$RRDS           INDICATE DATASET IS RRDS\n         B     OPEN0030                ISSUE SHOWCB\nOPEN0020 DS    0H\n         TESTCB ACB=(R2),              TEST ACB                        +\n               ATRB=ESDS,              .. FOR ESDS ORGANIZATION        +\n               ERET=OPEN0040           .. TEST FAILED\n         BNE   OPEN0030                NOT ESDS\n         OI    COMACBF,$ESDS           INDICATE DATASET IS ESDS\nOPEN0030 DS    0H\n         LA    R3,COMLRECL             FIRST RETURNED ITEM\n         SHOWCB ACB=(R2),              SHOW ACB ATTRIBUTES             +\n               AREA=(R3),              .. RETURNED DATA                +\n               LENGTH=12,              .. LENGTH OF RETURNED DATA      +\n               FIELDS=(LRECL,          .. REQUEST RECORD LENGTH        +\n               KEYLEN,                 .. REQUEST KEY LENGTH           +\n               RKP)                    .. REQUEST RELATIVE KEY POSITION\n         LTR   R15,R15                 SHOWCB SUCCESSFUL??\n         BZ    READ0000                YES... OPEN PROCESSING COMPLETE\n         MVC   VSAMMAC,=CL8'SHOWCB'    LAST MACRO WAS 'SHOWCB'\nOPEN0040 DS    0H\n         STH   R15,DWORD               VSAM RETURN CODE\n         UNPK  VSAMRC(5),VSAMRC(3)     UNAPACK RETURN CODE\n         NC    VSAMRC,HEX0F0F          TURN OFF ZONES\n         TR    VSAMRC,HEXCHAR          CONVERT TO PRINTABLE\n         MVI   VSAMRC+4,C' '           RESTORE BLANK\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0010           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 PROCESS CONTROL CARDS                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nREAD0000 DS    0H\n         LA    R2,SYSIN                CONTROL FILE\n         USING IHADCB,R2               DEFINE DSECT BASE\n         LA    R1,CLSE0000             END OF DATA ROUTINE ADDRESS\n         STCM  R1,7,DCBEODAD+1         INSERT ROUTINE ADDRESS IN DCB\n         BAL   R9,HEADINGS             PRINT HEADINGS\nREAD0010 DS    0H\n         LA    R2,SYSIN                CONTROL FILE\n         GET   (R2),CARDAREA           READ A CONTROL RECORD\n         MVC   PLINE+1(L'CARDAREA),CARDAREA\n         MVI   PLINE,C'0'              DOUBLE SPACE\n         BAL   R9,PRT0000              PRINT CONTROL CARD\n         CLI   CARDAREA,C'*'           COMMENT CARD??\n         BE    READ0010                YES\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK FOR KEYWORDS                                        *\n*                                                                     *\n*       WITHIN THE KEYWORD PROCESSING ROUTINES REGISTER USAGE IS:     *\n*       R7  CURRENT ADDRESS IN WORK AREA                              *\n*       R3  ADDRESS OF NUMERIC TARGETS                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nPARM0000 DS    0H\n         LA    R7,CARDAREA             INITIALIZE CURRENT ADDRESS REG\nPARM0010 DS    0H\n         CLI   0(R7),C' '              END OF CARD?\n         BE    READ0010                YES\n         CLC   =C'SKIP=',0(R7)         SKIP CONTROL CARD?\n         BE    SKIP0000                YES\n         CLC   =C'COUNT=',0(R7)        COUNT CONTROL CARD?\n         BE    COUNT000                YES\n         CLC   =C'MAXLINES=',0(R7)     OUTPUT LINES LIMIT CARD?\n         BE    MAXL0000                YES\n         CLC   =C'SCAN=',0(R7)         SCAN1 VALUE CONTROL CARD?\n         BE    SCAN1010                YES\n         CLC   =C'SCAN1=',0(R7)        SCAN1 VALUE CONTROL CARD?\n         BE    SCAN1000                YES\n         CLC   =C'ZONE=',0(R7)         ZONE1 CONTROL CARD?\n         BE    ZONE1010                YES\n         CLC   =C'ZONE1=',0(R7)        ZONE1 CONTROL CARD?\n         BE    ZONE1000                YES\n         CLC   =C'SCAN2=',0(R7)        SCAN2 VALUE CONTROL CARD?\n         BE    SCAN2000                YES\n         CLC   =C'ZONE2=',0(R7)        ZONE2 CONTROL CARD?\n         BE    ZONE2000                YES\n         CLC   =C'TZONE=',0(R7)        TRIGGER ZONE CARD?\n         BE    TZONE000                YES\n         CLC   =C'TRIGGER=',0(R7)      TRIGGER CONTROL CARD?\n         BE    TRGR0000                YES\n         CLC   =C'TITLE=',0(R7)        TITLE CONTROL CARD?\n         BE    TITLE000                YES\n         CLC   =C'NOHEX',0(R7)         NO HEX?\n         BE    NOHEX000                YES\n         CLC   =C'SINGLE',0(R7)        SINGLE SPACING REQUEST??\n         BE    SPCE0000                YES\n         CLC   =C'SCANCTRL',0(R7)      SCAN CONTROL REQUEST??\n         BE    SCTRL000                YES\n         CLC   =C'ABEND',0(R7)         ABEND (DEBUGGING) REQUEST??\n         BE    ABEND000                YES\n         CLC   =C'HELP',0(R7)          HELP REQUEST??\n         BE    HELP0000                YES\n         CLC   =C'FIRST100',0(R7)      FIRST100 REQUEST??\n         BE    FIRST100                YES\n         CLC   =C'FROMKEY',0(R7)       FROM KEY??\n         BE    FKEY0000                YES\n         CLC   =C'TOKEY',0(R7)         TO KEY??\n         BE    TKEY0000                YES\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0006           INVALID PARAMETER\n         BAL   R9,PRT0000              PRINT MESSAGE\n         B     READ0010                READ NEXT STATEMENT\nABEND000 DS    0H\n         DC    H'0'                    DEAR JOHN......\nSPCE0000 DS    0H\n         LA    R7,7(R7)                PAST KEYWORD\n         MVI   COMSPACE,$SINGLE        SET SINGLE SPACING\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nNOHEX000 DS    0H\n         MVI   COMHEX,C' '             SET NO HEX FLAG\n         LA    R7,6(R7)                PAST KEYWORD\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSKIP0000 DS    0H\n         LA    R7,5(R7)                END OF KEYWORD\n         OI    COMFLAG,$SKIP           INDICATE SKIP REQUESTED\n         LA    R3,COMSKIP              OUTPUT AREA\n         BAL   R8,CNV0000              CONVERT QUANTITY\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nCOUNT000 DS    0H\n         LA    R7,6(R7)                END OF KEYWORD\n         LA    R3,COMCOUNT             OUTPUT AREA\n         OI    COMFLAG,$COUNT          TURN ON COUNT FLAG\n         BAL   R8,CNV0000              CONVERT AMOUNT\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nMAXL0000 DS    0H\n         LA    R7,9(R7)                END OF KEYWORD\n         LA    R3,COMMAXL              OUTPUT AREA\n         BAL   R8,CNV0000              CONVERT AMOUNT\n         ST    R2,COMMAXL              STORE MAX LINES\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nHELP0000 DS    0H\n         MVI   COMHELP,$HELP           SET HELP FLAG\n         LA    R7,5(R7)                PAST KEYWORD\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nFIRST100 DS    0H\n         OI    COMFLAG,$100            SET FIRST100 LIST FLAG\n         LA    R7,6(R7)                PAST KEYWORD\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSCTRL000 DS    0H\n         LA    R7,9(R7)                END OF KEYWORD\n         OI    COMFLAG,$SCTRL          TURN ON SCAN CONTROL FLAG\n         CLC   =C'1 AND 2',0(R7)       REQUEST FOR 1 AND 2??\n         BNE   SCTRL010                NO\n         MVI   COMSCTRL,$AND           SET 'AND' INDICATOR\n         LA    R7,8(R7)                ADVANCE INPUT ADDRESS\n         B     PARM0010                LOOK FOR MORE PARAMETERS\nSCTRL010 DS    0H\n         CLC   =C'1 OR 2',0(R7)        REQUEST FOR 1 OR 2??\n         BNE   SCTRL020                NO\n         MVI   COMSCTRL,$OR            SET 'OR' INDICATOR\n         LA    R7,7(R7)                ADVANCE INPUT ADDRESS\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nSCTRL020 DS    0H\n         MVC   PLINE,MSG0009           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT MESSAGE\n         OI    COMFLAG,$ERROR          INDICATE ERROR OCCURRED\n         B     READ0010                BYPASS REMAINDER OF CARD\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS SCAN/TRIGGER/OR TITLE                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN1000 DS    0H\n         LA    R7,1(R7)                ADVANCE 1 EXTRA BYTE\nSCAN1010 DS    0H\n         LA    R7,5(R7)                SCAN VALUE\n         MVI   HEXFLAG,C' '            TURN OFF HEX INDICATOR\n         CLC   =C'X''',0(R7)           HEX VALUE??\n         BNE   SCAN1020                NO\n         MVI   HEXFLAG,$HEX            INDICATE HEX SCAN VALUE\n         LA    R7,1(R7)                BYPASS HEX INDICATOR\nSCAN1020 DS    0H\n         BAL   R8,SCAN5000             BEGIN INTREPRETING SCAN CARD\n         MVC   COMSCAN1,SCANDATA       MOVE SCAN DATA\n         LH    R15,SCANLEN             SCAN PARAMETER LENGTH\n         BCTR  R15,0                   MINUS 1 FOR EXECUTES\n         CLI   HEXFLAG,$HEX            WAS SCAN 'HEX'??\n         BNE   SCAN1030                NO\n         TM    SCANLEN+1,X'01'         IS LENGTH ODD??\n         BO    SCAN1040                YES\n         EX    R15,HEXTRT              TEST DATA\n         BNZ   SCAN5120                INVALID HEX DATA\n         EX    R15,HEXTR               TRANSLATE FOR PACKING\n         SRL   R15,1                   DIVIDE BY 2\n         PACK  COMSCAN1+00(6),SCANDATA+00(11)\n         PACK  COMSCAN1+05(6),SCANDATA+10(11)\n         PACK  COMSCAN1+10(6),SCANDATA+20(11)\n         PACK  COMSCAN1+15(6),SCANDATA+30(11)\n         PACK  COMSCAN1+20(6),SCANDATA+40(11)\n         PACK  COMSCAN1+25(6),SCANDATA+50(11)\n         PACK  COMSCAN1+30(6),SCANDATA+60(11)\n         PACK  COMSCAN1+35(6),SCANDATA+70(11)\nSCAN1030 DS    0H\n         LA    R15,1(R15)              RESTORE FULL LENGTH\n         STH   R15,COMSCN1L            SAVE LENGTH OF SEARCH ARGUEMENT\n         OI    COMSCN1F,$SCAN1         SCAN IN EFFECT\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSCAN1040 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0001           MOVE ERROR MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSCAN2000 DS    0H\n         LA    R7,6(R7)                SCAN VALUE\n         MVI   HEXFLAG,C' '            TURN OFF HEX INDICATOR\n         CLC   =C'X''',0(R7)           HEX VALUE??\n         BNE   SCAN2010                NO\n         MVI   HEXFLAG,$HEX            INDICATE HEX SCAN VALUE\n         LA    R7,1(R7)                BYPASS HEX INDICATOR\nSCAN2010 DS    0H\n         BAL   R8,SCAN5000             BEGIN INTREPRETING SCAN CARD\n         MVC   COMSCAN2,SCANDATA       MOVE SCAN DATA\n         LH    R15,SCANLEN             SCAN PARAMETER LENGTH\n         BCTR  R15,0                   MINUS 1 FOR EXECUTES\n         CLI   HEXFLAG,$HEX            WAS SCAN 'HEX'??\n         BNE   SCAN2020                NO\n         TM    SCANLEN+1,X'01'         IS LENGTH ODD??\n         BO    SCAN2030                YES\n         EX    R15,HEXTRT              TEST DATA\n         BNZ   SCAN5120                INVALID HEX DATA\n         EX    R15,HEXTR               TRANSLATE FOR PACKING\n         SRL   R15,1                   DIVIDE BY 2\n         PACK  COMSCAN2+00(6),SCANDATA+00(11)\n         PACK  COMSCAN2+05(6),SCANDATA+10(11)\n         PACK  COMSCAN2+10(6),SCANDATA+20(11)\n         PACK  COMSCAN2+15(6),SCANDATA+30(11)\n         PACK  COMSCAN2+20(6),SCANDATA+40(11)\n         PACK  COMSCAN2+25(6),SCANDATA+50(11)\n         PACK  COMSCAN2+30(6),SCANDATA+60(11)\n         PACK  COMSCAN2+35(6),SCANDATA+70(11)\nSCAN2020 DS    0H\n         LA    R15,1(R15)              RESTORE FULL LENGTH\n         STH   R15,COMSCN2L            SAVE LENGTH OF SEARCH ARGUEMENT\n         OI    COMSCN2F,$SCAN2         SCAN IN EFFECT\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nSCAN2030 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0001           MOVE ERROR MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nTRGR0000 DS    0H\n         LA    R7,8(R7)                POINT TO SCAN VALUE\n         MVI   HEXFLAG,C' '            TURN OFF HEX INDICATOR\n         CLC   =C'X''',0(R7)           HEX VALUE??\n         BNE   TRGR0010                NO\n         MVI   HEXFLAG,$HEX            INDICATE HEX SCAN VALUE\n         LA    R7,1(R7)                BYPASS HEX INDICATOR\nTRGR0010 DS    0H\n         BAL   R8,SCAN5000             BEGIN INTREPRETING SCAN CARD\n         MVC   COMTRGR,SCANDATA        MOVE SCAN DATA\n         LH    R15,SCANLEN             SCAN PARAMETER LENGTH\n         BCTR  R15,0                   MINUS 1 FOR EXECUTES\n         CLI   HEXFLAG,$HEX            WAS VALUE HEX??\n         BNE   TRGR0020                NO\n         TM    SCANLEN+1,X'01'         IS LENGTH ODD??\n         BO    TRGR0030                YES\n         EX    R15,HEXTRT              TEST DATA\n         BNZ   SCAN5120                INVALID HEX DATA\n         EX    R15,HEXTR               TRANSLATE FOR PACKING\n         SRL   R15,1                   DIVIDE BY 2\n         PACK  COMTRGR+00(6),SCANDATA+00(11)\n         PACK  COMTRGR+05(6),SCANDATA+10(11)\n         PACK  COMTRGR+10(6),SCANDATA+20(11)\n         PACK  COMTRGR+15(6),SCANDATA+30(11)\n         PACK  COMTRGR+20(6),SCANDATA+40(11)\n         PACK  COMTRGR+25(6),SCANDATA+50(11)\n         PACK  COMTRGR+30(6),SCANDATA+60(11)\n         PACK  COMTRGR+35(6),SCANDATA+70(11)\nTRGR0020 DS    0H\n         LA    R15,1(R15)              RESTORE FULL LENGTH\n         STH   R15,COMTRGL             SAVE LENGTH OF SEARCH ARGUEMENT\n         OI    COMTRGRF,$TRIGGER       SCAN IN EFFECT\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nTRGR0030 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0001           MOVE ERROR MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nTITLE000 DS    0H\n         LA    R7,6(R7)                SCAN VALUE\n         BAL   R8,SCAN5000             BEGIN INTERPRET TITLE\n         MVC   COMTITLE,SCANDATA       MOVE SCAN DATA\n         B     PARM0010                CONTINUE SCANNING PARAMETERS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS SCAN/TRIGGER/ OR TITLE VALUES                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nSCAN5000 DS    0H\n         MVC   SCANDATA,SCANDATA-1     INITIALIZE WORK AREA\n         LA    R1,SCANDATA             START OF SCAN WORK AREA\n         SR    R2,R2                   ZERO LENGTH\n         CLI   0(R7),X'7D'             OPENING QUOTE?\n         BNE   SCAN5100                NO ???\n         LA    R7,1(R7)                ADD 1 TO ADDRESS\nSCAN5010 DS    0H\n         CLI   0(R7),X'7D'             QUOTE?\n         BE    SCAN5040                YES\nSCAN5020 DS    0H\n         MVC   0(1,R1),0(R7)           MOVE TO OUTPUT VALUE\n         LA    R1,1(R1)                ADD 1 TO ADDRESS\n         LA    R2,1(R2)                ADD 1 TO LENGTH\nSCAN5030 DS    0H\n         LA    R7,1(R7)                ADD 1 TO ADDRESS\n         C     R1,=A(SCANDATA+70)      END OF WORK AREA?\n         BE    SCAN5110                YES... NO ENDING QUOTE\n         B     SCAN5010                CONTINUE\nSCAN5040 DS    0H\n         CLI   1(R7),X'7D'             DOUBLE QUOTE?\n         BNE   SCAN5050                NO\n         LA    R7,1(R7)                ADD 1 TO ADDRESS\n         B     SCAN5020                MOVE IT INTO OUTPUT\nSCAN5050 DS    0H\n         STH   R2,SCANLEN              SAVE LENGTH\n         LA    R7,2(R7)                NEXT PARAMETER\n         BR    R8                      RETURN\nSCAN5100 DS    0H\n         MVC   PLINE,MSG0002           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     READ0010                BYPASS REMAINDER OF THIS CARD\nSCAN5110 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0003           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     READ0010                BYPASS REMAINDER OF THIS CARD\nSCAN5120 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0008           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE PARAMETERS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS ZONE FOR SCAN OR TRIGGER                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nZONE1000 DS    0H\n         LA    R7,1(R7)                1 EXTRA FOR ZONE1\nZONE1010 DS    0H\n         LA    R7,5(R7)                PAST KEYWORD\n         LA    R3,COMZ1BGN             ZONE START\n         BAL   R8,CNV0000              CONVERT NUMBER\n         LH    R1,COMZ1BGN             LOAD STARTING POSITION\n         LTR   R1,R1                   STARTING POINT GIVEN??\n         BZ    ZONE1020                NO STARTING POSITION\n         BCTR  R1,0                    MAKE RELATIVE TO ZERO\n         STH   R1,COMZ1BGN             SAVE OFFSET\n         OI    COMSCN1F,$Z1BGN         ZONE1 STARTING FLAG\nZONE1020 DS    0H\n         CLI   0(R7),C' '              ENDING ZONE PRESENT??\n         BE    READ0010                NO\n         CLI   0(R7),C','              ENDING ZONE PRESENT??\n         BE    ZONE1030                NO\n         LA    R3,COMZ1END             ZONE END\n         BAL   R8,CNV0000              CONVERT NUMBER\n         CLC   COMZ1END,COMZ1BGN       IS BEGIN LARGER THAN END?\n         BL    ZONE5000                YES\n         LH    R1,COMZ1END             LOAD ENDING POSITION\n         LTR   R1,R1                   ZERO??\n         BZ    ZONE5000                BAD ZONE\n         BCTR  R1,0                    CONVERT TO OFFSET\n         STH   R1,COMZ1END             SAVE ENDING OFFSET\n         OI    COMSCN1F,$Z1END         ZONE END FLAG\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nZONE1030 DS    0H\n         LA    R7,1(R7)                ADVANCE INPUT ADDRESS\n         B     PARM0010                CHECK FOR MORE PARAMETERS\nZONE2000 DS    0H\n         LA    R7,6(R7)                PAST KEYWORD\n         LA    R3,COMZ2BGN             ZONE START\n         BAL   R8,CNV0000              CONVERT NUMBER\n         LH    R1,COMZ2BGN             LOAD STARTING POSITION\n         LTR   R1,R1                   STARTING POINT GIVEN??\n         BZ    ZONE2010                NO STARTING POSITION\n         BCTR  R1,0                    MAKE RELATIVE TO ZERO\n         STH   R1,COMZ2BGN             SAVE OFFSET\n         OI    COMSCN2F,$Z2BGN         ZONE2 STARTING FLAG\nZONE2010 DS    0H\n         CLI   0(R7),C' '              ENDING ZONE PRESENT??\n         BE    READ0010                NO\n         CLI   0(R7),C','              ENDING ZONE PRESENT??\n         BE    ZONE1030                NO\n         LA    R3,COMZ2END             ZONE END\n         BAL   R8,CNV0000              CONVERT NUMBER\n         CLC   COMZ2END,COMZ2BGN       IS BEGIN LARGER THAN END?\n         BL    ZONE5000                NO\n         LH    R1,COMZ2END             LOAD ENDING POSITION\n         LTR   R1,R1                   ZERO??\n         BZ    ZONE5000                BAD ZONE\n         BCTR  R1,0                    CONVERT TO OFFSET\n         STH   R1,COMZ2END             SAVE ENDING OFFSET\n         OI    COMSCN2F,$Z2END         ZONE END FLAG\n         B     PARM0010\nTZONE000 DS    0H\n         LA    R7,6(R7)                PAST KEYWORD\n         LA    R3,COMTZBGN             ZONE START\n         BAL   R8,CNV0000              CONVERT NUMBER\n         LH    R1,COMTZBGN             LOAD STARTING POSITION\n         LTR   R1,R1                   STARTING POINT GIVEN??\n         BZ    TZONE010                NO STARTING POSITION\n         BCTR  R1,0                    MAKE RELATIVE TO ZERO\n         STH   R1,COMTZBGN             SAVE OFFSET\n         OI    COMTRGRF,$TZBGN         TRIGGER STARTING FLAG\nTZONE010 DS    0H\n         CLI   0(R7),C' '              ENDING ZONE PRESENT??\n         BE    READ0010                NO\n         CLI   0(R7),C','              ENDING ZONE PRESENT??\n         BE    ZONE1030                NO\n         LA    R3,COMTZEND             ZONE END\n         BAL   R8,CNV0000              CONVERT NUMBER\n         CLC   COMTZEND,COMTZBGN       IS BEGIN LARGER THAN END?\n         BL    ZONE5000                NO\n         LH    R1,COMTZEND             LOAD ENDING POSITION\n         LTR   R1,R1                   ZERO??\n         BZ    ZONE5000                BAD ZONE\n         BCTR  R1,0                    CONVERT TO OFFSET\n         STH   R1,COMTZEND             SAVE ENDING OFFSET\n         OI    COMTRGRF,$TZEND         ZONE END FLAG\n         B     PARM0010\nZONE5000 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0004           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT MESSAGE\n         B     PARM0010                CONTINUE PROCESSING PARAMETERS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PROCESS FROM KEY                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nFKEY0000 DS    0H\n         LA    R7,8(R7)                KEY VALUE\n         MVI   HEXFLAG,C' '            TURN OFF HEX INDICATOR\n         CLC   =C'X''',0(R7)           HEX VALUE??\n         BNE   FKEY0010                NO\n         MVI   HEXFLAG,$HEX            INDICATE HEX SCAN VALUE\n         LA    R7,1(R7)                BYPASS HEX INDICATOR\nFKEY0010 DS    0H\n         BAL   R8,SCAN5000             BEGIN INTREPRETING KEY VALUE\n         MVC   COMFKEY,SCANDATA        MOVE KEY VALUE\n         LH    R15,SCANLEN             KEY VALUE LENGTH\n         BCTR  R15,0                   MINUS 1 FOR EXECUTES\n         CLI   HEXFLAG,$HEX            WAS VALUE HEX??\n         BNE   FKEY0020                NO\n         TM    SCANLEN+1,X'01'         IS LENGTH ODD??\n         BO    FKEY0030                YES\n         EX    R15,HEXTRT              TEST DATA\n         BNZ   SCAN5120                INVALID HEX DATA\n         EX    R15,HEXTR               TRANSLATE FOR PACKING\n         SRL   R15,1                   DIVIDE BY 2\n         PACK  COMFKEY+00(6),SCANDATA+00(11)\n         PACK  COMFKEY+05(6),SCANDATA+10(11)\n         PACK  COMFKEY+10(6),SCANDATA+20(11)\n         PACK  COMFKEY+15(6),SCANDATA+30(11)\n         PACK  COMFKEY+20(6),SCANDATA+40(11)\n         PACK  COMFKEY+25(6),SCANDATA+50(11)\n         PACK  COMFKEY+30(6),SCANDATA+60(11)\n         PACK  COMFKEY+35(6),SCANDATA+70(11)\nFKEY0020 DS    0H\n         LA    R15,1(R15)              RESTORE FULL LENGTH\n         STC   R15,COMFKEYL            SAVE LENGTH OF KEY VALUE\n         OI    COMFLAG,$FROMKEY        SCAN IN EFFECT\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nFKEY0030 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0001           MOVE ERROR MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*              PROCESS TO KEY                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\nTKEY0000 DS    0H\n         LA    R7,6(R7)                KEY VALUE\n         MVI   HEXFLAG,C' '            TURN OFF HEX INDICATOR\n         CLC   =C'X''',0(R7)           HEX VALUE??\n         BNE   TKEY0010                NO\n         MVI   HEXFLAG,$HEX            INDICATE HEX SCAN VALUE\n         LA    R7,1(R7)                BYPASS HEX INDICATOR\nTKEY0010 DS    0H\n         BAL   R8,SCAN5000             BEGIN INTREPRETING KEY VALUE\n         MVC   COMTKEY,SCANDATA        MOVE KEY VALUE\n         LH    R15,SCANLEN             KEY VALUE LENGTH\n         BCTR  R15,0                   MINUS 1 FOR EXECUTES\n         CLI   HEXFLAG,$HEX            WAS VALUE HEX??\n         BNE   TKEY0020                NO\n         TM    SCANLEN+1,X'01'         IS LENGTH ODD??\n         BO    TKEY0030                YES\n         EX    R15,HEXTRT              TEST DATA\n         BNZ   SCAN5120                INVALID HEX DATA\n         EX    R15,HEXTR               TRANSLATE FOR PACKING\n         SRL   R15,1                   DIVIDE BY 2\n         PACK  COMTKEY+00(6),SCANDATA+00(11)\n         PACK  COMTKEY+05(6),SCANDATA+10(11)\n         PACK  COMTKEY+10(6),SCANDATA+20(11)\n         PACK  COMTKEY+15(6),SCANDATA+30(11)\n         PACK  COMTKEY+20(6),SCANDATA+40(11)\n         PACK  COMTKEY+25(6),SCANDATA+50(11)\n         PACK  COMTKEY+30(6),SCANDATA+60(11)\n         PACK  COMTKEY+35(6),SCANDATA+70(11)\nTKEY0020 DS    0H\n         LA    R15,1(R15)              RESTORE FULL LENGTH\n         STC   R15,COMTKEYL            SAVE LENGTH OF KEY VALUE\n         OI    COMFLAG,$TOKEY          TOKEY IN EFFECT\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\nTKEY0030 DS    0H\n         OI    COMFLAG,$ERROR          TURN ON ERROR INDICATOR\n         MVC   PLINE,MSG0001           MOVE ERROR MESSAGE\n         BAL   R9,PRT0000              PRINT ERROR MESSAGE\n         B     PARM0010                SEARCH FOR MORE KEYWORDS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CONVERT CHARACTER TO BINARY                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nCNV0000  DS    0H\n         TRT   0(12,R7),NUMTAB         SCAN NUMBER\n         BZ    CNV0030                 BAD NUMBER\n         CLI   0(R1),C' '              STOP ON A BLANK??\n         BE    CNV0010                 YES\n         CLI   0(R1),C','              STOP ON A COMMA??\n         BNE   CNV0030                 NO .. INVALID NUMERIC DATA\n         XC    0(2,R3),0(R3)           ZERO RESULT\nCNV0010  DS    0H\n         SR    R1,R7                   COMPUTE LENGTH OF NUMBER\n         BZ    CNV0020                 NUMBER OMITTED\n         BCTR  R1,0                    REDUCE BY 1 FOR EXECUTES\n         MVC   CNVBEGIN,CNVBEGIN-1     INITIALIZE\n         LA    R2,CNVBEGIN+10          CONVERT BEGIN\n         SR    R2,R1                   COMPUTE STARTING ADDRESS\n         EX    R1,CNVMOVE              MOVE NUMBER TO STARTING\n         PACK  DWORD,CNVBEGIN          PACK THE VALUE\n         CVB   R2,DWORD                CONVERT IT TO BINARY\n         STH   R2,0(R3)                SAVE AMOUNT\n         LA    R7,2(R1,R7)             NEXT PARAMETER\n         BR    R8                      RETURN\nCNV0020  DS    0H\n         LA    R7,1(R7)                NEXT FIELD\n         BR    R8                      PROCESSING COMPLETE\nCNV0030  DS    0H\n         MVC   PLINE,MSG0005           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT MESSAGE\n         B     PARM0010                CONTINUE PROCESSING PARAMETERS\nCNVMOVE  MVC   0(0,R2),0(R7)           MOVE FOR PACKING\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADING ROUTINES                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER              PRINT DCB\n         PUT   (R2),PRCC               PRINT\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C' '               SINGLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C'0'               DOUBLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\nPRT0010  DS    0H\n         CP    COMLINE,P65             TIME FOR HEADINGS?\n         BLR   R9                      NO\nHEADINGS DS    0H\n         AP    COMPAGE,P1              ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'402020202120' EDIT WORD\n         ED    PRPAGE,COMPAGE          EDIT PAGE NUMBER\n         LA    R2,PRINTER              PRINT DCB\n         PUT   (R2),HEADING            PRINT PAGE HEADING\n         PUT   (R2),HELPHEAD           PRINT 'HELP' HEADING\n         ZAP   COMLINE,P3              RESET LINE COUNT\n         BR    R9                      RETURN\nCLSE0000 DS    0H\n         LA    R2,SYSIN                CONTROL FILE DCB\n         CLOSE (R2)                    CLOSE SYSIN\nPHSE0000 DS    0H\n         L     R15,VPH1                ADDRESS OF NEXT PHASE\n         BR    R15                     CONTINUE WITH NEXT PHASE\nHEXTRT   TRT   SCANDATA(0),HEXTAB1     TEST HEX DATA\nHEXTR    TR    SCANDATA(0),HEXTAB2     TRANSLATE DATA FOR PACKING\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     WORKAREAS                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nDWORD    DC    D'0'                    FOR CVB'S\nVCOMM    DC    V(VSAMCOMM)             ADDRESS OF 'COMMON'\nVPH1     DC    V(VSAMPH01)             ADDRESS OF PHASE '01'\nSCANLEN  DC    H'0'                    LENGTH OF SCAN/TRIGGER/TITLE\n         DC    C' '\nSCANDATA DC    CL80' '                 SCAN/TRIGGER/ OR TITLE DATA\nP0       DC    P'0'\nP1       DC    P'1'\nP3       DC    P'3'\nP65      DC    P'65'\nHEXFLAG  DC    X'00'\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\n         DC    C'0'\nCNVBEGIN DC    CL11'0'                 CONVERSION BEGINNING\n         DC    C' '\nPLINE    DS    0CL121\nPRCC     DC    C' '                    CARRIAGE CONTROL\nPAREA    DC    CL120' '                PRINT AREA\nCARDAREA DC    CL80' '                 CARD FILE I/O AREA\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL109'       VSAM UTILITY CONTROL STATEMENTS'\n         DC    C'PAGE '\nPRPAGE   DC    CL6' '\nHELPHEAD DC    CL121'0 FOR A LIST OF PARAMETERS AND THEIR USAGE SPECIFY+\n                ''HELP'' ON A CONTROL STATEMENT'\n         LTORG\nMSG0001  DC    CL121'  HEX STRING HAS ODD NUMBER OF CHARACTERS'\nMSG0002  DC    CL121'  NO OPEN QUOTE FOR SCAN, TRIGGER, OR TITLE'\nMSG0003  DC    CL121'  NO CLOSING QUOTE FOR SCAN, TRIGGER, OR TITLE'\nMSG0004  DC    CL121'  INVALID ZONE FOR SCAN OR TRIGGER'\nMSG0005  DC    CL121'  INVALID NUMERIC VALUE'\nMSG0006  DC    CL121'  UNKNOWN PARAMETER'\nMSG0007  DC    CL121'  INVALID ZONE FOR SCAN OR TRIGGER'\nMSG0008  DC    CL121'  INVALID HEX DATA'\nMSG0009  DC    CL121'  INVALID SCANCTRL VALUE (MUST BE ''1 AND 2'' OR '+\n               '1 OR 2'')'\nMSG0010  DS    0CL121\n         DC    CL15'  RETURN CODE '\nVSAMRC   DC    CL04' '\n         DC    CL17' FROM VSAM MACRO '\nVSAMMAC  DC    CL08' '\n         DC    CL77', JOB WILL BE ABORTED'\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nNUMTAB   DC    256X'FF'\n         ORG   NUMTAB+C'0'\n         DC    10X'00'\n         ORG   NUMTAB+256\nHEXTAB1  DC    256X'FF'\n         ORG   HEXTAB1+C'A'\n         DC    06X'00'\n         ORG   HEXTAB1+C'0'\n         DC    10X'00'\n         ORG   HEXTAB1+256\nHEXTAB2  DC    256X'00'\n         ORG   HEXTAB2+C'A'\n         DC    X'AABBCCDDEEFF'\n         ORG   HEXTAB2+C'0'\n         DC    X'00112233445566778899'\n         ORG   HEXTAB2+256\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     DSECTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nVSAMCOMM DSECT\n         VSAMCOMM\n         SPACE 2\n         PRINT NOGEN\n         DCBD  DSORG=PS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     REGISTER EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   VSAMPH00\n./ ADD NAME=VSAMPH01 0100-02291-02291-0123-00401-00401-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*           THIS PHASE:                                               *\n*              1) CROSS CHECKS PARAMETERS                             *\n*              2) INITIALIZES SCAN AND TRIGGER TABLES                 *\n*              3) PASSES CONTROL TO EITHER THE 'HELP' MODULE (PH03)   *\n*                 OR THE READ/PRINT MODULE (PH02)                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nVSAMPH01 CSECT\n         USING VSAMPH01,R15            SPECIFY CSECT BASE\n         ID                            DATE AND TIME COMPILED\n         LR    R10,R15                 COPY BASE ADDRESS\n         DROP  R15                     DROP PREVIOUS BASE\n         USING VSAMPH01,R10,R11        RESUME WITH NEW BASE\n         USING VSAMCOMM,R12            DEFINE COMMON BASE\n         LA    R11,2048(R10)           INITIALIZE 2ND BASE REGISTER\n         LA    R11,2048(R11)           INITIALIZE 2ND BASE REGISTER\n         CLI   COMHELP,$HELP           HELP REQUESTED??\n         BE    HELP0000                YES\n         TM    COMFLAG,$100            FIRST100 REQUESTED??\n         BO    L8080000                YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CROSS CHECK SCAN AND ZONE PARAMETERS                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0000 DS    0H\n         TM    COMSCN1F,$SCAN1         IS SCAN 1 IN EFFECT??            WMW02330\n         BO    TEST0020                YES                              WMW08140\n         TM    COMSCN1F,$Z1BGN         IS ZONE BEGIN IN EFFECT??        WMW08150\n         BO    TEST0010                YES .. NOT ALLOWED               WMW08160\n         TM    COMSCN1F,$Z1END         IS ZONE END IN EFFECT??          WMW08180\n         BNO   TEST0020                NO                               WMW08190\nTEST0010 DS    0H                                                       WMW08200\n         MVC   PLINE,MSG0001           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0020 DS    0H                                                       WMW08400\n         TM    COMSCN2F,$SCAN2         IS SCAN 2 IN EFFECT??            WMW02330\n         BO    TEST0040                YES                              WMW08140\n         TM    COMSCN2F,$Z2BGN         IS ZONE2 BEGIN IN EFFECT??       WMW08150\n         BO    TEST0030                YES .. NOT ALLOWED               WMW08160\n         TM    COMSCN2F,$Z2END         IS ZONE2 END IN EFFECT??         WMW08180\n         BNO   TEST0040                NO                               WMW08190\nTEST0030 DS    0H                                                       WMW08200\n         MVC   PLINE,MSG0002           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0040 DS    0H                                                       WMW08400\n         TM    COMTRGRF,$TRIGGER       IS TRIGGER IN EFFECT??           WMW02330\n         BO    TEST0060                YES                              WMW08140\n         TM    COMTRGRF,$TZBGN         IS TRIGGER ZONE IN EFFECT??      WMW08150\n         BO    TEST0050                YES .. NOT ALLOWED               WMW08160\n         TM    COMTRGRF,$TZEND         IS TRIGGER ZONE IN EFFECT??      WMW08180\n         BNO   TEST0060                NO                               WMW08190\nTEST0050 DS    0H                                                       WMW08200\n         MVC   PLINE,MSG0003           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CROSS CHECK SCANCTRL WITH SCAN 1 AND SCAN 2               *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0060 DS    0H                                                       WMW08400\n         TM    COMFLAG,$SCTRL          SCAN CONTROL SPECIFIED??\n         BNO   TEST0080                NO\n         TM    COMSCN1F,$SCAN1         WAS SCAN 1 SPECIFIED??\n         BNO   TEST0070                NO .. NOT ALLOWED\n         TM    COMSCN2F,$SCAN2         WAS SCAN 2 SPECIFIED??\n         BO    TEST0080                YES\nTEST0070 DS    0H                                                       WMW08200\n         MVC   PLINE,MSG0004           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK ZONE(S) AGAINST MAXIMUM RECORD LENGTH               *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0080 DS    0H                                                       WMW08200\n         TM    COMSCN1F,$SCAN1         SCAN1 IN EFFECT??\n         BNO   TEST0100                NO\n         TM    COMSCN1F,$Z1BGN         ZONE BEGIN GIVEN??\n         BNO   TEST0090                NO\n         CLC   COMZ1BGN,COMLRECL+2     TOO LARGE??\n         BNH   TEST0090                NO\n         MVC   PLINE,MSG0005           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0090 DS    0H\n         TM    COMSCN1F,$Z1END         ZONE END GIVEN??\n         BNO   TEST0100                NO\n         CLC   COMZ1END,COMLRECL+2     TOO LARGE??\n         BNH   TEST0100                NO\n         MVC   PLINE,MSG0006           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0100 DS    0H\n         TM    COMSCN2F,$SCAN2         SCAN2 IN EFFECT??\n         BNO   TEST0120                NO\n         TM    COMSCN2F,$Z2BGN         ZONE BEGIN GIVEN??\n         BNO   TEST0110                NO\n         CLC   COMZ2BGN,COMLRECL+2     TOO LARGE??\n         BNH   TEST0110                NO\n         MVC   PLINE,MSG0007           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0110 DS    0H\n         TM    COMSCN2F,$Z2END         ZONE END GIVEN??\n         BNO   TEST0120                NO\n         CLC   COMZ2END,COMLRECL+2     TOO LARGE??\n         BNH   TEST0120                NO\n         MVC   PLINE,MSG0008           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0120 DS    0H\n         TM    COMTRGRF,$TRIGGER       TRIGGER IN EFFECT??\n         BNO   TEST0140                NO\n         TM    COMTRGRF,$TZBGN         ZONE BEGIN GIVEN??\n         BNO   TEST0130                NO\n         CLC   COMTZBGN,COMLRECL+2     TOO LARGE??\n         BNH   TEST0130                NO\n         MVC   PLINE,MSG0009           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\nTEST0130 DS    0H\n         TM    COMTRGRF,$TZEND         ZONE END GIVEN??\n         BNO   TEST0140                NO\n         CLC   COMTZEND,COMLRECL+2     TOO LARGE??\n         BNH   TEST0150                NO\n         MVC   PLINE,MSG0010           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK NOHEX AGAINST SPACING                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0140 DS    0H\n         CLI   COMHEX,$HEX             PRINT HEX??\n         BNE   TEST0150                NO\n         CLI   COMSPACE,$SINGLE        SINGLE SPACING REQUESTED??\n         BNE   TEST0150                NO\n         MVC   PLINE,MSG0014           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK ZONE WIDTH'S AGAINST SCAN ARGUEMENTS                *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0150 DS    0H\n         TM    COMSCN1F,$SCAN1         SCAN 1 IN EFFECT??\n         BNO   TEST0170                NO\n         TM    COMSCN1F,$Z1BGN+$Z1END  USING START AND END??\n         BNO   TEST0160                NO\n         LH    R1,COMZ1END             END OF ZONE\n         SH    R1,COMZ1BGN             MINUS START OF ZONE\n         LA    R1,1(R1)                FULL NUMBER OF COLUMNS\n         CH    R1,COMSCN1L             ZONE TOO SMALL??\n         BNL   TEST0160                NO\n         MVC   PLINE,MSG0011           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n         B     TEST0170                CHECK SCAN 2\nTEST0160 DS    0H\n         LH    R3,COMSCN1L             LENGTH OF STRING\n         XLOC  TYPE=INIT,              INITIALIZE SCAN                 +\n               STRING=COMSCAN1,        ARGUEMENT                       +\n               STRLEN=(R3),            STRING LENGTH                   +\n               WORK=COMSCN1T,          TRANSLATE TABLE FOR SCAN 1      +\n               TABLE=FOCTABLE,         FREQUENCY OF OCCURRENCE TABLE   +\n               MF=(E,COMSCN1P)         SCAN 1 PARAMETER LIST\n         CLI   COMSCN1P+(XLOCSTAT-XLOCLIST),$XLOCOK    SUCCESSFUL??\n         BE    TEST0170                YES\n         DC    H'0'\nTEST0170 DS    0H\n         TM    COMSCN2F,$SCAN2         SCAN 2 IN EFFECT??\n         BNO   TEST0190                NO\n         TM    COMSCN2F,$Z2BGN+$Z2END  USING START AND END??\n         BNO   TEST0180                NO\n         LH    R1,COMZ2END             END OF ZONE\n         SH    R1,COMZ2BGN             MINUS START OF ZONE\n         LA    R1,1(R1)                FULL NUMBER OF COLUMNS\n         CH    R1,COMSCN2L             ZONE TOO SMALL??\n         BNL   TEST0180                NO\n         MVC   PLINE,MSG0012           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n         B     TEST0190                CHECK TRIGGER\nTEST0180 DS    0H\n         LH    R3,COMSCN2L             LENGTH OF STRING\n         XLOC  TYPE=INIT,              INITIALIZE SCAN                 +\n               STRING=COMSCAN2,        ARGUEMENT                       +\n               STRLEN=(R3),            STRING LENGTH                   +\n               WORK=COMSCN2T,          TRANSLATE TABLE FOR SCAN 2      +\n               TABLE=FOCTABLE,         FREQUENCY OF OCCURRENCE TABLE   +\n               MF=(E,COMSCN2P)         SCAN 2 PARAMETER LIST\n         CLI   COMSCN2P+(XLOCSTAT-XLOCLIST),$XLOCOK  SUCCESSFUL??\n         BE    TEST0190                YES\n         DC    H'0'\nTEST0190 DS    0H\n         TM    COMTRGRF,$TRIGGER       TRIGGER IN EFFECT??\n         BNO   TEST0210                NO\n         TM    COMTRGRF,$TZBGN+$TZEND  USING START AND END??\n         BNO   TEST0200                NO\n         LH    R1,COMTZEND             END OF ZONE\n         SH    R1,COMTZBGN             MINUS START OF ZONE\n         LA    R1,1(R1)                FULL NUMBER OF COLUMNS\n         CH    R1,COMTRGL              ZONE TOO SMALL??\n         BNL   TEST0200                NO\n         MVC   PLINE,MSG0013           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         OI    COMFLAG,$ERROR          SET ERROR INDICATOR              WMW08390\n         B     TEST0190                CHECK TRIGGER\nTEST0200 DS    0H\n         LH    R3,COMTRGL              LENGTH OF STRING\n         XLOC  TYPE=INIT,              INITIALIZE SCAN                 +\n               STRING=COMTRGR,         ARGUEMENT                       +\n               STRLEN=(R3),            STRING LENGTH                   +\n               WORK=COMTRGRT,          TRANSLATE TABLE FOR TRIGGER     +\n               TABLE=FOCTABLE,         FREQUENCY OF OCCURRENCE TABLE   +\n               MF=(E,COMTRGRP)         TRIGGER PARAMETER LIST\n         CLI   COMTRGRP+(XLOCSTAT-XLOCLIST),$XLOCOK   SUCCESSFUL??\n         BE    TEST0210                YES\n         DC    H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*           CHECK FROMKEY AND TO KEY AGAIN DATASET ORGANIZATION       *\n*           CHECK FROMKEY LENGTH AND TOKEY LENGTH AGAINST FILE'S      *\n*           KEY LENGTH.                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0210 DS    0H\n         TM    COMFLAG,$FROMKEY        'FROM KEY' IN EFFECT??\n         BNO   TEST0230                NO\n         TM    COMACBF,$KSDS           IS THIS A KSDS DATASET??\n         BO    TEST0220                YES\n         MVC   PLINE,MSG0015           MOVE MESSAGE\n         OI    COMFLAG,$ERROR          SET ERROR FLAG\n         BAL   R9,PRT0000              PRINT MESSAGE\nTEST0220 DS    0H\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,COMFKEYL             KEY LENGTH\n         C     R1,COMKEYL              GREATER THAN ACB KEY LENGTH??\n         BNH   TEST0230                NO\n         MVC   PLINE,MSG0016           MOVE MESSAGE\n         OI    COMFLAG,$ERROR          SET ERROR FLAG\n         BAL   R9,PRT0000              PRINT MESSAGE\nTEST0230 DS    0H\n         TM    COMFLAG,$TOKEY          'TO KEY' IN EFFECT??\n         BNO   TEST0250                NO\n         TM    COMACBF,$KSDS           IS THIS A KSDS DATASET??\n         BO    TEST0240                YES\n         MVC   PLINE,MSG0015           MOVE MESSAGE\n         OI    COMFLAG,$ERROR          SET ERROR FLAG\n         BAL   R9,PRT0000              PRINT MESSAGE\nTEST0240 DS    0H\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,COMTKEYL             KEY LENGTH\n         C     R1,COMKEYL              GREATER THAN ACB KEY LENGTH??\n         BNH   TEST0250                NO\n         MVC   PLINE,MSG0017           MOVE MESSAGE\n         OI    COMFLAG,$ERROR          SET ERROR FLAG\n         BAL   R9,PRT0000              PRINT MESSAGE\n*---------------------------------------------------------------------*\n*                                                                     *\n*       EITHER ABORT DUE TO ERRORS OR CONTINUE WITH NEXT PHASE        *\n*                                                                     *\n*---------------------------------------------------------------------*\nTEST0250 DS    0H\n         TM    COMFLAG,$ERROR          HAS AN ERROR OCCURRED??\n         BNO   PHSE0000                NO\n         MVC   PLINE,MSG0020           MOVE MESSAGE                     WMW08210\n         BAL   R9,PRT0000              PRINT IT                         WMW08220\n         B     PHSE0000                GO TO NEXT PROGRAM PHASE\nHELP0000 DS    0H\n         MVC   PLINE,MSG0030           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT IT\n         B     PHSE0010                GO TO NEXT PROGRAM PHASE\nL8080000 DS    0H\n         MVC   PLINE,MSG0040           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT IT\n         MVC   PLINE,MSG0041           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT IT\n         MVC   PLINE,MSG0042           MOVE MESSAGE\n         BAL   R9,PRT0000              PRINT IT\n         B     TEST0000                PERFORM NORMAL CHECKING\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADING ROUTINES                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER\n         PUT   (R2),PRCC               PRINT\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C' '               SINGLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C'0'               DOUBLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\nPRT0010  DS    0H\n         CP    COMLINE,P60             TIME FOR HEADINGS?\n         BLR   R9                      NO\nHEADINGS DS    0H\n         AP    COMPAGE,P1              ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'402020202120' EDIT WORD\n         ED    PRPAGE,COMPAGE          EDIT PAGE NUMBER\n         LA    R2,PRINTER\n         PUT   (R2),HEADING            PRINT\n         ZAP   COMLINE,P0              RESET LINE COUNT\n         BR    R9                      RETURN\nPHSE0000 DS    0H\n         L     R15,VPH2                ADDRESS OF NEXT PHASE\n         BR    R15                     CONTINUE WITH NEXT PHASE\nPHSE0010 DS    0H\n         L     R15,VPH3                ADDRESS OF NEXT PHASE\n         BR    R15                     CONTINUE WITH NEXT PHASE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     WORKAREAS                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nDWORD    DC    D'0'                    FOR CVB'S\nVPH2     DC    V(VSAMPH02)             ADDRESS OF PHASE '02'\nVPH3     DC    V(VSAMPH03)             ADDRESS OF PHASE '03'\nP0       DC    P'0'\nP1       DC    P'1'\nP60      DC    P'60'\nFOCTABLE XLOC  TYPE=TABLE               FREQUENCY OF OCCURRENCE TABLE\nPLINE    DS    0CL121\nPRCC     DC    C' '                    CARRIAGE CONTROL\nPAREA    DC    CL120' '                PRINT AREA\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL109'       VSAM UTILITY CONTROL STATEMENTS'\n         DC    C'PAGE '\nPRPAGE   DC    CL6' '\nMSG0001  DC    CL121'  ZONE OR ZONE1 SPECIFIED WITHOUT SCAN OR SCAN1'\nMSG0002  DC    CL121'  ZONE2 SPECIFIED WITHOUT SCAN2'\nMSG0003  DC    CL121'  TZONE SPECIFIED WITHOUT TRIGGER'\nMSG0004  DC    CL121'  SCANCTRL NOT ALLOWED WITHOUT SCAN 1 AND SCAN 2'\nMSG0005  DC    CL121'  ZONE1 BEGIN IS LARGER THAN RECORD LENGTH'\nMSG0006  DC    CL121'  ZONE1 END IS LARGER THAN RECORD LENGTH'\nMSG0007  DC    CL121'  ZONE2 BEGIN IS LARGER THAN RECORD LENGTH'\nMSG0008  DC    CL121'  ZONE2 END IS LARGER THAN RECORD LENGTH'\nMSG0009  DC    CL121'  TZONE BEGIN IS LARGER THAN RECORD LENGTH'\nMSG0010  DC    CL121'  TZONE END IS LARGER THAN RECORD LENGTH'\nMSG0011  DC    CL121'  ZONE SMALLER THAN SCAN ARGUEMENT LENGTH'\nMSG0012  DC    CL121'  ZONE2 SMALLER THAN SCAN2 ARGUEMENT LENGTH'\nMSG0013  DC    CL121'  TZONE SMALLER THAN TRIGGER ARGUEMENT LENGTH'\nMSG0014  DC    CL121'  SINGLE SPACING ALLOWED ONLY WITH ''NOHEX'''\nMSG0015  DC    CL121'  FROMKEY OR TOKEY SPECIFIED FOR NON-KSDS DATASET'\nMSG0016  DC    CL121'  FROMKEY VALUE LONGER THAN DATASET KEY LENGTH'\nMSG0017  DC    CL121'  TOKEY VALUE LONGER THAN DATASET KEY LENGTH'\nMSG0020  DC    CL121'0 ***** ERRORS DETECTED, EXECUTION ABORTED *****'\nMSG0030  DC    CL121'0 ***** HELP REQUESTED, ALL OTHER PARAMETERS IGNOR+\n               ED *****'\nMSG0040  DC    CL121'0 ***** FIRST100 REQUESTED, NOHEX AND SINGLE SPACI+\n               NG FORCED'\nMSG0041  DC    CL121'  RECORDS WILL BE TRUNCATED AT 100 CHARACTERS'\nMSG0042  DC    CL121'  LOGICAL RECORD NUMBER AND RECORD LENGTHS WILL BE+\n                SUPPRESSED'\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     DSECTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nVSAMCOMM DSECT\n         VSAMCOMM\n         EJECT\n         XLOC TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     REGISTER EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   VSAMPH01\n./ ADD NAME=VSAMPH02 0100-02291-02291-0123-00610-00610-00000-RLRICE\nVSAMPH02 CSECT\n         USING VSAMPH02,R15            SPECIFY CSECT BASE\n         ID                            DATE AND TIME COMPILED\n         PRINT NOGEN\n         LR    R11,R15                 COPY BASE ADDRESS\n         DROP  R15                     DROP PREVIOUS BASE\n         USING VSAMPH02,R11            RESUME WITH NEW BASE\n         USING VSAMCOMM,R12            DEFINE COMMON BASE\n         TM    COMFLAG,$ERROR          ERROR FLAG ON??\n         BO    EXIT0010                YES, EXIT\n         ZAP   COMPAGE,P0              RESET PAGE NUMBER\n         LA    R2,VSAMFILE             INPUT FILE ACB\n         MVC   VSAMFUNC,=CL8'MOD RPL'  LAST VSAM FUNCTION\n         MODCB RPL=READRPL,            MODIFY READ RPL                 +\n               ACB=(R2)                .. INSERT ACB ADDRESS\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\n         MVC   VSAMFUNC,=CL8'CLOSE 1'  LAST VSAM FUNCTION\n         LA    R2,VSAMFILE             INPUT FILE ACB\n         CLOSE ((R2))                  CLOSE INPUT ACB\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\n         MVC   VSAMFUNC,=CL8'MOD ACB'  LAST VSAM FUNCTION\n         MODCB ACB=(R2),               MODIFY ACB                      +\n               EXLST=PH02XLST          .. INSERT PHASE 2 EXIT LIST\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\n         TM    COMACBF,$ESDS           IS THIS AN ESDS DATASET??\n         BNO   INIT0005                NO\n         MODCB ACB=(R2),               MODIFY ACB                      +\n               MACRF=(ADR)             .. CHANGE TO ADDRESSED MODE\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\n         MODCB RPL=READRPL,            MODIFY RPL                      +\n               OPTCD=(ADR,FWD,SEQ,LOC) .. ADDRESSED/FORWARD/SEQUENTIAL\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\nINIT0005 DS    0H\n         MVC   VSAMFUNC,=CL8'OPEN 1'   LAST VSAM FUNCTION\n         OPEN  ((R2))                  OPEN ACB\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\nINIT0010 DS    0H\n         MVC   PRDSORG,=C'KSDS'        INDICATE DATASET IS KSDS\n         TM    COMACBF,$KSDS           IS THIS A KSDS??\n         BO    ATTR0010                YES\n         MVC   PRDSORG,=C'RRDS'        INDICATE DATASET IS RRDS\n         TM    COMACBF,$RRDS           IS THIS AN RRDS??\n         BO    ATTR0010                YES\n         MVC   PRDSORG,=C'ESDS'        INDICATE DATASET IS ESDS\nATTR0010 DS    0H\n         L     R1,COMLRECL             DATASET RECORD LENGTH\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         ED    PRLRECL,DWORD+5         EDIT LRECL\n         TM    COMACBF,$KSDS           IS DATSET KSDS??\n         BNO   ATTR0020                NO\n         MVC   PRKEYLH,=C'KEY LENGTH'  INSERT KEY LENGTH HEADING\n         MVC   PRRKPH,=C'RELATIVE KEY POSITION'\n         MVC   PRKEYL,=X'402020202120' INSERT EDIT WORD\n         MVC   PRRKP,=X'402020202120'  INSERT EDIT WORD\n         L     R1,COMKEYL              KEY LENGTH\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         ED    PRKEYL,DWORD+5          EDIT KEY LENGTH\n         L     R1,COMRKP               RELATIVE KEY POSITION\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         ED    PRRKP,DWORD+5           EDIT RELATIVE KEY POSITION\nATTR0020 DS    0H\n         BAL   R10,HEADINGS            PRINT HEADINGS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS FROM KEY IF ENTERED                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         TM    COMFLAG,$FROMKEY        USING FROM KEY??\n         BNO   SKIP0000                NO\n         LA    R2,COMFKEY              FROM KEY DATA\n         SR    R3,R3                   CLEAR FOR LENGTH\n         IC    R3,COMFKEYL             FROM KEY LENGTH\n         MVC   VSAMFUNC,=CL8'MODCB 1'  CURRENT FUNCTION\n         MODCB RPL=READRPL,            MODIFY RPL                      +\n               ARG=(R2),               .. KEY                          +\n               KEYLEN=(R3),            .. KEY LENGTH                   +\n               OPTCD=(KEY,DIR,SYN,NUP,GEN,KGE,LOC)\n         LTR   R15,R15                 MODIFY SUCCESSFUL??\n         BNZ   VERR0000                NO\n         MVC   VSAMFUNC,=CL8'POINT'    CURRENT FUNCTION\n         POINT RPL=READRPL             ISSUE POINT TO POSITION\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\n         MVC   VSAMFUNC,=CL8'MODCB 2'  CURRENT FUNCTION\n         MODCB RPL=READRPL,            MODIFY RPL                      +\n               OPTCD=(SEQ,FWD,LOC)     .. SWITCH TO FORWARD SEQUENTIAL\n         LTR   R15,R15                 MODIFY SUCCESSFUL??\n         BNZ   VERR0000                NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS SKIP IF REQUESTED                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSKIP0000 DS    0H\n         TM    COMFLAG,$SKIP           SKIP REQUESTED??\n         BNO   TRGR0000                NO\n         SR    R3,R3                   CLEAR REGISTER\n         ICM   R3,3,COMSKIP            NUMBER OF RECORDS TO SKIP\n         BZ    TRGR0000                NO RECORDS TO SKIP\nSKIP0010 DS    0H\n         BAL   R9,READ0000             READ A RECORD\n         BCT   R3,SKIP0010             LOOP REQUESTED NUMBER OF TIMES\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PROCESS TRIGGER IF REQUESTED                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRGR0000 DS    0H\n         TM    COMTRGRF,$TRIGGER       TRIGGER REQUESTED??\n         BNO   PROC0000                NO\nTRGR0010 DS    0H\n         BAL   R9,READ0000             READ A RECORD\n         CLC   COMTZBGN,RECLEN+2       IS RECORD TOO SMALL??\n         BH    TRGR0010                YES\n         SR    R3,R3                   ASSUME NO STARTING OFFSET\n         TM    COMTRGRF,$TZBGN         ZONE BEGIN GIVEN??\n         BNO   TRGR0020                NO\n         LH    R3,COMTZBGN             ZONE BEGIN OFFSET\n         BCTR  R3,0                    RELATIVE TO ZERO\nTRGR0020 DS    0H\n         LH    R4,RECLEN+2             RECORD LENGTH\n         TM    COMTRGRF,$TZEND         ZONE END REQUESTED??\n         BNO   TRGR0030                NO\n         CH    R4,COMTZEND             RECORD LONGER THAN ZONE??\n         BL    TRGR0030                NO\n         LH    R4,COMTZEND             LIMIT SEARCH TO ZONE LENGTH\nTRGR0030 DS    0H\n         L     R5,RECDADDR             RECORD ADDRESS\n         AR    R5,R3                   PLUS ZONE BEGIN\n         SR    R4,R3                   MINUS ZONE BEGIN\n         LH    R6,COMTRGL              STRING LENGTH\n         XLOC  RECORD=(R5),            RECORD ADDRESS                  +\n               RECLEN=(R4),            SCAN LENGTH                     +\n               STRING=COMTRGR,         SEARCH STRING                   +\n               STRLEN=(R6),            SEARCH STRING LENGTH            +\n               ERROR=TRGR0010,         STRING NOT FOUND                +\n               MF=(E,COMTRGRP)         TRIGGER PARAMETER LIST\n         B     PROC0020                BYPASS READ IN 'PROC'\n*---------------------------------------------------------------------*\n*                                                                     *\n*           MAIN READ/PRINT PROCEDURE                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC0000 DS    0H\n         TM    COMFLAG,$COUNT          COUNT REQUESTED??\n         BNO   PROC0010                NO\n         CLC   RECPRT,COMCOUNT         ENOUGH RECORDS PRINTED??\n         BNL   EXIT0010                YES\nPROC0010 DS    0H\n         BAL   R9,READ0000             READ A RECORD\n         TM    COMFLAG,$TOKEY          TO KEY SPECIFIED??\n         BNO   PROC0020                NO\n         SR    R1,R1                   CLEAR FOR LENGTH\n         IC    R1,COMTKEYL             TO KEY LENGTH\n         L     R2,RECDADDR             RECORD ADDRESS\n         A     R2,COMRKP               RECORD'S KEY DATA\n         BCTR  R1,0                    ADJUST FOR EXECUTE\n         EX    R1,TOKEYCLC             REACHED TOKEY??\n         BH    EXIT0010                YES\nPROC0020 DS    0H\n         MVI   SCANFLAG,X'00'          TURN OFF SCAN INDICATORS\n         TM    COMSCN1F,$SCAN1         SCAN 1 REQUESTED??\n         BNO   PROC0050                NO\n         SR    R3,R3                   ASSUME NO STARTING OFFSET\n         TM    COMSCN1F,$Z1BGN         ZONE BEGIN GIVEN??\n         BNO   PROC0030                NO\n         CLC   COMZ1BGN,RECLEN+2       IS RECORD TOO SMALL??\n         BH    PROC0000                YES\n         LH    R3,COMZ1BGN             ZONE BEGIN OFFSET\n         BCTR  R3,0                    RELATIVE TO ZERO\nPROC0030 DS    0H\n         LH    R4,RECLEN+2             RECORD LENGTH\n         TM    COMSCN1F,$Z1END         ZONE END REQUESTED??\n         BNO   PROC0040                NO\n         CH    R4,COMZ1END             RECORD LONGER THAN ZONE??\n         BL    PROC0040                NO\n         LH    R4,COMZ1END             LIMIT SEARCH TO ZONE LENGTH\nPROC0040 DS    0H\n         L     R5,RECDADDR             RECORD ADDRESS\n         AR    R5,R3                   PLUS ZONE BEGIN\n         SR    R4,R3                   MINUS ZONE BEGIN\n         LH    R6,COMSCN1L             STRING LENGTH\n         XLOC  RECORD=(R5),            RECORD ADDRESS                  +\n               RECLEN=(R4),            SEARCH LENGTH                   +\n               STRING=COMSCAN1,        SEARCH STRING                   +\n               STRLEN=(R6),            SEARCH STRING LENGTH            +\n               ERROR=PROC0050,         STRING NOT FOUND                +\n               MF=(E,COMSCN1P)         TRIGGER PARAMETER LIST\n         OI    SCANFLAG,$1FND          INDICATE SCAN 1 FOUND\nPROC0050 DS    0H\n         TM    COMSCN2F,$SCAN2         SCAN 2 REQUESTED??\n         BNO   PROC0080                NO\n         SR    R3,R3                   ASSUME NO STARTING OFFSET\n         TM    COMSCN2F,$Z2BGN         ZONE BEGIN GIVEN??\n         BNO   PROC0060                NO\n         CLC   COMZ2BGN,RECLEN+2       IS RECORD TOO SMALL??\n         BH    PROC0000                YES\n         LH    R3,COMZ2BGN             ZONE BEGIN OFFSET\n         BCTR  R3,0                    RELATIVE TO ZERO\nPROC0060 DS    0H\n         LH    R4,RECLEN+2             RECORD LENGTH\n         TM    COMSCN2F,$Z2END         ZONE END REQUESTED??\n         BNO   PROC0070                NO\n         CH    R4,COMZ2END             RECORD LONGER THAN ZONE??\n         BL    PROC0070                NO\n         LH    R4,COMZ2END             LIMIT SEARCH TO ZONE LENGTH\nPROC0070 DS    0H\n         L     R5,RECDADDR             RECORD ADDRESS\n         AR    R5,R3                   PLUS ZONE BEGIN\n         SR    R4,R3                   MINUS ZONE BEGIN\n         LH    R6,COMSCN2L             STRING LENGTH\n         XLOC  RECORD=(R5),            RECORD ADDRESS                  +\n               RECLEN=(R4),            SCAN LENGTH                     +\n               STRING=COMSCAN2,        SEARCH STRING                   +\n               STRLEN=(R6),            SEARCH STRING LENGTH            +\n               ERROR=PROC0080,         STRING NOT FOUND                +\n               MF=(E,COMSCN2P)         TRIGGER PARAMETER LIST\n         OI    SCANFLAG,$2FND          INDICATE SCAN 2 FOUND\nPROC0080 DS    0H\n         CLI   COMSCTRL,C'A'           SCAN 1 AND SCAN 2 REQUIRED??\n         BNE   PROC0090                NO\n         TM    SCANFLAG,$1FND+$2FND    WERE 1 AND 2 FOUND??\n         BNO   PROC0000                NO\nPROC0090 DS    0H\n         TM    COMSCN1F,$SCAN1         SCAN 1 REQUESTED??\n         BNO   PROC0100                NO\n         TM    SCANFLAG,$1FND          WAS SCAN 1 FOUND??\n         BO    PROC0110                ACCEPT THE RECORD\n         CLI   COMSCTRL,C'O'           SCAN 1 OR SCAN 2 ALLOWED??\n         BNE   PROC0000                NO\nPROC0100 DS    0H\n         TM    COMSCN2F,$SCAN2         SCAN 2 REQUESTED??\n         BNO   PROC0110                NO\n         TM    SCANFLAG,$2FND          WAS SCAN 2 FOUND??\n         BNO   PROC0000                NO\nPROC0110 DS    0H\n         BAL   R9,RPRT0000             PRINT THE RECORD\n         B     PROC0000                REPEAT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           READ INPUT FILE                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nREAD0000 DS    0H\n         MVC   VSAMFUNC,=CL8'GET'      CURRENT FUNCTION\n         GET   RPL=READRPL             READ A RECORD\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\n         MVC   VSAMFUNC,=CL8'SWOCB'    CURRENT FUNCTION\n         SHOWCB RPL=READRPL,           SHOW DATA FROM RPL              +\n               FIELDS=(RECLEN),        .. REQUEST RECORD LENGTH        +\n               AREA=RECLEN,            .. AREA FOR RETURNED DATA       +\n               LENGTH=4                .. LENGTH OF 'RECLEN'\n         LTR   R15,R15                 SUCCESSFUL??\n         BNZ   VERR0000                NO\n         L     R14,RECNBR              LOGICAL RECORD NUMBER\n         LA    R14,1(R14)              ADD 1\n         ST    R14,RECNBR              SAVE RECORD NUMBER\n         BR    R9                      RETURN\n         SPACE 2\nVERR0000 DS    0H\n         STH   R15,DWORD               SAVE RETURN CODE\n         STH   R0,DWORD+2              SAVE RETURN CODE\n         SHOWCB RPL=READRPL,           EXTRACT INFO FROM RPL           +\n               FIELDS=(FDBK),          .. FEED BACK                    +\n               AREA=RPLFDBK,           .. AREA TO RETURN DATA          +\n               LENGTH=4                .. LENGTH OF AREA\n         UNPK  VSAMR15(5),DWORD(3)     UNPACK RETURN CODE\n         MVI   VSAMR15+4,C' '          RESTORE BLANK\n         NC    VSAMR15,HEX0F0F         TURN OFF ZONES\n         TR    VSAMR15,HEXCHAR         TRANSLATE TO CHARACTER\n         STH   R0,DWORD                SAVE RETURN CODE\n         UNPK  VSAMR0(5),DWORD+2(3)    UNPACK RETURN CODE\n         MVI   VSAMR0+4,C' '           RESTORE BLANK\n         NC    VSAMR0,HEX0F0F          TURN OFF ZONES\n         TR    VSAMR0,HEXCHAR          TRANSLATE TO CHARACTER\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         MVC   PLINE(VSAMMSGL),VSAMMSG MOVE MESSAGE\n         BAL   R10,PRT0000             PRINT MESSAGE\n         UNPK  VSAMFDBK(9),RPLFDBK(5)  UNPACK RETURN CODE\n         MVI   VSAMFDBK+8,C' '         RESTORE BLANK\n         NC    VSAMFDBK,HEX0F0F        TURN OFF ZONES\n         TR    VSAMFDBK,HEXCHAR        TRANSLATE TO CHARACTER\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         MVC   PLINE(FDBKMSGL),FDBKMSG MOVE MESSAGE\n         BAL   R10,PRT0000             PRINT MESSAGE\n         B     EXIT0010                AND EXIT\n         SPACE 2\nREADRPL  RPL   AM=VSAM,                GENERATE VSAM RPL               +\n               AREA=RECDADDR,           .. ADDRESS OF RETURNED RECORD  +\n               OPTCD=(FWD,SEQ,LOC,SYN), .. FORWARD/SEQUENTIAL/LOCATE   +\n               RECLEN=RECLEN            .. RETURN RECORD LENGTH\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           FORMAT RECORD                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nRPRT0000 DS    0H\n         L     R8,RECDADDR             DATA ADDRESS\n         LH    R1,RECPRT               NUMBER OF RECORDS PRINTED\n         LA    R1,1(R1)                ADD 1\n         STH   R1,RECPRT               SAVE RECORDS PRINTED\n         MVC   RPRTLEN,RECLEN+2        COPY RECORD LENGTH\n         ZAP   CENTURY,P0              ZERO 100'S ACCUMULATOR\nRPRT0010 DS    0H\n         TM    COMFLAG,$100            FIRST100 FORMAT??\n         BO    RPRT0020                YES\n         CLI   COMHEX,$HEX             RECORD TO BE PRINTED IN HEX\n         BNE   RPRT0020                NO\n         CP    COMLINE,P70             ENOUGH LINES FOR 1 'GROUP'??\n         BNH   RPRT0020                YES\n         BAL   R10,HEADINGS            FORCE HEADINGS\nRPRT0020 DS    0H\n         LH    R3,RPRTLEN              DATA LENGTH\n         LTR   R3,R3                   ZERO?\n         BZR   R9                      EXIT\n         CH    R3,H100                 TOO MUCH FOR 1 LINE??\n         BNH   RPRT0030                NO\n         LH    R3,H100                 LIMIT LENGTH TO 100\nRPRT0030 DS    0H\n         BCTR  R3,0                    ADJUST FOR EXECUTE\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         EX    R3,CHARMVC              MOVE CHARACTER\n         EX    R3,CHARTR               TRANSLATE OUT UNPRINTABLES\n         TM    COMFLAG,$100            FIRST100 FORMAT??\n         BO    RPRT0050                YES\n         CP    CENTURY,P0              FIRST LINE FOR RECORD??\n         BNE   RPRT0040                NO\n         MVI   PR#,C'#'                MOVE IN RECORD NUMBER PREFIX\n         L     R1,RECNBR               CURRENT LOGICAL RECORD NUMBER\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         MVC   PRRECNBR,=X'402020202021'\n         ED    PRRECNBR,DWORD+5        EDIT RECORD NUMBER\n         MVC   PRSIZE,=C' SIZE'        MOVE RECORD SIZE PREFIX\n         LH    R1,RECLEN+2             CURRENT RECORD SIZE\n         CVD   R1,DWORD                CONVERT TO DECIMAL\n         MVC   PRRECLEN,=X'402020202021'\n         ED    PRRECLEN,DWORD+5        EDIT RECORD NUMBER\nRPRT0040 DS    0H\n         MVI   PRCC,C' '               SINGLE SPACE CONTROL\n         CLI   COMSPACE,$SINGLE        SINGLE SPACING?\n         BE    RPRT0050                YES\n         MVI   PRCC,C'0'               DOUBLE SPACE CONTROL\nRPRT0050 DS    0H\n         BAL   R10,PRT0000             PRINT CHARACTER\n         TM    COMFLAG,$100            FIRST100 FORMAT??\n         BOR   R9                      YES\n         CLI   COMHEX,$HEX             RECORD TO BE PRINTED IN HEX??\n         BNE   RPRT0060                NO\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         EX    R3,CHARMVC              MOVE CHARACTER\n         EX    R3,NUMRNULL             NULL NUMERIC\n         EX    R3,HEXTR                TRANSLATE ZONES\n         BAL   R10,PRT0000             PRINT ZONES\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         EX    R3,CHARMVC              MOVE CHARACTER\n         EX    R3,ZONENULL             NULL ZONES\n         EX    R3,HEXTR                TRANSLATE NUMERIC'S\n         BAL   R10,PRT0000             PRINT NUMERICS\n         MVC   PLINE,PLINE-1           CLEAR PRINT LINE\n         MVC   PR100,=X'402020202020'  EDIT WORD\n         ED    PR100,CENTURY           EDIT 100'S COUNTER\n         EX    R3,SCALEMVC             MOVE SCALE\n         BAL   R10,PRT0000             PRINT SCALE\nRPRT0060 DS    0H\n         AP    CENTURY,P10             ADD TO 100'S COUNTER\n         LA    R3,1(R3)                RESTORE DATA LENGTH\n         LH    R1,RPRTLEN              DATA LENGTH\n         SR    R1,R3                   REMAINING LENGTH\n         STH   R1,RPRTLEN              SAVE LENGTH LEFT\n         LA    R8,100(R8)              NEXT 100 BYTES\n         B     RPRT0010                REPEAT\nTOKEYCLC CLC   0(0,R2),COMTKEY         CHECK TO-KEY VALUE\nCHARMVC  MVC   PAREA+20(0),0(R8)       MOVE CHARACTER\nCHARTR   TR    PAREA+20(0),CHRTABLE    TRANSLATE OUT UNPRINTABLES\nZONENULL MVZ   PAREA+20(0),HEXZEROS    NULLIFY ZONES\nNUMRNULL MVN   PAREA+20(0),HEXZEROS    NULLIFY NUMERICS\nHEXTR    TR    PAREA+20(0),HEXTABLE    TRANSLATE TO PRINTABLE\nSCALEMVC MVC   PAREA+20(0),SCALE       MOVE SCALE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADING ROUTINES                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         CLC   TOTLINES,COMMAXL        EXCEEDED OUTPUT LINE MAXIMUM??\n         BH    EXIT0000                YES\n         LA    R2,PRINTER\n         PUT   (R2),PRCC               PRINT\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         CLI   PRCC,C' '               SINGLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         CLI   PRCC,C'0'               DOUBLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\nPRT0010  DS    0H\n         CP    COMLINE,P75             TIME FOR HEADINGS?\n         BLR   R10                     NO\nHEADINGS DS    0H\n         AP    COMPAGE,P1              ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'402020202120' EDIT WORD\n         ED    PRPAGE,COMPAGE          EDIT PAGE NUMBER\n         MVC   PRTITLE,COMTITLE        MOVE PAGE TITLE\n         LA    R2,PRINTER\n         PUT   (R2),HEADING            PRINT PAGE HEADING\n         ZAP   COMLINE,P1              SET LINE COUNT TO 1\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         LA    R2,PRINTER\n         MVC   DSNDSN,JFCBDSNM         MOVE DATASET NAME TO HEADING\n         PUT   (R2),DSNLINE            PRINT DATASET NAME LINE\n         AP    COMLINE,P1              ADD 1 TO LINE COUNT\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         TM    COMFLAG,$100            FIRST100 FORMAT??\n         BOR   R10                     YES, EXIT HERE\n         PUT   (R2),ATTRLINE           PRINT FILE ATTRIBUTE LINE\n         AP    COMLINE,P1              ADD 1 TO LINE COUNT\n         L     R1,TOTLINES             ADD 1 TO LINE COUNTER\n         A     R1,FONE\n         ST    R1,TOTLINES\n         BR    R10                     RETURN\nEXIT0000 DS    0H\n         LA    R2,PRINTER\n         PUT   (R2),MAXLMSG            PRINT MESSAGE\nEXIT0010 DS    0H\n         LA    R2,VSAMFILE             INPUT FILE ADDRESS\n         CLOSE ((R2))                  CLOSE INPUT FILE\n         LA    R2,PRINTER              PRINTER FILE ADDRESS\n         CLOSE ((R2))                  CLOSE PRINT FILE\nEXIT0020 DS    0H\n         L     R13,4(R13)              RESTORE SAVE AREA ADDRESS\n         L     R14,12(R13)             RESTORE REGISTER 14\n         LM    R0,R12,20(R13)          RESTORE ALL OTHER REGISTERS\n         SR    R15,R15                 RETURN CODE\n         BR    R14                     EXIT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTORG\nDWORD    DC    D'0'\nRECDADDR DC    A(0)                    CURRENT REOCRD ADDRESS\nPH02XLST EXLST AM=VSAM,                GENERATE VSAM EXIT LIST         +\n               EODAD=(EXIT0010,A)      .. END OF FILE\nTOTLINES DC    F'0'                    TOTAL LINES PRINTED\nRECNBR   DC    F'0'                    CURRENT RECORD'S RECORD NUMBER\nFONE     DC    F'1'                    CONSTANT\nRECLEN   DC    F'0'                    CURRENT RECORD LENGTH\nRPLFDBK  DC    F'0'                    RPL FEED BACK\nRECPRT   DC    H'0'                    NUMBER OF RECORDS PRINTED\nRPRTLEN  DC    H'0'                    PRINT ROUTINE WORK LENGTH\nH4       DC    H'4'                    CONSTANT\nH100     DC    H'100'                  CONSTANT\nP0       DC    P'0'                    CONSTANT\nP1       DC    P'1'                    CONSTANT\nP3       DC    P'3'                    CONSTANT\nP10      DC    P'10'                   CONSTANT\nP70      DC    P'70'                   CONSTANT\nP75      DC    P'75'                   CONSTANT\nCENTURY  DC    PL3'0'                  100'S COUNTER\nSCANFLAG DC    X'00'                   SCAN RESULTS INDICATORS\n$1FND    EQU   X'80'                   .. SCAN 1 FOUND\n$2FND    EQU   X'40'                   .. SCAN 2 FOUND\nHEXZEROS DC    100X'00'                CONSTANT\nHEX0F0F  DC    8X'0F'\nHEXCHAR  DC    C'0123456789ABCDEF'\n*                   0 1 2 3 4 5 6 7 8 9 A B C D E F                     VUT16120\nCHRTABLE DC    XL16'40404040404040404040404040404040'     X'00' - X'0F' VUT16130\n         DC    XL16'40404040404040404040404040404040'     X'10' - X'1F' VUT16140\n         DC    XL16'40404040404040404040404040404040'     X'20' - X'2F' VUT16150\n         DC    XL16'40404040404040404040404040404040'     X'30' - X'3F' VUT16160\n         DC    XL16'404040404040404040404A4B4C4D4E4F'     X'40' - X'4F' VUT16170\n         DC    XL16'504040404040404040405A5B5C5D5E5F'     X'50' - X'5F' VUT16180\n         DC    XL16'60614040404040404040406B6C6D6E6F'     X'60' - X'6F' VUT16190\n         DC    XL16'404040404040404040407A7B7C7D7E7F'     X'70' - X'7F' VUT16200\n         DC    XL16'40404040404040404040408B8C8D8E8F'     X'80' - X'8F' VUT16210\n         DC    XL16'40404040404040404040409B9C9D9E9F'     X'90' - X'9F' VUT16220\n         DC    XL16'4040404040404040404040ABACADAEAF'     X'A0' - X'AF' VUT16230\n         DC    XL16'4040404040404040404040BBBCBDBEBF'     X'B0' - X'BF' VUT16240\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'     X'C0' - X'CF' VUT16250\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'     X'D0' - X'DF' VUT16260\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'     X'E0' - X'EF' VUT16270\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'     X'F0' - X'FF' VUT16280\n*                   0 1 2 3 4 5 6 7 8 9 A B C D E F                     VUT16120\nHEXTABLE DC    CL16'0123456789ABCDEF'                     X'00' - X'0F'\n         DC    CL16'1               '                     X'10' - X'1F'\n         DC    CL16'2               '                     X'20' - X'2F'\n         DC    CL16'3               '                     X'30' - X'3F'\n         DC    CL16'4               '                     X'40' - X'4F'\n         DC    CL16'5               '                     X'50' - X'5F'\n         DC    CL16'6               '                     X'60' - X'6F'\n         DC    CL16'7               '                     X'70' - X'7F'\n         DC    CL16'8               '                     X'80' - X'8F'\n         DC    CL16'9               '                     X'90' - X'9F'\n         DC    CL16'A               '                     X'A0' - X'AF'\n         DC    CL16'B               '                     X'B0' - X'BF'\n         DC    CL16'C               '                     X'C0' - X'CF'\n         DC    CL16'D               '                     X'D0' - X'DF'\n         DC    CL16'E               '                     X'E0' - X'EF'\n         DC    CL16'F               '                     X'F0' - X'FF'\nVSAMMSG  DC    C'0 ***** ERROR ON '\nVSAMFUNC DC    CL8' '\n         DC    C' VSAM R15='\nVSAMR15  DC    CL4' '\n         DC    C'  VSAM R0='\nVSAMR0   DC    CL4' '\n         DC    C'  PROGRAM ABORTED *****'\nVSAMMSGL EQU   *-VSAMMSG\nFDBKMSG  DS    0C\n         DC    C'  ***** RPL FEED BACK ='\nVSAMFDBK DC    CL8' '\n         DC    C' *****'\nFDBKMSGL EQU   *-FDBKMSG\nHEADING  DS    0C\n         DC    C'1'\n         DC    CL14' '\nPRTITLE  DC    CL80' '\n         DC    CL15' '\n         DC    C'PAGE '\nPRPAGE   DC    CL6' '\nSCALE    DC    CL100'1...5...10...15...20...25...30...35...40...45...50+\n               ...55...60...65...70...75...80...85...90...95..100'\nDSNLINE  DC    C' RECORDS PRINTED FROM DATASET:'\nDSNDSN   DC    CL44' '\n         DC    CL50' '\nMAXLMSG  DC    CL121'- ********** OUTPUT EXCEEDED, PROGRAM TERMINATED *+\n               *********'\nATTRLINE DC    C' '\n         DC    C'DATASET ORANIZATION:'\nPRDSORG  DC    CL04' '                  DATASET ORGANIZATION\n         DC    CL15'   RECORD SIZE:'\nPRLRECL  DC    XL06'402020202120'       RECORD LENGTH\n         DC    CL03'   '\nPRKEYLH  DC    CL11'           '\nPRKEYL   DC    CL06'            '       KEY LENGTH\n         DC    CL03'   '\nPRRKPH   DC    CL21'                      '\nPRRKP    DC    CL06'            '       RELATIVE KEY POSITION\n         DC    CL46' '\nPLINE    DS    0CL121\nPRCC     DC    C' '                    CARRIAGE CONTROL\nPAREA    DS    0CL120                  PRINT AREA\n         DC    CL14' '\nPR100    DC    X'402020202020'         100'S PREFIX\n         ORG   PAREA\nPR#      DC    C' '                    RECORD NUMBER PREFIX\nPRRECNBR DC    X'402020202021'         RECORD NUMBER\nPRSIZE   DC    C' SIZE'\nPRRECLEN DC    X'402020202021'         RECORD SIZE\n         DC    C'  '\n         DC    CL100' '\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nVSAMCOMM DSECT\n         PRINT GEN\n         VSAMCOMM\n         EJECT\n         XLOC TYPE=DSECT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     REGISTER EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   VSAMPH02\n./ ADD NAME=VSAMPH03 0100-02291-02291-0123-00253-00253-00000-RLRICE\n         MACRO\n&NAME    HELP  &DATA\n         LCLC  &NDX\n&NDX     SETC  '&SYSNDX'\n&NAME    DS    0C\n         DC    AL2(E&NDX-B&NDX)\nB&NDX    DS    0C\n         DC    C&DATA\nE&NDX    DS    0C\n         MEND\nVSAMPH03 CSECT\n         USING VSAMPH03,R15            SPECIFY CSECT BASE\n         ID                            DATE AND TIME COMPILED\n         LR    R11,R15                 COPY BASE ADDRESS\n         DROP  R15                     DROP PREVIOUS BASE\n         USING VSAMPH03,R11            RESUME WITH NEW BASE\n         USING VSAMCOMM,R12            DEFINE COMMON BASE\n         BAL   R10,HEADINGS            PRINT 'HELP' HEADINGS\n         LA    R9,HELPDATA             HELP DATA\nHELP0010 DS    0H\n         CLI   0(R9),X'FF'             END OF HELP DATA??\n         BE    EXIT0000                YES\n         CLI   0(R9),X'80'             EJECT RECORD??\n         BNE   HELP0020                NO\n         BAL   R10,HEADINGS            FORCE HEADING\n         LA    R9,1(R9)                SKIP EJECT RECORD\n         B     HELP0010                NEXT HELP RECORD\nHELP0020 DS    0H\n         MVC   PLINE,PLINE-1           CLEAR PRINT AREA\n         SR    R3,R3                   CLEAR FOR LENGTH\n         ICM   R3,3,0(R9)              DATA LENGTH\n         BCTR  R3,0                    ADJUST FOR EXECUTE\n         EX    R3,HELPMVC              MOVE HELP DATA\n         BAL   R10,PRT0000             PRINT HELP DATA\n         LA    R9,3(R3,R9)             NEXT HELP DATA\n         B     HELP0010                PRINT NEXT LINE\nHELPMVC  MVC   PLINE(0),2(R9)          MOVE HELP DATA\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*           PRINTING/HEADING ROUTINES                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         LA    R2,PRINTER\n         PUT   (R2),PRCC               PRINT\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C' '               SINGLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\n         CLI   PRCC,C'0'               DOUBLE SPACE??\n         BE    PRT0010                 YES\n         AP    COMLINE,P1              ADD 1 TO LINE COUNTER\nPRT0010  DS    0H\n         CP    COMLINE,P75             TIME FOR HEADINGS?\n         BLR   R10                     NO\nHEADINGS DS    0H\n         AP    COMPAGE,P1              ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'402020202120' EDIT WORD\n         ED    PRPAGE,COMPAGE          EDIT PAGE NUMBER\n         LA    R2,PRINTER\n         PUT   (R2),HEADING            PRINT PAGE HEADING\n         LA    R2,PRINTER\n         ZAP   COMLINE,P1              RESET LINE COUNT\n         BR    R10                     RETURN\nEXIT0000 DS    0H\n         LA    R2,VSAMFILE             INPUT FILE ADDRESS\n         CLOSE (R2)                    CLOSE INPUT FILE\n         LA    R2,PRINTER              PRINTER FILE ADDRESS\n         CLOSE (R2)                    CLOSE PRINT FILE\nEXIT0010 DS    0H\n         L     R13,4(R13)              RESTORE SAVE AREA ADDRESS\n         L     R14,12(R13)             RESTORE REGISTER 14\n         LM    R0,R12,20(R13)          RESTORE ALL OTHER REGISTERS\n         SR    R15,R15                 RETURN CODE\n         BR    R14                     EXIT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTORG\nP0       DC    P'0'                    CONSTANT\nP1       DC    P'1'                    CONSTANT\nP75      DC    P'75'                   CONSTANT\nHEADING  DS    0C\n         DC    CL111'1                   VSAM UTILITY CONTROL PARAMETER+\n               S'\n         DC    C'PAGE'\nPRPAGE   DC    CL6' '\n         DC    C' '\nPLINE    DS    0CL121\nPRCC     DC    C' '\n         DC    CL120' '\n         EJECT\nHELPDATA DS    0H\n         HELP  '0                          UTILITY PARAMETERS'\n         HELP  '0*                 AN ASTERISK IN COLUMN 1 SPECIFIES A +\n               COMMENT.  THE'\n         HELP  '                   REMAINDER OF THE RECORD WILL BE IGNO+\n               RED.  ANY NUMBER'\n         HELP  '                   OF COMMENTS MAY BE USED INTERMIXED W+\n               ITH PARAMETER'\n         HELP  '                   STATEMENTS IN ANY ORDER.'\n         HELP  '0COUNT=NNN         SPECIFIES THE MAXIMUM NUMBER OF RECO+\n               RDS TO BE PRINTED.'\n         HELP  '                   NOTE THAT THIS IS NOT THE NUMBER OF +\n               RECORDS READ.  IF'\n         HELP  '                   SCAN(S) ARE USED MANY MORE RECORDS M+\n               AY BE READ THAN'\n         HELP  '                   ARE PRINTED.'\n         HELP  '0MAXLINES=NNNNN    SPECIFIES THE MAXIMUM NUMBER OF LINE+\n               S TO BE PRINTED.'\n         HELP  '                   THIS CAN PREVENT ''RUN AWAY'' PRINT.+\n                DEFAULT=10000.'\n         HELP  '0NOHEX             SPECIFIES THAT THE CHARACTER PORTION+\n                ONLY BE PRINTED.'\n         HELP  '                   ZONE, NUMERIC, AND SCALE LINES WILL +\n               BE SUPPRESSED.'\n         HELP  '0SKIP=NNN          SPECIFIES A NUMBER OF RECORDS TO BE +\n               SKIPPED AFTER FROMKEY'\n         HELP  '                   AND BEFORE SCAN OR TRIGGER IF SPECIF+\n               IED.'\n         HELP  '0   FROMKEY='' ''    SPECIFIES A KEY VALUE TO BEGIN PRO+\n               CESSING.  THIS DIFFERS'\n         HELP  ' OR FROMKEY=X'' ''   FROM SCAN OR TRIGGER IN THAT RECOR+\n               DS DO NOT HAVE TO BE'\n         HELP  '                   READ TO ESTABLISH POSITION, POSITION+\n               ING IS DONE VIA THE'\n         HELP  '                   DATASET INDEX.  THE KEY IS ALL OR AN+\n               Y PORTION (GENERIC)'\n         HELP  '                   OF THE KEY.  THIS PARAMETER MAY ONLY+\n                BE SPECIFIED FOR'\n         HELP  '                   KSDS DATASETS.'\n         HELP  '0   TOKEY='' ''      SPECIFIES A KEY VALUE TO END PROCE+\n               SSING.  RULES ARE THE'\n         HELP  ' OR TOKEY=X'' ''     SAME AS ''FROMKEY''.'\n         HELP  '0   SCAN='' ''       SPECIFIES A DATA STRING TO BE LOCA+\n               TED IN EACH RECORD'\n         HELP  ' OR SCAN=X'' ''      BEFORE IT IS SELECTED TO BE PRINTE+\n               D.  THIS PROVIDES'\n         HELP  ' OR SCAN1='' ''      A METHOD TO ''FILTER'' DESIRED REC+\n               ORDS.  THE STRING MAY'\n         HELP  ' OR SCAN1=X'' ''     BE EITHER IN CHARACTER OR HEX.  DE+\n               FAULT IS CHARACTER.'\n         HELP  '                   THE LETTER ''X'' PRECEEDING THE OPEN+\n               ING QUOTE INDICATES'\n         HELP  '                   THAT THE DATA IS IN HEX.'\n         HELP  '0   SCAN2='' ''      SPECIFIES A SECOND DATA STRING TO +\n               BE LOCATED IN EACH'\n         HELP  ' OR SCAN2=X'' ''     RECORD.  SCAN OR SCAN1 MUST BE USE+\n               D WHEN SCAN2 IS USED'\n         HELP  '                   (IF YOU ONLY HAVE ONE STRING USE SCA+\n               N OR SCAN1).  THE'\n         HELP  '                   RELATIONSHIP OF SCAN1 AND SCAN2 MAY +\n               BE ''AND'' OR ''OR''.'\n         HELP  '                   IF ''AND'', THEN BOTH SCAN1 AND SCAN+\n               2 MUST BE FOUND IN'\n         HELP  '                   THE SAME RECORD BEFORE IT WILL BE PR+\n               INTED.  IF ''OR'','\n         HELP  '                   THEN IF EITHER SCAN1 OR SCAN2 IS FOU+\n               ND IN A RECORD IT'\n         HELP  '                   WILL BE PRINTED.  THIS RELATIONSHIP +\n               IS DETERMINED BY'\n         HELP  '                   THE ''SCANCTRL'' PARAMETER.'\n         HELP  '0SCANCTRL=1 OR 2   SPECIFIES THE RELATIONSHIP OF SCAN/S+\n               CAN1 AND SCAN2.'\n         HELP  '     OR            THIS PARAMETER IS ONLY VALID WHEN SC+\n               AN/SCAN1 AND'\n         HELP  ' SCANCTRL=1 AND 2  SCAN2 ARE SPECIFIED.'\n         HELP  '0SINGLE            SPECIFIES SINGLE SPACING.  THIS IS V+\n               ALID ONLY WHEN'\n         HELP  '                   ''NOHEX'' IS ALSO SPECIFIED.'\n         HELP  '080-80             FORCES SINGLE SPACING, NOHEX, SUPPRE+\n               SSES LOGICAL   '\n         HELP  '                   RECORD NUMBER, AND TRUNCATES RECORDS+\n                AT 100 CHARACTERS.'\n         HELP  '0TITLE='' ''         SPECIFIES 1 TO 80 CHARACTERS TO BE+\n                PRINTED IN THE'\n         HELP  '                   HEADINGS OF EACH PAGE.'\n         HELP  '0TRIGGER='' ''       SIMILAR TO ''SCAN'' THIS SPECIFIES+\n                A DATA STRING TO'\n         HELP  '                   LOCATE IN A RECORD BEFORE PRINTING A+\n               NY RECORDS.'\n         HELP  '0ZONE=NNN          SPECIFIES A STARTING AND ENDING POSI+\n               TION WITHIN THE'\n         HELP  '   OR              RECORDS TO FIND THE SCAN/SCAN1 VALUE+\n               .  THIS'\n         HELP  ' ZONE1=NNN         PARAMETER IS VALID ONLY WHEN SCAN/SC+\n               AN1 IS ALSO'\n         HELP  '                   SPECIFIED.'\n         HELP  '0ZONE2=NNN         SAME AS ZONE/ZONE1 FOR THE ''SCAN2''+\n                PARAMETER.'\n         HELP  '0TZONE=NNN         SAME AS ZONE/ZONE1 FOR THE ''TRIGGER+\n               '' PARAMETER.'\n         DC    X'80'               EJECT RECORD\n         HELP  '0                     USAGE NOTES'\n         HELP  '0   THE VSAM UTILITY WILL READ ANY KSDS, ESDS, OR RRDS +\n               DATASETS.'\n         HELP  ' SINCE RECORDS MAY BE OF VARIABLE LENGTH, THE LENGTH OF+\n                EACH RECORD'\n         HELP  ' IS PRINTED IN THE PREFIX AREA OF THE FIRST LINE OF EAC+\n               H RECORD.  THE'\n         HELP  ' RELATIVE RECORD NUMBER OF EACH RECORD IS ALSO PRINTED +\n               IN THE PREFIX'\n         HELP  ' OF THE FIRST LINE FOR EACH RECORD.'\n         HELP  ' NOTE: THE RECORD NUMBER IS RELATIVE TO THE BEGINNING O+\n               F THE FILE'\n         HELP  ' OR THE RECORD ESTABLISHED BY THE ''FROMKEY''.'\n         HELP  '0   THE CONTROL STATEMENTS ARE PRINTED SO YOU CAN LATER+\n                VERIFY SCAN/'\n         HELP  ' TRIGGER/SKIP OR OTHER PARAMETERS, OR AS DOCUMENTATION +\n               OF HOW THE'\n         HELP  ' PRINTED RECORDS WERE SELECTED.'\n         HELP  '0   ANY NUMBER OF CONTROL STATEMENTS MAY BE USED.  STAT+\n               EMENTS'\n         HELP  ' CANNOT BE CONTINUED.'\n         HELP  '0   DD STATEMENTS REQUIRED ARE:'\n         HELP  '0      VSAMFILE  - INPUT DATASET'\n         HELP  '0      SYSPRINT  - PRINT OUTPUT'\n         HELP  '0      SYSIN     - CONTROL STATEMENTS'\n         DC    X'FFFF'\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nVSAMCOMM DSECT\n         VSAMCOMM\n         DCBD  DSORG=PS\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     REGISTER EQUATES                                *\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   VSAMPH03\n./ ADD NAME=XLOC     0100-02291-02291-0123-00195-00195-00000-RLRICE\n*---------------------------------------------------------------------*\n* NAME:    XLOC                                                       *\n*                                                                     *\n* FUNCTION:OPTIMIZED STRING LOCATOR                                   *\n*                                                                     *\n*  OPERATION:                                                         *\n*      1. LOAD PARAMETER LIST.                                        *\n*      2. COMPUTE INTERNAL RECORD LENGTH.                             *\n*      3. SET RETURN STATUS TO $XLOCOK (X'00').                       *\n*      4. IF SCAN REQUEST, GO TO STEP 11.                             *\n*      5. TRANSLATE SUBSTRING INTO FREQUENCY OF OCCURRENCE (FOC).     *\n*      6. FIND LOWEST FREQUENCY VALUE IN TRANSLATED STRING.           *\n*      7. STORE DISPLACEMENT TO THAT CHARACTER.                       *\n*      8. FIND CORRESPONDING CHARACTER IN SUBSTRING.                  *\n*      9. BUILD LOOK-UP TABLE ON LEAST FREQUENTLY OCCURRING           *\n*         CHARACTER.                                                  *\n*     10. GO TO STEP 23.                                              *\n*     11. IF STRING LENGTH > RECORD LENGTH LEFT, GO TO STEP 22.       *\n*     12. IF REMAINING LENGTH IS GREATER THAN 256, LIMIT TO 256.      *\n*     13. EXECUTE TRT TO LOCATE CHARACTER IN RECORD.                  *\n*     14. IF NOT FOUND, GO TO STEP 21.                                *\n*     15. IF 1 BYTE SEARCH STRING, GO TO STEP 23.                     *\n*     16. SUBTRACT FOC CHARACTER DISPLACEMENT.                        *\n*     17. TEST FOR STRING MATCH.                                      *\n*     18. IF FOUND, GO TO STEP 23.                                    *\n*     19. COMPUTE RESUME ADDRESS AND LENGTH SCANNED.                  *\n*     20. COMPUTE LENGTH REMAINING TO BE SCANNED,                     *\n*           IF ZERO GO TO STEP 22                                     *\n*           OTHERWISE GO TO STEP 11.                                  *\n*     21. COMPUTE RESUME ADDRESS AND LENGTH SCANNED, GO TO STEP 11.   *\n*     22. SET STATUS TO $XLOCNF (X'FF').                              *\n*     23. RETURN TO MAINLINE.                                         *\n*                                                                     *\n*     XLOCSTAT DEFINITIONS:                                           *\n*       X'00'  INITIALIZATION COMPLETE, OR STRING LOCATED.            *\n*       X'01'  SEARCH ARGUEMENT LENGTH < 1.                           *\n*       X'02'  SEARCH ARGUEMENT LENGTH > 256.                         *\n*       X'FF'  STRING NOT LOCATED.                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nXLOC     CSECT\n         USING XLOC,R12                DEFINE BASE\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         LR    R12,R15                 INITIALIZE PERMANENT BASE\n         LR    R11,R1\n         USING XLOCLIST,R11            DEFINE PARMLIST BASE\n         LM    R4,R10,XLOCSTRA         PARAMETER VALUES\n         BCTR  R5,0                    ADJUST LENGTH FOR EXECUTES\n         MVI   XLOCSTAT,$XLOCOK        SET STATUS\n         CLI   XLOCCMD,$XLOCS          SCAN REQUEST??\n         BE    LOC0000                 YES... NEW RECORD TO SCAN\nINIT0000 DS    0H\n         LTR   R5,R5                   IS SEARCH ARG LENGTH > 1??\n         BM    ERR0010                 NO... LENGTH ERROR\n         CH    R5,H255                 SEARCH STRING TOO LONG??\n         BH    ERR0020                 YES\n         EX    R5,XLOCCOPY             COPY THE STRING\n         EX    R5,XLOCTR               TRANSLATE TO FREQUENCY COUNTS\n         LA    R2,1(R5)                NUMBER OF LOOPS\n         LA    R14,0(R5,R8)            LAST FOC VALUE ADDRESS\n         SR    R15,R15                 CLEAR REGISTER\n         IC    R15,0(R14)              INITIALIZE FOC TO LAST VALUE\nINIT0010 DS    0H\n         CLM   R15,1,0(R14)            LOWER THAN ANY OTHER??\n         BL    INIT0020                NO\n         IC    R15,0(R14)              LOWEST FOC SEEN\n         LR    R7,R14                  SAVE FOC VALUE ADDRESS\nINIT0020 DS    0H\n         BCTR  R14,0                   MINUS 1\n         BCT   R2,INIT0010             CONTINUE STRING SCAN\n         SR    R7,R8                   DISPLACMENT TO FOC BYTE\n         ST    R7,XLOCFOCD             SAVE DISPLACEMENT\n         LA    R2,0(R7,R4)             LEAST FREQUENT CHARACTER ADDRESS\n         IC    R15,0(R2)               LEAST SEEN VALUE\n         STC   R15,XLOCFOCC            SAVE IN PARM LIST\n         XC    0(256,R8),0(R8)         CLEAR WORK AREA\n         LA    R2,0(R8,R15)            CORRESPONDING BYTE FOR TRT\n         MVI   0(R2),X'01'             SET TO STOP TRT\n         B     EXIT0000                RETURN TO MAINLINE\n         EJECT\n*---------------------------------------------------------------------*\n*      SEARCH FOR STRING.                                             *\n*                                                                     *\n*      R4  = SEARCH STRING                                            *\n*      R5  = LENGTH OF STRING -1                                      *\n*      R6  = RECORD TO SCAN                                           *\n*      R7  = LENGTH OF RECORD                                         *\n*      R8  = WORK AREA                                                *\n*      R9  = HIGHEST ADDRESS STRING MAY START                         *\n*      R10 = DISPLACEMENT TO FOC CHARACTER                            *\n*---------------------------------------------------------------------*\nLOC0000  DS    0H\n         LA    R15,256                 USED FOR CHECKING MAX LENGTH\n         LA    R9,0(R6,R7)             END OF RECORD\n         SR    R9,R5                   MINUS SCAN STRING LENGTH\n         BCTR  R9,0                    HIGHEST ADDRESS STRING MAY START\n         AR    R6,R10                  PLUS FOC CHARACTER DISPLACEMENT\n         SR    R7,R10                  MINUS FOC CHARACTER DISPLACEMENT\nLOC0010  DS    0H\n         LR    R14,R7                  TOTAL LENGTH TO SCAN\n         CR    R14,R15                 TOTAL LEFT TO SCAN < 256?\n         BNH   LOC0020                 YES\n         LR    R14,R15                 LIMIT TO 256\nLOC0020  DS    0H\n         BCTR  R14,R0                  ADJUST FOR EXECUTE\n         EX    R14,XLOCTRT             SCAN FOR LOWEST FOC CHARACTER\n         BZ    LOC0040                 NOT FOUND\n*---------------------------------------------------------------------*\n*      POSSIBLE MATCH, R1 POINTS TO THE MATCHING CHARACTER:           *\n*         1. TEST FOR 1 BYTE SEARCH STRING                            *\n*         2. SUBTRACT FOC DISPLACEMENT FROM R1                        *\n*         3. TEST FOR FULL STRING                                     *\n*---------------------------------------------------------------------*\n         LTR   R5,R5                   STRING LENGTH = 1?\n         BZ    EXIT0000                YES... STRING LOCATED\n         LA    R2,0(R1)                SAVE STOP ADDRESS\n         SR    R1,R10                  MINUS FOC DISPLACEMENT\n         CR    R1,R9                   BEYOND HIGH ADDRESS??\n         BH    LOC0050                 YES\n         EX    R5,XLOCCLC              COMPARE FULL STRING\n         BE    EXIT0000                STRING LOCATED\n         SR    R2,R6                   AMOUNT SCANNED\n         LA    R6,1(R2,R6)             SCAN RESUME POINT\n*---------------------------------------------------------------------*\n*      R2 IS NUMBER OF BYTES SCANNED                                  *\n*      R6 HAS BEEN UPDATED TO RESUME POINT                            *\n*      COMPUTE LENGTH LEFT TO SCAN                                    *\n*      EXIT IF NO MORE DATA TO SCAN, OTHERWISE RESUME                 *\n*---------------------------------------------------------------------*\nLOC0030  DS    0H\n         SR    R7,R2                   MINUS AMOUNT SCANNED\n         BNH   LOC0050                 NOT LOCATED\n         BCT   R7,LOC0010              CONTINUE SCANNING RECORD\n         B     LOC0050                 NOT LOCATED\n*---------------------------------------------------------------------*\n*     STRING NOT FOUND, FULL LENGTH USED                              *\n*---------------------------------------------------------------------*\nLOC0040  DS    0H\n         LA    R6,1(R14,R6)            RESUME POINT\n         LA    R2,1(R14)               ACTUAL LENGTH SCANNED\n         B     LOC0030                 NOTHING FOUND\n*---------------------------------------------------------------------*\n*     STRING WAS NOT FOUND                                            *\n*---------------------------------------------------------------------*\nLOC0050  DS    0H\n         MVI   XLOCSTAT,$XLOCNF        SET RETURN CODE\n         B     EXIT0000                EXIT\n         EJECT\n*---------------------------------------------------------------------*\n*     SEARCH ARG LENGTH < 1                                           *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         MVI   XLOCSTAT,$XLOCER1       SET STATUS\n         B     EXIT0000                EXIT\n*---------------------------------------------------------------------*\n*     SEARCH ARG LENGTH > 256                                         *\n*---------------------------------------------------------------------*\nERR0020  DS    0H\n         MVI   XLOCSTAT,$XLOCER2       SET STATUS\nEXIT0000 DS    0H\n         LM    R14,R12,12(R13)         RESTORE REGS\n         BR    R14                     RETURN TO MAINLINE\n         DS    0D\nXLOCCOPY MVC   0(0,R8),0(R4)           COPY SEARCH STRING\nXLOCTR   TR    0(0,R8),0(R9)           TRANSLATE INTO FOC VALUES\nXLOCTRT  TRT   0(0,R6),0(R8)           SCAN FOR FOC CHARACTER\nXLOCCLC  CLC   0(0,R1),0(R4)           SEARCH STRING FOUND??\nH255     DC    H'255'                  CONSTANT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         XLOC TYPE=DSECT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./ ADD NAME=XSORT    0100-02291-02291-0123-00165-00165-00000-RLRICE\n*---------------------------------------------------------------------*\n*                                                                     *\n*   I'm not sure what the algorithm is called, but it's faster'n      *\n*   greased lightnin'.                                                *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*         EXAMPLE FORTRAN ALGORITHM:                                  *\n*          K1 = N + 1                                                 *\n*    10    K1 = INT(K1/2)                                             *\n*          IF  (K1 .EQ. 0) GOTO 99                                    *\n*          K2 = N - K1                                                *\n*          J = 1                                                      *\n*    20    I = J                                                      *\n*    30    K3 = I + K1                                                *\n*          IF (A(I) .LT. A(K3)) GOTO 40                               *\n*          EXCHANGE (A(I),A(K3))                                      *\n*          I = I - K1                                                 *\n*          IF (I .GE. 1) GOTO 30                                      *\n*    40    J = J + 1                                                  *\n*          IF (J .GT. K2) GOTO 10                                     *\n*          GOTO 20                                                    *\n*   999    STOP                                                       *\n*          END                                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nXSORT    CSECT\n         USING XSORT,R15         DECLARE ENTRY BASE REGISTER\n         ID\n         STM   R14,R12,12(R13)   STORE REGISTERS\n         USING PLIST,R1          DECLARE SORT PARM LIST DSECT\n         LH    R2,PKEYLEN        KEY LENGTH\n         AH    R2,POFFSET        PLUS OFFSET\n         CH    R2,PLRECL         TOO LONG??\n         BH    RC4               YES\n         CH    R2,H255           > 255??\n         BH    RC4               YES\n         CLC   PLRECL,HZERO      LRECL = ZERO??\n         BE    RC8               YES .. EGAD\n         CLC   PKEYLEN,HZERO     KEY LENGTH = ZERO??\n         BE    RC8               YES .. EGAD AGAIN\n         CLC   PCOUNT,HZERO      ANY RECORDS??\n         BE    RC8               YES .. AND AGAIN EGAD\n         CLC   PCOUNT,HONE       ONLY 1 RECORD??\n         BE    RC0               THIS IS EASY\n         ICM   R2,15,PDATA       DATA ADDRESS\n         BZ    RC12              REALLY EGAD\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*             SORT ALGORITHM                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nSORT0000 DS    0H\n         LH    R3,PCOUNT         NUMBER OF RECORDS\n         LH    R4,PKEYLEN        KEY LENGTH\n         BCTR  R4,0              PREPARE IT FOR EXECUTE'S\n         LH    R5,PLRECL         RECORD LENGTH\n         BCTR  R5,0              PREPARE IT FOR EXECUTE'S\n         LA    R6,1(R3)          INITIAL K1 VALUE\nSORT0010 DS    0H\n         SRL   R6,1              K1 = K1/2\n         LTR   R6,R6             ZERO??\n         BZ    RC0               ALL DONE\n         LR    R7,R3             COPY N\n         SR    R7,R6             K2 = N - K1\n         LH    R8,HONE           J = 1\nSORT0020 DS    0H\n         LR    R9,R8             I = J\nSORT0030 DS    0H\n         LA    R14,0(R9,R6)      K3 = I + K1\n         BCTR  R14,0             K3 = K3 -1\n         BCTR  R9,0              I = I - 1\n         SR    R10,R10           PREPARE FOR MULTIPLY\n         LH    R11,PLRECL        LRECL\n         MR    R10,R9            LRECL * I\n         AH    R11,POFFSET       PLUS KEY OFFSET\n         AR    R11,R2            PLUS BASE ADDRESS\n         LR    R12,R11           SAVE ADDRESS\n         SR    R10,R0            CLEAR FOR MULTIPLY\n         LH    R11,PLRECL        LRECL\n         MR    R10,R14           LRECL * K3\n         LA    R14,1(R14)        K3 = K3 + 1\n         LA    R9,1(R9)          I = I + 1\n         AH    R11,POFFSET       PLUS KEY OFFSET\n         AR    R11,R2            PLUS BASE ADDRESS\n         EX    R4,KEYCLC         COMPARE KEYS\n         BL    SORT0050          VALUE 1 < VALUE 2\n         CR    R11,R12           SAME ADDRESS??\n         BE    SORT0040          YES\n         SH    R11,POFFSET       MINUS KEY OFFSET\n         SH    R12,POFFSET       MINUS KEY OFFSET\n         EX    R5,XC1            SWAP\n         EX    R5,XC2              THE\n         EX    R5,XC1                GUYS\nSORT0040 DS    0H\n         SR    R9,R6             I = I - K1\n         CH    R9,HONE           I => 1??\n         BH    SORT0030          YES\n         BE    SORT0030          YES AGAIN\nSORT0050 DS    0H\n         LA    R8,1(R8)          J = J + 1\n         CR    R8,R7             J > K2??\n         BH    SORT0010          YES\n         B     SORT0020          OTHERWISE\nRC0      DS    0H\n         SR    R14,R14           RETURN CODE = 0\n         B     EXITEXIT\nRC4      DS    0H\n         LA    R14,4             RETURN CODE = 4\n         B     EXITEXIT\nRC8      DS    0H\n         LA    R14,8             RETURN CODE = 8\n         B     EXITEXIT\nRC12     DS    0H\n         LA    R14,12            RETURN CODE = 12\nEXITEXIT DS    0H\n         LR    R15,R14           RETURN CODE\n         L     R14,12(R13)       RESTORE R14\n         LM    R0,R12,20(R13)    RESTORE R0 - R12\n         BR    R14               RETURN TO CALLER\n*---------------------------------------------------------------------*\n*                                                                     *\n*             EXECUTED INSTRUCTIONS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nKEYCLC   CLC   0(0,R12),0(R11)   COMPARE KEYS\nXC1      XC    0(0,R11),0(R12)   EXCHANGE\nXC2      XC    0(0,R12),0(R11)   EXCHANGE\n*---------------------------------------------------------------------*\n*                                                                     *\n*             CONSTANTS                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nHZERO    DC    H'0'\nHONE     DC    H'1'\nH255     DC    H'255'\n*---------------------------------------------------------------------*\n*                                                                     *\n*             DSECTS                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\nPLIST    XSORT TYPE=DSECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*             REGISTER EQUATES                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   XSORT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT598/FILE598.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT598", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}