{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011458000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE198.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE198.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x05'", "DS1TRBAL": "b'\\x89v'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x85\\x00\\x05\\x01\\x85\\x00\\x0c\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x06\\x05\\x7f\\x01\\x06\\x05\\x7f\\x00%\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2006-02-26T00:00:00", "modifydate": "2006-02-26T00:25:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-471"}, "text": "REGULAR CBT TAPE - VERSION 471    FILE:  198\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT471.FILE198\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,152 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/26/06    00:25:23    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE198": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x06\\x05\\x7f\\x01\\x06\\x05\\x7f\\x00%\\x00:\\x00:\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2006-02-26T00:00:00", "modifydate": "2006-02-26T00:25:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "CBT-471"}, "text": "//***FILE 198 IS FROM BOB BREAK OF ST. LOUIS, MISSOURI, AND IS A    *   FILE 198\n//*           JES2 EXIT LOADER PROGRAM WHICH RUNS AS A JES2 EXIT 5  *   FILE 198\n//*           ROUTINE.  THIS PROGRAM SHOULD ASSEMBLE AND RUN FOR    *   FILE 198\n//*           ALL RELEASES OF JES2 FROM MVS/ESA RELEASE 3 THROUGH   *   FILE 198\n//*           THE OS/390 RELEASES THROUGH AT LEAST RELEASE 2.5.     *   FILE 198\n//*                                                                 *   FILE 198\n//*           THIS EXIT ALLOWS SUBSTITUTION ON THE FLY, THROUGH     *   FILE 198\n//*           A NEW JES2 COMMAND, OF A NEW VERSION OF ANY JES2      *   FILE 198\n//*           EXIT, WITHOUT HAVING TO RECYCLE JES2 OR IPL THE       *   FILE 198\n//*           MVS SYSTEM.  ALL TYPES OF JES2 EXITS ARE SUPPORTED:   *   FILE 198\n//*           JES2 ADDRESS SPACE, CSA RESIDENT, LPA RESIDENT.       *   FILE 198\n//*                                                                 *   FILE 198\n//*           A new version in member CBTEX05, with some notes in   *   FILE 198\n//*           member CBTEX05$, is for z/OS 1.7, and has just been   *   FILE 198\n//*           added.                                                *   FILE 198\n//*                                                                 *   FILE 198\n//*           THERE ARE 4 VERSIONS OF THE EXIT IN THIS PDS, ONE     *   FILE 198\n//*           IS THE ORIGINAL BY BOB BREAK, AND ONE WAS MODIFIED    *   FILE 198\n//*           BY JACK SCHUDEL OF THE UNIVERSITY OF FLORIDA.  THE    *   FILE 198\n//*           VERSION BY BOB BREAK REQUIRES THAT THE NEW LOAD       *   FILE 198\n//*           MODULE BE IN AN APF AUTHORIZED LINKLIST LIBRARY,      *   FILE 198\n//*           WHILE THE VERSION BY JACK SCHUDEL EASES THIS          *   FILE 198\n//*           RESTRICTION SOMEWHAT.  BOTH ARE PRESENTED HERE.       *   FILE 198\n//*                                                                 *   FILE 198\n//*           A NEW VERSION BY YAIR ELHARRAR OF BAR-ILAN UNIVERSIY  *   FILE 198\n//*           IN TEL-AVIV, ISRAEL, REQUIRES ONLY THAT THE NEW       *   FILE 198\n//*           VERSION RESIDE IN AN AUTHORIZED STEPLIB.              *   FILE 198\n//*                                                                 *   FILE 198\n//*               CBTEX05   -  BOB BREAK'S VERSION  (z/OS 1.7)      *   FILE 198\n//*               HASPEX05  -  BOB BREAK'S VERSION  (ORIGINAL)      *   FILE 198\n//*               LOADEXIT  -  JACK SCHUDEL'S VERSION               *   FILE 198\n//*                        (TAKEN FROM FILE 140 OF JES2 SHARE TAPE) *   FILE 198\n//*               HASPEX5   -  YAIR ELHARRAR'S VERSION              *   FILE 198\n//*                                                                 *   FILE 198\n//*      THIS HASP EXIT 5 PROCESSES THE FOLLOWING INSTALLATION      *   FILE 198\n//*      JES2 COMMANDS:                                             *   FILE 198\n//*                                                                 *   FILE 198\n//*      1. $REPEXIT - REPLACE A JES2 EXIT MODULE.  THE EXIT        *   FILE 198\n//*                    ENVIRONMENT MAY BE \"JES2\", \"SUBTASK\",        *   FILE 198\n//*                    \"USER\", OR \"FSS\".                            *   FILE 198\n//*                                                                 *   FILE 198\n//*      2. $ADDEXIT - ADD A JES2 EXIT MODULE.  THE EXIT            *   FILE 198\n//*                    ENVIRONMENT MAY BE \"JES2\", \"SUBTASK\",        *   FILE 198\n//*                    \"USER\", OR \"FSS\".                            *   FILE 198\n//*                                                                 *   FILE 198\n//*         AUTHOR                                                  *   FILE 198\n//*         ------                                                  *   FILE 198\n//*         BOB BREAK                                               *   FILE 198\n//*         ST. LOUIS, MO.                                          *   FILE 198\n//*         cb7485@momail.sbc.com                                   *   FILE 198\n//*         bbreak@prodigy.net                                      *   FILE 198\n//*         314-340-9301                                            *   FILE 198\n//*         314-845-2018                                            *   FILE 198\n//*                                                                 *   FILE 198\n//*         JACK SCHUDEL'S EMAIL:  schudel@ufl.edu                  *   FILE 198\n//*                                                                 *   FILE 198\n//*         YAIR ELHARRAR'S EMAIL:  yair@ashur.cc.biu.ac.il         *   FILE 198\n//*                                                                 *   FILE 198\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CBTDOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00I\\x00\\x98\\x13_\\x01\\x02\\x02?\\x19Q\\x00+\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1998-05-15T00:00:00", "modifydate": "2002-01-23T19:51:49", "lines": 43, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes:  This code appears also in the JES2 SHARE Mods Tape, Version 99,\n        File 140.\n\n        At last, we have a JES2 EXIT 5 routine to load a new version\n        of ANY JES2 exit, while JES2 is running.  This routine works\n        for all JES2 exits, including JES2 address space, CSA, and\n        LPA loaded exits.\n\n        This routine should assemble and work with all JES2 releases\n        from MVS/ESA Release 3 through OS/390 releases of JES2.  For\n        ESA 3 and ESA 4 releases, there may have to be some slight\n        adjustment of the source code necessary, in order to assemble\n        cleanly, because of some changes in the format of the $MODULE\n        macro, and perhaps, if you use the IEV90 assembler instead of\n        ASMA90 (the High Level Assembler).  (IEV90 doesn't accept\n        uncommented blank lines.  Put an asterisk in column 1.)\n\n        I've included Bob Break's original exit code, which is called\n        HASPEX05, and almost the same code from the JES2 SHARE Tape,\n        that was modified slightly by Jack Schudel.  I believe that\n        Bob Break requires that the new load module be in an authorized\n        link list library, whereas Jack Schudel wanted to drop that\n        restriction.  Compare and check the 2 versions yourself.  I've\n        included both of them here.  Otherwise, everything on this pds\n        is from Bob Break.  (except my few notes - Sam Golob 05/98)\n\n        Now included is a third version of this exit from Yair\n        Elharrar which allows the loading of a new exit version from\n        an authorized STEPLIB.  This version is member HASPEX5.\n\n        Modification: Yair Elharrar, yair@ashur.cc.biu.ac.il\n        This version of the Dynamic Exit Loader will read the\n        modules from the JES2 STEPLIB, rather than the LINKLIST.\n        The STEPLIB will be opened and closed for each $REPEXIT\n        or $ADDEXIT.  Tested on OS/390 2.4 JES2.\n\nBob Break                            Sam Golob\nSt. Louis, Mo.                       P.O. Box 906\ncb7485@momail.sbc.com                Tallman, NY 10982-0906\nbbreak@prodigy.net                   845-352-1706\n314-340-9301                         sbgolob@attglobal.net\n314-845-2018                         sbgolob@aol.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CBTEX05": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x06\\x05_\\x01\\x06\\x05_\\x137\\x02\\xe4\\x02\\xe4\\x00\\x00\\xc3\\xc2\\xf7\\xf4\\xf8\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-24T00:00:00", "modifydate": "2006-02-24T13:37:18", "lines": 740, "newlines": 740, "modlines": 0, "user": "CB7485"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "CBTEX05$": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x06\\x05\\x7f\\x01\\x06\\x05\\x7f\\x00\\x18\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-26T00:00:00", "modifydate": "2006-02-26T00:18:47", "lines": 23, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "Hi Sam (Knutson),\n\nI hope you are doing well and look forward to seeing you in\nSeattle.  I have had to make some revisions to my JES2 dynamic\nexit replacement code and was wondering if you could get it out\non the CBT tape for me.  Unfortuately, I don't think the changes\nwill work with prior 1.7 releases.  It's the PDSE JES target\nlibrary that screws things up.  So I don't know how you and Sam\nGolob want to handle this.  I modified the copy found under the\nJES2 section (File 140).  There is also a File 198 out there.  I\ncan't believe IBM did this.  I've been asking them for years to\npick up support of this and they still have not.  We will be\nhaving a closed meeting Monday night about this (and a few other\nthings).  The failure is intermittent and I first found out about\nit from a guy in Germany last week.  Please let me know if you\nhave any questions.\n\nThanks,\nBob Break\n\n <<CBTEX05>>\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HASPEX05": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x975?\\x00\\x98\\x13\\x8f\\x10Y\\x02\\xe9\\x02\\xda\\x00\\x00\\xc3\\xc2\\xf7\\xf4\\xf8\\xf5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1997-12-19T00:00:00", "modifydate": "1998-05-18T10:59:00", "lines": 745, "newlines": 730, "modlines": 0, "user": "CB7485"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "HASPEX5": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98$\\x9f\\x00\\x98$\\x9f\\x00\\x02\\x03\\x0c\\x03\\x0c\\x00\\x00\\xc5\\xd3\\xc8\\xc1\\xd9\\xd9\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-09-06T00:00:00", "modifydate": "1998-09-06T00:02:00", "lines": 780, "newlines": 780, "modlines": 0, "user": "ELHARRA"}, "text": "*********************************************************************\n****This is a modification of the original exit code - see below*****\n*                                                                   *\n*                        HASP EXIT 05                               *\n*                                                                   *\n*     This exit processes the $REPEXIT and $ADDEXIT JES2 commands.  *\n*                                                                   *\n*     > $REPEXIT - Replace a JES2 exit module.  Command syntax is   *\n*                  \"$REPEXIT,modname\".  The following rules and     *\n*                  restrictions apply to the use of $REPEXIT:       *\n*               1. The exit module to be replaced must be a JES2    *\n*                  module.  The exit environment may be \"JES2\",     *\n*                  \"SUBTASK\", \"USER\", or \"FSS\".                     *\n*               2. The exit module must have been previously loaded *\n*                  by a LOADMOD JES2PARM statement, or HASPINIT     *\n*                  during the last JES2 initialization, or by a     *\n*                  previous $REPEXIT command.                       *\n*               3. The routine names and number of routines that    *\n*                  are associated with the exit cannot be changed - *\n*                  $REPEXIT will ignore new/changed routine names.  *\n*                  If either of these needs to be changed, use the  *\n*                  $ADDEXIT command to add a new exit load module.  *\n*               4. If the original module resides in the JES2       *\n*                  private area, the new copy will be loaded into   *\n*                  JES2 private.  If the original module does not   *\n*                  reside in the JES2 private area, the new copy    *\n*                  will be loaded into CSA.                         *\n*               5. The new copy of the module must be found in      *\n*                  the JES2 STEPLIB libraries.                      *\n*     > $ADDEXIT - Add a JES2 exit module.  Command syntax is       *\n*                  \"$ADDEXIT,modname,exit#\".  Exit# can range from  *\n*                  1 to 255 and must be specified.                  *\n*                  The following rules and restrictions apply to    *\n*                  the use of $ADDEXIT:                             *\n*               1. The exit module to be added must be a JES2       *\n*                  module.  The exit environment may be \"JES2\",     *\n*                  \"SUBTASK\", \"USER\", or \"FSS\".                     *\n*               2. The exit must not be currently defined to JES2   *\n*                  or a new copy will not be loaded and defined.    *\n*               3. The new exit module will be loaded into either   *\n*                  JES2 private or CSA, depending on the exit       *\n*                  environment.                                     *\n*               4. The copy of the exit module to be added must be  *\n*                  found in the JES2 STEPLIB libraries.             *\n*               5. The newly added exit module and routines must be *\n*                  defined in JES2PARM before the next time JES2 is *\n*                  restarted.  If this is not done, an exit module  *\n*                  that was loaded into JES2 private will be lost   *\n*                  on a subsequent restart.                         *\n*                                                                   *\n*     Entry point: HASPEX05                                         *\n*                                                                   *\n*     Input registers:                                              *\n*        R0-4   N/A                                                 *\n*        R5     Pointer to current operand address                  *\n*        R6     Increment value of 4                                *\n*        R7     Pointer to address of last operand                  *\n*        R8-10  N/A                                                 *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    PCE address                                         *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0     Unchanged or $CRET message length                   *\n*        R1-14  Unchanged                                           *\n*        R15    Return code                                         *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-8   Work registers                                      *\n*        R9     WORKAREA address                                    *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    PCE address                                         *\n*        R14-15 Work and linkage registers                          *\n*                                                                   *\n*                                                                   *\n*     Author: Bob Break                                             *\n*             St. Louis, Mo.                                        *\n*             314-340-9301                                          *\n*             314-845-2018                                          *\n*     IBMMAIL - USSWB2ZB                                            *\n*     EMAIL   - CB7485@MOMAIL.SBC.COM                               *\n*               bbreak@swbell.net                                   *\n*                                                                   *\n* Modification: Yair Elharrar, yair@ashur.cc.biu.ac.il              *\n*       This version of the Dynamic Exit Loader will read the       *\n*       modules from the JES2 STEPLIB, rather than the LINKLIST.    *\n*       The STEPLIB will be opened and closed for each $REPEXIT     *\n*       or $ADDEXIT.                                                *\n*       Tested on OS/390 2.4 JES2.                                  *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nJES2XLDR $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               PDS,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CAT,                                                   X\n               $COMWORK,                                               X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JOE,                                                   X\n               $JQE,                                                   X\n               $LMT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $PIT,                                                   X\n               $PSV,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XRT\n\nHASPEX05 $ENTRY BASE=R12           Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\nEXIT000 $SAVE  NAME=EXIT05         Save caller's registers\n         LR    R12,R15             Set base register\n\n*********************************************************************\n*                                                                   *\n*        Obtain a module workarea.                                  *\n*                                                                   *\n*********************************************************************\n\n         LA    R1,EXIT05WL         Get workarea length\n         LA    R1,3(,R1)           Round up to word boundary\n         SRL   R1,2                Convert to number of words\n         LA    R1,1(,R1)           Add one for identifier\n        $GETWORK WORDS=(R1),USE=EX05\n         LA    R1,4(,R1)           Point past identifier\n         LR    R9,R1               Set workarea address\n         LR    R14,R1              Set move to address\n         LA    R15,EXIT05WL        Set move to length\n         XR    R1,R1               Set move from length and pad\n         MVCL  R14,R0              Clear workarea\n         USING EXIT05W,R9\n\n*********************************************************************\n*                                                                   *\n*        Determine if this is a the $REPEXIT or $ADDEXIT command.   *\n*                                                                   *\n*********************************************************************\n\nEXIT100  LA    R1,COMVERB            Get command verb address\n         CLC   0(7,R1),=C'REPEXIT'   $REPEXIT command\n         BE    EXIT200               Yes - branch, process $REPEXIT\n         CLC   0(7,R1),=C'ADDEXIT'   $ADDEXIT command\n         BE    EXIT300               Yes - branch, process $ADDEXIT\n         XR    R15,R15               Set return code\n         B     RETURN                Branch - return\n\n*********************************************************************\n*                                                                   *\n*        Process the $REPEXIT command.                              *\n*                                                                   *\n*********************************************************************\n\nEXIT200  LA    R1,COMVERB            Get command verb address\n         MVC   EXITMODN(8),$BLANKS   Save modname\n         MVC   EXITMODN(8),8(R1)     *\n\n*********************************************************************\n*                                                                   *\n*        Check if the exit module is currently defined to JES2.     *\n*                                                                   *\n*********************************************************************\n\nEXIT210  ICM   R8,15,$LMT1           Get LMT address\n         BZ    EXIT213               Branch - no LMT chain\n         USING LMT,R8\nEXIT211  CLC   LMTMODNM,EXITMODN     Module name match?\n         BNE   EXIT212               No - branch, continue\n         TM    LMTFLG1,LMT1INVD      LMT invalid?\n         BZ    EXIT220               No - branch, continue\nEXIT212  ICM   R8,15,LMTCHAIN        Get next LMT entry\n         BNZ   EXIT211               Loop back to check next LMT entry\nEXIT213  MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG1L),MSG1ERR1  Set fixed message text\n         B     EXIT250               Branch - continue\n\n*********************************************************************\n*                                                                   *\n*        Open the JES2 STEPLIB, and invoke BLDL to check if the     *\n*        requested module is available. If so, get storage to       *\n*        perform a directed load.                                   *\n*                                                                   *\n*********************************************************************\n\n         USING PDSBLDL,R2\n         USING PDS2,R3\nEXIT220  LA    R2,$GENWORK           Use $GENWORK as BLDL parm area\n         MVC   PDSBLDLN,$H1          Set number of BLDL entries\n         MVC   PDSBLDLL,=AL2(PDS2BLEN)  Set BLDL entry length\n         LA    R3,PDSBLDLE           Point to the BLDL entry\n         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  Clear BLDL workarea\n         MVC   PDS2NAME,EXITMODN     Set module name for BLDL\n        $GETMAIN R,LV=E05DCBL,LOC=BELOW Obtain storage for STEPLIB DCB\n         ST    R1,E05DCBD            Save DCB address\n         L     R5,E05DCBD\n         MVC   0(E05DCBL,R5),E05DCBF Build basic DCB parameters\n         OPEN  ((R5),INPUT),MODE=31  Open the STEPLIB DCB\n*\n         L     R1,E05DCBD\n         BLDL  (R1),(R2)             Locate module\n         DROP  R2                    PDSBLDL\n         LTR   R15,R15               Module located in LINKLIST?\n         BNZ   EXIT221               No - branch, error\n*        TM    PDS2LIBF,PDS2LLNK     Module reside in linklist?\n         B     EXIT222               In this version, branch anyway\nEXIT221  MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG1L),MSG1ERR2  SET FIXED MESSAGE TEXT\n         L     R5,E05DCBD            Get STEPLIB DCB address\n         CLOSE ((R5)),MODE=31        Close the STEPLIB\n        $FREMAIN R,LV=E05DCBL,A=(R5) Free the DCB storage\n         B     EXIT250               Branch - continue\nEXIT222  XR    R0,R0                 Get module length\n         ICM   R0,7,PDS2STOR           from the pds directory\n         XR    R2,R2                 Assume SP=0 (JES2 private module)\n         TM    LMTFLG1,LMT1PVT       Module loaded in JES2 private?\n         BO    EXIT223               Yes - branch, continue\n         ICM   R2,1,SP241            Set SP=241\nEXIT223  TM    PDS2FTB2,PDSLRMOD     Module RMODE31?\n         BO    EXIT224               Yes - branch, continue\n         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW\n         B     EXIT225               Branch - continue\nEXIT224  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY\nEXIT225  LR    R6,R1                 Set storage address for LOAD\n         LR    R14,R1                Set move to address\n         XR    R15,R15               Set move to length\n         ICM   R15,7,PDS2STOR        *\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear module area\n\n*********************************************************************\n*                                                                   *\n*        Perform the directed load of the new module.               *\n*                                                                   *\n*********************************************************************\n\nEXIT230  LA    R4,EXITMODN           Set modname address\n         L     R5,E05DCBD            Get STEPLIB DCB address\n         IPK   0(0)                  Get current psw key\n         SPKA  0(0)                  Set psw key zero\n         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT231\nEXIT231  SPKA  0(R2)                 Reset psw key\n         LTR   R15,R15               Load successful?\n         BZ    EXIT235               Yes - branch, continue\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG1L),MSG1ERR3  Set fixed message text\n         XR    R0,R0                 Get module length\n         ICM   R0,7,PDS2STOR           from the pds directory\n         XR    R2,R2                 Assume SP=0 (JES2 private module)\n         TM    LMTFLG1,LMT1PVT       Module loaded in JES private?\n         BO    EXIT232               Yes - branch, continue\n         ICM   R2,1,SP241            Set SP=241\nEXIT232  FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0\n         L     R5,E05DCBD            Get STEPLIB DCB address\n         CLOSE ((R5)),MODE=31        Close the STEPLIB\n        $FREMAIN R,LV=E05DCBL,A=(R5) Free the DCB storage\n         B     EXIT250               Branch, continue\n\n*********************************************************************\n*                                                                   *\n*        Replace the module information in the LMT.                 *\n*                                                                   *\n*********************************************************************\n\nEXIT235  ST    R6,LMTMITAD           Set module address in LMT\n         L     R5,E05DCBD            Get STEPLIB DCB address\n         CLOSE ((R5)),MODE=31        Close the STEPLIB\n         TM    PDS2FTB2,PDSLRMOD     Module RMODE31?\n         BO    EXIT236               Yes - branch, continue\n         OI    LMTFLG2,LMT2RM24      Set RMODE24 flag on\n         NI    LMTFLG2,255-LMT2RM31  Turn RMODE31 flag off\n         B     EXIT237               Branch - continue\nEXIT236  OI    LMTFLG2,LMT2RM31      Set RMODE31 flag on\n         NI    LMTFLG2,255-LMT2RM24  Turn RMODE24 flag off\nEXIT237  TM    LMTFLG1,LMT1PVT       Module loaded in JES private?\n         BO    EXIT240               Yes - branch, continue\n         MVI   LMTSUBPL,X'F1'        Set SP=241\n         MVC   LMTMODLN,PDS2STOR     Set module length\n         OI    LMTFLG1,LMT1CMN       Set load flags\n         DROP  R3                    PDS2\n\n*********************************************************************\n*                                                                   *\n*        Replace the module information in the XRT.                 *\n*                                                                   *\n*********************************************************************\n\n         USING XIT,R1\n         USING XRT,R3\nEXIT240  LA    R0,XIT#PTS            Get maximum # XIT entries\n         L     R1,$XITADDR           Get XIT chain address\nEXIT241  ICM   R3,15,XITXRTAD        Get XRT address\n         BZ    EXIT246               Branch - no XRT, check next XIT\n         XR    R15,R15               Get number of routines\n         IC    R15,XIT#RTNS            associated with this exit point\nEXIT242  L     R14,LMTMITAD          Get MIT address\n         L     R14,MITENTAD-MIT(,R14)  Get MITETBL address\n         USING MTE,R14\nEXIT243  CLI   MTENAME,X'FF'         Last MTE?\n         BE    EXIT245               Yes - branch, check next XRT\n         CLC   XRTRNAME,MTENAME      XRT name match MIT name?\n         BE    EXIT244               Yes - branch, continue\n         LA    R14,MTELEN(,R14)      Bump to next MITETBL entry\n         B     EXIT243               Loop back for next MITETBL entry\nEXIT244  MVC   XRTRADDR,MTEADDR      Set routine addr in XRT\nEXIT245  LA    R3,XRTLNGTH(,R3)      Bump to next XRT entry\n         BCT   R15,EXIT242           Loop back for next XRT entry\n         DROP  R3,R8,R14             XRT, LMT, MTE\nEXIT246  LA    R1,XITLNGTH(,R1)      Bump to next XIT entry\n         BCT   R0,EXIT241            Loop back for next XIT entry\n         DROP  R1                    XIT\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG1L),MSG1OK  Set fixed message text\n\n*********************************************************************\n*                                                                   *\n*        Set the message length and return.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT250  LA    R0,8+MSG1L            Get message length\n        $STORE (R0)                    and set in return R0\n         MVC   RETCODE,=F'16'        Set return code\n         B     RETURN                Branch - return\n\n*********************************************************************\n*                                                                   *\n*        Process the $ADDEXIT command.                              *\n*                                                                   *\n*********************************************************************\n\nEXIT300  LA    R3,COMVERB            Get command verb address\n         LA    R3,8(,R3)             Point to module name\n         LR    R15,R3                *\n         LA    R0,9                  Set max. modname check length\nEXIT301  CLI   0(R15),C','           \",\" delimiter found?\n         BE    EXIT302               Yes - branch, continue\n         LA    R15,1(,R15)           Bump to next modname position\n         BCT   R0,EXIT301            Loop back for next character\n         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR1  Set fixed message text\n         B     EXIT390               Branch - continue\nEXIT302  LR    R14,R15               Calculate exit modname length\n         SLR   R14,R3                *\n         BCTR  R14,0                 Minus 1 for execute\n         MVC   EXITMODN(8),$BLANKS   Blank init modname\n         MVC   EXITMODN(0),0(R3)     Executed instruction\n         EX    R14,*-6               Save modname\n         LA    R15,1(,R15)           Point to exit number\n         LR    R3,R15                *\n         LA    R0,4                  Set max. exit # check length\nEXIT303  CLI   0(R15),C','           \",\" delimiter found?\n         BE    EXIT304               Yes - branch, continue\n         CLI   0(R15),C' '           \" \" delimiter found?\n         BE    EXIT304               Yes - branch, continue\n         LA    R15,1(,R15)           Bump to next exit nbr position\n         BCT   R0,EXIT303            Loop back for next character\nEXIT304  LR    R14,R15               Calculate exit number length\n         SLR   R14,R3                *\n         BCTR  R14,0                 Minus 1 for execute\n         TRT   0(0,R3),TRTABLE       Executed instruction\n         EX    R14,*-6               Exit number valid?\n         BZ    EXIT305               Yes - branch, continue\n         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR2  Set fixed message text\n         B     EXIT390               Branch - continue\nEXIT305  PACK  WORKDBL,0(0,R3)       Executed instruction\n         EX    R14,*-6               Convert exit number to decimal\n         CVB   R1,WORKDBL            Convert exit number to binary\n         STCM  R1,1,EXITNBR          Save exit number\n         C     R1,$F1                Exit number less than 1?\n         BL    EXIT306               Yes - branch, error\n         C     R1,$F255              Exit number greater than 255?\n         BNH   EXIT310               No - branch, continue\nEXIT306  MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR3  Set fixed message text\n         B     EXIT390               Branch - continue\n\n*********************************************************************\n*                                                                   *\n*        Check if the exit module is currently defined to JES2.     *\n*                                                                   *\n*********************************************************************\n\nEXIT310  ICM   R8,15,$LMT1           Get LMT address\n         BZ    EXIT313               Branch - no LMT chain\n         USING LMT,R8\nEXIT311  CLC   LMTMODNM,EXITMODN     Module name match?\n         BNE   EXIT312               No - branch, continue\n         TM    LMTFLG1,LMT1INVD      LMT invalid?\n         BO    EXIT312               Yes - branch, continue\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR4  Set fixed message text\n         B     EXIT390               Branch - continue\nEXIT312  ICM   R8,15,LMTCHAIN        Get next LMT entry\n         BNZ   EXIT311               Loop back to check next LMT entry\nEXIT313  XR    R14,R14               Get new exit number\n         ICM   R14,1,EXITNBR         *\n         LA    R1,XITLNGTH           Get XIT length\n         XR    R0,R0                 Calculate XIT index\n         MR    R0,R14                *\n         L     R15,$XITADDR          Get XIT chain address\n         ALR   R15,R1                Calculate XIT address\n         ST    R15,EXITXIT           Save XIT address\n         USING XIT,R15\n         TM    XITFLAGS,XITCMN       Must exit reside in CSA/LPA?\n         BZ    EXIT314               No - branch, continue\n         OI    WORKFLAG,EXITCSA      Set exit resides in CSA flag\n         B     EXIT315               Branch - continue\nEXIT314  OI    WORKFLAG,EXITPVT      Set exit resides in pvt flag\n         DROP  R15                   XIT\n\n*********************************************************************\n*                                                                   *\n*        The exit module is not currently defined to JES2, so       *\n*        acquire an LMT for the module.                             *\n*                                                                   *\n*********************************************************************\n\nEXIT315  XR    R2,R2                 Assume SP=0 (JES2 private module)\n         TM    WORKFLAG,EXITPVT      Module loaded in JES2 private?\n         BO    EXIT316               Yes - branch, continue\n         ICM   R2,1,SP241            Set SP=241\nEXIT316  LA    R0,LMTLEN+$CSBPRFX    Get LMT+prefix length\n         GETMAIN RC,LV=(R0),SP=(R2),LOC=ANY\n         LR    R8,R1                 Save new LMT prefix address\n         LR    R14,R1                Set move to address\n         LA    R15,LMTLEN+$CSBPRFX   Set move to length\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear LMT and prefix\n         MVC   $CSBID(4,R8),=C'LMT '  Set eyecatcher in prefix\n         STCM  R2,1,$CSBSPLN(R8)     Set storage subpool in prefix\n         LA    R0,LMTLEN+$CSBPRFX    Set LMT+prefix length in prefix\n         STCM  R0,7,$CSBSPLN+1(R8)   *\n         LA    R8,$CSBPRFX(,R8)      Point to actual LMT\n         ST    R8,EXITLMTA           Save new LMT address\n\n*********************************************************************\n*                                                                   *\n*        Open the JES2 STEPLIB, and invoke BLDL to check if the     *\n*        requested module is available. If so, get storage to       *\n*        perform a directed load.                                   *\n*                                                                   *\n*********************************************************************\n\n         USING PDSBLDL,R2\n         USING PDS2,R3\nEXIT320  LA    R2,$GENWORK           Use $GENWORK as BLDL parm area\n         MVC   PDSBLDLN,$H1          Set number of BLDL entries\n         MVC   PDSBLDLL,=AL2(PDS2BLEN)  Set BLDL entry length\n         LA    R3,PDSBLDLE           Point to the BLDL entry\n         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  Clear BLDL workarea\n         MVC   PDS2NAME,EXITMODN     Set module name for BLDL\n        $GETMAIN R,LV=E05DCBL,LOC=BELOW Obtain storage for STEPLIB DCB\n         ST    R1,E05DCBD            Save DCB address\n         L     R5,E05DCBD\n         MVC   0(E05DCBL,R5),E05DCBF Build basic DCB parameters\n         OPEN  ((R5),INPUT),MODE=31  Open the STEPLIB DCB\n*\n         BLDL  (R5),(R2)             LOCATE MODULE\n         DROP  R2                    PDSBLDL\n         LTR   R15,R15               Module located in LINKLIST?\n         BNZ   EXIT321               No - branch, error\n*        TM    PDS2LIBF,PDS2LLNK     Module reside in linklist?\n         B     EXIT322               In this version, branch anyway\nEXIT321  MVC   COMMAND(8),EXITMODN  /Set modname in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR5  Set fixed message text\n         L     R5,E05DCBD            Get STEPLIB DCB address\n         CLOSE ((R5)),MODE=31        Close the STEPLIB\n        $FREMAIN R,LV=E05DCBL,A=(R5) Free the DCB storage\n         B     EXIT333               Branch - continue\nEXIT322  XR    R0,R0                 Get module length\n         ICM   R0,7,PDS2STOR           from the pds directory\n         XR    R2,R2                 Assume SP=0 (JES2 private module)\n         TM    WORKFLAG,EXITPVT      Module loaded in JES2 private?\n         BO    EXIT323               Yes - branch, continue\n         ICM   R2,1,SP241            Set SP=241\nEXIT323  TM    PDS2FTB2,PDSLRMOD     Module RMODE31?\n         BO    EXIT324               Yes - branch, continue\n         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW\n         B     EXIT325               Branch - continue\nEXIT324  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY\nEXIT325  LR    R6,R1                 Set storage address for LOAD\n         LR    R14,R1                Set move to address\n         XR    R15,R15               Set move to length\n         ICM   R15,7,PDS2STOR        *\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear module area\n\n*********************************************************************\n*                                                                   *\n*        Perform the directed load of the new module.               *\n*                                                                   *\n*********************************************************************\n\nEXIT330  LA    R4,EXITMODN           Set modname address\n         L     R5,E05DCBD            Get STEPLIB DCB address\n         IPK   0(0)                  Get current psw key\n         SPKA  0(0)                  Set psw key zero\n         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT331\nEXIT331  SPKA  0(R2)                 Reset psw key\n         LTR   R15,R15               Load successful?\n         BZ    EXIT335               Yes - branch, continue\n         L     R5,E05DCBD            Get STEPLIB DCB address\n         CLOSE ((R5)),MODE=31        Close the STEPLIB\n        $FREMAIN R,LV=E05DCBL,A=(R5) Free the DCB storage\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR6  Set fixed message text\n         XR    R0,R0                 Get module length\n         ICM   R0,7,PDS2STOR           from the pds directory\n         XR    R2,R2                 Assume SP=0 (JES2 private module)\n         TM    WORKFLAG,EXITPVT      Module loaded in JES private?\n         BO    EXIT332               Yes - branch, continue\n         ICM   R2,1,SP241            Set SP=241\nEXIT332  FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0\nEXIT333  L     R8,EXITLMTA           Get new LMT address\n         LA    R15,$CSBPRFX          Get prefix length\n         SLR   R8,R15                Point to start of prefix\n         XR    R2,R2                 Get LMT subpool\n         ICM   R2,1,$CSBSPLN(R8)     *\n         XR    R0,R0                 Get LMT+prefix length\n         ICM   R0,7,$CSBSPLN+1(R8)   *\n         FREEMAIN RU,A=(R8),LV=(R0),SP=(R2)\n         B     EXIT390               Branch, continue\n\n*********************************************************************\n*                                                                   *\n*        Initialize the new LMT.                                    *\n*                                                                   *\n*********************************************************************\n\nEXIT335  L     R8,EXITLMTA           Get new LMT address\n         L     R5,E05DCBD\n         CLOSE ((R5)),MODE=31\n        $FREMAIN R,LV=E05DCBL,A=(R5)\n         ST    R6,LMTMITAD           Set module address in LMT\n         MVC   LMTMODNM,EXITMODN     Set module name in LMT\n         TM    PDS2FTB2,PDSLRMOD     Module RMODE31?\n         BO    EXIT336               Yes - branch, continue\n         OI    LMTFLG2,LMT2RM24      Set RMODE24 flag on\n         NI    LMTFLG2,255-LMT2RM31  Turn RMODE31 flag off\n         B     EXIT337               Branch - continue\nEXIT336  OI    LMTFLG2,LMT2RM31      Set RMODE31 flag on\n         NI    LMTFLG2,255-LMT2RM24  Turn RMODE24 flag off\nEXIT337  TM    WORKFLAG,EXITPVT      Module loaded in JES private?\n         BO    EXIT338               Yes - branch, continue\n         OI    LMTFLG1,LMT1CMN       Set module loaded in common flag\n         MVI   LMTSUBPL,X'F1'        Set SP=241\n         B     EXIT339               Branch - continue\nEXIT338  OI    LMTFLG1,LMT1PVT       Set module loaded in private flag\nEXIT339  MVC   LMTMODLN,PDS2STOR     Set module length\n         OI    LMTFLG1,LMT1BSPL      Set bypass SPLEVEL check flag\n         DROP  R3                    PDS2\n\n*********************************************************************\n*                                                                   *\n*        Chain the new LMT.                                         *\n*                                                                   *\n*********************************************************************\n\nEXIT340  TM    WORKFLAG,EXITCSA      Module loaded in common?\n         BO    EXIT343               Yes - branch, continue\n         ICM   R15,15,$LMTPBOT       Get last private entry addrss\n         BNZ   EXIT341               Branch - continue\n         ST    R8,$LMT1              Reset first private entry address\n         B     EXIT342               Branch - continue\nEXIT341  ST    R8,LMTCHAIN-LMT(,R15)  Reset chain in old last entry\nEXIT342  MVC   LMTCHAIN,$LMT1C       Reset chain in new last entry\n         ST    R8,$LMTPBOT           Reset last private entry address\n         B     EXIT350               Branch - continue\nEXIT343  ICM   R15,15,$LMT1C         Get first CSA entry address\n         BNZ   EXIT345               Branch - continue\n         ICM   R1,15,$LMTPBOT        Get last private entry addrss\n         BZ    EXIT344               Branch - no private entries\n         ST    R8,LMTCHAIN-LMT(,R1)  Reset chain in last private entry\nEXIT344  ST    R8,$LMT1C             Reset first CSA entry address\n         B     EXIT350               Branch - continue\nEXIT345  CLC   LMTCHAIN-LMT(4,R15),$ZEROS  End of CSA chain?\n         BE    EXIT346               Branch - end of CSA chain\n         L     R15,LMTCHAIN-LMT(,R15)  Get next CSA entry address\n         B     EXIT345               Loop back to check next entry\nEXIT346  ST    R8,LMTCHAIN-LMT(,R15)  Reset chain in old last entry\n\n*********************************************************************\n*                                                                   *\n*        Obtain and initialize an XRT for each new exit routine     *\n*        that is defined in the new exit module.                    *\n*                                                                   *\n*********************************************************************\n\nEXIT350  LA    R0,255*WORKXRTL       Get XRT workarea size\n         GETMAIN RC,LV=(R0),LOC=ANY\n         ST    R1,WORKXRTA           Save XRT workarea address\n         LR    R14,R1                Set move to address\n         LA    R15,255*WORKXRTL      Set move to length\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear XRT workarea\n         L     R3,EXITXIT            Get exit XIT address\n         USING XIT,R3\n         L     R14,LMTMITAD          Get MIT address\n         L     R14,MITENTAD-MIT(,R14)  Get MITETBL address\n         USING MTE,R14\n         LA    R14,MTELEN(,R14)      Bump past MITETBL eyecatcher MTE\n         L     R15,WORKXRTA          Get XRT workarea address\n         USING WORKXRTE,R15\n         XR    R7,R7                 Init new exit routine count\nEXIT351  CLI   MTENAME,X'FF'         Last MTE?\n         BE    EXIT352               Yes - branch, continue\n         LA    R7,1(,R7)             Increment exit routine count\n         MVC   EXITRTNN,MTENAME      Save exit routine name\n         MVC   EXITRTNA,MTEADDR      Save exit routine address\n         LA    R14,MTELEN(,R14)      Bump to next MITETBL entry\n         LA    R15,WORKXRTL(,R15)    Bump to next XRT workarea entry\n         B     EXIT351               Loop back for next MITETBL entry\n         DROP  R14,R15               MTE, WORKXRTE\nEXIT352  LTR   R7,R7                 Any new exit routines defined?\n         BNZ   EXIT353               Yes - branch, continue\n         OI    LMTFLG1,LMT1INVD      Invalidate the new LMT\n         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR7  Set fixed message text\n         LA    R0,255*WORKXRTL       Get XRT workarea size\n         L     R1,WORKXRTA           Get XRT workarea address\n         FREEMAIN RU,A=(R1),LV=(R0)\n         B     EXIT390               Branch - continue\nEXIT353  STCM  R7,1,WORKXRT#         Save number of new XRTs\n         XR    R2,R2                 Get # routines currently defined\n         ICM   R2,1,XIT#RTNS         *\n         ALR   R7,R2                 Calculate number of XRTs (new+old)\n         LA    R15,XRTLNGTH          Get XRT length\n         XR    R6,R6                 Calculate total XRTs length\n         MR    R6,R15                *\n         GETMAIN RC,LV=(R7),SP=241,LOC=ANY\n         ST    R1,NEWXRTSA           Save new XRT area address\n         LR    R14,R1                Set move to address\n         LR    R15,R7                Set move to length\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear area\n         L     R1,NEWXRTSA           Get new XRT area address\n         USING XRT,R1\n         LTR   R2,R2                 Any routines currently defined?\n         BZ    EXIT355               No - branch, define new routines\n         L     R15,XITXRTAD          Get first old XRT address\nEXIT354  MVC   0(XRTLNGTH,R1),0(R15)  Move old XRT to new area\n         LA    R1,XRTLNGTH(,R1)      Bump to next new area slot\n         LA    R15,XRTLNGTH(,R15)    Bump to next old XRT\n         BCT   R2,EXIT354            Loop back to move next XRT\nEXIT355  XR    R0,R0                 Get # new exit routines (XRTs)\n         ICM   R0,1,WORKXRT#         *\n         L     R15,WORKXRTA          Get XRT workarea address\n         USING WORKXRTE,R15\nEXIT356  MVC   XRTRNAME,EXITRTNN     Set new exit routine name\n         MVC   XRTRADDR,EXITRTNA     Set new exit routine address\n         LA    R1,XRTLNGTH(,R1)      Bump to next new area slot\n         LA    R15,WORKXRTL(,R15)    Bump to next XRT workarea entry\n         BCT   R0,EXIT356            Loop back to init next new XRT\n         DROP  R1,R15                XRT, WORKXRTE\n         LA    R0,255*WORKXRTL       Get XRT workarea size\n         L     R1,WORKXRTA           Get XRT workarea address\n         FREEMAIN RU,A=(R1),LV=(R0)\n\n*********************************************************************\n*                                                                   *\n*        Finish initializing the XIT for the new exit.              *\n*                                                                   *\n*********************************************************************\n\nEXIT360  OI    XITFLAGS,XITDENBL+XITBSPL  Set exit defined, enabled,\n*                                           and bypass SPLEVEL check\n         NI    XITFLAGS,255-XITTRACE  Turn exit tracing off\n         MVC   XITXRTAD,NEWXRTSA     Set first exit XRT address\n         XR    R0,R0                 Get # routines currently defined\n         ICM   R0,1,XIT#RTNS         *\n         XR    R1,R1                 Get # new routines\n         ICM   R1,1,WORKXRT#         *\n         ALR   R0,R1                 Calculate total # exit routines\n         STCM  R0,1,XIT#RTNS         Set total # exit routines\n         L     R14,LMTMITAD          Get MIT address\n         MVC   XITENVIR,MITENVIR-MIT(R14)  Set environment byte\n         DROP  R3,R8                 XIT, LMT\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG2L),MSG2OK  Set fixed message text\n\n*********************************************************************\n*                                                                   *\n*        Set the message length and return.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT390  LA    R0,8+MSG2L            Get message length\n        $STORE (R0)                    and set in return R0\n         MVC   RETCODE,=F'16'        Set return code\n         B     RETURN                Branch - return\n\n*********************************************************************\n*                                                                   *\n*        Return to caller.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   L     R2,RETCODE          Get routine return code\n         S     R9,$F4              Get EXIT05 workarea address\n        $RETWORK (R9)              Return workarea\n         LR    R15,R2              Set routine return code\n        $RETURN RC=(R15)           Return to caller\n\n         LTORG\n\nTRTABLE  DC    256X'FF'            Table of valid numberics\n         ORG   TRTABLE+C'0'        *\n         DC    10X'00'             *\n         ORG                       *\n\nSP241    DC    X'F1'\n\nMSG1OK   DC    C' REPLACED                        '\nMSG1L    EQU   *-MSG1OK\nMSG1ERR1 DC    C' NOT CURRENTLY BEING USED BY JES2'\nMSG1ERR2 DC    C' NOT LOCATED IN STEPLIB LIBRARY  '\nMSG1ERR3 DC    C' LOAD ERROR                      '\n\nMSG2OK   DC    C' ADDED                           '\nMSG2L    EQU   *-MSG2OK\nMSG2ERR1 DC    C' NO EXIT NUMBER SPECIFIED        '\nMSG2ERR2 DC    C' INVALID EXIT NUMBER SPECIFIED   '\nMSG2ERR3 DC    C' EXIT NUMBER OUT OF RANGE        '\nMSG2ERR4 DC    C' EXIT MODULE ALREADY DEFINED     '\nMSG2ERR5 DC    C' NOT LOCATED IN STEPLIB LIBRARY  '\nMSG2ERR6 DC    C' LOAD ERROR                      '\nMSG2ERR7 DC    C' NO $ENTRY POINTS DEFINED        '\nE05DCBF  DCB DDNAME=STEPLIB,DSORG=PO,MACRF=R\nE05DCBL  EQU *-E05DCBF\n\n        $MODEND\n\nEXIT05W  DSECT ,                   EXIT05 workarea\nRETCODE  DS    F                   EXIT05 return code\nWORKFLAG DS    XL1                 EXIT05 workflag\nEXITPVT  EQU   X'80'               Add exit to JES2 private\nEXITCSA  EQU   X'40'               Add exit to common\nEXITNBR  DS    XL1                 Exit number\nEXITMODN DS    CL8                 Exit module name\nEXITLMTA DS    A                   Exit module LMT address\nWORKDBL  DS    D                   Doubleword workarea\nEXITXIT  DS    A                   XIT entry address\nWORKXRTA DS    A                   XRT workarea address\nWORKXRT# DS    XL1                 Number of new XRTs\nNEWXRTSA DS    A                   New XRTs area\nE05DCBD  DS    A                   STEPLIB DCB address\nEXIT05WL EQU   *-EXIT05W           EXIT05 workarea length\n\nWORKXRTE DSECT ,                   XRT workarea entry\nEXITRTNN DS    CL8                 Exit routine name\nEXITRTNA DS    A                   Exit routine address\nWORKXRTL EQU   *-WORKXRTE          XRT workarea entry length\n\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HASP5DOC": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x009\\x00\\x98\\x13_\\x01\\x02\\x02?\\x19S\\x00\\x0f\\x00\\x05\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-05-15T00:00:00", "modifydate": "2002-01-23T19:53:39", "lines": 15, "newlines": 5, "modlines": 0, "user": "SBGOLOB"}, "text": "This HASP exit 5 processes the following installation JES2 commands:\n\n1. $REPEXIT - Replace a JES2 exit module.  The exit environment may be\n              \"JES2\", \"SUBTASK\", \"USER\", or \"FSS\".\n2. $ADDEXIT - Add a JES2 exit module.  The exit environment may be\n              \"JES2\", \"SUBTASK\", \"USER\", or \"FSS\".\n\nAuthor\n------\nBob Break\nSt. Louis, Mo.\ncb7485@momail.sbc.com\nbbreak@prodigy.net\n314-340-9301\n314-845-2018\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADEXIT": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x13\\x7f\\x00\\x98\\x13\\x8f\\x10S\\x02\\xe0\\x02\\xe2\\x00\\x00\\xe2\\xc3\\xc8\\xe4\\xc4\\xc5\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-05-17T00:00:00", "modifydate": "1998-05-18T10:53:00", "lines": 736, "newlines": 738, "modlines": 0, "user": "SCHUDEL"}, "text": "*********************************************************************\n*                                                                   *\n*                        HASP EXIT 05                               *\n*                                                                   *\n*     This exit processes the $REPEXIT and $ADDEXIT JES2 commands.  *\n*                                                                   *\n*     > $REPEXIT - Replace a JES2 exit module.  Command syntax is   *\n*                  \"$REPEXIT,modname\".  The following rules and     *\n*                  restrictions apply to the use of $REPEXIT:       *\n*               1. The exit module to be replaced must be a JES2    *\n*                  module.  The exit environment may be \"JES2\",     *\n*                  \"SUBTASK\", \"USER\", or \"FSS\".                     *\n*               2. The exit module must have been previously loaded *\n*                  by a LOADMOD JES2PARM statement, or HASPINIT     *\n*                  during the last JES2 initialization, or by a     *\n*                  previous $REPEXIT command.                       *\n*               3. The routine names and number of routines that    *\n*                  are associated with the exit cannot be changed - *\n*                  $REPEXIT will ignore new/changed routine names.  *\n*                  If either of these needs to be changed, use the  *\n*                  $ADDEXIT command to add a new exit load module.  *\n*               4. If the original module resides in the JES2       *\n*                  private area, the new copy will be loaded into   *\n*                  JES2 private.  If the original module does not   *\n*                  reside in the JES2 private area, the new copy    *\n*                  will be loaded into CSA.                         *\n*               5. The new copy of the module must be found in an   *\n*                  APF authorized LNKLSTxx library.                 *\n*     > $ADDEXIT - Add a JES2 exit module.  Command syntax is       *\n*                  \"$ADDEXIT,modname,exit#\".  Exit# can range from  *\n*                  1 to 255 and must be specified.                  *\n*                  The following rules and restrictions apply to    *\n*                  the use of $ADDEXIT:                             *\n*               1. The exit module to be added must be a JES2       *\n*                  module.  The exit environment may be \"JES2\",     *\n*                  \"SUBTASK\", \"USER\", or \"FSS\".                     *\n*               2. The exit must not be currently defined to JES2   *\n*                  or a new copy will not be loaded and defined.    *\n*               3. The new exit module will be loaded into either   *\n*                  JES2 private or CSA, depending on the exit       *\n*                  environment.                                     *\n*               4. The copy of the exit module to be added must be  *\n*                  found in an APF authorized LNKLSTxx library.     *\n*               5. The newly added exit module and routines must be *\n*                  defined in JES2PARM before the next time JES2 is *\n*                  restarted.  If this is not done, an exit module  *\n*                  that was loaded into JES2 private will be lost   *\n*                  on a subsequent restart.                         *\n*                                                                   *\n*     Entry point: EXIT05                                           *\n*                                                                   *\n*     Input registers:                                              *\n*        R0-4   N/A                                                 *\n*        R5     Pointer to current operand address                  *\n*        R6     Increment value of 4                                *\n*        R7     Pointer to address of last operand                  *\n*        R8-10  N/A                                                 *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    PCE address                                         *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0     Unchanged or $CRET message length                   *\n*        R1-14  Unchanged                                           *\n*        R15    Return code                                         *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-8   Work registers                                      *\n*        R9     WORKAREA address                                    *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    PCE address                                         *\n*        R14-15 Work and linkage registers                          *\n*                                                                   *\n*     Author: Bob Break                                             *\n*             St. Louis, Mo.                                        *\n*             314-340-9301                                          *\n*             314-845-2018                                          *\n*     IBMMAIL - USSWB2ZB                                            *\n*     EMAIL   - CB7485@MOMAIL.SBC.COM                               *\n*               bbreak@swbell.net                                   *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nHASPEX05 $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               PDS,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CAT,                                                   X\n               $COMWORK,                                               X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JOE,                                                   X\n               $JQE,                                                   X\n               $LMT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $PIT,                                                   X\n               $PSV,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XRT\n\nEXIT05  $ENTRY BASE=R12            Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\nEXIT000 $SAVE  NAME=EXIT05         Save caller's registers\n         LR    R12,R15             Set base register\n\n*********************************************************************\n*                                                                   *\n*        Obtain a module workarea.                                  *\n*                                                                   *\n*********************************************************************\n\n         LA    R1,EXIT05WL         Get workarea length\n         LA    R1,3(,R1)           Round up to word boundary\n         SRL   R1,2                Convert to number of words\n         LA    R1,1(,R1)           Add one for identifier\n        $GETWORK WORDS=(R1),USE=EX05\n         LA    R1,4(,R1)           Point past identifier\n         LR    R9,R1               Set workarea address\n         LR    R14,R1              Set move to address\n         LA    R15,EXIT05WL        Set move to length\n         XR    R1,R1               Set move from length and pad\n         MVCL  R14,R0              Clear workarea\n         USING EXIT05W,R9\n\n*********************************************************************\n*                                                                   *\n*        Determine if this is a the $REPEXIT or $ADDEXIT command.   *\n*                                                                   *\n*********************************************************************\n\nEXIT100  LA    R1,COMVERB            Get command verb address\n         CLC   0(7,R1),=C'REPEXIT'   $REPEXIT command\n         BE    EXIT200               Yes - branch, process $REPEXIT\n         CLC   0(7,R1),=C'ADDEXIT'   $ADDEXIT command\n         BE    EXIT300               Yes - branch, process $ADDEXIT\n         XR    R15,R15               Set return code\n         B     RETURN                Branch - return\n\n*********************************************************************\n*                                                                   *\n*        Process the $REPEXIT command.                              *\n*                                                                   *\n*********************************************************************\n\nEXIT200  LA    R1,COMVERB            Get command verb address\n         MVC   EXITMODN(8),$BLANKS   Save modname\n         MVC   EXITMODN(8),8(R1)     *\n\n*********************************************************************\n*                                                                   *\n*        Check if the exit module is currently defined to JES2.     *\n*                                                                   *\n*********************************************************************\n\nEXIT210  ICM   R8,15,$LMT1           Get LMT address\n         BZ    EXIT213               Branch - no LMT chain\n         USING LMT,R8\nEXIT211  CLC   LMTMODNM,EXITMODN     Module name match?\n         BNE   EXIT212               No - branch, continue\n         TM    LMTFLG1,LMT1INVD      LMT invalid?\n         BZ    EXIT220               No - branch, continue\nEXIT212  ICM   R8,15,LMTCHAIN        Get next LMT entry\n         BNZ   EXIT211               Loop back to check next LMT entry\nEXIT213  MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG1L),MSG1ERR1  Set fixed message text\n         B     EXIT250               Branch - continue\n\n*********************************************************************\n*                                                                   *\n*        Invoke the MVS BLDL service to check if a copy of the      *\n*        module is located in a LINKLIST library.  If so, get       *\n*        storage to perform a directed load.                        *\n*                                                                   *\n*********************************************************************\n\n         USING PDSBLDL,R2\n         USING PDS2,R3\nEXIT220  LA    R2,$GENWORK           Use $GENWORK as BLDL parm area\n         MVC   PDSBLDLN,$H1          Set number of BLDL entries\n         MVC   PDSBLDLL,=AL2(PDS2BLEN)  Set BLDL entry length\n         LA    R3,PDSBLDLE           Point to the BLDL entry\n         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  Clear BLDL workarea\n         MVC   PDS2NAME,EXITMODN     Set module name for BLDL\n         L     R1,CVTPTR             Get CVT pointer\n         L     R1,CVTLINK-CVT(,R1)   Get LNKLIST DCB pointer\n         BLDL  (R1),(R2)             Locate module\n         DROP  R2                    PDSBLDL\n         LTR   R15,R15               Module located in LINKLIST?\n         BNZ   EXIT221               No - branch, error\n         TM    PDS2LIBF,PDS2LLNK     Module reside in linklist?\n         BO    EXIT222               Yes - branch, continue\nEXIT221  MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG1L),MSG1ERR2  Set fixed message text\n         B     EXIT250               Branch - continue\nEXIT222  XR    R0,R0                 Get module length\n         ICM   R0,7,PDS2STOR           from the pds directory\n         XR    R2,R2                 Assume SP=0 (JES2 private module)\n         TM    LMTFLG1,LMT1PVT       Module loaded in JES2 private?\n         BO    EXIT223               Yes - branch, continue\n         ICM   R2,1,SP241            Set SP=241\nEXIT223  TM    PDS2FTB2,PDSLRMOD     Module RMODE31?\n         BO    EXIT224               Yes - branch, continue\n         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW\n         B     EXIT225               Branch - continue\nEXIT224  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY\nEXIT225  LR    R6,R1                 Set storage address for LOAD\n         LR    R14,R1                Set move to address\n         XR    R15,R15               Set move to length\n         ICM   R15,7,PDS2STOR        *\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear module area\n\n*********************************************************************\n*                                                                   *\n*        Perform the directed load of the new module.               *\n*                                                                   *\n*********************************************************************\n\nEXIT230  LA    R4,EXITMODN           Set modname address\n         L     R5,CVTPTR             Get CVT pointer\n         L     R5,CVTLINK-CVT(,R5)   Get LNKLIST DCB pointer\n         IPK   0(0)                  Get current psw key\n         SPKA  0(0)                  Set psw key zero\n         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT231\nEXIT231  SPKA  0(R2)                 Reset psw key\n         LTR   R15,R15               Load successful?\n         BZ    EXIT235               Yes - branch, continue\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG1L),MSG1ERR3  Set fixed message text\n         XR    R0,R0                 Get module length\n         ICM   R0,7,PDS2STOR           from the pds directory\n         TM    LMTFLG1,LMT1PVT       Module loaded in JES private?\n         BO    EXIT250               Yes - branch, continue\n         XR    R2,R2                 Set SP=241\n         ICM   R2,1,SP241            *\n         FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0\n         B     EXIT250               Branch, continue\n\n*********************************************************************\n*                                                                   *\n*        Replace the module information in the LMT.                 *\n*                                                                   *\n*********************************************************************\n\nEXIT235  ST    R6,LMTMITAD           Set module address in LMT\n         TM    PDS2FTB2,PDSLRMOD     Module RMODE31?\n         BO    EXIT236               Yes - branch, continue\n         OI    LMTFLG2,LMT2RM24      Set RMODE24 flag on\n         NI    LMTFLG2,255-LMT2RM31  Turn RMODE31 flag off\n         B     EXIT237               Branch - continue\nEXIT236  OI    LMTFLG2,LMT2RM31      Set RMODE31 flag on\n         NI    LMTFLG2,255-LMT2RM24  Turn RMODE24 flag off\nEXIT237  TM    LMTFLG1,LMT1PVT       Module loaded in JES private?\n         BO    EXIT240               Yes - branch, continue\n         MVI   LMTSUBPL,X'F1'        Set SP=241\n         MVC   LMTMODLN,PDS2STOR     Set module length\n         OI    LMTFLG1,LMT1CMN       Set load flags\n         DROP  R3                    PDS2\n\n*********************************************************************\n*                                                                   *\n*        Replace the module information in the XRT.                 *\n*                                                                   *\n*********************************************************************\n\n         USING XIT,R1\n         USING XRT,R3\nEXIT240  LA    R0,XIT#PTS            Get maximum # XIT entries\n         L     R1,$XITADDR           Get XIT chain address\nEXIT241  ICM   R3,15,XITXRTAD        Get XRT address\n         BZ    EXIT246               Branch - no XRT, check next XIT\n         XR    R15,R15               Get number of routines\n         IC    R15,XIT#RTNS            associated with this exit point\nEXIT242  L     R14,LMTMITAD          Get MIT address\n         L     R14,MITENTAD-MIT(,R14)  Get MITETBL address\n         USING MTE,R14\nEXIT243  CLI   MTENAME,X'FF'         Last MTE?\n         BE    EXIT245               Yes - branch, check next XRT\n         CLC   XRTRNAME,MTENAME      XRT name match MIT name?\n         BE    EXIT244               Yes - branch, continue\n         LA    R14,MTELEN(,R14)      Bump to next MITETBL entry\n         B     EXIT243               Loop back for next MITETBL entry\nEXIT244  MVC   XRTRADDR,MTEADDR      Set routine addr in XRT\nEXIT245  LA    R3,XRTLNGTH(,R3)      Bump to next XRT entry\n         BCT   R15,EXIT242           Loop back for next XRT entry\n         DROP  R3,R8,R14             XRT, LMT, MTE\nEXIT246  LA    R1,XITLNGTH(,R1)      Bump to next XIT entry\n         BCT   R0,EXIT241            Loop back for next XIT entry\n         DROP  R1                    XIT\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG1L),MSG1OK  Set fixed message text\n\n*********************************************************************\n*                                                                   *\n*        Set the message length and return.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT250  LA    R0,8+MSG1L            Get message length\n        $STORE (R0)                    and set in return R0\n         MVC   RETCODE,=F'16'        Set return code\n         B     RETURN                Branch - return\n\n*********************************************************************\n*                                                                   *\n*        Process the $ADDEXIT command.                              *\n*                                                                   *\n*********************************************************************\n\nEXIT300  LA    R3,COMVERB            Get command verb address\n         LA    R3,8(,R3)             Point to module name\n         LR    R15,R3                *\n         LA    R0,9                  Set max. modname check length\nEXIT301  CLI   0(R15),C','           \",\" delimiter found?\n         BE    EXIT302               Yes - branch, continue\n         LA    R15,1(,R15)           Bump to next modname position\n         BCT   R0,EXIT301            Loop back for next character\n         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR1  Set fixed message text\n         B     EXIT390               Branch - continue\nEXIT302  LR    R14,R15               Calculate exit modname length\n         SLR   R14,R3                *\n         BCTR  R14,0                 Minus 1 for execute\n         MVC   EXITMODN(8),$BLANKS   Blank init modname\n         MVC   EXITMODN(0),0(R3)     Executed instruction\n         EX    R14,*-6               Save modname\n         LA    R15,1(,R15)           Point to exit number\n         LR    R3,R15                *\n         LA    R0,4                  Set max. exit # check length\nEXIT303  CLI   0(R15),C','           \",\" delimiter found?\n         BE    EXIT304               Yes - branch, continue\n         CLI   0(R15),C' '           \" \" delimiter found?\n         BE    EXIT304               Yes - branch, continue\n         LA    R15,1(,R15)           Bump to next exit nbr position\n         BCT   R0,EXIT303            Loop back for next character\nEXIT304  LR    R14,R15               Calculate exit number length\n         SLR   R14,R3                *\n         BCTR  R14,0                 Minus 1 for execute\n         TRT   0(0,R3),TRTABLE       Executed instruction\n         EX    R14,*-6               Exit number valid?\n         BZ    EXIT305               Yes - branch, continue\n         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR2  Set fixed message text\n         B     EXIT390               Branch - continue\nEXIT305  PACK  WORKDBL,0(0,R3)       Executed instruction\n         EX    R14,*-6               Convert exit number to decimal\n         CVB   R1,WORKDBL            Convert exit number to binary\n         STCM  R1,1,EXITNBR          Save exit number\n         C     R1,$F1                Exit number less than 1?\n         BL    EXIT306               Yes - branch, error\n         C     R1,$F255              Exit number greater than 255?\n         BNH   EXIT310               No - branch, continue\nEXIT306  MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR3  Set fixed message text\n         B     EXIT390               Branch - continue\n\n*********************************************************************\n*                                                                   *\n*        Check if the exit module is currently defined to JES2.     *\n*                                                                   *\n*********************************************************************\n\nEXIT310  ICM   R8,15,$LMT1           Get LMT address\n         BZ    EXIT313               Branch - no LMT chain\n         USING LMT,R8\nEXIT311  CLC   LMTMODNM,EXITMODN     Module name match?\n         BNE   EXIT312               No - branch, continue\n         TM    LMTFLG1,LMT1INVD      LMT invalid?\n         BO    EXIT312               Yes - branch, continue\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR4  Set fixed message text\n         B     EXIT390               Branch - continue\nEXIT312  ICM   R8,15,LMTCHAIN        Get next LMT entry\n         BNZ   EXIT311               Loop back to check next LMT entry\nEXIT313  XR    R14,R14               Get new exit number\n         ICM   R14,1,EXITNBR         *\n         LA    R1,XITLNGTH           Get XIT length\n         XR    R0,R0                 Calculate XIT index\n         MR    R0,R14                *\n         L     R15,$XITADDR          Get XIT chain address\n         ALR   R15,R1                Calculate XIT address\n         ST    R15,EXITXIT           Save XIT address\n         USING XIT,R15\n         TM    XITFLAGS,XITCMN       Must exit reside in CSA/LPA?\n         BZ    EXIT314               No - branch, continue\n         OI    WORKFLAG,EXITCSA      Set exit resides in CSA flag\n         B     EXIT315               Branch - continue\nEXIT314  OI    WORKFLAG,EXITPVT      Set exit resides in pvt flag\n         DROP  R15                   XIT\n\n*********************************************************************\n*                                                                   *\n*        The exit module is not currently defined to JES2, so       *\n*        acquire an LMT for the module.                             *\n*                                                                   *\n*********************************************************************\n\nEXIT315  XR    R2,R2                 Assume SP=0 (JES2 private module)\n         TM    WORKFLAG,EXITPVT      Module loaded in JES2 private?\n         BO    EXIT316               Yes - branch, continue\n         ICM   R2,1,SP241            Set SP=241\nEXIT316  LA    R0,LMTLEN+$CSBPRFX    Get LMT+prefix length\n         GETMAIN RC,LV=(R0),SP=(R2),LOC=ANY\n         LR    R8,R1                 Save new LMT prefix address\n         LR    R14,R1                Set move to address\n         LA    R15,LMTLEN+$CSBPRFX   Set move to length\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear LMT and prefix\n         MVC   $CSBID(4,R8),=C'LMT '  Set eyecatcher in prefix\n         STCM  R2,1,$CSBSPLN(R8)     Set storage subpool in prefix\n         LA    R0,LMTLEN+$CSBPRFX    Set LMT+prefix length in prefix\n         STCM  R0,7,$CSBSPLN+1(R8)   *\n         LA    R8,$CSBPRFX(,R8)      Point to actual LMT\n         ST    R8,EXITLMTA           Save new LMT address\n\n*********************************************************************\n*                                                                   *\n*        Invoke the MVS BLDL service to check if a copy of the      *\n*        module is located in a LINKLIST library.  If so, get       *\n*        storage to perform a directed load.                        *\n*                                                                   *\n*********************************************************************\n\n         USING PDSBLDL,R2\n         USING PDS2,R3\nEXIT320  LA    R2,$GENWORK           Use $GENWORK as BLDL parm area\n         MVC   PDSBLDLN,$H1          Set number of BLDL entries\n         MVC   PDSBLDLL,=AL2(PDS2BLEN)  Set BLDL entry length\n         LA    R3,PDSBLDLE           Point to the BLDL entry\n         XC    PDSBLDLE(PDS2BLEN+LMTLEN),PDSBLDLE  Clear BLDL workarea\n         MVC   PDS2NAME,EXITMODN     Set module name for BLDL\n         L     R1,CVTPTR             Get CVT pointer\n         L     R1,CVTLINK-CVT(,R1)   Get LNKLIST DCB pointer\n         BLDL  (R1),(R2)             Locate module\n         DROP  R2                    PDSBLDL\n         LTR   R15,R15               Module located in LINKLIST?\n         BNZ   EXIT321               No - branch, error\n         TM    PDS2LIBF,PDS2LLNK     Module reside in linklist?\n         BO    EXIT322               Yes - branch, continue\nEXIT321  MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR5  Set fixed message text\n         B     EXIT390               Branch - continue\nEXIT322  XR    R0,R0                 Get module length\n         ICM   R0,7,PDS2STOR           from the pds directory\n         XR    R2,R2                 Assume SP=0 (JES2 private module)\n         TM    WORKFLAG,EXITPVT      Module loaded in JES2 private?\n         BO    EXIT323               Yes - branch, continue\n         ICM   R2,1,SP241            Set SP=241\nEXIT323  TM    PDS2FTB2,PDSLRMOD     Module RMODE31?\n         BO    EXIT324               Yes - branch, continue\n         GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=BELOW\n         B     EXIT325               Branch - continue\nEXIT324  GETMAIN RC,LV=(R0),SP=(R2),KEY=0,LOC=ANY\nEXIT325  LR    R6,R1                 Set storage address for LOAD\n         LR    R14,R1                Set move to address\n         XR    R15,R15               Set move to length\n         ICM   R15,7,PDS2STOR        *\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear module area\n\n*********************************************************************\n*                                                                   *\n*        Perform the directed load of the new module.               *\n*                                                                   *\n*********************************************************************\n\nEXIT330  LA    R4,EXITMODN           Set modname address\n         L     R5,CVTPTR             Get CVT pointer\n         L     R5,CVTLINK-CVT(,R5)   Get LNKLIST DCB pointer\n         IPK   0(0)                  Get current psw key\n         SPKA  0(0)                  Set psw key zero\n         LOAD  EPLOC=(R4),DCB=(R5),ADDR=(R6),ERRET=EXIT331\nEXIT331  SPKA  0(R2)                 Reset psw key\n         LTR   R15,R15               Load successful?\n         BZ    EXIT335               Yes - branch, continue\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR6  Set fixed message text\n         XR    R0,R0                 Get module length\n         ICM   R0,7,PDS2STOR           from the pds directory\n         TM    WORKFLAG,EXITPVT      Module loaded in JES private?\n         BO    EXIT390               Yes - branch, continue\n         XR    R2,R2                 Set SP=241\n         ICM   R2,1,SP241            *\n         FREEMAIN RU,A=(R6),LV=(R0),SP=(R2),KEY=0\n         B     EXIT390               Branch, continue\n\n*********************************************************************\n*                                                                   *\n*        Initialize the new LMT.                                    *\n*                                                                   *\n*********************************************************************\n\nEXIT335  L     R8,EXITLMTA           Get new LMT address\n         ST    R6,LMTMITAD           Set module address in LMT\n         MVC   LMTMODNM,EXITMODN     Set module name in LMT\n         TM    PDS2FTB2,PDSLRMOD     Module RMODE31?\n         BO    EXIT336               Yes - branch, continue\n         OI    LMTFLG2,LMT2RM24      Set RMODE24 flag on\n         NI    LMTFLG2,255-LMT2RM31  Turn RMODE31 flag off\n         B     EXIT337               Branch - continue\nEXIT336  OI    LMTFLG2,LMT2RM31      Set RMODE31 flag on\n         NI    LMTFLG2,255-LMT2RM24  Turn RMODE24 flag off\nEXIT337  TM    WORKFLAG,EXITPVT      Module loaded in JES private?\n         BO    EXIT338               Yes - branch, continue\n         OI    LMTFLG1,LMT1CMN       Set module loaded in common flag\n         MVI   LMTSUBPL,X'F1'        Set SP=241\n         B     EXIT339               Branch - continue\nEXIT338  OI    LMTFLG1,LMT1PVT       Set module loaded in private flag\nEXIT339  MVC   LMTMODLN,PDS2STOR     Set module length\n         OI    LMTFLG1,LMT1BSPL      Set bypass SPLEVEL check flag\n         DROP  R3                    PDS2\n\n*********************************************************************\n*                                                                   *\n*        Chain the new LMT.                                         *\n*                                                                   *\n*********************************************************************\n\nEXIT340  TM    WORKFLAG,EXITCSA      Module loaded in common?\n         BO    EXIT343               Yes - branch, continue\n         ICM   R15,15,$LMTPBOT       Get last private entry addrss\n         BNZ   EXIT341               Branch - continue\n         ST    R8,$LMT1              Reset first private entry address\n         B     EXIT342               Branch - continue\nEXIT341  ST    R8,LMTCHAIN-LMT(,R15)  Reset chain in old last entry\nEXIT342  MVC   LMTCHAIN,$LMT1C       Reset chain in new last entry\n         ST    R8,$LMTPBOT           Reset last private entry address\n         B     EXIT350               Branch - continue\nEXIT343  ICM   R15,15,$LMT1C         Get first CSA entry address\n         BNZ   EXIT345               Branch - continue\n         ICM   R1,15,$LMTPBOT        Get last private entry addrss\n         BZ    EXIT344               Branch - no private entries\n         ST    R8,LMTCHAIN-LMT(,R1)  Reset chain in last private entry\nEXIT344  ST    R8,$LMT1C             Reset first CSA entry address\n         B     EXIT350               Branch - continue\nEXIT345  CLC   LMTCHAIN-LMT(4,R15),$ZEROS  End of CSA chain?\n         BE    EXIT346               Branch - end of CSA chain\n         L     R15,LMTCHAIN-LMT(,R15)  Get next CSA entry address\n         B     EXIT345               Loop back to check next entry\nEXIT346  ST    R8,LMTCHAIN-LMT(,R15)  Reset chain in old last entry\n\n*********************************************************************\n*                                                                   *\n*        Obtain and initialize an XRT for each new exit routine     *\n*        that is defined in the new exit module.                    *\n*                                                                   *\n*********************************************************************\n\nEXIT350  LA    R0,255*WORKXRTL       Get XRT workarea size\n         GETMAIN RC,LV=(R0),LOC=ANY\n         ST    R1,WORKXRTA           Save XRT workarea address\n         LR    R14,R1                Set move to address\n         LA    R15,255*WORKXRTL      Set move to length\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear XRT workarea\n         L     R3,EXITXIT            Get exit XIT address\n         USING XIT,R3\n         L     R14,LMTMITAD          Get MIT address\n         L     R14,MITENTAD-MIT(,R14)  Get MITETBL address\n         USING MTE,R14\n         LA    R14,MTELEN(,R14)      Bump past MITETBL eyecatcher MTE\n         L     R15,WORKXRTA          Get XRT workarea address\n         USING WORKXRTE,R15\n         XR    R7,R7                 Init new exit routine count\nEXIT351  CLI   MTENAME,X'FF'         Last MTE?\n         BE    EXIT352               Yes - branch, continue\n         LA    R7,1(,R7)             Increment exit routine count\n         MVC   EXITRTNN,MTENAME      Save exit routine name\n         MVC   EXITRTNA,MTEADDR      Save exit routine address\n         LA    R14,MTELEN(,R14)      Bump to next MITETBL entry\n         LA    R15,WORKXRTL(,R15)    Bump to next XRT workarea entry\n         B     EXIT351               Loop back for next MITETBL entry\n         DROP  R14,R15               MTE, WORKXRTE\nEXIT352  LTR   R7,R7                 Any new exit routines defined?\n         BNZ   EXIT353               Yes - branch, continue\n         OI    LMTFLG1,LMT1INVD      Invalidate the new LMT\n         MVC   COMMAND(8),=C'$ADDEXIT'  Set command in message text\n         MVC   COMMAND+8(MSG2L),MSG2ERR7  Set fixed message text\n         LA    R0,255*WORKXRTL       Get XRT workarea size\n         L     R1,WORKXRTA           Get XRT workarea address\n         FREEMAIN RU,A=(R1),LV=(R0)\n         B     EXIT390               Branch - continue\nEXIT353  STCM  R7,1,WORKXRT#         Save number of new XRTs\n         XR    R2,R2                 Get # routines currently defined\n         ICM   R2,1,XIT#RTNS         *\n         ALR   R7,R2                 Calculate number of XRTs (new+old)\n         LA    R15,XRTLNGTH          Get XRT length\n         XR    R6,R6                 Calculate total XRTs length\n         MR    R6,R15                *\n         GETMAIN RC,LV=(R7),SP=241,LOC=ANY\n         ST    R1,NEWXRTSA           Save new XRT area address\n         LR    R14,R1                Set move to address\n         LR    R15,R7                Set move to length\n         XR    R1,R1                 Set move from length and pad\n         MVCL  R14,R0                Clear area\n         L     R1,NEWXRTSA           Get new XRT area address\n         USING XRT,R1\n         LTR   R2,R2                 Any routines currently defined?\n         BZ    EXIT355               No - branch, define new routines\n         L     R15,XITXRTAD          Get first old XRT address\nEXIT354  MVC   0(XRTLNGTH,R1),0(R15)  Move old XRT to new area\n         LA    R1,XRTLNGTH(,R1)      Bump to next new area slot\n         LA    R15,XRTLNGTH(,R15)    Bump to next old XRT\n         BCT   R2,EXIT354            Loop back to move next XRT\nEXIT355  XR    R0,R0                 Get # new exit routines (XRTs)\n         ICM   R0,1,WORKXRT#         *\n         L     R15,WORKXRTA          Get XRT workarea address\n         USING WORKXRTE,R15\nEXIT356  MVC   XRTRNAME,EXITRTNN     Set new exit routine name\n         MVC   XRTRADDR,EXITRTNA     Set new exit routine address\n         LA    R1,XRTLNGTH(,R1)      Bump to next new area slot\n         LA    R15,WORKXRTL(,R15)    Bump to next XRT workarea entry\n         BCT   R0,EXIT356            Loop back to init next new XRT\n         DROP  R1,R15                XRT, WORKXRTE\n         LA    R0,255*WORKXRTL       Get XRT workarea size\n         L     R1,WORKXRTA           Get XRT workarea address\n         FREEMAIN RU,A=(R1),LV=(R0)\n\n*********************************************************************\n*                                                                   *\n*        Finish initializing the XIT for the new exit.              *\n*                                                                   *\n*********************************************************************\n\nEXIT360  OI    XITFLAGS,XITDENBL+XITBSPL  Set exit defined, enabled,\n*                                           and bypass SPLEVEL check\n         NI    XITFLAGS,255-XITTRACE  Turn exit tracing off\n         MVC   XITXRTAD,NEWXRTSA     Set first exit XRT address\n         XR    R0,R0                 Get # routines currently defined\n         ICM   R0,1,XIT#RTNS         *\n         XR    R1,R1                 Get # new routines\n         ICM   R1,1,WORKXRT#         *\n         ALR   R0,R1                 Calculate total # exit routines\n         STCM  R0,1,XIT#RTNS         Set total # exit routines\n         L     R14,LMTMITAD          Get MIT address\n         MVC   XITENVIR,MITENVIR-MIT(R14)  Set environment byte\n         DROP  R3,R8                 XIT, LMT\n         MVC   COMMAND(8),EXITMODN   Set modname in message text\n         MVC   COMMAND+8(MSG2L),MSG2OK  Set fixed message text\n\n*********************************************************************\n*                                                                   *\n*        Set the message length and return.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT390  LA    R0,8+MSG2L            Get message length\n        $STORE (R0)                    and set in return R0\n         MVC   RETCODE,=F'16'        Set return code\n         B     RETURN                Branch - return\n\n*********************************************************************\n*                                                                   *\n*        Return to caller.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   L     R2,RETCODE          Get routine return code\n         S     R9,$F4              Get EXIT05 workarea address\n        $RETWORK (R9)              Return workarea\n         LR    R15,R2              Set routine return code\n        $RETURN RC=(R15)           Return to caller\n\n         LTORG\n\nTRTABLE  DC    256X'FF'            Table of valid numberics\n         ORG   TRTABLE+C'0'        *\n         DC    10X'00'             *\n         ORG                       *\n\nSP241    DC    X'F1'\n\nMSG1OK   DC    C' replaced                        '\nMSG1L    EQU   *-MSG1OK\nMSG1ERR1 DC    C' not currently being used by JES2'\nMSG1ERR2 DC    C' not located in LINKLIST library '\nMSG1ERR3 DC    C' LOAD error                      '\n\nMSG2OK   DC    C' added                           '\nMSG2L    EQU   *-MSG2OK\nMSG2ERR1 DC    C' no exit number specified        '\nMSG2ERR2 DC    C' invalid exit number specified   '\nMSG2ERR3 DC    C' exit number out of range        '\nMSG2ERR4 DC    C' exit module already defined     '\nMSG2ERR5 DC    C' not located in LINKLIST library '\nMSG2ERR6 DC    C' LOAD error                      '\nMSG2ERR7 DC    C' no $ENTRY points defined        '\n\n        $MODEND\n\nEXIT05W  DSECT                     EXIT05 workarea\nRETCODE  DS    F                   EXIT05 return code\nWORKFLAG DS    XL1                 EXIT05 workflag\nEXITPVT  EQU   X'80'               Add exit to JES2 private\nEXITCSA  EQU   X'40'               Add exit to common\nEXITNBR  DS    XL1                 Exit number\nEXITMODN DS    CL8                 Exit module name\nEXITLMTA DS    A                   Exit module LMT address\nWORKDBL  DS    D                   Doubleword workarea\nEXITXIT  DS    A                   XIT entry address\nWORKXRTA DS    A                   XRT workarea address\nWORKXRT# DS    XL1                 Number of new XRTs\nNEWXRTSA DS    A                   New XRTs area\nEXIT05WL EQU   *-EXIT05W           EXIT05 workarea length\n\nWORKXRTE DSECT                     XRT workarea entry\nEXITRTNN DS    CL8                 Exit routine name\nEXITRTNA DS    A                   Exit routine address\nWORKXRTL EQU   *-WORKXRTE          XRT workarea entry length\n\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT198/FILE198.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT198", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}