/*  REXX                                                              */
/**********************************************************************/
/*  MODULE  = REORGVSX   (Reorg a VSAM Cluster)                       */
/*                                                                    */
/*  #¢# AUTHOR             TKMILLE                                    */
/*  #¢# CREATED            TKMILLE 11/10/2005                         */
/*  #¢# LAST UPDATE        TKMILLE 06/02/2009                         */
/*  Called by Exec         REORGVS                                    */
/*                                                                    */
/*  PURPOSE                                                           */
/*                                                                    */
/*      This exec will submit a job to reorg a VSAM cluster.          */
/*      It will input the cluster dataset name and optionally         */
/*      the high-level qualifier for the work files.                  */
/*      It will generate a random number between 1 and 999999         */
/*      to use in the low-level qualifier for uniqueness.             */
/*                                                                    */
/*      The exec can be called from the background or in the          */
/*      foreground.  If it is called from the background, the         */
/*      execution parameters must be passed according to the example  */
/*      background-supplied parms rules noted below and the           */
/*      background example calls noted below.  If called from the     */
/*      foreground, the execution paramters will be coded on an       */
/*      ISPF panel.                                                   */
/*                                                                    */
/*      This exec will input a stream of jcl to tailor and to         */
/*      submit in the background.  It will substitute the             */
/*      variables that the invoker provides to this exec              */
/*      before submitting the job.  The jcl stream will be            */
/*      saved in a dataset (&HLQ.$REORGVS.SUBMIT.JCL.FS&FSEQ).        */
/*                                                                    */
/*      These skeleton variables will be substited:                   */
/*        &CLUSTER  (User provided to this exec)                      */
/*        &HLQ      (User provided to this exec)                      */
/*        &FSEQ     (Not user provided - this is a random             */
/*                   number generated within this exec).              */
/*                                                                    */
/*  BACKGROUND-SUPPLIED PARMS:                                        */
/*  (Required Parms):                                                 */
/*  (Required Parms):                                                 */
/*          CLUSTERNAME = The VSAM Cluster Dataset to be reorged.     */
/*                        This must be the first parameter.           */
/*                        It is positional in nature and cannot be    */
/*                        omitted.                                    */
/*                                                                    */
/*  (Optional Parms):                                                 */
/*                                                                    */
/*        HLQ(hlq) = The name of the high-level qualifier to use      */
/*                   for the work datasets.  The default hlq will     */
/*                   be the invoker's userid.                         */
/*                                                                    */
/*       PRI(+NNN) = This parameter increases or decreases the        */
/*    or PRI(-NNN)   primary space allocation for the cluster         */
/*                   (relative to what it was before).                */
/*                   The syntax is: +nnn or -nnn.  nnn must be        */
/*                   numeric value between 1 and 999 and must be      */
/*                   preceded with either a "+" or "-". nnn           */
/*                   represents a percentage value of increase or     */
/*                   decrease against the previous primary            */
/*                   allocation value.                                */
/*                                                                    */
/*       SEC(+NNN) = This parameter increases or decreases the        */
/*    or SEC(-NNN)   secondary space allocation for the cluster       */
/*                   (relative to what it was before).                */
/*                   The syntax is: +nnn or -nnn.  nnn must be        */
/*                   numeric value between 1 and 999 and must be      */
/*                   preceded with either a "+" or "-". nnn           */
/*                   represents a percentage value of increase or     */
/*                   decrease against the previous secondary          */
/*                   allocation value.                                */
/*                                                                    */
/*          TEST   = This parameter will cause a test simulation of   */
/*                   the reorganization.  It will not update the      */
/*                   cluster or affect it.  It will only generate     */
/*                   the work files which can be inspected.  This     */
/*                   is considered a TEST pass execution. Some of     */
/*                   the jcl skeleton steps will not be executed.     */
/*                                                                    */
/*          DEBUG  = The parameter which displays the statements as   */
/*                   they are executed (invokes TRACE I)              */
/*                                                                    */
/*  Background Example Calls:                                         */
/*                                                                    */
/*  1) REORGVSX my.vsam.dataset)                                      */
/*  2) REORGVSX my.vsam.dataset) HLQ(SYS5)                            */
/*  3) REORGVSX my.vsam.dataset) HLQ(SYS5) PRI(+05)                   */
/*  4) REORGVSX my.vsam.dataset) PRI(+10)                             */
/*  5) REORGVSX my.vsam.dataset) PRI(+10) SEC(+10)                    */
/*  6) REORGVSX my.vsam.dataset) PRI(-50) SEC(-50)                    */
/*  7) REORGVSX my.vsam.dataset) TEST                                 */
/*  8) REORGVSX my.vsam.dataset) PRI(+10) SEC(+10) TEST               */
/*                                                                    */
/*  Background Example Explanations:                                  */
/*                                                                    */
/*  1) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*  2) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and create work datasets with the HLQ of 'SYS5'.            */
/*  3) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and create work datasets with the HLQ of 'SYS5'             */
/*        and increase the data component's primary                   */
/*        allocation units value by 5%                                */
/*  4) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and increase the data component's primary                   */
/*        allocation units value by 10%                               */
/*  5) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and increase the data component's primary                   */
/*        allocation units value by 10% and increase                  */
/*        data component's secondary allocation units                 */
/*        value by 10%. (Note, if the secondary                       */
/*        allocation unit is presently zero, it will                  */
/*        remain 0 after the adjustment).                             */
/*  6) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and decrease the data component's primary                   */
/*        allocation units value by 50% and decrease                  */
/*        data component's secondary allocation units                 */
/*        value by 50%. (Note, if the secondary                       */
/*        allocation unit is presently zero, it will                  */
/*        remain 0 after the adjustment).                             */
/*  7) Test the Reorganization (Simulation pass) of the Vsam          */
/*        Cluster named 'MY.VSAM.DATASET'.  Does not affect the       */
/*        Cluster on a TEST pass simulation.                          */
/*  8) Test the Reorganization (Simulation pass) of the Vsam          */
/*        Cluster named 'MY.VSAM.DATASET' and of increasing the       */
/*        primary allocation units by +10% and of increasing the      */
/*        secondary allocation units by +10%.                         */
/*        Does not affect the Cluster on a TEST pass simulation.      */
/*                                                                    */
/*  Installation Tailoring:                                           */
/*        Do a FIND on "ISPPLIB" and "ISPMLIB". Change these          */
/*        datasets names to the names for your installation.          */
/*                                                                    */
/*  Return Codes:                                                     */
/*                                                                    */
/*    0   - Successful execution of this exec                         */
/*   12   - Invalid or missing parms or JCL Skeleton File allocation  */
/*          error.                                                    */
/*                                                                    */
/**********************************************************************/
version_level = "V01.02.02"
Arg parms
Trace "O"
msg_stat        = Msg("OFF")
envirnmt        = SYSVAR("sysenv")
nesting         = SYSVAR("sysnest")
sysicmd         = SYSVAR("sysicmd")
syspcmd         = SYSVAR("syspcmd")
sysscmd         = SYSVAR("sysscmd")
userid          = Userid()
rtcd            = 0
panel_end       = "N"
sysid           = Left(MVSVAR(sysname),3," ")
processing_mode = "EXECUTION"
parmfile_count  = 0
input_count     = 0
cluster         = ""
hlq             = userid
prim_alc_adjust = 0
sec_alc_adjust  = 0
primary_lit     = ""
secondary_lit   = ""
skip_lines      = "N"

debug    = ""
Do i = 1 to words(parms)
   Select
     When ABBREV('DEBUG',WORD(parms,i),3) = 1  & ,
        i > 1                                      Then Do
          debug = "DEBUG"
          parms = DELWORD(parms,i,1)
     End
     When WORD(parms,i)  = "TEST"                  Then Do
          processing_mode = "TEST"
          parms = DELWORD(parms,i,1)
     End
     Otherwise Nop
   End
End

If debug = "DEBUG"  then Do
   Trace "I"
End

"NEWSTACK"

If envirnmt <> "BACK" Then Do
  Signal Make_spf_library_allocations
End

cluster  = WORD(parms,1)
parms    = DELWORD(parms,i,1)

Parse var parms "DSN(" parse_value ")"
If parse_value <> "" then cluster = parse_value

Parse var parms "CLUSTER(" parse_value ")"
If parse_value <> "" then cluster = parse_value

cluster  = STRIP(cluster,both,"'")      /* remove enclosed ticks    */
cluster  = STRIP(cluster,both,'"')      /* remove enclosed quotes   */

If LENGTH(cluster) = 0 Then Do
   Say ;
   Say "VSAM Cluster Dataset Name Was Omitted ..."
   Say "REORGVS SYNTAX:  REORGVS Clustername "
   rtcd = 12
   Signal Check_for_Errors
End

If LENGTH(cluster) > 44  Then Do
   Say ;
   Say "Invalid VSAM Cluster Dataset Name Specified ..."
   Say "VSAM Cluster Dataset Name => '"cluster"'"
   Say "REORGVS SYNTAX:  REORGVS Clustername "
   rtcd = 12
   Signal Check_for_Errors
End

/*  See if the VSAM Cluser dataset is cataloged                  */

Call Check_Cataloged

If catlged <> "OK" & catlged <> "UNAVAILABLE DATASET" Then Do
   Say ;
   Say "Cluster Dataset is not cataloged ..."
   Say "Cluster Dataset Name => '"cluster"'"
   rtcd = 12
   Signal Check_for_Errors
End

hlq      =  Userid

Parse var parms "HLQ(" parse_value ")"
If parse_value <> "" then hlq = parse_value

If length(hlq) > 8 & hlq <> USerid  Then Do
   Say ;
   Say "Invalid HLQ Value Specified ..."
   Say "REORGVS SYNTAX:  REORGVS Clustername HLQ(hlq)  "
   rtcd = 12
   Signal Check_for_Errors
End

Parse var parms "PRIMARY(" parse_value ")"
If parse_value <> "" & prim_alc_adjust = 0        Then Do
   prim_alc_adjust = parse_value
End

Parse var parms "PRI(" parse_value ")"
If parse_value <> "" & prim_alc_adjust = 0        Then Do
   prim_alc_adjust = parse_value
End

Parse var parms "SECONDARY(" parse_value ")"
If parse_value <> "" & sec_alc_adjust = 0         Then Do
   sec_alc_adjust = parse_value
End

Parse var parms "SEC(" parse_value ")"
If parse_value <> "" & sec_alc_adjust = 0         Then Do
   sec_alc_adjust = parse_value
End

Call Check_prim_Sec

If rtcd <> 0      Then Do
   Say pmsg
   Say qmsg
   Say rmsg
   Signal Check_for_Errors
End

Signal Allocate_Files

Make_spf_library_allocations:

Address 'ISPEXEC'

"LIBDEF ISPPLIB DATASET ID('OUR.ISPF.ISPPLIB')" <= CHANGE TO YOUR LIB
"LIBDEF ISPMLIB DATASET ID('OUR.ISPF.ISPMLIB')" <= CHANGE TO YOUR LIB

Address 'TSO'

Put_variables_into_appl_pool:

Address 'ISPEXEC'
zplace  = 'ASIS'
'VPUT (ZPLACE)  PROFILE'
vputrc  = rc

Reorg_Vsam_Dataset:

Address 'ISPEXEC'
'VGET (CLUSTER PRIMARY SECONDY HLQ TEST)  PROFILE'
vgetrc  = rc
Address 'TSO'

If primary = "" then primary = "+0"
If secondy = "" then secondy = "+0"
If hlq     = "" then hlq     = Userid
If test    = "" then test    = "N"
csrfield   = "CLUSTER"

Display_Vsam_Reorg_Screen:

Call Get_date_and_time

zcmd     = ""
Address 'ISPEXEC'
"DISPLAY PANEL(REORGPN1) CURSOR("csrfield")"
rtcd     = rc
Address 'TSO'

/*  rtcd = 8 when the END or RETURN key was depressed               */
If rtcd = 8         Then Do
   panel_end = "Y"
   Signal End_up
End

pmsg     = ""

cluster = STRIP(cluster,both,"'")       /* remove enclosed ticks    */
cluster = STRIP(cluster,both,'"')       /* remove enclosed quotes   */

If LENGTH(cluster) = 0 Then Do
   csrfield = "CLUSTER"
   pmsg = "VSAM Cluster Dataset Name Was Omitted ..."
   Signal Display_Vsam_Reorg_Screen
End

If LENGTH(cluster) > 44 Then Do
   csrfield = "CLUSTER"
   pmsg = "Invalid VSAM Cluster Dataset Name Specified - Too Long"
   Signal Display_Vsam_Reorg_Screen
End

Call Check_Cataloged

If catlged <> "OK" & catlged <> "UNAVAILABLE DATASET" Then Do
   csrfield = "CLUSTER"
   pmsg = "Cluster Dataset is not cataloged ..."
   Signal Display_Vsam_Reorg_Screen
End

If LENGTH(primary) > 4   Then Do
   csrfield = "PRIMARY"
   pmsg = "Invalid PRIMARY allocation increase percentage specified"
   Signal Display_Vsam_Reorg_Screen
End

If LENGTH(secondy) > 4   Then Do
   csrfield = "SECONDY"
   pmsg = "Invalid SECONDARY allocation increase percentage specified"
   Signal Display_Vsam_Reorg_Screen
End

prim_alc_adjust  = primary
sec_alc_adjust   = secondy

Call Check_prim_Sec

If rtcd <> 0      Then Do
   Signal Display_Vsam_Reorg_Screen
End

If LENGTH(hlq) > 8   Then Do
   csrfield = "HLQ"
   pmsg = "Invalid HLQ Value Specified ..."
   Signal Display_Vsam_Reorg_Screen
End

If test <> "Y" & test <> "N" Then Do
   csrfield = "TEST"
   pmsg = "Invalid Test Value Specified ..."
   Signal Display_Vsam_Reorg_Screen
End

If Test = "Y" Then Do
   processing_mode = "TEST"
End

Address 'ISPEXEC'
'VPUT (CLUSTER PRIMARY SECONDY HLQ TEST)             PROFILE'
vputrc  = rc
If vputrc <> 0  Then Do
   Say "Error stowing the REOR* Profile Variables"
   Say "VPUT return code =>" vputrc
   Signal End_up
End
Address 'TSO'

Allocate_Files:

fseq          = "0"||random(00001,99999)
PARMFILE_File = hlq||".$REORGVS.PARMFILE.FS"||STRIP(fseq)
JCL_File      = "SMPE.REORGVS.CNTL(REORGVSS)"
SUBMIT_File   = hlq||".$REORGVS.SUBMIT.JCL.FS"||STRIP(fseq)

Output_Parmfile_Record:

"DELETE  '"||PARMFILE_File||"' PURGE"
"ALLOC FI(PARMFILE) DA('"||PARMFILE_File||"') NEW REUSE",
      "SPACE(1,1)  TRACKS  DSORG(PS) RECFM(F B) LRECL(80)",
      "BLKSIZE(0)"
alloc_pf_rc = rc

If alloc_pf_rc <> 0 Then Do
   Queue " "
   Queue "Could not allocate the PARMFILE OUTPUT DATASET ..."
   Queue "Exec REORGVS is Terminated Prematurely    ..."
   Queue "Allocation Return Code is =>" alloc_pf_rc
   rtcd = 12
   Signal End_Up
End

If primary_lit = "" & secondary_lit = "" Then Do
   "EXECIO 0 DISKW PARMFILE (FINIS "
   Signal Check_for_Errors
End

parmfile.1  = primary_lit||" "||secondary_lit

parmfile_count = parmfile_count + 1

"EXECIO 1 DISKW PARMFILE (STEM parmfile. FINIS "
execiorc     = rc
If execiorc <> 0   Then Do
   Queue " "
   Queue "Error executing the EXECIO DISKW Rexx command for file",
       "PARMFILE !!!"
   Queue "File PARMFILE was not properly preallocated or invalid",
       "or an I/O error was encountered"
   Queue "EXECIO Return Code is "execiorc" !!!"
   rtcd = 12
   Signal Check_for_Errors
End

"FREE  FI(PARMFILE) DA('"||PARMFILE_File||"')"

Check_for_Errors:

/********* Debugging Start ****************************************/
/* Queue "&CLUSTER  =" cluster                                    */
/* Queue "&HLQ      =" hlq                                        */
/* Queue "&FSEQ     =" fseq                                       */
/* Queue "&PRI      =" primary_lit                                */
/* Queue "&SEC      =" secondary_lit                              */
/* Queue "Parmfile  =" PARMFILE_File                              */
/* Queue "JCL_File  =" JCL_File                                   */
/* Queue "Submit File =" SUBMIT_File                              */
/********* Debugging End   ****************************************/

If rtcd > 0 & envirnmt  = "BACK" Then Do
   Queue "Exec REORGVS is Terminated Prematurely    ..."
   Signal End_Up
End

If rtcd > 0 & envirnmt <> "BACK" Then Do
   pmsg = "Exec REORGVS is Terminated Prematurely      ..."
   Signal Display_Vsam_Reorg_Screen
End

Allocate_JCL_Skeleton_File:

"ALLOC FI(JCLFILE) DA('"JCL_File"')  SHR REUSE"
alloc_jf_rc = rc

If alloc_jf_rc <> 0 Then Do
   Queue " "
   Queue "Could not allocate the JCL Skeleton Input File ..."
   Queue "JCL Skeleton File is =>" JCL_File
   Queue "Exec REORGVS is Terminated Prematurely    ..."
   rtcd = 12
   Signal End_Up
End

"DELETE  '"||SUBMIT_File||"' PURGE"
"ALLOC FI(SUBMITFL) DA('"||SUBMIT_File||"') NEW REUSE",
      "SPACE(1,1)  TRACKS  DSORG(PS) RECFM(F B) LRECL(80)",
      "BLKSIZE(0)"
alloc_sf_rc = rc

If alloc_sf_rc <> 0 Then Do
   Queue " "
   Queue "Could not allocate the SUBMIT JCL OUTPUT SAVE FILE ..."
   Queue "Exec REORGVS is Terminated Prematurely    ..."
   Queue "Allocation Return Code is =>" alloc_sf_rc
   rtcd = 12
   Signal End_Up
End

"NEWSTACK"

Read_JCL_Loop:

"EXECIO 1 DISKR JCLFILE  (STEM jclfile. "
execiorc     = rc
If execiorc  = 2   Then ,        /* On end of file - Submit JCL */
   Signal Submit_VSAM_Reorg_Job
If execiorc <> 0   Then Do
   Queue " "
   Queue "Error executing the EXECIO DISKR Rexx command for file",
       "JCLFILE !!!"
   Queue "JCL Skeleton File is =>" JCL_File
   Queue "EXECIO Return Code is "execiorc" !!!"
   Queue "Exec REORGVS is Terminated Prematurely    ..."
   rtcd = 12
   Signal End_up
End

input_count = input_count + 1

Select
  When input_count = 1 & processing_mode = "TEST"           Then Do
       jclfile.1 = Overlay("T",jclfile.1,8,1)
       jclfile.1 = Overlay(Right(fseq,2,"0"),jclfile.1,9,2)
       jobname = Substr(jclfile.1,3,8)
  End
  When input_count = 1                                      Then Do
       jclfile.1 = Overlay(Right(fseq,3,"0"),jclfile.1,8,3)
       jobname = Substr(jclfile.1,3,8)
  End
  Otherwise Nop
End

Check_for_Test_Mode_Bypass:

If SUBSTR(jclfile.1,1,10) = "//**//SKIP"     Then Do
   skip_lines = "Y"
   Signal Read_JCL_Loop
End

If SUBSTR(jclfile.1,1,12) = "//**//RESUME"   Then Do
   skip_lines = "N"
   Signal Read_JCL_Loop
End

If skip_lines = "Y" & processing_mode = "TEST"   Then Do
   Signal Read_JCL_Loop
End

Substitute_Skeleton_Variables:

len_jcl1 = length(jclfile.1)

cluster_pos    = POS("&CLUSTER",jclfile.1)
If cluster_pos > 0  Then Do
   cluster_end  = cluster_pos  + 8
   jcl_part1 = SUBSTR(jclfile.1,1,cluster_pos - 1)
   jcl_part2 = SUBSTR(jclfile.1,cluster_end, len_jcl1 - cluster_end )
   jclfile.1 = jcl_part1||cluster||jcl_part2
   jclfile.1 = Left(jclfile.1,80," ")
End

hlq_pos    = POS("&HLQ",jclfile.1)
If hlq_pos > 0  Then Do
   hlq_end   = hlq_pos  + 4
   jcl_part1 = SUBSTR(jclfile.1,1,hlq_pos - 1)
   jcl_part2 = SUBSTR(jclfile.1,hlq_end, len_jcl1 - hlq_end )
   jclfile.1 = jcl_part1||hlq||jcl_part2
   jclfile.1 = Left(jclfile.1,80," ")
End

fseq_pos    = POS("&FSEQ",jclfile.1)
If fseq_pos > 0  Then Do
   fseq_end   = fseq_pos  + 5
   jcl_part1 = SUBSTR(jclfile.1,1,fseq_pos - 1)
   jcl_part2 = SUBSTR(jclfile.1,fseq_end, len_jcl1 - fseq_end )
   jclfile.1 = jcl_part1||fseq||jcl_part2
   jclfile.1 = Left(jclfile.1,80," ")
End

Queue  jclfile.1         /* Send Tailored JCL Line to the Queue  */

Signal Read_JCL_Loop

Submit_VSAM_Reorg_Job:

"EXECIO 0 DISKR JCLFILE  (FINIS"
"FREE FI(JCLFILE)  DA('"JCL_File"')"

QUEUE ""   /* Add a null line to indicate the end of information */

"EXECIO * DISKW SUBMITFL (FINIS     "
execiorc     = rc
"DELSTACK"

If execiorc <> 0   Then Do
   Queue ;
   Queue "Error executing the EXECIO DISKW Rexx command for file",
       "SUBMITFL !!!"
   Queue "EXECIO Return Code is "execiorc" !!!"
   Queue "Exec REORGVS is Terminated Prematurely    ..."
   rtcd = 12
   Signal End_up
End

Build_Internal_Reader_JCL_Stream:

"EXECIO 0 DISKW SUBMITFL (FINIS"
"FREE FI(SUBMITFL) DA('"||SUBMIT_File||"')"

"ALLOC FI(SYSUT1) DA('"||SUBMIT_File||"')  SHR REUSE"
"ALLOC FI(SYSUT2) SYSOUT(A) WRITER(INTRDR)  REUSE"
alloc_sf_rc = rc
If alloc_sf_rc <> 0 Then Do
   Queue " "
   Queue "Could not allocate the INTRDR JCL Submit Stream ..."
   Queue "Allocation Return Code is =>" alloc_sf_rc
   Queue "Exec REORGVS is Terminated Prematurely    ..."
   rtcd = 12
   Signal End_Up
End

"ALLOC FI(SYSIN)    DUMMY                      REUSE"
"ALLOC FI(SYSPRINT) DUMMY                      REUSE"
"ALLOC FI(SYSUDUMP) DUMMY                      REUSE"

/* Address "LINKMVS" "IEBGENER" */
"TSOEXEC CALL *(IEBGENER)"

IEBGENER_rc   = rc
If IEBGENER_rc <> 0   Then Do
   Queue " "
   Queue "ERROR Submitting the JCL stream into the Internal Reader ..."
   Queue "IEBGENER Return Code is =>" IEBGENER_rc
   Queue "Exec REORGVS is Terminated Prematurely    ..."
   rtcd = 12
   Signal End_Up
End

"FREE DA('"||SUBMIT_File||"')"
"FREE FI(SYSUT1 SYSUT2 SYSIN SYSPRINT SYSUDUMP)"

Queue " "
Queue "REORGVS Exec - Submit Reorganization Job ..."
Queue " "
Queue "version_level                =>" version_level
Queue " "
Queue "Exec REORGVS - Processing Mode is" processing_mode "mode"

If processing_mode = "TEST" Then Do
   Queue " "
   Queue "All Update steps will be bypassed in TEST mode ..."
End

Queue " "
If processing_mode = "TEST" Then Do
   Queue "Job" jobname "has been submitted to test the reorg of cluster"
   Queue "  '"cluster"'"
End
Else Do
   Queue "Job" jobname "has been submitted to reorg VSAM cluster"
   Queue "  '"cluster"'"
End
Queue "Work datasets begin with HLQ's '"hlq".$REORGVS' ... "
Queue "Work datasets end with LLQ    'FS"fseq"' ...  "
Queue " "
Queue "SUBMIT JCL for cluster '"cluster"' saved on "sysid" in dataset"
Queue " '"hlq".$REORGVS.SUBMIT.JCLFILE.FS"fseq"' ..."
Queue " "
Queue "Backup Image of cluster '"cluster"' saved on "sysid" in dataset"
Queue " '"hlq".$REORGVS.EXPORT.IMAGE.FS"fseq"' ..."
Queue " "
Signal End_Up

Get_date_and_time:
/*  Date and Time Retrieval internal subroutine                      */
time     = time()
sdate    = date(u)
If substr(sdate,7,2) > '70' then cen = '19'
Else                             cen = '20'
date     = ''substr(sdate,1,6)''cen''substr(sdate,7,2)''
juldate  = ''cen''date(julian)''
Return

Check_Cataloged:
catlged  = SYSDSN("'"cluster"'")
Return

Check_Prim_Sec:
rtcd = 0
If prim_alc_adjust <> 0                                 Then Do
   len_pri = LENGTH(prim_alc_adjust)
   pri_num = SUBSTR(prim_alc_adjust,2,len_pri - 1)
   If SUBSTR(prim_alc_adjust,1,1) <> "+" & ,
      SUBSTR(prim_alc_adjust,1,1) <> "-"           Then Do
      pmsg = "Leading Plus (+) or Minus (-) Sign Omitted",
          "on Primary Allocation % Adjustment parm"
      zedsmsg = "Value passed is =>" prim_alc_adjust
      zedlmsg = "Syntax is => PRI(+NNN) or PRI(-NNN)"
      csrfield = "PRIMARY"
      rtcd = 12
      Return
   End
   If DATATYPE(pri_num,"W") = 0 | LENGTH(pri_num) > 3   Then Do
      pmsg = "Invalid Primary Allocation Adjustment % parm Passed =>",
           prim_alc_adjust
      zedsmsg = "Syntax is => PRI(+NNN) or PRI(-NNN)"
      zedlmsg = "Adjustment Value must be numeric and must not exceed",
           "3 digits in length"
      csrfield = "PRIMARY"
      rtcd = 12
      Return
   End
End

primary_lit  = "PRI("||prim_alc_adjust||")"

If sec_alc_adjust <> 0                                  Then Do
   len_sec = LENGTH(sec_alc_adjust)
   sec_num = SUBSTR(sec_alc_adjust,2,len_sec - 1)
   If SUBSTR(sec_alc_adjust,1,1) <> "+" & ,
      SUBSTR(sec_alc_adjust,1,1) <> "-"            Then Do
      pmsg = "Leading Plus (+) or Minus (-) Sign Omitted",
          "on Secondary Allocation % Adjustment parm"
      zedsmsg = "Value passed is =>" sec_alc_adjust
      zedlmsg = "Syntax is => SEC(+NNN) or SEC(-NNN)"
      csrfield = "SECONDY"
      rtcd = 12
      Return
   End
   If DATATYPE(sec_num,"W") = 0 | LENGTH(sec_num) > 3   Then Do
      pmsg = "Invalid Secondary Allocation Adjustment % parm Passed =>",
           sec_alc_adjust
      zedsmsg = "Syntax is => SEC(+NNN) or SEC(-NNN)"
      zedlmsg = "Adjustment Value must be numeric and must not exceed",
           "3 digits in length"
      csrfield = "SECONDY"
      rtcd = 12
      Return
   End
End

secondary_lit  = "SEC("||sec_alc_adjust||")"

Return

End_Up:

Address 'TSO'
"EXECIO 0 DISKR JCL      (FINIS"
"EXECIO 0 DISKW SUBMITFL (FINIS"
"FREE  FI(PARMFILE) DA('"||PARMFILE_File||"')"
"FREE FI(SUBMITFL) DA('"||SUBMIT_File||"')"
"FREE DA('"||SUBMIT_File||"')"
"FREE FI(SYSUT1 SYSUT2 SYSIN SYSPRINT SYSUDUMP)"

pmsg = "REORGVS exec return code is =>" rtcd
Queue " "
Queue pmsg
Queue ""

If envirnmt  = "BACK" & panel_end = "N" Then Do
   Do i = 1 to Queued()
      Pull line.i
         Say line.i
   End
End

If envirnmt <> "BACK" & panel_end = "N" Then Do
   Do i = 1 To 20
      Interpret 'LINE'i' = ""'
   End
   Do i = 1 To Queued()
      Pull line.i
      Interpret 'LINE'i' = LINE.'i
   End
   zcmd     = ''
   Address 'ISPEXEC'
   "DISPLAY PANEL(REORGPN2)"
   rtcd     = rc
   Address 'TSO'
   If rtcd <> 8  Then Signal Reorg_Vsam_Dataset
   Address 'ISPEXEC'
   "LIBDEF ISPPLIB"
   "LIBDEF ISPMLIB"
   Address 'TSO'
End

"DELSTACK"

Return rtcd
