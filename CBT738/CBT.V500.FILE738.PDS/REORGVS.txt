/* REXX  REORGVS                                                      */
/**********************************************************************/
/*  MODULE  = REORGVS    (Reorg a VSAM Cluster)                       */
/*                                                                    */
/*  #¢# AUTHOR             TKMILLE                                    */
/*  #¢# CREATED            TKMILLE 11/10/2005                         */
/*  #¢# LAST UPDATE        TKMILLE 05/26/2009                         */
/*                                                                    */
/*  PURPOSE = This exec wil call exec REORGVSX to present a menu to   */
/*            the user to reorganize VSAM datasets.                   */
/*                                                                    */
/*  ENVIRON = It will invoke itself a second time if it is not called */
/*            from the SPF environment.                               */
/*                                                                    */
/*  PARMS:  DEBUG  = Turns on the interactive REXX debugging option.  */
/*                                                                    */
/*  REORGVS Function:                                                 */
/*                                                                    */
/*      This exec will call exec REORGVSX to submit a job to          */
/*      reorganize a VSAM cluster.                                    */
/*      It will input the cluster dataset name and optionally         */
/*      the high-level qualifier for the work files.                  */
/*      It will generate a random number between 1 and 999999         */
/*      to use in the low-level qualifier for uniqueness.             */
/*                                                                    */
/*      If REORGVS is called in the foreground, it will invoke        */
/*      REORGVSX which will present an ISPF panel to the user         */
/*      to obtain the parms.  If REORGVS is called in the             */
/*      background, the user must supply the parms as defined         */
/*      below.                                                        */
/*                                                                    */
/*      REORGVSX will input a stream of jcl to tailor and to          */
/*      submit in the background.  It will substitute the             */
/*      variables that the invoker provides to this exec              */
/*      before submitting the job.  The jcl stream will be            */
/*      saved in a dataset (&HLQ.$REORGVS.SUBMIT.JCL.FS&FSEQ).        */
/*                                                                    */
/*      These skeleton variables will be substited:                   */
/*        &CLUSTER  (User provided to this exec)                      */
/*        &HLQ      (User provided to this exec)                      */
/*        &FSEQ     (Not user provided - this is a random             */
/*                   number generated within this exec).              */
/*                                                                    */
/*  PARMS:                                                            */
/*  (Required Parms):                                                 */
/*          CLUSTERNAME = The dsname of the VSAM Cluster to be        */
/*                        reorged.  This must be the first parameter. */
/*                        It is positional in nature and cannot be    */
/*                        omitted.                                    */
/*                                                                    */
/*  (Optional Parms):                                                 */
/*                                                                    */
/*        HLQ(hlq) = The name of the high-level qualifier to use      */
/*                   for the work datasets.  The default hlq will     */
/*                   be the invoker's userid.                         */
/*                                                                    */
/*       PRI(+NNN) = This parameter increases or decreases the        */
/*    or PRI(-NNN)   primary space allocation for the cluster         */
/*                   (relative to what it was before).                */
/*                   The syntax is: +nnn or -nnn.  nnn must be        */
/*                   numeric value between 1 and 999 and must be      */
/*                   preceded with either a "+" or "-". nnn           */
/*                   represents a percentage value of increase or     */
/*                   decrease against the previous primary            */
/*                   allocation value.                                */
/*                                                                    */
/*       SEC(+NNN) = This parameter increases or decreases the        */
/*    or SEC(-NNN)   secondary space allocation for the cluster       */
/*                   (relative to what it was before).                */
/*                   The syntax is: +nnn or -nnn.  nnn must be        */
/*                   numeric value between 1 and 999 and must be      */
/*                   preceded with either a "+" or "-". nnn           */
/*                   represents a percentage value of increase or     */
/*                   decrease against the previous secondary          */
/*                   allocation value.                                */
/*                                                                    */
/*          TEST   = This parameter will cause a test simulation of   */
/*                   the reorganization.  It will not update the      */
/*                   cluster or affect it.  It will only generate     */
/*                   the work files which can be inspected.  This     */
/*                   is considered a TEST pass execution. Some of     */
/*                   the jcl skeleton steps will not be executed.     */
/*                                                                    */
/*          DEBUG  = The parameter which displays the statements as   */
/*                   they are executed (invokes TRACE I)              */
/*                                                                    */
/*  Example Background Calls:                                         */
/*                                                                    */
/*  1) REORGVS my.vsam.dataset)                                       */
/*  2) REORGVS my.vsam.dataset) HLQ(SYS5)                             */
/*  3) REORGVS my.vsam.dataset) HLQ(SYS5) PRI(+05)                    */
/*  4) REORGVS my.vsam.dataset) PRI(+10)                              */
/*  5) REORGVS my.vsam.dataset) PRI(+10) SEC(+10)                     */
/*  6) REORGVS my.vsam.dataset) PRI(-50) SEC(-50)                     */
/*  7) REORGVS my.vsam.dataset) TEST                                  */
/*  8) REORGVS my.vsam.dataset) PRI(+10) SEC(+10) TEST                */
/*                                                                    */
/*  Example Background Call Explanations:                             */
/*                                                                    */
/*  1) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*  2) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and create work datasets with the HLQ of 'SYS5'.            */
/*  3) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and create work datasets with the HLQ of 'SYS5'             */
/*        and increase the data component's primary                   */
/*        allocation units value by 5%                                */
/*  4) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and increase the data component's primary                   */
/*        allocation units value by 10%                               */
/*  5) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and increase the data component's primary                   */
/*        allocation units value by 10% and increase                  */
/*        data component's secondary allocation units                 */
/*        value by 10%. (Note, if the secondary                       */
/*        allocation unit is presently zero, it will                  */
/*        remain 0 after the adjustment).                             */
/*  6) REORG Vsam Cluster named 'MY.VSAM.DATASET'                     */
/*        and decrease the data component's primary                   */
/*        allocation units value by 50% and decrease                  */
/*        data component's secondary allocation units                 */
/*        value by 50%. (Note, if the secondary                       */
/*        allocation unit is presently zero, it will                  */
/*        remain 0 after the adjustment).                             */
/*  7) Test the Reorganization (Simulation pass) of the Vsam          */
/*        Cluster named 'MY.VSAM.DATASET'.  Does not affect the       */
/*        Cluster on a TEST pass simulation.                          */
/*  8) Test the Reorganization (Simulation pass) of the Vsam          */
/*        Cluster named 'MY.VSAM.DATASET' and of increasing the       */
/*        primary allocation units by +10% and of increasing the      */
/*        secondary allocation units by +10%.                         */
/*        Does not affect the Cluster on a TEST pass simulation.      */
/*                                                                    */
/*  Installation Tailoring:                                           */
/*        Do a FIND on "SYSPROC".  Change this dataset name to        */
/*        the SYSPROC dataset name for your installation.             */
/*                                                                    */
/*  Return Codes:                                                     */
/*                                                                    */
/*    0   - Successful   execution of this exec                       */
/*   12   - Unsuccessful execution of this exec                       */
/*                                                                    */
/**********************************************************************/
version_level = "V01.02.01"
Arg parms
Trace "O"
rtcd     = 0
msg_stat = Msg("OFF")
envirnmt = Sysvar("sysenv")
nesting  = Sysvar("sysnest")
sysicmd  = Sysvar("sysicmd")
syspcmd  = Sysvar("syspcmd")
sysscmd  = Sysvar("sysscmd")
sysid    = Left(MVSVAR(sysname),3," ")
Address "TSO"
sysproc_lib  = "SYS1.MVSCMD"     <= CHANGE TO YOUR SYSPROC DSNAME

Get_parms:

debug    = ""
Do I = 1 to words(parms)
         If word(parms,I) = "D"         then debug    = "DEBUG"
    Else If word(parms,I) = "DE"        then debug    = "DEBUG"
    Else If word(parms,I) = "DEB"       then debug    = "DEBUG"
    Else If word(parms,I) = "DEBU"      then debug    = "DEBUG"
    Else If word(parms,I) = "DEBUG"     then debug    = "DEBUG"
end
If debug = "DEBUG"  then  Trace "I"

If envirnmt = "BACK" Then Do
  "%REORGVSX" parms
  Signal End_Up
End

Check_for_ISPF_environment:

If Sysvar("SYSISPF") <> "ACTIVE"  Then Do
/*  Make a recursive call to this exec to invoke the ISPF environment */
   "ISPF CMD(%REORGVS" parms ")"
   Return 0
End

Allocate_sysproc:

"ALLOC FI(SYSPROC) DA('"sysproc_lib"' ***) SHR REUSE"
sysproc_allocation = tsopext

/* If my new lib is already in the concatenation, back it out  */
If POS("'"sysproc_lib"'",sysproc_allocation) > 0 Then
    "ALLOC FI(SYSPROC) DA("sysproc_allocation") SHR REUSE"

Call_REORGVS_Application:

Address "ISPEXEC"
"SELECT CMD(%REORGVSX" parms ") NEWAPPL(REOR) PASSLIB"

Address "TSO"
If sysproc_allocation <> "" Then
     "ALLOC FI(SYSPROC) DA("sysproc_allocation") SHR REUSE"
Else "FREE FI(SYSPROC)"

End_Up:
Return rtcd
