/*  REXX                                                              */
/**********************************************************************/
/*  MODULE  = REORGVS2   (Recreate a VSAM Cluster - Used with the     */
/*                        REORGVS exec).                              */
/*                                                                    */
/*  #¢# AUTHOR             TKMILLE                                    */
/*  #¢# CREATED            TKMILLE 01/04/2006                         */
/*  #¢# LAST UPDATE        TKMILLE 09/16/2008                         */
/*                                                                    */
/*  PURPOSE                                                           */
/*                                                                    */
/*            The exec will input an IDCAMS LISTC SYSPRINT file and   */
/*            will parse out the appropriate parameters to recreate   */
/*            a VSAM cluster.                                         */
/*                                                                    */
/*            Input File SYSPRINT must be preallocated prior to the   */
/*            execution of this exec.                                 */
/*                                                                    */
/*            The exec will also input a PARMFILE which is passed     */
/*            from exec REORGVS.  It can be empty or it can contain   */
/*            parms passed from exec REORGVS:                         */
/*                PRI(+/-nnn) and/or SEC(+/-nnn).                     */
/*            If the PRI(+NNN) or SEC(+NNN) execution parameters      */
/*            are passed upon invocation, the exec will input         */
/*            a PARMFILE file.  Otherwise, this file will be empty.   */
/*            The PARMFILE contains two parameters to be used to      */
/*            adjust the PRIMARY and SECONDARY allocation values      */
/*            (either increase or decrease the values by a percentage */
/*            adjustment.  Syntax is PRI(+nnn) or PRI(-nnn) and       */
/*            SEC(+nnn) or SEC(-nnn). This parmfile record is         */
/*            optional (i.e., the file may be empty)                  */
/*                                                                    */
/*            Input File PARMFILE must be preallocated prior to the   */
/*            execution of this exec.                                 */
/*                                                                    */
/*            Output File DEFINES must be preallocated prior to the   */
/*            execution of this exec.                                 */
/*                                                                    */
/*            Output File AIXCMDS must be preallocated prior to the   */
/*            execution of this exec.                                 */
/*                                                                    */
/*            The output of this exec will be a stream of IDCAMS      */
/*            DEFINE CLUSTER commands which will be used to           */
/*            recreate a VSAM cluster.                                */
/*                                                                    */
/*            If there are any AIX files associated to the VSAM       */
/*            cluster, this exec will output LISTC ENT ALL(AIXdsn)    */
/*            comands to the AIX output file.  Otherwise, this file   */
/*            will be empty.                                          */
/*                                                                    */
/*                                                                    */
/*  (Optional Input Parms on Input File PARMFILE):                    */
/*                                                                    */
/*       PRI(+NNN) = This parameter increases or decreases the        */
/*    or PRI(-NNN)   primary space allocation for the cluster         */
/*                   (relative to what it was before).                */
/*                   The syntax is: +nnn or -nnn.  nnn must be        */
/*                   numeric value between 1 and 999 and must be      */
/*                   preceded with either a "+" or "-". nnn           */
/*                   represents a percentage value of increase or     */
/*                   decrease against the previous primary            */
/*                   allocation value.                                */
/*                                                                    */
/*       SEC(+NNN) = This parameter increases or decreases the        */
/*    or SEC(-NNN)   secondary space allocation for the cluster       */
/*                   (relative to what it was before).                */
/*                   The syntax is: +nnn or -nnn.  nnn must be        */
/*                   numeric value between 1 and 999 and must be      */
/*                   preceded with either a "+" or "-". nnn           */
/*                   represents a percentage value of increase or     */
/*                   decrease against the previous secondary          */
/*                   allocation value.                                */
/*                                                                    */
/*  PARMS:                                                            */
/*  (Required Parms):                                                 */
/*                                                                    */
/*          None                                                      */
/*                                                                    */
/*          DEBUG  =      The parameter which displays the statements */
/*                        as they are executed.                       */
/*                                                                    */
/*  Modifications/Tailoring:                                          */
/*                                                                    */
/*  Make the following modification before storing this Rexx exec.    */
/*                                                                    */
/*  1)        Change the length of "sysid" to your specification.     */
/*            The default is 3 characters if this is not              */
/*            modified.                                               */
/*                                                                    */
/*                                                                    */
/*  Return Codes:                                                     */
/*                                                                    */
/*    0   - Successful execution of the exec                          */
/*   12   - Invalid SYSPRINT input file or SYSPRINT file was not      */
/*          preallocated or Invalid DEFINES, REPORT, or AIXCMDS files */
/*          or these files were not preallocated.                     */
/*                                                                    */
/**********************************************************************/
version_level = "V01.01.08"
Arg parms
Trace "O"

debug    = ""
Do i = 1 to words(parms)
         If ABBREV("DEBUG",word(parms,i),3) = 1  then Do
            debug = "DEBUG"
            parms = DELWORD(parms,i,1)
            i = i - 1
            iterate
         End
End
If debug = "DEBUG"  then Do
   Trace "I"
End

userid             = Userid()
rtcd               = 0
sysid              = Left(MVSVAR(sysname),3," ")
parmfile_count     = 0
cmd_count          = 0
input_count        = 0
def_output_count   = 0
aix_output_count   = 0
print_count        = 0
line_count         = 99

litdel        = "  DELETE "
lit2          = "  IF LASTCC = 8           "
lit3          = "    THEN IF MAXCC LT 12   "
lit4          = "      THEN SET MAXCC = 0  "
lit5          = "  DEFINE                  "
litclus       = "    CLUSTER (NAME("
indent        = "            "
litdata       = "       DATA (NAME("
litindx       = "      INDEX (NAME("
filler        = Copies(" ",80)

heading_1     = "   VSAM Cluster Dataset Allocation Information"
heading_2     = "   VSAM Cluster                                Data",
                "  Managemt Storage  Data"
heading_3     = "   Dataset Name                               Volser",
                "  Class    Class   Class"

Get_Invocation_Parms:

prim_alc_adjust      = 0
sec_alc_adjust       = 0
prim_adj_round       = +.5
sec_adj_round        = +.5

"EXECIO 1 DISKR PARMFILE (STEM parmfile. FINIS "
execiorc     = rc

If execiorc  = 2   Then ,        /* On end of file - Go On      */
   Signal Read_SYSPRINT_Loop

parmfile_count = parmfile_count + 1

If execiorc <> 0   Then Do
   Say ;
   Say "Error executing the EXECIO DISKR Rexx command for file",
       "PARMFILE !!!"
   Say "File PARMFILE was not properly preallocated or is invalid",
   Say "Input I/O count is " parmfile_count
   Say "EXECIO Return Code is "execiorc" !!!"
   Say "Exec REORGVS2 is Terminated Prematurely     ..."
   rtcd = 12
   Signal End_up
End

parm_rec = parmfile.1

Parse var parm_rec "PRI(" parse_value ")"
If parse_value <> "" & prim_alc_adjust = 0        Then Do
   prim_alc_adjust = parse_value
   Say ;
   Say "Primary   Allocation Adjustment Percentage =" prim_alc_adjust
   If SUBSTR(prim_alc_adjust,1,1) = "-"           Then ,
      prim_adj_round = -.5
End

Parse var parm_rec "SEC(" parse_value ")"
If parse_value <> "" & sec_alc_adjust = 0         Then Do
   sec_alc_adjust = parse_value
   Say ;
   Say "Secondary Allocation Adjustment Percentage =" sec_alc_adjust
   If SUBSTR(sec_alc_adjust,1,1) = "-"            Then ,
      sec_adj_round = -.5
End

Read_SYSPRINT_Loop:

input_count = input_count + 1

"EXECIO 1 DISKR SYSPRINT (STEM sysprint. "
execiorc     = rc
If execiorc  = 2   Then ,        /* On end of file - Finish up  */
   Signal End_Up
If execiorc <> 0   Then Do
   Say ;
   Say "Error executing the EXECIO DISKR Rexx command for file",
       "SYSPRINT !!!"
   Say "File SYSPRINT was not properly preallocated or is invalid",
   Say "Input I/O count is " input_count
   Say "EXECIO Return Code is "execiorc" !!!"
   Say "Exec REORGVS2 is Terminated Prematurely     ..."
   rtcd = 12
   Signal End_up
End

p1  = POS("LISTC ALL ENT",sysprint.1)
If p1  > 0                                         Then Do
   Call   Initialize_Variables
   Signal Read_SYSPRINT_Loop
End

nf  = POS(" NOT FOUND ",sysprint.1)
If nf  > 0                                         Then ,
   not_fnd = "Y"

If not_fnd = "Y"                                   Then ,
   Signal Read_SYSPRINT_Loop

p2  = POS("CLUSTER -------",sysprint.1)
If p2  > 0  & level = ""                           Then Do
   cluster     = SUBSTR(sysprint.1,p2 + 16,44)
   cluster     = STRIP(cluster,both)
   level       = "CLUSTER"
   Signal Read_SYSPRINT_Loop
End

p2a = POS("AIX------",sysprint.1)
If p2a > 0  & level = "CLUSTER"                    Then Do
   aix         = SUBSTR(sysprint.1,p2a + 9,44)
   aix         = STRIP(aix,both)
   Call Output_AIX_LISTC_Record
   Signal Read_SYSPRINT_Loop
End

p3  = POS(" DATA -------",sysprint.1)
If p3  > 0  & level = "CLUSTER"                    Then Do
   data        = SUBSTR(sysprint.1,p3 + 14,44)
   data        = STRIP(data,both)
   level       = "DATA"
   Signal Read_SYSPRINT_Loop
End

p4  = POS(" KEYLEN------",sysprint.1)
If p4  > 0  & level = "DATA"                       Then Do
   parse_it    = SUBSTR(sysprint.1,p4 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   keylen      = STRIP(parse_it,leading,"0")
   If keylen   = ""  Then keylen       = 0
End

p5  = POS(" AVGLRECL----",sysprint.1)
If p5  > 0  & level = "DATA"                       Then Do
   parse_it    = SUBSTR(sysprint.1,p5 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   avglrecl    = STRIP(parse_it,leading,"0")
   If avglrecl = ""  Then avglrecl     = 0
End

p6  = POS(" BUFSPACE----",sysprint.1)
If p6  > 0  & level = "DATA"                       Then Do
   parse_it    = SUBSTR(sysprint.1,p6 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   buffer      = STRIP(parse_it,leading,"0")
   If buffer   = ""  Then buffer       = 0
End

p7  = POS(" CISIZE----",sysprint.1)
If p7  > 0  & level = "DATA"                       Then Do
   parse_it    = SUBSTR(sysprint.1,p7 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   dcisize     = STRIP(parse_it,leading,"0")
   If dcisize  = ""  Then dcisize      = 0
End

p8  = POS(" RKP---------",sysprint.1)
If p8  > 0  & level = "DATA"                       Then Do
   parse_it    = SUBSTR(sysprint.1,p8 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   rkp         = STRIP(parse_it,leading,"0")
   If rkp      = ""  Then rkp          = 0
End

p9  = POS(" MAXLRECL----",sysprint.1)
If p9  > 0  & level = "DATA"                       Then Do
   parse_it    = SUBSTR(sysprint.1,p9 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   maxlrecl    = STRIP(parse_it,leading,"0")
   If maxlrecl = ""  Then maxlrecl     = 0
End

p10 = POS(" SHROPTNS(",sysprint.1)
If p10 > 0  & level = "DATA"                       Then Do
   shr_opt1    = SUBSTR(sysprint.1,p10 + 10,1)
   shr_opt2    = SUBSTR(sysprint.1,p10 + 12,1)
End

ptype_e  = POS(" NONINDEXED",sysprint.1)
ptype_k  = POS(" INDEXED",sysprint.1)
ptype_l  = POS(" LINEAR",sysprint.1)
ptype_n  = POS(" NUMBERED",sysprint.1)

If ptype_e > 0  & level = "DATA"                   Then Do
   type_vs = "NONINDEXED"
End

If ptype_k > 0  & level = "DATA"                   Then Do
   type_vs = "INDEXED"
End

If ptype_l > 0  & level = "DATA"                   Then Do
   type_vs = "LINEAR"
End

If ptype_n > 0  & level = "DATA"                   Then Do
   type_vs = "NUMBERED"
End

p11 = POS(" SPEED ",sysprint.1)
If p11 > 0  & level = "DATA"                       Then Do
   spd_rec     = "SPEED"
End

p12 = POS(" RECOVERY ",sysprint.1)
If p12 > 0  & level = "DATA"                       Then Do
   spd_rec     = "RECOVERY"
End

p13 = POS(" STORAGECLASS",sysprint.1)
If p13 > 0  & level = "CLUSTER"       & ,
   SUBSTR(sysprint.1,p13 + 17,8) <> "--(NULL)"     Then Do
      sc          = SUBSTR(sysprint.1,p13 + 17,8)
      sc          = TRANSLATE(sc," ","-")
      sc          = STRIP(sc)
End

p14 = POS(" MANAGEMENTCLASS",sysprint.1)
If p14 > 0  & level = "CLUSTER"       & ,
   SUBSTR(sysprint.1,p14 + 17,8) <> "--(NULL)"     Then Do
      mc          = SUBSTR(sysprint.1,p14 + 17,8)
      mc          = TRANSLATE(mc," ","-")
      mc          = STRIP(mc)
End

p15 = POS(" DATACLASS",sysprint.1)
If p15 > 0  & level = "CLUSTER"       & ,
   SUBSTR(sysprint.1,p15 + 17,8) <> "--(NULL)"     Then Do
      dc          = SUBSTR(sysprint.1,p15 + 17,8)
      dc          = TRANSLATE(dc," ","-")
      dc          = STRIP(dc)
End

p17 = POS(" NOREUSE",sysprint.1)
If p17 > 0  & level = "DATA"                       Then Do
   reuse       = "NOREUSE"
End

p18 = POS(" REUSE",sysprint.1)
If p18 > 0  & level = "DATA"                       Then Do
   reuse       = "REUSE"
End

p19 = POS(" NONSPANNED",sysprint.1)
If p19 > 0  & level = "DATA"                       Then Do
   spanned     = "NONSPANNED"
End

p20 = POS(" SPANNED",sysprint.1)
If p20 > 0  & level = "DATA"                       Then Do
   spanned        = "SPANNED"
End

p21 = POS(" FREESPACE-",sysprint.1)
Select
   When p21   <= 0                                 Then Nop
   When level <> "DATA"                            Then Nop
   When SUBSTR(sysprint.1,p21 + 12,2) = "CI"       Then Do
        parse_it    = SUBSTR(sysprint.1,p21 + 17,8)
        parse_it    = STRIP(parse_it,both)
        parse_it    = TRANSLATE(parse_it,"0","-")
        fs_ci       = STRIP(parse_it,leading,"0")
        If fs_ci    = ""  Then fs_ci = 0
   End
   When SUBSTR(sysprint.1,p21 + 12,2) = "CA"       Then Do
        parse_it    = SUBSTR(sysprint.1,p21 + 17,8)
        parse_it    = STRIP(parse_it,both)
        parse_it    = TRANSLATE(parse_it,"0","-")
        fs_ca       = STRIP(parse_it,leading,"0")
        If fs_ca    = ""  Then fs_ca = 0
   End
   Otherwise Nop
End

p22 = POS(" UNORDERED",sysprint.1)
If p22 > 0  & level = "DATA"                       Then Do
   ordered     = "UNORDERED"
End

p22b = POS(" ORDERED",sysprint.1)
If p22b > 0  & level = "DATA"                       Then Do
   ordered        = "ORDERED"
End

p22c = POS(" NOERASE",sysprint.1)
If p22c > 0  & level = "DATA"                       Then Do
   erase       = "NOERASE"
End

p22d = POS(" ERASE",sysprint.1)
If p22d > 0  & level = "DATA"                       Then Do
   erase          = "ERASE"
End

p23 = POS(" SPACE-TYPE-----",sysprint.1)
If p23 > 0  & level = "DATA"                       Then Do
   dsp_type       = SUBSTR(sysprint.1,p23 + 17,8)
   dsp_type       = TRANSLATE(dsp_type," ","-")
   dsp_type       = STRIP(dsp_type)
End

p24 = POS(" SPACE-PRI------",sysprint.1)
If p24 > 0  & level = "DATA"                       Then Do
   parse_it    = SUBSTR(sysprint.1,p24 + 17,8)
   parse_it    = STRIP(parse_it,both)
   dprim       = TRANSLATE(parse_it,"0","-")
   dprim       = dprim + (dprim * prim_alc_adjust / 100) + ,
                     prim_adj_round
   parse_it    = TRUNC(dprim)
   dprim       = STRIP(parse_it,leading,"0")
   If dprim    = ""  Then dprim        = 0
End

p25 = POS(" SPACE-SEC------",sysprint.1)
If p25 > 0  & level = "DATA"                       Then Do
   parse_it    = SUBSTR(sysprint.1,p25 + 17,8)
   parse_it    = STRIP(parse_it,both)
   dsec        = TRANSLATE(parse_it,"0","-")
   dsec        = dsec  + (dsec  * sec_alc_adjust / 100) + ,
                     sec_adj_round
   parse_it    = TRUNC(dsec)
   dsec        = STRIP(parse_it,leading,"0")
   If dsec     = ""  Then dsec         = 0
End

p26 = POS(" VOLSER------",sysprint.1)
If p26 > 0  & level = "DATA" & dvolser = ""        Then Do
   dvolser     = SUBSTR(sysprint.1,p26 + 19,6)
End

If p26 > 0  & SUBSTR(sysprint.1,p26 + 19,6) = "MIGRAT"    Then Do
   not_fnd = "Y"
End

p27 = POS(" NOWRITECHK",sysprint.1)
If p27 > 0  & level = "DATA"                       Then Do
   writechk    = "NOWRITECHECK"
End

p28 = POS(" WRITECHK",sysprint.1)
If p28 > 0  & level = "DATA"                       Then Do
   writechk    = "WRITECHECK"
End

/*  UNIQUE and SUALLOCATION keywords are no longer used           */
/*  variables unique_sub and lit15 have been deleted  05/24/2006  */
/*                                                                */
/*  p29 = POS(" UNIQUE",sysprint.1)                               */
/*  If p29 > 0  & level = "DATA"                       Then Do    */
/*     unique_sub  = "UNIQUE"                                     */
/*  End                                                           */
/*                                                                */
/*  p29b = POS(" SUBALLOCATION",sysprint.1)                       */
/*  If p29b > 0  & level = "DATA"                       Then Do   */
/*     unique_sub  = "SUBALLOCATION"                              */
/*  End                                                           */

p30 = POS(" INDEX -----",sysprint.1)
If p30 > 0  & level = "DATA"                       Then Do
   index       = SUBSTR(sysprint.1,p30 + 14,44)
   index       = STRIP(index)
   level       = "INDEX"
   Signal Read_SYSPRINT_Loop
End

p31 = POS(" CISIZE----",sysprint.1)
If p31 > 0  & level = "INDEX"                      Then Do
   parse_it    = SUBSTR(sysprint.1,p31 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   icisize     = STRIP(parse_it,leading,"0")
   If icisize  = ""  Then icisize      = 0
End

p32 = POS(" SPACE-TYPE-----",sysprint.1)
If p32 > 0  & level = "INDEX"                      Then Do
   isp_type       = SUBSTR(sysprint.1,p32 + 17,8)
   isp_type       = TRANSLATE(isp_type," ","-")
   isp_type       = STRIP(isp_type)
End

p33 = POS(" SPACE-PRI------",sysprint.1)
If p33 > 0  & level = "INDEX"                      Then Do
   parse_it    = SUBSTR(sysprint.1,p33 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   iprim       = STRIP(parse_it,leading,"0")
   If iprim    = ""  Then iprim        = 0
End

p34 = POS(" SPACE-SEC------",sysprint.1)
If p34 > 0  & level = "INDEX"                      Then Do
   parse_it    = SUBSTR(sysprint.1,p34 + 17,8)
   parse_it    = STRIP(parse_it,both)
   parse_it    = TRANSLATE(parse_it,"0","-")
   isec        = STRIP(parse_it,leading,"0")
   If isec     = ""  Then isec         = 0
End

p35 = POS(" VOLSER------",sysprint.1)
If p35 > 0  & level = "INDEX"                      Then Do
   ivolser     = SUBSTR(sysprint.1,p35 + 19,6)
End

p99 = POS("HIGHEST CONDITION CODE",sysprint.1)

/* END OF LISTCAT FUNCTION FOR THIS DATASET ?               */

Select
   When not_fnd = "Y"                              Then ,
        Signal Read_SYSPRINT_Loop
   When p99 <= 0                                   Then ,
        Signal Read_SYSPRINT_Loop
   Otherwise Nop
End


Build_DEFINE_CLUSTER_Commands:

lit                = litdel||STRIP(cluster)
lit1               = LEFT(lit,80," ")
lit1               = OVERLAY("CLUSTER PURGE",lit1,55,13)

lit2               = LEFT(lit2,80," ")
lit2               = OVERLAY("-",lit2,65,1)

lit3               = LEFT(lit3,80," ")
lit3               = OVERLAY("-",lit3,65,1)

lit4               = LEFT(lit4,80," ")
lit4               = OVERLAY("-",lit4,65,1)

lit5               = LEFT(lit5,80," ")
lit5               = OVERLAY("-",lit5,65,1)

lit                = litclus||STRIP(cluster)||")"
lit6               = LEFT(lit,80," ")
lit6               = OVERLAY("-",lit6,65,1)

lit                = indent||type_vs
lit7               = LEFT(lit,80," ")
lit7               = OVERLAY("-",lit7,65,1)

lit                = indent||STRIP(reuse)
lit8               = LEFT(lit,80," ")
lit8               = OVERLAY("-",lit8,65,1)

lit                = indent||"STORAGECLASS("||STRIP(sc)||")"
lit9               = LEFT(lit,80," ")
lit9               = OVERLAY("-",lit9,65,1)

lit                = indent||"MANAGEMENTCLASS("||STRIP(mc)||")"
lit10              = LEFT(lit,80," ")
lit10              = OVERLAY("-",lit10,65,1)

lit                = indent||"DATACLASS("||STRIP(dc)||")"
lit11              = LEFT(lit,80," ")
lit11              = OVERLAY("-",lit11,65,1)

lit                = indent||STRIP(spd_rec)
lit12              = LEFT(lit,80," ")
lit12              = OVERLAY("-",lit12,65,1)

lit                = indent||"SHAREOPTIONS("||STRIP(shr_opt1)||,
                        ","||STRIP(shr_opt2)||")"
lit13              = LEFT(lit,80," ")
lit13              = OVERLAY("-",lit13,65,1)

lit                = indent||STRIP(writechk)
lit14              = LEFT(lit,80," ")
lit14              = OVERLAY("-",lit14,65,1)

lit                = indent||STRIP(spanned)
lit16              = LEFT(lit,80," ")
lit16              = OVERLAY("-",lit16,65,1)

lit                = indent||STRIP(ordered)
lit17              = LEFT(lit,80," ")
lit17              = OVERLAY("-",lit17,65,1)

lit                = indent||STRIP(erase)
lit18              = LEFT(lit,80," ")
lit18              = OVERLAY("-",lit18,65,1)

lit                = indent||")"
lit19              = LEFT(lit,80," ")
lit19              = OVERLAY("-",lit19,65,1)

lit                = litdata||STRIP(data)||")"
lit20              = LEFT(lit,80," ")
lit20              = OVERLAY("-",lit20,65,1)

lit                = indent||"VOLUMES("||STRIP(dvolser)||")"
lit21              = LEFT(lit,80," ")
lit21              = OVERLAY("-",lit21,65,1)

lit                = indent||"FREESPACE("||STRIP(fs_ci)||" "||,
                        STRIP(fs_ca)||")"
lit22              = LEFT(lit,80," ")
lit22              = OVERLAY("-",lit22,65,1)

lit                = indent||"BUFFERSPACE("||STRIP(buffer)||")"
lit23              = LEFT(lit,80," ")
lit23              = OVERLAY("-",lit23,65,1)

lit                = indent||STRIP(dsp_type)||"S"||"("||,
                        STRIP(dprim)||" "||STRIP(dsec)||")"
lit24              = LEFT(lit,80," ")
lit24              = OVERLAY("-",lit24,65,1)

lit                = indent||"RECORDSIZE("||STRIP(AVGLRECL)||,
                        " "||STRIP(maxlrecl)||")"
lit25              = LEFT(lit,80," ")
lit25              = OVERLAY("-",lit25,65,1)

lit                = indent||"KEYS("||STRIP(keylen)||" "||,
                        STRIP(rkp)||")"
lit26              = LEFT(lit,80," ")
lit26              = OVERLAY("-",lit26,65,1)

lit                = indent||"CONTROLINTERVALSIZE("||STRIP(dcisize)||,
                        ")"
lit27              = LEFT(lit,80," ")
lit27              = OVERLAY("-",lit27,65,1)

lit                = indent||")"
lit28              = LEFT(lit,80," ")
lit28              = OVERLAY("-",lit28,65,1)

lit                = litindx||STRIP(index)||")"
lit29              = LEFT(lit,80," ")
lit29              = OVERLAY("-",lit29,65,1)

lit                = indent||"VOLUMES("||STRIP(ivolser)||")"
lit30              = LEFT(lit,80," ")
lit30              = OVERLAY("-",lit30,65,1)

lit                = indent||STRIP(isp_type)||"S"||"("||,
                        STRIP(iprim)||" "||STRIP(isec)||")"
lit31              = LEFT(lit,80," ")
lit31              = OVERLAY("-",lit31,65,1)

lit                = indent||"CONTROLINTERVALSIZE("||STRIP(icisize)||,
                        ")"
lit32              = LEFT(lit,80," ")
lit32              = OVERLAY("-",lit32,65,1)

lit33              = indent||")"

/****************  Debugging  Start  *********************************/

    Say ;
    Say "REORGVS2 Exec - Cluster Component Information ..."
    Say ;
    Say "version_level  = "  version_level
    Say ;
    Say "not_fnd        = "  not_fnd
    Say "level          = "  level
    Say "cluster        = "  cluster
    Say "aix            = "  aix
    Say "data           = "  data
    Say "index          = "  index
    Say "reuse          = "  reuse
    Say "dc             = "  dc
    Say "sc             = "  sc
    Say "mc             = "  mc
    Say "type_vs        = "  type_vs
    Say "spanned        = "  spanned
    Say "erase          = "  erase
    Say "ordered        = "  ordered
    Say "writechk       = "  writechk
    Say "spd_rec        = "  spd_rec
    Say "shr_opt1       = "  shr_opt1
    Say "shr_opt2       = "  shr_opt2
    Say "fs_ci          = "  fs_ci
    Say "fs_ca          = "  fs_ca
    Say "buffer         = "  buffer
    Say "dsp_type       = "  dsp_type
    Say "dprim          = "  dprim
    Say "dsec           = "  dsec
    Say "dvolser        = "  dvolser
    Say "avglrecl       = "  avglrecl
    Say "maxlrecl       = "  maxlrecl
    Say "rkp            = "  rkp
    Say "keylen         = "  keylen
    Say "dcisize        = "  dcisize
    Say "isp_type       = "  isp_type
    Say "iprim          = "  iprim
    Say "isec           = "  isec
    Say "icisize        = "  icisize
    Say "ivolser        = "  ivolser
    Say "lit1    ="  lit1
    Say "lit2    ="  lit2
    Say "lit3    ="  lit3
    Say "lit4    ="  lit4
    Say "lit5    ="  lit5
    Say "lit6    ="  lit6
    Say "lit7    ="  lit7
    Say "lit8    ="  lit8
    Say "lit9    ="  lit9
    Say "lit10   ="  lit10
    Say "lit11   ="  lit11
    Say "lit12   ="  lit12
    Say "lit13   ="  lit13
    Say "lit14   ="  lit14
    Say "lit16   ="  lit16
    Say "lit17   ="  lit17
    Say "lit18   ="  lit18
    Say "lit19   ="  lit19
    Say "lit20   ="  lit20
    Say "lit21   ="  lit21
    Say "lit22   ="  lit22
    Say "lit23   ="  lit23
    Say "lit24   ="  lit24
    Say "lit25   ="  lit25
    Say "lit26   ="  lit26
    Say "lit27   ="  lit27
    Say "lit28   ="  lit28
    Say "lit29   ="  lit29
    Say "lit30   ="  lit30
    Say "lit31   ="  lit31
    Say "lit32   ="  lit32
    Say "lit33   ="  lit33

/****************  Debugging  End    *********************************/

Format_IDCAMS_Commands:

defines.1          = lit1
Call Output_IDCAM_Record

defines.1          = lit2
Call Output_IDCAM_Record

defines.1          = lit3
Call Output_IDCAM_Record

defines.1          = lit4
Call Output_IDCAM_Record

defines.1          = filler
Call Output_IDCAM_Record

defines.1          = lit5
Call Output_IDCAM_Record

defines.1          = lit6
Call Output_IDCAM_Record

defines.1          = lit7
Call Output_IDCAM_Record

defines.1          = lit8
Call Output_IDCAM_Record

If sc <> "        "              Then Do
   defines.1          = lit9
   Call Output_IDCAM_Record
End

If mc <> "        "              Then Do
   defines.1          = lit10
   Call Output_IDCAM_Record
End

If dc <> "        "              Then Do
   defines.1          = lit11
   Call Output_IDCAM_Record
End

defines.1          = lit12
Call Output_IDCAM_Record

defines.1          = lit13
Call Output_IDCAM_Record

defines.1          = lit14
Call Output_IDCAM_Record

defines.1          = lit16
Call Output_IDCAM_Record

defines.1          = lit17
Call Output_IDCAM_Record

defines.1          = lit18
Call Output_IDCAM_Record

defines.1          = lit19
Call Output_IDCAM_Record

defines.1          = lit20
Call Output_IDCAM_Record

defines.1          = lit21
Call Output_IDCAM_Record

If type_vs  <> "LINEAR"          Then Do
   defines.1          = lit22
   Call Output_IDCAM_Record
End

defines.1          = lit23
Call Output_IDCAM_Record

defines.1          = lit24
Call Output_IDCAM_Record

If type_vs  <> "LINEAR"          Then Do
   defines.1          = lit25
   Call Output_IDCAM_Record
End

If type_vs   = "INDEXED"         Then Do
   defines.1          = lit26
   Call Output_IDCAM_Record
End

defines.1          = lit27
Call Output_IDCAM_Record

defines.1          = lit28
Call Output_IDCAM_Record

If type_vs  <> "INDEXED"         Then Do
   Signal Skip_Indexed
End

defines.1          = lit29
Call Output_IDCAM_Record

defines.1          = lit30
Call Output_IDCAM_Record

defines.1          = lit31
Call Output_IDCAM_Record

defines.1          = lit32
Call Output_IDCAM_Record

defines.1          = lit33
Call Output_IDCAM_Record

Skip_Indexed:

defines.1          = filler
Call Output_IDCAM_Record

cmd_count = cmd_count + 1

Signal Print_VSAM_Alloation_Information


Output_IDCAM_Record:

def_output_count = def_output_count + 1

"EXECIO 1 DISKW DEFINES  (STEM defines. "
execiorc     = rc
If execiorc <> 0   Then Do
   Say ;
   Say "Error executing the EXECIO DISKW Rexx command for file",
       "DEFINES !!!"
   Say "File DEFINES was not properly preallocated or invalid",
       "or an I/O error was encountered"
   Say "Output I/O count is " def_output_count
   Say "EXECIO Return Code is "execiorc" !!!"
   Say "Exec REORGVS2 is Terminated Prematurely     ..."
   rtcd = 12
   Signal End_up
End

Return


Output_AIX_LISTC_Record:

aix_output_count = aix_output_count + 1

aixcmds.1    = "  LISTC ALL ENT("||STRIP(aix)")"
aixcmds.2    = "  "

"EXECIO 2 DISKW AIXCMDS  (STEM aixcmds. "
execiorc     = rc
If execiorc <> 0   Then Do
   Say ;
   Say "Error executing the EXECIO DISKW Rexx command for file",
       "AIXCMDS !!!"
   Say "File AIXCMDS was not properly preallocated or invalid",
       "or an I/O error was encountered"
   Say "Output I/O count is " def_output_count
   Say "EXECIO Return Code is "execiorc" !!!"
   Say "Exec REORGVS2 is Terminated Prematurely     ..."
   rtcd = 12
   Signal End_up
End

Return


Print_VSAM_Alloation_Information:

  If line_count > 60                    Then Do
     line_count = 0
     Call Print_Report_Headings
  End

  report.1         = COPIES(" ",80)
  report.1         = OVERLAY(cluster,report.1,2,44)
  report.1         = OVERLAY(dvolser,report.1,47,6)
  report.1         = OVERLAY(mc,report.1,55,8)
  report.1         = OVERLAY(sc,report.1,64,8)
  report.1         = OVERLAY(dc,report.1,73,8)

  Call Print_Report_Line

  Signal Read_SYSPRINT_Loop


Print_Report_Headings:

  report.1         = heading_1
  Call Print_Report_Line

  report.1         = filler
  Call Print_Report_Line

  report.1         = heading_2
  Call Print_Report_Line

  report.1         = heading_3
  Call Print_Report_Line

  report.1         = filler
  Call Print_Report_Line

Return


Print_Report_Line:

print_count = print_count + 1
line_count  = line_count  + 1

"EXECIO 1 DISKW REPORT   (STEM report. "
execiorc     = rc
If execiorc <> 0   Then Do
   Say ;
   Say "Error executing the EXECIO DISKW Rexx command for file",
       "REPORT !!!"
   Say "File REPORT was not properly preallocated or invalid",
       "or an I/O error was encountered"
   Say "Output Report count is " print_count
   Say "Page   Line   count is " line_count
   Say "EXECIO Return Code is "execiorc" !!!"
   Say "Exec REORGVS2 is Terminated Prematurely     ..."
   rtcd = 12
   Signal End_up
End


Return


Initialize_Variables:

  not_fnd         = ""
  level           = ""
  cluster         = ""
  aix             = ""
  data            = ""
  index           = ""
  reuse           = ""
  dc              = ""
  sc              = ""
  mc              = ""
  type_vs         = ""
  spanned         = ""
  erase           = ""
  ordered         = ""
  writechk        = ""
  spd_rec         = ""
  shr_opt1        = ""
  shr_opt2        = ""
  fs_ci           = ""
  fs_ca           = ""
  buffer          = ""
  dsp_type        = ""
  dprim           = ""
  dsec            = ""
  dvolser         = ""
  avglrecl        = ""
  maxlrecl        = ""
  rkp             = ""
  keylen          = ""
  dcisize         = ""
  isp_type        = ""
  iprim           = ""
  isec            = ""
  icicize         = ""
  ivolser         = ""

Return


End_Up:

"EXECIO 0 DISKR PARMFILE (FINIS"
"EXECIO 0 DISKR SYSPRINT (FINIS"
"EXECIO 0 DISKW REPORT   (FINIS"
defines.1    = "  "
"EXECIO 1 DISKW DEFINES  (STEM defines."
"EXECIO 0 DISKW DEFINES  (FINIS"
aixcmds.1    = "  "
"EXECIO 1 DISKW AIXCMDS  (STEM aixcmds."
"EXECIO 0 DISKW AIXCMDS  (FINIS"

Say ;
Say "REORGVS2 exec return code is   " rtcd

Return rtcd
