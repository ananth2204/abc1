{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012102000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 6819176, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 40, "INMDSNAM": "CBT.V500.FILE456.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 6819176, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 6819176, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE456.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00m\\x0c'", "DS1TRBAL": "b'T\\xbc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03M\\x00\\x05\\x03T\\x00\\t\\x00n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943?\\x00\\x943?\\x121\\x00k\\x00k\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-29T00:00:00", "modifydate": "1994-11-29T12:31:00", "lines": 107, "newlines": 107, "modlines": 0, "user": "SYSPAJA"}, "text": "1   18.11.94                                            DOC - Page 1/3.\n\n          ***************************************************\n          ***     P R E L I M I N A R Y     N O T E S     ***\n          ***************************************************\n\n Files author : MOINIL P.A.\n -------------- Computing Centre (TP361)\n                J.R.C. - Ispra establishment\n                21020 ISPRA (VA), Italy\n\n Products installation requirement :\n -----------------------------------\n     Data-set \"->.SOURCE.FILE0\" is a pre-requisite.\n     See to the member $$$PROCS which contains a job to store the\n     procedures used for products installation.\n\n Data-set members structure :\n ----------------------------\n     The members names ending by a dollar sign ($) are the JCL to\n     install (assembly + link-edit) the modules, and the members\n     names ending by a paragraph sign (@) are the corresponding\n     modules documentation.\n\n                   *********************************\n                   ***     INFORMATION NOTES     ***\n                   *********************************\n\n     Assuming the LISTNO program in \"->.SOURCE.FILE0\" installed, you may\n SUBMIT the job below to obtain a copy of this document :\n         //...      JOB ...\n         //DOC     EXEC PGM=LISTNO,PARM='M=DOC'\n         //SYSPDS    DD DSN=->.SOURCE.FILE2,DISP=SHR\n         //SYSPRINT  DD SYSOUT=A\n     A complete information notes list (about 4000 lines) may be also\n obtained by this job if you specify M=INFO as parameter.\n1   18.11.94                                            DOC - Page 2/3.\n\n  *******************************************************************\n  ***     D A T A - S E T ->.SOURCE.FILE2     C O N T E N T S     ***\n  *******************************************************************\n\n AIDINIT    Accounting Information data-set initialization program.\n AIDLOAD    Accounting Information data-set load program.\n AIDSYNC    Accounting Information data-set synchronization program.\n AIDUNLD    Accounting Information data-set unload program.\n AIDUPDT    Accounting Information data-set update program.\n AMRUTIL    Assembler Macros References Utility.\n AUT..      Accounting Information data-set Maintenance (TSO-ISPF).\n CATLIST    O.S. catalog list program.\n CLEAN      Disks CLEAN-UP maintenance processing program.\n COMPAK     Compare two IEAPAK.. versions program.\n DEVTGEN    Generate devices tables (REC/TRK capacities).\n ENQANAL    ENQs analysis program.\n EUFAJCTB   Assembler macro (DSECT used by EXIT008 of JES2).\n EXIT001    JES2 Exit 1 (Print/Punch separators).\n EXIT004    JES2 Exit 4 (JCL and JES2 control statement scan).\n EXIT005    JES2 Exit 5 (Additional local commands).\n EXIT006    JES2 Exit 6 (Internal text scan).\n EXIT008    JES2 Exit 8 (max COND code/ABEND code support).\n EXIT016    JES2 Exit 16 (max COND code/ABEND code support).\n GDTUTIL    Generate dsect's tables utility.\n HELPLIST   TSO HELP data-set lister.\n ICFLIST    ICF catalog list program.\n ICHCNX00   RACF - Command pre-processing exit.\n ICHRCX01   RACF - RACHECK pre-processing exit.\n ICHRDSNT   RACF - Data-set name table.\n ICHRIN03   RACF - Started procedures table.\n IEAVMXIT   Communications task exit.\n IEFACTRT   SMF - Termination exit.\n IEFUJI     SMF - Job initiation exit.\n IEFUJV     SMF - Job validation exit.\n IEFUSI     SMF - Step initiation exit.\n IEFUTL     SMF - Time limit exit.\n IKJEFF10   TSO - Submit exit routine.\n JES2XIT$   Install JES2 exits.\n LMRUTIL    Load Modules References Utility.\n LTACC      List Accounting Information data-set contents program.\n PDSPURGE   PO data-sets directory cleanup program.\n PVSD       Print Variable Sysout Data-sets program.\n RACFXIT$   Install RACF exits.\n RENAMP     Rename PO data-set members TSO command.\n RSMANAL    RSM analysis program.\n SCHEDLOG   SCHEDULE/SCHEDRUN (CBT file 388) log list program.\n SEEKANAL   Seek analysis program.\n SHUTDOWN   Operator gracefull services termination.\n1   18.11.94                                            DOC - Page 3/3.\n\n ---------  ----------------------------------------------------------\n   Name       Function\n ---------  ----------------------------------------------------------\n\n SLABEL     Initialize 9-tracks tapes volumes.\n SMFEXIT$   Install SMF exits.\n STRTEST    STCLOK, TIME and RTIME test program.\n TIEFUJV    Test IEFUJV SMF exit JCL scan program.\n TTCBRB     Trace Address Space TCB-RB's chain.\n TUTOLIST   Tutorials ISPF-panels lister.\n UJVD       TSO IEFUJV display command.\n UJVT       Test IEFUJV computations program.\n UJVTABLE   SMF - Job validation exit tables.\n VSMANAL    VSM analysis program.\n VTOCANAL   VTOC analysis program.\n YATIL      Look in a PO-directory for a name existence TSO command.\n YPACK      Accounting Information data-set short package routines.\n ZPACK      Accounting Information data-set full package routines.\n ZYDIAG     Accounting Information data-set diagnostics.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$PROCS": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x7f\\x00\\x942\\x7f\\x15\\x05\\x00R\\x00R\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-23T00:00:00", "modifydate": "1994-11-23T15:05:00", "lines": 82, "newlines": 82, "modlines": 0, "user": "SYSPAJA"}, "text": "//ADDPROCS JOB (........),'INSTALL  PROCEDURES',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=2\n//*----------- ADD PRODUCTS INSTALLATION PROCEDURES -------------------\n//*            ADJUSTMENTS MUST BE DONE BEFORE YOU RUN THIS JOB (SCAN\n//*            ALL \"->\" OCCURENCES AND SET RIGHT DATA-SETS NAMES).\n//* NOTES  1 - I NORMALLY USE THE ASSEMBLER H (DON'T USE ASSEMBLER F,\n//*            THERE IS A GOOD PROBABILITY TO HAVE ERRORS).\n//*        2 - ALL PROCEDURES ASSUME THE FOLLOWING UNIT NAMES :\n//*                     DU=SYSDA : DISK UNIT\n//*                     VU=VIO   : VIRTUAL UNIT\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*      ASSEMBLER H PROCEDURES.                                      *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//PROCH   EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSUT2    DD DSN=->.TARGET.PROCLIB,DISP=SHR\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DATA,DLM=ZZ\n./     ADD     NAME=PAJ2AS1        <-------------- ASSEMBLY / 1 MACLIB\n./     NUMBER  NEW1=100,INCR=100\n//PAJ2AS1 PROC OPT=,DU=SYSDA,VU=VIO,MBR=,\n//             DSM='->.SOURCE.FILE0',DM=SHR\n//             DSS='->.SOURCE.FILE2',DS=SHR\n//AS      EXEC PGM=IEV90,\n//             PARM='XREF(SHORT),NODECK,OBJECT&OPT'\n//SYSLIB    DD DSN=&DSM,DISP=&DM\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=&VU,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=&DU,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(MOD,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=&DSS(&MBR),DISP=&DS\n./     ADD     NAME=PAJ2AS2        <------------- ASSEMBLY / 2 MACLIBS\n./     NUMBER  NEW1=100,INCR=100\n//PAJ2AS2 PROC OPT=,DU=SYSDA,VU=VIO,MBR=,\n//             DSM='->.SOURCE.FILE0',DM=SHR\n//             DSS='->.SOURCE.FILE2',DS=SHR\n//AS      EXEC PGM=IEV90,\n//             PARM='XREF(SHORT),NODECK,OBJECT&OPT'\n//SYSLIB    DD DSN=&DSM,DISP=&DM\n//          DD DSN=&DSS,DISP=&DS\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=&VU,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=&DU,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(MOD,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=&DSS(&MBR),DISP=&DS\n./     ADD     NAME=PAJ2AS3        <------------- ASSEMBLY / 3 MACLIBS\n./     NUMBER  NEW1=100,INCR=100\n//PAJ2AS3 PROC OPT=,DU=SYSDA,VU=VIO,MBR=,\n//             DSM='->.SOURCE.FILE0',DM=SHR\n//             DSS='->.SOURCE.FILE2',DS=SHR\n//AS      EXEC PGM=IEV90,\n//             PARM='XREF(SHORT),NODECK,OBJECT&OPT'\n//SYSLIB    DD DSN=&DSM,DISP=&DM\n//          DD DSN=&DSS,DISP=&DS\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=&VU,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=&DU,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(MOD,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=&DSS(&MBR),DISP=&DS\n./     ADD     NAME=PAJ2AS4        <------------- ASSEMBLY / 4 MACLIBS\n./     NUMBER  NEW1=100,INCR=100\n//PAJ2AS4 PROC OPT=,DU=SYSDA,VU=VIO,MBR=,\n//             DSM='->.SOURCE.FILE0',DM=SHR\n//             DSS='->.SOURCE.FILE2',DS=SHR\n//AS      EXEC PGM=IEV90,\n//             PARM='XREF(SHORT),NODECK,OBJECT&OPT'\n//SYSLIB    DD DSN=&DSM,DISP=&DM\n//          DD DSN=&DSS,DISP=&DS\n//          DD DSN=SYS1.HASPSRC,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=&VU,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=&DU,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(MOD,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=&DSS(&MBR),DISP=&DS\n./     ENDUP\nZZ\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#DOC#": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11\\x7f\\x00\\x90\\x11\\x7f\\x13W\\x00&\\x00&\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-27T00:00:00", "modifydate": "1990-04-27T13:57:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "SYSPAJA"}, "text": "1   27/04/90\n\n\n\n\n\n\n\n\n\n\n\n\n\n                DDDDDDD          OOOOOOO         CCCCCCCC\n                DDDDDDDD        OOOOOOOOO       CCCCCCCCC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DDDDDDDD        OOOOOOOOO       CCCCCCCCC\n                DDDDDDD          OOOOOOO         CCCCCCCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n=/MB     $$$DOC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#INFO#": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943?\\x00\\x943?\\x121\\x00K\\x00K\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-29T00:00:00", "modifydate": "1994-11-29T12:31:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "SYSPAJA"}, "text": "1   27/04/90\n\n\n\n\n\n\n\n\n\n\n\n\n\n          IIII       NN     NN       FFFFFFFFF        OOOOOOO\n           II        NNN    NN       FFFFFFFFF       OOOOOOOOO\n           II        NNNN   NN       FF              OO     OO\n           II        NN NN  NN       FF              OO     OO\n           II        NN  NN NN       FFFFFF          OO     OO\n           II        NN   NNNN       FFFFFF          OO     OO\n           II        NN    NNN       FF              OO     OO\n           II        NN     NN       FF              OO     OO\n           II        NN     NN       FF              OOOOOOOOO\n          IIII       NN     NN       FF               OOOOOOO\n\n\n\n\n1   17/11/94\n                                                      INDEX     1/1.\n\n=/MB     AIDINIT@  Acc. Inf. data-set initialization program.\n=/MB     AIDLOAD@  Acc. Inf. data-set load program.\n=/MB     AIDSYNC@  Acc. Inf. data-set synchronization program.\n=/MB     AIDUNLD@  Acc. Inf. data-set unload program.\n=/MB     AIDUPDT@  Acc. Inf. data-set update program.\n=/MB     AMRUTIL@  Assembler Macros References Utility.\n=/MB     AUT@      Acc. Inf. data-set maintenance (TSO).\n=/MB     CATLIST@  O.S. catalog list program.\n=/MB     CLEAN@    Disks CLEAN-UP maintenance processing program.\n=/MB     COMPAK@   Compare two IEAPAK.. versions.\n=/MB     DEVTGEN@  Generate device's tables(record/track capacities).\n=/MB     ENQANAL@  ENQs analysis program.\n=/MB     GDTUTIL@  Generate dsect's tables utility.\n=/MB     HELPLIS@  TSO HELP data-set lister.\n=/MB     ICFLIST@  ICF catalog list program.\n=/MB     IEFACTR@  SMF - Termination exit.\n=/MB     IEFUJI@   SMF - Job initiation exit.\n=/MB     IEFUJV@   SMF - Job validation exit.\n=/MB     IEFUSI@   SMF - Step initiation exit.\n=/MB     IEFUTL@   SMF - Time limit exit.\n=/MB     IKJEF10@  TSO - Submit exit routine.\n=/MB     JES2XIT@  Local JES2 exits.\n=/MB     LMRUTIL@  Load Modules References Utility.\n=/MB     LTACC@    List Acc. Inf. data-set contents program.\n=/MB     PDSPURG@  PDS directory cleanup.\n=/MB     PVSD@     Print variable sysout data-sets (TSO utility).\n=/MB     RACFXIT@  RACF - Exit routines and tables.\n=/MB     RENAMP@   Rename partitioned data-set members.\n=/MB     RSMANAL@  RSM analysis program.\n=/MB     SEEKANA@  Seek analysis program.\n=/MB     SHUTDOW@  Operator gracefull services termination.\n=/MB     SLABEL@   Initialize 9-tracks tapes volumes.\n=/MB     SMFEXIT@  SMF - Exits : pre-requisites.\n=/MB     TIEFUJV@  Test IEFUJV SMF exit JCL scan program.\n=/MB     TTCBRB@   Trace Address Space TCB-RB's chain.\n=/MB     TUTOLIS@  Tutorials ISPF-panels lister.\n=/MB     UJVD@     TSO IEFUJV display command.\n=/MB     UJVT@     Test IEFUJV computations program.\n=/MB     VSMANAL@  VSM analysis program.\n=/MB     VTOCANA@  VTOC analysis.\n=/MB     YATIL@    Just to know if a module exist in a partitioned.\n=/MB     YPACK@    Acc. Inf. data-set short package routines.\n=/MB     ZPACK@    Acc. Inf. data-set full package routines.\n=/MB     ZYDIAG@   Acc. Inf. data-set diagnostics.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AIDINIT": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x915\\x1f\\x00\\x915\\x1f\\x14\\x05\\x03\\x02\\x03\\x02\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-12-17T00:00:00", "modifydate": "1991-12-17T14:05:00", "lines": 770, "newlines": 770, "modlines": 0, "user": "SYSPAJA"}, "text": "AIDI     TITLE 'ACCOUNTING INFORMATION DATA-SET INITIALIZATION.'\nAIDINIT  START 0\n         SPACE 1\nAIDINIT AMODE  24\nAIDINIT RMODE  24\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       DATA-SET INITIALIZATION       * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    THIS PROGRAM INITIALIZES THE ACCOUNTING INFORMATION    *\n* ---------    DATA-SET ACCORDINGLY TO THE DUMMY SECTION DESCRIBED    *\n*              BY THE MACRO '$AIRD'.                                  *\n*                                                                     *\n* CALL OF THE PROGRAM :                                               *\n* ---------------------                                               *\n*                                                                     *\n*        //INACC  EXEC  PGM=AIDINIT,PARM=...(OPTIONAL)...             *\n*        //SYSACC   DD  UNIT=...,VOL=SER=...,DSN=...,                 *\n*                       SPACE=(TRK,(...),,CONTIG),DISP=(NEW,CATLG)    *\n*                              CYL                                    *\n*           OR :                                                      *\n*                                                                     *\n*        //SYSACC   DD  DSN=...,DISP=OLD                              *\n*                                    SHR                              *\n*        //SYSPRINT DD  SYSOUT=A                                      *\n*                                                                     *\n*        PARM=DUMP : DUMP REQUESTED WHEN AN ERROR IS DETECTED.        *\n*                    IT CAN BE USED TO OBTAIN A DUMP (ABEND U0001)    *\n*                    WHEN DEBUGGING THE PROGRAM (SYSUDUMP OR SYSABEND *\n*                    DD-CARD NEEDED).                                 *\n*                                                                     *\n* N.B. - THE KEY (ARGUMENT OR INDEX) LENGTH IS ASSUMED TO BE TWO      *\n* ----   BYTES (HALFWORD) LONG, AND MAY OR NOT BE INCLUDED IN THE     *\n*        ACCOUNTING INFORMATION RECORD.                               *\n*                                                                     *\n*      - WHEN ASSIGNING THE DATA-SET SPACE, NO SECONDARY ALLOCATION   *\n*        IS ACCEPTED, AND IT MUST BE CATALOGED.                       *\n*                                                                     *\n*      - IF THE DATA-SET IS OLD, THE PROGRAM REQUESTS A CONFIRM       *\n*        REPLY TO THE OPERATOR BEFORE STARTING THE INITIALIZATION     *\n*        UNLESS IT IS AN OWNER DATA-SET.                              *\n*                                                                     *\n*      - IF THE DATA-SET IS OLD AND THE BLOCK-SIZE DOES NOT MATCH     *\n*        THE ASSEMBLED ACCOUNTING RECORD LENGTH (MACRO '$AIRD'), THE  *\n*        DATA-SET MUST BE DELETED AND THEN REALLOCATED.               *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* DATA-SET ORGANIZATION :                                             *\n* -----------------------                                             *\n*                                                                     *\n*              THE DATA-SET IS A DIRECT-ACCESS ORGANIZATION, BUT      *\n*        DIVIDED IN FOUR DIFFERENT SECTIONS AS DESCRIBED BELOW :      *\n*                                                                     *\n*        1. THE RECORDS FROM 0 TO 19997 ARE NORMAL DIRECT ACCESS      *\n*           CONTAINING THE ACCOUNTING INFORMATION FOR THE             *\n*           CORRESPONDING 0001 TO 9999 AUTHORIZATION'S NUMBERS        *\n*           AND 0001 TO 9999 PROGRAMMER'S NUMBERS.                    *\n*                                                                     *\n*        2. THE RECORDS FROM 19998 TO 19998+(N-1) ARE USED TO         *\n*           STORE THE KEYS (ARGUMENTS OR INDEXES) TABLE REFERING      *\n*           TO THE NEXT SECTION.                                      *\n*                                                                     *\n*        3. THE RECORDS FROM 19998+N TO END-X (THE END OF THE         *\n*           DATA-SET SPACE MINUS THE NUMBER OF RECORDS NECESSARY      *\n*           TO THE MAP TABLE) ARE DESTINATED TO OTHER ACCOUNTING      *\n*           INFORMATION (I.E. - ACTIVITIES OR CONTRACTS AND           *\n*           SERVICES DESCRIPTIONS).                                   *\n*                                                                     *\n*        4. THE LAST X RECORDS ARE RESERVED TO A BIT MAP TABLE        *\n*           NECESSARY TO REPRESENT THE PRESENCE OR ABSENCE OF         *\n*           THE CORRESPONDING AUTHORIZATION NUMBER RECORD (SEE        *\n*           SECTION 1).                                               *\n*                                                                     *\n* DATA-SET SEARCH STRATEGY.                                           *\n* -------------------------                                           *\n*                                                                     *\n*              FOR THE KEYS (ARGUMENTS OR INDEXES) FROM 1 TO          *\n*        19999 THE PROGRAM ACCESS DIRECTLY THE DATA RECORDS           *\n*        (SECTION 1 OF THE DATA-SET), AND FOR KEYS FROM 20000,        *\n*        THE PROGRAM SCAN THE KEYS TABLE (SECTION 2 OF THE            *\n*        DATA-SET) TO FIND THE CORRESPONDING PHYSICAL ADDRESS         *\n*        OF THE DATA RECORDS (SECTION 3 OF THE DATA-SET).             *\n*        THE BIT MAP TABLE (SECTION 4 OF THE DATA-SET) IS USED        *\n*        TO GAIN TIME WHEN IT IS REQUESTED TO READ THE AUT./          *\n*        PRG. NUMBER RECORDS (SECTION 1 OF THE DATA-SET) IN           *\n*        A SEQUENTIAL MODE. IT ALLOWS TO SKIP THE UNUSED              *\n*        RECORDS (NO DATA) WITHOUT READING IT IN CORE STORAGE.        *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n        $AIRD\n         SPACE 2\n        $DEFREG\n         EJECT\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV12     EQU   12        ADMINISTRATOR CONTROL LEVEL\n         SPACE 1\nAUT98   $MDL@IX\n         SPACE 1\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nOFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING.\nON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING.\nUCB3DACC EQU   X'20'               DIRECT ACCESS DEVICE TYPE.\n         SPACE 2\n        PRINT  NOGEN\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 1\nJFCDSECT DSECT\n        IEFJFCBN LIST=YES\n         SPACE 1\nDSCDSECT DSECT\n        IECSDSL1 (1)\n         SPACE 1\n        DCBD   DSORG=PS,DEVD=DA\n         SPACE 1\nAIDINIT  CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\n        PRINT  GEN\n         EJECT\n        $XENT  BASE=(R11,R12)\n         SPACE 1\n         L     R1,0(R1)            PARM. FIELD ADDRESS.\n         LH    R2,0(R1)            PARM. FIELD LENGTH.\n         LTR   R2,R2\n         BNP   NOPARM              BRANCH IF NO PARM. FIELD.\n         CH    R2,LDEBUG\n         BNE   PARMERR             BRANCH IF INCORRECT KEYWORD LENGTH.\n         CLC   2(L'DEBUG,R1),DEBUG\n         BNE   PARMERR             BRANCH IF INCORRECT KEYWORD.\n         LA    R8,SYSDMP-(DCBDDNAM-IHADCB)   SEARCH SYSUDUMP.\n         BAS   R10,STRTN\n         B     *+L'*+4             BRANCH DD NOT FOUND.\n         B     SETSW\n         LA    R8,SYSABD-(DCBDDNAM-IHADCB)   SEARCH SYSABEND.\n         BAS   R10,STRTN\n         B     ABMS                BRANCH DD NOT FOUND.\nSETSW    NI    SWDUMP+1,OFF        SET SWITCH TO NOP.\n         SPACE 2\nNOPARM  $EACM  REQAUT\n         CLI   AUTLVL,LV12\n         BL    NOTAUT\n        CALL   HRDAY,(TIME,DAY),VL\n         LTR   R15,R15\n         BNZ   EXIT\n         LA    R8,INIT\n         BAS   R10,MSRTN\n         B     EXIT                ERROR.\n         LA    R8,UNDL\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         LA    R8,DTMSG\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         SPACE 1\n         LA    R8,DCBCR            SEARCH SYSACC.\n         BAS   R10,STRTN\n         B     NODD                BRANCH IF NOT FOUND.\n         USING IHADCB,R8\n        DEVTYPE DCBDDNAM,DVTYP,DEVTAB\n         DROP  R8\n         CLI   DVTYP+2,UCB3DACC    DIRECT-ACCESS STORAGE?\n         BNE   ERUN                BRANCH IF NOT.\n        RDJFCB (DCBCR)\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   ERJF\n         LA    R7,JF\n         USING JFCDSECT,R7\n         TM    JFCBIND2,JFCNEW     DISP=NEW CODED OR ASSUMED?\n         BNO   JL0                 BRANCH IF NOT.\n         TM    JFCBTSDM,255-JFCCAT CONTROL SYSACC DD-CARD CODE.\n         BNZ   DDMER\nJLA      EQU   JFCBLTYP-JFCFCBID\n         OC    JFCFCBID(JLA),JFCFCBID\n         BNZ   DDMER\nJLB      EQU   JFCBCRDT-JFCBOTTR\n         OC    JFCBOTTR(JLB),JFCBOTTR\n         BNZ   DDMER\nJLC      EQU   JFCBIND2-JFCBXPDT\n         OC    JFCBXPDT(JLC),JFCBXPDT\n         BNZ   DDMER\nJLD      EQU   JFCBNVOL-JFCBUFNO\n         OC    JFCBUFNO(JLD),JFCBUFNO\n         BNZ   DDMER\nJLE      EQU   JFCBPQTY-JFCBEXTL\n         OC    JFCBEXTL(JLE),JFCBEXTL\n         BNZ   DDMER\n         OC    JFCBSQTY(L'JFCBSQTY),JFCBSQTY\n         BNZ   DDMER\nJLF      EQU   JFCBVLCT-JFCBDQTY\n         OC    JFCBDQTY(JLF),JFCBDQTY\n         BNZ   DDMER\n         TM    JFCFLGS1,JFCVRDS    VIO DATA-SET.\n         BO    DDMER\n         CLI   JFCBCTRI,JFCBCYL+JFCONTIG CONTROL SPACE PARAMETERS.\n         BE    JFOK\n         CLI   JFCBCTRI,JFCBTRK+JFCONTIG\n         BE    JFOK\n         B     DDMER\nJL0      TM    JFCBIND2,JFCOLD     DISP=OLD OR SHR CODED?\n         BZ    DDMER               BRANCH IF NOT.\n         TM    JFCBTSDM,255-JFCCAT CONTROL SYSACC DD-CARD CODE.\n         BNZ   DDMER\nJL1      EQU   JFCBLTYP-JFCFCBID\n         OC    JFCFCBID(JL1),JFCFCBID\n         BNZ   DDMER\nJL2      EQU   JFCBCRDT-JFCBOTTR\n         OC    JFCBOTTR(JL2),JFCBOTTR\n         BNZ   DDMER\nJL3      EQU   JFCBIND2-JFCBXPDT\n         OC    JFCBXPDT(JL3),JFCBXPDT\n         BNZ   DDMER\nJL4      EQU   JFCBNVOL-JFCBUFNO\n         OC    JFCBUFNO(JL4),JFCBUFNO\n         BNZ   DDMER\nJL5      EQU   JFCBVLCT-JFCBPQTY\n         OC    JFCBPQTY(JL5),JFCBPQTY\n         BNZ   DDMER\nJFOK     CLI   JFCBVLCT,X'01'\n         BNE   DDMER\n         CLI   JFCBLTYP,JFCSL\n         BNE   DDMER\n         CLI   JFCBNVOL,X'01'\n         BNE   DDMER\n         CLI   JFCBSPTN,X'00'\n         BNE   DDMER\n         MVC   VOLNUM(L'VOLNUM),JFCBVOLS\n         MVC   DSNM(L'JFCBDSNM),JFCBDSNM\n         MVC   DSNMSGN(L'DSNM),DSNM\n         LA    R8,DSNMSGN+L'DSNM-1\n         CLI   0(R8),C' '\n         BNE   *+L'*+4\n         BCT   R8,*-8\n         MVI   1(R8),C'.'\n         LA    R8,DSNMSG\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         MVC   VOLMSGN(L'VOLNUM),VOLNUM\n         LA    R8,VOLMSG\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         TM    JFCBTSDM,JFCCAT     IS DATA-SET CATALOGED?\n         BO    LOCDS               BRANCH IF YES.\n         TM    JFCBIND2,JFCNEW     IF NOT CATALOGED, IS IT NEW?\n         BO    OBTDS               BRANCH IF YES.\n         B     CATERR\n         DROP  R7\nLOCDS   LOCATE CVLIST\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   LOCERR\n         CLC   VOLNUM(L'VOLNUM),LOCAREA+6 VOLUME MATCH?\n         BNE   VOLERR              BRANCH IF NOT.\nOBTDS   OBTAIN DSCBAR\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BZ    DSCBCTL\nOBTERR   CVD   R15,WORKD\n         UNPK  OBMSG2(2),WORKD+6(2)\n         OI    OBMSG2+1,C'0'\n         LA    R8,OBMSG\n         B     SDMSG\nLOCERR   MVC   OBMSG1+6(L'LCMSG),LCMSG\n         B     OBTERR\nDSCBCTL  LA    R6,WORKAREA-L'DS1DSNAM   CONTROL THE DSCB'S DEFINITIONS.\n         USING DSCDSECT,R6\n         LA    R5,9\n         CLC   DS1VOLSQ(L'DS1VOLSQ),ONE\n         BNE   ERRDS               ERR. 9.\n         BCTR  R5,0\n         CLI   DS1NOEPV,X'01'\n         BNE   ERRDS               ERR. 8.\n         BCTR  R5,0\n         CLI   DS1EXT1+1,X'00'\n         BNE   ERRDS               ERR. 7.\n         BCTR  R5,0\n         CLC   DS1SCALO+1(L'DS1SCALO-1),ZEROS\n         BNE   ERRDS               ERR. 6.\n         BCTR  R5,0\n         CLI   DS1KEYL,X'00'\n         BNE   ERRDS               ERR. 5.\n         BCTR  R5,0\n         CLC   DS1RKP(L'DS1RKP),ZEROS\n         BNE   ERRDS               ERR. 4.\n         BCTR  R5,0\n         CLC   DS1DSORG(L'DS1DSORG),ZEROS\n         BE    RFM\n         CLC   DS1DSORG(L'DS1DSORG),DAORG\n         BNE   ERRDS               ERR. 3.\nRFM      BCTR  R5,0\n         CLI   DS1RECFM,X'00'\n         BE    BLKL\n         CLI   DS1RECFM,DCBRECF\n         BNE   ERRDS               ERR. 2.\nBLKL     BCTR  R5,0\n         CLC   DS1BLKL(L'DS1BLKL),ZEROS\n         BE    LRECL\n         NI    SWT+1,OFF           SET SWITCH TO NOP.\n         CLC   DS1BLKL(L'DS1BLKL),RCL\n         BNE   ERRDS               ERR. 1.\nLRECL    BCTR  R5,0\n         CLC   DS1LRECL(L'DS1LRECL),ZEROS\n         BE    SWT\n         NI    SWT+1,OFF           SET SWITCH TO NOP.\n         CLC   DS1LRECL(L'DS1LRECL),RCL\n         BE    SWT\nERRDS    SLL   R5,3\n         LA    R5,TABM(R5)\n         MVC   DSEMD(L'TABM),0(R5)\n         LA    R8,DSEM\n         B     SDMSG\nSWT      B     DSOK\n         MVC   AUTLVL+L'AUTLVL+8(8),=CL8' '\n         LA    R1,DS1DSNAM         CHECK DATA-SET OWNER.\n         LA    R0,8\n         LA    R15,AUTLVL+L'AUTLVL+8\nSCDSN    CLI   0(R1),C'.'\n         BE    TSDSN\n         CLI   0(R1),C' '\n         BE    TSDSN\n         MVC   0(1,R15),0(R1)\n         LA    R1,1(R1)\n         LA    R15,1(R15)\n         BCT   R0,SCDSN\nTSDSN    CLC   AUTLVL+L'AUTLVL(8),AUTLVL+L'AUTLVL+8\n         BE    DSOK\nREQ     WTOR   'CONFIRM DATA-SET INITIALIZATION(YES/NO)',              1\n               RAREA,L'RAREA,RECB,ROUTCDE=11,DESC=7\nRPLY    WAIT   ECB=RECB            WAIT OPERATOR REPLY.\n         CLC   RAREA(L'RYES),RYES\n         BE    DSOK\n         CLC   RAREA(L'RNO),RNO\n         BNE   RESPY\n         LA    R8,CMS\n         B     SDMSG\nRESPY    XC    RAREA(L'RAREA),RAREA     CLEAR REPLY AREA.\n         XC    RECB(L'RECB),RECB   CLEAR ECB.\n        WTOR   'SYNTAX ERROR -- RESPECIFY OPTION',                     1\n               RAREA,L'RAREA,RECB,ROUTCDE=11,DESC=7\n         B     RPLY\nDSOK     XR    R2,R2\n         IC    R2,DVTYP+3          GET UNIT TYPE.\n         LH    R3,RCL              UNKEYED DATA BLOCK LENGTH.\n         ICM   R3,B'1000',ONE+L'ONE-1\n        TRKCALC FUNCTN=TRKCAP,TYPE=(R2),RKDD=(R3),REGSAVE=YES\n         LTR   R15,R15             DOES RECORD FIT ON TRACK?\n         BNZ   ERCL                BRANCH IF NOT.\n         LR    R5,R0               NO. OF BLOCKS/TRACK.\n         MVC   WORKD(L'DS1EXT1-2),DS1EXT1+2\n         DROP  R6\n         L     R1,WORKD+4          UPPER LIMIT(CCHH).\n         S     R1,WORKD            LOWER LIMIT(CCHH).\n         ST    R1,WORKD\n         LH    R1,WORKD            GET NUMBER OF CYLINDERS.\n         LTR   R1,R1\n         BZ    *+L'*+4\n         MH    R1,DVTYP+10         TRANSFORM CYL. IN TRACKS.\n         LH    R2,WORKD+2          GET NUMBER OF TRACKS.\n         LA    R3,1(R1,R2)         EXTENT TOTAL NR. OF TRACKS.\n         XR    R2,R2\n         MR    R2,R5               EXTENT TOTAL NR. OF BLOCKS.\n         LR    R5,R3               SAVE ADDRESS FIRST OUT OF DATA-SET.\n         LH    R4,RCL\n         LH    R3,NAUT             GET NUMBER OF AUT. NR.\n         AH    R3,NPRG             ADD NUMBER OF PRG. NR.\n         ST    R3,NBT\n         SRL   R3,3                COMPUTE NR. OF BYTES FOR MAP TABLE.\n         TM    NBT+3,X'07'\n         BZ    *+L'*+4\n         AH    R3,ONE\n         XR    R2,R2               COMPUTE NR. OF RECORDS FOR MAP TABLE\n         DR    R2,R4\n         LTR   R2,R2\n         BZ    *+L'*+4\n         AH    R3,ONE\n         ST    R3,NBT              NR. OF MAP TABLE RECORDS.\n         LR    R3,R5               TOTAL NR. OF DATA-SET RECORDS.\n         S     R3,NBT              SUBTRACT NR. OF MAP TABLE RECORDS.\n         SH    R3,NAUT             SUBTRACT NR. OF AUT.\n         SH    R3,NPRG             SUBTRACT NR. OF PRG.\n         BNP   ERDSAL\n         SRL   R4,1                NR. OF ARG. IN 1 TABLE RECORD.\n         XR    R1,R1\n         LR    R2,R1\nSNRT     CLR   R2,R3               COMPUTE TABLE RECORDS NUMBER.\n         BNL   FNRT\n         LA    R1,1(0,R1)\n         AR    R2,R4\n         BCT   R3,SNRT\nFNRT     ST    R1,NRT              NR. OF TABLE RECORDS.\n         ST    R3,NARG             MAX. NR. OF ARG. RECORDS.\n         USING JFCDSECT,R7\n         MVC   JFCDSORG(L'DAORG),DAORG  PREPARE JFCB.\n         MVI   JFCRECFM,DCBRECF\n         MVC   JFCBLKSI(L'RCL),RCL\n         MVC   JFCLRECL(L'RCL),RCL\n         OI    JFCBTSDM,JFCNWRIT   INHIBIT WRITE BACK.\n         DROP  R7\n         MVC   RNME(L'VOLNUM),VOLNUM\n         LA    R1,RNME+L'VOLNUM-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+8\n         MVI   0(R1),C'.'\n         BCT   R1,*-12\n         LA    R1,DSNM+L'DSNM-1\n         LA    R2,L'RNME+L'DSNM\n         CLI   0(R1),C' '\n         BNE   *+L'*+6\n         BCTR  R1,0\n         BCT   R2,*-10\n         STH   R2,RNMEL\n        ENQ    (QNME,RNME,E,(R2),SYSTEMS),RET=USE\n         LTR   R15,R15             AVAILABLE?\n         BNZ   ERAV                BRANCH IF NOT.\n        OPEN   (DCBCR,(OUTPUT)),TYPE=J\n         TM    DCBCR+DCBOFLGS-IHADCB,DCBOFOPN SUCCESSFULLY OPENED?\n         BZ    EROP                BRANCH IF NOT.\n         XR    R4,R4               FIRST RECORD ADDRESS.\nWCRT     LA    R1,DECBCR\n        WRITE  (1),SF,DCBCR,RECAI,MF=E\n         STC   R15,WCCM+L'WCCM-2   STORE CC FOR EVENTUAL DIAGNOSE.\n         SRL   R15,4\n         STC   R15,WCCM+L'WCCM-3\n        CHECK  DECBCR\nSWW      B     CROK\n         LA    R8,MESSAGE\n         BAS   R10,MSRTN           PRINT ERROR MESSAGE.\n         B     EX2                 ERROR.\n         B     EX2\nCROK     LA    R4,1(0,R4)          BUMP RECORD ADDRESSES.\n         CLR   R4,R5               CONTROL END.\n         BL    WCRT\n         SPACE 2\n         BAS   R10,CLERR\n         CVD   R5,WORKD\n         ED    ENDT72(L'ENDT72),WORKD+5\n         LA    R5,AUTLGTH\n         CVD   R5,WORKD\n         ED    ENDT12(L'ENDT12),WORKD+6\n         LA    R8,ENDM1\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         LA    R8,ENDM2\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         LH    R5,NAUT\n         CVD   R5,WORKD\n         ED    ENDT3A2(L'ENDT3A2),WORKD+5\n         LA    R8,ENDM3A\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         LH    R5,NPRG\n         CVD   R5,WORKD\n         ED    ENDT3B2(L'ENDT3B2),WORKD+5\n         LA    R8,ENDM3B\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         L     R5,NARG\n         CVD   R5,WORKD\n         ED    ENDT42(L'ENDT42),WORKD+5\n         LA    R8,ENDM4\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         L     R5,NRT\n         CVD   R5,WORKD\n         ED    ENDT52(L'ENDT52),WORKD+5\n         LA    R8,ENDM5\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         L     R5,NBT\n         CVD   R5,WORKD\n         ED    ENDT62(L'ENDT62),WORKD+5\n         LA    R8,ENDM6\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         LA    R8,ENDM7\n         BAS   R10,MSRTN\n         B     EX1                 ERROR.\n         SPACE 2\n        $PCLOSE\n         SPACE 1\nEXIT    $XRET  CC=(R15)\n         SPACE 2\n*        ERRORS - EXECUTION TERMINATED.\n         SPACE 1\nPARMERR WTO    'PARM.FIELD ERROR - EXIT -',ROUTCDE=11,DESC=7\n         B     SETCC\nABMS    WTO    'SYSUDUMP OR SYSABEND DD MISSING - EXIT -',             1\n               ROUTCDE=11,DESC=7\n         B     SETCC\nNOTAUT  WTO    'UNAUTHORIZED ACCESS TO THIS PROGRAM - EXIT -',         1\n               ROUTCDE=11,DESC=7\n         B     SETCC\n         SPACE 1\nEX2      BAS   R10,CLERR\n         B     EX1\nERAV     LA    R8,AVM\n         B     SDMSG\nEROP     LA    R8,OPM\n         B     SDMSG\nERCL     LA    R8,MERC\n         B     SDMSG\nCATERR   LA    R8,CATMSG\n         B     SDMSG\nVOLERR   MVC   VLMV(L'VOLNUM),LOCAREA+6\n         LA    R8,VLM\n         B     SDMSG\nDDMER    LA    R8,DDMO\n         B     SDMSG\nERDSAL   LA    R8,DSALM\n         B     SDMSG\nERJF     LA    R8,JPM\n         B     SDMSG\nERUN     LA    R8,UPM\n         B     SDMSG\nNODD     LA    R8,SPM\nSDMSG    BAS   R10,MSRTN           SEND MESSAGE.\n         NOP   0                   ERROR.\nEX1     $PCLOSE\nSETCC    LA    R15,16              C.C. = 16.\nSWDUMP   B     EXIT\n        ABEND  1,DUMP              DEBUG OPTION SELECTED BY PARM.FIELD.\n         SPACE 1\nCLERR   CLOSE  DCBCR\n         LH    R2,RNMEL\n        DEQ    (QNME,RNME,(R2),SYSTEMS)\n         BR    R10\n         EJECT\n*        SCAN TIOT ROUTINE.\n*        ------------------\n*\n*        R1  = WORK REGISTER.\n*        R2  = DD ENTRY ADDRESS (NORMAL RETURN).\n*        R8  = DCB ADDRESS (SUPPLIED BY CALLER).\n*        R10 = LINK REGISTER.\n*\n*        RETURN +0 = ERROR(NO DD ENTRY).\n*               +4 = NORMAL.\n         SPACE 1\n         USING IHADCB,R8\n         USING TIODSECT,R2\nSTRTN    OC    ATIOT,ATIOT         TIOT ADDRESS KNOWED?\n         BNZ   STSCN               BRANCH IF YES.\n        EXTRACT ATIOT,'S',FIELDS=(TIOT)\nSTSCN    L     R2,ATIOT            GET TIOT ADDRESS.\nSTLOOP   CLC   TIOELNGH(L'ZEROS),ZEROS  END OF TIOT?\n         BER   R10                 ERROR RETURN IF YES.\n         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM THIS DD-NAME?\n         BE    4(R10)              NORMAL RETURN IF YES.\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R2,R1               NEXT DD ENTRY.\n         B     STLOOP\n         DROP  R2,R8\n         EJECT\n*        PRINT ROUTINE (SYSPRINT).\n*        -------------------------\n*\n*        R1  = WORK REGISTER.\n*        R8  = ADDRESS OF LINE (PRECEEDED BY ONE BYTE LENGTH).\n*        R10 = LINK REGISTER.\n*\n*        RETURN +0 = ERROR.\n*               +4 = NORMAL.\n         SPACE 1\nMSRTN   $PRINT (R8)\n         LTR   R15,R15\n         BNZR  R10                 ERROR RETURN.\n         B     4(,R10)             NORMAL RETURN.\n         EJECT\n*        ERROR ANALYSIS ROUTINE (DCBCR).\n         SPACE 1\nCERR    SYNADAF   ACSMETH=BSAM\n         CLI   69(R1),C'*'         UNSIGNIFICANT MESSAGE?\n         BE    SYNAD2              BRANCH IF YES.\n         CLI   8(R1),C' '          BINARY INFORMATIONS?\n         BE    SYNAD1              BRANCH IF NOT.\n         UNPK  56(7,R1),9(4,R1)\n         TR    56(6,R1),TRTAB-X'F0'\n         MVI   62(R1),C','\n         UNPK  63(5,R1),12(3,R1)\n         TR    63(4,R1),TRTAB-X'F0'\n         MVI   67(R1),C','\n         B     SYNAD2\nSYNAD1   MVC   56(12,R1),8(R1)     MOVE BLANKS.\nSYNAD2   MVI   MESSAGE+1,C' '\n         MVC   MESSAGE+2(L'MESSAGE-2),MESSAGE+1\n         MVI   MESSAGE,C'0'        DOUBLE SPACE.\n         MVC   MESSAGE+2(L'WRM),WRM\n         MVC   MESSAGE+L'WRM+2(L'VOLNUM),VOLNUM\n         MVI   MESSAGE+L'WRM+L'VOLNUM+3,C'-'\n         CLI   69(R1),C'*'         UNSIGNIFICANT MESSAGE?\n         BE    SYNAD3              BRANCH IF YES.\n         MVC   MESSAGE+L'WRM+L'VOLNUM+5(72),56(R1)\nSYNAD3   NC    WCCM+L'WCCM-3(L'HEXMSK),HEXMSK\n         TR    WCCM+L'WCCM-3(2),TRTAB\n         MVC   MESSAGE+L'WRM+L'VOLNUM+78(L'WCCM),WCCM\n        SYNADRLS\n         NI    SWW+1,OFF           SET SWITCH TO NOP.\n         BR    R14\n         SPACE 1\n         LTORG\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nWORKD    DC    D'0'\nLOCAREA  DC    0D'0',XL120'00'     OVERLAP ON WORKAREA.\nWORKAREA DC    0D'0',XL140'00',XL5'00',XL3'00'\nDVTYP    DC    5F'0'\nATIOT    DC    A(*-*)\nZEROS    DC    F'0'\nRECB     DC    F'0'\nNRT      DC    F'0'\nNARG     DC    F'0'\nNBT      DC    F'0'\nREQAUT   DC    0F'0',BL1'00010000',AL3(MDL@IX),AL4(AUTLVL)\nJOBFILE  DC    0F'0',XL1'87',AL3(JF)\nJF       DC    0F'0',XL176'00'\nCVLIST  CAMLST NAME,DSNM,,LOCAREA\nDSCBAR  CAMLST SEARCH,DSNM,VOLNUM,WORKAREA\nRAREA    DC    XL3'00',X'00'\nQNME     DC    CL8'EURACCNT'\nRNME     DC    CL8'........'\nDSNM     DC    CL44' '\nVOLNUM   DC    CL6' '\n         DC    AL1(L'MESSAGE)\nMESSAGE  DC    CL133' '\nONE      DC    H'1'\nRNMEL    DC    H'0'\nNAUT     DC    0H'0',AL2(NAUTNO)\nNPRG     DC    0H'0',AL2(NPRGNO)\nLDEBUG   DC    0H'0',AL2(DEBUGL)\nDAORG    DC    0H'0',AL1(DCBDSGDA,0)\nRCL      DC    0H'0',AL2(AUTLGTH)\nHEXMSK   DC    XL2'0F0F'\nTRTAB    DC    C'0123456789ABCDEF'\nSYSDMP   DC    CL8'SYSUDUMP'\nSYSABD   DC    CL8'SYSABEND'\nDEBUG    DC    C'DUMP'\nDEBUGL   EQU   *-DEBUG\nRNO      DC    C'NO'\nRYES     DC    C'YES'\nAUTLVL   DC    XL1'0',CL16' '\n         DC    AL1(L'INIT)\nINIT     DC    C'1     ACCOUNTING DATA-SET INITIALIZATION.'\n         DC    AL1(L'UNDL)\nUNDL     DC    C'      -----------------------------------'\n         DC    AL1(L'DTMSG+L'DAY+L'TIME)\nDTMSG    DC    C'0          DATE : '\nDAY      DC    C'        , TIME : '\nTIME     DC    C'        .'\nWRM      DC    C'I/O ERROR ON '\nWCCM     DC    C'(WRITE CC =   )'\n         DC    AL1(L'SPM)\nSPM      DC    C'0     -SYSACC- DD MISSING. -EXIT-'\n         DC    AL1(L'AVM)\nAVM      DC    C'0     -SYSACC- ENQ IN USE. -EXIT-'\n         DC    AL1(L'OPM)\nOPM      DC    C'0     -SYSACC- OPEN ERROR. -EXIT-'\n         DC    AL1(L'UPM)\nUPM      DC    C'0     -SYSACC- UNIT ERROR. -EXIT-'\n         DC    AL1(L'JPM)\nJPM      DC    C'0     -SYSACC- JFCB ERROR. -EXIT-'\n         DC    AL1(L'CATMSG)\nCATMSG   DC    C'0     -SYSACC- DATA-SET MUST BE CATALOGED. -EXIT-'\nLCMSG    DC    C'LOCATE'\n         DC    AL1(L'OBMSG1+L'OBMSG2)\nOBMSG    EQU   *\nOBMSG1   DC    C'0     OBTAIN CC = '\nOBMSG2   DC    C'   WHILE PROCESSING -SYSACC- VOLUME. -EXIT-'\n         DC    AL1(L'DSEM+L'DSEMD)\nDSEM     DC    C'0     -SYSACC- DSCB FORMAT 1 ERROR DETECTED('\nDSEMD    DC    C'        ). -EXIT-'\n         DC    AL1(L'DDMO)\nDDMO     DC    C'0     -SYSACC- DD-CARD INCORRECTLY CODED. -EXIT-'\n         DC    AL1(L'MERC)\nMERC     DC    C'0     -SYSACC- DATA BLOCK EXCEEDS TRACK CAPACITY. -EXI1\n               T-'\n         DC    AL1(L'DSALM)\nDSALM    DC    C'0     -SYSACC- DATA-SET SPACE TOO SHORT. -EXIT-'\n         DC    AL1(L'CMS)\nCMS      DC    C'0     DATA-SET INITIALIZATION CANCELED BY OPERATOR RES1\n               PONSE. -EXIT-'\n         DC    AL1(L'DSNMSG+L'DSNMSGN)\nDSNMSG   DC    C'0          DATA-SET NAME : '\nDSNMSGN  DC    CL45' '\n         DC    AL1(L'VOLMSG+L'VOLMSGN)\nVOLMSG   DC    C'0          VOLUME SERIAL NUMBER : '\nVOLMSGN  DC    C'      .'\n         DC    AL1(L'VLM+L'VLMV)\nVLM      DC    C'0     CATALOGED VOLUME ('\nVLMV     DC    C'      ) DOES NOT AGREE WITH DD-CARD. -EXIT-'\n         DC    AL1(L'ENDT11+L'ENDT12+L'ENDT13)\nENDM1    EQU   *\nENDT11   DC    C'0          ORGANIZATION : DA, RECORD LENGTH :'\nENDT12   DC    X'40202120'\nENDT13   DC    C'.'\n         DC    AL1(L'ENDT21)\nENDM2    EQU   *\nENDT21   DC    C'0          DATA-SET IS INITIALIZED AS FOLLOWS :'\n         DC    AL1(L'ENDT3A1+L'ENDT3A2+L'ENDT3A3)\nENDM3A   EQU   *\nENDT3A1  DC    C'0               '\nENDT3A2  DC    X'402020202120'\nENDT3A3  DC    C' AUT. RECORDS,'\n         DC    AL1(L'ENDT3B1+L'ENDT3B2+L'ENDT3B3)\nENDM3B   EQU   *\nENDT3B1  DC    C'                '\nENDT3B2  DC    X'402020202120'\nENDT3B3  DC    C' PRG. RECORDS,'\n         DC    AL1(L'ENDT41+L'ENDT42+L'ENDT43)\nENDM4    EQU   *\nENDT41   DC    C'                '\nENDT42   DC    X'402020202120'\nENDT43   DC    C' ARG. RECORDS (MAXIMUM AVAILABLE),'\n         DC    AL1(L'ENDT51+L'ENDT52+L'ENDT53)\nENDM5    EQU   *\nENDT51   DC    C'                '\nENDT52   DC    X'402020202120'\nENDT53   DC    C' ARG. TABLE RECORDS,'\n         DC    AL1(L'ENDT61+L'ENDT62+L'ENDT63)\nENDM6    EQU   *\nENDT61   DC    C'                '\nENDT62   DC    X'402020202120'\nENDT63   DC    C' MAP TABLE RECORDS.'\n         DC    AL1(L'ENDT71+L'ENDT72+L'ENDT73)\nENDM7    EQU   *\nENDT71   DC    C'0          TOTAL'\nENDT72   DC    X'402020202120'\nENDT73   DC    C' RECORDS.'\n         SPACE 1\nTABM     DC    CL8'DS1LRECL'       0.\n         DC    CL8'DS1BLKL '       1.\n         DC    CL8'DS1RECFM'       2.\n         DC    CL8'DS1DSORG'       3.\n         DC    CL8'DS1RKP  '       4.\n         DC    CL8'DS1KEYL '       5.\n         DC    CL8'DS1SCALO'       6.\n         DC    CL8'DS1EXT1 '       7.\n         DC    CL8'DS1NOEPV'       8.\n         DC    CL8'DS1VOLSQ'       9.\n         EJECT\nDCBCR   DCB    DSORG=PS,DEVD=DA,MACRF=WL,EXLST=JOBFILE,SYNAD=CERR,     1\n               DDNAME=SYSACC\n         SPACE 2\n        WRITE  DECBCR,SF,MF=L\n         SPACE 2\nRECAI    DC    (AUTLGTH)X'0'       RECORD AREA.\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDINIT$": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//AIDINIT  JOB (........),'INSTALL - AIDINIT -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   GFDATE    TXPRINT                        *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=AIDINIT\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,PRINT)\n  ENTRY   AIDINIT\n  NAME    AIDINIT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDINIT@": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x00\\x9f\\x00\\x90\\x00\\x9f\\x16B\\x00\\x88\\x00\\x88\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-09T00:00:00", "modifydate": "1990-01-09T16:42:00", "lines": 136, "newlines": 136, "modlines": 0, "user": "SYSPAJA"}, "text": "1   08/01/90\n                                                      AIDINIT   1/3.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       DATA-SET INITIALIZATION       * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n Basic information about the Accounting :\n ----------------------------------------\n\n     All users are assigned one or more accounting number(s) before\n they can access our computers installation for work. This allows them\n to execute batch jobs or interactive processes (i.e., TSO, IMS, ...).\n\n     The account number (8 numerics) is composed of two items : the\n authorization number (4 numerics, 0001 to 9999), and the programmer\n number (4 numerics, 0001 to 9999).\n\n     All the existing and valid account numbers are memorized in a\n special Accounting Information data-set, which must be created,\n builded or maintained with the set of programs or TSO commands\n facilities listed below :\n          AIDINIT  : creation and initialization program.\n          AIDLOAD  : data-set load contents program.\n          AIDSYNC  : data-set synchronization program.\n          AIDUNLD  : data-set unload contents program.\n          LTACC    : data-set contents list program.\n          AUT...   : data-set contents management TSO commands.\n\n     Because of the special internal structure of this data-set, any\n work to be done into it must be executed through the use of routines\n packages (included at the link-edit time) :\n          YPACK    : short package manipulation.\n          ZPACK    : full package manipulation.\n          ZYDIAG   : packages diagnostics help.\n\n     This data-set is involved at any start of batch works (jobs) or\n interactive processes (Logon of TSO sessions) for control purpose by\n \"IEFUJV\" SMF job validation exit, so it must be defined in JES2 and\n INIT starting procedures (SYS1.PROCLIB).\n1   22/12/89\n                                                      AIDINIT   2/3.\n\n  Purpose :    This program initializes the accounting information\n  ---------    data-set accordingly to the dummy section described\n               by the macro $AIRD.\n\n  Call of the program :\n  ---------------------\n\n         //INACC  EXEC  PGM=AIDINIT,PARM=...(optional)...\n         //SYSACC   DD  UNIT=...,VOL=SER=...,DSN=...,\n                        SPACE=(TRK,(...),,CONTIG),DISP=(NEW,CATLG)\n                               CYL\n            or :\n\n         //SYSACC   DD  DSN=...,DISP=OLD\n                                     SHR\n         //SYSPRINT DD  SYSOUT=A\n\n         PARM=DUMP : dump requested when an error is detected.\n                     It can be used to obtain a dump (abend U0001)\n                     when debugging the program (SYSUDUMP or SYSABEND\n                     DD-card needed).\n\n  Note - The key (argument or index) length is assumed to be two\n  ----   bytes (halfword) long, and may or not be included in the\n         accounting information record (macro $AIRD).\n\n       - When assigning the data-set space, no secondary allocation\n         is accepted, and it must be cataloged.\n\n       - If the data-set is OLD, the program requests a confirm\n         reply to the operator before starting the initialization\n         unless it is an owner data-set.\n\n       - If the data-set is OLD and the block-size does not match\n         the assembled accounting record length (macro $AIRD), the\n         data-set must be deleted and then reallocated.\n1   20/12/85\n                                                      AIDINIT   3/3.\n\n  Data-set organization :\n  -----------------------\n\n               The data-set is a direct-access organization, but\n         divided in four different sections as described below :\n\n         1. The records in the range 0 to 19997 are normally direct\n            accessed and they correspond to the following accounting\n            information : 0001 to 9999 authorization's numbers, and\n                          0001 to 9999 programmer's numbers.\n\n         2. The records from 19998 to 19998+(N-1) are used to\n            store the keys (arguments or indexes) table refering\n            to the next section.\n\n         3. The records from 19998+N to END-X (the end of the\n            data-set space minus the number of records necessary\n            to the map table) are destinated to other accounting\n            information (i.e. - activities or contracts, and\n            services descriptions).\n\n         4. The last X records are reserved to a bit map table\n            necessary to indicate the presence or absence of\n            the corresponding authorization number record (see\n            section 1).\n\n  Data-set search strategy.\n  -------------------------\n\n               For the keys (arguments or indexes) from 1 to\n         19999 the program access directly the data records\n         (section 1 of the data-set), and for keys from 20000,\n         the program scan the keys table (section 2 of the\n         data-set) to find the corresponding physical address\n         of the data records (section 3 of the data-set).\n         The bit map table (section 4 of the data-set) is used\n         to gain time when it is requested to read the AUT. or\n         PRG. numbers records (section 1 of the data-set) in\n         a sequential mode. It allows to skip the undefined\n         records (no data) without reading it in core storage.\n\n  List of contents : when the data-set is builded, a list of\n  ------------------ authorizations and programmers can be\n                     obtained using the LTACC program.\n\n  I/O routines : the following packages are available to access and\n  -------------- manage the information in the accounting data-set :\n                      YPACK  : short I/O package.\n                      ZPACK  : full I/O package.\n                      ZYDIAG : diagnostics aids.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AIDLOAD": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08\\x0f\\x00\\x90\\x08\\x0f\\x14\\x10\\x00\\xe4\\x00\\xe4\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-21T00:00:00", "modifydate": "1990-03-21T14:10:00", "lines": 228, "newlines": 228, "modlines": 0, "user": "SYSPAJA"}, "text": "AIDLOAD  TITLE 'ACCOUNTING INFORMATION DATA-SET LOAD.'\nAIDLOAD  START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *           DATA-SET LOAD             * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n* PURPOSE :    LOAD THE CONTENTS OF THE ACCOUNTING INFORMATION\n* ---------    DATA-SET FROM A SEQUENTIAL FILE.\n*\n* CALL OF THE PROGRAM :\n* ---------------------\n*\n*        //LOAD   EXEC  PGM=AIDLOAD\n*        //SYSACC   DD  DSN=...,DISP=OLD OR SHR\n*        //SYSIN    DD  ... SEQUENTIAL FILE (LOAD DATA) ...\n*                       NOTE : THIS FILE MUST BE OUTPUT OF THE PROGRAM\n*                              'AIDUNLD'.\n*        //SYSPRINT DD  SYSOUT=A ---> LIST OF KEYS\n*\n* RETURN CODES :   0 = NORMAL COMPLETION\n* --------------  16 = ABNORMAL COMPLETION, MESSAGE(S) ON SYSPRINT OR\n*                      JOB LOG.\n*\n* OPTION :     PARM=S LOAD ONLY THE AUTHORIZATIONS AND PROGRAMMERS\n* --------            NUMBERS KEYS.\n*              PARM=U LOAD ALL KEYS WHICH ARE NOT AUTHORIZATIONS OR\n*                     PROGRAMMERS NUMBERS KEYS.\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n         EJECT\n        $AIRD\n        $DEFREG\n         EJECT\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV12     EQU   12        ADMINISTRATOR CONTROL LEVEL\n         SPACE 1\nAUT98   $MDL@IX\n         SPACE 1\n        $XENT  BASE=R12\n         EJECT\n         L     R1,0(R1)            PARM. FIELD ADDRESS\n         LH    R2,0(R1)            PARM. FIELD LENGTH\n         LTR   R2,R2\n         BNP   NOPARM\n         CH    R2,=H'1'\n         BNE   ERP\n         CLI   2(R1),C'S'          'S' LOAD?\n         BNE   *+L'*+8             NO\n         OI    SWITCH,SWS          YES\n         B     NOPARM\n         CLI   2(R1),C'U'          'U' LOAD?\n         BNE   ERP                 NO\n         OI    SWITCH,SWU          YES\n         B     NOPARM\nERP      LA    R2,PARMERR\n         BAL   R5,PRTRTN\n         NOP   0\n         B     LEAVE\nNOPARM  $EACM  REQAUT\n         CLI   AUTLVL,LV12\n         BL    NOTAUT\n         XR    R9,R9               COUNT = 0\n         XR    R6,R6               NO MSG'S\n         XR    R7,R7\n         L     R8,PTRI\n        CALL   ZOPEN,(IR),VL       OPEN 'SYSACC'\n         LTR   R0,R15              COMPLETION?\n         BZ    READ                OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R2,R15\n         BAL   R5,PRTRTN\n         NOP   0\n         B     LEAVE\nREAD    $READ  ARG                 IN DATA\n         LTR   R15,R15             COMPLETION?\n         BM    EOF                 END OF DATA\n         BNZ   ERR                 ERROR\n         TM    SWITCH,SWS+SWU      'S' OR 'U' LOAD?\n         BZ    LALL                NO\n         TM    SWITCH,SWS          'S' LOAD?\n         BZ    *+L'*+14            NO\n         CLC   ARG,MAXKEY          YES, ARE WE OVER?\n         BH    EOF                 YES, END OF USEFULL DATA\n         B     LALL                NO\n         CLC   ARG,MAXKEY          YES, ARE WE OVER?\n         BH    LALL                YES, USEFULL DATA\n         B     READ                NO, SKIP AUT. AND PRG.\nLALL     LA    R9,1(R9)            +1 COUNT\n        CALL   ZWRITE,(IR,ARG,DATA),VL  WRITE 'SYSACC'\n         LTR   R0,R15              COMPLETION?\n         BNZ   WERR                NO, ERROR\n         XR    R0,R0               OK, LIST THE ARG. NO.\n         ICM   R0,B'0011',ARG\n         CVD   R0,WORKD\n         MVC   0(L'MASK,R8),MASK\n         ED    0(L'MASK,R8),WORKD+5\n         LA    R8,L'MASK+2(R8)\n         CL    R8,PTRL\n         BNH   READ\n         LA    R2,LINE             DISPLAY KEYS\n         BAL   R5,PRTRTN\n         B     CLS\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         L     R8,PTRI\n         B     READ\nNOTAUT   LA    R2,AUTMSG\n         BAL   R5,PRTRTN\n         NOP   0\n         OI    SWITCH,SWE          SAY ERROR\n         B     LEAVE\nWERR     XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R6,R15              RETAIN MSG ADDRESS\nERR      OI    SWITCH,SWD          DISPLAY DATA\n         TM    SWITCH,SWE          PRINT ERROR ?\n         BO    CLS                 YES\nEOF      CL    R8,PTRI             ANYTHING TO BE PRINTED?\n         BE    CLS                 NO\n         LA    R2,LINE             DISPLAY LAST KEYS\n         BAL   R5,PRTRTN\n         NOP   0\nCLS     CALL   ZCLOSE,(IR),VL      CLOSE 'SYSACC'\n         LTR   R0,R15              COMPLETION?\n         BZ    EXIT                OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R7,R15              RETAIN MSG ADDRESS\nEXIT     TM    SWITCH,SWE          PRINT ERROR?\n         BO    LEAVE               YES\n         LTR   R2,R6               PENDING MSG?\n         BZ    *+L'*+8             NO\n         BAL   R5,PRTRTN\n         B     LEAVE\n         LTR   R2,R7               PENDING MSG?\n         BZ    *+L'*+8             NO\n         BAL   R5,PRTRTN\n         B     LEAVE\n         CVD   R9,WORKD            DISPLAY COUNT\n         ED    MCNT,WORKD+4\n         LA    R2,MEND\n         BAL   R5,PRTRTN\n         B     LEAVE\n         TM    SWITCH,SWD          ERROR?\n         BZ    LEAVE               NO\n         LA    R2,SNPMSG           YES, DISPLAY DATA\n         BAL   R5,PRTRTN\n         B     LEAVE\n        $SNAP  ARG,LGS             YES, DISPLAY DATA\n         LTR   R15,R15\n         BZ    LEAVE\n         OI    SWITCH,SWE          SAY ERROR\nLEAVE   $RCLOSE ,                  CLOSE ALL AND EXIT\n         LTR   R15,R15\n         BZ    *+L'*+4\n         OI    SWITCH,SWE          SAY ERROR\n        $PCLOSE\n         LTR   R15,R15\n         BZ    *+L'*+4\n         OI    SWITCH,SWE          SAY ERROR\n         XR    R10,R10             R.C. = 0\n         TM    SWITCH,SWD+SWE\n         BZ    *+L'*+4\n         LA    R10,16              SET RC = 16\n        $XRET  CC=(R10)\n         EJECT\nPRTRTN  $PRINT (R2)                PRINT ROUTINE (LINK = R5)\n         LTR   R15,R15             R2 = LINE POINTER\n         BZ    4(R5)               RETURN +4 = PRINT DONE\n         OI    SWITCH,SWE          SAY ERROR\n         BR    R5                  RETURN +0 = PRINT ERROR\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n*        -------------------------\n         SPACE 1\nWORKD    DC    D'0'\nIR       DC    F'0'\nPTRI     DC    A(LINE+10)\nPTRL     DC    A(LINE+110)\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTLVL)\n         SPACE 1\nLGS      DC    A(AUTLGTH+L'ARG)\nARG      DC    H'0'\nDATA     DC    (AUTLGTH)X'0'\n         SPACE 1\nMAXKEY   DC    0H'0',AL2(NAUTNO+NPRGNO+1)\nMASK     DC    X'402020202120'\nAUTLVL   DC    XL1'0'\nSWITCH   DC    XL1'0'\nSWS      EQU   X'01'\nSWU      EQU   X'02'\nSWD      EQU   X'04'\nSWE      EQU   X'08'\n         SPACE 1\n         DC    AL1(L'LINE)\nLINE     DC    CL121'0 KEYS :'\n         DC    AL1(MENDL)\nMEND     DC    C'0 LOAD ENDED (COUNT :'\nMCNT     DC    X'4020202020202120',C').'\nMENDL    EQU   *-MEND\n         DC    AL1(L'PARMERR)\nPARMERR  DC    C'0 INVALID PARM. FIELD - EXIT -'\n         DC    AL1(L'AUTMSG)\nAUTMSG   DC    C'0 UNAUTHORIZED ACCESS TO THIS PROGRAM - EXIT -'\n         DC    AL1(SNPMSGL)\nSNPMSG   DC    C'0 HERE FOLLOWS THE DUMP OF CURRENT '\n         DC    C' ARGUMENT AND DATA :'\nSNPMSGL  EQU   *-SNPMSG\n         SPACE 2\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDLOAD$": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//AIDLOAD  JOB (........),'INSTALL - AIDLOAD -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   TXPRINT   TXREAD    TXSNAP    ZPACK      *\n//*                ZYDIAG                                             *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=AIDLOAD\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(READ,PRINT,SNAP,ZOPEN,ZYDIAG)\n  ENTRY   AIDLOAD\n  NAME    AIDLOAD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDLOAD@": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x892_\\x00\\x892_\\x13R\\x00\"\\x00\"\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-21T00:00:00", "modifydate": "1989-11-21T13:52:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SYSPAJA"}, "text": "1   15/11/89\n                                                      AIDLOAD   1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *           DATA-SET LOAD             * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Load the contents of the accounting information\n  ---------    data-set from a sequential file.\n               Note : use this program when the data-set must be\n                      enlarged or moved to another disk type.\n\n  Call of the program :\n  ---------------------\n\n         //LOAD   EXEC  PGM=AIDLOAD\n         //SYSACC   DD  DSN=...,DISP=OLD OR SHR\n         //SYSIN    DD  ... Sequential file (load data) ...\n                        Note : this file must be output of the program\n                               AIDUNLD.\n         //SYSPRINT DD  SYSOUT=A ---> List of keys\n\n  Return codes :   0 = normal completion\n  --------------  16 = abnormal completion, message(s) on SYSPRINT or\n                       Job Log.\n\n  Option :     PARM=S load only the Authorizations and Programmers\n  --------            numbers keys.\n               PARM=U load all keys which are not Authorizations or\n                      Programmers numbers keys.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AIDSYNC": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08\\x0f\\x00\\x90\\x08\\x0f\\x14\\x10\\x01>\\x01>\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-21T00:00:00", "modifydate": "1990-03-21T14:10:00", "lines": 318, "newlines": 318, "modlines": 0, "user": "SYSPAJA"}, "text": "AIDSYNC  TITLE 'ACCOUNTING DATA-SET SYNCHRONIZATION.'\nAIDSYNC  START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *         ACCOUNTING DATA-SET         * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *          SYNCHRONIZATION            * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n* PURPOSE :    RE-SYNCHRONIZE THE ACCOUNTING DATA-SET INFORMATION\n* ---------    (AUTHORIZATIONS-PROGRAMMERS RECORDS) WITH THE BIT MAP\n*              TABLE. THIS MAY BE NECESSARY IF AN UPDATE OF THE\n*              DATA-SET HAS BEEN INTERRUPTED, AND SO THE BIT MAP TABLE\n*              DOES NOT REFLECT THE TRUE CONTENTS.\n*\n* CALL OF THE PROGRAM :\n* ---------------------\n*\n*        //SYNCHR EXEC  PGM=AIDSYNC\n*        //SYSACC   DD  DSN=...,DISP=OLD OR SHR\n*        //SYSACT   DD  DSN=...,DISP=OLD OR SHR\n*        //SYSPRINT DD  SYSOUT=A ---> SYNCHRONIZATION LIST\n*\n* RETURN CODES :   0 = NORMAL COMPLETION\n* --------------  16 = ABNORMAL COMPLETION, MESSAGE(S) ON SYSPRINT OR\n*                      JOB LOG.\n*\n* OPTION :     PARM=S TO JUST SIMULATE THE SYNCHRONIZATION PROCESS\n* --------            (THIS ALLOWS TO DO A PREVIOUS TEST RUN).\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n         EJECT\n        $AIRD  SEC=YES\n         SPACE 1\nMXSP     EQU   (((NAUTNO+NPRGNO+2)+7)/8)*8\nNOOP     EQU   X'00'               NO OPERATION\nADDOP    EQU   X'01'               ADD OPERATION\nDELOP    EQU   X'02'               DELETE OPERATION\n         EJECT\n        $DEFREG\n         SPACE 1\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV12     EQU   12        ADMINISTRATOR CONTROL LEVEL\n         SPACE 1\nAUT98   $MDL@IX\n         EJECT\n        $XENT  BASE=R12\n         L     R1,0(R1)            PARM. FIELD ADDRESS\n         LH    R2,0(R1)            PARM. FIELD LENGTH\n         LTR   R2,R2\n         BNP   NOPARM\n         CH    R2,=H'1'\n         BNE   ERP\n         CLI   2(R1),C'S'          'S' SIMULATE?\n         BNE   ERP                 NO\n         OI    SWITCH,SWS          YES\n         B     NOPARM\nERP      LA    R2,PARMERR\n         BAL   R5,PRTRTN\n         NOP   0\n         B     LEAVE\n         EJECT\nNOPARM  $EACM  REQAUT\n         CLI   AUTLVL,LV12\n         BL    NOTAUT\n         L     R1,=V(YOPEN)\n         LA    R14,1\n         L     R15,=V(ZOPEN)\n         BXLE  R1,R14,*+L'*+4\n         B     NOTFND\n         CLC   0(8,R1),=CL8'SYSACC'\n         BNE   *-14\n         MVI   5(R1),C'T'          CHANGE TO 'SYSACT' IN YOPEN\n         L     R1,=A(MXSP)\n        GETMAIN R,LV=(R1)\n         ST    R1,AMXSP\n         LR    R6,R1\n         LH    R7,=Y(NAUTNO+NPRGNO+2)\n         LR    R8,R6\n         XR    R9,R9\n         MVCL  R6,R8\n         XR    R6,R6               NO MSG'S\n         XR    R7,R7\n         XR    R8,R8\n         TM    SWITCH,SWS          SIMULATE?\n         BO    STONLY              YES\n        CALL   ZOPEN,(IR),VL       OPEN 'SYSACC'\n         B     TSTZO\nSTONLY  CALL   ZOPEN,(IR,XOPT),VL  OPEN 'SYSACC'\nTSTZO    LTR   R0,R15              COMPLETION?\n         BZ    READ                OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R2,R15\n         BAL   R5,PRTRTN\n         NOP   0\n         B     LEAVE\nREAD    CALL   ZSEQR,(IR,DATA,ARG),VL   READ DATA 'SYSACC'\n         LTR   R0,R15              COMPLETION?\n         BM    EOF                 END OF DATA\n         BZ    RDSOK               OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R7,R15              RETAIN MSG ADDRESS\n         B     ERRZ\nRDSOK    CLC   ARG(2),=Y(NAUTNO+NPRGNO+1)    ARE WE OVER?\n         BH    EOF                 YES, END OF USEFULL DATA\n         LH    R1,ARG              NO\n         AL    R1,AMXSP\n         MVI   0(R1),DELOP\n         B     READ\nEOF     CALL   YOPEN,(IR),VL       OPEN 'SYSACT'\n         LTR   R0,R15              COMPLETION?\n         BZ    STRDR               OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R2,R15\n         BAL   R5,PRTRTN\n         NOP   0\n         B     ERRZ+L'ERRZ\nSTRDR    LA    R9,1\nRDREC    STH   R9,ARG\n        CALL   YREAD,(IR,ARG,DATA),VL\n         LTR   R0,R15              COMPLETION?\n         BZ    *+L'*+8             OK\n         CH    R15,=H'15'          ARGUMENT NOT FOUND?\n         BNE   ERRDG               NO, ERROR\n         LR    R1,R9\n         AL    R1,AMXSP\n         CLC   DATA(AUTLGTH),DTNULL     CHECK CONTENTS\n         BE    CKEND\n         LTR   R0,R15              HOW COMPLETION WAS?\n         BZ    *+L'*+8             OK\n         MVI   0(R1),DELOP\n         B     CKEND\n         CLI   0(R1),NOOP\n         BE    *+L'*+8\n         MVI   0(R1),NOOP\n         B     CKEND\n         MVI   0(R1),ADDOP\nCKEND    CH    R9,=Y(NAUTNO+NPRGNO+1)   IS IT THE END?\n         BE    EOR                 YES\n         LA    R9,1(R9)            NO, NEXT\n         CH    R9,=Y(NAUTNO+1)\n         BNE   RDREC\n         LA    R9,1(R9)\n         B     RDREC\nEOR      LA    R9,1\nNXTRC    LR    R1,R9\n         AL    R1,AMXSP\n         CLI   0(R1),NOOP\n         BE    ENDCK\n         STH   R9,ARG\n         CLI   0(R1),DELOP\n         BE    DELRC\n        CALL   YREAD,(IR,ARG,DATA),VL\n         LTR   R0,R15              COMPLETION?\n         BNZ   ERRDG               ERROR\n         TM    SWITCH,SWS          SIMULATE?\n         BO    STADD               YES\n        CALL   ZWRITE,(IR,ARG,DATA),VL\n         LTR   R0,R15              COMPLETION?\n         BNZ   ERRDG               ERROR\nSTADD    MVC   LINE+L'MASK+10(7),=CL7'- ADDED'\n         B     PRTOP\nDELRC    TM    SWITCH,SWS          SIMULATE?\n         BO    STDEL               YES\n        CALL   ZDELET,(IR,ARG),VL\n         LTR   R0,R15              COMPLETION?\n         BNZ   ERRDG               ERROR\nSTDEL    MVC   LINE+L'MASK+10(9),=CL9'- DELETED'\nPRTOP    MVC   LINE+6(3),=CL3'KEY'\n         XR    R0,R0               LIST THE ARG. NO.\n         ICM   R0,B'0011',ARG\n         CVD   R0,WORKD\n         MVC   LINE+9(L'MASK),MASK\n         ED    LINE+9(L'MASK),WORKD+5\n         LA    R2,LINE             DISPLAY KEY OPERATION\n         BAL   R5,PRTRTN\n         B     ERRY\n         MVC   LINE+1(L'LINE-1),LINE\nENDCK    CH    R9,=Y(NAUTNO+NPRGNO+1)   IS IT THE END?\n         BE    ALLPR               YES\n         LA    R9,1(R9)            NO, NEXT\n         CH    R9,=Y(NAUTNO+1)\n         BNE   NXTRC\n         LA    R9,1(R9)\n         B     NXTRC\nALLPR   CALL   YCLOSE,(IR),VL      CLOSE 'SYSACT'\n         LTR   R0,R15              COMPLETION?\n         BZ    ERRZ+L'ERRZ         OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R7,R15              RETAIN MSG ADDRESS\n         B     ERRZ\nNOTAUT   LA    R2,AUTMSG\n         BAL   R5,PRTRTN\n         NOP   0\n         OI    SWITCH,SWE          SAY ERROR\n         B     LEAVE\nNOTFND   LA    R2,SCRMSG\n         BAL   R5,PRTRTN\n         NOP   0\n         OI    SWITCH,SWE          SAY ERROR\n         B     LEAVE\nERRDG    XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R6,R15              RETAIN MSG ADDRESS\nERRY    CALL   YCLOSE,(IR),VL      CLOSE 'SYSACT'\n         LTR   R0,R15              COMPLETION?\n         BZ    ERRZ                OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R7,R15              RETAIN MSG ADDRESS\nERRZ     OI    SWITCH,SWD          ERROR, DISPLAY DATA\n        CALL   ZCLOSE,(IR),VL      CLOSE 'SYSACC'\n         LTR   R0,R15              COMPLETION?\n         BZ    EXIT                OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R8,R15              RETAIN MSG ADDRESS\nEXIT     TM    SWITCH,SWE          PRINT ERROR?\n         BO    LEAVE               YES\n         LTR   R2,R6               PENDING MSG?\n         BZ    *+L'*+8             NO\n         BAL   R5,PRTRTN\n         B     LEAVE\n         LTR   R2,R7               PENDING MSG?\n         BZ    *+L'*+8             NO\n         BAL   R5,PRTRTN\n         B     LEAVE\n         LTR   R2,R8               PENDING MSG?\n         BZ    *+L'*+8             NO\n         BAL   R5,PRTRTN\n         B     LEAVE\n         LA    R2,MEND\n         BAL   R5,PRTRTN\n         B     LEAVE\n         TM    SWITCH,SWD          ERROR?\n         BZ    LEAVE               NO\n         LA    R2,SNPMSG           YES, DISPLAY DATA\n         BAL   R5,PRTRTN\n         B     LEAVE\n        $SNAP  ARG,LGS\n         LTR   R15,R15\n         BZ    LEAVE\n         OI    SWITCH,SWE          SAY ERROR\nLEAVE    ICM   R1,B'1111',AMXSP\n         BZ    QUIT\n         L     R0,=A(MXSP)\n        FREEMAIN R,A=(1),LV=(0)\nQUIT    $PCLOSE ,                  CLOSE ALL AND EXIT\n         LTR   R15,R15\n         BZ    *+L'*+4\n         OI    SWITCH,SWE          SAY ERROR\n         XR    R10,R10             R.C. = 0\n         TM    SWITCH,SWD+SWE\n         BZ    *+L'*+4\n         LA    R10,16              SET RC = 16\n        $XRET  CC=(R10)\n         EJECT\nPRTRTN  $PRINT (R2)                PRINT ROUTINE (LINK = R5)\n         LTR   R15,R15             R2 = LINE POINTER\n         BZ    4(R5)               RETURN +4 = PRINT DONE\n         OI    SWITCH,SWE          SAY ERROR\n         BR    R5                  RETURN +0 = PRINT ERROR\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n*        -------------------------\n         SPACE 1\nWORKD    DC    D'0'\nAMXSP    DC    A(*-*)\nIR       DC    F'0'\nXOPT     DC    C'ONLY'\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTLVL)\n         SPACE 1\nLGS      DC    A(AUTLGTH+L'ARG)\nARG      DC    H'0'\nDATA     DC    (AUTLGTH)X'0'\nDTNULL   DC    (AUTLGTH)X'0'\n         SPACE 1\nMASK     DC    XL6'402020202120'\nAUTLVL   DC    XL1'0'\nSWITCH   DC    XL1'0'\nSWE      EQU   X'80'\nSWD      EQU   X'40'\nSWS      EQU   X'01'\n         SPACE 1\n         DC    AL1(L'LINE)\nLINE     DC    CL121'  '\n         DC    AL1(L'MEND)\nMEND     DC    C'0 --- SYNCHRONIZATION ENDED ---'\n         DC    AL1(L'PARMERR)\nPARMERR  DC    C'0 INVALID PARM. FIELD - EXIT-'\n         DC    AL1(L'AUTMSG)\nAUTMSG   DC    C'0 UNAUTHORIZED ACCESS TO THIS PROGRAM - EXIT -'\n         DC    AL1(L'SCRMSG)\nSCRMSG   DC    C'0 SCRAMBLE ERROR DETECTED - EXIT -'\n         DC    AL1(SNPMSGL)\nSNPMSG   DC    C'0 HERE FOLLOWS THE DUMP OF LAST '\n         DC    C' ARGUMENT AND DATA :'\nSNPMSGL  EQU   *-SNPMSG\n         EJECT\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDSYNC$": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//AIDSYNC  JOB (........),'INSTALL - AIDSYNC -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   TXPRINT   TXSNAP    YPACK     ZPACK      *\n//*                ZYDIAG                                             *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=AIDSYNC\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,SNAP,YOPEN,ZOPEN,ZYDIAG)\n  ENTRY   AIDSYNC\n  NAME    AIDSYNC(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDSYNC@": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x00\\x9f\\x00\\x90\\x00\\x9f\\x15D\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-09T00:00:00", "modifydate": "1990-01-09T15:44:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "SYSPAJA"}, "text": "1   08/01/90\n                                                      AIDSYNC   1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *         ACCOUNTING DATA-SET         * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          SYNCHRONIZATION            * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Re-synchronize the accounting data-set information\n  ---------    (authorizations-programmers records) with the bit map\n               table. This may be necessary if an update of the\n               data-set has been interrupted, and so the bit map table\n               does not reflect the true contents.\n\n  Call of the program :\n  ---------------------\n\n         //SYNCHR EXEC  PGM=AIDSYNC\n         //SYSACC   DD  DSN=...,DISP=OLD or SHR\n         //SYSACT   DD  DSN=...,DISP=OLD or SHR\n         //SYSPRINT DD  SYSOUT=A ---> Synchronization list\n\n  Return codes :   0 = normal completion\n  --------------  16 = abnormal completion, message(s) on SYSPRINT or\n                       Job Log.\n\n  Option :     PARM=S to just simulate the synchronization process\n  --------            (this allows to do a previous test run).\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AIDUNLD": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08\\x0f\\x00\\x90\\x08\\x0f\\x14\\x10\\x00\\xe5\\x00\\xe5\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-21T00:00:00", "modifydate": "1990-03-21T14:10:00", "lines": 229, "newlines": 229, "modlines": 0, "user": "SYSPAJA"}, "text": "AIDUNLD  TITLE 'ACCOUNTING INFORMATION DATA-SET UNLOAD.'\nAIDUNLD  START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *          DATA-SET UNLOAD            * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n* PURPOSE :    UNLOAD THE CONTENTS OF THE ACCOUNTING INFORMATION\n* ---------    DATA-SET IN A SEQUENTIAL FILE.\n*\n* CALL OF THE PROGRAM :\n* ---------------------\n*\n*        //UNLOAD EXEC  PGM=AIDUNLD\n*        //SYSACC   DD  DSN=...,DISP=OLD OR SHR\n*        //SYSPUNCH DD  ... SEQUENTIAL FILE (UNLOADED DATA) ...\n*                       NOTE : THE SYSPUNCH-LRECL MUST BE 2-BYTES\n*                              LONGER THAN THAT OF SYSACC-LRECL.\n*        //SYSPRINT DD  SYSOUT=A ---> LIST OF KEYS\n*\n* RETURN CODES :   0 = NORMAL COMPLETION\n* --------------  16 = ABNORMAL COMPLETION, MESSAGE(S) ON SYSPRINT OR\n*                      JOB LOG.\n*\n* OPTION :     PARM=S UNLOAD ONLY THE AUTHORIZATIONS AND PROGRAMMERS\n* --------            NUMBERS KEYS.\n*              PARM=U UNLOAD ALL KEYS WHICH ARE NOT AUTHORIZATIONS OR\n*                     PROGRAMMERS NUMBERS KEYS.\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n         EJECT\n        $AIRD\n        $DEFREG\n         EJECT\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV12     EQU   12        ADMINISTRATOR CONTROL LEVEL\n         SPACE 1\nAUT98   $MDL@IX\n         SPACE 1\n        $XENT  BASE=R12\n         EJECT\n         L     R1,0(R1)            PARM. FIELD ADDRESS\n         LH    R2,0(R1)            PARM. FIELD LENGTH\n         LTR   R2,R2\n         BNP   NOPARM\n         CH    R2,=H'1'\n         BNE   ERP\n         CLI   2(R1),C'S'          'S' UNLOAD?\n         BNE   *+L'*+8             NO\n         OI    SWITCH,SWS          YES\n         B     NOPARM\n         CLI   2(R1),C'U'          'U' UNLOAD?\n         BNE   ERP                 NO\n         OI    SWITCH,SWU          YES\n         B     NOPARM\nERP      LA    R2,PARMERR\n         BAL   R5,PRTRTN\n         NOP   0\n         B     LEAVE\nNOPARM  $EACM  REQAUT\n         CLI   AUTLVL,LV12\n         BL    NOTAUT\n         XR    R9,R9               COUNT = 0\n         XR    R6,R6               NO MSG'S\n         XR    R7,R7\n         L     R8,PTRI\n        CALL   ZOPEN,(IR),VL       OPEN 'SYSACC'\n         LTR   R0,R15              COMPLETION?\n         BZ    READ                OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R2,R15\n         BAL   R5,PRTRTN\n         NOP   0\n         B     LEAVE\nREAD    CALL   ZSEQR,(IR,DATA,ARG),VL   READ DATA 'SYSACC'\n         LTR   R0,R15              COMPLETION?\n         BM    EOF                 END OF DATA\n         BZ    PUCH                OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R6,R15              RETAIN MSG ADDRESS\n         B     ERR\nPUCH     TM    SWITCH,SWS+SWU      'S' OR 'U' UNLOAD?\n         BZ    UALL                NO\n         TM    SWITCH,SWS          'S' UNLOAD?\n         BZ    *+L'*+14            NO\n         CLC   ARG,MAXKEY          YES, ARE WE OVER?\n         BH    EOF                 YES, END OF USEFULL DATA\n         B     UALL                NO\n         CLC   ARG,MAXKEY          YES, ARE WE OVER?\n         BH    UALL                YES, USEFULL DATA\n         B     READ                NO, SKIP AUT. AND PRG.\nUALL     LA    R9,1(R9)            +1 COUNT\n        $PUNCH ARG                 OUT DATA\n         LTR   R15,R15             COMPLETION?\n         BNZ   ERR                 BRANCH IF ERROR\n         XR    R0,R0               OK, LIST THE ARG. NO.\n         ICM   R0,B'0011',ARG\n         CVD   R0,WORKD\n         MVC   0(L'MASK,R8),MASK\n         ED    0(L'MASK,R8),WORKD+5\n         LA    R8,L'MASK+2(R8)\n         CL    R8,PTRL\n         BNH   READ\n         LA    R2,LINE             DISPLAY KEYS\n         BAL   R5,PRTRTN\n         B     CLS\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         L     R8,PTRI\n         B     READ\nNOTAUT   LA    R2,AUTMSG\n         BAL   R5,PRTRTN\n         NOP   0\n         OI    SWITCH,SWE          SAY ERROR\n         B     LEAVE\nERR      OI    SWITCH,SWD          ERROR, DISPLAY DATA\n         TM    SWITCH,SWE          PRINT ERROR ?\n         BO    CLS                 YES\nEOF      CL    R8,PTRI             ANYTHING TO BE PRINTED?\n         BE    CLS                 NO\n         LA    R2,LINE             DISPLAY LAST KEYS\n         BAL   R5,PRTRTN\n         NOP   0\nCLS     CALL   ZCLOSE,(IR),VL      CLOSE 'SYSACC'\n         LTR   R0,R15              COMPLETION?\n         BZ    EXIT                OK\n         XR    R1,R1               ERROR, GET DIAGNOSTIC\n        CALL   ZYDIAG\n         LR    R7,R15              RETAIN MSG ADDRESS\nEXIT     TM    SWITCH,SWE          PRINT ERROR?\n         BO    LEAVE               YES\n         LTR   R2,R6               PENDING MSG?\n         BZ    *+L'*+8             NO\n         BAL   R5,PRTRTN\n         B     LEAVE\n         LTR   R2,R7               PENDING MSG?\n         BZ    *+L'*+8             NO\n         BAL   R5,PRTRTN\n         B     LEAVE\n         CVD   R9,WORKD            DISPLAY COUNT\n         ED    MCNT,WORKD+4\n         LA    R2,MEND\n         BAL   R5,PRTRTN\n         B     LEAVE\n         TM    SWITCH,SWD          ERROR?\n         BZ    LEAVE               NO\n         LA    R2,SNPMSG           YES, DISPLAY DATA\n         BAL   R5,PRTRTN\n         B     LEAVE\n        $SNAP  ARG,LGS\n         LTR   R15,R15\n         BZ    LEAVE\n         OI    SWITCH,SWE          SAY ERROR\nLEAVE   $UCLOSE ,                  CLOSE ALL AND EXIT\n         LTR   R15,R15\n         BZ    *+L'*+4\n         OI    SWITCH,SWE          SAY ERROR\n        $PCLOSE\n         LTR   R15,R15\n         BZ    *+L'*+4\n         OI    SWITCH,SWE          SAY ERROR\n         XR    R10,R10             R.C. = 0\n         TM    SWITCH,SWD+SWE\n         BZ    *+L'*+4\n         LA    R10,16              SET RC = 16\n        $XRET  CC=(R10)\n         EJECT\nPRTRTN  $PRINT (R2)                PRINT ROUTINE (LINK = R5)\n         LTR   R15,R15             R2 = LINE POINTER\n         BZ    4(R5)               RETURN +4 = PRINT DONE\n         OI    SWITCH,SWE          SAY ERROR\n         BR    R5                  RETURN +0 = PRINT ERROR\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n*        -------------------------\n         SPACE 1\nWORKD    DC    D'0'\nIR       DC    F'0'\nPTRI     DC    A(LINE+10)\nPTRL     DC    A(LINE+110)\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTLVL)\n         SPACE 1\nLGS      DC    A(AUTLGTH+L'ARG)\nARG      DC    H'0'\nDATA     DC    (AUTLGTH)X'0'\n         SPACE 1\nMAXKEY   DC    0H'0',AL2(NAUTNO+NPRGNO+1)\nMASK     DC    X'402020202120'\nAUTLVL   DC    XL1'0'\nSWITCH   DC    XL1'0'\nSWS      EQU   X'01'\nSWU      EQU   X'02'\nSWD      EQU   X'04'\nSWE      EQU   X'08'\n         SPACE 1\n         DC    AL1(L'LINE)\nLINE     DC    CL121'0 KEYS :'\n         DC    AL1(MENDL)\nMEND     DC    C'0 UNLOAD ENDED (COUNT :'\nMCNT     DC    X'4020202020202120',C').'\nMENDL    EQU   *-MEND\n         DC    AL1(L'PARMERR)\nPARMERR  DC    C'0 INVALID PARM. FIELD - EXIT -'\n         DC    AL1(L'AUTMSG)\nAUTMSG   DC    C'0 UNAUTHORIZED ACCESS TO THIS PROGRAM - EXIT -'\n         DC    AL1(SNPMSGL)\nSNPMSG   DC    C'0 HERE FOLLOWS THE DUMP OF CURRENT '\n         DC    C' ARGUMENT AND DATA :'\nSNPMSGL  EQU   *-SNPMSG\n         SPACE 2\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDUNLD$": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//AIDUNLD  JOB (........),'INSTALL - AIDUNLD -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   TXPRINT   TXPUNCH   TXSNAP    ZPACK      *\n//*                ZYDIAG                                             *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=AIDUNLD\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,SNAP,PUNCH,ZOPEN,ZYDIAG)\n  ENTRY   AIDUNLD\n  NAME    AIDUNLD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDUNLD@": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x892_\\x00\\x892_\\x13R\\x00\"\\x00\"\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-21T00:00:00", "modifydate": "1989-11-21T13:52:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SYSPAJA"}, "text": "1   15/11/89\n                                                      AIDUNLD   1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          DATA-SET UNLOAD            * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Unload the contents of the accounting information\n  ---------    data-set in a sequential file.\n               Note : use this program when the data-set must be\n                      enlarged or moved to another disk type.\n\n  Call of the program :\n  ---------------------\n\n         //UNLOAD EXEC  PGM=AIDUNLD\n         //SYSACC   DD  DSN=...,DISP=OLD or SHR\n         //SYSPUNCH DD  ... Sequential file (unloaded data) ...\n                        Note : the SYSPUNCH-LRECL must be 2-bytes\n                               longer than that of SYSACC-LRECL.\n         //SYSPRINT DD  SYSOUT=A ---> List of keys\n\n  Return codes :   0 = normal completion\n  --------------  16 = abnormal completion, message(s) on SYSPRINT or\n                       Job Log.\n\n  Option :     PARM=S unload only the Authorizations and Programmers\n  --------            numbers keys.\n               PARM=U unload all keys which are not Authorizations or\n                      Programmers numbers keys.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AIDUPDT": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x915\\x1f\\x00\\x915\\x1f\\x11\\x11\\x01O\\x01O\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-12-17T00:00:00", "modifydate": "1991-12-17T11:11:00", "lines": 335, "newlines": 335, "modlines": 0, "user": "SYSPAJA"}, "text": "AIDUPDT  TITLE 'ACCOUNTING INFORMATION DATA-SET UPDATE.'\nAIDUPDT  START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *          DATA-SET UPDATE            * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n*\n* PURPOSE :    UPDATE AN UNLOADED (OUTPUT FROM \"AIDUNLD\" PROGRAM)\n* ---------    ACCOUNTING INFORMATION DATA-SET SEQUENTIAL FILE\n*              CONTENTS (OPERATION IS PREPARE NEXT YEAR VALIDITY\n*              START-END DATES IN ALL AUTHORIZATION RECORDS).\n*\n* CALL OF THE PROGRAM :\n* ---------------------\n*\n*        //UPDATE EXEC  PGM=AIDUPDT,PARM='YYYY,S,E'\n*                       YYYY = THE DESIRED YEAR (MANDATORY)\n*                       'S' = UPDATE START DATES ONLY\n*                       'E' = UPDATE END DATES ONLY\n*                       IF 'S' AND 'E' NOT SPECIFIED, IT MEANS UPDATE\n*                           BOTH START-END DATES.\n*        //SYSIN    DD  ... SEQUENTIAL FILE (UNLOADED DATA, THIS IS\n*                           THE OUTPUT OF THE \"AIDUNLD\" PROGRAM) ...\n*                       NOTE : THE SYSPUNCH-LRECL MUST BE 2-BYTES\n*                              LONGER THAN THAT OF SYSACC-LRECL.\n*        //SYSPUNCH DD  ... SEQUENTIAL FILE (UNLOADED DATA, THIS IS\n*                           THE NEW UPDATED SEQUENTIAL FILE) ...\n*                       NOTE : THE SYSPUNCH-LRECL MUST BE 2-BYTES\n*                              LONGER THAN THAT OF SYSACC-LRECL.\n*        //SYSPRINT DD  SYSOUT=A ---> LIST OF UPDATED KEYS\n*\n* RETURN CODES :   0 = NORMAL COMPLETION\n* --------------  16 = ABNORMAL COMPLETION, MESSAGE(S) ON SYSPRINT OR\n*                      JOB LOG.\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n         EJECT\n        $AIRD\n        $DEFREG\n         EJECT\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV12     EQU   12        ADMINISTRATOR CONTROL LEVEL\n         SPACE 1\nAUT98   $MDL@IX\n         SPACE 1\n        $XENT  BASE=R12\n         LR    R2,R1               PARM.FIELD ADDRESS\n         EJECT\n        $EACM  REQAUT\n         CLI   AUTLVL,LV12\n         BNH   NOTAUT\n         L     R1,0(R2)            GET DESIRED YEAR AND OPTION(S)\n         LH    R0,0(R1)\n         LTR   R0,R0\n         BNP   NOPARM              YEAR MISSING\n         CH    R0,=H'4'\n         BL    INPARM              INVALID YEAR\n         LA    R1,2(R1)\nPARML    CLI   0(R1),C','\n         BE    PARMN\n         CLI   0(R1),C'S'\n         BE    PARMS\n         CLI   0(R1),C'E'\n         BE    PARME\n         CLI   STSDTE,C' '\n         BNE   INPARM\n         CH    R0,=H'4'\n         BL    INPARM\n         LR    R14,R1\n         LA    R15,4\nPARMT    CLI   0(R1),C'0'\n         BL    INPARM\n         CLI   0(R1),C'9'\n         BH    INPARM\n         LA    R1,1(R1)\n         BCTR  R0,0\n         BCT   R15,PARMT\n         MVC   STSDTE(4),0(R14)    GET YEAR FOR START-END DATES\n         MVC   ENSDTE(4),0(R14)\n         LTR   R0,R0\n         BP    PARML\n         B     CHECK\nPARMS    OI    SWITCH,SWS\n         B     PARMN\nPARME    OI    SWITCH,SWE\nPARMN    LA    R1,1(R1)\n         BCT   R0,PARML\nCHECK    TM    SWITCH,SWS+SWE\n         BNZ   *+L'*+4\n         OI    SWITCH,SWS+SWE\n        $GFDATE ,,WORKD,STSDTE\n         LTR   R15,R15\n         BNZ   GFDERR\n        $GFDATE ,,WORKD,ENSDTE\n         LTR   R15,R15\n         BZ    LSNDTE\n         CH    R15,=H'4'\n         BNE   GFDERR\n         MVC   ENSDTE+4(3),=CL3'365'\n        $GFDATE ,,WORKD,ENSDTE\n         LTR   R15,R15\n         BNZ   GFDERR\nLSNDTE   PACK  WORKD,STSDTE\n         CVB   R1,WORKD\n         STCM  R1,B'0111',SBDTE    SET BINARY START DATE\n         PACK  WORKD,ENSDTE\n         CVB   R1,WORKD\n         STCM  R1,B'0111',EBDTE    SET BINARY END DATE\n         PACK  WORKD,STSDTE(4)     COMPUTE PREVIOUS YEAR FOR CHECKS\n         CVB   R1,WORKD\n         BCTR  R1,0\n         CVD   R1,WORKD\n         UNPK  WORKD(5),WORKD+5(3)\n         OI    WORKD+4,C'0'\n         MVC   PREDTE(4),WORKD+1\n        $GFDATE ,,WORKD,PREDTE\n         LTR   R15,R15\n         BZ    LSPDTE\n         CH    R15,=H'4'\n         BNE   GFDERR\n         MVC   PREDTE+4(3),=CL3'365'\n        $GFDATE ,,WORKD,PREDTE\n         LTR   R15,R15\n         BNZ   GFDERR\nLSPDTE   PACK  WORKD,PREDTE\n         CVB   R1,WORKD\n         STCM  R1,B'0111',PBDTE    SET BINARY PREVIOUS END DATE\n         L     R8,PTRI\n         XR    R7,R7\n         XR    R9,R9\n         LA    R6,DATA\n         USING AUTDSECT,R6\nREAD     NI    SWITCH,255-SWL\n        $READ  ARG                 READ DATA (SYSIN)\n         LTR   R15,R15             COMPLETION?\n         BM    EOF                 END OF DATA\n         BP    RDRERR              READ ERROR\n         XR    R1,R1\n         CLC   ARG,=Y(NAUTNO)      IS IT AN AUTHORIZATION RECORD?\n         BH    UALL                NO, COPY AS IT IS\n         TM    SWITCH,SWS          YES, SET NEW DATES (UPDATE)\n         BZ    LTOEDT\n         XR    R0,R0               START DATE CHECK\n         ICM   R0,B'0111',AUTVSD\n         CL    R0,=F'99999'        WHICH FORMAT?\n         BH    *+L'*+8             NEW FORMAT\n         AL    R0,=F'1900000'      OLD FORMAT, ADJUST IT\n         STCM  R0,B'0111',AUTVSD\n         CLC   AUTVSD,SBDTE\n         BNH   LTOEDT\n         MVC   AUTVSD,SBDTE        ADVANCE DATE\n         LA    R1,1\n         OI    SWITCH,SWL+SWPS\nLTOEDT   TM    SWITCH,SWE\n         BZ    UALL\n         XR    R0,R0               END DATE CHECK\n         ICM   R0,B'0111',AUTVED\n         CL    R0,=F'99999'        WHICH FORMAT?\n         BH    *+L'*+8             NEW FORMAT\n         AL    R0,=F'1900000'      OLD FORMAT, ADJUST IT\n         STCM  R0,B'0111',AUTVED\n         CLC   AUTVED,PBDTE\n         BNE   UALL\n         MVC   AUTVED,EBDTE        POSTPONE DATE\n         LA    R1,1\n         OI    SWITCH,SWL+SWPE\nUALL     AR    R9,R1\n         LA    R7,1(R7)\n        $PUNCH ARG                 PUNCH DATA (SYSPUNH)\n         LTR   R15,R15             COMPLETION?\n         BNZ   PUNERR              PUNCH ERROR\n         TM    SWITCH,SWL\n         BZ    READ\n         XR    R0,R0               LIST THE ARG. NO.\n         ICM   R0,B'0011',ARG\n         CVD   R0,WORKD\n         MVC   0(L'MASK,R8),MASK\n         ED    0(L'MASK,R8),WORKD+5\n         LA    R8,L'MASK+2(R8)\n         CL    R8,PTRL\n         BNH   READ\n         LA    R2,LINE             DISPLAY KEYS\n         BAS   R5,PRTRTN\n         B     CLS\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         L     R8,PTRI\n         B     READ\n         DROP  R6\nRDRERR   LA    R2,RDRMSG\n         B     PUNERR+L'PUNERR\nPUNERR   LA    R2,PUNMSG\n         BAS   R5,PRTRTN\n         NOP   0\n         OI    SWITCH,SWX\nEOF      CL    R8,PTRI             ANYTHING TO BE PRINTED?\n         BE    CLS                 NO\n         LA    R2,LINE             DISPLAY LAST KEYS\n         BAS   R5,PRTRTN\n         NOP   0\nCLS     $RCLOSE ,                  CLOSE READ (SYSIN)\n         LTR   R15,R15\n         BZ    *+L'*+4\n         OI    SWITCH,SWX\n        $UCLOSE ,                  CLOSE PUNCH (SYSPUNCH)\n         LTR   R15,R15\n         BZ    *+L'*+4\n         OI    SWITCH,SWX\n         TM    SWITCH,SWX\n         BO    LEAVE\n         TM    SWITCH,SWPS\n         BZ    TSTEND\n         MVC   INSMSGD,STSDTE\n         LA    R2,INSMSG\n         BAS   R5,PRTRTN\n         B     LEAVE\nTSTEND   TM    SWITCH,SWE\n         BZ    STPRCS\n         MVC   INEMSGT,PREDTE\n         MVC   INEMSGD,ENSDTE\n         LA    R2,INEMSG\n         BAS   R5,PRTRTN\n         B     LEAVE\nSTPRCS   CVD   R9,WORKD            DISPLAY COUNTS\n         ED    MCNT,WORKD+4\n         CVD   R7,WORKD\n         ED    TCNT,WORKD+4\n         LA    R2,MEND\n         BAS   R5,PRTRTN\n         NOP   0\nLEAVE   $PCLOSE ,                  CLOSE PRINT (SYSPRINT)\n         LTR   R15,R15\n         BZ    *+L'*+4\n         OI    SWITCH,SWX\n         XR    R10,R10             R.C. = 0\n         TM    SWITCH,SWX\n         BZ    *+L'*+4\n         LA    R10,16              SET RC = 16\n        $XRET  CC=(R10)\nNOTAUT   LA    R2,AUTMSG\n         B     SNDMSG\nNOPARM   LA    R2,NPMMSG\n         B     SNDMSG\nINPARM   LA    R2,INVMSG\n         B     SNDMSG\nGFDERR   STC   R15,GFDMSGR\n         OI    GFDMSGR,C'0'\n         LA    R2,GFDMSG\nSNDMSG   BAS   R5,PRTRTN\n         NOP   0\n         OI    SWITCH,SWX\n         B     LEAVE\n         EJECT\nPRTRTN  $PRINT (R2)                PRINT ROUTINE (LINK = R5)\n         LTR   R15,R15             R2 = LINE POINTER\n         BZ    4(R5)               RETURN +4 = PRINT DONE\n         OI    SWITCH,SWX          SAY ERROR\n         BR    R5                  RETURN +0 = PRINT ERROR\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n*        -------------------------\n         SPACE 1\nWORKD    DC    D'0'\nPTRI     DC    A(LINE+10)\nPTRL     DC    A(LINE+110)\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTLVL)\n         SPACE 1\n         DC    A(AUTLGTH+L'ARG)\nARG      DC    H'0'\nDATA     DC    (AUTLGTH)X'0'\n         SPACE 1\nSTSDTE   DC    CL7'    001'        START SERIAL DATE (YYYYDDD)\nENSDTE   DC    CL7'    366'        END SERIAL DATE (YYYYDDD)\nPREDTE   DC    CL7'    366'        PREVIOUS END SERIAL DATE (YYYYDDD)\nSBDTE    DC    XL3'0'              START DATE (BINARY)\nEBDTE    DC    XL3'0'              END DATE (BINARY)\nPBDTE    DC    XL3'0'              PREVIOUS END DATE (BINARY)\nMASK     DC    XL6'402020202120'\nAUTLVL   DC    XL1'0'\nSWITCH   DC    XL1'0'\nSWL      EQU   X'80'\nSWX      EQU   X'40'\nSWPS     EQU   X'08'\nSWPE     EQU   X'04'\nSWS      EQU   X'02'\nSWE      EQU   X'01'\n         SPACE 1\n         DC    AL1(L'LINE)\nLINE     DC    CL121'0 KEYS :'\n         DC    AL1(MENDL)\nMEND     DC    C'0 KEYS UPDATED :'\nMCNT     DC    XL8'4020202020202120',C' - TOTAL KEYS COPIED :'\nTCNT     DC    XL8'4020202020202120',C'.'\nMENDL    EQU   *-MEND\n         DC    AL1(L'AUTMSG)\nAUTMSG   DC    C'0 UNAUTHORIZED ACCESS TO THIS PROGRAM - EXIT -'\n         DC    AL1(L'NPMMSG)\nNPMMSG   DC    C'0 PARM. FIELD MISSING - EXIT -'\n         DC    AL1(L'INVMSG)\nINVMSG   DC    C'0 INVALID PARM. FIELD - EXIT -'\n         DC    AL1(GFDMSGL)\nGFDMSG   DC    C'0 GFDATE ROUTINE ERROR (RC='\nGFDMSGR  DC    CL1' ',C') - EXIT-'\nGFDMSGL  EQU   *-GFDMSG\n         DC    AL1(INSMSGL)\nINSMSG   DC    C'0 VALIDITY START DATES CHANGED TO '\nINSMSGD  DC    CL7' ',C' IN SOME/ALL KEYS RECORDS LISTED ABOVE.'\nINSMSGL  EQU   *-INSMSG\n         DC    AL1(INEMSGL)\nINEMSG   DC    C'0 ONLY VALIDITY END DATES '\nINEMSGT  DC    CL7' ',C' CHANGED TO '\nINEMSGD  DC    CL7' ',C' IN SOME/ALL KEYS RECORDS LISTED ABOVE.'\nINEMSGL  EQU   *-INEMSG\n         DC    AL1(L'RDRMSG)\nRDRMSG   DC    C'0 READ (SYSIN) ERROR - EXIT -'\n         DC    AL1(L'PUNMSG)\nPUNMSG   DC    C'0 PUNCH (SYSPUNCH) ERROR - EXIT -'\n         SPACE 2\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AIDUPDT$": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//AIDUPDT  JOB (........),'INSTALL - AIDUPDT -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   GFDATE    TXPRINT   TXPUNCH   TXREAD     *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=AIDUPDT\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,PRINT,PUNCH,READ)\n  ENTRY   AIDUPDT\n  NAME    AIDUPDT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIDUPDT@": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x915\\x1f\\x00\\x915\\x1f\\x14\\x05\\x00(\\x00(\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-12-17T00:00:00", "modifydate": "1991-12-17T14:05:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "SYSPAJA"}, "text": "1   17/12/91\n                                                      AIDUPDT   1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          DATA-SET UPDATE            * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Update an unloaded (output from AIDUNLD program)\n  ---------    accounting information data-set sequential file\n               contents (operation is prepare next year validity\n               start-end dates in all authorization records).\n\n  Call of the program :\n  ---------------------\n\n         //UPDATE EXEC  PGM=AIDUPDT,PARM='yyyy,S,E'\n                        yyyy = the desired year (mandatory)\n                        'S' = update start dates only\n                        'E' = update end dates only\n                        If 'S' and 'E' not specified, it means update\n                            both start-end dates.\n         //SYSIN    DD  ... sequential file (unloaded data, this is\n                            the output of the AIDUNLD program) ...\n                        Note : the SYSPUNCH-LRECL must be 2-bytes\n                               longer than that of SYSACC-LRECL (see\n                               unload function).\n         //SYSPUNCH DD  ... sequential file (unloaded data, this is\n                            the new updated sequential file) ...\n                        Note : the SYSPUNCH-LRECL must be 2-bytes\n                               longer than that of SYSACC-LRECL (see\n                               unload or load functions).\n         //SYSPRINT DD  SYSOUT=A ---> list of updated keys\n\n  Return codes :   0 = normal completion\n  --------------  16 = abnormal completion, message(s) on SYSPRINT or\n                       Job Log.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMRUTIL": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\t\\x00\\x0b@\\x0b@\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T09:00:00", "lines": 2880, "newlines": 2880, "modlines": 0, "user": "SYSPAJA"}, "text": "AMRU     TITLE '--- ASSEMBLER MACROS REFERENCES UTILITY ---'\nAMRUTIL  START 0\n         SPACE 1\n         PRINT OFF\n         GBLC  &PRS,&PRF\n         AIF   ('&SYSPARM' EQ 'FULL').SF\n         AIF   ('&SYSPARM' EQ 'SHORT').SS\n&PRS     SETC  'NOGEN'\n&PRF     SETC  'NOGEN'\n         AGO   .ST\n.SS      ANOP\n&PRS     SETC  'GEN'\n&PRF     SETC  'NOGEN'\n         AGO   .ST\n.SF      ANOP\n&PRS     SETC  'GEN'\n&PRF     SETC  'GEN'\n.ST      PRINT ON\n         SPACE 1\n* CALL OF THE PROGRAM :\n* ---------------------\n*\n*        //XEQ     EXEC PGM=AMRUTIL,PARM=...(OPTIONAL)...\n*        //MAC....1  DD DSN=...1ST MACROS LIBRARY...,DISP=SHR\n*        //MAC....2  DD DSN=...2ND MACROS LIBRARY...,DISP=SHR\n*                           ...ANY NUMBER OF DD-CARDS...\n*        //MAC....N  DD DSN=...NTH MACROS LIBRARY...,DISP=SHR\n*        //SRC....1  DD DSN=...1ST SOURCES LIBRARY...,DISP=SHR\n*        //SRC....2  DD DSN=...2ND SOURCES LIBRARY...,DISP=SHR\n*                           ...ANY NUMBER OF DD-CARDS...\n*        //SRC....N  DD DSN=...NTH SOURCES LIBRARY...,DISP=SHR\n*        //TITPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n*        //MACPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n*        //SRCPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n*        //SYSPRINT  DD SYSOUT=*\n*\n* AUTHOR :     MOINIL P.A.\n* --------     COMPUTING CENTRE (TP 361)\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         PRINT &PRF\n        $DEFREG\n*------- DEFAULTS VALUES DEFINITIONS (CAN BE CHANGED THROUGH THE JCL\n*              EXEC PARM= FIELD).\n         SPACE 1\n@LN      EQU   55        MAX. NUMBER OF LINES PER PAGE\n@MD      EQU   10        MAX. NUMBER OF MACLIB'S DD'S\n@SD      EQU   10        MAX. NUMBER OF SOURCE'S DD'S\n@MM      EQU   1000      MAX. NUMBER OF MACLIB'S MEMBERS NAMES\n@SM      EQU   2000      MAX. NUMBER OF SOURCE'S MEMBERS NAMES\n@RN      EQU   5000      MAX. NUMBER OF REFERENCE ELEMENTS\n*                        (A REFERENCE ELEMENT IS USED TO SET THE NUMBER\n*                        OF TIMES A MACRO APPEARS IN A SOURCE MODULE.\n*                        OBVIOUSLY NOT ALL MACROS ARE IN ALL MODULES)\n@IM      EQU   100       MAX. NUMBER OF INTERNAL MACROS DEFINITIONS\n*                        IN A SOURCE MODULE.\n@UM      EQU   1000      MAX. NUMBER OF UNRESOLVED MACROS ENCOUNTERED\n*                        IN A SOURCE MODULE.\n@CM      EQU   50        MAX. NUMBER OF COPY MODULES NAMES (NOT\n*                        STATEMENTS) IN A SOURCE MODULE.\n@OC      EQU   500       MAX. NUMBER OF OPERATION CODES DEFINED IN\n*                        MEMBER \"GIMOPCDE\" (SYS1.PARMLIB)\n*========> SEE DEFINITIONS AT LABELS \"OPCNME\" AND \"OPCDSN\" <===========\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                      M A I N     P R O C E S S                      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*              R10 = LOCAL BASE REGISTER                              *\n*              R11 = 1ST MAIN BASE REGISTER                           *\n*              R12 = 2ND MAIN BASE REGISTER                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        $XENT  BASE=(R11,R12)\n         L     R10,=A(INIT0)       INITIALIZATION\n         BR    R10\nINITX    L     R10,=A(SCAN0)       SCAN ALL DD'S\n         BR    R10\nSCANX    L     R10,=A(TRCE0)       INITIAL TRACE\n         BR    R10\nTRCEX    L     R10,=A(BOPC0)       BUILD OPERATION CODES TABLE\n         BR    R10\nBOPCX    L     R10,=A(GMMN0)       GET MEMBERS NAMES\n         BR    R10\nGMMNX    L     R10,=A(SCSM0)       SCAN SOURCE'S MEMBERS\n         BR    R10\nSCSMX    L     R10,=A(MAPR0)       MACROS PRINT\n         BR    R10\nMAPRX    L     R10,=A(FTRC0)       FINAL TRACE\n         BR    R10\n         SPACE 1\n*------- THAT'S ALL FOLKS\n         SPACE 1\nLEAVE   $PCLOSE\n         LTR   R2,R15              RC = 0\n         BNZ   ERRPCL\n         TM    SW2,SWERR\n         BZ    QUIT+L'QUIT\nQUIT     LA    R2,16               RC = 16\n         ICM   R1,B'1111',WADDR\n         BZ    EXIT\n         L     R0,WSIZE\n        FREEMAIN R,A=(1),LV=(0)\nEXIT    $XRET  CC=(R2)\n         SPACE 1\n*------- SEND ERROR DIAGNOTICS\n         SPACE 1\nERRPCL   STC   R15,PCLERR+47\n         OI    PCLERR+47,C'0'\nPCLERR  WTO    '\"SYSPRINT\" / CLOSE ERROR ($PCLOSE RC =  )',            X\n               ROUTCDE=11,DESC=7\n         B     QUIT\nLSTERR   STC   R15,MERR1+42\n         OI    MERR1+42,C'0'\n         LA    R1,MERR1\n         BAS   R9,PERR\n         B     LEAVE\n         SPACE 1\n*------- SEND MESSAGE ROUTINE\n*             R0-R1-R2-R14-R15  = WORK REGISTERS\n*             R9 = LINK REGISTER\n         SPACE 1\nPERR     OI    SW2,SWERR\n         TM    SW1,SWPRT\n         BZ    PERR1\n         MVC   WLNE(6),=CL6'0-M-> '\n         MVC   WLNE+6(L'WLNE-6),WLNE+5\n         LH    R15,0(R1)\n         SH    R15,=H'5'\n         EX    R15,PERRMV\n         LR    R2,R1               SAVE AROUND PRINT\n        $PRINT WLNE\n         LTR   R15,R15\n         BZR   R9\n         NI    SW1,255-SWPRT\n         STC   R15,PERRWT+46\n         OI    PERRWT+46,C'0'\nPERRWT  WTO    '\"SYSPRINT\" / PRINT ERROR ($PRINT RC =  )',             X\n               ROUTCDE=11,DESC=7\n         LR    R1,R2               RESTORE\nPERR1   WTO    MF=(E,(1))\n         BR    R9\nPERRMV   MVC   WLNE+6(*-*),4(R1)   <<EXECUTED>>\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                       C O M M O N     D A T A                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nWORKD    DC    D'0'                DOUBLE-WORD WORK\nATIOT    DC    A(*-*)              TIOT POINTER\nWADDR    DC    F'0'                AREA ADDRESS\nWSIZE    DC    F'0'                AREA SIZE\nVLLN     DC    A(@LN)              MAX. NO. OF LINES PER PAGE\nVLMD     DC    A(@MD)              MAX. NO. OF MACLIB'S DD'S\nVLSD     DC    A(@SD)              MAX. NO. OF SOURCE'S DD'S\nVLMM     DC    A(@MM)              MAX. NO. OF MACLIB'S MEMBERS NAMES\nVLSM     DC    A(@SM)              MAX. NO. OF SOURCE'S MEMBERS NAMES\nVLRN     DC    A(@RN)              MAX. NO. OF REFERENCE ELEMENTS\nVLIM     DC    A(@IM)              MAX. NO. OF SOURCE INTERNAL MACROS\nVLUM     DC    A(@UM)              MAX. NO. OF SOURCE UNRESOLVED MACROS\nVLCM     DC    A(@CM)              MAX. NO. OF COPY MODULES NAMES\nVLOC     DC    A(@OC)              MAX. NO. OF OPERATION CODES\nAMDS     DC    A(*-*)              START OF MACLIB'S DD'S\nAMDN     DC    F'0'                MACLIB'S DD'S USED NUMBER\nASDS     DC    A(*-*)              START OF SOURCE'S DD'S\nAMDE     EQU   ASDS                ALSO END OF 'MD'\nASDN     DC    F'0'                SOURCE'S DD'S USED NUMBER\nAMMS     DC    A(*-*)              START OF MACLIB'S MEMBERS NAMES\nASDE     EQU   AMMS                ALSO END OF 'SD'\nASMS     DC    A(*-*)              START OF SOURCE'S MEMBERS NAMES\nAMME     EQU   ASMS                ALSO END OF 'MM'\nARNS     DC    A(*-*)              START OF REFERENCE ELEMENTS\nASME     EQU   ARNS                ALSO END OF 'SM'\nAIMS     DC    A(*-*)              START OF SOURCE INTERNAL MACROS\nARNE     EQU   AIMS                ALSO END OF 'RN'\nAUMS     DC    A(*-*)              START OF SOURCE UNRESOLVED MACROS\nAIME     EQU   AUMS                ALSO END OF 'IM'\nACMS     DC    A(*-*)              START OF COPY MODULES NAMES\nAUME     EQU   ACMS                ALSO END OF 'UM'\nAOCS     DC    A(*-*)              START OF OPERATION CODES TABLE\nACME     EQU   AOCS                ALSO END OF 'CM'\nELDA     DC    A(*-*)              END+1 OF LAST DEFINED AREA\nAOCE     EQU   ELDA                ALSO END OF 'OC'\nCRNPTR   DC    F'0'\nPRVSMA   DC    F'0'\nPRVDSN   DC    F'0'\nMIMPTR   DC    F'0'\nMUMPTR   DC    F'0'\nMCMPTR   DC    F'0'\nOCMPTR   DC    F'0'\nSZMD     DC    F'0'                SIZE OF \"MD\"\nSZSD     DC    F'0'                SIZE OF \"SD\"\nSZMM     DC    F'0'                SIZE OF \"MM\"\nSZSM     DC    F'0'                SIZE OF \"SM\"\nSZRN     DC    F'0'                SIZE OF \"RN\"\nSZIM     DC    F'0'                SIZE OF \"IM\"\nSZUM     DC    F'0'                SIZE OF \"UM\"\nSZCM     DC    F'0'                SIZE OF \"CM\"\nSZOC     DC    F'0'                SIZE OF \"OC\"\nOPCNME   DC    CL8'GIMOPCDE'       MEMBER NAME\nTTLDD    DC    CL8'TITPRINT'\nMCLDD    DC    CL8'MACPRINT'\nSRLDD    DC    CL8'SRCPRINT'\nPARMNME  DC    CL8' '\nDDNME    DC    CL8' '\nPVOPRF   DC    CL8' '\nCPYMOD   DC    CL8' '\nTRHEX    DC    CL16'0123456789ABCDEF'\nEMDL     DC    Y(MDLGTH)\nESDL     DC    Y(SDLGTH)\nEMML     DC    Y(MMLGTH)\nESML     DC    Y(SMLGTH)\nERNL     DC    Y(RNLGTH)\nEIML     DC    Y(IMLGTH)\nEUML     DC    Y(UMLGTH)\nECML     DC    Y(CMLGTH)\nEOCL     DC    Y(OCLGTH)\nMXLN1    DC    PL2'+0'\nMXLN2    DC    PL2'+0'\nMXLN3    DC    PL2'+0'\nMXLN4    DC    PL2'+0'\nMXLN5    DC    PL2'+0'\nMCPG     DC    PL3'+0'\nMCLN     DC    PL2'+0'\nSRPG     DC    PL3'+0'\nSRLN     DC    PL2'+0'\nIXPG     DC    PL3'+0'\nIXLN     DC    PL2'+0'\nCTRL     DC    PL3'+0'\nOCTIX    DC    8XL5'0',XL1'FF'     \"OC\" TABLE INDEX\nCUROPL   DC    XL1'0'\nSW1      DC    XL1'0'\nSWPRT    EQU   X'80'               SYSPRINT DD PRESENT\nSWTIT    EQU   X'40'               TITPRINT DD PRESENT\nSWMAC    EQU   X'20'               MACPRINT DD PRESENT\nSWSRC    EQU   X'10'               SRCPRINT DD PRESENT\nSWMDD    EQU   X'08'               MAC..... DD(S) PRESENT\nSWSDD    EQU   X'04'               SRC..... DD(S) PRESENT\nSW2      DC    XL1'0'\nSWERR    EQU   X'80'               ERROR RC=16 TO BE SET\nSWTAV    EQU   X'40'               TRACE WORK-AREAS VALUES\nSWFTR    EQU   X'20'               FORCE TRACE WORK-AREAS VALUES\nSW3      DC    XL1'0'\nSWMNP    EQU   X'80'               MODULE NAME PRINT\nSWDSP    EQU   X'08'               DATA-SET NAME PRINT\nSWCMP    EQU   X'04'               COPY MODULES NAMES PRINT\nSWIMP    EQU   X'02'               INTERNAL MACROS PRINT\nSWUMP    EQU   X'01'               UNRESOLVED MACROS PRINT\nSW4      DC    XL1'0'\nSWEQU    EQU   X'80'               PARM.FIELD SCAN USE\nSWCNT    EQU   X'08'               SOURCE CONTINUATION CARD\n         SPACE 1\n*------- DATA PRINT LINES\n         SPACE 1\n         DC    AL1(L'WCRD)\nWCRD     DC    CL80' '             READ WORK CARD\n         DC    AL1(L'WLNE)\nWLNE     DC    CL133' '            PRINT WORK LINE\n         SPACE 1\n         DC    AL1(L'COV1)\nCOV1     DS    0CL80\n         DC    CL25'1A.M.R.   H A N D B O O K',CL55' '\n         DC    AL1(L'COV2)\nCOV2     DS    0CL80\n         DC    CL1'+',24C'_',CL55' '\n         DC    AL1(L'COV3)\nCOV3     DS    0CL80\n         DC    CL5' ',CL19' '\n         DC    CL36'ASSEMBLER MACROS REFERENCES HANDBOOK'\n         DC    CL20' '\n         DC    AL1(L'COV4)\nCOV4     DS    0CL80\n         DC    CL5' ',CL29' ',CL7'DATE :'\nCOVDATE  DC    CL10' ',CL29' '\n         SPACE 1\n         DC    AL1(L'IXT1)\nIXT1     DS    0CL80\n         DC    CL41'1A.M.R.   H A N D B O O K - INDEX SECTION'\n         DC    CL14' ----- DATE : '\nIXT1D    DC    CL10' ',CL9' - PAGE I'\nIXT1P    DC    CL6' '\n         DC    AL1(L'IXT1U)\nIXT1U    DS    0CL80\n         DC    CL1'+',79C'_'\n         DC    AL1(L'IXT2)\nIXT2     DS    0CL80\n         DC    CL18'0  COUNTS TYPE    ',CL1' '\n         DC    CL44'LIBRARY DATA-SET NAME ',CL1' '\n         DC    CL6'VOLUME',CL1' '\n         DC    CL7'PAGE   ',CL2' '\n         DC    AL1(L'IXT2U)\nIXT2U    DS    0CL80\n         DC    CL19'+  _______________ ',44C'_'\n         DC    CL17' ______ _______  '\n         DC    AL1(L'IXT3)\nIXT3     DS    0CL80\n         DC    CL3' '\nIXT3L    DC    CL15' ',CL1' '\nIXT3D    DC    CL44' ',CL1' '\nIXT3V    DC    CL6' ',CL1' '\nIXT3T    DC    CL1' '\nIXT3P    DC    CL6' ',CL2' '\n         SPACE 1\n         DC    AL1(L'MCT1)\nMCT1     DS    0CL80\n         DC    CL42'1A.M.R.   H A N D B O O K - MACROS SECTION'\n         DC    CL13' ---- DATE : '\nMCT1D    DC    CL10' ',CL9' - PAGE M'\nMCT1P    DC    CL6' '\n         DC    AL1(L'MCT1U)\nMCT1U    DS    0CL80\n         DC    CL1'+',79C'_'\n         DC    AL1(L'MCT2)\nMCT2     DS    0CL80\n         DC    CL12'0DATA-SET : '\nMCT2N    DC    CL44' ',CL6' ',CL12'ON VOLUME : '\nMCT2V    DC    CL6' '\n         DC    AL1(L'MCT2U)\nMCT2U    DS    0CL80\n         DC    CL1'+',10C'_',CL51' ',11C'_',CL7' '\n         DC    AL1(L'MCT3)\nMCT3     DS    0CL80\n         DC    CL2'0',4CL19'   MACRO    COUNT  ',CL2' '\n         DC    AL1(L'MCT3U)\nMCT3U    DS    0CL80\n         DC    CL2'+',4CL19'   ________ _____  ',CL2' '\n         DC    AL1(L'MCT4)\nMCT4     DS    0CL80\n         DC    CL2' '\nMCT4M    DC    4CL19' ',CL2' '\n         DC    AL1(L'SRT1)\nSRT1     DS    0CL80\n         DC    CL43'1A.M.R.   H A N D B O O K - SOURCES SECTION'\n         DC    CL12' --- DATE : '\nSRT1D    DC    CL10' ',CL9' - PAGE S'\nSRT1P    DC    CL6' '\n         DC    AL1(L'SRT1U)\nSRT1U    DS    0CL80\n         DC    CL1'+',79C'_'\n         DC    AL1(L'SRT2)\nSRT2     DS    0CL80\n         DC    CL12'0DATA-SET : '\nSRT2N    DC    CL44' ',CL6' ',CL12'ON VOLUME : '\nSRT2V    DC    CL6' '\n         DC    AL1(L'SRT2U)\nSRT2U    DS    0CL80\n         DC    CL1'+',10C'_',CL51' ',11C'_',CL7' '\n         DC    AL1(L'SRT3)\nSRT3     DS    0CL80\n         DC    CL2'0',4CL19'   MACRO    COUNT  ',CL2' '\n         DC    AL1(L'SRT3U)\nSRT3U    DS    0CL80\n         DC    CL2'+',4CL19'   ________ _____  ',CL2' '\n         DC    AL1(L'SRT4)\nSRT4     DS    0CL80\n         DC    CL2' '\nSRT4M    DC    4CL19' ',CL2' '\n         DC    AL1(L'SRT5)\nSRT5     DS    0CL80\n         DC    CL19'0==> MODULE NAME : '\nSRT5N    DC    CL8' ',CL53' '\n         DC    AL1(L'SRT6)\nSRT6     DS    0CL80\n         DC    CL6'  -> \"'\nSRT6N    DC    CL54' ',CL20' '\n         DC    AL1(L'SRT7)\nSRT7     DS    0CL80\n         DC    CL26'  -> \"COPY MODULE\" NAMES :',CL54' '\n         DC    AL1(L'SRT8)\nSRT8     DS    0CL80\n         DC    CL24'  -> \"INTERNAL\" MACROS :',CL56' '\n         DC    AL1(L'SRT9)\nSRT9     DS    0CL80\n         DC    CL26'  -> \"UNRESOLVED\" MACROS :',CL54' '\n         DC    AL1(L'MRT1)\nMRT1     DS    0CL80\n         DC    CL42'1A.M.R.   H A N D B O O K - MACROS SECTION'\n         DC    CL13' ---- DATE : '\nMRT1D    DC    CL10' ',CL9' - PAGE M'\nMRT1P    DC    CL6' '\n         DC    AL1(L'MRT1U)\nMRT1U    DS    0CL80\n         DC    CL1'+',79C'_'\n         DC    AL1(L'MRT2)\nMRT2     DS    0CL80\n         DC    CL12'0DATA-SET : '\nMRT2N    DC    CL44' ',CL6' ',CL12'ON VOLUME : '\nMRT2V    DC    CL6' '\n         DC    AL1(L'MRT2U)\nMRT2U    DS    0CL80\n         DC    CL1'+',10C'_',CL51' ',11C'_',CL7' '\n         DC    AL1(L'MRT3)\nMRT3     DS    0CL80\n         DC    CL32'0     MACRO    COUNT   MODULE   '\n         DC    CL44'DATA-SET ',CL4' '\n         DC    AL1(L'MRT3U)\nMRT3U    DS    0CL80\n         DC    CL32'+     ________ _____   ________ ',44C'_'\n         DC    CL4' '\n         DC    AL1(L'MRT4)\nMRT4     DS    0CL80\n         DC    CL6' '\nMRT4M    DC    CL8' '\nMRT4C    DC    CL6' ',CL3' '\nMRT4N    DC    CL8' ',CL1' '\nMRT4D    DC    CL44' ',CL4' '\n         SPACE 1\n*------- DIAGNOTICS MESSAGES\n         SPACE 1\n         PRINT &PRF\nGTMERR  WTO    'GETMAIN : STORAGE NOT AVAILABLE (SIZE=        )',      X\n               ROUTCDE=11,DESC=7,MF=L\nMERR1   WTO    '\"        \" / PRINT ERROR ($PRINT RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\nMERR2   WTO    'TOO MANY       ''S MEMBERS NAMES (\" M\" VALUE OVERFLOW)'X\n               ,ROUTCDE=11,DESC=7,MF=L\nMERR3   WTO    '\"        \" / OPEN ERROR ($PDOPEN RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\nMERR4   WTO    '\"        \" / READ ERROR ($PDREAD RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\nMERR5   WTO    '\"        \" / CLOSE ERROR ($PDCLOSE RC =  )',           X\n               ROUTCDE=11,DESC=7,MF=L\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                     I N I T I A L I Z A T I O N                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- GET NEW VALUES IF SUPPLIED BY JCL EXEC PARM= FIELD WHICH\n*        MAY BE SPECIFIED AS SHOWN BELOW :\n*        1. PARM='LN=..,MD=...,SD=...,MM=...,SM=...,RN=...,IM=...,\n*                 UM=...,CM=...,OC=...,T'\n*        2. PARM='LN=.. MD=... SD=... MM=... SM=... RN=... IM=...\n*                 UM=... CM=... OC=... T'\n*        3. PARM='LN .. MD ... SD ... MM ... SM ... RN ... IM ...\n*                 UM ... CM ... OC ... T'\n         SPACE 1\nINIT0    L     R1,0(R1)            PARM.FIELD ADDRESS\n         XR    R2,R2\n         ICM   R2,B'0011',0(R1)    PARM.FIELD LENGTH\n         BZ    NOPARM\n         LA    R1,2(R1)            START OF PARM.FIELD TEXT\n         AR    R2,R1               END+1 OF PARM.FIELD TEXT\nPARM1    CLI   0(R1),C','\n         BE    PARM2\n         CLI   0(R1),C' '\n         BNE   PARM3\nPARM2    LA    R1,1(R1)            SEPARATOR\n         CLR   R1,R2\n         BL    PARM1\n         B     NOPARM\nPARM3    CLI   0(R1),C'T'\n         BNE   *+L'*+8\n         OI    SW2,SWTAV\n         B     PARM2\n         LA    R0,2(R1)\n         CLR   R0,R2\n         BH    ERRPARM\n         CLC   0(2,R1),=CL2'LN'\n         BNE   *+L'*+8\n         LA    R3,VLLN\n         B     PARM4\n         CLC   0(2,R1),=CL2'MD'\n         BNE   *+L'*+8\n         LA    R3,VLMD\n         B     PARM4\n         CLC   0(2,R1),=CL2'SD'\n         BNE   *+L'*+8\n         LA    R3,VLSD\n         B     PARM4\n         CLC   0(2,R1),=CL2'MM'\n         BNE   *+L'*+8\n         LA    R3,VLMM\n         B     PARM4\n         CLC   0(2,R1),=CL2'SM'\n         BNE   *+L'*+8\n         LA    R3,VLSM\n         B     PARM4\n         CLC   0(2,R1),=CL2'RN'\n         BNE   *+L'*+8\n         LA    R3,VLRN\n         B     PARM4\n         CLC   0(2,R1),=CL2'IM'\n         BNE   *+L'*+8\n         LA    R3,VLIM\n         B     PARM4\n         CLC   0(2,R1),=CL2'UM'\n         BNE   *+L'*+8\n         LA    R3,VLUM\n         B     PARM4\n         CLC   0(2,R1),=CL2'CM'\n         BNE   *+L'*+8\n         LA    R3,VLCM\n         B     PARM4\n         CLC   0(2,R1),=CL2'OC'\n         BNE   ERRPARM\n         LA    R3,VLOC\nPARM4    CLR   R0,R2\n         BNL   NOPARM              NULL VALUE\n         LR    R1,R0\n         NI    SW4,255-SWEQU\nPARM5    CLI   0(R1),C','\n         BE    PARM2               SEPARATOR\n         CLI   0(R1),C'='\n         BNE   PARM6\n         TM    SW4,SWEQU\n         BO    ERRPARM\n         OI    SW4,SWEQU\n         B     *+L'*+8\nPARM6    CLI   0(R1),C' '\n         BNE   PARM7\n         LA    R1,1(R1)\n         CLR   R1,R2\n         BL    PARM5\n         B     NOPARM\nPARM7    CLI   0(R1),C'0'\n         BL    PARM3\n         XR    R15,R15\nPARM8    CLI   0(R1),C','\n         BE    PARM9               SEPARATOR\n         CLI   0(R1),C' '\n         BE    PARM9               SEPARATOR\n         CLI   0(R1),C'0'\n         BL    ERRPARM\n         CLI   0(R1),C'9'\n         BH    ERRPARM\n         XR    R14,R14\n         ICM   R14,B'1000',0(R1)\n         SLL   R14,4\n         SRL   R14,28\n         LTR   R15,R15\n         BNP   *+L'*+4\n         MH    R15,=H'10'\n         AR    R15,R14\n         LA    R1,1(R1)\n         CLR   R1,R2\n         BL    PARM8\nPARM9    LTR   R15,R15\n         BNP   *+L'*+4             NULL VALUE\n         ST    R15,0(R3)           SET NEW VALUE\n         CLR   R1,R2\n         BL    PARM2\n         SPACE 1\n*------- GET AND INITIALIZE AREAS\n         SPACE 1\nNOPARM   L     R1,VLLN\n         LA    R0,10\n         CLR   R1,R0\n         BL    ERRMXLN\n         LA    R0,99\n         CLR   R1,R0\n         BH    ERRMXLN\n         CVD   R1,WORKD\n         SP    WORKD,=PL1'+3'\n         ZAP   MXLN1,WORKD+L'WORKD-L'MXLN1(L'MXLN1)\n         SP    WORKD,=PL1'+2'\n         ZAP   MXLN2,WORKD+L'WORKD-L'MXLN2(L'MXLN2)\n         SP    WORKD,=PL1'+1'\n         ZAP   MXLN3,WORKD+L'WORKD-L'MXLN3(L'MXLN3)\n         SP    WORKD,=PL1'+1'\n         ZAP   MXLN4,WORKD+L'WORKD-L'MXLN4(L'MXLN4)\n         SP    WORKD,=PL1'+1'\n         ZAP   MXLN5,WORKD+L'WORKD-L'MXLN5(L'MXLN5)\n         L     R2,VLMD\n         LA    R1,1(R2)\n         ST    R1,AMDN\n         MH    R2,EMDL\n         ST    R2,SZMD\n         L     R3,VLSD\n         LA    R1,1(R3)\n         ST    R1,ASDN\n         MH    R3,ESDL\n         ST    R3,SZSD\n         AR    R2,R3\n         L     R3,VLMM\n         MH    R3,EMML\n         ST    R3,SZMM\n         AR    R2,R3\n         L     R3,VLSM\n         MH    R3,ESML\n         ST    R3,SZSM\n         AR    R2,R3\n         L     R3,VLRN\n         MH    R3,ERNL\n         ST    R3,SZRN\n         AR    R2,R3\n         L     R3,VLIM\n         MH    R3,EIML\n         ST    R3,SZIM\n         AR    R2,R3\n         L     R3,VLUM\n         MH    R3,EUML\n         ST    R3,SZUM\n         AR    R2,R3\n         L     R3,VLCM\n         MH    R3,ECML\n         ST    R3,SZCM\n         AR    R2,R3\n         L     R3,VLOC\n         MH    R3,EOCL\n         ST    R3,SZOC\n         AR    R2,R3\n         LA    R0,7(R2)\n         SRL   R0,3\n         SLL   R0,3\n         ST    R0,WSIZE\n        GETMAIN RC,LV=(0)\n         LTR   R15,R15\n         BNZ   ERRGTMN\n         ST    R1,WADDR\n         ST    R1,AMDS\n         AL    R1,SZMD\n         ST    R1,ASDS\n         AL    R1,SZSD\n         ST    R1,AMMS\n         AL    R1,SZMM\n         ST    R1,ASMS\n         AL    R1,SZSM\n         ST    R1,ARNS\n         AL    R1,SZRN\n         ST    R1,AIMS\n         AL    R1,SZIM\n         ST    R1,AUMS\n         AL    R1,SZUM\n         ST    R1,ACMS\n         AL    R1,SZCM\n         ST    R1,AOCS\n         AL    R1,SZOC\n         ST    R1,ELDA\n         L     R2,WADDR\n         L     R3,WSIZE\n         XR    R5,R5\n         BASR  R4,0\n         MVCL  R2,R4\n         B     INITX\nERRPARM  LA    R15,29(R1)\n         CLR   R15,R2\n         BL    *+L'*+4\n         LR    R15,R2\n         BCTR  R15,0\n         SR    R15,R1\n         EX    R15,PARMMV\nPARMERR WTO    'PARM= ERROR AT :                                ',     X\n               ROUTCDE=11,DESC=7\n         B     QUIT\nPARMMV   MVC   PARMERR+25(*-*),0(R1)\nERRGTMN  XR    R0,R0\n         L     R1,WSIZE\n         LA    R14,2*L'WSIZE\n         LA    R15,GTMERR+42\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    GTMERR+42(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    GTMERR+42(8),TRHEX\n         OI    SW2,SWFTR\n         B     INITX\nERRMXLN WTO    'PARM= ERROR ON : LN=.. (VALID RANGE IS 10 TO 99)',     X\n               ROUTCDE=11,DESC=7\n         B     QUIT\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                         S C A N - C H E C K                         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- SCAN ALL DD'S\n         SPACE 1\nSCAN0   EXTRACT    ATIOT,'S',FIELDS=(TIOT)\n         L     R2,ATIOT\n         USING TIODSECT,R2\n         TM    SW2,SWFTR\n         BO    SCAN1\n         L     R3,AMDS\n         USING MDENT,R3\n         L     R4,AMDN\n         L     R5,ASDS\n         USING SDENT,R5\n         L     R6,ASDN\n         XR    R9,R9\nSCAN1    CLC   TIOELNGH(4),=XL4'0'\n         BE    SCAN90\n         TM    SW2,SWFTR\n         BO    SCAN6\n         CLC   TIOEDDNM(L'TTLDD),TTLDD\n         BNE   SCAN2\n         TM    SW1,SWTIT\n         BO    *+L'*+8\n         OI    SW1,SWTIT\n         B     SCAN7\n         MVC   MESC3+5(L'TTLDD),TTLDD\n         LA    R1,MESC3\n         BAS   R9,PERR\n         B     SCAN7\nSCAN2    CLC   TIOEDDNM(L'MCLDD),MCLDD\n         BNE   SCAN3\n         TM    SW1,SWMAC\n         BO    *+L'*+8\n         OI    SW1,SWMAC\n         B     SCAN7\n         MVC   MESC3+5(L'MCLDD),MCLDD\n         LA    R1,MESC3\n         BAS   R9,PERR\n         B     SCAN7\nSCAN3    CLC   TIOEDDNM(L'SRLDD),SRLDD\n         BNE   SCAN4\n         TM    SW1,SWSRC\n         BO    *+L'*+8\n         OI    SW1,SWSRC\n         B     SCAN7\n         MVC   MESC3+5(L'SRLDD),SRLDD\n         LA    R1,MESC3\n         BAS   R9,PERR\n         B     SCAN7\nSCAN4    CLC   TIOEDDNM(3),MCLDD\n         BNE   SCAN5\n         MVC   MDNME,TIOEDDNM\n         BCT   R4,*+L'*+12\n         LA    R1,MESC1\n         BAS   R9,PERR\n         B     LEAVE\n         AH    R3,EMDL\n         OI    SW1,SWMDD\n         B     SCAN7\nSCAN5    CLC   TIOEDDNM(3),SRLDD\n         BNE   SCAN6\n         MVC   SDNME,TIOEDDNM\n         BCT   R6,*+L'*+12\n         LA    R1,MESC2\n         BAS   R9,PERR\n         B     LEAVE\n         AH    R5,ESDL\n         OI    SW1,SWSDD\n         B     SCAN7\nSCAN6    CLC   TIOEDDNM(8),=CL8'SYSPRINT'\n         BNE   SCAN7\n         OI    SW1,SWPRT\nSCAN7    XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     SCAN1\n         DROP  R2,R3,R5\nSCAN90   TM    SW2,SWFTR\n         BZ    SCAN99\n         TM    SW1,SWPRT\n         BO    SCANX\n        WTO    MF=(E,GTMERR)\n         B     ERRPRT\nSCAN99   TM    SW1,SWPRT+SWTIT+SWMAC+SWSRC+SWMDD+SWSDD\n         BNO   ERRPRT\n         L     R1,AMDN\n         SR    R1,R4\n         ST    R1,AMDN\n         L     R1,ASDN\n         SR    R1,R6\n         ST    R1,ASDN\n         L     R3,AMDS\n         USING MDENT,R3\n         L     R4,AMDN\n         LR    R5,R3\nCKDD1    LR    R6,R4\nCKDD2    BCT   R6,*+L'*+4\n         B     CKDD3\n         AH    R5,EMDL\n         CLC   MDNME,MDNME-MDENT(R5)\n         BNE   CKDD2\n         MVC   MESC3+5(L'MDNME),MDNME\n         LA    R1,MESC3\n         BAS   R9,PERR\n         B     CKDD2\nCKDD3    BCT   R4,*+L'*+4\n         B     *+L'*+8\n         AH    R3,EMDL\n         B     CKDD1\n         DROP  R3\n         L     R3,ASDS\n         USING SDENT,R3\n         L     R4,ASDN\n         LR    R5,R3\nCKDD4    LR    R6,R4\nCKDD5    BCT   R6,*+L'*+4\n         B     CKDD6\n         AH    R5,ESDL\n         CLC   SDNME,SDNME-SDENT(R5)\n         BNE   CKDD5\n         MVC   MESC3+5(L'SDNME),SDNME\n         LA    R1,MESC3\n         BAS   R9,PERR\n         B     CKDD5\nCKDD6    BCT   R4,*+L'*+4\n         B     *+L'*+8\n         AH    R3,ESDL\n         B     CKDD4\n         DROP  R3\n         LTR   R9,R9\n         BNZ   LEAVE\n         B     SCANX\nERRPRT   TM    SW1,SWPRT\n         BO    ERRTIT\n         MVC   MESC4+5(8),=CL8'SYSPRINT'\n        WTO    MF=(E,MESC4)\n         OI    SW2,SWERR\n         TM    SW2,SWFTR\n         BO    LEAVE\nERRTIT   TM    SW1,SWTIT\n         BO    ERRMAC\n         MVC   MESC4+5(L'TTLDD),TTLDD\n         LA    R1,MESC4\n         BAS   R9,PERR\nERRMAC   TM    SW1,SWMAC\n         BO    ERRSRC\n         MVC   MESC4+5(L'MCLDD),MCLDD\n         LA    R1,MESC4\n         BAS   R9,PERR\nERRSRC   TM    SW1,SWSRC\n         BO    ERRMDD\n         MVC   MESC4+5(L'SRLDD),SRLDD\n         LA    R1,MESC4\n         BAS   R9,PERR\nERRMDD   TM    SW1,SWMDD\n         BO    ERRSDD\n         MVC   MESC5+5(3),MCLDD\n         LA    R1,MESC5\n         BAS   R9,PERR\nERRSDD   TM    SW1,SWSDD\n         BO    LEAVE\n         MVC   MESC5+5(3),SRLDD\n         LA    R1,MESC5\n         BAS   R9,PERR\n         B     LEAVE\n         SPACE 1\nMESC1   WTO    'TOO MANY \"MAC.....\" DD''S (\"MD\" VALUE OVERFLOW)',      X\n               ROUTCDE=11,DESC=7,MF=L\nMESC2   WTO    'TOO MANY \"SRC.....\" DD''S (\"SD\" VALUE OVERFLOW)',      X\n               ROUTCDE=11,DESC=7,MF=L\nMESC3   WTO    '\"        \" / JCL ERROR (DD ENCOUNTERED TWICE)',        X\n               ROUTCDE=11,DESC=7,MF=L\nMESC4   WTO    '\"        \" DD-CARD MISSING',                           X\n               ROUTCDE=11,DESC=7,MF=L\nMESC5   WTO    '\"   .....\" DD-CARD(S) MISSING',                        X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                     I N I T I A L     T R A C E                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- TRACE WORK-AREAS VALUES IF REQUESTED\n         SPACE 1\nTRCE0    TM    SW2,SWFTR\n         BZ    TRCE1\n         LA    R1,GTMERR\n         BAS   R9,PERR\n         TM    SW1,SWPRT\n         BZ    LEAVE\n         MVI   TRCM0,C'0'\nTRCE1    TM    SW2,SWTAV\n         BZ    TRCE5\n        $PRINT TRCM0\n         LTR   R15,R15\n         BNZ   TRCERR\n        $PRINT TRCM0U\n         LTR   R15,R15\n         BZ    TRCE4\nTRCERR   STC   R15,PERRWT+46\n         OI    PERRWT+46,C'0'\n        WTO    MF=(E,PERRWT)\n         OI    SW2,SWERR\n         B     LEAVE\nTRCE2    LR    R1,R2\n         XR    R0,R0\n         LA    R14,L'TRCM4A\n         LA    R15,TRCM4A\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    TRCM4A,=XL8'0F0F0F0F0F0F0F0F'\n         TR    TRCM4A,TRHEX\n         SR    R3,R2\n         LR    R1,R3\n         XR    R0,R0\n         LA    R14,L'TRCM4B\n         LA    R15,TRCM4B\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    TRCM4B,=XL8'0F0F0F0F0F0F0F0F'\n         TR    TRCM4B,TRHEX\n         MVI   TRCM4C+16,C' '\n         MVC   TRCM4C+17(L'TRCM4C-17),TRCM4C+16\n         CVD   R3,WORKD\n         MVC   TRCM4C(16),=XL16'40202020202020202020202020202120'\n         ED    TRCM4C(16),WORKD\n         LA    R0,15\n         CLI   TRCM4C,C' '\n         BNE   *+L'*+14\n         MVC   TRCM4C(15),TRCM4C+1\n         MVI   TRCM4C+15,C' '\n         BCT   R0,*-18\n         LA    R1,TRCM4C\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         LA    R1,1(R1)\n         B     *-12\n         MVC   1(6,R1),=CL6'BYTES)'\n        $PRINT TRCM4\n         LTR   R15,R15\n         BZR   R9\n         B     TRCERR\nTRCE3    LR    R1,R2\n         XR    R0,R0\n         LA    R14,L'TRCM3A\n         LA    R15,TRCM3A\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    TRCM3A,=XL8'0F0F0F0F0F0F0F0F'\n         TR    TRCM3A,TRHEX\n         CVD   R2,WORKD\n         MVC   TRCM3B(16),=XL16'40202020202020202020202020202120'\n         ED    TRCM3B(16),WORKD\n         LA    R0,15\n         CLI   TRCM3B,C' '\n         BNE   *+L'*+14\n         MVC   TRCM3B(15),TRCM3B+1\n         MVI   TRCM3B+15,C' '\n         BCT   R0,*-18\n         LA    R1,TRCM3B\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         LA    R1,1(R1)\n         B     *-12\n         MVC   1(6,R1),=CL6'BYTES)'\n        $PRINT TRCM3\n         LTR   R15,R15\n         BZR   R9\n         B     TRCERR\nTRCE4    L     R0,VLLN\n         CVD   R0,WORKD\n         MVC   TRCM1V,=XL6'402020202120'\n         ED    TRCM1V,WORKD+L'WORKD-3\n        $PRINT TRCM1\n         LTR   R15,R15\n         BNZ   TRCERR\n         L     R0,VLMD\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'MD'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(13),=CL13'MACLIB''S DD''S'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EMDL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AMDS,AMDS\n         MVC   AMDE,SZMD\n         L     R2,AMDS\n         L     R3,AMDE\n         BAS   R9,TRCE2\n         L     R0,VLSD\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'SD'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(13),=CL13'SOURCE''S DD''S'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,ESDL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    ASDS,ASDS\n         MVC   ASDE,SZSD\n         L     R2,ASDS\n         L     R3,ASDE\n         BAS   R9,TRCE2\n         L     R0,VLMM\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'MM'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(22),=CL22'MACLIB''S MEMBERS NAMES'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EMML\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AMMS,AMMS\n         MVC   AMME,SZMM\n         L     R2,AMMS\n         L     R3,AMME\n         BAS   R9,TRCE2\n         L     R0,VLSM\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'SM'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(22),=CL22'SOURCE''S MEMBERS NAMES'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,ESML\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    ASMS,ASMS\n         MVC   ASME,SZSM\n         L     R2,ASMS\n         L     R3,ASME\n         BAS   R9,TRCE2\n         L     R0,VLRN\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'RN'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(18),=CL18'REFERENCE ELEMENTS'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,ERNL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    ARNS,ARNS\n         MVC   ARNE,SZRN\n         L     R2,ARNS\n         L     R3,ARNE\n         BAS   R9,TRCE2\n         L     R0,VLIM\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'IM'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(22),=CL22'SOURCE INTERNAL MACROS'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EIML\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AIMS,AIMS\n         MVC   AIME,SZIM\n         L     R2,AIMS\n         L     R3,AIME\n         BAS   R9,TRCE2\n         L     R0,VLUM\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'UM'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(24),=CL24'SOURCE UNRESOLVED MACROS'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EUML\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AUMS,AUMS\n         MVC   AUME,SZUM\n         L     R2,AUMS\n         L     R3,AUME\n         BAS   R9,TRCE2\n         L     R0,VLCM\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'CM'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(18),=CL18'COPY MODULES NAMES'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,ECML\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    ACMS,ACMS\n         MVC   ACME,SZCM\n         L     R2,ACMS\n         L     R3,ACME\n         BAS   R9,TRCE2\n         L     R0,VLOC\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'OC'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(15),=CL15'OPERATION CODES'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EOCL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AOCS,AOCS\n         MVC   AOCE,SZOC\n         L     R2,AOCS\n         L     R3,AOCE\n         BAS   R9,TRCE2\n         L     R2,WADDR\n         L     R3,WSIZE\n         AR    R3,R2\n         MVI   TRCM4,C'0'\n         MVC   TRCM4+6(12),=CL12'===> TOTAL -'\n         BAS   R9,TRCE2\nTRCE5    TM    SW2,SWFTR\n         BO    LEAVE\n         B     TRCEX\n         SPACE 1\n         DC    AL1(TRCM0L)\nTRCM0    DC    C'1 CURRENT VALUE OF PARAMETERS AND '\n         DC    C'WORK-AREAS SPACE :'\nTRCM0L   EQU   *-TRCM0\n         DC    AL1(TRCM0UL)\nTRCM0U   DC    C'+ ________________________________'\n         DC    C'__________________'\nTRCM0UL  EQU   *-TRCM0U\n         DC    AL1(TRCM1L)\nTRCM1    DC    CL10'0     LN :'\nTRCM1V   DC    CL6' ',C' - LINES PER PAGE'\nTRCM1L   EQU   *-TRCM1\n         DC    AL1(TRCM2L)\nTRCM2    DC    CL6'0 '\nTRCM2I   DC    CL2'  ',CL2' :'\nTRCM2V   DC    CL6' ',C' - MAXIMUM NUMBER OF '\nTRCM2N   DC    CL25' '\nTRCM2L   EQU   *-TRCM2\n         DC    AL1(TRCM3L)\nTRCM3    DC    CL19' ',C'ELEMENT LENGTH : '\nTRCM3A   DC    CL8' ',C' ('\nTRCM3B   DC    CL24' '\nTRCM3L   EQU   *-TRCM3\n         DC    AL1(TRCM4L)\nTRCM4    DC    CL19' ',C'AREA ADDRESS : '\nTRCM4A   DC    CL8' ',C' LENGTH : '\nTRCM4B   DC    CL8' ',C' ('\nTRCM4C   DC    CL24' '\nTRCM4L   EQU   *-TRCM4\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                   O P E R A T I O N     C O D E S                   *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- GET TODAY'S DATE AND BUILD OPERATION CODES TABLE\n         SPACE 1\nBOPC0   $GFDATE ,,WORKD            TODAY DATE\n         LTR   R15,R15\n         BZ    BOPC1\n         STC   R15,MEGFD+42\n         OI    MEGFD+42,C'0'\n         LA    R1,MEGFD\n         BAS   R9,PERR\n         B     LEAVE\nBOPC1    MVC   COVDATE(2),WORKD+2\n         MVI   COVDATE+2,C'/'\n         MVC   COVDATE+3(2),WORKD\n         MVI   COVDATE+5,C'/'\n         MVC   COVDATE+6(4),WORKD+4\n         MVC   IXT1D,COVDATE\n         MVC   MCT1D,COVDATE\n         MVC   SRT1D,COVDATE\n         MVC   MRT1D,COVDATE\nBOPC2    L     R1,OPCTDSN          GET OPERATION CODES\n         XR    R14,R14\n         IC    R14,0(R1)\n         LA    R15,1(R1)\n         LA    R1,1(R1,R14)\n         ST    R1,OPCTDSN\n         CLI   0(R1),OPCDSNE\n         BNE   *+L'*+8\n         LA    R8,LEAVE\n         B     *+L'*+4\n         LA    R8,BOPC2\n         BAS   R9,XDYNALL\n         B     BOPC4               OK\n         B     BOPC3               NOT DSORG=PO\n         LA    R1,DYNERR           ERROR\n         BAS   R9,PERR\n         LA    R1,DYNDSN\n         BAS   R9,PERR\n         BR    R8\nBOPC3    LA    R1,DYNNPO\n         BAS   R9,PERR\n         BR    R8\nBOPC4    MVC   DDNME,ALLDDN\n         MVC   PARMNME(L'PARMNME),ALLDSN+OPCNPTR\n        $MOPEN WORKD,DDNME\n         LTR   R15,R15\n         BZ    BOPC5\n         STC   R15,MEGO1+41\n         OI    MEGO1+41,C'0'\n         MVC   MEGO1+5(L'PARMNME),PARMNME\n         LA    R1,MEGO1\n         BAS   R9,PERR\n         BR    R8\nBOPC5    CLC   WORKD(4),=F'80'\n         BE    BOPC6\n         MVC   MEGO2+5(L'PARMNME),PARMNME\n         LA    R1,MEGO2\n         BAS   R9,PERR\n         B     BOPC11\nBOPC6    LA    R2,OPCNME\n        $MFIND (R2),DDNME\n         LTR   R15,R15\n         BZ    BOPC10\n         STC   R15,MEGO3+52\n         OI    MEGO3+52,C'0'\n         MVC   MEGO3+23(L'OPCNME),OPCNME\n         MVC   MEGO3+5(L'PARMNME),PARMNME\n         LA    R1,MEGO3\n         BAS   R9,PERR\n         B     BOPC11\nBOPC10   L     R10,=A(ROPC0)       GO READ OPERATION CODES\n         BR    R10\nBOPC11  $MCLOSE DDNME\n         LTR   R15,R15\n         BZ    BOPC21\n         STC   R15,MEGO4+43\n         OI    MEGO4+43,C'0'\n         MVC   MEGO4+5(L'PARMNME),PARMNME\n         LA    R1,MEGO4\n         BAS   R9,PERR\n         BR    R8\nBOPC21   TM    SW2,SWERR\n         BO    R8\n         B     BOPCX\n         SPACE 1\n*------- XDYNALL - EXECUTE DYNALLOC SUBROUTINE\n*              R0-R1-R14-R15 = WORK REGISTERS\n*              R9 = LINK REGISTER - RETURN +0 = OK\n*                                          +4 = NOT DSORG=PO\n*                                          +8 = ERROR\n         SPACE 1\nXDYNALL  LA    R0,L'ALLDDN\n         STCM  R0,B'0011',ALLDDNL\n         MVI   ALLDSN,C' '\n         MVC   ALLDSN+1(L'ALLDSN-1),ALLDSN\n         MVC   ALLDDN(L'ALLDDN),ALLDSN\n         STCM  R14,B'0011',ALLDSNL\n         BCT   R14,*+L'*+6\n         MVC   ALLDSN(*-*),0(R15)  EXECUTED\n         EX    R14,*-6\n         XC    ALLDSORG(L'ALLDSORG),ALLDSORG\n         LA    R1,ALLRB            RB POINTER\n         USING S99RB,R1\n         XC    S99ERROR(L'S99ERROR+L'S99INFO),S99ERROR\n         DROP  R1\n         LA    R1,ALLRBPTR         ALLOCATION PARM. LIST\n        DYNALLOC ,                 EXECUTE SVC99\n         LTR   R15,R15             HOW COMPLETE ?\n         BNZ   XDYN1               ALLOCATION ERROR\n         CLC   ALLDSORG(L'ALLDSORG),=AL1(DCBDSGPO,0)\n         BER   R9                  OK\n         MVI   DYNNPO+L'ALLDSN+14,C' '\n         MVC   DYNNPO+L'ALLDSN+15(13),DYNNPO+L'ALLDSN+14\n         MVC   DYNNPO+14(L'ALLDSN),ALLDSN\n         XR    R1,R1\n         ICM   R1,B'0011',ALLDSNL\n         LA    R1,DYNNPO+14(R1)\n         MVC   0(14,R1),=CL14'\" NOT DSORG=PO'\n         B     4(R9)\nXDYN1    LA    R0,4\n         LA    R1,DYNERR+24\n         SLL   R15,16\n         XR    R14,R14\n         SLDL  R14,4\n         STC   R14,0(R1)\n         LA    R1,1(R1)\n         BCT   R0,*-12\n         NC    DYNERR+49(4),=XL4'0F0F0F0F'\n         TR    DYNERR+49(4),TRHEX\n         LA    R1,ALLRB            RB POINTER\n         USING S99RB,R1\n         UNPK  DYNERR+26(5),S99ERROR(3) SET ERROR CODE\n         NC    DYNERR+26(4),=XL4'0F0F0F0F'\n         TR    DYNERR+26(4),TRHEX\n         MVI   DYNERR+30,C' '\n         UNPK  DYNERR+38(5),S99INFO(3) SET INFO CODE\n         NC    DYNERR+38(4),=XL4'0F0F0F0F'\n         TR    DYNERR+38(4),TRHEX\n         MVI   DYNERR+42,C' '\n         DROP  R1\n         MVC   DYNDSN+20(L'ALLDSN),ALLDSN\n         B     8(R9)\n         SPACE 1\nOPCTDSN  DC    A(OPCDSN)\n         SPACE 1\nALLRBPTR DC    A(X'80000000'+ALLRB)     SVC 99 REQUEST BLOCK POINTER\nALLRB    DS    0F                  SVC 99 REQUEST BLOCK\n         DC    AL1(ALLRBLN)             RB LENGTH IN BYTES\n         DC    AL1(S99VRBAL)            VERB CODE (DSNAME ALLOC.)\n         DC    AL1(S99NOCNV+S99NOMNT,0) FLAGS 1\n         DC    XL2'0'                   ERROR CODE\n         DC    XL2'0'                   INFO CODE\n         DC    A(ALLTUP)                POINTER TO TEXT UNIT POINTERS\n         DC    XL4'0'                   RESERVED\n         DC    XL4'0'                   FLAGS 2\nALLRBLN  EQU   *-ALLRB             RB LENGTH\nALLTUP   DS    0F                  TEXT UNIT POINTERS\n         DC    A(ALLTUKY1)\n         DC    A(ALLTUKY2)\n         DC    A(ALLTUKY3)\n         DC    A(ALLTUKY4)\n         DC    A(X'80000000'+ALLTUKY5)\nALLTUKY1 DC    AL2(DALDSNAM),AL2(1)     DSNAME\nALLDSNL  DC    AL2(*-*)                 LENGTH OF DSNAME\nALLDSN   DC    CL44' '                  DSNAME\nALLTUKY2 DC    AL2(DALSTATS),AL2(1,1),XL1'08' SHR STATUS\nALLTUKY3 DC    AL2(DALCLOSE),AL2(0)     UNALLOC AT CLOSE\nALLTUKY4 DC    AL2(DALRTDDN),AL2(1)     DDNAME RETURN\nALLDDNL  DC    AL2(L'ALLDDN)            LENGTH OF DDNAME\nALLDDN   DC    CL8' '                   DDNAME\nALLTUKY5 DC    AL2(DALRTORG),AL2(1,2)   DSORG RETURN\nALLDSORG DC    XL2'0'                   DSORG\n         SPACE 1\nMEGFD   WTO    'TODAY DATE OBTAIN ERROR ($GFDATE RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\nDYNNPO  WTO    'DATA-SET \"                                             X\n                            ',ROUTCDE=11,DESC=7,MF=L\nDYNERR  WTO    'DYNALLOC ERROR : DARC=     / INFO=     / R15=     ',   X\n               ROUTCDE=11,DESC=7,MF=L\nDYNDSN  WTO    'DATA-SET NAME :                                        X\n                     ',ROUTCDE=11,DESC=7,MF=L\nMEGO1   WTO    '\"        \" / OPEN ERROR ($MOPEN RC =  )',              X\n               ROUTCDE=11,DESC=7,MF=L\nMEGO2   WTO    '\"        \" / DATA-SET IS NOT LRECL=80',                X\n               ROUTCDE=11,DESC=7,MF=L\nMEGO3   WTO    '\"        \" / FIND \"        \" ERROR ($MFIND RC =  )',   X\n               ROUTCDE=11,DESC=7,MF=L\nMEGO4   WTO    '\"        \" / CLOSE ERROR ($MCLOSE RC =  )',            X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         SPACE 1\n*------- DATA-SET(S) - MEMBER DEFINITIONS\n         SPACE 1\nOPCDSN   DS    0XL1                DATA-SET(S) NAME(S)\n         DC    AL1(L'OPCDSN1)\nOPCNPTR  EQU   5,8                 -> SHORT NAME FOR DIAGNOSE\nOPCDSN1  DC    C'SYS1.PARMLIB'\n         DC    AL1(L'OPCDSN2)\nOPCDSN2  DC    C'SYS1.APARMLIB'\nOPCDSNE  EQU   X'FF'               END OF NAME(S)\n         DC    AL1(OPCDSNE)        END OF NAME(S)\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                B U I L D     C O D E S     T A B L E                *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- OPERATION CODES TABLE\n         SPACE 1\nROPC0    L     R5,AOCS\n         LH    R6,EOCL\n         L     R7,AOCE\n         SR    R5,R6               ADJUST FOR BXLE\n         SR    R7,R6\n         USING OCENT,R5\nROPC1   $MREAD WCRD,DDNME\n         LTR   R15,R15\n         BM    ROPC10\n         BZ    ROPC2\n         STC   R15,MERO1+52\n         OI    MERO1+52,C'0'\n         MVC   MERO1+23(L'OPCNME),OPCNME\n         MVC   MERO1+5(L'PARMNME),PARMNME\n         LA    R1,MERO1\n         BAS   R9,PERR\n         B     ROPCX\nROPC2    LA    R1,WCRD             ANALYZE OP-CODE CARD\n         LA    R2,1\n         LA    R3,71(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+8\n         BXLE  R1,R2,*-8\n         B     ROPC1               NONE, SKIP\n         CLC   0(4,R1),=CL4'KEY='\n         BNE   ROPC1               WHAT'S THAT, SKIP\n         LA    R1,3(R1)\n         BXLE  R1,R2,*+L'*+4\n         B     ROPC1               NONE, SKIP\n         CLI   0(R1),C' '\n         BE    ROPC1               NONE, SKIP\n         LA    R0,L'WORKD\n         LA    R4,WORKD\n         MVC   WORKD,=CL8' '\nROPC3    CLI   0(R1),C' '\n         BE    ROPC4\n         MVC   0(1,R4),0(R1)\n         BXLE  R1,R2,*+L'*+4\n         B     ROPC4\n         LA    R4,1(R4)\n         BCT   R0,ROPC3\n         CLI   0(R1),C' '\n         BNE   ROPC1               TOO LONG, SKIP\nROPC4    BXLE  R5,R6,*+L'*+12\nROPC5    LA    R1,MERO2\n         BAS   R9,PERR\n         B     ROPCX\n         MVC   OCNME,WORKD\n         LA    R0,WORKD+1          +1 FOR MACHINE LENGTH\n         SLR   R4,R0\n         STC   R4,OCNLG\n         B     ROPC1               NEXT ONE\nROPC10   CL    R5,AOCS\n         BNL   ROPC11\n         MVC   MERO3+40(L'OPCNME),OPCNME\n         MVC   MERO3+5(L'PARMNME),PARMNME\n         LA    R1,MERO3\n         BAS   R9,PERR\n         B     ROPCX\nROPC11   LA    R0,NXTSS\n         L     R1,=A(EXTASS)\n         LTR   R0,R0\n         BNP   ROPC20\nROPC12   L     R4,AOCS\nROPC13   CLC   0(OCLGTH,R1),0(R4)\n         BE    ROPC14\n         CLR   R4,R5\n         BNL   *+L'*+6\n         ALR   R4,R6\n         B     ROPC13\n         BXLE  R5,R6,*+L'*+4\n         B     ROPC5\n         MVC   OCNLG(OCLGTH),0(R1)\nROPC14   ALR   R1,R6\n         BCT   R0,ROPC12\n         DROP  R5\nROPC20   ST    R5,OCMPTR\n         CL    R5,AOCS\n         BE    ROPC21\n         ALR   R5,R6\n         L     R7,AOCS\n         SLR   R5,R7\n         XR    R4,R4\n         DR    R4,R6\n        $SORT  (R7),(R5),OCLGTH,0,OCLGTH\nROPC21   L     R5,AOCS\n         LH    R6,EOCL\n         L     R7,OCMPTR\n         LA    R4,OCTIX\n         USING OCENT,R5\nROPC22   MVC   0(L'OCNLG,R4),OCNLG\n         STCM  R5,B'1111',1(R4)\n         BXLE  R5,R6,*+L'*+4\n         B     ROPC23\n         CLC   0(L'OCNLG,R4),OCNLG\n         BE    *-14\n         LA    R4,L'OCTIX(R4)\n         B     ROPC22\n         DROP  R5\nROPC23   LA    R4,L'OCTIX(R4)\n         MVI   0(R4),X'FF'\n         SPACE 1\nROPCX    MVI   WCRD,C' '\n         MVC   WCRD+1(L'WCRD-1),WCRD\n         LA    R8,LEAVE\n         L     R14,=A(BOPC0)\n         USING BOPC0,R14\n         LA    R15,BOPC11\n         DROP  R14\n         LR    R10,R14\n         BR    R15\n         SPACE 1\nMERO1   WTO    '\"        \" / READ \"        \" ERROR ($MREAD RC =  )',   X\n               ROUTCDE=11,DESC=7,MF=L\nMERO2   WTO    'TOO MANY OPERATION CODES (\"OC\" VALUE OVERFLOW)',       X\n               ROUTCDE=11,DESC=7,MF=L\nMERO3   WTO    '\"        \" / NO OPERATION CODES IN \"        \" MEMBER)',X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         SPACE 1\n*------- EXTRAS ASSEMBLER DEFINITIONS\n         SPACE 1\nEXTASS   DS    0XL(OCLGTH)         SEE OCENT DSECT\n         DC    XL1'04',CL8'AMODE   '\n         DC    XL1'04',CL8'AREAD   '\n         DC    XL1'03',CL8'CCW0    '\n         DC    XL1'03',CL8'CCW1    '\n         DC    XL1'04',CL8'MHELP   '\n         DC    XL1'04',CL8'RMODE   '\nNXTSS    EQU   (*-EXTASS)/OCLGTH\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                G E T     M E M B E R S     N A M E S                *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- GET MACLIB'S MEMBERS NAMES\n         SPACE 1\nGMMN0    L     R4,AMMS\n         USING MMENT,R4\n         L     R5,AMDS\n         L     R6,AMDN\n         USING MDENT,R5\n         MVC   MERR2+13(6),=CL6'MACLIB'\n         MVI   MERR2+38,C'M'\nGMMN1    LA    R3,MDNME\n         LA    R2,MDDSN\n        $PDOPEN (R2),(R3)\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         ST    R4,MDMMS\n         B     GMMN3\n         STC   R15,MERR3+42\n         OI    MERR3+42,C'0'\n         MVC   MERR3+5(L'MDNME),MDNME\n         LA    R1,MERR3\n         BAS   R9,PERR\n         B     LEAVE\nGMMN2    STC   R15,MERR4+42\n         OI    MERR4+42,C'0'\n         MVC   MERR4+4(L'MDNME),MDNME\n         LA    R1,MERR4\n         BAS   R9,PERR\n         B     GMMN4\nGMMN3   $PDREAD WLNE,(R3)\n         LTR   R15,R15\n         BP    GMMN2\n         BM    GMMN4\n         CL    R4,AMME\n         BL    *+L'*+12\n         LA    R1,MERR2\n         BAS   R9,PERR\n         B     GMMN4\n         MVC   MMNME(L'MMNME),WLNE\n         ST    R4,MDMME\n         AH    R4,EMML\n         B     GMMN3\nGMMN4   $PDCLOSE (R3)\n         LTR   R15,R15\n         BZ    GMMN5\n         STC   R15,MERR5+44\n         OI    MERR5+44,C'0'\n         MVC   MERR5+5(L'MDNME),MDNME\n         LA    R1,MERR5\n         BAS   R9,PERR\n         B     LEAVE\nGMMN5    TM    SW2,SWERR\n         BO    LEAVE\n         BCT   R6,*+L'*+4\n         B     GSMN0\n         AH    R5,EMDL\n         CL    R4,AMME\n         BL    *+L'*+12\n         LA    R1,MERR2\n         BAS   R9,PERR\n         B     LEAVE\n         AH    R4,EMML\n         B     GMMN1\n         DROP  R4,R5\n         SPACE 1\n*------- GET SOURCE'S MEMBERS NAMES\n         SPACE 1\nGSMN0    L     R4,ASMS\n         USING SMENT,R4\n         L     R5,ASDS\n         L     R6,ASDN\n         USING SDENT,R5\n         MVC   MERR2+13(6),=CL6'SOURCE'\n         MVI   MERR2+38,C'S'\nGSMN1    LA    R3,SDNME\n         LA    R2,SDDSN\n        $PDOPEN (R2),(R3)\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         ST    R4,SDSMS\n         B     GSMN3\n         STC   R15,MERR3+42\n         OI    MERR3+42,C'0'\n         MVC   MERR3+5(L'SDNME),SDNME\n         LA    R1,MERR3\n         BAS   R9,PERR\n         B     LEAVE\nGSMN2    STC   R15,MERR4+42\n         OI    MERR4+42,C'0'\n         MVC   MERR4+5(L'SDNME),SDNME\n         LA    R1,MERR4\n         BAS   R9,PERR\n         B     GSMN4\nGSMN3   $PDREAD WLNE,(R3)\n         LTR   R15,R15\n         BP    GSMN2\n         BM    GSMN4\n         CL    R4,ASME\n         BL    *+L'*+12\n         LA    R1,MERR2\n         BAS   R9,PERR\n         B     GSMN4\n         MVC   SMNME(L'SMNME),WLNE\n         ST    R4,SDSME\n         AH    R4,ESML\n         B     GSMN3\nGSMN4   $PDCLOSE (R3)\n         LTR   R15,R15\n         BZ    GSMN5\n         STC   R15,MERR5+44\n         OI    MERR5+44,C'0'\n         MVC   MERR5+5(L'SDNME),SDNME\n         LA    R1,MERR5\n         BAS   R9,PERR\n         B     LEAVE\nGSMN5    TM    SW2,SWERR\n         BO    LEAVE\n         BCT   R6,*+L'*+4\n         B     TTLP0\n         AH    R5,ESDL\n         CL    R4,ASME\n         BL    *+L'*+12\n         LA    R1,MERR2\n         BAS   R9,PERR\n         B     LEAVE\n         AH    R4,ESML\n         B     GSMN1\n         DROP  R4,R5\n         SPACE 1\n*------- PRINT COVER (TITLE'S) PAGES\n         SPACE 1\nTTLP0    L     R3,VLLN\n         LA    R1,2\n         SR    R3,R1\n         XR    R2,R2\n         LA    R1,3\n         DR    R2,R1\n         AR    R2,R3\n         BCTR  R3,0\n         LA    R4,2                PRINT TWICE THE COVER PAGE\nTTLP1   $PRINT COV1,,TTLDD\n         LTR   R15,R15\n         BZ    *+L'*+10\nTTLPERR  MVC   MERR1+5(L'TTLDD),TTLDD\n         B     LSTERR\n        $PRINT COV2,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         LR    R5,R3\nTTLP2   $PRINT WCRD,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         BCT   R5,TTLP2\n        $PRINT COV3,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         LR    R5,R2\nTTLP3   $PRINT WCRD,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         BCT   R5,TTLP3\n        $PRINT COV4,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         BCT   R4,TTLP1\n         B     GMMNX\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                      S C A N     M O D U L E S                      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- SCAN SOURCE'S MEMBERS\n         SPACE 1\nSCSM0    L     R8,ASDS\n         L     R7,ASDN\n         USING SDENT,R8\n         L     R1,ARNS\n         SH    R1,ERNL\n         ST    R1,CRNPTR\nSCSM1    MVC   DDNME,SDNME\n        $MOPEN WORKD,DDNME\n         LTR   R15,R15\n         BZ    SCSM2\n         STC   R15,MESM1+41\n         OI    MESM1+41,C'0'\n         MVC   MESM1+5(L'DDNME),DDNME\n         LA    R1,MESM1\n         BAS   R9,PERR\n         B     LEAVE\nSCSM2    CLC   WORKD(4),=F'80'\n         BE    SCSM3\n         MVC   MESM2+5(L'DDNME),DDNME\n         LA    R1,MESM2\n         BAS   R9,PERR\n         B     SCSM50\nSCSM3    ZAP   SRLN,=PL2'+99'\n         MVC   SRT2N,SDDSN\n         MVC   SRT2V,SDVOL\n         ZAP   SDIXP,SRPG\n         AP    SDIXP,=PL1'+1'\n         L     R6,SDSMS\n         USING SMENT,R6\nSCSM4    MVC   PVOPRF,=CL8' '\n         L     R1,AIMS\n         USING IMENT,R1\nSCSM5    CLI   IMNME,0\n         BE    *+L'*+18\n         XC    IMNME(IMLGTH),IMNME\n         AH    R1,EIML\n         CL    R1,AIME\n         BL    SCSM5\n         DROP  R1\n         L     R1,AUMS\n         USING UMENT,R1\nSCSM6    CLI   UMNME,0\n         BE    *+L'*+18\n         XC    UMNME(UMLGTH),UMNME\n         AH    R1,EUML\n         CL    R1,AUME\n         BL    SCSM6\n         DROP  R1\n         L     R1,ACMS\n         USING CMENT,R1\nSCSM7    CLI   CMNME,0\n         BE    *+L'*+18\n         XC    CMNME(CMLGTH),CMNME\n         AH    R1,ECML\n         CL    R1,ACME\n         BL    SCSM7\n         DROP  R1\n         LA    R2,SMNME\n        $MFIND (R2),DDNME\n         LTR   R15,R15\n         BZ    SCSM10\n         STC   R15,MESM3+52\n         OI    MESM3+52,C'0'\n         MVC   MESM3+23(L'SMNME),SMNME\n         MVC   MESM3+5(L'DDNME),DDNME\n         LA    R1,MESM3\n         BAS   R9,PERR\n         B     SCSM50\nSCSM10   L     R10,=A(ASSC0)       GO SCAN SOURCE\n         BR    R10\nSCSM11   L     R5,AMDS             PRINT MODULE'S OCCURRENCES\n         L     R4,AMDN\n         USING MDENT,R5\n         MVC   SRT5N,SMNME\n         OI    SW3,SWMNP+SWCMP     FIRST COPY MODULES NAMES\n         NI    SW3,255-SWUMP-SWIMP-SWDSP\n         L     R3,ACMS\n         USING CMENT,R3\n         CLI   CMNME,0\n         BE    SCSM20\nSCSM12   LA    R1,4\n         LA    R2,SRT4M\nSCSM13   MVC   3(L'CMNME,R2),CMNME\n         L     R0,CMCNT\n         LTR   R0,R0\n         BNP   SCSM14\n         CVD   R0,WORKD\n         MVC   11(6,R2),=XL6'402020202120'\n         ED    11(6,R2),WORKD+L'WORKD-3\nSCSM14   AH    R3,ECML\n         CL    R3,ACME\n         BNL   SCSM15\n         CLI   CMNME,0\n         BE    SCSM15\n         BCT   R1,*+L'*+8\n         BAS   R9,SRPRT\n         B     SCSM12\n         LA    R2,L'SRT4M(R2)\n         B     SCSM13\n         DROP  R3\nSCSM15   CLI   SRT4M+3,C' '\n         BE    SCSM20\n         BAS   R9,SRPRT\nSCSM20   OI    SW3,SWIMP           THEN INTERNAL MACROS\n         NI    SW3,255-SWCMP\n         L     R3,AIMS\n         USING IMENT,R3\n         CLI   IMNME,0\n         BE    SCSM30\nSCSM21   LA    R1,4\n         LA    R2,SRT4M\nSCSM22   MVC   3(L'IMNME,R2),IMNME\n         L     R0,IMCNT\n         LTR   R0,R0\n         BNP   SCSM23\n         CVD   R0,WORKD\n         MVC   11(6,R2),=XL6'402020202120'\n         ED    11(6,R2),WORKD+L'WORKD-3\nSCSM23   AH    R3,EIML\n         CL    R3,AIME\n         BNL   SCSM24\n         CLI   IMNME,0\n         BE    SCSM24\n         BCT   R1,*+L'*+8\n         BAS   R9,SRPRT\n         B     SCSM21\n         LA    R2,L'SRT4M(R2)\n         B     SCSM22\n         DROP  R3\nSCSM24   CLI   SRT4M+3,C' '\n         BE    SCSM30\n         BAS   R9,SRPRT\nSCSM30   OI    SW3,SWUMP           THEN UNRESOLVED MACROS\n         NI    SW3,255-SWIMP\n         L     R3,AUMS\n         USING UMENT,R3\n         CLI   UMNME,0\n         BE    SCSM40\nSCSM31   LA    R1,4\n         LA    R2,SRT4M\nSCSM32   MVC   3(L'UMNME,R2),UMNME\n         L     R0,UMCNT\n         LTR   R0,R0\n         BNP   SCSM33\n         CVD   R0,WORKD\n         MVC   11(6,R2),=XL6'402020202120'\n         ED    11(6,R2),WORKD+L'WORKD-3\nSCSM33   AH    R3,EUML\n         CL    R3,AUME\n         BNL   SCSM34\n         CLI   UMNME,0\n         BE    SCSM34\n         BCT   R1,*+L'*+8\n         BAS   R9,SRPRT\n         B     SCSM31\n         LA    R2,L'SRT4M(R2)\n         B     SCSM32\n         DROP  R3\nSCSM34   CLI   SRT4M+3,C' '\n         BE    SCSM40\n         BAS   R9,SRPRT\nSCSM40   NI    SW3,255-SWUMP       AND THEN  EXTERNAL MACROS\nSCSM41   L     R3,MDMMS\n         USING MMENT,R3\n         MVI   SRT6N,C' '\n         MVC   SRT6N+1(L'SRT6N-1),SRT6N\n         MVC   SRT6N(L'MDDSN),MDDSN\n         LA    R1,SRT6N+L'MDDSN-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(10,R1),=CL10'\" MACROS :'\n         OI    SW3,SWDSP\nSCSM42   LA    R1,4\n         LA    R2,SRT4M\nSCSM43   L     R0,MMCNT\n         LTR   R0,R0\n         BNP   SCSM44\n         MVC   3(L'MMNME,R2),MMNME\n         CVD   R0,WORKD\n         MVC   11(6,R2),=XL6'402020202120'\n         ED    11(6,R2),WORKD+L'WORKD-3\n         A     R0,MMDST\n         ST    R0,MMDST\n         XC    MMCNT,MMCNT\nSCSM44   CL    R3,MDMME\n         BNL   SCSM45\n         AH    R3,EMML\n         CLI   3(R2),C' '\n         BE    SCSM43\n         BCT   R1,*+L'*+8\n         BAS   R9,SRPRT\n         B     SCSM42\n         LA    R2,L'SRT4M(R2)\n         B     SCSM43\nSCSM45   CLI   SRT4M+3,C' '\n         BE    *+L'*+4\n         BAS   R9,SRPRT\n         AH    R5,EMDL\n         BCT   R4,SCSM41\n         DROP  R3,R5\n         CL    R6,SDSME\n         BNL   SCSM50\n         AH    R6,ESML\n         B     SCSM4\n         DROP  R6\nSCSM50  $MCLOSE DDNME\n         LTR   R15,R15\n         BZ    SCSM51\n         STC   R15,MESM4+43\n         OI    MESM4+43,C'0'\n         MVC   MESM4+5(L'DDNME),DDNME\n         LA    R1,MESM4\n         BAS   R9,PERR\n         B     LEAVE\nSCSM51   TM    SW2,SWERR\n         BO    LEAVE\n         XR    R0,R0\n         L     R5,AMDS\n         L     R4,AMDN\n         USING MDENT,R5\nSCSM52   L     R3,MDMMS\n         USING MMENT,R3\nSCSM53   L     R2,MMTOT\n         A     R2,MMDST\n         ST    R0,MMDST\n         ST    R2,MMTOT\n         CL    R3,MDMME\n         BNL   *+L'*+8\n         AH    R3,EMML\n         B     SCSM53\n         AH    R5,EMDL\n         BCT   R4,SCSM52\n         DROP  R3,R5\n         CP    SDIXP,SRPG\n         BNH   *+L'*+6\n         XC    SDIXP,SDIXP\n         AH    R8,ESDL\n         BCT   R7,SCSM1\n         B     SCSMX\n         DROP  R8\n         SPACE 1\nSRPRT    TM    SW3,SWMNP+SWCMP     SOURCES DETAILS PRINT SUBROUTINE\n         BO    SRPRT1              R0-R1-R14-R15  = WORK REGISTERS\n         TM    SW3,SWMNP+SWIMP     R9 = LINK REGISTER\n         BO    SRPRT1\n         TM    SW3,SWMNP+SWUMP\n         BO    SRPRT1\n         TM    SW3,SWMNP+SWDSP\n         BO    SRPRT1\n         BM    *+L'*+10\n         CP    SRLN,MXLN2\n         B     SRPRT2\n         TM    SW3,SWMNP\n         BO    *+L'*+10\n         CP    SRLN,MXLN3\n         B     SRPRT2\n         CP    SRLN,MXLN4\n         B     SRPRT2\nSRPRT1   CP    SRLN,MXLN5\nSRPRT2   BL    SRPRT3\n         ZAP   SRLN,=PL1'+0'\n         AP    SRPG,=PL1'+1'\n         MVC   SRT1P,=XL6'402020202120'\n         ED    SRT1P,SRPG\n         MVI   SRT1P,C'/'\n        $PRINT SRT1,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n        $PRINT SRT1U,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n        $PRINT SRT2,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n        $PRINT SRT2U,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n        $PRINT SRT3,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n        $PRINT SRT3U,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\nSRPRT3   TM    SW3,SWMNP\n         BZ    SRPRT4\n         NI    SW3,255-SWMNP\n        $PRINT SRT5,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n         AP    SRLN,=PL1'+2'\nSRPRT4   TM    SW3,SWDSP\n         BZ    SRPRT5\n         NI    SW3,255-SWDSP\n        $PRINT SRT6,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n         AP    SRLN,=PL1'+1'\nSRPRT5   TM    SW3,SWCMP\n         BZ    SRPRT6\n         NI    SW3,255-SWCMP\n        $PRINT SRT7,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n         AP    SRLN,=PL1'+1'\n         B     SRPRT8\nSRPRT6   TM    SW3,SWIMP\n         BZ    SRPRT7\n         NI    SW3,255-SWIMP\n        $PRINT SRT8,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n         AP    SRLN,=PL1'+1'\n         B     SRPRT8\nSRPRT7   TM    SW3,SWUMP\n         BZ    SRPRT8\n         NI    SW3,255-SWUMP\n        $PRINT SRT9,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n         AP    SRLN,=PL1'+1'\nSRPRT8  $PRINT SRT4,,SRLDD\n         LTR   R15,R15\n         BNZ   SRPRTX\n         AP    SRLN,=PL1'+1'\n         MVC   SRT4M(4*L'SRT4M),SRT4M-1\n         BR    R9\nSRPRTX   MVC   MERR1+5(L'SRLDD),SRLDD\n         B     LSTERR\n         SPACE 1\nMESM1   WTO    '\"        \" / OPEN ERROR ($MOPEN RC =  )',              X\n               ROUTCDE=11,DESC=7,MF=L\nMESM2   WTO    '\"        \" / DATA-SET IS NOT LRECL=80',                X\n               ROUTCDE=11,DESC=7,MF=L\nMESM3   WTO    '\"        \" / FIND \"        \" ERROR ($MFIND RC =  )',   X\n               ROUTCDE=11,DESC=7,MF=L\nMESM4   WTO    '\"        \" / CLOSE ERROR ($MCLOSE RC =  )',            X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                       S C A N     S O U R C E                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- ASSEMBLER SOURCE SCAN\n         SPACE 1\n         USING SMENT,R6\nASSC0   $MREAD WCRD,DDNME\n         LTR   R15,R15\n         BM    ASSCX1\n         BZ    ASSC1\n         STC   R15,MEAS1+52\n         OI    MEAS1+52,C'0'\n         MVC   MEAS1+23(L'SMNME),SMNME\n         MVC   MEAS1+5(L'DDNME),DDNME\n         LA    R1,MEAS1\n         BAS   R9,PERR\n         B     ASSCX2\nASSC1    LA    R1,WCRD             ANALYZE SYMBOLIC SOURCE CARD\n         LA    R2,1\n         LA    R3,71(R1)\n         CLI   0(R1),C'*'\n         BE    ASSC0               COMMENT, SKIP\n         CLC   0(2,R1),=CL2'.*'\n         BE    ASSC0               MACRO COMMENT, SKIP\n         TM    SW4,SWCNT           CONTINUATION ?\n         BZ    *+L'*+16            NO\n         CLI   0(R3),C' '          END OF CONTINUATION ?\n         BNE   ASSC0               NO, RETAIN IT AND SKIP\n         NI    SW4,255-SWCNT       YES, SAY IT AND SKIP\n         B     ASSC0\n         CLC   PVOPRF,=CL8'REPRO   ' WAS PREVIOUS A REPRO ?\n         BE    ASSC0               YES, SKIP\n         CLC   0(2,R1),=CL2'//'\n         BE    ASSCX1              SCRAMBLE (JCL)\n         CLC   0(2,R1),=CL2'/*'\n         BE    ASSCX1              SCRAMBLE (JCL)\n         CLC   0(2,R1),=CL2'./'\n         BE    ASSCX1              SCRAMBLE (CONTROL)\n         CLI   0(R1),C' '\n         BL    ASSCX1              SCRAMBLE (BINARY)\n         CLI   0(R1),C'0'\n         BNL   ASSCX1              SCRAMBLE (DATA)\n         CLI   0(R1),C' '          GET THE OPERATION FIELD\n         BE    *+L'*+8\n         BXLE  R1,R2,*-8\n         B     ASSC0               NONE, SKIP\n         BXLE  R1,R2,*+L'*+4\n         B     ASSC0               NONE, SKIP\n         CLI   0(R1),C' '\n         BE    *-12\n         MVC   WORKD,=CL8' '\n         LA    R0,L'WORKD\n         LA    R15,WORKD\nASSC2    MVC   0(1,R15),0(R1)\n         LA    R15,1(R15)\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+16\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         BCT   R0,ASSC2\n         B     ASSC0               LONGER THAN 8 CHARACTERS, SKIP\n         CLI   WORKD,C'Z'\n         BH    ASSCX1              SCRAMBLE (DATA)\n         CLI   WORKD,C'A'\n         BNL   ASSC3\n         CLI   WORKD,C'$'\n         BE    ASSC3\n         CLI   WORKD,C'#'\n         BE    ASSC3\n         CLI   WORKD,C'@'\n         BE    ASSC3\n         CLI   WORKD,C'&&'\n         BNE   ASSCX1              SCRAMBLE (DATA)\nASSC3    LA    R15,L'WORKD\n         SR    R15,R0\n         STC   R15,CUROPL          LENGTH (MACHINE)\n         MVC   CPYMOD,=CL8' '\n         CLC   WORKD,=CL8'COPY    ' IS IT A COPY STATEMENT ?\n         BNE   ASSC5               NO\n         BXLE  R1,R2,*+L'*+4       YES, GET COPY MODULE NAME\n         B     ASSC5               NONE, SKIP\n         CLI   0(R1),C' '\n         BE    *-12\n         LA    R0,L'CPYMOD\n         LA    R15,CPYMOD\nASSC4    MVC   0(1,R15),0(R1)\n         LA    R15,1(R15)\n         BXLE  R1,R2,*+L'*+4\n         B     ASSC5\n         CLI   0(R1),C' '\n         BE    ASSC5\n         BCT   R0,ASSC4\n         B     ASSC60              LONGER THAN 8 CHARACTERS, SKIP\nASSC5    CLI   0(R3),C' '          CONTINUATION ON NEXT CARD ?\n         BE    *+L'*+4             NO\n         OI    SW4,SWCNT           YES, SAY IT\n         CLC   PVOPRF,=CL8'MACRO   ' WAS PREVIOUS A MACRO DEFINITION ?\n         BNE   ASSC20              NO\n         L     R1,AIMS             YES, KEEP/COUNT INTERNAL MACROS\n         USING IMENT,R1\nASSC10   CLI   IMNME,0\n         BE    ASSC11\n         CLC   IMNME,WORKD\n         BE    ASSC60              TWICE, WHAT'S THAT, SKIP\n         AH    R1,EIML\n         CL    R1,AIME\n         BL    ASSC10\n         LA    R1,MEAS3\n         BAS   R9,PERR\n         B     ASSCX2\nASSC11   MVC   IMNME,WORKD         RETAIN MACRO NAME\n         CL    R1,MIMPTR\n         BNH   *+L'*+4\n         ST    R1,MIMPTR\n         L     R14,AUMS            UPDATE WITH UNRESOLVED MACRO IF IN\n         USING UMENT,R14\nASSC12   CLI   UMNME,0\n         BE    ASSC60\n         CLC   UMNME,WORKD\n         BE    ASSC13\n         AH    R14,EUML\n         CL    R14,AUME\n         BL    ASSC12\n         B     ASSC60\nASSC13   MVC   IMCNT,UMCNT\n         CL    R14,MUMPTR          AND CANCEL MACRO NOW RESOLVED\n         BNH   ASSC14\n         LR    R0,R14\n         AH    R14,EUML\n         L     R1,MUMPTR\n         SLR   R1,R0\n         LR    R15,R1\n         MVCL  R0,R14\n         L     R14,MUMPTR\nASSC14   XC    UMNME(UMLGTH),UMNME\n         B     ASSC60\n         DROP  R14\nASSC20   L     R1,AIMS             LOOK FIRST TO INTERNAL MACROS\nASSC21   CLI   IMNME,0\n         BE    ASSC23\n         CLC   IMNME,WORKD\n         BNE   ASSC22\n         L     R0,IMCNT\n         AR    R0,R2\n         ST    R0,IMCNT\n         B     ASSC60\nASSC22   AH    R1,EIML\n         CL    R1,AIME\n         BL    ASSC21\n         DROP  R1\nASSC23   LA    R15,OCTIX           THEN SCAN IF OPERATION CODES\nASSC24   CLI   0(R15),X'FF'\n         BE    ASSC30\n         CLC   CUROPL,0(R15)\n         BE    *+L'*+8\n         LA    R15,L'OCTIX(R15)\n         B     ASSC24\n         ICM   R1,B'1111',1(R15)\n         USING OCENT,R1\nASSC25   CLC   OCNME,WORKD\n         BNE   ASSC26\n         CLC   WORKD,=CL8'COPY    ' IS IT A COPY STATEMENT ?\n         BE    ASSC50              YES\n         B     ASSC60              NO\nASSC26   AH    R1,EOCL\n         CLC   OCNLG,CUROPL\n         BE    ASSC25\n         DROP  R1\nASSC30   L     R5,AMDS             THEN LOOK TO EXTERNAL MACROS\n         L     R4,AMDN\n         USING MDENT,R5\nASSC31   L     R3,MDMMS\n         USING MMENT,R3\nASSC32   CLC   MMNME,WORKD\n         BL    ASSC36\n         BH    ASSC37\n         LA    R0,1\n         L     R1,MMCNT\n         AR    R1,R0\n         ST    R1,MMCNT\n         ICM   R1,B'1111',MMPTR\n         BNZ   ASSC33\n         L     R1,CRNPTR\n         AH    R1,ERNL\n         CL    R1,ARNE\n         BNL   ASSC35\n         ST    R1,CRNPTR\n         ST    R1,MMPTR\n         B     ASSC34\nASSC33   LR    R2,R1\n         USING RNENT,R2\n         CL    R6,RNSMA\n         BE    *+L'*+12\n         ICM   R1,B'1111',RNCHN\n         BNZ   *-14\n         B     *+L'*+14\n         L     R1,RNCNT\n         AR    R1,R0\n         ST    R1,RNCNT\n         B     ASSC60\n         L     R1,CRNPTR\n         AH    R1,ERNL\n         CL    R1,ARNE\n         BNL   ASSC35\n         ST    R1,CRNPTR\n         ST    R1,RNCHN\nASSC34   LR    R2,R1\n         ST    R6,RNSMA\n         ST    R0,RNCNT\n         B     ASSC60\n         DROP  R2\nASSC35   LA    R1,MEAS2\n         BAS   R9,PERR\n         B     ASSCX2\nASSC36   CL    R3,MDMME\n         BNL   ASSC37\n         AH    R3,EMML\n         B     ASSC32\nASSC37   AH    R5,EMDL\n         BCT   R4,ASSC31\n         DROP  R3,R5\n         L     R1,AUMS             HERE IT IS AN UNRESOLVED MACRO\n         USING UMENT,R1\nASSC40   CLI   UMNME,0\n         BE    ASSC42\n         CLC   UMNME,WORKD\n         BE    ASSC41\n         AH    R1,EUML\n         CL    R1,AUME\n         BL    ASSC40\n         LA    R1,MEAS5\n         BAS   R9,PERR\n         B     ASSCX2\nASSC41   LA    R0,1                UPDATE UNRESOLVED MACRO COUNT\n         A     R0,UMCNT\n         ST    R0,UMCNT\n         B     ASSC60\nASSC42   MVC   UMNME,WORKD         RETAIN UNRESOLVED MACRO NAME\n         LA    R0,1\n         ST    R0,UMCNT\n         CL    R1,MUMPTR\n         BNH   ASSC60\n         ST    R1,MUMPTR\n         DROP  R1\n         B     ASSC60\nASSC50   L     R1,ACMS             KEEP/COUNT COPY MODULES NAMES\n         USING CMENT,R1\nASSC51   CLI   CMNME,0\n         BE    ASSC53\n         CLC   CMNME,CPYMOD\n         BE    ASSC52\n         AH    R1,ECML\n         CL    R1,ACME\n         BL    ASSC51\n         LA    R1,MEAS4\n         BAS   R9,PERR\n         B     ASSCX2\nASSC52   LA    R0,1                UPDATE COPY MODULE NAME COUNT\n         A     R0,CMCNT\n         ST    R0,CMCNT\n         B     ASSC60\nASSC53   MVC   CMNME,CPYMOD        RETAIN COPY MODULE NAME\n         LA    R0,1\n         ST    R0,CMCNT\n         CL    R1,MCMPTR\n         BNH   ASSC60\n         ST    R1,MCMPTR\n         DROP  R1\nASSC60   MVC   PVOPRF,WORKD\n         B     ASSC0\n         DROP  R6\n         SPACE 1\nASSCX2   LA    R15,8\n         B     ASSCX0\nASSCX1   XR    R15,R15\nASSCX0   L     R14,=A(SCSM0)\n         B     *+L'*(R15)\n         USING SCSM0,R14\n         LA    R15,SCSM11\n         B     *+L'*+4\n         LA    R15,SCSM50\n         DROP  R14\n         LR    R10,R14\n         BR    R15\n         SPACE 1\nMEAS1   WTO    '\"        \" / READ \"        \" ERROR ($MREAD RC =  )',   X\n               ROUTCDE=11,DESC=7,MF=L\nMEAS2   WTO    'NOT ENOUGH REFERENCE ELEMENTS (\"RN\" VALUE OVERFLOW)',  X\n               ROUTCDE=11,DESC=7,MF=L\nMEAS3   WTO    'TOO MANY INTERNAL MACRO NAMES (\"IM\" VALUE OVERFLOW)',  X\n               ROUTCDE=11,DESC=7,MF=L\nMEAS4   WTO    'TOO MANY COPY MODULES NAMES (\"CM\" VALUE OVERFLOW)',    X\n               ROUTCDE=11,DESC=7,MF=L\nMEAS5   WTO    'TOO MANY UNRESOLVED MACROS (\"UM\" VALUE OVERFLOW)',     X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                      M A C R O S     P R I N T                      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- PRINT ALL MACLIB'S OCCURRENCES\n*        (AND START TO PRINT INDEX)\n         SPACE 1\nMAPR0    ZAP   IXLN,=PL2'+99'\n         MVC   IXT3L,=CL15'MACROS TOTALS'\n         L     R5,AMDS\n         L     R4,AMDN\n         USING MDENT,R5\nPRMO1    ZAP   MCLN,=PL2'+99'\n         MVC   MCT2N,MDDSN\n         MVC   MCT2V,MDVOL\n         ZAP   CTRL,MCPG\n         AP    CTRL,=PL1'+1'\n         L     R3,MDMMS\n         USING MMENT,R3\nPRMO2    LA    R1,4\n         LA    R2,MCT4M\nPRMO3    MVC   3(L'MMNME,R2),MMNME\n         L     R0,MMTOT\n         LTR   R0,R0\n         BNP   PRMO4\n         CVD   R0,WORKD\n         MVC   11(6,R2),=XL6'402020202120'\n         ED    11(6,R2),WORKD+L'WORKD-3\nPRMO4    CL    R3,MDMME\n         BNL   PRMO5\n         AH    R3,EMML\n         BCT   R1,*+L'*+8\n         BAS   R9,MCPRT\n         B     PRMO2\n         LA    R2,L'MCT4M(R2)\n         B     PRMO3\nPRMO5    BAS   R9,MCPRT\n         CP    CTRL,MCPG\n         BH    PRMO6\n         MVC   IXT3D,MDDSN\n         MVC   IXT3V,MDVOL\n         MVI   IXT3T,C'M'\n         MVC   IXT3P,=XL6'402020202120'\n         ED    IXT3P,CTRL\n         MVI   IXT3P,C'/'\n         BAS   R9,IXPRT\n         MVC   IXT3L+2(3),=CL3'\" \"'\nPRMO6    AH    R5,EMDL\n         BCT   R4,PRMO1\n         DROP  R3,R5\n         SPACE 1\n*------- PRINT ALL MACROS REFERENCES\n*        (AND CONTINUE TO PRINT INDEX)\n         SPACE 1\n         MVC   IXT3L,=CL15'MACROS DETAILS'\n         L     R7,AMDS\n         L     R6,AMDN\n         USING MDENT,R7\nPRMR1    ZAP   MCLN,=PL2'+99'\n         MVC   MRT2N,MDDSN\n         MVC   MRT2V,MDVOL\n         ZAP   CTRL,MCPG\n         AP    CTRL,=PL1'+1'\n         L     R5,MDMMS\n         USING MMENT,R5\nPRMR2    ICM   R4,B'1111',MMPTR\n         BZ    PRMR6\n         MVC   MRT4M,MMNME\n         USING RNENT,R4\nPRMR3    L     R0,RNCNT\n         CVD   R0,WORKD\n         MVC   MRT4C,=XL6'402020202120'\n         ED    MRT4C,WORKD+L'WORKD-3\n         L     R3,RNSMA\n         CL    R3,PRVSMA\n         BE    *+L'*+10\n         USING SMENT,R3\n         MVC   MRT4N,SMNME\n         ST    R3,PRVSMA\n         L     R1,ASDN\n         L     R2,ASDS\n         USING SDENT,R2\n         CL    R3,SDSME\n         BNH   PRMR4\n         AH    R2,ESDL\n         BCT   R1,*-12\n         MVC   MRT4D,=CL44'<<UNKNOWN>>'\n         XC    PRVDSN,PRVDSN\n         B     PRMR5\nPRMR4    CL    R2,PRVDSN\n         BE    PRMR5\n         MVC   MRT4D,SDDSN\n         ST    R2,PRVDSN\nPRMR5    CLI   MRT4M,C' '\n         BNE   *+L'*+6\n         MVC   MRT4M+2(3),=CL3'\" \"'\n         CLI   MRT4N,C' '\n         BNE   *+L'*+6\n         MVC   MRT4N+2(3),=CL3'\" \"'\n         CLI   MRT4D,C' '\n         BNE   *+L'*+6\n         MVC   MRT4D+2(3),=CL3'\" \"'\n         BAS   R9,MRPRT\n         ICM   R4,B'1111',RNCHN\n         BNZ   PRMR3\nPRMR6    CL    R5,MDMME\n         BNL   *+L'*+8\n         AH    R5,EMML\n         B     PRMR2\n         CP    CTRL,MCPG\n         BH    PRMR7\n         MVC   IXT3D,MDDSN\n         MVC   IXT3V,MDVOL\n         MVI   IXT3T,C'M'\n         MVC   IXT3P,=XL6'402020202120'\n         ED    IXT3P,CTRL\n         MVI   IXT3P,C'/'\n         BAS   R9,IXPRT\n         MVC   IXT3L+2(3),=CL3'\" \"'\nPRMR7    AH    R7,EMDL\n         BCT   R6,PRMR1\n         DROP  R2,R3,R4,R5,R7\n         SPACE 1\n*------- TERMINATE TO PRINT INDEX\n         SPACE 1\n         MVC   IXT3L,=CL15'SOURCES DETAILS'\n         L     R3,ASDS\n         L     R2,ASDN\n         USING SDENT,R3\nPRIX1    CLC   SDIXP,=XL4'0'\n         BE    PRIX2\n         MVC   IXT3D,SDDSN\n         MVC   IXT3V,SDVOL\n         MVC   IXT3P,=XL6'402020202120'\n         ED    IXT3P,SDIXP\n         MVI   IXT3P,C'/'\n         MVI   IXT3T,C'S'\n         BAS   R9,IXPRT\n         MVC   IXT3L+2(3),=CL3'\" \"'\nPRIX2    AH    R3,ESDL\n         BCT   R2,PRIX1\n         B     MAPRX\n         DROP  R3\n         SPACE 1\nMCPRT    CP    MCLN,MXLN2          MACROS TOTALS PRINT SUBROUTINE\n         BL    MCPRT1              R0-R1-R14-R15  = WORK REGISTERS\n         ZAP   MCLN,=PL1'+0'       R9 = LINK REGISTER\n         AP    MCPG,=PL1'+1'\n         MVC   MCT1P,=XL6'402020202120'\n         ED    MCT1P,MCPG\n         MVI   MCT1P,C'/'\n        $PRINT MCT1,,MCLDD\n         LTR   R15,R15\n         BNZ   MCPRTX\n        $PRINT MCT1U,,MCLDD\n         LTR   R15,R15\n         BNZ   MCPRTX\n        $PRINT MCT2,,MCLDD\n         LTR   R15,R15\n         BNZ   MCPRTX\n        $PRINT MCT2U,,MCLDD\n         LTR   R15,R15\n         BNZ   MCPRTX\n        $PRINT MCT3,,MCLDD\n         LTR   R15,R15\n         BNZ   MCPRTX\n        $PRINT MCT3U,,MCLDD\n         LTR   R15,R15\n         BNZ   MCPRTX\nMCPRT1  $PRINT MCT4,,MCLDD\n         LTR   R15,R15\n         BNZ   MCPRTX\n         AP    MCLN,=PL1'+1'\n         MVC   MCT4M(4*L'MCT4M),MCT4M-1\n         BR    R9\nMCPRTX   MVC   MERR1+5(L'MCLDD),MCLDD\n         B     LSTERR\n         SPACE 1\nMRPRT    CP    MCLN,MXLN2          MACROS DETAILS PRINT SUBROUTINE\n         BL    MRPRT1              R0-R1-R14-R15  = WORK REGISTERS\n         ZAP   MCLN,=PL1'+0'       R9 = LINK REGISTER\n         AP    MCPG,=PL1'+1'\n         MVC   MRT1P,=XL6'402020202120'\n         ED    MRT1P,MCPG\n         MVI   MRT1P,C'/'\n        $PRINT MRT1,,MCLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT1U,,MCLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT2,,MCLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT2U,,MCLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT3,,MCLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT3U,,MCLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n         CLI   MRT4N,C' '\n         BNE   *+L'*+6\n         USING SMENT,R3\n         MVC   MRT4N,SMNME\n         DROP  R3\n         CLI   MRT4D,C' '\n         BNE   *+L'*+6\n         USING SDENT,R2\n         MVC   MRT4D,SDDSN\n         DROP  R2\nMRPRT1  $PRINT MRT4,,MCLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n         AP    MCLN,=PL1'+1'\n         MVC   MRT4+1(L'MRT4-1),MRT4\n         BR    R9\nMRPRTX   MVC   MERR1+5(L'MCLDD),MCLDD\n         B     LSTERR\n         SPACE 1\nIXPRT    CP    IXLN,MXLN1          INDEX PRINT SUBROUTINE\n         BL    IXPRT1              R0-R1-R14-R15  = WORK REGISTERS\n         ZAP   IXLN,=PL1'+0'       R9 = LINK REGISTER\n         AP    IXPG,=PL1'+1'\n         MVC   IXT1P,=XL6'402020202120'\n         ED    IXT1P,IXPG\n         MVI   IXT1P,C'/'\n        $PRINT IXT1,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\n        $PRINT IXT1U,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\n        $PRINT IXT2,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\n        $PRINT IXT2U,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\nIXPRT1  $PRINT IXT3,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\n         AP    IXLN,=PL1'+1'\n         MVC   IXT3+1(L'IXT3-1),IXT3\n         BR    R9\nIXPRTX   MVC   MERR1+5(L'TTLDD),TTLDD\n         B     LSTERR\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                       F I N A L     T R A C E                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- TRACE WORK-AREAS USE IF REQUESTED\n         SPACE 1\nFTRC0    TM    SW2,SWTAV\n         BZ    LEAVE\n        $PRINT FTRM0\n         LTR   R15,R15\n         BNZ   FTRERR\n        $PRINT FTRM0U\n         LTR   R15,R15\n         BZ    FTRC2\nFTRERR   STC   R15,PERRWT+46\n         OI    PERRWT+46,C'0'\n        WTO    MF=(E,PERRWT)\n         OI    SW2,SWERR\n         B     LEAVE\nFTRC1    LR    R1,R2\n         XR    R0,R0\n         LA    R14,L'FTRM1A\n         LA    R15,FTRM1A\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    FTRM1A,=XL8'0F0F0F0F0F0F0F0F'\n         TR    FTRM1A,TRHEX\n         SR    R3,R2\n         LR    R1,R3\n         XR    R0,R0\n         LA    R14,L'FTRM1B\n         LA    R15,FTRM1B\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    FTRM1B,=XL8'0F0F0F0F0F0F0F0F'\n         TR    FTRM1B,TRHEX\n         MVI   FTRM1C+16,C' '\n         MVC   FTRM1C+17(L'FTRM1C-17),FTRM1C+16\n         CVD   R3,WORKD\n         MVC   FTRM1C(16),=XL16'40202020202020202020202020202120'\n         ED    FTRM1C(16),WORKD\n         LA    R0,15\n         CLI   FTRM1C,C' '\n         BNE   *+L'*+14\n         MVC   FTRM1C(15),FTRM1C+1\n         MVI   FTRM1C+15,C' '\n         BCT   R0,*-18\n         LA    R1,FTRM1C\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         LA    R1,1(R1)\n         B     *-12\n         MVC   1(6,R1),=CL6'BYTES)'\n        $PRINT FTRM1\n         LTR   R15,R15\n         BZR   R9\n         B     FTRERR\nFTRC2    MVC   FTRM1W,=CL2'MD'\n         L     R2,AMDS\n         L     R3,AMDN\n         MH    R3,EMDL\n         AR    R3,R2\n         LR    R4,R3\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'SD'\n         L     R2,ASDS\n         L     R3,ASDN\n         MH    R3,ESDL\n         AR    R3,R2\n         LR    R5,R3\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'MM'\n         L     R2,AMMS\n         SH    R4,EMDL\n         USING MDENT,R4\n         L     R3,MDMME\n         DROP  R4\n         AH    R3,EMML\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'SM'\n         L     R2,ASMS\n         SH    R5,ESDL\n         USING SDENT,R5\n         L     R3,SDSME\n         DROP  R5\n         AH    R3,ESML\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'RN'\n         L     R2,ARNS\n         L     R3,CRNPTR\n         AH    R3,RNLGTH\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'IM'\n         L     R2,AIMS\n         ICM   R3,B'1111',MIMPTR\n         BNZ   *+L'*+6\n         LR    R3,R2\n         B     *+L'*+4\n         AH    R3,EIML\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'UM'\n         L     R2,AUMS\n         ICM   R3,B'1111',MUMPTR\n         BNZ   *+L'*+6\n         LR    R3,R2\n         B     *+L'*+4\n         AH    R3,EUML\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'CM'\n         L     R2,ACMS\n         ICM   R3,B'1111',MCMPTR\n         BNZ   *+L'*+6\n         LR    R3,R2\n         B     *+L'*+4\n         AH    R3,ECML\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'OC'\n         L     R2,AOCS\n         ICM   R3,B'1111',OCMPTR\n         BNZ   *+L'*+6\n         LR    R3,R2\n         B     *+L'*+4\n         AH    R3,EOCL\n         BAS   R9,FTRC1\n         B     LEAVE\n         SPACE 1\n         DC    AL1(FTRM0L)\nFTRM0    DC    C'0 REAL USE OF WORK-AREAS SPACE :'\nFTRM0L   EQU   *-FTRM0\n         DC    AL1(FTRM0UL)\nFTRM0U   DC    C'+ ______________________________'\nFTRM0UL  EQU   *-FTRM0U\n         DC    AL1(FTRM1L)\nFTRM1    DC    CL2'0 '\nFTRM1W   DC    CL2' ',C' - AREA ADDRESS : '\nFTRM1A   DC    CL8' ',C' LENGTH : '\nFTRM1B   DC    CL8' ',C' ('\nFTRM1C   DC    CL24' '\nFTRM1L   EQU   *-FTRM1\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*------- DSECT'S\n         SPACE 1\nMDENT    DSECT                     MACLIB'S DD'S\nMDNME    DS    CL8                 DD NAME\nMDMMS    DS    A                   FIRST MEMBER POINTER\nMDMME    DS    A                   LAST MEMBER POINTER\nMDDSN    DS    CL44                DS-NAME\nMDVOL    DS    CL6                 VOLUME NAME\nMDLGTH   EQU   (((*-MDENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nSDENT    DSECT                     SOURCE'S DD'S\nSDNME    DS    CL8                 DD NAME\nSDSMS    DS    A                   FIRST MEMBER POINTER\nSDSME    DS    A                   LAST MEMBER POINTER\nSDDSN    DS    CL44                DS-NAME\nSDVOL    DS    CL6                 VOLUME NAME\nSDIXP    DS    PL3                 PAGE NUMBER FOR INDEX PRINT\nSDLGTH   EQU   (((*-SDENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nMMENT    DSECT                     MACLIB'S MEMBERS NAMES\nMMNME    DS    CL8                 MEMBER (MACRO) NAME\nMMPTR    DS    A                   START POINTER TO REFERENCES\nMMCNT    DS    F                   MODULE OCCURRENCES COUNT\nMMDST    DS    F                   DATA-SET OCCURRENCES COUNT\nMMTOT    DS    F                   TOTAL OCCURRENCES COUNT\nMMLGTH   EQU   (((*-MMENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nSMENT    DSECT                     SOURCE'S MEMBERS NAMES\nSMNME    DS    CL8                 MEMBER (MODULE) NAME\nSMLGTH   EQU   (((*-SMENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nRNENT    DSECT                     REFERENCE ELEMENT\nRNCHN    DS    A                   CHAINING POINTER OR ZERO (LAST)\nRNSMA    DS    A                   SOURCE MEMBER ADDRESS\nRNCNT    DS    F                   MACRO OCCURRENCES COUNT\nRNLGTH   EQU   (((*-RNENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nIMENT    DSECT                     INTERNAL MACROS NAMES\nIMNME    DS    CL8                 MACRO NAME\nIMCNT    DS    F                   INTERNAL MACRO OCCURRENCES COUNT\nIMLGTH   EQU   (((*-IMENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nUMENT    DSECT                     UNRESOLVED MACROS NAMES\nUMNME    DS    CL8                 MACRO NAME\nUMCNT    DS    F                   UNRESOLVED MACRO OCCURRENCES COUNT\nUMLGTH   EQU   (((*-UMENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nCMENT    DSECT                     COPY MODULES NAMES\nCMNME    DS    CL8                 COPY MODULE NAME\nCMCNT    DS    F                   COPY MODULE OCCURRENCES COUNT\nCMLGTH   EQU   (((*-CMENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nOCENT    DSECT                     OPERATION CODES NAMES\nOCNLG    DS    XL1                 OPERATION CODE NAME LENGTH\nOCNME    DS    CL8                 OPERATION CODE NAME\nOCLGTH   EQU   *-OCENT             ENTRY LENGTH\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\n        DCBD   DSORG=PO,DEVD=DA\n        IEFZB4D0\n        IEFZB4D2\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMRUTIL$": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x12\\x00\\x12\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "SYSPAJA"}, "text": "//AMRUTIL  JOB (........),'INSTALL - AMRUTIL -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                GFDATE     MREAD     PDREAD    TXPRINT             *\n//* NOTE : AT ASSEMBLY, YOU MAY SET THE SYSPARM AS BELOW :            *\n//*        FULL  =  PRINT GEN FOR THE ENTIRE LIST                     *\n//*        SHORT =  REDUCED PRINT GEN                                 *\n//*        NONE  =  PRINT NOGEN FOR THE ENTIRE LIST                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,OPT=',SYSPARM(NONE)',MBR=AMRUTIL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,MREAD,PDREAD,PRINT)\n  ENTRY   AMRUTIL\n  NAME    AMRUTIL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AMRUTIL@": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x08_\\x00\\x93\\x08_\\x11T\\x00t\\x00t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-26T00:00:00", "modifydate": "1993-03-26T11:54:00", "lines": 116, "newlines": 116, "modlines": 0, "user": "SYSPAJA"}, "text": "1   25/02/93\n                                                      AMRUTIL   1/3.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * ASSEMBLER MACROS REFERENCES UTILITY * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    The main goals of the Assembler Macros References\n  ---------    Utility program is to create a list (book) which\n               quickly responds to the following two funny questions :\n               1) which macros are used in a specific Assembler\n                  symbolic module ? or\n               2) which Assembler symbolic modules in your sources\n                  libraries use a specific macro ?\n\n  Call of the program :\n  ---------------------\n\n         //XEQ     EXEC PGM=AMRUTIL,PARM='...(Optional)...'\n         //MAC...    DD DSN=...1st Macros Library...,DISP=SHR\n         //MAC...    DD DSN=...2nd Macros library...,DISP=SHR\n                            ...any number of DD-cards...\n         //MAC...    DD DSN=...nth Macros Library...,DISP=SHR\n         //SRC...    DD DSN=...1st Sources Library...,DISP=SHR\n         //SRC...    DD DSN=...2nd Sources Library...,DISP=SHR\n                            ...any number of DD-cards...\n         //SRC...    DD DSN=...nth Sources Library...,DISP=SHR\n         //TITPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n         //MACPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n         //SRCPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n         //SYSPRINT  DD SYSOUT=*\n\n  JCL additional information :\n  ----------------------------\n\n  1. Maintaining the order of the three DD-cards TITPRINT, MACPRINT\n     and SRCPRINT allows you to print in the right order the entire\n     generated manual.\n  2. Place the //MAC... DD-cards in the same order they are normally\n     concatenated to the //SYSLIB DD-card as when you execute the\n     assembly of the sources modules.\n  3. Repeat a //MAC... DD-card as a //SRC... DD-card if you want to\n     know the inner-outer macros use.\n  4. All //MAC... DD-cards and //SRC... DD-cards must refer only to\n     partitioned data-sets.\n1   25/02/93\n                                                      AMRUTIL   2/3.\n\n  Defaults :   The program assumes some execution defaults values.\n  ----------   These are defined by symbols as below :\n         LN :   55 is the maximum number of lines per page\n         MD :   10 is the maximum number of Macros Libraries DDs\n                   (//MAC... DD ...)\n         SD :   10 is the maximum number of Sources Libraries DDs\n                   (//SRC... DD ...)\n         MM : 1000 is the maximum number of members names for all the\n                   Macros Libraries\n         SM : 2000 is the maximum number of members names for all the\n                   Sources Libraries\n         RN : 5000 is the maximum number of reference elements (a\n                   reference element is used to set the number of\n                   times a macro appears in a source module, obviously\n                   not all macros are in all modules)\n         IM :  100 is the maximum number of internal macros definitions\n                   in a source module\n         UM : 1000 is the maximum number of unresolved macros\n                   encountered in a source module\n         CM :   50 is the maximum number of copy module names (not\n                   statememts) in a source module\n         OC :  500 is the maximum number of operation codes defined in\n                   member GIMOPCDE (SYS1.PARMLIB)\n         All these values can be changed through the EXEC PARM= field\n         in the JCL.\n\n  EXEC parm. field : Use to overrides any or all execution defaults\n  ------------------ values. They may be specified in any order as\n         shown below :\n         PARM='LN=60,MM=500,SD=5,MD=5,...etc...'\n         or :\n         PARM='LN 60 MM 500 SD 5 MD 5 ...etc...'\n         Blanks and commas are treated as separators, so you may\n         code : PARM='LN=60,MD=5 ...\n         or mixed : PARM=' LN 60 , MD = 5 ...\n         A TRACE option (gives information about all work-areas spaces\n         dynamically obtained/used by the program, about 1 page on\n         SYSPRINT) may be also specified in the EXEC parm. field by\n         just setting T.\n         i.e. : PARM=T or PARM='LN 60 T'\n         This option can help you to estimate and set the REGION size\n         in your JCL.\n1   25/02/93\n                                                      AMRUTIL   3/3.\n\n  Remarks : 1. As soon as the program discover a non Assembler source\n  ---------    statement (as i.e. a // JCL card) the corresponding\n               module analysis is terminated (flushed). So, don't\n               set any JCL with the assembly source in the same member,\n               but set it in a separate member.\n            2. The COPY statement (to include sources or macros) is\n               rudimentarily processed (you are only informed about\n               all the COPY names in a source module).\n            3. Generally the program works well, but some exceptional\n               situation may occur where macros use escape, as shown\n               in the very simple example below :\n                             MACRO\n                    &NAME    MAC1  &OP,&N\n                    &NAME    &OP   &N\n                             MEND\n               then, if this macro is coded in the source as follows :\n                    AB100    MAC1  ABEND,100\n               it generates the statement :\n                    AB100    ABEND 100\n               and ,sorry, but the macro ABEND will not be detected in\n               this case.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT$": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16&\\x00h\\x00h\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:26:00", "lines": 104, "newlines": 104, "modlines": 0, "user": "SYSPAJA"}, "text": "//AUTAIDM  JOB (........),'INSTALL - ACCOUNT -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//*      *****************************************************\n//*      * ACCOUNTING INFORMATION DATA-SET MAINTENANCE (TSO) *\n//*      *****************************************************\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   DYNALL    GFDATE    MREAD     SUJVTA     *\n//*                ZPACK     ZYDIAG                                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS90   EXEC PAJ2AS2,MBR=AUT90\n//LNK90   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT90\n  NAME    AUT90(R)\n/*\n//ASS95   EXEC PAJ2AS3,MBR=AUT95\n//LNK95   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT95\n  NAME    AUT95(R)\n/*\n//ASS96   EXEC PAJ2AS2,MBR=AUT96\n//LNK96   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT96\n  NAME    AUT96(R)\n/*\n//ASS97   EXEC PAJ2AS2,MBR=AUT97\n//LNK97   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT97\n  NAME    AUT97(R)\n/*\n//ASS98   EXEC PAJ2AS3,MBR=AUT98\n//LNK98   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT98\n  NAME    AUT98(R)\n/*\n//ASS99   EXEC PAJ2AS2,MBR=AUT99\n//LNK99   EXEC PAJILKR,OPT=',MAP'\n//SYSIN     DD *\n  ENTRY   AUT99\n  NAME    AUT99(R)\n/*\n//ASS11   EXEC PAJ2AS2,MBR=AUT11\n//LNK11   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT11\n  NAME    AUT11(R)\n/*\n//ASS10   EXEC PAJ2AS2,MBR=AUT10\n//LNK10   EXEC PAJILKC,OPT=',MAP'\n//SYSIN     DD *\n  INCLUDE      SYSADD(AUT11,AUT90,AUT95,AUT97,AUT98,AUT99)\n  INCLUDE      SYSADD(DYNALL,GFDATE,MREAD,SUJVTA,ZOPEN,ZYDIAG)\n  ENTRY   AUT10\n  NAME    AUT10(R)\n/*\n//ASS20   EXEC PAJ2AS2,MBR=AUT20\n//LNK20   EXEC PAJILKC,OPT=',MAP'\n//SYSIN     DD *\n  INCLUDE      SYSADD(AUT90,AUT95,AUT97,AUT98,AUT99)\n  INCLUDE      SYSADD(DYNALL,MREAD,SUJVTA,ZOPEN,ZYDIAG)\n  ENTRY   AUT20\n  NAME    AUT20(R)\n/*\n//ASS31   EXEC PAJ2AS2,MBR=AUT31\n//LNK31   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT31\n  NAME    AUT31(R)\n/*\n//ASS32   EXEC PAJ2AS2,MBR=AUT32\n//LNK32   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT32\n  NAME    AUT32(R)\n/*\n//ASS33   EXEC PAJ2AS2,MBR=AUT33\n//LNK33   EXEC PAJILKR,OPT=',MAP,NCAL'\n//SYSIN     DD *\n  ENTRY   AUT33\n  NAME    AUT33(R)\n/*\n//ASS30   EXEC PAJ2AS2,MBR=AUT30\n//LNK30   EXEC PAJILKC,OPT=',MAP'\n//SYSIN     DD *\n  INCLUDE      SYSADD(AUT31,AUT32,AUT33)\n  INCLUDE      SYSADD(AUT95,AUT96,AUT97,AUT98,AUT99)\n  INCLUDE      SYSADD(DYNALL,GFDATE,SUJVTA,ZOPEN,ZYDIAG)\n  ENTRY   AUT30\n  NAME    AUT30(R)\n/*\n//ASS40   EXEC PAJ2AS2,MBR=AUT40\n//LNK40   EXEC PAJILKC,OPT=',MAP'\n//SYSIN     DD *\n  INCLUDE      SYSADD(AUT95,AUT97,AUT98,AUT99)\n  INCLUDE      SYSADD(DYNALL,MREAD,SUJVTA,ZOPEN,ZYDIAG)\n  ENTRY   AUT40\n  NAME    AUT40(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUT@": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x01\\x1f\\x00\\x90\\x01\\x1f\\x14Y\\x00\\x14\\x00\\x14\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-11T00:00:00", "modifydate": "1990-01-11T14:59:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "SYSPAJA"}, "text": "1   11/01/90\n                                                      AUT..     1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *     DATA-SET MAINTENANCE (TSO)      * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    a set of TSO-commands to manage the contents of the\n  ---------    accounting information data-set.\n\n  TSO-command  Object\n  -----------  ------------------------------------------------------\n     AUT10     Display Authorization/Programmer Information\n     AUT20     Display Authorization(s) to which a User belongs\n     AUT30     Authorizations and Programmers Management\n     AUT40     Display USER-IDs Account Information\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT10": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08/\\x00\\x90\\x08/\\x129\\x03H\\x03H\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-23T00:00:00", "modifydate": "1990-03-23T12:39:00", "lines": 840, "newlines": 840, "modlines": 0, "user": "SYSPAJA"}, "text": "AU10     TITLE '-- TSO-CP AUT10 --'\nAUT10    START 0\n         SPACE 1\n**********************************************************************\n*        THIS CP PERMITS TO VISUALIZE IN A TRANSACTIONNAL            *\n*        WAY THE ACCOUNTING FILE.                                    *\n*        THIS CP IS GIVEN TO SUPPORT GROUP ALSO.                     *\n*                                             M.SACRE  01 OCTOBRE 84 *\n*                                        P.A.MOINIL  21 SEPTEMBRE 89 *\n* REMARK : THE SCREEN DISPLAY IS ORGANIZED ON 25 LINES OF DATA FOR   *\n*          25 NUMBERS OF PROGRAMMERS NO. FIELDS.                     *\nNPL      EQU   25 = AUTNPNF IN AUTDSECT                              *\n*          IF AUTNPNF IS REDEFINED HIGHER, TAKE CARE THAT THEN YOU   *\n*          MUST CHANGE THE SCREEN DISPLAY LOGIC AND ORGANIZATION.    *\n**********************************************************************\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R10,R11,R12)\n         SPACE 1\n*------- CONTROL OF CALLER (USERID)\n         XR    R0,R0                   NO HARDCOPY\n         L     R15,=V(AUT98)\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   LEAVE                   BRANCH TO END OF CP\n         SPACE 1\n*--------------------------------------------------------------------*\n*        USERID AUTORISE A UTILISER CETTE CP.                        *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- ALLOCATION DYNAMIQUE DU FICHIER D'ACCOUNTING\n*        QUI SE TROUVE SOUS LA DD-NAME SYSACC\n         L     R1,=V(AUT98A)\n         MVC   DYNDSN(44),0(R1)        SET ACCOUNT FILE DS-NAME\n        $DYNALL DYNLIST                DYNAMIC ALLOC OF SYSACC\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERALL                   B ON ERROR ALLOC IF NOT ZERO\n        CALL   ZOPEN,(RETCD,XOPT),VL   OPEN FILE UNDER SYSACC DD\n         LTR   R15,R15                 IS RETURN CODE 0?\n         BNZ   ERRZOC                  IF NOT, ERROR AT OPEN\n         L     R1,=V(AUT99I)\n         MVC   0(4,R1),=V(AUT95)       SET PF-2 KEY ACTIVE\n         EJECT\n*--------------------------------------------------------------------*\n*        FICHIER D'ACCOUNTING BIEN OUVERT.                           *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- START PROCESSING.\nDEMINIT  LA    R1,PECRIN               INITIAL DEMAND\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         NOP   *+L'*+16                SWITCH ADVICE\n         OI    *-3,X'F0'               THIS WAY DONE JUST ONCE\n         MVC   OVRR(LPTIC),PTIC        CUT OUT THE ADVICE\n         MVC   PECRIN,=A(LECRIN)\n         MVI   ECRINM,C' '\n         MVC   ECRINM+1(L'ECRINM-1),ECRINM\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   SEEWHAT                 NO\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    FININER                 IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    FININER                 YES\n         MVC   RESPONSE(1),3(R15)\n         OI    RESPONSE,C' '           TRANSLATE LOWER CASE IN UPPER\n         CLI   RESPONSE,C'A'           IS RESPONSE = A ?\n         BE    AUTHOR                  IF YES, GO TO AUTHOR\n         CLI   RESPONSE,C'P'           IS RESPONSE = P ?\n         BE    INPROG                  IF YES, ACCESS BY PROG NBR\n         CLI   RESPONSE,C'U'           IS RESPONSE = U ?\n         BE    INUSID                  IF YES, ACCESS BY USERID\n         CLI   RESPONSE,C' '           IS RESPONSE = BLANK ?\n         BE    FININER                 IF YES, CLOSE FILE, END\n         MVC   ECRINM(L'MSGINV),MSGINV\n         MVC   ECRINM+L'MSGINV-5(1),RESPONSE\n         B     DEMINIT                 BACK TO DEMAND INITIAL\nSEEWHAT  CH    R15,=H'4'\n         BE    FININER                 END OF CP REQUESTED\n         B     CLSZR                   ELSE EXIT\n         EJECT\n*--------------------------------------------------------------------*\n*        ACCES DU FICHIER PAR LE USERID.                             *\n*        ON VA ALLER CHERCHER L'ACCOUNTING NUMBER DANS LE TSO-UADS.  *\n*        PUIS ON REPART DANS CE PROGRAMME.                           *\n*--------------------------------------------------------------------*\n         SPACE 1\nINUSID   MVC   INFO(L'INFO),=CL25' '   ASK FOR USERID\n        CALL   AUT90,(INFO),VL         CALL SUBROUTINE\n         LTR   R15,R15\n         BNE   FININER                 END OF CP REQUESTED\n         CLC   INFO+8(7),=CL25' '      ESCAPE?\n         BE    DEMINIT                 YES\n        CALL   AUT11,(INFO),VL         CALL SUBROUTINE\n         LTR   R15,R15\n         BZ    *+L'*+12\n         CH    R15,=H'4'               JUST END REQUESTED?\n         BE    FININER                 YES\n         B     CLSZR\n         LTR   R1,R1\n         BM    PNOTFD\n         MVC   INFO+8(7),0(R1)         PASS NEW USERID\n         CLC   INFO+8(7),=CL25' '      BUT MAY BE ESCAPE?\n         BE    DEMINIT                 YES\n         OC    INFO+8(7),=CL25' '      TRANSLATE LOWER CASE IN UPPER\n         B     INUSID+L'INUSID\nPNOTFD   MVI   INFO+8,X'FF'            SAY PGRMER NUMBER NOT FOUND\n         B     INUSID+L'INUSID\n         SPACE 1\n*--------------------------------------------------------------------*\n*        ACCES DU FICHIER PAR LE NUMERO DE PROGRAMMEUR.              *\n*--------------------------------------------------------------------*\n*                               ACCESS IN FILE BY PROGR. NUMBER\nINPROG   XR    R1,R1                   TO SAY AT SUBROUTINE THERE\n*                                      IS NO PARAMETERS.\n        CALL   AUT11                   CALL SUBROUTINE\n         LTR   R15,R15\n         BZ    DEMINIT\n         CH    R15,=H'4'               JUST END REQUESTED?\n         BE    FININER                 YES\n         B     CLSZR\n         EJECT\n*--------------------------------------------------------------------*\n*        ACCES DU FICHIER PAR LE NUMERO D'AUTORISATION               *\n*--------------------------------------------------------------------*\n         SPACE 1\nAUTHOR   BAL   R14,CLRVECT\n         MVI   ECRAUM,C' '\n         MVC   ECRAUM+1(L'ECRAUM-1),ECRAUM\nREQAUT   LA    R1,PECRAU               ASK AUTHOR. NBRE\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   FININER                 NO, CLOSE FILE, END (ONLY 4)\n         MVC   WCL4(4),=CL25' '\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    DEMINIT                 IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    DEMINIT                 YES\n         BCT   R1,*+L'*+6\n         MVC   WCL4(*-*),3(R15)\n         EX    R1,*-6\n         CLC   WCL4(4),=CL25' '        IS RESPONSE = BLANK ?\n         BE    DEMINIT                 YES, ESCAPE\nTESTAUT  MVI   ECRAUM,C' '\n         MVC   ECRAUM+1(L'ECRAUM-1),ECRAUM\n         LA    R0,L'WCL4\n         LA    R1,WCL4+L'WCL4\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRAUTH\n         CLI   0(R1),C'9'\n         BH    WRAUTH\n         BCT   R0,*-18\n*------- ICI, NOUS SAVONS QUE L'INPUT EST NUMERIQUE\n         PACK  DSD,WCL4                PACK AUTHOR. NUMBER\n         CVB   R5,DSD                  CONVERT IN BINARY\n         STH   R5,ARGUMAUT             STORE IN ARGUM. AUTHORIZ.\n        CALL   ZREAD,(RETCD,ARGUMAUT,AREAR),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    FNDRC                   IF ZERO, RECORD FOUND\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MESSAGE\n         SPACE 1\n*--------------------------------------------------------------------*\n*        AUTH. NOT NUMERIC OR NOT FOUND. SEND MESSAGE.               *\n*--------------------------------------------------------------------*\n         SPACE 1\n         MVC   ECRAUM(L'MSGAN2),MSGAN2 TELL THAT AUTH NOT FOUND\n         B     REQAUT                  ASK OTHER AUT NBR\nWRAUTH   MVC   ECRAUM(L'MSGAN1),MSGAN1 AUTHORIZATION NOT NUMERIC\n         B     REQAUT                  BRANCH TO ASK AUTHOR.\n         EJECT\n*--------------------------------------------------------------------*\n*        TROUVE L'AUTORISATION DANS LE FICHIER                       *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- PREPARATION DE L'ECRAN D'OUTPUT\nFNDRC    MVI   MSG1,C' '\n         MVC   MSG1+1(L'MSG1-1),MSG1\n         MVC   MSG2,MSG1\n         MVI   SCRNOM,C' '\n         MVC   SCRNOM+1(L'SCRNOM-1),SCRNOM\n         LA    R2,AREAR                SET ADRESSABILITY OF AUTH DSECT\n         USING AUTDSECT,R2\n         LA    R3,AREAP                SET ADRESSABILITY OF PROG DSECT\n         USING PRGDSECT,R3\n         LH    R5,AUTANO               LOAD AUTHORIZATION NUMBER\n         LTR   R5,R5                   SET CONDITION CODE\n         BNM   RECOK                   IF NOT MINUS, RECORD OK\n*------- ICI, LE RECORD TROUVE A ETE SUPPRIME. ON L'A FAIT\n*        EN RENDANT LE NUMERO D'AUTHORISATION NEGATIF.\n*        CELA VEUT DIRE QU'IL A ETE INVALIDE MAIS NON SUPPRIME |||\n         MVI   SCRSI,C'I'              PUT I IN OUTPUT FIELD\n         B     *+L'*+4                 JUMP NEXT INSTRUCTION\nRECOK    MVI   SCRSI,C' '              RECORD OK, CLEAR OUTPUT FIELD\n         MVC   SCRAUT,WCL4             MOVE AUTH NUMBER FOR DISPLAY\n         MVC   SCRFICH,AUTACNO         MOVE FICHE PROGRAM\n*------- CONVERT NUMBER OF PROGR. RESPONSABLE\n         LH    R5,AUTPMNO              PROGRAMMER RESPONS.\n         CVD   R5,DSD                  CONVERT IN DECIMAL\n         UNPK  SCRPR,DSD+5(3)          CONVERT IN EBCDIC\n         OI    SCRPR+L'SCRPR-1,C'0'    SET LAST ZONING\n*------- PRIORITY INCREMENT/DECREMENT\n         CLI   AUTPI,0\n         BE    *+L'*+10\n         MVC   SCRPI,AUTPI\n         B     *+L'*+4\n         MVI   SCRPI,C'4'\n*------- CONVERT DATE D'ENTREE FOR DISPLAY\n         XR    R5,R5\n         ICM   R5,B'0111',AUTVSD\n         CL    R5,=F'99999'            WHICH FORMAT ?\n         BH    *+L'*+4                 NEW FORMAT\n         AL    R5,=F'1900000'          OLD FORMAT, ADJUST IT\n         CVD   R5,DSD                  CONVERT IN PACKED\n         UNPK  WCL7,DSD+4(4)           CONVERT IN CHAR YYYYDDD\n         OI    WCL7+L'WCL7-1,C'0'      SET LAST ZONING AFTER UNPK\nCALLDT  $GFDATE ,,MDY,WCL7\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    NORMC\n         CLC   WCL7+4(3),=CL3'001'     IS DATE LOWER 001 ?\n         BNL   *+L'*+16                IF NOT, DO NEXT TEST\n         MVC   MSG1+30(7),WCL7         SAVE INVALID DATE\n         MVC   WCL7+4(3),=CL3'001'     FORCE DATE\n         B     SETDT\n         CLC   WCL7+4(3),=CL3'365'     IS DATE GREATER 365 ?\n         BNH   SDERR                   IF NOT, GO TO ERROR\n         MVC   MSG1+30(7),WCL7         SAVE INVALID DATE\n         MVC   WCL7+4(3),=CL3'365'     FORCE DATE\nSETDT    MVC   MSG1(30),=CL30'Note : DATE de DEBUT invalide '\n         B     CALLDT\n*------- DISPLAY DU RETURN CODE DE GFDATE IF NOT ZERO\nSDERR    CVD   R15,DSD\n         UNPK  WCL4,DSD+5(3)\n         OI    WCL4+L'WCL4-1,C'0'\n         MVC   MSGGDTE+30(4),WCL4\n         MVC   MSGGDTE+19(5),WCL7      DATE TO TRANSFORM YYDDD\n         LA    R1,MSGGDTE\n         LM    R2,R3,NGDT\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     CLSZR\nNORMC    MVC   SCRDTEI(2),MDY+2        RC OF GFDATE ZERO, MOVE DAYS\n         MVI   SCRDTEI+2,C'/'          SEPARATOR\n         MVC   SCRDTEI+3(2),MDY        MOVE MONTH\n         MVI   SCRDTEI+5,C'/'          SEPARATOR\n         MVC   SCRDTEI+6(4),MDY+4      MOVE YEAR\n*------- CONVERT DATE DE SORTIE FOR DISPLAY\n         XR    R5,R5\n         ICM   R5,B'0111',AUTVED\n         CL    R5,=F'99999'            WHICH FORMAT ?\n         BH    *+L'*+4                 NEW FORMAT\n         AL    R5,=F'1900000'          OLD FORMAT, ADJUST IT\n         CVD   R5,DSD                  CONVERT IN PACKED\n         UNPK  WCL7,DSD+4(4)           CONVERT IN CHAR YYYYDDD\n         OI    WCL7+L'WCL7-1,C'0'      SET LAST ZONING AFTER UNPK\nCALLGD  $GFDATE ,,MDY,WCL7\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    NORMR\n         CLC   WCL7+4(3),=CL3'001'     IS DATE LOWER 001 ?\n         BNL   *+L'*+16                IF NOT, DO NEXT TEST\n         MVC   MSG2+30(7),WCL7         SAVE INVALID DATE\n         MVC   WCL7+4(3),=CL3'001'     FORCE DATE\n         B     SETGD\n         CLC   WCL7+4(3),=CL3'365'     IS DATE GREATER 365 ?\n         BNH   SDERR                   IF NOT, GO TO ERROR\n         MVC   MSG2+30(7),WCL7         SAVE INVALID DATE\n         MVC   WCL7+4(3),=CL3'365'     FORCE DATE\nSETGD    MVC   MSG2(30),=CL30'Note : DATE de FIN invalide '\n         B     CALLGD\nNORMR    MVC   SCRDTEO(2),MDY+2        RC OF GFDATE ZERO, MOVE DAYS\n         MVI   SCRDTEO+2,C'/'          SEPARATOR\n         MVC   SCRDTEO+3(2),MDY        MOVE MONTH\n         MVI   SCRDTEO+5,C'/'          SEPARATOR\n         MVC   SCRDTEO+6(4),MDY+4      MOVE YEAR\n*------- CONVERT NUMBERS OF PROGR. FOR THIS AUTHORIZATION.\n         LA    R5,AUTPNO               ADDRESS OF BEGINNING OF LIST\n         LA    R6,NPL                  NBR OF PROGRAMMER IN LIST\n         LA    R8,NUM1                 PROGRAMMER NBR IN CHAR\n         LA    R9,NAME1                PROGRAMMER' S NAME CORRESPONDING\n         LA    R4,ASTER1               CORRESPONDING I IF PGM NBR < 0\n*------- IF PGM NBR < 0 PUT A 'I' IN CORRESPONDING FIELD\nLOOP     LH    R7,0(R5)                LOAD PROGRAMMER NUMBER\n         LTR   R7,R7                   TEST SIGN\n         BM    INVLD                   IF NEGATIF, HAS BEEN SUPPRESSED\n         BZ    INCRM                   IF ZERO, JUMP THIS FIELD\n         LR    R14,R7\n         AH    R14,=Y(NAUTNO+1)        ADD NO. OF AUT. AT KEY\n         STH   R14,ARGUMPRG            STORE KEY IN ARGUM.PROGRAM.\n        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TSTINV                  IF ZERO, FOUND PROG'S NAME\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MESSAGE\n         MVC   0(25,R9),MSGERR1        IF NOT, MSG AS NAME\n         B     DOCNV                   INSTEAD OF NAME\nTSTINV   LH    R15,PRGPNO              LOAD PROGRAMMER NUMBER\n         LTR   R15,R15                 TEST SIGN\n         BP    OKPRGNM                 IF POSITIVE, GET PROG'S NAME\n*------- CAS OU LE PROGRAMMER NUMBER EST NEGATIF.\n*        CELA VEUT DIRE QU'IL A ETE SUPPRIME.\n*        ON MET 'I' DANS LA CASE CORRESPONDANTE DE L'AUTORISATION.\n         MVC   0(25,R9),MSGERR3        MSG AS NAME\n         B     SETINV\nINVLD    LPR   R7,R7                   CONVERT IN POSITIVE\n         MVC   0(25,R9),MSGERR2        MSG AS NAME\nSETINV   MVI   0(R4),C'I'              BECAUSE WAS NEGATIVE\n         B     DOCNV\nOKPRGNM  MVC   0(25,R9),PRGPNME        MOVE NAME\n*------- JUMP TO NEXT RECORD IN SCREEN\nDOCNV    CVD   R7,DSD                  CONVERT IN PACKED\n         UNPK  0(4,R8),DSD+5(3)        CONVERT IN CHAR IN SCREEN\n         OI    3(R8),C'0'              SET LAST ZONING AFTER UNPK\n         LA    R9,DX(R9)               JUMP TO NEXTS\n         LA    R8,DX(R8)\n         LA    R4,DX(R4)\nINCRM    LA    R5,L'AUTPNO(R5)         JUMP TO NEXT PROGRAMMER\n         BCT   R6,LOOP                 LOOP N... TIMES\n         EJECT\n*--------------------------------------------------------------------*\n*        RECHERCHE DU NOM DU PROG. RESPONSABLE DE L'AUTORISATION.    *\n*--------------------------------------------------------------------*\n*    NB. ALL RECORDS OF PROGRAMMER HAVE A KEY .GE. NO. OF AUT. + 1\n*        SO YOU MUST ADD NO.OF AUT. AT THE NBR YOU HAVE FOUND\n*        IN RECORD OF AUTHORIZATION TO GET THE RIGHT ADDRESS.\n         SPACE 1\n         LH    R5,AUTPMNO              LOAD NUMBER OF PROG RESP.\n         AH    R5,=Y(NAUTNO+1)         ADD NO. OF AUT. AT KEY\n         STH   R5,ARGUMPRG             STORE KEY IN ARGUMENT\n        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TSTPGRES                IF ZERO, FOUND PROG. RESP\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MESSAGE\n         MVC   SCRNOM(L'MSGERR1),MSGERR1\n         B     DSPLAY\nTSTPGRES LH    R15,PRGPNO              LOAD PROGRAMMER NUMBER\n         LTR   R15,R15                 TEST SIGN\n         BP    OKPRGRES                IF POSITIVE, GET PROG'S NAME\n*------- CAS OU LE PROGRAMMER NUMBER EST NEGATIF.\n*        CELA VEUT DIRE QU'IL A ETE SUPPRIME.\n         MVC   SCRNOM(L'MSGERR3),MSGERR3\n         B     DSPLAY\n*------- ICI, NOUS AVONS LE RECORD DU PROGRAMMEUR RESPONSABLE\nOKPRGRES MVC   SCRNOM,PRGPNME          MOVE RESP. NAME FOR DISPLAY\nDSPLAY   LA    R1,PECRAN               DISPLAY SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   FININER                 NO, END CP (ONLY 4)\n         MVC   WCL4(4),=CL25' '\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    DEMINIT                 IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    DEMINIT                 YES\n         BCT   R1,*+L'*+6\n         MVC   WCL4(*-*),3(R15)\n         EX    R1,*-6\n         CLC   WCL4(4),=CL25' '        IS RESPONSE = BLANK ?\n         BE    DEMINIT                 YES, ESCAPE\n         BAL   R14,CLRVECT\n         B     TESTAUT\n         SPACE 1\n         DROP  R2,R3\n         EJECT\n*--------------------------------------------------------------------*\n*        ERREUR AU MOMENT DE L'ALLOCATION DU FICHIER D'ACCOUNTING.   *\n*--------------------------------------------------------------------*\n         SPACE 1\nERALL    STM   R15,R0,DSD\n        TPUT   ERROR1,L'ERROR1\n         UNPK  ERROR1C+8(9),DSD(5)\n         TR    ERROR1C+8(8),TRTAB-X'F0'\n         MVI   ERROR1C+16,C' '\n         UNPK  ERROR1C+22(9),DSD+4(5)\n         TR    ERROR1C+22(8),TRTAB-X'F0'\n         MVI   ERROR1C+30,C' '\n        TPUT   ERROR1C,L'ERROR1C\n         B     LEAVE\n         SPACE 1\n*--------------------------------------------------------------------*\n*        ERREUR A L'UTILISATION DU FICHIER D'ACCOUNTING              *\n*--------------------------------------------------------------------*\n         SPACE 1\nERRZOC   LR    R0,R15\n         XR    R1,R1\n        CALL   ZYDIAG\n         LA    R8,1(R15)\n         XR    R9,R9\n         BCTR  R15,0\n         IC    R9,0(R15)\n         BCTR  R9,0\n        TPUT   (R8),(R9)\n         B     FREACC\n         SPACE 1\nERRZR    LR    R0,R15\n         XR    R1,R1\n         LM    R2,R3,NZRD\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     CLSZR\n         EJECT\n*--------------------------------------------------------------------*\n*        FIN DU TRAVAIL - SORTIE.                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nFININER  XR    R1,R1                   EXIT FULLSCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\nCLSZR   CALL   ZCLOSE,(RETCD),VL       CLOSE FILE UNDER SYSACC DD\n         LTR   R15,R15                 IS RETURN CODE 0?\n         BNZ   ERRZOC                  IF NOT, ERROR AT CLOSE\nFREACC   XC    DYNDSN,DYNDSN\n        $DYNALL DYNLIST                DYNAMIC DE-ALLOC OF SYSACC\nLEAVE   $XRET  CC=0\n         SPACE 1\n*--------------------------------------------------------------------*\n*        INIT SCREEN WITH BLANKS (ROUTINE - LINK = R14)              *\n*--------------------------------------------------------------------*\n         SPACE 1\nCLRVECT  LA    R4,NPL\n         LA    R6,NUM1\n         LA    R7,ASTER1\n         LA    R8,NAME1\nLOOPCLR  MVC   0(4,R6),=CL25' '\n         MVI   0(R7),C' '\n         MVC   0(25,R8),=CL25' '\n         LA    R6,DX(R6)\n         LA    R7,DX(R7)\n         LA    R8,DX(R8)\n         BCT   R4,LOOPCLR\n         BR    R14\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nPECRIN   DC    A(LECRIF,ECRIN)\nPECRAU   DC    A(LECRAU,ECRAU)\nPECRAN   DC    A(LECRAN,ECRAN)\nRETCD    DC    F'0'          RETURN CODE FROM Z... ROUTINES\nXOPT     DC    C'ONLY'       OPTION FOR Z... ROUTINES\nNZRD     DC    0F'0',CL8'ZREAD'\nNGDT     DC    0F'0',CL8'GFDATE'\nAREAR    DC    (AUTLGTH)X'0' WORKA FOR READ FILE. RECORD AUTHOR.\nAREAP    DC    (PRGLGTH)X'0' WORKA FOR READ FILE. RECORD PROGRAMMER\nARGUMAUT DC    H'0'          AUTORIZATION NUMBER TO CHAIN IN FILE\nARGUMPRG DC    H'0'          PROGRAMMER NUMBER TO CHAIN IN FILE\nMDY      DC    CL8' '        MONTH, DAY, YEAR FROM GFDATE\nWCL4     DC    CL4' '        WORK FIELD CHAR LENGTH 4\nWCL7     DC    CL7' '        WORK FIELD CHAR LENGTH 7\nINFO     DC    CL15' '\nRESPONSE DC    C' '\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION PARAMETER LIST                           *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0F\nDYNLIST  DC    CL8'SYSACC'\nDYNDSN   DC    XL44'0'\n         DC    CL8' '        MEMBER NAME\n         DC    CL8' '        PASSWORD\n         DC    CL8'SHR'      STATUS\n         DC    CL256' '      FILLER\n         DC    CL88' '       FILLER\n         SPACE 1\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nERROR1   DC    C'*** ACCOUNT file ALLOC error *** '\nERROR1C  DC    C'    R15=........ - R0=........ - AUT10 '\n         DC    AL1(L'MSGGDTE)\nMSGGDTE  DC    C' GFDATE error (Day=.......,RC=....)'\nMSGINV   DC    C'Unknown option selected :   ???'\nMSGAN1   DC    C'Authorization NOT Numeric or NOT 4 digits.'\nMSGAN2   DC    C'Authorization NOT FOUND in File.'\nMSGERR1  DC    CL25'Progr. Number NOT FOUND'\nMSGERR2  DC    CL25'Progr. Number Invalidated'\nMSGERR3  DC    CL25'Progr. Nr.REC Invalidated'\nTRTAB    DC    C'0123456789ABCDEF'\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRANS D'OUTPUT                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRIN   $FS    CC=W,WCC=(AL,KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION and/or PROGRAMMER',MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='   D   I   S   P   L   A   Y   ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(3,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='===============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='You can display information for a Userid',MF=L\n        $FS    SBA=(6,39),SF=(PROT),MF=L\n        $FS    TEXT='or a Programmer Number',MF=L\n        $FS    SBA=(7,38),SF=(PROT),MF=L\n        $FS    TEXT='or an Authorization Number',MF=L\n        $FS    SBA=(9,11),TEXT='Enter U, P or A',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(10,16),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(11,10),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-1',MF=L\n        $FS    SF=(PROT),TEXT='to view ',MF=L\n        $FS    TEXT='Authorizations/Programmers ',MF=L\n        $FS    TEXT='MANAGEMENT Rules Summary',MF=L\n        $FS    SBA=(12,10),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-2',MF=L\n        $FS    SF=(PROT),TEXT='to view ',MF=L\n        $FS    TEXT='the current Accounting data-set status',MF=L\n        $FS    SBA=(14,1),SF=(PROT,INT),MF=L\nECRINM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\nLECRIN   EQU   (*-ECRIN)+LPTIC\nOVRR    $FS    SBA=(20,1),SF=(PROT,INT),RA=(20,80,-),MF=L\n        $FS    SBA=(21,2),TEXT='Remark :',MF=L\n        $FS    SF=(PROT),TEXT='if desired, you can also enter ',MF=L\n        $FS    TEXT='directly in this process typing',MF=L\n        $FS    SBA=(22,11),TEXT='the TSO-command',MF=L\n        $FS    SF=(PROT,INT),TEXT='AUT10',MF=L\n        $FS    SF=(PROT),TEXT='at any time in your session.',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),RA=(23,80,-),MF=L\n        PRINT  OFF\n        $FS    SBA=(24,1),SF=(PROT,INT),TEXT='WELCOME',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='to this up-grade CP implemented by ',MF=L\n        $FS    TEXT='MOINIL P.A. ... your wizard |',MF=L\n        PRINT  ON\nPTIC    $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLPTIC    EQU   *-PTIC\nLECRIF   EQU   *-ECRIN\n         SPACE 1\nECRAU   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION   D I S P L A Y',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='Enter Authorization Number (4 numerics)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRAUM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAU   EQU   *-ECRAU\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION   D I S P L A Y',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(3,1),SF=(PROT),MF=L\n        $FS    TEXT='Authorization is invalidated if I --->',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRSI   $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,1),SF=(PROT),TEXT='Authorization Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRAUT  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,41),SF=(PROT),TEXT='Fiche Programme :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRFICH $FS    TEXT=(' ',10),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,1),SF=(PROT),TEXT='DATE start :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRDTEI $FS    TEXT='  /  /    ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,25),SF=(PROT),MF=L\n        $FS    TEXT='Responsible Programmer :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRPR   $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,60),SF=(PROT),MF=L\n        $FS    TEXT='Priority level :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRPI   $FS    TEXT=' ',MF=L\n        $FS    SBA=(6,6),SF=(PROT),TEXT='end   :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRDTEO $FS    TEXT='  /  /    ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(6,25),SF=(PROT),TEXT='Resp. Name :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRNOM  $FS    TEXT=(' ',40),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,1),SF=(PROT,INT),MF=L\nMSG1    $FS    TEXT=(' ',37),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,41),SF=(PROT,INT),MF=L\nMSG2    $FS    TEXT=(' ',37),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,1),SF=(PROT),MF=L\n        $FS    TEXT='Programmers for this Authorization :',MF=L\n        $FS    SBA=(9,2),SF=(PROT),MF=L\n        $FS    TEXT='--->  I=invalidated',MF=L\n        $FS    SBA=(9,42),SF=(PROT),MF=L\n        $FS    TEXT='--->  I=Invalidated',MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 01 -*\nSX       EQU   *\n        $FS    SBA=(10,2),SF=(PROT,INT),MF=L\nNUM1    $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),MF=L\nASTER1  $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),MF=L\nNAME1   $FS    TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\nDX       EQU   *-SX\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 02 -*\n        $FS    SBA=(10,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 03 -*\n        $FS    SBA=(11,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 04 -*\n        $FS    SBA=(11,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 05 -*\n        $FS    SBA=(12,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 06 -*\n        $FS    SBA=(12,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 07 -*\n        $FS    SBA=(13,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 08 -*\n        $FS    SBA=(13,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 09 -*\n        $FS    SBA=(14,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 10 -*\n        $FS    SBA=(14,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 11 -*\n        $FS    SBA=(15,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 12 -*\n        $FS    SBA=(15,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 13 -*\n        $FS    SBA=(16,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 14 -*\n        $FS    SBA=(16,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 15 -*\n        $FS    SBA=(17,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 16 -*\n        $FS    SBA=(17,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 17 -*\n        $FS    SBA=(18,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 18 -*\n        $FS    SBA=(18,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 19 -*\n        $FS    SBA=(19,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 20 -*\n        $FS    SBA=(19,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 21 -*\n        $FS    SBA=(20,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 22 -*\n        $FS    SBA=(20,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 23 -*\n        $FS    SBA=(21,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 24 -*\n        $FS    SBA=(21,42),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 25 -*\n        $FS    SBA=(22,2),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(23,1),SF=(PROT),MF=L\n        $FS    TEXT='Enter another Authorization Number ',MF=L\n        $FS    TEXT='(4 numerics)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(24,1),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT GEN\n        $AIRD  SEC=YES,R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT11": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08\\x0f\\x00\\x90\\x08\\x0f\\x14\\x10\\x01\\x12\\x01\\x12\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-21T00:00:00", "modifydate": "1990-03-21T14:10:00", "lines": 274, "newlines": 274, "modlines": 0, "user": "SYSPAJA"}, "text": "AU11     TITLE '-- TSO-CP AUT10 - ROUTINE AUT11 --'\nAUT11    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE IS CALLED BY PROGRAM 'AUT10'.               *\n*        I ACCESS THE FILE BY PROGRAMMER NUMBER.                     *\n*    NB. I AM NOT ABLE TO MODIFY THE FILE. I DISPLAY ONLY INFO.      *\n*                                             M.SACRE  01 OCTOBRE 84 *\n*                                        P.A.MOINIL  21 SEPTEMBRE 89 *\n**********************************************************************\n*        CALL AUT11 OR CALL AUT11,(PARM),VL                          *\n*        FUNCTION : SUBROUTINE TO DISPLAY PROGRAMMER'S INFO'S.       *\n*        AT ENTRY : R1  = PARM. ADDRESS (WHEN CALLED WITH PARM.)     *\n*                         PARM. --->   A(ACCN) WHICH IS THE ADDRESS  *\n*                                      OF AN 8-CHAR. FIELD,          *\n*                                      FORMAT : CL8'AAAAPPPP'.       *\n*              OR : R1 = 0 TO SAY NONE PASSED (WHEN WITHOUT PARM.)   *\n*         AT EXIT : R15 = 0 - NORMAL COMPLETION                      *\n*                         4 - END REQUESTED                          *\n*                         8 - SEVERE ERROR                           *\n*                   WHEN PARM. GIVEN AND R15 = 0, THEN               *\n*                   R1  = ADDRESS OF REPSONSE FIELD                  *\n*                         -1 WHEN PROGRAMMER NOT FOUND               *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R10\n         SPACE 1\n         MVI   ECRAPM,C' '\n         MVC   ECRAPM+1(L'ECRAPM-1),ECRAPM\n         LTR   R1,R1                   IS THERE A PARAMETER PASSED?\n         BZ    ASKPGM                  IF NOT, ASK PGM NBR\n*------- ICI, ON SAIT QU'IL Y A LE PARAMETRE\n         L     R2,0(R1)                LOAD ADDRESS OF PARM PASSED\n         MVC   RESPONSE(4),4(R2)       MOVE PGM NBR IN RESPONSE\n         MVC   SCRFILL(LUSF),USF\n         B     OK                      AND BYPASS REQUEST\nASKPGM   MVC   SCRFILL(LPNF),PNF\nASKDEM   LA    R1,PECRAP               ASK PGRMER NUMBER\n         L     R15,=V(AUT99)\n         BALR  R14,R15\nTESTASK  LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END (ONLY 4)\n         MVI   ECRAPM,C' '\n         MVC   ECRAPM+1(L'ECRAPM-1),ECRAPM\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    QUIT                    IF YES, ESCAPE FROM SUBR.\n         LTR   R1,R1                   NO TEXT ?\n         BZ    QUIT                    YES\n         MVC   RESPONSE(4),=CL7' '\n         BCT   R1,*+L'*+6\n         MVC   RESPONSE(*-*),3(R15)\n         EX    R1,*-6\n         LA    R0,4\n         LA    R1,RESPONSE+4\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRRESP\n         CLI   0(R1),C'9'\n         BH    WRRESP\n         BCT   R0,*-18\n*------- ICI, ON SAIT QUE L'ENTREE EST NUMERIQUE\n*        RECHERCHE DU NUMERO DE PROGR. DANS LE FICHIER D'ACCOUNTING\nOK       MVC   PGMCHAR(L'PGMCHAR),RESPONSE\n         PACK  DSD,RESPONSE(4)         PACK PROGRAMMER NBR\n         CVB   R5,DSD\n         AH    R5,=Y(NAUTNO+1)         ADD NO. OF AUT. FOR ADDRESS\n         STH   R5,ARGUMPRG             STORE IN ARGUMENT\n        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ RECORD\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TROUVE                  IF ZERO, PROGR. FOUND\n         CH    R15,=H'15'              IF 15, ARGUM NOT FOUND\n         BE    NOTFND                  IF EQUAL, NOT FOUND\n         LR    R0,R15\n         XR    R1,R1\n         LM    R2,R3,NZRD\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         LA    R15,8                   SEVERE ERROR\n         B     LEAVE\nWRRESP   CLC   RESPONSE(4),=CL7' '     IS RESPONSE BLANK ?\n         BE    QUIT                    IF YES, ESCAPE FROM SUBR.\n         MVC   ECRAPM(L'MSGPN1),MSGPN1 PGRMER NUMBER NOT NUMERIC\n         B     ASKDEM\nQUIT     XR    R15,R15                 ESCAPE\nLEAVE   $XRET  CC=(R15)\nNOTFND   CLI   SCRFILL,C'U'            USERID CALL ?\n         BNE   *+L'*+8                 NO\n         XR    R1,R1\n         BCTR  R1,0\n         B     QUIT\n         MVC   ECRAPM(L'MSGPN2),MSGPN2 PGRMER NUMBER NOT FOUND\n         B     ASKDEM\n         SPACE 1\n*--------------------------------------------------------------------*\n*        NOUS ALLONS AFFICHER LES RENSEIGNEMENTS QUI CONCERNENT      *\n*        LE PROGRAMMEUR.                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\nTROUVE   LA    R3,AREAP                SET ADRESSABILITY OF DSECT\n         USING PRGDSECT,R3\n         LH    R1,PRGPNO               LOAD PROGRAMMER NUMBER\n         LTR   R1,R1                   TEST SIGN\n         BNM   *+L'*+4                 IF POSITIVE, SKIP NEXT\n*------- ICI LE FLAG EST NEGATIF. ON DOIT METTRE I DANS LE CODE\n*        AVANT DE FAIRE LE DISPLAY.\n         MVI   SCRSI,C'I'              MOVE I IN CODE\n         MVC   SCRPGM,PGMCHAR          MOVE PGM NBR FOR DISPLAY\n         MVC   SCRNOM,PRGPNME          MOVE NAME\n         MVC   SCRMAT,PRGMNO           MOVE MATRICULE\n         MVC   SCRBOX,PRGBXNO          MOVE BOX NUMBER\n         MVC   SCRBLD,PRGBDNO          MOVE BUILDING\n         MVC   SCRTEL,PRGPHNO          MOVE PHONE NUMBER\n         MVC   SCRSERV,PRGSVNO         MOVE SERVICE\n         DROP  R3\n         LA    R1,PECRAN               DISPLAY\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         CLI   SCRFILL,C'U'            USERID CALL ?\n         BNE   TESTASK                 NO\n         LTR   R15,R15\n         BNZ   LEAVE\n         MVC   RESPONSE,=CL7' '\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    SETARSP                 IF YES, ESCAPE FROM SUBR.\n         LTR   R1,R1                   NO TEXT ?\n         BZ    SETARSP                 YES\n         BCT   R1,*+L'*+6\n         MVC   RESPONSE(*-*),3(R15)\n         EX    R1,*-6\nSETARSP  LA    R1,RESPONSE\n         L     R2,4(R13)\n         ST    R1,24(R2)               PASS ADDRESS OF RESPONSE\n         XR    R15,R15\n         B     LEAVE\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nPECRAP   DC    A(LECRAP,ECRAP)\nPECRAN   DC    A(LECRAN,ECRAN)\nRETCD    DC    F'0'          RETURN CODE\nNZRD     DC    0F'0',CL8'ZREAD'\nPGMCHAR  DC    CL4' '        PROGR. NBR IN CHAR:\nAREAP    DC    (PRGLGTH)X'0' RECORD PROGRAMMER (SEE PRGDSECT)\nARGUMPRG DC    H'0'          PROGR NBR TO POINT IN FILE\nRESPONSE DC    CL7' '\n         SPACE 1\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nMSGPN1   DC    C'Programmer Number NOT Numeric or NOT 4 digits.'\nMSGPN2   DC    C'Programmer NOT FOUND in File.'\n         SPACE 1\n*--------------------------------------------------------------------*\n*        VARIABLE SCREEN DATA                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nPNF     $FS    TEXT='Number (4 numerics)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<   ',MF=L\nLPNF     EQU   *-PNF\nUSF     $FS    TEXT='USERID (7 char.max)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\nLUSF     EQU   *-USF         MUST MATCH VALUE OF 'LPNF'\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRANS D'OUTPUT                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRAP   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='PROGRAMMER    D I S P L A Y',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='===========================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='Enter Programmer Number (4 numerics)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRAPM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAP   EQU   *-ECRAP\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='PROGRAMMER    D I S P L A Y ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='===========================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,5),SF=(PROT),MF=L\n        $FS    TEXT='Programmer is invalidated if I --->',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRSI   $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(6,9),SF=(PROT),TEXT='Programmer Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRPGM  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,11),SF=(PROT),TEXT='Programmer Name :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRNOM  $FS    TEXT=(' ',40),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(9,17),SF=(PROT),TEXT='Matricola :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRMAT  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(11,8),SF=(PROT),TEXT='Listing Box Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRBOX  $FS    TEXT=(' ',3),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(13,11),SF=(PROT),TEXT='Building Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRBLD  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(15,14),SF=(PROT),TEXT='Phone Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRTEL  $FS    TEXT=(' ',9),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(17,19),SF=(PROT),TEXT='Service :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRSERV $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(22,1),SF=(PROT),MF=L\n        $FS    TEXT='Enter another Programmer ',MF=L\nSCRFILL  DC    (LPNF)X'0'\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(23,1),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT GEN\n        $AIRD  PRI=NO,SEC=YES,R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT20": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08\\x0f\\x00\\x90\\x08\\x0f\\x14\\x10\\x03X\\x03X\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-21T00:00:00", "modifydate": "1990-03-21T14:10:00", "lines": 856, "newlines": 856, "modlines": 0, "user": "SYSPAJA"}, "text": "AU20     TITLE '-- TSO-CP AUT20 --'\nAUT20    START 0\n         SPACE 1\n**********************************************************************\n*        THIS CP PERMITS TO VISUALIZE IN A TRANSACTIONNAL            *\n*        WAY THE ACCOUNTING FILE.                                    *\n*        THIS CP IS GIVEN TO SUPPORT GROUP.                          *\n*        THE PURPOSE OF THIS CP IS TO SHOW WHAT ARE THE              *\n*        AUTHORIZATIONS UNDER WHICH A USER CAN WORK.                 *\n*                                            M.SACRE  01 NOVEMBRE 84 *\n*                                        P.A.MOINIL  21 SEPTEMBRE 89 *\n**********************************************************************\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R10,R11,R12)\n         SPACE 1\n*------- CONTROL OF CALLER (USERID)\n         XR    R0,R0                   NO HARDCOPY\n         L     R15,=V(AUT98)\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   LEAVE                   BRANCH TO END OF CP\n         SPACE 1\n*--------------------------------------------------------------------*\n*        USERID AUTORISE A UTILISER CETTE CP.                        *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- ALLOCATION DYNAMIQUE DU FICHIER D'ACCOUNTING\n*        QUI SE TROUVE SOUS LA DD-NAME SYSACC\n         L     R1,=V(AUT98A)\n         MVC   DYNDSN(44),0(R1)        SET ACCOUNT FILE DS-NAME\n        $DYNALL DYNLIST                DYNAMIC ALLOC OF SYSACC\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERALL                   B ON ERROR ALLOC IF NOT ZERO\n        CALL   ZOPEN,(RETCD,XOPT),VL   OPEN FILE UNDER SYSACC DD\n         LTR   R15,R15                 IS RETURN CODE 0?\n         BNZ   ERRZOC                  IF NOT, ERROR AT OPEN\n         L     R1,=V(AUT99I)\n         MVC   0(4,R1),=V(AUT95)       SET PF-2 KEY ACTIVE\n         EJECT\n*--------------------------------------------------------------------*\n*        FICHIER D'ACCOUNTING BIEN OUVERT.                           *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- START PROCESSING.\nDEMINIT  LA    R1,PECRIN               INITIAL DEMAND\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         NOP   *+L'*+16                SWITCH ADVICE\n         OI    *-3,X'F0'               THIS WAY DONE JUST ONCE\n         MVC   OVRR(LPTIC),PTIC        CUT OUT THE ADVICE\n         MVC   PECRIN,=A(LECRIN)\n         MVI   ECRINM,C' '\n         MVC   ECRINM+1(L'ECRINM-1),ECRINM\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   SEEWHAT                 NO\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    FININER                 IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    FININER                 YES\n         MVC   RESPONSE(1),3(R15)\n         OI    RESPONSE,C' '           TRANSLATE LOWER CASE IN UPPER\n         CLI   RESPONSE,C'P'           IS RESPONSE = P ?\n         BE    INPROG                  IF YES, ACCESS BY PROG NBR\n         CLI   RESPONSE,C'U'           IS RESPONSE = U ?\n         BE    INUSID                  IF YES, ACCESS BY USERID\n         CLI   RESPONSE,C' '           IS RESPONSE = BLANK ?\n         BE    FININER                 IF YES, CLOSE FILE, END\n         MVC   ECRINM(L'MSGINV),MSGINV\n         MVC   ECRINM+L'MSGINV-5(1),RESPONSE\n         B     DEMINIT                 BACK TO DEMAND INITIAL\nSEEWHAT  CH    R15,=H'4'\n         BE    FININER                 END OF CP REQUESTED\n         B     CLSZR                   ELSE EXIT\n*------- DEMANDE LE NUMERO DE PROGRAMMEUR.\nINPROG   MVI   ECRAPM,C' '\n         MVC   ECRAPM+1(L'ECRAPM-1),ECRAPM\nASKDEM   LA    R1,PECRAP               ASK PGRMER NUMBER\n         L     R15,=V(AUT99)\n         BALR  R14,R15\nTESTASK  LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   FININER                 NO, END (ONLY 4)\n         MVI   ECRAPM,C' '\n         MVC   ECRAPM+1(L'ECRAPM-1),ECRAPM\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    DEMINIT                 IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    DEMINIT                 YES\n         MVC   RESPONSE(4),=CL40' '\n         BCT   R1,*+L'*+6\n         MVC   RESPONSE(*-*),3(R15)\n         EX    R1,*-6\n         LA    R0,4\n         LA    R1,RESPONSE+4\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRNUM\n         CLI   0(R1),C'9'\n         BH    WRNUM\n         BCT   R0,*-18\n         MVC   INFO+4(4),RESPONSE      MOVE PROGR. NUMBER ENTERED\n         MVC   USERID(L'USERID),=CL40' '  CLEAR USERID IN DISPLAY\n         MVC   SCRFILL(LPNF),PNF\n         B     PRPRGN\nWRNUM    CLC   RESPONSE(4),=CL40' '    IS RESPONSE BLANK ?\n         BE    DEMINIT                 IF YES, ESCAPE\n         MVC   ECRAPM(L'MSGPN1),MSGPN1 PGRMER NUMBER NOT NUMERIC\n         B     ASKDEM\n*------- DEMANDE LE USER-ID DU PROGRAMMEUR.\nINUSID   MVC   INFO(L'INFO),=CL40' '   ASK FOR USERID.\n        CALL   AUT90,(INFO),VL         ROUTINE RETURNS ACCT.NO/USERID\n         LTR   R15,R15\n         BNZ   FININER                 END OF CP\n         CLC   INFO+8(7),=CL40' '      ESCAPE?\n         BE    DEMINIT                 YES\n         MVC   USERID(L'USERID),INFO+8 MOVE USERID FOR DISPLAY\n         MVC   SCRFILL(LUSF),USF\n         SPACE 1\n*--------------------------------------------------------------------*\n*        ACCES DU FICHIER PAR LE NUMERO DE PROGRAMMEUR.              *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- CLEAR SCREEN\nPRPRGN   MVC   NMPR(L'NMPR),=CL40' '   CLEAR NAME IN DISPLAY\n         MVC   NMALT(L'NMALT),=CL40' '\n         LA    R6,INVA1                CLEAR OUTPUT FIELDS\n         LA    R7,AUT1\n         LA    R9,NDL\n         LA    R1,DX\nBCLCLEAR MVI   0(R6),C' '              CLEAR INVA1, INVA2,...\n         MVI   RESP1(R6),C' '          CLEAR RESP1, RESP2,...\n         MVI   INVP1(R6),C' '          CLEAR INVP1, INVP2,...\n         MVC   0(4,R7),=CL40' '        CLEAR AUT1, AUT2,...\n         ALR   R6,R1                   POINT TO NEXT ...\n         ALR   R7,R1\n         BCT   R9,BCLCLEAR             LOOP N... TIMES\n         MVC   ALARM(L'ALARM),=CL40' '\n*------- BOUCLE DE RECHERCHE DU PROGRAMMEUR DANS TOUTES\n*        LES AUTORISATIONS\n         LA    R6,INVA1                LOAD ADDR OF FLAGS\n         LA    R7,AUT1                 LOAD ADDR OF AUTH\n         LA    R5,NDL                  AUTH. N... LOOPS\n         PACK  DSD,INFO+4(4)           PACK PROGRAMMER NUMBER\n         CVB   R0,DSD                  CONVERT IN BINARY\n         STH   R0,POSIPGM              STORE NUMBER OF PGM IN BINARY\n         LNR   R0,R0                   CONVERT IN NEGATIVE\n         STH   R0,NEGAPGM              STORE IN NEGATIVE PROGRAMMER\n         LA    R2,AREAR                SET ADDRESSABILITY OF AUTH DSECT\n         USING AUTDSECT,R2\n         LA    R3,AREAP                SET ADDRESSABILITY OF PROG DSECT\n         USING PRGDSECT,R3\n         XC    ARGUMAUT,ARGUMAUT       RESET ARGUMENT\nLOOPAUT CALL   ZSEQR,(RETCD,AREAR,ARGUMAUT),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BM    DSPLAY                  IF NEGATIVE, END-OF-DATA\n         BP    ERRZR                   IF POSITIVE, DISPLAY Z... MSG\n         CLC   ARGUMAUT,=Y(NAUTNO)     IS IT YET AN AUTH. ?\n         BH    DSPLAY                  IF NOT, EXIT LOOP ALL AUTH. NO.\n*------- EXPLOITATION DU VECTEUR\n         CLC   AUTPMNO,POSIPGM         IS IT THE AUTH. RESPONSIBLE ?\n         BNE   *+L'*+4                 BRANCH IF NOT\n         MVI   RESP1(R6),C'R'          YES, SAY RESPONSIBLE\n         LA    R9,AUTPNO               ADDR VECTOR OF PGM NBR IN AUT\n         LA    R8,AUTNPNF              MAX NBR IN VECTOR\nLOOPNBR  CLC   0(L'AUTPNO,R9),POSIPGM  IS PROGR. IN AUTHORIZATION ?\n         BE    PRESENTP                IF YES, GO TO PRESENT POSITIVE\n         CLC   0(L'AUTPNO,R9),NEGAPGM  IS PROG IN AUT IN NEGATIVE ?\n         BNE   INCREMEN                IF NOT, GO TO INCREMENT\n*------- HERE, THE PROGRAMMER IS PRESENT IN NEGATIVE. THIS MEANS\n*        THAT IT IS INVALIDATED TEMPORALLY IN THIS AUTHORIZATION.\n         MVI   INVP1(R6),C'I'          MOVE FLAG 'INVALIDATED'\n*------- HERE, THE PROGRAMMER IS PRESENT IN POSITIVE\nPRESENTP LH    R15,AUTANO              AUTHORIZATION NUMBER\n         LTR   R15,R15                 IS AUTH NEGATIVE ?\n         BP    *+L'*+6                 IF NOT, DO NOT SET THE FLAG\n         MVI   0(R6),C'*'              IF YES, FLAG THE AUTH WITH *\n         LPR   R15,R15                 SET AUTH POSITIVE\n         CVD   R15,DSD                 CONVERT IN PACKED\n         UNPK  WCL4,DSD+5(3)           CONVERT IN EBCDIC\n         OI    WCL4+L'WCL4-1,C'0'      RESOLVE ZONING PROBLEM\n         MVC   0(4,R7),WCL4            MOVE AUT NBR\n         LA    R6,DX(R6)               JUMP TO NEXT FLAGS\n         LA    R7,DX(R7)               JUMP TO NEXT AUTH.\n         BCT   R5,*+L'*+10             LOOP UNTIL SCREEN FILLED\n         MVC   ALARM,=CL25'ALARM : Screen Overflow |'\n         B     DSPLAY\n         LA    R8,1                    STOP LOOP\nINCREMEN LA    R9,L'AUTPNO(R9)         JUMP TO NEXT PGM NBR IN VECTOR\n         BCT   R8,LOOPNBR              LOOP TO EXPLOITATION VECTEUR\n         B     LOOPAUT                 GO GET NEXT AUTH. NO.\n*------- DISPLAY INFORMATION FOUND FOR THIS PROGRAMMER\n*        RECHERCHE DU NOM DU PROGRAMMEUR POUR QUI ON FAIT LE DISPLAY\nDSPLAY   LH    R0,POSIPGM              RELOAD PGM NBR\n         AH    R0,=Y(NAUTNO+1)         ADD NO. OF AUT.\n         STH   R0,ARGUMPRG             STORE RESEARCH ARGUMENT\n        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TSTNF                   IF ZERO, RESPONS. NAME FOUND\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MSG\n         MVC   NMPR,MSG3               MOVE MESSAGE IN DISPLAY\n         B     OKNF+L'OKNF\nTSTNF    LH    R15,PRGPNO              LOAD PGM NUMBER\n         LTR   R15,R15                 TEST SIGN\n         BP    OKNF                    IF POSITIVE\n         MVC   NMPR,MSG4               MOVE MESSAGE IN DISPLAY\n         MVC   NMALT,PRGPNME           MOVE NAME IN DISPLAY FIELD\n         B     OKNF+L'OKNF\nOKNF     MVC   NMPR,PRGPNME            MOVE NAME IN DISPLAY FIELD\n         MVC   PGMNBR(L'PGMNBR),INFO+4 MOVE PROGR. NBR FOR DISPLAY\n         LA    R1,PECRAN               DISPLAY SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         MVC   ALARM(L'ALARM),=CL40' '\n         CLI   SCRFILL,C'U'            USERID CALL?\n         BNE   TESTASK                 NO\n         LTR   R15,R15\n         BNZ   FININER                 END OF CP\n         MVC   RESPONSE(7),=CL40' '\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    DEMINIT                 IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    DEMINIT                 YES\n         BCT   R1,*+L'*+6\n         MVC   RESPONSE(*-*),3(R15)\n         EX    R1,*-6\n         CLC   RESPONSE(7),=CL40' '\n         BE    DEMINIT                 ESCAPE\n         MVC   INFO(8),=CL40' '\n         OC    RESPONSE(7),=CL40' '    TRANSLATE LOWER CASE IN UPPER\n         MVC   INFO+8(7),RESPONSE      PASS NEW USERID\n         B     INUSID+L'INUSID\n         SPACE 1\n         DROP  R2,R3\n         EJECT\n*--------------------------------------------------------------------*\n*        ERREUR AU MOMENT DE L'ALLOCATION DU FICHIER D'ACCOUNTING.   *\n*--------------------------------------------------------------------*\n         SPACE 1\nERALL    STM   R15,R0,DSD\n        TPUT   ERROR1,L'ERROR1\n         UNPK  ERROR1C+8(9),DSD(5)\n         TR    ERROR1C+8(8),TRTAB-X'F0'\n         MVI   ERROR1C+16,C' '\n         UNPK  ERROR1C+22(9),DSD+4(5)\n         TR    ERROR1C+22(8),TRTAB-X'F0'\n         MVI   ERROR1C+30,C' '\n        TPUT   ERROR1C,L'ERROR1C\n         B     LEAVE\n         SPACE 1\n*--------------------------------------------------------------------*\n*        FIN DU TRAVAIL - SORTIE.                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nFININER  XR    R1,R1                   EXIT FULLSCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\nCLSZR   CALL   ZCLOSE,(RETCD),VL       CLOSE FILE UNDER SYSACC DD\n         LTR   R15,R15                 IS RETURN CODE 0?\n         BNZ   ERRZOC                  IF NOT, ERROR AT CLOSE\nFREACC   XC    DYNDSN,DYNDSN\n        $DYNALL DYNLIST                DYNAMIC DE-ALLOC OF SYSACC\nLEAVE   $XRET  CC=0\n         SPACE 1\n*--------------------------------------------------------------------*\n*        ERREUR A L'UTILISATION DU FICHIER D'ACCOUNTING              *\n*--------------------------------------------------------------------*\n         SPACE 1\nERRZOC   LR    R0,R15\n         XR    R1,R1\n        CALL   ZYDIAG\n         LA    R8,1(R15)\n         XR    R9,R9\n         BCTR  R15,0\n         IC    R9,0(R15)\n         BCTR  R9,0\n        TPUT   (R8),(R9)\n         B     FREACC\n         SPACE 1\nERRZR    LR    R0,R15\n         XR    R1,R1\n         LM    R2,R3,NZRD\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     CLSZR\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nPECRIN   DC    A(LECRIF,ECRIN)\nPECRAP   DC    A(LECRAP,ECRAP)\nPECRAN   DC    A(LECRAN,ECRAN)\nRETCD    DC    F'0'          RETURN CODE FROM Z... ROUTINES\nXOPT     DC    C'ONLY'       OPTION FOR Z... ROUTINES\nNZRD     DC    0F'0',CL8'ZREAD'\nAREAR    DC    (AUTLGTH)X'0' WORKA FOR READ FILE, RECORD AUTHOR.\nAREAP    DC    (PRGLGTH)X'0' WORKA FOR READ FILE, RECORD PROGRAMMER\nARGUMAUT DC    H'0'          AUTORIZATION NUMBER TO CHAIN IN FILE\nARGUMPRG DC    H'0'          PROGRAMMER NUMBER TO CHAIN IN FILE\nPOSIPGM  DC    H'0'          PROGRAMMER NUMBER IN BINARY POSITIVE\nNEGAPGM  DC    H'0'          PROGRAMMER NUMBER IN BINARY NEGATIVE\nWCL4     DC    CL4' '\nRESPONSE DC    CL7' '\nINFO     DC    CL15' '\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION PARAMETER LIST                           *\n*--------------------------------------------------------------------*\n         SPACE 1\nDYNLIST  DC    C'SYSACC  '\nDYNDSN   DC    XL44'0'\n         DC    CL8' '        MEMBER NAME\n         DC    CL8' '        PASSWORD\n         DC    CL8'SHR'      STATUS\n         DC    CL256' '      FILLER\n         DC    CL85' '       FILLER\n         SPACE 1\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nERROR1   DC    C'*** ACCOUNT file ALLOC error *** '\nERROR1C  DC    C'    R15=........ - R0=........ - AUT20 '\nMSGINV   DC    C'Unknown option selected :   ???'\nMSGPN1   DC    C'Programmer Number NOT Numeric or NOT 4 digits.'\nMSG1     DC    CL40'Responsible Number NOT FOUND in file.'\nMSG2     DC    CL40'Resp. Number REC INVALIDATED in file.'\nMSG3     DC    CL40'Programmer Name NOT FOUND in file.'\nMSG4     DC    CL40'Prog. Number REC INVALIDATED in file.'\nTRTAB    DC    C'0123456789ABCDEF'\n         SPACE 1\n*--------------------------------------------------------------------*\n*        VARIABLE SCREEN DATA                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nPNF     $FS    TEXT='Number (4 numerics)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<   ',MF=L\nLPNF     EQU   *-PNF\nUSF     $FS    TEXT='USERID (7 char.max)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\nLUSF     EQU   *-USF         MUST MATCH VALUE OF 'LPNF'\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRANS D'OUTPUT                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRIN   $FS    CC=W,WCC=(AL,KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATIONS  D I S P L A Y',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='You can display Authorizations for a Userid',MF=L\n        $FS    SBA=(6,42),SF=(PROT),MF=L\n        $FS    TEXT='or a Programmer Number',MF=L\n        $FS    SBA=(9,11),TEXT='Enter U or P',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(10,16),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(11,10),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-1',MF=L\n        $FS    SF=(PROT),TEXT='to view ',MF=L\n        $FS    TEXT='Authorizations/Programmers ',MF=L\n        $FS    TEXT='MANAGEMENT Rules Summary',MF=L\n        $FS    SBA=(12,10),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-2',MF=L\n        $FS    SF=(PROT),TEXT='to view ',MF=L\n        $FS    TEXT='the current Accounting data-set status',MF=L\n        $FS    SBA=(14,1),SF=(PROT,INT),MF=L\nECRINM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\nLECRIN   EQU   (*-ECRIN)+LPTIC\nOVRR    $FS    SBA=(20,1),SF=(PROT,INT),RA=(20,80,-),MF=L\n        $FS    SBA=(21,2),TEXT='Remark :',MF=L\n        $FS    SF=(PROT),TEXT='if desired, you can also enter ',MF=L\n        $FS    TEXT='directly in this process typing',MF=L\n        $FS    SBA=(22,11),TEXT='the TSO-command',MF=L\n        $FS    SF=(PROT,INT),TEXT='AUT20',MF=L\n        $FS    SF=(PROT),TEXT='at any time in your session.',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),RA=(23,80,-),MF=L\n        PRINT  OFF\n        $FS    SBA=(24,1),SF=(PROT,INT),TEXT='WELCOME',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='to this up-grade CP implemented by ',MF=L\n        $FS    TEXT='MOINIL P.A. ... your wizard |',MF=L\n        PRINT  ON\nPTIC    $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLPTIC    EQU   *-PTIC\nLECRIF   EQU   *-ECRIN\n         SPACE 1\nECRAP   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='PROGRAMMER      N U M B E R',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='===========================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='Enter Programmer Number (4 numerics)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRAPM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAP   EQU   *-ECRAP\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,21),SF=(PROT,INT),MF=L\n        $FS    TEXT='DISPLAY AUTHORIZATION NUMBER(S) FOR :',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,21),SF=(PROT,INT),MF=L\n        $FS    TEXT='=====================================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,5),SF=(PROT),TEXT='Programmer number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nPGMNBR  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,35),SF=(PROT,INT),MF=L\nUSERID  $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,50),SF=(PROT,INT),MF=L\nALARM   $FS    TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,18),SF=(PROT),TEXT='Name :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nNMPR    $FS    TEXT=(' ',40),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(6,25),SF=(PROT),MF=L\nNMALT   $FS    TEXT=(' ',40),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,5),SF=(PROT),TEXT='Flags  Aut.',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,25),SF=(PROT),TEXT='Flags  Aut.',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,45),SF=(PROT),TEXT='Flags  Aut.',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,65),SF=(PROT),TEXT='Flags  Aut.',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,5),SF=(PROT),TEXT='- - -  ----',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,25),SF=(PROT),TEXT='- - -  ----',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,45),SF=(PROT),TEXT='- - -  ----',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,65),SF=(PROT),TEXT='- - -  ----',MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 01 -*\nSX       EQU   *\n        $FS    SBA=(9,5),SF=(PROT,INT),MF=L\nINVA1   $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),MF=L\nRESP1    EQU   *-INVA1\n        $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),MF=L\nINVP1    EQU   *-INVA1\n        $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),MF=L\nAUT1    $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\nDX       EQU   *-SX\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 02 -*\n        $FS    SBA=(9,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 03 -*\n        $FS    SBA=(9,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 04 -*\n        $FS    SBA=(9,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 05 -*\n        $FS    SBA=(10,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 06 -*\n        $FS    SBA=(10,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 07 -*\n        $FS    SBA=(10,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 08 -*\n        $FS    SBA=(10,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 09 -*\n        $FS    SBA=(11,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 10 -*\n        $FS    SBA=(11,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 11 -*\n        $FS    SBA=(11,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 12 -*\n        $FS    SBA=(11,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 13 -*\n        $FS    SBA=(12,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 14 -*\n        $FS    SBA=(12,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 15 -*\n        $FS    SBA=(12,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 16 -*\n        $FS    SBA=(12,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 17 -*\n        $FS    SBA=(13,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 18 -*\n        $FS    SBA=(13,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 19 -*\n        $FS    SBA=(13,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 20 -*\n        $FS    SBA=(13,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 21 -*\n        $FS    SBA=(14,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 22 -*\n        $FS    SBA=(14,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 23 -*\n        $FS    SBA=(14,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 24 -*\n        $FS    SBA=(14,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 25 -*\n        $FS    SBA=(15,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 26 -*\n        $FS    SBA=(15,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 27 -*\n        $FS    SBA=(15,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 28 -*\n        $FS    SBA=(15,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 29 -*\n        $FS    SBA=(16,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 30 -*\n        $FS    SBA=(16,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 31 -*\n        $FS    SBA=(16,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 32 -*\n        $FS    SBA=(16,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 33 -*\n        $FS    SBA=(17,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 34 -*\n        $FS    SBA=(17,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 35 -*\n        $FS    SBA=(17,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 36 -*\n        $FS    SBA=(17,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 37 -*\n        $FS    SBA=(18,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 38 -*\n        $FS    SBA=(18,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 39 -*\n        $FS    SBA=(18,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 40 -*\n        $FS    SBA=(18,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 41 -*\n        $FS    SBA=(19,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 42 -*\n        $FS    SBA=(19,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 43 -*\n        $FS    SBA=(19,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 44 -*\n        $FS    SBA=(19,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 45 -*\n        $FS    SBA=(20,5),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 46 -*\n        $FS    SBA=(20,25),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 47 -*\n        $FS    SBA=(20,45),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 48 -*\n        $FS    SBA=(20,65),SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT,INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\nNDL      EQU   (*-SX)/DX               NO. OF AUT. ON SCREEN DISPLAY\n        $FS    SBA=(21,1),SF=(PROT,INT),TEXT='Flags : *',MF=L\n        $FS    SF=(PROT),TEXT='= Invalid Auth. -',MF=L\n        $FS    SF=(PROT,INT),TEXT='R',MF=L\n        $FS    SF=(PROT),TEXT='= Responsible Progr. -',MF=L\n        $FS    SF=(PROT,INT),TEXT='I',MF=L\n        $FS    SF=(PROT),TEXT='= Invalid Progr.',MF=L\n        $FS    SBA=(22,1),SF=(PROT),MF=L\n        $FS    TEXT='Enter another Programmer ',MF=L\nSCRFILL  DC    (LPNF)X'0'\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(23,1),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT GEN\n        $AIRD  SEC=YES,R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT30": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08\\x7f\\x00\\x90\\x08\\x7f\\x16\\t\\x07|\\x07|\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-28T00:00:00", "modifydate": "1990-03-28T16:09:00", "lines": 1916, "newlines": 1916, "modlines": 0, "user": "SYSPAJA"}, "text": "AU30     TITLE '-- TSO-CP AUT30 --'\nAUT30    START 0\n         SPACE 1\n**********************************************************************\n*        THIS CP PERMITS TO UPDATE IN A TRANSACTIONNAL               *\n*        WAY THE ACCOUNTING FILE.                                    *\n*                                             M.SACRE  01 OCTOBRE 84 *\n*                                          P.A.MOINIL  03 OCTOBRE 89 *\n* REMARK : THE SCREEN DISPLAY IS ORGANIZED ON 25 LINES OF DATA FOR   *\n*          25 NUMBERS OF PROGRAMMERS NO. FIELDS.                     *\nNPL      EQU   25 = AUTNPNF IN AUTDSECT                              *\n*          IF AUTNPNF IS REDEFINED HIGHER, TAKE CARE THAT THEN YOU   *\n*          MUST CHANGE THE SCREEN DISPLAY LOGIC AND ORGANIZATION.    *\n**********************************************************************\n         SPACE 1\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV10     EQU   10        REDUCED SERVICES LEVEL\nLV5      EQU   5         DISPLAY SERVICES LEVEL\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R10,R11,R12)\n         SPACE 1\n*------- CONTROL OF CALLER (USERID)\n         L     R15,=V(AUT98T)\n         MVI   1(R15),LV5              SET REQUESTED AUTHORITY LEVEL\n         BALR  R0,0                    SAY HARDCOPY\n         L     R15,=V(AUT98)\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   LEAVE                   BRANCH TO END OF CP\n         SPACE 1\n*--------------------------------------------------------------------*\n*        USERID AUTORISE A UTILISER CETTE CP.                        *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- ALLOCATION DYNAMIQUE DU FICHIER D'ACCOUNTING\n*        QUI SE TROUVE SOUS LA DD-NAME SYSACC\n         L     R1,=V(AUT98A)\n         MVC   DYNDSN(44),0(R1)        SET ACCOUNT FILE DS-NAME\n        $DYNALL DYNLIST                DYNAMIC ALLOC OF SYSACC\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERALL                   B ON ERROR ALLOC IF NOT ZERO\n        CALL   ZOPEN,(RETCD),VL        OPEN FILE UNDER SYSACC DD\n         LTR   R15,R15                 IS RETURN CODE 0?\n         BNZ   ERRZOC                  IF NOT, ERROR AT OPEN\n         L     R1,=V(AUT99I)\n         MVC   0(4,R1),=V(AUT95)       SET PF-2 KEY ACTIVE\n         EJECT\n*--------------------------------------------------------------------*\n*        FICHIER D'ACCOUNTING BIEN OUVERT.                           *\n*--------------------------------------------------------------------*\n         SPACE 1\nDEMINIT  LA    R1,PECRIN               INITIAL DEMAND\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         NOP   *+L'*+16                SWITCH ADVICE\n         OI    *-3,X'F0'               THIS WAY DONE JUST ONCE\n         MVC   OVRR(LPTIC),PTIC        CUT OUT THE ADVICE\n         MVC   PECRIN,=A(LECRIN)\n         MVI   ECRINM,C' '\n         MVC   ECRINM+1(L'ECRINM-1),ECRINM\n         MVC   ECRINS,ECRINM\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   SEEWHAT                 NO\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    FININER                 IF YES, EXIT\n         LTR   R1,R1                   NO TEXT ?\n         BZ    FININER                 YES, EXIT\n         MVC   RESPONSE(1),3(R15)\n         OI    RESPONSE,C' '           TRANSLATE LOWER CASE IN UPPER\n         CLI   RESPONSE,C'A'           IS RESPONSE = A ?\n         BE    AUTHOR                  IF YES, GO TO AUTHOR\n         CLI   RESPONSE,C'P'           IS RESPONSE = P ?\n         BE    INPROG                  IF YES, ACCESS BY PROG NBR\n         CLI   RESPONSE,C' '           IS RESPONSE = BLANK ?\n         BE    FININER                 IF YES, CLOSE FILE, END\n         MVC   ECRINM(L'MSGINV),MSGINV\n         MVC   ECRINM+L'MSGINV-5(1),RESPONSE\n         B     DEMINIT                 BACK TO DEMAND INITIAL\nSEEWHAT  CH    R15,=H'4'\n         BE    FININER                 END OF CP REQUESTED\n         B     CLSZR                   ELSE EXIT\n         EJECT\n*--------------------------------------------------------------------*\n*        ACCES DU FICHIER PAR LE NUMERO D'AUTORISATION               *\n*--------------------------------------------------------------------*\n         SPACE 1\nAUTHOR   MVI   ECRAUM,C' '\n         MVC   ECRAUM+1(L'ECRAUM-1),ECRAUM\nREQAUT   LA    R1,PECRAU               ASK AUTHOR. NBRE\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   FININER                 NO, CLOSE FILE, END (ONLY 4)\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    DEMINIT                 IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    DEMINIT                 YES, ESCAPE\n         MVC   WCL4(4),=CL25' '\n         BCT   R1,*+L'*+6\n         MVC   WCL4(*-*),3(R15)\n         EX    R1,*-6\nTESTAUT  CLC   WCL4(4),=CL25' '        IS RESPONSE = BLANK ?\n         BE    DEMINIT                 YES, ESCAPE\n         MVI   ECRAUM,C' '\n         MVC   ECRAUM+1(L'ECRAUM-1),ECRAUM\n         LA    R0,L'WCL4\n         LA    R1,WCL4+L'WCL4\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRAUTH\n         CLI   0(R1),C'9'\n         BH    WRAUTH\n         BCT   R0,*-18\n*------- ICI, NOUS SAVONS QUE L'INPUT EST NUMERIQUE\n         PACK  DSD,WCL4                PACK AUTHOR. NUMBER\n         CVB   R5,DSD                  CONVERT IN BINARY\n         STH   R5,ARGUMAUT             STORE IN ARGUM. AUTHORIZ.\n        CALL   ZREAD,(RETCD,ARGUMAUT,AREAR),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    FNDRC                   IF ZERO, RECORD FOUND\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BE    ASKCREA                 IF YES, GO CREATE IT\n         B     ERRZR                   IF NOT, GO DISPLAY Z... MESSAGE\nWRAUTH   MVC   ECRAUM(L'MSGAN1),MSGAN1 AUTHORIZATION NOT NUMERIC\n         B     REQAUT                  BRANCH TO ASK AUTHOR.\n         EJECT\n*--------------------------------------------------------------------*\n*        AUTH. NOT FOUND, ASK IF HE WANTS TO CREATE IT               *\n*--------------------------------------------------------------------*\n         SPACE 1\nASKCREA  LA    R1,PECRAW               ASK IF CREATING AUTHOR. NBRE\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   FININER                 NO, CLOSE FILE, END (ONLY 4)\n         MVI   ECRAWM,C' '\n         MVC   ECRAWM+1(L'ECRAWM-1),ECRAWM\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    REQAUT                  IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    REQAUT                  YES, ESCAPE\n         MVC   RESPONSE(1),3(R15)\n         OI    RESPONSE,C' '           TRANSLATE LOWER CASE IN UPPER\n         CLI   RESPONSE,C'Y'           IS RESPONSE = Y ?\n         BE    EXCREA                  IF YES, CREATE NEW AUTH.\n         CLI   RESPONSE,C' '           IS RESPONSE BLANK ?\n         BE    REQAUT                  IF YES, ESCAPE\n         MVC   ECRAWM(L'MSGRSP),MSGRSP IF NOT, RE-ASK\n         MVC   ECRAWM+L'MSGRSP-5(1),RESPONSE\n         B     ASKCREA\n         EJECT\n*--------------------------------------------------------------------*\n*        CALL SUBROUTINE TO CREATE A NEW AUTHORIZATION.              *\n*--------------------------------------------------------------------*\n         SPACE 1\nEXCREA  CALL   AUT31,(WCL4,ARGUMAUT),VL\n         LTR   R15,R15\n         BNZ   WRCREA                  ABNORMAL COMPLETION\n         BCTR  R1,0                    NORMAL COMPLETION, SET MSG\n         IC    R15,0(R1)\n         BCT   R15,*+L'*+6\n         MVC   ECRAUM(*-*),1(R1)\n         EX    R15,*-6\n         B     REQAUT\nWRCREA   CH    R15,=H'4'\n         BE    FININER                 END OF CP REQUESTED\n         B     CLSZR                   SEVERE ERROR\n         SPACE 1\n*--------------------------------------------------------------------*\n*        ACCES DU FICHIER PAR LE NUMERO DE PROGRAMMEUR.              *\n*--------------------------------------------------------------------*\n         SPACE 1\nINPROG  CALL   AUT32                   ACCESS FILE BY PROGR. NUMBER\n         LTR   R15,R15\n         BNZ   WRINPROG                ABNORMAL COMPLETION\n         LTR   R1,R1                   NORMAL COMPLETION\n         BNP   DEMINIT\n         BCTR  R1,0                    SET MESSAGE\n         IC    R15,0(R1)\n         BCT   R15,*+L'*+6\n         MVC   ECRINM(*-*),1(R1)\n         EX    R15,*-6\n         B     DEMINIT\nWRINPROG CH    R15,=H'4'               ABNORMAL COMPLETION\n         BE    FININER                 END OF CP REQUESTED\n         B     CLSZR                   SEVERE ERROR\n         EJECT\n*--------------------------------------------------------------------*\n*        TROUVE L'AUTORISATION DANS LE FICHIER                       *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- PREPARATION DE L'ECRAN D'OUTPUT\nFNDRC    MVC   AREARO(AUTLGTH),AREAR   SET FOR HARDCOPY\n         OI    SWINU+1,X'F0'           SET SWITCH TO NO UPDATE(S)\n         LA    R2,AREAR                SET ADRESSABILITY OF AUTH DSECT\n         USING AUTDSECT,R2\n         LA    R3,AREAP                SET ADRESSABILITY OF PROG DSECT\n         USING PRGDSECT,R3\n         LH    R5,AUTANO               LOAD AUTHORIZATION NUMBER\n         MVI   SCRSI,C' '              CLEAR OUTPUT FIELD\n         LTR   R5,R5                   SET CONDITION CODE\n         BNM   *+L'*+4                 IF NOT MINUS, RECORD OK\n*------- ICI, LE RECORD TROUVE A ETE SUPPRIME. ON L'A FAIT\n*        EN RENDANT LE NUMERO D'AUTHORISATION NEGATIF.\n*        CELA VEUT DIRE QU'IL A ETE INVALIDE MAIS NON SUPPRIME |||\n         MVI   SCRSI,C'I'              PUT I IN OUTPUT FIELD\n         MVC   INSI,SCRSI              RETAIN INITIAL VALUE\n         MVC   SCRAUT,WCL4             MOVE AUTH NUMBER FOR DISPLAY\n         MVC   SCRFICH,AUTACNO         MOVE FICHE PROGRAMME\n         MVC   INFICH,SCRFICH          RETAIN INITIAL VALUE\n*------- CONVERT NUMBER OF PROGR. RESPONSABLE\n         LH    R5,AUTPMNO              PROGRAMMER RESPONS.\n         CVD   R5,DSD                  CONVERT IN DECIMAL\n         UNPK  SCRPR,DSD+5(3)          CONVERT IN EBCDIC\n         OI    SCRPR+L'SCRPR-1,C'0'    SET LAST ZONING\n         MVC   INPR,SCRPR              RETAIN INITIAL VALUE\n*------- CONVERT DATE DE DEBUT FOR DISPLAY\n         XR    R5,R5\n         ICM   R5,B'0111',AUTVSD\n         CL    R5,=F'99999'            WHICH FORMAT?\n         BH    *+L'*+4                 NEW FORMAT\n         AL    R5,=F'1900000'          OLD FORMAT, ADJUST IT\n         CVD   R5,DSD                  CONVERT IN PACKED\n         UNPK  WCL7,DSD+4(4)           CONVERT IN CHAR YYYYDDD\n         OI    WCL7+L'WCL7-1,C'0'      SET LAST ZONING AFTER UNPK\n         MVC   INDTEI,WCL7             RETAIN INITIAL VALUE\nCALLDT  $GFDATE ,,MDY,WCL7\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    NORMC\n         CLC   WCL7+4(3),=CL3'001'     IS DATE LOWER 001 ?\n         BNL   *+L'*+16                IF NOT, DO NEXT TEST\n         MVC   MSG1+30(7),WCL7         SAVE INVALID DATE\n         MVC   WCL7+4(3),=CL3'001'     FORCE DATE\n         B     SETDT\n         CLC   WCL7+4(3),=CL3'365'     IS DATE GREATER 365 ?\n         BNH   SDERR                   IF NOT, GO TO ERROR\n         MVC   MSG1+30(7),WCL7         SAVE INVALID DATE\n         MVC   WCL7+4(3),=CL3'365'     FORCE DATE\nSETDT    MVC   MSG1(30),=CL30'Note : DATE de DEBUT invalide'\n         NI    SWINU+1,X'0F'           SET SWITCH TO UPDATE(S)\n         B     CALLDT\n*------- DISPLAY DU RETURN CODE DE GFDATE IF NOT ZERO\nSDERR    CVD   R15,DSD\n         UNPK  WCL4,DSD+5(3)\n         OI    WCL4+L'WCL4-1,C'0'\n         MVC   MSGGDTE+30(4),WCL4\n         MVC   MSGGDTE+19(7),WCL7      DATE TO TRANSFORM YYYYDDD\n         LA    R1,MSGGDTE\n         LM    R2,R3,NGDT\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     CLSZR\nNORMC    MVC   OUDTEI,WCL7             GFDATE RC = 0, SET SERIAL DATE\n         MVC   SCRDTEI(2),MDY+2        MOVE DAYS\n         MVI   SCRDTEI+2,C'/'          SEPARATOR\n         MVC   SCRDTEI+3(2),MDY        MOVE MONTH\n         MVI   SCRDTEI+5,C'/'          SEPARATOR\n         MVC   SCRDTEI+6(4),MDY+4      MOVE YEAR\n*------- CONVERT DATE DE FIN FOR DISPLAY\n         XR    R5,R5\n         ICM   R5,B'0111',AUTVED\n         CL    R5,=F'99999'            WHICH FORMAT?\n         BH    *+L'*+4                 NEW FORMAT\n         AL    R5,=F'1900000'          OLD FORMAT, ADJUST IT\n         CVD   R5,DSD                  CONVERT IN PACKED\n         UNPK  WCL7,DSD+4(4)           CONVERT IN CHAR YYYYDDD\n         OI    WCL7+L'WCL7-1,C'0'      SET LAST ZONING AFTER UNPK\n         MVC   INDTEO,WCL7             RETAIN INITIAL VALUE\nCALLGD  $GFDATE ,,MDY,WCL7\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    NORMR\n         CLC   WCL7+2(3),=CL3'001'     IS DATE LOWER 001 ?\n         BNL   *+L'*+16                IF NOT, DO NEXT TEST\n         MVC   MSG2+30(7),WCL7         SAVE INVALID DATE\n         MVC   WCL7+2(3),=CL3'001'     FORCE DATE\n         B     SETGD\n         CLC   WCL7+2(3),=CL3'365'     IS DATE GREATER 365 ?\n         BNH   SDERR                   IF NOT, GO TO ERROR\n         MVC   MSG2+30(7),WCL7         SAVE INVALID DATE\n         MVC   WCL7+2(3),=CL3'365'     FORCE DATE\nSETGD    MVC   MSG2(30),=CL30'Note : DATE de FIN invalide'\n         NI    SWINU+1,X'0F'           SET SWITCH TO UPDATE(S)\n         B     CALLGD\nNORMR    MVC   OUDTEO,WCL7             GFDATE RC = 0, SET SERIAL DATE\n         MVC   SCRDTEO(2),MDY+2        MOVE DAYS\n         MVI   SCRDTEO+2,C'/'          SEPARATOR\n         MVC   SCRDTEO+3(2),MDY        MOVE MONTH\n         MVI   SCRDTEO+5,C'/'          SEPARATOR\n         MVC   SCRDTEO+6(4),MDY+4      MOVE YEAR\n         CLC   MSG1(4),=CL25' '\n         BNE   CNVNPG\n         CLC   MSG2(4),=CL25' '\n         BNE   CNVNPG\n         MVC   WCL16(4),SCRDTEI+6      CONTROL START-END DATE\n         MVC   WCL16+4(2),SCRDTEI+3\n         MVC   WCL16+6(2),SCRDTEI\n         MVC   WCL16+8(4),SCRDTEO+6\n         MVC   WCL16+12(2),SCRDTEO+3\n         MVC   WCL16+14(2),SCRDTEO\n         CLC   WCL16(8),WCL16+8\n         BNH   CNVNPG\n         MVC   MSG1(35),=CL35'DATE de DEBUT d!passe DATE de FIN'\n         NI    SWINU+1,X'0F'           SET SWITCH TO UPDATE(S)\n*------- CONVERT NUMBERS OF PROGR. FOR THIS AUTHORIZATION.\nCNVNPG   LA    R5,AUTPNO               ADDRESS OF BEGINNING OF LIST\n         LA    R6,NPL                  NBR OF PROGRAMMER IN LIST\n         LA    R8,VWORK                WORKING VECTOR\n         LA    R9,NAME1                PROGRAMMER'S NAME CORRESPONDING\n*------- IF PGM NBR < 0 PUT A 'I' IN CORRESPONDING FIELD IN VECTOR\nLOOP     LH    R7,0(R5)                LOAD PROGR. NUMBER\n         LTR   R7,R7                   TEST SIGN\n         BZ    INCRMN                  IF ZERO, JUMP THIS FIELD\n         BM    *+L'*+6\n         LNR   R14,R7                  IF POSITIVE, CREATE NEGATIVE\n         B     *+L'*+2\n         LPR   R14,R7                  IF NEGATIVE, CREATE POSITIVE\n         LA    R15,AUTPNO              SCAN TO ELIMINE DOUBLE\nSCDBLE   CLR   R5,R15                  SCAN ENDED ?\n         BE    HNDLIT                  YES\n         CH    R7,0(R15)               NO, SEE IF MATCH\n         BE    *+L'*+16\n         CH    R14,0(R15)\n         BE    *+L'*+8\n         LA    R15,L'AUTPNO(R15)\n         B     SCDBLE\n         NI    SWINU+1,X'0F'           SET SWITCH TO UPDATE(S)\n         B     INCRMN\nHNDLIT   LTR   R14,R7                  TEST SIGN AGAIN\n         BM    INVLD                   IF NEGATIF, HAS BEEN DELETED\n         AH    R14,=Y(NAUTNO+1)        ADD NO. OF AUT. AT KEY\n         STH   R14,ARGUMPRG            STORE KEY IN ARGUM.PROGRAM.\n        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TSTPRGN                 IF ZERO, FOUND PROG'S NAME\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MESSAGE\n         MVC   0(25,R9),MSGERR1        MSG INSTEAD OF NAME\n         MVI   4(R8),C'M'              SAY MSG INSTEAD OF NAME\n         B     DOCNV\nTSTPRGN  LH    R15,PRGPNO              LOAD PROGRAMMER NUMBER\n         LTR   R15,R15                 TEST SIGN\n         BP    OKPRGNM                 IF POSITIVE, FOUND PROG'S NAME\n*------- CAS OU LE PROGRAMMER NUMBER EST NEGATIF.\n*        CELA VEUT DIRE QU'IL A ETE SUPPRIME.\n*        ON MET 'I' DANS LA CASE CORRESPONDANTE DU VECTEUR\n         MVC   0(25,R9),MSGERR2        MSG INSTEAD OF NAME\n         B     SETINV\nINVLD    LPR   R7,R7                   CONVERT IN POSITIVE\n         MVC   0(25,R9),MSGERR3        MSG INSTEAD OF NAME\nSETINV   MVI   4(R8),C'I'              BECAUSE WAS NEGATIVE\n         B     DOCNV\nOKPRGNM  MVC   0(25,R9),PRGPNME        MOVE NAME IN VECTOR\n*------- JUMP TO NEXT RECORD IN VECTORS\nDOCNV    CVD   R7,DSD                  CONVERT IN PACKED\n         UNPK  0(4,R8),DSD+5(3)        CONVERT IN CHAR IN VECTOR\n         OI    3(R8),C'0'              SET LAST ZONING AFTER UNPK\n         LA    R9,DX(R9)               JUMP TO NEXT FREE NAME\n         LA    R8,L'VWORK(R8)          JUMP TO NEXT FREE FIELD\nINCRMN   LA    R5,L'AUTPNO(R5)         JUMP TO NEXT PROGRAMMER\n         BCT   R6,LOOP                 LOOP MAX N... TIMES\n*------- MOVE ALL PGM NUMBERS AND FLAGS FOR DISPLAY\n         LA    R1,DX\n         LA    R4,NPL                  PROGRAMMERS BY AUTH.\n         LA    R8,VWORK                WORKING VECTOR\n         LA    R9,NUM1                 FIELD IN ECRAN\n         LA    R14,ASTER1              FIELD IN ECRAN\n         LA    R15,NATT1               FIELD IN ECRAN\nLVNU     MVC   0(4,R9),0(R8)           MOVE NUM FROM VECTOR IN ECRAN\n         CLI   4(R8),C' '              MSG IN NAME?\n         BE    LVINS                   NO\n         MVC   0(L'NATT1,R15),ATTNI    SET INTENSIVE DISPLAY\n         CLI   4(R8),C'M'              WAS MSG MARKER?\n         BNE   LVINS                   NO\n         MVI   4(R8),C' '              YES, RESET MSG MARKER\n         NI    SWINU+1,X'0F'           SET SWITCH TO UPDATE(S)\nLVINS    MVC   0(1,R14),4(R8)          MOVE FLAG FROM VECTOR IN ECRAN\n         LA    R8,L'VWORK(R8)          JUMP TO NEXT IN VECTOR\n         ALR   R9,R1                   JUMP TO NEXT NAME IN ECRAN\n         ALR   R14,R1                  JUMP TO NEXT NAME IN ECRAN\n         ALR   R15,R1\n         BCT   R4,LVNU                 LOOP N... TIMES\n*------- RETAIN ALL INITIAL VALUES FOR CONTROL\n         LA    R4,NPL                  PROGRAMMERS BY AUTH.\n         LA    R8,VWORK                WORKING VECTOR\n         LA    R9,VINIT                INITIAL VECTOR\nLVCPY    MVC   0(L'VINIT,R9),0(R8)\n         LA    R8,L'VWORK(R8)          JUMP TO NEXT\n         LA    R9,L'VINIT(R9)\n         BCT   R4,LVCPY                LOOP N... TIMES\n        $SORT  VINIT,NPL,L'VINIT,0,L'VINIT-1\n         EJECT\n*--------------------------------------------------------------------*\n*        DISPLAY PRIORITY INCREMENT/DECREMENT.                       *\n*--------------------------------------------------------------------*\n         SPACE 1\n         CLI   AUTPI,0\n         BE    *+L'*+10\n         MVC   SCRPI,AUTPI\n         B     *+L'*+4\n         MVI   SCRPI,C'4'\n         MVC   INPI,SCRPI              RETAIN INITIAL VALUE\n         SPACE 1\n*--------------------------------------------------------------------*\n*        RECHERCHE DU NOM DU PROG. RESPONSABLE DE L'AUTORISATION.    *\n*--------------------------------------------------------------------*\n*    NB. ALL RECORDS OF PROGRAMMER HAVE A KEY .GE. NO. OF AUT. + 1\n*        SO YOU MUST ADD NO.OF AUT. AT THE NBR YOU HAVE FOUND\n*        IN RECORD OF AUTHORIZATION TO GET THE RIGHT ADDRESS.\n         SPACE 1\n         LH    R5,AUTPMNO              LOAD NUMBER OF PROG RESP.\n         AH    R5,=Y(NAUTNO+1)         ADD NO. OF AUT. AT KEY\n         STH   R5,ARGUMRSP             STORE KEY IN ARGUMENT\n        CALL   ZREAD,(RETCD,ARGUMRSP,AREAP),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TSTPGRES                IF ZERO, FOUND PROG. RESP\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MESSAGE\n         MVC   SCRNOM,MSGPN1\n         B     SETMSG\nTSTPGRES LH    R15,PRGPNO              LOAD PROGRAMMER NUMBER\n         LTR   R15,R15                 TEST SIGN\n         BP    OKPRGRES                IF ZERO, FOUND PROG. RESP\n         MVC   SCRNOM,MSGPN2\nSETMSG   MVC   SCRNOA,ATTNI\n         NI    SWINU+1,X'0F'           SET SWITCH TO UPDATE(S)\n         B     SWINU\n*------- ICI, NOUS AVONS LE RECORD DU PROGRAMMEUR RESPONSABLE\nOKPRGRES MVC   SCRNOM,PRGPNME          MOVE RESP. NAME FOR DISPLAY\n         MVC   SCRNOA,ATTNP\n         EJECT\n*--------------------------------------------------------------------*\n*        DISPLAY ALL ABOUT THE AUTHORIZATION.                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nSWINU    B     *+L'*+8\n         NI    SWUPD+1,X'0F'           SET SWITCH TO UPDATE(S)\n         B     DSPLAY\n         OI    SWUPD+1,X'F0'           SET SWITCH TO NO UPDATE(S)\nDSPLAY   OI    SWCTL+1,X'F0'           SET SWITCH TO NO UPDATE(S)\n         LA    R1,PECRAN               DISPLAY SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   FININER                 NO, END CP (ONLY 4)\n         MVI   MSG1,C' '               CLEAR MESSAGE FIELDS\n         MVC   MSG1+1(L'MSG1-1),MSG1\n         MVC   MSG2,MSG1\n         MVI   ECRANM,C' '\n         MVC   ECRANM+1(L'ECRANM-1),ECRANM\n         L     R15,=V(AUT99R)          GET RESPONSE(S)\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BNZ   *+L'*+12                IF NOT, GO PROCESS\nSWUPD    B     NOUPDT                  ESCAPE IF NO UPDATE(S)\n         NI    SWCTL+1,X'0F'           SET SWITCH TO DO UPDATE(S)\n         B     STCTRL                  GO DO A FINAL CONTROL\n         NI    SWUPD+1,X'0F'           SET SWITCH TO UPDATE(S)\n         EJECT\n*--------------------------------------------------------------------*\n*        LECTURE DES CHAMPS ACCESSIBLES A LA MISE A JOUR.            *\n*--------------------------------------------------------------------*\n*\n*        DESCRIPTION DU BUFFER D'INPUT :\n*        -------------------------------\n*        LES CHAMPS SONT DANS L'INPUT AREA ET SONT DANS L'ORDRE\n*        SUIVANT S'ILS SONT TOUS PRESENTS (MODIFIES) :\n*         1 = FLAG DE SUPPRESSION, INVALIDATION DE L'AUTORISATION :\n*                  D OU I (CL1)\n*         2 = FICHE PROGRAMME (CL10)\n*         3 = DATE DE DEBUT DE VALIDITE DE L'AUTORISATION (CL8)\n*         4 = NUMERO DU PROGR. RESPONSABLE DE L'AUTORISATION (CL4)\n*         5 = INCREMENT/DECREMENT DE PRIORITE DE L'AUTORISATION (CL1)\n*         6 = DATE DE FIN DE VALIDITE DE L'AUTORISATION (CL8)\n*\n* (1)     7 = NUMERO DE PROGRAMMEUR POUR CETTE AUTORISATION (CL4)\n*         8 = FLAG SI D VEUT DIRE PROGR. SUPPRIME (CL1)\n*                  SI I VEUT DIRE PROGR. INVALIDE\n*\n* (2)     9 = NUMERO DE PROGRAMMEUR POUR CETTE AUTORISATION (CL4)\n*        10 = FLAG SI D VEUT DIRE PROGR. SUPPRIME (CL1)\n*                  SI I VEUT DIRE PROGR. INVALIDE\n*\n* ..... ETC POUR LES NUMEROS DE PROGRAMMEUR POSSIBLES.\n         SPACE 1\n*------- STORE AND TRANSLATE IN UPPER CASE\n*        ALL DATA INPUT FROM DISPLAY (SAVE)\n         CLC   0(3,R15),SBASI\n         BNE   NOTSI\n         MVI   SCRSI,C' '\n         LTR   R1,R1\n         BZ    *+L'*+6\n         OC    SCRSI(1),3(R15)         TRANSLATE LOWER CASE IN UPPER\n         CLI   SCRSI,C'D'              IS IT 'D' ?\n         BE    RDELET                  IF YES, GO TO DELETE RECORD\n         CLI   SCRSI,C'X'              IS IT 'X' ?\n         BNE   *+L'*+10                IF NOT, CONTINUE\n         MVC   ECRAUM(L'MSGUBYP),MSGUBYP  IF YES, ESCAPE\n         B     SETUPD\n         L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTSI    CLC   0(3,R15),SBAFICH\n         BNE   NOTFICH\n         LTR   R1,R1\n         BZ    FICHOK                  IGNORE IF CLEAR\n         MVC   SCRFICH(L'SCRFICH),=CL25' '\n         LA    R0,L'SCRFICH\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRFICH(*-*),3(R15)     TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\nFICHOK   L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFICH  CLC   0(3,R15),SBADTEI\n         BNE   NOTDTEI\n         LTR   R1,R1\n         BZ    DTEIOK                  IGNORE IF CLEAR\n         MVC   SCRDTEI(L'SCRDTEI),=CL25' '\n         LA    R0,L'SCRDTEI\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRDTEI(*-*),3(R15)     TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\nDTEIOK   L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTDTEI  CLC   0(3,R15),SBAPR\n         BNE   NOTPR\n         LTR   R1,R1\n         BZ    PROK                    IGNORE IF CLEAR\n         MVC   SCRPR(L'SCRPR),=CL25' '\n         LA    R0,L'SCRPR\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRPR(*-*),3(R15)       TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\nPROK     L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTPR    CLC   0(3,R15),SBAPI\n         BNE   NOTPI\n         L     R4,=V(AUT98T)\n         CLI   0(R4),LV10\n         BNH   NOTALL\n         LTR   R1,R1\n         BNZ   *+L'*+8\n         MVI   SCRPI,C'4'              SET DEFAULT\n         B     PIOK\n         MVC   SCRPI(L'SCRPI),3(R15)\n         CLI   SCRPI,C'0'              TEST IF NUMERIC\n         BL    *+L'*+8\n         CLI   SCRPI,C'9'\n         BNH   PIOK\n         MVC   MSG2(24),=CL24'Invalid Priority Number|'\n         B     NOTALL+L'NOTALL\nNOTALL   MVC   MSG2(33),=CL33'Sorry, you can''t change Priority|'\n         OI    SWCTL+1,X'F0'           SET SWITCH TO NO UPDATE(S)\nPIOK     L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTPI    CLC   0(3,R15),SBADTEO\n         BNE   NOTDTEO\n         LTR   R1,R1\n         BZ    DTEOOK                  IGNORE IF CLEAR\n         MVC   SCRDTEO(L'SCRDTEO),=CL25' '\n         LA    R0,L'SCRDTEO\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRDTEO(*-*),3(R15)     TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\nDTEOOK   L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTDTEO  LA    R4,SBAN1\n         LA    R5,NUM1\n         LA    R6,ASTER1\n         LA    R7,DX\n         LA    R8,NPL\n         LA    R9,NATT1\nSCANVT   MVC   DSD(L'NUM1),0(R5)       RETAIN IT IN CASE BLANKED\n         CLC   0(3,R15),0(R4)\n         BNE   NOTNUM\n         LTR   R1,R1\n         BZ    NUMOK                   IGNORE IF CLEAR\n         MVC   0(L'NUM1,R5),=CL25' '\n         MVC   0(L'NATT1,R9),ATTNP\n         LA    R0,L'NUM1\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    0(*-*,R5),3(R15)        TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\nNUMOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BNZ   WHATNX                  IF NOT, GO SEE WHAT NEXT\n         BAL   R14,CHKBLK              IF YES, ALL CHANGE RECEIVED\n         B     STCTRL\nWHATNX   CLC   0(3,R15),SBAA1(R4)\n         BE    GETAST\n         BAL   R14,CHKBLK\n         B     NOTAST\nNOTNUM   CLC   0(3,R15),SBAA1(R4)\n         BNE   NOTAST\nGETAST   MVI   0(R6),C' '\n         MVC   0(L'NATT1,R9),ATTNP\n         LTR   R1,R1\n         BZ    *+L'*+6\n         OC    0(1,R6),3(R15)          TRANSLATE LOWER IN UPPER\n         BAL   R14,CHKBLK\n         L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTAST   ALR   R4,R7\n         ALR   R5,R7\n         ALR   R6,R7\n         ALR   R9,R7\n         BCT   R8,SCANVT\n         MVC   ECRANM(L'ERRCTL0),ERRCTL0  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- LOCAL CHECK BLANKED ROUTINE (LINK = R14)\nCHKBLK   CLC   0(L'NUM1,R5),=CL25' '   IS IT BLANKED ?\n         BNER  R14                     OK IF NOT BLANK\n         CLI   0(R6),C'D'              IF BLANK, SEE IF DELETED\n         BE    CHKBLK1                 YES\n         MVC   0(L'NUM1,R5),DSD        NO, RESTORE IT\n         CLC   0(L'NUM1,R5),=CL25' '   CHECK AGAIN IF BLANK ?\n         BNER  R14                     OK IF NOT BLANK\nCHKBLK1  MVI   0(R6),C' '              FORCE RESET\n         MVC   0(L'NATT1,R9),ATTNP\n         BR    R14\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE ET VALIDATION DES DONNEES LUES SUR LE DISPLAY.     *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- CONTROLE DU PREMIER CARACTERE.\n*        VALIDE SI BLANC  OU 'I'\nSTCTRL   CLI   SCRSI,C' '              IS IT BLANK ?\n         BE    VALSI                   IF YES, IT IS VALID\n         CLI   SCRSI,C'I'              IF NO, IS IT 'I' ?\n         BE    VALSI                   IF YES, IT IS VALID\n*------- ICI, NOUS SAVONS QUE LE 1ER CARACTERE EST INVALIDE\n         MVC   ECRANM(L'ERRCTL1),ERRCTL1  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------ ICI, NOUS SAVONS QUE LE NUMERO DE FICHE PROGR. EST INVALIDE\nWRFICH   EQU   *\n*        MVC   ECRANM(L'ERRCTL2),ERRCTL2  ERROR MESSAGE\n*        B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- CONTROLE DU NUMERO DE LA FICHE PROGRAMME.\n*        VALIDE SI NUMERIQUE.\nVALSI    CLC   SCRFICH(L'SCRFICH),=CL25' '\n         BNE   *+L'*+10                OK, NOT BLANK\n         MVC   ECRANM(L'ERRCTLA),ERRCTLA  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*        LA    R0,L'SCRFICH\n*        LA    R1,SCRFICH+L'SCRFICH\n*        BCTR  R1,0\n*        CLI   0(R1),C'0'              TEST IF NUMERIC\n*        BL    WRFICH\n*        CLI   0(R1),C'9'\n*        BH    WRFICH\n*        BCT   R0,*-18\n         EJECT\n*--------------------------------------------------------------------*\n*        VALIDATION DE LA DATE DE DEBUT DE L'AUTORISATION.           *\n*--------------------------------------------------------------------*\n         SPACE 1\n         MVC   MDY(2),SCRDTEI+3        MOVE MM IN WORK FIELD\n         MVC   MDY+2(2),SCRDTEI        MOVE DD IN WORK FIELD\n         MVC   MDY+4(4),SCRDTEI+6      MOVE YYYY IN WORK FIELD\n         LA    R0,L'MDY\n         LA    R1,MDY+L'MDY\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRDTEI\n         CLI   0(R1),C'9'\n         BH    WRDTEI\n         BCT   R0,*-18\n*------- ICI NOUS SAVONS QUE LA DATE EST NUMERIQUE\n*        CONTROLE QU'ELLE EST BIEN DU FORMAT DD/MM/YYYY\n         LA    R15,SCRDTEI\n         BAL   R14,CTDELIM             GO CONTROL DELIMITERS\n         B     VALDTEI                 +0 - GO TO DATE IS VALID\n         B     ERRDTEI                 +4 - GO TO ERROR DATE\n*------- FORMAT DE LA DATE NON VALIDE. SLASH NON EN BONNE PLACE.\n         MVC   ECRANM(L'ERRCTL4),ERRCTL4  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- TRANSFORMATION A SERIAL DATE.\nVALDTEI $GSDATE MDY,WCL7\n         LTR   R15,R15\n         BZ    STDTEI\n*------- ICI, LA DATE DE DEBUT EST INVALIDE. VALEURS INVALIDES.\nERRDTEI  MVC   ECRANM(L'ERRCTL5),ERRCTL5  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------ ICI, NOUS SAVONS QUE LA DATE DE DEBUT EST INVALIDE. NON NUM.\nWRDTEI   MVC   ECRANM(L'ERRCTL3),ERRCTL3  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- ICI NOUS SAVONS QUE LA DATE DE DEBUT DE L'AUTORISATION\n*        EST VALIDE.\nSTDTEI   MVC   OUDTEI,WCL7             RETAIN SERIAL DATE\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE DU NUMERO DE PROGRAMMEUR RESPONSABLE.              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         LA    R0,L'SCRPR\n         LA    R1,SCRPR+L'SCRPR\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRSCRPR\n         CLI   0(R1),C'9'\n         BH    WRSCRPR\n         BCT   R0,*-18\n*------- ICI, NOUS SAVONS QUE LE NUM DU PGM RESPONSABLE\n*        EST BIEN NUMERIQUE. TEST S'IL EXISTE DANS LE\n*        FICHIER DES PROGRAMMEURS AUTORISES.\n         PACK  WPL3,SCRPR              PACK NBR OF PGM RESP\n         ZAP   DSD,WPL3                ALIGN IN ADDRESS * 8\n         CVB   R5,DSD                  CONVERT PGM NBR IN BINARY\n         AH    R5,=Y(NAUTNO+1)         ADD NO. OF AUT. AT KEY\n         CH    R5,ARGUMRSP             IS IT CHANGED ?\n         BE    VALFO                   NO\n         STH   R5,ARGUMRSP             STORE KEY IN ARGUMENT\n        CALL   ZREAD,(RETCD,ARGUMRSP,AREAP),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TSTEXPR                 IF ZERO, PROG. RESP EXIST\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MESSAGE\n         MVC   SCRNOM,MSGPN1           IF NOT, ERROR MESSAGE\n         B     SETMPR\nTSTEXPR  LH    R15,PRGPNO              LOAD PROGRAMMER NUMBER\n         LTR   R15,R15                 TEST SIGN\n         BP    EXISTPR                 IF ZERO, FOUND PROG. RESP\n         MVC   SCRNOM,MSGPN2\nSETMPR   MVC   SCRNOA,ATTNI\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- ICI, NOUS SAVONS QUE LE NUMERO N'EST PAS NUMERIQUE\nWRSCRPR  MVC   ECRANM(L'ERRCTL6),ERRCTL6  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\nEXISTPR  MVC   SCRNOM,PRGPNME\n         MVC   SCRNOA,ATTNP\n         EJECT\n*--------------------------------------------------------------------*\n*        VALIDATION DE LA DATE DE FIN DE L'AUTORISATION.             *\n*--------------------------------------------------------------------*\n         SPACE 1\nVALFO    MVC   MDY(2),SCRDTEO+3        MOVE MM IN WORK FIELD\n         MVC   MDY+2(2),SCRDTEO        MOVE DD IN WORK FIELD\n         MVC   MDY+4(4),SCRDTEO+6      MOVE YYYY IN WORK FIELD\n         LA    R0,L'MDY\n         LA    R1,MDY+L'MDY\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRDTEO\n         CLI   0(R1),C'9'\n         BH    WRDTEO\n         BCT   R0,*-18\n*------- ICI NOUS SAVONS QUE LA DATE EST NUMERIQUE\n*        CONTROLE QU'ELLE EST BIEN DU FORMAT DD/MM/YYYY\n         LA    R15,SCRDTEO\n         BAL   R14,CTDELIM             GO CONTROL DELIMITERS\n         B     VALDTEO                 +0 - GO TO DATE IS VALID\n         B     ERRDTEO                 +4 - GO TO ERROR DATE\n*------- FORMAT DE LA DATE NON VALIDE. SLASH NON EN BONNE PLACE.\n         MVC   ECRANM(L'ERRCTL8),ERRCTL8  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- TRANSFORMATION A SERIAL DATE.\nVALDTEO $GSDATE MDY,WCL7\n         LTR   R15,R15\n         BZ    STDTEO\n*------- ICI, LA DATE DE FIN EST INVALIDE. VALEURS INVALIDES.\nERRDTEO  MVC   ECRANM(L'ERRCTL9),ERRCTL9  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- ICI, NOUS SAVONS QUE LA DATE DE FIN EST INVALIDE. NON NUM.\nWRDTEO   MVC   ECRANM(L'ERRCTL7),ERRCTL7  ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- ICI NOUS SAVONS QUE LA DATE DE FIN DE L'AUTORISATION\n*        EST VALIDE.\nSTDTEO   MVC   OUDTEO,WCL7             RETAIN SERIAL DATE\n         MVC   WCL16(4),SCRDTEI+6      CONTROL START-END DATE\n         MVC   WCL16+4(2),SCRDTEI+3\n         MVC   WCL16+6(2),SCRDTEI\n         MVC   WCL16+8(4),SCRDTEO+6\n         MVC   WCL16+12(2),SCRDTEO+3\n         MVC   WCL16+14(2),SCRDTEO\n         CLC   WCL16(8),WCL16+8\n         BNH   *+L'*+10\n         MVC   ECRANM(35),=CL35'DATE de DEBUT d!passe DATE de FIN'\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE DES NUMEROS DE PROGR. ENTRES ET DES                *\n*        CODES D, I OU BLANC TROUVES AU NIVEAU PROGR.                *\n*--------------------------------------------------------------------*\n         SPACE 1\n         LA    R9,NPL                  LOOP N... TIMES\n         LA    R4,NATT1\n         LA    R5,NUM1\n         LA    R6,ASTER1\n         LA    R7,NAME1\n         LA    R8,VWORK                WORKING VECTOR\nLOOPCTL  CLC   0(4,R5),=CL25' '        IS PGM NBR PRESENT ?\n         BNE   CHKPGN                  YES\n         MVC   0(L'VWORK,R8),=CL25' '\n         CLC   0(25,R7),=CL25' '       CLEAR IF NEEDED\n         BE    INCRCTL\n         MVC   0(25,R7),=CL25' '\n         B     SETSWC\nCHKPGN   LA    R0,4\n         LA    R1,4(R5)\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRPGMN\n         CLI   0(R1),C'9'\n         BH    WRPGMN\n         BCT   R0,*-18\n         CLC   0(4,R5),0(R8)           PGM NUMBER CHANGED ?\n         BE    NOTCHG                  NO\n         MVI   0(R6),C' '              YES, FORCE CODE BLANK\n         LA    R15,NUM1                SCAN TO ELIMINE DOUBLE\nDBLSCN   CLR   R5,R15                  SCAN ENDED ?\n         BE    PRCSIT                  YES, PROCESS IT\n         CLC   0(4,R5),0(R15)          NO, SEE IF DEFINED PREVIOUSLY\n         BE    *+L'*+8\n         LA    R15,DX(R15)\n         B     DBLSCN\n         MVC   0(4,R5),=CL25' '        CANCEL ALL ABOUT THIS ONE\n         MVC   0(25,R7),=CL25' '\n         MVC   0(L'VWORK,R8),=CL25' '\n         B     SETSWC\nWRPGMN   MVC   0(25,R7),MSGERR4        NOT NUMERIC MESSAGE\n         B     SETSWC\nPRCSIT   MVC   0(4,R8),0(R5)           RETAIN IT\n         OI    SWCTL+1,X'F0'           SET SWITCH TO NO UPDATE(S)\n         B     GETNME\nNOTCHG   CLC   0(1,R6),4(R8)           STATUS CHANGED ?\n         BE    INCRCTL                 NO\n         CLI   0(R6),C'D'              IS CODE 'D' ?\n         BE    SETSPP                  YES\n         CLI   0(R6),C'I'              IS CODE 'I'?\n         BNE   *+L'*+10                NO\n         MVC   0(25,R7),MSGERR3\n         B     CPYST\n         CLI   0(R6),C' '              IS CODE BLANK ?\n         BE    GETNME                  YES\n         MVC   0(25,R7),MSGERR5        CODE ERROR MESSAGE\n         B     SETINT\nGETNME   MVC   4(1,R8),0(R6)\n         PACK  DSD,0(4,R5)\n         CVB   R0,DSD\n         AH    R0,=Y(NAUTNO+1)         ADD NO. OF AUT. AT KEY\n         STH   R0,ARGUMPRG             STORE KEY IN ARGUM.PROGRAM.\n        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TSTNME                  IF ZERO, FOUND PROG'S NAME\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MESSAGE\n         MVC   0(25,R7),MSGERR1        MSG NOT FOUND\n         B     SETINT\nTSTNME   LH    R15,PRGPNO              LOAD PROGRAMMER NUMBER\n         LTR   R15,R15                 TEST SIGN\n         BP    SETNME                  IF POSITIVE, FOUND PROG'S NAME\n         MVC   0(25,R7),MSGERR2        MSG INVALIDATED\n         MVI   0(R6),C'I'              FORCE INVALID\nCPYST    MVC   4(1,R8),0(R6)           COPY STATUS\nSETINT   MVC   0(L'NATT1,R4),ATTNI     SET INTENSIVE DISPLAY\n         B     SETSWC\nSETSPP   MVC   0(25,R7),MSGERR6        SET DELETED\n         B     CPYST\nSETNME   MVC   0(25,R7),PRGPNME        SET NAME\nSETSWC   OI    SWCTL+1,X'F0'           SET SWITCH TO NO UPDATE(S)\nINCRCTL  LA    R4,DX(R4)\n         LA    R5,DX(R5)\n         LA    R6,DX(R6)\n         LA    R7,DX(R7)\n         LA    R8,L'VWORK(R8)\n         BCT   R9,LOOPCTL\nSWCTL    B     DSPLAY\n         EJECT\n*--------ICI, NOUS SOMMES SUR DE LA VALIDITE DU RECORD LU SUR LE\n*        DISPLAY, SUIT LE TRAITEMENT DE CE RECORD.\n*        SEE IF SOME INITIAL VALUES CHANGED.\n         NI    CMSWW+1,X'0F'\n         CLC   INSI,SCRSI\n         BE    CMSRT\n         CLI   INSI,C' '               VALID AUT.?\n         BNE   EXWRT                   NO\n         L     R15,=A(EXTCTL)          * * * EXTENDED CONTROL * * *\n         BALR  R14,R15                 * * * EXTENDED CONTROL * * *\n         DC    Y(CHKINA-EXTCTL)        * * * EXTENDED CONTROL * * *\n         OI    CMSWW+1,X'F0'\nCMSRT   $SORT  VWORK,NPL,L'VWORK,0,L'VWORK-1\n         LA    R4,NPL                  PROGRAMMERS BY AUTH.\n         LA    R8,VWORK                WORKING VECTOR\n         LA    R9,VINIT                INITIAL VECTOR\nCMCTL    CLC   0(L'VINIT,R9),0(R8)     HAS CHANGED ?\n         BE    CMNXT                   NO\n         CLI   4(R8),C' '              YES, IS IT AN ADDITION ?\n         BE    CMSET                   YES\n         CLI   4(R8),C'D'              NO, IS IT A DELETION ?\n         BNE   CMCHK                   NO\n         CLC   0(L'VINIT,R9),=CL25' '  YES, DELETION OF SOME ADDED ?\n         BE    CMNXT                   YES\nCMCHK    L     R15,=A(EXTCTL)          * * * EXTENDED CONTROL * * *\n         BALR  R14,R15                 * * * EXTENDED CONTROL * * *\n         DC    Y(CHKAPN-EXTCTL)        * * * EXTENDED CONTROL * * *\nCMSET    OI    CMSWW+1,X'F0'\nCMNXT    LA    R8,L'VWORK(R8)          JUMP TO NEXT\n         LA    R9,L'VINIT(R9)\n         BCT   R4,CMCTL                LOOP N... TIMES\nCMSWW    NOP   EXWRT\n         CLC   INFICH,SCRFICH\n         BNE   EXWRT\n         CLC   INDTEI,OUDTEI\n         BNE   EXWRT\n         CLC   INDTEO,OUDTEO\n         BNE   EXWRT\n         CLC   INPR,SCRPR\n         BNE   EXWRT\n         CLC   INPI,SCRPI\n         BNE   EXWRT\nNOUPDT   MVC   ECRAUM(L'MSGUPDN),MSGUPDN\n         B     SETUPD\nEXWRT    MVC   INSI,SCRSI\n         MVC   INFICH,SCRFICH\n         MVC   INDTEI,OUDTEI\n         MVC   INDTEO,OUDTEO\n         MVC   INPR,SCRPR\n         MVC   INPI,SCRPI\n*------- BUILD AUTHORIZATION UPDATE RECORD.\n         XC    AREAR(AUTLGTH),AREAR    CLEAR RECORD AREA\n         LH    R1,ARGUMAUT\n         CLI   INSI,C'I'\n         BNE   *+L'*+2\n         LNR   R1,R1\n         STH   R1,AUTANO               SET AUTH. NUMBER AS DESIRED\n         MVC   AUTACNO,INFICH          SET FICHE PROGRAMME\n         CLI   INPI,C'4'\n         BE    *+L'*+6\n         MVC   AUTPI,INPI              SET PRIORITY INCR/DECR\n         PACK  DSD,INDTEI              TRANFORM EBCDIC IN PACKED\n         CVB   R1,DSD                  CONVERT PACKED IN FIXED\n         STCM  R1,B'0111',AUTVSD       SET START DATE\n         PACK  DSD,INDTEO              TRANFORM EBCDIC IN PACKED\n         CVB   R1,DSD                  CONVERT PACKED IN FIXED\n         STCM  R1,B'0111',AUTVED       SET END DATE\n         PACK  DSD,INPR                PACK PGM RESP NBR.\n         CVB   R1,DSD                  CONVERT PACKED IN FIXED\n         STH   R1,AUTPMNO              STORE PROG RESP NBR\n         LA    R4,NPL                  PROGRAMMERS BY AUTH.\n         LA    R5,AUTPNO               ADDRESS OF BEGINNING OF LIST\n         LA    R6,VWORK                WORKING VECTOR\nBLDSCN   CLC   0(4,R6),=CL25' '        ANY PGM NBR PRESENT ?\n         BE    BLDNXT                  NO, SKIP TO NEXT\n         CLI   4(R6),C'D'              YES, IS IT TO DELETE ?\n         BE    BLDNXT                  YES, SKIP TO NEXT\n         PACK  DSD,0(4,R6)             PACK PGM NBR.\n         CVB   R1,DSD                  CONVERT PACKED IN FIXED\n         CLI   4(R6),C'I'              YES, IS IT TO INVALIDATE ?\n         BNE   *+L'*+2                 NO\n         LNR   R1,R1                   YES, SET IT NEGATIVE\n         STH   R1,0(R5)                STORE IN RECORD\n         LA    R5,L'AUTPNO(R5)         JUMP TO NEXT IN RECORD\nBLDNXT   LA    R6,L'VWORK(R6)          JUMP TO NEXT IN VECTOR\n         BCT   R4,BLDSCN               LOOP N... TIMES\n*------- WRITE BACK AUTHORIZATION IN FILE\n        CALL   ZWRITE,(RETCD,ARGUMAUT,AREAR),VL\n         LTR   R15,R15\n         BNZ   UPFAIL\n         LA    R1,RQHCPY1              HARDCOPY OF OPERATION\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    EXSUCC\n         XR    R2,R2                   PASS HARDCOPY ERROR\n         LR    R3,R0\n         B     SCRAMBLE                SEVERE ERROR\nEXSUCC   MVC   ECRAUM(L'MSGDONE),MSGDONE\n         B     SETUPD\nUPFAIL   CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZW                   IF NOT, GO DISPLAY Z... MESSAGE\n         MVC   ECRAUM(L'MSGFAIL),MSGFAIL\nSETUPD   MVC   ECRAUM(6),=CL6'UPDATE'\n         B     SETMA\n*------- DELETE AUTHORIZATION FROM FILE\nRDELET   CLI   INSI,C'I'               INVALID AUT.?\n         BE    DLAOK                   YES\n         L     R15,=A(EXTCTL)          * * * EXTENDED CONTROL * * *\n         BALR  R14,R15                 * * * EXTENDED CONTROL * * *\n         DC    Y(CHKDLA-EXTCTL)        * * * EXTENDED CONTROL * * *\nDLAOK    MVC   ECRADA,SCRAUT           SET AUT. NR. IN DISPLAY\n         LA    R1,PECRAD               DISPLAY SCREEN TO CONFIRM\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   FININER                 NO, END CP (ONLY 4)\n         MVI   ECRADM,C' '\n         MVC   ECRADM+1(L'ECRADM-1),ECRADM\n         L     R15,=V(AUT99R)          GET RESPONSE(S)\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    DSPLAY                  IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    DSPLAY                  YES, ESCAPE\n         MVC   RESPONSE(1),3(R15)\n         OI    RESPONSE,C' '           TRANSLATE LOWER CASE IN UPPER\n         CLI   RESPONSE,C'Y'           IS RESPONSE = Y ?\n         BE    XDELET                  IF YES, GO TO DELETE\n         CLI   RESPONSE,C'N'           IS RESPONSE = N ?\n         BE    DSPLAY                  IF YES, ESCAPE\n         CLI   RESPONSE,C' '           IS RESPONSE = BLANK ?\n         BE    DSPLAY                  IF YES, ESCAPE\n         MVC   ECRADM(L'MSGRSP),MSGRSP\n         MVC   ECRADM+L'MSGRSP-5(1),RESPONSE\n         B     RDELET+L'RDELET         BACK TO CONFIRM AGAIN\nXDELET  CALL   ZDELET,(RETCD,ARGUMAUT),VL\n         LTR   R15,R15\n         BNZ   DLFAIL\n         LA    R1,RQHCPY2              HARDCOPY OF OPERATION\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    SETDLT\n         XR    R2,R2                   PASS HARDCOPY ERROR\n         LR    R3,R0\n         B     SCRAMBLE                SEVERE ERROR\nDLFAIL   CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BNE   ERRZD                   IF NOT, GO DISPLAY Z... MESSAGE\n         MVC   ECRAUM(L'MSGFAIL),MSGFAIL\n         B     SETDLT+L'SETDLT\nSETDLT   MVC   ECRAUM(L'MSGDONE),MSGDONE\n         MVC   ECRAUM(6),=CL6'DELETE'\nSETMA    LH    R0,ARGUMAUT\n         CVD   R0,DSD\n         MVC   DSD(5),=XL5'2120202020'\n         ED    DSD(5),DSD+5\n         MVC   ECRAUM+L'MSGDONE-5(4),DSD+1\n         DROP  R2,R3\n         SPACE 1\nFINCP    MVI   MSG1,C' '               CLEAR MESSAGE FIELDS\n         MVC   MSG1+1(L'MSG1-1),MSG1\n         MVC   MSG2,MSG1\n*------- INITIALIZE OUTPUT SCREEN FIELDS\n         MVI   SCRSI,C' '              INIT FIELD WITH BLANKS\n         MVC   SCRFICH(L'SCRFICH),=CL25' '\n         MVC   SCRDTEI(L'SCRDTEI),=CL25' '\n         MVC   SCRPR(L'SCRPR),=CL25' '\n         MVI   SCRPI,C' '\n         MVC   SCRDTEO(L'SCRDTEO),=CL25' '\n         LA    R0,NPL                  MAX.NO OF FIELDS\n         LA    R1,DX\n         LA    R5,NUM1\n         LA    R6,ASTER1\n         LA    R7,NATT1\n         LA    R8,NAME1\nREINIT   MVC   0(L'NUM1,R5),=CL25' '   RESET ALL FIELDS\n         MVI   0(R6),C' '\n         MVC   0(L'NATT1,R7),ATTNP\n         MVC   0(L'NAME1,R8),=CL25' '\n         ALR   R5,R1\n         ALR   R6,R1\n         ALR   R7,R1\n         ALR   R8,R1\n         BCT   R0,REINIT\n         LA    R0,NPL\n         LA    R5,VWORK                WORKING VECTOR\n         LA    R6,VINIT                INITIAL VECTOR\nREINVT   MVC   0(L'VWORK,R5),=CL25' '  INITIALIZE VECTORS\n         MVC   0(L'VINIT,R6),=CL25' '\n         LA    R5,L'VWORK(R5)\n         LA    R6,L'VINIT(R6)\n         BCT   R0,REINVT\n         B     REQAUT\n         EJECT\n*--------------------------------------------------------------------*\n*        ERREUR AU MOMENT DE L'ALLOCATION DU FICHIER D'ACCOUNTING.   *\n*--------------------------------------------------------------------*\n         SPACE 1\nERALL    STM   R15,R0,DSD\n        TPUT   ERROR1,L'ERROR1\n         UNPK  ERROR1C+8(9),DSD(5)\n         TR    ERROR1C+8(8),TRTAB-X'F0'\n         MVI   ERROR1C+16,C' '\n         UNPK  ERROR1C+22(9),DSD+4(5)\n         TR    ERROR1C+22(8),TRTAB-X'F0'\n         MVI   ERROR1C+30,C' '\n        TPUT   ERROR1C,L'ERROR1C\n         B     LEAVE\n         SPACE 1\n*--------------------------------------------------------------------*\n*        FIN DU TRAVAIL - SORTIE.                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nFININER  XR    R1,R1                   EXIT FULLSCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\nCLSZR    XR    R1,R1                   CLOSE HARDCOPY\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n        CALL   ZCLOSE,(RETCD),VL       CLOSE FILE UNDER SYSACC DD\n         LTR   R15,R15                 IS RETURN CODE 0?\n         BNZ   ERRZOC                  IF NOT, ERROR AT CLOSE\nFREACC   XC    DYNDSN,DYNDSN\n        $DYNALL DYNLIST                DYNAMIC DE-ALLOC OF SYSACC\nLEAVE   $XRET  CC=0\n         EJECT\n*--------------------------------------------------------------------*\n*        ERREUR A L'UTILISATION DU FICHIER D'ACCOUNTING              *\n*--------------------------------------------------------------------*\n         SPACE 1\nERRZOC   LR    R0,R15\n         XR    R1,R1\n        CALL   ZYDIAG\n         LA    R8,1(R15)\n         XR    R9,R9\n         BCTR  R15,0\n         IC    R9,0(R15)\n         BCTR  R9,0\n        TPUT   (R8),(R9)\n         B     FREACC\n         SPACE 1\nERRZW    LM    R2,R3,NZWR\n         B     ERRZX\nERRZD    LM    R2,R3,NZDL\n         B     ERRZX\nERRZR    LM    R2,R3,NZRD\nERRZX    LR    R0,R15\n         XR    R1,R1\nSCRAMBLE L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     CLSZR\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE FORMAT ET VALIDITE D'UNE DATE (ROUTINE)            *\n*--------------------------------------------------------------------*\n         SPACE 1\n*        MDY = DATE IN FORMAT MMDDYYYY\n*        R15 = ADDRESS OF DATE (DD/MM/YYYY)\n*        R14 = LINK - RETURN = +0 DATE IS VALID\n*                              +4 ERROR DATE\n*                              +8 DATE IS INVALID\n*        CONTROLE QU'ELLE EST BIEN DU FORMAT DD/MM/YYYY\nCTDELIM  CLI   2(R15),C'/'             IS / PRESENT ?\n         BE    CTDLM2                  YES\n         CLI   2(R15),C' '             IS BLANK PRESENT ?\n         BE    CTDLM1                  YES\n         CLI   2(R15),C'.'             IS PERIOD PRESENT ?\n         BE    CTDLM1                  YES\n         CLI   2(R15),C'-'             IS - PRESENT ?\n         BNE   8(R14)                  IF NOT, GO TO INVALID DATE\nCTDLM1   MVI   2(R15),C'/'             SET / IN PLACE\nCTDLM2   CLI   5(R15),C'/'             IS PRESENT SECOND / ?\n         BE    CTDLM4                  YES\n         CLI   5(R15),C' '             IS PRESENT SECOND BLANK ?\n         BE    CTDLM3                  YES\n         CLI   5(R15),C'.'             IS PRESENT SECOND PERIOD ?\n         BE    CTDLM3                  YES\n         CLI   5(R15),C'-'             IS PRESENT SECOND - ?\n         BNE   8(R14)                  IF NOT, GO TO INVALID DATE\nCTDLM3   MVI   5(R15),C'/'             SET / IN PLACE\n*------- ICI NOUS SOMMES CERTAINS QUE LE FORMAT DE LA DATE EST BON\n*        ET QU'ELLE EST NUMERIQUE.\n*        CONTROLE DE LA VRAISEMBLANCE DE LA DATE\n*    NB. LA DATE EGALE A 99/99/9999 EST VALIDE (SIGNIFIE L'INFINI).\nCTDLM4   CLC   MDY,=C'99999999'        COMPARE WITH 99/99/9999\n         BER   R14                     IF EQUAL, DATE IS VALID\n*------- ICI LES JOURS ET MOIS NE SONT PAS EGAUX A 99\n         CLC   MDY+2(2),=C'31'         IS DAY > 31 ?\n         BH    4(R14)                  IF YES, GO TO ERROR DATE\n         CLC   MDY+2(2),=C'01'         IS DAY < 01 ?\n         BL    4(R14)                  IF YES, GO TO ERROR DATE\n         CLC   MDY(2),=C'12'           IS MONTH > 12 ?\n         BH    4(R14)                  IF YES, GO TO ERROR DATE\n         CLC   MDY(2),=C'01'           IS MONTH < 01 ?\n         BL    4(R14)                  IF YES, GO TO ERROR DATE\n*------- ICI, LA DATE EST VRAISEMBLABLE\n         BR    R14                     BACK, DATE IS VALID\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nPECRIN   DC    A(LECRIF,ECRIN)\nPECRAU   DC    A(LECRAU,ECRAU)\nPECRAW   DC    A(LECRAW,ECRAW)\nPECRAN   DC    A(LECRAN,ECRAN)\nPECRAD   DC    A(LECRAD,ECRAD)\nRETCD    DC    F'0'          RETURN CODE FROM Z... ROUTINES\nNZRD     DC    0F'0',CL8'ZREAD'\nNZDL     DC    0F'0',CL8'ZDELET'\nNZWR     DC    0F'0',CL8'ZWRITE'\nNGDT     DC    0F'0',CL8'GFDATE'\nAREAR    DC    (AUTLGTH)X'0' WORKA FOR READ FILE. RECORD AUTHOR.\nAREARO   DC    (AUTLGTH)X'0' WORKA FOR READ FILE. RECORD AUTHOR.\nAREAP    DC    (PRGLGTH)X'0' WORKA FOR READ FILE. RECORD PROGRAMMER\nARGUMAUT DC    H'0'          AUTORIZATION NUMBER TO CHAIN IN FILE\nARGUMPRG DC    H'0'          PROGRAMMER NUMBER TO CHAIN IN FILE\nARGUMRSP DC    H'0'          RESP. PGR. NUMBER TO CHAIN IN FILE\nMDY      DC    CL8' '        MONTH, DAY, YEAR FROM GFDATE\nOUDTEI   DC    CL7' '        SERIAL DATE FROM GSDATE\nOUDTEO   DC    CL7' '        SERIAL DATE FROM GSDATE\nRESPONSE DC    C' '\nWPL3     DC    PL3'0'        WORK FIELD PACKED LENGTH 3\nWCL4     DC    CL4' '        WORK FIELD CHAR LENGTH 4\nWCL7     DC    CL7' '        WORK FIELD CHAR LENGTH 7\nWCL16    DC    CL16' '       WORK FIELD CHAR LENGTH 16\nATTNP   $FS    SF=(PROT),MF=L\nATTNI   $FS    SF=(PROT,INT),MF=L\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION PARAMETER LIST                           *\n*--------------------------------------------------------------------*\n         SPACE 1\nDYNLIST  DC    C'SYSACC  '\nDYNDSN   DC    XL44'0'\n         DC    CL8' '        MEMBER NAME\n         DC    CL8' '        PASSWORD\n         DC    CL8'SHR'      STATUS\n         DC    CL256' '      FILLER\n         DC    CL85' '       FILLER\n         SPACE 1\n*--------------------------------------------------------------------*\n*        VECTORS DEFINITION                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n*                            - - - - - - - - - - - - - - - - - - - - -\nINSI     DC    CL1' '        AUT. CODE\nINFICH   DC    CL10' '       FICHE PROGRAMME\nINDTEI   DC    CL7' '        STARTING DATE\nINDTEO   DC    CL7' '        ENDING DATE\nINPR     DC    CL4' '        RESPONSIBLE PROGR. NUMBER\nINPI     DC    CL4' '        PRIORITY INCREMENT/DECREMENT\n*                            - - - - - - - - - - - - - - - - - - - - -\nVWORK    DS    0CL5          WORKING VECTOR\n*                            +0 = PGM NBR IN EBCDIC\n*                            +4 = 'I' IF PGM NBR < 0\n*                                 'D' IF PGM NBR TO DELETE\n         DC    (NPL)CL5' '\n*                            - - - - - - - - - - - - - - - - - - - - -\nVINIT    DS    0CL5          INITIAL VECTOR\n*                            +0 = PGM NBR IN EBCDIC\n*                            +4 = 'I' IF PGM NBR < 0\n         DC    (NPL)CL5' '\n         EJECT\n*--------------------------------------------------------------------*\n*        HARDCOPY REQUESTS.                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nRQHCPY1  DC    AL1(3),AL4(ARGUMAUT,AREARO,AREAR)   UPDATE AUTH.\nRQHCPY2  DC    AL1(5),AL4(ARGUMAUT,AREARO)   DELETE AUTHORIZATION.\n         SPACE 1\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nERROR1   DC    C'*** ACCOUNT file ALLOC error *** '\nERROR1C  DC    C'    R15=........ - R0=........ - AUT30 '\n         DC    AL1(L'MSGGDTE)\nMSGGDTE  DC    C' GFDATE error (Day=.......,RC=....)'\nMSGINV   DC    C'Unknown option selected :   ???'\nMSGRSP   DC    C'Unknown response received :   ???'\nMSGAN1   DC    C'Authorization NOT numeric or NOT 4 digits.'\nMSGPN1   DC    CL40'RESP. Progr. Number NOT found'\nMSGPN2   DC    CL40'RESP. Progr. Nr. REC invalid.'\nMSGDONE  DC    C'...... is successfully done - Authorization :     .'\nMSGUPDN  DC    C'...... bypassed - No change - Authorization :     .'\nMSGUBYP  DC    C'...... bypassed - Escape... - Authorization :     .'\nMSGFAIL  DC    C'...... has failed - Authorization NOT found :     .'\nERRCTL0  DC    C'Input scan SBA order not found ???'\nERRCTL1  DC    C'Auth. action error (set I, D or null)'\nERRCTL2  DC    C'Numero de Fiche Progr. NON num!rique|'\nERRCTL3  DC    C'DATE de DEBUT non  N U M E R I Q U E |'\nERRCTL4  DC    C'DATE de DEBUT mal format!e (JJ/MM/AAAA)'\nERRCTL5  DC    C'DATE de DEBUT avec valeurs invalides.'\nERRCTL6  DC    C'Numero de PGM. RESP. NON num!rique|'\nERRCTL7  DC    C'DATE de FIN non  N U M E R I Q U E |'\nERRCTL8  DC    C'DATE de FIN mal format!e (JJ/MM/AAAA)'\nERRCTL9  DC    C'DATE de FIN avec valeurs invalides.'\nERRCTLA  DC    C'D!finissez la Fiche Programme S.V.P. |||'\nMSGERR1  DC    CL25'Progr. Number NOT found'\nMSGERR2  DC    CL25'Progr. Nr.REC Invalidated'\nMSGERR3  DC    CL25'Progr. Number Invalidated'\nMSGERR4  DC    CL25'Progr. Number NOT numeric'\nMSGERR5  DC    CL25'Code error (D, I or null)'\nMSGERR6  DC    CL25'Progr. Number deleted'\nTRTAB    DC    C'0123456789ABCDEF'\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRANS D'OUTPUT                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRIN   $FS    CC=W,WCC=(AL,KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION and/or PROGRAMMER',MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='     U   P   D   A   T   E     ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(3,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='===============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='You can update information for ',MF=L\n        $FS    TEXT='an Authorization Number',MF=L\n        $FS    SBA=(6,39),SF=(PROT),MF=L\n        $FS    TEXT='or a Programmer Number',MF=L\n        $FS    SBA=(9,11),TEXT='Enter A or P',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(10,16),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(11,10),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-1',MF=L\n        $FS    SF=(PROT),TEXT='to view ',MF=L\n        $FS    TEXT='Authorizations/Programmers ',MF=L\n        $FS    TEXT='MANAGEMENT Rules Summary',MF=L\n        $FS    SBA=(12,10),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-2',MF=L\n        $FS    SF=(PROT),TEXT='to view ',MF=L\n        $FS    TEXT='the current Accounting data-set status',MF=L\n        $FS    SBA=(14,1),SF=(PROT,INT),MF=L\nECRINM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(15,1),SF=(PROT,INT),MF=L\nECRINS  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(17,1),SF=(PROT,INT),TEXT='Advice :',MF=L\n        $FS    SF=(PROT),TEXT='from now until you exit this ',MF=L\n        $FS    TEXT='process, you have the',MF=L\n        $FS    SF=(PROT,INT),TEXT='exclusive',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(18,11),TEXT='use of the accounting data-set.',MF=L\nLECRIN   EQU   (*-ECRIN)+LPTIC\nOVRR    $FS    SBA=(20,1),SF=(PROT,INT),RA=(20,80,-),MF=L\n        $FS    SBA=(21,2),TEXT='Remark :',MF=L\n        $FS    SF=(PROT),TEXT='if desired, you can also enter ',MF=L\n        $FS    TEXT='directly in this process typing',MF=L\n        $FS    SBA=(22,11),TEXT='the TSO-command',MF=L\n        $FS    SF=(PROT,INT),TEXT='AUT30',MF=L\n        $FS    SF=(PROT),TEXT='at any time in your session.',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),RA=(23,80,-),MF=L\n        PRINT  OFF\n        $FS    SBA=(24,1),SF=(PROT,INT),TEXT='WELCOME',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='to this up-grade CP implemented by ',MF=L\n        $FS    TEXT='MOINIL P.A. ... your wizard |',MF=L\n        PRINT  ON\nPTIC    $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLPTIC    EQU   *-PTIC\nLECRIF   EQU   *-ECRIN\n         SPACE 1\nECRAU   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION     N U M B E R',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='Enter Authorization Number (4 numerics)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(17,1),SF=(PROT,INT),TEXT='Mandatory :',MF=L\n        $FS    SF=(PROT),TEXT='when creating or updating ',MF=L\n        $FS    TEXT='an Authorization be carefull the',MF=L\n        $FS    SBA=(18,14),TEXT='Programmers Numbers you set ',MF=L\n        $FS    TEXT='in are already defined. This means',MF=L\n        $FS    SBA=(19,14),TEXT='you must first be sure ',MF=L\n        $FS    TEXT='these exist, and then, you may work',MF=L\n        $FS    SBA=(20,14),TEXT='on the Authorization.',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRAUM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAU   EQU   *-ECRAU\n         SPACE 1\nECRAW   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION     N U M B E R',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='Authorization NOT FOUND in file.',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='Enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='Y',MF=L\n        $FS    SF=(PROT),TEXT='if you are creating a new one',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(7,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRAWM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAW   EQU   *-ECRAW\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION     U P D A T E',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(3,1),SF=(PROT),MF=L\n        $FS    TEXT='Authorization state/action :',MF=L\n        $FS    SF=(PROT,INT),TEXT='I',MF=L\n        $FS    SF=(PROT),TEXT='= invalidate,',MF=L\n        $FS    SF=(PROT,INT),TEXT='D',MF=L\n        $FS    SF=(PROT),TEXT='= delete or',MF=L\n        $FS    SF=(PROT,INT),TEXT='X',MF=L\n        $FS    SF=(PROT),TEXT='to escape',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nSBASI   $FS    SBA=(3,78),MF=L\nSCRSI   $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(4,1),SF=(PROT),TEXT='Authorization Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRAUT  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,41),SF=(PROT),TEXT='Fiche Programme :',MF=L\n        $FS    SF=(INT),MF=L\nSBAFICH $FS    SBA=(4,60),MF=L\nSCRFICH $FS    TEXT=(' ',10),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(5,1),SF=(PROT),TEXT='DATE start :',MF=L\n        $FS    SF=(INT),MF=L\nSBADTEI $FS    SBA=(5,15),MF=L\nSCRDTEI $FS    TEXT='  /  /    ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(5,25),SF=(PROT),MF=L\n        $FS    TEXT='Responsible Programmer :',MF=L\n        $FS    SF=(INT),MF=L\nSBAPR   $FS    SBA=(5,51),MF=L\nSCRPR   $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(5,60),SF=(PROT),MF=L\n        $FS    TEXT='Priority (0-9) :',MF=L\n        $FS    SF=(INT),MF=L\nSBAPI   $FS    SBA=(5,78),MF=L\nSCRPI   $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,6),SF=(PROT),TEXT='  end :',MF=L\n        $FS    SF=(INT),MF=L\nSBADTEO $FS    SBA=(6,15),MF=L\nSCRDTEO $FS    TEXT='  /  /    ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,25),SF=(PROT),TEXT='Resp. Name :',MF=L\nSCRNOA  $FS    SF=(PROT),MF=L\nSCRNOM  $FS    TEXT=(' ',40),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,1),SF=(PROT,INT),MF=L\nMSG1    $FS    TEXT=(' ',37),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,41),SF=(PROT,INT),MF=L\nMSG2    $FS    TEXT=(' ',37),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,1),SF=(PROT),MF=L\n        $FS    TEXT='Programmers for this Authorization :',MF=L\n        $FS    SBA=(9,3),SF=(PROT),TEXT='----> ',MF=L\n        $FS    SF=(PROT,INT),TEXT='I',MF=L\n        $FS    SF=(PROT),TEXT='= invalidate,',MF=L\n        $FS    SF=(PROT,INT),TEXT='D',MF=L\n        $FS    SF=(PROT),TEXT='= delete',MF=L\n        $FS    SBA=(9,43),SF=(PROT),TEXT='----> ',MF=L\n        $FS    SF=(PROT,INT),TEXT='I',MF=L\n        $FS    SF=(PROT),TEXT='= invalidate,',MF=L\n        $FS    SF=(PROT,INT),TEXT='D',MF=L\n        $FS    SF=(PROT),TEXT='= delete',MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 01 -*\nSX       EQU   *\n        $FS    SBA=(10,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\nSBAN1   $FS    SBA=(10,4),MF=L\nNUM1    $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\nSBAA1    EQU   *-SBAN1\n        $FS    SBA=(10,11),MF=L\nASTER1  $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\nNATT1   $FS    SF=(PROT),MF=L\nNAME1   $FS    TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\nDX       EQU   *-SX\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 02 -*\n        $FS    SBA=(10,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(10,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(10,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 03 -*\n        $FS    SBA=(11,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(11,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(11,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 04 -*\n        $FS    SBA=(11,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(11,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(11,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 05 -*\n        $FS    SBA=(12,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(12,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(12,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 06 -*\n        $FS    SBA=(12,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(12,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(12,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 07 -*\n        $FS    SBA=(13,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(13,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(13,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 08 -*\n        $FS    SBA=(13,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(13,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(13,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 09 -*\n        $FS    SBA=(14,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(14,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(14,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 10 -*\n        $FS    SBA=(14,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(14,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(14,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 11 -*\n        $FS    SBA=(15,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(15,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(15,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 12 -*\n        $FS    SBA=(15,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(15,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(15,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 13 -*\n        $FS    SBA=(16,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(16,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(16,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 14 -*\n        $FS    SBA=(16,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(16,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(16,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 15 -*\n        $FS    SBA=(17,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(17,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(17,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 16 -*\n        $FS    SBA=(17,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(17,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(17,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 17 -*\n        $FS    SBA=(18,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(18,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(18,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 18 -*\n        $FS    SBA=(18,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(18,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(18,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 19 -*\n        $FS    SBA=(19,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(19,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(19,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 20 -*\n        $FS    SBA=(19,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(19,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(19,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 21 -*\n        $FS    SBA=(20,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(20,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(20,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 22 -*\n        $FS    SBA=(20,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(20,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(20,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 23 -*\n        $FS    SBA=(21,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(21,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(21,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 24 -*\n        $FS    SBA=(21,41),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(21,44),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(21,51),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 25 -*\n        $FS    SBA=(22,1),SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(22,4),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='>',MF=L\n        $FS    SF=(INT),MF=L\n        $FS    SBA=(22,11),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(PROT),TEXT=(' ',25),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(22,42),SF=(PROT,INT),MF=L\nECRANM  $FS    TEXT=(' ',38),MF=L\n        $FS    SBA=(23,1),SF=(PROT),MF=L\n        $FS    TEXT='Type in your changes and hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='until they are correct, ',MF=L\n        $FS    TEXT='then hit only',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SBA=(24,1),SF=(PROT),MF=L\n        $FS    TEXT='to execute the update, or use at any time',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         SPACE 1\nECRAD   $FS    CC=W,WCC=(KBR),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION     D E L E T E',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(10,10),SF=(PROT),TEXT='Confirm',MF=L\n        $FS    SF=(PROT,INT),TEXT='DELETE',MF=L\n        $FS    SF=(PROT),TEXT='action on Authorization number :',MF=L\n        $FS    SF=(PROT,INT),,MF=L\nECRADA  $FS    TEXT=(' ',4),MF=L\n        $FS    SBA=(15,10),SF=(PROT),TEXT='Enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='Y',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='N ===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(16,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRADM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAD   EQU   *-ECRAD\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        UJVTABLE (IEFUJV) EXTENDED CONTROLS                         *\n*--------------------------------------------------------------------*\n         SPACE 1\n         CNOP  0,8\n         USING *,R15\nEXTCTL   STM   R8,R9,SVEXT\n         LR    R9,R15\n         DROP  R15\n         USING EXTCTL,R9\n         LA    R8,2(R14)\n         XR    R1,R1\n         ICM   R1,B'0011',0(R14)\n         B     0(R1,R9)\nCHKINA   XC    DSD,DSD\n        CALL   AUT33,(ARGUMAUT,DSD,DSD),VL\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         LR    R14,R8                  ACCEPTED\n         LM    R8,R9,SVEXT\n         BR    R14\n         CH    R15,=H'8'\n         BE    CHKERR\n         MVC   ECRANM(27),=CL27'Aut. INVALIDATION rejected.'\n         MVC   SCRSI,INSI\n         B     CHKMSG\nCHKAPN   L     R1,SVEXT\n         PACK  DSD,0(4,R1)\n         CVB   R0,DSD\n         XC    DSD,DSD\n         STH   R0,DSD\n        CALL   AUT33,(ARGUMAUT,DSD,DSD+2),VL\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         LR    R14,R8                  ACCEPTED\n         LM    R8,R9,SVEXT\n         BR    R14\n         CH    R15,=H'8'\n         BE    CHKERR\n         L     R1,SVEXT\n         CLI   4(R1),C'D'\n         BE    *+L'*+10\n         MVC   ECRANM(33),=CL33'Programmer INVALIDATION rejected.'\n         B     *+L'*+6\n         MVC   ECRANM(29),=CL29'Programmer DELETION rejected.'\n         MVI   4(R1),C' '\n         B     CHKMSG\nCHKDLA   XC    DSD,DSD\n        CALL   AUT33,(ARGUMAUT,DSD,DSD),VL\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         LR    R14,R8                  ACCEPTED\n         LM    R8,R9,SVEXT\n         BR    R14\n         CH    R15,=H'8'\n         BE    CHKERR\n         MVC   ECRANM(23),=CL23'Aut. DELETION rejected.'\n         MVC   SCRSI,INSI\nCHKMSG   MVC   MSG1(34),=CL34'UJVTABLE (IEFUJV) control detected'\n         MVC   MSG2(33),=CL33'* * * System HIGH-SENSITIVE * * *'\n         B     DSPLAY\nCHKERR   LM    R2,R3,NCALL             SEVERE ERROR\n         B     SCRAMBLE\n         DROP  R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONSTANTS AND WORK-AREAS                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nSVEXT    DC    2F'0'\nNCALL    DC    0F'0',CL8'AUT30'\n         SPACE 1\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT GEN\n        $AIRD  SEC=YES,R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT31": {"ttr": 4611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x10\\x1f\\x00\\x90\\x10\\x1f\\x15$\\x02>\\x02>\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-11T00:00:00", "modifydate": "1990-04-11T15:24:00", "lines": 574, "newlines": 574, "modlines": 0, "user": "SYSPAJA"}, "text": "AU31     TITLE '-- TSO-CP AUT30 - ROUTINE AUT31 --'\nAUT31    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE IS CALLED BY PROGRAM 'AUT30'.               *\n*        I CREATE A NEW AUTHORIZATION.                               *\n*                                             M.SACRE  01 OCTOBRE 84 *\n*                                          P.A.MOINIL  03 OCTOBRE 89 *\n**********************************************************************\n*        CALL AUT31,(PARM1,PARM2),VL                                 *\n*        FUNCTION : SUBROUTINE TO CREATE A NEW AUTHORIZATION.        *\n*        AT ENTRY : R1  = PARM. ADDRESS                              *\n*                         PARM. --->   A(PARM1,PARM2)                *\n*                 WHERE : PARM1 = AUTHOR. NUMBER IN EBCDIC (CL4)     *\n*                         PARM2 = AUTHOR. NUMBER IN BINARY (H)       *\n*         AT EXIT : R15 = 0 - NORMAL COMPLETION                      *\n*                         WITH R1 = ADDRESS OF TERMINATION MESSAGE   *\n*                         TEXT, IT POINTS AS BELOW :                 *\n*                                    DC  AL1(L'TEXT)                 *\n*                         ---> TEXT  DC  C'...MESSAGE...'            *\n*                         4 - END REQUESTED                          *\n*                         8 - SEVERE ERROR.                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV10     EQU   10        REDUCED SERVICES LEVEL\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R10\n         SPACE 1\n         LM    R3,R4,0(R1)             LOAD ADDRESS OF PARAMETERS\n         MVC   SCRAUT(L'SCRAUT),0(R3)  GET AUT NBR EBCDIC\n         MVC   ARGUMAUT(L'ARGUMAUT),0(R4)  GET AUT NBR BINARY\n         LA    R2,AREAR                SET ADRESSABILITY OF DSECT\n         USING AUTDSECT,R2\n         LA    R3,AREAP                SET ADRESSABILITY OF DSECT\n         USING PRGDSECT,R3\n         EJECT\n*------- INITIALIZE/RESET ALL DISPLAY INPUT FIELDS\n         OI    SWCRT+1,X'F0'           SET SWITCH TO NO CREATE\n         MVC   SCRFICH(L'SCRFICH),=CL10' '\n         MVC   SCRDTEI(L'SCRDTEI),=CL10' '\n         MVC   SCRDTEO(L'SCRDTEO),=CL10' '\n         MVC   SCRPR(L'SCRPR),=CL10' '\n         MVI   SCRPI,C'4'\n         MVI   SCRNOM,C' '\n         MVC   SCRNOM+1(L'SCRNOM-1),SCRNOM\n         MVI   ECRANM,C' '\n         MVC   ECRANM+1(L'ECRANM-1),ECRANM\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DISPLAY SCREEN ET LECTURE DES INFORMATIONS                  *\n*--------------------------------------------------------------------*\n*        DESCRIPTION DU BUFFER D'INPUT :\n*        -------------------------------\n*        LES CHAMPS SONT DANS L'INPUT AREA ET SONT DANS L'ORDRE\n*        SUIVANT S'ILS SONT TOUS PRESENTS (MODIFIES) :\n*         1 = FICHE PROGRAMME (CL10)\n*         2 = DEBUT VALIDATION (CL10) JJ/MM/AAAA\n*         3 = FIN VALIDATION (CL10) JJ/MM/AAAA\n*         4 = NUMERO PROG. RESP (CL4)\n*         5 = INCR./DECR. PRIORITE (CL1)\n         SPACE 1\nDSPLAY   OI    SWCTL+1,X'F0'           SET SWITCH TO DO CONTROL\n         LA    R1,PECRAN               DISPLAY SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\n         MVI   ECRANM,C' '\n         MVC   ECRANM+1(L'ECRANM-1),ECRANM\n         L     R15,=V(AUT99R)          GET RESPONSE(S)\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BNZ   *+L'*+12                IF NOT, GO PROCESS\nSWCRT    B     EXNONE                  ESCAPE IF NONE FIRST TIME\n         NI    SWCTL+1,X'0F'           SET SWITCH TO ALLOW WRITE\n         B     STCTRL                  GO DO A FINAL CONTROL\n         NI    SWCRT+1,X'0F'           SET SWITCH TO CREATE\n         EJECT\n*------- STORE AND TRANSLATE ALL INPUT FROM DISPLAY IN UPPER CASE\n         CLC   0(3,R15),SBAFICH\n         BNE   NOTFICH\n         LTR   R1,R1\n         BZ    FICHOK                  IGNORE IF CLEAR\n         MVC   SCRFICH(L'SCRFICH),=CL10' '\n         LA    R0,L'SCRFICH\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRFICH(*-*),3(R15)     TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\n         CLC   SCRFICH+1(L'SCRFICH-1),=CL10' '\n         BNE   FICHOK\n         CLI   SCRFICH,C'X'            ESCAPE REQUESTED ?\n         BE    EXREQ                   YES\nFICHOK   L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFICH  CLC   0(3,R15),SBADTEI\n         BNE   NOTDTEI\n         LTR   R1,R1\n         BZ    DTEIOK                  IGNORE IF CLEAR\n         MVC   SCRDTEI(L'SCRDTEI),=CL10' '\n         LA    R0,L'SCRDTEI\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRDTEI(*-*),3(R15)     TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\nDTEIOK   L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTDTEI  CLC   0(3,R15),SBADTEO\n         BNE   NOTDTEO\n         LTR   R1,R1\n         BZ    DTEOOK                  IGNORE IF CLEAR\n         MVC   SCRDTEO(L'SCRDTEO),=CL10' '\n         LA    R0,L'SCRDTEO\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRDTEO(*-*),3(R15)     TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\nDTEOOK   L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTDTEO  CLC   0(3,R15),SBAPR\n         BNE   NOTPR\n         LTR   R1,R1\n         BZ    PROK                    IGNORE IF CLEAR\n         MVC   SCRPR(L'SCRPR),=CL10' '\n         LA    R0,L'SCRPR\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRPR(*-*),3(R15)       TRANSLATE LOWER IN UPPER\n         EX    R1,*-6\nPROK     L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTPR    CLC   0(3,R15),SBAPI\n         BNE   NOTPI\n         L     R4,=V(AUT98T)\n         CLI   0(R4),LV10\n         BNH   NOTALL\n         LTR   R1,R1\n         BNZ   *+L'*+8\n         MVI   SCRPI,C'4'              SET DEFAULT\n         B     PIOK\n         MVC   SCRPI(L'SCRPI),3(R15)\n         CLI   SCRPI,C'0'              TEST IF NUMERIC\n         BL    *+L'*+8\n         CLI   SCRPI,C'9'\n         BNH   PIOK\n         MVC   ECRANM(L'ERROR11),ERROR11  SET ERROR MESSAGE\n         B     DSPLAY                  GO TO DISPLAY SCREEN\nNOTALL   MVC   ECRANM(L'ERROR12),ERROR12  SET ERROR MESSAGE\n         B     DSPLAY                  GO TO DISPLAY SCREEN\nPIOK     L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTPI    MVC   ECRANM(L'ERROR0),ERROR0 SET ERROR MESSAGE\n         B     DSPLAY                  GO TO DISPLAY SCREEN\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE ET VALIDATION DES DONNEES LUES SUR LE DISPLAY.     *\n*--------------------------------------------------------------------*\n         SPACE 1\nSTCTRL   CLC   SCRFICH(L'SCRFICH),=CL10' '  FICHE PROGR.\n         BNE   *+L'*+10                OK, NOT BLANK\n         MVC   ECRANM(L'ERROR14),ERROR14  SET ERROR MESSAGE\n         B     DSPLAY                  GO TO DISPLAY SCREEN\n*        LA    R0,L'SCRFICH\n*        LA    R1,SCRFICH+L'SCRFICH\n*        BCTR  R1,0\n*        CLI   0(R1),C'0'              TEST IF NUMERIC\n*        BL    WRAUTH\n*        CLI   0(R1),C'9'\n*        BH    WRAUTH\n*        BCT   R0,*-18\n*        B     TESTDV\nWRAUTH   EQU   *\n*        MVC   ECRANM(L'ERROR1),ERROR1 SET ERROR MESSAGE\n*        B     DSPLAY                  GO TO DISPLAY SCREEN\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE DE LA DATE DE VALIDATION DE L'AUTORISATION.        *\n*        (DATE DE DEBUT)                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\nTESTDV   MVC   MDY(2),SCRDTEI+3        MOVE MM IN WORK FIELD\n         MVC   MDY+2(2),SCRDTEI        MOVE DD IN WORK FIELD\n         MVC   MDY+4(4),SCRDTEI+6      MOVE YYYY IN WORK FIELD\n         LA    R0,L'MDY\n         LA    R1,MDY+L'MDY\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRDTEI\n         CLI   0(R1),C'9'\n         BH    WRDTEI\n         BCT   R0,*-18\n*------- ICI NOUS SAVONS QUE LA DATE EST NUMERIQUE\n*        CONTROLE QU'ELLE EST BIEN DU FORMAT NN/NN/NN\n         LA    R15,SCRDTEI\n         BAL   R14,CTDELIM             GO CONTROL DELIMITERS\n         B     VALDTEI                 +0 - GO TO DATE IS VALID\n         B     ERRDTEI                 +4 - GO TO ERROR DATE\n*------- TRANSFORMATION A SERIAL DATE.\nVALDTEI $GSDATE MDY,WCL7\n         LTR   R15,R15\n         BZ    STDTEI\n*------- FORMAT DE LA DATE NON VALIDE. SLASH NON EN BONNE PLACE.\n         MVC   ECRANM(L'ERROR3),ERROR3 SET ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- ICI, LA DATE DE DEBUT EST INVALIDE. VALEURS INVALIDES.\nERRDTEI  MVC   ECRANM(L'ERROR4),ERROR4 SET ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------ ICI, NOUS SAVONS QUE LA DATE D'ENTREE EST INVALIDE. NON NUM.\nWRDTEI   MVC   ECRANM(L'ERROR2),ERROR2 SET ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- ICI NOUS SAVONS QUE LA DATE D'ENTREE DE L'AUTORISATION\n*        EST VALIDE.\nSTDTEI   MVC   OUDTEI,WCL7             RETAIN SERIAL DATE\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE DE LA DATE DE VALIDATION DE L'AUTORISATION.        *\n*        (DATE DE FIN)                                               *\n*--------------------------------------------------------------------*\n         SPACE 1\n         MVC   MDY(2),SCRDTEO+3        MOVE MM IN WORK FIELD\n         MVC   MDY+2(2),SCRDTEO        MOVE DD IN WORK FIELD\n         MVC   MDY+4(4),SCRDTEO+6      MOVE YYYY IN WORK FIELD\n         LA    R0,L'MDY\n         LA    R1,MDY+L'MDY\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRDTEO\n         CLI   0(R1),C'9'\n         BH    WRDTEO\n         BCT   R0,*-18\n*------- ICI NOUS SAVONS QUE LA DATE EST NUMERIQUE\n*        CONTROLE QU'ELLE EST BIEN DU FORMAT NN/NN/NN\n         LA    R15,SCRDTEO\n         BAL   R14,CTDELIM             GO CONTROL DELIMITERS\n         B     VALDTEO                 +0 - GO TO DATE IS VALID\n         B     ERRDTEO                 +4 - GO TO ERROR DATE\n*------- TRANSFORMATION A SERIAL DATE.\nVALDTEO $GSDATE MDY,WCL7\n         LTR   R15,R15\n         BZ    STDTEO\n*------- FORMAT DE LA DATE NON VALIDE. SLASH NON EN BONNE PLACE.\n         MVC   ECRANM(L'ERROR6),ERROR6 SET ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- ICI, LA DATE DE SORTIE EST INVALIDE. VALEURS INVALIDES.\nERRDTEO  MVC   ECRANM(L'ERROR7),ERROR7 SET ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------ ICI, NOUS SAVONS QUE LA DATE D'ENTREE EST INVALIDE. NON NUM.\nWRDTEO   MVC   ECRANM(L'ERROR5),ERROR5 SET ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n*------- ICI NOUS SAVONS QUE LA DATE DE SORTIE DE L'AUTORISATION\n*        EST VALIDE.\nSTDTEO   MVC   OUDTEO,WCL7             RETAIN SERIAL DATE\n         MVC   WCL16(4),SCRDTEI+6      CONTROL START-END DATE\n         MVC   WCL16+4(2),SCRDTEI+3\n         MVC   WCL16+6(2),SCRDTEI\n         MVC   WCL16+8(4),SCRDTEO+6\n         MVC   WCL16+12(2),SCRDTEO+3\n         MVC   WCL16+14(2),SCRDTEO\n         CLC   WCL16(8),WCL16+8\n         BNH   *+L'*+10\n         MVC   ECRANM(L'ERROR13),ERROR13  SET ERROR MESSAGE\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE DU NUMERO DE PROGRAMMEUR RESPONSABLE.              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         LA    R0,L'SCRPR\n         LA    R1,SCRPR+L'SCRPR\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRSCRPR\n         CLI   0(R1),C'9'\n         BH    WRSCRPR\n         BCT   R0,*-18\n*------- ICI, NOUS SAVONS QUE LE NUM DU PGM RESP. EST BIEN NUMERIQUE\n*        TEST S'IL EXISTE DANS LE FICHIER DES PROGRAMMEURS AUTORISES.\n         PACK  WPL3,SCRPR              PACK NBR OF PGM RESP\n         ZAP   DSD,WPL3                ALIGN IN ADDRESS * 8\n         CVB   R5,DSD                  CONVERT PGM NBR IN BINARY\n         AH    R5,=Y(NAUTNO+1)         ADD NO. OF AUT. AT KEY\n         CH    R5,ARGUMPRG             IS IT CHANGED ?\n         BE    SWCTL                   NO\n         STH   R5,ARGUMPRG             STORE KEY IN ARGUMENT\n        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TSTEXPR                 IF ZERO, PROG. RESP EXIST\n         CH    R15,=H'15'              IS RETURN CODE 15 ?\n         BE    *+L'*+8                 BRANCH IF YES\n         LM    R2,R3,NZRD              SAY ZREAD ERROR\n         B     ERRZR\n         MVC   ECRANM(L'ERROR10),ERROR10  SET ERROR MSG\n         B     CLRNOM\nTSTEXPR  LH    R15,PRGPNO              LOAD PROGRAMMER NUMBER\n         LTR   R15,R15                 TEST SIGN\n         BP    EXISTPR                 IF ZERO, OK\n         MVC   ECRANM(L'ERROR9),ERROR9 IF YES, ERROR MSG\n         B     CLRNOM\n*------ ICI, NOUS SAVONS QUE LE NUMERO N'EST PAS NUMERIQUE\nWRSCRPR  MVC   ECRANM(L'ERROR8),ERROR8 SET ERROR MESSAGE\nCLRNOM   MVI   SCRNOM,C' '\n         MVC   SCRNOM+1(L'SCRNOM-1),SCRNOM\n         B     DSPLAY                  DISPLAY SCREEN FOR CORRECTION\nEXISTPR  MVC   SCRNOM,PRGPNME          SET PROGR. NAME\nSWCTL    B     DSPLAY\n         EJECT\n*--------------------------------------------------------------------*\n*        CREATION DE LA NOUVELLE AUTORISATION. WRITE DU RECORD.      *\n*--------------------------------------------------------------------*\n         XC    AREAR(AUTLGTH),AREAR    CLEAR RECORD AREA\n         MVC   AUTANO,ARGUMAUT         SET ARGUMENT IN RECORD\n         MVC   AUTACNO,SCRFICH         MOVE FICHE PROGRAMME\n         CLI   SCRPI,C'4'\n         BE    *+L'*+6\n         MVC   AUTPI,SCRPI             SET PRIORITY INCR/DECR\n         PACK  DSD,OUDTEI              TRANFORM EBCDIC IN PACKED\n         CVB   R1,DSD                  CONVERT PACKED IN FIXED\n         STCM  R1,B'0111',AUTVSD       REPLACE DATE\n         PACK  DSD,OUDTEO              TRANFORM EBCDIC IN PACKED\n         CVB   R1,DSD                  CONVERT PACKED IN FIXED\n         STCM  R1,B'0111',AUTVED       REPLACE DATE\n         PACK  WPL3,SCRPR              PACK NBR OF PGM RESP\n         ZAP   DSD,WPL3                ALIGN IN ADDRESS * 8\n         CVB   R1,DSD                  CONVERT PGM NBR IN BINARY\n         STH   R1,AUTPMNO              STORE IN RECORD\n         DROP  R2,R3\n        CALL  ZWRITE,(RETCD,ARGUMAUT,AREAR),VL  WRITE RECORD\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    *+L'*+8\n         LM    R2,R3,NZWR              SAY ZWRITE ERROR\n         B     ERRZR\n         LA    R1,RQHCPY               HARDCOPY OF OPERATION\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    EXSUCC\n         XR    R2,R2                   PASS HARDCOPY ERROR\n         LR    R3,R0\n         B     ERRHC\n*------- ERREUR AU MOMENT DE LA LECTURE OU DE L'ECRITURE DU RECORD.\nERRZR    LR    R0,R15\n         XR    R1,R1\nERRHC    L     R15,=V(AUT97)\n         BALR  R14,R15\n         LA    R15,8                   SAY SEVERE ERROR\n         B     LEAVE\nEXNONE   MVC   MSGSKIP+L'MSGSKIP-5(4),SCRAUT\n         LA    R1,MSGSKIP\n         B     EXSMSG\nEXREQ    MVC   MSGCBYP+L'MSGCBYP-5(4),SCRAUT\n         LA    R1,MSGCBYP\n         XR    R15,R15\n         B     EXSMSG\nEXSUCC   MVC   MSGDONE+L'MSGDONE-5(4),SCRAUT\n         LA    R1,MSGDONE\nEXSMSG   L     R2,4(R13)\n         ST    R1,24(R2)               PASS ADDRESS OF MESSAGE\nLEAVE   $XRET  CC=(R15)                RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROLE FORMAT ET VALIDITE D'UNE DATE (ROUTINE)            *\n*--------------------------------------------------------------------*\n         SPACE 1\n*        MDY = DATE IN FORMAT MMDDYYYY\n*        R15 = ADDRESS OF DATE (DD/MM/YYYY)\n*        R14 = LINK - RETURN = +0 DATE IS VALID\n*                              +4 ERROR DATE\n*                              +8 DATE IS INVALID\n*        CONTROLE QU'ELLE EST BIEN DU FORMAT DD/MM/YYYY\nCTDELIM  CLI   2(R15),C'/'             IS / PRESENT ?\n         BE    CTDLM2                  YES\n         CLI   2(R15),C' '             IS BLANK PRESENT ?\n         BE    CTDLM1                  YES\n         CLI   2(R15),C'.'             IS PERIOD PRESENT ?\n         BE    CTDLM1                  YES\n         CLI   2(R15),C'-'             IS - PRESENT ?\n         BNE   8(R14)                  IF NOT, GO TO INVALID DATE\nCTDLM1   MVI   2(R15),C'/'             SET / IN PLACE\nCTDLM2   CLI   5(R15),C'/'             IS PRESENT SECOND / ?\n         BE    CTDLM4                  YES\n         CLI   5(R15),C' '             IS PRESENT SECOND BLANK ?\n         BE    CTDLM3                  YES\n         CLI   5(R15),C'.'             IS PRESENT SECOND PERIOD ?\n         BE    CTDLM3                  YES\n         CLI   5(R15),C'-'             IS PRESENT SECOND - ?\n         BNE   8(R14)                  IF NOT, GO TO INVALID DATE\nCTDLM3   MVI   5(R15),C'/'             SET / IN PLACE\n*------- ICI NOUS SOMMES CERTAINS QUE LE FORMAT DE LA DATE EST BON\n*        ET QU'ELLE EST NUMERIQUE.\n*        CONTROLE DE LA VRAISEMBLANCE DE LA DATE\n*    NB. LA DATE EGALE A 99/99/9999 EST VALIDE (SIGNIFIE L'INFINI).\nCTDLM4   CLC   MDY,=C'99999999'        COMPARE WITH 99/99/9999\n         BER   R14                     IF EQUAL, DATE IS VALID\n*------- ICI LES JOURS ET MOIS NE SONT PAS EGAUX A 99\n         CLC   MDY+2(2),=C'31'         IS DAY > 31 ?\n         BH    4(R14)                  IF YES, GO TO ERROR DATE\n         CLC   MDY+2(2),=C'01'         IS DAY < 01 ?\n         BL    4(R14)                  IF YES, GO TO ERROR DATE\n         CLC   MDY(2),=C'12'           IS MONTH > 12 ?\n         BH    4(R14)                  IF YES, GO TO ERROR DATE\n         CLC   MDY(2),=C'01'           IS MONTH < 01 ?\n         BL    4(R14)                  IF YES, GO TO ERROR DATE\n*------- ICI, LA DATE EST VRAISEMBLABLE\n         BR    R14                     BACK, DATE IS VALID\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nPECRAN   DC    A(LECRAN,ECRAN)\nRETCD    DC    F'0'          RETURN CODE\nNZRD     DC    0F'0',CL8'ZREAD'\nNZWR     DC    0F'0',CL8'ZWRITE'\nAREAR    DC    (AUTLGTH)X'0'\nAREAP    DC    (PRGLGTH)X'0'\nMDY      DC    CL8' '        MMDDYYYY\nARGUMAUT DC    H'0'          AUTH NBR\nARGUMPRG DC    H'0'          RESP. PROGR NBR\nOUDTEI   DC    CL7' '\nOUDTEO   DC    CL7' '\nWPL3     DC    PL3'+0'\nWCL7     DC    CL7' '\nWCL16    DC    CL16' '\n         SPACE 1\n*--------------------------------------------------------------------*\n*        HARDCOPY REQUESTS.                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nRQHCPY   DC    AL1(1),AL4(ARGUMAUT,AREAR)   CREATE AUTHORIZATION.\n         EJECT\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nERROR0   DC    C'Input scan SBA order not found ???'\nERROR1   DC    C'Fiche Programme NON Num!rique.'\nERROR2   DC    C'DATE de DEBUT non  N U M E R I Q U E |'\nERROR3   DC    C'DATE de DEBUT mal format!e (JJ/MM/AAAA)'\nERROR4   DC    C'DATE de DEBUT avec valeurs invalides.'\nERROR5   DC    C'DATE de FIN non  N U M E R I Q U E |'\nERROR6   DC    C'DATE de FIN mal format!e (JJ/MM/AAAA)'\nERROR7   DC    C'DATE de FIN avec valeurs invalides.'\nERROR8   DC    C'Num!ro du Progr. RESP. NON Num!rique |'\nERROR9   DC    C'Le Num!ro du PROG. RESP. est INVALIDE |'\nERROR10  DC    C'Le Num!ro du PROG. RESP. n''existe pas |'\nERROR11  DC    C'Invalid Priority Number|'\nERROR12  DC    C'Sorry, you can''t change Priority|'\nERROR13  DC    C'DATE de DEBUT d!passe DATE de FIN'\nERROR14  DC    C'D!finissez la Fiche Programme S.V.P. |||'\n         DC    AL1(L'MSGDONE)\nMSGDONE  DC    C'CREATE is successfully done - Authorization :     .'\n         DC    AL1(L'MSGSKIP)\nMSGSKIP  DC    C'CREATE bypassed - None set - Authorization :     .'\n         DC    AL1(L'MSGCBYP)\nMSGCBYP  DC    C'CREATE bypassed - Escape... - Authorization :     .'\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRAN D'INTRODUCTION D'UNE NOUVELLE AUTORISATION.           *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='AUTHORIZATION     C R E A T E',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,1),SF=(PROT),TEXT='Authorization Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRAUT  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,1),SF=(PROT),TEXT='Fiche Programme :',MF=L\n        $FS    SF=(INT),MF=L\nSBAFICH $FS    SBA=(7,20),MF=L\nSCRFICH $FS    TEXT=(' ',10),MF=L\n        $FS    SF=(PROT),TEXT='< (or enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='X',MF=L\n        $FS    SF=(PROT),TEXT='to escape)',MF=L\n        $FS    SBA=(9,1),SF=(PROT),MF=L\n        $FS    TEXT='DATE de DEBUT de validation (JJ/MM/AAAA) :',MF=L\n        $FS    SF=(INT),MF=L\nSBADTEI $FS    SBA=(9,45),MF=L\nSCRDTEI $FS    TEXT=(' ',10),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(10,3),SF=(PROT),MF=L\n        $FS    TEXT='DATE de FIN de validation (JJ/MM/AAAA) :',MF=L\n        $FS    SF=(INT),MF=L\nSBADTEO $FS    SBA=(10,45),MF=L\nSCRDTEO $FS    TEXT=(' ',10),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(12,1),SF=(PROT),MF=L\n        $FS    TEXT='Responsible Programmer :',MF=L\n        $FS    SF=(INT),MF=L\nSBAPR   $FS    SBA=(12,27),MF=L\nSCRPR   $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(13,1),SF=(PROT),TEXT='Resp. Name :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRNOM  $FS    TEXT=(' ',40),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(15,1),SF=(PROT),MF=L\n        $FS    TEXT='Priority Increment/Decrement (0-9) :',MF=L\n        $FS    SF=(INT),MF=L\nSBAPI   $FS    SBA=(15,39),MF=L\nSCRPI   $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(16,1),SF=(PROT,INT),TEXT='Note :',MF=L\n        $FS    SF=(PROT),TEXT='a priority of 4=+0, 0=-4 and ',MF=L\n        $FS    TEXT='9=+5 at Jobs execution scheduling time.',MF=L\n        $FS    SBA=(18,1),SF=(PROT,INT),MF=L\nECRANM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(20,1),SF=(PROT),MF=L\n        $FS    TEXT='Type in needed data and hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='until they are correct, ',MF=L\n        $FS    TEXT='then hit only',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SBA=(21,1),SF=(PROT),MF=L\n        $FS    TEXT='to create the Authorization, ',MF=L\n        $FS    TEXT='or use at any time',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(22,1),SF=(PROT),MF=L\n        $FS    TEXT='As soon as you have created the ',MF=L\n        $FS    TEXT='Authorization, you may then define the',MF=L\n        $FS    SBA=(23,1),SF=(PROT),MF=L\n        $FS    TEXT='Programmers Numbers through the',MF=L\n        $FS    SF=(PROT,INT),TEXT='UPDATE',MF=L\n        $FS    SF=(PROT),TEXT='process.',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT GEN\n        $AIRD  SEC=YES,R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT32": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x01o\\x00\\x91\\x01o\\x15\\x14\\x06\\x18\\x06\\x18\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-01-16T00:00:00", "modifydate": "1991-01-16T15:14:00", "lines": 1560, "newlines": 1560, "modlines": 0, "user": "SYSPAJA"}, "text": "AU32     TITLE '-- TSO-CP AUT30 - ROUTINE AUT32 --'\nAUT32    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE IS CALLED BY PROGRAM 'AUT30'.               *\n*        I ACCESS THE FILE BY PROGRAMMER NUMBER.                     *\n*                                             M.SACRE  01 OCTOBRE 84 *\n*                                          P.A.MOINIL  13 OCTOBRE 89 *\n**********************************************************************\n*        CALL AUT32                                                  *\n*        FUNCTION : SUBROUTINE TO CREATE OR UPDATE A PROGRAMMER.     *\n*        AT ENTRY : NONE                                             *\n*         AT EXIT : R15 = 0 - NORMAL COMPLETION                      *\n*                         WITH R1 = 0 TO SAY NO MESSAGE, OR          *\n*                              R1 = ADDRESS OF TERMINATION MESSAGE   *\n*                              TEXT, WHICH POINTS AS BELOW :         *\n*                                         DC  AL1(L'TEXT)            *\n*                              ---> TEXT  DC  C'...MESSAGE...'       *\n*                         4 - END REQUESTED                          *\n*                         8 - SEVERE ERROR.                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R10,R11,R12)\n         SPACE 1\n         MVI   ECRINM,C' '\n         MVC   ECRINM+1(L'ECRINM-1),ECRINM\nASKPGM   LA    R1,PECRIN               ASK PGM NUMBER\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BNZ   PRCESS                  IF NOT, SEE WHAT\nQUIT     XR    R15,R15                 IF YES, ESCAPE\n         L     R2,4(R13)\n         XC    24(4,R2),24(R2)         SET R1 = 0\n         B     LEAVE\nPRCESS   LTR   R1,R1                   NO TEXT ?\n         BZ    QUIT                    YES, ESCAPE\n         MVC   WCL4(4),=CL40' '\n         BCT   R1,*+L'*+6\n         MVC   WCL4(*-*),3(R15)\n         EX    R1,*-6\n         CLC   WCL4(4),=CL40' '        IS RESPONSE = BLANK ?\n         BE    QUIT                    YES, ESCAPE\n         MVI   ECRINM,C' '\n         MVC   ECRINM+1(L'ECRINM-1),ECRINM\n         LA    R0,L'WCL4\n         LA    R1,WCL4+L'WCL4\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRPGMN\n         CLI   0(R1),C'9'\n         BH    WRPGMN\n         BCT   R0,*-18\n*------- ICI, ON SAIT QUE L'ENTREE EST NUMERIQUE.\n*        RECHERCHE DU NUMERO DE PROGRAMMEUR DANS LE FICHIER\n*        D'ACCOUNTING.\n         MVC   PGMCHAR,WCL4\n         PACK  DSD,WCL4                PACK PROGR. NBR\n         CVB   R1,DSD\n         AH    R1,=Y(NAUTNO+1)         ADD NO. OF AUT. AT KEY\n         STH   R1,ARGUMPRG             STORE IN ARGUMENT\n        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ RECORD\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    FNDRC                   IF ZERO, PROGR. FOUND\n         CH    R15,=H'15'              IF 15 = ARGUMENT NOT FOUND\n         BE    ASKCREA                 IF EQUAL, ASK TO CREATE IT\n         LM    R2,R3,NZRD              IF NOT, SAY ZREAD ERROR\n         B     ERRZR                   GO DISPLAY Z... MESSAGE\nWRPGMN   MVC   ECRINM(L'MSGPN1),MSGPN1 PROGRAMMER NUMBER NOT NUMERIC\n         B     ASKPGM                  BRANCH TO ASK PRG. NO.\n         EJECT\n*--------------------------------------------------------------------*\n*        PROGR. NOT FOUND, ASK IF HE WANTS TO CREATE IT              *\n*--------------------------------------------------------------------*\n         SPACE 1\nASKCREA  LA    R1,PECRAW               ASK IF CREATING PROGR. NBR.\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\n         MVI   ECRAWM,C' '\n         MVC   ECRAWM+1(L'ECRAWM-1),ECRAWM\n         L     R15,=V(AUT99R)          GET RESPONSE\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    ASKPGM                  IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    ASKPGM                  YES, ESCAPE\n         MVC   RESPONSE(1),3(R15)\n         OI    RESPONSE,C' '           TRANSLATE LOWER CASE IN UPPER\n         CLI   RESPONSE,C'Y'           IS RESPONSE = Y ?\n         BE    EXCREA                  IF YES, CREATE NEW PROGR.\n         CLI   RESPONSE,C' '           IS RESPONSE BLANK ?\n         BE    ASKPGM                  IF YES, ESCAPE\n         MVC   ECRAWM(L'MSGRSP),MSGRSP IF NOT, RE-ASK\n         MVC   ECRAWM+L'MSGRSP-5(1),RESPONSE\n         B     ASKCREA\n         EJECT\n*--------------------------------------------------------------------*\n*        NOUS ALLONS CREER UN NOUVEAU PROGRAMMEUR.                   *\n*--------------------------------------------------------------------*\n         SPACE 1\nEXCREA   OI    SWCRT+1,X'F0'           SET SWITCH TO NO CREATE\n         MVC   SCRPGM,PGMCHAR          INIT PGM NUMBER\n         MVC   SCRNOM,=CL40' '         CLEAR PGM NAME\n         MVC   SCRMAT(L'SCRMAT),=CL40' '  CLEAR MATRICULE\n         MVC   SCRBOX,=CL3'000'        INIT BOX NUMBER\n         MVC   SCRBLD(L'SCRBLD),=CL40' '  CLEAR BUILDING\n         MVC   SCRTEL(L'SCRTEL),=CL40' '  INIT PHONE NUMBER\n         MVC   SCRSERV(L'SCRSERV),=CL40' '  CLEAR SERVICE\n         MVI   ECRANM,C' '\n         MVC   ECRANM+1(L'ECRANM-1),ECRANM\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DISPLAY SCREEN ET LECTURE DES INFORMATIONS                  *\n*--------------------------------------------------------------------*\n*        DESCRIPTION DU BUFFER D'INPUT :\n*        -------------------------------\n*        LES CHAMPS SONT DANS L'INPUT AREA ET SONT DANS L'ORDRE\n*        SUIVANT S'ILS SONT TOUS PRESENTS (MODIFIES) :\n*         1 = NOM DU PROGRAMMEUR (CL40)\n*         2 = NUMERO DE MATRICULE (CL6)\n*         3 = BOX NUMBER (CL3)\n*         4 = BUILDING NUMBER (CL6)\n*         5 = PHONE NUMBER (CL9)\n*         6 = SERVICE NUMBER (CL8)\n         SPACE 1\nDSPLAY   OI    SWCTL+1,X'F0'           SET SWITCH TO DO CONTROL\n         LA    R1,PECRAN               DISPLAY SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\n         MVI   ECRANM,C' '\n         MVC   ECRANM+1(L'ECRANM-1),ECRANM\n         L     R15,=V(AUT99R)          GET RESPONSE(S)\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BNZ   *+L'*+12                IF NOT, GO PROCESS\nSWCRT    B     CRNONE                  ESCAPE IF NONE FIRST TIME\n         NI    SWCTL+1,X'0F'           SET SWITCH TO ALLOW WRITE\n         B     STCTRL                  GO DO A FINAL CONTROL\n         NI    SWCRT+1,X'0F'           SET SWITCH TO CREATE\n         EJECT\n*------- STORE AND TRANSLATE ALL INPUT FROM DISPLAY IN UPPER CASE\n         CLC   0(3,R15),ASBANM\n         BNE   NOTNME\n         LTR   R1,R1\n         BZ    NMEOK                   IGNORE IF CLEAR\n         MVC   SCRNOM,=CL40' '\n         LA    R0,L'SCRNOM\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRNOM(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\n         CLC   SCRNOM+1(L'SCRNOM-1),=CL40' '\n         BNE   NMEOK\n         CLI   SCRNOM,C'X'             ESCAPE REQUESTED ?\n         BNE   NMEOK                   NO\n         LA    R1,WCRTE                YES\n         B     EXREQ\nNMEOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTNME   CLC   0(3,R15),ASBAMT\n         BNE   NOTMAT\n         MVC   SCRMAT(L'SCRMAT),=CL40' '\n         LTR   R1,R1\n         BZ    MATOK\n         LA    R0,L'SCRMAT\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         LA    R14,SCRMAT+L'SCRMAT\n         SLR   R14,R1\n         BCT   R1,*+L'*+6\n         OC    0(*-*,R14),3(R15)       TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nMATOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTMAT   CLC   0(3,R15),ASBABX\n         BNE   NOTBOX\n         MVC   SCRBOX,=CL3'000'\n         LTR   R1,R1\n         BZ    BOXOK\n         LA    R0,L'SCRBOX\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRBOX(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nBOXOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTBOX   CLC   0(3,R15),ASBABN\n         BNE   NOTBLD\n         MVC   SCRBLD(L'SCRBLD),=CL40' '\n         LTR   R1,R1\n         BZ    BLDOK\n         LA    R0,L'SCRBLD\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRBLD(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nBLDOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTBLD   CLC   0(3,R15),ASBATL\n         BNE   NOTTEL\n         MVC   SCRTEL(L'SCRTEL),=CL40' '\n         LTR   R1,R1\n         BZ    TELOK\n         LA    R0,L'SCRTEL\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRTEL(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nTELOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTTEL   CLC   0(3,R15),ASBASV\n         BNE   NOTSERV\n         MVC   SCRSERV(L'SCRSERV),=CL40' '\n         LTR   R1,R1\n         BZ    SERVOK\n         LA    R0,L'SCRSERV\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRSERV(*-*),3(R15)     TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nSERVOK   L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    STCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTSERV  MVC   ECRANM(L'ERROR0),ERROR0 SET ERROR MESSAGE\n         B     DSPLAY\n         EJECT\n*------- CONTROLE ET VALIDATION DES DONNEES LUES SUR LE DISPLAY\nSTCTRL   CLC   SCRNOM,=CL40' '         NOM DU PROGRAMMEUR ?\n         BNE   CHKMAT                  OK, NOT BLANK\n         MVC   ECRANM(L'ERROR1),ERROR1 SET ERROR MESSAGE\n         B     DSPLAY\nWRMAT    MVC   ECRANM(L'ERROR2),ERROR2 SET ERROR MESSAGE\n         B     DSPLAY\nWRBOX    MVC   ECRANM(L'ERROR3),ERROR3 SET ERROR MESSAGE\n         B     DSPLAY\nCHKMAT   CLC   SCRMAT(L'SCRMAT),=CL40' '  MATRICULE NUMBER\n         BE    CHKBOX\n         CLI   SCRMAT,C'E'\n         BE    CHKBOX\n         LA    R0,L'SCRMAT\n         LA    R1,SCRMAT+L'SCRMAT\nNXTMAT   BCTR  R1,0\n         CLI   0(R1),C' '              TEST IF BLANK AHEAD\n         BE    *+L'*+16\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRMAT\n         CLI   0(R1),C'9'\n         BH    WRMAT\n         BCT   R0,NXTMAT\nCHKBOX   LA    R0,L'SCRBOX             BOX NUMBER\n         LA    R1,SCRBOX+L'SCRBOX\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRBOX\n         CLI   0(R1),C'9'\n         BH    WRBOX\n         BCT   R0,*-18\nSWCTL    B     DSPLAY\n         EJECT\n*--------------------------------------------------------------------*\n*        CREATION DU NOUVEAU PROGRAMMEUR. WRITE DU RECORD.           *\n*--------------------------------------------------------------------*\n         XC    AREAP(PRGLGTH),AREAP    CLEAR RECORD AREA\n         LA    R3,AREAP                SET ADRESSABILITY OF DSECT\n         USING PRGDSECT,R3\n         PACK  DSD,PGMCHAR\n         CVB   R1,DSD\n         STH   R1,PRGPNO               SET PROGR. NUMBER\n         MVC   PRGMNO,SCRMAT           MATRICULE\n         MVC   PRGBXNO,SCRBOX          BOX\n         MVC   PRGPNME,SCRNOM          NAME\n         MVC   PRGBDNO,SCRBLD          BUILDING\n         MVC   PRGPHNO,SCRTEL          PHONE\n         MVC   PRGSVNO,SCRSERV         SERVICE\n         DROP  R3\n        CALL   ZWRITE,(RETCD,ARGUMPRG,AREAP),VL  WRITE RECORD\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ZWERR\n         LA    R1,RQHCPY1              HARDCOPY OF OPERATION\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   *+L'*+8\n         LA    R1,WCRTE\n         B     EXSUCC\n         XR    R2,R2                   PASS HARDCOPY ERROR\n         LR    R3,R0\n         B     SCRAMBLE\nZWERR    LM    R2,R3,NZWR              SAY ZWRITE ERROR\n*------- ERREUR AU MOMENT DE LA LECTURE OU DE L'ECRITURE DU RECORD.\nERRZR    LR    R0,R15\n         XR    R1,R1\nSCRAMBLE L     R15,=V(AUT97)\n         BALR  R14,R15\n         LA    R15,8                   SAY SEVERE ERROR\nLEAVE   $XRET  CC=(R15)                RETURN\nUPNONE   LA    R1,WUPTE\n         B     EXNONE\nCRNONE   LA    R1,WCRTE\nEXNONE   MVC   ECRINM(L'MSGSKIP),MSGSKIP\n         MVC   ECRINM+L'MSGSKIP-5(4),PGMCHAR\n         B     EXBACK\nEXREQ    MVC   ECRINM(L'MSGBYPS),MSGBYPS\n         MVC   ECRINM+L'MSGBYPS-5(4),PGMCHAR\n         B     EXBACK\nEXSUCC   MVC   ECRINM(L'MSGDONE),MSGDONE\n         MVC   ECRINM+L'MSGDONE-5(4),PGMCHAR\nEXBACK   MVC   ECRINM(6),0(R1)\n         B     ASKPGM\n         EJECT\n*--------------------------------------------------------------------*\n*        TROUVE LE PROGRAMMEUR DANS LE FICHIER.                      *\n*--------------------------------------------------------------------*\n         SPACE 1\nFNDRC    MVC   AREAPO(PRGLGTH),AREAP   SET FOR HARDCOPY\n         OI    SWUPD+1,X'F0'           SET SWITCH TO NO UPDATE\n         LA    R3,AREAP                SET ADRESSABILITY OF DSECT\n         USING PRGDSECT,R3\n         LH    R1,PRGPNO               PGM NUMBER\n         LTR   R1,R1\n         BNP   *+L'*+8\n         MVI   SCRFSI,C' '\n         B     *+L'*+4\n         MVI   SCRFSI,C'I'             SAY INVALIDATED\n         MVC   SCRFPG,PGMCHAR          INIT PGM NUMBER\n         MVC   SCRFNM,PRGPNME          SET PGM NAME\n         MVC   SCRFMT,PRGMNO           SET MATRICULE\n         MVC   SCRFBX,PRGBXNO          SET BOX NUMBER\n         MVC   SCRFBN,PRGBDNO          SET BUILDING\n         MVC   SCRFTL,PRGPHNO          SET PHONE NUMBER\n         MVC   SCRFSV,PRGSVNO          SET SERVICE\n         MVI   MSG1,C' '               CLEAR MESSAGE FIELDS\n         MVC   MSG1+1(L'MSG1-1),MSG1\n         MVC   MSG2,MSG1\n         MVI   ECRFNM,C' '\n         MVC   ECRFNM+1(L'ECRFNM-1),ECRFNM\n*------- RETAIN ALL INITIAL VALUES.\n         MVC   INSI,SCRFSI\n         MVC   INNM,SCRFNM\n         MVC   INMT,SCRFMT\n         MVC   INBX,SCRFBX\n         MVC   INBN,SCRFBN\n         MVC   INTL,SCRFTL\n         MVC   INSV,SCRFSV\n         EJECT\n*--------------------------------------------------------------------*\n*        DISPLAY SCREEN ET LECTURE DES INFORMATIONS                  *\n*--------------------------------------------------------------------*\n*        DESCRIPTION DU BUFFER D'INPUT :\n*        -------------------------------\n*        LES CHAMPS SONT DANS L'INPUT AREA ET SONT DANS L'ORDRE\n*        SUIVANT S'ILS SONT TOUS PRESENTS (MODIFIES) :\n*         1 = FLAG DE SUPPRESSION, INVALIDATION DU PROGRAMMEUR :\n*                  D OU I (CL1)\n*         2 = NOM DU PROGRAMMEUR (CL40)\n*         3 = NUMERO DE MATRICULE (CL6)\n*         4 = BOX NUMBER (CL3)\n*         5 = BUILDING NUMBER (CL6)\n*         6 = PHONE NUMBER (CL9)\n*         7 = SERVICE NUMBER (CL8)\n         SPACE 1\nDPLAY    OI    SWUCT+1,X'F0'           SET SWITCH TO DO CONTROL\n         LA    R1,PECRFN               DISPLAY SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\n         MVI   MSG1,C' '               CLEAR MESSAGE FIELDS\n         MVC   MSG1+1(L'MSG1-1),MSG1\n         MVC   MSG2,MSG1\n         MVI   ECRFNM,C' '\n         MVC   ECRFNM+1(L'ECRFNM-1),ECRFNM\n         L     R15,=V(AUT99R)          GET RESPONSE(S)\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BNZ   *+L'*+12                IF NOT, GO PROCESS\nSWUPD    B     UPNONE                  ESCAPE IF NONE FIRST TIME\n         NI    SWUCT+1,X'0F'           SET SWITCH TO ALLOW WRITE\n         B     UPCTRL                  GO DO A FINAL CONTROL\n         NI    SWUPD+1,X'0F'           SET SWITCH TO UPDATE\n         EJECT\n*------- STORE AND TRANSLATE ALL INPUT FROM DISPLAY IN UPPER CASE\n         CLC   0(3,R15),ASBFSI\n         BNE   NOTFSI\n         MVI   SCRFSI,C' '\n         LTR   R1,R1\n         BZ    *+L'*+6                 CLEAR OK\n         OC    SCRFSI(1),3(R15)        TRANSLATE LOWER CASE TO UPPER\n         CLI   SCRFSI,C'D'             IS IT 'D' ?\n         BE    WDELET                  IF YES, GO TO DELETE RECORD\n         CLI   SCRFSI,C'X'             IS IT 'X' ?\n         BNE   *+L'*+8                 IF NOT, CONTINUE\n         LA    R1,WUPTE                YES, ESCAPE\n         B     EXREQ\n         L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    UPCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFSI   CLC   0(3,R15),ASBFNM\n         BNE   NOTFNM\n         LTR   R1,R1\n         BZ    FNMOK                   IGNORE IF CLEAR\n         MVC   SCRFNM,=CL40' '\n         LA    R0,L'SCRFNM\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRFNM(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nFNMOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    UPCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFNM   CLC   0(3,R15),ASBFMT\n         BNE   NOTFMT\n         MVC   SCRFMT(L'SCRFMT),=CL40' '\n         LTR   R1,R1\n         BZ    FMTOK\n         LA    R0,L'SCRFMT\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         LA    R14,SCRFMT+L'SCRFMT\n         SLR   R14,R1\n         BCT   R1,*+L'*+6\n         OC    0(*-*,R14),3(R15)       TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nFMTOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    UPCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFMT   CLC   0(3,R15),ASBFBX\n         BNE   NOTFBX\n         MVC   SCRFBX,=CL3'000'\n         LTR   R1,R1\n         BZ    FBXOK\n         LA    R0,L'SCRFBX\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRFBX(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nFBXOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    UPCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFBX   CLC   0(3,R15),ASBFBN\n         BNE   NOTFBN\n         MVC   SCRFBN(L'SCRFBN),=CL40' '\n         LTR   R1,R1\n         BZ    FBNOK\n         LA    R0,L'SCRFBN\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRFBN(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nFBNOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    UPCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFBN   CLC   0(3,R15),ASBFTL\n         BNE   NOTFTL\n         MVC   SCRFTL(L'SCRFTL),=CL40' '\n         LTR   R1,R1\n         BZ    FTLOK\n         LA    R0,L'SCRFTL\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRFTL(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nFTLOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    UPCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFTL   CLC   0(3,R15),ASBFSV\n         BNE   NOTFSV\n         MVC   SCRFSV(L'SCRFSV),=CL40' '\n         LTR   R1,R1\n         BZ    FSVOK\n         LA    R0,L'SCRFSV\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    SCRFSV(*-*),3(R15)      TRANSLATE LOWER TO UPPER\n         EX    R1,*-6\nFSVOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    UPCTRL                  IF YES, ALL CHANGE RECEIVED\nNOTFSV   MVC   ECRFNM(L'ERROR0),ERROR0 SET ERROR MESSAGE\n         B     DPLAY\n         EJECT\n*------- CONTROLE ET VALIDATION DES DONNEES LUES SUR LE DISPLAY\nUPCTRL   CLI   SCRFSI,C' '             IS IT BLANK ?\n         BE    VALSI                   IF YES, IT IS VALID\n         CLI   SCRFSI,C'I'             IF NO, IS IT 'I' ?\n         BE    VALSI                   IF YES, IT IS VALID\n         MVC   ECRFNM(L'ERROR4),ERROR4 SET ERROR MESSAGE\n         B     DPLAY\nVALSI    CLC   SCRFNM,=CL40' '         NOM DU PROGRAMMEUR ?\n         BNE   CHKFMT                  OK, NOT BLANK\n         MVC   ECRFNM(L'ERROR1),ERROR1 SET ERROR MESSAGE\n         B     DPLAY\nWRFMT    MVC   ECRFNM(L'ERROR2),ERROR2 SET ERROR MESSAGE\n         B     DPLAY\nWRFBX    MVC   ECRFNM(L'ERROR3),ERROR3 SET ERROR MESSAGE\n         B     DPLAY\nCHKFMT   CLC   SCRFMT(L'SCRFMT),=CL40' '  MATRICULE NUMBER\n         BE    CHKFBX\n         CLI   SCRFMT,C'E'\n         BE    CHKFBX\n         LA    R0,L'SCRFMT\n         LA    R1,SCRFMT+L'SCRFMT\nNXTFMT   BCTR  R1,0\n         CLI   0(R1),C' '              TEST IF BLANK AHEAD\n         BE    NXSFMT\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRFMT\n         CLI   0(R1),C'9'\n         BH    WRFMT\nNXSFMT   BCT   R0,NXTFMT\nCHKFBX   LA    R0,L'SCRFBX             BOX NUMBER\n         LA    R1,SCRFBX+L'SCRFBX\nCHKLBX   BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRFBX\n         CLI   0(R1),C'9'\n         BH    WRFBX\n         BCT   R0,CHKLBX\nSWUCT    B     DPLAY\n         EJECT\n*------- SEE IF SOME INITIAL VALUES CHANGED.\n         NI    CMSWW+1,X'0F'\n         CLC   INSI,SCRFSI\n         BE    CMBXN\n         CLI   INSI,C' '\n         BNE   CMSET\n         L     R15,=A(EXTCTL)          * * * EXTENDED CONTROL * * *\n         BALR  R14,R15                 * * * EXTENDED CONTROL * * *\n         DC    Y(CHKINP-EXTCTL)        * * * EXTENDED CONTROL * * *\nCMSET    OI    CMSWW+1,X'F0'\nCMBXN    CLC   INBX,SCRFBX\n         BE    CMSWW\n         CLC   INBX(L'INBX),=CL40' '\n         BE    CMBXS\n         L     R15,=A(EXTCTL)          * * * EXTENDED CONTROL * * *\n         BALR  R14,R15                 * * * EXTENDED CONTROL * * *\n         DC    Y(CHKPBX-EXTCTL)        * * * EXTENDED CONTROL * * *\nCMBXS    OI    CMSWW+1,X'F0'\nCMSWW    NOP   EXWRT\n         CLC   INNM,SCRFNM\n         BNE   EXWRT\n         CLC   INMT,SCRFMT\n         BNE   EXWRT\n         CLC   INBN,SCRFBN\n         BNE   EXWRT\n         CLC   INTL,SCRFTL\n         BNE   EXWRT\n         CLC   INSV,SCRFSV\n         BNE   EXWRT\n         MVC   ECRINM(L'MSGUPDN),MSGUPDN\n         MVC   ECRINM+L'MSGUPDN-5(4),PGMCHAR\n         B     ASKPGM\n         EJECT\n*--------------------------------------------------------------------*\n*        UPDATE PROGRAMMER IN FILE.                                  *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- TEST IF PROGRAMMER CAN BE INVALIDATED IF REQUESTED.\nEXWRT    CLI   SCRFSI,C'I'             INVALIDATE REQUESTED ?\n         BNE   TSTUPD                  NO\n         BAL   R9,SEARCH               YES, COLLECT ALL AUT. NO.S\n         L     R1,=A(VECTI)            ADDRESS OF VECTOR\nSCUPD    OC    0(L'VECTI,R1),0(R1)     END OF VECTOR ?\n         BZ    OKUPD                   YES\n         TM    0(R1),FLRESP            IS IT A RESP. PROGR. ?\n         BO    *+L'*+8                 YES, CANNOT DELETE\n         LA    R1,L'VECTI(R1)          JUMP TO NEXT VECTOR ELEMENT\n         B     SCUPD\n         MVC   MSGREJ(6),WUPTE\n         MVC   MSGREJ+L'MSGREJ-5(4),PGMCHAR\nEXREJ    LA    R1,MSGREJ\n         L     R2,4(R13)\n         ST    R1,24(R2)               PASS ADDRESS OF MESSAGE\n         XR    R15,R15\n         B     LEAVE\n*------- TEST IF PROGRAMMER MUST BE REACTIVATED SOMEWHERE.\nTSTUPD   CLI   INSI,C'I'               WAS PROGR. PREVIOUSLY INVALID ?\n         BNE   BLDUPD                  NO\n         BAL   R9,SEARCH               YES, COLLECT ALL AUT. NO.S\n         L     R1,=A(VECTI)            ADDRESS OF VECTOR\nUPDSC    OC    0(L'VECTI,R1),0(R1)     END OF VECTOR ?\n         BZ    BLDUPD                  YES, NONE FOUND\n         TM    0(R1),FLINVP            IS IT IN PROGR. INVALID ?\n         BO    OKUPD                   YES, GO REACTIVE\n         LA    R1,L'VECTI(R1)          JUMP TO NEXT VECTOR ELEMENT\n         B     UPDSC\nOKUPD    BAL   R9,CORRECT              GO CORRECT ALL AUT.\n*------- BUILD PROGRAMMER UPDATE RECORD.\nBLDUPD   XC    AREAP(PRGLGTH),AREAP    CLEAR RECORD AREA\n         PACK  DSD,PGMCHAR\n         CVB   R1,DSD\n         CLI   SCRFSI,C'I'             INVALIDATE REQUESTED ?\n         BNE   *+L'*+2                 NO\n         LNR   R1,R1                   YES, SET NEGATIVE\n         STH   R1,PRGPNO               SET PROGR. NUMBER\n         MVC   PRGMNO,SCRFMT           MATRICULE\n         MVC   PRGBXNO,SCRFBX          BOX\n         MVC   PRGPNME,SCRFNM          NAME\n         MVC   PRGBDNO,SCRFBN          BUILDING\n         MVC   PRGPHNO,SCRFTL          PHONE\n         MVC   PRGSVNO,SCRFSV          SERVICE\n         DROP  R3\n        CALL   ZWRITE,(RETCD,ARGUMPRG,AREAP),VL  WRITE RECORD\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ZWERR                   SAY ZWRITE ERROR\n         LA    R1,RQHCPY2              HARDCOPY OF OPERATION\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   *+L'*+8\n         LA    R1,WUPTE\n         B     EXSUCC\n         XR    R2,R2                   PASS HARDCOPY ERROR\n         LR    R3,R0\n         B     SCRAMBLE\n         EJECT\n*--------------------------------------------------------------------*\n*        DELETE PROGRAMMER FROM FILE.                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- TEST IF PROGRAMMER CAN BE DELETED.\nWDELET   CLI   INSI,C'I'               INVALID PRG.?\n         BE    DLPOK                   YES\n         L     R15,=A(EXTCTL)          * * * EXTENDED CONTROL * * *\n         BALR  R14,R15                 * * * EXTENDED CONTROL * * *\n         DC    Y(CHKDLP-EXTCTL)        * * * EXTENDED CONTROL * * *\nDLPOK    BAL   R9,SEARCH               COLLECT ALL AUT. NO.S\n         L     R1,=A(VECTI)            ADDRESS OF VECTOR\nSCDLT    OC    0(L'VECTI,R1),0(R1)     END OF VECTOR ?\n         BZ    OKDLT                   YES\n         TM    0(R1),FLRESP            IS IT A RESP. PROGR. ?\n         BO    *+L'*+8                 YES, CANNOT DELETE\n         LA    R1,L'VECTI(R1)          JUMP TO NEXT VECTOR ELEMENT\n         B     SCDLT\n         MVC   MSGREJ(6),WDLTE\n         MVC   MSGREJ+L'MSGREJ-5(4),PGMCHAR\n         B     EXREJ\n*------- PROGRAMMER CAN BE DELETED, ASK CONFIRM.\nOKDLT    MVC   ECRADA,PGMCHAR          SET PRG. NR. IN DISPLAY\n         LA    R1,PECRAD               DISPLAY SCREEN TO CONFIRM\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\n         MVI   ECRADM,C' '\n         MVC   ECRADM+1(L'ECRADM-1),ECRADM\n         L     R15,=V(AUT99R)          GET RESPONSE(S)\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    DPLAY                   IF YES, ESCAPE\n         LTR   R1,R1                   NO TEXT ?\n         BZ    DPLAY                   YES, ESCAPE\n         MVC   RESPONSE(1),3(R15)\n         OI    RESPONSE,C' '           TRANSLATE LOWER CASE IN UPPER\n         CLI   RESPONSE,C'Y'           IS RESPONSE = Y ?\n         BE    XDELET                  IF YES, GO TO DELETE\n         CLI   RESPONSE,C'N'           IS RESPONSE = N ?\n         BE    DPLAY                   IF YES, ESCAPE\n         CLI   RESPONSE,C' '           IS RESPONSE = BLANK ?\n         BE    DPLAY                   IF YES, ESCAPE\n         MVC   ECRADM(L'MSGRSP),MSGRSP\n         MVC   ECRADM+L'MSGRSP-5(1),RESPONSE\n         B     OKDLT+L'OKDLT           BACK TO CONFIRM AGAIN\nXDELET   BAL   R9,CORRECT              GO CORRECT ALL AUT.\n        CALL   ZDELET,(RETCD,ARGUMPRG),VL\n         LTR   R15,R15\n         BNZ   ZDERR\n         LA    R1,RQHCPY3              HARDCOPY OF OPERATION\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   *+L'*+8\n         LA    R1,WDLTE\n         B     EXSUCC\n         XR    R2,R2                   PASS HARDCOPY ERROR\n         LR    R3,R0\n         B     SCRAMBLE\nZDERR    LM    R2,R3,NZDL              SAY ZDELET ERROR\n         B     ERRZR\n         EJECT\n*--------------------------------------------------------------------*\n*        BOUCLE DE RECHERCHE DU PROGRAMMEUR DANS TOUTES LES          *\n*        AUTORISATIONS (ROUTINE) - LINK = R9                         *\n*--------------------------------------------------------------------*\n         SPACE 1\nSEARCH   L     R6,=A(VECTI)            ADDRESS OF VECTOR\n         LA    R7,NVECT+1              NUMBER OF ELEMENTS\n         PACK  DSD,PGMCHAR             PACK PROGR. NBR\n         CVB   R1,DSD\n         STH   R1,POSIPGM              STORE IN POSITIVE PROGRAMMER\n         LNR   R1,R1                   CONVERT IN NEGATIVE\n         STH   R1,NEGAPGM              STORE IN NEGATIVE PROGRAMMER\n         LA    R2,AREAR                SET ADDRESSABILITY OF AUTH DSECT\n         USING AUTDSECT,R2\n         XC    ARGUMAUT,ARGUMAUT       RESET ARGUMENT\nLOOPAUT  BCT   R7,*+L'*+12             LOOP UNTIL PLACE IN VECTOR\n         LA    R1,MSGVOV               VECTOR OVERFLOW\n         XR    R2,R2\n         LR    R3,R2\n         B     SCRAMBLE\n         XC    0(L'VECTI,R6),0(R6)     RESET VECTOR ELEMENT\nSRCHNXT CALL   ZSEQR,(RETCD,AREAR,ARGUMAUT),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BMR   R9                      IF NEGATIVE, END-OF-DATA\n         BZ    *+L'*+8                 IF ZERO, OK\n         LM    R2,R3,NZSQ              SAY ZSEQR ERROR\n         B     ERRZR\n         CLC   ARGUMAUT,=Y(NAUTNO)     IS THE LAST AUTH. PROCESSED ?\n         BHR   R9                      IF YES, BACK TO CALLER\n*------- EXPLOITATION DU VECTEUR.\n         OI    SWSTI+1,X'F0'           CLOSE SWITCH OF STORE AUT. NO.\n         CLC   AUTPMNO,POSIPGM         IS IT THE AUTH. RESPONSIBLE ?\n         BNE   *+L'*+8                 BRANCH IF NOT\n         OI    0(R6),FLRESP            YES, SAY RESPONSIBLE\n         NI    SWSTI+1,X'0F'           OPEN SWITCH TO STORE AUT. NO.\n         LA    R5,AUTPNO               ADDR VECTOR OF PGM NBR IN AUT\n         LA    R4,AUTNPNF              MAX NBR IN VECTOR\nLOOPNBR  OC    0(L'AUTPNO,R5),0(R5)    IS THERE A PROGR. ?\n         BZ    SKPPGM                  IF NOT, GO TO NEXT\n         CLC   0(L'AUTPNO,R5),POSIPGM  IS PROGR. IN AUTHORIZATION ?\n         BE    POSPGM                  IF YES, GO TO PRESENT POSITIVE\n         CLC   0(L'AUTPNO,R5),NEGAPGM  IS PROG IN AUT IN NEGATIVE ?\n         BNE   SKPPGM                  IF NOT, GO TO NEXT\n         OI    0(R6),FLINVP            YES, SAY INVALIDATED\nPOSPGM   NI    SWSTI+1,X'0F'           OPEN SWITCH TO STORE AUT. NO.\nSKPPGM   LA    R5,L'AUTPNO(R5)         JUMP TO NEXT PGM NBR IN VECTOR\n         BCT   R4,LOOPNBR              LOOP TO EXPLOITATION VECTEUR\nSWSTI    B     SRCHNXT\n         MVC   1(2,R6),ARGUMAUT        SET AUT. NO.\n         LA    R6,L'VECTI(R6)          JUMP TO NEXT VECTOR ELEMENT\n         B     LOOPAUT\n         DROP  R2\n         EJECT\n*--------------------------------------------------------------------*\n*        BOUCLE DE CORRECTION DU PROGRAMMEUR DANS TOUTES LES         *\n*        AUTORISATIONS (ROUTINE) - LINK = R9                         *\n*--------------------------------------------------------------------*\n         SPACE 1\nCORRECT  MVC   MSGAUPN,PGMCHAR         SET PGM NO.\n         LA    R1,MSGAUP\n         STCM  R1,B'1111',RQHCPY0+L'RQHCPY0\n         LA    R1,RQHCPY0              SET MESSAGE TO HARDCOPY\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n         LA    R2,AREAR                SET ADDRESSABILITY OF AUT. DSECT\n         USING AUTDSECT,R2\n         MVC   ECRUNP,PGMCHAR          SET PGM NO.\n         MVI   ECRUNW,C' '\n         MVC   ECRUNW+1(L'ECRUNW-1),ECRUNW\n         CLI   SCRFSI,C'D'             DELETION REQ'D ?\n         BNE   TTITT                   NO, INVALIDATE OR REACTIVE\n         MVC   ECRUNT,WDLTE\n         MVC   ECRUNW(8),=CL8'deleted '\n         LA    R1,ECRUNW+8\n         B     TTITS\nTTITT    MVC   ECRUNT,WUPTE\n         CLI   SCRFSI,C'I'             INVALIDATION REQ'D ?\n         BNE   *+L'*+10                NO, REACTIVE\n         MVC   ECRUNW(12),=CL12'invalidated '\n         B     *+L'*+6\n         MVC   ECRUNW(12),=CL12'reactivated '\n         LA    R1,ECRUNW+12\nTTITS    MVC   0(35,R1),=CL35'in the following Authorization(s) :'\n         BAL   R14,ITSCR               INIT SCREEN\n         L     R6,=A(VECTI)            ADDRESS OF VECTOR\nLOOPVI   OC    0(L'VECTI,R6),0(R6)     END OF VECTOR ?\n         BZ    ALLCORR                 YES\n         CLI   SCRFSI,C' '             IF NO, REACTIVATION REQ'D ?\n         BNE   *+L'*+8                 NO, INVALIDATION OR DELETION\n         TM    0(R6),FLINVP            YES, IS IT IN PGM INVALID ?\n         BZ    NXTVI                   NO, DON'T CHANGE\n         OI    SWCHG+1,X'F0'           SET NO CHANGES\n         MVC   ARGUMAUT(2),1(R6)       SET AUTH. AS ARGUM.\n        CALL   ZREAD,(RETCD,ARGUMAUT,AREAR),VL  READ FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    *+L'*+8                 IF ZERO, OK\n         LM    R2,R3,NZRD              IF NOT, SAY ZREAD ERROR\n         B     ERRZR                   GO DISPLAY Z... MESSAGE\n         MVC   AREARO(AUTLGTH),AREAR   SET FOR HARDCOPY\n         LA    R5,AUTPNO               ADDR VECTOR OF PGM NBR IN AUT\n         LA    R4,AUTNPNF              MAX NBR IN VECTOR\nLOOPCRR  CLC   0(L'AUTPNO,R5),POSIPGM  IS PROGR. IN AUTHORIZATION ?\n         BE    *+L'*+10                IF YES, GO TO PRESENT POSITIVE\n         CLC   0(L'AUTPNO,R5),NEGAPGM  IS PROG IN AUT IN NEGATIVE ?\n         BNE   LOOPNXT                 IF NOT, GO TO NEXT\n         CLI   SCRFSI,C'D'             IF YES, NEGATIVE, DELETE REQ'D ?\n         BNE   LOOKINV                 NO, LOOK FURTHER\n         XC    0(L'AUTPNO,R5),0(R5)    YES, CLEAR IT\n         B     SETCHGS\nLOOKINV  CLI   SCRFSI,C'I'             IS IT INVALIDATION REQ'D ?\n         BE    PRCINV                  YES, GO PROCESS INVALID\n         LH    R1,0(R5)                GET PGM NO.\n         LTR   R1,R1                   ALREADY ACTIVE ?\n         BNM   LOOPNXT                 YES\n         LPR   R1,R1                   NO, REACTIVE IT\n         STH   R1,0(R5)                AND STORE IT BACK\n         B     SETCHGS\nPRCINV   LH    R1,0(R5)                GET PGM NO.\n         LTR   R1,R1                   ALREADY INVALID ?\n         BM    LOOPNXT                 YES\n         LNR   R1,R1                   NO, INVALID IT\n         STH   R1,0(R5)                AND STORE IT BACK\nSETCHGS  NI    SWCHG+1,X'0F'           SET CHANGES OCCUR'D\nLOOPNXT  LA    R5,L'AUTPNO(R5)         JUMP TO NEXT PGM NBR IN VECTOR\n         BCT   R4,LOOPCRR              LOOP TO EXPLOITATION VECTEUR\nSWCHG    B     NXTVI\n*------- REORGANIZE THE AUTHORIZATION RECORD.\n         LA    R5,AUTPNO               ADDR VECTOR OF PGM NBR IN AUT\n         LA    R4,AUTNPNF              NUMBER OF PROGR. IN LIST\n         LA    R15,VWORK\nSREORG   MVC   0(L'VWORK,R15),=CL40' '\n         LH    R0,0(R5)                GET PROGR. NUMBER\n         LTR   R0,R0                   TEST SIGN-VALUE\n         BZ    NREORG                  IF ZERO, JUMP IT\n         BP    *+L'*+6\n         LPR   R0,R0                   IF NEGATIVE SET IT POSITIVE\n         MVI   4(R15),C'I'             SAY INVALID\n         CVD   R0,DSD                  CONVERT IN PACKED\n         UNPK  0(4,R15),DSD+5(3)       CONVERT IN EBCDIC\n         OI    3(R15),C'0'             SET LAST ZONING AFTER UNPK\nNREORG   LA    R15,L'VWORK(R15)        BUMP POINTERS\n         LA    R5,L'AUTPNO(R5)\n         BCT   R4,SREORG               LOOP MAX N... TIMES\n        $SORT  VWORK,AUTNPNF,L'VWORK,0,L'VWORK-1\n         LA    R5,AUTPNO               ADDR VECTOR OF PGM NBR IN AUT\n         LA    R4,AUTNPNF              NUMBER OF PROGR. IN LIST\n         LA    R15,VWORK\n         LR    R14,R4\nLREORG   CLC   0(L'VWORK,R15),=CL40' ' EMPTY ELEMENT ?\n         BE    TREORG                  YES, GO TO NEXT\n         PACK  DSD,0(4,R15)            PACK PROGR. NUMBER\n         CVB   R0,DSD                  CONVERT IT TO BINARY\n         CLI   4(R15),C'I'             IS IT INVALID ?\n         BNE   *+L'*+2                 NO\n         LNR   R0,R0                   YES, SET IT NEGATIVE\n         STH   R0,0(R5)                STORE IT\n         LA    R5,L'AUTPNO(R5)         BUMP RECORD POINTER\n         BCTR  R4,0                    MINUS ONE TO COUNT\nTREORG   LA    R15,L'VWORK(R15)        BUMP POINTERS\n         BCT   R14,LREORG              LOOP MAX N... TIMES\n         LTR   R4,R4                   IS RECORD LIST FILLED ?\n         BNP   *+L'*+14                YES\n         XR    R0,R0                   NO, RESET THE REST OF RECORD\n         STH   R0,0(R5)                NULLIFY THIS\n         LA    R5,L'AUTPNO(R5)         BUMP RECORD POINTER\n         BCT   R4,*-8                  LOOP MAX N... TIMES\n*------- WRITE BACK AUTHORIZATION IN FILE.\n        CALL   ZWRITE,(RETCD,ARGUMAUT,AREAR),VL  WRITE FILE\n         LTR   R15,R15\n         BZ    *+L'*+8                 IF ZERO, OK\n         LM    R2,R3,NZWR              IF NOT, SAY ZWRITE ERROR\n         B     ERRZR                   GO DISPLAY Z... MESSAGE\n         LA    R1,RQHCPY4              HARDCOPY OF OPERATION\n         L     R15,=V(AUT96)\n         BALR  R14,R15\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    *+L'*+8\n         XR    R2,R2                   PASS HARDCOPY ERROR\n         LR    R3,R0\n         B     SCRAMBLE\n         BCT   R8,SETVI\n         MVC   ECRUNC,=CL6'*MORE*'\n         LA    R1,PECRUN               DISPLAY THIS SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\n         BAL   R14,ITSCR               INIT SCREEN\n         BCTR  R8,0\nSETVI    LA    R7,DX(R7)\n         LH    R1,ARGUMAUT             INFORM ABOUT THIS AUT. NO.\n         CVD   R1,DSD\n         UNPK  DSD(5),DSD+5(3)\n         OI    DSD+4,C'0'\n         MVC   0(L'AUT1,R7),DSD+1\nNXTVI    LA    R6,L'VECTI(R6)          JUMP TO NEXT VECTOR ELEMENT\n         B     LOOPVI\n         DROP  R2\nALLCORR  CLC   AUT1(L'AUT1),=CL40' '   ANYTHING TO DISPLAY ?\n         BE    RSMSG                   NO\n         LA    R1,PECRUN               YES, DISPLAY SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\nRSMSG    XC    RQHCPY0+L'RQHCPY0(4),RQHCPY0+L'RQHCPY0\n         LA    R1,RQHCPY0              RESET MESSAGE TO HARDCOPY\n         L     R15,=V(AUT96)\n         LR    R14,R9\n         BR    R15                     GO AND BACK TO CALLER\n*------- INITIALIZE SCREEN FIELDS ROUTINE (LINK = R14).\nITSCR    LA    R1,AUT1                 CLEAR SCREEN\n         LA    R0,NDL\n         MVC   0(L'AUT1,R1),=CL40' '\n         LA    R1,DX(R1)\n         BCT   R0,*-10\n         LA    R7,AUT1-DX              SCREEN ADDRESS OF AUT. NO.S\n         LA    R8,NDL+1                NUMBER AUT. NO.S IN SCREEN\n         MVC   ECRUNC(L'ECRUNC),=CL40' '\n         BR    R14                     RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL.                                       *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nPECRIN   DC    A(LECRIN,ECRIN)\nPECRAW   DC    A(LECRAW,ECRAW)\nPECRAN   DC    A(LECRAN,ECRAN)\nPECRFN   DC    A(LECRFN,ECRFN)\nPECRAD   DC    A(LECRAD,ECRAD)\nPECRUN   DC    A(LECRUN,ECRUN)\nRETCD    DC    F'0'                    RETURN CODE\nNZRD     DC    0F'0',CL8'ZREAD'\nNZWR     DC    0F'0',CL8'ZWRITE'\nNZDL     DC    0F'0',CL8'ZDELET'\nNZSQ     DC    0F'0',CL8'ZSEQR'\nAREAR    DC    (AUTLGTH)X'0'           RECORD AUTHORIZATION\nAREARO   DC    (AUTLGTH)X'0'           RECORD AUTHORIZATION\nAREAP    DC    (PRGLGTH)X'0'           RECORD PROGRAMMER\nAREAPO   DC    (PRGLGTH)X'0'           RECORD PROGRAMMER\nARGUMPRG DC    H'0'                    PROGR. NBR TO POINT IN FILE\nARGUMAUT DC    H'0'                    AUTH. NBR TO POINT IN FILE\nPOSIPGM  DC    H'0'                    PROGR. NBR IN POSITIVE\nNEGAPGM  DC    H'0'                    PROGR. NBR IN NEGATIVE\nPGMCHAR  DC    CL4' '                  PROGR. NBR IN EBCDIC\nWCL4     DC    CL4' '\nRESPONSE DC    C' '\nWCRTE    DC    CL6'CREATE'\nWUPTE    DC    CL6'UPDATE'\nWDLTE    DC    CL6'DELETE'\n         SPACE 1\n*--------------------------------------------------------------------*\n*        UPDATE INITIAL VALUES.                                      *\n*--------------------------------------------------------------------*\n         SPACE 1\nINSI     DC    CL1' '\nINNM     DC    CL40' '\nINMT     DC    CL6' '\nINBX     DC    CL3' '\nINBN     DC    CL6' '\nINTL     DC    CL9' '\nINSV     DC    CL8' '\n         EJECT\n*--------------------------------------------------------------------*\n*        REORGANIZATION WORKING VECTOR.                              *\n*--------------------------------------------------------------------*\n         SPACE 1\nVWORK    DS    0CL5          WORKING VECTOR\n*                            +0 = PGM NBR IN EBCDIC\n*                            +4 = 'I' IF PGM NBR < 0\n         DC    (AUTNPNF)CL5' '\n         SPACE 1\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS ET DEMANDES.                             *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DC    AL1(MSGAUPL)\nMSGAUP   DC    C'0===> Authorization(s) modified because '\n         DC    C'change status of Programmer : '\nMSGAUPN  DC    CL4' ',C' <==='\nMSGAUPL  EQU   *-MSGAUP\n         DC    AL1(L'MSGREJ)\nMSGREJ   DC    C'       rejected - Programmer is Responsible :     .'\n         DC    AL1(L'MSGVOV)\nMSGVOV   DC    C' Authorizations Numbers VECTOR overflow |||'\nMSGPN1   DC    C'Programmer Number NOT Numeric or NOT 4 digits'\nMSGRSP   DC    C'Unknown response received :   ???'\nERROR0   DC    C'Input scan SBA order not found ???'\nERROR1   DC    C'Please, enter the Programmer''s Name |'\nERROR2   DC    C'Matricule Number NOT Numeric or Not 6 digits (unless E1\n               ... = External or null)'\nERROR3   DC    C'Box Number NOT Numeric or Not 3 digits'\nERROR4   DC    C'Programmer state/action error (set I, D or null)'\nMSGDONE  DC    C'       is successfully done - Programmer :     .'\nMSGSKIP  DC    C'       bypassed - None set - Programmer :     .'\nMSGBYPS  DC    C'       bypassed - Escape... - Programmer :     .'\nMSGUPDN  DC    C'UPDATE bypassed - No change - Programmer :     .'\n         SPACE 1\n*--------------------------------------------------------------------*\n*        HARDCOPY REQUESTS.                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nRQHCPY0  DC    AL1(0),AL4(MSGAUP)   SET MESSAGE.\nRQHCPY1  DC    AL1(2),AL4(ARGUMPRG,AREAP)   CREATE PROGRAMMER.\nRQHCPY2  DC    AL1(4),AL4(ARGUMPRG,AREAPO,AREAP)   UPDATE PROGRAMMER.\nRQHCPY3  DC    AL1(6),AL4(ARGUMPRG,AREAPO)   DELETE PROGRAMMER.\nRQHCPY4  DC    AL1(3),AL4(ARGUMAUT,AREARO,AREAR)   UPDATE AUTH.\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRANS D'OUTPUT.                                            *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRIN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='P R O G R A M M E R    NUMBER',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='Enter Programmer Number (4 numerics)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(17,1),SF=(PROT,INT),TEXT='Mandatory :',MF=L\n        $FS    SF=(PROT),TEXT='a Programmer Number cannot ',MF=L\n        $FS    TEXT='be Invalidated or Deleted until',MF=L\n        $FS    SBA=(18,14),TEXT='it is indicated as Responsible ',MF=L\n        $FS    TEXT='Programmer in one or more',MF=L\n        $FS    SBA=(19,14),TEXT='Authorizations.',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRINM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRIN   EQU   *-ECRIN\n         SPACE 1\nECRAW   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='P R O G R A M M E R    NUMBER',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='Programmer Number NOT FOUND in file.',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='Enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='Y',MF=L\n        $FS    SF=(PROT),TEXT='if you are creating a new one',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(7,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRAWM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAW   EQU   *-ECRAW\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='P R O G R A M M E R    CREATE',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,9),SF=(PROT),TEXT='Programmer Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRPGM  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(6,11),SF=(PROT),TEXT='Programmer Name :',MF=L\n        $FS    SF=(INT),MF=L\nASBANM  $FS    SBA=(6,30),MF=L\nSCRNOM  $FS    TEXT=(' ',40),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(7,29),SF=(PROT),TEXT='(or enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='X',MF=L\n        $FS    SF=(PROT),TEXT='to escape)',MF=L\n        $FS    SBA=(9,17),SF=(PROT),TEXT='Matricola :',MF=L\n        $FS    SF=(INT),MF=L\nASBAMT  $FS    SBA=(9,30),MF=L\nSCRMAT  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),TEXT='< (1-6 digits or E..... ',MF=L\n        $FS    TEXT='for an External) ',MF=L\n        $FS    SBA=(11,8),SF=(PROT),TEXT='Listing Box Number :',MF=L\n        $FS    SF=(INT),MF=L\nASBABX  $FS    SBA=(11,30),MF=L\nSCRBOX  $FS    TEXT=(' ',3),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(13,11),SF=(PROT),TEXT='Building Number :',MF=L\n        $FS    SF=(INT),MF=L\nASBABN  $FS    SBA=(13,30),MF=L\nSCRBLD  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(15,14),SF=(PROT),TEXT='Phone Number :',MF=L\n        $FS    SF=(INT),MF=L\nASBATL  $FS    SBA=(15,30),MF=L\nSCRTEL  $FS    TEXT=(' ',9),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(17,19),SF=(PROT),TEXT='Service :',MF=L\n        $FS    SF=(INT),MF=L\nASBASV  $FS    SBA=(17,30),MF=L\nSCRSERV $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(20,1),SF=(PROT,INT),MF=L\nECRANM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(22,1),SF=(PROT),MF=L\n        $FS    TEXT='Type in needed data and hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='until they are correct, ',MF=L\n        $FS    TEXT='then hit only',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SBA=(21,1),SF=(PROT),MF=L\n        $FS    TEXT='to create the Programmer, ',MF=L\n        $FS    TEXT='or use at any time',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         SPACE 1\nECRFN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='P R O G R A M M E R    UPDATE',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,1),SF=(PROT),MF=L\n        $FS    TEXT='Programmer state/action :',MF=L\n        $FS    SF=(PROT,INT),TEXT='I',MF=L\n        $FS    SF=(PROT),TEXT='= invalidate,',MF=L\n        $FS    SF=(PROT,INT),TEXT='D',MF=L\n        $FS    SF=(PROT),TEXT='= delete or',MF=L\n        $FS    SF=(PROT,INT),TEXT='X',MF=L\n        $FS    SF=(PROT),TEXT='to escape',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nASBFSI  $FS    SBA=(4,75),MF=L\nSCRFSI  $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,9),SF=(PROT),TEXT='Programmer Number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nSCRFPG  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,11),SF=(PROT),TEXT='Programmer Name :',MF=L\n        $FS    SF=(INT),MF=L\nASBFNM  $FS    SBA=(7,30),MF=L\nSCRFNM  $FS    TEXT=(' ',40),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(9,17),SF=(PROT),TEXT='Matricola :',MF=L\n        $FS    SF=(INT),MF=L\nASBFMT  $FS    SBA=(9,30),MF=L\nSCRFMT  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(11,8),SF=(PROT),TEXT='Listing Box Number :',MF=L\n        $FS    SF=(INT),MF=L\nASBFBX  $FS    SBA=(11,30),MF=L\nSCRFBX  $FS    TEXT=(' ',3),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(13,11),SF=(PROT),TEXT='Building Number :',MF=L\n        $FS    SF=(INT),MF=L\nASBFBN  $FS    SBA=(13,30),MF=L\nSCRFBN  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(15,14),SF=(PROT),TEXT='Phone Number :',MF=L\n        $FS    SF=(INT),MF=L\nASBFTL  $FS    SBA=(15,30),MF=L\nSCRFTL  $FS    TEXT=(' ',9),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(17,19),SF=(PROT),TEXT='Service :',MF=L\n        $FS    SF=(INT),MF=L\nASBFSV  $FS    SBA=(17,30),MF=L\nSCRFSV  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(19,1),SF=(PROT,INT),MF=L\nMSG1    $FS    TEXT=(' ',37),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(19,41),SF=(PROT,INT),MF=L\nMSG2    $FS    TEXT=(' ',37),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(20,1),SF=(PROT,INT),MF=L\nECRFNM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(22,1),SF=(PROT),MF=L\n        $FS    TEXT='Type in needed data and hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='until they are correct, ',MF=L\n        $FS    TEXT='then hit only',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SBA=(23,1),SF=(PROT),MF=L\n        $FS    TEXT='to update the Programmer, ',MF=L\n        $FS    TEXT='or use at any time',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRFN   EQU   *-ECRFN\n         SPACE 1\nECRAD   $FS    CC=W,WCC=(KBR),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='P R O G R A M M E R    DELETE',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(10,10),SF=(PROT),TEXT='Confirm',MF=L\n        $FS    SF=(PROT,INT),TEXT='DELETE',MF=L\n        $FS    SF=(PROT),TEXT='action on Programmer number :',MF=L\n        $FS    SF=(PROT,INT),,MF=L\nECRADA  $FS    TEXT=(' ',4),MF=L\n        $FS    SBA=(15,10),SF=(PROT),TEXT='Enter',MF=L\n        $FS    SF=(PROT,INT),TEXT='Y',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='N ===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(16,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRADM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAD   EQU   *-ECRAD\n         SPACE 1\nECRUN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='P R O G R A M M E R    ',MF=L\nECRUNT  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,5),SF=(PROT),TEXT='Programmer number :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nECRUNP  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,70),SF=(PROT,INT),MF=L\nECRUNC  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,5),SF=(PROT),TEXT='Programmer is now ',MF=L\nECRUNW  $FS    TEXT=(' ',50),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 01 -*\nSX       EQU   *\n        $FS    SBA=(9,5),SF=(PROT,INT),MF=L\nAUT1    $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\nDX       EQU   *-SX\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 02 -*\n        $FS    SBA=(9,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 03 -*\n        $FS    SBA=(9,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 04 -*\n        $FS    SBA=(9,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 05 -*\n        $FS    SBA=(10,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 06 -*\n        $FS    SBA=(10,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 07 -*\n        $FS    SBA=(10,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 08 -*\n        $FS    SBA=(10,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 09 -*\n        $FS    SBA=(11,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 10 -*\n        $FS    SBA=(11,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 11 -*\n        $FS    SBA=(11,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 12 -*\n        $FS    SBA=(11,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 13 -*\n        $FS    SBA=(12,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 14 -*\n        $FS    SBA=(12,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 15 -*\n        $FS    SBA=(12,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 16 -*\n        $FS    SBA=(12,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 17 -*\n        $FS    SBA=(13,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 18 -*\n        $FS    SBA=(13,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 19 -*\n        $FS    SBA=(13,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 20 -*\n        $FS    SBA=(13,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 21 -*\n        $FS    SBA=(14,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 22 -*\n        $FS    SBA=(14,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 23 -*\n        $FS    SBA=(14,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 24 -*\n        $FS    SBA=(14,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 25 -*\n        $FS    SBA=(15,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 26 -*\n        $FS    SBA=(15,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 27 -*\n        $FS    SBA=(15,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 28 -*\n        $FS    SBA=(15,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 29 -*\n        $FS    SBA=(16,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 30 -*\n        $FS    SBA=(16,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 31 -*\n        $FS    SBA=(16,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 32 -*\n        $FS    SBA=(16,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 33 -*\n        $FS    SBA=(17,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 34 -*\n        $FS    SBA=(17,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 35 -*\n        $FS    SBA=(17,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 36 -*\n        $FS    SBA=(17,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 37 -*\n        $FS    SBA=(18,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 38 -*\n        $FS    SBA=(18,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 39 -*\n        $FS    SBA=(18,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 40 -*\n        $FS    SBA=(18,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 41 -*\n        $FS    SBA=(19,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 42 -*\n        $FS    SBA=(19,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 43 -*\n        $FS    SBA=(19,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 44 -*\n        $FS    SBA=(19,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 45 -*\n        $FS    SBA=(20,5),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 46 -*\n        $FS    SBA=(20,25),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 47 -*\n        $FS    SBA=(20,45),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 48 -*\n        $FS    SBA=(20,65),SF=(PROT,INT),TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),MF=L\nNDL      EQU   (*-SX)/DX               NO. OF AUT. ON SCREEN DISPLAY\n        $FS    SBA=(23,1),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to continue or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRUN   EQU   *-ECRUN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        AUTHORIZATIONS NUMBERS VECTOR.                              *\n*--------------------------------------------------------------------*\n         SPACE 1\nVECTI    DC    100XL3'0'\nNVECT    EQU   (*-VECTI)/L'VECTI\n         DC    XL3'0'                  END VECTOR MARKER\n*------- BYTE 1 = FLAGS AS BELOW :\nFLRESP   EQU   X'80'                   RESPONSIBLE PROGRAMMER\nFLINVP   EQU   X'40'                   PROGRAMMER INVALIDATED\n         EJECT\n*--------------------------------------------------------------------*\n*        UJVTABLE (IEFUJV) EXTENDED CONTROLS                         *\n*--------------------------------------------------------------------*\n         SPACE 1\n         CNOP  0,8\n         USING *,R15\nEXTCTL   STM   R8,R9,SVEXT\n         LR    R9,R15\n         DROP  R15\n         USING EXTCTL,R9\n         LA    R8,2(R14)\n         XR    R1,R1\n         ICM   R1,B'0011',0(R14)\n         B     0(R1,R9)\nCHKINP   PACK  DSD,PGMCHAR\n         CVB   R0,DSD\n         XC    DSD,DSD\n         STH   R0,DSD\n        CALL   AUT33,(DSD+2,DSD,DSD+2),VL\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         LR    R14,R8                  ACCEPTED\n         LM    R8,R9,SVEXT\n         BR    R14\n         CH    R15,=H'8'\n         BE    CHKERR\n         MVC   ECRFNM(33),=CL33'Programmer INVALIDATION rejected.'\n         MVC   SCRFSI,INSI\n         B     CHKMSG\nCHKPBX   PACK  DSD,PGMCHAR\n         CVB   R0,DSD\n         PACK  DSD,INBX\n         CVB   R1,DSD\n         XC    DSD,DSD\n         STH   R0,DSD\n         STH   R1,DSD+2\n        CALL   AUT33,(DSD+4,DSD,DSD+2),VL\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         LR    R14,R8                  ACCEPTED\n         LM    R8,R9,SVEXT\n         BR    R14\n         CH    R15,=H'8'\n         BE    CHKERR\n         MVC   ECRFNM(27),=CL27'Box number CHANGE rejected.'\n         MVC   SCRFBX,INBX\n         B     CHKMSG\nCHKDLP   PACK  DSD,PGMCHAR\n         CVB   R0,DSD\n         XC    DSD,DSD\n         STH   R0,DSD\n        CALL   AUT33,(DSD+2,DSD,DSD+2),VL\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         LR    R14,R8                  ACCEPTED\n         LM    R8,R9,SVEXT\n         BR    R14\n         CH    R15,=H'8'\n         BE    CHKERR\n         MVC   ECRFNM(29),=CL29'Programmer DELETION rejected.'\n         MVC   SCRFSI,INSI\nCHKMSG   MVC   MSG1(34),=CL34'UJVTABLE (IEFUJV) control detected'\n         MVC   MSG2(33),=CL33'* * * System HIGH-SENSITIVE * * *'\n         B     DPLAY\nCHKERR   LM    R2,R3,NCALL             SEVERE ERROR\n         B     SCRAMBLE\n         DROP  R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONSTANTS AND WORK-AREAS                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nSVEXT    DC    2F'0'\nNCALL    DC    0F'0',CL8'AUT32'\n         SPACE 1\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT GEN\n        $AIRD  SEC=YES,R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT33": {"ttr": 5383, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08o\\x00\\x90\\x08o\\x12H\\x01\\x1b\\x01\\x1b\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-27T00:00:00", "modifydate": "1990-03-27T12:48:00", "lines": 283, "newlines": 283, "modlines": 0, "user": "SYSPAJA"}, "text": "AU33     TITLE '-- TSO-CP AUT30 - ROUTINE AUT33 --'\nAUT33    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE IS CALLED BY PROGRAM 'AUT30'.               *\n*        CHECK SYSTEM HIGH-SENSITIVE AUTHORIZATIONS/PROGRAMMERS.     *\n*                                             P.A.MOINIL  26 MARS 90 *\n**********************************************************************\n*        CALL AUT33,(PARM1,PARM2,PARM3),VL                           *\n*        FUNCTION : SUBROUTINE TO CHECK SYSTEM HIGH-SENSITIVE        *\n*                   AUTHORIZATIONS/PROGRAMMERS NUMBERS.              *\n*        AT ENTRY : R1  = PARM. ADDRESS                              *\n*                         PARM. --->   A(PARM1,PARM2,PARM3)          *\n*                 WHERE : PARM1 = AUTHOR. NUMBER IN BINARY (H) OR    *\n*                                 ZERO IF CHECK NOT DESIRED.         *\n*                         PARM2 = PROGR. NUMBER IN BINARY (H) OR     *\n*                                 ZERO IF CHECK NOT DESIRED.         *\n*                         PARM3 = BOX NUMBER IN BINARY (H) OR ZERO   *\n*                                 IF CHECK NOT DESIRED.              *\n*         AT EXIT : R15 = 0 - ACCEPT COMPLETION                      *\n*                         4 - REJECT COMPLETION                      *\n*                         8 - SEVERE ERROR                           *\n*                         WITH R1 = ADDRESS OF TERMINATION MESSAGE   *\n*                         TEXT, IT POINTS AS BELOW :                 *\n*                                    DC  AL1(L'TEXT)                 *\n*                         ---> TEXT  DC  C'...MESSAGE...'            *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- MAXIMUM ELEMENTS OF INTERNAL TABLES DEFINITIONS\nMXAP     EQU   100                     MAX. AUT.-PRG. ELEMENTS\nMXBP     EQU   50                      MAX. BOX-PRG. ELEMENTS\nMXIO     EQU   50                      MAX. IO ELEMENTS\nMXSP     EQU   50                      MAX. SPECIAL ELEMENTS\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R10\n         SPACE 1\n         LM    R2,R4,0(R1)             LOAD ADDRESS OF PARAMETERS\n         MVC   TAUT(L'TAUT),0(R2)      GET AUT NBR BINARY\n         MVC   TPRG(L'TPRG),0(R3)      GET PRG NBR BINARY\n         MVC   TBOX(L'TBOX),0(R4)      GET BOX NBR BINARY\n         OC    UJVTADDR,UJVTADDR       IEFUJV/UJVTABLE BUILDED?\n         BNZ   CHKREQ                  YES\n         EJECT\n*------- BUILD INTERNAL TABLES\n         L     R15,=V(SUJVTA)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   EXERR\n         ST    R1,UJVTADDR\n         USING UVTDSECT,R1\n         L     R2,SYSAUT\n         DROP  R1\n         LM    R3,R5,=A(CHKAPTB-L'CHKAPTB,L'CHKAPTB,CHKAPTBE)\nTAPT     CLC   0(4,R2),=XL4'0'\n         BE    EAPT\n         LA    R1,2(R2)\nNAPT     CLC   0(2,R1),=XL4'0'\n         BE    EAPE\n         BXLE  R3,R4,*+L'*+4\n         B     XOVAP\n         MVC   0(2,R3),0(R2)\n         MVC   2(2,R3),0(R1)\n         LA    R1,2(R1)\n         B     NAPT\nEAPE     LA    R2,2(R1)\n         B     TAPT\nEAPT     CL    R3,=A(CHKAPTB-L'CHKAPTB,L'CHKAPTB,CHKAPTBE)\n         BE    ZAPT\n         LR    R5,R3\n         L     R3,=A(CHKAPTB-L'CHKAPTB,L'CHKAPTB,CHKAPTBE)\n         ALR   R3,R4\n         STM   R3,R5,CHKAPTBS\nZAPT     L     R1,UJVTADDR\n         USING UVTDSECT,R1\n         L     R2,SYSBOX\n         DROP  R1\n         LM    R3,R5,=A(CHKBPTB-L'CHKBPTB,L'CHKBPTB,CHKBPTBE)\nTBPT     CLC   0(4,R2),=XL4'0'\n         BE    EBPT\n         LA    R1,2(R2)\nNBPT     CLC   0(2,R1),=XL4'0'\n         BE    EBPE\n         BXLE  R3,R4,*+L'*+4\n         B     XOVBP\n         MVC   0(2,R3),0(R2)\n         MVC   2(2,R3),0(R1)\n         LA    R1,2(R1)\n         B     NBPT\nEBPE     LA    R2,2(R1)\n         B     TBPT\nEBPT     CL    R3,=A(CHKBPTB-L'CHKBPTB,L'CHKBPTB,CHKBPTBE)\n         BE    ZBPT\n         LR    R5,R3\n         L     R3,=A(CHKBPTB-L'CHKBPTB,L'CHKBPTB,CHKBPTBE)\n         ALR   R3,R4\n         STM   R3,R5,CHKBPTBS\nZBPT     L     R1,UJVTADDR\n         USING UVTDSECT,R1\n         L     R2,SYSIOS\n         DROP  R1\n         LM    R3,R5,=A(CHKIOTB-L'CHKIOTB,L'CHKIOTB,CHKIOTBE)\nNIOT     CLC   0(2,R2),=XL4'0'\n         BE    EIOT\n         BXLE  R3,R4,*+L'*+4\n         B     XOVIO\n         MVC   0(2,R3),0(R2)\n         LA    R2,2(R2)\n         B     NIOT\nEIOT     CL    R3,=A(CHKIOTB-L'CHKIOTB,L'CHKIOTB,CHKIOTBE)\n         BE    ZIOT\n         LR    R5,R3\n         L     R3,=A(CHKIOTB-L'CHKIOTB,L'CHKIOTB,CHKIOTBE)\n         ALR   R3,R4\n         STM   R3,R5,CHKIOTBS\nZIOT     L     R1,UJVTADDR\n         USING UVTDSECT,R1\n         L     R2,SYSPST\n         DROP  R1\n         LM    R3,R5,=A(CHKSPTB-L'CHKSPTB,L'CHKSPTB,CHKSPTBE)\nNSPT     CLC   0(2,R2),=XL4'0'\n         BE    ESPT\n         BXLE  R3,R4,*+L'*+4\n         B     XOVSP\n         MVC   0(4,R3),0(R2)\n         LA    R2,5(R2)\n         B     NSPT\nESPT     CL    R3,=A(CHKSPTB-L'CHKSPTB,L'CHKSPTB,CHKSPTBE)\n         BE    ZSPT\n         LR    R5,R3\n         L     R3,=A(CHKSPTB-L'CHKSPTB,L'CHKSPTB,CHKSPTBE)\n         ALR   R3,R4\n         STM   R3,R5,CHKSPTBS\nZSPT     L     R15,=V(DUJVTA)\n         BASR  R14,R15\n         EJECT\n*------- CHECK REQUESTS\nCHKREQ   XR    R15,R15                 SET RC=0\n         OC    TBOX,TBOX\n         BNZ   CHKREQ30\n         OC    TAUT,TAUT\n         BZ    CHKREQ20\n         OC    TPRG,TPRG\n         BZ    CHKREQ10\n         LM    R3,R5,CHKAPTBS          CHECK AUT.-PRG.\n         LTR   R3,R3\n         BZ    CHKREQ01                NONE\n         CLC   0(4,R3),TAUT\n         BE    REJCT\n         BXLE  R3,R4,*-10\nCHKREQ01 LM    R3,R5,CHKSPTBS\n         LTR   R3,R3\n         BZ    LEAVE                   NONE = ACCEPT\n         CLC   0(4,R3),TAUT\n         BE    REJCT\n         BXLE  R3,R4,*-10\n         B     LEAVE\nCHKREQ10 LM    R3,R5,CHKAPTBS          CHECK AUT.\n         LTR   R3,R3\n         BZ    CHKREQ11                NONE\n         CLC   0(2,R3),TAUT\n         BE    REJCT\n         BXLE  R3,R4,*-10\nCHKREQ11 LM    R3,R5,CHKIOTBS\n         LTR   R3,R3\n         BZ    CHKREQ12                NONE\n         CLC   0(2,R3),TAUT\n         BE    REJCT\n         BXLE  R3,R4,*-10\nCHKREQ12 LM    R3,R5,CHKSPTBS\n         LTR   R3,R3\n         BZ    LEAVE                   NONE = ACCEPT\n         CLC   0(2,R3),TAUT\n         BE    REJCT\n         BXLE  R3,R4,*-10\n         B     LEAVE\nCHKREQ20 OC    TPRG,TPRG\n         BZ    INVREQ\n         LM    R3,R5,CHKAPTBS          CHECK PRG.\n         LTR   R3,R3\n         BZ    CHKREQ21                NONE\n         CLC   2(2,R3),TPRG\n         BE    REJCT\n         BXLE  R3,R4,*-10\nCHKREQ21 LM    R3,R5,CHKSPTBS\n         LTR   R3,R3\n         BZ    LEAVE                   NONE = ACCEPT\n         CLC   2(2,R3),TPRG\n         BE    REJCT\n         BXLE  R3,R4,*-10\n         B     LEAVE\nCHKREQ30 OC    TAUT,TAUT\n         BNZ   INVREQ\n         OC    TPRG,TPRG\n         BZ    INVREQ\n         LM    R3,R5,CHKBPTBS          CHECK BOX-PRG.\n         LTR   R3,R3\n         BZ    LEAVE                   NONE = ACCEPT\n         MVC   TBOX+L'TBOX(L'TPRG),TPRG\n         CLC   0(4,R3),TBOX\n         BE    REJCT\n         BXLE  R3,R4,*-10\n         B     LEAVE\n         EJECT\nXOVAP    LA    R1,MSGOVAP\n         B     XOVERR\nXOVBP    LA    R1,MSGOVBP\n         B     XOVERR\nXOVIO    LA    R1,MSGOVIO\n         B     XOVERR\nXOVSP    LA    R1,MSGOVSP\nXOVERR   L     R15,=V(DUJVTA)\n         BASR  R14,R15\n         B     EXMSG\nINVREQ   LA    R1,MSGINRQ\n         B     EXMSG\nEXERR    LA    R1,MSGERR\nEXMSG    L     R2,4(R13)\n         ST    R1,24(R2)               PASS ADDRESS OF MESSAGE\n         LA    R15,8                   SET RC=8\n         B     LEAVE\nREJCT    LA    R15,4                   SET RC=4\nLEAVE   $XRET  CC=(R15)                RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nUJVTADDR DC    A(*-*)\nCHKAPTBS DC    A(*-*,*-*,*-*)\nCHKBPTBS DC    A(*-*,*-*,*-*)\nCHKIOTBS DC    A(*-*,*-*,*-*)\nCHKSPTBS DC    A(*-*,*-*,*-*)\nTAUT     DC    H'0'          AUTHORIZATION NUMBER\nTPRG     DC    H'0'          PROGRAMMER NUMBER\nTBOX     DC    2H'0'         BOX NUMBER\n         SPACE 1\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DC    AL1(L'MSGERR)\nMSGERR   DC    C' Unable to locate UJVTABLE (IEFUJV module) -AUT33'\n         DC    AL1(L'MSGOVAP)\nMSGOVAP  DC    C' Aut.-Prg. internal table overflow (MXAP) - AUT33'\n         DC    AL1(L'MSGOVBP)\nMSGOVBP  DC    C' Box-Prg. internal table overflow (MXBP) - AUT33'\n         DC    AL1(L'MSGOVIO)\nMSGOVIO  DC    C' Aut. internal table overflow (MXIO) - AUT33'\n         DC    AL1(L'MSGOVSP)\nMSGOVSP  DC    C' Aut.-Prg. internal table overflow (MXSP) - AUT33'\n         DC    AL1(L'MSGINRQ)\nMSGINRQ  DC    C' Invalid check request (Aut/Prg/Box) - AUT33'\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT GEN\n        $UJVT\n         EJECT\n*--------------------------------------------------------------------*\n*        INTERNAL TABLES                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\nCHKAPTB  DC    (MXAP-1)F'0'\nCHKAPTBE DC    F'0'                    END OF TABLE\nCHKBPTB  DC    (MXBP-1)F'0'\nCHKBPTBE DC    F'0'                    END OF TABLE\nCHKSPTB  DC    (MXSP-1)F'0'\nCHKSPTBE DC    F'0'                    END OF TABLE\n         SPACE 1\nCHKIOTB  DC    (MXIO-1)H'0'\nCHKIOTBE DC    H'0'                    END OF TABLE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT40": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x18/\\x00\\x92\\x18/\\x14\\x01\\x03\\x8e\\x03\\x8e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-06-30T00:00:00", "modifydate": "1992-06-30T14:01:00", "lines": 910, "newlines": 910, "modlines": 0, "user": "SYSPAJA"}, "text": "AU40     TITLE '-- TSO-CP AUT40 --'\nAUT40    START 0\n         SPACE 1\n**********************************************************************\n*        THIS CP ALLOWS TO KNOW ALL USER-IDS DEFINED WITH A          *\n*        SPECIFIC AUTHORIZATION NUMBER OR PROGRAMMER NUMBER.         *\n*                                         P.A.MOINIL  05 DECEMBRE 89 *\n**********************************************************************\n         PRINT NOGEN\n         SPACE 1\nNMB      EQU   2000                    MAX. NO. OF MEMBERS NAMES IN\n*                                      THE DIRECTORY OF TSO-UADS.\nNAN      EQU   3000                    MAX. NO. OF ACCOUNT NUMBERS IN\n*                                      THE TSO-UADS DATA-SET.\nMXMU     EQU   3                       MAX. NO. OF MEMBERS FOR A USERID\n*                                      IN THE TSO-UADS DATA-SET\n*                                      (ACCEPTABLE RANGE IS 1 UP TO 9).\n         SPACE 1\n        $DEFREG\n        $XENT  BASE=(R10,R11,R12)\n         SPACE 1\n*------- CONTROL OF CALLER (USERID)\n         L     R15,=V(AUT99H)\n         XC    0(4,R15),0(R15)         SUPPRESS HELP KEY\n         XR    R0,R0                   NO HARDCOPY\n         L     R15,=V(AUT98)\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   LEAVE                   BRANCH TO END OF CP\n         L     R1,=A(X'80000000'+PECRIN)\n         L     R15,=V(AUT99)           INITIAL PANEL DISPLAY\n         BALR  R14,R15\n         EJECT\n*--------------------------------------------------------------------*\n*        USERID AUTORISE A UTILISER CETTE CP.                        *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- ALLOCATION DYNAMIC DU FICHIER TSO-UADS (DD-NAME = UADSSYS).\n         XR    R4,R4                   SET SWITCH TO PROCESS\n         L     R1,=V(AUT98U)\n         MVC   DYNDSN(44),0(R1)        SET TSO-UADS DS-NAME\n        $DYNALL DYNLIST                DYNAMIC ALLOC OF TSO-UADS\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OKALL                   BRANCH IF OK\n         STM   R15,R0,DSD\n         UNPK  ERROR1C+9(9),DSD(5)\n         TR    ERROR1C+9(8),TRTAB-X'F0'\n         MVI   ERROR1C+17,C' '\n         UNPK  ERROR1C+23(9),DSD+4(5)\n         TR    ERROR1C+23(8),TRTAB-X'F0'\n         MVI   ERROR1C+31,C' '\n         LA    R1,ERROR1\n         XR    R2,R2\n         LA    R3,ERROR1C\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         BCTR  R4,0                    SET SWITCH TO NO PROCESS\n         B     WHTOGO\nOKALL   OPEN   (RDDIR,INPUT)\n         TM    RDDIR+(DCBOFLGS-IHADCB),DCBOFOPN\n         BO    OKOPN\n         LA    R1,ERROR2\nSNDMS    XR    R2,R2\n         LR    R3,R2\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         BCTR  R4,0                    SET SWITCH TO NO PROCESS\n         B     FRUADS\n*------- RETAIN ALL MEMBERS NAMES OF DIRECTORY.\nOKOPN    LM    R5,R7,DIRPTR\nDIRRD   GET    RDDIR,DIRWA\n         LH    R2,DIRWA                USEFULL LENGTH\n         LA    R3,DIRWA+2              START ADDRESS\n         LA    R15,2                   STARTING COUNT LENGTH\nDIRNX    SR    R2,R15                  REDUCE USEFULL LENGTH\n         BNP   DIRRD                   BRANCH IF NO MORE\n         CLC   0(4,R3),=XL4'0'         END OF DIRECTORY DATA ?\n         BE    DIRRD                   YES\n         CLC   0(8,R3),=XL8'FFFFFFFFFFFFFFFF' NO, END OF DIRECTORIES ?\n         BE    DIREOD                  YES\n         BXLE  R5,R6,DIRMR             NO, BUMP MEMBER TABLE\n        CLOSE  RDDIR\n         LA    R1,ERROR3               DIRECTORY TABLE OVERFLOW\n         B     SNDMS\nDIRMR    MVC   0(8,R5),0(R3)           RETAIN MEMBER NAME\n         IC    R15,11(R3)              NO. OF HALFWORDS DATA LENGTH\n         N     R15,=A(X'0000001F')\n         SLL   R15,1\n         LA    R15,12(R15)             TOTAL DIR. ENTRY LENGTH\n         ALR   R3,R15                  POINT TO NEXT DIR. ENTRY\n         B     DIRNX\nDIREOD   ST    R5,DIRPTR+8             SET TRUE END\n         L     R5,DIRPTR               COMPUTE AND SET TRUE START\n         AL    R5,DIRPTR+4\n         ST    R5,DIRPTR\n        CLOSE  RDDIR\n         CLC   DIRPTR,DIRPTR+8\n         BNE   STMOP\n         LA    R1,ERROR4               DATA-SET ERROR\n         B     SNDMS\n*------- FILL IN ACCOUNT TABLE ALL USERIDS.\nSTMOP   $MOPEN URECL,DYNLIST           OPEN FILE UNDER UADSSYS DD\n         LTR   R15,R15\n         BZ    OKMOP\n         CVD   R15,DSD\n         UNPK  DSD(5),DSD+6(3)\n         MVC   ERROR5+L'ERROR5-2(2),DSD+1\n         LA    R1,ERROR5               OPEN DATA-SET ERROR\n         B     SNDMS\nOKMOP    CLC   URECL,=F'80'            CHECK LOGICAL RECORD LENGTH\n         BE    STUSID\n         LA    R1,ERROR6               LOGICAL RECORD LENGTH ERROR\n         B     SNDMS\nSTUSID   L     R8,DIRPTR\n         LM    R5,R7,ACCPTR\nRDUSID   L     R2,=A(INPUT)\n         LA    R3,NMU\n         MVC   USRNME(8),0(R8)\n         LA    R1,USRNME+L'USRNME-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         TM    0(R1),C'0'\n         BO    *+L'*+14\n         MVC   ERROR13+12(8),0(R8)\n         LA    R1,ERROR13              MEMBER NAME ERROR\n         B     SNDMG\n         MVI   0(R1),C' '\nNXUSID   MVC   MBNME(8),0(R8)\n        $MFIND MBNME,DYNLIST           FIND USERID MEMBER\n         LTR   R15,R15\n         BZ    OKFIND\n         CVD   R15,DSD\n         UNPK  DSD(5),DSD+6(3)\n         MVC   ERROR7+L'ERROR7-2(2),DSD+1\n         MVC   ERROR7+12(L'MBNME),MBNME\n         LA    R1,ERROR7               FIND MEMBER ERROR\nSNDMG    XR    R2,R2\n         LR    R3,R2\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         BCTR  R4,0                    SET SWITCH TO NO PROCESS\n         B     CLUADS\nOKFIND  $MREAD (R2),DYNLIST\n         LTR   R15,R15\n         BM    EODUADS\n         BNZ   ERREAD\n         AL    R2,URECL\n         BCT   R3,OKFIND\n         MVC   ERROR8+L'ERROR8-L'MBNME(L'MBNME),MBNME\n         LA    R1,ERROR8               INPUT BUFFER TOO SMALL\n         B     SNDMG\nERREAD   CVD   R15,DSD\n         UNPK  DSD(5),DSD+6(3)\n         MVC   ERROR9+L'ERROR9-2(2),DSD+1\n         MVC   ERROR9+12(L'MBNME),MBNME\n         LA    R1,ERROR9               MREAD ERROR\n         B     SNDMG\nEODUADS  CL    R8,DIRPTR+8             CHECK IF USER-ID CONTINUE\n         BNL   PRCSUS\n         LR    R9,R8\n         AL    R9,DIRPTR+4\n         MVC   DSD(8),0(R8)\n         LA    R1,DSD+7\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         NI    0(R1),X'0F'\n         TR    0(1,R1),=CL16'123456789*******'\n         CLC   DSD(8),0(R9)\n         BNE   PRCSUS\n         LR    R8,R9\n         B     NXUSID\nPRCSUS   L     R2,=A(INPUT)\n         USING DHED,R2\n         L     R9,UADSPWD1\n         LA    R9,UADSMHDR(R9)\n         USING DPOB,R9\nNXTPSW   L     R14,UADSPSUB\n         LA    R14,UADSMHDR(R14)\n         USING DNOB,R14\nNXTACC   ICM   R15,B'1111',UADSADAT\n         BZ    NOACCT\n         LA    R15,UADSMHDR(R15)\n         USING DNOBD,R15\n         CLI   UADSALEN,8              STANDARD EURATOM AUT/PGM ?\n         BNE   NOACCT                  NO, BYPASS IT\n         BXLE  R5,R6,OKACCT\n         LA    R1,ERROR10              DIRECTORY TABLE OVERFLOW\n         B     SNDMG\nOKACCT   MVC   0(8,R5),UADSANUM        MOVE ACCOUNT (AUT/PGM)\n         DROP  R15\n         MVC   8(8,R5),USRNME          SET USERID NAME\nNOACCT   TM    UADSAFLG,AFLG01         ANY MORE ACCOUNT ?\n         BO    UPTOPS                  NO, GO UP ONE LEVEL\n         XR    R1,R1\n         ICM   R1,B'0111',UADSANEX\n         LA    R14,UADSMHDR(R1)\n         BNZ   NXTACC\n         DROP  R14\nUPTOPS   TM    UADSPFLG,PFLG01         ANY MORE PASSWORDS ?\n         BO    ENDUSR                  NO, END OF THIS USER-ID\n         XR    R1,R1\n         ICM   R1,B'0111',UADSPNEX\n         LA    R9,UADSMHDR(R1)\n         BNZ   NXTPSW\n         DROP  R2\nENDUSR   AL    R8,DIRPTR+4\n         CL    R8,DIRPTR+8\n         BNH   RDUSID\n         ST    R5,ACCPTR+8             SET TRUE END\n         L     R5,ACCPTR               COMPUTE AND SET TRUE START\n         AL    R5,ACCPTR+4\n         ST    R5,ACCPTR\nCLUADS  $MCLOSE DYNLIST                CLOSE FILE BEFORE FREE\n         LTR   R15,R15\n         BZ    FRUADS\n         CVD   R15,DSD\n         UNPK  DSD(5),DSD+6(3)\n         MVC   ERROR11+L'ERROR11-2(2),DSD+1\n         LTR   R4,R4\n         BZ    CLUADSX\n        TPUT   ERROR11,L'ERROR11       CLOSE DATA-SET ERROR\n         B     FRUADS\nCLUADSX  LA    R1,ERROR11              CLOSE DATA-SET ERROR\n         XR    R2,R2\n         LR    R3,R2\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         BCTR  R4,0                    SET SWITCH TO NO PROCESS\nFRUADS   XC    DYNDSN,DYNDSN\n        $DYNALL DYNLIST                DYNAMIC DE-ALLOC OF TSO-UADS\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    WHTOGO                  BRANCH IF OK\n         STM   R15,R0,DSD\n         UNPK  ERROR1C+9(9),DSD(5)\n         TR    ERROR1C+9(8),TRTAB-X'F0'\n         MVI   ERROR1C+17,C' '\n         UNPK  ERROR1C+23(9),DSD+4(5)\n         TR    ERROR1C+23(8),TRTAB-X'F0'\n         MVI   ERROR1C+31,C' '\n         LTR   R4,R4\n         BZ    FRUADSX\n        TPUT   ERROR0+1,L'ERROR0-1\n        TPUT   ERROR1C+1,L'ERROR1C-1\n         B     WHTOGO\nFRUADSX  LA    R1,ERROR0\n         XR    R2,R2\n         LA    R3,ERROR1C\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         BCTR  R4,0                    SET SWITCH TO NO PROCESS\nWHTOGO   LTR   R4,R4                   ANY ERROR ENCOUNTERED ?\n         BNZ   LEAVE                   YES, DON'T CONTINUE, BUT EXIT\n         CLC   ACCPTR,ACCPTR+8\n         BNE   DEMASKC\n         LA    R1,ERROR12              NO VALID ACCOUNT IN DATA-SET\n         XR    R2,R2\n         LR    R3,R2\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     LEAVE\nDEMASKC TCLEARQ INPUT                  RESET ANY INPUT\n         SPACE 1\n*------- ALLOCATION DYNAMIQUE DU FICHIER D'ACCOUNTING\n*        QUI SE TROUVE SOUS LA DD-NAME SYSACC.\n         L     R1,=V(AUT98A)\n         MVC   DYADSN(44),0(R1)        SET ACCOUNT FILE DS-NAME\n        $DYNALL DYALIST                DYNAMIC ALLOC OF SYSACC\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    ALLOK                   B ON ALLOC DONE IF ZERO\n         STM   R15,R0,DSD\n         UNPK  ERROR1C+9(9),DSD(5)\n         TR    ERROR1C+9(8),TRTAB-X'F0'\n         MVI   ERROR1C+17,C' '\n         UNPK  ERROR1C+23(9),DSD+4(5)\n         TR    ERROR1C+23(8),TRTAB-X'F0'\n         MVI   ERROR1C+31,C' '\n         LA    R1,ERROR1A\n         XR    R2,R2\n         LA    R3,ERROR1C\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     LEAVE\nALLOK   CALL   ZOPEN,(RETCD,XOPT),VL   OPEN FILE UNDER SYSACC DD\n         LTR   R0,R15                  IS RETURN CODE 0?\n         BZ    OPNOK                   BRANCH IF YES\n         XR    R1,R1\n         LM    R2,R3,NZOP\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     FREACC\nOPNOK    L     R1,=V(AUT99I)\n         MVC   0(4,R1),=V(AUT95)       SET PF-2 KEY ACTIVE\n        TIME   BIN\n         ST    R1,DATE                 FORMAT = 0CYYDDDF\n         AP    DATE,=PL4'+1900000'\n         EJECT\n*--------------------------------------------------------------------*\n*        HANDLE A REQUEST AND PROCESS IT.                            *\n*--------------------------------------------------------------------*\n         SPACE 1\nDEMINIT  LA    R1,PECRAN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   SEEWHAT                 NO\n         L     R15,=V(AUT99H)\n         XC    0(4,R15),0(R15)         SUPPRESS HELP KEY\n         MVC   ECRANM(L'ECRANM),=CL80' '\n         MVC   ECDATA(79),=CL80' '\n         LA    R15,NLDATA\n         LA    R14,ECDATA+79\n         MVC   0(80,R14),=CL80' '\n         LA    R14,80(R14)\n         BCT   R15,*-10\n        $FS    SF=(PROT),MF=(I,MSGNTF)\n         MVC   MSGNTE(L'MSGNTE),=CL80' '\n         MVC   SBACUR,SBAAUT\n         L     R15,=V(AUT99R)          YES, GET REQUEST\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BNZ   ANLTXT                  NO, GO SEE WHAT ENTERED\n         CLI   SCRCNT,C' '             YES, IS THERE ANY MORE PENDING ?\n         BE    CHKRPT                  NO\n         MVC   SCRCNT(L'SCRCNT),=CL80' '  YES, CONTINUE\n         LA    R4,ECDATA\n         LA    R3,NDATA\n         B     SETIT\nCHKRPT   CLI   SCRAUT,C' '             CHECK TO REPEAT LAST REQUEST\n         BNE   STPRC\n         CLI   SCRPRG,C' '\n         BNE   STPRC\n         CLI   SCRUID,C' '\n         BNE   STPRC\nREASK    MVC   ECRANM(L'MSGASK),MSGASK RE-ASK\n         B     DEMINIT\nANLTXT   CLC   0(3,R15),SBAAUT\n         BNE   NOTAUT\n         MVC   SCRAUT(L'SCRAUT),=CL80' '\n         LTR   R1,R1                   TEXT RECEIVED ?\n         BZ    AUTOK                   NONE (JUST CLEARED)\n         BCT   R1,*+L'*+6\n         MVC   SCRAUT(*-*),3(R15)\n         EX    R1,*-6\n         MVI   CURPOS,C'A'\nAUTOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    SCCTRL                  YES, ALL RECEIVED\nNOTAUT   CLC   0(3,R15),SBAPRG\n         BNE   NOTPRG\n         MVC   SCRPRG(L'SCRPRG),=CL80' '\n         LTR   R1,R1                   TEXT RECEIVED ?\n         BZ    PRGOK                   NONE (JUST CLEARED)\n         BCT   R1,*+L'*+6\n         MVC   SCRPRG(*-*),3(R15)\n         EX    R1,*-6\n         MVI   CURPOS,C'P'\nPRGOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    SCCTRL                  YES, ALL RECEIVED\nNOTPRG   CLC   0(3,R15),SBAUID\n         BNE   NOTUID\n         MVC   SCRUID(L'SCRUID),=CL80' '\n         LTR   R1,R1                   TEXT RECEIVED ?\n         BZ    UIDOK                   NONE (JUST CLEARED)\n         BCT   R1,*+L'*+6\n         OC    SCRUID(*-*),3(R15)\n         EX    R1,*-6\n         MVI   CURPOS,C'U'\nUIDOK    L     R15,=V(AUT99R)          GET NEXT FIELD\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    SCCTRL                  YES, ALL RECEIVED\nNOTUID   MVC   ECRANM(L'MSGSBA),MSGSBA NO, ERROR MESSAGE\n         B     DEMINIT\nSCCTRL   CLI   SCRAUT,C' '             CHECK REQUEST\n         BE    CHKPRG\n         CLI   SCRPRG,C' '\n         BNE   CHKMSG\n         CLI   SCRUID,C' '\n         BNE   CHKMSG\n         XC    DSD(L'SCRAUT),DSD\n         MVZ   DSD(L'SCRAUT),SCRAUT\n         CLC   DSD(L'SCRAUT),=CL4'0000'\n         BE    STPRC\n         MVC   ECRANM(L'MSGINVA),MSGINVA  AUT. INVALID\n         B     DEMINIT\nCHKMSG   MVC   ECRANM(L'MSGDBL),MSGDBL ERROR MESSAGE\n         CLI   CURPOS,C'A'\n         BNE   LKFWD\n         CLI   SCRPRG,C' '\n         BE    *+L'*+10\n         MVC   SBACUR,SBAPRG\n         B     DEMINIT\n         MVC   SBACUR,SBAUID\n         B     DEMINIT\nLKFWD    CLI   CURPOS,C'P'\n         BNE   FWDLK\n         CLI   SCRAUT,C' '\n         BNE   DEMINIT\n         MVC   SBACUR,SBAUID\n         B     DEMINIT\nFWDLK    CLI   CURPOS,C'U'\n         BNE   DEMINIT\n         CLI   SCRAUT,C' '\n         BNE   DEMINIT\n         MVC   SBACUR,SBAPRG\n         B     DEMINIT\nCHKPRG   CLI   SCRPRG,C' '\n         BE    CHKUID\n         CLI   SCRUID,C' '\n         BNE   CHKMSG\n         XC    DSD(L'SCRPRG),DSD\n         MVZ   DSD(L'SCRPRG),SCRPRG\n         CLC   DSD(L'SCRPRG),=CL4'0000'\n         BE    STPRC\n         MVC   ECRANM(L'MSGINVP),MSGINVP  PRG. INVALID\n         MVC   SBACUR,SBAPRG\n         B     DEMINIT\nCHKUID   CLI   SCRUID,C' '\n         BE    REASK\n         CLI   SCRUID,C'A'\n         BL    *+L'*+8\n         CLI   SCRUID,C'Z'\n         BNH   *+L'*+16\n         MVC   ECRANM(L'MSGINVU),MSGINVU  USER-ID INVALID\n         MVC   SBACUR,SBAUID\n         B     DEMINIT\n         LA    R14,SCRUID+L'SCRUID-1\n         LA    R15,L'SCRUID-1\n         STC   R15,KEYLG\n         CLI   0(R14),C' '             LOOK IF KEY/ SEARCH\n         BNE   *+L'*+10\n         BCTR  R14,0\n         BCT   R15,*-10\n         B     STPRC\n         CLI   0(R14),C'/'\n         BNE   STPRC\n         BCTR  R15,0                   COMPUTE LENGTH OF KEY\n         STC   R15,KEYLG\n*------- PROCESS THE REQUEST.\nSTPRC    LM    R5,R7,ACCPTR            FILL PANEL WITH ALL MATCHES\n         LA    R4,ECDATA\n         LA    R3,NDATA\nSRAUT    CLI   SCRAUT,C' '\n         BE    SRPRG\nLPAUT    CLC   0(4,R5),SCRAUT\n         BNE   *+L'*+4\n         BAL   R9,SETIT\n         BXLE  R5,R6,LPAUT\n         B     TSTPR\nSRPRG    CLI   SCRPRG,C' '\n         BE    SRUID\nLPPRG    CLC   4(4,R5),SCRPRG\n         BNE   *+L'*+4\n         BAL   R9,SETIT\n         BXLE  R5,R6,LPPRG\n         B     TSTPR\nSRUIDCK  CLC   8(*-*,R5),SCRUID\nSRUID    XR    R15,R15\n         IC    R15,KEYLG\n         EX    R15,SRUIDCK\n         BNE   *+L'*+4\n         BAL   R9,SETIT\n         BXLE  R5,R6,SRUID\nTSTPR    CLC   ECDATA(20),=CL80' '\n         BNE   TCRPS\n         MVC   ECRANM(L'MSGNNM),MSGNNM NONE MESSAGE\nTCRPS    CLI   CURPOS,C'P'\n         BNE   *+L'*+10\n         MVC   SBACUR,SBAPRG\n         B     DEMINIT\n         CLI   CURPOS,C'U'\n         BNE   DEMINIT\n         MVC   SBACUR,SBAUID\n         B     DEMINIT\nSETIT    BCT   R3,*+L'*+10\n         MVC   SCRCNT,=CL6'*MORE*'\n         B     TCRPS\n         MVC   2(7,R4),8(R5)\n         MVC   10(4,R4),0(R5)\n         MVC   15(4,R4),4(R5)\n         PACK  DSD,4(4,R5)\n         CVB   R0,DSD\n         STH   R0,PRGNO\n         LNR   R0,R0\n         STH   R0,PRGNM\n         PACK  DSD,0(4,R5)             CHECK ACCOUNTING NUMBER\n         CVB   R0,DSD\n         STH   R0,ARGUMAUT\n        CALL   ZREAD,(RETCD,ARGUMAUT,AREAR),VL\n         LTR   R15,R15                 TEST RETURN CODE 0\n         BZ    SETFND                  IF YES, RECORD FOUND\n         CH    R15,=H'15'              TEST RETURN CODE 15\n         BE    SETNFD                  IF YES, AUT. NOT FOUND\n         XR    R1,R1\n         LM    R2,R3,NZRD\n         L     R15,=V(AUT97)\n         BALR  R14,R15\n         B     CLSZR\nSETFND   LA    R15,AREAR\n         USING AUTDSECT,R15\n         LH    R1,AUTANO\n         LTR   R1,R1\n         BNP   SETCAN                  AUT. CANCELED\n         XR    R1,R1\n         ICM   R1,B'0111',AUTVSD\n         CL    R1,=F'99999'            WHICH FORMAT?\n         BH    *+L'*+4                 NEW FORMAT\n         AL    R1,=F'1900000'          OLD FORMAT, ADJUST IT\n         CVD   R1,DSD\n         CP    DATE,DSD+4(4)\n         BL    SETNYA                  AUT. NOT YET ACTIVE\n         XR    R1,R1\n         ICM   R1,B'0111',AUTVED\n         CL    R1,=F'99999'            WHICH FORMAT?\n         BH    *+L'*+4                 NEW FORMAT\n         AL    R1,=F'1900000'          OLD FORMAT, ADJUST IT\n         CVD   R1,DSD\n         CP    DATE,DSD+4(4)\n         BH    SETEXP                  AUT. EXPIRED\n         LA    R0,AUTNPNF\n         LA    R1,AUTPNO\nSETLOOP  CLC   0(L'PRGNO,R1),PRGNO     CHECK PRG. ALLOWED\n         BE    SETOK\n         CLC   0(L'PRGNM,R1),PRGNM     CHECK PRG. INVALIDATED\n         BE    SETINV\n         LA    R1,L'AUTPNO(R1)\n         BCT   R0,SETLOOP\n         DROP  R15\n         MVI   0(R4),C'P'              PRG. NOT DEFINED\n         B     SETMNT\nSETNFD   MVI   0(R4),C'N'\n         B     SETMNT\nSETCAN   MVI   0(R4),C'C'\n         B     SETMNT\nSETNYA   MVI   0(R4),C'S'\n         B     SETMNT\nSETEXP   MVI   0(R4),C'E'\n         B     SETMNT\nSETINV   MVI   0(R4),C'I'\nSETMNT   CLI   MSGNTE,C' '\n         BNE   SETOK\n        $FS    SF=(PROT,INT),MF=(I,MSGNTF)\n        $FS    TEXT='Note :',MF=(I,MSGNTE)\n        $FS    SF=(PROT),MF=I\n        $FS    TEXT='hit',MF=I\n        $FS    SF=(PROT,INT),MF=I\n        $FS    TEXT='PF-1',MF=I\n        $FS    SF=(PROT),MF=I\n        $FS    TEXT='to get flag meanings.',MF=I\n         L     R15,=V(AUT99H)\n         MVC   0(4,R15),=A(PECRAH)     REPLACE HELP KEY\nSETOK    LA    R4,20(R4)\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        FIN DU TRAVAIL - SORTIE.                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nSEEWHAT  CH    R15,=H'4'\n         BNE   CLSZR                   ERROR, EXIT\n         XR    R1,R1                   END OF CP REQUESTED\n         L     R15,=V(AUT99)           EXIT FULLSCREEN\n         BALR  R14,R15\nCLSZR   CALL   ZCLOSE,(RETCD),VL       CLOSE ACCOUNT FILE\n         LTR   R0,R15                  IS RETURN CODE 0?\n         BZ    FREACC                  BRANCH IF YES\n         XR    R1,R1\n        CALL   ZYDIAG\n         LA    R8,1(R15)\n         XR    R9,R9\n         BCTR  R15,0\n         IC    R9,0(R15)\n         BCTR  R9,0\n        TPUT   (R8),(R9)\nFREACC   XC    DYADSN,DYADSN\n        $DYNALL DYALIST                DYNAMIC DE-ALLOC OF SYSACC\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    LEAVE                   BRANCH IF OK\n         STM   R15,R0,DSD\n        TPUT   ERROR0A,L'ERROR0A\n         UNPK  ERROR1C+9(9),DSD(5)\n         TR    ERROR1C+9(8),TRTAB-X'F0'\n         MVI   ERROR1C+17,C' '\n         UNPK  ERROR1C+23(9),DSD+4(5)\n         TR    ERROR1C+23(8),TRTAB-X'F0'\n         MVI   ERROR1C+31,C' '\n        TPUT   ERROR1C+1,L'ERROR1C-1\nLEAVE   $XRET  CC=0\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL.                                       *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nDIRPTR   DC    A(DIRTB-L'DIRTB,L'DIRTB,EDIRTB)\nACCPTR   DC    A(ACCTB-L'ACCTB,L'ACCTB,EACCTB)\nPECRIN   DC    A(LECRIN,ECRIN)\nPECRAN   DC    A(LECRAN,ECRAN)\nPECRAH   DC    A(LECRAH,ECRAH)\nURECL    DC    F'0'\nRETCD    DC    F'0'          RETURN CODE FROM Z... ROUTINES\nNZOP     DC    0F'0',CL8'ZOPEN'\nNZRD     DC    0F'0',CL8'ZREAD'\nTRTAB    DC    C'0123456789ABCDEF'\nMBNME    DC    CL8' '\nUSRNME   DC    CL8' '\nXOPT     DC    C'ONLY'       OPTION FOR Z... ROUTINES\nDATE     DC    PL4'+0'\nARGUMAUT DC    H'0'\nPRGNO    DC    H'0'\nPRGNM    DC    H'0'\nKEYLG    DC    AL1(*-*)\nCURPOS   DC    CL1'A'\nDIRWA    DC    0F'0',XL256'0'\nAREAR    DC    0F'0',(AUTLGTH)X'0'\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION PARAMETER LISTS                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0F\nDYNLIST  DC    C'UADSSYS '\nDYNDSN   DC    XL44'0'\n         DC    CL8' '        MEMBER NAME\n         DC    CL8' '        PASSWORD\n         DC    CL8'SHR'      STATUS\n         DC    CL256' '      FILLER\n         DC    CL88' '       FILLER\n         SPACE 1\n         DS    0F\nDYALIST  DC    C'SYSACC  '\nDYADSN   DC    XL44'0'\n         DC    CL8' '        MEMBER NAME\n         DC    CL8' '        PASSWORD\n         DC    CL8'SHR'      STATUS\n         DC    CL256' '      FILLER\n         DC    CL85' '       FILLER\n         EJECT\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DC    AL1(L'ERROR0)\nERROR0   DC    C' TSO-UADS : dynamic de-allocation error.'\n         DC    AL1(L'ERROR0A)\nERROR0A  DC    C'*** ACCOUNT file FREE error ***'\n         DC    AL1(L'ERROR1)\nERROR1   DC    C' TSO-UADS : dynamic allocation error.'\n         DC    AL1(L'ERROR1A)\nERROR1A  DC    C' *** ACCOUNT file ALLOC error ***'\n         DC    AL1(L'ERROR1C)\nERROR1C  DC    C'     R15=........ - R0=........ - AUT40'\n         DC    AL1(L'ERROR2)\nERROR2   DC    C' TSO-UADS : open directory failed.'\n         DC    AL1(L'ERROR3)\nERROR3   DC    C' TSO-UADS : directory table overflow.'\n         DC    AL1(L'ERROR4)\nERROR4   DC    C' TSO-UADS : data-set empty (no members).'\n         DC    AL1(L'ERROR5)\nERROR5   DC    C' TSO-UADS : open data-set error - MOPEN RC=  '\n         DC    AL1(L'ERROR6)\nERROR6   DC    C' TSO-UADS : unexpected logical record length (not 80)'\n         DC    AL1(L'ERROR7)\nERROR7   DC    C' TSO-UADS :          not found - MFIND RC=  '\n         DC    AL1(L'ERROR8)\nERROR8   DC    C' TSO-UADS : input buffer overflow reading         '\n         DC    AL1(L'ERROR9)\nERROR9   DC    C' TSO-UADS :          read error - MREAD RC=  '\n         DC    AL1(L'ERROR10)\nERROR10  DC    C' TSO-UADS : account numbers table overflow.'\n         DC    AL1(L'ERROR11)\nERROR11  DC    C' TSO-UADS : close data-set error - MCLOSE RC=  '\n         DC    AL1(L'ERROR12)\nERROR12  DC    C' TSO-UADS : data-set empty (no valid account numbers)'\n         DC    AL1(L'ERROR13)\nERROR13  DC    C' TSO-UADS :          = erroneous member name.'\nMSGASK   DC    C'Please ENTER an Authorization or a Programmer number o1\n               r a User-ID.'\nMSGSBA   DC    C'Input scan SBA order not found ???'\nMSGDBL   DC    C'More selections done. Please choice only one.'\nMSGINVA  DC    C'Invalid Authorization Number (not 4 numerics).'\nMSGINVP  DC    C'Invalid Programmer Number (not 4 numerics).'\nMSGINVU  DC    C'Invalid User-ID (first character not alpha).'\nMSGNNM   DC    C'There are no matches to your request.'\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRANS D'OUTPUT.                                            *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRIN   $FS    CC=W,WCC=(AL,KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,27),SF=(PROT,INT),MF=L\n        $FS    TEXT='USER-ID''S   D I S P L A Y',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,27),SF=(PROT,INT),MF=L\n        $FS    TEXT='=========================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,1),SF=(PROT,INT),MF=L\n        $FS    TEXT='Purpose :',MF=L\n        $FS    SF=(PROT),TEXT='this Commmand Processor (CP) ',MF=L\n        $FS    TEXT='allows you to display the Accounting',MF=L\n        $FS    SBA=(5,12),TEXT='information and TSO User-IDs ',MF=L\n        $FS    TEXT='for a specific Authorization Number',MF=L\n        $FS    SBA=(6,12),TEXT='or Programmer Number as well ',MF=L\n        $FS    TEXT='as the Accounting information for a',MF=L\n        $FS    SBA=(7,12),TEXT='specific TSO User-ID.',MF=L\n        $FS    SBA=(9,1),SF=(PROT,INT),RA=(9,80,-),MF=L\n        $FS    SBA=(10,2),TEXT='Remarks :',MF=L\n        $FS    SF=(PROT),TEXT='1. If desired, you can also ',MF=L\n        $FS    TEXT='enter directly in this process typing',MF=L\n        $FS    SBA=(11,15),TEXT='the TSO-command',MF=L\n        $FS    SF=(PROT,INT),TEXT='AUT40',MF=L\n        $FS    SF=(PROT),TEXT='at any time in your session.',MF=L\n        $FS    SBA=(12,11),MF=L\n        $FS    SF=(PROT),TEXT='2. Any changes in the TSO-UADS ',MF=L\n        $FS    TEXT='data-set during this CP is running',MF=L\n        $FS    SBA=(13,15),TEXT='are never immediately ',MF=L\n        $FS    TEXT='displayable. The reason is because once',MF=L\n        $FS    SBA=(14,15),TEXT='at the beginning, all the ',MF=L\n        $FS    TEXT='requested data are read and memorized',MF=L\n        $FS    SBA=(15,15),TEXT='in an internal core storage ',MF=L\n        $FS    TEXT='table.',MF=L\n        $FS    SBA=(16,1),SF=(PROT,INT),RA=(16,80,-),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(19,10),SF=(PROT,INT),RA=(19,70,*),MF=L\n        $FS    SBA=(20,11),TEXT='* Now, sorry if you must wait a ',MF=L\n        $FS    TEXT='couple of minutes ... but *',MF=L\n        $FS    SBA=(21,11),TEXT='* the internal core storage ',MF=L\n        $FS    TEXT='table takes time to be build. *',MF=L\n        $FS    SBA=(22,11),RA=(22,70,*),MF=L\n        $FS    SF=(PROT),MF=L\n        PRINT  OFF\n        $FS    SBA=(24,1),SF=(PROT,INT),TEXT='WELCOME',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='to this up-grade CP implemented by ',MF=L\n        $FS    TEXT='MOINIL P.A. ... your wizard |',MF=L\n        PRINT  ON\n        $FS    SF=(PROT),MF=L\n        $FS    SF=(IC),TEXT=(' ',1),MF=L\n        $FS    SF=(PROT),MF=L\nLECRIN   EQU   *-ECRIN\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,27),SF=(PROT,INT),MF=L\n        $FS    TEXT='USER-ID''S   D I S P L A Y',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,27),SF=(PROT,INT),MF=L\n        $FS    TEXT='=========================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,1),SF=(PROT),MF=L\n        $FS    TEXT='Enter Authorization Number',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT,NUM),MF=L\nSBAAUT  $FS    SBA=(4,34),MF=L\nSCRAUT  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='or Programmer Number',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT,NUM),MF=L\nSBAPRG  $FS    SBA=(4,65),MF=L\nSCRPRG  $FS    TEXT=(' ',4),MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SBA=(5,7),SF=(PROT),TEXT='User-ID (or key/)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nSBAUID  $FS    SBA=(5,31),MF=L\nSCRUID  $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='or Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (end or emergency).',MF=L\n        $FS    SBA=(6,1),SF=(PROT,INT),MF=L\nECRANM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,1),SF=(PROT),MF=L\n        $FS    TEXT='F User-ID Aut. Prg. ',MF=L\n        $FS    TEXT='F User-ID Aut. Prg. ',MF=L\n        $FS    TEXT='F User-ID Aut. Prg. ',MF=L\n        $FS    TEXT='F User-ID Aut. Prg.',MF=L\n        $FS    SBA=(8,1),SF=(PROT),MF=L\n        $FS    TEXT='- ------- ---- ---- ',MF=L\n        $FS    TEXT='- ------- ---- ---- ',MF=L\n        $FS    TEXT='- ------- ---- ---- ',MF=L\n        $FS    TEXT='- ------- ---- ----',MF=L\n        $FS    SBA=(9,1),SF=(PROT,INT),MF=L\nECDATA  $FS    TEXT=(' ',79),MF=L      LINE  9 -  1\n        $FS    TEXT=(' ',80),MF=L      LINE 10 -  2\n        $FS    TEXT=(' ',80),MF=L      LINE 11 -  3\n        $FS    TEXT=(' ',80),MF=L      LINE 12 -  4\n        $FS    TEXT=(' ',80),MF=L      LINE 13 -  5\n        $FS    TEXT=(' ',80),MF=L      LINE 14 -  6\n        $FS    TEXT=(' ',80),MF=L      LINE 15 -  7\n        $FS    TEXT=(' ',80),MF=L      LINE 16 -  8\n        $FS    TEXT=(' ',80),MF=L      LINE 17 -  9\n        $FS    TEXT=(' ',80),MF=L      LINE 18 - 10\n        $FS    TEXT=(' ',80),MF=L      LINE 19 - 11\n        $FS    TEXT=(' ',80),MF=L      LINE 20 - 12\n        $FS    TEXT=(' ',80),MF=L      LINE 21 - 13\n        $FS    TEXT=(' ',80),MF=L      LINE 22 - 14\n        $FS    TEXT=(' ',80),MF=L      LINE 23 - 15\nLDATA    EQU   *-ECDATA\nNDATA    EQU   ((LDATA+1)/20)+1\nNLDATA   EQU   ((LDATA+1)/80)-1\n        $FS    SBA=(24,1),MF=L\nMSGNTF  $FS    SF=(PROT),MF=L\nMSGNTE  $FS    TEXT=(' ',70),MF=L\n        $FS    SBA=(24,72),SF=(PROT,INT),MF=L\nSCRCNT  $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),MF=L\nSBACUR  $FS    SBA=(4,34),SF=(IC),MF=L\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL.                                               *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DATA CONTROL BLOCK FOR TSO-UADS DIRECTORY.                  *\n*--------------------------------------------------------------------*\n         SPACE 1\nRDDIR   DCB    DDNAME=UADSSYS,DSORG=PS,MACRF=GM,EODAD=DIREOD,          1\n               RECFM=F,BLKSIZE=256,LRECL=256\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRAN LOCAL POUR HELP.                                      *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRAH   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,27),SF=(PROT,INT),MF=L\n        $FS    TEXT='USER-ID''S   D I S P L A Y',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,27),SF=(PROT,INT),MF=L\n        $FS    TEXT='=========================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,1),SF=(PROT),MF=L\n        $FS    TEXT='Flag values description :',MF=L\n        $FS    SBA=(5,1),MF=L\n        $FS    TEXT='-------------------------',MF=L\n        $FS    SBA=(7,10),SF=(PROT,INT),TEXT='N',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='= Authorization not found.',MF=L\n        $FS    SBA=(9,10),SF=(PROT,INT),TEXT='C',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='= Authorization has been invalidated.',MF=L\n        $FS    SBA=(11,10),SF=(PROT,INT),TEXT='S',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='= Authorization not yet active.',MF=L\n        $FS    SBA=(13,10),SF=(PROT,INT),TEXT='E',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='= Authorization is expired.',MF=L\n        $FS    SBA=(15,10),SF=(PROT,INT),TEXT='I',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='= Programmer has been invalidated in this ',MF=L\n        $FS    TEXT='Authorization.',MF=L\n        $FS    SBA=(17,10),SF=(PROT,INT),TEXT='P',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='= Programmer is not defined in this ',MF=L\n        $FS    TEXT='Authorization.',MF=L\n        $FS    SBA=(21,1),SF=(PROT,INT),TEXT='Note :',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='these checks are those done by the System ',MF=L\n        $FS    TEXT='on the Accounting',MF=L\n        $FS    SBA=(22,9),MF=L\n        $FS    TEXT='field of any JOB or LOGON.',MF=L\n        $FS    SBA=(24,1),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to escape',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAH   EQU   *-ECRAH\n         EJECT\n*--------------------------------------------------------------------*\n*        WORKING TABLES.                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0D                 FORCE DOUBLE-WORD ALIGNMENT\nNMU      EQU   MXMU*10\nINPUT    DS    (NMU)CL80          READ MEMBERS INPUT BUFFER\n         SPACE 1\nDIRTB    DS    (NMB)XL8           DIRECTORY MEMBERS NAMES\nEDIRTB   EQU   *-L'DIRTB\n         SPACE 1\nACCTB    DS    (NAN)XL16          ACCOUNT/USER-ID'S\nEACCTB   EQU   *-L'ACCTB\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS.                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\n        DCBD   DEVD=DA,DSORG=PS\n        IKJEFUAD DSPL,ALL\n         SPACE 1\n         PRINT GEN\n        $AIRD  R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT90": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x00\\x9f\\x00\\x90\\x00\\x9f\\x148\\x01G\\x01G\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-09T00:00:00", "modifydate": "1990-01-09T14:38:00", "lines": 327, "newlines": 327, "modlines": 0, "user": "SYSPAJA"}, "text": "AU90     TITLE '-- ROUTINE AUT90 - USERID/ACCOUNT SERVICE --'\nAUT90    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE ENABLE YOU TO GET THE ACCOUNTING            *\n*        INFORMATION IN 'TSO-UADS'.                                  *\n*        IT ASKS THE USERID AND IT RETURNS THE PROGRAMMER            *\n*        NUMBER (CL4) AND THE USERID (CL7).                          *\n*                                             M.SACRE  01 OCTOBRE 84 *\n*                                        P.A.MOINIL  21 SEPTEMBRE 89 *\n**********************************************************************\n*        CALL AUT90,(PARM),VL                                        *\n*        FUNCTION : SUBROUTINE TO GET THE ACCOUNTING OF A USERID     *\n*                   FROM THE TSO-UADS, AND THEN PASS BACK THE        *\n*                   ACCOUNTING NUMBER AND USERID.                    *\n*        AT ENTRY : R1  = PARM. ADDRESS                              *\n*                         PARM. --->   A(ACCNUSID) WHICH IS THE      *\n*                                      ADDRESS OF AN 15-CHAR. FIELD. *\n*                             FORMAT : CL15'AAAAPPPPUUUUUUU'         *\n*                         WHERE UUUUUUU CAN BE :                     *\n*                         - ALL BLANKS TO ASK A USERID OR            *\n*                         - A USERID TO PROCESS OR                   *\n*                         - XL1'FF' TO SET ERROR MSG AND RE-ASK      *\n*                           THE USERID                               *\n*         AT EXIT : R15 = 0 - NORMAL COMPLETION                      *\n*                         4 - END REQUESTED                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R10\n         SPACE 1\n         NOP   BEGIN                   SWITCH MOD'S\n         OI    *-3,X'F0'               THIS WAY DONE JUST ONCE\n         L     R2,=V(MCLOSE)           NULLIFY WTO IN MODULE\n         LA    R2,X'0160'(R2)          VERY NEAR DISPLACEMENT\n         CLC   0(2,R2),=XL2'0A23'      NOW SEARCH THE WTO\n         BE    *+L'*+8\n         LA    R2,2(R2)\n         B     *-14\n         MVC   0(2,R2),=XL2'0700'      ZAP WITH NOPR\nBEGIN    L     R9,0(R1)                LOAD ADDR OF PARM\n         MVC   0(8,R9),=CL8' '         RESET ACCOUNT\n         CLC   8(7,R9),=CL8' '         MUST ASK FOR USERID?\n         BE    NEWASK                  YES\n         CLI   8(R9),X'FF'             YES, PGRMER NUMBER NOT FOUND?\n         BE    NEWASK                  YES\n         MVC   RESPONSE(7),8(R9)       NO, GET NEW USERID\n         B     TESTASK\nNEWASK   MVI   ECRANM,C' '             NO, ASK FOR IT\n         MVC   ECRANM+1(L'ECRANM-1),ECRANM\n         MVC   ECRANZ,ECRANM\n         CLI   8(R9),X'FF'             PGRMER NUMBER NOT FOUND?\n         BNE   REASK                   NO\n         MVC   ECRANM(L'MSGPN1),MSGPN1 SET PGRMER NUMBER NOT FOUND\nREASK    MVC   8(7,R9),=CL8' '         RESET\n         LA    R1,PECRAN\n         L     R15,=V(AUT99)           ASK USERID\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END (ONLY 4)\n         L     R15,=V(AUT99R)          GET USERID\n         BALR  R14,R15\n         LTR   R15,R15                 ONLY END OF TEXT ?\n         BZ    QUIT                    YES\n         LTR   R1,R1                   NO TEXT ?\n         BZ    QUIT                    YES\n         MVC   RESPONSE(L'RESPONSE),=CL8' '\n         BCT   R1,*+L'*+6\n         MVC   RESPONSE(*-*),3(R15)\n         EX    R1,*-6\nTESTASK  OC    RESPONSE(L'RESPONSE),=CL8' '  TRANSLATE TO UPPER CASE\n         CLC   RESPONSE(L'RESPONSE),=CL8' '  IS RESPONSE BLANK ?\n         BE    QUIT                    YES, ESCAPE FROM SUBR.\n*------- ADD ZERO AT THE END OF THE USERID ENTERED\n         MVI   ECRANM,C' '\n         MVC   ECRANM+1(L'ECRANM-1),ECRANM\n         MVC   ECRANZ,ECRANM\n         MVC   USERID(L'USERID-1),RESPONSE  BUILD TSO-UADS MEMBER NAME\n         MVI   USERID+L'USERID-1,C' '\n         LA    R2,7\n         LA    R3,USERID+L'USERID-2\n         CLI   0(R3),C' '              IS CHARACTER BLANK ?\n         BNE   *+L'*+6                 IF YES, ADD ZERO AT END\n         BCTR  R3,0                    BACK NEXT CHAR\n         BCT   R2,*-10                 IF NOT, CHECK FOLLOWING CHAR.\n         MVI   1(R3),C'0'              ADD ZERO AT END OF USERID\n         SPACE 1\n*--------------------------------------------------------------------*\n*        ALLOCATION DYNAMIQUE DU MEMBRE QUI DEFINI LE USER TSO.      *\n*        CE FICHIER EST SOUS LA DD-NAME 'UADSSYS' (TSO-UADS).        *\n*--------------------------------------------------------------------*\n         SPACE 1\n         L     R1,=V(AUT98U)\n         MVC   DYNDSN(44),0(R1)        SET TSO-UADS DS-NAME\n        $DYNALL DYNLIST                DYNAMIC ALLOC OF TSO-UADS\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OKALL                   BRANCH IF OK\n         MVC   ECRANM(L'MSGERR1),MSGERR1\n         STM   R15,R0,DSD\n         MVC   ECRANZ(L'ERRORRC),ERRORRC\n         UNPK  ECRANZ+8(9),DSD(5)\n         TR    ECRANZ+8(8),TRTAB-X'F0'\n         MVI   ECRANZ+16,C' '\n         UNPK  ECRANZ+22(9),DSD+4(5)\n         TR    ECRANZ+22(8),TRTAB-X'F0'\n         MVI   ECRANZ+30,C' '\n         B     REASK\nOKALL    XR    R4,R4                   SET SWITCH TO PROCESS\n        $MOPEN URECL,DYNLIST           OPEN FILE UNDER UADSSYS DD\n         LTR   R15,R15\n         BZ    OKOPEN\n         CVD   R15,DSD\n         UNPK  DSD(5),DSD+6(3)\n         MVC   ECRANM(L'MSGERR2),MSGERR2\n         MVC   ECRANM+L'MSGERR2(2),DSD+1\nRETOC    BCTR  R4,0\n         B     FRUADS\nOKOPEN  $MFIND USERID,DYNLIST          FIND USERID MEMBER\n         LTR   R15,R15\n         BZ    OKFIND\n         CVD   R15,DSD\n         UNPK  DSD(5),DSD+6(3)\n         MVC   ECRANM(L'MSGERR3),MSGERR3\n         MVC   ECRANM+L'MSGERR3(2),DSD+1\n         MVI   ECRANM+L'MSGERR3+3,C'-'\n         MVC   ECRANM+L'MSGERR3+5(L'USERID),USERID\n         LA    R1,ECRANM+L'MSGERR3+L'USERID+4\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   0(4,R1),=CL4' ???'\nRETOEC   BCTR  R4,0\n         B     CLUADS\nOKFIND   L     R2,=A(INPUT)\n         LA    R3,20\nLOOP    $MREAD (R2),DYNLIST\n         LTR   R15,R15\n         BM    EODUADS\n         BNZ   ERREAD\n         AL    R2,URECL\n         BCT   R3,LOOP\n         MVC   ECRANM(L'MSGERR4),MSGERR4\n         MVC   ECRANM+L'MSGERR4(L'USERID),USERID\n         LA    R1,ECRANM+L'MSGERR4+L'USERID-1\n         B     RETERR\nERREAD   CVD   R15,DSD\n         UNPK  DSD(5),DSD+6(3)\n         MVC   ECRANM(L'MSGERR5),MSGERR5\n         MVC   ECRANM+L'MSGERR5(2),DSD+1\n         B     RETOEC\nEODUADS  L     R2,=A(INPUT)\n         USING DHED,R2\n         L     R3,UADSPWD1\n         LA    R3,UADSMHDR(R3)\n         USING DPOB,R3\n         L     R5,UADSPSUB\n         DROP  R3\n         LA    R5,UADSMHDR(R5)\n         USING DNOB,R5\n         ICM   R6,B'1111',UADSADAT\n         BZ    NOACCT\n         DROP  R5\n         LA    R6,UADSMHDR(R6)\n         USING DNOBD,R6\n         CLI   UADSALEN,8              STANDARD EURATOM AUT/PGM ?\n         BE    OKACCT                  BRANCH IF YES\nNOACCT   MVC   ECRANM(L'MSGERR6),MSGERR6\n         MVC   ECRANM+L'MSGERR6(L'USERID),USERID\n         LA    R1,ECRANM+L'MSGERR6+L'USERID-1\nRETERR   CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   0(R1),C')'\n         B     RETOEC\nOKACCT   MVC   INFO(8),UADSANUM        MOVE ACCOUNT INFO(AUT/PGM)\n         DROP  R2,R6\n         LA    R0,L'INFO\n         LA    R1,INFO+L'INFO\n         BCTR  R1,0\n         CLI   0(R1),C'0'              TEST IF NUMERIC\n         BL    WRANUM\n         CLI   0(R1),C'9'\n         BH    WRANUM\n         BCT   R0,*-18\n         MVC   0(8,R9),INFO            MOVE ACCOUNT IN RETURN\n         MVC   8(7,R9),RESPONSE        MOVE USERID IN RETURN\nCLUADS  $MCLOSE DYNLIST                CLOSE FILE BEFORE FREE\n         LTR   R15,R15\n         BZ    FRUADS\n         LA    R2,ECRANM\n         CLC   0(8,R2),=CL8' '\n         BE    SETMSC\n         LA    R2,ECRANZ\n         CLC   0(8,R2),=CL8' '\n         BNE   RETOC\nSETMSC   CVD   R15,DSD\n         UNPK  DSD(5),DSD+6(3)\n         MVC   0(L'MSGERR8,R2),MSGERR8\n         MVC   0+L'MSGERR8(2,R2),DSD+1\n         B     RETOC\nWRANUM   MVC   ECRANM(L'MSGERR7),MSGERR7\n         MVC   ECRANM+L'MSGERR7(L'USERID),USERID\n         B     RETERR\n         SPACE 1\n*--------------------------------------------------------------------*\n*        FREE SYS1.UADS FILE                                         *\n*--------------------------------------------------------------------*\n         SPACE 1\nFRUADS   XC    DYNDSN,DYNDSN\n        $DYNALL DYNLIST                FREE FILE TSO-UADS\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    CALL                    IF ZERO, GO CALL SUBROUTINE\n         LA    R2,ECRANM\n         CLC   0(8,R2),=CL8' '\n         BE    SETMSF\n         LA    R2,ECRANZ\n         CLC   0(8,R2),=CL8' '\n         BNE   REASK\nSETMSF   MVC   0(L'MSGERR9,R2),MSGERR9\n         CLC   ECRANZ(8),=CL8' '\n         BNE   REASK\n         STM   R15,R0,DSD\n         MVC   ECRANZ(L'ERRORRC),ERRORRC\n         UNPK  ECRANZ+8(9),DSD(5)\n         TR    ECRANZ+8(8),TRTAB-X'F0'\n         MVI   ECRANZ+16,C' '\n         UNPK  ECRANZ+22(9),DSD+4(5)\n         TR    ECRANZ+22(8),TRTAB-X'F0'\n         MVI   ECRANZ+30,C' '\n         B     REASK\nCALL     LTR   R4,R4                   ANYTHING WRONG ?\n         BNZ   REASK                   YES\nQUIT     XR    R15,R15                 NO, ALL RIGTH\nLEAVE   $XRET  CC=(R15)                RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nPECRAN   DC    A(LECRAN,ECRAN)\nURECL    DC    F'0'          LOGICAL RECORD LENGTH OF TSO-UADS\nUSERID   DC    CL8' '        MEMBER NAME\nINFO     DC    CL8' '\nRESPONSE DC    CL7' '\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION PARAMETER LIST                           *\n*--------------------------------------------------------------------*\n         SPACE 1\nDYNLIST  DC    C'UADSSYS '\nDYNDSN   DC    XL44'0'\n         DC    CL8' '        MEMBER NAME\n         DC    CL8' '        PASSWORD\n         DC    CL8'SHR'      STATUS\n         DC    CL256' '      FILLER\n         DC    CL88' '       FILLER\n         SPACE 1\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nMSGPN1   DC    C'Programmer NOT FOUND - Account received from USERID'\nMSGERR1  DC    C'TSO-UADS : dynamic allocation error.'\nMSGERR2  DC    C'TSO-UADS : open data-set error - MOPEN RC='\nMSGERR3  DC    C'TSO-UADS : USERID not found - MFIND RC='\nMSGERR4  DC    C'TSO-UADS : input buffer overflow for USERID ('\nMSGERR5  DC    C'TSO-UADS : read USERID error - MREAD RC='\nMSGERR6  DC    C'TSO-UADS : account none or invalid for USERID ('\nMSGERR7  DC    C'TSO-UADS : account not numeric for USERID ('\nMSGERR8  DC    C'TSO-UADS : close data-set error - MCLOSE RC='\nMSGERR9  DC    C'TSO-UADS : dynamic free error.'\nERRORRC  DC    C'    R15=........ - R0=........ - AUT90'\nTRTAB    DC    C'0123456789ABCDEF'\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRAN D'OUTPUT                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='PROGRAMMER    U S E R - I D',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='===========================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(5,10),SF=(PROT),MF=L\n        $FS    TEXT='Enter Programmer USERID (7 char.max.)',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='or you may Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to escape or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L\n        $FS    SBA=(22,1),SF=(PROT,INT),MF=L\nECRANM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRANZ  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        BUFFER TO STORE RECORDS FROM TSO-UADS                       *\n*--------------------------------------------------------------------*\n         SPACE 1\nINPUT    DS    20CL80                  (OUT OF BASE REGISTERS)\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n        IKJEFUAD DSPL,ALL\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT95": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x00\\x9f\\x00\\x90\\x00\\x9f\\x148\\x00\\xb4\\x00\\xb4\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-09T00:00:00", "modifydate": "1990-01-09T14:38:00", "lines": 180, "newlines": 180, "modlines": 0, "user": "SYSPAJA"}, "text": "AU95     TITLE '-- ROUTINE AUT95 - STATUS SERVICE --'\nAUT95    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE PREPARE THE CURRENT DATA-SET STATUS         *\n*        TO BE DISPLAYED BY AUT99 WHEN USING PF-2 KEY.               *\n*                                   (MOINIL P.A. - 16 NOVEMBER 1989) *\n**********************************************************************\n*        CALL AUT95                                                  *\n*        FUNCTION : STATUS PREPARE PANEL.                            *\n*         AT EXIT : R15 = 0 - NORMAL COMPLETION WITH                 *\n*                             R0  = SCREEN IMAGE LENGTH              *\n*                             R1  = SCREEN IMAGE ADDRESS             *\n*                         4 - ABNORMAL COMPLETION OF 'ZSTATE' CALL   *\n*                             (MESSAGE OF SEVERE ERROR SENT)         *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R10\n         SPACE 1\n        CALL   ZSTATE,(RETCD,STAR),VL  GET STATUS\n         LTR   R0,R15                  TEST RETURN CODE\n         BZ    OK\n         L     R1,=V(AUT99I)\n         XC    0(4,R1),0(R1)           NULLIFY PF-2 USE\n         L     R1,4(R13)               R1 = AUT99 SAVE AREA\n         MVC   SVAR(18*4),0(R1)        SAVE IT AROUND AUT97 USE\n         XR    R1,R1\n         LM    R2,R3,NZST\n         L     R15,=V(AUT97)\n         BASR  R14,R15\n         L     R1,4(R13)               R1 = AUT99 SAVE AREA\n         MVC   0(18*4,R1),SVAR         RESTORE IT\n         LA    R15,4                   SET RC=4\n         B     LEAVE\nOK       LA    R2,STAR                 SET STATUS AREA ADDRESSABILITY\n         USING STADSECT,R2\n         MVC   EDSNM,STADSNM\n         MVC   EVLSR,STAVLSR\n         MVC   EDSOR,STADSOR\n         LH    R0,STARECL\n         BAS   R14,ENRTN\n         MVC   ERECL(L'ERECL),ZONE+L'ZONE-L'ERECL\n         L     R0,STANAUT\n         BAS   R14,ENRTN\n         MVC   ENAUT(L'ENAUT),ZONE+L'ZONE-L'ENAUT\n         L     R0,STAUAUT\n         BAS   R14,ENRTN\n         MVC   EUAUT(L'EUAUT),ZONE+L'ZONE-L'EUAUT\n         L     R0,STANPRG\n         BAS   R14,ENRTN\n         MVC   ENPRG(L'ENPRG),ZONE+L'ZONE-L'ENPRG\n         L     R0,STAUPRG\n         BAS   R14,ENRTN\n         MVC   EUPRG(L'EUPRG),ZONE+L'ZONE-L'EUPRG\n         L     R0,STANARG\n         BAS   R14,ENRTN\n         MVC   ENARG(L'ENARG),ZONE+L'ZONE-L'ENARG\n         L     R0,STAUARG\n         BAS   R14,ENRTN\n         MVC   EUARG(L'EUARG),ZONE+L'ZONE-L'EUARG\n         L     R0,STANATB\n         BAS   R14,ENRTN\n         MVC   ENATB(L'ENATB),ZONE+L'ZONE-L'ENATB\n         L     R0,STANMTB\n         BAS   R14,ENRTN\n         MVC   ENMTB(L'ENMTB),ZONE+L'ZONE-L'ENMTB\n         L     R0,STATOTL\n         BAS   R14,ENRTN\n         MVC   ETOTL(L'ETOTL),ZONE+L'ZONE-L'ETOTL\n         DROP  R2\n         L     R2,4(R13)               SET R0-R1 BACK\n         MVC   20(8,R2),PECRAN\nLEAVE   $XRET  CC=(R15)                RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        EDIT NUMBER ROUTINE (LINK = R14 - NUMBER = R0)              *\n*--------------------------------------------------------------------*\n         SPACE 1\nENRTN    CVD   R0,DSD\n         MVC   ZONE,=XL16'40202020202020202020202020202120'\n         ED    ZONE,DSD\n         BR    R14\n         SPACE 2\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nSVAR     DC    18F'0'\nRETCD    DC    F'0'\nPECRAN   DC    A(LECRAN,ECRAN)\nNZST     DC    0F'0',CL8'ZSTATE'\nZONE     DC    XL16'0'\nSTAR     DC    (STALGTH)X'0' STATUS AREA (SEE STADSECT)\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRAN D'OUTPUT                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='CURRENT ACCOUNTING DATA-SET STATUS',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='==================================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(6,1),SF=(PROT),TEXT='Data-set name :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nEDSNM   $FS    TEXT=(' ',44),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,1),SF=(PROT),TEXT='Volume serial :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nEVLSR   $FS    TEXT=(' ',6),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,30),SF=(PROT),TEXT='Organization :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nEDSOR   $FS    TEXT=(' ',2),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(8,55),SF=(PROT),TEXT='Record length :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nERECL   $FS    TEXT=(' ',5),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(12,1),SF=(PROT),TEXT='Capacities :',MF=L\n        $FS    SBA=(12,20),SF=(PROT,INT),MF=L\nENAUT   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='Aut. records -',MF=L\n        $FS    SF=(PROT,INT),MF=L\nEUAUT   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT=' in use',MF=L\n        $FS    SBA=(13,20),SF=(PROT,INT),MF=L\nENPRG   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='Prg. records -',MF=L\n        $FS    SF=(PROT,INT),MF=L\nEUPRG   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT=' in use',MF=L\n        $FS    SBA=(14,20),SF=(PROT,INT),MF=L\nENARG   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='Arg. records -',MF=L\n        $FS    SF=(PROT,INT),MF=L\nEUARG   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT=' in use',MF=L\n        $FS    SBA=(15,20),SF=(PROT,INT),MF=L\nENATB   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='Arg. Table records',MF=L\n        $FS    SBA=(16,20),SF=(PROT,INT),MF=L\nENMTB   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='map Table records',MF=L\n        $FS    SBA=(18,2),SF=(PROT),TEXT='T O T A L :',MF=L\n        $FS    SBA=(18,20),SF=(PROT,INT),MF=L\nETOTL   $FS    TEXT=(' ',7),MF=L\n        $FS    SF=(PROT),TEXT='records',MF=L\n        $FS    SBA=(24,1),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to escape',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT GEN\n        $AIRD  PRI=NO,STA=YES,R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT96": {"ttr": 6149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08/\\x00\\x90\\x08/\\tF\\x02.\\x02.\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-23T00:00:00", "modifydate": "1990-03-23T09:46:00", "lines": 558, "newlines": 558, "modlines": 0, "user": "SYSPAJA"}, "text": "AU96     TITLE '-- ROUTINE AUT96 - HARDCOPY SERVICE --'\nAUT96    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE DO THE HARDCOPY SERVICE.                    *\n*                                   (MOINIL P.A. - 03 NOVEMBER 1989) *\n**********************************************************************\n*        CALL AUT96,(PARM),VL                                        *\n*        FUNCTION : HARDCOPY SERVICE.                                *\n*        AT ENTRY : R1  = ADDRESS OF THE HARDCOPY REQUEST LIST.      *\n*                         FORMAT IS AS BELOW :                       *\n*                                  DC  AL1(HARDCOPY NUMBER)          *\n*                                  DC  AL4(...,...,...   ...)        *\n*                                          VARIABLE NO. OF ADDRESSES *\n*              OR : R1  = 0 (NO PARM) TO CLOSE AND FREE HARDCOPY.    *\n*         AT EXIT : R15 = 0 - NORMAL COMPLETION                      *\n*                         4 - ABNORMAL COMPLETION                    *\n*                             WITH R1 = POINTER TO MESSAGE TEXT AS   *\n*                                       NEEDED BY ROUTINE AUT97.     *\n*                             AND EVENTUALLY WITH R0 = POINTER TO A  *\n*                                       SECONDARY MESSAGE TEXT AS    *\n*                                       NEEDED BY ROUTINE AUT97 (R3) *\n*                                 OR NONE (R0 = ZERO).               *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n         SPACE 1\nFLACC    EQU   X'80'                   ACCOUNT D.S. CHANGED\n         SPACE 1\n        $XENT  BASE=R10\n         SPACE 1\n         LTR   R5,R1                   TEST AND RETAIN\n         BZ    CLSREQ                  CLOSE REQUEST\n         TM    SWITCH,FLST             HARDCOPY STARTED ?\n         BO    HCPYPR                  YES, STARTED\n         EJECT\n*------- ALLOCATE HARDCOPY FILE.\n         L     R1,=V(AUT98D)\n         MVC   HEAD1U(8),9(R1)\n         L     R2,=V(AUT98T)\n         TM    2(R2),FLACC             ACCOUNTING IS CHANGED ?\n         BZ    SETHCD                  NO\n         CLI   8(R1),C'A'              YES, MAY ACCEPT CHANGES\n         BE    SETDST\n         CLI   8(R1),C' '\n         BE    SETDST\n         MVC   P99SYSOC(L'P99SYSOC),8(R1)\nSETDST   CLC   0(8,R1),=CL8' '\n         BE    SETHCD\n         CLC   0(8,R1),=CL8'LOCAL'\n         BE    LOCDST\n         MVC   P99DEST(L'P99DEST),0(R1)  SET REQUESTED DEST=\n         B     SCNDST\nSETHCD   MVC   P99SYSOC(L'P99SYSOC),3(R2)\n         MVC   P99DEST(L'P99DEST),4(R2)\nSCNDST   LA    R0,L'P99DEST\n         LA    R1,P99DEST+L'P99DEST-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+6\n         BCTR  R1,0\n         BCT   R0,*-10\n         STCM  R0,B'0011',P99DESTL\n         B     ALLHC\nLOCDST   MVC   P99TUPL+8(4),P99TUPL+12 OVERRIDE DEST= PARM\nALLHC    LA    R1,P99RBPTR             PARM LIST FOR DYNALLOC\n        DYNALLOC\n         LTR   R15,R15                 CHECK COMPLETION ?\n         BNZ   ALLERR                  ERROR ALLOCATION\n         LA    R2,HCPYDCB              OUTPUT DCB ADDRESS\n         USING IHADCB,R2\n         MVC   DCBDDNAM,=CL8' '\n         ICM   R15,B'0011',P99DDNL\n         BCT   R15,*+L'*+6\n         MVC   DCBDDNAM(*-*),P99DDN\n         EX    R15,*-6                 SET DDNAME\n*------- OPEN HARDCOPY FILE.\n        OPEN   (HCPYDCB,OUTPUT)        OPEN HARDCOPY FILE\n         TM    DCBOFLGS,DCBOFOPN       OPEN COMPLETION ?\n         DROP  R2\n         BZ    OPENERR                 ERROR OPEN\n         OI    SWITCH,FLST             SET HARDCOPY STARTED\n         ZAP   HPAGE,=PL1'+0'          RESET PAGE NUMBER\n         ZAP   HLINE,=PL2'+99'         FORCE NEW PAGE\n         SPACE 1\n*------- PROCESS REQUEST TO HARDCOPY FILE.\nHCPYPR   TM    SWITCH,FLDS             ACCOUNT DS INFO DONE ?\n         BO    GOMSG                   YES\n         BAL   R9,CHKPG                CHECK PAGE / FORCE NEW PAGE\n         DC    PL2'+0'\n         MVC   HCLINE(30),=CL30'0Accounting data-set name is :'\n         L     R1,=V(AUT98A)\n         MVC   HCLINE+31(44),0(R1)     MOVE DSNAME\n         BAL   R9,PUTRTN\n         OI    SWITCH,FLDS             SET ACCOUNT DS INFO DONE\nGOMSG    ICM   R1,B'1111',AMSGT        ANY MESSAGE PENDING ?\n         BZ    GOSEL                   NO\n         BCTR  R1,0\n         XR    R2,R2\n         IC    R2,0(R1)\n         BCT   R2,*+L'*+6\n         MVC   HCLINE(*-*),1(R1)\n         EX    R2,*-6\n         XC    AMSGT,AMSGT             SAY MESSAGE PROCESSED\n         BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+56'\n         BAL   R9,PUTRTN               OUTPUT MESSAGE\nGOSEL    XR    R1,R1\n         IC    R1,0(R5)                GET HARDCOPY NUMBER\n         CLI   0(R5),MAXRQ\n         BH    INVSEL\n         SLL   R1,2\n         B     SELRQ(R1)               GO TO PROCESS\nSELRQ    B     STMSG                    0\n         B     AUTCR                    1\n         B     PRGCR                    2\n         B     AUTUP                    3\n         B     PRGUP                    4\n         B     AUTDL                    5\n         B     PRGDL                    6\nMAXRQ    EQU   ((*-SELRQ)-L'SELRQ)/L'SELRQ\nINVSEL   BAL   R9,DECODE\n         MVC   MINVSLN(L'MINVSLN),WCL6+L'WCL6-L'MINVSLN\n         LA    R1,MINVSL\n         B     EXERR\n*------- 0 = SET MESSAGE TEXT.\nSTMSG    ICM   R1,B'1111',1(R5)\n         ST    R1,AMSGT\n         B     EXOK                    EXIT\n*------- 1 = CREATE AUTHORIZATION.\nAUTCR    BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+48'\n         MVC   HCLINE(23),=CL23'0CREATE Authorization :'\n         ICM   R2,B'1111',1(R5)\n         LH    R1,0(R2)\n         BAL   R9,DECODE\n         MVC   HCLINE+24(4),WCL6+L'WCL6-4\n         BAL   R9,SETTME\n         BAL   R9,PUTRTN\n         ICM   R2,B'1111',5(R5)\n         BAL   R8,AUTRR\n         B     EXOK                    EXIT\n*------- 2 = CREATE PROGRAMMER.\nPRGCR    BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+52'\n         MVC   HCLINE(20),=CL20'0CREATE Programmer :'\n         ICM   R2,B'1111',1(R5)\n         LH    R1,0(R2)\n         BAL   R9,DECODE\n         MVC   HCLINE+21(4),WCL6+L'WCL6-4\n         BAL   R9,SETTME\n         BAL   R9,PUTRTN\n         ICM   R2,B'1111',5(R5)\n         BAL   R8,PRGRR\n         B     EXOK                    EXIT\n*------- 3 = UPDATE AUTHORIZATION.\nAUTUP    BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+47'\n         MVC   HCLINE(23),=CL23'0UPDATE Authorization :'\n         ICM   R2,B'1111',1(R5)\n         LH    R1,0(R2)\n         BAL   R9,DECODE\n         MVC   HCLINE+24(4),WCL6+L'WCL6-4\n         BAL   R9,SETTME\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(14),=CL14'*** BEFORE ***'\n         ICM   R2,B'1111',5(R5)\n         BAL   R8,AUTRR\n         BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+49'\n         MVC   HCLINE+6(14),=CL14'*** AFTER ***'\n         ICM   R2,B'1111',9(R5)\n         BAL   R8,AUTRR\n         B     EXOK                    EXIT\n*------- 4 = UPDATE PROGRAMMER.\nPRGUP    BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+51'\n         MVC   HCLINE(20),=CL20'0UPDATE Programmer :'\n         ICM   R2,B'1111',1(R5)\n         LH    R1,0(R2)\n         BAL   R9,DECODE\n         MVC   HCLINE+21(4),WCL6+L'WCL6-4\n         BAL   R9,SETTME\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(14),=CL14'*** BEFORE ***'\n         ICM   R2,B'1111',5(R5)\n         BAL   R8,PRGRR\n         BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+53'\n         MVC   HCLINE+6(14),=CL14'*** AFTER ***'\n         ICM   R2,B'1111',9(R5)\n         BAL   R8,PRGRR\n         B     EXOK                    EXIT\n*------- 5 = DELETE AUTHORIZATION.\nAUTDL    BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+48'\n         MVC   HCLINE(23),=CL23'0DELETE Authorization :'\n         ICM   R2,B'1111',1(R5)\n         LH    R1,0(R2)\n         BAL   R9,DECODE\n         MVC   HCLINE+24(4),WCL6+L'WCL6-4\n         BAL   R9,SETTME\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(14),=CL14'*** BEFORE ***'\n         ICM   R2,B'1111',5(R5)\n         BAL   R8,AUTRR\n         B     EXOK                    EXIT\n*------- 6 = DELETE PROGRAMMER.\nPRGDL    BAL   R9,CHKPG                CHECK PAGE\n         DC    PL2'+51'\n         MVC   HCLINE(20),=CL20'0DELETE Programmer :'\n         ICM   R2,B'1111',1(R5)\n         LH    R1,0(R2)\n         BAL   R9,DECODE\n         MVC   HCLINE+21(4),WCL6+L'WCL6-4\n         BAL   R9,SETTME\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(14),=CL14'*** BEFORE ***'\n         ICM   R2,B'1111',5(R5)\n         BAL   R8,PRGRR\n         B     EXOK                    EXIT\n*------- LOG AN AUT. RECORD ROUTINE (LINK = R8)\n         USING AUTDSECT,R2\nAUTRR    MVI   HCLINE,C'0'\n         CLC   HCLINE+6(8),=CL8' '\n         BE    *+L'*+4\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(9),=CL9'Aut.No. ='\n         LH    R1,AUTANO\n         BAL   R9,DECODE\n         MVC   HCLINE+16(1),WCL6\n         MVC   HCLINE+17(4),WCL6+L'WCL6-4\n         MVC   HCLINE+25(17),=CL17'Fiche Programme :'\n         MVC   HCLINE+43(L'AUTACNO),AUTACNO\n         MVC   HCLINE+60(6),=CL6'Prio ='\n         MVC   HCLINE+67(L'AUTPI),AUTPI\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(15),=CL15'Date de d!but :'\n         XR    R1,R1\n         ICM   R1,B'0111',AUTVSD\n         BAL   R9,SETDTE\n         MVC   HCLINE+22(10),WCL10\n         MVC   HCLINE+34(13),=CL13'Date de fin :'\n         XR    R1,R1\n         ICM   R1,B'0111',AUTVED\n         BAL   R9,SETDTE\n         MVC   HCLINE+48(10),WCL10\n         MVC   HCLINE+60(14),=CL14'Resp. Progr. :'\n         LH    R1,AUTPMNO\n         BAL   R9,DECODE\n         MVC   HCLINE+75(1),WCL6\n         MVC   HCLINE+76(4),WCL6+L'WCL6-4\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(13),=CL13'Progr''s No. :'\n         LA    R3,AUTPNO\n         LA    R4,AUTNPNF\nAUTRR1   LA    R6,HCLINE+25\n         LA    R7,5\nAUTRR2   LH    R1,0(R3)\n         BAL   R9,DECODE\n         MVC   0(1,R6),WCL6\n         MVC   1(4,R6),WCL6+L'WCL6-4\n         LA    R3,L'AUTPNO(R3)\n         BCT   R4,*+L'*+4\n         B     AUTRR3\n         LA    R6,10(R6)\n         BCT   R7,AUTRR2\n         BAL   R9,PUTRTN\n         B     AUTRR1\nAUTRR3   CLC   HCLINE+25(5),=CL8' '\n         BER   R8\n         BAL   R9,PUTRTN\n         BR    R8\n         DROP  R2\n*------- LOG AN PRG. RECORD ROUTINE (LINK = R8)\n         USING PRGDSECT,R2\nPRGRR    MVI   HCLINE,C'0'\n         CLC   HCLINE+6(8),=CL8' '\n         BE    *+L'*+4\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(9),=CL9'Prg.No. ='\n         LH    R1,PRGPNO\n         BAL   R9,DECODE\n         MVC   HCLINE+16(1),WCL6\n         MVC   HCLINE+17(4),WCL6+L'WCL6-4\n         MVC   HCLINE+25(11),=CL11'Matricule :'\n         MVC   HCLINE+37(L'PRGMNO),PRGMNO\n         MVC   HCLINE+50(5),=CL5'Box ='\n         MVC   HCLINE+56(L'PRGBXNO),PRGBXNO\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(17),=CL17'Programmer Name :'\n         MVC   HCLINE+24(L'PRGPNME),PRGPNME\n         BAL   R9,PUTRTN\n         MVC   HCLINE+6(10),=CL10'Building :'\n         MVC   HCLINE+17(L'PRGBDNO),PRGBDNO\n         MVC   HCLINE+30(11),=CL11'Phone No. :'\n         MVC   HCLINE+42(L'PRGPHNO),PRGPHNO\n         MVC   HCLINE+60(9),=CL9'Service :'\n         MVC   HCLINE+70(L'PRGSVNO),PRGSVNO\n         BAL   R9,PUTRTN\n         BR    R8\n         DROP  R2\n*------- CHECK PAGE HEADING ROUTINE (LINK = R9)\nCHKPG    CP    HLINE,0(2,R9)           EJECT NEEDED ?\n         BNH   2(R9)                   NO\n         ZAP   HLINE,=PL1'+0'          YES, RESET LINES/PAGE COUNT\n         AP    HPAGE,=PL1'+1'          BUMP PAGE COUNT\n         MVC   HEAD1P,=XL6'402020202120'\n         ED    HEAD1P,HPAGE\n        PUT    HCPYDCB,HEAD1           PUT OUT TITLE LINE\n         TM    SWITCH,FLPE             PUT ERROR ?\n         BO    CLSREQ                  YES\n        PUT    HCPYDCB,HEAD2           PUT OUT UNDERLINE\n         TM    SWITCH,FLPE             PUT ERROR ?\n         BO    CLSREQ                  YES\n         B     2(R9)                   NO\n*------- SET CURRENT TIME ROUTINE (LINK = R9)\nSETTME   MVC   HCLINE+35(6),=CL6'Date :'\n         MVC   HCLINE+65(6),=CL6'Time :'\n        $GFDATE HCLINE+42,WCL6\n         LTR   R15,R15\n         BNZ   SETTMEM\n         MVC   HCLINE+72(2),WCL6       HHMMSS RECEIVED\n         MVI   HCLINE+74,C'.'\n         MVC   HCLINE+75(2),WCL6+2\n         MVI   HCLINE+77,C'.'\n         MVC   HCLINE+78(2),WCL6+4\n         BR    R9\nSETTMEM  MVC   HCLINE+72(4),=CL4'RC ='\n         CVD   R15,DSD\n         MVC   WCL6,=XL6'402120202020'\n         ED    WCL6,DSD+5\n         MVC   HCLINE+77(2),WCL6+L'WCL6-2\n         BR    R9\n*------- DECODE NUMBER ROUTINE (LINK = R9)\nDECODE   LTR   R0,R1\n         BZ    DECODEM\n         BNM   *+L'*+2\n         LPR   R0,R0\n         CVD   R0,DSD\n         MVC   WCL6,=XL6'402120202020'\n         ED    WCL6,DSD+5\n         MVI   WCL6,C'+'\n         LTR   R1,R1\n         BNMR  R9\n         MVI   WCL6,C'-'\n         BR    R9\nDECODEM  MVC   WCL6,=CL6'  None'\n         BR    R9\n*------- EDIT DATE ROUTINE (LINK = R9)\nSETDTE   CL    R1,=F'99999'            WHICH FORMAT?\n         BH    *+L'*+4                 NEW FORMAT\n         AL    R1,=F'1900000'          OLD FORMAT, ADJUST IT\n         CVD   R1,DSD\n         UNPK  WCL7,DSD+4(4)\n         OI    WCL7+L'WCL7-1,C'0'\n        $GFDATE ,,WCL8,WCL7\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   SETDTEM\n         MVC   WCL10(2),WCL8+2         DAY\n         MVI   WCL10+2,C'/'\n         MVC   WCL10+3(2),WCL8         MONTH\n         MVI   WCL10+5,C'/'\n         MVC   WCL10+6(4),WCL8+4       YEAR\n         BR    R9\nSETDTEM  CVD   R15,DSD\n         MVC   WCL10(L'WCL7),WCL7      YYYYDDD\n         UNPK  WCL6(5),DSD+5(3)\n         OI    WCL6+4,C'0'\n         MVI   WCL10+L'WCL7,C'-'\n         MVC   WCL10+L'WCL7+1(2),WCL6+3     RC\n         BR    R9\n*------- HARDCOPY PUT ROUTINE (LINK = R9)\nPUTRTN  PUT    HCPYDCB,HCLINE          PUT OUT LINE\n         TM    SWITCH,FLPE             PUT ERROR ?\n         BO    CLSREQ                  YES\n         AP    HLINE,=PL1'+1'          NO, UPDATE LINES/PAGE COUNT\n         CLI   HCLINE,C'0'             WAS DOUBLE SPACE ?\n         BNE   *+L'*+6                 NO\n         AP    HLINE,=PL1'+1'          YES, UPDATE LINES/PAGE COUNT\n         MVI   HCLINE,C' '             RESET LINE\n         MVC   HCLINE+1(L'HCLINE-1),HCLINE\n         BR    R9\n         SPACE 1\n*------- CLOSE HARDCOPY FILE.\nCLSREQ   TM    SWITCH,FLST             IS HARDCOPY STARTED ?\n         BZ    EXOK                    NO, NONE TO DO\n        CLOSE  (HCPYDCB)               YES, CLOSE THE FILE\n        FREEPOOL HCPYDCB               FREE THE BUFFERS TOO\n         TM    SWITCH,FLPE             CLOSE DUE TO PUT ERROR ?\n         BO    PUTERRX                 YES\n         MVI   SWITCH,0                RESET HARDCOPY FLAGS\nEXOK     XR    R15,R15                 SET NORMAL RETURN CODE\nLEAVE   $XRET  CC=(R15)                RETURN\n*------- FORMULATE TEXT FOR SVC99 ALLOCATE FAILURE.\nALLERR   CLC   P99ERROR,=XL2'046C'     WAS IT 'RMT NOT DEF TO JES2' ?\n         BE    BADRMT                  YES\n         CVD   R15,DSD                 NO, CONVERT SVC 99 RC\n         MVC   MALLRCC,=XL4'40202120'\n         ED    MALLRCC,DSD+6\n         UNPK  MALLERC(L'MALLERC+1),P99ERROR(L'P99ERROR+1)\n         TR    MALLERC(L'MALLERC),HEXTAB\n         MVI   MALLERC+L'MALLERC,C' '\n         UNPK  MALLINC(L'MALLINC+1),P99INFO(L'P99INFO+1)\n         TR    MALLINC(L'MALLINC),HEXTAB\n         MVI   MALLINC+L'MALLINC,C' '\n         LA    R1,MALLERR\n         B     EXERR\nBADRMT   MVC   MBDRMTN,P99DEST         REMOTE NAME\n         LA    R1,MBDRMT\n         B     EXERR\n*------- SET DIAGNOSE MESSAGE(S).\nOPENERR  LA    R1,MOPERR\nEXERR    XR    R0,R0                   SAY NO 2ND MESSAGE\n         L     R15,4(R13)\n         STM   R0,R1,20(R15)\n         LA    R15,4                   SET ERROR RETURN CODE\n         B     LEAVE\nPUTERRX  LA    R1,MPUTRR\n         XR    R0,R0\n         CLC   MPUTERR+1(8),=CL8' '\n         BE    EXERR+L'EXERR\n         LA    R0,MPUTERR\n         B     EXERR+L'EXERR\n         DROP  R10\n         EJECT\n*------- HARDCOPY WRITE (PUT) ERROR ROUTINE.\n        CNOP   0,8\n         USING *,R15\nPUTERR   ST    R10,SVREG\n         LR    R10,R15\n         DROP  R15\n         USING PUTERR,R10\n        SYNADAF ACSMETH=BSAM\n         CLI   69(R1),C'*'             TEST UNSIGNIFICANT MSG\n         BE    PUTERR3                 YES\n         CLI   8(R1),C' '              TEST IF BINARY INFORMATION\n         BE    PUTERR1                 NO\n         UNPK  56(7,R1),9(4,R1)\n         TR    56(6,R1),HEXTAB\n         MVI   62(R1),C' '\n         UNPK  63(5,R1),12(3,R1)\n         TR    63(4,R1),HEXTAB\n         MVI   67(R1),C' '\n         B     PUTERR2\nPUTERR1  MVC   56(12,R1),8(R1)         MOVE BLANKS\nPUTERR2  MVC   MPUTERR+1(L'MPUTERR-1),56(R1)  MOVE MESSAGE\nPUTERR3  OI    SWITCH,FLPE             SAY PUT ERROR\n        SYNADRLS\n         L     R10,SVREG\n         BR    R14                     RETURN\n         DROP  R10\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION PARAMETER LIST.                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nP99RBPTR DC    A(P99RB+X'80000000')    SVC 99 REQUEST BLOCK PTR\nP99RB    DS    0F                      SVC 99 REQUEST BLOCK\n         DC    AL1(P99RBLN)                 RB LENGTH IN BYTES\n         DC    AL1(S99VRBAL)                VERB CODE (DSNAME ALL.)\n         DC    AL1(S99NOCNV+S99NOMNT,0)     FLAGS 1\nP99ERROR DC    XL2'0'                       ERROR CODE\nP99INFO  DC    XL2'0'                       INFO CODE\n         DC    A(P99TUPL)                   POINTER TO TEXT UNIT PTRS\n         DC    XL4'0'                       RESERVED\n         DC    XL4'0'                       FLAGS 2\nP99RBLN  EQU   *-P99RB                      RB LENGTH\nP99TUPL  DS    0F                      TEXT UNIT POINTERS\n         DC    A(P99TUKY1)                  SYSOUT\n         DC    A(P99TUKY2)                  FREE AT CLOSE\n         DC    A(P99TUKY3)                  DEST=\n         DC    A(P99TUKY4+X'80000000')      DDNAME RETURN\n         SPACE 1\nP99TUKY1 DC    AL2(DALSYSOU),AL2(1),AL2(1)  SYSOUT=\nP99SYSOC DC    CL1' '                       CLASS\nP99TUKY2 DC    AL2(DALCLOSE),AL2(0)         UNALLOC AT CLOSE\nP99TUKY3 DC    AL2(DALSUSER),AL2(1)         DEST=\nP99DESTL DC    AL2(*-*)                     LENGTH OF DESTINATION\nP99DEST  DC    CL8' '                       DESTINATION\nP99TUKY4 DC    AL2(DALRTDDN),AL2(1)         DDNAME RETURN\nP99DDNL  DC    AL2(8)                       LENGTH OF DDNAME\nP99DDN   DC    CL8' '                       DDNAME\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSD      DC    D'0'\nSVREG    DC    F'0'\nAMSGT    DC    F'0'\nWCL10    DC    CL10' '\nWCL8     DC    CL8' '\nWCL7     DC    CL7' '\nWCL6     DC    CL6' '\nHPAGE    DC    PL3'+0'                 HARDCOPY PAGE NUMBER\nHLINE    DC    PL2'+0'                 HARDCOPY LINES/PAGE NUMBER\nSWITCH   DC    XL1'0'                  HARDCOPY PROCESSING SWITCHES\nFLST     EQU   X'80'                   HARDCOPY STARTED\nFLPE     EQU   X'40'                   HARDCOPY PUT ERROR\nFLDS     EQU   X'20'                   HARDCOPY ACCOUNT DS INFO DONE\n         SPACE 1\nHEAD1    DC    CL39'1Authorizations / Programmers Hardcopy '\n         DC    CL20'- Current USER is : '\nHEAD1U   DC    CL8' ',CL7' - Page'\nHEAD1P   DC    CL6' ',CL1'.'\nHEAD1LN  EQU   (*-HEAD1)-81            MUST BE ZERO\nHEAD2    DC    CL1' ',80C'-'\nHCLINE   DC    CL81' '\n         SPACE 1\nHEXTAB   EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TABLE TRANSLATION\n         EJECT\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS.                                         *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DC    AL1(MALLNG)\nMALLERR  DC    C' Hardcopy All. Err. : DARC='\nMALLERC  DC    CL4' ',C' INFO='\nMALLINC  DC    CL4' ',C' and R15 ='\nMALLRCC  DC    CL4' ',C' - AUT96'\nMALLNG   EQU   *-MALLERR\n         DC    AL1(MBDRMTL)\nMBDRMT   DC    C' Hardcopy Err. : Remote '\nMBDRMTN  DC    CL8' ',C' undefined to JES2 - AUT96'\nMBDRMTL  EQU   *-MBDRMT\n         DC    AL1(L'MOPERR)\nMOPERR   DC    C' Hardcopy OPEN has failed - AUT96'\n         DC    AL1(MINVSLL)\nMINVSL   DC    C' Hardcopy invalid selection number : '\nMINVSLN  DC    CL3' ',C' - AUT96'\nMINVSLL  EQU   *-MINVSL\n         DC    AL1(L'MPUTRR)\nMPUTRR   DC    C' Hardcopy PUT error detected - AUT96'\n         DC    AL1(L'MPUTERR)\nMPUTERR  DC    CL73' '\n         SPACE 1\nHCPYDCB DCB    DDNAME=XXXXXXXX,DSORG=PS,DEVD=DA,BFALN=D,MACRF=PM,      1\n               SYNAD=PUTERR,RECFM=FA,LRECL=81,BLKSIZE=81\n         SPACE 1\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n        DCBD   DSORG=PS,DEVD=DA\n        IEFZB4D0\n        IEFZB4D2\n         PRINT GEN\n        $AIRD  SEC=YES,R=NO\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT97": {"ttr": 6404, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x00\\x9f\\x00\\x90\\x00\\x9f\\x148\\x00\\x89\\x00\\x89\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-09T00:00:00", "modifydate": "1990-01-09T14:38:00", "lines": 137, "newlines": 137, "modlines": 0, "user": "SYSPAJA"}, "text": "AU97     TITLE '-- ROUTINE AUT97 - SEVERE ERROR SERVICE --'\nAUT97    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE DISPLAY SEVERE ERROR DIAGNOSTIC             *\n*        AND EXIT FULLSCREEN MODE.                                   *\n*                                  (MOINIL P.A. - 21 SEPTEMBER 1989) *\n**********************************************************************\n*        CALL AUT97,(PARM),VL                                        *\n*        FUNCTION : DISPLAY SEVERE ERROR DIAGNOSTIC AND EXIT         *\n*                   FULLSCREEN MODE.                                 *\n*        AT ENTRY : R1  = ADDRESS OF THE DIAGNOSTIC MESSAGE TEXT.    *\n*                         IT POINTS AS BELOW :                       *\n*                                    DC  AL1(L'TEXT)                 *\n*                         ---> TEXT  DC  C'...MESSAGE...'            *\n*                         NOTE : FIRST CHARACTER OF MESSAGE IS THE   *\n*                                ASA CONTROL CHARACTER FOR PRINT.    *\n*              OR : R1  = 0 AND THEN R0 IS THE ERROR NUMBER TO       *\n*                         PASS AT 'ZYDIAG' ROUTINE TO RETRIEVE THE   *\n*                         DIAGNOSTIC MESSAGE.                        *\n*                 R2-R3 = NAME OF THE ROUTINE CAUSE OF THE ERROR     *\n*                      OR R2 = ZERO AND R3 = ADDRESS OF A SECONDARY  *\n*                         MESSAGE TEXT, WHICH POINTS AS BELOW :      *\n*                                    DC  AL1(L'TEXT)                 *\n*                         ---> TEXT  DC  C'...MESSAGE...'            *\n*                         NOTE : FIRST CHARACTER OF MESSAGE IS THE   *\n*                                ASA CONTROL CHARACTER FOR PRINT.    *\n*                      OR NONE (R2 AND R3 = ZERO)                    *\n*         AT EXIT : R15 = 0 - ALWAYS                                 *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R10\n         SPACE 1\n         LTR   R15,R1\n         BNZ   SETDIAG                 PARM = ADDRESS DIAGNOSTIC\n        CALL   ZYDIAG                  R0 = ERROR NUMBER\nSETDIAG  LR    R4,R15                  HANDLE DIAGNOSTIC\n         XR    R5,R5\n         BCTR  R15,0\n         IC    R5,0(R15)\n         BCTR  R5,0\n         BCT   R5,*+L'*+6\n         MVC   ECRANM(*-*),1(R4)\n         EX    R5,*-6\n         LTR   R2,R2\n         BZ    NONAME\n         MVC   CTXT,=CL21'Calling routine was :'\n         STCM  R2,B'1111',RTNNME       SET NAME OF ROUTINE\n         STCM  R3,B'1111',RTNNME+4\n         B     BYPASS\nNONAME   LTR   R3,R3\n         BZ    BYPASS\n         LR    R4,R3                   HANDLE 2ND DIAGNOSTIC\n         XR    R5,R5\n         BCTR  R3,0\n         IC    R5,0(R3)\n         BCTR  R5,0\n         BCT   R5,*+L'*+6\n         MVC   ECRANS(*-*),1(R4)\n         EX    R5,*-6\nBYPASS   L     R4,4(R13)               PREVIOUS SAVE AREA\n         SL    R4,=F'32'               POINT TO START OF MODULE\n         MVC   MODNME(L'MODNME),10(R4) SET NAME OF MODULE\n         MVC   ASSDTE(L'ASSDTE),18(R4) SET DATE-TIME OF MODULE\n         LA    R1,PECRAN               DISPLAY DIAGNOSTIC\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         XR    R1,R1                   EXIT FULLSCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         XR    R15,R15\n        $XRET  CC=(R15)                RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nPECRAN   DC    A(LECRAN,ECRAN)\n         SPACE 1\n*--------------------------------------------------------------------*\n*        ECRAN D'OUTPUT                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,20),SF=(PROT,INT),MF=L\n        $FS    TEXT='*************************************',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,20),SF=(PROT,INT),MF=L\n        $FS    TEXT='*    S E V E R E       E R R O R    *',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(3,20),SF=(PROT,INT),MF=L\n        $FS    TEXT='*************************************',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(7,1),SF=(PROT,INT),RA=(7,80,-),MF=L\n        $FS    SBA=(8,1),SF=(PROT),TEXT='Diagnose error :',MF=L\n        $FS    SBA=(9,1),SF=(PROT,INT),MF=L\nECRANM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(10,1),SF=(PROT,INT),MF=L\nECRANS  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(11,1),SF=(PROT,INT),RA=(11,80,-),MF=L\n        $FS    SBA=(15,1),SF=(PROT),MF=L\n        $FS    TEXT='Error has been detected in module :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nMODNME  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(16,1),SF=(PROT),MF=L\n        $FS    TEXT='Module assembly date-time :',MF=L\n        $FS    SF=(PROT,INT),MF=L\nASSDTE  $FS    TEXT=(' ',14),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(18,1),SF=(PROT),MF=L\nCTXT    $FS    TEXT=(' ',21),MF=L\n        $FS    SF=(PROT,INT),MF=L\nRTNNME  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(22,1),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='to exit - No RECOVERY provided',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUT98": {"ttr": 6407, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x10\\x1f\\x00\\x90\\x10\\x1f\\x15A\\x01\\xff\\x01\\xff\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-11T00:00:00", "modifydate": "1990-04-11T15:41:00", "lines": 511, "newlines": 511, "modlines": 0, "user": "SYSPAJA"}, "text": "AU98     TITLE '-- ROUTINE AUT98 - CONTROL CALLER SERVICE --'\nAUT98    START 0\n         SPACE 1\n**********************************************************************\n*        THIS SUBROUTINE CONTROL USERID CALLER UNAUTHORIZED          *\n*        ACCESS TO THE CP.                                           *\n*        THEN ALLOWS SPECIAL USERS TO ALLOCATE THE ACCOUNTING        *\n*        AND TSO-UADS DATA-SETS, AND EVENTUALLY SET THE HARDCOPY     *\n*        DESTINATION.                                                *\n*                                  (MOINIL P.A. - 21 SEPTEMBER 1989) *\n**********************************************************************\n*        CALL AUT98,(PARM),VL                                        *\n*        FUNCTION : CONTROL USER ACCESS.                             *\n*                   NOTE - IF A LEVEL OF AUTHORITY IS REQUESTED BY   *\n*                          THE CALLING MODULE, SET IT BEFORE THE     *\n*                          CALL IN THE BYTE LOCATED AT 'AUT98T+1'.   *\n*        AT ENTRY : R1  = TSO COMMAND OR SUB-COMMAND ENTRY REGISTER  *\n*                   R0  = 0 MEANS NO HARDCOPY TO BE DONE             *\n*                         ANYTHING ELSE = REQUEST HARDCOPY           *\n*         AT EXIT : R15 = 0 - NORMAL COMPLETION                      *\n*                         4 - UNAUTHORIZED USERID OR ERROR DETECTED  *\n*                             (MESSAGE SENT)                         *\n*--------------------------------------------------------------------*\n         SPACE 1\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV15     EQU   15        PRIVILEGED LEVEL - WIZARD\nLV12     EQU   12        ADMINISTRATOR CONTROL LEVEL\nLV10     EQU   10        REDUCED SERVICES LEVEL\nLV5      EQU   5         DISPLAY SERVICES LEVEL\nLV0      EQU   0         REJECT LEVEL\n         SPACE 1\n        $MDL@IX\n         EJECT\n        $UJVT\n         EJECT\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R10\n         SPACE 1\n         LR    R2,R1                   RETAIN R1 ENTRY ADDRESS\n         LR    R5,R0                   RETAIN R0 VALUE\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CHECK USER AUTHORITY : SYSTEM, OPERATOR, ...                *\n*              THESE TESTS DON'T INCLUDE RACF PROTECTION ON          *\n*              DATA-SETS, WHICH IS CONTROLED AT OPEN TIME IF         *\n*              INSTALLED IN THE SYSTEM.                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n        EXTRACT ATIOT,'S',FIELDS=(TIOT,TSO,PSB)\n         L     R1,ATSO             CHECK FOR PRIVILEDGE\n         TM    0(R1),X'80'\n         BZ    NOTTSO              NOT TSO ADDRESS SPACE\n         L     R1,APSCB            PSCB ADDRESS\n         LTR   R1,R1\n         BZ    NOTTSO              WE ARE'NT IN TSO\n         USING CPPL,R2             SET CPPL ADDRESSABILITY\n         USING PSCB,R1\n         CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS?\n         BNE   *+L'*+10            NO\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS?\n         BE    OK                  YES, TSO COMMAND\n         LR    R1,R2\n         USING IKJEBECA,R1\n         L     R2,CAPTTMP          CPPL ADDRESS\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS?\n         BNE   NOTCMD              NO, NOT TSO SUB-COMMAND\n         DROP  R2\nOK      $EACM  REQAUT\n         CLI   AUT98T,LV0\n         BE    NOTAUT\n         CLC   AUT98T,CRQAUT       REQUESTED AUTHORITY LEVEL ?\n         BH    TTEST               IF HIGH, OK\n*------- UNAUTHORIZED USER FOR THIS COMMAND PROCESSOR.\nNOTAUT  TPUT   ERRORA,L'ERRORA         UNAUTHORIZED TO USE CP\nXBACK    LA    R15,4                   SET RC TO END OF CP\n         B     LEAVE\n*------- ONLY TSO COMMAND OR SUB-COMMAND PROCESSOR.\nNOTCMD  TPUT   ERRORB,L'ERRORB\n         B     XBACK\nNOTTSO  WTO    '*** ONLY \"TSO\" COMMAND PROCESSOR ALLOWED *** ',        1\n               ROUTCDE=11,DESC=7\n         B     XBACK\n*------- UJVTABLE (IEFUJV) NOT FOUND.\nUJVTERR TPUT   ERRORC,L'ERRORC\n         B     XBACK\nTTEST    L     R4,APSCB                ADDRESS OF PSCB\n         USING PSCB,R4\n         MVC   USNME(L'PSCBUSER),PSCBUSER\n         CLI   AUT98T,LV10             REDUCED SERVICES ?\n         BNH   NOSNAP+L'NOSNAP         YES\n         CLI   AUT98T,LV12             WIZARD LEVEL ?\n         BNH   NOSNAP                  NO\n*------- ACTIVE INPUT BUFFER SNAP IF 'SYSSNAP' DD PRESENT.\n         XR    R1,R1\n         L     R2,ATIOT\n         USING TIODSECT,R2\nSEARCH   CLC   TIOELNGH(4),=F'0'\n         BE    NOSNAP\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8'SYSSNAP'\n         BE    *+L'*+10\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     SEARCH\n         DROP  R2\n         L     R1,=V(AUT99S)\n         MVI   0(R1),X'FF'             OPEN SNAP WAY\n*------- ALLOW ALTERNATE DATA-SETS NAMES FOR TEST.\nNOSNAP   NI    SWRDS+1,X'0F'\n         L     R15,=V(SUJVTA)\n         BASR  R14,R15\n         LTR   R15,R15\n         BZ    GETNME\n         TM    SWRDS+1,X'F0'\n         BO    UJVTERR\n         MVC   ECRACC(L'ERRORC),ERRORC\n         MVC   ECRANM(L'ERROR8),ERROR8\n         B     FILLSC\n         USING UVTDSECT,R1\nGETNME   L     R2,ACCNME\n         DROP  R1\n         MVC   AUT98A(L'AUT98A),0(R2)   GET ACC. DATA-SET DEFAULT NAME\n         L     R15,=V(DUJVTA)\n         BASR  R14,R15\nSWRDS    B     QUIT\n         MVC   ECRACC,AUT98A\nFILLSC   MVC   ECRTSO,AUT98U\n         MVC   ACCNPR(L'PSCBUSER),PSCBUSER\n         MVC   UADSPR(L'PSCBUSER),PSCBUSER\n         LTR   R5,R5\n         BNZ   DSPSDF\n         MVC   PECRAN,=A(LECRAS)\n         B     DSPLAY\nDSPSDF   MVC   DFDEST,HCDFDN\n         MVC   DFCLSS,HCDFCL\nDSPLAY   LTR   R5,R5\n         BNZ   *+L'*+6\n         MVC   ECRANS(LECRAT),ECRANT\n         LA    R1,PECRAN               DISPLAY SCREEN\n         L     R15,=V(AUT99)\n         BALR  R14,R15\n         LTR   R15,R15                 NORMAL COMPLETION ?\n         BNZ   LEAVE                   NO, END CP (ONLY 4)\n         MVI   ECRANM,C' '\n         MVC   ECRANM+1(L'ECRANM-1),ECRANM\nNXTFLD   L     R15,=V(AUT99R)          ASK REPLY TEXT\n         BALR  R14,R15\n         LTR   R15,R15                 NONE OR END?\n         BZ    SWPRC                   YES\n         NI    SWPRC+1,X'0F'           NO, SOMETHING ENTERED\n         CLC   0(L'ASBAPR,R15),ASBAPR\n         BNE   *+L'*+8\n         LA    R2,ACCNPR\n         B     SETFLD\n         CLC   0(L'ASBAGR,R15),ASBAGR\n         BNE   *+L'*+8\n         LA    R2,ACCNGR\n         B     SETFLD\n         CLC   0(L'ASBATY,R15),ASBATY\n         BNE   *+L'*+8\n         LA    R2,ACCNTY\n         B     SETFLD\n         CLC   0(L'USBAPR,R15),USBAPR\n         BNE   *+L'*+8\n         LA    R2,UADSPR\n         B     SETFLD\n         CLC   0(L'USBAGR,R15),USBAGR\n         BNE   *+L'*+8\n         LA    R2,UADSGR\n         B     SETFLD\n         CLC   0(L'USBATY,R15),USBATY\n         BNE   *+L'*+8\n         LA    R2,UADSTY\n         B     SETFLD\n         CLC   0(L'DSBADS,R15),DSBADS\n         BNE   *+L'*+8\n         LA    R2,DESTNM\n         B     SETFLD\n         CLC   0(L'DSBASY,R15),DSBASY\n         BE    SETCLSS\n         MVC   ECRANM(L'ERROR1),ERROR1\n         B     DSPLAY\nSETCLSS  MVI   DESTSY,C' '\n         LTR   R1,R1\n         BZ    NXTFLD                  NONE, FIELD HAS BEEN ERASED\n         OC    DESTSY(1),3(R15)\n         CLI   DESTSY,C' '\n         BE    NXTFLD\n         CLI   DESTSY,C'A'\n         BL    ERRCLSS\n         CLI   DESTSY,C'I'\n         BNH   NXTFLD\n         CLI   DESTSY,C'J'\n         BL    ERRCLSS\n         CLI   DESTSY,C'R'\n         BNH   NXTFLD\n         CLI   DESTSY,C'S'\n         BL    ERRCLSS\n         CLI   DESTSY,C'Z'\n         BNH   NXTFLD\n         CLI   DESTSY,C'0'\n         BL    ERRCLSS\n         CLI   DESTSY,C'9'\n         BNH   NXTFLD\nERRCLSS  MVC   ECRANM(L'ERROR7),ERROR7\n         B     DSPLAY\nSETFLD   MVC   0(8,R2),=CL8' '         CLEAR FIELD\n         LTR   R1,R1\n         BZ    NXTFLD                  NONE, FIELD HAS BEEN ERASED\n         LA    R0,8                    PROCESS FIELD\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    0(*-*,R2),3(R15)        TRANSLATE LOWER CASE IN UPPER\n         EX    R1,*-6\n         B     NXTFLD\nSWPRC    B     CHKDFA\n         CLI   ACCNPR,C' '\n         BNE   PRCSSA\n         CLI   ACCNGR,C' '\n         BNE   *+L'*+8\n         CLI   ACCNTY,C' '\n         BE    PRCSST\n         MVC   ECRANM(L'ERROR2),ERROR2\n         B     DSPLAY\nPRCSSA   CLI   ACCNGR,C' '\n         BNE   PRCSST\n         CLI   ACCNTY,C' '\n         BE    *+L'*+10\n         MVC   ECRANM(L'ERROR3),ERROR3\n         B     DSPLAY\n         CLC   ACCNPR(L'PSCBUSER),PSCBUSER\n         BNE   PRCSST\n         MVC   ACCNPR(L'ACCNPR),=CL8' '\nPRCSST   CLI   UADSPR,C' '\n         BNE   PRCSSU\n         CLI   UADSGR,C' '\n         BNE   *+L'*+8\n         CLI   UADSTY,C' '\n         BE    PRCSSX\n         MVC   ECRANM(L'ERROR4),ERROR4\n         B     DSPLAY\nPRCSSU   CLI   UADSGR,C' '\n         BNE   PRCSSX\n         CLI   UADSTY,C' '\n         BE    *+L'*+10\n         MVC   ECRANM(L'ERROR5),ERROR5\n         B     DSPLAY\n         CLC   UADSPR(L'PSCBUSER),PSCBUSER\n         BNE   PRCSSX\n         MVC   UADSPR(L'UADSPR),=CL8' '\nPRCSSX   CLC   DESTNM(L'DESTNM),=CL8' '\n         BE    PRCSSY\n         CLI   DESTNM,C'A'\n         BL    DSTERR\n         CLI   DESTNM,C'I'\n         BNH   PRCSSY\n         CLI   DESTNM,C'J'\n         BL    DSTERR\n         CLI   DESTNM,C'R'\n         BNH   PRCSSY\n         CLI   DESTNM,C'S'\n         BL    DSTERR\n         CLI   DESTNM,C'Z'\n         BNH   PRCSSY\nDSTERR   MVC   ECRANM(L'ERROR6),ERROR6\n         B     DSPLAY\n         DROP  R4\nPRCSSY   MVC   AUT98D,DESTNM\n         MVC   AUT98D+L'AUT98D(L'DESTSY),DESTSY\n         CLI   ACCNPR,C' '\n         BE    PRCSSZ\n         LA    R2,WCL44                BUILD NEW ACC. DS\n         MVI   0(R2),C' '\n         MVC   1(L'WCL44-1,R2),0(R2)\n         MVC   0(L'ACCNPR,R2),ACCNPR\n         CLI   ACCNGR,C' '\n         BE    MVACC\n         LA    R2,L'ACCNPR-1(R2)\n         CLI   0(R2),C' '\n         BNE   *+L'*+4\n         BCT   R2,*-8\n         MVI   1(R2),C'.'\n         MVC   2(L'ACCNGR,R2),ACCNGR\n         CLI   ACCNTY,C' '\n         BE    MVACC\n         LA    R2,L'ACCNGR+1(R2)\n         CLI   0(R2),C' '\n         BNE   *+L'*+4\n         BCT   R2,*-8\n         MVI   1(R2),C'.'\n         MVC   2(L'ACCNTY,R2),ACCNTY\nMVACC    CLC   AUT98A,WCL44\n         BE    PRCSSZ\n         MVC   AUT98A,WCL44\n         OI    DSSWST,FLACC\nPRCSSZ   CLI   UADSPR,C' '\n         BE    CHKDFA\n         LA    R2,WCL44                BUILD NEW TSO-UADS DS\n         MVI   0(R2),C' '\n         MVC   1(L'WCL44-1,R2),0(R2)\n         MVC   0(L'UADSPR,R2),UADSPR\n         CLI   UADSGR,C' '\n         BE    MVTSO\n         LA    R2,L'UADSPR-1(R2)\n         CLI   0(R2),C' '\n         BNE   *+L'*+4\n         BCT   R2,*-8\n         MVI   1(R2),C'.'\n         MVC   2(L'UADSGR,R2),UADSGR\n         CLI   UADSTY,C' '\n         BE    MVTSO\n         LA    R2,L'UADSGR+1(R2)\n         CLI   0(R2),C' '\n         BNE   *+L'*+4\n         BCT   R2,*-8\n         MVI   1(R2),C'.'\n         MVC   2(L'UADSTY,R2),UADSTY\nMVTSO    CLC   AUT98U,WCL44\n         BE    CHKDFA\n         MVC   AUT98U,WCL44\n         OI    DSSWST,FLTSO\nCHKDFA   CLI   AUT98A,C' '\n         BNE   QUIT\n         MVC   ECRANM(L'ERROR9),ERROR9\n         B     DSPLAY\nQUIT     XR    R15,R15\nLEAVE   $XRET  CC=(R15)                RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        ALTERNATE DATA-SETS NAMES                                   *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0F                      ALIGNMENT\n         ENTRY AUT98A\nAUT98A   DC    CL44' '                 ACC. DATA-SET DEFAULT NAME\n         ENTRY AUT98U\nAUT98U   DC    CL44'SYS1.UADS'         TSO-UADS DATA-SET DEFAULT NAME\n         SPACE 1\n*--------------------------------------------------------------------*\n*        HARDCOPY INFORMATION.                                       *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0F                      ALIGNMENT\n         ENTRY AUT98D\nAUT98D   DC    CL8' ',CL1' '           DESTINATION/CLASS\nUSNME    DC    CL8' '                  USER\n         SPACE 1\n*--------------------------------------------------------------------*\n*        USER-ID AUTHORITY LEVEL, FLAGS, HARDCOPY DEFAULTS.          *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0F                      ALIGNMENT\n         ENTRY AUT98T\nAUT98T   DC    XL1'0'                  AUTHORITY LEVEL (0-15)\nCRQAUT   DC    XL1'0'                  REQUEST AUTHORITY LEVEL (0-15)\nDSSWST   DC    XL1'0'                  DATA-SET(S) SWITCH STATUS\nFLACC    EQU   X'80'                   ACCOUNT D.S. CHANGED\nFLTSO    EQU   X'40'                   TSO-UADS D.S. CHANGED\nHCDFCL   DC    CL1'A'                  DEFAULT SYSOUT CLASS\nHCDFDN   DC    CL8'R41'                DEFAULT DESTINATION NAME\n         EJECT\n*--------------------------------------------------------------------*\n*        VARIABLES DE TRAVAIL                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nPECRAN   DC    A(LECRAN,ECRAN)\nATIOT    DC    A(*-*)\nATSO     DC    A(*-*)\nAPSCB    DC    A(*-*)\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUT98T)\nWCL44    DC    CL44' '\n         SPACE 1\n*--------------------------------------------------------------------*\n*        MESSAGES D'ERREURS                                          *\n*--------------------------------------------------------------------*\n         SPACE 1\nERRORA   DC    C'*** Unauthorized access to this command *** '\nERRORB   DC    C'*** Only TSO command or sub-command allowed *** '\nERRORC   DC    C'*** UJVTABLE (IEFUJV) not found *** '\nERROR1   DC    C'Input scan SBA order not found ???'\nERROR2   DC    C'Accounting data-set name - PROJECT missing |'\nERROR3   DC    C'Accounting data-set name - GROUP missing |'\nERROR4   DC    C'TSO-UADS data-set name - PROJECT missing |'\nERROR5   DC    C'TSO-UADS data-set name - GROUP missing |'\nERROR6   DC    C'Hardcopy destination name error |'\nERROR7   DC    C'Hardcopy Sysout class error |'\nERROR8   DC    C'Unable to get Acc. data-set default name, try using Pr1\n               oject/Group/Type'\nERROR9   DC    C'Define the Acc. data-set name using Project/Group/Type1\n                please, or exit'\n         EJECT\n*--------------------------------------------------------------------*\n*        ECRAN D'OUTPUT                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='TEST WITH ALTERNATE DATA-SETS',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,25),SF=(PROT,INT),MF=L\n        $FS    TEXT='=============================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,1),SF=(PROT,INT),TEXT='Accounting',MF=L\n        $FS    SF=(PROT),TEXT='data-set name :',MF=L\n        $FS    SBA=(5,10),SF=(PROT),TEXT='Project',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nASBAPR  $FS    SBA=(5,24),MF=L\nACCNPR  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(6,10),SF=(PROT),TEXT='Group  ',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nASBAGR  $FS    SBA=(6,24),MF=L\nACCNGR  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(7,10),SF=(PROT),TEXT='Type   ',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nASBATY  $FS    SBA=(7,24),MF=L\nACCNTY  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(9,3),SF=(PROT,INT),TEXT='TSO-UADS',MF=L\n        $FS    SF=(PROT),TEXT='data-set name :',MF=L\n        $FS    SBA=(10,10),SF=(PROT),TEXT='Project',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nUSBAPR  $FS    SBA=(10,24),MF=L\nUADSPR  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(11,10),SF=(PROT),TEXT='Group  ',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nUSBAGR  $FS    SBA=(11,24),MF=L\nUADSGR  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(12,10),SF=(PROT),TEXT='Type   ',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nUSBATY  $FS    SBA=(12,24),MF=L\nUADSTY  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(14,1),SF=(PROT,INT),TEXT='Change :',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    TEXT='type in any alternate data-sets names you ',MF=L\n        $FS    TEXT='want to use or just ENTER.',MF=L\n        $FS    SBA=(15,1),SF=(PROT),MF=L\n        $FS    TEXT='By default the data-sets names are :',MF=L\n        $FS    SBA=(16,10),SF=(PROT),TEXT='Accounting =',MF=L\n        $FS    SF=(PROT,INT),MF=L\nECRACC  $FS    TEXT=(' ',44),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(17,12),SF=(PROT),TEXT='TSO-UADS =',MF=L\n        $FS    SF=(PROT,INT),MF=L\nECRTSO  $FS    TEXT=(' ',44),MF=L\n        $FS    SF=(PROT),MF=L\nLECRAS   EQU   (*-ECRAN)+LECRAT\nECRANS  $FS    SBA=(19,1),SF=(PROT,INT),TEXT='Hardcopy :',MF=L\n        $FS    SF=(PROT),TEXT='Destination name',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nDSBADS  $FS    SBA=(19,35),MF=L\nDESTNM  $FS    TEXT=(' ',8),MF=L\n        $FS    SF=(PROT),TEXT='and Sysout class',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),MF=L\nDSBASY  $FS    SBA=(19,66),MF=L\nDESTSY  $FS    TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(20,23),SF=(PROT),TEXT='Default is ',MF=L\nDFDEST  $FS    TEXT=(' ',8),MF=L\n        $FS    SBA=(20,54),SF=(PROT),TEXT='Default is ',MF=L\nDFCLSS  $FS    TEXT=' ',MF=L\n        $FS    SBA=(21,1),SF=(PROT,INT),TEXT='Note :',MF=L\n        $FS    SF=(PROT),TEXT='any change to the Hardcopy is ',MF=L\n        $FS    TEXT='handled only if the Accounting data-set',MF=L\n        $FS    SBA=(22,8),SF=(PROT),MF=L\n        $FS    TEXT='is an alternate data-set.',MF=L\nECRANT  $FS    SBA=(23,1),SF=(PROT,INT),MF=L\nECRANM  $FS    TEXT=(' ',78),MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAT   EQU   *-ECRANT\nLECRAN   EQU   *-ECRAN\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL                                                *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS                                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n        IKJCPPL\n        IKJPSCB\n        IKJEBECA\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AUT99": {"ttr": 6661, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x00\\x9f\\x00\\x90\\x00\\x9f\\x148\\x01\\x97\\x01\\x97\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-09T00:00:00", "modifydate": "1990-01-09T14:38:00", "lines": 407, "newlines": 407, "modlines": 0, "user": "SYSPAJA"}, "text": "AU99     TITLE '-- ROUTINE AUT99 - FULLSCREEN SERVICE --'\nAUT99    START 0\n         SPACE 1\n**********************************************************************\n*        A ROUTINE TO ALLOW A MORE EASIER WAY OF FULLSCREEN          *\n*        DISPLAY MANAGEMENT.                                         *\n*                                  (MOINIL P.A. - 21 SEPTEMBER 1989) *\n**********************************************************************\n*     1. CALL AUT99                                                  *\n*        FUNCTION : ROUTINE TO WRITE SCREEN VIA TPUT,                *\n*                   AND TO GET REPLY VIA TGET.                       *\n*        AT ENTRY : R1  = PARM. ADDRESS                              *\n*                         PARM. --->   A(SCREEN IMAGE LENGTH)        *\n*                                      A(SCREEN IMAGE ADDRESS)       *\n*                   IF R1  = A(X'80000000'+PARM.ADDRESS) THEN THE    *\n*                              GET REPLY IS SKIPPED (ONLY TPUT DONE) *\n*              OR : R1 = 0 TO TERMINATE/EXIT FULLSCREEN MODE.        *\n*         AT EXIT : R15 =  0 - NORMAL COMPLETION (TEXT AT DISPOSAL)  *\n*                              (R1 = ADDRESS OF AID-BYTE FOLLOWED    *\n*                              BY THE 2-BYTES CURSOR ADDRESS)        *\n*                          4 - END REQUESTED                         *\n*                          8 - NOT SCREEN TERMINAL OR NOT SCREEN     *\n*                              SIZED 24 * 80 (MESSAGE SENT).         *\n*     2. CALL AUT99R                                                 *\n*        FUNCTION : ROUTINE TO PROCESS THE REPLY TEXT                *\n*                   OBTAINED VIA TGET.                               *\n*        AT ENTRY : NONE                                             *\n*         AT EXIT : R15 =  0 - COMPLETION OF REPLY TEXT (NO MORE)    *\n*              OR : R15 =  ADDRESS OF SBA (SET BUFFER ADDRESS ORDER, *\n*                          1-BYTE) FOLLOWED BY THE BUFFER ADDRESS    *\n*                          (2-BYTES), FOLLOWED BY THE TEXT READ      *\n*                          (R1 = LENGTH OF TEXT, 0 = NULL, NO TEXT)  *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R10\n         SPACE 1\n         NI    SWITCH,255-SKGET       INIT REQUEST\n         LTR   R2,R1                   TEST AND RETAIN PARM ADDRESS\n         BZ    QUIT                    BRANCH IF EXIT FULLSCREEN REQ.\n         BP    *+L'*+8\n         LA    R2,0(R2)\n         OI    SWITCH,SKGET            SAY NO REPLY REQUESTED\n         TM    SWITCH,SCRFT            WAS FIRST TIME ENTRY DONE?\n         BO    GODONE                  BRANCH IF YES\n         SPACE 1\n*------- CHECK CALLER TERMINAL.\n         SPACE 1\n        GTSIZE ,                       GET ORIGINAL SCREEN SIZE\n         LTR   R0,R0                   IS IT A SCREEN?\n         BZ    NOTSCR                  IF ZERO, NOT A SCREEN\n         CH    R0,=H'24'               STANDARD NUMBER OF LINES?\n         BL    NOTSTD                  BRANCH IF LESS\n         BE    TSTLNL                  BRANCH IF YES\n         CH    R1,=H'80'               STANDARD LINE LENGTH?\n         BL    NOTSTD                  BRANCH IF LESS\nSETSSZ   ST    R0,SZSCRN               SAVE SCREEN SIZE\n         ST    R1,SZLINE               SAVE LINE SIZE\n         OI    SWITCH,SCRST            INDICATE SCREEN SIZE TO BE SET\n         B     STRFS\nTSTLNL   CH    R1,=H'80'               STANDARD LINE LENGTH?\n         BL    NOTSTD                  BRANCH IF LESS\n         BH    SETSSZ                  BRANCH IF MORE\nSTRFS   STFSMODE ON,INITIAL=YES        TURN ON VTAM FULL SCREEN MODE\n         TM    SWITCH,SCRST            SCREEN SIZE TO BE SET?\n         BZ    NOCHNG                  BRANCH IF NOT\n        STSIZE SIZE=80,LINE=24         SET STANDARD SCREEN SIZE\n         OI    SWITCH,SCRRS            INDICATE SCREEN SIZE TO BE RESET\nNOCHNG   OI    SWITCH,SCRFT            SET FIRST TIME ENTRY DONE\n         SPACE 1\n*------- EXECUTE FULLSCREEN PROCESSING.\n         SPACE 1\nGODONE   LM    R0,R1,0(R2)             GET IMAGE INFO'S\n         TM    SWITCH,SCRST+SCRRS      FIRST TPUT DONE?\n         BNO   SNDWR                   BRANCH IF YES\n        $FS    CC=EW,MF=(I,(R1))       SET ERASE/WRITE\nSNDWR    ICM   R1,B'1000',TPUTFLG      INDICATE FULL SCREEN\n        TPUT   (1),(0),R\n         TM    SWITCH,SCRST+SCRRS      FIRST TPUT DONE?\n         BNO   SNDGT                   BRANCH IF YES\n         L     R1,4(R2)\n        $FS    CC=W,MF=(I,(R1))        RESTORE WRITE\n         NI    SWITCH,255-SCRST        SET FIRST TPUT DONE\nSNDGT    TM    SWITCH,SKGET            NO REPLY REQUESTED ?\n         BO    RETOK                   YES, EXIT\n         LM    R4,R7,CLRRP             NO, PROCESS REPLY\n         MVCL  R4,R6\n         L     R4,CLRRP\n         LA    R5,L'PFREPLY\n         ALR   R4,R5\n         ST    R4,AREPLY               REPLY START ADDRESS\n        TGET   PFREPLY,REPLYL-1,ASIS\n         SR    R1,R5\n         BNM   *+L'*+2\n         XR    R1,R1\n         ST    R1,LREPLY               TRUE LENGTH REPLY\n         CH    R15,=H'20'              TERMINAL DISCONNECTED?\n         BE    ENDIT                   YES,... SPLIT\n         CH    R15,=H'8'               ATTENTION?\n         BE    ENDIT                   YES,... SPLIT\n         CH    R15,=H'12'              IS INPUT LONGER THAN BUFFER?\n         BNE   SKIPCLRQ                NO\n        TCLEARQ INPUT                  FLUSH THE TRASH\nSKIPCLRQ CLI   PFREPLY,X'F1'           PF 1 ENTERED?\n         BE    HELP                    YES,... HELP\n         CLI   PFREPLY,X'C1'           PF 13 ENTERED (ALT. PF 1)?\n         BE    HELP                    YES,... HELP\n         CLI   PFREPLY,X'F2'           PF 2 ENTERED?\n         BE    STATS                   YES,... STATUS\n         CLI   PFREPLY,X'C2'           PF 14 ENTERED (ALT. PF 2)?\n         BE    STATS                   YES,... STATUS\n         CLI   PFREPLY,X'F3'           PF 3 ENTERED?\n         BE    ENDIT                   YES,... SPLIT\n         CLI   PFREPLY,X'C3'           PF 15 ENTERED (ALT. PF 3)?\n         BE    ENDIT                   YES,... SPLIT\n         CLI   PFREPLY,X'6C'           PA 1 ENTERED?\n         BE    ENDIT                   YES,... SPLIT\n         CLI   PFREPLY,X'6E'           PA 2 ENTERED?\n         BE    ENDIT                   YES,... SPLIT\n         CLI   PFREPLY,X'6B'           PA 3 ENTERED?\n         BE    ENDIT                   YES,... SPLIT\n         CLI   PFREPLY,X'7D'           ENTER KEY DEPRESSED?\n         BNE   GODONE                  NO,... IGNORE,... RE-DISPLAY\n         CLI   AUT99S,X'FF'            YES,... BUFFER SNAP?\n         BNE   NOSNAP                  NO\n         STM   R0,R9,SVSNAP\nSWSNAP   NOP   DOSNAP\n         OI    SWSNAP+1,X'F0'          CLOSE THIS WAY\n        OPEN   (SNAPDCB,OUTPUT)\n         TM    SNAPDCB+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    OSERR                   SNAP OPEN ERROR\nDOSNAP  SNAP   TCB='S',MF=(E,SNAPLST)\n         LTR   R15,R15\n         BZ    EXSNAP\n        CLOSE  (SNAPDCB)               SNAP ERROR\nOSERR    MVI   AUT99S,0                CLOSE SNAP WAY FOR EVER\nEXSNAP   LM    R0,R9,SVSNAP\nNOSNAP   L     R1,4(R13)\n         MVC   24(4,R1),CLRRP          PASS ADDRESS OF AID ...\n         B     RETOK\nENDIT    LA    R15,4                   END REQUESTED\n         B     LEAVE\n         EJECT\n*------- DISPLAY STATUS OR HELP INFORMATION.\n         SPACE 1\nSTATS    ICM   R15,B'1111',AUT99I      STATUS MODULE ?\n         BZ    GODONE                  NO,... IGNORE,... RE-DISPLAY\n         BASR  R14,R15                 YES, GO DO IT\n         LTR   R15,R15                 COMPLETION ?\n         BNZ   ENDIT                   ERROR, ...SPLIT\n         STM   R0,R1,STPNL             OK, STORE STATUS PANEL INFO\n         BAS   R8,DISPNL\n         LM    R0,R1,STPNL\n         B     DISPNL\n         SPACE 1\nHELP     ICM   R15,B'1111',AUT99H      HELP PANEL INFO'S TO BE SET ?\n         BZ    GODONE                  NO,... BACK\n         LM    R0,R1,0(R15)            YES\n         LTR   R0,R0                   IS RESET TO DEFAULT REQUESTED ?\n         BNZ   *+L'*+10                NO\n         MVC   AUT99H,=A(DFHPNL)       YES, SET DEFAULT\n         LM    R0,R1,DFHPNL\n         STM   R0,R1,HLPNL             STORE HELP PANEL INFO'S\n         BASR  R8,0                    DISPLAY HELP PANEL\n         LM    R0,R1,HLPNL\nDISPNL   ICM   R1,B'1000',TPUTFLG      INDICATE FULL SCREEN\n        TPUT   (1),(0),R\n         XC    RESPONSE,RESPONSE\n        TGET   RESPONSE,L'RESPONSE,ASIS\n         CH    R15,=H'20'              TERMINAL DISCONNECTED?\n         BE    ENDIT                   YES,... SPLIT\n         CH    R15,=H'8'               ATTENTION?\n         BE    ENDIT                   YES,... SPLIT\n         CH    R15,=H'12'              IS INPUT LONGER THAN BUFFER?\n         BNE   SKPCLRQ                 NO\n        TCLEARQ INPUT                  FLUSH THE TRASH\nSKPCLRQ  CLI   RESPONSE,X'F3'          PF 3 ENTERED?\n         BE    GODONE                  YES,... BACK\n         CLI   RESPONSE,X'C3'          PF 15 ENTERED (ALT. PF 3)?\n         BE    GODONE                  YES,... BACK\n         CLI   RESPONSE,X'7D'          ENTER KEY DEPRESSED?\n         BNER  R8                      NO,... IGNORE,... RE-DISPLAY\n         B     GODONE                  YES,... BACK\n         SPACE 1\n*------- UNACCEPTABLE TERMINAL.\n         SPACE 1\nNOTSCR  TPUT   ERROR0,L'ERROR0         NOT SCREEN TERMINAL\n         B     SEVERR\nNOTSTD  TPUT   ERROR1,L'ERROR1         NOT SIZED 24 * 80\nSEVERR   LA    R15,8                   SEVERE ERROR\n         B     LEAVE\n         EJECT\n*------- PASS INPUT TO CALLER (FIELD BY FIELD).\n         ENTRY AUT99R\n        CNOP   0,8\n         DROP  R10\n         USING *,R15\nAUT99R   STM   R14,R12,12(R13)         SAVE REGISTERS\n         L     R10,=A(AUT99)           BASE ADDRESS\n         DROP  R15\n         USING AUT99,R10               RESTORE FULL ADDRESSABILITY\n         LR    R2,R13                  PREVIOUS SAVE AREA\n         LA    R13,32(R10)             CURRENT SAVE AREA\n         ST    R13,8(R2)               LINK SAVE AREAS\n         ST    R2,4(R13)\n         LM    R15,R0,AREPLY\n         LTR   R0,R0                   ANYTHING TO PASS?\n         BNP   RETOK                   NO MORE ...\n         CLI   0(R15),X'11'            SBA ORDER?\n         BE    *+L'*+10                YES\n         XC    LREPLY,LREPLY           NO, RESET ALL ...\n         B     RETOK                   SAY END ...\n         SH    R0,=H'3'                MINUS SBA + BUFFER ADDR.\n         BP    *+L'*+10                BRANCH IF NOT END\n         XC    24(4,R2),24(R2)         SET R1 = 0 FOR RETURN\n         B     RESALL\n         LA    R14,3(R15)              POINT TO TEXT\n         XR    R1,R1\nSRCSBA   CLI   0(R14),X'11'            SEARCH END OR NEXT SBA\n         BE    NXTSBA\n         LA    R1,1(R1)\n         LA    R14,1(R14)\n         BCT   R0,SRCSBA\n         ST    R1,24(R2)               SET R1 = LENGTH FOR RETURN\nRESALL   XC    LREPLY,LREPLY           RESET ALL ...\n         B     LEAVE\nNXTSBA   ST    R14,AREPLY\n         ST    R0,LREPLY\n         ST    R1,24(R2)               SET R1 = LENGTH FOR RETURN\n         B     LEAVE\n         EJECT\n*------- TURN OFF FULL SCREEN (SPF),\n*        CLEAR AND RESET CURSOR TO ROW1, COL1.\n         SPACE 1\nQUIT     TM    SWITCH,SCRFT            WAS FIRST TIME ENTRY DONE?\n         BZ    GOEXIT                  BRANCH IF NOT\n         TM    SWITCH,SCRRS            WAS SCREEN SIZE CHANGED?\n         BZ    ENDCL                   BRANCH IF NOT\n        STSIZE SIZELOC=SZLINE,LINELOC=SZSCRN RESTORE ORIGINAL SIZE\n        $FS    CC=EWA,MF=(I,CLEAR)\nENDCL    LA    R1,CLEAR\n         LA    R0,LCLEAR\n         ICM   R1,B'1000',TPUTFLG      INDICATE FULL SCREEN\n        TPUT   (1),(0),R\n        STFSMODE OFF                   TURN OFF FULL SCREEN MODE\n         SPACE 1\n*------- THAT'S ALL FOLKS.\n         SPACE 1\nGOEXIT   MVI   SWITCH,0                RESET ALL\n         XC    AUT99I,AUT99I\n         MVC   AUT99H,=A(DFHPNL)\n         CLI   AUT99S,X'FF'            YES,... BUFFER SNAP?\n         BNE   RETOK                   NO\n        CLOSE  (SNAPDCB)               CLOSE SNAP\n         MVI   AUT99S,0                CLOSE SNAP WAY FOR EVER\nRETOK    XR    R15,R15\nLEAVE   $XRET  CC=(R15)\n         SPACE 1\n         DROP  R10\n         EJECT\n*--------------------------------------------------------------------*\n*        CONSTANTS AND WORK-AREAS.                                   *\n*--------------------------------------------------------------------*\n         SPACE 1\nSVSNAP   DC    10F'0'\n         ENTRY AUT99H\nAUT99H   DC    A(DFHPNL)     PF-1 KEY ADDRESS OF HELP PANEL INFO'S\nHLPNL    DC    A(*-*,*-*)\n         ENTRY AUT99I\nAUT99I   DC    A(*-*)        PF-2 KEY ADDRESS OF STATUS PROCESS\nSTPNL    DC    A(*-*,*-*)\nDFHPNL   DC    A(LECRAN,ECRAN)\nSZLINE   DC    F'0'          LINE SIZE (LINE LENGTH)\nSZSCRN   DC    F'0'          SCREEN SIZE (NUMBER OF LINES)\nAREPLY   DC    F'0'          TGET - REPLY CURRENT ADDRESS\nLREPLY   DC    F'0'          TGET - REPLY LENGTH\nCLRRP    DC    A(PFREPLY,REPLYL,*+4,0)\n         ENTRY AUT99S\nAUT99S   DC    XL1'0'        INPUT BUFFER SNAP SWITCH (SET BY AUT98)\nTPUTFLG  DC    X'03'         ITS FULL SCREEN TIME\nSWITCH   DC    XL1'0'\nSCRFT    EQU   X'80'         FIRST TIME ENTRY DONE\nSKGET    EQU   X'40'         SKIP GET REPLY REQUESTED\nSCRST    EQU   X'08'         SCREEN SIZE TO BE SET\nSCRRS    EQU   X'04'         SCREEN SIZE TO BE RESET\nRESPONSE DC    XL8'0'        USED WITH HELP OR STATUS DISPLAY\nERROR0   DC    C'*** I RUN ONLY ON A SCREEN TERMINAL ***'\nERROR1   DC    C'*** I WANT TO BE SCREEN SIZED 24X80 ***'\n         SPACE 1\nCLEAR    $FS   CC=EW,WCC=(AL,KBR,RMDT),SBA=(24,79),MF=L\n         $FS   SBA=(1,1),RA=(1,1,00),MF=L\n         $FS   SBA=(1,1),SF=(IC),MF=L\nLCLEAR   EQU   *-CLEAR\n         SPACE 1\n*--------------------------------------------------------------------*\n*        SNAP CONTROL BLOCKS.                                        *\n*--------------------------------------------------------------------*\n         SPACE 1\nSNAPDCB DCB    DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,LRECL=125,    X\n               DDNAME=SYSSNAP\nSNAPLST SNAP   DCB=SNAPDCB,ID=1,STORAGE=(SBSNAP,EBSNAP),               X\n               STRHDR=SNAPHD,MF=L\nSNAPHD   DC    AL1(L'HDT)\nHDT      DC    C'A U T 9 9 - DUMP OF TERMINAL INPUT BUFFER.'\n         EJECT\n*--------------------------------------------------------------------*\n*        LITERAL POOL.                                               *\n*--------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        INPUT BUFFER.                                               *\n*--------------------------------------------------------------------*\n         SPACE 1\n*------- AREA TO HOLD TGET REPLY\n        CNOP   0,8           FILLER FOR SNAP START ALIGNMENT\nSBSNAP   DS    0F            SNAP DUMP START\nPFREPLY  DC    XL3'0'        AID + JUNK (CURSOR ADDRESS)\nREPLY    DS    1024X'0'      REAL REPLY\nREPLYL   EQU   *-PFREPLY\nEBSNAP   DC    XL8'0'        FILLER FOR SNAP DUMP\n         EJECT\n*--------------------------------------------------------------------*\n*        HELP PANEL.                                                 *\n*--------------------------------------------------------------------*\n         SPACE 1\nECRAN   $FS    CC=W,WCC=(KBR),SBA=(24,80),MF=L\n        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.\n        $FS    SBA=(1,1),SF=(PROT),MF=L\n        $FS    SBA=(1,10),SF=(PROT,INT),MF=L\n        $FS    TEXT='Authorizations/Programmers ',MF=L\n        $FS    TEXT='MANAGEMENT Rules Summary',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(2,10),SF=(PROT,INT),MF=L\n        $FS    TEXT='===========================',MF=L\n        $FS    TEXT='========================',MF=L\n        $FS    SF=(PROT),MF=L\n        $FS    SBA=(4,1),SF=(PROT,INT),TEXT='1',MF=L\n        $FS    SF=(PROT),TEXT='An Authorization N\u00a2 defines a Pro',MF=L\n        $FS    TEXT='ject Manager (Resp. Progr. N\u00a2) and the',MF=L\n        $FS    SBA=(5,3),MF=L\n        $FS    SF=(PROT),TEXT='Programmers N\u00a2s allowed to work o',MF=L\n        $FS    TEXT='n it. A Progr. N\u00a2 in the Authorization can',MF=L\n        $FS    SBA=(6,3),MF=L\n        $FS    SF=(PROT),TEXT='be momentaneously invalidated or ',MF=L\n        $FS    TEXT='deleted, but when you add or reactivate it,',MF=L\n        $FS    SBA=(7,3),MF=L\n        $FS    SF=(PROT),TEXT='it will be forced to the state of',MF=L\n        $FS    TEXT=' the Progr. N\u00a2 definition. The Resp. Progr.',MF=L\n        $FS    SBA=(8,3),MF=L\n        $FS    SF=(PROT),TEXT='must always be a defined active P',MF=L\n        $FS    TEXT='rogr. N\u00a2 and does not allow to work on the',MF=L\n        $FS    SBA=(9,3),MF=L\n        $FS    SF=(PROT),TEXT='Authorization (to do it, you must',MF=L\n        $FS    TEXT=' also define it in the Progr. N\u00a2s list).',MF=L\n        $FS    SBA=(11,1),SF=(PROT,INT),TEXT='2',MF=L\n        $FS    SF=(PROT),TEXT='A Programmer N\u00a2 is always created',MF=L\n        $FS    TEXT=' as active, then it may be invalidated or',MF=L\n        $FS    SBA=(12,3),MF=L\n        $FS    SF=(PROT),TEXT='deleted, but these last two actio',MF=L\n        $FS    TEXT='ns are automatically reflected in all the',MF=L\n        $FS    SBA=(13,3),MF=L\n        $FS    SF=(PROT),TEXT='Authorizations where he is define',MF=L\n        $FS    TEXT='d as work-programmer. The invalidation or',MF=L\n        $FS    SBA=(14,3),MF=L\n        $FS    SF=(PROT),TEXT='deletion is rejected until this P',MF=L\n        $FS    TEXT='rogrammer is indicated as a Resp. Progr. in',MF=L\n        $FS    SBA=(15,3),MF=L\n        $FS    SF=(PROT),TEXT='any Authorization(s).',MF=L\n        $FS    SBA=(17,1),SF=(PROT,INT),TEXT='3',MF=L\n        $FS    SF=(PROT),TEXT='The Priority defined in the Autho',MF=L\n        $FS    TEXT='rizations is used by IEFUJV SMFexit routine',MF=L\n        $FS    SBA=(18,3),MF=L\n        $FS    SF=(PROT),TEXT='to increment or decrement the job',MF=L\n        $FS    TEXT='''s scheduling priority for background/batch',MF=L\n        $FS    SBA=(19,3),MF=L\n        $FS    SF=(PROT),TEXT='execution. So all jobs using this',MF=L\n        $FS    TEXT=' Authorization N\u00a2 will have more or less',MF=L\n        $FS    SBA=(20,3),MF=L\n        $FS    SF=(PROT),TEXT='opportunities to be executed with',MF=L\n        $FS    TEXT=' respect to the others. The standard level',MF=L\n        $FS    SBA=(21,3),MF=L\n        $FS    SF=(PROT),TEXT='0 is indicated by the digit 4 (th',MF=L\n        $FS    TEXT='us 0 results in a decrement of 4 (-4) and 9',MF=L\n        $FS    SBA=(22,3),MF=L\n        $FS    SF=(PROT),TEXT='results in an increment of 5 (+5)',MF=L\n        $FS    TEXT=' at the execution time job scheduling).',MF=L\n        $FS    SBA=(24,1),SF=(PROT),TEXT='Hit',MF=L\n        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L\n        $FS    SF=(PROT),TEXT='or',MF=L\n        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L\n        $FS    SF=(PROT),TEXT='to escape',MF=L\n        $FS    SF=(PROT,INT),TEXT='===>',MF=L\n        $FS    SF=(INT),TEXT=' ',MF=L\n        $FS    SF=(PROT),TEXT='<',MF=L\n        $FS    SBA=(1,1),SF=(PT,IC),MF=L\nLECRAN   EQU   *-ECRAN\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DUMMY SECTIONS.                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\n        DCBD   DSORG=PS,DEVD=DA\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CATLIST": {"ttr": 6913, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882o\\x00\\x882o\\x12\\x16\\x01n\\x01n\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-21T00:00:00", "modifydate": "1988-11-21T12:16:00", "lines": 366, "newlines": 366, "modlines": 0, "user": "SYSPAJA"}, "text": "CTL      TITLE 'O.S. CATALOG LIST.'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *          O.S. CATALOG LIST          * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    THIS PROGRAM PRODUCES A LISTING OF AN ENTIRE O.S.      *\n* ---------    CATALOG (DATA-SET 'SYSCTLG') RESIDING ON A VOLUME      *\n*              WHICH IS A DIRECT-ACCESS STORAGE DEVICE CLASS          *\n*              (UCBTYP+2 = X'20').                                    *\n*                                                                     *\n*              A DD-CARD, WRITTEN AS BELOW, IS NEEDED FOR EACH        *\n*              VOLUME ON WHICH THE ANALYSIS IS DESIRED :              *\n*                                                                     *\n*              //CTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD        *\n*                                                                     *\n*                                                                     *\n* CALL OF THE PROGRAM :                                               *\n* ---------------------                                               *\n*                                                                     *\n*        //LIST   EXEC  PGM=CATLIST                                   *\n*        //CTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD              *\n*        //CTDD...  DD  --- --- --- --- --- --- --- ---               *\n*        //CTDD...  DD  --- ANY NUMBER OF DD-CARDS. ---               *\n*        //CTDD...  DD  --- --- --- --- --- --- --- ---               *\n*        //SYSPRINT DD  SYSOUT=A                                      *\n*                                                                     *\n*                                                                     *\n* RESTRICTION : BE CAREFULL TO RUN THIS PROGRAM ON VOLUMES WHICH      *\n* ------------- ARE NOT INVOLVED BY O.S. CATALOG OPERATIONS DURING    *\n*               THE ANALYSIS.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nCTLMAIN  START 0\n         SPACE 1\n        $DEFREG\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nOFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING.\nON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING.\n         SPACE 2\n        PRINT  NOGEN\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 1\nCTLMAIN  CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\n        PRINT  GEN\n         EJECT\n        $XENT  BASE=(R11,R12)\n        EXTRACT   ATIOT,'S',FIELDS=(TIOT)\n         SPACE 2\n         USING TIODSECT,R3\n         L     R3,ATIOT            GET TIOT ADDRESS.\n         XR    R1,R1\nSRDDS    CLC   TIOELNGH(L'ZEROS),ZEROS  TEST END OF TIOT,\n         BE    DDMS                BRANCH IF YES.\n         CLC   TIOEDDNM(L'CTDD),CTDD\n         BE    OPNSR               BRANCH IF CATALOG DD-NAME.\nSRSR     IC    R1,TIOELNGH         NEXT DD ENTRY.\n         AR    R3,R1\n         B     SRDDS\nOPNSR    MVC   DDNAM(L'TIOEDDNM),TIOEDDNM\n         ST    R3,ATIOT\n         OI    DDMS+1,ON\n         DROP  R3\n         EJECT\n        $CATSO DDNAM,DVTYP\n         LTR   R15,R15\n         BNZ   ERCATSO\n         MVC   MINIT+6(6),VOLUME\n        $DAUNTY DVTYP+3,MINIT+14   GET UNIT TYPE NAME.\n         LTR   R15,R15\n         BNZ   ERDAUNTY\n         LA    R1,MINIT\n         BAS   R14,PRT             PRINT STARTING TITLE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVI   MESSAGE+6,C'-'\n         MVC   MESSAGE+7(L'MINIT-7),MESSAGE+6\n         BAS   R14,PRTMS\n         MVC   MESSAGE+2(L'MESSAGE-2),MESSAGE+1\n         BAS   R14,PRTMS\n         EJECT\nNEXT     MVC   MESSAGE+2(L'MESSAGE-2),MESSAGE+1\n        $CATSR CTYPE,VOLUME,WORK\n         LTR   R15,R15\n         BM    CATEND\n         BNZ   ERCATSR\n         CLI   CTYPE,255           TEST CONTINUATION.\n         BE    CONT\n         MVC   PTYPE,CTYPE\n         CLI   CTYPE,1             TEST CVOL POINTER.\n         BE    CVOL\n         CLI   CTYPE,2             TEST DATA-SET NAME.\n         BE    DSNM\n         CLI   CTYPE,3             TEST ALIAS NAME.\n         BE    ALSN\n         CLI   CTYPE,128           TEST NULL INDEX.\n         BE    NULL\n         B     ERUNEXP\n         SPACE 2\nCVOL     MVC   MESSAGE+10(L'MCVPE1),MCVPE1\n         MVC   MESSAGE+L'MCVPE1+11(8),DSNAME\nCVOLC    MVC   MESSAGE+L'MCVPE1+20(L'MCVPE2),MCVPE2\n         MVC   MESSAGE+L'MCVPE1+L'MCVPE2+21(L'VOLUME),VOLUME\n         CLC   WORK,ZEROS\n         BE    CVOLN\n         MVC   MESSAGE+L'MCVPE1+L'MCVPE2+L'VOLUME+21(L'MCVPE3),MCVPE3\n         LA    R1,L'WORK\n         LA    R2,WORK\n         LA    R3,MESSAGE+L'MCVPE1+L'MCVPE2+L'VOLUME+L'MCVPE3+22\n         BAS   R14,EDIT\n         MVI   0(R3),C'.'\n         B     *+L'*+4\nCVOLN    MVI   MESSAGE+L'MCVPE1+L'MCVPE2+L'VOLUME+21,C'.'\n         BAS   R14,PRTMS\n         B     NEXT\n         SPACE 1\nDSNM     LTR   R1,R1\n         BNZ   DSNMG\n         MVC   MESSAGE+10(L'MDSPE1),MDSPE1\n         B     DSNMM\nDSNMG    MVC   MESSAGE+10(L'MDSPE2),MDSPE2\nDSNMM    MVC   MESSAGE+L'MDSPE1+11(L'DSNAME),DSNAME\nDSNMC    MVC   MESSAGE+L'MDSPE1+L'DSNAME+12(L'MCVPE2),MCVPE2\n         MVC   MESSAGE+L'MDSPE1+L'DSNAME+L'MCVPE2+13(L'VOLUME),VOLUME\n         MVC   MESSAGE+L'MDSPE1+L'DSNAME+L'MCVPE2+L'VOLUME+13(L'MCVPE3)1\n               ,MCVPE3\n         LA    R1,L'WORK\n         LA    R2,WORK\n         LA    R3,MESSAGE+L'MDSPE1+L'DSNAME+L'MCVPE2+L'VOLUME+L'MCVPE3+1\n               14\n         BAS   R14,EDIT\n         MVI   0(R3),C'.'\n         BAS   R14,PRTMS\n         B     NEXT\n         SPACE 1\nALSN     MVC   MESSAGE+10(L'MAE1),MAE1\n         MVC   MESSAGE+L'MAE1+11(8),DSNAME\n         MVC   MESSAGE+L'MAE1+20(L'MAE2),MAE2\n         MVC   MESSAGE+L'MAE1+L'MAE2+21(8),DSNAME+8\n         MVI   MESSAGE+L'MAE1+L'MAE2+29,C'.'\n         BAS   R14,PRTMS\n         B     NEXT\n         SPACE 1\nNULL     LTR   R1,R1\n         BZ    NULLSW\n         MVC   MESSAGE+10(L'MNGDG),MNGDG\n         NI    NULLSW+1,OFF\n         MVC   GDGIX,DSNAME\nNRL      LA    R14,GDGIX+L'GDGIX-1\n         LA    R15,L'GDGIX\nNRL1     CLI   0(R14),C' '\n         BNE   NRL3\n         BCTR  R14,0\n         BCT   R15,NRL1\n         B     NULLMV\nNRL2     CLI   0(R14),C'.'\n         BE    NULLMV\nNRL3     MVI   0(R14),C' '\n         BCTR  R14,0\n         BCT   R15,NRL2\n         B     NULLMV\nNULLSW   B     NULLIX\n         CLC   GDGIX,DSNAME\n         BE    NRL\n         OI    NULLSW+1,ON\nNULLIX   MVC   MESSAGE+5(L'MEMPTY),MEMPTY\nNULLMV   MVC   MESSAGE+L'MEMPTY+6(L'DSNAME),DSNAME\n         BAS   R14,PRTMS\n         B     NEXT\n         SPACE 1\nCONT     CLI   PTYPE,1\n         BE    CVOLC\n         CLI   PTYPE,2\n         BE    DSNMC\nERUNEXP  LA    R1,UNEXP\n         BAS   R14,PRT\n         NI    SWRCC+1,OFF\n         B     CATEND\nERCATSO  MVC   ERRM+6(L'RCATSO),RCATSO\n         B     PMERR\nERCATSR  MVC   ERRM+6(L'RCATSR),RCATSR\n         B     PMERR\nERDAUNTY MVC   ERRM+6(L'RDAUNTY),RDAUNTY\n         B     PMERR\nERCATSC  MVC   ERRM+6(L'RCATSC),RCATSC\n         NI    SWWG+1,OFF\nPMERR    CVD   R15,CONV\n         UNPK  ERRM+L'ERRM-3(2),CONV+6(2)\n         OI    ERRM+L'ERRM-2,C'0'\n         LA    R1,ERRM\n         BAS   R14,PRT\nSWWG     B     CATEND\n         OI    SWWG+1,ON\n         B     CATINF\n         EJECT\nCATEND  $CATSC VLSTBLK\n         LTR   R15,R15\n         BNZ   ERCATSC\nCATINF   MVI   MESSAGE,C'0'\n         MVC   MESSAGE+6(L'MVICE1),MVICE1\n         LA    R1,L'VLSTBLK\n         LA    R2,VLSTBLK\n         LA    R3,MESSAGE+L'MVICE1+7\n         BAS   R14,EDIT\n         MVC   0(L'MVICE2,R3),MVICE2\n         LA    R1,L'VCLSTBLK\n         LA    R2,VCLSTBLK\n         LA    R3,L'MVICE2+1(R3)\n         BAS   R14,EDIT\n         MVI   0(R3),C'.'\n         BAS   R14,PRTMS\n         MVC   MESSAGE+2(L'MESSAGE-2),MESSAGE+1\n         MVC   MESSAGE+6(L'MVICE3),MVICE3\n         LA    R1,L'VFHOLE\n         LA    R2,VFHOLE\n         LA    R3,MESSAGE+L'MVICE3+7\n         BAS   R14,EDIT\n         MVC   0(L'UPTTR,R3),UPTTR\n         LA    R1,L'HIGHTTR\n         LA    R2,HIGHTTR\n         LA    R3,L'UPTTR+1(R3)\n         BAS   R14,EDIT\n         MVI   0(R3),C'.'\n         BAS   R14,PRTMS\n         MVC   ENDM+6(6),MINIT+6\n         LA    R1,ENDM\n         BAS   R14,PRT\n         XR    R1,R1\n         L     R3,ATIOT\n         B     SRSR\n         EJECT\nDDMS     NOP   SWRCC\n         LA    R1,MISM\n         BAS   R14,PRT\nSWRCC    B     RCC\n         LA    R9,64               C.C. = 64. - - - - - - - - - - - -\n         B     RCC+L'RCC\nRCC      XR    R9,R9               C.C. = 0.  - - - - - - - - - - - -\n        $PCLOSE\n        $XRET  CC=(R9)\n         EJECT\n*        HEXADECIMAL OUTPUT ROUTINE.\n*\n*              R0  = WORK REGISTER.\n*              R1  = INPUT FIELD LENGTH.\n*              R2  = INPUT FIELD ADDRESS.\n*              R3  = OUTPUT FIELD ADDRESS.\n*              R4  = WORK REGISTER.\n*              R14 = LINK REGISTER.\n*              R15 = WORK REGISTER.\n*\n*        NOTE. AT EXIT, THE REGISTER 3 POINTS AT THE END+1 BYTE ADDRESS\n*              OF THE OUTPUT FIELD.\n         SPACE 1\nEDIT     LR    R15,R1\n         LR    R4,R3\n         XR    R0,R0\nED1      IC    R0,0(R2)\n         STC   R0,1(R3)\n         NI    1(R3),X'0F'\n         SRL   R0,4\n         STC   R0,0(R3)\n         LA    R2,1(R2)\n         LA    R3,2(R3)\n         BCT   R1,ED1\n         SLL   R15,1\n         BCTR  R15,0\n         EX    R15,ED2\n         BR    R14\nED2      TR    0(*-*,R4),TRTAB\n         EJECT\n*        PRINT ROUTINES.\n*\n*              R0  = WORK REGISTER.\n*              R1  = MESSAGE ADDRESS (PRT ENTRY).\n*              R14 = LINK REGISTER.\n*              R15 = WORK REGISTER.\n*\n*        NOTE. MESSAGE ADDRESS POINTS TO THE MESSAGE TEXT (ASA\n*              CONTROL CHARACTER), PRECEEDED BY THE ONE BYTE\n*              MESSAGE TEXT LENGTH.\n         SPACE 1\nPRTMS    LA    R1,MESSAGE\nPRT      ST    R14,SVLINK          SAVE LINK REGISTER.\n         LR    R0,R1\n        $PRINT (R0)\n         LTR   R15,R15             TEST PRINT COMPLETION CODE,\n         BNZ   ERRPRT              BRANCH IF ERROR DETECTED.\n         L     R14,SVLINK          RESTORE LINK REGISTER.\n         BR    R14                 RETURN.\n         SPACE 1\nERRPRT   LR    R9,R15              C.C. = FROM 4 TO 20. - - - - - - -\n         SLL   R9,2\n        $CATSC\n         B     RCC+L'RCC\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nCONV     DC    D'0'\nATIOT    DC    A(*-*)\nSVLINK   DC    A(*-*)\nWORK     DC    F'0'\nZEROS    DC    F'0'\nDVTYP    DC    5F'0'\n         DC    H'0'\nVOLUME   DC    CL6' '\nVLSTBLK  DC    F'0'\nVCLSTBLK DC    F'0'\nVFHOLE   DC    F'0'\nHIGHTTR  DC    F'0'\n         SPACE 1\nPTYPE    DC    XL1'0'\nCTYPE    DC    XL1'0'\nDSNAME   DC    CL44' '\nDDNAM    DC    CL8' '\nGDGIX    DC    CL44' '\nCTDD     DC    C'CTDD'\nMVICE1   DC    C'TTR LAST OF VOL. INDEX ='\nMVICE2   DC    C', TTR LAST OF SYSCTLG ='\nMVICE3   DC    C'TTR FIRST UNUSED OF SYSCTLG ='\nUPTTR    DC    C', UPPER TTR USED ='\nMCVPE1   DC    C'CVOL PTR ='\nMCVPE2   DC    C'- VOL.ID. ='\nMCVPE3   DC    C', DEV.TYPE ='\nMDSPE1   DC    C'DATA SET ='\nMDSPE2   DC    C'GDG D.S. ='\nMNGDG    DC    C'NULL GDG ='\nMAE1     DC    C'ALIAS N. ='\nMAE2     DC    C'- TRUE NAME ='\nMEMPTY   DC    C'-- NULL INDEX ='\nTRTAB    DC    C'0123456789ABCDEF'\n         EJECT\n         DC    AL1(L'MESSAGE)\nMESSAGE  DC    CL132' '\n         DC    AL1(L'MINIT)\nMINIT    DC    C'1            (        ) VOLUME - CATALOG LIST.'\n         DC    AL1(L'UNEXP)\nUNEXP    DC    C'0          UNEXPECTED CATALOG INDICATOR RECEIVED.'\n         DC    AL1(L'ENDM)\nENDM     DC    C'0            : END OF CATALOG LIST.'\n         DC    AL1(L'MISM)\nMISM     DC    C'1          CTDD.... DD-CARD MISSING.'\n         DC    AL1(L'ERRM)\nERRM     DC    C'0              : RETURN CODE XX.'\n         SPACE 1\nRCATSO   DC    CL8'CATSO'\nRCATSR   DC    CL8'CATSR'\nRDAUNTY  DC    CL8'DAUNTY'\nRCATSC   DC    CL8'CATSC'\n         SPACE 2\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATLIST$": {"ttr": 6920, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//CATLIST  JOB (........),'INSTALL - CATLIST -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=7\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                CATS      DAUNTY    TXPRINT                        *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=CATLIST\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(CATSR,DAUNTY,PRINT)\n  ENTRY   CTLMAIN\n  NAME    CATLIST(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATLIST@": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x855O\\x00\\x855O\\x16\\x12\\x00\"\\x00\"\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-12-20T00:00:00", "modifydate": "1985-12-20T16:12:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      CATLIST   1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          O.S. CATALOG LIST          * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This program produces a listing of an entire O.S.\n  ---------    catalog (data-set SYSCTLG) residing on a volume\n               which is a direct-access storage device class\n               (UCBTYP+2 = X'20').\n\n               A DD-card, written as below, is needed for each\n               volume on which the analysis is desired :\n\n               //CTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD\n\n\n  Call of the program :\n  ---------------------\n\n         //LIST   EXEC  PGM=CATLIST\n         //CTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD\n         //CTDD...  DD  --- --- --- --- --- --- --- ---\n         //CTDD...  DD  --- Any number of DD-cards. ---\n         //CTDD...  DD  --- --- --- --- --- --- --- ---\n         //SYSPRINT DD  SYSOUT=A\n\n\n  Restriction : be carefull to run this program on volumes which\n  ------------- are not involved by O.S. catalog operations during\n                the list.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CLA001": {"ttr": 6924, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x01D\\x01D\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 324, "newlines": 324, "modlines": 0, "user": "SYSPAJA"}, "text": "A001     TITLE 'CLEAN-UP - INITIALIZATION (A001).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA001    @XS\n*        ANALYZE EXEC PARM. FIELD.\n         SPACE 1\n         XR    R15,R15\n         L     R1,0(R1)            PARM. FIELD ADDRESS\n         LH    R2,0(R1)            PARM. FIELD LENGTH\n         LTR   R2,R2\n         BNP   PA99\n         LA    R3,1(R1,R2)         END OF PARM. FIELD TEXT\n         LA    R2,2(R1)            START OF PARM. FIELD TEXT\nPA0      LA    R0,4(R2)\n         CLR   R0,R3\n         BH    PA1\n         CLC   0(5,R2),=CL5'CHECK'\n         BNE   PA1\n         LR    R2,R0\n         B     PA3\nPA1      LA    R0,3(R2)\n         CLR   R0,R3\n         BH    PA2\n         CLC   0(4,R2),=CL4'TEST'\n         BNE   PA2\n         LR    R2,R0\n         B     PA4\nPA2      CLI   0(R2),C'T'\n         BE    PA4\n         CLI   0(R2),C'C'\n         BNE   PA90\nPA3      OI    WHAT,WHCHECK        SET CHECK RUN\n         B     PA5\nPA4      OI    RUNIND,RUTEST       SET TEST RUN\nPA5      OI    RUNOPT,RUNOHT       SET HEADER-TRAILER PAGE SUPPRESS\n         LA    R2,1(R2)\n         CLR   R2,R3\n         BH    PA99\nPA90     CLI   0(R2),C','\n         BNE   ERR37\n         LA    R2,1(R2)\n         CLR   R2,R3\n         BNH   PA0\n         SPACE 1\n*        SET RUNNING TIME AND DATE.\n         SPACE 1\nPA99    $GDATE TITDAT,THMS,TODAYA,MF=(E,STWORK)   GET DATE AND TIME\n         LTR   R15,R15\n         BNZ   ERR1\n         MVC   TITTIM(2),THMS\n         MVC   TITTIM+3(2),THMS+2\n         MVC   TITTIM+6(2),THMS+4\n         LA    R1,TITDAT+L'TITDAT-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   1(R1),C'.'\n        $SDATE TODAYA,SYDD,MF=(E,STWORK) GET THE SERIAL DATE (YYDDD)\n         LTR   R15,R15\n         BNZ   ERR1\n         MVC   TODAYD(2),TODAYA+4  BUILD YYMMDD\n         MVC   TODAYD+2(4),TODAYA\n         MVC   TODAYA(2),TODAYD+4  BUILD DDMMYY\n         MVC   TODAYA+2(2),TODAYD+2\n         PACK  WORKD,SYDD          COMPUTE TODAY (SERIAL DAY - YDD)\n         XR    R0,R0\n         CVB   R1,WORKD            CONVERT TO BINARY\n         D     R0,=F'1000'         GET 1000 TO FACTOR YEAR FROM DAY\n         STC   R1,TYDD+1\n         STH   R0,TYDD+2\n         SPACE 1\n*        SAY CLEAN-UP STARTED.\n         SPACE 1\n         LA    R2,ATIOT\n        EXTRACT (R2),'S',FIELDS=(TIOT)\n         L     R2,ATIOT\n         USING TIODSECT,R2\n         MVC   WORKD(L'TIOCNJOB),TIOCNJOB    GET JOB NAME\n         XR    R1,R1\nSC0      CLC   TIOELNGH(4),=XL4'0'\n         BE    SJ0\n         CLC   TIOEDDNM,DDSNAP     IS IT 'SYSSNAP' DD-CARD?\n         BE    SC2                 YES\n         CLC   TIOEDDNM,=CL8'SYSUDUMP'  IS IT 'SYSUDUMP' DD-CARD?\n         BE    SC1                 YES\n         CLC   TIOEDDNM,=CL8'SYSABEND'  IS IT 'SYSABEND' DD-CARD?\n         BNE   SC10                NO\nSC1      OI    RUSREQ,RUSABND      ALLOWS DUMP\n         B     SC10\nSC2      NI    SNAPS+1,OFF         ALLOWS SNAPS\nSC10     IC    R1,TIOELNGH\n         AR    R2,R1\n         B     SC0\n         DROP  R2\nSJ0      LA    R0,WORKD\n         LA    R1,WORKD+7\nSJ1      CLI   0(R1),C' '\n         BNE   SJ2\n         BCTR  R1,0\n         CLR   R1,R0\n         BNL   SJ1\n         B     ERR32\nSJMV     MVC   0(*-*,R14),WORKD\nSJ2      SR    R1,R0\n         LA    R15,7\n         SR    R15,R1\n         SRL   R15,1\n         LA    R14,CUST1(R15)\n         EX    R1,SJMV              SET JOB NAME (CENTERED)\n         STC   R1,JNMEL\n         ST    R14,JNMEA\n         CLC   CUST1,=CL8' '\n         BE    SJ20\n         TM    RUNOPT,RUNOHT        HEADER SUPPRESS?\n         BO    SJ20                 YES\n        @OUT   SPACE\n        $EDITH MF=(E,CU1PLS)\n         LTR   R15,R15              TEST RETURN CODE\n         BNZ   ERR45\n        $EDITH MF=(E,CU2PLS)\n         LTR   R15,R15              TEST RETURN CODE\n         BNZ   ERR45\n         MVC   CLINE,=PL2'+60'      FORCE NEW PAGE\n         SPACE 1\n*        DISPLAY RUNNING CPU.\n         SPACE 1\nSJ20     L     R1,CVTPTR            GET CVT ADDRESS\n         USING CVT,R1\n         L     R2,CVTSMCA           ADDRESS OF SMCA\n         DROP  R1\n         LTR   R2,R2\n         BZ    SJ21\n         USING SMCABASE,R2\n         MVC   VCPUS(L'VCPUS),SMCASID    SET SID\n         DROP  R2\n         B     SJ22\nSJ21     MVC   VCPUD(VCPUL),VCPUN+L'VCPUN-1\nSJ22     LA    R1,0(R1)\n         SL    R1,=F'6'\n         UNPK  VCPUN,0(3,R1)        SET CPU MODEL\n         TR    VCPUN(L'VCPUN-1),TRTAB-C'0'\n         MVI   VCPUN+L'VCPUN-1,C' '\n        @OUT   VCPUM\n        @OUT   VCPUU\n         SPACE 1\n*        VERIFY RACF ACTIVE AND USER DEFINED TO RACF.\n         SPACE 1\n        RACSTAT ,                   TEST FOR RACF ACTIVE\n         LTR   R15,R15              ACTIVE?\n         BNZ   SJ32                 NO\n         L     R1,CVTPTR            GET CVT ADDRESS\n         USING CVT,R1\n         L     R2,CVTTCBP           GET ASCB ADDRESS\n         DROP  R1\n         L     R2,12(,R2)\n         USING ASCB,R2\n         L     R2,ASCBASXB          GET ASXB ADDRESS\n         DROP  R2\n         USING ASXB,R2\n         L     R2,ASXBSENV          GET ACEE ADDRESS\n         DROP  R2\n         LA    R2,0(,R2)\n         LTR   R2,R2                IS ADDRESS THERE?\n         BZ    SJ31                 NOT RACF USER\n         USING ACEE,R2\n         CLC   ACEEACEE,=CL4'ACEE'  VALID ACRONYM?\n         BNE   SJ30                 NO\n         TM    ACEEFLG1,ACEERACF    RACF DEFINED USER?\n         BO    SJ33                 YES\n        @OUT   VRMND\n         B     SJ50\nSJ30    @OUT   VRMNV\n         B     SJ50\nSJ31    @OUT   VRMNU\n         B     SJ50\nSJ32    @OUT   VRMNA\n         OI    STATUS,STBRACF       SET BYPASS RACF\n         B     SJ50\nSJMO     MVC   USID(*-*),ACEEUSRI   << EXECUTED >>\nSJ33     XR    R1,R1\n         IC    R1,ACEEUSRL          GET USERID LENGTH\n         BCTR  R1,0\n         EX    R1,SJMO              SET CURRENT USERID\n         DROP  R2\n         SPACE 1\nSJ50    @X     B001                GET OPTIONS REQUESTS\n         SPACE 1\n*        GET STORAGE SPACE AND BUILD TABLES BOUNDARIES.\n         SPACE 1\n         L     R2,TOTSPCE\n         LA    R3,TBEVOL\n        GETMAIN EC,LV=(R2),A=(R3)\n         LTR   R15,R15             STORAGE AVAILABLE?\n         BNZ   ERR39               NO\n         L     R1,TBEVOL           GET EL. VOL. TABLE ADDRESS\n         MVI   0(R1),FMON          SET FINAL MARKER.\n         A     R1,TBEVOLT\n         ST    R1,TBEVOLE\n         ST    R1,TBCVOL           SET CAT. VOL. TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,TBCVOLT\n         ST    R1,TBCVOLE\n         ST    R1,TBNVOL           SET N-CAT. VOL. TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,TBNVOLT\n         ST    R1,TBNVOLE\n         ST    R1,TBGVOL           SET CVOL PTR. TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,TBGVOLT\n         ST    R1,TBGVOLE\n         ST    R1,TBDVOL           SET NOT-D. VOL. TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,TBDVOLT\n         ST    R1,TBDVOLE\n         ST    R1,TBDDN            SET DDNAME'S TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,TBDDNT\n         ST    R1,TBDDNE\n         ST    R1,DALLS            SET DYNAMIC ALLOCATION AREAS\n         LR    R2,R1\n         L     R3,DALLT\n         AR    R1,R3\n         ST    R1,TBNIX            SET NULL INDEXES TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,TBNIXT\n         ST    R1,TBNIXE\n         ST    R1,TBSKP            SET SKIP NAMES TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,TBSKPT\n         ST    R1,TBSKPE\n         ST    R1,DSTAB            SET DSNAME'S TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,DSTABT\n         ST    R1,TBBYR            SET BYPASS RACF NAMES TABLE ADDRESS\n         MVI   0(R1),FMON          SET FINAL MARKER.\n         A     R1,TBBYRT\n         ST    R1,TBBYRE\n         ST    R1,TBAVOL           SET ACC. VOL. TABLE ADDRESS\n         MVI   0(R1),FMON          SET FINAL MARKER.\n         A     R1,TBAVOLT\n         ST    R1,TBAVOLE\n         ST    R1,TBRGDS           SET HLQ NAMES TABLE ADDRESS\n         MVI   0(R1),FMOFF         SET FINAL MARKER.\n         A     R1,TBRGDST\n         ST    R1,TBRGDSE\n         ST    R1,TBVRGN           SET GENERIC NAMES TABLE ADDRESS\n         MVI   0(R1),FMON          SET FINAL MARKER.\n         A     R1,TBVRGNT\n         ST    R1,TBVRGNE\n         ST    R1,WK1A             SET 1ST RACF WORK AREA ADDRESS\n         A     R1,WK1T\n         ST    R1,WK2A             SET 1ST RACF WORK AREA ADDRESS\n         LA    R4,*\n         XR    R5,R5\n         ICM   R5,B'1000',=C' '\n         MVCL  R2,R4               BLANKS DYN. ALL. AREAS\n         L     R2,WK1A             START OF RACF WORK AREAS\n         L     R3,WK1T\n         A     R3,WK2T\n         XR    R5,R5\n         MVCL  R2,R4               ZEROES WORK AREAS\n         USING WKDS,R1\n         L     R1,WK1A             INITIALIZE RACF WORK AREAS\n         MVC   WORK,WK1T\n         L     R1,WK2A\n         MVC   WORK,WK2T\n         DROP  R1\n         LA    R1,DALLN-1          SET ALT. DYN. ALL. AREAS ADDRESSES.\n         L     R2,DALLS\n         LA    R3,DALLS+L'DALLS\n         A     R2,=A(DYNLGTH)\n         ST    R2,0(R3)\n         LA    R3,L'DALLS(R3)\n         BCT   R1,*-12\n         TM    WHAT,WHCHECK        CHECK RUN?\n         BZ    SJ51                NO\n         MVC   TITTEST,=CL10'-- SCAN --'     INDICATE IT\n         B     SJ52\nSJ51     TM    RUNIND,RUTEST       TEST MODE?\n         BZ    SJ52                NO\n         MVC   TITTEST,=CL10'-- TEST --'     INDICATE IT\nSJ52     LA    R1,TBEVOL\n         ST    R1,STWAL\n        @SNAPS SF,STWAL,TWA\n        @XE\n         EJECT\nSTWORK   DC    3F'0'\nSTWAL    DC    A(*-*)\n         DC    XL1'80',AL3(TOTSL)\n         SPACE 1\n         DC    AL1(VCPUML)\nVCPUM    DC    C'0RUNNING CPU MODEL : '\nVCPUN    DC    CL5' '\nVCPUD    DC    C'(SID : '\nVCPUS    DC    CL4' ',C')'\nVCPUL    EQU   *-VCPUD\nVCPUML   EQU   *-VCPUM\n         DC    AL1(L'VCPUU)\nVCPUU    DC    C' -------------------'\n         DC    AL1(L'VRMND)\nVRMND    DC    C' ===== USER IS NOT RACF DEFINED ====='\n         DC    AL1(L'VRMNV)\nVRMNV    DC    C' ===== INVALID ACRONYM IN ACEE ====='\n         DC    AL1(L'VRMNU)\nVRMNU    DC    C' ===== NOT RACF USER (NO ACEE) ====='\n         DC    AL1(L'VRMNA)\nVRMNA    DC    C' ----> ALL RACF PROCESSES BYPASSED : RACF INACTIVE.'\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        CVT    DSECT=YES,LIST=YES\n        IHAASCB\n        IHAASXB\n        IEESMCA\nTIODSECT DSECT\n        IEFTIOT1\n         EJECT\n        PRINT  GEN\n        #WKDS\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA002": {"ttr": 7173, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x11\\x7f\\x00\\x89\\x11\\x7f\\x12\\x16\\x01\\xa8\\x01\\xa8\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-04-27T00:00:00", "modifydate": "1989-04-27T12:16:00", "lines": 424, "newlines": 424, "modlines": 0, "user": "SYSPAJA"}, "text": "A002     TITLE 'CLEAN-UP - INITIALIZATION CONT''D (A002).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA002    @XS\n        $READ  LINE+20,MF=(L,OPARD)\n         SPACE 1\n*        READ SKIP NAMES.\n         SPACE 1\nOPS0     LM    R3,R5,SCIN          START SCAN INPUT CARD\n         CLI   0(R3),C' '          SEARCH START OF KEYWORD\n         BNE   OPS2\nOPS1     BXLE  R3,R4,*-8\n        $READ  MF=(E,RDIPLS)       GET NEXT CARD\n         LTR   R15,R15\n         BM    OPECC               END OF CONTROL CARDS\n         BZ    OPS0                NEXT\n         B     ERR21\nOPS2     CLC   0(4,R3),=CL4'SKIP'  SKIP REQUEST?\n         BNE   OP2                 NO\n        @OUT   PRCAR               PRINT INPUT CARD\n         LA    R3,3(R3)            SKIP, SEARCH WHICH NAMES\n         BXLE  R3,R4,CSK1\n         BAS   R14,OPCONT\nCSK1     CLI   0(R3),C' '\n         BNE   CSK2\n         BXLE  R3,R4,CSK1\n         BAS   R14,OPCONT\n         B     CSK1\nCSK2     CLI   0(R3),C'('\n         BNE   OERR\nCSK3     BXLE  R3,R4,CSK5\nCSK4     BAS   R14,OPCONT\nCSK5     CLI   0(R3),C')'\n         BE    OPS1                GET NEXT KEYWORD\n         CLI   0(R3),C' '\n         BE    CSK3\n         LR    R1,R3\nCSK6     BXLE  R3,R4,CSK7\n         B     CSK8\nCSK7     CLI   0(R3),C' '\n         BE    CSK8\n         CLI   0(R3),C')'\n         BNE   CSK6\nCSK8     LR    R14,R3\n         SR    R14,R1\n         BNP   ERR48\n         CH    R14,=H'8'\n         BH    ERR48\n         BCTR  R14,0\n         L     R15,TBSKP           STORE IN SKIP TABLE\nCSK9     CLI   0(R15),FMOFF\n         BE    CSK10\n         LA    R15,8(R15)\n         B     CSK9\nCSK10    LA    R0,8(R15)\n         CL    R0,TBSKPE\n         BL    CSK11\n         XR    R15,R15\n         B     ERR49\nCSK11    MVI   0(R15),C' '\n         MVC   1(7,R15),0(R15)\n         EX    R14,CSKMV\n         MVI   8(R15),FMOFF        SET FINAL MARKER\n         CLR   R3,R5\n         BNH   CSK5\n         B     CSK4\nCSKMV    MVC   0(*-*,R15),0(R1)\n         SPACE 1\n*        READ BYPASS RACF NAMES.\n         SPACE 1\nOP0      LM    R3,R5,SCIN          START SCAN INPUT CARD\n         CLI   0(R3),C' '          SEARCH START OF KEYWORD\n         BNE   OP2\nOP1      BXLE  R3,R4,*-8\n        $READ  MF=(E,RDIPLS)       GET NEXT CARD\n         LTR   R15,R15\n         BM    OPECC               END OF CONTROL CARDS\n         BZ    OP0                 NEXT\n         B     ERR21\nOP2      CLC   0(7,R3),=CL7'BYPRACF'    BYPRACF REQUEST?\n         BNE   OPA2                NO\n        @OUT   PRCAR               PRINT INPUT CARD\n         LA    R3,6(R3)            SKIP, SEARCH WHICH NAMES\n         BXLE  R3,R4,OP3\n         BAS   R14,OPCONT\nOP3      CLI   0(R3),C' '\n         BNE   OP4\n         BXLE  R3,R4,OP3\n         BAS   R14,OPCONT\n         B     OP3\nOP4      CLI   0(R3),C'('\n         BNE   OERR\nOP5      BXLE  R3,R4,OP6+L'OP6\nOP6      BAS   R14,OPCONT\n         CLI   0(R3),C')'\n         BE    OP1                 GET NEXT KEYWORD\n         CLI   0(R3),C' '\n         BE    OP5\n         CLI   0(R3),C'/'\n         BE    ERR53               NOT ACCEPTED HERE\nOP7      LR    R1,R3\nOP8      BXLE  R3,R4,OP9\n         B     OP10\nOP9      CLI   0(R3),C' '\n         BE    OP10\n         CLI   0(R3),C'/'\n         BE    OP10\n         CLI   0(R3),C')'\n         BNE   OP8\nOP10     LR    R14,R3\n         SR    R14,R1\n         BNP   ERR53\n         CH    R14,=H'44'\n         BH    ERR53\n         BCTR  R14,0\n         L     R15,TBBYR           STORE IN BYPASS RACF TABLE\n         USING BYPRDS,R15\n         XR    R2,R2\nOP11     CLI   BYPRLG,FMON\n         BE    OP12\n         IC    R2,BYPRLG\n         LA    R15,BYPRPX+1(R2)\n         B     OP11\nOP12     LA    R0,BYPRPX+1(R14)\n         CL    R0,TBBYRE\n         BL    OP13\n         XR    R15,R15\n         B     ERR54\nOP13     STC   R14,BYPRLG\n         XC    BYPRDC(L'BYPRDC+L'BYPRFL+L'BYPRGC),BYPRDC\n         EX    R14,OPMV\n         LR    R2,R15              RETAIN ENTRY IF NECESSARY\n         LR    R15,R0\n         MVI   BYPRLG,FMON         SET FINAL MARKER\n         CLR   R3,R5\n         BH    OP15\nOP14     CLI   0(R3),C' '\n         BNE   OP16\n         BXLE  R3,R4,OP14\nOP15     BAS   R14,OPCONT\n         B     OP14\nOPMV     MVC   BYPRPX(*-*),0(R1)   << EXECUTED >>\n         DROP  R15\nOP16     CLI   0(R3),C')'\n         BE    OP1\n         CLI   0(R3),C'/'\n         BNE   OP7\nOP17     BXLE  R3,R4,*+L'*+4\n         BAS   R14,OPCONT\n         CLI   0(R3),C' '\n         BE    OP17\n         CLI   0(R3),C')'\n         BE    ERR53               NOT ACCEPTED HERE\n         CLI   0(R3),C'/'\n         BE    ERR53               NOT ACCEPTED HERE\n         CLI   0(R3),C'N'          NOLIST REQUESTED?\n         BE    OP18                YES\n         CLI   0(R3),C'S'          SKIP REQUESTED?\n         BNE   ERR53               NO, SYNTAX ERROR\n         USING BYPRDS,R2\n         OI    BYPRFL,BYPRS        SET SKIP\n         B     OPSC\nOP18     OI    BYPRFL,BYPRL        SET NOLIST\n         DROP  R2\nOPSC     BXLE  R3,R4,*+L'*+4\n         B     OP6\n         CLI   0(R3),C' '\n         BE    OP5\n         CLI   0(R3),C')'\n         BE    OP1\n         CLI   0(R3),C'/'\n         BE    ERR53               NOT ACCEPTED HERE\n         B     OPSC\n         SPACE 1\n*        READ ACCOUNT REQUIREMENTS.\n         SPACE 1\nOPA0     LM    R3,R5,SCIN          SET TO SCAN INPUT CARD\n         CLI   0(R3),C' '          SEARCH START OF A KEYWORD\n         BNE   OPA2\nOPA1     BXLE  R3,R4,*-8\n        $READ  MF=(E,RDIPLS)       GET NEXT CARD\n         LTR   R15,R15\n         BM    OPECC               END OF CONTROL CARDS\n         BZ    OPA0                NEXT\n         B     ERR21\nOPA2     CLC   0(7,R3),=CL7'ACCOUNT'    IS IT 'ACCOUNT' KEYWORD?\n         BNE   OPZ90               NO\n        @OUT   PRCAR               PRINT INPUT CARD\n         LA    R3,6(R3)\nOPASW    NOP   OPA3\n         OI    OPASW+1,ON\n         L     R6,DALIST\n         USING DYNLIST,R6\n         LA    R1,LINE+20\n         ST    R1,LISCAN\nOPA3     BXLE  R3,R4,OPA4\n         BAS   R14,OPCONT\nOPA4     CLI   0(R3),C' '          SEARCH START OF ARGUMENT\n         BE    OPA3\n         CLI   0(R3),C'*'\n         BE    OPB0\n         CLI   0(R3),C'('\n         BNE   OERR\nOPA5     BXLE  R3,R4,OPA6\n         BAS   R14,OPCONT\nOPA6     CLI   0(R3),C' '          SEARCH START OF PO-DSNAME\n         BE    OPA5\n         CLI   0(R3),C')'\n         BE    OPA1\n         CLI   0(R3),C'/'\n         BNE   OPA7\n         CLI   DSNAME,C' '\n         BNE   OPA13               PO-DSNAME AS PREVIOUS\n         B     OERR\nOPA7     MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         LA    R0,WORKDS+L'WORKDS\n         LA    R1,WORKDS\nOPA8     CLI   0(R3),C'/'\n         BE    OPA9\n         CLI   0(R3),C' '\n         BE    OPA9\n         CLR   R1,R0\n         BNL   OERR\n         MVC   0(1,R1),0(R3)       GET PO-DSNAME\n         LA    R1,1(R1)\n         BXLE  R3,R4,OPA8\n         BAS   R14,OPCONT\nOPA9     CLC   DSNAME,WORKDS       SAME AS PREVIOUS?\n         BE    OPA12               YES\n         TM    WHAT,WHPDSA         FIRST TIME?\n         BZ    OPA10               YES\n         NI    WHAT,255-WHPDSO     NO, CLOSE AND FREE PREVIOUS\n        $MCLOSE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR26\n         NI    WHAT,255-WHPDSA\n         XC    DSNAME,DSNAME\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    OPA10\n         ICM   R1,B'1111',=CL4'FREE'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR26\nOPA10    MVC   DSNAME,WORKDS\n         B     OPA12\nOPA11    BAS   R14,OPCONT\nOPA12    CLI   0(R3),C'/'\n         BE    OPA13\n         CLI   0(R3),C' '\n         BNE   OERR\n         BXLE  R3,R4,OPA12\n         B     OPA11\nOPA13    BXLE  R3,R4,OPA14\n         BAS   R14,OPCONT\nOPA14    CLI   0(R3),C' '          SEARCH START OF NAME\n         BE    OPA13\n         OI    OERRSW+1,ON\nOPA15    LA    R0,9\n         LR    R1,R3\nOPA16    CLI   0(R3),C' '\n         BE    OPA17\n         CLI   0(R3),C')'\n         BE    OPA17\n         BCT   R0,*+L'*+4\n         B     OERRSW              > 8 CHAR. LONG\n         BXLE  R3,R4,OPA16\nOPA17    LR    R14,R3\n         SR    R14,R1\n         BZ    OPA1                THAT'S ALL FOLKS\n         TM    RUNOPT,RUNOACC      ACCOUNTING PROCESSING SUPPRESS?\n         BO    OPA20               YES\n         BCTR  R14,0\n         STC   R14,MBNMEL\n         MVC   MBNME,=CL8' '\n         EX    R14,OPAMMV          GET MEMBER NAME\n         TM    WHAT,WHPDSA         ALLOCATED?\n         BO    OPA18               YES\n         MVC   DDNAME(6),=CL6'SYSPDS'\n         MVC   DSSTATUS(3),=CL3'SHR'\n         MVC   DSNDISP(4),=CL4'KEEP'\n         MVC   DSADISP(4),=CL4'KEEP'\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    OPAOK\n         ICM   R1,B'1111',=CL4'ALL.'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR23\nOPAMMV   MVC   MBNME(*-*),0(R1)    << EXECUTED >>\nOPAOK    OI    WHAT,WHPDSA\n        $MOPEN MF=(E,MOPPLS)       OPEN PARTITIONNED\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR23\n         OI    WHAT,WHPDSO\nOPA18    MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE+9(8),MBNME     SET MEMBER NAME\n         MVI   LINE+18,C':'\n        $MFIND MF=(E,OPAMF)        FIND MEMBER IN DATA-SET\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR24\nOPA19   $MREAD MF=(E,MRDPLS)       READ CARD FROM MEMBER\n         LTR   R15,R15\n         BM    OPA20               END OF FILE?\n         BNZ   ERR25\n        @OUT   LINE\n        @X     B002                ACCOUNTING REQUESTS\n         MVC   LINE+1(L'LINE-1),LINE\n         B     OPA19               TO NEXT MEMBER CARD\nOPA20    CLR   R3,R5               CARD SCAN ENDED?\n         BNH   OPA22               NO\nOPA21    BAS   R14,OPCONT\nOPA22    CLI   0(R3),C')'          END OF NAMES?\n         BE    OPA1                YES\n         CLI   0(R3),C' '\n         BNE   OPA23               TO NEXT NAME IF ANY\n         BXLE  R3,R4,OPA22\n         B     OPA21\nOPA23    NI    OERRSW+1,OFF\n         B     OPA15\n         DROP  R6\nOPB0     MVI   LINE,C' '           ACC. REQ. ARE IN-STREAM\n         MVC   LINE+1(L'LINE-1),LINE\nOPB1     BXLE  R3,R4,OPB2\n         B     OPB4\nOPB2     CLI   0(R3),C' '\n         BE    OPB1\n         LR    R1,R3\n         S     R1,SCIN\n         LA    R15,LINE+20(R1)\n         LA    R14,79\n         SR    R14,R1\n         EX    R14,OPBMV\n         B     OPB7\nOPBMV    MVC   0(*-*,R15),0(R3)\nOPB3     MVC   LINE+1(L'LINE-1),LINE\nOPB4    $READ  MF=(E,OPARD)\n         LTR   R15,R15\n         BM    OPBERR\n         BNZ   ERR21\n         LA    R1,LINE+20\n         LA    R14,1\n         LA    R15,71(R1)\nOPB5     CLI   0(R1),C' '          LOOK IF END OF ACC. REQ.\n         BNE   OPB6\n         BXLE  R1,R14,OPB5\n         B     OPB4\nOPB6     CLC   0(7,R1),=CL7'ACCOUNT'\n         BE    OPB8\n         CLC   0(6,R1),=CL6'EL.VOL'\n         BE    OPB8\n        @OUT   LINE\nOPB7    @X     B002                ACCOUNTING REQUESTS\n         B     OPB3\nOPB8     MVC   CARDIN(L'CARDIN),LINE+20\n         LA    R3,LINE+20\n         SR    R1,R3\n         LA    R3,CARDIN(R1)\n         B     OPA2\nOPBERR   LA    R1,OPBERRM\n         B     OPNERR\nOPCONT   ST    R14,SVRETO          CONTINUATION\n        $READ  MF=(E,RDIPLS)       READ NEXT CARD\n         LTR   R15,R15             TEST RETURN CODE\n         BM    OPTERR\n         BNZ   ERR21\n        @OUT   PRCAR               PRINT INPUT CARD\n         LM    R3,R5,SCIN          SET TO SCAN INPUT CARD\n         L     R14,SVRETO\n         BR    R14                 GO BACK\nOPTERR   LA    R1,OPTERRM\n         B     OPNERR\nOERRSW   B     OERR\n        @OUT   PRCAR               REPEAT FOR DIAGNOSE\nOERR     MVI   CARDIN,C' '\n         MVC   CARDIN+1(L'CARDIN-1),CARDIN\n         MVI   0(R3),C'$'          POSITION OF ERROR\n        @OUT   PRCAR\n         LA    R1,OPERR            STATEMENT ERROR\nOPNERR  @OUT   (R1)\n         XR    R15,R15\n         B     ERR22\nOPECC   $RCLOSE\n        @OUT   ONINPUT\n         NI    WHAT,255-WHIN\n         B     ERR21\nOPZ90    TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    OPZ99               YES\n         TM    RUNOPT,RUNOACC      ACCOUNTING PROCESSING SUPPRESS?\n         BO    OPZ99               YES\n         TM    ACCIND,AFVOL        ACCOUNTING VOLUME(S)?\n         BO    OPZ99               YES\n        @OUT   DSACCM\n         OI    RUNOPT,RUNOACC      SET NO ACCOUNT\nOPZ99   @XE\n         EJECT\nSVRETO   DC    F'0'\nOPAMF   $MFIND MBNME,MF=L\nOPARD   $READ  ,MF=L\n         SPACE 1\nMBNMEL   DC    AL1(*-*)\nMBNME    DC    CL8' '\n         DC    AL1(L'ONINPUT)\nONINPUT  DC    C'0===== INPUT CONTROL MISSING ====='\n         DC    AL1(L'OPERR)\nOPERR    DC    C' ===== SYNTAX ERROR ====='\n         DC    AL1(L'OPTERRM)\nOPTERRM  DC    C' ===== CONTINUATION MISSING ====='\n         DC    AL1(L'OPBERRM)\nOPBERRM  DC    C' ===== ACCOUNTING REQ. STATEMENT MISSING ====='\n         DC    AL1(L'DSACCM)\nDSACCM   DC    C' ===== ACCOUNTING SUPPRESSED ====='\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n        #BYPRDS\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA003": {"ttr": 7425, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x01I\\x01I\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 329, "newlines": 329, "modlines": 0, "user": "SYSPAJA"}, "text": "A003     TITLE 'CLEAN-UP - READ EL. AND CAT. VOLUMES NAMES (A003).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA003    @XS    ALIAS=RVNAMES\n*        GET ELIGIBLE VOLUMES.\n         SPACE 1\n         L     R2,TBEVOL           ADDRESS OF EL. VOL. TABLE\n         XR    R15,R15\n         B     GEV1\nGEV0    $READ  MF=(E,RDIPLS)\n         LTR   R15,R15\n         BM    ERR2                EOF\n         BNZ   ERR21               ERROR\nGEV1     LM    R3,R5,SCIN          SET TO SCAN INPUT BUFFER\nGEVSW1   NOP   GEV5\n         CLI   0(R3),C' '          LOOK FOR FIRST NON-BLANK\n         BNE   GEVSW2\nGEV2     BXLE  R3,R4,*-8\n         B     GEV0\nGEVSW2   NOP   GEV4\n         CLC   0(6,R3),=CL6'EL.VOL'     IS IT 'EL.VOL' KEYWORD?\n         BNE   GEVSW3              NO, MAY BE ERROR\n         OI    GEVSW3+1,ON\n         LA    R3,5(R3)\n         CLI   1(R3),C'.'\n         BNE   GEV3\n         LA    R3,1(R3)\nGEV3     OI    GEVSW2+1,ON\n         B     GEV2\nGEV4     CLI   0(R3),C'('          START OF NAMES?\n         BNE   ERR2                NO, ERROR\n         OI    GEVSW1+1,ON\n         BXLE  R3,R4,GEV5\n         B     GEV0\nGEVSW3   NOP   GEV12\n         B     ERR2\nGEV5     CLI   0(R3),C' '          LOOK FOR FIRST NON-BLANK\n         BNE   GEV6\n         BXLE  R3,R4,GEV5\n         B     GEV0\nGEV6     LR    R1,R3               SAVE STARTING POINTER\n         LA    R0,7                MAX. LENGTH + 1 TO CONTROL\nGEV7     CLI   0(R3),C' '          LOOK FOR FIRST BLANK\n         BE    GEV9\n         CLI   0(R3),C')'          END OF NAMES?\n         BE    GEV9                YES\n         BCT   R0,GEV8\n         XR    R15,R15             > 6 CHAR. LONG\n         B     ERR3\nGEV8     BXLE  R3,R4,GEV7\nGEV9     LR    R15,R3              COMPUTE VOL. SER. LENGTH\n         SR    R15,R1\n         BZ    GEV11               THIS IS THE END OF NAMES\n         BCTR  R15,0               -1 FOR MOVE\n         LA    R14,2(R15,R2)       COMPUTE SPACE IN TABLE\n         CL    R14,TBEVOLE         ANY OVERFLOW?\n         BL    GEV10               NO\n         XR    R15,R15             YES\n         B     ERR4\nGEV10    STC   R15,0(R2)           STORE IN TABLE\n         EX    R15,GEVMV           MOVE VOLUME PREFIX TO TABLE\n         LR    R2,R14              ADVANCE IN TABLE\n         MVI   0(R2),FMON          SET FINAL MARKER\n         CLR   R3,R5               CARD SCAN ENDED?\n         BH    GEV0                YES\n         B     GEV5                GET NEXT VOLUME\nGEVMV    MVC   1(*-*,R2),0(R1)     << EXECUTED >>\nGEV11    NI    GEVSW1+1,OFF\n         NI    GEVSW2+1,OFF\n         B     GEV2\nGEV12    CL    R2,TBEVOL           EMPTY EL. VOL. TABLE?\n         BH    GCV0                NO\n         XR    R15,R15             YES\n         B     ERR5\n         SPACE 1\n*        GET CATALOG VOLUMES.\n         SPACE 1\nGCV0     L     R2,TBCVOL           ADDRESS OF CAT. VOL. TABLE\n         XR    R15,R15\n         B     GCV2\nGCV1    $READ  MF=(E,RDIPLS)\n         LTR   R15,R15\n         BM    GCV41               EOF\n         BNZ   ERR21               OK\nGCV2     LM    R3,R5,SCIN          SET TO SCAN INPUT BUFFER\nGCVSW1   NOP   GCV6\n         CLI   0(R3),C' '          LOOK FOR FIRST NON-BLANK\n         BNE   GCVSW2\nGCV3     BXLE  R3,R4,*-8\n         B     GCV1\nGCVSW2   NOP   GCV5\n         CLC   0(7,R3),=CL7'CAT.VOL'    IS IT 'CAT.VOL' KEYWORD?\n         BNE   GCVSW3              NO, MAY BE ERROR\n         NI    GCVSW3+1,OFF\n         LA    R3,6(R3)\n         CLI   1(R3),C'.'\n         BNE   GCV4\n         LA    R3,1(R3)\nGCV4     OI    GCVSW2+1,ON\n         B     GCV3\nGCV5     CLI   0(R3),C'('          START OF NAMES?\n         BNE   ERR6                NO, ERROR\n         OI    GCVSW1+1,ON\n         BXLE  R3,R4,GCV6\n         B     GCV1\nGCVSW3   B     ERR6\n         OI    WHAT,WHCD           INDICATE \"SYSIN\" CARD ALREADY READ\n         B     GCV44\nGCV6     CLI   0(R3),C' '          LOOK FOR FIRST NON-BLANK\n         BNE   GCV7\n         BXLE  R3,R4,GCV6\n         B     GCV1\nGCV7     LR    R1,R3               SAVE STARTING POINTER\n         LA    R0,7                MAX. LENGTH + 1 TO CONTROL\nGCV8     CLI   0(R3),C' '          LOOK FOR FIRST BLANK?\n         BE    GCV11               YES\n         CLI   0(R3),C'/'          FOLLOWED BY A DS-NAME?\n         BE    GCV11               YES\n         CLI   0(R3),C')'          END OF NAMES?\n         BE    GCV11               YES\n         BCT   R0,GCV10\nGCV9     XR    R15,R15             > 6 CHAR. LONG\n         B     ERR7\nGCV10    BXLE  R3,R4,GCV8\nGCV11    CH    R0,=H'7'            END OF NAMES?\n         BE    GCV40               YES\n         CH    R0,=H'1'            CONTROL VOL. SER. LENGTH\n         BNE   GCV9                < 6 CHAR. LONG\n         MVC   WORKD(L'CVLVOL),0(R1)    RETAIN CATALOG VOLUME\n         MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         CLI   0(R3),C' '          WAS IT A BLANK?\n         BNE   *+L'*+8             NO\n         BXLE  R3,R4,*-8           YES, SEARCH AHEAD\n         B     GCV14               THIS IS THE END OF CARD\n         CLI   0(R3),C')'          END OF NAMES?\n         BE    GCV14               YES\n         CLI   0(R3),C'/'          A DS-NAME FOLLOWS?\n         BNE   GCV14               NO\n         BXLE  R3,R4,*+L'*+4       YES, SEARCH IT\n         B     GCV42               END OF CARD ERROR\n         CLI   0(R3),C' '          IS IT A BLANK?\n         BE    *-12                YES\n         CLI   0(R3),C')'          NO, END OF NAMES?\n         BE    GCV14               YES\n         LR    R1,R3               NO, START OF DS-NAME\nGCV12    BXLE  R3,R4,*+L'*+4\n         B     GCV13               END OF CARD AND DS-NAME\n         CLI   0(R3),C' '          END OF DS-NAME?\n         BE    *+L'*+8             YES\n         CLI   0(R3),C')'          END OF CARD?\n         BNE   GCV12               NO, CONTINUE\nGCV13    LR    R14,R3              GET THE DS-NAME\n         SR    R14,R1\n         BNP   GCV42\n         CH    R14,=Y(L'CVLNME)\n         BH    GCV42\n         BCTR  R14,0\n         EX    R14,GCVMV\n         B     GCV15\nGCVMV    MVC   WORKDS(*-*),0(R1)   << EXECUTED >>\nGCV14    MVC   WORKDS(9),=CL9'SYSCTLG.V'     SET O.S. CATALOG DS-NAME\n         MVC   WORKDS+9(L'CVLVOL),WORKD\nGCV15    LA    R14,CVLL(R2)        COMPUTE SPACE IN TABLE\n         CL    R14,TBCVOLE         ANY OVERFLOW?\n         BL    GCV30               NO\n         XR    R15,R15             YES\n         B     ERR8\n         USING CVLT,R2\nGCV30    MVC   CVLVOL(L'CVLVOL),WORKD   MOVE CATALOG VOLUME TO TABLE\n         MVC   CVLNME,WORKDS       MOVE CATALOG DS.NAME\n         MVI   CVLIND,0            RESET INDICATORS\n         MVI   CVLPWL,0            RESET PASSWORD FIELDS\n         XC    CVLPW,CVLPW\n         CLC   CVLNME(9),=CL9'SYSCTLG.V'     O.S. CATALOG?\n         BE    *+L'*+4             YES\n         OI    CVLIND,CVLICF       SAY ICF CATALOG\n         DROP  R2\n         LR    R2,R14              ADVANCE IN TABLE\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         CLR   R3,R5               CARD SCAN ENDED?\n         BH    GCV1                YES\n         B     GCV6                GO GET NEXT ONE\nGCV40    NI    GCVSW1+1,OFF\n         NI    GCVSW2+1,OFF\n         B     GCV3\nGCV41    TM    GCVSW3+1,ON\n         BZ    GCV43\nGCV42    XR    R15,R15\n         B     ERR6\nGCV43    OI    WHAT,WHEOF          INDICATE \"SYSIN\" END-OF-FILE\nGCV44    CL    R2,TBCVOL           EMPTY CAT. VOL. TABLE?\n         BH    GPV0                NO\n         SPACE 1\n*        NO CATALOGS TO BE PROCESSED SITUATION MAY BE ACCEPTED\n*        WHEN ONLY THE TEMPORARY STORAGES ARE TO BE CLEANED,\n*        OR THE ONLY OPTION HAS BEEN REQUESTED.\n         SPACE 1\n         TM    STATUS,STONLY       ONLY REQUESTED?\n         BO    GPV0                YES\n         TM    RUNIND,RUNORACF     BYPASS RACF ACTION?\n         BZ    GCV19               NO, CAN'T BE ACCEPTED\n         TM    RUNOPT,RUNOACC      NO ACCOUNT?\n         BZ    GCV19               NO, CAN'T BE ACCEPTED\n         L     R4,TBEVOL           START OF EL. VOL. TABLE\n         LA    R2,L'TSTOR-1\nGCV17    XR    R1,R1\n         IC    R1,0(R4)            GET LENGTH OF NAME\n         LA    R3,1(R4)            START ADDRESS OF COMPARE\n         LA    R4,2(R1,R4)         NEXT EL. VOL. IN TABLE\nGCV18    CLR   R1,R2               WHAT ABOUT THE LENGTH?\n         BL    GCV19               SHORT, CAN'T BE ACCEPTED\n         CLC   TSTOR(L'TSTOR),0(R3)     TEMPORARY STORAGE?\n         BE    GCV20               YES\n         LA    R3,1(R3)            BUMP COMPARE ADDRESS\n         BCT   R1,GCV18            GO TRY AGAIN\nGCV19    XR    R15,R15             CAN'T BE ACCEPTED\n         B     ERR9\nGCV20    CLI   0(R4),FMON          END OF TABLE?\n         BNE   GCV17               NO, CONTINUE\n         SPACE 1\n*        LIST EL. VOL. AND CAT. VOL. TABLES.\n         SPACE 1\nGPV0    @OUT   VOLCH,,U\n         L     R2,TBEVOL\nGPV1     LA    R4,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R0,10               MAX. BY LINE\nGPV2     CLI   0(R2),FMON          LAST ENTRY?\n         BE    GPV6                YES\n         XR    R3,R3               CLEAR REGISTER\n         IC    R3,0(R2)            GET LENGTH OF NAME\n         EX    R3,GPVMV            MOVE TO PRINT LINE\n         LA    R1,5(R4)            REPLACE BLANKS IN LINE\nGPV3     CLI   0(R1),C' '          BLANK?\n         BNE   GPV4                NO\n         MVI   0(R1),C'-'          REPLACE\n         BCT   R1,GPV3             AND LOOP\nGPV4     LA    R2,2(R2,R3)         ADVANCE IN TABLE\n         BCT   R0,GPV5\n         B     GPV6\nGPVMV    MVC   0(*-*,R4),1(R2)     << EXECUTED >>\nGPV5     LA    R4,L'CVLVOL+4(R4)   ADVANCE IN LINE\n         B     GPV2\nGPV6     CLI   LINE+6,C' '         ANYTHING IN LINE?\n         BE    GPV10               NO\n        @OUT   LINE\n         CLI   0(R2),FMON          LAST ENTRY?\n         BNE   GPV1                NO, CONTINUE\nGPV10    L     R2,TBCVOL\n         CLI   0(R2),FMOFF         EMPTY CAT.VOL. TABLE?\n         BE    GPV99               YES\n        @OUT   CATTIT,,U\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         MVI   LINE+L'CVLVOL+7,C'-'\n         USING CVLT,R2\nGPV11    MVC   LINE+6(L'CVLVOL),CVLVOL  MOVE VOLID IN LINE\n         MVC   LINE+L'CVLVOL+9(L'CVLNME),CVLNME   MOVE DS-NAME IN LINE\n         TM    CVLIND,CVLICF       CATALOG TYPE IS ICF?\n         BO    *+L'*+6             YES\n         MVC   LINE+L'CVLVOL+16(10),LINE+L'CVLVOL+30   NO, O.S.\n         DROP  R2\n        @OUT   LINE\n         LA    R2,CVLL(R2)         ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         LAST ENTRY?\n         BNE   GPV11               NO, CONTINUE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         SPACE 1\n*        PASS TO O.S. EVENTUAL COMMANDS.\n         SPACE 1\nGPV99    L     R2,ATIOT            LOOK IF COMMANDS INPUT FILE.\n         USING TIODSECT,R2\n         XR    R1,R1\nSCMD1    CLC   TIOELNGH(4),=XL4'0'\n         BE    SCMD99\n         CLC   TIOEDDNM,DDCMD\n         BE    SCMD2\n         IC    R1,TIOELNGH\n         AR    R2,R1\n         B     SCMD1\n         DROP  R2\nSCMD2   $READ  MF=(E,SCMDPLS)      GET A COMMAND.\n         LTR   R15,R15\n         BM    SCMD99\n         BNZ   ERR40\n         CLI   CMND,C'*'           COMMENT?\n         BE    SCMD2               YES, BYPASS\n        ZEROKEY\n         XR    R0,R0               PASS IT TO O.S.\n         XR    R15,R15\n        MGCR   SCMND\n         LR    R2,R15\n        RESETKEY\n         ORG   *-4                 OVERLAP AUTHORIZATION OFF.\n         LTR   R2,R2               RETURN CODE?\n         BZ    SCMD2               OK, GET ANOTHER IF ANY.\n         CVD   R2,WORKD            DISPLAY R.C. AND TEXT.\n         UNPK  CMNDRJ+L'CMNDRJ-6(2),WORKD+6(2)\n         OI    CMNDRJ+L'CMNDRJ-5,C'0'\n         MVC   CMNDRJT(L'CMNDRJT),CMND\n        @OUT   CMNDRJ\n         B     SCMD2\nSCMD99  @XE\n         EJECT\nSCMDPLS $READ  CMND,DDCMD,MF=L\nDDCMD    DC    CL8'SYSCMD'         COMMANDS INPUT FILE.\nSCMND    DC    0F'0',AL2(L'CMND-8,0)\nCMND     DC    CL80' '\nTSTOR    DC    CL4'STOR'           TEMPORARY STORAGES PREFIX-SUFFIX\n         SPACE 1\n         DC    AL1(L'VOLCH)\nVOLCH    DC    C'0ELIGIBLE VOLUMES CHECK LIST :'\n         DC    AL1(CATTITL)\nCATTIT   DC    C'0VOLUMES CONTAINING A CATALOG '\n         DC    C'(MUST BE PRESENT) CHECK LIST :'\nCATTITL  EQU   *-CATTIT\n         DC    AL1(L'CMNDRJ+L'CMNDRJT)\nCMNDRJ   DC    C'0 --- COMMAND FAILED (RC=  ) : '\nCMNDRJT  DC    CL72' '\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLA004": {"ttr": 7431, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x00\\xd0\\x00\\xd0\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 208, "newlines": 208, "modlines": 0, "user": "SYSPAJA"}, "text": "A004     TITLE 'CLEAN-UP - ALLOCATE VOLUMES (A004).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA004    @XS    ALIAS=ALLOCV\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    CHC99               YES\n         SPACE 1\n*        LOOK UP UCB'S.\n         SPACE 1\n         L     R2,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R2\nALL1    $DARSCA MF=(E,ALLPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    ALL2                O.K.\n         CH    R15,=H'4'           END OF UCB'S?\n         BE    ALL14               YES\n         B     ERR10               NO, EXIT WITH CODE\n         SPACE 1\n*        CHECK IF THIS VOLUME WANTED.\n         SPACE 1\nALL2     L     R4,TBEVOL           START OF EL. VOL. TABLE\n         L     R3,ALLUCB           GET UCB ADDRESS\n         USING UCBDSECT,R3\nALL3     XR    R1,R1\n         IC    R1,0(R4)            GET LENGTH FOR COMPARE\n         EX    R1,ALLCL            IS THIS ONE?\n         BE    ALL10               YES\n         LA    R4,2(R1,R4)         ADVANCE IN EL. VOL. TABLE\n         CLI   0(R4),FMON          END OF TABLE?\n         BNE   ALL3                NO, CONTINUE\n         L     R1,TBDVOL           START OF NOT-D. VOL. TABLE\nALL4     CLI   0(R1),FMOFF         END OF TABLE?\n         BE    ALL5                YES\n         CLC   0(L'UCBVOLI,R1),UCBVOLI  IS THIS VOLUME?\n         BE    ALL1                YES, DON'T SET TWICE.\n         LA    R1,TBDVOLL(R1)\n         B     ALL4\nALL5     LA    R15,TBDVOLL(R1)     CONTROL NOT-D. VOL. TABLE\n         CL    R15,TBDVOLE         ANY OVERFLOW?\n         BL    ALL6                NO\n         XR    R15,R15             YES\n         B     ERR50\nALL6     MVC   0(L'UCBVOLI,R1),UCBVOLI  INSERT THIS VOLUME\n         MVI   0(R15),FMOFF        SET FINAL MARKER\nALLSW    NOP   ALL7\n        @OUT   ELMIS1,,U\n         OI    ALLSW+1,ON\n         LA    R6,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R5,10               MAX. BY LINE\nALL7     MVC   0(L'UCBVOLI,R6),UCBVOLI  MAY BE MISSING VOLUME\n         BCT   R5,ALL8\n        @OUT   LINE\n         LA    R6,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R5,10               MAX. BY LINE\n         B     ALL1\nALL8     LA    R6,10(R6)           ADVANCE IN LINE\n         B     ALL1\nALLCL    CLC   1(*-*,R4),UCBVOLI   << EXECUTED >>\n         SPACE 1\n*        BUILD DDNAME TABLE ENTRY.\n         SPACE 1\nALL10    L     R15,TBDDN           START OF DDNAME'S TABLE\nALL11    CLR   R15,R2              ANYTHING IN TABLE?\n         BNL   ALL12               NO\n         CLC   DDNVOL,UCBVOLI      IS THIS VOLSER?\n         BE    ALL1                YES, DON'T PROCESS TWICE.\n         LA    R15,DDNL(R15)\n         B     ALL11\nALL12    LA    R15,DDNL(R2)        CONTROL DDNAME'S TABLE\n         CL    R15,TBDDNE          ANY OVERFLOW?\n         BL    ALL13               NO\n         XR    R15,R15             YES\n         B     ERR11\nALL13    MVC   DDNNME(2),=C'VT'    PREFIX FOR DDNAME\n         MVC   DDNVOL,UCBVOLI      VOLSER\n         MVC   DDNDTY,UCBTYP       UCBTYPE\n         MVI   DDNALL,0\n        $DAUNTY DDNDTY+3,DDNUTY,MF=(E,ALLWORK)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR12               ERROR, EXIT WITH CODE\n         STC   R0,DDNLUT           LENGTH OF DDNUTY\n         LA    R2,DDNL(R2)         ADVANCE IN DDNAME'S TABLE\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         B     ALL1\n         DROP  R2,R3\nALL14    CL    R2,TBDDN            EMPTY DDNAME'S TABLE?\n         BH    ALL15               NO\n         XR    R15,R15             YES\n         B     ERR13\nALL15    TM    ALLSW+1,ON\n         BZ    ALL20\n         LA    R0,10\n         CLR   R0,R5               ANYTHING IN LINE?\n         BE    ALL20               NO\n        @OUT   LINE\n         SPACE 1\n*        ALLOCATE VOLUMES.\n         SPACE 1\nALL20    L     R2,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R2\nALL21    MVC   ALLDDN(L'DDNNME),DDNNME  DDNAME FOR ALLOCATION\n        $DAVALL ALLDDNL,DDNVOL,DDNLUT,MF=(E,ALLWORK)\n         LTR   R15,R15             TEST RETURN\n         BNZ   ALL22               ERROR\n         OI    DDNALL,DDNXA        SET ALLOCATED\n         LA    R2,DDNL(R2)         ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BNE   ALL21               NO, CONTINUE\n         B     ALL30\n         DROP  R2\nALL22    CH    R15,=H'12'          DYNALL ERROR?\n         BNE   ERR14               NO, OTHER\n        @OUT   (R1)                GET DIAGNOSE MESSAGE\n         LH    R15,=H'12'          RESTORE CC\n         B     ERR14               STOP, EXIT\n         SPACE 1\n*        LIST VOLUME'S ALLOCATION TABLE.\n         SPACE 1\nALL30   @OUT   TAVOL,,U\n         L     R2,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R2\nALL31    LA    R3,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R0,5                MAX. BY LINE\nALL32    CLI   0(R2),FMOFF         LAST ENTRY?\n         BE    ALL34               YES\n         MVC   0(L'DDNVOL,R3),DDNVOL    VOLSER\n         MVC   8(L'DDNUTY,R3),DDNUTY    UNIT TYPE\n         LA    R2,DDNL(R2)         ADVANCE IN TABLE\n         BCT   R0,ALL33\n         B     ALL34\nALL33    LA    R3,20(R3)           ADVANCE IN LINE\n         B     ALL32\nALL34    CLI   LINE+6,C' '         ANYTHING IN LINE?\n         BE    CHC0                NO\n        @OUT   LINE\n         CLI   0(R2),FMOFF         LAST ENTRY?\n         BNE   ALL31               NO, CONTINUE\n         DROP  R2\n         SPACE 1\n*        CHECK IF ALL CATALOG VOLUMES ARE ONLINE.\n         SPACE 1\nCHC0     L     R3,TBCVOL           START OF CAT. VOL. TABLE\n         USING CVLT,R3\nCHC1     CLI   0(R3),FMOFF         END OF TABLE?\n         BE    CHC10               YES\n         L     R2,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R2\nCHC2     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    CHCSW               YES\n         CLC   CVLVOL,DDNVOL       NO, VOLUME ALLOCATED?\n         BE    CHC5                YES, OK\n         DROP  R2\n         LA    R2,DDNL(R2)         ADVANCE IN DDNAME'S TABLE\n         B     CHC2\nCHCSW    NOP   CHC3\n        @OUT   CATMISS1,=PL2'+50',U\n        @OUT   SPACE\n         OI    CHCSW+1,ON\n         LA    R4,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R0,10               MAX. BY LINE\nCHC3     MVC   0(L'CVLVOL,R4),CVLVOL    MISSING VOLUME\n         OI    CVLIND,CVLMIS       INDICATE CATALOG VOL. MISSING\n         DROP  R3\n         BCT   R0,CHC4\n        @OUT   LINE\n         LA    R4,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R0,10               MAX. BY LINE\n         B     CHC5\nCHC4     LA    R4,L'CVLVOL+4(R4)   ADVANCE IN LINE\nCHC5     LA    R3,CVLL(R3)         ADVANCE IN CAT. VOL. TABLE\n         B     CHC1\nCHC10    TM    CHCSW+1,ON\n         BZ    CHC99\n         CLI   LINE+6,C' '         ANYTHING IN LINE?\n         BE    CHC11               NO\n        @OUT   LINE\nCHC11   @OUT   CATMISS2\n         OI    RUNIND,RUCATMIS     SET SWITCH\nCHC99   @XE\n         EJECT\nALLPLS  $DARSCA ALLUCB,MF=L\n         SPACE 1\nALLWORK  DC    3F'0'\nALLUCB   DC    F'0'\nALLDDNL  DC    XL1'8'\nALLDDN   DC    CL8' '\n         SPACE 1\n         DC    AL1(L'ELMIS1)\nELMIS1   DC    C'0NOT DECLARED AS ELIGIBLE VOLUME(S) :'\n         DC    AL1(L'TAVOL)\nTAVOL    DC    C'0ALLOCATED VOLUMES CHECK LIST :'\n         DC    AL1(L'CATMISS1)\nCATMISS1 DC    C'0MISSING CATALOG VOLUME(S) :'\n         DC    AL1(L'CATMISS2)\nCATMISS2 DC    C'0===== PROCESSING HIGHLY REDUCED DUE TO MISSING CATALOC\n               G(S) ====='\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA005": {"ttr": 7435, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x01\\x8f\\x01\\x8f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 399, "newlines": 399, "modlines": 0, "user": "SYSPAJA"}, "text": "A005     TITLE 'CLEAN-UP - READ VTOC''S CONTENTS (A005).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA005    @XS    ALIAS=RVTOCS\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    CHR99               YES\n        $VTOCQR VTRDBUF,ADDREC,MF=(L,RDVPLS)\n         SPACE 1\n*        READ (QUICK) VOLUMES VTOC'S CONTENTS.\n         SPACE 1\n         L     R2,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R2\n         L     R3,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R3          ESTABLISH ADDRESSABILITY\n         L     R5,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\nOPV0     TM    RUNOPT,RUNOACC      ACCOUNTING PROCESSING SUPPRESS?\n         BO    OPV3                YES\n         XR    R15,R15\n         L     R14,TBAVOL          ACC. VOL. TABLE ADDRESS\nOPV1     CLI   0(R14),FMON         END OF TABLE?\n         BE    OPV3                YES\n         IC    R15,0(R14)\n         EX    R15,OPVCL           VOLUME MATCH?\n         BE    OPV2                YES\n         LA    R14,2(R14,R15)      NEXT ENTRY IF ANY\n         B     OPV1\nOPVCL    CLC   DDNVOL(*-*),1(R14)  << EXECUTED >>\nOPV2     NI    RDVSW+1,OFF\n         LA    R14,DVTYP\n         B     OPV4\nOPV3     XR    R14,R14\nOPV4     MVC   VSNERR,DDNVOL\n        $VTOCQO DDNNME,(R14),MF=(E,OPVPLS)   OPEN VTOC\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR15               ERROR\n         OI    DDNALL,DDNXQ        SET OPENED\n         NI    RDVSWF4+1,OFF\n         XC    IXDSCB(INFLGTH),IXDSCB\nRDVSW    B     RDV1\n         XR    R4,R4\n        @X     B003                ACCOUNTING PROCESS (START)\nRDV1     LA    R4,VTRDBUF          ADRRESS VTOC READ BUFFER\n         USING DSCDSECT,R4         ESTABLISH ADDRESSABILITY\nRDV2    $VTOCQR MF=(E,RDVPLS)      READ RECORD\n         LTR   R15,R15             TEST RETURN CODE\n         BM    RDV10               LAST RECORD\n         BZ    RDV3\n         LTR   R0,R0               ERROR, IS IT AN IX VTOC?\n         BZ    ERR16               NO\n         STM   R15,R0,WORKD        YES, DISPLAY R0 (ERROR INFO)\n         UNPK  SUPERRM(9),WORKD+4(5)\n         TR    SUPERRM,TRTAB-X'F0'\n         MVI   SUPERRM+L'SUPERRM,C'.'\n        WTO    MF=(E,SUPERR)\n         LM    R15,R0,WORKD\n         B     ERR16\nRDV3     TM    RDVSW+1,ON\n         BO    RDV5\n         CLI   DS1FMTID,C'1'       IS THIS A FORMAT 1?\n         BE    RDV4                YES\n         CLI   DS4IDFMT,C'4'       IS THIS THE FORMAT 4?\n         BNE   RDV5                NO, GO FORWARD (NO INTEREST)\nRDV4     TM    RUNOPT,RUABORT      ACCOUNTING PROCESSING ABORTED?\n         BO    RDV5                YES\n        @X     B003                ACCOUNTING PROCESS (READ)\n         TM    RUNOPT,RUABORT      ABORT ACCOUNTING PROCESSING?\n         BZ    RDV5                NO\n         OI    RUNOPT,RUNOACC      YES, SAY SUPPRESSED\nRDV5     CLI   DS1FMTID,C'1'       IS THIS A FORMAT 1?\n         BE    RDV6                YES\n         CLI   DS4IDFMT,C'4'       IS THIS A FORMAT 4?\n         BE    RDVSWF4             YES\n         CLI   DS2FMTID,C'2'       IS THIS A FORMAT 2?\n         BE    RDV2                YES, GET NEXT ONE (NO INTEREST)\n         CLI   DS3FMTID,C'3'       IS THIS A FORMAT 3?\n         BE    RDV2                YES, GET NEXT ONE (NO INTEREST)\n         CLI   DS5FMTID,C'5'       IS THIS A FORMAT 5?\n         BE    RDV2                YES, GET NEXT ONE (NO INTEREST)\n         CLI   DS6FMTID,C'6'       IS THIS A FORMAT 6?\n         BE    RDV2                YES, GET NEXT ONE (NO INTEREST)\n         LH    R1,FDSCB            UPDATE FREE DSCB'S COUNT\n         AH    R1,=H'1'\n         STH   R1,FDSCB\n         B     RDV2                GET NEXT ONE\nRDVSWF4  NOP   ERR74               MORE THAN ONE FMT 4 ...\n         OI    RDVSWF4+1,ON\n         MVC   VTIND(L'VTIND),DS4VTOCI  GET VTOC INDICATORS\n         MVC   VFDSCB,DS4DSREC     GET VTOC FREE DSCB'S\n         B     RDV2                GET NEXT ONE\nRDV6     BCT   R5,*+L'*+6          CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\n         XC    0(DSTABL,R3),0(R3)  CLEAR\n         MVC   DSNME,DS1DSNAM      GET DSNAME\n         MVC   DSCBCC,ADDREC       SET ADDRESS OF DSCB1\n         MVC   DSDDN,DDNNME        SET DDNAME + VOLSER\n         MVC   DSUCBTY,DDNDTY      SET UCB TYPE\n         CLI   DS1EXT1,0           IS MODEL GDG DSCB?\n         BNE   SPP1                NO\n         MVI   DSUSE,XUM           INDICATE MODEL GDG\n         B     SPP2\n         SPACE 1\n*        SPECIAL PROCESS FOR SYSCTLG DATA-SETS (O.S. CATALOGS),\n*        THIS BECAUSE RACF USES THE NAME 'SYSCTLG.V------',\n*        WHERE V------ IS THE VOLUME SERIAL NUMBER.\n         SPACE 1\nSPP1     CLC   DSNME(8),=CL8'SYSCTLG '  O.S. CATALOG DATA-SET?\n         BNE   SPP2                NO\n         MVC   DSNME+7(2),=C'.V'   CONSTRUCT NAME FOR RACF\n         MVC   DSNME+9(6),DSVOLSN\n         MVI   DSCAT,XCSL          SET AS L-CAT CATALOGED\n         OI    DDNALL,DDNCT        INDICATE O.S. CATALOG PRESENT\n         BAS   R14,SPP10           SCAN CAT. VOL. TABLE\nSPP2     TM    DS1DSIND,DS1IND40   RACF PROTECTED?\n         BZ    *+L'*+4             NO\n         MVI   DSPROT,XPR          INDICATE RACF PROTECTED\n         TM    DS1DSORG+1,DS1ACBM  VSAM FILE?\n         BZ    SPP4                NO\n         TM    DS1DSORG,DS1DSGIS+DS1DSGPS+DS1DSGDA+DS1DSGPO\n         BZ    SPP3                OK, NO OTHER ORG. BITS\n         MVI   DSACTION,YM         WHAT'S THAT - SIGNAL CONTROL\n         MVC   VTOEVOL,DSVOLSN\n         MVC   VTOEDSN,DS1DSNAM\n        @OUT   VTOERR\n         B     SPP4\nSPP3     MVI   DSTYPE,XTV          INDICATE VSAM DATA-SET\n         TM    DS1OPTCD,DS1OPTIC+DS1OPTBC    ICF CATALOG ?\n         BNO   SPP4                NO\n         CLC   DSNME(9),=CL9'CATINDEX.' IS IT THE INDEX?\n         BE    SPP4                YES\n         OI    DDNALL,DDNCI        INDICATE ICF CATALOG PRESENT\n         BAS   R14,SPP10           SCAN CAT. VOL. TABLE\nSPP4     LA    R3,DSTABL(R3)       ADVANCE IN TABLE\n         MVI   0(R3),FMOFF         SET FINAL MARKER\n         B     RDV2                CONTINUE\n         DROP  R4\nSPP10    L     R15,TBCVOL          START OF CAT. VOL. TABLE\nSPP11    CLI   0(R15),FMOFF        END OF TABLE?\n         BER   R14                 YES\n         USING CVLT,R15\n         TM    CVLIND,CVLCTP       CATALOG ALREADY PRESENT?\n         BO    SPP12               YES\n         CLC   CVLVOL,DDNVOL       THIS VOLUME?\n         BNE   SPP12               NO\n         CLC   CVLNME,DSNME        YES, THIS DATA-SET NAME?\n         BNE   SPP12               NO\n         OI    CVLIND,CVLCTP       INDICATE CATALOG PRESENT\n         BR    R14\n         DROP  R15\nSPP12    LA    R15,CVLL(R15)       ADVANCE IN CAT. VOL. TABLE\n         B     SPP11\n         DROP  R3\nRDV10    LTR   R1,R0               INDEXED VTOC INFO'S?\n         BZ    *+L'*+6             NO, NORMAL VTOC\n         MVC   IXDSCB(L'IXDSCB+L'IXVIRS),0(R1)    GET IX FREE INFO'S\n         TM    RDVSW+1,ON\n         BO    RDV11\n         OI    RDVSW+1,ON\n         XR    R4,R4\n         BCTR  R4,0\n        @X     B003                ACCOUNTING PROCESS (END)\nRDV11    NI    DDNALL,255-DDNXQ    SET CLOSED\n        $VTOCQC\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR18               ERROR\n         MVC   VSNERR,=CL6' '\n         TM    RUNIND,RUNOLIST\n         BO    RDV22\nRDVSWIL  NOP   RDV20\n         OI    RDVSWIL+1,ON\n        @LIST  VTIL,=PL2'+48',U\nRDV20    MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE+7(L'DDNVOL),DDNVOL\n         MVC   LINE+L'DDNVOL+9(21),=CL21': FREE DSCB''S COUNT ='\n         MVC   LINE+L'DDNVOL+30(6),=XL6'402020202120'\n         OC    IXDSCB,IXDSCB       INDEXED VTOC INFO'S?\n         BNZ   *+L'*+8             YES\n         LH    R1,VFDSCB\n         B     RDV21\n         MVC   LINE+L'DDNVOL+37(19),=CL19'- FREE VIRS COUNT ='\n         MVC   LINE+L'DDNVOL+56(6),=XL6'402020202120'\n         L     R1,IXVIRS\n         CVD   R1,WORKD\n         ED    LINE+L'DDNVOL+56(6),WORKD+5\n         L     R1,IXDSCB\nRDV21    CVD   R1,WORKD\n         ED    LINE+L'DDNVOL+30(6),WORKD+5\n        @LIST  LINE\nRDV22    MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE+7(L'DDNVOL),DDNVOL\n         MVI   LINE+L'DDNVOL+9,C'-'\n         TM    VTIND,DS4DIRF       DIRF BIT ON?\n         BZ    RDV24               NO\nRDVSWVS  NOP   RDV23\n         OI    RDVSWVS+1,ON\n        @OUT   VTST,=PL2'+48',U\nRDV23    MVC   LINE+L'DDNVOL+11(L'VTDIRF),VTDIRF\n        @OUT   LINE\n         MVC   LINE+1(L'LINE-1),LINE\nRDV24    CLC   FDSCB,VFDSCB\n         BNE   RDV25\n         OC    IXDSCB,IXDSCB       INDEXED VTOC INFO'S?\n         BZ    RDV27               NO\n         CLC   FDSCB(L'FDSCB),IXDSCB+L'IXDSCB-L'FDSCB\n         BE    RDV27\n         MVC   LINE+L'DDNVOL+44(5),=CL5'V-IX='\n         UNPK  LINE+L'DDNVOL+49(5),IXDSCB+2(3)\n         TR    LINE+L'DDNVOL+49(4),TRTAB-X'F0'\n         MVI   LINE+L'DDNVOL+53,C' '\nRDV25    MVC   LINE+L'DDNVOL+11(18),=CL18'FREE DSCBS : READ='\n         UNPK  LINE+L'DDNVOL+29(5),FDSCB(3)\n         TR    LINE+L'DDNVOL+29(4),TRTAB-X'F0'\n         MVC   LINE+L'DDNVOL+33(6),=CL6' FMT4='\n         UNPK  LINE+L'DDNVOL+39(5),VFDSCB(3)\n         TR    LINE+L'DDNVOL+39(4),TRTAB-X'F0'\n         MVI   LINE+L'DDNVOL+43,C' '\n         TM    RDVSWVS+1,ON\n         BO    RDV26\n         OI    RDVSWVS+1,ON\n        @OUT   VTST,=PL2'+45',U\nRDV26   @OUT   LINE\n         MVC   LINE+1(L'LINE-1),LINE\nRDV27    LA    R2,DDNL(R2)         ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BNE   OPV0                NO, GO TO OPEN NEXT ONE\n         DROP  R2\n         TM    RDVSWVS+1,ON\n         BZ    RDV30\n        @OUT   VTSTN\nRDV30    ST    R5,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         L     R1,DSTABOV          COMPUTE NO. OF ELEMENTS\n         SR    R1,R5\n         ST    R1,DSTABNE\n         TM    RUNOPT,RUNOACC      ACCOUNTING PROCESSING SUPPRESS?\n         BO    CTG0                YES\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    RDV90               NO, SKIP THE LIST\n         L     R1,COUNTER\n         CVD   R1,WORKD\n         ED    ACCENDN,WORKD+5\n        @LIST  ACCEND\nRDV90    TM    WHAT,WHDATA         ANY PUNCH DONE?\n         BZ    CTG0                NO\n         NI    WHAT,255-WHDATA     SET CLOSED\n        $UCLOSE MF=(E,UDDPLS)\n         MVC   LINE(L'ACCUM),ACCUM\n         MVC   LINE+L'ACCUM(L'LINE-L'ACCUM),LINE+L'ACCUM-1\n         MVC   LINE+L'ACCUM(L'DSNDATA),DSNDATA\n        @OUT   LINE\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         SPACE 1\n*        CHECK IF ANY NOT-DECLARED CATALOGS ARE PRESENT.\n         SPACE 1\nCTG0     L     R2,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R2\nCTG1     TM    DDNALL,DDNCT+DDNCI  ANY CATALOG PRESENT?\n         BZ    CTG12               NO, CONTINUE\n         TM    DDNALL,DDNCT        AN O.S. CATALOG IS PRESENT?\n         BZ    CTG3                NO\n         OI    CTGSW2+1,ON\n         L     R15,TBCVOL          START OF CAT. VOL. TABLE\nCTG2     CLI   0(R15),FMOFF        END OF TABLE?\n         BE    CTGSW1              YES\n         USING CVLT,R15\n         TM    CVLIND,CVLICF       IS IT AN O.S. CATALOG?\n         BO    *+L'*+10            NO\n         CLC   CVLVOL,DDNVOL       THIS VOLUME?\n         BE    CTG3                YES\n         DROP  R15\n         LA    R15,CVLL(R15)       ADVANCE IN CAT. VOL. TABLE\n         B     CTG2\nCTG3     TM    DDNALL,DDNCI        AN ICF CATALOG IS PRESENT?\n         BZ    CTG12               NO\n         NI    CTGSW2+1,OFF\n         L     R15,TBCVOL          START OF CAT. VOL. TABLE\nCTG4     CLI   0(R15),FMOFF        END OF TABLE?\n         BE    CTGSW1              YES\n         USING CVLT,R15\n         TM    CVLIND,CVLICF       IS IT AN ICF CATALOG?\n         BZ    *+L'*+10            NO\n         CLC   CVLVOL,DDNVOL       THIS VOLUME?\n         BE    CTG12               YES\n         DROP  R15\n         LA    R15,CVLL(R15)       ADVANCE IN CAT. VOL. TABLE\n         B     CTG4\nCTGSW1   NOP   CTG10\n        @OUT   CTLGMIS1,,U\n         OI    CTGSW1+1,ON\n         LA    R4,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R0,10               MAX. BY LINE\nCTG10    MVC   0(L'DDNVOL,R4),DDNVOL    MISSING VOLUME\n         TM    CTGSW2+1,ON\n         BZ    *+L'*+10\n         MVC   L'DDNVOL(3,R4),=CL3'(O)'\n         B     *+L'*+6\n         MVC   L'DDNVOL(3,R4),=CL3'(I)'\n         BCT   R0,CTG11\n        @OUT   LINE\n         LA    R4,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R0,10               MAX. BY LINE\n         B     CTGSW2\nCTG11    LA    R4,L'DDNVOL+4(R4)   ADVANCE IN LINE\nCTGSW2   B     CTG3\nCTG12    LA    R2,DDNL(R2)         ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BNE   CTG1                NO, GO TO CHECK NEXT ONE\n         DROP  R2\n         TM    CTGSW1+1,ON\n         BZ    CHR0\n         CLI   LINE+6,C' '         ANYTHING IN LINE?\n         BE    CHR0                NO\n        @OUT   LINE\n         SPACE 1\n*        CHECK IF ALL REQUESTED CATALOGS ARE PRESENT.\n         SPACE 1\nCHR0     L     R2,TBCVOL           START OF CAT. VOL. TABLE\n         USING CVLT,R2\nCHR1     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    CHR4                YES\n         TM    CVLIND,CVLCTP       CATALOG IS PRESENT?\n         BO    CHR3                YES, CONTINUE\nCHRSW    NOP   CHR2\n         OI    CHRSW+1,ON\n        @OUT   CTRMISS1,,U\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         MVI   LINE+L'CVLVOL+7,C'-'\nCHR2     MVC   LINE+6(L'CVLVOL),CVLVOL  SET VOLUME\n         MVC   LINE+L'CVLVOL+9(L'CVLNME),CVLNME   SET DS-NAME\n         TM    CVLIND,CVLICF       CATALOG TYPE IS ICF?\n         BO    *+L'*+6             YES\n         MVC   LINE+L'CVLVOL+16(10),LINE+L'CVLVOL+30   NO, O.S.\n         DROP  R2\n        @OUT   LINE\nCHR3     LA    R2,CVLL(R2)         ADVANCE IN TABLE\n         B     CHR1                GO TO CHECK NEXT ONE\nCHR4     MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\nCHR99   @XE\n         EJECT\nOPVPLS  $VTOCQO ,,MF=L\nRDVPLS  $VTOCQR ,,MF=L\n         SPACE 1\nSUPERR  WTO    '--- IXTOFMT5 - REGISTER 0 = XXXXXXXX.',                C\n               ROUTCDE=11,DESC=7,MF=L\nSUPERRM  EQU   SUPERR+32,8\n         SPACE 1\nIXDSCB   DC    F'0'                / ---> LET REMAIN\nIXVIRS   DC    F'0'                /        THESE\nFDSCB    DC    H'0'                /          FIELDS\nVFDSCB   DC    H'0'                /            IN THIS\nVTIND    DC    XL1'0'              /              SEQUENCE\nINFLGTH  EQU   *-IXDSCB            /                ORDER\n         SPACE 1\n         DC    AL1(VTOERRL)\nVTOERR   DC    C' DS1DSORG ERROR : '\nVTOEVOL  DC    CL6' ',C'/'\nVTOEDSN  DC    CL44' '\nVTOERRL  EQU   *-VTOERR\n         DC    AL1(L'VTIL)\nVTIL     DC    C'0VTOC''S INFORMATION LIST :'\n         DC    AL1(L'VTST)\nVTST     DC    C'0VTOC''S STATUS CHECK LIST :'\n         DC    AL1(L'VTSTN)\nVTSTN    DC    C'0      NOTE : USE PROGRAM \"VTOCANAL\" TO DEBUG VTOCS.'\nVTDIRF   DC    C'VTOC INDICATORS (DS4VTOCI) : DIRF BIT ON (DS4DIRF)'\n         DC    AL1(ACCENDL)\nACCEND   DC    C'0END OF DATA-SETS ACCOUNTING LIST '\n         DC    C'(ACCOUNT''S TOTAL :'\nACCENDN  DC    XL6'402020202120',C').'\nACCENDL  EQU   *-ACCEND\nACCUM    DC    C'0 ---> ACCOUNTING CARDS ARE STORED IN DATA-SET : '\n         DC    AL1(L'CTLGMIS1)\nCTLGMIS1 DC    C'0NOT DECLARED CATALOG(S) VOLUME(S) :'\n         DC    AL1(L'CTRMISS1)\nCTRMISS1 DC    C'0CATALOG(S) NOT FOUND ON DECLARED VOLUME(S) :'\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\nDSCDSECT DSECT\n        IECSDSL1 (1)\n         ORG   DS1DSNAM\n        IECSDSL1 (2)\n         ORG   DS1DSNAM\n        IECSDSL1 (3)\n         ORG   DS1FMTID\n        IECSDSL1 (4)\n         ORG   DS1DSNAM\n        IECSDSL1 (5)\n         ORG   DS1DSNAM\n        IECSDSL1 (6)\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLA006": {"ttr": 7687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x00d\\x00d\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "SYSPAJA"}, "text": "A006     TITLE 'CLEAN-UP - READ CATALOGS CONTENTS (A006).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA006    @XS    ALIAS=RCATALS\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    CTN99               YES\n        $DYNALL ,RCODES,MF=(L,CATDY)\n         L     R3,TBCVOL           START OF CAT. VOL. TABLE\n         USING CVLT,R3\nCTN1     CLI   0(R3),FMOFF         END OF TABLE?\n         BE    CTN90               YES\n         TM    CVLIND,CVLMIS       IS VOLUME MISSING?\n         BO    CTN20               YES, SKIP TO NEXT\n         TM    CVLIND,CVLCTP       IS CATALOG PRESENT?\n         BZ    CTN20               NO\n         L     R4,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R4\nCTN2     CLI   0(R4),FMOFF         END OF TABLE?\n         BE    ERR58               YES (MUST NEVER OCCUR)\n         CLC   DDNVOL,CVLVOL       IS IT THIS CATALOG VOLUME?\n         BE    CTNSW1              YES\n         LA    R4,DDNL(R4)         ADVANCE IN DDNAME'S TABLE\n         B     CTN2\nCTNSW1   NOP   CTN10\n         OI    CTNSW1+1,ON\n        @OUT   CATINFT,=PL2'+40',U\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    CTN10               NO\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BZ    CTN10               NO\n        @LIST  CATSHORT\nCTN10    MVC   VSNERR,DDNVOL\n         L     R6,DACTLG           ALLOCATE THE CATALOG\n         USING DYNLIST,R6\n         TM    CVLIND,CVLICF       IS IT AN ICF CATALOG?\n         BO    CTN11               YES\n         MVI   DSNAME,C' '         NO, O.S. CATALOG (SYSCTLG)\n         MVC   DSNAME+1(L'DSNAME-1),DSNAME\n         MVC   DSNAME(7),CVLNME\n         MVC   DSUNIT,DDNUTY\n         MVC   DSVOLSER,CVLVOL\n         MVC   DDNAME(2),=CL2'OS'\n         B     CTN12\nCTN11    MVC   DSNAME,CVLNME\n         MVC   DSUNIT,=CL8' '\n         MVC   DSVOLSER(L'DSVOLSER),=CL8' '\n         MVC   DDNAME(2),=CL2'IC'\nCTN12    MVC   DDNAME+2(L'CVLVOL),CVLVOL\n         MVC   DSSTATUS(3),=CL3'SHR'\n        $DYNALL (R6),,MF=(E,CATDY)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    CTN13\n         ICM   R1,B'1111',=CL4'ALL.'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR66\n         DROP  R6\nCTN13    TM    CVLIND,CVLICF       IS IT AN ICF CATALOG?\n         BO    CTN14               YES\n        @X     B009                GO READ O.S. CATALOG\n         B     CTN15\nCTN14   @X     B010                GO READ ICF CATALOG\n         XC    ZERODSN,ZERODSN\nCTN15    L     R6,DACTLG           DE-ALLOCATE THE CATALOG\n         USING DYNLIST,R6\n         XC    DSNAME,DSNAME\n        $DYNALL (R6),,MF=(E,CATDY)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    CTN16\n         ICM   R1,B'1111',=CL4'FREE'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR66\n         DROP  R6\nCTN16    MVC   VSNERR,=CL6' '\nCTN20    LA    R3,CVLL(R3)         ADVANCE IN CAT. VOL. TABLE\n         B     CTN1\n         DROP  R3,R4\n         EJECT\nCTN90    L     R0,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         L     R1,DSTABOV          COMPUTE NO. OF ELEMENTS\n         SR    R1,R0\n         ST    R1,DSTABNE\n        @X     B004                SORT DSNAME'S TABLE\n         SPACE 1\nCTN99   @XE\n         SPACE 2\nCATDY   $DYNALL MF=L\n         SPACE 1\n         DC    AL1(L'CATINFT)\nCATINFT  DC    C'0CATALOG''S STATUS CHECK LIST : '\n         DC    AL1(L'CATSHORT)\nCATSHORT DC    C'0WARNING : ONLY CATALOGS SHORT LIST IS REQUESTED.'\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA007": {"ttr": 7690, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\to\\x00\\x90\\to\\x10F\\x02(\\x02(\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-06T00:00:00", "modifydate": "1990-04-06T10:46:00", "lines": 552, "newlines": 552, "modlines": 0, "user": "SYSPAJA"}, "text": "A007     TITLE 'CLEAN-UP - READ RACF (DATA-SETS) CONTENTS (A007).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA007    @XS    ALIAS=RRACFDS\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    LP99                YES\n         TM    STATUS,STBRACF      RACF MUST BE BYPASSED?\n         BO    LP99                YES\n         LA    R1,ZERODS\n         ST    R1,SRDSL\n         MVC   LPTRG,TBRGDS\n         MVC   LPTVR,TBVRGN\n         SPACE 1\n*        READ RACF DATA-SETS DEFINITIONS.\n         SPACE 1\n         L     R5,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         L     R7,WK1A             RACF WORK AREA\n         USING WKDS,R7\n         ST    R7,SRDSW\n         XC    WORKRBA,WORKRBA\n         TM    RUNIND,RUTEST       TEST MODE?\n         BZ    LP0                 NO\n         MVC   LPUPTT,=CL16'SIMULATED (TEST)'\nLP0      XC    WORKDDC,WORKDDC\nLP1      TM    WORKRBA+6,X'80'\n         BO    *+L'*+8\n         NI    LPOSW+1,OFF\n         B     *+L'*+4\n         OI    LPOSW+1,ON\n         XC    WORKRBA,WORKRBA\n         XC    WORKRES(WORKBSL),WORKRES\n         LA    R0,ZERODS\nLPOSW    NOP   LPO1\n        ICHEINTY ENTRY=(R0),WKAREA=(R7),GENERIC=NO,MF=(E,LPLST)\n         B     LPO2\nLPO1    ICHEINTY ENTRY=(R0),WKAREA=(R7),GENERIC=UNCOND,MF=(E,LPLST)\nLPO2     LTR   R15,R15\n         BZ    LP2\n         CH    R15,=H'12'          NO SUBSEQUENT ENTRIES?\n         BE    LP90                TRUE, IT IS THE END\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   ERR20               NO\n         STC   R0,RACFERRE\n         OI    RACFERRE,C'0'\n        @OUT   RACFERR\n         LH    R15,=H'36'\n         B     ERR20\nLP2      LA    R14,WORKBS\n         A     R14,WORKTL\n         STCM  R14,B'0111',SRDSN+1\n         XR    R14,R14\n         IC    R14,ZERODS\n         LA    R14,1(R14)\n         ST    R14,SRDSG\n         OC    WORKTL,WORKTL       DATA RETURNED?\n         BZ    LP3                 NO\n         CLC   WORKVRA(2),=XL2'0008'    AUTHOR RECEIVED?\n         BE    LP4                 YES\nLP3     @OUT   LPUSI\n         XR    R15,R15\n         B     ERR20\nLP4      L     R6,TBBYR            DON'T CONTROL TABLE ADDRESS\n         USING BYPRDS,R6\nLP5      CLI   BYPRLG,FMON         END OF TABLE?\n         BE    LP10                YES\n         IC    R15,BYPRLG\n         EX    R15,LPCL            MATCH?\n         BE    LPAL1               YES, DON'T CONTROL IT\n         LA    R6,BYPRPX+1(R15)\n         B     LP5\nLPCL     CLC   ZERODSN(*-*),BYPRPX << EXECUTED >>\n         SPACE 1\n*        ALTERNATE PROCESS (ONLY DISCRETE PROFILES) :\n*        - ADD ALTER ACCESS FOR OWNER IF ABSENT.\n*        - CHANGE TO ALTER ACCESS FOR OWNER IF IT WAS DIFFERENT.\n         SPACE 1\nLPAL1   @SNAPS SN,SRDSL,RRO\n         L     R0,LPCB             UPDATE BYPRACF COUNT\n         AH    R0,=H'1'\n         ST    R0,LPCB\n         TM    BYPRFL,BYPRS        SKIP REQUESTED?\n         BZ    LPAL3               NO\n         LA    R2,LPSKMSN          YES, BYPASS ALL PROCESS\n         BAS   R14,LPALS\n         TM    LPASW+1,ON\n         BO    LPAL2\n         OI    LPASW+1,ON\n        @OUT   LPUPT,=PL2'+40',U\nLPAL2   @OUT   LPSKMS              RACF PROCESS SKIPED\n         B     LP0\nLPAL3    MVI   DSNIN,C' '\n         MVC   DSNIN+1(L'DSNIN-1),DSNIN\n         XR    R1,R1\n         IC    R1,ZERODS\n         BCTR  R1,0\n         EX    R1,LPALMV\n         LA    R14,BYPRDC          DISCRETE COUNT\n         OC    WORKVRA+10(2),WORKVRA+10 ANY VOLUMES?\n         BNZ   LPAL4               YES, DISCRETE\n         LA    R1,DSNIN(R1)        NO, GENERIC\n         CLI   0(R1),C'*'          VERIFIED?\n         BNE   LPAL5               NO, WHAT'S THAT ...\n         MVI   0(R1),0             ALLOW CHECK\n         LA    R14,BYPRGC          GENERIC COUNT\nLPAL4    CLC   DSNPV,DSNIN         CHECK SEQUENCE?\n         BNH   LPAL10              OK\nLPAL5    LA    R2,LPLPMSN          NO, NOW TRY TO BYPASS IT\n         BAS   R14,LPALS\n         TM    LPASW+1,ON\n         BO    LPAL6\n         OI    LPASW+1,ON\n        @OUT   LPUPT,=PL2'+40',U\nLPAL6   @OUT   LPLPMS              PROBABLE RACF LOOP\n         B     LP0\nLPALMV   MVC   DSNIN(*-*),ZERODSN  << EXECUTED >>\n         SPACE 1\nLPALS    XR    R1,R1               R2 : TARGET FIELD ADDRESS\n         LA    R15,ZERODSN         R14 : LINK REGISTER\nLPALS1   CLI   0(R15),C'.'         R1, R15 : WORK REGISTERS\n         BE    LPALS2\n         LA    R1,1(R1)\n         LA    R15,1(R15)\n         B     LPALS1\nLPALS2   MVI   0(R2),C' '\n         MVC   1(L'ZERODSN-1,R2),0(R2)\n         EX    R1,LPALSMN\n         MVI   0(R15),X'FF'\n         LA    R1,1(R1)\n         STC   R1,ZERODS\n         BR    R14                 RETURN\nLPALSMN  MVC   0(*-*,R2),ZERODSN   << EXECUTED >>\n         SPACE 1\nLPAL10   MVC   DSNPV,DSNIN         UPDATE SEQUENCE\n         ICM   R15,B'0111',0(R14)\n         LA    R15,1(R15)          UPDATE COUNT\n         STCM  R15,B'0111',0(R14)\n         MVC   LPACNAM(8),WORKVRA+2     GET OWNER\n         XR    R2,R2\n         LA    R3,WORKVRA+10\n         ICM   R2,B'0011',0(R3)\n         BZ    LP1                 NO VOLUMES = GENERIC (LET IT AS IS)\n         LA    R3,2(R2,R3)         SKIP VOLUME(S)\n         ICM   R2,B'0011',0(R3)\n         LA    R3,2(R2,R3)         SKIP TYPE(S)\n         ICM   R2,B'0011',0(R3)\n         LA    R3,2(R2,R3)         SKIP UNIVERSAL ACCESS\n         XR    R4,R4\n         LR    R2,R4\n         ICM   R4,B'0011',2(R3)    GET NO. OF USERS IN ACCESS LIST\n         ICM   R2,B'0011',4(R3)    GET LENGTH OF NAMES LIST\n         LA    R3,6(R3)            POINT TO NAMES LIST\n         LA    R2,2(R2,R3)         POINT TO ACCESS CODES\n         LTR   R4,R4               AT LEAST ONE?\n         BNP   LPAL13              NO\nLPAL11   CLC   LPACNAM(8),0(R3)    IS IT OWNER?\n         BNE   LPAL12              NO\n         CLI   0(R2),ACEEALTR      ALTER ACCESS?\n         BE    LP1                 YES, O.K.\n         B     LPAL20              NO, CHANGE IT\nLPAL12   LA    R3,8(R3)            ADVANCE IN NAME LIST\n         LA    R2,1(R2)            ADVANCE IN ACCESS CODES\n         BCT   R4,LPAL11           LOOP IF ANY MORE\nLPAL13   MVI   LPUSAN,C' '\n         MVC   LPUSAN+1(L'LPUSAN-1),LPUSAN\n         XR    R1,R1\n         IC    R1,ZERODS           GET LENGTH OF DSNAME\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,LPALUM           MOVE DATA-SET NAME\n        @FILL  LPUSAN\n         TM    RUNIND,RUNORACF+RUTEST   NO RACF ACTION OR TEST RUN?\n         BNZ   LPAL15              YES\n         LA    R0,ZERODS\n        ICHEINTY ALTER,TYPE='DS',ENTRY=(R0),ACTIONS=(LPSA)\n         LTR   R15,R15             TEST COMPLETION CODE\n         BNZ   LPAL30\n         CLI   LPTUS+1,0           IS USER ALREADY IN LIST?\n         BE    LPAL14              NO, IT IS ADDED\n         MVC   LPUSAR(L'LPUSAR),=CL6'FAILED'\n         B     LPAL15\nLPALUM   MVC   LPUSAN(*-*),ZERODSN << EXECUTED >>\nLPAL14   MVC   LPUSAR(L'LPUSAR),=CL6'O.K.'\nLPAL15   TM    BYPRFL,BYPRL        NOLIST REQUESTED?\n         BO    LP1                 YES\nLPASW    NOP   LPAL16\n         OI    LPASW+1,ON\n        @OUT   LPUPT,=PL2'+40',U\nLPAL16   MVC   LPUSAO,LPACNAM      SET OWNER\n        @OUT   LPUSA\n         B     LP1\nLPAL20   MVI   LPUSCN,C' '\n         MVC   LPUSCN+1(L'LPUSCN-1),LPUSCN\n         XR    R1,R1\n         IC    R1,ZERODS           GET LENGTH OF DSNAME\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,LPALUS           MOVE DATA-SET NAME\n        @FILL  LPUSCN\n         TM    RUNIND,RUNORACF+RUTEST   NO RACF ACTION OR TEST RUN?\n         BNZ   LPAL22              YES\n         LA    R0,ZERODS\n        ICHEINTY ALTERI,TYPE='DS',ENTRY=(R0),ACTIONS=(LPCH)\n         LTR   R15,R15             TEST COMPLETION CODE\n         BNZ   LPAL40\n         CLI   LPTUSI+1,0          IS USER ALREADY IN LIST?\n         BE    LPAL21              YES, IT IS CHANGED\n         MVC   LPUSCR(L'LPUSCR),=CL6'FAILED'\n         B     LPAL22\nLPALUS   MVC   LPUSCN(*-*),ZERODSN << EXECUTED >>\nLPAL21   MVC   LPUSCR(L'LPUSCR),=CL6'O.K.'\nLPAL22   TM    BYPRFL,BYPRL        NOLIST REQUESTED?\n         BO    LP1                 YES\n         TM    LPASW+1,ON\n         BO    LPAL23\n         OI    LPASW+1,ON\n        @OUT   LPUPT,=PL2'+40',U\nLPAL23   MVC   LPUSCO,LPACNAM      SET OWNER\n        @OUT   LPUSC\n         B     LP1\nLPAL30  @SNAPS SN,SRDSL,RAE\n         MVC   LPUSEDS,LPUSAN\n         CVD   R15,WORKD\n         UNPK  LPUSERC,WORKD+6(2)\n         OI    LPUSERC+1,C'0'\n         MVI   LPUSEAC,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   LPAL31              NO\n         STC   R0,LPUSEAC\n         OI    LPUSEAC,C'0'\nLPAL31   TM    LPASW+1,ON\n         BO    LPAL32\n         OI    LPASW+1,ON\n        @OUT   LPUPT,=PL2'+40',U\nLPAL32  @OUT   LPUSE\n         B     LP0\nLPAL40  @SNAPS SN,SRDSL,RAE\n         MVC   LPUSRDS,LPUSCN\n         CVD   R15,WORKD\n         UNPK  LPUSRRC,WORKD+6(2)\n         OI    LPUSRRC+1,C'0'\n         MVI   LPUSRAC,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   LPAL41              NO\n         STC   R0,LPUSRAC\n         OI    LPUSRAC,C'0'\nLPAL41   TM    LPASW+1,ON\n         BO    LPAL42\n         OI    LPASW+1,ON\n        @OUT   LPUPT,=PL2'+40',U\nLPAL42  @OUT   LPUSR\n         B     LP0\n         DROP  R6\n         SPACE 1\n*        NORMAL PROCESSING (DISCRETE PROFILE) :\n*        LOOK IF DATA-SET DEFINED TO RACF HAS BEEN FOUND ON A VOLUME.\n         SPACE 1\nLP10    @SNAPS SF,SRDSL,RRD\n         LH    R6,WORKVRA+10\n         LTR   R6,R6               ANY VOLUME?\n         BZ    LP60                NO, GENERIC PROFILE\n         L     R0,LPCD             UPDATE DISCRETE COUNT\n         AH    R0,=H'1'\n         ST    R0,LPCD\n         MVI   LPFLGS,0\n         LA    R3,WORKVRA+12(R6)   SKIP VOLUME(S)\n         XR    R4,R4\n         ICM   R4,B'0011',0(R3)\n         LA    R3,2(R4,R3)         SKIP TYPE(S)\n         ICM   R4,B'0011',0(R3)\n         BZ    *+L'*+8\n         CLI   2(R3),ACEEALTR      UNIVERSAL ACCESS IS ALTER?\n         BE    LP14                YES\n         LA    R3,2(R4,R3)         START OF VARIABLE FIELDS\n         XR    R1,R1\n         ICM   R1,B'0011',2(R3)    GET NO. OF USERS IN ACCESS LIST\n         ICM   R4,B'0011',4(R3)    LENGTH OF NAMES LIST\n         LA    R3,6(R3)            POINT TO NAMES LIST\n         LA    R4,2(R4,R3)         POINT TO ACCESS CODES\n         LTR   R1,R1               AT LEAST ONE?\n         BNP   LP12                NO\nLP11     CLC   0(8,R3),USID        IS IT MYSELF REFERENCED?\n         BE    LP13                YES\n         LA    R3,8(R3)            NO, ADVANCE IN NAMES LIST\n         LA    R4,1(R4)            ADVANCE IN ACCESSS CODES\n         BCT   R1,LP11             LOOP IF ANY MORE\nLP12     CLC   WORKVRA+2(8),USID   OWNER IS MYSELF?\n         BE    LP14                YES\n         OI    LPFLGS,ZFADD        NO, SAY ADD NEEDED\n         B     LP14\nLP13     CLI   0(R4),ACEEALTR      IS IT THE ALTER ACCESS?\n         BE    LP14                YES\n         OI    LPFLGS,ZFCHG        NO, SAY CHANGE NEEDED\nLP14     LA    R4,WORKVRA+12\n         LA    R3,2(R6,R4)\n         USING DSPTYPE,R3\n         USING DSPVOLSR,R4\n         MVI   WORKDS,C' '         CLEAR DSNAME\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         XR    R1,R1\n         IC    R1,ZERODS           LENGTH OF DSNAME\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,LPMO\n         NI    LPSW+1,OFF\n         CH    R6,=H'6'            SINGLE VOLUME RESPONSE?\n         BNE   LP20                NO, MULTI-VOLUME\n         XR    R6,R6               YES, INDICATE IT\nLP20     L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nLP21     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    LP40                YES\n         CLC   DSNME,WORKDS        IS IT THIS ONE?\n         BE    LP23                YES\n         CLC   DSANME,WORKDS       IS IT THE TRUENAME?\n         BE    LP30                YES\nLP22     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     LP21                CONTINUE\nLP23     CLC   DSVOLSN(L'DSVOLSN),DSPVOLSR   LOOK IF SAME VOLUME?\n         BNE   LP25                NO\n         LTR   R6,R6               SINGLE VOLUME?\n         BNZ   LP24                NO, MULTI-VOLUME\n         CLI   DSVORG,XOM          MULTI-VOLUME DEFINED?\n         BNE   LP26                NO, SINGLE, O.K.\n         MVI   DSRCVRY,YRM         INDICATE MULTI-VOLUME REQ.\n         B     LP26\nLP24     CLI   DSVORG,XOM          MULTI-VOLUME DEFINED?\n         BE    LP26                YES, O.K.\n         MVI   DSRCVRY,YRS         INDICATE SINGLE VOLUME REQ.\n         B     LP26\nLP25     CLC   DSALTVO(L'DSALTVO),DSPVOLSR   SAME AS CAT. VOL.?\n         BNE   LP22                NO, GO SEARCH NEXT ONE\nLP26     MVI   DSRACF,XRD          INDICATE DATA-SET RACF DISCRETE\n         MVC   DSFLGS,LPFLGS       SET DATA-SET ACTION FLAGS\n         TM    DSPTYPE,DSPTP       VSAM DATA-SET?\n         BZ    LP50                NO\n         MVI   DSRTYPE,XRTV        INDICATE IT IN TABLE\n         B     LP50\nLPMO     MVC   WORKDS(*-*),ZERODSN << EXECUTED >>\nLP30     OI    LPSW+1,ON\nLP31     MVC   DSFLGS,LPFLGS       SET DATA-SET ACTION FLAGS\n         CLC   DSCVOL(L'DSCVOL),DSPVOLSR     SAME AS CAT. VOL.?\n         BE    LP32                YES\n         MVC   DSALTVO(L'DSALTVO),DSPVOLSR\nLP32     MVI   DSRACF,XRD          INDICATE DATA-SET RACF DISCRETE\n         OI    DSFLGS,ZFTNU        SET TRUE NAME USE\n         TM    DSPTYPE,DSPTP       VSAM DATA-SET?\n         BZ    LP33                NO\n         MVI   DSRTYPE,XRTV        INDICATE IT IN TABLE\nLP33     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    LPSW                YES\n         CLC   DSANME,WORKDS       IS IT THE TRUENAME?\n         BNE   LP33                NO\n         B     LP31\n         SPACE 1\n*        DATA-SET DEFINED TO RACF BUT IT DON'T EXIST ANYWHERE.\n         SPACE 1\nLPSW     B     LP50\nLP40     TM    STATUS,STONLY       ONLY REQUESTED?\n         BO    LP1                 YES, GET NEXT RACF DEFINITION\n         BCT   R5,*+L'*+6          CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\n         XC    0(DSTABL,R2),0(R2)  CLEAR\n         MVC   DSNME,WORKDS        MOVE NAME TO TABLE\n         MVC   DSALTVO(L'DSALTVO),DSPVOLSR   MOVE VOLSER TO TABLE\n         MVI   DSRACF,XRD          SET DATA-SET RACF DISCRETE\n         TM    DSPTYPE,DSPTP       VSAM DATA-SET?\n         BZ    *+L'*+4             NO\n         MVI   DSRTYPE,XRTV        INDICATE IT IN TABLE\n         TM    DSPTYPE,DSPMDL      RACF MODEL DATA-SET PROFILE?\n         BZ    *+L'*+4             NO\n         MVI   DSRUSE,XRUM         INDICATE IT IN TABLE\n         LA    R2,DSTABL(R2)\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         SPACE 1\nLP50     SH    R6,=H'6'            ANY OTHER VOLUME?\n         BNP   LP1                 NO, GET NEXT RACF DEFINITION\n         LA    R4,6(R4)            NEXT VOLUME\n         B     LP20\n         DROP  R2,R3,R4\n         SPACE 1\n*        NORMAL PROCESSING (GENERIC PROFILE) :\n*        BUILD THE HLQ AND GENERIC TABLES ENTRIES.\n         SPACE 1\nLP60     L     R0,LPCG             UPDATE GENERIC COUNT\n         AH    R0,=H'1'\n         ST    R0,LPCG\n         LA    R0,L'WORKD          EXTRACT HIGH-LEVEL INDEX\n         LA    R1,1\n         LA    R14,WORKD\n         MVC   WORKD,=CL8' '\n         LA    R15,ZERODSN\nLP61     CLI   0(R15),C'.'\n         BE    LP62\n         MVC   0(1,R14),0(R15)\n         LA    R1,1(R1)\n         LA    R14,1(R14)\n         LA    R15,1(R15)\n         BCT   R0,LP61\n         B     ERR75               ERROR, HIGH-LEVEL NAME TOO LONG\nLP62     LM    R2,R3,LPTRG         HLQ-GEN. TABLE CURRENT POINTERS\n         CLI   0(R2),FMOFF\n         BE    LP63\n         CLC   WORKD(8),0(R2)\n         BE    LP64\n         LA    R2,NGDL(R2)\n         CL    R2,TBRGDSE\n         BNL   ERR76               TABLE OVERFLOW\nLP63     MVC   0(8,R2),WORKD       BUILD HLQ ENTRY\n         STCM  R3,B'1111',8(R2)\n         ST    R2,LPTRG\n         LA    R2,NGDL(R2)\n         CL    R2,TBRGDSE\n         BNL   ERR76               TABLE OVERFLOW\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         B     LP64+L'LP64\nLP64     BCTR  R3,0\n         XR    R14,R14\n         IC    R14,ZERODS\n         SR    R14,R1\n         LA    R2,1(R3,R14)\n         CL    R2,TBVRGNE\n         BNL   ERR77               TABLE OVERFLOW\n         STC   R14,0(R3)           BUILD GENERIC ENTRY\n         BCTR  R14,0\n         EX    R14,LPMVG\n         MVI   0(R2),FMON          SET FINAL MARKER\n         LA    R2,1(R2)\n         ST    R2,LPTVR\n         B     LP1                 GET NEXT RACF DEFINITION\nLPMVG    MVC   1(*-*,R3),1(R15)    << EXECUTED >>\n         DROP  R7\n         SPACE 1\nLP90     ST    R5,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         L     R1,DSTABOV          COMPUTE NO. OF ELEMENTS\n         SR    R1,R5\n         ST    R1,DSTABNE\n        @X     B004                SORT DSNAME'S TABLE\n         L     R1,LPCD             DISPLAY COUNTERS\n         CVD   R1,WORKD\n         ED    LPTDN,WORKD+4\n         MVC   LPTDM(STIDL),16(R8) SET MODULE ALIAS NAME\n        @OUT   LPTD,=PL2'+50'\n         L     R1,LPCG\n         CVD   R1,WORKD\n         ED    LPTGN,WORKD+4\n        @OUT   LPTG\n         L     R1,LPCB\n         CVD   R1,WORKD\n         ED    LPTBN,WORKD+4\n        @OUT   LPTB\nLP99    @XE\n         EJECT\nLPLST   ICHEINTY NEXTC,TYPE='DS',                                      C\n               ACTIONS=(LPAU,LPAV,LPAT,LPUA,LPSC,LPSL,LPSR),MF=L\n         SPACE 1\nLPAU    ICHEACTN FIELD=AUTHOR\nLPAV    ICHEACTN FIELD=VOLSER\nLPAT    ICHEACTN FIELD=DSTYPE\nLPUA    ICHEACTN FIELD=UNIVACS\nLPSC    ICHEACTN FIELD=ACLCNT\nLPSL    ICHEACTN FIELD=USERID\nLPSR    ICHEACTN FIELD=USERACS\nLPSA    ICHEACTN FIELD=ACL,FLDATA=(11,LPACL),TESTS=LPTUS\nLPCH    ICHEACTN FIELD=ACL,FLDATA=(11,LPACL),TESTS=LPTUSI\nLPTUS   ICHETEST FIELD=USERID,FLDATA=(8,LPACNAM),COND=NE\nLPTUSI  ICHETEST FIELD=USERID,FLDATA=(8,LPACNAM),COND=EQ\n         SPACE 1\nLPCD     DC    F'0'\nLPCG     DC    F'0'\nLPCB     DC    F'0'\nLPTRG    DC    A(*-*)              HLQ TABLE CURRENT POINTER\nLPTVR    DC    A(*-*)              GEN. TABLE CURRENT POINTER\n         SPACE 1\nSRDSL    DC    A(*-*)\nSRDSG    DC    A(*-*)\nSRDSW    DC    A(*-*)\nSRDSN    DC    XL1'80',AL3(*-*)\n         SPACE 1\nLPACL    DS    0CL11               ACCESS LIST ENTRY\nLPACNAM  DC    CL8' '\n         DC    AL1(ACEEALTR)       ALTER ACCESS\n         DC    XL2'0000'           ACCESS COUNT\nDSNIN    DC    CL44' '\nDSNPV    DC    CL44' '\nLPFLGS   DC    XL1'0'\n         SPACE 1\n         DC    AL1(RACFERRL)\nRACFERR  DC    C'0===== RACF READ ERROR ===== (R0 = '\nRACFERRE DC    C' )'\nRACFERRL EQU   *-RACFERR\n         DC    AL1(L'LPUPT+L'LPUPTT)\nLPUPT    DC    C'0RACF OWNER PROCESSING : '\nLPUPTT   DC    CL16' '\n         DC    AL1(LPUSAL)\nLPUSA    DC    CL6' '\nLPUSAN   DC    CL44' ',C' - ALTER ACCESS ADDED : '\nLPUSAO   DC    CL8' ',C' - '\nLPUSAR   DC    CL6'O.K.'\nLPUSAL   EQU   *-LPUSA\n         DC    AL1(LPUSCL)\nLPUSC    DC    CL6' '\nLPUSCN   DC    CL44' ',C' - CHANGED TO ALTER ACCESS : '\nLPUSCO   DC    CL8' ',C' - '\nLPUSCR   DC    CL6'O.K.'\nLPUSCL   EQU   *-LPUSC\n         DC    AL1(LPUSEL)\nLPUSE    DC    CL3' ',CL3'-- '\nLPUSEDS  DC    CL44' ',C' - RACF ALTER TYPE=DS (RC='\nLPUSERC  DC    CL2' ',C'/AC='\nLPUSEAC  DC    CL1' ',C').'\nLPUSEL   EQU   *-LPUSE\n         DC    AL1(LPUSRL)\nLPUSR    DC    CL3' ',CL3'-- '\nLPUSRDS  DC    CL44' ',C' - RACF ALTERI TYPE=DS (RC='\nLPUSRRC  DC    CL2' ',C'/AC='\nLPUSRAC  DC    CL1' ',C').'\nLPUSRL   EQU   *-LPUSR\n         DC    AL1(LPUSIL)\nLPUSI    DC    CL3' ',C'-- RACF READ TYPE=DS '\n         DC    C'(INVALID WORK AREA RECEIVED BACK).'\nLPUSIL   EQU   *-LPUSI\n         DC    AL1(LPLPMSL)\nLPLPMS   DC    C' ---- ERROR - PROBABLE RACF LOOP IN : '\nLPLPMSN  DC    CL44' '\nLPLPMSL  EQU   *-LPLPMS\n         DC    AL1(LPSKMSL)\nLPSKMS   DC    CL6' ',C'RACF PROCESS SKIP REQUESTED FOR : '\nLPSKMSN  DC    CL44' '\nLPSKMSL  EQU   *-LPSKMS\n         DC    AL1(L'LPTD+L'LPTDM+L'LPTDN+1)\nLPTD     DC    C'0 COUNTERS ('\nLPTDM    DC    C'        ) - DISCRETE PROFILES :'\nLPTDN    DC    XL8'4020202020202120',C','\n         DC    AL1(L'LPTG+L'LPTGN+1)\nLPTG     DC    C'                         GENERIC PROFILES :'\nLPTGN    DC    XL8'4020202020202120',C','\n         DC    AL1(L'LPTB+L'LPTBN+1)\nLPTB     DC    C'                         BYPRACF PROFILES :'\nLPTBN    DC    XL8'4020202020202120',C'.'\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        ICHRRPF\n         EJECT\n        PRINT  GEN\n        #WKDS\n         SPACE 2\n        #BYPRDS\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA008": {"ttr": 7944, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x02\\xc4\\x02\\xc4\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 708, "newlines": 708, "modlines": 0, "user": "SYSPAJA"}, "text": "A008     TITLE 'CLEAN-UP - LOCATE DATA-SETS (A008).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA008    @XS    ALIAS=LOCATE\n*        SCHEDULE N-LOC.VOL. REQUESTS.\n         SPACE 1\n         LA    R1,WORKDS\n         ST    R1,VSAMCAT+4\n         ST    R1,VSAMOBT+4\n         ST    R1,SLOCL\n         ST    R1,SOBTL\n         LA    R1,LOCAREA\n         ST    R1,VSAMCAT+12\n         ST    R1,VSAMBLK+12\n         ST    R1,VSAMOBT+12\n         ST    R1,SLOCLCL\n         ST    R1,SOBTLL\n         LA    R1,SVSNAP+4\n         ST    R1,SLOCLC\n         ST    R1,SOBTLS\n         TM    WHAT,WHEOF          END-OF-FILE?\n         BO    VSC0                YES\n         TM    WHAT,WHCD           CARD ALREADY READ?\n         BO    NL1                 YES\nNL0      NI    WHAT,255-WHCD\n        $READ  MF=(E,RDIPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BM    NL91                NO CONTROL STATEMENTS\n         BNZ   ERR21\nNL1      LM    R3,R5,SCIN          SET TO SCAN INPUT CARD\n         CLI   0(R3),C' '          SEARCH START OF A KEYWORD\n         BNE   NL3\nNL2      BXLE  R3,R4,*-8\n         B     NL0\nNL3      CLC   0(9,R3),=CL9'N-LOC.VOL'  IS IT 'N-LOC.VOL' KEYWORD?\n         BNE   NL90                NO\n         LA    R3,8(R3)\n         CLI   1(R3),C'.'\n         BNE   NLSW1\n         LA    R3,1(R3)\nNLSW1    NOP   NL4\n         OI    NLSW1+1,ON\n        @OUT   NLINM,=PL2'+40',U   PRINT HEADER\n         L     R6,DALIST\n         USING DYNLIST,R6\nNL4     @OUT   PRCAR               PRINT INPUT CARD\nNL5      BXLE  R3,R4,*+L'*+4\n         BAS   R14,NLCN\n         CLI   0(R3),C' '          SEARCH START OF ARGUMENT\n         BE    NL5\n         CLI   0(R3),C'('\n         BNE   NLERR\nNL6      BXLE  R3,R4,*+L'*+4\n         BAS   R14,NLCN\n         CLI   0(R3),C' '          SEARCH START OF PO-DSNAME\n         BE    NL6\n         CLI   0(R3),C')'\n         BE    NL2\n         CLI   0(R3),C'*'\n         BE    NL13\n         CLI   0(R3),C'/'\n         BNE   NL7\n         CLI   DSNAME,C' '\n         BNE   NL14                PO-DSNAME AS PREVIOUS\n         B     NLERR\nNL7      MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         LA    R0,WORKDS+L'WORKDS\n         LA    R1,WORKDS\nNL8      CLI   0(R3),C'/'\n         BE    NL9\n         CLI   0(R3),C' '\n         BE    NL9\n         CLR   R1,R0\n         BNL   NLERR\n         MVC   0(1,R1),0(R3)       GET PO-DSNAME\n         LA    R1,1(R1)\n         BXLE  R3,R4,NL8\n         BAS   R14,NLCN\nNL9      CLC   DSNAME,WORKDS       SAME AS PREVIOUS?\n         BE    NL12                YES\n         TM    WHAT,WHPDSA         FIRST TIME?\n         BZ    NL10                YES\n         NI    WHAT,255-WHPDSO     NO, CLOSE AND FREE PREVIOUS\n        $MCLOSE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR26\n         NI    WHAT,255-WHPDSA\n         XC    DSNAME,DSNAME\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    NL10\n         ICM   R1,B'1111',=CL4'FREE'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR26\nNL10     MVC   DSNAME,WORKDS\n         B     NL12\nNL11     BAS   R14,NLCN\nNL12     CLI   0(R3),C'/'\n         BE    NL14\n         CLI   0(R3),C' '\n         BNE   NLERR\n         BXLE  R3,R4,NL12\n         B     NL11\nNL13     OI    STATUS,STCISI\nNL14     BXLE  R3,R4,*+L'*+4\n         BAS   R14,NLCN\n         CLI   0(R3),C' '          SEARCH START OF VOL. NAME\n         BE    NL14\nNL15     LA    R0,7\n         LR    R1,R3\nNL16     CLI   0(R3),C' '\n         BE    NL19\n         CLI   0(R3),C')'\n         BE    NL19\n         BCT   R0,NL18\nNL17     XR    R15,R15             > 6 CHAR. LONG\n         B     ERR51\nNL18     BXLE  R3,R4,NL16\nNL19     CH    R0,=H'7'\n         BE    NL2                 THIS IS THE END OF NAMES\n         CH    R0,=H'1'\n         BNE   NL17                < 6 CHAR. LONG\n         MVC   MBNAME+1(6),0(R1)   DISK VOLSER = MEMBER NAME\n         L     R15,TBDDN           START OF DDNAME'S TABLE\n         USING DDNT,R15\nNL20     CLI   0(R15),FMOFF        END OF TABLE?\n         BE    NL21                YES\n         CLC   DDNVOL(L'DDNVOL),MBNAME+1     IS IT THIS VOLUME?\n         BE    NL23                YES, IT IS ON-LINE\n         LA    R15,DDNL(R15)       ADVANCE IN TABLE\n         B     NL20                AND LOOP\n         DROP  R15\nNL21     L     R15,TBDVOL          START OF NOT-D. VOL. TABLE\nNL22     CLI   0(R15),FMOFF        END OF TABLE?\n         BE    NL25                YES, THIS VOLUME IS NOT MOUNTED\n         CLC   0(L'UCBVOLI,R15),MBNAME+1     IS IT THIS VOLUME?\n         BE    NL23                YES, IT IS ON-LINE\n         LA    R15,TBDVOLL(R15)    ADVANCE IN TABLE\n         B     NL22                AND LOOP\nNL23     MVC   NLVONME(L'NLVONME),MBNAME+1\n        @OUT   NLVON\n         TM    STATUS,STCISI       IN-STREAM?\n         BZ    NL45                NO\n         NI    STATUS,255-STCISI\nNL24     CLI   0(R3),C')'          END OF NAMES?\n         BE    NL2                 YES\n         BXLE  R3,R4,NL24\n         BAS   R14,NLCN\n         B     NL24\nNL25     TM    STATUS,STCISI       IN-STREAM?\n         BO    NL50                YES\n         TM    WHAT,WHPDSA         ALLOCATED?\n         BO    NL31                YES\n         MVC   DDNAME(6),=CL6'SYSPDS'\n         MVC   DSSTATUS(3),=CL3'SHR'\n         MVC   DSNDISP(4),=CL4'KEEP'\n         MVC   DSADISP(4),=CL4'KEEP'\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    NL30\n         ICM   R1,B'1111',=CL4'ALL.'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR23\nNL30     OI    WHAT,WHPDSA\n        $MOPEN MF=(E,MOPPLS)       OPEN PARTITIONNED\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR23\n         OI    WHAT,WHPDSO\nNL31     MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE+9(8),MBNAME    SET MEMBER NAME = VOLSER\n         MVI   LINE+18,C':'\n        $MFIND MF=(E,NLMF)         FIND MEMBER IN DATA-SET\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR24\nNL32    $MREAD MF=(E,MRDPLS)       READ CARD FROM MEMBER\n         LTR   R15,R15\n         BM    NL45                END OF FILE\n         BNZ   ERR25\n        @OUT   LINE\n         MVC   LINE+9(10),LINE+8\n         LA    R1,LINE+20\n         LM    R14,R15,LISCAN+4\n         CLI   0(R1),C' '          SEARCH START OF DSNAME OR PREFIX\n         BNE   NL34\nNL33     BXLE  R1,R14,*-8\n         B     NL32                GET NEXT CARD\nNL34     LR    R0,R1               SET STARTING POSITION\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         B     NL36\nNL35     CLI   0(R1),C' '          TEST IF END OF DSNAME?\n         BE    NL40                YES\nNL36     CLI   0(R1),C'/'          TEST IF '/' PRESENT?\n         BE    NL37                YES\n         BXLE  R1,R14,NL35         GO FOR NEXT CHARACTER\n         B     NL40                ASSUME END OF DSNAME\nNL37     ST    R1,LISCAN           SAVE ACTUAL POINTER\n         LR    R15,R0              START OF PREFIX POINTER\n         SR    R1,R0               LENGTH OF PREFIX\n         BNP   NL44                NO PREFIX, ONLY '/', SKIP IT\n         CH    R1,=H'44'           OVER MAXIMUM?\n         BH    ERR52               YES\n         BCTR  R1,0                -1 FOR COMPARE\nNL38     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    NL44                YES\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    NL39                NO\n         EX    R1,NLCL             IS THIS PREFIX?\n         BNE   NL39                NO\n         MVI   DSACTION,YE         INDICATE EXEMPTED\n         MVI   DSRCVRY,0           RESET ANY RECOVERY\nNL39     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     NL38\nNLCL     CLC   DSNME(*-*),0(R15)   << EXECUTED >>\nNL40     ST    R1,LISCAN           SAVE ACTUAL POINTER\n         LR    R15,R0              START OF DSNAME POINTER\n         SR    R1,R0               LENGTH OF DSNAME\n         CH    R1,=H'44'           OVER MAXIMUM?\n         BH    ERR52               YES\n         BCTR  R1,0                -1 FOR MOVE\n         MVI   NLNMDSN,C' '\n         MVC   NLNMDSN+1(L'NLNMDSN-1),NLNMDSN\n         EX    R1,NLMV             SET DSNAME FOR COMPARE\nNL41     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    NL43                YES\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    NL42                NO\n         CLC   DSNME,NLNMDSN       IS THIS DSNAME?\n         BNE   NL42                NO\n         MVI   DSACTION,YE         INDICATE EXEMPTED\n         MVI   DSRCVRY,0           RESET ANY RECOVERY\n         B     NL44                GO CONTINUE CARD SCAN\nNL42     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     NL41                GO TEST NEXT ONE\nNLMV     MVC   NLNMDSN(*-*),0(R15) << EXECUTED >>\n         DROP  R2\nNL43    @OUT   NLNMNF              DSNAME NOT FOUND\nNL44     L     R1,LISCAN           RESTORE SCAN POINTERS\n         LM    R14,R15,LISCAN+4\n         CLR   R1,R15              CARD SCAN ENDED?\n         BNH   NL33                NO\n         B     NL32                TO NEXT MEMBER CARD\nNL45     CLR   R3,R5               CARD SCAN ENDED?\n         BNH   NL47                NO\nNL46     BAS   R14,NLCN\nNL47     CLI   0(R3),C')'          END OF NAMES?\n         BE    NL2                 YES\n         CLI   0(R3),C' '\n         BNE   NL15                TO NEXT VOL. NAME\n         BXLE  R3,R4,NL47\n         B     NL46\n         DROP  R6\nNL50     NI    STATUS,255-STCISI\nNL51     BXLE  R3,R4,*+L'*+4       START SEARCH OF DSNAME OR PREFIX\nNL52     BAS   R14,NLCN\n         CLI   0(R3),C' '\n         BE    NL51\n         CLI   0(R3),C')'          END OF NAMES?\n         BE    NL2                 YES\n         LR    R1,R3               SET STARTING POSITION\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         B     NL54\nNL53     CLI   0(R3),C' '          TEST IF END OF DSNAME?\n         BE    NL58                YES\n         CLI   0(R3),C')'          END OF NAMES?\n         BE    NL58                YES\nNL54     CLI   0(R3),C'/'          TEST IF '/' PRESENT?\n         BE    NL55                YES\n         BXLE  R3,R4,NL53          GO FOR NEXT CHARACTER\n         B     NL58                ASSUME END OF DSNAME\nNL55     LR    R15,R3              COMPUTE LENGTH OF PREFIX\n         SR    R15,R1\n         BNP   NL62                NO PREFIX, ONLY '/', SKIP IT\n         CH    R15,=H'44'          OVER MAXIMUM?\n         BH    ERR52               YES\n         BCTR  R15,0               -1 FOR COMPARE\nNL56     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    NL62                YES\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    NL57                NO\n         EX    R15,NLRC            IS THIS PREFIX?\n         BNE   NL57                NO\n         MVI   DSACTION,YE         INDICATE EXEMPTED\n         MVI   DSRCVRY,0           RESET ANY RECOVERY\nNL57     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     NL56\nNLRC     CLC   DSNME(*-*),0(R1)    << EXECUTED >>\nNL58     LR    R15,R3              COMPUTE LENGTH OF DSNAME\n         SR    R15,R1\n         CH    R15,=H'44'          OVER MAXIMUM?\n         BH    ERR52               YES\n         BCTR  R15,0               -1 FOR MOVE\n         MVI   NLNMDSN,C' '\n         MVC   NLNMDSN+1(L'NLNMDSN-1),NLNMDSN\n         EX    R15,NLMO            SET DSNAME FOR COMPARE\nNL59     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    NL61                YES\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    NL60                NO\n         CLC   DSNME,NLNMDSN       IS THIS DSNAME?\n         BNE   NL60                NO\n         MVI   DSACTION,YE         INDICATE EXEMPTED\n         MVI   DSRCVRY,0           RESET ANY RECOVERY\n         B     NL62                GO CONTINUE CARD SCAN\nNL60     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     NL59                GO TEST NEXT ONE\nNLMO     MVC   NLNMDSN(*-*),0(R1)  << EXECUTED >>\n         DROP  R2\nNL61    @OUT   NLNMNF              DSNAME NOT FOUND\nNL62     CLR   R3,R5               CARD SCAN ENDED?\n         BH    NL52                YES\n         CLI   0(R3),C')'          END OF NAMES?\n         BNE   NL51                NO\n         B     NL2\nNLCN     ST    R14,SVRETCT         CONTINUATION\n        $READ  MF=(E,RDIPLS)       GET NEXT CARD\n         LTR   R15,R15\n         BM    NLCN1\n         BNZ   ERR21\n        @OUT   PRCAR               PRINT INPUT CARD\n         LM    R3,R5,SCIN          SET TO SCAN INPUT CARD\n         L     R14,SVRETCT\n         BR    R14                 GO BACK\nNLCN1    LA    R1,CTERRMS\n         B     NL80\nNLERR    MVI   CARDIN,C' '\n         MVC   CARDIN+1(L'CARDIN-1),CARDIN\n         MVI   0(R3),C'$'          POSITION OF ERROR\n        @OUT   PRCAR\n         LA    R1,NLTERR           STATEMENT ERROR\nNL80    @OUT   (R1)\n         XR    R15,R15\n         B     ERR22\nNL90     OI    WHAT,WHCD           INDICATE \"SYSIN\" CARD ALREADY READ\n         B     VSC0\nNL91     OI    WHAT,WHEOF          INDICATE \"SYSIN\" END-OF-FILE\n         SPACE 1\nVSC0     TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    VSOB99              YES\n         EJECT\n*        LOOK  : 1. IF UTILITY DATA-SETS (FORMAT : *...)\n*                   OR TEMPORARY DATA-SETS (FORMAT :\n*                   SYS-----.T------.RA------) TO BE\n*                   SCRATCHED.\n*\n*                2. IF DATA-SETS NOT ALREADY CATALOGED\n*                   CAN BE LOCATED BY MASTER-CATALOG :\n*\n*                        R15  R0\n*                        ---  --\n*                          8   8 : NOT CATALOGED\n*                          8   X : NOT CATALOGED / ONLY SOME INDEXES\n*                          8   0 : GDG L-CAT (VSAM)\n*                         12   X : GDG CVOL (R-CAT)\n         SPACE 1\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         XC    WORKDS,WORKDS\nVSC1     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    VSCSW4              YES\n         CLI   DSNME,C'*'          IS IT AN UTILITY DSNAME?\n         BE    VSC3                YES\n         CLC   DSNME,DSNDATA       IS IT MY DAY ACCOUNT DSNAME?\n         BE    VSC2                YES\n         CLC   DSNME(3),=C'SYS'    IS IT A TEMPORARY DSNAME?\n         BNE   VSC4                NO\n         CLC   DSNME+8(2),=C'.T'\n         BNE   VSC4                NO\n         CLC   DSNME+16(3),=C'.RA'\n         BNE   VSC4                NO\n         CLI   DSNME+22,C'.'\n         BNE   VSC4                NO\n         XR    R3,R3\n         IC    R3,JNMEL\n         L     R4,JNMEA\n         EX    R3,VSCCL            IS IT MYSELF?\n         BNE   VSC3                NO\n         LA    R4,DSNME+24(R3)\n         CLI   0(R4),C'.'\n         BNE   VSC4                NO\nVSC2     MVI   DSACTION,YE         LET'S GO (EXEMPTED)\n         B     VSC13               GET NEXT\nVSC3     MVI   DSACTION,YT         SET SCRATCH TEMPORARY INDICATOR\n         B     VSC13               GET NEXT\nVSCCL    CLC   DSNME+23(*-*),0(R4) << EXECUTED >>\nVSC4     CLC   WORKDS,DSNME        SAME AS PREVIOUS DSNAME?\n         BE    VSC13               YES, DON'T LOCATE AGAIN\n         MVC   WORKDS,DSNME\n         CLI   DSACTION,0          ALREADY ACTION ON THIS DATA-SET?\n         BNE   VSC13               YES\n         CLI   DSCAT,0             ALREADY CATALOGED?\n         BNE   VSC13               YES\n         CLI   DSUSE,0             MODEL GDG ,GDG OR NULL GDG INDEX?\n         BNE   VSC13               YES\n         XR    R15,R15\n         LR    R14,R2              RETAIN CURRENT ENTRY\nVSC5     OC    DSVOLSN,DSVOLSN     ON A VOLUME?\n         BZ    VSC6                NO\n         LTR   R15,R15             FIRST TIME?\n         BNZ   VSC6                NO\n         LR    R15,R2              RETAIN FIRST USEFULL ENTRY\nVSC6     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    VSC7                YES\n         CLC   WORKDS,DSNME        SAME DATA-SET NAME?\n         BNE   VSC7                NO\n         CLI   DSCAT,0             ALREADY CATALOGED?\n         BE    VSC5                NO, LOOK TO NEXT IF ANY\n         B     VSC13\nVSC7     LTR   R15,R15             ANY ENTRY RETAINED?\n         BZ    VSC8                NO\n         LR    R2,R15              GET USEFULL ENTRY\n         B     VSC10\nVSC8     LR    R2,R14              RESTORE CURRENT ENTRY\n         CLI   DSRACF,XRD          IS IT A RACF DICRETE DEFINITION?\n         BNE   VSC10               NO, LOCATE IT\n         L     R3,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R3\nVSC9     CLI   0(R3),FMOFF         END OF TABLE?\n         BE    VSC13               YES, VOLUME NOT ANALYZED\n         CLC   DDNVOL,DSALTVO      IS IT THIS VOLUME?\n         BE    VSC10               YES, O.K.\n         LA    R3,DDNL(R3)         ADVANCE IN TABLE\n         B     VSC9                AND LOOP\n         DROP  R3\nVSC10    TM    RUNIND,RUCATMIS     ALL CATALOGS ARE PRESENT?\n         BO    VSC13               NO, BYPASS LOCATE\n         XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(LOCAREAL-256),LOCAREA+256\n         TM    RUNIND,RUTEST       TEST RUN?\n         BZ    *+L'*+12            NO\n         L     R1,CTLN\n         AH    R1,=H'1'\n         ST    R1,CTLN\n        LOCATE VSAMCAT\n        @SNAPS SF,SLOCL,LOC\n         LTR   R15,R15             TEST LOCATE COMPLETION CODE\n         BZ    VSC20\n         CH    R15,=H'8'\n         BNE   VSC14\n         LTR   R0,R0               GDG VSAM?\n         BZ    VSC11               YES\n         CH    R0,=H'8'            NO, NOTHING CATALOGED?\n         BE    VSC13               YES, LET'S GO\n         B     VSC15               NO, THERE ARE SOME INDEXES\nVSC11    MVI   DSCAT,XCSL          YES, SET CATALOGED BY LOCATE\nVSC12    MVI   DSUSE,XUG           SET MODEL GDG\nVSC13    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     VSC1\nVSC14    CH    R15,=H'12'          GDG CVOL?\n         BNE   VSC15               NO\n         CLI   DSRACF,XRD          IS IT A RACF DISCRETE DEFINITION?\n         BE    VSC13               YES, WILL BE DELETED LATER\n         MVI   DSCAT,XCSR          SET AS READ FROM O.S. CATALOG\n         B     VSC12\nVSC15    CL    R15,=F'999'\n         BNH   *+L'*+10\n         MVC   LOCR15,=CL4' ---'\n         B     *+L'*+16\n         CVD   R15,WORKD\n         MVC   LOCR15,MASKERR\n         ED    LOCR15,WORKD+6\n         CL    R0,=F'999'\n         BNH   *+L'*+10\n         MVC   LOCR0,=CL4' ---'\n         B     *+L'*+16\n         CVD   R0,WORKD\n         MVC   LOCR0,MASKERR\n         ED    LOCR0,WORKD+6\n         MVC   LOCDSN,DSNME\n        @FILL  LOCDSN\nVSCSW1   NOP   VSC16\n         OI    VSCSW1+1,ON\n        @OUT   LOCT,=PL2'+40',U\nVSC16   @OUT   LOCA\n         B     VSC13\nVSC20    OI    VSCSW2+1,ON\n         CLC   WORKDS,DSNME        DSNAME CHANGED (ALIAS)?\n         BE    VSC21               NO\n         MVC   ZERODSN,WORKDS      SAVE THE TRUE NAME\n         MVC   WORKDS,DSNME        RESTORE ORIGINAL NAME\n         NI    VSCSW2+1,OFF        SET TO PROCESS ALIAS\nVSC21    LR    R6,R2               RETAIN CURRENT ENTRY\n         OI    VSCSW3+1,ON\n         CLC   LOCAREA(2),=H'1'    SINGLE VOLUME?\n         BE    VSC22               YES\n         NI    VSCSW3+1,OFF        NO, MULTI-VOLUME\nVSC22    LH    R3,LOCAREA          NUMBER OF VOLUMES IN LIST\n         LA    R4,20               MAX. NUMBER BY WORK AREA\n         LA    R5,LOCAREA+2        VOL. ENTRIES START ADDRESS\nVSC23    CLC   DSVOLSN(L'DSVOLSN),4(R5) IS IT THIS VOLUME?\n         BE    VSC28               YES\n         CLC   DSALTVO(L'DSALTVO),4(R5) IS IT THIS ALTERNATE VOLUME?\n         BE    VSC28               YES\n         LA    R2,DSTABL(R2)       NO, ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    VSC24               YES\n         CLC   DSNME,WORKDS        SAME DATA-SET NAME?\n         BE    VSC23               YES\nVSC24    L     R1,DSTABCT          NO, DSNAME'S TABLE OVERFLOW CONTROL\n         BCT   R1,VSC25            CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\nVSC25    ST    R1,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         NI    VSCSW4+1,OFF\n         OC    VSCATST,VSCATST     END OF TABLE ALREADY KNOWN?\n         BZ    VSC26               NO\n         L     R2,VSCATST          GET IT\n         B     VSC27\nVSC26    CLI   0(R2),FMOFF         END OF TABLE?\n         BE    VSC27               YES\n         LA    R2,DSTABL(R2)       NO, ADVANCE IN TABLE\n         B     VSC26\nVSC27    LA    R1,DSTABL(R2)       COMPUTE NEXT END OF TABLE\n         ST    R1,VSCATST          STORE IT\n         MVC   DSNME,WORKDS        MOVE NAME TO TABLE\n         MVC   DSALTVO(L'DSALTVO),4(R5) MOVE VOLSER TO TABLE\nVSC28    MVI   DSCAT,XCSL          SET CATALOGED BY LOCATE\n         MVC   DSMVCNT(L'DSMVCNT),10(R5)     SET MULTI-VOL. COUNT\nVSCSW2   B     VSCSW3\n         MVC   DSANME,ZERODSN      SET TRUE NAME OF ALIAS NAME\nVSCSW3   B     VSC29\n         MVI   DSVORG,XOM          INDICATE MULTI-VOLUMES\nVSC29    LR    R2,R6               RESTORE CURRENT ENTRY\n         BCT   R3,VSC30            ANY OTHER VOL. ENTRY IN LIST?\n         B     VSC13               NO, END OF LIST\nVSC30    BCT   R4,VSC31            END OF WORK AREA?\n         MVC   VSCTTR(L'VSCTTR),LOCAREA+252  TTR OF NEXT VCB\n         OC    VSCTTR,VSCTTR       VALID TTR?\n         BZ    ERR33               NO, WHAT?\n         TM    RUNIND,RUTEST       TEST RUN?\n         BZ    *+L'*+12            NO\n         L     R1,CTLT\n         AH    R1,=H'1'\n         ST    R1,CTLT\n        LOCATE VSAMBLK\n        @SNAPS SF,SLOCLC,LOC\n         LTR   R15,R15             TEST LOCATE COMPLETION CODE\n         BZ    VSC22\n         B     ERR33               WHAT?\nVSC31    LA    R5,12(R5)           NEXT VOL. ENTRY\n         B     VSC23\n         DROP  R2\nVSCSW4   B     VSOB0\n         L     R0,DSTABOV          COMPUTE NO. OF ELEMENTS\n         S     R0,DSTABCT\n         ST    R0,DSTABNE\n        @X     B004                SORT DSNAME'S TABLE\n         SPACE 1\n*        NOW TRY TO FIX INFORMATION ABOUT VSAM DATA-SETS.\n         SPACE 1\nVSOB0    TM    RUNIND,RUCATMIS     ALL CATALOGS ARE PRESENT?\n         BO    VSOB99              NO, BYPASS OBTAIN\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nVSOB1    CLI   0(R2),FMOFF         END OF TABLE?\n         BE    VSOB10              YES\n         OC    DSVOLSN,DSVOLSN     ON A VOLUME?\n         BNZ   VSOB9               YES, BYPASS\n         CLI   DSCAT,XCSL          NO, LOCATE CATALOG INFORMATION?\n         BNE   VSOB9               NO, BYPASS\n         CLI   DSANME,0            YES, IT IS AN ALIAS?\n         BNE   VSOB9               YES, BYPASS\n         L     R3,TBDDN            NO, START OF DDNAME'S TABLE\n         USING DDNT,R3\nVSOB2    CLI   0(R3),FMOFF         END OF TABLE?\n         BE    VSOB9               YES, VOLUME NOT ANALYZED\n         CLC   DDNVOL,DSALTVO      IS IT THIS VOLUME?\n         BE    VSOB3               YES, O.K.\n         LA    R3,DDNL(R3)         ADVANCE IN TABLE\n         B     VSOB2               AND LOOP\nVSOB3    MVC   WORKDS,DSNME        SET DSNAME FOR OBTAIN\n         MVC   OBTVOL,DSALTVO      SET VOLUME SERIAL NUMBER\n         XC    LOCAREA(140),LOCAREA     CLEAR WORK AREA\n         TM    RUNIND,RUTEST       TEST RUN?\n         BZ    *+L'*+12            NO\n         L     R1,CTOD\n         AH    R1,=H'1'\n         ST    R1,CTOD\n        OBTAIN VSAMOBT\n        @SNAPS SF,SOBTL,OBT\n         LTR   R15,R15             TEST OBTAIN COMPLETION CODE\n         BZ    VSOB7\n         CH    R15,=H'8'\n         BNE   VSOB5\n         LA    R14,L'DSNME         THIS IS PROBABLY A VSAM-CATALOG\n         LA    R15,DSNME+L'DSNME-1\nVSOB4    CLI   0(R15),C' '\n         BNE   VSOB6\n         BCTR  R15,0\n         BCT   R14,VSOB4\nVSOB5    MVI   DSACTION,YZ         WHAT? INDICATE UNKNOWN\n         B     VSOB9\nVSOB6    LA    R0,L'DSALTVO+1\n         SR    R14,R0\n         BNP   VSOB5\n         SR    R15,R0\n         CLC   0(2,R15),=CL2'.V'\n         BNE   VSOB5\n         CLC   2(L'DSALTVO,R15),DSALTVO\n         BNE   VSOB5\n         XC    LOCAREA+96(5),LOCAREA+96 FORCE VSAM\nVSOB7    MVC   DSDDN,DDNNME        ADJUST\n         XC    DSALTVO,DSALTVO\n         NI    VSOBSW+1,OFF\n         OC    LOCAREA+96(5),LOCAREA+96 IS IT A VSAM?\n         BNZ   VSOB8               NO\n         MVI   DSTYPE,XTL          YES, INDICATE IT\n         B     VSOB9\nVSOB8    MVC   DSCBCC+3(5),LOCAREA+96   SET CCHHR OF DSCB\n         MVC   DSUCBTY,DDNDTY      SET VOLUME TYPE\n         DROP  R3\nVSOB9    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     VSOB1               CONTINUE\nVSOB10   OC    CTLN(L'CTLN+L'CTLT+L'CTOD),CTLN    ANY NOT ZERO?\n         BZ    VSOBSW              BRANCH IF NONE\n         L     R1,CTLN             DISPLAY COUNTERS\n         CVD   R1,WORKD\n         ED    MSTN,WORKD+4\n         MVC   MSTM(STIDL),16(R8)  SET MODULE ALIAS NAME\n        @OUT   MST,=PL2'+50'\n         L     R1,CTLT\n         CVD   R1,WORKD\n         ED    MSTTN,WORKD+4\n        @OUT   MSTT\n         L     R1,CTOD\n         CVD   R1,WORKD\n         ED    MSTON,WORKD+4\n        @OUT   MSTO\nVSOBSW   B     VSOB99\n        @X     B004                SORT DSNAME'S TABLE\nVSOB99  @XE\n         EJECT\nVSAMCAT CAMLST NAME,*-*,,*-*\nVSAMBLK CAMLST BLOCK,VSCTTR,,*-*\nVSAMOBT CAMLST SEARCH,*-*,OBTVOL,*-*\nSVRETCT  DC    F'0'\nVSCATST  DC    A(*-*)\n         SPACE 1\nSLOCL    DC    A(*-*)\n         DC    A(L'WORKDS)\nSLOCLC   DC    A(*-*)\n         DC    A(12)\nSLOCLCL  DC    A(*-*)\n         DC    XL1'80',AL3(LOCAREAL)\nSOBTL    DC    A(*-*)\n         DC    A(L'WORKDS)\n         DC    A(OBTVOL)\n         DC    A(L'OBTVOL)\nSOBTLS   DC    A(*-*)\n         DC    A(4)\nSOBTLL   DC    A(*-*)\n         DC    XL1'80',AL3(140)\n         SPACE 1\nNLMF    $MFIND MBNAME,MF=L\n         EJECT\nCTLN     DC    F'0'\nCTLT     DC    F'0'\nCTOD     DC    F'0'\nMBNAME   DC    CL8'L '\nOBTVOL   DC    CL6' '\nVSCTTR   DC    XL3'0'\n         SPACE 1\n         DC    AL1(L'NLINM)\nNLINM    DC    C'0NO-LOCATE REQUESTS :'\n         DC    AL1(L'NLTERR)\nNLTERR   DC    C' ===== SYNTAX ERROR ====='\n         DC    AL1(L'CTERRMS)\nCTERRMS  DC    C' ===== CONTINUATION MISSING ====='\n         DC    AL1(NLVONL)\nNLVON    DC    CL11' '\nNLVONME  DC    CL6' ',C' IS ON-LINE.'\nNLVONL   EQU   *-NLVON\n         DC    AL1(NLNMNFL)\nNLNMNF   DC    CL20' '\n         DC    C'----- DATA-SET NOT FOUND : '\nNLNMDSN  DC    CL44' '\nNLNMNFL  EQU   *-NLNMNF\n         DC    AL1(L'LOCT)\nLOCT     DC    C'0LOCATE BY DSNAME :'\n         DC    AL1(LLOCA)\nLOCA     DC    CL6' '\nLOCDSN   DC    CL44' ',C' - RC ='\nLOCR15   DC    CL4' ',C', IX ='\nLOCR0    DC    CL4' ',C'.'\nLLOCA    EQU   *-LOCA\n         DC    AL1(L'MST+L'MSTM+L'MSTN+1)\nMST      DC    C'0 COUNTERS ('\nMSTM     DC    C'        ) - LOC. BY NAME :'\nMSTN     DC    XL8'4020202020202120',C','\n         DC    AL1(L'MSTT+L'MSTTN+1)\nMSTT     DC    C'                         LOC. BY TTR :'\nMSTTN    DC    XL8'4020202020202120',C','\n         DC    AL1(L'MSTO+L'MSTON+1)\nMSTO     DC    C'                         OBTAIN DSCB :'\nMSTON    DC    XL8'4020202020202120',C'.'\n         SPACE 2\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLA009": {"ttr": 8202, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x02F\\x02F\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 582, "newlines": 582, "modlines": 0, "user": "SYSPAJA"}, "text": "A009     TITLE 'CLEAN-UP - SCHEDULE N-CAT./SPECIAL REQUESTS (A009).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA009    @XS    ALIAS=SPECREQ\n*        GET SCRATCH NOT-CATALOGED VOLUMES.\n         SPACE 1\n         L     R2,TBNVOL           ADDRESS OF N-CAT. VOL. TABLE\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         TM    WHAT,WHEOF          END-OF-FILE?\n         BO    LK0                 YES\n         TM    WHAT,WHCD           CARD ALREADY READ?\n         BO    GNV1                YES\nGNV0     NI    WHAT,255-WHCD\n        $READ  MF=(E,RDIPLS)\n         LTR   R15,R15\n         BM    GNV13               EOF\n         BNZ   ERR21               ERROR\nGNV1     LM    R3,R5,SCIN          SET TO SCAN INPUT BUFFER\nGNVSW1   NOP   GNV5\n         CLI   0(R3),C' '          LOOK FOR FIRST NON-BLANK\n         BNE   GNVSW2\nGNV2     BXLE  R3,R4,*-8\n         B     GNV0\nGNVSW2   NOP   GNV4\n         CLC   0(9,R3),=CL9'N-CAT.VOL'  IS IT 'N-CAT.VOL' KEYWORD?\n         BNE   GNV12               NO\n         LA    R3,8(R3)\n         CLI   1(R3),C'.'\n         BNE   GNV3\n         LA    R3,1(R3)\nGNV3     OI    GNVSW2+1,ON\n         B     GNV2\nGNV4     CLI   0(R3),C'('          START OF NAMES?\n         BNE   ERR43               NO, ERROR\n         OI    GNVSW1+1,ON\n         BXLE  R3,R4,GNV5\n         B     GNV0\nGNV5     CLI   0(R3),C' '          LOOK FOR FIRST NON-BLANK\n         BNE   GNV6\n         BXLE  R3,R4,GNV5\n         B     GNV0\nGNV6     LR    R1,R3               SAVE STARTING POINTER\n         LA    R0,7                MAX. LENGTH + 1 TO CONTROL\nGNV7     CLI   0(R3),C' '          LOOK FOR FIRST BLANK\n         BE    GNV9\n         CLI   0(R3),C')'          END OF NAMES?\n         BE    GNV9                YES\n         BCT   R0,GNV8\n         XR    R15,R15             > 6 CHAR. LONG\n         B     ERR44\nGNV8     BXLE  R3,R4,GNV7\nGNV9     LR    R15,R3              COMPUTE VOL. SER. LENGTH\n         SR    R15,R1\n         BZ    GNV11               THIS IS THE END OF NAMES\n         BCTR  R15,0               -1 FOR MOVE\n         LA    R14,2(R15,R2)       COMPUTE SPACE IN TABLE\n         CL    R14,TBNVOLE         ANY OVERFLOW?\n         BL    GNV10               NO\n         XR    R15,R15             YES\n         B     ERR8\nGNV10    STC   R15,0(R2)           STORE IN TABLE\n         EX    R15,GNVMV           MOVE VOLUME PREFIX TO TABLE\n         LR    R2,R14              ADVANCE IN TABLE\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         CLR   R3,R5               CARD SCAN ENDED?\n         BH    GNV0                YES\n         B     GNV5                GET NEXT VOLUME\nGNVMV    MVC   1(*-*,R2),0(R1)     << EXECUTED >>\nGNV11    NI    GNVSW1+1,OFF\n         NI    GNVSW2+1,OFF\n         B     GNV2\nGNV12    OI    WHAT,WHCD           INDICATE \"SYSIN\" CARD ALREADY READ\n         B     GLV0\nGNV13    OI    WHAT,WHEOF          INDICATE \"SYSIN\" END-OF-FILE\n         SPACE 1\n*        LIST N-CAT. VOL. TABLE.\n         SPACE 1\nGLV0     L     R2,TBNVOL           START OF N-CAT. VOL. TABLE\n         CLI   0(R2),FMOFF         EMPTY?\n         BE    LK0                 YES\n        @OUT   NCTIT,=PL2'+50',U\nGLV1     LA    R4,LINE+6           STARTING ADDRESS IN LINE\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         LA    R0,10               MAX. BY LINE\nGLV2     XR    R3,R3               CLEAR REGISTER\n         IC    R3,0(R2)            GET LENGTH OF NAME\n         EX    R3,GLVMV            MOVE TO PRINT LINE\n         LA    R1,5(R4)            REPLACE BLANKS IN LINE\nGLV3     CLI   0(R1),C' '          BLANK?\n         BNE   GLV4                NO\n         MVI   0(R1),C'-'          REPLACE\n         BCT   R1,GLV3             AND LOOP\nGLV4     LA    R2,2(R2,R3)         ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         LAST ENTRY?\n         BE    GLV6                YES\n         BCT   R0,GLV5\n         B     GLV6\nGLVMV    MVC   0(*-*,R4),1(R2)     << EXECUTED >>\nGLV5     LA    R4,L'UCBVOLI+4(R4)  ADVANCE IN LINE\n         B     GLV2\nGLV6     CLI   LINE+6,C' '         ANYTHING IN LINE?\n         BE    LK0                 NO\n        @OUT   LINE\n         CLI   0(R2),FMOFF         LAST ENTRY?\n         BNE   GLV1                NO, CONTINUE\n         SPACE 1\n*        CONTROL \"NOT-CATALOGED\" DATA-SETS.\n         SPACE 1\nLK0      TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    SR0                 YES\n         TM    RUNIND,RUCATMIS     ALL CATALOGS ARE PRESENT?\n         BZ    LK1                 YES\n        @OUT   SCRBYP              NO, BYPASS\n         B     SR0\n         SPACE 1\n*        LOOK FOR NOT-CATALOGED DATA-SETS ON SELECTED\n*        VOLUMES AND MARK THEM TO BE SCRATCHED.\n         SPACE 1\nLK1      L     R3,TBNVOL           START OF N-CAT. VOL. TABLE\n         CLI   0(R3),FMOFF         EMPTY?\n         BE    SR0                 YES\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nLK2      CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SR0                 YES\n         CLI   DSACTION,0          ALREADY ANY ACTION?\n         BNE   LK5                 YES, BYPASS\n         CLI   DSUSE,0             MODEL GDG ,GDG OR NULL GDG INDEX?\n         BNE   LK5                 YES, BYPASS\n         CLI   DSTYPE,0            VSAM DATA-SET?\n         BNE   LK5                 YES, BYPASS\n         CLI   DSCAT,0             CATALOGED?\n         BNE   LK5                 YES, O.K.\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    LK5                 NO, BYPASS\n         L     R3,TBNVOL           START OF N-CAT. VOL. TABLE\nLK3      XR    R1,R1\n         IC    R1,0(R3)            GET LENGTH FOR COMPARE\n         EX    R1,LKCL             ON DISK?\n         BE    LK4                 YES, SCRATCH\n         LA    R3,2(R1,R3)         NO, ADVANCE IN TABLE\n         CLI   0(R3),FMOFF         END OF TABLE?\n         BNE   LK3                 NO, CONTINUE\n         B     LK5\nLKCL     CLC   DSVOLSN(*-*),1(R3)  << EXECUTED >>\nLK4      MVI   DSACTION,YS         INDICATE TO SCRATCH\nLK5      LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     LK2                 CONTINUE\n         DROP  R2\n         SPACE 1\n*        READ SPECIAL REQUESTS.\n         SPACE 1\nSR0      TM    WHAT,WHEOF          END-OF-FILE?\n         BO    SRNI                YES\n         TM    WHAT,WHCD           CARD ALREADY READ?\n         BO    SR1                 YES\n        $READ  MF=(E,RDIPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BM    SRNI                NO CONTROL STATEMENTS\n         BNZ   ERR21\nSR1     @OUT   SRINM,=PL2'+40',U   PRINT HEADER\n         L     R6,DALIST\n         USING DYNLIST,R6\nSR2     @OUT   PRCAR               PRINT INPUT CARD\n         LM    R3,R5,SCIN          SET TO SCAN INPUT CARD\n         CLI   0(R3),C' '          SEARCH START OF A KEYWORD\n         BNE   SR4\nSR3      BXLE  R3,R4,*-8\n        $READ  MF=(E,RDIPLS)       GET NEXT CARD\n         LTR   R15,R15\n         BM    SRCSE               END OF CONTROL CARDS\n         BZ    SR2                 ANALYZE NEXT CARD\n         B     ERR21\nSR4      CLC   0(7,R3),=CL7'SCRATCH'    SCRATCH DISK REQUIRED?\n         BNE   SR20                NO\n         LA    R3,6(R3)\nSR5      BXLE  R3,R4,*+L'*+4\n         BAS   R14,SRR20\n         CLI   0(R3),C' '          SEARCH START OF ARGUMENT\n         BE    SR5\n         CLI   0(R3),C'('\n         BNE   SRERR\nSR6      BXLE  R3,R4,*+L'*+4\n         BAS   R14,SRR20\n         CLI   0(R3),C' '          SEARCH START OF VOL. NAME\n         BE    SR6\nSR7      LA    R0,7\n         LR    R1,R3\nSR8      CLI   0(R3),C' '\n         BE    SR9\n         CLI   0(R3),C')'\n         BE    SR9\n         BCT   R0,*+L'*+4\n         B     SRERR\n         BXLE  R3,R4,SR8\nSR9      LR    R14,R3\n         SR    R14,R1\n         BZ    SR3                 THIS IS THE END OF NAMES\n         BCTR  R14,0\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nSR10     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SR15                YES\n         CLI   DSACTION,0          ALREADY ACTION ON THIS ONE?\n         BNE   SR14                YES, FORGET IT\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    SR11                NO\n         EX    R14,SRCL            ON THIS DISK?\n         BNE   SR14                NO\n         MVI   DSACTION,YD         YES, INDICATE\n         B     SR13\nSR11     EX    R14,SRCA            REFER THIS DISK?\n         BNE   SR14                NO\n         CLI   DSCAT,0             CATALOGED?\n         BE    SR12                NO\n         MVI   DSACTION,YU         INDICATE UNCATALOG\n         B     SR13\nSRCL     CLC   DSVOLSN(*-*),0(R1)  << EXECUTED >>\nSRCA     CLC   DSALTVO(*-*),0(R1)  << EXECUTED >>\nSR12     MVI   DSACTION,YR         INDICATE DELETE FROM RACF\nSR13     MVI   DSRCVRY,0           RESET ANY RECOVERY\nSR14     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     SR10                LOOP\n         DROP  R2\nSR15     CLR   R3,R5               CARD SCAN ENDED?\n         BNH   SR17                NO\nSR16     BAS   R14,SRR20\nSR17     CLI   0(R3),C')'          END?\n         BE    SR3                 YES, GET NEXT KEYWORD\n         CLI   0(R3),C' '\n         BNE   SR7                 TO NEXT VOL. NAME\n         BXLE  R3,R4,SR17\n         B     SR16\nSR20     CLC   0(6,R3),=CL6'EXEMPT'     EXEMPTION TABLE?\n         BNE   SRERR               NO\n         LA    R3,5(R3)\nSR21     BXLE  R3,R4,*+L'*+4\n         BAS   R14,SRR20\n         CLI   0(R3),C' '          SEARCH START OF ARGUMENT\n         BE    SR21\n         CLI   0(R3),C'('\n         BNE   SRERR\nSR22     BXLE  R3,R4,*+L'*+4\n         BAS   R14,SRR20\n         CLI   0(R3),C' '          SEARCH START OF PO-DSNAME\n         BE    SR22\n         CLI   0(R3),C')'\n         BE    SR3\n         CLI   0(R3),C'*'\n         BE    SR29\n         CLI   0(R3),C'/'\n         BNE   SR23\n         CLI   DSNAME,C' '\n         BNE   SR30                PO-DSNAME AS PREVIOUS\n         B     SRERR\nSR23     MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         LA    R0,WORKDS+L'WORKDS\n         LA    R1,WORKDS\nSR24     CLI   0(R3),C'/'\n         BE    SR25\n         CLI   0(R3),C' '\n         BE    SR25\n         CLR   R1,R0\n         BNL   SRERR\n         MVC   0(1,R1),0(R3)       GET PO-DSNAME\n         LA    R1,1(R1)\n         BXLE  R3,R4,SR24\n         BAS   R14,SRR20\nSR25     CLC   DSNAME,WORKDS       SAME AS PREVIOUS?\n         BE    SR28                YES\n         TM    WHAT,WHPDSA         FIRST TIME?\n         BZ    SR26                YES\n         NI    WHAT,255-WHPDSO     NO, CLOSE AND FREE PREVIOUS\n        $MCLOSE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR26\n         NI    WHAT,255-WHPDSA\n         XC    DSNAME,DSNAME\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    SR26\n         ICM   R1,B'1111',=CL4'FREE'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR26\nSR26     MVC   DSNAME,WORKDS\n         B     SR28\nSR27     BAS   R14,SRR20\nSR28     CLI   0(R3),C'/'\n         BE    SR30\n         CLI   0(R3),C' '\n         BNE   SRERR\n         BXLE  R3,R4,SR28\n         B     SR27\nSR29     OI    STATUS,STCISI\nSR30     BXLE  R3,R4,*+L'*+4\n         BAS   R14,SRR20\n         CLI   0(R3),C' '          SEARCH START OF VOL. NAME\n         BE    SR30\n         OI    SRSW+1,ON\nSR31     LA    R0,7\n         LR    R1,R3\nSR32     CLI   0(R3),C' '\n         BE    SR33\n         CLI   0(R3),C')'\n         BE    SR33\n         BCT   R0,*+L'*+4\n         B     SRSW\n         BXLE  R3,R4,SR32\nSR33     LR    R14,R3\n         SR    R14,R1\n         BZ    SR3                 THIS IS THE END OF NAMES\n         BCTR  R14,0\n         STC   R14,MEMBERL\n         MVC   MEMBER+1,=CL7' '\n         EX    R14,SRMO            DISK VOLSER = MEMBER NAME\n         TM    STATUS,STCISI       INPUT STREAM?\n         BO    SR55                YES\n         TM    WHAT,WHPDSA         ALLOCATED?\n         BO    SR35                YES\n         MVC   DDNAME(6),=CL6'SYSPDS'\n         MVC   DSSTATUS(3),=CL3'SHR'\n         MVC   DSNDISP(4),=CL4'KEEP'\n         MVC   DSADISP(4),=CL4'KEEP'\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    SR34\n         ICM   R1,B'1111',=CL4'ALL.'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR23\nSR34     OI    WHAT,WHPDSA\n        $MOPEN MF=(E,MOPPLS)       OPEN PARTITIONNED\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR23\n         OI    WHAT,WHPDSO\nSR35     MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE+9(8),MEMBER    SET MEMBER NAME = VOLSER\n         MVI   LINE+18,C':'\n        $MFIND MF=(E,SRMF)         FIND MEMBER IN DATA-SET\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR24\nSR36    $MREAD MF=(E,MRDPLS)       READ CARD FROM MEMBER\n         LTR   R15,R15\n         BM    SR49                END OF FILE?\n         BNZ   ERR25\n        @OUT   LINE\n         MVC   LINE+9(10),LINE+8\n         LA    R1,LINE+20\n         LM    R14,R15,LISCAN+4\n         CLI   0(R1),C' '          SEARCH START OF DSNAME OR PREFIX\n         BNE   SR38\nSR37     BXLE  R1,R14,*-8\n         B     SR36                GET NEXT CARD\nSR38     LR    R0,R1               SET STARTING POSITION\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         B     SR40\nSR39     CLI   0(R1),C' '          TEST IF END OF DSNAME?\n         BE    SR44                YES\nSR40     CLI   0(R1),C'/'          TEST IF '/' PRESENT?\n         BE    SR41                YES\n         BXLE  R1,R14,SR39         GO FOR NEXT CHARACTER\n         B     SR44                ASSUME END OF DSNAME\nSR41     ST    R1,LISCAN           SAVE ACTUAL POINTER\n         LR    R15,R0              START OF PREFIX POINTER\n         SR    R1,R0               LENGTH OF PREFIX\n         BNP   SR48                NO PREFIX, ONLY '/', SKIP IT\n         CH    R1,=H'44'           OVER MAXIMUM?\n         BH    ERR41               YES\n         BCTR  R1,0                -1 FOR COMPARE\n         IC    R14,MEMBERL\nSR42     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SR48                YES\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    SR43                NO\n         EX    R1,SRCC             IS THIS PREFIX?\n         BNE   SR43                NO\n         EX    R14,SRCM            SAME DISK?\n         BNE   SR43                NO\n         MVI   DSACTION,YE         INDICATE EXEMPTED\n         MVI   DSRCVRY,0           RESET ANY RECOVERY\nSR43     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     SR42\nSRMO     MVC   MEMBER+1(*-*),0(R1) << EXECUTED >>\nSRCC     CLC   DSNME(*-*),0(R15)   << EXECUTED >>\nSRCM     CLC   DSVOLSN(*-*),MEMBER+1    << EXECUTED >>\nSR44     ST    R1,LISCAN           SAVE ACTUAL POINTER\n         LR    R15,R0              START OF DSNAME POINTER\n         SR    R1,R0               LENGTH OF DSNAME\n         CH    R1,=H'44'           OVER MAXIMUM?\n         BH    ERR41               YES\n         BCTR  R1,0                -1 FOR MOVE\n         MVI   NAMEDSN,C' '\n         MVC   NAMEDSN+1(L'NAMEDSN-1),NAMEDSN\n         EX    R1,SRMV             SET DSNAME FOR COMPARE\n         IC    R14,MEMBERL\nSR45     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SR47                YES\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    SR46                NO\n         CLC   DSNME,NAMEDSN       IS THIS DSNAME?\n         BNE   SR46                NO\n         EX    R14,SRCM            SAME DISK?\n         BNE   SR46                NO\n         MVI   DSACTION,YE         INDICATE EXEMPTED\n         MVI   DSRCVRY,0           RESET ANY RECOVERY\n         B     SR48                TO NEXT MEMBER CARD\nSR46     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     SR45                GO TEST NEXT ONE\nSRMV     MVC   NAMEDSN(*-*),0(R15) << EXECUTED >>\n         DROP  R2\nSR47    @OUT   NAMENF              DSNAME NOT FOUND\nSR48     L     R1,LISCAN           RESTORE SCAN POINTERS\n         LM    R14,R15,LISCAN+4\n         CLR   R1,R15              CARD SCAN ENDED?\n         BNH   SR37                NO\n         B     SR36                TO NEXT MEMBER CARD\nSR49     CLR   R3,R5               CARD SCAN ENDED?\n         BNH   SR51                NO\nSR50     BAS   R14,SRR20\nSR51     CLI   0(R3),C')'          END?\n         BE    SR3                 YES, GET NEXT KEYWORD\n         CLI   0(R3),C' '\n         BNE   SR52                TO NEXT VOL. NAME\n         BXLE  R3,R4,SR51\n         B     SR50\nSR52     NI    SRSW+1,OFF\n         B     SR31\nSR55     NI    STATUS,255-STCISI\nSRR0     BXLE  R3,R4,*+L'*+4       START SEARCH OF DSNAME OR PREFIX\nSRR1     BAS   R14,SRR20\n         CLI   0(R3),C' '\n         BE    SRR0\n         CLI   0(R3),C')'          END OF NAMES?\n         BE    SR3                 YES\n         LR    R1,R3               SET STARTING POSITION\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         B     SRR3\nSRR2     CLI   0(R3),C' '          TEST IF END OF DSNAME?\n         BE    SRR7                YES\n         CLI   0(R3),C')'          END OF NAMES?\n         BE    SRR7                YES\nSRR3     CLI   0(R3),C'/'          TEST IF '/' PRESENT?\n         BE    SRR4                YES\n         BXLE  R3,R4,SRR2          GO FOR NEXT CHARACTER\n         B     SRR7                ASSUME END OF DSNAME\nSRR4     LR    R15,R3              COMPUTE LENGTH OF PREFIX\n         SR    R15,R1\n         BNP   SRR11               NO PREFIX, ONLY '/', SKIP IT\n         CH    R15,=H'44'          OVER MAXIMUM?\n         BH    ERR41               YES\n         BCTR  R15,0               -1 FOR COMPARE\n         IC    R14,MEMBERL\nSRR5     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SRR11               YES\n         EX    R15,SRRDSN          IS THIS PREFIX?\n         BE    *+L'*+8             YES\n         EX    R15,SRRDSA          IS THIS PREFIX?\n         BNE   SRR6                NO\n         EX    R14,SRRMVN          SAME DISK?\n         BE    *+L'*+8             YES\n         EX    R14,SRRMVA          SAME DISK?\n         BNE   SRR6                NO\n         MVI   DSACTION,YE         INDICATE EXEMPTED\n         MVI   DSRCVRY,0           RESET ANY RECOVERY\nSRR6     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     SRR5\nSRRDSN   CLC   DSNME(*-*),0(R1)    << EXECUTED >>\nSRRDSA   CLC   DSANME(*-*),0(R1)   << EXECUTED >>\nSRRMVN   CLC   DSVOLSN(*-*),MEMBER+1    << EXECUTED >>\nSRRMVA   CLC   DSALTVO(*-*),MEMBER+1    << EXECUTED >>\nSRR7     LR    R15,R3              COMPUTE LENGTH OF DSNAME\n         SR    R15,R1\n         CH    R15,=H'44'          OVER MAXIMUM?\n         BH    ERR41               YES\n         BCTR  R15,0               -1 FOR MOVE\n         MVI   NAMEDSN,C' '\n         MVC   NAMEDSN+1(L'NAMEDSN-1),NAMEDSN\n         EX    R15,SRRMO           SET DSNAME FOR COMPARE\n         IC    R14,MEMBERL\nSRR8     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SRR10               YES\n         CLC   DSNME,NAMEDSN       IS THIS DSNAME?\n         BE    *+L'*+10            YES\n         CLC   DSANME,NAMEDSN      IS THIS DSNAME?\n         BNE   SRR9                NO\n         EX    R14,SRRMVN          SAME DISK?\n         BE    *+L'*+8             YES\n         EX    R14,SRRMVA          SAME DISK?\n         BNE   SRR9                NO\n         MVI   DSACTION,YE         INDICATE EXEMPTED\n         MVI   DSRCVRY,0           RESET ANY RECOVERY\n         B     SRR11               GO CONTINUE CARD SCAN\nSRR9     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     SRR8                GO TEST NEXT ONE\nSRRMO    MVC   NAMEDSN(*-*),0(R1)  << EXECUTED >>\n         DROP  R2\nSRR10   @OUT   NAMENF              DSNAME NOT FOUND\nSRR11    CLR   R3,R5               CARD SCAN ENDED?\n         BH    SRR1                YES\n         CLI   0(R3),C')'          END OF NAMES?\n         BNE   SRR0                NO\n         B     SR3\nSRR20    ST    R14,SVRETCN         CONTINUATION\n        $READ  MF=(E,RDIPLS)       GET NEXT CARD\n         LTR   R15,R15\n         BM    CNERR\n         BNZ   ERR21\n        @OUT   PRCAR               PRINT INPUT CARD\n         LM    R3,R5,SCIN          SET TO SCAN INPUT CARD\n         L     R14,SVRETCN\n         BR    R14                 GO BACK\nCNERR    LA    R1,CNERRMS\n         B     CRERR\nSRSW     B     SRERR\n        @OUT   PRCAR               REPEAT FOR DIAGNOSE\nSRERR    MVI   CARDIN,C' '\n         MVC   CARDIN+1(L'CARDIN-1),CARDIN\n         MVI   0(R3),C'$'          POSITION OF ERROR\n        @OUT   PRCAR\n         LA    R1,SRTERR           STATEMENT ERROR\nCRERR   @OUT   (R1)\n         XR    R15,R15\n         B     ERR22\nSRNI    @OUT   SRNOINM\n         B     SRCSEND\nSRCSE    TM    WHAT,WHPDSA         ALLOCATED?\n         BZ    SRCSEND             NO\n         NI    WHAT,255-WHPDSO\n        $MCLOSE\n         LTR   R15,R15\n         BNZ   ERR26\n         NI    WHAT,255-WHPDSA\n         XC    DSNAME,DSNAME\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    SRCSEND\n         ICM   R1,B'1111',=CL4'FREE'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR26\n         DROP  R6\nSRCSEND  NI    WHAT,255-WHIN-WHCD-WHEOF\n        $RCLOSE\n        @X     B013                PROCESS RACF GENERIC PROFILES\n        @XE\n         EJECT\nSRMF    $MFIND MEMBER,MF=L\n         SPACE 1\nSVRETCN  DC    F'0'\n         SPACE 1\nMEMBERL  DC    AL1(*-*)\nMEMBER   DC    CL8'E '\n         DC    AL1(L'NCTIT)\nNCTIT    DC    C'0N-CAT. VOLUMES CHECK LIST :'\n         DC    AL1(L'SCRBYP)\nSCRBYP   DC    C'0===== SCRATCH PROCESSING FOR ''NOT-CATALOGED'' BYPASSC\n               ED DUE TO MISSING CATALOG ====='\n         DC    AL1(L'SRNOINM)\nSRNOINM  DC    C'0===== NO SPECIAL REQUESTS ====='\n         DC    AL1(L'SRINM)\nSRINM    DC    C'0SPECIAL REQUESTS :'\n         DC    AL1(L'SRTERR)\nSRTERR   DC    C' ===== SYNTAX ERROR ====='\n         DC    AL1(L'CNERRMS)\nCNERRMS  DC    C' ===== CONTINUATION MISSING ====='\n         DC    AL1(NAMENFL)\nNAMENF   DC    CL20' '\n         DC    C'----- DATA-SET NOT FOUND ON VOLUME : '\nNAMEDSN  DC    CL44' '\nNAMENFL  EQU   *-NAMENF\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLA010": {"ttr": 8458, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x07_\\x00\\x89\\x07_\\x10\\x02\\x01\\xaf\\x01\\xaf\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-03-16T00:00:00", "modifydate": "1989-03-16T10:02:00", "lines": 431, "newlines": 431, "modlines": 0, "user": "SYSPAJA"}, "text": "A010     TITLE 'CLEAN-UP - CONTROLS AND DECISIONS (A010).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA010    @XS    ALIAS=DECIDE\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    MS99                YES\n         TM    RUNIND,RUCATMIS     ALL CATALOGS ARE PRESENT?\n         BO    MS99                NO, BYPASS\n         LA    R1,WORKDS\n         ST    R1,VSAMINX+4\n         ST    R1,SLINX\n         LA    R1,LOCAREA\n         ST    R1,VSAMINX+12\n         ST    R1,SLINXL\n         LA    R1,SVSNAP+4\n         ST    R1,SLINXS\n         SPACE 1\n*        LOOK : 1. SET UNCATALOG IF WRONG REFERENCE.\n*               2. SET DELETE RACF IF WRONG REFERENCE.\n*               3. CONTROL DATA-SET AND RACF DEFINITIONS, AND TRY\n*                  TO MAKE RECOVERY.\n*\n*        NOTE : \"VERY CAREFULL ACTION\" OR \"NO ACTION\" IS DECIDED FOR\n*               VSAM DATA-SETS BECAUSE THEY MUST BE MANAGED USING THE\n*               'IDCAMS' PROGRAM, SO THEY ARE JUST SIGNALED AS MANUAL\n*               CONTROL REQUESTED BY 'LISTDST' (SEE A011).\n         SPACE 1\n         XR    R5,R5\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    MS99                YES\nMS1      LR    R6,R2               RETAIN GROUP STARTING ENTRY\nMS2      LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    MS3                 YES\n         CLC   DSNME(L'DSNME),DSNME-DSTABDS(R6)   SAME DSNAME?\n         BE    MS2                 YES, CONTINUE TO SEARCH GROUP\nMS3      LR    R4,R2               RETAIN END OF GROUP\n         LR    R2,R6               GET STARTING ENTRY\nMS4      CLI   DSUSE,XUI           IS IT A NULL GDG INDEX?\n         BE    MS90                YES\n         CLI   DSACTION,YR         DELETE FROM RACF REQ?\n         BE    MS5                 YES\n         CLI   DSACTION,YS         SCRATCH REQ?\n         BE    MS6                 YES\n         CLI   DSACTION,YD         SCRATCH DISK REQ?\n         BE    MS6                 YES\n         CLI   DSACTION,YU         UNCATALOG REQ?\n         BE    MS6                 YES\n         CLI   DSACTION,0          ANY OTHER ACTION SCHEDULED?\n         BNE   MS90                YES, BYPASS\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BNZ   MS40                YES\n         SPACE 1\n*        PROCESSING WHEN DATA-SET NOT RESIDING ON A VOLUME.\n         SPACE 1\n         CLI   DSCAT,0             NO, CATALOG DEFINITION ONLY?\n         BNE   MS20                YES\nMS5      BAS   R14,MSCTR           CONTROL\n         B     MS7\nMS6      CLI   DSRACF,XRD          RACF DISCRETE?\n         BNE   MS90                NO, BYPASS\nMS7      LR    R15,R2              RETAIN CURRENT ENTRY\n         LR    R2,R6               SET START OF GROUP\nMS10     CLR   R2,R15              MYSELF?\n         BE    MS11                YES\n         CLR   R2,R4               END OF GROUP?\n         BNL   MS17                YES\n         CLI   DSACTION,0          ALREADY ANY ACTION?\n         BNE   MS11                YES\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    MS11                NO\n         CLI   DSRACF,XRD          ALREADY RACF DISCRETE?\n         BNE   MS12                NO\nMS11     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     MS10\nMS12     CLI   DSTYPE,0            IS IT A VSAM?\n         BNE   MS13                YES, VSAM RACF PROFILE\n         MVI   DSACTION,YA         INDICATE ADD TO RACF\n         LR    R2,R15              RESTORE CURRENT ENTRY\n         MVI   DSRCVRY,YRU         INDICATE USE FOR ADD RACF\n         B     MS90\nMS13     LR    R3,R2               SAVE VOL. ENTRY POINTER\n         LR    R2,R15              RESTORE CURRENT ENTRY\n         CLI   DSCAT-DSTABDS(R3),XCSI   ICF CATALOG?\n         BNE   MS14                NO\n         CLC   DSALTVO,DSCVOL-DSTABDS(R3)    VSAM CAT. VOL. MATCHES?\n         BE    MS16                YES\n         MVC   DSCVOL,DSCVOL-DSTABDS(R3)     SET CATALOG VOLUME\n         B     MS15\nMS14     BAS   R14,MSLCV           LOCATE CATALOG VOLUME\n         CLC   DSALTVO(L'DSALTVO),LOCAREA+6  VSAM CAT. VOL. MATCHES?\n         BE    MS16                YES\n         MVC   DSCVOL(L'DSCVOL),LOCAREA+6    SET CATALOG VOLUME\nMS15     MVI   DSACTION,YY         INDICATE MODIFY RACF\nMS16     CLI   DSRACF-DSTABDS(R3),XRD   VOL. ENTRY HAS RACF DIS. ALSO?\n         BNE   MS90                NO\n         MVI   DSACTION-DSTABDS(R3),YR  DELETE FROM RACF\n         B     MS90\nMS17     LR    R2,R15              RESTORE CURRENT ENTRY\n         CLI   DSACTION,0          ANY ACTION ALREADY SCHEDULED?\n         BNE   MS90                YES, BYPASS\n         MVI   DSACTION,YR         INDICATE RACF DELETION\n         B     MS90\nMS20     BAS   R14,MSCTR           CONTROL\n         CLI   DSUSE,0             ANYTHING WITH GDG?\n         BNE   MS30                YES\n         LR    R15,R2              RETAIN CURRENT ENTRY\nMS21     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLR   R2,R4               END OF GROUP?\n         BNL   MS24                YES\n         CLI   DSACTION,0          ALREADY ANY ACTION?\n         BE    MS22                NO\n         CLI   DSACTION,YS         IS IT SCRATCH REQUESTED?\n         BNE   MS24                NO\n         B     MS23                GO CHANGE THE ACTION\nMS22     OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    MS21                NO, BYPASS\n         CLI   DSCAT,0             ALREADY CATALOGED?\n         BNE   MS24                YES, O.K.\nMS23     MVI   DSACTION,YC         INDICATE CATALOG REQUEST\nMS24     LR    R2,R15              RESTORE CURRENT ENTRY\n         CLI   DSANME,0            IS THERE A TRUE NAME (ALIAS)?\n         BE    MS29                NO\n         CLC   DSANME,DSNME        YES, IS TRUE NAME AHEAD IN TABLE?\n         BL    MS25                NO\n         LR    R15,R2              YES, START FROM THIS POINT\n         B     MS27\nMS25     L     R15,DSTAB           START OF DSNAME'S TABLE\nMS26     CLC   DSNME-DSTABDS(L'DSNME,R15),DSANME  THIS DSNAME?\n         BH    MS28                NO, NOT FOUND\n         BL    MS27                NO, CONTINUE\n         CLC   DSMVCNT-DSTABDS(L'DSMVCNT,R15),DSMVCNT   VOL. COUNT?\n         BNE   MS27                NOT EQUALS\n         CLC   DSVOLSN-DSTABDS(L'DSVOLSN,R15),DSALTVO   VOL. SER.?\n         BE    MS90                EQUALS\nMS27     LA    R15,DSTABL(R15)     ADVANCE IN TABLE\n         CLI   0(R15),FMOFF        END OF TABLE?\n         BNE   MS26                NO, CONTINUE\nMS28     MVI   DSACTION,YZ         INDICATE UNKNOWN\n         B     MS90\nMS29     MVI   DSACTION,YU         INDICATE UNCATALOG\n         B     MS90\nMS30     MVI   DSACTION,YM         SIGNAL CONTROL\n         LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLR   R2,R4               END OF GROUP?\n         BL    MS30                NO, CONTINUE GROUP\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BNE   MS1                 NO, NEXT GROUP\n         B     MS99                YES, END\n         SPACE 1\n*        PROCESSING WHEN DATA-SET EXISTS ON A VOLUME.\n         SPACE 1\nMS40     CLI   DSRCVRY,0           ALREADY ANY RECOVERY?\n         BNE   MS90                YES, DON'T OVERRIDE IT\n         CLC   DSNME(9),=CL9'SYSCTLG.V' IS IT AN O.S. CATALOG?\n         BNE   MS42                NO\n         CLI   DSRACF,XRD          IS IT RACF DISCRETE?\n         BE    MS41                YES\n         CLI   DSRACF,XRG          IS IT RACF GENERIC?\n         BE    MS90                YES\n         MVI   DSRCVRY,YRA         INDICATE ADD TO RACF\n         B     MS90\nMS41     CLI   DSTYPE,XTL          VSAM (LOCATE)?\n         BNE   MS44                NO\n         CLI   DSRTYPE,XRTV        VSAM (RACF)?\n         BE    MS51                YES\n         MVI   DSACTION,YF         INDICATE CHANGE RACF\n         B     MS51\nMS42     CLI   DSUSE,XUM           MODEL GDG?\n         BNE   MS43                NO\n         CLI   DSCAT,0             YES, CATALOG DEFINED?\n         BNE   MS43                YES\n         MVI   DSACTION,YM         NO, SIGNAL CONTROL\n         B     MS90\nMS43     CLI   DSRACF,XRD          RACF DISCRETE?\n         BE    MS44                YES\n         CLI   DSRACF,XRG          RACF GENERIC?\n         BE    MS61                YES\n         CLI   DSPROT,0            NO, DATA-SET PROTECTED?\n         BE    MS51                NO\n         MVI   DSACTION,YN         RESET RACF (VTOC FLAG)\n         B     MS51\nMS44     CLI   DSPROT,0            DATA-SET PROTECTED?\n         BNE   MS46                YES\n         CLI   DSTYPE,XTL          NO, VSAM (LOCATE)?\n         BE    MS45                YES\n         CLI   DSTYPE,XTV          VSAM (VTOC)?\n         BE    MS47                YES\n         MVI   DSACTION,YV         SET RACF (VTOC FLAG)\n         B     MS47\nMS45     CLI   DSRTYPE,XRTV        VSAM (RACF)?\n         BE    MS48                YES\n         B     MS49\nMS46     CLI   DSTYPE,XTL          VSAM (LOCATE)?\n         BE    MS47                YES\n         CLI   DSTYPE,XTV          VSAM (VTOC)?\n         BNE   MS47                NO\n         MVI   DSACTION,YN         RESET RACF (VTOC FLAG)\nMS47     CLC   DSTYPE,DSRTYPE      SAME DATA-SET TYPE?\n         BE    MS48                YES\n         NI    MSSW2+1,OFF\nMS48     CLI   DSRUSE,0            RACF MODEL DATA-SET PROFILE?\n         BE    MSSW2               NO\n         CLC   DSRUSE,DSUSE        MODEL DEFINITION MATCHES?\n         BNE   MS58                NO\nMSSW2    B     MS51\n         OI    MSSW2+1,ON\nMS49     CLI   DSACTION,0          ANY ACTION ALREADY SCHEDULED?\n         BE    MS50                NO\n         CLI   DSACTION,YN         RESET HAS BEEN REQUESTED?\n         BE    MS50                YES\n         CLI   DSACTION,YV         IS IT SET RACF (VTOC FLAG)?\n         BNE   MS58                NO, WHAT?\n         MVI   DSACTION,YW         MODIFY WITH CHANGE RACF ALSO\n         B     MS51\nMS50     MVI   DSACTION,YF         INDICATE CHANGE RACF\nMS51     CLI   DSTYPE,0            VSAM (LOCATE OR VTOC)?\n         BNE   MS60                YES\n         CLI   DSVORG,XOM          NO, MULTI-VOLUME?\n         BE    MS52                YES\n         XR    R5,R5\n         B     MS90\nMS52     CLC   DSMVCNT,=H'0'       FIRST VOLUME?\n         BNE   MS53                NO, OTHER\n         LR    R5,R2               RETAIN THIS ENTRY\n         B     MS90\nMS53     LTR   R5,R5               FIRST VOLUME POINTER SET?\n         BZ    MS90                NO\n         CLC   DSTYPE(L'DSTYPE),DSTYPE-DSTABDS(R5)     CONTROL SEQ.\n         BNE   MS58\n         CLC   DSRACF(L'DSRACF),DSRACF-DSTABDS(R5)\n         BE    MS55\n         CLI   DSRACF,0\n         BE    MS54\n         MVI   DSACTION,YR         DELETE FROM RACF\n         B     MS90\nMS54     MVI   DSRCVRY,YRR         DEFINE TO RACF\n         CLI   DSACTION,YN         RESET HAS BEEN REQUESTED?\n         BNE   MS90                NO\n         CLI   DSTYPE,0            VSAM (LOCATE OR VTOC)?\n         BNE   MS90                YES\n         MVI   DSACTION,0          CLEAR IT (NOT NEEDED)\n         B     MS90\nMS55     CLC   DSPROT(L'DSPROT),DSPROT-DSTABDS(R5)\n         BE    MS57\n         BL    MS56\n         CLI   DSRACF-DSTABDS(R5),0\n         BNE   MS57\n         MVI   DSACTION,YN         RESET RACF (VTOC FLAG)\n         B     MS90\nMS56     CLI   DSRACF-DSTABDS(R5),0\n         BE    MS57\n         CLI   DSTYPE,0            VSAM (LOCATE OR VTOC)?\n         BNE   MS90                YES\n         MVI   DSACTION,YV         SET RACF (VTOC FLAG)\n         B     MS90\nMS57     CLC   DSRTYPE(L'DSRTYPE),DSRTYPE-DSTABDS(R5)\n         BE    MS90\nMS58     LR    R15,R2              RETAIN CURRENT ENTRY\n         LR    R2,R6               SET START OF GROUP\nMS59     CLR   R2,R4               END OF GROUP?\n         BL    *+L'*+6             NO\n         LR    R2,R15              YES, RESTORE CURRENT ENTRY\n         B     MS90\n         MVI   DSACTION,YZ         INDICATE UNKNOWN\n         MVI   DSRCVRY,0           CLEAR ANYTHING ELSE\n         LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     MS59\nMS60     CLI   DSACTION,0          ANY ACTION ALREADY SCHEDULED?\n         BNE   MS90                YES\n         CLI   DSRACF,0            RACF PROTECTED?\n         BE    MS90                NO\n         BAS   R14,MSLCV\n         CLI   DSTYPE,XTL          VSAM LOCATE?\n         BE    *+L'*+10            YES\n         CLC   DSCVOL(L'DSCVOL),LOCAREA+6    VSAM CAT. VOL. MATCHES?\n         B     *+L'*+6\n         CLC   DSVOLSN(L'DSVOLSN),LOCAREA+6  VSAM CAT. VOL. MATCHES?\n         BE    MS90                YES\n         MVC   DSCVOL(L'DSCVOL),LOCAREA+6    SET CATALOG VOLUME\n         MVI   DSACTION,YY         INDICATE MODIFY RACF\n         B     MS90\nMS61     CLI   DSPROT,0            DATA-SET PROTECTED?\n         BE    MS90                NO\n         MVI   DSACTION,YN         YES, RESET RACF (VTOC FLAG)\n         B     MS90\n         SPACE 1\nMSCTR    OC    DSALTVO,DSALTVO     ANY VOLUME?\n         BZ    MS90                NO, BYPASS\n         L     R3,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R3\nMSCTR1   CLI   0(R3),FMOFF         END OF TABLE?\n         BE    MS90                YES, VOLUME NOT ANALYZED\n         CLC   DDNVOL,DSALTVO      IS IT THIS VOLUME?\n         BER   R14                 YES, TAKE ACTION\n         LA    R3,DDNL(R3)         ADVANCE IN TABLE\n         B     MSCTR1              AND LOOP\n         DROP  R3\n         SPACE 1\n*        NOTE : IN VSAM, THE RACF PROFILE REFERS THE CATALOG\n*               VOLUME AND NOT THE DATA-SET VOLUME.\n         SPACE 1\nMSLCV    ST    R14,SVIXRTN\n         XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(LOCAREAL-256),LOCAREA+256\n         MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         TM    DSFLGS,ZFTNU        EXTRACT FIRST LEVEL INDEX\n         BZ    *+L'*+10\n         MVC   WORKDS(9),DSANME\n         B     *+L'*+6\n         MVC   WORKDS(9),DSNME\n         LA    R0,8\n         LA    R14,WORKDS+8\nMSLCV1   CLI   0(R14),C'.'\n         MVI   0(R14),C' '\n         BE    MSLCV2\n         BCTR  R14,0\n         BCT   R0,MSLCV1\n         LA    R15,65              WHAT? WRONG LEVEL INDEX\n         SLL   R15,2               (GET ADDRESS OF MSG ERM65)\n         AL    R15,ERRTAB\n         XR    R0,R0\n         XR    R14,R14\n         IC    R0,0(R15)\n         ICM   R14,B'0111',1(R15)\n         ALR   R14,R0\n         LA    R0,17\n         SLR   R14,R0\n         MVC   0(17,R14),DSNME\n         B     ERR65\nMSLCV2   L     R1,TBGVOL           SEARCH MAIN INDEX (CATALOG VOL.)\n         CLI   0(R1),FMOFF         END OF TABLE?\n         BE    MSLCV4              YES\n         USING CVPDS,R1\n         CLC   CVPNAME(L'CVPNAME),WORKDS     THIS ONE?\n         BE    MSLCV3              YES\n         LA    R1,CVPL(R1)         NO, NEXT ELEMENT\n         B     MSLCV2+L'MSLCV2\nMSLCV3   MVC   LOCAREA+6(L'CVPVOL),CVPVOL    GET CATALOG VOLUME\n         B     MSLCV8\n         DROP  R1\nMSLCV4   ST    R1,SVTBGPT          SAVE END OF TABLE POINTER\n         MVC   WORKD(L'WORKD),WORKDS    SAVE MAIN INDEX NAME\n        LOCATE VSAMINX             LOCATE MAIN INDEX (CATALOG VOL.)\n        @SNAPS SN,SLINX,INX\n         LTR   R15,R15             TEST LOCATE COMPLETION CODE\n         BZ    MSLCV7\n         CH    R15,=H'8'\n         BNE   MSLCV5\n         CH    R0,=H'8'\n         BNE   MSLCV5\n         OC    DSVOLSN,DSVOLSN     NOT FOUND, ON VOLUME?\n         BNZ   MS90                YES\n         MVI   DSACTION,YM         SIGNAL CONTROL\n         MVI   DSACTION-DSTABDS(R3),YM\n         B     MS90\nMSLCV5   CL    R15,=F'999'\n         BNH   *+L'*+10\n         MVC   LIXR15,=CL4' ---'\n         B     *+L'*+16\n         CVD   R15,WORKD\n         MVC   LIXR15,MASKERR\n         ED    LIXR15,WORKD+6\n         CL    R0,=F'999'\n         BNH   *+L'*+10\n         MVC   LIXR0,=CL4' ---'\n         B     *+L'*+16\n         CVD   R0,WORKD\n         MVC   LIXR0,MASKERR\n         ED    LIXR0,WORKD+6\n         MVC   LIXDSN,DSNME\n        @FILL  LIXDSN\nMSSW1    NOP   MSLCV6\n         OI    MSSW1+1,ON\n        @OUT   LIXT,=PL2'+40',U\nMSLCV6  @OUT   LIX\n         MVI   DSACTION,YZ         SIGNAL UNKNOWN\n         B     MS90\nMSLCV7   L     R1,SVTBGPT          RESTORE END OF TABLE POINTER\n         LA    R15,CVPL(R1)\n         CL    R15,TBGVOLE         ANY OVERFLOW?\n         BL    *+L'*+6             NO\n         XR    R15,R15             YES\n         B     ERR64\n         USING CVPDS,R1\n         MVC   CVPNAME(L'CVPNAME),WORKD ADD IN TABLE\n         MVC   CVPVOL(L'CVPVOL),LOCAREA+6\n         OI    CVPFL,CVPLOC\n         DROP  R1\n         MVI   0(R15),FMOFF        SET FINAL MARKER\nMSLCV8   L     R14,SVIXRTN\n         BR    R14\n         SPACE 1\nMS90     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLR   R2,R4               END OF GROUP?\n         BL    MS4                 NO, CONTINUE GROUP\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BNE   MS1                 NO, NEXT GROUP\n         DROP  R2\nMS99    @XE\n         EJECT\nVSAMINX CAMLST NAME,*-*,,*-*\n         SPACE 1\nSLINX    DC    A(*-*)\n         DC    A(L'WORKDS)\nSLINXS   DC    A(*-*)\n         DC    A(12)\nSLINXL   DC    A(*-*)\n         DC    XL1'80',AL3(LOCAREAL)\n         SPACE 1\nSVIXRTN  DC    F'0'\nSVTBGPT  DC    F'0'\n         SPACE 1\n         DC    AL1(L'LIXT)\nLIXT     DC    C'0LOCATE CATALOG VOLUME :'\n         DC    AL1(LLIX)\nLIX      DC    CL6' '\nLIXDSN   DC    CL44' ',C' - RC ='\nLIXR15   DC    CL4' ',C', IX ='\nLIXR0    DC    CL4' ',C'.'\nLLIX     EQU   *-LIX\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLA011": {"ttr": 8712, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x01V\\x01V\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 342, "newlines": 342, "modlines": 0, "user": "SYSPAJA"}, "text": "A011     TITLE 'CLEAN-UP - LIST DSNAME''S TABLE (A011).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA011    @XS    ALIAS=LISTDST\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    LD99                YES\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    LD99                NO, SKIP THE LIST\n         SPACE 1\n*        PRINT DSNAME'S TABLE.\n         SPACE 1\n        @LIST  PDSNL\n         LA    R1,PDSNL\n         ST    R1,SUBTLA           SET SUB-TITLE\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         LA    R3,LINE\n         USING FPRL,R3\n         XR    R5,R5\n         MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\nLD1      CLI   0(R2),FMOFF         END OF TABLE?\n         BE    LD90                YES\nLD2      MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE    CLEAR LINE\n         MVC   ZDSN,DSNME          DATA-SET NAME\n        @FILL  ZDSN\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BZ    P1                  NO\n         MVC   ZDSV(2),=C'V='\n         MVC   ZDSV+2(6),DSVOLSN   VOLUME SERIAL NUMBER\n         B     P2\nP1       MVC   ZDSV(L'ZDSV),=CL8' ...... '\nP2       CLI   DSVORG,0\n         BE    P3\n         MVC   ZDSO,DSVORG\n         B     P3A\nP3       OC    DSMVCNT,DSMVCNT\n         BZ    P4\nP3A      LH    R1,DSMVCNT\n         CVD   R1,WORKD\n         MVC   WORKD(4),=X'40202120'\n         ED    WORKD(4),WORKD+6\n         MVC   ZDSM(L'ZDSM),WORKD+4-L'ZDSM\nP4       OC    DSALTVO,DSALTVO     CAT. OR RACF VOLUME?\n         BZ    P4A                 NO\n         MVC   ZAV(2),=C'A='\n         MVC   ZAV+2(6),DSALTVO    SET VOLUME SERIAL NUMBER\n         B     P5\nP4A      MVC   ZAV(L'ZAV),=CL8' ...... '\nP5       CLI   DSRACF,XRD\n         BNE   P5A\n         MVC   ZR,=CL5'P-DIS'\n         B     P6\nP5A      CLI   DSRACF,XRG\n         BNE   P5B\n         MVC   ZR,=CL5'P-GEN'\n         B     P6\nP5B      CLI   DSRACF,0\n         BE    P5C\n         MVC   ZR+2(L'DSRACF),DSRACF\n         B     P6\nP5C      MVC   ZR,=CL5'-----'\nP6       CLI   DSPROT,XPR\n         BNE   P6A\n         MVC   ZDSP,=CL3'SET'\n         B     P7\nP6A      CLI   DSPROT,0\n         BE    P6B\n         MVC   ZDSP+1(L'DSPROT),DSPROT\n         B     P7\nP6B      MVC   ZDSP,=CL3'---'\nP7       CLI   DSACTION,YS\n         BNE   P7A\n         MVC   ZACT,=CL9'SCRATCH'\n         B     P7X\nP7A      CLI   DSACTION,YT\n         BNE   P7B\n         MVC   ZACT,=CL9'SC. TEMP.'\n         B     P7X\nP7B      CLI   DSACTION,YD\n         BNE   P7C\n         MVC   ZACT,=CL9'SC. DISK'\n         B     P7X\nP7C      CLI   DSACTION,YU\n         BNE   P7D\n         MVC   ZACT,=CL9'UNCATALOG'\n         B     P7X\nP7D      CLI   DSACTION,YR\n         BNE   P7E\n         MVC   ZACT,=CL9'DEL. RACF'\n         B     P70\nP7E      CLI   DSACTION,YA\n         BNE   P7F\n         MVC   ZACT,=CL9'ADD RACF'\n         B     P70\nP7F      CLI   DSACTION,YF\n         BNE   P7G\n         MVC   ZACT,=CL9'CH. RACF'\n         B     P70\nP7G      CLI   DSACTION,YN\n         BNE   P7H\n         MVC   ZACT,=CL9'OFF VTOC'\n         B     P70\nP7H      CLI   DSACTION,YV\n         BNE   P7I\n         MVC   ZACT,=CL9'ON VTOC'\n         B     P70\nP7I      CLI   DSACTION,YW\n         BNE   P7J\n         MVC   ZACT,=CL9'VTOC+RACF'\n         B     P70\nP7J      CLI   DSACTION,YC\n         BNE   P7K\n         MVC   ZACT,=CL9'CATALOG'\n         B     P7X\nP7K      CLI   DSACTION,YY\n         BNE   P7Y\n         MVC   ZACT,=CL9'MOD. RACF'\n         MVC   ZDSV(2),=C'C='\n         MVC   ZDSV+2(6),DSCVOL\n         B     P70\nP7X      CLI   DSTYPE,0            VSAM INFO?\n         BE    P70                 NO\n         MVI   DSACTION,YM\n         B     P7Y0\nP7Y      CLI   DSACTION,YM\n         BNE   P7Y1\nP7Y0     LA    R1,=CL7'CONTROL'\n         B     P7YY\nP7Y1     CLI   DSACTION,YE\n         BNE   P7Y2\n         LA    R1,=CL7'EXEMPT'\n         B     P7YY\nP7Y2     CLI   DSACTION,YZ\n         BNE   P7Z\n         LA    R1,=CL7'* ??? *'\nP7YY     MVI   ZSEP,C'-'\n         CLI   ZACT,C' '\n         BNE   *+L'*+6\n         MVC   ZACT,=CL9'- - - - -'\n         MVC   ZRCVRY(L'ZRCVRY),0(R1)\n         B     P8\nP7Z      CLI   DSACTION,0\n         BE    P70\n         MVC   ZACT,=CL9'---- ----'\n         MVC   ZACT+4(L'DSACTION),DSACTION\nP70      CLI   DSRCVRY,0\n         BE    P8\n         CLI   DSRCVRY,YRU\n         BNE   P70A\n         MVI   ZSEP,C'U'\n         B     P8\nP70A     MVI   ZSEP,C'-'\n         CLI   ZACT,C' '\n         BNE   *+L'*+6\n         MVC   ZACT,=CL9'- - - - -'\n         CLI   DSRCVRY,YRR\n         BNE   P70B\n         MVC   ZRCVRY,=CL7'C. RACF'\n         B     P8\nP70B     CLI   DSRCVRY,YRA\n         BNE   P70C\n         MVC   ZRCVRY,=CL7'A. RACF'\n         B     P8\nP70C     CLI   DSRCVRY,YRM\n         BNE   P70D\n         MVC   ZRCVRY,=CL7'M-VOL'\n         B     P8\nP70D     CLI   DSRCVRY,YRS\n         BNE   P70E\n         MVC   ZRCVRY,=CL7'S-VOL'\n         B     P8\nP70E     MVC   ZRCVRY,=CL7'--- ---'\n         MVC   ZRCVRY+3(L'DSRCVRY),DSRCVRY\nP8       CLI   DSCAT,XCSR\n         BNE   P8A\n         MVC   ZC,=CL5'R-CAT'\n         B     P9\nP8A      CLI   DSCAT,XCSI\n         BNE   P8B\n         MVC   ZC,=CL5'I-CAT'\n         B     P9\nP8B      CLI   DSCAT,XCSL\n         BNE   P8C\n         MVC   ZC,=CL5'L-CAT'\n         B     P9\nP8C      CLI   DSCAT,0\n         BE    P8D\n         MVC   ZC+2(L'DSCAT),DSCAT\n         B     P9\nP8D      MVC   ZC,=CL5'-----'\nP9       CLI   DSTYPE,XTV\n         BNE   P9A\n         MVC   ZDST,=CL4'VSAM'\n         B     P10\nP9A      CLI   DSTYPE,XTL\n         BNE   P9B\n         MVC   ZDST,=CL4'VS-L'\n         B     P10\nP9B      CLI   DSTYPE,0\n         BE    P9C\n         MVC   ZDST+1(L'DSTYPE),DSTYPE\n         B     P10\nP9C      MVC   ZDST,=CL4'----'\nP10      CLI   DSRTYPE,XRTV\n         BNE   P10A\n         MVC   ZRT,=CL5'VSAM'\n         B     P11\nP10A     CLI   DSRTYPE,0\n         BE    P10B\n         MVC   ZRT+2(L'DSRTYPE),DSRTYPE\n         B     P11\nP10B     MVC   ZRT,=CL5'-----'\nP11      CLI   DSUSE,XUM\n         BNE   P11A\n         MVC   ZDSU,=CL3'MDL'\n         B     P12\nP11A     CLI   DSUSE,XUG\n         BNE   P11B\n         MVC   ZDSU,=CL3'GDG'\n         B     P12\nP11B     CLI   DSUSE,XUI\n         BNE   P11C\n         MVC   ZDSU,=CL3'NGI'\n         B     P12\nP11C     CLI   DSUSE,0\n         BE    P11D\n         MVC   ZDSU+1(L'DSUSE),DSUSE\n         B     P12\nP11D     MVC   ZDSU,=CL3'---'\nP12      CLI   DSRUSE,XRUM\n         BNE   P12A\n         MVC   ZRU,=CL3'MDL'\n         B     LD10\nP12A     CLI   DSRUSE,0\n         BE    P12B\n         MVC   ZRU+1(L'DSRUSE),DSRUSE\n         B     LD10\nP12B     MVC   ZRU,=CL3'---'\n         DROP  R3\nLD10     TM    RUSREQ,RUSKOFF      SKIP UNPROCESSED VOLUMES?\n         BO    PRS1                YES\n         TM    RUNIND,RUDSH        SHORT LIST WANTED?\n         BZ    LD20                NO, COMPLETE\nPRS1     LTR   R5,R5               GROUP TO BE PRINTED?\n         BZ    PRS2                NO\n         CLC   DSNME(L'DSNME),DSNME-DSTABDS(R5)   SAME DSNAME?\n         BE    LD20                YES\nPRS2     LR    R5,R2               RETAIN THIS ENTRY\nPRS3     TM    RUNIND,RUCATMIS     ALL CATALOGS ARE PRESENT?\n         BO    PRS4                NO\n         OC    DSVOLSN,DSVOLSN     ON VOLUME?\n         BNZ   PRS4                YES\n         TM    RUSREQ,RUSKOFF      SKIP UNPROCESSED VOLUMES?\n         BO    PRS6                YES\n         CLI   DSUSE,0             MODEL GDG, GDG OR NULL GDG INDEX?\n         BE    PRS10               NO, LIST\n         TM    RUNOPT,RUGDGL       LIST REQUESTED?\n         BO    PRS10               YES, LIST\n         B     PRS6\nPRS4     CLI   DSVORG,0            MULTI-VOLUME OR FILE SEQ.?\n         BNE   PRS10               YES, LIST\n         CLI   DSUSE,0             MODEL GDG, GDG OR NULL GDG INDEX?\n         BE    PRS5                NO\n         TM    RUNOPT,RUGDGL       LIST REQUESTED?\n         BO    PRS10               YES, LIST\n         B     PRS6\nPRS5     TM    RUNIND,RUCATMIS     ALL CATALOGS ARE PRESENT?\n         BZ    PRS6                YES\n         CLI   DSACTION,YT         SCRATCH TEMPORARY?\n         BE    PRS10               YES, LIST\n         B     PRS7\nPRS6     CLI   DSACTION,0          SOME ACTION ON DATASET?\n         BNE   PRS10               YES, LIST\n         CLI   DSRCVRY,0           SOME RECOVERY ON DATASET?\n         BNE   PRS10               YES, LIST\nPRS7     TM    RUSREQ,RUSVSAM      LIST ALL VSAM REQUESTED?\n         BZ    PRS8                NO\n         CLI   DSTYPE,0            VSAM?\n         BNE   PRS10               YES, LIST\n         CLI   DSRTYPE,0           VSAM?\n         BNE   PRS10               YES, LIST\nPRS8     LA    R2,DSTABL(R2)       SEARCH GROUP\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    LD90                YES\n         CLC   DSNME(L'DSNME),DSNME-DSTABDS(R5)   SAME DSNAME?\n         BE    PRS3                YES\n         XR    R5,R5               NO\n         B     LD2\nPRS10    LR    R2,R5               LIST THIS GROUP\nLD20     CLC   WORKDS,DSNME\n         BE    LD21\n         MVC   WORKDS,DSNME\n         B     LD22\nLD21     MVI   LINE+ZDSN-FPRL,C' '\n         MVC   LINE+ZDSN-FPRL+1(L'ZDSN-1),LINE+ZDSN-FPRL\nLD22    @LIST  LINE\n         CLI   DSANME,0            IS IT AN ALIAS?\n         BE    LD24                NO\n         TM    RUNIND,RUDSH        SHORT LIST WANTED?\n         BZ    LD23                NO, COMPLETE\n         CLC   DSMVCNT,=H'0'       YES, FIRST VOLUME REFERENCE?\n         BNE   LD24                NO\nLD23     MVI   LINE,C' '           YES, PRINT TRUE NAME\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE+11(15),=CL15'ALIAS NAME OF :'\n         MVC   LINE+27(L'DSANME),DSANME\n        @LIST  LINE\nLD24     LA    R2,DSTABL(R2)       ADVANCE IN DSNAME TABLE\n         B     LD1                 GO TO PRINT NEXT ONE\n         DROP  R2\nLD90     XC    SUBTLA,SUBTLA       INHIBIT SUB-TITLE\n         L     R1,DSTABNE\n         CVD   R1,WORKD\n         ED    PDSNEN,WORKD+5\n        @LIST  PDSNE\nLD99    @XE\n         EJECT\n         DC    AL1(PDSNLL)\nPDSNL    DC    C'1',CL44'<--- DATA-SET NAME ------------------------>'\n         DC    C' ',CL32'<--- VTOC + CATALOG ----------->'\n         DC    C' ',CL15'<--- RACF ---->'\n         DC    C' ',CL8'-VOLUME-'\n         DC    C' ',CL11'--ACTIONS--'\n         DC    C' ',CL7'INT.REQ'\nPDSNLL   EQU   *-PDSNL\n         DC    AL1(PDSNEL)\nPDSNE    DC    C'0END OF DATA-SET NAMES LIST '\n         DC    C'(TOTAL OF DSNAME''S ENTRIES :'\nPDSNEN   DC    XL6'402020202120',C').'\nPDSNEL   EQU   *-PDSNE\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n        #FPRL\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA012": {"ttr": 8964, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x01\\xd8\\x01\\xd8\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 472, "newlines": 472, "modlines": 0, "user": "SYSPAJA"}, "text": "A012     TITLE 'CLEAN-UP - RACF RECOVERY PROCESSING (A012).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA012    @XS    ALIAS=RACFRCV\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    RRP99               YES\n         TM    STATUS,STBRACF      RACF MUST BE BYPASSED?\n         BO    RRP99               YES\n         SPACE 1\n*        RACF (DISCRETE PROFILES ONLY) RECOVERY PROCESSING.\n         SPACE 1\n         TM    RUNIND,RUCATMIS     ALL CATALOGS ARE PRESENT?\n         BO    RRP99               NO\n         TM    RUNIND,RUNORACF     NO RACF ACTION WANTED?\n         BZ    RRP1                NO, REQUESTED\n         TM    RUNOPT,RUNOSET      NO VTOC ACTION WANTED?\n         BZ    RRP1                NO, REQUESTED\n         TM    RUNIND,RUNOSCR      NOSCRATCH MODE?\n         BO    RRP99               YES, BYPASS\nRRP1     L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    RRP99               YES\n        $VTOCDR VTRDBUF,,MF=(L,RRPWORK)\n         L     R7,WK1A             RACF WORK AREA\n         USING WKDS,R7\n         TM    RUNIND,RUTEST       TEST MODE?\n         BZ    RRP2                NO\n         MVC   VTUPRTT,=CL16'SIMULATED (TEST)'\nRRP2     LR    R6,R2               RETAIN GROUP STARTING ENTRY\nRRP3     LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    RRP4                YES\n         CLC   DSNME(L'DSNME),DSNME-DSTABDS(R6)   SAME DSNAME?\n         BE    RRP3                YES, CONTINUE TO SEARCH GROUP\nRRP4     LR    R4,R2               RETAIN END OF GROUP\n         LR    R2,R6               GET STARTING ENTRY\nRRP5     TM    RUNIND,RUNORACF     NO RACF ACTION WANTED?\n         BO    RRP6                YES, BYPASS\n         CLI   DSACTION,YR         DELETE FROM RACF?\n         BE    RRP20               YES\n         CLI   DSACTION,YY         MODIFY RACF?\n         BE    RRP30               YES\n         CLI   DSACTION,YA         ADD TO RACF?\n         BE    RRP33               YES\n         CLI   DSACTION,YF         CHANGE RACF?\n         BE    RRP50               YES\nRRP6     TM    RUNIND,RUNOSCR      NOSCRATCH MODE?\n         BO    RRP8                YES, BYPASS\n         CLI   DSACTION,YS         DATA-SET MUST BE SCRATCHED?\n         BE    RRP7                YES\n         CLI   DSACTION,YT         SCRATCH TEMPORARY?\n         BE    RRP7                YES\n         CLI   DSACTION,YD         SCRATCH DISK?\n         BNE   RRP8                NO\nRRP7     CLI   DSPROT,XPR          IS IT RACF ON (VTOC FLAG)?\n         BNE   RRP8                NO\n         CLI   DSRACF,XRD          YES, IS IT RACF DISCRETE?\n         BNE   RRP10               NO, GO STRIP OFF BIT\nRRP8     TM    RUNOPT,RUNOSET      NO VTOC ACTION WANTED?\n         BO    RRP90               YES, GO GET NEXT ONE\n         CLI   DSACTION,YN         OFF RACF (VTOC FLAG)?\n         BE    RRP10               YES\n         CLI   DSACTION,YV         ON RACF (VTOC FLAG)?\n         BE    RRP10               YES\n         CLI   DSACTION,YW         ON RACF (VTOC FLAG) + CHANGE RACF?\n         BNE   RRP90               NO, GO GET NEXT ONE\nRRP10    L     R5,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R5\nRRP11    CLI   0(R5),FMOFF         END OF TABLE?\n         BE    ERR63               YES, ERROR\n         CLC   DDNNME,DSDDN        IS IT THIS DD-NAME?\n         BE    RRP12               YES\n         LA    R5,DDNL(R5)         ADVANCE IN TABLE\n         B     RRP11               AND LOOP\nRRP12    MVC   VSNERR,DDNVOL\n        $VTOCDO DDNNME,MF=(E,RRPDO)     OPEN VTOC FOR DIRECT ACCESS\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR27\n         OI    DDNALL,DDNXD        SET OPENED\n        $VTOCDR ,DSCBCC,MF=(E,RRPWORK)  GET FMT1 DSCB (MBBCCHHR)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR28\n         LA    R3,VTRDBUF          ADDRESS VTOC READ BUFFER\n         USING FMT1DSCB,R3\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    RRP13               YES, ASSUME DSNAME'S O.K.\n         CLC   DS1DSNAM,DSNME      RIGHT ONE?\n         BE    RRP13               YES, O.K.\n        @OUT   VTE                 NO, DSNAME'S ERROR\n         UNPK  VTEM1A(9),DSCBCC(5)\n         UNPK  VTEM1A+8(9),DSCBCC+4(5)\n         MVI   VTEM1A+L'VTEM1A,C','\n         TR    VTEM1A,TRTAB-X'F0'\n         MVC   VTEM1B,DSVOLSN\n        @OUT   VTEM1\n         MVC   VTEM2A,=CL6'TABLED'\n         MVC   VTEM2B,DSNME\n        @OUT   VTEM2\n         MVC   VTEM2A,=CL6'DSCB''S'\n         MVC   VTEM2B,DS1DSNAM\n        @OUT   (R1)\n         XR    R15,R15\n         B     ERR29\nRRP13    CLI   DSACTION,YV         ON RACF (VTOC FLAG) REQUESTED?\n         BE    RRP14               YES\n         CLI   DSACTION,YA         ADD TO RACF REQUESTED?\n         BE    RRP14               YES\n         CLI   DSACTION,YW         ON RACF + CHANGE RACF REQUESTED?\n         BNE   RRP15               NO\nRRP14    OI    DS1DSIND,DS1IND40   YES, SET ON BIT\n         MVC   VTUDSP,=CL6'SET.'\n         B     RRP16\nRRP15    NI    DS1DSIND,255-DS1IND40    STRIP OFF BIT\n         MVC   VTUDSP,=CL6'NOSET.'\nRRP16    TM    RUNIND,RUTEST       TEST RUN?\n         BO    RRPSW               YES\n        $VTOCDW ,DSCBCC,MF=(E,RRPWORK)  RE-WRITE ... (MBBCCHHR)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR30\n         DROP  R3\nRRPSW    NOP   RRP17\n         OI    RRPSW+1,ON\n        @OUT   VTUPRT,=PL2'+40',U\nRRP17    MVC   VTUDS,DSNME         LIST DSNAME\n         MVC   VTUDSV,DSVOLSN\n        @FILL  VTUDS\n        @OUT   VTUPR\n         NI    DDNALL,255-DDNXD    SET CLOSED\n        $VTOCDC\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR31\n         DROP  R5\n         MVC   VSNERR,=CL6' '\n         TM    RUNIND,RUNORACF     NO RACF ACTION WANTED?\n         BO    RRP90               YES, BYPASS\n         CLI   DSACTION,YW         ON RACF (VTOC FLAG) + CHANGE RACF?\n         BE    RRP50               YES\n         B     RRP90\n         SPACE 1\nRRP20    BAS   R14,RRP70           DELETE DATA-SET FROM RACF\n         TM    DSFLGS,ZFTNU\n         BO    *+L'*+10\n         OC    DSVOLSN,DSVOLSN\n         BNZ   *+L'*+10\n         MVC   OLDVOL,DSALTVO      SET VOLUME\n         B     *+L'*+6\n         MVC   OLDVOL,DSVOLSN      SET VOLUME\n         MVC   RADEVVL,OLDVOL\n         MVC   RADEVOP,=CL4'O.K.'\n         MVI   RADEVLG,RADEVLS\n         XR    R15,R15             SET IN CASE OF TEST RUN\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    RRP21               YES\n         LA    R0,ZERODS\n        ICHEINTY DELETE,TYPE='DS',ENTRY=(R0),VOLUME=OLDVOL\nRRP21    LTR   R15,R15\n         BZ    RRP22\n         MVC   RADEVRC,=CL2' '\n         MVI   RADEVAC,C' '\n         MVC   RADEVOP,=CL4'(RC='\n         MVI   RADEVLG,RADEVLL\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  RADEVRC,WORKD+6(2)\n         OI    RADEVRC+1,C'0'\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   RRP22               NO\n         STC   R0,RADEVAC\n         OI    RADEVAC,C'0'\nRRP22    MVC   RADEVDS,ZERODSN\n        @FILL  RADEVDS\n         TM    RRPSW+1,ON\n         BO    RRP23\n         OI    RRPSW+1,ON\n        @OUT   VTUPRT,=PL2'+40',U\nRRP23   @OUT   RADEVFPR\n         B     RRP90\n         SPACE 1\nRRP30    BAS   R14,RRP70           MODIFY RACF DATA-SET PROFILE\n         MVC   NEWVOL,DSCVOL       SET VOLUMES\n         TM    DSFLGS,ZFTNU\n         BO    RRP31\n         OC    DSALTVO,DSALTVO\n         BNZ   RRP31\n         MVC   OLDVOL,DSVOLSN\n         B     RRP32\nRRP31    MVC   OLDVOL,DSALTVO\nRRP32    MVC   RAADVVO,=CL6'XCH''D '\n         B     RRP40\n         SPACE 1\nRRP33    BAS   R14,RRP70           ADD DATA-SET TO RACF\n         TM    DSFLGS,ZFTNU\n         BZ    *+L'*+10\n         MVC   NEWVOL,DSCVOL       SET VOLUME TO ADD\n         B     *+L'*+6\n         MVC   NEWVOL,DSVOLSN      SET VOLUME TO ADD\n         LR    R15,R2              RETAIN CURRENT ENTRY\n         LR    R2,R6               GET START OF GROUP\nRRP34    CLR   R2,R15              MYSELF?\n         BE    RRP35               YES\n         CLR   R2,R4               END OF GROUP?\n         BNL   RRP36               YES, WHAT? GO SIGNAL THIS\n         CLI   DSRCVRY,YRU         USE TO ADD RACF?\n         BE    RRP38               YES\nRRP35    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     RRP34\nRRP36    LR    R2,R15              RESTORE CURRENT ENTRY\n         MVC   RADERDS,DSNME\n        @FILL  RADERDS\n         MVC   RADERVL,DSVOLSN\n         TM    RRPSW+1,ON\n         BO    RRP37\n         OI    RRPSW+1,ON\n        @OUT   VTUPRT,=PL2'+40',U\nRRP37   @OUT   RADERR\n         B     RRP90\nRRP38    MVC   OLDVOL,DSALTVO      SET VOLUME TO DELETE\n         MVI   DSRCVRY,0           CANCEL, IT'S USED NOW\n         LR    R2,R15              RESTORE CURRENT ENTRY\n         MVC   RAADVVO,=CL6'ADDED '\nRRP40    MVC   RAADVVL,NEWVOL\n         MVC   RAADVOP,=CL4'O.K.'\n         MVI   RAADVLG,RAADVLS\n         XR    R15,R15             SET IN CASE OF TEST RUN\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    RRP41               YES\n         LA    R0,ZERODS\n        ICHEINTY ALTERI,TYPE='DS',ENTRY=(R0),VOLUME=OLDVOL,            C\n               ACTIONS=(RAM)\nRRP41    LTR   R15,R15\n         BZ    RRP42\n         MVC   RAADVRC,=CL2' '\n         MVI   RAADVAC,C' '\n         MVC   RAADVOP,=CL4'(RC='\n         MVI   RAADVLG,RAADVLL\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  RAADVRC,WORKD+6(2)\n         OI    RAADVRC+1,C'0'\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   RRP42               NO\n         STC   R0,RAADVAC\n         OI    RAADVAC,C'0'\nRRP42    MVC   RAADVDS,ZERODSN\n        @FILL  RAADVDS\n         TM    RRPSW+1,ON\n         BO    RRP43\n         OI    RRPSW+1,ON\n        @OUT   VTUPRT,=PL2'+40',U\nRRP43   @OUT   RAADVFPR\n         CLI   DSACTION,YY         WAS MODIFY?\n         BE    RRP90               YES\n         TM    RUNOPT,RUNOSET      NO VTOC ACTION WANTED?\n         BO    RRP90               YES, GO GET NEXT ONE\n         CLI   DSTYPE,XTL          VSAM (LOCATE)?\n         BE    RRP90               YES, DON'T SET\n         CLI   DSPROT,XPR          IS IT RACF ON (VTOC FLAG)?\n         BNE   RRP10               NO, GO SET IT\n         B     RRP90\n         SPACE 1\nRRP50    BAS   R14,RRP70           CHANGE RACF FOR A DATA-SET\n         TM    DSFLGS,ZFTNU\n         BZ    *+L'*+10\n         MVC   OLDVOL,DSALTVO      SET VOLUME\n         B     *+L'*+6\n         MVC   OLDVOL,DSVOLSN      SET VOLUME\n         XC    WORKRBA(WORKBSLL),WORKRBA\n         LA    R0,ZERODS\n        ICHEINTY LOCATE,TYPE='DS',ENTRY=(R0),VOLUME=OLDVOL,            C\n               WKAREA=(R7),ACTIONS=(RAL)\n         LTR   R15,R15\n         BZ    RRP53\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  RACFLOCR,WORKD+6(2)\n         OI    RACFLOCR+1,C'0'\n         MVI   RACFLOCA,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   RRP51               NO\n         STC   R0,RACFLOCA\n         OI    RACFLOCA,C'0'\nRRP51    MVC   RACFLOCV,OLDVOL\n         MVC   RACFLOCN,ZERODSN\n        @FILL  RACFLOCN\n         TM    RRPSW+1,ON\n         BO    RRP52\n         OI    RRPSW+1,ON\n        @OUT   VTUPRT,=PL2'+40',U\nRRP52   @OUT   RACFLOC\n         B     RRP90\nRRP53    OC    WORKTL,WORKTL       DATA RETURNED?\n         BZ    *+L'*+10            NO\n         CLC   WORKVRA(2),=XL2'0001'    DSTYPE RECEIVED BACK?\n         BE    RRP55               YES\n         MVC   RAERTYV,OLDVOL\n         MVC   RAERTYN,ZERODSN\n        @FILL  RAERTYN\n         TM    RRPSW+1,ON\n         BO    RRP54\n         OI    RRPSW+1,ON\n        @OUT   VTUPRT,=PL2'+40',U\nRRP54   @OUT   RAERTY\n         B     RRP90\nRRP55    MVC   NEWTY(L'NEWTY),WORKVRA+2\n         CLI   DSTYPE,0            VSAM DATA-SET?\n         BE    RRP56               NO\n         CLI   DSRTYPE,0           VSAM RACF DEFINED?\n         BNE   RRP57               YES, WHAT? GO SIGNAL THIS\n         OI    NEWTY,DSPTP         SET VSAM\n         B     RRP60\nRRP56    CLI   DSRTYPE,0           VSAM RACF DEFINED?\n         BNE   RRP59               YES\nRRP57    MVC   RACHRDS,ZERODSN\n        @FILL  RACHRDS\n         MVC   RACHRVL,OLDVOL\n         TM    RRPSW+1,ON\n         BO    RRP58\n         OI    RRPSW+1,ON\n        @OUT   VTUPRT,=PL2'+40',U\nRRP58   @OUT   RACHRR\n         B     RRP90\nRRP59    NI    NEWTY,255-DSPTP     STRIP OFF VSAM\nRRP60    MVC   RACHVVL,OLDVOL\n         MVC   RACHVOP,=CL4'O.K.'\n         MVI   RACHVLG,RACHVLS\n         XR    R15,R15             SET IN CASE OF TEST RUN\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    RRP61               YES\n         LA    R0,ZERODS\n        ICHEINTY ALTERI,TYPE='DS',ENTRY=(R0),VOLUME=OLDVOL,            C\n               ACTIONS=(RAD)\nRRP61    LTR   R15,R15\n         BZ    RRP62\n         MVC   RACHVRC,=CL2' '\n         MVI   RACHVAC,C' '\n         MVC   RACHVOP,=CL4'(RC='\n         MVI   RACHVLG,RACHVLL\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  RACHVRC,WORKD+6(2)\n         OI    RACHVRC+1,C'0'\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   RRP62               NO\n         STC   R0,RACHVAC\n         OI    RACHVAC,C'0'\nRRP62    MVC   RACHVDS,ZERODSN\n        @FILL  RACHVDS\n         TM    RRPSW+1,ON\n         BO    RRP63\n         OI    RRPSW+1,ON\n        @OUT   VTUPRT,=PL2'+40',U\nRRP63   @OUT   RACHVFPR\n         B     RRP90\nRRP70    TM    DSFLGS,ZFTNU        BUILD DATA-SET NAME FOR RACF\n         BZ    *+L'*+10\n         MVC   ZERODSN,DSANME\n         B     *+L'*+6\n         MVC   ZERODSN,DSNME\n         LA    R0,L'ZERODSN        LOOK FOR LENGTH OF DSNAME\n         LA    R1,ZERODSN+L'ZERODSN-1\nRRP71    CLI   0(R1),C' '\n         BNE   RRP72\n         BCTR  R1,0\n         BCT   R0,RRP71\nRRP72    STC   R0,ZERODS           SET LENGTH\n         BR    R14                 RETURN\n         SPACE 1\nRRP90    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLR   R2,R4               END OF GROUP?\n         BL    RRP5                NO, CONTINUE GROUP\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BNE   RRP2                NO, LOOP\n         DROP  R2,R7\nRRP99   @XE\n         EJECT\nRRPDO   $VTOCDO ,MF=L\nRRPWORK  DC    2F'0'\n         SPACE 1\nRAM     ICHEACTN FIELD=VOLSER,FLDATA=(6,NEWVOL),TESTS=RATT\nRAL     ICHEACTN FIELD=DSTYPE,TESTS=RATT\nRAD     ICHEACTN FIELD=DSTYPE,FLDATA(1,NEWTY),TESTS=RATT\nRATT    ICHETEST FIELD=VOLSER,FLDATA=(6,OLDVOL),COND=EQ\n         SPACE 1\nOLDVOL   DC    CL6' '\nNEWVOL   DC    CL6' '\nNEWTY    DC    XL1'0'\n         EJECT\n         DC    AL1(L'VTE)\nVTE      DC    C'1===== DIRECT VTOC READ BY MBBCCHHR OBTAIN A FORMAT 1 C\n               DSCB WITH A DIFFERENT DATA-SET NAME ====='\n         DC    AL1(LVTEM1)\nVTEM1    DC    C'0      MBBCCHHR : '\nVTEM1A   DC    CL16' ',C', VOLUME : '\nVTEM1B   DC    CL6' ',C'.'\nLVTEM1   EQU   *-VTEM1\n         DC    AL1(LVTEM2)\nVTEM2    DC    C'0      '\nVTEM2A   DC    CL6' ',C' DSNAME : '\nVTEM2B   DC    CL44' '\nLVTEM2   EQU   *-VTEM2\n         DC    AL1(L'VTUPRT+L'VTUPRTT)\nVTUPRT   DC    C'0RACF PROCESSING : '\nVTUPRTT  DC    CL16' '\n         DC    AL1(VTUPRL)\nVTUPR    DC    CL6' '\nVTUDS    DC    CL44' ',C' - VOLUME : '\nVTUDSV   DC    CL6' ',C' - RACF PROTECTION BIT : '\nVTUDSP   DC    CL6' '\nVTUPRL   EQU   *-VTUPR\nRADEVLG  DC    AL1(*-*)\nRADEVFPR DC    CL6' '\nRADEVDS  DC    CL44' ',C' - VOLUME : '\nRADEVVL  DC    CL6' ',C' - RACF PROFILE DELETED '\nRADEVOP  DC    CL4' '\nRADEVLS  EQU   *-RADEVFPR\nRADEVRC  DC    CL2' ',C'/AC='\nRADEVAC  DC    CL1' ',C').'\nRADEVLL  EQU   *-RADEVFPR\nRAADVLG  DC    AL1(*-*)\nRAADVFPR DC    CL6' '\nRAADVDS  DC    CL44' ',C' - VOLUME : '\nRAADVVL  DC    CL6' ',C' - RACF PROFILE '\nRAADVVO  DC    CL6' '\nRAADVOP  DC    CL4' '\nRAADVLS  EQU   *-RAADVFPR\nRAADVRC  DC    CL2' ',C'/AC='\nRAADVAC  DC    CL1' ',C').'\nRAADVLL  EQU   *-RAADVFPR\n         DC    AL1(RADERRL)\nRADERR   DC    CL3' ',CL3'-- '\nRADERDS  DC    CL44' ',C' - VOLUME : '\nRADERVL  DC    CL6' ',C' - RACF PROFILE NOT ADDED '\n         DC    C'(USE NOT FOUND). --'\nRADERRL  EQU   *-RADERR\n         DC    AL1(RACFLOCL)\nRACFLOC  DC    CL3' ',CL3'-- '\nRACFLOCN DC    CL44' ',C' - VOLUME : '\nRACFLOCV DC    CL6' ',C' - RACF LOCATE (RC='\nRACFLOCR DC    CL2' ',C'/AC='\nRACFLOCA DC    CL1' ',C').'\nRACFLOCL EQU   *-RACFLOC\n         DC    AL1(RAERTYL)\nRAERTY   DC    CL3' ',CL3'-- '\nRAERTYN  DC    CL44' ',C' - VOLUME : '\nRAERTYV  DC    CL6' ',C' - DSTYPE NOT RECEIVED BACK.'\nRAERTYL  EQU   *-RAERTY\nRACHVLG  DC    AL1(*-*)\nRACHVFPR DC    CL6' '\nRACHVDS  DC    CL44' ',C' - VOLUME : '\nRACHVVL  DC    CL6' ',C' - RACF PROFILE CHANGED '\nRACHVOP  DC    CL4' '\nRACHVLS  EQU   *-RACHVFPR\nRACHVRC  DC    CL2' ',C'/AC='\nRACHVAC  DC    CL1' ',C').'\nRACHVLL  EQU   *-RACHVFPR\n         DC    AL1(RACHRRL)\nRACHRR   DC    CL3' ',CL3'-- '\nRACHRDS  DC    CL44' ',C' - VOLUME : '\nRACHRVL  DC    CL6' ',C' - RACF PROFILE NOT CHANGED '\n         DC    C'(NOT TYPE). --'\nRACHRRL  EQU   *-RACHRR\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        ICHRRPF\nFMT1DSCB DSECT\n        IECSDSL1 (1)\n         EJECT\n        PRINT  GEN\n        #WKDS\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA013": {"ttr": 9217, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x01~\\x01~\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 382, "newlines": 382, "modlines": 0, "user": "SYSPAJA"}, "text": "A013     TITLE 'CLEAN-UP - SCRATCH/UNCATALOG PROCESSING (A013).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA013    @XS    ALIAS=SCRUNC\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    SUP99               YES\n         LA    R1,WORKDS\n         ST    R1,CAMSCR+4\n         ST    R1,CAMUNC+4\n         ST    R1,CAMUNV+4\n         ST    R1,CAMCDR+4\n         MVC   SCACNAM,USID\n         SPACE 1\n*        SCRATCH/UNCATALOG DATA-SETS PROCESSING.\n         SPACE 1\n         TM    RUNIND,RUNOSCR      NOSCRATCH MODE?\n         BO    SUP20               YES, BYPASS\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         TM    RUNIND,RUTEST       TEST MODE?\n         BZ    SUP1                NO\n         MVC   SCRPRTT,=CL16'SIMULATED (TEST)'\nSUP1     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SUP20               YES\n         TM    RUNIND,RUCATMIS     ALL CATALOGS ARE PRESENT?\n         BO    SUP2                NO\n         CLI   DSACTION,YS         DATA-SET MUST BE SCRATCHED?\n         BE    SUP3                YES\n         CLI   DSACTION,YD         SCRATCH DISK?\n         BE    SUP3                YES\nSUP2     CLI   DSACTION,YT         SCRATCH TEMPORARY?\n         BNE   SUP17               NO\nSUP3     CLI   DSCAT,XCSI          ICF CATALOG INFO?\n         BE    SUP4                YES\nSUPSW1   NOP   SUP4\n         OI    SUPSW1+1,ON\n        @OUT   SCRPRT,=PL2'+40',U\nSUP4     TM    STATUS,STBRACF      RACF MUST BE BYPASSED?\n         BO    SUP10               YES\n         CLI   SCACNAM,C' '        CURRENT USERID?\n         BE    SUP10               NONE\n         TM    DSFLGS,ZFADD+ZFCHG  ANY DATA-SET (RACF) ACTION?\n         BZ    SUP10               NONE\n         SPACE 1\n*        DELETE FROM RACF DATA-SET DISCRETE PROFILE ANY EVENTUAL\n*        PROTECTION REFERENCE AGAINST ME (I WANT SCRATCH).\n         SPACE 1\n         TM    DSFLGS,ZFTNU        WHICH NAME USE?\n         BZ    *+L'*+10\n         MVC   SCDSN,DSANME        USE TRUE NAME FOR RACF\n         B     *+L'*+6\n         MVC   SCDSN,DSNME         USE DATA-SET NAME FOR RACF\n         LA    R0,L'SCDSN          LOOK FOR LENGTH OF DSNAME\n         LA    R1,SCDSN+L'SCDSN-1\nSUP5     CLI   0(R1),C' '\n         BNE   *+L'*+6\n         BCTR  R1,0\n         BCT   R0,SUP5\n         STC   R0,SCDSNL           SET LENGTH OF DSNAME\n         MVC   SCVOL,DSVOLSN       SET VOLUME SERIAL\n         XR    R15,R15             SET IN CASE OF TEST RUN\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    SUP7                YES, ONLY TEST RUN\n         TM    DSFLGS,ZFADD        ADD SCHEDULED?\n         BZ    SUP6                NO\n        ICHEINTY ALTER,TYPE='DS',ENTRY=SCDSNL,VOLUME=SCVOL,            C\n               ACTIONS=(SCADD)\n         LTR   R15,R15\n         BZ    SUP10\n         B     SUP7\nSUP6     TM    DSFLGS,ZFCHG        CHANGE SCHEDULED?\n         BZ    SUP7                NO\n        ICHEINTY ALTERI,TYPE='DS',ENTRY=SCDSNL,VOLUME=SCVOL,           C\n               ACTIONS=(SCCHG)\n         LTR   R15,R15\n         BZ    SUP10\nSUP7     ST    R15,SSCRC\n        @SNAPS SN,SSCSN,SCR\n         SPACE 1\nSUP10    CLI   DSCAT,XCSI          ICF CATALOG INFO?\n         BNE   SUP11               NO\n        @X     B011                YES, GO GENERATE IDCAMS STATEMENT\n         B     SUP17\nSUP11    MVC   SCRDS,DSNME         DATA-SET NAME\n        @FILL  SCRDS\n         MVC   WORKDS,DSNME\n         MVC   SCRVOL,DSVOLSN      VOLUME SERIAL\n         MVC   SCRSOP,=CL4'O.K.'\n         MVI   SCRPRLG,SCRPRLS\n         MVC   CAMVOL,DSVOLSN\n         MVC   CAMUCBTY,DSUCBTY    UCB TYPE\n         XC    CAMRC,CAMRC\n         XR    R3,R3               SET IN CASE OF TEST RUN\n         XR    R15,R15\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    SUP14               YES, ONLY TEST RUN\n         XR    R0,R0               NOTE - IF NOT 0, SCRATCH USES IT\n*                                         AS DEVICE UCB FOR MOUNT.\n        SCRATCH CAMSCR             NO, SCRATCH ...\n         LR    R3,R15              SAVE RETURN CODE\n         CLI   DSCAT,0             CATALOGED?\n         BE    SUP12               NO, BYPASS\n         TM    RUNIND,RUCATMIS     YES, ANY CATALOG MISSING?\n         BO    SUP12               YES, BYPASS\n         TM    RUNIND,RUNOCAT      NO, CATALOG ACTION WANTED?\n         BZ    SUP13               YES\nSUP12    XR    R15,R15             NO, BYPASS\n         B     SUP14\nSUP13   CATALOG CAMUNC             UNCATALOG ...\nSUP14    LTR   R3,R3\n         BNZ   *+L'*+6\n         LTR   R15,R15\n         BZ    SUP16\n         MVC   SCRSOP,=CL4'(RC='\n         MVI   SCRPRLG,SCRPRLL\n         MVC   SCRRETC,=CL2' '\n         MVC   SCRSTC,=CL2' '\n         MVC   SCRTXT(SCRTXTL),=C'UNCATALOG (RC=  /LC=  /IX=  ).'\n         LTR   R3,R3\n         BZ    SUP15\n         CVD   R3,WORKD            SCRATCH RETURN CODE\n         UNPK  SCRRETC,WORKD+6(2)\n         OI    SCRRETC+1,C'0'\n         LH    R3,CAMRC\n         LTR   R3,R3\n         BZ    SUP15\n         CVD   R3,WORKD            CAMLST RETURN CODE\n         UNPK  SCRSTC,WORKD+6(2)\n         OI    SCRSTC+1,C'0'\n         CLC   SCRRETC,=CL2'08'\n         BNE   SUP15\n         CLC   SCRSTC,=CL2'07'\n         BNE   SUP15\n         MVC   SCRTXT(SCRTXTL),SCRTXT-1\n         MVC   SCRTXT(16),=CL16'DATA-SET IN USE.'\n         B     SUP16\nSUP15    LTR   R15,R15\n         BZ    SUP16\n         CVD   R15,WORKD           UNCATALOG RETURN CODE\n         UNPK  SUNCRC,WORKD+6(2)\n         OI    SUNCRC+1,C'0'\n         CH    R15,=H'8'\n         BNE   SUP16\n         LA    R1,0(R1)            CLEAR HI-BYTE\n         CVD   R1,WORKD            UNCATALOG/LOCATE RETURN CODE\n         UNPK  SUNCLC,WORKD+6(2)\n         OI    SUNCLC+1,C'0'\n         CVD   R0,WORKD            UNCATALOG/LOCATE NO. INDEXES\n         UNPK  SUNCIC,WORKD+6(2)\n         OI    SUNCIC+1,C'0'\nSUP16   @OUT   SCRPR\nSUP17    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     SUP1                LOOP\n         DROP  R2\n         SPACE 1\n*        UNCATALOG DATA-SETS PROCESSING.\n         SPACE 1\nSUP20    TM    RUNIND,RUCATMIS     ANY CATALOG MISSING?\n         BO    SUP90               YES, BYPASS\n         TM    RUNIND,RUNOCAT      CATALOG ACTION WANTED?\n         BO    SUP90               NO, BYPASS\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         TM    RUNIND,RUTEST       TEST MODE?\n         BZ    SUP21               NO\n         MVC   UNCPRTT,=CL16'SIMULATED (TEST)'\nSUP21    CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SUP30               YES\n         CLI   DSACTION,YU         TO BE UNCATALOGED?\n         BNE   SUP27               NO, SKIP TO NEXT\n         CLI   DSCAT,XCSI          ICF CATALOG INFO?\n         BNE   SUPSW2              NO\n        @X     B011                YES, GO GENERATE IDCAMS STATEMENT\n         B     SUP27\nSUPSW2   NOP   SUP22\n         OI    SUPSW2+1,ON\n        @OUT   UNCPRT,=PL2'+40',U\nSUP22    MVC   UNCDS,DSNME         DATA-SET NAME\n        @FILL  UNCDS\n         MVC   UNCOP,=CL4'O.K.'\n         MVI   UNCPRLG,UNCPRLS\n         MVC   WORKDS,DSNME\n         XR    R15,R15             SET IN CASE OF TEST RUN\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    SUP23               YES\n        CATALOG CAMUNC             UNCATALOG ...\nSUP23    LTR   R15,R15\n         BZ    SUP26\n         CH    R15,=H'8'           MAY BE CVOL UNRELATED\n         BNE   SUP25\n         CLM   R1,B'0011',=H'8'    LOC. RC IF CVOL MASTER\n         BE    SUP24\n         LTR   R1,R1\n         BNZ   SUP25\n         CLM   R0,B'0011',=H'8'    LOC. RC IF ICF OR VSAM MASTER\n         BNE   SUP25\nSUP24    OC    DSCVOL,DSCVOL\n         BZ    SUP25\n         MVC   CAMVOL,DSCVOL\n        CATALOG CAMUNV             UNCATALOG CVOL ...\n         LTR   R15,R15\n         BZ    SUP26\n         LA    R1,0(R1)            CLEAR HI-BYTE\nSUP25    MVC   UUNRC,=CL2' '\n         MVC   UUNLC,=CL2' '\n         MVC   UUNIC,=CL2' '\n         MVC   UNCOP,=CL4'(RC='\n         MVI   UNCPRLG,UNCPRLL\n         CVD   R15,WORKD           UNCATALOG RETURN CODE\n         UNPK  UUNRC,WORKD+6(2)\n         OI    UUNRC+1,C'0'\n         CH    R15,=H'8'\n         BNE   SUP26\n         CVD   R1,WORKD            UNCATALOG/LOCATE RETURN CODE\n         UNPK  UUNLC,WORKD+6(2)\n         OI    UUNLC+1,C'0'\n         CVD   R0,WORKD            UNCATALOG/LOCATE NO. INDEXES\n         UNPK  UUNIC,WORKD+6(2)\n         OI    UUNIC+1,C'0'\nSUP26   @OUT   UNCPR\nSUP27    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     SUP21               LOOP\n         DROP  R2\n         SPACE 1\n*        CATALOG DATA-SETS RECOVERY PROCESSING.\n         SPACE 1\nSUP30    L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\n         TM    RUNIND,RUTEST       TEST MODE?\n         BZ    SUP31               NO\n         MVC   CDRPRTT,=CL16'SIMULATED (TEST)'\nSUP31    CLI   0(R2),FMOFF         END OF TABLE?\n         BE    SUP90               YES\n         CLI   DSACTION,YC         TO BE CATALOGED?\n         BNE   SUP35               NO, SKIP TO NEXT\n         CLI   DSCAT,XCSI          ICF CATALOG INFO?\n         BNE   SUPSW3              NO\n        @X     B011                YES, GO GENERATE IDCAMS STATEMENT\n         B     SUP35\nSUPSW3   NOP   SUP32\n         OI    SUPSW3+1,ON\n        @OUT   CDRPRT,=PL2'+40',U\n         XC    CAMRC,CAMRC\nSUP32    MVC   CDRDS,DSNME         DATA-SET NAME\n         MVC   CDRVO,DSVOLSN       VOLUME SERIAL NUMBER\n        @FILL  CDRDS\n         MVC   CDROP,=CL4'O.K.'\n         MVI   CDRPRLG,CDRPRLS\n         MVC   WORKDS,DSNME\n         MVC   CAMUCBTY,DSUCBTY\n         MVC   CAMVOL,DSVOLSN\n         XR    R15,R15             SET IN CASE OF TEST RUN\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    SUP33               YES\n        CATALOG CAMCDR             CATALOG ...\nSUP33    LTR   R15,R15\n         BZ    SUP34\n         MVC   CDRRC,=CL2' '\n         MVC   CDRLC,=CL2' '\n         MVC   CDRIC,=CL2' '\n         MVC   CDROP,=CL4'(RC='\n         MVI   CDRPRLG,CDRPRLL\n         CVD   R15,WORKD           CATALOG RETURN CODE\n         UNPK  CDRRC,WORKD+6(2)\n         OI    CDRRC+1,C'0'\n         CH    R15,=H'8'\n         BNE   SUP34\n         LA    R1,0(R1)            CLEAR HI-BYTE\n         CVD   R1,WORKD            CATALOG/LOCATE RETURN CODE\n         UNPK  CDRLC,WORKD+6(2)\n         OI    CDRLC+1,C'0'\n         CVD   R0,WORKD            CATALOG/LOCATE NO. INDEXES\n         UNPK  CDRIC,WORKD+6(2)\n         OI    CDRIC+1,C'0'\nSUP34   @OUT   CDRPR\nSUP35    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     SUP31               LOOP\n         DROP  R2\n         SPACE 1\n*        EXECUTE IDCAMS IF SOMETHING TO DO.\n         SPACE 1\nSUP90    TM    RUNIND,RUTEST       TEST MODE?\n         BO    SUP91               YES\n         TM    WHATS,WHIDIN        IDCAMS INPUT GENERATED?\n         BZ    SUP99               NO\n         NI    WHATS,255-WHIDIN\n         L     R6,DAIDIN\n        $UCLOSE (R6)               CLOSE IT\n         LTR   R15,R15\n         BNZ   ERR71\n         B     SUP92\nSUP91    ICM   R2,B'1111',AGIDST   IDCAMS ARRAY ACQUIRED?\n         BZ    SUP99               NO\n         CLI   4(R2),FMON          YES, BUT IS IT EMPTY?\n         BE    SUP99               YES\nSUP92   @X     B012                NO, GO EXECUTE IDCAMS\n         SPACE 1\nSUP99   @XE\n         EJECT\nSCADD   ICHEACTN FIELD=ACL,FLDATA=(11,SCACL),TESTS=SCTUS\nSCCHG   ICHEACTN FIELD=ACL,FLDATA=(11,SCACL),TESTS=SCTUSI\nSCTUS   ICHETEST FIELD=USERID,FLDATA=(8,SCACNAM),COND=NE\nSCTUSI  ICHETEST FIELD=USERID,FLDATA=(8,SCACNAM),COND=EQ\n         SPACE 1\nSCACL    DS    0CL11               ACCESS LIST ENTRY\nSCACNAM  DC    CL8' '\n         DC    AL1(ACEEALTR)       ALTER ACCESS\n         DC    XL2'0'              ACCESS COUNT\n         SPACE 1\nCAMSCR  CAMLST SCRATCH,*-*,,VOLIST,,OVRD\nCAMUNC  CAMLST UCATDX,*-*\nCAMUNV  CAMLST UNCAT,*-*,CAMVOL\nCAMCDR  CAMLST CAT,*-*,,VOLIST\n         SPACE 1\nVOLIST   DC    H'1'\nCAMUCBTY DC    XL4'0'\nCAMVOL   DC    CL6' '\nCAMRC    DC    H'0'\n         SPACE 1\nSSCSN    DC    A(SSCRC)\n         DC    XL1'80',AL3(SSCLG)\nSSCRC    DC    F'0'\n         DC    XL1'0'\nSCDSNL   DC    XL1'0'\nSCDSN    DC    CL44' '\nSCVOL    DC    CL6' '\nSSCLG    EQU   *-SSCRC\n         SPACE 1\n         DC    AL1(L'SCRPRT+L'SCRPRTT)\nSCRPRT   DC    C'0SCRATCH PROCESSING : '\nSCRPRTT  DC    CL16' '\n         SPACE 1\nSCRPRLG  DC    AL1(*-*)\nSCRPR    DC    CL6' '\nSCRDS    DC    CL44' ',C' - VOLUME : '\nSCRVOL   DC    CL6' ',C' - SCRATCH '\nSCRSOP   DC    CL4' '\nSCRPRLS  EQU   *-SCRPR\nSCRRETC  DC    CL2' ',C'/SC='\nSCRSTC   DC    CL2' ',C') '\nSCRTXT   DC    C'UNCATALOG (RC='\nSUNCRC   DC    CL2' ',C'/LC='\nSUNCLC   DC    CL2' ',C'/IX='\nSUNCIC   DC    CL2' ',C').'\nSCRTXTL  EQU   *-SCRTXT\nSCRPRLL  EQU   *-SCRPR\n         SPACE 1\n         DC    AL1(L'UNCPRT+L'UNCPRTT)\nUNCPRT   DC    C'0UNCATALOG PROCESSING : '\nUNCPRTT  DC    CL16' '\n         SPACE 1\nUNCPRLG  DC    AL1(*-*)\nUNCPR    DC    CL6' '\nUNCDS    DC    CL44' ',C' - UNCATALOG '\nUNCOP    DC    CL4' '\nUNCPRLS  EQU   *-UNCPR\nUUNRC    DC    CL2' ',C'/LC='\nUUNLC    DC    CL2' ',C'/IX='\nUUNIC    DC    CL2' ',C').'\nUNCPRLL  EQU   *-UNCPR\n         SPACE 1\n         DC    AL1(L'CDRPRT+L'CDRPRTT)\nCDRPRT   DC    C'0CATALOG PROCESSING : '\nCDRPRTT  DC    CL16' '\n         SPACE 1\nCDRPRLG  DC    AL1(*-*)\nCDRPR    DC    CL6' '\nCDRDS    DC    CL44' ',C' - VOLUME : '\nCDRVO    DC    CL6' ',C' - CATALOG '\nCDROP    DC    CL4' '\nCDRPRLS  EQU   *-CDRPR\nCDRRC    DC    CL2' ',C'/LC='\nCDRLC    DC    CL2' ',C'/IX='\nCDRIC    DC    CL2' ',C').'\nCDRPRLL  EQU   *-CDRPR\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA014": {"ttr": 9224, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x01\\x87\\x01\\x87\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 391, "newlines": 391, "modlines": 0, "user": "SYSPAJA"}, "text": "A014     TITLE 'CLEAN-UP - USER''S ACCESS LIST AND RECOVERY (A014).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA014    @XS    ALIAS=RACFUSR\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    USP99               YES\n         TM    STATUS,STBRACF      RACF MUST BE BYPASSED?\n         BO    USP99               YES\n         LA    R1,USNMEL\n         ST    R1,SUSPUL\n         LA    R1,SVSNAP+4\n         ST    R1,SUSPUG+4\n         SPACE 1\n*        RACF USER'S DATA-SETS LIST AND RECOVER\n*        OF THE GROUP ACCESS FOR TSO COMMANDS.\n         SPACE 1\n         LA    R2,LINE\n         USING LALNE,R2\n         L     R7,WK1A             RACF WORK AREA\n         USING WKDS,R7\n         ST    R7,SUSPUW\n         XC    COUNTER,COUNTER\n         TM    RUNIND,RUTEST       TEST MODE?\n         BZ    USP1                NO\n         MVC   USUPTT,=CL16'SIMULATED (TEST)'\nUSP1     TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    USP2                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    USP2                YES\n        @LIST  USTIT,,U\n         OI    STATUS,STGCVL       INDICATE USERS PROCESSED\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    USP2                NO\n        @COPY  USTIT,,U\n         SPACE 1\n*        GET USER'S LIST FROM RACF.\n         SPACE 1\nUSP2     XC    WORKRBA(WORKBSLL),WORKRBA\n         LA    R0,USNMEL\n        ICHEINTY NEXTC,TYPE='USR',ENTRY=(R0),WKAREA=(R7),              C\n               ACTIONS=(AUSA,AUSF1,AUSF2,AUSF3,AUSF4,AUSF5,AUSD,AUSP,  C\n               AUSI,AUSU,AUSF6,AUSM,AUSS,AUSN)\n         CH    R15,=H'12'          END OF FILE?\n         BE    USP90               YES\n         LA    R14,WORKBS\n         A     R14,WORKTL\n         STCM  R14,B'0111',SUSPUN+1\n         XR    R14,R14\n         IC    R14,USNMEL\n         LA    R14,1(R14)\n         ST    R14,SUSPUG\n        @SNAPS SF,SUSPUL,RUS\n         L     R1,COUNTER\n         LA    R1,1(R1)\n         ST    R1,COUNTER\n         LTR   R15,R15             ANY ERROR?\n         BZ    USP5                NO\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  USUSRRC,WORKD+6(2)\n         OI    USUSRRC+1,C'0'\n         MVI   USUSRAC,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   USP3                NO\n         STC   R0,USUSRAC\n         OI    USUSRAC,C'0'\nUSP3     TM    STATUS,STUPT\n         BO    USP4\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUSP4    @OUT   USUSR\n         B     USP2\nUSP5     XR    R1,R1\n         IC    R1,USNMEL           GET LENGTH OF USERID\n         BCTR  R1,0                -1 FOR MOVE\n         OC    WORKTL,WORKTL       DATA RETURNED?\n         BZ    USP50               NO\n         CLC   WORKVRA(2),=XL2'0008'    AUTHOR RECEIVED?\n         BNE   USP50               NO\n         CLC   WORKVRA+10(2),=XL2'0001' FLAG1 RECEIVED?\n         BNE   USP50               NO\n         CLC   WORKVRA+13(2),=XL2'0001' FLAG2 RECEIVED?\n         BNE   USP50               NO\n         CLC   WORKVRA+16(2),=XL2'0001' FLAG3 RECEIVED?\n         BNE   USP50               NO\n         CLC   WORKVRA+19(2),=XL2'0001' FLAG4 RECEIVED?\n         BNE   USP50               NO\n         CLC   WORKVRA+22(2),=XL2'0001' FLAG5 RECEIVED?\n         BNE   USP50               NO\n         CLC   WORKVRA+25(2),=XL2'0008' USER DEFAULT GROUP RECEIVED?\n         BNE   USP50               NO\n         MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         EX    R1,USPMV            MOVE USER\n         MVC   USER,LAUS\n         MVI   LASPO,C'('\n         MVC   LAOW+1(6),=CL6'......'\n         CLI   WORKVRA+2,X'FF'\n         BE    *+L'*+6\n         MVC   LAOW(L'LAOW),WORKVRA+2   MOVE OWNER OF USER\n         MVI   LASPT,C')'\n         MVI   LADFT,C':'\n         MVC   LADF(8),=CL8'..NONE..'\n         CLI   WORKVRA+27,X'FF'\n         BE    *+L'*+6\n         MVC   LADF(L'LADF),WORKVRA+27  MOVE DEFAULT GROUP\n         MVC   ACCNAM(L'ACCNAM),WORKVRA+27\n         MVI   LASPU,C'-'\n         LA    R1,LAFLGS\n         LA    R15,WORKVRA+12\n         CLI   0(R15),X'80'        FLAG1 - ADSP?\n         BNE   USP10\n         MVC   0(4,R1),=CL4'ADSP'\n         LA    R1,5(R1)\n         B     USP11\nUSP10    CLI   0(R15),0\n         BE    USP11\n         MVI   0(R1),C'1'\n         BAS   R14,DMPRTN\nUSP11    LA    R15,WORKVRA+15\n         CLI   0(R15),X'80'        FLAG2 - SPECIAL?\n         BNE   USP12\n         MVC   0(7,R1),=CL7'SPECIAL'\n         LA    R1,8(R1)\n         B     USP13\nUSP12    CLI   0(R15),0\n         BE    USP13\n         MVI   0(R1),C'2'\n         BAS   R14,DMPRTN\nUSP13    LA    R15,WORKVRA+18\n         CLI   0(R15),X'80'        FLAG3 - OPERATIONS?\n         BNE   USP14\n         MVC   0(10,R1),=CL10'OPERATIONS'\n         LA    R1,11(R1)\n         B     USP15\nUSP14    CLI   0(R15),0\n         BE    USP15\n         MVI   0(R1),C'3'\n         BAS   R14,DMPRTN\nUSP15    LA    R15,WORKVRA+21\n         CLI   0(R15),X'80'        FLAG4 - REVOKE?\n         BNE   USP16\n         MVC   0(6,R1),=CL6'REVOKE'\n         LA    R1,7(R1)\n         B     USP17\nUSP16    CLI   0(R15),0\n         BE    USP17\n         MVI   0(R1),C'4'\n         BAS   R14,DMPRTN\nUSP17    LA    R15,WORKVRA+24\n         CLI   0(R15),X'80'        FLAG5 - GRPACC?\n         BNE   USP18\n         MVC   0(6,R1),=CL6'GRPACC'\n         LA    R1,7(R1)\n         B     USP20\nUSP18    CLI   0(R15),0\n         BE    USP19\n         MVI   0(R1),C'5'\n         BAS   R14,DMPRTN\n         B     USP20\nUSP19    MVC   LANOGRP(L'LANOGRP),=CL22'---> (NO GROUP ACCESS)'\nUSP20    CLI   LAFLGS,C' '         ANY ATTRIBUTE?\n         BE    *+L'*+6             NO\n         MVC   LAATTR(L'LAATTR),=CL7'ATTR. :'\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    USP21               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    USP21               YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    USP21               NO\n        @COPY  LINE\nUSP21    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R3,USNMEL\n         XR    R4,R4               SET RACF USER CALL\n        @X     B005                LOCATE CATALOG VOLUME IF ANY\n         LA    R3,WORKVRA+35       START OF VARIABLE FIELDS\n         XR    R4,R4\n         ICM   R4,B'0011',0(R3)    GET USER NAME LENGTH\n         LA    R3,2(R3)            POINT TO USER NAME OR NEXT\n         LTR   R4,R4\n         BZ    USP24\n         MVC   LAVAR(13),=CL13'- USER NAME :'\n         LA    R5,60\nUSP22    CLR   R4,R5\n         BNL   *+L'*+2\n         LR    R5,R4\n         BCTR  R5,0\n         LA    R14,LAVAR+14\n         EX    R5,USPMD\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    USP23               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    USP23               YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    USP23               NO\n        @COPY  LINE\nUSP23    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R5,1(R5)\n         AR    R3,R5\n         SR    R4,R5\n         BNZ   USP22\nUSP24    XR    R4,R4\n         IC    R4,2(R3)            GET INST. DATA LENGTH\n         LA    R3,3(R3)            POINT TO INST. DATA OR NEXT\n         LTR   R4,R4\n         BZ    USP27\n         MVC   LAVAR(14),=CL14'- INST. DATA :'\n         LA    R5,60\nUSP25    CLR   R4,R5\n         BNL   *+L'*+2\n         LR    R5,R4\n         BCTR  R5,0\n         LA    R14,LAVAR+15\n         EX    R5,USPMD\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    USP26               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    USP26               YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    USP26               NO\n        @COPY  LINE\nUSP26    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R5,1(R5)\n         AR    R3,R5\n         SR    R4,R5\n         BNZ   USP25\nUSP27    CLC   0(2,R3),=XL2'0001'  UAUDIT RECEIVED?\n         BNE   USP35               NO, SKIP\n         CLC   3(2,R3),=XL2'0001'  FLAG6 RECEIVED?\n         BNE   USP34               NO, SKIP\n         CLI   5(R3),0             AUDITOR ATTRIBUTE?\n         BE    USP33               NO\n         MVC   LAVAR(13),=CL13'- LOG ATTR. :'\n         LA    R1,LAVAR+14\n         CLI   5(R3),X'80'         FLAG6 - AUDITOR?\n         BNE   USP28\n         MVC   0(7,R1),=CL7'AUDITOR'\n         LA    R1,8(R1)\n         B     USP29\nUSP28    MVI   0(R1),C'6'\n         LA    R15,5(R3)\n         BAS   R14,DMPRTN\nUSP29    CLI   2(R3),X'80'         UAUDIT?\n         BNE   USP30\n         MVC   0(6,R1),=CL6'UAUDIT'\n         B     USP31\nUSP30    MVI   0(R1),C'U'\n         LA    R15,2(R3)\n         BAS   R14,DMPRTN\nUSP31    TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    USP32               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    USP32               YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    USP32               NO\n        @COPY  LINE\nUSP32    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\nUSP33    LA    R3,3(R3)\nUSP34    LA    R3,3(R3)\nUSP35    XR    R4,R4\n         IC    R4,2(R3)            GET MODEL NAME LENGTH\n         LA    R3,3(R3)            POINT TO MODEL NAME OR NEXT\n         LTR   R4,R4\n         BZ    USP38\n         MVC   LAVAR(14),=CL14'- MODEL NAME :'\n         LA    R5,60\nUSP36    CLR   R4,R5\n         BNL   *+L'*+2\n         LR    R5,R4\n         BCTR  R5,0\n         LA    R14,LAVAR+15\n         EX    R5,USPMD\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    USP37               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    USP37               YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    USP37               NO\n        @COPY  LINE\nUSP37    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R5,1(R5)\n         AR    R3,R5\n         SR    R4,R5\n         BNZ   USP36\nUSP38    ICM   R4,B'0011',2(R3)    GET NO. OF CONNECT GROUPS\n         LA    R3,6(R3)            POINT TO FIRST NAME IN LIST\n         LTR   R4,R4               AT LEAST ONE?\n         BNP   USP52               NO\n         MVC   LASPG(11),=CL11'- CONNECT :'\nUSP39    MVC   LACN(L'LACN),0(R3)  MOVE NAME\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    USP40               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    USP40               YES\n        @X     B006                CONNECTS LIST\nUSP40    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R3,8(R3)            ADVANCE IN NAME LIST\n         BCT   R4,USP39            LOOP IF ANY MORE\n         B     USP52\nUSPMV    MVC   LAUS(*-*),USNAME    << EXECUTED >>\nUSPMD    MVC   0(*-*,R14),0(R3)    << EXECUTED >>\nUSP50    MVC   USERUSRN(L'USERUSRN),USERUSRN-1\n         EX    R1,USPMU            EXECUTE MOVE\n         TM    STATUS,STUPT\n         BO    USP51\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUSP51   @OUT   USERUSR\n         B     USP2\nUSPMU    MVC   USERUSRN(*-*),USNAME     << EXECUTED >>\n         SPACE 1\n*        GET DATA-SET'S PROFILES OF THIS USER.\n         SPACE 1\nUSP52   @X     B007                GET USER DATA-SETS PROFILES.\n         L     R7,WK1A             RESTORE MAIN RACF WORK AREA\n         B     USP2\n         DROP  R2,R7\nUSP90    TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    USP99               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    USP99               YES\n         L     R1,COUNTER\n         CVD   R1,WORKD\n         ED    USENDN,WORKD+5\n        @LIST  USEND\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    USP99               NO\n        @COPY  USEND\nUSP99   @XE\n         EJECT\nAUSA    ICHEACTN FIELD=AUTHOR\nAUSF1   ICHEACTN FIELD=FLAG1\nAUSF2   ICHEACTN FIELD=FLAG2\nAUSF3   ICHEACTN FIELD=FLAG3\nAUSF4   ICHEACTN FIELD=FLAG4\nAUSF5   ICHEACTN FIELD=FLAG5\nAUSD    ICHEACTN FIELD=DFLTGRP\nAUSP    ICHEACTN FIELD=PGMRNAME\nAUSI    ICHEACTN FIELD=INSTDATA\nAUSU    ICHEACTN FIELD=UAUDIT\nAUSF6   ICHEACTN FIELD=FLAG6\nAUSM    ICHEACTN FIELD=MODELNAM\nAUSS    ICHEACTN FIELD=CONGRPCT\nAUSN    ICHEACTN FIELD=CONGRPNM\n         SPACE 1\nSUSPUL   DC    A(*-*)\nSUSPUG   DC    A(*-*)\n         DC    A(*-*)\n         DC    A(8)\nSUSPUW   DC    A(*-*)\nSUSPUN   DC    XL1'80',AL3(*-*)\n         SPACE 1\n         DC    AL1(L'USTIT)\nUSTIT    DC    C'1RACF USER''S - DATA-SETS ACCESSES LIST :'\n         DC    AL1(USENDL)\nUSEND    DC    C'0END OF RACF USER''S - DATA-SETS ACCESSES LIST '\n         DC    C'(USER''S TOTAL :'\nUSENDN   DC    XL6'402020202120',C').'\nUSENDL   EQU   *-USEND\n         DC    AL1(USUSRL)\nUSUSR    DC    CL3' ',CL3'-- ',C'RACF READ TYPE=USR (RC='\nUSUSRRC  DC    CL2' ',C'/AC='\nUSUSRAC  DC    CL1' ',C').'\nUSUSRL   EQU   *-USUSR\n         DC    AL1(USERUSRL)\nUSERUSR  DC    CL3' ',CL3'-- '\nUSERUSRN DC    CL8' ',C' : RACF READ TYPE=USR '\n         DC    C'(INVALID WORK AREA RECEIVED BACK).'\nUSERUSRL EQU   *-USERUSR\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n        #WKDS\n         EJECT\n        #LALNE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA015": {"ttr": 9477, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x01j\\x01j\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 362, "newlines": 362, "modlines": 0, "user": "SYSPAJA"}, "text": "A015     TITLE 'CLEAN-UP - GROUP''S ACCESS LIST (A015).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA015    @XS    ALIAS=RACFGRP\n         TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BO    GRP99               YES\n         TM    STATUS,STBRACF      RACF MUST BE BYPASSED?\n         BO    GRP99               YES\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    GRP99               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLG        SUPPRESS REQUESTED?\n         BO    GRP99               YES\n         LA    R1,GRNMEL\n         ST    R1,SGRPGL\n         LA    R1,SVSNAP+4\n         ST    R1,SGRPGS\n         SPACE 1\n*        RACF GROUP'S LIST.\n         SPACE 1\n         LA    R2,LINE\n         USING LGLNE,R2\n         L     R7,WK1A             RACF WORK AREA\n         USING WKDS,R7\n         ST    R7,SGRPGW\n         XC    COUNTER,COUNTER\n        @LIST  GRPTIT,,U\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP1                NO\n        @COPY  GRPTIT,,U\n         SPACE 1\n*        GET GROUP'S LIST FROM RACF.\n*        NOTE : USER AUTHORITY IN GROUP (FROM ICHPTDEF : TEMPLATE\n*               DEFINITION) :     X'80' - JOIN\n*                                 X'40' - CONNECT\n*                                 X'20' - CREATE\n*                                 X'10' - USE\n         SPACE 1\nGRP1     XC    WORKRBA(WORKBSLL),WORKRBA\n         LA    R0,GRNMEL\n        ICHEINTY NEXTC,TYPE='GRP',ENTRY=(R0),WKAREA=(R7),              C\n               ACTIONS=(AGU,AGA,AGG,AGT,AGI,AGM,AGS,AGN,AGC,AGL,AGR)\n         CH    R15,=H'12'          END OF FILE?\n         BE    GRP90               YES\n         LA    R14,WORKBS\n         A     R14,WORKTL\n         STCM  R14,B'0111',SGRPGN+1\n         XR    R14,R14\n         IC    R14,GRNMEL\n         LA    R14,1(R14)\n         ST    R14,SGRPGG\n        @SNAPS SF,SGRPGL,RGR\n         L     R1,COUNTER\n         LA    R1,1(R1)\n         ST    R1,COUNTER\n         LTR   R15,R15             ANY ERROR?\n         BZ    GRP3                NO\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  GRPRRC,WORKD+6(2)\n         OI    GRPRRC+1,C'0'\n         MVI   GRPRAC,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   GRP2                NO\n         STC   R0,GRPRAC\n         OI    GRPRAC,C'0'\nGRP2    @LIST  GRPR\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP1                NO\n        @COPY  GRPR\n         B     GRP1\nGRP3     XR    R1,R1\n         IC    R1,GRNMEL           GET LENGTH OF GROUP NAME\n         BCTR  R1,0                -1 FOR MOVE\n         OC    WORKTL,WORKTL       DATA RETURNED?\n         BZ    GRP4                NO\n         CLC   WORKVRA(2),=XL2'0008'    SUPGROUP RECEIVED?\n         BNE   GRP4                NO\n         CLC   WORKVRA+10(2),=XL2'0008' AUTHOR RECEIVED?\n         BNE   GRP4                NO\n         CLC   WORKVRA+20(2),=XL2'0001' UNIV. GROUP AUTH. RECEIVED?\n         BNE   GRP4                NO\n         CLC   WORKVRA+23(2),=XL2'0001' TERM. UNIV. AUTH. RECEIVED?\n         BE    GRP10               YES\nGRP4     MVC   GRPERN(L'GRPERN),GRPERN-1\n         EX    R1,GRPMV            EXECUTE MOVE\n        @LIST  GRPERR\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP1                NO\n        @COPY  GRPERR\n         B     GRP1\nGRPMV    MVC   GRPERN(*-*),GRNAME  << EXECUTED >>\nGRPMD    MVC   LGVAR+15(*-*),0(R3) << EXECUTED >>\nGRP10    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         EX    R1,GRPMG            MOVE GROUP NAME\n         MVI   LGSPO,C'('\n         MVC   LGOW+1(6),=CL6'......'\n         CLI   WORKVRA+12,X'FF'\n         BE    *+L'*+6\n         MVC   LGOW(L'LGOW),WORKVRA+12  MOVE OWNER OF GROUP\n         MVI   LGSPT,C')'\n         MVI   LGSPS,C':'\n         MVC   LGSG(8),=CL8'..NONE..'\n         CLI   WORKVRA+2,X'FF'\n         BE    *+L'*+6\n         MVC   LGSG(L'LGSG),WORKVRA+2   MOVE SUPERIOR GROUP\n         CLI   WORKVRA+22,0        UACC?\n         BNE   GRP11               YES\n         CLI   WORKVRA+25,0        NOTRMUACC?\n         BE    GRP22               YES\n         LA    R1,LGVAR\n         B     GRP18\nGRPMG    MVC   LGGN(*-*),GRNAME    << EXECUTED >>\nGRP11    MVC   LGVAR(13),=CL13'- AUTHORITY :'\n         LA    R1,LGVAR+14\n         CLI   WORKVRA+22,ACEEALTR ALTER ACCESS?\n         BNE   GRP12               NO\n         MVC   0(5,R1),=CL5'ALTER'\n         LA    R1,6(R1)\n         B     GRP17\nGRP12    CLI   WORKVRA+22,ACEECNTL CONTROL ACCESS?\n         BNE   GRP13               NO\n         MVC   0(7,R1),=CL7'CONTROL'\n         LA    R1,8(R1)\n         B     GRP17\nGRP13    CLI   WORKVRA+22,ACEEUPDT UPDATE ACCESS?\n         BNE   GRP14               NO\n         MVC   0(6,R1),=CL6'UPDATE'\n         LA    R1,7(R1)\n         B     GRP17\nGRP14    CLI   WORKVRA+22,ACEEREAD READ ACCESS?\n         BNE   GRP15               NO\n         MVC   0(4,R1),=CL4'READ'\n         LA    R1,5(R1)\n         B     GRP17\nGRP15    CLI   WORKVRA+22,ACEENONE NONE ACCESS?\n         BNE   GRP16               NO\n         MVC   0(4,R1),=CL4'NONE'\n         LA    R1,5(R1)\n         B     GRP17\nGRP16    MVI   0(R1),C'U'          ANYTHING MIXED OR UNKNOWN\n         LA    R15,WORKVRA+22\n         BAS   R14,DMPRTN\nGRP17    CLI   WORKVRA+25,0        TERMUACC?\n         BE    GRP20               YES\nGRP18    CLI   WORKVRA+25,X'80'    NOTRMUACC?\n         BNE   GRP19               NO\n         MVC   0(11,R1),=CL11'- NOTRMUACC'\n         B     GRP20\nGRP19    MVI   0(R1),C'-'          ANYTHING MIXED OR UNKNOWN\n         LA    R1,2(R1)\n         MVI   0(R1),C'T'\n         LA    R15,WORKVRA+25\n         BAS   R14,DMPRTN\nGRP20   @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP21               NO\n        @COPY  LINE\nGRP21    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\nGRP22    LA    R3,GRNMEL\n         LR    R4,R3               SET RACF GROUP CALL\n        @X     B005                LOCATE CATALOG VOLUME IF ANY\n         LA    R3,WORKVRA+26       START OF VARIABLE FIELDS\n         XR    R4,R4\n         IC    R4,2(R3)            GET INST. DATA LENGTH\n         LA    R3,3(R3)            POINT TO INST. DATA OR NEXT\n         LTR   R4,R4\n         BZ    GRP25\n         MVC   LGVAR(14),=CL14'- INST. DATA :'\n         LA    R5,60\nGRP23    CLR   R4,R5\n         BNL   *+L'*+2\n         LR    R5,R4\n         BCTR  R5,0\n         EX    R5,GRPMD\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP24               NO\n        @COPY  LINE\nGRP24    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R5,1(R5)\n         AR    R3,R5\n         SR    R4,R5\n         BNZ   GRP23\nGRP25    XR    R4,R4\n         IC    R4,2(R3)            GET MODEL NAME LENGTH\n         LA    R3,3(R3)            POINT TO MODEL NAME OR NEXT\n         LTR   R4,R4\n         BZ    GRP28\n         MVC   LGVAR(14),=CL14'- MODEL NAME :'\n         LA    R5,60\nGRP26    CLR   R4,R5\n         BNL   *+L'*+2\n         LR    R5,R4\n         BCTR  R5,0\n         EX    R5,GRPMD\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP27               NO\n        @COPY  LINE\nGRP27    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R5,1(R5)\n         AR    R3,R5\n         SR    R4,R5\n         BNZ   GRP26\nGRP28    XR    R4,R4\n         MVC   LGSPG(16),=CL16'- SGRP(S) : NONE'\n         ICM   R4,B'0011',2(R3)    GET NO. OF SUBGROUPS\n         LA    R3,6(R3)            POINT TO FIRST NAME IN LIST\n         LTR   R4,R4               AT LEAST ONE?\n         BNP   GRP33               NO\n         LA    R0,NLGSN            NO. OF NAMES BY LINE\n         LA    R1,LGSN\nGRP30    MVC   0(L'LGSN-1,R1),0(R3)\n         LA    R1,L'LGSN(R1)       ADVANCE IN LINE\n         BCT   R0,GRP32\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP31               NO\n        @COPY  LINE\nGRP31    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R0,NLGSN            NO. OF NAMES BY LINE\n         LA    R1,LGSN\nGRP32    LA    R3,8(R3)            ADVANCE IN NAME LIST\n         BCT   R4,GRP30            LOOP IF ANY MORE\n         CLI   LGSN,C' '           ANYTHING PENDING?\n         BE    GRP35               NO\nGRP33   @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP34               NO\n        @COPY  LINE\nGRP34    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\nGRP35    MVC   LGSPU(16),=CL16'- USER(S) : NONE'\n         XR    R4,R4\n         LR    R5,R4\n         ICM   R4,B'0011',2(R3)    GET NO. USERS\n         ICM   R5,B'0011',4(R3)    GET LENGTH OF NAMES LIST\n         LA    R3,6(R3)            POINT TO NAMES LIST\n         LA    R5,2(R5,R3)         POINT TO ACCESS CODES\n         LTR   R4,R4               AT LEAST ONE?\n         BNP   GRP44               NO\n         LA    R0,NLGUN            NO. OF USERS BY LINE\n         LA    R1,LGUN\n         USING LGUS,R1\nGRP36    MVC   LGUS(L'LGUS),0(R3)  MOVE NAME\n         MVI   LGSPA,C'-'\n         CLI   0(R5),X'80'         JOIN ACCESS?\n         BNE   GRP37               NO\n         MVC   LGAC,=CL8'JOIN'\n         B     GRP41\nGRP37    CLI   0(R5),X'40'         CONNECT ACCESS?\n         BNE   GRP38               NO\n         MVC   LGAC,=CL8'CONNECT'\n         B     GRP41\nGRP38    CLI   0(R5),X'20'         CREATE ACCESS?\n         BNE   GRP39               NO\n         MVC   LGAC,=CL8'CREATE'\n         B     GRP41\nGRP39    CLI   0(R5),X'10'         USE ACCESS?\n         BNE   GRP40               NO\n         MVC   LGAC,=CL8'USE'\n         B     GRP41\nGRP40    LR    R15,R5              ANYTHING MIXED OR UNKNOWN\n         LR    R5,R1\n         LA    R1,LGAC\n         BAS   R14,DMPRTS\n         LR    R1,R5\n         LR    R5,R15\nGRP41    LA    R1,L'LGUN(R1)       ADVANCE IN LINE\n         BCT   R0,GRP43\n         DROP  R1\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP42               NO\n        @COPY  LINE\nGRP42    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R0,NLGUN            NO. OF USERS BY LINE\n         LA    R1,LGUN\nGRP43    LA    R3,8(R3)            ADVANCE IN NAME LIST\n         LA    R5,1(R5)            ADVANCE IN ACCESS CODES\n         BCT   R4,GRP36            LOOP IF ANY MORE\n         CLI   LGUN,C' '           ANYTHING PENDING?\n         BE    GRP50               NO\nGRP44   @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP45               NO\n        @COPY  LINE\nGRP45    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         SPACE 1\n*        GET DATA-SET'S PROFILES OF THIS GROUP.\n         SPACE 1\nGRP50   @X     B008                GET GROUP DATA-SETS PROFILES\n         L     R7,WK1A             RESTORE MAIN RACF WORK AREA\n         B     GRP1                GET NEXT GROUP\n         DROP  R2,R7\nGRP90    L     R1,COUNTER\n         CVD   R1,WORKD\n         ED    GRPENDN,WORKD+5\n        @LIST  GRPEND\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GRP91               NO\n        @COPY  GRPEND\nGRP91    TM    STATUS,STGCVL       USERS PROCESSED?\n         BZ    GRP99               NO\n         XR    R3,R3               SET CHECK LIST CALL\n        @X     B005\nGRP99   @XE\n         EJECT\nAGU     ICHEACTN FIELD=SUPGROUP\nAGA     ICHEACTN FIELD=AUTHOR\nAGG     ICHEACTN FIELD=UACC\nAGT     ICHEACTN FIELD=NOTRMUAC\nAGI     ICHEACTN FIELD=INSTDATA\nAGM     ICHEACTN FIELD=MODELNAM\nAGS     ICHEACTN FIELD=SUBGRPCT\nAGN     ICHEACTN FIELD=SUBGRPNM\nAGC     ICHEACTN FIELD=ACLCNT\nAGL     ICHEACTN FIELD=USERID\nAGR     ICHEACTN FIELD=USERACS\n         SPACE 1\nSGRPGL   DC    A(*-*)\nSGRPGG   DC    A(*-*)\nSGRPGS   DC    A(*-*)\n         DC    A(8)\nSGRPGW   DC    A(*-*)\nSGRPGN   DC    XL1'80',AL3(*-*)\n         SPACE 1\n         DC    AL1(L'GRPTIT)\nGRPTIT   DC    C'1RACF GROUP''S - DATA-SETS ACCESSES LIST :'\n         DC    AL1(GRPENDL)\nGRPEND   DC    C'0END OF RACF GROUP''S - DATA-SETS ACCESSES LIST '\n         DC    C'(GROUP''S TOTAL :'\nGRPENDN  DC    XL6'402020202120',C').'\nGRPENDL  EQU   *-GRPEND\n         DC    AL1(GRPRL)\nGRPR     DC    CL3' ',CL3'-- ',C'RACF READ TYPE=GRP (RC='\nGRPRRC   DC    CL2' ',C'/AC='\nGRPRAC   DC    CL1' ',C').'\nGRPRL    EQU   *-GRPR\n         DC    AL1(GRPERRL)\nGRPERR   DC    CL3' ',CL3'-- '\nGRPERN   DC    CL8' ',C' : RACF READ TYPE=GRP '\n         DC    C'(INVALID WORK AREA RECEIVED BACK).'\nGRPERRL  EQU   *-GRPERR\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n        #WKDS\n         EJECT\n        #LGLNE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLA099": {"ttr": 9484, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x145\\x00\\xf2\\x00\\xf2\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:35:00", "lines": 242, "newlines": 242, "modlines": 0, "user": "SYSPAJA"}, "text": "A099     TITLE 'CLEAN-UP - END OF PROCESS (A099).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nA099    @XS\n*        END OF PROCESS.\n         SPACE 1\nENSW1    NOP   EN1\n         OI    ENSW1+1,ON\n         LA    R1,COPYDS\n         ST    R1,COPYCAT+4\n         ST    R1,COPYSCR+4\n         ST    R1,COPYUCT+4\n         ST    R1,COPYUNC+4\n         LA    R1,LOCAREA\n         ST    R1,COPYCAT+12\n         LA    R1,CPYCAT\n         ST    R1,COPYSCR+12\n         LA    R1,CPYCVOL\n         ST    R1,COPYUCT+8\nEN1      L     R9,MAXERR           TO COMPUTE ERROR NUMBER\n         TM    WHAT,WHIN\n         BZ    EN2\n         NI    WHAT,255-WHIN-WHCD-WHEOF\n        $RCLOSE\nEN2      TM    WHAT,WHDATA\n         BZ    EN3\n         NI    WHAT,255-WHDATA\n        $UCLOSE MF=(E,UDDPLS)\nEN3      TM    WHAT,WHPDSA+WHPDSO\n         BZ    EN11\n         TM    WHAT,WHPDSO\n         BZ    EN10\n         NI    WHAT,255-WHPDSO\n        $MCLOSE\nEN10     NI    WHAT,255-WHPDSA\nEN11     L     R2,TBCVOL           START OF CAT. VOL. TABLE\n         USING CVLT,R2\nEN12     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    EN20                YES\n         TM    CVLIND,CVLCSO       NO, CATALOG IS YET OPENED?\n         BZ    EN15                NO\n         TM    CVLIND,CVLICF       YES, IS IT AN ICF CATALOG?\n         BO    EN13                YES\n        $CATSC ,                   NO, CLOSE O.S. CATALOG\n         B     EN14\nEN13    $ICFSC ,                   CLOSE ICF CATALOG\nEN14     NI    CVLIND,255-CVLCSO   SAY CLOSED\n         DROP  R2\nEN15     LA    R2,CVLL(R2)         ADVANCE IN TABLE\n         B     EN12                AND LOOP\nEN20     L     R2,TBDDN            START OF DDNAME'S TABLE\n         USING DDNT,R2\nEN21     CLI   0(R2),FMOFF         END OF TABLE?\n         BE    EN30                YES\n         TM    DDNALL,DDNXA\n         BZ    EN24\n         TM    DDNALL,DDNXQ\n         BZ    EN22\n         NI    DDNALL,255-DDNXQ\n        $VTOCQC\nEN22     TM    DDNALL,DDNXD\n         BZ    EN23\n         NI    DDNALL,255-DDNXD\n        $VTOCDC\nEN23     NI    DDNALL,255-DDNXA\n         MVC   ENDDN(L'DDNNME),DDNNME\n        $DAVFR MF=(E,ENPLS)\nEN24     LA    R2,DDNL(R2)         ADVANCE IN TABLE\n         B     EN21                AND LOOP\n         DROP  R2\nEN30     TM    WHATS,WHIDIN\n         BZ    EN31\n         NI    WHATS,255-WHIDIN\n         L     R2,DAIDIN\n        $UCLOSE (R2)\nEN31     TM    WHATS,WHIDOUT\n         BZ    EN32\n         NI    WHATS,255-WHIDOUT\n         L     R2,DAIDOUT\n        $VCLOSE (R2)\nEN32     LA    R2,DALLS            DE-ALLOCATE ALL\n         LA    R3,DALLN\nEN33     L     R14,0(R2)\n         USING DYNLIST,R14\n         CLI   DSNAME,0\n         BE    EN34\n         CLI   DSNAME,C' '\n         BE    EN34\n         XC    DSNAME,DSNAME\n         DROP  R14\n        $DYNALL (R14),,MF=(E,DYNPLS)\nEN34     LA    R2,4(R2)\n         BCT   R3,EN33\n         LM    R3,R4,AGIDST        FREE ANY IDCAMS ARRAY(S)\nEN35     OC    AGIDST,AGIDST\n         BZ    EN40\n         L     R3,0(R3)\n        FREEMAIN E,LV=(R4),A=AGIDST,MF=(E,ENFREE)\n         ST    R3,AGIDST\n         B     EN35\nEN40     TM    RUSREQ,RUSSCR       COPY MUST BE SCRATCHED?\n         BO    EN41                YES\n         TM    WHAT,WHCOPY         COPY HAS BEEN ALLOCATED?\n         BZ    EN90                NO\n         NI    WHAT,255-WHCOPY\n         TM    STATUS,STSCPY       MAY BE COPY MUST BE SCRATCHED?\n         BZ    EN60                NO\n         NI    STATUS,255-STSCPY\nEN41     CLC   CPYVOL,=CL6' '      DATA-SET VOLUME ALREADY KNOWN?\n         BNE   ENSW3               YES\nENSW2    NOP   EN90\n         XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(LOCAREAL-256),LOCAREA+256\n        LOCATE COPYCAT\n         LTR   R15,R15             TEST COMPLETION CODE\n         BZ    EN43\n         OI    ENSW2+1,ON\n         TM    WHATS,WHPERR\n         BO    EN42\n        @OUT   LOCFAIL\n         B     EN90\nEN42    WTO    '--- COPY : LOCATE OF DATA-SET FAILED.',                C\n               ROUTCDE=11,DESC=7\n         B     EN90\nEN43     MVC   CPYTY(L'CPYTY),LOCAREA+2\n         MVC   CPYVOL(L'CPYVOL),LOCAREA+6\nENSW3    NOP   EN45\n         OI    ENSW3+1,ON\n        SCRATCH COPYSCR\n         LTR   R15,R15             TEST COMPLETION CODE\n         BZ    EN45\n         TM    WHATS,WHPERR\n         BO    EN44\n        @OUT   SCRFAIL\n         B     EN45\nEN44    WTO    '--- COPY : SCRATCH OF DATA-SET FAILED.',               C\n               ROUTCDE=11,DESC=7\nEN45     TM    RUSREQ,RUSSCR       COPY TO BE SCRATCHED ONLY?\n         BZ    ENSW4               NO, MUST BE ALSO UNCATALOGED\n         NI    RUSREQ,255-RUSSCR\n         B     EN54\nENSW4    NOP   EN54\n         OI    ENSW4+1,ON\n         SPACE 1\n* NOTE - WHEN THE MASTER CATALOG IS VSAM OR ICF THE DATA-SET IS FIRST\n*        SCRATCHED AND THEN UNCATALOGED USING CATALOG MACRO (OS-CVOL)\n*        OR INVOKING IDCAMS FUNCTION (ALIAS).\n         SPACE 1\n         CLI   COPYCNME,C' '       IDCAMS TO BE USED?\n         BNE   EN51                YES\n         CLC   CPYCVOL,=CL6' '     CATALOG VOLUME NECESSARY?\n         BE    EN50                NO\n        CATALOG COPYUCT\n         B     EN52\nEN50    CATALOG COPYUNC\n         B     EN52\nEN51     LA    R1,COPYDS\n         ST    R1,IDCDSN\n         LA    R1,COPYCNME\n         ST    R1,IDCPLS\n         MVI   IDCFUN,C'U'\n        @X     C001                INVOKE IDCAMS FUNCTION\nEN52     LTR   R15,R15             TEST COMPLETION CODE\n         BZ    EN54\n         TM    WHATS,WHPERR\n         BO    EN53\n        @OUT   UNCFAIL\n         B     EN90\nEN53    WTO    '--- COPY : UNCATALOG OF DATA-SET FAILED.',             C\n               ROUTCDE=11,DESC=7\n         B     EN90\nEN54     TM    WHATS,WHPERR\n         BO    EN55\n        @OUT   DSDELET\n         B     EN90\nEN55    WTO    '--- COPY : ERROR - DATA-SET IS DELETED.'               C\n               ROUTCDE=11,DESC=7\n         B     EN90\nEN60     NI    STATUS,255-STCOPY\n         CLI   CPYCMD+1,0          ANY START COMMAND?\n         BE    EN90                NO\n        ZEROKEY\n         XR    R0,R0\n         XR    R15,R15\n        MGCR   CPYCMD              SEND COMMAND\n         LR    R2,R15\n        RESETKEY\n         MVI   CPYCMD+1,0          NULLIFY COMMAND, IT IS SENDED\n         LTR   R2,R2               TEST RETURN CODE\n         BZ    EN90\n        WTO    '--- COPY : START COMMAND FAILED.',                     C\n               ROUTCDE=11,DESC=7\nEN90     TM    WHATS,WHPERR\n         BO    EN99\n         CLC   CUST1,=CL8' '\n         BE    EN99\n         MVC   TITTEST(L'TITTEST),TITTEST-1\n         MVC   CUST2A,=CL5'ENDED'\n         TM    RUNOPT,RUNOHT       TRAILER SUPPRESS?\n         BO    EN99                YES\n        @OUT   SKLSPG\n        $EDITH MF=(E,CU1PLS)\n         MVC   CUST1,=CL8' '\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR45\n        $EDITH MF=(E,CU2PLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR45\nEN99    $PCLOSE\n         L     R2,TOTSPCE\n         LA    R0,TBEVOL\n        FREEMAIN E,LV=(R2),A=(R0)\n        @XE\n         EJECT\nCOPYCAT CAMLST NAME,*-*,,*-*\nCOPYSCR CAMLST SCRATCH,*-*,,*-*,,OVRD\nCOPYUCT CAMLST UCATDX,*-*,*-*\nCOPYUNC CAMLST UCATDX,*-*\n         SPACE 1\nENFREE  FREEMAIN E,LV=0,A=*-*,MF=L\nENPLS   $DAVFR ENDDNL,MF=L\n         SPACE 1\nENDDNL   DC    XL1'8'\nENDDN    DC    CL8' '\n         EJECT\n         DC    AL1(L'SKLSPG)\nSKLSPG   DC    CL2'1 '\n         DC    AL1(L'LOCFAIL)\nLOCFAIL  DC    C'0--- COPY : LOCATE OF DATA-SET FAILED.'\n         DC    AL1(L'SCRFAIL)\nSCRFAIL  DC    C'0--- COPY : SCRATCH OF DATA-SET FAILED.'\n         DC    AL1(L'UNCFAIL)\nUNCFAIL  DC    C'0--- COPY : UNCATALOG OF DATA-SET FAILED.'\n         DC    AL1(L'DSDELET)\nDSDELET  DC    C'0--- COPY : ERROR - DATA-SET IS DELETED.'\n         SPACE 2\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB001": {"ttr": 9733, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x02z\\x02z\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 634, "newlines": 634, "modlines": 0, "user": "SYSPAJA"}, "text": "B001     TITLE 'CLEAN-UP - GET OPTIONS REQUESTS (B001).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB001    @XS\n*        READ OPTIONS REQUESTS.\n         SPACE 1\n         L     R1,=V(#RMSW#)\n         MVI   0(R1),1\n         OI    WHAT,WHIN\n         OI    RUNIND,RUDSH+RUCSH  SET DEFAULT OPTIONS. + + + + + + + +\n        $READ  MF=(E,RDIPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    CR1\n         BM    CR81                CONTROL CARDS MISSING\n         CH    R15,=H'1'           DD-CARD?\n         BE    CR81                CONTROL CARDS MISSING\n         B     ERR21\nCR1      XR    R6,R6\nCR2      NI    CRSW1+1,OFF\n         NI    CRSW3+1,OFF\n         LM    R3,R5,SCIN          SET TO SCAN INPUT CARD\n         CLI   0(R3),C' '          SEARCH START OF A KEYWORD\n         BNE   CRSW1\nCR3      BXLE  R3,R4,*-8\n        $READ  MF=(E,RDIPLS)       GET NEXT CARD\n         LTR   R15,R15\n         BM    CR80                END OF CONTROL CARDS\n         BZ    CR2                 ANALYZE NEXT CARD\n         B     ERR21\nCR4      XR    R6,R6\n         B     CR3                 GET NEXT KEYWORD\nCRSW1    NOP   CRSW2\n         OI    CRSW1+1,ON\n         CLC   0(6,R3),=CL6'EL.VOL'     TEST IF NEXT GROUP?\n         BE    CR99                YES\n         CLC   0(7,R3),=CL7'BYPRACF'    BYPRACF REQUEST?\n         BE    CR99                YES\n         CLC   0(7,R3),=CL7'ACCOUNT'    ACCOUNT REQUEST?\n         BE    CR99                YES\n         CLC   0(4,R3),=CL4'SKIP'  SKIP REQUEST?\n         BNE   CRSW2               NO\n         BE    CR99                YES\nCRSW2    NOP   CRSW3\n         OI    CRSW2+1,ON\n        @OUT   INPUT,,U            PRINT HEADER\nCRSW3    NOP   CRSW4\n         OI    CRSW3+1,ON\n        @OUT   PRCAR               PRINT INPUT CARD\nCRSW4    B     C1\n         OI    CRSW4+1,ON\n         CLI   0(R3),C'('          START OF SUPPRESS EXEMPTION?\n         BNE   CR20                NO\nCR10     BXLE  R3,R4,*+L'*+4\n         BAS   R14,CRCNT\n         CLI   0(R3),C' '\n         BE    CR10\n         CLI   0(R3),C')'          END?\n         BE    CR4                 YES\n         LA    R15,DAYT\nCR11     CLC   0(L'DAYT,R3),0(R15)\n         BE    CR12\n         LA    R15,L'DAYT(R15)\n         CLI   0(R15),FMOFF\n         BNE   CR11\n         B     CRERR\nCR12     CLC   0(L'DAYT,R3),TITDAT IS IT TODAY?\n         BNE   *+L'*+4             NO\n         EX    R6,CRCL\n         LA    R3,L'DAYT-1(R3)\n         B     CR10\nCRCL     NI    RUNOPT,*-*          << EXECUTED >>\nCR20     XR    R6,R6\nC1       CLC   0(4,R3),=CL4'TEST'  LOOK IF TEST RUN REQUESTED?\n         BNE   C2                  NO\n         OI    RUNIND,RUTEST       YES, SET SWITCH\n         LA    R3,3(R3)\n         B     CR4                 GET NEXT KEYWORD\nC2       CLC   0(7,R3),=CL7'LISTALL'    COMPLETE LIST REQUIRED?\n         BNE   C3                  NO\n         NI    RUNIND,255-RUNOLIST-RUDSH-RUCSH    YES, RESET ALL\n         NI    RUNOPT,255-RUNLU-RUNLG-RUGDGL\n         NI    RUSREQ,255-RUSKOFF-RUSVSAM\n         OI    ACCIND,AFFULL\n         LA    R3,6(R3)\n         B     CR4                 GET NEXT KEYWORD\nC3       CLC   0(8,R3),=CL8'DS-SHORT'   DSNAME'S SHORT LIST REQUIRED?\n         BNE   C4                  NO\n         OI    RUNIND,RUDSH        YES, SET INDICATOR\n         NI    RUNIND,255-RUNOLIST ALLOW LIST\n         NI    RUNOPT,255-RUGDGL\n         NI    RUSREQ,255-RUSVSAM\n         LA    R3,7(R3)\n         B     CR4                 GET NEXT KEYWORD\nC4       CLC   0(8,R3),=CL8'CT-SHORT'   CATALOGS SHORT LIST REQUIRED?\n         BNE   C5                  NO\n         OI    RUNIND,RUCSH        YES, SET INDICATOR\n         NI    RUNIND,255-RUNOLIST ALLOW LIST\n         LA    R3,7(R3)\n         B     CR4                 GET NEXT KEYWORD\nC5       CLC   0(6,R3),=CL6'NOLIST'     LIST SUPPRESS REQUIRED?\n         BNE   C6                  NO\n         OI    RUNIND,RUNOLIST     YES, SET INDICATOR\n         NI    RUNIND,255-RUDSH-RUCSH   RESET\n         NI    RUNOPT,255-RUNLU-RUNLG-RUGDGL\n         NI    RUSREQ,255-RUSKOFF-RUSVSAM\n         NI    ACCIND,255-AFFULL\n         NI    STATUS,255-STCOPY\n         LA    R3,5(R3)\n         B     CR4                 GET NEXT KEYWORD\nC6       CLC   0(9,R3),=CL9'NOSCRATCH'  NOSCRATCH REQUESTED?\n         BNE   C7                  NO\n         OI    RUNIND,RUNOSCR      YES, SET INDICATOR\n         LA    R3,8(R3)\n         B     CR4                 GET NEXT KEYWORD\nC7       CLC   0(9,R3),=CL9'NOCATALOG'  CATALOG ACTION TO BYPASS?\n         BNE   C8                  NO\n         OI    RUNIND,RUNOCAT      SET INDICATOR\n         LA    R3,8(R3)\n         B     CR4                 GET NEXT KEYWORD\nC8       CLC   0(6,R3),=CL6'NORACF'     BYPASS RACF ACTION?\n         BNE   C9                  NO\n         OI    RUNIND,RUNORACF     YES, SET INDICATOR\n         LA    R3,5(R3)\n         B     CR4                 GET NEXT KEYWORD\nC9       CLC   0(4,R3),=CL4'SNAP'  SNAP REQUEST?\n         BNE   C10                 NO\n         LA    R3,3(R3)     YES, SEARCH AT WHICH POINT\n         BXLE  R3,R4,*+L'*+4\n         BAS   R14,CRCNT\nC9A      CLI   0(R3),C' '\n         BNE   C9B\n         BXLE  R3,R4,C9A\n         BAS   R14,CRCNT\n         B     C9A\nC9B      CLI   0(R3),C'('\n         BNE   CRERR\nC9C      BXLE  R3,R4,C9D\n         BAS   R14,CRCNT\nC9D      CLI   0(R3),C')'\n         BE    CR4                 GET NEXT KEYWORD\n         CLI   0(R3),C' '\n         BE    C9C\n         CLC   0(3,R3),=CL3'TWA'   AT 'TWA' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSF,SFTWA         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'RRD'   AT 'RRD' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSF,SFRRD         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'LOC'   AT 'LOC' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSF,SFLOC         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'OBT'   AT 'OBT' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSF,SFOBT         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'RUS'   AT 'RUS' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSF,SFRUS         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'RDS'   AT 'RDS' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSF,SFRDS         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'RGR'   AT 'RGR' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSF,SFRGR         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'RCO'   AT 'RCO' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSF,SFRCO         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'GDS'   AT 'GDS' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSN,SNGDS         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'RRO'   AT 'RRO' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSN,SNRRO         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'RAE'   AT 'RAE' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSN,SNRAE         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'GCV'   AT 'GCV' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSN,SNGCV         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'ECV'   AT 'ECV' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSN,SNECV         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'SCR'   AT 'SCR' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSN,SNSCR         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'INX'   AT 'INX' POINT?\n         BNE   *+L'*+8             NO\n         OI    RUNSN,SNINX         YES, SET INDICATOR\n         B     C9XIT\n         CLC   0(3,R3),=CL3'DBG'   AT 'INX' POINT?\n         BNE   CRERR               NO\n         OI    RUNSN,SNDBG         YES, SET INDICATOR\nC9XIT    LA    R3,2(R3)\n         B     C9C\nC10      CLC   0(5,R3),=CL5'NOSET' BYPASS VTOC'S ACTION (RACF SET)?\n         BNE   C11                 NO\n         OI    RUNOPT,RUNOSET      YES, SET INDICATOR\n         LA    R3,4(R3)\n         B     CR4                 GET NEXT KEYWORD\nC11      CLC   0(4,R3),=CL4'TIME'  TIME STAMP REQUEST?\n         BNE   C12                 NO\n         OI    RUNOPT,RUTMT        YES, SET INDICATOR\n         LA    R3,3(R3)\n         B     CR4                 GET NEXT KEYWORD\nC12      CLC   0(8,R3),=CL8'NL-USERS'   SUPPRESS USERS LIST REQUIRED?\n         BNE   C13                 NO\n         OI    RUNOPT,RUNLU        YES, SET INDICATOR\n         NI    RUNIND,255-RUNOLIST ALLOW LIST\n         LA    R3,7(R3)\n         LA    R6,255-RUNLU\n         NI    CRSW4+1,OFF\n         B     CR3\nC13      CLC   0(9,R3),=CL9'NL-GROUPS'  SUPPRESS GROUPS LIST REQUIRED?\n         BNE   C14                 NO\n         OI    RUNOPT,RUNLG        YES, SET INDICATOR\n         NI    RUNIND,255-RUNOLIST ALLOW LIST\n         LA    R3,8(R3)\n         LA    R6,255-RUNLG\n         NI    CRSW4+1,OFF\n         B     CR3\nC14      CLC   0(9,R3),=CL9'NOACCOUNT'  NO ACCOUNT REQUEST?\n         BNE   C15                 NO\n         OI    RUNOPT,RUNOACC      YES, SET INDICATOR\n         LA    R3,8(R3)\n         B     CR4                 GET NEXT KEYWORD\nC15      CLC   0(8,R3),=CL8'DS-SHGDG'   SHORT WITH GDG'S LIST REQUEST?\n         BNE   C16                 NO\n         OI    RUNOPT,RUGDGL       YES, SET INDICATOR\n         OI    RUNIND,RUCSH\n         NI    RUNIND,255-RUNOLIST ALLOW LIST\n         NI    RUSREQ,255-RUSVSAM\n         LA    R3,7(R3)\n         B     CR4                 GET NEXT KEYWORD\nC16      CLC   0(5,R3),=CL5'CHECK' CHECK RUN REQUEST?\n         BNE   C17                 NO\n         OI    WHAT,WHCHECK        YES, SET INDICATOR\n         LA    R3,4(R3)\n         B     CR4                 GET NEXT KEYWORD\nC17      CLC   0(4,R3),=CL4'COPY'  COPY REQUEST?\n         BNE   C18                 NO\n         CLC   4(3,R3),=CL3'VOL'   YES, COPYVOL INFORMATION?\n         BE    C17V                YES\n         OI    STATUS,STCOPY       NO, SET INDICATOR\n         LA    R3,3(R3)\nC17A     BXLE  R3,R4,*+L'*+4\n         BAS   R14,CRCNT\n         CLI   0(R3),C' '          SEARCH OPERAND\n         BE    C17A\n         CLI   0(R3),C'('\n         BNE   ERR61\nC17B     BXLE  R3,R4,*+L'*+4\n         BAS   R14,CRCNT\n         CLI   0(R3),C' '          SEARCH START OF DSNAME\n         BE    C17B\n         LR    R1,R3\nC17C     CLI   0(R3),C')'\n         BE    C17D\n         CLI   0(R3),C'/'\n         BE    C17D\n         BXLE  R3,R4,*+L'*+4\n         B     C17D\n         CLI   0(R3),C' '\n         BNE   C17C\nC17D     LR    R14,R3              GET THE DSNAME\n         SR    R14,R1\n         BNP   ERR61\n         CH    R14,=AL2(L'COPYDS)\n         BH    ERR61\n         BCTR  R14,0\n         MVI   COPYDS,C' '\n         MVC   COPYDS+1(L'COPYDS-1),COPYDS\n         EX    R14,C17MV\n         CLR   R3,R5\n         BH    C17F\n         B     C17G\nC17MV    MVC   COPYDS(*-*),0(R1)   << EXECUTED >>\nC17E     BXLE  R3,R4,*+L'*+4\nC17F     BAS   R14,CRCNT\nC17G     CLI   0(R3),C' '\n         BE    C17E\n         CLI   0(R3),C')'\n         BE    CR4                 GET NEXT KEYWORD\n         CLI   0(R3),C'/'\n         BNE   CRERR\nC17H     BXLE  R3,R4,*+L'*+4\n         BAS   R14,CRCNT\n         CLI   0(R3),C' '\n         BE    C17H\n         CLI   0(R3),C')'\n         BE    CR4                 GET NEXT KEYWORD\n         LR    R1,R3               START OF COMMAND\nC17I     BXLE  R3,R4,*+L'*+4\n         B     C17J\n         CLI   0(R3),C')'\n         BNE   C17I\nC17J     BCTR  R3,0                STRIP LEADING BLANKS\n         CLR   R1,R3\n         BNH   C17K\n         CLI   0(R3),C' '\n         BE    C17J\nC17K     LR    R14,R3              GET THE COMMAND\n         SR    R14,R1\n         BM    ERR62\n         CH    R14,=AL2(L'CPYCMDT-1)\n         BH    ERR62\n         MVI   CPYCMD+1,0\n         MVI   CPYCMDT,C' '\n         MVC   CPYCMDT+1(L'CPYCMDT-1),CPYCMDT\n         EX    R14,C17MC\n         LA    R14,5(R14)\n         STC   R14,CPYCMD+1\nC17L     BXLE  R3,R4,*+L'*+4\n         BAS   R14,CRCNT\n         CLI   0(R3),C')'\n         BE    CR4                 GET NEXT KEYWORD\n         CLI   0(R3),C' '\n         BE    C17L\n         B     CRERR\nC17MC    MVC   CPYCMDT(*-*),0(R1)  << EXECUTED >>\nC17V     LA    R3,6(R3)\nC17VA    BXLE  R3,R4,*+L'*+4\n         BAS   R14,CRCNT\n         CLI   0(R3),C' '          SEARCH OPERAND\n         BE    C17VA\n         CLI   0(R3),C'('\n         BNE   ERR78\nC17VB    BXLE  R3,R4,*+L'*+4\n         BAS   R14,CRCNT\n         CLI   0(R3),C' '          SEARCH START OF VOLUME\n         BE    C17VB\n         LR    R1,R3\nC17VC    CLI   0(R3),C')'\n         BE    C17VD\n         BXLE  R3,R4,*+L'*+4\n         B     C17VD\n         CLI   0(R3),C' '\n         BNE   C17VC\nC17VD    LR    R14,R3              GET THE VOLUME\n         SR    R14,R1\n         BNP   ERR78\n         CH    R14,=H'6'\n         BH    ERR78\n         BCTR  R14,0\n         MVC   CPYVOL,=CL6' '\n         EX    R14,C17VMV\n         CLR   R3,R5\n         BH    C17VF+L'C17VF\nC17VE    CLI   0(R3),C' '\n         BE    C17VF\n         CLI   0(R3),C')'\n         BE    CR4                 GET NEXT KEYWORD\n         B     ERR78\nC17VF    BXLE  R3,R4,C17VE\n         BAS   R14,CRCNT\n         B     C17VE\nC17VMV   MVC   CPYVOL(*-*),0(R1)   << EXECUTED >>\nC18      CLC   0(4,R3),=CL4'ONLY'  ONLY REQUEST?\n         BNE   C19                 NO\n         OI    STATUS,STONLY       YES, SET INDICATOR\n         LA    R3,3(R3)\n         B     CR4                 GET NEXT KEYWORD\nC19      CLC   0(8,R3),=CL8'DS-SKOFF'   SUPPRESS UNPROCESSED VOLUMES?\n         BNE   C20                 NO\n         OI    RUSREQ,RUSKOFF      YES, SET INDICATOR\n         NI    RUNIND,255-RUNOLIST ALLOW LIST\n         LA    R3,7(R3)\n         B     CR4                 GET NEXT KEYWORD\nC20      CLC   0(7,R3),=CL7'DS-VSAM'    SHORT GDG'S+VSAM LIST REQUEST?\n         BNE   C30                 NO\n         OI    RUNOPT,RUGDGL       YES, SET INDICATOR\n         OI    RUNIND,RUCSH\n         NI    RUNIND,255-RUNOLIST ALLOW LIST\n         OI    RUSREQ,RUSVSAM\n         LA    R3,6(R3)\n         B     CR4                 GET NEXT KEYWORD\nC30      CLC   0(3,R3),=CL3'NEV'   NEV DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNEV\n         B     CXIT\n         CLC   0(3,R3),=CL3'NCV'   NCV DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNCV\n         B     CXIT\n         CLC   0(3,R3),=CL3'NNC'   NNC DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNNC\n         B     CXIT\n         CLC   0(3,R3),=CL3'NGV'   NGV DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNGV\n         B     CXIT\n         CLC   0(3,R3),=CL3'NDV'   NDV DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNDV\n         B     CXIT\n         CLC   0(3,R3),=CL3'NDD'   NDD DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNDD\n         B     CXIT\n         CLC   0(3,R3),=CL3'NIX'   NIX DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNIX\n         B     CXIT\n         CLC   0(3,R3),=CL3'NRE'   NRE DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNRE\n         B     CXIT\n         CLC   0(3,R3),=CL3'NSK'   NSK DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNSK\n         B     CXIT\n         CLC   0(3,R3),=CL3'NGD'   NGD DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNGD\n         B     CXIT\n         CLC   0(3,R3),=CL3'NVR'   NVR DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNVR\n         B     CXIT\n         CLC   0(3,R3),=CL3'NW1'   NW1 DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNW1\n         B     CXIT\n         CLC   0(3,R3),=CL3'NW2'   NW2 DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNW2\n         B     CXIT\n         CLC   0(3,R3),=CL3'NBR'   NBR DEFINITION?\n         BNE   *+L'*+8             NO\n         LA    R6,CRNBR\n         B     CXIT\n         CLC   0(3,R3),=CL3'NWI'   NWI DEFINITION?\n         BNE   C90                 NO\n         LA    R6,CRNWI\nCXIT     LA    R3,2(R3)\n         B     CR3                 GET NUMBER\nC90      CLI   0(R3),C'0'          NUMBER?\n         BL    CRERR               NO\n         LTR   R6,R6\n         BZ    CRERR\n         BAS   R14,GNM             GET THE NUMBER\n         BR    R6\nCRNEV    LA    R15,TBEVOLL\n         BAS   R14,CRSPC           COMPUTE NEW EL.VOL. SPACE\n         L     R0,TOTSPCE\n         S     R0,TBEVOLT\n         ST    R1,TBEVOLT\n         S     R0,TBAVOLT          UPDATE ALSO ACC.VOL. SPACE\n         ST    R1,TBAVOLT\n         AR    R0,R1\n         B     CRXIT\nCRNCV    LA    R15,CVLL\n         BAS   R14,CRSPC           COMPUTE NEW CAT.VOL. SPACE\n         L     R0,TOTSPCE\n         S     R0,TBCVOLT\n         ST    R1,TBCVOLT\n         B     CRXIT\nCRNNC    LA    R15,TBNVOLL\n         BAS   R14,CRSPC           COMPUTE NEW N-CAT.VOL. SPACE\n         L     R0,TOTSPCE\n         S     R0,TBNVOLT\n         ST    R1,TBNVOLT\n         B     CRXIT\nCRNGV    LA    R15,CVPL\n         BAS   R14,CRSPC           COMPUTE NEW CVOL PTR. SPACE\n         L     R0,TOTSPCE\n         S     R0,TBGVOLT\n         ST    R1,TBGVOLT\n         B     CRXIT\nCRNDV    LA    R15,TBDVOLL\n         BAS   R14,CRSPC           COMPUTE NEW NOT-D. VOL. SPACE\n         L     R0,TOTSPCE\n         S     R0,TBDVOLT\n         ST    R1,TBDVOLT\n         B     CRXIT\nCRNDD    LA    R15,DDNL\n         BAS   R14,CRSPC           COMPUTE NEW DDNAME'S SPACE\n         L     R0,TOTSPCE\n         S     R0,TBDDNT\n         ST    R1,TBDDNT\n         B     CRXIT\nCRNIX    LA    R15,NIXL\n         BAS   R14,CRSPC           COMPUTE NEW NULL INDEXES SPACE\n         L     R0,TOTSPCE\n         S     R0,TBNIXT\n         ST    R1,TBNIXT\n         B     CRXIT\nCRNRE    ST    R1,DSTABOV\n         ST    R1,DSTABCT\n         LA    R15,DSTABL\n         BAS   R14,CRSPC           COMPUTE NEW DSNAME'S SPACE\n         L     R0,TOTSPCE\n         S     R0,DSTABT\n         ST    R1,DSTABT\n         B     CRXIT\nCRNSK    LA    R15,8\n         BAS   R14,CRSPC           COMPUTE NEW SKIP NAMES SPACE\n         L     R0,TOTSPCE\n         S     R0,TBSKPT\n         ST    R1,TBSKPT\n         B     CRXIT\nCRNGD    LA    R15,12\n         BAS   R14,CRSPC           COMPUTE NEW HLQ NAMES SPACE\n         L     R0,TOTSPCE\n         S     R0,TBRGDST\n         ST    R1,TBRGDST\n         B     CRXIT\nCRNVR    LA    R15,1+L'DSNME\n         BAS   R14,CRSPC           COMPUTE NEW GENERIC NAMES SPACE\n         L     R0,TOTSPCE\n         S     R0,TBVRGNT\n         ST    R1,TBVRGNT\n         B     CRXIT\nCRNW1    LA    R15,1\n         BAS   R14,CRSPC           COMPUTE NEW 1ST RACF WA SPACE\n         L     R0,TOTSPCE\n         S     R0,WK1T\n         ST    R1,WK1T\n         B     CRXIT\nCRNW2    LA    R15,1\n         BAS   R14,CRSPC           COMPUTE NEW 2ND RACF WA SPACE\n         L     R0,TOTSPCE\n         S     R0,WK2T\n         ST    R1,WK2T\n         B     CRXIT\nCRNBR    LA    R15,NBRL\n         BAS   R14,CRSPC           COMPUTE NEW BYPASS RACF SPACE\n         L     R0,TOTSPCE\n         S     R0,TBBYRT\n         ST    R1,TBBYRT\nCRXIT    AR    R0,R1\n         ST    R0,TOTSPCE\n         B     CR4\nCRNWI    LA    R15,80              COMPUTE NEW IDCAMS ARRAY SPACE\n         BCTR  R1,0\n         XR    R0,R0\n         MR    R0,R15\n         LTR   R0,R0\n         BNZ   ERR46\n         SLDL  R0,8\n         LTR   R0,R0\n         BNZ   ERR46\n         SRL   R1,8\n         AH    R1,=H'8'\n         ST    R1,LGIDST\n         B     CR4\n         SPACE 1\nGNM      LR    R1,R3               GET NUMBER ROUTINE\n         LA    R0,6                5 DIGITS MAX.\nGNM1     CLI   0(R3),C'0'\n         BL    GNM3\n         CLI   0(R3),C'9'\n         BH    CRERR\n         BCT   R0,GNM2\n         B     CRERR\nGNM2     BXLE  R3,R4,GNM1\nGNM3     LR    R15,R3\n         SR    R15,R1\n         BNP   CRERR\n         BCTR  R15,0\n         EX    R15,GNMPK\n         CVB   R1,WORKD\n         AH    R1,=H'1'            R1 = NUMBER + 1\n         BR    R14                 RETURN\nGNMPK    PACK  WORKD,0(*-*,R1)     << EXECUTED >>\n         SPACE 1\nCRSPC    XR    R0,R0               COMPUTE SPACE ROUTINE\n         MR    R0,R15              R1 = NUMBER + 1, R15 = LENGTH\n         LTR   R0,R0\n         BNZ   ERR46\n         SLDL  R0,8\n         LTR   R0,R0\n         BNZ   ERR46\n         SRL   R1,8\n         AH    R1,=H'7'\n         SRL   R1,3\n         SLL   R1,3                R1 = SPACE UP ROUNDED\n         BR    R14                 RETURN\n         SPACE 1\nCRCNT    ST    R14,SVRETC          CONTINUATION\n        $READ  MF=(E,RDIPLS)       READ NEXT CARD\n         LTR   R15,R15             TEST RETURN CODE\n         BM    CNTERR\n         BNZ   ERR21\n        @OUT   PRCAR               PRINT INPUT CARD\n         LM    R3,R5,SCIN          SET TO SCAN INPUT CARD\n         L     R14,SVRETC\n         BR    R14                 GO BACK\nCNTERR   LA    R1,CNTERRM\n         B     CRNERR\nCRERR    MVI   CARDIN,C' '\n         MVC   CARDIN+1(L'CARDIN-1),CARDIN\n         MVI   0(R3),C'$'          POSITION OF ERROR\n        @OUT   PRCAR\n         LA    R1,STERR            STATEMENT ERROR\nCRNERR  @OUT   (R1)\n         XR    R15,R15\n         B     ERR22\nCR80    $RCLOSE\nCR81    @OUT   NOINPUT\n         NI    WHAT,255-WHIN\n         B     ERR21\nCR99    @XE\n         EJECT\nSVRETC   DC    F'0'\n         SPACE 1\n         DC    AL1(L'NOINPUT)\nNOINPUT  DC    C'0===== INPUT CONTROL MISSING ====='\n         DC    AL1(L'INPUT)\nINPUT    DC    C'0OPTIONS REQUESTS :'\n         DC    AL1(L'STERR)\nSTERR    DC    C' ===== SYNTAX ERROR ====='\n         DC    AL1(L'CNTERRM)\nCNTERRM  DC    C' ===== CONTINUATION MISSING ====='\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB002": {"ttr": 9990, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x00\\xeb\\x00\\xeb\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 235, "newlines": 235, "modlines": 0, "user": "SYSPAJA"}, "text": "B002     TITLE 'CLEAN-UP - ACCOUNTING REQUESTS (B002).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB002    @XS\n*        PROCESS ACCOUNTING REQUIREMENTS.\n         SPACE 1\n         LM    R3,R5,LISCAN\n         CLI   0(R3),C' '\n         BNE   *+L'*+8\nACR1     BXLE  R3,R4,*-8\n         B     ACR99\n         CLI   0(R3),C'V'          VOLUME REQUEST?\n         BE    RVL1                YES\n         CLI   0(R3),C'L'          FULL LIST REQUEST?\n         BE    RLS1                YES\n         CLI   0(R3),C'J'          JUMP DAYS REQUEST?\n         BE    RJD1                YES\n         CLI   0(R3),C'P'          PREFIX REQUEST?\n         BE    RPF1                YES\n         CLI   0(R3),C'A'          ACCVOL REQUEST?\n         BE    RAV1                YES\n         B     ACRER\nACRES    BCTR  R3,0\nACRER    MVC   LINE+1(L'LINE-1),LINE    POSITION OF ERROR\n         MVC   0(21,R3),=CL20'$... SYNTAX ERROR ...'\n        @OUT   LINE\n         B     ACR99\n         SPACE 1\nRVL1     CLI   0(R3),C' '          SEARCH END OF KEYWORD REQUEST\n         BE    RVL2\n         CLI   0(R3),C'('          START OF OPERAND?\n         BE    RVL4                YES\n         BXLE  R3,R4,RVL1\n         B     ACRES\n         CLI   0(R3),C' '          SEARCH START OF OPERAND\n         BNE   RVL3\nRVL2     BXLE  R3,R4,*-8\n         B     ACRES\nRVL3     CLI   0(R3),C'('          START OF OPERAND?\n         BNE   ACRER               NO, ERROR\nRVL4     BXLE  R3,R4,RVL5\n         B     ACRES\nRVL5     CLI   0(R3),C' '          SEARCH START OF KEY\n         BNE   RVL6\n         BXLE  R3,R4,RVL5\n         B     ACRES\nRVL6     CLI   0(R3),C')'          END OF OPERAND?\n         BE    ACR1                YES\n         LA    R0,7\n         LR    R1,R3\nRVL7     BXLE  R3,R4,*+L'*+4\n         B     ACRES\n         CLI   0(R3),C' '\n         BE    RVL8\n         CLI   0(R3),C')'\n         BE    RVL8\n         BCT   R0,RVL7\n         B     ACRER\nRVL8     LR    R14,R3              COMPUTE KEY LENGTH\n         SR    R14,R1\n         BCTR  R14,0\n         L     R6,TBAVOL\n         XR    R15,R15\nRVL9     CLI   0(R6),FMON\n         BE    RVL10\n         IC    R15,0(R6)\n         LA    R6,2(R6,R15)\n         B     RVL9\nRVL10    LA    R0,2(R6,R14)\n         CL    R0,TBAVOLE\n         BNL   ERR59               TABLE OVERFLOW\n         STC   R14,0(R6)\n         EX    R14,RVLMV           ADD NEW KEY\n         LR    R6,R0\n         MVI   0(R6),FMON\n         OI    ACCIND,AFVOL        SET VOLUME(S) PRESENT\n         B     RVL5\nRVLMV    MVC   1(*-*,R6),0(R1)     << EXECUTED >>\n         SPACE 1\nRLS1     OI    ACCIND,AFFULL       SET FULL LIST\nRLS2     BXLE  R3,R4,RLS3\n         B     ACR99\nRLS3     CLI   0(R3),C' '\n         BNE   RLS2\n         B     ACR1\n         SPACE 1\nRJD1     CLI   0(R3),C' '          SEARCH END OF KEYWORD REQUEST\n         BE    RJD3\n         CLI   0(R3),C'('          START OF OPERAND?\n         BE    RJD5                YES\n         BXLE  R3,R4,RJD1\n         B     ACRES\nRJD2     CLI   0(R3),C' '          SEARCH START OF OPERAND\n         BNE   RJD4\nRJD3     BXLE  R3,R4,RJD2\n         B     ACRES\nRJD4     CLI   0(R3),C'('          START OF OPERAND?\n         BNE   ACRER               NO, ERROR\nRJD5     BXLE  R3,R4,RJD6\n         B     ACRES\nRJD6     CLI   0(R3),C' '          SEARCH START OF DAY REQUEST\n         BNE   RJD7\n         BXLE  R3,R4,RJD6\n         B     ACRES\nRJD7     CLI   0(R3),C')'          END OF OPERAND?\n         BE    ACR1                YES\n         LA    R0,7\n         LR    R1,R3\nRJD8     BXLE  R3,R4,*+L'*+4\n         B     ACRES\n         CLI   0(R3),C' '\n         BE    RJD9\n         CLI   0(R3),C')'\n         BE    RJD9\n         BCT   R0,RJD8\n         B     ACRER\nRJD9     LR    R14,R3              COMPUTE LENGTH\n         SR    R14,R1\n         CH    R14,=H'3'           IS IT A DAY NAME LENGTH?\n         BE    RJD10               YES\n         CH    R14,=H'6'           IS IT A DATE DDMMYY LENGTH?\n         BNE   ACRER               NO, ERROR\n         CLC   0(L'TODAYA,R1),TODAYA    IS IT TODAY?\n         BE    RJD13               YES\n         B     RJD6\nRJD10    LA    R14,DAYT            CONTROL VALID NAME\nRJD11    CLC   0(L'DAYT,R1),0(R14)\n         BE    RJD12\n         LA    R14,L'DAYT(R14)\n         CLI   0(R14),FMOFF        END OF NAMES?\n         BNE   RJD11               NO, CONTINUE\n         B     ACRES\nRJD12    CLC   0(3,R1),TITDAT      IS IT TODAY?\n         BNE   RJD6                NO\nRJD13    OI    RUNOPT,RUNOACC      SET NO ACCOUNT\n         B     RJD6\n         SPACE 1\nRPF1     CLI   0(R3),C' '          SEARCH END OF KEYWORD REQUEST\n         BE    RPF3\n         CLI   0(R3),C'('          START OF OPERAND?\n         BE    RPF5                YES\n         BXLE  R3,R4,RPF1\n         B     ACRES\nRPF2     CLI   0(R3),C' '          SEARCH START OF OPERAND\n         BNE   RPF4\nRPF3     BXLE  R3,R4,RPF2\n         B     ACRES\nRPF4     CLI   0(R3),C'('          START OF OPERAND?\n         BNE   ACRER               NO, ERROR\nRPF5     BXLE  R3,R4,RPF6\n         B     ACRES\nRPF6     CLI   0(R3),C' '          SEARCH START OF PREFIX\n         BNE   RPF7\n         BXLE  R3,R4,RPF6\n         B     ACRES\nRPF7     CLI   0(R3),C')'          END OF OPERAND?\n         BE    ACR1                YES\n         LR    R1,R3\nRPF8     BXLE  R3,R4,*+L'*+4\n         B     ACRES\n         CLI   0(R3),C' '\n         BE    RPF9\n         CLI   0(R3),C')'\n         BNE   RPF8\nRPF9     LR    R15,R3\n         SR    R15,R1\n         CH    R15,=H'8'           PREFIX\n         BH    ACRER\n         MVI   DSNDATA,C' '\n         MVC   DSNDATA+1(L'DSNDATA-1),DSNDATA\n         BCTR  R15,0\n         EX    R15,RPFMV\nRPF10    CLI   0(R3),C' '\n         BNE   RPF11\n         BXLE  R3,R4,RPF10\n         B     ACRES\nRPF11    CLI   0(R3),C')'          END OF OPERAND?\n         BE    ACR1                YES\n         B     ACRES\nRPFMV    MVC   DSNDATA(*-*),0(R1)\n         SPACE 1\nRAV1     CLI   0(R3),C' '          SEARCH END OF KEYWORD REQUEST\n         BE    RAV3\n         CLI   0(R3),C'('          START OF OPERAND?\n         BE    RAV5                YES\n         BXLE  R3,R4,RAV1\n         B     ACRES\nRAV2     CLI   0(R3),C' '          SEARCH START OF OPERAND\n         BNE   RAV4\nRAV3     BXLE  R3,R4,RAV2\n         B     ACRES\nRAV4     CLI   0(R3),C'('          START OF OPERAND?\n         BNE   ACRER               NO, ERROR\nRAV5     BXLE  R3,R4,RAV6\n         B     ACRES\nRAV6     CLI   0(R3),C' '          SEARCH START OF VOL.SER.\n         BNE   RAV7\n         BXLE  R3,R4,RAV6\n         B     ACRES\nRAV7     CLI   0(R3),C')'          END OF OPERAND?\n         BE    ACR1                YES\n         LA    R0,7\n         LR    R1,R3\nRAV8     BXLE  R3,R4,*+L'*+4\n         B     ACRES\n         CLI   0(R3),C' '\n         BE    RAV9\n         CLI   0(R3),C')'\n         BE    RAV9\n         BCT   R0,RAV8\n         B     ACRER\nRAV9     LR    R14,R3              COMPUTE VOL.SER. LENGTH\n         SR    R14,R1\n         BCTR  R14,0\n         MVC   VADATA,=CL6' '\n         EX    R14,RAVMV           SET DESIRED VOL.SER.\n         CLI   0(R3),C')'          WAS END OF OPERAND?\n         BE    ACR1                YES\nRAV10    BXLE  R3,R4,*+L'*+4\n         B     ACRER\n         CLI   0(R3),C' '\n         BE    RAV10\n         CLI   0(R3),C')'          END OF OPERAND?\n         BE    ACR1                YES\n         B     ACRER\nRAVMV    MVC   VADATA(*-*),0(R1)\n         SPACE 1\nACR99   @XE\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB003": {"ttr": 9995, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x01\\xe6\\x01\\xe6\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 486, "newlines": 486, "modlines": 0, "user": "SYSPAJA"}, "text": "B003     TITLE 'CLEAN-UP - ACCOUNTING PROCESS (B003).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB003    @XS\n*        ---------------------\n*        DATA-SETS ACCOUNTING.\n*        ---------------------\n*\n*        AT ENTRY :   R4 = 0 : START OF VTOC READ.\n*                     R4 = + : DSCB'S VTOC READ (DSCB FMT POINTER).\n*                     R4 = - : END OF VTOC READ.\n         SPACE 1\n         USING DDNT,R2\n         LTR   R4,R4               WHICH ENTRY CALLED?\n         BM    QE0                 END VTOC\n         BP    QR0                 DSCB READ\n         EJECT\n*        START VTOC READ.\n*        ----------------\n         SPACE 1\n         LA    R3,CARDOU\n         USING ACDSECT,R3\nQSSW     NOP   QS2\n         OI    QSSW+1,ON\n        $VTOCDR LOCAREA,,MF=(L,QRDR)\n        $PUNCH (R3),,DDDATA,MF=(L,QRPU)\n         MVI   0(R3),C' '\n         MVC   1(L'CARDOU-1,R3),0(R3)\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    QS1                 NO, SKIP THE LIST\n         LA    R5,QTITYDD          SET TODAY DATE (YDD)\n         LA    R15,TYDD+1\n         XR    R0,R0\n         ICM   R0,B'0111',0(R15)\n         STC   R0,4(R5)\n         SRL   R0,4\n         STC   R0,3(R5)\n         SRL   R0,4\n         STC   R0,2(R5)\n         SRL   R0,8\n         STC   R0,1(R5)\n         SRL   R0,4\n         STC   R0,0(R5)\n         NC    0(5,R5),=X'0F0F0F0F0F'\n         TR    0(5,R5),TRTAB\n        @LIST  QTIT,,U\nQS1      XC    COUNTER,COUNTER\n         MVC   ACDATE(L'ACDATE),SYDD    SET DATE OF ACCOUNT\nQS2      MVC   QTITUN,DDNVOL\n         MVC   QTITUT,DDNUTY\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    QS3                 NO, SKIP THE LIST\n        @LIST  QTITU,=PL2'+50'\nQS3      MVC   ACVLS,DDNVOL\n         XR    R1,R1\n         IC    R1,DVTYP+3\n         STC   R1,ACTYP+1\n         SRL   R1,4\n         STC   R1,ACTYP\n         NC    ACTYP(L'ACTYP),=XL2'0F0F'\n         TR    ACTYP(L'ACTYP),TRTAB\n         MVC   SYSUSE,=F'1'       VOLUME LABEL USE TRACK 0\n         XC    TOTUSE,TOTUSE\n         B     QXIT\n         DROP  R3\n         EJECT\n*        DSCB'S VTOC READ.\n*        -----------------\n*\n*        WHEN PROCESSING THE DATA-SETS DESCRIBED BY A VOLUME VTOC\n*        DSCB'S FORMAT 1, THE FOLLOWING ACTIONS ARE TAKEN :\n*\n*        1. IF TEMPORARY OR UTILITY : BYPASS, IT SHOULD BE SCRATCHED\n*           FURTHER BY ANOTHER PROCESSING.\n*\n*        2. IF G.D.G. MODEL : BYPASS.\n         SPACE 1\n         USING FMT1DSCB,R4\nQR0      CLI   DS1FMTID,C'1'       DSCB'S FORMAT 1?\n         BE    QR1                 YES\n         LA    R5,DS4VTOCE         FORMAT 4 - VTOC EXTENT\n         L     R6,SYSUSE           ADD TO TOTAL SYSTEM USE\n         BAS   R14,QR50\n         NOP   0\n         ST    R6,SYSUSE\n         B     QXIT\nQR1      CLC   DS1DSNAM(3),=C'SYS' SKIP TEMPORARY DATA-SETS\n         BNE   QR2\n         CLC   DS1DSNAM+8(2),=C'.T'\n         BNE   QR2\n         CLC   DS1DSNAM+16(3),=C'.RA'\n         BE    QXIT                YES, BYPASS\nQR2      CLI   DS1DSNAM,C'*'       SKIP UTILITY DATA-SETS\n         BE    QXIT\n         CLC   DS1DSNAM(8),=CL8'SYSCTLG'     CATALOG DATA-SET?\n         BE    QR3                 YES\n         CLI   DS1EXT1,0           GDG MODEL?\n         BE    QXIT                YES\nQR3      LR    R3,R4               SAVE ORIGINAL WORK AREA\n         XR    R6,R6               SPACE COUNTER (TRACKS)\n         LA    R5,DS1EXT1          COMPUTE DATA-SET SPACE\n         BAS   R14,QR50\n         B     QXIT                EMPTY\n         LA    R5,DS1EXT2\n         BAS   R14,QR50\n         B     QR10\n         LA    R5,DS1EXT3\n         BAS   R14,QR50\n         B     QR10\nQR4      OC    DS1PTRDS(L'DS1PTRDS),DS1PTRDS ADDITIONAL DSCB?\n         BZ    QR10                NO\n         TM    DDNALL,DDNXD        VTOC IS OPENED?\n         BO    QR5                 YES\n        $VTOCDO DDNNME,MF=(E,QRDO) OPEN VTOC FOR DIRECT ACCESS\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR27\n         OI    DDNALL,DDNXD        SET OPENED\nQR5      MVC   ADDRNB+L'ADDRNB-L'DS1PTRDS(L'DS1PTRDS),DS1PTRDS\n         LA    R4,LOCAREA          SET ALTERNATE WORK AREA\n        $VTOCDR MF=(E,QRDR)        READ DSCB CONTINUATION\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR28\n         CLI   DS3FMTID,C'3'       IS THAT A FORMAT 3 DSCB?\n         BNE   QR4                 NO\n         LA    R15,4               SET FIRST 4 EXTENTS POINTER\n         LA    R5,DS3EXTNT\nQR6      BAS   R14,QR50\n         B     QR10\n         LA    R5,10(R5)\n         BCT   R15,QR6\n         LA    R15,9               SET LAST 9 EXTENTS POINTER\n         LA    R5,DS3ADEXT\nQR7      BAS   R14,QR50\n         B     QR10\n         LA    R5,10(0,R5)\n         BCT   R15,QR7\nQR10     LR    R4,R3               RESTORE ORIGINAL WORK AREA\n         LA    R3,CARDOU           PREPARE ACCOUNTING CARD\n         USING ACDSECT,R3\n         MVC   ACDSN(L'DS1DSNAM),DS1DSNAM\n         ST    R6,TOTTRKS\n         CVD   R6,WORKD\n         A     R6,TOTUSE\n         ST    R6,TOTUSE           ADD TO TOTAL USERS USE\n         UNPK  ACTRKS(L'ACTRKS),WORKD+5(3)\n         OI    ACTRKS+L'ACTRKS-1,C'0'\nQRSW     NOP   QR25\n         OI    QRSW+1,ON\n         LA    R14,DSNDATA\n         LR    R15,R14\n         CLI   0(R14),C' '\n         BNE   *+L'*+6\n         MVC   0(L'USID,R14),USID\n         LA    R14,L'USID-1(R14)\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(2,R14),=CL2'.D'\n         MVC   3(L'TODAYD,R14),TODAYD\n         MVC   L'TODAYD+3(2,R14),=CL2'.T'\n         MVC   L'TODAYD+5(L'THMS,R14),THMS\n         L     R6,DADATA\n         USING DYNLIST,R6\n         SPACE 1\n* NOTE - WHEN THE MASTER CATALOG IS VSAM OR ICF ('STEPCAT' PRESENT)\n*        THE \"CATLG\" AT $DYNALL TIME ENDS WITH R15=04 AND ERC=5708.\n*        TO BYPASS THE SITUATION, THE DATA-SET IS FIRST ALLOCATED\n*        WITH \"KEEP\" AND THEN CATALOGED USING CATALOG MACRO (OS-CVOL)\n*        OR INVOKING IDCAMS FUNCTION (ALIAS).\n         SPACE 1\n         L     R14,ATIOT\n         USING TIODSECT,R14\n         XR    R1,R1\nQR11     CLC   TIOELNGH(4),=XL4'0'\n         BE    QR14\n         CLC   TIOEDDNM,=CL8'STEPCAT'\n         BE    QR12\n         IC    R1,TIOELNGH\n         AR    R14,R1\n         B     QR11\n         DROP  R14\nQR12     MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         MVC   WORKDS(9),DSNDATA\n         LA    R0,WORKDS\n         LA    R1,WORKDS+8\nQR13     CLI   0(R1),C'.'\n         MVI   0(R1),C' '\n         BE    QR15\n         BCTR  R1,0\n         CLR   R1,R0\n         BH    QR13\nQR14     MVC   DSNDISP(5),=CL5'CATLG'\n         B     QR16\nQR15     XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(LOCAREAL-256),LOCAREA+256\n         LA    R1,WORKDS\n         ST    R1,DATACV+4\n         LA    R1,LOCAREA\n         ST    R1,DATACV+12\n        LOCATE DATACV\n         LTR   R15,R15\n         BNZ   QR14\n         CLC   LOCAREA(2),=H'1'\n         BNE   QR14\n         CLC   WORKDS(9),=CL9'SYSCTLG.V'\n         BE    *+L'*+10\n         MVC   DATACNME,WORKDS\n         B     *+L'*+6\n         MVC   DATACVOL(L'DATACVOL),LOCAREA+6\n         MVC   DSNDISP(4),=CL4'KEEP'\nQR16     MVC   DDNAME(8),DDDATA\n         MVC   DSNAME,DSNDATA\n         MVC   DSSTATUS(3),=CL3'NEW'\n         MVC   DSADISP(6),=CL6'DELETE'\n         MVC   DSUNIT(4),=CL4'DISK'\n         MVC   DSVOLSER,VADATA\n         MVC   DSALLOC(3),=CL3'CYL'\n         MVI   DSPRI,C'2'\n         MVI   DSSEC,C'1'\n         MVC   DSBLKSI(3),=CL3'800'\n         MVC   DSORG(2),=CL2'PS'\n         MVC   DSLRECL(2),=CL2'80'\n         MVI   DSRECFM1,C'F'\n         MVI   DSRECFM2,C'B'\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    QR17\n         ICM   R1,B'1111',=CL4'ALL.'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         B     ERR60\nQR17     CLC   DSNDISP(5),=CL5'CATLG'\n         BE    QR24\n         DROP  R6\n         L     R14,ATIOT\n         USING TIODSECT,R14\n         XR    R1,R1\nQR18     CLC   TIOELNGH(4),=XL4'0'\n         BE    QR19\n         CLC   TIOEDDNM,DDDATA\n         BE    QR20\n         IC    R1,TIOELNGH\n         AR    R14,R1\n         B     QR18\nQR19    @OUT   QDDNF\n         B     QR23\nQR20     ICM   R1,B'0111',TIOEFSRT\n         DROP  R14\n         USING UCBDSECT,R1\n         MVC   DATAVOL,UCBVOLI\n         MVC   DATATY,UCBTYP\n         NI    DATATY+1,255-UCBRR\n         DROP  R1\n         CLI   DATACNME,C' '\n         BNE   QR21\n         LA    R1,DSNDATA\n         ST    R1,DATACA+4\n        CATALOG DATACA\n         B     QR22\nQR21     LA    R1,DSNDATA\n         ST    R1,IDCDSN\n         LA    R1,DATACNME\n         ST    R1,IDCPLS\n         MVI   IDCFUN,C'C'\n        @X     C001                INVOKE IDCAMS FUNCTION\nQR22     LTR   R15,R15\n         BZ    QR24\n         MVC   QDIAGT,=CL7'CATALOG'\n         STC   R15,QDIAGRC+1\n         SRL   R15,4\n         STC   R15,QDIAGRC\n         NC    QDIAGRC,=XL2'0F0F'\n         TR    QDIAGRC,TRTAB\n         MVC   QDIAGV,DATAVOL\n         MVC   QDIAGN,DSNDATA\n        @OUT   QDIAG\n         LA    R1,DSNDATA\n         ST    R1,DATASC+4\n         XR    R0,R0               NOTE - IF NOT 0, SCRATCH USES IT\n        SCRATCH DATASC                    AS DEVICE UCB FOR MOUNT.\n         LTR   R15,R15\n         BZ    QR23\n         MVC   QDIAGT,=CL7'SCRATCH'\n         STC   R15,QDIAGRC+1\n         SRL   R15,4\n         STC   R15,QDIAGRC\n         NC    QDIAGRC,=XL2'0F0F'\n         TR    QDIAGRC,TRTAB\n        @OUT   QDIAG\nQR23     OI    RUNOPT,RUABORT      ABORT ACCOUNTING PROCESSING\n         B     QXIT\nQR24     OI    WHAT,WHDATA\nQR25    $PUNCH MF=(E,QRPU)\n         LTR   R15,R15\n         BNZ   ERR60\n         OI    WHAT,WHDATA\n         L     R1,COUNTER\n         LA    R1,1(R1)\n         ST    R1,COUNTER\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    QXIT                NO, SKIP THE LIST\n         TM    ACCIND,AFFULL       FULL LIST REQUESTED?\n         BZ    QXIT                NO, SKIP THE LIST\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R5,LINE\n         USING LQLNE,R5\n         MVC   LQDSN,ACDSN\n        @FILL  LQDSN\n         MVI   LQSP,C'-'\n         MVC   LQTOT,ACTRKS\n         DROP  R3\n         XR    R0,R0\n         L     R1,TOTTRKS\n         LH    R15,DVTYP+10\n         CLR   R1,R15\n         BL    QR30\n         DR    R0,R15\n         CL    R1,LIMIT\n         BL    QR30\n         MVC   LQCYLS(L'QCYMSK),QCYMSK\n         CVD   R1,WORKD\n         ED    LQCYLS,WORKD+5\n         LTR   R0,R0\n         BZ    QR30\n         MVC   LQTRKS(L'QTRMSK),QTRMSK\n         CVD   R0,WORKD\n         ED    LQTRKS,WORKD+6\n         DROP  R5\nQR30    @LIST  LINE\n         B     QXIT\n         DROP  R4\n         EJECT\n*        EXTENT COMPUTE ROUTINE.\n*\n*              R0  = WORK REGISTER\n*              R1  = WORK REGISTER\n*              R5  = EXTENT DESCRIPTION OF DSCB\n*              R6  = TOTAL SPACE COUNTER\n*              R14 = LINK REGISTER\n*\n*              RETURN +0 = NO EXTENT\n*                     +4 = NORMAL\n         SPACE 1\nQR50     CLI   0(R5),0             EXTENT EXISTS?\n         BER   R14                 NO, RETURN +0\n         MVC   WORKD(8),2(R5)      MOVE LIMITS\n         LH    R0,WORKD            COMPUTE LOWER LIMIT\n         MH    R0,DVTYP+10         TRANSFORM CYL. IN TRACKS\n         AH    R0,WORKD+2\n         LH    R1,WORKD+4          COMPUTE UPPER LIMIT\n         MH    R1,DVTYP+10         TRANSFORM CYL. IN TRACKS\n         AH    R1,WORKD+6\n         AH    R1,=H'1'\n         SR    R1,R0               COMPUTE EXTENT SPACE\n         AR    R6,R1               ADD TO TOTAL SPACE\n         B     4(R14)              RETURN +4\n         EJECT\n*        END VTOC READ.\n*        --------------\n         SPACE 1\nQE0      TM    DDNALL,DDNXD        VTOC IS OPENED?\n         BZ    QE1                 NO\n         NI    DDNALL,255-DDNXD    SET CLOSED\n        $VTOCDC\n         LTR   R15,R15\n         BNZ   ERR31\n         DROP  R2\nQE1      TM    RUNOPT,RUABORT      ACCOUNTING PROCESSING ABORTED?\n         BO    QXIT                YES\n         L     R1,SYSUSE\n         LR    R2,R1\n         CVD   R1,WORKD\n         MVC   QSYTOT,=XL6'402020202120'\n         ED    QSYTOT,WORKD+5      SYSTEM USE\n         L     R1,TOTUSE\n         AR    R2,R1\n         CVD   R1,WORKD\n         MVC   QUSTOT,=XL6'402020202120'\n         ED    QUSTOT,WORKD+5      USERS USE\n         LR    R1,R2\n         CVD   R2,WORKD\n         MVC   QVLUSE,=XL6'402020202120'\n         ED    QVLUSE,WORKD+5      VOLUME USE\n         LH    R2,DVTYP+8\n         MH    R2,DVTYP+10\n         SH    R2,DVALT\n         CVD   R2,WORKD\n         MVC   QVLTOT,=XL6'402020202120'\n         ED    QVLTOT,WORKD+5      VOLUME TOTAL\n         M     R0,=F'100'\n         DR    R0,R2               COMPUTE PERCENTAGE.\n         CVD   R1,WORKD\n         MVC   QVLPCT,=XL4'40202120'\n         ED    QVLPCT,WORKD+6\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    QXIT                NO, SKIP THE LIST\n        @LIST  QTOTM               STATISTICS USE\n         SPACE 1\nQXIT    @XE\n         EJECT\nQRDO    $VTOCDO ,MF=L\nQRDR    $VTOCDR ,ADDRNB,MF=L\nQRPU    $PUNCH ,,,MF=L\n         SPACE 1\nDATACV  CAMLST NAME,*-*,,*-*\nDATACA  CAMLST CAT,*-*,DATACVOL,DATACAT\nDATASC  CAMLST SCRATCH,*-*,,DATACAT,,OVRD\nDATACNME DC    CL44' ' <---------I\nDATACVOL DC    CL6' '            I\nDATACAT  DC    H'1'              I----- C001 : PARM.LIST\nDATATY   DC    XL4'0'            I\nDATAVOL  DC    CL6' ' <----------I\nDATARC   DC    H'0'\n         EJECT\nSYSUSE   DC    F'0'\nTOTUSE   DC    F'0'\nTOTTRKS  DC    F'0'\nLIMIT    DC    F'10'               CYLS LOWER LIMIT SIGNAL\nADDRNB   DC    XL8'0'              NEXT VTOC RECORD ADDRESS (MBBCCHHR)\nQCYMSK   DC    0CL10' ',X'402020202120',C'CYL.'\nQTRMSK   DC    0CL8' ',X'40202120',C'TRK.'\n         SPACE 1\n         DC    AL1(QTITL)\nQTIT     DC    C'1DATA-SETS ACCOUNTING LIST (DT='\nQTITYDD  DC    CL5' ',C') :'\nQTITL    EQU   *-QTIT\n         DC    AL1(QTITUL)\nQTITU    DC    C'0'\nQTITUN   DC    CL6' ',C' ('\nQTITUT   DC    CL8' ',C') :'\nQTITUL   EQU   *-QTITU\n         DC    AL1(QTOTML)\nQTOTM    DC    CL21' ',C'SYSTEM USE :'\nQSYTOT   DC    CL6' ',C' TRACKS, USERS USE :'\nQUSTOT   DC    CL6' ',C' TRACKS, VOLUME USE :'\nQVLUSE   DC    CL6' ',C' /'\nQVLTOT   DC    CL6' ',C' ='\nQVLPCT   DC    CL4' ',C' %'\nQTOTML   EQU   *-QTOTM\n         DC    AL1(L'QDDNF)\nQDDNF    DC    C'0 --- ACCOUNT - DD-SYSDATA NOT FOUND IN TIOT.'\n         DC    AL1(QDIAGL)\nQDIAG    DC    C'0 --- ACCOUNT - '\nQDIAGT   DC    CL7' ',C' (RC='\nQDIAGRC  DC    CL2' ',C') ON VOLUME '\nQDIAGV   DC    CL6' ',C' FAILED FOR DATA-SET : '\nQDIAGN   DC    CL44' '\nQDIAGL   EQU   *-QDIAG\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\nFMT1DSCB DSECT\n        IECSDSL1 (1)\n         ORG   DS1DSNAM\n        IECSDSL1 (3)\n         ORG   DS1FMTID\n        IECSDSL1 (4)\n         EJECT\n        PRINT  GEN\n         SPACE 1\n        #ACD   R=NO\nLQLNE    DSECT           ACCOUNT LIST LINE DESCRIPTION. --------------\n         SPACE 1\n         DS    C ----------------> ASA CONTROL\n         DS    CL8\nLQDSN    DS    CL44      DATA-SET NAME\n         DS    C\nLQSP     DS    CL1       '-'\n         DS    C\nLQTOT    DS    CL5       TOTAL NUMBER OF TRACKS\nLQCYLS   DS    CL6       NUMBER OF EQ. CYLS (OVER LIMIT)\n         DS    CL4       'CYL.'\nLQTRKS   DS    CL4       NUMBER OF EQ. TRKS (REST OF CYLS)\n         DS    CL4       'TRK.'\n         SPACE 1\nLLQLNE   EQU   *-LQLNE             LINE LENGTH\nLLQLNEC  EQU   0+L'LINE-LLQLNE     LINE LENGTH CONTROL\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLB004": {"ttr": 10247, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "SYSPAJA"}, "text": "B004     TITLE 'CLEAN-UP - SORT DSNAME''S TABLE (B004).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB004    @XS\n*        SORT DSNAME'S TABLE BY 'DSNAME'.\n         SPACE 1\nSORTLGTH EQU   L'DSNME+L'DSMVCNT+L'DSDDN\n         SPACE 1\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         CLI   0(R2),FMOFF         NOTHING IN TABLE?\n         BE    SORTXIT             YES\n         L     R3,DSTABNE          NUMBER OF ELEMENTS\n        $INSORT (R2),PARM=((R3),DSNME-DSTABDS,SORTLGTH,DSTABL,A,B)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR38\nSORTXIT @XE\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB005": {"ttr": 10249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x00\\xe2\\x00\\xe2\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 226, "newlines": 226, "modlines": 0, "user": "SYSPAJA"}, "text": "B005     TITLE 'CLEAN-UP - LOCATE CATALOG VOLUME (B005).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB005    @XS\n*        AT ENTRY :   R3 ------------> DC   AL1(L'NAME)\n*                               NAME   DC   CL'...NAME...'\n*                        WITH R4 = 0 : RACF USER CALL.\n*                                  + : RACF GROUP CALL.\n*                     R3 = 0 : CHECK LIST CALL\n         SPACE 1\n         LTR   R3,R3               CALL FOR WHAT?\n         BZ    GCV20               GO TO CHECK LIST\n         SPACE 1\n*        LOCATE CATALOG VOLUME IF ANY.\n*              R2 = A(LALNE) OR A(LGLNE)\n         SPACE 1\nGCVSW    NOP   GCV01\n         OI    GCVSW+1,ON\n         LA    R1,WORKDS\n         ST    R1,GCVLOC+4\n         ST    R1,SGCVL\n         LA    R1,LOCAREA\n         ST    R1,GCVLOC+12\n         ST    R1,SGCVLL\n         LA    R1,SVSNAP+4\n         ST    R1,SGCVLS\nGCV01    MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         XR    R1,R1\n         IC    R1,0(R3)            GET USER OR GROUP NAME LENGTH\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,GCVMV            SET USER OR GROUP NAME\n         L     R1,TBGVOL           CVOL POINTERS TABLE\nGCV02    CLI   0(R1),FMOFF         END OF TABLE?\n         BE    GCV03               YES\n         USING CVPDS,R1\n         CLC   CVPNAME(L'CVPNAME),WORKDS     THIS ONE?\n         BE    *+L'*+8             YES\n         LA    R1,CVPL(R1)         NO, NEXT ELEMENT\n         B     GCV02\n         OI    CVPFL,CVPRACF       SAY RACF DEFINED\n         B     GCV05\n         DROP  R1\nGCVMV    MVC   WORKDS(*-*),1(R3)   << EXECUTED >>\nGCV03    ST    R1,GCTBGPT          SAVE END OF TABLE POINTER\n         MVC   WORKD(L'WORKD),WORKDS    AND CVOL POINTER NAME\n         XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(LOCAREAL-256),LOCAREA+256\n        LOCATE GCVLOC\n        @SNAPS SN,SGCVL,GCV\n         LTR   R15,R15             TEST LOCATE COMPLETION CODE\n         BZ    GCV04\n         TM    RUNSN,SNGCV         SNAP ALREADY REQUESTED AND DONE?\n         BO    GCV99               YES, DON'T DO IT AGAIN\n        @SNAPS SN,SGCVL,ECV\n         B     GCV99\nGCV04    L     R1,GCTBGPT          GET END OF TABLE POINTER\n         LA    R15,CVPL(R1)\n         CL    R15,TBGVOLE         ANY OVERFLOW?\n         BL    *+L'*+6             NO\n         XR    R15,R15             YES\n         B     ERR64\n         USING CVPDS,R1\n         MVC   CVPNAME(L'CVPNAME),WORKD ADD IN TABLE\n         MVC   CVPVOL(L'CVPVOL),LOCAREA+6    SET CATALOG VOLUME\n         OI    CVPFL,CVPRACF       SAY RACF DEFINED\n         MVI   0(R15),FMOFF        SET FINAL MARKER\n         USING LALNE,R2 <--- IDEM ---> USING LGLNE,R2\nGCV05    MVC   LAVAR(25),=CL25'- CVOL OR ALIAS POINTER :'\n         MVC   LAVAR+26(L'CVPVOL),CVPVOL     GET CATALOG VOLUME\n         DROP  R1,R2\n         LTR   R4,R4               WHO CALLED?\n         BNZ   GCV10               IT IS RACFGRP\n         TM    RUNIND,RUNOLIST     IT IS RACFUSR, LIST REQUESTED?\n         BO    GCV11               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    GCV11               YES\nGCV10   @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GCV11               NO\n        @COPY  LINE\nGCV11    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         B     GCV99\n         SPACE 1\n*        CHECK LIST.\n         SPACE 1\nGCV20    TM    RUNIND,RUNOLIST     LIST REQUESTED?\n         BO    GCV99               NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    GCV99               YES\n         L     R2,TBGVOL           START OF CVOL PTR. TABLE\n         CLI   0(R2),FMOFF         EMPTY?\n         BE    GCV99               YES\n         XR    R3,R3               RESET TOTAL COUNT\n        @LIST  GCVTIT,,U\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GCV21               NO\n        @COPY  GCVTIT,,U\nGCV21    MVI   LINE,C'0'           CLEAR LINE\n         MVI   LINE+1,C' '\n         MVC   LINE+2(L'LINE-2),LINE+1\n         LA    R4,LINE+6           STARTING ADDRESS IN LINE\n         LA    R0,6                MAX. BY LINE\n         USING CVPDS,R2\nGCV22    L     R2,TBGVOL           START OF CVOL PTR. TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    GCV30               YES\n         TM    CVPFL,CVPRACF       NO, RACF DEFINED?\n         BO    *+L'*+8             YES\n         LA    R2,CVPL(R2)         NO, NEXT ELEMENT\n         B     GCV22+L'GCV22\n         XR    R5,R5               RESET COUNT\n         MVC   0(L'CVPVOL,R4),CVPVOL    GET VOLUME SERIAL\nGCV23    A     R5,=F'1'\n         MVI   CVPFL,0             SET PROCESSED\nGCV24    LA    R2,CVPL(R2)         NEXT ELEMENT\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    GCV25               YES\n         CLC   0(L'CVPVOL,R4),CVPVOL    NO, SAME VOLUME SERIAL?\n         BE    GCV23               YES\n         B     GCV24               NO\nGCV25    MVI   L'CVPVOL+1(R4),C':'\n         AR    R3,R5               COMPUTE TOTAL COUNT\n         CVD   R5,WORKD\n         CLC   WORKD(5),=XL5'0'\n         BE    GCV26\n         MVC   L'CVPVOL+3(5,R4),=CL5'>100K'\n         B     GCV27\nGCV26    MVC   L'CVPVOL+3(5,R4),=XL5'2020202120'\n         ED    L'CVPVOL+2(6,R4),WORKD+5\nGCV27    BCT   R0,GCV28\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GCV21               NO\n        @COPY  LINE\n         B     GCV21\nGCV28    LA    R4,L'CVPVOL+12(R4)\n         B     GCV22\n         DROP  R2\nGCV30    CLI   LINE+6,C' '         ANYTHING IN LINE?\n         BE    GCV31               NO\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GCV31               NO\n        @COPY  LINE\nGCV31    CVD   R3,WORKD            TOTAL COUNT\n         CLC   WORKD(4),=XL5'0'\n         BE    GCV32\n         MVC   GCVTOTN+1(8),=CL8'>10M.'\n         B     GCV33\nGCV32    ED    GCVTOTN,WORKD+4\nGCV33   @LIST  GCVTOT\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GCV40               NO\n        @COPY  GCVTOT\n         USING CVPDS,R2\nGCV40    L     R2,TBGVOL           START OF CVOL PTR. TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    GCV90               YES\n         TM    CVPFL,CVPOS+CVPICF+CVPLOC     NO, ANY OTHER?\n         BNZ   *+L'*+8             YES\n         LA    R2,CVPL(R2)         NO, NEXT ELEMENT\n         B     GCV40+L'GCV40\n        @LIST  GCVOTH,,U\nGCV41    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R4,LINE+6           STARTING ADDRESS IN LINE\n         LA    R0,4                MAX. BY LINE\nGCV42    MVC   0(L'CVPNAME,R4),CVPNAME  CVOL POINTER\n         MVI   L'CVPNAME+1(R4),C':'\n         MVC   L'CVPNAME+3(L'CVPVOL,R4),CVPVOL    CATALOG VOL. SERIAL\n         TM    CVPFL,CVPOS\n         BZ    *+L'*+10\n         MVC   L'CVPNAME+L'CVPVOL+4(3,R4),=CL3'(O)'\n         B     GCV43\n         TM    CVPFL,CVPICF\n         BZ    *+L'*+10\n         MVC   L'CVPNAME+L'CVPVOL+4(3,R4),=CL3'(I)'\n         B     GCV43\n         MVC   L'CVPNAME+L'CVPVOL+4(3,R4),=CL3'(L)'\nGCV43    LA    R2,CVPL(R2)         NEXT ELEMENT\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    GCV45               YES\n         TM    CVPFL,CVPOS+CVPICF+CVPLOC     NO, ANY OTHER?\n         BZ    GCV43               NO\n         BCT   R0,GCV44\n        @LIST  LINE\n         B     GCV41\nGCV44    LA    R4,L'CVPNAME+L'CVPVOL+11(R4)\n         B     GCV42\n         DROP  R2\nGCV45   @LIST  LINE\nGCV90    MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\nGCV99   @XE\n         EJECT\nGCVLOC  CAMLST NAME,*-*,,*-*\n         SPACE 1\nSGCVL    DC    A(*-*)\n         DC    A(L'WORKDS)\nSGCVLS   DC    A(*-*)\n         DC    A(12)\nSGCVLL   DC    A(*-*)\n         DC    XL1'80',AL3(LOCAREAL)\n         SPACE 1\nGCTBGPT  DC    F'0'\n         SPACE 1\n         DC    AL1(L'GCVTIT)\nGCVTIT   DC    C'1RACF / CVOL OR ALIAS POINTERS STATUS CHECK LIST :'\n         DC    AL1(GCVTOTL)\nGCVTOT   DC    C'0RACF / TOTAL OF CVOL OR ALIAS POINTERS :'\nGCVTOTN  DC    XL8'4020202020202120',C'.'\nGCVTOTL  EQU   *-GCVTOT\n         DC    AL1(L'GCVOTH)\nGCVOTH   DC    C'0LIST OF CVOLS OR ALIASES NOT RACF USER OR GROUP :'\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n        #LALNE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB006": {"ttr": 10497, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x01)\\x01)\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 297, "newlines": 297, "modlines": 0, "user": "SYSPAJA"}, "text": "B006     TITLE 'CLEAN-UP - CONNECTS LIST (B006).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB006    @XS\n*        RACF CONNECT'S LIST.\n         SPACE 1\n         LA    R2,LINE\n         USING LALNE,R2\n         L     R7,WK2A             RACF WORK AREA\n         USING WKDS,R7\nCOSW     NOP   CO0\n         OI    COSW+1,ON\n         ST    R7,SCOGW\n         LA    R1,SVSNAP+4\n         ST    R1,SCOGGS\n        $GDATE LCLAST+COLJL-L'COLJD,,,WORKD+3,MF=(L,CODTE)\n         SPACE 1\n*        GET CONNECT'S LIST FROM RACF.\n         SPACE 1\nCO0      MVC   CONMEL(L'CONMEL+L'CONAME),USNMEL\n         XR    R1,R1\n         IC    R1,CONMEL           GET LENGTH OF USERID NAME\n         BCTR  R1,0                -1 FOR MOVE\n         MVC   CORN(L'CORN),CORN-1\n         EX    R1,COMO             MOVE USERID NAME\n         MVC   CORG(L'CORG),LACN   MOVE CONNECT GROUP NAME\n         LA    R14,CONAME+1(R1)    NOW PREPARE NAME TO LOCATE\n         MVI   0(R14),0\n         LA    R0,LACN\n         LA    R15,LACN+L'LACN-1\n         CLI   0(R15),C' '\n         BNE   *+L'*+4\n         BCT   R15,*-8\n         SR    R15,R0\n         EX    R15,COMV            EXECUTE MOVE\n         LA    R1,3(R1,R15)\n         STC   R1,CONMEL\n         XC    WORKRBA(WORKBSLL),WORKRBA\n        ICHEINTY LOCATE,TYPE='CON',ENTRY=CONMEL,WKAREA=(R7),           C\n               ACTIONS=(ACNA,ACNLJT,ACNLJD,ACNG,ACNI,ACNF1,ACNF2,      C\n               ACNF3,ACNF4,ACNF5,ACNT)\n         LA    R14,WORKBS\n         A     R14,WORKTL\n         STCM  R14,B'0111',SCOGN+1\n         XR    R14,R14\n         IC    R14,CONMEL\n         LA    R14,1(R14)\n         ST    R14,SCOGG\n        @SNAPS SF,SCOGL,RCO\n         LTR   R15,R15             ANY ERROR?\n         BZ    CO2                 NO\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  CORRC,WORKD+6(2)\n         OI    CORRC+1,C'0'\n         MVI   CORAC,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   CO1                 NO\n         STC   R0,CORAC\n         OI    CORAC,C'0'\nCO1     @LIST  COR\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    CO99                NO\n        @COPY  COR\n         B     CO99\nCOMO     MVC   CORN(*-*),CONAME    << EXECUTED >>\nCOMV     MVC   1(*-*,R14),LACN     << EXECUTED >>\nCO2      OC    WORKTL,WORKTL       DATA RETURNED?\n         BZ    CO3                 NO\n         CLC   WORKVRA(2),=XL2'0008'    AUTHOR RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+10(2),=XL2'0004' LAST TIME RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+16(2),=XL2'0003' LAST DATE RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+21(2),=XL2'0001' UNIV. AUTH. RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+24(2),=XL2'0002' ACCESS COUNT RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+28(2),=XL2'0001' FLAG1 RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+31(2),=XL2'0001' FLAG2 RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+34(2),=XL2'0001' FLAG3 RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+37(2),=XL2'0001' FLAG4 RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+40(2),=XL2'0001' FLAG5 RECEIVED?\n         BNE   CO3                 NO\n         CLC   WORKVRA+43(2),=XL2'0001' TERM. UNIV. AUTH. RECEIVED?\n         BE    CO10                YES\nCO3      MVC   COERN(L'COERN+L'COERG+1),CORN\n        @LIST  COERR\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    CO99                NO\n        @COPY  COERR\n         B     CO99\nCO10     MVI   LCSPO,C'('\n         MVC   LCOW+1(6),=CL6'......'\n         CLI   WORKVRA+2,X'FF'\n         BE    *+L'*+6\n         MVC   LCOW(L'LCOW),WORKVRA+2   MOVE OWNER OF GROUP\n         MVI   LCSPT,C')'\n         MVI   LCSPU,C'-'\n         MVC   LCAUT(L'LCAUT),=CL22'DEFAULT UNIV. ACCESS :'\n         CLI   WORKVRA+23,0        ANY ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LCAU+1(6),=CL6'......'\n         B     CO11\n         CLI   WORKVRA+23,ACEEALTR ALTER ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LCAU(5),=CL5'ALTER'\n         B     CO11\n         CLI   WORKVRA+23,ACEECNTL CONTROL ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LCAU(7),=CL7'CONTROL'\n         B     CO11\n         CLI   WORKVRA+23,ACEEUPDT UPDATE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LCAU(6),=CL6'UPDATE'\n         B     CO11\n         CLI   WORKVRA+23,ACEEREAD READ ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LCAU(4),=CL4'READ'\n         B     CO11\n         CLI   WORKVRA+23,ACEENONE NONE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LCAU(4),=CL4'NONE'\n         B     CO11\n         LA    R1,LCAU+1           ANYTHING MIXED OR UNKNOWN\n         MVC   0(5,R1),=CL5'X''  '''\n         LA    R15,WORKVRA+23\n         BAS   R14,DMPRTS+L'DMPRTS\nCO11     MVI   LCSPA,C'('\n         XR    R0,R0\n         ICM   R0,B'0011',WORKVRA+26    ACCESS COUNT\n         LTR   R0,R0\n         BZ    CO12\n         CVD   R0,WORKD\n         MVC   LCSI,=XL6'402020202120'\n         ED    LCSI,WORKD+5\n         B     CO12+L'CO12\nCO12     MVC   LCSI,=CL6'-NULL-'\n         MVI   LCSPB,C')'\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    CO13                NO\n        @COPY  LINE\nCO13     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R1,LCFLGS\n         LA    R15,WORKVRA+30\n         CLI   0(R15),X'80'        FLAG1 - ADSP?\n         BNE   CO20\n         MVC   0(4,R1),=CL4'ADSP'\n         LA    R1,5(R1)\n         B     CO21\nCO20     CLI   0(R15),0\n         BE    CO21\n         MVI   0(R1),C'1'\n         BAS   R14,DMPRTN\nCO21     LA    R15,WORKVRA+33\n         CLI   0(R15),X'80'        FLAG2 - SPECIAL?\n         BNE   CO22\n         MVC   0(7,R1),=CL7'SPECIAL'\n         LA    R1,8(R1)\n         B     CO23\nCO22     CLI   0(R15),0\n         BE    CO23\n         MVI   0(R1),C'2'\n         BAS   R14,DMPRTN\nCO23     LA    R15,WORKVRA+36\n         CLI   0(R15),X'80'        FLAG3 - OPERATIONS?\n         BNE   CO24\n         MVC   0(10,R1),=CL10'OPERATIONS'\n         LA    R1,11(R1)\n         B     CO25\nCO24     CLI   0(R15),0\n         BE    CO25\n         MVI   0(R1),C'3'\n         BAS   R14,DMPRTN\nCO25     LA    R15,WORKVRA+39\n         CLI   0(R15),X'80'        FLAG4 - REVOKE?\n         BNE   CO26\n         MVC   0(6,R1),=CL6'REVOKE'\n         LA    R1,7(R1)\n         B     CO27\nCO26     CLI   0(R15),0\n         BE    CO27\n         MVI   0(R1),C'4'\n         BAS   R14,DMPRTN\nCO27     LA    R15,WORKVRA+42\n         CLI   0(R15),X'80'        FLAG5 - GRPACC?\n         BNE   CO28\n         MVC   0(6,R1),=CL6'GRPACC'\n         LA    R1,7(R1)\n         B     CO30\nCO28     CLI   0(R15),0\n         BE    CO30\n         MVI   0(R1),C'5'\n         BAS   R14,DMPRTN\nCO30     CLI   LCFLGS,C' '\n         BNE   *+L'*+8\n         LA    R1,LCATTR\n         B     *+L'*+6\n         MVC   LCATTR(L'LCATTR),=CL7'ATTR. :'\n         CLI   WORKVRA+45,0        TERMUACC?\n         BE    CO31                YES\n         MVI   0(R1),C'-'\n         LA    R1,2(R1)\n         CLI   WORKVRA+45,X'80'    NOTRMUACC?\n         BNE   *+L'*+10            NO\n         MVC   0(9,R1),=CL9'NOTRMUACC'\n         B     CO31\n         MVI   0(R1),C'T'          ANYTHING MIXED OR UNKNOWN\n         LA    R15,WORKVRA+45\n         BAS   R14,DMPRTN\nCO31     CLI   LCATTR,C' '\n         BE    CO32\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    CO32                NO\n        @COPY  LINE\nCO32     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         CLC   WORKVRA+18(3),=XL3'FFFFFF'    ANY CONNECT?\n         BE    CO99                NO, GET NEXT CONNECT\n         MVC   LCLAST(COLJL),COLJ\n         UNPK  WORKD,WORKVRA+18(3)\n         OI    WORKD+L'WORKD-1,C'0'\n        $GDATE MF=(E,CODTE)\n         LTR   R15,R15\n         BNZ   ERR1\n         UNPK  WORKD,WORKVRA+12(4)\n         MVC   LCLAST+L'COLJ(2),WORKD+1\n         MVC   LCLAST+L'COLJ+3(2),WORKD+3\n         MVC   LCLAST+L'COLJ+6(2),WORKD+5\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    CO99                NO\n        @COPY  LINE\n         B     CO99                GET NEXT CONNECT\n         DROP  R2,R7\nCO99    @XE\n         EJECT\nCODTE   $GDATE ,,,,MF=L\nACNA    ICHEACTN FIELD=AUTHOR\nACNLJT  ICHEACTN FIELD=LJTIME\nACNLJD  ICHEACTN FIELD=LJDATE\nACNG    ICHEACTN FIELD=UACC\nACNI    ICHEACTN FIELD=INITCNT\nACNF1   ICHEACTN FIELD=FLAG1\nACNF2   ICHEACTN FIELD=FLAG2\nACNF3   ICHEACTN FIELD=FLAG3\nACNF4   ICHEACTN FIELD=FLAG4\nACNF5   ICHEACTN FIELD=FLAG5\nACNT    ICHEACTN FIELD=NOTRMUAC\n         SPACE 1\nSCOGL    DC    A(CONMEL)\nSCOGG    DC    A(*-*)\nSCOGGS   DC    A(*-*)\n         DC    A(8)\nSCOGW    DC    A(*-*)\nSCOGN    DC    XL1'80',AL3(*-*)\n         SPACE 1\nCONMEL   DC    AL1(L'CONAME+L'CONMGR+1)\nCONAME   DC    CL8' ',XL1'0'\nCONMGR   DC    CL8' '\nCOLJ     DC    C'LAST CONNECT AT '\n         DC    CL8'  .  .  ',C' OF '\nCOLJD    DC    CL20' '\nCOLJL    EQU   *-COLJ\n         SPACE 1\n         DC    AL1(CORL)\nCOR      DC    CL3' ',CL3'-- '\nCORN     DC    CL8' ',C' '\nCORG     DC    CL8' ',C' : RACF READ TYPE=CON (RC='\nCORRC    DC    CL2' ',C'/AC='\nCORAC    DC    CL1' ',C').'\nCORL     EQU   *-COR\n         DC    AL1(COERRL)\nCOERR    DC    CL3' ',CL3'-- '\nCOERN    DC    CL8' ',C' '\nCOERG    DC    CL8' ',C' : RACF READ TYPE=CON '\n         DC    C'(INVALID WORK AREA RECEIVED BACK).'\nCOERRL   EQU   *-COERR\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n        #WKDS\n         SPACE 2\n        #LALNE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB007": {"ttr": 10503, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\to\\x00\\x90\\to\\x125\\x01\\xe3\\x01\\xe3\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-06T00:00:00", "modifydate": "1990-04-06T12:35:00", "lines": 483, "newlines": 483, "modlines": 0, "user": "SYSPAJA"}, "text": "B007     TITLE 'CLEAN-UP - GET USER DATA-SETS PROFILES (B007).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB007    @XS\n*        GET DATA-SET'S PROFILES OF THIS USER.\n*\n*        NORMAL PROCESS :\n*        - CHANGE ANY ALTER ACCESS TO UPDATE ACCESS.\n*        - CHANGE OWNER IF NOT ITSELF (ALLOWS DMS RESTORE).\n*        - DELETE ALTER ACCESS FOR SELF-USER.\n*        - ONLY IF GRPACC AND UNIVERSAL ACESS IS NONE, ADD READ ACCESS\n*          FOR GROUP IF ABSENT (OBSOLETED, NOW A BYPASS HAS BEEN CODED\n*          BELOW, SEE AT INSTRUCTION MARKED WITH --- *1 ---).\n         SPACE 1\n         LA    R1,WORKDS\n         ST    R1,SUSPDL\n         LA    R1,SVSNAP+4\n         ST    R1,SUSPDS\n         USING LALNE,R2\n         USING WKDS,R7\n         MVI   LASPU,C'-'\n         XC    ZERODSN,ZERODSN\n         XR    R1,R1\n         IC    R1,USNMEL           GET LENGTH OF USERID\n         STC   R1,ZERODS           SET LENGTH OF USERID\n         STC   R1,TUSIDL\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,UDMV             EXECUTE MOVE\n         MVC   TUSID(L'TUSID),ZERODSN   MOVE FOR TEST OF USERID\n         LA    R1,TUSID+1(R1)\n         MVI   0(R1),C'.'\n         L     R7,WK2A             GET ALTERNATE RACF WORK AREA\n         ST    R7,SUSPDW\n         XC    WORKRBA,WORKRBA\n         XC    WORKDDC,WORKDDC\nUD1      TM    WORKRBA+6,X'80'\n         BO    *+L'*+8\n         NI    UDOSW+1,OFF\n         B     *+L'*+4\n         OI    UDOSW+1,ON\n         XC    WORKRBA,WORKRBA\n         XC    WORKRES(WORKBSL),WORKRES\n         MVC   VSNERR,=CL6' '\n         LA    R0,ZERODS\nUDOSW    NOP   UDO1\n        ICHEINTY ENTRY=(R0),WKAREA=(R7),GENERIC=NO,MF=(E,UDLST)\n         B     UDO2\nUDO1    ICHEINTY ENTRY=(R0),WKAREA=(R7),GENERIC=UNCOND,MF=(E,UDLST)\nUDO2     CH    R15,=H'12'          END FOR USER?\n         BE    UD4                 YES\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   *+L'*+14            BRANCH IF ERROR\n         XR    R1,R1\n         IC    R1,TUSIDL\n         EX    R1,UDTU             SAME USER?\n         BNE   UD4                 NO, END FOR USER\n         LA    R14,WORKBS\n         A     R14,WORKTL\n         STCM  R14,B'0111',SUSPDN+1\n         XR    R14,R14\n         IC    R14,ZERODS\n         LA    R14,1(R14)\n         ST    R14,SUSPDG\n        @SNAPS SF,SUSPDL,RDS\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    UD10                O.K.\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  USDSRC,WORKD+6(2)\n         OI    USDSRC+1,C'0'\n         MVI   USDSAC,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   UD2                 NO\n         STC   R0,USDSAC\n         OI    USDSAC,C'0'\nUD2      MVC   USDSNM(L'USDSNM),USDSNM-1\n         XR    R1,R1\n         IC    R1,USNMEL           GET LENGTH OF USERID\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,UDMU             EXECUTE MOVE\n         TM    STATUS,STUPT\n         BO    UD3\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUD3     @OUT   USDS\n         B     UD99\nUDMV     MVC   ZERODSN(*-*),USNAME << EXECUTED >>\nUDTU     CLC   ZERODSN(*-*),TUSID  << EXECUTED >>\nUDMU     MVC   USDSNM(*-*),USNAME  << EXECUTED >>\nUD4      CLI   LASPU,C' '          ANY DS-ENTRY FOR USER?\n         BE    UD99                YES\n         MVC   LADS(14),=CL14'(NO DATA-SETS)'\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD99                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD99                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD99                NO\n        @COPY  LINE\n         B     UD99                GET NEXT USER\nUD10     MVI   UDTSW,0             RESET\n         OC    WORKTL,WORKTL       DATA RETURNED?\n         BZ    UD11                NO\n         CLC   WORKVRA(2),=XL2'0008'    AUTHOR RECEIVED?\n         BNE   UD11                NO\n         CLC   WORKVRA+10(2),=XL2'0001' FLAG1 RECEIVED?\n         BNE   UD11                NO\n         CLC   WORKVRA+13(2),=XL2'0008' GROUP NAME RECEIVED?\n         BNE   UD11                NO\n         XR    R15,R15\n         LA    R3,WORKVRA+23\n         IC    R15,2(R3)           INST. DATA LENGTH\n         LA    R3,3(R15,R3)        SKIP INST. DATA\n         ICM   R15,B'0011',0(R3)   GET NUMBER OF VOLUMES\n         BNZ   *+L'*+4\n         OI    UDTSW,UDTSGF        NO VOLUMES = GENERIC\n         LA    R4,2(R15,R3)        SKIP VOLUME(S)\n         ICM   R15,B'0011',0(R4)\n         LA    R4,2(R15,R4)        SKIP TYPE(S)\n         CLC   0(2,R4),=XL2'0001'  UNIVACS RECEIVED?\n         BNE   UD11                NO\n         CLC   3(2,R4),=XL2'0002'  USERS/GROUPS NO. RECEIVED?\n         BE    UD13                YES\nUD11     MVC   USERDSN(L'USERDSN),USERDSN-1\n         XR    R1,R1\n         IC    R1,USNMEL           GET LENGTH OF USERID\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,UDUN             EXECUTE MOVE\n         TM    STATUS,STUPT\n         BO    UD12\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUD12    @OUT   USERDS\n         B     UD99\nUDUN     MVC   USERDSN(*-*),USNAME << EXECUTED >>\nUDMO     MVC   LADS(*-*),ZERODSN   << EXECUTED >>\nUDMVD    MVC   LADS+13(*-*),0(R6)    << EXECUTED >>\nUD13     XR    R1,R1\n         IC    R1,ZERODS           GET LENGTH OF DSNAME\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,UDMO             MOVE DATA-SET NAME\n        @FILL  LADS\n         OI    UDSW1+1,ON\n         OI    UDSW2+1,ON\n         OI    UDSW3+1,ON\n         OI    UDSW4+1,ON\n         L     R7,WK1A             RESTORE MAIN RACF WORK AREA\n         CLI   WORKVRA+24,X'80'    GROUP ACCESS ATTRIBUTE?\n         BNE   *+L'*+4             NO\n         NI    UDSW3+1,OFF\n         L     R7,WK2A             RESTORE ALTERNATE RACF WORK AREA\n         MVI   LASPV,C'('\n         MVC   LADSOW(L'LADSOW),WORKVRA+2    MOVE OWNER OF DATA-SET\n         MVI   LASPW,C')'\n         CLC   LADSOW,USER         OWNER OF DATA-SET IS USER ITSELF?\n         BE    *+L'*+4             YES\n         NI    UDSW1+1,OFF\n         MVC   LAACT(16),=CL16'- UNIV. ACCESS :'\n         CLI   2(R4),ACEEALTR      ALTER ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LAACT+17(8),=CL8'ALTER'\n         B     UD14\n         CLI   2(R4),ACEECNTL      CONTROL ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LAACT+17(8),=CL8'CONTROL'\n         B     UD14\n         CLI   2(R4),ACEEUPDT      UPDATE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LAACT+17(8),=CL8'UPDATE'\n         B     UD14\n         CLI   2(R4),ACEEREAD      READ ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LAACT+17(8),=CL8'READ'\n         B     UD14\n         CLI   2(R4),ACEENONE      NONE ACCESS?\n         BNE   *+L'*+14            NO\n         MVC   LAACT+17(8),=CL8'NONE'\n         NI    UDSW4+1,OFF\n         B     UD14\n         LA    R1,LAACT+17         ANYTHING MIXED OR UNKNOWN\n         LA    R15,2(R4)\n         BAS   R14,DMPRTS\nUD14     TM    WORKRBA+6,X'80'\n         BO    *+L'*+10\n         MVC   LAACT+26(5),=CL5'- (D)'\n         B     *+L'*+6\n         MVC   LAACT+26(5),=CL5'- (G)'\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD15                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD15                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD15                NO\n        @COPY  LINE\nUD15     XR    R4,R4\n         IC    R4,WORKVRA+25       GET INST. DATA LENGTH\n         LTR   R4,R4\n         BZ    UD18\n         MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LADS(12),=CL12'INST. DATA :'\n         LA    R5,60\n         LA    R6,WORKVRA+26       POINT TO INST. DATA OR NEXT\nUD16     CLR   R4,R5\n         BNL   *+L'*+2\n         LR    R5,R4\n         BCTR  R5,0\n         EX    R5,UDMVD\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD17                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD17                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD17                NO\n        @COPY  LINE\nUD17     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R5,1(R5)\n         AR    R6,R5\n         SR    R4,R5\n         BNZ   UD16\nUD18     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LADS+25(18),=CL18'- CREATION GROUP :'\n         MVC   LADS+44(8),WORKVRA+15    MOVE GROUP NAME OF CREATION\n         CLI   WORKVRA+12,X'80'    GROUP ACCESSIBLE?\n         BNE   *+L'*+6\n         MVC   LADS+53(24),=CL24'++ GROUP DATA-SET ACCESS'\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD19                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD19                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD19                NO\n        @COPY  LINE\nUD19     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LADS+25(8),=CL8'- VOL. :'\n         XR    R4,R4\n         ICM   R4,B'0011',0(R3)\n         LA    R3,2(R3)\n         BZ    UD23+L'UD23         NO VOLUMES\n         USING DSPVOLSR,R3\n         MVC   VSNERR(6),DSPVOLSR  SET VOLUME IN CASE ANY ACTION\nUD20     LA    R5,LADS+34\n         LA    R15,5               NO. OF VOL. SER. BY LINE\nUD21     MVC   0(6,R5),DSPVOLSR    SET THIS VOL. SER.\n         LA    R5,7(R5)\n         LA    R3,6(R3)            NEXT VOL. SER.\n         SH    R4,=H'6'            ANY OTHER VOLUME?\n         BNP   UD23                NO\n         BCT   R15,UD21            YES\n         DROP  R3\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD22                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD22                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD22                NO\n        @COPY  LINE\nUD22     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         B     UD20\nUD23     XR    R4,R4\n         ICM   R4,B'0011',0(R3)\n         LA    R3,2(R3)\n         TM    UDTSW,UDTSGF\n         BO    UD24                BRANCH IF GENERIC\n         USING DSPTYPE,R3\n         TM    DSPTYPE,DSPTP       VSAM DATA-SET?\n         BZ    *+L'*+6             NO\n         MVC   0(6,R5),=CL6'(VSAM)'\n         DROP  R3\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD24                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD24                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD24                NO\n        @COPY  LINE\nUD24     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         AR    R3,R4               NOW SKIP UNIVACS ALREADY DONE\n         ICM   R4,B'0011',0(R3)\n         LA    R3,2(R3,R4)         START OF VARIABLE FIELDS\n         ICM   R4,B'0011',2(R3)    GET NO. OF USERS IN ACCESS LIST\n         BNZ   UD25\n         LA    R3,8(R3)            NONE, SKIP ACLCNT-USERID-USERACS\n         B     UD41+L'UD41\nUD25     XR    R5,R5\n         ICM   R5,B'0011',4(R3)    GET LENGTH OF NAMES LIST\n         LA    R3,6(R3)            POINT TO NAMES LIST\n         LA    R5,2(R5,R3)         POINT TO ACCESS CODES\n         LTR   R4,R4               AT LEAST ONE?\n         BNP   UD41                NO\n         MVC   LADS+25(32),=CL32'- USER''S ACCESS LIST - - - - - -'\nUD30     MVC   LAAC(L'LAAC),0(R3)  MOVE NAME\n         CLC   ACCNAM,LAAC         DEFAULT GROUP DEFINED?\n         BNE   *+L'*+4             NO\n         OI    UDSW3+1,ON\n         MVI   LASPA,C':'\n         CLI   0(R5),ACEEALTR      ALTER ACCESS?\n         BNE   UD32                NO\n         MVC   LAAU,=CL8'ALTER'\n         TM    UDTSW,UDTSGF\n         BO    UD33                BRANCH IF GENERIC\n         CLC   LAAC,USER           ITSELF?\n         BE    UD31                YES\n         LA    R1,UDCOMM\n         MVI   0(R1),0\n        @X     C002\n         CLI   UDCOMM,0\n         BE    UD33\n         B     UD1\nUD31     NI    UDSW2+1,OFF\n         MVC   LADLM,=CL8'(DELETE)'\n         B     UD33\nUD32     CLI   0(R5),ACEECNTL      CONTROL ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LAAU,=CL8'CONTROL'\n         B     UD33\n         CLI   0(R5),ACEEUPDT      UPDATE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LAAU,=CL8'UPDATE'\n         B     UD33\n         CLI   0(R5),ACEEREAD      READ ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LAAU,=CL8'READ'\n         B     UD33\n         CLI   0(R5),ACEENONE      NONE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LAAU,=CL8'NONE'\n         B     UD33\n         LA    R1,LAAU             ANYTHING MIXED OR UNKNOWN\n         LR    R15,R5\n         BAS   R14,DMPRTS\nUD33     TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD40                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD40                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD40                NO\n        @COPY  LINE\nUD40     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R3,8(R3)            ADVANCE IN NAME LIST\n         LA    R5,1(R5)            ADVANCE IN ACCESS CODES\n         BCT   R4,UD30             LOOP IF ANY MORE\nUD41     LR    R3,R5               POINT TO AUDIT FIELD\n         CLC   0(2,R3),=XL2'0001'  AUDIT FLAGS RECEIVED?\n         BNE   UD45                NO\n         LA    R3,2(R3)            POINT TO AUDIT FLAGS\n         CLI   0(R3),0             ANYTHING?\n         BE    UD43                NO\n         CLI   0(R3),X'10'         ONLY NONE?\n         BE    UD43                YES\n         MVC   LADS+25(9),=CL9'- AUDIT :'\n         LA    R5,LADS+35\n         BAS   R14,AUDITF\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD42                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD42                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD42                NO\n        @COPY  LINE\nUD42     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\nUD43     LA    R3,1(R3)            POINT TO GLOBAL AUDIT FIELD\n         CLC   0(2,R3),=XL2'0001'  GLOBAL AUDIT FLAGS RECEIVED?\n         BNE   UD45                NO\n         LA    R3,2(R3)            POINT TO GLOBAL AUDIT FLAGS\n         CLI   0(R3),0             ANYTHING?\n         BE    UD45                NO\n         CLI   0(R3),X'10'         ONLY NONE?\n         BE    UD45                YES\n         MVC   LADS+25(16),=CL16'- GLOBAL AUDIT :'\n         LA    R5,LADS+42\n         BAS   R14,AUDITF\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    UD44                NO, SKIP THE LIST\n         TM    RUNOPT,RUNLU        SUPPRESS REQUESTED?\n         BO    UD44                YES\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    UD44                NO\n        @COPY  LINE\nUD44     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\nUD45     TM    UDTSW,UDTSGF\n         BO    UD1                 BRANCH IF GENERIC\nUDSW1    B     UDSW2\n         OI    UDSW1+1,ON\n         TM    RUNIND,RUNORACF     NO RACF ACTION WANTED?\n         BO    UDSW2               YES, BYPASS\n         LA    R1,UDCOMM\n         MVI   0(R1),1\n        @X     C002\n         CLI   UDCOMM,0\n         BNE   UD1\nUDSW2    B     UDSW3\n         OI    UDSW2+1,ON\n         TM    RUNIND,RUNORACF     NO RACF ACTION WANTED?\n         BO    UDSW3               YES, BYPASS\n         LA    R1,UDCOMM\n         MVI   0(R1),2\n        @X     C002\n         CLI   UDCOMM,0\n         BNE   UD1\nUDSW3    B     UD1\nUDSW4    B     UD1\n         B     UD1                 BYPASS THIS ACTION        --- *1 ---\n         TM    RUNIND,RUNORACF     NO RACF ACTION WANTED?\n         BO    UD1                 YES, BYPASS\n         LA    R1,UDCOMM\n         MVI   0(R1),3\n        @X     C002\n         B     UD1\n         DROP  R2,R7\nUD99    @XE\n         EJECT\nUDLST   ICHEINTY NEXTC,TYPE='DS',                                      C\n               ACTIONS=(ADAU,ADF1,ADGR,ADIN,ADAV,ADAT,ADUA,ADSC,ADSL,  C\n               ADSR,ADAD,ADGA),MF=L\n         SPACE 1\nADAU    ICHEACTN FIELD=AUTHOR\nADF1    ICHEACTN FIELD=FLAG1\nADGR    ICHEACTN FIELD=GROUPNM\nADIN    ICHEACTN FIELD=INSTDATA\nADAV    ICHEACTN FIELD=VOLSER\nADAT    ICHEACTN FIELD=DSTYPE\nADUA    ICHEACTN FIELD=UNIVACS\nADSC    ICHEACTN FIELD=ACLCNT\nADSL    ICHEACTN FIELD=USERID\nADSR    ICHEACTN FIELD=USERACS\nADAD    ICHEACTN FIELD=AUDIT\nADGA    ICHEACTN FIELD=GAUDIT\n         EJECT\nSUSPDL   DC    A(*-*)\nSUSPDG   DC    A(*-*)\nSUSPDS   DC    A(*-*)\n         DC    A(8)\nSUSPDW   DC    A(*-*)\nSUSPDN   DC    XL1'80',AL3(*-*)\n         SPACE 1\nUDCOMM   DC    AL1(0)              C002 - COMMUNICATION (ACTION/RETURN)\nTUSIDL   DC    XL1'0'\nTUSID    DC    XL9'0'\nUDTSW    DC    XL1'0'              SWITCHES\nUDTSGF   EQU   X'01'                    GENERIC PROFILE\n         SPACE 1\n         DC    AL1(USDSL)\nUSDS     DC    CL3' ',CL3'-- '\nUSDSNM   DC    CL8' ',C' : RACF READ TYPE=DS (RC='\nUSDSRC   DC    CL2' ',C'/AC='\nUSDSAC   DC    CL1' ',C').'\nUSDSL    EQU   *-USDS\n         DC    AL1(USERDSL)\nUSERDS   DC    CL3' ',CL3'-- '\nUSERDSN  DC    CL8' ',C' : RACF READ TYPE=DS '\n         DC    C'(INVALID WORK AREA RECEIVED BACK).'\nUSERDSL  EQU   *-USERDS\n         SPACE 2\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        ICHRRPF\n         EJECT\n        PRINT  GEN\n        #WKDS\n         SPACE 2\n        #LALNE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB008": {"ttr": 10757, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\to\\x00\\x90\\to\\x125\\x01\\xbd\\x01\\xbd\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-06T00:00:00", "modifydate": "1990-04-06T12:35:00", "lines": 445, "newlines": 445, "modlines": 0, "user": "SYSPAJA"}, "text": "B008     TITLE 'CLEAN-UP - GET GROUP DATA-SETS PROFILES (B008).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB008    @XS\n*        GET DATA-SET'S PROFILES OF THIS GROUP.\n         SPACE 1\n         LA    R1,WORKDS\n         ST    R1,SDSPDL\n         LA    R1,SVSNAP+4\n         ST    R1,SDSPDS\n         USING LGLNE,R2\n         USING WKDS,R7\n         MVI   LGSPD,C'-'\n         XC    ZERODSN,ZERODSN\n         XR    R0,R0\n         IC    R0,GRNMEL           GET LENGTH OF GROUP\n         XR    R15,R15\n         L     R14,TBBYR           BYPASS RACF NAMES TABLE\n         USING BYPRDS,R14\nGD1      CLI   BYPRLG,FMON         END OF TABLE?\n         BE    GD9                 YES\n         IC    R15,BYPRLG\n         CLR   R0,R15\n         BNE   GD2\n         LA    R1,BYPRPX(R15)\n         CLI   0(R1),C'.'\n         BNE   GD2\n         LR    R1,R15\n         BCTR  R1,0\n         EX    R1,GDCL\n         BE    GD3\nGD2      LA    R14,BYPRPX+1(R15)\n         B     GD1\nGDCL     CLC   BYPRPX(*-*),GRNAME  << EXECUTED >>\nGD3      MVI   LGDS,C'('\n         LA    R15,LGDS+1\n         ICM   R1,B'0111',BYPRDC\n         BP    GD4\n         ICM   R1,B'0111',BYPRGC\n         BP    GD5\n         MVC   0(3,R15),=CL3'NO '\n         LA    R15,3(R15)\n         B     GD6\nGD4      CVD   R1,WORKD\n         MVC   0(8,R15),=XL8'4020202020202120'\n         ED    0(8,R15),WORKD+4\n         LR    R1,R15\n         CLI   0(R15),C' '\n         BNE   *+L'*+8\n         LA    R15,1(R15)\n         B     *-12\n         MVC   0(1,R1),0(R15)\n         LA    R1,1(R1)\n         LA    R15,1(R15)\n         CLI   0(R15),C' '\n         BNE   *-18\n         MVC   0(10,R1),=CL10' DISCRETE '\n         LA    R15,10(R1)\n         ICM   R1,B'0111',BYPRGC\n         BNP   GD6\n         MVC   0(4,R15),=CL4'AND '\n         LA    R15,4(R15)\nGD5      CVD   R1,WORKD\n         MVC   0(8,R15),=XL8'4020202020202120'\n         ED    0(8,R15),WORKD+4\n         LR    R1,R15\n         CLI   0(R15),C' '\n         BNE   *+L'*+8\n         LA    R15,1(R15)\n         B     *-12\n         MVC   0(1,R1),0(R15)\n         LA    R1,1(R1)\n         LA    R15,1(R15)\n         CLI   0(R15),C' '\n         BNE   *-18\n         MVC   0(9,R1),=CL9' GENERIC '\n         LA    R15,9(R1)\nGD6      MVC   0(28,R15),=CL28'DATA-SETS PROFILES BYPASSED)'\n         B     GD13\n         DROP  R14\nGD9      LR    R1,R0\n         STC   R1,ZERODS           SET LENGTH OF GROUP-ID\n         STC   R1,TGRIDL\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,GDMV             EXECUTE MOVE\n         MVC   TGRID(L'TGRID),ZERODSN   MOVE FOR TEST OF GROUP-ID\n         LA    R1,TGRID+1(R1)\n         MVI   0(R1),C'.'\n         L     R7,WK2A             GET ALTERNATE RACF WORK AREA\n         XC    WORKDDC,WORKDDC\n         XC    WORKRBA,WORKRBA\nGD10     TM    WORKRBA+6,X'80'\n         BO    *+L'*+8\n         NI    GDOSW+1,OFF\n         B     *+L'*+4\n         OI    GDOSW+1,ON\n         XC    WORKRBA,WORKRBA\n         XC    WORKRES(WORKBSL),WORKRES\n         LA    R0,ZERODS\nGDOSW    NOP   GDO1\n        ICHEINTY ENTRY=(R0),WKAREA=(R7),GENERIC=NO,MF=(E,GDLST)\n         B     GDO2\nGDO1    ICHEINTY ENTRY=(R0),WKAREA=(R7),GENERIC=UNCOND,MF=(E,GDLST)\nGDO2     CH    R15,=H'12'          END FOR GROUP?\n         BE    GD12                YES\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   *+L'*+14            BRANCH IF ERROR\n         XR    R1,R1\n         IC    R1,TGRIDL\n         EX    R1,GDTG             SAME GROUP?\n         BNE   GD12                NO, END FOR GROUP\n         LA    R14,WORKBS\n         A     R14,WORKTL\n         STCM  R14,B'0111',SDSPDN+1\n         XR    R14,R14\n         IC    R14,ZERODS\n         LA    R14,1(R14)\n         ST    R14,SDSPDG\n         ST    R7,SDSPDW\n        @SNAPS SN,SDSPDL,GDS\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    GD20                O.K.\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  GRDSRC,WORKD+6(2)\n         OI    GRDSRC+1,C'0'\n         MVI   GRDSAC,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   GD11                NO\n         STC   R0,GRDSAC\n         OI    GRDSAC,C'0'\nGD11     MVC   GRDSNM(L'GRDSNM),GRDSNM-1\n         XR    R1,R1\n         IC    R1,GRNMEL           GET LENGTH OF GROUP\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,GDMD             EXECUTE MOVE\n        @LIST  GRDS\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD99                NO\n        @COPY  GRDS\n         B     GD99\nGDMV     MVC   ZERODSN(*-*),GRNAME << EXECUTED >>\nGDTG     CLC   ZERODSN(*-*),TGRID  << EXECUTED >>\nGDMD     MVC   GRDSNM(*-*),GRNAME  << EXECUTED >>\nGD12     CLI   LGSPD,C' '          ANY DS-ENTRY FOR GROUP?\n         BE    GD99                YES\n         MVC   LGDS(14),=CL14'(NO DATA-SETS)'\nGD13    @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD99                NO\n        @COPY  LINE\n         B     GD99                GET NEXT GROUP\nGD20     MVI   GDTSW,0             RESET\n         OC    WORKTL,WORKTL       DATA RETURNED?\n         BZ    GD21                NO\n         CLC   WORKVRA(2),=XL2'0008'    AUTHOR RECEIVED?\n         BNE   GD21                NO\n         CLC   WORKVRA+10(2),=XL2'0001' FLAG1 RECEIVED?\n         BNE   GD21                NO\n         CLC   WORKVRA+13(2),=XL2'0008' GROUP NAME RECEIVED?\n         BNE   GD21                NO\n         XR    R15,R15\n         LA    R3,WORKVRA+23\n         IC    R15,2(R3)           INST. DATA LENGTH\n         LA    R3,3(R15,R3)        SKIP INST. DATA\n         ICM   R15,B'0011',0(R3)   GET NUMBER OF VOLUMES\n         BNZ   *+L'*+4\n         OI    GDTSW,GDTSGF        NO VOLUMES = GENERIC\n         LA    R4,2(R15,R3)        SKIP VOLUME(S)\n         ICM   R15,B'0011',0(R4)\n         LA    R4,2(R15,R4)        SKIP TYPE(S)\n         CLC   0(2,R4),=XL2'0001'  UNIVACS RECEIVED?\n         BNE   GD21                NO\n         CLC   3(2,R4),=XL2'0002'  USERS/GROUPS NO. RECEIVED?\n         BE    GD22                YES\nGD21     MVC   GRERDSN(L'GRERDSN),GRERDSN-1\n         XR    R1,R1\n         IC    R1,GRNMEL           GET LENGTH OF GROUP\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,GDMO             EXECUTE MOVE\n        @LIST  GRERDS\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD99                NO\n        @COPY  GRERDS\n         B     GD99                GET NEXT GROUP\nGDMO     MVC   GRERDSN(*-*),GRNAME << EXECUTED >>\nGDMVD    MVC   LGDS+13(*-*),0(R6)  << EXECUTED >>\nGD22     XR    R1,R1\n         IC    R1,ZERODS           GET LENGTH OF DSNAME\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,GDMN             MOVE DATA-SET NAME\n        @FILL  LGDS\n         MVI   LGSPV,C'('\n         MVC   LGDSOW(L'LGDSOW),WORKVRA+2    MOVE OWNER OF DATA-SET\n         MVI   LGSPW,C')'\n         MVC   LGACT(16),=CL16'- UNIV. ACCESS :'\n         CLI   2(R4),ACEEALTR      ALTER ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGACT+17(8),=CL8'ALTER'\n         B     GD23\n         CLI   2(R4),ACEECNTL      CONTROL ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGACT+17(8),=CL8'CONTROL'\n         B     GD23\n         CLI   2(R4),ACEEUPDT      UPDATE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGACT+17(8),=CL8'UPDATE'\n         B     GD23\n         CLI   2(R4),ACEEREAD      READ ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGACT+17(8),=CL8'READ'\n         B     GD23\n         CLI   2(R4),ACEENONE      NONE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGACT+17(8),=CL8'NONE'\n         B     GD23\n         LA    R1,LGACT+17         ANYTHING MIXED OR UNKNOWN\n         LA    R15,2(R4)\n         BAS   R14,DMPRTS\nGD23     TM    WORKRBA+6,X'80'\n         BO    *+L'*+10\n         MVC   LGACT+26(5),=CL5'- (D)'\n         B     *+L'*+6\n         MVC   LGACT+26(5),=CL5'- (G)'\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD24                NO\n        @COPY  LINE\nGD24     XR    R4,R4\n         IC    R4,WORKVRA+25       GET INST. DATA LENGTH\n         LTR   R4,R4\n         BZ    GD27\n         MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LGDS(12),=CL12'INST. DATA :'\n         LA    R5,60\n         LA    R6,WORKVRA+26       POINT TO INST. DATA OR NEXT\nGD25     CLR   R4,R5\n         BNL   *+L'*+2\n         LR    R5,R4\n         BCTR  R5,0\n         EX    R5,GDMVD\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD26                NO\n        @COPY  LINE\nGD26     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R5,1(R5)\n         AR    R6,R5\n         SR    R4,R5\n         BNZ   GD25\nGD27     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LGDS+25(18),=CL18'- CREATION GROUP :'\n         MVC   LGDS+44(8),WORKVRA+15    MOVE GROUP NAME OF CREATION\n         CLI   WORKVRA+12,X'80'    GROUP ACCESSIBLE?\n         BNE   *+L'*+6\n         MVC   LGDS+53(24),=CL24'++ GROUP DATA-SET ACCESS'\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD28                NO\n        @COPY  LINE\nGD28     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LGDS+25(8),=CL8'- VOL. :'\n         XR    R4,R4\n         ICM   R4,B'0011',0(R3)\n         LA    R3,2(R3)\n         BZ    GD32+L'GD32         NO VOLUMES\n         USING DSPVOLSR,R3\nGD29     LA    R5,LGDS+34\n         LA    R15,5               NO. OF VOL. SER. BY LINE\nGD30     MVC   0(6,R5),DSPVOLSR    SET THIS VOL. SER.\n         LA    R5,7(R5)\n         LA    R3,6(R3)            NEXT VOL. SER.\n         SH    R4,=H'6'            ANY OTHER VOLUME?\n         BNP   GD32                NO\n         BCT   R15,GD30            YES\n         DROP  R3\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD31                NO\n        @COPY  LINE\nGD31     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         B     GD29\nGD32     XR    R4,R4\n         ICM   R4,B'0011',0(R3)\n         LA    R3,2(R3)\n         TM    GDTSW,GDTSGF\n         BO    GD34                BRANCH IF GENERIC\n         USING DSPTYPE,R3\n         TM    DSPTYPE,DSPTP       VSAM DATA-SET?\n         BZ    GD33                NO\n         MVC   0(6,R5),=CL6'(VSAM)'\n         DROP  R3\nGD33    @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD34                NO\n        @COPY  LINE\nGD34     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         AR    R3,R4               NOW SKIP UNIVACS ALREADY DONE\n         ICM   R4,B'0011',0(R3)\n         LA    R3,2(R3,R4)         START OF VARIABLE FIELDS\n         ICM   R4,B'0011',2(R3)    GET NO. OF USERS IN ACCESS LIST\n         BNZ   GD35\n         LA    R3,8(R3)            NONE, SKIP ACLCNT-USERID-USERACS\n         B     GD53+L'GD53\nGD35     XR    R5,R5\n         ICM   R5,B'0011',4(R3)    GET LENGTH OF NAMES LIST\n         LA    R3,6(R3)            POINT TO NAMES LIST\n         LA    R5,2(R5,R3)         POINT TO ACCESS CODES\n         LTR   R4,R4               AT LEAST ONE?\n         BNP   GD53                NO\n         MVC   LGDS+25(32),=CL32'- USER''S ACCESS LIST - - - - - -'\nGD40     MVC   LGACC(L'LGACC),0(R3)     MOVE NAME\n         MVI   LGSPB,C':'\n         CLI   0(R5),ACEEALTR      ALTER ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGAU,=CL8'ALTER'\n         B     GD51\n         CLI   0(R5),ACEECNTL      CONTROL ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGAU,=CL8'CONTROL'\n         B     GD51\n         CLI   0(R5),ACEEUPDT      UPDATE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGAU,=CL8'UPDATE'\n         B     GD51\n         CLI   0(R5),ACEEREAD      READ ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGAU,=CL8'READ'\n         B     GD51\n         CLI   0(R5),ACEENONE      NONE ACCESS?\n         BNE   *+L'*+10            NO\n         MVC   LGAU,=CL8'NONE'\n         B     GD51\n         LA    R1,LGAU             ANYTHING MIXED OR UNKNOWN\n         LR    R15,R5\n         BAS   R14,DMPRTS\nGD51    @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD52                NO\n        @COPY  LINE\nGD52     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R3,8(R3)            ADVANCE IN NAME LIST\n         LA    R5,1(R5)            ADVANCE IN ACCESS CODES\n         BCT   R4,GD40             LOOP IF ANY MORE\nGD53     LR    R3,R5               POINT TO AUDIT FIELD\n         CLC   0(2,R3),=XL2'0001'  AUDIT FLAGS RECEIVED?\n         BNE   GD10                NO\n         LA    R3,2(R3)            POINT TO AUDIT FLAGS\n         CLI   0(R3),0             ANYTHING?\n         BE    GD55                NO\n         CLI   0(R3),X'10'         ONLY NONE?\n         BE    GD55                YES\n         MVC   LGDS+25(9),=CL9'- AUDIT :'\n         LA    R5,LGDS+35\n         BAS   R14,AUDITF\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD54                NO\n        @COPY  LINE\nGD54     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\nGD55     LA    R3,1(R3)            POINT TO GLOBAL AUDIT FIELD\n         CLC   0(2,R3),=XL2'0001'  GLOBAL AUDIT FLAGS RECEIVED?\n         BNE   GD10                NO\n         LA    R3,2(R3)            POINT TO GLOBAL AUDIT FLAGS\n         CLI   0(R3),0             ANYTHING?\n         BE    GD10                NO\n         CLI   0(R3),X'10'         ONLY NONE?\n         BE    GD10                YES\n         MVC   LGDS+25(16),=CL16'- GLOBAL AUDIT :'\n         LA    R5,LGDS+42\n         BAS   R14,AUDITF\n        @LIST  LINE\n         TM    STATUS,STCOPY       COPY REQUESTED?\n         BZ    GD56                NO\n        @COPY  LINE\nGD56     MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         B     GD10\nGDMN     MVC   LGDS(*-*),ZERODSN   << EXECUTED >>\n         DROP  R2,R7\nGD99    @XE\n         EJECT\nGDLST   ICHEINTY NEXTC,TYPE='DS',                                      C\n               ACTIONS=(GDAU,GDF1,GDGR,GDIN,GDAV,GDAT,GDUA,GDSC,GDSL,  C\n               GDSR,GDAD,GDGA),MF=L\n         SPACE 1\nGDAU    ICHEACTN FIELD=AUTHOR\nGDF1    ICHEACTN FIELD=FLAG1\nGDGR    ICHEACTN FIELD=GROUPNM\nGDIN    ICHEACTN FIELD=INSTDATA\nGDAV    ICHEACTN FIELD=VOLSER\nGDAT    ICHEACTN FIELD=DSTYPE\nGDUA    ICHEACTN FIELD=UNIVACS\nGDSC    ICHEACTN FIELD=ACLCNT\nGDSL    ICHEACTN FIELD=USERID\nGDSR    ICHEACTN FIELD=USERACS\nGDAD    ICHEACTN FIELD=AUDIT\nGDGA    ICHEACTN FIELD=GAUDIT\n         EJECT\nSDSPDL   DC    A(*-*)\nSDSPDG   DC    A(*-*)\nSDSPDS   DC    A(*-*)\n         DC    A(8)\nSDSPDW   DC    A(*-*)\nSDSPDN   DC    XL1'80',AL3(*-*)\n         SPACE 1\nTGRIDL   DC    XL1'0'\nTGRID    DC    XL9'0'\nGDTSW    DC    XL1'0'              SWITCHES\nGDTSGF   EQU   X'01'                    GENERIC PROFILE\n         SPACE 1\n         DC    AL1(GRDSL)\nGRDS     DC    CL3' ',CL3'-- '\nGRDSNM   DC    CL8' ',C' : RACF READ TYPE=DS (RC='\nGRDSRC   DC    CL2' ',C'/AC='\nGRDSAC   DC    CL1' ',C').'\nGRDSL    EQU   *-GRDS\n         DC    AL1(GRERDSL)\nGRERDS   DC    CL3' ',CL3'-- '\nGRERDSN  DC    CL8' ',C' : RACF READ TYPE=DS '\n         DC    C'(INVALID WORK AREA RECEIVED BACK).'\nGRERDSL  EQU   *-GRERDS\n         SPACE 2\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        ICHRRPF\n         EJECT\n        PRINT  GEN\n        #BYPRDS\n         SPACE 2\n        #WKDS\n         SPACE 2\n        #LGLNE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB009": {"ttr": 11011, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x01\\xb6\\x01\\xb6\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 438, "newlines": 438, "modlines": 0, "user": "SYSPAJA"}, "text": "B009     TITLE 'CLEAN-UP - READ AN O.S. CATALOG CONTENTS (B009).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB009    @XS\n*        AT ENTRY :   R3 = CAT. VOL. ELEMENT POINTER\n*                     R4 = DDNAME ELEMENT POINTER\n         SPACE 1\n         USING CVLT,R3\n         USING DDNT,R4\nCTRSW0   NOP   CTR0\n         OI    CTRSW0+1,ON\n         L     R6,DACTLG           ALLOCATED CATALOG\n         USING DYNLIST,R6\n        $CATSO DDNAME,MF=(L,CTRSOL)\n         DROP  R6\n        $CATSR CTYPE,,WORKD,MF=(L,CTRSRL)\n        $DVTYUN WORKD,,MF=(L,CTRDV)\nCTR0     L     R5,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         L     R6,TBNIX            START OF NULL INDEXES TABLE\n         MVI   0(R6),FMOFF         INDICATE NONE\n        $CATSO MF=(E,CTRSOL)       OPEN 'SYSCTLG'\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR34\n         OI    CVLIND,CVLCSO       SET OPENED\n         NI    CTRSW3+1,OFF\n         LA    R7,LINE\n         USING CLDSCT,R7\n         MVC   CTRINFA,DDNVOL\n         MVC   CTRINFB,DDNUTY\n        @OUT   CTRINF,=PL2'+50'\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    CTR1                NO\n         MVC   CTRINITA,CTRINFA\n         MVC   CTRINITB,CTRINFB\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BO    CTR1                YES\n        @LIST  CTRINIT,,U\nCTR1     MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n        $CATSR MF=(E,CTRSRL)       READ 'SYSCLTG'\n         LTR   R15,R15             TEST RETURN CODE\n         BM    CTR90               END OF CATALOG\n         BNZ   ERR35\n         CLI   CTYPE,255           CONTINUATION?\n         BE    CTR2                YES\n         STC   R1,GDGCC\n         MVC   PTYPE,CTYPE\n         CLI   CTYPE,1             CVOL POINTER?\n         BE    CTRCV               YES\n         CLI   CTYPE,2             DATA-SET NAME?\n         BE    CTRDS               YES\n         XC    ZERODSN,ZERODSN     CLEAR\n         CLI   CTYPE,3             ALIAS NAME?\n         BE    CTRAN               YES\n         CLI   CTYPE,128           NULL INDEX?\n         BE    CTRGN               YES\n         B     ERR19\nCTR2     OC    ZERODSN,ZERODSN     TEST EMPTY PREVIOUS?\n         BZ    ERR19               YES, WHAT'S IN ...\n         MVC   WORKDS,ZERODSN      RESTORE PREVIOUS\n         CLI   PTYPE,1\n         BE    CTRCV1\n         CLI   PTYPE,2\n         BNE   ERR19\n         LH    R1,CTRMVL           MULTI-VOLUME COUNT\n         LA    R1,1(R1)\n         STH   R1,CTRMVL\n         B     CTRDS1\n         SPACE 1\nCTRCV    MVC   CLTY(8),=CL8'CVOL-PTR'\n         MVC   CLNM(8),WORKDS\n        @FILL  CLNM,WORKDS\n         MVC   ZERODSN,WORKDS      SAVE IN CASE OF CONTINUATION\n         L     R1,TBGVOL           CVOL POINTERS TABLE\n         CLI   0(R1),FMOFF         END OF TABLE?\n         BE    *+L'*+8             YES\n         LA    R1,CVPL(R1)         NO, NEXT ELEMENT\n         B     *-12\n         LA    R15,CVPL(R1)        FINAL ELEMENT\n         CL    R15,TBGVOLE         ANY OVERFLOW?\n         BL    *+L'*+6             NO\n         XR    R15,R15             YES\n         B     ERR64\n         USING CVPDS,R1\n         MVC   CVPNAME(L'CVPNAME),WORKDS\n         MVC   CVPVOL,CTRVSN\n         OI    CVPFL,CVPOS\n         DROP  R1\n         MVI   0(R15),FMOFF        SET FINAL MARKER\nCTRCV1   MVC   CLVL,CTRVSN\n         UNPK  CLDT(L'CLDT+1),WORKD(L'CLDT/2+1)\n         MVI   CLDT+L'CLDT,C' '\n         TR    CLDT(L'CLDT),TRTAB-X'F0'\n         CLC   WORKD(4),=XL4'0'\n         BE    CTRCV2\n        $DVTYUN ,CLUN,MF=(E,CTRDV) GET UNIT NAME\n         LTR   R15,R15\n         BZ    CTRCV2\n         MVC   CLUN(4),=CL4'?RC='\n         CVD   R15,WORKD\n         UNPK  CLUN+4(2),WORKD+6(2)\n         OI    CLUN+5,C'0'\n         MVI   CLUN+6,C'?'\nCTRCV2   BAS   R14,CTRFLS          PRINT\n         B     CTR1\n         SPACE 1\nCTRDS    MVC   CLTY(8),=CL8'DATA-SET'\n         MVC   CLNM,WORKDS\n        @FILL  CLNM,WORKDS\n         MVC   ZERODSN,WORKDS      SAVE IN CASE OF CONTINUATION\n         XC    CTRMVL,CTRMVL       RESET MULTI-VOLUME COUNT\nCTRDS1   MVC   CLVL,CTRVSN\n         UNPK  CLDT(L'CLDT+1),WORKD(L'CLDT/2+1)\n         MVI   CLDT+L'CLDT,C' '\n         TR    CLDT(L'CLDT),TRTAB-X'F0'\n         CLC   WORKD(4),=XL4'0'\n         BE    CTRDS2\n        $DVTYUN ,CLUN,MF=(E,CTRDV) GET UNIT NAME\n         LTR   R15,R15\n         BZ    CTRDS2\n         MVC   CLUN(4),=CL4'?RC='\n         CVD   R15,WORKD\n         UNPK  CLUN+4(2),WORKD+6(2)\n         OI    CLUN+5,C'0'\n         MVI   CLUN+6,C'?'\nCTRDS2   BAS   R14,CTRFLS          PRINT\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nCTRDS5   CLI   0(R2),FMOFF         END OF TABLE?\n         BE    CTRDS7              YES, NOT IN-LINE DATA-SET\n         CLC   DSNME,WORKDS        IS IT THIS ONE?\n         BNE   CTRDS6              NO\n         CLC   DSVOLSN(L'DSVOLSN),CTRVSN     ON SAME VOLUME?\n         BNE   CTRDS6              NO\n         BAS   R14,CTRDS10         SET IN TABLE\n         B     CTR1\nCTRDS6   LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     CTRDS5\nCTRDS7   BCT   R5,*+L'*+6          CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\n         XC    0(DSTABL,R2),0(R2)  CLEAR\n         MVC   DSNME,WORKDS        ENTER IN TABLE\n         MVC   DSALTVO(L'DSALTVO),CTRVSN\n         BAS   R14,CTRDS10         SET IN TABLE\n         LA    R2,DSTABL(R2)\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         B     CTR1                GET NEXT ONE\nCTRDS10  MVI   DSCAT,XCSR          INDICATE READ FROM O.S. CATALOG\n         MVC   DSMVCNT,CTRMVL      SET MULTI-VOLUME COUNT\n         CLC   DSMVCNT,=H'1'\n         BH    CTRDS12\n         BE    CTRDS11\n         ST    R2,CTRPRDSE         THIS CAN BE START SEQ. 0\n         B     CTRDS13\nCTRDS11  L     R15,CTRPRDSE        GET ADDRESS OF START SEQ. 0\n         DROP  R2\n         USING DSTABDS,R15\n         MVI   DSVORG,XOM          SET MULTI-VOLUMES\n         DROP  R15\n         USING DSTABDS,R2\nCTRDS12  MVI   DSVORG,XOM          SET MULTI-VOLUMES\nCTRDS13  MVC   DSCVOL,DDNVOL       RETAIN CAT. INFO VOLUME\n         CLI   GDGCC,0             WAS IT A GDG NAME?\n         BER   R14                 NO\n         MVI   DSUSE,XUG           YES\n         BR    R14\n         DROP  R2\n         SPACE 1\nCTRAN    MVC   CLTY(8),=CL8'ALIAS N.'\n         MVC   CLNM(8),WORKDS\n         MVC   CLNM+9(13),=CL13'- TRUE NAME ='\n         MVC   CLNM+23(8),WORKDS+8\n         BAS   R14,CTRLS           PRINT\n         B     CTR1\n         SPACE 1\nCTRGN    LA    R14,WORKDS+L'WORKDS-1    ADJUST NAME\n         LA    R15,L'WORKDS\nCTRGN1   CLI   0(R14),C' '\n         BNE   CTRGN2\n         BCTR  R14,0\n         BCT   R15,CTRGN1\n         B     CTR1\nCTRGN2   CLI   0(R14),C'.'\n         BNE   *+L'*+4\n         MVI   0(R14),C' '\n         CLI   GDGCC,0             IS IT A GDG INDEX?\n         BNE   CTRGN3              YES\nCTRSW1   B     CTRGN20\n         CLC   GDGIX,WORKDS        LOWER LEVEL OF NULL GDG INDEX?\n         BE    CTRGN10             YES\n         OI    CTRSW1+1,ON         NO\n         B     CTRGN20\nCTRGN3   NI    CTRSW1+1,OFF\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nCTRGN4   CLI   0(R2),FMOFF         END OF TABLE?\n         BE    CTRGN6              YES\n         CLI   DSUSE,XUM           NO, MODEL GDG?\n         BNE   CTRGN5              NO\n         CLC   DSNME,WORKDS        YES, SAME DSNAME?\n         BNE   CTRGN5              NO\n         CLC   DSVOLSN,DDNVOL      YES, SAME VOLUME?\n         BNE   CTRGN5              NO\n         MVI   DSCAT,XCSR          INDICATE READ FROM O.S. CATALOG\n         B     CTRGN10\nCTRGN5   LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     CTRGN4\nCTRGN6   BCT   R5,*+L'*+6          CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\n         XC    0(DSTABL,R2),0(R2)  CLEAR\n         MVC   DSNME,WORKDS        ENTER IN TABLE\n         MVC   DSALTVO(L'DSALTVO),DDNVOL\n         MVI   DSUSE,XUI           INDICATE NULL GDG INDEX\n         MVI   DSCAT,XCSR          INDICATE READ FROM O.S. CATALOG\n         LA    R2,DSTABL(R2)\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         NI    CTRSW2+1,OFF\nCTRGN10  MVC   GDGIX,WORKDS\n         LA    R14,GDGIX+L'GDGIX-1 REDUCE TO LOWER LEVEL FOR CONTROL\n         LA    R15,L'GDGIX\nCTRGN11  CLI   0(R14),C' '\n         BE    CTRGN12\n         CLI   0(R14),C'.'\n         MVI   0(R14),C' '\n         BE    CTRSW2\nCTRGN12  BCTR  R14,0\n         BCT   R15,CTRGN11\nCTRSW2   B     CTR1\n         OI    CTRSW2+1,ON\n         MVC   CLTY(8),=CL8'NULL GDG'\n         MVC   CLNM,WORKDS\n         BAS   R14,CTRLS           PRINT\n         B     CTR1\nCTRGN20  LA    R0,WORKDS\n         LR    R1,R0\nCTRGN21  CLI   0(R1),C'.'          DON'T LIST AND DELETE A 1ST LEVEL\n         BE    CTRGN22                  INDEX WHEN IT IS PART OF A\n         CLI   0(R1),C' '               MULTIPLE LEVELS INDEX.\n         BE    CTRGN22\n         LA    R1,1(R1)\n         B     CTRGN21\nCTRGNCL  CLC   CTRDELA(*-*),WORKDS << EXECUTED >>\nCTRGN22  CLI   1(R1),C' '\n         BNE   CTRGN23\n         SR    R1,R0\n         BNP   CTR1\n         EX    R1,CTRGNCL\n         BE    CTR1\nCTRGN23  MVC   CLTY-5(13),=CL13'-- NULL INDEX'\n         MVC   CLNM,WORKDS\n         MVC   CTRDELA,WORKDS\nCTRSW3   NOP   CTRGN24\n         LA    R14,NIXL(R6)        CONTROL NULL INDEXES TABLE\n         CL    R14,TBNIXE          ANY OVERFLOW?\n         BL    CTRGN25             NO\n         OI    CTRSW3+1,ON\n        @OUT   CTRNIXM\nCTRGN24  BAS   R14,CTRLS           PRINT\n         B     CTR1\nCTRGN25  MVC   0(L'DSNME,R6),WORKDS     STORE THIS NULL INDEX\n         MVC   0+L'DSNME(L'DDNVOL,R6),DDNVOL\n         LR    R6,R14\n         MVI   0(R6),FMOFF         SET FINAL MARKER\n         BAS   R14,CTRLS           PRINT\n         B     CTR1\n         DROP  R7\n         SPACE 1\nCTRFLS   TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BOR   R14                 NO\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BOR   R14                 YES\n         ST    R14,CTRSVLS\n         B     CTRLS1\nCTRLS    TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BOR   R14                 NO\n         ST    R14,CTRSVLS\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BZ    CTRLS1              NO\nCTRSW4   NOP   CTRLS1\n         OI    CTRSW4+1,ON\n         MVI   CTRINIT,C'0'\n        @LIST  CTRINIT,=PL2'+48',U\n        @LIST  SPACE\nCTRLS1  @LIST  LINE\n         L     R14,CTRSVLS\n         BR    R14\n         SPACE 1\nCTR90    NI    CVLIND,255-CVLCSO   SET CLOSED\n        $CATSC MF=(E,CTRSCL)       CLOSE 'SYSCTLG'\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR36\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    CTR92               NO\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BZ    CTR91               NO\n         TM    CTRSW4+1,ON\n         BZ    CTR92\n         NI    CTRSW4+1,OFF\nCTR91   @LIST  CTRENDM\nCTR92    XC    ZERODSN,ZERODSN     CLEAR\n         UNPK  CTRINF1A(L'CTRINF1A+1),VLSTBLK+1(4)     CAT. INF.\n         MVI   CTRINF1A+L'CTRINF1A,C' '\n         TR    CTRINF1A,TRTAB-X'F0'\n        @OUT   CTRINF1\n         UNPK  CTRINF2A(L'CTRINF2A+1),VCLSTBLK+1(4)\n         MVI   CTRINF2A+L'CTRINF2A,C' '\n         TR    CTRINF2A,TRTAB-X'F0'\n        @OUT   CTRINF2\n         UNPK  CTRINF3A(L'CTRINF3A+1),VFHOLE+1(4)\n         MVI   CTRINF3A+L'CTRINF3A,C' '\n         TR    CTRINF3A,TRTAB-X'F0'\n         UNPK  CTRINF3B(L'CTRINF3B+1),HIGHTTR+1(4)\n         MVI   CTRINF3B+L'CTRINF3B,C' '\n         TR    CTRINF3B,TRTAB-X'F0'\n        @OUT   CTRINF3\n         DROP  R3,R4\n         ST    R5,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         SPACE 1\n*        PURGE NULL INDEXES IF ANY.\n         SPACE 1\n         L     R6,TBNIX            START OF NULL INDEXES TABLE\n         CLI   0(R6),FMOFF         NO NULL INDEXES?\n         BE    CTX90               YES\n         TM    RUNIND,RUTEST       TEST MODE?\n         BZ    *+L'*+6             NO\n         MVC   CTRINXTT,=CL16'SIMULATED (TEST)'\n        @OUT   CTRINXT,=PL2'+40'\nCTX1     MVC   CTRDELA(L'DSNME),0(R6)   GET THIS ONE\n         MVC   CTRDELB(L'DDNVOL),0+L'DSNME(R6)\n         MVC   CTRDELC,=CL4'O.K.'\n         MVI   CTRDELLG,CTRDELLS\n         XR    R15,R15             SET IN CASE OF TEST RUN\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    CTX2                YES\n        INDEX  DLINDX              NO, DELETE ...\nCTX2     LTR   R15,R15\n         BZ    CTX3\n         MVC   CTRDELC,=CL4'(RC='\n         MVI   CTRDELLG,CTRDELLL\n         MVC   CTRDELD,=CL2' '\n         MVC   CTRDELE,=CL2' '\n         MVC   CTRDELF,=CL2' '\n         CVD   R15,WORKD           DELETE RETURN CODE\n         UNPK  CTRDELD,WORKD+6(2)\n         OI    CTRDELD+1,C'0'\n         CH    R15,=H'8'\n         BNE   CTX3\n         LA    R1,0(R1)            CLEAR HI-BYTE\n         CVD   R1,WORKD            DELETE/LOCATE RETURN CODE\n         UNPK  CTRDELE,WORKD+6(2)\n         OI    CTRDELE+1,C'0'\n         CVD   R0,WORKD            DELETE/LOCATE NO. INDEXES\n         UNPK  CTRDELF,WORKD+6(2)\n         OI    CTRDELF+1,C'0'\nCTX3    @FILL  CTRDELA\n        @OUT   CTRDEL\n         LA    R6,NIXL(R6)\n         CLI   0(R6),FMOFF         END OF NULL INDEXES?\n         BNE   CTX1                NO\nCTX90   @XE\n         EJECT\nCTRSOL  $CATSO ,MF=L\nCTRSRL  $CATSR ,CTRVSN,,MF=L\nCTRSCL  $CATSC VLSTBLK,MF=L\nCTRDV   $DVTYUN ,,MF=L\nDLINDX  CAMLST DLTX,CTRDELA,CTRDELB\n         SPACE 1\nVLSTBLK  DC    F'0'\nVCLSTBLK DC    F'0'\nVFHOLE   DC    F'0'\nHIGHTTR  DC    F'0'\nCTRPRDSE DC    A(*-*)\nCTRSVLS  DC    F'0'\nCTRVSN   DC    CL6' '\nCTRMVL   DC    H'0'\n         SPACE 1\nPTYPE    DC    XL1'0'\nGDGCC    DC    XL1'0'\nGDGIX    DC    CL44' '\n         DC    AL1(CTRINFL)\nCTRINF   DC    CL6'0 ',CL7'O.S. / '\nCTRINFA  DC    CL6' ',C' ('\nCTRINFB  DC    CL8' ',C') : SYSCTLG'\nCTRINFL  EQU   *-CTRINF\n         DC    AL1(CTRINF1L)\nCTRINF1  DC    CL11' ',C'TTR LAST OF VOL. INDEX = '\nCTRINF1A DC    CL6' ',C' '\nCTRINF1L EQU   *-CTRINF1\n         DC    AL1(CTRINF2L)\nCTRINF2  DC    CL11' ',C'TTR LAST OF SYSCTLG = '\nCTRINF2A DC    CL6' ',C' '\nCTRINF2L EQU   *-CTRINF2\n         DC    AL1(CTRINF3L)\nCTRINF3  DC    CL11' ',C'TTR FIRST UNUSED OF SYSCTLG = '\nCTRINF3A DC    CL6' ',C' - UPPER TTR USED = '\nCTRINF3B DC    CL6' ',C' '\nCTRINF3L EQU   *-CTRINF3\n         DC    AL1(CTRINITL)\nCTRINIT  DC    CL8'1O.S. / '\nCTRINITA DC    CL6' ',C' ('\nCTRINITB DC    CL8' ',C') CATALOG : SYSCTLG'\nCTRINITL EQU   *-CTRINIT\n         DC    AL1(L'CTRINXT+L'CTRINXTT)\nCTRINXT  DC    C'0          INDEXES PROCESSING : '\nCTRINXTT DC    CL16' '\nCTRDELLG DC    AL1(*-*)\nCTRDEL   DC    CL16' '\nCTRDELA  DC    CL44' ',C' - VOLUME : '\nCTRDELB  DC    CL6' ',C' - DELETE '\nCTRDELC  DC    CL4' '\nCTRDELLS EQU   *-CTRDEL\nCTRDELD  DC    CL2' ',C'/LC='\nCTRDELE  DC    CL2' ',C'/IX='\nCTRDELF  DC    CL2' ',C').'\nCTRDELLL EQU   *-CTRDEL\n         DC    AL1(L'CTRNIXM)\nCTRNIXM  DC    C'           ===== NULL INDEXES TABLE OVERFLOW ====='\n         DC    AL1(L'CTRENDM)\nCTRENDM  DC    C'0    END OF CATALOG LIST.'\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n         SPACE 1\nCLDSCT   DSECT                     LINE DESCRIPTION\nCLCC     DS    CL1,CL9             ASA CC\nCLTY     DS    CL8,CL2             TYPE\nCLNM     DS    CL44,CL2            NAME\nCLVL     DS    CL6,CL2             VOLUME SERIAL NUMBER\nCLUN     DS    CL8,CL2             UNIT NAME\nCLDT     DS    CL8                 DEVICE TYPE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB010": {"ttr": 11019, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x02\\xbd\\x02\\xbd\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 701, "newlines": 701, "modlines": 0, "user": "SYSPAJA"}, "text": "B010     TITLE 'CLEAN-UP - READ AN ICF CATALOG CONTENTS (B010).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB010    @XS\n*        AT ENTRY :   R3 = CAT. VOL. ELEMENT POINTER\n*                     R4 = DDNAME ELEMENT POINTER\n         SPACE 1\n         USING CVLT,R3\n         USING DDNT,R4\nIXSW0    NOP   IX1\n         OI    IXSW0+1,ON\n         L     R6,DACTLG           ALLOCATED CATALOG\n         USING DYNLIST,R6\n        $ICFSO DDNAME,,,,MF=(L,ICFSOL)\n         DROP  R6\n        $ICFSR CTYPE,,WORKD,MF=(L,ICFSRL)\n        $DVTYUN WORKD,,MF=(L,ICFDV)\nIX1      XC    IXMSPW,IXMSPW\n        $ICFSO MF=(E,ICFSOL)       OPEN ICF CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    IX3\n         CH    R15,=H'2'\n         BE    IX2\n         CH    R15,=H'9'\n         BNE   ERR55\n         LTR   R0,R0\n         BNZ   IX2\n         LTR   R1,R1\n         BZ    ERR55\nIX2      BAS   R14,IXRR\n         B     ERR55\nIX3      OI    CVLIND,CVLCSO       SET OPENED\n         CLC   CVLVOL(L'CVLVOL+L'CVLNME),IXCVOL   CATALOG REQUESTED?\n         BE    IX4                 YES\n         MVC   IXRCM1,CVLVOL\n         MVC   IXRCM2,CVLNME\n        WTO    MF=(E,IXRCM)\n         MVC   IXRAM1,IXCVOL\n         MVC   IXRAM2,IXCNME\n        WTO    MF=(E,IXRCM)\n         XR    R15,R15\n         B     ERR67\nIX4      L     R5,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         BAS   R6,*+L'*+L'IXUN+8\nIXUN     XR    R15,R15\n         IC    R15,CTYPE           SET R15 = UNEXPECTED INDICATOR\n         B     ERR68\n         LA    R7,LINE\n         USING LXDSCT,R7\n         OI    IXSW1+1,ON\n         MVI   IXLSCTR,0\n         MVC   IXCINFA,DDNVOL\n         MVC   IXCINFB,DDNUTY\n         MVC   IXCINFC,CVLNME\n        @OUT   IXCINF,=PL2'+50'\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    IX10                NO\n         MVC   IXCINITA,IXCINFA\n         MVC   IXCINITB,IXCINFB\n         MVC   IXCINITC,IXCINFC\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BO    IX10                YES\n        @LIST  IXCINIT,,U\nIX10     MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\nIX11    $ICFSR MF=(E,ICFSRL)       READ ICF CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BM    IX90                END OF CATALOG\n         BZ    IX12\n         CH    R15,=H'1'\n         BNE   ERR56\n         BAS   R14,IXRR\n         B     ERR56\nIX12     CLI   CTYPE,255           CONTINUATION?\n         BER   R6                  YES\n         XC    IXCNME,IXCNME\n         XC    IXCPRDSE,IXCPRDSE\nIXSW1    B     *+L'*+8\n         OI    IXSW1+1,ON\n         BAS   R14,IXLS            PRINT\n         LA    R1,IXTBTY           SCAN TYPES TABLE\nIX13     CLI   0(R1),0             END OF TABLE?\n         BE    IXUN                YES, UNEXPECTED TYPE\n         CLC   0(1,R1),CTYPE       THIS TYPE?\n         BE    *+L'*+8             YES\n         LA    R1,L'IXTBTY(R1)     NO,NEXT ENTRY\n         B     IX13\n         MVC   IXLSCTR(1),5(R1)    GET LIST INDICATOR\n         ICM   R15,B'1111',1(R1)   GET ADDRESS TO PROCESS THIS TYPE\n         BR    R15\n         SPACE 1\nIXNVS    XC    ZERODSN,ZERODSN\n         MVC   LXTY,=CL8'NON-VSAM'\n         MVC   IXCNME,WORKDS       RETAIN DS-NAME\n         XC    IXMVCNT,IXMVCNT     RESET MULTI-VOLUME COUNTER\n         BAS   R6,IXNVS0\n         LH    R0,IXMVCNT\n         AH    R0,=H'1'\n         STH   R0,IXMVCNT\nIXNVS0   BAS   R14,IXUR            GET UNIT NAME\n         BAS   R14,IXLS            PRINT\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nIXNVS1   CLI   0(R2),FMOFF         END OF TABLE?\n         BE    IXNVS3              YES, NOT IN-LINE DATA-SET\n         CLC   DSNME,IXCNME        IS IT THIS ONE?\n         BNE   IXNVS2              NO\n         CLI   DSTYPE,0            IS IT SAME TYPE?\n         BNE   IXNVS2              NO\n         CLC   DSVOLSN(L'DSVOLSN),IXCVSN     ON SAME VOLUME?\n         BNE   IXNVS2              NO\n         BAS   R14,IXNVS10         SET IN TABLE\n         B     IX10\nIXNVS2   LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     IXNVS1\nIXNVS3   BCT   R5,*+L'*+6          CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\n         XC    0(DSTABL,R2),0(R2)  CLEAR\n         MVC   DSNME,IXCNME        ENTER IN TABLE\n         MVC   DSALTVO(L'DSALTVO),IXCVSN\n         BAS   R14,IXNVS10         SET IN TABLE\n         LA    R2,DSTABL(R2)\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         B     IX10                GET NEXT ONE\nIXNVS10  MVI   DSCAT,XCSI          INDICATE READ FROM ICF CATALOG\n         XR    R0,R0\n         ICM   R0,B'0011',IXCFSN\n         BNZ   *+L'*+12\n         ICM   R0,B'0011',IXMVCNT\n         MVI   IXMVFS,XOM          SAY MULTI-VOL.\n         B     *+L'*+4\n         MVI   IXMVFS,XOF          SAY FILE SEQ.\n         STCM  R0,B'0011',DSMVCNT  SET MULTI-VOLUME COUNT\n         LTR   R0,R0\n         BNZ   *+L'*+8\n         ST    R2,IXCPRDSE         THIS CAN BE START SEQ. 0\n         B     IXNVS11+L'IXNVS11\n         ICM   R15,B'1111',IXCPRDSE     GET ADDRESS OF START SEQ. 0\n         BZ    IXNVS11\n         DROP  R2\n         USING DSTABDS,R15\n         MVC   DSVORG,IXMVFS       SET D.S. VOL. ORG.\n         DROP  R15\n         XC    IXCPRDSE,IXCPRDSE\n         USING DSTABDS,R2\nIXNVS11  MVC   DSVORG,IXMVFS       SET D.S. VOL. ORG.\n         MVC   DSCVOL,DDNVOL       RETAIN CAT. INFO VOLUME\n         BR    R14\n         DROP  R2\n         SPACE 1\nIXGDG    XC    ZERODSN,ZERODSN\n         CLC   IXCVSN,=CL6' '\n         BE    IXGDG30\n         MVC   LXTY,=CL8'GDG D.S.'\n         MVC   IXCNME,WORKDS       RETAIN DS-NAME\n         LA    R0,L'WORKDS-1       BUILD MODEL GDG NAME\n         LA    R1,WORKDS+L'WORKDS-1\nIXGDG1   CLI   0(R1),C' '\n         BNE   IXGDG2\n         BCTR  R1,0\n         BCT   R0,IXGDG1\n         B     IXGDG4\nIXGDG2   CLI   0(R1),C'.'\n         MVI   0(R1),C' '\n         BE    IXGDG3\n         BCTR  R1,0\n         BCT   R0,IXGDG2\n         B     IXGDG4\nIXGDG3   BAS   R14,IXGDG40         SCAN TO FIND MODEL\n         NOP   0\nIXGDG4   MVC   WORKDS,IXCNME       RESTORE DS-NAME\n         XC    IXMVCNT,IXMVCNT     RESET MULTI-VOLUME COUNTER\n         BAS   R6,IXGDG10\n         LH    R0,IXMVCNT\n         AH    R0,=H'1'\n         STH   R0,IXMVCNT\nIXGDG10  BAS   R14,IXUR            GET UNIT NAME\n         BAS   R14,IXLS            PRINT\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nIXGDG11  CLI   0(R2),FMOFF         END OF TABLE?\n         BE    IXGDG13             YES, NOT IN-LINE GDG D.S.\n         CLC   DSNME,IXCNME        IS IT THIS ONE?\n         BNE   IXGDG12             NO\n         CLC   DSVOLSN(L'DSVOLSN),IXCVSN     ON SAME VOLUME?\n         BNE   IXGDG12             NO\n         BAS   R14,IXGDG20         SET IN TABLE\n         B     IX10\nIXGDG12  LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     IXGDG11\nIXGDG13  BCT   R5,*+L'*+6          CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\n         XC    0(DSTABL,R2),0(R2)  CLEAR\n         MVC   DSNME,IXCNME        ENTER IN TABLE\n         MVC   DSALTVO(L'DSALTVO),IXCVSN\n         BAS   R14,IXGDG20         SET IN TABLE\n         LA    R2,DSTABL(R2)\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         B     IX10                GET NEXT ONE\nIXGDG20  MVI   DSCAT,XCSI          INDICATE READ FROM ICF CATALOG\n         MVI   DSUSE,XUG           INDICATE GDG D.S.\n         XR    R0,R0\n         ICM   R0,B'0011',IXCFSN\n         BNZ   *+L'*+12\n         ICM   R0,B'0011',IXMVCNT\n         MVI   IXMVFS,XOM          SAY MULTI-VOL.\n         B     *+L'*+4\n         MVI   IXMVFS,XOF          SAY FILE SEQ.\n         STCM  R0,B'0011',DSMVCNT  SET MULTI-VOLUME COUNT\n         LTR   R0,R0\n         BNZ   *+L'*+8\n         ST    R2,IXCPRDSE         THIS CAN BE START SEQ. 0\n         B     IXGDG21+L'IXGDG21\n         ICM   R15,B'1111',IXCPRDSE     GET ADDRESS OF START SEQ. 0\n         BZ    IXGDG21\n         DROP  R2\n         USING DSTABDS,R15\n         MVC   DSVORG,IXMVFS       SET D.S. VOL. ORG.\n         DROP  R15\n         USING DSTABDS,R2\n         XC    IXCPRDSE,IXCPRDSE\nIXGDG21  MVC   DSVORG,IXMVFS       SET D.S. VOL. ORG.\n         MVC   DSCVOL,DDNVOL       RETAIN CAT. INFO VOLUME\n         BR    R14\nIXGDG30  MVC   LXTY,=CL8'NULL GDG'\n         MVC   LXNM,WORKDS\n         BAS   R14,IXLS            PRINT\n         BAS   R14,IXGDG40         SCAN TO FIND MODEL\n         B     IXGDG31\n         BCT   R5,*+L'*+6          CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\n         XC    0(DSTABL,R2),0(R2)  CLEAR\n         MVC   DSNME,WORKDS        ENTER IN TABLE\n         MVC   DSALTVO(L'DSALTVO),DDNVOL\n         MVI   DSUSE,XUI           INDICATE NULL GDG\n         MVI   DSCAT,XCSI          INDICATE READ FROM ICF CATALOG\n         LA    R2,DSTABL(R2)\n         MVI   0(R2),FMOFF         SET FINAL MARKER\nIXGDG31  LA    R6,IXUN\n         B     IX10\nIXGDG40  L     R2,DSTAB            START OF DSNAME'S TABLE\nIXGDG41  CLI   0(R2),FMOFF         END OF TABLE?\n         BE    4(R14)              YES, RETURN = +4\n         CLI   DSUSE,XUM           NO, MODEL GDG?\n         BNE   IXGDG42             NO\n         CLC   DSNME,WORKDS        YES, SAME DS-NAME?\n         BNE   IXGDG42             NO\n         CLC   DSVOLSN,DDNVOL      YES, ON CATALOG VOLUME?\n         BNE   IXGDG42             NO\n         CLI   DSCAT,0             ALREADY SET?\n         BNER  R14                 YES, RETURN = +0\n         MVI   DSCAT,XCSI          INDICATE READ FROM ICF CATALOG\n         BR    R14                 RETURN = +0\nIXGDG42  LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     IXGDG41\n         DROP  R2\n         SPACE 1\nIXCLS    CLI   WORKDS,C' '\n         BNE   IXCLS1\n         CLI   IXMSPW,0\n         BE    IXCLS1\n         MVC   CVLPW,IXMSPW\n         XC    IXMSPW,IXMSPW\n         LA    R14,CVLPW+L'CVLPW-1\n         LA    R15,L'CVLPW\n         CLI   0(R14),C' '\n         BNE   *+L'*+12\n         BCTR  R14,0\n         BCT   R15,*-10\n         XC    CVLPW,CVLPW\n         STC   R15,CVLPWL\nIXCLS1   MVC   LXTY(7),=CL7'CLUSTER'\n         MVC   LXNM,WORKDS\n         BAS   R14,IXLS            PRINT\n         CLI   WORKDS,C' '\n         BNE   *+L'*+10\n         XC    ZERODSN,ZERODSN\n         B     *+L'*+6\n         MVC   ZERODSN,WORKDS      RETAIN TRUENAME\n         LA    R6,IXUN\n         B     IX10\n         SPACE 1\nIXALX    MVC   LXTY(3),=CL3'AIX'\n         MVC   LXNM,WORKDS\n         BAS   R14,IXLS            PRINT\n         LA    R6,IXUN\n         B     IX10\n         SPACE 1\nIXDTA    MVC   LXST+2(4),=CL4'DATA'\n         B     IXINX+L'IXINX\nIXINX    MVC   LXST+1(5),=CL5'INDEX'\n         MVC   IXCNME,WORKDS       RETAIN DS-NAME\n         XC    IXMVCNT,IXMVCNT     RESET MULTI-VOLUME COUNTER\n         BAS   R6,IXDI0\n         LH    R0,IXMVCNT\n         AH    R0,=H'1'\n         STH   R0,IXMVCNT\nIXDI0    BAS   R14,IXUR            GET UNIT NAME\n         BAS   R14,IXLS            PRINT\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nIXDI1    CLI   0(R2),FMOFF         END OF TABLE?\n         BE    IXDI4               YES, NOT IN-LINE DATA-SET\n         CLC   DSNME,IXCNME        IS IT THIS ONE?\n         BNE   IXDI3               NO\n         CLI   DSTYPE,XTV          IS IT SAME TYPE?\n         BNE   IXDI3               NO\n         CLC   DSVOLSN(L'DSVOLSN),IXCVSN     ON SAME VOLUME?\n         BNE   IXDI3               NO\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* NOTE - THE FOLLOWING 6 INSTRUCTIONS ARE NECESSARIES TO SUPPRESS     *\n*        THE ABNORMAL SITUATION OF TWICE DEFINED THE VOLUME FOR A     *\n*        CLUSTER-INDEX OR REPEATED REFERENCES TO A 'SYS1.VVDS.V...'   *\n*        SPACE CLUSTER USED BY VARIOUS ICF CATALOGS.                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         CLI   DSCAT,XCSI          ALREADY READ FROM ICF CATALOG?\n         BNE   IXDI2               NO\n         CLC   DSANME,ZERODSN      IS IT SAME TRUENAME?\n         BE    IX10                YES (ABNORMAL CLUSTER-INDEX)\n         CLC   IXCNME(11),=CL11'SYS1.VVDS.V' IS IT A SPACE CLUSTER?\n         BE    IX10                YES\nIXDI2    CLI   DSCAT,0             ALREADY CATALOGED?\n         BNE   IXDI3               YES\n         BAS   R14,IXDI10          NO, SET IN TABLE\n         B     IX10\nIXDI3    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         B     IXDI1\nIXDI4    BCT   R5,*+L'*+6          CONTROL\n         XR    R15,R15             DSNAME'S TABLE OVERFLOW\n         B     ERR17\n         XC    0(DSTABL,R2),0(R2)  CLEAR\n         MVC   DSNME,IXCNME        ENTER IN TABLE\n         MVC   DSALTVO(L'DSALTVO),IXCVSN\n         BAS   R14,IXDI10          SET IN TABLE\n         LA    R2,DSTABL(R2)\n         MVI   0(R2),FMOFF         SET FINAL MARKER\n         B     IX10                GET NEXT ONE\nIXDI10   MVI   DSCAT,XCSI          INDICATE READ FROM ICF CATALOG\n         CLC   DSNME,ZERODSN       TRUENAME IDENTICAL TO DS-NAME?\n         BE    *+L'*+6             BRANCH IF YES\n         MVC   DSANME,ZERODSN      SET TRUENAME\n         XR    R0,R0\n         ICM   R0,B'0011',IXCFSN\n         BNZ   *+L'*+12\n         ICM   R0,B'0011',IXMVCNT\n         MVI   IXMVFS,XOM          SAY MULTI-VOL.\n         B     *+L'*+4\n         MVI   IXMVFS,XOF          SAY FILE SEQ.\n         STCM  R0,B'0011',DSMVCNT  SET MULTI-VOLUME COUNT\n         LTR   R0,R0\n         BNZ   *+L'*+8\n         ST    R2,IXCPRDSE         THIS CAN BE START SEQ. 0\n         B     IXDI11+L'IXDI11\n         ICM   R15,B'1111',IXCPRDSE     GET ADDRESS OF START SEQ. 0\n         BZ    IXDI11\n         DROP  R2\n         USING DSTABDS,R15\n         MVC   DSVORG,IXMVFS       SET D.S. VOL. ORG.\n         DROP  R15\n         XC    IXCPRDSE,IXCPRDSE\n         USING DSTABDS,R2\nIXDI11   MVC   DSVORG,IXMVFS       SET D.S. VOL. ORG.\n         MVC   DSCVOL,DDNVOL       RETAIN CAT. INFO VOLUME\n         BR    R14\n         DROP  R2\n         SPACE 1\nIXPTH    XC    ZERODSN,ZERODSN\n         MVC   LXTY(4),=CL4'PATH'\n         BAS   R14,IXNMS\n         NI    IXSW1+1,OFF\n         BAS   R6,IX11\n         OI    IXSW1+1,ON\n         BASR  R6,0\n         BAS   R14,IXNME\n         BAS   R14,IXLS            PRINT\n         B     IX10\n         SPACE 1\nIXALS    XC    ZERODSN,ZERODSN\n         MVC   LXTY(5),=CL5'ALIAS'\n         BAS   R14,IXNMS\n         NI    IXSW1+1,OFF\n         BAS   R6,IX11\n         OI    IXSW1+1,ON\n         LA    R14,LXNM+1\n         LA    R15,LXNM+8\nIXALS1   CLI   0(R14),C'.'\n         BE    IXALS5\n         CLI   0(R14),C' '\n         BE    IXALS2\n         LA    R14,1(R14)\n         CLR   R14,R15\n         BNH   IXALS1\n         B     IXALS5\nIXALS2   LA    R14,WORKDS\n         LA    R15,WORKDS+L'WORKDS-L'CVPVOL-2\nIXALS3   CLI   0(R14),C' '\n         BE    IXALS5\n         CLC   0(2,R14),=CL2'.V'\n         BE    IXALS4\n         LA    R14,1(R14)\n         CLR   R14,R15\n         BNH   IXALS3\n         B     IXALS5\nIXALS4   L     R1,TBGVOL           CVOL POINTERS TABLE\n         CLI   0(R1),FMOFF         END OF TABLE?\n         BE    *+L'*+8             YES\n         LA    R1,CVPL(R1)         NO, NEXT ELEMENT\n         B     *-12\n         LA    R15,CVPL(R1)        FINAL ELEMENT\n         CL    R15,TBGVOLE         ANY OVERFLOW?\n         BL    *+L'*+6             NO\n         XR    R15,R15             YES\n         B     ERR64\n         USING CVPDS,R1\n         MVC   CVPNAME(L'CVPNAME),LXNM\n         MVC   CVPVOL(L'CVPVOL),2(R14)\n         OI    CVPFL,CVPICF\n         DROP  R1\n         MVI   0(R15),FMOFF        SET FINAL MARKER\nIXALS5   BASR  R6,0\n         BAS   R14,IXNME\n         BAS   R14,IXLS            PRINT\n         B     IX10\n         SPACE 1\nIXAIX    XC    ZERODSN,ZERODSN\n         MVC   LXTY(8),=CL8'TRUENAME'\n         MVC   LXST+3(3),=CL3'AIX'\n         BAS   R14,IXNMS\n         NI    IXSW1+1,OFF\n         BAS   R6,IX11\n         OI    IXSW1+1,ON\n         BASR  R6,0\n         BAS   R14,IXNME\n         BAS   R14,IXLS            PRINT\n         B     IX10\n         SPACE 1\nIXDTN    XC    ZERODSN,ZERODSN\n         MVC   LXTY(8),=CL8'TRUENAME'\n         MVC   LXST+2(4),=CL4'DATA'\n         BAS   R14,IXNMS\n         NI    IXSW1+1,OFF\n         BAS   R6,IX11\n         OI    IXSW1+1,ON\n         BASR  R6,0\n         BAS   R14,IXNME\n         BAS   R14,IXLS            PRINT\n         B     IX10\n         SPACE 1\nIXIXT    XC    ZERODSN,ZERODSN\n         MVC   LXTY(8),=CL8'TRUENAME'\n         MVC   LXST+1(5),=CL5'INDEX'\n         BAS   R14,IXNMS\n         NI    IXSW1+1,OFF\n         BAS   R6,IX11\n         OI    IXSW1+1,ON\n         BASR  R6,0\n         BAS   R14,IXNME\n         BAS   R14,IXLS            PRINT\n         B     IX10\n         SPACE 1\nIXICN    XC    ZERODSN,ZERODSN\n         MVC   LXTY(7),=CL7'CONNECT'\n         MVC   LXST+3(3),=CL3'ICF'\n         BASR  R6,0\n         BAS   R14,IXUR            GET UNIT NAME\n         BAS   R14,IXLS            PRINT\n         B     IX10\n         SPACE 1\nIXVCN    XC    ZERODSN,ZERODSN\n         MVC   LXTY(7),=CL7'CONNECT'\n         MVC   LXST+2(4),=CL4'VSAM'\n         BASR  R6,0\n         BAS   R14,IXUR            GET UNIT NAME\n         BAS   R14,IXLS            PRINT\n         B     IX10\n         SPACE 1\nIXRR     STM   R14,R1,IXSVR        DISPLAY REG. ROUTINE\n         UNPK  IXRMR0(9),IXSVR+8(5)\n         TR    IXRMR0,TRTAB-X'F0'\n         MVI   IXRMR0+L'IXRMR0,C'/'\n         UNPK  IXRMR1(9),IXSVR+12(5)\n         TR    IXRMR1,TRTAB-X'F0'\n         MVI   IXRMR1+L'IXRMR1,C' '\n        WTO    MF=(E,IXRMR)\n         LM    R14,R1,IXSVR\n         BR    R14\n         SPACE 1\nIXLS     TM    IXLSCTR,IXSHSK      SELECT HOW LIST IS CONTROLED\n         BZ    IXLS1\n         TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BOR   R14                 NO\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BOR   R14                 YES\n         ST    R14,IXSVLS\n         B     IXLS2\nIXLS1    TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BOR   R14                 NO\n         ST    R14,IXSVLS\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BZ    IXLS2               NO\nIXSW2    NOP   IXLS2\n         OI    IXSW2+1,ON\n         MVI   IXCINIT,C'0'\n        @LIST  IXCINIT,=PL2'+48',U\n        @LIST  SPACE\nIXLS2   @LIST  LINE\n         L     R14,IXSVLS\n         BR    R14\n         SPACE 1\nIXUR     ST    R14,IXSVUR          UNIT NAME ROUTINE\n         CLI   WORKDS,C' '\n         BE    IXUR1\n         MVC   LXNM,WORKDS\n        @FILL  LXNM,WORKDS\nIXUR1    MVC   LXVL,IXCVSN\n         UNPK  LXDT(L'LXDT+1),WORKD(L'LXDT/2+1)\n         MVI   LXDT+L'LXDT,C' '\n         TR    LXDT(L'LXDT),TRTAB-X'F0'\n         CLC   WORKD(4),=XL4'0'\n         BE    IXUR2\n        $DVTYUN ,LXUN,MF=(E,ICFDV) GET UNIT NAME\n         LTR   R15,R15\n         BZ    IXUR2\n         MVC   LXUN(4),=CL4'?RC='\n         CVD   R15,WORKD\n         UNPK  LXUN+4(2),WORKD+6(2)\n         OI    LXUN+5,C'0'\n         MVI   LXUN+6,C'?'\nIXUR2    L     R14,IXSVUR\n         BR    R14\n         SPACE 1\nIXNMS    MVC   LXNM,WORKDS         DS-NAME ROUTINE\n         LA    R1,LXNM+L'LXNM-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         ST    R1,IXNPTR\n         BR    R14\nIXNME    L     R1,IXNPTR\n         MVI   2(R1),C'/'\n         MVC   4(L'WORKDS,R1),WORKDS\n         BR    R14\n         DROP  R7\n         SPACE 1\nIX90     ST    R5,DSTABCT          DSNAME'S TABLE OVERFLOW CONTROL\n         LTR   R0,R0\n         BNZ   *+L'*+6\n         LTR   R1,R1\n         BZ    IX91\n         BAS   R14,IXRR\n         B     ERR56\nIX91     NI    CVLIND,255-CVLCSO   SET CLOSED\n        $ICFSC MF=(E,ICFSCL)       CLOSE ICF CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    IX92\n         CH    R1,=H'2'\n         BNE   ERR57\n         BAS   R14,IXRR\n         B     ERR57\nIX92     TM    RUNIND,RUNOLIST     DETAIL LIST REQUESTED?\n         BO    IX94                NO\n         TM    RUNIND,RUCSH        CAT. SHORT LIST REQUESTED?\n         BZ    IX93                NO\n         TM    IXSW2+1,ON\n         BZ    IX94\n         NI    IXSW2+1,OFF\nIX93    @LIST  IXCENDM\n         DROP  R3,R4\nIX94     MVI   LINE,C' '           ICF CAT. INF.\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R2,LINE\n         LA    R3,IXNCTR-L'IXNCTR\n         LA    R4,IXNCTRT-L'IXNCTRT\n         LA    R5,IXNCTRN\nIX95     LA    R3,L'IXNCTR(R3)\n         LA    R4,L'IXNCTRT(R4)\n         MVC   LINE(1),0(R4)\n         MVC   LINE+19(L'IXNCTRT-1),1(R4)\n         L     R1,0(R3)\n         CVD   R1,WORKD\n         CLI   1(R4),C' '\n         BE    IX96\n         MVC   LINE+11(7),=XL7'20202020202120'\n         ED    LINE+10(8),WORKD+4\n         MVC   LINE+L'IXNCTRT+19(7),LINE+L'IXNCTRT+18\n         B     IX97\nIX96     MVC   LINE+L'IXNCTRT+19(7),=XL7'20202020202120'\n         ED    LINE+L'IXNCTRT+18(8),WORKD+4\n         MVC   LINE+11(7),LINE+10\nIX97    @OUT   LINE\n         BCT   R5,IX95\n         SPACE 1\n        @XE\n         EJECT\nICFSOL  $ICFSO ,IXDVTY,,ICFSW,MF=L\nICFSRL  $ICFSR ,IXCVSN,,MF=L\nICFSCL  $ICFSC IXNCTR,MF=L\nICFDV   $DVTYUN ,,MF=L\n         SPACE 1\nIXDVTY   DC    5F'0'\n         DC    H'0'\nIXCVOL   DC    CL6' '\nIXCNME   DC    CL44' '\nIXSVR    DC    4F'0'\nIXSVUR   DC    F'0'\nIXSVLS   DC    F'0'\nIXNPTR   DC    F'0'\nIXCPRDSE DC    F'0'\nIXCVSN   DC    CL6' '\nIXCFSN   DC    H'0'\nIXMVCNT  DC    H'0'\nIXMVFS   DC    XL1'0'\nIXLSCTR  DC    XL1'0'\n         EJECT\nIXRMR   WTO    '--- CONTENT OF REGISTERS 0-1 :                    ',   C\n               ROUTCDE=11,DESC=7,MF=L\nIXRMR0   EQU   IXRMR+35,8\nIXRMR1   EQU   IXRMR+44,8\nIXRCM   WTO    '--- REQ. ICF CATALOG :        /                        C\n                                     ',ROUTCDE=11,DESC=7,MF=L\nIXRCM1   EQU   IXRCM+27,6\nIXRCM2   EQU   IXRCM+36,44\nIXRAM   WTO    '--- ALL. ICF CATALOG :        /                        C\n                                     ',ROUTCDE=11,DESC=7,MF=L\nIXRAM1   EQU   IXRAM+27,6\nIXRAM2   EQU   IXRAM+36,44\n         EJECT\n        $ICFSW ICFAUTH+ICFMSPW\nIXMSPW   DC    XL8'0'\n         SPACE 1\n         DC    AL1(IXCINFL)\nIXCINF   DC    CL6'0 ',CL7' ICF / '\nIXCINFA  DC    CL6' ',C' ('\nIXCINFB  DC    CL8'        ',C') : '\nIXCINFC  DC    CL44' '\nIXCINFL  EQU   *-IXCINF\n         DC    AL1(IXCINITL)\nIXCINIT  DC    CL8'1 ICF / '\nIXCINITA DC    CL6' ',C' ('\nIXCINITB DC    CL8' ',C') CATALOG : '\nIXCINITC DC    CL44' '\nIXCINITL EQU   *-IXCINIT\n         DC    AL1(L'IXCENDM)\nIXCENDM  DC    C'0    END OF CATALOG LIST.'\n         EJECT\n*                   ----+----1----+----2----+---\nIXNCTRT  DC    CL28' GETS ISSUED AGAINST THE BCS'      1\n         DC    CL28' NONVSAM ENTRIES'                  2\n         DC    CL28' CLUSTER ENTRIES'                  3\n         DC    CL28'   ALTERNATE INDEX ENTRIES :'      4\n         DC    CL28'    DATA (CLUSTER) ENTRIES :'      5\n         DC    CL28'   INDEX (CLUSTER) ENTRIES :'      6\n         DC    CL28' GDG BASE ENTRIES'                 7\n         DC    CL28'               GDG ENTRIES :'      8\n         DC    CL28' PATH ENTRIES'                     9\n         DC    CL28' ALIAS ENTRIES'                   10\n         DC    CL28' TRUENAME ENTRIES'                11\n         DC    CL28' ICF CONNECTOR ENTRIES'           12\nIXNCTRN  EQU   (*-IXNCTRT)/L'IXNCTRT\n         SPACE 1\nIXNCTR   DC    (IXNCTRN)F'0'\n         SPACE 2\nIXTBTY   DS    0XL6                TABLE TYPES / PROCESS\n         SPACE 1\nIXSHSK   EQU   X'80'     DON'T LIST IF CAT. SHORT LIST REQUESTED\n         SPACE 1\n         DC    AL1(1),AL4(IXNVS),AL1(IXSHSK)      NON-VSAM NAME\n         DC    AL1(2),AL4(IXGDG),AL1(0)           GDG NAME\n         DC    AL1(3),AL4(IXCLS),AL1(IXSHSK)      CLUSTER NAME\n         DC    AL1(4),AL4(IXALX),AL1(IXSHSK)      ALT. INDEX NAME\n         DC    AL1(5),AL4(IXDTA),AL1(IXSHSK)      DATA NAME\n         DC    AL1(6),AL4(IXINX),AL1(IXSHSK)      INDEX NAME\n         DC    AL1(7),AL4(IXPTH),AL1(0)           PATH NAME\n         DC    AL1(8),AL4(IXALS),AL1(IXSHSK)      ALIAS NAME\n         DC    AL1(9),AL4(IXAIX),AL1(IXSHSK)      AIX TRUE-NAME\n         DC    AL1(10),AL4(IXDTN),AL1(IXSHSK)     DATA TRUE-NAME\n         DC    AL1(11),AL4(IXIXT),AL1(IXSHSK)     INDEX TRUE-NAME\n         DC    AL1(12),AL4(IXICN),AL1(0)          ICF CONNECT NAME\n         DC    AL1(13),AL4(IXVCN),AL1(0)          VSAM CONNECT NAME\n         DC    AL1(0)              END TABLE INDICATOR\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n         SPACE 1\nLXDSCT   DSECT                     LINE DESCRIPTION\nLXCC     DS    CL1,CL9             ASA CC\nLXTY     DS    CL8,CL2             TYPE\nLXST     DS    CL6,CL2             SUB-TYPE\nLXNM     DS    CL44,CL2            NAME\nLXVL     DS    CL6,CL2             VOLUME SERIAL NUMBER\nLXUN     DS    CL8,CL2             UNIT NAME\nLXDT     DS    CL8                 DEVICE TYPE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB011": {"ttr": 11521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x00\\xe7\\x00\\xe7\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 231, "newlines": 231, "modlines": 0, "user": "SYSPAJA"}, "text": "B011     TITLE 'CLEAN-UP - GENERATE IDCAMS STATEMENTS (B011).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB011    @XS\n*        AT ENTRY :   R2 = DSNAME TABLE ENTRY POINTER\n         SPACE 1\nGISW1    NOP   GI0\n         OI    GISW1+1,ON\n        $DVTYUN ,WORKD,MF=(L,GIDV)\n         USING DSTABDS,R2\nGI0      TM    RUNIND,RUTEST       TEST MODE?\n         BO    GI1                 YES\n         LA    R3,CARDOU           NO, GENERATE INPUT FILE\n         MVI   0(R3),C' '\n         MVC   1(L'CARDOU-1,R3),0(R3)\nGISW2    NOP   GI10\n         OI    GISW2+1,ON\n         BAS   R14,IDCIAR          ALLOCATE IDCAMS INPUT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR71\n        $PUNCH (R3),,(R6),MF=(L,GIPU)\n         B     GI10\nGI1      ICM   R3,B'1111',GIDPTR   ANY CURRENT POINTER?\n         BNZ   GI10                YES\n         ICM   R3,B'1111',GIDSTR   NO, FIRST ARRAY?\n         BNZ   *+L'*+4             NO\n         LA    R3,AGIDST           YES\n         BAS   R14,GINXAR\n         MVI   0(R3),FMON          SET FINAL MARKER\n         SPACE 1\nGI10     CLI   DSACTION,YS         DATA-SET MUST BE SCRATCHED?\n         BE    GI20                YES\n         CLI   DSACTION,YD         SCRATCH DISK?\n         BE    GI20                YES\n         CLI   DSACTION,YT         SCRATCH TEMPORARY?\n         BE    GI20                YES\n         CLI   DSACTION,YU         UNCATALOG?\n         BE    GI20                YES\n         CLI   DSACTION,YC         CATALOG?\n         BE    GI30                YES\n         B     GI99\n         SPACE 1\nGI20     MVC   1(3,R3),=CL3'DEL'\n         MVC   5(L'DSNME,R3),DSNME\n         LA    R1,4+L'DSNME(R3)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   2(5,R1),=CL5'NVSAM'\n         CLI   DSACTION,YU         UNCATALOG?\n         BE    *+L'*+10            YES\n         MVC   8(5,R1),=CL5'PRG -' NO, SCRATCH\n         B     *+L'*+6\n         MVC   8(6,R1),=CL6'NSCR -'\n         BAS   R14,GINXCD\n         BAS   R14,GICTLG\n         B     GI90\n         SPACE 1\nGI30     BAS   R14,GIDEVT\n         MVC   1(3,R3),=CL3'DEF'\n         MVC   5(11,R3),=CL11'NVSAM(NAME('\n         MVC   16(L'DSNME,R3),DSNME\n         LA    R1,15+L'DSNME(R3)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(3,R1),=CL3') -'\n         BAS   R14,GINXCD\n         MVC   9(5,R3),=CL5'DEVT('\n         MVC   14(8,R3),WORKD\n         LA    R1,21(R3)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(6,R1),=CL6') VOL('\n         MVC   7(L'DSVOLSN,R1),DSVOLSN\n         LA    R1,6+L'DSVOLSN(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(4,R1),=CL4')) -'\n         BAS   R14,GINXCD\n         BAS   R14,GICTLG\n         B     GI90\n         SPACE 1\nGINXAR   L     R0,LGIDST           GET ANOTHER ARRAY SPACE\n         ST    R14,GISV2\n        GETMAIN EC,LV=(R0),A=(R3)\n         LTR   R15,R15             STORAGE AVAILABLE?\n         BNZ   ERR69               NO\n         L     R3,0(R3)            GET ARRAY START ADDRESS\n         ST    R3,GIDSTR\n         LR    R4,R3\n         A     R4,LGIDST\n         SH    R4,=H'4'\n         MVI   0(R4),FMON          SET ARRAY FINAL MARKER\n         LA    R3,4(R3)            CURRENT POINTER\n         LR    R4,R3\n         L     R5,LGIDST\n         SH    R5,=H'8'\n         BASR  R6,0\n         XR    R7,R7\n         ICM   R7,B'1000',=C' '\n         MVCL  R4,R6               BLANKS ALL CARDS\n         ST    R3,GIDPTR           SET CURRENT POINTER\n         L     R14,GISV2\n         BR    R14                 RETURN\n         SPACE 1\nGINXCD   AP    GINUM,=PL1'+1'      GET NEXT CARD SPACE ROUTINE\n         UNPK  72(8,R3),GINUM      R3 = CARD POINTER\n         OI    79(R3),C'0'\n         MVI   0(R3),C' '\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    GINXCD1             YES\n         ST    R14,GISV1\n        $PUNCH MF=(E,GIPU)\n         LTR   R15,R15\n         BNZ   ERR71\n         MVC   1(L'CARDOU-1,R3),0(R3)\n         L     R14,GISV1\n         NOPR  R14                 RETURN\n         OI    *-1,ON\n         OI    WHATS,WHIDIN        SAY OPENED\n         BR    R14                 RETURN\nGINXCD1  LA    R3,80(R3)\n         CLI   0(R3),FMON          ARRAY FINAL MARKER?\n         BNER  R14                 NO, RETURN\n         L     R3,GIDSTR           YES, SUPPLY ANOTHER ARRAY\n         ST    R14,GISV1\n         BAS   R14,GINXAR\n         L     R14,GISV1\n         BR    R14                 RETURN\n         SPACE 1\nGICTLG   MVC   9(4,R3),=CL4'CAT('  BUILD CATALOG NAME ROUTINE\n         L     R15,TBCVOL\n         USING CVLT,R15\nGICTLG1  CLI   0(R15),FMOFF\n         BE    ERR70\n         TM    CVLIND,CVLICF\n         BZ    GICTLG2\n         TM    CVLIND,CVLMIS\n         BO    GICTLG2\n         TM    CVLIND,CVLCTP\n         BZ    GICTLG2\n         CLC   CVLVOL,DSCVOL\n         BE    GICTLG3\nGICTLG2  LA    R15,CVLL(R15)\n         B     GICTLG1\nGICTLG3  MVC   13(L'CVLNME,R3),CVLNME\n         LA    R1,12+L'CVLNME(R3)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         CLI   CVLPWL,0\n         BNE   *+L'*+6\n         MVI   1(R1),C')'\n         BR    R14                 RETURN\n         MVI   1(R1),C'/'\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    *+L'*+6\n         MVC   2(L'CVLPW,R1),CVLPW\n         XR    R0,R0\n         IC    R0,CVLPWL\n         DROP  R15\n         AR    R1,R0\n         MVI   2(R1),C')'\n         BR    R14                 RETURN\n         SPACE 1\nGIDEVT   ST    R14,GISV1           GET DEVICE TYPE ROUTINE\n        $DVTYUN DSUCBTY,,MF=(E,GIDV)\n         LTR   R15,R15\n         BNZ   *+L'*+6\n         L     R14,GISV1\n         BR    R14                 RETURN\n         LR    R3,R15\nGISW3    NOP   GIDEVT1\n         OI    GISW3+1,ON\n        @LIST  GIERRS,=PL2'+45',U\nGIDEVT1  CVD   R3,WORKD\n         UNPK  GIERDVT,WORKD+6(2)\n         OI    GIERDVT+L'GIERDVT-1,C'0'\n         MVC   GIERDVV,DSVOLSN\n         MVC   GIERDVN,DSNME\n        @FILL  GIERDVN\n        @LIST  GIERDV\n         B     GI99\n         SPACE 1\n         DROP  R2\nGI90     AP    GINUM,=PL1'+1'\n         UNPK  72(8,R3),GINUM\n         OI    79(R3),C'0'\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    GI91                YES\n        $PUNCH MF=(E,GIPU)\n         LTR   R15,R15\n         BNZ   ERR71\n         MVC   1(L'CARDOU-1,R3),0(R3)\n         B     GI99\nGI91     LA    R3,80(R3)\n         CLI   0(R3),FMON          ARRAY FINAL MARKER\n         BE    GI92                YES\n         MVI   0(R3),FMON          NO, SET FINAL MARKER\n         ST    R3,GIDPTR           SAVE CURRENT POINTER\n         B     GI99\nGI92     XC    GIDPTR,GIDPTR       RESET POINTER\nGI99    @XE\n         EJECT\nGIPU    $PUNCH ,,,MF=L\nGIDV    $DVTYUN ,,MF=L\n         SPACE 1\nGIDSTR   DC    A(*-*)\nGIDPTR   DC    A(*-*)\nGISV1    DC    F'0'\nGISV2    DC    F'0'\nGINUM    DC    PL5'+0'\n         SPACE 1\n         DC    AL1(L'GIERRS)\nGIERRS   DC    C'0GENERATE IDCAMS STATEMENTS ERRORS :'\n         DC    AL1(GIERDVL)\nGIERDV   DC    CL6' ',C'DSN='\nGIERDVN  DC    CL44' ',C'  VOL='\nGIERDVV  DC    CL6' ',C'  DEVT= ? RC='\nGIERDVT  DC    CL2' ',C'.'\nGIERDVL  EQU   *-GIERDV\n         SPACE 2\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB012": {"ttr": 11526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x00[\\x00[\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 91, "newlines": 91, "modlines": 0, "user": "SYSPAJA"}, "text": "B012     TITLE 'CLEAN-UP - EXECUTE IDCAMS STATEMENTS (B012).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB012    @XS\n         TM    RUNIND,RUTEST       TEST MODE?\n         BO    EI80                YES, GO LIST ONLY\n         BAS   R14,IDCOAR          NO, ALLOCATE IDCAMS OUTPUT PRINT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR72\n        $VOPEN WORKD,(R6),MF=(L,EIRDOUT)\n        $VCLOSE (R6),MF=(L,EICLOUT)\n         BAS   R14,XIDCAMS         EXECUTE IDCAMS\n         CVD   R15,WORKD\n         ED    EIPRTT+4(4),WORKD+6\n        @OUT   EIPRT,=PL2'+40',U\n        $VOPEN MF=(E,EIRDOUT)\n         LTR   R15,R15\n         BNZ   ERR72\n         OI    WHATS,WHIDOUT       SAY OPENED\n         CLC   WORKD(4),=AL4(L'LINE)\n         BH    ERR73\n        $VREAD LINE,,MF=(L,EIRDOUT)\nEI1      MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n        $VREAD MF=(E,EIRDOUT)      READ IDCAMS OUTPUT PRINT\n         LTR   R15,R15\n         BM    EI50\n         BNZ   ERR72\n         CLC   LINE(8),=CL8'1IDCAMS'    TITLE LINE?\n         BE    EI1                      YES, SKIP IT\n         LA    R1,LINE+1\n         LA    R2,1\n         LA    R3,LINE+L'LINE-1\n         CLI   0(R1),C' '\n         BNE   EI10\n         BXLE  R1,R2,*-8\n         B     EI1\nEI10     CLC   0(9,R1),=CL9'IDC0001I'   TEST FUNCTION COMPLETED = 0\n         BNE   EI11\n         CLC   55(3,R1),=CL3' 0'\n         BE    EI1\n         B     EI40\nEI11     CLC   0(9,R1),=CL9'IDC0002I'   TEST IDCAMS COMPLETED = 0\n         BNE   EI12\n         CLC   63(3,R1),=CL3' 0'\n         BE    EI1\n         B     EI40\nEI12     CLC   0(3,R1),=CL3'IDC'   TEST ANY IDCAMS INFO'S (IDC...)\n         BNE   EI1\n         CLC   3(16,R1),=CL16'0550I ENTRY (A) '\n         BNE   EI40\n         MVI   0(R1),C' '\n         MVC   1(18,R1),0(R1)\nEI40     MVI   LINE,C' '\n        @OUT   LINE\n         B     EI1+L'EI1\nEI50     NI    WHATS,255-WHIDOUT   CLOSE IDCAMS OUTPUT PRINT\n        $VCLOSE MF=(E,EICLOUT)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    EI99\n         B     ERR72\n         SPACE 1\nEI80     MVC   EIPRTT,=CL16'SIMULATED (TEST)'\n        @OUT   EIPRT,=PL2'+40',U\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         L     R2,AGIDST           IDCAMS STARTING ARRAY\nEI81     LA    R3,4(R2)\nEI82     MVC   LINE+6(80),0(R3)\n        @OUT   LINE\n         LA    R3,80(R3)\n         CLI   0(R3),FMON          FINAL MARKER?\n         BNE   EI82                NO\n         ICM   R2,B'1111',0(R2)    YES, ANOTHER ARRAY?\n         BNZ   EI81                YES, CONTINUE\n         SPACE 1\nEI99    @XE\n         EJECT\nEIRDOUT $VREAD ,,MF=L              ALSO USED BY VOPEN\nEICLOUT $VCLOSE ,MF=L\n         SPACE 1\n         DC    AL1(L'EIPRT+L'EIPRTT)\nEIPRT    DC    C'0IDCAMS PROCESSING : '\nEIPRTT   DC    0CL16' ',CL5'RC = ',XL3'202120',CL8' '\n         SPACE 2\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLB013": {"ttr": 11529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x00v\\x00v\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 118, "newlines": 118, "modlines": 0, "user": "SYSPAJA"}, "text": "B013     TITLE 'CLEAN-UP - RACF GENERIC PROFILES PROCESS (B013).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nB013    @XS\n         L     R1,TBRGDS           HLQ NAMES TABLE\n         CLI   0(R1),FMOFF         END OF TABLE?\n         BE    TPM99               YES, TABLE EMPTY (NO GENERICS)\n         ST    R1,TPMRG            SET CURRENT POINTER\n         LA    R1,WORKDS+L'WORKDS-1     END OF DS-NAME (TEST)\n         ST    R1,TPMMAX\n         L     R2,DSTAB            START OF DSNAME'S TABLE\n         USING DSTABDS,R2          ESTABLISH ADDRESSABILITY\nTPM1     CLI   DSANME,0            IS THERE A TRUE NAME (ALIAS)?\n         BE    *+L'*+10            NO\n         MVC   WORKDS,DSANME       YES, USE IT\n         B     *+L'*+6\n         MVC   WORKDS,DSNME        USE DS-NAME\n         LR    R5,R2               RETAIN STARTING GROUP ENTRY\n         NI    TPMSW+1,OFF\nTPM2     CLI   DSRACF,0            ALREADY DEFINED BY RACF DISCRETE?\n         BE    *+L'*+4             NO\n         OI    TPMSW+1,ON          YES, SKIP THIS GROUP\n         LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLI   0(R2),FMOFF         END OF TABLE?\n         BE    TPMSW               YES\n         CLI   DSANME,0            IS THERE A TRUE NAME (ALIAS)?\n         BE    *+L'*+10            NO\n         CLC   WORKDS,DSANME       YES, USE IT\n         B     *+L'*+6\n         CLC   WORKDS,DSNME        USE DS-NAME\n         BE    TPM2                BRANCH IF EQUAL TO PREVIOUS\nTPMSW    NOP   TPM31\n         LR    R6,R2               RETAIN ENDING GROUP ENTRY\n         LR    R2,R5               RESTORE STARTING GROUP ENTRY\n         LA    R4,WORKDS           START OF DS-NAME\n         LA    R0,L'WORKD          EXTRACT HIGH-LEVEL INDEX\n         LA    R14,WORKD\n         MVC   WORKD,=CL8' '\nTPM3     MVC   0(1,R14),0(R4)\n         LA    R14,1(R14)\n         LA    R4,1(R4)\n         CLI   0(R4),C' '\n         BE    TPM30               NO HIGH-LEVEL NAME, SO NOT FOUND\n         CLI   0(R4),C'.'\n         BE    *+L'*+8\n         BCT   R0,TPM3\n         B     ERR75               ERROR, HIGH-LEVEL NAME TOO LONG\n         L     R1,TPMRG            HLQ NAMES TABLE CURRENT POINTER\nTPM4     CLC   WORKD(8),0(R1)      THIS HLQ NAME?\n         BL    TPM30               NOT FOUND\n         BE    TPM5                YES\n         LA    R1,NGDL(R1)         SEE FORWARD\n         CLI   0(R1),FMOFF         END OF TABLE?\n         BNE   TPM4                NO, CONTINUE\n         B     TPM99               YES, NOTHING MORE\nTPM5     CL    R1,TPMRG            CURRENT POINTER CHANGED?\n         BE    *+L'*+4             NO\n         ST    R1,TPMRG            YES, STORE IT\n         ICM   R7,B'1111',8(R1)    GET START OF GENERIC NAMES\n         LA    R4,1(R4)            START DS-NAME AFTER HLQ\nTPM10    MVI   TPSCDSN,C' '\n         MVC   TPSCDSN+1(L'TPSCDSN-1),TPSCDSN\n         XR    R1,R1\n         IC    R1,0(R7)\n         EX    R1,TPMMV\n         LA    R7,1(R1,R7)         POINT TO NEXT GENERIC\n         LA    R1,TPSCDSN\n         LR    R3,R4               START OF DS-NAME SCAN\nTPM11    CLC   0(1,R3),0(R1)       TEST UNTIL THEY ARE EQUAL\n         BNE   TPM13               START OF A DIFFERENCE\nTPM12    LA    R3,1(R3)            TO NEXT CHAR\n         CL    R3,TPMMAX           END REACHED?\n         BH    TPM20               YES, MATCH FOUND\n         LA    R1,1(R1)            TO NEXT CHAR\n         B     TPM11\nTPMMV    MVC   TPSCDS(*-*),0(R7)   << EXECUTED >>\nTPM13    CLI   0(R1),C'%'          THE EVERYTHING CHAR?\n         BE    TPM15               YES\n         CLI   0(R1),C'*'          THE SOMESTRING CHAR?\n         BNE   TPM16               NO, NEXT GENERIC\n         CLC   0(2,R1),=C'* '      YES, WHAT FOLLOWS?\n         BE    TPM20               EVERYTHING IS GOOD, MATCH FOUND\nTPM14    CLI   0(R3),C'.'          SCAN TO FIND A POINT\n         BNE   *+L'*+4\n         BCT   R3,TPM12            FOUND, BACK ONE CHAR, CONTINUE\n         LA    R3,1(R3)            TO NEXT CHAR\n         CL    R3,TPMMAX           END REACHED?\n         BL    TPM14               NO, CONTINUE SEARCH\n         B     TPM16               YES, NO POINT FOUND, NEXT GENERIC\nTPM15    CLI   0(R3),C'.'          IS IT A POINT?\n         BE    TPM16               YES, INVALID, NEXT GENERIC\n         CLI   0(R3),C' '          IS IT A BLANK (END)?\n         BNE   TPM12               NO, OK, CONTINUE TO TEST MATCH\nTPM16    CLI   0(R7),FMON          END OF GENERICS?\n         BNE   TPM10               NO, CONTINUE WITH NEXT GENERIC\n         B     TPM30               YES, NO MATCH FOUND\nTPM20    MVI   DSRACF,XRG          SET RACF GENERIC PROTECTED\nTPM21    LA    R2,DSTABL(R2)       ADVANCE IN TABLE\n         CLR   R2,R6               END OF GROUP?\n         BE    TPM31               YES\n         MVC   DSRACF(L'DSRACF),DSRACF-DSTABDS(R5)     COPY RACF STATUS\n         B     TPM21\n         DROP  R2\nTPM30    LR    R2,R6               SKIP TO END OF GROUP\nTPM31    CLI   0(R2),FMOFF         END OF TABLE?\n         BNE   TPM1                NO, CONTINUE\nTPM99   @XE    ,                   GO BACK\n         EJECT\nTPMRG    DC    A(*-*)              HLQ NAMES TABLE CURRENT POINTER\nTPMMAX   DC    A(*-*)\nTPSCDS   DC    AL1(*-*)\nTPSCDSN  DC    CL44' '\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLC001": {"ttr": 11532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x01\\x06\\x01\\x06\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 262, "newlines": 262, "modlines": 0, "user": "SYSPAJA"}, "text": "C001     TITLE 'CLEAN-UP - INVOKE IDCAMS FUNCTION (C001).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nC001    @XS\n*        AT ENTRY :   IDCPARM = IDCAMS FUNCTION INFORMATION REQUEST\n*         AT EXIT :   R15 = IDCAMS RETURN CODE\n         SPACE 1\n         ST    R15,EFSA            RETAIN PREVIOUS S.A.\n         XC    16(4,R15),16(R15)   RESET RETURN CODE\n         LM    R2,R3,IDCDSN\n         CLI   IDCFUN,C'C'         CATALOG REQUEST?\n         BE    IIFC                YES\n         CLI   IDCFUN,C'U'         UNCATALOG REQUEST?\n         BE    IIFU                YES\n         XR    R15,R15             NO\n         B     ERR79               INVALID FUNCTION CODE\n         USING XPDSCT,R3\n         SPACE 1\nIIFC     MVI   EFC1L,L'EFCARD-1\n         MVI   EFC1,C' '\n         MVC   EFC1+1(71),EFC1\n         MVC   EFC1+1(15),=CL15'DEF NVSAM(NAME('\n         MVC   EFC1+16(44),0(R2)\n         LA    R1,EFC1+59\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(3,R1),=CL3') -'\n         MVI   EFC2L,L'EFCARD-1\n         MVI   EFC2,C' '\n         MVC   EFC2+1(71),EFC2\n         MVC   EFC2+9(5),=CL5'DEVT('\n        $DVTYUN XPTY,EFC2+14,MF=(E,EFDVT)\n         LTR   R15,R15\n         BNZ   ERR80               INVALID DEVICE TYPE\n         LA    R1,EFC2+21\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(6,R1),=CL6') VOL('\n         MVC   7(L'XPVOL,R1),XPVOL\n         LA    R1,6+L'XPVOL(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(4,R1),=CL4')) -'\n         MVI   EFC3L,L'EFCARD-1\n         LA    R1,EFC3\n         BAS   R14,EFCTLG\n         MVI   EFC4L,255\n         B     EF0\n         SPACE 1\nIIFU     MVI   EFC1L,L'EFCARD-1\n         MVI   EFC1,C' '\n         MVC   EFC1+1(71),EFC1\n         MVC   EFC1+1(3),=CL3'DEL'\n         MVC   EFC1+5(44),0(R2)\n         LA    R1,EFC1+48\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   2(12,R1),=CL12'NVSAM NSCR -'\n         MVI   EFC2L,L'EFCARD-1\n         LA    R1,EFC2\n         BAS   R14,EFCTLG\n         MVI   EFC3L,255\n         B     EF0\n         SPACE 1\nEFCTLG   MVI   0(R1),C' '\n         MVC   1(71,R1),0(R1)\n         MVC   9(4,R1),=CL4'CAT('\n         L     R15,TBCVOL\n         USING CVLT,R15\nEFCTLG1  CLI   0(R15),FMOFF\n         BE    EFCTLG3\n         CLC   CVLNME,XPCNME\n         BNE   EFCTLG2\n         CLC   CVLVOL,XPCVOL\n         BE    EFCTLG4\nEFCTLG2  LA    R15,CVLL(R15)\n         B     EFCTLG1\nEFCTLG3  OI    EFCTLGSW+1,ON\nEFCTLG4  MVC   13(L'XPCNME,R1),XPCNME\n         LA    R1,12+L'XPCNME(R1)\n         CLI   0(R1),C' '\n         BNE   EFCTLGSW\n         BCT   R1,*-8\nEFCTLGSW NOP   EFCTLG6\n         CLI   CVLPWL,0\n         BNE   EFCTLG7\nEFCTLG5  MVI   1(R1),C')'\n         BR    R14\nEFCTLG6  NI    EFCTLGSW+1,OFF\n         B     EFCTLG5\nEFCTLG7  MVI   1(R1),C'/'\n         MVC   2(L'CVLPW,R1),CVLPW\n         XR    R0,R0\n         IC    R0,CVLPWL\n         DROP  R15\n         AR    R1,R0\n         MVI   2(R1),C')'\n         BR    R14\n         SPACE 1\n         DROP  R3\nEF0      BAS   R14,IDCIAR          ALLOCATE IDCAMS INPUT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR71\n        $PUNCH ,,(R6),MF=(L,EFPUOUT)\n        $UCLOSE (R6),MF=(L,EFCLOUT)\n         TM    WHATS,WHIDIN        STILL OPENED?\n         BZ    EF1                 NO\n         NI    WHATS,255-WHIDIN    YES\n        $UCLOSE MF=(E,EFCLOUT)     CLOSE IT, I WANT RE-USE IT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR71\nEF1      NI    EFSW+1,OFF\n         LA    R2,EFCARD\nEF2     $PUNCH 1(R2),,,MF=(E,EFPUOUT)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR71\nEFSW     NOP   EF3\n         OI    EFSW+1,ON\n         OI    WHATS,WHIDIN        SAY OPENED\nEF3      LA    R2,L'EFCARD(R2)     NEXT CARD\n         CLI   0(R2),255           END?\n         BNE   EF2                 NO, CONTINUE\n         NI    WHATS,255-WHIDIN\n        $UCLOSE MF=(E,EFCLOUT)     CLOSE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR71\n         SPACE 1\n         BAS   R14,IDCOAR          ALLOCATE IDCAMS OUTPUT PRINT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR72\n        $VOPEN WORKD,(R6),MF=(L,EFRDOUT)\n        $VCLOSE (R6),MF=(L,EFCLOUT)\n         TM    WHATS,WHIDOUT       STILL OPENED?\n         BZ    EF10                NO\n         NI    WHATS,255-WHIDOUT   YES\n        $VCLOSE MF=(E,EFCLOUT)     CLOSE IT, I WANT RE-USE IT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR72\nEF10     BAS   R14,XIDCAMS         EXECUTE IDCAMS\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    EF11                YES, LIST IDCAMS OUTPUT PRINT\n         LTR   R15,R15\n         BZ    EF99                BRANCH IF ALL OK\nEF11     L     R14,EFSA\n         ST    R15,16(R14)         STORE RETURN CODE\n         MVI   EFC1,C' '           NOTE - JUST TO USE IT AS CONSTANT\n         MVC   EFC1+1(L'EFC1-1),EFC1      IF NEEDED LATER\n         SPACE 1\n         CVD   R15,WORKD\n         ED    EFPRTT+4(4),WORKD+6\n         TM    WHATS,WHPERR\n         BO    EF12\n        @OUT   EFPRT,=PL2'+40',U\n         B     EF13\nEF12     MVI   EFWTO+4,C' '\n         MVC   EFWTO+5(59),EFWTO+4\n         MVC   EFWTO+4(L'EFPRT+L'EFPRTT-1),EFPRT+1\n        WTO    MF=(E,EFWTO)\nEF13    $VOPEN MF=(E,EFRDOUT)\n         LTR   R15,R15\n         BNZ   ERR72\n         OI    WHATS,WHIDOUT       SAY OPENED\n         CLC   WORKD(4),=AL4(L'LINE)\n         BH    ERR73\n        $VREAD LINE,,MF=(L,EFRDOUT)\nEF30     MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n        $VREAD MF=(E,EFRDOUT)      READ IDCAMS OUTPUT PRINT\n         LTR   R15,R15\n         BM    EF50\n         BNZ   ERR72\n         CLC   LINE(8),=CL8'1IDCAMS'    TITLE LINE?\n         BE    EF30                     YES, SKIP IT\n         LA    R1,LINE+1\n         LA    R2,1\n         LA    R3,LINE+L'LINE-1\n         CLI   0(R1),C' '\n         BNE   EF31\n         BXLE  R1,R2,*-8\n         B     EF30\nEF31     CLC   0(9,R1),=CL9'IDC0001I'   TEST FUNCTION COMPLETED = 0\n         BNE   EF32\n         CLC   55(3,R1),=CL3' 0'\n         BE    EF30\n         B     EF40\nEF32     CLC   0(9,R1),=CL9'IDC0002I'   TEST IDCAMS COMPLETED = 0\n         BNE   EF33\n         CLC   63(3,R1),=CL3' 0'\n         BE    EF30\n         B     EF40\nEF33     CLC   0(3,R1),=CL3'IDC'   TEST ANY IDCAMS INFO'S (IDC...)\n         BE    EF34 YES\n         TM    RUNIND,RUTEST       NO, TEST RUN?\n         BO    EF40                YES, LIST IT\n         B     EF30\nEF34     CLC   3(16,R1),=CL16'0550I ENTRY (A) '\n         BNE   EF40\n         MVI   0(R1),C' '\n         MVC   1(18,R1),0(R1)\nEF40     MVI   LINE,C' '\n         TM    WHATS,WHPERR\n         BO    EF41\n        @OUT   LINE\n         B     EF30+L'EF30\nEF41     MVC   EFWTO+4(60),LINE+1\n        WTO    MF=(E,EFWTO)\n         CLC   EFC1(60),LINE+61\n         BE    EF30+L'EF30\n         MVC   EFWTO+4(60),LINE+61\n        WTO    MF=(E,EFWTO)\n         B     EF30+L'EF30\nEF50     NI    WHATS,255-WHIDOUT   CLOSE IDCAMS OUTPUT PRINT\n        $VCLOSE MF=(E,EFCLOUT)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR72\n         SPACE 1\nEF99    @XE\n         EJECT\nEFDVT   $DVTYUN ,,MF=L\nEFPUOUT $PUNCH ,,,MF=L\nEFRDOUT $VREAD ,,MF=L              ALSO USED BY VOPEN\nEFCLOUT $VCLOSE ,MF=L              ALSO USED BY UCLOSE\n         SPACE 1\nEFSA     DC    F'0'\nEFWTO   WTO    '                                                       C\n                    ',ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n         DC    AL1(L'EFPRT+L'EFPRTT)\nEFPRT    DC    C'0===== IDCAMS : '\nEFPRTT   DC    0CL14' ',CL5'RC = ',XL3'202120',CL6' ====='\nEFCARD   DS    0CL81               INPUT CARDS GENERATION BUFFER\nEFC1L    DC    AL1(0)\nEFC1     DC    CL72' ',CL8'GFUN0001'\nEFC2L    DC    AL1(0)\nEFC2     DC    CL72' ',CL8'GFUN0002'\nEFC3L    DC    AL1(0)\nEFC3     DC    CL72' ',CL8'GFUN0003'\nEFC4L    DC    AL1(0)\nEFC4     DC    CL72' ',CL8'GFUN0004'\nEFC5L    DC    AL1(0)\nEFC5     DC    CL72' ',CL8'GFUN0005'\n         DC    AL1(255)\n         EJECT\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        PRINT  GEN\n         SPACE 1\nXPDSCT   DSECT                     IDCAMS PARM.LIST DESCRIPTION\nXPCNME   DS    CL44                CATALOG NAME\nXPCVOL   DS    CL6                 CATALOG VOLUME SERIAL NUMBER\n         DS    H\nXPTY     DS    XL4                 D.S. VOLUME DEVICE TYPE\nXPVOL    DS    CL6                 D.S. VOLUME SERIAL NUMBER\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLC002": {"ttr": 11780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x00\\xd2\\x00\\xd2\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 210, "newlines": 210, "modlines": 0, "user": "SYSPAJA"}, "text": "C002     TITLE 'CLEAN-UP - USER DATA-SET PROFILE ACTIONS (C002).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nC002    @XS\n* AT ENTRY : R1 ---> ONE BYTE COMMUNICATION TO SELECT ACTION :\n*                        0 - CHANGE ALTER TO UPDATE ACCESS.\n*                        1 - CHANGE OWNER.\n*                        2 - DELETE ALTER ACCESS.\n*                        3 - ADD READ ACCESS FOR GROUP.\n*                    THEN AT EXIT, SET TO INDICATE :\n*                        0 - NORMAL RETURN.\n*                        1 - ALTERNATE RETURN.\n         SPACE 1\n         USING LALNE,R2\n         USING WKDS,R7\n         LR    R3,R1\n         CLI   0(R3),UPMAXN        CONTROL ENTRY\n         BH    UP90\n         XR    R1,R1\n         IC    R1,ZERODS           GET LENGTH OF DSNAME\n         BCTR  R1,0                -1 FOR MOVE\n         MVI   USADS,C' '          CLEAR BEFORE MOVE\n         MVC   USADS+1(L'USADS-1),USADS\n         EX    R1,UPMO             MOVE DATA-SET NAME\n        @FILL  USADS\n         XR    R1,R1\n         IC    R1,0(R3)            SELECT ENTRY\n         MVI   0(R3),0             NORMAL RETURN\n         SLL   R1,2\nUPSW     NOP   UPSS(R1)\n         OI    UPSW+1,ON\n         LA    R15,USER\n         STCM  R15,B'1111',ADOW+20\n         ST    R15,TUSD+16\n         LA    R15,ACL\n         STCM  R15,B'1111',ADSF+20\n         LA    R15,ACCNAM\n         ST    R15,TUS+16\n         B     UPSS(R1)\nUPMO     MVC   USADS(*-*),ZERODSN  << EXECUTED >>\n         SPACE 1\nUPSS     B     UP00\n         B     UP10\n         B     UP20\n         B     UP30\nUPMAXN   EQU   ((*-UPSS)-L'UPSS)/L'UPSS\n         SPACE 1\nUP00     MVC   ACCHNM,LAAC         MOVE NAME\n         TM    RUNIND,RUNORACF     NO RACF ACTION WANTED?\n         BO    UP04                YES, BYPASS\n         MVC   USAOP(L'USAOP),=CL25'ALTER ACCESS CHANGED USER'\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    UP02                YES\n         LA    R0,ZERODS\n         LA    R15,VSNERR\n        ICHEINTY ALTERI,TYPE='DS',ENTRY=(R0),VOLUME=(R15),             C\n               ACTIONS=(ADCH)\n         LTR   R15,R15             TEST COMPLETION\n         BZ    UP01\n         MVC   USALTY(L'USALTY),=CL3'CHG'\n         B     UP31\nUP01     MVC   USARC(L'USARC),=CL6'O.K.'\n         CLI   TUSI+1,0            IS USER ALREADY IN LIST?\n         BE    UP02                YES, IT IS CHANGED\n         MVC   USARC(L'USARC),=CL6'FAILED'\nUP02     TM    STATUS,STUPT\n         BO    UP03\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUP03     MVC   USACHP,ACCHNM\n         MVC   USAVOL,VSNERR\n        @OUT   USADD\nUP04     MVC   LADLM,=CL8'(CHANGE)'\n         B     UP99\n         SPACE 1\nUP10     MVC   USAOP(L'USAOP),=CL25'SELF-OWNER SET - PREVIOUS'\n         MVC   USOWNER(L'USOWNER),WORKVRA+2  GET OWNER OF DATA-SET\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    UP11                YES\n         LA    R0,ZERODS\n         LA    R15,VSNERR\n        ICHEINTY ALTERI,TYPE='DS',ENTRY=(R0),VOLUME=(R15),             C\n               ACTIONS=(ADOW)\n         LTR   R15,R15             TEST COMPLETION\n         BZ    *+L'*+10\n         MVC   USALTY(L'USALTY),=CL3'OWN'\n         B     UP31\n         MVC   USARC(L'USARC),=CL6'O.K.'\n         CLI   TUSO+1,0            IS USER ALREADY IN LIST?\n         BE    UP11                YES, IT IS CHANGED\n         MVC   USARC(L'USARC),=CL6'FAILED'\nUP11     TM    STATUS,STUPT\n         BO    UP12\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUP12     MVC   USACHP,USOWNER\n         MVC   USAVOL,VSNERR\n        @OUT   USADD\n         B     UP99\n         SPACE 1\nUP20     MVC   USAOP(L'USAOP),=CL25'DELETE ALTER TO SELF-USER'\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    UP21                YES\n         LA    R0,ZERODS\n         LA    R15,VSNERR\n        ICHEINTY ALTER,TYPE='DS',ENTRY=(R0),VOLUME=(R15),              C\n               ACTIONS=(ADEL)\n         LTR   R15,R15             TEST COMPLETION\n         BZ    *+L'*+10\n         MVC   USALTY(L'USALTY),=CL3'DEL'\n         B     UP31\n         MVC   USARC(L'USARC),=CL6'O.K.'\n         CLI   TUSD+1,0            IS USER ALREADY IN LIST?\n         BE    UP21                NO, IT IS DELETED\n         MVC   USARC(L'USARC),=CL6'FAILED'\nUP21     TM    STATUS,STUPT\n         BO    UP22\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUP22     MVC   USACHP,USER\n         MVC   USAVOL,VSNERR\n        @OUT   USADD\n         B     UP99\n         SPACE 1\nUP30     MVC   USAOP(L'USAOP),=CL25'ADD READ ACCESS FOR GROUP'\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    UP34                YES\n         LA    R0,ZERODS\n         LA    R15,VSNERR\n        ICHEINTY ALTER,TYPE='DS',ENTRY=(R0),VOLUME=(R15),              C\n               ACTIONS=(ADSF)\n         LTR   R15,R15             TEST COMPLETION\n         BZ    UP33\n         MVC   USALTY(L'USALTY),=CL3'ADD'\nUP31     MVC   USALDS,USADS\n         CVD   R15,WORKD           RETURN CODE\n         UNPK  USALRC,WORKD+6(2)\n         OI    USALRC+1,C'0'\n         MVI   USALAC,C' '\n         CH    R15,=H'36'          BLOCKS ERROR?\n         BNE   *+L'*+8             NO\n         STC   R0,USALAC\n         OI    USALAC,C'0'\n         TM    STATUS,STUPT\n         BO    UP32\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUP32     MVC   USALVOL,VSNERR\n        @OUT   USAL\nUP33     MVC   USARC(L'USARC),=CL6'O.K.'\n         CLI   TUS+1,0             WAS USER ALREADY IN LIST?\n         BE    UP34                NO, IT IS ADDED\n         MVC   USARC(L'USARC),=CL6'FAILED'\nUP34     TM    STATUS,STUPT\n         BO    UP35\n         OI    STATUS,STUPT\n        @OUT   USUPT,=PL2'+40',U\nUP35     MVC   USACHP,ACCNAM\n         MVC   USAVOL,VSNERR\n        @OUT   USADD\n         EJECT\nUP90     MVI   0(R3),1             ALTERNATE RETURN\n         DROP  R2,R7\nUP99    @XE\n         EJECT\nADCH    ICHEACTN FIELD=ACL,FLDATA=(11,ACCH),TESTS=TUSI\nADOW    ICHEACTN FIELD=AUTHOR,FLDATA=(8,*-*),TESTS=TUSO\nADEL    ICHEACTN FIELD=USERID,FLDATA='DEL',TESTS=TUSD\nADSF    ICHEACTN FIELD=ACL,FLDATA=(11,*-*),TESTS=TUS\nTUSI    ICHETEST FIELD=USERID,FLDATA=(8,ACCHNM),COND=EQ\nTUSO    ICHETEST FIELD=AUTHOR,FLDATA=(8,USOWNER),COND=EQ\nTUSD    ICHETEST FIELD=USERID,FLDATA=(8,*-*),COND=EQ\nTUS     ICHETEST FIELD=USERID,FLDATA=(8,*-*),COND=NE\n         SPACE 1\nUSOWNER  DC    CL8' '\nACCH     DS    0CL11               ACCESS LIST ENTRY\nACCHNM   DC    CL8' '\n         DC    AL1(ACEEUPDT)       UPDATE ACCESS\n         DC    XL2'0000'           ACCESS COUNT\n         SPACE 1\n         DC    AL1(USADDL)\nUSADD    DC    CL6' '\nUSADS    DC    CL44' ',C' ('\nUSAVOL   DC    CL6' ',C') '\nUSAOP    DC    CL25' ',C' : '\nUSACHP   DC    CL8' ',C' - '\nUSARC    DC    CL6'O.K.'\nUSADDL   EQU   *-USADD\n         DC    AL1(USALL)\nUSAL     DC    CL3' ',CL3'-- '\nUSALDS   DC    CL44' ',C' ('\nUSALVOL  DC    CL6' ',C') RACF ALTER '\nUSALTY   DC    CL3' ',C' (RC='\nUSALRC   DC    CL2' ',C'/AC='\nUSALAC   DC    CL1' ',C').'\nUSALL    EQU   *-USAL\n         SPACE 1\n        @SERV\n         SPACE 1\n        @COMM\n         SPACE 1\n        ICHRRPF\n         EJECT\n        PRINT  GEN\n        #WKDS\n         SPACE 2\n        #LALNE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLEAN$": {"ttr": 11784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943_\\x00\\x943_\\t \\x00r\\x00r\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-01T00:00:00", "modifydate": "1994-12-01T09:20:00", "lines": 114, "newlines": 114, "modlines": 0, "user": "SYSPAJA"}, "text": "//CLEAN    JOB (........),'INSTALL -CLEAN-UP-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=4M,TIME=1\n/*JOBPARM L=40\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHSVC   CATSR     DASCAN    DAUNTY    DAVALL     *\n//*                DVTYUN    DYNALL    EDITH     GFDATE    ICFS       *\n//*                INSORT    IXTOFMT5  MREAD     VREAD     VTOCD      *\n//*                VTOCQ     TXPRINT   TXPUNCH   TXREAD    TXSNAP     *\n//*                XREFASM                                            *\n//* NOTE  :    IF YOU DON'T HAVE INDEXED VTOC IN YOUR SYSTEM,         *\n//*            YOU MAY :                                              *\n//*            1. IGNORE THE PRE-REQUISITE IXTOFMT5, AND              *\n//*            2. DELETE IT FROM THE INCLUDE SYSADD(...) STATEMENT    *\n//*               IN THE LINK-EDIT STEP (LNK) INPUT.                  *\n//* ---------- ADJUSTMENTS MUST BE DONE BEFORE YOU RUN THIS JOB (SCAN *\n//*            ALL \"->\" OCCURENCES AND SET RIGHT DATA-SETS NAMES).    *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASSM    PROC M=MAIN\n//ASSM    EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=->.SOURCE.FILE2,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(2,1))\n//SYSPRINT  DD UNIT=SYSDA,DSN=&&LIST,SPACE=(CYL,(1,1)),\n//             DCB=(RECFM=FBA,LRECL=121,BLKSIZE=4235),DISP=(,PASS)\n//SYSLIN    DD DSN=->.CLEAN.OBJ.LIBRARY(&M),DISP=OLD\n//SYSIN     DD DSN=->.SOURCE.FILE2(CL&M),DISP=SHR\n//XGEN    EXEC PGM=XREFIN\n//STEPLIB   DD DSN=->.TARGET.LINKLIB,DISP=SHR\n//LISTING   DD DSN=&&LIST,DISP=(OLD,DELETE,DELETE)\n//XREF      DD DSN=->.CLEAN.DATA.LIBRARY,DISP=MOD\n//SYSTERM   DD UNIT=VIO,DSN=&&SYSTERM,SPACE=(CYL,(2,1))\n//SYSPRINT  DD SYSOUT=*\n//        PEND\n//XDEL    EXEC PGM=IEFBR14\n//OBJ       DD DSN=->.CLEAN.OBJ.LIBRARY,DISP=(OLD,DELETE,DELETE)\n//DATA      DD DSN=->.CLEAN.DATA.LIBRARY,DISP=(OLD,DELETE,DELETE)\n//XALL    EXEC PGM=IEFBR14\n//OBJ       DD UNIT=DISK,VOL=SER=......,SPACE=(CYL,(2,1,10)),\n//             DSN=->.CLEAN.OBJ.LIBRARY,DISP=(NEW,CATLG,DELETE),\n//             DCB=(RECFM=FB,BLKSIZE=800,LRECL=80)\n//DATA      DD UNIT=DISK,VOL=SER=......,SPACE=(CYL,(4,1)),\n//             DSN=->.CLEAN.DATA.LIBRARY,DISP=(NEW,CATLG,DELETE),\n//             DCB=(RECFM=FB,BLKSIZE=4740,LRECL=158)\n//*** ------------> ESTIMATED LINES (UP ROUNDED)\n//MAIN    EXEC ASSM            1700\n//SERV    EXEC ASSM,M=SERV     1700\n//A001    EXEC ASSM,M=A001     1000\n//A002    EXEC ASSM,M=A002     1100\n//A003    EXEC ASSM,M=A003      900\n//A004    EXEC ASSM,M=A004      800\n//A005    EXEC ASSM,M=A005     1100\n//A006    EXEC ASSM,M=A006      600\n//A007    EXEC ASSM,M=A007     1500\n//A008    EXEC ASSM,M=A008     1600\n//A009    EXEC ASSM,M=A009     1300\n//A010    EXEC ASSM,M=A010     1000\n//A011    EXEC ASSM,M=A011     1100\n//A012    EXEC ASSM,M=A012     1400\n//A013    EXEC ASSM,M=A013     1100\n//A014    EXEC ASSM,M=A014     1300\n//A015    EXEC ASSM,M=A015     1200\n//A099    EXEC ASSM,M=A099     1000\n//B001    EXEC ASSM,M=B001     1400\n//B002    EXEC ASSM,M=B002      800\n//B003    EXEC ASSM,M=B003     1200\n//B004    EXEC ASSM,M=B004      400\n//B005    EXEC ASSM,M=B005      800\n//B006    EXEC ASSM,M=B006     1100\n//B007    EXEC ASSM,M=B007     1300\n//B008    EXEC ASSM,M=B008     1100\n//B009    EXEC ASSM,M=B009     1100\n//B010    EXEC ASSM,M=B010     1500\n//B011    EXEC ASSM,M=B011      900\n//B012    EXEC ASSM,M=B012      700\n//B013    EXEC ASSM,M=B013      600\n//C001    EXEC ASSM,M=C001     1000\n//C002    EXEC ASSM,M=C002     1000\n//XREF    EXEC PGM=XREFOUT,\n//             PARM='ONLY/CLEAN-UP MAINTENANCE PROCESSING PROGRAM'\n//STEPLIB   DD DSN=->.TARGET.LINKLIB,DISP=SHR\n//SORTLIB   DD DSN=SYS1.SORTLIB,DISP=SHR\n//SORTWK01  DD UNIT=SYSDA,SPACE=(CYL,(15),,CONTIG)\n//SORTWK02  DD UNIT=SYSDA,SPACE=(CYL,(15),,CONTIG)\n//SORTWK03  DD UNIT=SYSDA,SPACE=(CYL,(15),,CONTIG)\n//XREF      DD DSN=->.CLEAN.DATA.LIBRARY,DISP=OLD\n//REWRITE   DD DSN=*.XREF,DISP=OLD\n//SYSTERM   DD SYSOUT=*\n//SYSPRINT  DD SYSOUT=*       EST. LINES = 3500 / 1100 (IF ONLY/)\n//LNK     EXEC PGM=HEWL,PARM='XREF,LIST',COND=(4,LT)\n//SYSLMOD   DD DSN=->.TARGET.LINKLIB,DISP=OLD\n//SYSOBJ    DD DSN=->.CLEAN.OBJ.LIBRARY,DISP=SHR\n//SYSADD    DD DSN=->.TARGET.RTNLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD *\n  INCLUDE      SYSOBJ(MAIN,SERV,A099)\n  INCLUDE      SYSOBJ(A001,A002,A003,A004,A005)\n  INCLUDE      SYSOBJ(A006,A007,A008,A009,A010)\n  INCLUDE      SYSOBJ(A011,A012,A013,A014,A015)\n  INCLUDE      SYSOBJ(B001,B002,B003,B004,B005)\n  INCLUDE      SYSOBJ(B006,B007,B008,B009,B010)\n  INCLUDE      SYSOBJ(B011,B012,B013)\n  INCLUDE      SYSOBJ(C001,C002)\n  INCLUDE      SYSADD(READ,PRINT,PUNCH,SNAP,MREAD)\n  INCLUDE      SYSADD(VREAD,EDITH,GFDATE,INSORT)\n  INCLUDE      SYSADD(DASCAN,DAUNTY,DAVALL,DYNALL,DVTYUN)\n  INCLUDE      SYSADD(VTOCQR,IXTOFMT5,VTOCDR,CATSR,ICFSR)\n  SETCODE      AC(1)\n  ENTRY   MAIN\n  NAME    CLEAN(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLEAN@": {"ttr": 11787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x872\\x7f\\x00\\x872\\x7f\\x14E\\x02\\xde\\x02\\xde\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-23T00:00:00", "modifydate": "1987-11-23T14:45:00", "lines": 734, "newlines": 734, "modlines": 0, "user": "SYSPAJA"}, "text": "1   05/10/87\n                                                      CLEAN     1/20.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *    D I S K S    C L E A N    U P    * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       MAINTENANCE  PROCESSING       * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This program is part of our \"DAILY\" procedure.\n  ---------    Its intent is to verify the match between DASD volumes\n  contents (VTOCs), O.S. and/or ICF catalogs contents and RACF discrete\n  and/or generic profiles contents, then clean or correct all erroneous\n  and undesirable references. Sometimes, because of complex combinations\n  encountered, the recovery fails or the unusual situation is signaled\n  by \"intervention required\", which informs about a manual correction\n  necessity to solve these cases. Note that also a wrong status between\n  catalogs, RACF and DASD may need more than one execution of the\n  program before the complete recovery. Finally, during VTOC's read,\n  an elementary data-sets accounting may be collected.\n\n  Call of the program :\n  ---------------------\n\n         //MAINT  EXEC PGM=CLEAN,PARM=...\n         //SYSCMD   DD ... Optional commands cards ...\n         //SYSIN    DD ... Control cards ...\n         //SYSPRINT DD SYSOUT=A    (Action list)\n         //SYSLIST  DD SYSOUT=A    (Detail list)\n         //SYSSNAP  DD SYSOUT=A    (Optional SNAP requests)\n         //SYSUDUMP DD SYSOUT=A    (Optional)\n\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  Restriction :    Be carefull when not running alone this program\n  -------------    in the system, unpredictable results may occurs,\n                   unless all active jobs are execution freezed.\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  EXEC parm. field description : a comma must separate the requests.\n  ------------------------------\n\n         T or TEST : normal run, but force all modifications to\n               VTOC's, catalogs and RACF to be bypassed, suppress\n               the header and trailer page print, and, when an\n               error is detected, abends (U0033) with dump (SYSUDUMP\n               or SYSABEND DD-card is needed).\n\n         C or CHECK : reduced run, it allows the input data to be\n               scanned only (syntax checker), and suppress the header\n               and trailer page print. Using this keyword, the TEST\n               (unless dump desired) and SKIP options are not needed\n               (if coded, they are just scanned).\n1   05/10/87\n                                                      CLEAN     2/20.\n\n  Commands cards : optional (SYSCMD DD-card)\n  ================\n\n     Processed by : RVNAMES (A003).\n\n     Coding rules :\n               Columns 1 to 72 of cards can be used for operation\n               commands coding, no fixed columns nor continuation\n               are provided, and an asterisk (*) in column 1 is\n               interpreted as a comment card in the input stream.\n\n\n  Control cards :\n  ===============\n\n         The control cards must be given by group in the same order\n         as they are described below, each group starting always on\n         a new card. No comment cards are provided.\n1   05/10/87\n                                                      CLEAN     3/20.\n\n  1. Options selection : optional.\n  ----------------------\n\n     Processed by : B001.\n\n     Coding rules :\n               Keywords and eventual arguments are accepted anywhere\n               from column 1 up to column 72 included. They must be\n               separated each from the other by at least one blank and\n               they can be in any order (the last one is in effect if\n               there is some keywords conflict).\n\n     Keywords :\n         - LISTALL\n               complete detail list (SYSLIST) request. All the\n               catalogs entries, the data-sets status and the RACF\n               user's/data-sets accesses, group's/data-sets accesses\n               are listed.\n\n         - DS-SHORT\n               only the status of data-sets with actions scheduled are\n               listed (SYSLIST).\n               Note : this is the default option.\n\n         - DS-SHGDG\n               the status of data-sets with actions scheduled and the\n               GDG's information are listed (SYSLIST).\n\n         - DS-VSAM\n               the status of data-sets with actions scheduled, the\n               GDG's and all VSAM information are listed (SYSLIST).\n\n         - DS-SKOFF\n               suppress the list (SYSLIST) of all references to\n               unprocessed volumes.\n\n         - CT-SHORT\n               suppress the list (SYSLIST) of the catalogs dsname's\n               and O.S. CVOL pointers entries.\n               Note : this is the default option.\n\n         - NL-USERS ( ... ... )\n               suppress the list (SYSLIST) of the RACF user's/data-\n               sets accesses profiles, unless the actual day name\n               matches one specified in the eventual following list\n               ( ... ... ). Value(s) where ... may be : MON, TUE,\n               WED, THU, FRI, SAT and SUN.\n\n         - NL-GROUPS ( ... ... )\n               suppress the list (SYSLIST) of the RACF group's/\n               data-sets accesses profiles, unless the actual day\n               name matches one specified in the eventual following\n               list ( ... ... ). Value(s) where ... may be : MON,\n               TUE, WED, THU, FRI, SAT and SUN.\n1   05/10/87\n                                                      CLEAN     4/20.\n\n         - COPY ( ...Data-set name... )\n         - COPY ( ...Data-set name... / ...START Command... )\n               generate a copy of the RACF user's/data-sets accesses\n               and the RACF group's/data-sets accesses (SYSLIST)\n               in a new data-set automatically created with the\n               specified name. Separated by a slash (/), an eventual\n               START command may be given, which will be internally\n               issued at the end (this allows the start of another job\n               to handle the copy data-set).\n               Note : this option is under the control of NOLIST,\n                      NL-USERS and NL-GROUPS options.\n               Coding rules : the data-set name and the START command\n                      may be specified on separate cards, but each must\n                      be complete within the 72 columns range.\n\n         - COPYVOL ( ... )\n               volume serial number where the copy data-set will be\n               allocated.\n\n         - NOLIST\n               suppress the detail list (SYSLIST).\n\n         - NOACCOUNT\n               suppress the accounting processing.\n\n         - NOSCRATCH\n               normal run, but bypass the scratch of data-sets\n               (catalog , RACF and VTOC actions are executed).\n\n         - NOCATALOG\n               normal run, but bypass any catalog change (data-set,\n               RACF and VTOC actions are executed).\n\n         - NORACF\n               normal run, but bypass any RACF profiles change\n               (data-set, catalog and VTOC actions are executed).\n\n         - NOSET\n               normal run, but bypass any VTOC's change (data-set,\n               catalog and RACF actions are executed).\n\n         - ONLY\n               force the analysis of only those volumes specified\n               as eligible (see EL.VOL.).\n1   05/10/87\n                                                      CLEAN     5/20.\n\n         - TIME\n               print the TIME-OF-DAY at start of module's (process)\n               execution.\n\n         - CHECK\n               reduced run allowing the input data to be scanned\n               only (syntex checker). Using this option, the TEST\n               (unless dump desired) and SKIP options are not needed\n               (if coded, they are just scanned).\n\n         - TEST\n               normal run, but force all modifications to VTOC's,\n               catalogs and RACF to be bypassed, and, when an\n               error is detected, abends (U0033) with dump (SYSUDUMP\n               or SYSABEND DD-card is needed).\n\n         - SNAP ( ... )\n               snap requests list, where ... indicates at which\n               processing point and may be :\n                   TWA : at tables addresses and lengths (A001).\n                   RRD : at RACF/DS definitions (A007).\n                   LOC : at locate of dsname (A008).\n                   OBT : at obtain of dsname (A008).\n                   RUS : at RACF/USR processing (A014).\n                   RDS : at RACF/DS-USR processing (B007).\n                   RGR : at RACF/GRP processing (A015).\n                   RCO : at RACF/CON processing (B006).\n                   GDS : at RACF/DS-GRP processing (B008).\n                   RRO : at RACF/DS owner definitions (A007).\n                   RAE : at RACF/DS owner ALTER error (A007).\n                   GCV : at locate catalog volume (B005).\n                   ECV : at locate catalog volume not found (B005).\n                   SCR : at scratch data-set - RACF access (A013).\n                   INX : at locate main index (A010).\n                   DBG : all arrays on error (MAIN).\n               Note : SYSSNAP DD-card is needed.\n1   05/10/87\n                                                      CLEAN     6/20.\n\n         - NEV .. NCV .. NNC .. NGV .. NDV .. NDD .. NIX .. NSK ..\n           NRE .. NW1 .. NW2 .. NBR .. NWI .. :\n               where .. is a number (from 1 to 5 digits) which allows\n               dynamic change of the default values assigned to the\n               corresponding assembly variables (see below).\n\n               --------------------------\n                     Default sizes.\n               --------------------------\n\n               NEV  :  50        max.no. of eligible volumes\n               NCV  :  50        max.no. of catalog volumes\n               NNC  :  50        max.no. of N-CAT. volumes\n               NGV  :  2000      max.no. of CVOL pointers\n               NDV  :  100       max.no. of not-declared volumes\n               NDD  :  100       max.no. of DDname's in table\n               NIX  :  200       max.no. of null indexes\n               NSK  :  50        max.no. of skip names\n               NRE  :  10000     max.no. of DSname's in table\n               NW1  :  2000      1st RACF work area length (bytes)\n               NW2  :  400       2nd RACF work area length (bytes)\n               NBR  :  50        max.no. of bypass RACF names\n               NWI  :  100       no. of cards in idcams single array\n1   05/10/87\n                                                      CLEAN     7/20.\n\n  2. Skip processing requests : optional.\n  -----------------------------\n\n     Processed by : A002.\n\n     Keyword :\n         - SKIP ( XXXXXX XXXXXX ... )\n               where XXXXXX are names of modules (process) which\n               execution is to be bypassed.\n               Note : be carefull when using this option,\n                      unpredictable results may occurs (like\n                      control cards order misplaced).\n\n     Coding rules :\n               The modules names are accepted anywhere from column\n               1 up to column 72 included. They must be separated\n               each from the other by at least one blank, and may be\n               from 1 to 8 characters long. A name must be always\n               complete within the 72 columns range.\n1   05/10/87\n                                                      CLEAN     8/20.\n\n  3. Bypass any RACF process : optional.\n  ----------------------------\n\n     Processed by : A002.\n\n     Purpose : Eventually add ALTER access for owner in the D.M.S.\n               archived data-sets profiles in order to allow the\n               users DRESTORE requests successively complete.\n\n     Keyword :\n         - BYPRACF ( XXXXXX / NOLIST  XXXXXX / N\n                     XXXXXX / SKIP  XXXXXX / S  XXXXXX  ... )\n               where XXXXXX are data-sets names prefixes for which the\n               normal RACF processing is to be replaced by an eventual\n               add ALTER access of owner in the data-set's access list\n               profiles.\n               Optionally, may be specified after a prefix :\n                    - /NOLIST or /N to suppress these actions be\n                      signal on the standard output list.\n                    - /SKIP or /S to skip the RACF processing\n                      relative to it.\n               i.e. : BYPRACF ( DMS. )\n                      will apply the alternate process to the data-\n                      sets profiles having the name starting by the\n                      prefix \"DMS.\".\n\n     Coding rules :\n               The data-sets names prefixes are accepted anywhere\n               from column 1 up to column 72 included. They must be\n               separated each from the other by at least one blank\n               (maximum is 44 characters long). A name must be always\n               complete within the 72 columns range.\n1   05/10/87\n                                                      CLEAN     9/20.\n\n  4. Account requests : optional.\n  ---------------------\n\n     Processed by : A002.\n\n     Keyword :\n         - ACCOUNT ( Y... / ZZZ ZZZ ... ) or\n         - ACCOUNT ( / ZZZ ZZZ ... ) or\n         - ACCOUNT * :\n               where ZZZ are member names of the cataloged partitioned\n               data-set Y... which will contain the desired accounting\n               requirements control statements. If Y... is omitted,\n               the previous data-set name is used.\n               The use of ACCOUNT * form assumes that the accounting\n               requirements control statements coding follows in the\n               current input-stream. The end of these requirements is\n               detected by another ACCOUNT keyword or the EL.VOL.\n               next mandatory group keyword in a new control card.\n\n     Coding rules :\n               The member name may be from 1 to 8 characters long, and\n               must be always complete within the 72 columns range.\n\n         Accounting requirements control statements :\n         --------------------------------------------\n\n         Coding rules :\n\n         The request statements are free format, they may start\n         anywhere from column 1 up to column 72 included of the\n         cards, and a card may contain more than one statement.\n         Each statement is composed of a command and eventually\n         operands as described in commands, and must be always\n         complete within the 72 columns range, thus no continuation\n         is provided ,but a command may be repeated to supply all\n         requirements. At least one blank must separate statements,\n         commands and operands.\n1   05/10/87\n                                                      CLEAN    10/20.\n\n         Commands :\n\n         VOLUME ( ... ... ... )      : declare all the VOLUME SERIAL\n         V                             NUMBERs for account processing.\n                                       The VOLUME SERIAL NUMBERs may\n                                       be from 1 to 6 characters long\n                                       (when shorter than 6 characters\n                                       it means a group of volumes,\n                                       which SERIAL NUMBERs obviously\n                                       start by this prefix).\n\n         JUMP ( ... ... ... )        : bypass accounting processing at\n         J                             predetermined days. The day's\n                                       list is accepted by date DDMMYY\n                                       or by day name (MON, TUE, WED,\n                                       THU, FRI, SAT and SUN).\n\n         LIST                        : accounting processing data-sets\n         L                             full list (SYSLIST). This is\n                                       also forced by LISTALL option.\n\n         ACCVOL ( ... )              : volume serial number where the\n         A                             day-accounting data-set will\n                                       be allocated.\n\n         PREFIX ( ... )              : DS-name first level index to\n         P                             use for the day-accounting\n                                       data-set.\n\n         Accounting cards description (ACDSECT in B003) :\n\n         Col.  1 -  5 : date (year/day in the form : YYDDD)\n         Col.  6 - 49 : data-set name\n         Col. 50 - 55 : volume serial number\n         Col. 56 - 57 : volume type (two hexadecimal digit)\n         Col. 58 - 62 : number of tracks/day\n         Col. 63 - 80 : not used (blanks)\n1   05/10/87\n                                                      CLEAN     11/20.\n\n  5. Eligible volumes names : mandatory.\n  ---------------------------\n\n     Processed by : RVNAMES (A003).\n\n     Keyword :\n         - EL.VOL. ( XXXXXX XXXXXX ... )\n               where XXXXXX are VOLUME SERIAL NUMBER names of the\n               disks to be analyzed.\n\n     Coding rules :\n               The VOLUME SERIAL NUMBER names are accepted anywhere\n               from column 1 up to column 72 included. They must be\n               separated each from the other by at least one blank,\n               and may be from 1 to 6 characters long (when shorter\n               than 6 characters it means a group of volume serial\n               numbers, obviously starting by this prefix). A name\n               must be always complete within the 72 columns range.\n1   05/10/87\n                                                      CLEAN     12/20.\n\n  6. O.S. catalog volumes names : mandatory.\n  -------------------------------\n\n     Processed by : RVNAMES (A003).\n\n     Keyword :\n         - CAT.VOL. ( XXXXXX XXXXXX ...\n                      XXXXXX / Y... XXXXXX ... / Y... ... )\n               where XXXXXX is the form to indicate the VOLUME SERIAL\n               NUMBER names of the disks containing an O.S. catalog\n               (data-set name is SYSCTLG, thus known), and XXXXXX /\n               Y... is the form to indicate the VOLUME SERIAL NUMBER\n               names of the disks containing an ICF catalog (data-set\n               name is Y...).\n\n     Coding rules :\n               The VOLUME SERIAL NUMBER names are accepted anywhere\n               from column 1 up to column 72 included. They must be\n               separated each from the other by at least one blank,\n               and must be 6 characters long. A data-set name is 44\n               characters long at maximum. A name, eventually followed\n               by a data-set name (ICF), must be always complete\n               within the 72 columns range.\n1   05/10/87\n                                                      CLEAN     13/20.\n\n  7. No-Locate requests : optional.\n  -----------------------\n\n     Processed by : LOCATE (A008).\n\n     Keyword :\n         - N-LOC.VOL. ( Y... / XXXXXX XXXXXX ... ) or\n         - N-LOC.VOL. ( / XXXXXX XXXXXX ... ) or\n         - N-LOC.VOL. ( * XXXXXX ... ... ... ) :\n               where XXXXXX are VOLUME SERIAL NUMBER names also used\n               as member names (prefixed by the character L : LXXXXXX)\n               of the cataloged partitioned data-set Y... which will\n               contain the data-set names for which the eventual\n               locate is to be skiped when the specified volume is\n               not on-line (these data-sets are marked as exempted).\n               If Y... is omitted, the previous data-set name is used.\n               The asterisk (*) form assumes the data-set names follow\n               the volume serial number name (XXXXXX) in the current\n               input-stream. The member or input-stream may contain\n               complete or generic data-set names, specified as below :\n                    1) AAAA.BBBB.CCCC : an eventual locate of this\n                                        data-set is bypassed.\n                    2) AAAA./ : an eventual locate of any data-sets\n                                starting with the prefix AAAA. is\n                                bypassed.\n                    The data-sets names or prefixes must be separated\n                    each from the other by at least one blank (maximum\n                    is 44 characters long), and they must be always\n                    complete within the 72 columns range.\n               The purpose is to skip the MOUNT request of a volume\n               containing a VSAM-catalog which is needed to locate\n               data-sets residing on analyzed volumes (eligibles).\n\n     Coding rules :\n               The VOLUME SERIAL NUMBER names are accepted anywhere\n               from column 1 up to column 72 included. They must be\n               separated each from the other by at least one blank,\n               and must be 6 characters long. A name must be always\n               complete within the 72 columns range.\n1   05/10/87\n                                                      CLEAN     14/20.\n\n  8. Scratch not-cataloged data-sets on volumes names : optional.\n  -----------------------------------------------------\n\n     Processed by : SPECREQ (A009).\n\n     Keyword :\n         - N-CAT.VOL. ( XXXXXX XXXXXX ... )\n               where XXXXXX are VOLUME SERIAL NUMBER names of the\n               disks where any not-cataloged data-set is to be\n               scratched.\n\n     Coding rules :\n               The VOLUME SERIAL NUMBER names are accepted anywhere\n               from column 1 up to column 72 included. They must be\n               separated each from the other by at least one blank,\n               and may be from 1 to 6 characters long (when shorter\n               than 6 characters it means a group of volume serial\n               numbers, obviously starting by this prefix). A name\n               must be always complete within the 72 columns range.\n1   05/10/87\n                                                      CLEAN     15/20.\n\n  9. Special requests : optional.\n  ---------------------\n\n     Processed by : SPECREQ (A009).\n\n     Keywords :\n         - SCRATCH ( XXXXXX XXXXXX ... ) :\n               where XXXXXX are VOLUME SERIAL NUMBER names of the disks\n               to fully scratch, delete catalog and RACF references.\n               Note : SCRATCH of an off-line disk means delete all the\n                      catalog and RACF references to this volume serial\n                      number.\n\n         - EXEMPT ( Y... / XXXXXX XXXXXX ... ) or\n         - EXEMPT ( / XXXXXX XXXXXX ... ) or\n         - EXEMPT ( * XXXXXX ... ... ... ) :\n               where XXXXXX are VOLUME SERIAL NUMBER names also used\n               as member names (prefixed by the character E : EXXXXXX)\n               of the cataloged partitioned data-set Y... which will\n               contain the data-set names for which any action is to\n               be skiped (this apply only on the specified volume).\n               If Y... is omitted, the previous data-set name is used.\n               The asterisk (*) form assumes the data-set names follow\n               the volume serial number name (XXXXXX) in the current\n               input-stream. The member or input-stream may contain\n               complete or generic data-set names, specified as below :\n                    1) AAAA.BBBB.CCCC : any action on this data-set is\n                                        bypassed.\n                    2) AAAA./ : any actions on data-sets starting with\n                                the prefix AAAA. are bypassed.\n                    The data-sets names or prefixes must be separated\n                    each from the other by at least one blank (maximum\n                    is 44 characters long), and they must be always\n                    complete within the 72 columns range.\n               An EXEMPT request overrides always a SCRATCH request.\n\n     Coding rules :\n               The VOLUME SERIAL NUMBER names are accepted anywhere\n               from column 1 up to column 72 included. They must be\n               separated each from the other by at least one blank,\n               and may be from 1 to 6 characters long (when shorter\n               than 6 characters it means a group of volume serial\n               numbers, obviously starting by this prefix). A name\n               must be always complete within the 72 columns range.\n1   05/10/87\n                                                      CLEAN     16/20.\n\n  Modules (processes) names MAP and FUNCTION :\n  --------------------------------------------\n\n         MAIN    - Clean-up maintenance processing.\n\n         SERV    - Clean-up services.\n                   - C001 : invoke IDCAMS function.\n\n         A001    - Initialization : parm. field, STAE exit, time/date,\n                   options and build tables space.\n                   - B001 : read selected options.\n\n         A002    - Initialization (cont'd) : skip, bypass RACF, ACC.\n                   requests and determine if account must be done.\n                   - B002 : read accounting requirements.\n\n         RVNAMES - Read eligible and catalog volumes names, send\n                   eventual supplied operators commands (A003).\n\n         ALLOCV  - Allocate volumes (A004).\n\n         RVTOCS  - Read VTOC's contents and eventually account (A005).\n                   - B003 : data-sets accounting.\n                            - C001 : invoke IDCAMS function.\n\n         RCATALS - Read catalogs contents (A006).\n                   - B009 : O.S. catalogs.\n                   - B010 : ICF catalogs.\n                   - B004 : sort dsname's table.\n\n         RRACFDS - Read RACF contents (discrete/generic data-sets\n                   profiles) and apply owner's (A007).\n                   Alternate process apply or skip (discrete only) :\n                        - add ALTER access for owner if absent.\n                        - change to ALTER access for owner if it was\n                          different.\n                   - B004 : sort dsname's table.\n\n         LOCATE  - Locate data-sets through the master catalog (A008).\n                   - B004 : sort dsname's table.\n\n         SPECREQ - Schedule N-CAT./special requests (A009).\n                   - B013 : RACF generic profiles process.\n\n         DECIDE  - Controls and decisions make-up (A010).\n\n         LISTDST - List data-sets table (A011).\n1   05/10/87\n                                                      CLEAN     17/20.\n\n         RACFRCV - RACF inconsistency (discrete profiles only)\n                   recovery processing (A012).\n\n         SCRUNC  - Scratch/uncatalog processing (A013).\n                   - B011 : Generate IDCAMS statements.\n                   - B012 : Execute IDCAMS.\n\n         RACFUSR - RACF user's access list and recovery (A014).\n                   - B005 : Locate catalog volume.\n                   - B006 : RACF connect's list.\n                   - B007 : RACF user data-sets list and normal\n                            process apply for discrete profiles\n                            only (C002 - profile actions) :\n                            - change any ALTER access to UPDATE\n                              access.\n                            - change owner if not itself (allows\n                              DMS restore).\n                            - delete ALTER access for self-user.\n                            - only if GRPACC, add READ access for\n                              group if absent.\n\n         RACFGRP - RACF group's access list (A015).\n                   - B005 : locate catalog volume and check list.\n                   - B008 : RACF group data-sets list.\n\n         A099    - Termination : close, release and free all.\n                   - C001 : invoke IDCAMS function.\n1   23/11/87\n                                                      CLEAN     18/20.\n\n         Follows hereafter some examples showing the flexibility in\n  executing the CLEAN program :\n\n  1. Standard \"DAILY\" execution (Main System) :\n  ---------------------------------------------\n\n   - Input-stream (from SYSIN) :\n         TIME  NOACCOUNT  DS-SHGDG  NL-USERS ( MON )  NL-GROUPS ( MON )\n         COPY         ( S32DOWE.WEEKLY.LIST / S AUTO,M=WEEKLY )\n         BYPRACF      ( DMS. / NOLIST )\n         EL.VOL.      ( CSPOOL  CSTOR   CMVS    CLIB    USER   )\n         CAT.VOL.     ( CMVS02 / CATALOG.CMVS02\n                        CLIB01 / UCAT.CLIB01\n                        CLIB02 / UCAT.CLIB02\n                        CLIB03 / UCAT.CLIB03\n                        CLIB05 / UCAT.CLIB05\n                        CLIB06 / UCAT.CLIB06 )\n         N-CAT.VOL.   ( USER   )\n         EXEMPT       ( * CSTOR  SYSDMS.WORKFILE )\n         EXEMPT       ( * CSTOR  SYSDMS.COPY )\n         EXEMPT       ( * USER   BACKUP.LOGREC./ )\n         EXEMPT       ( * USER   BACKUP.SYSLOG./ )\n         SCRATCH      ( CSTOR\n                        ... Any undesirable references ...     )\n\n  2. Reduced \"DAILY\" execution (Main System) :\n  --------------------------------------------\n\n   - Input-stream (from SYSIN) :\n         TIME  DS-SHGDG  NOACCOUNT  ONLY\n         SKIP         ( RCATALS RACFUSR RACFGRP )\n         BYPRACF      ( DMS. / SKIP )\n         EL.VOL.      ( CSTOR   CMVS   )\n         CAT.VOL.     ( )\n         EXEMPT       ( * CSTOR  SYSDMS.WORKFILE )\n         EXEMPT       ( * CSTOR  SYSDMS.COPY )\n         EXEMPT       ( * USER   BACKUP.LOGREC./ )\n         EXEMPT       ( * USER   BACKUP.SYSLOG./ )\n         SCRATCH      ( CSTOR  )\n1   23/11/87\n                                                      CLEAN     19/20.\n\n  3. Scratch the temporary storages volumes :\n  -------------------------------------------\n\n   - Input-stream (from SYSIN) :\n         TIME  NOACCOUNT  NORACF\n         SKIP         ( RCATALS RRACFDS RACFRCV RACFUSR RACFGRP )\n         EL.VOL.      ( CSTOR  )\n         CAT.VOL.     ( )\n         EXEMPT       ( * CSTOR  SYSDMS.WORKFILE )\n         EXEMPT       ( * CSTOR  SYSDMS.COPY )\n         EXEMPT       ( * USER   BACKUP.LOGREC./ )\n         EXEMPT       ( * USER   BACKUP.SYSLOG./ )\n         SCRATCH      ( CSTOR  )\n\n  4. Clear all references to off-line or unexistant volume(s) :\n  -------------------------------------------------------------\n\n   - Input-stream (from SYSIN) :\n         TIME  DS-SKOFF  NOACCOUNT  NOSET  NL-USERS  NL-GROUPS\n         SKIP         ( LOCATE RACFRCV RACFUSR RACFGRP )\n         BYPRACF      ( DMS. / SKIP )\n         EL.VOL.      ( CMVS02  CLIB01  CLIB02\n                        CLIB03  CLIB05  CLIB06 )\n         CAT.VOL.     ( CMVS02 / CATALOG.CMVS02\n                        CLIB01 / UCAT.CLIB01\n                        CLIB02 / UCAT.CLIB02\n                        CLIB03 / UCAT.CLIB03\n                        CLIB05 / UCAT.CLIB05\n                        CLIB06 / UCAT.CLIB06 )\n         SCRATCH      ( CSTOR2 )\n\n  5. Produce only RACF user's/group's list :\n  ------------------------------------------\n\n   - Input-stream (from SYSIN) :\n         TEST  NOACCOUNT  NORACF\n         SKIP         ( RVNAMES ALLOCV RVTOCS RCATALS RRACFDS LOCATE\n                        SPECREQ DECIDE LISTDST RACFRCV SCRUNC )\n         BYPRACF      ( DMS. / NOLIST )\n         EL.VOL.\n1   05/10/87\n                                                      CLEAN     20/20.\n\n  6. Execute only the account processing :\n  ----------------------------------------\n\n   - Input-stream (from SYSIN) :\n         TEST\n         SKIP         ( RCATALS RRACFDS LOCATE SPECREQ DECIDE\n                        LISTDST RACFRCV SCRUNC RACFUSR RACFGRP )\n         ACCOUNT      *\n                      VOLUME ( USER   )\n         EL.VOL.      ( CMVS02  CLIB01  CLIB02\n                        CLIB03  CLIB05  CLIB06  USER   )\n         CAT.VOL.     ( CMVS02 / CATALOG.CMVS02\n                        CLIB01 / UCAT.CLIB01\n                        CLIB02 / UCAT.CLIB02\n                        CLIB03 / UCAT.CLIB03\n                        CLIB05 / UCAT.CLIB05\n                        CLIB06 / UCAT.CLIB06 )\n\n  7. Execute only the RACF owner processing :\n  -------------------------------------------\n\n   - Input-stream (from SYSIN) :\n         NOACCOUNT\n         SKIP         ( RVNAMES ALLOCV RVTOCS RCATALS LOCATE SPECREQ\n                        DECIDE LISTDST RACFRCV SCRUNC RACFUSR RACFGRP )\n         BYPRACF      ( DMS. / NOLIST )\n         EL.VOL.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLMAC": {"ttr": 12289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\to\\x00\\x90\\to\\x125\\x06\\x17\\x06\\x17\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-06T00:00:00", "modifydate": "1990-04-06T12:35:00", "lines": 1559, "newlines": 1559, "modlines": 0, "user": "SYSPAJA"}, "text": "         MACRO           ACD FORMAT.\n        #ACD   &R=YES\n         SPACE 1\n*        ACCOUNTING CARD DESCRIPTION.\n*        ----------------------------\n         SPACE 1\nACDSECT  DSECT\n         SPACE 1\nACDATE   DS    CL5 .               DATE (YYDDD).\nACDSN    DS    CL44 .              DATA-SET NAME.\nACVLS    DS    CL6 .               VOLUME SERIAL NUMBER.\nACTYP    DS    CL2 .               DIRECT-ACCESS VOLUME TYPE.\nACTRKS   DS    CL5 .               DATA-SET SPACE (TRACKS UNITS).\nACFILL   EQU   80-(*-ACDSECT) .\n         DS    (ACFILL)C' ' .      NOT USED(BLANKS).\n         SPACE 1\nACLGTH   EQU   *-ACDSECT .         LENGTH OF CARD.\n         AIF   ('&R' EQ 'NO').A\n         SPACE 1\n&SYSECT  CSECT  .                  RESTORE ORIGINAL CSECT.\n.A       SPACE 2\n         MEND\n         MACRO\n        #BYPRDS     &DUMMY\nBYPRDS   DSECT           BYPRACF TABLE ELEMENT DESCRIPTION. ----------\n         SPACE 1\nBYPRLG   DS    XL1       LENGTH OF PREFIX\nBYPRDC   DS    XL3       DISCRETE COUNT\nBYPRFL   DS    XL1       FLAGS\nBYPRGC   DS    XL3       GENERIC COUNT\nBYPRL    EQU   X'01'               BYPASS RACF - NOLIST FLAG\nBYPRS    EQU   X'02'               BYPASS RACF - SKIP FLAG\nBYPRPX   DS    CL44      PREFIX (VARIABLE LENGTH)\n         MEND\n         MACRO\n        #DEFSZ &DUMMY\n*              --------------------------\n*                    DEFAULT SIZES.\n*              --------------------------\n         SPACE 1\nNEV      EQU   50        MAX. NO. OF ELIGIBLE VOLUMES\nNCV      EQU   50        MAX. NO. OF CATALOG VOLUMES\nNNC      EQU   50        MAX. NO. OF N-CAT. VOLUMES\nNGV      EQU   2000      MAX. NO. OF CVOL POINTERS\nNDV      EQU   100       MAX. NO. OF NOT-DECLARED VOLUMES\nNDD      EQU   100       MAX. NO. OF DDNAME'S IN TABLE\nNIX      EQU   200       MAX. NO. OF NULL INDEXES\nNSK      EQU   50        MAX. NO. OF SKIP NAMES\nNGD      EQU   2000      MAX. NO. OF HIGH-LEVELS NAMES (RACF PROFILES)\nNVG      EQU   8000      MAX. NO. OF GENERIC NAMES (RACF PROFILES)\nNRE      EQU   10000     MAX. NO. OF DSNAME'S IN TABLE\nNW1      EQU   2000      1ST RACF WORK AREA LENGTH (BYTES)\nNW2      EQU   800       2ND RACF WORK AREA LENGTH (BYTES)\nNBR      EQU   50        MAX. NO. OF BYPASS RACF NAMES\nNWI      EQU   100       NO. OF CARDS IN IDCAMS SINGLE ARRAY\n         MEND\n         MACRO\n        #FPRL  &DUMMY\nFPRL     DSECT           DSNAME'S LIST LINE DESCRIPTION. -------------\n         SPACE 1\n         DS    C ----------------> ASA CONTROL\nZDSN     DS    CL44      DATA-SET NAME\n         DS    C\nZDSO     DS    CL1       DATA-SET ORGANIZATION ---> M/F/\n         DS    C\nZDSM     DS    CL2       DATA-SET MULTI-VOLUME COUNT / FILE SEQ. NO.\n         DS    C\nZDSU     DS    CL3       ---> MDL/GDG/NGI/---\n         DS    C\nZDSV     DS    CL8       D.S. OR RACF VOL. SER./ ......\n         DS    C\nZDST     DS    CL4       ---> VSAM/VS-L/----\n         DS    C\nZDSP     DS    CL3       ---> SET/---\n         DS    C\nZC       DS    CL5       ---> R-CAT/L-CAT/I-CAT/-----\n         DS    C\nZR       DS    CL5       ---> RACF P-DIS/P-GEN/-----\n         DS    C\nZRT      DS    CL5       ---> VSAM/-----\n         DS    C\nZRU      DS    CL3       ---> MDL/---\n         DS    C\nZAV      DS    CL8       CAT. OR RACF VOL. SER./ ......\n         DS    C\nZACT     DS    CL9       ---> SCRATCH/SC. TEMP./SC. DISK/UNCATALOG/\n*                             DEL. RACF/ADD RACF/CH. RACF/OFF VTOC/\n*                             ON VTOC/VTOC+RACF/CATALOG/MOD. RACF/\n*                             ---------\n         DS    C\nZSEP     DS    C         ---> U/\n         DS    C\nZRCVRY   DS    CL7       ---> C. RACF/A. RACF/M-VOL/S-VOL/EXEMPT/\n*                             *ERROR*/CONTROL/-------\n         SPACE 1\nFPRLL    EQU   *-FPRL              LINE LENGTH\nFPRLLC   EQU   0+L'LINE-FPRLL      LINE LENGTH CONTROL\n         MEND\n         MACRO\n        #LALNE &DUMMY\nLALNE    DSECT           RACF USER'S LIST LINE DESCRIPTION. ----------\n         SPACE 1\n         DS    C ----------------> ASA CONTROL\nLAUS     DS    CL8       USER\n         DS    C\nLASPO    DS    CL1       '('\nLAOW     DS    CL8       OWNER OF THE USER\nLASPT    DS    CL1       ')'\n         DS    C\nLADFT    DS    CL1       ':'\n         DS    C\nLADF     DS    CL8       DEFAULT GROUP\n         DS    C\nLAVAR    DS    0CL1      VARIOUS INFORMATION\nLASPG    DS    CL11      '- CONNECT :'\n         DS    C\nLACN     DS    CL8       CONNECT GROUP NAME\n         DS    C\nLCSPO    DS    CL1       '('\nLCOW     DS    CL8       OWNER OF THE CONNECT\nLCSPT    DS    CL1       ')'\n         DS    C\nLCSPU    DS    CL1       '-'\n         DS    C\nLCAUT    DS    CL22      'DEFAULT UNIV. ACCESS :'\n         DS    C\nLCAU     DS    CL8       ACC. ---> ALTER/CONTROL/UPDATE/READ/NONE/\n*                                  X'..'\n         DS    C\nLCSPA    DS    CL1       '('\nLCSI     DS    CL6       ACCESS COUNT\nLCSPB    DS    CL1       ')'\n         SPACE 1\n         ORG   LCAUT\n         SPACE 1\nLCLAST   DS    0CL50     LAST CONNECT AT ...\nLCATTR   DS    CL7       'ATTR. :'\n         DS    C\nLCFLGS   DS    CL44      FLAGS ---> ADSP/SPECIAL/OPERATIONS/REVOKE/\n*                                   GRPACC/X'..'\n         SPACE 1\n         ORG   LASPG\n         SPACE 1\nLASPU    DS    CL1       '-'\n         DS    C\nLAATTR   DS    CL7       'ATTR. :'\n         DS    C\nLAFLGS   DS    CL50      FLAGS ---> ADSP/SPECIAL/OPERATIONS/REVOKE/\n*                                   GRPACC/X'..'\n         DS    C\nLANOGRP  DS    0CL22     '---> (NO GROUP ACCESS)'\n         SPACE 1\n         ORG   LAATTR\n         SPACE 1\nLADS     DS    CL44      DATA-SET NAME\n         DS    C\nLASPV    DS    CL1       '('\nLADSOW   DS    CL8' '    OWNER OF THE DATA-SET\nLASPW    DS    CL1       ')'\n         DS    C\nLAACT    DS    CL1       '- ...'\n         DS    C\nLAAC     DS    CL8       USER NAME\n         DS    C\nLASPA    DS    CL1       ':'\n         DS    C\nLAAU     DS    CL8       ACC. ---> ALTER/CONTROL/UPDATE/READ/NONE/\n*                                  X'..'\n         DS    C\nLADLM    DS    CL8       '(DELETE)'\n         DS    CL8       ...\n         SPACE 1\n         ORG   ,\n         SPACE 1\nLLALNE   EQU   *-LALNE             LINE LENGTH\nLLALNEC  EQU   0+L'LINE-LLALNE     LINE LENGTH CONTROL\n         MEND\n         MACRO\n        #LGLNE &DUMMY\nLGLNE    DSECT           RACF GROUP'S LIST LINE DESCRIPTION. ---------\n         SPACE 1\n         DS    C ----------------> ASA CONTROL\nLGGN     DS    CL8       GROUP\n         DS    C\nLGSPO    DS    CL1       '('\nLGOW     DS    CL8       OWNER OF THE GROUP\nLGSPT    DS    CL1       ')'\n         DS    C\nLGSPS    DS    CL1       ':'\n         DS    C\nLGSG     DS    CL8       SUPERIOR GROUP\n         DS    C\nLGVAR    DS    0CL80     VARIOUS INFORMATION\nLGSPG    DS    CL11      '- SGRP(S) :'\n         DS    C\nLGSN     DS    8CL9      SUBGROUP NAMES\nNLGSN    EQU   (*-LGSN)/L'LGSN\n         SPACE 1\n         ORG   LGSPG\n         SPACE 1\nLGSPU    DS    CL11      '- USER(S) :'\n         DS    C\nLGUN     DS    3CL24     USER NAMES\nNLGUN    EQU   (*-LGUN)/L'LGUN\n         SPACE 1\n         ORG   LGUN\n         SPACE 1\nLGUS     DS    CL8       USER NAME\n         DS    C\nLGSPA    DS    CL1       '-'\n         DS    C\nLGAC     DS    CL8       AUTH. ---> JOIN/CONNECT/CREATE/USE/X'..'\n         SPACE 1\n         ORG   LGSPG\n         SPACE 1\nLGSPD    DS    CL1       '-'\n         DS    C\nLGDS     DS    CL44      DATA-SET NAME\n         DS    C\nLGSPV    DS    CL1       '('\nLGDSOW   DS    CL8       OWNER OF THE DATA-SET\nLGSPW    DS    CL1       ')'\n         DS    C\nLGACT    DS    CL1       '- ...'\n         DS    C\nLGACC    DS    CL8       USER NAME\n         DS    C\nLGSPB    DS    CL1       ':'\n         DS    C\nLGAU     DS    CL8       ACC. ---> ALTER/CONTROL/UPDATE/READ/NONE/\n*                                  X'..'\n         DS    C\n         DS    CL16      ...\n         SPACE 1\n         ORG   ,\n         SPACE 1\nLLGLNE   EQU   *-LGLNE             LINE LENGTH\nLLGLNEC  EQU   0+L'LINE-LLGLNE     LINE LENGTH CONTROL\n         MEND\n         MACRO\n        #WKDS  &DUMMY\nWKDS     DSECT           RACF WORK AREAS DESCRIPTION. ----------------\n         SPACE 1\nWORK     DS    F         LENGTH OF ENTIRE USER AREA\nWORKRBA  DS    XL8\nWORKDDC  DS    F         DUPLICATE DATA-SET NAME COUNT\nWORKRES  DS    XL8\nWORKTL   DS    F         LENGTH OF DATA RETURNED INTO WORK AREA\nWORKBS   EQU   *-WORK\nWORKBSL  EQU   (*-WORKRES)+2\nWORKBSLL EQU   (*-WORKRBA)+3\nWORKVRA  DS    XL1       FIELD VALUE RETURN AREA (VARIABLE)\n         MEND\n         MACRO\n        @COMM  &M=\n         AIF   ('&M' NE 'MAIN').A\nCOMMON   DS    0D\n        $HEDIT COMMON\n         AGO   .C\n.A       AIF   ('&M' NE 'SERVICES').B\n         PRINT NOGEN\n.B       ANOP\nCOMMON   DSECT\n.C       SPACE 1\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nWORKD    DC    D'0'\nATIOT    DC    A(*-*)\nJNMEA    DC    A(*-*)\nSCIN     DC    A(CARDIN,1,CARDIN+71)    INPUT CARD SCAN\nLISCAN   DC    A(*-*,1,LINE+91)    ALTERNATE INPUT CARD SCAN\nRCODES   DC    2F'0'               DYN. ALL. RETURN CODES\nSVSNAP   DC    7F'0'\nCOUNTER  DC    F'0'\nTYDD     DC    F'0'\nUSID     DC    CL8' '              CURRENT RACF USERID\n         SPACE 1\nCOPYDS   DC    CL44' '             COPY : DATA-SET NAME\nCPYCMD   DC    F'0'                COPY : START COMMAND BUFFER\nCPYCMDT  DC    CL60' '\nCOPYCNME DC    CL44' ' <---------I\nCPYCVOL  DC    CL6' '            I\nCPYCAT   DC    H'1'              I----- C001 : PARM.LIST\nCPYTY    DC    XL4'0'            I\nCPYVOL   DC    CL6'USER00' <-----I COPY : VOLUME SERIAL NUMBER\n         DC    H'0'\n         EJECT\n*        TABLES SPACES ADDRESSES, SIZES AND CONTROLS.\n         SPACE 1\nSPSTRT   DS    0F\n         SPACE 1\nTBEVOL   DC    A(*-*)              EL. VOL. TABLE ADDRESS\nTBEVOLT  DC    A(SPEV)             TOTAL SPACE FOR EL. VOL. TABLE\nTBEVOLE  DC    A(*-*)              END OF EL. VOL. TABLE ADDRESS\n         SPACE 1\nTBCVOL   DC    A(*-*)              CAT. VOL. TABLE\nTBCVOLT  DC    A(SPCV)             TOTAL SPACE FOR CAT. VOL. TABLE\nTBCVOLE  DC    A(*-*)              END OF CAT. VOL. TABLE\n         SPACE 1\nTBNVOL   DC    A(*-*)              N-CAT. VOL. TABLE\nTBNVOLT  DC    A(SPCN)             TOTAL SPACE FOR N-CAT. VOL. TABLE\nTBNVOLE  DC    A(*-*)              END OF N-CAT. VOL. TABLE\n         SPACE 1\nTBGVOL   DC    A(*-*)              CVOL PTR. TABLE\nTBGVOLT  DC    A(SPGV)             TOTAL SPACE FOR CVOL PTR. TABLE\nTBGVOLE  DC    A(*-*)              END OF CVOL PTR. TABLE\n         SPACE 1\nTBDVOL   DC    A(*-*)              NOT-DECLARED VOL. TABLE\nTBDVOLT  DC    A(SPDV)             TOTAL SPACE FOR NOT-D. VOL. TABLE\nTBDVOLE  DC    A(*-*)              END OF NOT-DECLARED VOL. TABLE\n         SPACE 1\nTBDDN    DC    A(*-*)              DDNAME TABLE ADDRESS\nTBDDNT   DC    A(SPDD)             TOTAL SPACE FOR DDNAME TABLE\nTBDDNE   DC    A(*-*)              END OF DDNAME TABLE ADDRESS\n         SPACE 1\nTBNIX    DC    A(*-*)              NULL INDEXES TABLE ADDRESS\nTBNIXT   DC    A(SPNX)             TOTAL SPACE FOR NULL INDEXES TABLE\nTBNIXE   DC    A(*-*)              END OF NULL INDEXES TABLE ADDRESS\n         SPACE 1\nTBSKP    DC    A(*-*)              SKIP NAMES TABLE ADDRESS\nTBSKPT   DC    A(SPSK)             TOTAL SPACE FOR SKIP NAMES TABLE\nTBSKPE   DC    A(*-*)              END OF SKIP NAMES TABLE ADDRESS\n         SPACE 1\nDSTAB    DC    A(*-*)              DSNAME TABLE ADDRESS\nDSTABT   DC    A(SPDS)             TOTAL SPACE FOR DSNAME'S TABLE\nDSTABOV  DC    A(NRE+1)            DSNAME'S TABLE OVERFLOW CONTROL\nDSTABCT  DC    A(NRE+1)            NO. OF EL. CONTROL\nDSTABNE  DC    F'0'                NO. OF ELEMENTS IN DSNAME'S TABLE\n         SPACE 1\nTBBYR    DC    A(*-*)              BYPASS RACF NAMES TABLE ADDRESS\nTBBYRT   DC    A(SPNB)             BYPASS RACF NAMES TABLE SPACE\nTBBYRE   DC    A(*-*)              END OF BYPASS RACF NAMES TABLE ADDR.\n         SPACE 1\nTBAVOL   DC    A(*-*)              ACC. VOL. TABLE ADDRESS\nTBAVOLT  DC    A(SPEV)             TOTAL SPACE FOR ACC. VOL. TABLE\nTBAVOLE  DC    A(*-*)              END OF ACC. VOL. TABLE ADDRESS\n         EJECT\nTBRGDS   DC    A(*-*)              HLQ NAMES TABLE ADDRESS\nTBRGDST  DC    A(SPGD)             TOTAL SPACE FOR HLQ NAMES TABLE\nTBRGDSE  DC    A(*-*)              END OF HLQ NAMES TABLE ADDRESS\n         SPACE 1\nTBVRGN   DC    A(*-*)              GENERIC NAMES TABLE ADDRESS\nTBVRGNT  DC    A(SPVR)             TOTAL SPACE FOR GENERIC NAMES TABLE\nTBVRGNE  DC    A(*-*)              END OF GENERIC NAMES TABLE ADDRESS\n         SPACE 1\nWK1A     DC    A(*-*)              1ST RACF WORK AREA ADDRESS\nWK1T     DC    A(NW1L)             1ST RACF WORK AREA SPACE\nWK2A     DC    A(*-*)              2ND RACF WORK AREA ADDRESS\nWK2T     DC    A(NW2L)             2ND RACF WORK AREA SPACE\n         SPACE 1\nDALLS    DS    0F                  DYNAMIC ALLOCATION AREAS ADDRESSES\nDALIST   DC    A(*-*)              SYSLIST DYN. ALL.\nDADATA   DC    A(*-*)              SYSDATA DYN. ALL.\nDACOPY   DC    A(*-*)              SYSCOPY DYN. ALL.\nDACTLG   DC    A(*-*)              ICF CATALOG DYN. ALL.\nDAIDIN   DC    A(*-*)              IDCAMS SYSIN DYN. ALL.\nDAIDOUT  DC    A(*-*)              IDCAMS SYSPRINT DYN. ALL.\nDALLN    EQU   (*-DALLS)/4\nDALLT    DC    A(SPDA)             TOTAL SPACE FOR DYN. ALLOC. AREAS\n         SPACE 1\nTOTSPCE  DC    A(SPTOT)            TOTAL ARRAYS SPACE\nAGIDST   DC    A(*-*)              IDCAMS ARRAY(S) STARTING POINTER\nLGIDST   DC    A(NWIL)             IDCAMS SINGLE ARRAY LENGTH\n         SPACE 1\nTOTSL    EQU   *-SPSTRT\n         EJECT\nNSSV     EQU   5                   MAX. NUMBER OF STACKED SAVE AREAS\nSVARL    EQU   18*4                STACK SAVE AREA LENGTH\nSTIDL    EQU   8                   STACK IDENTIFIER LENGTH\nSTCKL    EQU   SVARL+STIDL         SINGLE STACK LENGTH\nNSSVL    EQU   NSSV*STCKL          STACK SAVE AREAS SPACE\n         SPACE 1\nSVSTACK  DC    0H'0',AL2(NSSV)     NUMBER OF STACK SAVE AREAS\nSTACKNO  DC    H'1'                CURRENT NO. OF THE STACK\nMNAME    DC    CL8' '\n         SPACE 1\nDYNPLS  $DYNALL ,RCODES,MF=L\nRDIPLS  $READ  CARDIN,MF=L\nMOPPLS  $MOPEN WORKD,MF=L\nMRDPLS  $MREAD LINE+20,MF=L\nCU1PLS  $EDITH CUST1,MF=L\nCU2PLS  $EDITH CUST2,MF=L\nUDDPLS  $UCLOSE DDDATA,MF=L\n         EJECT\nDDSNAP   DC    CL8'SYSSNAP'\nDDDATA   DC    CL8'SYSDATA'\nDSNDATA  DC    CL44' '             ACCOUNT : DATA-SET NAME\nVADATA   DC    CL6'USER00'         ACCOUNT : VOLUME SERIAL NUMBER\nZERODS   DC    AL1(L'ZERODSN)\nZERODSN  DC    XL44'0'\nCTYPE    DC    XL1'0'              / ---> MUST BE IN SEQUENCE WHEN\nWORKDS   DC    CL44' '             /      READING CATALOGS.\nJNMEL    DC    XL1'0'\nGRNMEL   DC    AL1(L'GRNAME)\nGRNAME   DC    CL8' '\nUSNMEL   DC    AL1(L'USNAME)\nUSNAME   DC    CL8' '\nACL      DS    0CL11               ACCESS LIST ENTRY\nACCNAM   DC    CL8' '\n         DC    AL1(ACEEREAD)       READ ACCESS\n         DC    XL2'0000'           ACCESS COUNT\nUSER     DC    CL8' '\n         SPACE 1\nCLINE    DC    PL2'+60',PL3'+0'\nLLINE    DC    PL2'+60',PL3'+0'\nPLINE    DC    PL2'+60',PL3'+0'\nSYDD     DC    CL5' '              YYDDD\nTODAYD   DC    CL6' '              YYMMDD\nTODAYA   DC    CL6' '              DDMMYY\nTHMS     DC    CL6' '              HHMMSS\nVSNERR   DC    CL6' '\nMASKERR  DC    XL4'40202120'\nTRTAB    DC    CL16'0123456789ABCDEF'\nFILLDT   DC    CL20' '\n         SPACE 1\nIDCPARM  DS    0F             IDCAMS FUNCTION INFORMATION REQUEST\nIDCDSN   DC    A(*-*)              DATA-SET NAME POINTER\nIDCPLS   DC    A(*-*)              PARM.LIST POINTER\nIDCFUN   DC    CL1' '              IDCAMS FUNCTION\n         EJECT\n*        PRINT LINES.\n         SPACE 1\n         DC    AL1(L'CUST1)\nCUST1    DC    CL8' '\n         DC    AL1(CUST2L)\nCUST2    DC    CL16' ',CL16'   CLEAN - UP   ',CL16' '\nCUST2A   DC    CL5'START'\nCUST2L   EQU   *-CUST2\n         DC    AL1(LTITLE)\nTIT      DC    C'1CLEAN-UP RUN -- START AT '\nTITTIM   DC    CL8'  .  .  '       TIME\n         DC    C' OF '\nTITDAT   DC    CL20' ',C' '        DATE\nTITTEST  DC    CL10' ',C' '        INDICATE TEST\nTITSP    EQU   111-(*-TIT)\nTITCOM   DC    (TITSP)C' '\n         DC    C'PAGE'\nTITPAG   DC    CL6' '              PAGE\nLTITLE   EQU   *-TIT\n         DC    AL1(TMTL)\nTMT      DC    C'0',CL73' '\n         DC    CL14'TIME-OF-DAY : '\nTMTA     DC    CL8'  .  .  ',CL18' ----> START OF : '\nTMTB     DC    CL8' '\nTMTL     EQU   *-TMT\n         DC    AL1(L'SPACE)\nSPACE    DC    CL2' '\n         DC    AL1(MSGENDL)\nMSGEND   DC    C'0-+-+-+-+- '\nMSGENDT  DC    CL8'  .  .  ',C' : CLEAN-UP ENDED -+-+-+-+-'\nMSGENDL  EQU   *-MSGEND\n         DC    AL1(DFMSGL)\nDFMSG    DC    C'0===== DYNAM '\nDFOPER   DC    CL4' ',C' ('\nDFNAME   DC    CL8' ',C') FAILED : R15 = X'''\nDFRC15   DC    CL8' ',C''', ERC = X'''\nDFERC    DC    CL4' ',C''', INFO = X'''\nDFINFO   DC    CL4' ',C''' ====='\nDFMSGL   EQU   *-DFMSG\n         DC    AL1(L'USUPT+L'USUPTT)\nUSUPT    DC    C'0USER''S RACF PROCESSING : '\nUSUPTT   DC    CL16' '\n         DC    AL1(SNAPIDL)\nSNAPID   DC    C'0----> SNAP POINT : '\nSNAPTFI  DC    CL3' ',C' / STACK : '\nSNAPTFN  DC    CL8' '\nSNAPIDL  EQU   *-SNAPID\n         SPACE 1\nDAYT     DC    CL3'MON',C'TUEWEDTHUFRISATSUN'\n         DC    AL1(FMOFF)\n         EJECT\n*        PROCESSING INDICATORS.\n         SPACE 1\nRUNIND   DC    XL1'0'    - PROCESS -\n         SPACE 1\nRUTEST   EQU   X'01'     TEST RUN\nRUNOLIST EQU   X'02'     SUPPRESS DETAIL LIST\nRUDSH    EQU   X'04'     DSNAME'S SHORT LIST\nRUCSH    EQU   X'08'     DON'T LIST DSNAME'S ENTRIES FROM CATALOGS\nRUNOSCR  EQU   X'10'     NO SCRATCH OF DATA-SETS\nRUNOCAT  EQU   X'20'     DON'T MODIFY CATALOGS\nRUNORACF EQU   X'40'     DON'T MODIFY THE RACF PROFILES\nRUCATMIS EQU   X'80'     MISSING CATALOG(S), DON'T SCRATCH FOR NOT\n*                                  CATALOGED\n         SPACE 1\nRUNOPT   DC    XL1'0'    - PROCESS -\n         SPACE 1\nRUNOHT   EQU   X'01'     SUPPRES HEADER AND TRAILER PAGE PRINT\nRUNLU    EQU   X'02'     SUPPRESS RACF USERS/DATA-SETS DETAIL LIST\nRUNLG    EQU   X'04'     SUPPRESS RACF GROUPS/DATA-SETS DETAIL LIST\nRUTMT    EQU   X'08'     TIME STAMP REQUEST\nRUNOSET  EQU   X'10'     DON'T MODIFY VTOC'S (RACF SET)\nRUNOACC  EQU   X'20'     ACCOUNTING PROCESSING SUPPRESS\nRUABORT  EQU   X'40'     ACCOUNTING PROCESSING ABORTED\nRUGDGL   EQU   X'80'     ALSO GDG WHEN SHORT LIST REQUEST\n         SPACE 1\nWHAT     DC    XL1'0'    - DATA-SETS STATUS -\n         SPACE 1\nWHIN     EQU   X'01'     \"SYSIN\" OPENED\nWHCD     EQU   X'02'     \"SYSIN\" CARD ALREADY READ\nWHEOF    EQU   X'04'     \"SYSIN\" END-OF-FILE\nWHDATA   EQU   X'08'     \"SYSDATA\" OPENED\nWHPDSA   EQU   X'10'     \"SYSPDS\" ALLOCATED\nWHPDSO   EQU   X'20'     \"SYSPDS\" OPENED\nWHCOPY   EQU   X'40'     \"SYSCOPY\" ALLOCATED\nWHCHECK  EQU   X'80'     \"SYSIN\" CHECK RUN\n         SPACE 1\nWHATS    DC    XL1'0'    - DATA-SETS STATUS -\n         SPACE 1\nWHPERR   EQU   X'01'     \"SYSPRINT\" - PRINT ERROR\nWHIDIN   EQU   X'02'     \"XQIDIN\" OPENED\nWHIDOUT  EQU   X'04'     \"XQIDOUT\" OPENED\n         EJECT\nSTATUS   DC    XL1'0'    - STATUS -\n         SPACE 1\nSTCISI   EQU   X'01'     CURRENT IN-STREAM INPUT\nSTUPT    EQU   X'02'     RACF USERS LIST TITLE\nSTUNDER  EQU   X'04'     UNDERLINE (OUTPUT ROUTINE)\nSTCOPY   EQU   X'08'     COPY OPTION ACTIVE\nSTSCPY   EQU   X'10'     SCRATCH COPY REQUEST DUE TO ERROR\nSTGCVL   EQU   X'20'     CVOL POINTER'S STATUS LIST INDICATOR\nSTBRACF  EQU   X'40'     BYPASS ALL RACF PROCESSES INDICATOR\nSTONLY   EQU   X'80'     ONLY ELIGIBLE VOLUME(S) ANALYSIS\n         SPACE 1\nRUNSF    DC    XL1'0'    - SNAPS -\n         SPACE 1\nSFTWA    EQU   X'01'     ALL TABLES ADDRESSES AND LENGTHS (A001)\nSFRRD    EQU   X'02'     RACF/DS DEFINITIONS REQUEST (A007)\nSFLOC    EQU   X'04'     LOCATE REQUEST (A008)\nSFOBT    EQU   X'08'     OBTAIN REQUEST (A008)\nSFRUS    EQU   X'10'     RACF/USR REQUEST (A014)\nSFRDS    EQU   X'20'     RACF/DS-USR REQUEST (B007)\nSFRGR    EQU   X'40'     RACF/GRP REQUEST (A015)\nSFRCO    EQU   X'80'     RACF/CON REQUEST (B006)\n         SPACE 1\nRUNSN    DC    XL1'0'    - SNAPS -\n         SPACE 1\nSNGDS    EQU   X'01'     RACF/DS-GRP REQUEST (B008)\nSNRRO    EQU   X'02'     RACF/DS OWNER DEFINITIONS REQUEST (A007)\nSNRAE    EQU   X'04'     RACF/DS OWNER ALTER ERROR REQUEST (A007)\nSNGCV    EQU   X'08'     LOCATE CATALOG VOLUME REQUEST (B005)\nSNECV    EQU   X'10'     LOCATE CAT. VOLUME NOT FOUND REQ. (B005)\nSNSCR    EQU   X'20'     SCRATCH DATA-SET - RACF ACCESSS (A013)\nSNINX    EQU   X'40'     LOCATE MAIN INDEX (A010)\nSNDBG    EQU   X'80'     ALL ARRAYS ON ERROR (MAIN)\n         SPACE 1\nACCIND   DC    XL1'0'    - ACCOUNT -\n         SPACE 1\nAFVOL    EQU   X'01'     VOLUME(S) PRESENT\nAFFULL   EQU   X'02'     DATA-SETS ACCOUNTING FULL LIST\n         SPACE 1\nRUSREQ   DC    XL1'0'    - SPECIAL REQUESTS -\n         SPACE 1\nRUSABND  EQU   X'01'     ABEND/DUMP ALLOWED.\nRUSKOFF  EQU   X'02'     SUPPRESS LIST OF UNPROCESSED VOLUMES.\nRUSSCR   EQU   X'04'     SCRATCH COPY DATA-SET DUE TO ERROR.\nRUSVSAM  EQU   X'08'     LIST ALL VSAM DATA-SETS INFORMATION\n         EJECT\n*        BUFFERS.\n         SPACE 1\nLOCAREA  DC    0D'0',XL256'0',XL16'0'   LOCATE WORK AREA\nLOCAREAL EQU   *-LOCAREA           LOCATE WORK AREA LENGTH\nDVTYP    DC    5F'0'\nDVALT    DC    H'0'\nDVVLSN   DC    CL6' '\nADDREC   DC    XL8'0'              VTOC RECORD ADDRESS (MBBCCHHR)\nVTRDBUF  DC    0F'0',XL140'0'      VTOC READ BUFFER\n         SPACE 1\n         DC    AL1(L'PRCAR+L'CARDIN)\nPRCAR    DC    CL6' '\nCARDIN   DC    CL80' '             CARD INPUT BUFFER\n         DC    AL1(L'CARDOU)\nCARDOU   DC    CL80' '             CARD OUTPUT BUFFER\n         DC    AL1(L'LINE)\nLINE     DC    CL133' '            LINE PRINT BUFFER\n         DC    AL1(*-*)\nUNDRL    DC    CL133' '            UNDERLINE PRINT BUFFER\n         SPACE 2\n         AIF   ('&M' EQ 'MAIN').D\n        #DEFSZ\n         AGO   .E\n.D       ANOP\nCMMNL    EQU   *-COMMON            COMMON LENGTH\n.E       EJECT\nDSTABDS  DSECT                     DSNAME'S TABLE DESCRIPTION\n         SPACE 1\n* NOTE : FIELDS (1), (2), (3) AND (4) MUST BE IN THIS ORDER (B004).\n         SPACE 1\nDSNME    DS    CL44            (1) DATA-SET NAME\nDSMVCNT  DS    H               (2) MULTI-VOLUME COUNT\nDSDDN    DS    0CL8,CL2        (3) DDNAME OF VTOC (FORM : 'VT'+VOLSER)\nDSVOLSN  DS    CL6             (4) DATA-SET VOLUME\nDSUCBTY  DS    XL4                 UCB TYPE OF VOLUME\nDSCBCC   DS    XL8                 DSCB FORMAT 1 ADDRESS (MBBCCHHR)\nDSVORG   DS    CL1                 DATA-SET VOLUME ORGANIZATION\nXOM      EQU   C'M'                     M = MULTI-VOL.\nXOF      EQU   C'F'                     F = FILE SEQ.\n*                                       X'0' = SINGLE-VOL.\nDSUSE    DS    CL1                 DATA-SET USAGE\nXUM      EQU   C'M'                     M = MODEL GDG\nXUG      EQU   C'G'                     G = GDG\nXUI      EQU   C'I'                     I = NULL GDG INDEX\n*                                       X'0' = NORMAL\nDSTYPE   DS    CL1                 DATA-SET TYPE\nXTV      EQU   C'V'                     V = VSAM (VTOC)\nXTL      EQU   C'L'                     L = VSAM (LOCATE)\n*                                       X'0' = NON-VSAM\nDSPROT   DS    CL1                 DATA-SET PROTECTION\nXPR      EQU   C'R'                     R = RACF (VTOC FLAG)\n*                                       X'0' = NOT PROTECTED\nDSCAT    DS    CL1                 DATA-SET CATALOG STATUS\nXCSR     EQU   C'R'                     R = BY READ O.S. CATALOG\nXCSI     EQU   C'I'                     I = BY READ ICF CATALOG\nXCSL     EQU   C'L'                     L = BY LOCATE\n*                                       X'0' = NOT CATALOGED\nDSRACF   DS    CL1                 DATA-SET RACF STATUS\nXRD      EQU   C'D'                     D = DISCRETE PROFILE\nXRG      EQU   C'G'                     G = GENERIC PROFILE\n*                                       X'0' = NOT RACF DEFINED\nDSRUSE   DS    CL1                 DATA-SET RACF USE\nXRUM     EQU   C'M'                     M = MODEL\n*                                       X'0' = NORMAL\nDSRTYPE  DS    CL1                 DATA-SET RACF TYPE\nXRTV     EQU   C'V'                     V = VSAM\n*                                       X'0' = NON-VSAM\nDSALTVO  DS    CL6                 CAT. OR RACF VOLUME IF NOT MATCH\nDSCVOL   DS    CL6                 VOLUME ON WHICH CAT. INFO FOUND\nDSACTION DS    CL1                 DATA-SET ACTION\nYS       EQU   C'S'                     S = SCRATCH REQ.\nYT       EQU   C'T'                     T = SCRATCH TEMPORARY REQ.\nYD       EQU   C'D'                     D = SCRATCH DISK REQ.\nYU       EQU   C'U'                     U = UNCATALOG REQ.\nYC       EQU   C'C'                     C = CATALOG REQ.\nYR       EQU   C'R'                     R = DELETE FROM RACF REQ.\nYA       EQU   C'A'                     A = ADD TO RACF REQ.\nYF       EQU   C'F'                     F = CHANGE RACF REQ.\nYY       EQU   C'Y'                     Y = MODIFY RACF REQ.\nYN       EQU   C'N'                     N = OFF RACF (VTOC FLAG)\nYV       EQU   C'V'                     V = ON RACF (VTOC FLAG)\nYW       EQU   C'W'                     W = ON RACF (VTOC FLAG)\n*                                           + CHANGE RACF REQ.\nYE       EQU   C'E'                     E = ACTION EXEMPTED\nYM       EQU   C'M'                     M = MANUAL CONTROL SIGNAL\nYZ       EQU   C'Z'                     Z = UNKNOWN STATUS SIGNAL\n*                                       X'0' = NO ACTION (ALL O.K.)\nDSRCVRY  DS    CL1                 DATA-SET RECOVERY\nYRR      EQU   C'R'                     R = CHANGE RACF\nYRA      EQU   C'A'                     A = ADD RACF\nYRU      EQU   C'U'                     U = USE FOR ADD RACF\nYRM      EQU   C'M'                     M = DEF. MULTI-VOL RACF\nYRS      EQU   C'S'                     S = DEF. SINGLE-VOL RACF\n*                                       X'0' = NO RECOVERY (ALL O.K.)\nDSFLGS   DS    XL1                 DATA-SET ACTION FLAGS\nZFADD    EQU   X'01'                    ADD RACF ALTER\nZFCHG    EQU   X'02'                    CHANGE RACF TO ALTER\nZFTNU    EQU   X'04'                    TRUE NAME USED BY RACF\n         DS    XL1                 RESERVED\nDSANME   DS    CL44                DATA-SET TRUE NAME (ALIAS)\n         SPACE 1\nDSTABL   EQU   *-DSTABDS           DSNAME TABLE ENTRY LENGTH\n         EJECT\nDDNT     DSECT                     DDNAME'S TABLE DESCRIPTION\n         SPACE 1\nDDNNME   DS    0CL8,CL2            DDNAME (FORM : 'VT'+VOLSER)\nDDNVOL   DS    CL6                 VOLSER\nDDNDTY   DS    XL4                 DEVICE TYPE\nDDNALL   DS    XL1                 INDICATORS\nDDNXA    EQU   X'01'                    DD IS ALLOCATED\nDDNXQ    EQU   X'02'                    VTOCQ IS OPENED\nDDNXD    EQU   X'04'                    VTOCD IS OPENED\nDDNCT    EQU   X'10'                    VOLUME CONTAIN AN O.S. CATALOG\nDDNCI    EQU   X'20'                    VOLUME CONTAIN AN ICF CATALOG\nDDNLUT   DS    XL1                 LENGTH OF UNIT TYPE\nDDNUTY   DS    CL8                 UNIT TYPE\n         SPACE 1\nDDNL     EQU   *-DDNT              DDNAME TABLE ENTRY LENGTH\n         SPACE 2\nCVLT     DSECT                     CAT. VOL. TABLE DESCRIPTION\n         SPACE 1\nCVLVOL   DS    CL6                 VOLSER\nCVLNME   DS    CL44                DATA-SET NAME\nCVLIND   DS    XL1                 INDICATORS\nCVLICF   EQU   X'01'                    OFF = O.S. CATALOG TYPE\n*                                       ON = ICF CATALOG TYPE\nCVLCSO   EQU   X'02'                    OFF = CATALOG IS CLOSED\n*                                       ON = CATALOG IS OPENED\nCVLMIS   EQU   X'10'                    CATALOG VOLUME MISSING\nCVLCTP   EQU   X'20'                    VOLUME CONTAIN THE CATALOG\nCVLPWL   DS    XL1                 MASTER PASSWORD LENGTH-1\nCVLPW    DS    CL8                 MASTER PASSWORD\n         SPACE 1\nCVLL     EQU   *-CVLT              CAT. VOL. TABLE ENTRY LENGTH\n         EJECT\nCVPDS    DSECT           CVOL POINTER ELEMENT DESCRIPTION. -----------\n         SPACE 1\nCVPNAME  DS    CL8       CVOL POINTER NAME\nCVPVOL   DS    CL6       VOLUME ID POINTED\nCVPFL    DS    XL1       FLAGS\nCVPOS    EQU   X'01'               O.S. CVOL POINTER\nCVPICF   EQU   X'02'               ICF ALIAS NAME\nCVPLOC   EQU   X'04'               BY LOCATE\nCVPRACF  EQU   X'08'               RACF USER-ID\n         SPACE 1\nCVPL     EQU   *-CVPDS             CVOL POINTER TABLE ENTRY LENGTH\n         SPACE 2\n         AIF   ('&M' EQ 'MAIN').F\n        $DYNLIST R=NO\n         AGO   .G\n.F      $DYNLIST L=NO,R=NO\n.G       EJECT\n*        COMPUTE ARRAYS SPACES.\n         SPACE 1\nTBEVOLL  EQU   L'UCBVOLI+1         EL. VOL. ENTRY LENGTH\nSPEV     EQU   (((TBEVOLL*(NEV+1))+7)/8)*8   EL. VOL. TABLE SPACE\nSPCV     EQU   (((CVLL*(NCV+1))+7)/8)*8      CAT. VOL. TABLE SPACE\nTBNVOLL  EQU   L'UCBVOLI+1         N-CAT. VOL. ENTRY LENGTH\nSPCN     EQU   (((TBNVOLL*(NNC+1))+7)/8)*8   N-CAT. VOL. TABLE SPACE\nSPGV     EQU   (((CVPL*(NGV+1))+7)/8)*8      CVOL PTR. TABLE SPACE\nTBDVOLL  EQU   L'UCBVOLI           NOT-DECLARED VOLUME ENTRY LENGTH\nSPDV     EQU   (((TBDVOLL*(NDV+1))+7)/8)*8   NOT-D. VOL. TABLE SPACE\nSPDD     EQU   (((DDNL*(NDD+1))+7)/8)*8      DDNAME'S TABLE SPACE\nNIXL     EQU   0+L'DSNME+L'DDNVOL  NULL INDEX ENTRY LENGTH\nSPNX     EQU   ((((NIXL)*(NIX*1))+7)/8)*8    NULL INDEXES TABLE SPACE\nSPSK     EQU   (NSK+1)*8           SKIP NAMES TABLE SPACE\nSPDS     EQU   (((DSTABL*(NRE+1))+7)/8)*8    DSNAME'S TABLE SPACE\nNBRL     EQU   5+L'DSNME           BYPASS RACF TABLE ENTRY LENGTH\nSPNB     EQU   ((((NBRL)*(NBR+1))+7)/8)*8    BYPASS RACF SPACE\nSPAV     EQU   SPEV                ACC. VOL. TABLE SPACE\nNGDL     EQU   12                  HLQ NAME ENTRY LENGTH\nSPGD     EQU   ((((NGDL)*(NGD+1))+7)/8)*8    HLQ NAMES TABLE SPACE\nNVRL     EQU   1+L'DSNME           GEN. NAME ENTRY LENGTH\nSPVR     EQU   ((((NVRL)*(NVG+1))+7)/8)*8    GEN. NAMES SPACE\nNW1L     EQU   ((NW1+7)/8)*8       1ST RACF WORK AREA SPACE\nNW2L     EQU   ((NW2+7)/8)*8       2ND RACF WORK AREA SPACE\nSPDA     EQU   DYNLGTH*DALLN       DYNAMIC ALLOCATIONS SPACE\n         SPACE 2\n*        TOTAL ARRAYS SPACE.\n         SPACE 1\nSPTOT@1  EQU   SPEV+SPCV+SPCN+SPGV+SPDV+SPDD+SPNX+SPSK+SPDS+SPNB\nSPTOT    EQU   SPTOT@1+SPAV+SPGD+SPVR+NW1L+NW2L+SPDA\n         SPACE 2\nNWIL     EQU   (NWI*80)+8          IDCAMS SINGLE ARRAY SPACE LENGTH\n         SPACE 1\nON       EQU   X'F0'               SET BRANCH\nOFF      EQU   X'0F'               SET NO-OPERATION\nFMON     EQU   X'FF'               FULL FINAL MARKER\nFMOFF    EQU   X'00'               NULL FINAL MARKER\n         SPACE 2\n*       IHAACEE - IEFUCBOB(UCBDSECT)\n         AIF   ('&M' EQ 'SERVICES').H\n        PRINT  NOGEN\n.H      IHAACEE\nUCBDSECT DSECT\n        IEFUCBOB\n         MEND\n         MACRO\n&NAME   @COPY  &LINE,&SPCNA,&UNDL\n         AIF   ('&LINE' NE '').A\n         MNOTE 8,' OPERAND MISSING **********************************'\n         MEXIT\n.A       AIF   ('&LINE'(1,1) NE '(').B\n         AIF   ('&LINE' EQ '(1)').E\n         AIF   ('&LINE' EQ '(R1)').E\n&NAME    LR    R1,&LINE(1)\n         AGO   .C\n.B       ANOP\n&NAME    LA    R1,&LINE\n.C       AIF   ('&SPCNA' EQ '').D\n         LA    R15,&SPCNA\n         AGO   .G\n.D       XR    R15,R15\n         AGO   .G\n.E       AIF   ('&SPCNA' EQ '').F\n&NAME    LA    R15,&SPCNA\n         AGO   .G\n.F       ANOP\n&NAME    XR    R15,R15\n.G       AIF   ('&UNDL' EQ 'U').H\n         BAS   R14,COPY\n         MEXIT\n.H       BAS   R14,COPYU\n         MEND\n         MACRO\n        @DOC   &DUMMY\n         EJECT\n* CALL OF THE PROGRAM :\n* ---------------------\n*\n*        //MAINT  EXEC PGM=CLEAN,PARM=...\n*        //SYSCMD   DD ... OPTIONAL COMMANDS CARDS ...\n*        //SYSIN    DD ... CONTROL CARDS ...\n*        //SYSPRINT DD SYSOUT=A    (ACTION LIST)\n*        //SYSLIST  DD SYSOUT=A    (DETAIL LIST)\n*        //SYSSNAP  DD SYSOUT=A    (OPTIONAL SNAP REQUESTS)\n*\n* EXEC PARM. FIELD DESCRIPTION : A COMMA MUST SEPARATE THE REQUESTS.\n* ------------------------------\n*\n*        T OR TEST : NORMAL RUN, BUT FORCE ALL MODIFICATIONS TO\n*              VTOC'S, CATALOGS AND RACF TO BE BYPASSED, SUPPRESS\n*              THE HEADER AND TRAILER PAGE PRINT, AND, WHEN AN\n*              ERROR IS DETECTED, ABENDS (U0033) WITH DUMP ('SYSUDUMP'\n*              OR 'SYSABEND' DD-CARD IS NEEDED).\n*\n*        C OR CHECK : REDUCED RUN, IT ALLOWS THE INPUT DATA TO BE\n*              SCANNED ONLY (SYNTAX CHECKER), AND SUPPRESS THE HEADER\n*              AND TRAILER PAGE PRINT. USING THIS KEYWORD, THE 'TEST'\n*              (UNLESS DUMP DESIRED) AND 'SKIP' OPTIONS ARE NOT NEEDED\n*              (IF CODED, THEY ARE JUST SCANNED).\n*\n* COMMANDS CARDS : OPTIONAL (SYSCMD DD-CARD).\n* ================\n*\n*    PROCESSED BY : \"A003\".\n*\n*    CODING RULES :\n*              COLUMNS 1 TO 72 OF CARDS CAN BE USED FOR OPERATORS\n*              COMMANDS CODING, NO FIXED COLUMNS NOR CONTINUATION\n*              ARE PROVIDED, AND AN ASTERISK (*) IN COLUMN 1 IS\n*              INTERPRETED AS A COMMENT CARD IN THE INPUT STREAM.\n*\n* CONTROL CARDS :\n* ===============\n*\n*        THE CONTROL CARDS MUST BE GIVEN BY GROUP IN THE SAME ORDER\n*        AS THEY ARE DESCRIBED BELOW, EACH GROUP STARTING ALWAYS ON\n*        A NEW CARD. NO COMMENT CARDS ARE PROVIDED.\n         EJECT\n* 1. OPTIONS SELECTION : OPTIONAL.\n* ----------------------\n*\n*    PROCESSED BY : \"B001\".\n*\n*    CODING RULES :\n*              KEYWORDS AND EVENTUAL ARGUMENTS ARE ACCEPTED ANYWHERE\n*              FROM COLUMN 1 UP TO COLUMN 72 INCLUDED. THEY MUST BE\n*              SEPARATED EACH FROM THE OTHER BY AT LEAST ONE BLANK AND\n*              THEY CAN BE IN ANY ORDER (THE LAST ONE IS IN EFFECT IF\n*              THERE IS SOME KEYWORDS CONFLICT).\n*\n*    KEYWORDS :\n*        - LISTALL\n*              COMPLETE DETAIL LIST ('SYSLIST') REQUEST. ALL THE\n*              CATALOGS ENTRIES, THE DATA-SETS STATUS AND THE RACF\n*              USER'S/DATA-SETS ACCESSES, GROUP'S/DATA-SETS ACCESSES\n*              ARE LISTED.\n*\n*        - DS-SHORT\n*              ONLY THE STATUS OF DATA-SETS WITH ACTIONS SCHEDULED ARE\n*              LISTED ('SYSLIST').\n*              NOTE : THIS IS THE DEFAULT OPTION.\n*\n*        - DS-SHGDG\n*              THE STATUS OF DATA-SETS WITH ACTIONS SCHEDULED AND THE\n*              GDG'S INFORMATION ARE LISTED ('SYSLIST').\n*\n*        - DS-VSAM\n*              THE STATUS OF DATA-SETS WITH ACTIONS SCHEDULED, THE\n*              GDG'S AND ALL VSAM INFORMATION ARE LISTED ('SYSLIST').\n*\n*        - DS-SKOFF\n*              SUPPRESS THE LIST ('SYSLIST') OF ALL REFERENCES TO\n*              UNPROCESSED VOLUMES.\n*\n*        - CT-SHORT\n*              SUPPRESS THE LIST ('SYSLIST') OF THE CATALOGS DSNAME'S\n*              AND O.S. CVOL POINTERS ENTRIES.\n*              NOTE : THIS IS THE DEFAULT OPTION.\n*\n*        - NL-USERS ( ... ... )\n*              SUPPRESS THE LIST ('SYSLIST') OF THE RACF USER'S/DATA-\n*              SETS ACCESSES PROFILES, UNLESS THE ACTUAL DAY NAME\n*              MATCHES ONE SPECIFIED IN THE EVENTUAL FOLLOWING LIST\n*              ( ... ... ). VALUE(S) WHERE ... MAY BE : MON, TUE,\n*              WED, THU, FRI, SAT AND SUN.\n*\n*        - NL-GROUPS ( ... ... )\n*              SUPPRESS THE LIST ('SYSLIST') OF THE RACF GROUP'S/\n*              DATA-SETS ACCESSES PROFILES, UNLESS THE ACTUAL DAY\n*              NAME MATCHES ONE SPECIFIED IN THE EVENTUAL FOLLOWING\n*              LIST ( ... ... ). VALUE(S) WHERE ... MAY BE : MON,\n*              TUE, WED, THU, FRI, SAT AND SUN.\n         EJECT\n*        - COPY ( ...DATA-SET NAME... )\n*        - COPY ( ...DATA-SET NAME... / ...START COMMAND... )\n*              GENERATE A COPY OF THE RACF USER'S/DATA-SETS ACCESSES\n*              AND THE RACF GROUP'S/DATA-SETS ACCESSES ('SYSLIST')\n*              IN A NEW DATA-SET AUTOMATICALLY CREATED WITH THE\n*              SPECIFIED NAME. SEPARATED BY A SLASH (/), AN EVENTUAL\n*              START COMMAND MAY BE GIVEN, WHICH WILL BE INTERNALLY\n*              ISSUED AT THE END (THIS ALLOWS THE START OF ANOTHER JOB\n*              TO HANDLE THE COPY DATA-SET).\n*              NOTE : THIS OPTION IS UNDER THE CONTROL OF 'NOLIST',\n*                     'NL-USERS' AND 'NL-GROUPS' OPTIONS.\n*              CODING RULES : THE DATA-SET NAME AND THE START COMMAND\n*                     MAY BE SPECIFIED ON SEPARATE CARDS, BUT EACH MUST\n*                     BE COMPLETE WITHIN THE 72 COLUMNS RANGE.\n*\n*        - COPYVOL ( ... )\n*              VOLUME SERIAL NUMBER WHERE THE COPY DATA-SET WILL BE\n*              ALLOCATED.\n*\n*        - NOLIST\n*              SUPPRESS THE DETAIL LIST ('SYSLIST').\n*\n*        - NOACCOUNT\n*              SUPPRESS THE ACCOUNTING PROCESSING.\n*\n*        - NOSCRATCH\n*              NORMAL RUN, BUT BYPASS THE SCRATCH OF DATA-SETS\n*              (CATALOG , RACF AND VTOC ACTIONS ARE EXECUTED).\n*\n*        - NOCATALOG\n*              NORMAL RUN, BUT BYPASS ANY CATALOG CHANGE (DATA-SET,\n*              RACF AND VTOC ACTIONS ARE EXECUTED).\n*\n*        - NORACF\n*              NORMAL RUN, BUT BYPASS ANY RACF PROFILES CHANGE\n*              (DATA-SET, CATALOG AND VTOC ACTIONS ARE EXECUTED).\n*\n*        - NOSET\n*              NORMAL RUN, BUT BYPASS ANY VTOC'S CHANGE (DATA-SET,\n*              CATALOG AND RACF ACTIONS ARE EXECUTED).\n*\n*        - ONLY\n*              FORCE THE ANALYSIS OF ONLY THOSE VOLUMES SPECIFIED\n*              AS ELIGIBLE (SEE EL.VOL.).\n         EJECT\n*        - TIME\n*              PRINT THE TIME-OF-DAY AT START OF MODULE'S (PROCESS)\n*              EXECUTION (SEE MACRO @XS).\n*\n*        - CHECK\n*              REDUCED RUN ALLOWING THE INPUT DATA TO BE SCANNED\n*              ONLY (SYNTAX CHECKER). USING THIS OPTION, THE 'TEST'\n*              (UNLESS DUMP DESIRED) AND 'SKIP' OPTIONS ARE NOT NEEDED\n*              (IF CODED, THEY ARE JUST SCANNED).\n*\n*        - TEST\n*              NORMAL RUN, BUT FORCE ALL MODIFICATIONS TO VTOC'S,\n*              CATALOGS AND RACF TO BE BYPASSED, AND, WHEN AN ERROR\n*              IS DETECTED, ABENDS (U0033) WITH DUMP ('SYSUDUMP' OR\n*              'SYSABEND' DD-CARD IS NEEDED).\n*\n*        - SNAP ( ... )\n*              SNAP REQUESTS LIST, WHERE ... INDICATES AT WHICH\n*              PROCESSING POINT AND MAY BE :\n*                  TWA : AT TABLES ADDRESSES AND LENGTHS (A001).\n*                  RRD : AT RACF/DS DEFINITIONS (A007).\n*                  LOC : AT LOCATE OF DSNAME (A008).\n*                  OBT : AT OBTAIN OF DSNAME (A008).\n*                  RUS : AT RACF/USR PROCESSING (A014).\n*                  RDS : AT RACF/DS-USR PROCESSING (B007).\n*                  RGR : AT RACF/GRP PROCESSING (A015).\n*                  RCO : AT RACF/CON PROCESSING (B006).\n*                  GDS : AT RACF/DS-GRP PROCESSING (B008).\n*                  RRO : AT RACF/DS OWNER DEFINITIONS (A007).\n*                  RAE : AT RACF/DS OWNER ALTER ERROR (A007).\n*                  GCV : AT LOCATE CATALOG VOLUME (B005).\n*                  ECV : AT LOCATE CATALOG VOLUME NOT FOUND (B005).\n*                  SCR : AT SCRATCH DATA-SET - RACF ACCESS (A013).\n*                  INX : AT LOCATE MAIN INDEX (A010).\n*                  DBG : ALL ARRAYS ON ERROR (MAIN)\n*              NOTE : 'SYSSNAP' DD-CARD IS NEEDED.\n         EJECT\n*        - NEV .. NCV .. NNC .. NGV .. NDV .. NDD .. NIX .. NSK ..\n*          NRE .. NW1 .. NW2 .. NBR .. NWI .. :\n*              WHERE .. IS A NUMBER (FROM 1 TO 5 DIGITS) WHICH ALLOWS\n*              DYNAMIC CHANGE OF THE DEFAULT VALUES ASSIGNED TO THE\n*              CORRESPONDING ASSEMBLY VARIABLES (SEE BELOW).\n         SPACE 1\n        #DEFSZ\n         EJECT\n* 2. SKIP PROCESSING REQUESTS : OPTIONAL.\n* -----------------------------\n*\n*    PROCESSED BY : \"A002\".\n*\n*    KEYWORD :\n*        - SKIP ( XXXXXX XXXXXX ... )\n*              WHERE XXXXXX ARE NAMES OF MODULES (@X CALL FEATURE)\n*              WHICH EXECUTION IS TO BE BYPASSED.\n*              NOTE : - BE CAREFULL WHEN USING THIS OPTION,\n*                       UNPREDICTABLE RESULTS MAY OCCURS (LIKE\n*                       CONTROL CARDS ORDER MISPLACED).\n*\n*    CODING RULES :\n*              THE MODULES NAMES ARE ACCEPTED ANYWHERE FROM COLUMN\n*              1 UP TO COLUMN 72 INCLUDED. THEY MUST BE SEPARATED\n*              EACH FROM THE OTHER BY AT LEAST ONE BLANK, AND MAY BE\n*              FROM 1 TO 8 CHARACTERS LONG. A NAME MUST BE ALWAYS\n*              COMPLETE WITHIN THE 72 COLUMNS RANGE.\n         EJECT\n* 3. BYPASS ANY RACF PROCESS : OPTIONAL.\n* ----------------------------\n*\n*    PROCESSED BY : \"A002\".\n*\n*    PURPOSE : EVENTUALLY ADD ALTER ACCESS FOR OWNER IN THE D.M.S.\n*              ARCHIVED DATA-SETS PROFILES IN ORDER TO ALLOW THE\n*              USERS \"DRESTORE\" REQUESTS SUCCESSFULLY COMPLETE.\n*\n*    KEYWORD :\n*        - BYPRACF ( XXXXXX / NOLIST  XXXXXX / N\n*                    XXXXXX / SKIP  XXXXXX / S  XXXXXX  ... )\n*              WHERE XXXXXX ARE DATA-SETS NAMES PREFIXES FOR WHICH THE\n*              NORMAL RACF PROCESSING IS TO BE REPLACED BY AN EVENTUAL\n*              ADD ALTER ACCESS OF OWNER IN THE DATA-SET'S ACCESS LIST\n*              PROFILES.\n*              OPTIONALLY, MAY BE SPECIFIED AFTER A PREFIX :\n*                   - '/NOLIST' OR '/N' TO SUPPRESS THESE ACTIONS BE\n*                     SIGNAL ON THE STANDARD OUTPUT LIST.\n*                   - '/SKIP' OR '/S' TO SKIP THE RACF PROCESSING\n*                     RELATIVE TO IT.\n*              I.E. : BYPRACF ( DMS. )\n*                     WILL APPLY THE ALTERNATE PROCESS TO THE DATA-\n*                     SETS PROFILES HAVING THE NAME STARTING BY THE\n*                     PREFIX \"DMS.\".\n*\n*    CODING RULES :\n*              THE DATA-SETS NAMES PREFIXES ARE ACCEPTED ANYWHERE\n*              FROM COLUMN 1 UP TO COLUMN 72 INCLUDED. THEY MUST BE\n*              SEPARATED EACH FROM THE OTHER BY AT LEAST ONE BLANK\n*              (MAXIMUM IS 44 CHARACTERS LONG). A NAME MUST BE ALWAYS\n*              COMPLETE WITHIN THE 72 COLUMNS RANGE.\n         EJECT\n* 4. ACCOUNT REQUESTS : OPTIONAL.\n* ---------------------\n*\n*    PROCESSED BY : \"A002\".\n*\n*    KEYWORD :\n*        - ACCOUNT ( Y... / ZZZ ZZZ ... ) OR\n*        - ACCOUNT ( / ZZZ ZZZ ... ) OR\n*        - ACCOUNT * :\n*              WHERE ZZZ ARE MEMBER NAMES OF THE CATALOGED PARTITIONED\n*              DATA-SET Y... WHICH WILL CONTAIN THE DESIRED ACCOUNTING\n*              REQUIREMENTS CONTROL STATEMENTS. IF Y... IS OMITTED,\n*              THE PREVIOUS DATA-SET NAME IS USED.\n*              THE USE OF 'ACCOUNT *' FORM ASSUMES THAT THE ACCOUNTING\n*              REQUIREMENTS CONTROL STATEMENTS CODING FOLLOWS IN THE\n*              CURRENT INPUT-STREAM. THE END OF THESE REQUIREMENTS IS\n*              DETECTED BY ANOTHER 'ACCOUNT' KEYWORD OR THE 'EL.VOL.'\n*              NEXT MANDATORY GROUP KEYWORD IN A NEW CONTROL CARD.\n*\n*    CODING RULES :\n*              THE MEMBER NAME MAY BE FROM 1 TO 8 CHARACTERS LONG, AND\n*              MUST BE ALWAYS COMPLETE WITHIN THE 72 COLUMNS RANGE.\n         EJECT\n*        ACCOUNTING REQUIREMENTS CONTROL STATEMENTS :\n*        --------------------------------------------\n*\n*    CODING RULES :\n*\n*        THE REQUEST STATEMENTS ARE FREE FORMAT, THEY MAY START\n*        ANYWHERE FROM COLUMN 1 UP TO COLUMN 72 INCLUDED OF THE\n*        CARDS, AND A CARD MAY CONTAIN MORE THAN ONE STATEMENT.\n*        EACH STATEMENT IS COMPOSED OF A COMMAND AND EVENTUALLY\n*        OPERANDS AS DESCRIBED IN COMMANDS, AND MUST BE ALWAYS\n*        COMPLETE WITHIN THE 72 COLUMNS RANGE, THUS NO CONTINUATION\n*        IS PROVIDED, BUT A COMMAND MAY BE REPEATED TO SUPPLY ALL\n*        REQUIREMENTS. AT LEAST ONE BLANK MUST SEPARATE STATEMENTS,\n*        COMMANDS AND OPERANDS.\n*\n*    COMMANDS :\n*\n*        VOLUME ( ... ... ... )      : DECLARE ALL THE VOLUME SERIAL\n*        V                             NUMBERS FOR ACCOUNT PROCESSING.\n*                                      THE VOLUME SERIAL NUMBERS MAY\n*                                      BE FROM 1 TO 6 CHARACTERS LONG\n*                                      (WHEN SHORTER THAN 6 CHARACTERS\n*                                      IT MEANS A GROUP OF VOLUMES,\n*                                      WHICH SERIAL NUMBERS OBVIOUSLY\n*                                      START BY THIS PREFIX).\n*\n*        JUMP ( ... ... ... )        : BYPASS ACCOUNTING PROCESSING AT\n*        J                             PREDETERMINED DAYS. THE DAY'S\n*                                      LIST IS ACCPETED BY DATE DDMMYY\n*                                      OR BY DAY NAME ('MON', 'TUE',\n*                                      'WED' 'THU', 'FRI', 'SAT' AND\n*                                      'SUN').\n*\n*        LIST                        : ACCOUNTING PROCESSING DATA-SETS\n*        L                             FULL LIST ('SYSLIST'). THIS IS\n*                                      ALSO FORCED BY 'LISTALL' OPTION.\n*\n*        ACCVOL ( ... )              : VOLUME SERIAL NUMBER WHERE THE\n*        A                             DAY-ACCOUNTING DATA-SET WILL\n*                                      BE ALLOCATED.\n*\n*        PREFIX ( ... )              : DS-NAME FIRST LEVEL INDEX TO\n*        P                             USE FOR THE DAY-ACCOUNTING\n*                                      DATA-SET.\n         EJECT\n* 5. ELIGIBLE VOLUMES NAMES : MANDATORY.\n* ---------------------------\n*\n*    PROCESSED BY : \"A003\".\n*\n*    KEYWORD :\n*        - EL.VOL. ( XXXXXX XXXXXX ... )\n*              WHERE XXXXXX ARE VOLUME SERIAL NUMBER NAMES OF THE\n*              DISKS TO BE ANALYZED.\n*\n*    CODING RULES :\n*              THE VOLUME SERIAL NUMBER NAMES ARE ACCEPTED ANYWHERE\n*              FROM COLUMN 1 UP TO COLUMN 72 INCLUDED. THEY MUST BE\n*              SEPARATED EACH FROM THE OTHER BY AT LEAST ONE BLANK,\n*              AND MAY BE FROM 1 TO 6 CHARACTERS LONG (WHEN SHORTER\n*              THAN 6 CHARACTERS IT MEANS A GROUP OF VOLUME SERIAL\n*              NUMBERS, OBVIOUSLY STARTING BY THIS PREFIX). A NAME\n*              MUST BE ALWAYS COMPLETE WITHIN THE 72 COLUMNS RANGE.\n         EJECT\n* 6. CATALOGS VOLUMES NAMES : MANDATORY.\n* ---------------------------\n*\n*    PROCESSED BY : \"A003\".\n*\n*    KEYWORD :\n*        - CAT.VOL. ( XXXXXX XXXXXX ...\n*                     XXXXXX / Y... XXXXXX / Y... ... )\n*              WHERE XXXXXX IS THE FORM TO INDICATE THE VOLUME SERIAL\n*              NUMBER NAMES OF THE DISKS CONTAINING AN O.S. CATALOG\n*              (DATA-SET NAME IS 'SYSCTLG', THUS KNOWN), AND XXXXXX /\n*              Y... IS THE FORM TO INDICATE THE VOLUME SERIAL NUMBER\n*              NAMES OF THE DISKS CONTAINING AN ICF CATALOG (DATA-SET\n*              NAME IS Y...).\n*\n*    CODING RULES :\n*              THE VOLUME SERIAL NUMBER NAMES ARE ACCEPTED ANYWHERE\n*              FROM COLUMN 1 UP TO COLUMN 72 INCLUDED. THEY MUST BE\n*              SEPARATED EACH FROM THE OTHER BY AT LEAST ONE BLANK,\n*              AND MUST BE 6 CHARACTERS LONG. A DATA-SET NAME IS 44\n*              CHARACTERS LONG AT MAXIMUM. A NAME, EVENTUALLY FOLLOWED\n*              BY A DATA-SET NAME (ICF), MUST BE ALWAYS COMPLETE\n*              WITHIN THE 72 COLUMNS RANGE.\n         EJECT\n* 7. NO-LOCATE REQUESTS : OPTIONAL.\n* -----------------------\n*\n*    PROCESSED BY : \"A008\".\n*\n*    KEYWORD :\n*        - N-LOC.VOL. ( Y... / XXXXXX XXXXXX ... ) OR\n*        - N-LOC.VOL. ( / XXXXXX XXXXXX ... ) OR\n*        - N-LOC.VOL. ( * XXXXXX ... ... ... ) :\n*              WHERE XXXXXX ARE VOLUME SERIAL NUMBER NAMES ALSO USED\n*              AS MEMBER NAMES (PREFIXED BY THE CHARACTER L : LXXXXXX)\n*              OF THE CATALOGED PARTITIONED DATA-SET Y... WHICH WILL\n*              CONTAIN THE DATA-SET NAMES FOR WHICH THE EVENTUAL\n*              LOCATE IS TO BE SKIPED WHEN THE SPECIFIED VOLUME IS\n*              NOT ON-LINE (THESE DATA-SETS ARE MARKED AS EXEMPTED).\n*              IF Y... IS OMITTED, THE PREVIOUS DATA-SET NAME IS USED.\n*              THE ASTERISK (*) FORM ASSUMES THE DATA-SET NAMES FOLLOW\n*              THE VOLUME SERIAL NUMBER NAME (XXXXXX) IN THE CURRENT\n*              INPUT-STREAM. THE MEMBER OR INPUT-STREAM MAY CONTAIN\n*              COMPLETE OR GENERIC DATA-SET NAMES, SPECIFIED AS BELOW :\n*                   1) AAAA.BBBB.CCCC : AN EVENTUAL LOCATE OF THIS\n*                                       DATA-SET IS BYPASSED.\n*                   2) AAAA./ : AN EVENTUAL LOCATE OF ANY DATA-SETS\n*                               STARTING WITH THE PREFIX \"AAAA.\" IS\n*                               BYPASSED.\n*                   THE DATA-SETS NAMES OR PREFIXES MUST BE SEPARATED\n*                   EACH FROM THE OTHER BY AT LEAST ONE BLANK (MAXIMUM\n*                   IS 44 CHARACTERS LONG), AND THEY MUST BE ALWAYS\n*                   COMPLETE WITHIN THE 72 COLUMNS RANGE.\n*              THE PURPOSE IS TO SKIP THE MOUNT REQUEST OF A VOLUME\n*              CONTAINING A VSAM-CATALOG WHICH IS NEEDED TO LOCATE\n*              DATA-SETS RESIDING ON ANALYZED VOLUMES (ELIGIBLES).\n*\n*    CODING RULES :\n*              THE VOLUME SERIAL NUMBER NAMES ARE ACCEPTED ANYWHERE\n*              FROM COLUMN 1 UP TO COLUMN 72 INCLUDED. THEY MUST BE\n*              SEPARATED EACH FROM THE OTHER BY AT LEAST ONE BLANK,\n*              AND MUST BE 6 CHARACTERS LONG. A NAME MUST BE ALWAYS\n*              COMPLETE WITHIN THE 72 COLUMNS RANGE.\n         EJECT\n* 8. SCRATCH NOT-CATALOGED DATA-SETS ON VOLUMES NAMES : OPTIONAL.\n* -----------------------------------------------------\n*\n*    PROCESSED BY : \"A009\".\n*\n*    KEYWORD :\n*        - N-CAT.VOL. ( XXXXXX XXXXXX ... )\n*              WHERE XXXXXX ARE VOLUME SERIAL NUMBER NAMES OF THE\n*              DISKS WHERE ANY NOT-CATALOGED DATA-SET IS TO BE\n*              SCRATCHED.\n*\n*    CODING RULES :\n*              THE VOLUME SERIAL NUMBER NAMES ARE ACCEPTED ANYWHERE\n*              FROM COLUMN 1 UP TO COLUMN 72 INCLUDED. THEY MUST BE\n*              SEPARATED EACH FROM THE OTHER BY AT LEAST ONE BLANK,\n*              AND MAY BE FROM 1 TO 6 CHARACTERS LONG (WHEN SHORTER\n*              THAN 6 CHARACTERS IT MEANS A GROUP OF VOLUME SERIAL\n*              NUMBERS, OBVIOUSLY STARTING BY THIS PREFIX). A NAME\n*              MUST BE ALWAYS COMPLETE WITHIN THE 72 COLUMNS RANGE.\n         EJECT\n* 9. SPECIAL REQUESTS : OPTIONAL.\n* ---------------------\n*\n*    PROCESSED BY : \"A009\".\n*\n*    KEYWORDS :\n*        - SCRATCH ( XXXXXX XXXXXX ... ) :\n*              WHERE XXXXXX ARE VOLUME SERIAL NUMBER NAMES OF THE DISKS\n*              TO FULLY SCRATCH, DELETE CATALOG AND RACF REFERENCES.\n*              NOTE : SCRATCH OF AN OFF-LINE DISK MEANS DELETE ALL THE\n*                     CATALOG AND RACF REFERENCES TO THIS VOLUME SERIAL\n*                     NUMBER.\n*\n*        - EXEMPT ( Y... / XXXXXX XXXXXX ... ) OR\n*        - EXEMPT ( / XXXXXX XXXXXX ... ) OR\n*        - EXEMPT ( * XXXXXX ... ... ... ) :\n*              WHERE XXXXXX ARE VOLUME SERIAL NUMBER NAMES ALSO USED\n*              AS MEMBER NAMES (PREFIXED BY THE CHARACTER E : EXXXXXX)\n*              OF THE CATALOGED PARTITIONED DATA-SET Y... WHICH WILL\n*              CONTAIN THE DATA-SET NAMES FOR WHICH ANY ACTION IS TO\n*              BE SKIPED (THIS APPLY ONLY ON THE SPECIFIED VOLUME).\n*              IF Y... IS OMITTED, THE PREVIOUS DATA-SET NAME IS USED.\n*              THE ASTERISK (*) FORM ASSUMES THE DATA-SET NAMES FOLLOW\n*              THE VOLUME SERIAL NUMBER NAME (XXXXXX) IN THE CURRENT\n*              INPUT-STREAM. THE MEMBER OR INPUT-STREAM MAY CONTAIN\n*              COMPLETE OR GENERIC DATA-SET NAMES, SPECIFIED AS BELOW :\n*                   1) AAAA.BBBB.CCCC : ANY ACTION ON THIS DATA-SET IS\n*                                       BYPASSED.\n*                   2) AAAA./ : ANY ACTIONS ON DATA-SETS STARTING WITH\n*                               THE PREFIX \"AAAA.\" ARE BYPASSED.\n*                   THE DATA-SETS NAMES OR PREFIXES MUST BE SEPARATED\n*                   EACH FROM THE OTHER BY AT LEAST ONE BLANK (MAXIMUM\n*                   IS 44 CHARACTERS LONG), AND THEY MUST BE ALWAYS\n*                   COMPLETE WITHIN THE 72 COLUMNS RANGE.\n*              AN EXEMPT REQUEST OVERRIDES ALWAYS A SCRATCH REQUEST.\n*\n*    CODING RULES :\n*              THE VOLUME SERIAL NUMBER NAMES ARE ACCEPTED ANYWHERE\n*              FROM COLUMN 1 UP TO COLUMN 72 INCLUDED. THEY MUST BE\n*              SEPARATED EACH FROM THE OTHER BY AT LEAST ONE BLANK,\n*              AND MAY BE FROM 1 TO 6 CHARACTERS LONG (WHEN SHORTER\n*              THAN 6 CHARACTERS IT MEANS A GROUP OF VOLUME SERIAL\n*              NUMBERS, OBVIOUSLY STARTING BY THIS PREFIX). A NAME\n*              MUST BE ALWAYS COMPLETE WITHIN THE 72 COLUMNS RANGE.\n         MEND\n         MACRO\n&NAME   @FILL  &WHERE,&LGTH\n         AIF   ('&LGTH' EQ '').A\n&NAME    LA    R0,0+((L'&LGTH-2)/2)\n         LA    R1,&WHERE+L'&LGTH-2\n         AGO   .B\n.A       ANOP\n&NAME    LA    R0,0+((L'&WHERE-2)/2)\n         LA    R1,&WHERE+L'&WHERE-2\n.B       BAS   R14,FILL\n         MEND\n         MACRO\n&NAME   @LIST  &LINE,&SPCNA,&UNDL\n         AIF   ('&LINE' NE '').A\n         MNOTE 8,' OPERAND MISSING **********************************'\n         MEXIT\n.A       AIF   ('&LINE'(1,1) NE '(').B\n         AIF   ('&LINE' EQ '(1)').E\n         AIF   ('&LINE' EQ '(R1)').E\n&NAME    LR    R1,&LINE(1)\n         AGO   .C\n.B       ANOP\n&NAME    LA    R1,&LINE\n.C       AIF   ('&SPCNA' EQ '').D\n         LA    R15,&SPCNA\n         AGO   .G\n.D       XR    R15,R15\n         AGO   .G\n.E       AIF   ('&SPCNA' EQ '').F\n&NAME    LA    R15,&SPCNA\n         AGO   .G\n.F       ANOP\n&NAME    XR    R15,R15\n.G       AIF   ('&UNDL' EQ 'U').H\n         BAS   R14,LIST\n         MEXIT\n.H       BAS   R14,LISTU\n         MEND\n         MACRO\n&NAME   @OUT   &LINE,&SPCNA,&UNDL\n         AIF   ('&LINE' NE '').A\n         MNOTE 8,' OPERAND MISSING **********************************'\n         MEXIT\n.A       AIF   ('&LINE'(1,1) NE '(').B\n         AIF   ('&LINE' EQ '(1)').E\n         AIF   ('&LINE' EQ '(R1)').E\n&NAME    LR    R1,&LINE(1)\n         AGO   .C\n.B       ANOP\n&NAME    LA    R1,&LINE\n.C       AIF   ('&SPCNA' EQ '').D\n         LA    R15,&SPCNA\n         AGO   .G\n.D       XR    R15,R15\n         AGO   .G\n.E       AIF   ('&SPCNA' EQ '').F\n&NAME    LA    R15,&SPCNA\n         AGO   .G\n.F       ANOP\n&NAME    XR    R15,R15\n.G       AIF   ('&UNDL' EQ 'U').H\n         BAS   R14,OUT\n         MEXIT\n.H       BAS   R14,OUTU\n         MEND\n         MACRO\n        @SERV  &M=\n         AIF   ('&M' NE 'SERVICES').A\nSERVICES START 0\n        $HEDIT SERVICES\n         USING *,R11\n         USING COMMON,R10\n         SPACE 1\n        $DEFREG\n         EJECT\n         AGO   .B\n.A       PRINT NOGEN\nSERVICES DSECT\n         SPACE 1\n.B       ANOP\n*        SERVICES VECTOR ACCESS.\n         SPACE 1\n         AIF   ('&M' NE 'SERVICES').C\nMAINAB   B     *-*\nMAINABE  B     *-*\nSUBTLA   DC    A(*-*)              SUB-TITLE ADDRESS (SET BY USER)\n         DC    A(MAXERR)           HIGHEST MESSAGE NO.\n         DC    A(ERRTAB)           MESSAGES TABLE ADDRESS\n         SPACE 1\n         B     SKIPT     SKIP PROCESSING ROUTINE\n         B     TIMET     TIME PROCESSING ROUTINE\n         B     OUT       'SYSPRINT' OUTPUT ROUTINE\n         B     OUTU      'SYSPRINT' OUTPUT ROUTINE\n         B     LIST      'SYSLIST' OUTPUT ROUTINE\n         B     LISTU     'SYSLIST' OUTPUT ROUTINE\n         B     COPY      'SYSCOPY' OUTPUT ROUTINE\n         B     COPYU     'SYSCOPY' OUTPUT ROUTINE\n         B     FILL      FILL ROUTINE\n         B     IDCIAR    IDCAMS INPUT ALLOCATION ROUTINE\n         B     IDCOAR    IDCAMS OUTPUT ALLOCATION ROUTINE\n         B     DYNFAIL   DYNAM FAIL ROUTINE\n         B     XIDCAMS   EXECUTE IDCAMS ROUTINE\n         B     8(,R14)   SNAPS ROUTINE SWITCH\n         B     SNAPS     SNAPS ROUTINE\n         B     DMPRTN    DUMP A BYTE ROUTINE\n         B     DMPRTS    DUMP A BYTE ROUTINE\n         B     AUDITF    AUDIT FLAG ANALYSIS ROUTINE\n         AGO   .F\n.C       AIF   ('&M' NE 'MAIN').D\nABADD    B     *-*\nABEADD   B     *-*\nSUBTLA   DC    A(*-*)              SUB-TITLE ADDRESS (SET BY USER)\nMAXERR   DC    A(*-*)              HIGHEST MESSAGE NO.\nERRTAB   DC    A(*-*)              MESSAGES TABLE ADDRESS\n         AGO   .E\n.D       B     *-*\n         B     *-*\nSUBTLA   DC    A(*-*)              SUB-TITLE ADDRESS (SET BY USER)\nMAXERR   DC    A(*-*)              HIGHEST MESSAGE NO.\nERRTAB   DC    A(*-*)              MESSAGES TABLE ADDRESS\n.E       SPACE 1\nSKIPT    B     *-*       SKIP PROCESSING ROUTINE\nTIMET    B     *-*       TIME PROCESSING ROUTINE\nOUT      B     *-*       'SYSPRINT' OUTPUT ROUTINE\nOUTU     B     *-*       'SYSPRINT' OUTPUT ROUTINE\nLIST     B     *-*       'SYSLIST' OUTPUT ROUTINE\nLISTU    B     *-*       'SYSLIST' OUTPUT ROUTINE\nCOPY     B     *-*       'SYSCOPY' OUTPUT ROUTINE\nCOPYU    B     *-*       'SYSCOPY' OUTPUT ROUTINE\nFILL     B     *-*       FILL ROUTINE\nIDCIAR   B     *-*       IDCAMS INPUT ALLOCATION ROUTINE\nIDCOAR   B     *-*       IDCAMS OUTPUT ALLOCATION ROUTINE\nDYNFAIL  B     *-*       DYNAM FAIL ROUTINE\nXIDCAMS  B     *-*       EXECUTE IDCAMS ROUTINE\nSNAPS    B     8(,R14)   SNAPS ROUTINE SWITCH\n         B     *-*       SNAPS ROUTINE\nDMPRTN   B     *-*       DUMP A BYTE ROUTINE\nDMPRTS   B     *-*       DUMP A BYTE ROUTINE\nAUDITF   B     *-*       AUDIT FLAG ANALYSIS ROUTINE\n.F       EJECT\n*        ERRORS EXIT.\n         SPACE 1\nERR1     BCTR  R9,0      \"GDATE\" OR \"SDATE\" ERROR\nERR2     BCTR  R9,0      EL.VOL. (...) NOT FOUND OR SYNTAX ERROR\nERR3     BCTR  R9,0      EL. VOL. NAME .GT. 6 CHAR. LONG\nERR4     BCTR  R9,0      EL. VOL. TABLE OVERFLOW (NEV)\nERR5     BCTR  R9,0      EL. VOL. TABLE EMPTY\nERR6     BCTR  R9,0      CAT.VOL. (...) NOT FOUND OR SYNTAX ERROR\nERR7     BCTR  R9,0      CAT. VOL. NAME NOT 6 CHAR. LONG\nERR8     BCTR  R9,0      CAT. OR N-CAT. VOL. TABLE OVERFLOW (NCV)\nERR9     BCTR  R9,0      CAT. VOL. TABLE EMPTY\nERR10    BCTR  R9,0      \"DARSCA\" ERROR\nERR11    BCTR  R9,0      DDNAME'S TABLE OVERFLOW (NDD)\nERR12    BCTR  R9,0      \"DAUNTY\" ERROR\nERR13    BCTR  R9,0      DDNAME'S TABLE EMPTY\nERR14    BCTR  R9,0      \"DAVALL\" ERROR\nERR15    BCTR  R9,0      \"VTOCQO\" ERROR\nERR16    BCTR  R9,0      \"VTOCQR\" ERROR\nERR17    BCTR  R9,0      DSNAME'S TABLE OVERFLOW (NRE)\nERR18    BCTR  R9,0      \"VTOCQC\" ERROR\nERR19    BCTR  R9,0      \"CATSR\" UNEXPECTED CATALOG INDICATOR\nERR20    BCTR  R9,0      \"ICHEINTY\" (RACF READ) ERROR\nERR21    BCTR  R9,0      \"READ\" FROM 'SYSIN' ERROR\nERR22    BCTR  R9,0      CONTROL CARD ERROR\nERR23    BCTR  R9,0      \"DYNALL\" OR \"MOPEN\" OF 'SYSPDS' ERROR\nERR24    BCTR  R9,0      \"MFIND\" FROM 'SYSPDS' ERROR\nERR25    BCTR  R9,0      \"MREAD\" FROM 'SYSPDS' ERROR\nERR26    BCTR  R9,0      \"MCLOSE\" OR \"DYNALL\" OF 'SYSPDS' ERROR\nERR27    BCTR  R9,0      \"VTOCDO\" ERROR\nERR28    BCTR  R9,0      \"VTOCDR\" ERROR\nERR29    BCTR  R9,0      FMT1 DSCB DSNAME MATCH ERROR\nERR30    BCTR  R9,0      \"VTOCDW\" ERROR\nERR31    BCTR  R9,0      \"VTOCDC\" ERROR\nERR32    BCTR  R9,0      JOB-NAME ERROR (MISSING)\nERR33    BCTR  R9,0      LOCATE BY TTR ERROR\nERR34    BCTR  R9,0      \"CATSO\" ERROR\nERR35    BCTR  R9,0      \"CATSR\" ERROR\nERR36    BCTR  R9,0      \"CATSC\" ERROR\nERR37    BCTR  R9,0      PARM. FIELD SYNTAX ERROR\nERR38    BCTR  R9,0      \"INSORT\" ERROR\nERR39    BCTR  R9,0      \"GETMAIN\" ERROR - REGION SPACE TOO SMALL\nERR40    BCTR  R9,0      \"READ\" FROM 'SYSCMD' ERROR\nERR41    BCTR  R9,0      'EXEMPT' - DSNAME .GT. 44 CHAR. LONG\nERR42    BCTR  R9,0      STACK SAVE AREAS ERROR\nERR43    BCTR  R9,0      N-CAT.VOL. (...) SYNTAX ERROR\nERR44    BCTR  R9,0      N-CAT. VOL. NAME .GT. 6 CHAR. LONG\nERR45    BCTR  R9,0      \"EDITH\" ERROR\nERR46    BCTR  R9,0      COMPUTED SPACE VALUE TOO BIG\nERR47    BCTR  R9,0      \"SNAP\" ERROR\nERR48    BCTR  R9,0      SKIP MODULE NAME .GT. 8 CHAR. LONG\nERR49    BCTR  R9,0      SKIP MODULE NAMES TABLE OVERFLOW (NSK)\nERR50    BCTR  R9,0      NOT-DECLARED VOL. TABLE OVERFLOW (NDV)\nERR51    BCTR  R9,0      N-LOC.VOL. NAME NOT 6 CHAR. LONG\nERR52    BCTR  R9,0      N-LOC.VOL. - DSNAME .GT. 44 CHAR. LONG\nERR53    BCTR  R9,0      BYPASS RACF NAME .GT. 44 CHAR. LONG OR SYNTAX\nERR54    BCTR  R9,0      BYPASS RACF NAMES TABLE OVERFLOW (NBR)\nERR55    BCTR  R9,0      \"ICFSO\" ERROR\nERR56    BCTR  R9,0      \"ICFSR\" ERROR\nERR57    BCTR  R9,0      \"ICFSC\" ERROR\nERR58    BCTR  R9,0      CATALOG VOLUME NOT FOUND - LOGIC ERROR\nERR59    BCTR  R9,0      \"ACCOUNT\" - ACC. VOL. TABLE OVERFLOW (NEV)\nERR60    BCTR  R9,0      \"DYNALL\" OR \"PUNCH\" TO 'SYSDATA' ERROR\nERR61    BCTR  R9,0      COPY DSNAME MISSING OR .GT. 44 CHAR. LONG\nERR62    BCTR  R9,0      COPY START COMMAND TEXT ERROR OR TOO LONG\nERR63    BCTR  R9,0      UNEXPECTED DDNAME'S TABLE STATUS ERROR\nERR64    BCTR  R9,0      CVOL PTR. TABLE OVERFLOW (NGV)\nERR65    BCTR  R9,0      WRONG FIRST LEVEL INDEX\nERR66    BCTR  R9,0      DYNAMIC ALLOCATION OF A CATALOG ERROR\nERR67    BCTR  R9,0      ALLOCATED ICF CATALOG IS NOT THAT REQUESTED\nERR68    BCTR  R9,0      UNEXPECTED ICF CATALOG INDICATOR RECEIVED\nERR69    BCTR  R9,0      \"GETMAIN\" ERROR - IDCAMS ARRAY(S) SPACE\nERR70    BCTR  R9,0      ICF CATALOG NAME NOT FOUND - IDCAMS GENERATE\nERR71    BCTR  R9,0      \"DYNALL\" OR \"PUNCH\" TO 'XQIDIN' ERROR\nERR72    BCTR  R9,0      \"DYNALL\" OR \"VREAD\" TO 'XQIDOUT' ERROR\nERR73    BCTR  R9,0      'XQIDOUT' - INVALID LOGICAL RECORD LENGTH\nERR74    BCTR  R9,0      VTOC ERROR - MULTIPLE FORMAT 4 DSCB\nERR75    BCTR  R9,0      HIGH-LEVEL QUALIFIER (HLQ) NAME TOO LONG\nERR76    BCTR  R9,0      HLQ NAMES TABLE OVERFLOW\nERR77    BCTR  R9,0      GENERIC NAMES TABLE OVERFLOW\nERR78    BCTR  R9,0      COPYVOL(...) ERROR - INVALID CODING\nERR79    BCTR  R9,0      IDCAMS FUNCTION - INVALID FUNCTION CODE\nERR80    BCTR  R9,0      IDCAMS FUNCTION - INVALID DEVICE TYPE\n         AIF   ('&M' NE 'SERVICES').G\nMAXERR   EQU   ((*-ERR1)/2)+1\n         B     MAINAB\n         MEXIT\n.G       B     *-*\n         MEND\n         MACRO\n&NAME   @SNAPS &IND,&LIST,&TEST\n         AIF   ('&IND' EQ '').A\n         AIF   ('&LIST' EQ '').A\n         AIF   ('&TEST' EQ '').A\n&NAME    TM    RUN&IND,&IND&TEST\n         BZ    *+L'*+12\n         BAS   R14,SNAPS\n         DC    AL4(&LIST),XL1'0',CL3'&TEST'\n         MEXIT\n.A       MNOTE 8,' OPERAND MISSING **********************************'\n         MEND\n         MACRO\n&NAME   @X     &WHERE\n         AIF   ('&WHERE' EQ '').A\n&NAME    L     R15,=V(&WHERE)\n         BASR  R14,R15\n         MEXIT\n.A       MNOTE 8,' OPERAND MISSING **********************************'\n         MEND\n         MACRO\n&NAME   @XE    &DUMMY\n&NAME    LH    R15,STACKNO         BACKWARD STACK\n         BCT   R15,*+L'*+4\n         B     ERR42\n         STH   R15,STACKNO\n         L     R13,4(R13)          BACK TO PREVIOUS SAVE AREA\n         LM    R14,R12,12(R13)     RESTORE ENTRY REGISTERS\n         MVI   12(R13),X'FF'       SET RETURN INDICATOR\n         MVC   MNAME(STIDL),SVARL(R13)  RESTORE PREVIOUS ID\n         BR    R14                 RETURN\n         DROP  R8                  KILL LOCAL ADDRESSABILITY\n         DROP  R10                 KILL COMMON ADDRESSABILITY\n         SPACE 1\n        LTORG\n         MEND\n         MACRO\n&NAME   @XS    &ALIAS=\n         AIF   ('&NAME' EQ '').E\n&NAME    START 0\n        $HEDIT\n         AIF   ('&ALIAS' EQ '').A\n        $HEDIT &ALIAS              MODULE ALIAS NAME\n.A      $DEFREG\n         EJECT\n* REGISTERS USE :  R8  = LOCAL BASE REGISTER\n* ---------------  R9  = ERROR NUMBER REGISTER\n*                  R10 = COMMON BASE REGISTER\n*                  R11 = SERVICES BASE REGISTER\n*                  R12 = MAIN BASE REGISTER\n         SPACE 1\n         USING COMMON,R10          COMMON ADDRESSABILITY\n         USING SERVICES,R11        SERVICES ADDRESSABILITY\n         USING *,R15               TEMPORARY ADDRESSABILITY\n         SPACE 1\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS\n         B     *+L'*+(4*8)         BRANCH AROUND ID-TEXT\n         DROP  R15\n         SPACE 1\n         DC    CL8'&NAME'          MODULE IDENTIFIER\n         AIF   ('&ALIAS' EQ '').B\n         DC    CL8'&ALIAS'         MODULE ALIAS NAME\n         AGO   .C\n.B       DC    CL8' '              NO MODULE ALIAS NAME\n.C       DC    C'-'\n         DC    CL8'&SYSDATE'       ASSEMBLY DATE (MM/DD/YY)\n         DC    C'-',CL5'&SYSTIME',C'-'  ASSEMBLY TIME (HH.MM)\n         SPACE 1\n         LR    R8,R15              SET BASE REGSITER\n         USING &NAME,R8            LOCAL ADDRESSABILITY\n         BAS   R14,SKIPT           CONTROL IF SKIP REQUESTED\n         MVC   MNAME(STIDL),8(R8)  SET MODULE ID\n         LH    R15,STACKNO         CONTROL STACK AVAILABILITY\n         LA    R15,1(R15)\n         CH    R15,SVSTACK\n         BH    ERR42\n         STH   R15,STACKNO\n         LR    R15,R13\n         LA    R13,STCKL(R13)      PUSH SAVE AREA STACK\n         XC    0(SVARL,R13),0(R13) CLEAR NEW SAVE AREA\n         ST    R13,8(R15)          CHAIN SAVE AREAS\n         ST    R15,4(R13)\n         MVC   SVARL(STIDL,R13),MNAME   SET STACK ID\n         AIF   ('&ALIAS' EQ '').D\n         BAS   R14,TIMET           STARTING TIME STAMP\n.D       SPACE 1\n         MEXIT\n.E       MNOTE 8,' LABEL MISSING ************************************'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLMAIN": {"ttr": 12807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x00\\xdc\\x00\\xdc\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 220, "newlines": 220, "modlines": 0, "user": "SYSPAJA"}, "text": "MAIN     TITLE 'CLEAN-UP MAINTENANCE PROCESSING (MAIN).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\nMAIN     START 0\n         SPACE 1\n        $HEDIT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *           C L E A N - U P           * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n* AUTHOR :     MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* RESTRICTION :    BE CAREFULL WHEN RUNNING THIS PROGRAM NOT ALONE    *\n* -------------    IN THE SYSTEM, UNPREDICTABLE RESULTS MAY OCCURS    *\n*                  UNLESS ALL ACTIVE JOBS ARE EXECUTION FREEZED.      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n        @DOC\n         EJECT\n        $DEFREG\n*        REGISTERS USE :\n*        ---------------\n*\n*              R8  = LOCAL FUNCTIONS BASE REGISTER (@X CALL FEATURE).\n*              R9  = ERROR NUMBER COUNTER.\n*              R10 = CONSTANTS AND WORK-AREAS BASE REGISTER (COMMON).\n*              R11 = SERVICES BASE REGISTER.\n*              R12 = MAIN BASE REGISTER.\n*              R13 = SAVE AREA POINTER.\n*              R14 = LINK REGISTER.\n         EJECT\n*        START PROGRAM ENTRY.\n*\n*        NOTE - THE MODULE IS NOT RE-ENTERABLE, BUT THE 'RENT' OPTION\n*               IN THE $XENT AND $XRET MACROS IS USED TO OBTAIN AND\n*               FREE THE STACK SAVE AREAS SPACE.\n         SPACE 1\n        $XENT  BASE=R12,LV=NSSVL,TYPE=RENT\n         ST    R13,SLDBGA          SET SAVE AREAS STACK ADDRESS\n         LM    R10,R11,MAINADD\n         USING COMMON,R10\n         USING SERVICES,R11\n         L     R9,MAXERR           TO COMPUTE ERROR NUMBER\n         MVC   SVARL(STIDL,R13),8(R12)  SET MAIN IDENTIFIER\n         MVC   ABADD+2(2),=S(MAINAB)    FILL ADDRESSES\n         MVC   ABEADD+2(2),=S(MAINABE)\n         B     MAINGO\n         SPACE 1\nMAINADD  DC    A(COMMON),V(SERVICES)\n         EJECT\nMAINGO  @X     A001      INITIALIZATION\n        @X     A002      INITIALIZATION (CONT'D)\n        @X     A003      READ EL. AND CAT. VOLUMES NAMES\n        @X     A004      ALLOCATE VOLUMES\n        @X     A005      READ VTOC'S CONTENTS\n        @X     A006      READ CATALOGS CONTENTS\n        @X     A007      READ RACF (DATA-SETS) CONTENTS\n        @X     A008      LOCATE DATA-SETS\n        @X     A009      SCHEDULE N-CAT./SPECIAL REQUESTS\n        @X     A010      CONTROLS AND DECISIONS\n        @X     A011      LIST DSNAME'S TABLE\n        @X     A012      RACF RECOVERY PROCESSING\n        @X     A013      SCRATCH/UNCATALOG PROCESSING\n        @X     A014      USER'S ACCESS LIST AND RECOVERY\n        @X     A015      GROUP'S ACCESS LIST\n         EJECT\n*        PROCESSING TERMINATION.\n         SPACE 1\n        $GDATE FILLDT,WORKD,MF=(E,MAINDT)\n         MVC   MSGENDT(2),WORKD    SET END TIME\n         MVC   MSGENDT+3(2),WORKD+2\n         MVC   MSGENDT+6(2),WORKD+4\n        @OUT   MSGEND              TERMINATED MESSAGE\n         XR    R9,R9\n         TM    RUNSN,SNDBG         SNAP 'DBG' REQUESTED?\n         BZ    MAINRET             NO\n         OI    MAINTSW+1,ON        YES, DO IT\n         B     MAINTS0\n         SPACE 1\nMAINAB   TM    RUSREQ,RUSABND\n         BZ    MAINTS\n         TM    RUNIND,RUTEST       TEST RUN?\n         BZ    MAINTS              NO\n         STM   R0,R15,MAINSVA      SAVE, DUMP IS REQUESTED\n         B     MAINAB0\nMAINTS   TM    RUNSN,SNDBG         SNAP 'DBG' REQUESTED?\n         BZ    MAINAB0             NO\nMAINTS0  STM   R0,R15,MAINSVA      ALL REGISTERS\n         BAS   R14,SNAPS\n         DC    AL4(SLDBG),XL1'0',CL3'DBG'\n         ICM   R14,B'1111',TBEVOL  DATA ARRAYS\n         BZ    MAINTSW\n         ST    R14,SLDBGD\n         L     R14,TOTSPCE\n         ST    R14,SLDBGD+4\n         OI    SLDBGD+4,X'80'\n         L     R14,=V(#SNSW#)\n         MVI   0(R14),1\n         BAS   R14,SNAPS\n         DC    AL4(SLDBGD),XL1'0',CL3'DBG'\n         L     R2,AGIDST\n         LTR   R2,R2\n         BZ    MAINTSW\n         MVC   SLDBGD+4,LGIDST\n         OI    SLDBGD+4,X'80'\nMAINTS1  ST    R2,SLDBGD\n         L     R14,=V(#SNSW#)\n         MVI   0(R14),1\n         BAS   R14,SNAPS\n         DC    AL4(SLDBGD),XL1'0',CL3'DBG'\n         L     R2,0(R2)\n         LTR   R2,R2\n         BNZ   MAINTS1\nMAINTSW  NOP   MAINRET\nMAINAB0  MVC   DIAG3(L'MNAME),MNAME\n         CVD   R9,WORKD            DISPLAY ON LOG THE EC AND RC\n         MVC   DIAG1,MASKERR\n         ED    DIAG1,WORKD+6\n         LTR   R15,R15\n         BNM   *+L'*+10\n         MVC   DIAG2,=CL4'  -1'\n         B     *+L'*+16\n         CVD   R15,WORKD\n         MVC   DIAG2,MASKERR\n         ED    DIAG2,WORKD+6\n        WTO    MF=(E,DIAG)\n         TM    RUSREQ,RUSABND\n         BZ    MAINAB1\n         TM    RUNIND,RUTEST       TEST RUN?\n         BO    MAINA33             YES, ABEND WITH DUMP\nMAINAB1  L     R1,MAXERR\n         L     R15,ERRTAB\n         CL    R1,0(R15)\n         BE    MAINAB2\n         MVC   DIAGM+22(41),=CL41'ERR.DESC. TABLE ERROR - MSG FLUSHED.'\n         B     MAINAB4\nMAINAB2  SLL   R9,2\n         AR    R9,R15\n         XR    R1,R1\n         LR    R15,R1\n         IC    R1,0(R9)\n         ICM   R15,B'0111',1(R9)\n         EX    R1,MAINMV\n         LA    R15,DIAGM+18(R1)\n         LA    R14,1\n         LA    R1,DIAGM+21\nMAINAB3  BXLE  R1,R14,*+L'*+4\n         B     MAINAB4\n         CLC   0(6,R1),=CL6'......'\n         BNE   MAINAB3\n         MVC   0(6,R1),VSNERR\nMAINAB4 WTO    MF=(E,DIAGM)\n         LA    R9,16\nMAINABE  LH    R15,STACKNO         BACKWARD STACK TO TERMINATE\nMAINAB5  CH    R15,=H'1'\n         BNH   MAINAB6\n         L     R13,4(R13)\n         SH    R15,=H'1'\n         B     MAINAB5\nMAINMV   MVC   DIAGM+22(*-*),0(R15)     << EXECUTED >>\nMAINAB6  STH   R15,STACKNO\n         SPACE 1\nMAINRET @X     A099                END OF PROCESS\n        $XRET  CC=(R9),LV=NSSVL,TYPE=RENT\n         SPACE 1\n*        ERROR ABEND.\n         SPACE 1\nMAINA33  LM    R0,R15,MAINSVA      RESTORE ALL REGISTERS\n        ABEND  33,DUMP\n         EJECT\n        CNOP   0,8\nMAINSVA  DC    16F'0'              REG. 0 TO 15 AT ERROR POINT\n         SPACE 1\nSLDBG    DC    A(MAINSVA,16*4)               REG. 0 - 15\nSLDBGA   DC    A(*-*,NSSVL)                  SAVE AREAS STACK\n         DC    A(COMMON,CMMNL+X'80000000')   COMMON\nSLDBGD   DC    A(*-*,*-*)                    DATA ARRAYS\n         SPACE 1\nMAINDT  $GDATE ,,MF=L\n         SPACE 1\nDIAG     WTO    '--- CLEAN ERROR : EC =    , RC =     (        ).',    C\n               ROUTCDE=11,DESC=7,MF=L\nDIAG1    EQU   DIAG+26,4\nDIAG2    EQU   DIAG+36,4\nDIAG3    EQU   DIAG+42,8\n         SPACE 1\nDIAGM   WTO    '                                                       C\n                                      ',ROUTCDE=(2,11),DESC=6,MF=L\n         EJECT\n        LTORG\n         SPACE 2\n         CNOP  0,8\n         SPACE 1\n* - * - * - * - * - * - * - * - * - * - * - * - * - * - * - * - * - *\n*                                                                   *\n*        P A T C H     A R E A     (AT DISPOSAL AND ACCESSIBLE      *\n*        ---------------------      THROUGH REGISTER 12)            *\n*                                                                   *\nPATCH    DC    S(*)                FIRST                            *\n         DC    98S(*)                                               *\n         DC    S(*)                LAST                             *\n*                                                                   *\n* - * - * - * - * - * - * - * - * - * - * - * - * - * - * - * - * - *\n         EJECT\n        @COMM  M=MAIN\n         SPACE 1\n        @SERV  M=MAIN\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLSERV": {"ttr": 12812, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x146\\x03\\x1c\\x03\\x1c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T14:36:00", "lines": 796, "newlines": 796, "modlines": 0, "user": "SYSPAJA"}, "text": "SERV     TITLE 'CLEAN-UP - SERVICES (SERV).'\n        PRINT  OFF\n        COPY   CLMAC\n        PRINT  ON\n        @SERV  M=SERVICES\n         EJECT\n*        SKIP PROCESSING ROUTINE (USED BY MACRO @XS).\n         SPACE 1\nSKIPT    TM    WHAT,WHCHECK        CHECK RUN REQUESTED?\n         BOR   R14                 YES\n         L     R15,TBSKP           START OF SKIP NAMES TABLE\nSKIP1    CLI   0(R15),FMOFF        END OF TABLE?\n         BER   R14                 YES\n         TM    RUNIND,RUTEST       TEST RUN?\n         BZ    *+L'*+10            NO, ONLY ALIAS NAME ACCEPTED\n         CLC   0(8,R15),8(R8)      THIS NAME?\n         BE    SKIP2               YES\n         CLC   0(8,R15),16(R8)     THIS ALIAS NAME?\n         BE    SKIP2               YES\n         LA    R15,8(R15)          NEXT NAME IF ANY\n         B     SKIP1\nSKIP2    LM    R14,R12,12(R13)     RESTORE ENTRY REGISTERS\n         MVI   12(R13),X'FF'       SET RETURN INDICATOR\n         BR    R14                 RETURN\n         EJECT\n*        TIME PROCESSING ROUTINE (USED BY MACRO @XS).\n         SPACE 1\nTIMET    TM    RUNOPT,RUTMT        TIME REQUESTED?\n         BZR   R14                 NO, SKIP INACTIVE\n         STM   R14,R1,SVREGS       SAVE RETURN\n        $GDATE FILLDT,WORKD,MF=(E,TIMEDT)\n         MVC   TMTA(2),WORKD       TIME STAMP\n         MVC   TMTA+3(2),WORKD+2\n         MVC   TMTA+6(2),WORKD+4\n         CLI   16(R8),C' '         MODULE HAS ALIAS NAME?\n         BE    *+L'*+10            NO\n         MVC   TMTB(L'TMTB),16(R8) YES, ALIAS NAME\n         B     *+L'*+6\n         MVC   TMTB(L'TMTB),8(R8)  MODULE NAME\n        @OUT   TMT\n         LM    R14,R1,SVREGS       RESTORE RETURN\n         BR    R14                 RETURN\n         SPACE 1\nSVREGS   DC    4F'0'\nTIMEDT  $GDATE ,,MF=L\n         EJECT\n*        OUTPUT ROUTINE : 'SYSPRINT', 'SYSLIST' OR 'SYSCOPY'.\n*        ----------------\n*\n*              R1  - ADDRESS OF LINE TO BE OUTPUTED (THE LINE LENGTH\n*                    MUST BE IN THE BYTE AT ADDRESS-1)\n*              R14 - LINK REGISTER\n*              R15 - ADDRESS OF SKIP PAGE CONTROL NUMBER, OPTIONAL\n*                    (FORMAT : PL2)\n*\n*        NOTES : - THE ENTRIES \"OUT\", \"OUTU\" OUTPUTS ON SYSPRINT,\n*                  \"LIST\", \"LISTU\" ON SYSLIST, AND \"COPY\", \"COPYU\"\n*                  ON SYSCOPY.\n*                - THE ENTRY ...U GENERATES AUTOMATICALLY A LINE\n*                  WHICH UNDERLINES THE PREVIOUS TEXT.\n*                - CARRIAGE REQUEST USE ASA CONTROL CHARACTERS\n*                  (BLANK = SINGLE SPACE, 0 = DOUBLE SPACE,\n*                  1 = SKIP PAGE).\n*                - THE ROUTINE GENERATES AUTOMATICALLY THE HEADER\n*                  WHEN REQUESTED SPECIFICALLY BY A SKIP PAGE OR\n*                  AT THE END OF PAGE DETECTION.\n*                - THE FOLLOWING MACROS MAY BE USED TO CALL IT :\n*                  @OUT, @LIST OR @COPY XXXX,ZZZZ,U\n*                                       (RX)\n*                  WHERE : XXXX -----> LINE TO OUTPUT\n*                          ZZZZ -----> SKIP PAGE CONTROL\n*                             U -----> OPTION TO UNDERLINE\n*                  THE MACRO @OUT OUTPUTS ON SYSPRINT, @LIST ON\n*                  SYSLIST, AND @COPY ON SYSCOPY.\n         SPACE 1\nCOPYU    OI    STATUS,STUNDER\nCOPY     STM   R14,R4,SVR14O\n         TM    WHAT,WHCOPY         IS \"SYSCOPY\" ALLOCATED?\n         BO    CPY14               YES\n         STM   R5,R12,SVR14OX\n         L     R6,DACOPY\n         USING DYNLIST,R6\n         SPACE 1\n* NOTE - WHEN THE MASTER CATALOG IS VSAM OR ICF ('STEPCAT' PRESENT)\n*        THE \"CATLG\" AT $DYNALL TIME ENDS WITH R15=04 AND ERC=5708.\n*        TO BYPASS THE SITUATION, THE DATA-SET IS FIRST ALLOCATED\n*        WITH \"KEEP\" AND THEN CATALOGED USING CATALOG MACRO (OS-CVOL)\n*        OR INVOKING IDCAMS FUNCTION (ALIAS).\n         SPACE 1\n         L     R14,ATIOT\n         USING TIODSECT,R14\n         XR    R1,R1\nCPY1     CLC   TIOELNGH(4),=XL4'0'\n         BE    CPY3\n         CLC   TIOEDDNM,=CL8'STEPCAT'\n         BE    *+L'*+10\n         IC    R1,TIOELNGH\n         AR    R14,R1\n         B     CPY1\n         DROP  R14\n         MVI   WORKDS,C' '\n         MVC   WORKDS+1(L'WORKDS-1),WORKDS\n         MVC   WORKDS(9),COPYDS\n         LA    R0,WORKDS\n         LA    R1,WORKDS+8\nCPY2     CLI   0(R1),C'.'\n         MVI   0(R1),C' '\n         BE    CPY4\n         BCTR  R1,0\n         CLR   R1,R0\n         BH    CPY2\nCPY3     MVC   DSNDISP(5),=CL5'CATLG'\n         B     CPY5\nCPY4     XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(LOCAREAL-256),LOCAREA+256\n         LA    R1,WORKDS\n         ST    R1,COPYCV+4\n         LA    R1,LOCAREA\n         ST    R1,COPYCV+12\n        LOCATE COPYCV\n         LTR   R15,R15\n         BNZ   CPY3\n         CLC   LOCAREA(2),=H'1'\n         BNE   CPY3\n         CLC   WORKDS(9),=CL9'SYSCTLG.V'\n         BE    *+L'*+10\n         MVC   COPYCNME,WORKDS\n         B     *+L'*+6\n         MVC   CPYCVOL(L'CPYCVOL),LOCAREA+6\n         MVC   DSNDISP(4),=CL4'KEEP'\nCPY5     MVC   DDNAME,DDCOPY\n         MVC   DSNAME,COPYDS\n         MVC   DSSTATUS(3),=CL3'NEW'\n         MVC   DSADISP(6),=CL6'DELETE'\n         MVC   DSUNIT(4),=CL5'DISK'\n         MVC   DSVOLSER,CPYVOL\n         MVC   DSALLOC(3),=CL3'CYL'\n         MVI   DSPRI,C'3'\n         MVI   DSSEC,C'1'\n         MVC   DSBLKSI(4),=CL4'1330'\n         MVC   DSORG(2),=CL2'PS'\n         MVC   DSLRECL(3),=CL3'133'\n         MVI   DSRECFM1,C'F'\n         MVI   DSRECFM2,C'B'\n         MVI   DSRECFM5,C'A'\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    CPY6\n         NI    STATUS,255-STCOPY-STUNDER     SUPPRESS COPY\n         MVC   SVR14OT(7*4),SVR14O SAVE AROUND DYNFAIL\n         ICM   R1,B'1111',=CL4'ALL.'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         LM    R14,R4,SVR14OT      RESTORE ORIGINAL REGISTERS\n         LM    R5,R12,SVR14OX\n         BR    R14                 RETURN\nCPY6     CLC   DSNDISP(5),=CL5'CATLG'\n         BE    CPY13\n         DROP  R6\n         L     R14,ATIOT\n         USING TIODSECT,R14\n         XR    R1,R1\nCPY7     CLC   TIOELNGH(4),=XL4'0'\n         BE    CPY8\n         CLC   TIOEDDNM,DDCOPY\n         BE    CPY9\n         IC    R1,TIOELNGH\n         AR    R14,R1\n         B     CPY7\nCPY8    WTO    '--- COPY : DD-SYSCOPY NOT FOUND IN TIOT.',             C\n               ROUTCDE=11,DESC=7\n         B     CPY12\nCPY9     ICM   R1,B'0111',TIOEFSRT\n         DROP  R14\n         USING UCBDSECT,R1\n         MVC   CPYVOL,UCBVOLI\n         MVC   CPYTY,UCBTYP\n         NI    CPYTY+1,255-UCBRR\n         DROP  R1\n         CLI   COPYCNME,C' '\n         BNE   CPY10\n         LA    R1,COPYDS\n         ST    R1,COPYCA+4\n         LA    R1,CPYCVOL\n         ST    R1,COPYCA+8\n         LA    R1,CPYCAT\n         ST    R1,COPYCA+12\n        CATALOG COPYCA\n         B     CPY11\nCPY10    LA    R1,COPYDS\n         ST    R1,IDCDSN\n         LA    R1,COPYCNME\n         ST    R1,IDCPLS\n         MVI   IDCFUN,C'C'\n         MVC   SVR14OT(7*4),SVR14O SAVE AROUND CALL\n        @X     C001                INVOKE IDCAMS FUNCTION\n         MVC   SVR14O(7*4),SVR14OT RESTORE ORIGINAL REGISTERS\nCPY11    LTR   R15,R15\n         BZ    CPY13\n        WTO    '--- COPY : CATALOG OF DATA-SET FAILED.',               C\n               ROUTCDE=11,DESC=7\nCPY12    OI    RUSREQ,RUSSCR       SET SCRATCH REQUESTED\n         NI    STATUS,255-STCOPY-STUNDER     SUPPRESS COPY\n         LM    R14,R4,SVR14O       RESTORE ORIGINAL REGISTERS\n         LM    R5,R12,SVR14OX\n         BR    R14                 RETURN\nCPY13    OI    WHAT,WHCOPY         SET ALLOCATED\n         LM    R14,R12,SVR14O\nCPY14    LA    R3,DDCOPY\n         LA    R4,PLINE\n         B     OUT1\n         SPACE 1\nLISTU    OI    STATUS,STUNDER\nLIST     STM   R14,R4,SVR14O\n         LA    R3,DDLIST\n         LA    R4,LLINE\n         B     OUT1\n         SPACE 1\nOUTU     OI    STATUS,STUNDER\nOUT      STM   R14,R4,SVR14O\n         XR    R3,R3\n         LA    R4,CLINE\nOUT1     LR    R2,R1\n         CLI   0(R2),C'1'          SKIP PAGE REQUESTED?\n         BE    OUT2                YES\n         LTR   R15,R15             SKIP PAGE CONTROL REQUESTED?\n         BZ    *+L'*+10            NO\n         CP    0(2,R4),0(2,R15)    SKIP PAGE NEEDED?\n         BH    OUT2                YES\n         CLI   0(R2),C'0'          DOUBLE SPACE?\n         BNE   *+L'*+6             NO\n         AP    0(2,R4),=PL1'+1'    YES, COUNT IT\n         CP    0(2,R4),=PL2'+55'   PAGE OVERFLOW?\n         BNH   OUT4                NO\nOUT2     AP    2(3,R4),=PL1'+1'\n         MVC   TITPAG,MASK\n         ED    TITPAG,2(R4)\n         LTR   R3,R3\n         BZ    *+L'*+6\n         MVC   TITCOM(13),=CL13'(DETAIL LIST)'\n         NOP   OUTTT\n         OI    *-3,ON\n        $PRINT TIT,,,MF=(L,OUTTIT)\nOUTTT   $PRINT ,,(R3),MF=(E,OUTTIT)     PAGE HEADER\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   OUTERR\n         LTR   R3,R3\n         BZ    *+L'*+6\n         MVC   TITCOM(13),TITCOM-1\n         NOP   OUTSS\n         OI    *-3,ON\n        $PRINT SPACE,,,MF=(L,OUTSPC)\nOUTSS   $PRINT ,,(R3),MF=(E,OUTSPC)     SPACE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   OUTERR\n         OC    SUBTLA,SUBTLA       SUB-TITLE REQUESTED?\n         BZ    OUT3                NO\n         L     R14,SUBTLA\n         MVC   OUTCC1+1(1),0(R14)\n         MVI   0(R14),C' '\n        $PRINT (R14),,(R3),MF=(E,OUTPRT)     SEND REQUESTED TEXT\n         ZAP   0(2,R4),=PL1'+1'\n         L     R1,SUBTLA\nOUTCC1   MVI   0(R1),*-*           RESTORE CARRIAGE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   OUTERR\nOUT3     ZAP   0(2,R4),=PL1'+1'\n         MVC   OUTCC2+1(1),0(R2)\n         MVI   0(R2),C' '\n         NI    OUTSW1+1,OFF\nOUT4    $PRINT (R2),,(R3),MF=(E,OUTPRT) SEND REQUESTED TEXT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   OUTERR\n         AP    0(2,R4),=PL1'+1'\nOUTSW1   B     OUTSW2\n         OI    OUTSW1+1,ON\nOUTCC2   MVI   0(R2),*-*           RESTORE CARRIAGE\nOUTSW2   TM    STATUS,STUNDER\n         BZ    OUTEX\n         NI    STATUS,255-STUNDER\n         LA    R1,1(R2)            BUILD UNDERLINE\n         BCTR  R2,0\n         CLI   0(R2),2\n         BL    OUTEX\n         XR    R14,R14\n         IC    R14,0(R2)\n         LA    R15,0(R2,R14)\nOUT5     CLI   0(R1),C' '\n         BNE   *+L'*+14\n         LA    R1,1(R1)\n         CLR   R1,R15\n         BNH   *-14\n         B     OUTEX\n         CLI   0(R15),C' '\n         BNE   *+L'*+8\n         BCTR  R15,0\n         CLR   R15,R1\n         BH    *-12\n         MVC   UNDRL+1(L'UNDRL-1),UNDRL\n         LR    R0,R15\n         SR    R0,R2\n         STC   R0,UNDRL-1\n         SR    R15,R1\n         SR    R1,R2\n         LA    R1,UNDRL-1(R1)\n         MVI   0(R1),C'-'\n         LTR   R15,R15\n         BNP   *+L'*+6\n         BCTR  R15,0\n         EX    R15,OUTMV\n         NOP   OUTUU\n         OI    *-3,ON\n        $PRINT UNDRL,,,MF=(L,OUTUND)\nOUTUU   $PRINT ,,(R3),MF=(E,OUTUND)     UNDERLINE TEXT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   OUTERR\n         AP    0(2,R4),=PL1'+1'\nOUTEX    LM    R14,R4,SVR14O\n         BR    R14                 RETURN\nOUTMV    MVC   1(*-*,R1),0(R1)\nOUTERR   LR    R9,R15\n         LTR   R3,R3\n         BZ    *+L'*+10\n         MVC   OUTMSG1(L'OUTMSG1),0(R3)\n         B     *+L'*+4\n         OI    WHATS,WHPERR        SYSPRINT ERROR\n        WTO    MF=(E,OUTMSG)\n         LTR   R3,R3\n         BZ    MAINABE\n         CLC   0(L'DDCOPY,R3),DDCOPY\n         BNE   MAINABE\n         OI    STATUS,STSCPY       SET SCRATCH COPY\n         NI    STATUS,255-STCOPY   RESET COPY REQUEST\n         B     MAINABE\n         EJECT\nCOPYCV  CAMLST NAME,*-*,,*-*\nCOPYCA  CAMLST CAT,*-*,*-*,*-*\n         SPACE 1\nOUTTIT  $PRINT ,,,MF=L             PAGE HEADER\nOUTUND  $PRINT ,,,MF=L             UNDERLINE TEXT\nOUTSPC  $PRINT ,,,MF=L             SPACE\nOUTPRT  $PRINT ,,,MF=L             SEND REQUESTED TEXT\n         EJECT\nSVR14O   DC    7F'0'               R14-R4 / ---> THESE 2 AREAS MUST\nSVR14OX  DC    8F'0'               R5-R12 /      BE IN SEQUENCE.\nSVR14OT  DC    7F'0'\nDDLIST   DC    CL8'SYSLIST'\nDDCOPY   DC    CL8'SYSCOPY'\n         SPACE 1\nOUTMSG  WTO    '--- CLEAN ERROR : PRINT ON SYSPRINT ',                 C\n               ROUTCDE=11,DESC=7,MF=L\nOUTMSG1  EQU   OUTMSG+31,8\n         SPACE 1\nMASK     DC    XL6'402020202120'\n         EJECT\n*        FILL ROUTINE :\n*        --------------\n*\n*              R0  - LENGTH OF FIELD DIVIDED BY 2\n*              R1  - ADDRESS OF THE FIELD END MINUS 2\n*              R14 - LINK REGISTER\n*\n*              NOTE - THE FOLLOWING MACRO MAY BE USED TO CALL IT :\n*                            @FILL XXXX,ZZZZ\n*                                  XXXX -----> FIELD TO BE FILLED\n*                                  ZZZZ -----> FIELD OF EQUIVALENT\n*                                              LENGTH\n         SPACE 1\nFILL     STM   R14,R1,SVR14X\n         LA    R15,2\nFILL1    CLC   0(2,R1),=CL2' '\n         BNE   FILL2\n         MVI   1(R1),C'-'\n         SR    R1,R15\n         BCT   R0,FILL1\nFILL2    LM    R14,R1,SVR14X\n         BR    R14\n         SPACE 1\nSVR14X   DC    4F'0'\n         EJECT\n*        IDCAMS INPUT-OUTPUT ALLOCATION ROUTINES :\n*        -----------------------------------------\n*\n* AT ENTRY :   R14 - LINK REGISTER\n*  AT EXIT :   R6  - DYNAM LIST POINTER\n*              R15 - RETURN CODE : 0 = ALLOCATION DONE\n*                                  4 = ALLOCATION FAILED\n         SPACE 1\nIDCIAR   XR    R15,R15             SET RC=0\n         L     R6,DAIDIN\n         USING DYNLIST,R6\n         CLC   DDNAME(8),=CL8'XQIDIN'\n         BER   R14                 RETURN IF ALREADY ALLOCATED\n         MVC   DDNAME(8),=CL8'XQIDIN'\n         MVC   DSNAME(6),=CL6'&&&&IDIN'\n         MVI   DSPRI,C'5'\n         MVC   DSBLKSI(3),=CL3'800'\n         MVC   DSORG(2),=CL2'PS'\n         MVC   DSLRECL(2),=CL2'80'\n         MVI   DSRECFM1,C'F'\n         MVI   DSRECFM2,C'B'\n         B     IDCIOA\nIDCOAR   XR    R15,R15             SET RC=0\n         L     R6,DAIDOUT\n         USING DYNLIST,R6\n         CLC   DDNAME(8),=CL8'XQIDOUT'\n         BER   R14                 RETURN IF ALREADY ALLOCATED\n         MVC   DDNAME(8),=CL8'XQIDOUT'\n         MVC   DSNAME(6),=CL6'&&&&IDOUT'\n         MVC   DSPRI(2),=CL2'10'\nIDCIOA   ST    R14,SVR14A\n         MVC   DSSTATUS(3),=CL3'NEW'\n         MVC   DSNDISP(6),=CL6'DELETE'\n         MVC   DSADISP(6),=CL6'DELETE'\n         MVC   DSUNIT(3),=CL3'VIO'\n         MVC   DSALLOC(3),=CL3'TRK'\n         MVI   DSSEC,C'5'\n        $DYNALL (R6),,MF=(E,DYNPLS)\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    IDCIOR              RETURN IF ALLOCATED\n         ICM   R1,B'1111',=CL4'ALL.'\n         LA    R15,DDNAME\n         BAS   R14,DYNFAIL\n         DROP  R6\n         LA    R15,4               SET RC=4\nIDCIOR   L     R14,SVR14A\n         BR    R14\n         SPACE 1\nSVR14A   DC    F'0'\n         EJECT\n*        DYNAM FAIL ROUTINE :\n*        --------------------\n*\n*              R1  - DYNAM OPERATION NAME ('ALL.' OR 'FREE')\n*              R14 - LINK REGISTER\n*              R15 - DYNAM DD-NAME POINTER\n         SPACE 1\nDYNFAIL  ST    R14,SVR14L\n         STCM  R1,B'1111',DFOPER\n         MVC   DFNAME(L'DFNAME),0(R15)\n         UNPK  DFERC(L'DFERC+1),RCODES(3)\n         MVI   DFERC+L'DFERC,C''''\n         TR    DFERC(L'DFERC),TRTAB-X'F0'\n         UNPK  DFINFO(L'DFINFO+1),RCODES+2(3)\n         MVI   DFINFO+L'DFINFO,C''''\n         TR    DFINFO(L'DFINFO),TRTAB-X'F0'\n         UNPK  DFRC15(L'DFRC15+1),RCODES+4(5)\n         MVI   DFRC15+L'DFRC15,C''''\n         TR    DFRC15(L'DFRC15),TRTAB-X'F0'\n        @OUT   DFMSG\n         L     R14,SVR14L\n         BR    R14                 RETURN\n         SPACE 1\nSVR14L   DC    F'0'\n         EJECT\n*        EXECUTE IDCAMS ROUTINE :\n*        ------------------------\n*\n*              R14 - LINK REGISTER\n*              R15 - IDCAMS RETURN CODE\n         SPACE 1\nXIDCAMS  ST    R14,SVR14I\n        LINK   EP=IDCAMS,PARAM=(IDCOPT,IDCDDNM),VL=1\n         L     R14,SVR14I\n         BR    R14                 RETURN\n         SPACE 1\nSVR14I   DC    F'0'\nIDCOPT   DC    H'0'\nIDCDDNM  DC    AL2(IDCDDNML)\n         DC    4XL8'0'\n         DC    CL8'XQIDIN'\n         DC    CL8'XQIDOUT'\nIDCDDNML EQU   *-IDCDDNM\n         EJECT\n*        SNAPS ROUTINE : 'SYSSNAP'\n*        ---------------\n*\n*              R14 - LINK REGISTER\n*\n*              CALL : ... BAS   R14,SNAPS\n*                         DC    AL4(LLL),XL1'0',CL3'ZZZ'\n*                         ...\n*                     LLL DC    A(FIELD#1)\n*                         DC    A(L'FIELD#1)\n*                         DC    A(FIELD#2)\n*                         DC    A(L'FIELD#2)\n*                         ...\n*                         DC    A(FIELD#N)\n*                         DC    XL1'80',AL3(L'FIELD#N)\n*\n*              NOTE - THE FOLLOWING MACRO MAY BE USED TO CALL IT :\n*                            @SNAPS XXX,YYY,ZZZ\n*                                   XXX -----> INDICATOR SUFFIX\n*                                   YYY -----> SNAP LIST\n*                                   ZZZ -----> TEST FLAG IDENTIFIER\n         SPACE 1\nSNAPS    STM   R14,R4,SVSNAP       SAVE REGISTERS\n         ICM   R2,B'1111',0(R14)   GET STARTING LIST ADDRESS\n         MVC   SNAPTFI(3),5(R14)   GET TEST FLAG IDENTIFIER\n         MVC   SNAPTFN,MNAME       GET MODULE NAME IDENTIFIER\n         NOP   SNAPS1\n         OI    *-3,ON\n        $PRINT SNAPID,,DDSNAP,MF=(L,SNAPSP)\n        $SNAP  ,,(R15),MF=(L,SNAPSS)\nSNAPS1  $PRINT MF=(E,SNAPSP)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR47\n         XR    R4,R4               SET INDICATOR\nSNAPS2   L     R3,0(R2)            FIELD ADDRESS\n         LA    R2,4(R2)            LENGTH ADDRESS\n         IC    R4,0(R2)            GET FINAL INDICATOR\n         MVI   0(R2),0             CLEAR IT FROM LENGTH\n        $SNAP  (R3),(R2),,MF=(E,SNAPSS)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERR47\n         LTR   R4,R4               END OF LIST?\n         BNZ   *+L'*+8             YES\n         LA    R2,4(R2)            NO, NEXT LIST\n         B     SNAPS2\n         MVI   0(R2),X'80'         RESTORE FINAL INDICATOR\n         LM    R14,R4,SVSNAP       RESTORE REGISTERS\n         B     8(R14)              RETURN\n         SPACE 1\nSNAPSP  $PRINT ,,,MF=L\nSNAPSS  $SNAP  ,,,MF=L\n         EJECT\n*        DUMP A BYTE ROUTINES :\n*        ----------------------\n*\n*              R0  - WORK REGISTER\n*              R1  - LINE TARGET ADDRESS\n*              R14 - LINK REGISTER\n*              R15 - BYTE ADDRESS\n         SPACE 1\nDMPRTN   MVC   1(6,R1),=CL6'-X''  '''\n         IC    R0,0(R15)\n         STC   R0,5(R1)\n         SRL   R0,4\n         STC   R0,4(R1)\n         NC    4(2,R1),=XL2'0F0F'\n         TR    4(2,R1),TRTAB\n         LA    R1,8(R1)\n         BR    R14\n         SPACE 1\nDMPRTS   MVC   0(8,R1),=CL8'X''  '''\n         IC    R0,0(R15)\n         STC   R0,3(R1)\n         SRL   R0,4\n         STC   R0,2(R1)\n         NC    2(2,R1),=XL2'0F0F'\n         TR    2(2,R1),TRTAB\n         BR    R14\n         EJECT\n*        AUDIT FLAG ANALYSIS ROUTINE :\n*        -----------------------------\n*\n*              R3  - AUDIT FLAG BYTE POINTER\n*              R5  - LINE TARGET ADDRESS\n*              R14 - LINK REGISTER\n         SPACE 1\nAUDITF   TM    0(R3),X'80'         ALL?\n         BZ    *+L'*+14            NO\n         MVC   0(3,R5),=CL3'ALL'\n         LA    R5,3(R5)\n         B     AUDITF1\n         TM    0(R3),X'40'         SUCCESS?\n         BZ    *+L'*+14            NO\n         MVC   0(7,R5),=CL7'SUCCESS'\n         LA    R5,7(R5)\n         B     AUDITF1\n         TM    0(R3),X'20'         FAILURES?\n         BZ    *+L'*+14            NO\n         MVC   0(8,R5),=CL8'FAILURES'\n         LA    R5,8(R5)\n         B     AUDITF1\n         TM    0(R3),X'10'         NONE?\n         BZ    *+L'*+14            NO\n         MVC   0(4,R5),=CL4'NONE'\n         LA    R5,4(R5)\n         B     AUDITF1\n         MVC   0(2,R5),=CL2'**'\n         LA    R5,2(R5)\nAUDITF1  MVC   1(7,R5),=CL7'(Q.S. :'\n         TM    0(R3),X'0C'         ALTER?\n         BNO   *+L'*+14            NO\n         MVC   9(5,R5),=CL5'ALTER'\n         LA    R5,15(R5)\n         B     AUDITF2\n         TM    0(R3),X'08'         CONTROL?\n         BZ    *+L'*+14            NO\n         MVC   9(7,R5),=CL7'CONTROL'\n         LA    R5,17(R5)\n         B     AUDITF2\n         TM    0(R3),X'04'         UPDATE?\n         BZ    *+L'*+14            NO\n         MVC   9(6,R5),=CL6'UPDATE'\n         LA    R5,16(R5)\n         B     AUDITF2\n         MVC   9(4,R5),=CL4'READ'\n         LA    R5,14(R5)\nAUDITF2  MVC   0(8,R5),=CL8'- Q.U. :'\n         TM    0(R3),X'03'         ALTER?\n         BNO   *+L'*+14            NO\n         MVC   9(5,R5),=CL5'ALTER'\n         LA    R5,14(R5)\n         B     AUDITF3\n         TM    0(R3),X'02'         CONTROL?\n         BZ    *+L'*+14            NO\n         MVC   9(7,R5),=CL7'CONTROL'\n         LA    R5,16(R5)\n         B     AUDITF3\n         TM    0(R3),X'01'         UPDATE?\n         BZ    *+L'*+14            NO\n         MVC   9(6,R5),=CL6'UPDATE'\n         LA    R5,15(R5)\n         B     AUDITF3\n         MVC   9(4,R5),=CL4'READ'\n         LA    R5,13(R5)\nAUDITF3  MVI   0(R5),C')'\n         BR    R14                 RETURN\n         EJECT\n        LTORG\n         EJECT\n*        ERROR DESCRIPTION MESSAGES TABLE.\n         SPACE 1\nERRTAB   DC    A(MXCERR)\n         DC    AL1(L'ERM1-1),AL3(ERM1)\n         DC    AL1(L'ERM2-1),AL3(ERM2)\n         DC    AL1(L'ERM3-1),AL3(ERM3)\n         DC    AL1(L'ERM4-1),AL3(ERM4)\n         DC    AL1(L'ERM5-1),AL3(ERM5)\n         DC    AL1(L'ERM6-1),AL3(ERM6)\n         DC    AL1(L'ERM7-1),AL3(ERM7)\n         DC    AL1(L'ERM8-1),AL3(ERM8)\n         DC    AL1(L'ERM9-1),AL3(ERM9)\n         DC    AL1(L'ERM10-1),AL3(ERM10)\n         DC    AL1(L'ERM11-1),AL3(ERM11)\n         DC    AL1(L'ERM12-1),AL3(ERM12)\n         DC    AL1(L'ERM13-1),AL3(ERM13)\n         DC    AL1(L'ERM14-1),AL3(ERM14)\n         DC    AL1(L'ERM15-1),AL3(ERM15)\n         DC    AL1(L'ERM16-1),AL3(ERM16)\n         DC    AL1(L'ERM17-1),AL3(ERM17)\n         DC    AL1(L'ERM18-1),AL3(ERM18)\n         DC    AL1(L'ERM19-1),AL3(ERM19)\n         DC    AL1(L'ERM20-1),AL3(ERM20)\n         DC    AL1(L'ERM21-1),AL3(ERM21)\n         DC    AL1(L'ERM22-1),AL3(ERM22)\n         DC    AL1(L'ERM23-1),AL3(ERM23)\n         DC    AL1(L'ERM24-1),AL3(ERM24)\n         DC    AL1(L'ERM25-1),AL3(ERM25)\n         DC    AL1(L'ERM26-1),AL3(ERM26)\n         DC    AL1(L'ERM27-1),AL3(ERM27)\n         DC    AL1(L'ERM28-1),AL3(ERM28)\n         DC    AL1(L'ERM29-1),AL3(ERM29)\n         DC    AL1(L'ERM30-1),AL3(ERM30)\n         DC    AL1(L'ERM31-1),AL3(ERM31)\n         DC    AL1(L'ERM32-1),AL3(ERM32)\n         DC    AL1(L'ERM33-1),AL3(ERM33)\n         DC    AL1(L'ERM34-1),AL3(ERM34)\n         DC    AL1(L'ERM35-1),AL3(ERM35)\n         DC    AL1(L'ERM36-1),AL3(ERM36)\n         DC    AL1(L'ERM37-1),AL3(ERM37)\n         DC    AL1(L'ERM38-1),AL3(ERM38)\n         DC    AL1(L'ERM39-1),AL3(ERM39)\n         DC    AL1(L'ERM40-1),AL3(ERM40)\n         DC    AL1(L'ERM41-1),AL3(ERM41)\n         DC    AL1(L'ERM42-1),AL3(ERM42)\n         DC    AL1(L'ERM43-1),AL3(ERM43)\n         DC    AL1(L'ERM44-1),AL3(ERM44)\n         DC    AL1(L'ERM45-1),AL3(ERM45)\n         DC    AL1(L'ERM46-1),AL3(ERM46)\n         DC    AL1(L'ERM47-1),AL3(ERM47)\n         DC    AL1(L'ERM48-1),AL3(ERM48)\n         DC    AL1(L'ERM49-1),AL3(ERM49)\n         DC    AL1(L'ERM50-1),AL3(ERM50)\n         DC    AL1(L'ERM51-1),AL3(ERM51)\n         DC    AL1(L'ERM52-1),AL3(ERM52)\n         DC    AL1(L'ERM53-1),AL3(ERM53)\n         DC    AL1(L'ERM54-1),AL3(ERM54)\n         DC    AL1(L'ERM55-1),AL3(ERM55)\n         DC    AL1(L'ERM56-1),AL3(ERM56)\n         DC    AL1(L'ERM57-1),AL3(ERM57)\n         DC    AL1(L'ERM58-1),AL3(ERM58)\n         DC    AL1(L'ERM59-1),AL3(ERM59)\n         DC    AL1(L'ERM60-1),AL3(ERM60)\n         DC    AL1(L'ERM61-1),AL3(ERM61)\n         DC    AL1(L'ERM62-1),AL3(ERM62)\n         DC    AL1(L'ERM63-1),AL3(ERM63)\n         DC    AL1(L'ERM64-1),AL3(ERM64)\n         DC    AL1(L'ERM65-1),AL3(ERM65)\n         DC    AL1(L'ERM66-1),AL3(ERM66)\n         DC    AL1(L'ERM67-1),AL3(ERM67)\n         DC    AL1(L'ERM68-1),AL3(ERM68)\n         DC    AL1(L'ERM69-1),AL3(ERM69)\n         DC    AL1(L'ERM70-1),AL3(ERM70)\n         DC    AL1(L'ERM71-1),AL3(ERM71)\n         DC    AL1(L'ERM72-1),AL3(ERM72)\n         DC    AL1(L'ERM73-1),AL3(ERM73)\n         DC    AL1(L'ERM74-1),AL3(ERM74)\n         DC    AL1(L'ERM75-1),AL3(ERM75)\n         DC    AL1(L'ERM76-1),AL3(ERM76)\n         DC    AL1(L'ERM77-1),AL3(ERM77)\n         DC    AL1(L'ERM78-1),AL3(ERM78)\n         DC    AL1(L'ERM79-1),AL3(ERM79)\n         DC    AL1(L'ERM80-1),AL3(ERM80)\n         SPACE 1\nMXCERR   EQU   (*-ERRTAB)/4\n         SPACE 1\nERM1     DC    C'\"GDATE\" OR \"SDATE\" ERROR'\nERM2     DC    C'EL.VOL. (...) NOT FOUND OR SYNTAX ERROR'\nERM3     DC    C'EL. VOL. NAME .GT. 6 CHAR. LONG'\nERM4     DC    C'EL. VOL. TABLE OVERFLOW (NEV)'\nERM5     DC    C'EL. VOL. TABLE EMPTY'\nERM6     DC    C'CAT.VOL. (...) NOT FOUND OR SYNTAX ERROR'\nERM7     DC    C'CAT. VOL. NAME NOT 6 CHAR. LONG'\nERM8     DC    C'CAT. OR N-CAT. VOL. TABLE OVERFLOW (NCV)'\nERM9     DC    C'CAT. VOL. TABLE EMPTY'\nERM10    DC    C'\"DARSCA\" ERROR'\nERM11    DC    C'DDNAME''S TABLE OVERFLOW (NDD)'\nERM12    DC    C'\"DAUNTY\" ERROR'\nERM13    DC    C'DDNAME''S TABLE EMPTY'\nERM14    DC    C'\"DAVALL\" ERROR'\nERM15    DC    C'VOLUME : ...... - \"VTOCQO\" ERROR'\nERM16    DC    C'VOLUME : ...... - \"VTOCQR\" ERROR'\nERM17    DC    C'DSNAME''S TABLE OVERFLOW (NRE)'\nERM18    DC    C'VOLUME : ...... - \"VTOCQC\" ERROR'\nERM19    DC    C'VOLUME : ...... - \"CATSR\" UNEXPECTED CAT. INDICATOR'\nERM20    DC    C'\"ICHEINTY\" (RACF READ) ERROR'\nERM21    DC    C'\"READ\" FROM ''SYSIN'' ERROR'\nERM22    DC    C'CONTROL CARD ERROR'\nERM23    DC    C'\"DYNALL\" OR \"MOPEN\" OF ''SYSPDS'' ERROR'\nERM24    DC    C'\"MFIND\" FROM ''SYSPDS'' ERROR'\nERM25    DC    C'\"MREAD\" FROM ''SYSPDS'' ERROR'\nERM26    DC    C'\"MCLOSE\" OR \"DYNALL\" OF ''SYSPDS'' ERROR'\nERM27    DC    C'VOLUME : ...... - \"VTOCDO\" ERROR'\nERM28    DC    C'VOLUME : ...... - \"VTOCDR\" ERROR'\nERM29    DC    C'FMT1 DSCB DSNAME MATCH ERROR'\nERM30    DC    C'VOLUME : ...... - \"VTOCDW\" ERROR'\nERM31    DC    C'VOLUME : ...... - \"VTOCDC\" ERROR'\nERM32    DC    C'JOB-NAME ERROR (MISSING)'\nERM33    DC    C'LOCATE BY TTR ERROR'\nERM34    DC    C'VOLUME : ...... - \"CATSO\" ERROR'\nERM35    DC    C'VOLUME : ...... - \"CATSR\" ERROR'\nERM36    DC    C'VOLUME : ...... - \"CATSC\" ERROR'\nERM37    DC    C'PARM. FIELD SYNTAX ERROR'\nERM38    DC    C'\"INSORT\" ERROR'\nERM39    DC    C'\"GETMAIN\" ERROR - REGION SPACE TOO SMALL'\nERM40    DC    C'\"READ\" FROM ''SYSCMD'' ERROR'\nERM41    DC    C'''EXEMPT'' - DSNAME .GT. 44 CHAR. LONG'\nERM42    DC    C'STACK SAVE AREAS ERROR'\nERM43    DC    C'N-CAT.VOL. (...) SYNTAX ERROR'\nERM44    DC    C'N-CAT. VOL. NAME .GT. 6 CHAR. LONG'\nERM45    DC    C'\"EDITH\" ERROR'\nERM46    DC    C'COMPUTED SPACE VALUE TOO BIG'\nERM47    DC    C'\"SNAP\" ERROR'\nERM48    DC    C'SKIP MODULE NAME .GT. 8 CHAR. LONG'\nERM49    DC    C'SKIP MODULE NAMES TABLE OVERFLOW (NSK)'\nERM50    DC    C'NOT-DECLARED VOL. TABLE OVERFLOW (NDV)'\nERM51    DC    C'N-LOC.VOL. NAME NOT 6 CHAR. LONG'\nERM52    DC    C'N-LOC.VOL. - DSNAME .GT. 44 CHAR. LONG'\nERM53    DC    C'BYPASS RACF NAME .GT. 44 CHAR. LONG OR SYNTAX ERROR'\nERM54    DC    C'BYPASS RACF NAMES TABLE OVERFLOW (NBR)'\nERM55    DC    C'VOLUME : ...... - \"ICFSO\" ERROR'\nERM56    DC    C'VOLUME : ...... - \"ICFSR\" ERROR'\nERM57    DC    C'VOLUME : ...... - \"ICFSC\" ERROR'\nERM58    DC    C'CATALOG VOLUME NOT FOUND - LOGIC ERROR'\nERM59    DC    C'\"ACCOUNT\" - ACC. VOL. TABLE OVERFLOW (NEV)'\nERM60    DC    C'\"DYNALL\" OR \"PUNCH\" TO ''SYSDATA'' ERROR'\nERM61    DC    C'COPY DSNAME MISSING OR .GT. 44 CHAR. LONG'\nERM62    DC    C'COPY START COMMAND TEXT ERROR OR TOO LONG'\nERM63    DC    C'UNEXPECTED DDNAME''S TABLE STATUS ERROR'\nERM64    DC    C'CVOL PTR. TABLE OVERFLOW (NGV)'\nERM65    DC    C'WRONG FIRST LEVEL INDEX (.................)'\nERM66    DC    C'VOLUME : ...... - \"DYNALL\" OF A CATALOG ERROR'\nERM67    DC    C'ALLOCATED ICF CATALOG IS NOT THAT REQUESTED'\nERM68    DC    C'UNEXPECTED ICF CATALOG INDICATOR RECEIVED'\nERM69    DC    C'\"GETMAIN\" ERROR - IDCAMS ARRAY(S) SPACE'\nERM70    DC    C'ICF CATALOG NAME NOT FOUND - IDCAMS GENERATE'\nERM71    DC    C'\"DYNALL\" OR \"PUNCH\" TO ''XQIDIN'' ERROR'\nERM72    DC    C'\"DYNALL\" OR \"READ\" TO ''XQIDOUT'' ERROR'\nERM73    DC    C'''XQIDOUT'' - INVALID LOGICAL RECORD LENGTH'\nERM74    DC    C'VOLUME : ...... - MULTIPLE FORMAT 4 DSCB ERROR'\nERM75    DC    C'HIGH-LEVEL QUALIFIER (HLQ) NAME TOO LONG'\nERM76    DC    C'HLQ NAMES TABLE OVERFLOW'\nERM77    DC    C'GENERIC NAMES TABLE OVERFLOW'\nERM78    DC    C'COPYVOL(...) ERROR - INVALID CODING'\nERM79    DC    C'INVOKE IDCAMS FUNCTION - INVALID FUNCTION CODE'\nERM80    DC    C'INVOKE IDCAMS FUNCTION - INVALID DEVICE TYPE'\n         SPACE 2\n        @COMM  M=SERVICES\n         SPACE 2\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMPAK": {"ttr": 13316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\x11\\x16\\x01v\\x01v\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T11:16:00", "lines": 374, "newlines": 374, "modlines": 0, "user": "SYSPAJA"}, "text": "CPAK     TITLE 'COMPARE TWO IEAPAK.. VERSIONS.'\nCOMPAK   START 0\n         SPACE 1\nCOMPAK  AMODE  24\nCOMPAK  RMODE  24\n         SPACE 2\n* PURPOSE :    COMPARE TWO VERSIONS OF THE IEAPAK.. AND OBTAIN A\n* ---------    LIST OF UNMATCHING NAMES.\n*\n* MVS/XA :     MUST BE AMODE AND RMODE 24.\n* ---------\n*\n* PROGRAM CALL : //XC     EXEC PGM=COMPAK\n* -------------- //SYSUT1   DD DSN=... 1ST IEAPAK.. ...,DISP=SHR\n*                //SYSUT2   DD DSN=... 2ND IEAPAK.. ...,DISP=SHR\n*                //SYSPRINT DD SYSOUT=A\n*\n* AUTHOR :     MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         EJECT\n        $DEFREG\nMAX      EQU   4000                MAX. NUMBER OF NAMES\nOFF      EQU   X'0F'               NO-OPERATION SWITCH SETTING\nON       EQU   X'F0'               BRANCH SWITCH SETTING\n         EJECT\n        $XENT  BASE=(R11,R12)\n         L     R3,MAXEL\n         SLL   R3,3\n         LR    R2,R3\n         SLL   R2,1\n        GETMAIN R,LV=(R2)\n         ST    R1,TAUT1\n         ALR   R1,R3\n         ST    R1,TAUT2\n        $GDATE TODAY\n         LTR   R10,R15\n         BNZ   EXIT\n        $PRINT TIT\n         LTR   R10,R15\n         BNZ   EXIT\n        $PRINT UND\n         LTR   R10,R15\n         BNZ   EXIT\n         LA    R8,DCBUT\n         USING IHADCB,R8\n         LA    R7,JF\n         USING JFCDSECT,R7\n         MVC   DDNM,FILE1\n         MVC   DCBDDNAM,DDNM\n        RDJFCB (DCBUT)\n         LTR   R10,R15\n         BNZ   JFERR\n         LA    R1,MSUU\n         MVI   0(R1),C' '\n         MVC   1(L'MSUU,R1),0(R1)\n         MVC   0(L'DDNM,R1),DDNM\n         LA    R1,L'DDNM-1(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   2(R1),C':'\n         MVC   4(L'JFCBDSNM,R1),JFCBDSNM\n         LA    R1,3+L'JFCBDSNM(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         LA    R1,1(R1)\n         CLC   JFCBELNM(L'JFCBELNM),=CL8' '\n         BE    NOMU1A\n         MVI   0(R1),C'('\n         MVC   1(L'JFCBELNM,R1),JFCBELNM\n         LA    R1,L'JFCBELNM(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   1(R1),C')'\n         LA    R1,2(R1)\nNOMU1A   CLC   JFCBVOLS(6),=CL8' '\n         BE    NOMU1B\n         MVC   0(5,R1),=CL5',VOL='\n         MVC   5(6,R1),JFCBVOLS\nNOMU1B   L     R9,TAUT1            READ SYSUT1 NAMES\n         XR    R2,R2\nREADU1  $READ  CARD,DDNM\n         LTR   R10,R15\n         BM    EOFU1\n         BNZ   EXIT\n         BAS   R14,SCAN\n         B     READU1\nEOFU1    ST    R2,MU1\n         CVD   R2,WORK\n         MVC   MSUN,=XL6'402020202120'\n         ED    MSUN,WORK+5\n        $PRINT MSU\n         LTR   R10,R15\n         BNZ   EXIT\n         LTR   R2,R2\n         BNP   ERRU\n         L     R3,TAUT1            SORT SYSUT1 NAMES\n        $SORT  (R3),(R2),8,0,8\n         MVC   DDNM,FILE2\n         MVC   DCBDDNAM,DDNM\n        RDJFCB (DCBUT)\n         LTR   R10,R15\n         BNZ   JFERR\n         LA    R1,MSUU\n         MVI   0(R1),C' '\n         MVC   1(L'MSUU,R1),0(R1)\n         MVC   0(L'DDNM,R1),DDNM\n         LA    R1,L'DDNM-1(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   2(R1),C':'\n         MVC   4(L'JFCBDSNM,R1),JFCBDSNM\n         LA    R1,3+L'JFCBDSNM(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         LA    R1,1(R1)\n         CLC   JFCBELNM(L'JFCBELNM),=CL8' '\n         BE    NOMU2A\n         MVI   0(R1),C'('\n         MVC   1(L'JFCBELNM,R1),JFCBELNM\n         LA    R1,L'JFCBELNM(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   1(R1),C')'\n         LA    R1,2(R1)\nNOMU2A   CLC   JFCBVOLS(6),=CL8' '\n         BE    NOMU2B\n         MVC   0(5,R1),=CL5',VOL='\n         MVC   5(6,R1),JFCBVOLS\nNOMU2B   L     R9,TAUT2            READ SYSUT2 NAMES\n         XR    R2,R2\nREADU2  $READ  CARD,DDNM\n         LTR   R10,R15\n         BM    EOFU2\n         BNZ   EXIT\n         BAS   R14,SCAN\n         B     READU2\nEOFU2    ST    R2,MU2\n         CVD   R2,WORK\n         MVC   MSUN,=XL6'402020202120'\n         ED    MSUN,WORK+5\n        $PRINT MSU\n         LTR   R10,R15\n         BNZ   EXIT\n         LTR   R2,R2\n         BNP   ERRU\n         L     R3,TAUT2            SORT SYSUT2 NAMES\n        $SORT  (R3),(R2),8,0,8\n         DROP  R7,R8\n         L     R2,TAUT1            COMPARE SYSUT1 AND SYSUT2 NAMES\n         XR    R3,R3\nTS1      L     R4,TAUT2\n         XR    R5,R5\nTS2      CLC   0(8,R2),0(R4)\n         BNE   TS3\n         MVC   0(8,R2),=CL8' '\n         MVC   0(8,R4),=CL8' '\n         B     TS4\nTS3      LA    R4,8(,R4)\n         LA    R5,1(,R5)\n         CL    R5,MU2\n         BL    TS2\nTS4      LA    R2,8(,R2)\n         LA    R3,1(,R3)\n         CL    R3,MU1\n         BL    TS1\n         L     R2,TAUT1            LIST SYSUT1 NAMES\n         XR    R3,R3\n         MVC   LINE+2(L'FILE1),FILE1\n         MVI   LINE+L'FILE1+3,C':'\n         LA    R4,LINE+13\nUT1      CLI   0(R2),C' '\n         BE    UT2\n         MVC   0(8,R4),0(R2)\n         LA    R4,10(,R4)\n         CL    R4,LMX\n         BL    UT2\n        $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXIT\n         LA    R4,LINE+13\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\nUT2      LA    R2,8(,R2)\n         LA    R3,1(,R3)\n         CL    R3,MU1\n         BL    UT1\n         CLI   LINE+13,C' '\n         BE    UT3\n        $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXIT\n         LA    R4,LINE+13\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\nUT3      L     R2,TAUT2            LIST SYSUT2 NAMES\n         XR    R3,R3\n         MVI   LINE,C'0'\n         MVC   LINE+2(L'FILE2),FILE2\n         MVI   LINE+L'FILE1+3,C':'\n         LA    R4,LINE+13\nUT4      CLI   0(R2),C' '\n         BE    UT5\n         MVC   0(8,R4),0(R2)\n         LA    R4,10(,R4)\n         CL    R4,LMX\n         BL    UT5\n        $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXIT\n         LA    R4,LINE+13\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\nUT5      LA    R2,8(,R2)\n         LA    R3,1(,R3)\n         CL    R3,MU2\n         BL    UT4\n         CLI   LINE+13,C' '\n         BE    END\n        $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXIT\nEND     $PRINT MEND\nRERR     LR    R10,R15\nEXIT    $RCLOSE\n        $PCLOSE\n         L     R1,TAUT1\n         L     R0,MAXEL\n         SLL   R0,4\n        FREEMAIN R,A=(1),LV=(0)\n        $XRET  CC=(R10)\nJFERR    MVC   MJFUU,DDNM\n        $PRINT MJFU\n         B     EXIT\nERRU     MVC   MERRUU,DDNM\n        $PRINT MERRU\n         B     RERR\nSCOVF    MVC   MOVFUU,DDNM\n        $PRINT MOVFU\n         B     RERR\n         SPACE 2\nSCAN     LM    R3,R5,ASCAN         CARD SCAN SUBROUTINE.\n         XR    R1,R1\n         NI    SCSW+1,OFF\nSC0      CLI   0(R3),C' '\n         BNE   SCSW\n         LTR   R1,R1\n         BZ    SC2\n         OI    SCSW+1,ON\n         B     SC2\nSCSW     NOP   SCERR\n         CLI   0(R3),C'('\n         BE    SC2\n         CLI   0(R3),C','\n         BNE   SC3\nSC2      BXLE  R3,R4,SC0\n         BR    R14\nSC3      LR    R1,R3\nSC4      BXLE  R3,R4,SC5\n         LTR   R1,R1\n         BZR   R14\n         CLI   0(R1),C'('\n         BE    SC7\n         BR    R14\nSC5      CLI   0(R3),C','\n         BE    SC6\n         CLI   0(R3),C'('\n         BE    SCERR\n         CLI   0(R3),C' '\n         BE    SCERR\n         CLI   0(R3),C')'\n         BNE   SC4\nSC6      LR    R15,R3\n         SR    R15,R1\n         BNP   SCERR\n         CH    R15,=H'8'\n         BH    SCERR\n         BCTR  R15,0\n         LA    R2,1(,R2)\n         CL    R2,MAXEL\n         BH    SCOVF\n         MVC   0(8,R9),=CL8' '\n         EX    R15,SCM\n         LA    R9,8(,R9)\n         B     SC2\nSC7      LR    R3,R1\nSCERR    LR    R2,R14\n        $PRINT DIAG\n         LTR   R10,R15\n         BNZ   EXIT\n         MVI   DIAG,C' '\n         MVC   CARD(DIAGL-L'DIAG),DIAG+L'DIAG-1\n         MVI   0(R3),C'$'\n        $PRINT DIAG\n         LTR   R10,R15\n         BNZ   EXIT\n         MVC   0(12,R3),=CL12'$... ERROR :'\n         MVC   13(L'DDNM,R3),DDNM\n        $PRINT DIAG\n         LTR   R10,R15\n         BNZ   EXIT\n         MVI   DIAG,C'0'\n         BR    R2\nSCM      MVC   0(*-*,R9),0(R1)\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n*        -------------------------\n         SPACE 1\nWORK     DC    D'0'\nTAUT1    DC    A(*-*)\nTAUT2    DC    A(*-*)\nASCAN    DC    A(CARD,1,CARD+71)\nMAXEL    DC    A(MAX)\nLMX      DC    A(LINE+110)\nMU1      DC    F'0'\nMU2      DC    F'0'\nFILE1    DC    CL8'SYSUT1'\nFILE2    DC    CL8'SYSUT2'\nDDNM     DC    CL8' '\n         SPACE 1\n         DC    AL1(DIAGL)\nDIAG     DC    CL6'0 '\nCARD     DC    CL80' ',CL20' '\nDIAGL    EQU   *-DIAG\n         DC    AL1(TITL)\nTIT      DC    C'1 IEAPAK.. COMPARE : '\nTODAY    DC    CL20' '\nTITL     EQU   *-TIT\n         DC    AL1(L'UND)\nUND      DC    C'  ------------------'\n         DC    AL1(L'MEND)\nMEND     DC    C'0 - END OF PROCESSING -'\n         DC    AL1(L'LINE)\nLINE     DC    CL110'0 '\n         DC    AL1(MSUL)\nMSU      DC    CL6'0 '\nMSUN     DC    CL6' ',C' NAMES READ FROM '\nMSUU     DC    CL80' '\nMSUL     EQU   *-MSU\n         DC    AL1(MJFUL)\nMJFU     DC    C'0 - '\nMJFUU    DC    CL8' ',C' : JFCB READ ERROR - EXIT -'\nMJFUL    EQU   *-MJFU\n         DC    AL1(MERRUL)\nMERRU    DC    C'0 - '\nMERRUU   DC    CL8' ',C' : NO NAMES - EXIT -'\nMERRUL   EQU   *-MERRU\n         DC    AL1(MOVFUL)\nMOVFU    DC    C'0 - '\nMOVFUU   DC    CL8' ',C' : TABLE OVERFLOW - EXIT -'\nMOVFUL   EQU   *-MOVFU\n         EJECT\n        LTORG\n         SPACE 2\n        PRINT  NOGEN\nDCBUT   DCB    DSORG=PS,DEVD=DA,MACRF=GM,EXLST=JOBFILE,DDNAME=XXXXXXXX\n        PRINT  GEN\n         SPACE 1\nJOBFILE  DC    0F'0',XL1'87',AL3(JF)\nJF       DC    0F'0',XL176'0'\n         SPACE 2\n        PRINT  NOGEN\n        DCBD   DSORG=PS,DEVD=DA\nJFCDSECT DSECT\n        IEFJFCBN LIST=YES\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPAK$": {"ttr": 13323, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//COMPAK   JOB (........),'INSTALL - COMPAK -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                GFDATE    TXPRINT   TXREAD                         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=COMPAK\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,READ,PRINT)\n  ENTRY   COMPAK\n  NAME    COMPAK(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPAK@": {"ttr": 13325, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x86!\\x7f\\x00\\x86!\\x7f\\x17'\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-08-05T00:00:00", "modifydate": "1986-08-05T17:27:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SYSPAJA"}, "text": "1   05/08/86\n                                                      COMPAK    1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *    COMPARE TWO IEAPAK.. VERSIONS    * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Compare two versions of the IEAPAK.. and obtain a\n  ---------    list of unmatching names.\n\n  Program call : //XC     EXEC PGM=COMPAK\n  -------------- //SYSPRINT DD SYSOUT=A\n                 //SYSUT1   DD DSN=... 1st IEAPAK.. ...,DISP=SHR\n                 //SYSUT2   DD DSN=... 2nd IEAPAK.. ...,DISP=SHR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DEVTGEN": {"ttr": 13327, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882o\\x00\\x882o\\x121\\x04\\x92\\x04\\x92\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-21T00:00:00", "modifydate": "1988-11-21T12:31:00", "lines": 1170, "newlines": 1170, "modlines": 0, "user": "SYSPAJA"}, "text": "DEVT     TITLE 'GENERATE DEVICES TABLES - RECORD/TRACK CAPACITIES.'\n        PRINT  OFF\n         MACRO\n&NAME   @TANK  &NT\n         LCLA  &N\n         LCLC  &CML\n         AIF   (T'&NT EQ 'O').MIS\n         AIF   (&NT LE 1).INV\n&N       SETA  1\n&NAME    DC    2CL(PNVALL)' '      LINE 1\n.A       ANOP\n&N       SETA  &N+1\n&CML     SETC  '           &N '\n         DC    2CL(PNVALL)' '&CML\n         AIF   (&N LT &NT).A\n&NAME.E  EQU   *\n&NAME.N  EQU   (&NAME.E-&NAME)/(2*PNVALL)\n         MEXIT\n.MIS     MNOTE 8,' OPERAND MISSING ********************************** '\n         MEXIT\n.INV     MNOTE 8,' INVALID OPERAND ********************************** '\n         MEND\n        PRINT  ON\n         SPACE 1\nDEVTGEN  START 0\n         SPACE 1\n*        *-----------------------------------------------------------*\n*        * GENERATE DEVICES TABLES PROGRAM - RECORD/TRACK CAPACITIES *\n*        *-----------------------------------------------------------*\n*\n* PURPOSE : GENERATE THE RECORD/TRACK CAPACITIES TABLES FOR\n* --------- REQUESTED DEVICES AS MEMBERS READY TO BE HANDLED\n*           BY THE 'LISTNO' PROGRAM OR AS PANELS READY TO BE\n*           PROCESSED BY ISPF HELP (SEE PANEL PAJTBLK).\n*\n* FILES DESCRIPTION (DD-CARDS) :\n* ------------------------------\n*\n*        1. SYSIN    - INPUT GENERATE REQUESTS ORDERS.\n*\n*        2. SYSPRINT - EVENTUAL DIAGNOSTICS OR THE GENERATION LIST\n*                      (LIST REQUEST).\n*\n*        3. SYSPUNCH - GENERATED INPUT FOR 'IEBUPDTE' TO LOAD THE\n*                      DEVICES TABLES NOTES MEMBERS.\n*\n*        4. SYSISPF  - GENERATED INPUT FOR 'IEBUPDTE' TO LOAD THE\n*                      DEVICES TABLES ISPF PANELS MEMBERS.\n*\n* GENERATE REQUESTS ORDERS :\n* --------------------------\n*\n*        LIST : LIST DEVICES CHARACTERISTICS AND TABLES (SYSPRINT).\n*\n*        ADD  : TO GENERATE AN IEBUPDTE ADD MEMBER CARD (SYSPUNCH OR\n*               SYSISPF).\n*\n*        REPL : TO GENERATE AN IEBUPDTE REPLACE MEMBER CARD (SYSPUNCH\n*               OR SYSISPF). THIS IS THE DEFAULT WHEN STARTING.\n*\n*        ...  : ANY DEVICE TYPE AS CODED IN THE UNIT PARAMETER OF\n*               A JCL DD STATEMENT FOR THE CURRENT SYSTEM, EVENTUALLY\n*               FOLLOWED BY / .. WHICH INDICATES AN ISPF PANEL REQUEST\n*               INSTEAD OF A NOTES MEMBER (.. IS A 2-CHARACTERS ID).\n*               - IEBUPDTE ADD OR REPLACE CARD FOR NOTES MEMBER NAMES\n*                 ARE CODED 'T...' (I.E. T3350 FOR 3350, OR T3330M1\n*                 FOR 3330-1).\n*               - IEBUPDTE ADD OR REPLACE CARD FOR ISPF PANELS NAMES\n*                 ARE CODED 'PAJTB..N' AND 'PAJTK..N'.\n         EJECT\n* CODING RULES : COLUMNS 1 TO 72 ARE USABLE FOR REQUESTS, EACH ORDER\n*                MUST BE SEPARATED FROM THE NEXT BY A COMMA AND ALL\n*                SPACES (BLANKS) ARE NEVER CONSIDERED (ELIMINATED).\n*                THE LAST ORDER MAY BE FOLLOWED BY A PERIOD TO END\n*                THE REQUESTS.\n*\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 2\n        $DEFREG\n         EJECT\n        $XENT  BASE=(R10,R11,R12)\n        CALL   HRDAY,(CD,DATE),VL\n         MVC   CD(2),DATE+6\n         MVC   DATE+6(2),DATE\n         MVC   DATE(2),CD\n         EJECT\n*        READ GENERATE REQUESTS.\n         SPACE 1\nRDCD    $READ  CARD\n         LTR   R15,R15\n         BM    REND\n         BNZ   ERRRD               READ ERROR ... EXIT.\n         OI    SWPRC,SWPM\n         LM    R7,R9,SCAN\nNXCD     MVC   CD,=CL8' '\n         MVC   CP(L'CP),=CL8' '\n         LA    R5,CD\n         LA    R6,L'CD+1\nTNXC     CLI   0(R7),C' '\n         BE    NXSC\n         CLI   0(R7),C'/'\n         BE    RPNL\n         CLI   0(R7),C','\n         BE    ENDKEY\n         CLI   0(R7),C'.'\n         BE    ENDKEY\n         BCT   R6,*+L'*+4\n         B     ERRDT\n         MVC   0(1,R5),0(R7)\n         LA    R5,1(R5)\n         B     NXSC\nRPNL     CLI   CD,C' '\n         BE    ERRDM\n         CLI   CP,C' '\n         BNE   ERRDP\n         LA    R5,CP\n         LA    R6,L'CP+1\nNXSC     BXLE  R7,R8,TNXC\n         CLI   CD,C' '\n         BE    RDCD\nENDKEY   CLC   CD,=CL8'LIST'\n         BNE   *+L'*+8\n         OI    SWNTS,SWTR\n         B     TEND\n         CLC   CD,=CL8'ADD'\n         BE    *+L'*+10\n         CLC   CD,=CL8'REPL'\n         BNE   *+L'*+14\n         MVC   BOP(L'BOP),CD\n         NI    SWNTS,255-SWTR\n         B     TEND\n         CLC   CD,=CL8'SET'\n         BNE   *+L'*+10\n         MVC   P3,=CL4'=/EJ'\n         B     TEND\n         CLC   CD,=CL8'RESET'\n         BNE   COM\n         MVC   P3,=CL4'1   '\nTEND     CLI   0(R7),C'.'\n         BE    REND\n         BXLE  R7,R8,NXCD\n         B     RDCD\nCOM      CLI   CD,C' '\n         BE    TEND\n         OI    SWPRC,SWPR\n         MVI   SWPGN,0\n         TM    SWNTS,SWTR          LIST REQUESTED?\n         BO    *+L'*+12            YES.\n         CLI   CP,C' '\n         BE    *+L'*+4\n         OI    SWPGN,SWGP\n         EJECT\n* NOW USING THE DEVICE TYPE (I.E. 2314, 3330-1, 3350, ...), SET THE\n* DEVICE CHARACTERISTICS :\n*\n*        NTRPCY : NO. OF TRACKS PER CYLINDER.\n*        NBYPTR : NO. OF BYTES PER TRACK.\n*        NUNKB  : KEY OVERHEAD.\n*        NOVHB  : OVERHEAD BLOCK OR OVERHEAD 1.\n*        NOVHLB : OVERHEAD LAST BLOCK OR OVERHEAD 2.\n*        NTOLF  : TOLERANCE FACTOR OR MODULO FACTOR.\n*        COMPUTATIONAL FLAGS :\n*               SWTF : OFF - APPLY TOLERANCE FACTOR.\n*                      ON - DO NOT APPLY TOLERANCE FACTOR.\n*               SWMD : OFF - NORMAL DEVICE (SEE TOLERANCE FACTOR).\n*                      ON - MODULO DEVICE.\n         SPACE 1\n         XC    NTRPCY,NTRPCY       CLEAR ALL VARIABLES.\n         XC    NBYPTR,NBYPTR\n         XC    NUNKB,NUNKB\n         XC    NOVHB,NOVHB\n         XC    NOVHLB,NOVHLB\n         XC    NTOLF,NTOLF\n         NI    SWNTS,255-SWKL-SWTF-SWMD\n         L     R1,=V(DAUTTB)       GET UNIT TYPES TABLE ADDRESS.\nLOOP     CLC   2(L'CD,R1),CD       CONTROL DEVICE TYPE REQUESTED.\n         BE    UFND\n         LA    R1,10(,R1)\n         CLI   0(R1),X'FF'\n         BE    ERROR1\n         B     LOOP\nUFND     L     R14,CVTPTR          GET CVT ADDRESS.\n         USING CVT,R14\n         L     R6,CVTZDTAB         DEV. CONSTANT TABLE ADDRESS.\n         DROP  R14\n         XR    R14,R14\n         LR    R15,R14\n         IC    R14,0(R1)           GET DEVICE TYPE.\n         STC   R14,UTYPE\n         IC    R15,0(R14,R6)       GET DISPLACEMENT OF TABLE.\n         LA    R15,0(R15,R6)       COMPUTE ADDRESS OF TABLE.\n         CLR   R15,R6\n         BE    ERROR2              DEVICE NOT IN 'IECZDTAB' TABLE.\n         MVC   NTRPCY+2(2),2(R15)\n         MVC   NBYPTR+2(2),4(R15)\n         TM    9(R15),BIT3\n         BZ    NORMAL\n         OI    SWNTS,SWMD\n         MVC   NOVHB+2(2),6(R15)\n         MVC   NOVHLB+2(2),10(R15)\n         MVC   NTOLF+2(2),20(R15)\n         B     CMPT\nNORMAL   MVC   NUNKB+3(1),8(R15)\n         TM    9(R15),BIT4\n         BO    ANYB\n         MVC   NOVHB+3(1),6(R15)\n         MVC   NOVHLB+3(1),7(R15)\n         B     TTLF\nANYB     MVC   NOVHB+2(2),6(R15)\n         MVC   NOVHLB+2(2),6(R15)\nTTLF     TM    9(R15),BIT7\n         BZ    NTLF\n         MVC   NTOLF+2(2),10(R15)\n         B     CMPT\nNTLF     OI    SWNTS,SWTF\nCMPT     TM    SWNTS,SWTR          LIST REQUESTED?\n         BZ    PNCH                NO.\n         SPACE 1\n*        PRINT THE DEVICE CHARACTERISTICS.\n         SPACE 1\n         MVC   L1A,CD\n         L     R0,NTRPCY\n         BAS   R14,CNVRT\n         MVC   L1B(L'L1B),ZONE+L'ZONE-L'L1B\n         LA    R5,L1\n         BAS   R6,PRT\n         L     R0,NBYPTR\n         BAS   R14,CNVRT\n         TM    SWNTS,SWMD\n         BZ    LNRM\n         MVC   L14A(L'L14A),ZONE+L'ZONE-L'L14A\n         L     R0,NTOLF\n         BAS   R14,CNVRT\n         MVC   L14B(L'L14B),ZONE+L'ZONE-L'L14B\n         LA    R5,L14\n         BAS   R6,PRT\n         L     R0,NOVHB\n         BAS   R14,CNVRT\n         MVC   L15A(L'L15A),ZONE+L'ZONE-L'L15A\n         L     R0,NOVHLB\n         BAS   R14,CNVRT\n         MVC   L15B(L'L15B),ZONE+L'ZONE-L'L15B\n         LA    R5,L15\n         BAS   R6,PRT\n         B     CONT\nLNRM     MVC   L2A(L'L2A),ZONE+L'ZONE-L'L2A\n         L     R0,NUNKB\n         BAS   R14,CNVRT\n         MVC   L2B(L'L2B),ZONE+L'ZONE-L'L2B\n         LA    R5,L2\n         BAS   R6,PRT\n         L     R0,NOVHB\n         BAS   R14,CNVRT\n         MVC   L3A(L'L3A),ZONE+L'ZONE-L'L3A\n         L     R0,NOVHLB\n         BAS   R14,CNVRT\n         MVC   L3B(L'L3B),ZONE+L'ZONE-L'L3B\n         LA    R5,L3\n         BAS   R6,PRT\n         L     R0,NTOLF\n         BAS   R14,CNVRT\n         MVC   L4A(L'L4A),ZONE+L'ZONE-L'L4A\n         MVC   L4B,=CL4'YES.'\n         TM    SWNTS,SWTF\n         BZ    *+L'*+6\n         MVC   L4B,=CL4'NO.'\n         LA    R5,L4\n         BAS   R6,PRT\nCONT     LA    R5,L5\n         BAS   R6,PRT\n         LA    R5,L6\n         BAS   R6,PRT\n         LA    R5,L7\n         BAS   R6,PRT\n         LA    R5,L8\n         BAS   R6,PRT\n         LA    R5,L0\n         BAS   R6,PRT\n         B     CYCLE\n         SPACE 1\n*        START GENERATED INPUT FOR 'IEBUPDTE'.\n         SPACE 1\nPNCH     TM    SWPGN,SWGP          ISPF PANELS REQUESTED?\n         BO    PPNL                YES.\n         LA    R0,1\n         ST    R0,LPG\n         MVC   CDN,CD\n         LA    R1,CDN\n         LA    R0,L'CDN\n         CLI   0(R1),C'-'\n         BNE   *+L'*+4\n         MVI   0(R1),C'M'\n         LA    R1,1(R1)\n         BCT   R0,*-16\n         MVC   P1A,BOP\n         MVC   P1B,CDN\n         LA    R5,P1\n         BAS   R6,PCH\n         LA    R5,P2\n         BAS   R6,PCH\n         XC    LLN,LLN\n         MVC   P3A,DATE\n         LA    R5,P3\n         BAS   R6,PCH\n         MVC   P4A,CD\n         L     R0,LPG\n         BAS   R14,CNVRT\n         MVC   P4B(L'P4B),ZONE+L'ZONE-L'P4B\n         LA    R5,P4\n         BAS   R6,PCH\n         LA    R5,P0\n         BAS   R6,PCH\n         MVC   P5A,CD\n         L     R0,NTRPCY\n         BAS   R14,CNVRT\n         MVC   P5B(L'P5B),ZONE+L'ZONE-L'P5B\n         LA    R5,P5\n         BAS   R6,PCH\n         LA    R5,P0\n         BAS   R6,PCH\n         LA    R5,P6\n         BAS   R6,PCH\n         LA    R5,P7\n         BAS   R6,PCH\n         LA    R5,P8\n         BAS   R6,PCH\n         LA    R5,P9\n         BAS   R6,PCH\n         LA    R5,P10\n         BAS   R6,PCH\n         LA    R5,P11\n         BAS   R6,PCH\n         LA    R5,P12\n         BAS   R6,PCH\n         B     CYCLE\nPPNL     MVC   PN1A,BOP\n         MVI   PN1B,C'B'\n         MVC   PN1C,CP\n         MVI   PN2A,C' '\n         MVC   PN2A+1(L'PN2A-1),PN2A\n         MVC   PN2A(L'CD),CD\n         LA    R1,PN2A+L'CD-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   2(L'PN2TX1,R1),PN2TX1\n         LA    R1,L'PN2TX1+3(R1)\n         L     R0,NTRPCY\n         BAS   R14,CNVRT\n         CLI   ZONE+L'ZONE-2,C' '\n         BE    *+L'*+10\n         MVC   0(1,R1),ZONE+L'ZONE-2\n         LA    R1,1(R1)\n         MVC   0(1,R1),ZONE+L'ZONE-1\n         MVC   2(L'PN2TX2,R1),PN2TX2\n         LA    R1,L'PN2TX2+1(R1)\n         LA    R14,PN2A+L'PN2A-2\n         SR    R14,R1\n         BM    *+L'*+10\n         MVC   1(*-*,R1),0(R1)\n         EX    R14,*-6\n         MVC   PN4A,PN4TX1\n         MVC   PN6A,PN6TX1\n         MVC   PN6B,PN6TX1\n         MVI   PN13A,C'B'\n         MVC   PN13B,CP\n         MVI   PSEQ,0\n         XC    PPOS,PPOS\n         SPACE 1\n*        GENERATE DEVICE TABLE.\n*\n*        NOTE : UNKEYED RECORDS COMPUTATION STARTS FROM DL=1, AND\n*               KEYED RECORDS FROM A FIXED KL=1 AND DL=1.\n         SPACE 1\nCYCLE    TM    SWNTS,SWKL\n         BZ    NOKEY\n         MVC   LREC,=F'1'\n         MVC   KEYL,=F'1'\n         B     RCYCL\nNOKEY    MVC   LREC,=F'1'\n         MVC   KEYL,=F'0'\nRCYCL    NI    SWNTS,255-SWFS-SWLS\nNCYCL   TRKCALC FUNCTN=TRKCAP,TYPE=UTYPE,R=1,K=KEYL+3,DD=LREC+2,       X\n               REGSAVE=YES\n         LTR   R15,R15\n         BNZ   CMPR\n         ST    R0,NRT\n         TM    SWNTS,SWFS\n         BO    CM2\n         OI    SWNTS,SWFS\nCMR      MVC   NRTP,NRT\n         L     R1,LREC\n         A     R1,KEYL\n         ST    R1,MREC\n         B     CM3\nCM2      CLC   NRT,NRTP\n         BNE   CMPRN\nCM3      L     R1,LREC\n         A     R1,=F'1'\n         ST    R1,LREC\n         B     NCYCL\nCMPR     OI    SWNTS,SWLS\nCMPRN    L     R1,LREC\n         BCTR  R1,0\n         A     R1,KEYL\n         ST    R1,NREC\n         TM    SWNTS,SWKL\n         BO    XCMP\n         TM    SWNTS,SWTR\n         BZ    CMP1\n         L     R0,MREC\n         BAS   R14,CNVRT\n         MVC   L9A(L'L9A),ZONE+L'ZONE-L'L9A\n         L     R0,NREC\n         BAS   R14,CNVRT\n         MVC   L9B(L'L9B),ZONE+L'ZONE-L'L9B\n         L     R0,NRTP\n         BAS   R14,CNVRT\n         MVC   L9C(L'L9C),ZONE+L'ZONE-L'L9C\n         LA    R5,L9\n         BAS   R6,PRT\n         B     CMP3\nCMP1     XR    R2,R2\n         L     R3,NRTP\n         M     R2,NTRPCY\n         ST    R3,NRCY\n         TM    SWPGN,SWGP\n         BO    PPN1\n         CLC   LLN,LMAX\n         BNE   CMP2\n         L     R1,LPG\n         A     R1,=F'1'\n         ST    R1,LPG\n         XC    LLN,LLN\n         LA    R5,P6\n         BAS   R6,PCH\n         MVC   P3A,DATE\n         LA    R5,P3\n         BAS   R6,PCH\n         MVC   P4A,CD\n         L     R0,LPG\n         BAS   R14,CNVRT\n         MVC   P4B(L'P4B),ZONE+L'ZONE-L'P4B\n         LA    R5,P4\n         BAS   R6,PCH\n         LA    R5,P0\n         BAS   R6,PCH\n         MVC   P5A,CD\n         L     R0,NTRPCY\n         BAS   R14,CNVRT\n         MVC   P5B(L'P5B),ZONE+L'ZONE-L'P5B\n         LA    R5,P5\n         BAS   R6,PCH\n         LA    R5,P0\n         BAS   R6,PCH\n         LA    R5,P6\n         BAS   R6,PCH\n         LA    R5,P7\n         BAS   R6,PCH\n         LA    R5,P8\n         BAS   R6,PCH\n         LA    R5,P9\n         BAS   R6,PCH\n         LA    R5,P10\n         BAS   R6,PCH\n         LA    R5,P11\n         BAS   R6,PCH\n         LA    R5,P12\n         BAS   R6,PCH\nCMP2     L     R1,LLN\n         A     R1,=F'1'\n         ST    R1,LLN\n         L     R0,MREC\n         BAS   R14,CNVRT\n         MVC   P13A(L'P13A),ZONE+L'ZONE-L'P13A\n         L     R0,NREC\n         BAS   R14,CNVRT\n         MVC   P13B(L'P13B),ZONE+L'ZONE-L'P13B\n         L     R0,NRTP\n         BAS   R14,CNVRT\n         MVC   P13C(L'P13C),ZONE+L'ZONE-L'P13C\n         L     R0,NRCY\n         BAS   R14,CNVRT\n         MVC   P13D(L'P13D),ZONE+L'ZONE-L'P13D\n         LA    R5,P13\n         BAS   R6,PCH\n         B     CMP3\nPPN1     ICM   R2,B'1111',PPOS\n         BNZ   PPN2\n         LA    R2,PNTANK\n         B     PPN4\nPPN2     CL    R2,=A(PNTANKE)\n         BL    PPN4\n         TM    SWPGN,SWRS\n         BO    *+L'*+12\n         OI    SWPGN,SWRS\n         LA    R2,PNTANK+PNVALL\n         B     PPN4\n         MVC   PN1D,PSEQ\n         OI    PN1D,C'0'\n         LA    R5,PN1\n         BAS   R6,PCH\n         LA    R5,PN2\n         BAS   R6,PCH\n         LA    R5,PN3\n         BAS   R6,PCH\n         LA    R5,PN4\n         BAS   R6,PCH\n         LA    R5,PN5\n         BAS   R6,PCH\n         LA    R5,PN6\n         BAS   R6,PCH\n         LA    R5,PN7\n         BAS   R6,PCH\n         LA    R5,PN8\n         BAS   R6,PCH\n         LA    R2,PNTANK\n         LA    R5,PN9\n         USING PNVAL,R2\nPPN3     MVC   PN9A,PNVMIN\n         MVC   PN9B,PNVMAX\n         MVC   PN9C,PNVTRK\n         MVC   PN9D,PNVCYL\n         MVI   PNVAL,C' '\n         MVC   PNVAL+1(PNVALL-1),PNVAL\n         LA    R2,PNVALL(R2)\n         MVC   PN9E,PNVMIN\n         MVC   PN9F,PNVMAX\n         MVC   PN9G,PNVTRK\n         MVC   PN9H,PNVCYL\n         MVC   PNVAL+1(PNVALL-1),PNVAL\n         LA    R2,PNVALL(R2)\n         BAS   R6,PCH\n         CL    R2,=A(PNTANKE)\n         BL    PPN3\n         LA    R5,PN3\n         BAS   R6,PCH\n         LA    R5,PN10\n         BAS   R6,PCH\n         LA    R5,PN12\n         BAS   R6,PCH\n         XR    R2,R2\n         IC    R2,PSEQ\n         LA    R2,1(R2)\n         STC   R2,PSEQ\n         MVC   PN13C,PSEQ\n         OI    PN13C,C'0'\n         LA    R5,PN13\n         BAS   R6,PCH\n         TM    SWPGN,SWFP\n         BO    *+L'*+12\n         OI    SWPGN,SWFP\n         LA    R5,PN14\n         BAS   R6,PCH\n         LA    R5,PN15\n         BAS   R6,PCH\n         NI    SWPGN,255-SWRS\n         LA    R2,PNTANK\nPPN4     L     R0,MREC\n         BAS   R14,CNVRT\n         MVC   PNVMIN(L'PNVMIN),ZONE+L'ZONE-L'PNVMIN\n         L     R0,NREC\n         BAS   R14,CNVRT\n         MVC   PNVMAX(L'PNVMAX),ZONE+L'ZONE-L'PNVMAX\n         L     R0,NRTP\n         BAS   R14,CNVRT\n         MVC   PNVTRK(L'PNVTRK),ZONE+L'ZONE-L'PNVTRK\n         L     R0,NRCY\n         BAS   R14,CNVRT\n         MVC   PNVCYL(L'PNVCYL),ZONE+L'ZONE-L'PNVCYL\n         DROP  R2\n         AL    R2,=A(2*PNVALL)\n         ST    R2,PPOS\nCMP3     TM    SWNTS,SWLS\n         BZ    CMR\n         TM    SWNTS,SWTR\n         BO    CMF\n         TM    SWPGN,SWGP\n         BO    PPL1\n         LA    R5,P6\n         BAS   R6,PCH\nCMF      OI    SWNTS,SWKL\n         TM    SWNTS,SWTR\n         BZ    CMF1\n         LA    R5,L10\n         BAS   R6,PRT\n         LA    R5,L11\n         BAS   R6,PRT\n         LA    R5,L12\n         BAS   R6,PRT\n         LA    R5,L13\n         BAS   R6,PRT\n         LA    R5,L0\n         BAS   R6,PRT\n         B     CYCLE\nCMF1     L     R1,LPG\n         A     R1,=F'1'\n         ST    R1,LPG\n         XC    LLN,LLN\n         MVC   P3A,DATE\n         LA    R5,P3\n         BAS   R6,PCH\n         MVC   P4A,CD\n         L     R0,LPG\n         BAS   R14,CNVRT\n         MVC   P4B(L'P4B),ZONE+L'ZONE-L'P4B\n         LA    R5,P4\n         BAS   R6,PCH\n         LA    R5,P0\n         BAS   R6,PCH\n         MVC   P5A,CD\n         L     R0,NTRPCY\n         BAS   R14,CNVRT\n         MVC   P5B(L'P5B),ZONE+L'ZONE-L'P5B\n         LA    R5,P5\n         BAS   R6,PCH\n         LA    R5,P0\n         BAS   R6,PCH\n         LA    R5,P6\n         BAS   R6,PCH\n         LA    R5,P14\n         BAS   R6,PCH\n         LA    R5,P8\n         BAS   R6,PCH\n         LA    R5,P15\n         BAS   R6,PCH\n         LA    R5,P10\n         BAS   R6,PCH\n         LA    R5,P11\n         BAS   R6,PCH\n         LA    R5,P12\n         BAS   R6,PCH\n         B     CYCLE\nPPL1     MVC   PN1D,PSEQ\n         OI    PN1D,C'0'\n         LA    R5,PN1\n         BAS   R6,PCH\n         LA    R5,PN2\n         BAS   R6,PCH\n         LA    R5,PN3\n         BAS   R6,PCH\n         LA    R5,PN4\n         BAS   R6,PCH\n         LA    R5,PN5\n         BAS   R6,PCH\n         LA    R5,PN6\n         BAS   R6,PCH\n         LA    R5,PN7\n         BAS   R6,PCH\n         LA    R5,PN8\n         BAS   R6,PCH\n         LA    R2,PNTANK\n         LA    R5,PN9\n         USING PNVAL,R2\nPPL2     MVC   PN9A,PNVMIN\n         MVC   PN9B,PNVMAX\n         MVC   PN9C,PNVTRK\n         MVC   PN9D,PNVCYL\n         MVI   PNVAL,C' '\n         MVC   PNVAL+1(PNVALL-1),PNVAL\n         LA    R2,PNVALL(R2)\n         MVC   PN9E,PNVMIN\n         MVC   PN9F,PNVMAX\n         MVC   PN9G,PNVTRK\n         MVC   PN9H,PNVCYL\n         MVC   PNVAL+1(PNVALL-1),PNVAL\n         LA    R2,PNVALL(R2)\n         BAS   R6,PCH\n         CL    R2,=A(PNTANKE)\n         BL    PPL2\n         LA    R5,PN3\n         BAS   R6,PCH\n         LA    R5,PN11\n         BAS   R6,PCH\n         LA    R5,PN12\n         BAS   R6,PCH\n         LA    R5,PN14\n         BAS   R6,PCH\n         LA    R5,PN15\n         BAS   R6,PCH\n         MVI   PN1B,C'K'\n         MVC   PN4A,PN4TX2\n         MVC   PN6A,PN6TX2\n         MVC   PN6B,PN6TX2\n         MVI   PN13A,C'K'\n         MVI   PSEQ,0\n         XC    PPOS,PPOS\n         NI    SWPGN,SWGP\n         OI    SWNTS,SWKL\n         B     CYCLE\nXCMP     TM    SWNTS,SWTR\n         BZ    XCMP1\n         L     R0,MREC\n         BAS   R14,CNVRT\n         MVC   L9A(L'L9A),ZONE+L'ZONE-L'L9A\n         L     R0,NREC\n         BAS   R14,CNVRT\n         MVC   L9B(L'L9B),ZONE+L'ZONE-L'L9B\n         L     R0,NRTP\n         BAS   R14,CNVRT\n         MVC   L9C(L'L9C),ZONE+L'ZONE-L'L9C\n         LA    R5,L9\n         BAS   R6,PRT\n         B     XCMP3\nXCMP1    XR    R2,R2\n         L     R3,NRTP\n         M     R2,NTRPCY\n         ST    R3,NRCY\n         TM    SWPGN,SWGP\n         BO    XPPN1\n         CLC   LLN,LMAX\n         BNE   XCMP2\n         L     R1,LPG\n         A     R1,=F'1'\n         ST    R1,LPG\n         XC    LLN,LLN\n         LA    R5,P6\n         BAS   R6,PCH\n         MVC   P3A,DATE\n         LA    R5,P3\n         BAS   R6,PCH\n         MVC   P4A,CD\n         L     R0,LPG\n         BAS   R14,CNVRT\n         MVC   P4B(L'P4B),ZONE+L'ZONE-L'P4B\n         LA    R5,P4\n         BAS   R6,PCH\n         LA    R5,P0\n         BAS   R6,PCH\n         MVC   P5A,CD\n         L     R0,NTRPCY\n         BAS   R14,CNVRT\n         MVC   P5B(L'P5B),ZONE+L'ZONE-L'P5B\n         LA    R5,P5\n         BAS   R6,PCH\n         LA    R5,P0\n         BAS   R6,PCH\n         LA    R5,P6\n         BAS   R6,PCH\n         LA    R5,P14\n         BAS   R6,PCH\n         LA    R5,P8\n         BAS   R6,PCH\n         LA    R5,P15\n         BAS   R6,PCH\n         LA    R5,P10\n         BAS   R6,PCH\n         LA    R5,P11\n         BAS   R6,PCH\n         LA    R5,P12\n         BAS   R6,PCH\nXCMP2    L     R1,LLN\n         A     R1,=F'1'\n         ST    R1,LLN\n         L     R0,MREC\n         BAS   R14,CNVRT\n         MVC   P13A(L'P13A),ZONE+L'ZONE-L'P13A\n         L     R0,NREC\n         BAS   R14,CNVRT\n         MVC   P13B(L'P13B),ZONE+L'ZONE-L'P13B\n         L     R0,NRTP\n         BAS   R14,CNVRT\n         MVC   P13C(L'P13C),ZONE+L'ZONE-L'P13C\n         L     R0,NRCY\n         BAS   R14,CNVRT\n         MVC   P13D(L'P13D),ZONE+L'ZONE-L'P13D\n         LA    R5,P13\n         BAS   R6,PCH\n         B     XCMP3\nXPPN1    ICM   R2,B'1111',PPOS\n         BNZ   XPPN2\n         LA    R2,PNTANK\n         B     XPPN4\nXPPN2    CL    R2,=A(PNTANKE)\n         BL    XPPN4\n         TM    SWPGN,SWRS\n         BO    *+L'*+12\n         OI    SWPGN,SWRS\n         LA    R2,PNTANK+PNVALL\n         B     XPPN4\n         MVC   PN1D,PSEQ\n         OI    PN1D,C'0'\n         LA    R5,PN1\n         BAS   R6,PCH\n         LA    R5,PN2\n         BAS   R6,PCH\n         LA    R5,PN3\n         BAS   R6,PCH\n         LA    R5,PN4\n         BAS   R6,PCH\n         LA    R5,PN5\n         BAS   R6,PCH\n         LA    R5,PN6\n         BAS   R6,PCH\n         LA    R5,PN7\n         BAS   R6,PCH\n         LA    R5,PN8\n         BAS   R6,PCH\n         LA    R2,PNTANK\n         LA    R5,PN9\n         USING PNVAL,R2\nXPPN3    MVC   PN9A,PNVMIN\n         MVC   PN9B,PNVMAX\n         MVC   PN9C,PNVTRK\n         MVC   PN9D,PNVCYL\n         MVI   PNVAL,C' '\n         MVC   PNVAL+1(PNVALL-1),PNVAL\n         LA    R2,PNVALL(R2)\n         MVC   PN9E,PNVMIN\n         MVC   PN9F,PNVMAX\n         MVC   PN9G,PNVTRK\n         MVC   PN9H,PNVCYL\n         MVC   PNVAL+1(PNVALL-1),PNVAL\n         LA    R2,PNVALL(R2)\n         BAS   R6,PCH\n         CL    R2,=A(PNTANKE)\n         BL    XPPN3\n         LA    R5,PN3\n         BAS   R6,PCH\n         LA    R5,PN10\n         BAS   R6,PCH\n         LA    R5,PN12\n         BAS   R6,PCH\n         XR    R2,R2\n         IC    R2,PSEQ\n         LA    R2,1(R2)\n         STC   R2,PSEQ\n         MVC   PN13C,PSEQ\n         OI    PN13C,C'0'\n         LA    R5,PN13\n         BAS   R6,PCH\n         TM    SWPGN,SWFP\n         BO    *+L'*+12\n         OI    SWPGN,SWFP\n         LA    R5,PN14\n         BAS   R6,PCH\n         LA    R5,PN15\n         BAS   R6,PCH\n         NI    SWPGN,255-SWRS\n         LA    R2,PNTANK\nXPPN4    L     R0,MREC\n         BAS   R14,CNVRT\n         MVC   PNVMIN(L'PNVMIN),ZONE+L'ZONE-L'PNVMIN\n         L     R0,NREC\n         BAS   R14,CNVRT\n         MVC   PNVMAX(L'PNVMAX),ZONE+L'ZONE-L'PNVMAX\n         L     R0,NRTP\n         BAS   R14,CNVRT\n         MVC   PNVTRK(L'PNVTRK),ZONE+L'ZONE-L'PNVTRK\n         L     R0,NRCY\n         BAS   R14,CNVRT\n         MVC   PNVCYL(L'PNVCYL),ZONE+L'ZONE-L'PNVCYL\n         DROP  R2\n         AL    R2,=A(2*PNVALL)\n         ST    R2,PPOS\nXCMP3    TM    SWNTS,SWLS\n         BZ    CMR\n         TM    SWNTS,SWTR\n         BO    TEND\n         TM    SWPGN,SWGP\n         BO    XPPL1\n         LA    R5,P6\n         BAS   R6,PCH\n         B     TEND\nXPPL1    MVC   PN1D,PSEQ\n         OI    PN1D,C'0'\n         LA    R5,PN1\n         BAS   R6,PCH\n         LA    R5,PN2\n         BAS   R6,PCH\n         LA    R5,PN3\n         BAS   R6,PCH\n         LA    R5,PN4\n         BAS   R6,PCH\n         LA    R5,PN5\n         BAS   R6,PCH\n         LA    R5,PN6\n         BAS   R6,PCH\n         LA    R5,PN7\n         BAS   R6,PCH\n         LA    R5,PN8\n         BAS   R6,PCH\n         LA    R2,PNTANK\n         LA    R5,PN9\n         USING PNVAL,R2\nXPPL2    MVC   PN9A,PNVMIN\n         MVC   PN9B,PNVMAX\n         MVC   PN9C,PNVTRK\n         MVC   PN9D,PNVCYL\n         MVI   PNVAL,C' '\n         MVC   PNVAL+1(PNVALL-1),PNVAL\n         LA    R2,PNVALL(R2)\n         MVC   PN9E,PNVMIN\n         MVC   PN9F,PNVMAX\n         MVC   PN9G,PNVTRK\n         MVC   PN9H,PNVCYL\n         MVC   PNVAL+1(PNVALL-1),PNVAL\n         LA    R2,PNVALL(R2)\n         BAS   R6,PCH\n         CL    R2,=A(PNTANKE)\n         BL    XPPL2\n         LA    R5,PN3\n         BAS   R6,PCH\n         LA    R5,PN11\n         BAS   R6,PCH\n         LA    R5,PN12\n         BAS   R6,PCH\n         LA    R5,PN14\n         BAS   R6,PCH\n         LA    R5,PN15\n         BAS   R6,PCH\n         B     TEND\nERROR1   MVC   LM1A,CD\n         LA    R5,LM1\n         BAS   R6,PRT\n         B     EXERR\nERROR2   MVC   LM2A,CD\n         LA    R5,LM2\n         BAS   R6,PRT\n         B     EXERR\nERRDT    CLI   CP,C' '\n         BNE   ERRPN\n         MVC   LM3A,CP\n         MVC   LM3A+L'LM3A(1),0(R7)\n         LA    R5,LM3\n         BAS   R6,PRT\n         B     EXERR\nERRRD    LA    R5,LM4\n         BAS   R6,PRT\n         B     EXERR\nERRPU    LA    R5,LM5\n         BAS   R6,PRT\n         B     EXERR\nERRDM    LA    R5,LM6\n         BAS   R6,PRT\n         B     EXERR\nERRDP    LA    R5,LM7\n         BAS   R6,PRT\n         B     EXERR\nERRPN    MVC   LM8A,CP\n         MVC   LM8A+L'LM8A(1),0(R7)\n         LA    R5,LM8\n         BAS   R6,PRT\n         B     EXERR\nREND     TM    SWPRC,SWPM\n         BO    *+L'*+12\n         LA    R5,LM0\n         BAS   R6,PRT\n         B     EXERR\n         TM    SWPRC,SWPR\n         BO    TSPU\n         LA    R5,LM9\n         BAS   R6,PRT\nEXERR    LA    R9,16\n         B     EXRET\nTSPU     TM    SWPRC,SWPN\n         BZ    *+L'*+12\n         NI    SWPGN,255-SWGP\n         LA    R5,P16\n         BAS   R6,PCH\n         TM    SWPRC,SWPI\n         BZ    *+L'*+12\n         OI    SWPGN,SWGP\n         LA    R5,P16\n         BAS   R6,PCH\n         XR    R9,R9\nEXRET   $RCLOSE\n        $UCLOSE\n        $PCLOSE\n        $XRET  CC=(R9)\n         EJECT\nCNVRT    CVD   R0,WORK             CONVERT SUBROUTINE.\n         MVC   ZONE,MASK\n         ED    ZONE,WORK\n         BR    R14\n         SPACE 1\nPRT     $PRINT (R5)                PRINT SUBROUTINE.\n         LTR   R15,R15\n         BZR   R6\n         B     EXERR               PRINT ERROR ... EXIT.\n         SPACE 1\nPCH      TM    SWPGN,SWGP          PUNCH SUBROUTINE.\n         BO    PCH1\n         OI    SWPRC,SWPN\n        $PUNCH (R5)\n         B     PCH2\nPCH1     OI    SWPRC,SWPI\n        $PUNCH (R5),,DDNISPF\nPCH2     LTR   R15,R15\n         BZR   R6\n         B     ERRPU               PUNCH ERROR ... EXIT.\n         EJECT\n*        LITERAL POOL.\n         SPACE 1\n        LTORG\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nWORK     DC    D'0'\nZONE     DC    CL16' '\nMASK     DC    XL16'40202020202020202020202020202120'\nNTRPCY   DC    F'0'\nNBYPTR   DC    F'0'\nNUNKB    DC    F'0'\nNOVHB    DC    F'0'\nNOVHLB   DC    F'0'\nNTOLF    DC    F'0'\nLPG      DC    F'0'\nLLN      DC    F'0'\nLREC     DC    F'0'\nKEYL     DC    F'0'\nMREC     DC    F'0'\nNREC     DC    F'0'\nNRT      DC    F'0'\nNRTP     DC    F'0'\nNRCY     DC    F'0'\nPPOS     DC    F'0'\nLMAX     DC    F'40'\nSCAN     DC    A(CARD,1,CARD+71)\nDATE     DC    CL8' '\nCD       DC    CL8' '\nCDN      DC    CL8' '\nDDNISPF  DC    CL8'SYSISPF '\nBOP      DC    CL4'REPL'\nCP       DC    CL2' '\nCARD     DC    CL80' '\nUTYPE    DC    XL1'0'\nPSEQ     DC    XL1'0'\n         SPACE 1\nSWPRC    DC    XL1'0'              SWITCHES.\nSWPM     EQU   X'01'                    CONTROL CARD READ.\nSWPR     EQU   X'02'                    ORDER PROCESSED.\nSWPN     EQU   X'04'                    OUTPUT NOTES IS ACTIVE.\nSWPI     EQU   X'08'                    OUTPUT ISPF IS ACTIVE.\nSWNTS    DC    XL1'0'              SWITCHES.\nSWFS     EQU   X'01'                    FIRST COMPUTATION.\nSWLS     EQU   X'02'                    LAST COMPUTATION.\nSWTR     EQU   X'04'                    LIST REQUESTED.\nSWKL     EQU   X'08'                    KEYED RECORD COMPUTATION.\nSWTF     EQU   X'10'                    TOLERANCE FACTOR.\nSWMD     EQU   X'20'                    MODULO DEVICE.\nSWPGN    DC    XL1'0'              SWITCHES.\nSWGP     EQU   X'01'                    ISPF PANELS GENERATION.\nSWRS     EQU   X'02'                    TANK RIGHT SIDE (PANEL).\nSWFP     EQU   X'04'                    FIRST PANEL OUT.\n         EJECT\n*        OUTPUT PRINT AND ERROR MESSAGES.\n         SPACE 1\n         DC    AL1(L'L0)\nL0       DC    C'  '\n         DC    AL1(L1L)\nL1       DC    C'1     DEVICE TYPE : '\nL1A      DC    CL8' ',C'(1 CYL = '\nL1B      DC    CL2' ',C' TRKS),'\nL1L      EQU   *-L1\n         DC    AL1(L2L)\nL2       DC    C'0     BYTES/TRK = '\nL2A      DC    CL6' ',C', KEY OVERHEAD = '\nL2B      DC    CL6' ',C','\nL2L      EQU   *-L2\n         DC    AL1(L3L)\nL3       DC    C'0     OVERHEAD BLOCK = '\nL3A      DC    CL6' ',C', OVERHEAD LAST BLOCK = '\nL3B      DC    CL6' ',C','\nL3L      EQU   *-L3\n         DC    AL1(L4L)\nL4       DC    C'0     TOLERANCE FACTOR = '\nL4A      DC    CL6' ',C', APPLY INDICATOR = '\nL4B      DC    CL4' '\nL4L      EQU   *-L4\n         DC    AL1(L5L)\nL5       DC    CL6'0 '\nL5A      DC    C'CAPACITIES WITHOUT KEYS.'\nL5L      EQU   *-L5\n         DC    AL1(L6L)\nL6       DC    CL6'0 '\n         DC    (L'L5A)C'*'\nL6L      EQU   *-L6\n         DC    AL1(L7L)\nL7       DC    C'0       MIN.     MAX.     REC.TR'\nL7L      EQU   *-L7\n         DC    AL1(L8L)\nL8       DC    C'        ----     ----     ------'\nL8L      EQU   *-L8\n         DC    AL1(L9L)\nL9       DC    CL6' '\nL9A      DC    CL6' ',C' - '\nL9B      DC    CL6' ',CL5' '\nL9C      DC    CL6' '\nL9L      EQU   *-L9\n         DC    AL1(L10L)\nL10      DC    CL6'0 '\nL10A     DC    C'CAPACITIES WITH KEYS.'\nL10L     EQU   *-L10\n         DC    AL1(L11L)\nL11      DC    CL6'0 '\n         DC    (L'L10A)C'*'\nL11L     EQU   *-L11\n         DC    AL1(L12L)\nL12      DC    C'0       MIN.     MAX.     REC/TR'\nL12L     EQU   *-L12\n         DC    AL1(L13L)\nL13      DC    C'        ----     ----     ------'\nL13L     EQU   *-L13\n         DC    AL1(L14L)\nL14      DC    C'0     BYTES/TRK = '\nL14A     DC    CL6' ',C', MODULO FACTOR = '\nL14B     DC    CL6' ',C','\nL14L     EQU   *-L14\n         DC    AL1(L15L)\nL15      DC    C'0     OVERHEAD 1 = '\nL15A     DC    CL6' ',C', OVERHEAD 2 = '\nL15B     DC    CL6' ',C','\nL15L     EQU   *-L15\n         DC    AL1(LM0L)\nLM0      DC    C'0     SYSIN - CONTROL CARD MISSING.'\nLM0L     EQU   *-LM0\n         DC    AL1(LM1L)\nLM1      DC    C'0     SYSIN - '\nLM1A     DC    CL8' ',C' : UNKNOWED DEVICE TYPE.'\nLM1L     EQU   *-LM1\n         DC    AL1(LM2L)\nLM2      DC    C'0     SYSIN - '\nLM2A     DC    CL8' ',C' : UNSUPPORTED DEVICE TYPE.'\nLM2L     EQU   *-LM2\n         DC    AL1(LM3L)\nLM3      DC    C'0     SYSIN - '\nLM3A     DC    CL8' ',C' ... : INVALID DEVICE TYPE.'\nLM3L     EQU   *-LM3\n         DC    AL1(LM4L)\nLM4      DC    C'0     SYSIN - ERROR.'\nLM4L     EQU   *-LM4\n         DC    AL1(LM5L)\nLM5      DC    C'0     SYSPUNCH - ERROR.'\nLM5L     EQU   *-LM5\n         DC    AL1(LM6L)\nLM6      DC    C'0     SYSIN - PANEL WITH NO DEVICE TYPE.'\nLM6L     EQU   *-LM6\n         DC    AL1(LM7L)\nLM7      DC    C'0     SYSIN - TWICE PANEL NUMBER.'\nLM7L     EQU   *-LM7\n         DC    AL1(LM8L)\nLM8      DC    C'0     SYSIN - '\nLM8A     DC    CL2' ',C' ... : INVALID PANEL ID.'\nLM8L     EQU   *-LM8\n         DC    AL1(LM9L)\nLM9      DC    C'0     SYSIN - NO ORDER PROCESSED.'\nLM9L     EQU   *-LM9\n         SPACE 2\n        COPY   DEVTGENP\n         EJECT\n*        ISPF PANELS VALUES TANK.\n         SPACE 1\nPNTANK  @TANK  14\n         SPACE 1\nPNVAL    DSECT\nPNVMIN   DS    CL7                 MINIMUM.\nPNVMAX   DS    CL7                 MAXIMUM.\nPNVTRK   DS    CL5                 TRACK.\nPNVCYL   DS    CL8                 CYLINDER.\nPNVALL   EQU   *-PNVAL\n         SPACE 2\n        PRINT  NOGEN\n        IEZBITS\n        CVT    DSECT=YES,LIST=YES\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEVTGEN$": {"ttr": 13833, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//DEVTGEN  JOB (........),'INSTALL - DEVTGEN -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                DAUNTY    GFDATE    TXPRINT   TXPUNCH   TXREAD     *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=DEVTGEN\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,DAUNTY,PRINT,PUNCH,READ)\n  ENTRY   DEVTGEN\n  NAME    DEVTGEN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEVTGEN@": {"ttr": 13835, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x16/\\x00\\x88\\x16/\\x12\\t\\x00W\\x00W\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-06-10T00:00:00", "modifydate": "1988-06-10T12:09:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "SYSPAJA"}, "text": "1   10/06/88\n                                                      DEVTGEN   1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *      GENERATE DEVICE'S TABLES       * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *     (RECORD/TRACK CAPACITIES).      * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose : Generate the record/track capacities tables for requested\n  --------- devices as members ready to be handled by the LISTNO\n            program or as panels ready to be processed by ISPF help\n            (see panel PAJTBLK).\n\n  Files description (DD-cards) :\n  ------------------------------\n\n         1. SYSIN    - Input generate requests orders.\n\n         2. SYSPRINT - Eventual diagnostics or the generation list\n                       (LIST request).\n\n         3. SYSPUNCH - Generated input for IEBUPDTE to load the\n                       devices tables NOTES members.\n         4. SYSISPF  - Generated input for IEBUPDTE to load the\n                       devices tables ISPF panels members.\n\n  Generate requests orders :\n  --------------------------\n\n      1. LIST : List devices characteristics and tables (SYSPRINT).\n\n      2. ADD  : To generate an IEBUPDTE add member card(SYSPUNCH or\n                SYSISPF).\n\n      3. REPL : To generate an IEBUPDTE replace member card (SYSPUNCH\n                or SYSISPF). This is the default when starting.\n\n      4. ...  : Any device type as coded in the UNIT parameter of\n                a JCL DD statement for the current system, eventually\n                followed by / .. which indicates an ISPF panel request\n                instead of a NOTES member (.. is a 2-characters ID).\n                - IEBUPDTE add or replace card for NOTES member names\n                  are coded T... (i.e. T3350 for 3350, or T3330M1 for\n                  3330-1).\n                - IEBUPDTE add or replace card for ISPF panels names\n                  are coded PAJTB..N and PAJTK..N.\n\n      Coding rules : columns 1 to 72 are usable for requests, each\n                     order must be separated from the next by a comma\n                     and all spaces (blanks) are never considered\n                     (eliminated). The last order may be followed by\n                     a period to end the requests.\n1   10/06/88\n                                                      DEVTGEN   2/2.\n\n  Job JCL example :\n  -----------------\n\n     //...      JOB ...\n     /*JOBPARM L=4\n     //GDEVT   EXEC PGM=DEVTGEN\n     //STEPLIB   DD DSN=...link.library...,DISP=SHR\n     //SYSPUNCH  DD UNIT=SYSDA,SPACE=(TRK,(10,5)),DSN=&&UPNOTES,\n     //             DCB=(DSORG=PS,RECFM=FB,BLKSIZE=800,LRECL=80),\n     //             DISP=(NEW,PASS,DELETE)\n     //SYSISPF   DD UNIT=SYSDA,SPACE=(TRK,(10,5)),DSN=&&UPISPF,\n     //             DCB=(DSORG=PS,RECFM=FB,BLKSIZE=800,LRECL=80),\n     //             DISP=(NEW,PASS,DELETE)\n     //SYSPRINT  DD SYSOUT=*\n     //SYSIN     DD *\n       LIST, 3350, 3380, 2305-2,\n       ADD, 3350, 3380, 2305-2,\n       ADD, 3350/01, 3380/02, 2305-2/03.\n     /*\n     //SDEVN   EXEC PGM=IEBUPDTE,COND=(4,LT)\n     //SYSUT1    DD DSN=...notes.library...,DISP=OLD\n     //SYSUT2    DD DSN=...notes.library...,DISP=OLD\n     //SYSPRINT  DD SYSOUT=*\n     //SYSIN     DD DSN=&&UPNOTES,DISP=(OLD,DELETE,DELETE)\n     //SDEVP   EXEC PGM=IEBUPDTE,COND=(4,LT)\n     //SYSUT1    DD DSN=...ISPF.panels.library...,DISP=OLD\n     //SYSUT2    DD DSN=...ISPF.panels.library...,DISP=OLD\n     //SYSPRINT  DD SYSOUT=*\n     //SYSIN     DD DSN=&&UPISPF,DISP=(OLD,DELETE,DELETE)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DEVTGENP": {"ttr": 14081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x16/\\x00\\x88\\x16/\\t$\\x00\\x97\\x00\\x97\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-06-10T00:00:00", "modifydate": "1988-06-10T09:24:00", "lines": 151, "newlines": 151, "modlines": 0, "user": "SYSPAJA"}, "text": "         EJECT\n*        NOTES MEMBER OUTPUT PUNCH.\n         SPACE 1\n         DC    AL1(L'P0)\nP0       DC    C'  '\n         DC    AL1(P1L)\nP1       DC    C'./LDEVT  '\nP1A      DC    CL4' ',C'    SEQFLD=738,LEVEL=00,SOURCE=0,NAME=T'\nP1B      DC    CL8' '\nP1L      EQU   *-P1\n         DC    AL1(P2L)\nP2       DC    C'./NDEVT  NUMBER  NEW1=10,INCR=10'\nP2L      EQU   *-P2\n         DC    AL1(P3L)\nP3       DC    CL4'1 '\nP3A      DC    CL8' '\nP3L      EQU   *-P3\n         DC    AL1(P4L)\nP4       DC    CL50' ',C'T'\nP4A      DC    CL8' ',C'/'\nP4B      DC    CL2' ',C'.'\nP4L      EQU   *-P4\n         DC    AL1(P5L)\nP5       DC    C'     Device type : '\nP5A      DC    CL8' ',C'(1 Cyl = '\nP5B      DC    CL2' ',C' Trks).'\nP5L      EQU   *-P5\n         DC    AL1(P7L)\nP7       DC    CL5' ',C'I'\nP7A      DC    C'            Capacities without keys            ',C'I'\nP7L      EQU   *-P7\n         DC    AL1(P6L)\nP6       DC    C'     '\n         DC    (P7L-5)C'-'\nP6L      EQU   *-P6\n         DC    AL1(P8L)\nP8       DC    CL5' ',C'I'\n         DC    (L'P7A)C'-',C'I'\nP8L      EQU   *-P8\n         DC    AL1(P9L)\nP9       DC    CL5' ',C'I'\nP9A      DC    C' Bytes per record(DL)  ',C'I'\nP9B      DC    C'      Records per      ',C'I'\nP9L      EQU   *-P9\n         DC    AL1(P10L)\nP10      DC    CL5' ',C'I'\n         DC    (L'P9A)C'-',C'I'\n         DC    (L'P9B)C'-',C'I'\nP10L     EQU   *-P10\n         DC    AL1(P11L)\nP11      DC    CL5' '\n         DC    C'I  Minimum  I  Maximum  I   Track   I  Cylinder I'\nP11L     EQU   *-P11\n         DC    AL1(P12L)\nP12      DC    CL5' '\n         DC    C'I-----------I-----------I-----------I-----------I'\nP12L     EQU   *-P12\n         DC    AL1(P13L)\nP13      DC    CL5' ',C'I  '\nP13A     DC    CL7' ',C'  I  '\nP13B     DC    CL7' ',C'  I   '\nP13C     DC    CL5' ',C'   I   '\nP13D     DC    CL5' ',C'   I'\nP13L     EQU   *-P13\n         DC    AL1(P14L)\nP14      DC    CL5' ',C'I'\n         DC    C'             Capacities with keys              ',C'I'\nP14L     EQU   *-P14\n         DC    AL1(P15L)\nP15      DC    CL5' ',C'I'\n         DC    C'Bytes per record(KL+DL)',C'I'\n         DC    C'      Records per      ',C'I'\nP15L     EQU   *-P15\n         DC    AL1(P16L)\nP16      DC    C'./LAST   ENDUP'\nP16L     EQU   *-P16\n         EJECT\n*        ISPF PANELS OUTPUT PUNCH.\n         SPACE 1\n         DC    AL1(PN1L)\nPN1      DC    C'./LDEVT  '\nPN1A     DC    CL4' ',C'    LEVEL=00,SOURCE=0,NAME=PAJT'\nPN1B     DC    CL1' '\nPN1C     DC    CL2' '\nPN1D     DC    CL1' '\nPN1L     EQU   *-PN1\n         DC    AL1(PN2L)\nPN2      DC    CL22'%Tutorial - BLKSIZE - '\nPN2A     DC    CL58' '\nPN2L     EQU   *-PN2\nPN2TX1   DC    C'block sizes table (1 Cyl ='\nPN2TX2   DC    C'Trks) -'\n         DC    AL1(PN3L)\nPN3      DC    C'+',77C'-'\nPN3L     EQU   *-PN3\n         DC    AL1(PN4L)\nPN4      DC    CL27'+I'\nPN4A     DC    CL23' ',CL27' ',C'I'\nPN4L     EQU   *-PN4\nPN4TX1   DC    CL23'Capacities without keys'\nPN4TX2   DC    CL23' Capacities with keys  '\n         DC    AL1(PN5L)\nPN5      DC    C'+I',75C'-',C'I'\nPN5L     EQU   *-PN5\n         DC    AL1(PN6L)\nPN6      DC    CL3'+I '\nPN6A     DC    CL16' ',CL22' I   Records per    I '\nPN6B     DC    CL16' ',CL21' I   Records per    I'\nPN6L     EQU   *-PN6\nPN6TX1   DC    CL16' Bytes/rec(DL)  '\nPN6TX2   DC    CL16'Bytes/rec(KL+DL)'\n         DC    AL1(PN7L)\nPN7      DC    CL40'+I Minimum  Maximum I Track   Cylinder I'\n         DC    CL38' Minimum  Maximum I Track   Cylinder I'\nPN7L     EQU   *-PN7\n         DC    AL1(PN8L)\nPN8      DC    C'+I',18C'-',C'I',18C'-',C'I'\n         DC    18C'-',C'I',18C'-',C'I'\nPN8L     EQU   *-PN8\n         DC    AL1(PN9L)\nPN9      DC    C'+I '\nPN9A     DC    CL7' ',CL2' '\nPN9B     DC    CL7' ',C' I '\nPN9C     DC    CL5' ',CL3' '\nPN9D     DC    CL8' ',C' I '\nPN9E     DC    CL7' ',CL2' '\nPN9F     DC    CL7' ',C' I '\nPN9G     DC    CL5' ',CL3' '\nPN9H     DC    CL8' ',C' I'\nPN9L     EQU   *-PN9\n         DC    AL1(PN10L)\nPN10     DC    C'+',CL26' ',C'(continued on next page)'\nPN10L    EQU   *-PN10\n         DC    AL1(PN11L)\nPN11     DC    CL2'+ '\nPN11L    EQU   *-PN11\n         DC    AL1(PN12L)\nPN12     DC    CL6')PROC '\nPN12L    EQU   *-PN12\n         DC    AL1(PN13L)\nPN13     DC    C'  &&ZCONT = PAJT'\nPN13A    DC    CL1' '\nPN13B    DC    CL2' '\nPN13C    DC    CL1' ',C' '\nPN13L    EQU   *-PN13\n         DC    AL1(PN14L)\nPN14     DC    C'  &&ZUP = PAJTBLK'\nPN14L    EQU   *-PN14\n         DC    AL1(PN15L)\nPN15     DC    CL5')END '\nPN15L    EQU   *-PN15\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ENQANAL": {"ttr": 14085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\t\\x7f\\x00\\x88\\t\\x7f\\x12\\x03\\x017\\x017\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-04-06T00:00:00", "modifydate": "1988-04-06T12:03:00", "lines": 311, "newlines": 311, "modlines": 0, "user": "SYSPAJA"}, "text": "NQAN     TITLE 'ENQ ANALYSIS PROGRAM.'\nENQANAL  START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* *                                                                 * *\n* *           E N Q     A N A L Y S I S     P R O G R A M           * *\n* *                                                                 * *\n* * PURPOSE :  OBTAIN A MORE READABLE OUTPUT LIST OF THE ENQ'S      * *\n* *            (SVC 56) TRACE DATA. IT USES AS INPUT THE NORMAL     * *\n* *            GTF OUTPUT LIST RECEIVED FROM A PREVIOUS GTF RUN.    * *\n* *                                                                 * *\n* * FILES :    SYSIN    - INPUT (GTF LIST)                          * *\n* *            SYSPRINT - OUTPUT LIST                               * *\n* *                                                                 * *\n* * AUTHOR :   MOINIL P.A.                                          * *\n* *            COMPUTING CENTER                                     * *\n* *            J.R.C. - ISPRA ESTABLISHMENT                         * *\n* *            21020 ISPRA (VA), ITALY                              * *\n* *                                                                 * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n        $DEFREG\n        $XENT  BASE=(R11,R12)\n         EJECT\n*        EXTRACT DATA FROM GTF LIST\n         SPACE 1\n         LA    R10,MAXERR\nRGTFD   $READ  GTFREC              READ OUTPUT GTF LIST\n         LTR   R15,R15             TEST RETURN CODE\n         BM    ERR1                END OUTPUT GTF LIST (NO DATE)\n         BNZ   QUIT                READ ERROR EXIT\n         CLC   GTFREC+1(9),=CL9'*** DATE '\n         BNE   RGTFD               LOOP TILL FOUND\n         MVC   DAY(L'DAY),GTFREC+5 SET DATE IN TITLE\n         MVC   STME(L'STME),GTFREC+49   SET START TIME\n         MVC   ETME(L'ETME),GTFREC+49   SET END TIME\n         SPACE 1\n         LA    R7,LINE\n         USING QLINE,R7\nRGTFS   $READ  GTFREC              READ OUTPUT GTF LIST\n         LTR   R15,R15             TEST RETURN CODE\n         BM    ENDRGTF             END OUTPUT GTF LIST\n         BNZ   QUIT                READ ERROR EXIT\n         CLC   GTFREC+1(9),=CL9'*** DATE '\n         BNE   TSVC\n         MVC   ETME(L'ETME),GTFREC+49   SET END TIME\n         B     RGTFS\nTSVC     CLC   GTFREC+1(9),=CL9'SVC   056'\n         BNE   RGTFS               LOOP TILL FOUND\n         CLC   GTFREC+35(6),=CL6' JOBN '\n         BNE   ERR2                NO MATCH\n         MVC   JOBN(L'JOBN),GTFREC+41\nRGTFM   $READ  GTFREC              READ OUTPUT GTF LIST\n         LTR   R15,R15             TEST RETURN CODE\n         BM    ERR3                END OUTPUT GTF LIST\n         BNZ   QUIT                READ ERROR EXIT\n         CLC   GTFREC+111(6),=CL6' PAGE '\n         BE    RGTFM               SKIP NEW PAGE\n         CLC   GTFREC+52(7),=CL7' MAJOR '\n         BNE   ERR4                NO MATCH\n         CLC   GTFREC+68(7),=CL7' MINOR '\n         BNE   ERR5                NO MATCH\n         MVC   MAJN(L'MAJN),GTFREC+59\n         MVC   MINN(L'MINN),GTFREC+75\nRGTFP   $READ  GTFREC              READ OUTPUT GTF LIST\n         LTR   R15,R15             TEST RETURN CODE\n         BM    ERR6                END OUTPUT GTF LIST\n         BNZ   QUIT                READ ERROR EXIT\n         CLC   GTFREC+111(6),=CL6' PAGE '\n         BE    RGTFP               SKIP NEW PAGE\n         CLC   GTFREC+11(6),=CL6'PLIST '\n         BNE   ERR7                NO MATCH\n         MVC   PLIST(L'PLIST),GTFREC+26\n         NC    GTFREC+26(8),MASK\n         TR    GTFREC+26(8),TABIN\n         PACK  DATA(L'DATA),GTFREC+26(9)\n         TM    DATA+2,X'80'\n         BZ    *+L'*+10\n         MVC   REQST,=CL4'SHR'\n         B     *+L'*+6\n         MVC   REQST,=CL4'EXCL'\n         TM    DATA+2,X'48'\n         BZ    SS1\n         BO    SS2\n         TM    DATA+2,X'08'\n         BZ    SS3\n         MVC   SCOPE,=CL7'RESERVE'\n         B     SS0\nSS1      MVC   SCOPE,=CL7'STEP'\n         B     SS0\nSS2      MVC   SCOPE,=CL7'SYSTEMS'\n         B     SS0\nSS3      MVC   SCOPE,=CL7'SYSTEM'\nSS0      TM    DATA+2,X'07'\n         BZ    RR0\n         BO    RR3\n         TM    DATA+2,X'03'\n         BZ    RR0\n         BO    RR2\n         TM    DATA+2,X'02'\n         BO    RR1\n         MVC   RETCR,=CL4'HAVE'\n         B     RR0\nRR1      MVC   RETCR,=CL4'CHNG'\n         B     RR0\nRR2      MVC   RETCR,=CL4'USE'\n         B     RR0\nRR3      MVC   RETCR,=CL4'TEST'\nRR0      TM    DATA+2,X'10'\n         BZ    *+L'*+6\n         MVC   MCFLG,=CL2'MC'\n         CLC   SCOPE,=CL7'RESERVE'\n         BNE   PR0\n         LA    R0,SCOPE+L'SCOPE    POINTS OUT 'RESERVE'\n         LA    R1,MAJN-1\nFILL     CLI   0(R1),C' '\n         BNE   *+L'*+4\n         MVI   0(R1),C'.'\n         BCTR  R1,0\n         CLR   R0,R1\n         BNH   FILL\nPR0      CP    CNTL,=P'+50'        NEW PAGE ?\n         BL    PR1                 NO\n         MVC   PGED,=XL6'402020202120'\n         ED    PGED,PGNO           SET PAGE NUMBER\n         AP    PGNO,=P'+1'         UPDATE PAGES COUNTER\n        $PRINT TIT                 SKIP PAGE AND TITLE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   QUIT                PRINT ERROR EXIT\n        $PRINT HEAD                HEADER\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   QUIT                PRINT ERROR EXIT\n        $PRINT UNDR                UNDERLINES IT\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   QUIT                PRINT ERROR EXIT\n         ZAP   CNTL,=P'+0'         RESET LINES COUNTER\nPR1     $PRINT LINE                OUTPUT LINE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   QUIT                PRINT ERROR EXIT\n         MVC   CC+1(FHLL),CC       RESET LINE UNLESS MINOR NAME\n         AP    CNTL,=P'+1'         UPDATE LINES COUNTER\n         SR    R3,R3\n         IC    R3,DATA+1           GET MINOR NAME LENGTH\n         LR    R4,R3\n         BCTR  R3,0\n         EX    R3,TST              ANY BINARY INFO ?\n         BZ    RGTFS               BRANCH IF NOT\n         MVI   MINNSN,C' '\n         MVC   MINNSN+1(L'MINNSN-1),MINNSN\n         EX    R3,MVP              PROCESS NUMERICS\n         EX    R3,NCP\n         LA    R2,MINN(R3)         PROCESS ZONES\n         SR    R1,R1\nPRZNS    IC    R1,0(R2)\n         SRL   R1,4\n         STC   R1,0(R2)\n         BCTR  R2,0\n         BCT   R4,PRZNS\n         EX    R3,TRP              EDIT ZONES\n        $PRINT LINE                OUTPUT LINE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   QUIT                PRINT ERROR EXIT\n         MVC   MINN,MINNSN\n         EX    R3,TRP              EDIT NUMERICS\n        $PRINT LINE                OUTPUT LINE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   QUIT                PRINT ERROR EXIT\n         AP    CNTL,=P'+2'         UPDATE LINES COUNTER\n         B     RGTFS\n         SPACE 1\nTST      TRT   MINN(*-*),TABT\nMVP      MVC   MINNSN(*-*),MINN\nNCP      NC    MINNSN(*-*),MINNMN\nTRP      TR    MINN(*-*),TRTAB\n         DROP  R7\n         SPACE 1\nENDRGTF $PRINT LAST                GTF RUN TIME\nQUIT     SR    R10,R10             CC = 0\nEXRET   $RCLOSE ,                  CLOSE ALL FILES\n        $PCLOSE ,\n        $XRET  CC=(R10)            EXIT WITH CC\n         EJECT\n*        ERRORS PROCESSING / MESSAGES\n         SPACE 1\nERR1     BCTR  R10,0               COMPUTE ERROR NUMBER\nERR2     BCTR  R10,0\nERR3     BCTR  R10,0\nERR4     BCTR  R10,0\nERR5     BCTR  R10,0\nERR6     BCTR  R10,0\nERR7     BCTR  R10,0\n         SPACE 1\nMAXERR   EQU   ((*-ERR1)/2)+1\n         SPACE 1\n         LR    R2,R10\n         BCTR  R2,0\n         SLL   R2,2\n         L     R1,TABD(R2)\n        WTO    MF=(E,(1))          LOG DIAGNOSTIC\n         B     EXRET\n         SPACE 2\n*        TEST TABLE.\n         SPACE 1\nTABT     DS    0F 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' 0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' 1\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' 2\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' 3\n         DC    X'00FFFFFFFFFFFFFFFFFFFF00FF0000FF' 4   .(+\n         DC    X'00FFFFFFFFFFFFFFFFFFFF000000FFFF' 5  &$*)\n         DC    X'0000FFFFFFFFFFFFFFFFFF0000FFFFFF' 6  -/,%\n         DC    X'FFFFFFFFFFFFFFFFFFFFFF0000000000' 7  #@'=\"\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' 8\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' 9\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' A\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' B\n         DC    X'FF000000000000000000FFFFFFFFFFFF' C  ABCDEFGHI\n         DC    X'FF000000000000000000FFFFFFFFFFFF' D  JKLMNOPQR\n         DC    X'FFFF0000000000000000FFFFFFFFFFFF' E  STUVWXYZ\n         DC    X'00000000000000000000FFFFFFFFFFFF' F  0123456789\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         SPACE 2\n*        BINARY TABLE.\n         SPACE 1\nTABIN    DS    0F 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'000A0B0C0D0E0F000000000000000000' 0\n         DC    X'00010203040506070809000000000000' 1\n         EJECT\n*        ERRORS DIAGNOSTICS\n         SPACE 1\nTABD     DC    A(DG1,DG2,DG3,DG4,DG5,DG6,DG7)\n         SPACE 1\nDG1     WTO    'ERR 1 - NO DATA IN GTF OUTPUT LIST.',                  1\n               ROUTCDE=11,DESC=7,MF=L\nDG2     WTO    'ERR 2 - SVC 056 JOBN KEYWORD NOT FOUND.',              1\n               ROUTCDE=11,DESC=7,MF=L\nDG3     WTO    'ERR 3 - SVC 056 MAJOR-MINOR LINE NOT RECEIVED (EOF).', 1\n               ROUTCDE=11,DESC=7,MF=L\nDG4     WTO    'ERR 4 - SVC 056 MAJOR KEYWORD NOT FOUND.',             1\n               ROUTCDE=11,DESC=7,MF=L\nDG5     WTO    'ERR 5 - SVC 056 MINOR KEYWORD NOT FOUND.',             1\n               ROUTCDE=11,DESC=7,MF=L\nDG6     WTO    'ERR 6 - SVC 056 PLIST LINE NOT RECIVED (EOF).',        1\n               ROUTCDE=11,DESC=7,MF=L\nDG7     WTO    'ERR 7 - SVC 056 PLIST KEYWORD NOT FOUND.',             1\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 2\n*        CONSTANTS AND WORK AREAS\n         SPACE 1\nTRTAB    DC    CL16'0123456789ABCDEF'\nDATA     DC    XL5'0'\nCNTL     DC    PL2'+99'\nPGNO     DC    PL3'+1'\nMASK     DC    8X'1F'\nMINNSN   DC    CL52' '\nMINNMN   DC    52X'0F'\nGTFREC   DC    CL140' '\n         DC    AL1(L'LINE)\nLINE     DC    CL131' '\n         DC    AL1(TITL)\nTIT      DC    CL1'1',CL10' '\n         DC    C'INFORMATIONAL ENQ''S ANALYSIS OUTPUT FROM GTF '\nDAY      DC    CL30' ',CL15' ',C'PAGE'\nPGED     DC    CL6' ',C'.'\nTITL     EQU   *-TIT\n         DC    AL1(HEADL)\nHEAD     DC    CL1'0',CL4' '\n         DC    CL8'JOB-NAME',CL2' '\n         DC    CL8' P.LIST',CL2' '\n         DC    CL4'REQ.',CL2' '\n         DC    CL7' SCOPE',CL2' '\n         DC    CL4'RET',CL6' '\n         DC    CL8'MAJOR N.',CL2' '\n         DC    CL52'MINOR NAME'\nHEADL    EQU   *-HEAD\n         DC    AL1(UNDRL)\nUNDR     DC    CL1' ',CL4' '\n         DC    8C'-',CL2' '\n         DC    8C'-',CL2' '\n         DC    4C'-',CL2' '\n         DC    7C'-',CL2' '\n         DC    4C'-',CL6' '\n         DC    8C'-',CL2' '\n         DC    52C'-'\nUNDRL    EQU   *-UNDR\n         DC    AL1(LASTL)\nLAST     DC    CL1'0',CL10' '\n         DC    C'GTF RUN TIME : FROM '\nSTME     DC    CL8' ',C' UP TO '\nETME     DC    CL8' ',C' - END OF LIST.'\nLASTL    EQU   *-LAST\n         EJECT\n        LTORG\n         SPACE 2\nQLINE    DSECT                     OUTPUT LINE DESCRIPTION\n         SPACE 1\nCC       DS    CL1,CL4\nJOBN     DS    CL8,CL2             JOB-NAME\nPLIST    DS    CL8,CL2             PLIST (HEX)\nREQST    DS    CL4,CL2             REQUEST (EXCL/SHR)\nSCOPE    DS    CL7,CL2             SCOPE (RESERVE/SYSTEMS/SYSTEM/STEP)\nRETCR    DS    CL4,CL2             RET (TEST/USE/HAVE/CHNG)\nMCFLG    DS    CL2,CL2             MUST COMPLETE\nMAJN     DS    CL8                 MAJOR NAME\nFHLL     EQU   *-(CC+1)\n         DS    CL2\nMINN     DS    CL52                MINOR NAME (MAXIMUM)\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENQANAL$": {"ttr": 14091, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//ENQANAL  JOB (........),'INSTALL  -ENQANAL-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                TXPRINT   TXREAD                                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=ENQANAL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(READ,PRINT)\n  ENTRY   ENQANAL\n  NAME    ENQANAL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENQANAL@": {"ttr": 14093, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x10O\\x00\\x88\\x10O\\x14R\\x00E\\x00E\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-04-13T00:00:00", "modifydate": "1988-04-13T14:52:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "SYSPAJA"}, "text": "1   13/04/88\n                                                      ENQANAL   1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ENQ'S ANALYSIS PROGRAM        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Obtain a more readable output list of the ENQs (svc 56)\n  ---------    trace data. It uses as input the normal GTF output list\n               received from a previous GTF run.\n               Files : DDNAME\n                       SYSIN    : input (GTF list).\n                       SYSPRINT : output list.\n\n  How to use : here follows guidelines to run this program.\n  ------------\n\n      1. Execute a GTF ENQs trace from the main console :\n\n              S GTFSA.GTF,MEMBER=GTFENQ\n                ...\n              XX AHL125A RESPECIFY TRACE OPTIONS OR REPLY U\n              R XX,'U'\n              AHL031I GTF INITIALIZATION COMPLETE\n                ...\n              P GTF\n\n         Cataloged procedure GTFSA (in data-set 'SYS1.PROCLIB') :\n              //GTFSA   PROC MEMBER=GTFSEEK,D=NEW,US=SYS1,N=\n              //IEFPROC EXEC PGM=AHLGTF,REGION=3000K,DPRTY=(15,15),\n              //             PARM='MODE=EXT,DEBUG=NO,TIME=YES'\n              //IEFRDER   DD UNIT=SYSDA,DSNAME=&US..TRACE&N..DATA,\n              //             SPACE=(CYL,(10,10)),DISP=(&D,CATLG)\n              //SYSLIB    DD DSNAME=SYS1.PARMLIB(&MEMBER),DISP=SHR\n\n         Member GTFENQ (in data-set 'SYS1.PARMLIB') :\n              TRACE=SVCP     or        TRACE=SVCP,JOBNAMEP\n              SVC=(56)                 SVC=(56)\n              END                      JOBNAME=(...,job-names,...)\n                                       END\n1   13/04/88\n                                                      ENQANAL   2/2.\n\n      2. Then execute the ENQANAL program as described below :\n\n              //ANALYSIS JOB ...\n              /*JOBPARM L=10\n              //GTFEDIT EXEC PGM=IKJEFT01,PARM=AMDPRDMP\n              //SYSTSIN   DD DUMMY,DCB=(RECFM=F,LRECL=80,BLKSIZE=80)\n              //SYSTSPRT  DD DUMMY\n              //TRACE     DD DSN=........TRACE....DATA,\n              //             DISP=(OLD,DELETE,KEEP)\n              //PRINTER   DD UNIT=SYSDA,DSN=&&TRLIST,\n              //             DCB=(RECFM=FBA,BLKSIZE=1330,LRECL=133),\n              //             SPACE=(CYL,(10,5)),DISP=(,PASS)\n              //SYSPRINT  DD SYSOUT=*\n              //INDEX     DD SYSOUT=*\n              //SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,20)),\n              //             DISP=(NEW,DELETE)\n              //SYSIN     DD *\n                EDIT   DDNAME=TRACE,SVC=(56)\n                END\n              /*\n              //LIST    EXEC PGM=ENQANAL\n              //STEPLIB   DD DSN=... LINK library ... (if needed)\n              //SYSIN     DD DSN=&&TRLIST,DISP=(OLD,DELETE)\n              //SYSPRINT  DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EUFAJCTB": {"ttr": 14337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x01\\x7f\\x00\\x91\\x01\\x7f\\tF\\x00\\xd8\\x00\\xd8\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-01-17T00:00:00", "modifydate": "1991-01-17T09:46:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "SYSPAJA"}, "text": "         MACRO\n         EUFAJCTB ,                                                -EU-\n.*------- HERE FOLLOWS A COPY OF OS JCT (IEFAJCTB) INTO WHICH      -EU-\n.*        THE DUPLICATE FIELDS NAMES OF THOSE USED BY THE JES2     -EU-\n.*        JCT (JCTID, JCTJNAME AND JCTJMR) HAVE BEEN REMOVED TO    -EU-\n.*        AVOID ASSEMBLY ERRORS, THEN THE MACRO HAS BEEN RENAMED   -EU-\n.*        AS EUFAJCTB.                              ( MOINIL P.A.) -EU-\n.*        NOTE - ALL CHANGES ARE MARKED WITH -EU-                  -EU-\n*/********************************************************************/\n*/*                                                          @G743P2E*/\n*/*                                                          @G743P2E*/\n*/*                            IEFAJCTB                      @G743P2E*/\n*/*                                                          @G743P2E*/\n*/* DESCRIPTIVE NAME -  JOB CONTROL TABLE                    @G743P2E*/\n*/*                                                          @G743P2E*/\n*/* COPYRIGHT  -                                                     */\n*/*             5740-XC6                                         @L1C*/\n*/*             CONTAINS RESTRICTED MATERIALS OF IBM             @L1C*/\n*/*             (C) COPYRIGHT IBM CORP. 1979, 1986               @L1C*/\n*/*             LICENSED MATERIAL -  PROPERTY OF IBM             @L1C*/\n*/*             REFER TO COPYRIGHT INSTRUCTIONS                  @L1C*/\n*/*             FORM NUMBER G120-2083.                           @L1C*/\n*/*                                                                  */\n*/* STATUS     - OS/VS2 JBB2220                                  @L1C*/\n*/*                                                          @G743P2E*/\n*/* INVOCATION -                                             @G743P2E*/\n*/*             BAL  - SPECIFY: IEFAJCTB                     @G743P2E*/\n*/*             PL/S - SPECIFY: %INCLUDE SYSLIB(IEFAJCTB)    @G743P2E*/\n*/*                                                          @G743P2E*/\n*/*                                                          @G743P2E*/\n*/* FUNCTION   - THIS MACRO MAPS THE JOB CONTROL TABLE.      @G743P2E*/\n*/*                                                          @G743P2E*/\n*/* CHANGE ACTIVITY  -  L1                                       @L1C*/\n*/*                                                                  */\n*/* $L1 = SWABOVE JBB2220 850603 PDU2: SWA ABOVE THE LINE        @L1A*/\n*/*                                                                  */\n*/********************************************************************/\n*/*             CODE HAS BEEN ADDED FOR THE FOLLOWING SUPPORT        */\n*/*             CODES:                                               */\n*/*                                                          @G743P2E*/\n*/*            ADD LABEL IEFAACTB TO ASSEMBLER VERSION FOR   @ZA44001*/\n*/*            ADDRESSABILITY TO THE ACT                     @ZA44001*/\n*/*            RESTORE BIT NAME JCTPERFM IN JCTSTAT2 AND     @ZA44031*/\n*/*            RESTORE BYTE NAME JCTPRFMF FOR JES3 AND       @ZA44031*/\n*/*            INITIATOR USE                                 @ZA44031*/\n*/*            ADD LABEL ACTACCNT TO ASSEMBLER VERSION       @ZA52459*/\n*/*            ADDED FIELDS JCTSISO AND JCTSWAUP                 @L1A*/\n*/*------------------------------------------------------------------*/\n         DS    0D\nINJMJCT  EQU   *\nJCTDSKAD DS    CL3                 SVA OF THIS JCT\nJCTIDENT DS    CL1                 JCT ID = 0\n*        EQU   0 ---> JCTID                                        -EU-\nJCTJSRNO DS    CL1                 INTERNAL JOB SERIAL NUMBER\nJCTJBLBS DS    0C                  JOBLIB SWITCH  BITS 0-3\nJCTJSTAT DS    1C                  JOB STATUS INDICATORS\nJCTJSTPC EQU   32 BIT-2/JOB STEP CANCELLED BY CONDITION CODES\nJCTABEND EQU   8                   BIT 4 - JCT ABEND BIT           HW16\nINCMSTS  EQU   4                   BIT-5/JOB FAILED BIT\n*                                  BIT 5 = 1 JOB FAILED\n*                                  BIT 6 = 0 GO JOB\nINDMCTLG EQU   2                   BIT 6 = 1 CATALOG JOB\nINCMCAT  EQU   2                   BIT-6/CATALOG BIT\nINCMNSET EQU   1                   BIT7/RESERVED               @ZA04561\nJCTJMGPO DS    CL1                 MESSAGE CLASS\nJCTJMGLV DS    0C 4 BITS FOR MESSAGE LEVEL -SET BY IEFVJA\nINCMMGL1 EQU   16                  JCL  MESSAGE LEVEL=1 BIT         I68\nINCMMGL2 EQU   32                  JCL  MESSAGE LEVEL=2 BIT         I68\nINCMALL  EQU   128                 ALLOCATION MESSAGE LEVEL=1 BIT  I68\nJCTJPRTY DS    1C                  4 BITS FOR JOB PRIORITY\n         DS    CL8 ---> JCTJNAME   JOBNAME                         -EU-\nJCTJTPTN DS    CL8                 T/P TERMINAL NAME\nJCTPDIP  DS    CL4                 PDI CORE POINTER              Y02670\nJCTGDGNT DS    CL3                 GDG NAME TABLE                Y02670\nJCTJCSMF DS    CL1                 JOB CLASS SPECS FOR SMF       Y02668\n*                                  TERMINATION ROUTINES          Y02668\nJCTSDKAD DS    CL4                 SVA OF FIRST SCT\nJCTJCTX  DS    CL4                 SVA OF JCTX                 @Z40RPSM\nJCTACTAD DS    CL4                 SVA OF FIRST ACT\nJCTSMRBA DS    CL8                 RBA SYSTEM MSG D.S.           Y02641\nJCTSCT   DS    CL1                 STEP NO. OF FAILING STEP      Y02641\n         DS    CL1                 RESERVED\nJCTJDPCD DS    CL2                 DEPENDENCY CODE\nJCTJDPOP DS    CL2                 DEPENDENCY OPERATOR\n         DS    CL28                ROOM FOR 7 MORE DEPS\nJCTRSW1  DS    C                   CHECKPOINT/RESTART SWITCHES\nJCTWARMS EQU   128                 BIT0 - WARM START\nJCTSTERM EQU   64  STEP TERMINATION HAS BEGUN (PCP WARM START ONLY)AACA\nJCTCONTR EQU   32  BIT 2 - JOB IS ELIGIBLE FOR CONTINUE RESTART  Y02641\n*                                  PROCESSING\nJCTCKFT  EQU   16  BIT 3 - CHECKPOINT TAKEN FOR THIS STEP\nJCTCKPTR EQU   8   BIT 4 - CHECKPOINT RESTART (INTRA-STEP) TO BE DONE\nJCTSTEPR EQU   4   BIT 5 - STEP RESTART TO BE DONE\n*                                  BITS 6 AND 7 MUST BE ZERO\nJCTRSW2  DS    C                   CHECKPOINT/RESTART SWITCHES\nJCTSYSCK EQU   128 BIT 0 - SYSCHK DD STATEMENT PRESENT\nJCTNARST EQU   64  BIT 1 - JOB INELIGIBLE FOR AUTOMATIC RESTART  Y02641\nJCTNORST EQU   32  BIT 2 - NO RESTART TO BE DONE\nJCTNOCKP EQU   16  BIT 3 - NO CHECKPOINTS TO BE TAKEN\nJCTRESTT EQU   8   BIT 4 - DO RESART IF NECESSARY\nJCTDSOCR EQU   4   BIT 5 - RESERVED                               M2344\nJCTDSOJB EQU   2   BIT 6 - RESERVED                               M2344\n***********************************************************************\n*                                                                    **\n*        IN ORDER TO IMPLEMENT MVT IT HAS BEEN NECESSARY TO          **\n*        ADD THE FOLLOWING FIELDS TO THE JCT.  TO AVOID CAUSING      **\n*        ERRORS IN THE CASE OF THE REASSEMBLING OF ALREADY EXIST-    **\n*        ING MODULES WHICH REFERENCE THESE FIELDS, THEY ARE GEN-     **\n*        ERATED HERE ONLY AS COMMENTS CARDS.  NOTE THAT DUE TO THE   **\n*        FACT THAT THIS MACRO GENERATES THE ACT IMMEDIATELY AFTER    **\n*        THE JCT, IT IS NOT POSSIBLE TO REFERENCE THESE FIELDS BY    **\n*        CODING THEM AFTER THE MACRO.  FOR NOW THEY MUST BE REF-     **\n*        ERENCED BY DISPLACEMENT (WHICH IS GIVEN BELOW), PREFER-     **\n*        ABLY THROUGH THE USE OF EQUATES AND THE SYMBOLS BELOW.      **\n*        NOTE ALSO THAT THIS MACRO IS NOT VALID FOR REFERENCING      **\n*        THE ACT UNTIL THESE NEW FIELDS HAVE ACTUALLY BEEN           **\n*        INCORPORATED.                                               **\n*                                                                    **\n***********************************************************************\n*                                                                     *\n*JCTDETDA DS    CL4                SVA OF DSENQ TABLE                 *\n*                                  (DISPLACEMENT = 88 (DECIMAL)       *\n*JCTEQREG DS    CL2                REGION PARAMETER (BINARY)          *\n*                                  (DISPLACEMENT = 92 (DECIMAL)       *\n*                                                                     *\n***********************************************************************\n         DS    6C                  ROOM FOR THE ABOVE\nJCTQIDNT DS    C                   IDENTITY OF Q FOR JOB (MVT ONLY)\nJCTSNUMB DS    C                   NUMBER OF STEPS RUN (MVT ONLY)\nJCTSTIOT DS    F                   SVA OF COMPRESSED TIOT (MVT ONLY)\n*                IN PCP-C/R SAVE OF SCATALLY BY IEFRAPCP           AACA\nJCTDEVT  DS    F DEVICE TYPE OF CHECKPOINT DATA SET\nJCTCKTTR DS    3C SVA OF JFCB FOR CHECKPOINT DATA SET\nJCTNTRK  DS    C  NUMBER OF TRACKS ON SYS1.JOBQE USED BY         PTM258\n*                   THE JOB -SET AND USED BY THE INIT./TERM.     PTM258\nJCTNRCKP DS    H                   NUMBER OF CHECKPOINTS TAKEN\nJCTVOLSQ DS    C VOLUME SEQUENCE NUMBER FOR CHECKPOINT DATA SET\nJCTJSB   DS    C                   JOB STATUS SWITCHES      Y02641\nJCTJSBIN EQU   8                   JOB ENTERED INTERPRETATION    Y02641\nJCTJSBAL EQU   4                   JOB ENTERED ALLOCATION        Y02641\nJCTJSBEX EQU   2                   JOB ENTERED EXECUTION         Y02641\nJCTJSBTM EQU   1                   JOB ENTERED TERMINATION       Y02641\nJCTSSTR  DS    F SVA OF SCT FOR FIRST STEP TO BE RUN\nJCTSTAT2 DS    1C                  ADDITIONAL STATUS INDICATORS    O102\nJCTSPSYS EQU   128  BIT 0 - =1 INDICATES SPOOLED SYSIN FOR JOB     O102\n*                                  SET BY IEFVDA                   O102\n*                             TESTED BY IEESD575(QUEUE ALTER)-     O102\n*                                  MVT AND MFT ONLY                O102\nJCTADSPC EQU   64   BIT 1 - =1 INDICATES ADDRSPC=REAL            Y01029\n*                                  SET BY VEA AND VJA            Y01029\nJCTENDIT EQU   32                  SET BY IEFSD41Q,IEFWEXTA      A25134\n*                                  TESTED BY IEFDSOWR,IEFYNIMP   A25134\n*                                  JOB TERMINATION INDICATOR     A25134\nJCTSWSM  EQU   16   BIT 3 - =1 INDICATES WARM START MESSAGE       M3144\n*                             'INIT=JOBNAME' IS TO BE SUPPRESSED  M3144\n*                                  FOR THIS JOB                   M3144\n*                                  SET BY IEFVHH                  M3144\n*                                  TESTED BY IEFSD305             M3144\nJCTPERFM EQU   8  BIT 4=1 PERFORM SPECIFIED ON THE JOB CARD    @ZA44031\nJCTBLP   EQU   4              0-BLP WILL BE TREATED AS NL        Y02668\n*                             1-BLP WILL BE TREATED AS BYPASS    Y02668\n*                                  LABEL PROCESSING              Y02668\nJCTSISO  EQU   2                   SYSIN/SYSOUT SWA BELOW THE\n*                                  LINE INDICATOR                  @L1A\nJCTSWAUP EQU   1                   SWA ABOVE THE LINE INDICATOR    @L1A\nJCTCKIDL DS    C                   LENGTH OF CHECKPOINT ID\nJCTCKIDT DS    CL16                CHECKPOINT IDENT                AACA\n*******************************************************************AACA\n*        THE FOLLOWING SYSTEMS MGMT FACILITIES SUBFIELDS MUST      AACA\n*        BEGIN ON A HALF WORD BOUNDARY                             AACA\n*******************************************************************AACA\n         DS    CL3 ---> JCTJMR   SVA OF JMR  *** SYSTEMS ***   AACA-EU-\nJCTJMRD  DS    CL1  DATE DIFFERENCE STEP START-JOB START *         AACA\nJCTJMROP DS    CL1  SMF OPTION SWITCHES        * MANAGEMENT        AACA\nJCTJMRCL DS    CL1  SMF CANCELLATION CONTROL STATUS      *         AACA\nJCTJMRTL DS    CL3  JOB TIME LIMIT             *  FACILITIES       AACA\nJCTJMRSS DS    CL3  STEP START TIME OF DAY               *         AACA\nJCTJMRJT DS    CL3  JOB START TIME OF DAY      *  SUBFIELDS        AACA\nJCTJMRJD DS    CL3  JOB START DATE             *****************   AACA\nJCTSRBT  DS    CL4  ACCUMULATED SRB TIME FOR JOB                 Y02652\n         DS    CL1  RESERVED\nJCTSSD   DS    CL3  STEP START DATE                              Y02668\nJCTUSER  DS    CL7  USER ID FIELD. SET BY C/I MODULE IEFVJA    @Z40RPTH\n*                   AS A RESULT OF A USER KEYWORD ON THE JOB   @Z40RPTH\n*                   STATEMENT.                                 @Z40RPTH\nJCTPRFMF DS    CL1  PERFORMANCE GROUP NUMBER                   @ZA44031\nJCTACODE DS    CL4  ABEND CODE FIELD                             Y02641\nJCTVULDP DS    CL4  POINTER TO VOLUME UNLOAD TABLE               Y02670\nJCTLNGTH EQU   *-INJMJCT           JCT LENGTH                     20001\n***************************************************************** 20001\n**                                                                   **\n**                       ACCOUNT CONTROL TABLE                       **\n**                                                                   **\n***********************************************************************\nIEFAACTB DS    0D                                              @ZA44001\nACTDSKAD DS    CL3                 SVA OF THIS ACT\nACTIDENT DS    CL1                 TABLE ID  ACT = 16\nACTID    EQU   1\nACTNEXT  DS    CL4                 SVA OF NEXT ACT\nACTPRGNM DS    CL20                PROGRAMMERS NAME\nACTJTIME DS    CL3                 JOB RUNNING TIME\nACTJNFLD DS    1C                  NBR OF JOB ACCOUNTING FIELDS\nACTACCNT DS    CL144          THE REST OF THE FIELDS HAVE THE  @ZA52459\n*                                  FOLLOWING FORMAT FOR JOB ACCOUNTING-\n*                                  1 BYTE- LENGTH OF FIELD\n*                                  VARIABLE BYTES- CONTENTS OF FIELD\n*                                       (REPEATED FOR N FIELDS)\n*                                  STEP ACCOUNTING HAS THE FOLLOWING\n*                                  FORMAT FOR EACH STEP-\n*                                  3 BYTES- MAXIMUM STEP RUNNING TIME\n*                                  1 BYTE- NBR OF FIELDS IN STEP\n*                                  1 BYTE- LENGTH OF FIELD\n*                                  VARIABLE BYTES- CONTENTS OF FIELD\n*                                       (LAST 2 REPEATED N TIMES)\n* THIS SECTION FORMERLY HELD THE SMB MADE OBSOLETE BY AOS/II RELEASE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT001": {"ttr": 14342, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11\\x7f\\x00\\x90\\x11\\x7f\\x14I\\x02\\xad\\x02\\xad\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-27T00:00:00", "modifydate": "1990-04-27T14:49:00", "lines": 685, "newlines": 685, "modlines": 0, "user": "SYSPAJA"}, "text": "X001     TITLE 'JES2 - EXIT 001 - PRINT/PUNCH SEPARATORS'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* MODULE NAME : EXIT001                                               *\n* DESCRIPTIVE NAME : JES2 EXIT 1 (HASPPRPU)                           *\n*                    JES2 PRINT/PUNCH SEPARATORS                      *\n*                    (LOCAL SEPARATORS)                               *\n* PURPOSE :     THIS JES2 EXIT ALLOWS TO PRODUCE LOCAL PRINT/PUNCH    *\n*               SEPARATORS AND TO CONTROL PRODUCTION OF STANDARD      *\n*               PRINT/PUNCH SEPARATORS.                               *\n* INVOCATION POINT : EXIT001                                          *\n* ENTRY POINT : UEXIT001                                              *\n* ENVIRONMENT : JES2 MAIN TASK                                        *\n* REGISTERS AT ENTRY :                                                *\n*               R0 : A CODE INDICATING WHETHER A HEADER PAGE OR CARD, *\n*                    CONTINUATION PAGE, OR TRAILER PAGE IS BEING      *\n*                    PROCESSED                                        *\n*                    0 = A START-OF-JOB PAGE OR CARD                  *\n*                    4 = A CONTINUATION-OF-JOB PAGE                   *\n*                    8 = A TRAILER PAGE OR CARD                       *\n*               R1 : ADDRESS OF THE PRINTER OR PUNCH DCT              *\n*               R2-R9 : N/A                                           *\n*               R10 : ADDRESS OF THE JCT                              *\n*               R11 : ADDRESS OF THE HCT                              *\n*               R12 : N/A                                             *\n*               R13 : ADDRESS OF THE PCE                              *\n*               R14 : RETURN ADDRESS                                  *\n*               R15 : ENTRY ADDRESS                                   *\n* REGISTERS ON RETURN :                                               *\n*               R0-R1 : N/A                                           *\n*               R15 : A RETURN CODE :                                 *\n*                     =0, CONTINUE USING ANY ADDITIONAL EXITS AND     *\n*                         PRODUCE STANDARD SEPARATOR IF IN EFFECT     *\n*                     =4, CONTINUE WITHOUT USING ANY ADDITIONAL EXITS *\n*                         AND PRODUCE STANDARD SEPARATOR IF IN EFFECT *\n*                     =8, ALWAYS SUPPRESS STANDARD SEPARATOR          *\n*                     =12, ALWAYS PRODUCE STANDARD SEPARATOR          *\n* LINKAGE EDITOR INFO :                                               *\n*               ATTRIBUTES : REENTRANT, REUSEABLE, REFRESHABLE        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* AUTHOR :      JOHN V. HOOPER                                        *\n*               FIRST UNION NATIONAL BANK                             *\n*               301 SOUTH TRYON STREET                                *\n*               CHARLOTTE, N.C. 28288                                 *\n*               (704) 374-2427                                        *\n*               ORIGIN : J001$SP FROM CBT TAPE 89 FEB, FILE 381.      *\n* CHANGES :     DONE BY MOINIL P.A.                                   *\n*               THE ORIGINAL CODING HAS BEEN TAKEN AS BASIS TO        *\n*               IMPLEMENT OUR LOCAL/REMOTE PRINT SEPARATOR.           *\n*               MOST OF THE CODE HAS BEEN COPIED FROM THE ORIGINAL    *\n*               IN JES2, AS BELOW :                                   *\n*                    1. PRINTID : SEPARATOR PAGE ROUTINE              *\n*                    2. PBLOCK : BLOCK LETTER ROUTINE                 *\n*                    3. PPDATE : FORMAT DATE ROUTINE                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* JES2PARM INITIALIZATION STATEMENTS :                                *\n*               LOAD=J2XIT001                                         *\n*               EXIT001 ROUTINE=UEXIT001,DISABLE,TRACE=YES            *\n*                                        ENABLE        NO             *\n*                                                                     *\n* JES2 OPERATOR CONTROL COMMANDS :                                    *\n*               $T EXIT001,DISABLE,TRACE=YES                          *\n*                          ENEABLE       NO                           *\n*               $D EXIT001                                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n         COPY  $HASPGBL\n         SPACE 1\nJ2XIT001 $MODULE ENVIRON=JES2,TITLE='JES2 - EXIT 001',                 X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $HFAME,             GENERATE HASP FAME DSECT            X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $PPPWORK,           GENERATE HASP PPPWORK DSECT         X\n               $RDT,               GENERATE HASP RDT DSECT             X\n               $SCAT,              GENERATE HASP SCAT DSECT            X\n               $SVT,               GENERATE HASP SSVT DSECT            X\n               $XECB,              GENERATE HASP XECB DSECT            X\n               RPL,                GENERATE MVS RPL DSECT              X\n               UCB                 GENERATE MVS UCB DSECT\n         TITLE 'JES2 - EXIT 001 - PRINT/PUNCH SEPARATORS'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        EXIT MAIN ENTRY POINT.                                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nUEXIT001 $ENTRY BASE=R12\n        $SAVE  ,                   SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R7,R0               SAVE INPUT PARAMETER\n         LR    R9,R1               SAVE INPUT DCT ADDRESS\n         USING DCT,R9              SET ADDRESSABILITY TO DCT\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        CHECK IF SEPARATOR MUST BE PRODUCED.                         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         TM    PCEID,PCEPUSID      SEE IF THIS IS A PUNCH\n         BO    EXIT0               YES, GET OUT\n         TM    DCTPPSW,DCTPPSWS    SEE IF SEPARATORS REQUESTED\n         BO    EXIT0               NO, GET OUT\n         XR    R6,R6\n         IC    R6,$TPIDCT          REMOTE SEPARATOR LINE COUNT\n         TM    PCEID,PCELCLID      TEST FOR LOCAL PRINTER\n         BZ    *+L'*+4             BRANCH IF NOT\n         IC    R6,$PRIDCT          LOCAL SEPARATOR LINE COUNT\n         LTR   R6,R6               IS LINE COUNT ZERO?\n         BNP   EXIT0               YES, GET OUT\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GET A WORK BUFFER (FIX IN STORAGE).                          *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        $GETBUF TYPE=HASP,FIX=YES,WAIT=YES GET A WORK BUFFER\n         LR    R8,R1               SAVE ADDRESS OF BUFFER\n         USING WRKDSECT,R8         SET ADDRESSABILITY TO WORK-AREA\n         LA    R14,WRKDSECT+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET 'TO' LENGTH\n         XR    R0,R0               CLEAR 'FROM' ADDRESS\n         XR    R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SEND A PDIR IN CASE IT IS AN SNA REMOTE                      *\n*        (IF NOT, THE REQUEST IS IGNORED).                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        $SEPPDIR (R8)              SEND A PDIR FOR SNA RMT\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GENERATE BLOCK LETTERS (1) OUTPUT.                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         MVI   CCMB,C' '           INITIALIZE TO BLANK\n         CH    R7,=H'8'            TRAILER PAGE?\n         BE    GBL1O1              YES, DON'T EJECT PAGE\n         MVI   CCMC,X'8B'          EXECUTE AN EJECT PAGE\n        $PRPUT DATA=CCM,LEN=L'CCM,COUNT=1,WAIT=YES,CC=M\nGBL1O1   CLM   R6,B'0001',=AL1(21) AT LEAST 21 LINES AVAILABLE?\n         BL    PDEST               BRANCH IF LESS\n         LA    R0,13               ACCOUNT FOR BLOCK LETTERS (1)\n         SLR   R6,R0\n         MVC   SSRWK(4),JCTROOMN   GET ROOM NUMBER\n         MVC   SSRWK+4(4),=CL8' '\n         CLC   JCTROOMN,$ZEROES    IS ROOM MEANINGFUL?\n         BNE   GBL1O3              IF YES, USE ROOM NUMBER\n         CLI   JCTJOBID,C'J'       IS THIS A JOB?\n         BNE   GBL1O2              IF NOT, USE SYSTEM ROOM NUMBER\n         XR    R1,R1               CLEAR OUT REGISTER FOR CONVERSION\n         MVI   SSRWK,C'N'          INDICATE NODE\n         ICM   R1,B'0011',JCTRNODE USE NODE ORIGIN\n         BZ    *+L'*+10            BRANCH IF NONE\n         CLC   $OWNNODE,JCTRNODE   IS IT OURSELF\n         BNE   *+L'*+12            BRANCH IF NOT\n         MVI   SSRWK,C'R'          INDICATE REMOTE\n         ICM   R1,B'0011',JCTRRMT  USE REMOTE ORIGIN\n         BZ    GBL1O2              IF NONE, USE SYSTEM ROOM NUMBER\n         CVD   R1,$DWORK           CONVERT ROUTING TO DECIMAL\n         MVC   $DOUBLE(6),=XL6'402120202020' MOVE IN EDIT PATTERN\n         ED    $DOUBLE(6),$DWORK+5 EDIT ROUTE FOR PRINTING\n         MVC   SSRWK+2(4),$DOUBLE+2 MOVE IN PLACE ROUTE CODE\n         B     GBL1O3              GO IN PEACE\nGBL1O2   MVC   SSRWK(4),=C'0022'   SHOW TO SYSTEM PROGRAMMERS\nGBL1O3   XC    LNCNTR,LNCNTR       SET START BLOCK LETTERS\n         MVI   PBLOPT,0            SET NO SLANT - NO CENTERING\nGBL1O4   BAS   R14,PBLOCK          CALL BLOCK ROUTINE\n         LR    R5,R15              RETAIN LINE NUMBER\n         CH    R5,=H'1'            FIRST LINE OF BLOCK LETTERS?\n         BNE   *+L'*+10            BRANCH IF NOT\n         MVC   BLLINFO(L'JCTPNAME),JCTPNAME SET PROGRAMMER NAME\n         B     GBL1O5\n         CH    R5,=H'3'            3RD LINE OF BLOCK LETTERS?\n         BNE   GBL1O5              BRANCH IF NOT\n         MVC   BLLINFO(10),=CL10'JOB NAME :'\n         MVC   BLLINFO+11(L'JCTJNAME),JCTJNAME SET JOB NAME\nGBL1O5  $PRPUT DATA=BLL,LEN=L'BLL,COUNT=1,WAIT=YES\n         CH    R5,=H'12'           LAST LINE OF BLOCK LETTERS?\n         BNE   GBL1O4              LOOP IF NOT\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GENERATE BLOCK LETTERS (2) OUTPUT.                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CLM   R6,B'0001',=AL1(23) AT LEAST 23 LINES AVAILABLE?\n         BL    PSKIP               BRANCH IF LESS\n         LA    R0,15               ACCOUNT FOR BLOCK LETTERS (2)\n         SLR   R6,R0\n         MVI   CCMC,X'1B'          EXECUTE SPACE 3 LINES\n        $PRPUT DATA=CCM,LEN=L'CCM,COUNT=1,WAIT=YES,CC=M\n         MVC   SSRWK,=CL8' '\n         MVC   SSRWK(1),JCTJOBID   GET JOB TYPE\n         MVC   SSRWK+1(4),JCTJOBID+4 AND JOB NUMBER\n         CLI   SSRWK+1,C' '        LEFT-\n         BNE   *+L'*+10              JUSTIFY\n         MVC   SSRWK+1(4),SSRWK+2      JOB\n         B     *-14                      NUMBER\n         L     R1,PPPWKJOE         ADDRESS WORK-JOE\n         USING JOE,R1              ACTIVATE JOE ADDRESSABILITY\n         MVC   SSRWK+6(1),JOECURCL GET SYSOUT CLASS\n         DROP  R1\n         XC    LNCNTR,LNCNTR       SET START BLOCK LETTERS\n         MVI   PBLOPT,0            SET NO SLANT - NO CENTERING\nGBL2O1   BAS   R14,PBLOCK          CALL BLOCK ROUTINE\n         LR    R5,R15              RETAIN LINE NUMBER\n        $PRPUT DATA=BLL,LEN=L'BLL,COUNT=1,WAIT=YES\n         CH    R5,=H'12'           LAST LINE OF BLOCK LETTERS?\n         BNE   GBL2O1              LOOP IF NOT\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GENERATE BLOCK LETTERS (3) OUTPUT.                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CLM   R6,B'0001',=AL1(32) AT LEAST 32 LINES AVAILABLE?\n         BL    PSKIP               BRANCH IF LESS\n         LA    R0,24               ACCOUNT FOR BLOCK LETTERS (3)\n         SLR   R6,R0\n         LA    R5,4                FOUR TIMES\nGBL3O1   MVI   CCMC,X'1B'          EXECUTE SPACE 3 LINES\n        $PRPUT DATA=CCM,LEN=L'CCM,COUNT=1,WAIT=YES,CC=M\n         BCT   R5,GBL3O1\n         MVC   SSRWK,JCTJNAME      GET JOB NAME\n         XC    LNCNTR,LNCNTR       SET START BLOCK LETTERS\n         MVI   PBLOPT,PBLOSL       SET SLANT - NO CENTERING\nGBL3O2   BAS   R14,PBLOCK          CALL BLOCK ROUTINE\n         LR    R5,R15              RETAIN LINE NUMBER\n        $PRPUT DATA=BLL,LEN=L'BLL,COUNT=1,WAIT=YES\n         CH    R5,=H'12'           LAST LINE OF BLOCK LETTERS?\n         BNE   GBL3O2              LOOP IF NOT\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GENERATE THE HEADER PRINT LINE OUTPUT.                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nPSKIP    LA    R0,2                ACCOUNT FOR SPACE 2 LINES\n         SLR   R6,R0\n         MVI   CCMC,X'13'          EXECUTE SPACE 2 LINES\n        $PRPUT DATA=CCM,LEN=L'CCM,COUNT=1,WAIT=YES,CC=M\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        CONVERT JOEROUT TO EBCIDIC FOR PRINT SEPERATOR PAGES         *\n*        THE ROUTE IS FIRST CHECKED TO SEE IF THERE IS A              *\n*        DESTID THAT MATCHES THE ROUTE. IF A DESTID IS FOUND THEN     *\n*        THAT NAME IS MOVED TO THE HEADER LINE. IF MORE THAN ONE      *\n*        DESTID IS FOUND FOR A ROUTE THEN THE ROUTE IS CONVERTED      *\n*        ACCORDING TO THE FOLLOWING FORMAT                            *\n*              RNNNN (REMOTE)                                         *\n*              UNNNN (SPECIAL LOCAL)                                  *\n*              'LOCAL' (LOCAL DEVICE)                                 *\n*              CCCCCCCC (DESTID)                                      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nPDEST    L     R1,$SVT             GET THE SVT ADDRESS AND\n         LM    R14,R15,SVTRDT-SVT(R1) THEN FIRST/LAST DESTID\n         L     R5,PPPWKJOE         ADDRESS WORK JOE\n         USING JOE,R5              ACTIVATE JOE ADDRESSABILITY\n         MVI   $DOUBLE,0           INDICATE NO DESTID YET\n         USING RDT,R14             ACTIVATE RDT ADDRESSABILITY\nPDESTLOP CLR   R14,R15             PAST THE END OF THE TABLE...\n         BH    PDESTTR1            YES, BRANCH TO CONVERSION RTN\n         L     R2,RDTROUTE         LOAD COMPLETE ROUTE CODE\n         TM    RDTFLAG,RDTFLAGR    TEST FOR REMOTE\n         BZ    PDESTNRT            BRANCH IF NOT REMOTE\n         TM    RDTFLAG,RDTFLAGN    IS NODE SPECIFIED\n         BO    PDESTNRT            YES THEN BYPASS\n         ICM   R2,B'1100',$OWNNODE PROVIDE DEFAULT NODE\nPDESTNRT CL    R2,JOEROUT          A DESTID FOR THIS JOE\n         BNE   PDESTSKP            NO, GO CHECK THE NEXT ONE\n         CLI   $DOUBLE,0           HAVE DESTID FOR JOE YET...\n         BNE   PDESTTR             YES, GO FORM JOE DEST\n         MVC   $DOUBLE,RDTNAME     NO, MOVE DESTID FROM RDT\nPDESTSKP LA    R14,RDTSIZ(,R14)    GET ADDRESS OF NEXT RDT\n         B     PDESTLOP            BRANCH TO CONTINUE CHECKING\n         DROP  R14                 DROP RDT ADDRESSABILITY\nPDESTTR1 CLI   $DOUBLE,0           SINGLE DESTID FOR JOE...\n         BNE   BLKSKIP             YES, SKIP DEST FORMULATION\nPDESTTR  CLC   JOEREMOT,$ZEROS     IS THIS A LOCAL JOE...\n         BE    PDESTLOC            YES, BRANCH TO LOCAL CONVERSION\n         LH    R15,JOEREMOT        PLACE ROUTE INTO REGISTER\n         CVD   R15,$DOUBLE         CONVERT ROUTING TO DECIMAL\n         MVC   $DWORK(6),=XL6'402120202020' MOVE IN PATTERN\n         ED    $DWORK(6),$DOUBLE+5          AND EDIT ROUTING\n         MVC   $DOUBLE(5),$DWORK+1            VALUE INTO\n         MVC   $DOUBLE+5(3),$BLANKS             $DOUBLE\n         CLC   JOERNODE,$ZEROS     CHECK FOR UNIT SPECIFICATION\n         BE    PSPUNIT             BR TO MOVE IN 'U' LABEL\n         MVI   $DOUBLE,C'R'        INDICATE ROUTED TO REMOTE\n         B     BLKSKIP             MOVE ROUTE INTO HDRLINE\nPSPUNIT  MVI   $DOUBLE,C'U'        INDICATE SPECIAL LOCAL ROUTINE\n         B     BLKSKIP             GO MOVE ROUTE INTO HDRLINE\nPDESTLOC MVC   $DOUBLE,=C'LOCAL   ' MOVE LOCAL TO WORK AREA\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        BUILD THE HEADER PRINT LINE.                                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nBLKSKIP  MVI   HDR,C' '            BLANK HEADER LINE\n         MVC   HDR+1(L'HDR-1),HDR\n         MVI   HDRFRAME,C'*'       SETUP FRAME CHARACTER\n         MVC   HDRJROUT,$DOUBLE    SET JOE ROUTING INFO IN HDR\n         MVC   HDRCLASS,JOECURCL   SYSOUT CLASS\n         MVC   HDRJNAME,JOENAME    JOE OUTPUT NAME\n         LH    R1,JOEID1           GET THE 1ST JOEID\n         CVD   R1,SSRWK            CONVERT TO PRINTABLE FORM\n         UNPK  HDRJID1,SSRWK+5(3)  SET NUMBER TO EBCDIC\n         OI    HDRJID1+2,C'0'      SET SIGN TO EBCDIC\n         LH    R1,JOEID2           GET THE 2ND JOEID\n         CVD   R1,SSRWK            CONVERT TO PACKED DECIMAL\n         UNPK  HDRJID2,SSRWK+5(3)  SET NUMBER TO EBCDIC\n         OI    HDRJID2+2,C'0'      SET SIGN TO EBCDIC\n         DROP  R5                  DROP JOE ADDRESSABILITY\n         LTR   R7,R7               TEST FORM TYPE\n         BNZ   GHPL1\n         MVC   HDRFORM,=CL5'START' START-OF-JOB PAGE\n         B     GHPL3\nGHPL1    CH    R7,=H'4'            TEST FORM TYPE\n         BNE   GHPL2\n         MVC   HDRFORM,=CL5'CONT.' CONTINUATION-OF-JOB PAGE\n         B     GHPL3\nGHPL2    MVC   HDRFORM,=CL5' END ' TRAILER PAGE\nGHPL3    MVC   HDRNUM,JCTJOBID     JOB NUMBER\n         MVC   HDRNAME,JCTJNAME    JOB NAME\n         MVC   HDRSYS,$SID         SYSTEM ID\n         MVC   HDRPNAME,JCTPNAME   PROGRAMMER NAME\n         MVC   HDRRKEY,=C'ROOM'    THE ROOM LABEL\n         MVC   HDRROOM,JCTROOMN    ROOM NUMBER\n        TIME   DEC                 GET TIME AND DATE\n         MVC   HDRTIME,=XL11'21204B20204B202040C1D4' EDIT TIME MASK\n         CL    R0,=A(X'12000000')  TEST TIME\n         BL    PMORNING            BRANCH IF AM\n         MVI   HDRAM,C'P'          CHANGE FROM AM TO PM\n         SL    R0,=A(X'12000000')  SUBTRACT TWELVE HOURS\nPMORNING ST    R0,SSRWK            STORE ADJUSTED TIME\n         CLI   SSRWK,0             TEST FOR ZERO HOURS\n         BNE   PADJERR             BR IF NOT TO TEST ADJUSTMENT ERROR\n         MVI   SSRWK,X'12'         CONVERT ZERO TO TWELVE\nPADJERR  TM    SSRWK,X'08'         TEST FOR ADJUSTMENT ERROR\n         BZ    PEDTIME             BRANCH IF NO ERROR\n         NI    SSRWK,X'09'         CORRECT FOR BINARY SUBTRACT ERROR\nPEDTIME  ED    HDRPTTN,SSRWK       EDIT TIME INTO PROPER FIELD\n         BAS   R14,PPDATE          CONVERT DATE TO ' DD MMM YY'\n         MVC   HDRDATE,DDMMMYY+1   SET TO DD DAY MMM MONTH YY YEAR\n         MVC   HDRDNAME,DCTDEVN    DEVICE NAME\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        CHECK FOR 2770 REMOTE TERMINAL WITHOUT THE BUFFER            *\n*        EXPANSION FEATURES. SINCE ITS MAXIMUM LENGTH IS 120          *\n*        BYTES, LEAVE ANY FIELDS PAST 120 BYTES AS BLANKS.            *\n*        NOTE THAT BSC PUT PROCESSING TRUNCATES TRAILING BLANKS       *\n*        SO THE SEPARATOR CCW STILL INDICATES A LENGTH OF 132.        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         TM    PCEID,PCERJEID      TEST PROCESSOR TYPE\n         BNO   PRINORJE            BRANCH IF NOT REMOTE\n         CLI   MDCTTYPE,DCTP2780   TEST TERMINAL TYPE\n         BNL   PRINORJE            SKIP NEXT IF NOT 2770\n         TM    MDCTFEAT,DCTPABEX   TEST 2770 BUFFER SIZE\n         BO    PRINORJE            BRANCH IF 512\n         TM    MDCTFEAT,DCTPBEXP   TEST 2770 BUFFER SIZE\n         BO    PRINORJE            BRANCH IF 256\n         B     PRIDOUT             ASSUME 128 BUFFER SIZE AND SKIP REST\nPRINORJE MVC   HDRFORMX,HDRFORM    SET FORM TYPE\n         MVC   HDRFRAMX(1),HDRFRAME SET END FRAME CHARACTER\n         MVC   HDRCLASX,HDRCLASS   SET END CLASS\nPRIDOUT  TM    $PRTOPTS,$PRTRANS   IF TRANSLATION NOT REQ'D,\n         BZ    PRIDNTR             DON'T DO IT\n         CLC   PPPDEVTP+2(2),=AL1(UCB3UREC,UCB3211) LOCAL 3211...\n         BE    PRIDNTR             BRANCH IF YES\n         CLC   PPPDEVTP+2(2),=AL1(UCB3UREC,UCB3800) 3800 PRINTER...\n         BE    PRIDNTR             BRANCH IF YES\n         CLC   PPPDEVB2(2),=AL1(UCB3UREC,UCB3203) LOCAL 3203...\n         BE    PRIDNTR             BRANCH IF A 3203\n         L     R15,DCTPRTRN        TRANSLATE UNPRINTABLES\n         TR    HDR(L'HDR),0(R15)     TO BLANKS\nPRIDNTR $PRPUT DATA=HDR,LEN=L'HDR,COUNT=1,WAIT=YES\n         BCT   R6,PRIDNTR          GENERATE SEPARATOR PAGE HEADER\n         TM    PPPFLAG1,PPP1NEWS   JES2-NEWS AVAILABLE...\n         BO    EXIT8               SKIP EJECT IF YES\n         CH    R7,=H'8'            TRAILER PAGE?\n         BE    EXIT8               YES, DON'T EJECT PAGE\n         MVI   CCMC,X'8B'          EXECUTE AN EJECT PAGE\n        $PRPUT DATA=CCM,LEN=L'CCM,COUNT=1,WAIT=YES,CC=M\n         B     EXIT8\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GO BYE-BYE.                                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nEXIT0    XR    R15,R15             SET RETURN CODE TO 0\n        $RETURN RC=(R15)           RETURN TO JES2\n         SPACE 1\nEXIT8   $FREEBUF (R8)              FREE WORK BUFFER\n         LA    R15,8               SET RETURN CODE TO 8\n        $RETURN RC=(R15)           RETURN TO JES2\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        P B L O C K - BLOCK LETTERS ROUTINE.                         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        (IT GENERATES 12 LINES IN SEQUENCE)                          *\n*              R1-R4 = WORK REGISTERS.                                *\n*              R14 = LINK REGISTER.                                   *\n*        AT ENTRY : LNCNTR = 0                                        *\n*                   SSRWK = 1-8 CHARACTERS TO BE BLOCK LETTERED       *\n*                   PBLOPT = DESIRED SLANT-CENTERING OPTIONS          *\n*                   (MUST BE SET ONLY THE FIRST TIME, THEN MUST BE    *\n*                   LEFT UNCHANGED UNTIL THE END OF BLOCK LETTERS)    *\n*        AT EXIT : R15 = CURRENT LINE NUMBER (1-12)                   *\n*                  BLL = GENERATED LINE                               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nPBLOCK   LH    R4,LNCNTR           GET CURRENT LINE COUNT\n         LTR   R4,R4               TEST IF CURRENT LINE COUNT SET\n         BNZ   PBL1                YES, CONTINUE\n         MVC   BLKWK,SSRWK         SAVE TEXT\n         OC    SSRWK(8),=8X'C0'    SHIFT ALL TEXT TO 4TH QUADRANT\n         L     R15,=A(BLOCKTR)\n         TR    SSRWK(8),0(R15)     TRANSLATE TO INDEX VALUE\nPBL1     MVI   BLL,C' '            FILL LINE WITH BLANKS\n         MVC   BLL+1(L'BLL-1),BLL\n         MVI   BLLFRAME,C'*'       SET UP FRAME CHARACTERS\n         MVI   BLLFRAMX,C'*'\n         L     R1,PPPWKJOE         ADDRESS WORK-JOE\n         USING JOE,R1              SET JOE ADDRESSABILITY\n         MVC   BLLCLASS(1),JOECURCL SYSOUT CLASS\n         DROP  R1                  DROP ADDRESSABILITY\n         MVC   BLLCLASX(1),BLLCLASS REPEAT SYSOUT CLASS\n         LA    R2,BLL+4            ASSUME NO CENTERING\n         TM    PBLOPT,PBLOCN       CENTERING SPECIFIED...\n         BNO   PBL4                NO, GO CHECK FOR SLANT\n         LA    R3,7                SCAN FOR\nPBL2     LA    R1,BLKWK(R3)          LAST\n         CLI   0(R1),C' '              NON-\n         BNE   PBL3                      BLANK\n         BCT   R3,PBL2                     CHARACTER\nPBL3     LA    R3,1(,R3)           COMPUTE\n         MH    R3,=H'7'              BEGINNING\n         SH    R3,=Y((L'BLL/2)-1)      PRINT POSITION\n         LCR   R3,R3                     TO CENTER\n         LA    R2,BLL(R3)                  BLOCK LETTERS\nPBL4     TM    PBLOPT,PBLOSL       TEST FOR SLANTING OPTION\n         BNO   PBL6                BRANCH IF NO\n         TM    PBLOPT,PBLOCN       RE-TEST FOR CENTERING\n         BO    PBL5                BRANCH IF CENTERING\n         LA    R2,5(,R2)           ADD MORE ROOM FOR SLANT\nPBL5     LA    R2,6(,R2)           SLANT\n         SRL   R4,1                  BLOCK\n         SLR   R2,R4                   LETTERS\nPBL6     XR    R4,R4               SET FOR A LETTER INDEX OF 0\nPBL7     XR    R1,R1               CLEAR REGISTER\n         IC    R1,BLKWK(R4)        USE RELATIVE TEXT LETTER\n         STC   R1,PBLCHR             TO FORM BLOCK TEXT\n         IC    R1,SSRWK(R4)        GET TRANSLATED LETTER INDEX\n         LTR   R1,R1               TEST IT\n         BZ    PBL8                BRANCH IF INDEX ZERO\n         BCTR  R1,0                DECREMENT BY ONE\n         MH    R1,=Y(L'BLOCKTB)    CONVERT TO DISPLACEMENT\n         AH    R1,LNCNTR           SELECT FOR LINE WITHIN LETTER\n         AL    R1,=A(BLOCKTB)      LETTER MASK ADDRESS\n         ICM   R1,B'1100',0(R1)    LETTER MASK BITS\nPBL8     LA    R3,12               BLOCK WIDTH OF 12\nPBL9     ALR   R1,R1               SHIFT LEFT AND TEST HIGH BIT\n         BC    12,PBL10            BRANCH IF OFF\n         MVC   0(1,R2),PBLCHR      OVERSTORE BLANK TO FORM BLOCK\nPBL10    LA    R2,1(,R2)           INCREMENT COL NUMBER\n         BCT   R3,PBL9             BRANCH TO FILL 12 COL'S\n         LA    R2,2(,R2)           2 BLANKS BETWEEN BLOCKS\n         LA    R4,1(,R4)           STEP TO NEXT LETTER INDEX\n         CL    R4,=F'8'            TEST IF 8 BLOCKS DONE\n         BL    PBL7                BRANCH IF NO\n         LH    R4,LNCNTR           GET CURRENT LINE COUNTER\n         LA    R4,2(,R4)           STEP TO NEXT LINE\n         LR    R15,R4              PASS BACK CURRENT LINE NUMBER\n         SRL   R15,1\n         CH    R4,=H'24'           LAST LINE FINISHED\n         BL    PBL11               BRANCH IF NO\n         XR    R4,R4               RESET LINE COUNTER\n         MVC   SSRWK,BLKWK         RESTORE TEXT\nPBL11    STH   R4,LNCNTR           SET CURRENT LINE COUNTER\n         BR    R14                 RETURN TO CALLER\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        P P D A T E - FORMAT DATE ROUTINE.                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*              R0 = WORK REGISTER                                     *\n*              R15 = WORK REGISTER                                    *\n*        AT ENTRY :                                                   *\n*              R1  = DATE IN THE FORM 00YYDDDC                        *\n*              R14 = RETURN ADDRESS                                   *\n*        AT EXIT :                                                    *\n*              DDMMMYY = FORMATTED DATE IN THE FORM ' DD MMM YY'      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nPPDATE   LTR   R1,R1               VALID DATE...\n         BZR   R14                 RETURN IF NO\n         ST    R1,$DOUBLE+4        STORE DATE\n         L     R15,=A(PYEARTAB)    COPY DATE CONVERSION TABLE\n         MVC   PMONTHS(12*4),0(R15)  FOR POSSIBLE UPDATE\n         TM    $DOUBLE+5,X'01'     ADJUST\n         BO    PTDEDYR               TABLE\n         TM    $DOUBLE+5,X'12'         ON\n         BM    PTDEDYR                   LEAP\n         MVI   PFEB,29                     YEARS\nPTDEDYR  MVC   DDMMMYY+7(3),=XL6'402120202020' GET PATTERN\n         ED    DDMMMYY+8(3),$DOUBLE+5 AND EDIT THE YEAR (YY)\n         MVC   $DOUBLE(6),$ZEROS   CLEAR ALL BUT JULIAN DAY\n         XR    R0,R0               CLEAR FOR IC\n         CVB   R1,$DOUBLE          CONVERT TO BINARY DAY\n         LA    R15,PMONTHS-4       ADDR OF DATE CONVERSION TABLE\nPTDATLUP SLR   R1,R0               CONVERT\n         LA    R15,4(,R15)           JULIAN DAY\n         IC    R0,0(,R15)              TO\n         CLR   R0,R1                     STANDARD DAY\n         BL    PTDATLUP                    *  (R1)\n         CVD   R1,$DOUBLE          CONVERT TO DECIMAL DAY\n         MVI   DDMMMYY,C' '        CLEAR 1ST BYTE OF AREA\n         UNPK  DDMMMYY+1(2),$DOUBLE+6(2) PLACE DAY (DD)\n         OI    DDMMMYY+2,C'0'           INTO MESSAGE\n         MVI   DDMMMYY+3,C' '      INSERT DELIMITER\n         MVC   DDMMMYY+4(3),1(R15) MOVE EBCDIC MONTH (MMM)\n         BR    R14                 RETURN TO CALLER\n         EJECT\n        LTORG\n         SPACE 1\nPATCH    DC    128S(*)\n         DC    CL8'ENDPATCH'\n         SPACE 1\n         DROP  R12                 KILL BASE ADDRESSABILITY\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        BLOCK LETTERS TABLES.                                        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nBLOCKTR  EQU   *-X'C0'\n*------------------ 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F-----\n         DC    AL1(00,01,02,03,04,05,06,07,08,09,00,00,00,00,00,00) -C0\n         DC    AL1(00,10,11,12,13,14,15,16,17,18,00,19,00,00,00,00) -D0\n         DC    AL1(00,00,20,21,22,23,24,25,26,27,00,00,00,00,00,00) -E0\n         DC    AL1(28,29,30,31,32,33,34,35,36,37,00,38,39,00,00,00) -F0\n         SPACE 1\nBLOCKTB  EQU   *,24\n*----------------01......05........10........15........20......24------\n         DC    X'7FE0FFF0C030C030C030FFF0FFF0C030C030C030C030C030' A-01\n         DC    X'FFE0FFF0C030C030C060FFC0FFC0C060C030C030FFF0FFE0' B-02\n         DC    X'7FE0FFF0C030C000C000C000C000C000C000C030FFF07FE0' C-03\n         DC    X'FF80FFC0C060C030C030C030C030C030C030C060FFC0FF80' D-04\n         DC    X'FFF0FFF0C000C000C000FF00FF00C000C000C000FFF0FFF0' E-05\n         DC    X'FFF0FFF0C000C000C000FF00FF00C000C000C000C000C000' F-06\n         DC    X'7FE0FFF0C030C000C000C000C1F0C1F0C030C030FFF07FE0' G-07\n         DC    X'C030C030C030C030C030FFF0FFF0C030C030C030C030C030' H-08\n         DC    X'7FE07FE0060006000600060006000600060006007FE07FE0' I-09\n         DC    X'3FF03FF0030003000300030003000300C300C300FF007E00' J-10\n         DC    X'C030C060C0C0C180C300FE00FE00C300C180C0C0C060C030' K-11\n         DC    X'C000C000C000C000C000C000C000C000C000C000FFF0FFF0' L-12\n         DC    X'C030E070F0F0D9B0CF30C630C030C030C030C030C030C030' M-13\n         DC    X'C030E030F030D830CC30C630C330C1B0C0F0C070C030C010' N-14\n         DC    X'FFF0FFF0C030C030C030C030C030C030C030C030FFF0FFF0' O-15\n         DC    X'FFE0FFF0C030C030C030FFF0FFE0C000C000C000C000C000' P-16\n         DC    X'7FE0FFF0C030C030C030C030C030C330C1B0C0F0FFE07FB0' Q-17\n         DC    X'FFE0FFF0C030C030C030FFF0FFE0C300C180C0C0C060C030' R-18\n         DC    X'06007FE0FFF0C630E6007FC03FE00670C630FFF07FE00600' $-19\n         DC    X'7FE0FFF0C030C000E0007FC03FE000700030C030FFF07FE0' S-20\n         DC    X'FFF0FFF00600060006000600060006000600060006000600' T-21\n         DC    X'C030C030C030C030C030C030C030C030C030C030FFF07FE0' U-22\n         DC    X'C030C030C030C030C030C030C030606030C019800F000600' V-23\n         DC    X'C030C030C030C030C030C030C630CF30D9B0F0F0E070C030' W-24\n         DC    X'C030C030606030C019800F000F00198030C06060C030C030' X-25\n         DC    X'C030C030606030C019800F00060006000600060006000600' Y-26\n         DC    X'FFF0FFF0006000C001801FC01FC00C00180030007FF0FFF0' Z-27\n         DC    X'3FC07FE0C0F0C1B0C330C630CC30D830F030E0307FE03FC0' 0-28\n         DC    X'06000E001E0006000600060006000600060006007FE07FE0' 1-29\n         DC    X'7FE0FFF0C0300030003000600180060018006000FFF0FFF0' 2-30\n         DC    X'7FE0FFF0C0300030003001E001E000300030C030FFF07FE0' 3-31\n         DC    X'038007800D80198031807FF0FFF001800180018001800180' 4-32\n         DC    X'FFF0FFF0C000C000C000FF80FFC0006000300030FFF0FFE0' 5-33\n         DC    X'7FE0FFF0C030C000C000FFE0FFF0C030C030C030FFF07FE0' 6-34\n         DC    X'FFF0FFE0C0C0018003000600060006000600060006000600' 7-35\n         DC    X'7FE0FFF0C030C03060603FC03FC06060C030C030FFF07FE0' 8-36\n         DC    X'7FE0FFF0C030C030C030FFF0FFF000300030C030FFF07FE0' 9-37\n         DC    X'30C030C0FFF0FFF030C030C030C030C0FFF0FFF030C030C0' #-38\n         DC    X'3FC07FE0C030003000301E303F306330C330C3307FE03FC0' @-39\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        JULIAN TO DAY AND MONTH CONVERSION TABLE.                    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nPYEARTAB DC    AL1(31),CL3'JAN'\n         DC    AL1(28),CL3'FEB'\n         DC    AL1(31),CL3'MAR'\n         DC    AL1(30),CL3'APR'\n         DC    AL1(31),CL3'MAY'\n         DC    AL1(30),CL3'JUN'\n         DC    AL1(31),CL3'JUL'\n         DC    AL1(31),CL3'AUG'\n         DC    AL1(30),CL3'SEP'\n         DC    AL1(31),CL3'OCT'\n         DC    AL1(30),CL3'NOV'\n         DC    AL1(255),CL3'DEC'\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        WORK-AREAS.                                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nWRKDSECT DSECT\n         DS    CL(BUFSTART-BFPDSECT) -------- RESERVED BY JES2 --------\n         SPACE 1\nSSRWK    DS    D                   BLOCK LETTERS TEXT\nBLKWK    DS    D                   BLOCK LETTERS WORK AREA\nPMONTHS  DC    12F'0'              AREA FOR COPY OF MONTHS-DAYS TABLE\nPFEB     EQU   PMONTHS+4           ENTRY FOR FEBRUARY\nLNCNTR   DS    H                   LINE COUNTER FOR BLOCK LETTERS\nPBLCHR   DS    CL1                 BLOCK LETTERS SAVE CHARACTER\nPBLOPT   DS    XL1                 BLOCK LETTERS OPTIONS\nPBLOSL   EQU   X'80'                 SLANT\nPBLOCN   EQU   X'40'                 CENTER\nDDMMMYY  DS    XL10                FORMAT DATE ' DD MMM YY'\n         SPACE 1\nCCM      DS    0CL2                CONTROL COMMAND\nCCMC     DS    XL1                 COMMAND CODE\nCCMB     DS    XL1                 PP1 BLANK\n         SPACE 1\nBLL      DS    0CL132              LINE FOR BLOCK LETTERS\nBLLFRAME DS    XL1                 PP1 FRAME CHARACTERS\nBLLCLASS DS    XL1                 PP2 SYSOUT CLASS\n         DS    XL98                PP3-100 BLANKS\nBLLINFO  DS    XL20                PP101-120 INFORMATION\n         DS    XL7                 PP121-127 BLANKS\nBLLCLASX DS    XL1                 PP128 SYSOUT CLASS\nBLLFRAMX DS    XL4                 PP129-132 FRAME CHARACTERS\n         SPACE 1\nHDR      DS    0CL132              LINE FOR HEADER\nHDRFRAME DS    XL1                 PP1 FRAME CHARACTERS\nHDRCLASS DS    XL1                 PP2 SYSOUT CLASS\n         DS    X                   PP3 BLANK\nHDRFORM  DS    XL5                 PP4-8 FORM TYPE START/CONT/END\n         DS    X                   PP9 BLANK\nHDRNUM   DS    XL8                 PP10-17 JOB NUMBER\n         DS    X                   PP18 BLANK\nHDRNAME  DS    XL8                 PP19-26 JOB NAME\n         DS    X                   PP27 BLANK\nHDRJNAME DS    XL8                 PP28-35 JOE NAME\n         DS    X                   PP36 BLANK\nHDRJID1  DS    XL3                 PP37-39 JOE ID1\n         DS    X                   PP40 BLANK\nHDRJID2  DS    XL3                 PP41-43 JOE ID2\n         DS    X                   PP44 BLANK\nHDRJROUT DS    XL8                 PP45-52 JOE ROUTE\n         DS    X                   PP53 BLANK\nHDRPNAME DS    XL20                PP54-73 PROGRAMMER NAME\n         DS    X                   PP74 BLANK\nHDRRKEY  DS    XL4                 PP75-78 'ROOM'\n         DS    X                   PP79 BLANK\nHDRROOM  DS    XL4                 PP80-83 ROOM NUMBER\n         DS    X                   PP84 BLANK\nHDRPTTN  DS    0XL9,X              PP85 BLANK USED AS FILL CHAR\nHDRTIME  DS    0XL11,XL8           PP86-93 HH.MM.SS\n         DS    X                   PP94 BLANK\nHDRAM    DS    XL2                 PP95-96 AM/PM\n         DS    X                   PP97 BLANK\nHDRDATE  DS    XL9                 PP98-106 DD MMM YY\n         DS    X                   PP107 BLANK\nHDRDNAME DS    XL8                 PP108-115 DEVICE NAME\n         DS    X                   PP116 BLANK\nHDRSYS   DS    XL4                 PP117-120 SYSTEM NAME\n         DS    X                   PP121 BLANK\n*------- SINCE REMOTE PRINTERS CAN BE MAX OF 120 DUPLICATE INFO IS\n*        SUPPLIED FOR PRINTERS WITH 132 LINE LENGTH.\nHDRFORMX DS    XL5                 PP122-126 FORM\n         DS    X                   PP127 BLANK\nHDRCLASX DS    XL1                 PP128 SYSOUT CLASS\nHDRFRAMX DS    XL4                 PP129-132 FRAME CHARACTERS\n         SPACE 2\nJ2XIT001 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         SPACE 1\n        $MODEND\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT004": {"ttr": 14599, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11?\\x00\\x90\\x11?\\x10Q\\x01\\x18\\x01\\x18\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-23T00:00:00", "modifydate": "1990-04-23T10:51:00", "lines": 280, "newlines": 280, "modlines": 0, "user": "SYSPAJA"}, "text": "X004     TITLE 'JES2 - EXIT 004 - JCL AND JES2 CONTROL STATEMENT SCAN'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* MODULE NAME : EXIT004                                               *\n* DESCRIPTIVE NAME : JES2 EXIT 4 (HASPRDR)                            *\n*                    JCL AND JES2 CONTROL STATEMENT SCAN              *\n* PURPOSE :     THIS JES2 EXIT ALLOWS YOU TO SCAN JCL AND JES2        *\n*               CONTROL STATEMENTS (NOTE : JOB STATEMENTS AND         *\n*               INTERNAL READER CONTROL STATEMENTS SUCH AS /*DEL      *\n*               ARE NOT INCLUDED IN THE SCAN).                        *\n* INVOCATION POINT : UEXIT004                                         *\n* ENVIRONMENT : JES2 MAIN TASK                                        *\n* REGISTERS AT ENTRY :                                                *\n*               R0 : A CODE INDICATING WHETHER A JES2 CONTROL OR JCL  *\n*                    CONTROL STATEMENT IS BEING PROCESSED             *\n*                    0 = A JES2 CONTROL STATEMENT                     *\n*                    4 = A JCL STATEMENT                              *\n*               R1 : POINTER TO A 3-WORD PARAMETER LIST               *\n*                    WORD 1 (+0) = ADDRESS OF THE CONTROL STATEMENT   *\n*                           IMAGE BUFFER.                             *\n*                    WORD 2 (+4) = ADDRESS OF THE EXIT FLAG BYTE,     *\n*                           \"RDWFLAGX\", IN THE PCE.                   *\n*                    WORD 3 (+8) = ADDRESS OF THE \"JCTXWRK\" FIELD     *\n*                           IN THE JCT.                               *\n*               R2-R9 : N/A                                           *\n*               R10 : ADDRESS OF THE JCT                              *\n*               R11 : ADDRESS OF THE HCT                              *\n*               R12 : N/A                                             *\n*               R13 : ADDRESS OF THE PCE                              *\n*               R14 : RETURN ADDRESS                                  *\n*               R15 : ENTRY ADDRESS                                   *\n* REGISTERS ON RETURN :                                               *\n*               R0-R1 : N/A                                           *\n*               R2-R14 : AS AT ENTRY                                  *\n*               R15 : A RETURN CODE :                                 *\n*                     =0, CONTINUE USING ANY ADDITIONAL EXITS, THEN   *\n*                         PERFORM STANDARD HASPRDR PROCESSING         *\n*                     =4, CONTINUE WITHOUT USING ANY ADDITIONAL EXITS *\n*                         BUT PERFORM STANDARD HASPRDR PROCESSING     *\n*                     =8, FOR JES2 CONTROL STATEMENTS, TELLS JES2 NOT *\n*                         TO PERFORM STANDARD PROCESSING, INSTEAD,    *\n*                         IMMEDIATELY CONVERT THE STATEMENT TO A      *\n*                         COMMENT (//*) WITH THE NULL-ON-INPUT FLAG   *\n*                         SET TO ONE AND WRITE THE STATEMENT TO THE   *\n*                         JCL DATA-SET. FOR JCL STATEMENTS, TELLS     *\n*                         JES2 TO PERFORM STANDARD HASPRDR PROCESSING *\n*                     =12, TELLS JES2 TO CANCEL THE JOB BECAUSE AN    *\n*                         ILLEGAL CONTROL STATEMENT HAS BEEN DETECTED *\n*                         (OUTPUT IS PRODUCED)                        *\n*                     =16, TELLS JES2 TO PURGE THE JOB BECAUSE AN     *\n*                         ILLEGAL CONTROL STATEMENT HAS BEEN DETECTED *\n*                         (NO OUTPUT IS PRODUCED)                     *\n* LINKAGE EDITOR INFO :                                               *\n*               ATTRIBUTES : REENTRANT, REUSEABLE, REFRESHABLE        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* AUTHOR :      MOINIL P.A.                                           *\n*               COMPUTING CENTRE                                      *\n*               J.R.C. - ISPRA ESTABLISHMENT                          *\n*               21020 ISPRA (VA), ITALY                               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* JES2PARM INITIALIZATION STATEMENTS :                                *\n*               LOAD=J2XIT004                                         *\n*               EXIT004 ROUTINE=UEXIT004,DISABLE,TRACE=YES            *\n*                                        ENABLE        NO             *\n*                                                                     *\n* JES2 OPERATOR CONTROL COMMANDS :                                    *\n*               $T EXIT004,DISABLE,TRACE=YES                          *\n*                          ENABLE        NO                           *\n*               $D EXIT004                                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE :     SCAN FOR AND HANDLE JOBIO= OR I= NEW LOCAL PARAMETER  *\n*               IN THE JES2 /*JOBPARM CONTROL STATEMENT.              *\n*               FORMAT : JOBIO=NNNN OR I=NNNN                         *\n*                        WHERE NNNN IS A 1 UP TO 4 NUMERIC DIGITS.    *\n*               OBJECT : NNNN IS THE ESTIMATED TOTAL SRB TIME FOR A   *\n*                        JOB (EXPRESSED IN SECONDS).                  *\n*                        THE VALUE IS STORED IN \"JCTUSER0\" FIELD.     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n         COPY  $HASPGBL\n         SPACE 1\nJ2XIT004 $MODULE ENVIRON=JES2,TITLE='JES2 - EXIT 004',                 X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $RDRWORK,           GENERATE HASP RDRWORK DSECT         X\n               RPL                 GENERATE MVS RPL DSECT\n         TITLE 'JES2 - EXIT 004 - JCL AND JES2 CONTROL STATEMENT SCAN'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        EXIT MAIN ENTRY POINT.                                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nUEXIT004 $ENTRY BASE=R12\n        $SAVE  ,                   SAVE CALLER'S REGISTERS\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SELECT CONTROL STATEMENT PROCESS.                            *\n*              THE RETURN CODE 0 TELLS JES2 TO CONTINUE WITH          *\n*              STANDARD PROCESSING.                                   *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         LTR   R0,R0\n         BNZ   EXIT0               LET'S GO, JCL STATEMENT\n         LM    R7,R9,0(R1)         3-WORD'S PARM. ADDRESSES\n         LTR   R9,R9               ADDRESS OF JCTXWRK\n         BZ    EXIT0               LET'S GO, NOT IN A JOB\n         CLC   0(10,R7),=CL10'/*JOBPARM'\n         BNE   EXIT0               LET'S GO, NOT /*JOBPARM\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                / * J O B P A R M    S T A T E M E N T               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SEARCH JOBIO= OR I= KEYWORD.                                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         LA    R4,10(R7)           START OF SCAN\n         LA    R3,69(R7)           END OF SCAN\n         LA    R2,1                STEP TO SCAN\n         CLI   0(R4),C' '          SKIP BLANKS IF ANY BEFORE KEYWORDS\n         BNE   *+L'*+8\n         BXLE  R4,R2,*-8\n         B     EXIT0               NONE, LET'S GO\n         LR    R5,R4               RETAIN START OF KEYWORD(S)\nSEARCH   CLC   0(6,R4),=CL6'JOBIO=' SCAN TO FIND KEYWORD I NEED\n         BE    FOUND\n         CLC   0(2,R4),=CL2'I='\n         BE    FOUND\n         CLI   0(R4),C' '\n         BE    EXIT0               NONE, LET'S GO\n         BXLE  R4,R2,SEARCH\n         B     EXIT0               NONE, LET'S GO\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        PROCESS JOBIO= OR I= VALUE.                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nFOUND    LR    R6,R4               RETAIN START OF THIS KEYWORD\n         LA    R3,71(R7)           END OF SCAN\n         XR    R0,R0\n         XR    R1,R1\n         CLI   1(R4),C'='\n         BE    *+L'*+4\n         LA    R4,4(R4)\n         LA    R4,1(R4)\nLOOP     BXLE  R4,R2,*+L'*+4       SCAN AND COMPUTE VALUE\n         B     VERVAL\n         CLI   0(R4),C' '\n         BE    VERVAL\n         CLI   0(R4),C','\n         BE    VERVAL\n         CLI   0(R4),C'0'\n         BL    NOTNUM              ERROR, NOT NUMERIC DIGIT\n         CLI   0(R4),C'9'\n         BH    NOTNUM              ERROR, NOT NUMERIC DIGIT\n         IC    R0,0(R4)\n         N     R0,=A(X'0F')\n         LTR   R1,R1\n         BNP   *+L'*+4\n         MH    R1,=H'10'\n         AR    R1,R0\n         CH    R1,=H'9999'\n         BH    VTLRGE              ERROR, VALUE TOO LARGE\n         B     LOOP\nVERVAL   LTR   R1,R1\n         BNP   VNLL                ERROR, NULL VALUE\n         USING JCT,R10\n         ST    R1,JCTUSER0         SET REQUESTED SRB TIME\n         DROP  R10\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        BUILD NEW /*JOBPARM FOR JES2 IF NEEDED.                      *\n*              THE RETURN CODE 8 TELLS JES2 TO SKIP THE STANDARD      *\n*              PROCESSING AND, INSTEAD, IMMEDIATELY CONVERT THE       *\n*              STATEMENT TO A COMMENT (//*).                          *\n*              IF ANY PARAMETER OTHER THAN JOBIO= (OR I=) IS          *\n*              PRESENT, A NEW /*JOBPARM IS BUILDED AND PASSED TO      *\n*              JES2 AS NEXT CARD IMAGE.                               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CLR   R5,R6\n         BNE   *+L'*+8\n         CLI   0(R4),C' '\n         BE    EXIT8               ONLY JOBIO= OR I= IN /*JOBPARM\n         OI    0(R8),RDWXXSNC      SAY NEXT CARD IMAGE SUPPLIED\n         MVC   0(80,R9),0(R7)      COPY /*JOBPARM CARD\n         MVI   10(R7),C' '         BUILD /*JOBPARM JOBIO= OR I=\n         MVC   11(61,R7),10(R7)\n         SLR   R6,R7\n         ALR   R6,R9\n         SLR   R4,R7\n         ALR   R4,R9\n         LR    R1,R4\n         SLR   R1,R6\n         BCT   R1,*+L'*+6\n         MVC   0(*-*,R5),0(R6)     <<EXECUTED>>\n         EX    R1,*-6\n         CLI   55(R7),C' '\n         BNE   *+L'*+6\n         MVC   55(15,R7),=CL15'-LOCAL-PROCESS-'\n         LR    R5,R6               BUILD REMAINING /*JOBPARM\n         LR    R3,R4\n         BCTR  R3,0\n         LA    R2,1\n         MVI   0(R5),C' '\n         BXLE  R5,R2,*-4\n         CLI   0(R4),C' '\n         BNE   SHIFT\n         BCTR  R6,0\n         MVI   0(R6),C' '\n         B     EXIT8\nSHIFT    LA    R3,71(R9)\n         MVI   0(R4),C' '\n         BXLE  R4,R2,*+L'*+4\n         B     EXIT8\n         CLI   0(R4),C' '\n         BE    EXIT8\n         MVC   0(1,R6),0(R4)\n         ALR   R6,R2\n         B     SHIFT+L'SHIFT\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        ERROR DETECTED, PREPARE MESSAGE.                             *\n*              THE RETURN CODE 12 TELLS JES2 TO CANCEL THE JOB        *\n*              WITH THE STATEMENT AS THE LAST IN THE JCL DATA-SET.    *\n*              AN ERROR MESSAGE IS BUILDED AND PASSED TO JES2.        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nNOTNUM   LA    R3,=CL24'= NOT NUMERIC (0-9) ...'\n         ALR   R4,R2\n         B     SETMSG\nVTLRGE   LA    R3,=CL24'= GREATER THAN 9999 ...'\n         ALR   R4,R2\n         B     SETMSG\nVNLL     LA    R3,=CL24'= EQUAL 0 (INVALID) ...'\nSETMSG   MVC   0(10,R9),=CL10'  ERROR : ' BUILD DIAGNOSE MESSAGE\n         MVC   10(70,R9),9(R9)\n         SLR   R4,R6\n         BCT   R4,*+L'*+6\n         MVC   10(*-*,R9),0(R6)    <<EXECUTED>>\n         EX    R4,*-6\n         LA    R1,12(R9,R4)\n         MVC   0(24,R1),0(R3)\n         OI    0(R8),RDWXXSEM      SAY ERROR MESSAGE SUPPLIED\n         B     EXIT12\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GO BYE-BYE.                                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nEXIT0    XR    R15,R15             SET RETURN CODE TO 0\n         SPACE 1\nLEAVE   $RETURN RC=(R15)           RETURN TO JES2\n         SPACE 1\nEXIT8    LA    R15,8               SET RETURN CODE TO 8\n         B     LEAVE\nEXIT12   LA    R15,12              SET RETURN CODE TO 12\n         B     LEAVE\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        LITERAL POOL.                                                *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        LTORG\n         SPACE 1\nPATCH    DC    128S(*)\n         DC    CL8'ENDPATCH'\n         SPACE 1\n        $MODEND\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT005": {"ttr": 14849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x01\\x7f\\x00\\x91\\x01\\x7f\\x150\\x02\\x8f\\x02\\x8f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-01-17T00:00:00", "modifydate": "1991-01-17T15:30:00", "lines": 655, "newlines": 655, "modlines": 0, "user": "SYSPAJA"}, "text": "X005     TITLE 'JES2 - EXIT 005 - ADDITIONAL LOCAL COMMANDS'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* MODULE NAME : EXIT005                                               *\n* DESCRIPTIVE NAME : JES2 EXIT 5 (HASPCOMM)                           *\n*                    JES2 COMMAND PREPROCESSOR                        *\n*                    (ADDITIONAL LOCAL COMMANDS)                      *\n* PURPOSE :     THIS JES2 EXIT IS DESIGNED TO IMPLEMENT INSTALLATION  *\n*               SPECIFIC COMMANDS, AND AS SUCH MUST INTERCEPT ONLY    *\n*               THOSE COMMANDS WHEN ENCOUNTERED.                      *\n* INVOCATION POINT : EXIT005                                          *\n* ENTRY POINT : UEXIT005                                              *\n* ENVIRONMENT : JES2 MAIN TASK                                        *\n* REGISTERS AT ENTRY :                                                *\n*               R0-R4 : N/A                                           *\n*               R5 : POINTER TO THE ADDRESS OF THE CURRENT OPERAND    *\n*               R6 : INCREMENT VALUE OF 4                             *\n*               R7 : POINTER TO THE ADDRESS OF THE LAST OPERAND       *\n*               R8-R10 : N/A                                          *\n*               R11 : ADDRESS OF THE HCT                              *\n*               R12 : N/A                                             *\n*               R13 : ADDRESS OF THE HASPCOMM PCE                     *\n*               R14 : RETURN ADDRESS                                  *\n*               R15 : ENTRY ADDRESS                                   *\n* REGISTERS ON RETURN :                                               *\n*               R0 : IF A USER SUPPLIED MESSAGE IS TO BE PASSED,      *\n*                    IT MUST CONTAIN THE LENGTH OF THE MESSAGE,       *\n*                    OTHERWISE, IT'S NOT APPLICABLE.                  *\n*               R1 : N/A                                              *\n*               R15 : A RETURN CODE :                                 *\n*                     =0, CONTINUE USING ANY ADDITIONAL EXITS         *\n*                     =4, CONTINUE WITHOUT USING ANY ADDITIONAL EXITS *\n*                     =8, TERMINATE WITHOUT ANY MESSAGE               *\n*                     =12, TERMINATE ISSUING THE \"OK\" MESSAGE         *\n*                     =16, TERMINATE USING A USER SUPPLIED MESSAGE    *\n* LINKAGE EDITOR INFO :                                               *\n*               ATTRIBUTES : REENTRANT, REUSEABLE, REFRESHABLE        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* AUTHOR :      JOHN V. HOOPER                                        *\n*               FIRST UNION NATIONAL BANK                             *\n*               301 SOUTH TRYON STREET                                *\n*               CHARLOTTE, N.C. 28288                                 *\n*               (704) 374-2427                                        *\n*               ORIGIN : J005$SL FROM CBT TAPE 89 FEB, FILE 381.      *\n* CHANGES :     ADAPTED TO JES2 2.2.0 BY MOINIL P.A.                  *\n*               THE ORIGINAL $SL COMMAND HAS TAKEN AS BASIS TO        *\n*               IMPLEMENT $Y... LOCAL COMMANDS (WE CHOICE $Y...       *\n*               FOR OUR ACTUAL AND ANY FUTURE NEEDS).                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* JES2PARM INITIALIZATION STATEMENTS :                                *\n*               LOAD=J2XIT005                                         *\n*               EXIT005 ROUTINE=UEXIT005,DISABLE,TRACE=YES            *\n*                                        ENABLE        NO             *\n*                                                                     *\n* JES2 OPERATOR CONTROL COMMANDS :                                    *\n*               $T EXIT005,DISABLE,TRACE=YES                          *\n*                          ENEABLE       NO                           *\n*               $D EXIT005                                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                    C   O   M   M   A   N   D   S                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* $YL COMMAND :                                                       *\n* -------------                                                       *\n*        THIS COMMAND IS WRITTEN TO LIST THE INDIVIDUAL SETUP         *\n*        STATEMENTS FOR A REQUESTED BATCH JOB (BY READING THE         *\n*        JCL IMAGES DATA-SET FOR THE JOB).                            *\n*        COMMAND SYNTAX : $YL JN                                      *\n*                         WHERE : JN IS THE BATCH JOB NUMBER.         *\n*        RESPONSE MSG-ID'S USED : $HASP900 AND $HASP999.              *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n         COPY  $HASPGBL\n         SPACE 1\nJ2XIT005 $MODULE ENVIRON=JES2,TITLE='JES2 - EXIT 005',                 X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               CVT,                GENERATE MVS CVT DSECT              X\n               RESPA,              GENERATE MVS RESPA DSECT            X\n               RPL,                GENERATE MVS IFGRPL DSECT           X\n               UCM                 GENERATE MVS UCM DSECT\n         TITLE 'JES2 - EXIT 005 - ADDITIONAL LOCAL COMMANDS'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        REDIRECTION VALUES FOR DISPLAY COMMANDS.                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nRV$Y     EQU   4                   $Y SAME AS FOR $DJ (SEE HASPCOMM)\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        EXIT MAIN ENTRY POINT.                                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nUEXIT005 $ENTRY BASE=R12\n        $SAVE  ,                   SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SEE IF THIS IS A COMMAND FOR US.                             *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CLI   COMVERB,C'Y'        SEE IF THIS IS THE $Y... COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES.                *\n*        (SEE HASPCOMM AT LABEL 'COMTREDI') ---> (*1)                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------------------------------------------------------ (*1) START ---*\n         TM    COMFLAG,CMBFLAGU    IS THIS UCM...                  @130\n         BZ    COMGOOD             IF NOT SKIP REDIRECTION\n         TM    COMLFLG,COMLFLGC+COMLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   COMRPT              SKIP AUTOMATIC L=CCA\n         CLI   COMUCM,0            IS UCM ID VALID?            @OY29823\n         BE    COMGOOD             BR IF NO                    @OY29823\n         LA    R1,RV$Y             LOAD REDIRECT OFFSET FOR $Y     -EU-\n         BCTR  R1,0                REDUCE BY 1                     -EU-\n         SLL   R1,1                DOUBLE                          -EU-\n         XR    R2,R2               ZERO WORK\n         IC    R2,COMUCM           PICK UP CURRENT UCM\n         LR    R3,R1               SAVE OFFSET                 @OY29019\n         L     R10,$COMEXTN        POINT TO EXTENDED AREA      @OY29019\n         USING CWA,R10             ESTABLISH ADDRESSABILITY    @OY29019\n        $CALL  CONSCHK,PARM=(R2),ERRET=COMRPT VALID CONSOLE ID @OY29019\n         LR    R1,R3               RESTORE OFFSET              @OY29019\n         MH    R2,CWALCON          MULTIPLY BY LENGTH DIMENSION\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO ELEMENT\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    COMLFLG,COMLFLGA    HAS AREA BEEN SET\n         BO    COMRPT              SKIP AUTOMATIC IF YES\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R10                 DROP EXTENDED AREA BASE     @OY29019\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        VERIFY CONSOLE/AREA.                                         *\n*        (SEE HASPCOMM AT LABEL 'COMVCCA') ---> (*2)                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------------------------------------------------------ (*2) START ---*\nCOMRPT   TM    COMLFLG,COMLFLGR    REMOTE SYSTEM UCM               @130\n         BO    COMROK              UCM AND AREA OK                 @130\n         L     R2,$COMEXTN         POINT TO EXTENDED WORK AREA     @134\n         USING CWA,R2              ESTABLISH COM ADDRESSABILITY    @136\n         CLC   CWA7603D,$ZEROS     VERIFICATION RTN AVAILABLE ...  @136\n         BE    COMROK              NO, RETURN AS VALID ROUTING     @136\n         MVC   XASCID(1),COMUCM    SET UCM\n         MVC   XASDID(1),COMUCMA   SET AREA\n         CLI   XASDID,0            ZERO AREA\n         BNE   COMSSAOP            SKIP NSI                        @130\n         MVI   XASDID,C'Z'         FORCE AREA Z\nCOMSSAOP MVC   XAU(1),COMUCM       INDICATE SOURCE SAME AS OUTPUT  @130\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n        MODESET EXTKEY=ZERO        GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n        $AMODE 24,PUSHR=R0,R=R14   GO TO AMODE 24                  @136\n         BALR  R14,R15             ENTER OS VERIFICATION ROUTINE   @136\n        $AMODE POPR=R0,R=R14       RESTORE PREV AMODE              @136\n        MODESET EXTKEY=HASP        GET KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR         @133\n         BH    COMBADRC            BRANCH IF BAD RETURN CODE   @OY18399\n         NI    COMGFLG1,FF-COMG1CON CLEAR MSTR CON RETRY BIT   @OY18399\n         B     COMROK              SKIP NXT IF CONSOLE/AREA OK @OY18399\nCOMBADRC XR    R10,R10             ZERO WORK                   @OY18399\n         ICM   R10,B'0011',COMUCM+(COMUCMA-COMUCMA) UCMID + AREA @133KL\n         MVI   COMUCMA,0           FORCE NO MLWTO (NO PREVIOUS LINE)\n         CH    R15,=H'12'          IS CONSOLE DOWN\n         BNE   COMCLBIT            NO, BRANCH                  @OY18399\n         CLI   COMACEID,C' '       IS COMMAND AN ACE ?         @OY18399\n         BE    COMCONDN            NO, BRANCH                  @OY18399\n         TM    COMGFLG1,COMG1CON   TRIED TO GET MSTR CON ID ?  @OY18399\n         BO    COMCONDN            YES, BRANCH                 @OY18399\n         L     R15,CVTPTR          GET CVT ADDRESS             @OY18399\n         L     R15,CVTCUCB-CVT(,R15) GET ADDR OF UCM BASE      @OY18399\n         SL    R15,$F4             ADDR OF MCS PREFIX PTR      @OY18399\n         L     R15,UCMPRFXP-UCMPRFXP(,R15) ADDR OF MCS PREFIX  @OY18399\n         L     R15,UCMMCENT-UCMPRFX(,R15) ADD OF MSTR CON UCM  @OY18399\n         MVC   XASCID,UCMID-UCMLIST(R15) SET MASTER CONSOLE    @OY18399\n         MVC   COMUCM,UCMID-UCMLIST(R15)     UCMID             @OY18399\n         MVI   XASDID,C'Z'         FORCE AREA Z                @OY18399\n         OI    COMGFLG1,COMG1CON   TURN ON MSTR CON RETRY BIT  @OY18399\n         B     COMSSAOP            GO TRY IT AGAIN             @OY18399\nCOMCONDN MVC   COMFLAG(4),COWTOL DESTROY APPARENT SOURCE INFO  @OY18399\n         MVC   COMOUT,COWTOL+(COMOUT-COMFLAG) OMIT CNTRL FIELD @OY18399\nCOMCLBIT NI    COMGFLG1,FF-COMG1CON CLEAR MSTR CON RETRY BIT   @OY18399\n        $CWTO  L=L'CMBMSG,MSGID=900 ECHO THE COMMAND             @220KR\n         MVC   COMMAND(COMVINVL),COMVINV MOVE DIAGNOSTIC TEXT\n         STC   R10,COMVINVA        SET AREA\n         SRL   R10,8               ALIGN CONSOLE ID\n*-EU-   $CFCVE VALUE=(R10)         CONVERT TO EBCDIC              -EU-*\n         CVD   R10,$DOUBLE         CONVERT TO PACKED\n         MVC   $DOUBLE(4),=X'F0212020' SET EDIT MASK\n         ED    $DOUBLE(4),$DOUBLE+6 EDIT CONSOLE ID TO AREA\n         MVC   COMVINVC,$DOUBLE+2  MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+COMVINVL(8),COMACEID MOVE IDENTIFIER\n         MVC   COMMAND+COMVINVL(8),COMACEID MOVE IDENTIFIER\n        $CWTO  L=COMVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE -EU-\n         B     EXIT8               GET OUT                         -EU-\n         DROP  R2                  DROP COM ADDRESSABILITY         @136\n*-------------------------------------------------------- (*2) END ---*\nCOMROK   CLI   COMUCMA,0           TEST FOR MLWTO                  @130\n         BE    COMGOOD             IF NOT, SKIP                    @130\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n        $CWTO  L=L'CMBMSG,MSGID=900 ECHO THE COMMAND             @220KR\n         MVI   COMLINET,X'20'      SET DATA LINE\n*-------------------------------------------------------- (*1) END ---*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SELECT THE SPECIFIC COMMAND AND                              *\n*        CHECK THE CONSOLE AUTHORITY.                                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nCOMGOOD  LA    R2,COMTBL           COMMANDS TABLE\n         CLI   0(R2),0             TEST END OF TABLE\n         BE    COMINVC             BRANCH IF YES\n         CLC   COMVERB+1(1),0(R2)  IS IT THIS ONE\n         BE    COMCHKA             BRANCH IF YES\n         LA    R2,L'COMTBL(R2)     BUMP TO NEXT ONE\n         B     COMGOOD+L'COMGOOD\nCOMCHKT  TM    COMAUTH,*-*         <<EXECUTED>>\nCOMCHKA  XR    R1,R1\n         IC    R1,1(R2)            GET REJECTION BITS\n         ICM   R9,B'1111',2(R2)    SET COMMAND ADDRESS\n         EX    R1,COMCHKT          TEST FOR AUTHORIZED CONSOLE\n         BZR   R9                  BRANCH IF OK, GO PROCESS COMMAND\nCOMINVC  MVC   COMMAND+9(L'MSGINVC),MSGINVC SET ERROR MESSAGE\n         LA    R0,L'MSGINVC+9      SET MESSAGE LENGTH\n        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GO BYE-BYE.                                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nEXIT0    XR    R15,R15             SET RETURN CODE TO 0\n        $RETURN RC=(R15)           RETURN TO JES2\n         SPACE 1\nEXIT8    LA    R15,8               SET RETURN CODE TO 8\n        $RETURN RC=(R15)           RETURN TO JES2\n         EJECT\n*------- (SEE HASPCOMM AT THE SAME LABELS) ---------------------------*\n         SPACE 1\nCOWTOL  $WTO   PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nCOMVINV  DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nCOMVINVL EQU   *-COMVINV\nCOMVINVC EQU   COMMAND+COMVINVL-16,2\nCOMVINVA EQU   COMVINVC+2,1\nCOMLFLG  EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nCOMLFLGR EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nCOMLFLGC EQU   2                   CONSOLE HAS BEEN SPECIFIED\nCOMLFLGA EQU   4                   AREA HAS BEEN SPECIFIED\nCOMR     EQU   CMBFLAGR            LEVEL OF RESTRICTION FOR REMOTES\nCOMS     EQU   DCTREJSY            REJECT UNLESS SYSTEM AUTHORIZATION\nCOMD     EQU   DCTREJDV            REJECT UNLESS DEVICE AUTHORIZATION\nCOMJ     EQU   DCTREJJB            REJECT UNLESS JOB AUTHORIZATION\nCOMJDS   EQU   COMJ+COMD+COMS      COMBINATION\nCOMRS    EQU   COMR+COMS           COMBINATION\nCOMRJ    EQU   COMR+COMJ           COMBINATION\n*---------------------------------------------------------------------*\n         SPACE 1\nMSGINVC  DC    C' INVALID COMMAND'\n         EJECT\n        LTORG\n         SPACE 1\nPATCH    DC    128S(*)\n         DC    CL8'ENDPATCH'\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        $Y... COMMANDS TABLE.                                        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nCOMTBL   DS    0CL6\n         DC    CL1'L',AL1(COMRJ+COMD),AL4(YLCMD)\n         DC    AL1(0)\n         EJECT\n*------------------------------------------------------- $YL START ---*\n         CNOP  0,8                 $YL JN COMMAND PROCESSING\n         USING *,R9                LOCAL ADDRESSABILITY\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA.                                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nYLCMD   $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $YLWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$YLWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET 'TO' LENGTH\n         XR    R0,R0               CLEAR 'FROM' ADDRESS\n         XR    R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n        $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         ST    R1,BUFADDR          SAVE BUFFER ADDRESS\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        EXAMINE THE COMMAND OPERAND.                                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,1(,R1)           BUMP PAST 2ND CHAR IN COMVERB\n         ST    R1,0(,R5)           SAVE POINTER TO OPERAND\n         CLI   0(R1),C'J'          SEE IF BATCH JOBS REQUESTED\n         BNE   YLBADOP             BRANCH IF NOT\n         LA    R14,1(R1)           POINT TO START OF JOB NUMBER\n         LA    R1,1(R1)            POINT TO OPERAND\n         LR    R2,R1               SAVE START OF OPERAND ADDRESS\n         XR    R15,R15             SET LENGTH\nYLSN1    CLI   0(R14),C' '         END OF OPERAND\n         BE    YLSN2               YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    YLBADOP             NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    YLBADOP             NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     YLSN1               LOOP\nYLSN2    LTR   R15,R15             TEST LENGTH\n         BZ    YLBADOP             ZERO, ERROR\n         CH    R15,=H'6'           TEST LENGTH\n         BH    YLBADOP             GREATER THAN 6, ERROR\n         BCT   R15,*+L'*+6         MAKE MACHINE LENGTH\n         PACK  DOUBLE,0(*-*,R2)    <<EXECUTED>>\n         EX    R15,*-6             PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    YLBADOP             YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    YLBADOP             YES, BRANCH\n         STH   R15,JOBNUM          SAVE JOB NUMBER\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SCAN THE JOB QUEUE FOR THE JOB NUMBER.                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         LR    R1,R15              LOAD JOB NUMBER\n        $QLOC  (R1)                GET JQE FOR THIS JOB NUMBER\n         BNZ   YLJQEF              BRANCH IF FOUND\n         MVC   COMMAND(L'YLMSG1),YLMSG1 SET JOB NOT FOUND MESSAGE\n         LA    R0,L'YLMSG1         SET MESSAGE LENGTH\n        $CWTO  L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\nYLJQEF   LR    R7,R1               SAVE JQE ADDRESS\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB\n         BZ    YLJQEF1             BRANCH IF YES\n         MVC   COMMAND(L'YLMSG2),YLMSG2 SET NOT BATCH JOB MESSAGE\n         LA    R0,L'YLMSG2         SET MESSAGE LENGTH\n        $CWTO  L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\nYLJQEF1  MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(199),COMMAND  COMMAND\n         MVC   COMMAND+201(200),COMMAND+200  AREA\n         LH    R1,JOBNUM           LOAD JOB NUMBER\n         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB\n         CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER\n         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE\n         MVC   COMMAND+10(8),JQEJNAME MOVE JOB NAME TO MESSAGE\n         LH    R14,$JQEMSKL        GET JQE SPOOL MASK LEN-1\n         EX    R14,MVSPMASK        SAVE SPOOL MASK USED BY THIS JOB\n         NC    $SPMSKWA,$SPLSLCT   'AND' WITH QUALIFYING SPOOLS\n         EX    R14,CKSPMASK        SEE IF ALL REQUIRIED SPOOLS AVAIL\n         BE    YLJQEF2             BRANCH IF YES\n         MVC   COMMAND+19(L'YLMSG3),YLMSG3 MOVE MESSAGE TO BUFFER\n         LA    R0,L'YLMSG3+19      SET LENGTH\n        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\nMVSPMASK MVC   $SPMSKWA(*-*),JQESUMSK <<EXECUTED>>\nCKSPMASK CLC   $SPMSKWA(*-*),JQESUMSK <<EXECUTED>>\nYLJQEF2  TM    JQEFLAG3,JQE3SYSD   IS THIS A JES2 CREATED JOB\n         BZ    YLJQEF3             NO, BRANCH\n         MVC   COMMAND+19(L'YLMSG4),YLMSG4 SET MSG TEXT\n        $CWTO  L=L'YLMSG4+19,MSGID=999 WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\nYLJQEF3  LH    R3,$BUFSIZE         LOAD LENGTH OF BUFFER\n         SH    R3,=Y($YLBLEN-(BUFSTART-BFPDSECT)) SUBTR LEN OF BASIC\n         STH   R3,WRKLEN           SAVE LENGTH OF WORK AREA\n         LA    R2,$YLWORK+$YLBLEN  POINT TO CARD SECTION OF BUFFER\n         ST    R2,CURRTEXT         SAVE ADDRESS OF SETUP TEXT\n         LR    R4,R2\n         XR    R5,R5               SET MOVE LENGTH TO ZERO\n         MVCL  R2,R4               ZEROES SETUP TEXT AREA\n         LA    R3,PCEDADCT         POINT TO DA DCT\n         L     R4,BUFADDR          GET A BUFFER ADDRESS\n         USING BFPDSECT,R4         SET ADDRESSABILITY TO THE BUFFER\n         MVI   PCEDEVTP,PCEDARD    INDICATE READ REQUEST\n         ST    R4,PCEBUFAD         SET THE BUFFER ADDRESS\n         L     R15,JQETRAK         GET THE JCT TRACK ADDRESS\n         ST    R15,PCESEEK         SET THE TRACK ADDRESS\n         LA    R15,IOBCCW1         LOAD START ADDRESS OF CCW'S\n         ST    R15,IOBSTART        STORE ADDRESS IN BUFFER\n        $EXCP  (R3)                READ IN THE JCT\nYLWTIO1 $WAIT  IO                  WAIT FOR IO TO COMPLETE\n         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO\n         BZ    YLWTIO1             NOT COMPLETE, GO WAIT AGAIN\n         BM    YLIOERR             GO PROCESS I/O ERROR\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        AT THIS POINT WE HAVE SUCCESSFULLY READ THE JCT.             *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         LR    R10,R4              MOVE JCT ADDRESS TO REG 10\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         L     R0,$JOBQPTR         GET ADDR OF JOB QUEUE ORIGIN\n         AL    R0,JCTJQE           ADD JQE OFFSET FROM JCT\n         CLR   R0,R7               SEE IF IT MATCHES OUR JQE ADDRESS\n         BNE   YLIOERR             NO, ERROR\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        AT THIS POINT WE HAVE A VALID JCT FOR THE JOB.               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         TM    JCTJBOPT,JCTSETUP   HAS JOB EVER BEEN SETUP\n         BO    YLSUPOK             BRANCH IF YES\n         MVC   COMMAND+19(L'YLMSG5),YLMSG5 MOVE MESSAGE TO BUFFER\n         LA    R0,L'YLMSG5+19      SET LENGTH\n        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\nYLSUPOK  L     R15,JCTIOT          GET FIRST IOT TRACK ADDR\nYLRDIOT  ST    R15,PCESEEK         SET SEEK ADDRESS FOR READ\n        $EXCP  (R3)                READ THE IOT\nYLWTIO2 $WAIT  IO                  WAIT FOR IO TO COMPLETE\n         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO\n         BZ    YLWTIO2             NOT COMPLETE GO WAIT AGAIN\n         BM    YLIOERR             GO PROCESS I/O ERROR\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        AT THIS POINT WE HAVE SUCCESSFULLY READ THE IOT.             *\n*        NOW ATTEMPT TO FIND THE JCL IMAGES PDDB.                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         DROP  R10                 DROP ADDRESSABILITY TO JCT\n         LR    R10,R4              SAVE ADDRESS OF IOT BUFFER\n         DROP  R4                  DROP ADDRESSABILITY TO BUFFER\n         USING IOT,R4              SET ADDRESSABILITY TO IOT\n         L     R10,IOTPDDB         LOAD OFFSET TO FIRST PDDB\n         LA    R10,0(R10,R4)       POINT TO FIRST PDDB IN THIS IOT\n         L     R15,IOTPDDBP        LOAD OFFSET PAST LAST PDDB\n         LA    R15,0(R15,R4)       POINT PAST LAST PDDB IN THIS IOT\nYLPDDBLP CR    R15,R10             LAST PDDB IN THIS IOT\n         BNH   YLNXTIOT            YES, GO GET NEXT IOT\n         CLC   PDBDSKEY-PDB(2,R10),=Y(PDBINJCL) JCL IMAGE DATA-SET\n         BE    YLRDJCL1            YES, GO PROCESS IT\n         LA    R10,PDBLENG(,R10)   NO, POINT TO NEXT PDDB IN IOT\n         B     YLPDDBLP            GO CHECK NEXT PDDB\nYLNXTIOT ICM   R15,B'1111',IOTIOTTR   YES, GET NEXT IOT TRACK ADDRESS\n         BNZ   YLRDIOT             GO READ NEXT IOT IF PRESENT\n         MVC   COMMAND+19(L'YLMSG6),YLMSG6 SET IN MSG TEXT\n        $CWTO  L=L'YLMSG6+19,MSGID=999 WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\n         DROP  R4                  DROP ADDRESSABILITY TO IOT\n         USING BFPDSECT,R4         SET ADDRESSABILITY TO THE BUFFER\nYLRDJCL1 L     R15,PDBMTTR-PDB(R10) POINT TO START OF JCL DATA-SET\nYLRDJCL2 ST    R15,PCESEEK         SET FOR READ\n        $EXCP  (R3)                READ THE DATA-SET\nYLWTIO3 $WAIT  IO                  WAIT FOR IO TO COMPLETE\n         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO\n         BZ    YLWTIO3             NOT COMPLETE GO WAIT AGAIN\n         BM    YLIOERR             GO PROCESS I/O ERROR\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        AT THIS POINT WE HAVE A BUFFER CONTAINING THE JCL            *\n*        STATEMENTS FOR THE JOB, SO SEARCH IN THE SETUP CARDS.        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         LA    R5,BUFSTART+10      POINT TO DATA\n         XR    R6,R6               CLEAR REGISTER FOR IC\nYLGCARD  IC    R6,0(,R5)           GET LENGTH\n         CLC   3(3,R5),=C'//*'     IS IT POTENTIAL JES2 JCL CARD\n         BNE   YLNXCARD            NO, IGNORE IT\n         CLC   6(6,R5),=C'SETUP '  YES, SEE IF SETUP CARD\n         BNE   YLNXCARD            NO, GO GET NEXT CARD\n         LR    R1,R6\n         SH    R1,=H'9'            TEST IF SETUP HAS VALID TEXT\n         BNP   YLNXCARD            NO, GO GET NEXT CARD\n         LA    R0,2(R1)\n         LH    R15,WRKLEN\n         SR    R15,R0              HAVE WE REACHED THE LIMIT\n         BNM   YLPRTXT             NO, GO HANDLE THE SETUP TEXT\n         STH   R15,WRKLEN          SAY WE HAVE REACHED THE LIMIT\n         B     YLPUTCDS            QUIT LOOKING\nYLMVTXT  MVC   1(*-*,R15),11(R5)   <<EXECUTED>>\nYLPRTXT  STH   R15,WRKLEN          SAVE REMAINING WORK AREA SPACE\n         L     R15,CURRTEXT        LOAD POINTER TO TEXT SAVE ENTRY\n         EX    R1,YLMVTXT          MOVE SETUP TEXT TO SAVE ENTRY\n         STC   R1,0(R15)           SET SETUP TEXT MOVE LENGTH\n         ALR   R15,R0              POINT TO NEXT SETUP TEXT ENTRY\n         ST    R15,CURRTEXT        AND SAVE ADDRESS\nYLNXCARD LA    R5,3(R5,R6)         POINT TO NEXT CARD IN THE BUFFER\n         CLI   0(R5),X'FF'         END OF THE BUFFER\n         BE    YLNXBUFF            YES, GO GET NEXT BUFFER\n         CLI   1(R5),X'FF'         TEST NEXT BYTE ALSO FOR END OF BUFF\n         BNE   YLGCARD             NO, PROCESS NEXT CARD\nYLNXBUFF ICM   R15,15,HDBNXTRK     NEXT BUFFER ADDRESS\n         BNZ   YLRDJCL2            END OF CHAIN IF ZERO\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        AT THIS POINT WE HAVE SAVED ALL SETUP MESSAGES FOR THE       *\n*        JOB AND ARE READY TO WRITE THEM TO THE OPERATOR.             *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nYLPUTCDS LA    R2,$YLWORK+$YLBLEN  POINT TO TEXT SECTION OF BUFFER\n         CL    R2,CURRTEXT         ANY SETUP FOUND\n         BNE   YLPUTJS             BRANCH IF YES\n         MVC   COMMAND+19(L'YLMSG7),YLMSG7 MOVE MESSAGE TO BUFFER\n         LA    R0,L'YLMSG7+19      SET LENGTH\n        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\nYLPUTJS  MVC   COMMAND+19(15),=C' --- SETUP(S) :'\n        $CWTO  L=34,MSGID=900      WRITE TITLE TO THE OPERATOR\n         MVI   COMMAND,C'-'\nYLPUTLP  XR    R1,R1\n         IC    R1,0(R2)            GET SETUP TEXT MOVE LENGTH\n         EX    R1,YLMVSMB          MOVE THE SETUP MSG TO BUFFER\n         LA    R0,2(R1)            SETUP MSG LENGTH\n         ALR   R2,R0               POINT TO THE NEXT SETUP TEXT\n        $CWTO  L=(R0),MSGID=900    WRITE THE TEXT TO THE OPERATOR\n         CL    R2,CURRTEXT         TEST END OF SETUP TEXT\n         BL    YLPUTLP             NO, LOOP\n         LH    R0,WRKLEN\n         LTR   R0,R0               HAVE WE REACHED THE LIMIT\n         BNM   YLEXIT              NO, GET OUT\n         MVC   COMMAND(L'YLMSGOV),YLMSGOV SET OVERFLOW MESSAGE\n         LA    R0,L'YLMSGOV        SET MESSAGE LENGTH\n        $CWTO  L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\nYLMVSMB  MVC   COMMAND+1(*-*),1(R2) <<EXECUTED>>\nYLIOERR $IOERROR (R4)              ISSUE IOERROR MESSAGE\n         MVC   COMMAND+19(L'YLMSG8),YLMSG8 MOVE ERROR MSG TO BUFFER\n         LA    R0,L'YLMSG8+19      SET LENGTH OF MESSAGE\n        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     YLEXIT              GET OUT\nYLBADOP  L     R1,0(,R5)           POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'YLMSG9),YLMSG9 SET ERROR MESSAGE\n         LA    R0,L'YLMSG9+9       SET MESSAGE LENGTH\n        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\nYLEXIT   L     R10,BUFADDR         LOAD BUFFER ADDRESS\n        $FREEBUF (R10)             FREE THE BUFFER\n        $FREEBUF (R8)              FREE THE WORK AREA\n         B     EXIT8               GET OUT\n         DROP  R4                  DROP ADDRESSABILITY TO BUFFER/IOT\n         DROP  R7                  DROP ADDRESSABILITY TO JQE\n         DROP  R8                  DROP ADDRESSABILITY TO WORK AREA\n         EJECT\nYLMSG1   DC    C'JOB NOT FOUND'\nYLMSG2   DC    C'NOT BATCH JOB'\nYLMSG3   DC    C' REQUIRED SPOOL VOLUMES NOT MOUNTED'\nYLMSG4   DC    C' JES2 GENERATED JOB, CANNOT BE DISPLAYED'\nYLMSG5   DC    C' NOT SETUP JOB'\nYLMSG6   DC    C' CANNOT LOCATE JCL IMAGES PDDB'\nYLMSG7   DC    C' NO SETUP INFORMATION AVAILABLE'\nYLMSG8   DC    C' I/O ERROR ON SPOOL, COMMAND ABORTED'\nYLMSG9   DC    C' INVALID OPERAND'\nYLMSGOV  DC    C' ... ETC ...'\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9                  KILL LOCAL ADDRESSABILITY\n*--------------------------------------------------------- $YL END ---*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        HASP COMMAND SERVICES -- CONSOLE CHECK ROUITNE.     @OY29019 *\n*        (FROM HASPCOMM AT LABEL 'CONSCHK') ---> (*3)        @OY29019 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------------------------------------------------------ (*3) START ---*\n************************************************************** @OY29019\n*                                                            * @OY29019\n*        CONSCHK - CHECK THAT THIS IS A DEFINED MCS CONSOLE  * @OY29019\n*                  RETURN CODES                              * @OY29019\n*                  0 - NO ERROR                              * @OY29019\n*                  4 - MIGRATION CONSOLE ID                  * @OY29019\n*                  8 - INVALID CONSOLE ID                    * @OY29019\n*                                                            * @OY29019\n************************************************************** @OY29019\n         SPACE 1                                               @OY29019\nCONSCHK $ENTRY BASE=R8             LOCAL ADDRESSABILITY        @OY29019\n        $SAVE  TRACE=NO            SAVE REGISTERS              @OY29019\n         LR    R8,R15              LOAD BASE ADDRESS           @OY29019\n         XR    R15,R15             ASSUME CONSOLE OK           @OY29019\n         LTR   R1,R1               IS THE CONSOLE = 0...       @OY29019\n         BZ    CONSRET             YES, RETURN WITH NO ERROR   @OY29019\n         CL    R1,=A(CWAMAXC)      IS THE CONSOLE # > MAX ...  @OY29019\n         BH    CONSHIGH            YES, RETURN WITH ERROR      @OY29019\n         LR    R10,R1              KEEP THE CONSOLE ID         @OY29019\n         L     R2,CVTPTR           POINT TO CVT                @OY29019\n         L     R2,CVTCUCB-CVT(,R2) THEN TO UCM                 @OY29019\n         LM    R5,R7,UCMVEA-UCM(R2) GET 1ST, LEN, LAST UCME    @OY29019\n         LR    R1,R7               COPY LAST UCME              @OY29019\n         ALR   R1,R6               POINT TO END OF UCMES       @OY29019\n         XR    R0,R0               CLEAR FOR DIVIDE            @OY29019\n         SLR   R1,R5               GET LEN OF ALL UCMES        @OY29019\n         DR    R0,R6               GET NUMBER OF MCS CONSOLES  @OY29019\n         CLR   R10,R1              A UCME FOR THIS CONSOLE...  @OY29019\n         BH    CONSBAD             NO, RETURN WITH ERROR       @OY29019\n         LR    R1,R10              RESTORE CONSOLE #           @OY29019\n         SL    R1,=F'1'            SUBTRACT ONE FROM CONSOLE # @OY29019\n         MR    R0,R6               GET INDEX INTO UCMES        @OY29019\n         ALR   R1,R5               AND POINT TO CORRECT UCME   @OY29019\n         ICM   R5,B'1111',UCMID-UCMLIST(R1) UCME DEFINED ?     @OY29019\n         BNZ   CONSRET             YES, EXIT WITH NO ERROR     @OY29019\nCONSBAD  LR    R15,8               SET RC FOR INVALID CONS     @OY29019\n         B     CONSRET             AND RETURN TO CALLER        @OY29019\nCONSHIGH LR    R15,4               SET RC FOR CONS MIG ID      @OY29019\nCONSRET $RETURN RC=(R15)           RETURN TO CALLER            @OY29019\n         SPACE 1                                               @OY29019\n         LTORG ,                                               @OY29019\n         SPACE 1                                               @OY29019\n         DROP  R8                  DROP LOCAL ADDRESSABILITY   @OY29019\n*-------------------------------------------------------- (*3) END ---*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        WORK-AREAS.                                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n$YLWORK  DSECT\n         DS    CL(BUFSTART-BFPDSECT) -------- RESERVED BY JES2 --------\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nBUFADDR  DS    F                   ADDRESS OF A JES2 BUFFER\nCURRTEXT DS    F                   ADDRESS OF CURRENT SETUP TEXT\nJOBNUM   DS    H                   LOW RANGE JOB REQUESTED\nWRKLEN   DS    H                   LENGTH OF SETUP TEXT AREA\n$YLBLEN  EQU   *-$YLWORK           LENGTH OF BASIC WORK AREA\n         SPACE 2\nJ2XIT005 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         SPACE 1\n        $MODEND\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT006": {"ttr": 15107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11?\\x00\\x90\\x11?\\x10Q\\x02\\xd4\\x02\\xd4\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-23T00:00:00", "modifydate": "1990-04-23T10:51:00", "lines": 724, "newlines": 724, "modlines": 0, "user": "SYSPAJA"}, "text": "X006     TITLE 'JES2 - EXIT 006 - INTERNAL TEXT SCAN'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* MODULE NAME : EXIT006                                               *\n* DESCRIPTIVE NAME : JES2 EXIT 6 (HOSCNVT SUBTASK OF HASPCNVT)        *\n*                    INTERNAL TEXT SCAN                               *\n* PURPOSE :     THIS JES2 EXIT ALLOWS YOU TO INTERPRET AN INTERNAL    *\n*               TEXT IMAGE AND DECIDE WHETHER JES2 SHOULD EITHER      *\n*               CANCEL THE JOB OR LET IT TO CONTINUE WITH NORMAL      *\n*               EXECUTION. THIS ROUTINE CAN ALSO MODIFY ANY INTERNAL  *\n*               TEXT IMAGE. IN ADDITION, AFTER ALL OF THE JCL FOR A   *\n*               PARTICULAR JOB HAS BEEN CONVERTED TO INTERNAL TEXT,   *\n*               THIS EXIT AGAIN ALLOWS TO DIRECT JES2 EITHER TO       *\n*               CANCEL THE JOB OR TO CONTINUE WITH NORMAL EXECUTION.  *\n* INVOCATION POINT : UEXIT006                                         *\n* ENVIRONMENT : JES2 SUBTASK                                          *\n* REGISTERS AT ENTRY :                                                *\n*               R0 : A CODE INDICATING THE STATUS OF CONVERSION       *\n*                    PROCESSING                                       *\n*                    0 = A JCL STATEMENT HAS BEEN CONVERTED TO AN     *\n*                        INTERNAL TEXT IMAGE                          *\n*                    4 = ALL OF THE JCL FOR A PARTICULAR JOB HAS BEEN *\n*                        CONVERTED TO INTERNAL TEXT                   *\n*               R1 : ADDRESS OF A 4-WORD PARAMETER LIST               *\n*                    WORD 1 (+0) = ADDRESS OF A 16-BYTE WORK AREA     *\n*                           AVAILABLE TO THE INSTALLATION.            *\n*                    WORD 2 (+4) = IF THE CODE PASSED IN R0 IS 0,     *\n*                           THIS WORD POINTS TO THE ADDRESS OF THE    *\n*                           LAST SINGLE INTERNAL TEXT IMAGE CONVERTED *\n*                           FROM A JCL STATEMENT. IF THE CODE PASSED  *\n*                           IN R0 IS 4, THIS WORD CONTAINS THE        *\n*                           ADDRESS OF THE CONVERTER'S RETURN CODE.   *\n*                    WORD 3 (+8) = ADDRESS OF THE DTE.                *\n*                    WORD 4 (+12) = ADDRESS OF THE JCT.               *\n*               R2-R10 : N/A                                          *\n*               R11 : ADDRESS OF THE HCT                              *\n*               R12 : N/A                                             *\n*               R13 : ADDRESS OF AN 18-WORD OS-STYLE SAVE AREA        *\n*               R14 : RETURN ADDRESS                                  *\n*               R15 : ENTRY ADDRESS                                   *\n* REGISTERS ON RETURN :                                               *\n*               R0-R14 : AS AT ENTRY                                  *\n*               R15 : A RETURN CODE :                                 *\n*                     =0, CONTINUE USING ANY ADDITIONAL EXITS         *\n*                     =4, CONTINUE WITHOUT USING ANY ADDITIONAL EXITS *\n*                     =8, BYPASS EXECUTION AND CANCEL THE JOB, IT IS  *\n*                         QUEUED FOR OUTPUT RATHER THAN FOR EXECUTION *\n* LINKAGE EDITOR INFO :                                               *\n*               ATTRIBUTES : REENTRANT, REUSEABLE, REFRESHABLE        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* AUTHOR :      JOHN V. HOOPER                                        *\n*               FIRST UNION NATIONAL BANK                             *\n*               301 SOUTH TRYON STREET                                *\n*               CHARLOTTE, N.C. 28288                                 *\n*               (704) 374-2427                                        *\n*               ORIGIN : J006STDS FROM CBT TAPE 89 FEB, FILE 381.     *\n* CHANGES :     ADAPTED TO JES2 2.2.0 BY MOINIL P.A.                  *\n*               OUR NEEDS IMPLEMENTATION BASED ON ORIGINAL CODING.    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* JES2PARM INITIALIZATION STATEMENTS :                                *\n*               LOAD=J2XIT006                                         *\n*               EXIT006 ROUTINE=UEXIT006,DISABLE,TRACE=YES            *\n*                                        ENABLE        NO             *\n*                                                                     *\n* JES2 OPERATOR CONTROL COMMANDS :                                    *\n*               $T EXIT006,DISABLE,TRACE=YES                          *\n*                          ENABLE        NO                           *\n*               $D EXIT006                                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* NOTE :        THE ESTAE ROUTINE, WHEN ENTERED FOR AN ABEND, WILL    *\n*               RECOVER TO PROTECT THE CONVERSION SUBTASK FROM ABEND  *\n*               AND CONSEQUENT LOSS OF THE JOB.                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n         COPY  $HASPGBL\n         SPACE 1\nJ2XIT006 $MODULE ENVIRON=SUBTASK,TITLE='JES2 - EXIT 006',              X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CNVWORK,           GENERATE HASP CNVWORK DSECT         X\n               $DTE,               GENERATE HASP DTE DSECT             X\n               $DTECNV,            GENERATE HASP CNV DTE EXTEN         X\n               $ERA,               GENERATE HASP ERA DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $TQE,               GENERATE HASP TQE DSECT             X\n               $XECB,              GENERATE HASP EXT ECB DSECT         X\n               DEB,                GENERATE MVS DEB DSECT              X\n               KEYS,               GENERATE MVS TEXT KEYS EQUATES      X\n               NEL,                GENERATE MVS NEL DSECT              X\n               RPL,                GENERATE MVS RPL DSECT              X\n               SDWA,               GENERATE MVS SDWA DSECT             X\n               TEXT,               GENERATE MVS TEXT DSECT             X\n               WPL                 GENERATE MVS WPL DSECT\n         TITLE 'JES2 - EXIT 006 - INTERNAL TEXT SCAN'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        EXIT MAIN ENTRY POINT.                                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nUEXIT006 $ENTRY BASE=R12\n        SAVE   (14,12)             SAVE CALLERS REGISTERS\n         LR    R12,R15             ESTABLISH BASE REGISTER\n        $AMODE 31                  ENTER 31-BIT MODE\n         LR    R8,R1               SAVE INPUT PARM LIST ADDRESS\n         L     R10,12(R8)          LOAD JCT ADDRESS\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         LR    R7,R0               SAVE REG 0\n         TM    JCTJBOPT,JCTXBACH   IS THIS AN XBATCH JOB\n         BO    QUICKOUT            YES, GET OUT IMMEDIATELY\n         L     R9,4(R8)            LOAD ADDRESS OF INTERNAL TEXT RECORD\n         USING TEXT,R9             SET ADDRESSABILITY TO TEXT RECORD\n         L     R15,0(R8)           LOAD ADDRESS OF EXIT WORK AREA\n         ICM   R1,B'1111',0(R15)   LOAD GETMAINED AREA ADDRESS (IF ONE)\n         BZ    GETMWA              ZERO, GO DO REQUIRED GETMAIN\n         ST    R13,4(R1)           SAVE OLD SAVE ADDR IN NEW\n         ST    R1,8(R13)           SAVE NEW SAVE ADDR IN OLD\n         LR    R13,R1              SAVE NEW SAVE AND WORK AREA ADDRESS\n         USING WORKAREA,R13        SET ADDRESSABILITY\n         B     ENDGETM             BYPASS GETMAIN\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GET STORAGE FOR WORK AREAS ON FIRST ENTRY TO EXIT FOR        *\n*        THE JOB.                                                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nGETMWA   LH    R0,GETMWAL          LOAD GETMAIN SIZE\n        GETMAIN R,LV=(0)           GET CORE FOR DYNAMIC SAVE AREA\n         LR    R3,R1               SAVE GETMAINED ADDRESS\n         LR    R0,R1               CLEAR\n         LH    R1,GETMWAL            ENTIRE\n         XR    R15,R15                 GETMAINED\n         MVCL  R0,R14                    TO ZEROS\n         ST    R13,4(R3)           SAVE OLD SAVE ADDR IN NEW\n         ST    R3,8(R13)           SAVE NEW SAVE ADDR IN OLD\n         LR    R13,R3              SAVE NEW SAVE AND WORK AREA ADDRESS\n         L     R15,0(R8)           LOAD ADDRESS OF EXIT WORK AREA\n         ST    R13,0(R15)          SAVE GETMAINED ADDRESS IN EXIT WA\n         LA    R15,MSGRPL          LOAD OUTPUT RPL ADDRESS\n         ST    R15,OUTRPL          SAVE OUTPUT RPL ADDRESS\nENDGETM  ST    R10,JCTADDR         SAVE JCT ADDRESS\n         ST    R8,WORKADDR         SAVE EXIT PARM LIST ADDRESS\n         ST    R9,TEXTSTAR         SAVE TEXT STARTING ADDRESS\n         L     R8,8(R8)            LOAD DTE ADDRESS\n         ST    R8,DTEADDR          SAVE DTE ADDRESS\n         USING DTE,R8              SET ADDRESSABILITY TO DTE\n         LA    R1,DCNVMSG          LOAD OUTPUT ACB ADDRESS\n         ST    R1,OUTACB           SAVE OUTPUT ACB ADDRESS\n         DROP  R8                  DROP ADDRESSABILITY TO DTE\n         L     R1,JCTJQE           LOAD JQE OFFSET\n         N     R1,$ZEROFFF         CLEAR HIGH ORDER BYTE\n         AL    R1,$JOBQPTR         GET ACTUAL JQE ADDRESS\n         ST    R1,JQEADDR          SAVE JQE ADDRESS\n         MVC   JBNAME,JCTJNAME     SAVE JOB NAME\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        ESTABLISH ESTAE ENVIRONMENT.                                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         MVC   ESTAEL(LESTAEL),ESTAEX INITIALIZE ESTAE LIST FORM\n         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS\n         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n        ESTAE  STAEXIT,CT,PARAM=(13),XCTL=NO,PURGE=NONE,ASYNCH=NO,     X\n               RECORD=YES,TERM=NO,MF=(E,(1))\n         LTR   R0,R7               INDIVIDUAL ENTRY FOR INTERNAL TEXT\n         BNZ   EOF                 NO, GET OUT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SOME TYPES OF ERRORS DETECTED BY THE CONVERTER TURN ON       *\n*        BITS IN THE JCTCNVRC FIELD WHICH WILL FAIL THE JOB WHEN      *\n*        THE CONVERTER COMPLETES. THESE BITS WILL BE TESTED, AND      *\n*        IF THE JOB IS TO BE FAILED, A QUICK PATH THROUGH THE         *\n*        EXIT WILL BE MADE.                                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nCHECKJCT TM    MSGIND,SEVERE       SEE IF SEVERE ERROR HAS OCCURRED\n         BO    GETNEXT             YES, IGNORE THIS ENTRY\n         LA    R15,JCTCJCL         SET JCL ERROR IN CONVERTER RTN CODE\n         C     R15,JCTCNVRC        TEST CONVERTER RETURN CODE\n         BE    BADERROR            BAD, GO PROCESS SEVERE ERROR\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SELECT STATEMENT PROCESS.                                    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         TM    STRINDCS,JOBSTR     JOB STATEMENT?\n         BO    JOBSTMT             YES, BRANCH\n         TM    STRINDCS,EXECSTR    EXEC STATEMENT?\n         BO    EXECSTMT            YES, BRANCH\n         TM    STRINDCS,DDSTR      DD STATEMENT?\n         BO    GETNEXT             YES, BRANCH\n         TM    STRINDCS,PROCSTR    PROC STATEMENT?\n         BO    GETNEXT             YES, BRANCH\n         TM    STRINDCS,JDVBSTR    JDT OUTPUT STATEMENT?\n         BO    GETNEXT             YES, BRANCH\n         L     R15,=A(MSGINV)      SET ERROR MSG ADDRESS\n         BAL   R14,ERMRTN          GO ISSUE ERROR MSG\n         B     GETNEXT             GO GET ANOTHER STATEMENT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                      J O B    S T A T E M E N T                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE :    SET THE NEW EXECUTION CLASS AND THE NEW PERFORMANCE    *\n*              GROUP, DELETE AN EVENTUAL PRTY= IF SPECIFIED AND ADD   *\n*              A TIME=DEFAULT IF NOT SPECIFIED.                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nJOBSTMT  TM    JCTJOBFL,JCTBATCH   TEST FOR BATCH JOB\n         BZ    GETNEXT             NO, GO GET ANOTHER STATEMENT\n         ICM   R15,B'1000',=AL1(CLASSJK) GET 'CLASS=' KEY\n         LA    R6,STRJKEY          POINT TO FIRST KEYWORD SEQUENCE\n         BAL   R5,XINTKEY          TRY TO LOCATE KEYWORD\n         BZ    JOBPERF             IF MISSING, OK\n         MVC   3(1,R6),JCTJCLAS    PUT CLASS IN INTERNAL TEXT\nJOBPERF  CLI   JCTUSER0,0          IF SPECIAL PROGRAM\n         BE    JOBPRTY             DO NOT CHECK PERFORM\n         ICM   R15,B'1000',=AL1(PRFMJK) GET 'PERFORM=' KEY\n         LA    R6,STRJKEY          POINT TO FIRST KEYWORD SEQUENCE\n         BAL   R5,XINTKEY          TRY TO LOCATE KEYWORD\n         BZ    JOBPRFO             BRANCH IF MISSING\n         XR    R2,R2\n         IC    R2,JCTUSER0         GET PERFORM VALUE (IEFUJV)\n         CVD   R2,DOUBLE\n         UNPK  3(3,R6),DOUBLE+6(2) SET EBCDIC PERFORM VALUE\n         OI    5(R6),C'0'\n         B     JOBPRTY             GO BACK TO MAIN LINE\nJOBPRFO  MVC   0(L'XPRFMTXT,R6),XPRFMTXT MOVE 'PERFORM=' TEXT TO\n         MVI   0(R6),PRFMJK        'PERFORM=' KEY FOR A JOB\n         XR    R2,R2\n         IC    R2,JCTUSER0         GET PERFORM VALUE (IEFUJV)\n         CVD   R2,DOUBLE\n         UNPK  3(3,R6),DOUBLE+6(2) SET EBCDIC PERFORM VALUE\n         OI    5(R6),C'0'\n         LH    R5,STRLTH           GET LENGTH OF JOB TEXT STRING\n         LA    R5,L'XPRFMTXT-1(,R5) AND ADD LENGTH OF NEW TEXT\n         STH   R5,STRLTH           STORE UPDATED STRING LENGTH\nJOBPRTY  ICM   R15,B'1000',=AL1(PRTYJK) GET 'PRTY=' KEY\n         LA    R6,STRJKEY          POINT TO FIRST KEYWORD SEQUENCE\n         BAL   R5,XINTKEY          TRY TO LOCATE KEYWORD\n         BZ    JOBTIME             IF MISSING, OK\n         BAL   R5,XDELET           DELETE KEY\nJOBTIME  ICM   R15,B'1000',=AL1(TIMEJK) GET 'TIME=' KEY\n         LA    R6,STRJKEY          POINT TO FIRST KEYWORD SEQUENCE\n         BAL   R5,XINTKEY          TRY TO LOCATE KEYWORD\n         BNZ   GETNEXT             SKIP IF SUCCESSFUL\n         MVC   0(L'XPRFMTXT,R6),XPRFMTXT MOVE 'PERFORM=' TEXT TO\n         MVI   0(R6),TIMEJK        'TIME=' KEY FOR A JOB\n         L     R3,JCTETIME         GET ESTIMATED TIME (DEFAULT)\n         XR    R2,R2\n         D     R2,=F'60'           COMPUTE MINUTES\n         CVD   R3,DOUBLE\n         UNPK  3(3,R6),DOUBLE+6(2) MOVE EBCDIC TIME\n         OI    5(R6),C'0'\n         LH    R5,STRLTH           GET LENGTH OF TIME TEXT STRING\n         LA    R5,L'XPRFMTXT-1(,R5) AND ADD LENGTH OF NEW TEXT\n         STH   R5,STRLTH           STORE UPDATED STRING LENGTH\n         B     GETNEXT             GO GET ANOTHER STATEMENT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                     E X E C    S T A T E M E N T                    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE :    DELETE ANY EVENTUAL PERFORM=, DPRTY= AND ACCT=, THEN   *\n*              ADD THE NEW PERFORMANCE GROUP.                         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nEXECSTMT TM    JCTJOBFL,JCTSTCJB   TEST FOR STARTED RASK\n         BZ    *+L'*+8             BRANCH IF NOT\n         TM    STREINDC,ETXPRCV    TEST FOR 'EXEC PROC='\n         BO    GETNEXT             YES, GO GET ANOTHER STATEMENT\n         TM    JCTJOBFL,JCTBATCH   ONLY FOR BATCH\n         BZ    EXPERFM             BRANCH IF NOT BATCH\n         ICM   R15,B'1000',=AL1(PRFMEEK) GET PERFORM= KEY\n         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY\n         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY\n         BZ    EXPERFP             IF KEY NOT SPECIFIED\n         BAL   R5,XDELET           DELETE KEY\nEXPERFP  ICM   R15,B'1000',=AL1(PRFMPEK) GET PERFORM. KEY\n         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY\n         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY\n         BZ    EXDPRTY             IF KEY NOT SPECIFIED\n         BAL   R5,XDELET           DELETE KEY\nEXDPRTY  ICM   R15,B'1000',=AL1(SDPPEK) GET DPRTY= KEY\n         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY\n         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY\n         BZ    EXDPRTP             IF KEY NOT SPECIFIED\n         BAL   R5,XDELET           DELETE KEY\nEXDPRTP  ICM   R15,B'1000',=AL1(SDPEEK) GET DPRTY. KEY\n         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY\n         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY\n         BZ    EXACCT              IF KEY NOT SPECIFIED\n         BAL   R5,XDELET           DELETE KEY\nEXACCT   ICM   R15,B'1000',=AL1(ACCTEEK) GET ACCT= KEY\n         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY\n         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY\n         BZ    EXACCP              IF KEY NOT SPECIFIED\n         BAL   R5,XDELET           DELETE KEY\nEXACCP   ICM   R15,B'1000',=AL1(ACCTPEK) GET ACCT. KEY\n         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY\n         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY\n         BZ    EXPERFM             IF KEY NOT SPECIFIED\n         BAL   R5,XDELET           DELETE KEY\nEXPERFM  TM    STREINDC,ETXPRCV    TEST FOR 'EXEC PROC='\n         BO    GETNEXT             YES, GO GET ANOTHER STATEMENT\n         IC    R4,JCTJCLAS         GET JOB CLASS FROM JCT\n         N     R4,=A(X'3F')        DERIVE RELATIVE CAT ENTRY\n         MH    R4,=Y(CATLEN)       MULTIPLY BY CAT ENTRY LENGTH\n         AL    R4,$CATABLE         GET CAT ENTRY ADDRESS\n         USING CAT,R4              PROVIDE CAT ADDRESSABILITY\n         CLC   CATPERFM,=C'000'    MUST WE SCAN FOR 'PERFORM='...\n         BE    GETNEXT             NO, GO GET ANOTHER STATEMENT\n         ICM   R15,B'1000',XPRFMKEY GET 'PERFORM=' KEY\n         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY\n         BAL   R5,XINTKEY            AND TRY TO LOCATE DESIRED KEY\n         BNZ   GETNEXT             BRANCH IF KEYWORD ALREADY SPECIFIED\n         MVC   0(L'XPRFMTXT,R6),XPRFMTXT MOVE 'PERFORM=' TEXT TO\n         MVC   3(L'CATPERFM,R6),CATPERFM END OF TEXT STRING\n         DROP  R4                  DROP ADDRESSABILITY TO CAT\n         CLI   JCTUSER0,0          IF SPECIAL PROGRAM\n         BE    EXSETL              SKIP NEXT SETTING\n         XR    R2,R2\n         IC    R2,JCTUSER0         GET PERFORM VALUE (IEFUJV)\n         CVD   R2,DOUBLE\n         UNPK  3(3,R6),DOUBLE+6(2) SET EBCDIC PERFORM VALUE\n         OI    5(R6),C'0'\nEXSETL   LH    R5,STRLTH           GET LENGTH OF EXEC TEXT STRING\n         LA    R5,L'XPRFMTXT-1(,R5) AND ADD LENGTH OF NEW TEXT\n         STH   R5,STRLTH           STORE UPDATED STRING LENGTH\n         B     GETNEXT             GO GET ANOTHER STATEMENT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*      L O C A T E   K E Y   W I T H I N   T E X T   S T R I N G      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* ON INPUT :   R6 POINTS TO 1ST KEYWORD SEQUENCE IN TEXT              *\n*              HI-ORDER BYTE OF R15 CONTAINS KEY                      *\n*              R5 = LINK REGISTER                                     *\n* ADDRESS OF KEYWORD SEQUENCE (IF FOUND) RETURNED IN R6               *\n*              NON-ZERO RETURN CODE : R6 POINTS TO KEYWORD SEQUENCE   *\n*              ZERO RETURN CODE : R6 POINTS TO END-OF-TEXT BYTE       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nXINTKEY  XR    R2,R2               CLEAR R2 FOR WORK\n         LR    R3,R2               CLEAR R3 FOR WORK\nXINTNEXT ICM   R2,B'0001',1(R6)    SET R2 TO NUMBER OF PARMS\n         LA    R6,2(,R6)           GET ADDRESS OF FIRST PARM (IF ANY)\n         BZ    XGOTKEY             BRANCH IF NONE\nXFINDBYT ICM   R3,B'0001',0(R6)    SET R3 TO PARM LENGTH\n         BM    XFINDSUB            BRANCH IF SUBPARM COUNT\n         LA    R6,0(R6,R3)           ELSE GET ADDRESS OF NEXT PARM\nXFINDLUP LA    R6,1(,R6)           SKIP OVER LENGTH BYTE\n         BCT   R2,XFINDBYT         BRANCH IF MORE PARMS TO SKIP\nXGOTKEY  CLI   0(R6),ENDK          TEST KEY TYPE\n         BER   R5                  RETURN IF END OF TEXT STRING\n         CLM   R15,B'1000',0(R6)     ELSE TEST FOR DESIRED KEY\n         BNE   XINTNEXT            BRANCH IF NO\n         SLR   R2,R2                 ELSE SET NON-ZERO RETURN CODE\n         BR    R5                    AND RETURN\nXFINDSUB SL    R3,=A(X'80')        CLEAR HI-ORDER BIT OF SUBPARM COUNT\n         ALR   R2,R3               ADD SUBPARM COUNT TO PARM COUNT\n         B     XFINDLUP              AND RESUME PARM FIELD SCAN\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*      D E L E T E   K E Y   W I T H I N   T E X T   S T R I N G      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* ON INPUT :   R6 POINTS TO KEYWORD SEQUENCE IN TEXT (SEE NON-ZERO    *\n*              RETURN CODE OF \"XINTKEY\")                              *\n*              R5 = LINK REGISTER                                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nXDELET   LR    R2,R6               'TO' OPERAND\n         LR    R6,R5               SAVE RETURN REGISTER\n         XR    R5,R5               CLEAR WORK REGISTER\n         XR    R3,R3               CLEAR WORK REGISTER\n         IC    R3,1(R2)            COUNT OF SUBPARM\n         LA    R4,2(R2)            'FROM' OPERAND INITIAL\nXDLEOP   LTR   R3,R3               ANY SUBPARM\n         BZ    XDLDOIT             IF NO SUBPARM LEFT\n         IC    R5,0(R4)            NEXT PARM LENGTH\n         LA    R4,1(R4,R5)         TO NEXT SUBPARM\n         BCT   R3,XDLEOP           SCAN NEXT SUBPARM\nXDLDOIT  LR    R3,R4               IN R3 'FROM' LOCATION\n         SR    R3,R2               - 'TO', IN R3 KEY LENGTH\n         LH    R5,STRLTH           ORIGINAL STRING LENGTH\n         SR    R5,R3               - KEYWORD LENGTH\n         STH   R5,STRLTH           STORE MODIFIED LENGTH\n         LA    R3,STRLTH           STRING START ADDRESS\n         LCR   R3,R3               NEGATIVE START ADDRESS\n         AR    R3,R2               'TO' DISPLACEMENT\n         SR    R5,R3               = MVCL LENGTH\n         LR    R3,R5               = MVCL LENGTH\n         MVCL  R2,R4               SHIFT LEFT INTERNAL TEXT\n         BR    R6                  GO BACK TO CALLER\n         SPACE 1\n         DROP  R9                  DROP ADDRESSABILITY TO TEXT RECORD\n         DROP  R10                 DROP ADDRESSABILITY TO JCT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        RETURN TO JES2 REQUESTING THE NEXT INTERNAL TEXT STATEMENT.  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nGETNEXT  L     R1,STMTNO           LOAD CARD NUMBER FIELD\n         LA    R1,1(,R1)           ADD 1 TO CARD NUMBER\n         ST    R1,STMTNO           STORE NEW CARD NUMBER\n         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n        ESTAE  0,MF=(E,(1))        CANCEL ESTAE ENVIRONMENT\n         L     R13,4(,R13)         RESTORE ORIGINAL REG 13\nQUICKOUT XR    R10,R10             SET RETURN CODE TO ZERO\n         B     LEAVE               EXIT TO JES2\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        ALL OF THE JCL FOR THE JOB HAS BEEN CONVERTED TO             *\n*        INTERNAL TEXT.                                               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nEOF      XR    R10,R10             SET RETURN CODE TO ZERO\n         TM    JOBIND,JOBFAIL      WAS JOB FAILED BY EXIT?\n         BO    JOBERROR            YES, BRANCH\n         TM    MSGIND,WARNING      WAS JOB WARNED BY EXIT?\n         BZ    ENDOFIT             NO, BRANCH\n         L     R1,=A(WTO1)\n         MVC   WTOLIST(LWTO1),0(R1) SET WTO LIST FORM\n         B     SNDWTO              GO DO WTO\nJOBERROR LA    R10,8               SET JOB FAIL RETURN CODE\n         TM    MSGIND,SEVERE       WAS JOB SEVERE BY EXIT?\n         BO    JBFSERR             NO, BRANCH\n         L     R1,=A(WTO2)\n         MVC   WTOLIST(LWTO2),0(R1) SET WTO LIST FORM\n         B     SNDWTO              GO DO WTO\nJBFSERR  L     R1,=A(WTO3)\n         MVC   WTOLIST(LWTO3),0(R1) SET WTO LIST FORM\nSNDWTO   MVC   WTOLIST+13+4(8),JBNAME MOVE JOBNAME TO MESSAGE\n        $$WTO  WTOLIST             WRITE ERROR MESSAGE\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                           C L E A N    U P                          *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nENDOFIT  LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n        ESTAE  0,MF=(E,(1))        CANCEL ESTAE ENVIRONMENT\n         L     R1,WORKADDR         LOAD ADDRESS OF EXIT PARM LIST\n         L     R1,0(R1)            LOAD ADDRESS OF EXIT WORK AREA\n         XC    0(16,R1),0(R1)      CLEAR EXIT WORK AREA\n         LH    R0,GETMWAL          LOAD FREEMAIN SIZE\n         LR    R1,R13              SAVE WORKAREA ADDRESS\n         L     R13,4(,R13)         RESTORE ORIG REG 13\n        FREEMAIN R,LV=(0),A=(1)\nLEAVE   $AMODE 24                  BACK TO 24-BIT MODE\n         LR    R15,R10             SET RETURN CODE\n        RETURN (14,12),RC=(15)     GO BACK TO JES2\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*              M E S S A G E    R O U T I N E    (ERMRTN)             *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        THIS ROUTINE WILL WRITE A MESSAGE WHICH IS POINTED TO        *\n*        BY REGISTER 15 (AS DESCRIBED BELOW) TO THE JES2 MESSAGE      *\n*        DATA-SET AND USE THE \"STMTNO\" FOR THE STATEMENT NUMBER       *\n*        IN THE MESSAGE PREFIX.                                       *\n*                         DC    AL1(L'MESSAGE-1)                      *\n*        R15 --- MESSAGE  DC    C'...MESSAGE TEXT...'                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         USING IFGRPL,R6           SET ADDRESSABILITY\nERMRTN   STM   R14,R12,SAVEREGS    SAVE REGISTERS\n         L     R6,OUTRPL           GET BASE FOR RPL\n         LR    R2,R15              SAVE MESSAGE ADDRESS\n         L     R3,STMTNO           LOAD CARD NUMBER\n         CVD   R3,DOUBLE           CONVERT CARD NUMBER TO PACKED\n         MVI   BUFFER,C' '         CLEAR BUFFER\n         MVC   BUFFER+1(L'BUFFER),BUFFER\n         L     R4,MSGCOUNT         LOAD MESSAGE COUNTER\n         LTR   R4,R4               SEE IF FIRST MESSAGE\n         BNZ   ERMRTN1             NO, DO NOT PUT HEADERS\n         L     R15,=A(HEADER1)\n         MVC   BUFFER(L'HEADER1),0(R15) MOVE HEADER LINE1 TO BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         B     ERMRTNX             +0 - GET OUT\n         MVI   BUFFER,C' '         +4 - CLEAR BUFFER\n         MVC   BUFFER+1(L'BUFFER),BUFFER\n         L     R15,=A(HEADER2)\n         MVC   BUFFER(L'HEADER2),0(R15) MOVE HEADER LINE2 TO BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         B     ERMRTNX             +0 - GET OUT\n         MVI   BUFFER,C' '         +4 - CLEAR BUFFER\n         MVC   BUFFER+1(L'BUFFER),BUFFER\nERMRTN1  LA    R4,1(,R4)           ADD 1 TO MESSAGE COUNT\n         ST    R4,MSGCOUNT         SAVE MESSAGE COUNTER\n         MVC   MSGPREF,PREFIX      MOVE MSG PREFIX TO BUFFER\n         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX\n         BCTR  R2,0\n         XR    R1,R1\n         IC    R1,0(R2)\n         EX    R1,ERMRTNM          MOVE PROPER MSG TO BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         B     ERMRTNX             +0 - GET OUT\n         CLI   MSGTLVL,C'E'        +4 - IS THIS AN ERROR MESSAGE\n         BNE   ERMRTN2             BRANCH IF NOT\n         OI    JOBIND,JOBFAIL      YES, TURN ON JOB FAILED IND\n         B     ERMRTN3             GET OUT\nERMRTN2  CLI   MSGTLVL,C'W'        IS THIS A WARNING MSG\n         BNE   ERMRTN3             NO, JUST GET OUT\n         OI    MSGIND,WARNING      TURN ON JOB WARNED IND\nERMRTN3  MVI   BUFFER,C' '         +4 - CLEAR BUFFER\n         MVC   BUFFER+1(L'BUFFER),BUFFER\n         LM    R14,R12,SAVEREGS    RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\nERMRTNX  LM    R14,R12,SAVEREGS    RESTORE REGISTERS\n         B     JOBERROR            GET OUT\nERMRTNM  MVC   MSGTEXT,1(R2)       <<EXECUTED>>\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        WRITE MESSAGE TO JES2 MESSAGE DATA-SET.                      *\n*        LOCAL ROUTINE : R5 = LINK REGISTER.                          *\n*                        RETURN = +0 - PUT ERROR.                     *\n*                                 +4 - OK, PUT DONE.                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nPUTMSG   MVI   RPLREQ,RPLPUT       OPERATION TO BE A PUT\n         L     R0,OUTACB           LOAD OUTPUT ACB ADDRESS\n         ST    R0,RPLDACB          SET IN ACB POINTER IN RPL\n         LA    R0,BUFFER           LOAD ADDR OF BUFFER\n         ST    R0,RPLAREA          POINT TO BUFFER\n         XC    RPLARG(4),RPLARG    ZERO FIELD\n         MVI   RPLOPT1,RPLSEQ      OPERATION TO BE SEQUENTIAL\n         MVI   RPLOPT2,0           ZERO FIELD\n         LA    R0,100              LOAD MESSAGE LENGTH\n         ST    R0,RPLRLEN          STORE MESSAGE LENGTH\n         XC    RPLBUFL(4),RPLBUFL  ZERO FIELD\n         XC    RPLDDDD(4),RPLDDDD  ZERO FIELD\n         ST    R13,PUTSAVE+72      SAVE SAVE AREA POINTER\n         LA    R13,PUTSAVE         SAVE AREA FOR ACCESS METHOD\n         LA    R1,IFGRPL           LOAD ADDR OF RPL\n        PUT    RPL=(1)             WRITE TO MESSAGE DATA SET\n         L     R13,72(R13)         RESTORE SAVE AREA POINTER\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    4(R5)               RETURN TO CALLER\n         L     R1,=A(WTO4)\n         MVC   WTOLIST(LWTO4),0(R1) SET WTO LIST FORM\n         MVC   WTOLIST+13+4(8),JBNAME MOVE JOBNAME TO MESSAGE\n        $$WTO  WTOLIST             WRITE ERROR MESSAGE\n         BR    R5                  RETURN TO CALLER\n         DROP  R6\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                            S T A E X I T                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN       *\n*        THE EXIT. THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE     *\n*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM          *\n*        RESOLUTION. RETRY WILL BE ATTEMPTED FOR ALL ABENDS           *\n*        WHICH WILL SET A FAST PATH THROUGH THE EXIT AND              *\n*        TERMINATE THE JOB. NOTE THAT THERE IS A RECURSION            *\n*        CHECK TO PROTECT FROM ABEND LOOPS.                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         DROP  R12                 DROP GLOBAL ADDRESSABILITY\nSTAEXIT  LR    R8,R15              SET NEW BASE ADDRESS\n         USING STAEXIT,R8          SET LOCAL ADDRESSABILITY\n         CH    R0,=H'12'           SEE IF CORE AVAILABLE\n         BE    STAENO              NO, BRANCH\n        SAVE   (14,12)             SAVE REGISTERS\n         L     R2,0(R1)            LOAD PARAMETER ADDRESS\n         L     R11,STAEREGS+64-WORKAREA(R2) RESTORE HCT ADDRESS\n         LA    R3,STAESAVE-WORKAREA(R2) LOAD ADDRESS OF NEW SAVE\n         ST    R3,8(,R13)          SAVE NEW SAVE ADDRESS IN OLD\n         ST    R13,4(,R3)          SAVE OLD SAVE ADDRESS IN NEW\n         LR    R13,R3              SET NEW SAVE ADDRESS\n         LR    R3,R1               SAVE SDWA ADDRESS\n         LA    R0,L'WTO5           LOAD LENGTH OF MESSAGE\n         LA    R1,WTOLIST-WORKAREA(R2) LOAD ADDRESS OF WTO LIST FORM\n         L     R15,=A(WTO5)\n         MVC   0(LWTO5,R1),0(R15)  SET WTO LIST FORM\n         LA    R15,JBNAME-WORKAREA(R2) LOAD ADDRESS OF JOB NAME\n         MVC   13+4(8,R1),0(R15)   MOVE JOBNAME TO MESSAGE\n        $$WTO  (R1)                WRITE ERROR MESSAGE\n         CLI   RECURS-WORKAREA(R2),X'FF' SEE IF RECURSIVE ABEND\n         BE    STAENO              YES, TELL ABEND NOT TO RETRY\n         MVI   RECURS-WORKAREA(R2),X'FF' PREVENT RECURSIVE ABEND RETRY\n         LA    R1,SDUMPL-WORKAREA(R2) LOAD ADDRESS OF SDUMP LIST FORM\n         MVC   0(LSDUMPL,R1),SDUMPX INITIALIZE SDUMP LIST FORM\n        SDUMP  MF=(E,(1))          TAKE SYSTEM DUMP\n         L     R13,4(,R13)         RESTORE ORIGINAL REG 13\n         LR    R1,R3               RESTORE SDWA ADDRESS\n        SETRP  REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X\n               RETADDR=STAERTRY\nSTAENO   LA    R0,STAERTRY         LOAD RETRY ADDRESS\n         LA    R15,4               SET RETURN CODE TO RETRY\n         BR    R14                 GO RETRY\n         SPACE 1\n         DROP  R8                  DROP LOCAL ADDRESSABILITY\n         USING UEXIT006,R12        RESTORE GLOBAL ADDRESSABILITY\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                           S T A E R T R Y                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        RESTORE ORIGINAL REGISTERS AND GET OUT.                      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nSTAERTRY LR    R13,R1              RESTORE GETMAINED AREA ADDRESS\n         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                           B A D E R R O R                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        A BAD ERROR HAS OCCURRED, AND A FAST PATH THROUGH THE        *\n*        EXIT MUST BE FACILITATED.                                    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nBADERROR OI    MSGIND,SEVERE       TURN ON SEVERE INDICATOR\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED INDICATOR\n         B     GETNEXT             GO GET NEXT CARD\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        CONSTANTS USED BY EXIT.                                      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nESTAEX  ESTAE  STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X\n               TERM=NO,MF=L\nSDUMPX  SDUMP  HDR='JES2 J2XIT006 CONVERTER TIME ESTAE',MF=L\nGETMWAL  DC    0H'0',AL2(WASIZE)   SIZE OF GETMAIN AREA\nPREFIX   DC    0CL11' ',XL6'402020202120',CL5' ' NORMAL MESSAGE PREFIX\nXPRFMKEY DC    AL1(PRFMEEK,1,L'CATPERFM),(L'CATPERFM)X'0',AL1(ENDK)\nXPRFMTXT EQU   XPRFMKEY,*-XPRFMKEY LABEL AND LENGTH FOR ABOVE TEXT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                       L I T E R A L    P O O L                      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        LTORG\n         SPACE 1\nPATCH    DC    128S(*)\n         DC    CL8'ENDPATCH'\n         SPACE 1\n         DROP  R12                 END OF BASE ADDRESSABILITY\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                          W O R K - A R E A                          *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nWORKAREA DSECT\n         DS    18F                 NEW SAVE AREA\nSAVEREGS DS    18F                 ROUTINE REGISTER SAVE AREA\nSTAEREGS DS    18F                 REGISTERS FOR ESTAE RECOVERY\nSTAESAVE DS    18F                 SAVE AREA FOR ESTAE ROUTINE\nDOUBLE   DS    D                   DOUBLE WORD FOR PACK & CVB\nPUTSAVE  DS    19F                 PUT SAVE AREA\nWORKADDR DS    F                   EXIT PARM LIST ADDRESS\nJCTADDR  DS    F                   ADDRESS OF JCT\nJQEADDR  DS    F                   ADDRESS OF JQE\nDTEADDR  DS    F                   ADDRESS OF DTE\nTEXTSTAR DS    F                   START ADDRESS OF INTERNAL TEXT\nSTMTNO   DS    F                   CARD NUMBER FOR MSG ROUTINE\nOUTRPL   DS    F                   ADDR OF OUTPUT RPL\nOUTACB   DS    F                   ADDR OF JOB MESSAGE DATA-SET ACB\nMSGCOUNT DS    F                   MESSAGE COUNT FOR MSG ROUTINE\nMSGRPL   DS    19F                 SKELETON RPL FOR OUTPUT MSG DATA-SET\nJBNAME   DS    CL8                 JOB NAME\nRECURS   DS    XL1                 RECURSIVE ABEND INDICATOR\nJOBIND   DS    XL1                 JOB RELATED INDICATORS\nJOBFAIL  EQU   X'02'               JOB FAILED EXIT TESTING\nMSGIND   DS    XL1                 MSG RELATED INDICATORS\nSEVERE   EQU   X'02'               A SEVERE ERROR HAS OCCURRED\nWARNING  EQU   X'04'               JOB WARNING MESSAGES WRITTEN\nMSGPREF  DS    0CL11               ERROR MESSAGE PREFIX\n         DS    CL1                 EDIT FILL CHARACTER\nBUFFER   DS    0CL100              JES2 MESSAGE AREA\n         DS    CL10                REST OF MESSAGE PREFIX\nMSGTEXT  DS    CL90                TEXT OF ERROR MESSAGE\nMSGTLVL  EQU   MSGTEXT+6\nWTOLIST  DS    CL120               SET WTO LIST FORM\nESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X\n               TERM=NO,MF=L\nLESTAEL  EQU   *-ESTAEL\nSDUMPL   SDUMP HDR='JES2 J2XIT006 CONVERTER TIME ESTAE',MF=L\nLSDUMPL  EQU   *-SDUMPL\nWASIZE   EQU   (((*-WORKAREA)+7)/8)*8   LENGTH OF WORK AREA\n         SPACE 1\nJ2XIT006 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                          W T O - L I S T S                          *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        $MID   901\nWTO1    WTO    '&MID.JOB XXXXXXXX - WARNING ERROR(S) DETECTED',        X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO1    EQU   *-WTO1\n        $MID  902\nWTO2    WTO    '&MID.JOB XXXXXXXX - FAILING ERROR(S) DETECTED',        X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO2    EQU   *-WTO2\n        $MID  903\nWTO3    WTO    '&MID.JOB XXXXXXXX - SEVERE ERROR(S) DETECTED',         X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO3    EQU   *-WTO3\n        $MID   904\nWTO4    WTO    '&MID.JOB XXXXXXXX - PUT TO MESSAGE DATA-SET FAILED',   X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO4    EQU   *-WTO4\n        $MID   905\nWTO5    WTO    '&MID.JOB XXXXXXXX - JES2/J2XIT006 EXIT ABEND',         X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO5    EQU   *-WTO5\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                     M E S S A G E S    (ERMRTN)                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nHEADER1  DC    C' STMT NO. MESSAGE'\nHEADER2  DC    C'- '\n         DC    AL1(L'MSGINV-1)\nMSGINV   DC    C'EU-001I INTERNAL ERROR - INVALID TEXT STATEMENT TYPE DX\n               ETECTED.'\n         SPACE 1\n        $MODEND\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT008": {"ttr": 15365, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943_\\x00\\x943_\\t \\x00\\xdb\\x00\\xdb\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-01T00:00:00", "modifydate": "1994-12-01T09:20:00", "lines": 219, "newlines": 219, "modlines": 0, "user": "SYSPAJA"}, "text": "X008     TITLE 'JES2 - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* MODULE NAME : EXIT008                                               *\n* DESCRIPTIVE NAME : JES2 EXIT 8 (HASPSSSM)                           *\n*                    JCT READ/WRITE (USER)                            *\n*                    (MAX COND CODE/ABEND CODE SUPPORT)               *\n* PURPOSE :     THIS EXIT STORES EITHER THE MAXIMUM CONDITION CODE    *\n*               OF ALL THE STEPS IN A JOB OR THE ABEND CODE OF THE    *\n*               JOB IN A JCT USER FIELD (NAME IS 'JCTUSER3').     -EU-*\n*               THIS INFORMATION WILL BE USED LATER IN EXIT016    -EU-*\n*               TO BUILD THE TSO NOTIFY.                          -EU-*\n* INVOCATION POINT : EXIT008                                          *\n* ENTRY POINT : UEXIT008                                              *\n* ENVIRONMENT : USER ADDRESS SPACE                                    *\n*               EXIT MUST RESIDE IN COMMON STORAGE                -EU-*\n* REGISTERS AT ENTRY :                                                *\n*               R0 : A CODE PASSED BY JES2                            *\n*                    =0, INDICATES THAT THE JCT HAS BEEN READ FROM    *\n*                        SPOOL                                        *\n*                    =4, INDICATES THAT THE JCT WILL BE WRITTEN TO    *\n*                        SPOOL                                        *\n*               R1 : ADDRESS OF THE JCT                               *\n*               R2-R10 : N/A                                          *\n*               R11 : ADDRESS OF THE SVT                              *\n*               R12 : N/A                                             *\n*               R13 : ADDRESS OF AN OS-STYLE SAVE AREA                *\n*               R14 : RETURN ADDRESS                                  *\n*               R15 : ENTRY ADDRESS                                   *\n* REGISTERS ON RETURN :                                               *\n*               R0-R1 : N/A                                           *\n*               R15 : A RETURN CODE :                                 *\n*                     =0, CONTINUE NORMAL PROCESSING                  *\n*                     =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH    *\n*                         NORMAL PROCESSING                           *\n* LINKAGE EDITOR INFO :                                               *\n*               ATTRIBUTES : REENTRANT, REUSEABLE, REFRESHABLE        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* AUTHOR :      VIC COZZOLI                                           *\n*               WELLS FARGO BANK, N.A. (WFB)                          *\n*               525 MARKET STREET, A.U. 8513                          *\n*               SAN FRANCISCO, CALIFORNIA 94163                       *\n*               PHONE : (415) 396-6376                                *\n*                  DATE WRITTEN : NOVEMBER 1983                       *\n*                  FMID : HJE2329 (MVS/SP-JES2 1.3.3)                 *\n*               ORIGIN : JESMAXCC FROM CBT TAPE 89 FEB, FILE 325.     *\n* UPDATES :     BY MOINIL P.A. FOR JES2 2.2.0, CHANGES ARE IDENTIFIED *\n*               BY '-EU-' IN LINES.                                   *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* JES2PARM INITIALIZATION STATEMENTS :                                *\n*               LOAD=J2XIT008                                         *\n*               EXIT008 ROUTINE=UEXIT008,DISABLE,TRACE=YES            *\n*                                        ENABLE        NO             *\n* JES2 OPERATOR CONTROL COMMANDS :                                    *\n*               $T EXIT008,DISABLE,TRACE=YES                          *\n*                          ENABLE        NO                           *\n*               $D EXIT008                                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1                                                   -EU-\n         PRINT OFF                                                 -EU-\n         COPY  EUFAJCTB                                            -EU-\n         PRINT ON                                                  -EU-\n         EJECT\n         COPY  $HASPGBL                COPY HASP GLOBALS\n         SPACE 1\nJ2XIT008 $MODULE ENVIRON=USER,TITLE='JES2 - EXIT 008',             -EU-X\n               CVT,                    REQ'D TO FIND OS JCT        -EU-X\n               JSCB,                   REQ'D TO FIND OS JCT        -EU-X\n               TCB,                    REQ'D TO FIND OS JCT        -EU-X\n               RPL,                    REQ'D BY $BUFFER            -EU-X\n               SSOB,                   REQ'D TO DETERMINE INVOKER      X\n               $BUFFER,                REQ'D BY $JCT                   X\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       X\n               $HFAME,                 REQ'D BY $SVT               -EU-X\n               $JCT,                   REQ'D TO SAVE ABEND/COND CODE   X\n               $MIT,                   REQ'D BY $MODEND, $HCT          X\n               $PADDR,                 REQ'D BY $HCT               -EU-X\n               $SCAT,                  REQ'D BY $SVT                   X\n               $SJB,                   REQ'D TO DETERMINE INVOKER      X\n               $SVT,                   REQ'D TO DETERMINE INVOKER      X\n               $TQE,                   REQ'D BY $SJB                   X\n               $XECB                   REQ'D BY $SVT\n         TITLE 'JES2 - EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        INITIALIZATION.                                              *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nUEXIT008 $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE 1\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         LR    R10,R1                  GET ADDRESS OF JCT\n         XR    R15,R15                 SET DEFAULT RETURN CODE\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        CHECK TO SEE IF THERE IS A JCT , IF IT IS FOR A BATCH JOB    *\n*        AND IF NOTIFY WAS REQUESTED. IF NOT, RETURN.                 *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         LTR   R0,R0                   IS JCT BEING READ?\n         BZ    RETURN                  YES, RETURN\n         USING JCT,R10                 PROVIDE JCT ADDRESSABILITY  -EU-\n         CLI   JCTJOBID,C'J'           IS THIS A BATCH JOB?\n         BNE   RETURN                  NO, RETURN\n         CLI   JCTTSUID,C' '           WAS NOTIFY REQUESTED?\n         BE    RETURN                  NO, RETURN\n         TM    JCTJBOPT,JCTXBACH       IS THIS AN X-BATCH MONITOR?\n         BO    RETURN                  YES, RETURN\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        FIND THE SJB ON THE JOBS EXECUTING BY CLASS QUEUE THAT       *\n*        BELONGS TO THIS JOB'S JCT. IF THE SJB INDICATES THE JOB      *\n*        IS NOT IN TERMINATION, THEN RETURN.                          *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         USING SVT,R11                 PROVIDE SSVT ADDRESSABILITY -EU-\n         L     R2,SVTJXCLS             GET EXECUTING SJB'S QUEUE   -EU-\n         USING SJB,R2                  PROVIDE SJB ADDRESSABILITY  -EU-\nGETSJB   LTR   R2,R2                   TEST FOR END OF QUEUE\n         BZ    RETURN                  RETURN IF NO MATCH\n         CLC   JCTJOBID(8),SJBJOBID    IS THIS THE SJB FOR THIS JCT?\n         BE    FOUNDSJB                YES, PROCESS IT\n         L     R2,SJBXQCHN             GET POINTER TO NEXT SJB\n         B     GETSJB                  LOOP BACK THRU\nFOUNDSJB CLI   SJBXQFN1+1,SSOBTERM     WAS EXIT INVOKED BY JOB TERM.?\n         BNE   RETURN                  NO, RETURN (NOT HOSTERM)\n         DROP  R2\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        FIND THE OS JCT FOR THIS JOB AND CHECK TO SEE IF THE JOB     *\n*        ABENDED. IF IT DID ABEND, GET THE ABEND CODE.                *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         L     R2,CVTPTR               LOAD ADDR OF CVT POINTER\n         USING CVTMAP,R2\n         L     R2,CVTTCBP              LOAD ADDR OF NEXT/CURR TCB'S\n         DROP  R2\n         L     R2,4(R2)                LOAD ADDR OF OUR TCB\n         XR    R3,R3\n         USING TCB,R2\n         ICM   R3,B'0111',TCBJSCBB       LOAD ADDR OF JSCB\n         DROP  R2\n         USING IEZJSCB,R3\n         L     R2,JSCBACT              LOAD ADDR OF ACTIVE JSCB\n         DROP  R3\n         USING IEZJSCB,R2\n         ICM   R3,B'0111',JSCBJCTA     LOAD ADDR OF OS JCT\n         DROP  R2\n         LA    R2,ZB502L(R3)                                       -EU-\n         USING INJMJCT,R2              ESTABLISH OS JCT ADDRESSABILITY\n         TM    JCTJSTAT,JCTABEND       DID JOB ABEND?\n         BZ    GETMAXCC                NO, GET MAXIMUM CONDITION CODE\n         L     R3,JCTACODE             YES, GET ABEND CODE\n         B     SAVECODE                GO TO SAVE IT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        IF THE JOB DID NOT ABEND, THEN SCAN THE SCT'S FOR THE JOB    *\n*        AND FIND THE MAXIMUM CONDITION CODE OUT OF ALL JOB'S STEPS.  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nGETMAXCC L     R2,JCTSDKAD             GET FIRST SCT ADDRESS\n         DROP  R2\n         XR    R3,R3                   ZERO OUT WORK REGISTER\nSCTLOOP  SRL   R2,8                    GET ADDRESS IN PROPER FORM\n         LTR   R2,R2                   ARE THERE ANY MORE SCT'S?\n         BZ    SAVECODE                NO, GO TO FINISH\n         LA    R2,ZB502L(R2)                                       -EU-\n         USING INSMSCT,R2              ESTABLISH SCT ADDRESSABILITY\n         TM    SCTSTEND,SCTSTSRT+SCTSTPND   DID STEP RUN?          -EU-\n         BNO   NEXTSCT                 NO, GET NEXT SCT\n         CH    R3,SCTSEXEC             IS THIS STEP'S CC GT MAXIMUM?\n         BNL   NEXTSCT                 NO, GET NEXT SCT\n         LH    R3,SCTSEXEC             YES, SAVE NEW MAX COND CODE\nNEXTSCT  L     R2,SCTANSCT             GET NEXT SCT\n         B     SCTLOOP                 LOOP TO CHECK NEXT SCT\n         DROP  R2\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        SAVE EITHER THE ABEND CODE OR THE MAXIMUM CONDITION CODE FOR *\n*        ANY STEP OF THE JOB IN A JCT USER FIELD. THIS INFORMATION    *\n*        WILL BE USED LATER IN EXIT016 - TSO NOTIFY.                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nSAVECODE ST    R3,JCTUSER3             SAVE ABEND/MAX COND CODE\n         MVI   JCTUSER3,X'80'          MARK IT AS PROCESSED\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GO BYE-BYE.                                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nRETURN   L     R14,12(R13)             LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)          RESTORE REGISTERS\n         BR    R14                     RETURN\n         EJECT\n        LTORG\n         SPACE 1                                                   -EU-\nPATCH    DC    128S(*)                                             -EU-\n         DC    CL8'ENDPATCH'\n         SPACE 1                                                   -EU-\n        PRINT  NOGEN                                               -EU-\n         SPACE 1                                                   -EU-\n        IEFZB502 ,                                                 -EU-\nZB502L   EQU   *-ZB502                                             -EU-\n         SPACE 1\nOSJCT    DSECT\n        EUFAJCTB ,                     MODIFIED FROM SYS1.MODGEN   -EU-\n         SPACE 1\nSCTDSCT  DSECT\n        IEFASCTB ,                                                 -EU-\n         SPACE 1\n        PRINT  GEN                                                 -EU-\nJ2XIT008 CSECT\n         SPACE 1\n        $MODEND\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT016": {"ttr": 15370, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11\\x0f\\x00\\x90\\x11\\x0f\\x11Q\\x00\\xc1\\x00\\xc1\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-20T00:00:00", "modifydate": "1990-04-20T11:51:00", "lines": 193, "newlines": 193, "modlines": 0, "user": "SYSPAJA"}, "text": "X016     TITLE 'JES2 - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* MODULE NAME : EXIT016                                               *\n* DESCRIPTIVE NAME : JES2 EXIT 16 (HASPHOPE)                          *\n*                    NOTIFY (MAX COND CODE/ABEND CODE SUPPORT)        *\n* PURPOSE :     THIS EXIT MODIFIES THE $HASP165 MESSAGE BY ADDING     *\n*               EITHER THE MAXIMUM CONDITION CODE OF ALL THE STEPS    *\n*               IN A JOB OR THE ABEND CODE OF THE JOB (SET BY     -EU-*\n*               EXIT008 IN 'JCTUSER3' FIELD).                     -EU-*\n* INVOCATION POINT : EXIT016                                          *\n* ENTRY POINT : UEXIT016                                              *\n* ENVIRONMENT : JES2 MAIN TASK                                        *\n* REGISTERS AT ENTRY :                                                *\n*               R0 : A CODE INDICATING IF THIS IS THE FIRST OR        *\n*                    SUCCEEDING $HASP165 (JOB NNNNN ENDED - REASON    *\n*                    TEXT) MESSAGE :                                  *\n*                    =0, INDICATES THAT THIS IS THE FIRST (AND        *\n*                        POSSIBLY ONLY) MESSAGE INDICATING THE END    *\n*                        OF THE JOB                                   *\n*                    =4, INDICATES THAT THIS IS NOT THE FIRST         *\n*                        MESSAGE FOR THIS JOB GOING THROUGH THE       *\n*                        OUPUT PROCESSOR                              *\n*               R1 : ADDRESS OF 3-WORD PARAMETER LIST WITH THE        *\n*                    FOLLOWING STRUCTURE :                            *\n*                    WORD 1 (+0) ADDRESS OF THE MESSAGE THAT IS TO    *\n*                                BE SENT                              *\n*                    WORD 2 (+4) ADDRESS OF THE $WTO PARAMETER LIST   *\n*                    WORD 3 (+8) ADDRESS OF THE JCT                   *\n*               R2-R10 : N/A                                          *\n*               R11 : ADDRESS OF THE HCT                              *\n*               R12 : N/A                                             *\n*               R13 : ADDRESS OF THE OUTPUT PROCESSOR PCE             *\n*               R14 : RETURN ADDRESS                                  *\n*               R15 : ENTRY ADDRESS                                   *\n* REGISTERS ON RETURN :                                               *\n*               R0 : N/A                                              *\n*               R1 : ADDRESS OF THE 3-WORD PARAMETER LIST             *\n*               R15 : A RETURN CODE :                                 *\n*                     =0, CONTINUE NORMAL NOTIFY PROCESSING           *\n*                     =4, IGNORE ANY OTHER EXITS AND CONTINUE WITH    *\n*                         NORMAL NOTIFY PROCESSING                    *\n*                     =8, TELLS JES2 NOT TO ISSUE THE NOTIFY $WTO     *\n* LINKAGE EDITOR INFO :                                               *\n*               ATTRIBUTES : REENTRANT, REUSEABLE, REFRESHABLE        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* AUTHOR :      VIC COZZOLI                                           *\n*               WELLS FARGO BANK, N.A. (WFB)                          *\n*               525 MARKET STREET, A.U. 8513                          *\n*               SAN FRANCISCO, CALIFORNIA 94163                       *\n*               PHONE : (415) 396-6376                                *\n*                  DATE WRITTEN : NOVEMBER 1983                       *\n*                  FMID : HJE2329 (MVS/SP-JES2 1.3.3)                 *\n*               ORIGIN : JESMAXCC FROM CBT TAPE 89 FEB, FILE 325.     *\n* UPDATES :     BY TOM LITNEY FOR JES2 2.1.5, CHANGES ARE IDENTIFIED  *\n*               BY '-TL-' IN LINES (NOW REPLACED BY -EU-).            *\n*               BY MOINIL P.A. FOR JES2 2.2.0, CHANGES ARE IDENTIFIED *\n*               BY '-EU-' IN LINES.                                   *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* JES2PARM INITIALIZATION STATEMENTS :                                *\n*               LOAD=J2XIT016                                         *\n*               EXIT016 ROUTINE=UEXIT016,DISABLE,TRACE=YES            *\n*                                        ENABLE        NO             *\n* JES2 OPERATOR CONTROL COMMANDS :                                    *\n*               $T EXIT016,DISABLE,TRACE=YES                          *\n*                          ENABLE        NO                           *\n*               $D EXIT016                                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n        COPY  $HASPGBL                 COPY HASP GLOBALS\n         SPACE 1\nJ2XIT016 $MODULE TITLE='JES2 - EXIT 016',                          -EU-X\n               RPL,                    REQ'D BY $BUFFER            -EU-X\n               SSOB,                   REQ'D FOR FLAGS VALUES      -EU-X\n               $BUFFER,                REQ'D BY $JCT                   X\n               $CMB,                   REQ'D TO MAP $WTO PARM LIST     X\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       X\n               $HCT,                   REQ'D BY $SAVE, $RETURN, ETC.   X\n               $JCT,                   REQ'D TO GET JOBNAME, ETC.      X\n               $MIT,                   REQ'D BY $MODEND, $HCT          X\n               $PADDR,                 REQ'D BY $HCT               -EU-X\n               $PCE                    REQ'D TO GET PROCESSOR INFO\n         TITLE 'JES2 - EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT'\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        INITIALIZATION.                                              *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nUEXIT016 $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         SPACE 1\n        $SAVE  ,                       SAVE CALLER'S REGISTERS\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER\n         L     R10,8(R1)               LOAD JCT ADDRESS\n         USING JCT,R10                 ESTABLISH ADDRESSABILITY\n         XR    R15,R15                 SET DEFAULT RETURN CODE\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        CHECK TO SEE IF JOB'S ABEND CODE OR MAXIMUM CONDITION CODE   *\n*        HAS BEEN SAVED. IF NOT, RETURN.                              *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CLI   JCTUSER3,X'80'          IS JOB'S ABEND/MAX CC SAVED?-EU-\n         BNE   RETURN                  NO, RETURN\n         TM    JCTJTFLG,SSJTJFAL       IS MESSAGE TO BE ALTERED?   -EU-\n         BO    RETURN                  NO, SKIP, JOB HAS FAILED    -EU-\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        PREPARE TO ALTER THE NOTIFY MESSAGE.                         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         L     R4,4(R1)                GET ADDRESS OF $WTO PARM LIST\n         USING CMBWTOPL,R4             ESTABLISH $CMD ADDRESSABILITY\n         XR    R5,R5                   ZERO WORK REGISTER\n         IC    R5,CMBML                GET MESSAGE LENGTH\n         CH    R5,=H'70'               MSG TOO LONG TO UPDATE IN PLACE?\n         BH    RETURN                  YES, RETURN (SHOULDN'T HAPPEN)\n         L     R6,0(R1)                GET ADDRESS OF MESSAGE TEXT\n         AR    R6,R5                   POINT PAST EXISTING MESSAGE TEXT\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        CHECK TO SEE IF THE JOB ABENDED.                             *\n*        IF IT DID, GET THE ABEND CODE (SYSTEM OR USER).           -EU-\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         TM    JCTJTFLG,SSJTABND       DID JOB ABEND?              -EU-\n         BZ    MAXCONDC                NO, GO GET MAXIMUM COND CODE\n         LA    R5,6(R5)                INCR. MSG LENGTH            -EU-\n         STC   R5,CMBML                STORE NEW LEN IN CMB        -EU-\n         MVC   0(6,R6),=CL6' XXXX'     ADD ABEND CODE TO MSG       -EU-\n         XR    R2,R2                                               -EU-\n         ICM   R2,B'0111',JCTUSER3+1   GET ABEND CODE              -EU-\n         SRL   R2,12                   OBTAIN SYSTEM CODE\n         LTR   R2,R2                   WAS IT A SYSTEM CODE ABEND?\n         BZ    UABEND                  NO, GO PROCESS USER CODE ABEND\n         MVI   1(R6),C'S'              SET SYSTEM ABEND IN MSG     -EU-\n         B     CVHPRTBL                GO CONVERT TO HEX/PRINTABLE -EU-\nUABEND   ICM   R2,B'0011',JCTUSER3+2   GET USER ABEND CODE         -EU-\n         MVI   1(R6),C'U'              SET USER ABEND IN MSG       -EU-\nCVHPRTBL SRDL  R2,12                   CONVERT IT TO HEX           -EU-\n         XR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,2(R6)                       \"                    -EU-\n         XR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,3(R6)                       \"                    -EU-\n         XR    R2,R2                          \"\n         SLDL  R2,4                           \"\n         IC    R2,CONVTABL(R2)                \"\n         STC   R2,4(R6)                       \"                    -EU-\n         B     RETURN                  ALL DONE                    -EU-\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        IF THE JOB ENDED NORMALLY, COME HERE TO ALTER THE NOTIFY     *\n*        MESSAGE TO INCLUDE THE MAXIMUM CONDITION CODE FOR ANY        *\n*        STEP IN THE JOB.                                             *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nMAXCONDC LA    R5,15(R5)               INCR. MSG LENGTH            -EU-\n         STC   R5,CMBML                STORE NEW LEN IN CMB        -EU-\n         LH    R2,JCTUSER3+2           GET MAX CONDITION CODE      -EU-\n         LA    R3,7(R6)                USE MSG AREA FOR WORK       -EU-\n         SRL   R3,3                                                -EU-\n         SLL   R3,3                                                -EU-\n         CVD   R2,0(R3)                CONVERT TO DECIMAL          -EU-\n         MVC   0(3,R6),5(R3)                                       -EU-\n         OI    2(R6),X'0F'             SET SIGN                    -EU-\n         MVC   3(6,R6),=XL6'402020202120'   SET EDIT MASK          -EU-\n         ED    3(6,R6),0(R6)           EDIT FOUR LOW DIGITS        -EU-\n         ICM   R2,B'1111',5(R6)        GET EDITED MAX CC           -EU-\n         MVC   0(15,R6),=CL15' - MAX CC XXXX' ADD MAX CC TO MSG    -EU-\n         STCM  R2,B'1111',10(R6)       SET MAX CC IN MSG           -EU-\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GO BYE-BYE.                                                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         DROP  R4                                                  -EU-\nRETURN  $RETURN RC=(R15)               RETURN TO CALLER\n         EJECT\nCONVTABL DC    CL16'0123456789ABCDEF'  CONVERSION TABLE\n         SPACE 1\n        LTORG\n         SPACE 1                                                   -EU-\nPATCH    DC    128S(*)                                             -EU-\n         DC    CL8'ENDPATCH'\n         SPACE 1\n        $MODEND\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GDTUTIL": {"ttr": 15617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943_\\x00\\x943_\\t \\x06\\xb0\\x06\\xb0\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-01T00:00:00", "modifydate": "1994-12-01T09:20:00", "lines": 1712, "newlines": 1712, "modlines": 0, "user": "SYSPAJA"}, "text": "GDTU     TITLE 'GENERATE DSECT''S TABLES UTILITY.'\nGDTUTIL  START 0\n         SPACE 1\n* PURPOSE :    THE MAIN GOAL OF THIS PROGRAM IS TO GENERATE DSECT'S\n* ---------    TABLES WHICH IN TURN SHOULD BE AVAILABLE TO THE TSO\n*        'VCOREZAP' COMMAND FOR DSECT'S FIELDS REFERENCES. NOTE THAT\n*        THESE TABLES CAN BE ACCESSED BY ANY OTHER PROGRAMS IF DESIRED.\n*\n* AUTHOR :     MOINIL P.A. - COMPUTING CENTRE\n* --------     J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n*\n* CALL OF THE PROGRAM :\n* ---------------------\n*        //GDTU    EXEC PGM=GDTUTIL,PARM=...\n*        //SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR\n*        //          DD DSN=SYS1.MODGEN,DISP=SHR\n*        //          DD DSN=...ANY OTHER MACLIB...,DISP=SHR\n*        //SYSLMOD   DD ... OUTPUT LOAD-MODULES PARTITIONED LIBRARY ...\n*        //SYSIN     DD ... INPUT DATA (DESIRED DSECTS) ...\n*        //SYSMSG    DD SYSOUT=*\n*        //SYSPRINT  DD SYSOUT=*\n*\n* PARM=... : EACH PARAMETER MUST BE SEPARATED FROM THE OTHER BY AT\n* ---------- LEAST A COMMA. AVAILABLE OPTIONS ARE :\n*            NOGEN - PRODUCE ONLY THE MACROS ASSEMBLY OUTPUT LIST\n*                    (SUPPRESS GENERATE AND LINK-EDIT)\n*            NOLINK - PRODUCE ONLY THE DSECTS TABLES ASSEMBLY OUTPUT\n*                     LIST (SUPPRESS LINK-EDIT)\n*            WC=... - CHANGE WORK-CONTROL SIZE (EXPRESSED IN BYTES, IT\n*                     WILL BE ROUNDED TO THE UPPER DOUBLE-WORD).\n*            WA=...K - CHANGE WORK-AREAS SIZE (EXPRESSED IN K-BYTES).\n*\n*     I.E. : PARM='NOLINK,WC=4096,WA=24K'\n         SPACE 2\n*        --------------------------\n*        MISCELLANEOUS DEFINITIONS.\n*        --------------------------\n         SPACE 1\nNKWA     EQU   16                  DEFAULT WORK-AREA SIZE IN K-BYTES,\n*                                  USED TO STORE ALL DSECT SYSMBOLS\n*                                  (INTERNAL TABLE ELEMENTS).\nNBWC     EQU   2048                DEFAULT WORK-CONTROL SIZE IN BYTES,\n*                                  USED TO MEMORIZE CONTROL REQUESTS.\n         EJECT\n* INPUT DATA (SYSIN) : ASSEMBLER STATEMENTS DEFINING THE DESIRED DSECTS\n* -------------------- TO BE GENERATED AND EVENTUAL CONTROL STATEMENTS\n*        (EQUAL SIGN IN COLUMN 1) TO REQUEST SOME CHANGES AS BELOW :\n*\n*        1. =  C  ...NAME1...  ...NAME2...\n*              CREATE A NEW DSECT NAMED ...NAME1... BEFORE FIELD NAMED\n*              ...NAME2... (USEFULL TO SEPARATE PREFIX PART).\n*\n*        2. =  A  ...NAME1...  ...NAME2...\n*              ALIAS WITH NAME ...NAME1... THE DSECT NAME ...NAME2...\n*              (I.E. DCB IS MORE EASIER THAN IHADCB).\n*\n*        3. =  D  ...NAME1...  ...NAME2...  ... ... ...\n*              DELETE ONE OR MORE FIELD OR FLAG NAMES (UNDESIRABLE\n*              NAMES IN THE DSECT TABLE).\n*\n*        4. =  F  ...NAME1...  ...NAME2...  ... ... ...\n*              FORCE ONE OR MORE NAMES AS A DSECT FIELD NAME BUT WITH\n*              A LENGTH OF ZERO (LENGTH SYMBOL).\n*\n*        5. =  L  ...NAME1...\n*              LINK-EDIT A RESULTING DSECT TABLE WITH ...NAME1... AS\n*              LOAD-MODULE NAME. THIS CONTROL STATEMENT IS ACCEPTED\n*              ONLY ONCE BY DSECT.\n*\n*        6. =  M  ...NAME1...  ...NAME2...\n*              MOVE ALL FLAGS NAMES DEFINITIONS WHICH FOLLOWS FIELD\n*              ...NAME1... AFTER FIELD ...NAME2... (ALLOWS REORDERING\n*              OF MULTIPLE DEFINITIONS IN THE DSECT).\n*\n*        NOTE : ALL ASSEMBLER STATEMENTS MUST BE GIVEN IN THE ORDER\n*               NEEDED FOR ASSEMBLY, TEMINATING A DSECT INPUT BY AN\n*               'END' STATEMENT. ALL CONTROL STATEMENTS RELATIVE TO\n*               THE DSECT CAN BE SUPPLIED IN ANY ORDER AND ANYWHERE\n*               BEFORE THE 'END' STATEMENT.\n         EJECT\n* INPUT EXAMPLE : (TRY IT AND SEE WHAT'S COMING OUT)\n* ---------------\n*\n*              = A CVTMAP CVT\n*              = C CVT CVTTCBP\n*              = D CVTMAP\n*              = L CVT\n*                       CVT   PREFIX=YES,DSECT=YES,LIST=YES\n*                       END\n*              = A DCB IHADCB\n*              = D DCBBIT0 DCBBIT1 DCBBIT2 DCBBIT3\n*              = D DCBBIT4 DCBBIT5 DCBBIT6 DCBBIT7\n*              = F DCBLNGXE DCBLNGDA DCBLNGBS\n*              = F DCBLNGPO DCBLNGQS DCBLNGPS\n*              = L DCB\n*              = M DCBDVTBA DCBDEVT\n*              = M DCBLNGDA DCBOPTCD\n*                       DCBD  DSORG=(PS,PO,DA),DEVD=DA\n*                       END\n*              TIOT     DSECT\n*                       IEFTIOT1\n*                       END\n*                       IHAASCB LIST=YES\n*                       END\n*              = F ASVTLEN ASVTULEN\n*                       IHAASVT LIST=YES\n*                       END\n*              = A FLC PSA\n*              = D FLC\n*                       IHAPSA LIST=YES\n*                       END\n*              = C TCB TCBRBP\n*              = D TCB\n*              = F TCBPXLEN TCBMNLEN TCBX2LEN TCBLEN\n*              = L TCB\n*                       IKJTCB LIST=YES\n*                       END\n         EJECT\n        $DEFREG\n        $XENT  BASE=(R10,R11,R12)\n         EJECT\n*        PARM. FIELD ANALYSIS.\n         SPACE 1\n         L     R2,0(R1)\n         XR    R0,R0\n         ICM   R0,B'0011',0(R2)\n         BZ    NOPARM\n         LA    R1,2(R2)\nPARMSC   CLI   0(R1),C','\n         BNE   PARMSC1\n         LA    R1,1(R1)\n         BCT   R0,PARMSC\n         B     NOPARM\nPARMSC1  LR    R2,R1\n         LA    R2,1(R2)\n         BCT   R0,PARMSC2\n         LR    R3,R2\n         BCTR  R3,0\n         B     PARMSC3\nPARMSC2  CLI   0(R2),C','\n         BNE   PARMSC1+L'PARMSC1\n         LR    R3,R2\nPARMSC3  SLR   R2,R1\n         CH    R2,=H'6'\n         BNE   PARMNG\n         CLC   0(6,R1),=CL6'NOLINK'\n         BNE   PARMNG\n         OI    SWITCH,SWNL\n         B     PARMNXT\nPARMNG   CH    R2,=H'5'\n         BL    PARMERR\n         BH    PARMCA\n         CLC   0(5,R1),=CL5'NOGEN'\n         BNE   PARMCA\n         OI    SWITCH,SWNG\n         B     PARMNXT\nPARMCA   XR    R4,R4\n         CLC   0(3,R1),=CL3'WC='\n         BE    *+L'*+12\n         CLC   0(3,R1),=CL3'WA='\n         BNE   PARMERR\n         BCTR  R4,0\n         LA    R1,3(R1)\n         TM    0(R1),C'0'\n         BNO   PARMERR\n         XR    R14,R14\n         LR    R15,R14\n         LA    R5,15\nPARMCA1  IC    R15,0(R1)\n         NR    R15,R5\n         AR    R14,R15\n         LA    R1,1(R1)\n         CLR   R1,R3\n         BH    PARMCA2\n         TM    0(R1),C'0'\n         BNO   PARMCA2\n         LTR   R14,R14\n         BZ    PARMCA1\n         MH    R14,=H'10'\n         B     PARMCA1\nPARMCA2  LTR   R14,R14\n         BNP   PARMERR\n         LTR   R4,R4\n         BNZ   PARMCA3\n         LA    R14,7(R14)\n         SRL   R14,3\n         SLL   R14,3\n         ST    R14,WRKCL\n         B     PARMCA4\nPARMCA3  SLL   R14,10\n         ST    R14,WRKAL\n         CLR   R1,R3\n         BH    PARMNXT\n         CLI   0(R1),C'K'\n         BNE   PARMCA5\n         LA    R1,1(R1)\nPARMCA4  CLR   R1,R3\n         BH    PARMNXT\nPARMCA5  CLI   0(R1),C','\n         BNE   PARMERR\nPARMNXT  LR    R1,R3\n         LTR   R0,R0\n         BP    PARMSC\n         B     NOPARM\nPARMERR  LA    R2,L'PFMFLD-3\n         CLR   R0,R2\n         BH    *+L'*+8\n         BE    *+L'*+2\n         LR    R2,R0\n         XR    R0,R0\n         BCT   R2,*+L'*+6\n         MVC   PFMFLD(*-*),0(R1)\n         EX    R2,*-6\n         LTR   R0,R0\n         BZ    *+L'*+10\n         LA    R1,PFMFLD+1(R2)\n         MVC   0(3,R1),=CL3'...'\n         LA    R2,PFMERR\n         BAS   R7,PMRTN\n         B     EXPFE\n         EJECT\n*        INITIALIZATION.\n         SPACE 1\nNOPARM   ICM   R3,B'1111',WRKCL\n         BNZ   *+L'*+16\n         L     R3,=A(NBWC+7)\n         SRL   R3,3\n         SLL   R3,3\n         ST    R3,WRKCL\n         LR    R0,R3\n        GETMAIN R,LV=(0)\n         ST    R1,WRKC\n         ALR   R1,R3\n         BCTR  R1,0\n         ST    R1,WRKC+4\n         ICM   R3,B'1111',WRKAL\n         BNZ   *+L'*+14\n         XR    R3,R3\n         ICM   R3,B'0011',=Y(NKWA)\n         SLL   R3,10\n         ST    R3,WRKAL\n         LR    R0,R3\n        GETMAIN R,LV=(0)\n         ST    R1,WRKA\n         XR    R2,R2\n         D     R2,WRKA+4\n         XR    R2,R2\n         M     R2,WRKA+4\n         SL    R3,WRKA+4\n         AR    R1,R3\n         ST    R1,WRKA+8\n         L     R2,=A(DDLIN)\n         BAS   R8,DARTN\n         B     EXLIN\n         L     R2,=A(DDUT1)\n         BAS   R8,DARTN\n         B     EXUT1\n         L     R2,=A(DDWK1)\n         BAS   R8,DARTN\n         B     EXWK1\n         L     R2,=A(DDWK2)\n         BAS   R8,DARTN\n         B     EXWK2\n         L     R2,=A(DDWK3)\n         BAS   R8,DARTN\n         B     EXWK3\n         EJECT\n*        GET A DSECT AND PREPARE TO ASSEMBLY IT.\n*              DDNAME OF INPUT = SYSIN\n*              DDNAME OF OUTPUT = SYSWK1\n         SPACE 1\nLOOP     MVC   DDIN,=CL8'SYSWK1'\n         ZAP   SEQN,=PL1'+0'\n         NI    SWITCH,255-SWDS-SWPU\n         MVC   MACNME,=CL8' '\n         MVC   LNKNME,=CL8' '\n         L     R2,WRKC\n         LR    R6,R2\n         L     R3,WRKCL\n         XR    R14,R14\n         LR    R15,R14\n         MVCL  R2,R14\n         L     R2,WRKA\n         L     R3,WRKAL\n         XR    R14,R14\n         LR    R15,R14\n         MVCL  R2,R14\nINREAD  $READ  CARD\n         LTR   R15,R15\n         BM    INERR\n         BZ    INPRS\n         MVC   MSGETY,=CL2'IN'\n         MVC   MSGEDD,=CL8'SYSIN'\n         BAS   R8,EMRTN\n         B     INERR\nINPRS    CLI   CARD,C'*'\n         BE    INREAD\n         CLI   CARD,C'='\n         BNE   INDATA\n         TM    SWITCH,SWDS\n         BO    INREAD\n         MVC   CLSD(L'CLSD),CARD\n         LA    R2,CLST\n         BAS   R7,PMRTN\n         LM    R3,R5,SCCRD\n         CLI   0(R3),C' '\n         BNE   *+L'*+8\n         BXLE  R3,R4,*-8\n         B     INSKIP\n         CLI   0(R3),C'A'          ALIAS REQUEST\n         BE    INAMCN\n         CLI   0(R3),C'C'          CREATE REQUEST\n         BE    INAMCN\n         CLI   0(R3),C'D'          DELETE REQUEST\n         BE    INDFTN\n         CLI   0(R3),C'F'          FORCE REQUEST\n         BE    INDFTN\n         CLI   0(R3),C'L'          LINK REQUEST\n         BE    INLNKN\n         CLI   0(R3),C'M'          MOVE REQUEST\n         BE    INAMCN\n         LA    R2,UNKNOWN\n         BAS   R7,PMRTN\n         B     INREAD\nINAMCN   MVC   CTLOPC(L'CTLOPC),0(R3)   SET REQUEST\n         LA    R1,1+L'CTLOPC+L'CTLNME+L'TRGNME(R6)\n         CL    R1,WRKC+4\n         BH    INWCOV\n         MVC   CTLNME,=CL8' '\n         MVC   TRGNME,=CL8' '\n         BXLE  R3,R4,*+L'*+4\n         B     INSKIP\n         CLI   0(R3),C' '\n         BNE   *-12\n         BXLE  R3,R4,*+L'*+4\n         B     INSKIP\n         CLI   0(R3),C' '\n         BE    *-12\n         LR    R2,R3\n         BXLE  R3,R4,*+L'*+4\n         B     INSKIP\n         CLI   0(R3),C' '\n         BNE   *-12\n         LR    R1,R3\n         SR    R1,R2\n         CH    R1,=H'8'\n         BH    INSKIP\n         BCT   R1,*+L'*+6\n         MVC   CTLNME(*-*),0(R2)\n         EX    R1,*-6\n         BXLE  R3,R4,*+L'*+4\n         B     INSKIP\n         CLI   0(R3),C' '\n         BE    *-12\n         LR    R2,R3\n         BXLE  R3,R4,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R3),C' '\n         BNE   *-12\n         LR    R1,R3\n         SR    R1,R2\n         CH    R1,=H'8'\n         BH    INSKIP\n         BCT   R1,*+L'*+6\n         MVC   TRGNME(*-*),0(R2)\n         EX    R1,*-6\n         CLC   CTLNME,TRGNME\n         BE    INSKIP\n         L     R1,WRKC\nINSTCL   CLI   0(R1),0\n         BE    INSTCT\n         CLC   0(L'CTLOPC+L'CTLNME,R1),CTLOPC\n         BE    INSKIP\n         LA    R1,L'CTLOPC+L'CTLNME+L'TRGNME(R1)\n         B     INSTCL\nINSTCT   MVC   0(L'CTLOPC+L'CTLNME+L'TRGNME,R6),CTLOPC\n         LA    R6,L'CTLOPC+L'CTLNME+L'TRGNME(R6)\n         B     INREAD\nINDFTN   MVC   CTLOPC(L'CTLOPC),0(R3)   SET REQUEST\n         MVC   TRGNME,=CL8' '\n         BXLE  R3,R4,*+L'*+4\n         B     INSKIP\n         CLI   0(R3),C' '\n         BNE   *-12\n         BXLE  R3,R4,*+L'*+4\n         B     INSKIP\n         CLI   0(R3),C' '\n         BE    *-12\nINDFTC   LA    R1,1+L'CTLOPC+L'CTLNME+L'TRGNME(R6)\n         CL    R1,WRKC+4\n         BH    INWCOV\n         MVC   CTLNME,=CL8' '\n         LR    R2,R3\n         BXLE  R3,R4,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R3),C' '\n         BNE   *-12\n         LR    R1,R3\n         SR    R1,R2\n         CH    R1,=H'8'\n         BH    INSKIP\n         BCT   R1,*+L'*+6\n         MVC   CTLNME(*-*),0(R2)\n         EX    R1,*-6\n         L     R1,WRKC\nINDFSC   CLI   0(R1),0\n         BE    INDFST\n         CLC   0(L'CTLOPC+L'CTLNME+L'TRGNME,R1),CTLOPC\n         BE    INDFNX\n         LA    R1,L'CTLOPC+L'CTLNME+L'TRGNME(R1)\n         B     INDFSC\nINDFST   MVC   0(L'CTLOPC+L'CTLNME+L'TRGNME,R6),CTLOPC\n         LA    R6,L'CTLOPC+L'CTLNME+L'TRGNME(R6)\nINDFNX   CLR   R3,R5\n         BNL   INREAD\n         BXLE  R3,R4,*+L'*+4\n         B     INREAD\n         CLI   0(R3),C' '\n         BE    *-12\n         B     INDFTC\nINLNKN   CLI   LNKNME,C' '         LINK NAME REQUEST\n         BNE   INSKIP\n         BXLE  R3,R4,*+L'*+4\n         B     INSKIP\n         CLI   0(R3),C' '\n         BNE   *-12\n         BXLE  R3,R4,*+L'*+4\n         B     INSKIP\n         CLI   0(R3),C' '\n         BE    *-12\n         LR    R2,R3\n         BXLE  R3,R4,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R3),C' '\n         BNE   *-12\n         LR    R1,R3\n         SR    R1,R2\n         CH    R1,=H'8'\n         BH    INSKIP\n         BCT   R1,*+L'*+6\n         MVC   LNKNME(*-*),0(R2)\n         EX    R1,*-6\n         B     INREAD\nINWCOV   LA    R2,IWCSOV\n         BAS   R7,PMRTN\n         B     INREAD\nINSKIP   LA    R2,SKIPPED\n         BAS   R7,PMRTN\n         B     INREAD\nINDATA   TM    SWITCH,SWDS\n         BO    INSERT\n         OI    SWITCH,SWDS+SWPU\n         MVC   CSNM,=CL8'NDUKU'\n         LA    R2,CSTR\n         BAS   R8,PURTN\n         B     INERR\nINSERT   MVC   CLSD(L'CLSD),CARD\n         LA    R2,CLST\n         BAS   R7,PMRTN\n         CLI   CARD,C' '\n         BNE   INPCRD\n         LM    R3,R5,SCCRD\n         CLI   0(R3),C' '\n         BNE   *+L'*+8\n         BXLE  R3,R4,*-8\n         B     INSKIP\n         CLC   0(4,R3),=C'END '\n         BE    INPEND\n         LR    R2,R3\n         BXLE  R3,R4,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R3),C' '\n         BNE   *-12\n         SR    R3,R2\n         CH    R3,=H'8'\n         BH    INSKIP\n         MVC   MACNME,=CL8' '\n         BCT   R3,*+L'*+6\n         MVC   MACNME(*-*),0(R2)\n         EX    R3,*-6\nINPCRD   LA    R2,CARD\n         BAS   R8,PURTN\n         B     INERR\n         B     INREAD\nINPEND   LA    R2,CEND\n         BAS   R8,PURTN\nINERR    NI    SWITCH,255-SWDS\n         TM    SWITCH,SWPU\n         BZ    INTST\n        $UCLOSE DDIN\n         LTR   R15,R15\n         BZ    INTST\n         MVC   MSGETY,=CL2'OC'\n         BAS   R8,PCRTN\nINTST    TM    SWITCH,SWDS\n         BZ    EXIT\n         LA    R6,1(R6)\n         ST    R6,WRKS\n         XC    WRKS+4(4),WRKS+4\n         EJECT\n*        EXECUTE THE ASSEMBLY OF THE SELECTED DSECT.\n*              DDNAME OF INPUT = SYSWK1\n*              DDNAME OF OUTPUT = SYSWK2\n         SPACE 1\n         TM    SWITCH,SWNG\n         BZ    *+L'*+10\n         MVC   DDPRT,=CL8'SYSPRINT'\n         B     *+L'*+6\n         MVC   DDPRT,=CL8'SYSWK2'\n        LINK   EP=IEV90,PARAM=(PARML,DDNML),VL=1\n         LTR   R15,R15\n         BZ    ASSDS\n         ST    R15,WORKF\n         UNPK  ADSERC(9),WORKF(5)\n         TR    ADSERC(8),HEXTR-C'0'\n         MVI   ADSERC+8,C')'\n         LA    R2,ADSERR\n         BAS   R7,PMRTN\n         B     LOOP\nASSDS    TM    SWITCH,SWNG\n         BO    LOOP\n         EJECT\n*        COLLECT THE DSECT'S SYMBOLS FROM ASSEMBLY LIST.\n*              DDNAME OF INPUT = SYSWK2\n         SPACE 1\n         NI    SWITCH,255-SWDS-SWDF-SWCR-SWRL\n         LM    R3,R5,WRKA\n         USING ITB,R3\nCDREAD  $READ  LINE,DDPRT\n         LTR   R15,R15\n         BM    CDEOF\n         BP    CDERR\n         TM    SWITCH,SWCR\n         BO    CDCRFB\n         CLC   LBL(22),=CL22'     CROSS REFERENCE  '\n         BNE   CDSST\n         OI    SWITCH,SWCR\n         LR    R5,R3               SET END\n         SL    R5,WRKA+4\n         OC    WRKS+4(4),WRKS+4    ANYTHING PENDING?\n         BZ    CDREAD              NO\nCDRSP1   L     R14,WRKS\n         NI    SWITCH,255-SWRL\nCDRSP2   CLI   0(R14),0\n         BE    CDRSP5\n         L     R3,WRKA\nCDRSP3   CLI   ITBET,ITBRSP\n         BNE   *+L'*+10\n         CLC   0(L'LBL,R14),ITBFNM\n         BE    CDRSP4\n         BXLE  R3,R4,CDRSP3\n         B     CDRSP5\nCDRSP4   LR    R15,R3\n         CLC   0+L'LBL(L'LBL,R14),ITBFNM\n         BE    *+L'*+8\n         BXLE  R3,R4,*-10\n         B     CDRSP5\n         CLI   ITBET,ITBRSP\n         BE    CDRSP5\n         MVI   0(R14),0\n         OI    SWITCH,SWRL\n         CLI   ITBET,ITBBTY\n         BNE   *+L'*+8\n         MVI   ITBET-ITB(R15),ITBBTY\n         B     *+L'*+4\n         MVI   ITBET-ITB(R15),ITBFTY\nCDRSP5   LA    R14,2*L'LBL(R14)\n         CL    R14,WRKS+4\n         BL    CDRSP2\n         L     R14,WRKS\nCDRSP6   CLI   0(R14),0            ALL SOLVED NOW?\n         BNE   CDRSP7              NO\n         LA    R14,2*L'LBL(R14)\n         CL    R14,WRKS+4\n         BL    CDRSP6\n         B     CDREAD\nCDRSP7   TM    SWITCH,SWRL\n         BO    CDRSP1\n         L     R14,WRKS\nCDRSP8   CLI   0(R14),0\n         BE    CDRSP9\n         MVC   UNRESLVN(L'LBL),0(R14)\n         ST    R14,SVSCAN\n         LA    R2,UNRESLV\n         BAS   R7,PMRTN\n         L     R14,SVSCAN\nCDRSP9   LA    R14,2*L'LBL(R14)\n         CL    R14,WRKS+4\n         BL    CDRSP8\n         L     R3,WRKA\nCDRSP10  CLI   ITBET,ITBRSP\n         BNE   *+L'*+4\n         OI    ITBET,ITBRES\n         BXLE  R3,R4,CDRSP10\n         B     CDREAD\nCDSST    CLI   LBL,C'*'\n         BE    CDREAD\n         CLC   LOC(L'LOC),=CL8' '\n         BNE   *+L'*+14\n         CLC   INC(5),=CL5' EQU '\n         BE    CDFEQU\n         B     CDREAD\n         TRT   LOC,HEXTB\n         BNZ   CDREAD\n         CLC   INC(7),=CL7' DSECT '\n         BNE   CDFLD\n         TM    SWITCH,SWDS         DSECT START\n         BZ    *+L'*+4\n         STCM  R3,B'1111',ITBDNP-ITB(R6)\n         LR    R6,R3\n         MVI   ITBET,ITBDTY\n         MVC   ITBDNM,LBL\n         OI    SWITCH,SWDS+SWDF\n         L     R15,WRKC\nCDLALS   TM    0(R15),X'FF'\n         BZ    CDNEXT\n         BO    CDLALN\n         CLI   0(R15),C'A'\n         BNE   CDLALN\n         CLC   9(L'LBL,R15),LBL\n         BE    *+L'*+8\nCDLALN   LA    R15,1+L'LBL+L'ITBDNM(R15)\n         B     CDLALS\n         BXLE  R3,R4,*+L'*+4\n         B     CDNEXT+L'CDNEXT\n         MVI   ITBET,ITBDTY        ALIAS REQUEST\n         MVC   ITBDNM(L'ITBDNM),1(R15)\n         MVI   0(R15),X'FF'\n         MVI   ITBDDS,X'FF'\n         B     CDLALN\nCDFLD    TM    SWITCH,SWDS\n         BZ    CDREAD\n         CLC   LBL,=CL8' '\n         BE    CDREAD\n         L     R15,WRKC\nCDLRQS   TM    0(R15),X'FF'\n         BZ    CDFLP\n         BO    *+L'*+18\n         CLI   0(R15),C'C'\n         BNE   *+L'*+10\n         CLC   9(L'LBL,R15),LBL\n         BE    *+L'*+8\n         LA    R15,1+L'LBL+L'ITBDNM(R15)\n         B     CDLRQS\n         STCM  R3,B'1111',ITBDNP-ITB(R6)     CREATE REQUEST\n         LR    R6,R3\n         MVI   ITBET,ITBDTY\n         MVC   ITBDNM(L'ITBDNM),1(R15)\n         MVC   ITBDDS(L'ITBDDS),LOC+2\n         MVI   0(R15),X'FF'\n         LR    R2,R3\n         BXLE  R3,R4,*+L'*+4\n         B     CDNEXT+L'CDNEXT\n         L     R15,WRKC\nCDALAD   TM    0(R15),X'FF'\n         BZ    CDFLP\n         BO    CDALAN\n         CLI   0(R15),C'A'\n         BNE   CDALAN\n         CLC   9(L'ITBDNM,R15),ITBDNM-ITB(R2)\n         BE    *+L'*+8\nCDALAN   LA    R15,1+L'LBL+L'ITBDNM(R15)\n         B     CDALAD\n         MVI   ITBET,ITBDTY        ADD ALIAS REQUEST\n         MVC   ITBDNM(L'ITBDNM),1(R15)\n         MVI   0(R15),X'FF'\n         MVI   ITBDDS,X'FF'\n         BXLE  R3,R4,CDALAN\n         B     CDNEXT+L'CDNEXT\nCDFLF    MVC   ITBFDS(L'ITBFDS),AD2+1\n         B     CDFLP+L'CDFLP\nCDFLP    MVC   ITBFDS(L'ITBFDS),LOC+2   DSECT FIELD NAME\n         MVI   ITBET,ITBFTY\n         MVC   ITBFNM,LBL\nCDNEXT   BXLE  R3,R4,CDREAD\n         LA    R2,IWASOV\n         BAS   R7,PMRTN\n         B     CDRST\nCDFEQU   TM    SWITCH,SWDS\n         BZ    CDREAD\n         CLC   LBL,=CL8' '\n         BE    CDREAD\n         LA    R14,INC+5\n         CLI   0(R14),C' '\n         BNE   *+L'*+8\n         LA    R14,1(R14)\n         B     *-12\n         CLC   0(2,R14),=C'B'''\n         BE    CDFLGP\n         CLC   0(2,R14),=C'X'''\n         BE    CDFLGP\n         LR    R15,R14\n         CLI   0(R14),C'('\n         BNE   *+L'*+8\n         LA    R14,1(R14)\n         B     *-12\n         CLI   0(R14),C'*'\n         BE    CDFLF\n         CLI   0(R15),C'0'\n         BNL   CDFLGP\n         LR    R15,R14\nCDANAL   CLI   0(R15),C' '\n         BE    CDALGET\n         CLI   0(R15),C'-'\n         BE    CDALGET\n         CLI   0(R15),C'+'\n         BE    CDALGET\n         CLI   0(R15),C','\n         BE    CDALGET\n         LA    R15,1(R15)\n         B     CDANAL\nCDALGET  MVC   TRGNME,=CL8' '\n         SLR   R15,R14\n         BCT   R15,*+L'*+6\n         MVC   TRGNME(*-*),0(R14)\n         EX    R15,*-6\n         LR    R5,R3\n         L     R3,WRKA\nCDALOOP  CLI   ITBET,ITBRSP\n         BE    *+L'*+10\n         CLC   ITBFNM,TRGNME\n         BE    CDANALF\n         BXLE  R3,R4,CDALOOP\n         LR    R3,R5\n         L     R5,WRKA+8\n         ICM   R14,B'1111',WRKS+4\n         BNZ   *+L'*+4\n         L     R14,WRKS\n         LA    R15,2*L'LBL(R14)\n         CL    R15,WRKC+4\n         BH    CDUNRSV\n         MVC   0(L'LBL,R14),LBL\n         MVC   0+L'LBL(L'LBL,R14),TRGNME\n         ST    R15,WRKS+4\n         MVI   ITBET,ITBRSP\n         B     CDFLGP+L'CDFLGP\nCDUNRSV  LA    R2,IWCSOV\n         BAS   R7,PMRTN\n         MVC   UNRESLVN,LBL\n         LA    R2,UNRESLV\n         BAS   R7,PMRTN\n         B     CDREAD\nCDANALF  CLI   ITBET,ITBBTY\n         LR    R3,R5\n         L     R5,WRKA+8\n         BNE   CDFLF\nCDFLGP   MVI   ITBET,ITBBTY        DSECT FLAG NAME\n         MVC   ITBBNM,LBL\n         MVC   ITBBVL(L'ITBBVL),AD2+1\n         B     CDNEXT\nCDERR    MVC   MSGETY,=CL2'IN'\n         MVC   MSGEDD,DDPRT\n         BAS   R8,EMRTN\nCDRST    NI    SWITCH,255-SWDS\n         B     CDEOF\nCDCRFB   CLI   SLN,C'0'\n         BNE   CDREAD\n         CLC   SYM,=CL8' '\n         BE    CDREAD\n         L     R3,WRKA\nCDSCN    CLI   ITBET,ITBFTY\n         BE    *+L'*+8\n         CLI   ITBET,ITBBTY\n         BNE   *+L'*+10\n         CLC   SYM,ITBFNM OR ITBBNM\n         BE    *+L'*+8\n         BXLE  R3,R4,CDSCN\n         B     CDREAD\n         L     R15,WRKC\nCDFRSC   TM    0(R15),X'FF'\n         BZ    CDSSL\n         BO    *+L'*+18\n         CLI   0(R15),C'F'\n         BNE   *+L'*+10\n         CLC   1(L'ITBBNM,R15),ITBBNM\n         BE    *+L'*+8\n         LA    R15,1+L'LBL+L'LBL(R15)\n         B     CDFRSC\n         MVI   ITBET,ITBFTY        SET AS FIELD WITH ZERO LENGTH\n         MVC   ITBFLG(L'ITBFLG),=CL4'0000' OR ITBBLG\n         MVI   0(R15),X'FF'\n         B     CDREAD\nCDSSL    MVC   ITBFLG(L'ITBFLG),SLN+1 OR ITBBLG\n         B     CDREAD\nCDEOF   $RCLOSE DDPRT\n         LTR   R15,R15\n         BZ    CDTST\n         NI    SWITCH,255-SWDS\n         MVC   MSGETY,=CL2'IC'\n         MVC   MSGEDD,DDPRT\n         BAS   R8,EMRTN\nCDTST    TM    SWITCH,SWDS+SWDF\n         BO    GNDST\n         TM    SWITCH,SWDF\n         BO    LOOP\n         LA    R2,NODSCT\n         BAS   R7,PMRTN\n         B     LOOP\n         EJECT\n*        GENERATE THE DSECT'S TABLE SOURCE MODULE.\n*              DDNAME OF OUTPUT = SYSWK3\n         SPACE 1\nGNDST    MVC   DDIN,=CL8'SYSWK3'\n         ZAP   SEQN,=PL1'+0'\n         NI    SWITCH,255-SWDS-SWDC-SWMV\n         MVC   CDCR,=CL8' '\n         XC    ADJVAL,ADJVAL\n         L     R3,WRKA\n         CLI   LNKNME,C' '         START OF MODULE\n         BE    *+L'*+10\n         MVC   MEMBR,LNKNME\n         B     *+L'*+6\n         MVC   MEMBR,ITBDNM\n         MVC   CTDN,MEMBR\n         MVI   CTNM,C' '\n         MVC   CTNM+1(L'CTNM-1),CTNM\n         MVC   CTNM(L'ITBDNM),ITBDNM\n         LA    R1,CTNM+L'ITBDNM-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   2(13,R1),=CL13'DSECT TABLE.'''\n         LA    R2,CTIT\n         BAS   R8,PURTN\n         B     GNERR\n         MVC   CSNM,ITBDNM\n         LA    R2,CSTR\n         BAS   R8,PURTN\n         B     GNERR\n         LA    R2,CSPC\n         BAS   R8,PURTN\n         B     GNERR\n         MVC   CIDN,MACNME\n         LA    R2,CIDT\n         BAS   R8,PURTN\n         B     GNERR\n         B     GNSTR\nGNMOD    TM    SWITCH,SWMV\n         BZ    GNNORM\n         CLI   ITBET,ITBBTY\n         BE    GNGEN\n         ST    R3,SVINS3\n         B     GNINS1\nGNNORM   TM    ITBET,ITBRES\n         BO    GNNEXT\n         CLI   ITBET,ITBDTY\n         BNE   GNGEN\n         CLI   ITBDDS,X'FF'\n         BE    GNALS\n         TM    SWITCH,SWDC\n         BZ    *+L'*+8\nGNRST    L     R3,SVSCAN\n         NI    SWITCH,255-SWDC\n         LR    R2,R6\nGNNSC    ICM   R1,B'1111',ITBDNP-ITB(R2)\n         BZ    GNCLS\n         CLC   ITBDNM-ITB(L'ITBDNM,R6),ITBDNM-ITB(R1)\n         BE    *+L'*+6\n         LR    R2,R1\n         B     GNNSC\n         MVC   ITBDNP-ITB(L'ITBDNP,R2),ITBDNP-ITB(R1)\n         ST    R3,SVSCAN\n         OI    SWITCH,SWDC\n         LR    R3,R1\n         OI    ITBET,ITBRES\n         B     GNNEXT\nGNCLS    XC    ADJVAL,ADJVAL\n         LA    R2,CDCL             CLOSE A DSECT\n         BAS   R8,PURTN\n         B     GNERR\nGNSTR    LA    R2,CSPC             START A DSECT\n         BAS   R8,PURTN\n         B     GNERR\n         TM    SWITCH,SWDS\n         BZ    *+L'*+6\n         MVC   CDCR,ITBDNM\n         OI    SWITCH,SWDS\n         LR    R6,R3\n         MVI   CDNX,C' '\n         MVC   CDNX+1(L'CDNX-1),CDNX\n         LA    R2,CDNX\n         MVC   0(11,R2),=CL11'AL1(0),CL8'''\n         MVC   11(L'ITBDNM,R2),ITBDNM\n         LA    R2,11(R2)\nGNSTR0   CLI   0(R2),C' '\n         BE    *+L'*+8\n         LA    R2,1(R2)\n         B     GNSTR0\n         CLI   ITBDDS,0\n         BNE   *+L'*+14\n         MVC   0(13,R2),=CL13''',XL4''0'',AL4('\n         LA    R2,13(R2)\n         B     GNSTR1\n         MVC   0(10,R2),=CL10''',XL4''0000'\n         MVC   10(L'ITBDDS,R2),ITBDDS\n         MVC   10+L'ITBDDS(6,R2),=CL6''',AL4('\n         LA    R2,16+L'ITBDDS(R2)\nGNSTR1   ICM   R1,B'1111',ITBDNP\n         BNZ   GNSTR2\n         MVC   0(3,R2),=CL3'*-*'\n         LA    R2,3(R2)\n         B     GNSTR3\nGNSTR2   MVC   0(L'ITBDNM,R2),ITBDNM-ITB(R1)\n         CLI   0(R2),C' '\n         BE    GNSTR3\n         LA    R2,1(R2)\n         B     GNSTR2+L'GNSTR2\nGNSTR3   MVI   0(R2),C')'\n         XR    R0,R0\n         CLI   ITBDDS,0\n         BE    GNSTR5\n         LA    R1,ITBDDS\n         LA    R2,15\n         LA    R14,L'ITBDDS\n         LR    R15,R0\nGNSTR4   IC    R15,0(R1)\n         NR    R15,R2\n         TM    0(R1),C'0'\n         BO    *+L'*+4\n         LA    R15,9(R15)\n         SLL   R0,4\n         OR    R0,R15\n         LA    R1,1(R1)\n         BCT   R14,GNSTR4\nGNSTR5   ST    R0,ADJVAL\n         LA    R2,CDST\n         BAS   R8,PURTN\n         B     GNERR\n         B     GNNEXT\nGNALS    MVI   CALX,C' '\n         MVC   CALX+1(L'CALX-1),CALX\n         LA    R2,CALX\n         MVC   0(11,R2),=CL11'AL1(0),CL8'''\n         MVC   11(L'ITBDNM,R2),ITBDNM\n         LA    R2,11(R2)\nGNALS0   CLI   0(R2),C' '\n         BE    *+L'*+8\n         LA    R2,1(R2)\n         B     GNALS0\n         LA    R14,CDNX+11\nGNALS1   CLI   0(R14),C''''\n         BE    *+L'*+8\n         LA    R14,1(R14)\n         B     GNALS1\n         LA    R15,CDNX+L'CDNX-9\n         CLI   0(R15),C' '\n         BNE   *+L'*+4\n         BCT   R15,*-8\n         SLR   R15,R14\n         B     *+L'*+6\n         MVC   0(*-*,R2),0(R14)\n         EX    R15,*-6\n         LA    R2,CALS\n         BAS   R8,PURTN\n         B     GNERR\n         B     GNNEXT\nGNGEN    L     R1,WRKC\n         TM    0(R1),X'FF'\n         BZ    GNFLD\n         BO    *+L'*+18\n         CLI   0(R1),C'D'\n         BNE   *+L'*+10\n         CLC   ITBFNM(L'ITBFNM),1(R1) OR ITBBNM\n         BE    *+L'*+8\n         LA    R1,1+L'LBL+L'LBL(R1)\n         B     GNGEN+L'GNGEN\n         MVI   0(R1),X'FF'         DELETE REQUEST\n         B     GNTRES\nGNFLD    CLI   ITBET,ITBFTY\n         BNE   GNFLG\n         MVC   CLNM,ITBFNM         DEFINE A DSECT FIELD\n         OC    ADJVAL,ADJVAL\n         BZ    GNFLD2\n         XR    R0,R0\n         LA    R1,ITBFDS\n         LA    R2,15\n         LA    R14,L'ITBFDS\n         LR    R15,R0\nGNFLD1   IC    R15,0(R1)\n         NR    R15,R2\n         TM    0(R1),C'0'\n         BO    *+L'*+4\n         LA    R15,9(R15)\n         SLL   R0,4\n         OR    R0,R15\n         LA    R1,1(R1)\n         BCT   R14,GNFLD1\n         SL    R0,ADJVAL\n         LA    R2,L'CVAL\n         SRDL  R0,4\n         SRL   R1,4\n         BCT   R2,*-8\n         STCM  R1,B'1111',CVAL\n         TR    CVAL,HEXTR\n         B     GNFLD2+L'GNFLD2\nGNFLD2   MVC   CVAL,ITBFDS\n         MVC   CLEN,ITBFLG\n         MVI   CFTY,C'1'\n         L     R1,WRKC\nGNFLD3   TM    0(R1),X'FF'\n         BZ    GNOUTF\n         BO    GNFLD4\n         CLI   0(R1),C'M'\n         BNE   GNFLD4\n         CLC   ITBFNM(L'ITBFNM),1(R1)\n         BE    GNSKP\n         CLC   ITBFNM(L'ITBFNM),9(R1)\n         BE    GNINS\nGNFLD4   LA    R1,1+L'LBL+L'LBL(R1)\n         B     GNFLD3\nGNSKP    LA    R2,CFLD\n         BAS   R8,PURTN\n         B     GNERR\nGNSKP1   TM    SWITCH,SWDC\n         BZ    *+L'*+4\n         OI    ITBET,ITBRES\n         BXLE  R3,R4,*+L'*+4\n         B     GNNEXT+L'GNNEXT\n         CLI   ITBET,ITBBTY\n         BE    GNSKP1\n         B     GNMOD\nGNINS    ST    R1,SVINS1\n         LA    R2,CFLD\n         BAS   R8,PURTN\n         B     GNERR\n         TM    SWITCH,SWDC\n         BZ    *+L'*+4\n         OI    ITBET,ITBRES\n         ST    R3,SVINS3\n         L     R3,WRKA\nGNINS1   CLI   ITBET,ITBFTY\n         BE    *+L'*+8\n         CLI   ITBET,ITBRES+ITBFTY\n         BNE   GNINS4\n         L     R1,SVINS1\n         L     R15,WRKC\nGNINS2   TM    0(R15),X'FF'\n         BZ    GNINS4\n         BO    GNINS3\n         CLI   0(R15),C'M'\n         BNE   GNINS3\n         CLC   9(L'LBL,R15),9(R1)\n         BNE   GNINS3\n         CLC   1(L'ITBFNM,R15),ITBFNM\n         BE    GNINS5\nGNINS3   LA    R15,1+L'LBL+L'LBL(R15)\n         B     GNINS2\nGNINS4   BXLE  R3,R4,GNINS1\n         L     R3,SVINS3\n         TM    SWITCH,SWMV\n         BZ    GNNEXT\n         NI    SWITCH,255-SWMV\n         B     GNNORM\nGNINS5   TM    SWITCH,SWMV\n         BO    GNINS10\n         CL    R3,SVINS3\n         BL    GNINS10\n         OI    SWITCH,SWMV\n         L     R3,SVINS3\n         B     GNNEXT\nGNINS10  MVI   0(R15),X'FF'\nGNINS11  BXLE  R3,R4,*+L'*+4\n         B     GNINS4+L'GNINS4\n         CLI   ITBET,ITBBTY\n         BE    *+L'*+8\n         CLI   ITBET,ITBRES+ITBBTY\n         BNE   GNINS15\n         L     R1,WRKC\nGNINS12  TM    0(R1),X'FF'\n         BZ    GNINS13\n         BO    *+L'*+18\n         CLI   0(R1),C'D'\n         BNE   *+L'*+10\n         CLC   ITBBNM(L'ITBBNM),1(R1)\n         BE    *+L'*+8\n         LA    R1,1+L'LBL+L'LBL(R1)\n         B     GNINS12\n         MVI   0(R1),X'FF'         DELETE REQUEST\n         B     GNINS14\nGNINS13  MVC   CLNM,ITBBNM         DEFINE A DSECT FLAG\n         MVC   CVAL,ITBBVL\n         MVC   CLEN,ITBBLG\n         MVI   CFTY,C'2'\n         LA    R2,CFLD\n         BAS   R8,PURTN\n         B     GNERR\nGNINS14  TM    SWITCH,SWDC+SWMV\n         BZ    GNINS11\n         OI    ITBET,ITBRES\n         B     GNINS11\nGNINS15  L     R1,SVINS1\n         L     R15,WRKC\nGNINS16  TM    0(R15),X'FF'\n         BZ    GNINS4+L'GNINS4\n         BO    GNINS17\n         CLI   0(R15),C'M'\n         BNE   GNINS17\n         CLC   9(L'LBL,R15),9(R1)\n         BE    GNINS1\nGNINS17  LA    R15,1+L'LBL+L'LBL(R15)\n         B     GNINS16\nGNFLG    MVC   CLNM,ITBBNM         DEFINE A DSECT FLAG\n         MVC   CVAL,ITBBVL\n         MVC   CLEN,ITBBLG\n         MVI   CFTY,C'2'\nGNOUTF   LA    R2,CFLD\n         BAS   R8,PURTN\n         B     GNERR\nGNTRES   TM    SWITCH,SWDC\n         BZ    GNNEXT\n         OI    ITBET,ITBRES\n         DROP  R3\nGNNEXT   BXLE  R3,R4,GNMOD\n         TM    SWITCH,SWDC\n         BO    GNRST\n         LA    R2,CDCL             CLOSE THE LAST DSECT\n         BAS   R8,PURTN\n         B     GNERR\n         LA    R2,CSPC             END OF MODULE\n         BAS   R8,PURTN\n         B     GNERR\n         LA    R2,CEND\n         BAS   R8,PURTN\nGNERR    NI    SWITCH,255-SWDS\n        $UCLOSE DDIN\n         LTR   R15,R15\n         BZ    GNTST\n         NI    SWITCH,255-SWDS\n         MVC   MSGETY,=CL2'OC'\n         BAS   R8,PCRTN\nGNTST    TM    SWITCH,SWDS\n         BZ    LOOP\n         EJECT\n*        EXECUTE THE ASSEMBLY OF THE DSECT'S TABLE MODULE.\n*              DDNAME OF INPUT = SYSWK3\n*              DDNAME OF OUTPUT = SYSPRINT (LIST)\n*                                 SYSLIN (OBJECT)\n         SPACE 1\n         MVC   DDPRT,=CL8'SYSPRINT'\n        LINK   EP=IEV90,PARAM=(PARMX,DDNML),VL=1\n         LTR   R15,R15\n         BZ    LKED\n         ST    R15,WORKF\n         UNPK  ATBERC(9),WORKF(5)\n         TR    ATBERC(8),HEXTR-C'0'\n         MVI   ATBERC+8,C')'\n         LA    R2,ATBERR\n         BAS   R7,PMRTN\n         B     LOOP\n         EJECT\n*        EXECUTE THE LINK-EDIT OF THE DSECT'S TABLE MODULE.\n         SPACE 1\nLKED     TM    SWITCH,SWNL\n         BO    LOOP\n        LINK   EP=HEWL,PARAM=(PARMLK,DDNMLK),VL=1\n         LTR   R15,R15\n         BZ    LKEXQ\n         ST    R15,WORKF\n         UNPK  LNKERC(9),WORKF(5)\n         TR    LNKERC(8),HEXTR-C'0'\n         MVI   LNKERC+8,C')'\n         MVC   LNKMNM,MEMBR\n         LA    R2,LNKERR\n         BAS   R7,PMRTN\n         B     LOOP\nLKEXQ    MVC   MPRMNM,MEMBR\n         LA    R2,MPRMSG\n         BAS   R7,PMRTN\n         EJECT\n*        ADD THE ALIASES IF ANY IN THE DSECT'S TABLE MODULE.\n         SPACE 1\n         L     R3,WRKA\n         USING ITB,R3\n         NI    SWITCH,255-SWAL\nALSTST   CLI   ITBET,ITBDTY\n         BNE   NOTALS\n         CLC   ITBDNM,MEMBR\n         BE    NOTALS\n         TM    SWITCH,SWAL\n         BO    ALSADD\n        OPEN   (PDS,UPDAT)\n         TM    PDS+(DCBOFLGS-IHADCB),DCBOFOPN\n         BO    ALSBLD\n         LA    R2,PDSMSG\n         BAS   R7,PMRTN\n         B     LOOP\nALSBLD   OI    SWITCH,SWAL\n         MVC   BLDLNME,MEMBR\n         XC    BLDLUSR,BLDLUSR\n        BLDL   PDS,BLDLLIST\n         LTR   R15,R15\n         BZ    ALSFND\n         ST    R15,WORKF\n         UNPK  BLDMSGR(9),WORKF(5)\n         TR    BLDMSGR(8),HEXTR-C'0'\n         MVI   BLDMSGR+8,C'/'\n         ST    R0,WORKF\n         UNPK  BLDMSGC(9),WORKF(5)\n         TR    BLDMSGC(8),HEXTR-C'0'\n         MVI   BLDMSGC+8,C' '\n         LA    R2,BLDMSG\n         BAS   R7,PMRTN\n         B     NOTALS+L'NOTALS\nALSFND   MVC   STOWTTR,BLDLTTR     BUILD THE STOW LIST WITH INFO\n         XC    STOWUSR,STOWUSR       FROM BLDL LIST\n         CLI   BLDLIND,X'2C'\n         BE    USRBLD\n         UNPK  BLIMSGI(3),BLDLIND(2)\n         TR    BLIMSGI(2),HEXTR-C'0'\n         MVI   BLIMSGI+2,C''''\n         LA    R2,BLIMSG\n         BAS   R7,PMRTN\n         B     NOTALS+L'NOTALS\nUSRBLD   MVI   STOWIND,X'B1'\n         MVC   STOWUSR(21),BLDLUSR\n         MVC   STOWUSR+21(3),BLDLUSR+15\n         MVC   STOWUSR+24(8),BLDLNME\n         MVC   STOWUSR+32(2),BLDLUSR+21\nALSADD   MVC   STOWNME,ITBDNM\n         XR    R15,R15\n        STOW   PDS,STOWLIST,A\n         LTR   R15,R15\n         BNZ   ALSFLD\n         MVC   ALSNME,STOWNME\n         LA    R2,ALSMSG\n         BAS   R7,PMRTN\n         B     NOTALS\nALSFLD   ST    R15,WORKF\n         UNPK  ALSERC(9),WORKF(5)\n         TR    ALSERC(8),HEXTR-C'0'\n         MVI   ALSERC+8,C')'\n         MVC   ALSERM,STOWNME\n         LA    R2,ALSERR\n         BAS   R7,PMRTN\nNOTALS   BXLE  R3,R4,ALSTST\n         TM    SWITCH,SWAL\n         BZ    LOOP\n        CLOSE  PDS\n         B     LOOP\n         DROP  R3\n         EJECT\n*        PROCESSING TERMINATION.\n         SPACE 1\nEXIT    $RCLOSE\n         ST    R15,RETCC\n         L     R2,=A(DDWK3)\n         BAS   R8,DFRTN\n         NOP   0\nEXWK3    L     R2,=A(DDWK2)\n         BAS   R8,DFRTN\n         NOP   0\nEXWK2    L     R2,=A(DDWK1)\n         BAS   R8,DFRTN\n         NOP   0\nEXWK1    L     R2,=A(DDUT1)\n         BAS   R8,DFRTN\n         NOP   0\nEXUT1    L     R2,=A(DDLIN)\n         BAS   R8,DFRTN\n         NOP   0\nEXLIN    L     R0,WRKCL\n         L     R1,WRKC\n        FREEMAIN R,A=(1),LV=(0)\n         L     R0,WRKAL\n         L     R1,WRKA\n        FREEMAIN R,A=(1),LV=(0)\nEXPFE   $PCLOSE\n         L     R15,RETCC\n        $XRET  CC=(R15)\n         EJECT\n*        DYNAMIC ALLOCATION ROUTINE.\n         SPACE 1\n         USING DYNLIST,R2\nDFRTN    XC    DSNAME(L'DSNAME),DSNAME\nDARTN   $DYNALL (R2)\n         LTR   R15,R15\n         BZ    4(R8)\n         MVC   DYNEDD,DDNAME\n         CLI   DSNAME,0\n         BE    *+L'*+10\n         MVC   DYNETY,=CL4'ALL.'\n         B     *+L'*+6\n         MVC   DYNETY,=CL4'FREE'\n         ST    R0,WORKF\n         UNPK  DYNER0(9),WORKF(5)\n         TR    DYNER0(8),HEXTR-C'0'\n         MVI   DYNER0+8,C'/'\n         ST    R15,WORKF\n         UNPK  DYNERF(9),WORKF(5)\n         TR    DYNERF(8),HEXTR-C'0'\n         MVI   DYNERF+8,C')'\n         DROP  R2\n         LA    R2,DYNERR\n         BAS   R7,PMRTN\n         BR    R8\n         EJECT\n*        PUNCH CARD ROUTINE.\n         SPACE 1\nPURTN    AP    SEQN,=PL1'+1'\n         UNPK  72(8,R2),SEQN\n         OI    79(R2),C'0'\n        $PUNCH (R2),,DDIN\n         LTR   R15,R15\n         BZ    4(R8)\n         MVC   MSGETY,=CL2'OU'\nPCRTN    MVC   MSGEDD,DDIN\n         SPACE 1\n*        ERROR MESSAGE ROUTINE.\n         SPACE 1\nEMRTN    ST    R15,WORKF\n         UNPK  MSGERF(9),WORKF(5)\n         TR    MSGERF(8),HEXTR-C'0'\n         MVI   MSGERF+8,C')'\n         LA    R2,MSGERR\n         BAS   R7,PMRTN\n         BR    R8\n         EJECT\n*        PRINT/LOG MESSAGE ROUTINE.\n         SPACE 1\nPMRTN    TM    SWITCH,SWPE\n         BO    PMRTN2+L'PMRTN2\n         CP    NLN,=PL2'+50'\n         BNH   PMRTN1\n         ZAP   NLN,=PL1'+0'\n         AP    NPG,=PL1'+1'\n         MVC   PTITNP,=XL4'40202120'\n         ED    PTITNP,NPG\n        $PRINT PTIT,,DDMSG\n         LTR   R15,R15\n         BNZ   PMRTN2\n         MVI   0(R2),C'0'\nPMRTN1   AP    NLN,=PL1'+1'\n        $PRINT (R2),,DDMSG\n         MVI   0(R2),C' '\n         LTR   R15,R15\n         BZR   R7\nPMRTN2   OI    SWITCH,SWPE\n         BCTR  R2,0\n         XR    R1,R1\n         IC    R1,0(R2)\n         LA    R2,1(R2)\n         CLI   0(R2),C' '\n         BNE   *+L'*+6\n         BCT   R1,*-12\n         BR    R7\n         LA    R14,80\n         CLR   R1,R14\n         BNH   *+L'*+2\n         LR    R1,R14\n         MVI   PMERR+4,C' '\n         MVC   PMERR+5(79),PMERR+4\n         BCT   R1,*+L'*+6\n         MVC   PMERR+4(*-*),0(R2)\n         EX    R1,*-6\n        WTO    MF=(E,PMERR)\n         BR    R7\n         SPACE 1\nPMERR   WTO    '----+----1----+----2----+----3----+----4----+----5----+1\n               ----6----+----7----+----8',ROUTCDE=11,DESC=7,MF=L\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n         SPACE 1\nWRKA     DC    A(*-*,ITBL,*-*)\nWRKAL    DC    F'0'\nWRKC     DC    A(*-*,*-*)\nWRKCL    DC    F'0'\nWRKS     DC    2F'0'\nRETCC    DC    F'0'\nSVSCAN   DC    F'0'\nSVINS1   DC    F'0'\nSVINS3   DC    F'0'\nSCCRD    DC    A(CARD+1,1,CARD+71)\n        CNOP   2,4\nPARML    DC    0H'0',AL2(L'PARMT)  ASS.H 1ST PARM. LIST\nPARMT    DC    C'XREF,NODECK,NOOBJECT'\n        CNOP   2,4\nPARMX    DC    0H'0',AL2(L'PARMS)  ASS.H 2ND PARM. LIST\nPARMS    DC    C'XREF(SHORT),NODECK,OBJECT'\n        CNOP   2,4\nPARMLK   DC    0H'0',AL2(L'PARMLKT)     LINK-EDIT PARM. LIST\nPARMLKT  DC    C'SIZE=(384K,96K),XREF,LIST,OL'\n        CNOP   0,8\nWORKF    DC    F'0',H'0'\nDDNML    DC    0H'0',AL2(DDNMLE)   ASS.H DD-NAMES LIST\n         DC    XL8'0'              1 = SYSLIN\n         DC    XL8'0'              2\n         DC    XL8'0'              3\n         DC    XL8'0'              4 = SYSLIB\nDDIN     DC    XL8'0'              5 = SYSIN\nDDPRT    DC    XL8'0'              6 = SYSPRINT\n         DC    XL8'0'              7 = SYSPUNCH\n         DC    XL8'0'              8 = SYSUT1\n         DC    XL8'0'              9 = SYSTERM\nDDNMLE   EQU   *-(DDNML+L'DDNML)\n        CNOP   0,8\nADJVAL   DC    F'0',H'0'\nDDNMLK   DC    0H'0',AL2(DDNMLKE)  LINK-EDIT DD-NAMES LIST\n         DC    XL8'0'              1 = SYSLIN\nMEMBR    DC    XL8'0'              2 = MEMBER NAME\n         DC    XL8'0'              3 = SYSLMOD\n         DC    XL8'0'              4 = SYSLIB\n         DC    XL8'0'              5 =\n         DC    XL8'0'              6 = SYSPRINT\n         DC    XL8'0'              7 =\n         DC    XL8'0'              8 = SYSUT1\n         DC    XL8'0'              9 =\n         DC    XL8'0'              10 =\n         DC    XL8'0'              11 =\n         DC    XL8'0'              12 = SYSTERM\nDDNMLKE  EQU   *-(DDNMLK+L'DDNMLK)\n         EJECT\nBLDLLIST DC    0F'0',AL2(1,BLDLLEN)\nBLDLNME  DC    CL8' '\nBLDLTTR  DC    XL3'0',XL2'0'\nBLDLIND  DC    XL1'0'\nBLDLUSR  DC    XL62'0'\nBLDLLEN  EQU   *-BLDLNME\n         SPACE 1\nSTOWLIST DS    0F\nSTOWNME  DC    CL8' '              ALIAS NAME\nSTOWTTR  DC    XL3'0'              TTR\nSTOWIND  DC    XL1'0'\nSTOWUSR  DC    XL80'0'\n         SPACE 1\n        PRINT  NOGEN\nPDS     DCB    DDNAME=SYSLMOD,DSORG=PO,MACRF=(R)\n        PRINT  GEN\nDDMSG    DC    CL8'SYSMSG'\nMACNME   DC    CL8' '\nLNKNME   DC    CL8' '\nHEXTR    DC    CL16'0123456789ABCDEF'\nHEXTB    DC    12XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    XL16'FF000000000000FFFFFFFFFFFFFFFFFF'       A-F\n         DC    2XL16'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    XL16'00000000000000000000FFFFFFFFFFFF'       0-9\nNPG      DC    PL2'+0'\nNLN      DC    PL2'+99'\nSEQN     DC    PL5'+0'\nSWITCH   DC    XL1'0'\nSWDS     EQU   X'80'               A DSECT IS ACTIVE\nSWAL     EQU   X'80'               AN ALIAS EXIST\nSWDF     EQU   X'40'               A DSECT HAS BEEN FOUND\nSWDC     EQU   X'40'               A DSECT CONTINUATION FOUND\nSWCR     EQU   X'20'               CROSS REFERENCE SECTION\nSWMV     EQU   X'20'               MOVE PROCESSING PENDING\nSWRL     EQU   X'10'               RESOLVE LOOP CONTROL\nSWPU     EQU   X'08'               PUNCH FILE ACTIVE\nSWNG     EQU   X'04'               SUPPRESS GENERATE\nSWNL     EQU   X'02'               SUPPRESS LINK-EDIT\nSWPE     EQU   X'01'               ERROR ON SYSMSG OCCURED\nCTLOPC   DC    CL1' '\nCTLNME   DC    CL8' '\nTRGNME   DC    CL8' '\n         EJECT\nLINE     DS    0CL121\n         DC    CL1' '\nSYM      DS    0CL8\nLOC      DC    CL6' ',CL3' '\nSLN      DC    CL5' ',CL14' '\nAD2      DC    CL5' ',CL7' '\nLBL      DC    CL8' '\nINC      DC    CL72' '\n         DC    AL1(L'CARD)\nCARD     DC    CL80' '\n         SPACE 1\n         DC    AL1(L'CTIT)\nCTIT     DS    0CL80\nCTDN     DC    CL8' ',CL17' TITLE ''GENERATE '\nCTNM     DC    CL55' '\n         DC    AL1(L'CSTR)\nCSTR     DS    0CL80\nCSNM     DC    CL8' '\n         DC    CL72' START 0'\n         DC    AL1(L'CIDT)\nCIDT     DS    0CL80\n         DC    CL19'         DC    CL8'''\nCIDN     DC    CL8' '\n         DC    CL53''',C'' '',CL8''&&SYSDATE'',C'' '',CL6''&&SYSTIME'''\n         DC    AL1(L'CFLD)\nCFLD     DS    0CL80\n         DC    CL19'         DC    AL1('\nCFTY     DC    CL1' ',CL6'),CL8'''\nCLNM     DC    CL8' ',CL6''',XL2'''\nCVAL     DC    CL4' ',CL6''',AL2('\nCLEN     DC    CL4' ',CL26') '\n         DC    AL1(L'CDST)\nCDST     DS    0CL80\nCDCR     DC    CL8' ',CL7' DC '\nCDNX     DC    CL65' '\n         DC    AL1(L'CALS)\nCALS     DS    0CL80\n         DC    CL8' ',CL7' DC '\nCALX     DC    CL65' '\n         DC    AL1(L'CSPC)\nCSPC     DC    CL80'         SPACE 1'\n         DC    AL1(L'CDCL)\nCDCL     DC    CL80'         DC    AL1(255)'\n         DC    AL1(L'CEND)\nCEND     DC    CL80'         END'\n         EJECT\n         DC    AL1(LPTIT)\nPTIT     DC    CL112'1GDTU - GENERATE DSECT''S TABLES UTILITY.'\n         DC    CL4'PAGE'\nPTITNP   DC    CL4' ',C'.'\nLPTIT    EQU   *-PTIT\n         DC    AL1(LPFMERR)\nPFMERR   DC    CL11' ',C'PARM.FIELD ERROR DETECTED AT : '\nPFMFLD   DC    CL20' '\nLPFMERR  EQU   *-PFMERR\n         DC    AL1(LADSERR)\nADSERR   DC    CL11' ',C'ASSEMBLY DSECT ERROR (R15='\nADSERC   DC    CL10' '\nLADSERR  EQU   *-ADSERR\n         DC    AL1(LCLST)\nCLST     DC    CL6' ',C'I -> '\nCLSD     DC    CL72' '\nLCLST    EQU   *-CLST\n         DC    AL1(LUNKNOWN)\nUNKNOWN  DC    CL11' ',C'UNKNOWN CONTROL CARD'\nLUNKNOWN EQU   *-UNKNOWN\n         DC    AL1(LIWCSOV)\nIWCSOV   DC    CL11' ',C'INTERNAL WORK-CONTROL SPACE OVERFLOW'\nLIWCSOV  EQU   *-IWCSOV\n         DC    AL1(LSKIPPED)\nSKIPPED  DC    CL11' ',C'SKIPPED CONTROL CARD'\nLSKIPPED EQU   *-SKIPPED\n         DC    AL1(LIWASOV)\nIWASOV   DC    CL11' ',C'INTERNAL WORK-AREAS SPACE OVERFLOW'\nLIWASOV  EQU   *-IWASOV\n         DC    AL1(LUNRESLV)\nUNRESLV  DC    CL11' ',C'UNRESOLVED NAME : '\nUNRESLVN DC    CL8' ',C' - BYPASSED (EXPRESSION TOO COMPLEX)'\nLUNRESLV EQU   *-UNRESLV\n         DC    AL1(LNODSCT)\nNODSCT   DC    CL11' ',C'NO DSECT''S SYMBOLS COLLECTED'\nLNODSCT  EQU   *-NODSCT\n         DC    AL1(LATBERR)\nATBERR   DC    CL11' ',C'ASSEMBLY TABLE ERROR (R15='\nATBERC   DC    CL10' '\nLATBERR  EQU   *-ATBERR\n         DC    AL1(LLNKERR)\nLNKERR   DC    CL11' ',C'LINK-EDIT ERROR (R15='\nLNKERC   DC    CL10' ',C'/ MODULE : '\nLNKMNM   DC    CL8' '\nLLNKERR  EQU   *-LNKERR\n         DC    AL1(LMPRMSG)\nMPRMSG   DC    CL11' ',C'PROCESSED DSECT TABLE : '\nMPRMNM   DC    CL8' '\nLMPRMSG  EQU   *-MPRMSG\n         DC    AL1(LPDSMSG)\nPDSMSG   DC    CL11' ',C'OPEN ERROR / UNABLE TO ADD ALIAS(ES)'\nLPDSMSG  EQU   *-PDSMSG\n         DC    AL1(LBLDMSG)\nBLDMSG   DC    CL11' ',C'BLDL ERROR : R15='\nBLDMSGR  DC    CL9' ',C'R0='\nBLDMSGC  DC    CL10' '\nLBLDMSG  EQU   *-BLDMSG\n         DC    AL1(LBLIMSG)\nBLIMSG   DC    CL11' ',C'UNEXPECTED INDICATOR BYTE : X'''\nBLIMSGI  DC    CL3' ',C' IN PLACE OF X''2C'''\nLBLIMSG  EQU   *-BLIMSG\n         DC    AL1(LALSMSG)\nALSMSG   DC    CL11' ',C'          ALIAS ADDED : '\nALSNME   DC    CL8' '\nLALSMSG  EQU   *-ALSMSG\n         DC    AL1(LALSERR)\nALSERR   DC    CL11' ',C'ADD ALIAS ERROR (R15='\nALSERC   DC    CL10' ',C'/ ALIAS : '\nALSERM   DC    CL8' '\nLALSERR  EQU   *-ALSERR\n         DC    AL1(LDYNERR)\nDYNERR   DC    CL11' '\nDYNEDD   DC    CL8' ',C' / '\nDYNETY   DC    CL4' ',C' ERROR (R0='\nDYNER0   DC    CL9' ',C'R15='\nDYNERF   DC    CL10' '\nLDYNERR  EQU   *-DYNERR\n         DC    AL1(LMSGERR)\nMSGERR   DC    CL11' '\nMSGEDD   DC    CL8' ',C' / '\nMSGETY   DC    CL2' ',C'-ERROR (R15='\nMSGERF   DC    CL10' '\nLMSGERR  EQU   *-MSGERR\n         SPACE 2\n        LTORG\n         SPACE 2\n*- - - - - - - END OF BASE REGISTERS ADDRESSABILITY - - - - - - - - - *\n         EJECT\nDDLIN    DS    0D\n         DC    CL8'SYSLIN'         DD-NAME\n         DC    CL44'&&LDSET'       DATA-SET NAME\n         DC    CL16' '\n         DC    CL8'NEW'            STATUS\n         DC    CL8'DELETE'         NORMAL TERMINATION\n         DC    CL8'DELETE'         ABNORMAL TERMINATION\n         DC    CL8'VIO'            UNIT\n         DC    CL150' '\n         DC    CL5'CYL'            SPACE UNIT\n         DC    CL6'1'              PRIMARY QUANTITY\n         DC    CL6'1'              SECONDARY QUANTITY\n         DC    CL53' '\n         DC    CL5'800'            BLOCK SIZE\nRLIN     EQU   (DYNLGTH-(*-DDLIN))\n         DC    CL(RLIN)' '\n         SPACE 1\nDDUT1    DS    0D\n         DC    CL8'SYSUT1'         DD-NAME\n         DC    CL44'&&SYSUT1'      DATA-SET NAME\n         DC    CL16' '\n         DC    CL8'NEW'            STATUS\n         DC    CL8'DELETE'         NORMAL TERMINATION\n         DC    CL8'DELETE'         ABNORMAL TERMINATION\n         DC    CL8'VIO'            UNIT\n         DC    CL150' '\n         DC    CL5'CYL'            SPACE UNIT\n         DC    CL6'2'              PRIMARY QUANTITY\n         DC    CL6'1'              SECONDARY QUANTITY\nRUT1     EQU   (DYNLGTH-(*-DDUT1))\n         DC    CL(RUT1)' '\n         EJECT\nDDWK1    DS    0D\n         DC    CL8'SYSWK1'         DD-NAME\n         DC    CL44'&&DSWK1'       DATA-SET NAME\n         DC    CL16' '\n         DC    CL8'NEW'            STATUS\n         DC    CL8'DELETE'         NORMAL TERMINATION\n         DC    CL8'DELETE'         ABNORMAL TERMINATION\n         DC    CL8'VIO'            UNIT\n         DC    CL150' '\n         DC    CL5'TRK'            SPACE UNIT\n         DC    CL6'1'              PRIMARY QUANTITY\n         DC    CL6'1'              SECONDARY QUANTITY\n         DC    CL53' '\n         DC    CL5'4000'           BLOCK SIZE\n         DC    CL8'PS'             DATA ORGANIZATION\n         DC    CL3' '\n         DC    CL5'80'             LOGICAL RECORD LENGTH\n         DC    CL8'FB'             RECORD FORMAT\nRWK1     EQU   (DYNLGTH-(*-DDWK1))\n         DC    CL(RWK1)' '\n         SPACE 1\nDDWK2    DS    0D\n         DC    CL8'SYSWK2'         DD-NAME\n         DC    CL44'&&DSWK2'       DATA-SET NAME\n         DC    CL16' '\n         DC    CL8'NEW'            STATUS\n         DC    CL8'DELETE'         NORMAL TERMINATION\n         DC    CL8'DELETE'         ABNORMAL TERMINATION\n         DC    CL8'VIO'            UNIT\n         DC    CL150' '\n         DC    CL5'CYL'            SPACE UNIT\n         DC    CL6'1'              PRIMARY QUANTITY\n         DC    CL6'1'              SECONDARY QUANTITY\n         DC    CL53' '\n         DC    CL5'3993'           BLOCK SIZE\n         DC    CL8'PS'             DATA ORGANIZATION\n         DC    CL3' '\n         DC    CL5'121'            LOGICAL RECORD LENGTH\n         DC    CL8'FB  M'          RECORD FORMAT\nRWK2     EQU   (DYNLGTH-(*-DDWK2))\n         DC    CL(RWK2)' '\n         EJECT\nDDWK3    DS    0D\n         DC    CL8'SYSWK3'         DD-NAME\n         DC    CL44'&&DSWK3'       DATA-SET NAME\n         DC    CL16' '\n         DC    CL8'NEW'            STATUS\n         DC    CL8'DELETE'         NORMAL TERMINATION\n         DC    CL8'DELETE'         ABNORMAL TERMINATION\n         DC    CL8'VIO'            UNIT\n         DC    CL150' '\n         DC    CL5'CYL'            SPACE UNIT\n         DC    CL6'1'              PRIMARY QUANTITY\n         DC    CL6'1'              SECONDARY QUANTITY\n         DC    CL53' '\n         DC    CL5'4000'           BLOCK SIZE\n         DC    CL8'PS'             DATA ORGANIZATION\n         DC    CL3' '\n         DC    CL5'80'             LOGICAL RECORD LENGTH\n         DC    CL8'FB'             RECORD FORMAT\nRWK3     EQU   (DYNLGTH-(*-DDWK3))\n         DC    CL(RWK3)' '\n         SPACE 2\n        $DYNLIST L=NO,R=NO\n        PRINT  NOGEN\n        DCBD   DSORG=PO,DEVD=DA\n        PRINT  GEN\n         EJECT\nITB      DSECT ,                   INTERNAL TABLE ELEMENT\nITBET    DS    XL1                 ELEMENT TYPE\nITBDTY   EQU   0                        DSECT NAME\nITBFTY   EQU   1                        FIELD NAME\nITBBTY   EQU   2                        FLAG NAME\nITBRSP   EQU   127                      RESOLVE PENDING\nITBRES   EQU   128 + ELEMENT TYPE       RESET (PROCESSED)\n         SPACE 1\nITBDNM   DS    CL8                 DSECT NAME\nITBDNP   DS    AL4                 NEXT DSECT POINTER\nITBDDS   DS    CL4                 DSECT DISPLACEMENT\n         ORG   ITBDNM\nITBFNM   DS    CL8                 FIELD NAME\nITBFDS   DS    CL4                 FIELD DISPLACEMENT\nITBFLG   DS    CL4                 FIELD LENGTH\n         ORG   ITBDNM\nITBBNM   DS    CL8                 FLAG NAME\nITBBVL   DS    CL4                 FLAG VALUE\nITBBLG   DS    CL4                 FLAG NAME LENGTH\n         SPACE 1\nITBL     EQU   *-ITBET             ELEMENT LENGTH\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GDTUTIL$": {"ttr": 16137, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SYSPAJA"}, "text": "//GDTUTIL  JOB (........),'INSTALL  -GDTUTIL-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                DYNALL    TXPRINT   TXPUNCH   TXREAD               *\n//* TEST EXAMPLE : A SAMPLE INPUT FOR THIS PROGRAM IS GIVEN IN THE    *\n//* -------------- MEMBER NAMED 'GDTUTIN'.                            *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=GDTUTIL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(DYNALL,READ,PRINT,PUNCH)\n  ENTRY   GDTUTIL\n  NAME    GDTUTIL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GDTUTIL@": {"ttr": 16139, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943_\\x00\\x943_\\t \\x00r\\x00r\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-01T00:00:00", "modifydate": "1994-12-01T09:20:00", "lines": 114, "newlines": 114, "modlines": 0, "user": "SYSPAJA"}, "text": "1   02/03/89\n                                                      GDTUTIL   1/3.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *   GENERATE DSECT'S TABLES UTILITY   * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    The main goal of this program is to generate dsect's\n  ---------    tables which in turn should be available to the TSO\n         \"VCOREZAP\" command for dsect's fields references. Note that\n         these tables can be accessed by any other programs if desired.\n\n  Call of the program :\n  ---------------------\n         //GDTU    EXEC PGM=GDTUTIL,PARM=...\n         //SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR\n         //          DD DSN=SYS1.MODGEN,DISP=SHR\n         //          DD DSN=...any other maclib...,DISP=SHR\n         //SYSLMOD   DD ... output load-modules partitioned library ...\n         //SYSIN     DD ... input data (desired dsects) ...\n         //SYSMSG    DD SYSOUT=*\n         //SYSPRINT  DD SYSOUT=*\n\n  PARM=... : each parameter must be separated from the other by at\n  ---------- least a comma. Available options are :\n             NOGEN - produce only the macros assembly output list\n                     (suppress generate and link-edit)\n             NOLINK - produce only the dsects tables assembly output\n                      list (suppress link-edit)\n             WC=... - change work-control size (expressed in bytes, it\n                      will be rounded to the upper double-word).\n                      Default is 2048 bytes.\n             WA=...K - change work-areas size (expressed in K-bytes).\n                       Default is 16 K-bytes.\n\n         I.E. : PARM='NOLINK,WC=4096,WA=24K'\n1   02/03/89\n                                                      GDTUTIL   2/3.\n\n  Input data (SYSIN) : assembler statements defining the desired dsects\n  -------------------- to be generated and eventual control statements\n         (equal sign in column 1) to request some changes as below :\n\n         1. =  C  ...name1...  ...name2...\n               Create a new dsect named ...name1... before field named\n               ...name2... (usefull to separate prefix part).\n\n         2. =  A  ...name1...  ...name2...\n               Alias with name ...name1... the dsect name ...name2...\n               (i.e. DCB is more easier than IHADCB).\n\n         3. =  D  ...name1...  ...name2...  ... ... ...\n               Delete one or more field or flag names (undesirable\n               names in the dsect table).\n\n         4. =  F  ...name1...  ...name2...  ... ... ...\n               Force one or more names as a dsect field name but with\n               a length of zero (length symbol).\n\n         5. =  L  ...name1...\n               Link-edit a resulting dsect table with ...name1... as\n               load-module name. This control statement is accepted\n               only once by dsect.\n\n         6. =  M  ...name1...  ...name2...\n               Move all flags names definitions which follows field\n               ...name1... after field ...name2... (allows reordering\n               of multiple definitions in the dsect).\n\n         Note : all assembler statements must be given in the order\n                needed for assembly, terminating a dsect input by an\n                END statement. All control statements relative to the\n                dsect can be supplied in any order and anywhere before\n                the END statement.\n1   02/03/89\n                                                      GDTUTIL   3/3.\n\n         Input example (try it and see what's coming out) :\n\n               = A CVTMAP CVT\n               = C CVT CVTTCBP\n               = D CVTMAP\n               = L CVT\n                        CVT    PREFIX=YES,DSECT=YES,LIST=YES\n                        END\n               = A DCB IHADCB\n               = D DCBBIT0 DCBBIT1 DCBBIT2 DCBBIT3\n               = D DCBBIT4 DCBBIT5 DCBBIT6 DCBBIT7\n               = F DCBLNGXE DCBLNGDA DCBLNGBS\n               = F DCBLNGPO DCBLNGQS DCBLNGPS\n               = L DCB\n               = M DCBDVTBA DCBDEVT\n               = M DCBLNGDA DCBOPTCD\n                        DCBD   DSORG=(PS,PO,DA),DEVD=DA\n                        END\n               TIOT     DSECT\n                        IEFTIOT1\n                        END\n                        IHAASCB LIST=YES\n                        END\n               = F ASVTLEN ASVTULEN\n                        IHAASVT LIST=YES\n                        END\n               = A FLC PSA\n               = D FLC\n                        IHAPSA LIST=YES\n                        END\n               = C TCB TCBRBP\n               = D TCB\n               = F TCBPXLEN TCBMNLEN TCBX2LEN TCBLEN\n               = L TCB\n                        IKJTCB LIST=YES\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GDTUTIN": {"ttr": 16385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x07o\\x00\\x89\\x07o\\x12!\\x00_\\x00_\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-03-17T00:00:00", "modifydate": "1989-03-17T12:21:00", "lines": 95, "newlines": 95, "modlines": 0, "user": "SYSPAJA"}, "text": "= A CVTMAP CVT\n= C CVT CVTTCBP\n= D CVTMAP\n= L CVT\n         CVT   PREFIX=YES,DSECT=YES,LIST=YES\n         END\n= A DCB IHADCB\n= D DCBBIT0 DCBBIT1 DCBBIT2 DCBBIT3\n= D DCBBIT4 DCBBIT5 DCBBIT6 DCBBIT7\n= F DCBLNGXE DCBLNGDA DCBLNGBS\n= F DCBLNGPO DCBLNGQS DCBLNGPS\n= L DCB\n= M DCBDVTBA DCBDEVT\n= M DCBLNGDA DCBOPTCD\n         DCBD  DSORG=(PS,PO,DA),DEVD=DA\n         END\n= A IECIXAVL IOCOM\n= D IECIXAVL\n         IECDIOCM\n         END\n= D BIT0 BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7\n= D BA0 BA1 BA2 BA3 BA4 BA5 BA6 BA7\n= F BAPMLGTH\n         IEEBASEA\n         END\n= A SMCA SMCABASE\n= D BIT0 BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7\n         IEESMCA\n         END\n         IEFJESCT TYPE=DSECT\n         END\n= F SSCTSIZE\n         IEFJSCVT\n         END\nTIOT     DSECT\n         IEFTIOT1\n         END\n= F DEBXLEN\n         IEZDEB LIST=YES\n         END\n         IHAACEE\n         END\n         IHAASCB LIST=YES\n         END\n= F ASVTLEN ASVTULEN\n         IHAASVT LIST=YES\n         END\n         IHAASXB LIST=YES\n         END\n         IHACSD\n         END\n= D BIT0 BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7\n         IHADECB\n         END\n         IHAGDA\n         END\n         IHALCCA\n         END\n         IHAPCCA\n         END\n         IHAPCCAT\n         END\n= A FLC PSA\n= D FLC\n         IHAPSA LIST=YES\n         END\n         IHASVT LIST=YES\n         END\n= F XSBLEN\n         IHAXSB\n         END\n         IKJCPPL\n         END\n         IKJECT\n         END\n         IKJPSCB\n         END\n= C TCB TCBRBP\n= D TCB\n= F TCBPXLEN TCBMNLEN TCBX2LEN TCBLEN\n= L TCB\n         IKJTCB LIST=YES\n         END\n= D $PCEHCTE $PCEHCTP $PCEHCTC $PCEHCTD $PCEHCTA\n= F $TBLNUM $DOMIDN $WSALEN $PRMDWKL\n= F $JQTYPES $JQCLSSZ $SAVELEN $HCTLEN\n         PRINT NOGEN\n         COPY  $HASPGBL\n         $HASPEQU\n&MACSPLV SETC  '2'                 MACROS LIBRARY LEVEL\n         $MIT\n         $PCE\n         PRINT GEN\n         $HCT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HELPLIS$": {"ttr": 16388, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//HELPLIST JOB (........),'INSTALL - HELPLIST -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=3\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                GFDATE                                             *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=HELPLIST\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE)\n  ENTRY   HELPLIST\n  NAME    HELPLIST(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HELPLIS@": {"ttr": 16390, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90&?\\x00\\x90&?\\x165\\x00\\x8c\\x00\\x8c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-09-20T00:00:00", "modifydate": "1990-09-20T16:35:00", "lines": 140, "newlines": 140, "modlines": 0, "user": "SYSPAJA"}, "text": "1   12/12/86\n                                                      HELPLIST  1/3.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *           H E L P L I S T           * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  CBT origin : Extracted from CBT tape 86 FEB, file 313.\n  ------------\n\n  Purpose :    TSO HELP data-set lister.\n  ---------\n\n  JCL :  //LIST    EXEC PGM=HELPLIST,PARM='...'\n  -----  //SYSHELP   DD DSN=...HELP data-set...,DISP=SHR\n         //             ...concatenated HELP data-set if needed...\n         //SYSINDEX  DD ...index data-set output if requested...\n         //SYSPRINT  DD ...list data-set output...\n         //SYSDIAG   DD ...list of input if desired...\n         //SYSIN     DD ...input data-set (control cards)...\n\n  NOTE - It is assumed, and thus mandatory, that the COMMANDS member\n         in the HELP data-set follows the rules listed below :\n         1. all cards not commands subgroup titles or commands names\n            must have columns 1 up to 8 blanks (this allows them to\n            be handled as not operative cards).\n         2. a commands subgroup title must start between cards columns\n            1 up to 8 of the card, and must be followed at least by\n            one not operative card.\n         3. a command name of a subgroup must start in card column 1,\n            and his description must not start before card column 10\n            and it must be complete into the card column 72 (do not\n            extend the description in the following card nor insert\n            not operative cards between command name cards). Then, at\n            the end of the command name cards, and before the next\n            commands subgroup title card, a not operative card must\n            be present.\n\n  CONTROL cards :\n  ---------------\n\n       - *HEAD= (COL.1-6) control cards to supply list headers (50\n            characters maximum).\n       - *SKEY= (COL.1-6) control cards to select keywords matches\n            into headers (*HEAD= control card) and list only these\n            commands subgroups.\n       - the HELP members names control cards are variable coding with\n            multiple member names (ALIAS names are listed as commands\n            unless immediately followed by /A to be printed as alias\n            of next) and P=... keywords to set specific page numbers\n            (may be 1 up to 99999).\n1   20/09/90\n                                                      HELPLIST  2/3.\n\n  PARM field :\n  ------------\n\n       Use PARM= in JCL EXEC card to optionally specify :\n            L=... set the number of lines per page (default is 60,\n                  may be 20 op to 999),\n            I     request general index generation (SYSINDEX).\n            M     generate manual header/trailer pages.\n\n  Supplied features :\n  -------------------\n\n       - Automatic use of the HELP member COMMANDS (see NOTE) to\n         generate :\n         1. a complete HELP list when the general index (PARM=I) is\n            requested and the SYSIN DD-card is omited or dummy, or\n            the SYSIN file contains only a *HEAD= control card and/or\n            *SKEY= control cards (selection of subgroups in COMMANDS\n            member).\n         2. a list of the HELP COMMANDS member only when the general\n            index is not requested and the SYSIN DD-card is omited or\n            dummy, or the SYSIN file contains only a *HEAD= control\n            card (any encountered *SKEY= control cards have no effect\n            in this case).\n       - Only if the SYSDIAG DD-card is present, a list of the input\n            is supplied.\n\n  EXAMPLES of use :\n  -----------------\n\n       1. List only the content of the COMMANDS member :\n          //...  JOB ...\n          //LIST    EXEC PGM=HELPLIST\n          //SYSHELP   DD DSN=SYS1.HELP,DISP=SHR\n          //SYSPRINT  DD SYSOUT=*\n\n       2. List a complete HELP manual with index using the member\n          COMMANDS :\n          //...  JOB ...\n          //LIST    EXEC PGM=HELPLIST,PARM=I\n          //SYSHELP   DD DSN=SYS1.HELP,DISP=SHR\n          //SYSINDEX  DD SYSOUT=*\n          //SYSPRINT  DD SYSOUT=*\n1   12/12/86\n                                                      HELPLIST  3/3.\n\n       3. List a partial HELP manual with index using the member\n          COMMANDS and select into it the requested subgroups of\n          commands as specified by keywords :\n          //...  JOB ...\n          //LIST    EXEC PGM=HELPLIST,PARM=I\n          //SYSHELP   DD DSN=SYS1.HELP,DISP=SHR\n          //SYSINDEX  DD SYSOUT=*\n          //SYSPRINT  DD SYSOUT=*\n          //SYSIN     DD *\n          *SKEY=  VSAM  RACF\n          /*\n\n       4. Build a specific manual with index using selected HELP\n          members and predefined page numbers, set the number of\n          lines per page to 58, and list the input :\n          //...  JOB ...\n          //LIST    EXEC PGM=HELPLIST,PARM='I,L=58'\n          //SYSHELP   DD DSN=SYS1.HELP,DISP=SHR\n          //SYSINDEX  DD SYSOUT=*\n          //SYSDIAG   DD SYSOUT=*\n          //SYSPRINT  DD SYSOUT=*\n          //SYSIN     DD *\n          *HEAD=   ALL COMMANDS\n                   P=10     COMMANDS\n          *HEAD=   TSO COMMANDS\n                   P=100    CALL      EX/A      EXEC      LOAD\n                   LOADGO\n          *HEAD=   RACF COMMANDS\n                   P=200    ADDSD     ALTDSD    DELDSD    LISTDSD\n                   PE/A      PERMIT\n          *HEAD=   DMS COMMANDS\n                   P=300    DARCHIVE  DRESTORE\n          *HEAD=   LOCAL COMMANDS\n                   P=400    AGENDA    CERCA     CDSCB     CJSD\n                   FS/A      FSPACE    QED\n          *HEAD=   LIBRARIAN COMMANDS\n                   P=500    LIBADD    LIBCTL    LIBGET\n          /*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HELPLIST": {"ttr": 16393, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90&?\\x00\\x90&?\\x14E\\x04\\x99\\x04\\x99\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-09-20T00:00:00", "modifydate": "1990-09-20T14:45:00", "lines": 1177, "newlines": 1177, "modlines": 0, "user": "SYSPAJA"}, "text": "HLPL     TITLE 'H E L P L I S T   -   TSO HELP DATA-SET LISTER.'\n        PRINT  OFF\n         MACRO\n&LABEL  @T     &TNR,&TCC,&TXT\n.*\n.* MACRO : INTERNAL USE TO GENERATE 'MANUAL' TABLE.\n.* ------- ARGUMENTS : TNR - PRINT LINE REPEAT NUMBER (DEFAULT = 1).\n.*                     TCC - ASA CARRIAGE CONTROL CHARACTER (DEFAULT\n.*                           IS SINGLE SPACE).\n.*                     TXT - TEXT (DEFAULT IS A BLANK LINE).\n.*\n         LCLC  &N,&C\n&N       SETC  '1'\n&C       SETC  ' '\n         AIF   (T'&TNR EQ 'O').L01\n&N       SETC  '&TNR'\n.L01     AIF   (T'&TCC EQ 'O').L02\n&C       SETC  '&TCC'\n.L02     AIF   (T'&TXT EQ 'O').L03\n&LABEL   DC    AL1(&N,L'T&SYSNDX),CL1'&C'\nT&SYSNDX DC    C&TXT\n         MEXIT\n.L03     ANOP\n&LABEL   DC    AL1(&N,0),CL1'&C'\n         MEND\n        PRINT  ON\n         SPACE 1\nHELPLIST START 0\n         SPACE 1\n************************************************************\n*                                                          *\n*              'HELPLIST' PROGRAM AT J.R.C.                *\n*                                                          *\n************************************************************\n         SPACE 1\n* PROGRAM :    HELPLIST.\n* ORIGIN :     EXTRACTED FROM CBT TAPE 86 FEB., FILE 313.\n* AUTHOR :     UNKNOWN - FROM TOM GEE.\n* MODIFIOR :   BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION : FEDERAL POWER COMMISSION.\n*        DATE-UPDATED IN SOURCE LIBRARY : JANUARY 8 1974.\n*        REMARKS : DATE ADDED TO HEADING.\n*              SUBCOMMAND NAMES PREFIXED WITH 'SUBCOMMAND - '.\n*              INDENTATION CHANGED. CHECK FOR )X SYNTAX ADDED.\n*\n* MODIFIOR :   JERRY PITTENGER, PLANNING RESEARCH CORPORATION.\n*        INSTALLATION : OFFICE OF MANAGEMENT AND BUDGET (OMB).\n*        DATE-UPDATED IN SOURCE LIBRARY : AUGUST 17 1977.\n*        REMARKS : DATE REMOVED FROM HEADING. MULTIPLE HEADING LINES.\n*              CHANGE FROM )O OR )X OR )F HIGHLIGHTED BETTER.\n*              ALLOW NO ALIAS TO PRINT BY USING BLDL AGAINST\n*              THE SYSHELP LIBRARY/LIBRARIES DIRECTORY. INSERTED\n*              SUBCOMMANDS ON SEPARATE PAGES WITH THE SUBCOMMAND\n*              NAME IN THE HEADER BLOCK.\n*\n* MODIFIOR :   MOINIL P.A., J.R.C. COMPUTING CENTRE.\n*        INSTALLATION : ISPRA ESTABLISHMENT, 21020 ISPRA (VA), ITALY.\n*        DATE-UPDATED IN SOURCE LIBRARY : DECEMBER 2 1986.\n*        REMARKS : ALL ADDS ARE DOCUMENTED ON NEXT PAGE (NEW ADDS).\n         SPACE 2\n* JCL :  //LIST    EXEC PGM=HELPLIST,PARM='...'\n*        //SYSHELP   DD DSN=...HELP DATA-SET...,DISP=SHR\n*        //             ...CONCATENATED HELP DATA-SET IF NEEDED...\n*        //SYSINDEX  DD ...INDEX DATA-SET OUTPUT IF REQUESTED...\n*        //SYSPRINT  DD ...LIST DATA-SET OUTPUT...\n*        //SYSDIAG   DD ...LIST INPUT IF DESIRED...\n*        //SYSIN     DD ...INPUT DATA-SET...\n         EJECT\n* NEW ADDS : - ADD CHECK FOR )M MESSAGES HIGHLIGHTED.\n*            - DATE RESTORED IN HEADING. CONTROL CARDS VARIABLE\n*              CODING WITH MULTIPLE MEMBER NAMES (ALIAS NAMES ARE\n*              LISTED AS COMMANDS UNLESS IMMEDIATELY FOLLOWED BY\n*              '/A' TO PRINT AS ALIAS OF NEXT) AND P=... KEYWORDS\n*              TO SET SPECIFIC PAGE NUMBERS (MAY BE 1 UP TO 99999).\n*            - ADD *HEAD= (COL.1-6) CONTROL CARDS TO SUPPLY LIST\n*              HEADERS (50 CHARACTERS MAXIMUM).\n*            - ADD *SKEY= (COL.1-6) CONTROL CARDS TO SELECT KEYWORDS\n*              MATCHES INTO HEADERS (*HEAD= CONTROL CARD) AND LIST\n*              ONLY THESE COMMANDS SUBGROUPS.\n*            - ADD PARM= IN JCL EXEC CARD TO OPTIONALLY SPECIFY :\n*                L=... SET THE NUMBER OF LINES PER PAGE (DEFAULT IS\n*                      60, MAY BE 20 UP TO 999),\n*                I     REQUEST GENERAL INDEX GENERATION (SYSINDEX).\n*                M     GENERATE MANUAL HEADER/TRAILER PAGES.\n*            - ADD AUTOMATIC USE OF THE HELP MEMBER 'COMMANDS' (SEE\n*              NOTE) TO GENERATE :\n*              1. A COMPLETE HELP LIST WHEN THE GENERAL INDEX (PARM=I)\n*                 IS REQUESTED AND THE SYSIN DD-CARD IS OMITED OR\n*                 DUMMY, OR THE SYSIN FILE CONTAINS ONLY A *HEAD=\n*                 CONTROL CARD AND/OR *SKEY= CONTROL CARDS (SELECTION\n*                 OF SUBGROUPS IN 'COMMANDS' MEMBER).\n*              2. A LIST OF THE HELP 'COMMANDS' MEMBER ONLY WHEN THE\n*                 GENERAL INDEX IS NOT REQUESTED AND THE SYSIN DD-CARD\n*                 IS OMITED OR DUMMY, OR THE SYSIN FILE CONTAINS ONLY\n*                 A *HEAD= CONTROL CARD (ANY *SKEY= CONTROL CARDS\n*                 HAVE NO EFFECT IN THIS CASE).\n*            - ADD THE LIST OF INPUT IF DD-CARD SYSDIAG IS PRESENT.\n*\n* NOTE - IT IS ASSUMED, AND THUS MANDATORY, THAT THE 'COMMANDS' MEMBER\n*        IN THE HELP DATA-SET FOLLOWS THE RULES LISTED BELOW :\n*        1. ALL CARDS NOT COMMANDS SUBGROUP TITLES OR COMMANDS NAMES\n*           MUST HAVE COLUMNS 1 UP TO 8 BLANKS (THIS ALLOWS THEM TO\n*           BE HANDLED AS NOT OPERATIVE CARDS).\n*        2. A COMMANDS SUBGROUP TITLE MUST START BETWEEN CARDS COLUMNS\n*           1 UP TO 8 OF THE CARD, AND MUST BE FOLLOWED AT LEAST BY\n*           ONE NOT OPERATIVE CARD.\n*        3. A COMMAND NAME OF A SUBGROUP MUST START IN CARD COLUMN 1,\n*           AND HIS DESCRIPTION MUST NOT START BEFORE CARD COLUMN 10\n*           AND MUST BE COMPLETE INTO THE CARD COLUMN 72 (DO NOT\n*           EXTEND THE DESCRIPTION IN THE FOLLOWING CARD NOR INSERT\n*           NOT OPERATIVE CARDS BETWEEN COMMAND NAME CARDS). THEN, AT\n*           THE END OF THE COMMAND NAME CARDS, AND BEFORE THE NEXT\n*           COMMANDS SUBGROUP TITLE CARD, A NOT OPERATIVE CARD MUST\n*           BE PRESENT.\n         EJECT\n        $DEFREG\n*        CURRENT REGISTER USAGE :\n*        ------------------------\n*        R0-R2   = WORK REGISTERS\n*        R3      = CURRENT HELP RECORD POINTER\n*        R4      = HELP RECORD LENGTH\n*        R5      = HELP BLOCKSIZE\n*        R6      = CURRENT CONTROL CARD POINTER\n*        R7      = I/O AREA BASE\n*        R8      = LOCAL LINKAGE REGISTER\n*        R9      = LOCAL ROUTINES BASE REGISTER\n*        R10     = EXIT CC\n*        R11     = PROGRAM BASE\n*        R12     = 2ND PROGRAM BASE\n*        R13     = SAVE AREA POINTER\n*        R14-R15 = WORK REGISTERS\n         SPACE 1\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\n@OFF     EQU   X'0F'               SET SWITCH TO NOP\n@ON      EQU   X'F0'               SET SWITCH TO BRANCH\nNCP      EQU   300                 NUMBER OF CARDS IMAGE IN INT. POOL\n         EJECT\n        $XENT  BASE=(R11,R12)\n         XR    R7,R7\n         L     R2,0(,R1)           REG 2 ---> PARM\n         LH    R1,0(,R2)           R3 = LENGTH OF PARM\n         LTR   R1,R1               PARM?\n         BNP   NOPARM              NO\nPRMLOOP  CLI   2(R2),C','          PARMS SEPARATOR ?\n         BE    PRMNXT              YES\n         CLI   2(R2),C'M'          IS HEADER/TRAILER REQUEST ?\n         BE    PRMHT               YES\n         CLI   2(R2),C'I'          IS INDEX REQUEST ?\n         BE    PRMIX               YES\n         CLI   2(R2),C'L'          IS SET LINES/PAGE ?\n         BNE   PRMERR              NO\n         LR    R3,R2\n         LA    R2,1(R2)\n         BCT   R1,*+L'*+4\n         B     PRMINV\n         CLI   2(R2),C'='\n         BNE   PRMINV\n         LA    R2,1(R2)\n         BCT   R1,*+L'*+4\n         B     PRMINV\n         LR    R0,R1               EXTRACT THE NUMBER SPECIFIED\n         LR    R3,R2\nPRMLPL   CLI   2(R2),C'0'          SCAN FOR NUMERICS\n         BL    PRMINV\n         CLI   2(R2),C'9'\n         BH    PRMINV\n         LA    R2,1(R2)\n         BCT   R1,*+L'*+4\n         B     *+L'*+8\n         CLI   2(R2),C','          SEPARATOR ?\n         BNE   PRMLPL              NO, CONTINUE\n         LR    R4,R2               COMPUTE FIELD LENGTH\n         SR    R4,R3\n         CH    R4,=H'3'            LENGTH GREATER THAN 3 ?\n         BH    *+L'*+2             YES, INVALID\n         BCT   R4,*+L'*+6          LENGTH MINUS 1 FOR EX\n         LR    R1,R0               ALSO HERE IF LENGTH WAS 1\n         B     PRMINV\n         EX    R4,SETNUM\n         CP    DBLWRD+6(2),=P'20'\n         BL    PRMINV\n         MVC   CTRMAX(L'CTRMAX),DBLWRD+L'DBLWRD-L'CTRMAX\n         LTR   R1,R1\n         BP    PRMNXT\n         B     NOPARM\nPRMERR   LR    R3,R2\nPRMINV   LA    R4,8\n         CLR   R1,R4\n         BNL   *+L'*+2\n         LR    R4,R1\n         BCTR  R4,0\n         EX    R4,SETINV           SAY WHERE\n        WTO    MF=(E,MSGINV)\n         LA    R10,4   - - - - - - - - - - - - - - - - - - EXIT CC = 4\n         B     FINI\nPRMHT    OI    SW2,SWPHT           SET HEADER/TRAILER REQUESTED\n         B     PRMNXT\nPRMIX    OI    SW1,SWIX+SWPIS      SET INDEX REQUESTED\nPRMNXT   LA    R2,1(R2)\n         BCT   R1,PRMLOOP\n         SPACE 1\nNOPARM   XR    R10,R10 - - - - - - - - - - - - - - - - - - EXIT CC = 0\n        $GDATE PDATE,,DBLWRD       GET TODAY DATE\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    DATEOK              0 - GOOD RETURN\n         CVD   R15,DBLWRD\n         MVC   DTERC,=XL6'402020202120'\n         ED    DTERC,DBLWRD+5\n        WTO    MF=(E,MSGDTE)\n         LA    R10,32  - - - - - - - - - - - - - - - - - - EXIT CC = 32\n         B     FINI\nDATEOK   TM    SW2,SWPHT           HEADER/TRAILER REQUESTED ?\n         BZ    NOHTR\n         L     R1,=A(DTDAY)\n         MVC   0(L'DTDAY,R1),PDATE\n         L     R1,=A(DTDTE)\n         MVC   0(2,R1),DBLWRD+2\n         MVC   3(2,R1),DBLWRD\n         MVC   6(2,R1),DBLWRD+4\nNOHTR    MVI   PDATE+L'PDATE-2,C'/'\n         MVC   XDATE,PDATE\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         ZAP   CTRMIN,CTRMAX\n         SP    CTRMIN,=P'5'\n         ZAP   CTRNEW,CTRMIN\n         SP    CTRNEW,=P'5'\n        EXTRACT ATIOT,'S',FIELDS=(TIOT)\n         LA    R2,HELP\n         BAS   R8,OPENS\n         OI    OPENST+1,@ON\n         LA    R2,IN\n         BAS   R8,OPENS\n         B     *+L'*+4\n         OI    SW1,SWINT           NO SYSIN = USE 'COMMANDS' MEMBER\n         OI    OPENSW+1,@ON\n         LA    R2,DIAG\n         BAS   R8,OPENS\n         NI    SWDIAG+1,@OFF       SYSDIAG = LIST INPUT\n         NI    OPENST+1,@OFF\n         LA    R2,OUT\n         BAS   R8,OPENS\n         TM    SW1,SWIX            INDEX REQUESTED ?\n         BZ    *+L'*+8             NO\n         LA    R2,NDX\n         BAS   R8,OPENS\n         XR    R0,R0\n         L     R9,=A(HTPAGE)\n         BASR  R8,R9               DO HEADER PAGES IF REQUESTED\n         LH    R1,HELP+(DCBBLKSI-IHADCB)     BLOCKSIZE\n         LA    R0,7(R1)\n         SRL   R0,3\n         SLL   R0,3\n        GETMAIN R,LV=(0)\n         LR    R7,R1               SAVE POINTER TO I/O AREA\n         XR    R6,R6\nGETNXT   TM    SW1,SWINT           INTERNAL READ ?\n         BZ    GIN                 NO\nSTINT    TM    SW1,SWPHM           PROCESSING STARTED ?\n         BO    PASSIM              YES\n         MVC   REC(8),=CL8'COMMANDS'    SET MEMBER NAME\n         TM    SWDIAG+1,@ON\n         BO    *+L'*+6\n         MVC   DIAGR(L'DIAGR),REC\n         TM    SW1,SWIX            IS INDEX REQUESTED ?\n         BZ    GETMC               NO, JUST LIST MEMBER\n         OI    SW1,SWSCC           START SCAN OF COMMANDS\n         L     R0,INTARL\n         LR    R3,R0\n        GETMAIN R,LV=(0)\n         ST    R1,INTARS           SET POINTER TO INT. AREA\n         ST    R1,INTARC           SET CURRENT IN INT. AREA\n         LR    R2,R1\n         AL    R1,INTARL\n         ST    R1,INTARX           SET INT. AREA END +1\n         LA    R14,*               CLEAR TO ALL BLANKS\n         XR    R15,R15\n         ICM   R15,B'1000',=CL8' '\n         MVCL  R2,R14\n         B     GETMC\nPASSIM   TM    SW1,SWIX            IS INDEX REQUESTED ?\n         BZ    FINI                NO, JUST LIST MEMBER, THUS END\n         L     R1,INTARC\n         CL    R1,INTARX           HAVE WE PASSED ALL ?\n         BH    FINI                YES, END OF PROCESS\n         MVC   REC(72),0(R1)       PASS INTERNAL CARD IMAGE\n         TM    SWDIAG+1,@ON\n         BO    *+L'*+6\n         MVC   DIAGR(L'DIAGR),REC\n         LA    R1,72(R1)\n         ST    R1,INTARC\n         CLC   REC(6),=CL6'*HEAD=' HEADER CONTROL CARD ?\n         BE    SETHD               YES\nKWSW1    B     GETMC               NORMAL WAY\nSKWAY    TM    SWDIAG+1,@ON        SKIP WAY\n         BO    GETNXT\n         MVC   DIAGM+L'DIAGM-10(10),=CL10'SKIPPED : '\n         BAS   R8,PDIAG\n         B     GETNXT\nGIN     GET    IN,REC              READ A CONTROL CARD\nSWDIAG   B     *+L'*+6\n         MVC   DIAGR(L'DIAGR),REC\n         CLC   REC(6),=CL6'*SKEY=' KEYWORDS CONTROL CARD ?\n         BNE   NOKWRD              NO\nKWRDSW   NOP   KEYINV\n         ICM   R1,B'1111',KEYCUR\n         BNZ   KEYSC\n         L     R0,KEYLGH\n         LR    R3,R0\n        GETMAIN R,LV=(0)\n         ST    R1,KEYSTR           START AREA ADDRESS\n         ST    R1,KEYCUR           CURRENT AREA POINTER\n         LR    R2,R1\n         AL    R1,KEYLGH\n         ST    R1,KEYEND           SET END AREA + 1 ADDRESS\n         LA    R14,*               CLEAR TO ALL ZEROS\n         XR    R15,R15\n         MVCL  R2,R14\n         L     R1,KEYCUR\n         MVI   0(R1),X'FF'         SET TOP\n         OI    OP,OPSKEY           SET REQUEST\nKEYSC    LA    R3,REC+6            SCAN TO EXTRACT KEYWORDS\n         LA    R4,1\n         LA    R5,REC+71\n         CLI   0(R3),C' '          SEARCH A KEYWORD\n         BNE   GETKEY\nKEYSRC   BXLE  R3,R4,*-8\n         BAS   R8,TPDIAG\n         B     GIN\nGETKEY   LR    R2,R3               START OF A KEYWORD\n         BXLE  R3,R4,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R3),C' '\n         BNE   *-12\n         LR    R14,R3              COMPUTE KEYWORD LENGTH\n         SR    R14,R2\n         LA    R15,1(R1,R14)       ADDRESS OF SPACE NEEDED IN AREA\n         CL    R15,KEYEND          MAY BE STORED ?\n         BNL   KEYOV               NO, AREA OVERFLOW\n         BCTR  R14,0\n         STC   R14,0(R1)           STORE KEYWORD EX LENGTH\n         EX    R14,MVSKEY          STORE KEYWORD\n         LR    R1,R15\n         ST    R1,KEYCUR           CURRENT AREA POINTER\n         MVI   0(R1),X'FF'         SET TOP\n         B     KEYSRC\nKEYOV   WTO    MF=(E,MSGKOV)\n         LA    R10,28  - - - - - - - - - - - - - - - - - - EXIT CC = 28\n         B     FINI\nKEYINV   TM    SWDIAG+1,@ON\n         BO    KEYIWT\n         MVC   DIAGM+L'DIAGM-10(10),=CL10'INVALID : '\n         BAS   R8,PDIAG\n         B     GIN\nKEYIWT  WTO    MF=(E,MSGKIV)\n         B     GIN\nNOKWRD   CLC   REC(6),=CL6'*HEAD=' HEADER CONTROL CARD ?\n         BE    SETHD               YES, PROCESS IT\n         OI    KWRDSW+1,@ON        CLOSE KEYWORDS WAY\nKWSW2    B     GETMC               NORMAL WAY\n         B     SKWAY               SKIP WAY\nSETHD    TM    OP,OPSKEY           SELECT KEYWORDS REQUESTED ?\n         BZ    SETHD0              NO\n         L     R14,KEYSTR          YES, LOOK FOR A MATCH\n         XR    R15,R15\nKPRSS1   CLI   0(R14),X'FF'        TOP REACHED ?\n         BNE   KPRSS2              NO\n         NI    KWSW1+1,@OFF        YES, NO MATCH, SO SKIP WAY\n         NI    KWSW2+1,@OFF\n         B     SKWAY\nKPRSS2   IC    R15,0(R14)          NOW SCAN HEADER FOR KEYWORD\n         LA    R1,REC+6\n         LA    R2,1\n         LA    R3,REC+71\n         SR    R3,R15\nKPRSS3   CLI   0(R1),C' '\n         BE    *+L'*+8\n         EX    R15,CLKPRS          KEYWORD MATCH ?\n         BE    KPRSS4              YES\n         BXLE  R1,R2,KPRSS3\n         LA    R14,2(R14,R15)      NEXT KEYWORD\n         B     KPRSS1\nKPRSS4   OI    KWSW1+1,@ON         SET NORMAL WAY\n         OI    KWSW2+1,@ON\nSETHD0   MVC   XTIT(L'XTIT),XTIT-1\n         MVC   PTIT(L'PTIT),PTIT-1\n         LA    R1,REC+6\n         LA    R3,REC+71\nSETHD1   CLI   0(R1),C' '\n         BNE   SETHD2\n         LA    R1,1(R1)\n         CLR   R1,R3\n         BNH   SETHD1\nHDRIGN   TM    SWDIAG+1,@ON        HEADER IS ALL BLANKS, IGNORE\n         BO    GETNXT\n         MVC   DIAGM+L'DIAGM-10(10),=CL10'IGNORED : '\n         BAS   R8,PDIAG\n         B     GETNXT\nSETHD2   CLI   0(R3),C' '\n         BNE   *+L'*+4\nSETHD3   BCT   R3,SETHD2\n         LR    R2,R3               COMPUTE HEADER LENGTH\n         SR    R2,R1\n         CH    R2,=Y(L'PTIT-3)     LENGTH ACCEPTABLE ?\n         BNH   SETHD5              YES\nSETHD4   BCTR  R3,0\n         CLR   R3,R1\n         BNH   HDRIGN              HEADER IS TOO LONG, IGNORE\n         CLI   0(R3),C' '\n         BNE   SETHD4\n         B     SETHD3\nSETHD5   EX    R2,GETNHD           GET NEW HEADER\n         LA    R2,PTIT+L'PTIT-3\n         CLI   0(R2),C' '\n         BNE   *+L'*+4\n         BCT   R2,*-8\n         TM    SW1,SWIX\n         BZ    SETHD6\n         OI    SW1,SWPIS\n         MVI   2(R2),C':'\n         MVC   XTIT,PTIT\nSETHD6   MVC   1(2,R2),=CL2'. '\nTPDG     BAS   R8,TPDIAG\n         B     GETNXT\nGETMC    LA    R6,REC              START OF REQUESTED NAMES\nCSCAN    CLI   0(R6),C' '          START OF A NAME ?\n         BNE   STNME               YES\nCNTRL    CL    R6,=A(REC+71)       END OF CARD ?\n         BNL   TPDG                YES\n         LA    R6,1(R6)\n         B     CSCAN\nSTNME    LR    R1,R6               START OF NAME POINTER\n         LA    R6,1(R6)\n         CL    R6,=A(REC+71)       END OF CARD ?\n         BNL   *+L'*+8             YES\n         CLI   0(R6),C' '          END OF NAME ?\n         BNE   STNME+L'STNME       NO\n         LR    R2,R6\n         SR    R2,R1\n         CH    R2,=H'3'            AT LEAST LENGTH IS 3 ?\n         BL    TSNAL               NO, MUST BE A NAME\n         CLC   0(2,R1),=CL2'P='    IS IT A SET PAGE NUMBER REQUEST ?\n         BNE   TSNAL               NO, MUST BE A NAME\n         LR    R3,R1               EXTRACT THE NUMBER SPECIFIED\n         SH    R2,=H'2'\n         LR    R4,R2\n         BCTR  R4,0\n         CH    R2,=H'5'            OVER MAXIMUM ?\n         BH    INVNUM              YES\nSCNUM    CLI   2(R1),C'0'          CONTROL FOR NUMERICS\n         BL    INVNUM\n         CLI   2(R1),C'9'\n         BH    INVNUM\n         LA    R1,1(R1)\n         BCT   R2,SCNUM\n         EX    R4,SETPGN           SET NEW PAGE NUMBER\n         B     CNTRL\nINVNUM   EX    R4,MVPIPN\n         CH    R4,=H'7'\n         BNH   *+L'*+6\n         MVC   PIPN+L'PIPN(3),=CL3'...'\n        WTO    MF=(E,MSGIPN)\n         LA    R10,12  - - - - - - - - - - - - - - - - - - EXIT CC = 12\n         B     FINI\nTSNAL    CH    R2,=H'10'           VALID LENGTH ?\n         BH    NMERR               NO, TOO LONG\n         LA    R3,0(R1,R2)         POINT TO END +1\n         SH    R3,=H'2'            BACK 2 POSITIONS\n         CLC   0(2,R3),=CL2'/A'    ALIAS OF NEXT ?\n         BNE   *+L'*+8             NO\n         OI    OP,OPALRP           YES, SET REQUEST\n         SH    R2,=H'2'            REDUCE NAME LENGTH\n         CH    R2,=H'8'            VALID NAME LENGTH ?\n         BNH   SETMNM              YES\nNMERR    MVC   PLNG(L'PLNG),0(R1)  SET BEGINNING OF NAME\n        WTO    MF=(E,MSGLNG)\n         LA    R10,16  - - - - - - - - - - - - - - - - - - EXIT CC = 16\n         B     FINI\nSETMNM   BCTR  R2,0                MINUS 1 FOR EX\n         MVC   MMBR,=CL8' '        RESET TO BLANKS\n         MVC   MEMNAME(L'MEMNAME),=CL8' '\n         EX    R2,MVMMBR           MOVE TO BLDL AREA\n         EX    R2,MVMNME           SAVE DESIRED MEMBER NAME\n         STC   R2,MEMLEN           SAVE MEMBER LENGTH FOR EX\n         LA    R1,8                LOAD A CONSTANT\n         LA    R2,1(R2)            PUT R2 BACK UP\n         SR    R1,R2               GET NUMBER OF BLANKS\n         STC   R1,OFFSET           OFFSET FOR CENTERING ON HDR\n         SRL   R1,1                DIVIDE BY 2\n         STC   R1,MEMOFFST         SAVE FOR OFFSETTING\n         XC    MTTR(L'BLDLPDS-L'MMBR),MTTR   ZERO OUT BLDL\n        BLDL  HELP,BLDLLIST        GO GET IT\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    MOVE                0 - GOOD MEMBER\n         CH    R15,=H'4'\n         BE    *+L'*+10            4 - MEMBER NOT FOUND\n         MVC   PERT,=CL4'BLDL'     8 - GO ISSUE BLDL I/O ERROR\n         B     PERMIO\n         MVC   PNFD,MMBR           SET MEMBER NAME\n        WTO    MF=(E,MSGNFD)\n         B     CNTRL               GO GET THE NEXT MEMBER\nMOVE     TM    MINDC,PDS2ALIS      IS IT AN ALIAS ?\n         BZ    NOTAL               NO\n         TM    OP,OPALRP           IS IT AN ALIAS REQUESTED ?\n         BZ    NOTAL               NO, GO LIST AS A COMMAND\n         NI    OP,255-OPALRP       RESET REQUEST\n         MVI   HDT,C' '            ALIAS PROCESSING, CLEAR LINE\n         MVC   HDT+1(L'HDT-1),HDT\n         TM    OP,OPALIS           BEEN HERE BEFORE ?\n         BZ    *+L'*+8             NO, FORCE HEADING\n         MVI   HCC,C'0'            DOUBLE SPACE\n         B     INDIC               NO HEADING\n         NI    OP,255-OPSTLSC      NOT SUBCMD ANYMORE\n         BAS   R8,PHDLNE           HEADER\n         MVI   HCC,C'0'            DOUBLE SPACE\n         ZAP   CTRLIN,=P'2'        RESET LINE COUNT\nINDIC    MVC   HDT+26(27),DASHES   HIGHLITE\n        PUT    OUT,HEAD\n         MVI   HCC,C' '            SINGLE SPACE\n         MVC   HDT+26(27),HDT+25   CLEAR HIGHLITE\n         MVC   HDT+29(8),MEMNAME   MOVE IN MEMBER NAME\n         MVC   HDT+37(12),=CL12' IS AN ALIAS'\n        PUT    OUT,HEAD\n         MVI   HDT,C' '            CLEAR HEAD\n         MVC   HDT+1(L'HDT-1),HDT\n         MVC   HDT+26(27),DASHES   HIGHLITE\n        PUT    OUT,HEAD\n         MVC   HDT+26(27),HDT+25   CLEAR HIGHLITE\n        PUT    OUT,HEAD\n         AP    CTRLIN,=P'5'        MAKE LINECT CORRECT\n         OI    OP,OPALIS           SAY WE HAVE BEEN HERE\n         OI    OP,OPCSEP           PRINT COMMAND NAME ALSO\n         B     CNTRL               GO GET NEXT MEMBER\nNOTAL    NI    OP,255-OPSTLSC      TELL EM NOT SUBCOMMAND ANYMORE\n         NI    OP,255-OPSCSVD      SUBCOMMAND NOT SAVED ANY MORE\n        FIND   HELP,MTTR,C         FIND MEMBER\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    RDSETUP             0 - GOOD RETURN\n         CH    R15,=H'4'\n         BE    BADNAME             4 - INVALID NAME\n         MVC   PERT,=CL4'FIND'     8 - GO ISSUE FIND I/O ERROR\nPERMIO   MVC   PERM,MMBR           SAY MEMBER NAME\n        WTO    MF=(E,MSGERR)\n         LA    R10,20  - - - - - - - - - - - - - - - - - - EXIT CC = 20\n         B     FINI\nBADNAME  MVC   PBNM,MEMNAME        SET MEMBER NAME\n        WTO    MF=(E,MSGBNM)\n         B     CNTRL\nRDSETUP  NI    OP,255-OPCMDS       TURN OFF CMDS\n         OI    SW1,SWCMD           START OF A COMMAND\n         CLC   MEMNAME,=CL8'COMMANDS'   COMMANDS ?\n         BNE   *+L'*+4             NO, ...\n         OI    OP,OPCMDS           YES, INDICATE SUCH\n         TM    OP,OPALIS           ALIAS ALREADY CAUSED TOP ?\n         BO    READEM              YES, NO HEADER\n         ZAP   CTRLIN,=P'0'        FORCE HEADING\nREADEM   NI    OP,255-OPALIS       TURN OFF ALIAS FLAG\n        READ   DECB,SF,HELP,(R7),'S'\n        CHECK  DECB\n         LH    R5,HELP+(DCBBLKSI-IHADCB)     BLOCK SIZE\n         L     R1,DECB+16          A(IOB)\n         SH    R5,14(R1)           MINUS RESIDUAL CCW COUNT\n         BCTR  R5,0                DOWN ONE\n         LR    R3,R7               REC START\n         LA    R4,80               REC LENGTH\n         LA    R5,0(R3,R5)         REC END\nPROCESS  CLI   0(R3),C'*'          COMMENT CARD ?\n         BE    BXLE                YES, BYPASS IT\n         TM    OP,OPCMDS           CMDS ?\n         BZ    NRMWAY              NO, CONTINUE\n         MVC   LINEPL(72),0(R3)    YES, COPY IN RECORD\n         TM    SW1,SWSCC           MUST BE SCANNED ?\n         BZ    LISTER              NO, GO LIST IT\n         CLC   0(8,R3),=CL8' '     DATA LINE ?\n         BNE   GTHDR               YES\n         TM    SW1,SWMMB           BLANK LINE AFTER MEMBERS NAMES ?\n         BZ    LISTER              NO, GO LIST IT\n         NI    SW1,255-SWHDR-SWMMB YES, RESET\n         B     LISTER              GO LIST IT\nGTHDR    TM    SW1,SWHDR           HEADER HANDLED ?\n         BO    GTMMB               YES\n         LA    R1,71(R3)           NO\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         CLI   0(R1),C':'\n         BNE   *+L'*+4\n         MVI   0(R1),C' '\n         L     R1,INTARC\n         CLC   0(8,R1),=CL8' '\n         BE    *+L'*+4\n         LA    R1,72(R1)\n         CL    R1,INTARX\n         BNL   POOLOV              POOL OVERFLOW\n         MVC   0(6,R1),=CL6'*HEAD='     GET HEADER\n         MVC   6(66,R1),0(R3)\n         LA    R1,72(R1)\n         ST    R1,INTARC\n         XC    INTARD,INTARD\n         OI    SW1,SWHDR\n         B     LISTER              GO LIST IT\nPOOLOV  WTO    MF=(E,MSGPOV)\n         LA    R10,24  - - - - - - - - - - - - - - - - - - EXIT CC = 24\n         B     FINI\nGTMMB    L     R1,INTARC\n         LH    R14,INTARD\n         CH    R14,=H'70'\n         BL    *+L'*+6\n         XR    R14,R14\n         LA    R1,72(R1)\n         CL    R1,INTARX\n         BNL   POOLOV              POOL OVERFLOW\n         ST    R1,INTARC\n         ALR   R1,R14\n         LA    R14,10(R14)\n         STH   R14,INTARD\n         CLI   0(R3),C'%'          GET MEMBER NAME\n         BE    *+L'*+10\n         MVC   1(8,R1),0(R3)\n         B     *+L'*+6\n         MVC   1(8,R1),1(R3)\n         OI    SW1,SWMMB\n         B     LISTER              GO LIST IT\nNRMWAY   LA    R1,71(R3)           TEST FOR BLANK LINES\n         LA    R0,72\n         CLI   0(R1),C' '\n         BNE   *+L'*+10            NOT BLANK, PROCESS IT\n         BCTR  R1,0\n         BCT   R0,*-10\n         B     BXLE                BLANK LINE, BYPASS IT\n         CLC   0(2,R3),=CL2')F'    FUNCTION\n         BE    MAJORF\n         CLC   0(2,R3),=CL2')S'    SUBCOMMANDS\n         BE    MAJORS\n         CLC   0(2,R3),=CL2')X'    SYNTAX\n         BE    MAJORX\n         CLC   0(2,R3),=CL2')M'    MESSAGES\n         BE    MAJORM\n         CLC   0(2,R3),=CL2')O'    OPERANDS\n         BE    INDENT\n         CLI   0(R3),C'='          SUB COMMAND\n         BNE   CHEKOP              NO\n         OI    OP,OPSBCMD          TELL EM SUBCOMMAND\n         NI    OP,255-OPSCSVD      TELL EM NEW SUBCOMMAND\n         NI    OP,255-OPSTLSC      NOT CONTINUED SUBCMD\nSUBCMD   MVI   HDT,C' '            CLEAR HEAD\n         MVC   HDT+1(L'HDT-1),HDT\n         TM    OP,OPSTLSC          IS IT STILL SUBCOMMAND ?\n         BO    *+L'*+10            YES, LONG MEMBER\n         CP    CTRLIN,CTRNEW       ENOUGH ROOM FOR NEW ONE ?\n         BL    ADDFV               YES, GO GETEM\n         ZAP   CTRLIN,=P'2'        REINITIALIZE LINE COUNT\n         BAS   R8,PHDLNE           HEADER\nADDFV    AP    CTRLIN,=P'4'        1 EA. FOR HDR + HIGHLIGHTERS\n*                                  THE OTHERS ARE ALREADY TAKEN INTO\n*                                  ACCOUNT\n         MVI   HCC,C'0'            DOUBLE SPACE\n         MVC   HDT+26(27),DASHES   COMMAND HIGHLIGHTER\n        PUT    OUT,HEAD            PUT IT\n         MVC   HDT+26(27),HDT+25   CLEAR THE DASHES\n         MVI   HCC,C' '            SET TO SINGLE SPACE\n         MVI   HDT+40,C'-'         PUT IN THE SEPARATOR\n         XR    R1,R1               CLEAR IT\n         IC    R1,OFFSET           PICK UP THE OFFSET\n         LA    R2,HEAD+28(R1)      R2 POINT TO LOCATION + OFFSET\n         IC    R1,MEMLEN           PICK UP LENGTH TO MOVE\n         EX    R1,MEMMVC           MOVE IN MEMNAME\n*                                  PRESUPPOSES THAT SUBCOMMAND HAS\n*                                  AN '=' SIGN IN FRONT OF IT\n         TM    OP,OPSCSVD          HAS SUBCOMMAND BEEN SAVED ?\n         BZ    *+L'*+10            IF NOT GET OFF OF R3\n         MVC   HDT+43(8),SCSAVE    HAS BEEN SAVED... GET IT\n         B     DONEMOVE            GO AROUND R3 MOVE\n         MVC   HDT+43(8),1(R3)     MOVE IN SUBCOMMAND NAME\n         MVC   SCSAVE(8),1(R3)     SAVE THE SUBCOMMAND NAME\n         OI    OP,OPSCSVD          AND TURN ON THE FLAG\nDONEMOVE LA    R14,HDT+43          SET UP FOR '=' CHECK\n         LA    R15,8               LENGTH TO CHECK\nSUBCX    CLI   0(R14),C'='         IS IT AN '=' SIGN\n         BE    *+L'*+8             YES... GO BLANK IT\n         LA    R14,1(R14)          BUMP TO NEXT CHAR\n         BCT   R15,SUBCX           GO CHECK FURTHER\n         MVC   0(9,R14),=CL9' '    MOVE IN BLANKS\n         TM    SW1,SWIX            INDEX REQUESTED ?\n         BZ    *+L'*+14            NO\n         TM    OP,OPSBCMD          LONG MEMBER OR NEW SUBCOMMAND?\n         BZ    *+L'*+6             LONG MEMBER... CONTINUATION\n         MVC   XLNES(L'XLNES),HDT+43    SET SUBCOMMAND NAME TO INDEX\n        PUT    OUT,HEAD            WRITE IT\n         MVC   HDT+26(27),DASHES   HIGHLIGHT IT\n        PUT    OUT,HEAD            WRITE EM\n         MVC   HDT+26(27),HDT+25   BLANK IT\n         MVI   CC,C'0'             DOUBLE SPACE\n         OI    OP,OPSTLSC          SET SUBCOMMAND HEADER SWITCH\n         TM    OP,OPSBCMD          LONG MEMBER OR NEW SUBCOMMAND?\n         BZ    REPORTD             LONG MEMBER... LINE PRESENT\n         NI    OP,255-OPSBCMD      TURN OFF THE SWITCH\n         TM    SW1,SWIX            INDEX REQUESTED ?\n         BZ    BXLE                NO\n         BAS   R8,PIXLNE           INDEX\n         B     BXLE                GO GET SOME MORE\nCHEKOP   CLC   0(2,R3),=CL2'))'    OPERAND ?\n         BE    NOTDUMB             YES, BRANCH\n         CLC   0(2,R3),=CL2')P'    POSITIONAL OPERAND ?\n         BE    NOTDUMB             YES, BRANCH\n         CLC   0(2,R3),=CL8' '     CHECK FOR LACK OF NEATNESS\n         BE    NOTDUMB             YES, VERY GOOD, BRANCH\n         MVC   LINEIND(72),0(R3)   SOME DUMMY DIDN'T LEAVE 1ST 2 BLANK\n         B     LISTER\nNOTDUMB  MVC   LINEIND(70),2(R3)   SET LINE WITH INDENTION\n         B     LISTER\nMAJORF   LA    R2,=CL14' FUNCTION :'\n         B     NORMAL\nMAJORS   LA    R2,=CL14' SUBCOMMANDS :'\n         B     NORMAL\nMAJORX   LA    R2,=CL14' SYNTAX :'\n         B     NORMAL\nMAJORM   LA    R2,=CL14' MESSAGES :'\n         B     NORMAL\nINDENT   LA    R2,=CL14' OPERANDS :'\nNORMAL   MVI   CC,C'0'             DOUBLE SPACE\n         CLC   LINEMAJ(70),2(R3)   ANY DATA ?\n         BNE   *+L'*+10            YES\n         MVC   LINEMAJ(14),0(R2)   SUPPLY DATA\n         B     *+L'*+6\n         MVC   LINEMAJ(70),2(R3)   MOVE IN DATA\n         MVC   LNT+1(3),=CL3'***'  INSERT HIGHLIGHTER\n         CP    CTRLIN,CTRMIN       ENOUGH ROOM FOR NEW ONE ?\n         BNL   SKIPPG              YES, GO GETEM\nLISTER   CP    CTRLIN,CTRMAX\n         BL    *+L'*+6\nSKIPPG   ZAP   CTRLIN,=P'0'\n         MVI   HDT,C' '            CLEAR IT\n         MVC   HDT+1(L'HDT-1),HDT\n         TM    OP,OPCSEP           NEED COMMAND NAME ?\n         BO    HEADALI             YES... GO DO IT\n         CP    CTRLIN,=P'0'\n         BNE   REPORTD\n         TM    OP,OPSTLSC          IS IT STILL SUBCOMMAND ?\n         BO    SUBCMD              YES... GO DO IT THAT WAY\n         NI    OP,255-OPSTLSC      NOT SUBCOMMAND ANYMORE\n         BAS   R8,PHDLNE           HEADER\n         AP    CTRLIN,=P'1'        ADJUST LINE COUNT\nHEADALI  AP    CTRLIN,=P'5'        1 EA. FOR HDR + HIGHLIGHTERS\n*                                  THE OTHERS ARE ALREADY TAKEN INTO\n*                                  ACCOUNT\n         NI    OP,255-OPCSEP       TURN OFF COMMAND PRINT SWITCH\n         MVI   HCC,C'0'            DOUBLE SPACE\n         MVC   HDT+34(10),DASHES   COMMAND HIGHLIGHTER\n        PUT    OUT,HEAD            PUT IT\n         MVI   HCC,C' '            SET TO SINGLE SPACE\n         MVC   HDT+34(10),HDT+33   BLANK OUT HIGHLIGHTER\n         XR    R1,R1               ZERO OUT R1\n         IC    R1,MEMOFFST         GET THE OFFSET FOR MOVE\n         LA    R2,HDT+35(R1)       LOAD R2 W/LOCATION + OFFSET\n         IC    R1,MEMLEN           PICK UP LENGTH TO MOVE\n         EX    R1,MOVEMEM          MOVE IN THE MEMBER NAME\n        PUT    OUT,HEAD            PUT OUT CENTERED NAME\n         MVC   HDT+34(10),DASHES   COMMAND HIGHLIGHTER\n        PUT    OUT,HEAD            PUT IT\n         MVC   HDT+34(10),HDT+33   BLANK OUT HEAD\n         MVI   CC,C'0'             DOUBLE SPACE\n         TM    SW1,SWIX+SWCMD      INDEX REQUESTED AND START CMD ?\n         BNO   REPORTD             NO\n         NI    SW1,255-SWCMD       TURN OFF START COMMAND\n         MVC   XLNEC,MEMNAME       SET COMMAND NAME\n         BAS   R8,PIXLNE           INDEX\nREPORTD  CLI   CC,C' '             SINGLE SPACING ?\n         BE    SPONE               YES\n         CLI   CC,C'0'             DOUBLE SPACING ?\n         BNE   SPONE+L'SPONE       NO, BRANCH AROUND AP\n         AP    CTRLIN,=P'1'\nSPONE    AP    CTRLIN,=P'1'\n         TM    OP,OPSBCMD          IS IT SUBCOMMANDS ?\n         BZ    *+L'*+10            NO... LIST ASIS\n         NI    OP,255-OPSBCMD      TURN OFF SWITCH\n         MVC   LNT+2(3),=CL3'***'  INSERT HIGHLIGHTER\n        PUT    OUT,LINE\n         MVI   LINE,C' '           CLEAR LINE\n         MVC   LINE+1(L'LINE-1),LINE\nBXLE     BXLE  R3,R4,PROCESS       SCAN ENTIRE BLOCK\n         B     READEM              READ ANOTHER BLOCK\nENDHLP   TM    SW1,SWINT           INTERNAL READ ?\n         BZ    CNTRL               NO\n         TM    SW1,SWPHM           PROCESS STARTED ?\n         BO    CNTRL               YES\n         NI    SW1,255-SWSCC-SWHDR-SWMMB RESET\n         OI    SW1,SWPHM           SET PROCESS HEADERS-MEMBERS\n         MVC   INTARX,INTARC       SET CURRENT AS END\n         MVC   INTARC,INTARS       RESTART CURRENT\n         B     CNTRL\nENDIN    LTR   R6,R6               HAVE WE PROCESS SOMETHING ?\n         BNZ   FINI                YES\n         OI    SW1,SWINT           USE 'COMMANDS' MEMBER\n         MVI   REC,C' '\n         MVC   REC+1(L'REC-1),REC\n         B     STINT\nFINI     LA    R0,255\n         L     R9,=A(HTPAGE)\n         BASR  R8,R9               DO TRAILER PAGES IF REQUESTED\n         LA    R2,HELP\n         BAS   R8,CLOSS\n         LA    R2,IN\n         BAS   R8,CLOSS\n         LA    R2,DIAG\n         BAS   R8,CLOSS\n         LA    R2,OUT\n         BAS   R8,CLOSS\n         LA    R2,NDX\n         BAS   R8,CLOSS\n         ICM   R1,B'1111',KEYSTR\n         BZ    FREEIA\n         L     R0,KEYLGH\n        FREEMAIN R,A=(1),LV=(0)\nFREEIA   ICM   R1,B'1111',INTARS\n         BZ    FREEAR\n         L     R0,INTARL\n        FREEMAIN R,A=(1),LV=(0)\nFREEAR   LTR   R7,R7\n         BZ    QUIT\n         LH    R1,HELP+(DCBBLKSI-IHADCB)     BLOCKSIZE\n         LA    R0,7(R1)\n         SRL   R0,3\n         SLL   R0,3\n        FREEMAIN R,A=(R7),LV=(0)\nQUIT    $XRET  CC=(R10)\n         SPACE 1\nSETNUM   PACK  DBLWRD,2(*-*,R3)    << EXECUTED >>\nSETINV   MVC   PINV(*-*),2(R2)     << EXECUTED >>\nMVSKEY   MVC   1(*-*,R1),0(R2)     << EXECUTED >>\nCLKPRS   CLC   0(*-*,R1),1(R14)    << EXECUTED >>\nGETNHD   MVC   PTIT(*-*),0(R1)     << EXECUTED >>\nSETPGN   PACK  CTRPG,2(*-*,R3)     << EXECUTED >>\nMVPIPN   MVC   PIPN(*-*),2(R3)     << EXECUTED >>\nMVMMBR   MVC   MMBR(*-*),0(R1)     << EXECUTED >>\nMVMNME   MVC   MEMNAME(*-*),0(R1)  << EXECUTED >>\nMOVEMEM  MVC   0(*-*,R2),MEMNAME   << EXECUTED >>\nMEMMVC   MVC   0(*-*,R2),MEMNAME   << EXECUTED >>\n         SPACE 1\n         USING IHADCB,R2\nOPENS    L     R1,ATIOT            TIOT ADDRESS\n         USING TIODSECT,R1\n         XR    R0,R0\nOPENS1   CLC   TIOELNGH(4),=F'0'\n         BE    OPENST\n         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM\n         BE    OPENSW\n         IC    R0,TIOELNGH\n         ALR   R1,R0\n         B     OPENS1\n         DROP  R1\nOPENSW   NOP   OPENS2\n        OPEN   ((R2),INPUT)\n         B     OPENS3\nOPENS2  OPEN   ((R2),OUTPUT)\nOPENS3   TM    DCBOFLGS,DCBOFOPN\n         BOR   R8\n         MVC   PDDM,=CL10'OPEN ERROR'\n         B     OPENS4\nOPENST   NOP   4(R8)\n         MVC   PDDM,=CL10'DD MISSING'\nOPENS4   MVC   PDDN,DCBDDNAM\n        WTO    MF=(E,MSGDDN)\n         LA    R10,8   - - - - - - - - - - - - - - - - - - EXIT CC = 8\n         B     FINI\n         DROP  R2\n         SPACE 1\n         USING IHADCB,R2\nCLOSS    TM    DCBOFLGS,DCBOFOPN\n         BZR   R8\n        CLOSE  ((R2))\n         BR    R8\n         DROP  R2\n         SPACE 1\nTPDIAG   TM    SWDIAG+1,@ON\n         BOR   R8\nPDIAG   PUT    DIAG,DIAGL\n         MVI   DIAGL,C' '          CLEAR LINE\n         MVC   DIAGL+1(L'DIAGL-1),DIAGL\n         BR    R8\n         SPACE 1\nPHDLNE   MVI   HCC,C'1'            FORCE HEADING (EJECT)\n         MVC   PGNBR,=XL6'4B2020202120'\n         ED    PGNBR,CTRPG\n        PUT    OUT,JRCID           TOP OF PAGE ID\n        PUT    OUT,JRCIT           HEADER\n         AP    CTRPG,=P'1'\n         MVI   HDT,C' '            CLEAR HEAD\n         MVC   HDT+1(L'HDT-1),HDT\n         BR    R8                  RETURN\n         SPACE 1\nPIXLNE   MVC   XLNEP,PGNBR         SET WHERE PAGE NUMBER\n         LA    R1,XLNEP\n         CLI   0(R1),C'.'\n         BNE   *+L'*+12\n         MVI   0(R1),C' '\n         LA    R1,1(R1)\n         B     *-16\n         MVI   XDASHS,C'.'\n         MVC   XDASHS+1(L'XDASHS-1),XDASHS-1\n         CP    CTRXLN,=P'0'\n         BE    PIXLNE1\n         TM    SW1,SWPIS\n         BZ    PIXLNE3\n         CP    CTRXLN,CTRMIN\n         BL    PIXLNE2\nPIXLNE1  MVC   XPGNBR,=XL6'4B2020202120'\n         ED    XPGNBR,CTRXPG\n        PUT    NDX,JRCIX           TOP OF PAGE INDEX\n        PUT    NDX,JRCIH\n        PUT    NDX,JRCIL\n         AP    CTRXPG,=P'1'\n         ZAP   CTRXLN,=P'5'\n         MVI   XLNE,C'0'           DOUBLE SPACE\n         TM    SW1,SWPIS\n         BZ    PIXLNE3\nPIXLNE2 PUT    NDX,JRCIS\n         AP    CTRXLN,=P'2'\n         NI    SW1,255-SWPIS\n         CLI   XLNE,C'0'           DOUBLE SPACE ALREADY SCHEDULED ?\n         BE    PIXLNE3             YES\n         MVI   XLNE,C'0'           SET DOUBLE SPACE\n         AP    CTRXLN,=P'1'\nPIXLNE3 PUT    NDX,XLNE            INDEX LINE\n         AP    CTRXLN,=P'1'\n         CP    CTRXLN,CTRMAX\n         BL    *+L'*+6\n         ZAP   CTRXLN,=P'0'\n         MVI   XLNE,C' '           BLANK OUT INDEX LINE\n         MVC   XLNE+1(L'XLNE-1),XLNE\n         BR    R8                  RETURN\n         SPACE 1\n         CNOP  0,4\n         USING IHADCB,R1\nDCBEXIT  CLC   DCBLRECL(L'DCBLRECL),=H'79'   CONTROL LRECL\n         BL    *+L'*+8\n         CLC   DCBLRECL(L'DCBLRECL),=H'133'\n         BNHR  R14\n         MVC   DCBLRECL(L'DCBLRECL),=H'133'\n         MVC   DCBBLKSI(L'DCBBLKSI),=H'133'\n         BR    R14\n         DROP  R1\n         EJECT\nDBLWRD   DC    D'0'\nSCSAVE   DC    CL8' '              SUBCOMMAND SAVE AREA\nMEMNAME  DC    CL8' '\nBLDLLIST DC    0F'0',AL2(1,L'BLDLLIST+L'BLDLPDS)  BLDL LIST\nBLDLPDS  DC    XL60'0'             PDS DIRECTORY ENTRY\nMMBR     EQU   BLDLPDS+(PDS2NAME-PDS2),8\nMTTR     EQU   BLDLPDS+(PDS2TTRP-PDS2),3\nMINDC    EQU   BLDLPDS+(PDS2INDC-PDS2),1\nATIOT    DC    F'0'\nKEYSTR   DC    F'0'                KEYWORDS AREA START ADDRESS\nKEYCUR   DC    F'0'                KEYWORDS AREA CURRENT POINTER\nKEYEND   DC    F'0'                KEYWORDS AREA END + 1 ADDRESS\nKEYLGH   DC    F'1024'             KEYWORDS AREA GETMAINED LENGTH\nINTARS   DC    F'0'                INT. AREA START ADDRESS\nINTARC   DC    F'0'                INT. AREA CURRENT POINTER\nINTARX   DC    F'0'                INT. AREA END +1 ADDRESS\nINTARL   DC    A(NCP*72)           INT. AREA GETMAINED LENGTH\nINTARD   DC    H'0'                DISPLACEMENT USE\nDASHES   DC    27C'-'              SUBCOMMAND HIGHLIGHTER\nMEMLEN   DC    XL1'0'\nOFFSET   DC    XL1'0'\nMEMOFFST DC    XL1'0'\nOP       DC    AL1(0)\nOPCMDS   EQU   X'80'               COMMAND 'COMMANDS'\nOPCSEP   EQU   X'40'               PRINT COMMAND NAME FLAG\nOPALIS   EQU   X'20'               ALIAS FLAG\nOPALRP   EQU   X'10'               ALIAS REQUEST PROCESSING\nOPSTLSC  EQU   X'08'               SUBCOMMAND HEADER FLAG\nOPSCSVD  EQU   X'04'               SUBCOMMAND HAS BEEN SAVED FLAG\nOPSBCMD  EQU   X'02'               SUBCOMMAND SEPARATION\nOPSKEY   EQU   X'01'               KEYWORDS SELECTION\nSW1      DC    AL1(0)\nSWIX     EQU   X'80'               INDEX REQUESTED\nSWPIS    EQU   X'40'               PRINT INDEX SUBTITLE\nSWCMD    EQU   X'20'               COMMAND START PROCESSING\nSWINT    EQU   X'10'               USE INTERNAL INPUT (COMMANDS)\nSWSCC    EQU   X'08'               SCANNING OF COMMANDS MEMBER\nSWHDR    EQU   X'04'               SCAN OF COMMANDS / HEADERS\nSWMMB    EQU   X'02'               SCAN OF COMMANDS / MEMBERS NAMES\nSWPHM    EQU   X'01'               PROCESS HEADERS / MEMBERS NAMES\nSW2      DC    AL1(0)\nSWPHT    EQU   X'80'               PRINT HEADER/TRAILER PAGES\nSWPHTL   EQU   X'40'               HEADER/TRAILER PAGES PROCESS\nCTRLIN   DC    PL2'0'\nCTRXLN   DC    PL2'0'\nCTRNEW   DC    PL2'50'\nCTRMIN   DC    PL2'55'\nCTRMAX   DC    PL2'60'\nCTRPG    DC    PL3'1'\nCTRXPG   DC    PL3'1'\n         EJECT\nREC      DC    CL80' '\nDIAGL    DS    0CL133\n         DC    CL6' '\nDIAGM    DC    CL15' '\nDIAGR    DC    CL72' ',CL40' '\nLINE     DS    0CL133\nCC       DC    CL1'0'\nLNT      DC    CL132' '\nLINEMAJ  EQU   LNT+5\nLINEPL   EQU   LNT+7\nLINEIND  EQU   LINEPL\nHEAD     DS    0CL133\nHCC      DC    CL1'0'\nHDT      DC    CL132' '\nXLNE     DS    0CL133\n         DC    CL5' '\nXLNEC    DC    CL8' ',CL3' '\nXLNES    DC    CL8' ',CL45' '\nXLNEP    DC    CL6' ',CL58' '\nXDASHC   EQU   XLNES,50\nXDASHS   EQU   XLNES+L'XLNES+4,38\nJRCID    DS    0CL133\n         DC    CL47'1 J.R.C. - HELP REFERENCE -'\nPDATE    DC    CL21' ',CL4'PAGE'\nPGNBR    DC    CL6' ',CL55' '\nJRCIT    DS    0CL133\n         DC    CL11' '\nPTIT     DC    CL52'ALL COMMANDS.',CL70' '\nJRCIX    DS    0CL133\n         DC    CL47'1 J.R.C. - HELP INDEX -'\nXDATE    DC    CL21' ',CL4'PAGE'\nXPGNBR   DC    CL6' ',CL55' '\nJRCIH    DS    0CL133\n         DC    CL5'0 ',CL64'COMMAND    SUBCOMMAND '\n         DC    CL6' PAGE ',CL58' '\nJRCIL    DS    0CL133\n         DC    CL5' '\n         DC    8C'-',CL3'   '\n         DC    10C'-',CL43' ',CL6' -----',CL58' '\nJRCIS    DS    0CL133\n         DC    CL2'0 '\nXTIT     DC    CL52'ALL COMMANDS :',CL79' '\n         EJECT\n         LTORG\n         EJECT\n         PRINT NOGEN\n         SPACE 1\nMSGINV  WTO    '--- INVALID PARM= FIELD (AT :         ).',             1\n               ROUTCDE=11,DESC=7,MF=L\nPINV     EQU   MSGINV+34,8\nMSGDDN  WTO    '---          -           .',ROUTCDE=11,DESC=7,MF=L\nPDDN     EQU   MSGDDN+8,8\nPDDM     EQU   MSGDDN+19,10\nMSGKOV  WTO    '--- KEYWORDS SELECTION AREA OVERFLOW.',                1\n               ROUTCDE=11,DESC=7,MF=L\nMSGKIV  WTO    '--- *SKEY=... CONTROL CARD MISPLACED - BYPASSED.',     1\n               ROUTCDE=11,DESC=7,MF=L\nMSGPOV  WTO    '--- INT. POOL OVERFLOW (NCP VALUE TOO SMALL).',        1\n               ROUTCDE=11,DESC=7,MF=L\nMSGIPN  WTO    '--- SYSIN    - INVALID PAGE NUMBER : P=            ',  1\n               ROUTCDE=11,DESC=7,MF=L\nPIPN     EQU   MSGIPN+43,8\nMSGLNG  WTO    '--- SYSIN    -         ... MEMBER NAME TOO LONG.',     1\n               ROUTCDE=11,DESC=7,MF=L\nPLNG     EQU   MSGLNG+19,8\nMSGDTE  WTO    '--- GET CURRENT DAY ROUTINE ERROR (RC =      ).',      1\n               ROUTCDE=11,DESC=7,MF=L\nDTERC    EQU   MSGDTE+43,6\nMSGERR  WTO    '--- SYSHELP  - .... I/O ERROR / MEMBER :         ',    1\n               ROUTCDE=11,DESC=7,MF=L\nPERT     EQU   MSGERR+19,4\nPERM     EQU   MSGERR+45,8\nMSGNFD  WTO    '--- SYSHELP  -          MEMBER NOT FOUND / BLDL.',     1\n               ROUTCDE=11,DESC=7,MF=L\nPNFD     EQU   MSGNFD+19,8\nMSGBNM  WTO    '--- SYSHELP  -          INVALID MEMBER NAME / FIND.',  1\n               ROUTCDE=11,DESC=7,MF=L\nPBNM     EQU   MSGBNM+19,8\n         SPACE 2\nHELP    DCB    DSORG=PO,MACRF=R,EODAD=ENDHLP,DDNAME=SYSHELP\nIN      DCB    DSORG=PS,MACRF=GM,LRECL=80,EODAD=ENDIN,DDNAME=SYSIN\nDIAG    DCB    DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=133,DDNAME=SYSDIAG\nOUT     DCB    DSORG=PS,MACRF=PM,RECFM=FBA,EXLST=PXLST,DDNAME=SYSPRINT\nNDX     DCB    DSORG=PS,MACRF=PM,RECFM=FBA,EXLST=PXLST,DDNAME=SYSINDEX\n         SPACE 1\nPXLST    DC    0F'0',XL1'85',AL3(DCBEXIT)\n         EJECT\n*        HEADER/TRAILER PAGES ROUTINE\n*        ----------------------------\n         SPACE 1\n        CNOP   0,4\n         USING *,R9\nHTPAGE   TM    SW2,SWPHT           HEADER/TRAILER REQUESTED ?\n         BZR   R8                  NO\n         STM   R0,R15,HTSAVE\n         LTR   R0,R0\n         BNZ   PTRAIL\n         TM    SW1,SWIX            INDEX REQUESTED ?\n         BZ    PTRAIL              NO\n         LA    R5,NDX\n         B     PTRAIL+L'PTRAIL\nPTRAIL   LA    R5,OUT\n         NI    SW2,255-SWPHTL\n         USING IHADCB,R5\n         TM    DCBOFLGS,DCBOFOPN\n         BZ    PMNTX5\n         DROP  R5\nPMNTX1   L     R2,=A(MANUAL)\n         XR    R3,R3\n         LR    R4,R3\nPMNTX2   ICM   R3,B'0001',0(R2)\n         BZ    PMNTX4\n         MVC   MTCC(1),2(R2)\n         MVI   MTTXT,C' '\n         MVC   MTTXT+1(L'MTTXT-1),MTTXT\n         ICM   R4,B'0001',1(R2)\n         BZ    PMNTX3\n         LR    R1,R4\n         BCTR  R1,0\n         EX    R1,PMNTXMV\nPMNTX3  PUT    (R5),MTLINE\n         BCT   R3,PMNTX3\n         LA    R2,3(R4,R2)\n         B     PMNTX2\nPMNTX4  PUT    (R5),DTLINE\n         TM    SW2,SWPHTL\n         BO    PMNTX5\n         OI    SW2,SWPHTL\n         B     PMNTX1\nPMNTX5   LM    R0,R15,HTSAVE\n         BR    R8\nPMNTXMV  MVC   MTTXT(*-*),3(R2)    << EXECUTED >>\n         SPACE 1\nHTSAVE   DC    16F'0'\n         SPACE 1\nMTLINE   DS    0CL133\nMTCC     DC    CL6' '\nMTTXT    DC    CL70' ',CL57' '\nDTLINE   DS    0CL133\n         DC    CL13'0     DATE : '\nDTDTE    DC    CL8'  /  /  ',CL4' (  '\nDTDAY    DC    CL20' ',CL88') '\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R9\n         EJECT\nMANUAL   DS    0F\n      @T ,1\n      @T 3,0\n      @T ,,' '\n      @T ,,'                                    COMMISSION OF THE'\n      @T ,,'               *                   EUROPEAN COMMUNITIES'\n      @T ,,'          *         *'\n      @T ,,' '\n      @T ,,'      *                 *         J       R       C'\n      @T ,,'                                   O       E       E'\n      @T ,,'                                    I       S       N'\n      @T ,,'    *                     *          N       E       T'\n      @T ,,'                                      T       A       R'\n      @T ,,'                                               R       E'\n      @T ,,'      *                 *                       C'\n      @T ,,'                                                 H'\n      @T ,,'          *         *'\n      @T ,,'               *'\n      @T ,,'                                  - ISPRA ESTABLISHMENT -'\n      @T ,,' '\n      @T 3,0\n      @T ,,'  TTTTT   SSSS  OOOOO          H   H  EEEEE  L      PPPP'\n      @T ,,'   T    S      O   O          H   H  E      L      P   P'\n      @T ,,'  T     SSS   O   O          HHHHH  EEEE   L      PPPP  '\n      @T ,,' T        S  O   O          H   H  E      L      P      '\n      @T ,,'T    SSSS   OOOOO          H   H  EEEEE  LLLLL  P       '\n      @T 2,0\n         DC    AL1(0)              END INDICATOR\n         SPACE 2\nTIODSECT DSECT\n        IEFTIOT1\n        DCBD   DSORG=(PS,PO),DEVD=DA\n        IHAPDS\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICFLIST": {"ttr": 16901, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x01\\x1f\\x00\\x95\\x01\\x1f\\x10\\x05\\x01\\xd1\\x01\\xd1\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-01-11T00:00:00", "modifydate": "1995-01-11T10:05:00", "lines": 465, "newlines": 465, "modlines": 0, "user": "SYSPAJA"}, "text": "ICFL     TITLE 'ICF CATALOG LIST.'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *          ICF CATALOG LIST.          * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    THIS PROGRAM PRODUCES A LISTING OF AN ENTIRE ICF       *\n* ---------    CATALOG RESIDING ON A VOLUME WHICH IS A DIRECT-ACCESS  *\n*              STORAGE DEVICE CLASS (UCBTYP+2 = X'20').               *\n*                                                                     *\n*              A DD-CARD, WRITTEN AS BELOW, IS NEEDED FOR EACH        *\n*              CATALOG ON WHICH THE ANALYSIS IS DESIRED :             *\n*                                                                     *\n*              //ICDD...  DD  DSN=...CATALOG DS-NAME...,DISP=SHR      *\n*                                                                     *\n*                                                                     *\n* CALL OF THE PROGRAM :                                               *\n* ---------------------                                               *\n*                                                                     *\n*        //LIST   EXEC  PGM=ICFLIST                                   *\n*        //ICDD...  DD  DSN=...CATALOG DS-NAME...,DISP=SHR            *\n*        //ICDD...  DD  --- --- --- --- --- --- --- ---               *\n*        //ICDD...  DD  --- ANY NUMBER OF DD-CARDS. ---               *\n*        //ICDD...  DD  --- --- --- --- --- --- --- ---               *\n*        //SYSPRINT DD  SYSOUT=A                                      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nICFLIST  START 0\n         SPACE 1\n        $DEFREG\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nOFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING\nON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING\nLV15     EQU   15                  SPECIAL LEVEL\n         SPACE 1\nPSWR    $MDL@IX\n         EJECT\n        $XENT  BASE=(R11,R12)\n        EXTRACT   WORK,'S',FIELDS=(TIOT)\n         SPACE 2\n         L     R6,WORK             GET TIOT ADDRESS\n         USING TIODSECT,R6\n         XR    R1,R1\nICDDS    CLC   TIOELNGH(L'ZEROS),ZEROS  END OF TIOT?\n         BE    DDMS                BRANCH IF YES\n         CLC   TIOEDDNM(L'ICDD),ICDD\n         BE    OPNIC               BRANCH IF CATALOG DD-NAME\nICSR     IC    R1,TIOELNGH         NEXT DD ENTRY\n         AR    R6,R1\n         B     ICDDS\nOPNIC    MVC   DDNAM(L'TIOEDDNM),TIOEDDNM\n         DROP  R6\n         OI    DDMS+1,ON\n         EJECT\n        $EACM  REQAUT\n         CLI   AUTH,LV15\n         BE    *+L'*+4\n         NI    ICFSW,255-ICFMSPW\n        $ICFSO DDNAM,DVTYP,,ICFSW\n         LTR   R15,R15\n         BNZ   ERICFSO\n         MVI   MINITT,C' '\n         MVC   MINITT+1(L'MINITT-1),MINITT\n         LA    R2,MINITT\n         MVC   0(L'CATNAME,R2),CATNAME\n         LA    R2,L'CATNAME-1(R2)\n         CLI   0(R2),C' '\n         BNE   *+L'*+4\n         BCT   R2,*-8\n         MVC   2(9,R2),=CL9'ON VOLUME'\n         MVC   12(L'CATVOL,R2),CATVOL\n         LA    R2,L'CATVOL+11(R2)\n         CLI   0(R2),C' '\n         BNE   *+L'*+4\n         BCT   R2,*-8\n         MVI   2(R2),C'('\n         LA    R2,3(R2)\n        $DAUNTY DVTYP+3,(R2)       GET DEVICE NAME\n         LTR   R15,R15\n         BZ    DVRCV               OK\n         MVC   0(4,R2),=CL4'?RC='  ERROR, DISPLAY RC\n         CVD   R15,WORKD\n         UNPK  4(2,R2),WORKD+6(2)\n         OI    5(R2),C'0'\n         MVI   6(R2),C'?'\n         LA    R0,7\nDVRCV    ALR   R2,R0\n         MVI   0(R2),C')'\n         LA    R2,MINIT\n         BAS   R10,PRT             PRINT STARTING TITLE\n         MVI   MSG,C' '\n         MVC   MSG+1(L'MSG-1),MSG\n         MVI   MSG+6,C'-'\n         MVC   MSG+7(L'MINIT-8),MSG+6\n         LA    R2,MSG\n         USING LLDSCT,R2\n         BAS   R10,PRT\n         MVC   MSG+2(L'MSG-2),MSG+1\n         BAS   R10,PRT\n         LA    R8,ERUNEXP\n         OI    SWPRT+1,ON\n         EJECT\nNEXT     MVC   MSG+2(L'MSG-2),MSG+1\n        $ICFSR CTYPE,VOLUME,WORK\n         LTR   R15,R15\n         BM    ICFEOF\n         BNZ   ERICFSR\n         CLI   CTYPE,255           CONTINUATION?\n         BER   R8                  YES, GO TO CONTINUE PROCESS\nSWPRT    B     *+L'*+8\n         OI    SWPRT+1,ON\n         BAS   R14,PRT\n         LA    R1,TBTYPES          SCAN TYPES TABLE\nSCANTB   CLI   0(R1),0             END OF TABLE?\n         BE    ERUNEXP             YES, UNEXPECTED TYPE\n         CLC   0(1,R1),CTYPE       THIS TYPE?\n         BE    GOTO                YES\n         LA    R1,L'TBTYPES(R1)    NO, NEXT ENTRY\n         B     SCANTB\nGOTO     ICM   R15,B'1111',1(R1)   GET ADDRESS TO PROCESS THIS TYPE\n         BR    R15                 GO TO PROCESS IT\n         SPACE 2\nNONVSAM  MVC   LLTY,=CL8'NON-VSAM'\nCOMDS    BASR  R8,0\n         MVC   LLNM,DSNAME\n         MVC   LLVL,VOLUME\n         OC    WORK,WORK\n         BZ    COMDS2\n         LA    R15,LLUN\n        $DVTYUN WORK,(R15)         GET UNIT NAME\n         LTR   R15,R15\n         BZ    COMDS1              OK\n         MVC   LLUN(4),=CL4'?RC='  ERROR, DISPLAY RC\n         CVD   R15,WORKD\n         UNPK  LLUN+4(2),WORKD+6(2)\n         OI    LLUN+5,C'0'\n         MVI   LLUN+6,C'?'\nCOMDS1   OC    FSEQ,FSEQ\n         BZ    COMDS2\n         XR    R0,R0\n         ICM   R0,B'0011',FSEQ\n         CVD   R0,WORKD\n         MVC   LLSQ,=XL6'402020202120'\n         ED    LLSQ,WORKD+5\nCOMDS2   BAS   R10,PRT\n         B     NEXT\n         SPACE 1\nGDGDS    CLC   VOLUME,=CL6' '\n         BE    *+L'*+10\n         MVC   LLTY,=CL8'GDG D.S.'\n         B     COMDS\n         MVC   LLTY,=CL8'NULL GDG'\n         B     COMDS\n         SPACE 1\nCLUSTER  MVC   LLTY(7),=CL7'CLUSTER'\n         CLI   DSNAME,C' '\n         BNE   COMCL\n         TM    ICFSW,ICFMSPW\n         BZ    COMCL+L'COMCL\n         CLI   MSPW,0\n         BE    *+L'*+8\n         CLI   MSPW,255\n         BNE   *+L'*+10\n         MVC   LLNM(18),=CL18'NO MASTER PASSWORD'\n         B     COMCL+L'COMCL\n         MVC   LLNM(18),=CL18'MASTER PASSWORD : '\n         MVC   LLNM+18(L'MSPW),MSPW\n         XC    MSPW,MSPW\n         B     COMCL+L'COMCL\nCOMCL    MVC   LLNM,DSNAME\n         BAS   R10,PRT\n         LA    R8,ERUNEXP\n         B     NEXT\n         SPACE 1\nALTIX    MVC   LLTY(3),=CL3'AIX'\n         B     COMCL\n         SPACE 1\nDATA     MVC   LLST+2(4),=CL4'DATA'\n         B     COMDS\n         SPACE 1\nINDEX    MVC   LLST+1(5),=CL5'INDEX'\n         B     COMDS\n         SPACE 1\nPATH     MVC   LLTY(4),=CL4'PATH'\nCOMAS    MVC   LLNM,DSNAME\n         LA    R3,LLNM+L'DSNAME-1\n         CLI   0(R3),C' '\n         BNE   *+L'*+4\n         BCT   R3,*-8\n         NI    SWPRT+1,OFF\n         BAS   R8,NEXT+L'NEXT\n         OI    SWPRT+1,ON\n         BASR  R8,0\n         MVI   2(R3),C'/'\n         MVC   4(L'DSNAME,R3),DSNAME\n         BAS   R10,PRT\n         B     NEXT\n         SPACE 1\nALIAS    MVC   LLTY(5),=CL5'ALIAS'\n         B     COMAS\n         SPACE 1\nAIXTN    MVC   LLST+3(3),=CL3'AIX'\nCOMTN    MVC   LLTY(8),=CL8'TRUENAME'\n         B     COMAS\n         SPACE 1\nDATATN   MVC   LLST+2(4),=CL4'DATA'\n         B     COMTN\n         SPACE 1\nINDEXTN  MVC   LLST+1(5),=CL5'INDEX'\n         B     COMTN\n         SPACE 1\nICFCN    MVC   LLST+3(3),=CL3'ICF'\nCOMCN    MVC   LLTY(7),=CL7'CONNECT'\n         B     COMDS\n         SPACE 1\nVSAMCN   MVC   LLST+2(4),=CL4'VSAM'\n         B     COMCN\n         SPACE 1\n         DROP  R2\n         EJECT\nERUNEXP  LA    R2,UNEXP\n         BAS   R10,PRT\n         NI    SWRCC+1,OFF\n         B     ICFEND\nERICFSO  MVC   ERRM+6(5),=CL5'ICFSO'\n         CH    R15,=H'2'\n         BE    ORC2\n         CH    R15,=H'9'\n         BE    ORC9\nORCN     BAS   R8,PMERR\n         B     NXICF\nORC2     BAS   R8,PMREG\n         B     NXICF\nORC9     LTR   R0,R0\n         BNZ   ORC2\n         LTR   R1,R1\n         BZ    ORCN\n         B     ORC2\nERICFSR  MVC   ERRM+6(5),=CL5'ICFSR'\n         CH    R15,=H'1'\n         BE    RRC1\n         BAS   R8,PMERR\n         B     ICFEND\nRRC1     BAS   R8,PMREG\n         B     ICFEND\nERICFSC  MVC   ERRM+6(5),=CL5'ICFSC'\n         CH    R15,=H'2'\n         BE    CRC2\n         BAS   R8,PMERR\n         B     NXICF\nCRC2     BAS   R8,PMREG\n         B     NXICF\n         EJECT\nICFEOF   LTR   R0,R0\n         BNZ   *+L'*+6\n         LTR   R1,R1\n         BZ    ICFEND\n         MVC   ERRM+6(5),=CL5'CLOSE'\n         MVC   ERRM+L'ERRM-3(2),=CL2'-1'\n         NI    SWPME+1,OFF\n         BAS   R8,PMREG\nICFEND  $ICFSC NCTR\n         LTR   R15,R15\n         BNZ   ERICFSC\n         MVC   STTMT,MINITT\n         LA    R2,STTM\n         BAS   R10,PRT\n         LA    R2,MSG\n         LA    R3,NCTR-L'NCTR\n         LA    R4,NCTRT\n         LA    R5,NCTRN\n         MVI   MSG+1,C' '\n         MVC   MSG+2(L'MSG-2),MSG+1\n         B     LOOP+L'LOOP\nLOOP     LA    R4,L'NCTRT(R4)\n         LA    R3,L'NCTR(R3)\n         MVC   MSG(1),0(R4)\n         MVC   MSG+18(L'NCTRT-1),1(R4)\n         L     R1,0(R3)\n         CVD   R1,WORKD\n         CLI   1(R4),C' '\n         BE    ALTPR\n         MVC   MSG+10(7),=XL7'20202020202120'\n         ED    MSG+9(8),WORKD+4\n         MVC   MSG+L'NCTRT+18(7),MSG+L'NCTRT+17\n         B     LNEPR\nALTPR    MVC   MSG+L'NCTRT+18(7),=XL7'20202020202120'\n         ED    MSG+L'NCTRT+17(8),WORKD+4\n         MVC   MSG+10(7),MSG+9\nLNEPR    BAS   R10,PRT\n         BCT   R5,LOOP\n         LA    R2,ENDM\n         BAS   R10,PRT\nNXICF    XR    R1,R1\n         B     ICSR\n         EJECT\nDDMS     NOP   SWRCC\n         LA    R2,MISM\n         BAS   R10,PRT\nSWRCC    B     *+L'*+8\n         LA    R9,64               C.C. = 64. - - - - - - - - - - - -\n         B     *+L'*+2\n         XR    R9,R9               C.C. = 0.  - - - - - - - - - - - -\n        $PCLOSE\nLEAVE   $XRET  CC=(R9)\n         EJECT\n*        PRINT ROUTINES.\n*              R0  = WORK REGISTER\n*              R1  = WORK REGISTER\n*              R2  = MESSAGE ADDRESS\n*              R10 = LINK REGISTER\n*              R14 = WORK REGISTER\n*              R15 = WORK REGISTER\n*        NOTE. MESSAGE ADDRESS POINTS TO THE MESSAGE TEXT (ASA\n*              CONTROL CHARACTER), PRECEEDED BY THE ONE BYTE\n*              MESSAGE TEXT LENGTH.\n         SPACE 1\nPRT     $PRINT (R2)\n         LTR   R15,R15             PRINT COMPLETION CODE?\n         BZR   R10                 OK, RETURN\n         LR    R9,R15              C.C. = FROM 4 TO 20. - - - - - - -\n         SLL   R9,2\n        $ICFSC\n         B     LEAVE\n         EJECT\n*        VSAM ERROR CODE ROUTINE.\n*              R0  = VSAM CODE\n*              R1  = VSAM CODE\n         SPACE 1\nPMREG    ST    R0,WORK\n         UNPK  ERRMR0(9),WORK(5)\n         TR    ERRMR0,TRTAB-X'F0'\n         MVI   ERRMR0+L'ERRMR0,C'/'\n         ST    R1,WORK\n         UNPK  ERRMR1(9),WORK(5)\n         TR    ERRMR1,TRTAB-X'F0'\n         MVI   ERRMR1+L'ERRMR1,C')'\n         LA    R0,L'ERRM+L'ERRMR\nSWPME    B     PMERR+L'PMERR\n         OI    SWPME+1,ON\n         B     PMSTL\n         SPACE 2\n*        PRINT ERROR CODE ROUTINE.\n*              R0  = WORK REGISTER\n*              R1  = WORK REGISTER\n*              R2  = WORK REGISTER\n*              R8  = LINK REGISTER\n*              R10 = WORK REGISTER\n*              R14 = WORK REGISTER\n*              R15 = ERROR CODE\n         SPACE 1\nPMERR    LA    R0,L'ERRM\n         CVD   R15,WORKD\n         UNPK  ERRM+L'ERRM-3(2),WORKD+6(2)\n         OI    ERRM+L'ERRM-2,C'0'\nPMSTL    STC   R0,ERRML\n         MVC   ERRM+13(8),DDNAM\n         LA    R2,ERRM\n         BAS   R10,PRT\n         NI    SWRCC+1,OFF\n         BR    R8                  RETURN\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nWORKD    DC    D'0'\nWORK     DC    F'0'\nZEROS    DC    F'0'\nDVTYP    DC    5F'0'\n         DC    H'0'\nCATVOL   DC    CL6' '\nCATNAME  DC    CL44' '\n         SPACE 1\nDDNAM    DC    CL8' '\nICDD     DC    C'ICDD'\nVOLUME   DC    CL6' '\nFSEQ     DC    XL2'0'\nCTYPE    DC    XL1'0'\nDSNAME   DC    CL44' '\nTRTAB    DC    C'0123456789ABCDEF'\n         SPACE 1\nREQAUT   DC    0F'0',XL1'0',AL3(MDL@IX),AL4(AUTH)\nAUTH     DC    XL1'0'\n        $ICFSW ICFMSPW\nMSPW     DC    XL8'0'\n         SPACE 1\n         DC    AL1(L'MSG)\nMSG      DC    CL132' '\n         DC    AL1(L'MINIT+L'MINITT)\nMINIT    DC    C'1     ICF CATALOG LIST : '\nMINITT   DC    CL80' '\n         DC    AL1(L'STTM+L'STTMT)\nSTTM     DC    C'1     ICF CATALOG INFORMATION : '\nSTTMT    DC    CL80' '\n         DC    AL1(L'ENDM)\nENDM     DC    C'0     END OF ICF CATALOG LIST.'\n         DC    AL1(L'UNEXP)\nUNEXP    DC    C'0         -- UNEXPECTED CATALOG INDICATOR RECEIVED --'\n         DC    AL1(L'MISM)\nMISM     DC    C'1         ICDD.... DD-CARD(S) MISSING.'\nERRML    DC    AL1(*-*)\nERRM     DC    C'0           (        ) : RETURN CODE   .'\nERRMR    DC    C'(R0/R1 :                   '\nERRMR0   EQU   ERRMR+9,8\nERRMR1   EQU   ERRMR+18,8\n         EJECT\n        LTORG\n         EJECT\n*                   ----+----1----+----2----+---\nNCTRT    DC    CL28'0GETS ISSUED AGAINST THE BCS'      1\n         DC    CL28'0NONVSAM ENTRIES'                  2\n         DC    CL28' CLUSTER ENTRIES'                  3\n         DC    CL28'   ALTERNATE INDEX ENTRIES :'      4\n         DC    CL28'    DATA (CLUSTER) ENTRIES :'      5\n         DC    CL28'   INDEX (CLUSTER) ENTRIES :'      6\n         DC    CL28' GDG BASE ENTRIES'                 7\n         DC    CL28'               GDG ENTRIES :'      8\n         DC    CL28' PATH ENTRIES'                     9\n         DC    CL28' ALIAS ENTRIES'                   10\n         DC    CL28' TRUENAME ENTRIES'                11\n         DC    CL28' ICF CONNECTOR ENTRIES'           12\nNCTRN    EQU   (*-NCTRT)/L'NCTRT\n         SPACE 1\nNCTR     DC    (NCTRN)F'0'\n         SPACE 2\nTBTYPES  DS    0XL5                TABLE TYPES / PROCESS\n         DC    AL1(1),AL4(NONVSAM)      NON-VSAM NAME\n         DC    AL1(2),AL4(GDGDS)        GDG NAME\n         DC    AL1(3),AL4(CLUSTER)      CLUSTER NAME\n         DC    AL1(4),AL4(ALTIX)        ALT. INDEX NAME\n         DC    AL1(5),AL4(DATA)         DATA NAME\n         DC    AL1(6),AL4(INDEX)        INDEX NAME\n         DC    AL1(7),AL4(PATH)         PATH NAME\n         DC    AL1(8),AL4(ALIAS)        ALIAS NAME\n         DC    AL1(9),AL4(AIXTN)        AIX TRUE-NAME\n         DC    AL1(10),AL4(DATATN)      DATA TRUE-NAME\n         DC    AL1(11),AL4(INDEXTN)     INDEX TRUE-NAME\n         DC    AL1(12),AL4(ICFCN)       ICF CONNECT NAME\n         DC    AL1(13),AL4(VSAMCN)      VSAM CONNECT NAME\n         DC    AL1(0)              END TABLE INDICATOR\n         EJECT\nLLDSCT   DSECT                     LINE DESCRIPTION\nLLCC     DS    CL1,CL9             ASA CC\nLLTY     DS    CL8,CL2             TYPE\nLLST     DS    CL6,CL2             SUB-TYPE\nLLNM     DS    CL44,CL2            NAME\nLLVL     DS    CL6,CL2             VOLUME SERIAL NUMBER\nLLUN     DS    CL8,CL2             UNIT NAME\nLLSQ     DS    CL6,CL2             FILE SEQUENCE NUMBER\n         SPACE 2\n        PRINT  NOGEN\nTIODSECT DSECT\n        IEFTIOT1\n        PRINT  GEN\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICFLIST$": {"ttr": 17155, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x109\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//ICFLIST  JOB (........),'INSTALL -ICFLIST-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   DAUNTY    DVTYUN    ICFS      TXPRINT    *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=ICFLIST\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(DAUNTY,DVTYUN,ICFSR,PRINT)\n  ENTRY   ICFLIST\n  NAME    ICFLIST(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICFLIST@": {"ttr": 17157, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87!\\x7f\\x00\\x87!\\x7f\\x152\\x003\\x003\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-08-05T00:00:00", "modifydate": "1987-08-05T15:32:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "SYSPAJA"}, "text": "1   05/08/87\n                                                      ICFLIST   1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          ICF CATALOG LIST.          * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This program produces a listing of an entire ICF\n  ---------    catalog residing on a volume which is a direct-access\n               storage device class (UCBTYP+2 = X'20').\n\n               A DD-card, written as below, is needed for each\n               catalog on which the analysis is desired :\n\n               //ICDD...  DD  DSN=...ICF catalog...,DISP=SHR\n\n\n  Call of the program :\n  ---------------------\n\n         //LIST   EXEC  PGM=ICFLIST\n         //STEPCAT  DD  DSN=...Master catalog...,DISP=SHR\n         //ICDD...  DD  DSN=...ICF catalog...,DISP=SHR\n         //ICDD...  DD  --- --- --- --- --- --- --- ---\n         //ICDD...  DD  --- Any number of DD-cards. ---\n         //ICDD...  DD  --- --- --- --- --- --- --- ---\n         //SYSPRINT DD  SYSOUT=A\n\n  Remarks : 1. If you try to analyze a VSAM catalog or an O.S. catalog\n  ---------    (not ICF), you will receive on output print a message\n               of the form :\n                   ICFSO (ICDD... ) : RETURN CODE 10.\n            2. The STEPCAT DD-card is optional if the first ICF.....\n               DD-card refers the master catalog of the running system.\n               If not supplied, you will receive the messages :\n               a) on job log : IEC161I 076-002,...\n               b) on output print : ICFSO (ICDD... ) : RETURN CODE 02.\n                                    (R0/R1 : 000000BC/00000008)\n               at every ICF..... DD-card until that refering the master\n               catalog of the running system.\n            3. If you want to analyze only one ICF catalog which is not\n               master catalog of the running system, you may do it also\n               as shown below :\n                   //STEPCAT  DD  DSN=...ICF catalog...,DISP=SHR\n                   //ICF...   DD  DSN=...ICF catalog...,DISP=SHR\n            4. I didn't search in the IBM Logic manuals about the\n               STEPCAT problem described above, but i have discovered\n               that it is bypassed if you always duplicates the first\n               catalog DD-card as STEPCAT.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ICHCNX0$": {"ttr": 17159, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SYSPAJA"}, "text": "//ICHCNX00 JOB (........),'INSTALL  -ICHCNX00-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*       THIS EXIT IS NOW OBSOLETED AT OUR INSTALLATION (91/03/15)   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=ICHCNX00,OPT=',RENT'\n//LNK     EXEC PAJILKR,OPT=',RENT,REFR'\n//SYSIN     DD *\n  ENTRY   ICHCNX00\n  NAME    ICHCNX00(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHCNX00": {"ttr": 17161, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x0f\\x00\\x882\\x0f\\x10\\x14\\x00e\\x00e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-15T00:00:00", "modifydate": "1988-11-15T10:14:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "SYSPAJA"}, "text": "NX00     TITLE 'RACF - COMMAND PRE-PROCESSING EXIT (ICHCNX00).'\nICHCNX00 START 0\n         SPACE 1\n* PURPOSE :    USERS WHO ARE NOT ALLOWED TO USE RACF FOR DATA-SETS\n* ---------    PROTECTION MUST BE AVOID FROM ACCESS THE 'ADDSD',\n*              'ALTDSD', 'DELDSD' AND 'PERMIT' COMMANDS.\n*\n* METHOD :     A USER WHO DON'T HAVE THE ADSP ATTRIBUTE OR THE\n* --------     INSTALLATION DATA FIELD CONTAINING THE KEYWORD\n*              'ALLOWED' WILL BE REJECTED.\n*\n* AT ENTRY TO THE ICHCNX00 EXIT ROUTINE, THE REGISTER 1 CONTAINS THE\n* --------     ADDRESS OF THE PARAMETER LIST AREA (MAPPED BY ICHCNXP).\n*\n* AT EXIT FROM THE ICHCNX00 EXIT ROUTINE, THE REGISTER 15 SHOULD\n* -------      CONTAIN A RETURN CODE FOR PROCESSING CONTINUATION AS\n*              BELOW :\n*               0 - NORMAL PROCESSING IS TO CONTINUE.\n*               4 - THE REQUEST IS NOT ACCEPTED, AND IS TO BE FAILED.\n*               8 - THE REQUEST IS NOT ACCEPTED, AND IS TO BE FAILED.\n*              12 - EXIT ROUTINE PROCESSING IS COMPLETE, AND THE\n*                   REQUEST IS GRANTED.\n*\n* AUTHOR :     RAVARANI N. - MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 1\n        $DEFREG\nICHCNX00 AMODE ANY\nICHCNX00 RMODE ANY\n         EJECT\n        $XENT  BASE=R12,TYPE=RENT\n         USING CNXPL,R1\n         ICM   R2,B'1111',CNXCALLR GET CALLER ADDRESS\n         LA    R3,CMDTBL           COMMANDS TABLE ADDRESS\n         LA    R4,L'CMDTBL         COMMANDS TABLE ELEMENT LENGTH\n         LA    R5,CMDTBLE          COMMANDS TABLE ENDING ADDRESS\nSCANTBL  CLC   0(L'CMDTBL,R3),0(R2)     IS IT THIS FUNCTION CODE?\n         BE    GOTEST              YES\n         BXLE  R3,R4,SCANTBL       LOOP IF MORE\n         B     LETSGO\n         USING PSA,R0              ADRESS PSA\nGOTEST   L     R2,PSAAOLD          GET ADDRESS OF ASCB\n         LTR   R2,R2               VERIFY ADDRESS\n         BZ    LETSGO              SOMETHING WRONG\n         DROP  R0\n         USING ASCB,R2             ESTABLISH ADDRESSABILITY\n         CLC   ASCBASCB,=CL4'ASCB' VERIFY CONTROL BLOCK\n         BNE   LETSGO              WHAT'S HAPPENING?\n         L     R2,ASCBASXB         GET ADDRESS OF ASXB\n         LTR   R2,R2               VERIFY ADDRESS\n         BZ    LETSGO              SOMETHING WRONG\n         DROP  R2\n         USING ASXB,R2             ESTABLISH ADDRESSABILITY\n         CLC   ASXBASXB,=CL4'ASXB' VERIFY CONTROL BLOCK\n         BNE   LETSGO              WHAT'S HAPPENING?\n         L     R3,ASXBSENV         GET ACEE ADDRESS\n         LTR   R3,R3               VERIFY ADDRESS\n         BZ    LETSGO              SOMETHING WRONG\n         DROP  R2\n         USING ACEE,R3             ESTABLISH ADDRESSABILITY TO ACEE\n         TM    ACEEFLG1,ACEEADSP   ADSP ATTRIBUTE?\n         BO    LETSGO              YES, USER IS AUTHORIZED\n         L     R6,ACEEINST         GET ADDRESS OF INSTALLATION DATA\n         DROP  R3\n         LTR   R6,R6               ANY INSTALLATION DATA?\n         BZ    REJECT              NO\n         CLI   0(R6),7             IS INSTALLATION DATA LONG ENOUGH?\n         BL    REJECT              NO\n         XR    R5,R5\n         IC    R5,0(R6)            GET INSTALLATION DATA LENGTH\n         LA    R5,0(R5,R6)         POINT TO LAST BYTE\n         SH    R5,=H'6'            LAST POSITION TO COMPARE\n         LA    R4,1                COMPARE STEP\nBUMP     BXLE  R6,R4,SCAN          NEXT IF MORE\nREJECT   LA    R15,4               SET REQUEST NOT ACCEPTED -----------\n         B     GOBACK\nSCAN     CLC   0(7,R6),=CL7'ALLOWED'    IS USER ALLOWED?\n         BNE   BUMP                NO, LOOK FURTHER\n         DROP  R1\nLETSGO   XR    R15,R15             SET ACCEPT RETURN CODE -------------\nGOBACK  $XRET  CC=(R15),TYPE=RENT\n         EJECT\nCMDTBL   DS    0XL1\n         DC    XL1'03'             ADDSD\n         DC    XL1'04'             ALTDSD\n         DC    XL1'05'             DELDSD\n         DC    XL1'07'             PERMIT\nCMDTBLE  EQU   *-L'CMDTBL          END OF TABLE\n         SPACE 2\n        LTORG\n         SPACE 2\n        PRINT  NOGEN\n        ICHCNXP\n        IHAPSA\n        IHAASCB\n        IHAASXB\n        IHAACEE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRCX01": {"ttr": 17164, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x0f\\x00\\x882\\x0f\\x10!\\x00a\\x00a\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-15T00:00:00", "modifydate": "1988-11-15T10:21:00", "lines": 97, "newlines": 97, "modlines": 0, "user": "SYSPAJA"}, "text": "CX01     TITLE 'RACF - RACHECK PRE-PROCESSING EXIT (ICHRCX01).'\nICHRCX01 START 0\n         SPACE 1\n* PURPOSE :    ESTABLISH FAST PATH AUTHORIZATION CHECKING FOR OWNERS\n* ---------    OF DATA-SETS.\n*\n* METHOD :     IF (CLASS=DATASET) THEN\n* --------          IF (ACCESS NE ALTER) THEN\n*                        IF (FLQ = USERID) THEN\n*                             BYPASS PROFILE CHECK;\n*                        END;\n*                   END;\n*              END;\n*\n* AT ENTRY TO THE RACHECK PRE-PROCESSING ROUTINE, THE REGISTER 1\n* --------     CONTAINS THE ADDRESS OF THE PARAMETER LIST AREA.\n*\n* AT EXIT FROM THE RACHECK PRE-PROCESSING ROUTINE, THE REGISTER 15\n* -------      SHOULD CONTAIN A RETURN CODE FOR PROCESSING\n*              CONTINUATION AS BELOW :\n*               0 - NORMAL PROCESSING IS TO CONTINUE.\n*               4 - REQUEST IS NOT ACCEPTED AND IS TO BE FAILED.\n*               8 - REQUEST IS ACCEPTED AND NO MORE PROCESSING IS\n*                   PERFORMED.\n*              12 - EXIT ROUTINE PROCESSING IS COMPLETE, AND THE\n*                   REQUEST IS TO BE GRANTED.\n*\n* AUTHOR :     RAVARANI N.\n* -------      COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 1\n        $DEFREG\nICHRCX01 AMODE ANY\nICHRCX01 RMODE ANY\n         EJECT\n        $XENT  BASE=R12,TYPE=RENT\n         USING RCXPL,R1            ADDRESS PARAMETER LIST\n         L     R2,RCXCLASS         GET CLASS ADDRESS\n         CLI   0(R2),7             IS IT DATA-SET CLASS LENGTH?\n         BNE   LETSGO              NO\n         CLC   1(7,R2),=CL7'DATASET'    IS IT DATA-SET CLASS?\n         BNE   LETSGO              NO\n         L     R2,RCXFLAG2         GET FLAG BYTE 2 ADDRESS\n         TM    0(R2),RCXATTAL      ALTER REQUEST?\n         BO    LETSGO              LETS RACF DECIDE ABOUT\n         L     R2,RCXACEE          ADDRESS OF ACEE ADDRESS\n         L     R2,0(R2)            ACEE ADDRESS\n         LTR   R2,R2               TEST IF ZERO\n         BNZ   ACEEFND             NO, USE THIS ONE\n         USING PSA,R0              WE HAVE TO GET IT FROM ASXB\n         L     R3,PSAAOLD          GET OUR ASCB ADDRESS\n         DROP  R0\n         LTR   R3,R3               VERIFY ADDRESS\n         BZ    LETSGO              SOMETHING WRONG\n         USING ASCB,R3             ESTABLISH ADDRESSABILITY\n         CLC   ASCBASCB,=CL4'ASCB'      VERIFY CONTROL BLOCK\n         BNE   LETSGO              WHAT'S HAPPENING?\n         L     R3,ASCBASXB         GET ASXB ADDRESS\n         LTR   R3,R3               VERIFY ADDRESS\n         BZ    LETSGO              SOMETHING WRONG\n         DROP  R3\n         USING ASXB,R3             ESTABLISH ADDRESSABILITY\n         CLC   ASXBASXB,=CL4'ASXB'      VERIFY CONTROL BLOCK\n         BNE   LETSGO              WHAT'S HAPPENING?\n         L     R2,ASXBSENV         GET ACEE ADDRESS\n         LTR   R2,R2               VERIFY ADDRESS\n         BZ    LETSGO              SOMETHING WRONG\n         DROP  R3\n         USING ACEE,R2             ESTABLISH ADDRESSABILITY\nACEEFND  L     R3,RCXENORP         GET DATA-SET NAME ADDRESS\n         XR    R4,R4               CLEAR REGISTER\n         IC    R4,ACEEUSRL         LENGTH OF USERID\n         LR    R5,R4\n         AR    R5,R3               THIS SHOULD POINT BEHIND FLQ (.)\n         CLI   0(R5),C'.'          IS THIS A DOT?\n         BNE   LETSGO              NO, DO NORMAL CHECK\n         BCTR  R4,0                -1 FOR COMPARE\n         EX    R4,COMPUSID         IS USERID EQUAL?\n         BNE   LETSGO              NO\n         LA    R15,8 ------------- SET NO MORE CHECKS TO BE DONE ------\n         B     GOBACK\nCOMPUSID CLC   0(*-*,R3),ACEEUSRI  COMPARE USERID WITH DSNAME\n         DROP  R1,R2\nLETSGO   XR    R15,R15 ----------- SET NORMAL PROCESSING TO CONTINUE --\nGOBACK  $XRET  CC=(R15),TYPE=RENT\n         EJECT\n        LTORG\n         SPACE 2\n        PRINT  NOGEN\n        ICHRCXP\n        IHAPSA\n        IHAASCB\n        IHAASXB\n        IHAACEE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRCX1$": {"ttr": 17167, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SYSPAJA"}, "text": "//ICHRCX01 JOB (........),'INSTALL  -ICHRCX01-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*       THIS EXIT IS NOW OBSOLETED AT OUR INSTALLATION (91/03/15)   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=ICHRCX01,OPT=',RENT'\n//LNK     EXEC PAJILKR,OPT=',RENT,REFR'\n//SYSIN     DD *\n  ENTRY   ICHRCX01\n  NAME    ICHRCX01(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRDSN$": {"ttr": 17169, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//ICHRDSNT JOB (........),'INSTALL  -ICHRDSNT-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//ASS     EXEC PAJ2AS1,MBR=ICHRDSNT,OPT=',RENT'\n//LNK     EXEC PAJILKR,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   ICHRDSNT\n  NAME    ICHRDSNT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRDSNT": {"ttr": 17171, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x881\\x9f\\x00\\x881\\x9f\\x178\\x008\\x008\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-14T00:00:00", "modifydate": "1988-11-14T17:38:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "SYSPAJA"}, "text": "DSNT     TITLE 'RACF - DATA BASE NAME TABLE ICHRDSNT.'\nICHRDSNT START 0\n         SPACE 1\n* PURPOSE :    DESCRIBE THE RACF DATA BASES TO RACF.\n* ---------    THIS TABLE CONTAINS ENTRIES DESCRIBING EACH RACF\n*              DATA BASE AND ITS BACKUP DATA BASE. A DATA BASE'S\n*              POSITION IN THIS TABLE CORRESPONDS TO THE DATA BASE\n*              NUMBER IN THE RANGE TABLE.\n*\n* DESCRIPTION : THE MODULE SHOULD CONSIST OF A TABLE IN THE FOLLOWING\n* ------------- FORMAT :\n*        - THE FIRST BYTE IS A BINARY NUMBER INDICATING THE NUMBER OF\n*          ENTRIES IN THE TABLE.\n*        - EACH ENTRY CONSISTS OF TWO 44-BYTE DATA BASE NAMES, A 1-BYTE\n*          RESIDENT INDEX BLOCK (OR DATA BLOCK) COUNT FIELD, AND A\n*          1-BYTE FLAG FIELD.\n*          THE FIRST DATA BASE NAME IS THAT OF A PRIMARY DATA BASE. IF\n*          THIS FIELD IS AN ASTERISK, RACF PROMPTS THE OPERATOR DURING\n*          INITIALIZATION, TO SUPPLY THE DATA BASE NAME. THE SECOND\n*          DATA BASE NAME IS THAT OF AN ASSOCIATED BACKUP DATA BASE.\n*          IF THIS FIELD IS AN ASTERISK, RACF PROMPTS THE OPERATOR\n*          AGAIN. A BLANK DATA BASE NAME FIELD INDICATES THE ABSENCE\n*          OF EITHER A PRIMARY OR BACKUP DATA BASE, OR BOTH, FOR THIS\n*          IPL. THE FIRST PRIMARY RACF DATA BASE IS CONSIDERED TO BE\n*          THE \"MASTER\" RACF DATA BASE.\n*          THE RESIDENT INDEX BLOCK COUNT FIELD SPECIFIES THE MAXIMUM\n*          NUMBER OF INDEX BLOCKS TO BE KEPT RESIDENT FOR THE PRIMARY\n*          DATA BASE WHILE IT IS ACTIVE. IF YOU SELECT THE RESIDENT\n*          DATA BLOCKS OPTION, THIS FIELD SPECIFIES THE MAXIMUM NUMBER\n*          OF INDEX, BAM, AND PROFILE BLOCKS TO BE KEPT RESIDENT.\n*          THE FORMAT OF THE FLAG FIELD IS AS FOLLOWS :\n*          BIT SETTING - MEANING\n*          00.. ....     NO UPDATES ARE TO BE DUPLICATED IN THE BACKUP\n*                        DATA BASE.\n*          10.. ....     ALL UPDATES, OTHER THAN STATISTICS, ARE TO BE\n*                        DUPLICATED ON THE BACKUP DATA BASE.\n*          11.. ....     ALL UPDATES, INCLUDING STATISTICS, ARE TO BE\n*                        DUPLICATED ON THE BACKUP DATA BASE.\n*          .... ...1     USE THE RESIDENT DATA BLOCK OPTION FOR THE\n*                        PRIMARY DATA BASE.\n*\n* AUTHOR :     RAVARANI N. - MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         EJECT\n         DC    AL1(NENT)           NUMBER OF ENTRIES IN TABLE.\n         SPACE 2\n         DC    CL44'RACF.PRIM'     NAME OF PRIMARY RACF DATA BASE.\n         DC    CL44'RACF.BACK'     NAME OF BACKUP RACF DATA BASE.\n         DC    AL1(20)             NUMBER RESIDENT INDEX BLOCKS.\n         DC    XL1'80'             FLAGS FIELD.\n         SPACE 2\nNENT     EQU   (*-(ICHRDSNT+1))/90\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ICHRIN03": {"ttr": 17173, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x12/\\x00\\x89\\x12/\\x15\\x03\\x00\\xa0\\x00\\xa0\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-05-02T00:00:00", "modifydate": "1989-05-02T15:03:00", "lines": 160, "newlines": 160, "modlines": 0, "user": "SYSPAJA"}, "text": "IN03     TITLE 'RACF - STARTED PROCEDURES TABLE ICHRIN03.'\n         PRINT OFF\n         MACRO\n&NAME    @GEN  &G=NO,&US=SYSPROC,&GR=SYS1,&P=YES\n         LCLC  &PN,&UN,&GN,&PF\n         AIF   ('&US' EQ '').ERR1\n         AIF   ('&US' EQ '&GR').ERR2\n         AIF   ('&G' EQ 'YES').A\n&PN      SETC  '&NAME'\n         AGO   .B\n.A       ANOP\n&PN      SETC  '*'\n.B       AIF   ('&US' NE '@').C\n&UN      SETC  '='\n         AGO   .D\n.C       ANOP\n&UN      SETC  '&US'\n.D       AIF   ('&GR' NE '').E\n&GN      SETC  ' '\n         AGO   .G\n.E       AIF   ('&GR' NE '@').F\n&GN      SETC  '='\n         AGO   .G\n.F       ANOP\n&GN      SETC  '&GR'\n.G       AIF   ('&P' NE 'YES').H\n&PF      SETC  'PRV'\n         AGO   .I\n.H       ANOP\n&PF      SETC  '0'\n.I       DC    CL8'&PN',CL8'&UN',CL8'&GN',AL1(&PF),XL7'0'\n         MEXIT\n.ERR1    MNOTE 8,' INVALID - USERID NAME MUST BE SPECIFIED ********** '\n         MEXIT\n.ERR2    MNOTE 8,' INVALID - SAME NAME IN USERID AND GROUP ********** '\n         MEND\n         PRINT ON\n         SPACE 1\nICHRIN03 START 0\n         SPACE 1\n* PURPOSE :    ASSOCIATE THE NAMES OF STARTED PROCEDURES TO USERIDS\n* ---------    AND GROUP NAMES.\n*\n* DESCRIPTION : THE MODULE SHOULD CONSIST OF A TABLE IN THE FOLLOWING\n* ------------- FORMAT :\n*        - NUMBER OF ENTRIES IN THE FOLLOWING ARRAY : A HALFWORD OF\n*          BINARY DATA, WITH THE HIGH-ORDER BIT TURNED ON TO INDICATE\n*          THE NEW FORMAT USED IN RACF VERSION 1 RELEASE 6 OR LATER\n*          (USE X'0000' OR X'8000' IF THERE ARE NO ENTRIES).\n*        - AN ARRAY : EACH ENTRY CONSIST OF 32-BYTES OF DATA. THE FIRST\n*          24 BYTES OF CHARACTER DATA SHOW THE STARTED PROCEDURE NAME\n*          AND ITS ASSOCIATED USERID AND GROUP NAME. FORMAT EACH ENTRY\n*          AS FOLLOWS :\n*             - STARTED PROCEDURE NAME : 8 BYTES OF CHARACTER DATA. THE\n*               NAME IS REQUIRED. THE STARTED PROCEDURE NAME MUST BE\n*               LEFT JUSTIFIED AND PADDED ON THE RIGHT WITH BLANKS.\n*             - USERID : 8 BYTES OF CHARACTER DATA. A USERID IS\n*               REQUIRED. THE USERID (OR AN EQUAL SIGN FOR GENERIC\n*               ENTRIES) MUST BE LEFT JUSTIFIED AND PADDED ON THE RIGHT\n*               WITH BLANKS (THE MAXIMUM LENGTH OF A USERID IS EIGHT\n*               CHARACTERS).\n*             - GROUP NAME : 8 BYTES OF CHARACTER DATA. THE GROUP NAME\n*               IS OPTIONAL. IF A GROUP NAME (OR AN EQUAL SIGN FOR\n*               GENERIC ENTRIES) IS USED, IT MUST BE LEFT JUSTIFIED\n*               AND PADDED ON THE RIGHT WITH BLANKS. IF A GROUP NAME\n*               IS NOT USED, THIS FIELD MUST CONTAIN BLANKS.\n*             - FLAGS : 1 BYTE OF BINARY DATA. SETTING BIT 0 ON\n*               (X'80') INDICATES THAT THIS ENTRY HAS THE \"PRIVILEGED\"\n*               ATTRIBUTE. THE REMAINING 7 BITS MUST BE ZEROES.\n*             - RESERVED : 7 BYTES OF BINARY DATA. THESE 7 BYTES MUST\n*               BE BINARY ZEROES.\n*\n* NOTE : RACF ACCEPTS STARTED PROCEDURES TABLES (INCLUDING THE USE OF\n* ------ GENERIC ENTRIES) IN THE FORMAT USED IN RACF RELEASES PRIOR\n*        TO RELEASE 6. HOWEVER, YOU CANNOT USE THE OLD FORMAT IF YOU\n*        WANT TO SPECIFY THE PRIVILEGED ATTRIBUTE.\n         EJECT\n* GENERIC ENTRIES : THE STARTED PROCEDURES TABLE CAN CONTAIN ONE\n* ----------------- GENERIC ENTRY, INDICATED BY AN ASTERISK (*) IN THE\n* PROCEDURE NAME FIELD. THIS ENTRY MUST BE THE LAST ENTRY IN THE TABLE,\n* OTHERWISE, IT IS IGNORED. THE CORRESPONDING USERID IN THIS ENTRY CAN\n* BE A VALID USERID OR AN EQUAL SIGN (=). THE GROUP NAME SPECIFIED IN\n* THE TABLE ENTRY CAN BE EITHER BLANKS, A VALID GROUP NAME, OR AN EQUAL\n* SIGN (=).\n*        NOTE : YOU CAN USE THE EQUAL SIGN ONLY FOR A GENERIC STARTED\n*        PROCEDURES TABLE ENTRY, IT IS INVALID FOR NON-GENERIC ENTRIES.\n* WHEN SEARCHING THE TABLE FOR A PROCEDURE NAME MATCH, IF RACF FINDS\n* A PROCEDURE NAME OF \"*\" AS THE LAST ENTRY IN THE TABLE AND THE\n* PROCEDURE NAME WAS NOT SPECIFICALLY MATCHED BY ANY OTHER ENTRY IN\n* THE TABLE, RACF USES THE \"*\" ENTRY AS A MATCH FOR THE PROCEDURE NAME.\n* IF A USERID IS SPECIFIED FOR THE \"*\" ENTRY, RACF ASSOCIATES THAT\n*        USERID WITH THE STARTED PROCEDURE NAME. IF THE USERID FIELD\n*        CONTAINS AN \"=\", RACF USES THE PROCEDURE NAME THAT WAS MATCHED\n*        WITH THE GENERIC ENTRY (*) AS THE USERID.\n* IF THE GROUP NAME IS BLANK, THE STARTED PROCEDURE WILL EXECUTE USING\n*        THE DEFAULT GROUP IN THE PROFILE RECORD FOR THE SPECIFIED\n*        USERID (SPECIFIED ON THE ADDUSER COMMAND). IF THE GROUP NAME\n*        FIELD CONTAINS AN \"=\", RACF USES THE PROCEDURE NAME THAT WAS\n*        MATCHED WITH THE GENERIC ENTRY (*) AS THE GROUP NAME.\n* IF THE GENERIC ENTRY HAS AN \"=\" FOR THE USERID (OR GROUP NAME), THE\n*        PROCEDURE NAME THAT MATCHES THE EQUAL SIGN MUST BE DEFINED TO\n*        RACF AS A USERID (OR GROUP NAME), OTHERWISE THE PROCEDURE RUNS\n*        AS AN UNDEFINED RACF USER (USERID = *).\n* THE USERID AND THE GROUP NAME CANNOT BOTH CONTAIN VALUES OF \"=\" IN\n* THE \"*\" PROCEDURE NAME ENTRY OF THE TABLE BECAUSE IT IS NOT POSSIBLE\n* TO HAVE A RACF USER AND GROUP WITH THE SAME NAME.\n*\n* AUTHOR :     RAVARANI N. - MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 2\nPRV      EQU   X'80'               PRIVILEGED ATTRIBUTE\n         SPACE 1\n         DC    AL2(X'8000'+NENT)   NUMBER OF ENTRIES IN TABLE\n         EJECT\nADMPRINT @GEN\nAPSWPROC @GEN\nAUTO     @GEN\nCCSP     @GEN\nCJSM     @GEN\nCM       @GEN\nCMIPL    @GEN\nCNMPROC  @GEN\nCNMPSSI  @GEN\nDSPRINT  @GEN\nEREP     @GEN\nGTF      @GEN\nINIT     @GEN\nIZAP     @GEN\nJES2     @GEN\nJES328X  @GEN\nKNET     @GEN\nMDFWATCH @GEN\nMRSD     @GEN\nMVSS     @GEN\nNET      @GEN\nNETVIEW  @GEN\nNOTICE   @GEN\nOPER     @GEN\nRMF      @GEN\nR1       @GEN\nSAMPLER  @GEN\nSCHEDRUN @GEN\nSETCLOCK @GEN\nSHUTDOWN @GEN\nSMIT     @GEN\nTPX      @GEN\nTSOMON   @GEN\nXWTR     @GEN\n         SPACE 1\n$RV1     @GEN  ,                   RESERVED\n$RV2     @GEN  ,                   RESERVED\n$RV3     @GEN  ,                   RESERVED\n$RV4     @GEN  ,                   RESERVED\n         SPACE 1\n$LAST    @GEN  G=YES,US=@,GR=,P=NO\nNENT     EQU   (*-(ICHRIN03+2))/32\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ICHRIN3$": {"ttr": 17412, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//ICHRIN03 JOB (........),'INSTALL  -ICHRIN03-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//ASS     EXEC PAJ2AS2,MBR=ICHRIN03,OPT=',RENT'\n//LNK     EXEC PAJILKR,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   ICHRIN03\n  NAME    ICHRIN03(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEAVMXI$": {"ttr": 17414, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "SYSPAJA"}, "text": "//IEAVMXIT JOB (........),'INSTALL  -IEAVMXIT-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*       REFER TO IEAVMXIT SOURCE AND MANUAL GC28-1147 (MVS/XA       *\n//*       USER EXITS) FOR DOCUMENTATION.                              *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS4,MBR=IEAVMXIT,OPT=',RENT'\n//LNK     EXEC PAJILKL,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   IEAVMXIT\n  NAME    IEAVMXIT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEAVMXIT": {"ttr": 17416, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x91'_\\x00\\x91'_\\x14!\\x03\\x94\\x03\\x94\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-02T00:00:00", "modifydate": "1991-10-02T14:21:00", "lines": 916, "newlines": 916, "modlines": 0, "user": "SYSPAJA"}, "text": "MXIT     TITLE 'IEAVMXIT - COMMUNICATIONS TASK USER EXIT.'\n        PRINT OFF\n         MACRO           GENERATE TABLE MESSAGES ENTRIES.\n&NAME   @GM    &MID,&AT=,&RPL=,&CMD=\n         LCLC  &L,&S,&T\n         AIF   (N'&SYSLIST EQ 0).MISS\n         AIF   (T'&MID EQ 'O').MISS\n         AIF   (N'&SYSLIST NE 1).TOO\n&NAME    DC    CL8'&MID'\n&T       SETC  'SUPRQ'\n         AIF   ('&RPL' EQ '').A\n&T       SETC  '&T'.'+RPLRQ'\n.A       AIF   ('&CMD' EQ '').B\n&T       SETC  '&T'.'+CMDRQ'\n.B       AIF   ('&AT' EQ '').C\n&T       SETC  '&T'.'+SPPRQ'\n.C       DC    AL1(&T)\n         AIF   ('&AT' EQ '').D\n         DC    AL2(&AT-&SYSECT)\n.D       AIF   ('&RPL' EQ '').F\n&L       SETC  'JRC'.'&SYSNDX'.'R'\n&S       SETC  '&RPL'\n         AIF   ('&S'(1,1) EQ '''').E\n         AIF   (K'&S GT 100).ERRR\n         DC    AL1(L'&L-1)\n&L       DC    C'&S'\n         AGO   .F\n.E       AIF   (K'&S GT 102).ERRR\n         DC    AL1(L'&L-1)\n&L       DC    C&S\n.F       AIF   ('&CMD' EQ '').G\n&L       SETC  'JRC'.'&SYSNDX'.'C'\n&S       SETC  '&CMD'\n         AIF   ('&S'(1,1) EQ '''').H\n         AIF   (K'&S GT 100).ERRC\n         DC    AL1(L'&L-1)\n&L       DC    C'&S'\n.G       AGO   .END\n.H       AIF   (K'&S GT 102).ERRC\n         DC    AL1(L'&L-1)\n&L       DC    C&S\n         AGO   .END\n.MISS    MNOTE 8,' MID POSITIONAL OPERAND MISSING ******************* '\n         AGO   .END\n.TOO     MNOTE 8,' TOO MANY POSITIONAL OPERANDS ********************* '\n         AGO   .END\n.ERRR    MNOTE 8,' RPL KEYWORD OPERAND TOO LONG ********************* '\n         AGO   .END\n.ERRC    MNOTE 8,' CMD KEYWORD OPERAND TOO LONG ********************* '\n.END     SPACE 1\n         MEND\n         MACRO           GENERATE TABLE MESSAGES ENTRIES.\n&NAME   @GA    &MID,&AT=,&NRP=,&ARP=\n         LCLC  &L,&S\n         AIF   (N'&SYSLIST EQ 0).MISS\n         AIF   (T'&MID EQ 'O').MISS\n         AIF   (N'&SYSLIST NE 1).TOO\n         AIF   ('&AT' EQ '').ERRT\n         AIF   ('&NRP' EQ '').ERRN\n         AIF   ('&ARP' EQ '').ERRA\n&NAME    DC    CL8'&MID'\n         DC    AL1(ALTRQ)\n         DC    AL2(&AT-&SYSECT)\n&L       SETC  'JRC'.'&SYSNDX'.'N'\n&S       SETC  '&NRP'\n         AIF   ('&S'(1,1) EQ '''').A\n         AIF   (K'&S GT 100).ERRLN\n         DC    AL1(L'&L-1)\n&L       DC    C'&S'\n         AGO   .B\n.A       AIF   (K'&S GT 102).ERRLN\n         DC    AL1(L'&L-1)\n&L       DC    C&S\n.B       ANOP\n&L       SETC  'JRC'.'&SYSNDX'.'A'\n&S       SETC  '&ARP'\n         AIF   ('&S'(1,1) EQ '''').C\n         AIF   (K'&S GT 100).ERRLA\n         DC    AL1(L'&L-1)\n&L       DC    C'&S'\n         AGO   .END\n.C       AIF   (K'&S GT 102).ERRLA\n         DC    AL1(L'&L-1)\n&L       DC    C&S\n         AGO   .END\n.MISS    MNOTE 8,' MID POSITIONAL OPERAND MISSING ******************* '\n         AGO   .END\n.TOO     MNOTE 8,' TOO MANY POSITIONAL OPERANDS ********************* '\n         AGO   .END\n.ERRT    MNOTE 8,' AT KEYWORD OPERAND MISSING *********************** '\n         AGO   .END\n.ERRN    MNOTE 8,' NRP KEYWORD OPERAND MISSING ********************** '\n         AGO   .END\n.ERRA    MNOTE 8,' ARP KEYWORD OPERAND MISSING ********************** '\n         AGO   .END\n.ERRLN   MNOTE 8,' NRP KEYWORD OPERAND TOO LONG ********************* '\n         AGO   .END\n.ERRLA   MNOTE 8,' ARP KEYWORD OPERAND TOO LONG ********************* '\n.END     SPACE 1\n         MEND\n         MACRO           GENERATE TABLE JOB NAMES ENTRIES.\n&NAME   @GJ\n         LCLA  &N\n         LCLC  &L,&S\n         AIF   ('&NAME' EQ '').A\n&NAME    EQU   *\n.A       AIF   (N'&SYSLIST EQ 0).MISS\n&N       SETA  1\n.B       AIF   (T'&SYSLIST(&N) EQ 'O').C\n&L       SETC  'JRC'.'&SYSNDX'.'&N'\n&S       SETC  '&SYSLIST(&N)'\n         DC    AL1(L'&L-1)\n&L       DC    C'&S'\n.C       AIF   (N'&SYSLIST EQ &N).END\n&N       SETA  &N+1\n         AGO   .B\n.MISS    MNOTE 8,' JOB NAME POSITIONAL OPERAND MISSING ************** '\n.END     MEND\n         MACRO           GENERATE TABLE USER-ID'S ENTRIES.\n&NAME   @GT\n         LCLA  &N\n         LCLC  &S\n         AIF   ('&NAME' EQ '').A\n&NAME    EQU   *\n.A       AIF   (N'&SYSLIST EQ 0).MISS\n&N       SETA  1\n.B       AIF   (T'&SYSLIST(&N) EQ 'O').C\n&S       SETC  '&SYSLIST(&N)'\n         DC    CL8'&S'\n.C       AIF   (N'&SYSLIST EQ &N).END\n&N       SETA  &N+1\n         AGO   .B\n.MISS    MNOTE 8,' JOB NAME POSITIONAL OPERAND MISSING ************** '\n.END     MEND\n         MACRO           GENERATE TABLE HOLIDAY'S DATES ENTRIES.\n&NAME   @GHDT  &D=,&M=,&Y=\n         LCLA  &N,&NW\n         LCLA  &TM(12)\n&TM(1)   SETA  31                  JAN\n&TM(2)   SETA  28                  FEB\n&TM(3)   SETA  31                  MAR\n&TM(4)   SETA  30                  APR\n&TM(5)   SETA  31                  MAY\n&TM(6)   SETA  30                  JUN\n&TM(7)   SETA  31                  JUL\n&TM(8)   SETA  31                  AUG\n&TM(9)   SETA  30                  SEP\n&TM(10)  SETA  31                  OCT\n&TM(11)  SETA  30                  NOV\n&TM(12)  SETA  31                  DEC\n         AIF   ('&NAME' EQ '').A\n&NAME    EQU   *\n.A       AIF   ('&Y' EQ '').MISY\n         AIF   ('&M' EQ '').MISM\n         AIF   ('&D' EQ '').MISD\n         AIF   (K'&Y NE 4).MINY\n         AIF   (&Y LT 1582).MINY\n         AIF   (&Y GT 4315).MINY\n         AIF   (K'&M GT 2).MINM\n         AIF   (&M LT 1).MINM\n         AIF   (&M GT 12).MINM\n         AIF   (K'&D GT 2).MIND\n         AIF   (&D LT 1).MIND\n&NW      SETA  (&Y/4)*4\n         AIF   (&NW NE &Y).C\n&NW      SETA  (&Y/100)*100\n         AIF   (&NW NE &Y).B\n&NW      SETA  (&Y/400)*400\n         AIF   (&NW NE &Y).C\n.B       ANOP\n&TM(2)   SETA  29                  FEB\n.C       AIF   (&D GT &TM(&M)).MIND\n&N       SETA  1\n&NW      SETA  &D\n.D       AIF   (&N EQ &M).E\n&NW      SETA  &NW+&TM(&N)\n&N       SETA  &N+1\n         AGO   .D\n.E       DC    H'&Y',H'&NW'\n         AGO   .END\n.MIND    MNOTE 8,' D= OPERAND INVALID ******************************* '\n         AGO   .END\n.MINM    MNOTE 8,' M= OPERAND INVALID ******************************* '\n         AGO   .END\n.MINY    MNOTE 8,' Y= OPERAND INVALID ******************************* '\n         AGO   .END\n.MISD    MNOTE 8,' D= OPERAND MISSING ******************************* '\n         AGO   .END\n.MISM    MNOTE 8,' M= OPERAND MISSING ******************************* '\n         AGO   .END\n.MISY    MNOTE 8,' Y= OPERAND MISSING ******************************* '\n.END     MEND\n         MACRO           GENERATE MOVE SPECIFIC TEXT.\n&NAME   @MV    &FROM,&LG,&POS\n         LCLA  &N,&P\n&N       SETA  &LG-1\n&P       SETA  &POS-1\n         MVC   STXT(&LG),&FROM\n         MVC   SPOS(2),=AL1(&P,&N)\n         MEND\n        PRINT ON\n         SPACE 1\n* MODULE NAME : IEAVMXIT\n*\n* DESCRIPTIVE NAME : COMMUNICATIONS TASK USER EXIT FOR MESSAGES\n*\n* FUNCTIONS : ROUTES MESSAGES VIA ROUTING CODE, SUPPRESSES AND\n*             REPLIES TO MESSAGES\n*\n* INPUT DATA : - REG.1 = ADDRESS OF THE CTXT\n*              - REG.13 = ADDRESS OF STANDARD SAVE AREA\n*              - REG.14 = RETURN ADDRESS\n*              - REG.15 = ADDRESS OF ENTRY POINT\n*              REGISTERS SAVED : REG.0 - REG.15\n*              REGISTERS USAGE : - REG.0 = WORK REGISTER\n*                                - REG.1 = WORK REGISTER\n*                                - REG.2 = WORK REGISTER\n*                                - REG.3 = WORK REGISTER\n*                                - REG.4 = WORK REGISTER\n*                                - REG.5 = WORK REGISTER\n*                                - REG.6 = WORK REGISTER\n*                                - REG.7 = POINTER TO CTXT\n*                                - REG.8 = POINTER TO MSG ATTRIBUTES\n*                                - REG.9 = INTERNAL LINK REGISTER\n*                                - REG.11 = MODULE DATA REGISTER\n*                                - REG.12 = MODULE BASE REGISTER\n*                                - REG.13 = POINTER TO STANDARD SAVE\n*                                           AREA\n*                                - REG.14 = WORK REGISTER\n*                                - REG.15 = WORK REGISTER\n*              REGISTERS RESTORED : REG.0 - REG.15\n*\n* CONTROL BLOCKS : NAME  MACRO     REASON USED               USAGE\n*                  ----  --------  ------------------------  -------\n*                  CTXT  IEZVX100  USER EXIT PARAMETER LIST  R,W\n*                  MGCR  IEZMGCR   SVC 34 PARAMETER LIST     C,D\n*                  KEY : R-READ, W-WRITE, C-CREATE, D-DELETE\n*\n* MACROS : GETMAIN, FREEMAIN, MGCR, WTO\n*\n* BASE MATERIAL : IBM MANUAL GC28-1147\n*\n* ADAPTED BY :    MOINIL P.A., EURATOM COMPUTING CENTRE\n*                 J.R.C. - ISPRA ESTABLISHMENT\n*                 21020 ISPRA (VA), ITALY\n         EJECT\n***********************************************************************\n***                                                                 ***\n*** AFTER LINK-EDIT IN SYS1.LINKLIB, THE EXIT WILL BE ACTIVATED AS  ***\n*** BELOW :                                                         ***\n*** 1. - RE-IPL'ING THE SYSTEM, OR                                  ***\n*** 2. - ENTERING AT CONSOLE THE FOLLOWING COMMANDS IN SEQUENCE :   ***\n***            F LLA,REFRESH                                        ***\n***            K M,UEXIT=N                                          ***\n***            K M,UEXIT=Y                                          ***\n***                                                                 ***\n***********************************************************************\n         SPACE 2\nIEAVMXIT START 0\nIEAVMXIT AMODE 31\nIEAVMXIT RMODE ANY\n         SPACE 2\nSPINPRVT EQU   230                 SUBPOOL NUMBER\n         SPACE 2\n*---  MESSAGE PROCESSING REQUEST TYPES (FLAGS).\n         SPACE 1\nSUPRQ    EQU   X'00'               MESSAGE SUPPRESS\nRPLRQ    EQU   X'01'               REPLY TO MESSAGE\nCMDRQ    EQU   X'02'               SEND COMMAND TO MESSAGE\nALTRQ    EQU   X'04'               ALTERNATE REPLY TO MESSAGE\nSPPRQ    EQU   X'08'               SPECIFIC PROCESS TO MESSAGE\n         SPACE 2\n*---  STANDARD ENTRY LINKAGE.\n         SPACE 1\n         USING *,R12\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LA    R12,0(R15)          ESTABLISH MODULE BASE REGISTER\n         L     R7,0(R1)            ESTABLISH CTXT ADDRESSABILITY\n         B     BEGIN               BRANCH AROUND IDENTIFICATION\n         SPACE 1\n         DC    CL8'IEAVMXIT',C'-'  IDENTIFIER\n         DC    CL8'&SYSDATE',C'('  ASSEMBLY DATE\n         DC    CL5'&SYSTIME',C')'  ASSEMBLY TIME\n         EJECT\n*---  LOOK IF MESSAGE MUST BE PROCESSED.\n         SPACE 1\n         USING CTXT,R7\nBEGIN    L     R8,CTXTTXPJ         ESTABLISH ADDRESSABILITY TO THE\n         USING CTXTATTR,R8              MESSAGE ATTRIBUTES\n         LH    R0,CTXTTLEN         TEXT LENGTH\n         LA    R1,CTXTTMSG         ADDRESS OF TEXT AREA\nSCMSG    CLI   0(R1),C' '          SEARCH START OF TEXT\n         BNE   FOUND                    (BECAUSE SOMEONE LIKE CJS\n         LA    R1,1(R1)                  SETS A BLANK AHEAD)\n         BCT   R0,SCMSG\n         B     LEAVE               ALL TEXT IS BLANKS\n         USING MSGTEXT,R1          BASE TEXT MAPPING\nFOUND    L     R2,=A(MSGSTB-IEAVMXIT)   START MSGS TABLE DISPLACEMENT\n         ALR   R2,R12\n         XR    R4,R4\nSEARCH   CLI   0(R2),X'FF'         END OF TABLE?\n         BE    LEAVE               YES, NOTHING TO DO\n         CLC   MSGID,0(R2)         THIS MESSAGE?\n         BE    GOTO                YES, GO PROCESS IT\n         LA    R3,L'MSGSTB(R2)     NO, POINT TO FLAGS BYTE\n         LA    R2,L'MSGSTB+1(R2)   BUMP TABLE POINTER\n         CLI   0(R3),SUPRQ         JUST SUPPRESS?\n         BE    SEARCH              YES\n         TM    0(R3),ALTRQ+SPPRQ   NO, ALTERNATE OR SPECIFIC?\n         BZ    *+L'*+4             NO\n         LA    R2,2(R2)            YES, SKIP AT=\n         TM    0(R3),RPLRQ+ALTRQ   REPLY TEXT OR ALTERNATE?\n         BZ    *+L'*+8             NO\n         IC    R4,0(R2)            YES, GET REPLY TEXT LENGTH\n         LA    R2,2(R4,R2)         BUMP TO COMMAND IF ANY\n         TM    0(R3),CMDRQ+ALTRQ   COMMAND TEXT OR ALTERNATE?\n         BZ    SEARCH              NO\n         IC    R4,0(R2)            YES, GET COMMAND TEXT LENGTH\n         LA    R2,2(R4,R2)         BUMP TO NEXT MESSAGE IN TABLE\n         B     SEARCH\n         DROP  R1\n         EJECT\n*---  DYNAMIC STORAGE FOR THIS MODULE IS BEING OBTAINED BELOW 16-MEG\n*     LINE BECAUSE SVC 34 REQUIRES THE MGCR PARAMETER LIST TO BE IN\n*     24-BIT ADDRESSABILITY STORAGE.\n         SPACE 1\nGOTO     LR    R6,R1               SAVE BASE TEXT MAPPING / GETMAIN\n        GETMAIN RC,LV=DATAEND,SP=SPINPRVT,LOC=BELOW\n         LTR   R15,R15             AREA RECEIVED?\n         BZ    OK                  YES\n        WTO    MF=(E,WTOMX)        NO, SIGNAL IT\n         B     LEAVE               EXIT\nOK       LR    R11,R1              ADDRESS RETURNED IN REG.1\n         USING DATAAREA,R11        ADDRESSABILITY TO DYNAMIC STORAGE\n         ST    R13,SAVEAREA+4      SET BACKWARD PTR\n         LA    R15,SAVEAREA        GET ADDRESS OF SAVE AREA\n         ST    R15,8(R13)          SET FORWARD PTR\n         LR    R13,R15             STANDARD SAVE AREA\n         XC    SPOS(2+L'STXT),SPOS INITIALIZE\n         LR    R5,R2               POINT TO MESSAGE ID\n         LA    R3,L'MSGSTB(R2)     POINT TO FLAGS BYTE\n         LA    R2,L'MSGSTB+1(R2)   BUMP TABLE POINTER\n         TM    0(R3),ALTRQ+SPPRQ   ALTERNATE OR SPECIFIC?\n         BZ    PROCESS             NO\n         XR    R4,R4\n         ICM   R4,B'0011',0(R2)    YES, GET AT= LOCATION DISPLACEMENT\n         LA    R2,2(R2)            BUMP TABLE POINTER (REPLY OR CMD)\n         B     0(R4,R12)           GO TO IT\n         EJECT\n***********************************************************************\n***                                                                 ***\n*** AT ENTRY TO SPECIFIC PROCESSING FOR ANY MESSAGE, THE FOLLOWING  ***\n*** POINTERS ARE SET AND MUST BE RETAINED UNLESS INDICATED :        ***\n***                                                                 ***\n***      R2    - REPLY TEXT IN MESSAGES PROCESSING TABLE            ***\n***      R3    - FLAGS BYTE IN MESSAGES PROCESSING TABLE            ***\n***      R5    - MESSAGE ID IN MESSAGES PROCESSING TABLE            ***\n***      R6    - TRUE MESSAGE TEXT START ADDRESS (MAY BE DESTROYED) ***\n***      R7    - COMM TASK EXIT PARAMETER LIST                      ***\n***      R8    - COMM TASK EXIT MESSAGE ATTRIBUTES                  ***\n***                                                                 ***\n***********************************************************************\n         SPACE 2\n*---  DO SPECIFIC PROCESSING FOR MESSAGES $HASP102 AND $HASP103.\n         SPACE 1\n* PURPOSE :    SET THESE SETUP MESSAGES AS ACTION REQUIRED.\n         SPACE 1\nJ2SETUP  OI    CTXTRFB1,CTXTRCDC   REQUEST TO CHANGE DESC. CODE\n         L     R6,CTXTDCP          GET DESCRIPTOR CODES POINTER\n         USING CTXTDESC,R6\n         XC    CTXTDESC(L'CTXTDC1+L'CTXTDC2),CTXTDESC CLEAR ALL CODES\n         OI    CTXTDC1,CTXTDC02    SET DESC. CODE 2 (ACTION)\n         DROP  R6\n         B     FINISH\n         EJECT\n*---  DO SPECIFIC PROCESSING FOR MESSAGE ICH802D.\n         SPACE 1\nICH802D RACSTAT ,                  TEST RACF STATUS\n         LTR   R15,R15             ACTIVE?\n         BZ    FINISH              YES\n         SPACE 1\n* PURPOSE :    WHEN RACF BECOMES INACTIVE DUE TO AN EXCEPTIONAL EVENT,\n*              ONLY OWNER RESOURCES ARE AVAILABLE AND FOR ALL OTHERS\n*              THE SYSTEM INVOLVES OPERATOR WITH THE REPLY TO MESSAGE\n*              ICH802D. SO UNTIL A RECOVERY OCCURS AND RESTORES THE\n*              NORMAL RACF SITUATION, AUTOMATIC REPLIES 'N' OR 'Y' ARE\n*              SUPPLIED HERE, BASED ON JOB OR TSU NAMES OF REQUESTOR\n*              (ALL STC TASKS ARE FULLY AUTHORIZED).\n* REMARK :     'IEAVMXIT' RUN IN THE 'CONSOLE' AS-ID, SO THIS ALLOWS\n*              THE ACCESS TO THE OPERATOR REPLY ELEMENTS (ORE).\n         SPACE 1\n         L     R1,CVTPTR           NO, FIND WHO WANT THE RESOURCE\n         USING CVT,R1\n         L     R15,CVTCUCB\n         USING UCM,R15\n         L     R15,UCMRPYQ         FIRST ORE ADDRESS (REPLY-Q)\n         DROP  R15\n         LTR   R15,R15\n         BZ    PROCESS             NO ORE CHAIN\n         USING OREF,R15\nICH802D1 CLC   ORECBID,=CL4'ORE '\n         BNE   PROCESS\n         CLC   OREID,CTXTRPID      IS THIS THE REPLY ID?\n         BE    ICH802D2            YES\n         L     R15,ORELKP          LINKAGE POINTER\n         LTR   R15,R15             END OF CHAIN?\n         BNZ   ICH802D1            NO, CONTINUE\n         B     PROCESS             YES, NOT FOUND\nICH802D2 MVC   ASID,OREASID        RETAIN THE AS-ID\n         DROP  R15\n         L     R1,CVTASVT          GET ASVT POINTER\n         DROP  R1\n         USING ASVT,R1\n         L     R14,ASVTMAXU        NUMBER OF ASCB'S\n         LA    R15,ASVTENTY        FIRST ENTRY ADDRESS\n         DROP  R1\nICH802D3 TM    0(R15),ASVTAVAL     IS IT AN AVAILABLE ASID?\n         BO    ICH802D4            YES, GO GET NEXT\n         L     R1,0(R15)           GET ASCB ADDRESS\n         USING ASCB,R1\n         CLC   ASID,ASCBASID       IS IT THIS ONE?\n         BE    ICH802D5            YES\nICH802D4 LA    R15,4(R15)          NEXT ENTRY\n         BCT   R14,ICH802D3        LOOP UNTIL END\n         B     PROCESS             NOT FOUND\nICH802D5 L     R15,ASCBJBNI\n         LTR   R15,R15\n         BZ    ICH802D7\n         L     R14,=A(JOBSTB-IEAVMXIT)  JOB\n         ALR   R14,R12\n         XR    R4,R4\nICH802D6 CLC   0(2,R14),=XL2'00FF'\n         BE    PROCESS\n         IC    R4,0(R14)\n         EX    R4,ICH802DZ\n         BE    ICH802DA\n         LA    R14,2(R4,R14)\n         B     ICH802D6\nICH802DZ CLC   1(*-*,R14),0(R15)        <<EXECUTED>>\nICH802D7 L     R15,ASCBJBNS\n         LTR   R15,R15\n         BZ    PROCESS             NOT FOUND\n         L     R0,ASCBTSB\n         LTR   R0,R0\n         BZ    ICH802DA            STC\n         L     R14,=A(TSUSTB-IEAVMXIT)  TSU\n         ALR   R14,R12\nICH802D8 CLI   0(R14),0\n         BE    PROCESS\n         CLC   0(L'TSUSTB,R14),0(R15)\n         BE    ICH802DA\n         LA    R14,L'TSUSTB(R14)\n         B     ICH802D8\n         DROP  R1\nICH802DA XR    R4,R4\n         IC    R4,0(R2)            NORMAL REPLY TEXT LENGTH\n         LA    R2,2(R4,R2)         POINT TO ALTERNATE REPLY\n         B     PROCESS\n         EJECT\n*---  DO SPECIFIC PROCESSING FOR MESSAGE ICH70001I.\n         SPACE 1\n* PURPOSE :    SUPPRESS MESSAGE WHEN REFERING TO DMSJOBS ONLY.\n         SPACE 1\n         USING MSGTEXT,R6\nICH70001 CLC   JOBDATA(25),=CL25'I DMSJOBS  LAST ACCESS AT'\n         BNE   FINISH              LET'S GO\n         DROP  R6\n         OI    CTXTRFB2,CTXTRDTM   SET NO HARDCOPY AND NO DISPLAY\n         B     FINISH\n         SPACE 2\n*---  DO SPECIFIC PROCESSING FOR MESSAGE IEE043I.\n         SPACE 1\n* PURPOSE :    START THE SYSOUT WRITER AUTOMATICALLY.\n         SPACE 1\nIEE043I  L     R1,CVTPTR           GET ADDRESS OF CVT\n         USING CVT,R1\n         L     R15,CVTJESCT        GET ADDRESS OF JESCT\n         DROP  R1\n         USING JESCT,R15\n         TM    JESJESFG,JESPSUBA   IS PRIMARY SUB-SYSTEM ACTIVE?\n         BZ    FINISH              NO, LET MESSAGE\n         L     R1,JESSSCT          YES, GET ADDRESS OF SSCVT FOR JES2\n         DROP  R15\n         USING SSCT,R1\n         L     R15,SSCTSSVT        GET ADDRESS OF SSVT FOR JES2\n         DROP  R1\n         USING SVT,R15\n         ICM   R1,B'1111',SVTIRASN ARE STC AND TSU INTRDR LOCKS?\n         DROP  R15\n         BM    FINISH              YES, JES2 IS COMING DOWN\n         B     PROCESS             NO, GO DO START\n         SPACE 2\n*---  DO SPECIFIC PROCESSING FOR MESSAGE IEF176I.\n         SPACE 1\n* PURPOSE :    STOP THE SYSOUT WRITER AUTOMATICALLY.\n         SPACE 1\n         USING MSGTEXT,R6\nIEF176I  CLC   JOBDATA(4),=CL4'WTR '    VERIFY TEXT\n         BNE   PROCESS\n         CLC   JOBDATA+7(9),=CL9' WAITING '\n         BNE   PROCESS\n        @MV    JOBDATA+4,3,3       HANDLE UNIT NAME XXX\n         DROP  R6\n         B     PROCESS\n         EJECT\n*---  COMMON PROCESSING FOR MESSAGES : IEC301A\n*                                      IGF500D\n         SPACE 1\n* PURPOSE :    REPLY ONLY IF DURING\n*              1. THE 24 HOURS NIGHT INTERVAL OF ANY DAY, EXACTLY\n*                 FROM 10.00 TO 12.00 PM AND 00.00 TO 08.00 AM,\n*              2. THE 24 HOURS OF THE SATURDAY OR SUNDAY,\n*              3. THE 24 HOURS OF SOME HOLIDAYS DATES (NOT SATURDAY\n*                 OR SUNDAY). NOTE - SEE TABLE 'HDTABLE'.\n* WEEKDAY COMPUTATION : GREGORIAN CALENDAR (1582)          MOINIL P.A.\n*        EACH FOURTH YEAR IS A LEAP YEAR, AND YEARS MARKING THE\n*        CENTURY WILL NOT BE LEAP YEARS UNLESS DIVISIBLE BY 400.\n*        I.E. : 1600 WAS A LEAP YEAR, BUT 1700, 1800, 1900 WERE NOT.\n         SPACE 1\nIEC301A  NULL\nIGF500D  NULL\n        TIME   DEC\n         SRL   R0,8                R0 = 00HHMMSS\n         CL    R0,=A(X'00220000')  PAST 10.00 PM?\n         BH    COMTST01            YES, PROCESS\n         CL    R0,=A(X'00080000')  BEFORE 08.00 AM?\n         BL    COMTST01            YES, PROCESS\n         XR    R0,R0               R1 = 0CYYDDDF\n         ST    R0,DWORK\n         SLDL  R0,16               R0 = 00000CYY\n         SRL   R1,16               R1 = 0000DDDF\n         ST    R1,DWORK+4\n         CVB   R15,DWORK           R15 = DAY IN BINARY\n         SLL   R0,4                R0 = 0000CYY0\n         LA    R1,X'0F'            R1 = 0000000F\n         OR    R1,R0               R1 = 0000CYYF\n         ST    R1,DWORK+4\n         AP    DWORK,=PL3'+1900'   ADD BASE CENTURY\n         CVB   R1,DWORK            R1 = FULL YEAR IN BINARY\n         LR    R14,R1\n         XR    R0,R0\n         BCTR  R1,0\n         D     R0,=F'100'\n         LR    R4,R1\n         SRL   R1,2\n         SR    R4,R1\n         LR    R1,R14\n         LR    R0,R1\n         BCTR  R1,0\n         SRL   R1,2\n         AR    R1,R0\n         AR    R1,R15\n         SR    R1,R4\n         XR    R0,R0\n         D     R0,=F'7'\n         LR    R1,R0\n         SLA   R1,1\n         AR    R1,R0\n         LA    R1,DAYT(R1)\n         CLC   0(L'DAYT,R1),NDSAT  TODAY IS SATURDAY?\n         BE    COMTST01            YES, PROCESS\n         CLC   0(L'DAYT,R1),NDSUN  TODAY IS SUNDAY?\n         BE    COMTST01            YES, PROCESS\n         SLL   R14,16\n         OR    R14,R15\n         L     R15,=A(HDTABLE)     CHECK IF HOLIDAY DATE\n         CLC   0(L'HDTABLE,R15),=F'0'   END OF TABLE?\n         BE    FINISH              YES, LETS DECIDE OPERATOR\n         CL    R14,0(R15)          NO, MATCH TODAY?\n         BE    COMTST01            YES, PROCESS\n         LA    R15,L'HDTABLE(R15)  NO, POINT TO NEXT DATE\n         B     *-22\nCOMTST01 CLC   0(8,R5),=CL8'IEC301A'    PROTECTION MESSAGE?\n         BE    PROCESS             YES, PROCESS, OTHERWISE CHECK MORE\n         EJECT\n*---  COMMON PROCESSING FOR MESSAGES : IEA962A\n*                                      IEF238D\n*                                      IEF433D\n         SPACE 1\n* PURPOSE :    REPLY KEYWORD IF PRESENT IN MESSAGE.\n         SPACE 1\n         USING MSGTEXT,R6\nIEA962A  CLC   JOBDATA(29),=CL29'MESSAGE FOR INACTIVE CONSOLE '\n         BNE   FINISH              LET'S GO\n         DROP  R6\nIEF238D  NULL\nIEF433D  NULL\n         LH    R0,CTXTTLEN         TEXT LENGTH\n         LA    R1,CTXTTMSG         ADDRESS OF TEXT AREA\n         XR    R4,R4\n         IC    R4,0(R2)            REPLY TEXT LENGTH\n         CLI   0(R1),C''''         SEARCH KEYWORD\n         BE    *+L'*+18\nCOMPRO01 LA    R1,1(R1)\n         BCT   R0,*-12\n         B     FINISH\n         CLC   1(*-*,R1),1(R2)     <<EXECUTED>>\n         CLR   R4,R0\n         BNL   FINISH\n         EX    R4,*-12\n         BNE   COMPRO01\n         LA    R1,2(R1,R4)\n         SR    R0,R4\n         SH    R0,=H'2'\n         BNP   FINISH\n         CLI   0(R1),C''''\n         BNE   COMPRO01\n         EJECT\n*---  DO REQUESTED PROCESSING FOR A MESSAGE.\n         SPACE 1\nPROCESS  CLI   0(R3),SUPRQ         JUST SUPPRESS?\n         BE    *+L'*+8             YES\n         CLI   0(R3),SPPRQ         JUST SUPPRESS?\n         BNE   *+L'*+8             NO\n         OI    CTXTRFB2,CTXTRDTM   YES, SET NO HARDCOPY AND NO DISPLAY\n         B     FINISH\n         SPACE 1\n*        POINTERS SET : R2 - REPLY TEXT\n*                       R3 - FLAGS BYTE\n*                       R5 - MESSAGE ID\n         SPACE 1\n         XR    R4,R4\n         OI    CTXTRFB2,CTXTRHCO   SUPPRESS MESSAGE (HARDCOPY ONLY)\n         TM    0(R3),RPLRQ+ALTRQ   REPLY OR ALTERNATE REQUESTED?\n         BZ    PRCMD               NO\n         XC    MGCRPL(MGCRLTH),MGCRPL   YES, CLEAR PARAMETER LIST\n         MVC   COMMAND,=CL6'REPLY '     SET REPLY COMMAND IN BUFFER\n         MVC   REPLY,CTXTRPID      INSERT THE REPLY ID\n         MVC   REPLYMSG,=CL2','''\n         IC    R4,0(R2)            REPLY TEXT LENGTH\n         EX    R4,MVRTXT           MOVE REPLY TEXT\n         LA    R1,REPLYTXT+1(R4)\n         MVI   0(R1),C''''\n         LA    R1,(MGCRTEXT-MGCRPL)+REPLYLTH+1(R4)\n         LA    R6,REPLYTXT         REPLY TEXT FOR ECHO\n         BAL   R9,SEND             GO DO IT\n         LA    R2,2(R4,R2)         BUMP TO COMMAND IF ANY\nPRCMD    TM    0(R3),CMDRQ         COMMAND REQUESTED?\n         BZ    FINISH              NO\n         IC    R4,0(R2)            YES, COMMAND TEXT LENGTH\n         XC    MGCRPL(MGCRLTH),MGCRPL   CLEAR PARAMETER LIST\n         MVI   MGCRFLG1,MGCRFI     SET MGCRFLG2 VALID\n         EX    R4,MVCTXT           MOVE COMMAND TEXT\n         TM    0(R3),SPPRQ         SPECIFIC REQUESTED?\n         BZ    PRSCMD              NO\n         CLI   STXT,0              YES, TEXT IN PLACE?\n         BE    PRSCMD              NO, BYPASS\n         XR    R1,R1               YES, SET IN PLACE PREPARED TEXT\n         IC    R1,SLGT\n         XR    R15,R15\n         IC    R15,SPOS\n         LA    R15,COMMAND(R15)\n         EX    R1,MVSTXT\nPRSCMD   LA    R1,(MGCRTEXT-MGCRPL)+1(R4)\n         LA    R6,COMMAND          COMMAND TEXT FOR ECHO\n         BAL   R9,SEND             GO DO IT\n         EJECT\n*---  STANDARD EXIT LINKAGE AND FREE DYNAMIC STORAGE.\n         SPACE 1\nFINISH   L     R13,4(R13)          RESTORE REG.13\n        FREEMAIN RU,LV=DATAEND,A=(R11),SP=SPINPRVT\nLEAVE    LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS\n         BR    R14                 RETURN TO CALLER\n         SPACE 1\nMVRTXT   MVC   REPLYTXT(*-*),1(R2)      <<EXECUTED>>\nMVCTXT   MVC   COMMAND(*-*),1(R2)       <<EXECUTED>>\nMVSTXT   MVC   0(*-*,R15),STXT          <<EXECUTED>>\nMVWTXT   MVC   WTOTXT+1(*-*),0(R6)      <<EXECUTED>>\n         SPACE 2\n*---  ROUTINE : EXECUTE REPLY/COMMAND AND ADVICE OPERATOR.\n         SPACE 1\nSEND     STC   R1,MGCRLGTH         SET LENGTH IN THE MGCRPL\n         XR    R0,R0               CLEAR REGISTER ZERO\n         XR    R15,R15             CLEAR REGISTER ZERO\n        MGCR   MGCRPL              ISSUE COMMAND\n         MVC   WTOLIST(WTOSKL),WTOSK    INITIALIZE WTO LIST\n         MVC   WTOMSG,0(R5)        MOVE MSG ID\n         MVI   WTOTXT,C'/'\n         EX    R4,MVWTXT           MOVE REPLY/COMMAND TEXT\n         LA    R1,WTOTXT+2(R4)\n         MVC   0(4,R1),WTOSK+WTOSKL     SET DESC. AND ROUTE CODES\n         LA    R1,WTOSKL+L'WTOMSG+2(R4)\n         STH   R1,WTOLIST          SET WTO TEXT LENGTH\n        WTO    MF=(E,WTOLIST)      ADVICE OPERATOR\n         BR    R9                  RETURN\n         SPACE 1\n         DROP  R7,R8,R11,R12\n         EJECT\n*---  CONSTANTS AND SKELETONS.\n         SPACE 1\nWTOSK   WTO    'USER00I : ',ROUTCDE=2,DESC=4,MF=L\nWTOSKL   EQU   (*-WTOSK)-4\nWTOMX   WTO    'USER99I : GETMAIN FAILED ================== IEAVMXIT', 1\n               ROUTCDE=1,DESC=3,MF=L\n*DAY TABLE INDEX =  0      1  2  3  4  5  6\nDAYT     DC    CL3'SAT',C'SUNMONTUEWEDTHUFRI'\nNDSAT    EQU   DAYT+(1*L'DAYT),L'DAYT\nNDSUN    EQU   DAYT+(2*L'DAYT),L'DAYT\n         SPACE 2\n        LTORG\n         AIF   ('&SYSPARM' EQ 'LIST').LAGN\n        PRINT  NOGEN\n.LAGN    EJECT\n*           -----------------------------\n*        ---  MESSAGES PROCESSING TABLE  ---\n*           -----------------------------\n         SPACE 1\n* MACRO SYNTAX :      @GM  MID,AT=,RPL=,CMD=\n* --------------  OR  @GA  MID,AT=,NRP=,ARP=\n*\n* MACRO OPERANDS : 1. POSITIONAL OPERAND\n* ----------------    MID : MESSAGE ID (I.E., IFB010D).\n*                  2. KEYWORDS OPERANDS\n*                     A. @GM MACRO\n*                        AT=  : LABEL OF THE SPECIFIC PROCESS.\n*                        RPL= : REPLY TEXT.\n*                        CMD= : COMMAND TEXT.\n*                        WHEN NONE OF THE KEYWORDS OPERANDS ARE CODED,\n*                        THEN THE DEFAULT OPTION OF JUST SUPPRESS THE\n*                        MESSAGE IS ASSUMED.\n*                     B. @GA MACRO\n*                        AT=  : LABEL OF THE SPECIFIC PROCESS.\n*                        NRP= : NORMAL REPLY TEXT.\n*                        ARP= : ALTERNATE REPLY TEXT.\n*                        OPERANDS ARE MANDATORY.\n*\n* NOTE : THE TEXT KEYWORDS MUST BE CODED APPLYING THE ASSEMBLER RULES\n*        AS FOR A CHARACTER CONSTANT, SO IF NEEDED, ENCLOSE IT BETWEEN\n*        APOSTROPHES.\n*\n         SPACE 1\nMSGSTB   DS    0CL8                START OF TABLE\n         SPACE 1\n*--- JES2 : $HASP102 AND $HASP103 ... SETUP MESSAGES\n        @GM    $HASP102,AT=J2SETUP\n        @GM    $HASP103,AT=J2SETUP\n         SPACE 1\n*--- RDE : IFB010D ENTER 'IPL REASON,SUBSYSTEM ID' OR 'U'\n        @GM    IFB010D,RPL=U\n         SPACE 1\n*--- CJS : CJSI01D ENTER CJSM INIT OPTIONS\n        @GM    CJSI01D,RPL=U\n         SPACE 1\n*--- RACF : ICH802D REPLY Y OR N TO THE REQUEST\n        @GA    ICH802D,AT=ICH802D,NRP=N,ARP=Y\n         SPACE 1\n*--- RACF : ICH70001I DMSJOBS  LAST ACCESS AT ...\n        @GM    ICH70001,AT=ICH70001\n         SPACE 1\n*--- SMF : IEE043I A SYSTEM LOG DATA SET HAS BEEN QUEUED TO\n*              SYSOUT CLASS L\n        @GM    IEE043I,AT=IEE043I,CMD='S XWTR'\n         SPACE 1\n*--- SMF : IEF176I WTR ??? WAITING FOR WORK, CLASS=L, DEST=LOCAL\n        @GM    IEF176I,AT=IEF176I,CMD='P ???'\n         SPACE 1\n*--- STC : IEF238D JJJ - REPLY DEVICE NAME, 'WAIT' OR 'CANCEL'\n        @GM    IEF238D,AT=IEF238D,RPL=WAIT\n         SPACE 1\n*--- STC : IEF433D JJJ - WAIT REQUESTED - REPLY 'HOLD' OR 'NOHOLD'\n        @GM    IEF433D,AT=IEF433D,RPL=HOLD\n         SPACE 1\n*--- ZEKE : IEA962A MESSAGE FOR INACTIVE CONSOLE NN.\n*              REPLY DELETE, OR OK'\n        @GM    IEA962A,AT=IEA962A,RPL=DELETE\n         SPACE 1\n*--- STC : IGF500D  REPLY 'YES', DEVICE, OR 'NO'\n        @GM    IGF500D,AT=IGF500D,RPL=YES\n         SPACE 1\n*--- MVS : IEC301A S JOB JJJ,... ... (PROTECTION MESSAGE)\n        @GM    IEC301A,AT=IEC301A,RPL=NONE\n         SPACE 1\n         DC    XL1'FF'             END OF TABLE\n         EJECT\n*           -----------------------------\n*        ---  J O B   N A M E S   TABLE  ---\n*           -----------------------------\n         SPACE 1\n* MACRO SYNTAX :      @GJ  ...JOB NAMES LIST...\n* --------------\n*\n* MACRO OPERANDS : JOB NAMES LIST (SEPARATED BY A COMMA).\n* ----------------\n         SPACE 1\nJOBSTB   DS    0CL1                START OF TABLE\n         SPACE 1\n        @GJ    MAINT,ACCOUNT\n        @GJ    RECOVER,OPER\n        @GJ    DMS\n         SPACE 1\n         DC    XL2'00FF'           END OF TABLE\n         DC    10XL8'0'            PATCH AREA\n         EJECT\n*           -----------------------------\n*        ---  T S U   N A M E S   TABLE  ---\n*           -----------------------------\n         SPACE 1\n* MACRO SYNTAX :      @GT  ...TSU NAMES LIST...\n* --------------\n*\n* MACRO OPERANDS : TSU NAMES LIST (SEPARATED BY A COMMA).\n* ----------------\n         SPACE 1\nTSUSTB   DS    0CL1                START OF TABLE\n         SPACE 1\n        @GT    WIZARD,MASTER\n        @GT    PUPIL\n         SPACE 1\n         DC    X'0'                END OF TABLE\n         DC    10XL8'0'            PATCH AREA\n         EJECT\n*           -----------------------------\n*        ---  HOLIDAYS DATES  T A B L E  ---\n*           -----------------------------\n         SPACE 1\n* MACRO SYNTAX :      @GHDT  D=,M=,Y=\n* --------------\n*\n* MACRO OPERANDS : HOLIDAY'S DATES SUPPLIED AS FOLLOWS\n* ----------------       D=DD IS THE DAY,\n*                        M=MM IS THE MONTH, AND\n*                        Y=YYYY IS THE YEAR.\n         SPACE 1\nHDTABLE  DS    0F                  START OF TABLE\n         SPACE 1\n        @GHDT  D=01,M=01,Y=1991     1 JAN 91 - TUE\n        @GHDT  D=02,M=01,Y=1991     2 JAN 91 - WED\n        @GHDT  D=29,M=03,Y=1991    29 MAR 91 - FRI\n        @GHDT  D=01,M=04,Y=1991     1 APR 91 - MON\n        @GHDT  D=25,M=04,Y=1991    25 APR 91 - THU\n        @GHDT  D=01,M=05,Y=1991     1 MAY 91 - WED\n        @GHDT  D=09,M=05,Y=1991     9 MAY 91 - THU\n        @GHDT  D=10,M=05,Y=1991    10 MAY 91 - FRI\n        @GHDT  D=20,M=05,Y=1991    20 MAY 91 - MON\n        @GHDT  D=15,M=08,Y=1991    15 AUG 91 - THU\n        @GHDT  D=01,M=11,Y=1991     1 NOV 91 - FRI\n        @GHDT  D=24,M=12,Y=1991    24 DEC 91 - TUE\n        @GHDT  D=25,M=12,Y=1991    25 DEC 91 - WED\n        @GHDT  D=26,M=12,Y=1991    26 DEC 91 - THU\n        @GHDT  D=27,M=12,Y=1991    27 DEC 91 - FRI\n        @GHDT  D=30,M=12,Y=1991    30 DEC 91 - MON\n        @GHDT  D=31,M=12,Y=1991    31 DEC 91 - TUE\n        @GHDT  D=01,M=01,Y=1992     1 JAN 92 - WED\n        @GHDT  D=02,M=01,Y=1992     2 JAN 92 - THU\n         SPACE 1\n         DC    F'0'                END OF TABLE\n         DC    10F'0'              PATCH AREA\n         EJECT\n*---  STORAGE DEFINITIONS.\n         SPACE 1\nDATAAREA DSECT\nSAVEAREA DS    18F                 STANDARD SAVE AREA\n         SPACE 1\nDWORK    DS    D\nWTOLIST WTO    'USER00I : ',MF=L   WTO LIST\nWTOMSG   DS    CL8                 WTO MSG ID\nWTOTXT   DS    CL106               WTO REPLY TEXT\n         DS    BL2                 DESCRIPTOR CODES\n         DS    BL2                 ROUTING CODES\n         SPACE 1\nASID     DS    XL2                 AS-ID\n         SPACE 1\nMGCR    IEZMGCR DSECT=NO\n         ORG   MGCRTEXT\nCOMMAND  DS    CL6                 REPLY COMMAND\nREPLY    DS    CL2                 REPLY ID\nREPLYMSG DS    CL2                 WTOR RESPONSE\nREPLYTXT DS    CL1                 WTOR TEXT ...\nREPLYLTH EQU   *-COMMAND\n         EJECT\n         ORG\n         SPACE 1\n* MACRO SYNTAX :      @MV  FROM,LG,POS\n* --------------\n*\n* MACRO OPERANDS : POSITIONAL OPERANDS\n* ----------------    FROM : DESIRED TEXT ADDRESS.\n*                     LG   : LENGTH OF THE DESIRED TEXT.\n*                     POS  : POSITION WHERE THE DESIRED TEXT WILL\n*                            BE INSERTED TO COMPLETE THE GENERATED\n*                            OPERATOR COMMAND.\n         SPACE 1\nSPOS     DS    XL1                 COMMAND TEXT RELATIVE POSITION\nSLGT     DS    XL1                 TEXT MOVE INSTRUCTION LENGTH\nSTXT     DS    XL20                TEXT TO BE INSERTED IN COMMAND\n*                           NOTE : MAY BE LONGER IF NEEDED.\n         SPACE 2\nDATAEND  EQU   (((*-DATAAREA)+7)/8)*8\n         EJECT\n*---  MAPPING OF THE MESSAGE TEXT.\n         SPACE 1\nMSGTEXT  DSECT\nMSGID    DS    CL8                 MESSAGE ID\nJOBDATA  DS    CL8                 JOB DATA (ID AND NAME)\n         ORG   MSGTEXT\n         DS    CL4\nWTORID   DS    CL8\n         SPACE 2\n        IEZVX100\n         EJECT\n         PRINT NOGEN\n         SPACE 1\n        CVT    DSECT=YES\n        IEECUCM FORMAT=NEW\n        IEFJESCT\n        IEFJSCVT\n        IHAORE\n        IHAASVT\n        IHAASCB\n        $HASPEQU\n        $HFAME\n        $SCAT\n        $XECB\n        $SVT\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFACTR$": {"ttr": 17674, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//IEFACTRT JOB (........),'INSTALL  -IEFACTRT-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* NOTE : AT LINK-EDIT YOU WILL RECEIVE A RETURN CODE 4 WHICH IS     *\n//*        ONLY A NORMAL WARNING MESSAGE DUE TO NCAL SPECIFIED.       *\n//*        EXTERNAL REFERENCE TO 'IEFSYS'.                            *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=IEFACTRT,OPT=',RENT'\n//LNK     EXEC PAJILKR,OPT=',RENT,NCAL'\n//SYSIN     DD *\n  ENTRY   IEFACTRT\n  NAME    IEFACTRT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFACTR@": {"ttr": 17676, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x12/\\x00\\x90\\x12/\\x12 \\x00:\\x00:\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-05-02T00:00:00", "modifydate": "1990-05-02T12:20:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "SYSPAJA"}, "text": "1   09/02/90\n                                                      IEFACTRT  1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *         SMF EXIT : IEFACTRT         * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n             -------------------------------------------\n               S M F   T E R M I N A T I O N   E X I T\n             -------------------------------------------\n\n  Purpose :\n  ---------\n\n         1. At step termination (R0=12, SMF record 4, 34) :\n               Update SRB time limit :\n                 SRB.TIME.LIMIT = SRB.TIME.LIMIT - STEP.SRB.TIME\n               If new SRB.TIME.LIMIT equal zero, then :\n                 SRB.TIME.LIMIT = 1\n               If new SRB.TIME.LIMIT less than zero, then :\n                 CANCEL the job\n               If SRB.TIME.LIMIT equal zero :\n                 no SRB timing performed\n\n         2. At job termination (R0=16, SMF record 5, 35) :\n               Reset SRB time limit to zero (it is better), and\n               if end of a job (SMF record 5) :\n                 write to SYSOUT the job service units values and\n                 the job cost (in U.O.).\n\n         3. At job/step termination (R0=20, SMF record 30) :\n               At end of step, if step was not flushed :\n                 write to SYSOUT a row with job name, step name,\n                 program name and number of I/O.\n               At end of job, if job with more than 1 step :\n                 write to SYSOUT a row with job name, job class,\n                 performance group and number of I/O.\n\n         4. If system task (STC), at step termination :\n               Any not zero completion code is signaled to operator.\n\n  SRB time eveluation :\n  ---------------------\n\n         One (1) second of SRB time is equivalent to the execution of\n         thousand (1000) I/O operations (in the worst case), but this\n         is CPU dependent, and the real SRB time may vary with trace\n         on or off, access method and/or programming language used\n         (i.e., the assembler is normally more than twice faster).\n\n         Note : see assembler macro $SIDTB (SIDIO table) for systems\n                apply factors.\n\n  -----------------\n  CJS involvement : see job SMFEXITS to correctly link-edit IEFACTRT.\n  -----------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEFACTRT": {"ttr": 17921, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x13O\\x00\\x90\\x13O\\x14C\\x03\\\\\\x03\\\\\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-05-14T00:00:00", "modifydate": "1990-05-14T14:43:00", "lines": 860, "newlines": 860, "modlines": 0, "user": "SYSPAJA"}, "text": "ACT      TITLE '-- I E F A C T R T - MVS/SMF TERMINATION EXIT --'\nIEFACTRT START 0\n         SPACE 1\n*            -------------------------------------------\n*              S M F   T E R M I N A T I O N   E X I T\n*            -------------------------------------------\n         SPACE 1\n* AT ENTRY TO THE IEFACTRT EXIT ROUTINE :\n* --------\n*\n*     A. THE REGISTER 1 POINTS TO A LIST OF FOUR-BYTE ADDRESSES,\n*        AS FOLLOWS :\n*\n* +0  -  1. THE ADDRESS OF THE COMMON EXIT PARAMETER AREA.\n*\n* +4  -  2. THE ADDRESS OF AN EIGHT-BYTE AREA CONTAINING THE JOB STEP\n*           NAME (IN EBCDIC). THIS AREA IS ALIGNED LEFT AND PADDED\n*           WITH BLANKS IF NECESSARY. AT JOB TERMINATION, THE ADDRESS\n*           IS ZERO.\n*\n* +8  -  3. THE ADDRESS OF A 20-BYTE AREA CONTAINING THE PROGRAMMER'S\n*           NAME (IN EBCDIC). THIS AREA IS ALIGNED LEFT AND PADDED\n*           WITH BLANKS IF NECESSARY.\n*\n* +12 -  4. THE ADDRESS OF A FOUR-BYTE AREA WHOSE FIRST THREE BYTES\n*           CONTAIN THE JOB CPU TIME UNDER TCB'S, IN HUNDREDTHS OF A\n*           SECOND (IN BINARY), AND WHOSE LAST BYTE CONTAINS THE\n*           NUMBER OF ACCOUNTING FIELDS IN THE JOB STATEMENT (IN\n*           BINARY).\n*\n* +16 -  5. THE ADDRESS OF AN AREA THAT CONTAINS ACCOUNTING INFORMA-\n*           TION FROM THE JOB STATEMENT.\n*           FORMAT : THE ACCOUNTING FIELDS (VARIABLE). EACH ENTRY FOR\n*                    AN ACCOUNTING FIELD CONTAINS THE LENGTH OF THE\n*                    FIELD (ONE BYTE, BINARY, A ZERO INDICATES AN\n*                    OMITTED FIELD) FOLLOWED BY THE FIELD (EBCDIC).\n*\n* +20 -  6. THE ADDRESS OF A FOUR-BYTE AREA WHOSE FIRST THREE BYTES\n*           CONTAIN THE STEP CPU TIME UNDER TCB'S, IN HUNDREDTHS OF A\n*           SECOND (IN BINARY), AND WHOSE LAST BYTE CONTAINS THE\n*           NUMBER OF ACCOUNTING FIELDS IN THE EXEC STATEMENT (IN\n*           BINARY). AT JOB TERMINATION, THE ADDRESS IS ZERO.\n         EJECT\n* +24 -  7. THE ADDRESS OF AN AREA THAT CONTAINS ACCOUNTING INFORMA-\n*           TION FROM THE EXEC STATEMENT.\n*           FORMAT : THE ACCOUNTING FIELDS (VARIABLE). EACH ENTRY FOR\n*                    AN ACCOUNTING FIELD CONTAINS THE LENGTH OF THE\n*                    FIELD (ONE BYTE, BINARY, A ZERO INDICATES AN\n*                    OMITTED FIELD) FOLLOWED BY THE FIELD (EBCDIC).\n*           AT JOB TERMINATION, THE ADDRESS IS ZERO.\n*\n* +28 -  8. THE ADDRESS OF A TWO-BYTE AREA. THE FIRST BYTE IS AN\n*           INDICATOR : IF BIT 7 IS SET TO 1 WHEN THE EXIT ROUTINE\n*           IS ENTERED, THE JOB HAS BEEN CANCELED; IF THE EXIT\n*           ROUTINE SETS BIT 7 TO 1, THE JOB WILL BE CANCELED. THE\n*           SECOND BYTE CONTAINS THE NUMBER OF THE JOB STEP CURRENTLY\n*           BEING PROCESSED. AT JOB TERMINATION, THE SECOND BYTE\n*           CONTAINS THE NUMBER OF STEPS IN THE JOB.\n*\n* +32 -  9. THE ADDRESS OF A TWO-BYTE AREA CONTAINING THE TERMINATION\n*           STATUS (CONDITION OR COMPLETION CODE) OF THE JOB OR JOB\n*           STEP.\n*\n* +36 - 10. THE ADDRESS OF AN AREA CONTAINING A FOUR-BYTE RECORD\n*           DESCRIPTOR WORD (RDW) IMMEDIATELY FOLLOWED BY THE JOB STEP\n*           TERMINATION RECORD (TYPE 4 OR 34) OR THE JOB TERMINATION\n*           RECORD (TYPE 5 OR 35) OR THE COMMON ADDRESS SPACE WORK\n*           RECORD (TYPE 30), OR THE TSO COMMAND COUNTING RECORD\n*           (TYPE 32) TO BE WRITTEN TO THE SMF DATA SET.\n*\n*     B. REGISTER 0 CONTAINS A BINARY CODE INDICATING THE REASON FOR\n*        ENTRY, AS FOLLOWS :\n*\n*        12 - INDICATES JOB STEP TERMINATION.\n*        16 - INDICATES JOB TERMINATION.\n*        20 - INDICATES JOB OR STEP TERMINATION. THE TENTH PARAMETER\n*             IS THE ADDRESS OF THE RDW FOR A TYPE 30 RECORD. THE\n*             SUBTYPE FIELD IN THE RECORD DETERMINES IF IT IS A JOB\n*             OR STEP TERMINATION RECORD.\n*        24 - INDICATES THAT THE TENTH PARAMETER IS THE ADDRESS OF\n*             THE RDW FOR A TYPE 32 RECORD.\n         EJECT\n* AT EXIT BEFORE THE IEFACTRT EXIT ROUTINE RETURNS CONTROL TO THE\n* -------      CONTROL PROGRAM, IT MUST PLACE RETURN CODES IN\n*              REGISTERS 1 AND 15, AS FOLLOWS :\n*\n*        IN REGISTER 1 :\n*\n*              4 INDICATES THE TERMINATION RECORD IS NOT TO BE WRITTEN\n*                       TO THE SMF DATA SET.\n*              A VALUE OTHER THAN 4 INDICATES THE TERMINATION RECORD\n*                       IS TO BE WRITTEN TO THE SMF DATA SET.\n*\n*        IN REGISTER 15 :\n*\n*              4 INDICATES THE REMAINING JOB STEPS ARE TO BE CANCELED.\n*              A VALUE OTHER THAN 4 INDICATES JOB PROCESSING IS TO BE\n*                       CONTINUED.\n         SPACE 2\n* AUTHOR :     A. COLOMBO (AMDAHL CONSULTANT)\n* --------     P.A. MOINIL\n*              COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 2\n        $DEFREG\n         EJECT\n        $CEPA\n         EJECT\n        PRINT  NOGEN\n         SPACE 2\nSMFR4    DSECT\n        IFASMFR 4\n         SPACE 1\nSMFR5    DSECT\n        IFASMFR 5\n         SPACE 1\n        IFASMFR 30\n         SPACE 1\n        IHAPSA\n         SPACE 1\n        IHAASCB\n         SPACE 2\n        PRINT  GEN\n         SPACE 1\nMSGL     EQU   132                 MESSAGE'S LENGTH.\n         EJECT\n*        WORK AREAS.\n*        -----------\n         SPACE 2\nAREA     DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -\n         SPACE 1\nSAVAREA  DS    18F           SAVE AREA.\nALTAREA  DS    18F           ALTERNATE SAVE AREA.\n         SPACE 1\nDW       DS    D'0'                WORK.\nUP       DS    XL8'0'              WORK.\nRSV      DS    F                   WORK.\nSWS      DS    XL1,XL3             WORK.\nWRKL     EQU   *-SAVAREA           WORK LENGTH.\n         SPACE 1\nROW      DC    CL8' '              FILLER INSTEAD OF MSG ID.\nSEQ      DC    CL7'STEP : '        OR ' JOB : '.\nSTP      DC    CL8' ',C' '         STEP OR JOB NAME.\nPEQ      DC    CL7'/ PGM =',C' '   OR '/ C-NNN'.\nPGM      DC    CL8' '              EXEC PROGRAM NAME OR '/ TOTAL '.\nSSP      DC    C' : '\nSEPL     EQU   *-SEQ-1\nTTLIST   DC    4CL17' '            4 TIMES 'NNNNN I/O XXXX Y '.\n         DC    (MSGL-(*-ROW))C' '  FILLER.\n         SPACE 1\nDDHEADER DC    CL8' ',C'I '        HEADER.\nDDLIST   DC    6CL17' '            6 TIMES 'NNNNN DDNAMEXX I '.\n         DC    (MSGL-(*-DDHEADER))C' '  FILLER.\n         SPACE 1\nAREAL    EQU   (((*-AREA)+7)/8)*8\n         SPACE 1\nIEFACTRT CSECT                     RESTORE ORIGINAL CSECT.\n         EJECT\nAR       DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -\n         SPACE 1\nSVAR     DS    18F           SAVE AREA.\n         SPACE 1\nWCTL     DS    F\nMSG      DS    0CL72         MESSAGE AREA.\nMSG1     DC    CL14'--- IEFACTRT ('\nMSG2     DS    CL8\nMSG3     DC    CL10') / JOB : '\nMSG4     DS    CL8\nMSG5     DC    CL10' / STEP : '\nMSG6     DS    CL8\nMSG7     DC    CL8' / CC = '\nMSG8     DS    CL4\nMSG9     DC    CL2'. '\n         SPACE 1\nARL      EQU   (((*-AR)+7)/8)*8\n         SPACE 1\nIEFACTRT CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 2\nAW       DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -\n         SPACE 1\nSVAW     DS    18F           SAVE AREA.\nALTAW    DS    18F           ALTERNATE SAVE AREA.\n         SPACE 1\nWK       DS    D'0'                WORK.\nWKL      EQU   *-SVAW              WORK LENGTH.\nUOL      DS    0PL13               WORK.\nUOW      DS    PL12,PL1\nUOT      DS    PL16                WORK.\n         SPACE 1\nLSU      DC    CL8' ',C' '         FILLER INSTEAD OF MSG ID.\nLSUT     DC    C'JOB SERVICE-UNITS :',C' '\nLSUV     DC    CL12' ',C' '        NUMBER OF SU.\nLSUX     DC    C'FOR',C' '\nLSUN     DC    CL26' '             SU IDENTIFICATION.\n         DC    (MSGL-(*-LSU))C' '  FILLER.\n         SPACE 1\nAWL      EQU   (((*-AW)+7)/8)*8\n         SPACE 1\nIEFACTRT CSECT                     RESTORE ORIGINAL CSECT.\n         EJECT\n* PROCESS :\n* ---------\n*\n*        1. AT STEP TERMINATION (R0=12, SMF RECORD 4, 34) :\n*\n*              UPDATE SRB TIME LIMIT :\n*                SRB.TIME.LIMIT = SRB.TIME.LIMIT - STEP.SRB.TIME\n*              IF NEW SRB.TIME.LIMIT EQUAL ZERO, THEN :\n*                SRB.TIME.LIMIT = 1\n*              IF NEW SRB.TIME.LIMIT LESS THAN ZERO, THEN :\n*                CANCEL THE JOB\n*              IF SRB.TIME.LIMIT EQUAL ZERO :\n*                NO SRB TIMING PERFORMED\n*\n*        2. AT JOB TERMINATION (R0=16, SMF RECORD 5, 35) :\n*\n*              RESET SRB TIME LIMIT TO ZERO (IT IS BETTER), AND\n*              IF END OF A JOB (SMF RECORD 5) :\n*                WRITE TO SYSOUT THE JOB SERVICE UNITS VALUES AND\n*                THE JOB COST (IN U.O.).\n*\n*        3. AT JOB/STEP TERMINATION (R0=20, SMF RECORD 30) :\n*\n*              AT END OF STEP, IF STEP WAS NOT FLUSHED :\n*                WRITE TO SYSOUT A ROW WITH JOB NAME, STEP NAME,\n*                PROGRAM NAME AND NUMBER OF I/O.\n*\n*              AT END OF JOB :\n*                WRITE TO SYSOUT A ROW WITH JOB NAME, JOB CLASS,\n*                PERFORMANCE GROUP AND NUMBER OF I/O.\n*\n*        4. IF SYSTEM TASK (STC), AT STEP TERMINATION :\n*\n*              ANY NOT ZERO COMPLETION CODE IS SIGNALED TO OPERATOR.\n         SPACE 1\n         USING *,R11               ADDRESSABILITY.\n         SPACE 1\n         STM   R14,R12,12(R13)     SAVE REGISTERS.\n         LA    R11,0(R15)          SET BASE REGSITER.\n         L     R2,0(R1)            GET COMMON EXIT PARM. ADDRESS.\n         B     START\n         SPACE 1\n         DC    CL8'IEFACTRT',C'-'  IDENTIFIER.\n         DC    CL8'&SYSDATE',C'('  ASSEMBLY DATE.\n         DC    CL5'&SYSTIME',C')'  ASSEMBLY TIME.\n         EJECT\n*        IF STEP TERMINATION, UPDATE SRB TIME.\n         SPACE 1\nSTART    CH    R0,=H'12'           IF STEP END, UPDATE SRB TIME.\n         BNE   IFTYPE5             CHECK OTHER.\n         USING CEPA,R2\n         SR    R9,R9\n         ICM   R9,B'0011',CEPAUCOM+2    I/O COUNT IN K (IF ANY).\n         DROP  R2\n         BZ    GOBACK              IF MISSING, NO TIMING REQUIRED.\n         L     R6,36(R1)           POINTER TO RDW.\n         LA    R6,0(R6)            CLEAR ADDRESS.\n         LTR   R6,R6               IS THERE A RECORD?\n         BZ    GOBACK              THERE IS NO SMF RECORD TYPE 4.\n         USING PSA,R0              PSA ADDRESSABILITY.\n         L     R7,PSAAOLD          PSA ASCB OLD POINTER.\n         DROP  R0\n         USING ASCB,R7             ASCB ADDRESSABILITY.\n         L     R4,ASCBR15C         SRB TIME LIMIT.\n         LTR   R4,R4               IF MISSING, SRB TIME EXPIRED.\n         BZ    SEEWHY              TRY TO SEE WHY NOT SRB TIMED.\n         SR    R3,R3\n         USING SMFR4,R6            RECORD SMF TYPE 4 ADDRESSABILITY.\n         ICM   R3,B'0111',SMF4SRBT SRB TIME IN .01 SEC.\n         SR    R2,R2               CLEAN UP (IS BETTER).\n         M     R2,=F'10000'        TO GET TIME IN MICROSEC.\n         SLDL  R2,12               TO GET MICROSEC IN BIT 51.\n         SR    R4,R2               NEW TIME LIMIT.\n         BH    STORE               IF GREATER THAN 0, OK.\n         BL    CANCEL              IF LESS THAN ZERO, CANCEL.\nGIVE1    LH    R4,=H'1'            TO TERMINATE IN NEXT STEP.\nSTORE    ST    R4,ASCBR15C         NEW SRB TIME LIMIT.\n         B     GOBACK              RETURN.\nSEEWHY   TM    SMF4STI,X'02'       IF ONE, ABEND.\n         BNO   GIVE1               (SHOULD NOT OCCUR).\n         CLC   SMF4SCC,=XL2'0322'  IF STEP COMPLETION CODE IS S322.\n         BNE   GIVE1               (SHOULD BE RESET AT END OF JOB).\n         DROP  R6\n         LA    R6,SIDIO            SYSTEM-ID'S/FACTOR TO BE APPLIED.\n         USING CEPA,R2\nSCAN     CLC   0(L'CEPASID,R6),CEPASID\n         BE    FOUND\n         LA    R6,L'SIDIO(R6)\n         CLI   0(R6),0             AT END OF TABLE USE DEFAULT.\n         BNE   SCAN\n         DROP  R2\nFOUND    SR    R8,R8               CALCULATE NEW SRB LIMIT.\n         M     R8,4(R6)            I/O'S * (SRB-TIME FOR 1000 I/O).\n         SLDL  R8,12               TO HAVE 1 MICROSEC IN  BIT 51.\n         CH    R8,=H'1'            IF LESS THAN 1, SET TO 1.\n         BH    STOREIT             OK, USE.\n         LA    R8,1                GET A 1.\nSTOREIT  ST    R8,ASCBR15C         SET NEW SRB TIME LIMIT.\n         B     GOBACK              GO BACK.\n         DROP  R7\n         EJECT\n*        RESET SRB TIME LIMIT AT END OF JOB.\n         SPACE 1\nIFTYPE5  CH    R0,=H'16'           IF EQUAL, JOB TERMINATION.\n         BNE   IFTYPE30            CHECK OTHER.\n         USING CEPA,R2\n         SR    R9,R9\n         ICM   R9,B'0011',CEPAUCOM+2    I/O  NUMBER IN K.\n         DROP  R2\n         BZ    GETJSU              NO TIMING.\n         USING PSA,R0              PSA ADDRESSABILITY.\n         L     R7,PSAAOLD          PSA ASCB OLD POINTER.\n         DROP  R0\n         USING ASCB,R7             ASCB ADDRESSABILITY.\n         SR    R4,R4               GET A ZERO.\n         C     R4,ASCBR15C         IS SRB TIME LIMIT ALREADY ZERO?\n         BE    GETJSU              YES.\n         ST    R4,ASCBR15C         RESET SRB TIME LIMIT.\n         DROP  R7\nGETJSU   LTR   R1,R1               IS THERE A PARAMETER LIST?\n         BZ    GOBACK              IF NOT RETURN.\n         L     R7,36(R1)           TYPE 5 OR 35 RECORD.\n         LA    R7,0(R7)            CLEAR ADDRESS.\n         LTR   R7,R7               IS THERE AN SMF RECORD?\n         BZ    GOBACK              NO, NOTHING TO DO.\n         USING SMFR5,R7            BASE SMF5 SEGMENT.\n         CLI   SMF5RTY,5           RECORD TYPE 5?\n         BNE   GOBACK              IF NOT RETURN.\n         SPACE 1\n*        JOB RECORD TYPE 5 - OUTPUT JOB SERVICE UNITS AND COST.\n         SPACE 1\n         XR    R4,R4               COMPUTE SERVICES POINTER\n         IC    R4,SMF5TLEN\n         LA    R4,SMF5TLEN+1(R4)\n         DROP  R7\n        GETMAIN R,LV=AWL,SP=255\n         LR    R3,R1               SET BASE REGISTER FOR AREA.\n         USING AW,R3               ADDRESSABILITY.\n         XC    SVAW(WKL),SVAW\n         ST    R13,SVAW+4          LINK SAVE AREAS.\n         ST    R3,8(R13)\n         LR    R13,R3              ACTIVE MY SAVE AREA.\n         MVI   LSU,C' '            PREPARE MESSAGES AREA.\n         MVC   LSU+1(MSGL-1),LSU\n         LA    R10,LSU\n         LA    R15,MSGL            LENGTH OF MESSAGE.\n         LA    R13,ALTAW           PTR WORD W/A.\n         BAL   R2,GWRT             WRITE A BLANK LINE.\n         MVC   LSUT,=C'JOB SERVICE-UNITS :'\n         MVC   LSUX,=C'FOR'\n         LA    R5,SUTBN\n         LA    R6,SUTB\n         ZAP   UOL,=PL1'+0'\nLOOPV    ICM   R15,B'1111',0(R4)\n         TM    0(R4),X'80'\n         BZ    *+L'*+8\n         SLL   R15,1\n         SRL   R15,1\n         CVD   R15,WK\n         TM    0(R4),X'80'\n         BZ    *+L'*+6\n         AP    WK,=PL6'+2147483648'\n         MVC   LSUV,=XL12'402020202020202020202120'\n         ED    LSUV,WK+2\n         MVC   LSUN(L'LSUN),0(R6)\n         ZAP   UOT(L'UOW),WK\n         MP    UOT(L'UOW),SUNML(SUKVL,R6)\n         AP    UOL,UOT(L'UOW)\n         LA    R10,LSU\n         LA    R15,MSGL            LENGTH OF MESSAGE.\n         LA    R13,ALTAW           PTR WORD W/A.\n         BAL   R2,GWRT             WRITE LINE WITH SU.\n         BCT   R5,*+L'*+4\n         B     LVSMS\n         LA    R4,4(R4)\n         LA    R6,SUTBL(R6)\n         MVC   LSUT(L'LSUT),LSUT-1\n         B     LOOPV\nLVSMS    MVI   LSU,C' '\n         MVC   LSU+1(MSGL-1),LSU\n         LA    R10,LSU\n         LA    R15,MSGL            LENGTH OF MESSAGE.\n         LA    R13,ALTAW           PTR WORD W/A.\n         BAL   R2,GWRT             WRITE A BLANK LINE.\n         MVC   LSUT(10),=C'JOB COST :'\n         NI    UOW+L'UOW-1,X'F0'\n         OI    UOW+L'UOW-1,X'0C'\n         ZAP   UOT,=PL1'+0'\n         CP    UOW,=PL1'+0'\n         BE    TVSMS\n         MVC   UOT(L'UOW),UOW\n         NI    UOT+L'UOW-1,X'F0'\n         ZAP   UOW,=PL1'+0'\n         MVO   UOW,UOT(3)\n         CP    UOW,KUO\n         BNL   *+L'*+10\n         DP    UOT,KUO\n         B     TVSMS\n         MVC   LSUT+11(32),=C'UNABLE TO COMPUTE IT (OVERFLOW).'\n         B     PVSMS\nTVSMS    NI    UOT+9,X'F0'\n         OI    UOT+9,X'0C'\n         MVC   LSUT+10(15),=XL15'402020202021206B20202020202020'\n         ED    LSUT+10(15),UOT+3\n         MVC   LSUT+26(7),=C'OF U.O.'\nPVSMS    LA    R10,LSU\n         LA    R15,MSGL            LENGTH OF MESSAGE.\n         LA    R13,ALTAW           PTR WORD W/A.\n         BAL   R2,GWRT             WRITE LINE WITH COST.\n         SPACE 1\n*        FREE WORK AREA AND GO BACK.\n         SPACE 1\n         DROP  R3\n         LR    R1,R3               ADDRESS OF AREA TO BE FREED.\n         L     R3,4(R13)           PREVIOUS SAVE AREA.\n        FREEMAIN R,LV=AWL,A=(1),SP=255\n         LR    R13,R3              RESTORE ORIGINAL SAVE AREA.\n         B     GOBACK              RETURN.\n         EJECT\n*        IF RECORD TYPE 30, SUBTYPES 4 AND 5, PROCESS THE JOB.\n         SPACE 1\nIFTYPE30 CH    R0,=H'20'           IF EQUAL, JOB TERMINATION TYPE 30.\n         BNE   GOBACK              IGNORE.\n         LTR   R1,R1               IS THERE A PARAMETER LIST?\n         BZ    GOBACK              IF NOT RETURN.\n         L     R7,36(R1)           TYPE 30 RECORD.\n         LA    R7,0(R7)            CLEAR ADDRESS.\n         LTR   R7,R7               IS THERE AN SMF RECORD?\n         BZ    GOBACK              NO, NOTHING TO DO.\n         USING SMFRCD30,R7         BASE SMF30 SEGMENT.\n         LR    R4,R7               FOR ADDRESSABILITY.\n         A     R4,SMF30SOF         SUBSYSTEM SECTION.\n         USING SMF30PSS,R4         SUBSYSTEM SECTION ADDRESSABILITY.\n         CLI   SMF30TYP+1,5        JOB TERMINATION?\n         BE    ENDJOB              YES, END JOB.\n         CLI   SMF30TYP+1,4        STEP TERMINATION?\n         BNE   GOBACK              NO, IGNORE.\n         DROP  R4\n         LR    R4,R7               FOR ADDRESSABILITY.\n         A     R4,SMF30TOF         COMPLETION SEGMENT.\n         USING SMF30CMP,R4         COMPLETION SEGMENT ADDRESSABILITY.\n         TM    SMF30STI,SMF30FLH   WAS THIS STEP FLUSHED?\n         BO    GOBACK              IF YES, GO BACK.\n         DROP  R4\n         SR    R1,R1               SET SWITCH IN CASE OF STC.\nENDJOB   LR    R4,R7               FOR ADDRESSABILITY.\n         A     R4,SMF30IOF         JOB / SESSION IDENTIFICATION.\n         USING SMF30ID,R4          JOB / SESSION ID ADDRESSABILITY.\n         CLI   SMF30JNM,C'J'       IS IT A NORMAL JOB?\n         BE    PRJOB               YES.\n         CLI   SMF30JNM,C'S'       IS IT A SYSTEM TASK?\n         BNE   GOBACK              NO, SKIP IT (TSU).\n         DROP  R4\n         EJECT\n*        PROCESS ANY STEP COMPLETION CODE OF SYSTEM TASK.\n         SPACE 1\n         LTR   R1,R1\n         BNZ   GOBACK              BRANCH IF NOT STEP TERMINATION.\n         LR    R4,R7               FOR ADDRESSABILITY.\n         A     R4,SMF30TOF         COMPLETION SEGMENT.\n         USING SMF30CMP,R4         COMPLETION SEGMENT ADDRESSABILITY.\n         TM    SMF30STI,SMF30SRS   IS STEP TO BE RESTARTED?\n         BO    GOBACK              IF YES, GO BACK.\n         TM    SMF30SCC,X'0F'      ANY COMPLETION CODE?\n         BNZ   STCCC               NOT ZERO.\n         TM    SMF30SCC+1,X'FF'\n         BZ    GOBACK              ZERO, ALL O.K.\nSTCCC   GETMAIN R,LV=ARL,SP=255\n         LR    R3,R1               SET BASE REGISTER FOR AREA.\n         USING AR,R3               ADDRESSABILITY.\n         XC    SVAR(ARL),SVAR\n         ST    R13,SVAR+4          LINK SAVE AREAS.\n         ST    R3,8(R13)\n         LR    R13,R3              ACTIVE MY SAVE AREA.\n         MVI   MSG,C' '            PREPARE WTO MESSAGE.\n         MVC   MSG+1(L'MSG-1),MSG\n         MVC   MSG1(14),=C'--- IEFACTRT ('\n         MVC   MSG3(9),=C') / JOB :'\n         MVC   MSG5+1(8),=C'/ STEP :'\n         MVC   MSG7+1(6),=C'/ CC ='\n         MVI   MSG9,C'.'\n         MVC   MSG8+1(1),SMF30SCC\n         MVO   MSG8+2(2),SMF30SCC\n         MVC   MSG8+3(1),SMF30SCC+1\n         OC    MSG8+1(3),=C'000'\n         TRT   MSG8+1(3),TRTAB-X'F0'\n         MVI   MSG8,C'U'\n         TM    SMF30SCC,SMF30SAB\n         BZ    *+L'*+4\n         MVI   MSG8,C'S'\n         DROP  R4\n         LR    R4,R7               FOR ADDRESSABILITY.\n         A     R4,SMF30IOF         JOB / SESSION IDENTIFICATION.\n         USING SMF30ID,R4          JOB / SESSION ID ADDRESSABILITY.\n         MVC   MSG4,SMF30JBN\n         MVC   MSG6,SMF30STM\n         MVC   MSG2,SMF30JNM\n         DROP  R4\n         LA    R0,L'WCTL+L'MSG\n         SLL   R0,16\n         ST    R0,WCTL\n        WTO    MF=(E,WCTL)         SEND MESSAGE.\n         DROP  R3\n         LR    R1,R3               ADDRESS OF AREA TO BE FREED.\n         L     R3,4(R13)           PREVIOUS SAVE AREA.\n        FREEMAIN R,LV=ARL,A=(1),SP=255\n         LR    R13,R3              RESTORE ORIGINAL SAVE AREA.\n         B     GOBACK\n         EJECT\n*        PROCESS A RECORD FOR END STEP / JOB.\n         SPACE 1\nPRJOB   GETMAIN R,LV=AREAL,SP=255\n         LR    R3,R1               SET BASE REGISTER FOR AREA.\n         USING AREA,R3             ADDRESSABILITY.\n         XC    SAVAREA(WRKL),SAVAREA\n         ST    R13,SAVAREA+4       LINK SAVE AREAS.\n         ST    R3,8(R13)\n         LR    R13,R3              ACTIVE MY SAVE AREA.\n         MVI   ROW,C' '            INITIALIZE PRINT ROW TO BLANKS.\n         MVC   ROW+1(MSGL-1),ROW\n         LR    R4,R7\n         A     R4,SMF30SOF         SUBSYSTEM SECTION.\n         USING SMF30PSS,R4         SUBSYSTEM SECTION ADDRESSABILITY.\n         CLI   SMF30TYP+1,5        JOB TERMINATION?\n         BE    JOBEND              YES, END JOB.\n         DROP  R4\n         SPACE 1\n*        END STEP - LIST I/O FOR EACH DDNAME.\n         SPACE 1\n         LR    R4,R7\n         SR    R8,R8               COUNT OF READY DDNAMES TO PRINT.\n         MVI   DDHEADER,C' '       CLEAR TO BLANKS ROW.\n         MVC   DDHEADER+1(MSGL-1),DDHEADER\n         LA    R5,DDLIST           START ADDRESS OF DDNAME LIST.\n         A     R4,SMF30UOF         I/O ACTIVITY SEGMENT.\n         USING SMF30URA,R4         I/O ACTIVITY SEGMENT.\n         L     R15,SMF30TPT        NUMBER OF TPUT.\n         LTR   R15,R15             SKIP IF ZERO.\n         BZ    IFTGET\n         MVC   6(7,R5),=C'TERMPUT' DDNAME FOR TPUT.\n         BAL   R2,BIDI             TO LIST I/O NUMBER.\n         LA    R8,1(R8)            NUMBER OF LISTED DDNAMES.\n         LA    R5,L'DDLIST(R5)     GO ON.\nIFTGET   L     R15,SMF30TGT        NUMBER OF TGET.\n         LTR   R15,R15             SKIP IF ZERO.\n         BZ    EXCPSEG\n         MVC   6(7,R5),=C'TERMGET' DDNAME FOR TPUT.\n         BAL   R2,BIDI             TO LIST I/O NUMBER.\n         LA    R8,1(R8)            NUMBER OF LISTED DDNAMES.\n         LA    R5,L'DDLIST(R5)     GO ON.\n         DROP  R4\nEXCPSEG  LR    R4,R7\n         A     R4,SMF30EOF         EXCP SEGMENT.\n         USING SMF30EXP,R4         EXCP SEGMENT.\n         LH    R6,SMF30EON         NUMBER OF EXCP SEGMENTS.\n         LTR   R6,R6               IF ZERO ENTRIES, GO HOME.\n         BZ    IFPRINT             TO SEE IF ENTRIES LEFT TO PRINT.\nLOOPI    L     R15,SMF30BLK        IF ANY I/O.\n         LTR   R15,R15\n         BZ    NEXTDE              IF NOT, NEXT DEVICE.\n         MVC   6(8,R5),SMF30DDN    DDNAME.\n         BAL   R2,BIDI             TO PUT IN NUMBER.\n         LA    R8,1(R8)\n         LA    R5,L'DDLIST(R5)     BUMP POINTER.\n         CH    R8,=H'6'            LINE FULL?\n         BL    NEXTDE              NO, CONTINUE.\n         BAL   R2,SWRT             WRITE A ROW.\n         MVI   DDHEADER,C' '       BLANK A ROW.\n         MVC   DDHEADER+1(MSGL-1),DDHEADER\n         SR    R8,R8               ZERO ENTRIES.\n         LA    R5,DDLIST\nNEXTDE   AH    R4,SMF30ELN        LENGTH OF EXCP SECTION.\n         BCT   R6,LOOPI\nIFPRINT  LTR   R8,R8              IF ANY ROW TO PRINT.\n         BZ    ENDDD              IF NOT, SKIP.\n         BAL   R2,SWRT            WRITE A ROW.\n         DROP  R4\nENDDD    TM    SWS,X'01'\n         BZ    NODD\n         MVI   ROW+L'DDHEADER,C'-'\n         MVC   ROW+L'DDHEADER+1(6*L'DDLIST),ROW+L'DDHEADER\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE SEPARATOR.\n         MVC   ROW+1(MSGL-1),ROW\n         SPACE 1\n*        END STEP - FINAL MESSAGE.\n         SPACE 1\nNODD     LR    R4,R7\n         A     R4,SMF30IOF         JOB / SESSION IDENTIFICATION.\n         USING SMF30ID,R4          JOB / SESSION ID ADDRESSABILITY.\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE A BLANK ROW.\n         MVI   SEQ,C'-'\n         MVC   SEQ+1(SEPL-1),SEQ\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE SEPARATOR.\n         MVC   SEQ(SEPL),SEQ-1\n         MVC   SEQ,=C'STEP : '     SET TEXT.\n         MVC   STP,SMF30STM        STEP NAME.\n         MVC   PEQ,=C'/ PGM ='\n         MVC   PGM,SMF30PGM        PROGRAM NAME.\n         B     GOOUT\n         DROP  R4\n         SPACE 1\nSWRT     ST    R2,RSV\n         TM    SWS,X'01'\n         BO    WGO\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE A BLANK ROW.\n         MVC   ROW+L'DDHEADER(L'MNDD),MNDD\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE TITLE.\n         MVI   ROW+L'DDHEADER,C'-'\n         MVC   ROW+L'DDHEADER+1(6*L'DDLIST),ROW+L'DDHEADER\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE SEPARATOR.\n         MVC   ROW+1(MSGL-1),ROW\n         OI    SWS,X'01'\nWGO      MVI   DDHEADER+L'DDHEADER,C'I'\n         MVI   DDLIST+L'DDLIST-2,C'I'\n         MVI   DDLIST+(2*L'DDLIST)-2,C'I'\n         MVI   DDLIST+(3*L'DDLIST)-2,C'I'\n         MVI   DDLIST+(4*L'DDLIST)-2,C'I'\n         MVI   DDLIST+(5*L'DDLIST)-2,C'I'\n         MVI   DDLIST+(6*L'DDLIST)-2,C'I'\n         L     R2,RSV\n         LA    R10,DDHEADER\nSLWRT    LA    R15,MSGL            LENGTH OF MESSAGE.\n         LA    R13,ALTAREA         PTR WORD W/A.\n         B     GWRT\n         SPACE 1\n*        END JOB - FINAL MESSAGE.\n         SPACE 1\nJOBEND   LR    R4,R7\n         A     R4,SMF30IOF         JOB / SESSION IDENTIFICATION.\n         USING SMF30ID,R4          JOB / SESSION ID ADDRESSABILITY.\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE A BLANK ROW.\n         MVI   SEQ,C'-'\n         MVC   SEQ+1(SEPL-1),SEQ\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE SEPARATOR.\n         MVC   SEQ(SEPL),SEQ-1\n         MVC   SEQ,=C' JOB : '     SET TEXT.\n         MVC   STP,SMF30JBN        JOB NAME.\n         MVC   PGM,=C'/ TOTAL '    ALL JOB.\n         LH    R15,SMF30PGN        PERFORM GROUP NUMBER.\n         MVI   PEQ,C'/'\n         LA    R5,PEQ+2            CLASS-PERFORM.\n         BAL   R2,BIDI\n         MVC   PEQ+2(1),SMF30CLS   JOB CLASS.\n         MVI   PEQ+2+1,C'-'        A-XXX.\n         OI    PEQ+2+2,C'0'        FORCE ZERO.\n         OI    PEQ+2+3,C'0'        FORCE ZERO.\n         DROP  R4\n         SPACE 1\n*        COLLECT DISK-TAPE-TERM I/O ACTIVITY.\n         SPACE 1\nGOOUT    MVI   SSP+1,C':'\n         LA    R5,TTLIST\n         LR    R4,R7\n         SR    R8,R8               HERE NUMBER OF I/O DISK.\n         SR    R9,R9               HERE NUMBER OF I/O TAPE.\n         SR    R10,R10             HERE NUMBER OF I/O TERM.\n         A     R4,SMF30UOF         I/O ACTIVITY SEGMENT.\n         USING SMF30URA,R4         I/O ACTIVITY SEGMENT.\n         A     R10,SMF30TPT        TPUT.\n         A     R10,SMF30TGT        TGET.\n         DROP  R4\n         LR    R4,R7\n         A     R4,SMF30EOF         EXCP SEGMENT.\n         USING SMF30EXP,R4         EXCP SEGMENT.\n         LH    R6,SMF30EON         NUMBER OF EXCP SEGMENTS.\n         LTR   R6,R6               IF ZERO ENTRIES, GO HOME.\n         BE    ENDIO\nLOOPIO   CLI   SMF30DEV,X'20'      IF DASD DEVICE.\n         BE    ADDR8\n         CLI   SMF30DEV,X'80'      IF TAPE DEVICE.\n         BE    ADDR9\n         CLI   SMF30DEV,X'40'      IF COMMUNICATION DEVICE.\n         BE    ADDRA\n         CLI   SMF30DEV,X'10'      IF GRAPHICS DEVICE.\n         BE    ADDRA\n         TM    SMF30CUA,SMF30VDV   IF VIRTUAL DEVICE.\n         BNZ   NEXTDEV\nADDR8    A     R8,SMF30BLK         NUMBER OF DISK EXCP-S.\n         B     NEXTDEV\nADDR9    A     R9,SMF30BLK         NUMBER OF TAPE EXCP-S.\n         B     NEXTDEV\nADDRA    A     R10,SMF30BLK        NUMBER OF TERM EXCP-S.\nNEXTDEV  AH    R4,SMF30ELN         LENGTH OF EXCP SECTION.\n         BCT   R6,LOOPIO\n         DROP  R4\nENDIO    LTR   R8,R8               IF ZERO I/O DISK, SKIP NEXT CODE.\n         BZ    TOTAPE              GO TO SEE IF I/O TAPE.\n         LR    R15,R8              DISK I/O.\n         MVC   6(11,R5),=C'I/O DISK + '\n         BAL   R2,BIDI\n         LA    R5,L'TTLIST(R5)\nTOTAPE   LTR   R9,R9               IF ZERO I/O TAPE, SKIP NEXT CODE.\n         BZ    TOTERM              GO TO SEE IF I/O TERM.\n         LR    R15,R9              TAPE I/O.\n         MVC   6(11,R5),=C'I/O TAPE + '\n         BAL   R2,BIDI\n         LA    R5,L'TTLIST(R5)\nTOTERM   LTR   R10,R10             IF ZERO I/O TERM, SKIP NEXT CODE.\n         BZ    TOTOTA              GO TO PRINT I/O TOTAL.\n         LR    R15,R10             TERM I/O.\n         MVC   6(11,R5),=C'I/O TERM = '\n         BAL   R2,BIDI\n         LA    R5,L'TTLIST(R5)\nTOTOTA   LR    R15,R8              GET DISK I/O.\n         AR    R15,R9              ADD TAPE I/O.\n         AR    R15,R10             ADD TERM I/O.\n         LTR   R15,R15             IF TOT. I/O EQ 0 WRITE IT.\n         BZ    TOTA\n         CR    R15,R8              IF TOT. I/O EQ DISK I/O SKIP.\n         BE    ADJ\n         CR    R15,R9              IF TOT. I/O EQ TAPE I/O SKIP.\n         BE    ADJ\n         CR    R15,R10             IF TOT. I/O EQ TERM I/O SKIP.\n         BE    ADJ\n         SH    R5,=H'2'\n         MVI   0(R5),C'='\n         AH    R5,=H'2'\nTOTA     MVC   6(8,R5),=C'I/O TOT.'\n         BAL   R2,BIDI\n         B     WRTMSG\nADJ      SH    R5,=H'3'\n         MVC   0(3,R5),=C'.  '\nWRTMSG   LA    R10,ROW\n         BAL   R2,SLWRT            WRITE ROW.\n         MVC   ROW+1(MSGL-1),ROW\n         MVI   SEQ,C'-'\n         MVC   SEQ+1(SEPL-1),SEQ\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE SEPARATOR.\n         MVC   SEQ(SEPL),SEQ-1\n         LA    R10,ROW\n         BAL   R2,SLWRT            WRITE A BLANK ROW.\n         DROP  R7\n         SPACE 1\n*        FREE WORK AREA AND GO BACK.\n         SPACE 1\n         DROP  R3\n         LR    R1,R3               ADDRESS OF AREA TO BE FREED.\n         L     R3,4(R13)           PREVIOUS SAVE AREA.\n        FREEMAIN R,LV=AREAL,A=(1),SP=255\n         LR    R13,R3              RESTORE ORIGINAL SAVE AREA.\n         B     GOBACK\n         EJECT\n*        LOCAL SUBROUTINE BIDI : TRANSLATE FROM BINARY TO EBCDIC.\n*        -----------------------\n*\n*        INPUT : R15 (BINARY VALUE).\n*        OUTPUT : POINTED BY R5 (FIVE DIGITS : NNNNN, NNNNK OR NNNNM).\n*        LINK REGISTER : R2.\n         SPACE 1\n         USING AREA,R3             ADDRESSABILITY.\nBIDI     MVI   4(R5),C'0'\n         LTR   R15,R15             VALID REQUEST?\n         BZR   R2                  NO, ZERO.\n         MVC   UP,=XL8'4020202020202020'     EDIT MASK.\n         C     R15,=F'99999'       MAX. FOR FIVE DIGITS.\n         BH    TRYKM\n         CVD   R15,DW              IN DECIMAL FORMAT.\n         ED    UP,DW+4\n         MVC   0(5,R5),UP+3\n         BR    R2                  RETURN.\nTRYKM    SR    R14,R14\n         D     R14,=F'1000'        IN K.\n         MVI   4(R5),C'K'\n         C     R15,=F'9999'        STAYS IN FIVE DIGITS?\n         BNH   SETKM               YES.\n         SR    R14,R14\n         D     R14,=F'1000'        IN M.\n         MVI   4(R5),C'M'\nSETKM    CVD   R15,DW              IN DECIMAL FORMAT.\n         ED    UP,DW+4\n         MVC   0(4,R5),UP+4\n         BR    R2                  RETURN.\n         DROP  R3\n         EJECT\n*        EXIT - NORMAL TERMINATION.\n         SPACE 1\nGOBACK   LM    R14,R12,12(R13)     RESTORE REGISTERS.\n         SR    R15,R15             TO CONTINUE PROCESSING.\n         SR    R1,R1               TO WRITE RECORD TO SMF DATA SET.\n         BR    R14                 GO BACK.\n         SPACE 1\n*        EXIT - ABNORMAL TERMINATION.\n         SPACE 1\nCANCEL   LM    R14,R12,12(R13)     RESTORE REGISTERS.\n         LA    R15,4               TO CANCEL THIS JOB.\n         SR    R1,R1               TO WRITE RECORD TO SMF DATA SET.\n         BR    R14                 GO BACK.\n         EJECT\n*        GENERAL SUBROUTINE GWRT : OUTPUT A MESSAGE.\n*        -------------------------\n*\n*        INPUT : R10 (ADDRESS OF BUFFER TO BE WRITTEN).\n*                R12 (CONTENTS AS ON ENTRY TO IEFACTRT).\n*                R13 (POINTER WORD W/A).\n*                R15 (LENGTH OF MESSAGE).\n*        LINK REGISTER : R2.\n         SPACE 1\n* NOTE - IEFACTRT IS THE ONLY EXIT ROUTINE THAT CAN WRITE TO THE\n*        SYSTEM OUPUT MESSAGE DATA SET, AND ONLY BY PASSING A\n*        MESSAGE TO MODULE IEFYS. IF A USER-WRITTEN IEFACTRT EXIT\n*        ROUTINE WRITES MESSAGES FOR SYSTEM OUTPUT, THE CONTENTS OF\n*        REGISTER 12 MUST BE THE SAME AS WHEN THE ROUTINE RECEIVED\n*        CONTROL, AND REGISTER 13 MUST CONTAIN THE ADDRESS OF AN\n*        18 WORDS WORK AREA. THE MAXIMUM NUMBER OF CHARACTERS PRINTED\n*        ON ONE LINE IS 132 (THE MESSAGE WILL BE TRUNCATED TO 132\n*        CHARACTERS IF NECESSARY). THE PROCEDURE TO USE WHEN WRITING\n*        SYSTEM OUTPUT MESSAGES FROM IEFACTRT IS SHOWED BELOW :\n*\n*                 MVC   36(4,12),MSGADDR   MOVE MESSAGE ADDRESS AND\n*                 MVC   42(2,12),MSGLEN    LENGTH TO SYSTEM TABLE,\n*                 L     15,VIEFYS          BRANCH AND LINK TO MESSAGE\n*                 BALR  14,15              ROUTINE.\n*                 ...\n*        MSGADDR  DC    A(MSG)\n*        MSG      DC    C'...MESSAGE TEXT...'\n*        MSGLEN   DC    H'...MESSAGE LENGTH...'\n*        VIEFYS   DC    V(IEFYS)\n         SPACE 1\nGWRT     STCM  R10,B'1111',36(R12) MSG ADDRESS FOR IEFYS.\n         STCM  R15,B'0011',42(R12) SET FOR IEFYS.\n         L     R15,VIEFYS          PICK UP VCON.\n         BALR  R14,R15             ENTER IEFYS.\n         LR    R13,R3              RESTORE SAVE AREA ADDRESS.\n         BR    R2                  RETURN.\n         EJECT\n*              CONSTANTS.\n         SPACE 1\nVIEFYS   DC    V(IEFYS)            VCON FOR IEFYS.\nTRTAB    DC    C'0123456789ABCDEF'\nMNDD     DC    C'NUMBER OF I/O-S (EXCP-S) BY DD-NAMES :'\n         SPACE 1\n*        JOB COST = ((CPU * 10) + (IOC * 5) + (MSO * 0.5) +\n*                    (SRB * 10)) / (4.58 * (10**7))\n         SPACE 1\n*                                            VALUE = NNN.NN\nSUTB     DC    CL26'CPU SERVICE (CPU)         ',PL3'+1000'\n         DC    CL26'I/O SERVICE (IOC)         ',PL3'+500'\n         DC    CL26'MAIN STORAGE SERVICE (MSO)',PL3'+50'\n         DC    CL26'SRB SERVICE (SRB)         ',PL3'+1000'\nSUNML    EQU   26\nSUKVL    EQU   3\nSUTBL    EQU   SUNML+SUKVL\nSUTBN    EQU   (*-SUTB)/SUTBL\nKUO      DC    PL3'+458'                     VALUE = NNN.NN\n         EJECT\n        $SIDTB TYPE=I/O\n         EJECT\n         LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUJI": {"ttr": 18182, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89&/\\x00\\x89&/\\x15U\\x018\\x018\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-09-19T00:00:00", "modifydate": "1989-09-19T15:55:00", "lines": 312, "newlines": 312, "modlines": 0, "user": "SYSPAJA"}, "text": "UJI      TITLE '-- I E F U J I - MVS/SMF JOB INITIATION EXIT --'\n         EJECT\nIEFUJI   START 0\n         SPACE 1\nIEFUJI   AMODE 24\nIEFUJI   RMODE 24\n         SPACE 1\n*            -------------------------------------------------\n*              S M F   J O B   I N I T I A T I O N   E X I T\n*            -------------------------------------------------\n         SPACE 1\n* AT ENTRY TO THE IEFUJI EXIT ROUTINE, REGISTER 1 POINTS TO A LIST OF\n* --------     FOUR-BYTE ADDRESSES AS FOLLOWS :\n*\n* +0  -  1. THE ADDRESS OF THE COMMON EXIT PARAMETER AREA.\n*\n* +4  -  2. THE ADDRESS OF A 20-BYTE AREA CONTAINING THE PROGRAMMER'S\n*           NAME (IN EBCDIC) FROM THE JOB STATEMENT. THIS AREA IS\n*           ALIGNED LEFT AND PADDED WITH BLANKS IF NECESSARY.\n*\n* +8  -  3. THE ADDRESS OF A ONE-BYTE AREA INDICATING (IN BINARY) THE\n*           REQUESTED JOB SELECTION PRIORITY. THIS FIELD EQUALS THE\n*           USER-ASSIGNED PRIORITY OF 0 TO 14 (TAKEN FROM THE PRTY\n*           PARAMETER ON THE JOB CARD).\n*\n* +12 -  4. THE ADDRESS OF AN AREA CONTAINING THE ACCOUNTING INFORMA-\n*           TION FROM THE JOB STATEMENT.\n*           FORMAT : - OFFSET 0, NUMBER OF ACCOUNTING FIELDS (ONE\n*                                BYTE, BINARY).\n*                    - OFFSET 1, THE ACCOUNTING FIELDS (VARIABLE). EACH\n*                                ENTRY FOR AN ACCOUNTING FIELD CONTAINS\n*                                THE LENGTH OF THE FIELD (ONE BYTE,\n*                                BINARY, A ZERO INDICATES AN OMITTED\n*                                FIELD) FOLLOWED BY THE FIELD (EBCDIC).\n         SPACE 1\n* AT EXIT BEFORE THE IEFUJI EXIT ROUTINE RETURNS CONTROL TO THE\n* -------      CONTROL PROGRAM, IT MUST PLACE A RETURN CODE IN\n*              REGISTER 15, AS FOLLOWS :\n*\n*              0 - INDICATES JOB PROCESSING SHOULD BE CONTINUED.\n*              4 - INDICATES JOB PROCESSING SHOULD BE CANCELED.\n         SPACE 2\n* AUTHOR :     A. COLOMBO (AMDAHL CONSULTANT)\n* --------     P.A. MOINIL\n*              COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         EJECT\n        $DEFREG\n         EJECT\n        $CEPA\n         EJECT\n        PRINT  NOGEN\n         SPACE 1\n        CVT    DSECT=YES,LIST=YES\n        IHAPSA\n        IHAASCB\n        IKJTCB LIST=YES\n        IEFTCT\nLCT      DSECT\n        IEFALLCT\nJCT      DSECT\n        IEFAJCTB\n         AIF   ('&SYSPARM' NE 'TEST').O2S1\nSCT      DSECT\n        IEFASCTB\n.O2S1    SPACE 1\n        PRINT  GEN\n         SPACE 2\n*              WORK AREAS.\n         SPACE 1\nAREA     DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -\n         SPACE 1\nSAVAREA  DS    18F           SAVE AREA.\n         SPACE 1\n         AIF   ('&SYSPARM' EQ 'TEST').O2S2\nWORK     DS    D             WORK.\n.O2S2    ANOP\nSWTO     DC    F'0'                LENGTH & FLAGS.\n         AIF   ('&SYSPARM' EQ 'TEST').O2S3\nSMSGTX   DC    CL12'--- IEFUJI ('\nSMSGTN   DC    CL8' ',CL25') - NEW JOB TIME LIMIT : '\nSMSGTH   DC    CL2'  ',CL2'H '      HOURS.\nSMSGTM   DC    CL2'  ',CL2'M '      MINUTES.\nSMSGTS   DC    CL2'  ',CL2'S.'      SECONDS.\n         AGO   .O2S4\n.O2S3    ANOP\nSMSGTXJ  DC    CL23'--- IEFUJI TEST - JCT ('\nSMSGJCT  DC    CL9' ',C' '\nSMSGJTM  DC    CL7' '\nSMSGTXS  DC    CL6' SCT ('\nSMSGSCT  DC    CL9' ',C' '\nSMSGSTM  DC    CL7' '\n.O2S4    ANOP\nLWTO     EQU   *-SWTO              WTO LENGTH.\nDCRC     DC    XL4'0'              DESC. & ROUTING CODES.\n         SPACE 1\nAREAL    EQU   (((*-AREA)+7)/8)*8\n         SPACE 2\nIEFUJI   CSECT                     RESTORE ORIGINAL CSECT.\n         EJECT\n         USING *,R11               ADDRESSABILITY.\n         SPACE 1\n         STM   R14,R12,12(R13)     SAVE REGISTERS.\n         LA    R11,0(R15)          SET BASE REGISTER.\n         L     R2,0(R1)            GET COMMON EXIT PARM. ADDRESS.\n         B     START\n         SPACE 1\n         USING CEPA,R2\n         SPACE 1\n         DC    CL8'IEFUJI',C'-'    IDENTIFIER.\n         DC    CL8'&SYSDATE',C'('  ASSEMBLY DATE.\n         DC    CL5'&SYSTIME',C')'  ASSEMBLY TIME.\n         SPACE 1\n* PROCESS :\n* ---------\n*\n*        WHEN SUPPLIED, THE SRB TIME LIMIT (NUMBER OF I/O OPERATIONS\n*        IN THOUSANDS, PASSED THROUGH THE USER COMMUNICATION FIELD,\n*        COMMON EXIT PARAMETER AREA +32, BY THE 'IEFUJV' EXIT) IS SET\n*        IN THE ASCB. WHEN ZERO, NO SRB TIMING IS PERFORMED.\n         SPACE 1\nSTART    SR    R5,R5\n         ICM   R5,B'0011',CEPAUCOM+2    I/O NUMBER LIMIT IF ANY (1000).\n         BZ    TSTCPU              IF ZERO, NO I/O NUMBER LIMIT.\n         LA    R6,SIDIO            SYSTEM-ID'S/FACTOR TO BE APPLIED.\nSCAN     CLC   0(L'CEPASID,R6),CEPASID\n         BE    FOUND\n         LA    R6,L'SIDIO(R6)\n         CLI   0(R6),0             AT END OF TABLE USE DEFAULT.\n         BNE   SCAN\nFOUND    SR    R4,R4               CLEAR REGISTER.\n         M     R4,4(R6)            I/O'S * (SRB-TIME FOR 1000 I/O).\n         SLDL  R4,12               TO HAVE ONE MICROSECOND IN BIT 51.\n         CH    R4,=H'1'            IF LESS, SET TO ONE (MINIMUM).\n         BNL   STOREIT             OTHERWISE STORE THAT TIME.\n         LH    R4,=H'1'            GET ONE.\n         USING PSA,R0\nSTOREIT  L     R3,PSAAOLD          PSA OLD ASCB POINTER.\n         USING ASCB,R3\n         ST    R4,ASCBR15C         SET SRB TIME LIMIT.\n         DROP  R0\n         SPACE 1\n         AIF   ('&SYSPARM' EQ 'TEST').O3S1\n         EJECT\n* PROCESS :\n* ---------\n*\n*        RE-EVALUATE THE JOB TIME LIMIT (SHOULD BE THE JOB CPU TIME\n*        REQUESTED) IF NEEDED.\n         SPACE 1\nTSTCPU   LA    R6,SIDCPU           SYSTEM-ID'S/FACTOR TO BE APPLIED.\nSCNTB    CLC   0(L'CEPASID,R6),CEPASID\n         BE    FNDTB\n         LA    R6,L'SIDCPU(R6)\n         CLI   0(R6),0             END OF TABLE?\n         BNE   SCNTB               NO, CONTINUE.\n         B     GOBACK              YES, NOTHING TO DO.\nFNDTB    LR    R1,R6               RETAIN IT.\n         LA    R1,L'SIDCPU(R1)\n         CLI   0(R1),0             END OF TABLE?\n         BNE   *-8                 NO, CONTINUE UNTIL REACHED.\n         CLC   4(4,R1),4(R6)       YES, ANYTHING TO DO?\n         BE    GOBACK              NO, NOTHING TO DO.\n         AGO   .O3S2\n.O3S1    EJECT\n* PROCESS :\n* ---------\n*\n*        ONLY WHEN PREDEFINED JOB-NAME MATCHES, DISPLAY THE ADDRESSES\n*        OF THE JCT AND SCT, THE JOB TIME LIMIT AND THE MAXIMUM STEP\n*        RUNNING TIME (SHOULD BE THAT OF THE FIRST JOB STEP).\n         SPACE 1\nTSTCPU   CLC   CEPAJOBN,=CL8'SYSSP1$'   IS IT THE TEST JOB-NAME?\n         BNE   GOBACK              NO, BYPASS.\n        GETMAIN R,LV=AREAL,SP=255\n         LR    R9,R1               SET BASE REGISTER FOR AREA.\n         USING AREA,R9             ADDRESSABILITY.\n         XC    SAVAREA(18*4),SAVAREA\n         ST    R13,SAVAREA+4       LINK SAVE AREAS.\n         ST    R9,8(R13)\n         LR    R13,R9              ACTIVE MY SAVE AREA.\n.O3S2    L     R3,CVTPTR           CVT.\n         USING CVT,R3\n         L     R4,CVTTCBP          TCB WORDS.\n         DROP  R3\n         L     R3,4(R4)            TCB.\n         USING TCB,R3\n         SR    R4,R4\n         ICM   R4,B'0111',TCBTCTB  TCT.\n         DROP  R3\n         USING SMFTCT,R4\n         L     R3,TCTLCTAD         LCT.\n         DROP  R4\n         USING LCT,R3\n         AIF   ('&SYSPARM' EQ 'TEST').O4S1\n         ICM   R4,B'1111',LCTJCTAD JCT.\n         BZ    GOBACK              NONE.\n         USING JCT,R4\n         CLC   JCTJMRTL(L'JCTJMRTL),=AL3(((24*60)-1)*60*100)\n         BNL   GOBACK              TIME=1440 OR MAXIMUM.\n         XR    R0,R0\n         XR    R1,R1\n         ICM   R1,B'0111',JCTJMRTL JOB TIME LIMIT (IN HUNDRED OF SEC).\n         M     R0,4(R6)            APPLY SYSTEM FACTOR.\n         D     R0,=F'100'          REDUCE TO HUNDRED OF SEC.\n         LTR   R0,R0\n         BZ    *+L'*+6\n         AH    R1,=H'1'            ROUND UP.\n         XR    R0,R0\n         ICM   R0,B'0111',=AL3(((24*60)-1)*60*100)\n         CLR   R1,R0               HIGHER THAN MAXIMUM?\n         BNH   *+L'*+2             NO.\n         LR    R1,R0               YES, GET MAXIMUM.\n         STCM  R1,B'0111',JCTJMRTL SET NEW JOB TIME LIMIT.\n         DROP  R3,R4\n         CL    R1,=A(@OPSGLV*60*100)    MUST BE SIGNALED?\n         BNH   GOBACK              NO.\n         LR    R3,R1               YES, INFORM OPERATOR.\n        GETMAIN R,LV=AREAL,SP=255\n         LR    R9,R1               SET BASE REGISTER FOR AREA.\n         USING AREA,R9             ADDRESSABILITY.\n         XC    SAVAREA(18*4),SAVAREA\n         ST    R13,SAVAREA+4       LINK SAVE AREAS.\n         ST    R9,8(R13)\n         LR    R13,R9              ACTIVE MY SAVE AREA.\n.O4S1    MVC   SWTO(4),WTOLST      SET MESSAGE AREA.\n         MVI   SWTO+1,LWTO\n         MVC   DCRC(4),WTOLST+6\n         AIF   ('&SYSPARM' EQ 'TEST').O4S2\n         MVC   SMSGTX(12),=CL12'--- IEFUJI ('\n         MVC   SMSGTN,CEPAJOBN     JOB-NAME.\n         MVC   SMSGTN+L'SMSGTN(25),=CL25') - NEW JOB TIME LIMIT : '\n         MVC   SMSGTH(12),=CL12' 0H  0M  0S.'\n         XR    R0,R0\n         LR    R1,R3\n         D     R0,=A(60*100)       COMPUTE SEC./MIN.\n         LTR   R0,R0\n         BZ    *+L'*+22\n         CVD   R0,WORK\n         MVC   WORK(4),=XL4'40202021'\n         ED    WORK(4),WORK+6\n         MVC   SMSGTS(2),WORK+2    SECONDS.\n         CL    R1,=F'60'           MORE THAN 1 HOUR?\n         BNL   *+L'*+6             YES.\n         LR    R0,R1               NO.\n         B     STMIN\n         XR    R0,R0\n         D     R0,=F'60'           COMPUTE MIN./HRS.\n         CVD   R1,WORK\n         MVC   WORK(4),=XL4'40202021'\n         ED    WORK(4),WORK+6\n         MVC   SMSGTH(2),WORK+2    HOURS.\n         LTR   R0,R0\n         BZ    *+L'*+22\nSTMIN    CVD   R0,WORK\n         MVC   WORK(4),=XL4'40202021'\n         ED    WORK(4),WORK+6\n         MVC   SMSGTM(2),WORK+2    MINUTES.\n         AGO   .O4S3\n.O4S2    MVC   SMSGTXJ(23),=CL23'--- IEFUJI TEST - JCT ('\n         MVC   SMSGTXS(6),=CL6' SCT ('\n         UNPK  SMSGJCT(L'SMSGJCT),LCTJCTAD(L'LCTJCTAD+1)\n         TR    SMSGJCT(L'SMSGJCT-1),TRTAB-X'F0'\n         MVC   SMSGJCT+L'SMSGJCT-1(2),=CL2') '\n         ICM   R4,B'1111',LCTJCTAD JCT.\n         BNZ   *+L'*+10\n         MVC   SMSGJTM(L'SMSGJTM),=CL7'-NONE-,'\n         B      *+L'*+16\n         USING JCT,R4\n         UNPK  SMSGJTM(L'SMSGJTM),JCTJMRTL(L'JCTJMRTL+1)\n         TR    SMSGJTM(L'SMSGJTM-1),TRTAB-X'F0'\n         MVI   SMSGJTM+L'SMSGJTM-1,C','\n         DROP  R4\n         UNPK  SMSGSCT(L'SMSGSCT),LCTSCTAD(L'LCTSCTAD+1)\n         TR    SMSGSCT(L'SMSGSCT-1),TRTAB-X'F0'\n         MVC   SMSGSCT+L'SMSGSCT-1(2),=CL2') '\n         ICM   R4,B'1111',LCTSCTAD SCT.\n         BNZ   *+L'*+10\n         MVC   SMSGSTM(L'SMSGSTM),=CL7'-NONE-.'\n         B      *+L'*+16\n         USING SCT,R4\n         UNPK  SMSGSTM(L'SMSGSTM),SCTSTIME(L'SCTSTIME+1)\n         TR    SMSGSTM(L'SMSGSTM-1),TRTAB-X'F0'\n         MVI   SMSGSTM+L'SMSGSTM-1,C'.'\n         DROP  R3,R4\n.O4S3   WTO    MF=(E,SWTO)         SEND MESSAGE TO LOG.\n         LR    R1,R9               ADDRESS OF AREA TO BE FREED.\n         DROP  R9\n         L     R9,4(R13)           PREVIOUS SAVE AREA ADDRESS.\n        FREEMAIN R,LV=AREAL,A=(1),SP=255\n         LR    R13,R9              RESTORE ORIGINAL SAVE AREA.\n         SPACE 1\nGOBACK   LM    R14,R12,12(R13)     RESTORE REGISTERS.\n         SR    R15,R15             SET RETURN CODE.\n         BR    R14                 GO BACK.\n         EJECT\n*        CONSTANTS.\n         SPACE 1\nWTOLST   WTO   '  ',MF=L,ROUTCDE=11,DESC=7\n         AIF   ('&SYSPARM' NE 'TEST').O8S1\nTRTAB    DC    CL16'0123456789ABCDEF'\n.O8S1    SPACE 2\n         LTORG\n         EJECT\n        $SIDTB TYPE=I/O\n         SPACE 1\n         AIF   ('&SYSPARM' EQ 'TEST').O9S1\n         EJECT\n        $SIDTB TYPE=CPU\n.O9S1    SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUJI$": {"ttr": 18188, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//IEFUJI   JOB (........),'INSTALL  -IEFUJI-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=2\n//ASS     EXEC PAJ2AS3,MBR=IEFUJI,OPT=',RENT'\n//LNK     EXEC PAJILKR,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   IEFUJI\n  NAME    IEFUJI(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUJI@": {"ttr": 18433, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\t\\x8f\\x00\\x88\\t\\x8f\\x14E\\x00A\\x00A\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-04-07T00:00:00", "modifydate": "1988-04-07T14:45:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "SYSPAJA"}, "text": "1   19/03/87\n                                                      IEFUJI    1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          SMF EXIT : IEJUJI          * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n             -------------------------------------------------\n               S M F   J O B   I N I T I A T I O N   E X I T\n             -------------------------------------------------\n\n  Purpose :\n  ---------\n\n         1. The SRB time limit (number of I/O operations in thousands),\n            if supplied and passed through the user communication field\n            (Common Exit Parameter Area +32) by the IEFUJV exit, is set\n            in the ASCB. When zero, no SRB timing is performed.\n\n         2. Re-evaluation of the job time limit (would be the job CPU\n            time requested) if needed.\n\n  SRB time evaluation :\n  ---------------------\n\n         One (1) second of SRB time is equivalent to the execution of\n         thousand (1000) I/O operations (in the worst case), but this\n         is CPU dependent, and the real SRB time may vary with trace\n         on or off, access method and/or programming language used\n         (i.e., the assembler is normally more than twice faster).\n\n  CPU time evaluation :\n  ---------------------\n\n         In a complex of computers, often all of these are not the\n         same model and thus not same CPU speed. To reflect this\n         situation, a system speed factor is applied to the job CPU\n         time in order to extend it in correspondence to the fastest\n         system in the complex.\n\n  Note : See assembler macro $SIDTB (SIDIO and SIDCPU tables) for\n  ------ systems apply factors.\n\n  -----------------\n  CJS involvement : see job SMFEXITS to correctly link-edit IEFUJI.\n  -----------------\n1   07/04/88\n                                                      IEFUJI    2/2.\n\n  Conditional assembly :\n  ----------------------\n\n         The IEFUJI source module may produce different object modules\n    depending on the assembly purpose. This selection is done setting\n    the assembler SYSPARM(PARM) parameter to the following value :\n\n            PARM - TEST : may be used for debugging purpose.\n                       Only when a predefined job-name matches, display\n                       the addresses of the JCT and SCT, the job time\n                       limit and the maximum step running time (should\n                       be that of the first job step).\n                   by default : re-evaluation of the job time limit if\n                       needed.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEFUJV": {"ttr": 18435, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x10\\x1f\\x00\\x90\\x10\\x1f\\x104\\x07(\\x07(\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-11T00:00:00", "modifydate": "1990-04-11T10:34:00", "lines": 1832, "newlines": 1832, "modlines": 0, "user": "SYSPAJA"}, "text": "UJV      TITLE '-- I E F U J V - MVS/SMF JOB VALIDATION EXIT --'\nIEFUJV   START 0\n         SPACE 1\n        PRINT  OFF\n         LCLB  &SEX\n         LCLB  &STE\n         LCLB  &SCA\n         LCLB  &STS\n         LCLB  &SDU\n&SEX     SETB  0\n&STE     SETB  0\n&SCA     SETB  0\n&STS     SETB  0\n&SDU     SETB  0\n         AIF   ('&SYSPARM' NE 'EXIT').O0S0\n&SEX     SETB  1\n         AGO   .O0S99\n.O0S0    AIF   ('&SYSPARM' NE 'TEST').O0S1\n&STE     SETB  1\n         AGO   .O0S99\n.O0S1    AIF   ('&SYSPARM' NE 'CALL').O0S2\n&SCA     SETB  1\n         AGO   .O0S99\n.O0S2    AIF   ('&SYSPARM' NE 'TSO').O0S3\n&STS     SETB  1\n         AGO   .O0S99\n.O0S3    ANOP\n&SDU     SETB  1\n.O0S99  PRINT  ON\n         SPACE 1\n         AIF   (&SEX OR &STE OR &SDU).O1S2\n         PRINT OFF\n** ===>===>===>===>===>===>===>===>===>===>===>===>===>===>===> /* A */\n         PRINT ON\n         EJECT\n         AIF   (NOT &STS).O1S0\n* CALLING SEQUENCE : CALL IEFUJV,(A,B,C,D,E,F),VL\n* ------------------\n*\n*        WHERE : A - IS THE REGION SIZE EXPRESSED IN K (FORMAT F).\n*                B - IS THE NUMBER OF I/O IN 1/1000 (FORMAT F).\n*                C - IS THE CPU TIME IN SECONDS (FORMAT F).\n*                D - IS THE OUTPUT FIELD FOR PRINT (FORMAT CL132, IT\n*                    MUST NOT CONTAIN THE CARRIAGE CONTROL CHARACTER\n*                    IN THE FIRST POSITION).\n*                E - IS THE ADDRESS OF UJVTABLE (FORMAT A).\n*                F - IS THE FLAGS REQUESTS BYTE (FORMAT XL1).\n         AGO   .O1S1\n.O1S0    ANOP\n* CALLING SEQUENCE : CALL IEFUJV,(A,B,C,D,E),VL\n* ------------------\n*\n*        WHERE : A - IS THE REGION SIZE EXPRESSED IN K (FORMAT F).\n*                B - IS THE NUMBER OF I/O IN 1/1000 (FORMAT F).\n*                C - IS THE CPU TIME IN SECONDS (FORMAT F).\n*                D - IS THE OUTPUT FIELD FOR PRINT (FORMAT CL132, IT\n*                    MUST NOT CONTAIN THE CARRIAGE CONTROL CHARACTER\n*                    IN THE FIRST POSITION).\n*                E - IS THE ADDRESS OF UJVTABLE (FORMAT A).\n.O1S1    PRINT OFF\n** ===>===>===>===>===>===>===>===>===>===>===>===>===>===>===> /* B */\n         PRINT ON\n         AGO   .O1S3\n.O1S2    EJECT\n         PRINT OFF\n** /* A */ <===<===<===<===<===<===<===<===<===<===<===<===<===<===<===\n         PRINT ON\n*            -------------------------------------------------\n*              S M F   J O B   V A L I D A T I O N   E X I T\n*            -------------------------------------------------\n         SPACE 1\n* AT ENTRY TO THE IEFUJV EXIT ROUTINE, REGISTER 1 POINTS TO A LIST OF\n* --------     FOUR-BYTE ADDRESSES, AS FOLLOWS :\n*\n* +0  -  1. THE ADDRESS OF THE COMMON EXIT PARAMETER AREA.\n*\n* +4  -  2. THE ADDRESS OF AN 80-CHARACTER JCL STATEMENT IMAGE (IN\n*           EBCDIC). JCL STATEMENTS ARE IDENTICAL TO THOSE LISTED IN\n*           THE SYSOUT DATA SET. CONTROL STATEMENTS CONTAINING ONLY\n*           COMMENTS AND RESOLVED VALUES FOR SYMBOLIC PARAMETERS,\n*           HOWEVER, ARE NOT MADE AVAILABLE TO THIS EXIT ROUTINE.\n*\n* +8  -  3. THE ADDRESS OF A ONE-BYTE AREA THAT INDICATES THE TYPE\n*           OF JCL STATEMENT BEING PASSED TO THIS EXIT ROUTINE. THE\n*           INDICATOR WILL BE A BINARY VALUE, AS FOLLOWS :\n*              0 - INDICATES A NULL STATEMENT.\n*              1 - INDICATES A JOB STATEMENT.\n*              2 - INDICATES AN EXEC STATEMENT.\n*              4 - INDICATES A DD STATEMENT.\n*              8 - INDICATES A PROC STATEMENT.\n*             16 - INDICATES ALL JCL HAS BEEN CONVERTED.\n*             32 - INDICATES ALL JCL HAS BEEN INTERPRETED AND ALL JCL\n*                  HAS BEEN PASSED TO IEFUJV.\n*            128 - INDICATES A //* COMMENT CARD (5785-GAK / CJS).\n*\n* +12 -  4. THE ADDRESS OF THE JES INITIALIZATION PARAMETERS THAT ARE\n*           PASSED TO THE CONVERTER ROUTINE. THE ADDRESS POINTS TO THE\n*           FIRST CONVERTER PARAMETER FIELD. THE FIELD IS A ONE-BYTE\n*           CHARACTER THAT CAN HAVE ONE OF THE FOLLOWING MEANINGS\n*           WHEN SET :\n*              0 - NO ACCOUNT NUMBER OR PROGRAMMER NAME REQUIRED.\n*              1 - PROGRAMMER NAME REQUIRED BUT NOT ACCOUNT NUMBER.\n*              2 - ACCOUNT NUMBER REQUIRED BUT NOT PROGRAMMER NAME.\n*              3 - ACCOUNT NUMBER AND PROGRAMMER NAME REQUIRED.\n*           NOTE : THE ACCOUNT NUMBER MUST NOT BE REQUIRED IN THE EXIT\n*                  FOR STARTED TASK JOB CARDS BECAUSE THERE IS NO WAY\n*                  TO PUT AN ACCOUNT NUMBER ON A STARTED TASK JOB CARD.\n         SPACE 1\n* AT EXIT BEFORE THE IEFUJV ROUTINE RETURNS TO THE CONTROL PROGRAM, IT\n* -------      MUST PLACE A RETURN CODE IN REGISTER 15, AS FOLLOWS :\n*\n*              0 - INDICATES JOB PROCESSING SHOULD BE CONTINUED.\n*              4 - INDICATES JOB PROCESSING SHOULD BE CANCELED.\n         EJECT\n         AIF   (&SDU).O99S0\n         PRINT OFF\n** ===>===>===>===>===>===>===>===>===>===>===>===>===>===> /* DUMMY */\n         PRINT ON\n         SPACE 1\n* NOTE : TO USE INSTALLATION-DEFINED DATA SETS WITH THIS EXIT ROUTINE,\n* ------ YOU MUST DEFINE THEM WITH A DD STATEMENT IN THE JOB ENTRY\n*        SUBSYSTEM CATALOGED PROCEDURE. WHEN RUNNING JES2, YOU MUST\n*        ALSO DEFINE THE DATA SETS WITH A DD STATEMENT IN THE INITIATOR\n*        CATALOGED PROCEDURE.\n*\n*        THE FOLLOWING DD-CARD FORMAT MUST BE USED TO ACCESS THE\n*        ACCOUNTING INFORMATION DATA-SET :\n*\n*          //SYSACC    DD DSN=...,DISP=SHR\n*\n*        OR :\n*\n*          //SYSACC    DD UNIT=...,VOL=SER=...,DSN=...,DISP=SHR\n         SPACE 2\n* CONTROL SUPPRESS (IT IS ALSO FORCED BY SETTING 'UJVFSW' IN MODULE\n* ----------------  'UJVTABLE' TO VALUE BELOW)\n*\n*        1. WHEN USING THE FOLLOWING DD-CARD :\n*\n*              //SYSACC    DD DUMMY\n*\n*           ONLY THE SYSTEM GROUP ACCOUNTING NUMBERS ARE VERIFIED,\n*           AND ALL OTHERS ARE REJECTED.\n*\n*        2. IF THERE IS NO DD-CARD (SYSACC DDNAME), ONLY THE SYSTEM\n*           GROUP ACCOUNTING NUMBERS ARE VERIFIED, AND ALL OTHERS\n*           ARE ACCEPTED WITHOUT CONTROL (THEY ARE JUST CHECKED FOR\n*           A VALID ACCOUNTING FIELD FORMAT : 8 NUMERICS).\n.O1S3    SPACE 2\n         PRINT OFF\n** /* B */ <===<===<===<===<===<===<===<===<===<===<===<===<===<===<===\n         PRINT ON\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         AIF   (&SEX OR &STE).O2S0\n         PRINT OFF\n** ===>===>===>===>===>===>===>===>===>===>===>===>===>===>===> /* C */\n         PRINT ON\n         SPACE 2\n        $DEFREG\n         EJECT\n        $UJVT\n         EJECT\n         AIF   (NOT &STS).O1S4\n         SPACE 1\nWRKDSECT DSECT                     WORK AREAS DESCRIPTION.\n         SPACE 1\nSVA      DS    18F                 SAVE AREA.\n         SPACE 1\nCONV     DS    D\nREGSZ    DS    F\nNUMIO    DS    F\nCPUTM    DS    F\nFLRQ     DS    XL1                 REQUESTS.\nSWSU     EQU   X'01'               SETUP COMPUTATIONS.\n         SPACE 1\nWRKL     EQU   (((*-SVA)+7)/8)*8   WORK AREAS LENGTH.\n         SPACE 1\nIEFUJV   CSECT                     RESTORE MAIN CSECT.\n.O1S4    SPACE 2\nLDES     DSECT                     LINE DSECRIPTION (D-ARGUMENT).\n         SPACE 1\nLINE     DC    0CL132' ',CL5' '\nRGV      DC    XL8'4020202020202120',CL2' '\nIOV      DC    XL8'4020202020202120',CL3' '\nTMV      DC    XL4'40202120',C','\nTSV      DC    CL2' ',CL10' '\nPRIO     DC    CL1' ',CL2' '\nIOX      DC    XL8'4020202020202120',CL2' '\nWGV      DC    XL8'4020202020202120',CL3' '\nCLV      DC    CL1' ',CL4' '\nPGV      DC    XL4'40202120'\n         SPACE 1\nFILL     EQU   0+L'LINE-(*-LINE)\n         DC    (FILL)C' '\n         SPACE 1\nIEFUJV   CSECT                     RESTORE MAIN CSECT.\n         EJECT\n* JOB STATEMENT PROCESS COMPUTATIONS :\n* ------------------------------------\n*\n*        1. JOB SCHEDULING PRIORITY FOR EXECUTION SELECTION.\n*\n*        2. JOB EXECUTION CLASS.\n*\n*        3. JOB PERFORMANCE GROUP NUMBER.\n         SPACE 1\n         AIF   (&STS).O1S5\n        $XENT  BASE=(R10,R11)\n         AGO   .O1S6\n.O1S5   $XENT  BASE=(R10,R11),LV=WRKL,TYPE=RENT\n         LR    R8,R13\n         USING WRKDSECT,R8\n.O1S6    L     R12,16(R1)\n         USING UVTDSECT,R12\n         LM    R2,R4,0(R1)\n         AIF   (NOT &STS).O1S7\n         L     R9,20(R1)\n         MVC   FLRQ(L'FLRQ),0(R9)\n.O1S7    L     R9,12(R1)\n         USING LDES,R9\n         MVC   LINE,LDATA\n         L     R0,0(R2)            EDIT REGION SIZE.\n         ST    R0,REGSZ\n         CVD   R0,CONV\n         ED    RGV,CONV+4\n         L     R0,0(R3)            EDIT I/O NUMBER.\n         ST    R0,NUMIO\n         MH    R0,THSND+2\n         CVD   R0,CONV\n         ED    IOV,CONV+4\n         L     R1,0(R4)            EDIT CPU TIME.\n         ST    R1,CPUTM\n         C     R1,MSEC\n         BL    NOMIN\n         XR    R0,R0\n         D     R0,MSEC\n         CVD   R1,CONV\n         ED    TMV,CONV+6\n         B     EDSEC\nNOMIN    LR    R0,R1\n         MVC   TMV,TMZ\nEDSEC    CVD   R0,CONV\n         UNPK  TSV(2),CONV+6(2)\n         OI    TSV+1,C'0'\n         XR    R0,R0               COMPUTE SCHEDULING PRIORITY.\n         L     R1,NUMIO\n         MH    R1,THSND+2\n         PRINT OFF\n** ===>===>===>===>===>===>===>===>===>===>===>===>===>===>===> /* D */\n         PRINT ON\n         AGO   .O9S2\n.O2S0    EJECT\n         PRINT OFF\n** /* C */ <===<===<===<===<===<===<===<===<===<===<===<===<===<===<===\n         PRINT ON\n        $DEFREG\n         EJECT\n        $CEPA\n         EJECT\n        $UJVT\n         EJECT\n        $AIRD  SEC=YES\n         AIF   (NOT &SEX).O2S1\n         EJECT\n        PRINT  NOGEN\n         SPACE 2\n         AGO   .O2S2\n.O2S1   PRINT  OFF\n.O2S2    ANOP\nTIODSECT DSECT\n         SPACE 1\n        IEFTIOT1\n         SPACE 1\nIEFUJV   CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 2\nNELDSECT DSECT\n         SPACE 1\n        IEFNEL SUBCOM=C\n         SPACE 1\nIEFUJV   CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 2\n$MAXDA   EQU   253       MAX. NO. OF SPOOL VOLUMES ($HASPEQU) / $JCT\n        IFGRPL ,         MVS ACB REQUEST PARAMETER LIST / $BUFFER\n         SPACE 1\n        $BUFFER\n         SPACE 1\n        $JCT\n         SPACE 2\n        DCBD   DSORG=DA\n         SPACE 1\nIEFUJV   CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 2\n         AIF   (NOT &SEX).O2S3\n        PRINT  GEN\n         AGO   .O2S4\n.O2S3   PRINT  ON\n.O2S4    TITLE '-- I E F U J V - MVS/SMF JOB VALIDATION EXIT --'\n*              WORK AREAS.\n         SPACE 1\nAREA     DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -\n         SPACE 2\nSAVAREA  DS    18F           SAVE AREA.\n         SPACE 2\nCONV     DS    D . . . . . . . . . START OF WORK DSECT . . . . . . .W.1\nWORK     DS    F\nDATE     DS    PL4\nAUTN     DS    H\nPRGN     DS    H\nERRSW    DS    XL1\nPRCSW    DS    XL1\nPFLNOC   EQU   X'01'\nPFLNOF   EQU   X'02'\nPFLECT   EQU   X'04'\nPFLSCT   EQU   X'08'\n         SPACE 2\nCOMMON   DS    0F  - - - - - - - - COMMON WORK AREA ORIGIN. - - - - - A\n         SPACE 1\nWCTL     DC    0F'0',AL2(L'WCTL+L'MSG,0)\nMSG      DC    CL72' '             MESSAGE AREA.\n         SPACE 2\nAREAW    EQU   (((*-CONV)+7)/8)*8  END OF WORK DSECT . . . . . . . .W.1\n         SPACE 2\n         ORG   COMMON - - - - - - - - - - - - - - - - - - - - - - - - A\n         SPACE 1\nEXTLST  EXTRACT  *-*,'S',FIELDS=(TIOT),MF=L\n         SPACE 2\n         ORG   COMMON - - - - - - - - - - - - - - - - - - - - - - - - A\n         SPACE 1\nDCBSR   DCB    DSORG=DA,MACRF=(RIC),BFALN=D,BFTEK=S,KEYLEN=0,LIMCT=1,  1\n               OPTCD=R,DDNAME=SYSACC\n        READ   DECBSR,DI,MF=L\nJOBFILE  DC    0F'0',XL1'87',AL3(*-*)\nJF       DC    XL176'00'\n         SPACE 2\nOVERLAY  DS    0F  - - - - - - - - COMMON WORK AREA ORIGIN. - - - - - B\n         SPACE 1\nDSCBSR  CAMLST SEARCH,*-*,*-*,*-*\n         DS    0D\nWKA      DC    XL148'00'\n         SPACE 2\n         ORG   OVERLAY  - - - - - - - - - - - - - - - - - - - - - - - B\n         SPACE 1\nRECAI    DC    (AUTLGTH)X'00'\nRECPI    DC    (PRGLGTH)X'00'\n         SPACE 2\nAREAL    EQU   (((*-AREA)+7)/8)*8\n         SPACE 1\nIEFUJV   CSECT                     RESTORE ORIGINAL CSECT.\n         EJECT\n**********************************************************************\n*                                                                    *\n* CONTROL BLOCKS FLOW BETWEEN IEFUJV (SMF) AND HASPCNVT (JES2) :     *\n* ==============================================================     *\n*                                                                    *\n* AT ENTRY, REGISTER 1 (1) POINTS TO :                               *\n* ------------------------------------                               *\n*   (1) ---> + 0 : A. CEPA                                           *\n*            + 4 : A. JCL STATEMENT                                  *\n*            + 8 : A. ONE-BYTE INDICATOR                             *\n*            +12 : A. JES INIT. PARM. ---> (2)                       *\n*                                                                    *\n* CONVERTER AND INTERPRETER ENTRANCE LIST :                          *\n* -----------------------------------------                          *\n*            NELLIST  : START OF DSECT                               *\n*             ...                                                    *\n*            NELJMR   : A. JMR ---> (3)                              *\n*             ...                                                    *\n*   (2) ---> NELPARMO : CONVERTER PARM. FIELD                        *\n*             ...                                                    *\n*                                                                    *\n* HASP (JES2) JOB CONTROL TABLE :                                    *\n* -------------------------------                                    *\n*            JCTDSECT : START OF DSECT                               *\n*             ...                                                    *\n*            JCTSTART : START OF DATA WRITTEN TO SPOOL               *\n*             ...                                                    *\n*   (3) ---> JCTJMRST : START OF JMR AREA                            *\n*             ...                                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n         USING *,R10,R11\n         SPACE 1\n         STM   R14,R12,12(R13)     SAVE REGISTERS.\n         LA    R10,0(R15)          SET BASE REGISTER.\n         LM    R2,R5,0(R1)         GET PARAMETERS ADDRESSES.\n         B     START\n         SPACE 1\n         USING CEPA,R2\n         SPACE 1\n         DC    CL8'IEFUJV',C'-'    IDENTIFIER.\n         DC    CL8'&SYSDATE',C'('  ASSEMBLY DATE.\n         DC    CL5'&SYSTIME',C')'  ASSEMBLY TIME.\n         SPACE 1\nSTART    LA    R11,2048(R10)       SET ADDITIONAL BASE REGISTERS.\n         LA    R11,2048(R11)\n         SPACE 1\n         CLI   0(R4),1             JOB STATEMENT?\n         BNE   OTHER               NO, LOOK FURTHER.\n         SPACE 1\n         SH    R5,ADNEL            CONVERTER/INTERPRETER ENTRY LIST.\n         USING NELDSECT,R5\n         TM    NELOPSWT,NELSMF     STARTED TASK (INITIATOR,...)?\n         BZ    EXIT                YES.\n         DROP  R5\n         EJECT\n* JOB STATEMENT PROCESS :\n* -----------------------\n*\n*        1. VERIFY THE ACCOUNTING NUMBER AND SUPPLY THE BOX NUMBER\n*           IF OMITTED, UNLESS THE ACCOUNT CONTROL IS SUPPRESSED.\n*           COPY THE ACCOUNTING NUMBER IN THE FIELD 'CEPAUSER' (USER\n*           IDENTIFICATION).\n*\n*        2. THE JOB TOTAL I/O'S NUMBER REQUEST (EXPRESSED IN 1/1000\n*           I/O) IS INITIALIZED FOR 'IEFUJI' EXIT. AN I/O'S NUMBER\n*           EQUAL TO OR LARGER THAN 7.200.000 (2 HOURS IN SECONDS /\n*           SRB TIME) MEANS A REQUEST TO SUPPRESS THE I/O CONTROL,\n*           BUT THIS IS EXHAUSTED ONLY IF THE JOB ACCOUNTING NUMBER\n*           IS AUTHORIZED, OTHERWISE VALUE 7200 IS FORCED FOR THE JOB.\n*           THE JOB TOTAL I/O'S NUMBER REQUEST IS PASSED IN THE FIELD\n*           'JCTUSER0' BY HASP.\n*           EXEMPTS : 1. THE SYSTEM AND THE OPERATOR CLASSES ARE\n*           ---------    ALLOWED TO BE EXEMPTED FROM THE I/O CONTROL\n*                        FOR JOBS WITH AN AUTHORIZED ACCOUNTING NUMBER.\n*                     2. SPECIAL TASK (I.E., ADABAS, I.M.S., CICS, ...)\n*                        CLASSES ARE ALSO EXEMPTED WHEN SUBMITTED WITH\n*                        AN AUTHORIZED ACCOUNTING NUMBER.\n*                     3. SOME PREDEFINED CLASS MEANS A JOB FOR WHICH\n*                        ALL NORMAL COMPUTATIONS ARE PERFORMED, BUT NO\n*                        NEW CLASS IS ASSIGNED (I.E., ADABAS-BATCH).\n*                     4. SPECIAL JOB CLASS ASSIGNMENT (SEE EXEC, DD AND\n*                        PROC STATEMENTS PROCESS).\n*\n*        3. PROCESS THE 'TIME' PARAMETER IF PRESENT. TIME=1440 IS ONLY\n*           SYSTEM TASKS AND JOBS SPECIAL AUTHORIZATIONS ALLOWED.\n*           IF ENCOUNTERED IN BACKGROUND OR FOREGROUND JOBS, IT IS\n*           CHANGED TO A 10 HOURS VALUE.\n*\n*        4. PROCESS THE 'REGION' PARAMETER IF PRESENT.\n         SPACE 1\n* WORKING USER-COMMUNICATION FIELD USE DESCRIPTION :\n* --------------------------------------------------\n*\n* CEPAUCOM   +0 - WORKING FLAGS AND PRIORITY INCREMENT (X'FI').\n*          +1-3 - REGION SIZE IN K :\n*                 0 (X'000000') = 0K OR 0M CODED IN JOB CARD,\n*                 WHICH MEANS ALL AVAILABLE XA CORE STORAGE.\n         SPACE 1\n*                        WORKING FLAGS DEFINITION.\nIOCSA    EQU   X'10'               ACCEPT TIME-I/O CONTROL SUPPRESS.\nETIME    EQU   X'20'               JOB CARD 'TIME' PARM. PROCESSED.\nEREGION  EQU   X'40'               JOB CARD 'REGION' PARM. PROCESSED.\nSCAN     EQU   X'80'               JOB CARD SCAN FLAG.\n         EJECT\n         L     R12,UJVTADDR\n         USING UVTDSECT,R12\n         LA    R5,2(R3)            SET SCAN REGISTERS VALUES.\n         LA    R6,1\n         LA    R7,71(R3)\n         XR    R8,R8\n         CLI   0(R5),C' '\n         BE    *+L'*+8\n         BXLE  R5,R6,*-8\n         B     NOJOB\n         CLI   0(R5),C' '\n         BNE   *+L'*+8\n         BXLE  R5,R6,*-8\n         B     NOJOB\n         CLC   0(L'JOBP,R5),JOBP   SEARCH JOB KEYWORD.\n         BNE   CJOB\n         MVC   CEPAUCOM,ZEROS      CLEAR (START OF JOB).\n         LA    R5,L'JOBP(R5)\n         CLI   0(R5),C' '          SEARCH START OF ACCOUNT NUMBER.\n         BNE   GETA\n         BXLE  R5,R6,*-8\nNOJOB    LA    R8,EJOB\nGETA     LR    R4,R13\n         AIF   (NOT &SEX).O3S0\n        GETMAIN    R,LV=AREAL,SP=230\n         AGO   .O3S1\n.O3S0   GETMAIN    R,LV=AREAL\n.O3S1    LR    R9,R1               SET BASE REGISTER FOR AREA.\n         USING AREA,R9\n         LA    R13,SAVAREA\n         XC    SAVAREA(18*4),SAVAREA\n         ST    R13,8(R4)           LINK SAVE AREAS.\n         ST    R4,4(R13)\n         LTR   R8,R8\n         BNZR  R8                  TAKE CHOOSEN EXIT.\n         SPACE 1\n         MVI   PRCSW,0             RESET PROCESS SWITCHES\n         LA    R8,NOACC\n         CLI   0(R5),C''''         BACKGROUND/FOREGROUND JOBS.\n         BE    ACTP\n         CLI   0(R5),C'('\n         BNE   ACTT\n         BXLE  R5,R6,*+L'*+4\n         B     INVACT\n         CLI   0(R5),C''''\n         BNE   ACTT\nACTP     OI    CEPAUCOM,SCAN\n         BXLE  R5,R6,ACTT\n         B     INVACT\nACTT     MVC   CONV(L'CONV),MKZ\n         MVZ   CONV(L'CONV),0(R5)\n         XC    CONV(L'CONV),MKZ\n         BNZ   INVACT\n         PACK  CONV,0(4,R5)        CONVERT AUTHORIZATION'S NUMBER.\n         NI    CONV+7,X'FC'\n         CVB   R1,CONV\n         LTR   R1,R1\n         BZ    INVACT\n         STH   R1,AUTN\n         PACK  CONV,4(4,R5)        CONVERT PROGRAMMER'S NUMBER.\n         NI    CONV+7,X'FC'\n         CVB   R1,CONV\n         LTR   R1,R1\n         BZ    INVACT\n         STH   R1,PRGN\n         MVC   CEPAUSER(L'CEPAUSER),0(R5)    SET ACC.NO. IN ID FIELD.\n         LA    R5,L'CONV(R5)\n         LA    R8,CHKSYS\n         OI    PRCSW,PFLNOC+PFLNOF\n         XC    WORK,WORK           GET TIOT ADDRESS.\n         MVC   EXTLST(EXTBLKL),EXTBLK\n         LA    R1,WORK\n         ST    R1,EXTLST\n        EXTRACT  MF=(E,EXTLST)\n         L     R4,WORK\n         LTR   R4,R4\n         BZ    ETIO                NO TIOT SUPPLIED.\n         L     R1,UJVFSW\n         CLI   0(R1),C'1'          FORCE CONTROL SUPPRESS IF SET.\n         BE    SETECT\n         CLI   0(R1),C'2'\n         BE    SETSCT\n         USING TIODSECT,R4\n         MVC   COMMON(DCBSKL),DCBSK     DCB SKELETON.\n         LA    R6,DCBSR\n         USING IHADCB,R6\nTLOOP    CLC   TIOELNGH(L'ZEROS),ZEROS  SEARCH DD-CARD IN TIOT.\n         BE    SETSCT\n         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM\n         BE    DDFND\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R4,R1\n         B     TLOOP\nDDFND    CLI   TIOELINK,0          TEST DUMMY DD-CARD.\n         BNE   TDEV\n         CLC   TIOEFSRT(L'TIOEFSRT),ZEROS\n         BE    SETECT\n         DROP  R4\nTDEV     LA    R7,MAXERR\n         XC    CONV,CONV           CONTROL DEVICE TYPE.\n        DEVTYPE  DCBDDNAM,CONV\n         CLI   CONV+2,X'20'\n         BNE   ERR1                NOT DIRECT-ACCESS DEVICE.\n         XC    JF(L'JF),JF         BUILD JFCB EXIT LIST.\n         LA    R0,JF\n         LA    R1,JOBFILE\n         ST    R0,0(R1)\n         MVI   0(R1),X'87'\n         XC    DCBEXLSA(L'DCBEXLSA),DCBEXLSA\n         O     R1,DCBEXLSA-1\n         ST    R1,DCBEXLSA-1\n         LA    R1,0(R6)            READ THE JFCB.\n         O     R1,JFCBSR\n         ST    R1,WORK\n        RDJFCB MF=(E,WORK)\n         LTR   R15,R15\n         BNZ   ERR2                JFCB READ ERROR.\n         MVC   DSCBSR(DSCBSKL),DSCBSK   OBTAIN DSCB.\n         LA    R1,JF\n         ST    R1,DSCBSR+4\n         LA    R1,JF+118           JFCBVOLS.\n         ST    R1,DSCBSR+8\n         LA    R1,WKA\n         ST    R1,DSCBSR+12\n         XC    WKA(L'WKA),WKA\n        OBTAIN DSCBSR\n         LTR   R15,R15\n         BNZ   ERR3                DSCB OBTAIN ERROR.\n         OI    JF+52,X'08'         INHIBIT WRITE BACK(JFCBTSDM).\n         LA    R1,0(R6)            OPEN DCB.\n         O     R1,OPENSR\n         ST    R1,WORK\n        OPEN   TYPE=J,MF=(E,WORK)\n         TM    DCBOFLGS,DCBOFOPN\n         BZ    ERR4                UNSUCCESSFULL OPEN.\n         XC    DCBEXLSA(L'DCBEXLSA),DCBEXLSA CLEAR EXIT.\n         MVC   DECBSR(DECBSKL),DECBSK   BUILD DECB AND READ RECORD.\n         LH    R0,AUTN\n         BCTR  R0,0\n         ST    R0,WORK\n         LA    R4,3                SET ERROR RETRY COUNT.\nTRYAG    MVI   ERRSW,0             RESET ERROR SWITCH.\n         LA    R1,DECBSR\n         XC    RECAI(AUTLGTH),RECAI\n        READ   (1),DI,(6),RECAI,'S',0,WORK+1,MF=E\n        CHECK  DECBSR\n         CLI   ERRSW,0             ANY ERROR DETECTED,\n         BE    *+L'*+4             BRANCH IF NOT.\n         BCT   R4,TRYAG            TRY AGAIN.\n         CLI   ERRSW,0             PERMANENT ERROR?\n         BNE   CLODS               YES.\n         L     R1,4(R13)           BACK THRU SAVE AREAS.\n         L     R1,24(R1)           RESTORE ENTRY REGISTER 1.\n         L     R1,12(R1)\n         SH    R1,ADNEL            CONVERTER/INTERPRETER ENTRY LIST.\n         USING NELDSECT,R1\n         L     R4,NELJMR           JOB MANAGEMENT RECORD IN JCT(HASP).\n         DROP  R1\n         SH    R4,ADJCT            HASP JOB CONTROL TABLE.\n         ST    R4,CONV             SAVE JCT ADDRESS.\n         USING JCTSTART,R4\n         CLC   JCTID,CKJCT         REALLY THE JCT?\n         BE    *+L'*+8             YES.\n         MVI   ERRSW,1\n         B     CLODS\n         CLI   JCTROOMN,0          PROGRAMMER'S ROOM NUMBER?\n         BE    *+L'*+8             NOT SUPPLIED.\n         CLI   JCTROOMN,C' '\n         BNE   CLODS               OK, SUPPLIED.\n         DROP  R4\n         LH    R0,PRGN\n         AH    R0,RELPOS\n         ST    R0,WORK\n         LA    R4,3                SET ERROR RETRY COUNT.\nAGTRY    MVI   ERRSW,0             RESET ERROR SWITCH.\n         LA    R1,DECBSR\n         XC    RECPI(PRGLGTH),RECPI\n        READ   (1),DI,(6),RECPI,'S',0,WORK+1,MF=E\n        CHECK  DECBSR\n         CLI   ERRSW,0             ANY ERROR DETECTED?\n         BE    CLODS               BRANCH IF NOT.\n         BCT   R4,AGTRY            TRY AGAIN.\nCLODS    LA    R1,0(R6)            CLOSE DCB.\n         O     R1,CLOSESR\n         ST    R1,WORK\n        CLOSE  MF=(E,WORK)\n         DROP  R6\n         CLI   ERRSW,0\n         BE    *+L'*+12\n         CLI   ERRSW,1\n         BNE   ERR5                PERMANENT READ ERROR.\n         B     EJCT\n        TIME   BIN\n         ST    R1,DATE             FORMAT = 0CYYDDDF.\n         AP    DATE,YP1900\n         L     R4,CONV             RESTORE JCT ADDRESS.\n         USING JCTSTART,R4\n         CLI   JCTROOMN,0          PROGRAMMER'S ROOM NUMBER?\n         BE    *+L'*+8             NOT SUPPLIED.\n         CLI   JCTROOMN,C' '\n         BNE   CHKBOX              OK, SUPPLIED.\n         LA    R6,RECPI\n         USING PRGDSECT,R6\n         CLC   PRGBXNO(L'PRGBXNO),MKZ\n         BE    SETBLKS             NO BOX SUPPLIED.\n         CLC   PRGBXNO(L'PRGBXNO),BLKS\n         BE    SETBLKS             NO BOX SUPPLIED.\n         CLC   PRGBXNO(L'PRGBXNO),ZEROS\n         BE    SETBLKS             NO BOX SUPPLIED.\n         MVC   JCTROOMN(L'PRGBXNO),PRGBXNO   SET BOX NUMBER.\n         B     CHKBOX\n         DROP  R6\nSETBLKS  MVC   JCTROOMN(L'JCTROOMN),BLKS\nCHKBOX   BAL   R14,CBOX            CHECK BOX NUMBER.\n         DROP  R4\n         LA    R6,RECAI\n         USING AUTDSECT,R6\n         LH    R1,AUTANO\n         LTR   R1,R1\n         BNP   CAUT                AUTHORIZATION CANCELED.\n         XR    R1,R1\n         ICM   R1,B'0111',AUTVSD\n         CL    R1,YB99             WHICH FORMAT?\n         BH    *+L'*+4             NEW FORMAT.\n         AL    R1,YB1900           OLD FORMAT, ADJUST IT.\n         CVD   R1,CONV\n         CP    DATE,CONV+4(4)\n         BL    EANA                AUTHORIZATION NOT YET ACTIVE.\n         XR    R1,R1\n         ICM   R1,B'0111',AUTVED\n         CL    R1,YB99             WHICH FORMAT?\n         BH    *+L'*+4             NEW FORMAT.\n         AL    R1,YB1900           OLD FORMAT, ADJUST IT.\n         CVD   R1,CONV\n         CP    DATE,CONV+4(4)\n         BH    EAUT                AUTHORIZATION EXPIRED.\n         LA    R0,AUTNPNF\n         LA    R1,AUTPNO\nCTLPRN   CLC   0(L'PRGN,R1),PRGN\n         BE    SETPRIO             PROGRAMMER IS ALLOWED, OK.\n         LA    R1,L'AUTPNO(R1)\n         BCT   R0,CTLPRN\n         B     UNPR\nSETPRIO  LA    R8,NORCV\n         NI    PRCSW,255-PFLNOC-PFLNOF\n         CLI   AUTPI,C'4'\n         BE    SRIOC\n         MVN   CEPAUCOM(L'AUTPI),AUTPI  GET PRIORITY INCR.\n         B     SRIOC\n         DROP  R6\nSETECT   OI    PRCSW,PFLECT\n         LA    R8,NORCV\n         B     RSTPFL\nSETSCT   OI    PRCSW,PFLSCT\n         LA    R8,NORCV\n         B     SRAUT\nCHKSYS   LA    R8,RCVACC\nRSTPFL   NI    PRCSW,255-PFLNOC-PFLNOF\nSRAUT    L     R4,SYSAUT           CHECK IF SYSTEM\nTSAUT    CLC   0(2,R4),ZEROS\n         BNE   CHKAUT\n         TM    PRCSW,PFLECT\n         BO    ECTL\n         TM    PRCSW,PFLSCT\n         BO    SCTL\n         LA    R8,CANCEL\n         B     NOCTL\nCHKAUT   CLC   0(2,R4),AUTN\n         BE    TSPRG\nNEXT     LA    R4,2(R4)\n         CLC   0(2,R4),ZEROS\n         BNE   NEXT\nBUMP     LA    R4,2(R4)\n         B     TSAUT\nTSPRG    LA    R4,2(R4)\n         CLC   0(2,R4),ZEROS\n         BE    BUMP\n         CLC   0(2,R4),PRGN\n         BNE   TSPRG\nRSTALL   NI    PRCSW,255-PFLNOC-PFLNOF-PFLECT-PFLSCT\nSRIOC    L     R4,SYSIOS           LOOK FOR TIME AND I/O CONTROL\nTSIOC    CLC   0(2,R4),ZEROS       SUPPRESS ACCEPTANCE.\n         BE    NOTIOS\n         CLC   0(2,R4),AUTN\n         BE    SETIOC\n         LA    R4,2(R4)\n         B     TSIOC\nSETIOC   OI    CEPAUCOM,IOCSA      ALLOW CONTROL SUPPRESS.\nNOTIOS   L     R1,4(R13)           BACK THRU SAVE AREAS.\n         L     R1,24(R1)           RESTORE ENTRY REGISTER 1.\n         L     R1,12(R1)\n         SH    R1,ADNEL            CONVERTER/INTERPRETER ENTRY LIST.\n         USING NELDSECT,R1\n         L     R4,NELJMR           JOB MANAGEMENT RECORD IN JCT(HASP).\n         DROP  R1\n         SH    R4,ADJCT            HASP JOB CONTROL TABLE.\n         USING JCTSTART,R4\n         CLC   JCTID,CKJCT         REALLY THE JCT?\n         BNE   EJCT                NO.\n         L     R6,SYSPST           LOOK FOR SPECIAL TASKS/CLASS.\nPSTEST   CLC   0(2,R6),ZEROS\n         BE    NOTPST\n         CLC   0(L'AUTN+L'PRGN,R6),AUTN\n         BE    PSCNTL\n         LA    R6,L'AUTN+L'PRGN+1(R6)\n         B     PSTEST\nPSCNTL   CLC   JCTJCLAS(1),L'AUTN+L'PRGN(R6) RIGHT CLASS SPECIFIED?\n         BNE   INVCLS              NO.\nNOTPST   CLI   JCTROOMN,0          PROGRAMMER'S ROOM NUMBER?\n         BE    NSBOX               NONE, NOT SUPPLIED.\n         BAL   R14,CBOX            OK, SUPPLIED, GO CHECK IT.\n         BR    R8\nNSBOX    L     R6,SYSBOX\nTSBOX    CLC   0(2,R6),ZEROS\n         BE    FORCE\n         LR    R7,R6\nTSBPR    LA    R6,2(R6)\n         CLC   0(2,R6),ZEROS\n         BE    TSBNX\n         CLC   0(2,R6),PRGN\n         BE    SETBOX\n         B     TSBPR\nTSBNX    LA    R6,2(R6)\n         B     TSBOX\nSETBOX   LH    R6,0(R7)\n         CVD   R6,CONV\n         UNPK  JCTROOMN,CONV+5(3)\n         OI    JCTROOMN+3,C'0'\n         BR    R8\nFORCE    MVC   JCTROOMN,NSYSBOX    FORCE TO SYSTEM GROUP BOX.\n         BR    R8\nCBOX     CLC   JCTROOMN(L'JCTROOMN),BLKS     CHECK BOX NUMBER ROUTINE.\n         BER   R14                 NO BOX SUPPLIED.\n         LA    R0,4                CHECK BOX NUMBER.\n         LA    R1,JCTROOMN\nCBOX1    CLI   0(R1),0\n         BE    CBOX2\n         CLI   0(R1),C' '\n         BNE   CBOX3\nCBOX2    MVI   0(R1),C'0'\n         LA    R1,1(R1)\n         BCT   R0,CBOX1\n         MVC   JCTROOMN(L'JCTROOMN),BLKS     NO BOX SUPPLIED.\n         BR    R14\nCBOX3    CLI   JCTROOMN+L'JCTROOMN-1,0\n         BE    CBOX4\n         CLI   JCTROOMN+L'JCTROOMN-1,C' '\n         BNER  R14\nCBOX4    MVC   CONV(L'CONV-L'JCTROOMN),MKZ\n         MVC   CONV+L'CONV-L'JCTROOMN(L'JCTROOMN),JCTROOMN\n         LA    R1,CONV+L'CONV-L'JCTROOMN\nCBOX5    CLI   L'JCTROOMN-1(R1),0\n         BE    CBOX6\n         CLI   L'JCTROOMN-1(R1),C' '\n         BNE   CBOX6+L'CBOX6\nCBOX6    BCT   R1,CBOX5\n         MVC   JCTROOMN(L'JCTROOMN),0(R1)\n         BR    R14\n         DROP  R4\nRCVACC   MVC   MSG(L'LOGERR),LOGERR\n         MVC   MSG+12(L'CEPAJOBN),CEPAJOBN   SET JOB NAME.\n         MVC   MSG+L'LOGERR(L'MSGRCV),MSGRCV\n         LA    R0,L'WCTL+L'LOGERR+L'MSGRCV\n         SLL   R0,16\n         ST    R0,WCTL\n         AIF   (NOT &SEX).O4S0\n        WTO    MF=(E,WCTL)\n         AGO   .O4S1\n.O4S0    MVC   TXWTO,MSG\n         BAL   R14,PRWTO\n.O4S1    ANOP\nNORCV    LA    R8,NOACC\n         B     NOCTL\n         SPACE 1\nRERR     MVI   ERRSW,255           SYNAD - SET ERROR SWITCH.\n         BR    R14                 RETURN.\n         SPACE 1\nEJCT     MVC   MSG+L'LOGERR(L'JCTERR),JCTERR\n         LA    R4,L'JCTERR\n         B     TERM\nUNPR     MVC   MSG+L'LOGERR(L'PRGERR),PRGERR\n         LA    R4,L'PRGERR\n         B     TERM\nETIO     MVC   MSG+L'LOGERR(L'TIOERR),TIOERR\n         LA    R4,L'TIOERR\n         B     TERM\nSCTL     LA    R8,RSTALL\n         MVC   MSG+L'LOGERR(L'CTLERR),CTLERR\n         LA    R4,L'CTLERR\n         B     TERM\nECTL     NI    PRCSW,255-PFLECT\n         MVC   MSG+L'LOGERR(L'DUMERR),DUMERR\n         LA    R4,L'DUMERR\n         B     TERM\nCAUT     MVC   MSG+L'LOGERR(L'INAERR),INAERR\n         LA    R4,L'INAERR\n         B     TERM\nEANA     MVC   MSG+L'LOGERR(L'ANAERR),ANAERR\n         LA    R4,L'ANAERR\n         B     TERM\nEAUT     MVC   MSG+L'LOGERR(L'ANEERR),ANEERR\n         LA    R4,L'ANEERR\n         B     TERM\nINVACT   MVC   MSG+L'LOGERR(L'ACCERR),ACCERR\n         LA    R4,L'ACCERR\n         B     TERM\nINVCLS   MVC   MSG+L'LOGERR(L'CLSERR),CLSERR\n         LA    R4,L'CLSERR\n         B     TERM\nEJOB     MVC   MSG+L'LOGERR(L'JOBERR),JOBERR\n         LA    R4,L'JOBERR\n         B     TERM\n         SPACE 1\nERR1     BCTR  R7,0                NOT DIRECT ACCESS DEVICE.\nERR2     BCTR  R7,0                JFCB READ ERROR.\nERR3     BCTR  R7,0                DSCB OBTAIN ERROR.\nERR4     BCTR  R7,0                UNSUCCESSFULL OPEN.\nERR5     BCTR  R7,0                PERMANENT READ ERROR.\n         SPACE 1\nMAXERR   EQU   ((*-ERR1)/2)+1\n         SPACE 1\n         MVC   MSG+L'LOGERR(L'MSGERR),MSGERR\n         CVD   R7,CONV\n         UNPK  MSG+L'LOGERR+L'MSGERR-4(3),CONV+6(2)\n         OI    MSG+L'LOGERR+L'MSGERR-2,C'0'\n         LA    R4,L'MSGERR\nTERM     TM    PRCSW,PFLNOC\n         BO    *+L'*+4\n         LA    R8,CANCEL\n         LA    R0,L'WCTL+L'LOGERR(R4)\n         SLL   R0,16\n         ST    R0,WCTL\n         MVC   MSG(L'LOGERR),LOGERR\n         MVC   MSG+12(L'CEPAJOBN),CEPAJOBN   SET JOB NAME.\n         AIF   (NOT &SEX).O4S2\n        WTO    MF=(E,WCTL)\n         AGO   .O4S3\n.O4S2    MVC   TXWTO,MSG\n         BAL   R14,PRWTO\n.O4S3    TM    PRCSW,PFLNOF\n         BOR   R8\nNOCTL    L     R4,4(R13)\n         LR    R1,R9\n         DROP  R9\n         AIF   (NOT &SEX).O5S0\n        FREEMAIN   R,LV=AREAL,A=(1),SP=230\n         AGO   .O5S1\n.O5S0   FREEMAIN   R,LV=AREAL,A=(1)\n.O5S1    LR    R13,R4\n         BR    R8                  TAKE CHOOSEN EXIT.\nNOACC    XR    R9,R9\n         L     R1,24(R13)          RESTORE ENTRY REGISTER 1.\n         L     R1,12(R1)\n         SH    R1,ADNEL            CONVERTER/INTERPRETER ENTRY LIST.\n         USING NELDSECT,R1\n         L     R4,NELJMR           JOB MANAGEMENT RECORD IN JCT(HASP).\n         DROP  R1\n         SH    R4,ADJCT            HASP JOB CONTROL TABLE.\n         USING JCTSTART,R4\n         CLC   JCTID,CKJCT         REALLY THE JCT?\n         BE    CIOT                YES.\n         LA    R8,FJCT\n         B     GETW\nCIOT     TM    CEPAUCOM,IOCSA      IS CONTROL SUPPRESS ALLOWED?\n         BZ    CIOTO               NO.\n         L     R1,SYSEXC           CLASS/EXEMPTIONS/PG TABLE.\nCIOTT    CLI   0(R1),0             END OF TABLE?\n         BE    CIOTO               YES.\n         CLC   JCTJCLAS(1),0(R1)   THIS CLASS?\n         BE    CIOTX               YES.\n         LA    R1,3(R1)\n         B     CIOTT\nCIOTX    TM    1(R1),IOXC          NO I/O CONTROL?\n         BO    SIOS                YES.\nCIOTO    L     R1,JCTUSER0         GET JOB I/O REQUEST.\n         LTR   R1,R1\n         BZ    TTYJ                NOTHING, USE DEFAULT.\n         CL    R1,MAXIO            CONTROL SUPPRESS?\n         BL    SSP                 NO, USE REQUEST.\n         TM    CEPAUCOM,IOCSA      IS CONTROL SUPPRESS ALLOWED?\n         BZ    SMAX                NO.\nSIOS     MVC   JCTUSER0,ZEROS      CLEAR I/O NUMBER.\n         MVI   JCTUSER0,255        INDICATE SUPPRESS I/O CONTROL.\n         B     SSP\nSMAX     MVC   JCTUSER0,MAXIO      SET MAXIMUM.\n         B     SSP\nTTYJ     TM    CEPAIND,X'01'       SET DEFAULT.\n         BO    FG\n         MVC   JCTUSER0,BGVAL      BACKGROUND.\n         B     SSP\nFG       MVC   JCTUSER0,FGVAL      FOREGROUND.\n         DROP  R4\nSSP      LA    R6,1\n         LA    R7,71(R3)\n         TM    CEPAUCOM,SCAN\n         BO    SAPT\n         B     STM\nCJOB     XR    R9,R9\n         TM    CEPAUCOM,SCAN\n         BO    SAPT\n         TM    CEPAUCOM,ETIME+EREGION\n         BNO   TEST\nSEJOB    CLI   1(R5),C' '          SEARCH END OF JOB STATEMENT.\n         BE    *+L'*+8\n         BXLE  R5,R6,SEJOB\n         B     ADV+L'ADV\n         CLI   0(R5),C','\n         BE    ADV+L'ADV\n         B     TJOB                GO TO END JOB STATEMENT PROCESS.\nTEST     CLC   0(L'TMP-1,R5),TMP+1\n         BE    FOUND               BRANCH IF TIME PARM.\n         CLC   0(L'REGP-1,R5),REGP+1\n         BE    FOUND               BRANCH IF REGION PARM.\n         B     ADV\nSAPS     OI    CEPAUCOM,SCAN\n         BXLE  R5,R6,SAPT\n         B     SCERR\nSAPT     CLI   0(R5),C''''\n         BNE   SAPNX\n         CLI   1(R5),C''''\n         BNE   SAPE\n         BXLE  R5,R6,*+L'*+4\n         B     SCERR\n         BXLE  R5,R6,SAPT\nSCERR    LA    R8,ERSC\n         LTR   R9,R9\n         BZ    GETW\n         BR    R8\nSAPNX    BXLE  R5,R6,SAPT\n         B     OUTT\nSAPE     NI    CEPAUCOM,255-SCAN\n         BXLE  R5,R6,STM\n         B     SCERR\nSTM      CLI   0(R5),C' '\n         BE    TEND\n         CLI   0(R5),C''''\n         BE    SAPS\n         CLC   0(L'TMP,R5),TMP\n         BE    FOUND+L'FOUND       BRANCH IF TIME PARM.\n         CLC   0(L'REGP,R5),REGP\n         BE    FOUND+L'FOUND       BRANCH IF REGION PARM.\nADV      BXLE  R5,R6,STM\nOUTT     LTR   R9,R9\n         BZ    EXIT\n         B     EXTS\nTEND     BCTR  R5,0\n         CLI   0(R5),C','          END OF JOB STATEMENT?\n         BE    ADV+L'ADV           NO.\n         B     TJOB                GO TO END JOB STATEMENT PROCESS.\nFOUND    BCTR  R5,0\n         XR    R8,R8\nGETW     LTR   R9,R9               AREA ALREADY OBTAINED?\n         BNZ   SKPG                YES, SKIP GETMAIN.\n         AIF   (NOT &SEX).O6S0\n        GETMAIN    R,LV=AREAW,SP=230\n         AGO   .O6S1\n.O6S0   GETMAIN    R,LV=AREAW\n.O6S1    LR    R9,R1\n         USING CONV,R9\nSKPG     LTR   R8,R8\n         BNZR  R8                  TAKE CHOOSEN EXIT.\n         CLC   1(L'TMP-1,R5),TMP+1\n         BNE   RGN                 BRANCH IF NOT TIME (REGION).\n         LA    R5,L'TMP-1(R5)\n         BXLE  R5,R6,*+L'*+4\n         B     EFTM\n         LA    R8,FTM10\n         CLI   0(R5),C'('\n         BNE   FTM0\n         XR    R8,R8\n         BXLE  R5,R6,FTM0\n         B     EFTM\nFTM0     CLC   0(L'NOTM,R5),NOTM   NO TIMING REQUESTED?\n         BNE   FTM1                BRANCH IF NOT SUPPRESSED.\n         TM    CEPAUCOM,IOCSA      IS CONTROL SUPPRESS ALLOWED?\n         BO    FTM1                YES.\n         MVC   0(L'TENH,R5),TENH   SET MAXIMUM.\nFTM1     CLI   0(R5),C'0'\n         BNL   FTM3\n         CLI   0(R5),C','\n         BNE   FTM2\n         LTR   R8,R8\n         BNZ   FTM11               'TIME=,' EQUAL NO TIME PARAMETER.\n         XR    R0,R0\n         B     FTM7\nFTM2     LTR   R8,R8\n         BZ    EFTM\n         CLI   0(R5),C' '\n         BE    TJOB                'TIME= ' EQUAL NO TIME PARAMETER.\n         B     EFTM\nFTM3     LA    R0,4                EXTRACT MINUTES.\n         L     R1,MKZ\nFTM4     SLL   R1,8\n         IC    R1,0(R5)\n         BXLE  R5,R6,FTM5\n         LTR   R8,R8\n         BZ    EFTM\n         B     FTM6+L'FTM6\nFTM5     CLI   0(R5),C','\n         BE    FTM6+L'FTM6\n         LTR   R8,R8\n         BZ    *+L'*+8\n         CLI   0(R5),C' '\n         B     *+L'*+4\n         CLI   0(R5),C')'\n         BE    FTM6\n         BCT   R0,FTM4\n         B     EFTM\nFTM6     LA    R8,FTM10\n         ST    R1,WORK\n         BAL   R14,CVBIN\n         LTR   R0,R0\n         BZ    *+L'*+4\n         MH    R0,MSEC\n         LTR   R8,R8\n         BNZR  R8                  TAKE CHOOSEN EXIT.\nFTM7     BXLE  R5,R6,*+L'*+4\n         B     EFTM\n         LA    R8,2                EXTRACT SECONDS.\n         L     R1,MKZ\nFTM8     SLL   R1,8\n         IC    R1,0(R5)\n         BXLE  R5,R6,*+L'*+4\n         B     EFTM\n         CLI   0(R5),C')'\n         BE    FTM9\n         BCT   R8,FTM8\n         B     EFTM\nFTM9     ST    R1,WORK\n         LR    R1,R0\n         BAL   R14,CVBIN\n         CH    R0,MSEC\n         BNL   EFTM\n         AR    R0,R1\nFTM10    LTR   R0,R0\n         BZ    EFTM\n         L     R1,24(R13)          RESTORE ENTRY REGISTER 1.\n         L     R1,12(R1)\n         SH    R1,ADNEL            CONVERTER/INTERPRETER ENTRY LIST.\n         USING NELDSECT,R1\n         L     R4,NELJMR           JOB MANAGEMENT RECORD IN JCT(HASP).\n         DROP  R1\n         SH    R4,ADJCT            HASP JOB CONTROL TABLE.\n         USING JCTSTART,R4\n         CLC   JCTID,CKJCT         REALLY THE JCT?\n         BNE   FJCT                NO.\n         ST    R0,JCTETIME         STORE TIME (IN SEC.).\n         DROP  R4\n         OI    CEPAUCOM,ETIME\nFTM11    TM    CEPAUCOM,EREGION\n         BZ    STM\n         BCTR  R5,0\n         B     SEJOB\nCVBIN    MVC   CONV(4),MKZ         CONVERT BINARY ROUTINE.\n         MVZ   CONV(4),WORK\n         XC    CONV(4),MKZ\n         BNZ   EFTM\n         PACK  CONV,WORK\n         NI    CONV+7,X'FC'\n         CVB   R0,CONV\n         BR    R14\nRGN      LA    R5,L'REGP-1(R5)     EXTRACT REGION PARAMETER VALUE.\n         BXLE  R5,R6,*+L'*+4\n         B     ERGN\n         LM    R0,R1,MKZ\n         LA    R4,LMKZL\nRGN1     CLI   0(R5),C'0'\n         BL    ERGN\n         CLI   0(R5),C'9'\n         BH    ERGN\n         SLDL  R0,8\n         IC    R1,0(R5)\n         BXLE  R5,R6,*+L'*+4\n         B     ERGN\n         CLI   0(R5),C'K'\n         BE    RGN2\n         CLI   0(R5),C'M'\n         BE    RGN2\n         BCT   R4,RGN1\n         B     ERGN\nRGN2     STM   R0,R1,WORK\n         PACK  CONV,WORK(LMKZL)\n         NI    CONV+7,X'FC'\n         CVB   R0,CONV\n         LTR   R0,R0\n         BZ    RGN4                0K OR 0M MEANS MAX.\n         CLI   0(R5),C'K'\n         BE    RGN3\n         CL    R0,MAXREG\n         BH    RGN4\n         MH    R0,ONEMEG\nRGN3     CL    R0,MAXREG\n         BNH   *+L'*+L'RGN4\nRGN4     L     R0,MAXREG\n         ST    R0,WORK\n         MVC   CEPAUCOM+1(3),WORK+1\n         OI    CEPAUCOM,EREGION\n         TM    CEPAUCOM,ETIME\n         BZ    STM\n         BCTR  R5,0\n         B     SEJOB\n         SPACE 1\nFJCT     MVC   MSG+L'LOGERR(L'JCTERR),JCTERR\n         LA    R4,L'JCTERR\n         B     SEND\nERSC     MVC   MSG+L'LOGERR(L'SCNERR),SCNERR\n         LA    R4,L'SCNERR\n         B     SEND\nERGN     MVC   MSG+L'LOGERR(L'RGNERR),RGNERR\n         LA    R4,L'RGNERR\n         B     SEND\nEFTM     MVC   MSG+L'LOGERR(L'ETMERR),ETMERR\n         LA    R4,L'ETMERR\nSEND     LA    R8,CANCEL           PROCESSING TO BE CANCELED.\n         LA    R0,L'WCTL+L'LOGERR(R4)\n         SLL   R0,16\n         ST    R0,WCTL\n         MVC   MSG(L'LOGERR),LOGERR\n         MVC   MSG+12(L'CEPAJOBN),CEPAJOBN   SET JOBNAME.\n         AIF   (NOT &SEX).O7S0\n        WTO    MF=(E,WCTL)\n         AGO   .O7S1\n.O7S0    MVC   TXWTO,MSG\n         BAL   R14,PRWTO\n.O7S1    B     EXTS+L'EXTS\nEXTS     LA    R8,EXIT\n         LR    R1,R9\n         DROP  R9\n         AIF   (NOT &SEX).O8S0\n        FREEMAIN   R,LV=AREAW,A=(1),SP=230\n         AGO   .O8S1\n.O8S0   FREEMAIN   R,LV=AREAW,A=(1)\n.O8S1    BR    R8                  TAKE CHOOSEN EXIT.\n         EJECT\n* JOB STATEMENT PROCESS TERMINATION :\n* -----------------------------------\n*\n*        1. SET THE JOB SCHEDULING PRIORITY FOR EXECUTION SELECTION.\n*\n*        2. SET THE JOB EXECUTION CLASS.\n*\n*        3. PREPARE THE USER COMMUNICATION FIELD (COMMON EXIT PARAMETER\n*           AREA +32) WITH THE JOB TOTAL I/O'S NUMBER (LAST TWO BYTES)\n*           EXPRESSED 1/1000 I/O (BINARY) OR ZERO IF THE I/O CONTROL\n*           MUST BE INACTIVE.\n*           THIS IS THE WAY VALUE IS PASSED TO 'IEFUJI' EXIT.\n*\n*        4. SET THE JOB PERFORMANCE GROUP NUMBER (1 TO 255 : THREE\n*           DIGITS OF THE 'PERFORM=' KEYWORD BUILDED BY THE HASP JCL\n*           CONVERSION PROCESSOR) IN THE FIRST BYTE OF THE 'JCTUSER0'\n*           FIELD.\n*           N.B. - 8 IS RESERVED TO OPERATORS HOLDING JOBS EXECUTION.\n         SPACE 1\n* FINAL USER-COMMUNICATION FIELD USE DESCRIPTION :\n* ------------------------------------------------\n*\n* CEPAUCOM +0-1 - NOT USED.\n*          +2-3 - JOB I/O REQUEST IN 1/1000 :\n*                 0 (X'0000') = NO I/O NUMBER LIMIT,\n*                 2 HOURS IN SEC. (X'1C20') = MAXIMUM.\n         EJECT\nTJOB     XR    R8,R8\n         L     R1,24(R13)          RESTORE ENTRY REGISTER 1.\n         L     R5,12(R1)\n         SH    R5,ADNEL            CONVERTER/INTERPRETER ENTRY LIST.\n         USING NELDSECT,R5\n         L     R4,NELJMR           JOB MANAGEMENT RECORD IN JCT(HASP).\n         DROP  R5\n         SH    R4,ADJCT            HASP JOB CONTROL TABLE.\n         USING JCTSTART,R4\n         CLC   JCTID,CKJCT         REALLY THE JCT?\n         BNE   NJCT                NO.\n         TM    CEPAIND,X'01'       IS IT A FOREGROUND JOB?\n         BO    SIOC                YES.\n         TM    CEPAUCOM,IOCSA      IS IT AUTHORIZED?\n         BZ    CSP                 NO.\n         L     R1,SYSEXC           CLASS/EXEMPTIONS/PG TABLE.\nSPR      CLI   0(R1),0             END OF TABLE?\n         BE    CSP                 YES.\n         CLC   JCTJCLAS(1),0(R1)   THIS CLASS?\n         BE    SPRT                YES.\n         LA    R1,3(R1)\n         B     SPR                 NO.\nSPRT     TM    1(R1),PYSL+IOXC     PRIORITY SELECT?\n         BZ    CSP                 NO.\n         MVI   JCTPRIO,12*16\n         B     SIOC\nCSP      LTR   R9,R9               AREA ALREADY OBTAINED?\n         BNZ   SJOB                YES, SKIP GETMAIN.\n         AIF   (NOT &SEX).O9S0\n        GETMAIN    R,LV=AREAW,SP=230\n         AGO   .O9S1\n.O9S0   GETMAIN    R,LV=AREAW\n.O9S1    LR    R9,R1\n         USING CONV,R9\nSJOB     XR    R0,R0               COMPUTE SCHEDULING PRIORITY.\n         ST    R0,CONV+4\n         L     R1,MAXIO            DEFAULT.\n         CLI   JCTUSER0,255        I/O CONTROL SUPPRESS REQUESTED?\n         BE    *+L'*+4             YES.\n         L     R1,JCTUSER0         GET I/O NUMBER REQUEST.\n         ST    R1,CONV\n         MH    R1,THSND+2\n         A     R1,JCTESTLN         ADD EST. OUTPUT (LINES + CARDS).\n         A     R1,JCTESTPU\n         PRINT OFF\n** /* D */ <===<===<===<===<===<===<===<===<===<===<===<===<===<===<===\n         PRINT ON\n.O9S2    LTR   R1,R1\n         BZ    *+L'*+8\n         M     R0,PCOEFF           COMPUTE (N * (I/O + OUTPUT))/1000.\n         D     R0,THSND\n         AIF   (&SCA OR &STS).O9S3\n         L     R0,DEFTIME          DEFAULT.\n         TM    CEPAUCOM,ETIME      JOB TIME SUPPLIED?\n         BZ    *+L'*+4             NO.\n         L     R0,JCTETIME         GET EST. TIME IN SECONDS.\n         ST    R0,CONV+4\n         AGO   .O9S4\n.O9S3    L     R0,CPUTM            GET TIME IN SECONDS.\n.O9S4    AR    R0,R1               SET CPU + (N * (I/O+OUTPUT))/1000.\n         L     R1,SCHPRT           COMPUTE SCHEDULING PRIORITY.\n         L     R5,SCHPRN\nCSP1     CL    R0,0(R1)\n         BNH   *+L'*+8\n         LA    R1,4(R1)\n         BCT   R5,CSP1\n         AIF   (&SCA OR &STS).O9S5\n         XR    R0,R0\n         IC    R0,CEPAUCOM         APPLY PRIORITY INCREMENT IF ANY.\n         LA    R1,255-IOCSA-ETIME-EREGION-SCAN\n         NR    R0,R1               CLEAR OUT FLAGS.\n         LTR   R0,R0\n         BZ    CSP2\n         SH    R0,FOUR\n         AR    R5,R0\n         LTR   R5,R5\n         BNM   CSP2\n         XR    R5,R5\nCSP2     SLL   R5,4\n         STC   R5,JCTPRIO          SET SCHEDULING PRIORITY.\n         L     R1,CONV             COMPUTE I/O INDEX (CATEGORY).\n         AGO   .O9S6\n.O9S5    STC   R5,PRIO             SET SCHEDULING PRIORITY.\n         OI    PRIO,C'0'\n         L     R1,NUMIO            COMPUTE I/O INDEX (CATEGORY).\n         CVD   R1,CONV\n         ED    IOX,CONV+4\n.O9S6    L     R0,IOCN\n         L     R5,IOCT\nCCL1     CL    R1,0(R5)\n         BNL   CCL2\n         SH    R5,FOUR\n         BCT   R0,CCL1\nCCL2     L     R5,SCHCLT           SELECT A STRING OF CLASSES.\n         AIF   (&SCA).O9S8\n         AIF   (&STS).O9S7A\n         TM    JCTJBOPT,JCTSETUP   TEST FOR SETUP CARD?\n         AGO   .O9S7B\n.O9S7A   TM    FLRQ,SWSU           TEST SETUP COMPUTATIONS?\n.O9S7B   BZ    *+L'*+4             NO.\n         L     R5,SCHCLTS          USE SETUP JOB CLASSES TABLE.\n.O9S8    LTR   R0,R0\n         BZ    CCL3\n         A     R5,SCHCLTL\n         BCT   R0,*-4\nCCL3     L     R0,MEMCN\n         L     R1,MEMCT\n         AIF   (&SCA OR &STS).O9S9\n         MVC   WORK,ZEROS\n         TM    CEPAUCOM,EREGION    JOB REGION SUPPLIED?\n         BO    CCL4                YES.\n         MVC   WORK+L'WORK-L'DEFREG(L'DEFREG),DEFREG\n         B     CCL5\nCCL4     MVC   WORK+1(3),CEPAUCOM+1\nCCL5     CLC   WORK(4),0(R1)       COMPUTE MEMORY CATEGORY.\n         AGO   .O9S10\n.O9S9    ANOP\nCCL5     CLC   REGSZ(L'REGSZ),0(R1) COMPUTE MEMORY CATEGORY.\n.O9S10   BNH   CCL6\n         LA    R1,4(R1)\n         LA    R5,1(R5)\n         BCT   R0,CCL5\n         AIF   (&SCA OR &STS).O9S11\nCCL6     L     R1,CONV+4           CPU.\n         AGO   .O9S12\n.O9S11   ANOP\nCCL6     L     R1,CPUTM            CPU.\n.O9S12   AIF   (&SEX OR &STE).O9S13\n         CVD   R1,CONV\n         ED    WGV,CONV+4\n.O9S13   XR    R6,R6               COMPUTE JOB WEIGHT.\n         L     R0,JWGHN\n         L     R7,JWGHT\nCWG1     CL    R1,0(R7)\n         BL    CWG2\n         LA    R6,1(R6)\n         LA    R7,4(R7)\n         BCT   R0,CWG1\nCWG2     LTR   R7,R6\n         BZ    *+L'*+8\n         A     R5,SCHCLTLG\n         BCT   R6,*-4\n         AIF   (&SCA OR &STS).O9S14\n         L     R1,SYSEXC           CLASS/EXEMPTIONS/PG TABLE.\nCWGSC    CLI   0(R1),0             END OF TABLE?\n         BE    CWGST               YES.\n         CLC   JCTJCLAS(1),0(R1)   THIS CLASS?\n         BE    CWGSJ               YES.\n         LA    R1,3(R1)\n         B     CWGSC\nCWGSJ    TM    1(R1),XCMN          CLASS RETAIN?\n         BO    CWGSK               YES, DON'T CHANGE CLASS.\nCWGST    MVC   JCTJCLAS(1),0(R5)   SET NEW JOB CLASS.\nCWGSK    MVC   JCTCLASS(1),JCTJCLAS     SET IT FOR SMF.\n         MVC   CEPAJC(L'CEPAJC),JCTJCLAS\n         TM    JCTJBOPT,JCTSETUP   TEST FOR SETUP CARD?\n         BZ    STPNC               NO.\n         L     R1,SYSEXC           CLASS/EXEMPTIONS/PG TABLE.\nSTPSC    CLI   0(R1),0             END OF TABLE?\n         BE    NSTP                YES.\n         CLC   JCTJCLAS(1),0(R1)   THIS CLASS?\n         BE    STPSJ               YES.\n         LA    R1,3(R1)\n         B     STPSC\nSTPSJ    TM    1(R1),XSTF+XCMN     SETUP ACCEPT?\n         BZ    NSTP                NO.\nSTPNC    EQU   *\n         AGO   .O9S15\n.O9S14   MVC   CLV(1),0(R5)        SET JOB CLASS.\n.O9S15   L     R5,JPGNT            SELECT CLASS TABLE.\nCWG3     CLI   0(R5),0\n         BE    CWG4+L'CWG4\n         AIF   (&SCA OR &STS).O9S16\n         CLC   JCTJCLAS(1),0(R5)\n         AGO   .O9S17\n.O9S16   CLC   CLV(1),0(R5)\n.O9S17   BE    CWG4\n         A     R5,JPGNTL\n         B     CWG3\nCWG4     AR    R5,R7\n         AIF   (&SEX OR &STE).O9S99\n         PRINT OFF\n** ===>===>===>===>===>===>===>===>===>===>===>===>===>===>===> /* E */\n         PRINT ON\n         XR    R1,R1\n         IC    R1,1(R5)            SET PERFORMANCE GROUP NUMBER.\n         CVD   R1,CONV\n         ED    PGV,CONV+6\n         SPACE 1\n         AIF   (&STS).O9S20\n        $XRET  CC=0\n         AGO   .O9S21\n.O9S20  $XRET  CC=0,LV=WRKL,TYPE=RENT\n.O9S21   EJECT\n*              CONSTANTS.\n         SPACE 1\n         AIF   (&STS).O9S25\nCONV     DC    D'0'\nREGSZ    DC    F'0'\nNUMIO    DC    F'0'\nCPUTM    DC    F'0'\n.O9S25   ANOP\nTEN      DC    F'10'\nMSEC     DC    F'60'\nHUNDR    DC    F'100'\nTHSND    DC    F'1000'\nFOUR     DC    H'4'\nTMZ      DC    CL4'   0'\n         SPACE 1\nLDATA    DC    0CL132' ',CL5' '\n         DC    XL8'4020202020202120',CL2' '\n         DC    XL8'4020202020202120',CL3' '\n         DC    XL4'40202120',C','\n         DC    CL2' ',CL10' '\n         DC    CL1' ',CL2' '\n         DC    XL8'4020202020202120',CL2' '\n         DC    XL8'4020202020202120',CL3' '\n         DC    CL1' ',CL4' '\n         DC    XL4'40202120'\n         SPACE 1\nFILLER   EQU   0+L'LDATA-(*-LDATA)\n         DC    (FILLER)C' '\n         PRINT OFF\n** ===>===>===>===>===>===>===>===>===>===>===>===>===>===> /* E N D */\n         PRINT ON\n         AGO   .O99S99\n.O9S99   PRINT OFF\n** /* E */ <===<===<===<===<===<===<===<===<===<===<===<===<===<===<===\n         PRINT ON\n         IC    R0,1(R5)            GET PERFORMANCE GROUP NUMBER.\n         LA    R8,EXIT\n         B     SIOC+L'SIOC\nSIOC     XR    R0,R0\n         L     R1,SYSEXC           CLASS/EXEMPTIONS/PG TABLE.\nPGFT     CLI   0(R1),0             END OF TABLE?\n         BE    IOCSR               YES.\n         CLC   JCTJCLAS(1),0(R1)   THIS CLASS?\n         BE    PGFS                YES.\n         LA    R1,3(R1)\n         B     PGFT\nPGFS     CLI   2(R1),0             ANY FORCE TO APPLY?\n         BE    IOCSR               NO.\n         IC    R0,2(R1)            GET PERFORMANCE GROUP NUMBER.\nIOCSR    CLI   JCTUSER0,255        I/O CONTROL SUPPRESS REQUESTED?\n         BE    SIOR                YES.\n         MVC   CEPAUCOM(2),ZEROS\n         MVC   CEPAUCOM+2(2),JCTUSER0+2 SET I/O REQUEST (IN SEC.).\n         B     TSEX\nSIOR     MVC   CEPAUCOM,ZEROS      SUPPRESS I/O CONTROL.\nTSEX     STC   R0,JCTUSER0         SET PERFORMANCE GROUP NUMBER.\n         LTR   R8,R8\n         BNZ   RELAR\n         B     EXIT\nNSTP     MVC   MSG+L'LOGERR(L'NSTERR),NSTERR\n         MVC   MSG+L'LOGERR+L'NSTERR-2(1),JCTJCLAS\n         LA    R1,L'NSTERR\n         B     NMSGERR\n         DROP  R4\nNJCT     LTR   R9,R9               AREA ALREADY OBTAINED?\n         BNZ   SJCT                YES, SKIP GETMAIN.\n         AIF   (NOT &SEX).O10S0\n        GETMAIN    R,LV=AREAW,SP=230\n         AGO   .O10S1\n.O10S0  GETMAIN    R,LV=AREAW\n.O10S1   LR    R9,R1\n         USING CONV,R9\nSJCT     MVC   MSG+L'LOGERR(L'NJCERR),NJCERR\n         LA    R1,L'NJCERR\nNMSGERR  MVC   MSG(L'LOGERR),LOGERR\n         MVC   MSG+12(L'CEPAJOBN),CEPAJOBN   SET JOBNAME.\n         LA    R0,L'WCTL+L'LOGERR(R1)\n         SLL   R0,16\n         ST    R0,WCTL\n         AIF   (NOT &SEX).O11S0\n        WTO    MF=(E,WCTL)\n         AGO   .O11S1\n.O11S0   MVC   TXWTO,MSG\n         BAL   R14,PRWTO\n.O11S1   ANOP\nRELAR    LR    R1,R9\n         DROP  R9\n         AIF   (NOT &SEX).O12S0\n        FREEMAIN   R,LV=AREAW,A=(1),SP=230\n         AGO   .O12S1\n.O12S0  FREEMAIN   R,LV=AREAW,A=(1)\n.O12S1   LTR   R8,R8\n         BNZR  R8                  TAKE CHOOSEN EXIT.\n         EJECT\n* RETURN :\n* --------\n*\n*        SET THE RETURN CODE IN REGISTER 15, AS FOLLOWS :\n*\n*        0 - INDICATES JOB PROCESSING SHOULD BE CONTINUED.\n*        4 - INDICATES JOB PROCESSING SHOULD BE CANCELED.\n         SPACE 1\nCANCEL   MVC   CEPAUCOM,ZEROS      CLEAR ALL.\n         MVC   CEPAUSER(L'CEPAUSER),BLKS\n         LA    R15,4               RETURN CODE = CANCEL.\n         B     EXIT+L'EXIT\n         SPACE 1\nEXIT     XR    R15,R15             RETURN CODE = OK.\n         L     R14,12(R13)         RESTORE REGISTER 14.\n         LM    R0,R12,20(R13)      RESTORE THE OTHER REGISTERS.\n         BR    R14                 RETURN.\n         EJECT\n* EXEC, DD AND PROC STATEMENTS PROCESS :\n* --------------------------------------\n*\n*        SCAN IT FOR SPECIFIC DATA-SET NAMES USE, AND ASSIGN FIXED\n*        CLASS AND PERFORMANCE GROUP NUMBER TO THE JOB IF ANY MATCH,\n*        UNLESS CLASS OR JOB NAME EXEMPTION.\n         SPACE 1\nOTHER    CLI   0(R4),2             EXEC STATEMENT?\n         BE    OTT                 YES.\n         CLI   0(R4),4             DD STATEMENT?\n         BE    OTT                 YES.\n         CLI   0(R4),8             PROC STATEMENT?\n         BNE   CJSSCAN             NO, LOOK FURTHER.              -CJS-\n         SPACE 1\nOTT      TM    CEPAIND,X'01'       IS IT A FOREGROUND JOB?\n         BO    EXIT                YES.\n         SH    R5,ADNEL            CONVERTER/INTERPRETER ENTRY LIST.\n         USING NELDSECT,R5\n         TM    NELOPSWT,NELSMF     STARTED TASK (INITIATOR,...)?\n         BZ    EXIT                YES.\n         L     R4,NELJMR           JOB MANAGEMENT RECORD IN JCT (HASP).\n         DROP  R5\n         SH    R4,ADJCT            HASP JOB CONTROL TABLE.\n         USING JCTSTART,R4\n         CLC   JCTID,CKJCT         REALLY THE JCT?\n         BE    OTSET               YES.\n         XR    R8,R8               NO, CANCEL AFTER MESSAGE.\n         LR    R9,R8\n         B     NJCT\n         SPACE 1\nOTSET    L     R12,UJVTADDR\n         L     R1,SYSEXC           CLASS/EXEMPTIONS/PG TABLE.\nOTSRCT   CLI   0(R1),0             END OF TABLE?\n         BE    OTSRCH              YES.\n         CLC   JCTJCLAS(1),0(R1)   THIS CLASS?\n         BE    OTSRCM              YES.\n         LA    R1,3(R1)\n         B     OTSRCT\nOTSRCM   TM    1(R1),XCMN+PYSL+IOXC     CLASS RETAIN?\n         BNZ   EXIT                YES.\nOTSRCH   L     R8,SDSNTB           SPECIFIC DSNAMES TABLE.\n         LA    R6,1                SET SCAN STEP VALUE.\nOTNXN    CLI   0(R8),255           END OF TABLE?\n         BE    EXIT                YES.\n         CLC   JCTJCLAS(1),1(R8)   CLASS ALREADY ASSIGNED?\n         BE    EXIT                YES.\n         XR    R15,R15\n         IC    R15,0(R8)           GET DATA-SET NAME LENGTH.\n         XR    R0,R0\n         IC    R0,3(R8)            GET NUMBER OF EXEMPTED JOB-NAMES.\n         LTR   R9,R0\n         BZ    OTNJN               NO JOB(S) EXEMPTED.\n         SLL   R0,3                COMPUTE JOB-NAMES LENGTH.\n         LA    R14,4(R8)           START OF JOB-NAMES.\nOTJNT    CLC   CEPAJOBN(8),0(R14)  IS JOB EXEMPTED?\n         BE    OTNXT               YES.\n         LA    R14,8(R14)          NEXT ONE.\n         BCT   R9,OTJNT            LOOP IF MORE.\nOTNJN    LA    R14,2(R3)           SKIP // COL. 1-2.\n         LA    R7,71(R3)           SET SCAN FINAL VALUE.\n         SR    R7,R15              COMPUTE END OF SCAN COMPARE.\n         LA    R9,4(R8)            COMPUTE DATA-SET NAME POINTER.\n         AR    R9,R0\nOTNMF    CLI   0(R14),C' '         SKIP NAME FIELD IF ANY.\n         BE    OTST\n         BXLE  R14,R6,OTNMF\n         B     OTNXT\nOTST     BXLE  R14,R6,OTTST        SEARCH START OF TYPE IF ANY OR TEXT.\n         B     OTNXT\nOTTST    CLI   0(R14),C' '\n         BE    OTST\n         CLC   0(L'EXECP,R14),EXECP     EXEC STATEMENT?\n         BE    OTEXEC              YES.\n         CLC   0(L'DDP,R14),DDP         DD STATEMENT?\n         BE    OTDD                YES.\n         CLC   0(L'PROCP,R14),PROCP     PROC STATEMENT?\n         BNE   OTTDL               NO.\n         LA    R14,L'PROCP(R14)    YES.\n         B     OTSTX\nOTEXEC   LA    R14,L'EXECP(R14)\n         B     OTSTX\nOTDD     LA    R14,L'DDP(R14)\nOTSTX    CLI   0(R14),C' '         SEARCH START OF TEXT.\n         BNE   OTTDL\n         BXLE  R14,R6,OTSTX\n         B     OTNXT\nOTTDL    EX    R15,OTCLC           LOOK IF MATCH HERE?\n         BNE   OTCNT               NO.\n         LA    R1,1(R14,R15)       CORRECT DELIMITER?\n         CLI   0(R1),C','\n         BE    OTFND               YES.\n         CLI   0(R1),C' '\n         BE    OTFND               YES.\n         CLI   0(R1),C''''\n         BE    OTFND               YES.\n         CLI   0(R1),C'('\n         BE    OTFND               YES.\nOTCNT    BXLE  R14,R6,OTTDL\nOTNXT    LA    R8,5(R8,R15)        BUMP TABLE.\n         AR    R8,R0\n         B     OTNXN\nOTCLC    CLC   0(*-*,R14),0(R9)\nOTFND    MVC   JCTJCLAS(1),1(R8)   FORCE NEW JOB CLASS.\n         MVC   JCTCLASS(1),JCTJCLAS     SET IT FOR SMF.\n         MVC   CEPAJC(L'CEPAJC),JCTJCLAS\n         MVC   JCTUSER0(1),2(R8)   FORCE NEW PERF. GROUP NUMBER.\n         DROP  R4\n         B     EXIT\n         EJECT                                                    -CJS-\n* //* COMMENTS STATEMENT PROCESS :                                -CJS-\n* --------------------------------                                -CJS-\n*                                                                 -CJS-\n*        THESE STATEMENTS ARE SCANNED ONLY TO OBTAIN THE NET NAME -CJS-\n*        FROM AN EVENTUAL CJS //*NET CONTROL CARD, AND STORE IT   -CJS-\n*        IN THE WORDS JCTUSER1 AND JCTUSER2 FOR FURTHER USE BY    -CJS-\n*        THE QSP TSO-COMMAND.                                     -CJS-\n         SPACE 1                                                  -CJS-\nCJSSCAN  CLI   0(R4),128           COMMENT STATEMENT?             -CJS-\n         BNE   EXIT                NO.                            -CJS-\n         SPACE 1                                                  -CJS-\n         LR    R4,R5                                              -CJS-\n         SH    R4,ADNEL            CONV./INTERP. ENTRY LIST.      -CJS-\n         USING NELDSECT,R4                                        -CJS-\n         TM    NELOPSWT,NELSMF     STARTED TASK (INITIATOR,...)?  -CJS-\n         BZ    EXIT                YES.                           -CJS-\n         L     R8,NELJMR           JOB MANAGEMENT REC. IN JCT.    -CJS-\n         DROP  R4                                                 -CJS-\n         SH    R8,ADJCT            HASP JOB CONTROL TABLE.        -CJS-\n         USING JCTSTART,R8                                        -CJS-\n         CLC   JCTID,CKJCT         REALLY JCT?                    -CJS-\n         BNE   EXIT                NO.                            -CJS-\n         SPACE 1                                                  -CJS-\n         LA    R6,1                SET SCAN REGISTERS VALUE.      -CJS-\n         LA    R7,71(R3)                                          -CJS-\n         CLC   3(L'CJSSRC,R3),CJSSRC    CJS NET CONTROL CARD?     -CJS-\n         BE    CJSNETC             YES.                           -CJS-\n         CLI   3(R3),C' '          MAY BE A CONTINUATION?         -CJS-\n         BE    EXIT                NO, GO BACK.                   -CJS-\n         LA    R5,3(R3)                                           -CJS-\n         B     CJSSC0                                             -CJS-\nCJSNETC  LA    R5,L'CJSSRC+3(R3)                                  -CJS-\n         CLI   0(R5),C' '                                         -CJS-\n         BNE   CJSSC0                                             -CJS-\n         BXLE  R5,R6,*-8                                          -CJS-\n         B     EXIT                                               -CJS-\nCJSSC0   CLC   0(L'CJSN,R5),CJSN   IS THAT NETID KEYWORD?         -CJS-\n         BE    CJSSC1              YES.                           -CJS-\n         CLC   0(L'CJSI,R5),CJSI   IS THAT ID KEYWORD?            -CJS-\n         BE    CJSSC2              YES.                           -CJS-\nCJSLOOP  CLI   0(R5),C' '                                         -CJS-\n         BE    EXIT                                               -CJS-\n         BXLE  R5,R6,CJSSC0                                       -CJS-\n         B     EXIT                                               -CJS-\nCJSSC1   LA    R5,L'CJSN(R5)                                      -CJS-\n         B     CJSSC3                                             -CJS-\nCJSSC2   LA    R5,L'CJSI(R5)                                      -CJS-\nCJSSC3   CLR   R5,R7                                              -CJS-\n         BH    EXIT                OUT OF RANGE, ERROR.           -CJS-\n         LR    R3,R5                                              -CJS-\n         LA    R0,9                                               -CJS-\nCJSSC4   CLI   0(R5),C' '                                         -CJS-\n         BE    CJSSC5                                             -CJS-\n         CLI   0(R5),C','                                         -CJS-\n         BE    CJSSC5                                             -CJS-\n         BCT   R0,*+L'*+4                                         -CJS-\n         B     EXIT                NET NAME IS TOO LONG, ERROR.   -CJS-\n         BXLE  R5,R6,CJSSC4                                       -CJS-\nCJSSC5   LR    R1,R5                                              -CJS-\n         SR    R1,R3                                              -CJS-\n         BNP   EXIT                NO NET NAME, ERROR.            -CJS-\n         MVC   JCTUSER1(8),BLKS                                   -CJS-\n         BCTR  R1,0                                               -CJS-\n         EX    R1,CJSSCMV          SET NET NAME IN JCT.           -CJS-\n         B     CJSLOOP             CONTINUE.                      -CJS-\nCJSSCMV  MVC   JCTUSER1(*-*),0(R3)                                -CJS-\n         DROP  R8                                                 -CJS-\n         AIF   (NOT &STE).O13S0\n         EJECT\n*        SEND WTO MESSAGE TO OUTPUT PRINT.\n         SPACE 1\nPRWTO    STM   R13,R1,SVREGS\n         ST    R13,SVAREA+4        LINK SAVE AREAS.\n         LA    R13,SVAREA\n         SRL   R0,16\n         STC   R0,LGWTO\n        $PRINT SDWTO\n         LM    R13,R1,SVREGS\n         BR    R14                 RETURN.\n         SPACE 1\n        LTORG\n         SPACE 1\nSVAREA   DC    18F'0'\nSVREGS   DC    5F'0'\nLGWTO    DC    XL1'0'\nSDWTO    DC    CL4' '\nTXWTO    DC    CL72' '\n.O13S0   EJECT\n*              CONSTANTS.\n         SPACE 1\n         AIF   (NOT &SEX).O13S1\nUJVTADDR DC    V(UJVTABLE)\n         AGO   .O13S2\n.O13S1   CNOP  0,8\n         ENTRY UJVTADDR\nUJVTADDR DC    A(*-*)\n.O13S2   ANOP\nDSCBSK  CAMLST SEARCH,*-*,*-*,*-*\nDSCBSKL  EQU   *-DSCBSK\n         SPACE 1\n        READ   DECBSK,DI,MF=L\nDECBSKL  EQU   *-DECBSK\n         SPACE 1\nJFCBSR  RDJFCB (*-*),MF=L\nOPENSR  OPEN   (*-*,(INPUT)),TYPE=J,MF=L\nCLOSESR CLOSE  (*-*),MF=L\n         SPACE 1\nEXTBLK  EXTRACT  *-*,'S',FIELDS=(TIOT),MF=L\nEXTBLKL  EQU   *-EXTBLK\n         EJECT\nDCBSK   DCB    DSORG=DA,MACRF=(RIC),BFALN=D,BFTEK=S,KEYLEN=0,LIMCT=1,  1\n               OPTCD=R,SYNAD=RERR,DDNAME=SYSACC\nDCBSKL   EQU   *-DCBSK\n         SPACE 2\nZEROS    DC    F'0'\nTEN      DC    F'10'\nHUNDR    DC    F'100'\nTHSND    DC    F'1000'\nBGVAL    DC    F'1'                BACKGROUND I/O DEFAULT VALUE.\nFGVAL    DC    F'100'              FOREGROUND I/O DEFAULT VALUE.\nYB99     DC    F'99999'            MAX. YYDDD.\nYB1900   DC    F'1900000'\nYP1900   DC    PL4'+1900000'\nMAXIO    DC    A(2*60*60)          MAX. I/O = 2 HOURS IN SEC.\nMKZ      DC    0F'0',CL8'00000000'\nLMKZL    EQU   *-MKZ\nADNEL    DC    0H'0',AL2(NELPARMO-NELLIST)\nADJCT    DC    0H'0',AL2(JCTJMRST-JCTSTART)  = JCTJMRJN\nRELPOS   DC    0H'0',AL2(NAUTNO-1)\nFOUR     DC    H'4'\nMSEC     DC    H'60'\nONEMEG   DC    H'1024'             1M = 1024K\nMAXREG   DC    A(2*1024*1024)      2G = 2*1024M\n         SPACE 2\nLOGERR   DC    CL24'--- IEFUJV (        ) - '\n         SPACE 1\n* NOTE - THE FOLLOWING MESSAGES TEXT LENGTH MUST NOT EXCEED :\n*              L'MSG - L'LOGERR\n         SPACE 1\nJOBERR   DC    C'UNEXPECTED JOB CARD ERROR.'\nSCNERR   DC    C'JOB CARD SCAN ERROR.'\nPRGERR   DC    C'UNAUTHORIZED PROGRAMMER.'\nANAERR   DC    C'AUTHORIZATION NOT YET ACTIVE.'\nANEERR   DC    C'AUTHORIZATION EXPIRED.'\nINAERR   DC    C'UNDEFINED AUTHORIZATION.'\nACCERR   DC    C'INVALID ACCOUNTING DATA FIELD.'\nCLSERR   DC    C'SPECIAL ACCOUNTING/CLASS MANDATORY.'\nTIOERR   DC    C'TIOT NOT FOUND AT JOB CARD.'\nCTLERR   DC    C'ACCOUNT CONTROL OFF (NO DD-CARD).'\nDUMERR   DC    C'SYSTEM UNAVAILABLE TO USERS.'\nMSGERR   DC    C'ACCOUNTING DATA-SET ERROR    .'\nETMERR   DC    C'JOB CARD TIME PARM. INVALID CODING.'\nRGNERR   DC    C'JOB CARD REGION PARM. INVALID CODING.'\nJCTERR   DC    C'JOB CARD NEL/JCT NOT FOUND.'\nNJCERR   DC    C'ALL JCL CONV. NEL/JCT NOT FOUND.'\nNSTERR   DC    C'SETUP NOT ALLOWED WITH CLASS 0.'\nMSGRCV   DC    C'RECOVERY FORCED (UJVTABLE).'\n         SPACE 1\nBLKS     DC    CL10' '\nJOBP     DC    C'JOB '\nEXECP    DC    C'EXEC '\nDDP      DC    C'DD '\nPROCP    DC    C'PROC '\nCKJCT    DC    CL4'JCT'\nTMP      DC    C',TIME='\nREGP     DC    C',REGION='\nNOTM     DC    CL4'1440'\nTENH     DC    CL4'0600'\nNSYSBOX  DC    CL4'0022'           SYSTEM GROUP BOX NUMBER.\nCJSSRC   DC    C'NET '                                            -CJS-\nCJSN     DC    C'NETID='                                          -CJS-\nCJSI     DC    C'ID='                                             -CJS-\n         PRINT OFF\n** ===>===>===>===>===>===>===>===>===>===>===>===>===>===> /* E N D */\n         PRINT ON\n         AGO   .O99S99\n.O99S0   PRINT OFF\n** /* DUMMY */ <===<===<===<===<===<===<===<===<===<===<===<===<===<===\n         PRINT ON\n        $DEFREG\n*        IEFUJV - DUMMY EXIT.\n         SPACE 1\n         USING *,R15               ADDRESSABILITY.\n         B     START\n         DROP  R15                 KILL ADDRESSABILITY.\n         SPACE 1\n         DC    CL8'IEFUJV',C'-'    IDENTIFIER.\n         DC    CL8'&SYSDATE',C'('  ASSEMBLY DATE.\n         DC    CL5'&SYSTIME',C')'  ASSEMBLY TIME.\n         SPACE 1\nSTART    XR    R15,R15             SET C.C. TO ZERO.\n         BR    R14                 RETURN.\n         PRINT OFF\n** /* E N D */ <===<===<===<===<===<===<===<===<===<===<===<===<===<===\n         PRINT ON\n.O99S99  SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUJV$": {"ttr": 19203, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SYSPAJA"}, "text": "//IEFUJV   JOB (........),'INSTALL  -IEFUJV-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                UJVTABLE                                           *\n//* NOTE : AT LINK-EDIT YOU WILL RECEIVE A RETURN CODE 4 WHICH IS     *\n//*        ONLY A NORMAL WARNING MESSAGE DUE TO NCAL SPECIFIED.       *\n//*        EXTERNAL REFERENCE TO 'UJVTABLE'.                          *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS4,MBR=IEFUJV,OPT=',RENT,SYSPARM(EXIT)'\n//LNK     EXEC PAJILKR,OPT=',NCAL,RENT'\n//SYSIN     DD *\n  ENTRY   IEFUJV\n  NAME    IEFUJV(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUJV@": {"ttr": 19205, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x19O\\x00\\x89\\x19O\\tU\\x00\\x9e\\x00\\x9e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-07-13T00:00:00", "modifydate": "1989-07-13T09:55:00", "lines": 158, "newlines": 158, "modlines": 0, "user": "SYSPAJA"}, "text": "1   26/02/87\n                                                      IEFUJV    1/3.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          SMF EXIT : IEFUJV          * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n             -------------------------------------------------\n               S M F   J O B   V A L I D A T I O N   E X I T\n             -------------------------------------------------\n\n  Purpose : Control the authorization and programmer number coded\n  --------- in the accounting field of the JOB card, prepare the\n            time and I/O control for the job, assign the execution\n            class and the performance group number to the job.\n            SRB time control (job I/O control) : see SMFEXIT@\n            documentation for pre-requisites.\n\n  Note : to use installation-defined data-sets with this exit routine,\n  ------ you must define them with a DD statement in the Job Entry\n         Subsystem cataloged procedure. When running JES2, you must\n         also define the data-sets with a DD statement in the initiator\n         cataloged procedure. The following DD-cards format must be\n         used to access the accounting information data-set :\n\n         1. In the JES2 procedure, into which the catalog cannot be\n            referenced when it is started :\n\n                 //SYSACC    DD UNIT=...,VOL=SER=...,DSN=...,DISP=SHR\n\n         2. In the INIT (initiator) procedure :\n\n                 //SYSACC    DD DSN=...,DISP=SHR\n            or : //SYSACC    DD UNIT=...,VOL=SER=...,DSN=...,DISP=SHR\n\n  Control suppress :\n  ------------------\n\n         1. When using the following DD-card :\n\n               //SYSACC    DD DUMMY\n\n            only the system group accounting numbers are verified,\n            and all others are rejected.\n\n         2. If there is no DD-card (SYSACC DDname), only the system\n            group accounting numbers are verified, and all others\n            are accepted without control (they are just checked for\n            a valid accounting field format : 8 numerics).\n\n  Computations tables : all the computations tables used by IEFUJV\n  --------------------- are located in a separate module (UJVTABLE).\n1   13/07/89\n                                                      IEFUJV    2/3.\n\n  JOB statement process :\n  -----------------------\n\n         1. Verify the accounting number and supply the box number\n            if omitted, unless the account control is suppressed.\n\n         2. The job total I/O's number request (expressed in 1/1000\n            I/O) is initialized for IEFUJI exit. An I/O's number\n            equal to or larger than 7.200.000 (2 hours in seconds /\n            SRB time) means a request to suppress the I/O control,\n            but this is exhausted only if the job accounting number\n            is authorized, otherwise value 7200 is forced for the job.\n            The job total I/O's number request is passed in the field\n            JCTUSER0 by JES2 (HASPRDR).\n            Exempts : 1. The system and the operator classes are\n                         allowed to be exempted from the I/O control\n                         for jobs with an authorized accounting number.\n                      2. Special task (i.e., ADABAS, IMS, CICS, ...)\n                         classes are also exempted when submitted with\n                         an authorized accounting number.\n                      3. Some predefined class means a job for which\n                         all normal computations are performed, but no\n                         new class is assigned (i.e., ADABAS-BATCH).\n                      4. Special job class assignment (see EXEC, DD and\n                         PROC statements process).\n\n         3. Process the TIME parameter if present, TIME=1440 is only\n            system tasks and jobs special authorizations allowed.\n            If encountered in background or foreground jobs, it is\n            changed to a 10 hours value.\n\n         4. Process the REGION parameter if present.\n\n  JOB statement process termination :\n  -----------------------------------\n\n         1. Set the job scheduling priority for execution selection.\n\n         2. Set the job execution class.\n\n         3. Prepare the user communication field (Common Exit Parameter\n            Area +32) with the job total I/O's number (last two bytes)\n            expressed 1/1000 I/O (binary) or zero if the I/O control\n            must be inactive.\n            This is the way value is passed to IEFUJI exit.\n\n         4. Set the job performance group number (1 to 255 : three\n            digits of the PERFORM= keyword builded by the HASP JCL\n            Conversion Processor) in the first byte of the JCTUSER0\n            field.\n            Note : 8 is reserved to operators holding jobs execution.\n1   07/04/88\n                                                      IEFUJV    3/3.\n\n  EXEC, DD and PROC statements process :\n  --------------------------------------\n\n         Scan it for specific data-set names use, and assign fixed\n         class and performance group number to the job if any match,\n         unless job name exemption.\n\n  //* comments statement process (CJS) :\n  --------------------------------------\n\n         These statements are scanned only to obtain the NET-name\n         from an eventual CJS //*NET control card, and store it in\n         the words JCTUSER1 and JCTUSER2 for further use by the\n         QSP TSO-command.\n\n  Conditional assembly :\n  ----------------------\n\n         The IEFUJV source module may produce five different object\n    modules depending on the assembly purpose. This selection is done\n    setting the assembler SYSPARM(PARM) parameter to one of the\n    following values :\n\n         1. EXIT : to generate the IEFUJV SMF exit routine.\n                   i.e : SYSPARM(EXIT)\n         2. TEST : to generate the routine needed by job TIEFUJVT\n                   (contain the IEFUJV JCL statements scan and control\n                   part).\n                   i.e : SYSPARM(TEST)\n         3. CALL : to generate the routine needed by job UJVTEX\n                   (contain the IEFUJV computation part).\n                   i.e : SYSPARM(CALL)\n         4. TSO  : to generate the re-enterable routine needed by the\n                   TSO command UJVD (contain the IEFUJV computation\n                   part).\n                   i.e : SYSPARM(TSO)\n\n         If none is specified (no SYSPARM value), the resulting\n    assembly is a dummy IEFUJV routine.\n\n         An external reference is done by IEFUJV to an UJVTABLE module\n    which contains all the tables needed for computations (for details\n    see UJVTABLE source module).\n\n  -----------------\n  CJS involvement : see job SMFEXIT$ to correctly link-edit IEFUJV.\n  -----------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEFUSI": {"ttr": 19209, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89&/\\x00\\x89&/\\x15U\\x01x\\x01x\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-09-19T00:00:00", "modifydate": "1989-09-19T15:55:00", "lines": 376, "newlines": 376, "modlines": 0, "user": "SYSPAJA"}, "text": "USI      TITLE '-- I E F U S I - MVS/SMF STEP INITIATION EXIT --'\nIEFUSI   START 0\n         SPACE 1\nIEFUSI   AMODE 24\nIEFUSI   RMODE 24\n         SPACE 1\n*           ---------------------------------------------------\n*             S M F   S T E P   I N I T I A T I O N   E X I T\n*           ---------------------------------------------------\n         SPACE 1\n* AT ENTRY TO THE IEFUSI EXIT ROUTINE, REGISTER 1 POINTS TO A LIST OF\n* --------     FOUR-BYTE ADDRESSES AS FOLLOWS :\n*\n* +0  -  1. THE ADDRESS OF THE COMMON EXIT PARAMETER AREA.\n*\n* +4  -  2. THE ADDRESS OF A 8-BYTE AREA CONTAINING THE JOB STEP\n*           NAME (IN EBCDIC) FROM THE EXEC STATEMENT. THIS AREA IS\n*           ALIGNED LEFT AND PADDED WITH BLANKS IF NECESSARY.\n*\n* +8  -  3. THE ADDRESS OF A 8-BYTE AREA CONTAINING THE PROGRAM\n*           NAME (IN EBCDIC) FROM THE EXEC STATEMENT. THIS AREA IS\n*           ALIGNED LEFT AND PADDED WITH BLANKS IF NECESSARY. IF A\n*           REFER BACK IS USED, THE AREA CONTAINS 'PGM=*.DD'.\n*\n* +12 -  4. THE ADDRESS OF AN AREA CONTAINING THE ACCOUNTING INFORMA-\n*           TION FROM THE EXEC STATEMENT.\n*           FORMAT : - OFFSET 0, NUMBER OF ACCOUNTING FIELDS (ONE\n*                                BYTE, BINARY).\n*                    - OFFSET 1, THE ACCOUNTING FIELDS (VARIABLE). EACH\n*                                ENTRY FOR AN ACCOUNTING FIELD CONTAINS\n*                                THE LENGTH OF THE FIELD (ONE BYTE,\n*                                BINARY, A ZERO INDICATES AN OMITTED\n*                                FIELD) FOLLOWED BY THE FIELD (EBCDIC).\n*\n* +16 -  5. THE ADDRESS OF A 6-WORD AREA CONTAINING REGION LIMIT\n*           VALUES (SEE VSM PARAMETER LIST FOR DESCRIPTION).\n*\n* +20 -  6. THE ADDRESS OF A WORD CONTAINING A FLAG INDICATING A\n*           V=R JOB (BIT 0 : V=R WHEN SET).\n         SPACE 1\n* AT EXIT BEFORE THE IEFUSI EXIT ROUTINE RETURNS CONTROL TO THE\n* -------      CONTROL PROGRAM, IT MUST PLACE A RETURN CODE IN\n*              REGISTER 15, AS FOLLOWS :\n*\n*              0 - INDICATES JOB PROCESSING SHOULD BE CONTINUED.\n*              4 - INDICATES JOB PROCESSING SHOULD BE CANCELED.\n         EJECT\n* VSM PARAMETER LIST :\n* --------------------\n*\n* +0  -  1. VSM FLAG WORD (INITIALIZED TO ZERO) :\n*           BIT 0  - ON = IEFUSI HAS SET REGION LIMIT VALUES.\n*                  NOTE : IF GETMAIN LIMITS ARE NOT SET BY THE EXIT,\n*                  BUT A CHECK FOR CONTIGUOUS FREE SPACE BY VSM SHOULD\n*                  BE PERFORMED, BIT 0 OF VSM FLAG WORD MUST BE SET.\n*           BIT 1  - ON = VSM IS NOT TO CHECK FOR THE AVAILABILITY OF\n*                    THE REQUESTED AMOUNT OF CONTIGUOUS FREE SPACE\n*                    BELOW 16 MEGABYTES.\n*                  - OFF = VSM IS TO CHECK FOR THE AVAILABILITY OF\n*                    THE REQUESTED AMOUNT OF CONTIGUOUS FREE SPACE\n*                    BELOW 16 MEGABYTES.\n*                  NOTE : VSM TESTS THIS BIT ONLY WHEN THE REGION VALUE\n*                  IS LESS THAN 16 MEGABYTES.\n*           BIT 2  - ON = VSM IS TO CHECK FOR THE AVAILABILITY OF\n*                    THE REQUESTED AMOUNT OF CONTIGUOUS FREE SPACE\n*                    ABOVE 16 MEGABYTES.\n*                  - OFF = VSM IS NOT TO CHECK FOR THE AVAILABILITY OF\n*                    THE REQUESTED AMOUNT OF CONTIGUOUS FREE SPACE\n*                    ABOVE 16 MEGABYTES.\n*                  NOTE : VSM TESTS THIS BIT ONLY WHEN THE REGION VALUE\n*                  IS GREATER THAN 16 MEGABYTES.\n*           BIT 3-31 - RESERVED.\n*           NOTE : BECAUSE OF COMPATIBILITY CONSIDERATIONS FOR PREVIOUS\n*                  MVS/XA RELEASES, THE SETTINGS FOR BITS 1 AND 2 HAVE\n*                  OPPOSITE MEANINGS. IN PREVIOUS RELEASES, VSM MADE NO\n*                  CHECKS FOR FREE SPACE ABOVE SIXTEEN MEGABYTES. NOW,\n*                  IF THE AMOUNT OF CONTIGUOUS FREE SPACE REQUESTED IS\n*                  CRITICAL FOR THE STEP TO BE EXECUTED, BIT 2 MUST BE\n*                  TURNED ON.\n*\n* +4  -  2. REGION SIZE REQUESTED.\n*\n* +8  -  3. GETMAIN LIMIT VALUE BELOW 16 MEGABYTES.\n*\n* +12 -  4. REGION SIZE BELOW 16 MEGABYTES.\n*\n* +16 -  5. GETMAIN LIMIT VALUE ABOVE 16 MEGABYTES.\n*\n* +20 -  6. REGION SIZE ABOVE 16 MEGABYTES.\n*\n*    NOTE : ON EVERY ENTRY TO IEFUSI, THE LAST FOUR WORDS IN THE VSM\n*           PARAMETER LIST ARE SET TO X'FFFFFFFF' (DECIMAL -1).\n         SPACE 2\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         EJECT\n        $DEFREG\n         EJECT\n        $CEPA\n         EJECT\n        PRINT  NOGEN\n         SPACE 1\n        CVT    DSECT=YES,LIST=YES\n        IKJTCB LIST=YES\n        IEFTCT\nLCT      DSECT\n        IEFALLCT\n         AIF   ('&SYSPARM' NE 'TEST').O2S1\nJCT      DSECT\n        IEFAJCTB\n.O2S1    ANOP\nSCT      DSECT\n        IEFASCTB\n         SPACE 1\n        PRINT  GEN\n         SPACE 2\n*              WORK AREAS.\n         SPACE 1\nAREA     DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -\n         SPACE 1\nSAVAREA  DS    18F           SAVE AREA.\n         SPACE 1\n         AIF   ('&SYSPARM' EQ 'TEST').O2S2\nWORK     DS    D             WORK.\n.O2S2    ANOP\nSWTO     DC    F'0'                LENGTH & FLAGS.\n         AIF   ('&SYSPARM' EQ 'TEST').O2S3\nSMSGTX   DC    CL12'--- IEFUSI ('\nSMSGTJ   DC    CL8' ',C'/'\nSMSGTN   DC    CL8' ',CL26') - NEW STEP TIME LIMIT : '\nSMSGTH   DC    CL2'  ',CL2'H '      HOURS.\nSMSGTM   DC    CL2'  ',CL2'M '      MINUTES.\nSMSGTS   DC    CL2'  ',CL2'S.'      SECONDS.\n         AGO   .O2S4\n.O2S3    ANOP\nSMSGTXJ  DC    CL23'--- IEFUSI TEST - JCT ('\nSMSGJCT  DC    CL9' ',C' '\nSMSGJTM  DC    CL7' '\nSMSGTXS  DC    CL6' SCT ('\nSMSGSCT  DC    CL9' ',C' '\nSMSGSTM  DC    CL7' '\n.O2S4    ANOP\nLWTO     EQU   *-SWTO              WTO LENGTH.\nDCRC     DC    XL4'0'              DESC. & ROUTING CODES.\n         SPACE 1\nAREAL    EQU   (((*-AREA)+7)/8)*8\n         SPACE 2\nIEFUSI   CSECT                     RESTORE ORIGINAL CSECT.\n         EJECT\n         USING *,R11               ADDRESSABILITY.\n         SPACE 1\n         STM   R14,R12,12(R13)     SAVE REGISTERS.\n         LA    R11,0(R15)          SET BASE REGISTER.\n         L     R2,0(R1)            GET COMMON EXIT PARM. ADDRESS.\n         B     START\n         SPACE 1\n         USING CEPA,R2\n         SPACE 1\n         DC    CL8'IEFUSI',C'-'    IDENTIFIER.\n         DC    CL8'&SYSDATE',C'('  ASSEMBLY DATE.\n         DC    CL5'&SYSTIME',C')'  ASSEMBLY TIME.\n         SPACE 1\n         AIF   ('&SYSPARM' EQ 'TEST').O3S1\n* PROCESS :\n* ---------\n*\n*        RE-EVALUATE THE MAXIMUM STEP RUNNING TIME IF NEEDED.\n         SPACE 1\nSTART    LR    R8,R1               RETAIN ENTRY R1.\n         LA    R6,SIDCPU           SYSTEM-ID'S/FACTOR TO BE APPLIED.\nSCNTB    CLC   0(L'CEPASID,R6),CEPASID\n         BE    FNDTB\n         LA    R6,L'SIDCPU(R6)\n         CLI   0(R6),0             END OF TABLE?\n         BNE   SCNTB               NO, CONTINUE.\n         B     TSTMEM              YES, NOTHING TO DO.\nFNDTB    LR    R1,R6               RETAIN IT.\n         LA    R1,L'SIDCPU(R1)\n         CLI   0(R1),0             END OF TABLE?\n         BNE   *-8                 NO, CONTINUE UNTIL REACHED.\n         CLC   4(4,R1),4(R6)       YES, ANYTHING TO DO?\n         BE    TSTMEM              NO, NOTHING TO DO.\n         AGO   .O3S2\n.O3S1    ANOP\n* PROCESS :\n* ---------\n*\n*        ONLY WHEN PREDEFINED JOB-NAME MATCHES, DISPLAY THE ADDRESSES\n*        OF THE JCT AND SCT, THE JOB TIME LIMIT AND THE MAXIMUM STEP\n*        RUNNING TIME (SHOULD BE THAT OF THE CURRENT JOB STEP).\n         SPACE 1\nSTART    LR    R8,R1               RETAIN ENTRY R1.\n         CLC   CEPAJOBN,=CL8'SYSSP1$'   IS IT THE TEST JOB-NAME?\n         BNE   TSTMEM              NO, BYPASS.\n        GETMAIN R,LV=AREAL,SP=255\n         LR    R9,R1               SET BASE REGISTER FOR AREA.\n         USING AREA,R9             ADDRESSABILITY.\n         XC    SAVAREA(18*4),SAVAREA\n         ST    R13,SAVAREA+4       LINK SAVE AREAS.\n         ST    R9,8(R13)\n         LR    R13,R9              ACTIVE MY SAVE AREA.\n.O3S2    L     R3,CVTPTR           CVT.\n         USING CVT,R3\n         L     R4,CVTTCBP          TCB WORDS.\n         DROP  R3\n         L     R3,4(R4)            TCB.\n         USING TCB,R3\n         SR    R4,R4\n         ICM   R4,B'0111',TCBTCTB  TCT.\n         DROP  R3\n         USING SMFTCT,R4\n         L     R3,TCTLCTAD         LCT.\n         DROP  R4\n         USING LCT,R3\n         AIF   ('&SYSPARM' EQ 'TEST').O4S1\n         ICM   R4,B'1111',LCTSCTAD SCT.\n         BZ    TSTMEM              NONE.\n         USING SCT,R4\n         CLC   SCTSTIME(L'SCTSTIME),=AL3(((24*60)-1)*60*100)\n         BNL   TSTMEM              TIME=1440 OR NO TIME SPECIFIED.\n         XR    R0,R0\n         XR    R1,R1\n         ICM   R1,B'0111',SCTSTIME MAX. STEP RUN (IN HUNDRED OF SEC).\n         M     R0,4(R6)            APPLY SYSTEM FACTOR.\n         D     R0,=F'100'          REDUCE TO HUNDRED OF SEC.\n         LTR   R0,R0\n         BZ    *+L'*+6\n         AH    R1,=H'1'            ROUND UP.\n         XR    R0,R0\n         ICM   R0,B'0111',=AL3(((24*60)-1)*60*100)\n         CLR   R1,R0               HIGHER THAN MAXIMUM?\n         BNH   *+L'*+2             NO.\n         LR    R1,R0               YES, GET MAXIMUM.\n         STCM  R1,B'0111',SCTSTIME SET NEW STEP RUNNING TIME.\n         DROP  R3,R4\n         CL    R1,=A(@OPSGLV*60*100)    MUST BE SIGNALED?\n         BNH   TSTMEM              NO.\n         LR    R3,R1               YES, INFORM OPERATOR.\n        GETMAIN R,LV=AREAL,SP=255\n         LR    R9,R1               SET BASE REGISTER FOR AREA.\n         USING AREA,R9             ADDRESSABILITY.\n         XC    SAVAREA(18*4),SAVAREA\n         ST    R13,SAVAREA+4       LINK SAVE AREAS.\n         ST    R9,8(R13)\n         LR    R13,R9              ACTIVE MY SAVE AREA.\n.O4S1    MVC   SWTO(4),WTOLST      SET MESSAGE AREA.\n         MVI   SWTO+1,LWTO\n         MVC   DCRC(4),WTOLST+6\n         AIF   ('&SYSPARM' EQ 'TEST').O4S2\n         MVC   SMSGTX(12),=CL12'--- IEFUSI ('\n         MVC   SMSGTJ,CEPAJOBN     JOB-NAME.\n         MVI   SMSGTJ+L'SMSGTJ,C'/'\n         L     R1,4(R8)\n         MVC   SMSGTN(8),0(R1)     STEP-NAME.\n         MVC   SMSGTN+L'SMSGTN(26),=CL26') - NEW STEP TIME LIMIT : '\n         MVC   SMSGTH(12),=CL12' 0H  0M  0S.'\n         XR    R0,R0\n         LR    R1,R3\n         D     R0,=A(60*100)       COMPUTE SEC./MIN.\n         LTR   R0,R0\n         BZ    *+L'*+22\n         CVD   R0,WORK\n         MVC   WORK(4),=XL4'40202021'\n         ED    WORK(4),WORK+6\n         MVC   SMSGTS(2),WORK+2    SECONDS.\n         CL    R1,=F'60'           MORE THAN 1 HOUR?\n         BNL   *+L'*+6             YES.\n         LR    R0,R1               NO.\n         B     STMIN\n         XR    R0,R0\n         D     R0,=F'60'           COMPUTE MIN./HRS.\n         CVD   R1,WORK\n         MVC   WORK(4),=XL4'40202021'\n         ED    WORK(4),WORK+6\n         MVC   SMSGTH(2),WORK+2    HOURS.\n         LTR   R0,R0\n         BZ    *+L'*+22\nSTMIN    CVD   R0,WORK\n         MVC   WORK(4),=XL4'40202021'\n         ED    WORK(4),WORK+6\n         MVC   SMSGTM(2),WORK+2    MINUTES.\n         AGO   .O4S3\n.O4S2    MVC   SMSGTXJ(23),=CL23'--- IEFUSI TEST - JCT ('\n         MVC   SMSGTXS(6),=CL6' SCT ('\n         UNPK  SMSGJCT(L'SMSGJCT),LCTJCTAD(L'LCTJCTAD+1)\n         TR    SMSGJCT(L'SMSGJCT-1),TRTAB-X'F0'\n         MVC   SMSGJCT+L'SMSGJCT-1(2),=CL2') '\n         ICM   R4,B'1111',LCTJCTAD JCT.\n         BNZ   *+L'*+10\n         MVC   SMSGJTM(L'SMSGJTM),=CL7'-NONE-,'\n         B      *+L'*+16\n         USING JCT,R4\n         UNPK  SMSGJTM(L'SMSGJTM),JCTJMRTL(L'JCTJMRTL+1)\n         TR    SMSGJTM(L'SMSGJTM-1),TRTAB-X'F0'\n         MVI   SMSGJTM+L'SMSGJTM-1,C','\n         DROP  R4\n         UNPK  SMSGSCT(L'SMSGSCT),LCTSCTAD(L'LCTSCTAD+1)\n         TR    SMSGSCT(L'SMSGSCT-1),TRTAB-X'F0'\n         MVC   SMSGSCT+L'SMSGSCT-1(2),=CL2') '\n         ICM   R4,B'1111',LCTSCTAD SCT.\n         BNZ   *+L'*+10\n         MVC   SMSGSTM(L'SMSGSTM),=CL7'-NONE-.'\n         B      *+L'*+16\n         USING SCT,R4\n         UNPK  SMSGSTM(L'SMSGSTM),SCTSTIME(L'SCTSTIME+1)\n         TR    SMSGSTM(L'SMSGSTM-1),TRTAB-X'F0'\n         MVI   SMSGSTM+L'SMSGSTM-1,C'.'\n         DROP  R3,R4\n.O4S3   WTO    MF=(E,SWTO)         SEND MESSAGE TO LOG.\n         LR    R1,R9               ADDRESS OF AREA TO BE FREED.\n         DROP  R9\n         L     R9,4(R13)           PREVIOUS SAVE AREA ADDRESS.\n        FREEMAIN R,LV=AREAL,A=(1),SP=255\n         LR    R13,R9              RESTORE ORIGINAL SAVE AREA.\n         EJECT\n* PROCESS :\n* ---------\n*\n*        WHEN THE REGION SIZE REQUESTED INDICATES A VALUE OF EIGHT (8)\n*        MEGABYTES OR HIGH AND THE PROGRAM NAME MATCHES ONE OF THOSE\n*        DEFINED IN THE INTERNAL TABLE OF 'IEFUSI', THEN THE REGION\n*        SIZE FOR BELOW 16 MEGABYTES IS FIXED TO SIX (6) MEGABYTES\n*        (THE OTHER VALUES ARE LEFT UNCHANGED : GETMAIN LIMIT VALUE\n*        FOR BELOW 16 MEGABYTES, GETMAIN LIMIT VALUE AND REGION SIZE\n*        FOR ABOVE 16 MEGABYTES).\n         SPACE 1\nTSTMEM   L     R3,16(R8)           GET VSM PARAMETER LIST POINTER.\n         CLC   4(4,R3),=A(8*1024*1024)  REGION SIZE REQ. = 8MB OR HIGH?\n         BL    GOBACK              LOW, LET'S GO.\n         L     R4,8(R8)            GET PROGRAM NAME POINTER.\n         LM    R5,R7,=A(PGMTB,L'PGMTB,PGMTBE)\nLOOP     CLC   0(L'PGMTB,R5),0(R4) IS NAME MATCHING TABLE?\n         BE    FOUND               YES.\n         BXLE  R5,R6,LOOP          NO, CONTINUE.\n         B     GOBACK              NONE, LET'S GO.\nFOUND    OI    0(R3),X'80'         IEFUSI SUPPLY REGION LIMIT VALUES.\n         MVC   12(4,R3),=A(6*1024*1024) REGION SIZE = 6MB.\n         SPACE 1\nGOBACK   LM    R14,R12,12(R13)     RESTORE REGISTERS.\n         SR    R15,R15             SET CONTINUE PROCESS RETURN CODE.\n         BR    R14                 GO BACK.\n         EJECT\n*        CONSTANTS.\n         SPACE 1\nWTOLST   WTO   '  ',MF=L,ROUTCDE=11,DESC=7\n         AIF   ('&SYSPARM' NE 'TEST').O8S1\nTRTAB    DC    CL16'0123456789ABCDEF'\n.O8S1    SPACE 2\n         LTORG\n         EJECT\n*        ----------------------\n*        PROGRAM'S NAMES TABLE.\n*        ----------------------\n         SPACE 1\nPGMTB    DC    CL8'ASMBLR  '       ASSEMBLER F.\n         DC    CL8'IFOX00  '\n         DC    CL8'IEUASM  '\n         DC    CL8'IEV90   '       ASSEMBLER H.\n         DC    CL8'LINKEDIT'       LINKAGE EDITOR.\n         DC    CL8'HEWL    '\n         DC    CL8'HEWLH096'\n         DC    CL8'HEWLF064'\n         DC    CL8'IEWL    '\n         DC    CL8'IEWLF128'\n         DC    CL8'IEWLF440'\n         DC    CL8'IEWLF880'\n         SPACE 1\nPGMTBE   EQU   *-L'PGMTB           LAST PROGRAM NAME TABLE POINTER.\n         SPACE 1\n         AIF   ('&SYSPARM' EQ 'TEST').O9S1\n         EJECT\n        $SIDTB TYPE=CPU\n.O9S1    SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUSI$": {"ttr": 19216, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//IEFUSI   JOB (........),'INSTALL  -IEFUSI-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=2\n//ASS     EXEC PAJ2AS3,MBR=IEFUSI,OPT=',RENT'\n//LNK     EXEC PAJILKR,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   IEFUSI\n  NAME    IEFUSI(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUSI@": {"ttr": 19457, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x10O\\x00\\x88\\x10O\\x14R\\x00:\\x00:\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-04-13T00:00:00", "modifydate": "1988-04-13T14:52:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "SYSPAJA"}, "text": "1   13/04/88\n                                                      IEFUSI    1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          SMF EXIT : IEFUSI          * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n        ---------------------------------------------------\n          S M F   S T E P   I N I T I A T I O N   E X I T\n        ---------------------------------------------------\n\n  Purpose :\n  ---------\n\n         1. Re-evaluation of the maximum step running time if needed.\n\n         2. When the region size requested indicates a value of eight\n            (8) megabytes or high and the program name matches one of\n            those defined in the internal table of IEFUSI, then the\n            region size for below 16 megabytes is fixed to six (6)\n            megabytes (the other values are left unchanged : the\n            getmain limit value for below 16 megabytes, the getmain\n            limit value and the region size for above 16 megabytes).\n\n  CPU time evaluation :\n  ---------------------\n\n         In a complex of computers, often all of these are not the\n         same model and thus not same CPU speed. To reflect this\n         situation, a system speed factor is applied to the job CPU\n         time in order to extend it in correspondence to the fastest\n         system in the complex.\n\n         Note : See assembler macro $SIDTB (SIDCPU table) for systems\n                apply factors.\n\n  -----------------\n  CJS involvement : see job SMFEXITS to correctly link-edit IEFUSI.\n  -----------------\n1   07/04/88\n                                                      IEFUSI    2/2.\n\n  Conditional assembly :\n  ----------------------\n\n         The IEFUSI source module may produce different object modules\n    depending on the assembly purpose. This selection is done setting\n    the assembler SYSPARM(PARM) parameter to the following value :\n\n            PARM - TEST : may be used for debugging purpose.\n                       Only when a predefined job-name matches, display\n                       the addresses of the JCT and SCT, the job time\n                       limit and the maximum step running time (should\n                       be that of the current job step).\n                   by default : re-evaluation of the maximum step\n                       running time if needed.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEFUTL": {"ttr": 19459, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x881_\\x00\\x881_\\x16\\x12\\x011\\x011\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-10T00:00:00", "modifydate": "1988-11-10T16:12:00", "lines": 305, "newlines": 305, "modlines": 0, "user": "SYSPAJA"}, "text": "UTL      TITLE '-- I E F U T L - MVS/SMF TIME LIMIT EXIT --'\nIEFUTL   START 0\n         SPACE 1\nIEFUTL   AMODE 24\nIEFUTL   RMODE 24\n         SPACE 1\n*            -----------------------------------------\n*              S M F   T I M E   L I M I T   E X I T\n*            -----------------------------------------\n         SPACE 1\n* AT ENTRY TO THE IEFUTL EXIT ROUTINE, REGISTER 1 POINTS TO THE\n* --------     FOUR-BYTE ADDRESS OF THE COMMON EXIT PARAMETER AREA.\n*              REGISTER 0 WILL HAVE A BINARY VALUE, AS FOLLOWS :\n*                  0 - INDICATES THE JOB CPU TIME LIMIT EXPIRED.\n*                  4 - INDICATES THE STEP CPU TIME LIMIT EXPIRED.\n*                  8 - INDICATES THE CONTINUOUS WAIT TIME LIMIT FOR\n*                      THE JOB EXPIRED.\n         SPACE 1\n* AT EXIT BEFORE THE IEFUTL EXIT ROUTINE RETURNS CONTROL TO THE\n* -------      CONTROL PROGRAM, IT MUST PLACE A RETURN CODE IN\n*              REGISTER 15, AS FOLLOWS :\n*                  0 - INDICATES JOB PROCESSING IS TO BE CANCELED.\n*                  4 - INDICATES JOB PROCESSING IS TO BE CONTINUED\n*                      WITH A TIME EXTENSION IN TIMER UNITS.\n*                  8 - INDICATES JOB PROCESSING IS TO BE CONTINUED\n*                      WITH A TIME EXTENSION IN SECONDS.\n*\n*              YOU MUST PLACE THE TIME EXTENSION IN REGISTER 1 (YOU\n*              CAN DETERMINE THE NUMBER OF TIMER UNITS BY THE\n*              ALGORITHM : 1 SECOND = 38400 TIMER UNITS).\n         SPACE 2\n* AUTHOR :     A. COLOMBO (AMDAHL CONSULTANT)\n* --------     P.A. MOINIL\n*              COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         EJECT\n        $DEFREG\n         EJECT\n        $CEPA\n         EJECT\n        PRINT  NOGEN\n         SPACE 2\n        IHAPSA\n         SPACE 1\n        IHAASCB\n         SPACE 1\n        IRAOUCB\n         SPACE 1\nCSCB     DSECT\n        IEECHAIN\n         SPACE 1\n        IKJTSB LIST=YES\n         SPACE 1\n        IEZMGCR\n         SPACE 1\n        CVT    DSECT=YES,TSO=YES,RPS=YES,LIST=YES\n         SPACE 2\n        PRINT  GEN\n         EJECT\n*              WORK AREAS.\n         SPACE 1\nAREA     DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -\n         SPACE 2\nSAVAREA  DS    18F           SAVE AREA.\n         SPACE 2\nENQCNTL  ENQ   (*-*,*-*,E,*-*,SYSTEM),RET=TEST,MF=L\nSTARTSND DC    F'0'                LENGTH & FLAGS.\nSTARTWTO DC    F'0'                LENGTH & FLAGS.\nSTARTMSG DC    CL13'--- IEFUTL - '      MODULE NAME.\nTEXT     DC    CL60' '             MESSAGE TEXT.\nTWTO     EQU   *-STARTMSG          TPUT LENGTH.\nLWTO     EQU   *-STARTWTO          WTO LENGTH.\nDCRC     DC    XL4'0'              DESC. & ROUTING CODES.\nSCTEXT   DC    CL20' '             SEND COMMAND TEXT.\n         SPACE 1\nSWPR     DC    XL1'0'              PROCESSING SWITCHES.\nPRSTC    EQU   X'01'                    SYSTEM TASK OR MOUNT.\nPRTSU    EQU   X'02'                    TIME SHARING USER.\nPRSTP    EQU   X'04'                    STEP TIME EXCEEDED.\nPRWAIT   EQU   X'08'                    WAIT TIME EXCEEDED.\nPRTIO    EQU   X'10'                    I/O EXCEEDED.\n         SPACE 2\nAREAL    EQU   (((*-AREA)+7)/8)*8\n         SPACE 1\nIEFUTL   CSECT                     RESTORE ORIGINAL CSECT.\n         EJECT\n* PROCESS :\n* ---------\n*\n*        BUILD A MESSAGE TO EXPLAIN THE CANCEL REASON AND SEND IT TO\n*        THE SYSTEM LOG IF BACKGROUND JOBS OR TO THE TERMINAL AND IN\n*        THE MAILBOX (BROADCAST) FOR NEXT LOGON IF FOREGROUND JOBS.\n         SPACE 1\n         USING *,R11               ADDRESSABILITY.\n         SPACE 1\n         STM   R14,R12,12(R13)     SAVE REGISTERS.\n         LA    R11,0(R15)          SET BASE REGISTER.\n         L     R2,0(R1)            GET COMMON EXIT PARM. ADDRESS.\n         B     START\n         SPACE 1\n         USING CEPA,R2\n         SPACE 1\n         DC    CL8'IEFUTL',C'-'    IDENTIFIER.\n         DC    CL8'&SYSDATE',C'('  ASSEMBLY DATE.\n         DC    CL5'&SYSTIME',C')'  ASSEMBLY TIME.\n         SPACE 1\nSTART    XC    24(4,R13),24(R13)   R1 = 0 : NO TIME EXTENSION.\n         XC    16(4,R13),16(R13)   R15 = 0 : CANCEL JOB.\n         LTR   R0,R0               JOB CPU TIME EXPIRED?\n         BZ    PROCESS             YES.\n         CH    R0,=H'4'            STEP CPU TIME EXPIRED?\n         BE    PROCESS             YES.\n         CH    R0,=H'8'            WAIT TIME LIMIT EXPIRED?\n         BE    PROCESS             YES.\n         SPACE 1\nGOBACK   LM    R14,R12,12(R13)     RESTORE REGISTERS.\n         BR    R14                 GO BACK.\n         EJECT\n*        IEFUTL WILL GIVE A MESSAGE WITH THE CANCEL REASON.\n         SPACE 1\nPROCESS  LR    R4,R0               SAVE  R0 FOR FURTHER PROCESSING.\n        GETMAIN R,LV=AREAL,SP=255\n         LR    R3,R1               SET BASE REGISTER FOR AREA.\n         USING AREA,R3             ADDRESSABILITY.\n         XC    SAVAREA(18*4),SAVAREA\n         ST    R13,SAVAREA+4       LINK SAVE AREAS.\n         ST    R3,8(R13)\n         LR    R13,R3              ACTIVE MY SAVE AREA.\n         SPACE 1\n*        ANALYZE WHY IEFUTL HAS BEEN INVOLVED.\n         SPACE 1\n         MVI   SWPR,0              RESET PROCESSING SWITCHES.\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT IF XA/24-BIT\n         USING PSA,R0              PSA ADDRESSABILITY.\n         L     R5,PSAAOLD          PSA ASCB OLD POINTER.\n         USING ASCB,R5             ASCB ADDRESSABILITY.\n         L     R6,ASCBOUCB         ASCB OUCB POINTER.\n         USING OUCB,R6             OUCB ADDRESSABILITY.\n         TM    OUCBYFL,OUCBLOG     LOGON CREATED?\n         BO    JOBLOGON            YES, REMEMBER IT.\n         TM    OUCBYFL,OUCBMNT     MOUNT CREATE?\n         BO    JOBSTART            YES, IT IS LIKE A STARTED TASK.\n         DROP  R6\n         L     R6,ASCBCSCB         GET THE CSCB ADDRESS.\n         LTR   R6,R6               IS THERE A CSCB?\n         BZ    JOBSTART            NO, CSCB MISSING, SYSTEM TASK.\n         USING CSCB,R6             CSCB ADDRESSABILITY.\n         TM    CHTRKID,CHINITID    IS IT AN INITIATOR?\n         BNO   JOBSTART            YES, MAY BE INIT OR JOB.\n         DROP  R6\n         L     R1,ASCBJBNI         GET THE JOBNAME POINTER.\n         LTR   R1,R1               IS THERE A POINTER?\n         BNZ   TESTWT              YES.\nJOBSTART OI    SWPR,PRSTC          SYSTEM TASK OR MOUNT.\n         B     TESTWT\nJOBLOGON OI    SWPR,PRTSU          TIME SHARING USER.\nTESTWT   CH    R4,=H'8'            WAIT TIME?\n         BNE   TESTTE              NO.\n         OI    SWPR,PRWAIT         WAIT TIME EXCEEDED.\n         B     DSPLR\nTESTTE   LTR   R4,R4               JOB TIME?\n         BZ    SRBTCB              YES.\n         CH    R4,=H'4'            STEP TIME?\n         BNE   DSPLR               NO, SHOULD NEVER OCCUR.\n         OI    SWPR,PRSTP          STEP TIME EXCEEDED.\nSRBTCB   SR    R1,R1\n         ICM   R1,B'0011',CEPAUCOM+2    SRB TIME VALUE REQUIRED.\n         BZ    DSPLR               IF ZERO, MUST BE TCB TIME.\n         L     R1,ASCBR15C         GET SRB TIME LIMIT.\n         LTR   R1,R1               IS IT EXCEEDED?\n         BNZ   DSPLR               BRANCH IF NOT.\n         OI    SWPR,PRTIO          I/O NUMBER EXCEEDED.\n         SPACE 1\n*        BUILD THE MESSAGE WITH THE REASON OF CANCEL.\n         SPACE 1\nDSPLR   $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT\n         MVC   STARTWTO(4),WTOLIST SET MESSAGE AREA.\n         MVI   STARTWTO+1,LWTO\n         MVC   STARTMSG(13),=CL13'--- IEFUTL - '\n         MVC   TEXT(L'TEXT),TEXT-1\n         MVC   DCRC(4),WTOLIST+6\n         LA    R7,TEXT             START MESSAGE TEXT.\n         TM    SWPR,PRSTC\n         BO    M1A\n         TM    SWPR,PRTSU\n         BZ    M1B\n         MVC   0(3,R7),=CL3'TSU'\n         B     M1C\nM1A      MVC   0(3,R7),=CL3'STC'\n         B     M1C\nM1B      MVC   0(3,R7),=CL3'JOB'\nM1C      MVC   4(L'CEPAJOBN,R7),CEPAJOBN\n         LA    R7,L'CEPAJOBN+3(R7)\n         CLI   0(R7),C' '\n         BNE   *+L'*+4\n         BCT   R7,*-8\n         LA    R7,2(R7)\n         TM    SWPR,PRTIO\n         BZ    M2C\n         TM    SWPR,PRTSU\n         BO    M2A\n         MVC   0(3,R7),=CL3'JOB'\n         LA    R7,4(R7)\n         B     M2B\nM2A      MVC   0(7,R7),=CL7'SESSION'\n         LA    R7,8(R7)\nM2B      MVC   0(3,R7),=CL3'I/O'\n         LA    R7,4(R7)\n         B     M2H\nM2C      TM    SWPR,PRWAIT\n         BZ    M2E\n         TM    SWPR,PRTSU\n         BO    M2D\n         MVC   0(4,R7),=CL4'WAIT'\n         LA    R7,5(R7)\n         B     M2G\nM2D      MVC   0(5,R7),=CL5'THINK'\n         LA    R7,6(R7)\n         B     M2G\nM2E      TM    SWPR,PRSTP\n         BZ    M2F\n         MVC   0(4,R7),=CL4'STEP'\n         LA    R7,5(R7)\n         B     M2G\nM2F      MVC   0(3,R7),=CL3'JOB'\n         LA    R7,4(R7)\nM2G      MVC   0(4,R7),=CL4'TIME'\n         LA    R7,5(R7)\nM2H      MVC   0(16,R7),=CL16'LIMIT EXCEEDED -'\n         LA    R7,17(R7)\n         TM    SWPR,PRTSU\n         BZ    M3A\n         MVC   0(7,R7),=CL7'SESSION'\n         LA    R7,8(R7)\n         B     M3B\nM3A      MVC   0(3,R7),=CL3'JOB'\n         LA    R7,4(R7)\nM3B      MVC   0(8,R7),=CL8'CANCELED'\n         SPACE 1\n*        SEND THE MESSAGE TO LOG (WTO - BACKGROUND) OR TO THE\n*        TERMINAL AND IN THE BROADCAST (TPUT/SEND - FOREGROUND).\n         SPACE 1\n         TM    SWPR,PRTSU          IS IT TSU?\n         BO    SNDTSU              YES.\n         MVC   ENQCNTL(LGENQ),ENQLIST\n        ENQ   (QNME,RNME,E,L'RNME,SYSTEM),RET=TEST,MF=(E,ENQCNTL)\n         LTR   R15,R15             ANY SYSTEM INTERLOCK MAY OCCUR?\n         BNZ   FREE                YES, SKIP, ONLY ABEND MSG.\n        WTO    MF=(E,STARTWTO)     SEND MESSAGE TO LOG.\n         B     FREE\nSNDTSU   L     R6,ASCBTSB          TSB POINTER.\n         USING TSB,R6              TSB ADDRESSABILITY.\n         TM    TSBSTAT,TSBDSPLY    IS IT A DISPLAY SCREEN?\n         BZ    TSTNBF              NO\n         TM    TSBFLG5,TSBVTAM     IS IT UNDER VTAM?\n         BO    TOBRDC              YES, SKIP, MSG WILL BE UNVIEWABLE.\nTSTNBF   CLI   TSBNOBF,0           ANY OUTPUT BUFFERS WAITING?\n         BNE   TOBRDC              YES, SKIP, DO NOT WAIT.\n         DROP  R6\nSNDMSG  TPUT   STARTMSG,TWTO       SEND MESSAGE TO TERMINAL.\nTOBRDC   MVC   STARTWTO,=CL4'SE '''     PLACE MESSAGE IN MAILBOX.\n         MVI   DCRC,C' '\n         MVC   DCRC+1(L'DCRC+L'SCTEXT-1),DCRC\n         MVC   8(8,R7),=CL8''',USER=('\n         MVC   16(L'CEPAJOBN,R7),CEPAJOBN    SET USER-ID.\n         LA    R7,16+L'CEPAJOBN-1(R7)\n         CLI   0(R7),C' '\n         BNE   *+L'*+4\n         BCT   R7,*-8\n         MVC   1(6,R7),=CL6'),SAVE'\n         LA    R7,L'STARTSND+8(R7)\n         LA    R1,STARTSND\n         SR    R7,R1\n         USING MGCRPL,R1\n         XC    MGCRPL(4),MGCRPL\n         MVI   MGCRFLG1,MGCRFI     SET MGCRFLG2 VALID.\n         STC   R7,MGCRLGTH         SET COMMAND LENGTH.\n         DROP  R1\n         XR    R0,R0               SETUP FOR SVC 34.\n         LR    R15,R0\n        MGCR   (1)                 ISSUE SEND COMMAND.\n         DROP  R5\n         SPACE 1\n*        RELEASE ALL AND EXIT.\n         SPACE 1\nFREE     LR    R1,R3               ADDRESS OF AREA TO BE FREED.\n         DROP  R3\n         L     R3,4(R13)           PREVIOUS SAVE AREA ADDRESS.\n        FREEMAIN R,LV=AREAL,A=(1),SP=255\n         LR    R13,R3              RESTORE ORIGINAL SAVE AREA.\n         B     GOBACK              RETURN.\n         DROP  R2\n         EJECT\n*              CONSTANTS.\n         SPACE 1\nENQLIST  ENQ   (*-*,*-*,E,*-*,SYSTEM),RET=TEST,MF=L\nLGENQ    EQU   *-ENQLIST\nQNME     DC    CL8'SYSSJWTP'\nRNME     DC    CL7'JSCBWTP'\nWTOLIST  WTO   '  ',MF=L,ROUTCDE=11,DESC=7\n         SPACE 2\n         LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL$": {"ttr": 19465, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//IEFUTL   JOB (........),'INSTALL  -IEFUTL-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=2\n//ASS     EXEC PAJ2AS3,MBR=IEFUTL,OPT=',RENT'\n//LNK     EXEC PAJILKR,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   IEFUTL\n  NAME    IEFUTL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL@": {"ttr": 19467, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\t\\x8f\\x00\\x88\\t\\x8f\\x14E\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-04-07T00:00:00", "modifydate": "1988-04-07T14:45:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "SYSPAJA"}, "text": "1   07/04/88\n                                                      IEFUTL    1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          SMF EXIT : IEFUTL          * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n             -----------------------------------------\n               S M F   T I M E   L I M I T   E X I T\n             -----------------------------------------\n\n  Purpose :\n  ---------\n\n         Build a message to specify the CANCEL reason and send it to\n         the System Log if background jobs or to the terminal and in\n         the mailbox (broadcast) for next logon if foreground jobs.\n\n  -----------------\n  CJS involvement : see job SMFEXITS to correctly link-edit IEFUTL.\n  -----------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IKJEFF10": {"ttr": 19469, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x18o\\x00\\x90\\x18o\\x15C\\x01\\xae\\x01\\xae\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-07-05T00:00:00", "modifydate": "1990-07-05T15:43:00", "lines": 430, "newlines": 430, "modlines": 0, "user": "SYSPAJA"}, "text": "TSER     TITLE 'EURATOM - TSO SUBMIT EXIT ROUTINE.'\nIKJEFF10 START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* *                                                                 * *\n* *                      E U R A T O M                              * *\n* *                                                                 * *\n* *        T S O    S U B M I T    E X I T    R O U T I N E.        * *\n* *                                                                 * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n* PURPOSE :    1. WHEN THE JOB STATEMENT IS SUPPLIED, IT INSERTS A\n* ---------       CONTINUATION CARD CONTAINING THE LOGON PASSWORD\n*                 FOR A RACF DEFINED USER IF THE FOLLOWING CONDITIONS\n*                 ARE VERIFIED :\n*                 - THE USER=... KEYWORD IS CODED AND REFERS THE\n*                   USER HIMSELF,\n*                 - THE PASSWORD=... KEYWORD IS NOT CODED.\n*              2. WHEN THE JOB STATEMENT IS GENERATED, IT ALLOWS THE\n*                 USER TO CHANGE OR ACCEPT SOME PREDEFINED DEFAULTS,\n*                 THEN THESE REPLACES THE LAST GENERATED CARD.\n*\n* NOTE - FOR MORE INFORMATION ABOUT THE SUBMIT EXIT ROUTINE, SEE\n*        IBM MANUAL OS/VS2 SYSTEM PROGRAMMING LIBRARY : TSO.\n*\n* AUTHOR :     RAVARANI N. - MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         EJECT\n        $DEFREG\n         EJECT\n         USING *,R15\n        SAVE   (14,12),,IKJEFF10-&SYSDATE-&SYSTIME\n         LR    R12,R15             SET BASE REGISTER\n         DROP  R15\n         USING IKJEFF10,R12\n         SPACE 1\n*        SAVE AREAS ARE NOT CHAINED UNTIL AFTER THE GETMAIN.\n*        REGISTER 1 POINTS TO POINTER TO PARAMETER LIST.\n         SPACE 1\n         USING IEDSECTD,R1\n         L     R8,IEEXITL          GET ADDRESS OF PARAMETER LIST\n         DROP  R1\n         USING IEDSECTD,R8\n         L     R9,IESUBCTP         GET ADDRESS OF SWITCH BYTES\n         USING IESUBCTD,R9         ESTABLISH ADDRESSABILITY\n         TM    IESTMTYP,IESJOB     IS IT JOB STATEMENT?\n         BZ    EXIT00              NO, OTHER, EXIT\n         CLC   IEEXITWD,=F'0'      WORK-AREA ALREADY OBTAINED?\n         BE    GETM                NO\n         L     R10,IEEXITWD        YES, GET WORK-AREA ADDRESS\n         B     SVLNK\nGETM     L     R0,=A(WORKL)        OBTAIN A WORK-AREA\n        GETMAIN R,LV=(0)\n         ST    R1,IEEXITWD         WORK-AREA POINTER\n         LR    R10,R1\n         USING WORK,R10            SET-WORK AREA ADDRESSABILITY\n         SPACE 1\n* NOTE - HEREAFTER, IF DESIRED, A JOB STATEMENT PROCESS MAY BE\n*        BE DISABLED BY SETTING \"ON\" THE CORRESPONDING FLAG IN\n*        THE \"RUNSW\" SWITCHES BYTE AS BELOW :\n*          SWPSWD - TO SUPPRESS PASSWORD SUPPLY PROCESS.\n*          SWGJSD - TO SUPPRESS DEFAULTS CONTINUATION CARD PROCESS.\n         SPACE 1\n         MVI   RUNSW,0             ENABLE JOB STAT. PROCESSES\n         SPACE 1\n         XC    RUNIX,RUNIX\n         XC    RUNJC,RUNJC\n         L     R1,CVTPTR           CVT ADDRESS\n         USING CVT,R1\n         L     R2,CVTTCBP\n         DROP  R1\n         L     R1,12(R2)           ASCB ADDRESS\n         USING ASCB,R1\n         L     R2,ASCBASXB         ASXB ADDRESS\n         USING ASXB,R2\n         ICM   R3,B'1111',ASXBSENV ACEE ADDRESS\n         DROP  R2\n         BZ    NOSRCH              NOT A RACF USER\n         USING ACEE,R3\n         TM    ACEEFLG1,ACEERACF   IS IT A RACF DEFINED USER?\n         BZ    NOSRCH              NO\n         DROP  R3\n         ICM   R2,B'1111',ASCBTSB  TSB ADDRESS\n         BZ    NOSRCH              NO TSB\n         DROP  R1\n         USING TSB,R2\n        MODESET KEY=ZERO\n         MVC   USPSWD,TSBPSWD      GET PASSWORD FROM TSB\n        MODESET KEY=NZERO\n         DROP  R2\n         OC    USPSWD,USPSWD       IS THERE A LOGON PASSWORD?\n         BZ    NOSRCH              NO\n         CLC   USPSWD,=CL8' '      LOGON PASSWORD TSO/E PROPAGATION?\n         BNE   SVLNK               NO\nNOSRCH   OI    RUNSW,SWSPWD        SET DE-ACTIVATED\nSVLNK    LA    R1,SVA              BACKWARD-FORWARD SAVE AREAS\n         XC    0(18*4,R1),0(R1)\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1              SET NEW SAVE AREA POINTER\n         SPACE 1\n         ICM   R3,B'1111',IECARDP  GET ADDRESS OF CARD\n         BNZ   TSPW                ALL OK\n         TM    RUNSW,SWINSC        NO, IS CARD INSERTED?\n         BO    INSDN               YES\nQUIT     OI    RUNSW,SWGJSD+SWSPWD NONE, SET ALL DE-ACTIVATED\n         B     TFRWA               EVERYTHING FREEZED\n         EJECT\n*        -------------------------------\n*        LOOK FOR SUPLIED JOB STATEMENT.\n*        -------------------------------\n*\n*        THIS PART INSERTS A CONTINUATION CARD OF EACH JOB CARD\n*        SUBMITTED BY A RACF DEFINED USER. THE CONTINUATION CARD\n*        WILL CONTAIN THE LOGON PASSWORD OF THE PERSON SUBMITTING\n*        THE JOB. IF THE USER IS NOT RACF DEFINED, OR THE USER=...\n*        KEYWORD IS NOT HIMSELF, OR THE PASSWORD=... KEYWORD IS\n*        CODED, THE JOB IS PASSED AS IT IS, SO YOU CANNOT GET\n*        SOMEONE ELSES PASSWORD.\n*\n*        NOTE - THE JOB STATEMENT MUST BE MORE THAN ONE CARD CODED,\n*               OTHERWISE THE CONTINUATION CARD INSERTION IS NOT\n*               ACTIVATED (JOB IS PASSED AS IT IS).\n         SPACE 1\nTSPW     TM    RUNSW,SWSPWD        SUPPLY PASSWORD DE-ACTIVATED?\n         BO    TGJS                YES\n         TM    RUNSW,SWFJSC        NO, IS IT FIRST CARD?\n         BO    OPRAND              NO, CONTINUE\n         TM    IESTMTYP,IESSCON    YES, IS IT ALSO LAST CARD?\n         BZ    QUIT                YES, PASS AS IT IS\n         OI    RUNSW,SWFJSC        SET FIRST CARD PROCESSED\nOPRAND   CLI   IEOPRAND,0          OPERAND COLUMN?\n         BE    COPRAND             NO OPERAND IN CARD\n         SR    R2,R2\n         IC    R2,IEOPRAND         OFFSET OF OPERAND FIELD\n         LA    R4,0(R3,R2)         POINT TO OPERAND\n         BCTR  R4,0\n         LH    R5,=H'71'           IN LOOP, LOOK AT 71 COLUMNS\n         SR    R5,R2               LESS FIRST PART OF CARD\n         NI    RUNSW,255-SWSSTQ    CLEAR FOR QUOTES SEARCH\nSQUOTE   CLI   0(R4),C''''         IS IT A QUOTE MARK?\n         BNE   CQUOTE              NO\n         TM    RUNSW,SWSSTQ        IS IT THE BEGINNING QUOTE?\n         BZ    BQUOTE              YES\n         NI    RUNSW,255-SWSSTQ    NO, END OF QUOTE, RESET\n         B     NXCOL\nBQUOTE   OI    RUNSW,SWSSTQ        SET START OF QUOTE\n         B     NXCOL\nCQUOTE   TM    RUNSW,SWSSTQ        ARE WE IN A QUOTATION?\n         BO    NXCOL               YES, DON'T LOOK FOR KEYWORDS\n         CLI   0(R4),C' '          END OF OPERANDS?\n         BE    COPRAND             YES\n         CLC   0(9,R4),=CL9'PASSWORD='  IS IT PASSWORD=?\n         BE    SPOFF               YES\n         CLC   0(5,R4),=CL5'USER=' NO, IS IT USER=?\n         BNE   NXCOL               NO\n         LA    R4,5(R4)\n         SH    R5,=H'5'\n         BNP   SPOFF\n         LR    R2,R4               EXTRACT USER-ID\nJUSL     CLI   0(R4),C' '\n         BE    JUSF\n         CLI   0(R4),C','\n         BE    JUSF\n         LA    R4,1(R4)\n         BCT   R5,JUSL\nJUSF     LR    R1,R4\n         SR    R1,R2\n         BNP   SPOFF\n         BCTR  R1,0\n         MVC   JBUSR,=CL8' '\n         EX    R1,MVUS\n         L     R2,IEUSRIDP         POINTER TO USER-ID FIELD\n         CLC   JBUSR(L'JBUSR),0(R2)\n         BNE   SPOFF\n         OI    RUNSW,SWAPWC        SET ADD PASSWORD CARD\n         LTR   R5,R5\n         BNP   COPRAND\n         CLI   0(R4),C' '\n         BE    COPRAND\nNXCOL    LA    R4,1(R4)            NEXT COLUMN\n         BCT   R5,SQUOTE           LOOP IF NOT AT END OF CARD\nCOPRAND  TM    IESTMTYP,IESOPCON   IS OPERAND TO BE CONTINUED?\n         BO    TGJS                YES\n         TM    IESTMTYP,IESSCON    NO, IS IT LAST CARD?\n         BO    TGJS                NO\n         TM    RUNSW,SWAPWC        ADD PASSWORD CARD REQUESTED?\n         BZ    TGJS                NO\n         ST    R3,SVCARDP          YES\n         LA    R3,CRD\n         ST    R3,IECARDP          POINTER TO INSERTED CARD\n         MVC   CRDS(3),=CL3'// '\n         MVC   CRDS+3(L'CRDS-3),CRDS+2\n         MVC   CRDKW(L'CRDKW),=CL9'PASSWORD='\n         MVI   USPSWD+L'USPSWD,C' '\n         MVC   USPSWD+L'USPSWD+1(L'CRDEND+7),USPSWD+L'USPSWD\n         MVC   CRDEND(L'PSADD),PSADD    SET '** SUPPLIED BY SUBMIT **'\n         LA    R1,USPSWD+L'USPSWD-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   1(R1),C','          SET COMMA AFTER PASSWORD\n         MVI   IEOPRAND,16         SET OPERAND OFFSET\n         MVC   SVTYP,IESTMTYP      SAVE TYPE SWITCHES\n         MVI   IESTMTYP,IESJOB+IESSCON+IESCONTN   SET TYPE\n         OI    RUNSW,SWINSC        SET INSERTION DOING\n         B     EXIT04              GO INSERT CARD\nMVUS     MVC   JBUSR(*-*),0(R2)    <<EXECUTED>>\nINSDN    MVC   IECARDP,SVCARDP     RESTORE AND PROCESS LAST CARD\n         MVC   IEOPRAND,SVOPOFF\n         MVC   IESTMTYP,SVTYP\n         B     TFRWA\nSPOFF    OI    RUNSW,SWSPWD        SET DE-ACTIVATED\n         EJECT\n*        ----------------------------------------\n*        LOOK FOR SUBMIT GENERATED JOB STATEMENT.\n*        ----------------------------------------\n*\n*        THIS PART IS BASED ON THE FOLLOWING SEQUENCE (GENERATED BY\n*        SUBMIT) OF CARDS SKELETON :\n*         (1)  //JOBNAME   JOB AAAANNNN,     <--- PRIOR MVS/XA 2.1.7\n*         (2)  //             USER-NAME,     **JOB STATEMENT ...\n*         (3)  //             NOTIFY=USER-ID,USER=USER-ID,\n*         (4)  //             PASSWORD=XXXXXX,\n*         (5)  //             MSGLEVEL=...\n*        OR :\n*         (1)  //JOBNAME   JOB AAAANNNN,     <--- FROM MVS/XA 2.1.7\n*         (2)  //             USER-NAME,     **JOB STATEMENT ...\n*         (3)  //             NOTIFY=USER-ID,\n*         (4)  //             MSGLEVEL=...\n*\n*        A GENERATED JOB STATEMENT IS DETECTED BY THE COMMENT IN\n*        CARD (2). THEN AT THE LAST CARD (CARD (5) OR (4) ABOVE),\n*        THE EXIT EXECUTES ACTIONS DIRECTED BY THE RUNNING INDEX\n*        VALUE \"RUNIX\" DESCRIBED BELOW :\n*\n*              0 - STATEMENT HAS BEEN IDENTIFIED AS A JOB GENERATED,\n*                  LAST CARD SHOULD CONTAIN THE TEXT \"MSGLEVEL=\",\n*                  SEND THE FIRST MESSAGE TO THE USER.\n*              4 - EXIT RE-ENTERED AFTER WRITE OF FIRST MESSAGE,\n*                  SEND THE SECOND MESSAGE WITH REPLY TO THE USER.\n*              8 - EXIT RE-ENTERED WITH USER REPLY RESPONSE, WHICH\n*                  IS ASSUMED TO BE A CORRECT JCL STATEMENT.\n         SPACE 1\nTGJS     TM    RUNSW,SWGJSD        GEN. JOB STAT. DE-ACTIVATED?\n         BO    TFRWA               YES\n         TM    RUNSW,SWGJS         GEN. JOB STAT. ACTIVE?\n         BO    LASTC               YES\n         CLC   RUNJC,=H'1'         NO, IS IT CARD (2)?\n         BNE   TESTLC              NO, CONTINUE\n         CLC   30(L'JSGS,R3),JSGS  JOB STATEMENT GENERATED BY SUBMIT?\n         BNE   RSJCC               NO\n         OI    RUNSW,SWGJS+SWSPWD  SET GEN. JOB STAT. ACTIVE\nTESTLC   TM    IESTMTYP,IESSCON    IS IT LAST CARD?\n         BZ    FREEWA              YES\nBUMP     LH    R15,RUNJC           UPDATE CARD COUNT\n         AH    R15,=H'1'\n         STH   R15,RUNJC\n         B     EXIT00\nLASTC    TM    RUNSW,SWGJSC        GEN. JOB STAT. CONTINUE?\n         BO    GETRIX              YES\n         TM    IESTMTYP,IESSCON    IS IT LAST CARD?\n         BO    BUMP                NO\n         CLC   15(9,R3),=CL9'MSGLEVEL=' IS IT THE EXPECTED CARD?\n         BNE   RSGJS               NO\n         CLC   RUNJC,=H'3'         IS IT CARD (4)?\n         BE    SETCNT              YES\n         CLC   RUNJC,=H'4'         IS IT CARD (5)?\n         BNE   RSGJS               NO\nSETCNT   OI    RUNSW,SWGJSC        SET GEN. JOB STAT. CONTINUE\n         SPACE 1\nGETRIX   LH    R4,RUNIX            GET RUNNING INDEX\n         B     *+L'*(R4)           GO TO\n         B     GENJS        0 ---> LAST CARD?\n         B     REENT        4 ---> RE-ENTERED AFTER FIRST MESSAGE?\n         B     RRESP        8 ---> REPLY RESPONSE?\n         SPACE 1\nGENJS    LA    R4,FIRSTMSG\n         ST    R4,IEMSGP\n         MVC   RUNIX,=H'4'         SET FIRST MESSAGE\n         B     EXIT08\nREENT    LA    R4,DFLTCARD         DEFAULTS CARD\n         ST    R4,IEMSGP\n         MVC   0(80,R3),2(R4)      REPLACE THE GEN. STAT. BY DEFAULTS\n         MVI   IEOPRAND,4          OFFSET OF OPERAND FIELD\n         MVC   RUNIX,=H'8'         SET REPLY MESSAGE\n         B     EXIT12              GO GET REPLY\nRRESP    ICM   R4,B'1111',IEREPLYP REPLY BUFFER ADDRESS?\n         BZ    RSGJS               NO, WHAT'S THAT ..., GET DEFAULTS\n         SR    R5,R5\n         ICM   R5,B'0011',0(R4)    GET LENGTH OF REPLY\n         BZ    RSGJS               IF ZERO LENGTH, GET DEFAULTS\n         SPACE 1\n*        IF 3270 TYPE SCREEN AND PROFILE MSGID SPECIFIED, OR\n*        IF USER HAS MODIFIED THE DISPLAYED LINE, THE RESPONSE\n*        CONTAINS THE MESSAGE ID (IKJ56280A), AND EVENTUALLY A\n*        PLUS SIGN (+) AT THE END OF THE MESSAGE.\n         SPACE 1\n         AH    R4,=H'2'            POINTS TO START OF MESSAGE TEXT\n         SH    R5,=H'2'            -2 FOR LENGTH FIELD\n         BNP   RSGJS               WHAT'S THAT ..., GET DEFAULTS\n         CLC   0(10,R4),=CL10'IKJ56280A '\n         BNE   SCHPS               NO MSGID, BUT LOOK FOR + SIGN\n         AH    R4,=H'10'           SKIP MSGID\n         SH    R5,=H'10'           -10 FOR MSG IKJ.....\n         BNP   RSGJS               WHAT'S THAT ..., GET DEFAULTS\nSCHPS    CLC   0(3,R4),=CL3'// '   SOMEWHAT LIKE A CARD ENTERED?\n         BNE   RSGJS               NO, GET DEFAULTS\n         LA    R6,0(R4,R5)         POINT END OF TEXT +1\nLOOP     BCTR  R6,0                BACKWARD\n         CLI   0(R6),C' '          CAN FORGET TRAILING BLANKS\n         BNE   *+L'*+8\n         BCT   R5,LOOP\n         B     RSGJS               WHAT'S THAT ..., GET DEFAULTS\n         CLI   0(R6),C'+'          IS IT AN INSERTED + SIGN?\n         BNE   *+L'*+8             NO, LET'S GO\n         BCT   R5,*+L'*+4          DON'T MOVE THE + SIGN\n         B     RSGJS               WHAT'S THAT ..., GET DEFAULTS\n         BCT   R5,*+L'*+4          -1 FOR MOVE\n         B     RSGJS               WHAT'S THAT ..., GET DEFAULTS\n         MVI   0(R3),C' '          CLEAR OLD CARD\n         MVC   1(79,R3),0(R3)\n         EX    R5,MVCD             REPLACE IT BY THE NEW ONE\n         LA    R5,3(R4)            START AFTER '// '\nNEXT     CLI   0(R5),C' '          STILL BLANK?\n         BNE   SETFO               NO, FIRST OPERAND\n         AH    R5,=H'1'            SOME HOPE TO FIND IT REMAIN\n         CLR   R5,R6               LAST COLUMN?\n         BNH   NEXT                NO, CONTINUE SCAN\nSETFO    SLR   R5,R4               RELATIVE OFFSET FROM COLUMN 1\n         AH    R5,=H'1'            TRUE OFFSET\n         STC   R5,IEOPRAND         STORE NEW OFFSET OF OPERAND FIELD\nRSGJS    XC    RUNIX,RUNIX         CLEAR ACTIVITY\n         NI    RUNSW,255-SWGJS-SWGJSC\nRSJCC    XC    RUNJC,RUNJC\n         OI    RUNSW,SWGJSD        SET DE-ACTIVATED\n         DROP  R10\nTFRWA    TM    IESTMTYP,IESSCON    IS IT LAST CARD?\n         BO    EXIT00              NO\n         SPACE 2\nFREEWA   L     R13,4(R13)          RESTORE PREVIOUS SAVE AREA\n         L     R0,=A(WORKL)        YES, FREE WORK-AREA\n         LR    R1,R10\n        FREEMAIN R,A=(1),LV=(0)\n         XC    IEEXITWD,IEEXITWD   RESET WORK-AREA POINTER\n         LA    R15,IECONTIN\n         B     LEAVE\n         SPACE 1\nMVCD     MVC   0(*-*,R3),0(R4)     <<EXECUTED>>\n         SPACE 1\n         DROP  R8,R9\n         SPACE 2\n*        SET EXIT RETURN CODE.\n*        ---------------------\n         SPACE 1\nEXIT12   LA    R15,IEPROMPT\n         B     EXIT\nEXIT08   LA    R15,IEMSG\n         B     EXIT\nEXIT04   LA    R15,IERETURN\n         B     EXIT\nEXIT00   LA    R15,IECONTIN\nEXIT     L     R13,4(R13)          RESTORE PREVIOUS SAVE AREA\nLEAVE   RETURN (14,12),RC=(15)\n         EJECT\n*        C O N S T A N T S\n*        -----------------\n         SPACE 1\nJSGS     DC    C'**JOB STATEMENT GENERATED BY SUBMIT**'\nPSADD    DC    C'** SUPPLIED BY SUBMIT **'\n         SPACE 1\n*        M E S S A G E S\n*        ---------------\n         SPACE 1\nFIRSTMSG DC    0H'0',AL2(FMSGL)\n         DC    CL69'-- LAST CARD OF JOB STATEMENT : ALL DEFAULTS MAY BE1\n                CHANGED.'\n         DC    CL11' '\n         DC    C'-- ENTER A NULL LINE TO ACCEPT DEFAULTS.'\nFMSGL    EQU   *-FIRSTMSG\n         SPACE 1\nDFLTCARD DC    0H'0',AL2(DFLTCL)\n         DC    CL80'// TIME=(001,00),REGION=2900K,MSGCLASS=X,MSGLEVEL=(1\n               2,0)'\nDFLTCL   EQU   *-DFLTCARD\n         SPACE 2\n        LTORG\n         EJECT\n*        W O R K - A R E A\n*        -----------------\n         SPACE 1\nWORK     DSECT\n         SPACE 1\nSVA      DS    18F                 SAVE AREA\nSVCARDP  DS    A                   SAVE CARD POINTER\nCRD      DS    0CL80               CARD INSERTION\nCRDS     DS    CL15                     //\nCRDKW    DS    CL9                      PASSWORD=\nUSPSWD   DS    CL8,CL1,CL7              LOGON PASSWORD,\nCRDEND   DS    CL40                     ** SUPPLIED BY SUBMIT **\nJBUSR    DS    CL8                 JOB USER=...\nRUNIX    DS    H                   RUNNING INDEX\nRUNJC    DS    H                   RUNNING JOB CARD COUNT\nSVOPOFF  DS    XL1                 SAVE OPERAND OFFSET\nSVTYP    DS    XL1                 SAVE TYPE SWITCHES\nRUNSW    DS    XL1                 RUNNING SWITCH\nSWSPWD   EQU   X'80'                    SUPPLY PASSWORD DE-ACTIVATED\nSWGJSD   EQU   X'40'                    GEN. JOB STAT. DE-ACTIVATED\nSWGJS    EQU   X'20'                    GEN. JOB STAT. ACTIVE\nSWGJSC   EQU   X'10'                    GEN. JOB STAT. CONTINUE\nSWFJSC   EQU   X'08'                    FIRST JOB STAT. CARD PROCESSED\nSWAPWC   EQU   X'04'                    ADD PASSWORD CARD\nSWINSC   EQU   X'02'                    INSERT CARD DONE\nSWSSTQ   EQU   X'01'                    START-STOP TEXT QUOTES\n         SPACE 1\nWORKL    EQU   (((*-WORK)+7)/8)*8\n         SPACE 2\n        PRINT  NOGEN\n        CVT    DSECT=YES,LIST=YES\n        IHAACEE\n        IHAASCB\n        IHAASXB\n        IKJTSB LIST=YES\n        IKJEFFIE IETYPE=SUBMIT\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IKJEF10$": {"ttr": 19719, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16'\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:27:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//IKJEFF10 JOB (........),'INSTALL  -IKJEFF10-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//ASS     EXEC PAJ2AS3,MBR=IKJEFF10,OPT=',RENT'\n//LNK     EXEC PAJILKL,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   IKJEFF10\n  NAME    IKJEFF10(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEF10@": {"ttr": 19721, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x07\\x8f\\x00\\x91\\x07\\x8f\\x14\\x13\\x005\\x005\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-03-19T00:00:00", "modifydate": "1991-03-19T14:13:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "SYSPAJA"}, "text": "1   08/12/88\n                                                      IKJEFF10  1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       TSO SUBMIT EXIT ROUTINE.      * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    1. When the JOB statement is supplied, it inserts a\n  ---------       continuation card containing the LOGON password\n                  for a RACF defined user if the following conditions\n                  are verified :\n                  - the USER=... keyword is coded and refers the\n                    user himself,\n                  - the PASSWORD=... keyword is not coded.\n               2. When the JOB statement is generated, it allows the\n                  user to change or accept some predefined defaults,\n                  then these replaces the last generated card.\n\n  NOTE - For more information about the SUBMIT exit routine, see\n         IBM manual OS/VS2 System Programming Library : TSO.\n\n  ZAP to TSO SUBMIT command :\n  ===========================\n\n    The following ZAP is also applied at our installation.\n      //ZTS      JOB (........),'ZAP TSO-SUBMIT',\n      //             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n      /*JOBPARM L=1\n      //*\n      //*      ----------------------------\n      //*      APPLY ZAP TO 'SYS1.LINKLIB'.\n      //*      ----------------------------\n      //*\n      //*      VOL=SER=...... MUST BE COMPLETED.\n      //*\n      //ZAPM    EXEC PGM=IMASPZAP\n      //SYSLIB    DD UNIT=DISK,VOL=SER=......,\n      //             DSN=SYS1.LINKLIB,DISP=OLD\n      //SYSPRINT  DD SYSOUT=*\n      //SYSIN     DD *\n      *   --------------------------------------------------------\n      *   ZAP SUBMIT COMMAND TO ACCEPT JOBPARM CARD AS FIRST CARD.\n      *   --------------------------------------------------------\n        NAME   IKJEFF04  IKJEFF05  ---> MVS/SP 2.2.3\n          VER  0000 47F0,F024\n          VER  0016 E4E8,F3F9,F5F0,F400   UY39504\n          VER  0024 90EC,D00C,05A0,41C0,AFFF,1FFF\n          VER  0B7A 91C0,4015,4770,ABBC,9500,400E\n          VER  0BDE 9601,4022\n          REP  0B7E 4700\n      /*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JES2XIT$": {"ttr": 19723, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943_\\x00\\x943_\\t \\x00+\\x00+\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-01T00:00:00", "modifydate": "1994-12-01T09:20:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "SYSPAJA"}, "text": "//JES2XIT$ JOB (........),'INSTALL JES2 EXITS',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=8\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* NOTE : THE EXIT008 USES A MODIFIED VERSION OF OS-MACRO 'IEFAJCTB' *\n//*        FROM SYS1.MODGEN (SEE 'EUFAJCTB').                         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//AX001   EXEC PAJ2AS4,MBR=EXIT001,OPT=',RENT'\n//LX001   EXEC PAJILKL,OPT=',LET,NCAL,RENT,REUS,REFR'\n//SYSIN     DD *\n   SETCODE AC(1)\n   NAME    J2XIT001(R)\n/*\n//AX004   EXEC PAJ2AS4,MBR=EXIT004,OPT=',RENT'\n//LX004   EXEC PAJILKL,OPT=',LET,NCAL,RENT,REUS,REFR'\n//SYSIN     DD *\n   SETCODE AC(1)\n   NAME    J2XIT004(R)\n/*\n//AX005   EXEC PAJ2AS4,MBR=EXIT005,OPT=',RENT'\n//LX005   EXEC PAJILKL,OPT=',LET,NCAL,RENT,REUS,REFR'\n//SYSIN     DD *\n   SETCODE AC(1)\n   NAME    J2XIT005(R)\n/*\n//AX006   EXEC PAJ2AS4,MBR=EXIT006,OPT=',RENT'\n//LX006   EXEC PAJILKL,OPT=',LET,NCAL,RENT,REUS,REFR'\n//SYSIN     DD *\n   SETCODE AC(1)\n   NAME    J2XIT006(R)\n/*\n//AX008   EXEC PAJ2AS4,MBR=EXIT008,OPT=',RENT'\n//LX008   EXEC PAJILKA,OPT=',LET,NCAL,RENT,REUS,REFR'\n//SYSIN     DD *\n   SETCODE AC(1)\n   NAME    J2XIT008(R)\n/*\n//AX016   EXEC PAJ2AS4,MBR=EXIT016,OPT=',RENT'\n//LX016   EXEC PAJILKL,OPT=',LET,NCAL,RENT,REUS,REFR'\n//SYSIN     DD *\n   SETCODE AC(1)\n   NAME    J2XIT016(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JES2XIT@": {"ttr": 19725, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x12/\\x00\\x90\\x12/\\x15)\\x00\\xb6\\x00\\xb6\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-05-02T00:00:00", "modifydate": "1990-05-02T15:29:00", "lines": 182, "newlines": 182, "modlines": 0, "user": "SYSPAJA"}, "text": "1   24/04/90\n                                                      JES2XITS  1/6.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *           LOCAL JES2 EXITS          * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Exit :       EXIT001 (JES2 exit 1)\n  ------       JES2 PRINT/PUNCH separators.\n\n  Purpose :    This exit allows you to produce local PRINT and/or\n  ---------    PUNCH separators, and to control production of standard\n               PRINT/PRUNCH separators.\n               Actions :\n               Produce our PRINT separator (Jobs header/trailer\n               separator page modified to print also the room number\n               in block letters).\n               Invocation point : EXIT001\n               Entry point : UEXIT001\n               Environment : JES2 main task.\n\n  JES2PARM initialization statements :\n  ------------------------------------\n               LOAD=J2XIT001\n               EXIT001 ROUTINE=UEXIT001,DISABLE,TRACE=YES\n                                         ENABLE        NO\n\n  JES2 operator control commands :\n  --------------------------------\n               $T EXIT001,DISABLE,TRACE=YES\n                          ENABLE        NO\n               $D EXIT001\n1   24/04/90\n                                                      JES2XITS  2/6.\n\n  Exit :       EXIT004 (JES2 exit 4)\n  ------       JCL and JES2 control statement scan.\n\n  Purpose :    This exit allows you to scan JCL and JES2 control\n  ---------    statements (Note : JOB statements and internal reader\n               control statements such as /*DEL are not included in\n               the scan).\n               Actions :\n               Scan for and handle JOBIO= or I= new local parameter\n               in the JES2 /*JOBPARM control statement.\n               Format : JOBIO=NNNN or I=NNNN\n                        where NNNN is a 1 up to 4 numeric digits.\n               Object : NNNN is the estimated total SRB time for a job\n                        (expressed in seconds).\n                        Value is stored in JCTUSER0 field of the JCT.\n               Invocation point : EXIT004\n               Entry point : UEXIT004\n               Environment : JES2 main task.\n\n  JES2PARM initialization statements :\n  ------------------------------------\n               LOAD=J2XIT004\n               EXIT004 ROUTINE=UEXIT004,DISABLE,TRACE=YES\n                                         ENABLE        NO\n\n  JES2 operator control commands :\n  --------------------------------\n               $T EXIT004,DISABLE,TRACE=YES\n                          ENABLE        NO\n               $D EXIT004\n1   24/04/90\n                                                      JES2XITS  3/6.\n\n  Exit :       EXIT005 (JES2 exit 5)\n  ------       Additional local commands.\n\n  Purpose :    This exit is designed to implement installation\n  ---------    specific commands, and as such must intercept only\n               those commands when encountered.\n               Commands :\n               $YL Jn to list the individual SETUP statements for a\n                        requested batch job (Jn is the job number).\n               Invocation point : EXIT005\n               Entry point : UEXIT005\n               Environment : JES2 main task.\n\n  JES2PARM initialization statements :\n  ------------------------------------\n               LOAD=J2XIT005\n               EXIT005 ROUTINE=UEXIT005,DISABLE,TRACE=YES\n                                         ENABLE        NO\n\n  JES2 operator control commands :\n  --------------------------------\n               $T EXIT005,DISABLE,TRACE=YES\n                          ENABLE        NO\n               $D EXIT005\n1   24/04/90\n                                                      JES2XITS  4/6.\n\n  Exit :       EXIT006 (JES2 exit 6)\n  ------       Internal text scan.\n\n  Purpose :    This exit allows you to interpret an internal text image\n  ---------    and decide whether JES2 should either cancel the job or\n               let it to continue with normal execution. This routine\n               can also modify any internal text image. In addition,\n               after all of the JCL for a particular job has been\n               converted to internal text, this exit again allows to\n               direct JES2 either to cancel the job or to continue\n               with normal execution.\n               Actions :\n               1. In the JCL internal text of the JOB statement, set\n                  the new execution class and the new performance\n                  group, delete an eventual PRTY= if specified, and\n                  add a TIME=default if not specified.\n               2. In the JCL internal text of the EXEC statement,\n                  delete any eventual PERFORM=, DPRTY= and ACCT=, then\n                  add the new performance group.\n               Invocation point : EXIT006\n               Entry point : UEXIT006\n               Environment : JES2 subtask.\n\n  JES2PARM initialization statements :\n  ------------------------------------\n               LOAD=J2XIT006\n               EXIT005 ROUTINE=UEXIT006,DISABLE,TRACE=YES\n                                         ENABLE        NO\n\n  JES2 operator control commands :\n  --------------------------------\n               $T EXIT006,DISABLE,TRACE=YES\n                          ENABLE        NO\n               $D EXIT006\n1   24/04/90\n                                                      JES2XITS  5/6.\n\n  Exit :       EXIT008 (JES2 exit 8)\n  ------       Maximum condition code/abend code support.\n\n  Purpose :    This exit stores either the maximum condition code of\n  ---------    all the steps in a job or the abend code of the job in\n               a JCT user field (name is JCTUSER3). This information\n               will be used later in EXIT016 to build the TSO NOTIFY.\n               Invocation point : EXIT008\n               Entry point : UEXIT008\n               Environment : User address space.\n                             Exit must reside in common storage.\n\n  JES2PARM initialization statements :\n  ------------------------------------\n               LOAD=J2XIT008\n               EXIT008 ROUTINE=UEXIT008,DISABLE,TRACE=YES\n                                         ENABLE        NO\n\n  JES2 operator control commands :\n  --------------------------------\n               $T EXIT008,DISABLE,TRACE=YES\n                          ENABLE        NO\n               $D EXIT008\n1   24/04/90\n                                                      JES2XITS  6/6.\n\n  Exit :       EXIT016 (JES2 exit 16)\n  ------       Maximum condition code/abend code support.\n\n  Purpose :    This exit modifies the $HASP165 message by adding\n  ---------    either the maximum condition code of all the steps in\n               a job or the abend code of the job (set by EXIT008 in\n               JCTUSER3 field).\n               Invocation point : EXIT016\n               Entry point : UEXIT016\n               Environment : JES2 main task.\n\n  JES2PARM initialization statements :\n  ------------------------------------\n               LOAD=J2XIT016\n               EXIT016 ROUTINE=UEXIT016,DISABLE,TRACE=YES\n                                        ENABLE        NO\n\n  JES2 operator control commands :\n  --------------------------------\n               $T EXIT016,DISABLE,TRACE=YES\n                          ENABLE        NO\n               $D EXIT016\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LMRUTIL": {"ttr": 19969, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\to\\x00\\x93\\to\\x10\\x02\\n\\x9d\\n\\x9d\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-06T00:00:00", "modifydate": "1993-04-06T10:02:00", "lines": 2717, "newlines": 2717, "modlines": 0, "user": "SYSPAJA"}, "text": "LMRU     TITLE '--- LOAD MODULES REFERENCES UTILITY ---'\nLMRUTIL  START 0\n         SPACE 1\n         PRINT OFF\n         GBLC  &PRS,&PRF\n         AIF   ('&SYSPARM' EQ 'FULL').SF\n         AIF   ('&SYSPARM' EQ 'SHORT').SS\n&PRS     SETC  'NOGEN'\n&PRF     SETC  'NOGEN'\n         AGO   .ST\n.SS      ANOP\n&PRS     SETC  'GEN'\n&PRF     SETC  'NOGEN'\n         AGO   .ST\n.SF      ANOP\n&PRS     SETC  'GEN'\n&PRF     SETC  'GEN'\n.ST      PRINT ON\n         SPACE 1\n* CALL OF THE PROGRAM :\n* ---------------------\n*\n*        //XEQ     EXEC PGM=LMRUTIL,PARM=...(OPTIONAL)...\n*        //LML....1  DD DSN=...1ST LOAD LIBRARY...,DISP=SHR\n*        //LML....2  DD DSN=...2ND LOAD LIBRARY...,DISP=SHR\n*                           ...ANY NUMBER OF DD-CARDS...\n*        //LML....N  DD DSN=...NTH LOAD LIBRARY...,DISP=SHR\n*        //TITPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n*        //LMLPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n*        //SYSPRINT  DD SYSOUT=*\n*\n* AUTHOR :     MOINIL P.A.\n* --------     COMPUTING CENTRE (TP 361)\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         PRINT &PRF\n        $DEFREG\n*------- DEFAULTS VALUES DEFINITIONS (CAN BE CHANGED THROUGH THE JCL\n*              EXEC PARM= FIELD).\n         SPACE 1\n@LN      EQU   55        MAX. NUMBER OF LINES PER PAGE\n@MD      EQU   10        MAX. NUMBER OF LOAD LIBRARY'S DD'S\n@MM      EQU   3000      MAX. NUMBER OF DIRECTORIES NAMES (IN ALL LOAD\n*                             LIBRARIES)\n@RN      EQU   8000      MAX. NUMBER OF REFERENCE ELEMENTS (IN ALL\n*                             LOAD LIBRARIES)\n*                        NOTE : A REFERENCE ELEMENT IS USED FOR\n*                             - THE MODULE NAME OF A LOAD MODULE,\n*                             - EACH ALIAS NAME OF A LOAD MODULE,\n*                             - EACH ENTRY NAME (UNLESS IT IS MODULE\n*                               OR ALIAS NAME) IN A LOAD MODULE, AND\n*                             - EACH EXTERNAL NAME IN A LOAD MODULE.\n@ZP      EQU   3000      MAX. NUMBER OF HMASPZAP IDR'S (IN ALL LOAD\n*                             MODULES OF ALL LOAD LIBRARIES)\n@LK      EQU   3000      MAX. NUMBER OF LINKAGE EDITOR IDR'S (IN ALL\n*                             LOAD MODULES OF ALL LOAD LIBRARIES)\n@US      EQU   3000      MAX. NUMBER OF USER (IDENTIFY) IDR'S (IN ALL\n*                             LOAD MODULES OF ALL LIBRARIES)\n@CE      EQU   500       MAX. NUMBER OF \"CESD\" SYMBOLS DEFINED IN A\n*                             LOAD MODULE <============== ONLY ONE <===\n@TW      EQU   4         MAX. NUMBER OF K (1024 BYTES) FOR TRANSLATOR\n*                             IDR'S WORK BUFFER\n@UW      EQU   4         MAX. NUMBER OF K (1024 BYTES) FOR USER\n*                             (IDENTIFY) IDR'S WORK BUFFER\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                        R   E   M   A   R   K                        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*  BE CAREFUL IF YOU MODIFY ANYONE OF THE TWO DSECT NAMED \"MMENT\" AND *\n*   \"RNENT\" BECAUSE THEIR FIELDS ARE INVOLVED IN SOME INTERNAL SORTS. *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                      M A I N     P R O C E S S                      *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*              R10 = LOCAL BASE REGISTER                              *\n*              R11 = 1ST MAIN BASE REGISTER                           *\n*              R12 = 2ND MAIN BASE REGISTER                           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        $XENT  BASE=(R11,R12)\n         L     R10,=A(INIT0)       INITIALIZATION\n         BR    R10\nINITX    L     R10,=A(SCAN0)       SCAN ALL DD'S\n         BR    R10\nSCANX    L     R10,=A(TRCE0)       INITIAL TRACE\n         BR    R10\nTRCEX    L     R10,=A(GMMN0)       GET DIRECTORIES NAMES\n         BR    R10\nGMMNX    L     R10,=A(SCLM0)       SCAN LOAD MODULES\n         BR    R10\nSCLMX    L     R10,=A(PRMR0)       PRINT MODULES REFERENCES\n         BR    R10\nPRMRX    L     R10,=A(PRNR0)       PRINT NAMES REFERENCES\n         BR    R10\nPRNRX    L     R10,=A(FTRC0)       FINAL TRACE\n         BR    R10\n         SPACE 1\n*------- THAT'S ALL FOLKS\n         SPACE 1\nLEAVE   $PCLOSE\n         LTR   R2,R15              RC = 0\n         BNZ   ERRPCL\n         TM    SW2,SWERR\n         BZ    QUIT+L'QUIT\nQUIT     LA    R2,16               RC = 16\n         ICM   R1,B'1111',WADDR\n         BZ    EXIT\n         L     R0,WSIZE\n        FREEMAIN R,A=(1),LV=(0)\nEXIT    $XRET  CC=(R2)\n         SPACE 1\n*------- SEND ERROR DIAGNOTICS\n         SPACE 1\nERRPCL   STC   R15,PCLERR+47\n         OI    PCLERR+47,C'0'\nPCLERR  WTO    '\"SYSPRINT\" / CLOSE ERROR ($PCLOSE RC =  )',            X\n               ROUTCDE=11,DESC=7\n         B     QUIT\nLSTERR   STC   R15,MERR1+42\n         OI    MERR1+42,C'0'\n         LA    R1,MERR1\n         BAS   R9,PERR\n         B     LEAVE\n         SPACE 1\n*------- SEND MESSAGE ROUTINE\n*             R0-R1-R2-R14-R15  = WORK REGISTERS\n*             R9 = LINK REGISTER\n         SPACE 1\nPERR     OI    SW2,SWERR\n         TM    SW1,SWPRT\n         BZ    PERR1\n         MVC   WLNE(6),=CL6'0-M-> '\n         MVC   WLNE+6(L'WLNE-6),WLNE+5\n         LH    R15,0(R1)\n         SH    R15,=H'5'\n         EX    R15,PERRMV\n         LR    R2,R1               SAVE AROUND PRINT\n        $PRINT WLNE\n         LTR   R15,R15\n         BZR   R9\n         NI    SW1,255-SWPRT\n         STC   R15,PERRWT+46\n         OI    PERRWT+46,C'0'\nPERRWT  WTO    '\"SYSPRINT\" / PRINT ERROR ($PRINT RC =  )',             X\n               ROUTCDE=11,DESC=7\n         LR    R1,R2               RESTORE\nPERR1   WTO    MF=(E,(1))\n         BR    R9\nPERRMV   MVC   WLNE+6(*-*),4(R1)   <<EXECUTED>>\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                       C O M M O N     D A T A                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nWORKD    DC    D'0'                DOUBLE-WORD WORK\nATIOT    DC    A(*-*)              TIOT POINTER\nWADDR    DC    F'0'                AREA ADDRESS\nWSIZE    DC    F'0'                AREA SIZE\nVLLN     DC    A(@LN)              MAX. NO. OF LINES PER PAGE\nVLMD     DC    A(@MD)              MAX. NO. OF LOAD LIBRARY'S DD'S\nVLMM     DC    A(@MM)              MAX. NO. OF DIRECTORIES NAMES\nVLRN     DC    A(@RN)              MAX. NO. OF REFERENCE ELEMENTS\nVLZP     DC    A(@ZP)              MAX. NO. OF HMASPZAP IDR'S\nVLLK     DC    A(@LK)              MAX. NO. OF LINKAGE EDITOR IDR'S\nVLUS     DC    A(@US)              MAX. NO. OF USER (IDENTIFY) IDR'S\nVLCE     DC    A(@CE)              MAX. NO. OF CESD SYMBOLS\nVLTW     DC    A(@TW)              MAX. NO. OF K FOR TRANSLATOR BUFFER\nVLUW     DC    A(@UW)              MAX. NO. OF K FOR USER BUFFER\nAMDS     DC    A(*-*)              START OF LOAD'S DD'S\nAMDN     DC    F'0'                LOAD'S DD'S USED NUMBER\nAMMS     DC    A(*-*)              START OF DIRECTORIES NAMES\nAMDE     EQU   AMMS                ALSO END OF 'MD'\nARNS     DC    A(*-*)              START OF REFERENCE ELEMENTS\nAMME     EQU   ARNS                ALSO END OF 'MM'\nAZPS     DC    A(*-*)              START OF HMASPZAP ELEMENTS\nARNE     EQU   AZPS                ALSO END OF 'RN'\nALKS     DC    A(*-*)              START OF LINKAGE EDITOR ELEMENTS\nAZPE     EQU   ALKS                ALSO END OF 'ZP'\nAUSS     DC    A(*-*)              START OF USER ELEMENTS\nALKE     EQU   AUSS                ALSO END OF 'LK'\nACES     DC    A(*-*)              START OF CESD SYMBOLS\nAUSE     EQU   ACES                ALSO END OF 'US'\nATWS     DC    A(*-*)              START OF TRANSLATOR BUFFER\nACEE     EQU   ATWS                ALSO END OF 'CE'\nAUWS     DC    A(*-*)              START OF USER BUFFER\nATWE     EQU   AUWS                ALSO END OF 'TW'\nELDA     DC    A(*-*)              END+1 OF LAST DEFINED AREA\nAUWE     EQU   ELDA                ALSO END OF 'UW'\nSZMD     DC    F'0'                SIZE OF \"MD\"\nSZMM     DC    F'0'                SIZE OF \"MM\"\nSZRN     DC    F'0'                SIZE OF \"RN\"\nSZZP     DC    F'0'                SIZE OF \"ZP\"\nSZLK     DC    F'0'                SIZE OF \"LK\"\nSZUS     DC    F'0'                SIZE OF \"US\"\nSZCE     DC    F'0'                SIZE OF \"CE\"\nSZTW     DC    F'0'                SIZE OF \"TW\"\nSZUW     DC    F'0'                SIZE OF \"UW\"\nCHKMA    DC    2F'0'\nCRNPTR   DC    F'0'\nCZPPTR   DC    F'0'\nCLKPTR   DC    F'0'\nCUSPTR   DC    F'0'\nCCEPTR   DC    F'0'\nCTWPTR   DC    F'0'\nCUWPTR   DC    F'0'\nCURCE    DC    F'0'\nCURTW    DC    F'0'\nCURUW    DC    F'0'\nTTLDD    DC    CL8'TITPRINT'\nLMLDD    DC    CL8'LMLPRINT'\nDDNME    DC    CL8' '\nMODNME   DC    CL8' '\nTRHEX    DC    CL16'0123456789ABCDEF'\nEMDL     DC    Y(MDLGTH)\nEMML     DC    Y(MMLGTH)\nERNL     DC    Y(RNLGTH)\nEZPL     DC    Y(ZPLGTH)\nELKL     DC    Y(LKLGTH)\nEUSL     DC    Y(USLGTH)\nECEL     DC    Y(CELGTH)\nMXLN1    DC    PL2'+0'\nMXLN2    DC    PL2'+0'\nMXLN3    DC    PL2'+0'\nMXLN4    DC    PL2'+0'\nMRPG     DC    PL3'+0'\nMRLN     DC    PL2'+0'\nIXPG     DC    PL3'+0'\nIXLN     DC    PL2'+0'\nNRPG     DC    PL3'+0'\nNRLN     DC    PL2'+0'\nCTRL     DC    PL3'+0'\nCKCODE   DC    XL1'0'\nCURTTR   DC    XL3'0'\nSW1      DC    XL1'0'\nSWPRT    EQU   X'80'               SYSPRINT DD PRESENT\nSWTIT    EQU   X'40'               TITPRINT DD PRESENT\nSWLML    EQU   X'20'               LMLPRINT DD PRESENT\nSWMDD    EQU   X'08'               LML..... DD(S) PRESENT\nSW2      DC    XL1'0'\nSWERR    EQU   X'80'               ERROR RC=16 TO BE SET\nSWTAV    EQU   X'40'               TRACE WORK-AREAS VALUES\nSWFTR    EQU   X'20'               FORCE TRACE WORK-AREAS VALUES\nSW3      DC    XL1'0'\nSWMNP    EQU   X'80'               MODULE NAME PRINT\nSWTYP    EQU   X'40'               TYPE NAME/DATE PRINT\nSWNRP    EQU   X'20'               NAME REFERENCE PRINT\nSWLST    EQU   X'02'               LAST IDR RECORD PROCESSED\nSWEQU    EQU   X'01'               PARM.FIELD SCAN USE\n         SPACE 1\n*------- DATA PRINT LINES\n         SPACE 1\n         DC    AL1(L'WLNE)\nWLNE     DC    CL133' '            PRINT WORK LINE\n         SPACE 1\n         DC    AL1(L'COV1)\nCOV1     DS    0CL80\n         DC    CL25'1L.M.R.   H A N D B O O K',CL55' '\n         DC    AL1(L'COV2)\nCOV2     DS    0CL80\n         DC    CL1'+',24C'_',CL55' '\n         DC    AL1(L'COV3)\nCOV3     DS    0CL80\n         DC    CL5' ',CL21' '\n         DC    CL32'LOAD MODULES REFERENCES HANDBOOK'\n         DC    CL22' '\n         DC    AL1(L'COV4)\nCOV4     DS    0CL80\n         DC    CL5' ',CL29' ',CL7'DATE :'\nCOVDATE  DC    CL10' ',CL29' '\n         DC    AL1(L'COV5)\nCOV5     DC    CL80' '\n         SPACE 1\n         DC    AL1(L'IXT1)\nIXT1     DS    0CL80\n         DC    CL41'1L.M.R.   H A N D B O O K - INDEX SECTION'\n         DC    CL14' ----- DATE : '\nIXT1D    DC    CL10' ',CL9' - PAGE I'\nIXT1P    DC    CL6' '\n         DC    AL1(L'IXT1U)\nIXT1U    DS    0CL80\n         DC    CL1'+',79C'_'\n         DC    AL1(L'IXT2)\nIXT2     DS    0CL80\n         DC    CL8'0 '\n         DC    CL44'LIBRARY DATA-SET NAME ',CL3' '\n         DC    CL6'VOLUME',CL3' '\n         DC    CL7'PAGE   ',CL9' '\n         DC    AL1(L'IXT2U)\nIXT2U    DS    0CL80\n         DC    CL8'+ ',44C'_',CL3' '\n         DC    CL16'______   _______',CL9' '\n         DC    AL1(L'IXT3)\nIXT3     DS    0CL80\n         DC    CL8' '\nIXT3D    DC    CL44' ',CL3' '\nIXT3V    DC    CL6' ',CL3' '\nIXT3T    DC    CL1' '\nIXT3P    DC    CL6' ',CL9' '\n         SPACE 1\n         DC    AL1(L'MRT1)\nMRT1     DS    0CL80\n         DC    CL43'1L.M.R.   H A N D B O O K - MODULES SECTION'\n         DC    CL12' --- DATE : '\nMRT1D    DC    CL10' ',CL9' - PAGE M'\nMRT1P    DC    CL6' '\n         DC    AL1(L'MRT1U)\nMRT1U    DS    0CL80\n         DC    CL1'+',79C'_'\n         DC    AL1(L'MRT2)\nMRT2     DS    0CL80\n         DC    CL12'0DATA-SET : '\nMRT2N    DC    CL44' ',CL6' ',CL12'ON VOLUME : '\nMRT2V    DC    CL6' '\n         DC    AL1(L'MRT2U)\nMRT2U    DS    0CL80\n         DC    CL1'+',10C'_',CL51' ',11C'_',CL7' '\n         DC    AL1(L'MRT3)\nMRT3     DS    0CL80\n         DC    CL3'0',CL8'MODULE  ',CL3' ',CL7'LINK''ED',CL3' '\n         DC    CL53'LINKAGE EDITOR INFORMATION ',CL3' '\n         DC    AL1(L'MRT3U)\nMRT3U    DS    0CL80\n         DC    CL3'+',CL8'________',CL3' ',CL7'_______',CL3' '\n         DC    53C'_',CL3' '\n         DC    AL1(L'MRT3A)\nMRT3A    DS    0CL80\n         DC    CL14' '\n         DC    CL7'TYPE ',CL3' '\n         DC    CL53'NAME - DATE COMPILATION/ASSEMBLY ',CL3' '\n         DC    AL1(L'MRT3S)\nMRT3S    DS    0CL80\n         DC    CL14'+ ',CL7'_______',CL3' ',53C'_',CL3' '\n         DC    AL1(L'MRT4)\nMRT4     DS    0CL80\n         DC    CL3' '\nMRT4M    DC    CL8' ',CL3' '\nMRT4T    DC    CL7' ',CL3' '\nNMRT4R   EQU   3                   DUP. NO. OF MRT4R FIELD\nMRT4R    DC    (NMRT4R)CL18' ',CL2' '\n         SPACE 1\n         DC    AL1(L'NRT1)\nNRT1     DS    0CL80\n         DC    CL41'1L.M.R.   H A N D B O O K - NAMES SECTION'\n         DC    CL14' ----- DATE : '\nNRT1D    DC    CL10' ',CL9' - PAGE N'\nNRT1P    DC    CL6' '\n         DC    AL1(L'NRT1U)\nNRT1U    DS    0CL80\n         DC    CL1'+',79C'_'\n         DC    AL1(L'NRT2)\nNRT2     DS    0CL80\n         DC    CL2'0 ',CL8'NAME ',CL1' ',CL6'TYPE ',CL1' ',CL8'MODULE '\n         DC    CL1' ',CL6'DATE  ',CL1' ',CL44'DATA-SET / VOLUME',CL2' '\n         DC    AL1(L'NRT2U)\nNRT2U    DS    0CL80\n         DC    CL2' ',8C'_',CL1' ',6C'_',CL1' ',8C'_'\n         DC    CL1' ',6C'_',CL1' ',44C'_',CL2' '\n         DC    AL1(L'NRT3)\nNRT3     DS    0CL80\n         DC    CL2' '\nNRT3N    DC    CL8' ',CL1' '\nNRT3T    DC    CL6' ',CL1' '\nNRT3M    DC    CL8' ',CL1' '\nNRT3A    DC    CL6' ',CL1' '\nNRT3D    DC    CL44' ',CL2' '\n         SPACE 1\n*------- DIAGNOTICS MESSAGES\n         SPACE 1\n         PRINT &PRF\nGTMERR  WTO    'GETMAIN : STORAGE NOT AVAILABLE (SIZE=        )',      X\n               ROUTCDE=11,DESC=7,MF=L\nMERR1   WTO    '\"        \" / PRINT ERROR ($PRINT RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                     I N I T I A L I Z A T I O N                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- GET NEW VALUES IF SUPPLIED BY JCL EXEC PARM= FIELD WHICH\n*        MAY BE SPECIFIED AS SHOWN BELOW :\n*        1. PARM='LN=..,MD=...,MM=...,RN=...,ZP=...,LK=...,US=...,\n*                 CE=...,TW=...,UW=...,T'\n*        2. PARM='LN=.. MD=... MM=... RN=... ZP=... LK=... US=...\n*                 CE=... TW=... UW=... T'\n*        3. PARM='LN .. MD ... MM ... RN ... ZP ... LK ... US ...\n*                 CE ... TW ... UW ... T'\n         SPACE 1\nINIT0    L     R1,0(R1)            PARM.FIELD ADDRESS\n         XR    R2,R2\n         ICM   R2,B'0011',0(R1)    PARM.FIELD LENGTH\n         BZ    NOPARM\n         LA    R1,2(R1)            START OF PARM.FIELD TEXT\n         AR    R2,R1               END+1 OF PARM.FIELD TEXT\nPARM1    CLI   0(R1),C','\n         BE    PARM2\n         CLI   0(R1),C' '\n         BNE   PARM3\nPARM2    LA    R1,1(R1)            SEPARATOR\n         CLR   R1,R2\n         BL    PARM1\n         B     NOPARM\nPARM3    CLC   0(2,R1),=CL2'TW'\n         BE    *+L'*+16\n         CLI   0(R1),C'T'\n         BNE   *+L'*+8\n         OI    SW2,SWTAV\n         B     PARM2\n         LA    R0,2(R1)\n         CLR   R0,R2\n         BH    ERRPARM\n         CLC   0(2,R1),=CL2'LN'\n         BNE   *+L'*+8\n         LA    R3,VLLN\n         B     PARM4\n         CLC   0(2,R1),=CL2'MD'\n         BNE   *+L'*+8\n         LA    R3,VLMD\n         B     PARM4\n         CLC   0(2,R1),=CL2'MM'\n         BNE   *+L'*+8\n         LA    R3,VLMM\n         B     PARM4\n         CLC   0(2,R1),=CL2'RN'\n         BNE   *+L'*+8\n         LA    R3,VLRN\n         B     PARM4\n         CLC   0(2,R1),=CL2'ZP'\n         BNE   *+L'*+8\n         LA    R3,VLZP\n         B     PARM4\n         CLC   0(2,R1),=CL2'LK'\n         BNE   *+L'*+8\n         LA    R3,VLLK\n         B     PARM4\n         CLC   0(2,R1),=CL2'US'\n         BNE   *+L'*+8\n         LA    R3,VLUS\n         B     PARM4\n         CLC   0(2,R1),=CL2'CE'\n         BNE   *+L'*+8\n         LA    R3,VLCE\n         B     PARM4\n         CLC   0(2,R1),=CL2'TW'\n         BNE   *+L'*+8\n         LA    R3,VLTW\n         B     PARM4\n         CLC   0(2,R1),=CL2'UW'\n         BNE   ERRPARM\n         LA    R3,VLUW\nPARM4    CLR   R0,R2\n         BNL   NOPARM              NULL VALUE\n         LR    R1,R0\n         NI    SW3,255-SWEQU\nPARM5    CLI   0(R1),C','\n         BE    PARM2               SEPARATOR\n         CLI   0(R1),C'='\n         BNE   PARM6\n         TM    SW3,SWEQU\n         BO    ERRPARM\n         OI    SW3,SWEQU\n         B     *+L'*+8\nPARM6    CLI   0(R1),C' '\n         BNE   PARM7\n         LA    R1,1(R1)\n         CLR   R1,R2\n         BL    PARM5\n         B     NOPARM\nPARM7    CLI   0(R1),C'0'\n         BL    PARM3\n         XR    R15,R15\nPARM8    CLI   0(R1),C','\n         BE    PARM9               SEPARATOR\n         CLI   0(R1),C' '\n         BE    PARM9               SEPARATOR\n         CLI   0(R1),C'0'\n         BL    ERRPARM\n         CLI   0(R1),C'9'\n         BH    ERRPARM\n         XR    R14,R14\n         ICM   R14,B'1000',0(R1)\n         SLL   R14,4\n         SRL   R14,28\n         LTR   R15,R15\n         BNP   *+L'*+4\n         MH    R15,=H'10'\n         AR    R15,R14\n         LA    R1,1(R1)\n         CLR   R1,R2\n         BL    PARM8\nPARM9    LTR   R15,R15\n         BNP   *+L'*+4             NULL VALUE\n         ST    R15,0(R3)           SET NEW VALUE\n         CLR   R1,R2\n         BL    PARM2\n         SPACE 1\n*------- GET AND INITIALIZE AREAS\n         SPACE 1\nNOPARM   L     R1,VLLN\n         LA    R0,10\n         CLR   R1,R0\n         BL    ERRMXLN\n         LA    R0,99\n         CLR   R1,R0\n         BH    ERRMXLN\n         CVD   R1,WORKD\n         SP    WORKD,=PL1'+3'\n         ZAP   MXLN1,WORKD+L'WORKD-L'MXLN1(L'MXLN1)\n         SP    WORKD,=PL1'+2'\n         ZAP   MXLN2,WORKD+L'WORKD-L'MXLN2(L'MXLN2)\n         SP    WORKD,=PL1'+2'\n         ZAP   MXLN3,WORKD+L'WORKD-L'MXLN3(L'MXLN3)\n         SP    WORKD,=PL1'+2'\n         ZAP   MXLN4,WORKD+L'WORKD-L'MXLN4(L'MXLN4)\n         L     R2,VLMD\n         LA    R1,1(R2)\n         ST    R1,AMDN\n         MH    R2,EMDL\n         ST    R2,SZMD\n         L     R3,VLMM\n         MH    R3,EMML\n         ST    R3,SZMM\n         AR    R2,R3\n         L     R3,VLRN\n         MH    R3,ERNL\n         ST    R3,SZRN\n         AR    R2,R3\n         L     R3,VLZP\n         MH    R3,EZPL\n         ST    R3,SZZP\n         AR    R2,R3\n         L     R3,VLLK\n         MH    R3,ELKL\n         ST    R3,SZLK\n         AR    R2,R3\n         L     R3,VLUS\n         MH    R3,EUSL\n         ST    R3,SZUS\n         AR    R2,R3\n         L     R3,VLCE\n         MH    R3,ECEL\n         ST    R3,SZCE\n         AR    R2,R3\n         L     R3,VLTW\n         MH    R3,=H'1024'         1024 BYTES = 1K\n         ST    R3,SZTW\n         AR    R2,R3\n         L     R3,VLUW\n         MH    R3,=H'1024'         1024 BYTES = 1K\n         ST    R3,SZUW\n         AR    R2,R3\n         LA    R0,7(R2)\n         SRL   R0,3\n         SLL   R0,3\n         ST    R0,WSIZE\n        GETMAIN RC,LV=(0)\n         LTR   R15,R15\n         BNZ   ERRGTMN\n         ST    R1,WADDR\n         ST    R1,AMDS\n         AL    R1,SZMD\n         ST    R1,AMMS\n         AL    R1,SZMM\n         ST    R1,ARNS\n         AL    R1,SZRN\n         ST    R1,AZPS\n         AL    R1,SZZP\n         ST    R1,ALKS\n         AL    R1,SZLK\n         ST    R1,AUSS\n         AL    R1,SZUS\n         ST    R1,ACES\n         AL    R1,SZCE\n         ST    R1,ATWS\n         AL    R1,SZTW\n         ST    R1,AUWS\n         AL    R1,SZUW\n         ST    R1,ELDA\n         L     R2,WADDR\n         L     R3,WSIZE\n         XR    R5,R5\n         BASR  R4,0\n         MVCL  R2,R4\n         B     INITX\nERRPARM  LA    R15,29(R1)\n         CLR   R15,R2\n         BL    *+L'*+4\n         LR    R15,R2\n         BCTR  R15,0\n         SR    R15,R1\n         EX    R15,PARMMV\nPARMERR WTO    'PARM= ERROR AT :                                ',     X\n               ROUTCDE=11,DESC=7\n         B     QUIT\nPARMMV   MVC   PARMERR+25(*-*),0(R1)    <<EXECUTED>>\nERRGTMN  XR    R0,R0\n         L     R1,WSIZE\n         LA    R14,2*L'WSIZE\n         LA    R15,GTMERR+42\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    GTMERR+42(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    GTMERR+42(8),TRHEX\n         OI    SW2,SWFTR\n         B     INITX\nERRMXLN WTO    'PARM= ERROR ON : LN=.. (VALID RANGE IS 10 TO 99)',     X\n               ROUTCDE=11,DESC=7\n         B     QUIT\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                         S C A N - C H E C K                         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- SCAN ALL DD'S\n         SPACE 1\nSCAN0   EXTRACT    ATIOT,'S',FIELDS=(TIOT)\n         L     R2,ATIOT\n         USING TIODSECT,R2\n         TM    SW2,SWFTR\n         BO    SCAN1\n         L     R3,AMDS\n         USING MDENT,R3\n         L     R4,AMDN\n         XR    R9,R9\nSCAN1    CLC   TIOELNGH(4),=XL4'0'\n         BE    SCAN10\n         TM    SW2,SWFTR\n         BO    SCAN4\n         CLC   TIOEDDNM(L'TTLDD),TTLDD\n         BNE   SCAN2\n         TM    SW1,SWTIT\n         BO    *+L'*+8\n         OI    SW1,SWTIT\n         B     SCAN5\n         MVC   MESC2+5(L'TTLDD),TTLDD\n         LA    R1,MESC2\n         BAS   R9,PERR\n         B     SCAN5\nSCAN2    CLC   TIOEDDNM(L'LMLDD),LMLDD\n         BNE   SCAN3\n         TM    SW1,SWLML\n         BO    *+L'*+8\n         OI    SW1,SWLML\n         B     SCAN5\n         MVC   MESC2+5(L'LMLDD),LMLDD\n         LA    R1,MESC2\n         BAS   R9,PERR\n         B     SCAN5\nSCAN3    CLC   TIOEDDNM(3),LMLDD\n         BNE   SCAN4\n         MVC   MDNME,TIOEDDNM\n         BCT   R4,*+L'*+12\n         LA    R1,MESC1\n         BAS   R9,PERR\n         B     LEAVE\n         AH    R3,EMDL\n         OI    SW1,SWMDD\n         B     SCAN5\nSCAN4    CLC   TIOEDDNM(8),=CL8'SYSPRINT'\n         BNE   SCAN5\n         OI    SW1,SWPRT\nSCAN5    XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     SCAN1\n         DROP  R2,R3\nSCAN10   TM    SW2,SWFTR\n         BZ    SCAN11\n         TM    SW1,SWPRT\n         BO    SCANX\n        WTO    MF=(E,GTMERR)\n         B     ERRPRT\nSCAN11   TM    SW1,SWPRT+SWTIT+SWLML+SWMDD\n         BNO   ERRPRT\n         L     R1,AMDN\n         SR    R1,R4\n         ST    R1,AMDN\n         L     R3,AMDS\n         USING MDENT,R3\n         L     R4,AMDN\n         LR    R5,R3\nCKDD1    LR    R6,R4\nCKDD2    BCT   R6,*+L'*+4\n         B     CKDD3\n         AH    R5,EMDL\n         CLC   MDNME,MDNME-MDENT(R5)\n         BNE   CKDD2\n         MVC   MESC2+5(L'MDNME),MDNME\n         LA    R1,MESC2\n         BAS   R9,PERR\n         B     CKDD2\nCKDD3    BCT   R4,*+L'*+4\n         B     *+L'*+8\n         AH    R3,EMDL\n         B     CKDD1\n         DROP  R3\n         LTR   R9,R9\n         BNZ   LEAVE\n         B     SCANX\nERRPRT   TM    SW1,SWPRT\n         BO    ERRTIT\n         MVC   MESC3+5(8),=CL8'SYSPRINT'\n        WTO    MF=(E,MESC3)\n         OI    SW2,SWERR\n         TM    SW2,SWFTR\n         BO    LEAVE\nERRTIT   TM    SW1,SWTIT\n         BO    ERRLML\n         MVC   MESC3+5(L'TTLDD),TTLDD\n         LA    R1,MESC3\n         BAS   R9,PERR\nERRLML   TM    SW1,SWLML\n         BO    ERRMDD\n         MVC   MESC3+5(L'LMLDD),LMLDD\n         LA    R1,MESC3\n         BAS   R9,PERR\nERRMDD   TM    SW1,SWMDD\n         BO    LEAVE\n         MVC   MESC4+5(3),LMLDD\n         LA    R1,MESC4\n         BAS   R9,PERR\n         B     LEAVE\n         SPACE 1\nMESC1   WTO    'TOO MANY \"LML.....\" DD''S (\"MD\" VALUE OVERFLOW)',      X\n               ROUTCDE=11,DESC=7,MF=L\nMESC2   WTO    '\"        \" / JCL ERROR (DD ENCOUNTERED TWICE)',        X\n               ROUTCDE=11,DESC=7,MF=L\nMESC3   WTO    '\"        \" DD-CARD MISSING',                           X\n               ROUTCDE=11,DESC=7,MF=L\nMESC4   WTO    '\"   .....\" DD-CARD(S) MISSING',                        X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                     I N I T I A L     T R A C E                     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- TRACE WORK-AREAS VALUES IF REQUESTED\n         SPACE 1\nTRCE0    TM    SW2,SWFTR\n         BZ    TRCE1\n         LA    R1,GTMERR\n         BAS   R9,PERR\n         TM    SW1,SWPRT\n         BZ    LEAVE\n         MVI   TRCM0,C'0'\nTRCE1    TM    SW2,SWTAV\n         BZ    TRCE5\n        $PRINT TRCM0\n         LTR   R15,R15\n         BNZ   TRCERR\n        $PRINT TRCM0U\n         LTR   R15,R15\n         BZ    TRCE4\nTRCERR   STC   R15,PERRWT+46\n         OI    PERRWT+46,C'0'\n        WTO    MF=(E,PERRWT)\n         OI    SW2,SWERR\n         B     LEAVE\nTRCE2    LR    R1,R2\n         XR    R0,R0\n         LA    R14,L'TRCM4A\n         LA    R15,TRCM4A\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    TRCM4A,=XL8'0F0F0F0F0F0F0F0F'\n         TR    TRCM4A,TRHEX\n         SR    R3,R2\n         LR    R1,R3\n         XR    R0,R0\n         LA    R14,L'TRCM4B\n         LA    R15,TRCM4B\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    TRCM4B,=XL8'0F0F0F0F0F0F0F0F'\n         TR    TRCM4B,TRHEX\n         MVI   TRCM4C+16,C' '\n         MVC   TRCM4C+17(L'TRCM4C-17),TRCM4C+16\n         CVD   R3,WORKD\n         MVC   TRCM4C(16),=XL16'40202020202020202020202020202120'\n         ED    TRCM4C(16),WORKD\n         LA    R0,15\n         CLI   TRCM4C,C' '\n         BNE   *+L'*+14\n         MVC   TRCM4C(15),TRCM4C+1\n         MVI   TRCM4C+15,C' '\n         BCT   R0,*-18\n         LA    R1,TRCM4C\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         LA    R1,1(R1)\n         B     *-12\n         MVC   1(6,R1),=CL6'BYTES)'\n        $PRINT TRCM4\n         LTR   R15,R15\n         BZR   R9\n         B     TRCERR\nTRCE3    LR    R1,R2\n         XR    R0,R0\n         LA    R14,L'TRCM3A\n         LA    R15,TRCM3A\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    TRCM3A,=XL8'0F0F0F0F0F0F0F0F'\n         TR    TRCM3A,TRHEX\n         CVD   R2,WORKD\n         MVC   TRCM3B(16),=XL16'40202020202020202020202020202120'\n         ED    TRCM3B(16),WORKD\n         LA    R0,15\n         CLI   TRCM3B,C' '\n         BNE   *+L'*+14\n         MVC   TRCM3B(15),TRCM3B+1\n         MVI   TRCM3B+15,C' '\n         BCT   R0,*-18\n         LA    R1,TRCM3B\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         LA    R1,1(R1)\n         B     *-12\n         MVC   1(6,R1),=CL6'BYTES)'\n        $PRINT TRCM3\n         LTR   R15,R15\n         BZR   R9\n         B     TRCERR\nTRCE4    L     R0,VLLN\n         CVD   R0,WORKD\n         MVC   TRCM1V,=XL6'402020202120'\n         ED    TRCM1V,WORKD+L'WORKD-3\n        $PRINT TRCM1\n         LTR   R15,R15\n         BNZ   TRCERR\n         L     R0,VLMD\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'MD'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(19),=CL19'LOAD LIBRARY''S DD''S'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EMDL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AMDS,AMDS\n         MVC   AMDE,SZMD\n         L     R2,AMDS\n         L     R3,AMDE\n         BAS   R9,TRCE2\n         L     R0,VLMM\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'MM'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(17),=CL17'DIRECTORIES NAMES'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EMML\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AMMS,AMMS\n         MVC   AMME,SZMM\n         L     R2,AMMS\n         L     R3,AMME\n         BAS   R9,TRCE2\n         L     R0,VLRN\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'RN'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(18),=CL18'REFERENCE ELEMENTS'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,ERNL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    ARNS,ARNS\n         MVC   ARNE,SZRN\n         L     R2,ARNS\n         L     R3,ARNE\n         BAS   R9,TRCE2\n         L     R0,VLZP\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'ZP'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(14),=CL14'HMASPZAP IDR''S'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EZPL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AZPS,AZPS\n         MVC   AZPE,SZZP\n         L     R2,AZPS\n         L     R3,AZPE\n         BAS   R9,TRCE2\n         L     R0,VLLK\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'LK'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(20),=CL20'LINKAGE EDITOR IDR''S'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,ELKL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    ALKS,ALKS\n         MVC   ALKE,SZLK\n         L     R2,ALKS\n         L     R3,ALKE\n         BAS   R9,TRCE2\n         L     R0,VLUS\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'US'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(21),=CL21'USER (IDENTIFY) IDR''S'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,EUSL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AUSS,AUSS\n         MVC   AUSE,SZUS\n         L     R2,AUSS\n         L     R3,AUSE\n         BAS   R9,TRCE2\n         L     R0,VLCE\n         CVD   R0,WORKD\n         MVC   TRCM2V,=XL6'402020202120'\n         ED    TRCM2V,WORKD+L'WORKD-3\n         MVC   TRCM2I,=CL2'CE'\n         MVC   TRCM2N(L'TRCM2N),TRCM2N-1\n         MVC   TRCM2N(14),=CL14'\"CESD\" SYMBOLS'\n        $PRINT TRCM2\n         LTR   R15,R15\n         BNZ   TRCERR\n         LH    R2,ECEL\n         BAS   R9,TRCE3\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    ACES,ACES\n         MVC   ACEE,SZCE\n         L     R2,ACES\n         L     R3,ACEE\n         BAS   R9,TRCE2\n         L     R0,VLTW\n         CVD   R0,WORKD\n         MVC   TRCM5V,=XL6'402020202120'\n         ED    TRCM5V,WORKD+L'WORKD-3\n         MVC   TRCM5I,=CL2'TW'\n        $PRINT TRCM5\n         LTR   R15,R15\n         BNZ   TRCERR\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    ATWS,ATWS\n         MVC   ATWE,SZTW\n         L     R2,ATWS\n         L     R3,ATWE\n         BAS   R9,TRCE2\n         L     R0,VLUW\n         CVD   R0,WORKD\n         MVC   TRCM6V,=XL6'402020202120'\n         ED    TRCM6V,WORKD+L'WORKD-3\n         MVC   TRCM6I,=CL2'UW'\n        $PRINT TRCM6\n         LTR   R15,R15\n         BNZ   TRCERR\n         TM    SW2,SWFTR\n         BZ    *+L'*+12\n         XC    AUWS,AUWS\n         MVC   AUWE,SZUW\n         L     R2,AUWS\n         L     R3,AUWE\n         BAS   R9,TRCE2\n         L     R2,WADDR\n         L     R3,WSIZE\n         AR    R3,R2\n         MVI   TRCM4,C'0'\n         MVC   TRCM4+6(12),=CL12'===> TOTAL -'\n         BAS   R9,TRCE2\nTRCE5    TM    SW2,SWFTR\n         BO    LEAVE\n         B     TRCEX\n         SPACE 1\n         DC    AL1(TRCM0L)\nTRCM0    DC    C'1 CURRENT VALUE OF PARAMETERS AND '\n         DC    C'WORK-AREAS SPACE :'\nTRCM0L   EQU   *-TRCM0\n         DC    AL1(TRCM0UL)\nTRCM0U   DC    C'+ ________________________________'\n         DC    C'__________________'\nTRCM0UL  EQU   *-TRCM0U\n         DC    AL1(TRCM1L)\nTRCM1    DC    CL10'0     LN :'\nTRCM1V   DC    CL6' ',C' - LINES PER PAGE'\nTRCM1L   EQU   *-TRCM1\n         DC    AL1(TRCM2L)\nTRCM2    DC    CL6'0 '\nTRCM2I   DC    CL2'  ',CL2' :'\nTRCM2V   DC    CL6' ',C' - MAXIMUM NUMBER OF '\nTRCM2N   DC    CL25' '\nTRCM2L   EQU   *-TRCM2\n         DC    AL1(TRCM3L)\nTRCM3    DC    CL19' ',C'ELEMENT LENGTH : '\nTRCM3A   DC    CL8' ',C' ('\nTRCM3B   DC    CL24' '\nTRCM3L   EQU   *-TRCM3\n         DC    AL1(TRCM4L)\nTRCM4    DC    CL19' ',C'AREA ADDRESS : '\nTRCM4A   DC    CL8' ',C' LENGTH : '\nTRCM4B   DC    CL8' ',C' ('\nTRCM4C   DC    CL24' '\nTRCM4L   EQU   *-TRCM4\n         DC    AL1(TRCM5L)\nTRCM5    DC    CL6'0 '\nTRCM5I   DC    CL2'  ',CL2' :'\nTRCM5V   DC    CL6' ',C' - MAXIMUM NUMBER OF K FOR THE'\n         DC    C' TRANSLATOR IDR''S WORK BUFFER'\nTRCM5L   EQU   *-TRCM5\n         DC    AL1(TRCM6L)\nTRCM6    DC    CL6'0 '\nTRCM6I   DC    CL2'  ',CL2' :'\nTRCM6V   DC    CL6' ',C' - MAXIMUM NUMBER OF K FOR THE'\n         DC    C' USER (IDENTIFY) IDR''S WORK BUFFER'\nTRCM6L   EQU   *-TRCM6\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*            G E T     D I R E C T O R I E S     N A M E S            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- FIRST GET TODAY'S DATE\n         SPACE 1\nGMMN0   $GFDATE ,,WORKD            TODAY DATE\n         LTR   R15,R15\n         BZ    GFDT1\n         STC   R15,MEGFD+42\n         OI    MEGFD+42,C'0'\n         LA    R1,MEGFD\n         BAS   R9,PERR\n         B     LEAVE\nGFDT1    MVC   COVDATE(2),WORKD+2\n         MVI   COVDATE+2,C'/'\n         MVC   COVDATE+3(2),WORKD\n         MVI   COVDATE+5,C'/'\n         MVC   COVDATE+6(4),WORKD+4\n         MVC   IXT1D,COVDATE\n         MVC   MRT1D,COVDATE\n         MVC   NRT1D,COVDATE\n         SPACE 1\n*------- GET DIRECTORIES NAMES\n         SPACE 1\n         L     R4,AMMS\n         USING MMENT,R4\n         L     R5,AMDS\n         L     R6,AMDN\n         USING MDENT,R5\nGMMN1    LA    R3,MDNME\n         LA    R2,MDDSN\n        $PDOPEN (R2),(R3)\n         LTR   R15,R15\n         BNZ   *+L'*+8\n         ST    R4,MDMMS\n         B     GMMN3\n         STC   R15,MEGM2+42\n         OI    MEGM2+42,C'0'\n         MVC   MEGM2+5(L'MDNME),MDNME\n         LA    R1,MEGM2\n         BAS   R9,PERR\n         B     LEAVE\nGMMN2    STC   R15,MEGM3+42\n         OI    MEGM3+42,C'0'\n         MVC   MEGM3+4(L'MDNME),MDNME\n         LA    R1,MEGM3\n         BAS   R9,PERR\n         B     GMMN10\nGMMN3   $PDREAD WLNE,(R3)\n         LTR   R15,R15\n         BP    GMMN2\n         BM    GMMN10\n         LA    R1,WLNE\n         USING PDS2,R1\n         IC    R0,PDS2INDC\n         SLL   R0,27\n         SRL   R0,27\n         CL    R0,=F'11'\n         BL    GMMN3               NOT LINK-EDITED\n         CL    R4,AMME\n         BL    *+L'*+12\n         LA    R1,MEGM1\n         BAS   R9,PERR\n         B     GMMN10\n         MVC   MMNME,PDS2NAME\n         MVC   MMTTR,PDS2TTRP\n         MVC   MMEPA,PDS2EPA\n         TM    PDS2INDC,PDS2ALIS\n         BO    GMMN4\n         MVI   MMTYP,MMMO\n         MVC   MMONM,=CL8' '\n         B     GMMN5\nGMMN4    MVI   MMTYP,MMAL\n         TM    PDS2ATR1,PDS2SCTR\n         BO    *+L'*+4\n         SH    R1,=Y(PDSS01LN)\n         MVC   MMONM,PDS2MNM\n         DROP  R1\nGMMN5    ST    R4,MDMME\n         AH    R4,EMML\n         B     GMMN3\nGMMN10  $PDCLOSE (R3)\n         LTR   R15,R15\n         BZ    GMMN11\n         STC   R15,MEGM4+44\n         OI    MEGM4+44,C'0'\n         MVC   MEGM4+5(L'MDNME),MDNME\n         LA    R1,MEGM4\n         BAS   R9,PERR\n         B     LEAVE\nGMMN11   TM    SW2,SWERR\n         BO    LEAVE\n         L     R3,MDMME\n         AH    R3,EMML\n         SL    R3,MDMMS\n         XR    R2,R2\n         XC    WORKD,WORKD\n         MVC   WORKD+4-L'EMML(L'EMML),EMML\n         D     R2,WORKD\n         L     R2,MDMMS\n        $SORT  (R2),(R3),MMLGTH,0,L'MMTTR+L'MMTYP\n         BCT   R6,*+L'*+4\n         B     GMMNX\n         AH    R5,EMDL\n         CL    R4,AMME\n         BL    *+L'*+12\n         LA    R1,MEGM1\n         BAS   R9,PERR\n         B     LEAVE\n         AH    R4,EMML\n         B     GMMN1\n         DROP  R4,R5\n         SPACE 1\nMEGFD   WTO    'TODAY DATE OBTAIN ERROR ($GFDATE RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\nMEGM1   WTO    'TOO MANY DIRECTORIES NAMES (\"MM\" VALUE OVERFLOW)',     X\n               ROUTCDE=11,DESC=7,MF=L\nMEGM2   WTO    '\"        \" / OPEN ERROR ($PDOPEN RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\nMEGM3   WTO    '\"        \" / READ ERROR ($PDREAD RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\nMEGM4   WTO    '\"        \" / CLOSE ERROR ($PDCLOSE RC =  )',           X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                S C A N     L O A D     M O D U L E S                *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- SCAN LOAD MODULES\n         SPACE 1\nSCLM0    L     R5,ARNS\n         SH    R5,ERNL\n         USING RNENT,R5\n         L     R7,AMDS\n         USING MDENT,R7\n         L     R8,AMDN\nSCLM1    AH    R5,ERNL\n         CL    R5,ARNE\n         BL    *+L'*+12\n         LA    R1,MELM1\n         BAS   R9,PERR\n         B     LEAVE\n         ST    R5,MDRNS\n         L     R6,MDMMS\n         USING MMENT,R6\n         MVC   DDNME,MDNME\n        $PLOPEN DDNME\n         LTR   R15,R15\n         BZ    SCLM2\n         STC   R15,MELM2+41\n         OI    MELM2+41,C'0'\n         MVC   MELM2+5(L'DDNME),DDNME\n         LA    R1,MELM2\n         BAS   R9,PERR\n         B     LEAVE\nSCLM2    MVC   CURTTR,MMTTR\n        $PLPOINT CURTTR,DDNME\n         LTR   R15,R15\n         BZ    SCLM3\n         STC   R15,MELM3+55\n         OI    MELM3+55,C'0'\n         MVC   MELM3+24(L'MMNME),MMNME\n         MVC   MELM3+5(L'DDNME),DDNME\n         LA    R1,MELM3\n         BAS   R9,PERR\n         B     SCLM90\nSCLM3    ST    R6,CHKMA\n         L     R2,ACES\n         L     R3,SZCE\n         XR    R15,R15\n         BASR  R14,0\n         MVCL  R2,R14\n         L     R2,ATWS\n         L     R3,SZTW\n         XR    R15,R15\n         BASR  R14,0\n         MVCL  R2,R14\n         L     R2,AUWS\n         L     R3,SZUW\n         XR    R15,R15\n         BASR  R14,0\n         MVCL  R2,R14\n         XC    CURCE,CURCE\n         XC    CURTW,CURTW\n         XC    CURUW,CURUW\n         MVC   MODNME,MMNME\n         NI    SW3,255-SWLST\n         LR    R4,R5\nSCLM4    MVC   RNNME,MMNME\n         MVC   RNMNM,MODNME\n         MVC   RNTYP,MMTYP\n         MVC   RNEPA,MMEPA\n         STCM  R7,B'1111',RNAMD\n         ST    R5,MDRNE\n         ST    R6,CHKMA+4\n         AH    R6,EMML\n         CL    R6,MDMME\n         BH    SCLM10\n         CLC   CURTTR,MMTTR\n         BNE   SCLM10\n         AH    R5,ERNL\n         CL    R5,ARNE\n         BL    SCLM4\nSCLM5    LA    R1,MELM1\n         BAS   R9,PERR\n         B     SCLM80\nSCLM10   XC    WORKD,WORKD\n         TM    SW3,SWLST\n         BO    SCLM40              LAST IDR PROCESSED, SO END\n        $PLREAD WORKD,DDNME\n         LTR   R15,R15\n         BZ    SCLM11\n         BM    SCLM40\n         STC   R15,MELM4+53\n         OI    MELM4+53,C'0'\n         MVC   MELM4+23(L'MODNME),MODNME\n         MVC   MELM4+5(L'DDNME),DDNME\n         LA    R1,MELM4\n         BAS   R9,PERR\n         B     SCLM90\nSCLM11   LM    R2,R3,WORKD\n         LTR   R3,R3\n         BNP   SCLM10\n         TM    0(R2),X'01'\n         BO    SCLM40              JUST BEFORE TEXT, SO END\n         USING CESDR,R2\n         CLI   ESDI,ESDIV\n         BNE   SCLM30              NOT CESD RECORD\n         ALR   R3,R2               POINT TO END+1 OF RECORD\n         LH    R0,ESDCN            GET LENGTH OF ESD DATA\n         LA    R2,ESDDT            POINT TO ESD DATA\n         DROP  R2\n         AR    R0,R2               POINT TO END+1 OF RECORD\n         CLR   R0,R3\n         BE    SCLM20              CHECK IS OK\n         MVC   MELM5+35(3),=CL3'ESD'\nSCLM12   MVC   MELM5+23(L'MODNME),MODNME\n         MVC   MELM5+5(L'DDNME),DDNME\n         LA    R1,MELM5\n         BAS   R9,PERR\n         B     SCLM90\n         USING CESDD,R2\nSCLM20   CLR   R3,R2\n         BNH   SCLM10              END, NEXT RECORD\n         MVC   CKCODE,ESDDTY\n         NI    CKCODE,X'0F'\n         CLI   CKCODE,ESDDTSD\n         BE    *+L'*+8             SECTION DEFINITION (SD)\n         CLI   CKCODE,ESDDTLR\n         BNE   SCLM24\n         LR    R1,R4               LABEL REFERENCE (LR)\nSCLM21   CLC   RNNME-RNENT(L'RNNME,R1),ESDDNM\n         BNE   *+L'*+10\n         CLC   RNEPA-RNENT(L'RNEPA,R1),ESDDAA\n         BE    SCLM22              FOUND\n         CLR   R1,R5\n         BE    SCLM23              NOT FOUND\n         AH    R1,ERNL\n         B     SCLM21\nSCLM22   L     R14,CHKMA           MODULE OR ALIAS IS ENTRY\n         CLC   MMNME-MMENT(L'MMNME,R14),RNNME-RNENT(R1)\n         BE    *+L'*+16\n         CL    R14,CHKMA+4\n         BNL   SCLM29\n         AH    R14,EMML\n         B     *-22\n         OI    MMFLG-MMENT(R14),MMFEP\n         B     SCLM29\nSCLM23   AH    R5,ERNL             ADD ENTRY POINT\n         CL    R5,ARNE\n         BNL   SCLM5\n         MVI   RNTYP,RNEP\n         MVC   RNEPA(L'RNEPA),ESDDAA\n         B     SCLM25\nSCLM24   CLI   CKCODE,ESDDTER\n         BNE   SCLM26\n         AH    R5,ERNL             EXTERNAL REFERENCE (ER)\n         CL    R5,ARNE\n         BNL   SCLM5\n         MVI   RNTYP,RNEX\nSCLM25   MVC   RNNME(L'RNNME),ESDDNM\n         MVC   RNMNM,MODNME\n         STCM  R7,B'1111',RNAMD\n         ST    R5,MDRNE\n         B     SCLM29\nSCLM26   CLI   CKCODE,ESDDTPC\n         BE    SCLM28\n         CLI   CKCODE,ESDDTCM\n         BE    SCLM29\n         CLI   CKCODE,ESDDTPR\n         BE    SCLM29\n         CLI   CKCODE,ESDDTNL\n         BE    SCLM29\n         CLI   CKCODE,ESDDTWX\n         BE    SCLM29\n         MVC   MELM8+16(4),=CL4'CESD'\nSCLM27   IC    R1,CKCODE\n         STC   R1,MELM8+30\n         SRL   R1,4\n         STC   R1,MELM8+29\n         NC    MELM8+29(2),=XL2'0F0F'\n         TR    MELM8+29(2),TRHEX\n         LA    R1,MELM8\n         BAS   R9,PERR\n         B     SCLM80\nSCLM28   L     R14,CHKMA\n         TM    MMFLG-MMENT(R14),MMFEP\n         BO    SCLM29\n         CLC   ESDDAA,MMEPA-MMENT(R14)\n         BNE   SCLM29\n         OI    MMFLG-MMENT(R14),MMFPV\nSCLM29   ICM   R1,B'1111',CURCE    ADD CESD SYMBOL IN TABLE\n         BNZ   *+L'*+8\n         L     R1,ACES\n         B     *+L'*+4\n         AH    R1,ECEL\n         CL    R1,ACEE\n         BL    *+L'*+12\n         LA    R1,MELM7\n         BAS   R9,PERR\n         B     SCLM80\n         USING CEENT,R1\n         MVC   CESYM,ESDDNM\n         DROP  R1\n         ST    R1,CURCE\n         CL    R1,CCEPTR\n         BNH   *+L'*+4\n         ST    R1,CCEPTR\n         LA    R2,CESDDL(R2)       NEXT ESD\n         B     SCLM20\n         DROP  R2\n         USING CIDR,R2\nSCLM30   CLI   IDRI,IDRIV\n         BNE   SCLM10              NOT CIDR RECORD\n         ALR   R3,R2               POINT TO END+1 OF RECORD\n         XR    R1,R1\n         IC    R1,IDRCN            GET LENGTH OF IDR DATA\n         LA    R0,IDRCN(R1)        POINT TO END+1 OF RECORD\n         CLR   R0,R3\n         BE    *+L'*+10            CHECK IS OK\n         MVC   MELM5+35(3),=CL3'IDR'\n         B     SCLM12\n         MVC   CKCODE,IDRSI\n         LA    R2,IDRDT            POINT TO IDR DATA\n         DROP  R2\n         TM    CKCODE,IDRLST\n         BZ    *+L'*+4\n         OI    SW3,SWLST\n         NI    CKCODE,255-IDRLST\n         CLI   CKCODE,IDRHZP\n         BE    SCLM31              HMASPZAP DATA\n         CLI   CKCODE,IDRLKE\n         BE    SCLM33              LINKAGE EDITOR DATA\n         CLI   CKCODE,IDRTRS\n         BE    SCLM34              TRANSLATOR DATA\n         CLI   CKCODE,IDRUSR\n         BE    SCLM35              USER (IDENTIFY) DATA\n         MVC   MELM8+16(4),=CL4'CIDR'\n         B     SCLM27\n         USING HZPD,R2\nSCLM31   MVC   CKCODE,HZPFC        FLAGS AND COUNT\n         DROP  R2\n         NI    CKCODE,X'3F'        ISOLATE COUNT\n         LA    R2,L'HZPFC(R2)      POINT TO 1ST ENTRY\n         XR    R15,R15\n         IC    R15,CKCODE\n         LTR   R15,R15\n         BNP   SCLM10              NONE OR END, NEXT RECORD\n         USING HZPDE,R2\nSCLM32   XR    R14,R14\n         ICM   R14,B'0011',HZPES   ESDID\n         BZ    *+L'*+26\n         BCT   R14,*+L'*+4\n         B     *+L'*+4\n         MH    R14,ECEL\n         L     R1,ACES\n         ALR   R1,R14\n         CL    R1,CURCE\n         BNH   *+L'*+28\n         UNPK  MELM10+19(5),HZPES(L'HZPES+1)\n         TR    MELM10+19(4),TRHEX-C'0'\n         MVI   MELM10+23,C')'\n         LA    R1,MELM10\n         BAS   R9,PERR\n         B     SCLM80\n         USING CEENT,R1\n         ICM   R14,B'1111',CZPPTR\n         BNZ   *+L'*+8\n         L     R14,AZPS\n         B     *+L'*+4\n         AH    R14,EZPL\n         CL    R14,AZPE\n         BL    *+L'*+12\n         LA    R1,MELM9\n         BAS   R9,PERR\n         B     SCLM80\n         USING ZPENT,R14\n         MVI   ZPETY,ZPEID\n         MVC   ZPNME,CESYM\n         MVC   ZPDTE,HZPDT\n         MVC   ZPDTA,HZPDH\n         DROP  R1,R14\n         ST    R14,CZPPTR\n         L     R1,CHKMA\n         LA    R1,MMCHA-MMENT(R1)\n         L     R0,0(R1)\n         LTR   R0,R0\n         BZ    *+L'*+6\n         LR    R1,R0\n         B     *-12\n         ST    R14,0(R1)\n         BCT   R15,*+L'*+4\n         B     SCLM10              END, NEXT RECORD\n         LA    R2,HZPDEL(R2)\n         CLR   R3,R2\n         BH    SCLM32\n         LA    R1,MELM11\n         BAS   R9,PERR\n         B     SCLM80\n         DROP  R2\n         USING LKED,R2\nSCLM33   ICM   R14,B'1111',CLKPTR\n         BNZ   *+L'*+8\n         L     R14,ALKS\n         B     *+L'*+4\n         AH    R14,ELKL\n         CL    R14,ALKE\n         BL    *+L'*+12\n         LA    R1,MELM12\n         BAS   R9,PERR\n         B     SCLM80\n         USING LKENT,R14\n         MVI   LKETY,LKEID\n         MVC   LKDTE,LKEDT\n         DROP  R14\n         ST    R14,CLKPTR\n         L     R1,CHKMA\n         LA    R1,MMCHA-MMENT(R1)\n         L     R0,0(R1)\n         LTR   R0,R0\n         BZ    *+L'*+6\n         LR    R1,R0\n         B     *-12\n         ST    R14,0(R1)\n         B     SCLM10              END, NEXT RECORD\n         DROP  R2\n         USING TRSD,R2\nSCLM34   SH    R1,=Y(L'IDRCN+L'IDRSI)\n         BNP   SCLM10              NONE, NEXT RECORD\n         ICM   R14,B'1111',CURTW\n         BNZ   *+L'*+4\n         L     R14,ATWS\n         LA    R15,0(R14,R1)\n         CL    R15,ATWE\n         BL    *+L'*+12\n         LA    R1,MELM15\n         BAS   R9,PERR\n         B     SCLM80\n         BCT   R1,*+L'*+6\n         MVC   0(*-*,R14),TRSDES   <<EXECUTED>>\n         EX    R1,*-6\n         ST    R15,CURTW\n         CL    R15,CTWPTR\n         BNH   SCLM10              END, NEXT RECORD\n         ST    R15,CTWPTR\n         B     SCLM10              END, NEXT RECORD\n         DROP  R2\n         USING USRD,R2\nSCLM35   SH    R1,=Y(L'IDRCN+L'IDRSI)\n         BNP   SCLM10              NONE, NEXT RECORD\n         ICM   R14,B'1111',CURUW\n         BNZ   *+L'*+4\n         L     R14,AUWS\n         LA    R15,0(R14,R1)\n         CL    R15,AUWE\n         BL    *+L'*+12\n         LA    R1,MELM16\n         BAS   R9,PERR\n         B     SCLM80\n         BCT   R1,*+L'*+6\n         MVC   0(*-*,R14),USRES    <<EXECUTED>>\n         EX    R1,*-6\n         ST    R15,CURUW\n         CL    R15,CUWPTR\n         BNH   SCLM10              END, NEXT RECORD\n         ST    R15,CUWPTR\n         B     SCLM10              END, NEXT RECORD\n         DROP  R2\nSCLM40   ICM   R3,B'1111',CURTW\n         BZ    SCLM50\n         L     R2,ATWS             PROCESS TRANSLATOR IDR'S\n         USING TRSD,R2\nSCLM41   LR    R1,R2\n         TM    TRSDES,TRSLST\n         LA    R2,L'TRSDES(R2)\n         BO    *+L'*+10\n         CLR   R2,R3\n         BL    *-14\n         B     SCLM44              BUFFER SHORTAGE\n         DROP  R2\n         CLR   R2,R3\n         BNL   SCLM44              BUFFER SHORTAGE\n         LA    R0,TRSDSL(R2)\n         CLR   R0,R3\n         BH    SCLM44              BUFFER SHORTAGE\n         USING TRSD,R1\n         USING TRSDS,R2\nSCLM42   MVC   WORKD(L'TRSDES),TRSDES ESDID\n         NI    WORKD,255-TRSLST\n         XR    R14,R14\n         ICM   R14,B'0011',WORKD\n         BZ    *+L'*+26\n         BCT   R14,*+L'*+4\n         B     *+L'*+4\n         MH    R14,ECEL\n         L     R15,ACES\n         ALR   R15,R14\n         CL    R15,CURCE\n         BNH   *+L'*+28\n         UNPK  MELM17+19(5),TRSDES(L'TRSDES+1)\n         TR    MELM17+19(4),TRHEX-C'0'\n         MVI   MELM17+23,C')'\n         LA    R1,MELM17\n         BAS   R9,PERR\n         B     SCLM80\n         USING CEENT,R15\n         CLC   CESYM,=CL8' '\n         BE    SCLM43\n         CLC   CESYM,=XL8'0'\n         BE    SCLM43\n         LR    R14,R4\n         USING RNENT,R14\n         CLC   RNNME,CESYM\n         BE    *+L'*+14\n         CLR   R14,R5\n         BE    SCLM45              NOT FOUND\n         AH    R14,ERNL\n         B     *-20\n         MVC   RNEDT,TRSDSDT\n         DROP  R14,R15\nSCLM43   TM    TRSDES,TRSLST\n         BO    *+L'*+8\n         LA    R1,L'TRSDES(R1)\n         B     SCLM42\n         DROP  R1\n         TM    TRSDSID,TRSDSTT\n         BZ    *+L'*+4\n         LA    R2,TRSDSL-L'TRSDSID(R2)\n         LA    R2,TRSDSL(R2)\n         CLR   R2,R3\n         BL    SCLM41\n         BE    SCLM50\n         DROP  R2\nSCLM44   LA    R1,MELM18           BUFFER SHORTAGE\n         BAS   R9,PERR\n         B     SCLM80\n         USING CEENT,R15\nSCLM45   MVC   MELM19+33(L'CESYM),CESYM\n         DROP  R15\n         LA    R1,MELM19+L'CESYM+32\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(11,R1),=CL11'\" NOT FOUND'\n         LA    R1,MELM19\n         BAS   R9,PERR\n         B     SCLM80\nSCLM50   OC    CURUW,CURUW\n         BZ    SCLM60\n         L     R3,CHKMA            PROCESS USER (IDENTIFY) IDR'S\n         LA    R3,MMCHA-MMENT(R3)\n         L     R0,0(R3)            SEARCH CHAIN ANCHOR\n         LTR   R0,R0\n         BZ    *+L'*+6\n         LR    R3,R0\n         B     *-12\n         L     R2,AUWS\n         USING USRD,R2\nSCLM51   LA    R0,USRDF\n         CL    R0,CURUW\n         BNL   SCLM54              BUFFER SHORTAGE\n         XR    R14,R14\n         ICM   R14,B'0011',USRES   ESDID\n         BZ    *+L'*+26\n         BCT   R14,*+L'*+4\n         B     *+L'*+4\n         MH    R14,ECEL\n         L     R1,ACES\n         ALR   R1,R14\n         CL    R1,CURCE\n         BNH   *+L'*+28\n         UNPK  MELM13+19(5),USRES(L'USRES+1)\n         TR    MELM13+19(4),TRHEX-C'0'\n         MVI   MELM13+23,C')'\n         LA    R1,MELM13\n         BAS   R9,PERR\n         B     SCLM80\n         USING CEENT,R1\n         CLC   CESYM,=CL8' '\n         BE    *+L'*+10\n         CLC   CESYM,=XL8'0'\n         BNE   SCLM53\n         CLI   USRCN,L'USDTA\n         BNH   *+L'*+28\nSCLM52   UNPK  MELM20+13(5),USRES(L'USRES+1)\n         TR    MELM20+13(4),TRHEX-C'0'\n         MVI   MELM20+17,C' '\n         LA    R1,MELM13\n         BAS   R9,PERR\n         B     SCLM80\n         XR    R15,R15\n         IC    R15,USRCN\n         LTR   R15,R15\n         BNP   SCLM52\n         LA    R2,USRDF(R15)\n         B     SCLM55\nSCLM53   ICM   R14,B'1111',CUSPTR\n         BNZ   *+L'*+8\n         L     R14,AUSS\n         B     *+L'*+4\n         AH    R14,EUSL\n         CL    R14,AUSE\n         BL    *+L'*+12\n         LA    R1,MELM14\n         BAS   R9,PERR\n         B     SCLM80\n         USING USENT,R14\n         MVI   USETY,USEID\n         MVC   USNME,CESYM\n         MVC   USDTE,USRDT\n         CLI   USRCN,L'USDTA\n         BH    SCLM52\n         XR    R15,R15\n         IC    R15,USRCN\n         STC   R15,USDTL\n         LTR   R15,R15\n         BNP   SCLM52\n         LA    R0,USRDF(R15)\n         CL    R0,CURUW\n         BNH   *+L'*+12\nSCLM54   LA    R1,MELM21           BUFFER SHORTAGE\n         BAS   R9,PERR\n         B     SCLM80\n         BCT   R15,*+L'*+6\n         MVC   USDTA(*-*),USRDF    <<EXECUTED>>\n         EX    R15,*-6\n         DROP  R1,R14\n         ST    R14,CUSPTR\n         ST    R14,0(R3)           SET CHAINING\n         LR    R3,R14\n         LA    R2,USRDF+1(R15)\nSCLM55   CL    R2,CURUW\n         BL    SCLM51\n         DROP  R2\nSCLM60   CL    R6,MDMME\n         BH    SCLM61\n         AH    R5,ERNL\n         CL    R5,ARNE\n         BL    SCLM2\n         B     SCLM5\nSCLM61   L     R3,MDRNE\n         AH    R3,ERNL\n         SL    R3,MDRNS\n         XR    R2,R2\n         XC    WORKD,WORKD\n         MVC   WORKD+4-L'ERNL(L'ERNL),ERNL\n         D     R2,WORKD\n         L     R2,MDRNS\n        $SORT  (R2),(R3),RNLGTH,0,L'RNMNM+L'RNTYP+L'RNNME\n         B     SCLM90\nSCLM80   MVC   MELM0+39(L'MODNME),MODNME\n         MVC   MELM0+14(L'DDNME),DDNME\n         LA    R1,MELM0\n         BAS   R9,PERR\nSCLM90  $PLCLOSE DDNME\n         LTR   R15,R15\n         BZ    SCLM91\n         STC   R15,MELM6+43\n         OI    MELM6+43,C'0'\n         MVC   MELM6+5(L'DDNME),DDNME\n         LA    R1,MELM6\n         BAS   R9,PERR\n         B     LEAVE\nSCLM91   TM    SW2,SWERR\n         BO    LEAVE\n         AH    R7,EMDL\n         BCT   R8,SCLM1\n         ST    R5,CRNPTR\n         B     SCLMX\n         DROP  R5,R6,R7\n         SPACE 1\nMELM0   WTO    'DD-NAME :          / READ MODULE :          ',         X\n               ROUTCDE=11,DESC=7,MF=L\nMELM1   WTO    'TOO MANY REFERENCES NAMES (\"RN\" VALUE OVERFLOW)',      X\n               ROUTCDE=11,DESC=7,MF=L\nMELM2   WTO    '\"        \" / OPEN ERROR ($PLOPEN RC =  )',             X\n               ROUTCDE=11,DESC=7,MF=L\nMELM3   WTO    '\"        \" / POINT \"        \" ERROR ($PLPOINT RC =  )',X\n               ROUTCDE=11,DESC=7,MF=L\nMELM4   WTO    '\"        \" / READ \"        \" ERROR ($PLREAD RC =  )',  X\n               ROUTCDE=11,DESC=7,MF=L\nMELM5   WTO    '\"        \" / READ \"        \" /     WRONG LENGTH',      X\n               ROUTCDE=11,DESC=7,MF=L\nMELM6   WTO    '\"        \" / CLOSE ERROR ($PLCLOSE RC =  )',           X\n               ROUTCDE=11,DESC=7,MF=L\nMELM7   WTO    'TOO MANY \"CESD\" SYMBOLS (\"CE\" VALUE OVERFLOW)',        X\n               ROUTCDE=11,DESC=7,MF=L\nMELM8   WTO    'UNEXPECTED \"    \" TYPE :    (NOT HANDLED BY PROGRAM)', X\n               ROUTCDE=11,DESC=7,MF=L\nMELM9   WTO    'TOO MANY HMASPZAP IDR''S (\"ZP\" VALUE OVERFLOW)',       X\n               ROUTCDE=11,DESC=7,MF=L\nMELM10  WTO    'INVALID ESDID (      IN HMASPZAP IDR ENTRY',           X\n               ROUTCDE=11,DESC=7,MF=L\nMELM11  WTO    'HMASPZAP IDR NUMBER OF ENTRIES EXCEED RECORD SIZE',    X\n               ROUTCDE=11,DESC=7,MF=L\nMELM12  WTO    'TOO MANY LINKAGE IDR''S (\"LK\" VALUE OVERFLOW)',        X\n               ROUTCDE=11,DESC=7,MF=L\nMELM13  WTO    'INVALID ESDID (      IN USER (IDENTIFY) IDR ENTRY',    X\n               ROUTCDE=11,DESC=7,MF=L\nMELM14  WTO    'TOO MANY USER (IDENTIFY) IDR''S (\"US\" VALUE OVERFLOW)',X\n               ROUTCDE=11,DESC=7,MF=L\nMELM15  WTO    'TRANSLATOR IDR''S WORK BUFFER TOO SHORT (\"TW\" VALUE OVEX\n               RFLOW)',ROUTCDE=11,DESC=7,MF=L\nMELM16  WTO    'USER (IDENTIFY) IDR''S WORK BUFFER TOO SHORT (\"UW\" VALUX\n               E OVERFLOW)',ROUTCDE=11,DESC=7,MF=L\nMELM17  WTO    'INVALID ESDID (      IN TRANSLATOR IDR ENTRY',         X\n               ROUTCDE=11,DESC=7,MF=L\nMELM18  WTO    'TRANSLATOR IDR''S WORK BUFFER DATA SHORTAGE',          X\n               ROUTCDE=11,DESC=7,MF=L\nMELM19  WTO    'TRANSLATOR IDR''S ESDID NAME \"                    ',   X\n               ROUTCDE=11,DESC=7,MF=L\nMELM20  WTO    'AT ESDID      WRONG LENGTH FOR USER (IDENTIFY) DATA FIEX\n               LD',ROUTCDE=11,DESC=7,MF=L\nMELM21  WTO    'USER (IDENTIFY) IDR''S WORK BUFFER DATA SHORTAGE',     X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*         P R I N T     M O D U L E S     R E F E R E N C E S         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- PRINT COVER (TITLE'S) PAGES\n         SPACE 1\nPRMR0    L     R3,VLLN\n         LA    R1,2\n         SR    R3,R1\n         XR    R2,R2\n         LA    R1,3\n         DR    R2,R1\n         AR    R2,R3\n         BCTR  R3,0\n         LA    R4,2                PRINT TWICE THE COVER PAGE\nTTLP1   $PRINT COV1,,TTLDD\n         LTR   R15,R15\n         BZ    *+L'*+10\nTTLPERR  MVC   MERR1+5(L'TTLDD),TTLDD\n         B     LSTERR\n        $PRINT COV2,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         LR    R5,R3\nTTLP2   $PRINT COV5,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         BCT   R5,TTLP2\n        $PRINT COV3,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         LR    R5,R2\nTTLP3   $PRINT COV5,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         BCT   R5,TTLP3\n        $PRINT COV4,,TTLDD\n         LTR   R15,R15\n         BNZ   TTLPERR\n         BCT   R4,TTLP1\n         SPACE 1\n*------- PRINT LOAD MODULES REFERENCES\n         SPACE 1\n         ZAP   IXLN,=PL2'+99'\n         L     R7,AMDS\n         USING MDENT,R7\n         L     R8,AMDN\nPRMR1    L     R3,MDMME\n         AH    R3,EMML\n         SL    R3,MDMMS\n         XR    R2,R2\n         XC    WORKD,WORKD\n         MVC   WORKD+4-L'EMML(L'EMML),EMML\n         D     R2,WORKD\n         L     R2,MDMMS\n        $SORT  (R2),(R3),MMLGTH,0+L'MMTTR+L'MMTYP,L'MMNME\n         ZAP   MRLN,=PL2'+99'\n         MVC   MRT2N,MDDSN\n         MVC   MRT2V,MDVOL\n         ZAP   CTRL,MRPG\n         AP    CTRL,=PL1'+1'\n         MVC   IXT3D,MDDSN\n         MVC   IXT3V,MDVOL\n         MVI   IXT3T,C'M'\n         MVC   IXT3P,=XL6'402020202120'\n         ED    IXT3P,CTRL\n         MVI   IXT3P,C'/'\n         BAS   R9,IXPRT\n         L     R6,MDRNS\n         USING RNENT,R6\nPRMR2    MVC   MODNME,RNMNM\n         MVI   CKCODE,0\n         OI    SW3,SWMNP\n         MVC   MRT4M,MODNME\n         L     R4,MDMMS\n         USING MMENT,R4\nPRMR3    CLC   RNNME,MMNME\n         BE    PRMR4\n         BL    *+L'*+12\n         AH    R4,EMML\n         CL    R4,MDMME\n         BNH   PRMR3\n         MVC   MEMR1+42(L'RNNME),RNNME MODULE NAME NOT FOUND ?\n         LA    R1,MEMR1+41+L'RNNME\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(2,R1),=CL2'\")'\n         LA    R1,MEMR1\n         BAS   R9,PERR\n         B     LEAVE\nPRMR4    ICM   R1,B'1111',MMCHA\n         BZ    PRMR5\n         USING LKENT,R1\n         CLI   LKETY,LKEID\n         BE    *+L'*+12\n         ICM   R1,B'1111',LKCHA    OR ZPCHA OR USCHA\n         BNZ   *-12\n         B     PRMR5\n         MVC   MRT4T(6),=XL6'21204B202020'\n         ED    MRT4T(6),LKDTE\n         DROP  R1\nPRMR5    TM    MMFLG,MMFEP\n         BZ    PRMR10\n         CLI   RNTYP,RNMO\n         BNE   *+L'*+14\n         MVC   MRT4R(30),=CL30'MODULE NAME IS ALSO ENTRY NAME'\n         BAS   R9,MRPRT\n         B     PRMR20\n         MVC   MRT4R(29),=CL29'ALIAS NAME IS ALSO ENTRY NAME'\n         BAS   R9,MRPRT\n         B     PRMR14\nPRMR10   LR    R5,R6\nPRMR11   AH    R5,ERNL\n         CL    R5,MDRNE\n         BH    PRMR15\n         CLC   RNMNM-RNENT(L'RNMNM,R5),MODNME\n         BNE   PRMR15\n         CLI   RNTYP-RNENT(R5),RNAL\n         BE    *+L'*+8\n         CLI   RNTYP-RNENT(R5),RNEP\n         BNE   PRMR11\n         CLC   MMEPA,RNEPA-RNENT(R5)\n         BNE   PRMR11\n         CLI   RNTYP,RNMO\n         BNE   PRMR12\n         MVC   MRT4R(23),=CL23'MODULE NAME DEFAULTS TO'\n         CLI   RNTYP-RNENT(R5),RNAL\n         BNE   *+L'*+10\n         MVC   MRT4R+24(5),=CL5'ALIAS'\n         B     *+L'*+6\n         MVC   MRT4R+24(5),=CL5'ENTRY'\n         LA    R1,MRT4R+30\n         B     PRMR13\nPRMR12   MVC   MRT4R(22),=CL22'ALIAS NAME DEFAULTS TO'\n         CLI   RNTYP-RNENT(R5),RNAL\n         BNE   *+L'*+10\n         MVC   MRT4R+23(5),=CL5'ALIAS'\n         B     *+L'*+6\n         MVC   MRT4R+23(5),=CL5'ENTRY'\n         LA    R1,MRT4R+29\nPRMR13   MVI   0(R1),C'\"'\n         MVC   1(L'RNNME,R1),RNNME-RNENT(R5)\n         LA    R1,L'RNNME(R1)\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   1(R1),C'\"'\n         BAS   R9,MRPRT\n         CLI   RNTYP,RNMO\n         BE    PRMR20\nPRMR14   CLC   RNMNM,MMONM\n         BE    PRMR20\n         MVC   MRT4R(26),=CL26'ORIGINAL MODULE NAME WAS \"'\n         MVC   MRT4R+26(L'MMONM),MMONM\n         LA    R1,MRT4R+L'MMONM+25\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVI   1(R1),C'\"'\n         BAS   R9,MRPRT\n         B     PRMR20\nPRMR15   TM    MMFLG,MMFPV\n         BZ    PRMR16\n         CLI   RNTYP,RNMO\n         BNE   *+L'*+16\n         MVC   MRT4R(23),=CL23'MODULE NAME DEFAULTS TO'\n         MVC   MRT4R+24(10),=CL10'\"$PRIVATE\"'\n         B     *+L'*+12\n         MVC   MRT4R(22),=CL22'ALIAS NAME DEFAULTS TO'\n         MVC   MRT4R+23(10),=CL10'\"$PRIVATE\"'\n         BAS   R9,MRPRT\n         B     PRMR20\nPRMR16   CLI   RNTYP,RNMO\n         BNE   PRMR17\n         MVC   MEMR2+40(L'MODNME),MODNME\n         LA    R1,MEMR2+39+L'MODNME\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(2,R1),=CL2'\")'\n         LA    R1,MEMR2\n         BAS   R9,PERR\n         B     LEAVE\nPRMR17   MVC   MEMR3+39(L'MODNME),MODNME\n         LA    R1,MEMR3+38+L'MODNME\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(2,R1),=CL2'\")'\n         LA    R1,MEMR3\n         BAS   R9,PERR\n         B     LEAVE\nPRMR20   ICM   R2,B'1111',MMCHA\n         DROP  R4\n         BZ    PRMR30\n         USING ZPENT,R2\nPRMR21   CLI   ZPETY,ZPEID\n         BNE   PRMR22\n         MVC   MRT4R(7),=CL7'CSECT \"'\n         MVC   MRT4R+7(L'ZPNME),ZPNME\n         LA    R1,MRT4R+L'ZPNME+6\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(8,R1),=CL8'\" ZAPPED'\n         MVC   10(6,R1),=XL6'21204B202020'\n         ED    10(6,R1),ZPDTE\n         MVC   17(6,R1),=CL6'- ID :'\n         MVC   24(L'ZPDTA,R1),ZPDTA\n         DROP  R2\n         B     PRMR25\n         USING LKENT,R2\nPRMR22   CLI   LKETY,LKEID\n         BE    PRMR25+L'PRMR25\n         DROP  R2\n         USING USENT,R2\n         CLI   USETY,USEID\n         BE    PRMR23\n         IC    R1,USETY\n         STC   R1,MEMR4+34\n         SRL   R1,4\n         STC   R1,MEMR4+33\n         NC    MEMR4+33(2),=XL2'0F0F'\n         TR    MEMR4+33(2),TRHEX\n         LA    R1,MEMR4\n         BAS   R9,PERR\n         B     LEAVE\nPRMR23   MVC   MRT4R(7),=CL7'CSECT \"'\n         MVC   MRT4R+7(L'USNME),USNME\n         LA    R1,MRT4R+L'ZPNME+6\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   1(10,R1),=CL10'\" IDENTIFY'\n         MVC   12(6,R1),=XL6'21204B202020'\n         ED    12(6,R1),USDTE\n         XR    R3,R3\n         IC    R3,USDTL\n         LTR   R3,R3\n         BNP   PRMR24\n         LA    R0,25(R1,R3)\n         CL    R0,=A(MRT4R+NMRT4R*L'MRT4R-1)\n         BH    PRMR24\n         MVC   19(6,R1),=CL6'- ID :'\n         BCT   R3,*+L'*+6\n         MVC   26(*-*,R1),USDTA    <<EXECUTED>>\n         EX    R3,*-6\n         XR    R3,R3\nPRMR24   BAS   R9,MRPRT\n         LTR   R3,R3\n         BNP   PRMR25+L'PRMR25\n         BCT   R3,*+L'*+6\n         MVC   MRT4R+11(*-*),USDTA <<EXECUTED>>\n         EX    R3,*-6\n         MVC   MRT4R+6(4),=CL4'ID :'\nPRMR25   BAS   R9,MRPRT\n         ICM   R2,B'1111',USCHA    OR ZPCHA OR LKCHA\n         DROP  R2\n         BNZ   PRMR21\nPRMR30   NI    SW3,255-SWMNP\n         OI    SW3,SWTYP\nPRMR31   AH    R6,ERNL\n         CL    R6,MDRNE\n         BH    PRMR40\n         CLC   RNMNM,MODNME\n         BNE   PRMR33\n         CLC   RNTYP,CKCODE\n         BE    PRMR32\n         CLI   MRT4R,C' '\n         BE    *+L'*+4\n         BAS   R9,MRPRT\n         MVC   CKCODE,RNTYP\n         CLI   CKCODE,RNAL\n         BNE   *+L'*+10\n         MVC   MRT4T,=CL7'ALIAS :'\n         B     *+L'*+24\n         CLI   CKCODE,RNEP\n         BNE   *+L'*+10\n         MVC   MRT4T,=CL7'ENTRY :'\n         B     *+L'*+6\n         MVC   MRT4T,=CL7'EXTRN :'\n         LA    R4,MRT4R\n         LA    R5,NMRT4R\nPRMR32   MVC   0(L'RNNME,R4),RNNME\n         TM    RNEDT+L'RNEDT-1,X'0F'\n         BNO   *+L'*+12\n         MVC   9(6,R4),=XL6'21204B202020'\n         ED    9(6,R4),RNEDT\n         LA    R4,L'MRT4R(R4)\n         BCT   R5,PRMR31\n         BAS   R9,MRPRT\n         LA    R4,MRT4R\n         LA    R5,NMRT4R\n         B     PRMR31\nPRMR33   CLI   MRT4R,C' '\n         BE    *+L'*+4\n         BAS   R9,MRPRT\n         NI    SW3,255-SWTYP\n         B     PRMR2\nPRMR40   CLI   MRT4R,C' '\n         BE    *+L'*+4\n         BAS   R9,MRPRT\n         NI    SW3,255-SWTYP\n         AH    R7,EMDL\n         BCT   R8,PRMR1\n         DROP  R6,R7\n         MVC   IXT3D(L'IXT3D+L'IXT3V+6),IXT3D-1\n         BAS   R9,IXPRT\n         MVC   IXT3D(38),=CL38'ALL LOAD MODULES NAMES REFERENCES LIST'\n         MVC   IXT3T(7),=CL7'N/    1'\n         BAS   R9,IXPRT\n         B     PRMRX\n         SPACE 1\nMRPRT    TM    SW3,SWMNP           MODULES REFERENCES PRINT SUBROUTINE\n         BO    *+L'*+10            R0-R1-R14-R15  = WORK REGISTERS\n         CP    MRLN,MXLN3          R9 = LINK REGISTER\n         B     *+L'*+6\n         CP    MRLN,MXLN4\n         BL    MRPRT1\n         NI    SW3,255-SWMNP\n         ZAP   MRLN,=PL1'+0'\n         AP    MRPG,=PL1'+1'\n         MVC   MRT1P,=XL6'402020202120'\n         ED    MRT1P,MRPG\n         MVI   MRT1P,C'/'\n        $PRINT MRT1,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT1U,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT2,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT2U,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT3,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT3U,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT3A,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n        $PRINT MRT3S,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n         CLI   MRT4M,C' '\n         BNE   *+L'*+6\n         MVC   MRT4M+2(3),=CL3'\" \"'\n         TM    SW3,SWTYP\n         BZ    MRPRT1\n         CLI   MRT4T,C' '\n         BNE   MRPRT1\n         MVC   MRT4T+2(3),=CL3'\" \"'\nMRPRT1   TM    SW3,SWMNP\n         BZ    MRPRT2\n         MVI   MRT4,C'0'\n         NI    SW3,255-SWMNP\n         AP    MRLN,=PL1'+1'\nMRPRT2  $PRINT MRT4,,LMLDD\n         LTR   R15,R15\n         BNZ   MRPRTX\n         AP    MRLN,=PL1'+1'\n         MVI   MRT4,C' '\n         MVC   MRT4M(L'MRT4M+L'MRT4T+NMRT4R*L'MRT4R+5),MRT4M-1\n         BR    R9\nMRPRTX   MVC   MERR1+5(L'LMLDD),LMLDD\n         B     LSTERR\n         SPACE 1\nIXPRT    CP    IXLN,MXLN1          INDEX PRINT SUBROUTINE\n         BL    IXPRT1              R0-R1-R14-R15  = WORK REGISTERS\n         ZAP   IXLN,=PL1'+0'       R9 = LINK REGISTER\n         AP    IXPG,=PL1'+1'\n         MVC   IXT1P,=XL6'402020202120'\n         ED    IXT1P,IXPG\n         MVI   IXT1P,C'/'\n        $PRINT IXT1,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\n        $PRINT IXT1U,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\n        $PRINT IXT2,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\n        $PRINT IXT2U,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\nIXPRT1  $PRINT IXT3,,TTLDD\n         LTR   R15,R15\n         BNZ   IXPRTX\n         AP    IXLN,=PL1'+1'\n         MVC   IXT3+1(L'IXT3-1),IXT3\n         BR    R9\nIXPRTX   MVC   MERR1+5(L'TTLDD),TTLDD\n         B     LSTERR\n         SPACE 1\nMEMR1   WTO    'UNEXPECTED NOT FOUND CONDITION (NAME \"           ',    X\n               ROUTCDE=11,DESC=7,MF=L\nMEMR2   WTO    'MODULE DEFAULT ENTRY FAILURE (NAME \"           ',      X\n               ROUTCDE=11,DESC=7,MF=L\nMEMR3   WTO    'ALIAS DEFAULT ENTRY FAILURE (NAME \"           ',       X\n               ROUTCDE=11,DESC=7,MF=L\nMEMR4   WTO    'UNKNOWN ELEMENT TYPE (ID = X''  '') FAILURE',          X\n               ROUTCDE=11,DESC=7,MF=L\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*           P R I N T     N A M E S     R E F E R E N C E S           *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- PRINT ALL NAMES REFERENCES\n         SPACE 1\nPRNR0    L     R2,ARNS\n         USING RNENT,R2\nPRNR1    XC    RNMNM,RNNME         ALTERNATE FOR NEXT SORT\n         XC    RNNME,RNMNM\n         XC    RNMNM,RNNME\n         CL    R2,CRNPTR\n         BNL   *+L'*+8\n         AH    R2,ERNL\n         B     PRNR1\n         DROP  R2\n         L     R3,CRNPTR\n         AH    R3,ERNL\n         SL    R3,ARNS\n         XR    R2,R2\n         XC    WORKD,WORKD\n         MVC   WORKD+4-L'ERNL(L'ERNL),ERNL\n         D     R2,WORKD\n         L     R2,ARNS\n        $SORT  (R2),(R3),RNLGTH,0,L'RNANME+L'RNTYP+L'RNAMNM\n         ZAP   NRLN,=PL2'+99'\n         MVI   WLNE,C' '\n         MVC   WLNE+1(L'WLNE-1),WLNE\n         LA    R3,WLNE\n         L     R2,ARNS\n         USING RNENT,R2\nPRNR2    CLC   RNANME(L'RNANME),RNANME-RNENT(R3)\n         BE    PRNR3\n         OI    SW3,SWNRP\n         MVC   MODNME,RNANME\n         MVC   NRT3N,RNANME\nPRNR3    CLI   RNTYP,RNMO\n         BNE   *+L'*+10\n         MVC   NRT3T,=CL6'MODULE'\n         B     PRNR4\n         CLI   RNTYP,RNAL\n         BNE   *+L'*+10\n         MVC   NRT3T,=CL6'ALIAS '\n         B     PRNR4\n         CLI   RNTYP,RNEP\n         BNE   *+L'*+10\n         MVC   NRT3T,=CL6'ENTRY '\n         B     PRNR4\n         MVC   NRT3T,=CL6'EXTRN '\nPRNR4    TM    RNEDT+L'RNEDT-1,X'0F'\n         BNO   *+L'*+12\n         MVC   NRT3A,=XL6'21204B202020'\n         ED    NRT3A,RNEDT\n         TM    SW3,SWNRP\n         BO    *+L'*+20\n         CLC   RNAMNM(L'RNAMNM),RNAMNM-RNENT(R3)\n         BNE   *+L'*+10\n         MVC   NRT3M+2(3),=CL3'\" \"'\n         B     *+L'*+6\n         MVC   NRT3M(L'RNAMNM),RNAMNM\n         TM    SW3,SWNRP\n         BO    *+L'*+20\n         CLC   RNAMD(L'RNAMD),RNAMD-RNENT(R3)\n         BNE   *+L'*+10\n         MVC   NRT3D+2(3),=CL3'\" \"'\n         B     PRNR5\n         ICM   R4,B'1111',RNAMD\n         USING MDENT,R4\n         MVC   NRT3D,MDDSN\n         LA    R1,NRT3D+L'NRT3D-1\n         LR    R0,R1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         SR    R0,R1\n         CH    R0,=Y(3+L'MDVOL)\n         BL    PRNR5\n         MVI   2(R1),C'/'\n         MVC   4(L'MDVOL,R1),MDVOL\n         DROP  R4\nPRNR5    BAS   R9,NRPRT\n         CL    R2,CRNPTR\n         BNL   PRNRX\n         LR    R3,R2\n         AH    R2,ERNL\n         B     PRNR2\n         DROP  R2\n         SPACE 1\nNRPRT    TM    SW3,SWNRP           NAMES REFERENCES PRINT SUBROUTINE\n         BO    *+L'*+10            R0-R1-R14-R15  = WORK REGISTERS\n         CP    NRLN,MXLN1          R9 = LINK REGISTER\n         B     *+L'*+6\n         CP    NRLN,MXLN2\n         BL    NRPRT1\n         NI    SW3,255-SWNRP\n         ZAP   NRLN,=PL1'+0'\n         AP    NRPG,=PL1'+1'\n         MVC   NRT1P,=XL6'402020202120'\n         ED    NRT1P,NRPG\n         MVI   NRT1P,C'/'\n        $PRINT NRT1,,LMLDD\n         LTR   R15,R15\n         BNZ   NRPRTX\n        $PRINT NRT1U,,LMLDD\n         LTR   R15,R15\n         BNZ   NRPRTX\n        $PRINT NRT2,,LMLDD\n         LTR   R15,R15\n         BNZ   NRPRTX\n        $PRINT NRT2U,,LMLDD\n         LTR   R15,R15\n         BNZ   NRPRTX\n         CLI   NRT3N,C' '\n         BNE   *+L'*+6\n         MVC   NRT3N+2(3),=CL3'\" \"'\n         CLI   NRT3D,C' '\n         BNE   NRPRT1\n         MVC   NRT3D+2(3),=CL3'\" \"'\nNRPRT1   TM    SW3,SWNRP\n         BZ    *+L'*+14\n         MVI   NRT3,C'0'\n         NI    SW3,255-SWNRP\n         AP    NRLN,=PL1'+1'\n        $PRINT NRT3,,LMLDD\n         LTR   R15,R15\n         BNZ   NRPRTX\n         AP    NRLN,=PL1'+1'\n         MVI   NRT3,C' '\n         MVC   NRT3+1(L'NRT3-1),NRT3\n         BR    R9\nNRPRTX   MVC   MERR1+5(L'LMLDD),LMLDD\n         B     LSTERR\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                       F I N A L     T R A C E                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         CNOP  0,8\n         USING *,R10\n         SPACE 1\n*------- TRACE WORK-AREAS USE IF REQUESTED\n         SPACE 1\nFTRC0    TM    SW2,SWTAV\n         BZ    LEAVE\n        $PRINT FTRM0\n         LTR   R15,R15\n         BNZ   FTRERR\n        $PRINT FTRM0U\n         LTR   R15,R15\n         BZ    FTRC2\nFTRERR   STC   R15,PERRWT+46\n         OI    PERRWT+46,C'0'\n        WTO    MF=(E,PERRWT)\n         OI    SW2,SWERR\n         B     LEAVE\nFTRC1    LR    R1,R2\n         XR    R0,R0\n         LA    R14,L'FTRM1A\n         LA    R15,FTRM1A\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    FTRM1A,=XL8'0F0F0F0F0F0F0F0F'\n         TR    FTRM1A,TRHEX\n         SR    R3,R2\n         LR    R1,R3\n         XR    R0,R0\n         LA    R14,L'FTRM1B\n         LA    R15,FTRM1B\n         SLDL  R0,4\n         STC   R0,0(R15)\n         LA    R15,1(R15)\n         BCT   R14,*-12\n         NC    FTRM1B,=XL8'0F0F0F0F0F0F0F0F'\n         TR    FTRM1B,TRHEX\n         MVI   FTRM1C+16,C' '\n         MVC   FTRM1C+17(L'FTRM1C-17),FTRM1C+16\n         CVD   R3,WORKD\n         MVC   FTRM1C(16),=XL16'40202020202020202020202020202120'\n         ED    FTRM1C(16),WORKD\n         LA    R0,15\n         CLI   FTRM1C,C' '\n         BNE   *+L'*+14\n         MVC   FTRM1C(15),FTRM1C+1\n         MVI   FTRM1C+15,C' '\n         BCT   R0,*-18\n         LA    R1,FTRM1C\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         LA    R1,1(R1)\n         B     *-12\n         MVC   1(6,R1),=CL6'BYTES)'\n        $PRINT FTRM1\n         LTR   R15,R15\n         BZR   R9\n         B     FTRERR\nFTRC2    MVC   FTRM1W,=CL2'MD'\n         L     R2,AMDS\n         L     R3,AMDN\n         MH    R3,EMDL\n         AR    R3,R2\n         LR    R4,R3\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'MM'\n         L     R2,AMMS\n         SH    R4,EMDL\n         USING MDENT,R4\n         L     R3,MDMME\n         DROP  R4\n         AH    R3,EMML\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'RN'\n         L     R2,ARNS\n         L     R3,CRNPTR\n         AH    R3,ERNL\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'ZP'\n         L     R2,AZPS\n         ICM   R3,B'1111',CZPPTR\n         BNZ   *+L'*+6\n         LR    R3,R2\n         B     *+L'*+4\n         AH    R3,EZPL\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'LK'\n         L     R2,ALKS\n         ICM   R3,B'1111',CLKPTR\n         BNZ   *+L'*+6\n         LR    R3,R2\n         B     *+L'*+4\n         AH    R3,ELKL\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'US'\n         L     R2,AUSS\n         ICM   R3,B'1111',CUSPTR\n         BNZ   *+L'*+6\n         LR    R3,R2\n         B     *+L'*+4\n         AH    R3,EUSL\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'CE'\n         L     R2,ACES\n         ICM   R3,B'1111',CCEPTR\n         BNZ   *+L'*+6\n         LR    R3,R2\n         B     *+L'*+4\n         AH    R3,ECEL\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'TW'\n         L     R2,ATWS\n         ICM   R3,B'1111',CTWPTR\n         BNZ   *+L'*+2\n         LR    R3,R2\n         BAS   R9,FTRC1\n         MVC   FTRM1W,=CL2'UW'\n         L     R2,AUWS\n         ICM   R3,B'1111',CUWPTR\n         BNZ   *+L'*+2\n         LR    R3,R2\n         BAS   R9,FTRC1\n         B     LEAVE\n         SPACE 1\n         DC    AL1(FTRM0L)\nFTRM0    DC    C'0 REAL USE OF WORK-AREAS SPACE :'\nFTRM0L   EQU   *-FTRM0\n         DC    AL1(FTRM0UL)\nFTRM0U   DC    C'+ ______________________________'\nFTRM0UL  EQU   *-FTRM0U\n         DC    AL1(FTRM1L)\nFTRM1    DC    CL2'0 '\nFTRM1W   DC    CL2' ',C' - AREA ADDRESS : '\nFTRM1A   DC    CL8' ',C' LENGTH : '\nFTRM1B   DC    CL8' ',C' ('\nFTRM1C   DC    CL24' '\nFTRM1L   EQU   *-FTRM1\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         PRINT &PRS\n        LTORG\n         PRINT &PRF\n         SPACE 1\n         DROP  R10\n         EJECT\n*------- DSECT'S\n         SPACE 1\nMDENT    DSECT                     LOAD'S DD'S\nMDNME    DS    CL8                 DD NAME\nMDMMS    DS    A                   FIRST DIRECTORY NAME POINTER\nMDMME    DS    A                   LAST DIRECTORY NAME POINTER\nMDRNS    DS    A                   FIRST REFERENCE ELEMENT POINTER\nMDRNE    DS    A                   LAST REFERENCE ELEMENT POINTER\nMDDSN    DS    CL44                DS-NAME\nMDVOL    DS    CL6                 VOLUME NAME\nMDLGTH   EQU   (((*-MDENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nMMENT    DSECT                     DIRECTORIES NAMES\nMMTTR    DS    XL3                 TTR OF FIRST BLOCK\nMMTYP    DS    XL1                 NAME TYPE\nMMMO     EQU   X'00'               NAME IS MODULE\nMMAL     EQU   X'01'               NAME IS ALIAS\nMMNME    DS    CL8                 NAME\nMMONM    DS    CL8                 ORIGINAL NAME (ALIAS ONLY)\nMMFLG    DS    XL1                 FLAG BYTE\nMMFEP    EQU   X'01'               NAME IS ENTRY\nMMFPV    EQU   X'02'               NAME IS $PRIVATE\nMMEPA    DS    AL3                 ENTRY POINT ADDRESS\nMMCHA    DS    A                   CHAIN ADDRESS (ZERO = NONE)\nMMLGTH   EQU   (((*-MMENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nRNENT    DSECT                     REFERENCE ELEMENT\nRNANME   DS    0CL8                ALTERNATE REFERENCE NAME\nRNMNM    DS    CL8                 MODULE NAME (TO WHICH IT BELONGS)\nRNTYP    DS    XL1                 REFERENCE TYPE\nRNMO     EQU   X'00'               NAME IS MODULE\nRNAL     EQU   X'01'               NAME IS ALIAS\nRNEP     EQU   X'02'               NAME IS ENTRY POINT\nRNEX     EQU   X'03'               NAME IS EXTERNAL\nRNAMNM   DS    0CL8                ALTERNATE MODULE NAME\nRNNME    DS    CL8                 REFERENCE NAME\nRNAMD    DS    AL4                 ADDRESS OF \"MD\" ENTRY\nRNEPA    DS    AL3                 ENTRY POINT ADDRESS\nRNEDT    DS    PL3                 DATE COMPILATION/ASSEMBLY\nRNLGTH   EQU   (((*-RNENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nZPENT    DSECT                     ZAP ELEMENT\nZPCHA    DS    A                   CHAIN ADDRESS (ZERO = END OF CHAIN)\nZPETY    DS    XL1                 ZAP ELEMENT TYPE\nZPEID    EQU   X'00'                    ZAP ELEMENT ID\nZPDTE    DS    PL3                 DATE\nZPNME    DS    CL8                 CSECT NAME\nZPDTA    DS    CL8                 DATA\nZPLGTH   EQU   (((*-ZPENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nLKENT    DSECT                     LINKAGE EDITOR ELEMENT\nLKCHA    DS    A                   CHAIN ADDRESS (ZERO = END OF CHAIN)\nLKETY    DS    XL1                 LINKAGE EDITOR ELEMENT TYPE\nLKEID    EQU   X'01'                    LINKAGE EDITOR ELEMENT ID\nLKDTE    DS    PL3                 DATE\nLKLGTH   EQU   (((*-LKENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nUSENT    DSECT                     USER (IDENTIFY) ELEMENT\nUSCHA    DS    A                   CHAIN ADDRESS (ZERO = END OF CHAIN)\nUSETY    DS    XL1                 USER ELEMENT TYPE\nUSEID    EQU   X'02'                    USER ELEMENT ID\nUSDTE    DS    PL3                 DATE\nUSNME    DS    CL8                 CSECT NAME\nUSDTL    DS    XL1                 DATA LENGTH\nUSDTA    DS    CL40                DATA\nUSLGTH   EQU   (((*-USENT)+3)/4)*4 ENTRY LENGTH\n         SPACE 1\nCEENT    DSECT                     CESD ELEMENT\nCESYM    DS    CL8                 CESD SYMBOL\nCELGTH   EQU   (((*-CEENT)+3)/4)*4 ENTRY LENGTH\n         EJECT\n*------- LINKAGE EDITOR LOAD MODULE RECORD FORMATS\n         SPACE 1\nCESDR    DSECT ,              CESD RECORD -----------------------------\nESDI     DS    XL1                 IDENTIFICATION\nESDIV    EQU   X'20'               CESD ID VALUE\n         DS    XL3                 SPARE (BINARY ZEROS)\nESDID    DS    XL2                 ESDID OF FIRST ESD ITEM\nESDCN    DS    XL2                 COUNT OF ESD DATA\nESDDT    DS    XL1                 ESD DATA (UP TO 240 BYTES)\n         SPACE 1\nCESDD    DSECT ,              CESD DATA - - - - - - - - - - - - - - - -\nESDDNM   DS    CL8                 EXTERNAL NAME\nESDDTY   DS    XL1                 TYPE\nESDDTSD  EQU   X'00'               SECTION DEFINITION (SD)\nESDDTER  EQU   X'02'               EXTERNAL REFERENCE (ER)\nESDDTLR  EQU   X'03'               LABEL REFERENCE (LR)\nESDDTPC  EQU   X'04'               PRIVATE CODE (PC)\nESDDTCM  EQU   X'05'               COMMON (CM)\nESDDTPR  EQU   X'06'               PSEUDO REGISTER (PR)\nESDDTNL  EQU   X'07'               NULL (NL)\nESDDTWX  EQU   X'0A'               WEAK EXTERNAL REFERENCE (WX)\nESDDAA   DS    AL3                 ASSIGNED ADDRESS OF NAME\nESDDSN   DS    XL1                 SEGMENT NUMBER\nESDDIL   DS    XL3                 ID/LENGTH\nCESDDL   EQU   *-CESDD        CESD DATA LENGTH\n         SPACE 1\nCIDR     DSECT ,              CSECT IDENTIFICATION RECORD -------------\nIDRI     DS    XL1                 IDENTIFICATION\nIDRIV    EQU   X'80'               IDR VALUE\nIDRCN    DS    XL1                 COUNT IN BYTES OF IDR DATA\nIDRSI    DS    XL1                 SUB-TYPE INDICATOR (IDR DATA TYPE)\nIDRHZP   EQU   X'01'               HMASPZAP DATA\nIDRLKE   EQU   X'02'               LINKAGE EDITOR DATA\nIDRTRS   EQU   X'04'               TRANSLATOR DATA\nIDRUSR   EQU   X'08'               USER (SYSTEM) DATA (FROM IDENTIFY)\nIDRLST   EQU   X'80'               LAST IDR OF THIS LOAD MODULE\nIDRDT    DS    XL1                 IDR DATA (UP TO 256 BYTES)\n         SPACE 1\nHZPD     DSECT ,              HMASPZAP DATA - - - - - - - - - - - - - -\nHZPFC    DS    XL1                 FLAGS AND COUNT\n*                                       BIT 0 - RESERVED\n*                                       BIT 1 - CHAIN BIT\n*                                       BIT 2-7 - NUMBER OF ENTRIES\nHZPDE    DSECT ,              HMASPZAP ENTRY DESCRIPTION  . . . . . . .\nHZPES    DS    XL2                 ESDID OF CSECT PROCESSED BY HMASPZAP\nHZPDT    DS    PL3                 DATE OF HMASPZAP (YYDDD PACKED)\nHZPDH    DS    CL8                 DATA OF HMASPZAP (IDRDATA)\nHZPDEL   EQU   *-HZPDE        HMASPZAP DATA LENGTH\n         SPACE 1\nLKED     DSECT ,              LINKAGE EDITOR DATA - - - - - - - - - - -\nLKENM    DS    CL10                PROGRAM NAME OF LINKAGE EDITOR\nLKEVM    DS    PL2                 VERSION AND MOD. LEVEL (VVMM PACKED)\nLKEDT    DS    PL3                 DATE OF LAST LINK (YYDDD PACKED)\nLKEDL    EQU   *-LKED         LINKAGE EDITOR DATA LENGTH\n         SPACE 1\nTRSD     DSECT ,              TRANSLATOR DATA - - - - - - - - - - - - -\nTRSDES   DS    0XL2                ESDID LIST OF CSECT(S)\nTRSLST   EQU   X'80'               LAST ESDID IN THE LIST\nTRSDS    DSECT ,              TRANSLATOR DESCRIPTION  . . . . . . . . .\nTRSDSID  DS    XL1                 INDICATOR\n*                                       X'00' = ONLY ONE TRANSLATOR\nTRSDSTT  EQU   X'01'                    TWO TRANSLATORS\nTRSDSNM  DS    XL10                TRANSLATOR NAME\nTRSDSVM  DS    PL2                 VERSION AND MOD. LEVEL (VVMM PACKED)\nTRSDSDT  DS    PL3                 DATE OF COMP./ASS. (YYDDD PACKED)\nTRSDSL   EQU   *-TRSDS        TRANSLATOR DESCRIPTION LENGTH\n         SPACE 1\nUSRD     DSECT ,              USER (IDENTIFY) DATA  - - - - - - - - - -\nUSRES    DS    XL2                 ESDID OF CSECT TO WHICH IT APPLIES\nUSRDT    DS    PL3                 DATE OF IDENTIFY (YYDDD PACKED)\nUSRCN    DS    XL1                 NUMBER OF CHAR. IN USER DATA FIELD\nUSRDF    DS    XL1                 USER DATA FIELD (UP TO 40 CHAR.)\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\n        DCBD   DSORG=PO,DEVD=DA\n        IHAPDS PDSBLDL=NO\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LMRUTIL$": {"ttr": 20997, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x12\\x00\\x12\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "SYSPAJA"}, "text": "//LMRUTIL  JOB (........),'INSTALL - LMRUTIL -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                GFDATE     PDREAD    PLREAD    TXPRINT             *\n//* NOTE : AT ASSEMBLY, YOU MAY SET THE SYSPARM AS BELOW :            *\n//*        FULL  =  PRINT GEN FOR THE ENTIRE LIST                     *\n//*        SHORT =  REDUCED PRINT GEN                                 *\n//*        NONE  =  PRINT NOGEN FOR THE ENTIRE LIST                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,OPT=',SYSPARM(NONE)',MBR=LMRUTIL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,PDREAD,PLREAD,PRINT)\n  ENTRY   LMRUTIL\n  NAME    LMRUTIL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMRUTIL@": {"ttr": 20999, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\to\\x00\\x93\\to\\x11\\x00\\x00V\\x00V\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-06T00:00:00", "modifydate": "1993-04-06T11:00:00", "lines": 86, "newlines": 86, "modlines": 0, "user": "SYSPAJA"}, "text": "1   26/03/93\n                                                      LMRUTIL   1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *   LOAD MODULES REFERENCES UTILITY   * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    The main goals of the Load Modules References Utility\n  ---------    program is to create a list (book) which quickly\n               responds to the following two funny questions :\n               1) which routines are used in a specific load module ?\n                  or\n               2) which load modules in your load libraries use a\n                  specific routine ?\n\n  Call of the program :\n  ---------------------\n\n         //XEQ     EXEC PGM=LMRUTIL,PARM='...(Optional)...'\n         //LML...    DD DSN=...1st Load Library...,DISP=SHR\n         //LML...    DD DSN=...2nd Load Library...,DISP=SHR\n                            ...any number of DD-cards...\n         //LML...    DD DSN=...nth Load Library...,DISP=SHR\n         //TITPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n         //LMLPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,BLKSIZE=800,LRECL=80)\n         //SYSPRINT  DD SYSOUT=*\n\n  JCL additional information :\n  ----------------------------\n\n  1. Maintaining the order of the two DD-cards TITPRINT and LMLPRINT\n     allows you to print in the right order the entire generated\n     manual.\n  2. All //LML... DD-cards must refer only to load modules partitioned\n     libraries data-sets.\n  3. Only load modules builded by the Linkage Editor are analyzed.\n1   26/03/93\n                                                      LMRUTIL   2/2.\n\n  Defaults :   The program assumes some execution defaults values.\n  ----------   These are defined by symbols as below :\n         LN :   55 is the maximum number of lines per page\n         MD :   10 is the maximum number of Load Libraries DDs\n                   (//LML... DD ...)\n         MM : 3000 is the maximum number of directories names in all\n                   Load Libraries\n         RN : 8000 is the maximum number of reference elements in all\n                   Load Libraries (a reference element is used for :\n                        - the MODULE name of a load module,\n                        - each ALIAS name of a load module,\n                        - each ENTRY name (unless it is MODULE or\n                          ALIAS name) in a load module, and\n                        - each EXTERNAL name in a load module)\n         ZP : 3000 is the maximum number of HMASPZAP IDR's in all Load\n                   Modules of all Load Libraries\n         LK : 3000 is the maximum number of Linkage Editor IDR's in all\n                   Load Modules of all Load Libraries\n         US : 3000 is the maximum number of User (IDENTIFY) IDR's in\n                   all Load Modules of all Libraries\n         CE :  500 is the maximum number of CESD symbols defined in one\n                   Load Module\n         TW :    4 is the maximum number of K (1024 bytes) for the\n                   Translator IDR's work buffer\n         UW :    4 is the maximum number of K (1024 bytes) for User\n                   (IDENTIFY) IDR's work buffer\n         All these values can be changed through the EXEC PARM= field\n         in the JCL.\n\n  EXEC parm. field : Use to overrides any or all execution defaults\n  ------------------ values. They may be specified in any order as\n         shown below :\n         PARM='LN=60,MM=5000,MD=5,RN=20000'\n         or :\n         PARM='LN 60 MM 5000 MD 5 RN 20000'\n         Blanks and commas are treated as separators, so you may\n         code : PARM='LN=60,MD=5 ...\n         or mixed : PARM=' LN 60 , MD = 5 ...\n         A TRACE option (gives information about all work-areas spaces\n         dynamically obtained/used by the program, about 1 page on\n         SYSPRINT) may be also specified in the EXEC parm. field by\n         just setting T.\n         i.e. : PARM=T or PARM='LN 60 T'\n         This option can help you to estimate and set the REGION size\n         in your JCL.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LTACC": {"ttr": 21002, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x15\\x0f\\x00\\x90\\x15\\x0f\\tQ\\x02\\xfb\\x02\\xfb\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-05-30T00:00:00", "modifydate": "1990-05-30T09:51:00", "lines": 763, "newlines": 763, "modlines": 0, "user": "SYSPAJA"}, "text": "LACC     TITLE 'LIST ACCOUNTING CONTROL DATA-SET CONTENTS.'\nLTACC    START 0\n         SPACE 1\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. -ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 1\n        $DEFREG\n         SPACE 1\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV0      EQU   0         REJECT LEVEL\n         SPACE 1\nAUT98   $MDL@IX\n         EJECT\n        $AIRD  SEC=YES,STA=YES\n*        PROGRAMMERS WORK TABLE ELEMENT DESCRIPTION.\n         SPACE 1\nPRSDSECT DSECT\nPRSPNME  DS    CL40                PROGRAMMER'S NAME\nPRSPBOX  DS    CL3                 BOX NUMBER\nPRSPNUM  DS    CL5                 PROGRAMMER'S NUMBER\nPRSPMTR  DS    CL6                 MATRICULE NUMBER\nPRSPBLD  DS    CL6                 BUILDING NUMBER\nPRSPPHN  DS    CL9                 PHONE NUMBER\nPRSPSRV  DS    CL8                 SERVICE NUMBER\nPRSDLG   EQU   *-PRSDSECT          ELEMENT LENGTH\n         SPACE 1\nLTACC    CSECT ,                   RESTORE ORIGINAL CSECT\n         SPACE 2\n*        PROGRAMMERS WORK TABLE ELEMENT SORT FIELDS.\n         SPACE 1\nS1FD     EQU   PRSPNME-PRSDSECT    SORT 1 = PROGRAMMER'S NAME\nS1FL     EQU   L'PRSPNME\nS2FD     EQU   PRSPBOX-PRSDSECT    SORT 2 = BOX/PROGRAMMER'S NUMBERS\nS2FL     EQU   L'PRSPBOX+L'PRSPNUM\n         EJECT\n        $UJVT\n         EJECT\n        $XENT  BASE=(R10,R11)\n         SPACE 1\n*---------------------------------------------------------------------*\n*        HANDLE PARM. FIELD IF ANY (ALTERNATE DATA-SET NAME).         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         L     R1,0(R1)            GET PARM. FIELD ADDRESS\n         LH    R2,0(R1)            GET PARM. FIELD LENGTH\n         LTR   R2,R2\n         BNP   NOPARM\n         MVI   DYNDSN,C' '\n         MVC   DYNDSN(L'DYNDSN-1),DYNDSN\n         BCT   R2,*+L'*+6\n         MVC   DYNDSN(*-*),2(R1)   SET ACCOUNT DATA-SET NAME\n         EX    R2,*-6\n         EJECT\nNOPARM  $EACM  REQAUT\n         CLI   AUTLVL,LV0\n         BE    NOTAUT\n         CLI   DYNDSN,C' '\n         BNE   ALLDSN\n         L     R15,=V(SUJVTA)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   UJVTERR\n         USING UVTDSECT,R1\n         L     R2,ACCNME\n         DROP  R1\n         MVC   DYNDSN(L'DYNDSN),0(R2)   GET ACC. DATA-SET DEFAULT NAME\n         L     R15,=V(DUJVTA)\n         BASR  R14,R15\nALLDSN  $DYNALL DYNLIST            DYNAMIC ALLOC OF SYSACC\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERALL               ERROR ALLOCATION\n        $GFDATE DATE,TIME\n         LTR   R15,R15\n         BNZ   ERRDT\n         MVC   HOUR(2),TIME\n         MVC   HOUR+3(2),TIME+2\n         MVC   HOUR+6(2),TIME+4\n        CALL   ZOPEN,(RETCD,XOPT),VL\n         LTR   R0,R15\n         BNZ   ERRZY\n         EJECT\n*---------------------------------------------------------------------*\n*        GET PROGRAMMERS WORK TABLE AREA.                             *\n*---------------------------------------------------------------------*\n         SPACE 1\n        CALL   ZSTATE,(RETCD,STAR),VL  GET STATUS\n         LTR   R0,R15\n         BNZ   ERRZY\n         LA    R2,STAR                 SET STATUS AREA ADDRESSABILITY\n         USING STADSECT,R2\n         L     R1,STAUPRG\n         DROP  R2\n         MH    R1,SPWTB+6\n         LR    R2,R1\n         AH    R1,=H'7'\n         SRL   R1,3\n         SLL   R1,3\n         ST    R1,LPWTB\n        GETMAIN R,LV=(1)\n         ST    R1,APWTB\n         SL    R1,SPWTB+4\n         ST    R1,SPWTB\n         AR    R1,R2\n         ST    R1,SPWTB+8\n         SPACE 1\n*---------------------------------------------------------------------*\n*        GET ALL DATA-SET RECORDS IN SEQUENCE.                        *\n*---------------------------------------------------------------------*\n         SPACE 1\nREAD    CALL   ZSEQR,(RETCD,AREA,NAUT),VL\n         LTR   R0,R15\n         BM    REND\n         BNZ   ERRZY\n         LA    R9,AREA\n         TM    SWITCH,SWP\n         BO    NXSCT\n         CLC   NAUT,MAXN\n         BH    NXSCT\n         EJECT\n*---------------------------------------------------------------------*\n*        AUTHORIZATIONS RECORDS PROCESSING.                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING AUTDSECT,R9\n         LA    R1,AUTNPNF\n         LA    R2,AUTPNO\n         LA    R5,LPG\nSCLOOP   LH    R0,0(R2)\n         LTR   R0,R0\n         BZ    NOST\n         STH   R0,0(R5)\n         LA    R5,L'LPG(R5)\nNOST     LA    R2,L'AUTPNO(R2)\n         BCT   R1,SCLOOP\n         CLC   NLI,LMX\n         BNH   NOSK\n         XC    NLI,NLI\n         MVC   L1A,DYNDSN\n         MVC   L1B,DATE\n         MVC   L1C,HOUR\n         LH    R0,NPA\n         AH    R0,=H'1'\n         STH   R0,NPA\n         BAS   R14,CNVRT\n         MVC   L1D(L'L1D),ZONE+L'ZONE-L'L1D\n         LA    R7,L1\n         BAS   R8,PRT\n         LA    R7,L2\n         BAS   R8,PRT\n         LA    R7,L3\n         BAS   R8,PRT\nNOSK     LH    R0,AUTANO\n         BAS   R14,CNVNR\n         MVC   L4A(L'L4A),ZONE+L'ZONE-L'L4A\n         CLI   AUTPI,0\n         BNE   *+L'*+8\n         MVI   L4B,C'4'\n         B     *+L'*+6\n         MVC   L4B,AUTPI\n         MVC   L4C,AUTACNO\n         XR    R0,R0\n         ICM   R0,B'0111',AUTVSD\n         BAS   R8,EDDTE\n         MVC   L4D(L'L4D),ZONE\n         XR    R0,R0\n         ICM   R0,B'0111',AUTVED\n         BAS   R8,EDDTE\n         MVC   L4E(L'L4E),ZONE\n         LH    R0,AUTPMNO\n         BAS   R14,CNVNR\n         MVC   L4F(L'L4F),ZONE+L'ZONE-L'L4F\n         LA    R6,LPG\n         LA    R7,L4G\n         BAS   R8,FILL\n         LA    R7,L4\n         BAS   R8,PRT\n         LH    R0,NLI\n         AH    R0,=H'2'\n         STH   R0,NLI\n         CLR   R5,R6\n         BE    READ\nPLOOP    LA    R7,L5A\n         BAS   R8,FILL\n         LA    R7,L5\n         BAS   R8,PRT\n         LH    R0,NLI\n         AH    R0,=H'1'\n         STH   R0,NLI\n         CLR   R5,R6\n         BNE   PLOOP\n         B     READ\n         DROP  R9\n         EJECT\n*---------------------------------------------------------------------*\n*        PROGRAMMERS RECORDS PROCESSING.                              *\n*---------------------------------------------------------------------*\n         SPACE 1\nNXSCT    CLC   NAUT,OVER\n         BH    REND\n         TM    SWITCH,SWP\n         BO    NTFRST\n         OI    SWITCH,SWP\n         MVC   NLI,MAXN\n         MVI   L7A,C'='\n         MVC   L7A+1(L'L7A-1),L7A\n         MVI   L7B,C'-'\n         MVC   L7B+1(L'L7B-1),L7B\n         MVI   L7C,C'-'\n         MVC   L7C+1(L'L7C-1),L7C\nNTFRST   CLC   NLI,GMX\n         BNH   NSKP\n         XC    NLI,NLI\n         MVC   L1A,DYNDSN\n         MVC   L1B,DATE\n         MVC   L1C,HOUR\n         LH    R0,NPA\n         AH    R0,=H'1'\n         STH   R0,NPA\n         BAS   R14,CNVRT\n         MVC   L1D(L'L1D),ZONE+L'ZONE-L'L1D\n         LA    R7,L1\n         BAS   R8,PRT\n         LA    R7,L6\n         BAS   R8,PRT\n         LA    R7,L7\n         BAS   R8,PRT\n         MVI   L8,C'0'\nNSKP     LH    R0,NLI\n         AH    R0,=H'1'\n         STH   R0,NLI\n         USING PRGDSECT,R9\n         LH    R0,PRGPNO\n         BAS   R14,CNVNR\n         MVC   L8A(L'L8A),ZONE+L'ZONE-L'L8A\n         MVC   L8B(L'L8B),PRGBXNO\n         MVC   L8C(L'L8C),PRGPNME\n         MVC   L8D(L'L8D),PRGMNO\n         MVC   L8E(L'L8E),PRGBDNO\n         MVC   L8F(L'L8F),PRGPHNO\n         MVC   L8G(L'L8G),PRGSVNO\n         LA    R7,L8\n         BAS   R8,PRT\n         MVI   L8,C' '\n         LM    R15,R1,SPWTB\n         BXLE  R15,R0,*+L'*+4\n         B     OVRFL\n         USING PRSDSECT,R15\n         MVC   PRSPNUM(L'PRSPNUM),ZONE+L'ZONE-L'PRSPNUM\n         MVC   PRSPBOX,PRGBXNO\n         MVC   PRSPNME,PRGPNME\n         MVC   PRSPMTR,PRGMNO\n         MVC   PRSPBLD,PRGBDNO\n         MVC   PRSPPHN,PRGPHNO\n         MVC   PRSPSRV,PRGSVNO\n         DROP  R15\n         ST    R15,SPWTB\n         L     R15,NPWTB\n         AH    R15,=H'1'\n         ST    R15,NPWTB\n         B     READ\n         DROP  R9\n         EJECT\n*---------------------------------------------------------------------*\n*        LIST BY PROGRAMMERS NAMES IN ASCENDING ALPHA ORDER.          *\n*---------------------------------------------------------------------*\n         SPACE 1\nREND     L     R8,NPWTB\n         CH    R8,=H'1'\n         BL    EOLJ\n         MVC   SPWTB+8(4),SPWTB\n         MVC   SPWTB,APWTB\n         BE    NSORT\n         L     R7,SPWTB\n        $SORT  (R7),(R8),PRSDLG,S1FD,S1FL\nNSORT    MVC   NLI,MAXN\n         MVI   L7A,C'-'\n         MVC   L7A+1(L'L7A-1),L7A\n         MVI   L7B,C'-'\n         MVC   L7B+1(L'L7B-1),L7B\n         MVI   L7C,C'='\n         MVC   L7C+1(L'L7C-1),L7C\nNXTPN    CLC   NLI,GMX\n         BNH   NOSKP\n         XC    NLI,NLI\n         MVC   L1A,DYNDSN\n         MVC   L1B,DATE\n         MVC   L1C,HOUR\n         LH    R0,NPA\n         AH    R0,=H'1'\n         STH   R0,NPA\n         BAS   R14,CNVRT\n         MVC   L1D(L'L1D),ZONE+L'ZONE-L'L1D\n         LA    R7,L1\n         BAS   R8,PRT\n         LA    R7,L6\n         BAS   R8,PRT\n         LA    R7,L7\n         BAS   R8,PRT\n         MVI   L8,C'0'\nNOSKP    LH    R0,NLI\n         AH    R0,=H'1'\n         STH   R0,NLI\n         L     R15,SPWTB\n         USING PRSDSECT,R15\n         MVC   L8A(L'L8A),PRSPNUM\n         MVC   L8B(L'L8B),PRSPBOX\n         MVC   L8C(L'L8C),PRSPNME\n         MVC   L8D(L'L8D),PRSPMTR\n         MVC   L8E(L'L8E),PRSPBLD\n         MVC   L8F(L'L8F),PRSPPHN\n         MVC   L8G(L'L8G),PRSPSRV\n         DROP  R15\n         LA    R7,L8\n         BAS   R8,PRT\n         MVI   L8,C' '\n         LM    R15,R1,SPWTB\n         BXLE  R15,R0,*+L'*+4\n         B     EOLJ\n         ST    R15,SPWTB\n         B     NXTPN\n         EJECT\n*---------------------------------------------------------------------*\n*        LIST BY BOX NUMBERS IN ASCENDING ORDER.                      *\n*---------------------------------------------------------------------*\n         SPACE 1\nEOLJ     L     R8,NPWTB\n         CH    R8,=H'1'\n         BL    EOLB\n         MVC   SPWTB+8(4),SPWTB\n         MVC   SPWTB,APWTB\n         BE    SSORT\n         L     R7,SPWTB\n        $SORT  (R7),(R8),PRSDLG,S2FD,S2FL\nSSORT    MVC   NLI,MAXN\n         MVI   L7A,C'-'\n         MVC   L7A+1(L'L7A-1),L7A\n         MVI   L7B,C'='\n         MVC   L7B+1(L'L7B-1),L7B\n         MVI   L7C,C'-'\n         MVC   L7C+1(L'L7C-1),L7C\nNXTBN    CLC   NLI,GMX\n         BNH   NOTSKP\n         XC    NLI,NLI\n         MVC   L1A,DYNDSN\n         MVC   L1B,DATE\n         MVC   L1C,HOUR\n         LH    R0,NPA\n         AH    R0,=H'1'\n         STH   R0,NPA\n         BAS   R14,CNVRT\n         MVC   L1D(L'L1D),ZONE+L'ZONE-L'L1D\n         LA    R7,L1\n         BAS   R8,PRT\n         LA    R7,L6\n         BAS   R8,PRT\n         LA    R7,L7\n         BAS   R8,PRT\n         MVI   L8,C'0'\nNOTSKP   LH    R0,NLI\n         AH    R0,=H'1'\n         STH   R0,NLI\n         L     R15,SPWTB\n         USING PRSDSECT,R15\n         MVC   L8A(L'L8A),PRSPNUM\n         MVC   L8B(L'L8B),PRSPBOX\n         MVC   L8C(L'L8C),PRSPNME\n         MVC   L8D(L'L8D),PRSPMTR\n         MVC   L8E(L'L8E),PRSPBLD\n         MVC   L8F(L'L8F),PRSPPHN\n         MVC   L8G(L'L8G),PRSPSRV\n         DROP  R15\n         LA    R7,L8\n         BAS   R8,PRT\n         MVI   L8,C' '\n         LM    R15,R1,SPWTB\n         BXLE  R15,R0,*+L'*+4\n         B     EOLB\n         ST    R15,SPWTB\n         B     NXTBN\n         EJECT\n*---------------------------------------------------------------------*\n*        END OF LIST - END OF JOB.                                    *\n*---------------------------------------------------------------------*\n         SPACE 1\nEOLB     XC    NLI,NLI\n         MVC   L1A,DYNDSN\n         MVC   L1B,DATE\n         MVC   L1C,HOUR\n         LH    R0,NPA\n         AH    R0,=H'1'\n         STH   R0,NPA\n         BAS   R14,CNVRT\n         MVC   L1D(L'L1D),ZONE+L'ZONE-L'L1D\n         LA    R7,L1\n         BAS   R8,PRT\n         LA    R7,L9\n         BAS   R8,PRT\n         LA    R7,L10\n         BAS   R8,PRT\n         LA    R2,STAR                 SET STATUS AREA ADDRESSABILITY\n         USING STADSECT,R2\n         MVC   L11A,STADSNM\n         LA    R7,L11\n         BAS   R8,PRT\n         MVC   L12A,STAVLSR\n         MVC   L12B,STADSOR\n         LH    R0,STARECL\n         BAS   R14,CNVRT\n         MVC   L12C(L'L12C),ZONE+L'ZONE-L'L12C\n         LA    R7,L12\n         BAS   R8,PRT\n         L     R0,STANAUT\n         BAS   R14,CNVRT\n         MVC   L13A(L'L13A),ZONE+L'ZONE-L'L13A\n         L     R0,STAUAUT\n         BAS   R14,CNVRT\n         MVC   L13B(L'L13B),ZONE+L'ZONE-L'L13B\n         LA    R7,L13\n         BAS   R8,PRT\n         L     R0,STANPRG\n         BAS   R14,CNVRT\n         MVC   L14A(L'L14A),ZONE+L'ZONE-L'L14A\n         L     R0,STAUPRG\n         BAS   R14,CNVRT\n         MVC   L14B(L'L14B),ZONE+L'ZONE-L'L14B\n         LA    R7,L14\n         BAS   R8,PRT\n         L     R0,STANARG\n         BAS   R14,CNVRT\n         MVC   L15A(L'L15A),ZONE+L'ZONE-L'L15A\n         L     R0,STAUARG\n         BAS   R14,CNVRT\n         MVC   L15B(L'L15B),ZONE+L'ZONE-L'L15B\n         LA    R7,L15\n         BAS   R8,PRT\n         L     R0,STANATB\n         BAS   R14,CNVRT\n         MVC   L16A(L'L16A),ZONE+L'ZONE-L'L16A\n         LA    R7,L16\n         BAS   R8,PRT\n         L     R0,STANMTB\n         BAS   R14,CNVRT\n         MVC   L17A(L'L17A),ZONE+L'ZONE-L'L17A\n         LA    R7,L17\n         BAS   R8,PRT\n         L     R0,STATOTL\n         BAS   R14,CNVRT\n         MVC   L18A(L'L18A),ZONE+L'ZONE-L'L18A\n         LA    R7,L18\n         BAS   R8,PRT\n         DROP  R2\n        CALL  ZCLOSE,(RETCD),VL\n         LTR   R0,R15\n         BNZ   ERRCL\n         LA    R7,L19\n         BAS   R8,PRT\n         XC    DYNDSN,DYNDSN\n        $DYNALL DYNLIST            DYNAMIC DE-ALLOC OF SYSACC\n         XR    R9,R9\nEXRET   $PCLOSE\n        $XRET  CC=(R9)\n         EJECT\n*---------------------------------------------------------------------*\n*        ERROR MESSAGE - EXIT.                                        *\n*---------------------------------------------------------------------*\n         SPACE 1\nOVRFL    LA    R7,OVFMSG\n         BAS   R8,PRT\n         B     ERRPR\nERRZY    XR    R1,R1\n        CALL  ZYDIAG\n         LR    R7,R15\n         BAS   R8,PRT\nERRPR   CALL  ZCLOSE,(RETCD),VL\n         LTR   R0,R15\n         BZ    EXFACC\n         TM    SWITCH,SWE\n         BO    EXFACC\nERRCL    XR    R1,R1\n        CALL  ZYDIAG\n         LR    R7,R15\n         BAS   R8,PRT\n         B     EXFACC\nERRDT    CVD   R15,WORK\n         UNPK  WORK(3),WORK+6(2)\n         OI    WORK+2,C'0'\n         MVC   GFERRRC(2),WORK+1\n        $PRINT GFERR\nEXFACC   LM    R0,R1,LPWTB\n         LTR   R1,R1\n         BZ    NOPWTB\n        FREEMAIN R,A=(1),LV=(0)\nNOPWTB   XC    DYNDSN,DYNDSN\n        $DYNALL DYNLIST            DYNAMIC DE-ALLOC OF SYSACC\n         B     EXERR\nERALL    STM   R15,R0,WORK\n         UNPK  ALLERR15(L'ALLERR15+1),WORK(5)\n         TR    ALLERR15(L'ALLERR15),TRTAB-X'F0'\n         MVI   ALLERR15+L'ALLERR15,C' '\n         UNPK  ALLERR0(L'ALLERR0+1),WORK+4(5)\n         TR    ALLERR0(L'ALLERR0),TRTAB-X'F0'\n         MVI   ALLERR0+L'ALLERR0,C' '\n         PRINT NOGEN\n        $PRINT ALLERR\n         B     EXERR\nUJVTERR $PRINT UJVTMSG\n         B     EXERR\nNOTAUT  $PRINT AUTMSG\nEXERR    LA    R9,16\n         B     EXRET\n         PRINT GEN\n         EJECT\n*---------------------------------------------------------------------*\n*        UTILITY ROUTINES.                                            *\n*---------------------------------------------------------------------*\n         SPACE 1\nCNVRT    CVD   R0,WORK             CONVERT SUBROUTINE.\n         MVC   ZONE,MASK\n         ED    ZONE,WORK\n         BR    R14\n         SPACE 1\nCNVNR    LTR   R0,R0               CONVERT NUMBER SUBROUTINE.\n         BZ    CNVNRM\n         BP    *+L'*+10\n         LPR   R0,R0\n         IC    R15,=C'-'\n         B     *+L'*+4\n         IC    R15,=C'+'\n         CVD   R0,WORK\n         MVC   ZONE,MASK\n         LA    R1,ZONE+L'ZONE-1\n         EDMK  ZONE,WORK\n         BCTR  R1,0\n         STC   R15,0(R1)\n         BR    R14\nCNVNRM   MVC   ZONE+L'ZONE-5(5),=CL5' ****'\n         BR    R14\n         SPACE 1\nEDDTE    CL    R0,=F'99999'        EDIT DATE SUBROUTINE. CHECK DATE?\n         BH    *+L'*+4             NEW FORMAT.\n         AL    R0,=F'1900000'      OLD FORMAT, ADJUST IT.\n         CVD   R0,WORK\n         UNPK  ZONE(7),WORK+4(4)\n         OI    ZONE+6,C'0'\n        $GFDATE ,,WORK,ZONE\n         LTR   R0,R15\n         BNZ   EDDTEM\n         MVC   ZONE(2),WORK+2\n         MVI   ZONE+2,C'/'\n         MVC   ZONE+3(2),WORK\n         MVI   ZONE+5,C'/'\n         MVC   ZONE+6(4),WORK+4\n         BR    R8\nEDDTEM   BAL   R14,CNVRT\n         MVC   ZONE(8),=CL8'RC ='\n         MVC   ZONE+5(2),ZONE+L'ZONE-2\n         BR    R8\n         EJECT\nFILL     MVI   0(R7),C' '          FILL PRG. NO. SUBROUTINE.\n         MVC   1(L4GL-1,R7),0(R7)\n         CLR   R5,R6\n         BER   R8\n         LA    R4,10\nFILLNX   LH    R0,0(R6)\n         BAS   R14,CNVNR\n         MVC   0(5,R7),ZONE+L'ZONE-5\n         LA    R7,6(R7)\n         LA    R6,L'LPG(R6)\n         CLR   R5,R6\n         BER   R8\n         BCT   R4,FILLNX\n         BR    R8\n         SPACE 1\nPRT     $PRINT (R7)                PRINT SUBROUTINE.\n         LTR   R15,R15\n         BZR   R8\n         OI    SWITCH,SWE\n         B     ERRPR               PRINT ERROR ... EXIT.\n         EJECT\n*---------------------------------------------------------------------*\n*        CONSTANTS AND WORK AREAS.                                    *\n*---------------------------------------------------------------------*\n         SPACE 1\nWORK     DC    D'0'\nRETCD    DC    F'0'\nXOPT     DC    C'ONLY'\nNPWTB    DC    F'0'\nLPWTB    DC    F'0'\nAPWTB    DC    A(*-*)\nSPWTB    DC    A(*-*,PRSDLG,*-*)\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTLVL)\nZONE     DC    CL16' '\nMASK     DC    XL16'40202020202020202020202020202120'\nLPG      DC    (AUTNPNF)H'0'\nNAUT     DC    H'0'\nMAXN     DC    0H'0',AL2(NAUTNO)\nOVER     DC    0H'0',AL2(NAUTNO+NPRGNO+1)\nNPA      DC    H'0'\nNLI      DC    0H'0',AL2(NAUTNO)\nLMX      DC    H'46'\nGMX      DC    H'50'\nDATE     DC    CL20' '\nTIME     DC    CL6' '\nHOUR     DC    CL8'  .  .  '\nTRTAB    DC    CL16'0123456789ABCDEF'\n         SPACE 1\nAUTLVL   DC    XL1'0'\nSWITCH   DC    XL1'0'\nSWP      EQU   X'01'\nSWE      EQU   X'02'\n         SPACE 1\nAREA     DC    0F'0',(AUTLGTH)C' '\nSTAR     DC    (STALGTH)X'0' STATUS AREA (SEE STADSECT)\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION PARAMETER LIST.                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0F\nDYNLIST  DC    CL8'SYSACC'\nDYNDSN   DC    CL44' '\n         DC    CL8' '        MEMBER NAME\n         DC    CL8' '        PASSWORD\n         DC    CL8'SHR'      STATUS\n         DC    CL256' '      FILLER\n         DC    CL88' '       FILLER\n         SPACE 1\n*--------------------------------------------------------------------*\n*        ERROR MESSAGES.                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DC    AL1(L'AUTMSG)\nAUTMSG   DC    C'1     UNAUTHORIZED ACCESS TO THIS PROGRAM - EXIT -'\n         DC    AL1(L'UJVTMSG)\nUJVTMSG  DC    C'1     UJVTABLE (IEFUJV) NOT FOUND - EXIT -'\n         DC    AL1(ALLERRL)\nALLERR   DC    C'1     ACCOUNT FILE ALLOC. ERROR - R15='\nALLERR15 DC    CL8' ',C' - R0='\nALLERR0  DC    CL8' ',C' - EXIT -'\nALLERRL  EQU   *-ALLERR\n         DC    AL1(GFERRL)\nGFERR    DC    C'1     GFDATE ROUTINE ERROR - RC = '\nGFERRRC  DC    CL2' ',C' - EXIT -'\nGFERRL   EQU   *-GFERR\n         DC    AL1(L'OVFMSG)\nOVFMSG   DC    C'1     PROGRAM INTERNAL WORK TABLE OVERFLOW - EXIT -'\n         EJECT\n*--------------------------------------------------------------------*\n*        LIST LINES DEFINITIONS.                                     *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DC    AL1(L1L)\nL1       DC    CL22'1     DATA-SET NAME : '\nL1A      DC    CL44' ',C' - '\nL1B      DC    CL20' ',C' - '\nL1C      DC    CL8' ',C' ----- PAGE '\nL1D      DC    CL3' ',C'.'\nL1L      EQU   *-L1\n         DC    AL1(L2L)\nL2       DC    C'0    AUT.   P  FICHE PR.     DEBUT       FIN      '\n         DC    C'RESP.  PROGRAMMER(S) ...'\nL2L      EQU   *-L2\n         DC    AL1(L3L)\nL3       DC    C'     =====  -  ----------  ---------- ----------  '\n         DC    C'-----  '\n         DC    ((10*6)-1)C'-'\nL3L      EQU   *-L3\n         DC    AL1(L4L)\nL4       DC    CL5'0 '\nL4A      DC    CL5' ',CL2' '\nL4B      DC    CL1' ',CL2' '\nL4C      DC    CL10' ',CL2' '\nL4D      DC    CL10' ',CL1' '\nL4E      DC    CL10' ',CL2' '\nL4F      DC    CL5' ',CL2' '\nL4XL     EQU   *-L4\nL4G      DC    ((10*6)-1)C' '\nL4GL     EQU   *-L4G\nL4L      EQU   *-L4\n         DC    AL1(L5L)\nL5       DC    (L4XL)C' '\nL5A      DC    (L4GL)C' '\nL5L      EQU   *-L5\n         DC    AL1(L6L)\nL6       DC    C'0    PROG.  BOX  NAME',CL38' '\n         DC    C'MATR.   BUILD.  PHONE      SERVICE'\nL6L      EQU   *-L6\n         DC    AL1(L7L)\nL7       DC    CL5' '\nL7A      DC    CL5' ',CL2'  '\nL7B      DC    CL3' ',CL2' '\nL7C      DC    CL40' ',CL2' '\n         DC    C'------  ------  ---------  --------'\nL7L      EQU   *-L7\n         DC    AL1(L8L)\nL8       DC    CL5'0 '\nL8A      DC    CL5' ',CL2' '\nL8B      DC    CL3' ',CL2' '\nL8C      DC    CL40' ',CL2' '\nL8D      DC    CL6' ',CL2' '\nL8E      DC    CL6' ',CL2' '\nL8F      DC    CL9' ',CL2' '\nL8G      DC    CL8' '\nL8L      EQU   *-L8\n         DC    AL1(L9L)\nL9       DC    C'0    ACCOUNTING DATA-SET STATUS'\nL9L      EQU   *-L9\n         DC    AL1(L10L)\nL10      DC    C'     =========================='\nL10L     EQU   *-L10\n         DC    AL1(L11L)\nL11      DC    C'0    DATA-SET NAME : '\nL11A     DC    CL44' '\nL11L     EQU   *-L11\n         DC    AL1(L12L)\nL12      DC    C'0    VOLUME SERIAL : '\nL12A     DC    CL6' ',C'    ORGANIZATION : '\nL12B     DC    CL2' ',C'    RECORD LENGTH : '\nL12C     DC    CL5' '\nL12L     EQU   *-L12\n         DC    AL1(L13L)\nL13      DC    C'0    CAPACITIES : '\nL13A     DC    CL7' ',C' AUT. RECORDS - '\nL13B     DC    CL7' ',C' IN USE'\nL13L     EQU   *-L13\n         DC    AL1(L14L)\nL14      DC    CL18' '\nL14A     DC    CL7' ',C' PRG. RECORDS - '\nL14B     DC    CL7' ',C' IN USE'\nL14L     EQU   *-L14\n         DC    AL1(L15L)\nL15      DC    CL18' '\nL15A     DC    CL7' ',C' ARG. RECORDS - '\nL15B     DC    CL7' ',C' IN USE'\nL15L     EQU   *-L15\n         DC    AL1(L16L)\nL16      DC    CL18' '\nL16A     DC    CL7' ',C' ARG. TABLE RECORDS'\nL16L     EQU   *-L16\n         DC    AL1(L17L)\nL17      DC    CL18' '\nL17A     DC    CL7' ',C' MAP TABLE RECORDS'\nL17L     EQU   *-L17\n         DC    AL1(L18L)\nL18      DC    C'0     T O T A L : '\nL18A     DC    CL7' ',C' RECORDS'\nL18L     EQU   *-L18\n         DC    AL1(L19L)\nL19      DC    C'0    --- END OF LIST ---'\nL19L     EQU   *-L19\n         EJECT\n*---------------------------------------------------------------------*\n*        LITERAL POOL.                                                *\n*---------------------------------------------------------------------*\n         SPACE 1\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LTACC$": {"ttr": 21257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//LTACC    JOB (........),'INSTALL - LTACC -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   DYNALL    GFDATE    SUJVTA    TXPRINT    *\n//*                ZPACK     ZYDIAG                                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=LTACC\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(DYNALL,GFDATE,PRINT,SUJVTA,ZOPEN,ZYDIAG)\n  ENTRY   LTACC\n  NAME    LTACC(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LTACC@": {"ttr": 21259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x892_\\x00\\x892_\\x13S\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-21T00:00:00", "modifydate": "1989-11-21T13:53:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "SYSPAJA"}, "text": "1   15/11/89\n                                                      LTACC     1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *           DATA-SET LIST             * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    List the contents of the accounting information\n  ---------    data-set.\n\n  Call of the program :\n  ---------------------\n\n         //LIST    EXEC PGM=LTACC\n         //SYSPRINT  DD SYSOUT=A\n\n         or, for an alternate data-set :\n\n         //LIST    EXEC PGM=LTACC,PARM='...alternate data-set name...'\n         //SYSPRINT  DD SYSOUT=A\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDSPURG$": {"ttr": 21261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//PDSPURGE JOB (........),'INSTALL  -PDSPURGE-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=3\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                TXPRINT                                            *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=PDSPURGE\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT)\n  ENTRY   PDSPURGE\n  NAME    PDSPURGE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSPURG@": {"ttr": 21263, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x855O\\x00\\x855O\\x16\\x14\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-12-20T00:00:00", "modifydate": "1985-12-20T16:14:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      PDSPURGE  1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       P  D  S  P  U  R  G  E        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    The PDS directory cleanup is a program to purge all\n  ---------    members from the directory of partitioned data-sets\n               (DSORG=PO). Use a DD-card with a DDNAME in the form\n               @....... for each partitioned data-set which directory\n               is to be cleared.\n\n  Call of the program :\n  ---------------------\n\n         //CLEAN  EXEC PGM=PDSPURGE\n         //@...     DD --- --- --- --- --- --- --- ---\n         //@...     DD --- Any number of DD-cards. ---\n         //@...     DD --- --- --- --- --- --- --- ---\n         //SYSPRINT DD SYSOUT=A\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDSPURGE": {"ttr": 21505, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882o\\x00\\x882o\\x154\\x010\\x010\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-21T00:00:00", "modifydate": "1988-11-21T15:34:00", "lines": 304, "newlines": 304, "modlines": 0, "user": "SYSPAJA"}, "text": "PDSP     TITLE 'PDS DIRECTORY CLEANUP.'\nPDSPURGE START 0\n         SPACE 1\n* PURPOSE :    PROGRAM TO PURGE ALL MEMBERS FROM THE DIRECTORY OF\n* ---------    PARTITIONED DATA-SETS (DSORG=PO).\n*              USE A DD-CARD WITH A DDNAME IN THE FORM @....... FOR\n*              EACH PARTITIONED DATA-SET WHICH DIRECTORY IS TO BE\n*              CLEARED.\n*\n* CALL OF THE PROGRAM :\n* ---------------------\n*\n*        //CLEAN  EXEC PGM=PDSPURGE\n*        //@...     DD --- --- --- --- --- --- --- ---\n*        //@...     DD --- ANY NUMBER OF DD-CARDS. ---\n*        //@...     DD --- --- --- --- --- --- --- ---\n*        //SYSPRINT DD SYSOUT=A\n         EJECT\nPDSPURGE AMODE  24\nPDSPURGE RMODE  24\n         SPACE 2\n        $DEFREG\n         EJECT\n*---------------------------------------------------------------------*\n*        INITIALIZE PROGRAM.                                          *\n*---------------------------------------------------------------------*\n         SPACE 1\n         $XENT BASE=R10            PDS DIRECTORY PURGE PROGRAM.\n         SPACE 1\n        EXTRACT TIOTADDR,,FIELDS=(TIOT) GET THE TIOT ADDRESS.\n         L     R11,TIOTADDR        LOAD THE ADDRESS OF THE TIOT.\n         SPACE 1\n*---------------------------------------------------------------------*\n*        SCAN THE TIOT ENTRIES FOR A DATA-SET TO BE PURGED.           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING TIODSECT,R11        ESTABLISH ADDRESSABILITY.\nTIOTCHK  CLI   TIOELNGH,0          ZERO LENGTH ENTRY?\n         BE    EXIT                IF SO, NO MORE ENTRIES, EXIT.\n         CLI   TIOEDDNM,C'@'       IS THIS ONE OF THE PURGE DDNAME?\n         BE    PURGE               BRANCH IF IT IS.\nNEXTTIOT XR    R0,R0               CLEAR R0 (WORK REGISTER).\n         IC    R0,TIOELNGH         LOAD LENGTH OF THIS TIOT ENTRY.\n         ALR   R11,R0              ADD IT TO THE TIOT TABLE POINTER.\n         B     TIOTCHK             TRY NEXT ENTRY.\n         DROP  R11                 KILL ADDRESSABILITY.\n         SPACE 1\n*---------------------------------------------------------------------*\n*        RETURN TO SYSTEM AT END OF JOB.                              *\n*---------------------------------------------------------------------*\n         SPACE 1\nEXIT     CP    NDS,=PL1'+0'\n         BE    EXNP\n         ED    DNDS,NDS\n        $PRINT ENDPR\n         B     SETRC\nEXNP    $PRINT ENDNP\nSETRC    LR    R9,R15              SET LAST R.C.\nLEAVE   $PCLOSE\n        $XRET  CC=(R9)\n         SPACE 1\n*---------------------------------------------------------------------*\n*        OPEN DCB OF PDS TO BE PURGED.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING TIODSECT,R11        ESTABLISH ADDRESSABILITY.\nPURGE    LA    R12,PDS             ADDRESS OF DCB.\n         USING IHADCB,R12          ESTABLISH ADDRESSABILITY.\n         MVC   DCBDDNAM,TIOEDDNM   MOVE DDNAME TO DCB.\n         MVC   DDNAME,TIOEDDNM     PUT NAME INTO MESSAGE.\n         DROP  R11                 KILL ADDRESSABILITY.\n        RDJFCB (PDS)               READ JFCB TO GET DSNAME & VOLSER.\n        DEVTYPE DCBDDNAM,AREA,DEVTAB,RPS     GET ALL DATA.\n         MVC   DSNAME,PDSARE       DSNAME OF DATA-SET.\n         MVC   VOLSER,PDSARE+118   VOL=SER OF DATA-SET.\n        OPEN   (PDS,OUTPUT)        OPEN THIS DCB.\n         TM    DCBOFLGS,DCBOFOPN   WAS THE DATA-SET SUCESSFULLY OPENED?\n         BO    OPEN1               BRANCH IF IT WAS.\n         MVC   OPERRD,DDNAME       ERROR MESSAGE.\n         MVC   OPERRV,VOLSER\n         MVC   OPERRN,DSNAME\n        $PRINT OPERR\n         B     TNEXT\nOPEN1    TM    DCBDSORG,DCBDSGPO   IS THE DATA-SET PARTITIONED?\n         BO    OPEN2               BRANCH IF YES.\n         MVC   NPOD,DDNAME         ERROR MESSAGE.\n         MVC   NPOV,VOLSER\n         MVC   NPON,DSNAME\n        $PRINT NPO\n        $PCLOSE\n         ABEND 013,DUMP ---------> ABORT PROGRAM. - - - - - - - - - - -\n         SPACE 1\n*---------------------------------------------------------------------*\n*        CALCULATE THE 'MBBCCHHR' OF THE FIRST DIRECTORY BLOCK.       *\n*---------------------------------------------------------------------*\n         SPACE 1\nOPEN2    STM   R10,R13,CNVTSV      SAVE IMPORTANT REGISTERS.\n         LA    R0,X'00000100'      LOAD THE TTRN 00000100.\n         L     R1,DCBDEBAD         LOAD THE ADDRESS OF THE DEB.\n         LA    R2,PDSSEEK          LOAD THE ADDRESS OF THE OUTPUT AREA.\n         L     R15,CVTPTR          SET UP ADDRESS OF CVT.\n         USING CVT,R15\n         L     R15,CVTPCNVT        LOAD THE ADDRESS OF 'CVTPCNVT'.\n         DROP  R15\n         BASR  R14,R15             CALCULATE 'MBBCCHHR' FROM 'TTRN'.\n         DROP  R10\n         USING *,R14\n         LM    R10,R13,CNVTSV      RESTORE REGISTERS.\n         DROP  R14\n         USING PDSPURGE,R10\n         SPACE 1\n*---------------------------------------------------------------------*\n*        EXECUTE CHANNEL PROGRAM TO RE-WRITE PDS DIRECTORY.           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         MVC   DREWRITE,EFFS\n         B     REXCPIT\nNEXTBLOK MVC   PDSSEEK+3(5),DIRWORK\n         XC    DREWRITE,DREWRITE\nREXCPIT EXCP   PDSIOB              RE-WRITE DIRECTORY.\n        WAIT   ECB=PDSECB          MAKE SURE IT COMPLETES.\n         CLI   PDSECB,IOGOOD\n         BNE   CLIIOER\n         AP    NEXCP,=PL1'+1'\n         B     NEXTBLOK\nCLIIOER  CLI   PDSECB,IOERROR      INSURE THAT WE GOT AN I/O ERROR?\n         BE    EXCP1               BRANCH IF IT WAS.\nEABND   ABEND  001,DUMP ---------> ERROR DURING SIO EXT REQUEST.  - - -\nEXCP1    CLI   PDSIOB+IOBUSTAT,IOBUSB4+IOBUSB5+IOBUSB7 CE/DE/UE?\n         BNE   EABND               SHOULD HAVE GOTTEN UNIT EXCEPTION.\n         TM    PDSIOB+IOBCSTAT,IOBCSBXX INSURE WE DON'T HAVE OTHERS?\n         BNZ   EABND               BRANCH IF NOT WHAT WE EXPECT.\n         SPACE 1\n*---------------------------------------------------------------------*\n*        PERFORM HOUSEKEEPING AT END OF DIRECTORY REWRITE.            *\n*        CALCULATE THE TRACK BALANCE OF THE LAST DIRECTORY TRACK.     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         XC    DCBFDAD,DCBFDAD     CLEAR THE 'MBBCCHHR' FIELD IN DCB.\n         MVC   DCBFDAD+3(5),DIRWORK     INSERT DIRECTORY EOF 'CCHHR'.\n         LA    R7,AREA             LOAD ADDRESS OF THE DVAT TABLE.\n         USING DVAREA,R7           ESTABLISH ADDRESSABILITY.\n         XR    R2,R2\n         IC    R2,DVAUNIT          GET UNIT TYPE.\n         XR    R3,R3\n         ICM   R3,B'0011',DVATRKLN GET LENGTH OF A TRACK.\n         L     R4,RKDD             GET DIR. KEY AND DIR. BLOCK.\n         BAS   R8,CMRTN\n         XR    R4,R4\n         IC    R4,DCBFDAD+7        GET RECORD NO. LAST READ.\n         BCTR  R4,0                BACK IT OFF THE EOF RECORD.\n         LR    R5,R3               GET LENGTH OF A TRACK.\n         SR    R5,R0               COMPUTE RECORD BALANCE.\n         MR    R4,R4               TOTAL DIR. RECORDS BALANCE.\n         L     R4,RKDDEOF          EOF COUNT.\n         LA    R8,CMPT\nCMRTN   TRKCALC FUNCTN=TRKBAL,TYPE=(R2),BALANCE=(R3),RKDD=(R4),        X\n               REGSAVE=YES\n         LTR   R15,R15             COMPLETION?\n         BZR   R8                  OK, RETURN.\n         STC   R15,TBMR+1          ERROR MESSAGE.\n         SRL   R15,4\n         STC   R15,TBMR\n         NC    TBMR,=XL2'0F0F'\n         TR    TBMR,=CL16'0123456789ABCDEF'\n         MVC   TBMD,DDNAME         ERROR MESSAGE.\n         MVC   TBMV,VOLSER\n         MVC   TBMN,DSNAME\n        $PRINT TBM\n         B     TNEXT\nCMPT     SR    R0,R5               SUBSTRACT TOTAL DIR. REC. BALANCE.\n         STH   R0,DCBTRBAL         SET NEW TRACK BALANCE.\n         DROP  R7                  KILL ADDRESSABILITY.\n         SPACE 1\n*---------------------------------------------------------------------*\n*        INDICATE THAT LAST I/O WAS A WRITE AND CLOSE DCB.            *\n*---------------------------------------------------------------------*\n         SPACE 1\n         OI    DCBOFLGS,DCBOFLWR   INDICATE LAST OPERATION WAS A WRITE.\n         CLOSE (PDS)               CLOSE THE DCB, LET SYSTEM DO WORK.\n         MVC   WORK(L'WORK),=XL8'4020202020202120' DISPLAY EXCP COUNT.\n         ED    WORK,NEXCP\n         MVC   DEXCP(L'DEXCP),WORK+L'WORK-L'DEXCP\n         ZAP   NEXCP,=PL1'+1'      ZERO COUNT.\n         AP    NDS,=PL1'+1'\n        $PRINT PURGED\nTNEXT    LTR   R9,R15              ANY PRINT ERROR?\n         BZ    NEXTTIOT            NO, CHECK NEXT TIOT ENTRY.\n         B     LEAVE               YES, QUIT.\n         EJECT\n*---------------------------------------------------------------------*\n*        DATA CONSTANTS, EQUATES, AND WORK-AREAS.                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nCNVTSV   DC    4F'0'\nTIOTADDR DC    A(*-*)              TIOT ADDRESS.\nRKDD     DC    0F'0',AL1(1,DIRKEY),AL2(DIRBLK)\nRKDDEOF  DC    0F'0',AL1(1,0),AL2(1)\nWORK     DC    XL8'0'\nEFFS     DC    X'FFFFFFFFFFFFFFFF',X'000E'\n         DC    X'FFFFFFFFFFFFFFFF',X'00000000'\nDREWRITE DC    XL22'0'\n         SPACE 1\nDIRWORK  DC    XL256'0'\nPDSECB   DC    F'0'                CHANNEL PROGRAM EVENT CONTROL BLOCK.\nPDSIOB   DC    A(0,PDSECB,0,0,DIRPROG,PDS,0,0)\n         ORG   PDSIOB\n         DC    X'42'\n         ORG\n         SPACE 1\nPDSSEEK  DC    XL8'0'              MBBCCHHR.\n         SPACE 1\nDIRPROG  CCW   SRCHIDEQ,PDSSEEK+3,CC,5\n         CCW   TIC,*-8,0,0\n         CCW   WRITEKD,DREWRITE,CC+SILI,22\nLOOP     CCW   RDCNT+MT,DIRWORK,CC,8\n         CCW   RDKDATA,DIRWORK,SKIP,256+8\n         SPACE 1\nNEXCP    DC    PL4'+1'\nNDS      DC    PL2'+0'\n         DC    AL1(OPERRL)\nOPERR    DC    CL6'0 ',C'OPEN ERROR FOR : //'\nOPERRD   DC    CL8' ',C' DD VOL=SER='\nOPERRV   DC    CL6' ',C',DSN='\nOPERRN   DC    CL44' '\nOPERRL   EQU   *-OPERR\n         DC    AL1(NPOL)\nNPO      DC    CL6'0 ',C'NOT DSORG=PO FOR : //'\nNPOD     DC    CL8' ',C' DD VOL=SER='\nNPOV     DC    CL6' ',C',DSN='\nNPON     DC    CL44' '\nNPOL     EQU   *-NPO\n         DC    AL1(TBML)\nTBM      DC    CL6'0 ',C'TRK-BAL ERROR (RC='\nTBMR     DC    CL2' ',C') FOR : //'\nTBMD     DC    CL8' ',C' DD VOL=SER='\nTBMV     DC    CL6' ',C',DSN='\nTBMN     DC    CL44' '\nTBML     EQU   *-TBM\n         DC    AL1(PURGEDL)\nPURGED   DC    CL6'0 '\nDEXCP    DC    CL5' ',C' DIR.-BLOCKS PURGED FOR : //'\nDDNAME   DC    CL8' ',C' DD VOL=SER='\nVOLSER   DC    CL6' ',C',DSN='\nDSNAME   DC    CL44' '\nPURGEDL  EQU   *-PURGED\n         DC    AL1(ENDPRL)\nENDPR    DC    C'0 --- END :'\nDNDS     DC    XL4'40202120',C' PARTITIONED DATA-SETS PURGED.'\nENDPRL   EQU   *-ENDPR\n         DC    AL1(L'ENDNP)\nENDNP    DC    C'0 --- END : NO DATA-SETS PROCESSED.'\n         SPACE 1\nPDS     DCB    DDNAME=PDS,MACRF=E,DSORG=PO,DEVD=DA,EXLST=PDSEXL\nPDSEXL   DC    X'07',AL3(PDSARE)\n         DS    0D\nPDSARE   DC    CL176' '\nAREA     DC    5D'0'\n         EJECT\nIOERROR  EQU   X'41'               ECB RTN CODE FOR I/O ERROR.\nIOGOOD   EQU   X'7F'               ECB RTN CODE FOR GOOD COMPL.\n         SPACE 1\nIOBUSTAT EQU   12                  CSW UNIT STATUS FLAGS (IOB).\nIOBUSB4  EQU   X'08'               CHANNEL END (IOB).\nIOBUSB5  EQU   X'04'               DEVICE END (IOB).\nIOBUSB7  EQU   X'01'               UNIT EXCEPTION (IOB).\nIOBCSTAT EQU   13                  CSW CHANNEL STATUS FLAGS (IOB).\nIOBCSB2  EQU   X'20'               PROGRAM CHECK (IOB).\nIOBCSB3  EQU   X'10'               PROTECTION CHECK.\nIOBCSB4  EQU   X'08'               CHANNEL DATA CHECK.\nIOBCSB5  EQU   X'04'               CHANNEL CONTROL CHECK.\nIOBCSB6  EQU   X'02'               INTERFACE CONTROL CHECK.\nIOBCSB7  EQU   X'01'               CHAINING CHECK.\nIOBCSBXX EQU   IOBCSB2+IOBCSB3+IOBCSB4+IOBCSB5+IOBCSB6+IOBCSB7 2-7 BITS\n         SPACE 1\nDIRBLK   EQU   256                 LENGTH OF A DIRECTORY BLOCK.\nDIRKEY   EQU   8                   LENGTH OF A DIRECTOR KEY.\n         SPACE 1\nCC       EQU   X'40'               COMMAND CHAINING.\nSILI     EQU   X'20'               SUPPRESS INCORRECT LENGTH.\nSKIP     EQU   X'10'               SUPRESS DATA TRANSFER TO STORAGE.\n         SPACE 1\nMT       EQU   X'80'               MULTI TRACK.\nTIC      EQU   X'08'               TRANSFER IN CHANNEL.\nSRCHIDEQ EQU   X'31'               SEARCH ID EQUAL.\nWRITEKD  EQU   X'0D'               WRITE KEY + DATA.\nRDCNT    EQU   X'12'               READ COUNT.\nRDKDATA  EQU   X'0E'               READ DATA.\n         SPACE 2\n        LTORG\n         EJECT\n*---------------------------------------------------------------------*\n*        DSECT'S.                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n        IHADVA\n         SPACE 2\n         PRINT NOGEN\n        CVT    DSECT=YES,LIST=YES\n        DCBD   DSORG=PO,DEVD=DA\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PVSD": {"ttr": 21511, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882o\\x00\\x882o\\x15A\\x00\\xa5\\x00\\xa5\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-21T00:00:00", "modifydate": "1988-11-21T15:41:00", "lines": 165, "newlines": 165, "modlines": 0, "user": "SYSPAJA"}, "text": "PVSD     TITLE 'PRINT VARIABLE SYSOUT DATA-SETS - TSO UTILITY.'\nPVSD     START 0\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *   PRINT VARIABLE SYSOUT DATA-SETS   * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *            TSO UTILITY.             * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    QUEUE AN OUTPUT DATA-SET ON DISK FOR PRINT.            *\n* ---------                                                           *\n*                                                                     *\n* CALL OF THE PROGRAM :                                               *\n* ---------------------                                               *\n*                                                                     *\n*        //OUT       EXEC  PGM=PVSD                                   *\n*        //SYSPRINT    DD  SYSOUT=A                                   *\n*        //SYSVRIN     DD  --- DATA-SET TO BE QUEUED FOR PRINT ---    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n        $DEFREG\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nLLG      EQU   133                 PRINT LINE LENGTH.\nON       EQU   X'F0'               CLOSE SWITCH.\nOFF      EQU   X'0F'               OPEN SWITCH.\n         EJECT\n        $XENT  BASE=R12\n         SPACE 1\n        $VOPEN LGREC\n         LTR   R15,R15\n         BNZ   ERRVOP\n         L     R2,LGREC            ROUND UP TO 8 THE MAX. LENGTH.\n         LA    R2,7(R2)\n         SRL   R2,3\n         SLL   R2,3\n         ST    R2,ALG\n        GETMAIN    EC,LV=(2),A=AREC\n         LTR   R15,R15\n         BNZ   ERRGET\n         L     R3,AREC             RECORD AREA ADDRESS.\n         LA    R0,LLG              COMPUTE TRUE PRINT LINE LENGTH.\n         CLR   R2,R0\n         BNH   *+L'*+2\n         LR    R2,R0\n         BCTR  R2,0\n         BCTR  R2,0\n         SPACE 2\nREAD     MVI   0(R3),C' '          RESET TO BLANKS THE READ AREA.\n         EX    R2,RESET\n        $VREAD (R3)\n         LTR   R15,R15\n         BM    ENDR\n         BNZ   ERRVRD\n         SPACE 1\n*        ASA CONTROL CHARACTERS.\n         SPACE 1\n         CLI   0(R3),C' '          ADVANCE ONE LINE BEFORE PRINTING.\n         BE    PRNT\n         CLI   0(R3),C'0'          ADVANCE TWO LINES BEFORE PRINTING.\n         BE    PRNT\n         CLI   0(R3),C'1'          ADVANCE TO FIRST LINE OF NEXT PAGE.\n         BE    PRNT\n         CLI   0(R3),C'+'          NO ADVANCE.\n         BE    PRNT\n         CLI   0(R3),C'-'          ADVANCE THREE LINES BEFORE PRINTING.\n         BE    PRNT\n         SPACE 1\n*        MACHINE CONTROL CHARACTERS.\n         SPACE 1\n         CLI   0(R3),X'01'         WRITE, NO SPACE.\n         BE    ASA3\n         CLI   0(R3),X'09'         WRITE, SPACE 1 AFTER PRINT.\n         BE    ASA1\n         CLI   0(R3),X'11'         WRITE, SPACE 2 AFTER PRINT.\n         BE    ASA5\n         CLI   0(R3),X'19'         WRITE, SPACE 3 AFTER PRINT.\n         BE    ASA6\n         CLI   0(R3),X'89'         WRITE, SKIP TO CHANNEL 1 AFTER PRINT\n         BE    ASA7\n         CLI   0(R3),X'0B'         SPACE 1 IMMEDIATELY.\n         BE    ASA1\n         CLI   0(R3),X'13'         SPACE 2 IMMEDIATELY.\n         BE    ASA2\n         CLI   0(R3),X'1B'         SPACE 3 IMMEDIATELY.\n         BE    ASA6\n         CLI   0(R3),X'8B'         SKIP TO CHANNEL 1 IMMEDIATELY.\n         BE    ASA4\nASA1     MVI   0(R3),C' '\n         B     PRNT\nASA2     MVI   0(R3),C'0'\n         B     PRNT\nASA3     MVI   0(R3),C'+'\n         B     PRNT\nASA4     MVI   0(R3),C'1'\n         B     PRNT\nASA5     MVI   LINE,C' '\n         B     ASAP\nASA6     MVI   LINE,C'0'\n         B     ASAP\nASA7     MVI   LINE,C'1'\nASAP     MVI   0(R3),C' '\n         NI    SWASA+1,OFF\nPRNT    $PRINT (R3),LGREC\n         LTR   R15,R15\n         BNZ   ERRPRT\nSWASA    B     READ\n         OI    SWASA+1,ON\n        $PRINT LINE,LLGTH\n         LTR   R15,R15\n         BNZ   ERRPRT\n         B     READ\n         SPACE 1\nRESET    MVC   1(*-*,R3),0(R3)     << EXECUTED >>\n         SPACE 2\nERRVOP   MVC   DIAG+4(L'VOP),VOP\n         B     DECODE\nERRGET   MVC   DIAG+4(L'GET),GET\n         B     DECODE\nERRVRD   MVC   DIAG+4(L'VRD),VRD\n         B     DECODE\nERRPRT   MVC   DIAG+4(L'PRT),PRT\nDECODE   CVD   R15,CONV\n         UNPK  DIAG+21(2),CONV+6(2)\n         OI    DIAG+22,C'0'\n        WTO    MF=(E,DIAG)\n         LA    R10,16              SET CC = 16.\n         B     ENDR+L'ENDR\nENDR     XR    R10,R10             SET CC = 0.\n        $VCLOSE\n         L     R2,ALG\n        FREEMAIN   E,LV=(2),A=AREC\n        $PCLOSE\n         LR    R15,R10             SET RETURN CODE.\n        $XRET  CC=(15)\n         SPACE 1\n         DROP  R12\n         EJECT\n        LTORG\n         SPACE 2\n*        CONSTANTS AND WORK AREAS.\n         SPACE 1\nCONV     DC    D'0'\nAREC     DC    A(*-*)\nALG      DC    A(*-*)\nLLGTH    DC    A(LLG)\nLGREC    DC    F'0'\nDIAG    WTO    '         - ERROR    DETECTED. -EXIT-',MF=L\nLINE     DC    CL133' '\nVOP      DC    C'VOPEN'\nGET      DC    C'GETMAIN'\nVRD      DC    C'VREAD'\nPRT      DC    C'PRINT'\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PVSD$": {"ttr": 21515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//PVSD     JOB (........),'INSTALL - P V S D -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                TXPRINT   VREAD                                    *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=PVSD\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,VREAD)\n  ENTRY   PVSD\n  SETCODE AC(1)\n  NAME    PVSD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PVSD@": {"ttr": 21517, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x855O\\x00\\x855O\\x16\\x14\\x00\\x14\\x00\\x14\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-12-20T00:00:00", "modifydate": "1985-12-20T16:14:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      PVSD      1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *   PRINT VARIABLE SYSOUT DATA-SETS   * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *            TSO UTILITY.             * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Queue an output data-set on disk for print.\n  ---------\n\n  Call of the program :\n  ---------------------\n\n         //OUT       EXEC  PGM=PVSD\n         //SYSPRINT    DD  SYSOUT=A\n         //SYSVRIN     DD  --- Data-set to be queued for print ---\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RACFXIT$": {"ttr": 21519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x9f\\x00\\x944\\x9f\\x15Y\\x000\\x000\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-15T00:00:00", "modifydate": "1994-12-15T15:59:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "SYSPAJA"}, "text": "//RACFXITS JOB (........),'INSTALL RACF-EXITS',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*       RACF EXITS : RE-LINK INTO LPALIB.                           *\n//* ---------- ADJUSTMENTS MUST BE DONE BEFORE YOU RUN THIS JOB (SCAN *\n//*            ALL \"->\" OCCURENCES AND SET RIGHT DATA-SETS NAMES),    *\n//*            AND VOL=SER=...... MUST BE COMPLETE.                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*       THE FOLLOWING TWO EXITS ARE NOW OBSOLETED AT OUR            *\n//*       INSTALLATION (91/03/15)                                     *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//LNKP    EXEC PGM=IEWL,\n//             PARM='LIST,XREF,NCAL,RENT,REFR,AC=1,SIZE=(512K,128K)'\n//SYSLMOD   DD UNIT=DISK,VOL=SER=......,DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIBL   DD DSN=->.TARGET.RTNLIB,DISP=SHR\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD *\n    INCLUDE   SYSLIBL(ICHCNX00)\n    ENTRY     ICHCNX00\n NAME    ICHCNX00(R)\n    INCLUDE   SYSLIBL(ICHRCX01)\n    ENTRY     ICHRCX01\n NAME    ICHRCX01(R)\n/*\n//LNKS    EXEC PGM=IEWL,\n//             PARM='LIST,XREF,NCAL,RENT,SIZE=(512K,128K)'\n//SYSLMOD   DD UNIT=DISK,VOL=SER=......,DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIBL   DD DSN=->.TARGET.RTNLIB,DISP=SHR\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD *\n    INCLUDE   SYSLIBL(ICHRIN03)\n    ENTRY     ICHRIN03\n NAME    ICHRIN03(R)\n/*\n//LNKL    EXEC PGM=IEWL,\n//             PARM='LIST,XREF,NCAL,SIZE=(512K,128K)'\n//SYSLMOD   DD UNIT=DISK,VOL=SER=......,DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLIBL   DD DSN=->.TARGET.RTNLIB,DISP=SHR\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD *\n    INCLUDE   SYSLIBL(ICHRDSNT)\n    ENTRY     ICHRDSNT\n NAME    ICHRDSNT(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFXIT@": {"ttr": 21761, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x08?\\x00\\x87\\x08?\\x16\\x01\\x003\\x003\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-03-24T00:00:00", "modifydate": "1987-03-24T16:01:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "SYSPAJA"}, "text": "1   19/09/85\n                                                    RACF EXITS  1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       R A C F  :  LOCAL EXITS.      * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  ICHCNX00 : Command pre-processing routine.\n  ----------\n\n         Purpose : Users who are not allowed to use RACF for data-sets\n                   protection must be avoid from access the ADDSD,\n                   ALTDSD, DELDSD and PERMIT commands.\n\n         Method :  A user who don't have the ADSP attribute or the\n                   installation data field containing the keyword\n                   ALLOWED will be rejected.\n\n         Note :    A user having the ADSP attribute can use the RACF\n                   protection commands, and any new created data-set\n                   by this user is automatically RACF defined.\n                   For a user, without ADSP attribute, but ALLOWED,\n                   the new created data-sets are not automatically\n                   RACF defined, but he is allowed to do it using the\n                   RACF protection commands when he needs it.\n\n  ICHRCX01 : RACHECK pre-processing routine.\n  ----------\n\n         Purpose : Establish fast path authorization checking for\n                   owners of data-sets.\n\n         Method :  The profile check is bypassed if the request is for\n                   DATASET class, with the access not ALTER, and\n                   the first level qualifier is the USER-id itself.\n\n  ICHRDSNT : Data-set name table.\n  ----------\n\n         Purpose : Describe the RACF data-sets to RACF.\n\n  ICHRIN03 : Started procedures table.\n  ----------\n\n         Purpose : Associate the names of started procedures to USERID\n                   and GROUP names.\n\n  Exits LINK-EDIT : See job RACFXIT$.\n  =================\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RENAMP": {"ttr": 21763, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x12o\\x00\\x94\\x12o\\tV\\x00\\x80\\x00\\x80\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-06T00:00:00", "modifydate": "1994-05-06T09:56:00", "lines": 128, "newlines": 128, "modlines": 0, "user": "SYSPAJA"}, "text": "RNMP     TITLE 'RENAME PARTITIONED DATA-SET MEMBERS.'\nRENAMP   START 0\n         SPACE 1\n* PURPOSE :    RENAME ONE OR MORE MEMBERS OF A PARTITIONED DATA-SET.\n* ---------    AT EXIT : REGISTER 15 = 0 - RENAME(S) DONE,\n*                                      16 - ERROR DETECTED.\n*\n* FILE NAME :  DD-NAME 'SYSUT0'  - INPUT DATA-SET (DSORG=PO).\n* -----------\n*\n* TSO ACCESS : MAY BE USED IN A CLIST AS DESCRIBED BELOW.\n* ------------\n*              ALLOC F(SYSUT0) DA(...DATA-SET NAME...)\n*              RENAMP &LIST ---> '... PAIR OF NAMES ...' WHERE EACH\n*                                PAIR IS THE OLD AND NEW MEMBER NAME\n*              WHEN SYSRC(NE 0) ---> ERROR DETECTED\n*              ---> MEMBERS RENAMED\n         SPACE 1\nRENAMP  AMODE  24\nRENAMP  RMODE  24\n         SPACE 1\n        $DEFREG\n         EJECT\n        $XENT  BASE=R12\n         LR    R8,R1               SAVE PARM. FIELD ADDRESS\n         XR    R10,R10             RC = 0 -----------------------------\n        $TEW$EC NOTTSO=CALLM,NOTCMD=CALLM,MSG=PUTMSG,ERR=SETRC\n        $TEW$PP PARM=PARMLST\n         TM    LMN+6,X'80'         LIST SPECIFIED?\n         BZ    SETRC               NO\n         L     R4,LMN              GET POINTER TO LIST\n         LH    R3,LMN+4            GET LENGTH\n         LTR   R3,R3\n         BNP   SETRC\n         STH   R3,HW\n         B     LOOK\n         DROP  R2\n         SPACE 1\nCALLM    L     R1,0(R8)            PARM. LIST\n         LH    R2,0(R1)            PARM. FIELD LENGTH\n         LTR   R2,R2               ANY PARM?\n         BNP   SETRC               NO, GO BACK\n         STH   R2,HW\n         LA    R4,2(R1)            START OF PARM. FIELD\nLOOK     LR    R2,R4\n        OPEN   (UT0,OUTPUT)\n         TM    UT0+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    SETRC\n         SPACE 1\n         LA    R3,1                PARM. POSITION COUNTER\nINIZMEMB LA    R5,MEMB\n         XR    R2,R2               MEMBER NAME CHARACTERS COUNTER\n         MVC   0(8,R5),=CL8' '     SET BLANKS MEMBER NAME\n         CH    R3,HW               END OF PARM. FIELD?\n         BH    FISK                YES\n         CLI   0(R4),C'Z'\n         BH    SKIPTHIS\nINTNAME  CH    R3,HW\n         BH    FISK\n         CLI   0(R4),C'$'\n         BE    OKTHIS\n         CLI   0(R4),C'@'\n         BE    OKTHIS\n         CLI   0(R4),C'#'\n         BE    OKTHIS\n         CLI   0(R4),C'A'\n         BL    SKIPTHIS\nOKTHIS   MVC   0(1,R5),0(R4)       MOVE NAME'S CHARACTER\n         LA    R2,1(R2)\n         LA    R3,1(R3)\n         LA    R4,1(R4)\n         LA    R5,1(R5)\n         CH    R2,=H'8'\n         BNL   SCRAMEMB\n         B     INTNAME\nFISK     CH    R2,=H'0'\n         BE    EODAD\n         B     SCRAMEMB\nSKIPTHIS LA    R3,1(R3)\n         LA    R4,1(R4)\n         CH    R2,=H'0'\n         BE    INIZMEMB\nSCRAMEMB CLC   OLDNAME(8),=CL8' '\n         BNE   *+L'*+10\n         MVC   OLDNAME,MEMB\n         B     INIZMEMB\n         CLC   NEWNAME(8),=CL8' '\n         BNE   QUIT\n         MVC   NEWNAME(8),MEMB\n        STOW   UT0,OLDNAME,C\n         LTR   R15,R15\n         BZ    *+L'*+2\n         LR    R10,R15\n         MVC   OLDNAME,=CL8' '\n         MVC   NEWNAME,=CL8' '\n         B     INIZMEMB\n         SPACE 1\nQUIT     LA    R10,*\nEODAD   CLOSE  (UT0)\n         LTR   R10,R10\n         BZ    LEAVE\nSETRC    LA    R10,16              RC = 16 ----------------------------\nLEAVE   IKJRLSA #TSANSW\n        $XRET  CC=(R10)\n         EJECT\n*------- CONSTANTS AND WORK-AREAS.\n         SPACE 1\n        $TEW$WA\n         SPACE 1\nMEMB     DC    CL8' '              NAME WORK AREA\nOLDNAME  DC    CL8' '              NAME OF MEMBER TO CHANGE\nNEWNAME  DC    CL8' '              NEW MEMBER NAME\nHW       DC    H'0'\n         SPACE 1\n        LTORG\n         SPACE 1\nUT0     DCB    DSORG=PO,DDNAME=SYSUT0,MACRF=W\n         EJECT\nPARMLST IKJPARM\nLMN     IKJPOSIT QSTRING,PROMPT='MEMBER-NAMES'\n        IKJENDP\n         SPACE 1\n        PRINT  NOGEN\n        $TEW$DS\n        DCBD   DSORG=PO,DEVD=DA\n        PRINT  GEN\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RENAMP$": {"ttr": 21766, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16(\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:28:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//RENAMP   JOB (........),'INSTALL  -RENAMP-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=5\n//ASS     EXEC PAJ2AS3,MBR=RENAMP\n//LNK     EXEC PAJILKC\n//SYSIN     DD *\n  ENTRY   RENAMP\n  NAME    RENAMP(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RENAMP@": {"ttr": 21768, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x12_\\x00\\x94\\x12_\\x167\\x00\\x19\\x00\\x19\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-05T00:00:00", "modifydate": "1994-05-05T16:37:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      RENAMP    1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *         RENAME PARTITIONED          * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *          DATA-SET MEMBERS           * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Rename one or more members of a partitioned data-set.\n  ---------    At exit : register 15 = 0 - rename(s) done,\n                                       16 - error detected.\n\n  File name :  DD-name SYSUT0  - input data-set (DSORG=PO).\n  -----------\n\n  TSO access : may be used in a CLIST as described below.\n  ------------\n               ALLOC F(SYSUT0) DA(...data-set name...)\n               RENAMP &LIST ---> '... pair of names ...' where each\n                                 pair is the old and new member name\n               WHEN SYSRC(NE 0) ---> error detected\n               ---> members renamed\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RSMANAL": {"ttr": 21770, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x91'O\\x00\\x91'O\\x12\\x00\\x07H\\x07H\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-01T00:00:00", "modifydate": "1991-10-01T12:00:00", "lines": 1864, "newlines": 1864, "modlines": 0, "user": "SYSPAJA"}, "text": "RSMA     TITLE 'RSMANAL - RSM ANALYSIS.'\n        PRINT  OFF\n         MACRO           SAVE AREA'S TANK MANAGEMENT\n&NAME   @ENTER &DUMMY\n        CNOP   0,4\n         USING &NAME,R11           SET LOCAL ADDRESSABILITY\n&NAME    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R11,R15             SET LOCAL BASE REGISTER\n         CP    TANKNO,TANKMX       CONTROL TANK AVAILABILITY\n         BNL   STOVER              OVERFLOW\n         AP    TANKNO,TANKUP       UP TANKS NUMBER\n         LA    R15,18*4(R13)       NEXT SAVE AREA\n         XC    0(18*4,R15),0(R15)  CLEAR IT\n         ST    R15,8(R13)          LINK SAVE AREAS\n         ST    R13,4(R15)\n         LR    R13,R15             ACTIVATE NEW SAVE AREA\n         MEND\n         MACRO           SAVE AREA'S TANK MANAGEMENT\n&NAME   @EXIT  &DUMMY\n&NAME    CP    TANKNO,TANKUP       CONTROL TANK AVAILABILITY\n         BL    STUNDER             UNDERFLOW\n         SP    TANKNO,TANKUP       DOWN TANKS NUMBER\n         L     R13,4(R13)          PREVIOUS SAVE AREA\n         ST    R15,16(R13)         SET REGISTER 15 (RC)\n         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS\n         MVI   12(R13),X'FF'       INDICATE RETURN EXECUTED\n         BR    R14                 RETURN\n         DROP  R11                 KILL LOCAL ADDRESSABILITY\n         MEND\n         MACRO           CALL ROUTINE\n&NAME   @CALL  &WHERE\n         AIF   ('&WHERE' EQ '').CO\n&NAME    L     R15,=A(&WHERE)      GET ENTRY POINT\n         BASR  R14,R15             GO TO ROUTINE\n         MEXIT\n.CO      ANOP\n&NAME    BASR  R14,R15             GO TO ROUTINE\n         MEND\n         MACRO           GENERATE TABLE ENTRY\n&NAME   @TPF   &Q,&I,&F\n         AIF   ('&F' EQ '').NN\n&NAME    DC    3F'0',XL1'&Q',AL1(&F),CL34&I\n         MEXIT\n.NN      ANOP\n&NAME    DC    3F'0',XL1'&Q',AL1(0),CL34&I\n         MEND\n         MACRO           GENERATE TABLE ENTRY\n&NAME   @TPE   &Q,&I\n&NAME    DC    3F'0',XL1'&Q',AL1(0),CL34&I\n         MEND\n        PRINT  ON\n         SPACE 1\nRSMANAL  START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *            RSM  ANALYSIS            * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    THIS PROGRAM PRODUCES A LISTING OF RSM INFORMATION     *\n* ---------    FOR SPECIFIED STORAGE AREAS.                           *\n*                                                                     *\n* CALL OF THE PROGRAM :                                               *\n* ---------------------                                               *\n*                                                                     *\n*        //LIST   EXEC  PGM=RSMANAL,PARM='...'                        *\n*        //SYSPRINT DD  SYSOUT=A                                      *\n*        //SYSSNAP  DD  SYSOUT=A (ONLY IF DEBUG NEEDED)               *\n*                                                                     *\n*        WHERE ... IS USED TO SPECIFY THE DESIRED STORAGE AREAS,      *\n*              AND MAY BE ANY ONE OF THE FOLLOWING KEYWORDS :         *\n*                   VSM  - VIRTUAL STORAGE MAP                        *\n*                   PFTE - PAGE FRAME TABLE ENTRIES                   *\n*                   ESTE - EXTENDED STORAGE TABLE ENTRIES             *\n*              OR IF MORE THAN ONE DESIRED, THEY MUST BE SEPARATED    *\n*              BY A COMMA.                                            *\n*                   I.E. : PARM='PFTE,ESTE'                           *\n*        ALSO ALTERNATE DD-NAMES MAY BE SPECIFIED FOR THE LIST OR     *\n*              SNAP OUTPUT, AS SHOWN BELOW :                          *\n*                   PARM='L=MYPRINT,S=MYSNAP'                         *\n*        IF NO PARM= IS GIVEN, DEFAULT IS ASSUMED LIKE :              *\n*                   PARM='PFTE,L=SYSPRINT,S=SYSSNAP'                  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nMXSTN    EQU   10                  MAXIMUM NUMBER OF SAVE-AREAS USE\n*                                    TO BE GENERATED AS TANKS\nWKLEN    EQU   (MXSTN*18)*4        SAVE AREAS TANKS\nKB       EQU   1024                1K BYTES\n         EJECT\n        $DEFREG ,\n        $XENT  BASE=R12,LV=WKLEN,TYPE=RENT\n         EJECT\n*------- INITIALIZATION\n         SPACE 1\n         ST    R13,SVFSVA          SAVE ADDRESS OF FIRST S.A.\n         LA    R2,18*4(R13)        TANKS INITIALIZATION\n         L     R3,=A(WKLEN-(18*4))\n         LR    R4,R2\n         XR    R5,R5\n         MVCL  R2,R4\n         LA    R2,MXSTN\n         CVD   R2,DBLWRD\n         MVC   TANKMX(L'TANKMX),DBLWRD+L'DBLWRD-L'TANKMX\n         SPACE 1\n*------- START PROCESSING\n         SPACE 1\n        @CALL  GETPARM             R1 = ADDRESS OF PARM=\n        @CALL  DOVSM               DO VSM MAP\n        @CALL  COLLAS              COLLECT AS-ID'S\n         TM    SWSEL,SPFTE\n         BZ    ESTERQ\n        @CALL  PFTELS              PFTE'S LIST\nESTERQ   TM    SWSEL,SESTE\n         BZ    SETRC\n        @CALL  ESTELS              ESTE'S LIST\n         SPACE 1\n*------- TERMINATION\n         SPACE 1\nSETRC    XR    R10,R10\nLEAVE   $PCLOSE\n         ICM   R0,B'1111',LGASTB\n         BZ    QUIT\n         L     R1,SCASTB\n        FREEMAIN R,A=(1),LV=(0)    FREE AREA\nQUIT    $XRET  CC=(R10),LV=WKLEN,TYPE=RENT\n         SPACE 1\n*------- ERRORS DIAGNOSE\n         SPACE 1\nSTOVER   XR    R0,R0\n         B     STUNDER+L'STUNDER\nSTUNDER  LR    R0,R13\n         MVC   MSGERRT(18),=CL18'SAVE AREA''S TANKS '\n         LTR   R0,R0\n         BNZ   *+L'*+10\n         MVC   MSGERRT+18(33),=CL33'OVERFLOW (CHECK VALUE OF \"MXSTN\")'\n         B     *+L'*+6\n         MVC   MSGERRT+18(33),=CL33'UNDERFLOW *** S C R A M B L E ***'\n         B     ERRMSG\nERRV    $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         MVC   MSGERRT(28),=CL28'AS-ID''S SPACE TABLE OVERFLOW'\n         B     ERRMSG\nERRE     MVC   MSGERRT(24),=CL24'UNKNOWN ESTE QUEUE ID : '\n         USING ESTE,R5\n         UNPK  MSGERRT+24(3),ESTQID(2)\n         DROP  R5\n         B     ERRMTR\nERRP     MVC   MSGERRT(24),=CL24'UNKNOWN PFTE QUEUE ID : '\n         USING PFTE,R5\n         UNPK  MSGERRT+24(3),PFTQID(2)\n         DROP  R5\nERRMTR   TR    MSGERRT+24(2),TRTAB-C'0'\n         MVI   MSGERRT+26,C' '\n         B     ERRMSG\nERRG     MVC   MSGERRT(19),=CL19'GFDATE ERROR / RC ='\n         CVD   R15,DBLWRD          DISPLAY R.C.\n         MVC   MSGERRT+19(4),=XL4'40202120'\n         ED    MSGERRT+19(4),DBLWRD+6\n         B     ERRMSG\nERRS     MVC   MSGERRT(17),=CL17'SNAP ERROR / RC ='\n         CVD   R15,DBLWRD          DISPLAY R.C.\n         MVC   MSGERRT+17(4),=XL4'40202120'\n         ED    MSGERRT+17(4),DBLWRD+6\n         B     ERRMSG\nERRX     MVC   MSGERRT(18),=CL18'PRINT ERROR / RC ='\n         CVD   R15,DBLWRD          DISPLAY R.C.\n         MVC   MSGERRT+18(4),=XL4'40202120'\n         ED    MSGERRT+18(4),DBLWRD+6\n         B     ERRMSG\nERRZ     MVC   MSGERRT(27),=CL27'INVALID PARAMETER SPECIFIED'\nERRMSG   L     R13,SVFSVA          BACK TO FIRST S.A.\n        WTO    MF=(E,MSGERR)       LOG ERROR MESSAGE\n         LA    R10,16\n         ICM   R1,B'1111',RSMADDR\n         BZ    LEAVE\n         L     R0,RSMLGTH\n        FREEMAIN R,A=(1),LV=(0)    FREE AREA\n         B     LEAVE\n         SPACE 1\n*------- EDIT SIZE ROUTINE\n*              R0 = NUMBER OF PAGES\n*              R1 = WORK REGISTER\n*              R2 = WORK REGISTER\n*              R3 = TARGET EDIT FIELD (CL43) ADDRESS\n*              R10 = LINK REGISTER\n*              R14 = INTERNAL LINK REGISTER\n         SPACE 1\nEDSZ     MVI   0(R3),C' '\n         MVC   1(42,R3),0(R3)\n         LTR   R0,R0\n         BP    *+L'*+6\n         MVI   7(R3),C'0'\n         BR    R10\n         CVD   R0,DBLWRD\n         MVC   0(8,R3),=XL8'4020202020202120'\n         ED    0(8,R3),DBLWRD+4\n         MVI   9(R3),C'('\n         LA    R3,10(R3)\n         XR    R1,R1\n         SRDL  R0,8\n         SRL   R1,22\n         LR    R2,R1\n         XR    R1,R1\n         SRDL  R0,10\n         SRL   R1,22\n         LTR   R0,R0\n         BNP   EDSZ1\n         CVD   R0,DBLWRD\n         BAS   R14,EDSZN\n         MVI   0(R3),C'G'\nEDSZ1    LTR   R1,R1\n         BNP   EDSZ2\n         CLI   0(R3),C' '\n         BE    *+L'*+8\n         MVI   1(R3),C'+'\n         LA    R3,2(R3)\n         CVD   R1,DBLWRD\n         BAS   R14,EDSZN\n         MVI   0(R3),C'M'\nEDSZ2    LTR   R2,R2\n         BNP   EDSZ3\n         CLI   0(R3),C' '\n         BE    *+L'*+8\n         MVI   1(R3),C'+'\n         LA    R3,2(R3)\n         CVD   R2,DBLWRD\n         BAS   R14,EDSZN\n         MVI   0(R3),C'K'\nEDSZ3    MVI   1(R3),C')'\n         BR    R10\nEDSZN    MVC   0(8,R3),=XL8'4020202020202120'\n         ED    0(8,R3),DBLWRD+4\n         CLI   0(R3),C' '\n         BNE   *+L'*+10\n         MVC   0(8,R3),1(R3)\n         B     *-14\n         LA    R3,1(R3)\n         CLI   0(R3),C' '\n         BNE   *-8\n         BR    R14\n         SPACE 1\n*------- PRINT DATA ROUTINE\n*              R2 = ADDRESS OF LINE TO BE PRINTED\n*              R10 = LINK REGISTER\n         SPACE 1\nPLNE     CP    NLN,=PL2'+55'\n         BL    PLNEN\n         AP    NPG,=PL1'+1'\n         MVC   TIT1D,=XL6'402020202120'\n         ED    TIT1D,NPG\n        $PRINT TIT1,,DDLIST\n         LTR   R15,R15\n         BNZ   ERRX\n         ZAP   NLN,=PL1'+1'\n         CLI   0(R2),C'0'\n         BE    PLNEN\n         MVI   0(R2),C'0'\n         OI    SWITCH,PFDSP\nPLNEN   $PRINT (R2),,DDLIST\n         LTR   R15,R15\n         BNZ   ERRX\n         AP    NLN,=PL1'+1'\n         CLI   0(R2),C'0'\n         BNER  R10\n         AP    NLN,=PL1'+1'\n         TM    SWITCH,PFDSP\n         BZR   R10\n         MVI   0(R2),C' '\n         NI    SWITCH,255-PFDSP\n         BR    R10\n         SPACE 1\n*------- SNAP DATA ROUTINE\n*              R2 = ADDRESS OF LINE TO BE PRINTED\n*              R10 = LINK REGISTER\n         SPACE 1\nLSSNAP   CP    NLS,=PL2'+55'\n         BL    LSNEN\n         AP    LPG,=PL1'+1'\n         MVC   TIT1D,=XL6'402020202120'\n         ED    TIT1D,LPG\n        $PRINT TIT1,,DDSNAP\n         LTR   R15,R15\n         BNZ   ERRS\n         ZAP   NLS,=PL1'+1'\n         CLI   0(R2),C'0'\n         BE    LSNEN\n         MVI   0(R2),C'0'\n         OI    SWITCH,PFDSP\nLSNEN   $PRINT (R2),,DDSNAP\n         LTR   R15,R15\n         BNZ   ERRS\n         AP    NLS,=PL1'+1'\n         CLI   0(R2),C'0'\n         BNER  R10\n         AP    NLS,=PL1'+1'\n         TM    SWITCH,PFDSP\n         BZR   R10\n         MVI   0(R2),C' '\n         NI    SWITCH,255-PFDSP\n         BR    R10\n         EJECT\n*------- VIRTUAL STORAGE MEMORY MAP ADDRESSES TABLE\n         SPACE 1\n        CNOP   0,4\nVSMA     EQU   0,4                 TABLE DISPLACEMENTS\nVSMC     EQU   4,4\nVSMV     EQU   8,4\nVSMN     EQU   12,16\nVSMSCAN  DC    A(L'VSMMAT,VSMMATE,VSMMAT)\nVSMMAT   DS    0CL28\nALEPVT   DC    A(*-*,0,0)          LOWEST PRIVATE EXT. ADDRESS\n         DC    CL16'Private Ext.'\nALECSA   DC    A(*-*,0,0)          LOWEST CSA EXT. ADDRESS\n         DC    CL16'CSA Ext.'\nALEFLPA  DC    A(*-*,0,0)          LOWEST FLPA (MLPA+FLPA) EXT. ADDRESS\nTTXE     DC    CL16' '\nALEPLPA  DC    A(*-*,0,0)          LOWEST PLPA EXT. ADDRESS\n         DC    CL16'PLPA Ext.'\nALESQA   DC    A(*-*,0,0)          LOWEST SQA EXT. ADDRESS\n         DC    CL16'SQA Ext.'\n         DC    A(X'01000000',0,0)  LOWEST NUCLEUS EXT. ADDRESS\n         DC    CL16'Nucleus Ext.'\nALNUC    DC    A(*-*,0,0)          LOWEST NUCLEUS ADDRESS\n         DC    CL16'Nucleus'\nALSQA    DC    A(*-*,0,0)          LOWEST SQA ADDRESS\n         DC    CL16'SQA'\nALPLPA   DC    A(*-*,0,0)          LOWEST PLPA ADDRESS\n         DC    CL16'PLPA'\nALFLPA   DC    A(*-*,0,0)          LOWEST FLPA (FLPA+MLPA) ADDRESS\nTTX      DC    CL16' '\nALCSA    DC    A(*-*,0,0)          LOWEST CSA ADDRESS\n         DC    CL16'CSA'\nALPVTV   DC    A(*-*,0,0)          LOWEST PRIVATE V=V ADDRESS\n         DC    CL16'Private V=V'\nALPVTR   DC    A(*-*,0,0)          LOWEST PRIVATE V=R ADDRESS\n         DC    CL16'Private V=R'\n         DC    A(0,0,0)            LOWEST PSA + SYSTEM ADDRESS\n         DC    CL16'PSA + System'\nVSMMATE  EQU   *-L'VSMMAT\n         EJECT\nDBLWRD   DC    D'0'                DOUBLE WORD WORK AREA\nSVFSVA   DC    A(*-*)              ADDRESS OF FIRST S.A.\nATIOT    DC    A(*-*)\nRSMLGTH  DC    F'0'\nRSMADDR  DC    A(*-*)\nSNADDR   DC    F'0'\nSCASTB   DC    A(*-*,ASTBL,*-*)\nLGASTB   DC    F'0'\nDDLIST   DC    CL8'SYSPRINT'\nDDSNAP   DC    CL8'SYSSNAP'\nTRTAB    DC    CL16'0123456789ABCDEF'\nTANKMX   DC    PL2'+0'\nTANKNO   DC    PL2'+0'\nTANKUP   DC    PL1'+1'\nNPG      DC    PL3'+0'\nNLN      DC    PL2'+0'\nLPG      DC    PL3'+0'\nNLS      DC    PL2'+0'\nSWSEL    DC    AL1(SPFTE)\nSVSMM    EQU   X'80'\nSPFTE    EQU   X'40'\nSESTE    EQU   X'20'\nSWITCH   DC    XL1'0'\nPFSNP    EQU   X'80'\nPFDSP    EQU   X'08'\nPFLFF    EQU   X'01'\nSTSEL    DS    0XL5\n         DC    CL4'VSM ',AL1(SVSMM)\n         DC    CL4'PFTE',AL1(SPFTE)\n         DC    CL4'ESTE',AL1(SESTE)\nNTSEL    EQU   (*-STSEL)/L'STSEL\n         SPACE 1\n         DC    AL1(TIT1L)\nTIT1     DC    CL23'1 -- RSM : analysis of '\nTIT1A    DC    CL4' ',CL4' -- '\nTIT1B    DC    CL20' ',CL2'/ '\nTIT1C    DC    CL8'  :  :  ',CL9' --- Page'\nTIT1D    DC    CL6' ',CL3' --'\nTIT1L    EQU   *-TIT1\n         SPACE 1\n         DC    AL1(LNTL)\nLNT      DC    CL7' '\nNPFTE    EQU   PFTEL/4\nNESTE    EQU   ESTEL/4\nLNTA     DC    (NPFTE)CL9' '       NPFTE = NESTE\nLNTL     EQU   *-LNT\n         SPACE 1\n         DC    AL1(LNPL)\nLNP      DC    CL5' '\nLNPA     DC    CL2' ',CL2' '\nLNPB     DC    CL34' ',CL1' '\nLNPC     DC    CL43' '\nLNPL     EQU   *-LNP\n         SPACE 1\n         DC    AL1(LNP1L)\nLNP1     DC    CL5'0 ',CL39'Queue Type and Identification'\n         DC    CL3' ',CL5'Count'\nLNP1L    EQU   *-LNP1\n         SPACE 1\n         DC    AL1(LNP2L)\nLNP2     DC    CL5'  '\n         DC    39C'-',CL2' '\n         DC    7C'-'\nLNP2L    EQU   *-LNP2\n         SPACE 1\n         DC    AL1(LNUL)\nLNU      DC    CL10' '\nLNUA     DC    CL16' ',CL1' '\nLNUB     DC    CL8' '\nLNUC     DC    CL35' '\nLNUL     EQU   *-LNU\n         SPACE 1\n         DC    AL1(LNU1L)\nLNU1     DC    CL10'0 ',CL19'VSM location'\nLNU1A    DC    CL4' ',CL2'''s'\nLNU1L    EQU   *-LNU1\n         SPACE 1\n         DC    AL1(LNU2L)\nLNU2     DC    CL10'  ',CL25'----------------  -------'\nLNU2L    EQU   *-LNU2\n         SPACE 1\nMSGERR  WTO    '--- RSMANAL -                                          X\n                              ',ROUTCDE=11,DESC=7,MF=L\nMSGERRT  EQU   MSGERR+18,56\n         EJECT\n         LTORG\n         EJECT\n*------- HANDLE REQUEST(S)\n         SPACE 1\nGETPARM @ENTER ,\n         L     R2,0(R1)            GET PARM= IF ANY\n         LH    R1,0(R2)\n         LTR   R1,R1\n         BNP   NOPARM\n         NI    SWSEL,255-SPFTE\n         LA    R4,2(R2)\n         LA    R3,1(R2,R1)\n         LA    R2,1\nSPNXT    LA    R5,DBLWRD\n         MVC   DBLWRD(8),=CL8' '\n         CLC   0(2,R4),=CL2'L='\n         BNE   TSSNP\n         LA    R6,DDLIST\n         B     GTPRM\nTSSNP    CLC   0(2,R4),=CL2'S='\n         BNE   TSREQ\n         LA    R6,DDSNAP\nGTPRM    ALR   R4,R2\n         BXLE  R4,R2,*+L'*+4\n         B     ERRZ\n         LA    R0,8+1\n         BAS   R14,SCPRM\n         MVC   0(8,R6),DBLWRD\n         B     SPSKP\nSCPRM    CLI   0(R4),C','\n         BNE   *+L'*+12\n         CLC   DBLWRD(4),=CL8' '\n         BE    SPSKP\n         BR    R14\n         BCT   R0,*+L'*+4\n         B     ERRZ\n         MVC   0(1,R5),0(R4)\n         LA    R5,1(R5)\n         BXLE  R4,R2,SCPRM\n         BR    R14\nTSREQ    LA    R0,4+1\n         BAS   R14,SCPRM\n         LA    R0,NTSEL\n         LA    R1,STSEL\n         CLC   DBLWRD(4),0(R1)\n         BE    STREQ\n         LA    R1,L'STSEL(R1)\n         BCT   R0,*-14\n         B     ERRZ\nSTREQ    OC    SWSEL(1),4(R1)\nSPSKP    BXLE  R4,R2,SPNXT\n         CLI   SWSEL,0\n         BE    ERRZ\nNOPARM  EXTRACT ATIOT,'S',FIELDS=(TIOT)\n         L     R1,ATIOT\n         USING TIODSECT,R1\n         XR    R0,R0\nTSNDD    CLC   TIOELNGH(4),=F'0'\n         BE    XGPARM\n         CLC   TIOEDDNM(L'TIOEDDNM),DDSNAP\n         BE    *+L'*+10\n         IC    R0,TIOELNGH\n         ALR   R1,R0\n         B     TSNDD\n         DROP  R1\n         OI    SWITCH,PFSNP\nXGPARM  @EXIT  ,\n         SPACE 1\n        LTORG\n         EJECT\n*------- DO VIRTUAL STORAGE MEMORY MAP\n         SPACE 1\nDOVSM   @ENTER ,\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         L     R1,CVTPTR           GET CVT ADDRESS\n         USING CVTMAP,R1\n         L     R2,CVTSMEXT         GET STORAGE MAP EXTENSION ADDRESS\n         DROP  R1\n         USING CVTVSTGX,R2\n         MVC   MLPAS,CVTMLPAS      START MLPA ADDRESS\n         MVC   FLPAS,CVTFLPAS      START FLPA ADDRESS\n         MVC   FLPAE,CVTFLPAE      END FLPA ADDRESS\n         MVC   PLPAS,CVTPLPAS      START PLPA ADDRESS\n         MVC   PLPAE,CVTPLPAE      END PLPA ADDRESS\n         MVC   EPLPS,CVTEPLPS      START EXT. PLPA ADDRESS\n         MVC   EPLPE,CVTEPLPE      END EXT. PLPA ADDRESS\n         MVC   EFLPS,CVTEFLPS      START EXT. FLPA ADDRESS\n         MVC   EFLPE,CVTEFLPE      END EXT. FLPA ADDRESS\n         MVC   EMLPE,CVTEMLPE      END EXT. MLPA ADDRESS\n         MVC   NUCSTR,CVTRWNS      START NUCLEUS ADDRESS\n         MVC   NUCEND,CVTERWNE     END EXT. NUCLEUS ADDRESS\n         DROP  R2\n         LA    R2,256              BACK UP TO\n         SR    R1,R2                 CVT PREFIX\n         USING CVTFIX,R1\n         L     R2,CVTGDA           GET GDA ADDRESS\n         DROP  R1\n         USING GDA,R2\n         MVC   CSALOW,GDACSA       LOWEST CSA AREA ADDRESS\n         MVC   CSASIZE,GDACSASZ    CSA AREA SIZE\n         MVC   CSAELOW,GDAECSA     LOWEST CSA AREA EXT. ADDRESS\n         MVC   CSAESIZE,GDAECSAS   CSA AREA EXTENDED SIZE\n         MVC   SQALOW,GDASQA       BEGIN SQA AREA ADDRESS\n         MVC   SQASIZE,GDASQASZ    SQA AREA SIZE\n         MVC   SQAELOW,GDAESQA     BEGIN SQA AREA EXT. ADDRESS\n         MVC   SQAESIZE,GDAESQAS   SQA AREA EXTENDED SIZE\n         MVC   PVTLOW,GDAPVT       BEGIN PRIVATE AREA ADDRESS\n         MVC   PVTSIZE,GDAPVTSZ    PRIVATE AREA SIZE\n         MVC   PVTELOW,GDAEPVT     BEGIN PRIVATE AREA EXT. ADDRESS\n         MVC   PVTESIZE,GDAEPVTS   PRIVATE AREA EXTENDED SIZE\n         MVC   VRLOW,GDAVR         ADDRESS OF GLOBAL V=R AREA\n         MVC   VRSIZE,GDAVRSZ      SIZE OF GLOBAL V=R AREA\n         DROP  R2\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         MVC   ALEPVT,PVTELOW      FILL VSM TABLE\n         MVC   ALECSA,CSAELOW\n         MVC   ALEFLPA,EFLPS\n         MVC   ALEPLPA,EPLPS\n         MVC   ALESQA,SQAELOW\n         MVC   ALNUC,NUCSTR\n         MVC   ALSQA,SQALOW\n         MVC   ALPLPA,PLPAS\n         MVC   ALFLPA,MLPAS\n         OC    ALFLPA,ALFLPA\n         BNZ   *+L'*+6\n         MVC   ALFLPA,FLPAS\n         MVC   ALCSA,CSALOW\n         L     R0,VRLOW\n         A     R0,VRSIZE\n         ST    R0,ALPVTV\n         MVC   ALPVTR,VRLOW\n         TM    SWSEL,SVSMM\n         BZ    XDOVSM\n        $GFDATE TIT1B,DBLWRD\n         LTR   R15,R15\n         BNZ   ERRG\n         MVC   TIT1C(2),DBLWRD\n         MVC   TIT1C+3(2),DBLWRD+2\n         MVC   TIT1C+6(2),DBLWRD+4\n         MVC   TIT1A(4),=CL4'VSM '\n         ZAP   NLN,=PL2'+99'       FORCE NEW PAGE FOR VSM MAP LIST\n         LA    R4,10               SET R4 TO 10\n         L     R5,=A(KB*KB)        LOAD 1M INTO R5\n         MVC   FIVEBYTE,PVTELOW    LOWEST PVT AREA EXT. ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #EPVTL,TENBYTE+1\n         L     R3,PVTELOW          LOWEST PVT AREA EXT. ADDRESS\n         A     R3,PVTESIZE         SIZE OF PRIVATE AREA EXTENDED\n         S     R3,=F'1'            HIGHEST PVT AREA EXT. ADDRESS\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #EPVTH,TENBYTE+1\n         XR    R2,R2\n         L     R3,PVTESIZE         SIZE OF PRIVATE AREA EXTENDED\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #EPVTSM,EDIT1\n         ED    #EPVTSM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #EPVTSK,EDIT2\n         ED    #EPVTSK,DBLWRD+4\n         MVC   FIVEBYTE,CSAELOW    LOWEST CSA AREA EXT. ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #ECSAL,TENBYTE+1\n         L     R3,CSAELOW          LOWEST CSA AREA EXT. ADDRESS\n         A     R3,CSAESIZE         SIZE OF CSA AREA EXTENDED\n         S     R3,=F'1'            HIGHEST CSA AREA EXT. ADDRESS\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #ECSAH,TENBYTE+1\n         XR    R2,R2\n         L     R3,CSAESIZE         SIZE OF CSA AREA EXTENDED\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #ECSASM,EDIT1\n         ED    #ECSASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #ECSASK,EDIT2\n         ED    #ECSASK,DBLWRD+4\n         MVC   FIVEBYTE,EFLPS      START FLPA EXT. ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #EFLPAL,TENBYTE+1\n         L     R3,EMLPE            END MLPA EXT. ADDRESS\n         LTR   R3,R3               MLPA EXT. DEFINED ?\n         BZ    *+L'*+16            NO\n         MVC   #TXE(14),=CL14'MLPA+FLPA Ext.' SET TEXT\n         MVC   TTXE(14),=CL14'MLPA+FLPA Ext.'\n         B     *+L'*+16\n         L     R3,EFLPE            END FLPA EXT. ADDRESS\n         MVC   #TXE(14),=CL14'     FLPA Ext.' SET TEXT\n         MVC   TTXE(14),=CL14'FLPA Ext.'\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #EFLPAH,TENBYTE+1\n         L     R3,EMLPE            END MLPA EXT. ADDRESS\n         LTR   R3,R3               MLPA EXT. DEFINED ?\n         BNZ   *+L'*+4             YES\n         L     R3,EFLPE            END FLPA EXT. ADDRESS\n         A     R3,=F'1'\n         S     R3,EFLPS            COMPUTE SIZE\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #EFLPASM,EDIT1\n         ED    #EFLPASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #EFLPASK,EDIT2\n         ED    #EFLPASK,DBLWRD+4\n         MVC   FIVEBYTE,EPLPS      START PLPA EXT. ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #EPLPAL,TENBYTE+1\n         MVC   FIVEBYTE,EPLPE      END PLPA EXT. ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #EPLPAH,TENBYTE+1\n         L     R3,EPLPE            COMPUTE PLPA EXT. SIZE\n         A     R3,=F'1'\n         S     R3,EPLPS\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #EPLPASM,EDIT1\n         ED    #EPLPASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #EPLPASK,EDIT2\n         ED    #EPLPASK,DBLWRD+4\n         MVC   FIVEBYTE,SQAELOW    LOWEST SQA AREA EXT. ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #ESQAL,TENBYTE+1\n         L     R3,SQAELOW          LOWEST SQA AREA EXT. ADDRESS\n         A     R3,SQAESIZE         SIZE OF SQA AREA EXTENDED\n         S     R3,=F'1'            HIGHEST SQA AREA EXT. ADDRESS\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #ESQAH,TENBYTE+1\n         XR    R2,R2\n         L     R3,SQAESIZE         SIZE OF SQA AREA EXTENDED\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #ESQASM,EDIT1\n         ED    #ESQASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #ESQASK,EDIT2\n         ED    #ESQASK,DBLWRD+4\n         MVC   FIVEBYTE,NUCEND     HIGHEST EXT. NUCLEUS ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #ENUCH,TENBYTE+1\n         XR    R2,R2\n         L     R3,NUCEND           HIGHEST EXT. NUCLEUS ADDRESS\n         A     R3,=F'1'\n         S     R3,=A(16*KB*KB)     COMPUTE EXT. NUCLEUS SIZE\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #ENUCSM,EDIT1\n         ED    #ENUCSM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #ENUCSK,EDIT2\n         ED    #ENUCSK,DBLWRD+4\n         MVC   FIVEBYTE,NUCSTR     LOWEST NUCLEUS ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #NUCL,TENBYTE+1\n         XR    R2,R2\n         L     R3,=A(16*KB*KB)     HIGHEST NUCLEUS ADDRESS + 1\n         S     R3,NUCSTR           COMPUTE NUCLEUS SIZE\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #NUCSM,EDIT1\n         ED    #NUCSM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #NUCSK,EDIT2\n         ED    #NUCSK,DBLWRD+4\n         MVC   FIVEBYTE,SQALOW     LOWEST SQA AREA ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #SQAL,TENBYTE+1\n         L     R3,SQALOW           LOWEST SQA AREA ADDRESS\n         A     R3,SQASIZE          SIZE OF SQA AREA\n         S     R3,=F'1'            HIGHEST SQA AREA ADDRESS\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #SQAH,TENBYTE+1\n         XR    R2,R2\n         L     R3,SQASIZE          SIZE OF SQA AREA\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #SQASM,EDIT1\n         ED    #SQASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #SQASK,EDIT2\n         ED    #SQASK,DBLWRD+4\n         MVC   FIVEBYTE,PLPAS      START PLPA ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #PLPAL,TENBYTE+1\n         MVC   FIVEBYTE,PLPAE      END PLPA ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #PLPAH,TENBYTE+1\n         L     R3,PLPAE            COMPUTE PLPA SIZE\n         A     R3,=F'1'\n         S     R3,PLPAS\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #PLPASM,EDIT1\n         ED    #PLPASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #PLPASK,EDIT2\n         ED    #PLPASK,DBLWRD+4\n         L     R3,MLPAS            START MLPA ADDRESS\n         LTR   R3,R3               MLPA DEFINED ?\n         BZ    *+L'*+16            NO\n         MVC   #TX(9),=CL9'FLPA+MLPA' SET TEXT\n         MVC   TTX(9),=CL9'FLPA+MLPA'\n         B     *+L'*+16\n         L     R3,FLPAS            START FLPA ADDRESS\n         MVC   #TX(9),=CL9'     FLPA' SET TEXT\n         MVC   TTX(9),=CL9'FLPA'\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #FLPAL,TENBYTE+1\n         MVC   FIVEBYTE,FLPAE      END FLPA ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #FLPAH,TENBYTE+1\n         L     R3,FLPAE            END FLPA ADDRESS\n         A     R3,=F'1'\n         OC    MLPAS,MLPAS         MLPA DEFINED ?\n         BZ    *+L'*+8             NO\n         S     R3,MLPAS            COMPUTE FLPA+MLPA SIZE\n         B     *+L'*+4             NO\n         S     R3,FLPAS            COMPUTE FLPA SIZE\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #FLPASM,EDIT1\n         ED    #FLPASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #FLPASK,EDIT2\n         ED    #FLPASK,DBLWRD+4\n         MVC   FIVEBYTE,CSALOW     LOWEST CSA AREA ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #CSAL,TENBYTE+1\n         L     R3,CSALOW           LOWEST CSA AREA ADDRESS\n         A     R3,CSASIZE          SIZE OF CSA AREA\n         S     R3,=F'1'            HIGHEST CSA AREA ADDRESS\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #CSAH,TENBYTE+1\n         XR    R2,R2\n         L     R3,CSASIZE          SIZE OF CSA AREA\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #CSASM,EDIT1\n         ED    #CSASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #CSASK,EDIT2\n         ED    #CSASK,DBLWRD+4\n         L     R3,VRLOW            LOWEST V=R AREA ADDRESS PLUS\n         A     R3,VRSIZE           SIZE OF V=R AREA\n         STCM  R3,B'1111',FIVEBYTE LOWEST PVT AREA ADDRESS\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #PVTL,TENBYTE+1\n         L     R3,PVTLOW           LOWEST PVT AREA ADDRESS\n         A     R3,PVTSIZE          SIZE OF PRIVATE AREA\n         S     R3,=F'1'            HIGHEST PVT AREA ADDRESS\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #PVTH,TENBYTE+1\n         XR    R2,R2\n         L     R3,PVTSIZE          SIZE OF PRIVATE AREA MINUS\n         S     R3,VRLOW            LOWEST V=R AREA ADDRESS MINUS\n         S     R3,VRSIZE           SIZE OF V=R AREA\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #PVTSM,EDIT1\n         ED    #PVTSM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #PVTSK,EDIT2\n         ED    #PVTSK,DBLWRD+4\n         MVC   FIVEBYTE,VRLOW      LOWEST V=R AREA ADDRESS\n         UNPK  TENBYTE,FIVEBYTE    UNPACK\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #VRAL,TENBYTE+1\n         L     R3,VRLOW            LOWEST V=R AREA ADDRESS\n         A     R3,VRSIZE           SIZE OF V=R AREA\n         S     R3,=F'1'            HIGHEST V=R AREA ADDRESS\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #VRAH,TENBYTE+1\n         XR    R2,R2\n         L     R3,VRSIZE           SIZE OF V=R AREA\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #VRASM,EDIT1\n         ED    #VRASM,DBLWRD+5\n         SRA   R0,10               SIZE IN K\n         CVD   R0,DBLWRD\n         MVC   #VRASK,EDIT2\n         ED    #VRASK,DBLWRD+4\n         L     R3,VRLOW            LOWEST V=R AREA ADDRESS\n         S     R3,=F'1'            HIGHEST PSA+SYSTEM ADDRESS\n         STCM  R3,B'1111',FIVEBYTE\n         UNPK  TENBYTE,FIVEBYTE\n         TR    TENBYTE+1(8),TRTAB-C'0'\n         MVC   #PSSH,TENBYTE+1\n         XR    R2,R2\n         L     R3,VRLOW            LOWEST V=R AREA ADDR = PSA+SYSTEM\n         LR    R0,R3               SAVE FOR COMPUTATION IN K\n         MR    R2,R4               MULTIPLY BY 10\n         DR    R2,R5               DIVIDE BY 1M\n         CVD   R3,DBLWRD\n         MVC   #PSSSM,EDIT1\n         ED    #PSSSM,DBLWRD+5\n         SRA   R0,10               COMPUTE IT IN K\n         CVD   R0,DBLWRD\n         MVC   #PSSSK,EDIT2\n         ED    #PSSSK,DBLWRD+4\n         LA    R3,LMP-1\n         XR    R4,R4\n         LA    R2,1(R3)\n         BAS   R10,PLNE\n         IC    R4,0(R3)\n         LA    R3,1(R3,R4)\n         CLI   0(R3),0\n         BNE   *-20\nXDOVSM  @EXIT  ,\n         SPACE 1\n        LTORG\n         SPACE 1\nPVTELOW  DC    F'0'                LOWEST PVT AREA EXT. ADDRESS\nPVTESIZE DC    F'0'                SIZE OF PRIVATE AREA EXTENDED\nCSAELOW  DC    F'0'                LOWEST CSA AREA EXT. ADDRESS\nCSAESIZE DC    F'0'                SIZE OF CSA AREA EXTENDED\nEMLPE    DC    F'0'                HIGHEST MLPA EXT. ADDRESS\nEFLPS    DC    F'0'                LOWEST FLPA EXT. ADDRESS\nEFLPE    DC    F'0'                HIGHEST FLPA EXT. ADDRESS\nEPLPS    DC    F'0'                LOWEST PLPA EXT. ADDRESS\nEPLPE    DC    F'0'                HIGHEST PLPA EXT. ADDRESS\nSQAELOW  DC    F'0'                LOWEST SQA AREA EXT. ADDRESS\nSQAESIZE DC    F'0'                SIZE OF SQA AREA EXTENDED\nNUCSTR   DC    F'0'                START NUCLEUS ADDRESS\nNUCEND   DC    F'0'                END EXT. NUCLEUS ADDRESS\nSQALOW   DC    F'0'                LOWEST SQA AREA ADDRESS\nSQASIZE  DC    F'0'                SIZE OF SQA AREA\nPLPAS    DC    F'0'                LOWEST PLPA ADDRESS\nPLPAE    DC    F'0'                HIGHEST PLPA ADDRESS\nFLPAS    DC    F'0'                LOWEST FLPA ADDRESS\nFLPAE    DC    F'0'                HIGHEST FLPA ADDRESS\nMLPAS    DC    F'0'                LOWEST MLPA ADDRESS\nCSALOW   DC    F'0'                LOWEST CSA AREA ADDRESS\nCSASIZE  DC    F'0'                SIZE OF CSA AREA\nPVTLOW   DC    F'0'                LOWEST PVT AREA ADDRESS\nPVTSIZE  DC    F'0'                SIZE OF PRIVATE AREA\nVRLOW    DC    F'0'                GLOBAL V=R AREA ADDRESS\nVRSIZE   DC    F'0'                SIZE OF GLOBAL V=R AREA\nTENBYTE  DC    XL10'0'\nFIVEBYTE DC    XL5'0'\nEDIT1    DC    XL7'40202020214B20' EDIT PATTERN FOR SIZE IN M\nEDIT2    DC    XL8'4020202020202120' EDIT PATTERN FOR SIZE IN K\n         SPACE 1\n         DC    AL1(LMPL)\nLMP      DC    CL5'0 ',C'Virtual Storage Map :'\nLMPL     EQU   *-LMP\n         SPACE 1\n         DC    AL1(LMPUL)\nLMPU     DC    CL5' ',C'====================='\nLMPUL    EQU   *-LMPU\n         SPACE 1\n         DC    AL1(LMPSL)\nLMPS     DC    CL5'0 '\nLMPSL    EQU   *-LMPS\n         SPACE 1\n         DC    AL1(LMP1L)\nLMP1     DC    CL11'0 ',C'Private Ext.  '\n#EPVTL   DC    CL8' ',CL3' - '\n#EPVTH   DC    CL8' ',CL8'  Size ='\n#EPVTSM  DC    CL7' ',CL4' M -'\n#EPVTSK  DC    CL8' ',CL2' K'\nLMP1L    EQU   *-LMP1\n         SPACE 1\n         DC    AL1(LMP2L)\nLMP2     DC    CL15'0 ',C'CSA Ext.  '\n#ECSAL   DC    CL8' ',CL3' - '\n#ECSAH   DC    CL8' ',CL8'  Size ='\n#ECSASM  DC    CL7' ',CL4' M -'\n#ECSASK  DC    CL8' ',CL2' K'\nLMP2L    EQU   *-LMP2\n         SPACE 1\n         DC    AL1(LMP3L)\nLMP3     DC    CL9'0 '\n#TXE     DC    CL16' '\n#EFLPAL  DC    CL8' ',CL3' - '\n#EFLPAH  DC    CL8' ',CL8'  Size ='\n#EFLPASM DC    CL7' ',CL4' M -'\n#EFLPASK DC    CL8' ',CL2' K'\nLMP3L    EQU   *-LMP3\n         SPACE 1\n         DC    AL1(LMP4L)\nLMP4     DC    CL14'0 ',C'PLPA Ext.  '\n#EPLPAL  DC    CL8' ',CL3' - '\n#EPLPAH  DC    CL8' ',CL8'  Size ='\n#EPLPASM DC    CL7' ',CL4' M -'\n#EPLPASK DC    CL8' ',CL2' K'\nLMP4L    EQU   *-LMP4\n         SPACE 1\n         DC    AL1(LMP5L)\nLMP5     DC    CL15'0 ',C'SQA Ext.  '\n#ESQAL   DC    CL8' ',CL3' - '\n#ESQAH   DC    CL8' ',CL8'  Size ='\n#ESQASM  DC    CL7' ',CL4' M -'\n#ESQASK  DC    CL8' ',CL2' K'\nLMP5L    EQU   *-LMP5\n         SPACE 1\n         DC    AL1(LMP6L)\nLMP6     DC    CL11'0 ',C'Nucleus Ext.  01000000 - '\n#ENUCH   DC    CL8' ',CL8'  Size ='\n#ENUCSM  DC    CL7' ',CL4' M -'\n#ENUCSK  DC    CL8' ',CL2' K'\nLMP6L    EQU   *-LMP6\n         SPACE 1\n         DC    AL1(LMP7L)\nLMP7     DC    CL9'0 ',C'<'\n         DC    26C'-',C' 16M line '\n         DC    26C'-',C'>'\nLMP7L    EQU   *-LMP7\n         SPACE 1\n         DC    AL1(LMP8L)\nLMP8     DC    CL16'0 ',C'Nucleus  '\n#NUCL    DC    CL8' ',CL19' - 00FFFFFF  Size ='\n#NUCSM   DC    CL7' ',CL4' M -'\n#NUCSK   DC    CL8' ',CL2' K'\nLMP8L    EQU   *-LMP8\n         SPACE 1\n         DC    AL1(LMP9L)\nLMP9     DC    CL20'0 ',C'SQA  '\n#SQAL    DC    CL8' ',CL3' - '\n#SQAH    DC    CL8' ',CL8'  Size ='\n#SQASM   DC    CL7' ',CL4' M -'\n#SQASK   DC    CL8' ',CL2' K'\nLMP9L    EQU   *-LMP9\n         SPACE 1\n         DC    AL1(LMP10L)\nLMP10    DC    CL19'0 ',C'PLPA  '\n#PLPAL   DC    CL8' ',CL3' - '\n#PLPAH   DC    CL8' ',CL8'  Size ='\n#PLPASM  DC    CL7' ',CL4' M -'\n#PLPASK  DC    CL8' ',CL2' K'\nLMP10L   EQU   *-LMP10\n         SPACE 1\n         DC    AL1(LMP11L)\nLMP11    DC    CL14'0 '\n#TX      DC    CL11' '\n#FLPAL   DC    CL8' ',CL3' - '\n#FLPAH   DC    CL8' ',CL8'  Size ='\n#FLPASM  DC    CL7' ',CL4' M -'\n#FLPASK  DC    CL8' ',CL2' K'\nLMP11L   EQU   *-LMP11\n         SPACE 1\n         DC    AL1(LMP12L)\nLMP12    DC    CL20'0 ',C'CSA  '\n#CSAL    DC    CL8' ',CL3' - '\n#CSAH    DC    CL8' ',CL8'  Size ='\n#CSASM   DC    CL7' ',CL4' M -'\n#CSASK   DC    CL8' ',CL2' K'\nLMP12L   EQU   *-LMP12\n         SPACE 1\n         DC    AL1(LMP13L)\nLMP13    DC    CL12'0 ',C'Private V=V  '\n#PVTL    DC    CL8' ',CL3' - '\n#PVTH    DC    CL8' ',CL8'  Size ='\n#PVTSM   DC    CL7' ',CL4' M -'\n#PVTSK   DC    CL8' ',CL2' K'\nLMP13L   EQU   *-LMP13\n         SPACE 1\n         DC    AL1(LMP14L)\nLMP14    DC    CL12'0 ',C'Private V=R  '\n#VRAL    DC    CL8' ',CL3' - '\n#VRAH    DC    CL8' ',CL8'  Size ='\n#VRASM   DC    CL7' ',CL4' M -'\n#VRASK   DC    CL8' ',CL2' K'\nLMP14L   EQU   *-LMP14\n         SPACE 1\n         DC    AL1(LMP15L)\nLMP15    DC    CL11'0 ',C'PSA + System  00000000 - '\n#PSSH    DC    CL8' ',CL8'  Size ='\n#PSSSM   DC    CL7' ',CL4' M -'\n#PSSSK   DC    CL8' ',CL2' K'\nLMP15L   EQU   *-LMP15\n         SPACE 1\n         DC    AL1(0)              END OF LINES INDICATOR\n         EJECT\n*------- COLLECT ALL AS-ID'S\n         SPACE 1\nCOLLAS  @ENTER ,\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         L     R1,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R1\n         L     R2,CVTASVT          GET ADDR OF ASVT\n         DROP  R1\n         USING ASVT,R2\n         L     R4,ASVTMAXU         NUMBER OF ASCB'S\n         LA    R5,ASVTENTY         ASCB'S ENTRY\n         DROP  R2\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         XR    R2,R2\n         LR    R3,R4\n         M     R2,SCASTB+4\n         LA    R0,7(R3)\n         SRL   R0,3\n         SLL   R0,3\n         ST    R0,LGASTB\n        GETMAIN R,LV=(0)           OBTAIN AREA\n         ST    R1,SCASTB\n         ALR   R1,R3\n         SL    R1,SCASTB+4\n         ST    R1,SCASTB+8\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         LM    R1,R3,SCASTB\n         SLR   R1,R2\nSCNASCB  TM    0(R5),ASVTAVAL\n         BO    NXTASCB\n         L     R6,0(R5)            ---> ASCB\n         LA    R6,0(R6)\n         LTR   R6,R6\n         BZ    NXTASCB\n         BXLE  R1,R2,*+L'*+4\n         B     ERRV\n         USING ASCB,R6\n         XC    TIDC(L'TIDC+L'TIDV,R1),TIDC(R1)\n         MVC   TIDA(L'ASCBASID,R1),ASCBASID\n         ICM   R7,B'1111',ASCBJBNI\n         BNZ   *+L'*+12\n         ICM   R7,B'1111',ASCBJBNS\n         BNZ   *+L'*+4\n         LA    R7,=CL8'********'\n         MVC   TIDN(L'TIOCNJOB,R1),0(R7)\n         DROP  R6\nNXTASCB  LA    R5,L'ASVTENTY(R5)\n         BCT   R4,SCNASCB\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+10\n         XC    0(ASTBL,R1),0(R1)\n         B     *-14\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         TM    SWITCH,PFSNP\n         BZ    XCOLLAS\n        $GFDATE TIT1B,DBLWRD\n         LTR   R15,R15\n         BNZ   ERRG\n         MVC   TIT1C(2),DBLWRD\n         MVC   TIT1C+3(2),DBLWRD+2\n         MVC   TIT1C+6(2),DBLWRD+4\n         MVC   TIT1A(4),=CL4'ASCB'\n         ZAP   NLS,=PL2'+99'       FORCE NEW PAGE FOR ASCB'S LIST\n         LA    R2,LNS\n         BAS   R10,LSSNAP\n         LM    R3,R5,SCASTB\nLSASI    MVI   LNRA,C' '\n         MVC   LNRA+1(3*L'LNRA-1),LNRA\n         LA    R0,3\n         LA    R1,LNRA\nLSASL    UNPK  0(5,R1),TIDA(3,R3)\n         TR    0(4,R1),TRTAB-C'0'\n         MVC   4(2,R1),=CL2' :'\n         MVC   7(L'TIOCNJOB,R1),TIDN(R3)\n         BXLE  R3,R4,*+L'*+4\n         B     LSASP\n         CLC   TIDA(L'TIDA,R3),=XL2'0'\n         BNE   *+L'*+8\n         LA    R3,0(R4,R5)\n         B     LSASP\n         LA    R1,L'LNRA(R1)\n         BCT   R0,LSASL\nLSASP    LA    R2,LNR\n         BAS   R10,LSSNAP\n         CLR   R3,R5\n         BNH   LSASI\nXCOLLAS @EXIT  ,\n         SPACE 1\n        LTORG\n         SPACE 1\n         DC    AL1(LNSL)\nLNS      DC    CL18'0    ASCB''s list :'\nLNSL     EQU   *-LNS\n         SPACE 1\n         DC    AL1(LNRL)\nLNR      DC    CL10' '\nLNRA     DC    3CL20' '\nLNRL     EQU   *-LNR\n         SPACE 1\nTIDC     EQU   0,4                 TABLE DISPLACEMENTS\nTIDV     EQU   4,4\nTIDA     EQU   8,2                 = L'ASCBASID\nTIDN     EQU   10,8                = L'TIOCNJOB\nASTBL    EQU   L'TIDC+L'TIDV+L'TIDA+L'TIDN\n         EJECT\n*------- LIST PFTE'S INFORMATION\n         SPACE 1\nPFTELS  @ENTER ,\n        $GFDATE TIT1B,DBLWRD\n         LTR   R15,R15\n         BNZ   ERRG\n         MVC   TIT1C(2),DBLWRD\n         MVC   TIT1C+3(2),DBLWRD+2\n         MVC   TIT1C+6(2),DBLWRD+4\n         MVC   TIT1A(4),=CL4'PFTE'\n         ZAP   NLN,=PL2'+99'       FORCE NEW PAGE FOR PFTE'S LIST\n         NI    SWITCH,255-PFLFF\n         TM    SWITCH,PFSNP\n         BZ    *+L'*+6\n         ZAP   NLS,=PL2'+99'       FORCE NEW PAGE FOR PFTE'S SNAP\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         L     R1,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R1\n         L     R2,CVTPVTP          GET ADDR OF PVT\n         DROP  R1\n         USING PVT,R2\n         L     R1,PVTRIT           GET ADDR OF RIT\n         DROP  R2\n         L     R2,RITFPFTE(R1)     FIRST PFTE\n         ST    R2,SNADDR\n         L     R7,RITLPFTE(R1)     LAST PFTE\n         SLR   R7,R2\n         LA    R3,PFTEL(R7)\n         LA    R0,15(R3)\n         SRL   R0,3\n         SLL   R0,3\n         ST    R0,RSMLGTH\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         L     R0,RSMLGTH\n        GETMAIN R,LV=(0)           OBTAIN AREA\n         ST    R1,RSMADDR\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         L     R1,RSMADDR\n         LR    R4,R1\n         LR    R5,R3\n         MVCL  R4,R2               COPY ALL PFTE'S\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         L     R5,RSMADDR\n         LA    R6,PFTEL\n         LR    R9,R7\n         ALR   R9,R6\n         XR    R8,R8\n         DR    R8,R6\n         LR    R8,R9\n        $SORT  (R5),(R9),PFTEL,PFTQID-PFTE,L'PFTQID\n         LR    R0,R8\n         LA    R3,LNNA\n         BAS   R10,EDSZ\n         AL    R7,RSMADDR\n         TM    SWITCH,PFSNP\n         BZ    NSPFTE\n         LA    R2,LNN\n         BAS   R10,LSSNAP\n         UNPK  LNNTA,SNADDR(5)\n         TR    LNNTA(L'LNNTA-1),TRTAB-C'0'\n         MVI   LNNTA+L'LNNTA-1,C' '\n         LA    R2,LNNT\n         BAS   R10,LSSNAP\n         L     R5,RSMADDR\nPFLSL    LA    R0,NPFTE\n         LA    R1,LNTA\n         LR    R2,R5\nPFLSD    UNPK  0(9,R1),0(5,R2)\n         TR    0(8,R1),TRTAB-C'0'\n         MVI   8(R1),C' '\n         LA    R2,4(R2)\n         LA    R1,L'LNTA(R1)\n         BCT   R0,PFLSD\n         LA    R2,LNT\n         BAS   R10,LSSNAP\n         BXLE  R5,R6,PFLSL\nNSPFTE   LA    R2,LNN\n         BAS   R10,PLNE\n         LA    R2,LNNU\n         BAS   R10,PLNE\n         L     R5,RSMADDR\n         USING PFTE,R5\n         LA    R2,NPFQT\n         LA    R1,PFQTB\n         CLC   PFTQID(L'PFTQID),PFQI(R1)\n         BE    *+L'*+12\nPFLSR    LA    R1,L'PFQTB(R1)\n         BCT   R2,*-14\n         B     ERRP\n         ST    R5,PFQB(R1)\n         XR    R0,R0\nPFLSN    ST    R5,PFQE(R1)\n         AH    R0,=H'1'\n         BXLE  R5,R6,*+L'*+4\n         B     *+L'*+10\n         CLC   PFTQID(L'PFTQID),PFQI(R1)\n         BE    PFLSN\n         ST    R0,PFQC(R1)\n         CLR   R5,R7\n         BNH   PFLSR\n         DROP  R5\n         LA    R2,LNP1\n         BAS   R10,PLNE\n         LA    R2,LNP2\n         BAS   R10,PLNE\n         LA    R5,NPFQT\n         LA    R4,PFQTB\nPFLSF    XR    R0,R0\n         IC    R0,PFQI(R4)\n         STC   R0,LNPA+1\n         SRL   R0,4\n         STC   R0,LNPA\n         OC    LNPA,=XL2'F0F0'\n         TR    LNPA,TRTAB-C'0'\n         MVC   LNPB(L'LNPB),PFQN(R4)\n         L     R0,PFQC(R4)\n         LA    R3,LNPC\n         BAS   R10,EDSZ\n         LA    R2,LNP\n         BAS   R10,PLNE\n         LA    R4,L'PFQTB(R4)\n         BCT   R5,PFLSF\n         MVC   LNU1A,=CL4'PFTE'\n         LA    R3,NPFQT\n         LA    R4,PFQTB\n         OC    PFQC(L'PFQC,R4),PFQC(R4)\n         BNZ   *+L'*+12\nPFLUN    LA    R4,L'PFQTB(R4)\n         BCT   R3,*-14\n         B     PFLUX\n         XR    R0,R0\n         IC    R0,PFQI(R4)\n         STC   R0,LNVA+1\n         SRL   R0,4\n         STC   R0,LNVA\n         OC    LNVA,=XL2'F0F0'\n         TR    LNVA,TRTAB-C'0'\n         MVC   LNVB(L'LNVB),PFQN(R4)\n         L     R5,PFQB(R4)\n         LA    R6,PFTEL\n         L     R7,PFQE(R4)\n         STM   R3,R4,PFQSVR\n         USING PFTE,R5\n         LM    R2,R4,VSMSCAN\n         XC    VSMC(L'VSMC+L'VSMV,R4),VSMC(R4)\n         BXLE  R4,R2,*-6\n         XC    PFSVIO,PFSVIO\nPFLUL    LM    R2,R4,VSMSCAN\n         CLC   PFTVSA(L'PFTVSA),VSMA(R4)\n         BNL   *+L'*+4\n         BXLE  R4,R2,*-10\n         TM    PFTFLGS3,PFTVIORU\n         BO    PFLUS\n         L     R0,VSMC(R4)\n         AH    R0,=H'1'\n         ST    R0,VSMC(R4)\n         B     PFLUE\nPFLUS    L     R0,PFSVIO\n         AH    R0,=H'1'\n         ST    R0,PFSVIO\n         L     R0,VSMV(R4)\n         AH    R0,=H'1'\n         ST    R0,VSMV(R4)\nPFLUE    BXLE  R5,R6,PFLUL\n         DROP  R5\n         TM    SWITCH,PFLFF\n         BZ    *+L'*+8\n         NI    SWITCH,255-PFLFF\n         B     *+L'*+10\n         ZAP   NLN,=PL2'+99'       FORCE NEW PAGE FOR PFTE'S USE LIST\n         OI    SWITCH,PFLFF\n         LA    R2,LNV\n         BAS   R10,PLNE\n         LA    R2,LNVU\n         BAS   R10,PLNE\n         LA    R2,LNU1\n         BAS   R10,PLNE\n         LA    R2,LNU2\n         BAS   R10,PLNE\n         LM    R4,R6,VSMSCAN\nPFLUP    MVC   LNUA(L'LNUA),VSMN(R6)\n         L     R0,VSMC(R6)\n         LA    R3,LNUB\n         BAS   R10,EDSZ\n         LA    R2,LNU\n         BAS   R10,PLNE\n         BXLE  R6,R4,PFLUP\n         OC    PFSVIO,PFSVIO\n         BZ    PFLUZ\n         MVI   LNU,C'0'\n         MVC   LNUA,=CL16'===> VIO usage :'\n         L     R0,PFSVIO\n         LA    R3,LNUB\n         BAS   R10,EDSZ\n         LA    R2,LNU\n         BAS   R10,PLNE\n         MVI   LNU,C' '\n         LM    R4,R6,VSMSCAN\nPFLUV    ICM   R0,B'1111',VSMV(R6)\n         BZ    PFLUW\n         MVC   LNUA(L'LNUA),VSMN(R6)\n         LA    R3,LNUB\n         BAS   R10,EDSZ\n         LA    R2,LNU\n         BAS   R10,PLNE\nPFLUW    BXLE  R6,R4,PFLUV\nPFLUZ    LM    R3,R4,PFQSVR\n         TM    PFQF(R4),QPFID\n         BZ    PFLUN\n        @CALL  LSPFAS\n         B     PFLUN\nPFLUX    LM    R0,R1,RSMLGTH\n        FREEMAIN R,A=(1),LV=(0)    FREE AREA\n         XC    RSMLGTH(L'RSMLGTH+L'RSMADDR),RSMADDR\n        @EXIT  ,\n         SPACE 1\n        LTORG\n         SPACE 1\n         DC    AL1(LNNL)\nLNN      DC    CL31'0    Page Frame Table Entries :'\nLNNA     DC    CL43' '\nLNNL     EQU   *-LNN\n         SPACE 1\n         DC    AL1(LNNTL)\nLNNT     DC    CL29'       Table start address : '\nLNNTA    DC    CL9' '\nLNNTL    EQU   *-LNNT\n         SPACE 1\n         DC    AL1(LNNUL)\nLNNU     DC    CL31'     =========================='\nLNNUL    EQU   *-LNNU\n         SPACE 1\n         DC    AL1(LNVL)\nLNV      DC    CL36'0    Page Frame Table Entries use :'\nLNVA     DC    CL2' ',CL3' = '\nLNVB     DC    CL34' '\nLNVL     EQU   *-LNV\n         SPACE 1\n         DC    AL1(LNVUL)\nLNVU     DC    CL36'     =============================='\nLNVUL    EQU   *-LNVU\n         SPACE 1\nPFSVIO   DC    F'0'\nPFQSVR   DC    2F'0'\nPFQC     EQU   0,4                 TABLE DISPLACEMENTS\nPFQB     EQU   4,4\nPFQE     EQU   8,4\nPFQI     EQU   12,1\nPFQF     EQU   13,1\nQPFID    EQU   X'80'\nPFQN     EQU   14,34\nPFQTB    DS    0XL48\n        @TPF   08,'TOP Double Frame Queue'\n        @TPF   09,'BOTTOM Double Frame Queue'\n        @TPF   21,'SQA Frame Queue'\n        @TPF   22,'Reserved SQA Frame Queue'\n        @TPF   23,'REAL Storage Buffer Frame Queue'\n        @TPF   24,'V=R waiting Frame Queue'\n        @TPF   81,'Pageable Frame Queue',QPFID\n        @TPF   82,'Fixed Frame Queue',QPFID\n        @TPF   83,'Deferred FREEMAIN Frame Queue'\n        @TPF   F0,'Unqueued ... DAT off Nucleus'\n        @TPF   F1,'Unqueued ... READ only Nucleus'\n        @TPF   F2,'Unqueued ... READ/WRITE Nucleus'\n        @TPF   F3,'Unqueued ... IDA Frame'\n        @TPF   F4,'Unqueued ... HW System Area'\n        @TPF   F5,'Unqueued ... Absolute Zero Frame'\n        @TPF   F6,'Unqueued ... Fixed LPA/BLDL'\n        @TPF   FD,'A flawed PFTE'\n        @TPF   FE,'Unqueued ... Uninitialized'\n        @TPF   FF,'Unqueued PFTE'\nNPFQT    EQU   (*-PFQTB)/L'PFQTB\n         EJECT\n*------- LIST PFTE'S BY ASID'S INFORMATION\n*              R4 = CURRENT \"PFQTB\" POINTER\n         SPACE 1\nLSPFAS  @ENTER ,\n         L     R5,PFQB(R4)\n         LA    R6,PFTEL\n         L     R9,PFQE(R4)\n         ALR   R9,R6\n         SLR   R9,R5\n         XR    R8,R8\n         DR    R8,R6\n        $SORT  (R5),(R9),PFTEL,PFTVSA-PFTE,L'PFTVSA\n         ZAP   NLN,=PL2'+99'       FORCE NEW PAGE FOR DETAIL LIST\n         NI    SWITCH,255-PFLFF\n         XR    R0,R0\n         IC    R0,PFQI(R4)\n         STC   R0,LNAA+1\n         SRL   R0,4\n         STC   R0,LNAA\n         OC    LNAA,=XL2'F0F0'\n         TR    LNAA,TRTAB-C'0'\n         MVC   LNAB(L'LNAB),PFQN(R4)\n         LA    R2,LNA\n         BAS   R10,PLNE\n         LA    R2,LNB\n         BAS   R10,PLNE\n         LA    R2,LNC1\n         BAS   R10,PLNE\n         LA    R2,LNC2\n         BAS   R10,PLNE\n         L     R7,PFQE(R4)\n         LA    R8,PFTEL\n         USING PFTE,R7\n         L     R6,VSMSCAN+8\nASLSR    L     R5,VSMC(R6)\n         A     R5,VSMV(R6)\n         BZ    ASLSV\n         LM    R1,R3,SCASTB\n         XC    TIDC(L'TIDC+L'TIDV,R1),TIDC(R1)\n         BXLE  R1,R2,*-6\n         XC    TCAS(L'TCAS+L'TVAS),TCAS\nASLSL    CLC   PFTASID(L'PFTASID),=XL2'0'\n         BE    ASLSS\n         CLC   PFTASID(L'PFTASID),=XL2'FFFF'\n         BE    ASLSS\n         LM    R1,R3,SCASTB\n         CLC   PFTASID(L'PFTASID),TIDA(R1)\n         BE    ASLSA\n         BXLE  R1,R2,*-10\nASLSS    TM    PFTFLGS3,PFTVIORU\n         BO    *+L'*+8\n         LA    R2,TCAS\n         B     ASLST\n         LA    R2,TVAS\n         B     ASLST\nASLSA    TM    PFTFLGS3,PFTVIORU\n         BO    *+L'*+8\n         LA    R2,TIDC(R1)\n         B     ASLST\n         LA    R2,TIDV(R1)\nASLST    ICM   R0,B'1111',0(R2)\n         AH    R0,=H'1'\n         STCM  R0,B'1111',0(R2)\n         DROP  R7\n         SLR   R7,R8\n         BCT   R5,ASLSL\n         MVC   LNCA(L'LNCA),VSMN(R6)\n         L     R5,SCASTB\nASLSN    CLC   TIDA(L'TIDA,R5),=XL2'0'\n         BE    ASLSC\n         OC    TIDC(L'TIDC+L'TIDV,R5),TIDC(R5)\n         BZ    ASLSB\n         MVC   LNCB(L'LNCB),TIDN(R5)\n         CLC   LNCB,=CL8'INIT'\n         BE    *+L'*+10\n         CLC   LNCB,=CL8'********'\n         BNE   *+L'*+18\n         UNPK  DBLWRD(5),TIDA(3,R5)\n         TR    DBLWRD(4),TRTAB-C'0'\n         MVC   LNCB+4(4),DBLWRD\n         ICM   R0,B'1111',TIDC(R5)\n         LA    R3,LNCC\n         BAS   R10,EDSZ\n         LA    R2,LNC\n         BAS   R10,PLNE\n         MVI   LNCA,C' '\n         MVC   LNCA+1(L'LNCA-1),LNCA\n         ICM   R0,B'1111',TIDV(R5)\n         BZ    ASLSB\n         MVC   LNCB,=CL8'-> VIO''s'\n         LA    R3,LNCC\n         BAS   R10,EDSZ\n         LA    R2,LNC\n         BAS   R10,PLNE\nASLSB    AL    R5,SCASTB+4\n         CL    R5,SCASTB+8\n         BNH   ASLSN\nASLSC    OC    TCAS(L'TCAS+L'TVAS),TCAS\n         BZ    ASLSV\n         MVC   LNCB,=CL8'System :'\n         L     R0,TCAS\n         LA    R3,LNCC\n         BAS   R10,EDSZ\n         LA    R2,LNC\n         BAS   R10,PLNE\n         MVI   LNCA,C' '\n         MVC   LNCA+1(L'LNCA-1),LNCA\n         ICM   R0,B'1111',TVAS\n         BZ    ASLSV\n         MVC   LNCB,=CL8'-> VIO''s'\n         LA    R3,LNCC\n         BAS   R10,EDSZ\n         LA    R2,LNC\n         BAS   R10,PLNE\nASLSV    AL    R6,VSMSCAN\n         CL    R6,VSMSCAN+4\n         BNH   ASLSR\n        @EXIT  ,\n         SPACE 1\n        LTORG\n         SPACE 1\nTCAS     DC    F'0'\nTVAS     DC    F'0'\n         SPACE 1\n         DC    AL1(LNAL)\nLNA      DC    CL26'0    Detail on PFTE use :'\nLNAA     DC    CL2' ',CL3' = '\nLNAB     DC    CL34' '\nLNAL     EQU   *-LNA\n         SPACE 1\n         DC    AL1(LNBL)\nLNB      DC    CL36'     ===================='\nLNBL     EQU   *-LNB\n         SPACE 1\n         DC    AL1(LNCL)\nLNC      DC    CL10' '\nLNCA     DC    CL16' ',CL2' '\nLNCB     DC    CL8' ',CL1' '\nLNCC     DC    CL8' '\nLNCD     DC    CL35' '\nLNCL     EQU   *-LNC\n         SPACE 1\n         DC    AL1(LNC1L)\nLNC1     DC    CL10'0 ',CL35'VSM location        ASID     PFTE''s'\nLNC1L    EQU   *-LNC1\n         SPACE 1\n         DC    AL1(LNC2L)\nLNC2     DC    CL10'  ',CL35'----------------  --------  -------'\nLNC2L    EQU   *-LNC2\n         EJECT\n*------- LIST ESTE'S INFORMATION\n         SPACE 1\nESTELS  @ENTER ,\n        $GFDATE TIT1B,DBLWRD\n         LTR   R15,R15\n         BNZ   ERRG\n         MVC   TIT1C(2),DBLWRD\n         MVC   TIT1C+3(2),DBLWRD+2\n         MVC   TIT1C+6(2),DBLWRD+4\n         MVC   TIT1A(4),=CL4'ESTE'\n         ZAP   NLN,=PL2'+99'       FORCE NEW PAGE FOR ESTE'S LIST\n         NI    SWITCH,255-PFLFF\n         TM    SWITCH,PFSNP\n         BZ    *+L'*+6\n         ZAP   NLS,=PL2'+99'       FORCE NEW PAGE FOR ESTE'S SNAP\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         L     R1,CVTPTR           GET ADDR OF CVT\n         USING CVTMAP,R1\n         L     R2,CVTPVTP          GET ADDR OF PVT\n         DROP  R1\n         USING PVT,R2\n         L     R1,PVTRIT           GET ADDR OF RIT\n         DROP  R2\n         L     R2,RITFESTE(R1)     FIRST ESTE\n         ST    R2,SNADDR\n         L     R7,RITLESTE(R1)     LAST ESTE\n         SLR   R7,R2\n         LA    R3,ESTEL(R7)\n         LA    R0,15(R3)\n         SRL   R0,3\n         SLL   R0,3\n         ST    R0,RSMLGTH\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         L     R0,RSMLGTH\n        GETMAIN R,LV=(0)           OBTAIN AREA\n         ST    R1,RSMADDR\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         L     R1,RSMADDR\n         LR    R4,R1\n         LR    R5,R3\n         MVCL  R4,R2               COPY ALL ESTE'S\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         L     R5,RSMADDR\n         LA    R6,ESTEL\n         LR    R9,R7\n         ALR   R9,R6\n         XR    R8,R8\n         DR    R8,R6\n         LR    R8,R9\n        $SORT  (R5),(R9),ESTEL,ESTQID-ESTE,L'ESTQID\n         LR    R0,R8\n         LA    R3,LNMA\n         BAS   R10,EDSZ\n         AL    R7,RSMADDR\n         TM    SWITCH,PFSNP\n         BZ    NSESTE\n         LA    R2,LNM\n         BAS   R10,LSSNAP\n         UNPK  LNMTA,SNADDR(5)\n         TR    LNMTA(L'LNMTA-1),TRTAB-C'0'\n         MVI   LNMTA+L'LNMTA-1,C' '\n         LA    R2,LNMT\n         BAS   R10,LSSNAP\n         L     R5,RSMADDR\nESLSL    LA    R0,NESTE\n         LA    R1,LNTA\n         LR    R2,R5\nESLSD    UNPK  0(9,R1),0(5,R2)\n         TR    0(8,R1),TRTAB-C'0'\n         MVI   8(R1),C' '\n         LA    R2,4(R2)\n         LA    R1,L'LNTA(R1)\n         BCT   R0,ESLSD\n         LA    R2,LNT\n         BAS   R10,LSSNAP\n         BXLE  R5,R6,ESLSL\nNSESTE   LA    R2,LNM\n         BAS   R10,PLNE\n         LA    R2,LNMU\n         BAS   R10,PLNE\n         L     R5,RSMADDR\n         USING ESTE,R5\n         LA    R2,NESQT\n         LA    R1,ESQTB\n         CLC   ESTQID(L'ESTQID),ESQI(R1)\n         BE    *+L'*+12\nESLSR    LA    R1,L'ESQTB(R1)\n         BCT   R2,*-14\n         B     ERRE\n         ST    R5,ESQB(R1)\n         XR    R0,R0\nESLSN    ST    R5,ESQE(R1)\n         AH    R0,=H'1'\n         BXLE  R5,R6,*+L'*+4\n         B     *+L'*+10\n         CLC   ESTQID(L'ESTQID),ESQI(R1)\n         BE    ESLSN\n         ST    R0,ESQC(R1)\n         CLR   R5,R7\n         BNH   ESLSR\n         DROP  R5\n         LA    R2,LNP1\n         BAS   R10,PLNE\n         LA    R2,LNP2\n         BAS   R10,PLNE\n         LA    R5,NESQT\n         LA    R4,ESQTB\nESLSF    XR    R0,R0\n         IC    R0,ESQI(R4)\n         STC   R0,LNPA+1\n         SRL   R0,4\n         STC   R0,LNPA\n         OC    LNPA,=XL2'F0F0'\n         TR    LNPA,TRTAB-C'0'\n         MVC   LNPB(L'LNPB),ESQN(R4)\n         L     R0,ESQC(R4)\n         LA    R3,LNPC\n         BAS   R10,EDSZ\n         LA    R2,LNP\n         BAS   R10,PLNE\n         LA    R4,L'ESQTB(R4)\n         BCT   R5,ESLSF\n         MVC   LNU1A,=CL4'ESTE'\n         LA    R3,NESQT\n         LA    R4,ESQTB\n         OC    ESQC(L'ESQC,R4),ESQC(R4)\n         BNZ   *+L'*+12\nESLUN    LA    R4,L'ESQTB(R4)\n         BCT   R3,*-14\n         B     ESLUX\n         XR    R0,R0\n         IC    R0,ESQI(R4)\n         STC   R0,LNWA+1\n         SRL   R0,4\n         STC   R0,LNWA\n         OC    LNWA,=XL2'F0F0'\n         TR    LNWA,TRTAB-C'0'\n         MVC   LNWB(L'LNWB),ESQN(R4)\n         L     R5,ESQB(R4)\n         LA    R6,ESTEL\n         L     R7,ESQE(R4)\n         STM   R3,R4,ESQSVR\n         USING ESTE,R5\n         LM    R2,R4,VSMSCAN\n         XC    VSMC(L'VSMC+L'VSMV,R4),VSMC(R4)\n         BXLE  R4,R2,*-6\n         XC    ESSPTR,ESSPTR\nESLUL    TM    ESTFLGS2,ESTPFTEF\n         BO    ESLUS\n         LM    R2,R4,VSMSCAN\n         CLC   ESTVSA(L'PFTVSA),VSMA(R4)\n         BNL   *+L'*+4\n         BXLE  R4,R2,*-10\n         L     R0,VSMC(R4)\n         AH    R0,=H'1'\n         ST    R0,VSMC(R4)\n         B     *+L'*+12\nESLUS    L     R0,ESSPTR\n         AH    R0,=H'1'\n         ST    R0,ESSPTR\n         BXLE  R5,R6,ESLUL\n         DROP  R5\n         TM    SWITCH,PFLFF\n         BZ    *+L'*+8\n         NI    SWITCH,255-PFLFF\n         B     *+L'*+10\n         ZAP   NLN,=PL2'+99'       FORCE NEW PAGE FOR ESTE'S USE LIST\n         OI    SWITCH,PFLFF\n         LA    R2,LNW\n         BAS   R10,PLNE\n         LA    R2,LNU1\n         BAS   R10,PLNE\n         LA    R2,LNU2\n         BAS   R10,PLNE\n         LM    R4,R6,VSMSCAN\nESLUP    MVC   LNUA(L'LNUA),VSMN(R6)\n         L     R0,VSMC(R6)\n         LA    R3,LNUB\n         BAS   R10,EDSZ\n         LA    R2,LNU\n         BAS   R10,PLNE\n         BXLE  R6,R4,ESLUP\n         OC    ESSPTR,ESSPTR\n         BZ    ESLUZ\n         MVI   LNU,C'0'\n         MVC   LNUA,=CL16'===> PFTE Ptr. :'\n         L     R0,ESSPTR\n         CVD   R0,DBLWRD\n         MVC   LNUB,=XL8'4020202020202120'\n         ED    LNUB,DBLWRD+4\n         MVI   LNUC,C' '\n         MVC   LNUC+1(L'LNUC-1),LNUC\n         LA    R2,LNU\n         BAS   R10,PLNE\n         MVI   LNU,C' '\nESLUZ    LM    R3,R4,ESQSVR\n         B     ESLUN\nESLUX    LM    R0,R1,RSMLGTH\n        FREEMAIN R,A=(1),LV=(0)    FREE AREA\n        @EXIT  ,\n         SPACE 1\n        LTORG\n         SPACE 1\n         DC    AL1(LNML)\nLNM      DC    CL35'0    Extended Store Table Entries :'\nLNMA     DC    CL43' '\nLNML     EQU   *-LNM\n         SPACE 1\n         DC    AL1(LNMTL)\nLNMT     DC    CL29'       Table start address : '\nLNMTA    DC    CL9' '\nLNMTL    EQU   *-LNMT\n         SPACE 1\n         DC    AL1(LNMUL)\nLNMU     DC    CL35'     =============================='\nLNMUL    EQU   *-LNMU\n         SPACE 1\n         DC    AL1(LNWL)\nLNW      DC    CL40'0    Extended Store Table Entries use :'\nLNWA     DC    CL2' ',CL3' = '\nLNWB     DC    CL34' '\nLNWL     EQU   *-LNW\n         SPACE 1\n         DC    AL1(LNWUL)\nLNWU     DC    CL40'     =================================='\nLNWUL    EQU   *-LNWU\n         SPACE 1\nESSPTR   DC    F'0'\nESQSVR   DC    2F'0'\nESQC     EQU   0,4                 TABLE DISPLACEMENTS\nESQB     EQU   4,4\nESQE     EQU   8,4\nESQI     EQU   12,1\nESQF     EQU   13,1\nESQN     EQU   14,34\nESQTB    DS    0XL48\n        @TPE   E0,'On AEQ (never used)'\n        @TPE   E1,'On an IN-use Queue'\n        @TPE   E2,'On Virtual Fetch Queue'\n        @TPE   FD,'A flawed ESTE'\n        @TPE   FF,'Unqueued ESTE'\nNESQT    EQU   (*-ESQTB)/L'ESQTB\n         EJECT\nRITFPFTE EQU   208                 FIRST PFTE\nRITLPFTE EQU   212                 LAST PFTE\nRITFESTE EQU   876                 FIRST ESTE\nRITLESTE EQU   880                 LAST ESTE\n        PRINT  NOGEN\n        CVT    DSECT=YES,PREFIX=YES,LIST=YES\n        IHAGDA\n        IHAASVT\n        IHAASCB\n        IHAPVT\n        IARPFTE\n        IARESTE\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RSMANAL$": {"ttr": 22534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//RSMANAL  JOB (........),'INSTALL - RSMANAL -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                GFDATE    TXPRINT                                  *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=RSMANAL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,PRINT)\n  ENTRY   RSMANAL\n  NAME    RSMANAL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RSMANAL@": {"ttr": 22536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\'_\\x00\\x91\\'_\\x14\"\\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-02T00:00:00", "modifydate": "1991-10-02T14:22:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYSPAJA"}, "text": "1   02/10/91\n                                                      RSMANAL   1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *            RSM  ANALYSIS            * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This program produces a listing of RSM information\n  ---------    for specified storage areas.\n\n\n  Call of the program :\n  ---------------------\n\n         //LIST   EXEC  PGM=RSMANAL,PARM='...'\n         //SYSPRINT DD  SYSOUT=A\n         //SYSSNAP  DD  SYSOUT=A (only if debug needed)\n\n         Where ... is used to specify the desired storage areas,\n               and may be any one of the following keywords :\n                    VSM  - Virtual Storage Map\n                    PFTE - Page Frame Table Entries\n                    ESTE - Extended Storage Table Entries\n               or, if more than one desired, they must be separated\n               by a comma.\n                    I.E. : PARM='PFTE,ESTE'\n         Also alternate DD-names may be specified for the list or\n               snap output, as shown below :\n                    PARM='L=MYPRINT,S=MYSNAP'\n         If no PARM= is given, default is assumed like :\n                    PARM='PFTE,L=SYSPRINT,S=SYSSNAP'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SCHEDLO$": {"ttr": 22538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "SYSPAJA"}, "text": "//SCHEDLOG JOB (........),'INSTALL  -SCHEDLOG-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=3\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                TXPRINT                                            *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* THEN LOG FILE MAY BE ALLOCATED AS BELOW :                         *\n//*      //...      JOB ...                                           *\n//*      //ALLOG   EXEC PGM=IEFBR14                                   *\n//*      //SCLOG     DD UNIT=DISK,VOLUME=SER=......,                  *\n//*      //             SPACE=(CYL,(10,5)),                           *\n//*      //             DSNAME=->.OPER.SCHEDLOG,                      *\n//*      //             DISP=(NEW,CATLG,DELETE)                       *\n//* AND YOU MAY EXECUTE IT AS FOLLOWS :                               *\n//*      //...      JOB ...                                           *\n//*      /*JOBPARM L=6                                                *\n//*      //XEQ     EXEC PGM=SCHEDLOG PARM=TEST                        *\n//*      //STEPLIB   DD DSN=->.TARGET.LINKLIB,DISP=SHR                *\n//*      //SYSIN     DD DSN=->.OPER.SCHEDLOG,DISP=SHR                 *\n//*      //SYSPRINT  DD SYSOUT=*                                      *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=SCHEDLOG\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT)\n  ENTRY   SCHEDLOG\n  NAME    SCHEDLOG(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCHEDLOG": {"ttr": 22540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10\\x05\\x00\\x89\\x00\\x89\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:05:00", "lines": 137, "newlines": 137, "modlines": 0, "user": "SYSPAJA"}, "text": "SCHL     TITLE '--- SCHEDULE/SCHEDRUN LOG LIST ---'\nSCHEDLOG START 0\n         SPACE 1\n* PURPOSE :    LIST THE LOG FILE OUTPUT OF SCHEDRUN PROGRAM EXECUTION.\n* ---------\n*\n* JCL TO EXECUTE IT :  //...     EXEC PGM=SCHEDLOG\n* -------------------  //SYSIN     DD DSN=->.OPER.SCHEDLOG,DISP=SHR\n*                      //SYSPRINT  DD SYSOUT=A\n*\n*                  OR  //...     EXEC PGM=SCHEDLOG,PARM=TEST\n*                      TO MAP THE LOG FILE RECORDS.\n*\n* AUTHOR :     MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 1\n        $DEFREG\n         EJECT\n        $XENT  BASE=R11\n         L     R2,0(R1)\n         XR    R0,R0\n         ICM   R0,B'0011',0(R2)\n         BZ    NPRM\n         CH    R0,=H'4'\n         BNE   NPRM\n         CLC   2(4,R2),=CL4'TEST'\n         BNE   NPRM\n         OI    SWITCH,TRUN\nNPRM    OPEN   (SCDCB,(INPUT))\n         TM    SCDCB+(DCBOFLGS-IHADCB),DCBOFOPN\n         BO    RVNXS\n         LA    R10,100\n         B     RVRET\nRVNXS   GET    SCDCB\n         XR    R2,R2\n         ICM   R2,B'0011',0(R1)\n         SH    R2,=H'4'\n         LA    R3,4(R1)\n         TM    SWITCH,TRUN\n         BO    *+L'*+12\n         LA    R4,108\n         NI    SWITCH,255-TSSC\n         B     RVNXT+L'RVNXT\n         MVC   LNM,=CL4'-S->'\nRVNXT    LA    R4,100\n         CLR   R2,R4\n         BH    RVMVT\n         LR    R4,R2\n         TM    SWITCH,TRUN\n         BZ    RVMVT\n         LA    R1,LNT(R4)\n         MVC   0(4,R1),=CL4'<-E-'\nRVMVT    BCTR  R4,0\n         TM    SWITCH,TRUN\n         BO    RMVTN\n         TM    SWITCH,TSSC\n         BZ    *+L'*+8\n         EX    R4,SMVC\n         B     RMVTN+L'RMVTN\n         OI    SWITCH,TSSC\nRMVTN    EX    R4,SMVN\n         CP    NLN,=PL2'+50'\n         BL    PLNE\n         ZAP   NLN,=PL1'+0'\n         AP    NPG,=PL1'+1'\n         MVC   TITP,=XL6'402020202120'\n         ED    TITP,NPG\n        $PRINT TIT\n         LTR   R10,R15\n         BNZ   RVEOF\n         TM    SWITCH,TRUN\n         BO    PSCL\n        $PRINT UNL\n         B     PTST\nPSCL    $PRINT SCL\nPTST     LTR   R10,R15\n         BNZ   RVEOF\nPLNE    $PRINT LNE\n         LTR   R10,R15\n         BNZ   RVEOF\n         AP    NLN,=PL1'+1'\n         MVC   LNM(L'LNM+L'LNT),LNE+1\n         LA    R4,1(R4)\n         ALR   R3,R4\n         SR    R2,R4\n         BP    RVNXT\n         B     RVNXS\nSMVN     MVC   LNT(*-*),0(R3)\nSMVC     MVC   LNT+8(*-*),0(R3)\nRVEOF   CLOSE  SCDCB\n        $PCLOSE\n         LTR   R10,R10\n         BNZ   RVRET\n         LR    R10,R15\nRVRET   $XRET  CC=(R10)\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n*        -------------------------\n         SPACE 1\nSWITCH   DC    XL1'0'\nTRUN     EQU   X'80'\nTSSC     EQU   X'40'\nNPG      DC    PL3'+0'\nNLN      DC    PL2'+99'\n         DC    AL1(LTIT)\nTIT      DC    CL6'1 '\n         DC    CL100'SCHEDULE/SCHEDRUN LOG LIST'\n         DC    CL4'PAGE'\nTITP     DC    CL6' '\nLTIT     EQU   *-TIT\n         DC    AL1(LUNL)\nUNL      DC    CL6' '\n         DC    C'--------------------------'\nLUNL     EQU   *-UNL\n         DC    AL1(LSCL)\nSCL      DC    CL6' '\n         DC    C'----+----1----+----2----+----3----+----4----+----5'\n         DC    C'----+----6----+----7----+----8----+----9----+----0'\nLSCL     EQU   *-SCL\n         DC    AL1(LLNE)\nLNE      DC    CL2' '\nLNM      DC    CL4' '\nLNT      DC    CL110' '\nLLNE     EQU   *-LNE\n         PRINT NOGEN\nSCDCB   DCB    DSORG=PS,DEVD=DA,MACRF=GL,BFALN=D,                      X\n               EODAD=RVEOF,DDNAME=SYSIN\n         PRINT GEN\n         SPACE 2\n        LTORG\n         SPACE 2\n         PRINT NOGEN\n        DCBD   DSORG=PS,DEVD=DA\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEEKANA$": {"ttr": 22543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//SEEKANAL JOB (........),'INSTALL  -SEEKANAL-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=3\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                TXPRINT   TXPUNCH   TXREAD                         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=SEEKANAL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(READ,PRINT,PUNCH)\n  ENTRY   SEEKANAL\n  NAME    SEEKANAL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEEKANA@": {"ttr": 22545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x10O\\x00\\x88\\x10O\\x14S\\x00T\\x00T\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-04-13T00:00:00", "modifydate": "1988-04-13T14:53:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "SYSPAJA"}, "text": "1   13/04/88\n                                                      SEEKANAL  1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *        SEEK ANALYSIS PROGRAM        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Program to graph the following information :\n  ---------        - seek distance\n                   - seeked cylinders\n                   - response time\n                   - only records with 0 seek length (PARM=Z)\n\n  Process :    1. Extract data from a GTF list.\n  ---------    2. Map these data.\n\n               Files : DDNAME\n                       SYSIN    : input (GTF list).\n                       SYSPRINT : output list.\n                       SYSPUNCH : work file (logical record length must\n                                  be equal to the label LREC value).\n                                  Use PARM=N if it already exist (SYSIN\n                                  is not needed in this case).\n\n  How to use : here follows guidelines to run this program.\n  ------------\n\n      1. Execute a GTF trace on a specific direct-access unit from the\n         main console :\n\n              S GTFSA.GTF\n                ...\n              XX AHL125A RESPECIFY TRACE OPTIONS OR REPLY U\n              R XX,'U'\n              AHL031I GTF INITIALIZATION COMPLETE\n                ...\n              P GTF\n\n         Cataloged procedure GTFSA (in data-set 'SYS1.PROCLIB') :\n              //GTFSA   PROC MEMBER=GTFSEEK,D=NEW,US=SYS1,N=\n              //IEFPROC EXEC PGM=AHLGTF,REGION=3000K,DPRTY=(15,15),\n              //             PARM='MODE=EXT,DEBUG=NO,TIME=YES'\n              //IEFRDER   DD UNIT=SYSDA,DSNAME=&US..TRACE&N..DATA,\n              //             SPACE=(CYL,(10,10)),DISP=(&D,CATLG)\n              //SYSLIB    DD DSNAME=SYS1.PARMLIB(&MEMBER),DISP=SHR\n\n         Member GTFSEEK (in data-set 'SYS1.PARMLIB') :\n              TRACE=IOP,SIOP\n              IO=SIO=(...)\n              END\n         where ... is the CUU physical device address.\n1   13/04/88\n                                                      SEEKANAL  2/2.\n\n      2. Then execute the SEEKANAL program as described below :\n\n              //ANALYSIS JOB ...\n              /*JOBPARM L=5\n              //GTFEDIT EXEC PGM=IKJEFT01,PARM=AMDPRDMP\n              //SYSTSIN   DD DUMMY,DCB=(RECFM=F,LRECL=80,BLKSIZE=80)\n              //SYSTSPRT  DD DUMMY\n              //TRACE     DD DSN=........TRACE....DATA,\n              //             DISP=(OLD,DELETE,KEEP)\n              //PRINTER   DD UNIT=SYSDA,DSN=&&TRLIST,\n              //             DCB=(RECFM=FBA,BLKSIZE=1330,LRECL=133),\n              //             SPACE=(CYL,(10,5)),DISP=(,PASS)\n              //SYSPRINT  DD SYSOUT=*\n              //INDEX     DD SYSOUT=*\n              //SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,20)),\n              //             DISP=(NEW,DELETE)\n              //SYSIN     DD *\n                EDIT   DDNAME=TRACE,SIO=IO=(...)\n                END\n              /*\n              //GRAPH   EXEC PGM=SEEKANAL\n              //STEPLIB   DD DSN=... LINK library ... (if needed)\n              //SYSIN     DD DSN=&&TRLIST,DISP=(OLD,DELETE)\n              //SYSPRINT  DD SYSOUT=*\n              //SYSPUNCH  DD UNIT=DISK,VOL=SER=VOLSER,\n              //             DSN=...USERID.TROUT....DATA,\n              //             SPACE=(CYL,(2,1)),DISP=(NEW,CATLG),\n              //             DCB=(RECFM=FB,BLKSIZE=320,LRECL=32)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SEEKANAL": {"ttr": 22786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\t\\x7f\\x00\\x88\\t\\x7f\\x132\\x03Q\\x03Q\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-04-06T00:00:00", "modifydate": "1988-04-06T13:32:00", "lines": 849, "newlines": 849, "modlines": 0, "user": "SYSPAJA"}, "text": "SKAN     TITLE 'SEEK ANALYSIS PROGRAM.'\nSEEKANAL START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* *                                                                 * *\n* *          S E E K     A N A L Y S I S     P R O G R A M          * *\n* *                                                                 * *\n* *            - SEEK DISTANCE                                      * *\n* *            - SEEKED CYLINDERS                                   * *\n* *            - RESPONSE TIME                                      * *\n* *            - ONLY RECORDS WITH 0 SEEK LENGTH (PARM=Z)           * *\n* *                                                                 * *\n* * FILES :    SYSIN    - INPUT (GTF LIST).                         * *\n* *            SYSPRINT - OUTPUT LIST.                              * *\n* *            SYSPUNCH - WORK FILE (LOGICAL RECORD LENGTH MUST     * *\n* *                       BE EQUAL TO THE LABEL 'LREC').            * *\n* *                       USE PARM=N IF ALREADY EXIST.              * *\n* *                                                                 * *\n* * REWORKED BY : RAVARANI N. - MOINIL P.A.                         * *\n* *               COMPUTING CENTRE - J.R.C. - ISPRA ESTABLISHMENT   * *\n* *               21020 ISPRA (VA), ITALY                           * *\n* *                                                                 * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nMXCYL    EQU   900                 MAX. NUMBER OF CYLINDERS OF THE\n*                                       LARGEST DEVICE TYPE TO BE\n*                                       CONSIDERED BY SEEK ANALYSIS.\nLTTIME   EQU   1000                MAX. THOUSANDS OF SECONDS INTERVAL\n*                                       BETWEEN SIO AND IO INTERRUPT.\n         EJECT\n        $DEFREG\n         SPACE 2\nRECORD   DSECT                     WORK FILE RECORD DESCRIPTION\n         SPACE 1\nCODE     DS    CL3,C\nSADDR    DS    0CL4,C\nADDR     DS    CL3,C\nTIME     DS    CL13,C\nCSWCC    DS    0CL4,C\nSIOCC    DS    0CL2,C\nCC       DS    CL2,C\nSEEKADR  DS    CL4\n         SPACE 1\nLREC     EQU   *-RECORD            LOGICAL RECORD LENGTH (SYSPUNCH)\n         SPACE 1\nSEEKANAL CSECT                     RESTORE ORIGINAL CSECT\n         EJECT\n        $XENT  BASE=(R11,R12)\n*        EXAMINE THE PARM. FIELD\n         SPACE 1\n         L     R1,0(R1)            PARM. FIELD ADDRESS\n         LH    R2,0(R1)            PARM. FILED LENGTH\n         LTR   R2,R2\n         BNP   NOPARM              NO PARM. FIELD\nPA0      CLI   2(R1),C'Z'          ONLY ZERO SEEK LENGTH REQUESTED?\n         BNE   PA1                 NO\n         OI    SWITCH,SWZR         YES\n         B     PANXT\nPA1      CLI   2(R1),C'N'          BYPASS EXTRACT REQUESTED?\n         BNE   PASEP               NO\n         OI    SWITCH,SWAN         YES, WORK FILE ALREADY EXIST\n         B     PANXT\nPASEP    CLI   2(R1),C','          SEPARATOR?\n         BE    PANXT               YES\n         LA    R10,8               SET ERROR PARM. FIELD R.C.\n         B     LEAVE\nPANXT    LA    R1,1(R1)            NEXT CHARACTER\n         BCT   R2,PA0              LOOP IF MORE\nNOPARM   TM    SWITCH,SWZR\n         BO    *+L'*+10\n         MVC   ZRL+1(L'ZRL-1),ZRL  CLEAR\n         MVI   ZRL,C'.'\n         EJECT\n*        GET TABLES SPACE.\n         SPACE 1\n         L     R2,=A(MXCYL)        R2 = 'TABMOV'/'TABSEEK' LENGTH\n         SLL   R2,2\n         LR    R3,R2\n         AR    R3,R2\n         L     R1,=A(LTTIME)       R1 = 'TABTIME' LENGTH\n         SLL   R1,2\n         AR    R3,R1\n         AH    R3,=H'7'\n         SRL   R3,3\n         SLL   R3,3                R3 = TOTAL LENGTH ROUNDED\n         ST    R3,FREEARL\n        GETMAIN R,LV=(R3)\n         ST    R1,TABMOV           'TABMOV' START ADDRESS\n         ALR   R1,R2\n         ST    R1,TABSEEK          'TABSEEK' START ADDRESS\n         ALR   R1,R2\n         ST    R1,TABTIME          'TABTIME' START ADDRESS\n         TM    SWITCH,SWAN\n         BO    ANAL                GO TO SEEK ANALYSIS DIRECTLY\n         EJECT\n*        EXTRACT DATA FROM GTF LIST\n*        (LOOK FOR IO AN SIO/SSCH LINES)\n         SPACE 1\nEXGTF    LA    R9,IOPRREC\n         LA    R8,SIOPRREC\nRGTF    $READ  GTFREC\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         TM    SWITCH,SWPR         DATE RECORD FOUND?\n         BO    GO                  YES\n         CLC   GTFREC+1(15),=CL15'*** DATE   DAY '\n         BNE   RGTF\n         OI    SWITCH,SWPR         SET SWITCH\n         MVI   SIOPRREC,C' '\n         MVC   SIOPRREC+1(L'SIOPRREC-1),SIOPRREC\n         USING RECORD,R8\n         MVC   CODE(L'CODE),GTFREC+12   MOVE DAY CHARS\n         MVC   ADDR(L'ADDR),GTFREC+16   MOVE SERIAL DAY\n         MVC   CSWCC(L'CSWCC),GTFREC+28 MOVE YEAR\n         MVC   SEEKADR(L'SEEKADR),=CL4'0000' RESET FIELD\n         DROP  R8\n        $PUNCH SIOPRREC,LPU\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PUNCH ERROR EXIT\n         B     RGTF\nGO       CLC   GTFREC+1(4),=CL4'SSCH'\n         BE    RECSSCH\n         CLC   GTFREC+1(3),=CL3'SIO'\n         BE    RECSIO\n         CLC   GTFREC+1(3),=CL3'IO '\n         BNE   RGTF                NOTHING, CONTINUE WITH NEXT RECORD\n         SPACE 1\n*        IO RECORD FOUND, EXTRACT DATA\n         SPACE 1\nRECIO    L     R2,CRECIO\n         AH    R2,=H'1'            COUNT RECORDS\n         ST    R2,CRECIO\n         CLI   SIOOK,X'FF'         WAS SIO RECORD OK?\n         MVI   SIOOK,0\n         BNE   RGTF                NO, DISCARD THIS\n         MVI   IOPRREC,C' '\n         MVC   IOPRREC+1(L'IOPRREC-1),IOPRREC\n         USING RECORD,R9\n         MVC   CODE(L'CODE),GTFREC+1    MOVE IO CHARS\n         MVC   SADDR(L'SADDR),GTFREC+6  SIO ADDRESS\nNIO1    $READ  GTFREC              NEXT RECORD\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+11(3),=CL3'IRB'   THIS LINE?\n         BNE   NIO2                NO, LOOK FURTHER\n         CLI   GTFREC+33,C'5'      STATUS AND BUSY CONDITION?\n         BE    SMBUS               YES, SKIP THESE RECORDS\n         MVC   CSWCC(L'CSWCC),GTFREC+33 CSW CC\n         B     NIO3\nNIO2     CLC   GTFREC+11(3),=CL3'CSW'   THIS LINE?\n         BNE   NIO1                NO, CONTINUE\n         CLI   GTFREC+25,C'5'      STATUS AND BUSY CONDITION?\n         BE    SMBUS               YES, SKIP THESE RECORDS\n         MVC   CSWCC(L'CSWCC),GTFREC+25 CSW CC\nNIO3    $READ  GTFREC              NEXT RECORD\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+11(4),=CL4'TIME'  THIS LINE?\n         BNE   NIO3                NO, GET NEXT ONE\n         MVC   TIME(L'TIME),GTFREC+18\n         DROP  R9\n        $PUNCH SIOPRREC,LPU\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PUNCH ERROR EXIT\n        $PUNCH IOPRREC,LPU\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PUNCH ERROR EXIT\n         L     R2,RECOUT\n         AH    R2,=H'1'            COUNT RECORD PAIRS WRITTEN\n         ST    R2,RECOUT\n         B     RGTF\nSMBUS    L     R2,CSMBUS\n         AH    R2,=H'1'            COUNT RECORDS IO SM + BUSY\n         ST    R2,CSMBUS\n         B     RGTF\n         SPACE 1\n*        SSCH RECORD FOUND, EXTRACT DATA\n         SPACE 1\nRECSSCH  L     R2,CRECSIO\n         AH    R2,=H'1'            COUNT RECORDS\n         ST    R2,CRECSIO\nNEWSSCH  MVI   SIOPRREC,C' '\n         MVC   SIOPRREC+1(L'SIOPRREC-1),SIOPRREC\n         USING RECORD,R8\n         MVC   CODE(L'CODE),=CL3'SIO'   MOVE SIO CHARS\n         MVC   SADDR(L'SADDR),GTFREC+6  SIO ADDRESS\n         CLI   GTFREC+98,C'2'      CHANNEL BUSY?\n         BE    CCHBUSY             YES, DISCARD RECORD\n         MVC   SIOCC(L'SIOCC),GTFREC+97 SIO CC\nNSSCH1  $READ  GTFREC              NEXT RECORD\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+11(5),=CL5'SEEKA' THIS LINE?\n         BNE   NSSCH1              NO, GET NEXT ONE\n         MVC   SEEKADR(2),GTFREC+23     SEEK ADDRESS (CYL) 1ST BYTE\n         MVC   SEEKADR+2(2),GTFREC+26   SEEK ADDRESS (CYL) 2ND BYTE\nNSSCH2  $READ  GTFREC              NEXT RECORD\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+11(4),=CL4'TIME'  THIS LINE?\n         BNE   NSSCH2              NO, GET NEXT ONE\n         MVC   TIME(L'TIME),GTFREC+18\n         DROP  R8\nNSSCH3  $READ  GTFREC\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+1(3),=CL3'IO '\n         BE    NOCCWCH\n         CLC   GTFREC+1(3),=CL3'SIO'\n         BE    NEWSSCH\n         B     NSSCH3\n         SPACE 1\n*        SIO RECORD FOUND, EXTRACT DATA\n         SPACE 1\nRECSIO   L     R2,CRECSIO\n         AH    R2,=H'1'            COUNT RECORDS\n         ST    R2,CRECSIO\nNEWSIO   MVI   SIOPRREC,C' '\n         MVC   SIOPRREC+1(L'SIOPRREC-1),SIOPRREC\n         USING RECORD,R8\n         MVC   CODE(L'CODE),GTFREC+1    MOVE SIO CHARS\n         MVC   SADDR(L'SADDR),GTFREC+6  SIO ADDRESS\nNSIO1   $READ  GTFREC              NEXT RECORD\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+11(4),=CL4'FLGS'  THIS LINE?\n         BNE   NSIO1               NO, GET NEXT ONE\n         CLI   GTFREC+81,C'2'      CHANNEL BUSY?\n         BE    CCHBUSY             YES, DISCARD RECORD\n         MVC   SIOCC(L'SIOCC),GTFREC+80 SIO CC\n         MVC   SEEKADR(2),GTFREC+65     SEEK ADDRESS (CYL) 1ST BYTE\n         MVC   SEEKADR+2(2),GTFREC+68   SEEK ADDRESS (CYL) 2ND BYTE\nNSIO2   $READ  GTFREC              NEXT RECORD\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+11(4),=CL4'TIME'  THIS LINE?\n         BNE   NSIO2               NO, GET NEXT ONE\n         MVC   TIME(L'TIME),GTFREC+18\n         DROP  R8\nNSIO3   $READ  GTFREC\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+11(9),=CL9'CCW CHAIN'  THIS LINE?\n         BE    NSIO4\n         CLC   GTFREC+1(3),=CL3'IO '\n         BE    NOCCWCH\n         CLC   GTFREC+1(3),=CL3'SIO'\n         BE    NEWSIO\n         B     NSIO3\nNOCCWCH  MVI   SIOOK,X'FF'         SET SIO RECORD OK SWITCH\n         B     RECIO\nNSIO4   $READ  GTFREC\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDREAD             END OF LIST\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   GTFREC+11(8),=CL8' '     BLANKS?\n         BE    NSIO4               YES, NOT YET LINE\n         SPACE 1\n*        SHOULD BE FIRST CHANNEL PROGRAM\n         SPACE 1\n         CLC   GTFREC+21(2),=CL2'94'    DEVICE RELEASE?\n         BE    DEVREL              YES, IGNORE\n         MVI   SIOOK,X'FF'         SET SIO RECORD OK SWITCH\n         B     RGTF\nDEVREL   L     R2,CDEVREL\n         AH    R2,=H'1'            COUNT RECORDS SIO DEVICE RELEASE\n         ST    R2,CDEVREL\n         B     RGTF\nCCHBUSY  L     R2,CCHBUS\n         AH    R2,=H'1'            COUNT RECORDS SIO CHANNEL BUSY\n         ST    R2,CCHBUS\n         B     RGTF\n         EJECT\n*        END OF SELECTION\n         SPACE 1\nENDREAD $PRINT PSEND\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n        $PRINT PSENDU\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         L     R1,CRECIO\n         CVD   R1,DW\n         MVC   PSTATNR,MASK\n         ED    PSTATNR,DW+4\n         MVC   PSTATTX,=CL13'IO RECORDS :'\n        $PRINT PSTAT\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         BAL   R8,PUSTAT\n         L     R1,CRECSIO\n         CVD   R1,DW\n         MVC   PSTATNR,MASK\n         ED    PSTATNR,DW+4\n         MVC   PSTATTX,=CL13'SIO RECORDS :'\n        $PRINT PSTAT\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         BAL   R8,PUSTAT\n         L     R1,CCHBUS\n         CVD   R1,DW\n         MVC   PSTATNR,MASK\n         ED    PSTATNR,DW+4\n         MVC   PSTATTX,=CL13'CHAN. BUSY :'\n        $PRINT PSTAT\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         BAL   R8,PUSTAT\n         L     R1,CDEVREL\n         CVD   R1,DW\n         MVC   PSTATNR,MASK\n         ED    PSTATNR,DW+4\n         MVC   PSTATTX,=CL13'DEV RELEASE :'\n        $PRINT PSTAT\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         BAL   R8,PUSTAT\n         L     R1,CSMBUS\n         CVD   R1,DW\n         MVC   PSTATNR,MASK\n         ED    PSTATNR,DW+4\n         MVC   PSTATTX,=CL13'S.M. + BUSY :'\n        $PRINT PSTAT\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         BAL   R8,PUSTAT\n         L     R1,RECOUT\n         CVD   R1,DW\n         MVC   PSTATNR,MASK\n         ED    PSTATNR,DW+4\n         MVC   PSTATTX,=CL13'RECORDS OUT :'\n        $PRINT PSTAT\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         BAL   R8,PUSTAT\n         OC    RECOUT,RECOUT\n         BNZ   CONT\n        $PRINT PNORC\n         LR    R10,R15             SET RETURN CODE\n         B     EXIT\n         USING RECORD,R9\nPUSTAT   OC    RECOUT,RECOUT\n         BZR   R8\n         MVI   IOPRREC,C' '\n         MVC   IOPRREC+1(L'IOPRREC-1),IOPRREC\n         MVC   CODE,=CL3'STS'\n         MVC   TIME,PSTATTX\n         MVC   SIOCC(L'PSTATNR),PSTATNR\n        $PUNCH IOPRREC,LPU\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PUNCH ERROR EXIT\n         BR    R8\n         DROP  R9\nCONT    $PRINT PEND\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n        $RCLOSE ,                  CLOSE READ\n        $UCLOSE ,                  CLOSE PUNCH\n         NI    SWITCH,255-SWPR     RESET SWITCH\n         EJECT\n*        ANALYZE INPUT DATA.\n         SPACE 1\nANAL     LA    R8,IOPRREC\n         USING RECORD,R8\nREAD    $READ  IOPRREC,WFILE       GET NEW RECORD\n         LTR   R10,R15             TEST RETURN CODE\n         BM    EOF                 END OF FILE\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   CODE,=CL3'STS'      STATISTICS RECORDS?\n         BE    EOF                 YES\n         TR    SEEKADR,TRTAB-X'C0'\n         TM    SWITCH,SWPR         FIRST SIO REC FOUND?\n         BO    SK1                 YES\n         CLC   CODE,=CL3'SIO'      THIS ONE?\n         BNE   SK0                 NO\n         MVC   VOLSD,ADDR          SET VOLUME IN LISTS\n         MVC   VOLSA,ADDR\n         MVC   VOLRT,ADDR\n         OI    SWITCH,SWPR         SET SWITCH\n         PACK  PACKZ,SEEKADR\n         L     R2,PACKZ            GET SEEK ADDR\n         SRL   R2,4                SHIFT OUT SIGN\n         ST    R2,ARMPOS           SET FIRST ARM POSITION\n         MVC   TMT(L'TMT),TIME     GET TIME STAMP OF SIO\n         PACK  DW,TMT\n         CVB   R3,DW               CONVERT TO BINARY\n         SR    R2,R2\n         D     R2,=F'3600'         COMPUTE HH.MM.SS\n         CVD   R3,DW\n         UNPK  HSTR(2),DW+6(2)\n         OI    HSTR+1,C'0'\n         LR    R3,R2\n         SR    R2,R2\n         D     R2,=F'60'\n         CVD   R3,DW\n         UNPK  HSTR+3(2),DW+6(2)\n         OI    HSTR+4,C'0'\n         CVD   R2,DW\n         UNPK  HSTR+6(2),DW+6(2)\n         OI    HSTR+7,C'0'\n         B     READ                READ NEXT RECORD\nSK0      CLC   CODE,=CL3'DAY'      IS IT DAY RECORD?\n         BNE   READ                NO\n         MVC   HDAY,ADDR           YES\n         MVC   HYEAR,CSWCC\n         B     READ\nSK1      CLC   CODE,=CL3'SIO'      SIO RECORD?\n         BNE   SK2                 NO\n         MVC   TMT(L'TMT),TIME     RETAIN TIME STAMP OF SIO\n         MVC   T(6),TIME           GET TIME STAMP OF SIO\n         MVC   T+6(3),TIME+7\n         PACK  DW,T\n         CVB   R2,DW               CONVERT TO BINARY\n         ST    R2,TSIO\n         PACK  PACKZ,SEEKADR       GET SEEK ADDRESS\n         L     R2,PACKZ\n         SRL   R2,4                SHIFT OUT SIGN\n         ST    R2,PACKZ            SAVE ADDRESS\n         L     R3,ARMPOS           GET OLD POSTION\n         CR    R3,R2               POS OR NEG SEEK?\n         BH    SKPOS               POSITIVE\n         SR    R2,R3               COMPUTE SEEK LENGTH\n         B     ZEROL\nSKPOS    SR    R3,R2               COMPUTE SEEK LENGTH\n         LR    R2,R3               AND CHANGE REGISTER\nZEROL    TM    SWITCH,SWZR         ONLY ZERO SEEK LENGTH REQUESTED?\n         BZ    SETTAB              NO, ALL\n         LTR   R2,R2               ZERO SEEK LENGTH\n         BZ    SETTAB\n         MVC   ARMPOS,PACKZ        SET NEW ARM POS BUT ELIMINE VALUE\n        $READ  IOPRREC,WFILE       ELIMINATED IO RECORD\n         LTR   R10,R15             TEST RETURN CODE\n         BM    EOF                 END OF FILE\n         BNZ   EXIT                READ ERROR EXIT\n         B     READ\nSETTAB   CL    R2,=A(MXCYL)        CHECK DISPL.\n         BH    ERRMOV              TOO LARGE\n         SLL   R2,2                MULTIPLY BY 4 TO ALIGN ON FULLWORD\n         L     R3,TABMOV           GET START ADDRESS OF TABLE\n         L     R0,0(R2,R3)         GET OLD VALUE\n         AH    R0,=H'1'            INCREMENT\n         ST    R0,0(R2,R3)         AND STORE BACK\n         L     R0,TOTMOV           INCREMENT TOTAL\n         AH    R0,=H'1'\n         ST    R0,TOTMOV\n         L     R2,PACKZ            GET ADDR OF SEEK\n         CL    R2,=A(MXCYL)        CHECK DISPL.\n         SLL   R2,2                MULTIPLY BY 4 TO ALIGN ON FULLWORD\n         BH    ERRSEEK             TOO LARGE\n         L     R3,TABSEEK          GET START ADDRESS OF TABLE\n         L     R0,0(R2,R3)         GET OLD VALUE\n         AH    R0,=H'1'            INCREMENT\n         ST    R0,0(R2,R3)         AND STORE BACK\n         L     R0,TOTSEEK          INCREMENT TOTAL\n         AH    R0,=H'1'\n         ST    R0,TOTSEEK\n         MVC   ARMPOS,PACKZ        SET NEW ARM POSITION\n         B     READ                GET NEXT RECORD\nSK2      CLC   CODE,=CL3'IO '\n         BNE   READ\n         MVC   TMT(L'TMT),TIME     RETAIN TIME STAMP OF IO\n         MVC   T(6),TIME           GET TIME STAMP OF IO INTERRUPT\n         MVC   T+6(3),TIME+7\n         PACK  DW,T\n         CVB   R2,DW               CONVERT TO BINARY\n         S     R2,TSIO             MINUS SIO TIME\n         CL    R2,=A(LTTIME)       CHECK DISPL.\n         BH    READ                IGNORE\n         SLL   R2,2                MULT BY 4 FOR DISPL.\n         L     R3,TABTIME\n         L     R0,0(R2,R3)         GET OLD VALUE\n         AH    R0,=H'1'            BUMP\n         ST    R0,0(R2,R3)         AND STORE BACK\n         L     R0,TOTTIME          INCREMENT TOTAL\n         AH    R0,=H'1'\n         ST    R0,TOTTIME\n         B     READ\n         DROP  R8\n         EJECT\n*        PRINT GRAPHS.\n         SPACE 1\nEOF      PACK  DW,TMT\n         CVB   R3,DW               CONVERT TO BINARY\n         SR    R2,R2\n         D     R2,=F'3600'         COMPUTE HH.MM.SS\n         CVD   R3,DW\n         UNPK  HEND(2),DW+6(2)\n         OI    HEND+1,C'0'\n         LR    R3,R2\n         SR    R2,R2\n         D     R2,=F'60'\n         CVD   R3,DW\n         UNPK  HEND+3(2),DW+6(2)\n         OI    HEND+4,C'0'\n         CVD   R2,DW\n         UNPK  HEND+6(2),DW+6(2)\n         OI    HEND+7,C'0'\n         SR    R2,R2               FIRST CYL NUMBER\n         L     R3,TABMOV           ADDRESS OF TABLE\n         LA    R7,50               PAGE WIDTH\n         L     R8,=A(MXCYL)        END VALUE\n         BAL   R14,ADJUST\n         MVC   COUNT,TOTMOV        GET TOTAL\nNEWSD    MVC   HPG(L'HPG),=XL4'40202120'\n         ED    HPG,NRPG\n        $PRINT TIT                 PRINT TITLE LINE\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         AP    NRPG,=PL1'+1'\n        $PRINT LSD                 PRINT HEADER LINE\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\nNEWPG    L     R1,COUNT            TOTAL OF EVENTS\n         CVD   R1,DW\n         MVC   PNVALN,MASK\n         ED    PNVALN,DW+4\n        $PRINT PNVAL\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         MVI   SCALE,C'0'          SET DOUBLE SPACE\n        $PRINT SCALE               PRINT HEADER LINE\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         LA    R5,1                LOOP FOR CYL NO. PRINT\n         LA    R6,0(R2,R7)         MAX. TO PAGE\nLOOP     LR    R1,R2               CYL VALUE\n         SLL   R1,2                MULTIPLY BY 4 FOR DISPL.\n         L     R4,0(R1,R3)         GET LENGTH OF MOVE\n         CLI   SWS,1               SECOND ROUND?\n         BNE   DCY                 NO\n         STH   R2,DW               HEXADECIMAL VALUE\n         UNPK  DW+3(5),DW(3)\n         CLI   DW+6,X'F0'\n         BE    SCPR\n         CLI   DW+6,X'F5'\n         BE    SCPR\n         CLI   DW+6,X'FA'\n         BE    SCPR\n         CLI   DW+6,X'FF'\n         BNE   NOPR\nSCPR     TR    DW+3(4),TRHEX-X'F0'\n         MVC   CYLS(4),DW+3\n         B     NOPR\nDCY      BCT   R5,NOPR             PRINT VALUE?\n         CVD   R2,DW               EDIT VALUE\n         MVC   CYLS(4),=XL4'40202120'\n         ED    CYLS(L'CYLS),DW+6\n         LA    R5,5                RESET LOOP\nNOPR     LTR   R4,R4               ZERO?\n         BNP   STAMP               YES\n         SR    R0,R0               COMPUTE PRECENTAGE\n         LR    R1,R4\n         M     R0,=F'1000'\n         D     R0,COUNT\n         LR    R14,R1\n         SR    R0,R0\n         AH    R1,=H'5'\n         D     R0,=F'10'\n         LTR   R1,R1               ZERO?\n         BNP   *+L'*+2             YES, MOVE ONE\n         BCTR  R1,0                -1 FOR MOVE\n         EX    R1,MVCSTARS\n         LA    R1,STARS+2(R1)\n         MVC   0(FILLL,R1),FILL\n         CVD   R4,DW\n         ED    L'FILL-1(L'FILLM+1,R1),DW+4\n         CVD   R14,DW\n         MVC   TMT,=XL6'602020212020'\n         ED    TMT,DW+5\n         MVC   L'FILL+L'FILLM+1(L'FILLP,R1),TMT+2\n         MVC   L'FILL+L'FILLM+L'FILLP+2(L'FILLD,R1),TMT+L'FILLP+2\n         L     R1,CUMUL\n         AR    R1,R4\n         ST    R1,CUMUL\n         SR    R0,R0               COMPUTE CUMULATIVE PRECENTAGE\n         M     R0,=F'1000'\n         D     R0,COUNT\n         AH    R1,=H'5'\n         CVD   R1,DW\n         MVC   TMT,=XL6'402020212020'\n         ED    TMT,DW+5\n         MVC   CPC(L'CPC),TMT+2\n         MVI   SPRTR,C'-'\nSTAMP   $PRINT LINE\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         MVC   CPC(4),=CL4' '      CLEAR\n         MVC   CYLS,=CL4' '\n         MVI   STARS,C' '\n         MVC   STARS+1(LLCLR-1),STARS   CLEAR LINE\n         AH    R2,=H'1'            ADVANCE IN CYL NO.\n         CLR   R2,R8               END?\n         BNL   ASTMIN              YES\n         CLR   R2,R6               NEW PAGE?\n         BL    LOOP                NO\n         MVI   SCALE,C' '          SET SINGLE SPACE\n        $PRINT SCALE               PRINT TRAILER LINE\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         CLI   SWS,255             LAST ROUND?\n         BE    NEWRT               YES\n         CLI   SWS,1               SECOND ROUND?\n         BE    NEWSA               YES\n         B     NEWSD               NO\nMVCSTARS MVC   STARS(*-*),=100C'*' << EXECUTED >>\nASTMIN   MVI   SCALE,C' '          SET SINGLE SPACE\n        $PRINT SCALE               PRINT TRAILER LINE\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         XC    CUMUL,CUMUL\n         CLI   SWS,255             LAST ROUND?\n         BE    END                 YES\n         CLI   SWS,1               SECOND ROUND?\n         BE    SROUND              YES\n         MVI   SWS,1               NO\n         SR    R2,R2               FIRST CYL NUMBER\n         L     R3,TABSEEK          ADDRESS OF TABLE\n         LA    R7,X'30'            PAGE WIDTH\n         L     R8,=A(MXCYL)        END VALUE\n         BAL   R14,ADJUST\n         MVC   COUNT,TOTSEEK       GET TOTAL\nNEWSA    MVC   HPG(L'HPG),=XL4'40202120'\n         ED    HPG,NRPG\n        $PRINT TIT                 PRINT TITLE LINE\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         AP    NRPG,=PL1'+1'\n        $PRINT LSA\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         B     NEWPG\nSROUND   MVI   SWS,255\n         SR    R2,R2               STARTING RESPONSE TIME (MSEC)\n         L     R3,TABTIME          ADDRESS OF TABLE\n         LA    R7,50               PAGE WIDTH\n         L     R8,=A(LTTIME)       END VALUE\n         BAL   R14,ADJUST\n         MVC   COUNT,TOTTIME       GET TOTAL\nNEWRT    MVC   HPG(L'HPG),=XL4'40202120'\n         ED    HPG,NRPG\n        $PRINT TIT                 PRINT TITLE LINE\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         AP    NRPG,=PL1'+1'\n        $PRINT LRT\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n         B     NEWPG\n         SPACE 1\nADJUST   LR    R1,R3               ADJUST END OF TABLE ROUTINE\n         LR    R0,R8\n         SLL   R0,2\n         AR    R1,R0\nADJUST1  SH    R1,=H'4'\n         CLR   R1,R3\n         BNH   ADJUST2\n         OC    0(4,R1),0(R1)\n         BZ    ADJUST1\nADJUST2  AH    R1,=H'4'\n         SR    R1,R3\n         SRL   R1,2\n         CLR   R1,R8\n         BNLR  R14\n         AR    R1,R7\n         CLR   R1,R8\n         BNLR  R14\n         SR    R0,R0\n         DR    R0,R7\n         SR    R0,R0\n         MR    R0,R7\n         LR    R8,R1\n         BR    R14\n         EJECT\n*        END OF WORK.\n         SPACE 1\nEND      LA    R8,IOPRREC\n         USING RECORD,R8\n         CLC   CODE,=CL3'STS'      STATISTICS RECORDS?\n         BNE   ENDWK               NO\n         MVI   PSTEND,C'0'\n        $PRINT PSEND\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n        $PRINT PSENDU\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\nENDPR    MVC   PSTATTX,TIME\n         MVC   PSTATNR(L'PSTATNR),SIOCC\n        $PRINT PSTAT\n         LTR   R10,R15             TEST RETURN CODE\n         BNZ   EXIT                PRINT ERROR EXIT\n        $READ  IOPRREC,WFILE\n         LTR   R10,R15             TEST RETURN CODE\n         BM    ENDWK               END OF FILE\n         BNZ   EXIT                READ ERROR EXIT\n         CLC   CODE,=CL3'STS'      STATISTICS RECORDS?\n         BE    ENDPR               YES\nENDWK   $PRINT PSTEND\n         LR    R10,R15             SET RETURN CODE\nEXIT    $RCLOSE ,                  CLOSE ALL - READ\n        $UCLOSE ,                            - PUNCH\n        $PCLOSE ,                            - PRINT\n         L     R1,TABMOV\n         L     R0,FREEARL\n        FREEMAIN R,A=(1),LV=(0)\nLEAVE   $XRET  CC=(R10)\n         EJECT\n*        ERROR DIAGNOSTICS.\n         SPACE 1\nERRMOV  $PRINT ERMOVM\n         B     ERREX\nERRSEEK $PRINT ERSEEKM\nERREX    LA    R10,16              SET ERROR R.C.\n         B     EXIT\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n         SPACE 1\nDW       DC    D'0'\nTABMOV   DC    F'0'\nTABSEEK  DC    F'0'\nTABTIME  DC    F'0'\nFREEARL  DC    F'0'\nLPU      DC    A(LREC)\nCRECIO   DC    F'0'\nCRECSIO  DC    F'0'\nCCHBUS   DC    F'0'\nCDEVREL  DC    F'0'\nCSMBUS   DC    F'0'\nRECOUT   DC    F'0'\nCOUNT    DC    F'0'\nCUMUL    DC    F'0'\nARMPOS   DC    F'0'\nPACKZ    DC    F'0'\nTSIO     DC    F'0'\nTOTMOV   DC    F'0'\nTOTSEEK  DC    F'0'\nTOTTIME  DC    F'0'\n         SPACE 1\nSIOOK    DC    X'0'\nSWS      DC    X'0'\nSWITCH   DC    X'0'\nSWZR     EQU   X'01'\nSWAN     EQU   X'02'\nSWPR     EQU   X'04'\nWFILE    DC    CL8'SYSPUNCH'\nMASK     DC    XL8'4020202020202120'\nNRPG     DC    PL2'+1'\nFILL     DC    CL3'<--'\nFILLM    DC    XL7'20202020202120',CL1'-'\nFILLP    DC    CL3' ',C','\nFILLD    DC    CL1' ',C'%'\nFILLL    EQU   *-FILL\nTMT      DC    CL6' '\nT        DC    CL9' '\nTRHEX    DC    CL16'0123456789ABCDEF'\nTRTAB    DC    XL7'000A0B0C0D0E0F',XL9'0'\n         DC    XL16'0'\n         DC    XL16'0'\n         DC    XL10'00010203040506070809',XL6'0'\n         EJECT\n         DC    AL1(LTIT)\nTIT      DC    C'1GTF ANALYSIS FROM '\nHSTR     DC    CL8'  .  .  ',C' TO '\nHEND     DC    CL8'  .  .  ',C' OF DAY '\nHDAY     DC    CL3'...',C', YEAR '\nHYEAR    DC    CL4'....',C'.'\nFILLER   EQU   120-(*-TIT)\n         DC    (FILLER)C' ',C'PAGE'\nHPG      DC    CL4' ',C'.'\nLTIT     EQU   *-TIT\n         SPACE 1\n         DC    AL1(LLSD)\nLSD      DC    C'0SEEK DISTANCE ANALYSIS - DEVICE : '\nVOLSD    DC    CL3' ',C', Y-AXIS : NUMBER OF CYLS.'\nLLSD     EQU   *-LSD\n         SPACE 1\n         DC    AL1(LLSA)\nLSA      DC    C'0SEEK ADDRESS ANALYSIS - DEVICE : '\nVOLSA    DC    CL3' ',C', Y-AXIS : CYL. ADDRESS.'\nLLSA     EQU   *-LSA\n         SPACE 1\n         DC    AL1(LLRT)\nLRT      DC    C'0RESPONSE TIME ANALYSIS - DEVICE : '\nVOLRT    DC    CL3' ',C', Y-AXIS : MILLISECONDS'\nZRL      DC    C' - ONLY ZERO SEEK LENGTH.'\nLLRT     EQU   *-LRT\n         SPACE 1\n         DC    AL1(SCALEL)\nSCALE    DC    CL5' C.% ',CL4' ',CL2' I'\n         DC    C'----+----1----+----2----+----3----+----4----+----5'\n         DC    C'----+----6----+----7----+----8----+----9----+----I'\nSCALEL   EQU   *-SCALE\n         SPACE 1\n         DC    AL1(LLINE)\nLINE     DC    CL1' '\nCPC      DC    CL3' '\nSPRTR    DC    CL1' '\nCYLS     DC    CL4' ',CL2' I'\nSTARS    DC    CL100' ',(FILLL+1)C' '\nLLCLR    EQU   *-STARS\nLLINE    EQU   *-LINE\n         SPACE 2\n         DC    AL1(PSTATL)\nPSTAT    DC    C'0',CL5' '\nPSTATTX  DC    CL13' '\nPSTATNR  DC    CL8' '\nPSTATL   EQU   *-PSTAT\n         SPACE 1\n         DC    AL1(PNVALL)\nPNVAL    DC    C' TOTAL NUMBER OF EVENTS IN THE ANALYZED PERIOD :'\nPNVALN   DC    CL8' ',C'.'\nPNVALL   EQU   *-PNVAL\n         SPACE 1\n         DC    AL1(L'PSEND)\nPSEND    DC    C'1     EXTRACTED GTF DATA STATUS CHECK :'\n         DC    AL1(L'PSENDU)\nPSENDU   DC    C'      ---------------------------------'\n         DC    AL1(L'PEND)\nPEND     DC    C'0     --- GTF DATA EXTRACTED ---'\n         DC    AL1(L'PNORC)\nPNORC    DC    C'0     --- NO GTF DATA EXTRACTED. -EXIT-'\n         DC    AL1(L'PSTEND)\nPSTEND   DC    C'1     --- SEEK ANALYSIS END ---'\n         SPACE 1\n         DC    AL1(L'ERMOVM)\nERMOVM   DC    C'0 --- SEEK LENGTH TABLE TOO SMALL (MXCYL). -EXIT-'\n         DC    AL1(L'ERSEEKM)\nERSEEKM  DC    C'0 --- SEEK ADDRESS TABLE TOO SMALL (MXCYL). -EXIT-'\n         SPACE 1\nIOPRREC  DC    (LREC)C' '\nSIOPRREC DC    (LREC)C' '\nGTFREC   DC    CL140' '\n         SPACE 2\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHUTDOW$": {"ttr": 23046, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//SHUTDOWN JOB (........),'INSTALL -SHUTDOWN-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=3\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   OPCOM     SRCHRPI   TXPRINT   TXREAD     *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=SHUTDOWN\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,READ,SETOPC,SRCHRPI)\n  ENTRY   SHUTDOWN\n  NAME    SHUTDOWN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHUTDOW@": {"ttr": 23048, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x18\\x7f\\x00\\x88\\x18\\x7f\\x17@\\x00\\x81\\x00\\x81\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-07-05T00:00:00", "modifydate": "1988-07-05T17:40:00", "lines": 129, "newlines": 129, "modlines": 0, "user": "SYSPAJA"}, "text": "1   05/07/88\n                                                      SHUTDOWN  1/3.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * *                                                 * * * * *\n  * * * * *                S H U T D O W N                  * * * * *\n  * * * * *                                                 * * * * *\n  * * * * *     OPERATOR GRACEFULL SERVICES TERMINATION     * * * * *\n  * * * * *                                                 * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose : Program (started task) allowing a gracefull shutdown to be\n  --------- scheduled for a pre-determined time-of-day by operator.\n         The logged on TSO and/or active IMS users are sent messages\n         at intervals informing them of the time remaining to shutdown\n         one, some or all system services (i.e. - TSO, IMS, ... ).\n\n  Messages : The messages are read from the data-set indicated by\n  ---------- the DD-name SYSTMSG (must be fixed 80-byte records).\n         The format of the cards containing the desired messages\n         must be as follows :\n         col.  1   = must be a blank,\n         col. 2-66 = the message text (quotes need not be doubled).\n         The remaining columns are lost (unused).\n         A card containing '-end' in columns 1-4 causes a message\n         line of hyphens.\n         The messages are sended in the same order they are read.\n\n  Optionally, special cards may be used :\n  ---------------------------------------\n      1. to request that, once the shutdown messages has been sent\n         and the time limit is expired, a command is issued (this\n         allows the shutdown processing to start automatically).\n         Command card format :\n         col. 1-5  = must be '-com ' keyword,\n         col. 6-72 = the operator command text.\n         Only one command card is accepted, it may be placed anywhere\n         (all successives encountered are ignored).\n      2. to indicate where the shutdown messages must be sent (users\n         destinations).\n         Command card format :\n         col. 1-4  = must be '-to ' keyword,\n         col. 5-72 = the destination keywords TSO and/or IMS.\n         If a destination card is not supplied, the shutdown messages,\n         by default, are sent to the logged on TSO users only. So a\n         '-TO IMS' destination card means to IMS active users only.\n\n  Note : The input is compatible with that of the NOTICE TSO command\n  ------ because the cards are skipped when :\n         1. any character other than a blank or minus is found in\n            column 1,\n         2. the character minus is found in column 1 but\n            A. the contents of columns 2-4 is not 'end', or\n            B. the contents of columns 2-5 is not 'com ', or\n            C. the contents of columns 2-4 is not 'to '.\n         All the cards can be lower/UPPER cases.\n1   05/07/88\n                                                      SHUTDOWN  2/3.\n\n  PARM field description : PARM='AT=HH.MM'  (the Time-of-Day : TOD)\n  ------------------------  or\n                           PARM='IN=MM'     (an elapsed time from the\n                                             current Time-of-Day)\n           where : HH.MM or H.MM is the desired shutdown Time-of-Day\n                   (format is : Hours.Minutes). By default (omitted),\n                   it is assumed 20 minutes elapsed time from the\n                   current Time-of-Day.\n              or : MM is the desired elapsed time (in Minutes, minimum\n                   is 2 and maximum 60) from the current Time-of-Day.\n         Note - AT= and IN= keywords are mutually exclusives, but\n                PARM='AT=,IN=MM' or PARM='AT=HH.MM,IN=' is accepted.\n                Keywords must be always separated by a comma.\n         When the difference between the current TOD and the desired\n         shutdown TOD is more than 30 minutes, the START command is\n         re-scheduled to JES2 as below\n                   $TA,T=HH.MM,'$VS,''S SHUTDOWN,...'' '\n         with HH.MM set as wake-up time on about 30 minutes before the\n         desired shutdown TOD.\n\n  Time intervals : The interval time to send warning messages is\n  ---------------- determined automatically by the program using\n                   the remaining shutdown time as follows :\n                   - each 5 minutes for a remaining time from 30 to\n                     10 minutes.\n                   - each 1 minute for a remaining time from 10 to 5\n                     minutes.\n                   - each 30 seconds for a remaining time of 5 or less\n                     minutes.\n\n  Additional facilities :\n  -----------------------\n         1. When started task running, the shutdown process may be\n            stoped or changed at any time through the STOP (P \"name\")\n            or MODIFY (F \"name\",...) operator commands, where :\n               \"name\" is the started task job-name, and\n               ... is the desired new PARM field value.\n            I.E. - Assuming the started task job-name is SHUTDOWN :\n                   Modify : F SHUTDOWN,AT=17.00\n                   Stop : P SHUTDOWN\n            Note - A MODIFY with no text is like a null PARM field\n                   value, and thus allows another 20 minutes.\n         2. The program enter a simulation test mode when not started\n            task executing (it use the DD-name SYSLMSG as output).\n            This allows operator to check a shutdown process.\n1   19/02/87\n                                                      SHUTDOWN  3/3.\n\n  Invoked by : 1. Console START command :\n  ------------      S SHUTDOWN,AT='HH.MM', or IN=MM,\n                               FROM='...PO-dsname...',\n                               M=...member-name...\n                  where SHUTDOWN procedure skeleton may be :\n                    //SHUTDOWN PROC AT=,IN=,M=,FROM='...PO-dsname...'\n                    //SHUTDOWN EXEC PGM=SHUTDOWN,PARM='AT=&AT,IN=&IN'\n                    //SYSTMSG    DD DSN=&FROM(&M),DISP=SHR\n\n               2. JCL background test mode (authorized job) :\n                    //...    EXEC PGM=SHUTDOWN,PARM='...'\n                    //SYSTMSG  DD DSN=...PO-dsname(member)...,DISP=SHR\n                    //SYSLMSG  DD SYSOUT=A\n\n               3. TSO foreground test mode (authorized user) :\n                    ALLOC DA(...PO-dsname(member)...) F(SYSTMSG) SHR\n                    ALLOC DA(*) F(SYSLMSG)\n                    CALL '...library...(SHUTDOWN)' 'AT=HH.MM'\n                                              or : 'IN=MM'\n                    FREE F(SYSTMSG)\n                    FREE F(SYSLMSG)\n                  Note : can be a CLIST if desired.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHUTDOWN": {"ttr": 23051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\t\\x16\\x04\\x0b\\x04\\x0b\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T09:16:00", "lines": 1035, "newlines": 1035, "modlines": 0, "user": "SYSPAJA"}, "text": "SHUT     TITLE 'SHUTDOWN - OPERATOR GRACEFULL SERVICES TERMINATION.'\nSHUTDOWN START 0\n         SPACE 1\n* PURPOSE : PROGRAM (STARTED TASK) ALLOWING A GRACEFULL SHUTDOWN TO BE\n* --------- SCHEDULED FOR A PRE-DETERMINED TIME-OF-DAY BY OPERATOR.\n*        THE LOGGED ON TSO AND/OR ACTIVE IMS USERS ARE SENT MESSAGES\n*        AT INTERVALS INFORMING THEM OF THE TIME REMAINING TO SHUTDOWN\n*        ONE, SOME OR ALL SYSTEM SERVICES (I.E. - TSO, IMS, ... ).\n*\n* AUTHOR :     MOINIL P.A. - COMPUTING CENTRE\n* --------     J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n*\n* MESSAGES : THE MESSAGES ARE READ FROM THE DATA-SET INDICATED BY\n* ---------- THE DD-NAME 'SYSTMSG' (MUST BE FIXED 80-BYTE RECORDS).\n*        THE FORMAT OF THE CARDS CONTAINING THE DESIRED MESSAGES\n*        MUST BE AS FOLLOWS :\n*        COL.  1   = MUST BE A BLANK\n*        COL. 2-66 = THE MESSAGE TEXT (QUOTES NEED NOT BE DOUBLED)\n*        THE REMAINING COLUMNS ARE LOST (UNUSED).\n*        A CARD CONTAINING '-END' IN COLUMNS 1-4 CAUSES A MESSAGE\n*        LINE OF HYPHENS.\n*        THE MESSAGES ARE SENDED IN THE SAME ORDER THEY ARE READ.\n*\n* OPTIONALLY, SPECIAL CARDS MAY BE USED :\n* ---------------------------------------\n*     1. TO REQUEST THAT, ONCE THE SHUTDOWN MESSAGES HAS BEEN SENT\n*        AND THE TIME LIMIT IS EXPIRED, A COMMAND IS ISSUED (THIS\n*        ALLOWS THE SHUTDOWN PROCESSING TO START AUTOMATICALLY).\n*        COMMAND CARD FORMAT :\n*        COL. 1-5  = MUST BE '-COM ' KEYWORD.\n*        COL. 6-72 = THE OPERATOR COMMAND TEXT.\n*        ONLY ONE COMMAND CARD IS ACCEPTED, IT MAY BE PLACED ANYWHERE\n*        (ALL SUCCESSIVES ENCOUNTERED ARE IGNORED).\n*     2. TO INDICATE WHERE THE SHUTDOWN MESSAGES MUST BE SENT (USERS\n*        DESTINATIONS).\n*        COMMAND CARD FORMAT :\n*        COL. 1-4  = MUST BE '-TO ' KEYWORD.\n*        COL. 5-72 = THE DESTINATION KEYWORDS 'TSO' AND/OR 'IMS'.\n*        IF A DESTINATION CARD IS NOT SUPPLIED, THE SHUTDOWN MESSAGES,\n*        BY DEFAULT, ARE SENT TO THE LOGGED ON TSO USERS ONLY. SO A\n*        '-TO IMS' DESTINATION CARD MEANS TO IMS ACTIVE USERS ONLY.\n*\n* NOTE : THE INPUT IS COMPATIBLE WITH THAT OF THE 'NOTICE' TSO COMMAND\n* ------ BECAUSE THE CARDS ARE SKIPPED WHEN :\n*        1. ANY CHARACTER OTHER THAN A BLANK OR MINUS IS FOUND IN\n*           COLUMN 1,\n*        2. THE CHARACTER MINUS IS FOUND IN COLUMN 1 BUT\n*           A. THE CONTENTS OF COLUMNS 2-4 IS NOT 'END', OR\n*           B. THE CONTENTS OF COLUMNS 2-5 IS NOT 'COM ', OR\n*           C. THE CONTENTS OF COLUMNS 2-4 IS NOT 'TO '.\n*        ALL THE CARDS CAN BE LOWER/UPPER CASES.\n         EJECT\n* PARM FIELD DESCRIPTION : PARM='AT=HH.MM'  (THE TIME-OF-DAY : TOD)\n* ------------------------  OR\n*                          PARM='IN=MM'     (AN ELAPSED TIME FROM THE\n*                                            CURRENT TIME-OF-DAY)\n*          WHERE : HH.MM OR H.MM IS THE DESIRED SHUTDOWN TIME-OF-DAY\n*                  (FORMAT IS : HOURS.MINUTES). BY DEFAULT (OMITTED),\n*                  IT IS ASSUMED 20 MINUTES ELAPSED TIME FROM THE\n*                  CURRENT TIME-OF-DAY.\n*             OR : MM IS THE DESIRED ELAPSED TIME (IN MINUTES, MINIMUM\n*                  IS 2 AND MAXIMUM 60) FROM THE CURRENT TIME-OF-DAY.\n*        NOTE - 'AT=' AND 'IN=' KEYWORDS ARE MUTUALLY EXCLUSIVES, BUT\n*               PARM='AT=,IN=MM' OR PARM='AT=HH.MM,IN=' IS ACCEPTED.\n*               KEYWORDS MUST BE ALWAYS SEPARATED BY A COMMA.\n*        WHEN THE DIFFERENCE BETWEEN THE CURRENT TOD AND THE DESIRED\n*        SHUTDOWN TOD IS MORE THAN 30 MINUTES, THE START COMMAND IS\n*        RE-SCHEDULED TO JES2 AS BELOW\n*                  $TA,T=HH.MM,'$VS,''S SHUTDOWN,...'' '\n*        WITH HH.MM SET AS WAKE-UP TIME ON ABOUT 30 MINUTES BEFORE THE\n*        DESIRED SHUTDOWN TOD.\n*\n* TIME INTERVALS : THE INTERVAL TIME TO SEND WARNING MESSAGES IS\n* ---------------- DETERMINED AUTOMATICALLY BY THE PROGRAM USING\n*                  THE REMAINING SHUTDOWN TIME AS FOLLOWS :\n*                  - EACH 5 MINUTES FOR A REMAINING TIME FROM 30 TO\n*                    10 MINUTES.\n*                  - EACH 1 MINUTE FOR A REMAINING TIME FROM 10 TO 5\n*                    MINUTES.\n*                  - EACH 30 SECONDS FOR A REMAINING TIME OF 5 OR LESS\n*                    MINUTES.\n*\n* ADDITIONAL FACILITIES :\n* -----------------------\n*        1. WHEN STARTED TASK RUNNING, THE SHUTDOWN PROCESS MAY BE\n*           STOPED OR CHANGED AT ANY TIME THROUGH THE STOP (P -NAME-)\n*           OR MODIFY (F -NAME-,...) OPERATOR COMMANDS, WHERE :\n*              -NAME- IS THE STARTED TASK JOB-NAME, AND\n*              ... IS THE DESIRED NEW PARM FIELD VALUE.\n*           I.E. - ASSUMING THE STARTED TASK JOB-NAME IS 'SHUTDOWN' :\n*                  MODIFY : F SHUTDOWN,AT=17.00\n*                  STOP : P SHUTDOWN\n*           NOTE - A MODIFY WITH NO TEXT IS LIKE A NULL PARM FIELD\n*                  VALUE, AND THUS ALLOWS ANOTHER 20 MINUTES.\n*        2. THE PROGRAM ENTER A SIMULATION TEST MODE WHEN NOT STARTED\n*           TASK EXECUTING (IT USE THE DD-NAME 'SYSLMSG' AS OUTPUT).\n*           THIS ALLOWS OPERATOR TO CHECK A SHUTDOWN PROCESS.\n         EJECT\n        $DEFREG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        AUTHORITY LEVELS DEFINITIONS.                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nLVL10    EQU   10        OPERATORS LEVEL\nLVL15    EQU   15        SYSTEM LEVEL\n         SPACE 1\nNOTICE  $MDL@IX ,\n         SPACE 2\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nMXNO     EQU   50                  MAXIMUM NUMBER OF MESSAGES\nMSLEN    EQU   110                 MESSAGE TEXT LENTGH\nMSW      EQU   MSLEN+1             MESSAGE AREA LENTGH\nMSTOT    EQU   MXNO*MSW            TOTAL MESSAGES AREA LENGTH\nMLEN     EQU   ((MSTOT+7)/8)*8     GETMAIN AREA LENGTH\n         EJECT\n*--------------------------------------------------------------------*\n*        INITIALIZATION.                                             *\n*--------------------------------------------------------------------*\n         SPACE 1\n        $XENT  BASE=(R11,R12)\n         LA    R10,MAXERR\n         L     R2,0(R1)            GET PARM FIELD\n         LH    R3,0(R2)\n         LTR   R3,R3\n         BNP   *+L'*+18\n         STH   R3,PRMLG\n         BCT   R3,*+L'*+6\n         MVC   PRMFLD(*-*),2(R2)   << EXECUTED >>\n         EX    R3,*-6\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROL STARTED TASK AND CALLER AUTHORITY.                  *\n*--------------------------------------------------------------------*\n         SPACE 1\n        EXTRACT ANSWER,'S',FIELDS=(TIOT,COMM)\n         L     R3,ANSWER+4         COMMUNICATION AREA ADDRESS\n         L     R4,4(R3)            CIB ADDRESS\n         LA    R4,0(R4)\n         LTR   R4,R4               CURRENT CIB SET UP ?\n         BZ    TESTRUN             NO\n         USING CIBDSECT,R4\n         CLI   CIBVERB,CIBSTART    START COMMAND (SYSTEM TASK) ?\n         BNE   TESTRUN             NO\n         DROP  R4\n         OI    SWITCH,SYSTASK      YES, SAY IT\nTESTRUN $EACM  REQAUT\n         CLI   AUTH,LVL10          OPERATOR LEVEL ?\n         BL    ERR1                NO\n         EJECT\n*--------------------------------------------------------------------*\n*        SCAN AND CONTROL PARM. FIELD TEXT.                          *\n*        SPECIAL SYSTEM TEST PURPOSES (AUTHORIZED USER ONLY) :       *\n*           1. PARM=T FOR BATCH EXECUTION TO SIMULATE MESSAGES BUT   *\n*              TEST THE TIMING AND MODIFY PROCESSES.                 *\n*           2. PARM=S FOR BATCH EXECUTION TO TEST JUST ONCE THE      *\n*              MESSAGES SENDER.                                      *\n*         N.B. OPTION T AND S ARE MUTUALLY EXCLUSIVES.               *\n*--------------------------------------------------------------------*\n         SPACE 1\nPA00    TIME   BIN                 GET CURRENT TOD\n         LR    R1,R0               R0 = TOD IN 0.01 SECONDS\n         XR    R0,R0\n         D     R0,=A(60*100)       TRANSFORM TOD IN MINUTES\n         LR    R0,R1\n         A     R0,=F'20'           COMPUTE DEFAULT SHUTDOWN TOD\n         STM   R0,R1,TODREQ\n         OC    PRMLG,PRMLG         PARM LENGTH ?\n         BZ    CTLSP               IF NO PARM, USE DEFAULT\n         LH    R3,PRMLG            PARM. FIELD TEXT LENGTH\n         LA    R2,PRMFLD           START OF PARM. FIELD TEXT\nPA01     CLI   0(R2),C','          SEPARATOR ?\n         BNE   PA04                NO\nPA02     LA    R2,1(R2)            YES\n         BCT   R3,PA01             LOOP IF MORE\n         B     CTLTOD\nPA03     CLI   0(R2),C','          SEPARATOR ?\n         BE    PA02                YES\n         B     PAERR               NO, ERROR\nPA04     TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BO    PA07                YES\n         CLI   AUTH,LVL15          SYSTEM (HIGHEST) AUTHORITY ?\n         BL    PA07                NO\n         CLI   0(R2),C'T'          TEST OPTION REQUESTED ?\n         BNE   PA05                NO\n         TM    SWPRCS,MSTEST       SEND OPTION REQUESTED PREVIOUSLY ?\n         BO    PAERR               YES\n         OI    SWPRCS,OPTEST\n         B     PA06\nPA05     CLI   0(R2),C'S'          SEND OPTION REQUESTED ?\n         BNE   PA07                NO\n         TM    SWPRCS,OPTEST       TEST OPTION REQUESTED PREVIOUSLY ?\n         BO    PAERR               YES\n         OI    SWPRCS,MSTEST\nPA06     LA    R2,1(R2)\n         BCT   R3,PA03\n         B     CTLTOD\nPA07     CH    R3,=H'3'            MAY BE AT=... OR IN=... CODED ?\n         BL    PAERR               NO\n         CLC   0(3,R2),=CL3'IN='   IN=... CODED ?\n         BE    PA20                YES\n         CLC   0(3,R2),=CL3'AT='   AT=... CODED ?\n         BNE   PAERR               NO\n         LA    R2,3(R2)            YES\n         SH    R3,=H'3'\n         BZ    CTLTOD              NONE, USE DEFAULT\n         CLI   0(R2),C','          AT=, CODED ?\n         BE    PA02                YES\n         TM    SWITCH,KEYWAT+KEYWIN     AT= OR IN= ALREADY HANDLED ?\n         BNZ   PAERR               YES\n         CH    R3,=H'4'            TOD H.MM OR HH.MM CODED ?\n         BL    PAERR               NO, ERROR\n         CLI   2(R2),C'.'          HH.MM CODED ?\n         BE    PA10                YES\n         CLI   1(R2),C'.'          H.MM CODED ?\n         BNE   PAERR               NO, SYNTAX ERROR\n         MVI   WORKD,C'0'\n         MVC   WORKD(1),0(R2)\n         LA    R2,2(R2)\n         SH    R3,=H'2'\n         B     PA11\nPA10     MVC   WORKD(2),0(R2)\n         LA    R2,3(R2)\n         SH    R3,=H'3'\nPA11     CH    R3,=H'2'            MM PRESENT ?\n         BL    PAERR               NO, ERROR\n         MVC   WORKD+2(2),0(R2)\n         XC    WORKF,WORKF\n         MVZ   WORKF(4),WORKD\n         CLC   WORKF(4),=CL4'0000'\n         BNE   PAERR               NOT NUMERIC, ERROR\n         MVC   WORKF(4),WORKD\n         NC    WORKD(4),=XL4'0F0F0F0F'\n         TR    WORKD(4),=XL16'00000000000000000000FFFFFFFFFFFF'\n         OC    WORKD(4),WORKD\n         BNZ   PAERR\n         PACK  WORKD,WORKF(2)      TOD HOURS\n         CVB   R0,WORKD\n         CH    R0,=H'23'\n         BH    PAERR               HOURS TOO BIG, ERROR\n         PACK  WORKD,WORKF+2(2)    TOD MINUTES\n         CVB   R1,WORKD\n         CH    R1,=H'59'\n         BH    PAERR               MINUTES TOO BIG, ERROR\n         MH    R0,=H'60'\n         AR    R0,R1\n         ST    R0,TODREQ           SHUTDOWN TOD\n         LA    R2,2(R2)\n         SH    R3,=H'2'\n         BZ    CTLTOD              NO MORE\n         OI    SWITCH,KEYWAT+KEYWIN     SAY PROCESSED\n         B     PA03\nPA20     LA    R2,3(R2)\n         SH    R3,=H'3'\n         BZ    CTLTOD              NONE, USE DEFAULT\n         CLI   0(R2),C','          IN=, CODED ?\n         BE    PA02                YES\n         TM    SWITCH,KEYWAT+KEYWIN     AT= OR IN= ALREADY HANDLED ?\n         BNZ   PAERR               YES\n         MVI   WORKD,C'0'\n         MVC   WORKD+1(1),0(R2)\n         LA    R2,1(R2)\n         BCT   R3,*+L'*+4\n         B     PA21\n         CLI   0(R2),C','          SEPARATOR ?\n         BE    PA21                YES\n         MVC   WORKD(1),WORKD+1\n         MVC   WORKD+1(1),0(R2)\n         LA    R2,1(R2)\n         BCTR  R3,0\nPA21     XC    WORKF,WORKF\n         MVZ   WORKF(2),WORKD\n         CLC   WORKF(2),=CL4'0000'\n         BNE   PAERR               NOT NUMERIC, ERROR\n         MVC   WORKF(2),WORKD\n         NC    WORKD(2),=XL4'0F0F0F0F'\n         TR    WORKD(2),=XL16'00000000000000000000FFFFFFFFFFFF'\n         OC    WORKD(2),WORKD\n         BNZ   PAERR\n         PACK  WORKD,WORKF(2)      INTERVAL TIME\n         CVB   R0,WORKD\n         LTR   R0,R0\n         BNP   PAERR\n         CH    R0,=H'60'\n         BH    PAERR               TOO BIG, ERROR\n         A     R0,TODREQ+4\n         ST    R0,TODREQ           SHUTDOWN TOD\n         LTR   R3,R3\n         BZ    CTLTOD              NO MORE\n         OI    SWITCH,KEYWAT+KEYWIN     SAY PROCESSED\n         B     PA03\nPAERR    TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BZ    PAERR0              NO\n         TM    SWITCH,PUSHPULL     YES, MODIFY SCAN ERROR ?\n         BZ    ERR2                NO\n         LA    R1,DIAG2            YES, SAY WHAT ABOUT MODIFY\n        WTO    MF=(E,(1))\n         LA    R1,MCONT            SAY USE OF DEFAULT\n        WTO    MF=(E,(1))\n         B     CTLTOD              CONTINUE WITH DEFAULT\nPAERR0   LA    R1,PRMFLD           DIAGNOSE (R2 = POINTER)\n         LH    R3,PRMLG\n         SR    R2,R1\nPAERR1   CH    R2,=H'10'\n         BNH   PAERR2\n         AH    R1,=H'5'\n         SH    R2,=H'5'\n         SH    R3,=H'5'\n         B     PAERR1\nPAERR2   CH    R3,=H'10'\n         BNH   *+L'*+4\n         LH    R3,=H'10'\n         MVC   LNEMS(26),=CL26'PARM. FIELD AREA POINTER :'\n         BCT   R3,*+L'*+6\n         MVC   LNEMS+27(*-*),0(R1) << EXECUTED >>\n         EX    R3,*-6\n        $PRINT LNE,,DDOUT\n         LTR   R15,R15\n         BNZ   TSEOF\n         MVC   LNEMS(L'LNEMS),LNEMS-1\n         LA    R2,LNEMS+27(R2)\n         MVI   0(R2),C'$'\n        $PRINT LNE,,DDOUT\n         LTR   R15,R15\n         BNZ   TSEOF\n         TM    SWPRCS,OPTEST       SPECIAL TEST OPTION ?\n         BZ    ERR2                NO\n         TM    SWITCH,PUSHPULL     YES, MODIFY SCAN ERROR ?\n         BZ    ERR2                NO\n         LA    R2,DIAG2            SAY WHAT ABOUT MODIFY\n         BAS   R8,TSCNL\n         LA    R2,MCONT            SAY USE OF DEFAULT\n         BAS   R8,TSCNL\n         EJECT\n*--------------------------------------------------------------------*\n*        LOOK IF SHUTDOWN MAY BE STARTED.                            *\n*--------------------------------------------------------------------*\n         SPACE 1\nCTLTOD   TM    SWPRCS,MSTEST       SEND OPTION REQUESTED ?\n         BO    BEGIN               YES\n         LM    R0,R1,TODREQ        REQUESTED TOD / CURRENT TOD\n         CLR   R0,R1\n         BNL   *+L'*+4\n         A     R0,=A(24*60)        ADD 24 HOURS\n         SR    R0,R1\n         CL    R0,=F'35'\n         BH    RESCHDL             TOD IS OVER HALF-HOUR + 5 MINUTES\n         MVC   TODWRK(8),TODREQ    SET WORKING TOD\n         CL    R0,=F'2'            MINIMUM 2 MINUTES ?\n         BNL   CTLOK               YES\n         L     R1,TODWRK+4         NO, ADJUST TOD TO SET 2 MINUTES\n         L     R0,=F'2'\n         AR    R1,R0\n         ST    R1,TODWRK\nCTLOK    ST    R0,RTIME\nCTLSP    TM    SWITCH,SYSTASK      SYSTEM TASK ?\n         BO    *+L'*+8             YES\n         TM    SWPRCS,OPTEST       NO, TEST ?\n         BZ    BEGIN               NO\n         TM    SWITCH,PUSHPULL     PARM VALUES MODIFIED ?\n         BZ    BEGIN               NO\n         NI    SWITCH,255-PUSHPULL\n         B     NXTWK\n         EJECT\n*--------------------------------------------------------------------*\n*        RE-SCHEDULE SHUTDOWN FOR LATER.                             *\n*--------------------------------------------------------------------*\n         SPACE 1\nRESCHDL  TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BZ    SMRSC               NO\n         L     R3,ANSWER+4         COMMUNICATION AREA ADDRESS\n         L     R4,4(R3)            CIB ADDRESS\n         LA    R4,0(R4)\n         USING CIBDSECT,R4\n         LH    R1,CIBDATLN         GET DATA FIELD LENGTH\n         LTR   R1,R1\n         BNP   ERR3                NONE, UNABLE TO REQUEUE START CMD\n         LA    R5,CIBDATA          SET DATA FIELD ADDRESS\n         DROP  R4\n         LA    R6,RSCIBTX          SET TARGET FIELD ADDRESS\n         LA    R0,L'RSCIBTX        HIGH WATER MARK\nMTSTC    MVC   0(1,R6),0(R5)       MOVE START COMMAND\n         LA    R5,1(R5)\n         CLI   0(R6),C''''\n         BNE   NOTQU\n         BCT   R0,*+L'*+4\n         B     ERR3                LONG, UNABLE TO REQUEUE START CMD\n         LA    R6,1(R6)\n         MVI   0(R6),C''''\nNOTQU    LA    R6,1(R6)\n         BCT   R1,*+L'*+4\n         B     ENDMV\n         BCT   R0,MTSTC\n         B     ERR3                LONG, UNABLE TO REQUEUE START CMD\nENDMV    MVC   0(4,R6),=CL4''''' '''\n         LA    R1,RSCIBTX          COMPUTE\n         SLR   R6,R1                 COMMAND\n         LA    R6,RSCIBL(R6)           LENGTH\n         B     RSCHD\nSMRSC    MVC   RSCIBTX(32),=CL32'S SHUTDOWN,... WILL BE GENERATED'\n         LA    R6,RSCIBL+28        MSG LENGTH\nRSCHD    STH   R6,RSCIB            STORE CMD LENGTH\n         L     R1,TODREQ           TOD REQUESTED\n         CL    R1,=F'30'\n         BNL   *+L'*+4\n         A     R1,=A(24*60)        ADD 24 HOURS\n         S     R1,=F'30'           TOD FOR WAKE-UP\n         LA    R2,RSCIBHM          EDIT TIME\n         BAS   R8,EDITTM\n         LA    R2,RSCIB            COMMAND ADDRESS\n         BAS   R8,CONSL            SEND IT\n         B     LEAVE\n         EJECT\n*--------------------------------------------------------------------*\n*        PREPARE MESSAGES FROM INPUT.                                *\n*--------------------------------------------------------------------*\n         SPACE 1\nBEGIN   GETMAIN R,LV=MLEN          GET MESSAGES WORK AREA\n         ST    R1,BOTTOM\n         LR    R6,R1\n         AL    R1,=A(MSTOT)\n         ST    R1,TOP\n         OI    SWITCH,INOPED       SAY INPUT OPENED\nREADCD  $READ  CARD,DDIN           READ A CARD IMAGE\n         LTR   R15,R15\n         BM    EOF\n         BNZ   ERR4                ERROR\n         CLI   CARD,C' '           MESSAGE TEXT CARD ?\n         BE    MSGCD               YES\n         OC    CARD,=CL80' '       UPPER CASE\n         CLC   CARD(4),=CL4'-END'  HYPHENS REQUEST ?\n         BE    HYPCD               YES\n         CLC   CARD(4),=CL4'-TO '  DESTINATIONS REQUEST ?\n         BE    DESCD               YES\n         TM    SWITCH,COMTXT       COMMAND ALREADY HANDLED ?\n         BO    READCD              YES, BYPASS CARD\n         CLC   CARD(5),=CL5'-COM ' POSSIBLE COMMAND TEXT ?\n         BNE   READCD              NO, BYPASS CARD\n         CLC   CARD+5(67),=CL80' ' COMMAND TEXT ?\n         BNE   CMDCD               YES\n         B     READCD              BYPASS CARD\n         SPACE 1\nMSGCD    LM    R3,R5,MSGSC\n         CLI   0(R5),C' '          SEARCH END OF TEXT\n         BNE   *+L'*+12\n         BCTR  R5,0\n         CLR   R5,R3\n         BNL   *-12\n         B     READCD              NO TEXT, SKIP\n         CL    R6,TOP              HIGH WATER MARK ?\n         BNL   ERR5                YES, ERROR\n         LA    R1,MSLEN            BUILD MESSAGE TEXT\n         LA    R2,1(R6)\n         LA    R15,65\nMSGCD1   BCT   R1,*+L'*+4\n         B     ERR8\n         MVC   0(1,R2),0(R3)       MOVE TEXT\n         BCTR  R15,0\n         LA    R2,1(R2)\n         CLI   0(R3),C''''\n         BNE   MSGCD2\n         BCT   R1,*+L'*+4\n         B     ERR8\n         MVI   0(R2),C''''         DOUBLE QUOTE\n         LA    R2,1(R2)\nMSGCD2   BXLE  R3,R4,MSGCD1\n         LTR   R1,R15\n         BNP   MSGCD3+L'MSGCD3\n         MVI   0(R2),C' '\n         BCT   R1,*+L'*+10\n         B     MSGCD3\n         MVC   1(*-*,R2),0(R2)     << EXECUTED >>\n         BCTR  R1,0\n         EX    R1,*-8\nMSGCD3   AR    R2,R15\n         SH    R2,=H'2'            POINTS JUST BEYOND LAST CHARACTER,\n         SLR   R2,R6               SO COMPUTE EXECUTE LENGTH OF\n         STC   R2,0(R6)            MESSAGE, AND SET IT IN AREA\n         LA    R6,MSW(R6)          NEXT MESSAGE AREA\n         B     READCD\n         SPACE 1\nHYPCD    CL    R6,TOP              HIGH WATER MARK ?\n         BNL   ERR5                YES, ERROR\n         MVI   0(R6),64            BUILD SEND HYPHENS\n         MVI   1(R6),C'-'\n         MVC   2(64,R6),1(R6)\n         LA    R6,MSW(R6)          NEXT MESSAGE AREA\n         B     READCD\n         SPACE 1\nDESCD    LM    R3,R5,CMDSC\n         BCTR  R3,0\nDESCD1   CLI   0(R3),C' '          SEARCH DESTINATIONS\n         BNE   *+L'*+8\nDESCD2   BXLE  R3,R4,*-8\n         B     READCD\n         LA    R1,2\n         XR    R2,R2\n         CLC   0(3,R3),=CL3'TSO'\n         BNE   *+L'*+8\n         LA    R2,SDTSO\n         B     DESCD3\n         CLC   0(3,R3),=CL3'IMS'\n         BNE   DESCD4\n         LA    R2,SDIMS\nDESCD3   ALR   R3,R1\n         BXLE  R3,R4,*+L'*+6\n         LNR   R1,R1\n         B     DESCD5\n         CLI   0(R3),C' '\n         BE    DESCD5\nDESCD4   BXLE  R3,R4,*+L'*+4\n         B     READCD\n         CLI   0(R3),C' '\n         BNE   DESCD4\n         B     DESCD2\nDESCD5   OI    SWITCH,DESTRQ\n         EX    R2,*+L'*+10\n         LTR   R1,R1\n         BNM   DESCD2\n         B     READCD\n         OI    DESTFL,*-*          << EXECUTED >>\n         SPACE 1\nCMDCD    LM    R3,R5,CMDSC\n         CLI   0(R5),C' '          SEARCH END OF COMMAND\n         BNE   *+L'*+12\n         BCTR  R5,0\n         CLR   R5,R3\n         BNL   *-12\n         B     READCD              NO TEXT, SKIP\n         CLI   0(R3),C' '          SEARCH START OF COMMAND\n         BNE   *+L'*+4\n         BXLE  R3,R4,*-8\n         SLR   R5,R3               LENGTH\n         EX    R5,MVCMD            BUILD COMMAND BUFFER\n         LA    R5,5(R5)\n         STH   R5,SHCIB\n         OI    SWITCH,COMTXT       SAY COMMAND PROCESSED\n         B     READCD\nMVCMD    MVC   SHCIBT(*-*),0(R3)   << EXECUTED >>\n         SPACE 1\nEOF      ST    R6,TOP              SET HIGH LIMIT\n        $RCLOSE\n         NI    SWITCH,255-INOPED   SAY INPUT NOW CLOSED\n         TM    SWITCH,SYSTASK      SYSTEM TASK ?\n         BO    *+L'*+8             YES\n         TM    SWPRCS,OPTEST       NO, BUT TEST ?\n         BZ    NXTWK               NO\n         EJECT\n*--------------------------------------------------------------------*\n*        ESTABLISH OPERATOR COMMUNICATIONS.                          *\n*--------------------------------------------------------------------*\n         SPACE 1\n         L     R1,ANSWER           TIOT ADDRESS\n         USING TIODSECT,R1\n         MVC   OPMSPN(L'OPMSPN),TIOCNJOB     SET STARTED TASK NAME\n         MVC   OPMSSN(L'OPMSSN),TIOCNJOB\n         DROP  R1\n         LA    R1,OPMSSN+L'OPMSSN-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+4\n         BCT   R1,*-8\n         MVC   0(11,R1),=CL11',AT= OR IN='\n        $SETOPC OPMS               ESTABLISH OP.COM.\n         LTR   R15,R15             SUCCESSFULL ?\n         BNZ   ERR6                NO, ERROR\n         STM   R0,R1,MSGLL         SAVE LENGTH AND MSG-ID'S LIST\n         EJECT\n*--------------------------------------------------------------------*\n*        SEND WARNING MESSAGES AT PRE-DEFINED INTERVALS.             *\n*--------------------------------------------------------------------*\n         SPACE 1\nNXTWK    TM    SWPRCS,MSTEST       SEND OPTION REQUESTED ?\n         BO    TSOTST              YES\n        TIME   BIN                 GET CURRENT TOD\n         LR    R1,R0               R0 = TOD IN 0.01 SECONDS\n         XR    R0,R0\n         D     R0,=A(60*100)       TRANSFORM TOD IN MINUTES\nTSTWK    ST    R1,TODWRK+4         SET CURRENT TOD\n         L     R0,TODWRK           REQUESTED TOD\n         CLR   R0,R1\n         BNL   *+L'*+4\n         A     R0,=A(24*60)        ADD 24 HOURS\n         SR    R0,R1               REMAINING TIME\n         CL    R0,RTIME\n         BH    QUIT                REQ. TIME EXHAUSTED\n         LA    R2,TABT\n         CL    R0,0(R2)\n         BNH   *+L'*+8\n         LA    R2,TABTL(R2)\n         B     *-12\n         L     R1,4(R2)\n         LTR   R1,R1\n         BNZ   CINTVL\n         LR    R1,R0\n         XR    R0,R0\n         S     R1,=F'30'\n         M     R0,=A(60*100)       TRANSFORM IN 100THS OF SEC.\n         ST    R1,TMINTVL\n         B     GOWAIT              GO WAIT UNTIL HALF-HOUR\nCINTVL   ICM   R3,B'1111',8(R2)\n         BZ    APPLY\n         SR    R0,R3\n         MH    R0,=H'60'           TRANSFORM MIN. TO SEC.\n         CLR   R0,R1\n         BNL   APPLY\n         LR    R1,R0               USE THIS ONE TO ADJUST\nAPPLY    XR    R0,R0\n         M     R0,=F'100'          TRANSFORM IN 100THS OF SEC.\n         ST    R1,TMINTVL\n         XR    R0,R0\n         L     R1,TODWRK\n         LA    R2,SHATHM           EDIT SHUTDOWN TIME\n         BAS   R8,EDITTM\n         L     R1,TODWRK+4\n         LA    R2,SHTMHM           EDIT CURRENT TIME\n         BAS   R8,EDITTM\n         MVC   SHEXIT(L'SHEXIT),SHEXIT-1\n         LM    R0,R1,TODWRK\n         SR    R0,R1\n         S     R0,=F'2'\n         BP    *+L'*+6\n         MVC   SHEXIT(13),=CL13'* EMERGENCY *'\nTSOTST   TM    SWITCH,DESTRQ\n         BZ    *+L'*+8\n         TM    DESTFL,SDTSO\n         BZ    IMSTST\n         MVC   MGCRTXT(8),=CL8'SEND ''= '\n         L     R5,BOTTOM\nTSONXT   CL    R5,TOP\n         BNL   TSOFNL\n         XR    R1,R1\n         IC    R1,0(R5)\n         EX    R1,TSOMV\n         LA    R1,MGCRTXT+9(R1)\n         MVC   0(4,R1),=CL4' ='' '\n         LA    R1,4(R1)\n         LA    R2,MGCRBUF\n         SLR   R1,R2\n         STH   R1,MGCRBUF\n         BAS   R8,CONSL            SEND TSO WARNING MESSAGES\n         LA    R5,MSW(R5)          NEXT MESSAGE AREA\n         B     TSONXT\nTSOMV    MVC   MGCRTXT+8(*-*),1(R5)     << EXECUTED >>\nTSOFNL   TM    SWPRCS,MSTEST       SEND OPTION REQUESTED ?\n         BO    *+L'*+12            YES\n         MVI   SHXEOM,C' '\n         LA    R2,SHMSG\n         B     *+L'*+8\n         MVI   WRXEOM,C' '\n         LA    R2,WRMSG\n         MVC   4(5,R2),=CL5'SEND '\n         BAS   R8,CONSL            SEND TSO WARNING MESSAGE\nIMSTST   TM    SWITCH,DESTRQ\n         BZ    GOWAIT\n         TM    DESTFL,SDIMS\n         BZ    GOWAIT\n         LA    R9,1\n         LA    R14,IMSRDY          REPLY IDENTIFICATION\n         LA    R15,SIMSBM+2        REPLY-ID ADDRESS\n         LA    R4,MIMSSK           NOT FOUND MSG\n         BAS   R8,SRPIR            FILL REPLY-ID\n         B     *+L'*+12            +0 = OK\n         TM    DESTFL,SDTSO        +4 = NOT FOUND, ALSO TSO REQUESTED ?\n         BO    GOWAIT              YES\n         B     QUIT                NO\n         LA    R2,SIMSB\n         BAS   R8,CONSL            STARTING IMS BROADCAST\n         MVC   MGCRTXT(13),=CL13'R ??,''=      '\n         L     R5,BOTTOM\nIMSNXT   CL    R5,TOP\n         BNL   IMSFNL\n         TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BO    *+L'*+8             YES\n         TM    SWPRCS,MSTEST       SEND OPTION REQUESTED ?\n         BZ    IMSMS               NO\n         LA    R9,5\nIMSRW1   LA    R14,IMSCNT          REPLY IDENTIFICATION\n         LA    R15,MGCRTXT+2       REPLY-ID ADDRESS\n         LA    R4,MIMSAB           NOT FOUND MSG\n         BAS   R8,SRPIR            FILL REPLY-ID\n         B     IMSMS               +0 = OK\n         BAS   R8,WINTVLS          +4 = NOT FOUND\n         BCT   R9,IMSRW1           TRY ONCE MORE UNTIL COUNT EXHAUSTED\n         TM    DESTFL,SDTSO        ALSO TSO REQUESTED ?\n         BZ    QUIT                NO\n         NI    DESTFL,255-SDIMS    YES, DISABLE IMS\n         B     GOWAIT\nIMSMS    XR    R1,R1\n         IC    R1,0(R5)\n         EX    R1,IMSMV\n         LA    R1,MGCRTXT+14(R1)\n         MVC   0(9,R1),=CL9'      ='' '\n         LA    R1,9(R1)\n         LA    R2,MGCRBUF\n         SLR   R1,R2\n         STH   R1,MGCRBUF\n         BAS   R8,CONSL            SEND IMS WARNING MESSAGES\n         LA    R5,MSW(R5)          NEXT MESSAGE AREA\n         B     IMSNXT\nIMSMV    MVC   MGCRTXT+13(*-*),1(R5)    << EXECUTED >>\nIMSFNL   TM    SWPRCS,MSTEST       SEND OPTION REQUESTED ?\n         BO    *+L'*+12            YES\n         MVI   SHXEOM,C'.'\n         LA    R2,SHMSG\n         B     *+L'*+8\n         MVI   WRXEOM,C'.'\n         LA    R2,WRMSG\n         MVC   4(5,R2),=CL5'R ??,'\n         TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BO    *+L'*+8             YES\n         TM    SWPRCS,MSTEST       SEND OPTION REQUESTED ?\n         BZ    IMSMSE              NO\n         LA    R9,5\nIMSRW2   LA    R14,IMSCNT          REPLY IDENTIFICATION\n         LA    R15,6(R2)           REPLY-ID ADDRESS\n         LA    R4,MIMSAB           NOT FOUND MSG\n         BAS   R8,SRPIR            FILL REPLY-ID\n         B     IMSMSE              +0 = OK\n         BAS   R8,WINTVLS          +4 = NOT FOUND\n         BCT   R9,IMSRW2           TRY ONCE MORE UNTIL COUNT EXHAUSTED\n         TM    DESTFL,SDTSO        ALSO TSO REQUESTED ?\n         BZ    QUIT                NO\n         NI    DESTFL,255-SDIMS    YES, DISABLE IMS\n         B     GOWAIT\nIMSMSE   BAS   R8,CONSL            SEND IMS TIME MESSAGE\nGOWAIT   TM    SWPRCS,MSTEST       SEND OPTION REQUESTED ?\n         BO    QUIT                YES\n         TM    SWITCH,SYSTASK      NO, SYSTEM TASK ?\n         BO    *+L'*+8             YES\n         TM    SWPRCS,OPTEST       NO, TEST ?\n         BZ    TSSET               NO\n         LA    R3,TMINTVL\n         BAS   R8,WINTVL           WAIT UNTIL NEXT WAKE-UP\n         LA    R1,L'PRMFLD         PREPARE TO ANY MODIFY\n         STH   R1,PRMLG\n        $OPCOM ,PRMLG              LOOK TO OPERATOR\n         BCT   R15,TSSTOP\n         B     NXTWK               R15 = 1, CONTINUE\nTSSTOP   BCT   R15,TSMODF\n         XC    MSGLA,MSGLA         R15 = 2, STOP, MSG-ID'S LIST\n         B     LEAVE                 IS DELETED\nTSMODF   BCT   R15,ERR7            R15 = 4, ERROR\n         OI    SWITCH,PUSHPULL     R15 = 3, MODIFY, NEW AT= OR IN=\n         NI    SWITCH,255-KEYWAT-KEYWIN               IS SPECIFIED\n         B     PA00\nTSSET    L     R1,STIME            SIMULATE ELAPSED TIME\n         A     R1,TMINTVL\n         CL    R1,=A(60*100)\n         BL    NOUPDT\n         XR    R0,R0\n         ST    R0,STIME\n         D     R0,=A(60*100)       TRANSFORM IN MINUTES\n         A     R1,TODWRK+4         UPDATE CURRENT TOD\n         B     TSTWK\nNOUPDT   ST    R1,STIME\n         L     R1,TODWRK+4         GET CURRENT TOD\n         B     TSTWK+L'TSTWK\nQUIT     OC    SHCIB,SHCIB         ANY COMMAND TO BE SEND\n         BZ    LEAVE               NO\n         LA    R2,SHCIB            YES, COMMAND ADDRESS\n         BAS   R8,CONSL            SEND IT\n         EJECT\n*--------------------------------------------------------------------*\n*        PROCESS TERMINATED - EXIT.                                  *\n*--------------------------------------------------------------------*\n         SPACE 1\nLEAVE    XR    R10,R10             SET R.C. = 0\nRETURN   ICM   R1,B'1111',BOTTOM\n         BZ    TSPCL\n        FREEMAIN R,A=(1),LV=MLEN   FREE MESSAGES WORK AREA\nTSPCL    TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BO    FRDOM               YES\n        $PCLOSE\n         B     EXIT\nFRDOM    L     R1,MSGLA\n         LTR   R1,R1\n         BZ    EXIT\n        DOM    MSGLIST=(1)         DELETE MSG-ID'S LIST\n         LM    R0,R1,MSGLL\n        FREEMAIN R,LV=(0),A=(1)    FREE AREA\nEXIT    $XRET  CC=(R10)\n         EJECT\n*--------------------------------------------------------------------*\n*        EDIT TIME ROUTINE.                                          *\n*              R1  - TOD IN MINUTES.                                 *\n*              R2  - HOURS-MINUTES (HH.MM) TARGET FIELD ADDRESS.     *\n*              R8  - LINK REGISTER.                                  *\n*--------------------------------------------------------------------*\n         SPACE 1\nEDITTM   CL    R1,=F'60'\n         BL    *+L'*+10\n         XR    R0,R0\n         D     R0,=F'60'\n         B     *+L'*+4\n         LR    R0,R1\n         XR    R1,R1\n         CVD   R1,WORKD            EDIT HOURS\n         UNPK  WORKD(4),WORKD+6(2)\n         OI    WORKD+3,C'0'\n         MVC   0(2,R2),WORKD+2\n         CVD   R0,WORKD            EDIT MINUTES\n         UNPK  WORKD(4),WORKD+6(2)\n         OI    WORKD+3,C'0'\n         MVC   3(2,R2),WORKD+2\n         BR    R8                  RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        CALL SEARCH REPLY-ID PENDING ROUTINE.                       *\n*              R2  - ADDRESS OF MESSAGE IF NOT FOUND.                *\n*              R8  - LINK REGISTER. RETURN +0 = OK, +4 = NOT FOUND.  *\n*              R9  - TRY AGAIN COUNTER.                              *\n*              R14 - ADDRESS OF REPLY-ID NUMBER EDIT.                *\n*              R15 - ADDRESS OF REPLY MESSAGE IDENTIFICATION TEXT.   *\n*--------------------------------------------------------------------*\n         SPACE 1\nSRPIR   $SRPI  (R14),(R15)\n         LTR   R15,R15\n         BZR   R8\n         CH    R15,=H'4'\n         BNE   ERR9\n         LA    R8,4(R8)\n         TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BO    *+L'*+6             YES\n         LR    R2,R4               NO\n         B     TSCNL\n         CH    R9,=H'1'            LAST TIME ?\n         BNER  R8                  NO\n         LR    R1,R4               YES\n        WTO    MF=(E,(1))\n         BR    R8\n         EJECT\n*--------------------------------------------------------------------*\n*        CONSOLE SVC AND WAIT ROUTINE.                               *\n*              R2  - COMMAND ADDRESS.                                *\n*              R3  - WAIT TIME ADDRESS WHEN ENTERING AT \"WINTVL\".    *\n*              R8  - LINK REGISTER.                                  *\n*--------------------------------------------------------------------*\n         SPACE 1\nCONSL    TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BO    *+L'*+8             YES\n         TM    SWPRCS,MSTEST       NO, BUT SEND OPTION REQUESTED ?\n         BZ    TSCNL               NO\n        ZEROKEY\n         XR    R0,R0               CLEAR R0 FOR SVC-34\n        MGCR   (R2)\n        RESETKEY\nWINTVLS  LA    R3,WAITABIT         WAIT A LITTLE\nWINTVL  STIMER WAIT,BINTVL=(R3)\n         BR    R8                  RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        PRINT ROUTINE.                                              *\n*              R2  - MESSAGE ADDRESS.                                *\n*              R8  - LINK REGISTER.                                  *\n*--------------------------------------------------------------------*\n         SPACE 1\nTSCNL    MVC   LNEMS(L'LNEMS),LNEMS-1\n         XR    R1,R1\n         IC    R1,1(R2)\n         SH    R1,=H'5'\n         BNPR  R8\n         EX    R1,MVCTX\n        $PRINT LNE,,DDOUT          PRINT LINE TEXT\n         LTR   R15,R15\n         BNZ   TSEOF               BRANCH IF ERROR\n         BR    R8                  RETURN\nMVCTX    MVC   LNEMS(*-*),4(R2)    << EXECUTED >>\n         EJECT\n*--------------------------------------------------------------------*\n*        ERROR DETECTED - EXIT WITH MESSAGE.                         *\n*--------------------------------------------------------------------*\n         SPACE 1\nERR1     BCTR  R10,0               OPERATOR AUTHORITY REQUIRED\nERR2     BCTR  R10,0               SHUTDOWN TIME LIMIT ERROR\nERR3     BCTR  R10,0               UNABLE TO REQUEUE START CMD\nERR4     BCTR  R10,0               'SYSTMSG' READ ERROR\nERR5     BCTR  R10,0               MAXIMUM NUMBER OF MSGS OVERFLOW\nERR6     BCTR  R10,0               OP.COM. NOT ESTABLISHED\nERR7     BCTR  R10,0               OP.COM. FAILED\nERR8     BCTR  R10,0               TOO MUCH QUOTES IN MSG TEXT\nERR9     BCTR  R10,0               CALL SRCHRPI ERROR\n         SPACE 1\nMAXERR   EQU   ((*-ERR1)/2)+1\n         SPACE 1\n         LR    R2,R10              SEND APPROPRIATE MESSAGE\n         BCTR  R2,0\n         SLL   R2,2\n         L     R1,TABD(R2)\n         TM    SWITCH,SYSTASK      SYSTEM TASK RUNNING ?\n         BO    TSWTT               YES\n         LR    R2,R1\n         BAS   R8,TSCNL            PRINT ERROR MESSAGE\n         B     TSEOF\nTSWTT   WTO    MF=(E,(1))\nTSEOF    TM    SWITCH,INOPED       INPUT ALREADY CLOSED ?\n         BZ    SETRC               YES\n        $RCLOSE ,\nSETRC    LA    R10,16              SET R.C. = 16\n         B     RETURN              EXIT\n         EJECT\n*--------------------------------------------------------------------*\n*        CONSTANTS AND WORK-AREAS.                                   *\n*--------------------------------------------------------------------*\n         SPACE 1\nWORKD    DC    D'0'\nWORKF    DC    F'0'\nANSWER   DC    A(*-*,*-*)          A.TIOT / A.COMM.\nMSGLL    DC    F'0'                LENGTH OF AREA AND\nMSGLA    DC    F'0'                  MSG-ID'S LIST\nTODREQ   DC    2F'0'               REQ. TOD / CURR. TOD\nTODWRK   DC    2F'0'               REQ. WORK TOD / CURR. WORK TOD\nRTIME    DC    F'0'\nSTIME    DC    F'0'\nBOTTOM   DC    A(*-*)\nTOP      DC    A(*-*)\nMSGSC    DC    A(CARD+1,1,CARD+65)\nCMDSC    DC    A(CARD+5,1,CARD+71)\nTMINTVL  DC    F'0'                WAIT TIME (100THS OF SEC.)\nWAITABIT DC    F'20'               WAIT A LITTLE (100THS OF SEC.)\nDDIN     DC    CL8'SYSTMSG '\nDDOUT    DC    CL8'SYSLMSG '\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTH)\nAUTH     DC    XL1'0'\n         SPACE 1\nSWITCH   DC    XL1'0'         INDICATORS\nSYSTASK  EQU   X'80'               SYSTEM TASK RUN\nPUSHPULL EQU   X'40'               MODIFY PARM VALUES\nINOPED   EQU   X'20'               INPUT IS OPENED\nCOMTXT   EQU   X'10'               COMMAND PROCESSED\nKEYWIN   EQU   X'08'               IN= PARM KEYWORD FOUND\nKEYWAT   EQU   X'04'               AT= PARM KEYWORD FOUND\nDESTRQ   EQU   X'02'               DESTINATION REQUEST FOUND\n         SPACE 1\nSWPRCS   DC    XL1'0'         PROCESSES\nOPTEST   EQU   X'80'               TEST TIMING AND MODIFY\nMSTEST   EQU   X'40'               TEST MESSAGES SENDER\n         SPACE 1\nDESTFL   DC    XL1'0'         DESTINATIONS\nSDTSO    EQU   X'80'               LOGGED ON TSO USERS\nSDIMS    EQU   X'40'               ACTIVE IMS USERS\n         EJECT\nCARD     DC    CL80' '\n         DC    AL1(L'LNE)\nLNE      DS    0CL133\n         DC    CL1' '\nLNEMS    DC    CL132' '\n         SPACE 1\nMGCRBUF  DC    0F'0',AL2(*-*,0)    COMMAND LENTGH\nMGCRTXT  DC    CL132' '            COMMAND TEXT\nSIMSB    DC    0F'0',AL2(SIMSBL,0) COMMAND LENTGH\nSIMSBM   DC    C'R ??,''/BRO ACTIVE '' '\nSIMSBL   EQU   *-SIMSB\nSHMSG    DC    0F'0',AL2(SHMSGL,0) COMMAND LENTGH\nSHDEST   DC    CL5' ',C'''===> SCHEDULED SHUTDOWN AT '\nSHATHM   DC    CL5'  .  ',C' - CURRENT TIME IS '\nSHTMHM   DC    CL5'  .  ',C' '\nSHEXIT   DC    CL13' ',C' '\nSHXEOM   DC    CL1' ',C''' '\nSHMSGL   EQU   *-SHMSG\nWRMSG    DC    0F'0',AL2(WRMSGL,0) COMMAND LENTGH\n         DC    CL5' ',C'''===> THIS IS A TEST ONLY, '\n         DC    C'DON''''T WORRY ABOUT <=== '\nWRXEOM   DC    CL1' ',C''' '\nWRMSGL   EQU   *-WRMSG\nSHCIB    DC    F'0'                COMMAND LENTGH\nSHCIBT   DC    CL70' '\nRSCIB    DC    F'0'                COMMAND LENTGH\n         DC    C'$TA,T='\nRSCIBHM  DC    CL5'  .  ',C',''$VS,'''''\nRSCIBL   EQU   (*-RSCIB)+4\nRSCIBTX  DC    CL100' ',CL4' '\n         SPACE 1\nIMSRDY   DC    AL1(L'IMSRDYM-1)\nIMSRDYM  DC    C'DFS996I *IMS READY* '\nIMSCNT   DC    AL1(L'IMSCNTM-1)\nIMSCNTM  DC    C'DFS972A *IMS AWAITING MORE INPUT* '\n         EJECT\nTABT     DC    A(5,30,0)           R.MIN. / W.SEC. / ADJUST VALUE\nTABTL    EQU   *-TABT\n         DC    A(10,1*60,0)\n         DC    A(30,5*60,10)\n         DC    A(24*60,0,0)\n         SPACE 1\nTABD     DC    A(DIAG1,DIAG2,DIAG3,DIAG4,DIAG5)\n         DC    A(DIAG6,DIAG7,DIAG8,DIAG9)\n        PRINT  NOGEN\nMCONT   WTO    'SHUTDOWN : CONTINUE WITH DEFAULT (IN=20 ASSUMED).',    X\n               ROUTCDE=2,DESC=6,MF=L\nMIMSSK  WTO    'SHUTDOWN : *IMS READY* NOT FOUND - PROCESS SKIP''D.',  X\n               ROUTCDE=2,DESC=6,MF=L\nMIMSAB  WTO    'SHUTDOWN : *IMS CONTINUE* NOT FOUND - PROCESS ABORT''D.X\n               ',ROUTCDE=2,DESC=6,MF=L\nDIAG1   WTO    'SHUTDOWN : OPERATOR AUTHORITY IS REQUIRED.',           X\n               ROUTCDE=2,DESC=6,MF=L\nDIAG2   WTO    'SHUTDOWN : INVALID AT= OR IN= REQUESTED.',             X\n               ROUTCDE=2,DESC=6,MF=L\nDIAG3   WTO    'SHUTDOWN : UNABLE TO REQUEUE START COMMAND.',          X\n               ROUTCDE=2,DESC=6,MF=L\nDIAG4   WTO    'SHUTDOWN : ''SYSTMSG'' (INPUT) READ ERROR.',           X\n               ROUTCDE=2,DESC=6,MF=L\nDIAG5   WTO    'SHUTDOWN : MAXIMUM NUMBER OF MESSAGES OVERFLOW.',      X\n               ROUTCDE=2,DESC=6,MF=L\nDIAG6   WTO    'SHUTDOWN : OP.COM. NOT ESTABLISHED.',                  X\n               ROUTCDE=2,DESC=6,MF=L\nDIAG7   WTO    'SHUTDOWN : OP.COM. FAILED.',                           X\n               ROUTCDE=2,DESC=6,MF=L\nDIAG8   WTO    'SHUTDOWN : TOO MUCH QUOTES IN MESSAGE TEXT.',          X\n               ROUTCDE=2,DESC=6,MF=L\nDIAG9   WTO    'SHUTDOWN : CALL \"SRCHRPI\" ERROR DETECTED.',            X\n               ROUTCDE=2,DESC=6,MF=L\n        PRINT  GEN\n         SPACE 1\nOPMS     DC    AL1(L'OPMSP+L'OPMSPN)\nOPMSP    DC    C' --- SHUTDOWN - TO INTERRUPT USE COMMAND : P '\nOPMSPN   DC    CL8' '\n         DC    AL1(L'OPMSS+L'OPMSSN+L'OPMSSS)\nOPMSS    DC    C'     OR TO CHANGE PARM''S USE : F '\nOPMSSN   DC    CL8' '\nOPMSSS   DC    CL11' '\n         DC    AL1(0)\n         SPACE 1\nPRMLG    DC    H'0'\nPRMFLD   DC    XL100'0'\n         EJECT\n         LTORG\n         EJECT\n        PRINT  NOGEN\n         SPACE 1\nCIBDSECT DSECT\nCIB     IEZCIB\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SLABEL": {"ttr": 23557, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\t\\x16\\x03\\x94\\x03\\x94\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T09:16:00", "lines": 916, "newlines": 916, "modlines": 0, "user": "SYSPAJA"}, "text": "SLAB     TITLE 'INITIALIZE 9-TRACKS TAPES VOLUMES.'\nSLABEL   START 0\n         SPACE 1\nSLABEL  AMODE  24\nSLABEL  RMODE  24\n         SPACE 2\n* MVS/XA :     MUST BE AMODE AND RMODE 24.\n* --------\n*\n* AUTHOR :     P.A. MOINIL\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         EJECT\n* INITIALIZE 9-TRACKS TAPES VOLUMES :\n* ===================================\n*\n*        THIS PROGRAM CAN BE USED TO INITIALIZE 9-TRACKS TAPES AT 800,\n* 1600 OR 6250 BPI. IT OFFERS A MORE FLEXIBLE WAY TO PREPARE THE TAPES\n* FOR O.S. WORK THAN THE 'IEHINITT' PROGRAM OF I.B.M. DO.\n*\n*        THE CONTROL STATEMENT(S) CAN BE ACCEPTED FROM THREE DIFFERENT\n* INPUT SOURCES (INPUT STREAM, O.S. MODIFY COMMAND OR OPERATOR'S REPLY)\n* SELECTABLE AT THE JOB LEVEL. A CONTROL STATEMENT IS COMPOSED OF ONE\n* OR MORE COMMANDS INVOLVING ONE OR MORE TAPES INITIALIZATION. THE\n* STATEMENTS, AND THUS COMMANDS, ARE FREE FORMAT (NO FIXED COLUMNS OR\n* POSITIONS). EACH COMMAND IS SEPARATED FROM THE NEXT IN A STATEMENT\n* BY A SLASH CHARACTER (/), AND A COMMAND CANNOT CONTINUE ON A NEW\n* STATEMENT.\n*\n* COMMANDS DESCRIPTION :\n* ======================\n*\n*   1. SL DDD . XXXXXX  : INITIALIZE TAPE STANDARD LABEL WITH THE\n*                         VOLUME SERIAL NUMBER XXXXXX AT DENSITY DDD,\n*                         WHERE DDD IS 800, 1600 OR 6250.\n*                         (IF DDD IS OMITTED, THE DEFAULT DENSITY\n*                         USED BY THE PROGRAM IS 6250).\n*\n*   2. SL DDD . AAAAAA, BBBBBB, ... , ZZZZZZ : INITIALIZE A LIST OF\n*                         TAPES STANDARD LABELS WITH THE VOLUME SERIAL\n*                         NUMBERS AAAAAA, BBBBBB, UNTIL ZZZZZZ AT\n*                         DENSITY DDD.\n*                         (THE TAPES ARE CALLED IN SERIAL MOUNTING,\n*                         ONE AFTER THE OTHER).\n*\n*   3. SL DDD . AANNNN - XX : INITIALIZE XX TAPES STANDARD LABELS WITH\n*                         THE GENERATED VOLUME SERIAL NUMBERS FROM\n*                         AANNNN AND INCREMENTED EACH TIME BY +1.\n*                         (THE DIGITS WHERE OCCURS THE ADDITION MUST\n*                         BE NUMERICS OF COURSE).\n*\n*        ALL THESE THREE COMMAND FORMATS CAN BE ALSO APPLIED TO NL\n*        (NO LABEL) TAPES BY REPLACING 'SL' BY 'NL'.\n*\n*        THE 'END' COMMAND IS USED TO STOP THE PROGRAM EXECUTION, AND\n*        THUS IS NORMALLY THE LAST.\n         EJECT\n*        THE TWO STATEMENT EXAMPLES GIVEN BELOW ARE SELF-EXPLANATORIES\n*        TO DESCRIBE HOW THE COMMANDS CAN BE MIXED.\n*\n*        STATEMENT 1 :\n*\n*        SL6250.EU0000,EU1001-20,EU2000/SL1600.EU3000/NL.EU4000-50\n*\n*        STATEMENT 2 :\n*\n*        NL800.EU5000,EU6000/SL1600.EU7000-10/SL800.EU8000/END\n*\n* NOTE : THE PROGRAM INITIALIZES THE TAPES USING ONLY ONE PHYSICAL\n* ------ TAPE UNIT (THIS IS ALLOCATED BY THE 'SYSUTL' DD-CARD), AND\n*        CONSEQUENTLY, BE CAREFULL WHEN MIXING DENSITIES REQUESTS,\n*        SO THAT THE TAPE UNIT SUPPORT IT.\n*\n* CALL OF THE PROGRAM :\n* =====================\n*\n*   1. ENTRY BY INPUT STREAM :\n*   --------------------------\n*\n*        //INITTAPE JOB ... ... ...\n*        //INIT    EXEC PGM=SLABEL\n*        //SYSUTL    DD UNIT=(HTAPE,,DEFER),VOL=(PRIVATE),LABEL=(,BLP)\n*        //SYSPRINT  DD SYSOUT=A\n*        //SYSIN     DD *\n*          ...\n*          ... THE STATEMENTS CAN BE PUNCHED ANYWHERE IN THE CARDS,\n*          ...          FROM COLUMN 1 TO COLUMN 72 INCLUDED.\n*          ...\n*        /*\n*\n*   2. ENTRY BY OPERATOR'S REPLY :\n*   ------------------------------\n*\n*        //INITTAPE JOB ... ... ...\n*        //INIT    EXEC PGM=SLABEL,PARM=0\n*        //SYSUTL    DD UNIT=(HTAPE,,DEFER),VOL=(PRIVATE),LABEL=(,BLP)\n*\n*        AT THE EXECUTION TIME, THE PROGRAM CALLS THE OPERATOR TO\n*        REPLY WITH A STATEMENT FROM THE MAIN CONSOLE.\n*\n*   3. ENTRY BY O.S. MODIFY COMMAND :\n*   ---------------------------------\n*\n*        //INITTAPE JOB ... ... ...\n*        //INIT    EXEC PGM=SLABEL,PARM=1\n*        //SYSUTL    DD UNIT=(HTAPE,,DEFER),VOL=(PRIVATE),LABEL=(,BLP)\n*\n*        AT THE EXECUTION TIME, THE PROGRAM CALLS THE OPERATOR TO\n*        SUPPLY THE STATEMENTS THROUGH THE O.S. MODIFY (F) COMMAND.\n         EJECT\n        $DEFREG\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nEL       EQU   X'80'               END OF LIST INDICATOR.\nNLI      EQU   X'00'               NL INDICATOR.\nSLI      EQU   X'01'               SL INDICATOR.\nS800     EQU   X'02'               800 BPI TAPE DENSITY INDICATOR.\nS1600    EQU   X'04'               1600 BPI TAPE DENSITY INDICATOR.\nS6250    EQU   X'08'               6250 BPI TAPE DENSITY INDICATOR.\n         EJECT\n        PRINT  NOGEN\n         SPACE 1\n        DCBD   DSORG=PS,DEVD=TA\nSLABEL   CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\nJFCDSECT DSECT\n        IEFJFCBN LIST=YES\nSLABEL   CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\nSLABEL   CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\nCIBDSECT DSECT\nCIB     IEZCIB\nSLABEL   CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\n        IEZIOB\nSLABEL   CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\n        PRINT  GEN\n         EJECT\n        $XENT  BASE=(R11,R12)\n*        ANALYZE PARAMETER'S FIELD.\n*        --------------------------\n         SPACE 1\n         L     R1,0(R1)            PARM. FIELD ADDRESS.\n         LA    R2,1\n         CH    R2,0(R1)\n         BNE   GETIN               BRANCH IF ERROR OR NO PARM. FIELD.\n         CLI   2(R1),C'1'          1 = BY O.S. MODIFY COMMAND.\n         BE    OPER\n         CLI   2(R1),C'0'          0 = BY WTOR TO MAIN CONSOLE.\n         BE    WTOR\n         SPACE 2\n*        SEARCH SYSIN AND SYSPRINT DD-CARDS.\n*        -----------------------------------\n         SPACE 1\nGETIN   EXTRACT    ATIOT,'S',FIELDS=(TIOT)\n         L     R3,ATIOT            SEARCH SYSIN.\n         USING TIODSECT,R3\nLOOP     CLC   TIOELNGH(4),ZEROS\n         BE    ETIOT               END OF TIOT SCAN.\n         CLC   TIOEDDNM(L'DDIN),DDIN\n         BNE   TOUT\n         OI    SWITCH,INPUT\n         B     TNXT\nTOUT     CLC   TIOEDDNM(L'DDOUT),DDOUT\n         BNE   TNXT\n         OI    SWITCH,OUTPUT\nTNXT     XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R3,R1               NEXT DD-CARD NAME POINTER.\n         B     LOOP\n         DROP  R3\nETIOT    TM    SWITCH,OUTPUT\n         BZ    ERROUT              SYSPRINT DD-CARD MISSING.\n         TM    SWITCH,INPUT\n         BZ    ERR1IN              SYSIN DD-CARD MISSING.\n         NI    SWITCH,255-OUTPUT-INPUT\n         SPACE 2\n*        OPEN SYSPRINT AND PRINT TITLE.\n*        ------------------------------\n         SPACE 1\n        $PRINT TITLE1\n         LTR   R10,R15\n         BNZ   EXITP\n        $PRINT TITLE2\n         LTR   R10,R15\n         BNZ   EXITP\n         B     SUTL\n         SPACE 2\n*        SEARCH SYSUTL DD-CARD.\n*        ----------------------\n         SPACE 1\nWTOR     OI    SWITCH,SWWTOR\n         B     GETUT\nOPER     OI    SWITCH,SWCONS\nGETUT   EXTRACT    ATIOT,'S',FIELDS=(TIOT,COMM)\nSUTL     LA    R2,DCBTAPE          SEARCH SYSUTL.\n         USING IHADCB,R2\n         L     R3,ATIOT\n         USING TIODSECT,R3\nSEARCH   CLC   TIOELNGH(4),ZEROS\n         BE    ERR1UTL             SYSUTL DD-CARD NOT FOUND.\n         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM\n         BE    FOUND               BRANCH IF SYSUTL FOUND.\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R3,R1               NEXT DD-CARD NAME POINTER.\n         B     SEARCH\n         DROP  R3\n         SPACE 2\n*        CONTROL SYSUTL DD-CARD CODING.\n*        ------------------------------\n         SPACE 1\nFOUND   DEVTYPE    DCBDDNAM,DVTYP\n         DROP  R2\n         CLI   DVTYP+2,X'80'       TEST IF MAGNETIC TAPE DEVICE,\n         BNE   ERR2UTL             BRANCH IF NOT.\n         MVI   CCWSNS+7,6          ASSUME 2400 SERIES.\n         CLI   DVTYP+3,X'01'       TEST IF 2400 SERIES,\n         BE    *+L'*+12            BRANCH IF YES.\n         MVI   CCWSNS+7,24         ASSUME 3400 SERIES.\n         CLI   DVTYP+3,X'03'       TEST IF 3400 SERIES,\n         BNE   ERR3UTL             BRANCH IF NOT.\n         TM    DVTYP+1,X'80'       TEST IF 9-TRACKS,\n         BO    ERR4UTL             BRANCH IF(7-TRACKS).\n        RDJFCB (DCBTAPE)\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   ERR5UTL\n         LA    R9,JF\n         USING JFCDSECT,R9\n         MVI   JFCBDSNM,C' '       FORCE DSNAME.\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM\n         MVC   JFCBDSNM(L'DSN),DSN\n         CLC   JFCBELNM(L'JFCBELNM),BLKS\n         BNE   ERR6UTL\nJLA      EQU   JFCBLTYP-JFCBTSDM\n         OC    JFCBTSDM(JLA),JFCBTSDM\n         BNZ   ERR6UTL\n         CLI   JFCBLTYP,JFCBLP     TEST IF BLP.\n         BNE   ERR6UTL\n         CLI   JFCBUFOF,0\n         BNE   ERR6UTL\n         XR    R1,R1               TEST IF FILE SEQ. NR. = 0 OR 1.\n         CH    R1,JFCBFLSQ\n         BE    JFCBT1\n         LA    R1,1(,R1)\n         CH    R1,JFCBFLSQ\n         BNE   ERR6UTL\nJLB      EQU   JFCBCRDT-JFCBVLSQ-2\nJFCBT1   OC    JFCBVLSQ(JLB),JFCBVLSQ\n         BNZ   ERR6UTL\n         CLI   JFCBFLG2,0          TEST IF OUTPUT MASK.\n         BE    JFCBT2\n         CLI   JFCBFLG2,JFCOUTOP\n         BNE   ERR6UTL\nJFCBT2   CLI   JFCBOPS2,0\n         BNE   ERR6UTL\n         OC    JFCBXPDT(L'JFCBXPDT),JFCBXPDT\n         BNZ   ERR6UTL\n         CLI   JFCBIND1,0\n         BNE   ERR6UTL\n         MVI   JFCBIND2,JFCNEW     FORCE NEW,KEEP.\n         MVI   JFCDEN,0            CLEAR ANY DENSITY SETTING.\nJLC      EQU   JFCBNVOL-JFCBUFNO\n         OC    JFCBUFNO(JLC),JFCBUFNO\n         BNZ   ERR6UTL\n         CLI   JFCBNVOL,1          TEST IF NO. OF VOL.SER.NR. = 1.\n         BNE   ERR6UTL\n         CLC   JFCBVOLS+6(24),BLKS\n         BNE   ERR6UTL\nJLD      EQU   JFCBVLCT-JFCBEXTL\n         OC    JFCBEXTL(JLD),JFCBEXTL\n         BNZ   ERR6UTL\n         CLI   JFCBVLCT,1          TEST IF VOL. COUNT = 1.\n         BNE   ERR6UTL\n         CLI   JFCBSPTN,0\n         BNE   ERR6UTL\n         DROP  R9\nTCONS    TM    SWITCH,SWCONS\n         BZ    TWTOR\n         NI    SWITCH,255-SWEND\n         SPACE 2\n*        INITIALIZE CONSOLE COMMUNICATION.\n*        ---------------------------------\n         SPACE 1\n         TM    SWITCH,SWIN\n         BO    ANRESP\n         L     R2,ATIOT            GET TIOT ADDRESS.\n         MVC   MSGINI+47(8),0(R2)  MOVE JOB NAME IN MESSAGES.\n         MVC   MSGINS+46(8),0(R2)\n         MVC   MSGINP+46(8),0(R2)\n         MVC   PREFIX+4(8),0(R2)\n         LA    R3,MSGINP+53        COMPLETE MESSAGES.\n         BASR  R2,0\n         CLI   0(R3),C' '\n         BNE   *+L'*+2\n         BCTR  R3,R2\n         MVC   1(L'MSGINPT,R3),MSGINPT\n         LA    R3,PREFIX+L'PREFIX-1\n         BASR  R2,0\n         CLI   0(R3),C' '\n         BNE   *+L'*+2\n         BCTR  R3,R2\n         MVC   2(3,R3),PREFIX\n         LA    R3,4(,R3)\n         LA    R2,PREFIX\n         SLR   R3,R2\n         STH   R3,LPRFIX\nANSIN    L     R3,ANSWER           GET ADDR. OF ECB COMMUNICATION AREA.\n         L     R4,0(R3)            GET ECB ADDRESS.\n         L     R5,4(R3)            GET CIB ADDRESS.\n         LA    R5,0(,R5)           CLEAR HIGH BYTE.\n         LA    R2,4(,R3)           SET ADDRESS OF CIB ADDRESS.\n         LTR   R5,R5               TEST IF CURRENT CIB SET UP.\n         BZ    EMPTY\n        QEDIT  ORIGIN=(2),BLOCK=(5)\n         B     ANSIN\nEMPTY   QEDIT  ORIGIN=(2),CIBCTR=2\n         ST    R4,ECBANS           ADDR. OF ECB FOR COMMUNICATION.\n        WTO    MF=(E,MSGINI)\n         ST    R1,MSGLIST          STORE MSG-ID NUMBER.\n        WTO    MF=(E,MSGINS)\n         ST    R1,MSGLIST+4        STORE MSG-ID NUMBER.\n        WTO    MF=(E,MSGINP)\n         ST    R1,MSGLIST+8        STORE MSG-ID NUMBER.\n         OI    MSGLIST+8,EL        SET END OF LIST.\n         OI    SWITCH,SWIN\n         SPACE 2\n*        READ STATEMENT FROM CONSOLE COMMAND.\n*        ------------------------------------\n         SPACE 1\nANALC    L     R1,ECBANS           GET ADDR. OF ECB FOR COMMUNICATION.\n        WAIT   1,ECB=(1)\nANRESP   L     R3,ANSWER           GET ADDR. OF ECB COMMUNICATION AREA.\n         L     R4,0(R3)            GET ECB ADDRESS.\n         L     R5,4(R3)            GET CIB ADDRESS.\n         LA    R5,0(,R5)           CLEAR HIGH BYTE.\n         LA    R2,4(,R3)           SET ADDRESS OF CIB ADDRESS.\n         LTR   R5,R5               TEST IF CURRENT CIB SET UP.\n         BZ    NOCMD\n         USING CIBDSECT,R5\n         CLI   CIBVERB,CIBSTOP     IS IT STOP (P) COMMAND,\n         BNE   NOTST               BRANCH IF NOT.\n         XR    R10,R10             C.C. = 0.\n         B     EXIT\nNOTST    CLI   CIBVERB,CIBMODFY    IS IT MODIFY (F) COMMAND,\n         BE    GETCMD              BRANCH IF YES.\nSKIP     NI    SWITCH,255-SWCONT\nNOCMD   QEDIT  ORIGIN=(2),CIBCTR=2\n         ST    R4,ECBANS           ADDR. OF ECB FOR COMMUNICATION.\n         TM    SWITCH,SWCONT\n         BO    ANALC\n         OI    SWITCH,SWCONT\n         B     ANRESP\nGETCMD   LH    R6,CIBDATLN         GET DATA FIELD LENGTH.\n         LTR   R6,R6\n         BNP   SKIP\n         LA    R7,L'COMMAND\n         CLR   R6,R7\n         BNH   *+L'*+2\n         LR    R6,R7               SET MAX. LENGTH.\n         BCTR  R6,0\n         MVI   COMMAND,C' '\n         MVC   COMMAND+1(L'COMMAND-1),COMMAND\n         EX    R6,MVDATA           MOVE AND UPPER CASE DATA.\n        QEDIT  ORIGIN=(2),BLOCK=(5)\n         LM    R1,R3,SCANF         SCAN COMMAND POINTERS.\n         B     STANAL\nMVDATA   OC    COMMAND(*-*),CIBDATA\n         DROP  R5\n         SPACE 2\n*        READ STATEMENT FROM OPERATOR REPLY.\n*        -----------------------------------\n         SPACE 1\nTWTOR    TM    SWITCH,SWWTOR\n         BZ    READ\n         TM    SWITCH,SWRIN\n         BO    REQST\n         OI    SWITCH,SWRIN\n         L     R2,ATIOT            GET TIOT ADDRESS.\n         MVC   PREFIX+4(8),0(R2)   PREPARE WTOR.\n         LA    R3,PREFIX+L'PREFIX-1\n         BASR  R2,0\n         CLI   0(R3),C' '\n         BNE   *+L'*+2\n         BCTR  R3,R2\n         MVC   2(3,R3),PREFIX\n         LA    R3,4(,R3)\n         LA    R2,PREFIX\n         SLR   R3,R2\n         STH   R3,LPRFIX\n         EX    R3,MVPFIX\n         LA    R3,MSGWOR+14(R3)\n         MVC   0(L'STMSG,R3),STMSG\nREQST    XC    COMMAND(L'COMMAND),COMMAND    CLEAR REPLY AREA.\n         MVI   RECB,0              CLEAR ECB.\n        WTOR   MF=(E,MSGWOR)\n        WAIT   ECB=RECB\n         MVI   LINE,C' '\n         MVC   LINE+1(L'COMMAND-1),LINE\n         OC    COMMAND(L'COMMAND),LINE  UPPER CASE DATA.\n         LM    R1,R3,SCANF         SCAN COMMAND POINTERS.\n         B     STANAL\nMVPFIX   MVC   MSGWOR+12(*-*),PREFIX\n         SPACE 2\n*        READ STATEMENT FROM SYSIN.\n*        --------------------------\n         SPACE 1\nREAD    $READ  CARD\n         LTR   R10,R15\n         BP    EXITR\n         BM    REOF\n         LM    R1,R3,SCANC         SCAN CARD POINTERS.\n         SPACE 2\n*        STATEMENT ANALYSIS.\n*        -------------------\n         SPACE 1\nSTANAL   LA    R4,LINE+11\n         MVI   LINE,C'0'\n         MVI   LINE+1,C' '         CLEAR LINE.\n         MVC   LINE+2(L'LINE-2),LINE+1\nELBK1    CLI   0(R1),C' '          TEST IF BLANK,\n         BE    ELBK3               BRANCH IF YES.\n         CLR   R1,R4               TEST IF ANY MOVE,\n         BE    ELBK2               BRANCH IF NOT.\n         MVC   0(1,R4),0(R1)       MOVE THIS CHARACTER.\nELBK2    LA    R4,1(,R4)           INCREMENT.\nELBK3    BXLE  R1,R2,ELBK1         INCREMENT AND TEST.\n         TM    SWITCH,SWCONS+SWWTOR\n         BNZ   NPRT\n        $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXITR\nNPRT     L     R2,LTABL            RESET LABEL'S TABLE.\n         SRDL  R2,8\n         SRL   R3,24\n         LA    R4,LTAB\n         LTR   R2,R2\n         BZ    LAST\n         BASR  R1,0\n         XC    0(256,R4),0(R4)\n         LA    R4,256(,R4)\n         BCTR  R2,R1\nLAST     EX    R3,RESET\n         LA    R1,LINE+11          START STATEMENT ANALYSIS.\n         LA    R3,LINE+130\n         LA    R4,LTAB\n         B     ANAL1\nRESET    XC    0(*-*,R4),0(R4)\nANAL0    LA    R4,L'LTAB(R4)\n         CLI   0(R4),255           TEST END OF TABLE.\n         BE    OVERFL\nANAL1    CLC   0(L'CEND,R1),CEND   TEST END.\n         BE    ANAL17\n         CLC   0(L'CNL,R1),CNL     TEST LABEL TYPE.\n         BE    ANAL2\n         CLC   0(L'CSL,R1),CSL\n         BNE   INVCMD\n         MVI   IND,SLI\n         B     ANAL2+L'ANAL2\nANAL2    MVI   IND,NLI\n         LA    R2,L'CNL\n         BXLE  R1,R2,*+L'*+4\n         B     INVCMD\n         CLC   0(L'D800,R1),D800   TEST TAPE DENSITY.\n         BE    ANAL3\n         CLC   0(L'D6250,R1),D6250\n         BE    ANAL3A\n         CLC   0(L'D1600,R1),D1600\n         BNE   ANAL3X\n         OI    IND,S1600\n         LA    R2,L'D1600\n         B     ANAL3Y\nANAL3A   OI    IND,S6250\n         LA    R2,L'D6250\n         B     ANAL3Y\nANAL3    OI    IND,S800\n         LA    R2,L'D800\nANAL3Y   BXLE  R1,R2,*+L'*+4\n         B     INVCMD\nANAL3X   LA    R2,1\n         CLI   0(R1),C'.'          TEST SEPARATOR.\n         BNE   INVCMD\n         B     ANAL5\nANAL4    LA    R4,L'LTAB(R4)\n         CLI   0(R4),255           TEST END OF TABLE.\n         BE    OVERFL\nANAL5    BXLE  R1,R2,*+L'*+4\n         B     INVCMD\n         LA    R5,LABEL            PICK UP VOLUME(S) SERIAL NUMBER(S).\n         LA    R6,6\n         MVC   LABEL(L'LABEL),BLKS\n         CLI   0(R1),C'A'          ALPHAMERIC.\n         BNL   ANAL6\n         CLI   0(R1),C'@'          AT SIGN.\n         BE    ANAL6\n         CLI   0(R1),C'$'          DOLLAR SIGN.\n         BE    ANAL6\n         CLI   0(R1),C'#'          POUND SIGN.\n         BE    ANAL6\n         CLI   0(R1),C'-'          HYPHEN.\n         BNE   INVCMD\nANAL6    MVC   0(1,R5),0(R1)\n         LA    R5,1(,R5)\n         BXLE  R1,R2,*+L'*+4\n         B     ANAL7\n         CLI   0(R1),C'A'          ALPHAMERIC.\n         BNL   ANAL6A\n         CLI   0(R1),C'@'          AT SIGN.\n         BE    ANAL6A\n         CLI   0(R1),C'$'          DOLLAR SIGN.\n         BE    ANAL6A\n         CLI   0(R1),C'#'          POUND SIGN.\n         BE    ANAL6A\n         CLI   0(R1),C'-'          HYPHEN.\n         BNE   ANAL7\nANAL6A   BCT   R6,ANAL6\nANAL7    MVC   0(L'IND,R4),IND\n         MVC   1(L'LABEL,R4),LABEL\nANAL8    CLI   0(R1),C','\n         BE    ANAL4\n         CLI   0(R1),C'/'          TEST END/START STATEMENT.\n         BNE   ANAL9\n         BXLE  R1,R2,ANAL0\n         B     INVCMD\nANAL9    CLI   0(R1),C'-'\n         BNE   ANAL18\n         BXLE  R1,R2,*+L'*+4       REQUEST IS A RANGE OF TAPES.\n         B     INVCMD\n         XR    R5,R5\n         TM    0(R1),X'F0'\n         BNO   INVCMD\n         MVC   WORK(1),0(R1)\n         NI    WORK,X'0F'\n         IC    R5,WORK\n         BXLE  R1,R2,*+L'*+4\n         B     ANAL10\n         TM    0(R1),X'F0'\n         BNO   ANAL10\n         MH    R5,TEN\n         XR    R0,R0\n         MVC   WORK(1),0(R1)\n         NI    WORK,X'0F'\n         IC    R0,WORK\n         AR    R5,R0\n         LA    R1,1(,R1)\nANAL10   LTR   R5,R5\n         BZ    ANAL12\n         BCT   R5,ANAL13\nANAL11   CLI   0(R1),C'-'\n         BE    INVCMD\n         B     ANAL8\nANAL12   BCTR  R1,0\n         B     INVCMD\nANAL13   LA    R4,L'LTAB(R4)\n         CLI   0(R4),255           TEST END OF TABLE.\n         BE    OVERFL\n         LA    R6,LABEL+5\n         LA    R7,6\nANAL14   CLI   0(R6),C' '\n         BE    ANAL15\n         TM    0(R6),X'F0'\n         BNO   ANAL12\n         TR    0(1,R6),TRADD-X'F0'\n         CLI   0(R6),C'0'\n         BNE   ANAL16\nANAL15   BCTR  R6,0\n         BCT   R7,ANAL14\n         B     ANAL12\nANAL16   MVC   0(L'IND,R4),IND\n         MVC   1(L'LABEL,R4),LABEL\n         BCT   R5,ANAL13\n         B     ANAL11\nANAL17   MVI   0(R4),255           SET FINAL INDICATOR.\n         OI    SWITCH,SWEND\n         B     ANAL19+L'ANAL19\nANAL18   CLI   0(R1),C' '\n         BNE   INVCMD\nANAL19   MVI   L'LTAB(R4),255      SET FINAL INDICATOR.\n         SPACE 2\n*        EXECUTE REQUEST(S).\n*        -------------------\n         SPACE 1\n         LA    R5,DCBTAPE          SET TAPE DCB ADDRESSABILITY.\n         USING IHADCB,R5\n         USING JFCDSECT,R9\n         LA    R6,LTAB             START REQ. TAPES LABELS TABLE.\nNEXT     CLI   0(R6),255           TEST IF END OF TABLE,\n         BE    TEND                BRANCH IF YES.\n         TM    0(R6),S800          SET REQUESTED DENSITY.\n         BO    SET800\n         TM    0(R6),S1600\n         BO    SET1600\n         MVI   DCBDEN,DCBMTDN4\n         B     SVOLS\nSET800   MVI   DCBDEN,DCBMTDN2\n         B     SVOLS\nSET1600  MVI   DCBDEN,DCBMTDN3\nSVOLS    MVC   JFCBVOLS(L'JFCBVOLS),1(R6)    MOVE VOL.SER.NO.\n         MVC   VOLSER(L'VOLSER),BLKS\n        OPEN   (DCBTAPE,(OUTPUT)),TYPE=J\n         TM    DCBOFLGS,DCBOFOPN   TEST OPEN SUCCESSFULL,\n         BZ    ERROPN              BRANCH IF NOT.\n         LA    R7,CCWRWD\n         BAS   R8,EXCPT            REWIND TAPE.\n         TM    0(R6),SLI           TEST IF SL REQUESTED,\n         BZ    NLREQ               BRANCH IF NOT (NL).\n         MVC   VOLSER(L'VOLSER),1(R6)\n         LA    R7,CCWVOL1\n         BAS   R8,EXCPT            WRITE VOL1.\n         LA    R7,CCWHDR1\n         BAS   R8,EXCPT            WRITE DUMMY HDR1.\nNLREQ    LA    R7,CCWWTM\n         BAS   R8,EXCPT            WRITE TAPE-MARK.\nCLOT    CLOSE  (DCBTAPE)\nINCR     LA    R6,L'LTAB(R6)       BUMP POINTER.\n         B     NEXT\n         DROP  R5,R9\n         SPACE 1\nTEND     TM    SWITCH,SWEND\n         BO    REOF\n         B     TCONS\n         SPACE 2\n*        DIAGNOSTICS MESSAGES.\n*        ---------------------\n         SPACE 1\nDIAG     LA    R2,EXCPM\n         NI    SWITCH,255-SWRTN\n         B     SENDG\nERROPN   LA    R2,OPENM\n         OI    SWITCH,SWRTN\nSENDG    MVI   LINE,C'0'           CLEAR LINE.\n         MVI   LINE+1,C' '\n         MVC   LINE+2(L'LINE-2),LINE+1\n         MVC   LINE+6(4),0(R2)     PREPARE MESSAGE.\n         MVC   LINE+11(L'ERRMSG),ERRMSG\n         MVC   LINE+L'ERRMSG+4(6),1(R6)\n         TM    SWITCH,SWCONS+SWWTOR\n         BZ    PRT\n         MVI   MSGERR+4,C' '       SEND MESSAGE TO MAIN CONSOLE.\n         MVC   MSGERR+5(49),MSGERR+4\n         LH    R1,LPRFIX\n         EX    R1,MVPRFX\n         LA    R1,MSGERR+6(R1)\n         LA    R4,LINE+6\n         LA    R5,10\n         EX    R5,MVMSG\n        WTO    MF=(E,MSGERR)\n         MVC   MSGERR+4(L'BLKS),BLKS\n         MVC   MSGERR+10(41),LINE+17\n        WTO    MF=(E,MSGERR)\n         B     TRTN\nPRT     $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXITW\n        $SNAP  SIND,LSNAP\n         LTR   R10,R15\n         BNZ   EXITW\nTRTN     TM    SWITCH,SWRTN\n         BO    INCR\n         NI    SWITCH,255-SWSNS\n         XC    SENSE(L'SENSE),SENSE\n         B     CLOT\n         SPACE 2\n*        ERROR MESSAGES.\n*        ---------------\n         SPACE 1\nINVCMD   LA    R4,INVMSG\n         LA    R5,L'INVMSG-1\n         B     SENDERR\nOVERFL   LA    R4,OVFMSG\n         LA    R5,L'OVFMSG-1\nSENDERR  LR    R6,R1               SAVE STATEMENT POINTER.\n         TM    SWITCH,SWCONS+SWWTOR\n         BZ    ENTRD\n         MVI   MSGERR+4,C' '       SEND MESSAGE TO MAIN CONSOLE.\n         MVC   MSGERR+5(49),MSGERR+4\n         LH    R1,LPRFIX\n         EX    R1,MVPRFX\n         LA    R1,MSGERR+6(R1)\n         EX    R5,MVMSG\n        WTO    MF=(E,MSGERR)\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         B     TCONS\nENTRD    MVI   LINE,C' '           SEND MESSAGE TO SYSPRINT.\n         MVC   LINE+1(L'LINE-1),LINE\n         MVI   0(R6),C'$'\n        $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXITR\n         MVI   0(R6),C' '\n         LA    R1,LINE+L'LINE-1\n         SLR   R1,R5\n         CLR   R1,R6\n         BNH   *+L'*+2\n         LR    R1,R6\n         EX    R5,MVMSG\n        $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXITR\n         B     TCONS\nMVPRFX   MVC   MSGERR+4(*-*),PREFIX\nMVMSG    MVC   0(*-*,R1),0(R4)\n         SPACE 2\nERR1IN   LA    R4,ERR1I\n         B     ERRSD\nERR1UTL  LA    R4,ERR1U\n         B     ERRSD\nERR2UTL  LA    R4,ERR2\n         B     ERRSD\nERR3UTL  LA    R4,ERR3\n         B     ERRSD\nERR4UTL  LA    R4,ERR4\n         B     ERRSD\nERR5UTL  LA    R4,ERR5\n         B     ERRSD\nERR6UTL  LA    R4,ERR6\nERRSD    LA    R1,R4               PREPARE MESSAGE.\n         BCTR  R1,0\n         XR    R5,R5\n         IC    R5,0(R1)\n         TM    SWITCH,SWCONS+SWWTOR\n         BZ    GPRT\n         MVI   MSGERR+4,C' '       SEND MESSAGE TO MAIN CONSOLE.\n         MVC   MSGERR+5(49),MSGERR+4\n         LA    R1,MSGERR+4\n         EX    R5,MVMSG\n        WTO    MF=(E,MSGERR)\n         B     ERREX\nGPRT     MVI   LINE,C'0'           CLEAR LINE.\n         MVI   LINE+1,C' '\n         MVC   LINE+2(L'LINE-2),LINE+1\n         LA    R1,LINE+11\n         EX    R5,MVMSG\n        $PRINT LINE\n         LTR   R15,R15\n         BNZ   ERREX\n        $SNAP  SIND,LSNAP\n         B     ERREX\nERROUT  WTO    'SYSPRINT DD-CARD MISSING.',ROUTCDE=11,DESC=7\nERREX    LA    R10,16              C.C. = 16.\n         B     EXIT\n         SPACE 2\n*        END OF PROGRAM EXECUTION.\n*        -------------------------\n         SPACE 1\nEXITW    TM    DCBTAPE+DCBOFLGS-IHADCB,DCBOFOPN\n         BZ    EXITR\n        CLOSE  (DCBTAPE)\n         B     EXITR\nREOF     XR    R10,R10             C.C. = 0.\n         TM    SWITCH,SWCONS+SWWTOR\n         BNZ   EXIT\n        $PRINT EOJ\n         LR    R10,R15\nEXITR   $RCLOSE\nEXITP   $PCLOSE\nEXIT     LR    R15,R10             SET C.C.\n         TM    SWITCH,SWIN         ANY MESSAGES TO BE DELETED,\n         BZ    LEAVE               BRANCH IF NOT.\n        DOM    MSGLIST=MSGLIST\nLEAVE   $XRET  CC=(R15)\n         EJECT\n*        EXECUTE CHANNEL PROGRAM ROUTINE.\n*        --------------------------------\n*\n*              R4  = WORK REGISTER (IOB).\n*              R7  = ADDRESS OF CHANNEL PROGRAM.\n*              R8  = LINK REGISTER.\n*\n         SPACE 1\nEXCPT    LA    R4,IOBTAPE          SET IOB ADDRESSABILITY.\n         USING IOBSTDRD,R4\n         ST    R7,IOBSTART\n         XC    IOBCSW(L'IOBCSW),IOBCSW\n         XC    ECB(L'ECB),ECB\n        EXCP   (4)\n        WAIT   ECB=ECB\n         TM    SWITCH,SWSNS\n         BO    DIAG\n         CLI   ECB,X'7F'           TEST COMPLETION CODE.\n         BER   R8                  O.K., RETURN.\n         OI    SWITCH,SWSNS\n         LA    R7,CCWSNS\n         B     EXCPT+L'EXCPT\n         DROP  R4\n         SPACE 2\n        LTORG\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n*        -------------------------\n         SPACE 1\nSCANF    DC    A(COMMAND,1,COMMAND+119)\nSCANC    DC    A(CARD,1,CARD+71)\nATIOT    DC    A(*-*)\nANSWER   DC    A(*-*)\nECBANS   DC    A(*-*)\nLSNAP    DC    A(SENSE+L'SENSE-SIND)\nLTABL    DC    A(ELTAB-LTAB-1)\nRECB     DC    F'0'\nDVTYP    DC    2F'0'\nMSGLIST  DC    2F'0'\nZEROS    DC    F'0'\nLPRFIX   DC    H'0'\nTEN      DC    H'10'\nIND      DC    X'0'\nWORK     DC    X'0'\nCNL      DC    C'NL'\nCSL      DC    C'SL'\nCEND     DC    C'END'\nD800     DC    C'800'\nD1600    DC    C'1600'\nD6250    DC    C'6250'\nMSGINPT  DC    C',...'\nEXCPM    DC    C'EXCP'\nOPENM    DC    C'OPEN'\nLABEL    DC    CL6' '\nCONS     DC    C'CONSOLE'\nDSN      DC    C'INIT.TAPE'\nTRADD    DC    C'1234567890......'\nPREFIX   DC    C'---             '\nSTMSG    DC    C'ENTER STATEMENT.'\nINVMSG   DC    C'INVALID COMMAND.'\nOVFMSG   DC    C'LABEL''S TABLE OVERFLOW.'\nDDIN     DC    CL8'SYSIN'\nDDOUT    DC    CL8'SYSPRINT'\nBLKS     DC    CL24' '\nERRMSG   DC    C'ERROR - PROCESSING INTERRUPTED FOR TAPE       .'\n         DC    AL1(L'TITLE1)\nTITLE1   DC    C'1          INITIALIZE 9-TRACKS TAPES VOLUMES PROGRAM.'\n         DC    AL1(L'TITLE2)\nTITLE2   DC    C'           ------------------------------------------'\n         DC    AL1(L'EOJ)\nEOJ      DC    C'0          END OF JOB.'\nCOMMAND  DC    0CL120' ',CL40' '\nCARD     DC    CL80' '\nLCMD     EQU   *-COMMAND\n         DC    AL1(L'LINE)\nLINE     DC    CL131' '\n         EJECT\nMSGINI  WTO    '/ TO INTERRUPT PROGRAM USE THE COMMAND = C          ', 1\n               ROUTCDE=(2),DESC=(2),MF=L\nMSGINS  WTO    '/ TO STOP THE PROGRAM USE THE COMMAND = P              1\n                ',ROUTCDE=(2),DESC=(2),MF=L\nMSGINP  WTO    '/ TO PASS A STATEMENT USE THE COMMAND = F              1\n                ',ROUTCDE=(2),DESC=(2),MF=L\nMSGERR  WTO    '                                                  ',   1\n               ROUTCDE=(2),DESC=(6),MF=L\nMSGWOR  WTOR   '                                 ',COMMAND,LCMD,RECB,  1\n               ROUTCDE=(2),DESC=(2),MF=L\n         EJECT\nSIND     DC    0F'0',C'ECB='\nECB      DC    F'0'\n         DC    0F'0',C'IOB='\nIOBTAPE  DC    0F'0',X'42000000',A(ECB,0,0,*-*,DCBTAPE,0,0)\n         SPACE 1\n         DC    0F'0',C'DCB='\nDCBTAPE  DCB   DSORG=PS,MACRF=(E),EXLST=JOBFILE,DDNAME=SYSUTL\n         SPACE 1\n         DC    0F'0',C'JFC='\nJOBFILE  DC    0F'0',XL1'87',AL3(JF)\nJF       DC    0F'0',(JFCBLGTH)X'0'\n         SPACE 1\n         DC    0F'0',C'SNS='\nSENSE    DC    XL24'00'\n         EJECT\nCCWRWD   CCW   X'07',*,X'20',1\nCCWVOL1  CCW   X'01',VOL1,X'20',80\nCCWHDR1  CCW   X'01',HDR1,X'20',80\nCCWWTM   CCW   X'1F',*,X'20',1\nCCWSNS   CCW   X'04',SENSE,X'20',*-*\n         SPACE 1\nVOL1     DC    0F'0',C'VOL1'\nVOLSER   DC    CL6' '\n         DC    XL1'00',3CL10' ',CL10'EURATOM   ',CL29' '\nHDR1     DC    0F'0',C'HDR1',XL76'00'\n         SPACE 1\n         DC    AL1(L'ERR1I-1)\nERR1I    DC    C'SYSIN DD-CARD MISSING.'\n         DC    AL1(L'ERR1U-1)\nERR1U    DC    C'SYSUTL DD-CARD MISSING.'\n         DC    AL1(L'ERR2-1)\nERR2     DC    C'SYSUTL NOT MAGNETIC TAPE DEVICE.'\n         DC    AL1(L'ERR3-1)\nERR3     DC    C'SYSUTL UNKNOWED MAGNETIC TAPE DEVICE.'\n         DC    AL1(L'ERR4-1)\nERR4     DC    C'SYSUTL 7-TRACKS TAPE NOT SUPPORTED.'\n         DC    AL1(L'ERR5-1)\nERR5     DC    C'SYSUTL JFCB READ ERROR.'\n         DC    AL1(L'ERR6-1)\nERR6     DC    C'SYSUTL DD-CARD INCORRECTLY CODED.'\n         SPACE 2\nSWITCH   DC    X'0'\n         SPACE 1\nSWIN     EQU   X'01'\nSWRIN    EQU   X'02'\nSWCONT   EQU   X'04'\nSWRTN    EQU   X'08'\nSWSNS    EQU   X'10'\nSWEND    EQU   X'20'\nSWWTOR   EQU   X'40'\nSWCONS   EQU   X'80'\nINPUT    EQU   X'40'\nOUTPUT   EQU   X'80'\n         SPACE 2\nLTAB     DS    0CL7\n         DS    100CL7\n         DS    CL7\nELTAB    DC    AL1(255,255)\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLABEL$": {"ttr": 23818, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//SLABEL   JOB (........),'INSTALL - SLABEL -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=6\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                TXPRINT   TXREAD    TXSNAP                         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=SLABEL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,READ,SNAP)\n  ENTRY   SLABEL\n  NAME    SLABEL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLABEL@": {"ttr": 23820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x86!\\x7f\\x00\\x86!\\x7f\\x17'\\x00n\\x00n\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-08-05T00:00:00", "modifydate": "1986-08-05T17:27:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "SYSPAJA"}, "text": "1   01/08/86\n                                                      SLABEL    1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *  INITIALIZE 9-TRACKS TAPES VOLUMES. * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :\n  =========\n\n         This program can be used to initialize 9-tracks tapes at 800,\n  1600 or 6250 bpi. It offers a more flexible way to prepare the tapes\n  for O.S. work than the IEHINITT program of I.B.M. do.\n\n  Syntax :\n  ========\n\n         The control statement(s) can be accepted from three different\n  input sources (input stream, O.S. MODIFY command or operator's reply)\n  selectable at the job level. A control statement is composed of one\n  or more connands involving one or more tapes initialization. The\n  statements, and thus commands, are free format (no fixed columns or\n  positions). Each command is separated from the next in a statement\n  by a slash character (/), and a command cannot continue on a new\n  statement.\n\n  Commands description :\n  ======================\n\n    1. SL DDD . XXXXXX  : initialize tape standard label with the\n                          volume serial number XXXXXX at density DDD,\n                          where DDD is 800, 1600 or 6250.\n                          (If DDD is omitted, the default density\n                          used by the program is 6250).\n\n    2. SL DDD . AAAAAA, BBBBBB, ... , ZZZZZZ : initialize a list of\n                          tapes standard labels with the volume serial\n                          numbers AAAAAA, BBBBBB, until ZZZZZZ at\n                          density DDD.\n                          (The tapes are called in serial mounting,\n                          one after the other).\n\n    3. SL DDD . AANNNN - XX : initialize XX tapes standard labels with\n                          the generated volume serial numbers from\n                          AANNNN and incremented each time by +1.\n                          (The digits where occurs the addition must\n                          be numerics of course).\n\n         All these three command formats can be also applied to NL\n         (no label) tapes by replacing SL by NL.\n\n         The END command is used to stop the program execution, and\n         thus is normally the last.\n1   23/09/85\n                                                      SLABEL    2/2.\n\n         The two statement examples given below are self-explanatories\n         to describe how the commands can be mixed.\n\n         Statement 1 :\n\n         SL6250.EU0000,EU1001-20,EU2000/SL1600.EU3000/NL.EU4000-50\n\n         Statement 2 :\n\n         NL800.EU5000,EU6000/SL1600.EU7000-10/SL800.EU8000/END\n\n  Note : The program initializes the tapes using only one physical\n  ------ tape unit (this is allocated by the SYSUTL DD-card), and\n         consequently, be carefull when mixing densities requests,\n         so that the tape unit support it.\n\n  Call of the program :\n  =====================\n\n    1. Entry by input stream :\n    --------------------------\n\n         //INITTAPE JOB ... ... ...\n         //INIT    EXEC PGM=SLABEL\n         //SYSUTL    DD UNIT=(HTAPE,,DEFER),VOL=(PRIVATE),LABEL=(,BLP)\n         //SYSPRINT  DD SYSOUT=A\n         //SYSIN     DD *\n           ...\n           ... the statements can be placed anywhere in the cards,\n           ...          from column 1 to column 72 included.\n           ...\n         /*\n\n    2. Entry by operator's reply :\n    ------------------------------\n\n         //INITTAPE JOB ... ... ...\n         //INIT    EXEC PGM=SLABEL,PARM=0\n         //SYSUTL    DD UNIT=(HTAPE,,DEFER),VOL=(PRIVATE),LABEL=(,BLP)\n\n         At the execution time, the program calls the operator to\n         reply with a statement from the main console.\n\n    3. Entry by O.S. MODIFY command :\n    ---------------------------------\n\n         //INITTAPE JOB ... ... ...\n         //INIT    EXEC PGM=SLABEL,PARM=1\n         //SYSUTL    DD UNIT=(HTAPE,,DEFER),VOL=(PRIVATE),LABEL=(,BLP)\n\n         At the execution time, the program calls the operator to\n         supply the statements through the O.S. MODIFY (F) command.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMFEXIT$": {"ttr": 24067, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943O\\x00\\x943O\\x11D\\x00<\\x00<\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-30T00:00:00", "modifydate": "1994-11-30T11:44:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "SYSPAJA"}, "text": "//SMFEXITS JOB (........),'INSTALL  SMF-EXITS',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*       SMF EXITS : RE-LINK INTO LPALIB.                            *\n//* ---------- ADJUSTMENTS MUST BE DONE BEFORE YOU RUN THIS JOB (SCAN *\n//*            ALL \"->\" OCCURENCES AND SET RIGHT DATA-SETS NAMES),    *\n//*            AND VOL=SER=...... MUST BE COMPLETE.                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//LNKS    EXEC PGM=HEWLH096,\n//             PARM='SIZE=(768K,100K),NCAL,LIST,LET,XREF,AC=1'\n//SYSLMOD   DD UNIT=DISK,VOL=SER=......,DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIB1   DD DSN=->.CJS.LOAD.LIBRARY,DISP=SHR\n//SYSLIB2   DD DSN=->.TARGET.RTNLIB,DISP=SHR\n//SYSLIB3   DD UNIT=DISK,VOL=SER=......,DSN=SYS1.LPALIB,DISP=SHR\n//AOSB3     DD UNIT=DISK,VOL=SER=......,DSN=SYS1.AOSB3,DISP=SHR\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD *\n    INCLUDE   SYSLIB1(CJSUJV)\n    CHANGE    IEFUJV(USERUJV)\n    INCLUDE   SYSLIB2(IEFUJV)\n    INCLUDE   SYSLIB2(UJVTABLE)\n    ORDER     IEFUJV(P),USERUJV,UJVTABLE\n    ENTRY     IEFUJV\n NAME    IEFUJV(R)\n    INCLUDE   SYSLIB1(CJSUJI)\n    CHANGE    IEFUJI(USERUJI)\n    INCLUDE   SYSLIB2(IEFUJI)\n    ORDER     IEFUJI(P),USERUJI\n    ENTRY     IEFUJI\n NAME    IEFUJI(R)\n    INCLUDE   SYSLIB1(CJSACTRT)\n    CHANGE    IEFACTRT(USERACT)\n    INCLUDE   SYSLIB2(IEFACTRT)\n    INCLUDE   AOSB3(IEFTB724)\n    ORDER     IEFACTRT(P),USERACT\n    ENTRY     IEFACTRT\n NAME    IEFACTRT(R)\n    INCLUDE   SYSLIB1(CJSUJP)\n    CHANGE    IEFUJP(USERUJP)\n    INCLUDE   SYSLIB3(IEFUJP)\n    ORDER     IEFUJP(P),USERUJP\n    ENTRY     IEFUJP\n NAME    IEFUJP(R)\n/*\n//LNKL    EXEC PGM=HEWLH096,\n//             PARM='RENT,SIZE=(768K,100K),NCAL,LIST,LET,XREF'\n//SYSLMOD   DD UNIT=DISK,VOL=SER=......,DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIBL   DD DSN=->.TARGET.RTNLIB,DISP=SHR\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD *\n    INCLUDE   SYSLIBL(IEFUSI)\n    ENTRY     IEFUSI\n NAME    IEFUSI(R)\n    INCLUDE   SYSLIBL(IEFUTL)\n    ENTRY     IEFUTL\n NAME    IEFUTL(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMFEXIT@": {"ttr": 24069, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x07\\x8f\\x00\\x91\\x07\\x8f\\x14\\x14\\x00\\x9c\\x00\\x9c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-03-19T00:00:00", "modifydate": "1991-03-19T14:14:00", "lines": 156, "newlines": 156, "modlines": 0, "user": "SYSPAJA"}, "text": "1   02/05/90\n                                                     1MF EXITS  1/3.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *   S M F  EXITS : PRE-REQUISITES.    * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  CJS involvement : IBM product 5785-GAK (Chained Jobs Scheduling) is\n  ----------------- installed and allows IEFUJV to receive control at\n                    //* comment statements.\n\n  SRB time control (job I/O's) :\n  ==============================\n\n    History :  Since O.S. MVT, it has been detected that very easily\n    ---------  a user FORTRAN program loop, involving I/O operations\n               only, was long running without consuming any CPU time.\n               So, in order to help operators, it has been decided\n               to control the number of EXCPs (svc 0) done by users\n               programs, and automatically CANCEL the job at the time\n               this number was exhausted.\n               Then, with MVS, the SRB time has been introduced, and\n               the control is now done on it.\n\n    How done : 1. The JOBIO= (or I=) parameter in the JES2 /*JOBPARM\n    ----------    statement has been added to specify the number of\n                  I/O's in thousands (this concept is more easier to\n                  explain at the end users, than what is the SRB time).\n               2. Using a reserved word in the ASCB to set this value,\n                  transformed in time units, the control detection on\n                  the SRB time has been placed in the same module it\n                  is done for the CPU time, and thus scheduling the\n                  IEFUTL exit by the same way.\n\n  JOB statement :\n  ---------------\n    1. The accounting information parameter is accepted by IEFUJV only\n       if coded 'AAAANNNN', (AAAANNNN) or AAAANNNN (8 numerics, where\n       AAAA is the authorization or project number and NNNN is the\n       programmer number).\n       In JES2PARM :\n       JES2 2.2.3, JOBDEF ACCTFLD=OPTIONAL,JCLERR=NO is necessary to\n       bypass the accounting number length error (8 instead of 4).\n    2. All the remaining JES2 accounting information are available.\n\n  Modifications : to JES2 and OS-NUCLEUS.\n  ===============\n\n  1. JES2 exit :\n  --------------\n    Install the standard JES2 exit 4 (see at members JES2XIT@ and\n    JES2XIT$).\n1   02/05/90\n                                                     SMF EXITS  2/3.\n\n  2. ZAP to NUCLEUS :\n  -------------------\n    The following ZAP has been developed and applied successfully at\n    at J.R.C. installation.\n\n    MVS 3.8 SP 2.2.3 (MVS/XA) :\n\n      //ZAP220   JOB (........),'ZAP TO NUCLEUS',\n      //             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n      /*JOBPARM L=2\n      //*      ----------------------------\n      //*      APPLY ZAP TO 'SYS1.NUCLEUS'.\n      //*      ----------------------------\n      //*      HERE AFTER ---> VOL=SER=...... MUST BE COMPLETED.\n      //ZAPNUC  EXEC PGM=IMASPZAP\n      //SYSLIB    DD UNIT=DISK,VOL=SER=......,\n      //             DSN=SYS1.NUCLEUS,DISP=OLD\n      //SYSPRINT  DD SYSOUT=*\n      //SYSIN     DD *\n      *- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n      * ZAP TO CHECK IF SRB TIME LIMIT EXPIRED, IF SO SCHEDULE    *\n      * IEFUTL. REGISTER 9 IS BASE REGISTER, REGISTER 8 IS ASCB   *\n      * POINTER INTO WHICH WE USE A FREE WORD FOR THE SRB TIME    *\n      * LIMIT (I/O CONTROL).                                      *\n      * ASCB WORD : ASCBR15C (DISPLACEMENT X'15C')                *\n      *- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        NAME  IEANUC01  IEAVEJST         MVS/SP 2.2.3\n         VER  0010 40E4,E8F9,F0F1,F5F3   UY90153\n         VER  0114 55C0,8050,47B0,9554,980F,0998,0B0E\n         VER  0134 9801,8190,18C0,18D1,1EC2,1ED3,47C0,9148\n         VER  0144 5EC0,9440,BB0C,8190,4770,9138\n         VER  0150 9801,413C,1E02,1E13,47C0,9160,5E00,9440\n         VER  0160 9001,413C,D207,06C0,0470\n         VER  016A 98CD,8040,180C,181D,1E02,1E13,47C0,917E\n         VER  017A 5E00,9440,BBC0,8040,4770,916E\n         VER  0186 5850,4138,9500,5018,4780,9196,4D70,935A\n         VER  0196 5500,8050,47B0,9554,980F,0998,0B0E\n         VER  0238 9801,8190,18C0,18D1,1EC2,1ED3,47C0,924C\n         VER  0248 5EC0,9440,BB0C,8190,4770,923C\n         VER  0254 9801,413C,1E02,1E13,47C0,9264,5E00,9440\n         VER  0264 9001,413C,D207,06C0,0470\n         VER  026E 98CD,8040,180C,181D,1E02,1E13,47C0,9282\n         VER  027E 5E00,9440,BBC0,8040,4770,9272\n         VER  028A 5850,4138,9500,5018,4780,929A,4D70,935A\n         VER  029A 5500,8050,47B0,9554,980F,0998,0B0E\n         VER  022A 5940,807C,4770,9238,980F,0998,0B0E\n         REP  0230 9134           **** ---> GO TO IDENTICAL CODING.\n      ******* (USE BYPASSED CODING FOR J.R.C. CODING)\n         REP  011C 47F0,9238,0700   B ...PATCH AREA...\n         REP  019E 47F0,9238,0700   B ...PATCH AREA...\n         REP  0238 5810,815C        L R1,ASCBR15C SRB TIME LIMIT\n         REP  023C 1211             LTR R1,R1 SRB TIME CONTROL OFF ?\n         REP  023E 4780,92A2        BZ ...EXIT... YES, GO BACK\n         REP  0242 5510,80C8        CL R1,ASCBSRBT SRB TIME EXPIRED ?\n         REP  0246 47B0,92A2        BNL ...EXIT... NO, GO BACK\n         REP  024A D703,815C,815C   XC ASCBR15C,ASCBR15C OFF CONTROL\n         REP  0250 47F0,9554        B ...      SCHEDULE TIMER INTERFACE\n         REP  0254 0000,0000,0000,0000,0000,0000,0000,0000  CLEAR ALL\n         REP  0264 0000,0000,0000,0000,0000                   REMAINING\n         REP  026E 0000,0000,0000,0000,0000,0000,0000,0000      UNUSED\n         REP  027E 0000,0000,0000,0000,0000,0000                  CODE\n         REP  028A 0000,0000,0000,0000,0000,0000,0000,0000\n         REP  029A 0000,0000,0000,0000\n      /*\n1   02/05/90\n                                                     SMF EXITS  3/3.\n  IEALIMIT user region size :\n  ===========================\n\n    Also the following ZAP has applied at J.R.C. installation.\n      //IEALIMIT JOB (........),'ZAP TO NUCLEUS',\n      //             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n      /*JOBPARM L=2\n      //*      ----------------------------\n      //*      APPLY ZAP TO 'SYS1.NUCLEUS'.\n      //*      ----------------------------\n      //*      HERE AFTER ---> VOL=SER=...... MUST BE COMPLETED.\n      //ZAPNUC  EXEC PGM=IMASPZAP\n      //SYSLIB    DD UNIT=DISK,VOL=SER=......,\n      //             DSN=SYS1.NUCLEUS,DISP=OLD\n      //SYSPRINT  DD SYSOUT=*\n      //SYSIN     DD *\n      *- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n      * ZAP TO INCREASE THE REGION LIMIT BY 128K IN PLACE OF 64K. *\n      *- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n        NAME  IEANUC01  IEALIMIT    MVS/SP 2.2.3\n         VER  0000 47F0,F01C        B ...START...\n         VER  001C 90EF,D00C        STM R14,R15,12(R13)\n         VER  0020 902C,D01C        STM R2,R12,28(R13)\n         VER  0024 0590             BALR R9,0\n         VER  0026 1211             LTR R1,R1\n         VER  0028 4780,900A        BZ ...EXIT...\n         VER  002C 5E10,901A        AL R1,...INCR...\n         VER  0030 98EF,D00C        LM R14,R15,12(R13)\n         VER  0034 982C,D01C        LM R2,R12,28(R13)\n         VER  0038 07FE             BR R14\n         VER  0040 0001,0000        DC F'65536' ---> 64*1024\n         REP  0040 0002,0000        DC F'131072' ---> 128*1024\n      /*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STRTEST": {"ttr": 24073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\t\\x7f\\x00\\x88\\t\\x7f\\x13E\\x00\\xf6\\x00\\xf6\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-04-06T00:00:00", "modifydate": "1988-04-06T13:45:00", "lines": 246, "newlines": 246, "modlines": 0, "user": "SYSPAJA"}, "text": "TEST     TITLE 'STCLOK, TIME AND RTIME TEST PROGRAM.'\nTEST     START 0\n         SPACE 1\n        $DEFREG\nNRT      EQU   8                   REMAINING TIME CYCLES.\nNTT      EQU   9                   CPU + I/O CYCLES.\nNS       EQU   100                 NUMBER OF I/O BY CYCLE.\nWL       EQU   20                  USED DATA LENGTH.\nNSWL     EQU   NS*WL\n         EJECT\n        $XENT  BASE=R12\n         SR    R10,R10\n        GETMAIN R,LV=NSWL\n         ST    R1,AT\n         SPACE 1\n         AIF   ('&SYSPARM' NE 'NOGEN').O1S0\n        PRINT  NOGEN\n.O1S0    EJECT\n         LA    R2,1\n         LA    R3,NS\nCRL      CVD   R2,WORKD\n         UNPK  DATA(10),WORKD+2(6)\n         OI    DATA+9,C'0'\n         CVD   R3,WORKD\n         UNPK  DATA+10(10),WORKD+2(6)\n         OI    DATA+19,C'0'\n        $PUNCH DATA,PL,DDNM\n         LTR   R10,R15\n         BNZ   ERRU\n         LA    R2,1(R2)\n         BCT   R3,CRL\n        $UCLOSE DDNM\n         LA    R8,NRT\nBIGLOOP  LA    R9,NTT\n         XC    PTR,PTR\n         CP    LNCTR,=PL2'+50'\n         BNH   DONLY\n         BAL   R14,SKPPG\n         B     GTCLK\nDONLY   $PRINT DOUBLE\n         LTR   R10,R15\n         BNZ   EXIT\n         AP    LNCTR,=PL1'+2'\nGTCLK   CALL   STCLOK\nLOOP     L     R2,AT\nRDL     $READ  DATA,DDNM\n         LTR   R10,R15\n         BM    EOR\n         BNZ   ERRR\n         MVC   0(WL,R2),DATA\n         LA    R2,WL(R2)\n         B     RDL\nEOR      SR    R10,R10\n        $RCLOSE DDNM\n         L     R2,AT\n         TM    SWITCH,1\n         BO    ALT\n        $SORT  (R2),NS,WL,10,10\n         B     STD\nALT     $SORT  (R2),NS,WL,0,10\nSTD      XI    SWITCH,1\n         L     R2,AT\n         LA    R3,NS\nPHL     $PUNCH (R2),PL,DDNM\n         LTR   R10,R15\n         BNZ   ERRU\n         LA    R2,WL(R2)\n         BCT   R3,PHL\n        $UCLOSE DDNM\n        CALL   TIME,(TCPU,TSRB),VL\n         MVI   WHAT,0\n         BAL   R7,EDIT\n         BCT   R9,LOOP\n         OC    PTR,PTR\n         BZ    NPR\n         BAL   R7,EDITF\nNPR     CALL   RTIME,(TCPU,TSRB),VL\n         MVI   WHAT,1\n         BAL   R7,EDIT\n         BCT   R8,BIGLOOP\n         B     EXIT\n         SPACE 1\nEDIT     LA    R6,LINE+5\n         AL    R6,PTR\n         CLI   WHAT,0\n         BNE   EDIT1\n         MVC   0(3,R6),=CL3'T -'\n         B     EDIT2\nEDIT1    MVC   0(3,R6),=CL3'R :'\nEDIT2    L     R3,TCPU\n         BAL   R14,ADJUST\n         MVC   5(12,R6),ACC\n         L     R3,TSRB\n         BAL   R14,ADJUST\n         MVC   20(12,R6),ACC\n         LA    R6,DSPL+5\n         AL    R6,PTR\n         MVC   7(2,R6),=CL2'X'''\n         UNPK  9(9,R6),TCPU(L'TCPU+1)\n         TR    9(8,R6),TRTAB-X'F0'\n         MVI   17(R6),C''''\n         MVC   22(2,R6),=CL2'X'''\n         UNPK  24(9,R6),TSRB(L'TSRB+1)\n         TR    24(8,R6),TRTAB-X'F0'\n         MVI   32(R6),C''''\n         CLI   WHAT,0\n         BNE   EDITF\n         L     R6,PTR\n         CL    R6,=F'70'\n         BE    EDITF\n         AL    R6,=F'35'\n         ST    R6,PTR\n         BR    R7\nEDITF    CP    LNCTR,=PL2'+50'\n         BNH   *+L'*+4\n         BAL   R14,SKPPG\n        $PRINT LINE\n         LTR   R10,R15\n         BNZ   EXIT\n        $PRINT DSPL\n         LTR   R10,R15\n         BNZ   EXIT\n         AP    LNCTR,=PL1'+2'\n         XC    PTR,PTR\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   DSPL+1(L'DSPL-1),DSPL\n         BR    R7\n         SPACE 1\nADJUST   MVC   ACC,=PL12'+0'\n         ST    R3,WORK\n         SLDL  R2,1\n         SR    R2,R2\n         SLDL  R2,7\n         LR    R1,R2\n         SR    R2,R2\n         LA    R15,64\nADJUST1  CLR   R1,R15\n         BL    ADJUST2\n         BE    ADJUST3\n         SLDL  R2,4\n         BCT   R1,ADJUST1\n         B     EXIT\nADJUST2  SRL   R3,4\n         LA    R1,1(R1)\n         B     ADJUST1\nADJUST3  LTR   R2,R2\n         BZ    ADJUST4\n         CVD   R2,WORKD\n         MVC   ACC(4),WORKD+4\n         NI    ACC+3,X'F0'\nADJUST4  LA    R15,HDFCT\n         LA    R0,4\nADJUST5  SR    R2,R2\n         SLDL  R2,4\n         LTR   R2,R2\n         BZ    ADJUST7\nADJUST6  AP    ACC+L'ACC-L'HDFCT(L'HDFCT),0(L'HDFCT,R15)\n         BCT   R2,ADJUST6\nADJUST7  LA    R15,L'HDFCT(R15)\n         BCT   R0,ADJUST5\n         NI    ACC+5,X'F0'\n         NI    ACC+11,X'0F'\n         OC    ACC+5(1),ACC+11\n         AP    ACC(6),=PL1'+5'\n         MVC   WORKD,=PL8'+0'\n         MVO   WORKD,ACC(5)\n         MVC   ACC,=XL12'40402020202021206B202020'\n         ED    ACC,WORKD+3\n         TM    WORK,X'80'\n         BZR   R14\n         MVI   ACC+1,C'-'\n         BR    R14\n         SPACE 1\nSKPPG    ST    R14,SVR14\n         AP    PGCTR,=PL1'+1'\n         MVC   TITL1P,=XL6'402020202120'\n         ED    TITL1P,PGCTR\n        $PRINT TITL1\n         LTR   R10,R15\n         BNZ   EXIT\n        $PRINT TITL2\n         LTR   R10,R15\n         BNZ   EXIT\n        $PRINT DOUBLE\n         LTR   R10,R15\n         BNZ   EXIT\n         ZAP   LNCTR,=PL1'+2'\n         L     R14,SVR14\n         BR    R14\n         SPACE 1\nERRR    $RCLOSE DDNM\n         B     EXIT\nERRU    $UCLOSE DDNM\nEXIT    $PCLOSE\n         SPACE 1\n         AIF   ('&SYSPARM' NE 'NOGEN').O2S0\n        PRINT  GEN\n.O2S0    SPACE 1\n        $XRET  CC=(R10)\n         EJECT\n*        HEXADECIMAL TO DECIMAL FRACTION CONVERSION TABLE.\n*        -------------------------------------------------\n         SPACE 1\nHDFCT    DC    PL9'+0625000000000000'\n         DC    PL9'+0039062500000000'\n         DC    PL9'+0002441406250000'\n         DC    PL9'+0000152587890625'\n         SPACE 1\n*        CONSTANTS AND WORK AREAS.\n*        -------------------------\n         SPACE 1\nWORKD    DC    D'0'\nWORK     DC    F'0'\nSVR14    DC    F'0'\nAT       DC    A(*-*)\nPTR      DC    F'0'\nPL       DC    A(WL)\nTCPU     DC    F'0'\nTSRB     DC    F'0'\nACC      DC    PL12'+0'\nDDNM     DC    CL8'SYSTEST'\nTRTAB    DC    CL16'0123456789ABCDEF'\nLNCTR    DC    PL2'+99'\nPGCTR    DC    PL3'+0'\n         SPACE 1\nSWITCH   DC    XL1'0'\nWHAT     DC    XL1'0'\n         DC    AL1(LTITL1)\nTITL1    DC    C'1          STCLOK, TIME AND RTIME TEST.'\n         DC    CL58' ',C'PAGE'\nTITL1P   DC    CL6' ',C'.'\nLTITL1   EQU   *-TITL1\n         DC    AL1(L'TITL2)\nTITL2    DC    C'           ----------------------------'\n         DC    AL1(L'DOUBLE)\nDOUBLE   DC    C'0 '\n         DC    AL1(L'DATA)\nDATA     DC    CL80' '\n         DC    AL1(L'LINE)\nLINE     DC    CL121' '\n         DC    AL1(L'DSPL)\nDSPL     DC    CL121' '\n         EJECT\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STRTEST$": {"ttr": 24078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SYSPAJA"}, "text": "//STRTEST  JOB (........),'INSTALL -STRTEST -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                RTIME     STCLOK    TXPRINT   TXPUNCH   TXREAD     *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* HOW TO EXECUTE 'STRTEST' :                                        *\n//*   //...      JOB ...                                              *\n//*   //XEQ     EXEC PGM=STRTEST                                      *\n//*   //STEPLIB   DD DSN=->.TARGET.LINKLIB,DISP=SHR       (IF NEEDED) *\n//*   //SYSTEST   DD UNIT=SYSDA,SPACE=(CYL,(2,1)),DSN=&TESTSTR,       *\n//*   //             DISP=(,DELETE),DCB=(RECFM=F,BLKSIZE=80,LRECL=80) *\n//*   //SYSPRINT  DD SYSOUT=*                                         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,OPT=',SYSPARM(NOGEN)',MBR=STRTEST\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,PUNCH,READ,RTIME,STCLOK)\n  ENTRY   TEST\n  NAME    STRTEST(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIEFUJV": {"ttr": 24321, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08_\\x00\\x90\\x08_\\x15Q\\x00\\xd8\\x00\\xd8\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-26T00:00:00", "modifydate": "1990-03-26T15:51:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "SYSPAJA"}, "text": "TUJV     TITLE 'TEST IEFUJV SMF EXIT JCL SCAN.'\nTUJV     START 0\n         SPACE 1\n        PRINT  NOGEN\n$MAXDA   EQU   253       MAX. NO. OF SPOOL VOLUMES ($HASPEQU) / $JCT\nIFGRPL   EQU   0         MVS ACB REQUEST PARAMETER LIST / $BUFFER\n        $BUFFER\n        $JCT\nEUJCTSZ  EQU   JCTEND-JCTSTART\nTUJV     CSECT                     RESTORE ORIGINAL CSECT.\n        $CEPA\nCEPALGTH EQU   CEPAUCOM+L'CEPAUCOM-CEPA\n        PRINT  GEN\n         SPACE 1\n        $DEFREG\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* PURPOSE : JOB TO TEST THE JCL STATEMENTS SCAN PART OF THE IEFUJV    *\n* --------- SMF EXIT BEFORE INCLUSION IN THE SYSTEM.                  *\n*                                                                     *\n* HOW TO CALL THE PROGRAM :                                           *\n* -------------------------                                           *\n*   //TXEQ    EXEC PGM=TUJV                                           *\n*   //SYSACC    DD DSN=...ACC.INF.DATA-SET...,DISP=SHR                *\n*   //SYSPRINT  DD SYSOUT=A                                           *\n*   //SYSIN     DD *                                                  *\n*    ...                                                              *\n*    ... JCL STATEMENTS ...                                           *\n*    ...                                                              *\n*   /*                                                                *\n*                                                                     *\n* JCL STATEMENTS INPUT DATA :                                         *\n* ---------------------------                                         *\n*   ALL NORMAL JCL STATEMENTS ARE ACCEPTED AS INPUT TO THE PROGRAM,   *\n*   WITH THE MODIFICATION OF THE CARD COLUMN 1 WHICH MUST REFLECT     *\n*   THE TYPE OF JCL STATEMENT BEING PASSED TO IEFUJV EXIT. THIS       *\n*   INDICATOR MUST BE AS FOLLOWS :                                    *\n*        0 - INDICATES A NULL STATEMENT                               *\n*        1 - INDICATES A JOB STATEMENT (AND HIS CONTINUATION)         *\n*        2 - INDICATES AN EXEC STATEMENT (AND HIS CONTINUATION)       *\n*        4 - INDICATES A DD STATEMENT (AND HIS CONTINUATION)          *\n*        8 - INDICATES A PROC STATEMENT (AND HIS CONTINUATION)        *\n*        C - INDICATES A JCL COMMENT CARD (5785-GAK / CJS)            *\n*   A SPECIAL CARD WITH 'Z/ ' IN COLUMNS 1-3 IS USED TO RESET THE     *\n*   WORK AREAS OF THE PROGRAM, IT IS NORMALLY PLACED BETWEEN JOBS.    *\n*   ALL OTHER CARDS ARE SKIPPED.                                      *\n*                                                                     *\n* AUTHOR :     MOINIL P.A.                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* NOTE : THIS PROGRAM IS NOT A CLEVER ONE, BUT IT IS ENOUGH TO TEST   *\n* ------ THE JCL SCAN PART OF IEFUJV. SEE PROGRAM 'UJVT' TO TEST AND  *\n*        GET STATISTICS ON THE COMPUTATIONS PART OF IEFUJV.           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n        $XENT  BASE=R10\n         L     R15,=V(SUJVTA)\n         BASR  R14,R15\n         LTR   R15,R15\n         BZ    *+L'*+8\n         LA    R9,256\n         B     LEAVE\n         L     R2,=V(UJVTADDR)\n         ST    R1,0(R2)\nINIT     XC    NELLIST(EUNELSZ),NELLIST      ARRAYS INITIALIZATION\n         LA    R2,EUJCT\n         LR    R6,R2\n         LA    R3,EUJCTSZ\n         LA    R4,*\n         XR    R5,R5\n         MVCL  R2,R4\n         USING JCTSTART,R6\n         LA    R7,CEPAAREA\n         USING CEPA,R7\n         XC    CEPA(CEPALGTH),CEPA\n         MVC   CEPAJOBN(8),=CL8'TIEFUJV '    CEPA JOB NAME\n         MVC   CEPASID(4),=CL4'SYSB'\n         MVC   CEPAUSER(8),=CL8' '\n         MVI   CEPAJC,C'9'\n         LA    R1,JCTJMRJN\n         ST    R1,NELJMR\n         OI    NELOPSWT,NELSMF\n         OI    NELPARMO,NELPGMN+NELACCT\n         MVC   NELJPRTY(2),=CL2'07'\n         MVC   NELTIME(6),=CL6'000500'\n         MVC   NELREG(3),=CL3'800'\n         MVI   NELCOMDS,C'3'\n         MVI   NELLABEL,C'1'\n         MVC   JCTID(4),=CL4'JCT '\n         MVC   JCTUSER0,=F'10'     I/O FROM /*JOBPARM\n         MVI   JCTMCLAS,C'A'       MSGCLASS FROM JOB CARD\n         MVI   JCTJCLAS,C'A'       CLASS FROM JOB CARD\n         MVI   JCTIPRIO,10         INITIAL JOB SEL. PRIORITY\n         MVC   JCTETIME(4),=F'300' TIME IN SEC. FROM JOB CARD.\n         MVC   JCTESTLN(4),=F'20000'    LINES FROM /*JOBPARM\n         MVC   JCTJMRJN(8),=CL8'TIEFUJV '    JMR JOB NAME\n         DROP  R6,R7\n         MVC   MSG(3),=CL8' '\n         EJECT\nREAD    $READ  CARD\n         LTR   R15,R15\n         BM    END\n         BP    ER\n         CLC   CARD(3),=C'Z/ '\n         BNE   SCOM\n         MVI   IND,16\n         BAS   R8,EXUJV\n         MVI   MSG,C'1'\n         MVI   MSG+2,C'-'\n         BAS   R8,PRMSG\n         BAS   R8,PRSNP\n         B     INIT\nSCOM     CLC   CARD(3),=C'C/*'\n         BNE   SJCL\n         MVI   IND,128\n         B     SETCD\nSJCL     CLI   CARD+1,C'/'\n         BNE   READ\n         LA    R1,SIND\n         LA    R0,L'SIND\n         CLC   CARD(1),0(R1)\n         BE    *+L'*+12\n         LA    R1,1(R1)\n         BCT   R0,*-14\n         B     READ\n         MVC   IND(1),CARD\n         NI    IND,X'0F'\nSETCD    MVI   CARD,C'/'\n         MVI   LINE,C'1'\n         MVI   LINE+2,C'+'\n         BAS   R8,PRLNE\n         BAS   R8,EXUJV\n         BAS   R8,PRMSG\n         MVI   LINE,C' '\n         MVI   LINE+2,C' '\n         BAS   R8,PRLNE\n         BAS   R8,PRSNP\n         B     READ\n         EJECT\nEP       LA    R9,4\n         B     EXIT\nER       LA    R9,8\n         B     EXIT\nES       LA    R9,12\n         B     EXIT\nEND      CLI   IND,16\n         BE    OK\n         MVI   IND,16\n         BAS   R8,EXUJV\n         MVI   MSG,C'1'\n         MVI   MSG+2,C'-'\n         BAS   R8,PRMSG\n         BAS   R8,PRSNP\nOK       XR    R9,R9\nEXIT     L     R15,=V(DUJVTA)\n         BASR  R14,R15\n        $RCLOSE\n        $PCLOSE\nLEAVE   $XRET  CC=(R9)\n         EJECT\nPRLNE    LA    R2,LINE             PRINT LINE.\n         B     EXPRT\nPRMSG    LA    R2,MSG              PRINT MESSAGE.\nEXPRT   $PRINT (R2)\n         LTR   R15,R15\n         BNZ   EP\n         BR    R8\n         SPACE 1\nPRSNP   $SNAP  STSNAP,LSNAP        SNAP WORK AREAS.\n         LTR   R15,R15\n         BNZ   ES\n         BR    R8\n         SPACE 1\nEXUJV   CALL   IEFUJV,(CEPAAREA,CARD,IND,NELPARMO),VL\n         STC   R15,MSG+L'MSG-2\n         OI    MSG+L'MSG-2,C'0'\n         BR    R8\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nLSNAP    DC    A(SNL)\nSIND     DC    C'01248'            VALID INDICATORS.\n         SPACE 1\n        CNOP   6,8\n         SPACE 1\nIND      DC    XL1'0'\n         DC    AL1(L'MSG)\nMSG      DC    C'    RC =  .'\n         DC    AL1(L'LINE+L'CARD)\nLINE     DC    CL4' '\nSTSNAP   EQU   *\nCARD     DC    CL80' '             JCL STATEMENT. - - - - - - - - - - -\n         SPACE 1\n        CNOP   0,8\n         DC    CL8'-CEPA-->'       ID.\nCEPAAREA DC    (CEPALGTH)X'0'      COMMON EXIT PARAMETER LIST.  - - - -\n         SPACE 1\n        CNOP   0,8                 INTERPRETER ENTRANCE LIST. - - - - -\n         DC    CL8'-NEL--->'       ID.\n        IEFNEL SUBCOM=C\nEUNELSZ  EQU   *-NELLIST\n         SPACE 1\n        CNOP   0,8                 JOB CONTROL TABLE (JES2).  - - - - -\n         DC    CL8'-JCT--->'       ID.\nEUJCT    DC    (EUJCTSZ)X'0'\n         SPACE 1\n        CNOP   0,8\nSNL      EQU   *-STSNAP\n         SPACE 1\n        LTORG\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIEFUJV$": {"ttr": 24326, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//TIEFUJV  JOB (........),'INSTALL -TIEFUJV -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                SUJVTA    TXPRINT   TXREAD    TXSNAP               *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS4,MBR=TIEFUJV\n//ASV     EXEC PAJ2AS4,OPT=',SYSPARM(TEST)',MBR=IEFUJV\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,READ,SNAP,SUJVTA)\n  ENTRY   TUJV\n  NAME    TUJV(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIEFUJV@": {"ttr": 24328, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x12/\\x00\\x90\\x12/\\x14\\x04\\x00G\\x00G\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-05-02T00:00:00", "modifydate": "1990-05-02T14:04:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "SYSPAJA"}, "text": "1   06/04/88\n                                                      TIEFUJV   1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *    TEST IEFUJV SMF EXIT JCL SCAN    * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose : Job to test the JCL statements scan part of the IEFUJV\n  --------- SMF exit before inclusion in the system.\n\n  How to call the program :\n  -------------------------\n    //TXEQ    EXEC PGM=TUJV\n    //SYSACC    DD DSN=...Acc.Inf.data-set...,DISP=SHR\n    //SYSPRINT  DD SYSOUT=A\n    //SYSIN     DD *\n     ...\n     ... JCL statements ...\n     ...\n    /*\n\n  JCL statements input data :\n  ---------------------------\n    All normal JCL statements are accepted as input to the program,\n    with the modification of the card column 1 which must reflect\n    the type of JCL statement being passed to IEFUJV exit. This\n    indicator must be as follows :\n         0 - indicates a NULL statement\n         1 - indicates a JOB statement (and his continuation)\n         2 - indicates an EXEC statement (and his continuation)\n         4 - indicates a DD statement (and his continuation)\n         8 - indicates a PROC statement (and his continuation)\n         C - indicates a JCL comment card (5785-GAK / CJS)\n    A special card with 'Z/ ' in columns 1-3 is used to reset the\n    work areas of the program, it is normally placed betwwen jobs.\n    All other cards are skipped.\n\n  Note : This program is not a clever one, but it is enough to test\n  ------ the JCL scan part of IEFUJV. See program 'UJVT' to test and\n         get statistics on the computations part of IEFUJV.\n1   24/03/87\n                                                      TIEFUJV   2/2.\n\n  Short example of use :\n  ----------------------\n\n  //...      JOB ...\n  /*JOBPARM L=5\n  //TXEQ    EXEC PGM=TUJV\n  //STEPLIB   DD DSN=...target.linklib...,DISP=SHR\n  //SYSACC    DD DSN=...Acc.Inf.data-set...,DISP=SHR\n  //SYSPRINT  DD SYSOUT=A\n  //SYSIN     DD *\n  1/TESTONE  JOB (01230123),'TEST JOB NO. ONE',\n  1/             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1200K,TYPRUN=HOLD,\n  1/             TIME=5,NOTIFY=USERID,USER=USERID,PASSWORD=(XXXXX)\n  C/*NET ID=MYCHAIN,HC=1,RL=NEXTONE,AB=F\n  2/T1      EXEC PGM=MYPROG,COND=(4,LT)\n  4/T2        DD SYSOUT=A\n  8/T3      PROC MYPROC,P1=,P2='TEST,DUMMY'\n  4/TSC       DD DSN=ADADBA.RUNV4.CNTL(XXXX),DISP=SHR\n  0/\n  Z/\n  1/TESTTWO  JOB 32103210,'TEST JOB NO. TWO',\n  1/             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,\n  1/             TIME=2,NOTIFY=USERID,USER=USERID\n  2/T1      EXEC PGM=IEFBR14\n  0/\n  /*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TTCBRB": {"ttr": 24331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x931O\\x00\\x931O\\x11Y\\x02\\xf8\\x02\\xf8\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-10T00:00:00", "modifydate": "1993-11-10T11:59:00", "lines": 760, "newlines": 760, "modlines": 0, "user": "SYSPAJA"}, "text": "TTRL     TITLE '-- TRACE ADDRESS SPACE TCB-RB''S CHAIN --'\n*---------------------------------------------------------------------*\n*                                                                     *\n* Purpose :    TSO command, program or routine to list the current    *\n*              Address Space TCB-RB's chain.                          *\n*              Note : normally the list is outputed to the terminal,  *\n*                     but, when the TSO \"PUTLINE\" function is not     *\n*                     available, a \"SYSOUT\" is dynamically allocated. *\n*                     If a pre-allocated \"TTRLLIST\" FILE or DD-card   *\n*                     is present, then, the list is outputed to it.   *\n*              Test : pre-allocate a \"TTRLTEST\" FILE or DD-card to    *\n*                     get also internal tables trace list.            *\n*                                                                     *\n* Syntax :     TSO command       = TTCBRB                             *\n*              BATCH execution   = //LSTCB   EXEC PGM=TTCBRB          *\n*              In Assembler, LINK or CALL as program or routine with  *\n*              register 1 zero   = XR    R1,R1                        *\n*                                  LINK  EP=TTCBRB or CALL  TTCBRB    *\n*              Last but not least, in ISPF Edit = TRAP TTCBRB         *\n*                                  (set the list in the Edit data)    *\n*                                                                     *\n* Author :     MOINIL P.A.                                            *\n*              Computing Centre (TP 361)                              *\n*              J.R.C. - Ispra Establishment                           *\n*              21020 Ispra (VA), Italy                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n*------- MISCELLANEOUS DEFINITIONS\n         SPACE 1\n&MXT     SETA  500                 ESTIMATED MAXIMUM NUMBER OF TCB'S\n&MXR     SETA  500                 ESTIMATED MAXIMUM NUMBER OF RB'S\n&SHC     SETC  'X'                 SYSOUT HOLD CLASS\n         EJECT\nTTCBRB   START 0\n         SPACE 1\n         PRINT OFF\nLVTCBA   EQU   ((((&MXT+1)*LVTI)+7)/8)*8 LENGTH TCB'S WORK ADDRESSES\nLVTCBI   EQU   ((((&MXT+1)*LVTB)+7)/8)*8 LENGTH TCB'S INFORMATION\nLVTRBN   EQU   ((((&MXR+1)*LVTR)+7)/8)*8 LENGTH RB'S INFORMATION\nLVTALL   EQU   LVTCBA+LVTCBI+LVTRBN LENGTH OF VECTOR WORK-AREA\n         PRINT ON\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R11,R12)\n         XR    R10,R10\n         LR    R2,R1               GET ENTRY REGISTER\n        EXTRACT ATIOT,'S',FIELDS=(TIOT,TSO,PSB)\n         ICM   R1,B'1111',APSCB    PSCB ADDRESS, TSO RUNNING ?\n         BZ    SRDD                NO, BATCH\n         LTR   R2,R2               YES, TRY CPPL ADDRESSABILITY?\n         BZ    TSTSO               NONE (ZERO = CALL OR LINK)\n         TM    0(R2),X'80'         R1 AS JCL EXEC PROGRAM?\n         BO    TSTSO               YES\n         USING CPPL,R2\n         USING PSCB,R1\n         CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS ?\n         BNE   *+L'*+10            NO\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS ?\n         BE    OK                  YES, TSO COMMAND\n         LR    R1,R2\n         USING IKJEBECA,R1\n         L     R2,CAPTTMP          CPPL ADDRESS\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS ?\n         BE    OK                  YES, TSO SUB-COMMAND\nTSTSO    L     R1,ATSO             TSO-FLAG ADDRESS\n         TM    0(R1),X'80'\n         BZ    SRDD\n         OI    SWITCH,SWFOR        SAY TSO FOREGROUND\n         B     SRDD\nOK       ST    R2,CPPLADDR         RETAIN CPPL ADDRESS\n         DROP  R2\nSRDD     L     R2,ATIOT            SEARCH DD\n         USING TIODSECT,R2\nSRDD1    CLC   =F'0',TIOELNGH\n         BE    SRDD2\n         CLC   DDNML,TIOEDDNM\n         BNE   *+L'*+8\n         OI    SWITCH,SWLIST\n         B     *+L'*+14\n         CLC   DDNMT,TIOEDDNM\n         BNE   *+L'*+4\n         OI    SWITCH,SWTEST\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     SRDD1\n         DROP  R2\nSRDD2    TM    SWITCH,SWLIST+SWTEST\n         BO    GTDTTM\n         BZ    *+L'*+18\n         TM    SWITCH,SWLIST\n         BO    GTDTTM\n         MVC   DDNML,DDNMT\n         B     GTDTTM\n         OC    CPPLADDR,CPPLADDR   TSO PUTLINE AVAILABLE?\n         BZ    *+L'*+8             NO\n         OI    SWITCH,SWPTL        YES, USE IT\n         B     GTWAS\n         TM    SWITCH,SWFOR        HOW RUNNING?\n         BO    *+L'*+12            TSO FOREGROUND\n         LA    R1,WDTUP1           TSO BACKGROUND OR BATCH\n         ST    R1,WDSTXTPP         ALLOCATE SYSOUT=*\n         B     *+L'*+8\n         LA    R1,WDTUP2           TSO FOREGROUND\n         ST    R1,WDSTXTPP         ALLOCATE SYSOUT=X\n         LA    R1,WD               REQUEST BLOCK ADDRESS\n        DYNALLOC\n         LTR   R15,R15             DYNAMIC ALLOCATION OK?\n         BZ    DYNOK               YES\n         CVD   R15,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   MSGDAEC(L'MSGDAEC),WORKD\n         UNPK  MSGDAER(2*L'WDSERROR+1),WDSERROR(L'WDSERROR+1)\n         TR    MSGDAER(2*L'WDSERROR),TRHEX-C'0'\n         MVI   MSGDAER+2*L'WDSERROR,C' '\n         UNPK  MSGDAEI(2*L'WDSINFO+1),WDSINFO(L'WDSINFO+1)\n         TR    MSGDAEI(2*L'WDSINFO),TRHEX-C'0'\n         MVI   MSGDAEI+2*L'WDSINFO,C' '\n        WTO    MF=(E,MSGDAE)       DIAGNOSE ERROR\n         LA    R10,99              SET RC=99\n         B     LEAVE\nDYNOK    TM    SWITCH,SWFOR        HOW RUNNING?\n         BZ    STDDN               TSO BACKGROUND OR BATCH\n        WTO    MF=(E,MSGASM)       ADVICE SESSION ALLOCATION DONE\nSTDDN    MVC   DDNML,WDRTDDN\n         B     GTDTTM\nGTDTTM   MVC   DDNME,DDNML\n        $GFDATE TLNED,WORKD\n         LTR   R10,R15\n         BZ    STTME\n         MVC   LINE(29),=CL29'0 GFDATE routine error : CC ='\n         CVD   R10,WORKD\n         MVC   LINE+29(4),=XL4'40202120'\n         ED    LINE+29(4),WORKD+L'WORKD-2\n         MVI   LINE+33,C'.'\n         B     SMERR\nSTTME    MVI   TLNED+L'TLNED-1,C'/'\n         MVC   TLNEH(2),WORKD\n         MVC   TLNEH+3(2),WORKD+2\n         MVC   TLNEH+6(2),WORKD+4\nGTWAS    L     R0,=A(LVTALL)       GET VECTORS WORK-AREAS\n        GETMAIN RC,LV=(0)\n         LTR   R15,R15\n         BZ    GTMNOK\n         MVC   LINE(14),=CL14'0 GETMAIN RC ='\n         CVD   R15,WORKD\n         MVC   LINE+14(4),=XL4'40202120'\n         ED    LINE+14(4),WORKD+L'WORKD-2\n         MVC   LINE+19(30),=CL30': storage not available (size='\n         L     R0,=A(LVTALL)\n         ST    R0,WORKD\n         UNPK  LINE+49(9),WORKD(5)\n         TR    LINE+49(8),TRHEX-C'0'\n         MVC   LINE+57(2),=CL2').'\n         B     SMERR\nGTMNOK   ST    R1,AVTWAS\n         LR    R5,R1\n         LR    R0,R1\n         L     R1,=A(LVTALL)\n         BASR  R14,0\n         XR    R15,R15\n         MVCL  R0,R14\n         USING VTI,R5\n         LR    R6,R5\n         AL    R6,=A(LVTCBA)\n         ST    R6,AVTCBS\n         USING VTB,R6\n         LR    R14,R6\n         AL    R14,=A(LVTCBI)\n         ST    R14,AVTRBS\n         LR    R15,R14\n         AL    R15,=A(LVTRBN)\n         XR    R7,R7\n         USING PSA,R0\n         L     R2,PSAAOLD          ASCB ADDRESS\n         DROP  R0\n         USING ASCB,R2\n         MVC   WORKD+L'WORKD-3(L'ASCBASID),ASCBASID AS-ID NUMBER\n         MVI   WORKD+L'WORKD-1,X'0F'\n         UNPK  WORKD(5),WORKD+L'WORKD-3(3)\n         TR    WORKD(4),TRHEX-C'0'\n         MVC   HEADID(L'HEADID),WORKD\n         L     R15,ASCBJBNI\n         LTR   R15,R15\n         BNZ   *+L'*+10\n         L     R15,ASCBJBNS\n         LTR   R15,R15\n         BZ    *+L'*+6\n         MVC   HEADNM(L'HEADNM),0(R15) GET CURRENT AS-NAME\n         L     R3,ASCBASXB         ASXB ADDRESS\n         DROP  R2\n         USING ASXB,R3\n         MVC   MAXTCBS,ASXBTCBS    NUMBER OF TCB'S\n         CLC   MAXTCBS,=Y(&MXT)\n         BNH   STCB\n         MVC   LINE+30(3),=CL3'TCB'\n         MVC   LINE+33(24),=CL24'''s overflow (MXT value).'\nMXERR    MVC   LINE(29),=CL29'0 Estimated maximum number of'\nSMERR    BAS   R9,STTL             SET TITLE\n         DC    AL4(ERRM)\n         BAS   R9,PRTL             PRINT LINE\n         LR    R10,R15\n         B     QUIT\nSTCB     L     R2,ASXBFTCB         POINTER TO FIRST TCB ON TCB QUEUE\n         DROP  R3\n         ST    R6,VTIV\n         USING TCB,R2\n         BAS   R9,MTCB\n         XR    R8,R8\nSTCB1    ICM   R2,B'1111',TCBLTC\n         BZ    STCB3\n         AL    R5,=A(LVTI)\n         AL    R7,=F'1'\nSTCB2    ST    R6,VTIV\n         LR    R8,R6\n         BAS   R9,MTCB\n         B     STCB1\nSTCB3    LTR   R8,R8\n         BZ    TTRC\n         ICM   R2,B'1111',TCBNTC\n         BZ    *+L'*+8\n         ST    R8,VTNTC\n         B     STCB2\n         SL    R5,=A(LVTI)\n         ICM   R1,B'1111',VTIV\n         BZ    TTRC\n         ST    R8,VTBQ-VTB(R1)\n         LR    R8,R1\n         L     R2,VTBT-VTB(R1)\n         SL    R7,=F'1'\n         B     STCB3\n         DROP  R5\nMTCB     ST    R7,VTBH             R9 = LINK REGISTER\n         ST    R2,VTBT\n         MVC   VTBN,TCBNTC\n         MVC   VTBO,TCBOTC\n         L     R3,TCBLTC\n         ST    R3,VTBL\n         LTR   R3,R3\n         BNZ   *+L'*+12\n         MVC   VTBQ,VTNTC\n         XC    VTNTC,VTNTC\n         USING VTR,R14\n         L     R3,TCBRBP           RB FOR EXECUTING PROGRAM\n         USING RBBASIC,R3\nMTCB1    CLI   RBSTAB1,RBFTPRB     PRB?\n         BE    MTCB2               YES, PROCESS IT\n         TM    RBSTAB1,RBFTSVRB    SVRB?\n         BNO   *+L'*+10            NO\n         MVC   VTRN,=CL8' => SVRB'\n         B     MTCB3\n         TM    RBSTAB1,RBFTTIRB    TIRB?\n         BNO   *+L'*+10            NO\n         MVC   VTRN,=CL8' => TIRB'\n         B     MTCB3\n         TM    RBSTAB1,RBFTIRB     IRB?\n         BZ    *+L'*+10            NO\n         MVC   VTRN,=CL8' => IRB '\n         B     MTCB3\n         TM    RBSTAB1,RBFTSIRB    SIRB?\n         BZ    *+L'*+10            NO\n         MVC   VTRN,=CL8' => SIRB'\n         B     MTCB3\n         MVC   VTRN,=CL8'what RB?'\n         B     MTCB3\nMTCB2    TM    RBCDFLGS,RBCDSYNC   SYNCH RB?\n         BZ    *+L'*+10            NO, SKIP\n         MVC   VTRN,=CL8'SYNCH-RB'\n         B     MTCB3\n         L     R4,RBCDE            CDE POINTER\n         USING CDENTRY,R4\n         MVC   VTRN,CDNAME\nMTCB3    ST    R3,VTRA             RB ADDRESS\n         NI    VTRA,255-X'80'\n         TM    RBSTAB1,RBWAITP\n         BZ    *+L'*+4\n         OI    VTRA,X'80'          AN ECB POINTS ON THIS RB\n         TM    RBSTAB2,RBTCBNXT\n         BO    MTCB4\n         XR    R0,R0\n         ICM   R0,B'0111',RBLINKB\n         BZ    MTCB4\n         CLR   R0,R2\n         BE    MTCB4\n         LR    R1,R14\n         AL    R14,=A(LVTR)\n         CLR   R14,R15\n         BNL   MXROV\n         ST    R1,VTRL\n         LR    R3,R0\n         B     MTCB1\nMTCB4    ST    R14,VTBR\n         DROP  R2,R3,R4,R6,R14\n         AL    R14,=A(LVTR)\n         CLR   R14,R15\n         BNL   MXROV\n         AL    R6,=A(LVTB)\n         BR    R9                  RETURN\nMXROV    MVC   LINE+30(2),=CL2'RB'\n         MVC   LINE+32(24),=CL24'''s overflow (MXT value).'\n         MVI   LINE+47,C'R'\n         B     MXERR\n         SPACE 1\nTTRC     TM    SWITCH,SWTEST       \"TEST\" REQUESTED?\n         BZ    LTCB                NO\n         MVC   DDNME,DDNMT         YES\n         MVC   HTRCID,HEADID\n         MVC   HTRCNM,HEADNM\n         BAS   R9,STTL             SET TITLE\n         DC    AL4(HTRC)\n         L     R2,AVTCBS\n         USING VTB,R2\n         LA    R7,LINE+2\n         USING LNE,R7\n         LR    R0,R2\n         LA    R1,LNET\n         LA    R15,=CL4'\"Q\"='\n         BAS   R14,PADL\n         L     R0,=A(LVTB)\n         LA    R1,LNEN\n         LA    R15,=CL4'L''Q='\n         BAS   R14,PADL\n         L     R0,AVTRBS\n         LA    R1,LNEO\n         LA    R15,=CL4'\"R\"='\n         BAS   R14,PADL\n         L     R0,=A(LVTR)\n         LA    R1,LNEL\n         LA    R15,=CL4'L''R='\n         BAS   R14,PADL\n         BAS   R9,PRTL             PRINT LINE\n         BAS   R9,PRTL             LINE SPACE\nTTRC1    LA    R7,LINE+2\n         LA    R0,LLNE             APPLY LEVEL-SHIFT\n         CL    R0,VTBH\n         BL    *+L'*+4\n         L     R0,VTBH\n         ALR   R7,R0\n         ALR   R7,R0\n         L     R0,VTBT             SET TCB LINE(S)\n         LA    R1,LNET\n         LA    R15,=CL4'TCB='\n         BAS   R14,PADL\n         L     R0,VTBN\n         LA    R1,LNEN\n         LA    R15,=CL4'NTC='\n         BAS   R14,PADL\n         L     R0,VTBO\n         LA    R1,LNEO\n         LA    R15,=CL4'OTC='\n         BAS   R14,PADL\n         L     R0,VTBL\n         LA    R1,LNEL\n         LA    R15,=CL4'LTC='\n         BAS   R14,PADL\n         L     R8,VTBR\n         LR    R0,R8\n         LA    R1,LNEC\n         LA    R15,=CL4'<R>='\n         BAS   R14,PADL\n         BAS   R9,PRTL             PRINT LINE\n         L     R0,VTBQ\n         LA    R1,LNEN\n         LA    R15,=CL4'<Q>='\n         BAS   R14,PADL\n         USING VTR,R8\nTTRC2    L     R0,VTRL\n         LA    R1,LNEO\n         LA    R15,=CL4'<R>='\n         BAS   R14,PADL\n         L     R0,VTRA\n         SLL   R0,1\n         SRL   R0,1\n         LA    R1,LNEL\n         LA    R15,=CL4' RB='\n         TM    VTRA,X'80'\n         BZ    *+L'*+4\n         LA    R15,=CL4'WRB='\n         BAS   R14,PADL\n         LA    R1,LNEC\n         USING POU,R1\n         MVC   POU1,=CL4'CDE='\n         MVC   POU2,VTRN\n         BAS   R9,PRTL             PRINT LINE\n         ICM   R8,B'1111',VTRL\n         BNZ   TTRC2\n         DROP  R1,R2,R7,R8\n         AL    R2,=A(LVTB)\n         CLR   R2,R6\n         BL    TTRC1\n         MVC   LINE(31),=CL31'0 End of Address Space TCB-RB''s'\n         MVC   LINE+32(12),=CL12'trace (test)'\n         MVC   LINE+45(5),=CL5'list.'\n         BAS   R9,PRTL             PRINT LINE\n         BAS   R9,STTL             SET TITLE\n         DC    AL4(HSNP)\n         MVI   LTLNE,TLNES\n         BAS   R9,PRTL             LINE SPACE (FORCE TITLE)\n         MVI   LTLNE,TLNEL\n         L     R1,=V(#SNSW#)\n         MVI   0(R1),1             REDUCE OUTPUT\n         L     R2,AVTWAS\n         LA    R3,=A(LVTALL)\n        $SNAP  (R2),(R3),DDNME\n         LTR   R10,R15\n         BNZ   QUIT\n         SPACE 1\nLTCB     MVC   DDNME,DDNML\n         BAS   R9,STTL             SET TITLE\n         DC    AL4(HEAD)\n         MVC   LINE+10(30),=CL30'Number of TCB''s (\"ASCBTCBS\") ='\n         LH    R0,MAXTCBS          NUMBER OF TCB'S\n         CVD   R0,WORKD\n         MVC   LINE+40(6),=XL6'402020202120'\n         ED    LINE+40(6),WORKD+L'WORKD-3\n         MVI   LINE+46,C'.'\n         BAS   R9,PRTL             PRINT LINE\n         BAS   R9,PRTL             LINE SPACE\n         L     R2,AVTCBS\n         USING VTB,R2\nLTCB1    LA    R7,LINE+2\n         USING LNP,R7\n         LA    R0,LLNP             APPLY LEVEL-SHIFT\n         CL    R0,VTBH\n         BL    *+L'*+4\n         L     R0,VTBH\n         ALR   R7,R0\n         ALR   R7,R0\n         L     R0,VTBT             SET TCB LINE(S)\n         LA    R1,LNPT\n         LA    R15,=CL4'TCB='\n         BAS   R14,PADL\n         L     R3,VTBR\n         USING VTR,R3\nLTCB2    L     R0,VTRA\n         SLL   R0,1\n         SRL   R0,1\n         LA    R1,LNPA\n         LA    R15,=CL4' RB='\n         TM    VTRA,X'80'\n         BZ    *+L'*+4\n         LA    R15,=CL4'WRB='\n         BAS   R14,PADL\n         LA    R1,LNPC\n         USING POU,R1\n         MVC   POU1,=CL4'CDE='\n         MVC   POU2,VTRN\n         BAS   R9,PRTL             PRINT LINE\n         ICM   R3,B'1111',VTRL\n         BNZ   LTCB2\n         ICM   R2,B'1111',VTBQ\n         BNZ   LTCB1\n         DROP  R1,R2,R3,R7\n         MVC   LINE(31),=CL31'0 End of Address Space TCB-RB''s'\n         MVC   LINE+32(5),=CL5'chain'\n         MVC   LINE+38(5),=CL5'list.'\n         BAS   R9,PRTL             PRINT LINE\n         SPACE 1\nQUIT     TM    SWITCH,SWPTL\n         BO    FRWAS\n        $PCLOSE\n         LTR   R10,R10\n         BNZ   FRWAS\n         LR    R10,R15\nFRWAS    ICM   R1,B'1111',AVTWAS\n         BZ    LEAVE\n         L     R0,=A(LVTALL)\n        FREEMAIN R,A=(1),LV=(0)    FREE VECTORS WORK-AREAS\n         PRINT NOGEN\nLEAVE   $XRET  CC=(R10)\n         PRINT GEN\n         SPACE 1\nPADL     ST    R0,WORKD            R14 = LINK REGISTER\n         MVI   WORKD+4,X'0F'\n         USING POU,R1\n         MVC   POU1,0(R15)\n         UNPK  POU2(L'POU2+1),WORKD(5)\n         TR    POU2(L'POU2),TRHEX-C'0'\n         MVI   POU2+L'POU2,C' '\n         DROP  R1\n         BR    R14                 RETURN\nSTTL     ICM   R1,B'1111',0(R9)    R9 = LINK REGISTER\n         BCTR  R1,0\n         MVC   TLNET(L'TLNET),TLNET-1\n         LA    R0,L'TLNET\n         XR    R15,R15\n         IC    R15,0(R1)\n         LTR   R15,R15\n         BZ    4(R9)               NONE, RETURN\n         CLR   R15,R0\n         BNH   *+L'*+2\n         LR    R15,R0\n         TM    SWITCH,SWPTL\n         BO    STTL1\n         BCT   R15,*+L'*+6\n         MVC   TLNET(*-*),1(R1)\n         EX    R15,*-6\n         ZAP   NPG,=PL1'+0'\n         ZAP   NLN,=PL2'+99'\n         B     4(R9)               RETURN\nSTTL1    LR    R0,R15\n         LA    R15,0(R1,R15)\n         LA    R1,1(R1)\n         CLI   0(R15),C' '\n         BNE   *+L'*+10\n         BCTR  R15,0\n         BCT   R0,*-10\n         B     4(R9)               NONE, RETURN\n         BAS   R14,PUTLNE          PUTLINE \"TITLE\"\n         B     4(R9)               RETURN\nPRTL     TM    SWITCH,SWPTL        R9 = LINK REGISTER\n         BO    PRTL2\n         CP    NLN,=PL2'+50'\n         BL    PRTL1\n         ZAP   NLN,=PL1'+0'\n         AP    NPG,=PL1'+1'\n         MVC   TLNEP,=XL6'402020202120'\n         ED    TLNEP,NPG\n        $PRINT TLNE,,DDNME         PRINT \"TITLE\"\n         LTR   R10,R15\n         BNZ   QUIT\n        $PRINT SPCE,,DDNME         LINE SPACE\n         LTR   R10,R15\n         BNZ   QUIT\nPRTL1   $PRINT LINE,,DDNME         PRINT \"LINE\"\n         LTR   R10,R15\n         BNZ   QUIT\n         CLI   LINE,C'0'\n         BNE   *+L'*+6\n         AP    NLN,=PL1'+1'\n         AP    NLN,=PL1'+1'\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         BR    R9                  RETURN\nPRTL2    LA    R0,L'LINE-1\n         LA    R1,LINE+1\n         LA    R15,LINE+L'LINE-1\n         CLI   0(R15),C' '\n         BNE   *+L'*+8\n         BCTR  R15,0\n         BCT   R0,*-10\n         BR    R9                  NONE, RETURN\n         LA    R14,L'MSGOUT-2\n         CLR   R0,R14\n         BNH   PRTL3\n         CLI   0(R1),C' '\n         BNE   *+L'*+8\n         LA    R1,1(R1)\n         BCT   R0,*-12\n         A     R0,=F'1'\n         SL    R1,=F'1'\n         MVI   0(R1),C'>'          INDICATE LINE SHIFTED\n         CLR   R0,R14\n         BNH   PRTL3\n         LR    R0,R14              TRUNCATE LINE\nPRTL3    BAS   R14,PUTLNE          PUTLINE \"LINE\"\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         BR    R9                  RETURN\n         EJECT\n*------- PUTLNE - PUTLINE ROUTINE\n*        (REGISTERS R2-R10 AND R14 ARE SAVED/RESTORED BY ROUTINE)\n*              R14 : LINK REGISTER\n* ON ENTRY --- R0 : MESSAGE TEXT LENGTH\n*              R1 : POINTS TO THE MESSAGE TEXT\n         SPACE 1\nPUTLNE   LTR   R0,R0\n         BNPR  R14\n         STM   R2,R10,SAVEREGS     SAVE CALLER'S REGS\n         ST    R14,SAVEREGR\n         LA    R2,L'MSGOUT\n         CLR   R0,R2\n         BNL   *+L'*+2\n         LR    R2,R0\n         MVI   MSGOUT,C' '         CLEAR BUFFER TO SPACES\n         MVC   MSGOUT+1(L'MSGOUT-1),MSGOUT\n         BCT   R2,*+L'*+6\n         MVC   MSGOUT(*-*),0(R1)\n         EX    R2,*-6\n         XC    MSGCNTL,MSGCNTL     SET IN PUTLINE LINE LENGTH\n         LA    R2,L'MSGCNTL+1(R2)\n         STH   R2,MSGCNTL\n         LA    R5,MSGWORK          ADDRESS OF MSG BUFFER\n         L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         L     R3,CPPLUPT          UPT ADDRESS\n         L     R4,CPPLECT          ECT ADDRESS\n         DROP  R2\n         XC    ECBX,ECBX           CLEAR ECB TO ZEROS\n         XC    PTPBX(PTPBLEN),PTPBX CLEAR PUT PARMLIST TO ZEROS\n         XC    IOPLX(IOPLLEN),IOPLX CLEAR PARM LIST TO ZEROS\n         LA    R1,IOPLX            ADDRESS OF LIST\n        PUTLINE PARM=PTPBX,UPT=(R3),ECT=(R4),ECB=ECBX,                 X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               OUTPUT=((R5),TERM,SINGLE,DATA),                         X\n               MF=(E,(1))\n         LTR   R15,R15             HOW COMPLETE ?\n         LM    R2,R10,SAVEREGS     RESTORE CALLER'S REGS\n         BNZ   QUIT                UNSUCCESSFULLY ...\n         L     R14,SAVEREGR\n         BR    R14                 RETURN TO CALLER\n         EJECT\n*------- CONSTANTS AND WORK-AREAS\n         SPACE 1\nWORKD    DC    D'0'\nATIOT    DC    A(*-*)\nATSO     DC    A(*-*)\nAPSCB    DC    A(*-*)\nCPPLADDR DC    A(*-*)              PUTLINE USE\nAVTWAS   DC    A(*-*)\nAVTCBS   DC    A(*-*)\nAVTRBS   DC    A(*-*)\nVTNTC    DC    F'0'\nSAVEREGS DC    9F'0'               SAVE REGS R2-R10 FOR PUTLINE\nSAVEREGR DC    F'0'                SAVE REG R14 FOR PUTLINE\nIOPLX    DC    0F'0',(IOPLLEN)X'0' I-O PARM LIST FOR PUTLINE\nECBX     DC    F'0'                ECB FOR PUTLINE\nPTPBX    DC    0F'0',(PTPBLEN)X'0' PUTLINE PARM BLOCK\nMSGWORK  EQU   MSGCNTL,84          PUTLINE WORK USE\nMSGCNTL  DC    F'0'                     CONTROL WORD FOR PUTLINE\nMSGOUT   DC    CL80' '                  PUTLINE TEXT\nDDNME    DC    CL8' '\nDDNML    DC    CL8'TTRLLIST'\nDDNMT    DC    CL8'TTRLTEST'\nTRHEX    DC    CL16'0123456789ABCDEF'\nMAXTCBS  DC    H'0'\nNLN      DC    PL2'+0'\nNPG      DC    PL3'+0'\nSWITCH   DC    XL1'0'\nSWFOR    EQU   X'80'               FOREGROUND RUN\nSWPTL    EQU   X'40'               TSO PUTLINE AVAILABLE\nSWLIST   EQU   X'08'               DD-LIST PRESENT\nSWTEST   EQU   X'04'               DD-TEST PRESENT\nWD       DC    A(WDS+X'80000000')  POINTER TO REQUEST BLOCK\nWDS      DS    0F                  REQUEST BLOCK\n         DC    AL1(S99RBEND-S99RB) LENGTH OF REQUEST BLOCK\n         DC    AL1(S99VRBAL)       VERB CODE (ALLOCATION)\n         DC    AL1(S99NOCNV+S99NOMNT,0) FLAGS\nWDSERROR DC    XL2'0'              ERROR REASON CODE\nWDSINFO  DC    XL2'0'              INFORMATION REASON CODE\nWDSTXTPP DC    A(*-*)              ADDR OF LIST OF TEXT UNIT PTRS\n         DC    F'0'                ADDR OF REQ BLK EXTENSION\n         DC    XL4'0'              FLAGS FOR AUTHORIZED FUNCTIONS\nWDTUP1   DC    A(WDTU1)            TEXT UNIT POINTERS\n         DC    A(WDTU4+X'80000000')\nWDTUP2   DC    A(WDTU2)            TEXT UNIT POINTERS\n         DC    A(WDTU3)\n         DC    A(WDTU4+X'80000000')\nWDTU1    DC    AL2(DALSYSOU,0)     SYSOUT=*\nWDTU2    DC    AL2(DALSYSOU,1,1),C'&SHC' SYSOUT=X\nWDTU3    DC    AL2(DALCLOSE,0)     FREE AT CLOSE\nWDTU4    DC    AL2(DALRTDDN,1,L'WDRTDDN) RETURN DD-NAME\nWDRTDDN  DC    CL8' '              DD-NAME\nMSGASM  WTO    ' TTCBRB : Output dynamically allocated to TSO session aX\n               s SYSOUT=&SHC ',ROUTCDE=11,DESC=7,MF=L\nMSGDAE  WTO    ' TTCBRB : Dynamic allocation error - RC =     REASON=  X\n                  INFO=     ',ROUTCDE=11,DESC=7,MF=L\nMSGDAEC  EQU   45,4\nMSGDAER  EQU   57,4\nMSGDAEI  EQU   67,4\nMSGDAEL  EQU   *-MSGDAE\n         DC    AL1(L'ERRM)\nERRM     DC    C'Address Space TCB-RB''s scan process error message.'\n         DC    AL1(HTRCL)\nHTRC     DC    C'Address Space TCB-RB''s trace (test) list : '\nHTRCNM   DC    CL8' ',CL2' ('\nHTRCID   DC    CL4' ',CL2').'\nHTRCL    EQU   *-HTRC\n         DC    AL1(L'HSNP)\nHSNP     DC    C'Snap (dump) all tables array : '\n         DC    AL1(HEADL)\nHEAD     DC    C'Address Space TCB-RB''s chain list : '\nHEADNM   DC    CL8' ',CL2' ('\nHEADID   DC    CL4' ',CL2').'\nHEADL    EQU   *-HEAD\nLTLNE    DC    AL1(TLNEL)\nTLNE     DC    CL2'1 '\nTLNET    DC    CL80' ',CL6' ---- '\nTLNED    DC    CL20' ',CL1' '\nTLNEH    DC    CL8'  :  :  ',CL7' - Page'\nTLNES    EQU   (*-TLNE)-6\nTLNEP    DC    CL6' ',CL1'.'\nTLNEL    EQU   *-TLNE\n         DC    AL1(L'LINE)\nLINE     DC    CL131' '\n         DC    AL1(L'SPCE)\nSPCE     DC    CL2' '\n         SPACE 1\n        LTORG\n         SPACE 1\nVTI      DSECT\nVTIV     DS    A                   TCBLTC FIELD VECTOR POINTER\nLVTI     EQU   (((*-VTI)+3)/4)*4\n         SPACE 1\nVTB      DSECT\nVTBH     DS    F                   TCB HIERARCHY\nVTBQ     DS    A                   LOGICAL CHAINING ADDRESS (QUEUE)\nVTBT     DS    A                   TCB ADDRESS\nVTBN     DS    A                   TCBNTC FIELD\nVTBO     DS    A                   TCBOTC FIELD\nVTBL     DS    A                   TCBLTC FIELD\nVTBR     DS    A                   VTR POINTER (1ST RB)\nLVTB     EQU   (((*-VTB)+3)/4)*4\n         SPACE 1\nVTR      DSECT\nVTRL     DS    A                   NEXT VTR ELEMENT POINTER\nVTRA     DS    A                   RB ADDRESS\nVTRN     DS    CL8                 CDE NAME\nLVTR     EQU   (((*-VTR)+3)/4)*4\n         SPACE 1\nPOU      DSECT\nPOU1     DS    CL4                 TEXT\nPOU2     DS    CL8                 ADDRESS/NAME\nLPOU     EQU   *-POU\n         SPACE 1\nLNE      DSECT\nLNET     DS    CL(LPOU)            TCB=ADDRESS\n         DS    CL2\nLNEN     DS    CL(LPOU)            NTC=ADDRESS / <Q>=ADDRESS\n         DS    CL2\nLNEO     DS    CL(LPOU)            OTC=ADDRESS / <R>=ADDRESS\n         DS    CL2\nLNEL     DS    CL(LPOU)            LTC=ADDRESS /  RB=ADDRESS\n         DS    CL2\nLNEC     DS    CL(LPOU)            <R>=ADDRESS / CDE=CDENAME\nLLNE     EQU   (L'LINE-((*-LNE)+2))/2\n         SPACE 1\nLNP      DSECT\nLNPT     DS    CL(LPOU)            TCB=ADDRESS\n         DS    CL2\nLNPA     DS    CL(LPOU)             RB=ADDRESS\n         DS    CL2\nLNPC     DS    CL(LPOU)            CDE=CDENAME\nLLNP     EQU   (L'LINE-((*-LNP)+2))/2\n         SPACE 1\n         PRINT NOGEN\n        IKJCPPL\n        IKJPSCB\n        IKJEBECA\nTIODSECT DSECT\n        IEFTIOT1\n        IHAPSA LIST=YES\n        IHAASCB LIST=YES\n        IHAASXB LIST=YES\n        IKJTCB LIST=YES\n        IKJRB  LIST=YES\n        IHACDE\n        IKJIOPL\nIOPLLEN  EQU   *-IOPL\n        IKJPTPB\nPTPBLEN  EQU   *-PTPB\n        IEFZB4D0\n        IEFZB4D2\n         PRINT GEN\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TTCBRB$": {"ttr": 24585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16(\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:28:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//TTCBRB   JOB (........),'INSTALL  -TTCBRB-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                GFDATE    TXPRINT   TXSNAP                         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=TTCBRB\n//LNK     EXEC PAJILKC\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,PRINT,SNAP)\n  ENTRY   TTCBRB\n  NAME    TTCBRB(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TTCBRB@": {"ttr": 24587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x931_\\x00\\x931_\\x11\\x02\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-11-11T00:00:00", "modifydate": "1993-11-11T11:02:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "SYSPAJA"}, "text": "1   05/11/93\n                                                      TTCBRB    1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * TRACE ADDRESS SPACE TCB-RB'S CHAIN  * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    TSO command, program or routine to list the current\n  ---------    Address Space TCB-RB's chain.\n               Note : normally the list is outputed to the terminal,\n                      but, when the TSO \"PUTLINE\" function is not\n                      available, a \"SYSOUT\" is dynamically allocated.\n                      If a pre-allocated \"TTRLLIST\" FILE or DD-card\n                      is present, then, the list is outputed to it.\n               Test : pre-allocate a \"TTRLTEST\" FILE or DD-card to\n                      get also internal tables trace list.\n\n  How to use : TSO command       = TTCBRB\n  ------------ BATCH execution   = //LSTCB   EXEC PGM=TTCBRB\n               In Assembler, LINK or CALL as program or routine with\n               register 1 zero   = XR    R1,R1\n                                   LINK  EP=TTCBRB or CALL  TTCBRB\n               Last but not least, in ISPF Edit = TRAP TTCBRB\n                                   (set the list in the Edit data)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TUTGEN": {"ttr": 24589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90&O\\x00\\x90&O\\x15!\\x01\\x19\\x01\\x19\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-09-21T00:00:00", "modifydate": "1990-09-21T15:21:00", "lines": 281, "newlines": 281, "modlines": 0, "user": "SYSPAJA"}, "text": "./     ADD     NAME=TUTGEN\n./     NUMBER  NEW1=100,INCR=100\nPROC     0 DSN(...ISPF-panels library...) MEM(ISR10000) -\n         OUTDSN(&SYSUID..TUT.DATA) OUTMEM(TUTOBRWS) OPT(RUN) AT(NONE)\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* CLIST purpose : this procedure will be a help in preparing the   */\n/*       TUTOLIST program input to produce a manual from the        */\n/*       tutorials ISPF-panels.                                     */\n/* Keywords parameters : the default keywords values are set to     */\n/*       obtain the BROWSE - ISPF manual.                           */\n/*       DSN - the ISPF-panels library name.                        */\n/*       MEM - the starting tutorial panel name.                    */\n/*       OUTDSN - the private output library name.                  */\n/*       OUTMEM - the output member name (TUTOLIST program input).  */\n/*       OPT - CLIST execution trace options (LIST, DEBUG or TEST   */\n/*             may be specified).                                   */\n/*       AT - panel-ID name for CLIST execution processing trace    */\n/*             (it is handled only when OPT is not TEST).           */\n/* Pre-requisite : MEMSTAT TSO-command must be installed.           */\n/* Authors : COLOMBO A. (AMDAHL Italy)                              */\n/*           MOINIL P.A. (J.R.C. Ispra/VA, Italy)                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n         GLOBAL &ML &COUNT &LVL\n         IF &OPT = TEST THEN CONTROL LIST SYMLIST CONLIST\n         ELSE IF &AT \u00ac= NONE THEN DO\n           IF &AT = &MEM THEN CONTROL LIST SYMLIST CONLIST\n           ELSE CONTROL NOLIST NOSYMLIST NOCONLIST\n           END\n         MEMSTAT '&DSN(&MEM)' NOLIST\n         SET &CC = &LASTCC\n         IF &CC \u00ac= 0 THEN DO\n           IF &CC = 4 THEN WRITE *** MEMBER &MEM NOT FOUND ***\n           EXIT CODE(8)\n           END\n         SET &LVL = &LVL + 1                      /* UP LOCAL LEVEL */\n         IF &LVL > 100 THEN DO\n           WRITE *** LEVEL : &LVL (PROBABLE LOOP) ***\n           SET &LVL = &LVL - 1                  /* DOWN LOCAL LEVEL */\n           EXIT CODE(8)                            /* PROBABLE LOOP */\n           END\n         SET &NAM = &STR(&MEM)\nFILL:    IF &LENGTH(&STR(&NAM)) < 8 THEN DO\n           SET &NAM = &STR(&NAM)&STR(*)\n           GOTO FILL\n           END\n         SET &MCOU = &LENGTH(&STR(&ML)) / 8\n         SET &MNOW = 0\nLOOPC:   IF &MNOW = &MCOU THEN GOTO ADDSTR\n         SET &MNOW = &MNOW + 1\n         SET &HIGH = &MNOW * 8\n         SET &LOW  = &HIGH - 7\n         IF &SUBSTR(&LOW:&HIGH,&ML) = &STR(&NAM) THEN GOTO TEND\n         GOTO LOOPC\nADDSTR:  SET &ML = &STR(&ML)&STR(&NAM)\n         SET &COUNT = &COUNT + 1\n         IF (&OPT = LIST AND &COUNT//10 = 0) THEN WRITENR &COUNT\n         SET &RP = )\n         SET &C = &STR(&&)\n         SET &ZHTOP = ZHTOP\n         SET &ZIND = ZIND\n         SET &ZUP = ZUP\n         SET &ZCONT = ZCONT\n         SET &ZSEL = ZSEL\n         IF &OPT = DEBUG THEN WRITENR &MEM\n         CONTROL NOMSG\n         FREE F(TUT&LVL)\n         CONTROL MSG\n         ALLOC F(TUT&LVL) DA('&DSN(&MEM)') SHR\n         ERROR DO\n           SET &CC = &LASTCC\n           WRITE *** ERROR-0 / CC : &CC (LEVEL : &LVL) ***\n           WRITE *** *** *** MEMBER : &MEM (COUNT : &COUNT) ***\n           GOTO OPNERR\n           END\n         OPENFILE TUT&LVL\n         ERROR OFF\nAFTER:   ERROR DO\n           SET &CC = &LASTCC\n           IF &CC EQ 400 THEN GOTO CLOSEUP\n           WRITE *** ERROR-1 / CC : &CC (LEVEL : &LVL) ***\n           WRITE *** *** *** MEMBER : &MEM (COUNT : &COUNT) ***\n           GOTO CLOSEUP\n           END\nNEXTR:   GETFILE TUT&LVL\n         SET &SYSDVAL = &C.TUT&LVL\n         READDVAL V1,V2,V3\n         IF &OPT = DEBUG THEN WRITE &V1 \u00ac &V2 \u00ac &V3\n         IF &STR(&V1) = THEN GOTO NEXTR\n         IF &STR(&V1) = &ZUP THEN GOTO NEXTR\n         IF &STR(&V1) = &ZSEL THEN GOTO NEXTR\n         IF &STR(&V1) = &ZHTOP THEN GOTO NEXTR\n         IF &STR(&V1) = &ZCONT THEN GOTO TCONT\n         IF &CHOICE = YES THEN GOTO INZONE\n         IF &STR(&V1) \u00ac= &STR(&RP.PROC) THEN GOTO NEXTR\n         SET &CHOICE = YES\n         GOTO NEXTR\nINZONE:  IF &STR(&V1) = &STR(&RP.END) THEN GOTO CLOSEUP\n         IF &STR(&V1) = &STR(&RP) THEN GOTO CLOSEUP\n         IF &STR(&V1) = &STR(IF) THEN GOTO NEXTR\n         IF &STR(&V1) = &ZIND THEN GOTO INDX\n         IF &STR(&V1) = &ZUP THEN GOTO NEXTR\n         IF &STR(&V2) = THEN GOTO NEXTR\n         IF &SUBSTR(1:1,&V2) = &STR(?) THEN GOTO NEXTR\n         IF &SUBSTR(1:1,&V2) = &STR(') THEN GOTO NEXTR\n         IF &STR(&V1) = &ZCONT THEN GOTO TCONT\n         IF &SUBSTR(1:1,&V2) = &STR(*) THEN DO\n           SET &I2 = &LENGTH(&STR(&V2))\n           SET &V2 = &SUBSTR(2:&I2,&V2)\n           END\n         SET &MBN = &STR(&V2)\n         GOTO RCLL\nTCONT:   IF &LENGTH(&STR(&V2)) > 1 THEN DO\n           IF &SUBSTR(1:1,&V2) = &STR(=) THEN DO\n             SET &I3 = &LENGTH(&STR(&V2))\n             SET &V3 = &SUBSTR(2:&I3,&V2)\n             END\n           END\n         IF &V3 = &ZHTOP THEN GOTO NEXTR\n         IF &SUBSTR(1:1,&V3) = &STR(*) THEN DO\n           SET &I3 = &LENGTH(&STR(&V3))\n           SET &V3 = &SUBSTR(2:&I3,&V3)\n           END\n         SET &MBN = &STR(&V3)\nRCLL:    IF &OPT = DEBUG THEN WRITE LEVEL &LVL \u00ac &V1 \u00ac &V2 \u00ac &V3\n         ERROR OFF\n         %TUTGEN DSN(&DSN) MEM(&MBN) OPT(&OPT) AT(&AT)\n         SET &CC = &LASTCC\n         IF &CC = 0 THEN GOTO AFTER\n         WRITE *** ERROR-2 / CC : &CC (LEVEL : &LVL) ***\n         WRITE *** *** *** MEMBER : &MEM (COUNT : &COUNT) ***\n         GOTO LEAVE\nINDX:    WRITE *** INDEX &MEM ***\n         GOTO NEXTR\nOPNERR:  ERROR OFF\nLEAVE:   FREE F(TUT&LVL)\n         GOTO TEND\nCLOSEUP: ERROR OFF\n         CLOSFILE TUT&LVL\n         FREE F(TUT&LVL)\nTEND:    IF &LVL = 1 THEN GOTO GENER\n         SET &LVL = &LVL - 1                    /* DOWN LOCAL LEVEL */\n         EXIT\nGENER:   WRITE *** &COUNT PANELS SCANNED ***\n         CONTROL NOMSG\n         FREE F(TUTLIST)\n         CONTROL MSG ASIS\n         ALLOC F(TUTLIST) DA('&OUTDSN(&OUTMEM)') SHR\n         OPENFILE TUTLIST OUTPUT\n         IF &OPT = LIST THEN WRITE *** START OUTPUT GENERATION ***\n         SET &SW1 = 0\n         SET &SW2 = 0\n         SET &RP = )\n         SET &MCOU = &LENGTH(&STR(&ML)) / 8\n         SET &MNOW = 0\nLOOPOUT: IF &MNOW = &MCOU THEN GOTO ENDMEM\n         SET &MNOW = &MNOW + 1\n         SET &HIGH = &MNOW * 8\n         SET &LOW = &HIGH - 7\n         SET &NAM = &SUBSTR(&LOW:&HIGH,&ML)\nAGAIN:   SET &HIGH = &LENGTH(&STR(&NAM))\n         IF &SUBSTR(&HIGH,&NAM) = &STR(*) THEN DO\n           SET &NAM =&SUBSTR(1:&HIGH-1,&NAM)\n           GOTO AGAIN\n           END\n         CONTROL NOMSG\n         FREE F(TUTPANEL)\n         CONTROL MSG\n         ALLOC F(TUTPANEL) DA('&DSN(&NAM)') SHR\n         OPENFILE TUTPANEL\nFLOOP:   GETFILE TUTPANEL\n         SET &SYSDVAL = &TUTPANEL\n         READDVAL V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11\n         IF &LENGTH(&STR(&V1)) < 5 THEN GOTO FLOOP\n         IF &SUBSTR(1:5,&V1) = &STR(&RP.ATTR) THEN DO\n           SET &ATTR = YES\n           GOTO FLOOP\n           END\n         IF &SUBSTR(1:5,&V1) = &STR(&RP.BODY) THEN DO\n           SET &ATTR = NO\n           GOTO FLOOP\n           END\n         IF &ATTR = YES THEN GOTO FLOOP\n         IF &STR(&V4) = THEN GOTO SETV5\n         IF &LENGTH(&STR(&V4)) <= 1 THEN GOTO CHCKV5\n         IF &SUBSTR(1:1,&V4) = &STR(-) THEN GOTO SETV4\nCHCKV5:  IF &LENGTH(&STR(&V5)) <= 1 THEN GOTO CHCKV6\n         IF &STR(&V5) = THEN GOTO SETV6\n         IF &SUBSTR(1:1,&V5) = &STR(-) THEN GOTO SETV5\nCHCKV6:  IF &LENGTH(&STR(&V6)) <= 1 THEN GOTO CHCKV7\n         IF &STR(&V6) = THEN GOTO SETV7\n         IF &SUBSTR(1:1,&V6) = &STR(-) THEN GOTO SETV6\nCHCKV7:  IF &LENGTH(&STR(&V7)) <= 1 THEN GOTO CHCKV8\n         IF &STR(&V7) = THEN GOTO SETV8\n         IF &SUBSTR(1:1,&V7) = &STR(-) THEN GOTO SETV7\nCHCKV8:  IF &LENGTH(&STR(&V8)) <= 1 THEN GOTO CHCKV9\n         IF &STR(&V8) = THEN GOTO SETV9\n         IF &SUBSTR(1:1,&V8) = &STR(-) THEN GOTO SETV8\nCHCKV9:  IF &LENGTH(&STR(&V9)) <= 1 THEN GOTO CHCKV10\n         IF &STR(&V9) = THEN GOTO SETV10\n         IF &SUBSTR(1:1,&V9) = &STR(-) THEN GOTO SETV9\nCHCKV10: IF &LENGTH(&STR(&V10)) <= 1 THEN GOTO CHCKV11\n         IF &STR(&V10) = THEN GOTO SETV11\n         IF &SUBSTR(1:1,&V10) = &STR(-) THEN GOTO SETV10\nCHCKV11: IF &LENGTH(&STR(&V11)) <= 1 THEN GOTO WMEM\n         IF &STR(&V11) = THEN GOTO WMEM\n         IF &SUBSTR(1:1,&V10) = &STR(-) THEN GOTO SETV11\n         GOTO WMEM\nSETV4:   SET V4 =\nSETV5:   SET V5 =\nSETV6:   SET V6 =\nSETV7:   SET V7 =\nSETV8:   SET V8 =\nSETV9:   SET V9 =\nSETV10:  SET V10 =\nSETV11:  SET V11 =\nWMEM:    IF &OPT = LIST THEN DO\n           WRITE &NAM: &V3 &V4 &V5 &V6 &V7 &V8 &V9 &V10 &V11\n           END\n         IF &SW1 = 1 THEN GOTO DONE\n         SET &SW1 = 1\n         IF &STR(&V3) = RESOURCE AND -\n           &STR(&V4) = ACCESS AND -\n           &STR(&V5) = CONTROL AND -\n           &STR(&V6) = FACILITY THEN SET &VT = &STR(RACF)\n         ELSE SET &VT = &STR(&V3)\n         IF &LENGTH(&STR(&VT)) > 25 THEN GOTO NOXPN\nEXPND:   SET &VX = &VX + 1\n         SET &BUILD = &STR(&STR(&BUILD) &SUBSTR(&VX,&VT))\n         IF &LENGTH(&STR(&VT)) > &VX THEN GOTO EXPND\n         SET TUTLIST = &STR(*MNT&BUILD - ISPF)\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*HIX&BUILD - INDEX)\n         GOTO STRMN\nNOXPN:   SET TUTLIST = &STR(*MNT &VT - ISPF)\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*HIX &VT - INDEX)\nSTRMN:   PUTFILE TUTLIST\n         SET TUTLIST = &STR(*VAR ZCMD)\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*REP 'OPTION  ===>   ')\n         PUTFILE TUTLIST\n         IF &VT = BROWSE THEN GOTO BRWS\n         SET TUTLIST = &STR(*REP 'COMMAND ===>   ')\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*REP '(continued on next page)')\n         PUTFILE TUTLIST\n         GOTO DONE\nBRWS:    SET &SW2 = 1\n         SET TUTLIST = &STR(*REP '&STR(&&)ZNONDSPX' '.')\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*REP 'ZNONDSPX ' '        .')\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*REP 'ZCHARCNL ' '     NOCC')\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*REP '&STR(&&)ZCINFO' ' do not')\n         PUTFILE TUTLIST\nDONE:    SET &TUTLIST= &STR(*HDR &V3 &V4 &V5 &V6 &V7 &V8 &V9 &V10 &V11)\n         IF &STR(&TUTLIST) = &STR(&OLDTIT) THEN GOTO ONLYMEM\n         IF &STR(&TUTLIST) = THEN GOTO ONLYMEM\n         SET &OLDTIT = &TUTLIST\n         PUTFILE TUTLIST\nONLYMEM: SET &TUTLIST = &NAM\n         PUTFILE TUTLIST\n         IF &SW2 = 0 THEN GOTO CLOSP\n         SET &SW2 = 0\n         SET TUTLIST = &STR(*RZR)\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*REP 'OPTION  ===>   ')\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*REP 'COMMAND ===>   ')\n         PUTFILE TUTLIST\n         SET TUTLIST = &STR(*REP '(continued on next page)')\n         PUTFILE TUTLIST\nCLOSP:   CLOSFILE TUTPANEL\n         FREE F(TUTPANEL)\n         GOTO LOOPOUT\nENDMEM:  CLOSFILE TUTLIST\n         FREE F(TUTLIST)\n         WRITE *** GENERATED OUTPUT IN ===> '&OUTDSN(&OUTMEM)' ***\n         EXIT\n./     ENDUP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TUTOLIS$": {"ttr": 24838, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "SYSPAJA"}, "text": "//TUTOLIST JOB (........),'INSTALL - TUTOLIST -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=3\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                GFDATE    MREAD     TXREAD    TXPRINT              *\n//* PRE-REQUISITE PROCEDURE INSTALLATION : MEMSTAT (TSO COMMAND)      *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=TUTOLIST\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,MREAD,READ,PRINT)\n  ENTRY   TUTOLIST\n  NAME    TUTOLIST(R)\n/*\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* EXECUTE THE STEP BELOW WITH PROCEDURE :                           *\n//*       \"PAJPROC\" IF YOUR ->.TARGET.TSO.CLISTS DATA-SET             *\n//*                         IS RECFM=FB AND LRECL=80, ELSE            *\n//*       \"PAJPROV\" IF YOUR ->.TARGET.TSO.CLISTS DATA-SET             *\n//*                         IS RECFM=VB AND LRECL=255.                *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//TCL     EXEC PAJPROC,MBR=TUTGEN,DSS='->.SOURCE.FILE2',\n//             DSP='->.TARGET.TSO.CLISTS'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TUTOLIS@": {"ttr": 24840, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90&O\\x00\\x90&O\\x129\\x00b\\x00b\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-09-21T00:00:00", "modifydate": "1990-09-21T12:39:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "SYSPAJA"}, "text": "1   20/09/90\n                                                      TUTOLIST  1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *           T U T O L I S T           * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Produce a list of the tutorials from the ISPF-panels.\n  ---------\n\n  JCL :  //LIST    EXEC PGM=TUTOLIST,PARM=...\n  -----  //SYSPDS    DD DSN=...ISPF panels library...,DISP=SHR\n         //SYSINDEX  DD ...index data-set output if requested...\n         //SYSPRINT  DD ...list data-set output...\n         //SYSIN     DD ...input data-set (control cards)...\n\n  CONTROL cards :\n  ---------------\n\n     1 - Header cards : must contain '*HDR ' in columns 1 to 5 followed\n            by a header text (columns 6 up to 72 maximum). An index\n            header card ('*HIX ') is also allowed as input control card\n            when the general index is requested (PARM=I is specified),\n            and it must be encountered before any panels names cards\n            unless it is not considered.\n     2 - Manual Name card : must contain '*MNT ' in columns 1 to 5\n            followed by a manual name text (columns 6 up to 72\n            maximum). This control card must be encountered before\n            any panels names cards unless it is not considered.\n     3 - Variables names cards : must contain '*VAR ' in columns 1 to\n            5 followed by the panels variables names which must be\n            eliminated in the list. The names may be coded into cards\n            columns 6 up to 72 included, and they must be separated\n            from each other by at least one blank. A name must stay\n            entirely in a card (do not split it in two cards).\n     4 - Replace text cards : must contain '*REP ' in columns 1 to 5\n            followed by the text match string and the text replacement\n            string. The text strings must be enclosed into apostrophes\n            (if an apostrophe is part of the text, it must be doubled).\n            If the replacement string is not specified, it is asumed as\n            a null string. Only one replacement is accepted by card.\n     5 - Panels names cards : variable coded into cards columns 1 to 72\n            included, the names must be separated from each other by at\n            least one blank. A name must stay entirely in a card (do\n            not split it in two cards).\n     6 - Reset cards : must contain '*RZV ' or '*RZR ' in columns 1 to\n            5 and are used to reset respectively all variables names or\n            replace texts previously defined through the corresponding\n            control cards.\n1   18/05/90\n                                                      TUTOLIST  2/2.\n\n  PARM field : Parameters can be specified in any order, but must be\n  ------------ separated from each other by a comma.\n               N - may be used to have the panel names in the list.\n               I - to obtain a general index (at each header card\n                   the corresponding page number).\n\n  CLIST purpose : A CLIST named TUTGEN has been developed to help in\n  --------------- preparing the input for the TUTOLIST program.\n          Skeleton : %TUTGEN DSN(...) MEM(...) OUTDSN(...) OUTMEM(...)\n          Arguments : DSN - the ISPF-panels library name.\n                      MEM - the starting tutorial panel name.\n                      OUTDSN - the private output library name (must\n                            be a PO data-set and already existing).\n                      OUTMEM - the output member name (TUTOLIST\n                            program input). This can be edited to\n                            add control cards if desired.\n\n  EXAMPLE :    Here follows a job which, if executed, will give you\n  ---------    the ISPF - BROWSE manual from the tutorial panels.\n\n          1. Execute the CLIST :\n\n            %TUTGEN DSN(...ISPF panels library...) MEM(ISR10000) -\n                    OUTDSN(...private library...) OUTMEM(TUTOBRWS)\n\n          2. SUBMIT the job below :\n\n            //...  JOB ...\n            //LIST    EXEC PGM=TUTOLIST,PARM='N,I'\n            //SYSPDS    DD DSN=...ISPF panels library...,DISP=SHR\n            //SYSINDEX  DD SYSOUT=*\n            //SYSPRINT  DD SYSOUT=*\n            //SYSIN     DD DSN=...private library...(TUTOBRWS),DISP=SHR\n\n          I.E. some other manuals :\n          -------------------------\n            %TUTGEN DSN(...ISPF panels library...) MEM(ISR20000) -\n                    OUTDSN(...private library...) OUTMEM(TUTOEDIT)\n            %TUTGEN DSN(...ISPF panels library...) MEM(ISR30000) -\n                    OUTDSN(...private library...) OUTMEM(TUTOUTIL)\n            %TUTGEN DSN(...ISPF panels library...) MEM(ISR70000) -\n                    OUTDSN(...private library...) OUTMEM(TUTOTEST)\n            %TUTGEN DSN(...ISPF panels library...) MEM(ICHT0) -\n                    OUTDSN(...private library...) OUTMEM(TUTORACF)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TUTOLIST": {"ttr": 24843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x90&O\\x00\\x90&O\\x12'\\x03\\x07\\x03\\x07\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-09-21T00:00:00", "modifydate": "1990-09-21T12:27:00", "lines": 775, "newlines": 775, "modlines": 0, "user": "SYSPAJA"}, "text": "TUTO     TITLE 'TUTORIALS ISPF-PANELS LISTER.'\n        PRINT  OFF\n         MACRO\n&LABEL  @T     &TNR,&TCC,&TXT\n.*\n.* MACRO : INTERNAL USE TO GENERATE 'MANUAL' TABLE.\n.* ------- ARGUMENTS : TNR - PRINT LINE REPEAT NUMBER (DEFAULT = 1).\n.*                     TCC - ASA CARRIAGE CONTROL CHARACTER (DEFAULT\n.*                           IS SINGLE SPACE).\n.*                     TXT - TEXT (DEFAULT IS A BLANK LINE).\n.*\n         LCLC  &N,&C\n&N       SETC  '1'\n&C       SETC  ' '\n         AIF   (T'&TNR EQ 'O').L01\n&N       SETC  '&TNR'\n.L01     AIF   (T'&TCC EQ 'O').L02\n&C       SETC  '&TCC'\n.L02     AIF   (T'&TXT EQ 'O').L03\n&LABEL   DC    AL1(&N,L'T&SYSNDX),CL1'&C'\nT&SYSNDX DC    C&TXT\n         MEXIT\n.L03     ANOP\n&LABEL   DC    AL1(&N,0),CL1'&C'\n         MEND\n        PRINT  ON\n         SPACE 1\nTUTOLIST START 0\n         SPACE 1\n* PURPOSE :    PRODUCE A LIST OF THE TUTORIALS FROM THE ISPF-PANELS.\n*\n* JCL :        //...    JOB  ...\n*              //LIST   EXEC PGM=TUTOLIST,PARM=...\n*              //SYSPDS   DD DSN=...ISPF PANELS LIBRARY...,DISP=SHR\n*              //SYSINDEX DD ...INDEX DATA-SET OUTPUT IF REQUESTED...\n*              //SYSPRINT DD ...LIST DATA-SET OUTPUT...\n*              //SYSIN    DD *\n*              ... CONTROL CARDS ...\n*              /*\n*\n* CONTROL CARDS :\n*          1 - HEADER CARDS : MUST CONTAIN '*HDR ' IN COLUMNS 1 TO 5\n*              FOLLOWED BY A HEADER TEXT (COLUMNS 6 UP TO 72 MAXIMUM).\n*              AN INDEX HEADER CARD ('*HIX ') IS ALSO ALLOWED AS\n*              INPUT CONTROL CARD WHEN THE GENERAL INDEX IS REQUESTED\n*              (PARM=I IS SPECIFIED), BUT IT MUST BE ENCOUNTERED\n*              BEFORE ANY PANELS NAMES CARDS UNLESS IT IS NOT\n*              CONSIDERED.\n*          2 - MANUAL NAME CARD : MUST CONTAIN '*MNT ' IN COLUMNS 1 TO\n*              5 FOLLOWED BY A MANUAL NAME TEXT (COLUMNS 6 UP TO 72\n*              MAXIMUM). THIS CONTROL CARD MUST BE ENCOUNTERED BEFORE\n*              ANY PANELS NAMES CARDS UNLESS IT IS NOT CONSIDERED.\n*          3 - VARIABLES NAMES CARDS : MUST CONTAIN '*VAR ' IN COLUMNS\n*              1 TO 5 FOLLOWED BY THE PANELS VARIABLES NAMES WHICH\n*              MUST BE ELIMINATED FOR THE LIST. THE NAMES MAY BE CODED\n*              INTO CARDS COLUMNS 6 UP TO 72 INCLUDED, AND THEY MUST\n*              BE SEPARATED FROM EACH OTHER BY AT LEAST ONE BLANK. A\n*              NAME MUST STAY ENTIRELY IN A CARD (DO NOT SPLIT IT IN\n*              TWO CARDS).\n*          4 - REPLACE TEXT CARDS : MUST CONTAIN '*REP ' IN COLUMNS 1\n*              TO 5 FOLLOWED BY THE TEXT MATCH STRING AND THE TEXT\n*              REPLACEMENT STRING. THE TEXT STRINGS MUST BE ENCLOSED\n*              INTO APOSTROPHES (IF AN APOSTROPHE IS PART OF THE TEXT,\n*              IT MUST BE DOUBLED). IF THE REPLACEMENT STRING IS NOT\n*              SPECIFIED, IT IS ASSUMED AS A NULL STRING. ONLY ONE\n*              REPLACEMENT IS ACCEPTED BY CONTROL CARD.\n*          5 - PANELS NAMES CARDS : VARIABLE CODED INTO CARDS COLUMNS\n*              1 TO 72 INCLUDED, THE NAMES MUST BE SEPARATED FROM EACH\n*              OTHER BY AT LEAST ONE BLANK. A NAME MUST STAY ENTIRELY\n*              IN A CARD (DO NOT SPLIT IT IN TWO CARDS).\n*          6 - RESET CARDS : MUST CONTAIN '*RZV ' OR '*RZR ' IN COLUMNS\n*              1 TO 5 AND ARE USED TO RESET RESPECTIVELY ALL VARIABLES\n*              NAMES OR REPLACE TEXTS PREVIOUSLY DEFINED THROUGH THE\n*              CORRESPONDING CONTROL CARDS.\n         EJECT\n* PARM FIELD : PARAMETERS CAN BE SPECIFIED IN ANY ORDER, BUT MUST BE\n*              SEPARATED FROM EACH OTHER BY A COMMA.\n*              N - MAY BE USED TO HAVE THE PANEL NAMES IN THE LIST\n*              I - TO OBTAIN A GENERAL INDEX (AT EACH HEADER CARD\n*                  THE CORRESPONDING PAGE NUMBER).\n*\n* AUTHOR  :    MOINIL P.A. - COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 2\n        $DEFREG\n         EJECT\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\n@OFF     EQU   X'0F'               SET SWITCH TO NOP\n@ON      EQU   X'F0'               SET SWITCH TO BRANCH\n         SPACE 2\n        $XENT  BASE=(R11,R12)\n         EJECT\n         L     R2,0(R1)            ANALYZE PARM FIELD\n         LH    R1,0(R2)\n         LTR   R1,R1\n         BNP   NOPARM\nPRMLOOP  CLI   2(R2),C','          SEPARATOR ?\n         BE    PRMNXT              YES\n         CLI   2(R2),C'N'          PANELS NAMES ?\n         BE    SETPNL              YES\n         CLI   2(R2),C'I'          INDEX ?\n         BE    SETPIX              YES\n        WTO    MF=(E,MSGINV)\n         LA    R10,4               EXIT CC = 4\n         B     EXIT\nSETPNL   OI    SWITCH,FPNML\n         B     PRMNXT\nSETPIX   OI    SWITCH,FPIXL\n         OI    SWPRSS,FHIXA\nPRMNXT   LA    R2,1(R2)\n         BCT   R1,PRMLOOP\nNOPARM   OI    SWPRSS,FMNTA\n        $MOPEN LRECL               ISPF PANELS LIBRARY\n         LTR   R10,R15\n         BNZ   EXIT\n         CLC   LRECL,=F'80'        VALID LOGICAL RECORD LENGTH\n         BE    RCTL\n        WTO    MF=(E,MSGLRL)\n         LA    R10,8               EXIT CC = 8\n         B     EXIT\nRCTL    $READ  CARD                READ A CARD\n         LTR   R10,R15\n         BM    SWDTE               EOF\n         BNZ   EXIT\n         MVC   SCANPT,=A(CARD)\n         LM    R3,R5,SCANPT\n         CLC   CARD(5),=CL5'*HDR ' SET HEADER TEXT ?\n         BE    SHDR                YES\n         TM    SWPRSS,FMNTA        CAN ACCEPT MANUAL CARD ?\n         BZ    THIXV               NO\n         CLC   CARD(5),=CL5'*MNT ' SET MANUAL TEXT ?\n         BE    SMNT                YES\nTHIXV    TM    SWPRSS,FHIXA        CAN ACCEPT INDEX HEADER CARD ?\n         BZ    TSRZV               NO\n         CLC   CARD(5),=CL5'*HIX ' SET HEADER TEXT FOR INDEX ?\n         BNE   TSRZV               NO\n         MVI   HXTXT,C' '\n         MVC   HXTXT+1(L'HXTXT-1),HXTXT\n         LA    R2,HXTXT\n         B     SETH\nSMNT    $GDATE DTDAY,,WORK\n         LTR   R15,R15\n         BZ    DTEOK\n         LA    R10,100(R15)        EXIT CC = 10X\n        WTO    MF=(E,MSGDTE)\n         B     EXIT\nDTEOK    MVC   DTDTE(2),WORK+2\n         MVC   DTDTE+3(2),WORK\n         MVC   DTDTE+6(2),WORK+4\n         MVI   NTTXT,C' '\n         MVC   NTTXT+1(L'NTTXT-1),NTTXT\n         LA    R2,NTTXT\n         NI    SWDTS+1,@OFF\n         NI    SWDTE+1,@OFF\n         B     SETH\nSHDR     MVI   HDTXT,C' '\n         MVC   HDTXT+1(L'HDTXT-1),HDTXT\n         LA    R2,HDTXT\n         NI    SWITCH,255-FLFLF\n         TM    SWITCH,FPIXL\n         BZ    *+L'*+4\n         OI    SWITCH,FHDIX\nSETH     LA    R3,5(R3)            SCAN TO HANDLE HEADER TEXT\n         CLI   0(R3),C' '          SEARCH START TEXT\n         BNE   *+L'*+8\n         BXLE  R3,R4,*-8\n         B     RCTL\n         CLI   0(R5),C' '          SEARCH END TEXT\n         BNE   *+L'*+4\n         BCT   R5,*-8\n         SLR   R5,R3               COMPUTE EX LENGTH OF TEXT\n         EX    R5,*+L'*+4          MOVE HEADER TEXT\n         B     RCTL\n         MVC   0(*-*,R2),0(R3)    << EXECUTED >>\nTSRZV    CLC   CARD(5),=CL5'*RZV ' RESET ALL VARIABLES NAMES ?\n         BNE   TSVAR               NO\n         L     R1,VARSTR           YES, SET CURRENT POINTER\n         ST    R1,VARCUR             TO LOOK AT START ADDRESS\n         B     RCTL\nTSVAR    CLC   CARD(5),=CL5'*VAR ' VARIABLES NAMES DEFINITION ?\n         BNE   TSRZR               NO\n         ICM   R1,B'1111',VARCUR\n         BNZ   VARSC\n         L     R0,VARLGH           ACQUIRE SPACE\n        GETMAIN R,LV=(0)\n         ST    R1,VARSTR           START ADDRESS\n         ST    R1,VARCUR           CURRENT POINTER\n         LR    R0,R1\n         AL    R1,VARLGH\n         ST    R1,VAREND           END + 1 ADDRESS\n         L     R1,VARLGH\n         LA    R14,*\n         XR    R15,R15\n         MVCL  R0,R14              CLEAR TO ALL ZEROS\n         L     R1,VARCUR\nVARSC    LA    R3,5(R3)            SCAN TO EXTRACT VARIABLE NAMES\n         CLI   0(R3),C' '          SEARCH A VARIABLE NAME\n         BNE   *+L'*+8\nVARSRC   BXLE  R3,R4,*-8\n         B     RCTL\n         LR    R2,R3               START OF A NAME\n         BXLE  R3,R4,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R3),C' '\n         BNE   *-12\n         LR    R14,R3              COMPUTE NAME LENGTH\n         SLR   R14,R2\n         LA    R15,0(R1,R14)       SPACE NEEDED\n         CL    R15,VAREND          MAY BE STORED ?\n         BNL   VAROV               NO, SPACE OVERFLOW\n         BCTR  R14,0\n         STC   R14,0(R1)           STORE NAME EX LENGTH\n         EX    R14,MVVAR           STORE NAME\n         LA    R1,1(R15)\n         ST    R1,VARCUR           NEW CURRENT POINTER\n         B     VARSRC\nMVVAR    MVC   1(*-*,R1),0(R2)     << EXECUTED >>\nVAROV   WTO    MF=(E,MSGVOV)\n         LA    R10,12              EXIT CC = 12\n         B     EXIT\nTSRZR    CLC   CARD(5),=CL5'*RZR ' RESET ALL TEXT STRINGS ?\n         BNE   TSREP               NO\n         L     R1,REPSTR           YES, SET CURRENT POINTER\n         ST    R1,REPCUR             TO LOOK AT START ADDRESS\n         B     RCTL\nTSREP    CLC   CARD(5),=CL5'*REP ' TEXT STRINGS DEFINITION ?\n         BNE   SCAN                NO\n         ICM   R1,B'1111',REPCUR\n         BNZ   REPSC\n         L     R0,REPLGH           ACQUIRE SPACE\n        GETMAIN R,LV=(0)\n         ST    R1,REPSTR           START ADDRESS\n         ST    R1,REPCUR           CURRENT POINTER\n         LR    R0,R1\n         AL    R1,REPLGH\n         ST    R1,REPEND           END + 1 ADDRESS\n         L     R1,REPLGH\n         LA    R14,*\n         XR    R15,R15\n         MVCL  R0,R14              CLEAR TO ALL ZEROS\n         L     R1,REPCUR\nREPSC    LA    R3,5(R3)            SCAN TO EXTRACT TEXT STRINGS\n         CLI   0(R3),C' '          SEARCH THE MATCH STRING\n         BNE   *+L'*+8\n         BXLE  R3,R4,*-8\n         B     RCTL\n         CLI   0(R3),C''''\n         BNE   ERRITD\n         BXLE  R3,R4,*+L'*+4\n         B     ERRITD\n         LR    R2,R3               START OF MATCH STRING\nREPSC1   BXLE  R3,R4,*+L'*+4\n         B     ERRITD\n         CLI   0(R3),C''''\n         BNE   REPSC1\n         CLR   R3,R5\n         BNL   ERRITD\n         CLI   1(R3),C' '\n         BE    REPSC2              END OF MATCH STRING\n         CLI   1(R3),C''''\n         BNE   ERRITD\n         LR    R15,R5              DOUBLE APOSTROPHES, SHIFT\n         SLR   R15,R3\n         BCTR  R15,0\n         EX    R15,SHIFT\n         MVI   0(R5),C' '\n         B     REPSC1\nSHIFT    MVC   0(*-*,R3),1(R3)     << EXECUTED >>\nREPSC2   LR    R14,R3              COMPUTE MATCH STRING LENGTH\n         SLR   R14,R2\n         BXLE  R3,R4,*+L'*+6       SEARCH THE REPLACE STRING\n         XR    R0,R0               NULL REPLACE STRING\n         B     REPSC5\n         CLI   0(R3),C' '\n         BE    *-14\n         CLI   0(R3),C''''\n         BNE   ERRITD\n         BXLE  R3,R4,*+L'*+4\n         B     ERRITD\n         LR    R6,R3               START OF REPLACE STRING\nREPSC3   BXLE  R3,R4,*+L'*+4\n         B     ERRITD\n         CLI   0(R3),C''''\n         BNE   REPSC3\n         CLR   R3,R5\n         BNL   ERRITD\n         CLI   1(R3),C' '\n         BE    REPSC4              END OF REPLACE STRING\n         CLI   1(R3),C''''\n         BNE   ERRITD\n         LR    R15,R5              DOUBLE APOSTROPHES, SHIFT\n         SLR   R15,R3\n         BCTR  R15,0\n         EX    R15,SHIFT\n         MVI   0(R5),C' '\n         B     REPSC3\nREPSC4   LR    R0,R3               COMPUTE REPLACE STRING LENGTH\n         SLR   R0,R6\nREPSC5   LA    R15,1(R14)          SPACE NEEDED\n         ALR   R15,R0\n         ALR   R15,R1\n         CL    R15,REPEND          MAY BE STORED ?\n         BNL   REPOV               NO, SPACE OVERFLOW\n         BCTR  R14,0\n         STC   R14,0(R1)           STORE TEXT MATCH EX LENGTH\n         EX    R14,MVMTX           STORE TEXT MATCH\n         LTR   R3,R0\n         BP    *+L'*+8\n         MVI   1(R1),X'FF'         INDICATE NULL REPLACEMENT STRING\n         B     *+L'*+14\n         LA    R2,3(R1,R14)\n         BCTR  R3,0\n         STC   R3,1(R1)            STORE TEXT REPLACE EX LENGTH\n         EX    R3,MVRTX            STORE TEXT REPLACEMENT\n         LA    R1,1(R15)\n         ST    R1,REPCUR           NEW CURRENT POINTER\n         B     RCTL\nMVMTX    MVC   2(*-*,R1),0(R2)     << EXECUTED >>\nMVRTX    MVC   0(*-*,R2),0(R6)     << EXECUTED >>\nERRITD  WTO    MF=(E,MSGITD)\n         LA    R10,16              EXIT CC = 16\n         B     EXIT\nREPOV   WTO    MF=(E,MSGROV)\n         LA    R10,20              EXIT CC = 20\n         B     EXIT\nSCAN     NI    SWPRSS,255-FMNTA-FHIXA\n         CLI   0(R3),C' '          SEARCH A NAME\n         BNE   *+L'*+8\n         BXLE  R3,R4,*-8\n         B     RCTL\n         LR    R1,R3               START OF A NAME\n         BXLE  R3,R4,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R3),C' '\n         BNE   *-12\n         STM   R3,R5,SCANPT\n         LR    R2,R3               COMPUTE LENGTH OF NAME\n         SR    R2,R1\n         CH    R2,=H'8'\n         BNH   MVNM\n         MVC   PNML(L'PNML),0(R1)\n        WTO    MF=(E,MSGNML)\n         LA    R10,24              EXIT CC = 24\n         B     EXIT\nMVNM     MVC   PNAME,=CL8' '\n         BCT   R2,*+L'*+6\n         MVC   PNAME(*-*),0(R1)    << EXECUTED >>\n         EX    R2,*-6              GET NAME\n        $MFIND PNAME               SET TO READ MEMBER\n         LTR   R10,R15\n         BNZ   EXIT\n         L     R0,=A(PANEL)        RESET PANEL LINES POOL\n         LR    R7,R0\n         L     R1,=A(24*L'PANEL)\n         LA    R14,*\n         XR    R15,R15\n         ICM   R15,B'1000',=CL8' '\n         MVCL  R0,R14\n         L     R6,=A(TRTAB)        RESET TRANSLATE TABLE\n         XC    0(256,R6),0(R6)\n         NI    SWITCH,255-FBODY-FATTR-FTRTB\nRTXT    $MREAD TEXT                READ MEMBER TEXT\n         LTR   R10,R15\n         BM    SWDTS               NO MORE, END OF MEMBER TEXT\n         BNZ   EXIT\n         TM    SWITCH,FBODY        BODY SECTION CURRENT ?\n         BO    PRBDY               YES\n         TM    SWITCH,FATTR        ATTRIBUTE SECTION CURRENT ?\n         BO    TBODY               YES\n         CLC   TEXT(6),=CL6')ATTR '     ATTRIBUTE SECTION ?\n         BNE   TBODY               NO\n         OI    SWITCH,FATTR        YES\nLDFLT    LM    R3,R5,TEXTPT        LOOK FOR DEFAULT\n         CLI   0(R3),C' '\n         BNE   *+L'*+8\nSDFLT    BXLE  R3,R4,*-8\n         B     RTXT\n         CLC   0(8,R3),=CL8'DEFAULT('\n         BE    HDFLT\n         BXLE  R3,R4,*+L'*+4\n         B     RTXT\n         CLI   0(R3),C' '\n         BNE   *-12\n         B     SDFLT\nHDFLT    LA    R3,8(R3)\n         XR    R1,R1\n         CLI   0(R3),C')'\n         BE    *+L'*+12\n         IC    R1,0(R3)\n         STC   R1,0(R1,R6)\n         BXLE  R3,R4,*-16\n         OI    SWITCH,FTRTB        SAY TRANSLATE TABLE DEFAULTS BUILDED\n         B     RTXT\nTBODY    CLC   TEXT(6),=CL6')BODY '     BODY SECTION ?\n         BNE   TEST                NO\n         OI    SWITCH,FBODY        YES\n         B     LDFLT\nTEST     TM    SWITCH,FATTR        ATTRIBUTE SECTION CURRENT ?\n         BZ    STBDY               NO\n         LA    R3,TEXT             LOOK FOR DEFINITION\n         LM    R4,R5,TEXTPT+4\n         CLI   0(R3),C' '\n         BNE   *+L'*+8\n         BXLE  R3,R4,*-8\n         B     RTXT\n         LR    R15,R3\n         CLI   1(R3),C' '          ONLY ONE CHARACTER ?\n         BNE   RTXT                NO, BYPASS, UNKNOWN OR COMMENT\n         BXLE  R3,R4,*+L'*+4\n         B     RTXT\n         CLI   0(R3),C' '\n         BE    *-12\n         CLC   0(5,R3),=CL5'TYPE('\n         BNE   RTXT                BYPASS, UNKNOWN\n         XR    R1,R1\n         IC    R1,0(R15)\n         STC   R1,0(R1,R6)\n         B     RTXT\nSTBDY    OI    SWITCH,FBODY        SET BODY SECTION CURRENT\nPRBDY    TM    SWITCH,FTRTB        TRANSLATE TABLE DEFAULTS BUILDED ?\n         BO    MVINP               YES\n         LA    R0,L'DEFLT          NO, BUILD IT WITH DEFAULTS\n         XR    R1,R1\n         LA    R15,DEFLT\n         IC    R1,0(R15)\n         STC   R1,0(R1,R6)\n         LA    R15,1(R15)\n         BCT   R0,*-12\n         OI    SWITCH,FTRTB        SAY TRANSLATE TABLE DEFAULTS BUILDED\nMVINP    CLI   TEXT,C')'           END OF BODY SECTION ?\n         BE    SWDTS               YES\n         LA    R1,TEXT\n         LA    R15,L'TEXT\n         XR    R2,R2\nCLOOP    LR    R0,R1\n         EX    R15,TRINP           CLEAN LINE\n         BZ    EXREP               BRANCH LINE CLEANED\n         BP    CLLAST              BRANCH IF LAST BYTE\n         MVI   0(R1),C' '          CLEAN BYTE\n         LR    R14,R1              COMPUTE NUMBER\n         SLR   R14,R0                OF BYTES\n         LA    R14,1(R14)              PROCESSED\n         LA    R1,1(R1)            NEXT POINTER\n         SLR   R15,R14             REMAINING BYTES\n         XR    R2,R2               LOOK IF VARIABLE NAME\n         ICM   R14,B'1111',VARSTR    TO BE ELIMINATED\n         BZ    CLOOP\nSCVART   CL    R14,VARCUR\n         BNL   CLOOP\n         IC    R2,0(R14)\n         EX    R2,CLVNME\n         BE    RSVAR\n         LA    R14,2(R2,R14)\n         B     SCVART\nRSVAR    EX    R2,RSVNME\n         LA    R2,1(R2)\n         AR    R1,R2\n         SR    R15,R2\n         BP    CLOOP\n         B     EXREP\nTRINP    TRT   0(*-*,R1),0(R6)     << EXECUTED >>\nCLVNME   CLC   0(*-*,R1),1(R14)    << EXECUTED >>\nRSVNME   MVC   0(*-*,R1),=CL8' '   << EXECUTED >>\nCLLAST   MVI   0(R1),C' '          CLEAN LAST BYTE\nEXREP    L     R14,REPSTR\n         CL    R14,REPCUR          LOOK IF STRING REPLACEMENTS\n         BNL   MVTOPP              NO\n         XR    R15,R15             YES, PROCESS\n         IC    R15,0(R14)\n         LA    R3,TEXT\n         LM    R4,R5,TEXTPT+4\nEXR1     CLI   0(R3),C' '\n         BNE   EXR4\nEXR2     BXLE  R3,R4,EXR1\n         CLI   1(R14),X'FF'\n         BNE   EXR3\n         LA    R14,3(R14,R15)\n         B     EXREP+L'EXREP\nEXR3     XR    R1,R1\n         IC    R1,1(R14)\n         LA    R14,4(R14,R15)\n         ALR   R14,R1\n         B     EXREP+L'EXREP\nEXR4     EX    R15,EXRCLC\n         BNE   EXR2\n         CLI   1(R14),X'FF'\n         BNE   EXR5\n         LA    R1,1(R3,R15)        NULL STRING = DELETE\n         MVC   0(L'TEXT,R3),0(R1)\n         B     EXR4\nEXR5     XR    R1,R1\n         IC    R1,1(R14)\n         CLR   R15,R1\n         BH    EXR6\n         BL    EXR7\n         LA    R2,3(R14,R15)       MATCH .EQ. REPLACE\n         EX    R1,EXRMV1\n         ALR   R3,R15\n         B     EXR2\nEXR6     LA    R2,3(R14,R15)       MATCH .GT. REPLACE\n         EX    R1,EXRMV1\n         LA    R2,1(R3,R15)\n         LA    R3,1(R3,R1)\n         MVC   0(L'TEXT,R3),0(R2)\n         B     EXR1\nEXR7     LR    R0,R1               MATCH .LT. REPLACE\n         LA    R2,1(R3,R15)\n         LR    R1,R5\n         SLR   R1,R2\n         EX    R1,EXRMV2\n         STM   R1,R2,WORK\n         LR    R1,R0\n         LA    R2,3(R14,R15)\n         EX    R1,EXRMV1\n         LA    R3,1(R3,R1)\n         LM    R1,R2,WORK\n         EX    R1,EXRMV3\n         MVI   TEXT+L'TEXT,C' '\n         MVC   TEXT+L'TEXT+1(L'TEXT-1),TEXT+L'TEXT\n         B     EXR2\nEXRCLC   CLC   0(*-*,R3),2(R14)    << EXECUTED >>\nEXRMV1   MVC   0(*-*,R3),0(R2)     << EXECUTED >>\nEXRMV2   MVC   L'TEXT(*-*,R2),0(R2)     << EXECUTED >>\nEXRMV3   MVC   0(*-*,R3),L'TEXT(R2)     << EXECUTED >>\nMVTOPP   MVC   6(L'TEXT,R7),TEXT   MOVE LINE TO PANEL POOL\n         AL    R7,PLGTH\n         B     RTXT\nSWDTS    B     PPNLL\n         OI    SWDTS+1,@ON\n         XR    R5,R5\n         TM    SWITCH,FPIXL        INDEX REQUESTED ?\n         BZ    *+L'*+4             NO\n         LA    R5,DDIX\n         BAS   R8,PMNTX\nPPNLL    TM    SWITCH,FLFLF\n         BO    HALFPG\n         MVC   HDPGN,=XL6'4B2020202120'\n         ED    HDPGN,PGN\n         AP    PGN,=PL1'+1'\n        $PRINT HDLINE,PLGTH        HEADER PAGE LINE\n         LTR   R10,R15\n         BNZ   EXIT\n         MVI   PNLCC,C'0'          SET DOUBLE SPACE\n         TM    SWITCH,FPIXL+FHDIX  INDEX REQUESTED ?\n         BNO   HALFPG+L'HALFPG     NO OR NO HEADER CHANGE\n         MVC   IXTXT,HDTXT         SET HEADER TEXT\n         LA    R0,IXTXT\n         LA    R1,IXTXT+L'IXTXT-2\nPIXLN1   CLC   0(2,R1),=CL8' '\n         BNE   PIXLN2\n         MVI   1(R1),C'.'\n         BCTR  R1,0\n         BCTR  R1,0\n         CLR   R1,R0\n         BH    PIXLN1\n         CLC   0(2,R1),=CL8' '\n         BNE   PIXLN2\n         MVC   0(2,R1),=CL2'??'\nPIXLN2   MVC   IXPGN,HDPGN         SET WHERE PAGE NUMBER\n         LA    R1,IXPGN\n         CLI   0(R1),C'.'\n         BNE   *+L'*+12\n         MVI   0(R1),C' '\n         LA    R1,1(R1)\n         B     *-16\n         CP    XLNE,=P'+55'\n         BL    PIXLN3\n         MVC   HXPGN,=XL6'4B2020202120'\n         ED    HXPGN,XPGN\n        $PRINT HXLINE,PLGTH,DDIX   INDEX HEADER LINE\n         LTR   R10,R15\n         BNZ   EXIT\n        $PRINT TXLINE,PLGTH,DDIX   INDEX TITLE LINE\n         LTR   R10,R15\n         BNZ   EXIT\n        $PRINT SXLINE,PLGTH,DDIX   INDEX UNDER LINE\n         LTR   R10,R15\n         BNZ   EXIT\n         AP    XPGN,=P'+1'\n         ZAP   XLNE,=P'+5'\n         MVI   IXCC,C'0'           SET DOUBLE SPACE\nPIXLN3  $PRINT IXLINE,PLGTH,DDIX   INDEX LINE\n         LTR   R10,R15\n         BNZ   EXIT\n         AP    XLNE,=P'+1'\n         MVI   IXCC,C' '           SET SINGLE SPACE\n         NI    SWITCH,255-FHDIX\n         B     HALFPG+L'HALFPG\nHALFPG   MVI   PNLCC,C'-'          SET TRIPLE SPACE\n         XI    SWITCH,FLFLF\n         L     R2,=A(PANEL)        ADDRESS OF PANEL LINES\n         TM    SWITCH,FPNML\n         BZ    NOPNM\n         MVC   PNLNM,PNAME\n        $PRINT PNLINE,PLGTH        PANEL NAME LINE\n         LTR   R10,R15\n         BNZ   EXIT\n         B     NOPNM+L'NOPNM\nNOPNM    MVC   0(1,R2),PNLCC\n         LA    R3,24\nLOOP    $PRINT (R2),PLGTH          PANEL LINE\n         LTR   R10,R15\n         BNZ   EXIT\n         AL    R2,PLGTH\n         BCT   R3,LOOP\n         LM    R3,R5,SCANPT\n         B     SCAN\nSWDTE    B     SETCC\n         XR    R5,R5\n         BAS   R8,PMNTX\nSETCC    XR    R10,R10             EXIT CC = 0\nEXIT     ICM   R1,B'1111',REPSTR\n         BZ    FRVAR\n         L     R0,REPLGH\n        FREEMAIN R,A=(1),LV=(0)\nFRVAR    ICM   R1,B'1111',VARSTR\n         BZ    CLALL\n         L     R0,VARLGH\n        FREEMAIN R,A=(1),LV=(0)\nCLALL   $MCLOSE\n        $RCLOSE\n        $PCLOSE\n        $XRET  CC=(R10)\n         SPACE 2\n*        PRINT MANUAL PAGE ROUTINE.\n         SPACE 1\nPMNTX    NI    SWMNT+1,@OFF\nPMNTX1   L     R2,=A(MANUAL)\n         XR    R3,R3\n         LR    R4,R3\nPMNTX2   ICM   R3,B'0001',0(R2)\n         BZ    PMNTX4\n         MVC   MTCC(1),2(R2)\n         MVI   MTTXT,C' '\n         MVC   MTTXT+1(L'MTTXT-1),MTTXT\n         ICM   R4,B'0001',1(R2)\n         BZ    PMNTX3\n         LR    R1,R4\n         BCTR  R1,0\n         EX    R1,PMNTXMV\nPMNTX3  $PRINT MTLINE,PLGTH,(R5)\n         LTR   R10,R15\n         BNZ   EXIT\n         BCT   R3,PMNTX3\n         LA    R2,3(R4,R2)\n         B     PMNTX2\nPMNTX4  $PRINT NTLINE,PLGTH,(R5)\n         LTR   R10,R15\n         BNZ   EXIT\n        $PRINT DTLINE,PLGTH,(R5)\n         LTR   R10,R15\n         BNZ   EXIT\nSWMNT    BR    R8\n         OI    SWMNT+1,@ON\n         B     PMNTX1\nPMNTXMV  MVC   MTTXT(*-*),3(R2)    << EXECUTED >>\n         EJECT\n*        CONSTANTS AND WORK AREAS.\n*        -------------------------\n         SPACE 1\nSCANPT   DC    A(*-*,1,CARD+71)\nTEXTPT   DC    A(TEXT+6,1,TEXT+79)\nWORK     DC    2F'0'\nVARSTR   DC    F'0'\nVARCUR   DC    F'0'\nVAREND   DC    F'0'\nVARLGH   DC    F'1024'\nREPSTR   DC    F'0'\nREPCUR   DC    F'0'\nREPEND   DC    F'0'\nREPLGH   DC    F'1024'\nLRECL    DC    F'0'\nPLGTH    DC    A(L'PANEL)\n         SPACE 1\nCARD     DC    CL80' '\nTEXT     DC    CL80' ',CL80' '\nPNAME    DC    CL8' '\nDDIX     DC    CL8'SYSINDEX'\n         SPACE 1\nMTLINE   DS    0CL86               (MUST MATCH L'PANEL)\nMTCC     DC    CL6' '\nMTTXT    DC    CL70' ',CL10' '\nNTLINE   DS    0CL86               (MUST MATCH L'PANEL)\n         DC    CL13'0     NAME : '\nNTTXT    DC    CL70' ',CL3' '\nDTLINE   DS    0CL86               (MUST MATCH L'PANEL)\n         DC    CL13'0     DATE : '\nDTDTE    DC    CL8'  /  /  ',CL4' (  '\nDTDAY    DC    CL20' ',CL41') '\nHDLINE   DS    0CL86               (MUST MATCH L'PANEL)\n         DC    CL6'1 '\nHDTXT    DC    CL70' ',CL4'PAGE'\nHDPGN    DC    CL6' '\nPNLINE   DS    0CL86               (MUST MATCH L'PANEL)\nPNLCC    DC    CL6'0 ',CL13'PANEL NAME :'\nPNLNM    DC    CL8' ',CL59' '\nHXLINE   DS    0CL86               (MUST MATCH L'PANEL)\n         DC    CL6'1 '\nHXTXT    DC    CL70'GENERAL INDEX. ',CL4'PAGE'\nHXPGN    DC    CL6' '\nTXLINE   DS    0CL86               (MUST MATCH L'PANEL)\n         DC    CL6'0 ',CL70'CONTENTS ',CL4' ',CL6' PAGE '\nSXLINE   DS    0CL86               (MUST MATCH L'PANEL)\n         DC    CL6'  ',CL70'-------- ',CL4' ',CL6'------'\nIXLINE   DS    0CL86               (MUST MATCH L'PANEL)\nIXCC     DC    CL6' '\nIXTXT    DC    CL70' ',CL4' '\nIXPGN    DC    CL6' '\n         EJECT\nPGN      DC    PL3'+1'\nXPGN     DC    PL3'+1'\nXLNE     DC    PL2'+60'\nDEFLT    DC    CL3'%+_'\n         SPACE 1\nSWITCH   DC    XL1'0'\nFLFLF    EQU   X'01'               FLIP-FLOP, 2 PANELS PER PAGE\nFBODY    EQU   X'02'               BODY SECTION\nFATTR    EQU   X'04'               ATTRIBUTE SECTION\nFTRTB    EQU   X'08'               TRANSLATE TABLE DEFAULTS BUILDED\nFPNML    EQU   X'10'               PRINT PANEL NAME LINE\nFPIXL    EQU   X'20'               PRINT GENERAL INDEX\nFHDIX    EQU   X'40'               SET HEADER TO INDEX\nSWPRSS   DC    XL1'0'\nFMNTA    EQU   X'80'               ACCEPT MANUAL TEXT\nFHIXA    EQU   X'40'               ACCEPT INDEX HEADER TEXT\n         SPACE 1\n        LTORG\n         EJECT\n        PRINT  NOGEN\nMSGINV  WTO    '--- INVALID PARM= FIELD SPECIFIED.',                   1\n               ROUTCDE=11,DESC=7,MF=L\nMSGLRL  WTO    '--- SYSPDS   - LOGICAL RECORD LENGTH IS NOT 80.',      1\n               ROUTCDE=11,DESC=7,MF=L\nMSGITD  WTO    '--- SYSIN    - INVALID TEXT STRING DELIMITERS.',       1\n               ROUTCDE=11,DESC=7,MF=L\nMSGROV  WTO    '--- REPLACE TEXTS AREA OVERFLOW.',                     1\n               ROUTCDE=11,DESC=7,MF=L\nMSGVOV  WTO    '--- VARIABLES NAMES AREA OVERFLOW.',                   1\n               ROUTCDE=11,DESC=7,MF=L\nMSGNML  WTO    '--- SYSIN    -         ... NAME TOO LONG.',            1\n               ROUTCDE=11,DESC=7,MF=L\nPNML     EQU   MSGNML+19,8\nMSGDTE  WTO    '--- GET CURRENT DAY ROUTINE ERROR.',                   1\n               ROUTCDE=11,DESC=7,MF=L\n         EJECT\n         DS    0F  - - - - - - - - END OF BASE REGISTERS ADDRESSABLITY\nTRTAB    DC    XL256'0'\nPANEL    DC    24CL86' '\n         SPACE 1\nMANUAL   DS    0F\n      @T ,1\n      @T 5,0\n      @T ,,' '\n      @T ,,'                                    COMMISSION OF THE'\n      @T ,,'               *                   EUROPEAN COMMUNITIES'\n      @T ,,'          *         *'\n      @T ,,' '\n      @T ,,'      *                 *         J       R       C'\n      @T ,,'                                   O       E       E'\n      @T ,,'                                    I       S       N'\n      @T ,,'    *                     *          N       E       T'\n      @T ,,'                                      T       A       R'\n      @T ,,'                                               R       E'\n      @T ,,'      *                 *                       C'\n      @T ,,'                                                 H'\n      @T ,,'          *         *'\n      @T ,,'               *'\n      @T ,,'                                  - ISPRA ESTABLISHMENT -'\n      @T ,,' '\n      @T 5,0\n         DC    AL1(0)              END INDICATOR\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UJVD": {"ttr": 25345, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08_\\x00\\x90\\x08_\\x15Q\\x01|\\x01|\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-26T00:00:00", "modifydate": "1990-03-26T15:51:00", "lines": 380, "newlines": 380, "modlines": 0, "user": "SYSPAJA"}, "text": "UJVD     TITLE 'TSO IEFUJV DISPLAY COMMAND.'\n         MACRO\n&LAB    PUTIT  &MESS,&EXIT=RETURN\n         LCLC  &L\n&L       SETC  'L'''\n&LAB    TPUT   M&SYSNDX,&L.M&SYSNDX\n         B     &EXIT\nM&SYSNDX DC    C&MESS\n         MEND\n         SPACE 2\nUJVD     START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *    IEFUJV DISPLAY - TSO COMMAND.    * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n* PURPOSE :    A TSO COMMAND TO OBTAIN THE IEFUJV COMPUTATIONS\n* ---------    INFORMATION (SYSTEM-GROUP RESERVED).\n*\n* COMMAND :    SYNTAX : UJVD  REGION(...) TIME(...) I/O(...) SETUP\n* ---------        OR : UJVD  R(...) T(...) I(...) S\n*\n*               WHERE : R ... : REGION VALUE EXPRESSED IN K.\n*                       T ... : CPUTIME EXPRESSED IN MINUTES AND/OR\n*                               SECONDS (FORMAT MUST BE MMM,SS OR MMM\n*                               OR 0,SS).\n*                       I ... : NUMBER OF I/O'S EXPRESSED IN\n*                               THOUSANDS.\n*                       S     : SETUP COMPUTATIONS.\n*              DEFAULT : ALL OPERANDS HAVE DEFAULT VALUES AS DEFINED\n*                        IN JES2 OR IEFUJV.\n*\n* AUTHOR :     MOINIL P.A.\n* --------     COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*        AUTHORITY LEVELS DEFINITIONS.                          *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nLV0      EQU   0         REJECT LEVEL.\n         SPACE 1\n        $MDL@IX\n         EJECT\nWRKDSECT DSECT                     WORK AREAS DESCRIPTION.\n         SPACE 1\nSVA      DS    18F'0'              SAVE AREA.\n         SPACE 1\nCONV     DC    D'0'\n         SPACE 1\n*        EXTRACT PARAMETER LIST.\n         SPACE 1\nEXTR    EXTRACT *-*,'S',MF=L\n         SPACE 1\nLEXTR    EQU   *-EXTR\n         SPACE 1\nATSO     DC    A(0)\nAPSCB    DC    A(0)\nUJVTADDR DC    A(0)\n         SPACE 1\n*        PARSE PARAMETER LIST (PPL).\n         SPACE 1\nPPLUPT   DC    A(0)\nPPLECT   DC    A(0)\nPPLECB   DC    A(0)\nPPLPCL   DC    A(0)\nPPLANS   DC    A(0)\nPPLCBUF  DC    A(0)\nPPLUWA   DC    A(0)\n         SPACE 1\nPPLECBS  DC    F'0'\nPPLANSS  DC    A(0)\n         SPACE 1\nLPPL     EQU   *-PPLUPT\n         SPACE 1\nPLIST    DC    A(0,0,0,0,0,0)\n         SPACE 1\nREGION   DC    F'0'\nNUMIO    DC    F'0'\nCPUTM    DC    F'0'\n         SPACE 1\nTEXT     DC    CL132' '\nMRES     DC    CL78' '\n         SPACE 1\nAUTH     DC    XL1'0'\nFLRQ     DC    XL1'0'\nSWSU     EQU   X'01'               SETUP COMPUTATIONS.\n         SPACE 1\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(*-*)\nREQAUTL  EQU   *-REQAUT\n         SPACE 1\nWRKL     EQU   (((*-SVA)+7)/8)*8   WORK AREAS LENGTH.\n         SPACE 1\nUJVD     CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 2\n*        'IEFUJV' COMMUNICATION.\n*        -----------------------\n         SPACE 1\nLDES     DSECT                     LINE DESCRIPTION (D-ARGUMENT).\n         SPACE 1\nLNE      DS    0CL132,CL5\nRGV      DS    CL8,CL2\nIOV      DS    CL8,CL3\nTMV      DS    CL4,C\nTSV      DS    CL2,CL10\nPRIO     DS    CL1,CL2\nIOX      DS    CL8,CL2\nWGV      DS    CL8,CL3\nCLV      DS    CL1,CL4\nPGV      DS    CL4\n         SPACE 1\nFILL     EQU   0+L'LNE-(*-LNE)\n         DS    (FILL)C\n         SPACE 1\nUJVD     CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 2\n        PRINT  NOGEN\n        CVT    DSECT=YES,LIST=YES\n        IKJPSCB\n        IKJEBECA\nUJVD     CSECT                     RESTORE ORIGINAL CSECT.\n        PRINT  GEN\n         SPACE 1\nUJVD     CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\n        IKJCPPL\n         SPACE 1\nUJVD     CSECT                     RESTORE ORIGINAL CSECT.\n         EJECT\n        $UJVT\n         EJECT\n        $DEFREG\n        $XENT  BASE=(R12),LV=WRKL,TYPE=RENT\n         EJECT\n         LR    R11,R13             SET WORK AREAS ADDRESSABILITY.\n         USING WRKDSECT,R11\n         LR    R10,R1              SAVE FOR LATER CONTROL.\n         MVC   EXTR(LEXTR),EXTRP\n         XC    ATSO(L'ATSO+L'APSCB+L'UJVTADDR),ATSO\n        EXTRACT ATSO,'S',FIELDS=(TSO,PSB),MF=(E,EXTR)\n         L     R2,ATSO\n         TM    0(R2),X'80'\n         BZ    NOTTSO              NOT TSO ADDRESS SPACE.\n         L     R2,APSCB            PSCB ADDRESS.\n         LTR   R2,R2\n         BZ    NOTTSO              WE ARE'NT IN TSO.\n         USING CPPL,R10            SET CPPL ADDRESSABILITY.\n         USING PSCB,R2\n         CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS?\n         BNE   *+L'*+10            NO.\n         DROP  R2\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS?\n         BE    OK                  YES, TSO COMMAND.\n         LR    R2,R10\n         USING IKJEBECA,R2\n         L     R10,CAPTTMP         CPPL ADDRESS.\n         DROP  R2\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS?\n         BNE   ERROR0              NO, NOT TSO SUB-COMMAND.\n         EJECT\nOK       XC    REQAUT(REQAUTL),REQAUT\n         MVC   REQAUT+1(3),=AL3(MDL@IX)\n         LA    R1,AUTH\n         ST    R1,REQAUT+4\n        $EACM  REQAUT\n         CLI   AUTH,LV0            AUTHORIZED?\n         BE    ERROR1              NO.\n         SPACE 1\n*        SET PARSE PARAMETER LIST.\n         SPACE 1\n         XC    PPLUPT(LPPL),PPLUPT\n         MVC   PPLUPT,CPPLUPT\n         MVC   PPLECT,CPPLECT\n         LA    R1,PPLECBS\n         ST    R1,PPLECB\n         MVC   PPLPCL,=A(PARMLST)\n         LA    R1,PPLANSS\n         ST    R1,PPLANS\n         MVC   PPLCBUF,CPPLCBUF\n         DROP  R10\n         SPACE 1\n*        LINK TO PARSE.\n         SPACE 1\n        CALLTSSR EP=IKJPARS,MF=(E,PPLUPT)\n         B     *+L'*(R15)          BRANCH ON RETURN CODE.\n         B     PARSOK               0 - SUCCESSFULL.\n         B     ERROR2               4 - UNABLE TO PROMPT.\n         B     RETURN               8 - USER ATTENTION OCCURRED.\n         B     ERROR3              12 - PROGRAM BUG.\n         B     ERROR4              16 - SPACE UNAVAILABLE IN REGION.\n         B     ERROR5              20 - INVALID PARM.\n         B     ERROR6              24 - PARM. CONFLICT.\n         B     ERROR7              28 - TERMINAL DISCONNECTED.\n         SPACE 1\n*        HANDLE REQUESTS.\n         SPACE 1\nPARSOK   L     R3,PPLANSS          CHECK ANSWER.\n         LA    R3,0(R3)\n         LTR   R3,R3\n         BZ    ERROR8\n         USING IKJPARMD,R3         SET PDE'S ADDRESSABILITY.\n         L     R15,=V(SUJVTA)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   NOTFND\n         ST    R1,UJVTADDR\n         LR    R6,R1\n         USING UVTDSECT,R6\n         CLI   PDRG+1,0            REGION SPECIFIED?\n         BE    NORG                NO.\n         TM    SDRG+6,X'80'        VALUE PRESENT?\n         BZ    NORG                NO.\n         LH    R14,SDRG+4          GET LENGTH.\n         LTR   R14,R14             LENGTH ZERO?\n         BNP   NORG                YES.\n         L     R1,SDRG             POINT TO VALUE.\n         BCTR  R14,0\n         EX    R14,GVAL\n         CVB   R1,CONV             GET BINARY VALUE.\n         B     NORG+L'NORG\nNORG     L     R1,DEFREG           GET DEFAULT.\n         ST    R1,REGION\n         CLI   PDTM+1,0            TIME SPECIFIED?\n         BE    NOTM                NO.\n         XR    R5,R5\n         LA    R2,SDTM             R2 ---> FIRST PDE IN LIST.\n         TM    6(R2),X'80'         MINUTES GIVEN?\n         BZ    NOMIN               NO.\n         LH    R14,4(R2)           GET LENGTH.\n         LTR   R14,R14             LENGTH ZERO?\n         BNP   NOMIN               YES.\n         L     R1,0(R2)            POINT TO VALUE.\n         BCTR  R14,0\n         EX    R14,GVAL\n         CVB   R5,CONV             GET BINARY VALUE.\n         MH    R5,=H'60'           CHANGE MINUTES IN SECONDS.\nNOMIN    CLI   8(R2),X'FF'         ONLY MINUTES GIVEN?\n         BE    NOSEC               YES.\n         L     R2,8(R2)            R2 ---> NEXT PDE IN LIST.\n         CLI   8(R2),X'FF'         ANY OTHER IN LIST?\n         BNE   INVTM               YES, WHAT'S THAT.\n         LH    R14,4(R2)           GET LENGTH.\n         LTR   R14,R14             LENGTH ZERO?\n         BNP   NOSEC               YES.\n         L     R1,0(R2)            POINT TO VALUE.\n         BCTR  R14,0\n         EX    R14,GVAL\n         CVB   R1,CONV             GET BINARY VALUE.\n         CH    R1,=H'60'           VALID SECONDS SPECIFIED?\n         BNL   INVTM               NO, WHAT'S THAT.\n         AR    R5,R1               COMPUTE TOTAL TIME IN SECONDS.\nNOSEC    LTR   R5,R5               TRUE TIME REQUEST?\n         BNP   NOTM                NO.\n         C     R5,=A(10*60*60)     OVER MAXIMUM?\n         BNH   NOTM+L'NOTM         NO.\n         L     R5,=A(10*60*60)     SET MAXIMUM.\n         BNH   NOTM+L'NOTM\nNOTM     L     R5,DEFTIME          GET DEFAULT.\n         ST    R5,CPUTM\n         CLI   PDIO+1,0            I/O SPECIFIED?\n         BE    NOIO                NO.\n         TM    SDIO+6,X'80'        VALUE PRESENT?\n         BZ    NOIO                NO.\n         LH    R14,SDIO+4          GET LENGTH.\n         LTR   R14,R14             LENGTH ZERO?\n         BNP   NOIO                YES.\n         L     R1,SDIO             POINT TO VALUE.\n         BCTR  R14,0\n         EX    R14,GVAL\n         CVB   R1,CONV             GET BINARY VALUE.\n         C     R1,=A(2*60*60)      OVER MAXIMUM?\n         BNH   NOIO+L'NOIO         NO.\n         L     R1,=A(2*60*60)      SET MAXIMUM.\n         B     NOIO+L'NOIO\nNOIO     LH    R1,=H'100'          GET DEFAULT.\n         ST    R1,NUMIO\n         MVI   FLRQ,0\n         CLI   PDOP+1,1            SET SETUP OPTION IF SPECIFIED.\n         BNE   STLST\n         OI    FLRQ,SWSU\n         DROP  R3\n         SPACE 1\n*        SET UP CALL TO IEFUJV.\n         SPACE 1\nSTLST    LA    R1,PLIST\n         LA    R2,REGION\n         LA    R3,NUMIO\n         LA    R4,CPUTM\n         LA    R5,TEXT\n         LA    R7,FLRQ\n         STM   R2,R7,0(R1)\n        CALL   IEFUJV\n         DROP  R6\n         SPACE 1\n*        SEND RESULTS TO USER AND RETURN.\n         SPACE 1\n         LA    R2,TEXT\n         USING LDES,R2\n         MVI   MRES,C'R'\n         MVC   MRES+1(L'RGV),RGV\n         MVC   MRES+L'RGV+1(3),=C', I'\n         MVC   MRES+L'RGV+4(L'IOV),IOV\n         MVC   MRES+L'RGV+L'IOV+4(3),=C', T'\n         MVC   MRES+L'RGV+L'IOV+7(L'TMV+L'TSV+1),TMV\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+8(5),=C'/ PR '\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+13(1),PRIO\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+14(5),=C', CL '\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+19(1),CLV\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+20(5),=C', PG '\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+25(L'PGV-1),PGV+1\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+L'PGV+24(4),=C' (JX'\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+L'PGV+28(L'IOX),IOX\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+L'PGV+L'IOX+28(4),=C', JW'\n         MVC   MRES+L'RGV+L'IOV+L'TMV+L'TSV+L'PGV+L'IOX+32(L'WGV),WGV\n         MVI   MRES+L'RGV+L'IOV+L'TMV+L'TSV+L'PGV+L'IOX+L'WGV+32,C')'\n         DROP  R2\n         LA    R0,33+L'RGV+L'IOV+L'TMV+L'TSV+L'PGV+L'IOX+L'WGV\n         LA    R1,MRES\n        TPUT   (1),(0)\nRETERR  IKJRLSA PPLANSS\n         OC    UJVTADDR,UJVTADDR\n         BZ    RETURN\n         L     R15,=V(DUJVTA)\n         BASR  R14,R15\n         SPACE 1\nRETURN  $XRET  CC=0,LV=WRKL,TYPE=RENT\n         EJECT\n        PRINT  NOGEN\nERROR0  PUTIT  'CALL NOT ALLOWED.'\nERROR1  PUTIT  'UNAUTHORIZED COMMAND.'\nERROR2  PUTIT  'INCOMPLETE PARAMETERS AND UNABLE TO PROMPT.'\nERROR3  PUTIT  'PARSE PARAMETER BLOCK INVALID.'\nERROR4  PUTIT  'NOT ENOUGH SPACE IN REGION.'\nERROR5  PUTIT  'INVALID PARAMETERS.'\nERROR6  PUTIT  'PARAMETERS CONFLICT.'\nERROR7  PUTIT  'TERMINAL HAS BEEN DISCONNECTED.'\nERROR8  PUTIT  'PARSE ANSWER ADDRESS ERROR.'\nINVTM   PUTIT  'INVALID TIME(MINUTES,SECONDS) SPECIFIED.',EXIT=RETERR\nNOTFND  PUTIT  'UJVTABLE (IEFUJV) NOT FOUND.',EXIT=RETERR\nNOTTSO  WTO    'NOT ALLOWED OUTSIDE TSO.',ROUTCDE=11,DESC=7\n         B     RETURN\n        PRINT  GEN\n         SPACE 1\nGVAL     PACK  CONV,0(0,R1)        << EXECUTED >>\n         SPACE 1\n         DROP  R11\n         EJECT\n*        INTERNAL CONSTANTS AND WORK AREAS.\n*        ----------------------------------\n         SPACE 1\n*        EXTRACT PARAMETER LIST.\n         SPACE 1\nEXTRP   EXTRACT *-*,'S',MF=L\n         SPACE 2\n        LTORG\n         EJECT\n        PRINT  NOGEN\n         SPACE 1\nPARMLST IKJPARM\nPDRG    IKJKEYWD\n        IKJNAME 'REGION',SUBFLD=SFRG,ALIAS=('R')\nPDTM    IKJKEYWD\n        IKJNAME 'TIME',SUBFLD=SFTM,ALIAS=('T')\nPDIO    IKJKEYWD\n        IKJNAME 'I/O',SUBFLD=SFIO,ALIAS=('I')\nPDOP    IKJKEYWD\n        IKJNAME 'SETUP',ALIAS=('S')\nSFRG    IKJSUBF\nSDRG    IKJIDENT 'SIZE IN K',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=7\nSFTM    IKJSUBF\nSDTM    IKJIDENT 'MINUTES AND/OR SECONDS',LIST,                        X\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3\nSFIO    IKJSUBF\nSDIO    IKJIDENT 'I/O IN 1/1000',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5\n        IKJENDP\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UJVD$": {"ttr": 25352, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//UJVD     JOB (........),'INSTALL - U J V D -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL   SUJVTA                                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,OPT=',RENT',MBR=UJVD\n//ASV     EXEC PAJ2AS2,OPT=',SYSPARM(TSO),RENT',MBR=IEFUJV\n//LNK     EXEC PAJILKC,OPT=',RENT'\n//SYSIN     DD *\n  INCLUDE SYSADD(SUJVTA)\n  ENTRY   UJVD\n  NAME    UJVD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UJVD@": {"ttr": 25354, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x08?\\x00\\x87\\x08?\\x17\\x18\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-03-24T00:00:00", "modifydate": "1987-03-24T17:18:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "SYSPAJA"}, "text": "1   18/10/85\n                                                      UJVD      1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       TSO : 'IEFUJV' DISPLAY        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    A TSO command to obtain the computations information\n  ---------    of the current IEFUJV version.\n\n  Command :    Syntax : UJVD  REGION(...) TIME(...) I/O(...) SETUP\n  ---------        or : UJVD  R(...) T(...) I(...) S\n\n                where : R ... : REGION value expressed in K.\n                        T ... : CPU TIME expressed in minutes and/or\n                                seconds (format must be MMM,SS or MMM\n                                or 0,SS).\n                        I ... : number of I/O's expressed in\n                                thousands.\n                        S     : SETUP computations.\n               Default : all operands have default values as defined\n                         in JES2 or IEFUJV.\n               Output  : response contains priority, class and\n                         performance group (I/O index value and\n                         weight value).\n\n  Authority :  only system group USER-id's are authorized to issue\n  -----------  this command.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UJVT": {"ttr": 25356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08_\\x00\\x90\\x08_\\x15Q\\x02F\\x02F\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-26T00:00:00", "modifydate": "1990-03-26T15:51:00", "lines": 582, "newlines": 582, "modlines": 0, "user": "SYSPAJA"}, "text": "UJVT     TITLE 'TEST IEFUJV COMPUTATIONS.'\nUJVT     START 0\n         SPACE 1\n* INPUT COMMANDS : USE COLUMNS 1 TO 72 INCLUDED.\n* ----------------\n*\n* SKELETON :   VERB  FROM  TO  BY\n*\n*              WHEN 'TO' AND/OR 'BY' ARE OMITTED, USE A ZERO (0) TO\n*              RESET THE REMAINING VALUES IF DESIRED, OTHERWISE\n*              THOSE PREVIOUSLY DEFINED ARE MAINTAINED.\n*              MULTIPLE COMMANDS ARE ACCEPTED ON A CARD, BUT A\n*              COMMAND CANNOT BE CONTINUED ON ANOTHER CARD.\n*\n* VERB :       R - SET REGION IN K.\n*                  I.E. : R 100 1500 100\n*              I - SET I/O NUMBER IN THOUSANDS.\n*                  I.E. : I 2 20 2\n*              T - SET CPU TIME IN SECONDS.\n*                  I.E. : T 10 300 10\n*              G - EXECUTE COMPUTATIONS WITH VALUES GIVEN BY THE\n*                  PREVIOUS VERBS.\n*              P '...TEXT...' COUNT - SKIP PAGE SETTING '...TEXT...'\n*                  AS PAGE HEADER (OPTIONAL, MAX. LENGTH 50), AND\n*                  CLEARING THE PAGE COUNT WITH THE GIVEN VALUE\n*                  (OPTIONAL).\n*                  I.E. : P 'TEST RUN.' 50\n*              L - OUTPUT ON 'SYSPRINT' ONLY (DEFAULT).\n*              C - SUSPEND L OR S COMMAND, MAP CLASSES OUTPUT\n*                  ON 'SYSPRINT'.\n*              M - SUSPEND L OR S COMMAND, MAP PERFORMANCE GROUP\n*                  NUMBERS OUTPUT ON 'SYSPRINT'.\n*              X - SUSPEND L OR S COMMAND, MAP PRIORITIES OUTPUT\n*                  ON 'SYSPRINT'.\n*              S - SUSPEND L OR ANY MAP COMMAND, OUTPUT ON 'SYSPUNCH'\n*                  CARDS HAVING THE FOLLOWING FORMAT :\n*                  COL.  4 - 10 = REGION IN K.\n*                       14 - 20 = I/O NUMBER IN THOUSANDS.\n*                       25 - 30 = CPU TIME IN MINUTES/SECONDS\n*                                 (FORMAT : MMM,SS).\n*                       34 - 40 = I/O INDEX VALUE.\n*                       44 - 50 = WEIGHT VALUE.\n*                            52 = PRIORITY.\n*                            54 = CLASS.\n*                       56 - 58 = PERFORMANCE GROUP NUMBER.\n         EJECT\n* REMARK : WHEN REQUESTING THE MAP OUTPUT, REMEMBER THAT THE VALUES\n*          FOR 'T' AND 'I' ARE RESPECTIVELY TAKEN AS X AND Y\n*          COORDINATES. THIS MEANS :\n*          - 'T' IS NOT CONTROLED TO SEE IF IT EXCEEDS THE MAXIMUM\n*            STEPS VARIATION. FOR EACH T VALUE, A ONE LINE POSITION\n*            IS USED TO STORE THE COMPUTED CLASS OR PRIORITY (MAX. =\n*            100), AND A FOUR LINE POSITIONS ARE USED TO STORE THE\n*            COMPUTED PERFORMANCE GROUP NUMBER (MAX. = 25).\n*          - A PAGE OVERFLOW OCCURS IF 'I' EXCEEDS ABOUT 50 STEPS\n*            VARIATION (FOR EACH I VALUE, A LINE IS PRINTED).\n         SPACE 1\n* AUTHOR :     P.A. MOINIL\n* -------      COMPUTING CENTRE\n*              J.R.C. - ISPRA ESTABLISHMENT\n*              21020 ISPRA (VA), ITALY\n         SPACE 2\n        $DEFREG\n         EJECT\n*        MISCELLANEOUS DEFINITIONS.\n*        --------------------------\n         SPACE 1\nOFF      EQU   X'0F'               SET NOP OPERATION.\nON       EQU   X'F0'               SET BRANCH OPERATION.\nMCF      EQU   0                   MAP CLASSES.\nMPF      EQU   4                   MAP PERFORMANCE GROUP NUMBERS.\nMXF      EQU   8                   MAP PRIORITIES.\n         SPACE 2\n*        'IEFUJV' COMMUNICATION.\n*        -----------------------\n         SPACE 1\nLDES     DSECT                     LINE DESCRIPTION (D-ARGUMENT).\n         SPACE 1\nLNE      DS    0CL132,CL5\nRGV      DS    CL8,CL2\nIOV      DS    CL8,CL3\nTMV      DS    CL4,C\nTSV      DS    CL2,CL10\nPRIO     DS    CL1,CL2\nIOX      DS    CL8,CL2\nWGV      DS    CL8,CL3\nCLV      DS    CL1,CL4\nPGV      DS    CL4\n         SPACE 1\nFILL     EQU   0+L'LNE-(*-LNE)\n         DS    (FILL)C\n         SPACE 1\nUJVT     CSECT                     RESTORE MAIN CSECT.\n         EJECT\n        $UJVT\n         EJECT\n        $XENT  BASE=R10\n         L     R15,=V(SUJVTA)\n         BASR  R14,R15\n         LTR   R15,R15\n         BZ    *+L'*+8\n         LA    R9,256\n         B     EXIT\n         LR    R4,R1\n         ZAP   PCNT,ONE\n         ZAP   LCNT,RSL\n         NI    SWSL+1,OFF\n         NI    SWMP+1,OFF\n        $PRINT TM1,,DDMSG\n         LTR   R15,R15\n         BNZ   EP\n        $PRINT TM2,,DDMSG\n         LTR   R15,R15\n         BNZ   EP\n         EJECT\nREAD    $READ  CARD\n         LTR   R15,R15\n         BM    END\n         BP    ER\n         MVI   CARD+72,C' '\n         MVC   CARD+73(7),CARD+72\n        $PRINT MSG,,DDMSG\n         LTR   R15,R15\n         BNZ   EP\n         LM    R7,R9,SCAN          START COMMANDS SCANNING.\n         CLI   0(R7),C' '\n         BNE   *+L'*+8\nS1       BXLE  R7,R8,*-8\n         B     READ\nS2       CLI   0(R7),C'T'          VERB'S TEST.\n         BNE   *+L'*+8\n         LA    R6,CPUTM\n         B     S3\n         CLI   0(R7),C'R'\n         BNE   *+L'*+8\n         LA    R6,REGSZ\n         B     S3\n         CLI   0(R7),C'I'\n         BNE   *+L'*+8\n         LA    R6,NUMIO\n         B     S3\n         CLI   0(R7),C'G'\n         BE    GO\n         CLI   0(R7),C'P'\n         BE    PT\n         CLI   0(R7),C'L'\n         BE    LC\n         CLI   0(R7),C'S'\n         BE    SC\n         CLI   0(R7),C'C'\n         BE    MC\n         CLI   0(R7),C'M'\n         BE    MP\n         CLI   0(R7),C'X'\n         BE    MX\n         B     EC\n         SPACE 1\nS3       BXLE  R7,R8,*+L'*+4       SET REGION, I/O AND TIME.\n         B     EC\n         CLI   0(R7),C' '\n         BNE   EC\n         BXLE  R7,R8,*+L'*+4\n         B     EC\n         CLI   0(R7),C' '\n         BE    *-12\n         BAS   R14,CVRT\n         BXLE  R7,R8,*+L'*+4\n         B     READ\n         CLI   0(R7),C' '\n         BE    *-12\n         CLI   0(R7),C'0'\n         BL    S2\n         BAS   R14,CVRT\n         BXLE  R7,R8,*+L'*+4\n         B     READ\n         CLI   0(R7),C' '\n         BE    *-12\n         CLI   0(R7),C'0'\n         BL    S2\n         BAS   R14,CVRT\n         B     S1\n         SPACE 1\nLC       NI    SWSL+1,OFF          LIST.\n         NI    SWMP+1,OFF\n         B     S1\n         SPACE 1\nSC       OI    SWSL+1,ON           SUSPEND.\n         NI    SWMP+1,OFF\n         B     S1\n         SPACE 1\nMC       MVI   OPTM,MCF            MAP.\n         B     MSS\nMP       MVI   OPTM,MPF\n         B     MSS\nMX       MVI   OPTM,MXF\nMSS      NI    SWSL+1,OFF\n         OI    SWMP+1,ON\n         ZAP   LCNT,RSL\n         B     S1\n         SPACE 1\nPT       ZAP   LCNT,RSL            SKIP PAGE, SET HEADER AND COUNT.\n         BXLE  R7,R8,*+L'*+4\n         B     READ\n         CLI   0(R7),C' '\n         BE    *-12\n         CLI   0(R7),C''''\n         BNE   T4\n         BXLE  R7,R8,*+L'*+4\n         B     EC\n         MVI   TITT,C' '\n         MVC   TITT+1(L'TITT-1),TITT\n         LA    R0,L'TITT\n         LA    R1,TITT\nT1       CLI   0(R7),C''''\n         BE    T3\nT2       MVC   0(1,R1),0(R7)\n         BCT   R0,*+L'*+4\n         B     EC\n         LA    R1,1(R1)\n         BXLE  R7,R8,T1\n         B     EC\nT3       BXLE  R7,R8,*+L'*+4\n         B     READ\n         CLI   0(R7),C''''\n         BE    T2\n         CLI   0(R7),C' '\n         BNE   EC\n         BXLE  R7,R8,*+L'*+4\n         B     READ\n         CLI   0(R7),C' '\n         BE    *-12\nT4       CLI   0(R7),C'0'\n         BL    S2\n         LA    R6,WORK\n         BAS   R14,CVRT\n         MVC   PCNT(L'PCNT),CONV+L'CONV-L'PCNT\n         B     S1\n         EJECT\nGO       STM   R7,R9,SVSCAN        EXECUTE COMPUTATIONS.\n         L     R7,REGSZ\n         LTR   R7,R7\n         BZ    EC\n         L     R8,NUMIO\n         LTR   R8,R8\n         BZ    EC\n         L     R9,CPUTM\n         LTR   R9,R9\n         BZ    EC\n         SPACE 1\nEXEC     STM   R7,R9,REGION\n        CALL   IEFUJV,(REGION,IO,TIME,TEXT,(R4)),VL\n         SPACE 1\nSWSL     NOP   PCHL\nSWMP     NOP   MAPL\n         CP    LCNT,MAXL\n         BNH   PRT\n         MVC   TITP,MASK\n         ED    TITP,PCNT\n         AP    PCNT,ONE\n         ZAP   LCNT,ONE\n        $PRINT TIT0\n         LTR   R15,R15\n         BNZ   EP\n        $PRINT TIT1\n         LTR   R15,R15\n         BNZ   EP\n        $PRINT TIT2\n         LTR   R15,R15\n         BNZ   EP\nPRT     $PRINT LINE\n         LTR   R15,R15\n         BNZ   EP\n         AP    LCNT,ONE\n         B     TTM\n         SPACE 1\nMAPL     CP    LCNT,MAXL\n         BNH   LOOK\n         ZAP   LCNT,ONE\n         B     SPG\nLOOK     CL    R8,IIO\n         BE    TEST\nLLN     $PRINT LMAP\n         LTR   R15,R15\n         BNZ   EP\n         CL    R7,IRG\n         BE    SMP\n         LA    R14,ITFLS\n         LA    R15,CPUTM\n         LA    R2,3\nLPED     MVC   1(3,R14),MASK+3\n         L     R1,0(R15)\n         C     R1,MSEC\n         BL    NOM\n         XR    R0,R0\n         D     R0,MSEC\n         CVD   R1,CONV\n         ED    0(4,R14),CONV+6\n         B     ESC\nNOM      LR    R0,R1\n         MVC   1(L'TMZ,R14),TMZ\nESC      CVD   R0,CONV\n         UNPK  5(2,R14),CONV+6(2)\n         OI    6(R14),C'0'\n         LA    R14,L'ITFLS(R14)\n         LA    R15,L'CPUTM(R15)\n         BCT   R2,LPED\n        $PRINT TIT6\n         LTR   R15,R15\n         BNZ   EP\n         LTR   R7,R7\n         BZ    GOBS\nSPG      MVC   TITP,MASK\n         ED    TITP,PCNT\n         AP    PCNT,ONE\n        $PRINT TIT0\n         LTR   R15,R15\n         BNZ   EP\n         ST    R7,IRG\n         LA    R14,TEXT\n         USING LDES,R14\n         MVC   TITR,RGV\n         DROP  R14\n        $PRINT TIT3\n         LTR   R15,R15\n         BNZ   EP\n        $PRINT TIT4\n         LTR   R15,R15\n         BNZ   EP\n        $PRINT TIT5\n         LTR   R15,R15\n         BNZ   EP\nSMP      MVC   SMAP(L'SMAP),SMAP-1\n         ST    R8,IIO\n         LA    R14,TEXT\n         USING LDES,R14\n         MVC   LIO(L'LIO),IOV\n         DROP  R14\n         LA    R1,SMAP\n         B     SET\nTEST     L     R1,IX\n         CL    R1,IXL\n         BNL   TTM\nSET      LA    R14,TEXT\n         USING LDES,R14\n         XR    R15,R15\n         IC    R15,OPTM\n         B     *+L'*(R15)\n         B     SETC\n         B     SETM\n         B     SETX\nSETC     MVC   0(1,R1),CLV\n         B     SETOUT\nSETM     MVC   0(L'PGV,R1),PGV\n         LA    R1,L'PGV(R1)\n         B     SETOUT+L'SETOUT\nSETX     MVC   0(1,R1),PRIO\n         DROP  R14\nSETOUT   LA    R1,1(R1)\n         ST    R1,IX\n         B     TTM\nGOL      XR    R7,R7\n         B     LLN\n         SPACE 1\nPCHL     MVI   PCARD,C' '\n         MVC   PCARD+1(L'PCARD-1),PCARD\n         LA    R1,TEXT\n         USING LDES,R1\n         MVC   PREG,RGV\n         MVC   PIO,IOV\n         MVC   PCPU(L'PCPU),TMV\n         MVC   PIOX,IOX\n         MVC   PWG,WGV\n         MVC   PPRIO,PRIO\n         MVC   PCLASS,CLV\n         MVC   PPGN,PGV\n         DROP  R1\n        $PUNCH PCARD\n         LTR   R15,R15\n         BNZ   EU\n         SPACE 1\nTTM      LM    R1,R2,CPUTM+L'CPUTM\n         LTR   R1,R1\n         BZ    TIO\n         LTR   R2,R2\n         BZ    TTM1\n         AR    R9,R2\n         CLR   R9,R1\n         BNH   EXEC\n         B     TTM2\nTTM1     CLR   R9,R1\n         BE    TTM2\n         LR    R9,R1\n         B     EXEC\nTTM2     L     R9,CPUTM\nTIO      LM    R1,R2,NUMIO+L'NUMIO\n         LTR   R1,R1\n         BZ    TRG\n         LTR   R2,R2\n         BZ    TIO1\n         AR    R8,R2\n         CLR   R8,R1\n         BNH   EXEC\n         B     TIO2\nTIO1     CLR   R8,R1\n         BE    TIO2\n         LR    R8,R1\n         B     EXEC\nTIO2     L     R8,NUMIO\nTRG      LM    R1,R2,REGSZ+L'REGSZ\n         LTR   R1,R1\n         BZ    TRG2\n         LTR   R2,R2\n         BZ    TRG1\n         AR    R7,R2\n         CLR   R7,R1\n         BNH   EXEC\n         B     TRG2\nTRG1     CLR   R7,R1\n         BE    TRG2\n         LR    R7,R1\n         B     EXEC\nTRG2     TM    SWMP+1,ON\n         BO    GOL\nGOBS     LM    R7,R9,SVSCAN\n         B     S1\n         EJECT\nEC       MVI   CARD,C' '\n         MVC   CARD+1(L'CARD-1),CARD\n         MVI   0(R7),C'$'\n        $PRINT MSG,,DDMSG\n         LTR   R15,R15\n         BNZ   EP\n        $PRINT INVC,,DDMSG\n         LTR   R15,R15\n         BNZ   EP\n         LA    R9,16\n         B     LEAVE\nEU       LA    R9,12\n         B     LEAVE\nER       LA    R9,8\n         B     LEAVE\nEP       LA    R9,4\n         B     LEAVE\nEND      XR    R9,R9\n         EJECT\nLEAVE    L     R15,=V(DUJVTA)\n         BASR  R14,R15\n        $RCLOSE\n        $PCLOSE\n        $UCLOSE\nEXIT    $XRET  CC=(R9)\n         EJECT\n* CONVERT ROUTINE (INTEGER NUMBER) :\n* ----------------------------------\n*\n*        R0, R1, R2, R3 = WORK REGISTERS.\n*        R6 = ADDRESS OF THE WORD INTO WHICH THE BINARY VALUE OF\n*              THE NUMBER IS STORED. THIS ADDRESS IS INCREMENTED\n*              BY FOUR (NEXT WORD ADDRESS) AT EXIT.\n*        R7, R8, R9 = SCAN POINTERS (R7 POINTS ON THE FIRST DIGIT).\n*        R14 = LINK REGISTER.\n*\n* AT EXIT : 'ZONE' CONTAINS THE NUMBER IN EBCDIC (RIGHT JUSTIFIED).\n*           'CONV' CONTAINS THE NUMBER IN PACKED (RIGHT JUSTIFIED).\n         SPACE 2\nCVRT     XR    R1,R1\n         LA    R0,L'ZONE\n         B     CVRT1\nCVRT0    CLI   0(R7),C' '\n         BE    CVRT2\nCVRT1    CLI   0(R7),C'0'\n         BL    EC\n         CLI   0(R7),C'9'\n         BH    EC\n         LA    R1,1(R1)\n         CLR   R1,R0\n         BH    EC\n         BXLE  R7,R8,CVRT0\nCVRT2    LR    R2,R7\n         SR    R2,R1\n         LA    R3,ZONE+L'ZONE\n         SR    R3,R1\n         MVC   ZONE,ZR\n         BCTR  R1,0\n         EX    R1,CVRTM\n         PACK  CONV,ZONE\n         CVB   R0,CONV\n         ST    R0,0(R6)\n         LA    R6,4(R6)\n         BR    R14\nCVRTM    MVC   0(*-*,R3),0(R2)\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nCONV     DC    D'0'\nWORK     DC    F'0'\nSCAN     DC    A(CARD,1,CARD+71)\nSVSCAN   DC    3F'0'\nREGION   DC    F'0'\nIO       DC    F'0'\nTIME     DC    F'0'\nIRG      DC    F'0'\nIIO      DC    F'0'\nIX       DC    F'0'\nIXL      DC    A(SMAP+L'SMAP)\nMSEC     DC    F'60'\nREGSZ    DC    3F'0'\nNUMIO    DC    3F'0'\nCPUTM    DC    3F'0'\nDDMSG    DC    CL8'SYSLIST '\nZONE     DC    CL10' '\nZR       DC    CL10'0000000000'\nPCNT     DC    PL3'+0'\nLCNT     DC    PL2'+0'\nRSL      DC    PL2'+99'\nMAXL     DC    PL2'+50'\nONE      DC    PL1'+1'\nOPTM     DC    XL1'0'\nTMZ      DC    C'  0'\nMASK     DC    XL6'402020202120'\n         SPACE 1\n         DC    AL1(L'MSG+L'CARD)\nMSG      DC    CL3' '\nCARD     DC    CL80' '\n         DC    AL1(L'LINE)\nLINE     DC    0CL133' ',C' '\nTEXT     DC    CL132' '\n         DC    AL1(L'LMAP)\nLMAP     DC    0CL133' ',CL6' '\nLIO      DC    CL5' ',CL2' '\nSMAP     DC    CL100' ',CL20' '\n         DC    AL1(L'PCARD)\nPCARD    DC    0CL80' ',CL2' '\nPREG     DC    CL8' ',CL2' '\nPIO      DC    CL8' ',CL3' '\nPCPU     DC    CL7' ',CL2' '\nPIOX     DC    CL8' ',CL2' '\nPWG      DC    CL8' ',CL1' '\nPPRIO    DC    CL1' ',CL1' '\nPCLASS   DC    CL1' '\nPPGN     DC    CL4' '\nPFILL    EQU   0+L'PCARD-(*-PCARD)\n         DC    (PFILL)C' '\n         EJECT\n         DC    AL1(TM1L)\nTM1      DC    C'1  INPUT COMMANDS LIST :'\nTM1L     EQU   *-TM1\n         DC    AL1(TM2L)\nTM2      DC    CL3' '\n         DC    (TM1L-3)C'-'\nTM2L     EQU   *-TM2\n         DC    AL1(TIT0L)\nTIT0     DC    C'1',CL2' '\nTITT     DC    CL50' ',CL10' ',C'PAGE'\nTITP     DC    CL6' '\nTIT0L    EQU   *-TIT0\n         DC    AL1(TIT1L)\nTIT1     DC    C'0',CL4' ',C'REGION(K)       I/O  CPU(M,S)       PRIO'\n         DC    C' I/O INDEX    WEIGHT CLASS   PGN'\nTIT1L    EQU   *-TIT1\n         DC    AL1(TIT2L)\nTIT2     DC    C' ',CL4' ',C'---------  --------  --------       ----'\n         DC    C' --------- --------- -----   ---'\nTIT2L    EQU   *-TIT2\n         DC    AL1(TIT3L)\nTIT3     DC    C'0  REGION :'\nTITR     DC    CL8' ',C'K.'\nTIT3L    EQU   *-TIT3\n         DC    AL1(L'TIT4)\nTIT4     DC    C'0  I/O(1000)'\n         DC    AL1(L'TIT5)\nTIT5     DC    C'   ---------'\n         DC    AL1(TIT6L)\nTIT6     DC    C'0  CPU(M,S) : FROM'\nITFLS    DC    C' MMM,SS TO',C' MMM,SS BY MMM,SS.'\nTIT6L    EQU   *-TIT6\n         DC    AL1(L'INVC)\nINVC     DC    C'   INVALID CODING.'\n         SPACE 1\n        LTORG\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UJVT$": {"ttr": 25609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "//UJVT     JOB (........),'INSTALL - U J V T -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=3\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                SUJVTA    TXPRINT   TXPUNCH   TXREAD               *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=UJVT\n//ASV     EXEC PAJ2AS2,OPT=',SYSPARM(CALL)',MBR=IEFUJV\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,PUNCH,READ,SUJVTA)\n  ENTRY   UJVT\n  NAME    UJVT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UJVT@": {"ttr": 25611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x08?\\x00\\x87\\x08?\\x17\\x18\\x00[\\x00[\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-03-24T00:00:00", "modifydate": "1987-03-24T17:18:00", "lines": 91, "newlines": 91, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      UJVT      1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *        IEFUJV COMPUTATIONS.         * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Program to test IEFUJV computations.\n  ---------\n\n  Call of the program :\n  ---------------------\n\n         //UJVTEX EXEC  PGM=UJVT\n         //SYSPUNCH DD  --- (S command) ---\n         //SYSLIST  DD  SYSOUT=A\n         //SYSPRINT DD  SYSOUT=A\n         //SYSIN    DD  --- (input commands) ---\n\n  Input commands :\n  ----------------\n\n  Syntax :     The input commands are free format and may start\n               anywhere from column 1 up to column 72 included.\n               Commands and operands are separated by at least\n               one blank. Multiple commands are accepted, but a\n               command must be complete in the 72 columns range.\n\n  Skeleton :   VERB  FROM  TO  BY\n\n               When TO and/or BY operands are omitted, use a\n               zero (0) to reset the remaining values if desired,\n               otherwise those previously defined are maintained\n               for the next computations (G command).\n\n  VERB :       R - set REGION in K.\n                   i.e. : R 100 1500 100\n\n               I - set I/O number in thousands.\n                   i.e. : I 2 20 2\n\n               T - set CPU TIME in seconds.\n                   i.e. : T 10 300 10\n\n               P '...TEXT...' COUNT - skip page setting '...TEXT...'\n                   as page header (optional, max. length 50), and\n                   clearing the page count with the given value\n                   (optional).\n                   i.e. : P 'TEST RUN.' 50\n1   23/09/85\n                                                      UJVT      2/2.\n\n\n               L - output on SYSPRINT only (default).\n\n               C - suspend L or S command, map classes output on\n                   SYSPRINT.\n\n               M - suspend L or S command, map performance group\n                   numbers output on SYSPRINT.\n\n               X - suspend L or S command, map priorities output\n                   on SYSPRINT.\n\n               S - suspend L command, output on SYSPUNCH cards\n                   having the following format :\n\n                   col.  4 - 10 : REGION in K.\n                        14 - 20 : I/O number in thousands.\n                        25 - 30 : CPU TIME in minutes/seconds\n                                  (format : MMM,SS).\n                        34 - 40 : I/O index value.\n                        44 - 50 : weight value.\n                             52 : priority.\n                             54 = class.\n                        56 - 58 = performance group number.\n\n               G - execute computations with values and orders\n                   given by the previous verbs.\n\n  Remark : when requesting the map output, remember that the values\n           for T and I are respectively taken as X and Y coordinates.\n           This means :\n           - T is not taken in account if it exceeds the 100 steps\n             variation (for each T value, a line position is used to\n             store the computed class, performance group number or\n             priority).\n           - a page overflow occurs if I exceeds about 50 steps\n             variation (for each I value, a line is printed).\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UJVTABL$": {"ttr": 25614, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943O\\x00\\x943O\\x12\\x18\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-30T00:00:00", "modifydate": "1994-11-30T12:18:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//UJVTABLE JOB (........),'INSTALL  -UJVTABLE-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* NOTE : BEFORE ASSEMBLY, REPLACE ->.YOUR.ACCOUNT.CONTROL BY YOUR   *\n//*        DEFAULT ACCOUNTING INFORMATION DATA-SET NAME IN MODULE     *\n//*        \"UJVTABLE\" (AT DEFINITION OF VARIABLE \"ACCNME\").           *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS2,MBR=UJVTABLE\n//LNK     EXEC PAJILKR,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   UJVTABLE\n  NAME    UJVTABLE(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UJVTABLE": {"ttr": 25857, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943O\\x00\\x943O\\x12\\x18\\x01~\\x01~\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-30T00:00:00", "modifydate": "1994-11-30T12:18:00", "lines": 382, "newlines": 382, "modlines": 0, "user": "SYSPAJA"}, "text": "UJTB     TITLE '-- I E F U J V - MVS/SMF JOB VALIDATION EXIT TABLES --'\nUJVTABLE START 0\n         SPACE 1\n* LIST OF ALL ACTUAL EXISTING DEFINED CLASSES :\n* ---------------------------------------------\n*\n*        A - BATCH\n*        B - BATCH\n*        C - BATCH\n*        D - BATCH\n*        E - BATCH + SETUP\n*        F - BATCH + SETUP\n*        G - BATCH + SETUP\n*        H - HEAVILY BATCH (+ SETUP)\n*        I - HEAVILY BATCH (+ SETUP)\n*        J - HEAVILY BATCH (+ SETUP)\n*        Q - ADABAS INACTIVE\n*        R - IMS INACTIVE\n*        S - SYSTEM\n*        T - SIBECA\n*        X - BATCH + SETUP\n*        Y - BATCH + SETUP\n*        Z - BATCH + SETUP\n*        1 - BATCH\n*        2 - BATCH\n*        3 - BATCH\n*        4 - BATCH\n*        5 - IMS-BATCH\n*        6 - CICS\n*        7 - ADABAS-BATCH\n*        8 - ADABAS + IMS\n*        9 - OPERATOR\n         EJECT\n        $UJVT\n         EJECT\n        $IDENT ,\n* AUTHORIZATIONS TABLE FORMAT (BINARY VALUES) :\n* ---------------------------------------------\n*\n* BY ELEMENT : 0 - 1   = AUTHORIZATION NUMBER.\n*              2 - 3   = FIRST AUTHORIZED PROGRAMMER'S NUMBER.\n*              4 - 5   = SECOND AUTHORIZED PROGRAMMER'S NUMBER.\n*              ...       ...\n*              N - N+1 = 0 (END OF ELEMENT).\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n* PURPOSE :    IN ORDER TO ALLOW SYSTEM RUN AND ACCESS IN ANY WAY     *\n* ---------    (I.E. WHEN THE ACCOUNTING INFORMATION DATA-SET IS      *\n*              DESTROYED, READ OPERATIONS OR ACCOUNTING NUMBER        *\n*              CONTROLS FAILS, OR CONTROL SUPPRESS IS FORCED), THE    *\n*              TABLE BELOW (NAMED 'SYSAUT') WILL BE USED BY 'IEFUJV'  *\n*              SMF-EXIT TO CHECK THE SYSTEM ACCOUNTING NUMBERS WHICH  *\n*              ARE THOSE OF THE HIGH-SENSITIVE JOBS OR TSO LOGONS.    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nSYSAUT   DS    0H\n         DC    AL2(101,7777,9999,0)\n         DC    AL2(103,9,47,91,1118,1497,1532,1690,1691,1884,0)\n         DC    AL2(104,1119,0)\n         DC    AL2(105,1118,1119,0)\n         DC    AL2(106,1118,0)\n         DC    AL2(1853,8,0)       ADABAS.\n         DC    AL2(1854,8,0)       IMS.\n         DC    AL2(1864,8,0)       CICS.\n         DC    AL4(0)              END OF TABLE.\n         EJECT\n* BOXES TABLE FORMAT (BINARY VALUES) :\n* ------------------------------------\n*\n* BY ELEMENT : 0 - 1   = BOX NUMBER.\n*              2 - 3   = FIRST PROGRAMMER'S NUMBER.\n*              4 - 5   = SECOND PROGRAMMER'S NUMBER.\n*              ...       ...\n*              N - N+1 = 0 (END OF ELEMENT).\n* PURPOSE :    SET THE BOX (ROOM) NUMBER IF NOT SUPPLIED.\n         SPACE 1\nSYSBOX   DS    0H\n         DC    AL2(2,1497,0)\n         DC    AL2(22,8,9,47,91,1118,1532,1690,1691,1884,0)\n         DC    AL2(38,1119,0)\n         DC    AL2(777,7777,9999,0)\n         DC    AL4(0)              END OF TABLE.\n         SPACE 2\n* AUTHORIZATIONS ALLOWED FOR TIME AND/OR I/O\n* CONTROL SUPPRESS TABLE FORMAT (BINARY VALUES) :\n* -----------------------------------------------\n*\n* BY ELEMENT : 0 - 1   = AUTHORIZATION NUMBER.\n* PURPOSE :    ACCEPT TIME AND/OR I/O CONTROL SUPPRESS IF REQUESTED.\n         SPACE 1\nSYSIOS   DS    0H\n         DC    AL2(101,103,105,106)\n         DC    AL2(1853,1854,1864) ADABAS, IMS, CICS.\n         DC    AL2(0)              END OF TABLE.\n         SPACE 2\n* AUTHORIZATIONS FOR SPECIAL TASKS/CLASS (BINARY VALUES) :\n* --------------------------------------------------------\n*\n* BY ELEMENT : 0 - 1   = AUTHORIZATION NUMBER.\n*              2 - 3   = PROGRAMMER NUMBER.\n*              5       = CLASS.\n* PURPOSE :    FORCE THE EXECUTION CLASS.\n         SPACE 1\nSYSPST   DS    0H\n         DC    AL2(1853,8),CL1'8'  ADABAS.\n         DC    AL2(1854,8),CL1'8'  IMS.\n         DC    AL2(1864,8),CL1'6'  CICS.\n         DC    AL2(0)              END OF TABLE.\n         EJECT\n* TABLE OF CLASS/EXEMPTIONS/FORCE PERF. GROUP :\n* ---------------------------------------------\n         SPACE 1\n* LEVELS HIERARCHY (+1) :\n*              IOXC = + PYSL + XCMN + XSTF.\n*              PYSL = + XCMN + XSTF.\n*              XCMN = + XSTF.\n* FORCE PERFORMANCE GROUP (+2) :\n*              0 - NO FORCE TO APPLY.\n*              1 TO 255 - PERFORMANCE GROUP NUMBER.\n         SPACE 1\nSYSEXC   DS    0H\n         DC    CL1'S',AL1(PYSL),AL1(0)       SYSTEM.\n         DC    CL1'9',AL1(PYSL),AL1(0)       OPERATOR.\n         DC    CL1'8',AL1(IOXC),AL1(0)       ADABAS, IMS.\n         DC    CL1'7',AL1(XCMN),AL1(7)       ADABAS-BATCH.\n         DC    CL1'6',AL1(IOXC),AL1(9)       CICS.\n         DC    CL1'5',AL1(XCMN),AL1(7)       IMS-BATCH.\n         DC    CL1'Q',AL1(XCMN),AL1(7)       ADABAS INACTIVE.\n         DC    CL1'R',AL1(XCMN),AL1(7)       IMS INACTIVE.\n         DC    CL1'X',AL1(XSTF),AL1(0)\n         DC    CL1'Y',AL1(XSTF),AL1(0)\n         DC    CL1'Z',AL1(XSTF),AL1(0)\n         DC    CL1'E',AL1(XSTF),AL1(0)\n         DC    CL1'F',AL1(XSTF),AL1(0)\n         DC    CL1'G',AL1(XSTF),AL1(0)\n         DC    CL1'H',AL1(XSTF),AL1(0)\n         DC    CL1'I',AL1(XSTF),AL1(0)\n         DC    CL1'J',AL1(XSTF),AL1(0)\n         DC    AL1(0)              END OF TABLE.\n         EJECT\n* 1. SCHEDULING PRIORITY FOR JOB EXECUTION SELECTION :\n* ----------------------------------------------------\n*\n*    TV(SEC) = CPU(SEC) + (PCOEFF * (I/O'S + LINES + CARDS))/1000\n*\n*    THE OBTAINED TV(SEC) VALUE IS THEN COMPARED FOR .LT. OR .EQ. WITH\n*    THE FOLLOWING TABLE TO DETERMINE THE PRIORITY (0 TO \"SCHPRN\").\n*\n*        NOTE - I/O'S = SRB TIME.\n         SPACE 1\nSCHPRT   DC    A(1*60)             0 = 1 MIN.\n         DC    A(2*60)             1 = 2 MIN.\n         DC    A(4*60)             2 = 4 MIN.\n         DC    A(8*60)             3 = 8 MIN.\n         DC    A(15*60)            4 = 15 MIN.\n         DC    A(30*60)            5 = 30 MIN.\n         DC    A(60*60)            6 = 1 HOUR\n         DC    A(120*60)           7 = 2 HOURS\n*                                  8 = ...OVER\nSCHPRN   EQU   (*-SCHPRT)/L'SCHPRT\n*                                  CONTROLS (MUST BE 0).\nCT1      EQU   (SCHPRN*L'SCHPRT)-(*-SCHPRT)\nCT2      EQU   (*-SCHPRT)-(SCHPRN*L'SCHPRT)\n         EJECT\n* 2. JOB EXECUTION CLASS :\n* ------------------------\n*\n*    I/O INDEX = THOUSANDS OF I/O'S (SRB TIME).\n*\n*    THE RESULTING I/O INDEX VALUE IS THEN COMPARED FOR .LT. WITH THE\n*    FOLLOWING TABLE TO FIND THE I/O CATEGORY (0 TO \"IOCN\").\n         SPACE 1\nIOCS     DC    A(3)                0 = 2.000\n         DC    A(11)               1 = 10.000\n         DC    A(51)               2 = 50.000\n*                                  3 = ...OVER\nIOCT     EQU   *-L'IOCS\nIOCN     EQU   (*-IOCS)/L'IOCS\n*                                  CONTROLS (MUST BE 0).\nCT3      EQU   (IOCN*L'IOCS)-((IOCT+L'IOCS)-IOCS)\nCT4      EQU   ((IOCT+L'IOCS)-IOCS)-(IOCN*L'IOCS)\n         SPACE 2\n*    THE JOB REGION PARAMETER VALUE (IN K) IS COMPARED FOR .LT. OR .EQ.\n*    WITH THE TABLE BELOW TO FIX THE MEMORY CATEGORY (0 TO \"MEMCN\").\n         SPACE 1\nMG       EQU   1024\nMEMCT    DC    A(1*MG)             0 =  1 M\n         DC    A(2*MG)             1 =  2 M\n         DC    A(3*MG)             2 =  3 M\n         DC    A(6*MG)             3 =  6 M\n         DC    A(32*MG)            4 = 32 M\n*                                  5 = ...OVER\nMEMCN    EQU   (*-MEMCT)/L'MEMCT\n*                                  CONTROLS (MUST BE 0).\nCT5      EQU   (MEMCN*L'MEMCT)-(*-MEMCT)\nCT6      EQU   (*-MEMCT)-(MEMCN*L'MEMCT)\n         SPACE 2\n*    WEIGHT = CPU(SEC)\n*\n*    THIS WEIGHT VALUE GIVES A WEIGHT INDEX (0 TO \"JWGHN\") BY COMPARE\n*    FOR .LT. WITH THE TABLE BELOW.\n         SPACE 1\nJWGHT    DC    A(31)               0 = 30 SEC.\n         DC    A(121)              1 = 2 MIN.\n         DC    A(601)              2 = 10 MIN.\n         DC    A(1801)             3 = 30 MIN.\n         DC    A(7201)             4 = 2 HOURS\n*                                  5 = ...OVER\nJWGHN    EQU   (*-JWGHT)/L'JWGHT\n*                                  CONTROLS (MUST BE 0).\nCT7      EQU   (JWGHN*L'JWGHT)-(*-JWGHT)\nCT8      EQU   (*-JWGHT)-(JWGHN*L'JWGHT)\n         EJECT\n*    THE JOB EXECUTION CLASS IS SET BY THE FOLLOWING TABLES USING TO\n*    SELECT --->   TABLE     ---> WEIGHT INDEX\n*                  ROW            I/O CATEGORY\n*                  COLUMN         MEMORY CATEGORY\n         SPACE 1\n*               MEM.CAT. = 012345  I/O CAT.\nSCHCLT   DC    CL(MEMCN+1)'AAA11H' 0         WEIGHT = 0\n         DC    CL(MEMCN+1)'AAA11H' 1\n         DC    CL(MEMCN+1)'22222H' 2\n         DC    CL(MEMCN+1)'22222H' 3\nSCHCLTLG EQU   *-SCHCLT\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'BBB22H' 0         WEIGHT = 1\n         DC    CL(MEMCN+1)'BBB22H' 1\n         DC    CL(MEMCN+1)'33333H' 2\n         DC    CL(MEMCN+1)'33333H' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'CCC33H' 0         WEIGHT = 2\n         DC    CL(MEMCN+1)'CCC33H' 1\n         DC    CL(MEMCN+1)'44444H' 2\n         DC    CL(MEMCN+1)'44444H' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'DDD44I' 0         WEIGHT = 3\n         DC    CL(MEMCN+1)'DDD44I' 1\n         DC    CL(MEMCN+1)'44444I' 2\n         DC    CL(MEMCN+1)'44444I' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'EEEEEJ' 0         WEIGHT = 4\n         DC    CL(MEMCN+1)'EEEEEJ' 1\n         DC    CL(MEMCN+1)'FFFFFJ' 2\n         DC    CL(MEMCN+1)'FFFFFJ' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'GGGGGJ' 0         WEIGHT = 5\n         DC    CL(MEMCN+1)'GGGGGJ' 1\n         DC    CL(MEMCN+1)'GGGGGJ' 2\n         DC    CL(MEMCN+1)'GGGGGJ' 3\n         SPACE 1\n*                                       CONTROLS (MUST BE 0).\nCT9      EQU   (((*-SCHCLT)/(MEMCN+1))/(JWGHN+1))-(IOCN+1)\nCT10     EQU   (IOCN+1)-(((*-SCHCLT)/(MEMCN+1))/(JWGHN+1))\n         EJECT\n*    SETUP JOB EXECUTION CLASS TABLES (STRATEGY AS PREVIOUS).\n         SPACE 1\n*               MEM.CAT. = 012345  I/O CAT.\nSCHCLTS  DC    CL(MEMCN+1)'XXXXXH' 0         WEIGHT = 0\n         DC    CL(MEMCN+1)'XXXXXH' 1\n         DC    CL(MEMCN+1)'XXXXXH' 2\n         DC    CL(MEMCN+1)'XXXXXH' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'XXXXXH' 0         WEIGHT = 1\n         DC    CL(MEMCN+1)'XXXXXH' 1\n         DC    CL(MEMCN+1)'XXXXXH' 2\n         DC    CL(MEMCN+1)'XXXXXH' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'YYYYYH' 0         WEIGHT = 2\n         DC    CL(MEMCN+1)'YYYYYH' 1\n         DC    CL(MEMCN+1)'YYYYYH' 2\n         DC    CL(MEMCN+1)'YYYYYH' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'ZZZZZI' 0         WEIGHT = 3\n         DC    CL(MEMCN+1)'ZZZZZI' 1\n         DC    CL(MEMCN+1)'ZZZZZI' 2\n         DC    CL(MEMCN+1)'ZZZZZI' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'EEEEEJ' 0         WEIGHT = 4\n         DC    CL(MEMCN+1)'EEEEEJ' 1\n         DC    CL(MEMCN+1)'EEEEEJ' 2\n         DC    CL(MEMCN+1)'FFFFFJ' 3\n*               MEM.CAT. = 012345  I/O CAT.\n         DC    CL(MEMCN+1)'GGGGGJ' 0         WEIGHT = 5\n         DC    CL(MEMCN+1)'GGGGGJ' 1\n         DC    CL(MEMCN+1)'GGGGGJ' 2\n         DC    CL(MEMCN+1)'GGGGGJ' 3\n         SPACE 1\n*                                       CONTROLS (MUST BE 0).\nCT11     EQU   (((*-SCHCLTS)/(MEMCN+1))/(JWGHN+1))-(IOCN+1)\nCT12     EQU   (IOCN+1)-(((*-SCHCLTS)/(MEMCN+1))/(JWGHN+1))\n         EJECT\n* 3. JOB PERFORMANCE GROUP NUMBER :\n* ---------------------------------\n*\n*    USING THE JOB CLASS ('JCTJCLAS') AND THE WEIGHT INDEX, THE JOB\n*    PERFORMANCE GROUP NUMBER IS FOUND IN THE FOLLOWING TABLE.\n         SPACE 1\nJPGNT    DS    0CL(JWGHN+2)\n*                WEIGHT = 0 1 2 3 4 5\n*                                            CPU BOUND JOBS.\n         DC    CL1'1',AL1(1,1,1,1,1,1)\n         DC    CL1'2',AL1(2,2,2,2,2,2)\n         DC    CL1'3',AL1(3,3,3,3,3,3)\n         DC    CL1'4',AL1(4,4,4,4,4,4)\n*                                            LOW CPU BOUND JOBS.\n         DC    CL1'A',AL1(1,1,1,1,1,1)\n         DC    CL1'B',AL1(2,2,2,2,2,2)\n         DC    CL1'C',AL1(3,3,3,3,3,3)\n         DC    CL1'D',AL1(4,4,4,4,4,4)\n         DC    CL1'E',AL1(5,5,5,5,5,5)\n         DC    CL1'F',AL1(5,5,5,5,5,5)\n*                                            HIGHLY CPU BOUND JOBS.\n         DC    CL1'G',AL1(5,5,5,5,5,5)\n*                                            HEAVILY BATCH JOBS.\n         DC    CL1'H',AL1(5,5,5,5,5,5)\n         DC    CL1'I',AL1(5,5,5,5,5,5)\n         DC    CL1'J',AL1(5,5,5,5,5,5)\n*                                            HIGHLY I/O BOUND JOBS.\n         DC    CL1'X',AL1(7,7,7,7,7,7)\n         DC    CL1'Y',AL1(7,7,7,7,7,7)\n         DC    CL1'Z',AL1(7,7,7,7,7,7)\n         DC    XL1'0',AL1(7)       END OF TABLE (DEFAULT).\n         EJECT\n* SPECIAL JOB CLASSES TABLE :\n* ---------------------------\n*\n*    A NEW CLASS AND PERFORMANCE GROUP NUMBER IS ASSIGNED TO THE JOB(S)\n*    USING SPECIFIC DATA-SET(S) NAME(S), UNLESS IN JOB-NAMES EXEMPTION\n*    LIST. NO CONFLICT OCCURS WHEN MORE DATA-SETS ARE DETECTED IN THE\n*    JCL OF A JOB, THE FIRST SEQUENTIAL MATCH IN THE TABLE WILL BE\n*    THAT USED FOR ASSIGNMENT TO THE JOB, SO RANGE THE DATA-SETS NAMES\n*    IN ORDER OF PRIORITY FOR CLASS DETERMINATION.\n*\n*    FORMAT :   DC  AL1(L'DSN..-1) OR AL1(255) AT END OF TABLE.\n*               DC  CL1'...NEW CLASS...'\n*               DC  AL1(...NEW PERFORMANCE GROUP NUMBER...)\n*               DC  AL1((DSN..-*-1)/8) NO. OF JOB(S) NAME(S).\n*               DC  CL8'...',CL8'...',... EXEMPTED JOB(S) NAME(S).\n*        DSN..  DC  C'...DATA-SET NAME ...'\n         SPACE 1\nSDSNTB   EQU   *                   START OF TABLE.\n         SPACE 1\n         DC    AL1(L'DSN1-1),CL1'7',AL1(7)\n         DC    AL1((DSN1-*-1)/8)\nDSN1     DC    C'ADA.V411.ADALOAD'\n         SPACE 1\n         DC    AL1(L'DSN2-1),CL1'7',AL1(7)\n         DC    AL1((DSN2-*-1)/8)\nDSN2     DC    C'ADADBA.RUNV4.CNTL'\n         SPACE 1\n         DC    AL1(L'DSN3-1),CL1'5',AL1(7)\n         DC    AL1((DSN3-*-1)/8)\nDSN3     DC    C'IMSPROD.RESLIB'\n         SPACE 1\n         DC    AL1(L'DSN4-1),CL1'R',AL1(7)\n         DC    AL1((DSN4-*-1)/8)\nDSN4     DC    C'IMSNEW.RESLIB'\n         SPACE 1\n         DC    AL1(L'DSN5-1),CL1'T',AL1(7)\n         DC    AL1((DSN5-*-1)/8)\nDSN5     DC    C'S22VAN1.SIPO.NETFILE'\n         SPACE 1\n         DC    AL1(255)            END OF TABLE.\n         SPACE 1\n         DC    XL50'0'             SHORT PATCH AREA.\n         EJECT\n* IEFUJV - CONTROL SUPPRESS INDICATOR :\n* -------------------------------------\n         SPACE 1\nUJVFSW   DC    CL1'0'              (SEE MODULE 'IEFUJV' FOR VALUE)\n         SPACE 2\n* ACCOUNTING DATA-SET DEFAULT NAME :\n* ----------------------------------\n         SPACE 1\nACCNME   DC    CL44'->.YOUR.ACCOUNT.CONTROL'\n         SPACE 2\n* SPECIAL ID-POINTER (SEE 'SUJVTA' ROUTINE) :\n* -------------------------------------------\n         SPACE 1\n         CNOP  0,8\n         DC    CL8'UJVT-PT=',A(UJVTABLE),CL4'UJVT'\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VSMANAL": {"ttr": 25864, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x91'O\\x00\\x91'O\\x16X\\x03\\xbd\\x03\\xbd\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-01T00:00:00", "modifydate": "1991-10-01T16:58:00", "lines": 957, "newlines": 957, "modlines": 0, "user": "SYSPAJA"}, "text": "VSMA     TITLE 'VSMANAL - VSM ANALYSIS.'\n        PRINT  OFF\n         MACRO           SAVE AREA'S TANK MANAGEMENT\n&NAME   @ENTER &DUMMY\n        CNOP   0,4\n         USING &NAME,R11           SET LOCAL ADDRESSABILITY\n&NAME    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R11,R15             SET LOCAL BASE REGISTER\n         CP    TANKNO,TANKMX       CONTROL TANK AVAILABILITY\n         BNL   STOVER              OVERFLOW\n         AP    TANKNO,TANKUP       UP TANKS NUMBER\n         LA    R15,18*4(R13)       NEXT SAVE AREA\n         XC    0(18*4,R15),0(R15)  CLEAR IT\n         ST    R15,8(R13)          LINK SAVE AREAS\n         ST    R13,4(R15)\n         LR    R13,R15             ACTIVATE NEW SAVE AREA\n         MEND\n         MACRO           SAVE AREA'S TANK MANAGEMENT\n&NAME   @EXIT  &DUMMY\n&NAME    CP    TANKNO,TANKUP       CONTROL TANK AVAILABILITY\n         BL    STUNDER             UNDERFLOW\n         SP    TANKNO,TANKUP       DOWN TANKS NUMBER\n         L     R13,4(R13)          PREVIOUS SAVE AREA\n         ST    R15,16(R13)         SET REGISTER 15 (RC)\n         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS\n         MVI   12(R13),X'FF'       INDICATE RETURN EXECUTED\n         BR    R14                 RETURN\n         DROP  R11                 KILL LOCAL ADDRESSABILITY\n         MEND\n         MACRO           CALL ROUTINE\n&NAME   @CALL  &WHERE\n         AIF   ('&WHERE' EQ '').CO\n&NAME    L     R15,=A(&WHERE)      GET ENTRY POINT\n         BASR  R14,R15             GO TO ROUTINE\n         MEXIT\n.CO      ANOP\n&NAME    BASR  R14,R15             GO TO ROUTINE\n         MEND\n         MACRO --- $ABDF --- ALLOCATED BLOCK DESCRIPTOR FORMAT\n         $AFUF\nAFUF     DSECT           ALLOCATED/FREE/UNALLOCATED SPACE DESCRIPTOR\nAFUFVA   DS    A              VIRTUAL ADDRESS OF THE ALLOCATED BLOCK\n*                             BIT 0 : THE CALLER SPECIFIED THE REAL\n*                                     OPTION AND THIS ALLOCATED BLOCK\n*                                     COULD BE BACKED IN REAL STORAGE\n*                                     ABOVE (BIT 0 = 1) OR BELOW (BIT\n*                                     0 = 0) 16 MEGABYTES\nAFUFLG   DS    F              LENGTH OF THE ALLOCATED BLOCK\nLAFUF    EQU   *-AFUF         LENGTH OF DSECT\n         MEND\n         MACRO --- $SDF --- SUBPOOL DESCRIPTOR FORMAT\n         $SDF\nSDF      DSECT           SUBPOOL DESCRIPTOR\nSDFIS    DS    XL1            X'00' TO IDENTIFY A SUBPOOL DESCRIPTOR\nSDFLG    DS    XL1            LENGTH OF SUBPOOL DESCRIPTOR\nSDFID    DS    XL1            SUBPOOL ID\nSDFKF    DS    XL1            MISCELLANEOUS FLAGS AND STORAGE KEY\n*                             BITS 0-3 : STORAGE KEY\nFGTCB    EQU   X'08'          BIT 4 : THE TCB WITH WHICH THIS DESCRIP-\n*                                     TOR IS ASSOCIATED OWNS THE STORA-\n*                                     GE DESCRIBED BY THIS DESCRIPTOR\n*                                     (THIS IS MEANINGFUL FOR PRIVATE\n*                                     AREA STORAGE ONLY)\nFGSHR    EQU   X'04'          BIT 5 : THE STORAGE DESCRIBED BY THIS\n*                                     DESCRIPTOR IS SHARED (THIS IS\n*                                     MEANINGFUL FOR PRIVATE AREA\n*                                     STORAGE ONLY)\n*                             BITS 6-7 : RESERVED\nSDFTCB   DS    A              OWNING TCB ADDRESS (IF PVT SUBPOOL),\n*                                     OTHERWISE ZERO\n         MEND\n        PRINT  ON\n         SPACE 1\nVSMANAL  START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *            VSM  ANALYSIS            * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    THIS PROGRAM PRODUCES A LISTING OF THE ENTIRE VSM      *\n* ---------    BLOCKS (ALL SUBPOOLS) FOR SPECIFIED STORAGE AREAS.     *\n*                                                                     *\n* CALL OF THE PROGRAM :                                               *\n* ---------------------                                               *\n*                                                                     *\n*        //LIST   EXEC  PGM=VSMANAL,PARM='...'                        *\n*        //SYSPRINT DD  SYSOUT=A                                      *\n*        //SYSSNAP  DD  SYSOUT=A (ONLY IF DEBUG NEEDED)               *\n*                                                                     *\n*        WHERE ... IS USED TO SPECIFY THE DESIRED STORAGE AREAS,      *\n*              AND MAY BE ANY ONE OF THE FOLLOWING KEYWORDS :         *\n*                   SQA  - SYSTEM QUEUE AREA                          *\n*                   CSA  - COMMON SERVICE AREA                        *\n*                   LSQA - LOCAL SYSTEM QUEUE AREA                    *\n*                   PVT  - PRIVATE (CURRENT ADDRESS SPACE)            *\n*                   AE   - ALLOCATED ELEMENT (CURRENT ADDRESS SPACE)  *\n*              OR, IF MORE THAN ONE DESIRED, THEY MUST BE SEPARATED   *\n*              BY A COMMA.                                            *\n*                   I.E. : PARM='SQA,CSA,LSQA'                        *\n*        ALSO ALTERNATE DD-NAMES MAY BE SPECIFIED FOR THE LIST OR     *\n*              SNAP OUTPUT, AS SHOWN BELOW :                          *\n*                   PARM='L=MYPRINT,S=MYSNAP'                         *\n*        IF NO PARM= IS GIVEN, DEFAULT IS ASSUMED LIKE :              *\n*                   PARM='CSA,L=SYSPRINT,S=SYSSNAP'                   *\n*        SPECIAL PARM= ENTRIES FOR TEST AN SQA SPACE (SUBPOOL 226) :  *\n*              T=ALL TO GETMAIN/FREEMAIN THE SQA SPACE                *\n*              T=GET TO GETMAIN ONLY AND NOTIFY THE SQA SPACE         *\n*              T=HHHHHHHH TO FREEMAIN ONLY THE SQA SPACE GETMAIN'D    *\n*                   BY A PREVIOUS EXECUTION OF T=GET                  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\nMXSTN    EQU   10                  MAXIMUM NUMBER OF SAVE-AREAS USE\n*                                    TO BE GENERATED AS TANKS\nWKLEN    EQU   (MXSTN*18)*4        SAVE AREAS TANKS\nKB       EQU   1024                1K BYTES\n         EJECT\n        $DEFREG ,\n        $XENT  BASE=R12,LV=WKLEN,TYPE=RENT\n         EJECT\n*------- INITIALIZATION\n         SPACE 1\n         ST    R13,SVFSVA          SAVE ADDRESS OF FIRST S.A.\n         LA    R2,18*4(R13)        TANKS INITIALIZATION\n         L     R3,=A(WKLEN-(18*4))\n         LR    R4,R2\n         XR    R5,R5\n         MVCL  R2,R4\n         LA    R2,MXSTN\n         CVD   R2,DBLWRD\n         MVC   TANKMX(L'TANKMX),DBLWRD+L'DBLWRD-L'TANKMX\n         SPACE 1\n*------- START PROCESSING\n         SPACE 1\n        @CALL  GETPARM             R1 = ADDRESS OF PARM=\n         LM    R6,R7,WAADD         SET WORK AREA POINTER/SIZE\n         CLI   SWSEL,0\n         BE    AEREQ\n        @CALL  GETVSM              GET VSM DATA\nAEREQ    TM    SWITCH,PFAEL\n         BZ    SETRC\n        @CALL  AELIST              AE'S LIST\n         SPACE 1\n*------- TERMINATION\n         SPACE 1\nSETRC    XR    R10,R10\nLEAVE   $PCLOSE\n         ICM   R1,B'1111',WAADD    WORK AREA ADDRESS\n         BZ    XFSQA\n         L     R0,WASIZ            WORK AREA SIZE\n        FREEMAIN R,A=(1),LV=(0)    FREE IT\nXFSQA    TM    SWITCH,PFALL\n         BO    *+L'*+8\n         TM    SWITCH,PFGET\n         BO    QUIT\n         ICM   R1,B'1111',ACSQA\n         BZ    QUIT\n        $TSWXA 31,EXPAND=ONLY\n        ZEROKEY ,\n         L     R1,ACSQA\n        FREEMAIN R,A=(1),LV=CSQAL,SP=226\n        RESETKEY ,\n        $TSWXA 24,EXPAND=ONLY\n         TM    SWITCH,PFALL\n         BO    QUIT\n         UNPK  MSGFRA,ACSQA(5)\n         TR    MSGFRA(L'MSGFRA-1),TRTAB-C'0'\n         MVI   MSGFRA+L'MSGFRA-1,C' '\n        WTO    MF=(E,MSGSQF)       LOG ADDRESS MESSAGE\nQUIT    $XRET  CC=(R10),LV=WKLEN,TYPE=RENT\n         SPACE 1\n*------- ERRORS DIAGNOSE\n         SPACE 1\nSTOVER   XR    R0,R0\n         B     STUNDER+L'STUNDER\nSTUNDER  LR    R0,R13\n         MVC   MSGERRT(18),=CL18'SAVE AREA''S TANKS '\n         LTR   R0,R0\n         BNZ   *+L'*+10\n         MVC   MSGERRT+18(33),=CL33'OVERFLOW (CHECK VALUE OF \"MXSTN\")'\n         B     *+L'*+6\n         MVC   MSGERRT+18(33),=CL33'UNDERFLOW *** S C R A M B L E ***'\n         B     ERRMSG\nERR1     CH    R15,=H'4'           ALL INFORMATION NOT RECEIVED R.C. ?\n         BNE   *+L'*+10            NO\n         MVC   MSGERRT(19),=CL19'WORK-AREA TOO SMALL'\n         B     ERRMSG\n         MVC   MSGERRT(26),=CL26'GET WORK-AREA ERROR / RC ='\n         CVD   R15,DBLWRD          DISPLAY R.C.\n         MVC   MSGERRT+26(4),=XL4'40202120'\n         ED    MSGERRT+26(4),DBLWRD+6\n         B     ERRMSG\nERR2     MVC   MSGERRT(20),=CL20'NO SUBPOOLS RECIEVED'\n         B     ERRMSG\nERR3     MVC   MSGERRT(35),=CL35'WORK-AREA OVERFLOW AT SUBPOOL LEVEL'\n         B     ERRMSG\nERR4     MVC   MSGERRT(35),=CL35'SUBPOOL DESCRIPTOR IDENTIFIER ERROR'\n         B     ERRMSG\nERR5     MVC   MSGERRT(48),=CL48'WORK-AREA OVERFLOW AT NUMBER OF ALLOCAX\n               TED BLOCKS'\n         B     ERRMSG\nERR6     MVC   MSGERRT(48),=CL48'WORK-AREA OVERFLOW AT ALLOCATED BLOCK X\n               DESCRIPTOR'\n         B     ERRMSG\nERR7     MVC   MSGERRT(53),=CL53'WORK-AREA OVERFLOW AT NUMBER OF FREE SX\n               PACE DESCRIPTOR'\n         B     ERRMSG\nERR8     MVC   MSGERRT(43),=CL43'WORK-AREA OVERFLOW AT FREE SPACE DESCRX\n               IPTOR'\n         B     ERRMSG\nERR9     MVC   MSGERRT(28),=CL28'WORK-AREA DATA NOT EXHAUSTED'\n         B     ERRMSG\nERRA     MVC   MSGERRT(28),=CL28'NO TCB''S IN THE PRIVATE AREA'\n         B     ERRMSG\nERRB     MVC   MSGERRT(31),=CL31'WORK-AREA OVERFLOW AT TCB LEVEL'\n         B     ERRMSG\nERRC     MVC   MSGERRT(46),=CL46'WORK-AREA OVERFLOW AT NUMBER OF SUBPOOX\n               LS LEVEL'\n         B     ERRMSG\nERRG     MVC   MSGERRT(19),=CL19'GFDATE ERROR / RC ='\n         CVD   R15,DBLWRD          DISPLAY R.C.\n         MVC   MSGERRT+19(4),=XL4'40202120'\n         ED    MSGERRT+19(4),DBLWRD+6\n         B     ERRMSG\nERRS     MVC   MSGERRT(17),=CL17'SNAP ERROR / RC ='\n         CVD   R15,DBLWRD          DISPLAY R.C.\n         MVC   MSGERRT+17(4),=XL4'40202120'\n         ED    MSGERRT+17(4),DBLWRD+6\n         B     ERRMSG\nERRX     MVC   MSGERRT(18),=CL18'PRINT ERROR / RC ='\n         CVD   R15,DBLWRD          DISPLAY R.C.\n         MVC   MSGERRT+18(4),=XL4'40202120'\n         ED    MSGERRT+18(4),DBLWRD+6\n         B     ERRMSG\nERRY     MVC   MSGERRT(26),=CL26'UNEXPECTED SELECTION ERROR'\n         B     ERRMSG\nERRZ     MVC   MSGERRT(27),=CL27'INVALID PARAMETER SPECIFIED'\nERRMSG   L     R13,SVFSVA          BACK TO FIRST S.A.\n        WTO    MF=(E,MSGERR)       LOG ERROR MESSAGE\n         LA    R10,16\n         B     LEAVE\n         SPACE 1\n*------- PRINT DATA ROUTINE\n*              R2 = ADDRESS OF LINE TO BE PRINTED\n*              R10 = LINK REGISTER\n         SPACE 1\nPLNE     CP    NLN,=PL2'+55'\n         BL    PLNEN\n         AP    NPG,=PL1'+1'\n         MVC   TIT1E,=XL6'402020202120'\n         ED    TIT1E,NPG\n        $PRINT TIT1,,DDLIST\n         LTR   R15,R15\n         BNZ   ERRX\n         ZAP   NLN,=PL1'+1'\n         CLI   0(R2),C'0'\n         BE    PLNEN\n         MVI   0(R2),C'0'\n         OI    SWIND,SIDSP\nPLNEN   $PRINT (R2),,DDLIST\n         LTR   R15,R15\n         BNZ   ERRX\n         AP    NLN,=PL1'+1'\n         CLI   0(R2),C'0'\n         BNER  R10\n         AP    NLN,=PL1'+1'\n         TM    SWIND,SIDSP\n         BZR   R10\n         MVI   0(R2),C' '\n         NI    SWIND,255-SIDSP\n         BR    R10\n         SPACE 1\n*------- SNAP WORK-AREA ROUTINE\n*              R2 = WORK REGISTER\n*              R3 = WORK REGISTER\n*              R6 = WORK AREA ADDRESS (\"WASIZ\" = LENGTH)\n*              R10 = LINK REGISTER\n         SPACE 1\nWASNAP   TM    SWIND,SISNP\n         BO    WASNF\n         OC    ATIOT,ATIOT\n         BNZR  R10\n        EXTRACT ATIOT,'S',FIELDS=(TIOT)\n         L     R2,ATIOT\n         USING TIODSECT,R2\n         XR    R1,R1\nWASNL    CLC   TIOELNGH(4),=F'0'\n         BER   R10\n         CLC   TIOEDDNM(L'TIOEDDNM),DDSNAP\n         BE    WASNN\n         IC    R1,TIOELNGH\n         ALR   R2,R1\n         B     WASNL\n         DROP  R2\nWASNN    OI    SWIND,SISNP\nWASNF    LR    R2,R6\n         LR    R3,R2\n         AL    R3,WASIZ\n         ZAP   NLS,=PL2'+99'       FORCE NEW PAGE\nWASNP    LA    R0,8\n         LA    R1,LNTA\nWASND    UNPK  0(9,R1),0(5,R2)\n         TR    0(8,R1),TRTAB-C'0'\n         MVI   8(R1),C' '\n         LA    R2,4(R2)\n         LA    R1,L'LNTA(R1)\n         BCT   R0,WASND\n         CP    NLS,=PL2'+55'\n         BL    WASNE\n         AP    LPG,=PL1'+1'\n         MVC   TIT1E,=XL6'402020202120'\n         ED    TIT1E,LPG\n        $PRINT TIT1,,DDSNAP\n         LTR   R15,R15\n         BNZ   ERRS\n         ZAP   NLS,=PL1'+1'\n         MVI   LNT,C'0'\nWASNE   $PRINT LNT,,DDSNAP\n         LTR   R15,R15\n         BNZ   ERRS\n         AP    NLS,=PL1'+1'\n         CLR   R2,R3\n         BNLR  R10\n         CLC   0(32,R2),=XL32'0'\n         BER   R10\n         MVI   LNT,C' '\n         B     WASNP\n         EJECT\nDBLWRD   DC    D'0'                DOUBLE WORD WORK AREA\nSVFSVA   DC    A(*-*)              ADDRESS OF FIRST S.A.\nATIOT    DC    F'0'\nACSQA    DC    A(*-*)\nCSQAL    EQU   64\nWAADD    DC    F'0'                WORK AREA ADDRESS\nWASIZ    DC    A(20*KB)            WORK AREA SIZE\nDDLIST   DC    CL8'SYSPRINT'\nDDSNAP   DC    CL8'SYSSNAP'\nTRTAB    DC    CL16'0123456789ABCDEF'\nTANKMX   DC    PL2'+0'\nTANKNO   DC    PL2'+0'\nTANKUP   DC    PL1'+1'\nNPG      DC    PL3'+0'\nNLN      DC    PL2'+0'\nLPG      DC    PL3'+0'\nNLS      DC    PL2'+0'\nSWSEL    DC    AL1(SCSA)\nSCSA     EQU   X'80'\nSSQA     EQU   X'40'\nSLSQA    EQU   X'20'\nSPVT     EQU   X'10'\nSWITCH   DC    XL1'0'\nPFPVT    EQU   X'80'\nPFAEL    EQU   X'40'\nPFGET    EQU   X'02'\nPFALL    EQU   X'01'\nSWIND    DC    XL1'0'\nSISNP    EQU   X'80'\nSIDSP    EQU   X'08'\nSILSI    EQU   X'04'\nSTSEL    DS    0XL5\n         DC    CL4'CSA',AL1(SCSA)\n         DC    CL4'SQA',AL1(SSQA)\n         DC    CL4'LSQA',AL1(SLSQA)\n         DC    CL4'PVT',AL1(SPVT)\nNTSEL    EQU   (*-STSEL)/L'STSEL\n         SPACE 1\n         DC    AL1(TIT1L)\nTIT1     DC    CL11'1 -- VSM : '\nTIT1A    DC    CL12'analysis of '\nTIT1B    DC    CL4' ',CL4' -- '\nTIT1C    DC    CL20' ',CL2'/ '\nTIT1D    DC    CL8'  :  :  ',CL9' --- Page'\nTIT1E    DC    CL6' ',CL3' --'\nTIT1L    EQU   *-TIT1\n         SPACE 1\n         DC    AL1(LNTL)\nLNT      DC    CL7' '\nLNTA     DC    8CL9' '\nLNTL     EQU   *-LNT\n         SPACE 1\n         DC    AL1(LNPL)\nLNP      DC    CL10'0 a.TCB : '\nLNPA     DC    CL9' ',C'('\nLNPB     DC    CL8' ',C'/'\nLNPC     DC    CL8' ',C'/'\nLNPD     DC    CL8' ',C')'\nLNPL     EQU   *-LNP\n         SPACE 1\n         DC    AL1(LNDL)\nLND      DC    CL10' ',CL8'address '\nLNDA     DC    CL9' ',CL7'length '\nLNDB     DC    CL9' '\nLNDC     DC    CL8' '\nLNDL     EQU   *-LND\n         SPACE 1\nMSGSQF  WTO    '--- VSMANAL - SQA (SP=226) ADDRESS :          - FREEMAIX\n               N DONE ---',ROUTCDE=11,DESC=7,MF=L\nMSGFRA   EQU   MSGSQF+41,9\n         SPACE 1\nMSGERR  WTO    '--- VSMANAL -                                          X\n                              ',ROUTCDE=11,DESC=7,MF=L\nMSGERRT  EQU   MSGERR+18,56\n         EJECT\n         LTORG\n         EJECT\n*------- HANDLE REQUEST(S)\n         SPACE 1\nGETPARM @ENTER ,\n         L     R2,0(R1)            GET PARM= IF ANY\n         LH    R1,0(R2)\n         LTR   R1,R1\n         BNP   NOPARM\n         NI    SWSEL,255-SCSA\n         LA    R4,2(R2)\n         LA    R3,1(R2,R1)\n         LA    R2,1\nSPNXT    LA    R5,DBLWRD\n         MVC   DBLWRD(8),=CL8' '\n         CLC   0(2,R4),=CL2'T='\n         BE    TSTST\n         CLC   0(2,R4),=CL2'L='\n         BNE   TSSNP\n         LA    R6,DDLIST\n         B     GTPRM\nTSSNP    CLC   0(2,R4),=CL2'S='\n         BNE   TSREQ\n         LA    R6,DDSNAP\nGTPRM    ALR   R4,R2\n         BXLE  R4,R2,*+L'*+4\n         B     ERRZ\n         LA    R0,8+1\n         BAS   R14,SCPRM\n         MVC   0(8,R6),DBLWRD\n         B     SPSKP\nSCPRM    CLI   0(R4),C','\n         BNE   *+L'*+12\n         CLC   DBLWRD(4),=CL8' '\n         BE    SPSKP\n         BR    R14\n         BCT   R0,*+L'*+4\n         B     ERRZ\n         MVC   0(1,R5),0(R4)\n         LA    R5,1(R5)\n         BXLE  R4,R2,SCPRM\n         BR    R14\nTSREQ    LA    R0,4+1\n         BAS   R14,SCPRM\n         LA    R0,NTSEL\n         LA    R1,STSEL\n         CLC   DBLWRD(4),0(R1)\n         BE    STREQ\n         LA    R1,L'STSEL(R1)\n         BCT   R0,*-14\n         CLC   DBLWRD(4),=CL4'AE'\n         BNE   ERRZ\n         OI    SWITCH,PFAEL\n         B     SPSKP\nTSTST    ALR   R4,R2\n         BXLE  R4,R2,*+L'*+4\n         B     ERRZ\n         LA    R0,8+1\n         BAS   R14,SCPRM\n         CLC   DBLWRD(8),=CL8'ALL'\n         BNE   *+L'*+8\n         OI    SWITCH,PFALL\n         B     SPSKP\n         CLC   DBLWRD(8),=CL8'GET'\n         BNE   *+L'*+8\n         OI    SWITCH,PFGET\n         B     SPSKP\n         CLC   DBLWRD(8),=CL8' '\n         BE    SPSKP\n         LA    R0,L'DBLWRD\n         LA    R5,DBLWRD\n         XR    R14,R14\n         XR    R15,R15\nTSTST1   CLI   0(R5),C'9'\n         BH    ERRZ\n         CLI   0(R5),C'0'\n         BL    TSTST2\n         ICM   R15,B'1000',0(R5)\n         SLL   R15,4\n         SLDL  R14,4\n         B     TSTST3\nTSTST2   CLI   0(R5),C'F'\n         BH    ERRZ\n         CLI   0(R5),C'A'\n         BL    ERRZ\n         IC    R15,0(R5)\n         AH    R15,=H'9'\n         SLL   R15,28\n         SLDL  R14,4\nTSTST3   LA    R5,1(R5)\n         BCT   R0,TSTST1\n         ST    R14,ACSQA\n         B     SPSKP\nSTREQ    OC    SWSEL(1),4(R1)\nSPSKP    BXLE  R4,R2,SPNXT\n         CLI   SWSEL,0\n         BNE   NOPARM\n         TM    SWITCH,PFAEL\n         BNZ   XFRSQA\n         B     ERRZ\nNOPARM   L     R0,WASIZ            WORK AREA SIZE\n        GETMAIN R,LV=(0)           OBTAIN IT\n         ST    R1,WAADD            WORK AREA ADDRESS\nXFRSQA   ICM   R1,B'1111',ACSQA\n         BZ    XGPARM\n        $TSWXA 31,EXPAND=ONLY\n        ZEROKEY ,\n         L     R1,ACSQA\n        FREEMAIN R,A=(1),LV=CSQAL,SP=226\n        RESETKEY ,\n        $TSWXA 24,EXPAND=ONLY\n         UNPK  MSGFRA,ACSQA(5)\n         TR    MSGFRA(L'MSGFRA-1),TRTAB-C'0'\n         MVI   MSGFRA+L'MSGFRA-1,C' '\n        WTO    MF=(E,MSGSQF)       LOG ADDRESS MESSAGE\n         XC    ACSQA,ACSQA\nXGPARM  @EXIT  ,\n         SPACE 1\n        LTORG\n         EJECT\n*------- GET VSM DATA\n         SPACE 1\nGETVSM  @ENTER ,\n         TM    SWITCH,PFALL+PFGET\n         BZ    NXTRQ\n        $TSWXA 31,EXPAND=ONLY\n        ZEROKEY ,\n        GETMAIN R,LV=CSQAL,SP=226\n         ST    R1,ACSQA\n        RESETKEY ,\n        $TSWXA 24,EXPAND=ONLY\n         TM    SWITCH,PFGET\n         BZ    NXTRQ\n         UNPK  MSGADD,ACSQA(5)\n         TR    MSGADD(L'MSGADD-1),TRTAB-C'0'\n         MVI   MSGADD+L'MSGADD-1,C' '\n        WTO    MF=(E,MSGSQA)       LOG ADDRESS MESSAGE\nNXTRQ    LR    R2,R6               CLEAR\n         LR    R3,R7                 VSMLIST\n         LR    R4,R6                   WORK AREA\n         XR    R5,R5                     WITH\n         MVCL  R2,R4                       ZEROS\n         NI    SWITCH,255-PFPVT\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         TM    SWSEL,SCSA\n         BZ    TFSQA\n        VSMLIST SP=CSA,SPACE=FREE,WKAREA=((R6),(R7))\n         B     PRCSS\nTFSQA    TM    SWSEL,SSQA\n         BZ    TFLSQA\n        VSMLIST SP=SQA,SPACE=FREE,WKAREA=((R6),(R7))\n         B     PRCSS\nTFLSQA   TM    SWSEL,SLSQA\n         BZ    RQPVT\n        VSMLIST SP=LSQA,SPACE=FREE,WKAREA=((R6),(R7))\n         B     PRCSS\n         USING PSA,R0              PSA ADDRESSABILITY.\nRQPVT    L     R2,PSAAOLD          GET ASCB ADDRESS\n         DROP  R0\n         USING ASCB,R2\n         L     R1,ASCBASXB         GET ASXB ADDRESS\n         DROP  R2\n         USING ASXB,R1\n         L     R2,ASXBFTCB         GET FIRST TCB ADDRESS ON QUEUE\n         DROP  R1\n        VSMLIST SP=PVT,SPACE=FREE,WKAREA=((R6),(R7)),TCB=((R2),ALL)\n         OI    SWITCH,PFPVT\nPRCSS   $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         LTR   R15,R15             SUCCESSFULLY EXECUTED ?\n         BNZ   ERR1                NO\n         SPACE 1\n*------- LIST DATA FROM VSM\n         SPACE 1\n        $GFDATE TIT1C,DBLWRD\n         LTR   R15,R15\n         BNZ   ERRG\n         MVC   TIT1D(2),DBLWRD\n         MVC   TIT1D+3(2),DBLWRD+2\n         MVC   TIT1D+6(2),DBLWRD+4\n         TM    SWIND,SILSI\n         BO    NOINF\n        @CALL  LSINFO              LIST INFORMATION\nNOINF    ZAP   NLN,=PL2'+99'       FORCE NEW PAGE\n         LA    R0,NTSEL\n         LA    R1,STSEL\n         XR    R2,R2\n         IC    R2,4(R1)\n         EX    R2,*+L'*+16\n         BO    *+L'*+20\n         LA    R1,L'STSEL(R1)\n         BCT   R0,*-16\n         B     ERRY\n         TM    SWSEL,*-*\n         NI    SWSEL,*-*\n         LA    R0,255\n         XR    R2,R0\n         EX    R2,*-10\n         MVC   TIT1B(4),0(R1)\n         BAS   R10,WASNAP          SNAP DATA IF REQUESTED\n         L     R3,4(R6)            GET ADDRESS OF DATA\n         L     R5,8(R6)            GET LENGTH OF DATA\n         AR    R5,R3               END OF DATA+1 ADDRESS\n         TM    SWITCH,PFPVT\n         BZ    NPVT1\n         XC    NTCBS,NTCBS\n         OC    NTCBS(L'NTCBS),0(R3) GET NUMBER OF TCB'S\n         BZ    ERRA                NONE ? YES\n         LA    R3,4(R3)            BUMP CURRENT POINTER\nNXTCB    CLR   R3,R5               OVERFLOW ?\n         BNL   ERRB                YES\n         UNPK  LNPA,0(5,R3)        TCB ADDRESS\n         TR    LNPA(8),TRTAB-C'0'\n         MVI   LNPA+L'LNPA-1,C' '\n         ICM   R1,B'1111',0(R3)\n         USING TCB,R1\n         L     R1,TCBTIO\n         DROP  R1\n         USING TIODSECT,R1\n         MVC   LNPB,TIOCNJOB\n         MVC   LNPC(8),TIOCSTEP\n         MVC   LNPD(8),TIOCSTEP+8\n         DROP  R1\n         LA    R2,LNP\n         BAS   R10,PLNE\n         LA    R3,4(R3)            BUMP CURRENT POINTER\n         CLR   R3,R5               OVERFLOW ?\n         BNL   ERRC                YES\nNPVT1    L     R8,0(R3)            GET NUMBER OF SUBPOOLS\n         LTR   R8,R8               NONE ?\n         BNP   ERR2                YES\n         LA    R3,4(R3)            BUMP CURRENT POINTER\nLOOP1    CLR   R3,R5               OVERFLOW ?\n         BNL   ERR3                YES\n         USING SDF,R3\n         CLI   SDFIS,X'00'         SUBPOOL DESCRIPTOR IDENTIFIER ?\n         BNE   ERR4\n         XR    R0,R0               GET SUBPOOL ID NUMBER\n         IC    R0,SDFID\n         CVD   R0,DBLWRD\n         MVC   LNSA,=XL4'40202120'\n         ED    LNSA,DBLWRD+6\n         XR    R0,R0               GET STORAGE KEY\n         IC    R0,SDFKF\n         SRL   R0,4\n         CVD   R0,DBLWRD\n         MVC   DBLWRD(4),=XL4'40202120'\n         ED    DBLWRD(4),DBLWRD+6\n         MVI   LNSB,C' '\n         MVC   LNSB+1(L'LNSB-1),LNSB\n         CLI   DBLWRD+2,C' '\n         BNE   *+L'*+14\n         MVC   LNSB(2),DBLWRD+2\n         LA    R2,LNSB+2\n         B     *+L'*+10\n         MVC   LNSB(3),DBLWRD+1\n         LA    R2,LNSB+3\n         TM    SDFKF,FGTCB\n         BZ    *+L'*+10\n         MVC   0(5,R2),=CL5', TCB'\n         LA    R2,5(R2)\n         TM    SDFKF,FGSHR\n         BZ    *+L'*+10\n         MVC   0(5,R2),=CL5', SHR'\n         LA    R2,5(R2)\n         MVC   0(9,R2),=CL9') a.TCB ='\n         UNPK  10(9,R2),SDFTCB(5)\n         TR    10(8,R2),TRTAB-C'0'\n         MVI   18(R2),C' '\n         ICM   R1,B'1111',SDFTCB\n         BZ    NOTTCB\n         USING TCB,R1\n         L     R1,TCBTIO\n         DROP  R1\n         USING TIODSECT,R1\n         MVI   19(R2),C'('\n         MVC   20(L'TIOCNJOB,R2),TIOCNJOB\n         MVI   20+L'TIOCNJOB(R2),C'/'\n         MVC   21+L'TIOCNJOB(8,R2),TIOCSTEP\n         MVI   29+L'TIOCNJOB(R2),C'/'\n         MVC   30+L'TIOCNJOB(8,R2),TIOCSTEP+8\n         MVI   38+L'TIOCNJOB(R2),C')'\n         DROP  R1\nNOTTCB   LA    R2,LNS\n         BAS   R10,PLNE\n         XR    R0,R0\n         IC    R0,SDFLG            LENGTH OF SUBPOOL DESCRIPTOR\n         DROP  R3\n         AR    R3,R0               BUMP CURRENT PTR\n         CLR   R3,R5               TEST IF DATA OVERFLOW\n         BNL   ERR5                YES\n         ICM   R9,B'1111',0(R3)    GET NUMBER OF ALLOCATED BLOCKS\n         LA    R3,4(R3)            BUMP CURRENT POINTER\n         LTR   R9,R9               HOW MANY ALLOCATED BLOCKS ?\n         BNP   NOBLKS              BRANCH IF NONE\nLOOP2    CLR   R3,R5               TEST IF DATA OVERFLOW\n         BNL   ERR6                YES\n         USING AFUF,R3\n         MVC   DBLWRD(4),AFUFVA    VIRTUAL ADDRESS OF ALLOC. BLOCK\n         NI    DBLWRD,X'7F'\n         UNPK  LNDA(9),DBLWRD(5)\n         TR    LNDA(8),TRTAB-C'0'\n         MVI   LNDA+L'LNDA-1,C' '\n         MVC   DBLWRD(4),AFUFLG    LENGTH OF ALLOCATED BLOCK\n         UNPK  LNDB(9),DBLWRD(5)\n         TR    LNDB(8),TRTAB-C'0'\n         MVI   LNDB+L'LNDB-1,C' '\n         TM    AFUFVA,X'80'\n         BZ    *+L'*+10\n         MVC   LNDC,=CL8'Real>16M'\n         BZ    *+L'*+6\n         MVC   LNDC,=CL8' '\n         DROP  R3\n         LA    R2,LND\n         BAS   R10,PLNE\n         LA    R3,LAFUF(R3)        BUMP CURRENT POINTER,\n         CLR   R3,R5               TEST IF OVERFLOW\n         BNL   ERR7                YES\n         ICM   R4,B'1111',0(R3)    GET NUMBER OF FREE SPACE DESC.\n         LA    R3,4(R3)            BUMP CURRENT POINTER\n         LTR   R4,R4               HOW MANY FREE SPACE DESC. ?\n         BNP   NOFREE              BRANCH IF NONE\n         MVC   LNFA,=CL6'Free :'\nLOOP3    CLR   R3,R5               DATA OVERFLOW ?\n         BNL   ERR8                YES\n         USING AFUF,R3\n         MVC   DBLWRD(4),AFUFVA    VIRTUAL ADDRESS OF FREE SPACE\n         UNPK  LNFB(9),DBLWRD(5)\n         TR    LNFB(8),TRTAB-C'0'\n         MVI   LNFB+L'LNFB-1,C' '\n         MVC   DBLWRD(4),AFUFLG    LENGTH OF FREE SPACE\n         UNPK  LNFC(9),DBLWRD(5)\n         TR    LNFC(8),TRTAB-C'0'\n         MVI   LNFC+L'LNFC-1,C' '\n         DROP  R3\n         LA    R2,LNF\n         BAS   R10,PLNE\n         MVC   LNFA(L'LNFA),=CL8' '\n         LA    R3,LAFUF(R3)        BUMP CURRENT POINTER\n         BCT   R4,LOOP3            LOOP IF MORE FREE SPACE DESC.\nNOFREE   BCT   R9,LOOP2            LOOP IF MORE ALLOCATED BLOCKS\nNOBLKS   BCT   R8,LOOP1            LOOP IF MORE SUBPOOLS\n         TM    SWITCH,PFPVT\n         BZ    NPVT2\n         L     R1,NTCBS\n         BCT   R1,*+L'*+4\n         B     NPVT2\n         ST    R1,NTCBS\n         B     NXTCB\nNPVT2    CLR   R3,R5               DATA EXHAUSTED ?\n         BNE   ERR9                NO, ERROR\n         CLI   SWSEL,0             YES, ALL SPECIFIED REQUESTS DONE ?\n         BNE   NXTRQ               NO, CONTINUE\n        @EXIT  ,\n         SPACE 1\nNTCBS    DC    F'0'\n         SPACE 1\nMSGSQA  WTO    '--- VSMANAL - SQA (SP=226) ADDRESS :          - GETMAINX\n                DONE ---',ROUTCDE=11,DESC=7,MF=L\nMSGADD   EQU   MSGSQA+41,9\n         SPACE 1\n         DC    AL1(LNSL)\nLNS      DC    CL17'0    Subpool ID :'\nLNSA     DC    CL4' ',CL7' (key ='\nLNSB     DC    CL60' '\nLNSL     EQU   *-LNS\n         SPACE 1\n         DC    AL1(LNFL)\nLNF      DC    CL15' '\nLNFA     DC    CL6' ',CL9' address '\nLNFB     DC    CL9' ',CL7'length '\nLNFC     DC    CL9' '\nLNFL     EQU   *-LNF\n         SPACE 1\n        LTORG\n         EJECT\n*------- LIST ALLOCATED ELEMENTS\n         SPACE 1\nAELIST  @ENTER ,\n        $GFDATE TIT1C,DBLWRD\n         LTR   R15,R15\n         BNZ   ERRG\n         MVC   TIT1D(2),DBLWRD\n         MVC   TIT1D+3(2),DBLWRD+2\n         MVC   TIT1D+6(2),DBLWRD+4\n         MVC   TIT1B(4),=CL4'AE'\n         ZAP   NLN,=PL2'+99'       FORCE NEW PAGE\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         USING PSA,R0              PSA ADDRESSABILITY.\n         L     R1,PSAAOLD          GET ASCB ADDRESS\n         DROP  R0\n         USING ASCB,R1\n         L     R2,ASCBASXB         GET ASXB ADDRESS\n         DROP  R1\n         USING ASXB,R2\n         L     R3,ASXBFTCB         GET FIRST TCB ADDRESS ON QUEUE\n         L     R4,ASXBLTCB         GET LAST TCB ADDRESS ON QUEUE\n         DROP  R2\n         USING TCB,R3\nNXTTCB   ST    R3,DBLWRD\n         UNPK  LNPA,DBLWRD(5)      TCB ADDRESS\n         TR    LNPA(8),TRTAB-C'0'\n         MVI   LNPA+L'LNPA-1,C' '\n         L     R1,TCBTIO\n         USING TIODSECT,R1\n         MVC   LNPB,TIOCNJOB\n         MVC   LNPC(8),TIOCSTEP\n         MVC   LNPD(8),TIOCSTEP+8\n         DROP  R1\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         LA    R2,LNP\n         BAS   R10,PLNE\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         ICM   R5,B'1111',TCBAE\n         BZ    *+L'*+10\n         MVC   LNDC,=CL8'<--- AE '\n         BAS   R9,NXTAE\n         ICM   R5,B'1111',TCBEAE\n         BZ    *+L'*+10\n         MVC   LNDC,=CL8'<--- EAE'\n         BAS   R9,NXTAE\n         CLR   R3,R4\n         BE    AEEND\n         L     R3,TCBTCB\n         B     NXTTCB\n         DROP  R3\n         USING AE,R5\nNXTAE    MVC   DBLWRD(4),AEAREA    ADDRESS OF ALLOC. BLOCK\n         UNPK  LNDA(9),DBLWRD(5)\n         TR    LNDA(8),TRTAB-C'0'\n         MVI   LNDA+L'LNDA-1,C' '\n         MVC   DBLWRD(4),AESIZE    LENGTH OF ALLOCATED BLOCK\n         UNPK  LNDB(9),DBLWRD(5)\n         TR    LNDB(8),TRTAB-C'0'\n         MVI   LNDB+L'LNDB-1,C' '\n         L     R5,AENEXT\n         DROP  R5\n        $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n         LA    R2,LND\n         BAS   R10,PLNE\n         MVC   LNDC,=CL8' '\n        $TSWXA 31,EXPAND=ONLY      ENTER 31-BIT MODE\n         LTR   R5,R5\n         BNZ   NXTAE\n         BR    R9\nAEEND   $TSWXA 24,EXPAND=ONLY      BACK TO 24-BIT MODE\n        @EXIT  ,\n         SPACE 1\n        LTORG\n         EJECT\n*------- LIST INFORMATION\n         SPACE 1\nLSINFO  @ENTER ,\n         OI    SWIND,SILSI\n         ZAP   NLN,=PL2'+99'       FORCE NEW PAGE\n         MVC   TIT1A(L'TIT1A+L'TIT1B),=CL16'some information'\n         LA    R3,LNI-1\n         XR    R4,R4\n         LA    R2,1(R3)\n         BAS   R10,PLNE\n         IC    R4,0(R3)\n         LA    R3,1(R3,R4)\n         CLI   0(R3),0\n         BNE   *-20\n         MVC   TIT1A,=CL12'analysis of '\n        @EXIT  ,\n         SPACE 1\n        LTORG\n         SPACE 1\n         DC    AL1(L'LNI)\nLNI      DC    C'0 MVS/XA storage protection keys assignment :'\n         DC    AL1(L'LNI0)\nLNI0     DC    C'  ==========================================='\n         DC    AL1(L'LNI1)\nLNI1     DC    C'0     Key :     0 Supervisor and other System functionX\n               s'\n         DC    AL1(L'LNI2)\nLNI2     DC    C'      -----     1 Job Scheduler and Job Entry sub-systX\n               em'\n         DC    AL1(L'LNI3)\nLNI3     DC    C'                2 VSPC'\n         DC    AL1(L'LNI4)\nLNI4     DC    C'              3-4 Reserved'\n         DC    AL1(L'LNI5)\nLNI5     DC    C'                5 Data Management, including OPEN/CLOSX\n               E/EOV'\n         DC    AL1(L'LNI6)\nLNI6     DC    C'                6 TCAM and VTAM'\n         DC    AL1(L'LNI7)\nLNI7     DC    C'                7 IMS'\n         DC    AL1(L'LNI8)\nLNI8     DC    C'                8 All V=V problem programs'\n         DC    AL1(L'LNI9)\nLNI9     DC    C'             9-15 V=R problem programs'\n         DC    AL1(L'LNI10)\nLNI10    DC    C'0 MVS/XA storage subpools numbers types :'\n         DC    AL1(L'LNI11)\nLNI11    DC    C'  ======================================='\n         DC    AL1(L'LNI1A+L'LNI1B)\nLNI1A    DC    CL40'0      0 - 127 : PRIVATE - LOW'\nLNI1B    DC    CL40'|          238 : Reserved (error)'\n         DC    AL1(L'LNI1C+L'LNI1D)\nLNI1C    DC    CL40'           128 : Reserved (error)'\nLNI1D    DC    CL40'|          239 : COMMON - SQA/ESQA'\n         DC    AL1(L'LNI1E+L'LNI1F)\nLNI1E    DC    CL40'     129 - 225 : Undefined'\nLNI1F    DC    CL40'|          240 : PRIVATE - LOW'\n         DC    AL1(L'LNI1G+L'LNI1H)\nLNI1G    DC    CL40'           226 : COMMON - SQA'\nLNI1H    DC    CL40'|          241 : COMMON - CSA/ECSA'\n         DC    AL1(L'LNI1I+L'LNI1J)\nLNI1I    DC    CL40'     227 - 228 : COMMON - CSA/ECSA'\nLNI1J    DC    CL40'|    242 - 244 : Reserved (error)'\n         DC    AL1(L'LNI1K+L'LNI1L)\nLNI1K    DC    CL40'     229 - 230 : PRIVATE - HIGH'\nLNI1L    DC    CL40'|          245 : COMMON - SQA/ESQA'\n         DC    AL1(L'LNI1M+L'LNI1N)\nLNI1M    DC    CL40'           231 : COMMON - CSA/ECSA'\nLNI1N    DC    CL40'|    246 - 249 : Reserved (error)'\n         DC    AL1(L'LNI1O+L'LNI1P)\nLNI1O    DC    CL40'           232 : Reserved (error)'\nLNI1P    DC    CL40'|    250 - 252 : PRIVATE - LOW'\n         DC    AL1(L'LNI1Q+L'LNI1R)\nLNI1Q    DC    CL40'     233 - 235 : PRIVATE - LSQA/ELSQA'\nLNI1R    DC    CL40'|    253 - 255 : PRIVATE - LSQA/ELSQA'\n         DC    AL1(L'LNI1S+L'LNI1T)\nLNI1S    DC    CL40'     236 - 237 : PRIVATE - HIGH'\nLNI1T    DC    CL40'| '\n         SPACE 1\n         DC    AL1(0)              END OF LINES INDICATOR\n         EJECT\n        $SDF\n         SPACE 1\n        $AFUF\n         SPACE 2\n        PRINT  NOGEN\n        IHAPSA\n        IHAASCB\n        IHAASXB\n        IKJTCB LIST=YES\n        IHAAE\nAETLEN   EQU   *-AE\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VSMANAL$": {"ttr": 26372, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//VSMANAL  JOB (........),'INSTALL - VSMANAL -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHSVC   GFDATE    TXPRINT   TXSNAP               *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=VSMANAL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(GFDATE,PRINT,SNAP)\n  ENTRY   VSMANAL\n  NAME    VSMANAL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSMANAL@": {"ttr": 26374, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x91'_\\x00\\x91'_\\x14#\\x00(\\x00(\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-10-02T00:00:00", "modifydate": "1991-10-02T14:23:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "SYSPAJA"}, "text": "1   02/10/91\n                                                      VSMANAL   1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *            VSM  ANALYSIS            * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This program produces a listing of the entire VSM\n  ---------    blocks (all subpools) for specified storage areas.\n\n\n  Call of the program :\n  ---------------------\n\n         //LIST   EXEC  PGM=VSMANAL,PARM='...'\n         //SYSPRINT DD  SYSOUT=A\n         //SYSSNAP  DD  SYSOUT=A (only if debug needed)\n\n         Where ... is used to specify the desired storage areas,\n               and may be any one of the following keywords :\n                    SQA  - System Queue Area\n                    CSA  - Common Service Area\n                    LSQA - Local System Queue Area\n                    PVT  - Private (current Address Space)\n                    AE   - Alloacted Element (current Address Space)\n               or, if more than one desired, they must be separated\n               by a comma.\n                    I.E. : PARM='SQA,CSA,LSQA'\n         Also alternate DD-names may be specified for the list or\n               snap output, as shown below :\n                    PARM='L=MYPRINT,S=MYSNAP'\n         If no PARM= is given, default is assumed like :\n                    PARM='CSA,L=SYSPRINT,S=SYSSNAP'\n         Special PARM= entries for test an SQA space (subpool 226) :\n               T=ALL to getmain/freemain the SQA space\n               T=GET to getmain only and notify the SQA space\n               T=HHHHHHHH to freemain only the SQA space getmain'd\n                    by a previous execution of T=GET\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTOCANA$": {"ttr": 26376, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942\\x8f\\x00\\x942\\x8f\\x10@\\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-24T00:00:00", "modifydate": "1994-11-24T10:40:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "SYSPAJA"}, "text": "//VTOCANAL JOB (........),'INSTALL -VTOCANAL-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                IXTOFMT5  TXPRINT   VTOCQR    VTOCSR               *\n//* NOTE : IF YOU DON'T HAVE INDEXED VTOC IN YOUR SYSTEM, YOU MAY :   *\n//*        1. IGNORE THE PRE-REQUISITE IXTOFMT5, AND                  *\n//*        2. DELETE THE INCLUDE SYSADD(IXTOFMT5) STATEMENT IN THE    *\n//*           LINK-EDIT STEP (LNK) INPUT.                             *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=VTOCANAL\n//LNK     EXEC PAJILKL\n//SYSIN     DD *\n  INCLUDE SYSADD(PRINT,VTOCQR,VTOCSR)\n  INCLUDE SYSADD(IXTOFMT5)\n  ENTRY   VTAMAIN\n  NAME    VTOCANAL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCANA@": {"ttr": 26378, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x855O\\x00\\x855O\\x16\\x15\\x00.\\x00.\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-12-20T00:00:00", "modifydate": "1985-12-20T16:15:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      VTOCANAL  1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *         V T O C    ANALYSIS         * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This program performs the space distribution (map)\n  ---------    analysis on any volume which is a direct-access\n               storage device class (UCBTYP+2 is X'20').\n\n               A DD-card, written as below, is needed for each\n               volume of which the analysis is desired :\n\n               //VTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD\n\n\n  Call of the program :\n  ---------------------\n\n         //ANAL   EXEC  PGM=VTOCANAL\n         //VTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD\n         //VTDD...  DD  --- --- --- --- --- --- --- ---\n         //VTDD...  DD  --- any number of DD-cards. ---\n         //VTDD...  DD  --- --- --- --- --- --- --- ---\n         //SYSPRINT DD  SYSOUT=A\n\n\n  Restriction : be carefull to run this program on volumes which\n  ============= are not involved by allocations during the VTOC\n                analysis.\n\n\n  EXEC statement parm. field : options are separated by comma.\n  ============================\n\n         N :       suppress the volume VTOC analysis list.\n\n         R :       request to supply the VTOC recovery information\n                   if the program finds that any volume space has\n                   been lost.\n\n         Q :       use the quick (EXCP full track) method to read\n                   the VTOC.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTOCANAL": {"ttr": 26380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x882\\x7f\\x00\\x882\\x7f\\t%\\x05r\\x05r\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-11-22T00:00:00", "modifydate": "1988-11-22T09:25:00", "lines": 1394, "newlines": 1394, "modlines": 0, "user": "SYSPAJA"}, "text": "VTA      TITLE 'DIRECT-ACCESS STORAGE - VTOC ANALYSIS.'\nVTAMAIN  START 0\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *         V T O C    ANALYSIS         * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    THIS PROGRAM PERFORMS THE SPACE DISTRIBUTION (MAP)     *\n* ---------    ANALYSIS ON ANY VOLUME WHICH IS A DIRECT-ACCESS        *\n*              STORAGE  DEVICE CLASS (UCBTYP+2 = X'20').              *\n*                                                                     *\n*              A DD-CARD, WRITTEN AS BELOW, IS NEEDED FOR EACH        *\n*              VOLUME ON WHICH THE ANALYSIS IS DESIRED :              *\n*                                                                     *\n*              //VTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD        *\n*                                                                     *\n*                                                                     *\n* CALL OF THE PROGRAM :                                               *\n* ---------------------                                               *\n*                                                                     *\n*        //ANAL   EXEC  PGM=VTOCANAL                                  *\n*        //VTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD              *\n*        //VTDD...  DD  --- --- --- --- --- --- --- ---               *\n*        //VTDD...  DD  --- ANY NUMBER OF DD-CARDS. ---               *\n*        //VTDD...  DD  --- --- --- --- --- --- --- ---               *\n*        //SYSPRINT DD  SYSOUT=A                                      *\n*                                                                     *\n*                                                                     *\n* RESTRICTION : BE CAREFULL TO RUN THIS PROGRAM ON VOLUMES WHICH      *\n* ------------- ARE NOT INVOLVED BY ALLOCATIONS DURING THE VTOC       *\n*               ANALYSIS.                                             *\n*               MVS/XA : MUST BE AMODE AND RMODE 24.                  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n        $DEFREG\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nOFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING.\nON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING.\nNTF13    EQU   64                  NO. OF FMT1-FMT3 ELEMENTS IN TABLE.\nNTF5     EQU   8                   NO. OF FMT5 ELEMENTS IN TABLE.\n         EJECT\n*        INTERNAL WORK TABLE DESCRIPTION (IWT).\n*        --------------------------------------\n         SPACE 1\nTABDSECT DSECT\n         SPACE 1\nEXTCA    DS    AL3                 EXTENT SEQUENTIAL CHAIN ADDRESS.\nEXTDSN   DS    CL44                EXTENT OR DATA-SET NAME.\nEXTSQN   DS    XL1                 EXTENT SEQUENCE NUMBER.\nEXTLOL   DS    XL4                 EXTENT LOWER LIMIT (CCHH).\nEXTUPL   DS    XL4                 EXTENT UPPER LIMIT (CCHH).\nEXTLOLT  DS    XL4                 EXTENT LOWER LIMIT (TRACK ADDRESS).\nEXTUPLT  DS    XL4                 EXTENT UPPER LIMIT (TRACK ADDRESS).\n         SPACE 1\nTABLGTH  EQU   *-TABDSECT          ONE ELEMENT TABLE LENGTH.\n         SPACE 2\nVTAMAIN  CSECT                     RESTORE ORIGNAL CSECT.\n         SPACE 2\n*        FORMATS 1-2-3 TABLE DESCRIPTION.\n*        --------------------------------\n         SPACE 1\nFMTDSECT DSECT\n         SPACE 1\nFMTSE    DS    F                   FMT 1 OR 3 START EL.ADDR. IN IWT.\nFMTAF2   DS    XL5                 FMT 2 ADDRESS (CCHHR).\nFMTAF3   DS    XL5                 FMT 3 ADDRESS (CCHHR).\n         DS    0F                  FORCE WORD BOUNDARY LENGTH.\n         SPACE 1\nFMTLGTH  EQU   *-FMTDSECT          ONE ELEMENT TABLE LENGTH.\n         SPACE 2\nVTAMAIN  CSECT                     RESTORE ORIGNAL CSECT.\n         EJECT\n        PRINT  NOGEN\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 1\nDSCDSECT DSECT\n        IECSDSL1 (1)\n         SPACE 1\n        ORG    DS1EXT1             EXTENT DESCRIPTION.\nDSCBTYP  DS    XL1                 DATA-SET EXTENT TYPE INDICATOR.\nDSCBSQN  DS    XL1                 EXTENT SEQUENCE NUMBER.\nDSCBLOL  DS    XL4                 LOWER LIMIT OF THIS EXTENT (CCHHR).\nDSCBUPL  DS    XL4                 UPPER LIMIT OF THIS EXTENT (CCHHR).\n         SPACE 1\n         ORG   DS1DSNAM\n        IECSDSL1 (2)\n         SPACE 1\n         ORG   DS1DSNAM\n        IECSDSL1 (3)\n         SPACE 1\n         ORG   DS1FMTID\n        IECSDSL1 (4)\n         SPACE 1\n         ORG   DS1DSNAM\n        IECSDSL1 (5)\nDS5LGTH  EQU   *-DS5KEYID          DSCB 5 LENGTH.\n         SPACE 1\n        ORG    DS5AVEXT            AVAILABLE EXTENT DESCRIPTION.\nDSCBRLT  DS    XL2                 RELATIVE TRK. ADDRESS OF 1ST TRK.\nDSCBUNC  DS    XL2                 NO. OF ENTIRE UNUSED CYL.\nDSCBUNT  DS    XL1                 NO. OF ADDITIONAL UNUSED TRK.\n         SPACE 1\n        ORG    DS1DSNAM\n        IECSDSL1 (6)\n         SPACE 1\nVTAMAIN  CSECT                     RESTORE ORIGNAL CSECT.\n         SPACE 1\n        PRINT  GEN\n         EJECT\n        $XENT BASE=(R11,R12)\n*  EXEC PARM. FIELD DESCRIPTION : OPTIONS ARE SEPARATED BY COMMA.\n*  ------------------------------\n*\n*        N :       SUPPRESS THE VOLUME VTOC ANALYSIS LIST.\n*\n*        R :       REQUEST TO SUPPLY THE VTOC RECOVERY INFORMATION\n*                  IF THE PROGRAM FINDS THAT ANY VOLUME SPACE HAS\n*                  BEEN LOST.\n*\n*        Q :       USE THE QUICK (EXCP FULL TRACK) METHOD TO READ\n*                  THE VTOC.\n         SPACE 1\n         L     R1,0(R1)            PARM. FIELD ADDRESS.\n         LH    R4,0(R1)            PARM. FIELD LENGTH.\n         LTR   R4,R4\n         BNP   NOPARM              BRANCH IF NO PARM. FIELD.\n         LA    R2,2(R1)            SET START OF PARM. FIELD TEXT.\n         LA    R4,1(R4,R1)         END OF PARM. FIELD TEXT.\nPA0      CLI   0(R2),C'R'\n         BNE   PA1                 BRANCH IF NOT RECOVERY REQUEST.\n         TM    SWRCV+1,ON          TEST IF FIRST TIME,\n         BZ    PARMERR             BRANCH IF NOT.\n         NI    SWRCV+1,OFF         SET NOP OPERATION.\n         B     PA3\nPA1      CLI   0(R2),C'N'\n         BNE   PA2                 BRANCH IF NOT NOLIST REQUEST.\n         TM    SWLS+1,ON           TEST IF FIRST TIME,\n         BO    PARMERR             BRANCH IF NOT.\n         OI    SWLS+1,ON           SET BRANCH OPERATION.\n         B     PA3\nPA2      CLI   0(R2),C'Q'\n         BNE   PARMERR             BRANCH IF NOT QUICK REQUEST.\n         TM    SWQR+1,ON           TEST IF FIRST TIME,\n         BO    PARMERR             BRANCH IF NOT.\n         OI    SWQR+1,ON           SET BRANCH OPERATION.\nPA3      LA    R2,1(R2)            NEXT OPERAND POINTER IF ANY.\n         CLR   R2,R4\n         BH    NOPARM              BRANCH IF END OF PARM. FIELD TEXT.\n         CLI   0(R2),C','\n         BNE   PARMERR             NOT SEPARATOR.\n         LA    R2,1(R2)            NEXT SUBFIELD IF ANY.\n         CLR   R2,R4\n         BNH   PA0                 BRANCH IF NOT END PARM. FIELD TEXT.\n         SPACE 2\nNOPARM  EXTRACT   ATIOT,'S',FIELDS=(TIOT)\n        GETMAIN   VC,LA=NMCORE,A=ATABLE\n         LTR   R15,R15             TEST COMPLETION CODE,\n         BNZ   NSTOR               BRANCH IF NO STORAGE.\n         L     R1,ATABLE           GET START OF AREA.\n         L     R9,ATABLE+4         GET LENGTH OF AREA.\n         LR    R0,R9\n         S     R9,NMCORE           SUBTRACT RESERVED AREA SIZE.\n         BNP   NSP                 BRANCH OF NOT ENOUGH SPACE.\n         LA    R7,L'ADDREC+DS5LGTH     LENGTH OF FMT5 ELEMENT TABLE.\n         MH    R7,NRTF5            COMPUTE SPACE FOR FMT 5 TABLE.\n         LR    R6,R7\n         AH    R7,NRTF13           ADD FMT 1-2-3 TABLE LENGTH.\n         CLR   R9,R7               TEST IF SPACE ENOUGH,\n         BNH   NST                 BRANCH IF NOT.\n         ST    R1,AFMT5            SET FMT 5 TABLE START ADDRESS.\n         AR    R6,R1\n         ST    R6,AFMT13           SET FMT 1-2-3 TABLE START ADDRESS.\n         AR    R1,R7\n         ST    R1,ATABLE           SET NEW TABLE ADDRESS.\n         SR    R9,R7               ADJUST REMAINING LENGTH.\n         SR    R0,R7\n         LA    R7,TABLGTH          LENGTH OF 1 TABLE ELEMENT.\n         LR    R6,R7\n         SLL   R6,6\n         CLR   R9,R6               TEST FOR A MINIMUM OF 64 ELEMENTS,\n         BL    NST                 BRANCH IF NO TABLE SPACE.\n         XR    R8,R8\n         DR    R8,R7               COMPUTE NUMBER OF ENTRIES.\n         XR    R8,R8\n         MR    R8,R7               COMPUTE SIZE OF USEFUL BLOCK.\n         LA    R8,7(0,R9)          COMPUTE NEXT DOUBLE-WORD BOUNDARY.\n         SRL   R8,3\n         SLL   R8,3\n         LR    R7,R1\n         AR    R1,R8               ADDRESS OF STORAGE TO FREE.\n         AR    R7,R9               POINT TO END OF AREA + 1.\n         ST    R7,ATABLE+4\n         SR    R0,R8               COMPUTE SIZE TO FREE.\n        FREEMAIN   R,LV=(0),A=(1)  FREE STORAGE.\n         SPACE 2\n         L     R8,ATIOT            SET ADDRESSABILITIES.\n         USING TIODSECT,R8\n         LA    R6,DATAAREA\n         USING DSCDSECT,R6\n         SPACE 2\nNEXTDD   CLC   TIOELNGH(L'ZEROS),ZEROS\n         BE    SWEND               END OF TIOT INDICATOR.\n         CLC   TIOEDDNM(L'VTDD),VTDD\n         BNE   NOVTA+L'NOVTA       BRANCH IF NOT VTOC DD-NAME.\n         MVC   VTDDNM,TIOEDDNM\n         ST    R8,STIOT\n         DROP  R8\n         TM    SWQR+1,ON\n         BO    QOPEN\n        $VTOCSO VTDDNM,DVTYP\n         B     TOPEN\nQOPEN   $VTOCQO VTDDNM,DVTYP\nTOPEN    LTR   R15,R15\n         BZ    DSOP\n         TM    SWQR+1,ON\n         BO    *+L'*+10\n         MVC   MSERR(8),VSO\n         B     SMSG\n         MVC   MSERR(8),VQO\n         B     SMSG\n         SPACE 1\nCFMTXC   XC    0(*-*,R2),0(R2)\nDSOP     NI    SWCL+1,OFF          SET NOP OPERATION.\n         LA    R1,NTF5             CLEAR FMT 5 TABLE.\n         L     R2,AFMT5\nCFMT5    XC    0(L'ADDREC+DS5LGTH,R2),0(R2)\n         LA    R2,L'ADDREC+DS5LGTH(R2)\n         BCT   R1,CFMT5\n         LH    R0,NRTF13           CLEAR FMT 1-2-3 TABLE.\n         L     R2,AFMT13\n         BCTR  R0,0\n         SRDL  R0,8\n         SRL   R1,24\n         LTR   R0,R0\n         BZ    CFMT13B\nCFMT13A  XC    0(256,R2),0(R2)\n         LA    R2,256(R2)\n         BCT   R0,CFMT13A\nCFMT13B  EX    R1,CFMTXC\n         STH   R0,FDSCB            CLEAR FREE DSCB'S COUNT.\n         STH   R0,VFDSCB\n         XC    IXDSCB(L'IXDSCB+L'IXVIRS),IXDSCB\n         OI    SWFS+1,ON\n         NI    FMT4+1,OFF\n         NI    SWXX+1,OFF\n         L     R8,ATABLE\n         USING TABDSECT,R8\n         SPACE 2\nREAD     XC    DATAAREA(L'DATAAREA),DATAAREA   CLEAR READ DSCB'S AREA.\nSWQR     NOP   QREAD\n        $VTOCSR (R6),ADDREC\n         B     TREAD\nQREAD   $VTOCQR (R6),ADDREC\nTREAD    LTR   R15,R15\n         BZ    READOK\n         BM    ENDVTOC             END-OF-FILE.\n         TM    SWQR+1,ON\n         BO    *+L'*+10\n         MVC   MSERR(8),VSR\n         B     SREAD\n         MVC   MSERR(8),VQR\n         LTR   R0,R0\n         BZ    SREAD\n         ST    R0,WORKF            IX - DISPLAY R0.\n         UNPK  MSIX+L'MSIX-9(9),WORKF(5)\n         NC    MSIX+L'MSIX-9(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    MSIX+L'MSIX-9(8),TRTAB\n         MVI   MSIX+L'MSIX-1,C'.'\n         NI    SWIX+1,OFF\nSREAD    STC   R15,MSERR+L'MSERR-9\n         NI    MSERR+L'MSERR-9,X'0F'\n         SRL   R15,4\n         STC   R15,MSERR+L'MSERR-10\n         NI    MSERR+L'MSERR-10,X'0F'\n         TR    MSERR+L'MSERR-10(2),TRTAB\n         MVI   MC,C'0'             DOUBLE SPACE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'MSERR),MSERR\n         OI    SWPR+1,ON           SET BRANCH OPERATION.\n         BAS   R3,PMSG\nSWIX     B     SETSWS\n         OI    SWIX+1,ON\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'MSIX),MSIX\n         BAS   R3,PMSG\nSETSWS   NI    SWPR+1,OFF          SET NOP OPERATION.\n         OI    SWEND+1,ON          SET BRANCH OPERATION.\n         TM    SWRCV+1,ON          TEST IF RECOVERY REQUESTED,\n         BO    ENDVT               BRANCH IF NOT.\n         LA    R9,ADDREC           DUMP ADDRESS AND DSCB'S AREA.\n         LA    R10,3\n         MVI   MC,C' '             NORMAL SPACE.\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         OI    SWPR+1,ON           SET BRANCH OPERATION.\nDUMP     XR    R0,R0\n         LA    R1,50\n         LA    R15,MESSAGE+9\nDUMPL    IC    R0,0(R9)\n         STC   R0,1(R15)\n         NI    1(R15),X'0F'\n         SRL   R0,4\n         STC   R0,0(R15)\n         LA    R9,1(R9)\n         LA    R15,2(R15)\n         BCT   R1,DUMPL\n         TR    MESSAGE+9(100),TRTAB\n         BAS   R3,PMSG\n         BCT   R10,DUMP\n         NI    SWPR+1,OFF          SET NOP OPERATION.\n         B     READ\nREADOK   CLI   DS4IDFMT,C'4'       TEST IF DSCB'S FORMAT 4,\n         BE    FMT4                BRANCH IF YES.\nSWFS     B     FRSTNOT4\n         CLI   DS1FMTID,C'1'       TEST IF DSCB'S FORMAT 1,\n         BE    FMT1                BRANCH IF YES.\n         CLI   DS2FMTID,C'2'       TEST IF DSCB'S FORMAT 2,\n         BE    FMT2                BRANCH IF YES.\n         CLI   DS3FMTID,C'3'       TEST IF DSCB'S FORMAT 3,\n         BE    FMT3                BRANCH IF YES.\n         CLI   DS5FMTID,C'5'       TEST IF DSCB'S FORMAT 5,\n         BE    FMT5                BRANCH IF YES.\n         CLI   DS6FMTID,C'6'       TEST IF DSCB'S FORMAT 6,\n         BE    READ                BRANCH IF YES.\n         LH    R1,FDSCB            UPDATE FREE DSCB'S COUNT.\n         LA    R1,1(,R1)\n         STH   R1,FDSCB\n         B     READ\nFRSTNOT4 MVI   MC,C'0'             DOUBLE SPACE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'MSNF4),MSNF4\n         MVC   MESSAGE+8(L'VOLSER),VOLSER\n         BAS   R3,PMSG\n         OI    SWXX+1,ON\n         B     ENDVT\n         SPACE 2\nFMT1     DS    0H                  FORMAT 1 - IDENTIFIER DSCB.\n         LR    R1,R8\n         LA    R2,DS1EXT1          STORE EXTENTS.\n         BAS   R10,FMT1ST\n         LA    R2,DS1EXT2\n         BAS   R10,FMT1ST\n         LA    R2,DS1EXT3\n         BAS   R10,FMT1ST\nFMT1H    OC    DS1PTRDS(L'DS1PTRDS),DS1PTRDS TEST IF FMT 2 OR 3 EXISTS,\n         BZ    READ                BRANCH IF NOT.\n         L     R2,AFMT13           GET FMT 1-2-3 TABLE ADDRESS.\n         LA    R0,NTF13            NR. OF ELEMENTS.\n         USING FMTDSECT,R2\nFMT1A    OC    FMTSE(FMTLGTH),FMTSE     TEST IF ELEMENT EXISTS,\n         BZ    FMT1B               BRANCH IF NOT.\n         TM    DS1DSORG,DS1DSGIS   TEST IF DSORG=IS,\n         BZ    FMT1I               BRANCH IF NOT.\n         CLC   FMTAF2(L'DS1PTRDS),DS1PTRDS   TEST IF FMT2 CCHHR MATCH,\n         B     FMT1I+L'FMT1I\nFMT1I    CLC   FMTAF3(L'DS1PTRDS),DS1PTRDS   TEST IF FMT3 CCHHR MATCH,\n         BE    FMT1G               BRANCH IF YES.\n         LA    R2,FMTLGTH(R2)      POINT TO NEXT ELEMENT.\n         BCT   R0,FMT1A            CONTINUE SEARCH.\n         B     T13OV               TABLE OVERFLOW.\nFMT1B    TM    DS1DSORG,DS1DSGIS   TEST IF DSORG=IS,\n         BZ    FMT1J               BRANCH IF NOT.\n         MVC   FMTAF2(L'DS1PTRDS),DS1PTRDS   SET FMT2 CCHHR.\n         B     FMT1J+L'FMT1J\nFMT1J    MVC   FMTAF3(L'DS1PTRDS),DS1PTRDS   SET FMT3 CCHHR.\n         ST    R1,FMTSE            SET FMT 1 ELEMENT ADDRESS IN IWT.\n         B     READ\nFMT1G    TM    DS1DSORG,DS1DSGIS   TEST IF DSORG=IS,\n         BZ    FMT1C               BRANCH IF NOT.\n         OC    FMTAF3(L'FMTAF3),FMTAF3  TEST IF FMT3 EXISTS,\n         BZ    FMT1E               BRANCH IF NOT.\n         OC    FMTSE(L'FMTSE),FMTSE     TEST IF FMT3 PRESENT,\n         BZ    FMT1J+L'FMT1J       BRANCH IF NOT.\nFMT1C    L     R7,FMTSE            GET FMT3 START EL. ADDRESS IN IWT.\n         XR    R1,R1\n         IC    R1,EXTDSN-TABDSECT(R7)   NO. FMT3 EXTENTS TO COMPLETE.\nFMT1D    MVC   EXTDSN-TABDSECT(L'DS1DSNAM,R7),DS1DSNAM\n         LA    R7,TABLGTH(R7)      NEXT EXTENT ADDRESS.\n         BCT   R1,FMT1D            LOOP IF MORE.\nFMT1E    BCT   R0,FMT1F            TEST IF LAST FMT 1-2-3 ELEMENT,\n         XC    FMTSE(FMTLGTH),FMTSE     CLEAR LAST ELEMENT.\n         B     READ\nFMT1F    OC    FMTSE+FMTLGTH(FMTLGTH),FMTSE+FMTLGTH    TEST NEXT EL.,\n         BZ    FMT1E+L'FMT1E       BRANCH IF NOT.\n         MVC   FMTSE(FMTLGTH),FMTSE+FMTLGTH  SHIFT FMT 1-2-3 TABLE EL.\n         LA    R2,FMTLGTH(R2)      POINT TO NEXT ELEMENT.\n         B     FMT1E\n         DROP  R2\n         SPACE 1\nFMT1ST   CLI   0(R2),0             TEST IF EXTENT EXISTS,\n         BE    FMT1H               BRANCH IF NOT.\n         CL    R8,ATABLE+4         TEST IF TABLE OVERFLOW,\n         BNL   TABOV               BRANCH IF YES.\n         MVC   EXTDSN(L'DS1DSNAM),DS1DSNAM   BUILD ELEMENT.\n         MVC   EXTSQN(L'DSCBSQN+L'DSCBLOL+L'DSCBUPL),1(R2)\n         BAS   R9,TAC              COMPUTE TRACK ADDRESSES.\n         LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.\n         BR    R10                 RETURN.\n         SPACE 2\nFMT2     DS    0H                  FORMAT 2 - INDEX DSCB.\n         L     R2,AFMT13           GET FMT 1-2-3 TABLE ADDRESS.\n         LA    R0,NTF13            NR. OF ELEMENTS.\n         USING FMTDSECT,R2\nFMT2A    OC    FMTSE(FMTLGTH),FMTSE     TEST IF ELEMENT EXISTS,\n         BZ    FMT2C               BRANCH IF NOT.\n         CLC   FMTAF2(L'ADDREC-3),ADDREC+3 TEST IF MY FMT2 ADDRESS,\n         BE    FMT2D               BRANCH IF YES.\n         OC    DS2PTRDS(L'DS2PTRDS),DS2PTRDS TEST IF FMT3 EXISTS,\n         BZ    FMT2B               BRANCH IF NOT.\n         CLC   FMTAF3(L'DS2PTRDS),DS2PTRDS   TEST IF ADDRESS MATCH,\n         BE    FMT2I               BRANCH IF YES.\nFMT2B    LA    R2,FMTLGTH(R2)      POINT TO NEXT ELEMENT.\n         BCT   R0,FMT2A            CONTINUE SEARCH.\n         B     T13OV               TABLE OVERFLOW.\nFMT2C    MVC   FMTAF2(L'ADDREC-3),ADDREC+3 SET MY FMT2 CCHHR.\n         MVC   FMTAF3(L'DS2PTRDS),DS2PTRDS   SET EVENTUAL FMT3 CCHHR.\n         B     READ\nFMT2D    OC    DS2PTRDS(L'DS2PTRDS),DS2PTRDS TEST IF FMT3 EXISTS,\n         BZ    FMT1E               BRANCH IF NOT.\n         L     R15,AFMT13          SCAN FOR A POSSIBLE FMT3 PRESENT.\n         LA    R14,NTF13           NR. OF ELEMENTS.\nFMT2E    OC    FMTSE-FMTDSECT(FMTLGTH,R15),FMTSE-FMTDSECT(R15)   TEST,\n         BZ    FMT2C+L'FMT2C       BRANCH IF NO ELEMENT.\n         CLC   FMTAF3-FMTDSECT(L'DS2PTRDS,R15),DS2PTRDS     TEST ADDR.,\n         BE    FMT2F               BRANCH IF IT MATCH.\n         LA    R15,FMTLGTH(R15)    POINT TO NEXT ELEMENT.\n         BCT   R14,FMT2E           CONTINUE SEARCH.\n         B     T13OV               TABLE OVERFLOW.\nFMT2F    MVC   FMTSE(L'FMTSE),FMTSE-FMTDSECT(R15) MOVE FMT3 EL. INF.\n         CLR   R2,R15              TEST IF SHIFT INVOLVE FIRST POINTER,\n         BNH   FMT2H               BRANCH IF NOT.\n         LA    R10,FMTLGTH         ADJUST FIRST POINTER.\n         SLR   R2,R10\n         AH    R0,NULL\n         B     FMT2H\nFMT2G    OC    FMTSE+FMTLGTH-FMTDSECT(FMTLGTH,R15),FMTSE+FMTLGTH-FMTDSE1\n               CT(R15)             TEST NEXT ELEMENT,\n         BZ    FMT1C               BRANCH IF NO ELEMENT.\n         MVC   FMTSE-FMTDSECT(FMTLGTH,R15),FMTSE+FMTLGTH-FMTDSECT(R15)\n         LA    R15,FMTLGTH(R15)    POINT TO NEXT ELEMENT.\nFMT2H    BCT   R14,FMT2G           TEST IF LAST FMT 1-2-3 ELEMENT,\n         XC    FMTSE-FMTDSECT(FMTLGTH,R15),FMTSE-FMTDSECT(R15)   CLEAR.\n         B     FMT1C\nFMT2I    L     R15,AFMT13          SCAN FOR A POSSIBLE FMT1 PRESENT,\n         LA    R14,NTF13           NR. OF ELEMENTS.\nFMT2J    OC    FMTSE-FMTDSECT(FMTLGTH,R15),FMTSE-FMTDSECT(R15)   TEST,\n         BZ    FMT2K               BRANCH IF NO ELEMENT.\n         CLC   FMTAF2-FMTDSECT(L'ADDREC-3,R15),ADDREC+3   TEST FMT2,\n         BE    FMT2L               BRANCH IF MY FMT2 ADDRESS.\n         LA    R15,FMTLGTH(R15)    POINT TO NEXT ELEMENT.\n         BCT   R14,FMT2J           CONTINUE SEARCH.\n         B     T13OV               TABLE OVERFLOW.\nFMT2K    MVC   FMTAF2(L'ADDREC-3),ADDREC+3 SET MY FMT2 CCHHR.\n         B     READ\nFMT2L    LR    R10,R15             EXCHANGE POINTERS.\n         LR    R15,R2\n         LR    R2,R10\n         LR    R10,R14\n         LR    R14,R0\n         LR    R0,R10\n         B     FMT2F               GO PROCESS.\n         DROP  R2\n         SPACE 2\nFMT3     DS    0H                  FORMAT 3 - EXTENSION DSCB.\n         L     R2,AFMT13           GET FMT 1-2-3 TABLE ADDRESS.\n         LA    R0,NTF13            NR. OF ELEMENTS.\n         USING FMTDSECT,R2\nFMT3A    OC    FMTSE(FMTLGTH),FMTSE     TEST IF ELEMENT EXISTS,\n         BZ    FMT3B               BRANCH IF NOT.\n         CLC   FMTAF3(L'ADDREC-3),ADDREC+3 TEST IF MY FMT3 ADDRESS,\n         BE    FMT3F               BRANCH IF YES.\n         LA    R2,FMTLGTH(R2)      POINT TO NEXT ELEMENT.\n         BCT   R0,FMT3A            CONTINUE SEARCH.\n         B     T13OV               TABLE OVERFLOW.\nFMT3B    MVC   FMTAF3(L'ADDREC-3),ADDREC+3 SET MY FMT3 CCHHR.\n         ST    R8,FMTSE            SET FMT3 ELEMEMT ADDRESS IN IWT.\n         LR    R7,R8               SAVE FIRST FMT3 EL. ADDRESS IN IWT.\n         LA    R14,FMT3E           SET END RETURN ADDRESS.\n         XR    R1,R1               NO. OF EXTENTS COUNTER.\n         LA    R0,4                SET FIRST 4 EXTENTS POINTER.\n         LA    R2,DS3EXTNT\nFMT3C    BAS   R10,FMT3ST\n         LA    R2,L'DS1EXT1(R2)\n         LA    R1,1(R1)\n         BCT   R0,FMT3C\n         LA    R0,9                SET LAST 9 EXTENTS POINTER.\n         LA    R2,DS3ADEXT\nFMT3D    BAS   R10,FMT3ST\n         LA    R2,L'DS1EXT1(R2)\n         LA    R1,1(R1)\n         BCT   R0,FMT3D\nFMT3E    STC   R1,EXTDSN-TABDSECT(R7)   NO. FMT3 EXTENTS TO COMPLETE.\n         B     READ\nFMT3F    L     R7,FMTSE            GET FMT1 ELEMENT ADDRESS IN IWT.\n         LTR   R7,R7               TEST IF EXISTS,\n         BZ    FMT3B+L'FMT3B       BRANCH IF NOT.\n         B     FMT3H\nFMT3G    OC    FMTSE+FMTLGTH(FMTLGTH),FMTSE+FMTLGTH    TEST NEXT EL.,\n         BZ    FMT3H+L'FMT3H       BRANCH IF NOT.\n         MVC   FMTSE(FMTLGTH),FMTSE+FMTLGTH  SHIFT FMT 1-2-3 TABLE EL.\n         LA    R2,FMTLGTH(R2)      POINT NEXT ELEMENT.\nFMT3H    BCT   R0,FMT3G            TEST IF LAST FMT 1-2-3 ELEMENT,\n         XC    FMTSE(FMTLGTH),FMTSE     CLEAR LAST ELEMENT.\n         DROP  R2\n         LA    R14,READ            SET END RETURN ADDRESS.\n         LA    R0,4                SET FIRST 4 EXTENTS POINTER.\n         LA    R2,DS3EXTNT\nFMT3I    LR    R1,R8\n         BAS   R10,FMT3ST\n         MVC   EXTDSN-TABDSECT(L'EXTDSN,R1),EXTDSN-TABDSECT(R7)\n         LA    R2,L'DS1EXT1(R2)\n         BCT   R0,FMT3I\n         LA    R0,9                SET LAST 9 EXTENTS POINTER.\n         LA    R2,DS3ADEXT\nFMT3J    LR    R1,R8\n         BAS   R10,FMT3ST\n         MVC   EXTDSN-TABDSECT(L'EXTDSN,R1),EXTDSN-TABDSECT(R7)\n         LA    R2,L'DS1EXT1(R2)\n         BCT   R0,FMT3J\n         B     READ\n         SPACE 1\nFMT3ST   CLI   0(R2),0             TEST IF EXTENT EXISTS,\n         BER   R14                 BRANCH IF NOT.\n         CL    R8,ATABLE+4         TEST IF TABLE OVERFLOW,\n         BNL   TABOV               BRANCH IF YES.\n         MVC   EXTSQN(L'DSCBSQN+L'DSCBLOL+L'DSCBUPL),1(R2)\n         BAS   R9,TAC              COMPUTE TRACK ADDRESSES.\n         LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.\n         BR    R10                 RETURN.\n         SPACE 2\nFMT4     B     MOREF4              FORMAT 4 - VTOC DSCB.\n         CL    R8,ATABLE+4         TEST IF TABLE OVERFLOW,\n         BNL   TABOV               BRANCH IF YES.\n         NI    SWFS+1,OFF\n         OI    FMT4+1,ON\n         MVC   EXTDSN(L'VTOCN),VTOCN    SET VTOC NAME.\n         MVC   EXTDSN+L'VTOCN(L'EXTDSN-L'VTOCN),EXTDSN+L'VTOCN-1\n         MVC   VFDSCB(L'DS4DSREC),DS4DSREC   SET VTOC FREE DSCB'S.\n         CLI   DS4VTOCI,0          TEST IF ANY VTOC INDICATORS ON,\n         BE    FMT4A               BRANCH IF NOT.\n         MVC   EXTDSN+L'EXTDSN-L'VTI(L'VTI),VTI\n         XR    R15,R15\n         IC    R15,DS4VTOCI\n         STC   R15,EXTDSN+L'EXTDSN-2\n         SRL   R15,4\n         STC   R15,EXTDSN+L'EXTDSN-3\n         NI    EXTDSN+L'EXTDSN-2,X'0F'\n         TR    EXTDSN+L'EXTDSN-3(2),TRTAB\n         MVI   EXTDSN+L'VTOCN,C'.'\n         MVC   EXTDSN+L'VTOCN+1(L'EXTDSN-L'VTOCN-L'VTI-1),EXTDSN+L'VTOC1\n               N                   INDICATORS PRINT PREPARED.\n         TM    SWLS+1,ON           TEST IF NOLIST REQUESTED,\n         BZ    FMT4A               BRANCH IF NOT.\n         MVI   MC,C' '             NORMAL SPACE.\n         MVI   MESSAGE,C' '        CLEAR LINE.\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'VOLSER),VOLSER    VOLUME SERIAL NUMBER.\n         MVI   MESSAGE+L'VOLSER+2,C'-'\n         MVC   MESSAGE+L'VOLSER+4(L'EXTDSN),EXTDSN\n         BAS   R3,PMSG\nFMT4A    MVC   EXTSQN(L'DSCBSQN+L'DSCBLOL+L'DSCBUPL),DS4VTOCE+1\n         BAS   R9,TAC              COMPUTE TRACK ADDRESSES.\n         LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.\n         B     READ\nMOREF4   MVI   MC,C'0'             DOUBLE SPACE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'MSMF4),MSMF4\n         MVC   MESSAGE+8(L'VOLSER),VOLSER\n         BAS   R3,PMSG\n         OI    SWXX+1,ON\n         TM    SWRCV+1,ON          TEST IF RECOVERY REQUESTED,\n         BO    ENDVT               BRANCH IF NOT.\n         LA    R9,ADDREC           DUMP ADDRESS AND DSCB'S AREA.\n         LA    R10,3\n         MVI   MC,C' '             NORMAL SPACE.\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\nDMP      XR    R0,R0\n         LA    R1,50\n         LA    R15,MESSAGE+9\nDMPL     IC    R0,0(R9)\n         STC   R0,1(R15)\n         NI    1(R15),X'0F'\n         SRL   R0,4\n         STC   R0,0(R15)\n         LA    R9,1(R9)\n         LA    R15,2(R15)\n         BCT   R1,DMPL\n         TR    MESSAGE+9(100),TRTAB\n         BAS   R3,PMSG\n         BCT   R10,DMP\n         B     ENDVT\n         SPACE 2\nFMT5     DS    0H                  FORMAT 5 - FREE SPACE DSCB.\n         LA    R1,NTF5             NR. OF POSSIBLE FMT5 IN TABLE.\n         L     R2,AFMT5            GET FMT5 TABLE ADDRESS.\nFMT5A    OC    0(L'ADDREC,R2),0(R2)    TEST IF EMPTY,\n         BZ    FMT5B               BRANCH IF YES.\n         LA    R2,L'ADDREC+DS5LGTH(R2) NEXT FMT5 POINTER.\n         BCT   R1,FMT5A            CONTINUE SEARCH.\n         B     T5OV                TABLE OVERFLOW.\nFMT5B    MVC   0(L'ADDREC,R2),ADDREC  MOVE MBBCCHHR OF FMT5 DSCB.\n         MVC   L'ADDREC(DS5LGTH,R2),DS5KEYID     MOVE FMT5.\n         LH    R7,DVTYP+10         GET NR. OF TRACKS BY CYLINDER.\n         LA    R9,8                SET FIRST 8 EXTENTS POINTER.\n         LA    R2,DS5AVEXT\nFMT5C    BAS   R10,FMT5ST\n         LA    R2,L'DS5AVEXT(R2)\n         BCT   R9,FMT5C\n         LA    R9,18               SET LAST 18 EXTENTS POINTER.\n         LA    R2,DS5MAVET\nFMT5D    BAS   R10,FMT5ST\n         LA    R2,L'DS5AVEXT(R2)\n         BCT   R9,FMT5D\n         B     READ\n         SPACE 1\nFMT5ST   OC    2(L'DSCBUNC+L'DSCBUNT,R2),2(R2)    TEST IF EXTENT EXISTS\n         BZ    READ                BRANCH IF NOT.\n         CL    R8,ATABLE+4         TEST IF TABLE OVERFLOW,\n         BNL   TABOV               BRANCH IF YES.\n         MVC   WORKD(L'DS5AVEXT),0(R2)\n         XR    R0,R0               TRANSFORM START ADDRESS TO CCHH.\n         LH    R1,WORKD\n         ST    R1,WORKF\n         MVC   EXTLOLT(L'EXTLOLT),WORKF\n         DR    R0,R7\n         STH   R1,WORKF\n         STH   R0,WORKF+2\n         MVC   EXTLOL(L'EXTLOL),WORKF   SET LOWER LIMIT.\n         XR    R0,R0               COMPUTE LAST ADDRESS.\n         LH    R1,WORKD+L'DSCBRLT\n         MR    R0,R7\n         IC    R0,WORKD+L'DSCBRLT+L'DSCBUNC\n         AR    R1,R0\n         BCTR  R1,0\n         AH    R1,WORKD\n         ST    R1,WORKF\n         MVC   EXTUPLT(L'EXTUPLT),WORKF\n         XR    R0,R0               TRANSFORM LAST ADDRESS TO CCHH.\n         DR    R0,R7\n         STH   R1,WORKF\n         STH   R0,WORKF+2\n         MVC   EXTUPL(L'EXTUPL),WORKF   SET UPPER LIMIT.\n         MVI   EXTSQN,255          SET FREE SPACE INDICATOR.\n         MVI   EXTDSN,C'.'         NO DATA-SET NAME.\n         MVC   EXTDSN+1(L'EXTDSN-L'FSN-1),EXTDSN\n         MVC   EXTDSN+L'EXTDSN-L'FSN(L'FSN),FSN\n         LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.\n         BR    R10                 RETURN.\n         SPACE 1\nTAC      MVC   WORKD(L'EXTLOL+L'EXTUPL),EXTLOL\n         LH    R15,WORKD           TRANSFORM CCHH TO TRACK ADDRESS.\n         MH    R15,DVTYP+10\n         AH    R15,WORKD+2\n         ST    R15,WORKF\n         MVC   EXTLOLT(L'EXTLOLT),WORKF\n         LH    R15,WORKD+4\n         MH    R15,DVTYP+10\n         AH    R15,WORKD+6\n         ST    R15,WORKF\n         MVC   EXTUPLT(L'EXTUPLT),WORKF\n         BR    R9                  RETURN.\n         SPACE 2\nT5OV     MVI   MSTOV+L'MSTOV-2,C'F'     SET FMT 5 TABLE INDICATOR.\n         B     MSGOV\nT13OV    MVI   MSTOV+L'MSTOV-2,C'C'     SET FMT1-FMT3 TABLE INDICATOR.\n         B     MSGOV\nTABOV    MVI   MSTOV+L'MSTOV-2,C'E'     SET EXTENTS TABLE INDICATOR.\nMSGOV    MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVI   MC,C'0'             DOUBLE SPACE.\n         MVC   MESSAGE+1(L'VOLSER),VOLSER\n         MVC   MESSAGE+L'VOLSER+2(L'MSTOV),MSTOV\n         BAS   R3,PMSG\n         OI    SWEND+1,ON          SET BRANCH OPERATION.\n         SPACE 1\n         DROP  R6\n         SPACE 2\nENDVTOC  LTR   R1,R0               INDEXED VTOC INFO'S?\n         BZ    ENDVT               NO, NORMAL VTOC.\n         MVC   IXDSCB(L'IXDSCB+L'IXVIRS),0(R1)    YES.\nENDVT    OI    SWCL+1,ON           SET BRANCH OPERATION.\n         TM    SWQR+1,ON\n         BO    QCLOSE\n        $VTOCSC\n         B     TCLOSE\nQCLOSE  $VTOCQC\nTCLOSE   LTR   R15,R15\n         BZ    SWXX\n         TM    SWQR+1,ON\n         BO    *+L'*+10\n         MVC   MSERR(8),VSC\n         B     SMSG\n         MVC   MSERR(8),VQC\n         B     SMSG\nSWXX     NOP   ENDVTA\n         ST    R8,EVEA             SET ADDRESS END OF VTOC ELEMENTS.\n         LA    R9,ASEQCA+1         EXTENT SEQUENTIAL CHAIN START ADDR.\n         ZAP   NPA,ONE             INITIALIZE PAGE NO.\n         NI    SWDG+1,OFF          SET NOP OPERATION.\n         XC    EXTCTL(L'EXTCTL),EXTCTL  INIT. EXTENTS CONTROL.\nSWLS     NOP   LVT1\n         MVI   MC,C' '             NORMAL SPACE.\n         MVI   MESSAGE,C' '        CLEAR LINE.\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   TIT11(L'VOLSER),VOLSER   VOLUME SERIAL NUMBER.\n         ZAP   NLI,NSLI            FORCE SKIP PAGE.\nLVT1     XR    R7,R7               SET NO ELEMENT ADDRESS.\n         MVC   NVA(L'NVA),NVMX     SET STARTING ARGUMENT VALUE.\n         L     R8,ATABLE           GET START OF TABLE.\nLVT2     CLI   EXTDSN,128          TEST IF ELEMENT PROCESSED,\n         BE    LVT3                BRANCH IF YES.\n         CLC   NVA(L'EXTLOLT),EXTLOLT   TEST IF THIS IS THE LOWEST,\n         BL    LVT3                BRANCH IF NOT.\n         LR    R7,R8               SAVE ELEMENT ADDRESS.\n         MVC   NVA(L'EXTLOLT),EXTLOLT   SET NEW ELEMENT VALUE.\nLVT3     LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.\n         CL    R8,EVEA             TEST END OF TABLE,\n         BNE   LVT2                BRANCH IF NOT.\n         LTR   R8,R7               TEST IF ANY ELEMENT TO BE PRINTED,\n         BZ    LTVT1               BRANCH IF NOT (TABLE END).\n         OI    SWOV+1,ON           SET BRANCH OPERATION.\n         CLC   EXTLOLT(L'EXTLOLT),EXTCTL     TEST EXTENTS OVERLAP,\n         BH    LVTC2               BRANCH IF NOT.\n         OI    SWEND+1,ON          SET BRANCH OPERATION.\nSWDG     NOP   LVTC1\n         OI    SWDG+1,ON           SET BRANCH OPERATION.\n         TM    SWLS+1,ON           TEST IF NOLIST OPTION,\n         BZ    LVTC1               BRANCH IF NOT.\n         MVI   MC,C'1'             SKIP PAGE.\n         MVI   MESSAGE,C' '        CLEAR LINE.\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'MSEXOV),MSEXOV    EXTENTS OVERLAP MSG.\n         MVC   MESSAGE+1(L'VOLSER),VOLSER    VOLUME SERIAL NUMBER.\n         BAS   R3,PMSG\n         B     LVTC2\nLVTC1    NI    SWOV+1,OFF          SET NOP OPERATION.\nLVTC2    CLC   EXTCTL(L'EXTUPLT),EXTUPLT\n         BNL   *+L'*+6\n         MVC   EXTCTL(L'EXTUPLT),EXTUPLT     SET FOR NEXT CONTROL.\n         TM    SWLS+1,ON           TEST IF NOLIST OPTION,\n         BO    LVT7                BRANCH IF YES.\n         MVC   MESSAGE+4(L'OV),MESSAGE+3\nSWOV     B     *+L'*+6\n         MVC   MESSAGE+4(L'OV),OV  SET OVERLAP INDICATOR.\n         MVC   WORKF(L'EXTLOL),EXTLOL   EXTENT LOWER LIMIT.\n         LA    R2,MESSAGE+8\n         BAS   R10,DECODE\n         MVC   WORKF(L'EXTUPL),EXTUPL   EXTENT UPPER LIMIT.\n         LA    R2,MESSAGE+31\n         BAS   R10,DECODE\n         CLI   EXTSQN,255          TEST IF FREE SPACE EXTENT,\n         BE    LVT4                BRANCH IF YES.\n         XR    R0,R0\n         IC    R0,EXTSQN           EXTENT SEQUENCE NUMBER.\n         CVD   R0,WORKD\n         MVC   MESSAGE+56(3),MASK+3\n         ED    MESSAGE+55(4),WORKD+6\n         B     LVT5\nLVT4     MVC   MESSAGE+56(3),MESSAGE+55\nLVT5     MVC   MESSAGE+64(L'EXTDSN),EXTDSN   EXTENT NAME.\n         CP    NLI,NLMX            TEST IF SKIP PAGE REQUESTED,\n         BNH   LVT6                BRANCH IF NOT.\n         MVI   LC,C'1'             SKIP PAGE.\n         MVI   LINE,C' '           CLEAR LINE.\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE+1(L'TIT11),TIT11\n         MVC   LINE+99(L'TIT12),TIT12\n         ED    LINE+103(4),NPA\n         AP    NPA,ONE\n         ZAP   NLI,SEVEN\n         BAS   R3,PLNE\n         MVI   LC,C' '             NORMAL SPACE.\n         MVI   LINE+1,C'='\n         MVC   LINE+2(L'TIT11-1),LINE+1\n         MVC   LINE+99(L'TIT12),LINE+98\n         BAS   R3,PLNE\n         MVI   LC,C'0'             DOUBLE SPACE.\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE+9(L'TIT2),TIT2\n         BAS   R3,PLNE\n         MVI   LC,C' '             NORMAL SPACE.\n         MVC   LINE+9(L'TIT3),TIT3\n         BAS   R3,PLNE\n         MVI   LINE+9,C'-'\n         MVC   LINE+10(19),LINE+9\n         MVC   LINE+32(20),LINE+9\n         MVC   LINE+55(6),LINE+9\n         MVI   LINE+64,C'-'\n         MVC   LINE+65(L'EXTDSN-1),LINE+64\n         BAS   R3,PLNE\n         MVI   MC,C'0'             DOUBLE SPACE.\nLVT6     BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         AP    NLI,ONE\nLVT7     ST    R8,WORKF            SET EXTENT SEQUENTIAL CHAIN ADDRESS.\n         MVC   EXTCA-TABDSECT(L'EXTCA,R9),WORKF+1\n         MVI   EXTDSN,128          SET PROCESSED INDICATOR.\n         LR    R9,R8\n         B     LVT1\n         SPACE 2\nLTVT1    XC    EXTCA-TABDSECT(L'EXTCA,R9),EXTCA-TABDSECT(R9) END CHAIN.\n         L     R2,AFMT13           GET FMT 1-2-3 TABLE ADDRESS.\n         USING FMTDSECT,R2\n         OC    FMTSE(FMTLGTH),FMTSE     TEST IF ANY ELEMENT REMAINING,\n         BZ    LTVT8               BRANCH IF NOT.\n         MVI   MC,C'1'             SKIP PAGE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'VOLSER),VOLSER\n         MVC   MESSAGE+L'VOLSER+2(L'MSF13),MSF13\n         MVC   MESSAGE+99(L'TIT12),TIT12\n         ED    MESSAGE+103(4),NPA\n         AP    NPA,ONE\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVI   MESSAGE+1,C'-'\n         MVC   MESSAGE+2(L'VOLSER+L'MSF13+1),MESSAGE+1\n         MVC   MESSAGE+99(L'TIT12),MESSAGE+98\n         BAS   R3,PMSG\n         MVI   MC,C'0'             DOUBLE SPACE.\n         LA    R7,NTF13            NR. OF ELEMENTS IN TABLE.\nLTVT2    MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         LA    R1,MESSAGE+9\n         LA    R0,4\nLTVT3    UNPK  0(11,R1),FMTAF2(L'FMTAF2+1)   PREPARE CCHHR'S PRINT.\n         TR    0(10,R1),TRTAB-X'F0'\n         MVI   10(R1),C'-'\n         UNPK  11(11,R1),FMTAF3(L'FMTAF3+1)\n         TR    11(10,R1),TRTAB-X'F0'\n         MVI   21(R1),C','\n         LA    R2,FMTLGTH(R2)      STEP TO NEXT ELEMENT IN TABLE.\n         BCT   R7,LTVT4            TEST IF MORE.\n         B     LTVT6+L'LTVT6       NO MORE (END TABLE).\nLTVT4    OC    FMTSE(FMTLGTH),FMTSE     TEST IF ANY ELEMENT REMAINING,\n         BZ    LTVT6               BRANCH IF NOT.\n         BCT   R0,LTVT5            TEST IF LINE FULL FILLED,\n         B     LTVT7               END LINE.\nLTVT5    LA    R1,23(R1)\n         B     LTVT3\nLTVT6    XR    R7,R7               INDICATE END TABLE.\n         MVI   21(R1),C'.'\nLTVT7    BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         LTR   R7,R7               TEST IF CONTINUE,\n         BNZ   LTVT2               BRANCH IF YES.\n         DROP  R2\nLTVT8    CLC   FDSCB(L'FDSCB),VFDSCB    CONTROL FREE DSCB'S COUNT?\n         BNE   LTVT9               BRANCH IF DISCREPANCY.\n         OC    IXDSCB(L'IXDSCB+L'IXVIRS),IXDSCB   INDEXED VTOC INFO'S?\n         BZ    LTVT10              BRANCH IF NONE.\n         CLC   FDSCB(L'FDSCB),IXDSCB+2  CONTROL FREE DSCB'S COUNT?\n         BE    LTVT10              BRANCH IF OK.\nLTVT9    NI    SWFE+1,OFF          SET NOP OPERATION.\n         MVI   MC,C'0'             DOUBLE SPACE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'VOLSER),VOLSER\n         MVC   MESSAGE+L'VOLSER+2(L'MSFE1),MSFE1\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+9(L'MSFE21),MSFE21\n         UNPK  MESSAGE+L'MSFE21+10(5),VFDSCB(3)\n         TR    MESSAGE+L'MSFE21+10(4),TRTAB-X'F0'\n         MVC   MESSAGE+L'MSFE21+14(L'MASK),MASK\n         LH    R1,VFDSCB\n         CVD   R1,WORKD\n         ED    MESSAGE+L'MSFE21+14(L'MASK),WORKD+5\n         MVI   MESSAGE+L'MSFE21+14,C'('\n         MVC   MESSAGE+L'MSFE21+L'MASK+14(L'MSFE22),MSFE22\n         UNPK  MESSAGE+L'MSFE21+L'MSFE22+L'MASK+15(5),FDSCB(3)\n         TR    MESSAGE+L'MSFE21+L'MSFE22+L'MASK+15(4),TRTAB-X'F0'\n         MVC   MESSAGE+L'MSFE21+L'MSFE22+L'MASK+19(L'MASK),MASK\n         LH    R1,FDSCB\n         CVD   R1,WORKD\n         ED    MESSAGE+L'MSFE21+L'MSFE22+L'MASK+19(L'MASK),WORKD+5\n         MVI   MESSAGE+L'MSFE21+L'MSFE22+L'MASK+19,C'('\n         MVC   MESSAGE+L'MSFE21+L'MSFE22+2*L'MASK+19(L'MSFE23),MSFE23\n         BAS   R3,PMSG\nLTVT10   OC    IXDSCB(L'IXDSCB+L'IXVIRS),IXDSCB   INDEXED VTOC INFO'S?\n         BZ    SWRCV               BRANCH IF NONE.\n         MVI   MC,C'0'             DOUBLE SPACE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'VOLSER),VOLSER\n         MVC   MESSAGE+L'VOLSER+2(L'MSFE31),MSFE31\n         UNPK  MESSAGE+L'MSFE31+L'VOLSER+3(5),IXDSCB+2(3)\n         TR    MESSAGE+L'MSFE31+L'VOLSER+3(4),TRTAB-X'F0'\n         MVC   MESSAGE+L'MSFE31+L'VOLSER+7(L'MASK),MASK\n         LH    R1,IXDSCB+2\n         CVD   R1,WORKD\n         ED    MESSAGE+L'MSFE31+L'VOLSER+7(L'MASK),WORKD+5\n         MVI   MESSAGE+L'MSFE31+L'VOLSER+7,C'('\nLGTEMP   EQU   L'MSFE31+L'VOLSER+L'MASK+7\n         MVC   MESSAGE+LGTEMP(L'MSFE32),MSFE32\n         UNPK  MESSAGE+LGTEMP+L'MSFE32+1(5),IXVIRS+2(3)\n         TR    MESSAGE+LGTEMP+L'MSFE32+1(4),TRTAB-X'F0'\n         MVC   MESSAGE+LGTEMP+L'MSFE32+5(L'MASK),MASK\n         LH    R1,IXVIRS+2\n         CVD   R1,WORKD\n         ED    MESSAGE+LGTEMP+L'MSFE32+5(L'MASK),WORKD+5\n         MVI   MESSAGE+LGTEMP+L'MSFE32+5,C'('\n         MVC   MESSAGE+LGTEMP+L'MSFE32+L'MASK+5(L'MSFE23),MSFE23\n         BAS   R3,PMSG\n         SPACE 2\nSWRCV    B     ENDVTA\n         SPACE 1\n         LH    R2,DVALT            GET NO. OF ALTERNATE TRACKS.\n         LH    R1,DVTYP+8          GET NO. OF CYLINDERS IN VOLUME.\n         MH    R1,DVTYP+10         MULTIPLY BY NO. OF TRACKS / CYL.\n         CH    R2,NULL             TEST IF NULL NO. OF ALTERNATE TRACKS\n         BE    *+L'*+2             BRANCH IF YES.\n         SR    R1,R2               FIRST ALTERNATE TRACK ADDRESS.\n         L     R8,ASEQCA           GET START OF CHAIN ADDRESS.\n         XC    WORKF(L'WORKF),WORKF     START TRACK ADDRESS VALUE.\n         L     R2,AFMT13           USE TABLE TO STORE UNAV. SPACE ADDR.\nNTUNV    EQU   ((NTF13*FMTLGTH)/8)-1\n         LA    R7,NTUNV            NR. OF ELEMENTS IN TABLE.\nAN1      CLC   EXTLOLT(L'EXTLOLT),WORKF TEST IF TRACK 0, 1 OR 2,\n         BE    AN3                 BRANCH IF YES.\n         CLI   WORKF+3,0           TEST IF TRACK ADDRESS IS 0,\n         BNE   AN2                 BRANCH IF NOT.\n         MVI   WORKF+3,1           SET TRACK ADDRESS 1.\n         B     AN1\nAN2      CLI   WORKF+3,1           TEST IF TRACK ADDRESS IS 1,\n         BNE   AN4                 BRANCH IF NOT.\n         MVI   WORKF+3,2           SET TRACK ADDRESS 2.\n         B     AN1\nAN3      MVC   WORKF(L'EXTUPLT),EXTUPLT GET EXTENT UPPER LIMIT.\n         L     R9,WORKF            COMPUTE NEXT EXTENT LOWER LIMIT.\n         LA    R9,1(R9)\n         ST    R9,WORKF\nNXT      MVC   EVEA+1(L'EXTCA),EXTCA GET NEXT EXTENT CHAIN ADDRESS.\n         L     R8,EVEA\n         LTR   R8,R8               TEST IF END OF CHAIN,\n         BZ    AN6                 BRANCH IF YES.\n         CLC   EXTLOLT(L'EXTLOLT),WORKF TEST IF ADDRESSES MATCHES,\n         BE    AN3                 BRANCH IF YES.\n         BH    AN4                 BRANCH IF UNAVAILABLE SPACE.\n         CLC   WORKF(L'EXTUPLT),EXTUPLT OVERLAP EXTENTS.\n         BNH   AN3\n         B     NXT\nAN4      BCT   R7,AN5              TEST IF TABLE OVERFLOW,\n         MVI   MC,C'1'             SKIP PAGE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'VOLSER),VOLSER\n         MVI   MSTOV+L'MSTOV-2,C'R'     SET RECOVERY TABLE INDICATOR.\n         MVC   MESSAGE+L'VOLSER+2(L'MSTOV),MSTOV\n         BAS   R3,PMSG\n         B     ENDVTA\nAN5      MVC   0(4,R2),WORKF       SET UNAVAILABLE SPACE START ADDRESS.\n         MVC   WORKF(L'EXTLOLT),EXTLOLT\n         L     R9,WORKF            COMPUTE UNAVAILABLE SPACE LAST ADDR.\n         BCTR  R9,0\n         ST    R9,4(R2)\n         LA    R2,8(R2)            NEXT ELEMENT ADDRESS IN TABLE.\n         B     AN3\nAN6      CLR   R9,R1               TEST IF MATCH WITH VOLUME LAST TRACK\n         BE    AN8                 BRANCH IF YES.\n         BCT   R7,AN7              TEST IF TABLE OVERFLOW,\n         B     AN4+L'AN4           BRANCH IF YES.\nAN7      ST    R9,0(R2)            SET UNAVAILABLE SPACE LIMITS.\n         BCTR  R1,0                ADJUST TO LAST TRACK (1ST ALT.).\n         ST    R1,4(R2)\n         LA    R2,8(R2)\nAN8      S     R2,AFMT13           TEST IF ANY UNAV. EXTENTS,\n         BZ    ENDVTA              BRANCH IF NOT (ALL O.K.).\n         MVI   LC,C' '             NORMAL SPACE.\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         ZAP   NLI,NSLI            FORCE SKIP PAGE.\n         L     R7,AFMT13           GET TABLE START ADDRESS.\n         LH    R8,DVTYP+10         GET NR. OF TRACKS BY CYLINDER.\n         SRL   R2,3                COMPUTE NO. OF ELEMENTS.\n         LR    R9,R2\nAN9      MVC   WORKF(4),0(R7)      EXTENT LOWER LIMIT.\n         LA    R2,LINE+8\n         BAS   R10,PRDEC\n         MVC   WORKF(4),4(R7)      EXTENT UPPER LIMIT.\n         LA    R2,LINE+31\n         BAS   R10,PRDEC\n         UNPK  LINE+L'UEST+15(5),2(3,R7) REL. TRK. ADDRESS.\n         TR    LINE+L'UEST+15(4),TRTAB-X'F0'\n         MVI   LINE+L'UEST+19,C' '\n         CP    NLI,NLMX            TEST IF SKIP PAGE REQUESTED,\n         BNH   AN10                BRANCH IF NOT.\n         MVI   MC,C'1'             SKIP PAGE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'VOLSER),VOLSER\n         MVC   MESSAGE+L'VOLSER+2(L'MSUES),MSUES\n         MVC   MESSAGE+99(L'TIT12),TIT12\n         ED    MESSAGE+103(4),NPA\n         AP    NPA,ONE\n         ZAP   NLI,SEVEN\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVI   MESSAGE+1,C'='\n         MVC   MESSAGE+2(L'VOLSER+L'MSUES),MESSAGE+1\n         MVC   MESSAGE+99(L'TIT12),MESSAGE+98\n         BAS   R3,PMSG\n         MVI   MC,C'0'             DOUBLE SPACE.\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+9(L'UEST),TIT2\n         MVC   MESSAGE+L'UEST+9(L'MUES1),MUES1\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVC   MESSAGE+9(L'UEST),TIT3\n         MVC   MESSAGE+L'UEST+9(L'MUES2),MUES2\n         BAS   R3,PMSG\n         MVI   MESSAGE+9,C'-'\n         MVC   MESSAGE+10(19),MESSAGE+9\n         MVC   MESSAGE+32(20),MESSAGE+9\n         MVC   MESSAGE+L'UEST+9(16),MESSAGE+9\n         BAS   R3,PMSG\n         MVI   LC,C'0'             DOUBLE SPACE.\nAN10     BAS   R3,PLNE\n         MVI   LC,C' '             NORMAL SPACE.\n         AP    NLI,ONE\n         LA    R7,8(R7)            NEXT ELEMENT ADDRESS.\n         BCT   R9,AN9              CONTINUE IF MORE.\n         SPACE 2\n         MVI   MC,C'1'             SKIP PAGE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'MFD50),MFD50\n         MVC   MESSAGE+99(L'TIT12),TIT12\n         ED    MESSAGE+103(4),NPA\n         AP    NPA,ONE\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVI   MESSAGE+1,C'='\n         MVC   MESSAGE+2(L'MFD50-1),MESSAGE+1\n         MVC   MESSAGE+99(L'TIT12),MESSAGE+98\n         BAS   R3,PMSG\n         MVI   MC,C'-'             THREE SPACES.\n         MVC   MESSAGE+1(L'MFD50),MESSAGE\n         MVC   MESSAGE+9(L'MFD51),MFD51\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVI   MESSAGE+9,C'-'\n         MVC   MESSAGE+10(L'MFD51-1),MESSAGE+9\n         MVC   MESSAGE+15(2),MESSAGE\n         BAS   R3,PMSG\n         MVI   MC,C'0'             DOUBLE SPACE.\n         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8\n         MVC   MESSAGE+9(L'MFD52),MFD52\n         BAS   R3,PMSG\n         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8\n         MVC   MESSAGE+9(L'MFD53),MFD53\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8\n         MVC   MESSAGE+9(L'MFD54),MFD54\n         BAS   R3,PMSG\n         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8\n         MVC   MESSAGE+9(L'MFD55),MFD55\n         BAS   R3,PMSG\n         MVI   MC,C'0'             DOUBLE SPACE.\n         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8\n         MVC   MESSAGE+9(L'MFD56),MFD56\n         BAS   R3,PMSG\n         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8\n         MVC   MESSAGE+9(L'MFD57),MFD57\n         BAS   R3,PMSG\n         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8\n         MVC   MESSAGE+9(L'MFD58),MFD58\n         BAS   R3,PMSG\n         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8\n         MVC   MESSAGE+9(L'MFD59),MFD59\n         BAS   R3,PMSG\n         SPACE 2\n         L     R8,AFMT5            GET FMT5 TABLE ADDRESS.\n         LA    R9,NTF5             NR. OF POSSIBLE FMT5 IN TABLE.\n         ZAP   NLI,NSLI            FORCE SKIP PAGE.\nLF5A     OC    0(L'ADDREC,R8),0(R8)    TEST IF EMPTY,\n         BZ    ENDVTA              BRANCH IF YES.\n         CP    NLI,FOUR            TEST IF SKIP PAGE REQUESTED,\n         BNH   LF5B                BRANCH IF NOT.\n         MVI   MC,C'1'             SKIP PAGE.\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVC   MESSAGE+1(L'VOLSER),VOLSER\n         MVC   MESSAGE+L'VOLSER+2(L'MSLF50),MSLF50\n         MVC   MESSAGE+99(L'TIT12),TIT12\n         ED    MESSAGE+103(4),NPA\n         AP    NPA,ONE\n         ZAP   NLI,ONE\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVI   MESSAGE+1,C'='\n         MVC   MESSAGE+2(L'VOLSER+L'MSLF50),MESSAGE+1\n         MVC   MESSAGE+99(L'TIT12),MESSAGE+98\n         BAS   R3,PMSG\nLF5B     MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVI   MC,C'0'             DOUBLE SPACE.\n         OC    0(L'ADDREC,R8),0(R8)    TEST IF INDEXED VTOC?\n         BNO   LF5C                BRANCH IF NOT.\n         CP    NLI,ONE             TEST IF SKIP PAGE DONE?\n         BNE   LF5D                BRANCH IF NOT.\n         MVC   MESSAGE+1(L'MSLF51IX),MSLF51IX\n         BAS   R3,PMSG\n         B     LF5D\nLF5C     MVC   MESSAGE+1(L'MSLF51),MSLF51\n         LA    R7,L'ADDREC-5(R8)   CCHHR ADDRESS.\n         LA    R2,MESSAGE+L'MSLF51+1\n         LA    R1,L'ADDREC-3\n         BAS   R10,PRHEX\n         MVI   MESSAGE+L'MSLF51+11,C'.'\n         BAS   R3,PMSG\nLF5D     MVC   MESSAGE+1(4),MESSAGE\n         MVC   MESSAGE+5(L'MSLF52),MSLF52\n         BAS   R3,PMSG\n         MVI   MC,C' '             NORMAL SPACE.\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVI   MESSAGE+5,C'-'\n         MVC   MESSAGE+6(5),MESSAGE+5\n         BAS   R3,PMSG\n         MVC   MESSAGE+5(6),MESSAGE+4   FORMAT 5 DSCB DUMP.\n         MVC   MESSAGE+6(L'MSLF53),MSLF53\n         MVI   MESSAGE+12,C'-'\n         LA    R2,MESSAGE+14\n         LA    R1,48\n         BAS   R10,PRHEX\n         BAS   R3,PMSG\n         MVC   MESSAGE+6(L'MSLF54),MSLF54\n         LA    R1,48\n         BAS   R10,PRHEX\n         BAS   R3,PMSG\n         MVC   MESSAGE+6(L'MSLF55),MSLF55\n         LA    R1,DS5LGTH-96\n         BAS   R10,PRHEX\n         MVI   MESSAGE+2*(DS5LGTH-96)+14,C' '\n         MVC   MESSAGE+2*(DS5LGTH-96)+15(L'MESSAGE-2*(DS5LGTH-96)-15),M1\n               ESSAGE+2*(DS5LGTH-96)+14\n         BAS   R3,PMSG\n         AP    NLI,ONE\n         LA    R8,L'ADDREC+DS5LGTH(R8) NEXT FMT5 POINTER.\n         BCT   R9,LF5A             CONTINUE.\nENDVTA   MVC   ENDM+10(L'VOLSER),VOLSER\nENDM    WTO    '-        : VTOC ANALYSIS END -',ROUTCDE=2,DESC=7\n         B     NOVTA\n         SPACE 1\nPRDEC    XR    R0,R0               TRANSFORM TRACK ADDRESS TO CCHH.\n         L     R1,WORKF\n         DR    R0,R8\n         STH   R1,WORKF\n         STH   R0,WORKF+2\n         SPACE 1\nDECODE   LH    R0,WORKF            GET CC (DECIMAL PRINT).\n         CVD   R0,WORKD\n         MVC   0(L'MASK,R2),MASK\n         ED    0(L'MASK,R2),WORKD+5\n         LH    R0,WORKF+2          GET HH (DECIMAL PRINT).\n         CVD   R0,WORKD\n         UNPK  6(3,R2),WORKD+6(2)\n         OI    8(R2),C'0'\n         MVI   6(R2),C','\n         MVI   WORKD+7,X'0F'       GET CCHH (HEXADECIMAL PRINT).\n         MVO   WORKD+3(5),WORKF(4)\n         UNPK  12(9,R2),WORKD+3(5)\n         TR    13(8,R2),TRTAB-X'F0'\n         MVC   12(4,R2),13(R2)\n         MVI   16(R2),C','\n         BR    R10                 RETURN.\n         SPACE 1\nPRHEX    XR    R0,R0               TRANSFORM TO HEXADECIMAL PRINT.\n         LR    R14,R1\n         LR    R15,R2\nPRHEX1   IC    R0,0(R7)\n         STC   R0,1(R15)\n         NI    1(R15),X'0F'\n         SRL   R0,4\n         STC   R0,0(R15)\n         LA    R7,1(R7)\n         LA    R15,2(R15)\n         BCT   R14,PRHEX1\n         SLL   R1,1\n         BCTR  R1,0\n         EX    R1,PRHEX2\n         BR    R10                 RETURN.\nPRHEX2   TR    0(*-*,R2),TRTAB\n         SPACE 1\n         DROP  R8\n         SPACE 2\nNOVTA    L     R8,STIOT\n         USING TIODSECT,R8\n         XR    R7,R7\n         IC    R7,TIOELNGH\n         AR    R8,R7\n         B     NEXTDD\n         DROP  R8\n         EJECT\nSWEND    NOP   EXERR               BRANCH IF ERRORS DETECTED.\nSWFE     B     LEAVE\nSETCC4   MVI   RCODE+1,4           C.C. = 4.  - - - - - - - - - - - -\nLEAVE   $PCLOSE\n         LH    R15,RCODE\n        $XRET  CC=(R15)\n         SPACE 2\nPARMERR WTO    'PARM.FIELD ERROR.',ROUTCDE=11,DESC=7\n         MVI   RCODE+1,8           C.C. = 8.  - - - - - - - - - - - -\n         B     LEAVE\n         SPACE 2\nEXERR   WTO    '-END- ERROR(S) ON SYSPRINT.',ROUTCDE=11,DESC=7\n         MVI   RCODE+1,12          C.C. = 12. - - - - - - - - - - - -\n         B     LEAVE\n         EJECT\nSMSG     STC   R15,MSERR+L'MSERR-9\n         NI    MSERR+L'MSERR-9,X'0F'\n         SRL   R15,4\n         STC   R15,MSERR+L'MSERR-10\n         NI    MSERR+L'MSERR-10,X'0F'\n         TR    MSERR+L'MSERR-10(2),TRTAB\n         LA    R2,MSERRL\n         B     PRMSG\nNST      LA    R2,MNSTL\n         B     PRMSG\nNSP      LA    R2,MNSPL\n         B     PRMSG\nNSTOR    LA    R2,MSTL\nPRMSG    MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE\n         MVI   MC,C'1'             SKIP PAGE.\n         XR    R1,R1\n         IC    R1,0(R2)\n         BCTR  R1,0\n         EX    R1,MVMSG\n         MVI   RCODE+1,16          C.C. = 16. - - - - - - - - - - - -\n         BAS   R3,PMSG\n         B     LEAVE\nMVMSG    MVC   MESSAGE+1(*-*),1(R2)\n         EJECT\n*        PRINT ROUTINES (SYSPRINT).\n*        --------------------------\n*\n*              R3  = LINK REGISTER.\n         SPACE 1\nPMSG    $PRINT MC\n         B     PRET\nPLNE    $PRINT LC\nPRET     LTR   R15,R15\n         BZR   R3                  NORMAL RETURN.\nSWPR     NOPR  R3\nSWCL     B     ERET\n         TM    SWQR+1,ON\n         BO    QECL\n        $VTOCSC\n         B     ERET\nQECL    $VTOCQC\nERET     OC    RCODE,RCODE\n         BZ    SETCC4\n         B     LEAVE\n         EJECT\n        LTORG\n         SPACE 2\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nADDREC   DC    0D'0',XL3'0'\nCCHHR    DC    XL5'0'\nDATAAREA DC    XL140'00'\n         SPACE 1\nWORKF    DC    F'0'\nWORKD    DC    D'0'\nEXTCTL   DC    F'0'\nNVA      DC    F'0'\nNVMX     DC    XL4'7FFFFFFF'\nEVEA     DC    A(*-*)\nATIOT    DC    A(*-*)\nSTIOT    DC    A(*-*)\nASEQCA   DC    A(*-*)\nAFMT5    DC    A(*-*)\nAFMT13   DC    A(*-*)\nATABLE   DC    A(*-*,*-*)\nNMCORE   DC    A(6*1024,1000*1024)\nZEROS    DC    F'0'\nDVTYP    DC    5F'0'\nDVALT    DC    H'0'\nVOLSER   DC    CL6' '\nVTDDNM   DC    CL8'0'\nIXDSCB   DC    F'0'\nIXVIRS   DC    F'0'\nFDSCB    DC    H'0'\nVFDSCB   DC    H'0'\nNRTF13   DC    0H'0',AL2(NTF13*FMTLGTH)\nNRTF5    DC    0H'0',AL2(NTF5)\nRCODE    DC    H'0'\nNULL     DC    H'1'\n         SPACE 1\n         DC    AL1(L'MC+L'MESSAGE)\nMC       DC    CL1' '\nMESSAGE  DC    CL131' '\n         DC    AL1(L'LC+L'LINE)\nLC       DC    CL1' '\nLINE     DC    CL131' '\n         EJECT\nONE      DC    PL1'+1'\nFOUR     DC    PL1'+4'\nSEVEN    DC    PL1'+7'\nNPA      DC    PL2'+0'\nNLI      DC    PL2'+0'\nNLMX     DC    PL2'+56'\nNSLI     DC    PL2'+999'\nMASK     DC    X'402020202120'\nRCV      DC    C'RECOVERY'\nNLS      DC    C'NOLIST'\nVTDD     DC    C'VTDD'\nVSO      DC    CL8'VTOCSO'\nVSR      DC    CL8'VTOCSR'\nVSC      DC    CL8'VTOCSC'\nVQO      DC    CL8'VTOCQO'\nVQR      DC    CL8'VTOCQR'\nVQC      DC    CL8'VTOCQC'\nVTOCN    DC    C'V.T.O.C. '\nVTI      DC    C'(INDICATORS=  )'\nFSN      DC    C'(FREE)'\nOV       DC    C'-OV-'\nTRTAB    DC    C'0123456789ABCDEF'\nMSTL     DC    AL1(L'MST)\nMST      DC    C'NO STORAGE AVAILABLE. -ABORT-'\nMNSPL    DC    AL1(L'MNSP)\nMNSP     DC    C'NOT ENOUGH SPACE AVAILABLE. -ABORT-'\nMNSTL    DC    AL1(L'MNST)\nMNST     DC    C'NO TABLE SPACE AVAILABLE. -ABORT-'\nMSERRL   DC    AL1(L'MSERR)\nMSERR    DC    C'XXXXXXXX - ERROR CODE : XX. -EXIT-'\nMSIX     DC    C'IXTOFMT5 - REGISTER 0 = XXXXXXXX.'\nMSTOV    DC    C'VOLUME VTOC ANALYSIS INCOMPLETE. -TABLE OVERFLOW- ( )'\nMSNF4    DC    C'VOLUME ...... : FIRST DSCB NOT TYPE 4. -SKIP-'\nMSMF4    DC    C'VOLUME ...... : MULTIPLES DSCB TYPE 4. -SKIP-'\n         EJECT\nTIT11    DC    C'       - VTOC ANALYSIS.'\nTIT12    DC    0CL9' ',C'PAGE',X'40202120',C'.'\nUEST     DS    0CL46\nTIT2     DC    C' EXTENT LOWER LIMIT.    EXTENT UPPER LIMIT.   EXTENT  1\n                EXTENT NAME.'\nTIT3     DC    C'  DECIMAL   HEXADEC.     DECIMAL   HEXADEC.   SQ.NO.  1\n                (DATA-SET NAME)'\nMSF13    DC    C'- UNRESOLVED FORMAT 1-2-3 DSCB(S) ADDRESSES (CCHHR) LI1\n               ST.'\nMSFE1    DC    C'- VTOC FORMAT 4 DISCREPANCY.'\nMSFE21   DC    C'NO. OF AVAILABLE FORMAT 0 DSCB-S IN VTOC (AT X''0032''1\n               ) ='\nMSFE22   DC    C'), READ COUNT ='\nMSFE23   DC    C').'\nMSFE31   DC    C'- INDEXED VTOC INFO''S : FREE (FMT 0) DSCB-S ='\nMSFE32   DC    C'), FREE VIRS ='\nMSEXOV   DC    C'       - EXTENTS OVERLAP DETECTED (SUPPRESS NOLIST OPT1\n               ION FOR DETAIL).'\nMSUES    DC    C'- VTOC UNAVAILABLE SPACE EXTENTS LIST.'\nMUES1    DC    C'REL.TRK.ADDRESS.'\nMUES2    DC    C'    HEXADEC.    '\nMFD50    DC    C'FORMAT 5 DSCB DESCRIPTION.'\nMFD51    DC    C'H.DIS.  CONTENTS / DESCRIPTION.'\nMFD52    DC    C' 0000   X''05050505'' = KEY IDENTIFICATION.'\nMFD53    DC    C' 0004   +0 - 2 BYTES = RELATIVE TRACK ADDRESS OF FIRST1\n                TRACK IN EXTENT.'\nMFD54    DC    C'        +2 - 2 BYTES = NO. OF ENTIRELY UNUSED CYLINDER1\n               S IN EXTENT.'\nMFD55    DC    C'        +4 - 1 BYTE = NO. OF ADDITIONAL UNUSED TRACKS 1\n               IN  EXTENT.'\nMFD56    DC    C' 0009   7 MORE AVAILABLE EXTENTS.'\nMFD57    DC    C' 002C   X''F5'' = FORMAT IDENTIFIER.'\nMFD58    DC    C' 002D   18 MORE AVAILABLE EXTENTS.'\nMFD59    DC    C' 0087   5 BYTES = DIRECT-ACCESS ADDRESS (CCHHR) OF NEX1\n               T FORMAT 5 DSCB.'\nMSLF50   DC    C'- VTOC FORMAT 5 DSCB''S HEXADECIMAL DUMP.'\nMSLF51   DC    C'FORMAT 5 DSCB - CCHHR = '\nMSLF51IX DC    C'INDEXED VTOC INTERFACE FORMAT 5 DSCB(S) RECEIVED :'\nMSLF52   DC    C'DISPL.    0 . . . 4 . . . 8 . . . C . . .10 . . .14 . 1\n               . .18 . . .1C . . .20 . . .24 . . .28 . . .2C . .2F'\nMSLF53   DC    C'0000'\nMSLF54   DC    C'0030'\nMSLF55   DC    C'0060'\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YATIL": {"ttr": 26889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x12o\\x00\\x94\\x12o\\x10\\x00\\x00\\x8b\\x00\\x8b\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-05-06T00:00:00", "modifydate": "1994-05-06T10:00:00", "lines": 139, "newlines": 139, "modlines": 0, "user": "SYSPAJA"}, "text": "YATIL    TITLE 'JUST TO KNOW IF A MODULE EXIST IN A PARTITIONED.'\nYATIL    START 0\n         SPACE 1\n* PURPOSE :    LOOK INTO A PARTITIONED DIRECTORY TO FIND A GIVEN\n* ---------    MODULE NAME EXISTANCE.\n*              AT EXIT : REGISTER 15 = 0 - MODULE FOUND,\n*                                      4 - MODULE NOT FOUND,\n*                                      8 - NO MODULE NAME SUPPLIED OR\n*                                          A PROCESSING ERROR OCCURED.\n*\n* FILE NAME :  DD-NAME 'SYSUSER'  - INPUT DATA-SET (DSORG=PO).\n* -----------\n*\n* TSO ACCESS : MAY BE USED IN A CLIST AS DESCRIBED BELOW.\n* ------------\n*              ALLOC F(SYSUSER) DA(...DATA-SET NAME...)\n*              YATIL &MEMB\n*              WHEN SYSRC(EQ 0) ---> MEMBER EXIST\n*              WHEN SYSRC(GE 4) ---> NOT FOUND OR ERROR\n         SPACE 1\nYATIL   AMODE  24\nYATIL   RMODE  24\n         SPACE 1\n        $DEFREG\n         EJECT\n        $XENT  BASE=R12,LV=WKLEN,TYPE=RENT\n         LR    R8,R1               SAVE PARM. FIELD ADDRESS\n         XR    R10,R10             SET C.C. = 0.\n         LR    R9,R13              SET WORK-AREAS ADDRESSABILITY\n         USING WKAREA,R9\n         MVC   MODULE,=CL8' '\n        $TEW$EC REG=R8,NOTTSO=CALLM,NOTCMD=CALLM,MSG=PUTMSG,ERR=RET8\n        $TEW$PP PARM=PARMLST,REG=R4\n         TM    MDL+6,X'80'         MODULE SPECIFIED ?\n         BZ    NOMOD               NO\n         L     R2,MDL              GET POINTER TO MODULE\n         LH    R3,MDL+4            GET LENGTH\n         LTR   R3,R3\n         BNP   NOMOD\n         BCT   R3,*+L'*+6          -1\n         OC    MODULE(*-*),0(R2)   <<EXECUTED>>\n         EX    R3,*-6              MOVE NAME (WITH UPPERCASE)\n         DROP  R4\n         BAS   R2,NOMOD+L'NOMOD\nNOMOD    XR    R2,R2\n        IKJRLSA #TSANSW\n         LTR   R2,R2\n         BNZ   LOOK\n         B     RET8\n         SPACE 1\nCALLM    L     R2,0(R8)            GET ADDRESS OF PARAMETER\n         LH    R3,0(R2)            R3 = PARM LENGTH\n         LTR   R3,R3               ANY PARM ?\n         BNP   RET8                NO, GO BACK\n         CH    R3,=H'8'            OK ?\n         BL    *+L'*+4             IF OK, LEAVE\n         LA    R3,8                USE ONLY 8\n         BCT   R3,*+L'*+6          -1\n         OC    MODULE(*-*),2(R2)   <<EXECUTED>>\n         EX    R3,*-6              MOVE NAME (WITH UPPERCASE)\n         SPACE 1\nLOOK     MVC   OPNSR(OPNSKL),OPNSK\n         MVC   DCBSR(DCBSKL),DCBSK\n        OPEN   (DCBSR,(INPUT)),MF=(E,OPNSR) OPEN\n         TM    DCBSR+(DCBOFLGS-IHADCB),DCBOFOPN\n         BO    *+L'*+8\n         LA    R1,OMSERR           OPEN ERROR\n         B     SNDMS\n         MVC   BLIST(4),=AL2(1,12) FF,LL\n         XC    WKMS,WKMS\n        BLDL   DCBSR,BLIST         BLDL\n         STM   R15,R0,BRC          SAVE REGISTERS 15-0\n         MVC   CLSSR(CLSSKL),CLSSK\n        CLOSE  DCBSR,MF=(E,CLSSR)  CLOSE\n         LM    R15,R0,BRC          RESTORE REGISTERS 15-0\n         LTR   R15,R15             OK?\n         BZ    RET0                ALL CORRECT\n         CH    R15,=H'4'           IS IT 4 ?\n         BE    RET4                YES\n         LA    R1,WKMS\n         MVC   0(2,R1),=AL2(2+L'DRCDS1+L'BMSERR)\n         MVC   2(L'DRCDS1,R1),DRCDS1\n         MVC   4(L'BMSERR,R1),BMSERR\n         CVD   R0,DBLWD\n         MVC   2+L'DRCDS1+L'BMSERR(4,R1),=XL4'40202120'\n         ED    2+L'DRCDS1+L'BMSERR(4,R1),DBLWD+L'DBLWD-2\n         MVC   6+L'DRCDS1+L'BMSERR(L'DRCDS2),DRCDS2\nSNDMS    BAS   R14,PUTMSG\nRET8     LA    R10,4(R10)\nRET4     LA    R10,4(R10)\nRET0    $XRET  CC=(R10),LV=WKLEN,TYPE=RENT\n         EJECT\n*------- SKELETONS AND CONSTANTS\n         SPACE 1\n        PRINT  NOGEN\nOPNSK   OPEN   (*-*,(INPUT)),MF=L\nOPNSKL   EQU   *-OPNSK\nCLSSK   CLOSE  *-*,MF=L\nCLSSKL   EQU   *-CLSSK\nDCBSK   DCB    DDNAME=SYSUSER,MACRF=R,DSORG=PO\nDCBSKL   EQU   *-DCBSK\n         SPACE 1\n        PRINT  GEN\nOMSERR  WTO    ' -> BLDL : \"SYSUSER\" OPEN ERROR',                      X\n               ROUTCDE=11,DESC=7,MF=L\nDRCDS1   EQU   OMSERR+2,2\nDRCDS2   EQU   *-4,4\nBMSERR   DC    C' -> BLDL ERROR (RC=8) - REASON CODE :'\n         SPACE 1\n        LTORG\n         SPACE 1\n        PRINT  NOGEN\nPARMLST IKJPARM\nMDL     IKJIDENT 'MODULE NAME',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM\n        IKJENDP\n        PRINT  GEN\n         EJECT\n*------- WORK-AREAS DESCRIPTION\n         SPACE 1\nWKAREA   DSECT\n         DS    18F                 STANDARD SAVE AREA\nDBLWD    DS    D\n        $TEW$WA\nBRC      DS    2F                  BLDL CODES R15-R0\nBLIST    DS    2H                  FF,LL\nMODULE   DS    CL8                 NAME OF MODULE TO CHECK\nWKMS     DS    XL100\nOPNSR    DS    0F,(OPNSKL)X\nCLSSR    DS    0F,(CLSSKL)X\nDCBSR    DS    0F,(DCBSKL)X\n         SPACE 1\nWKLEN    EQU   (((*-WKAREA)+7)/8)*8\n         SPACE 1\n        PRINT  NOGEN\n        $TEW$DS\n        DCBD   DSORG=PO,DEVD=DA\n        PRINT  GEN\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "YATIL$": {"ttr": 27137, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x942_\\x00\\x942_\\x16(\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-21T00:00:00", "modifydate": "1994-11-21T16:28:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//YATIL    JOB (........),'INSTALL  -YATIL-',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=3\n//ASS     EXEC PAJ2AS3,OPT=',RENT',MBR=YATIL\n//LNK     EXEC PAJILKC,OPT=',RENT'\n//SYSIN     DD *\n  ENTRY   YATIL\n  NAME    YATIL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YATIL@": {"ttr": 27139, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x855O\\x00\\x855O\\x16\\x15\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1985-12-20T00:00:00", "modifydate": "1985-12-20T16:15:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      YATIL     1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *      JUST TO KNOW IF A MODULE       * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       EXIST IN A PARTITIONED        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Look into a partitioned directory to find a given\n  ---------    module name existence.\n               At exit : register 15 = 0 - module found,\n                                       4 - module not found,\n                                       8 - no module name supplied or\n                                           a processing error occured.\n\n  File name :  DD-name SYSUSER  - input data-set (DSORG=PO).\n  -----------\n\n  TSO access : may be used in a CLIST as described below.\n  ------------\n               ALLOC F(SYSUSER) DA(...data-set name...)\n               YATIL &MEMB\n               WHEN SYSRC(EQ 0) ---> member exist\n               WHEN SYSRC(GE 4) ---> not found or error\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "YPACK": {"ttr": 27141, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x08\\x0f\\x00\\x90\\x08\\x0f\\x14\\x11\\x01\\xa9\\x01\\xa9\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-03-21T00:00:00", "modifydate": "1990-03-21T14:11:00", "lines": 425, "newlines": 425, "modlines": 0, "user": "SYSPAJA"}, "text": "AIDR     TITLE 'ACCOUNTING INFORMATION DATA-SET SHORT PACKAGE.'\nYOPEN    START 0\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       DATA-SET SHORT PACKAGE        * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    THIS IS A SHORT OPERATIONAL PACKAGE TO BE USED ONLY    *\n* ---------    WHEN USER'S ACCOUNTING MUST BE CONTROLLED OR OBTAINED  *\n*              (EXCLUSIVELY THE FIRST SECTION OF THE DATA-SET IS      *\n*              REACHABLE BY THESE ROUTINES).                          *\n*              THE ACCOUNTING INFORMATION DATA-SET IS ACCESSED        *\n*              THROUGH A DD-CARD CODED AS BELOW :                     *\n*                                                                     *\n*              //SYSACC   DD  DSN=...,DISP=SHR                        *\n*                                          OLD                        *\n*                                                                     *\n*        N.B. - THE KEY (ARGUMENT OR INDEX) LENGTH IS ASSUMED TO      *\n*               BE TWO BYTES (HALFWORD) LONG, AND MAY OR NOT BE       *\n*               INCLUDED IN THE ACCOUNTING INFORMATION RECORD.        *\n*                                                                     *\n* MVS/XA :     MUST BE AMODE AND RMODE 24.                            *\n* --------                                                            *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n* CALLING SEQUENCE : CALL YOPEN,(A,B),VL\n* -------------------           (A)\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA-SET IS CORRECTLY OPENED.\n*                    + (POSITIVE) - ERROR NUMBER. THE DATA-SET IS\n*                                   NOT OPENED.\n*\n*                B - IS THE EVENTUAL KEYWORD 'DUMP' (FORMAT CL4) TO\n*                    REQUEST A DUMP ON ERROR DETECTED BY THE ROUTINES\n*                    (SYSUDUMP OR SYSABEND DD-CARD MUST BE PRESENT).\n*                    THIS OPTION IS EFFECTIVE UNTIL THE CLOSE, AND\n*                    THE ERROR NUMBER IS SET AS ABEND CODE.\n*\n* CALLING SEQUENCE : CALL YREAD,(A,B,C),VL\n* ------------------\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA RECORD IS CORRECTLY READ.\n*                    + (POSITIVE) - ERROR NUMBER.\n*\n*                B - IS THE ARGUMENT (FORMAT HALFWORD - H BOUNDARY).\n*\n*                C - IS THE DATA RECORD AREA (FORMAT CL... - SEE MACRO\n*                    '$AIRD' FOR LENGTH).\n         EJECT\n* CALLING SEQUENCE : CALL YCLOSE,(A),VL\n* ------------------\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA-SET IS CORRECTLY CLOSED.\n*                    + (POSITIVE) - ERROR NUMBER.\n*\n* ERROR NUMBER :     1 - ROUTINE OR DATA-SET TABLE DESTROYED.\n* --------------     2 - SYSACC DD-CARD IS MISSING.\n*                    3 - SYSACC UNIT IS NOT A DIRECT-ACCESS STORAGE.\n*                    4 - SYSACC JFCB READ ERROR.\n*                    5 - SYSACC DD-CARD INCORRECTLY CODED.\n*                    6 - OBTAIN ERROR WHILE PROCESSING SYSACC VOLUME.\n*                    7 - SYSACC DSCB FORMAT 1 ERROR DETECTED.\n*                   10 - SYSACC DATA-SET OPEN ERROR.\n*                   13 - SYSACC DATA-SET IS ALREADY OPENED.\n*                   14 - SYSACC DATA-SET IS NOT OPENED.\n*                   15 - READ REQUEST - ARGUMENT NOT FOUND.\n*                   16 - READ REQUEST - I/O ERROR.\n*                   19 - ROUTINE CALLING SEQUENCE OR ARGUMENT ERROR.\n*                   20 - SYSACC DATA-SET WRONGLY OR NOT CATALOGED.\n*                   24 - UNAUTHORIZED ACCESS.\n         EJECT\n         SPACE 2\n        $AIRD\n         EJECT\n        $DEFREG\n         SPACE 1\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV0      EQU   0         REJECT LEVEL\n         SPACE 1\nAUT98   $MDL@IX\n         SPACE 1\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nOFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING.\nON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING.\n         EJECT\n        PRINT  NOGEN\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 1\nJFCDSECT DSECT\n        IEFJFCBN LIST=YES\n         SPACE 1\nDSCDSECT DSECT\n        IECSDSL1 (1)\n         SPACE 1\n        DCBD   DSORG=DA,DEVD=DA\n         SPACE 1\nYOPEN    CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\n        PRINT  GEN\n         SPACE 2\n         ENTRY YREAD\n         ENTRY YCLOSE\n         SPACE 1\n         USING *,R15\n         MVI   WTGO+3,YPACK-*      SET ENTRY DISPLACEMENT (OPEN).\n         B     WTGO                GO COMMON ENTRY.\n         DROP  R15\n         SPACE 1\n         USING *,R15\nYREAD    MVI   WTGO+3,YPACK-*      SET ENTRY DISPLACEMENT (READ).\n         B     WTGO                GO COMMON ENTRY.\n         DROP  R15\n         SPACE 1\n         USING *,R15\nYCLOSE   MVI   WTGO+3,YPACK-*      SET ENTRY DISPLACEMENT (CLOSE).\n         DROP  R15\n         SPACE 1\nWTGO     LA    R15,*-*(R15)        SET COMMON ENTRY ADDRESS.\n         EJECT\nYPACK   $XENT  BASE=R12\n         SPACE 1\n         LH    R9,MAXERR           SET ERROR NUMBER REGISTER.\n         MVC   INDRA,ZEROS         GET INDICATOR RESPONSE ADDRESS.\n         TM    3(R1),X'03'\n         BNZ   ERR19\n         MVC   INDRA(4),0(R1)\n         CLC   IND(L'INDTB),INDTB  CONTROL ROUTINE INTEGRITY.\n         BNE   ERR1\n         LR    R15,R12             COMPUTE WHERE TO GO?\n         BCTR  R15,0\n         XR    R14,R14\n         IC    R14,0(R15)\n         SRL   R14,1\n         B     *+L'*-(YPACK-WTGO)+L'IND(R14) ENTER SELECTED ROUTINE.\n         SPACE 1\nIND      DC    XL2'0F0F'           IDENTIFIER.\n         SPACE 1\n         B     CLOSE               BRANCH ENTRIES VECTOR.\n         B     READ\n         EJECT\nSWOPEN   NOP   OPEN\n         LR    R2,R1               CHECK CALLER VALIDITY.\n        $EACM  REQAUT\n         LR    R1,R2               CHECK CALLER VALIDITY.\n         CLI   AUTLVL,LV0\n         BE    ERR24\n         OI    SWOPEN+1,ON         CLOSE THIS WAY AFTER CONTROL DONE.\nOPEN     NOP   ERR13               DATA-SET ALREADY OPENED.\n         TM    0(R1),X'80'         IS THERE A SECOND PARM.\n         BO    OP0                 BRANCH IF NOT.\n         TM    4(R1),X'80'\n         BZ    ERR19               TOO MANY ARGUMENTS.\n         L     R2,4(R1)\n         CLC   0(L'DEBUG,R2),DEBUG\n         BNE   OP0\n         NI    SWDP+1,OFF          SET DUMP SWITCH.\nOP0     EXTRACT ATIOT,'S',FIELDS=(TIOT)\n         LA    R8,DCBSR            SEARCH SYSACC DD-CARD.\n         USING IHADCB,R8\n         L     R2,ATIOT            GET TIOT ADDRESS.\n         USING TIODSECT,R2\nOP1      CLC   TIOELNGH(L'ZEROS),ZEROS  TEST END OF TIOT,\n         BE    ERR2                DD-CARD NOT FOUND.\n         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM TEST DD NAME,\n         BE    OP2                 BRANCH IF THIS ONE.\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R2,R1               NEXT DD ENTRY.\n         B     OP1\n         DROP  R2\nOP2     DEVTYPE DCBDDNAM,DVTYP,DEVTAB\n         DROP  R8\n         CLI   DVTYP+2,X'20'       TEST DIRECT-ACCESS STORAGE,\n         BNE   ERR3                BRANCH IF NOT.\n        RDJFCB (DCBSR)\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   ERR4\n         LA    R7,JF\n         USING JFCDSECT,R7\n         TM    JFCBIND2,JFCMOD     TEST DISP=OLD OR SHR CODED?\n         BO    ERR5                BRANCH IF NOT.\n         TM    JFCBIND2,JFCOLD\n         BZ    ERR5                BRANCH IF NOT.\n         TM    JFCBTSDM,255-JFCCAT CONTROL SYSACC DD-CARD CODE.\n         BNZ   ERR5\nJL1      EQU   JFCBLTYP-JFCFCBID\n         OC    JFCFCBID(JL1),JFCFCBID\n         BNZ   ERR5\nJL2      EQU   JFCBCRDT-JFCBOTTR\n         OC    JFCBOTTR(JL2),JFCBOTTR\n         BNZ   ERR5\nJL3      EQU   JFCBIND2-JFCBXPDT\n         OC    JFCBXPDT(JL3),JFCBXPDT\n         BNZ   ERR5\nJL4      EQU   JFCBNVOL-JFCBUFNO\n         OC    JFCBUFNO(JL4),JFCBUFNO\n         BNZ   ERR5\nJL5      EQU   JFCBVLCT-JFCBPQTY\n         OC    JFCBPQTY(JL5),JFCBPQTY\n         BNZ   ERR5\n         CLI   JFCBVLCT,X'01'\n         BNE   ERR5\n         CLI   JFCBLTYP,JFCSL\n         BNE   ERR5\n         CLI   JFCBNVOL,X'01'\n         BNE   ERR5\n         CLI   JFCBSPTN,X'00'\n         BNE   ERR5\n         MVC   VOLNUM(L'VOLNUM),JFCBVOLS\n         MVC   DSNM(L'JFCBDSNM),JFCBDSNM\n         TM    JFCBTSDM,JFCCAT     IS DATA-SET CATALOGED?\n         BZ    ERR20               BRANCH IF NOT.\n         DROP  R7\n        LOCATE CVLIST\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   ERR20\n         CLC   VOLNUM(L'VOLNUM),LOCAREA+6 VOLUME MATCH?\n         BNE   ERR20               BRANCH IF NOT.\n        OBTAIN DSCBAR\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   ERR6\n         LA    R6,WORKAREA-L'DS1DSNAM   CONTROL THE DSCB'S DEFINITIONS.\n         USING DSCDSECT,R6\n         CLC   DS1VOLSQ(L'DS1VOLSQ),CH1\n         BNE   ERR7\n         CLI   DS1NOEPV,X'01'\n         BNE   ERR7\n         CLI   DS1EXT1+1,X'00'\n         BNE   ERR7\n         CLC   DS1SCALO+1(L'DS1SCALO-1),ZEROS\n         BNE   ERR7\n         CLI   DS1KEYL,X'00'\n         BNE   ERR7\n         CLC   DS1RKP(L'DS1RKP),ZEROS\n         BNE   ERR7\n         CLC   DS1DSORG(L'DS1DSORG),DAORG\n         BNE   ERR7\n         CLI   DS1RECFM,DCBRECF\n         BNE   ERR7\n         CLC   DS1BLKL(L'DS1BLKL),RCL\n         BNE   ERR7\n         CLC   DS1LRECL(L'DS1LRECL),RCL\n         BNE   ERR7\n         DROP  R6\n         USING JFCDSECT,R7\n         OI    JFCBTSDM,JFCNWRIT   INHIBIT WRITE BACK.\n         DROP  R7\n        OPEN   (DCBSR,(INPUT)),TYPE=J\n         USING IHADCB,R8\n         TM    DCBOFLGS,DCBOFOPN   TEST OPEN SUCCESSFULL,\n         BZ    ERR10               BRANCH IF NOT.\n         DROP  R8\n         OI    OPEN+1,ON           SET OPEN SWITCHES.\n         NI    READ+1,OFF\n         NI    CLOSE+1,OFF\n         XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         EJECT\nREAD     B     ERR14               DATA-SET NOT OPENED.\n         TM    0(R1),X'80'         TEST CALLING SEQUENCE.\n         BO    ERR19\n         TM    4(R1),X'80'\n         BO    ERR19\n         TM    8(R1),X'80'\n         BZ    ERR19\n         TM    7(R1),X'01'\n         BNZ   ERR19\n         LM    R7,R8,4(R1)         GET PARM. ADDRESSES.\n         LH    R1,0(R7)            GET ARGUMENT.\n         LTR   R1,R1               TEST IF ARGUMENT VALID,\n         BNP   ERR19               BRANCH IF NOT.\n         CLC   0(2,R7),NAUT        TEST IF AUT. NR. REQUEST.\n         BL    OK\n         BE    ERR19\n         CLC   0(2,R7),NPRG        TEST IF PRG. NR. REQUEST.\n         BNL   ERR19\n         BCTR  R1,0                COMPUTE RECORD ADDRESS.\nOK       BCTR  R1,0\n         ST    R1,NREC\n         LA    R1,DECBSR\n        READ   (1),DI,DCBSR,(8),'S',0,NRECAD,MF=E\n        CHECK  DECBSR\nSWLRW    B     RDT                 I/O ERROR SWITCH.\n         OI    SWLRW+1,ON          SET BRANCH OPERATION.\n        WTO    MF=(E,LWTO)\n         B     ERR16\nRDT      CLC   0(2,R8),ZEROS       TEST IF AUT. NR. EXIST,\n         BE    ERR15               BRANCH IF NOT, NOT FOUND.\n         XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         EJECT\nCLOSE    B     ERR14               DATA-SET NOT OPENED.\n         TM    0(R1),X'80'\n         BZ    ERR19               TOO MANY ARGUMENTS.\n        CLOSE  DCBSR\n         NI    OPEN+1,OFF          SET CLOSE SWITCHES.\n         OI    READ+1,ON\n         OI    CLOSE+1,ON\n         OI    SWDP+1,ON           RESET DUMP SWITCH.\n         XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         EJECT\n*        COMPUTE ERROR NUMBER AND RETURN.\n         SPACE 1\nERRM    NULL\n         SPACE 1\nERR1     BCTR  R9,0      ROUTINE OR DATA-SET TABLE DESTROYED.\nERR2     BCTR  R9,0      SYSACC DD-CARD IS MISSING.\nERR3     BCTR  R9,0      SYSACC UNIT IS NOT A DIRECT-ACCESS STORAGE.\nERR4     BCTR  R9,0      SYSACC JFCB READ ERROR.\nERR5     BCTR  R9,0      SYSACC DD-CARD INCORRECTLY CODED.\nERR6     BCTR  R9,0      OBTAIN ERROR WHILE PROCESSING SYSACC VOLUME.\nERR7     BCTR  R9,0      SYSACC DSCB FORMAT 1 ERROR DETECTED.\n         BCTR  R9,0\n         BCTR  R9,0\nERR10    BCTR  R9,0      SYSACC DATA-SET OPEN ERROR.\n         BCTR  R9,0\n         BCTR  R9,0\nERR13    BCTR  R9,0      SYSACC DATA-SET IS ALREADY OPENED.\nERR14    BCTR  R9,0      SYSACC DATA-SET IS NOT OPENED.\nERR15    BCTR  R9,0      READ REQUEST - ARGUMENT NOT FOUND.\nERR16    BCTR  R9,0      READ REQUEST - I/O ERROR.\n         BCTR  R9,0\n         BCTR  R9,0\nERR19    BCTR  R9,0      ROUTINE CALLING SEQUENCE OR ARGUMENT ERROR.\nERR20    BCTR  R9,0      SYSACC DATA-SET WRONGLY OR NOT CATALOGED.\n         BCTR  R9,0\n         BCTR  R9,0\n         BCTR  R9,0\nERR24    BCTR  R9,0      UNAUTHORIZED ACCESS.\n         SPACE 1\nERRL     EQU   ((*-ERRM)/2)+1\n         SPACE 1\nSWDP     B     EXIT\n         LR    R1,R9               SET ERROR NUMBER AS ABEND CODE(HEX).\n        ABEND  (1),DUMP            DEBUG OPTION SELECTED BY OPEN.\n         SPACE 1\nEXIT     L     R1,INDRA            SET INDICATOR RESPONSE.\n         LTR   R1,R1\n         BZ    *+L'*+4\n         ST    R9,0(R1)\n        $XRET  CC=(R9)\n         EJECT\nRWERR   SYNADAF   ACSMETH=BDAM\n         MVC   LWTO+4(72),56(R1)\n         CLI   69(R1),C'*'         TEST UNSIGNIFICANT MESSAGE,\n         BE    SYNAD2              BRANCH IF YES.\n         CLI   8(R1),C' '          TEST IF BINARY INFORMATIONS,\n         BE    SYNAD1              BRANCH IF NOT.\n         UNPK  LWTO+4(7),9(4,R1)\n         TR    LWTO+4(6),TRTAB-X'F0'\n         MVI   LWTO+10,C','\n         UNPK  LWTO+11(5),12(3,R1)\n         TR    LWTO+11(4),TRTAB-X'F0'\n         MVI   LWTO+15,C','\n         B     SYNAD2\nSYNAD1   MVC   LWTO+4(12),8(R1)    MOVE BLANKS.\nSYNAD2  SYNADRLS\n         NI    SWLRW+1,OFF         SET NOP OPERATION.\n         BR    R14                 RETURN.\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nLOCAREA  DC    0D'0',XL120'00'     OVERLAP ON WORKAREA.\nWORKAREA DC    0D'0',XL140'00',XL5'00',XL3'00'\nDVTYP    DC    5F'0'\nATIOT    DC    A(*-*)\nINDRA    DC    A(*-*)\nZEROS    DC    F'0'\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTLVL)\nNREC     DC    0F'0',XL1'00'\nNRECAD   DC    XL3'00'\nJOBFILE  DC    0F'0',XL1'87',AL3(JF)\nJF       DC    0F'0',XL176'00'\nCVLIST  CAMLST NAME,DSNM,,LOCAREA\nDSCBAR  CAMLST SEARCH,DSNM,VOLNUM,WORKAREA\nLWTO    WTO    '                                                       1\n                                ',ROUTCDE=11,DESC=7,MF=L\nDSNM     DC    CL44' '\nVOLNUM   DC    CL6' '\nCH1      DC    H'1'\nNAUT     DC    0H'0',AL2(NAUTNO+1)\nNPRG     DC    0H'0',AL2(NAUTNO+NPRGNO+2)\nDAORG    DC    0H'0',AL1(DCBDSGDA,0)\nRCL      DC    0H'0',AL2(AUTLGTH)\nMAXERR   DC    0H'0',AL2(ERRL)\nTRTAB    DC    C'0123456789ABCDEF'\nDEBUG    DC    C'DUMP'\nAUTLVL   DC    XL1'0'\n         EJECT\nDCBSR   DCB    DSORG=DA,MACRF=(RIC),BFALN=D,BFTEK=S,KEYLEN=0,LIMCT=1,  1\n               OPTCD=R,EXLST=JOBFILE,SYNAD=RWERR,DDNAME=SYSACC\n         EJECT\n        READ   DECBSR,DI,MF=L\n         SPACE 2\nINDTB    DC    XL2'0F0F'\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YPACK$": {"ttr": 27149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943?\\x00\\x943?\\x12(\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-29T00:00:00", "modifydate": "1994-11-29T12:28:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SYSPAJA"}, "text": "//YPACK    JOB (........),'INSTALL  - YPACK -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL                                            *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=YPACK\n//LNK     EXEC PAJILKR\n//SYSIN     DD *\n  ALIAS   YREAD\n  ALIAS   YCLOSE\n  NAME    YOPEN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "YPACK@": {"ttr": 27151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x892_\\x00\\x892_\\x13S\\x00U\\x00U\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-21T00:00:00", "modifydate": "1989-11-21T13:53:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      YPACK     1/2.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       DATA-SET SHORT PACKAGE        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This is a short operational package to be used only\n  ---------    when user's accounting must be controlled or obtained\n               (exclusively the first section of the data-set is\n               reachable by these routines).\n               The accounting information data-set is accesses\n               through a DD-card coded as below :\n\n               //SYSACC   DD  DSN=...,DISP=SHR\n                                           OLD\n\n         Note : the key (argument or index) length is assumed to\n                be two bytes (halfword) long, and may or not be\n                included in the accounting information record.\n\n  MVS/XA :     Must be AMODE and RMODE 24.\n  --------\n\n  Calling sequence : CALL YOPEN,(A,B),VL\n  -------------------           (A)\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (zero) - the data-set is correctly opened.\n                     + (positive) - error number. The data-set is\n                                    not opened.\n\n                 B - is the address of the eventual keyword DUMP\n                     (format CL4) to request a dump on error detected\n                     by the routines (SYSUDUMP or SYSABEND DD-card is\n                     needed). This option is effective until the close,\n                     and the error number is set as abend code.\n1   15/11/89\n                                                      YPACK     2/2.\n\n  Calling sequence : CALL YREAD,(A,B,C),VL\n  ------------------\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (xero) - the data record is correctly read.\n                     + (positive) - error number.\n\n                 B - is the address of the argument (format HALFWORD -\n                     H boundary).\n\n                 C - is the address of the data record area (format\n                     CL... - see macro $AIRD for length).\n\n  Calling sequence : CALL YCLOSE,(A),VL\n  ------------------\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (zero) - the data-set is correctly closed.\n                     + (positive) - error number.\n\n  Error number :     1 - routine or data-set table destroyed.\n  --------------     2 - SYSACC DD-card is missing.\n                     3 - SYSACC unit is not a direct-access storage.\n                     4 - SYSACC JFCB read error.\n                     5 - SYSACC DD-card incorrectly coded.\n                     6 - OBTAIN error while processing SYSACC volume.\n                     7 - SYSACC DSCB format 1 error detected.\n                    10 - SYSACC data-set OPEN error.\n                    13 - SYSACC data-set is already opened.\n                    14 - SYSACC data-set is not opened.\n                    15 - READ request - argument not found.\n                    16 - READ request - I/O error.\n                    19 - routine calling sequence or argument error.\n                    20 - SYSACC data-set wrongly or not cataloged.\n                    24 - Unauthorized to access the accounting packages.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZPACK": {"ttr": 27393, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11?\\x00\\x90\\x11?\\x16F\\x04s\\x04s\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-23T00:00:00", "modifydate": "1990-04-23T16:46:00", "lines": 1139, "newlines": 1139, "modlines": 0, "user": "SYSPAJA"}, "text": "AIRW     TITLE 'ACCOUNTING INFORMATION DATA-SET FULL PACKAGE.'\nZOPEN    START 0\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       DATA-SET FULL PACKAGE         * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    THIS IS THE FULL OPERATIONAL PACKAGE AVAILABLE         *\n* ---------    TO MAINTAIN AND MANAGE DATA IN THE ACCOUNTING          *\n*              INFORMATION DATA-SET, WHICH IS ACCESSED THROUGH        *\n*              A DD-CARD CODED AS BELOW :                             *\n*                                                                     *\n*              //SYSACC   DD  DSN=...,DISP=SHR                        *\n*                                          OLD                        *\n*                                                                     *\n*        N.B. - THE KEY (ARGUMENT OR INDEX) LENGTH IS ASSUMED TO      *\n*               BE TWO BYTES (HALFWORD) LONG, AND MAY OR NOT BE       *\n*               INCLUDED IN THE ACCOUNTING INFORMATIONS RECORD.       *\n*                                                                     *\n* MVS/XA :     MUST BE AMODE AND RMODE 24.                            *\n* --------                                                            *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n* CALLING SEQUENCE : CALL ZOPEN,(A,B),VL\n* ------------------            (A)\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA-SET IS CORRECTLY OPENED.\n*                    + (POSITIVE) - ERROR NUMBER. THE DATA-SET IS\n*                                   NOT OPENED.\n*\n*                B - IS THE EVENTUAL FOLLOWING KEYWORD (FORMAT CL4) :\n*                    'DUMP' TO REQUEST A DUMP ON ERROR DETECTED BY THE\n*                           ROUTINES (SYSUDUMP OR SYSABEND DD-CARD MUST\n*                           BE PRESENT). THIS OPTION IS EFFECTIVE UNTIL\n*                           THE CLOSE, AND THE ERROR NUMBER IS SET AS\n*                           ABEND CODE.\n*                    'ONLY' TO BYPASS THE EXCLUSIVE ENQUEUE OF THE\n*                           DATA-SET WHEN THESE ROUTINES ARE USED ONLY\n*                           IN READ (NO UPDATES TAKE PLACE). SO THE\n*                           ZWRITE AND ZDELET ARE DISABLED.\n*                    'BOTH' TO HAVE BOTH PREVIOUS ACTIONS.\n*\n* CALLING SEQUENCE : CALL ZREAD,(A,B,C),VL\n* ------------------ CALL ZWRITE,(A,B,C),VL\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA RECORD IS CORRECTLY READ OR\n*                               WRITTEN.\n*                    + (POSITIVE) - ERROR NUMBER.\n*\n*                B - IS THE ARGUMENT (FORMAT HALWORD - H BOUNDARY).\n*\n*                C - IS THE DATA RECORD AREA (FORMAT CL... - SEE MACRO\n*                    '$AIRD' FOR LENGTH).\n*\n* CALLING SEQUENCE : CALL ZCLOSE,(A),VL\n* ------------------\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA-SET IS CORRECTLY CLOSED.\n*                    + (POSITIVE) - ERROR NUMBER.\n         EJECT\n* CALLING SEQUENCE : CALL ZSEQR,(A,B,C),VL\n* ------------------            (A,B)\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA RECORD IS CORRECTLY READ.\n*                    + (POSITIVE) - ERROR NUMBER.\n*                    -1 (MINUS ONE) - END OF DATA (END-OF-FILE).\n*\n*                B - IS THE DATA RECORD AREA (FORMAT CL... - SEE MACRO\n*                    '$AIRD' FOR LENGTH).\n*\n*                C - IS THE ARGUMENT, OPTIONAL (FORMAT HALFWORD -\n*                    H BOUNDARY).\n*\n* CALLING SEQUENCE : CALL ZDELET,(A,B),VL\n* ------------------\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA RECORD IS CORRECTLY DELETED.\n*                    + (POSITIVE) - ERROR NUMBER.\n*\n*                B - IS THE ARGUMENT (FORMAT HALFWORD - H BOUNDARY).\n*\n* CALLING SEQUENCE : CALL ZSTATE,(A,B),VL\n* ------------------\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY). VALUE IS ALWAYS PLACED IN REGISTER 15\n*                    AND CAN BE :\n*                    0 (ZERO) - THE DATA-SET STATUS AREA IS LOADED.\n*                    + (POSITIVE) - ERROR NUMBER.\n*\n*                B - IS THE STATUS RESPONSE AREA (FORMAT CL... -\n*                    FULLWORD BOUNDARY - SEE MACRO '$AIRD' FOR LENGTH\n*                    AND DESCRIPTION).\n         EJECT\n* ERROR NUMBER :     1 - ROUTINE OR DATA-SET TABLE DESTROYED.\n* --------------     2 - SYSACC DD-CARD IS MISSING.\n*                    3 - SYSACC UNIT IS NOT A DIRECT-ACCESS STORAGE.\n*                    4 - SYSACC JFCB READ ERROR.\n*                    5 - SYSACC DD-CARD INCORRECTLY CODED.\n*                    6 - OBTAIN ERROR WHILE PROCESSING SYSACC VOLUME.\n*                    7 - SYSACC DSCB FORMAT 1 ERROR DETECTED.\n*                    8 - SYSACC DATA BLOCK EXCEEDS TRACK CAPACITY.\n*                    9 - SYSACC DATA-SET SPACE TOO SHORT.\n*                   10 - SYSACC DATA-SET OPEN ERROR.\n*                   11 - NO STORAGE AVAILABLE TO READ DATA-SET TABLE.\n*                   12 - SYSACC DATA-SET I/O ERROR WHILE READING TABLE.\n*                   13 - SYSACC DATA-SET IS ALREADY OPENED.\n*                   14 - SYSACC DATA-SET IS NOT OPENED.\n*                   15 - READ REQUEST - ARGUMENT NOT FOUND.\n*                   16 - READ/WRITE REQUEST - I/O ERROR.\n*                   17 - SYSACC DATA-SET FULL, CANNOT ADD RECORD.\n*                   18 - SYSACC DATA-SET I/O ERROR WHILE WRITING TABLE.\n*                   19 - ROUTINE CALLING SEQUENCE OR ARGUMENT ERROR.\n*                   20 - SYSACC DATA-SET WRONGLY OR NOT CATALOGED.\n*                   21 - SYSACC DATA-SET IN USE FOR UPDATE BY SOMEBODY.\n*                   22 - ONLY OR BOTH REQUESTED - ZWRITE NOT AVAILABLE.\n*                   23 - ONLY OR BOTH REQUESTED - ZDELET NOT AVAILABLE.\n*                   24 - UNAUTHORIZED ACCESS.\n*                   25 - UNAUTHORIZED ACCESS TO ZWRITE.\n*                   26 - UNAUTHORIZED ACCESS TO ZDELET.\n         EJECT\n        $AIRD  STA=YES\n         EJECT\n        $DEFREG\n         SPACE 1\n*---------------------------------------------------------------------*\n*        AUTHORITY LEVELS DEFINITIONS.                                *\n*---------------------------------------------------------------------*\n         SPACE 1\nLV0      EQU   0         REJECT LEVEL\nLV5      EQU   5         DISPLAY SERVICES LEVEL\n         SPACE 1\nAUT98   $MDL@IX\n         SPACE 1\n*        MISCELLANEOUS DEFINITIONS.\n         SPACE 1\nOFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING.\nON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING.\nUCB3DACC EQU   X'20'               DIRECT ACCESS DEVICE TYPE.\n         EJECT\n        IEZBITS\n         SPACE 2\n        PRINT  NOGEN\n         SPACE 1\nTIODSECT DSECT\n        IEFTIOT1\n         SPACE 1\nJFCDSECT DSECT\n        IEFJFCBN LIST=YES\n         SPACE 1\nDSCDSECT DSECT\n        IECSDSL1 (1)\n         SPACE 1\n        DCBD   DSORG=DA,DEVD=DA\n         SPACE 1\nZOPEN    CSECT                     RESTORE ORIGINAL CSECT.\n         SPACE 1\n        PRINT  GEN\n         EJECT\n         ENTRY ZREAD\n         ENTRY ZWRITE\n         ENTRY ZCLOSE\n         ENTRY ZSEQR\n         ENTRY ZDELET\n         ENTRY ZSTATE\n         SPACE 1\n         USING *,R15\n         MVI   WTGO+3,ZPACK-*      SET ENTRY DISPLACEMENT (OPEN).\n         B     WTGO                GO COMMON ENTRY.\n         DROP  R15\n         SPACE 1\n         USING *,R15\nZREAD    MVI   WTGO+3,ZPACK-*      SET ENTRY DISPLACEMENT (READ).\n         B     WTGO                GO COMMON ENTRY.\n         DROP  R15\n         SPACE 1\n         USING *,R15\nZWRITE   MVI   WTGO+3,ZPACK-*      SET ENTRY DISPLACEMENT (WRITE).\n         B     WTGO                GO COMMON ENTRY.\n         DROP  R15\n         SPACE 1\n         USING *,R15\nZCLOSE   MVI   WTGO+3,ZPACK-*      SET ENTRY DISPLACEMENT (CLOSE).\n         B     WTGO                GO COMMON ENTRY.\n         DROP  R15\n         SPACE 1\n         USING *,R15\nZSEQR    MVI   WTGO+3,ZPACK-*      SET ENTRY DISPLACEMENT (SEQ.READ).\n         B     WTGO                GO COMMON ENTRY.\n         DROP  R15\n         SPACE 1\n         USING *,R15\nZDELET   MVI   WTGO+3,ZPACK-*      SET ENTRY DISPLACEMENT (DELETE).\n         B     WTGO                GO COMMON ENTRY.\n         DROP  R15\n         SPACE 1\n         USING *,R15\nZSTATE   MVI   WTGO+3,ZPACK-*      SET ENTRY DISPLACEMENT (STATUS).\n         DROP  R15\n         SPACE 1\nWTGO     LA    R15,*-*(R15)        SET COMMON ENTRY ADDRESS.\n         EJECT\nZPACK   $XENT  BASE=(R11,R12)\n         SPACE 1\n         LH    R9,MAXERR           SET ERROR NUMBER REGISTER.\n         MVC   INDRA,ZEROS         GET INDICATOR RESPONSE ADDRESS.\n         TM    3(R1),X'03'\n         BNZ   ERR19\n         MVC   INDRA(4),0(R1)\n         CLC   IND(L'INDTB),INDTB  CONTROL ROUTINE INTEGRITY.\n         BNE   ERR1\n         LR    R15,R11             COMPUTE WHERE TO GO?\n         BCTR  R15,0\n         XR    R14,R14\n         IC    R14,0(R15)\n         SRL   R14,1\n         B     *+L'*-(ZPACK-WTGO)+L'IND(R14) ENTER SELECTED ROUTINE.\n         SPACE 1\nIND      DC    XL2'0F0F'           IDENTIFIER.\n         SPACE 1\n         B     STATS               BRANCH ENTRIES VECTOR.\n         B     DELETE\n         B     SEQR\n         B     CLOSE\n         B     WRITE\n         B     READ\n         EJECT\nSWOPEN   NOP   OPEN\n         LR    R2,R1               CHECK CALLER VALIDITY.\n        $EACM  REQAUT\n         LR    R1,R2\n         CLI   AUTLVL,LV0\n         BE    ERR24\n         OI    SWOPEN+1,ON         CLOSE THIS WAY AFTER CONTROL DONE.\nOPEN     NOP   ERR13               DATA-SET ALREADY OPENED.\n         XC    NSEQ(L'NSEQ),NSEQ   RESET SEQUENTIAL READ.\n         TM    0(R1),X'80'         IS THERE A SECOND PARM.\n         BO    OP1                 BRANCH IF NOT.\n         TM    4(R1),X'80'\n         BZ    ERR19               TOO MANY ARGUMENTS.\n         L     R2,4(R1)\n         CLC   0(L'KDUMP,R2),KDUMP\n         BE    *+L'*+10\n         CLC   0(L'KBOTH,R2),KBOTH\n         BNE   *+L'*+4\n         NI    SWDP+1,OFF          SET DUMP SWITCH.\n         CLC   0(L'KONLY,R2),KONLY\n         BE    *+L'*+10\n         CLC   0(L'KBOTH,R2),KBOTH\n         BNE   OP1\n         OI    SWONLY+1,ON         SET ONLY READ SWITCH.\n         OI    SWWRITE+1,ON        SET WRITE SWITCH.\n         OI    SWDELET+1,ON        SET DELETE SWITCH.\n         OI    SWENQ+1,ON          SET ENQ SWITCH.\n         OI    SWDEQ+1,ON          SET DEQ SWITCH.\n         LA    R1,DCBSR\n         USING IHADCB,R1\n         NI    DCBMACR2,255-DCBMRWRT-DCBMRIDW     RESET BDAM WRITE.\n         DROP  R1\nOP1     EXTRACT ATIOT,'S',FIELDS=(TIOT)\n         LA    R8,DCBSR            SEARCH SYSACC DD-CARD.\n         USING IHADCB,R8\n         L     R2,ATIOT            GET TIOT ADDRESS.\n         USING TIODSECT,R2\nOP2      CLC   TIOELNGH(L'ZEROS),ZEROS  TEST END OF TIOT,\n         BE    ERR2                DD-CARD NOT FOUND.\n         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM TEST DD NAME,\n         BE    OP3                 BRANCH IF THIS ONE.\n         XR    R1,R1\n         IC    R1,TIOELNGH\n         ALR   R2,R1               NEXT DD ENTRY.\n         B     OP2\n         DROP  R2\nOP3     DEVTYPE DCBDDNAM,DVTYP,DEVTAB\n         DROP  R8\n         CLI   DVTYP+2,UCB3DACC    TEST DIRECT-ACCESS STORAGE,\n         BNE   ERR3                BRANCH IF NOT.\n        RDJFCB (DCBSR)\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   ERR4\n         LA    R7,JF\n         USING JFCDSECT,R7\n         TM    JFCBIND2,JFCMOD     TEST DISP=SHR OR OLD CODED?\n         BO    ERR5                BRANCH IF NOT.\n         TM    JFCBIND2,JFCOLD\n         BZ    ERR5                BRANCH IF NOT.\n         TM    JFCBTSDM,255-JFCCAT CONTROL SYSACC DD-CARD CODE.\n         BNZ   ERR5\nJL1      EQU   JFCBLTYP-JFCFCBID\n         OC    JFCFCBID(JL1),JFCFCBID\n         BNZ   ERR5\nJL2      EQU   JFCBCRDT-JFCBOTTR\n         OC    JFCBOTTR(JL2),JFCBOTTR\n         BNZ   ERR5\nJL3      EQU   JFCBIND2-JFCBXPDT\n         OC    JFCBXPDT(JL3),JFCBXPDT\n         BNZ   ERR5\nJL4      EQU   JFCBNVOL-JFCBUFNO\n         OC    JFCBUFNO(JL4),JFCBUFNO\n         BNZ   ERR5\nJL5      EQU   JFCBVLCT-JFCBPQTY\n         OC    JFCBPQTY(JL5),JFCBPQTY\n         BNZ   ERR5\n         CLI   JFCBVLCT,X'01'\n         BNE   ERR5\n         CLI   JFCBLTYP,JFCSL\n         BNE   ERR5\n         CLI   JFCBNVOL,X'01'\n         BNE   ERR5\n         CLI   JFCBSPTN,X'00'\n         BNE   ERR5\n         MVC   VOLNUM(L'VOLNUM),JFCBVOLS\n         MVC   DSNM(L'JFCBDSNM),JFCBDSNM\n         TM    JFCBTSDM,JFCCAT     IS DATA-SET CATALOGED?\n         BZ    ERR20               BRANCH IF NOT.\n         DROP  R7\n        LOCATE CVLIST\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   ERR20\n         CLC   VOLNUM(L'VOLNUM),LOCAREA+6 VOLUME MATCH?\n         BNE   ERR20\n        OBTAIN DSCBAR\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BNZ   ERR6\n         LA    R6,WORKAREA-L'DS1DSNAM   CONTROL THE DSCB'S DEFINITIONS.\n         USING DSCDSECT,R6\n         CLC   DS1VOLSQ(L'DS1VOLSQ),CH1\n         BNE   ERR7\n         CLI   DS1NOEPV,X'01'\n         BNE   ERR7\n         CLI   DS1EXT1+1,X'00'\n         BNE   ERR7\n         CLC   DS1SCALO+1(L'DS1SCALO-1),ZEROS\n         BNE   ERR7\n         CLI   DS1KEYL,X'00'\n         BNE   ERR7\n         CLC   DS1RKP(L'DS1RKP),ZEROS\n         BNE   ERR7\n         CLC   DS1DSORG(L'DS1DSORG),DAORG\n         BNE   ERR7\n         CLI   DS1RECFM,DCBRECF\n         BNE   ERR7\n         CLC   DS1BLKL(L'DS1BLKL),RCL\n         BNE   ERR7\n         CLC   DS1LRECL(L'DS1LRECL),RCL\n         BNE   ERR7\n         XR    R2,R2\n         IC    R2,DVTYP+3          GET UNIT TYPE.\n         LH    R3,RCL              UNKEYED DATA BLOCK LENGTH.\n         ICM   R3,B'1000',CH1+L'CH1-1\n        TRKCALC FUNCTN=TRKCAP,TYPE=(R2),RKDD=(R3),REGSAVE=YES\n         LTR   R15,R15             DOES RECORD FIT ON TRACK?\n         BNZ   ERR8                BRANCH IF NOT.\n         LR    R5,R0               NO. OF BLOCKS/TRACK.\n         MVC   WORKD(L'DS1EXT1-2),DS1EXT1+2\n         DROP  R6\n         L     R1,WORKD+4          UPPER LIMIT(CCHH).\n         S     R1,WORKD            LOWER LIMIT(CCHH).\n         ST    R1,WORKD\n         LH    R1,WORKD            GET NUMBER OF CYLINDERS.\n         LTR   R1,R1\n         BZ    *+L'*+4\n         MH    R1,DVTYP+10         TRANSFORM CYL. IN TRACKS.\n         LH    R2,WORKD+2          GET NUMBER OF TRACKS.\n         LA    R3,1(R1,R2)         EXTENT TOTAL NR. OF TRACKS.\n         XR    R2,R2\n         MR    R2,R5               EXTENT TOTAL NR. OF BLOCKS.\n         LR    R5,R3               SAVE ADDRESS FIRST OUT OF DATA-SET.\n         LH    R4,RCL\n         LH    R3,NAUT             GET NUMBER OF AUT. NR.\n         AH    R3,NPRG             ADD NUMBER OF PRG. NR.\n         ST    R3,NBT\n         SRL   R3,3                COMPUTE NR. OF BYTES FOR MAP TABLE.\n         TM    NBT+3,X'07'\n         BZ    *+L'*+4\n         AH    R3,CH1\n         XR    R2,R2               COMPUTE NR. OF RECORDS FOR MAP TABLE\n         DR    R2,R4\n         LTR   R2,R2\n         BZ    *+L'*+4\n         AH    R3,CH1\n         ST    R3,NBT              NR. OF MAP TABLE RECORDS.\n         ST    R3,NBTSTA\n         LR    R3,R5               TOTAL NR. OF DATA-SET RECORDS.\n         S     R3,NBT              SUBTRACT NR. OF MAP TABLE RECORDS.\n         ST    R3,MXNREC           ADDRESS FIRST MAP TABLE RECORD.\n         SH    R3,NAUT             SUBTRACT NR. OF AUT.\n         SH    R3,NPRG             SUBTRACT NR. OF PRG.\n         BNP   ERR9\n         SRL   R4,1                NR. OF ARG. IN 1 TABLE RECORD.\n         XR    R1,R1\n         LR    R2,R1\nOP5      CLR   R2,R3               COMPUTE TABLE RECORDS NUMBER.\n         BNL   OP6\n         LA    R1,1(0,R1)\n         AR    R2,R4\n         BCT   R3,OP5\n         B     ERR9\nOP6      ST    R1,NRT              NR. OF TABLE RECORDS.\n         ST    R1,NRTSTA\n         ST    R3,NRTARG\nSWENQ    NOP   OP7\n         MVC   RNME(L'VOLNUM),VOLNUM\n         LA    R1,RNME+L'VOLNUM-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+8\n         MVI   0(R1),C'.'\n         BCT   R1,*-12\n         LA    R1,DSNM+L'DSNM-1\n         LA    R2,L'RNME+L'DSNM\n         CLI   0(R1),C' '\n         BNE   *+L'*+6\n         BCTR  R1,0\n         BCT   R2,*-10\n         STH   R2,RNMEL\n        ENQ    (QNME,RNME,E,(R2),SYSTEMS),RET=USE\n         LTR   R15,R15             DATA-SET AVAILABLE FOR UPDATE?\n         BNZ   ERR21               BRANCH IF NOT, IT IS IN USE.\n         USING JFCDSECT,R7\nOP7      OI    JFCBTSDM,JFCNWRIT   INHIBIT WRITE BACK.\n         DROP  R7\nSWONLY   NOP   OPONLY\n        OPEN   (DCBSR,(UPDAT)),TYPE=J\n         B     OPTEST\nOPONLY  OPEN   (DCBSR,(INPUT)),TYPE=J\nOPTEST   TM    DCBSR+DCBOFLGS-IHADCB,DCBOFOPN SUCCESSFULLY OPENED?\n         BZ    ERR10               BRANCH IF NOT.\n         SPACE 2\n         L     R1,NRT\n         LH    R0,RCL\n         MR    R0,R0               COMPUTE AMONG OF CORE REQ.\n         AH    R1,CH23\n         SRL   R1,3\n         SLL   R1,3                ROUND UP TO DOUBLE-WORD BOUNDARY.\n         ST    R1,NMCORE\n         LR    R2,R1\n        GETMAIN EC,LV=(2),A=ATABLE\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BZ    *+L'*+8\n         BAS   R10,CLERR           NO STORAGE AVAILABLE.\n         B     ERR11\n         L     R2,ATABLE           CLEAR THE TABLE AREA.\n         L     R0,NMCORE\n         SRDL  R0,8\n         SRL   R1,24\n         LTR   R0,R0\n         BZ    OP9\nOP8      XC    0(256,R2),0(R2)\n         LA    R2,256(0,R2)\n         BCT   R0,OP8\nOP9      LTR   R1,R1\n         BZ    *+L'*+6\n         BCTR  R1,0\n         EX    R1,OPX\n         EJECT\n* DATA-SET TABLE AREA ORGANIZATION :\n* ----------------------------------\n*\n*        ASSUME THAT THE TABLE AREA LENGTH IS N BYTES LONG.\n*\n*        +0      = FIRST ARGUMENT ADDRESS.\n*        +4      = ARGUMENT LENGTH.\n*        +8      = LAST ARGUMENT ADDRESS.\n*        +12     = TABLE IDENTIFIER(X'0F0F').\n*        +14     = ... ARGUMENTS ...\n*                       (THE LOCATION OF THE ARGUMENT IS USED TO\n*                       COMPUTE THE CORRESPONDING DATA RECORD ADDRESS\n*                       IN THE DATA-SET).\n*        +(N-2)  = TABLE IDENTIFIER(X'0F0F').\n         SPACE 1\n         L     R2,ATABLE           PREPARE TABLE AREA.\n         LA    R3,14(0,R2)\n         LR    R4,R2\n         ST    R3,0(R2)            SET START TABLE ADDRESS.\n         MVI   7(R2),2             SET ARGUMENT LENGTH.\n         MVC   12(L'INDTB,R2),INDTB     SET CONTROL INDICATORS.\n         AL    R2,NMCORE\n         BCTR  R2,0\n         BCTR  R2,0\n         MVC   0(L'INDTB,R2),INDTB\n         LH    R2,NAUT             FIRST ARG. TABLE RECORD ADDRESS.\n         AH    R2,NPRG\n         L     R1,NRT\n         AR    R1,R2\n         ST    R1,NRT\nOP10     LR    R1,R2\n         LR    R8,R3\n         BAS   R10,RRD             READ TABLE RECORDS.\n         B     *+L'*+8\n         BAS   R10,CLERR           I/O ERROR.\n         B     ERR12\n         AH    R3,RCL              NEXT TABLE RECORD ADDRESS.\n         LA    R2,1(0,R2)          NEXT RECORD ADDRESS.\n         CL    R2,NRT              TEST IF ALL TABLE RECORDS READ.\n         BL    OP10                BRANCH IF MORE.\n         LM    R1,R2,0(R4)         GET TABLE SCAN POINTERS.\n         SLR   R3,R2               ADDRESS OF LAST ARGUMENT.\nOP11     CLC   0(2,R1),ZEROS       SEARCH THE TRUE TABLE END ADDRESS.\n         BE    OP12\n         BXLE  R1,R2,OP11\nOP12     SLR   R1,R2               ADDRESS OF LAST ARGUMENT IN TABLE.\n         ST    R1,8(R4)            SET ADDRESS OF LAST ARGUMENT.\n         EJECT\n         L     R1,NBT\n         LH    R0,RCL\n         MR    R0,R0               COMPUTE AMONG OF CORE REQ.\n         AH    R1,CH11\n         SRL   R1,3\n         SLL   R1,3                ROUND UP TO DOUBLE-WORD BOUNDARY.\n         ST    R1,MTCORE\n         LR    R2,R1\n        GETMAIN EC,LV=(2),A=MTABLE\n         LTR   R15,R15             TEST COMPLETION CODE.\n         BZ    *+L'*+8\n         BAS   R10,CLERR           NO STORAGE AVAILABLE.\n         B     ERR11\n         L     R2,MTABLE           CLEAR THE TABLE AREA.\n         L     R0,MTCORE\n         SRDL  R0,8\n         SRL   R1,24\n         LTR   R0,R0\n         BZ    OP14\nOP13     XC    0(256,R2),0(R2)\n         LA    R2,256(0,R2)\n         BCT   R0,OP13\nOP14     LTR   R1,R1\n         BZ    *+L'*+6\n         BCTR  R1,0\n         EX    R1,OPX\n         EJECT\n* DATA-SET MAP TABLE AREA ORGANIZATION :\n* --------------------------------------\n*\n*        ASSUME THAT THE MAP TABLE AREA LENGTH IS M BYTES LONG.\n*\n*        +0      = TABLE IDENTIFIER(X'0F0F').\n*        +2      = ... MAP TABLE ...\n*                       (EACH BIT REPRESENT THE PRESENCE OR ABSENCE\n*                       OF THE CORRESPONDING AUTHORIZATION OR\n*                       PROGRAMMER RECORD).\n*        +(M-2)  = TABLE IDENTIFIER(X'0F0F').\n         SPACE 1\n         L     R2,MTABLE           PREPARE MAP TABLE AREA.\n         LA    R8,2(0,R2)\n         L     R4,NBT\n         MVC   0(L'INDTB,R2),INDTB SET CONTROL INDICATORS.\n         AL    R2,MTCORE\n         BCTR  R2,0\n         BCTR  R2,0\n         MVC   0(L'INDTB,R2),INDTB\n         L     R2,MXNREC           FIRST MAP TABLE RECORD ADDRESS.\nOP15     LR    R1,R2\n         BAS   R10,RRD             READ MAP TABLE RECORDS.\n         B     OP16\n         BAS   R10,CLERR           I/O ERROR.\n         B     ERR12\nOP16     AH    R8,RCL              NEXT MAP TABLE RECORD ADDRESS.\n         LA    R2,1(0,R2)          NEXT RECORD ADDRESS.\n         BCT   R4,OP15             LOOP UNTIL ALL RECORDS READ.\n         OI    OPEN+1,ON           SET OPEN SWITCHES.\n         NI    READ+1,OFF\n         NI    WRITE+1,OFF\n         NI    CLOSE+1,OFF\n         NI    SEQR+1,OFF\n         NI    DELETE+1,OFF\n         NI    STATS+1,OFF\n         OI    SWBACK+1,ON         CLOSE SWITCH WRITE BACK TABLE.\n         OI    SWMT+1,ON           CLOSE SWITCH WRITE BACK MAP TABLE.\n         XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         SPACE 1\nOPX      XC    0(*-*,R2),0(R2)\n         EJECT\nREAD     B     ERR14               DATA-SET NOT OPENED.\n         OI    SWRW+1,ON           SET READ SWITCHES.\n         NI    SWWR+1,OFF\n         B     RW1\nWRITE    B     ERR14               DATA-SET NOT OPENED.\nSWWRITE  NOP   ERR22               WRITE NOT ALLOWED.\nSWCWRT   NOP   *+L'*+12\n         CLI   AUTLVL,LV5\n         BNH   ERR25\n         OI    SWCWRT+1,ON         CLOSE THIS WAY AFTER CONTROL DONE.\n         NI    SWRW+1,OFF          SET WRITE SWITCHES.\n         OI    SWWR+1,ON\nRW1      XC    NSEQ(L'NSEQ),NSEQ   RESET SEQUENTIAL READ.\n         BAS   R10,CONTROL         CONTROL IDENTIFIERS.\n         TM    0(R1),X'80'         TEST CALLING SEQUENCE.\n         BO    ERR19\n         TM    4(R1),X'80'\n         BO    ERR19\n         TM    8(R1),X'80'\n         BZ    ERR19\n         TM    7(R1),X'01'\n         BNZ   ERR19\n         LM    R7,R8,4(R1)         GET PARM. ADDRESSES.\n         LH    R1,0(R7)            GET ARGUMENT. (AUT. OR PRG. NR.)\n         LTR   R1,R1               TEST IF ARGUMENT VALID,\n         BZ    ERR19               BRANCH IF NOT.\n         BM    OVRAP               BRANCH IF .GT. AUT. AND PRG.\n         CLC   0(2,R7),NAUTT       TEST IF AUT. NR. REQUEST,\n         BL    RWDIR+L'RWDIR       BRANCH IF YES.\n         BE    ERR19               BRANCH IF INVALID.\n         CLC   0(2,R7),NPRGT       TEST IF PRG. NR. REQUEST,\n         BL    RWDIR               BRANCH IF YES.\nOVRAP    LM    R1,R3,0(R4)         GET TABLE SCAN POINTERS.\n         CLR   R1,R3               TEST IF TABLE EMPTY,\n         BH    SWRW                BRANCH IF YES.\nRW2      CLC   0(2,R1),0(R7)       SEARCH ARGUMENT.\n         BE    RW3\n         BXLE  R1,R2,RW2\nSWRW     B     ERR15               NOT FOUND.\n         ST    R1,8(R4)            SET NEW LAST ARGUMENT ADDRESS.\n         NI    SWBACK+1,OFF        OPEN SWITCH TO WRITE BACK TABLE.\nRW3      LR    R6,R1\n         SL    R1,0(R4)            COMPUTE RECORD ADDRESS.\n         SRL   R1,1\n         AL    R1,NRT\n         NI    SWWD+1,OFF          OPEN SWITCH.\n         B     SWWR\nRWDIR    BCTR  R1,0                COMPUTE RECORD ADDRESS.\n         BCTR  R1,0\n         BAS   R10,COMPUTE         GET MAP TABLE BIT ADDRESS AND MASK.\n         TM    SWWR+1,ON           TEST IF WRITE REQUEST,\n         BO    RW4                 BRANCH IF YES.\n         EX    R4,RTEST            TEST IF AUT. NR. EXIST,\n         BZ    ERR15               BRANCH IF NOT, NOT FOUND.\n         B     RW5\nRW4      EX    R4,RTEST            TEST IF AUT.NR. WAS EXISTING,\n         BO    RW5                 BRANCH IF YES, IT IS UPDATE.\n         EX    R4,WBSET            SET NEW AUT. NR.\n         NI    SWMT+1,OFF          OPEN SWITCH TO WRITE BACK MAP TABLE.\nRW5      OI    SWWD+1,ON           CLOSE SWITCH.\nSWWR     B     SWWD\n         BAS   R10,RRD\n         B     RW7\n         B     ERR16\nSWWD     B     WDIR\n         CL    R1,MXNREC           TEST DATA-SET OVERFLOW,\n         BL    RW6                 BRANCH IF NOT.\n         ST    R3,8(R4)            SET PREVIOUS LAST ARGUMENT ADDRESS.\n         B     ERR17               DATA-SET FULL.\nRW6      MVC   0(2,R6),0(R7)       MOVE ARGUMENT IN TABLE.\nWDIR     BAS   R10,RWR\n         B     RW7\n         B     ERR16\nRW7      XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         EJECT\nCLOSE    B     ERR14               DATA-SET NOT OPENED.\n         XC    NSEQ(L'NSEQ),NSEQ   RESET SEQUENTIAL READ.\n         BAS   R10,CONTROL         CONTROL IDENTIFIERS.\n         TM    0(R1),X'80'\n         BZ    ERR19               TOO MANY ARGUMENTS.\nSWBACK   B     SWMT                SKIP EVENTUALLY THE WRITE BACK TABLE\n         L     R8,0(R4)            START TABLE ADDRESS.\n         LH    R2,NAUT             FIRST TABLE RECORD ADDRESS.\n         AH    R2,NPRG\nCL1      LA    R5,3                RETRY COUNTER.\nCL2      LR    R1,R2\n         BAS   R10,RWR\n         B     CL3\n         BCT   R5,CL2              TRY AGAIN.\n         NI    SWCL+1,OFF          SET CLOSE ERROR SWITCH.\nCL3      AH    R8,RCL              NEXT TABLE RECORD ADDRESS.\n         LA    R2,1(0,R2)          NEXT RECORD ADDRESS.\n         CL    R2,NRT              TEST IF ALL TABLE RECORDS WRITEN.\n         BL    CL1                 BRANCH IF MORE.\nSWMT     B     CL7                 SKIP EVENTUALLY THE WRITE BACK TABLE\n         L     R8,MTABLE           START MAP TABLE ADDRESS.\n         LA    R8,2(0,R8)\n         L     R2,MXNREC           FIRST MAP TABLE RECORD ADDRESS.\n         L     R4,NBT\nCL4      LA    R5,3                RETRY COUNTER.\nCL5      LR    R1,R2\n         BAS   R10,RWR\n         B     CL6\n         BCT   R5,CL5              TRY AGAIN.\n         NI    SWCL+1,OFF          SET CLOSE ERROR SWITCH.\nCL6      AH    R8,RCL              NEXT TABLE RECORD ADDRESS.\n         LA    R2,1(0,R2)          NEXT RECORD ADDRESS.\n         BCT   R4,CL4              LOOP UNTIL ALL RECORDS WRITEN.\nCL7      BAS   R10,CLERR\n         L     R2,NMCORE           FREE THE TABLE AREA.\n        FREEMAIN E,LV=(2),A=ATABLE\n         L     R2,MTCORE           FREE THE MAP TABLE AREA.\n        FREEMAIN E,LV=(2),A=MTABLE\n         NI    OPEN+1,OFF          SET CLOSE SWITCHES.\n         OI    READ+1,ON\n         OI    WRITE+1,ON\n         OI    CLOSE+1,ON\n         OI    SEQR+1,ON\n         OI    DELETE+1,ON\n         OI    STATS+1,ON\nSWCL     B     *+L'*+8\n         OI    SWCL+1,ON           SET BRANCH OPERATION.\n         B     ERR18               I/O ERROR WHILE WRITING TABLE.\n         OI    SWDP+1,ON           RESET DUMP SWITCH.\n         XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         EJECT\nSEQR     B     ERR14               DATA-SET NOT OPENED.\n         BAS   R10,CONTROL         CONTROL IDENTIFIERS.\n         TM    0(R1),X'80'\n         BO    ERR19               NOT ENOUGH ARGUMENTS.\n         L     R8,4(R1)            GET PARM. ADDRESSES.\n         XR    R7,R7\n         TM    4(R1),X'80'\n         BO    SQDIR\n         TM    8(R1),X'80'\n         BZ    ERR19               TOO MANY ARGUMENTS.\n         TM    11(R1),X'01'\n         BNZ   ERR19\n         L     R7,8(R1)\nSQDIR    CLC   NSEQ(L'NSEQ),ZEROS  TEST IF FIRST CALL,\n         BNE   SQT                 BRANCH IF NOT.\n         OI    SWSQ+1,ON           CLOSE SWITCH.\n         XC    WORKD(2),WORKD      SET INITIAL AUT. NR. VALUE START.\nSQT      CLC   NSEQ(L'NSEQ),NPRGT  TEST IF AUT. OR PRG. NR. REQUEST,\n         BNL   SQ1                 BRANCH IF NOT.\nSQN      LH    R1,WORKD            INCREMENT AUT. NR.\n         LA    R1,1(R1)\n         CH    R1,NAUTT            TEST IF AUT. NR. ENDED,\n         BE    SQN+L'SQN           BRANCH IF YES.\n         CH    R1,NPRGT            TEST IF AUT. AND PRG. NR. ENDED,\n         BNL   SQE                 BRANCH IF YES.\n         STH   R1,WORKD\n         CLC   WORKD(2),NAUTT\n         BNH   *+L'*+2\n         BCTR  R1,0                COMPUTE RECORD ADDRESS.\n         BCTR  R1,0\n         BAS   R10,COMPUTE         GET MAP TABLE BIT ADDRESS AND MASK.\n         EX    R4,RTEST            TEST IF AUT. NR. EXIST,\n         BZ    SQN                 BRANCH IF NOT, GET NEXT.\n         B     SQ4\nSQE      NI    SWSQ+1,OFF          OPEN SWITCH.\n         L     R4,ATABLE           GET TABLE AREA ADDRESS.\nSQ1      LM    R1,R3,0(R4)         GET TABLE SCAN POINTERS.\n         MVC   WORKD(L'CHM1),CHM1  PREPARE TABLE SCAN.\n         XC    WORKD+4(L'WORKD-4),WORKD+4\n         CLR   R1,R3               TEST IF TABLE EMPTY,\n         BH    SQ3+L'SQ3           BRANCH IF YES.\nSQ2      CLC   0(2,R1),NSEQ        SEARCH NEXT SEQUENTIAL ARGUMENT.\n         BNH   SQ3\n         CLC   0(2,R1),WORKD\n         BNL   SQ3\n         MVC   WORKD(2),0(R1)\n         ST    R1,WORKD+4\nSQ3      BXLE  R1,R2,SQ2\n         L     R1,WORKD+4\n         LTR   R1,R1               TEST IF END-OF-FILE,\n         BNZ   SQ4                 BRANCH IF NOT.\n         XC    NSEQ(L'NSEQ),NSEQ   RESET SEQUENTIAL READ.\n         LH    R9,CHM1             SET END-OF-FILE INDICATOR.\n         B     EXIT\nSQ4      LTR   R7,R7               TEST IF ARGUMENT REQUESTED,\n         BZ    *+L'*+6             BRANCH IF NOT.\n         MVC   0(2,R7),WORKD       MOVE ARGUMENT.\n         MVC   NSEQ(2),WORKD\nSWSQ     B     SQ5\n         SL    R1,0(R4)            COMPUTE RECORD ADDRESS.\n         SRL   R1,1\n         AL    R1,NRT\nSQ5      BAS   R10,RRD\n         B     *+L'*+4\n         B     ERR16\n         XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         EJECT\nDELETE   B     ERR14               DATA-SET NOT OPENED.\nSWDELET  NOP   ERR23               DELETE NOT ALLOWED.\nSWCDLT   NOP   *+L'*+12\n         CLI   AUTLVL,LV5\n         BNH   ERR26\n         OI    SWCDLT+1,ON         CLOSE THIS WAY AFTER CONTROL DONE.\n         XC    NSEQ(L'NSEQ),NSEQ   RESET SEQUENTIAL READ.\n         BAS   R10,CONTROL         CONTROL IDENTIFIERS.\n         TM    0(R1),X'80'         TEST CALLING SEQUENCE.\n         BO    ERR19               NOT ENOUGH ARGUMENTS.\n         TM    4(R1),X'80'\n         BZ    ERR19               TOO MANY ARGUMENTS.\n         TM    7(R1),X'01'\n         BNZ   ERR19\n         L     R7,4(R1)            GET PARM. ADDRESS.\n         LH    R1,0(R7)            GET ARGUMENT.\n         LTR   R1,R1               TEST IF ARGUMENT VALID,\n         BZ    ERR19               BRANCH IF NOT.\n         LA    R8,RECAI\n         CLC   0(2,R7),NPRGT       TEST IF AUT. OR PRG. NR. REQUEST,\n         BL    DELAP               BRANCH IF YES.\n         LM    R1,R3,0(R4)         GET TABLE SCAN POINTERS.\nDL1      CLC   0(2,R1),0(R7)       SEARCH ARGUMENT.\n         BE    DL2\n         BXLE  R1,R2,DL1\n         B     ERR15               NOT FOUND.\nDL2      NI    SWBACK+1,OFF        OPEN SWITCH TO WRITE BACK TABLE.\n         OI    SWDL+1,ON           CLOSE SWITCH.\n         CLR   R1,R3               TEST IF IT IS THE LAST ARGUMENT,\n         BE    DL3                 BRANCH IF YES, DON'T MOVE IT.\n         NI    SWDL+1,OFF          OPEN SWITCH.\n         MVC   0(2,R1),0(R3)       MOVE LAST ARG. IN PLACE OF THIS.\nDL3      XC    0(2,R3),0(R3)       CLEAR LAST ARG. JUST MOVED.\n         LR    R0,R3               SET NEW LAST ARGUMENT ADDRESS.\n         SLR   R0,R2\n         ST    R0,8(R4)\n         SL    R1,0(R4)            COMPUTE RECORD ADDRESSES.\n         SRL   R1,1\n         AL    R1,NRT\nSWDL     B     DL4\n         SL    R3,0(R4)\n         SRL   R3,1\n         AL    R3,NRT\n         LR    R5,R1               SAVE RECORD ADDRESS.\n         LR    R1,R3               READ LAST ARGUMENT RECORD.\n         BAS   R10,RRD\n         B     *+L'*+4\n         B     ERR16\n         LR    R1,R5               WRITE TO REPLACE RECORD.\n         BAS   R10,RWR\n         B     *+L'*+4\n         B     ERR16\n         LR    R1,R3\n         B     DL4\nDELAP    CLC   0(2,R7),NAUTT\n         BE    ERR19               BRANCH INVALID.\n         BNH   *+L'*+2\n         BCTR  R1,0                COMPUTE RECORD ADDRESS.\n         BCTR  R1,0\n         BAS   R10,COMPUTE         GET MAP TABLE BIT ADDRESS AND MASK.\n         EX    R4,RTEST            TEST IF AUT. NR. EXIST,\n         BZ    ERR15               BRANCH IF NOT, NOT FOUND.\n         LA    R0,X'FF'\n         XR    R4,R0\n         EX    R4,DBDEL            CANCEL AUT. NR. IN MAP TABLE.\n         NI    SWMT+1,OFF          OPEN SWITCH TO WRITE BACK TABLE.\nDL4      XC    RECAI(AUTLGTH),RECAI     CLEAR DELETED RECORD.\n         BAS   R10,RWR\n         B     *+L'*+4\n         B     ERR16\n         XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         EJECT\nSTATS    B     ERR14               DATA-SET NOT OPENED.\n         BAS   R10,CONTROL         CONTROL IDENTIFIERS.\n         TM    0(R1),X'80'\n         BO    ERR19               NOT ENOUGH ARGUMENTS.\n         TM    4(R1),X'80'\n         BZ    ERR19               TOO MANY ARGUMENTS.\n         TM    7(R1),X'03'\n         BNZ   ERR19\n         L     R7,4(R1)            GET STATUS AREA ADDRESSES.\n         USING STADSECT,R7\n         LH    R1,NAUT\n         ST    R1,STANAUT\n         LH    R0,NPRG\n         ST    R0,STANPRG\n         AR    R1,R0\n         L     R0,NRTARG\n         ST    R0,STANARG\n         AR    R1,R0\n         L     R0,NRTSTA\n         ST    R0,STANATB\n         AR    R1,R0\n         L     R0,NBTSTA\n         ST    R0,STANMTB\n         AR    R1,R0\n         ST    R1,STATOTL\n         XR    R6,R6               COMPUTE NO. OF USED AUT. REC.\n         LA    R5,1\nSTATS1   LR    R1,R5\n         BCTR  R1,0\n         BAS   R10,COMPUTE\n         EX    R4,RTEST\n         BZ    *+L'*+4\n         AH    R6,CH1\n         AH    R5,CH1\n         CH    R5,NAUTT\n         BL    STATS1\n         ST    R6,STAUAUT\n         AH    R5,CH1\n         XR    R6,R6               COMPUTE NO. OF USED PRG. REC.\nSTATS2   LR    R1,R5\n         BCTR  R1,0\n         BCTR  R1,0\n         BAS   R10,COMPUTE\n         EX    R4,RTEST\n         BZ    *+L'*+4\n         AH    R6,CH1\n         AH    R5,CH1\n         CH    R5,NPRGT\n         BL    STATS2\n         ST    R6,STAUPRG\n         XR    R6,R6               COMPUTE NO. OF USED ARG. REC.\n         L     R4,ATABLE\n         LM    R1,R3,0(R4)\n         CLR   R1,R3\n         BH    STATS3\n         LR    R6,R3\n         SLR   R6,R1\n         SRL   R6,1\n         AH    R6,CH1\nSTATS3   ST    R6,STAUARG\n         MVC   STADSNM,DSNM\n         MVC   STAVLSR,VOLNUM\n         MVC   STADSOR,=CL2'DA'\n         MVC   STARECL,RCL\n         DROP  R7\n         XR    R9,R9               SET INDICATOR RESPONSE.\n         B     EXIT\n         EJECT\n*        CLOSE AND DEQUEUE DATA-SET (LINK=R10).\n         SPACE 1\nCLERR   CLOSE  DCBSR\nSWDEQ    NOPR  R10\n         LH    R2,RNMEL\n        DEQ    (QNME,RNME,(R2),SYSTEMS)\n         BR    R10\n         EJECT\n*        COMPUTE ERROR NUMBER AND RETURN.\n         SPACE 1\nERRM    NULL\n         SPACE 1\nERR1     BCTR  R9,0      ROUTINE OR DATA-SET TABLE DESTROYED.\nERR2     BCTR  R9,0      SYSACC DD-CARD IS MISSING.\nERR3     BCTR  R9,0      SYSACC UNIT IS NOT A DIRECT-ACCESS STORAGE.\nERR4     BCTR  R9,0      SYSACC JFCB READ ERROR.\nERR5     BCTR  R9,0      SYSACC DD-CARD INCORRECTLY CODED.\nERR6     BCTR  R9,0      OBTAIN ERROR WHILE PROCESSING SYSACC VOLUME.\nERR7     BCTR  R9,0      SYSACC DSCB FORMAT 1 ERROR DETECTED.\nERR8     BCTR  R9,0      SYSACC DATA BLOCK EXCEEDS TRACK CAPACITY.\nERR9     BCTR  R9,0      SYSACC DATA-SET SPACE TOO SHORT.\nERR10    BCTR  R9,0      SYSACC DATA-SET OPEN ERROR.\nERR11    BCTR  R9,0      NO STORAGE AVAILABLE TO READ DATA-SET TABLE.\nERR12    BCTR  R9,0      SYSACC DATA-SET I/O ERROR WHILE READING TABLE.\nERR13    BCTR  R9,0      SYSACC DATA-SET IS ALREADY OPENED.\nERR14    BCTR  R9,0      SYSACC DATA-SET IS NOT OPENED.\nERR15    BCTR  R9,0      READ REQUEST - ARGUMENT NOT FOUND.\nERR16    BCTR  R9,0      READ/WRITE REQUEST - I/O ERROR.\nERR17    BCTR  R9,0      SYSACC DATA-SET FULL, CANNOT ADD RECORD.\nERR18    BCTR  R9,0      SYSACC DATA-SET I/O ERROR WRITTING BACK TABLE.\nERR19    BCTR  R9,0      ROUTINE CALLING SEQUENCE OR ARGUMENT ERROR.\nERR20    BCTR  R9,0      SYSACC DATA-SET WRONGLY OR NOT CATALOGED.\nERR21    BCTR  R9,0      SYSACC DATA-SET IN USE FOR UPDATE BY SOMEBODY.\nERR22    BCTR  R9,0      ONLY OR BOTH REQUESTED - ZWRITE NOT AVAILABLE.\nERR23    BCTR  R9,0      ONLY OR BOTH REQUESTED - ZDELET NOT AVAILABLE.\nERR24    BCTR  R9,0      UNAUTHORIZED ACCESS.\nERR25    BCTR  R9,0      UNAUTHORIZED ACCESS TO ZWRITE.\nERR26    BCTR  R9,0      UNAUTHORIZED ACCESS TO ZDELET.\n         SPACE 1\nERRL     EQU   ((*-ERRM)/2)+1\n         SPACE 1\nSWDP     B     EXIT\n         LR    R1,R9               SET ERROR NUMBER AS ABEND CODE.\n        ABEND  (1),DUMP            DUMP OPTION SELECTED BY OPEN.\n         SPACE 1\nEXIT     L     R1,INDRA            SET INDICATOR RESPONSE.\n         LTR   R1,R1\n         BZ    *+L'*+4\n         ST    R9,0(R1)\n        $XRET  CC=(R9)\n         EJECT\n*        READ - WRITE ROUTINE.\n*        ---------------------\n*\n*        R1 = PHYSICAL RECORD ADDRESS.\n*        R8 = BUFFER/AREA ADDRESS.\n*        R10 = LINK REGISTER.\n*\n*        RETURN +0 = NORMAL RETURN.\n*               +4 = ERROR RETURN.\n         SPACE 1\nRRD      ST    R1,NREC\n         LA    R1,DECBSR\n        READ   (1),DI,DCBSR,(8),'S',0,NRECAD,MF=E\n         B     RCH\nRWR      ST    R1,NREC\n         LA    R1,DECBSR\n        WRITE  (1),DI,DCBSR,(8),'S',0,NRECAD,MF=E\nRCH     CHECK  DECBSR\nSWLRW    B     0(0,R10)            I/O ERROR SWITCH.\n         OI    SWLRW+1,ON          SET BRANCH OPERATION.\n        WTO    MF=(E,LWTO)\n         B     4(0,R10)\n         EJECT\n*        CONTROL INTEGRITY ROUTINE.\n*        --------------------------\n*\n*        R2 = WORK REGISTER.\n*        R4 = TABLE AREA ADDRESS AT EXIT.\n*        R10 = LINK REGISTER.\n         SPACE 1\nCONTROL  L     R2,ATABLE           GET TABLE AREA ADDRESS.\n         CLC   12(L'INDTB,R2),INDTB     CONTROL IDENTIFIERS.\n         BNE   ERR1\n         LR    R4,R2\n         AL    R2,NMCORE\n         BCTR  R2,0\n         BCTR  R2,0\n         CLC   0(L'INDTB,R2),INDTB\n         BNE   ERR1\n         L     R2,MTABLE           GET MAP TABLE AREA ADDRESS.\n         CLC   0(L'INDTB,R2),INDTB\n         BNE   ERR1\n         AL    R2,MTCORE\n         BCTR  R2,0\n         BCTR  R2,0\n         CLC   0(L'INDTB,R2),INDTB\n         BNE   ERR1\n         BR    R10                 RETURN.\n         SPACE 2\n*        COMPUTE MAP TABLE BIT ADDRESS.\n*        ------------------------------\n*\n*        R1 = AUT. NR. RECORD ADDRESS.\n*        R2 = BYTE ADDRESS -2 IN MAP TABLE.\n*        R3 = WORK REGISTER.\n*        R4 = MASK BIT.\n*        R10 = LINK REGISTER.\n         SPACE 1\nCOMPUTE  LR    R2,R1\n         SRDL  R2,3                COMPUTE BYTE DISPLACEMENT.\n         SRL   R3,29               COMPUTE MASK DISPLACEMENT.\n         AL    R2,MTABLE           COMPUTE BYTE ADDRESS IN MAP TABLE.\n         LA    R4,X'80'\n         SRL   R4,0(R3)            BUILD MASK BIT.\n         BR    R10                 RETURN.\n         EJECT\n*        ERROR ANALYSIS ROUTINE (DCBSR).\n         SPACE 1\nRWERR   SYNADAF   ACSMETH=BDAM\n         MVC   LWTO+4(72),56(R1)\n         CLI   69(R1),C'*'         TEST UNSIGNIFICANT MESSAGE,\n         BE    SYNAD2              BRANCH IF YES.\n         CLI   8(R1),C' '          TEST IF BINARY INFORMATIONS,\n         BE    SYNAD1              BRANCH IF NOT.\n         UNPK  LWTO+4(7),9(4,R1)\n         TR    LWTO+4(6),TRTAB-X'F0'\n         MVI   LWTO+10,C','\n         UNPK  LWTO+11(5),12(3,R1)\n         TR    LWTO+11(4),TRTAB-X'F0'\n         MVI   LWTO+15,C','\n         B     SYNAD2\nSYNAD1   MVC   LWTO+4(12),8(R1)    MOVE BLANKS.\nSYNAD2  SYNADRLS\n         NI    SWLRW+1,OFF         SET NOP OPERATION.\n         BR    R14                 RETURN.\n         SPACE 2\nRTEST    TM    2(R2),*-*\nWBSET    OI    2(R2),*-*\nDBDEL    NI    2(R2),*-*\n         EJECT\n*        CONSTANTS AND WORK-AREAS.\n         SPACE 1\nWORKD    DC    D'0'\nLOCAREA  DC    0D'0',XL120'00'     OVERLAP ON WORKAREA.\nWORKAREA DC    0D'0',XL140'00',XL5'00',XL3'00'\nDVTYP    DC    5F'0'\nATIOT    DC    A(*-*)\nNMCORE   DC    A(*-*)\nATABLE   DC    A(*-*)\nMTCORE   DC    A(*-*)\nMTABLE   DC    A(*-*)\nINDRA    DC    A(*-*)\nZEROS    DC    F'0'\nMXNREC   DC    F'0'\nNBT      DC    F'0'\nNBTSTA   DC    F'0'\nNRT      DC    F'0'\nNRTSTA   DC    F'0'\nNRTARG   DC    F'0'\nREQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTLVL)\nNREC     DC    0F'0',XL1'00'\nNRECAD   DC    XL3'00'\nJOBFILE  DC    0F'0',XL1'87',AL3(JF)\nJF       DC    0F'0',XL176'00'\nCVLIST  CAMLST NAME,DSNM,,LOCAREA\nDSCBAR  CAMLST SEARCH,DSNM,VOLNUM,WORKAREA\nLWTO    WTO    '                                                       1\n                                ',ROUTCDE=11,DESC=7,MF=L\nQNME     DC    CL8'EURACCNT'\nRNME     DC    CL8'........'\nDSNM     DC    CL44' '\nVOLNUM   DC    CL6' '\nRNMEL    DC    H'0'\nCH1      DC    H'1'\nCH11     DC    H'11'\nCH23     DC    H'23'\nCHM1     DC    H'-1'\nNAUT     DC    0H'0',AL2(NAUTNO)\nNAUTT    DC    0H'0',AL2(NAUTNO+1)\nNPRG     DC    0H'0',AL2(NPRGNO)\nNPRGT    DC    0H'0',AL2(NAUTNO+NPRGNO+2)\nNSEQ     DC    H'0'\nDAORG    DC    0H'0',AL1(DCBDSGDA,0)\nRCL      DC    0H'0',AL2(AUTLGTH)\nMAXERR   DC    0H'0',AL2(ERRL)\nTRTAB    DC    C'0123456789ABCDEF'\nKDUMP    DC    C'DUMP'\nKONLY    DC    C'ONLY'\nKBOTH    DC    C'BOTH'\nAUTLVL   DC    XL1'0'\n         EJECT\nDCBSR   DCB    DSORG=DA,MACRF=(RIC,WIC),BFALN=D,BFTEK=S,KEYLEN=0,      1\n               LIMCT=1,OPTCD=R,EXLST=JOBFILE,SYNAD=RWERR,DDNAME=SYSACC\n         EJECT\n        READ   DECBSR,DI,MF=L\n         SPACE 2\nRECAI    DC    (AUTLGTH)X'0'       RECORD WORK AREA.\n         SPACE 2\nINDTB    DC    XL2'0F0F'\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZPACK$": {"ttr": 27658, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943?\\x00\\x943?\\x12(\\x00\\x12\\x00\\x12\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-29T00:00:00", "modifydate": "1994-11-29T12:28:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "SYSPAJA"}, "text": "//ZPACK    JOB (........),'INSTALL  - ZPACK -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                AUTHCTL                                            *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PAJ2AS3,MBR=ZPACK\n//LNK     EXEC PAJILKR\n//SYSIN     DD *\n  ALIAS   ZREAD\n  ALIAS   ZWRITE\n  ALIAS   ZSEQR\n  ALIAS   ZDELET\n  ALIAS   ZCLOSE\n  ALIAS   ZSTATE\n  NAME    ZOPEN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZPACK@": {"ttr": 27660, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x892_\\x00\\x892_\\x13S\\x00\\x9a\\x00\\x9a\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-21T00:00:00", "modifydate": "1989-11-21T13:53:00", "lines": 154, "newlines": 154, "modlines": 0, "user": "SYSPAJA"}, "text": "1   17/11/89\n                                                      ZPACK     1/4.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       DATA-SET FULL PACKAGE         * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This is the full operational package available\n  ---------    to maintain and manage data in the accounting\n               information data-set, which is accessed through\n               a DD-card coded as below :\n\n               //SYSACC   DD  DSN=...,DISP=SHR\n                                           OLD\n\n         Note : the key (argument or index) length is assumed to\n                be two bytes (halfword) long, and may or not be\n                included in the accounting information record.\n\n  MVS/XA :     Must be AMODE and RMODE 24.\n  --------\n\n  Calling sequence : CALL ZOPEN,(A,B),VL\n  ------------------            (A)\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (zero) - the data-set is correctly opened.\n                     + (positive) - error number. The data-set is\n                                    not opened.\n\n                 B - is the address of an eventual keyword (format CL4)\n                     as below :\n                     DUMP to request a dump on error detected by the\n                          routines (SYSUDUMP or SYSABEND DD-card is\n                          needed). This option is effective until the\n                          close, and the error number is set as abend\n                          code.\n                     ONLY to bypass the exclusive ENQUEUE of the data-\n                          set when these routines are used only in read\n                          (no updates take place). So the ZWRITE and\n                          ZDELET are disabled.\n                     BOTH to have both previous actions.\n1   17/11/89\n                                                      ZPACK     2/4.\n\n  Calling sequence : CALL ZREAD,(A,B,C),VL\n  ------------------ CALL ZWRITE,(A,B,C),VL\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (zero) - the data record is correctly read or\n                                written.\n                     + (positive) - error number.\n\n                 B - is the address of the argument (format HALFWORD -\n                     H boundary).\n\n                 C - is the address of the data record area (format\n                     CL... - see macro $AIRD for length).\n\n  Calling sequence : CALL ZCLOSE,(A),VL\n  ------------------\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (zero) - the data-set is correctly closed.\n                     + (positive) - error number.\n\n  Calling sequence : CALL ZSEQR,(A,B,C),VL\n  ------------------            (A,B)\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (zero) - the data record is correctly read.\n                     + (positive) - error number.\n                     -1 (minus one) - end of data (END-OF-FILE).\n\n                 B - is the address of the data record area (format\n                     CL... - see macro $AIRD for length).\n\n                 C - is the address of the argument, optional (format\n                     HALFWORD - H boundary). When used it receives\n                     the current argument.\n1   17/11/89\n                                                      ZPACK     3/4.\n\n  Calling sequence : CALL ZDELET,(A,B),VL\n  ------------------\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (zero) - the data record is correctly deleted.\n                     + (positive) - error number.\n\n                 B - is the address of the argument (format HALFWORD -\n                     H boundary).\n\n  Calling sequence : CALL ZSTATE,(A,B),VL\n  ------------------\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary). Value is always placed\n                     in register 15 and can be :\n                     0 (zero) - the data record is correctly deleted.\n                     + (positive) - error number.\n\n                 B - is the address of the status response area (format\n                     cl... - F boundary - see macro $AIRD for length\n                     and description).\n1   17/11/89\n                                                      ZPACK     4/4.\n\n  Error number :     1 - routine or data-set table destroyed.\n  --------------     2 - SYSACC DD-card is missing.\n                     3 - SYSACC unit is not a direct-access storage.\n                     4 - SYSACC JFCB read error.\n                     5 - SYSACC DD-card incorrectly coded.\n                     6 - OBTAIN error while processing SYSACC volume.\n                     7 - SYSACC DSCB format 1 error detected.\n                     8 - SYSACC data block exceeds track capacity.\n                     9 - SYSACC data-set space too short.\n                    10 - SYSACC data-set OPEN error.\n                    11 - no storage available to read data-set table.\n                    12 - SYSACC data-set I/O error while reading table.\n                    13 - SYSACC data-set is already opened.\n                    14 - SYSACC data-set is not opened.\n                    15 - READ request - argument not found.\n                    16 - READ/WRITE request - I/O error.\n                    17 - SYSACC data-set full, cannot add record.\n                    18 - SYSACC data-set I/O error while writing table.\n                    19 - routine calling sequence or argument error.\n                    20 - SYSACC data-set wrongly or not cataloged.\n                    21 - SYSACC data-set in use for update by somebody.\n                    22 - ONLY or BOTH requested - ZWRITE not available.\n                    23 - ONLY or BOTH requested - ZDELET not available.\n                    24 - Unauthorized to access the accounting packages.\n                    25 - Unauthorized access to ZWRITE.\n                    26 - Unauthorized access to ZDELET.\n\n  Important note : when using this package, if any ZWRITE or ZDELET\n  ---------------- operations has been done, it is necessary and\n                   mandatory to terminate with the ZCLOSE, unless the\n                   Bit Map table may not reflect the updates to the\n                   data-set (see AIDINIT : data-set organization).\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZYDIAG": {"ttr": 27908, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x00\\x9f\\x00\\x90\\x00\\x9f\\x148\\x00\\xd3\\x00\\xd3\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-09T00:00:00", "modifydate": "1990-01-09T14:38:00", "lines": 211, "newlines": 211, "modlines": 0, "user": "SYSPAJA"}, "text": "AIDD     TITLE 'ACCOUNTING INFORMATION DATA-SET DIAGNOSTICS.'\nZYDIAG   START 0\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * *        DATA-SET DIAGNOSTICS         * * * * * * * * *\n* * * * * * * * *                                     * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* AUTHOR :     P.A. MOINIL                                            *\n* --------     COMPUTING CENTRE                                       *\n*              J.R.C. - ISPRA ESTABLISHMENT                           *\n*              21020 ISPRA (VA), ITALY                                *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                                                     *\n* PURPOSE :    SUPPLY DIAGNOSTICS TEXT FOR ERROR NUMBER RETURNED BY   *\n* ---------    ZPACK AND YPACK ROUTINES PACKAGES. IT IS THEN CALLER   *\n*              RESPONSABILITY TO PRINT OUT THE MESSAGE.               *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\n* CALLING SEQUENCE : CALL ZYDIAG,(A,B,C),VL\n* -------------------            (A,B)\n*                                (A)\n*\n*        WHERE : A - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F\n*                    BOUNDARY) RETURNED BY ZPACK OR YAPCK ROUTINES\n*                    PACKAGES. IF THE ADDRESS OF THIS ARGUMENT IS\n*                    SET TO ZERO IN THE PARAMETERS LIST, OR THE\n*                    PARAMETERS LIST POINTER (REGISTER 1) IS ZERO,\n*                    THE INDICATOR RESPONSE VALUE IS ASSUMED TO BE\n*                    IN THE REGISTER 0. AT EXIT OF THE ROUTINE, IF\n*                    THE ARGUMENTS B AND C ARE OMITTED, THE REGISTER\n*                    15 POINTS ON THE DIAGNOSTIC TEXT AS BELOW :\n*\n*                                   DC  AL1(L'TEXT)\n*                    R15 ---> TEXT  DC  C'0...DIAGNOSTIC...'\n*\n*                    NOTE THAT THE FIRST CHARACTER IS THE ASA CONTROL\n*                    CHARACTER 0 (ZERO) FOR DOUBLE SPACE, AND THE\n*                    LENGTH OF THE DIAGNOSTIC TEXT IS IN THE ONE\n*                    BYTE LOCATED AT THE ADDRESS MINUS ONE.\n*\n*                B - IS THE EVENTUAL ADDRESS OF AN AREA WHERE THE\n*                    DIAGNOSTIC TEXT (FORMAT CL...) IS MOVED. IF\n*                    THE C ARGUMENT IS OMITTED, THE LENGTH OF THE\n*                    DIAGNOSTIC TEXT IS PLACED IN THE ONE BYTE\n*                    LOCATED AT THE ADDRESS MINUS ONE OF B ARGUMENT\n*                    ADDRESS (ALL MESSAGES ARE LESS THAN 80 CHARACTERS\n*                    LONG). AT EXIT OF THE ROUTINE, THE REGISTER 15\n*                    IS ZERO.\n*\n*                C - RECEIVES THE LENGTH OF THE DIAGNOSTIC TEXT\n*                    (FORMAT FULLWORD - F BOUNDARY) IF SUPPLIED\n*                    (OPTIONAL ARGUMENT).\n         EJECT\n        $DEFREG\n         EJECT\n        $XENT  BASE=R12\n         SPACE 1\n         XR    R6,R6\n         XR    R7,R7\n         XR    R8,R8\n         LTR   R1,R1               CONTROL ARGUMENTS.\n         BNZ   *+L'*+6\n         LR    R6,R0\n         B     GDIAG\n         TM    3(R1),X'03'\n         BNZ   ERROR\n         L     R6,0(R1)\n         LA    R6,0(R6)\n         LTR   R6,R6\n         BNZ   *+L'*+6\n         LR    R6,R0\n         B     *+L'*+4\n         L     R6,0(R6)\n         TM    0(R1),X'80'\n         BO    GDIAG\n         L     R7,4(R1)\n         LA    R7,0(R7)\n         TM    4(R1),X'80'\n         BO    GDIAG\n         LTR   R7,R7\n         BZ    ERROR\n         L     R8,8(R1)\n         LA    R8,0(R8)\n         SPACE 1\nGDIAG    LTR   R6,R6               GET DIAGNOSTIC.\n         BNP   ERROR\n         CH    R6,MAXERR\n         BH    ERROR\n         BCTR  R6,0\n         SLL   R6,1\n         LH    R15,ERRM(R6)\n         LA    R15,ERRS(R15)\n         B     *+L'*+L'ERROR\nERROR    LA    R15,ERRORM\n         SPACE 1\n         LTR   R7,R7               RETURN DIAGNOSTIC.\n         BZ    EXIT\n         BCTR  R15,0\n         XR    R2,R2\n         IC    R2,0(R15)\n         BCTR  R2,0\n         EX    R2,MVDIAG\n         LA    R2,1(R2)\n         LTR   R8,R8\n         BZ    *+L'*+14\n         ST    R2,0(R8)\n         B     *+L'*+12\nMVDIAG   MVC   0(*-*,R7),1(R15)\n         BCTR  R7,0\n         STC   R2,0(R7)\n         XR    R15,R15\n         SPACE 1\nEXIT    $XRET  CC=(R15)\n         EJECT\n*        MESSAGES TABLE.\n         SPACE 1\nERRM    NULL\n         DC    AL2(ERR1-ERRS)\n         DC    AL2(ERR2-ERRS)\n         DC    AL2(ERR3-ERRS)\n         DC    AL2(ERR4-ERRS)\n         DC    AL2(ERR5-ERRS)\n         DC    AL2(ERR6-ERRS)\n         DC    AL2(ERR7-ERRS)\n         DC    AL2(ERR8-ERRS)\n         DC    AL2(ERR9-ERRS)\n         DC    AL2(ERR10-ERRS)\n         DC    AL2(ERR11-ERRS)\n         DC    AL2(ERR12-ERRS)\n         DC    AL2(ERR13-ERRS)\n         DC    AL2(ERR14-ERRS)\n         DC    AL2(ERR15-ERRS)\n         DC    AL2(ERR16-ERRS)\n         DC    AL2(ERR17-ERRS)\n         DC    AL2(ERR18-ERRS)\n         DC    AL2(ERR19-ERRS)\n         DC    AL2(ERR20-ERRS)\n         DC    AL2(ERR21-ERRS)\n         DC    AL2(ERR22-ERRS)\n         DC    AL2(ERR23-ERRS)\n         DC    AL2(ERR24-ERRS)\n         DC    AL2(ERR25-ERRS)\n         DC    AL2(ERR26-ERRS)\n         SPACE 1\nERRL     EQU   (*-ERRM)/2\nMAXERR   DC    0H'0',AL2(ERRL)\n         SPACE 1\n         DC    AL1(L'ERRORM)\nERRORM   DC    C'0 ZYDIAG - CALLING SEQUENCE OR ARGUMENT ERROR.'\n         SPACE 1\nERRS     EQU   *\n         DC    AL1(L'ERR1)\nERR1     DC    C'0 ROUTINE OR DATA-SET TABLE DESTROYED.'\n         DC    AL1(L'ERR2)\nERR2     DC    C'0 SYSACC DD-CARD IS MISSING.'\n         DC    AL1(L'ERR3)\nERR3     DC    C'0 SYSACC UNIT IS NOT A DIRECT-ACCESS STORAGE.'\n         DC    AL1(L'ERR4)\nERR4     DC    C'0 SYSACC JFCB READ ERROR.'\n         DC    AL1(L'ERR5)\nERR5     DC    C'0 SYSACC DD-CARD INCORRECTLY CODED.'\n         DC    AL1(L'ERR6)\nERR6     DC    C'0 OBTAIN ERROR WHILE PROCESSING SYSACC VOLUME.'\n         DC    AL1(L'ERR7)\nERR7     DC    C'0 SYSACC DSCB FORMAT 1 ERROR DETECTED.'\n         DC    AL1(L'ERR8)\nERR8     DC    C'0 SYSACC DATA BLOCK EXCEEDS TRACK CAPACITY.'\n         DC    AL1(L'ERR9)\nERR9     DC    C'0 SYSACC DATA-SET SPACE TOO SHORT.'\n         DC    AL1(L'ERR10)\nERR10    DC    C'0 SYSACC DATA-SET OPEN ERROR.'\n         DC    AL1(L'ERR11)\nERR11    DC    C'0 NO STORAGE AVAILABLE TO READ DATA-SET TABLE.'\n         DC    AL1(L'ERR12)\nERR12    DC    C'0 SYSACC DATA-SET I/O ERROR WHILE READING TABLE.'\n         DC    AL1(L'ERR13)\nERR13    DC    C'0 SYSACC DATA-SET IS ALREADY OPENED.'\n         DC    AL1(L'ERR14)\nERR14    DC    C'0 SYSACC DATA-SET IS NOT OPENED.'\n         DC    AL1(L'ERR15)\nERR15    DC    C'0 READ REQUEST - ARGUMENT NOT FOUND.'\n         DC    AL1(L'ERR16)\nERR16    DC    C'0 READ/WRITE REQUEST - I/O ERROR.'\n         DC    AL1(L'ERR17)\nERR17    DC    C'0 SYSACC DATA-SET FULL, CANNOT ADD RECORD.'\n         DC    AL1(L'ERR18)\nERR18    DC    C'0 SYSACC DATA-SET I/O ERROR WHILE WRITING TABLE.'\n         DC    AL1(L'ERR19)\nERR19    DC    C'0 ROUTINE CALLING SEQUENCE OR ARGUMENT ERROR.'\n         DC    AL1(L'ERR20)\nERR20    DC    C'0 SYSACC DATA-SET WRONGLY OR NOT CATALOGED.'\n         DC    AL1(L'ERR21)\nERR21    DC    C'0 SYSACC DATA-SET IN USE FOR UPDATE BY SOMEBODY.'\n         DC    AL1(L'ERR22)\nERR22    DC    C'0 ONLY OR BOTH REQUESTED - ZWRITE NOT AVAILABLE.'\n         DC    AL1(L'ERR23)\nERR23    DC    C'0 ONLY OR BOTH REQUESTED - ZDELET NOT AVAILABLE.'\n         DC    AL1(L'ERR24)\nERR24    DC    C'0 UNAUTHORIZED TO ACCESS THE ACCOUNTING PACKAGES.'\n         DC    AL1(L'ERR25)\nERR25    DC    C'0 UNAUTHORIZED TO ACCESS THE ZWRITE FUNCTION.'\n         DC    AL1(L'ERR26)\nERR26    DC    C'0 UNAUTHORIZED TO ACCESS THE ZDELET FUNCTION.'\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZYDIAG$": {"ttr": 27913, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943?\\x00\\x943?\\x12(\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-11-29T00:00:00", "modifydate": "1994-11-29T12:28:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SYSPAJA"}, "text": "//ZYDIAG   JOB (........),'INSTALL  - ZYDIAG -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=800K,TIME=1\n/*JOBPARM L=2\n//ASS     EXEC PAJ2AS2,MBR=ZYDIAG\n//LNK     EXEC PAJILKR\n//SYSIN     DD *\n  ENTRY   ZYDIAG\n  NAME    ZYDIAG(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZYDIAG@": {"ttr": 27915, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x892_\\x00\\x892_\\x13S\\x001\\x001\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-21T00:00:00", "modifydate": "1989-11-21T13:53:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "SYSPAJA"}, "text": "1   23/09/85\n                                                      ZYDIAG    1/1.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *        DATA-SET DIAGNOSTICS         * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    Supply diagnostics text for error number returned by\n  ---------    ZPACK and YPACK routines packages. It is then caller\n               responsability to print out the message.\n\n  Calling sequence : CALL ZYDIAG,(A,B,C),VL\n  -------------------            (A,B)\n                                 (A)\n\n         Where : A - is the address of the indicator response (format\n                     FULLWORD - F boundary) returned by ZPACK or YPACK\n                     routines packages. If the address of this argument\n                     is set to zero in the parameters list, or the\n                     parameters list pointer (register 1) is zero,\n                     the indicator response value is assumed to be\n                     in the register 0. At exit of the routine, if\n                     the arguments B and C are omitted, the register\n                     15 points on the diagnostic text as below :\n\n                                    DC  AL1(L'TEXT)\n                     R15 ---> TEXT  DC  C'0...diagnostic...'\n\n                     Note that the first character is the ASA control\n                     character 0 (zero) for double space, and the\n                     length of the diagnostic text is in the one\n                     byte located at the address minus one.\n\n                 B - is the eventual address of an area where the\n                     diagnostic text (format CL...) is moved. If\n                     the C argument is omitted, the length of the\n                     diagnostic text is placed in the one byte\n                     located at the address minus one of B argument\n                     address (all messages are less than 80 characters\n                     long). At exit of the routine, the register 15\n                     is zero.\n\n                 C - receives the length of the diagnostic text\n                     (format FULLWORD - F boundary) if supplied\n                     (optional argument).\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT456/FILE456.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT456", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}