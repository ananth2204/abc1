{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011124000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 940576, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 18, "INMDSNAM": "CBT.V500.FILE042.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 940576, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 940576, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE042.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x11\\x05'", "DS1TRBAL": "b'\\x84\\x04'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00S\\x00\\x00\\x00T\\x00\\x02\\x00\\x12'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00#\\x01 )?\\x01 )?\\x105\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-10-19T00:00:00", "modifydate": "2020-10-19T10:35:23", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  042\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE042\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 75 MEMBERS COUNTED; CUMULATIVE SIZE IS 8,502 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/19/20    10:35:23    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$CDPARMS": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x01 (\\x8f\\x01 )\\x0f\\t\\x18\\x00@\\x00C\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-16T09:18:01", "lines": 64, "newlines": 67, "modlines": 0, "user": "BRADLEY"}, "text": "\nThe whole system is parameter driven.\n\nParameters are set in CDPARMS member placed in a dataset as detailed in\nmember $INST in this library.\n\nCDPARMS consist of the following:-\n\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Parameters used by this LPAR for C:D execution.           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//* Next parameter defines C:D load library.\n//*\n//       SET      CDLOAD=SYS1.CDI.SDGALINK\n//*\n//* Next parameter prefix for temporary files.\n//*\n//       SET      DELDSN=MKTTEMP\n//*\n//* Next parameters define ESDS names for statistics files.\n//* Add one parameter for each file.\n//*\n//* We have seven files so we code seven parameters as follows:-\n//*\n//       SET      ESDS01=MKTSTAT.ESDS01\n//       SET      ESDS02=MKTSTAT.ESDS02\n//       SET      ESDS03=MKTSTAT.ESDS03\n//       SET      ESDS04=MKTSTAT.ESDS04\n//       SET      ESDS05=MKTSTAT.ESDS05\n//       SET      ESDS06=MKTSTAT.ESDS06\n//       SET      ESDS07=MKTSTAT.ESDS07\n//*\n//* Next parameter defines prefix for statistic archive files,\n//*\n//       SET      HLQGDG=MKTSTAT.ARCH\n//*\n//* Next parameter defines prefix for restored archive files.\n//*\n//       SET      HLQREST=MKTREST\n//*\n//* Next parameter defines prefix for report files.\n//*\n//       SET      HLQSTAT=MKTSTAT\n//*\n//* Next parameter defines name of C:D message file.\n//*\n//       SET      MSG=MKTA.COND.MSG\n//*\n//* Next parameter defines name of C:D netmap file.\n//*\n//       SET      NETMAP=MKTA.COND.NETMAP\n//*\n//* Next parameter defines name of C:D process file.\n//*\n//       SET      PROC=MKTA.COND.PROCESS\n//*\n//* Next parameter defines name of statistics routine CNTL which\n//* should be the dataset where all of the STA* jobs reside.\n//*\n     SET      STACNTL=MKTA.COND.STATS.CNTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$CONTACT": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00C\\x01 )\\x0f\\x01 )\\x0f\\t\\x14\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:14:43", "lines": 8, "newlines": 8, "modlines": 0, "user": "BRADLEY"}, "text": "\nIf anyone has any requirements or questions about the members in this\nCBT file please email me at:-\n\n    john.bradley@meerkatcomputerservices.com\n\nI will respond in due course.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00H\\x01 (\\x8f\\x01 )\\x0f\\t\\x19\\x00g\\x00|\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-16T09:19:48", "lines": 103, "newlines": 124, "modlines": 0, "user": "BRADLEY"}, "text": "The following notes various aspects of the processing and details of where\ninformation is documented.\n\nManuals.\n--------\n\nThe manual C:D Administration Guide in Chapter 6 on page 347 has details of\nall record types and associated mapping macros.\n\nSDGAMAC dataset contains relevant macros.\n\nYou can also find details in that section of STATISTICS EXIT and various\nparameters, etc.\n\nDatasets Created by Jobs in this Library.\n-------- ------- -- ---- -- ---- --------\n\nThe following is a list of all datasets created by jobs in this library.\nThese are reports produced for review or manipulation.\n\nNote HLQSTAT is set in CDPARMS. Details on CDPARMS can be found in member\n$CDPARMS in this library.\n\nJob - STADAILY\n\n&HLQSTAT.BYTES\n&HLQSTAT.CSVFILE\n&HLQSTAT.DAILY.REPORT.DYYMMDD\n&HLQSTAT.DAILY.STATS.TOT.DYYMMDD\n\n-----\n\nJob - STAERRM\n\n&HLQSTAT.ERPT1.DYYMMDD\n&HLQSTAT.ERPT2.DYYMMDD\n&HLQSTAT.ERPT3.DYYMMDD\n\n-----\n\nJob - STAHOURS\n\n&HLQSTAT.HOURS.DYYMMDD\n\n-----\n\nJob - STAHOUR2\n\n&HLQSTAT.CDES.DYYMMDD\n&HLQSTAT.CDESTOT.DYYMMDD\n\n-----\n\nJob - STAHOUR3\n\n&HLQSTAT.HOURBYTE.CSV.DYYMMDD\n&HLQSTAT.HOURBYTE.DYYMMDD\n\n-----\n\nJob - STAHWP\n\nDoes not create a dataset but rather sends this message to console:-\n\nSVIT001I SESSION HIGH WATER MARK OF: 006 REACHED AT: 13:35:00 ON: 2020.287\n\n-----\n\nJob - STALNGF\n\n&HLQSTAT.LFRPT1.DYYMMDD\n\n-----\n\nJob - STANMRPT\n\n&HLQSTAT.NMRPT1.DYYMMDD\n\n-----\n\nJob - STAPSRPT\n\n&HLQSTAT.PSRPT1.D201014\n&HLQSTAT.PSRPT2.D201014\n&HLQSTAT.PSRPT3.D201014\n\n-----\n\nJob - STAPTRPT\n\n&HLQSTAT.PTRPT1.D201014\n&HLQSTAT.PTRPT2.D201014\n&HLQSTAT.PTRPT3.D201014\n\n-----\n\nJob - STAPTRP2\n\n&HLQSTAT.PTRPT4.D201014\n&HLQSTAT.PTRPT5.D201014\n&HLQSTAT.PTRPT6.D201014\n\n-----\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$INDEX": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00F\\x01 (\\x7f\\x01 )\\x0f\\t%\\x00\\x9b\\x00\\t\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2020-10-13T00:00:00", "modifydate": "2020-10-16T09:25:46", "lines": 155, "newlines": 9, "modlines": 0, "user": "BRADLEY"}, "text": " Member Name       Purpose\n -----------       -------\n\n\n $CDPARMS          Details how to setup CDPARMS.\n\n $CONTACT          Contact information for John Bradley.\n\n $DOC              Details about macros, datasets, etc.\n\n $INDEX            This member.\n\n $INST             Installation instructions.\n\n $REXXUPD          REXX exec to update STA members with new JCL card.\n                   See comments in the EXEC on how to set up prior to execution.\n\n $WORD             Instructions on receiving WORDST* documents to a PC.\n\n CDCOMMS           Installation member see $INST.\n\n CDDIAG            Installation member see $INST.\n\n CDJCL             Installation member see $INST.\n\n CDPARMS           Installation member see $INST.\n\n COBATCH           Comments member for JCL.\n\n COICE             Comments member for JCL.\n\n COMAIN            Comments member for JCL. Main header.\n\n COSRTCNT          Comments member for JCL.\n\n COTIME            Comments member for JCL.\n\n DGAXSMF           Source code for statistics SMF exit.\n\n DGAXSMFA          Job to assemble and link edit DGAXSMF program.\n\n PDF*              Number of articles written about C:D statistics by\n                   John Bradley. See $PDF member on how to download to a\n                   PC.\n\n STAARC1           Restore statistics files and interrogate them.\n                   Job is complete. See comments for amendments\n                   before running.\n\n STACT             Extract raw CT type records to flat file.\n\n STACTEQ0          Extract raw CT type records to flat file when CC=0.\n\n STACTGT0          Extract raw CT type records to flat file when CC>0.\n\n STACTERR          Extract CT records and report on errors. Same as STAERRM.\n\n STADAILY          Daily reports extract. See comments for what gets\n                   extracted.\n\n STADEL            Delete any restored archive files.\n                   Schedule this one so old files do not get left or\n                   assign relevant management class so HSM archives files.\n\n STADIAG           List statistics of all current archive files for\n                   tuning purposes.\n\n STAERRM           Produce error message reports for CT records.\n\n STAESDS           Manually define ESDS dataset for restore of an\n                   archived statistics file.\n\n STAFI             Extract FI records to a flat file.\n\n STAHDR            Header file for use in JCL.\n\n STAHOURS          Report on all copies over one day and produce\n                   transfer statistics.\n\n STAHOUR2          Report on copies for a day and produce totals and detail\n                   for successful and unsuccessful transfers.\n\n STAHOUR3          Report on copies for a day and produce totals and detail\n                   for successful and unsuccessful transfers.\n\n STAHW             Extract HW records to flat file.\n\n STAHW01           Report on ACTIVE and ALL file pairs.\n\n STAHW02           Report on ACTIVE file pair.\n\n STAHW03           Report on all file pairs.\n\n STAHW04           Report on ACTIVE file pair using DISPLAY ICETOOL operator.\n\n STAHWP            Report of session high water mark.\n\n STAHWRPT          Extract and report on HW and H2 records using supplied\n                   commands.\n\n STAINDEX          Brief order of processing to manually restore stats file.\n\n STAINQ            Issue INQ STATDIR command.\n\n STAINQ2           Issue INQ STATISTICS command.\n\n STAKEY            Job to build KSDS from restored ESDS.\n\n STAKSDS           Job to manually define KSDS for use by STAKEY.\n\n STALNGF           Extract FI records and produce long file name report.\n\n STANM             Extract NM records to a flat file.\n\n STANMRPT          Extract NM records to produce report.\n\n STANMU            Extract UM records to a flat file.\n\n STAPS             Extract PS records to a flat file.\n\n STAPSRPT          Extract PS records to produce reports.\n\n STAPT             Extract PT records to a flat file.\n\n STAPTRPT          Extract PT records where CC>0 and produce reports.\n\n STAPTRP2          Extract PT records where CC=0 and produce reports.\n\n STARE             Extract RE records to a flat file.\n\n STARECS           Skeleton extract job for records.\n\n STAREPRO          Skeleton of REPRO archived GDG into ESDS allocated by\n                   STAESDS.\n\n STARJ             Extract RJ records to a flat file.\n\n STARO             Extract RO records to a flat file.\n\n STASMF01          Report on Type 133 records using supplied REXX.\n\n STASMF02          Report on Type 133 records using supplied REXX and\n                   create comma delimited CSV file.\n\n STASMF03          Extract type 232 SMF records written by DGAXSMF.\n\n STASMF04          Report on Type 133 records using DFSORT to produce\n                   report.\n\n STASS             Example of extracting records from restored archive file.\n\n STASW             Manually switch online statistics files in batch.\n\n STAS2             Select S2 statistics files for performance data.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$INST": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x00\\x18\\x01 (\\x8f\\x01 )\\x0f\\t'\\x00H\\x00A\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-16T09:27:18", "lines": 72, "newlines": 65, "modlines": 0, "user": "BRADLEY"}, "text": "\nBefore you can execute the various jobs certain datasets have to be created\nto contain various system drivers.\n\nThe datasets that are required are:-\n\n &HLQSTAT.ARCH.HDR\n\n This dataset is used to perform C:D signon in certain processes.\n The dataset should be allocated with the following attributes:-\n\n RECFM    - FB\n DSORG    - PS\n LRECL    - 80\n BLKSIZE  - 0\n SPACE    - TRK 1\n\n Once created copy the following two records into the dataset:-\n\n  SIGNON\n  SELECT STATISTICS WHERE (       -\n\n-----\n\n &HLQSTAT.ARCH.TRL\n\n This dataset is used to perform C:D signoff in certain processes.\n The dataset should be allocated with the following attributes:-\n\n RECFM    - FB\n DSORG    - PS\n LRECL    - 80\n BLKSIZE  - 0\n SPACE    - TRK 1\n\n Once created copy the following two records into the dataset:-\n\n  SIGNOFF\n\n-----\n\n &HLQSTAT.PROCLIB\n\n This dataset is used to contain various JCL members and parameters\n used to drive the system.\n\n The dataset should be allocated with the following attributes:-\n\n RECFM    - FB\n DSORG    - PO\n LRECL    - 80\n BLKSIZE  - 0\n SPACE    - TRK 5,1\n DIRBLKS  - 90\n\n Once created copy from the dataset you are in now to the PROCLIB dataset:-\n\n   CDCOMMS\n   CDDIAG\n   CDJCL\n   CDPARMS\n\n After copying these members you will need to amend CDPARMS as\n directed in the $CDPARMS member.\n\n Finally all JCLLIB statements in jobs contained in this dataset will\n need updating with the name of the dataset you have created that\n contains CDCOMMS, CDDIAG, CDJCL and CDPARMS members.\n\n To change these members execute $REXXUPD after amending it as directed\n in the comments in the REXX exec.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$REXXUPD": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\"\\x01 (\\x8f\\x01 )\\x0f\\t@\\x00\\x9e\\x00\\x98\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-16T09:40:22", "lines": 158, "newlines": 152, "modlines": 0, "user": "BRADLEY"}, "text": "/* REXX */\n\n/*\n  Amend before execution by changing:-\n\n  ds='' to ds='name of pds where this exec resides'\n  ct.1='' to cf.1='sname where I have created CDPARMS'\n\n  So for example if STA* members are in JXB.CNTL and $REXXUPD is in\n  JXB.CNTL and your CDPARMS reside in MY.PROCLIB you would code:-\n\n  ds='JXB.CNTL'\n  ct.1='MY.PROCLIB'\n\n*/\n\n ds=''                                 /* Input Dataset Name.       */\n xdd=''                                /* Nullify xdd variable.     */\n flag=''                               /* Nullify flag variable.    */\n chgcnt=0                              /* Set counter.              */\n\n cf.1='SUPPLIED.PROCLIB'               /* Change from this...       */\n cf.0=1                                /* Set index to 1.           */\n ct.1=''       '                       /* Change to this....        */\n\n/* Check if dataset is ok and if not then call XIT routine\n   passing dataset name and message from SYSDSN.\n*/\n\n if sysdsn(\"'\"ds\"'\")<>'OK' then call xit ds sysdsn(\"'\"dsq\"'\")\n\n zz=outtrap('mls.')                    /* Set outtrap mls. stem     */\n\n/*\n LISTDS all members from supplied dataset.\n*/\n\n \"listds '\"ds\"' members\"               /* Issue TSO LISTDS          */\n zz=outtrap('off')                     /* Turn OUTRAP off.          */\n\n/*\n  Set alp variable to RTDDN(XDD) which is a parameter of the\n  UNIX BPXWDYN routine.\n*/\n\n alp='rtddn(xdd)'\n\n/*\n We start to loop through messages returned from LISTDS. We start at\n record 7 which is the first member name. Lines 1 to 6 contain\n dataset header information.\n*/\n\n   flag = 0\n do mln=7 to mls.0                     /* Begin loop from 7.        */\n   cn=0                                /* Set cn to 0.              */\n   mbr=strip(mls.mln)                  /* Remove any spaces.        */\n\n/*\n Only process members that start with STA for this dataset.\n*/\n\n   if substr(mbr,1,3) = 'STA' then\n    do\n\n/*\n Call BPXWDYN UNIX dynamic allocation routine. ALP requests\n RTDDN(XDD) that XDD contains the returned dynamic allocation dataset\n name.\n*/\n\n     cc=Bpxwdyn('alloc da('ds'('mbr')) shr' alp)\n\n/*\n If we get error call XIT and pass info on error.\n*/\n\n     if cc<>0 then call xit 'alloc' ds 'rc' cc\n\n/*\n Set alp to the dynamic ddname for processing.\n Then read member into stack.\n*/\n\n     alp='dd('xdd') reuse'\n\n     data. = ''\n     \"execio * diskr\" xdd \"(stem data. finis)\"\n\n/* Check read was good and if not go to XIT and issue error. */\n\n     if rc<>0 then call xit 'read' ds'('mbr')' 'rc' rc\n     do di=1 to data.0                 /* Read each line of the mbr. */\n      do cfn=1 to cf.0                 /* Start loop.               */\n       cf=cf.cfn                       /* Set change from.          */\n       ct=ct.cfn                       /* Set change to.            */\n\n/* Get value to change. */\n\n       parse value ' 'strip(data.di,'t')' ' with front (cf) back\n\n/* If back is 0 then get next one. */\n\n       if length(back)=0 then iterate\n\n /* Tell user it looke dlike this... */\n\n       say 'BPDS002I: ' mbr 'before:' data.di\n       data.di=substr(front''ct''back,2)\n\n /* Then tell them it will look like this... */\n\n       say 'BPDS003I: ' mbr 'after: ' data.di\n       cn=cn+1                         /* Bump line count.           */\n      end                              /* Loop round.                */\n    end /* End loop.                  */\n\n   if cn=0 then iterate                /* Count finished iterate.    */\n\n/* Update changed member.                                            */\n\n   \"execio * diskw\" xdd \"(stem data. finis)\"\n\n/* If write fails go off and tell user.                             */\n\n   If rc<>0 then call xit 'write' ds'('mbr')' 'rc' rc\n\n/* If write ok then issue message saying changed.                   */\n\n   say 'BPDS004I: Changes completed for member  - ' mbr\n   chgcnt = chgcnt + 1\n   flag = 1\n\n/* Next we update ISP stats.                                       */\n\n   address ispexec \"lminit dataid(did) dataset('\"ds\"') enq(shr)\"\n\n   if rc<>0 then call xit 'lminit rc' rc\n\n   address ispexec \"lmmstats dataid(\"did\") member(\"mbr\")\"\n\n   if rc<>0 then call xit 'LMMStats rc' rc zerrlm\n\n   address ispexec \"lmfree dataid(\"did\")\"\n end\nend\n\n If flag = 0 then\n  Call xit 'BPDS001I - No change made no strings found'\n else\n  Call xit 'BPDS999I - Changes complete, changes made '||chgcnt\n\nexit 0\n\nXIT:\n if arg(1)<>'' then say arg(1)\n if xdd<>'' then zz=Bpxwdyn('free dd('xdd')')\n exit word(arg(2) 0,1)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$WORD": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x01 )\\x0f\\x01 )\\x0f\\t&\\x00\\n\\x00\\n\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:26:20", "lines": 10, "newlines": 10, "modlines": 0, "user": "BRADLEY"}, "text": "Members in this dataset prefixed WORDST are OpenOffice Word documents that\ndetail various facts about C:D statistics.\n\nThey were originally written for our BLOG at Meerkat Computer Services Limited.\n\nThe members can be downloaded using IND\u00a2FILE or FTP in binary format and then\nopened as a normal Word document on the P.C.\n\nI included them here as I thought they gave a good insight as to how C:D\nstatistics work.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE042": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x16\\x01 )?\\x01 )?\\x105\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-10-19T00:00:00", "modifydate": "2020-10-19T10:35:16", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 042 is from John Bradley and contains set of reporting    *   FILE 042\n//*           utilities and general manipulation code for Connect   *   FILE 042\n//*           Direct z/OS Statistics File contents.                 *   FILE 042\n//*                                                                 *   FILE 042\n//*           keywords:  Connect:Direct                             *   FILE 042\n//*                                                                 *   FILE 042\n//*           email:  john.bradley@meerkatcomputerservices.com      *   FILE 042\n//*                                                                 *   FILE 042\n//* The contents of the file were created for two purposes.         *   FILE 042\n//*                                                                 *   FILE 042\n//* 1. SMF exit was developed so statistics records could be        *   FILE 042\n//*    directed to SMF so all required records could be maintained  *   FILE 042\n//*    in similar manner to our other SMF records.                  *   FILE 042\n//*                                                                 *   FILE 042\n//* 2. We found many of our customers did not have their            *   FILE 042\n//*    statistics files and recording set up adequately and they    *   FILE 042\n//*    had no insight as to what Connect Direct itself was doing    *   FILE 042\n//*    in writing statistics and what transfers and data were       *   FILE 042\n//*    being undertaken each day.                                   *   FILE 042\n//*                                                                 *   FILE 042\n//*    I developed the various jobs and reports to allow            *   FILE 042\n//*    customers to adhoc monitor and manage statistics to          *   FILE 042\n//*    assist in performance and problem determination, to allow    *   FILE 042\n//*    pro-active performance monitoring of the statistics files,   *   FILE 042\n//*    statistics creation and general product performance and      *   FILE 042\n//*    to schedule jobs to produce KPIs for management.             *   FILE 042\n//*                                                                 *   FILE 042\n//*    As well as the above there are some very good examples of    *   FILE 042\n//*    how to use DFSORT and ICETOOL to avoid programming in REXX,  *   FILE 042\n//*    Assembler or a High Level Lanaguage for report production.   *   FILE 042\n//*                                                                 *   FILE 042\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CDCOMMS": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x01 (\\x8f\\x01 (\\x8f\\x107\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-14T10:37:32", "lines": 8, "newlines": 8, "modlines": 0, "user": "BRADLEY"}, "text": "//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Procedure to execute DGASSTAT utility.                    *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1    EXEC     PGM=DGASSTAT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CDDIAG": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00D\\x01 (\\x8f\\x01 (\\x8f\\x107\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-14T10:37:44", "lines": 12, "newlines": 12, "modlines": 0, "user": "BRADLEY"}, "text": "//CDDIAG   PROC\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Procedure to execute DGASSTAT utility.                    *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1    EXEC     PGM=DGASSTAT\n//STEPLIB  DD       DSN=&CDLOAD,DISP=SHR\n//SYSOUT   DD       SYSOUT=*\n//ESDS     DD       DSN=&ESDS,DISP=SHR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CDJCL": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00W\\x01 (\\x8f\\x01 (\\x8f\\x107\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-14T10:37:57", "lines": 15, "newlines": 15, "modlines": 0, "user": "BRADLEY"}, "text": "//CDJCL       PROC\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Procedure to execute C:D in batch.                        *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//DMBATCH     EXEC  PGM=DMBATCH,REGION=1024K,PARM=(YYLLYNN)\n//DMNETMAP    DD    DSN=&NETMAP,DISP=SHR\n//DMPUBLIB    DD    DSN=&PROC,DISP=SHR\n//DMMSGFIL    DD    DSN=&MSG,DISP=SHR\n//DMPRINT     DD    SYSOUT=*,DCB=(RECFM=FA,LRECL=133,BUFNO=0)\n//SYSPRINT    DD    SYSOUT=*,DCB=(RECFM=FA,LRECL=133,BUFNO=0)\n//SYSIN       DD    *,SYMBOLS=JCLONLY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CDPARMS": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01 (\\x8f\\x01 (\\x8f\\x109\\x005\\x005\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-14T10:39:31", "lines": 53, "newlines": 53, "modlines": 0, "user": "BRADLEY"}, "text": "//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Parameters used by this LPAR for C:D execution.           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//* Next parameter defines C:D load library.\n//*\n//       SET      CDLOAD=SYS1.CDI.SDGALINK\n//*\n//* Next parameter prefix for temporary files.\n//*\n//       SET      DELDSN=MKTTEMP\n//*\n//* Next parameters define ESDS names for statistics files.\n//* Add one parameter for each file.\n//*\n//       SET      ESDS01=MKTSTAT.ESDS01\n//       SET      ESDS02=MKTSTAT.ESDS02\n//       SET      ESDS03=MKTSTAT.ESDS03\n//       SET      ESDS04=MKTSTAT.ESDS04\n//       SET      ESDS05=MKTSTAT.ESDS05\n//       SET      ESDS06=MKTSTAT.ESDS06\n//       SET      ESDS07=MKTSTAT.ESDS07\n//*\n//* Next parameter defines prefix for statistic archive files,\n//*\n//       SET      HLQGDG=MKTSTAT.ARCH\n//*\n//* Next parameter defines prefix for restored archive files.\n//*\n//       SET      HLQREST=MKTREST\n//*\n//* Next parameter defines prefix for report files.\n//*\n//       SET      HLQSTAT=MKTSTAT\n//*\n//* Next parameter defines name of C:D message file.\n//*\n//       SET      MSG=MKTA.COND.MSG\n//*\n//* Next parameter defines name of C:D netmap file.\n//*\n//       SET      NETMAP=MKTA.COND.NETMAP\n//*\n//* Next parameter defines name of C:D process file.\n//*\n//       SET      PROC=MKTA.COND.PROCESS\n//*\n//* Next parameter defines name of statistics routine CNTL\n//*\n     SET      STACNTL=MKTA.COND.STATS.CNTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COBATCH": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01 (\\x0f\\x01 (\\x0f\\x14S\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-06T00:00:00", "modifydate": "2020-10-06T14:53:21", "lines": 8, "newlines": 8, "modlines": 0, "user": "BRADLEY"}, "text": "//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract copy termination records  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COICE": {"ttr": 786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01 (\\x0f\\x01 (\\x0f\\x14S\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-06T00:00:00", "modifydate": "2020-10-06T14:53:45", "lines": 8, "newlines": 8, "modlines": 0, "user": "BRADLEY"}, "text": "//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute ICETOOL to format the records into various        *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMAIN": {"ttr": 788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x07\\x01 '\\x9f\\x01 (\\x0f\\x13\\x01\\x00\\x0f\\x00\\x10\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-05T00:00:00", "modifydate": "2020-10-06T13:01:07", "lines": 15, "newlines": 16, "modlines": 0, "user": "BRADLEY"}, "text": "//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: JOBNAME.                                        *\n//*      *                                                           *\n//*      * Purpose:                                                  *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COSRTCNT": {"ttr": 790, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01 (\\x0f\\x01 (\\x0f\\x14S\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-06T00:00:00", "modifydate": "2020-10-06T14:53:56", "lines": 8, "newlines": 8, "modlines": 0, "user": "BRADLEY"}, "text": "//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements used to perform a variety of tasks    *\n//*      * on input records.                                         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COTIME": {"ttr": 792, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x001\\x01 (\\x0f\\x01 (\\x7f\\x13\\x18\\x00=\\x00;\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-06T00:00:00", "modifydate": "2020-10-13T13:18:31", "lines": 61, "newlines": 59, "modlines": 0, "user": "BRADLEY"}, "text": "*\n* Copy records in date and time sorted order and manipulate and\n* extract data we require.\n*\n  OPTION COPY,VLSHRT\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n* Our output record will look like this:-\n*\n* Columns     Content\n*\n* 1-4         Date in packed decimal format.\n* 5-8         Unused\n* 9-16        Time in zoned decimal format.\n* 17-20       Process name in character format.\n* 25-28       Process number in binary format.\n* 29-44       C:D node name in character format.\n* 45-52       Bytes sent in binary format.\n* 53-60       Bytes recv in binary format.\n* 61-64       Condition code in binary format.\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DGAXSMF": {"ttr": 794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x01 )\\x0f\\x01 )\\x0f\\x12\\x07\\x00\\xf9\\x00\\xf9\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T12:07:32", "lines": 249, "newlines": 249, "modlines": 0, "user": "BRADLEY"}, "text": "         TITLE     'Meerkat Stats Exit'\n*\nDMGSMF   START     ,\n*\n*        *************************************************************\n*        *                                                           *\n*        * Description.                                              *\n*        * ------------                                              *\n*        *                                                           *\n*        * Program is modification for Meerkat Computer Services     *\n*        * Limited of supplied DGAXSMF to facilitate writing all     *\n*        * Connect Direct statistics records to SMF using supplied   *\n*        * parameters to produce user record type and to enhance     *\n*        * supplied routine.                                         *\n*        *                                                           *\n*        * Difference to supplied routine are unique record number   *\n*        * can be supplied and exclusion table means records can     *\n*        * be excluded from being written if required.               *\n*        *                                                           *\n*        * Date Written: Summer 2020.                                *\n*        *                                                           *\n*        * Programmer:   John Bradley.                               *\n*        *                                                           *\n*        * Attributes:   RENT, REUS, RELOC, REFR.                    *\n*        *                                                           *\n*        * Register Information.                                     *\n*        * -------- ------------                                     *\n*        *                                                           *\n*        * Register 1 points to a 4 byte address for the following   *\n*        * parameter: Connect:Direct Statistics Record.              *\n*        *                                                           *\n*        *       R0     =     WORK REGISTER.                         *\n*        *       R1     =     RDW POINTER (SMF RECORD)               *\n*        *       R2     =     HOLD REGISTER FOR STATS REC ADDRESS    *\n*        *       R3     =     DSECT BASE. FROM GETMAIN               *\n*        *       R4     =     GETMAIN WORK AREA                      *\n*        *       R5     =     WORK REGISTER.                         *\n*        *       R6     =     WORK REGISTER.                         *\n*        *       R7     =     WORK REGISTER.                         *\n*        *       R8     =     WORK REGISTER.                         *\n*        *       R9     =     WORK REGISTER.                         *\n*        *       R10    =     WORK REGISTER.                         *\n*        *       R11    =     TCA                                    *\n*        *       R12    =     BASE REGISTER.                         *\n*        *       R13    =     SAVEAREA POINTER.                      *\n*        *       R14    =     RETURN REGISTER.                       *\n*        *       R15    =     ENTRY POINT.                           *\n*        *                                                           *\n*        *************************************************************\n*\n*        *************************************************************\n*        *                                                           *\n*        * DGA$SAMP copies relevant macros into code.                *\n*        *                                                           *\n*        *************************************************************\n*\n         DGA$SAMP  ,\n*\n*        *************************************************************\n*        *                                                           *\n*        * Copy DMGBLS from SYS1.CDI.SDGAMAC.                        *\n*        *                                                           *\n*        *************************************************************\n*\n         COPY      DMGBLS\n*\n*        *************************************************************\n*        *                                                           *\n*        * DMOS macro from SYS1.CDI.SDGAMAC sets OPSYS and release   *\n*        * level for assembly to identify version and so on.         *\n*        *                                                           *\n*        *************************************************************\n*\n         DMOS\n*\n&LASTPTF SETC      'R000000'\n&UID     SETC      'MK00000'           /* Local mod id.             */\n*\n         DMCTR  DSECT=YES              /* Map STATS records.        */\n         DMTCA  DSECT=YES              /* Map Task Control Area.    */\n         DMRAT  DSECT=YES              /* Map Resource Table.       */\n         DMFSQCB DSECT=YES             /* Map Security CB.          */\n*\nD0       EQU   0                       /* Disp of 0.                */\nD12      EQU   12                      /* Disp of 12.               */\nD16      EQU   16                      /* Disp of 16.               */\nL2       EQU   2                       /* Length of 2.              */\nL4       EQU   4                       /* Length of 4.              */\n*\n***********************************************************************\n*                                                                     *\n* Main Code.                                                          *\n*                                                                     *\n***********************************************************************\n*\n&DMCSECT SCENTER BASE=(R12),GETMAIN=SMFDSECT#,                         X\n               AMODE=31,RMODE=24,LASTPTF=&LASTPTF,UID=&UID\n*\n&DMCSECT SCSTART   WKAREA=WKAREA,WKAREA2=WKAREA2\n*\n         USING     SMFDSECT,R13        /* Base DSECT.               */\n         L         R2,0(,R1)           /* Get STAT record addr.     */\n         USING     CTR,R2              /* Map STAT record.          */\n         L         R11,4(,R1)          /* Get SQCB address.         */\n         USING     SQCB,R11            /* Map SQCB.                 */\n         L         R11,SQTCA           /* Map TCA.                  */\n         DROP      R11                 /* Unmap SQCB.               */\n         USING     TCA,R11             /* Map the TCA.              */\n         TIME      BIN                 /* Issue time macro.         */\n         ST        R0,SMFTIME          /* Store SMF header time.    */\n         ST        R1,SMFDATE          /* Store SMF header date.    */\n         L         R1,16               /* Address CVT.              */\n         L         R1,196(,R1)         /* Get SMCA address.         */\n         MVC       SYSID,16(R1)        /* Set system ID for SMF rec.*/\n         MVC       SMFSYS(2),SMFRCD    /* Set SMF record type.      */\n         LH        R1,0(,R2)           /* Get LNGTH of STAT record. */\n         CH        R1,=Y(L'DMREC)      /* How big is it?            */\n         BH        USE1006             /* Too big?                  */\n         CH        R1,=H'1'            /* Negative or 0?            */\n         BL        USE1006             /* Too small.                */\n         B         MOVEREC             /* Perfect move it in.       */\n*\nUSE1006  DS        0H\n*\n***********************************************************************\n*                                                                     *\n* If you ended up here the record is negative or too big to fit.      *\n*                                                                     *\n* We force a length of 1006.                                          *\n*                                                                     *\n***********************************************************************\n*\n         LH        R1,=Y(L'DMREC)      /* Set length to 1006.       */\n*\nMOVEREC  DS        0H\n         LR        R15,R1              /* Replicate for MVCL.       */\n         LR        R5,R1               /* Save length for later.    */\n         LA        R0,0(,R2)           /* Point at record.          */\n         LA        R14,DMREC           /* Point at target for move. */\n         MVCL      R14,R0              /* Move the record.          */\n         LR        R1,R5               /* Load original length.     */\n         AH        R1,RDWLEN           /* Build new RDW.            */\n         STH       R1,SMFRDWLL         /* Store RDW in SMF record.  */\n         XC        SMFRDWZZ,SMFRDWZZ   /* Zeroise it now stored.    */\n         LA        R1,SMFOUT           /* Point at SMF record.      */\n         SMFWTM    (1)                 /* Write it out.             */\n         LTR       R15,R15             /* Is it 0?                  */\n         BNZ       ERRPROC             /* No write error message.   */\n         LR        R3,R15              /* Get return code.          */\n         B         GETOUT              /* Return to caller.         */\n*\n***********************************************************************\n*                                                                     *\n* Process R15 > 0 for SMFWTM macro.                                   *\n*                                                                     *\n*    REG 15 = 4  not written record will not fit in SMF data set      *\n*             8  RDW length less than 18 bytes                        *\n*            16  SMF data set \"FULL\"                                  *\n*            20  SMF record suppressed.                               *\n*                                                                     *\n***********************************************************************\n*\nERRPROC  DS        0H\n         LR        R3,R15              /* Load bad return code.     */\n         B         *+0(R3)             /* Branch to send message.   */\n         B         RC4\n         B         RC8\n         B         RC12\n         B         RC16\n         B         RC20\n*\nRC4      DS        0H\n         WTO       'SMKT001E: -- SMF Write Failure - RC4',             X\n               ROUTCDE=(2,11)\n         B         GETOUT\n*\nRC8      DS        0H\n         WTO       'SMKT001E: -- SMF Write Failure - RC8',             X\n               ROUTCDE=(2,11)\n         B         GETOUT\n*\nRC12     DS        0H\n         WTO       'SMKT001E: -- SMF Write Failure - RC12',            X\n               ROUTCDE=(2,11)\n         B         GETOUT\n*\nRC16     DS        0H\n         WTO       'SMKT001E: -- SMF Write Failure - RC16',            X\n               ROUTCDE=(2,11)\n         B         GETOUT\n*\nRC20     DS        0H\n         WTO       'SMKT001E: -- SMF Write Failure - RC20',            X\n               ROUTCDE=(2,11)\n*\n***********************************************************************\n*                                                                     *\n* Return to caller.                                                   *\n*                                                                     *\n***********************************************************************\n*\nGETOUT   DS        0H\n         SCRETURN  RC=(R3)             /* Freemain and RC in R3.    */\n*\n***********************************************************************\n*                                                                     *\n* Define constants.                                                   *\n*                                                                     *\n***********************************************************************\n*\n         DS        0F\nRDWLEN   DC        Y(DMREC-SMFOUT)     /* SMF hdr length.           */\nSMFRCD   DC        X'0284'             /* SMF system type is ZOS &  */\n*                                      /* RECORD TYPE = what is     */\n*                                      /* selected by user.         */\nCDID     DC        C'CD '              /* Connect Identifier.       */\n*\n***********************************************************************\n*                                                                     *\n* Define DSECT for SMF statistics record.                             *\n*                                                                     *\n***********************************************************************\n*\nSMFDSECT DSECT\n         DS        9D                  /* Save Area.                */\nWKAREA   DS        D                   /* Display macro WAREA.      */\nWKAREA2  DS        8D                  /* Display macro WAREA.      */\n         DEBUG     LINKAGE=(R10,DEBUG,DEBUG2)\nDEBUG    DS        D                   /* Display macro WAREA.      */\nDEBUG2   DS        D                   /* Display macro WAREA.      */\nTIMEUSED DS        D                   /* Used by TIME macro.       */\n         DS        1H\n*\n* SMF record follows.\n*\nSMFOUT   EQU       *\nSMFRDWLL DS        BL2'0'              /* RDW Length (RDWLL).       */\nSMFRDWZZ DS        BL2'0'              /* RDW Flags  (RDWZZ).       */\nSMFSYS   DS        BL1'0'              /* Systype.                  */\nSMFTYPE  DS        BL1'0'              /* Record type.              */\nSMFTIME  DS        XL4                 /* Time.                     */\nSMFDATE  DS        PL4                 /* Date.                     */\nSYSID    DS        CL4                 /* SYSID.                    */\nDMREC    DS        CL2048              /* Stats record.             */\nSMFDSECT# EQU      *-SMFDSECT          /* Length of DSECT.          */\n*\n         SCEND     ,\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DGAXSMFA": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x01 (\\x9f\\x01 (\\x9f\\x16\\x12\\x00,\\x00,\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-15T00:00:00", "modifydate": "2020-10-15T16:12:20", "lines": 44, "newlines": 44, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01JOB    JOB   0,'J.BRADLEY',CLASS=A,MSGLEVEL=(1,1),MSGCLASS=O\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: DGAXSMFA                                        *\n//*      *                                                           *\n//*      * Purpose:  Assemble and link edit DGAXSMF program.         *\n//*      *           Amend SYSIN to reflect where input is stored.   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//ASM         EXEC  PGM=ASMA90,\n//            PARM=('OBJECT,NODECK,XREF(SHORT),RENT')\n//SYSLIB      DD    DISP=SHR,DSN=SYS1.CDI.SDGAMAC\n//            DD    DISP=SHR,DSN=SYS1.CDI.SDGASAMP\n//            DD    DISP=SHR,DSN=SYS1.MACLIB\n//            DD    DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN       DD    DISP=SHR,DSN=\u00a2\u00a2 SOURCE CODE MEMBER DGAXSMF HERE \u00a2\u00a2\n//SYSLIN      DD    DISP=(,PASS),DSN=&&OBJ,\n//            UNIT=3390,SPACE=(CYL,(1,1)),\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=80)\n//SYSPRINT    DD    SYSOUT=*\n//SYSUT1      DD    UNIT=3390,SPACE=(CYL,(1,1))\n//*\n//LKED        EXEC  PGM=IEWL,COND=(0,LT,ASM),\n//            PARM=('LIST,LET,XREF,RENT,REUS')\n//SYSLIB      DD    DISP=SHR,DSN=SYS1.CDI.SDGALINK\n//SYSLIN      DD    DISP=(OLD,DELETE),DSN=&&OBJ\n//            DD    DDNAME=SYSIN\n//SYSLMOD     DD    DISP=SHR,DSN=SYS1.CDI.SDGALINK\n//SYSPRINT    DD    SYSOUT=*\n//SYSUT1      DD    UNIT=3390,SPACE=(CYL,(1,1),,CONTIG)\n//SYSIN       DD    *\n  SETCODE AC(1)\n  ENTRY   DMGSMF\n  NAME    DMGSMF(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SESSHW": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x000\\x01 (/\\x01 )\\x0f\\x10%\\x00\\x02\\x00\\x02\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2020-10-08T00:00:00", "modifydate": "2020-10-16T10:25:30", "lines": 2, "newlines": 2, "modlines": 0, "user": "BRADLEY"}, "text": "SESSHW   PROC SNODE=CD.MKTA\nSTEP1    RUN TASK  (PGM=DGADVITL,PARM=(C'60')) PNODE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STAARC1": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x01\\xe3\\x01\\xe3\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 483, "newlines": 483, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAARC1.                                        *\n//*      *                                                           *\n//*      * Purpose:  To restore C:D statistics files from GDG        *\n//*      *           archive so they can be interrogated.            *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Amend the next CARD to reflect dataset containing the     *\n//*      * statistics parameters and procedures.                     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(STARTP,\n//           CASE,\n//           CCODE,\n//           DTE,\n//           EDATE,\n//           EXCLUDE,\n//           FNAME,\n//           FORMAT,\n//           MSG,\n//           MSGID,\n//           NETMAP,\n//           PNAME,\n//           PNUM,\n//           PROC,\n//           RESTDSN,\n//           SDATE,\n//           SEQ,\n//           SERVER,\n//           SNODE,\n//           STARTT,\n//           STOPT,\n//           TME,\n//           TYPE,\n//           USER,\n//           ENDP)\n//*\n//           INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * ***** WARNING *****                                       *\n//*      *                                                           *\n//*      * You must set the SDATE and EDATE parameters below         *\n//*      * before submission to the start date for statistics        *\n//*      * extraction and end date for statistics extraction.        *\n//*      *                                                           *\n//*      * So if you want to extract statistics from the restored    *\n//*      * file from 31st of July 2020 until 02nd of August 2020     *\n//*      * you would code:-                                          *\n//*      *                                                           *\n//*      * SDATE=31/07/2020                                          *\n//*      * EDATE=02/08/2020                                          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//           SET DTE=&LYYMMDD\n//*\n//*  ***** AMEND FOLLOWING TWO CARDS AS DIRECTED ABOVE *****\n//*\n//           SET SDATE=01/10/2020\n//           SET EDATE=02/10/2020\n//*\n//*  ***** END OF AMENDMENTS *****\n//*\n//           SET SEQ=&LSEC\n//           SET TME=&LHHMMSS\n//           SET RESTDSN=&HLQREST..T&TME..D&DTE..S&SEQ\n//*\n//           SET CCODE=CCODE=(EQ,00)\n//           SET EXCLUDE=EXCLUDE=(WTO)\n//           SET MSGID=\n//           SET PNAME=PNAME=COPYCF\n//           SET PNUM=\n//           SET SERVER=\n//           SET STARTT=\n//           SET STOPT=\n//           SET USER=\n//           SET SNODE=\n//           SET TYPE=\n//           SET FNAME=\n//           SET CASE=CASE=YES\n//           SET FORMAT=SUMMARY\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * STEP1 - Runs SORT to build two SYMLIST parameters         *\n//*      *         specifying the search date to start from and      *\n//*      *         end at when interrogating restored archive file.  *\n//*      *                                                           *\n//*      *         &SDATE and &EDATE are coded earlier by            *\n//*      *         person submitting the job. See comments above.    *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  PGM=SORT\n//SYSOUT      DD    SYSOUT=*\n//SORTIN      DD    *,SYMBOLS=JCLONLY,DCB=LRECL=80\n&SDATE\n&EDATE\n/*\n//SORTOUT     DD    DSN=&&DTCOMP,\n//            DISP=(NEW,PASS),\n//            SPACE=(TRK,(1,0),RLSE),\n//            DCB=(DSORG=PS,LRECL=80,BLKSIZE=0,RECFM=FB)\n//SYSIN       DD    *,SYMBOLS=JCLONLY\n*\n* Copy input but only for 2 records.\n*\n* OPTION COPY,STOPAFT=2\n*\n* Modify the input so change from input format date to YYYYMMDD and\n* then convert to Julian date format YYYYDDD.\n*\n* New date is appended to input record starting in byte 81.\n*\n* INREC  IFOUTLEN=80,\n*        IFTHEN=(WHEN=INIT,\n*                OVERLAY=(81:4,2,1,2,7,4,1:81,8,Y4W,TOJUL=Y4T,73X))\n*\n* We then use OUTFIL to build the SYMLIST cards for us.\n*\n* OUTFIL REMOVECC,NODETAIL,\n*                 BUILD=(80X),HEADER1=('STRTDATE,C''',1,7,C''''),\n*                             TRAILER1=('ENDDATE,C''',1,7,C'''')\n*\n  OPTION COPY,STOPAFT=2\n  INREC  IFOUTLEN=80,\n         IFTHEN=(WHEN=INIT,\n                 OVERLAY=(81:4,2,1,2,7,4,1:81,8,Y4W,TOJUL=Y4T,73X))\n  OUTFIL REMOVECC,NODETAIL,\n                  BUILD=(80X),HEADER1=('STRTDATE,C''',1,7,C''''),\n                              TRAILER1=('ENDDATE,C''',1,7,C'''')\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * STEP2 - Execute Connect Direct to list all archived       *\n//*      *         statistics from STATDIR dataset and write output  *\n//*      *         to temporary dataset.                             *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  CDJCL,\n//            COND=(0,LT)\n//DMBATCH.DMPRINT DD    DSN=&&TEMP01,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FBA,LRECL=133,BLKSIZE=0,DSORG=PS)\n//SYSPRINT    DD    SYSOUT=*\n//SYSIN       DD    *\n  SIGNON\n  INQ    STATDIR\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * STEP3 - We use ICETOOL to perform a variety of work to    *\n//*      *         avoid having to do any real programming.          *\n//*      *                                                           *\n//*      *         SYMNAMES DD contains the output from STEP1.       *\n//*      *                                                           *\n//*      *         INDD1 DD is the output from STEP2.                *\n//*      *                                                           *\n//*      *         INDD2 DD is setup so we can build required C:D    *\n//*      *         control cards for input to the next step.         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP3       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//SYMNAMES    DD    DSN=&DTCOMP,DISP=(OLD,DELETE)\n//INDD1       DD    DSN=&&TEMP01,DISP=(OLD,DELETE)\n//INDD2       DD    *,SYMBOLS=JCLONLY\n  ARCHDSN=&RESTDSN..KSDS          -\n  ) &FORMAT\n/*\n//OUTDD1      DD    DSN=&&TEMP02,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&&TEMP03,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=320,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&&TEMP04,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD4      DD    DSN=&&TEMP05,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD5      DD    DSN=&&TEMP06,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD6      DD    DSN=&&TEMP07,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//SPLICE1     DD    DSN=&&SPLICE1,\n//            DISP=(MOD,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL uses DFSORT statements to produce required       *\n//*      * formats.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy input.\n*\n  OPTION  COPY\n*\n* Select required records from INQUIRE STATDIR command.\n*\n  INCLUDE COND=(2,3,CH,EQ,C'Arc',OR,\n                2,3,CH,EQ,C'Old',OR,\n                2,3,CH,EQ,C'New',OR,\n                2,3,CH,EQ,C'ARC',OR,\n                2,3,CH,EQ,C'OLD',OR,\n                2,3,CH,EQ,C'NEW')\n*\n* Remove FBA and make 80 byte record without print control characters.\n*\n  OUTFIL  FNAMES=OUTDD1,OUTREC=(2,80)\n/*\n//*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy input from SRT1 step.\n*\n  OPTION COPY\n*\n* Work on input in group of 4 records at a time. Make 4 records into one\n* 320 byte record.\n*\n  INREC IFTHEN=(WHEN=GROUP,RECORDS=4,PUSH=(321:SEQ=1)),\n        IFTHEN=(WHEN=GROUP,BEGIN=(321,1,ZD,EQ,1),PUSH=(81:1,80)),\n        IFTHEN=(WHEN=GROUP,BEGIN=(321,1,ZD,EQ,2),PUSH=(161:1,80)),\n        IFTHEN=(WHEN=GROUP,BEGIN=(321,1,ZD,EQ,3),PUSH=(241:1,80))\n*\n* Only extract one reformatted record and put into correct format.\n*\n  OUTFIL INCLUDE=(321,1,ZD,EQ,4),\n         BUILD=(81,80,161,80,241,80,1,80)\n/*\n//*\n//SRT3CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy input from SRT2 extracting only data we need.\n*\n  OPTION  COPY\n*\n* Extract first 196 bytes.\n* Extract Julian start year from byte 198 for 4 characters.\n* Extract Julian start day from byte 203 for 3 characters.\n* Extract Julian end year from byte 278 for 4 characters.\n* Extract Julian end day from byte 283 for 3 characters.\n*\n  INREC   BUILD=(1,196,198,4,203,3,278,4,283,3)\n*\n* Build output records only containing dates in range we have requested\n* in SYMNAMES STARTDATE and ENDDATE parameters. Exclude all other records.\n* Write out as 80 byte records.\n*\n  OUTFIL  FNAMES=OUTDD3,\n          OMIT=(197,7,CH,LT,STRTDATE,OR,\n                204,7,CH,GT,ENDDATE),\n          BUILD=(1:26,44,36X)\n/*\n//*\n//SRT4CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Take input from SRT2. Do pretty much what SRT3 did.\n* Reason we need this code is if statistics span two files we need to ensure\n* we do not miss any dates so we use slightly different selection to ensure\n* files that span more than two days get included.\n*\n  OPTION  COPY\n  INREC   BUILD=(1,196,198,4,203,3,278,4,283,3)\n  OUTFIL  FNAMES=OUTDD4,\n          INCLUDE=(197,7,CH,LE,ENDDATE,AND,\n                   197,7,CH,GE,STRTDATE),\n          BUILD=(1:26,44,36X)\n/*\n//*\n//SRT5CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* We then use SPLICE to extract only records we need from SRT3.\n*\n  OUTREC FIELDS=(1,44,45:C'11')\n/*\n//*\n//SRT6CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* We then use SPLICE to extract only records we need from SRT4.\n*\n  OUTREC FIELDS=(1,44,45:C'22')\n/*\n//*\n//SRT7CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* We build IDCAMS REPRO command to extract the required\n* datasets from archive into new ESDS datasets.\n*\n  OUTFIL FNAMES=OUTDD5,INCLUDE=(45,2,CH,EQ,C'12',OR,\n                                45,2,CH,EQ,C'22'),\n         OUTREC=(1X,C'REPRO -',72X,/,\n                 1X,C'INDATASET(',1,44,C') -',22X,/,\n  1X,C'OUTDATASET(&RESTDSN..ESDS)',21X)\n/*\n//*\n//SRT8CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* We create required extraction parameters.\n*\n  OPTION COPY\n  OUTFIL REMOVECC,\n                  HEADER1=(' &CCODE -',/,\n                           ' &EXCLUDE -',/,\n                           ' &MSGID  -',/,\n                           ' &PNAME -',/,\n                           ' &PNUM -',/,\n                           ' &SERVER -',/,\n                           ' &STARTT -',/,\n                           ' &STOPT -',/,\n                           ' &USER -',/,\n                           ' &SNODE -',/,\n                           ' &FNAME -',/,\n                           ' &CASE -',/,\n                           ' &TYPE - '),\n                  OUTREC=(1,80)\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN control cards direct ICETOOL to perform various    *\n//*      * tasks and use the SRTxCNTL cards to control DFSORT when   *\n//*      * called from ICETOOL.                                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n*\n* Next set of statements work on input to create required\n* parameters to repro GDGs into ESDS and to build DMBATCH input\n* cards.\n*\n COPY   FROM(INDD1)   TO(OUTDD1)  USING(SRT1)\n COPY   FROM(OUTDD1)  TO(OUTDD2)  USING(SRT2)\n COPY   FROM(OUTDD2)  TO(OUTDD3)  USING(SRT3)\n COPY   FROM(OUTDD2)  TO(OUTDD4)  USING(SRT4)\n COPY   FROM(OUTDD3)  TO(SPLICE1) USING(SRT5)\n COPY   FROM(OUTDD4)  TO(SPLICE1) USING(SRT6)\n SPLICE FROM(SPLICE1) TO(OUTDD5)  ON(1,44,CH)                        -\n        WITH(46,1)    KEEPNODUPS  USING(SRT7)\n COPY   FROM(INDD2)   TO(OUTDD6)  USING(SRT8)\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * STEP4 -                                                   *\n//*      *                                                           *\n//*      * We execute IDCAMS next to deine new ESDS and KSDS         *\n//*      * datasets for statistics archive GDGs to be repro'ed into. *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP4       EXEC  PGM=IDCAMS,COND=(0,LT)\n//SYSPRINT    DD    SYSOUT=*\n//SYSIN       DD    *,SYMBOLS=JCLONLY\n  DEFINE CLUSTER                                           -\n    (NAME(&RESTDSN..ESDS) -\n     CYL(1000 500)                                         -\n     VOLUMES(SYS201)                                       -\n     NONINDEXED                                            -\n     NOIMBED                                               -\n     REUSE                                                 -\n     RECORDSIZE(275 2048)                                  -\n     SHAREOPTIONS(2))                                      -\n    DATA                                                   -\n     (CONTROLINTERVALSIZE(32768)                           -\n      NAME(&RESTDSN..D))\n  DEFINE CLUSTER                                           -\n    (NAME(&RESTDSN..KSDS) -\n     VOLUMES(SYS201)                                       -\n     INDEXED                                               -\n     NOIMBED                                               -\n     REUSE                                                 -\n     NOREPLICATE                                           -\n     FREESPACE(10 5)                                       -\n     KEYS (27 0)                                           -\n     RECORDSIZE(32 78)                                     -\n     SHAREOPTIONS(2))                                      -\n    DATA                                                   -\n     (CONTROLINTERVALSIZE(4096)                            -\n      CYL(10 1)                                            -\n      NAME(&RESTDSN..KSDS.D)) -\n    INDEX                                                  -\n     (CONTROLINTERVALSIZE(4096)                            -\n      NAME(&RESTDSN..KSDS.I))\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * STEP5 -                                                   *\n//*      *                                                           *\n//*      * We execute IDCAMS next using  REPRO cards created using   *\n//*      * ICETOOL to get statistics records ready for extraction.   *\n//*      *                                                           *\n//*      * ***** WARNING *****                                       *\n//*      *                                                           *\n//*      * It is possible REPRO will fail with CC=12 if the GDG has  *\n//*      * rolled off so be prepared if CC=12 to check if GDG        *\n//*      * exists.                                                   *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP5       EXEC  PGM=IDCAMS,COND=(0,LT)\n//SYSPRINT    DD    SYSOUT=*\n//SYSIN       DD    DSN=&&TEMP06,DISP=(OLD,DELETE)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * STEP6 - DGADBKEY builds KSDS index from ESDS input.       *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP6       EXEC  PGM=DGADBKEY,PARM=CONSOLIDATE,COND=(0,LT)\n//STEPLIB     DD    DSN=&CDLOAD,DISP=SHR\n//ESDS01      DD    DSN=&RESTDSN..ESDS,DISP=SHR\n//KSDS01      DD    DSN=&RESTDSN..KSDS,DISP=SHR\n//SYSOUT      DD    SYSOUT=*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * STEP7 - Executes C:D in batch to interrogate the restored *\n//*      *         data. This step is optional as you may just       *\n//*      *         want to run the restore and interrogate the       *\n//*      *         restored statistics using different criteria.     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP7       EXEC  CDJCL,COND=(0,LT)\n//DMBATCH.SYSIN  DD DSN=&HLQSTAT..ARCH.HDR,DISP=SHR\n//            DD    DSN=&&TEMP07,DISP=(OLD,DELETE)\n//            DD    DSN=&HLQSTAT..ARCH.TRL,DISP=SHR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STACT": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STACT.                                          *\n//*      *                                                           *\n//*      * Purpose:  Extract only CT type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..CTX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=CT EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STACTEQ0": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x00#\\x00#\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 35, "newlines": 35, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STACTEQ0.                                       *\n//*      *                                                           *\n//*      * Purpose:  Extract only CT records that have completed     *\n//*      *           CC=0.                                           *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..CTEQ02,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=CT CCODE=(EQ,0) EXCLUDE=(WTO,MEMB)) -\n                    FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STACTERR": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x00\\xdc\\x00\\xdc\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 220, "newlines": 220, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STACTERR.                                       *\n//*      *                                                           *\n//*      * Purpose:  Extract CT records where CC>0 and produce       *\n//*      *           error message reports.                          *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT  SYMLIST=(DTE)\n//           SET     DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract copy termination records  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                       -\n         WHERE (TYPE=CT CCODE=(GT,0)                      -\n         STARTT=(YESTER)                                  -\n         STOPT=(YESTER)                                   -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute ICETOOL to produce the various formatted  *\n//*      * data required.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..ERPT1.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&HLQSTAT..ERPT2.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//OUTDD4      DD    DSN=&HLQSTAT..ERPT3.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements are used to format the statistics     *\n//*      * into the various reports we require.                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  SORT FIELDS=(29,8,CH,A,13,4,PD,A,9,4,BI,A)\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n* Our output record will look like this:-\n*\n* Columns     Content\n*\n* 1-4         Date in packed decimal format.\n* 5-8         Unused\n* 9-16        Time in zoned decimal format.\n* 17-20       Process name in character format.\n* 25-28       Process number in binary format.\n* 29-44       C:D node name in character format.\n* 45-52       Bytes sent in binary format.\n* 53-60       Bytes recv in binary format.\n* 61-64       Condition code in binary format.\n*\n  OUTFIL  OUTREC=(13,4,                * - Date            1-4\n                  29,8,                * - Error Message   5-12\n                  13:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  14:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  15:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  16:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  17:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  18:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  19:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  20:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  37,8,                * - Process name    21-28\n                  45,4,                * - Process number  29-32\n                  97,16,               * - CD Node         33-48\n                  25,4,                * - Cond Code       49-52\n                  28X),VTOF\n/*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  OPTION COPY\n  OUTFIL OUTREC=(1,121)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN directs ICETOOL to perform various pieces of       *\n//*      * processing to create records and reports we require.      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -\n         TITLE('Daily C:D Error Message Report')                     -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         HEADER('Error Message')   ON(5,8,CH)                        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(49,4,BI)                       -\n         HEADER('CD.Node ')        ON(33,16,CH)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD3)                                -\n         TITLE('Daily C:D Error Message Report')                     -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         BTITLE('Report for error message: ') BREAK(5,8,CH)          -\n         HEADER('Error Message')   ON(5,8,CH)                        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(49,4,BI)                       -\n         HEADER('CD.Node ')        ON(33,16,CH)\n OCCUR   FROM(OUTDD1)    LIST(OUTDD4) BLANK                          -\n         TITLE('Error Message Summary')                              -\n         HEADER('Error Message')                                     -\n         HEADER('Occurrences')                                       -\n         ON(5,8,CH)                                                  -\n         ON(VALCNT)\n COPY    FROM(OUTDD4) TO(OUTDD2)   USING(SRT2)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STACTGT0": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x13\\x01 )\\x0f\\x01 )\\x0f\\x10%\\x00#\\x00\\xdc\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T10:25:13", "lines": 35, "newlines": 220, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STACTGT0.                                       *\n//*      *                                                           *\n//*      * Purpose:  Extract CT records where CC>0.                  *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..CTGT02,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//SYSIN       DD    *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=CT CCODE=(GT,0) EXCLUDE=(WTO,MEMB)) -\n                    FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STADAILY": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x01d\\x01d\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 356, "newlines": 356, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job Name: STADAILY.                                       *\n//*      *                                                           *\n//*      * Purpose: Run series of daily reports. Detail contained    *\n//*      *          inline comments.                                 *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract four types of record.     *\n//*      *                                                           *\n//*      * Records are selected from previous days statistics.       *\n//*      *                                                           *\n//*      * Types selected are:-                                      *\n//*      *                                                           *\n//*      * CT - copy termination.                                    *\n//*      * PS - process submit.                                      *\n//*      * RJ - run job.                                             *\n//*      * RT - run task.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                        -\n         WHERE (TYPE=(CT,PS,PT,RJ,RT)                      -\n         STARTT=(YESTER)                                   -\n         STOPT=(YESTER)                                    -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute ICETOOL to produce the various formatted  *\n//*      * data required.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * The SYMNAMES statements are LPAR and SITE specific and    *\n//*      * you will need to recode these as required.                *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SYMNAMES    DD    *\nFRPNOD,C'CD.MKTA         '\nTOPNOD,C'CD.MKTB         '\nTOSFG,C'CD.MKTSFGP001   '\nTOWIN,C'CD.MKTWIN01     '\n/*\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDDT      DD    DSN=&&OUTDDT,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=VB,LRECL=4100,BLKSIZE=0,DSORG=PS)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(MOD,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//*\n//* Following file is appended to with yesterday's statistics.\n//*\n//OUTDD2      DD    DSN=&HLQSTAT..CSVFILE,\n//            DISP=MOD,\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&&OUTDD3,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD4      DD    DSN=&&OUTDD4,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//*\n//* Following file is appended to with yesterday's statistics.\n//*\n//OUTDD5      DD    DSN=&HLQSTAT..BYTES,\n//            DISP=MOD,\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD6      DD    DSN=&&OUTDD6,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//*\n//* Following file is appended to with yesterday's statistics.\n//*\n//OUTDD7      DD    DSN=&HLQSTAT..DAILY.STATS.TOT.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=100,BLKSIZE=0,DSORG=PS)\n//*\n//* Following file is created with yesterday's statistics and\n//* suffix will be todays date.\n//*\n//OUTDD8      DD    DSN=&HLQSTAT..DAILY.REPORT.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements are used to format the statistics     *\n//*      * into the various reports we require.                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'CT')\n/*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy PS records only.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'PS')\n/*\n//SRT3CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy RJ records only.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'RJ')\n/*\n//SRT4CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy RT records only.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'RT')\n/*\n//SRT5CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only that have completed with CC=0.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'CT',AND,25,4,CH,EQ,X'00000000')\n/*\n//SRT6CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only that have completed with CC>0.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'CT',AND,25,4,CH,NE,X'00000000')\n/*\n//SRT7CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only from ZOS node where they started.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'CT',AND,81,16,CH,EQ,FRPNOD)\n/*\n//SRT8CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only to ZOS node.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'CT',AND,81,16,CH,NE,TOPNOD)\n/*\n//SRT9CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only to a specific Windows node.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'CT',AND,97,16,CH,EQ,TOWIN)\n/*\n//SRTACNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only to a specific SFG node.\n*\n  OPTION  COPY\n  INCLUDE COND=(7,2,CH,EQ,C'CT',AND,97,16,CH,EQ,TOSFG)\n/*\n//SRTBCNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only sorted by record type.\n*\n  SORT FIELDS=(7,2,CH,A)\n  INCLUDE COND=(7,2,CH,EQ,C'CT')\n/*\n//SRTCCNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT records only sorted by CD.NODE name.\n*\n  INCLUDE COND=(7,2,CH,EQ,C'CT')\n  SORT FIELDS=(81,16,CH,A)\n  OUTFIL  OUTREC=(81,16,\n                  149,8,\n                  173,8,\n                  48X),VTOF\n/*\n//SRTDCNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy selected records from SRTC and build OUTREC in format:-\n*\n* Columns\n*\n*    1,2   -  record type\n*    3     -  ,\n*    4,18  -  record count\n*    19    -  ,\n*    20,29 -  date in format DD-MM-YYYY\n*\n* Data is in comma delimited format for input to Excel.\n*\n* A days data looks like this:-\n*\n* Columns: 00000000011111111112222222222\n*          12345678901234567890123456789\n*          -----------------------------\n*          CT,000000000001767,28-09-2020 <-- Copy termination all\n*          PS,000000000000725,28-09-2020 <-- Process submit all\n*          RJ,000000000000144,28-09-2020 <-- Run job all\n*          RT,000000000002424,28-09-2020 <-- Runt task all\n*          C0,000000000001664,28-09-2020 <-- Copy termination = 0\n*          C1,000000000000103,28-09-2020 <-- Copy termination > 0\n*          FR,000000000001404,28-09-2020 <-- Copy termination from ZOS\n*          TO,000000000000363,28-09-2020 <-- Copy termination to ZOS\n*          TW,000000000000792,28-09-2020 <-- Copy termination to Windows\n*          TS,000000000000074,28-09-2020 <-- Copy termination to SFG\n*\n  OPTION  COPY\n  OUTREC BUILD=(1,18,C',',DATE=(DM4-)-1,51X)\n/*\n//SRTECNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Build totals of BYTES SENT and RECEIVED with date in comma delimited\n* format.\n*\n* Records will look like this:-\n*\n* 0000000000000000000002147642829,0000000000000000000002147614519,28-09-2020\n* 0000000000000000000003673675477,0000000000000000000003673678320,29-09-2020\n* 0000000000000000000004444557170,0000000000000000000004444572160,30-09-2020\n*\n  OPTION  COPY\n  OUTFIL REMOVECC,NODETAIL,\n         TRAILER1=(3,31,C',',38,31,C',',DATE=(DM4-)-1,6X)\n/*\n//SRTFCNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy records and reformat with NODE NAME and then build totals for\n* each node.\n*\n* Records will look like this:-\n*\n* DATE       NODE             BYTES SENT                   BYTES RECEIVED\n*\n* 05-10-2020,CD.MKTAS400     ,    185697,                          185697\n* 05-10-2020,CD.MKTD         ,   8891820,                         8901476\n* 05-10-2020,CD.MKTA         ,2057200854,                      2057198135\n* 05-10-2020,CD.MKTWIN01     ,   2625908,                         2625908\n* 05-10-2020,CD.MKTSFGP01    ,     46688,                           46688\n* 05-10-2020,CD.MKTE         ,  20361081,                        20361081\n*\n  OPTION COPY\n  INREC  IFTHEN=(WHEN=GROUP,\n         BEGIN=(1,100,SS,EQ,C'NODE NAME'),\n         PUSH=(101:13,16))\n  OUTFIL INCLUDE=(2,6,CH,EQ,C'TOTAL:'),\n         BUILD=(DATE=(DM4-)-1,C',',101,16,C',',21,32,C',',56,32,7X)\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN directs ICETOOL to perform various pieces of       *\n//*      * processing to create records and reports we require.      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT1) TEXT('CT,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT2) TEXT('PS,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT3) TEXT('RJ,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT4) TEXT('RT,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT5) TEXT('C0,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT6) TEXT('C1,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT7) TEXT('FR,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT8) TEXT('TO,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRT9) TEXT('TW,') WIDTH(80)\n COUNT FROM(INDD1)  WRITE(OUTDD1) USING(SRTA) TEXT('TS,') WIDTH(80)\n COPY  FROM(INDD1)  TO(OUTDDT)    USING(SRTB)\n DISPLAY FROM(OUTDDT)             LIST(OUTDD3)                       -\n         HEADER('BYTES SENT')     ON(149,8,BI)                       -\n         HEADER('BYTES RECEIVED') ON(173,8,BI)                       -\n         TOTAL('TOTAL BYTES: ')\n SORT  FROM(INDD1)  TO(OUTDD4)    USING(SRTC)\n COPY  FROM(OUTDD1) TO(OUTDD2)    USING(SRTD)\n COPY  FROM(OUTDD3) TO(OUTDD5)    USING(SRTE)\n DISPLAY FROM(OUTDD4) LIST(OUTDD6)                                   -\n         HEADER('NODE')            ON(1,16,CH)                       -\n         HEADER('BYTES SENT')      ON(17,8,BI)                       -\n         HEADER('BYTES RECEIVED')  ON(25,8,BI)                       -\n         BLANK                                                       -\n         BTITLE('NODE NAME')       BREAK(1,16,CH)                    -\n         BTOTAL('TOTAL: ')                                           -\n         TOTAL('TOTAL BYTES FOR ALL NODES: ')\n COPY  FROM(OUTDD6) TO(OUTDD7)    USING(SRTF)\n DISPLAY FROM(OUTDD4) LIST(OUTDD8)                                   -\n         HEADER('NODE')            ON(1,16,CH)                       -\n         HEADER('BYTES SENT')      ON(17,8,BI,A1)                    -\n         HEADER('BYTES RECEIVED')  ON(25,8,BI,A1)                    -\n         BLANK                                                       -\n         BTITLE('NODE NAME')       BREAK(1,16,CH)                    -\n         BTOTAL('TOTAL: ')                                           -\n         TOTAL('TOTAL BYTES FOR ALL NODES: ')\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STADEL": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x00:\\x00:\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 58, "newlines": 58, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//   USER=RDXUSER,PASSWORD=ONE4YOU\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STADEL.                                         *\n//*      *                                                           *\n//*      * Purpose:  Execute to delete any restored statistics files *\n//*      *           manually.                                       *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//            EXPORT SYMLIST=(DELDSN)\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  PGM=IDCAMS\n//SYSPRINT    DD    DSN=&&DELCRD,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(10,10),RLSE)\n//SYSIN       DD    *,SYMBOLS=JCLONLY\n  LISTC LVL(&DELDSN..T%%%%%%.D%%%%%%.S%%) ALL\n/*\n//*\n//STEP2       EXEC  PGM=SORT,REGION=8M,COND=(4,LT)\n//SORTIN      DD    DSN=&&DELCRD,DISP=(OLD,PASS)\n//SORTOUT     DD    DSN=&&MASTDEL,\n//            DISP=(NEW,PASS),\n//            DCB=(DSORG=PS,LRECL=80,BLKSIZE=0,RECFM=FB),\n//            UNIT=3390,\n//            SPACE=(CYL,(10,10),RLSE)\n//SYSOUT      DD    SYSOUT=*\n//SYSIN       DD    *\n  INCLUDE COND=(5,8,CH,EQ,C'0CLUSTER')\n  OPTION  COPY\n  OUTFIL  FNAMES=SORTOUT,VTOF,\n          OUTREC=(C' DELETE ',22,44,28X)\n/*\n//*\n//STEP3       EXEC  PGM=IDCAMS,COND=(4,LT)\n//SYSPRINT    DD    SYSOUT=*\n//SYSIN       DD    DSN=&&MASTDEL,DISP=(OLD,DELETE)\n//*\n//STEP4       EXEC  PGM=ICEGENER\n//SYSPRINT    DD    SYSOUT=*\n//SYSUT1      DD    DSN=&&DELCRD,DISP=(OLD,DELETE)\n//SYSUT2      DD    SYSOUT=*\n//SYSIN       DD    DUMMY\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STADIAG": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 29, "newlines": 29, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01REG JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STADIAG.                                        *\n//*      *                                                           *\n//*      * Purpose:  Report on STATS files contents and size.        *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1      EXEC   CDDIAG,ESDS=&ESDS01\n//STEP2      EXEC   CDDIAG,ESDS=&ESDS02\n//STEP3      EXEC   CDDIAG,ESDS=&ESDS03\n//STEP4      EXEC   CDDIAG,ESDS=&ESDS04\n//STEP5      EXEC   CDDIAG,ESDS=&ESDS05\n//STEP6      EXEC   CDDIAG,ESDS=&ESDS06\n//STEP7      EXEC   CDDIAG,ESDS=&ESDS07\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAERRM": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x00\\xe4\\x00\\xe4\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 228, "newlines": 228, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAERRM.                                        *\n//*      *                                                           *\n//*      * Purpose:  Extract CT records where CC>0 and produce       *\n//*      *           error message reports.                          *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT  SYMLIST=(DTE)\n//           SET     DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract copy termination records  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                       -\n         WHERE (TYPE=CT CCODE=(GT,0)                      -\n         STARTT=(YESTER)                                  -\n         STOPT=(YESTER)                                   -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute ICETOOL to produce the various formatted  *\n//*      * data required.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..ERPT1.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&HLQSTAT..ERPT2.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//OUTDD4      DD    DSN=&HLQSTAT..ERPT3.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements are used to format the statistics     *\n//*      * into the various reports we require.                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  SORT FIELDS=(29,8,CH,A,13,4,PD,A,9,4,BI,A)\n*\n* Copy records in date and time sorted order and manipulate and\n* extract data we require.\n*\n* OPTION COPY,VLSHRT\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n* Our output record will look like this:-\n*\n* Columns     Content\n*\n* 1-4         Date in packed decimal format.\n* 5-8         Unused\n* 9-16        Time in zoned decimal format.\n* 17-20       Process name in character format.\n* 25-28       Process number in binary format.\n* 29-44       C:D node name in character format.\n* 45-52       Bytes sent in binary format.\n* 53-60       Bytes recv in binary format.\n* 61-64       Condition code in binary format.\n*\n  OUTFIL  OUTREC=(13,4,                * - Date            1-4\n                  29,8,                * - Error Message   5-12\n                  13:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  14:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  15:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  16:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  17:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  18:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  19:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  20:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  37,8,                * - Process name    21-28\n                  45,4,                * - Process number  29-32\n                  97,16,               * - CD Node         33-48\n                  25,4,                * - Cond Code       49-52\n                  28X),VTOF\n/*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  OPTION COPY\n  OUTFIL OUTREC=(1,121)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN directs ICETOOL to perform various pieces of       *\n//*      * processing to create records and reports we require.      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE    STOP\n SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -\n         TITLE('Daily C:D Error Message Report')                     -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         HEADER('Error Message')   ON(5,8,CH)                        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(49,4,BI)                       -\n         HEADER('CD.Node ')        ON(33,16,CH)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD3)                                -\n         TITLE('Daily C:D Error Message Report')                     -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         BTITLE('Report for error message: ') BREAK(5,8,CH)          -\n         HEADER('Error Message')   ON(5,8,CH)                        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(49,4,BI)                       -\n         HEADER('CD.Node ')        ON(33,16,CH)\n OCCUR   FROM(OUTDD1)    LIST(OUTDD4) BLANK                          -\n         TITLE('Error Message Summary')                              -\n         HEADER('Error Message')                                     -\n         HEADER('Occurrences')                                       -\n         ON(5,8,CH)                                                  -\n         ON(VALCNT)\n*\n*  Append summary to end of main report.\n*\n COPY    FROM(OUTDD4) TO(OUTDD2)   USING(SRT2)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAESDS": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x00#\\x00#\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 35, "newlines": 35, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01REG JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job Name: STAESDS.                                        *\n//*      *                                                           *\n//*      * Purpose:  Manually define esds to restore statistics.     *\n//*      *           Amend fields inline marked \u00a2\u00a2.                  *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  PGM=IDCAMS\n//SYSPRINT    DD    SYSOUT=*\n//SYSIN       DD    *\n  DEFINE CLUSTER                       -\n    (NAME(\u00a2\u00a2DSNAME)                  ) -\n     RECORDS(\u00a2\u00a2RECS)                   -\n     VOLUMES(\u00a2\u00a2VOLUME)                 -\n     NONINDEXED                        -\n     NOIMBED                           -\n     REUSE                             -\n     RECORDSIZE(275 2048)              -\n     SHAREOPTIONS(2))                  -\n    DATA                               -\n     (CONTROLINTERVALSIZE(4096)        -\n      NAME(\u00a2\u00a2DSNAME.DATA))\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAFI": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01 )\\x0f\\x01 )\\x0f\\tF\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:46:23", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STAFI.                                          *\n//*      *                                                           *\n//*      * Purpose:  Extract only FI type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..FIX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=FI EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHDR": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x003\\x01 (\\x8f\\x01 (\\x8f\\x15I\\x00\\x05\\x01\\xe3\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-14T00:00:00", "modifydate": "2020-10-14T15:49:33", "lines": 5, "newlines": 483, "modlines": 0, "user": "BRADLEY"}, "text": "//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STAHOURS": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x10\\x01 )\\x0f\\x01 )\\x0f\\tG\\x00\\xca\\x00\\xca\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:47:10", "lines": 202, "newlines": 202, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,  JOB13231\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAHOURS.                                       *\n//*      *                                                           *\n//*      * Purpose:  Extract CT records and produce a report for     *\n//*      *           previous days transfers.                        *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract copy termination records  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                        -\n         WHERE (TYPE=(CT)                                  -\n         STARTT=(YESTER)                                   -\n         STOPT=(YESTER)                                    -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute ICETOOL to format the records into various        *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDDT      DD    DSN=&&OUTDDT,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=VB,LRECL=4100,BLKSIZE=0,DSORG=PS)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=84,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..HOURS.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=141,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements used to perform a variety of tasks    *\n//*      * on input records.                                         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy on CT type records and sort by date and time.\n*\n  OPTION  DYNALLOC,VLSHRT\n  INCLUDE COND=(7,2,CH,EQ,C'CT')\n  SORT    FIELDS=(13,4,PD,A,9,4,BI,A)\n/*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy records in date and time sorted order and manipulate and\n* extract data we require.\n*\n  OPTION COPY,VLSHRT\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n  OUTREC FIELDS=(13,4,\n                 9:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 10:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 11:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 12:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 13:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 14:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 15:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 16:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 37,8,\n                 45,4,\n                 81,16,\n                 149,8,\n                 173,8,\n                 25,4),VTOF\n/*\n//*\n//SRT3CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy adding summary of total number of copies, total bytes sent and\n* total bytes received.\n*\n  OPTION  COPY\n  OUTFIL  NODETAIL,\n          TRAILER1=(X,/,2:C'Tot Copies: ',\n              COUNT=(M10,LENGTH=9),\n              3X,C' Bytes Sent: ',TOT=(45,8,BI,\n              EDIT=(II,III,III,III,III,III,III,III,III,III,IIT)),\n              3X,C' Bytes Recv: ',TOT=(53,8,BI,\n              EDIT=(II,III,III,III,III,III,III,III,III,III,IIT)),1X),\n          OUTREC=(140X)\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN uses a variety of ICETOOL operators to produce     *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE    STOP\n SORT    FROM(INDD1)  TO(OUTDDT)   USING(SRT1)\n COPY    FROM(OUTDDT) TO(OUTDD1)   USING(SRT2)\n DISPLAY FROM(OUTDD1) LIST(OUTDD2)                                   -\n         TITLE('Daily C:D Copy Process Detail by Date and Time')     -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(9,8,ZD,E'99:99:99:99')         -\n         HEADER('Process ')        ON(17,8,CH)                       -\n         HEADER('Procnum ')        ON(25,4,BI)                       -\n         HEADER('CondCode')        ON(61,4,BI)                       -\n         HEADER('CD.Node ')        ON(29,16,CH)                      -\n         HEADER('Bytes Sent')      ON(45,8,BI,A1)                    -\n         HEADER('Bytes Received ') ON(53,8,BI,A1)\n COPY    FROM(OUTDD1) TO(OUTDD2)   USING(SRT3)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHOUR2": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x008\\x01 )\\x0f\\x01 )\\x0f\\tG\\x00\\xef\\x00\\xef\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:47:38", "lines": 239, "newlines": 239, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,  JOB13231\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAHOUR2.                                       *\n//*      *                                                           *\n//*      * Purpose:  Extract CT records and produce a report for     *\n//*      *           previous days transfers.                        *\n//*      *                                                           *\n//*      *           Sorts by CONDCODE, date and time then reports   *\n//*      *           separately on success and failures.             *\n//*      *                                                           *\n//*      *           Creates two output datasets. See comments.      *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract copy termination records  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                        -\n         WHERE (TYPE=(CT)                                  -\n         STARTT=(YESTER)                                   -\n         STOPT=(YESTER)                                    -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute ICETOOL to format the records into various        *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDDT      DD    DSN=&&OUTDDT,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=VB,LRECL=4100,BLKSIZE=0,DSORG=PS)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=84,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..CDES.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=129,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&HLQSTAT..CDESTOT.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=129,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements used to perform a variety of tasks    *\n//*      * on input records.                                         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy CT type records and sort into condition code, date and time\n* order.\n*\n  OPTION  DYNALLOC,VLSHRT\n  INCLUDE COND=(7,2,CH,EQ,C'CT')\n  SORT    FIELDS=(25,4,BI,A,13,4,PD,A,9,4,BI,A)\n/*\n//*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy records in date and time sorted order and manipulate and\n* extract data we require.\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each  yte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal value sthat can be changed for display.\n*\n* Our output record will look like this:-\n*\n* Columns     Content\n*\n* 1-4         Date in packed decimal format.\n* 5-8         Unused\n* 9-16        Time in zoned decimal format.\n* 17-20       Process name in character format.\n* 25-28       Process number in binary format.\n* 29-44       C:D node name in character format.\n* 45-52       Bytes sent in binary format.\n* 53-60       Bytes recv in binary format.\n* 61-64       Condition code in binary format.\n*\n  OPTION COPY,VLSHRT\n  OUTREC FIELDS=(13,4,\n                 9:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 10:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 11:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 12:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 13:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 14:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 15:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 16:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 37,8,\n                 45,4,\n                 81,16,\n                 149,8,\n                 173,8,\n                 25,4),VTOF\n/*\n//*\n//SRT3CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Produce a summary line to append to ou report.\n*\n  OPTION  COPY\n  OUTFIL  NODETAIL,\n          TRAILER1=(X,/,2:C'Tot Copies: ',\n                    COUNT=(M10,LENGTH=9),\n                    3X,C' Tot Bytes Sent: ',TOT=(45,8,BI,\n                    EDIT=(II,III,III,III,III,III,IIT)),\n                    3X,C' Tot Bytes Recv: ',TOT=(53,8,BI,\n                    EDIT=(II,III,III,III,III,III,IIT)),14X),\n          OUTREC=(128X)\n/*\n//*\n//SRT4CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy our Condition Code counts to end of report.\n*\n  OPTION  COPY\n  OUTFIL  OUTREC=(1,121,8X)\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN statements control report production.              *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE    STOP\n SORT    FROM(INDD1)  TO(OUTDDT)   USING(SRT1)\n COPY    FROM(OUTDDT) TO(OUTDD1)   USING(SRT2)\n DISPLAY FROM(OUTDD1) LIST(OUTDD2)                                   -\n         TITLE('Daily C:D Copy Process Detail by Date and Time')     -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         BTITLE('Report for Condition Code: ') BREAK(61,4,BI)        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(9,8,ZD,E'99:99:99:99')         -\n         HEADER('Process ')        ON(17,8,CH)                       -\n         HEADER('Procnum ')        ON(25,4,BI)                       -\n         HEADER('CondCode')        ON(61,4,BI)                       -\n         HEADER('CD.Node ')        ON(29,16,CH)                      -\n         HEADER('Bytes Sent')      ON(45,8,BI)                       -\n         HEADER('Bytes Received ') ON(53,8,BI)\n COPY    FROM(OUTDD1) TO(OUTDD2)   USING(SRT3)\n OCCUR   FROM(OUTDD1) LIST(OUTDD3) BLANK                             -\n         TITLE('Condition Code Summary')                             -\n         HEADER('Condition Code')                                    -\n         HEADER('Occurrences')                                       -\n         ON(61,4,BI)                                                 -\n         ON(VALCNT)\n COPY    FROM(OUTDD3) TO(OUTDD2)   USING(SRT4)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHOUR3": {"ttr": 1806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x01 )\\x0f\\x01 )\\x0f\\tH\\x00\\xde\\x00\\xde\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:48:20", "lines": 222, "newlines": 222, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,  JOB13231\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAHOUR3.                                       *\n//*      *                                                           *\n//*      * Purpose:  Produces two output datasts. One contains a     *\n//*      *           report by hour of transfers bytes sent and      *\n//*      *           received and totals by hour.                    *\n//*      *                                                           *\n//*      *           Second one is the same data in comma delimited  *\n//*      *           format for EXCEL reporting.                     *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract copy termination records  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                     -\n         WHERE (TYPE=(CT)               -\n         STARTT=(YESTER)   -\n         STOPT=(YESTER)    -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute ICETOOL to format the records into various        *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDDT      DD    DSN=&&OUTDDT,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=VB,LRECL=4100,BLKSIZE=0,DSORG=PS)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=84,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..HOURBYTE.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=100,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&&OUTDD3,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD4      DD    DSN=&HLQSTAT..HOURBYTE.CSV.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements used to perform a variety of tasks    *\n//*      * on input records.                                         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract copy termination records in date and time order.\n*\n  OPTION  DYNALLOC,VLSHRT\n  INCLUDE COND=(7,2,CH,EQ,C'CT')\n  SORT    FIELDS=(13,4,PD,A,9,4,BI,A)\n/*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Copy records in date and time sorted order and manipulate and\n* extract data we require.\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each  yte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal value sthat can be changed for display.\n*\n* Our output record will look like this:-\n*\n* Columns     Content\n*\n* 1-4         Date in packed decimal format.\n* 5-8         Unused\n* 9-16        Time in zoned decimal format.\n* 17-20       Process name in character format.\n* 25-28       Process number in binary format.\n* 29-44       C:D node name in character format.\n* 45-52       Bytes sent in binary format.\n* 53-60       Bytes recv in binary format.\n*\n  OPTION COPY,VLSHRT\n  OUTREC FIELDS=(13,4,\n                 9:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 10:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 11:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 12:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 13:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 14:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 15:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 16:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 37,8,\n                 45,4,\n                 81,16,\n                 149,8,\n                 173,8),VTOF\n/*\n//SRT3CNTL    DD *\n*\n* Copy report and total by hour.\n*\n  OPTION COPY\n  INREC  IFTHEN=(WHEN=GROUP,\n         BEGIN=(2,5,CH,EQ,C'Hour:'),\n         PUSH=(101:2,10))\n  OUTFIL INCLUDE=(2,6,CH,EQ,C'Totals'),\n         BUILD=(DATE=(DM4-)-1,C',',101,10,C',',10,20,C',',30,20,17X)\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN statements are used to format records into reports.*\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE  STOP\n SORT  FROM(INDD1)  TO(OUTDDT) USING(SRT1)\n COPY    FROM(OUTDDT) TO(OUTDD1) USING(SRT2)\n DISPLAY FROM(OUTDD1) LIST(OUTDD2)                                   -\n         TITLE('C:D Copy Statistics')                                -\n         DATE(DMY-) TIME(24:) PAGE BLANK                             -\n         HEADER('Bytes Sent') ON(45,8,BI,A1)                         -\n         HEADER('Bytes Received') ON(53,8,BI,A1)                     -\n         BTITLE('Hour: ')                                            -\n         BREAK(9,2,ZD,E'99')                                         -\n         BCOUNT('Total Copies for this hour: ')\n DISPLAY FROM(OUTDD1) LIST(OUTDD3)                                   -\n         TITLE('C:D Copy Statistics')                                -\n         DATE(DMY-) TIME(24:) PAGE BLANK                             -\n         HEADER('Bytes Sent') ON(45,8,BI)                            -\n         HEADER('Bytes Received') ON(53,8,BI)                        -\n         BTITLE('Hour: ')                                            -\n         BTOTAL('Totals:')                                           -\n         BREAK(9,2,ZD,E'99')                                         -\n         BCOUNT('Total Copies for this hour: ')\n COPY  FROM(OUTDD3) TO(OUTDD4) USING(SRT3)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHW": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x000\\x01 )\\x0f\\x01 )\\x0f\\tI\\x000\\x000\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:49:30", "lines": 48, "newlines": 48, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAHW.                                          *\n//*      *                                                           *\n//*      * Purpose:  Base extract only of raw HW type records to a   *\n//*      *           file.                                           *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract High Concurrent Session   *\n//*      * use records.                                              *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..BASEHW.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                        -\n         WHERE (TYPE=(HW)                                  -\n         STARTT=(YESTER)                                   -\n         STOPT=(YESTER)                                    -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHWP": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x12\\x01 )\\x0f\\x01 )\\x0f\\x10&\\x00)\\x01d\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T10:26:12", "lines": 41, "newlines": 356, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAHWP                                          *\n//*      *                                                           *\n//*      * Purpose:  Execute process SESSHW to produce SVIT001I msg  *\n//*      *           in connect direct log. Shows Session High Water *\n//*      *           Mark. Can schedule job so get stats at certain  *\n//*      *           times and get automation to act on message.     *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to exexute process.                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//DMPUBLIB DD DSN=MKT01RE.JCL.CNTL.JOHNSTAT,DISP=SHR\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON\n  SUBMIT PROC=SESSHW HOLD=NO\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHWRPT": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x000\\x000\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 48, "newlines": 48, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAHWRPT.                                       *\n//*      *                                                           *\n//*      * Purpose:  Extract and report on HW and H2 records using   *\n//*      *           supplied commands.                              *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to exexute process.                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON\n  SELECT STATISTICS WHERE (TYPE=(HW)) TABLE\n  SELECT STATISTICS WHERE (TYPE=(H2)) TABLE\n  SIGNOFF\n/*\n  SIGNOFF\n/*\n  SELECT STATISTICS                                        -\n         WHERE (TYPE=(HW)                                  -\n         STARTT=(YESTER)                                   -\n         STOPT=(YESTER)                                    -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHW01": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00g\\x00g\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 103, "newlines": 103, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STAHW01.                                        *\n//*      *                                                           *\n//*      * Purpose:  Produce report from INQUIRE STATISTICS command. *\n//*      *                                                           *\n//*      *           Shows ACTIVE file pair and lists all pairs.     *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to issue INQ STATISTICS command.     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON  TMPDD=TEMPDSN\n  INQUIRE STATISTICS\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute ICETOOL to format the records into various        *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&&OUTDD2,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=160,BLKSIZE=0,DSORG=PS)\n//ACTIVE      DD    SYSOUT=*\n//REPORT      DD    SYSOUT=*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements used to perform a variety of tasks    *\n//*      * on input records.                                         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *\n  OPTION  COPY\n  INCLUDE COND=((6,8,CH,EQ,C'********'),OR,\n                (6,6,CH,EQ,C'Status',AND,\n                 44,3,CH,NE,C'Sec'))\n  OUTFIL  FNAMES=OUTDD1,OUTREC=(2,80),VTOF\n/*\n//SRT2CNTL    DD    *\n  OPTION COPY\n  INREC  IFTHEN=(WHEN=GROUP,RECORDS=2,PUSH=(81:1,80,161:SEQ=1))\n  OUTFIL FNAMES=OUTDD2,INCLUDE=(161,1,ZD,EQ,2),\n         BUILD=(81,80,1,80)\n/*\n//SRT3CNTL    DD    *\n  OPTION COPY\n  OUTFIL FNAMES=ACTIVE,INCLUDE=(101,6,CH,EQ,C'ACTIVE',\n                                OR,101,6,CH,EQ,C'Active'),\n         BUILD=(C' Active Statistics File Pair - ',\n                25,21,29X)\n/*\n//TOOLIN      DD    *\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n COPY   FROM(INDD1)  TO(OUTDD1) USING(SRT1)\n COPY   FROM(OUTDD1) TO(OUTDD2) USING(SRT2)\n COPY   FROM(OUTDD2) TO(ACTIVE) USING(SRT3)\n COPY   FROM(OUTDD2) TO(REPORT)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHW02": {"ttr": 2062, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00e\\x00e\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 101, "newlines": 101, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STAHW01.                                        *\n//*      *                                                           *\n//*      * Purpose:  Produce report from INQUIRE STATISTICS command. *\n//*      *                                                           *\n//*      *           Shows ACTIVE file pair.                         *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to issue INQ STATISTICS command.     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON  TMPDD=TEMPDSN\n  INQUIRE STATISTICS\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute ICETOOL to format the records into various        *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&&OUTDD2,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=160,BLKSIZE=0,DSORG=PS)\n//ACTIVE      DD    SYSOUT=*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements used to perform a variety of tasks    *\n//*      * on input records.                                         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *\n  OPTION  COPY\n  INCLUDE COND=((6,8,CH,EQ,C'********'),OR,\n                (6,6,CH,EQ,C'Status',AND,\n                 44,3,CH,NE,C'Sec'))\n  OUTFIL  FNAMES=OUTDD1,OUTREC=(2,80),VTOF\n/*\n//SRT2CNTL    DD    *\n  OPTION COPY\n  INREC  IFTHEN=(WHEN=GROUP,RECORDS=2,PUSH=(81:1,80,161:SEQ=1))\n  OUTFIL FNAMES=OUTDD2,INCLUDE=(161,1,ZD,EQ,2),\n         BUILD=(81,80,1,80)\n/*\n//SRT3CNTL    DD    *\n  OPTION COPY\n  OUTFIL FNAMES=ACTIVE,INCLUDE=(101,6,CH,EQ,C'ACTIVE',\n                                OR,101,6,CH,EQ,C'Active'),\n         BUILD=(C' Active Statistics File Pair - ',\n                25,21,29X)\n/*\n//TOOLIN      DD    *\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n COPY   FROM(INDD1)  TO(OUTDD1) USING(SRT1)\n COPY   FROM(OUTDD1) TO(OUTDD2) USING(SRT2)\n COPY   FROM(OUTDD2) TO(ACTIVE) USING(SRT3)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHW03": {"ttr": 2065, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00^\\x00^\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 94, "newlines": 94, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STAHW01.                                        *\n//*      *                                                           *\n//*      * Purpose:  Produce report from INQUIRE STATISTICS command. *\n//*      *                                                           *\n//*      *           Shows all file pairs.                           *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to issue INQ STATISTICS command.     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON  TMPDD=TEMPDSN\n  INQUIRE STATISTICS\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute ICETOOL to format the records into various        *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&&OUTDD2,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=160,BLKSIZE=0,DSORG=PS)\n//REPORT      DD    SYSOUT=*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements used to perform a variety of tasks    *\n//*      * on input records.                                         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *\n  OPTION  COPY\n  INCLUDE COND=((6,8,CH,EQ,C'********'),OR,\n                (6,6,CH,EQ,C'Status',AND,\n                 44,3,CH,NE,C'Sec'))\n  OUTFIL  FNAMES=OUTDD1,OUTREC=(2,80),VTOF\n/*\n//SRT2CNTL    DD    *\n  OPTION COPY\n  INREC  IFTHEN=(WHEN=GROUP,RECORDS=2,PUSH=(81:1,80,161:SEQ=1))\n  OUTFIL FNAMES=OUTDD2,INCLUDE=(161,1,ZD,EQ,2),\n         BUILD=(81,80,1,80)\n/*\n//TOOLIN      DD    *\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n COPY   FROM(INDD1)  TO(OUTDD1) USING(SRT1)\n COPY   FROM(OUTDD1) TO(OUTDD2) USING(SRT2)\n COPY   FROM(OUTDD2) TO(REPORT)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAHW04": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00n\\x00n\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 110, "newlines": 110, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STAHW04.                                        *\n//*      *                                                           *\n//*      * Purpose:  Produce report from INQUIRE STATISTICS command. *\n//*      *                                                           *\n//*      *           Shows ACTIVE file pair.                         *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to issue INQ STATISTICS command.     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON  TMPDD=TEMPDSN\n  INQUIRE STATISTICS\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute ICETOOL to format the records into various        *\n//*      * reports.                                                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&&OUTDD2,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=160,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&&OUTDD3,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//ACTIVE      DD    SYSOUT=*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements used to perform a variety of tasks    *\n//*      * on input records.                                         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *\n  OPTION  COPY\n  INCLUDE COND=((6,8,CH,EQ,C'********'),OR,\n                (6,6,CH,EQ,C'Status',AND,\n                 44,3,CH,NE,C'Sec'))\n  OUTFIL  FNAMES=OUTDD1,OUTREC=(2,80),VTOF\n/*\n//SRT2CNTL    DD    *\n  OPTION COPY\n  INREC  IFTHEN=(WHEN=GROUP,RECORDS=2,PUSH=(81:1,80,161:SEQ=1))\n  OUTFIL FNAMES=OUTDD2,INCLUDE=(161,1,ZD,EQ,2),\n         BUILD=(81,80,1,80)\n/*\n//SRT3CNTL    DD    *\n  OPTION COPY\n  OUTFIL FNAMES=OUTDD3,INCLUDE=(101,6,CH,EQ,C'ACTIVE',\n                                OR,101,6,CH,EQ,C'Active'),\n         BUILD=(C' Active Statistics File Pair - ',\n                25,21,28X)\n/*\n//TOOLIN      DD    *\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n COPY   FROM(INDD1)  TO(OUTDD1) USING(SRT1)\n COPY   FROM(OUTDD1) TO(OUTDD2) USING(SRT2)\n COPY   FROM(OUTDD2) TO(OUTDD3) USING(SRT3)\n DISPLAY FROM(OUTDD3) LIST(ACTIVE)                                   -\n  TITLE('Active Statistics File Pair Report ')                       -\n  DATE(DMY/) TIME(24:)  PAGE BLANK                                   -\n  NOHEADER   INDENT(3)  ON(50,3,CH)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAINDEX": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00X\\x01\\x191o\\x01 (\\x7f\\x13G\\x00\\x05\\x00\\x05\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-11-12T00:00:00", "modifydate": "2020-10-13T13:47:58", "lines": 5, "newlines": 5, "modlines": 0, "user": "BRADLEY"}, "text": "1. Run STAESDS.\n2. Run STAKSDS.\n3. RUN STAREPRO.\n4. Run STAKEY.\n5. In IUI issue SS and put ksds only from what you have created on second panel.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAINQ": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00'\\x00'\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 39, "newlines": 39, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAINQ.                                         *\n//*      *                                                           *\n//*      * Purpose:  Execute inq statdir in batch.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//DMBATCH.SYSIN DD  *\n  SIGNON\n  INQ    STATDIR\n  SIGNOFF\n/*\n//*      * Execute C:D in batch to exexute process.                  *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON\n  SELECT STATISTICS WHERE (TYPE=(HW)) TABLE\n  SELECT STATISTICS WHERE (TYPE=(H2)) TABLE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAINQ2": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 29, "newlines": 29, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAINQ2.                                        *\n//*      *                                                           *\n//*      * Purpose:  Report on current status of all statistics      *\n//*      *           files.                                          *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//DMBATCH.SYSIN DD  *\n  SIGNON\n  INQ    STATISTICS\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAKEY": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\x17\\x00\\x17\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 23, "newlines": 23, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAKEY.                                         *\n//*      *                                                           *\n//*      * Purpose:  Basically build KSDS for a restored ESDS.       *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//LIST        EXEC  PGM=DGADBKEY,PARM=CONSOLIDATE\n//STEPLIB     DD    DSN=&CDLOAD,DISP=SHR\n//ESDS01      DD    DSN=&HLQREST..ESDS,DISP=SHR\n//KSDS01      DD    DSN=&HLQREST..KSDS,DISP=SHR\n//SYSOUT      DD    SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAKSDS": {"ttr": 2318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00)\\x00)\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 41, "newlines": 41, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAKSDS.                                        *\n//*      *                                                           *\n//*      * Purpose:  Manually define ksds for restored archive file. *\n//*      *           Amend any input fields prefixed \u00a2\u00a2.             *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  PGM=IDCAMS,REGION=8M\n//SYSPRINT    DD    SYSOUT=*\n//SYSIN       DD    *\n  DEFINE CLUSTER                                           -\n    (NAME(\u00a2\u00a2DSNAME.KSDS)                                   -\n     VOLUMES(\u00a2\u00a2VOLSER)                                     -\n     INDEXED                                               -\n     NOIMBED                                               -\n     REUSE                                                 -\n     NOREPLICATE                                           -\n     FREESPACE(10 5)                                       -\n     KEYS (27 0)                                           -\n     RECORDSIZE(32 78)                                     -\n     SHAREOPTIONS(2))                                      -\n    DATA                                                   -\n     (CONTROLINTERVALSIZE(4096)                            -\n      RECORDS(5000)                                        -\n      NAME(\u00a2\u00a2DSNAME.KSDS.DATA))                            -\n    INDEX                                                  -\n     (CONTROLINTERVALSIZE(512)                             -\n      NAME(\u00a2\u00a2DSNAME.KSDS.INDEX))\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STALNGF": {"ttr": 2320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\xa7\\x00\\xa7\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 167, "newlines": 167, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STALNGF.                                        *\n//*      *                                                           *\n//*      * Purpose:  Extract FI records and produce a report by      *\n//*      *           process name of all long file names.            *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT  SYMLIST=(DTE)\n//           SET     DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract long filename records     *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                       -\n         WHERE (TYPE=FI                                   -\n         STARTT=(YESTER)                                  -\n         STOPT=(YESTER)                                   -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute ICETOOL to produce the various formatted  *\n//*      * data required.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=1060,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..LFRPT1.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=1060,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements are used to format the statistics     *\n//*      * into the various reports we require.                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  SORT FIELDS=(37,8,CH,A,13,4,PD,A,9,4,BI,A)\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n  OUTFIL  OUTREC=(13,4,                * - Date            1-4\n                  29,8,                * - Error Message   5-12\n                  13:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  14:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  15:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  16:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  17:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  18:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  19:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  20:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  37,8,                * - Process name    21-28\n                  45,4,                * - Process number  29-32\n                  187,1024,            * - File name       33-1056\n                  4X),VTOF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN directs ICETOOL to perform various pieces of       *\n//*      * processing to create records and reports we require.      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -\n         TITLE('Daily C:D Error Message Report')                     -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         HEADER('Date    ')          ON(1,4,PD,E'9999.999')          -\n         HEADER('Time    ')          ON(13,8,ZD,E'99:99:99:99')      -\n         HEADER('Process ')          ON(21,8,CH)                     -\n         HEADER('Procnum ')          ON(29,4,BI)                     -\n         HEADER('File Name Length')  ON(33,2,BI)                     -\n         HEADER('Long File Name')    ON(35,1024,CH)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STANM": {"ttr": 2324, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STANM.                                          *\n//*      *                                                           *\n//*      * Purpose:  Extract only NM type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..NMX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=NM,EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STANMRPT": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\xb2\\x00\\xb2\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 178, "newlines": 178, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RE1 JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STANMRPT.                                       *\n//*      *                                                           *\n//*      * Purpose:  Extract NM records and produce a report by      *\n//*      *           date and time showing any updates/changes.      *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT  SYMLIST=(DTE)\n//           SET     DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract netmap records            *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                       -\n         WHERE (TYPE=NM                                   -\n         STARTT=(YESTER)                                  -\n         STOPT=(YESTER)                                   -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute ICETOOL to produce the various formatted  *\n//*      * data required.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=1060,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..NMRPT1.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=1060,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements are used to format the statistics     *\n//*      * into the various reports we require.                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  SORT FIELDS=(13,4,PD,A,9,4,BI,A)\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n  OUTFIL  OUTREC=(13,4,                * - Date            1-4\n                  13:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  14:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  15:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  16:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  17:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  18:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  19:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  20:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  41,64,               * - Userid          13-66\n                  105,16               * - Node Name       67-72\n                  115,4,               * - File name       73-76\n                  4X),VTOF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN directs ICETOOL to perform various pieces of       *\n//*      * processing to create records and reports we require.      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE    STOP\n SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -\n         TITLE('Daily C:D Error Message Report')                     -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         HEADER('Date    ')          ON(1,4,PD,E'9999.999')          -\n         HEADER('Time    ')          ON(13,8,ZD,E'99:99:99:99')      -\n         HEADER('Process ')          ON(21,8,CH)                     -\n         HEADER('Procnum ')          ON(29,4,BI)                     -\n         HEADER('File Name Length')  ON(33,2,BI)                     -\n         HEADER('Long File Name')    ON(35,1024,CH)\n/*\n//*\n//*\n                 13:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 14:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 15:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                 16:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                 37,8,\n                 45,4,\n                 81,16,\n                 149,8,\n                 173,8),VTOF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STANMU": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STANMU.                                         *\n//*      *                                                           *\n//*      * Purpose:  Extract only UM type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..UMX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=UM,EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAPS": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STAPS.                                          *\n//*      *                                                           *\n//*      * Purpose:  Extract only PS type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..PSX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=PS EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAPSREX": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00R\\x01 (o\\x01 (\\x8f\\t\\x14\\x005\\x00\\x1d\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2020-10-12T00:00:00", "modifydate": "2020-10-14T09:14:52", "lines": 53, "newlines": 29, "modlines": 0, "user": "BRADLEY"}, "text": "/* REXX */\n\n/*\n\n   This REXX Exec executes to reformat PS type records so they can\n   be processed using DFSORT.\n\n   The records have a format that does not lend itself to extraction\n   by DFSORT so rather than writing a full report program I\n   modify the records to have '/' in certain positions then DFSORT can\n   be used to extract the fields and ICETOOL produces a report for us.\n\n   The program is used in STAPSRPT.\n\n*/\n\n EOF = \"NO\"                            /* Set EOF to NO for loop.   */\n\n DO WHILE EOF = 'NO'                   /* Start loop.               */\n   \"EXECIO 1 DISKR INPUT\"              /* Read single record.       */\n   IF RC =  2 THEN                     /* End of file?              */\n    DO\n     EOF = 'YES'                       /* Flag end of file.         */\n     EXIT 0                            /* Get out return code 0.    */\n    END\n\n   PULL REC                            /* Not EOF then get record.  */\n\n/*\n   We need to extract 1 byte field at byte 133 to get offset to\n   fields we want to manipulate.\n*/\n\n   OFFSET = X2D(C2X(SUBSTR(REC,133,1)))\n   FLD1OFF = OFFSET + 134              /* Set offset to field 1.    */\n   FLD2OFF = OFFSET + 142              /* Set offste to field 2.    */\n   REC1 = SUBSTR(REC,1,133)            /* Get bytes 1 to 133.       */\n   REC2 = '/'                          /* Insert a /.               */\n   REC3 = SUBSTR(REC,134,OFFSET)       /* Move variable field in.   */\n   REC4 = '/'                          /* Insert a /.               */\n   REC5 = SUBSTR(REC,FLD1OFF,8)        /* Pull 8 bytes at offset 1. */\n   REC6 = '/'                          /* Insert a /.               */\n   REC7 = SUBSTR(REC,FLD2OFF,8)        /* Pull 8 bytes at offset 2. */\n   REC8 = '/'                          /* Insert a /.               */\n\n/* Build new record format with '/' delimiters.                     */\n\n   REC = REC1||REC2||REC3||REC4||REC5||REC6||REC7||REC8\n   PUSH REC                            /* Put back onto stack.      */\n   \"EXECIO 1 DISKW OUTPUT\"             /* Write new record.         */\n  END                                  /* Loop for next record.     */\n\nEXIT 0                                 /* Default finish RC=0.      */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STAPSRPT": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x01\\x0c\\x01\\x0c\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 268, "newlines": 268, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAPSRPT                                        *\n//*      *                                                           *\n//*      * Purpose:  Extract PS records where and produce reports.   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT  SYMLIST=(DTE)\n//           SET     DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract process termination recs  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                       -\n         WHERE (TYPE=PS                                   -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We execute DFSORT to extract fields we require for        *\n//*      * processing by REXX reformatting program STAPSREX.         *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=SORT\n//SORTIN      DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//SORTOUT     DD    DSN=&&REXXIN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=208,BLKSIZE=0)\n//SYSOUT      DD    SYSOUT=*\n//SYSIN       DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  OPTION COPY,VLSHRT\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n  OUTFIL  OUTREC=(1:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  2:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  3:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  4:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  5:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  6:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  7:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  8:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  13,4,                * - Date            9-12\n                  29,8,                * - Error Message   12-19\n                  37,8,                * - Process name    20-27\n                  45,4,                * - Process number  28-31\n                  137,16,              * - Primary node    32-46\n                  153,16,              * - Secondary node  47-62\n                  25,4,                * - Cond Code       63-56\n                  73,64,               * - Userid          57-120\n                  330,76),VTOF         * - Rest            121-196\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute REXX in batch to tailor records as they   *\n//*      * are not in the correct format to extract data we need.    *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP3       EXEC  PGM=IRXJCL,PARM='STAPSREX'\n//INPUT       DD    DSN=&&REXXIN,DISP=(OLD,DELETE)\n//OUTPUT      DD    DSN=&&REXXOUT,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=208,BLKSIZE=0)\n//SYSEXEC     DD    DSN=&STACNTL,DISP=SHR\n//SYSTSPRT    DD    SYSOUT=*\n//SYSTSIN     DD    DUMMY\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute ICETOOL to produce the various formatted  *\n//*      * data required.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP3       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&REXXOUT,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=208,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..PSRPT1.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=217,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&HLQSTAT..PSRPT2.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=217,BLKSIZE=0,DSORG=PS)\n//OUTDD4      DD    DSN=&HLQSTAT..PSRPT3.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=217,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements are used to format the statistics     *\n//*      * into the various reports we require.                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields. using the '/' fields added by STAPSREX as\n* delimiters.\n*\n* This result sin the variable field at byte 134 being placed at the\n* end of the record as a fixed 58 byte field.\n*\n  SORT  FIELDS=(13,8,CH,A,9,4,PD,A,1,8,ZD,A)\n  INREC IFTHEN=(WHEN=INIT,\n                PARSE=(%01=(ABSPOS=135,ENDBEFR=C'/',FIXLEN=58),\n                       %02=(ENDBEFR=C'/',FIXLEN=8),\n                       %03=(ENDBEFR=C'/',FIXLEN=8)),\n                BUILD=(1,134,%02,%03,%01))\n  OUTFIL  OUTREC=(1,208)\n/*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  OPTION COPY\n  OUTFIL OUTREC=(1,121,96X)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN directs ICETOOL to perform various pieces of       *\n//*      * processing to create records and reports we require.      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE    STOP\n SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -\n         TITLE('Daily C:D Process Submit Report')                    -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         HEADER('Message ID')      ON(13,8,CH)                       -\n         HEADER('Date    ')        ON(9,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(1,8,ZD,E'99;99:99:99')         -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(65,4,BI)                       -\n         HEADER('Primary Node ')   ON(33,16,CH)                      -\n         HEADER('Secondary Node ') ON(49,16,CH)                      -\n         HEADER('Userid ')         ON(69,8,CH)                       -\n         HEADER('Job/Task Name')   ON(135,8,CH)                      -\n         HEADER('Job/Task No. ')   ON(143,8,CH)                      -\n         HEADER('Submitted From')  ON(151,58,CH)\n*\n DISPLAY FROM(OUTDD1)    LIST(OUTDD3)                                -\n         TITLE('Daily C:D Process Submit Report')                    -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         BTITLE('Report BY MESSAGE ID: ')     BREAK(13,8,CH)          -\n         HEADER('Message ID')      ON(13,8,CH)                       -\n         HEADER('Date    ')        ON(9,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(1,8,ZD,E'99;99:99:99')         -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(65,4,BI)                       -\n         HEADER('Primary Node ')   ON(33,16,CH)                      -\n         HEADER('Secondary Node ') ON(49,16,CH)                      -\n         HEADER('Userid ')         ON(69,8,CH)                       -\n         HEADER('Job/Task Name')   ON(135,8,CH)                      -\n         HEADER('Job/Task No. ')   ON(143,8,CH)                      -\n         HEADER('Submitted From')  ON(151,58,CH)\n*\n OCCUR   FROM(OUTDD1)    LIST(OUTDD4) BLANK                          -\n         TITLE('Message Summary')                                    -\n         HEADER('Message')                                           -\n         HEADER('Occurrences')                                       -\n         ON(13,8,CH)                                                 -\n         ON(VALCNT)\n*\n COPY    FROM(OUTDD4) TO(OUTDD2)   USING(SRT2)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAPT": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STAPT.                                          *\n//*      *                                                           *\n//*      * Purpose:  Extract only PT type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..PTX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=PT EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAPTRPT": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\xce\\x00\\xce\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 206, "newlines": 206, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAPTRPT                                        *\n//*      *                                                           *\n//*      * Purpose:  Extract PT records where CC>0 and produce       *\n//*      *           error message reports.                          *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT  SYMLIST=(DTE)\n//           SET     DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract process termination recs  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                       -\n         WHERE (TYPE=PT CCODE=(GT,0)                      -\n         STARTT=(YESTER)                                  -\n         STOPT=(YESTER)                                   -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute ICETOOL to produce the various formatted  *\n//*      * data required.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..PTRPT1.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&HLQSTAT..PTRPT2.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//OUTDD4      DD    DSN=&HLQSTAT..PTRPT3.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements are used to format the statistics     *\n//*      * into the various reports we require.                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  SORT FIELDS=(29,8,CH,A,13,4,PD,A,9,4,BI,A)\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n  OUTFIL  OUTREC=(13,4,                * - Date            1-4\n                  29,8,                * - Error Message   5-12\n                  13:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  14:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  15:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  16:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  17:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  18:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  19:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  20:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  37,8,                * - Process name    21-28\n                  45,4,                * - Process number  29-32\n                  57,16,               * - CD Node         33-48\n                  25,4,                * - Cond Code       49-52\n                  28X),VTOF\n/*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  OPTION COPY\n  OUTFIL OUTREC=(1,121)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN directs ICETOOL to perform various pieces of       *\n//*      * processing to create records and reports we require.      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any errors occur.\n*\n MODE   STOP\n SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -\n         TITLE('Daily C:D Process in Error Message Report')          -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         HEADER('Error Message')   ON(5,8,CH)                        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(49,4,BI)                       -\n         HEADER('CD.Node ')        ON(33,16,CH)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD3)                                -\n         TITLE('Daily C:D Process in Error Message Report')          -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         BTITLE('Report for error message: ') BREAK(5,8,CH)          -\n         HEADER('Error Message')   ON(5,8,CH)                        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(49,4,BI)                       -\n         HEADER('CD.Node ')        ON(33,16,CH)\n OCCUR   FROM(OUTDD1)    LIST(OUTDD4) BLANK                          -\n         TITLE('Error Message Summary')                              -\n         HEADER('Error Message')                                     -\n         HEADER('Occurrences')                                       -\n         ON(5,8,CH)                                                  -\n         ON(VALCNT)\n COPY    FROM(OUTDD4) TO(OUTDD2)   USING(SRT2)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAPTRP2": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\xce\\x00\\xce\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 206, "newlines": 206, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAPTRP2                                        *\n//*      *                                                           *\n//*      * Purpose:  Extract PT records where CC=0 and produce       *\n//*      *           count of all process terminations for 24 hours. *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT  SYMLIST=(DTE)\n//           SET     DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute C:D in batch to extract process termination recs  *\n//*      * from yesterday.                                           *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&&TEMPDSN,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                                       -\n         WHERE (TYPE=PT CCODE=(EQ,0)                      -\n         STARTT=(YESTER)                                  -\n         STOPT=(YESTER)                                   -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * We then execute ICETOOL to produce the various formatted  *\n//*      * data required.                                            *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=ICETOOL,REGION=2M,COND=(0,LT)\n//TOOLMSG     DD    SYSOUT=*\n//DFSMSG      DD    SYSOUT=*\n//INDD1       DD    DSN=&&TEMPDSN,DISP=(OLD,DELETE)\n//OUTDD1      DD    DSN=&&OUTDD1,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)\n//OUTDD2      DD    DSN=&HLQSTAT..PTRPT4.D&DTE,\n//            DISP=(MOD,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//OUTDD3      DD    DSN=&HLQSTAT..PTRPT5.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//OUTDD4      DD    DSN=&HLQSTAT..PTRPT6.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,10),RLSE),\n//            DCB=(RECFM=FBA,LRECL=121,BLKSIZE=0,DSORG=PS)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SRTxCNTL statements are used to format the statistics     *\n//*      * into the various reports we require.                      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//SRT1CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  SORT FIELDS=(29,8,CH,A,13,4,PD,A,9,4,BI,A)\n*\n* Extract date.\n*\n* Next we have to extract and format the time field, Unfortunately\n* this is complicated by the fact that the time in the statistics\n* records is stored as a fullword value in hex but using decimal.\n*\n* So for example if the time the record was recorded was 23:01:10:53\n* we would have four bytes with each nibble being a character. So:-\n*\n* Byte 1 - Bits 1 - 4 = 2\n* Byte 1 - Bits 5 - 8 = 3\n* Byte 2 - Bits 1 - 4 = 0\n* Byte 2 - Bits 5 - 8 = 1\n* Byte 3 - Bits 1 - 4 = 1\n* Byte 3 - Bits 5 - 8 = 0\n* Byte 4 - Bits 1 - 4 = 5\n* Byte 4 - Bits 5 - 8 = 3\n*\n* This complicates extraction because we cannot just reformat the\n* data using built-in formats.\n*\n* What we need to do is manipulate each nibble so we end up with\n* an 8 byte ZONED DECIMAL containing the time.\n*\n* To do this we need to work on each byte twice. First we use DIV\n* to divide the first four bits of the byte and then add 240 to it\n* to get the zoned decimal value. In this case we change 2 in bits 1-4\n* to be two a single byte containing F2.\n*\n* We use 240 because it is x'F0' so we can get a zoned decimal field.\n*\n* Next we use MOD to get the remainder of the first byte and add 240 to it.\n* This extracts the last 4 bits of the byte and turns it into F3 for us.\n*\n* We perform the same operation on each byte and end up with the\n* following:-\n*\n* F2F3F0F1F1F0F5F3\n*\n* We now have zoned decimal values that can be changed for display.\n*\n  OUTFIL  OUTREC=(13,4,                * - Date            1-4\n                  29,8,                * - Success Message 5-12\n                  13:9,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  14:9,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  15:10,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  16:10,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  17:11,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  18:11,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  19:12,1,BI,DIV,+16,ADD,+240,TO=BI,LENGTH=1,\n                  20:12,1,BI,MOD,+16,ADD,+240,TO=BI,LENGTH=1,\n                  37,8,                * - Process name    21-28\n                  45,4,                * - Process number  29-32\n                  57,16,               * - CD Node         33-48\n                  25,4,                * - Cond Code       49-52\n                  28X),VTOF\n/*\n//SRT2CNTL    DD    *,SYMBOLS=JCLONLY\n*\n* Extract required fields.\n*\n  OPTION COPY\n  OUTFIL OUTREC=(1,121)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * TOOLIN directs ICETOOL to perform various pieces of       *\n//*      * processing to create records and reports we require.      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//TOOLIN      DD    *,SYMBOLS=JCLONLY\n*\n* Mode for operations is to fail if any Successs occur.\n*\n MODE   STOP\n SORT    FROM(INDD1)     TO(OUTDD1)    USING(SRT1)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD2)                                -\n         TITLE('Daily C:D Process Termination CC=0 Report')          -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         HEADER('Success Message') ON(5,8,CH)                        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(49,4,BI)                       -\n         HEADER('CD.Node ')        ON(33,16,CH)\n DISPLAY FROM(OUTDD1)    LIST(OUTDD3)                                -\n         TITLE('Daily C:D Process Termination CC=0 Report')          -\n         DATE(DMY-)                                                  -\n         TIME(24:)                                                   -\n         PAGE                                                        -\n         BLANK                                                       -\n         BTITLE('Report for successful processes: ') BREAK(5,8,CH)   -\n         HEADER('Success Message') ON(5,8,CH)                        -\n         HEADER('Date    ')        ON(1,4,PD,E'9999.999')            -\n         HEADER('Time    ')        ON(13,8,ZD,E'99:99:99:99')        -\n         HEADER('Process ')        ON(21,8,CH)                       -\n         HEADER('Procnum ')        ON(29,4,BI)                       -\n         HEADER('CondCode')        ON(49,4,BI)                       -\n         HEADER('CD.Node ')        ON(33,16,CH)\n OCCUR   FROM(OUTDD1)    LIST(OUTDD4) BLANK                          -\n         TITLE('Success Message Summary')                            -\n         HEADER('Success Message')                                   -\n         HEADER('Occurrences')                                       -\n         ON(5,8,CH)                                                  -\n         ON(VALCNT)\n COPY    FROM(OUTDD4) TO(OUTDD2)   USING(SRT2)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STARE": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STARE.                                          *\n//*      *                                                           *\n//*      * Purpose:  Extract only RE type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * PREgrammer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..REX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=RE EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STARECS": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x000\\x000\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 48, "newlines": 48, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STARECS.                                        *\n//*      *                                                           *\n//*      * Purpose:  Example of extracting statistics from current   *\n//*      *           online statistics files to a PS dataset.        *\n//*      *                                                           *\n//*      *           NOTE: See C:D supplied SDGAMAC dataset for      *\n//*      *                 various record formats.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..CTRECS,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=4100,BLKSIZE=0)\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Code statistics records to extract after TYPE=            *\n//*      *                                                           *\n//*      * Here we are extracting Copy Termination reords (CT).      *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS                     -\n         WHERE (TYPE=(CT)               -\n         EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAREPRO": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:35", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01REG JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAREPRO.                                       *\n//*      *                                                           *\n//*      * Purpose:  Repro GDG of archived statistics into new       *\n//*      *           ESDS.                                           *\n//*      *                                                           *\n//*      *           Amend \u00a2\u00a2DSNAME to reflect name of new ESDS.     *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//LIST        EXEC  PGM=IDCAMS\n//ARCHIN      DD    DSN=&HLQGDG..G1240V00,\n//            DISP=SHR\n//SYSPRINT    DD    SYSOUT=*\n//SYSIN       DD    *\n  REPRO INFILE(ARCHIN)                     -\n        OUTDATASET(\u00a2\u00a2DSNAME.ESDS)\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STARJ": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:36", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STARJ.                                          *\n//*      *                                                           *\n//*      * Purpose:  Extract only RJ type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..RJX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=RJ EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STARO": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00!\\x00!\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:36", "lines": 33, "newlines": 33, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * JOB NAME: STARO.                                          *\n//*      *                                                           *\n//*      * Purpose:  Extract only RO type records.                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//TEMPDSN     DD    DSN=&HLQSTAT..ROX,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBA,LRECL=4100,BLKSIZE=0)\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON TMPDD=TEMPDSN\n  SELECT STATISTICS WHERE (TYPE=RO EXCLUDE=(WTO,MEMB)) FILE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STASMF01": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00 \\x01 )\\x0f\\x01 )\\x0f\\x106\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T10:36:20", "lines": 138, "newlines": 138, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STASMF01.                                       *\n//*      *                                                           *\n//*      * Purpose:  Produce a report using supplied C:D programs    *\n//*      *           using SMF 133 records as input. Requires V6.0   *\n//*      *           of C:D or higher.                               *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute supplied REXX DGA#SUM from SYS1.CDI.SDGAISPC.     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//REX         PROC  ARG1=,\n//            ARG2=,ARG3=,ARG4=,ARG5=,ARG6=,ARG7=,ARG8=,ARG9=\n//STEP1       EXEC  PGM=IRXJCL,\n// PARM='DGA#SUM &ARG1 &ARG2 &ARG3 &ARG4 &ARG5 &ARG6 &ARG7 &ARG8 &ARG9'\n//SYSEXEC     DD    DISP=SHR,DSN=SYS1.CDI.SDGAISPC\n//SYSTSPRT    DD    SYSOUT=*\n//SYSTSIN     DD    DUMMY,DCB=BLKSIZE=80\n//SMFIN       DD    DSN=&&TEMP03,DISP=(OLD,DELETE)\n//REPORT      DD    SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330)\n//            PEND\n//*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Extract TYPE 133 from SMF. Change INDD1 to reflect input  *\n//*      * SMF dataset.                                              *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  PGM=IFASMFDP\n//SYSPRINT    DD    SYSOUT=*\n//INDD1       DD    DISP=SHR,DSN=\u00a2\u00a2 YOUR SMF DATASET RECORDS \u00a2\u00a2\n//OUTDD       DD    DSN=&&TEMP01,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBS)\n//SYSIN       DD    *\n  INDD(INDD1,OPTIONS(DUMP))\n  OUTDD(OUTDD,TYPE(133))\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SORT the SMF records by DATE and TIME then build output   *\n//*      * records when they are 512 bytes in length and type 133    *\n//*      * only.                                                     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=SORT\n//SYSOUT      DD    SYSOUT=*\n//SYSPRINT    DD    SYSOUT=*\n//SORTIN      DD    DSN=&&TEMP01,DISP=(OLD,DELETE)\n//SORTOUT     DD    DSN=&&TEMP02,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=512)\n//SYSIN       DD    *\n  OPTION EQUALS\n  SORT   FIELDS=(11,4,PD,A,7,4,BI,A)\n  OUTFIL INCLUDE=(1,2,BI,EQ,512,                 * Length=512\n                  AND,6,1,BI,EQ,133)             * Type=133\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Next we SORT again this time by DATE and TIME and we      *\n//*      * extract SUBTYPE 2 HW type records.                        *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP3       EXEC  PGM=SORT\n//SYSOUT      DD    SYSOUT=*\n//SYSPRINT    DD    SYSOUT=*\n//SORTIN      DD    DSN=&&TEMP02,DISP=(OLD,DELETE)\n//SORTOUT     DD    DSN=&&TEMP03,DISP=(,PASS),\n//            UNIT=SYSDA,SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=512)\n//SYSIN       DD    *\n  OPTION EQUALS\n  SORT   FIELDS=(11,4,PD,A,7,4,BI,A)             * Date & Time\n  OUTFIL INCLUDE=(23,2,BI,EQ,2,                  * Subtype=2\n                  AND,19,4,CH,EQ,C'CDHW')        * CDHW eyecatcher\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Next we execute our instream procedure to produce the     *\n//*      * formatted report.                                         *\n//*      *                                                           *\n//*      * We literally just select anything with what is coded.     *\n//*      * By changing the various parameters you can be more        *\n//*      * selective.                                                *\n//*      *                                                           *\n//*      * This step returns code of 1 if records are found.         *\n//*      *                                                           *\n//*      * ARG1 - Start time.                                        *\n//*      * ARG2 - Stop time.                                         *\n//*      * ARG3 - IJI - Ignore jobid.                                *\n//*      * ARG4 - ISM - Ignore smfid.                                *\n//*      * ARG5 - LIR - List ignored records.                        *\n//*      * ARG6 - LINECT(0) Line count defaults to 66.               *\n//*      * ARG7 - TYEP(133) process TYPE 133 records.                *\n//*      * ARG8 - SUBTYPE(2) with subtype of 2.                      *\n//*      * ARG9 - null not used.                                     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP4       EXEC  REX,ARG1='START(2000/01/01-00:00)',\n//            ARG2='STOP(2100/12/31-23:59)',\n//            ARG3='IJI',\n//            ARG4='ISM',\n//            ARG5='LIR',\n//            ARG6='LINECT(0)',\n//            ARG7='TYPE(133)',\n//            ARG8='SUBTYPE(2)',\n//            ARG9=\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STASMF02": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x01 )\\x0f\\x01 )\\x0f\\x106\\x00m\\x00m\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T10:36:34", "lines": 109, "newlines": 109, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STASMF02.                                       *\n//*      *                                                           *\n//*      * Purpose:  Produce a CSV file supplied C:D programs        *\n//*      *           using SMF 133 records as input. Requires V6.0   *\n//*      *           of C:D or higher.                               *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Extract TYPE 133 from SMF. Change INDD1 to reflect input  *\n//*      * SMF dataset.                                              *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  PGM=IFASMFDP\n//SYSPRINT    DD    SYSOUT=*\n//INDD1       DD    DISP=SHR,DSN=\u00a2\u00a2 YOUR SMF DATASET RECORDS \u00a2\u00a2\n//OUTDD       DD    DSN=&&TEMP01,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBS)\n//SYSIN       DD    *\n  INDD(INDD1,OPTIONS(DUMP))\n  OUTDD(OUTDD,TYPE(133))\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SORT the SMF records by DATE and TIME then build output   *\n//*      * records when they are 512 bytes in length and type 133    *\n//*      * only.                                                     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=SORT\n//SYSOUT      DD    SYSOUT=*\n//SYSPRINT    DD    SYSOUT=*\n//SORTIN      DD    DSN=&&TEMP01,DISP=(OLD,DELETE)\n//SORTOUT     DD    DSN=&&TEMP02,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=512)\n//SYSIN       DD    *\n  OPTION EQUALS\n  SORT   FIELDS=(11,4,PD,A,7,4,BI,A)\n  OUTFIL INCLUDE=(1,2,BI,EQ,512,                 * Length=512\n                  AND,6,1,BI,EQ,133)             * Type=133\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Next we SORT again this time by DATE and TIME and we      *\n//*      * extract SUBTYPE 2 HW type records.                        *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP3       EXEC  PGM=SORT\n//SYSOUT      DD    SYSOUT=*\n//SYSPRINT    DD    SYSOUT=*\n//SORTIN      DD    DSN=&&TEMP02,DISP=(OLD,DELETE)\n//SORTOUT     DD    DSN=&&TEMP03,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=512)\n//SYSIN       DD    *\n  OPTION EQUALS\n  SORT   FIELDS=(11,4,PD,A,7,4,BI,A)             * Date & Time\n  OUTFIL INCLUDE=(23,2,BI,EQ,2,                  * Subtype=2\n                  AND,19,4,CH,EQ,C'CDHW')        * CDHW eyecatcher\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute DGA#CSV REXX to create comma delimited output.    *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP4       EXEC  PGM=IRXJCL,\n// PARM='DGA#CSV NODATETIME(0) NOPLEXNAME(-STAND-ALONE-)'\n//SYSEXEC     DD    DISP=SHR,DSN=SYS1.CDI.SDGAISPC\n//SYSTSPRT    DD    SYSOUT=*\n//SYSTSIN     DD    DUMMY,DCB=BLKSIZE=80\n//IN          DD    DSN=&&TEMP03,DISP=(OLD,DELETE)\n//OUT         DD    DSN=&HLQSTAT..HWCSV.D&DTE,\n//            DISP=(NEW,CATLG),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=FB,LRECL=512)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STASMF03": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01 )\\x0f\\x01 )\\x0f\\x106\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T10:36:47", "lines": 31, "newlines": 31, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STASMF03.                                       *\n//*      *                                                           *\n//*      * Purpose:  Example of extracting custom smf record written *\n//*      *           by DGAXSMF exit.                                *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1     JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1    INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  PGM=IFASMFDP\n//DUMPIN      DD    ,DISP=SHR,DSN=\u00a2\u00a2 YOUR SMF DATASET RECORDS \u00a2\u00a2\n//DUMPOUT     DD    SYSOUT=*\n//SYSPRINT    DD    SYSOUT=*\n//SYSIN       DD    *\n  INDD(DUMPIN,OPTIONS(DUMP))\n  OUTDD(DUMPOUT,TYPE(232))\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STASMF04": {"ttr": 3085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00X\\x01 )\\x0f\\x01 )\\x0f\\x106\\x00\\xfa\\x00\\xfa\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T10:36:58", "lines": 250, "newlines": 250, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STASMF03.                                       *\n//*      *                                                           *\n//*      * Purpose:  Report on SMF type 133 records using DFSORT.    *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SAA.P.CONDIR.STATS.PROCLIB\n//*\n//           EXPORT SYMLIST=(DTE)\n//           SET    DTE=&LYYMMDD\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Extract TYPE 133 from SMF. Change INDD1 to reflect input  *\n//*      * SMF dataset.                                              *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP1       EXEC  PGM=IFASMFDP\n//SYSPRINT    DD    SYSOUT=*\n//INDD1       DD    DISP=SHR,DSN=\u00a2\u00a2 YOUR SMF DATASET RECORDS \u00a2\u00a2\n//OUTDD       DD    DSN=&&TEMP01,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VBS)\n//SYSIN       DD    *\n  INDD(INDD1,OPTIONS(DUMP))\n  OUTDD(OUTDD,TYPE(133))\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * SORT the SMF records by DATE and TIME then build output   *\n//*      * records when they are 512 bytes in length and type 133    *\n//*      * only.                                                     *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP2       EXEC  PGM=SORT\n//SYSOUT      DD    SYSOUT=*\n//SYSPRINT    DD    SYSOUT=*\n//SORTIN      DD    DSN=&&TEMP01,DISP=(OLD,DELETE)\n//SORTOUT     DD    DSN=&&TEMP02,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=512)\n//SYSIN       DD    *\n  OPTION EQUALS\n  SORT   FIELDS=(11,4,PD,A,7,4,BI,A)\n  OUTFIL INCLUDE=(1,2,BI,EQ,512,                 * Length=512\n                  AND,6,1,BI,EQ,133)             * Type=133\n/*\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Next we SORT again this time by DATE and TIME and we      *\n//*      * extract SUBTYPE 2 HW type records.                        *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP3       EXEC  PGM=SORT\n//SYSOUT      DD    SYSOUT=*\n//SYSPRINT    DD    SYSOUT=*\n//SORTIN      DD    DSN=&&TEMP02,DISP=(OLD,DELETE)\n//SORTOUT     DD    DSN=&&TEMP03,\n//            DISP=(NEW,PASS),\n//            UNIT=3390,\n//            SPACE=(CYL,(100,100),RLSE),\n//            DCB=(DSORG=PS,RECFM=VB,LRECL=512)\n//SYSIN       DD    *\n  OPTION EQUALS\n  SORT   FIELDS=(11,4,PD,A,7,4,BI,A)             * Date & Time\n  OUTFIL INCLUDE=(23,2,BI,EQ,2,                  * Subtype=2\n                  AND,19,4,CH,EQ,C'CDHW')        * CDHW eyecatcher\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Execute DFSORT to produce required report.                *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//STEP4       EXEC  PGM=SORT,COND=(0,LT,STEP3)\n//SYSOUT      DD    SYSOUT=*\n//SYSPRINT    DD    SYSOUT=*\n//SORTIN      DD    DSN=&&TEMP03,DISP=(OLD,DELETE)\n//REPORT      DD    SYSOUT=*\n//SYSIN       DD    *\n  SORT FIELDS=(15,4,CH,A,11,4,PD,A,7,4,BI,A)\n  OUTFIL FNAMES=REPORT,\n         HEADER1=(22X,\n                  'Simultaneous Session Interval Detail Report ',\n                  'generated on ',DATE,' at ',TIME,\n                  'for SMFID: ',15,4,6X,'Page ',PAGE),\n         HEADER2=(1X,\n                  2/,\n                  '---SMF Record Written----',\n                  2X,\n                  '--------Interval High Water Mark--------',\n                  2X,\n                  '--------------CD Node Start Date and Time',\n                  '--------------',\n                  2X,\n                  '-----CD Plex-----',\n                  2X,\n                  '---------System---------',\n                  2X,\n                  '---------------------CD--------------------',\n                  /,\n                  'SID ',\n                  X,\n                  '  Date      Time    ',\n                  2X,\n                  '  Date      Time    ',\n                  X,\n                  'Value',\n                  X,\n                  ' Pri ',\n                  X,\n                  ' Sec ',\n                  X,\n                  'R',\n                  2X,\n                  'Jobname ',\n                  X,\n                  'Job ID  ',\n                  X,\n                  'Name            ',\n                  X,\n                  'Start Date and Time ',\n                  2X,\n                  'Name     Server  ',\n                  2X,\n                  ' OS  Ver      MSU    GMT',\n                  2X,\n                  ' Ver  License  Type #Nodes',\n                  X,\n                  'Host/IP',\n                  /,                               header   Line break\n                  '----',\n                  X,\n                  '-------- -----------',\n                  2X,\n                  '-------- -----------',\n                  X,\n                  '-----',\n                  X,\n                  '-----',\n                  X,\n                  '-----',\n                  X,\n                  '-',\n                  2X,\n                  '-------- --------',\n                  X,\n                  '----------------',\n                  X,\n                  '-------- -----------',\n                  2X,\n                  '-------- --------',\n                  2X,\n                  '---- ---- ---------- ---',\n                  2X,\n                  '----- -------- ---- ------ ----------------'),\n        TRAILER1=(2/,\n                  1X,'R Field Key: ',\n                  1/,\n                  3X,'I = Record from INTERVAL value in INITPARMS',\n                  1/,\n                  3X,'T = Record from TERMINATION of Connect Task'),\n        SECTIONS=(15,4,SKIP=P),  section break=page eject=SMFID\n          OUTREC=(1,4,                         (required) Unedited RDW\n                  15,4,                                   SMFID\n                  X,\n                  11,4,DT3,EDIT=('TTTT.TTT'),             \"   Date\n                  X,\n                  7,4,TM4,EDIT=('TT:TT:TT.TT'),           \"   Time\n                  2X,\n                  101,4,Y4U,TOJUL=Y4T(.),                 HW  Date\n                  X,\n                  97,1,HEX,                               \"   HH\n                  1C':',\n                  98,1,HEX,                               \"   MM\n                  1C':',\n                  99,1,HEX,                               \"   SS\n                  1C'.',\n                  100,1,HEX,                              \"   th\n                  X,\n                  95,2,BI,M10,LENGTH=5,                   \"   Value\n                  X,\n                  105,2,BI,M10,LENGTH=5,                  \"   Primary\n                  X,\n                  107,2,BI,M10,LENGTH=5,                  \"   Secondary\n                  X,\n                  90,1,                                   \"   Reason\n                  2X,\n                  33,8,                                   CD Node Job Na\n                  X,\n                  49,8,                                   \"   \"   Job ID\n                  X,\n                  73,16,                                  \"   \"   Name\n                  X,\n                  45,4,Y4U,TOJUL=Y4T(.),                  \"   \"   Init D\n                  X,                                              Init T\n                  41,1,HEX,                               \"   \"   HH\n                  1C':',\n                  42,1,HEX,                               \"   \"   MM\n                  1C':',\n                  43,1,HEX,                               \"   \"   SS\n                  1C'.',\n                  44,1,HEX,                               \"   \"   th\n                  2X,\n                  57,8,                                   CD Plex Name\n                  X,\n                  65,8,                                   \"   \"   Srvr\n                  2X,\n                  109,4,                                  System  OS\n                  X,\n                  113,4,                                  \"       OS VER\n                  X,\n                  133,4,BI,M10,LENGTH=10,                 \"       MSU\n                  X,\n                  (((137,4,FI,MUL,+1048576),DIV,+1000000),DIV,+3600),\n                  M12,SIGNS=(+,-),LENGTH=3,                       GMT\n                  2X,\n                  117,4,BI,M10,LENGTH=5,                  CD Version\n                  1X,\n                  121,8,                                  \"  License\n                  1X,\n                  129,4,                                  \"  Type (Lic)\n                  1X,\n                  141,4,BI,M10,LENGTH=6,                  \"  #Nodes\n                  1X,\n                  149,16)                                 \"  Host/IP\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STASS": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:36", "lines": 31, "newlines": 31, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STASS.                                          *\n//*      *                                                           *\n//*      * Purpose:  Example of extracting data from restored        *\n//*      *           archive file.                                   *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//DMBATCH.SYSIN DD  *,SYMBOLS=JCLONLY\n  SIGNON\n  SELECT STATISTICS WHERE (PNAME=CDTOSPL  -\n  ARCHDSN=&RESTDSN..KSDS) TABLE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STASW": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:36", "lines": 28, "newlines": 28, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01REI JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STASW.                                          *\n//*      *                                                           *\n//*      * Purpose:  Manually switch statistics files,               *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//DMBATCH.SYSIN DD  *\n  SIGNON\n  STATS SWITCH\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAS2": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01 )\\x0f\\x01 )\\x0f\\tQ\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T09:51:36", "lines": 28, "newlines": 28, "modlines": 0, "user": "BRADLEY"}, "text": "//MKT01RES JOB 000000000000,'CONNECT DIRECT      ',CLASS=C,MSGCLASS=C,\n//  NOTIFY=&SYSUID\n//*\n//*      *************************************************************\n//*      *                                                           *\n//*      * Job name: STAS2.                                          *\n//*      *                                                           *\n//*      * Purpose:  Select STAS2 statistics records.                *\n//*      *                                                           *\n//*      * Date Written: October 2020.                               *\n//*      *                                                           *\n//*      * Programmer:   John Bradley.                               *\n//*      *                                                           *\n//*      * Copyright (c) Meerkat Computer Services Limited.          *\n//*      *                                                           *\n//*      *************************************************************\n//*\n//JCLLIB1    JCLLIB  ORDER=SUPPLIED.PROCLIB\n//*\n//INCLUDE1   INCLUDE MEMBER=CDPARMS\n//*\n//STEP1       EXEC  CDJCL\n//DMBATCH.SYSIN DD  *\n  SIGNON\n  SELECT STATISTICS WHERE (TYPE=(S2)) TABLE\n  SIGNOFF\n/*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "WORDST1": {"ttr": 3337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01 )\\x0f\\x01 )\\x0f\\x12\\x08\\x01\\x1d\\x01\\x1d\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T12:08:27", "lines": 285, "newlines": 285, "modlines": 0, "user": "BRADLEY"}, "mimetype": "application/vnd.oasis.opendocument.text", "datatype": "binary", "extension": ".odt"}, "WORDST2": {"ttr": 3343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01 )\\x0f\\x01 )\\x0f\\x12\\x08\\x01B\\x01B\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T12:08:27", "lines": 322, "newlines": 322, "modlines": 0, "user": "BRADLEY"}, "mimetype": "application/vnd.oasis.opendocument.text", "datatype": "binary", "extension": ".odt"}, "WORDST3": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01 )\\x0f\\x01 )\\x0f\\x12\\x08\\x01d\\x01d\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T12:08:27", "lines": 356, "newlines": 356, "modlines": 0, "user": "BRADLEY"}, "mimetype": "application/vnd.oasis.opendocument.text", "datatype": "binary", "extension": ".odt"}, "WORDST4": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01 )\\x0f\\x01 )\\x0f\\x12\\x08\\x04\\xba\\x04\\xba\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T12:08:27", "lines": 1210, "newlines": 1210, "modlines": 0, "user": "BRADLEY"}, "mimetype": "application/vnd.oasis.opendocument.text", "datatype": "binary", "extension": ".odt"}, "WORDST5": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01 )\\x0f\\x01 )\\x0f\\x12\\x08\\x01M\\x01M\\x00\\x00\\xc2\\xd9\\xc1\\xc4\\xd3\\xc5\\xe8@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T12:08:27", "lines": 333, "newlines": 333, "modlines": 0, "user": "BRADLEY"}, "mimetype": "application/vnd.oasis.opendocument.text", "datatype": "binary", "extension": ".odt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT042/FILE042.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT042", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}