{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012228000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE505.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE505.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x12'", "DS1TRBAL": "b'\\x1e\\x04'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xd3\\x00\\x08\\x03\\xd3\\x00\\n\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04:\\x00\\x00\\x01\\x03\\x06\\x1f\\x01\\x03\\x06\\x1f\\x13\\x06\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf8@@@'", "ispf": {"version": "04.58", "flags": 0, "createdate": "2003-03-02T00:00:00", "modifydate": "2003-03-02T13:06:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-458"}, "text": "REGULAR CBT TAPE - VERSION 458    FILE:  505\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT458.FILE505\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 459 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/02/03    13:06:05    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$MAN": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00Q\\x01\\x03\\x06\\x1f\\x01\\x03\\x06\\x1f\\x13\\x01\\x00\\xd9\\x00\\xd6\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-03-02T00:00:00", "modifydate": "2003-03-02T13:01:51", "lines": 217, "newlines": 214, "modlines": 0, "user": "SBGOLOB"}, "text": "\nThis is the beginning of the ASSIST Assembler manual.  All of the texts\nand source for the ASSIST Assembler may be found on the CBT Overflow\nTape, File 085.\n\n                                                       ASSIST1-1\n                                                       3.0/B\n                         ASSIST                        MARCH 1974\n               INTRODUCTORY ASSEMBLER USER'S MANUAL\n\n               Program&amp;Documentation: John R. Mashey\n               Project Supervision  : Graham Campbell\n     Computer Science Department - Pennsylvania State University\n\n\nPREFACE\n\n     This manual is the  basic  reference  for  the  programmer  writing\nin the Assembler Language for the IBM S/360 computer, using  the  ASSIST\nassembler-interpreter system.   ASSIST  (Assembler  System  for  Student\nInstruction and Systems Teaching) is a small,  high-speed,  low-overhead\nassembler/interpreter system especially designed  for  use  by  students\nlearning assembler language.  The  assembler  program  accepts  a  large\nsubset of the standard Assembler Language  under  OS/360,  and  includes\nmost  common  features.  The execution-time  interpreter  simulates  the\nfull 360 instruction set, with complete checking  for  errors,  meaning-\nful diagnostics, and completion dumps of  much  smaller  size  than  the\nnormal system dumps.\n\n     The first part of  this  manual  describes  the  assembly  language\ncommands permitted by  the  ASSIST  assembler.   In  essence,  it  is  a\ncomparison with the standard  Assembly  Language,  and  generally  notes\nonly the omissions or differences from the standard.  The reader  should\nrefer to one of the following publications, which the first part of this\nmanual closely follows (depending on operating system used):\n\nC28-6514  IBM SYSTEM/360 OPERATING SYSTEM ASSEMBLER LANGUAGE\n\nC24-3414  IBM SYSTEM/360 DISK AND TAPE OPERATING SYSTEM ASSEMBLER LANG.\n\n     The second  section  describes  input/output,  decimal  conversion,\nhexadecimal conversions, and debugging  facilities available to the user\nat execution time.\n\n     The third part of  the  manual  describes  the  control  cards  and\nJob  Control  Language  required  to  assemble  and  execute  a  program\nunder  ASSIST.   It  also  notes  the  various  options  from  the  PARM\nfield which are accepted by the system.\n\n     The  fourth  section  gives  information  concerning   the   output\nfrom  ASSIST,  including  the  assembly  listing,  the  format  of   the\ncompletion  dump  produced  by  an  error  in  program  execution,   and\na list of all error messages  produced  during  assembly  or  execution.\nIt also describes the object decks produced/accepted by ASSIST.\n\n               Note:  this document is NOT copyrighted.\n\n               Note: only major change in documentation from version 2.1\n                     is the inclusion of cross-reference material(XREF)\n                     and the inclusion of the extended interpreter\n                     material.\n\n\n                                                      ASSIST1-2\n                    TABLE OF CONTENTS\n\nPART I. THE ASSEMBLY LANGUAGE UNDER ASSIST................. 1-4\n     The sections flagged * note that the given language features\n     are not accepted by ASSIST.\n\nSECTION I: INTRODUCTION.................................... 1-4\n     Compatibility......................................... 1-4\n     Macro Instructions.................................... 1-4\n     The Assembler Program................................. 1-5\n\nSECTION 2: GENERAL INFORMATION............................. 1-5\n     Symbols............................................... 1-5\n     General Restrictions on Symbols....................... 1-5\n     Location Counter References........................... 1-5\n     Literals.............................................. 1-5\n     Literal Pool.......................................... 1-5\n     Expressions........................................... 1-5\n\nSECTION 3: ADDRESSING -- PROGRAM SECTIONING AND LINKING.... 1-6\n     USING -- Use Base Register............................ 1-6\n     CONTROL SECTIONS...................................... 1-6\n     Control Section Location Assignment................... 1-6\n     FIRST CONTROL SECTION................................. 1-6\n     START -- Start Assembly............................... 1-6\n     CSECT -- Identify Control Section..................... 1-6\n     DSECT -- Identify Dummy Section....................... 1-6\n    *EXTERNAL DUMMY SECTIONS (ASSEMBLER F ONLY)............ 1-6\n    *COM -- DEFINE BLANK COMMON CONTROL SECTION............ 1-6\n\nSECTION 4: MACHINE INSTRUCTIONS............................ 1-7\n     Instruction Alignment and Checking.................... 1-7\n     OPERAND FIELDS AND SUBFIELDS.......................... 1-7\n\nSECTION 5: ASSEMBLER LANGUAGE STATEMENTS................... 1-7\n    *OPSYN -- EQUATE OPERATION CODE........................ 1-7\n     DC -- DEFINE CONSTANT................................. 1-7\n     Operand Subfield 3: Modifiers......................... 1-7\n     Operand Subfield 4: Constant.......................... 1-7\n     CCW -- DEFINE CHANNEL COMMAND WORD.................... 1-8\n     Listing Control Instructions.......................... 1-8\n     TITLE -- IDENTIFY ASSEMBLY OUTPUT..................... 1-8\n     PRINT -- PRINT OPTIONAL DATA.......................... 1-8\n     PROGRAM CONTROL INSTRUCTIONS.......................... 1-8\n    *ICTL, ISEQ, PUNCH, REPRO.............................. 1-8\n     LTORG -- BEGIN LITERAL POOL........................... 1-8\n     Special Addressing Considerations..................... 1-8\n     Duplicate Literals.................................... 1-8\n    *COPY -- COPY PREDEFINED SOURCE CODING................. 1-8\n\nSECTION 6: INTRODUCTION TO THE MACRO LANGUAGE ............. 1-9\nSECTION 7: HOW TO PREPARE MACRO DEFINITIONS ............... 1-10\nSECTION 8: HOW TO WRITE MACRO-INSTRUCTIONS ................ 1-10\nSECTION 9: HOW TO WRITE CONDITIONAL ASSEMBLY INSTRUCTIONS . 1-11\nSECTION 10: EXTENDED FEATURES OF THE MACRO LANGUAGE ....... 1-12\n\n\n                                                      ASSIST1-3\n\nPART I. (CONTINUED)\nAPPENDIX K: USE OF LIBRARY MACROS.......................... 1-12\n\nPART II. INPUT/OUTPUT AND DEBUGGING INSTRUCTIONS........... 2-1\n\nINPUT/OUTPUT INSTRUCTIONS - XREAD, XPRNT, XPNCH............ 2-1\n     CONDITION CODE........................................ 2-1\n     CARRIAGE CONTROL...................................... 2-1\n     EXAMPLES OF XREAD, XPRNT, XPNCH USAGE................. 2-2\n\nDEBUGGING INSTRUCTION - XDUMP.............................. 2-3\n     GENERAL PURPOSE REGISTER DUMP......................... 2-3\n     STORAGE DUMP.......................................... 2-3\n     EXAMPLES OF XDUMP USAGE............................... 2-3\n\nDECIMAL CONVERSION INSTRUCTIONS - XDECI, XDECO............. 2-4\n     XDECI................................................. 2-4\n     XDECO................................................. 2-4\n     SAMPLE USAGE OF XDECI................................. 2-5\n     SAMPLE USAGE OF XDECO................................. 2-5\n\nHEXADECIMAL CONVERSION INSTRUCTIONS - XHEXI, XHEXO......... 2-6\n     XHEXI................................................. 2-6\n     XHEXO................................................. 2-6\n     SAMPLE USAGE OF XHEXI AND XHEXO....................... 2-7\n\nLIMIT DUMP INSTRUCTION - XLIMD............................. 2-8\n     SAMPLE USAGE OF XLIMD................................. 2-8\n\nOPTIONAL INPUT/OUTPUT INSTRUCTIONS - XGET, XPUT............ 2-9\n     CONDITION CODE........................................ 2-9\n     CARRIAGE CONTROL...................................... 2-9\n     EXAMPLES OF XGET AND XPUT USAGE....................... 2-10\n\n\n\n\nPART III. ASSIST CONTROL CARDS AND DECK SETUP.............. 3-1\n\nA. JOB CONTROL LANGUAGE.................................... 3-1\n\nB. OPTIONAL PARAMETERS FOR ASSIST.......................... 3-2\n\nC. DESCRIPTION OF INDIVIDUAL OPTIONS....................... 3-4\n\nPART IV. ASSIST OPTIONAL EXTENDED INTERPRETER.............. 4-1\n\nA. GENERAL DESCRIPTION OF NEW FEATURES..................... 4-1\n\nB. THE XOPC (Assist OPtions Call) DEBUGGING INSTRUCTION.... 4-2\n\nPART V.  OUTPUT AND ERROR MESSAGES......................... 5-1\n\nA. ASSEMBLY LISTING........................................ 5-1\n     1. ASSEMBLY LISTING FORMAT............................ 5-1\n     2. ASSEMBLER ERROR MESSAGES........................... 5-1\n     3. LIST OF ASSEMBLER ERROR MESSAGES................... 5-2\n     4. ASSEMBLER STATISTICS SUMMARY....................... 5-10\n\nB. ASSIST MONITOR MESSAGES................................. 5-11\n     1. HEADING AND STATISTICAL MESSAGES................... 5-11\n     2. ASSIST MONITOR ERROR MESSAGES...................... 5-12\n\nC. ASSIST COMPLETION DUMP.................................. 5-13\n\nD. COMPLETION CODES........................................ 5-14\n\nE. OBJECT DECKS AND LOADER MESSAGES........................ 5-15\n     1. OBJECT DECK FORMAT................................. 5-15\n     2. ASSIST LOADER USAGE AND MESSAGES................... 5-16\n\n\n\nPART I. THE ASSEMBLY LANGUAGE UNDER ASSIST\n\n     This  section  deals  with  the  subset  of  the  standard   OS/360\nAssembler  Language  accepted  be  the  ASSIST  assembler.   Because  it\nfollows  the  standard  very  closely,  the  following  describes   only\nthose language  features  which  ASSIST  omits  or  treats  differently.\nThe user should generally consult the  previously-mentioned  publication\nfor most of the information on  the  assembler  language.   The  section\nheadings and sub-headings  in  this  manual  are  taken  from  the   IBM\npublication, and any sections omitted may be assumed to be the  same  as\nthe corresponding sections in the IBM manual.\n\nSECTION 1: INTRODUCTION\n\nCompatibility\n     With  a  few  possible  exceptions,  any  program  which  assembles\nand executes correctly under ASSIST should  do  so  using  the  standard\nOS/360 software, and should produce the same  output  as  under  ASSIST.\nAt most, a change of Job Control Language might be necessary.\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x01\\x04O\\x01\\x01\\x04\\x9f\\t\\t\\x00*\\x00$\\x00\\x00\\xd2\\xd5\\xe4\\xe3\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-02-13T00:00:00", "modifydate": "2001-02-18T09:09:00", "lines": 42, "newlines": 36, "modlines": 0, "user": "KNUTSON"}, "text": "How to install Assist on your system:\n\nRead member ASDISTRB for full install directions if you want to\ninstall from scratch.\n\n\nFasttrack:\n\nAll parts of ASSIST with generous default options have been completed\nfor you and the resultant object code from assembling ASSIST is\nincluded in this library along with original distribution files from\nPSU.\n\nAs a result, all that needs to be done is to edit the member ALINK\nand submit it on your system.  This will link-edit ASSIST to the\nload library you specify using the pre-assembled object decks here.\n\n\n\nTesting:\n\nThe member @TEST provides a sample PROC (internally) and JCL to\ninvoke ASSIST and has a program which will test that ASSIST works\nminimally.  To do full testing, after reading the userguide (ASUSERGD\nor AUSERGD), submit @TEST substituting ASTEST01 through ASTEST05 as\ninput to the interpreter.\nFor example, using @TEST, delete everything from the //SYSIN DD down\nand replace //SYSIN DD with:\n//SYSIN  DD  DSN=thispds(ASTEST01),DISP=SHR\nto run test suite number 01.\nYou'll want to run all five of the test suites.\n\nAlso included are members ESAxxxx which will are tailored for\ninstalling ASSIST using standard PROCs in an MVS/ESA environment\nwith HLASM.\n\n\nDocumentation:\n\nFor distribution on the CBT Tape the manual has been added in member\n$MANUAL.  This is the ASSIST INTRODUCTORY ASSEMBLER USER'S\nMANUAL dated \"ASSIST1-1 3.0/B MARCH 1974\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE505": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04:\\x00\\x00\\x01\\x03\\x06\\x1f\\x01\\x03\\x06\\x1f\\x13\\x05\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf8@@@'", "ispf": {"version": "04.58", "flags": 0, "createdate": "2003-03-02T00:00:00", "modifydate": "2003-03-02T13:05:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT-458"}, "text": "//***FILE 505 contains a pointer to the materials of the ASSIST     *   FILE 505\n//*           Assembler.  The ASSIST Assembler is used for teaching *   FILE 505\n//*           Assembler Language.  This program dates from the      *   FILE 505\n//*           OS/360 days.  The full ASSIST Assembler now can be    *   FILE 505\n//*           obtained on File 085 of the CBT Overflow Tape.        *   FILE 505\n//*                                                                 *   FILE 505\n//*   >>>>>   The Assist Assembler (everything that used to be on   *   FILE 505\n//*   >>>>>   this file) has been moved to the CBT Overflow Tape,   *   FILE 505\n//*   >>>>>   File 085.  This is to make some room on the regular   *   FILE 505\n//*   >>>>>   CBT Tape.  This file remains on the CBT Tape, as a    *   FILE 505\n//*   >>>>>   pointer, so you can find all of the Assist Assembler  *   FILE 505\n//*   >>>>>   materials easily, in their new place.                 *   FILE 505\n//*                                                                 *   FILE 505\n//*    To get all of these materials:                               *   FILE 505\n//*                                                                 *   FILE 505\n//*      Go to www.cbttape.org , and click on Overflow.  Then       *   FILE 505\n//*      download File 085.                                         *   FILE 505\n//*                                                                 *   FILE 505\n//*           Source was submitted by Sam Knutson:                  *   FILE 505\n//*                                                                 *   FILE 505\n//*           email:   sam@knutson.org                              *   FILE 505\n//*                                                                 *   FILE 505\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@TEST": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x04O\\x01\\x01\\x04O\\x136\\x00\\xa6\\x00\\xa6\\x00\\x00\\xc1\\xe2\\xe2\\xc9\\xe2\\xe3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-02-13T00:00:00", "modifydate": "2001-02-13T13:36:00", "lines": 166, "newlines": 166, "modlines": 0, "user": "ASSIST"}, "text": "//...JOBCARD...\n//* TEST THE ASSIST INTERPRETER\n//*\n//* GIVE A VALID JOBCARD\n//* CHANGE ALL \"THISPDS\" TO THIS PDS NAME\n//* CHANGE ALL \"MYLOADLIB\" TO THE LOADLIBRARY WHERE ASSIST LIVES\n//ASACG PROC\n//DATA EXEC PGM=ASSIST,PARM='BATCH,MACRO=H'\n//STEPLIB  DD DISP=SHR,DSN=MYLOADLIB               <== CHANGE\n//SYSPRINT DD  SYSOUT=*\n//FT05F001 DD DDNAME=INPUT    (ONLY NEEDED IF &$DATARD=1: 2 READERS)\n//FT06F001 DD SYSOUT=*,DCB=(RECFM=FA,LRECL=133,BLKSIZE=133)  PRINTER\n//FT07F001 DD SYSOUT=B,DCB=(RECFM=F,LRECL=80,BLKSIZE=80)      PUNCH\n//FT08F001 DD UNIT=SYSDA,DISP=(,DELETE),SPACE=(3520,(100,10)),\n//             DCB=(RECFM=F,BLKSIZE=3520)      DISK INTERMEDIATE\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR             ** MVS MACROS\n//         DD DSN=THISPDS,DISP=SHR                 <== CHANGE\n//  PEND\n//*\n//TESTPROG EXEC ASACG\n//INPUT DD *\n//SYSIN DD *\n$JOB   ASSIST  TESTCVB\n         MACRO\n         REGS  &SYM\n         LCLA  &N\n         LCLC  &R\n&R       SETC  'R'\n         AIF   ('&SYM' EQ '').NEXT\n&R       SETC  '&SYM'\n.NEXT    ANOP\n&N       SETA  0\n****\n*\n*     MACRO TO ESTABLISH REGISTER EQUATES\n*\n****\n         SPACE 2\n.LOOP    ANOP\n&R&N     EQU   &N\n&N       SETA  &N+1\n         AIF   (&N LT 16).LOOP\n         MEND\n         REGS\nTESTCVB  CSECT\n         USING *,15\nREADLOOP XREAD CARD\n         BNZ   EOF\n*\n* DERIVE TERMID FROM NETNAME\n*\n         LA    R8,NETNAME          ADDRESS NETNAME FIELD\n         LH    R6,NETNAMLN         PICK UP NETNAME LENGTH\n         LA    R7,4                SET LENGTH FOR COMPARE\n         CR    R6,R7               NETNAME LONGER THAN 4 CHARS?\n         BNH   NETNAMSL            ...NO, TAKE FIRST N CHARS\nNETSCAN1 DS    0H\n* SCAN TO FIND LAST 4 NON-BLANK CHARS\n         BCTR  R6,R0               DECREMENT FOR NEXT CHAR\n         LA    R7,0(R6,R8)         ADDRESS NEXT CHAR\n         CLI   0(R7),C' '          IS IT BLANK?\n         BE    NETSCAN1            ...YES, TRY NEXT CHARACTER\n         LA    R7,3                SET LENGTH FOR SUBTRACT\n         AR    R8,R6               ADDRESS END OF NETNAME\n         SR    R8,R7               ADDRESS LAST 4 NON-BLANK CHARS\n         LA    R6,4                SET LENGTH OF 4 FOR MOVE\nNETNAMSL DS    0H\n* MOVE DERIVED TERMID TO RETURN FIELD. R8==>START ADDR, R6=LENGTH\n         BCTR  R6,R0               SET LENGTH FOR EXECUTE\n         EX    R6,TERMIDMV         SELECT TERMID\n*\n* HANDLE OTHER CASES\n*\n         MVC   PORTNUM(2),TRMIDSEL+2 GET LAST 2 CHARS OF NET NAME\n         CLC   =C'ASC',NETNAME     ASCII (7171) TERMINAL?\n         BE    ASCTERM\n         CLC   =C'T',NETNAME       REMOTE (SNA) TERMINAL?\n         BE    GMURMT\n         CLC   =C'WRLC',NETNAME    EXTERNAL (WRLC) TERMINAL?\n         BE    WRLCTERM\n         B     TERMDONE\n*\nTERMIDMV MVC   TRMIDSEL(0),0(R8)   EXECUTED MOVE FOR TERMID SELECTION\n*\n*    ASCNNN\nASCTERM  DS    0H\n         MVC   TRMIDSEL(1),=C'A'   MAKE 1ST CHAR OF ASCII TERMS \"A\"\n         B     TERMDONE\n*    WRLCNNNN\nWRLCTERM DS    0H\n         MVC   TRMIDSEL(1),=C'W'   MAKE 1ST CHAR OF WRLC TERMS \"W\"\n         B     TERMDONE\n*    GMU REMOTE SNA TERMINALS\nGMURMT   DS    0H\n         MVC   LINENUM,NETNAME+1\n         MVC   CTRLNUM,NETNAME+3\n         CLC   PORT0,LINENUM       2 DIGIT LINE NUMBER?\n         BH    TERMDONE\n         CLC   PORT0,CTRLNUM       2 DIGIT CNTRL NUMBER?\n         BH    TERMDONE\n         CLC   PORT0,PORTNUM       2 DIGIT PORT NUMBER?\n         BH    TERMDONE\n         MVC   TRMIDSEL(1),=C'T'\n         MVC   DECNNUM,LINENUM\n         BAL   R12,CNVRT\n         MVC   TRMIDSEL+1(1),0(R7) EXTRACT BASE36 CHARACTER\n         MVC   DECNNUM,CTRLNUM\n         BAL   R12,CNVRT\n         MVC   TRMIDSEL+2(1),0(R7) EXTRACT BASE36 CHARACTER\n         MVC   DECNNUM,PORTNUM\n         BAL   R12,CNVRT\n         MVC   TRMIDSEL+3(1),0(R7) EXTRACT BASE36 CHARACTER\n         B     TERMDONE\n*    SUBROUTINE TO CONVERT 2 DIGIT VALUE TO BINARY VALUE\nCNVRT    DS    0H\n         PACK  PACKPORT,DECNNUM  UNZONE (PACK) PORT NUMBER\n         CVB   R8,PACKPORT       PUT BINARY VALUE IN R6\n         LA    R7,BASE36         POINT TO BASE36 TABLE\n         AR    R7,R8\n         BR    R12\n*\nBASE36M  DS    0H\n         DC    CL1'$'\nBASE36   DC    CL10'0123456789'\n         DC    CL10'ABCDEFGHIJ'\n         DC    CL10'KLMNOPQRST'\n         DC    CL6'UVWXYZ'\nPORT0    DC    CL2'00'\n*\n*    TERMINAL ID CREATION COMPLETED  ...\n*\nTERMDONE DS    0H\n         XPRNT CARD-1,81\n         B     READLOOP\nEOF      BR    14\n         DC    CL1' '\nCARD     DS    0CL80\nNETNAME  DS    CL8                 START OF NETNAME\n         DS    CL4\nLINENUM  DS    CL2'00'           HOLDS LAST 2 CHARS OF NETNAME\n         DS    CL4\nCTRLNUM  DS    CL2'00'           HOLDS LAST 2 CHARS OF NETNAME\n         DS    CL4\nPORTNUM  DS    CL2'00'           HOLDS LAST 2 CHARS OF NETNAME\n         DS    CL4\nDECNNUM  DS    CL2'00'           HOLDS LAST 2 CHARS OF NETNAME\n         DS    CL4\nTRMIDSEL DS    CL4                 TERMINAL ID SELECTED\n         DC    CL80' '\nPACKPORT DS    D                 HOLD'S PACKED VERSION OF PORTNUM\nNETNAMLN DC    XL2'07'             LENGTH OF NETNAME\n         END\n$ENTRY\nT030101\nT000000\nT010100\nT040122\nT020207\nT040115\nT050505\nT252423\nASC858\nL745\nWRLCGOR\nCOSMICX\nTABCDEF\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT505/FILE505.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT505", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}