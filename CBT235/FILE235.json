{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011540000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE235.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE235.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\t'", "DS1TRBAL": "b'+\\xd4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xa8\\x00\\x0c\\x01\\xa9\\x00\\x00\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"MODREP": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    CONVERT  &REG\n***            CONVERT HEX CHARACTERS TO PRINTABLE FORMAT   PMCF.\n***            CONVERT (TO,FROM,LENGTH)\n&NAME    DS    0H                      ALIGN ON HALF-WORD\n         LA    14,*+56                 LOAD RETURN ADDRESS\n         MVO   0(2,&REG(1)),0(1,&REG(2)) ADJUST OFFSET\n         MVN   1(1,&REG(1)),0(&REG(2)) SET NUMERIC CHAR.\n         NI    1(&REG(1)),X'0F'        FLIP UNWANTED BITS OFF\n         TR    0(2,&REG(1)),*+20       TRANSLATE THE BYTE\n         LA    &REG(1),2(0,&REG(1))    BUMP UP REGISTER\n         LA    &REG(2),1(0,&REG(2))    BUMP UP REGISTER\n         BCT   &REG(3),*-30            CONVERT AGAIN IF REG. NZERO\n         BCR   15,14                   BRANCH TO EXECUTABLE INST.\n         DC    C'0123456789ABCDEF'     CHARACTER STRING FOR TR INST.\n         MEND\nMODREP   CSECT             \"NO NEED TO IPL\"\n         SPACE 3\n*********************************************************************\n*  MODREP-LPA/SVC REAL TIME LOADER AND REPLACEMENT AND PERFORMANCE  *\n*         TOOL                                                      *\n*                                                                   *\n*  MODULE CONCEPTS:   \"REAL TIME\" MLPA SIMULATION, SVC REPLACEMENT  *\n*                     AND MODULE \"FIXING\" (FOR PERFORMANCE AND      *\n*                     EASE OF IN-CORE ZAP)                          *\n*                     THIS MODULE IS PAGEABLE.                      *\n*                     LOADED MODULES AND SVCS ARE PLACED IN FIXED   *\n*                     CSA MEMORY.                                   *\n*                     WHY IN FIXED MEMORY?                          *\n*                     1) TYPE 1 AND 2 SVC'S MUST BE RESIDENT IN THE *\n*                        NUCLEUS (OR AT LEAST APPEAR TO BE SO)      *\n*                     2) AS THIS IS A \"TEST TOOL\" THE ASSUMPTION    *\n*                        IS THAT IN-CORE ZAPS MAY BECOME NECESSARY  *\n*                        AND YOU ARE ASSURED THE MODULE WILL BE IN  *\n*                        CORE AT ALL TIMES (NOT PAGED OUT)          *\n*                     3) FOR PERFORMANCE TESTING, A DUPLICATE COPY  *\n*                        OF A CURRENTLY PAGEABLE MODULE MAY BE      *\n*                        RE-LOADED AND YOU WILL BE ABLE TO EXAMINE  *\n*                        THE PERFORMANCE GAINS THAT WOULD RESULT    *\n*                        IN THE PERMANENT FIXING OF THE MODULE VIA  *\n*                        IEAFIXXX                                   *\n*                                                                   *\n*  MEMORY UTILIZATION:                                              *\n*  FOR MODULES:       48 BYTES OF SQA (SP 245)-FOR CDE/XTLST        *\n*  FOR SVCS:          0 BYTES-SVC TABLE UPDATED IN PLACE            *\n*  FOR MODULES/SVCS:  XX BYTES OF CSA (SP 228)-FETCH WILL LOAD AND  *\n*                     RELOCATE YOUR MODULE BASED UPON MODULE SIZE   *\n*                                                                   *\n*  LOCKS OBTAINED:    SALLOC: GETMAIN,FREEMAIN COMMON AREAS         *\n*                     DISP:   LOCK ON CDE CHAIN                     *\n*                     THE USE OF THE LOCKING MECHANISM WILL NOT     *\n*                     AFFECT THE OPERATION OF THIS MODULE IN A U.P. *\n*                     ENVIRONMENT (EXCEPT FOR LOCKING OVERHEAD)     *\n*                                                                   *\n*  LINK ATTR:         AUTH,NORENT,NOREUS                            *\n*                     MUST BE IN APF AUTHORIZED LIBRARY             *\n*                                                                   *\n*  SAMPLE JCL:                                                      *\n*                     //MODREP    PROC  LIB='SYS1.MVSLMOD'          *\n*                     //MODREP    EXEC  PGM=MODREP,TIME=1440        *\n*                     //STEPLIB   DD    DSN=SYS1.MVSLMOD,DISP=SHR   *\n*                     //MODREP    DD    DISP=SHR,DSN=&LIB.          *\n*                     //SYSUDUMP  DD    SYSOUT=A                    *\n*                                                                   *\n*                     NOTES:                                        *\n*                            TIME PARM-IF THIS PROGRAM IS CANCELLED *\n*                            FOR WAIT TIME, MODS BECOME RESIDENT    *\n*                            UNTIL THE NEXT IPL, UNLESS OVERRIDDEN  *\n*                            BY ANOTHER STARTUP OF THIS PROGRAM.    *\n*                            DD MODREP-IS WHERE THE MODULES THAT    *\n*                            YOU WILL BE LOADING ON A REAL TIME     *\n*                            BASIS EXIST.                           *\n*                            DD STEPLIB-LIBRARY MUST BE NAMED IN    *\n*                            IEAAPFXX MEMBER OF PARMLIB, ELSE USE   *\n*                            A LINKLIST DATASET WITH NO STEPLIB     *\n*                            SYSUDUMP IS NOT NECESSARY (AS THIS     *\n*                            CODE IS TOTALLY INFALLIBLE)...SORT OF  *\n*                            IT IS POSSIBLE TO HAVE AS MANY COPIES  *\n*                            OF THIS PROGRAM RUNNING AT ONCE AS IS  *\n*                            NECESSARY (IE. 1 PER PDS LIBRARY BEING *\n*                            ACCESSED).                             *\n*                                                                   *\n*  WTOR:               OUTSTANDING WTOR FOR LIFE OF TASK            *\n*                      \"MODREP READY\"                               *\n*                                                                   *\n*  REPONSES:           \"DISPLAY\" - DISPLAY ALL MODULES/SVCS         *\n*                                  CURRENTLY LOADED AND THEIR EPA'S *\n*                      \"DI\"      - SHORT FORM OF ABOVE              *\n*                      \"DELETE\"  - REMOVE (DELETE) ALL MODULES      *\n*                                  LOADED, THEN GO AWAY             *\n*                      \"DE\"      - SHORT FORM OF ABOVE              *\n*                      \"KEEP\"    - LEAVE (KEEP) ALL MODULES LOADED, *\n*                                  THEN GO AWAY                     *\n*                      \"KE\"      - SHORT FORM OF ABOVE              *\n*                      \"XXXXXXXX\"- XXXXXXXX IS THE NAME OF THE      *\n*                                  MODULE/SVC TO BE LOADED          *\n*                                                                   *\n*  INFORMATION ON ALIASES:    ----------WARNING----------           *\n*                                                                   *\n*        ALIAS SHOULD BE LOADED AFTER LOADING THE TRUE NAME VIA     *\n*        MODREP. THIS SHOULD BE DONE TO ASSURE THAT THE MEMORY      *\n*        USED BY THE ALIAS ENTRY(S) WILL BE FREED WHEN NECESSARY.   *\n*        IF YOU FORGET TO LOAD THE TRUE NAME, THE ONLY DAMAGE IS    *\n*        THAT THE MEMORY USED CANNOT BE FREED VIA \"DE\" OR \"DELETE\"; *\n*        NEVERTHELESS, \"DE\" OR \"DELETE\" WILL CAUSE THE CESSATION    *\n*        OF USE OF ALL ALIASES. BE AWARE THAT IT IS ONLY NECESSARY  *\n*        TO LOAD A SINGLE TRUE NAME AND A SINGLE ALIAS FOR THE      *\n*        ROUTINE ENTRY POINT THAT YOU WANT TO TEST; IT IS NOT       *\n*        NECESSARY TO LOAD EVERY SINGLE ALIAS FOR A MODULE FOR      *\n*        MODREP TESTING PURPOSES. ALSO, BE AWARE THAT AN ALIAS      *\n*        ONLY COSTS 48 BYTES FOR THE CDE/XTLST, AND NO MEMORY FOR   *\n*        FOR THE MODULE, AND THE ENTIRE MODULE IS LOADED UNDER THE  *\n*        TRUE NAME.                                                 *\n*                                                                   *\n*  INFORMATIONAL MESSAGES:                                          *\n*                                                                   *\n*        MESSAGE FORMAT-                                            *\n*        WTO   'MODREP-XXXXX XXXXX XXXXX',ROUTCDE=(2)               *\n*               XXXXX REPRESENTS TEXTS FOUND BELOW ENCLOSED IN      *\n*               DOUBLE PARENS.                                      *\n*                                                                   *\n*                      \"LPA REP SUCCESSFUL\"                         *\n*                      ---THE REQUESTED MODULE HAS BEEN PLACED IN   *\n*                         THE LXA (LINK PACK EXTENSION AREA) AND THE*\n*                         ACTIVE LPA CHAIN UPDATED WITH THE NEWLY   *\n*                         BUILT CDE/XTLST, SO THAT SUBSEQUENT USES  *\n*                         OF THE MODULE WILL BE USING THIS          *\n*                         REPLACEMENT COPY                          *\n*                                                                   *\n*                      \"SVC REP SUCCESSFUL\"                         *\n*                      ---THE REQUESTED MODULE HAS BEEN PLACED IN   *\n*                         THE NXA (NUCLEUS EXTENSION AREA) IF A     *\n*                         TYPE 1 OR TYPE 2 SVC, OR PLACED IN THE    *\n*                         LXA (LINK PACK EXTENSION AREA) IF A TYPE  *\n*                         3 OR 4 SVC, AND THE SVC TABLE UPDATED     *\n*                         SO THAT SUBSEQUENT USES OF THE SVC WILL BE*\n*                         USING THIS REPLACEMENT COPY               *\n*                                                                   *\n*                      NOTE: THE DETERMINATION OF WHETHER OR NOT    *\n*                            YOUR MODULE GOES IN THE NXA OR LXA     *\n*                            IS BASED ON THE MODULE NAME. IGCXXX    *\n*                            IS CONSIDERED A TYPE 1/2 SVC IF XXX    *\n*                            IS BETWEEN 0-255 (THESE MODULES GO IN  *\n*                            THE NXA). IGC00XXX IS CONSIDERED A TYPE*\n*                            3/4 SVC IF XXX IS BEWTEEN 0-255 (THESE *\n*                            MODULES GO IN THE LXA). ANY OTHER NAME *\n*                            IS CONSIDERED A STANDARD LPA NAME (OR  *\n*                            A STANDARD SVC SECOND, THIRD, ETC. LOAD*\n*                            AND IS THUS PLACED IN THE LXA). THE    *\n*                            NXA AND LXA ARE CONCEPTUAL ONLY, IN    *\n*                            REALITY BOTH EXIST IN SP 228.          *\n*                                                                   *\n*                      \"SVCTABLE TYPE INVALID, CHANGED TO TYPE 3\"   *\n*                      ---YOU HAVE REQUESTED A TYPE 3/4 SVC BE      *\n*                         REPLACED IN THE LXA (BASED ON THE NAME YOU*\n*                         SUPPLIED (SEE NOTE ABOVE)), BUT THE       *\n*                         SVC ENTRY TYPE INDICATES A NON-TYPE 3/4   *\n*                         SVC (IE. 1,2,5,6). THEREFORE, THE SVCTABLE*\n*                         IS TEMPORARILY UPDATED TO INDICATE THAT   *\n*                         THIS SVC IS A TYPE 3. BEFORE FINAL SVC    *\n*                         INSTALLATION, BE SURE TO ZAP THE SVCTABLE,*\n*                         OR DO ANOTHER I/O GEN SPECIFYING THE      *\n*                         CORRECT TYPE OF SVC.                      *\n*                                                                   *\n*                      \"SVCTABLE TYPE INVALID, REQUEST REJECTED\"    *\n*                      ---YOU HAVE REQUESTED A TYPE 1/2 SVC BE      *\n*                         REPLACED IN THE NXA (BASED ON THE NAME YOU*\n*                         SUPPLIED (SEE NOTE ABOVE)), BUT THE       *\n*                         SVC ENTRY TYPE INDICATES A NON-TYPE 1/2   *\n*                         SVC (IE. 3,4,5,6). THEREFORE, THE REQUEST *\n*                         IS REJECTED, AS IT IS UNKNOWN WHETHER YOU *\n*                         INTENDED A TYPE 1 OR A TYPE 2 (THIS IS    *\n*                         VIRTUALLY MEANINGLESS FOR THE ABOVE CASE  *\n*                         OF TYPE 3/4 AS THEY ARE ENTERED WITH THE  *\n*                         SAME ATTRIBUTES, THEREFORE 3/4 IN THAT    *\n*                         CASE WILL SUFFICE). TO CORRECT THIS       *\n*                         PROBLEM ON A TEMPORARY BASIS, IN-CORE ZAP *\n*                         THE SVCTABLE TYPE TO INDICATE THE TYPE OF *\n*                         SVC YOU REQUIRE, THEN RE-ISSUE YOUR       *\n*                         COMMAND. BEFORE FINAL SVC INSTALLATION, BE*\n*                         SURE TO ZAP THE SVCTABLE, OR DO ANOTHER   *\n*                         I/O GEN SPECIFYING THE CORRECT TYPE OF SVC*\n*                         (NOTE: THIS WILL MOST LIKELY HAPPEN IN THE*\n*                         CASE OF AN UNDEFINED OR TYPE 5 SVC).      *\n*                                                                   *\n*                      NOTE: SVC'S THAT ARE CURRENTLY DEFINED AS    *\n*                            TYPE 5'S, OR CURRENTLY UNDEFINED MAY   *\n*                            BE REPLACED IN THE ABOVE MANNER, IT    *\n*                            IS NOT NECESSARY TO DO AN I/O GEN PRIOR*\n*                            TO TESTING THE SVC(S), BUT IF ANY LOCKS*\n*                            ARE NECESSARY THAT ARE NOT ALREADY ON  *\n*                            IN THE SVCTABLE ENTRY, THEY MUST BE    *\n*                            ZAPPED ON PRIOR TO THE LOADING OF THE  *\n*                            SVC BY MODREP, OR THE SVC WILL BE      *\n*                            ENTERED WITH INCORRECT LOCK ATTRIBUTES.*\n*                                                                   *\n*                      \"LPA/SVC DELETE(S) SUCCESSFUL\"               *\n*                      ---IN RESPONSE TO YOUR \"DELETE\" OR \"DE\"      *\n*                         REQUEST, ALL MODULES AND SVCS CURRENTLY   *\n*                         UNDER CONTROL OF MODREP (THIS MODULE) HAVE*\n*                         BEEN SUCCESSFULLY REMOVED FROM THE SYSTEM.*\n*                         IN THE CASE OF SVC'S, THE SVCTABLE IS     *\n*                         PLACED BACK IN IT'S PRE-MODREP (ORIGINAL) *\n*                         STATE (INCLUDING SVC TYPE), AND THE NXA   *\n*                         MEMORY IS FREED. IN THE CASE OF LPA       *\n*                         MODULES, THE CDE/XTLST THAT WERE BUILT    *\n*                         FOR THIS MODULE ARE DE-CHAINED, AND THE   *\n*                         MEMORY FOR THE CDE/XTLST (SQA) AND LXA    *\n*                         MEMORY IS FREED. THE NET RESULT IS THAT   *\n*                         EVERYTHING IS AS IT WAS PRIOR TO THE      *\n*                         INVOKATION OF MODREP.                     *\n*                                                                   *\n*                      \"ALL LPA/SVC MODS REMAIN RESIDENT\"           *\n*                      ---IN RESPONSE TO YOUR \"KEEP\" OR \"KE\"        *\n*                         REQUEST, ALL MODULES AND SVCS CURRENTLY   *\n*                         UNDER CONTROL OF MODREP (THIS MODULE) ARE *\n*                         RELEASED TO THE SYSTEM FOR PERMANENT USE  *\n*                         UNTIL THE NEXT IPL. ONCE THIS HAS TAKEN   *\n*                         PLACE, THE ONLY WAY TO GET RID OF THE MOD *\n*                         IS TO START ANOTHER COPY OF MODREP AND    *\n*                         PLACE A \"NEWER\" COPY OF THE MOD IN THE    *\n*                         SYSTEM. YOU CAN NEVER DELETE ANY MODULE   *\n*                         THAT WAS PLACED IN THE SYSTEM WITH A PRIOR*\n*                         INVOKATION OF MODREP. THIS CONSIDERATION  *\n*                         IS ONLY IMPORTANT IN THE FACT THAT A      *\n*                         SUBSEQUENT USE OF THIS MODULE WILL        *\n*                         SUCCESSFULLY DO WHAT YOU WANT, BUT THE    *\n*                         PREVIOUS INVOKATION'S MEMORY FOR THE      *\n*                         CDE/XTLST AND MODULE (NXA,LXA) ARE FIXED, *\n*                         AND THUS BECOME WASTED \"REAL FRAMES\" OF   *\n*                         MEMORY. ALSO A CONSIDERATION FOR SVC'S    *\n*                         IS THAT MODREP CAN ONLY PLACE THE SVCTABLE*\n*                         BACK IN THE STATE IT WAS WHEN MODREP BEGAN*\n*                         (ASSUMING YOU ENTER \"KEEP\" OR \"KE\"),      *\n*                         THEREFORE, THE SVCTABLE CAN NEVER BE      *\n*                         PLACED BACK IN IT'S ORIGINAL (AS OF IPL)  *\n*                         STATE WITHOUT AN IPL (OR IN-CORE ZAP IF   *\n*                         YOU RECORDED THE EPA BEFORE USING MODREP).*\n*                         IF IT IS NOT OBVIOUS BY NOW, THE          *\n*                         IMPLICATIONS ARE SUCH THAT IF YOU REPLY   *\n*                         \"KEEP\" OR \"KE\", YOU HAD BETTER MEAN IT!!! *\n*                                                                   *\n*                      NOTE: THE FAILURE OF THIS MODULE (ABEND) IS  *\n*                            AN IMPLIED \"KEEP\" OR \"KE\". THERE IS    *\n*                            CURRENTLY NO ESTAE ENVIRONMENT, AND IT *\n*                            HAS NOT YET PROVEN NECESSARY. THE MOST *\n*                            COMMON LOSS OF THE MODULE WILL BE A    *\n*                            B23 ABEND DUE THE COMTASK FAILING,     *\n*                            THUS THIS TASK'S WTOR CAUSING IT'S     *\n*                            FAILURE. SHOULD THIS HAPPEN, YOU HAVE  *\n*                            MORE TO WORRY ABOUT THAN MODREP. YOU   *\n*                            MAY START A SUBSEQUENT COPY AS         *\n*                            EXPLAINED ABOVE, SHOULD THE COMTASK    *\n*                            FAILURE (OR ANY OTHER FAILURE) NOT BE  *\n*                            PERMANENT.                             *\n*                                                                   *\n*                      \"MODULE UNLOCATABLE\"                         *\n*                      ---IN RESPONSE TO YOUR \"XXXXXXXX\" REQUEST,   *\n*                         A BLDL TO THE CURRENT PDS (SPECIFIED BY   *\n*                         THE //MODREP DD STATEMENT) INDICATES THAT *\n*                         THE REQUESTED MODULE DOES NOT EXIST, AND  *\n*                         THEREFORE CANNOT BE LOADED. CHECK THAT YOU*\n*                         HAVE SPECIFIED THE CORRECT NAME, OR THE   *\n*                         CORRECT LIBRARY (SEE \"LIB\" ON PROC        *\n*                         STATEMENT FOR POSSIBLE OVERRIDE)          *\n*                                                                   *\n*                      \"LOCK FAILURE\"                               *\n*                      ---DURING PROCESSING, A FAILURE TO OBTAIN    *\n*                         OR RELEASE A REQUIRED LOCK HAS OCCURRED.  *\n*                         ALTHOUGH THIS IS MOST LIKELY A SYSTEM     *\n*                         ORIENTED PROBLEM (OR CODE HAS BEEN ADDED  *\n*                         INCORRECTLY), THE LAST COMMAND ISSUED MAY *\n*                         BE RE-ISSUED TO CHECK THE VALIDITY OF THE *\n*                         MESSAGE WITH NO HARM. IF THE MESSAGE      *\n*                         PERSISTS TAKE TWO ASPIRIN AND LIE DOWN,   *\n*                         OR CHECK TO SEE WHO IS THE CURRENT HOLDER *\n*                         OF THE SALLOC OR DISP LOCK, AND FIND OUT  *\n*                         WHY HE WILL NOT RELEASE IT (YOU HAVE      *\n*                         NOW DEFINITELY UNCOVERED A SYSTEM BUG).   *\n*                                                                   *\n*                      \"SVC REP SUCCESSFUL\"                         *\n*                      \"SQA CRITICAL, REQUEST ABORTED\"              *\n*                      ---DURING PROCESSING, A CONDITIONAL REQUEST  *\n*                         FOR SQA (FOR CDE/XTLST, OR FETCH          *\n*                         PRE-PROCESSING CODE) HAS RETURNED A       *\n*                         NON-ZERO RETURN CODE, INDICATING THAT SQA *\n*                         IS NOT CURRENTLY AVAILABLE. THE LAST      *\n*                         COMMAND ISSUED MAY BE RE-ISSUED TO CHECK  *\n*                         THE VALIDITY OF THE MESSAGE WITH NO HARM. *\n*                         IF THE MESSAGE PERSISTS, CHECK THE CURRENT*\n*                         SQA LEVEL, DETERMINE WHO IS USING IT AND  *\n*                         WHY, AND WAIT UNTIL IT IS RELEASED, OR IF *\n*                         NECESSARY, RE-IPL SPECIFYING MORE SQA     *\n*                         (OR CSA FOR EXPANSION).                   *\n*                                                                   *\n*                      \"RESPONSE LOST-REENTER\"                      *\n*                      ---DURING PROCESSING, A FREEMAIN REQUEST FOR *\n*                         CSA OBTAINED BY THIS MODULE HAS FAILED.   *\n*                         RE-ENTER THE LAST COMMAND, AND THE        *\n*                         FREEMAIN WILL BE RE-ATTEMPTED. IF THE     *\n*                         CONDITION PERSISTS, REPLY \"DISPLAY\" OR    *\n*                         \"DI\" TO FIND WHICH MODULES ARE STILL UNDER*\n*                         MODREP'S CONTROL. THE MODULES LISTED ARE  *\n*                         THOSE THAT CANNOT BE FREED. ENTER \"KEEP\"  *\n*                         OR \"KE\" TO ALLOW MODREP TO SHUTDOWN       *\n*                         NORMALLY, THEN IF THOSE MODULES LISTED    *\n*                         SHOULD HAVE BEEN REPLACED BY THE ORIGINALS*\n*                         IT WILL BE NECESSARY TO START MODREP AGAIN*\n*                         RUNNING AGAINST THE LIBRARY WHERE THE     *\n*                         ORIGINAL MOUDLES ARE, AND USING MODREP TO *\n*                         RE-LOAD THE ORIGINALS. THIS CONDITION     *\n*                         SHOULD NEVER PERSIST FOR MORE THAN THREE  *\n*                         ATTEMPTS, IF IT DOES USE DRISTAN NASAL    *\n*                         DECONGESTIVE, THEN LOOK AT THE PROGRAM    *\n*                         LOGIC.                                    *\n*                                                                   *\n*                                                                   *\n*                      \"ALREADY LOADED, IGNORED\"                    *\n*                      ---YOU HAVE REQUESTED THAT MODREP LOAD A     *\n*                         MODULE WHICH HAS ALREADY BEEN LOADED BY   *\n*                         MODREP DURING THIS SESSION. THE REQUEST   *\n*                         IS IGNORED. IF YOU MUST LOAD ANOTHER COPY *\n*                         EITHER USE MODREP TO DELETE THE CURRENT   *\n*                         ONE, OR IF YOU HAVE MULTILPLE MODULES     *\n*                         UNDER MODREPS CONTROL AND YOU DO NOT WISH *\n*                         TO DELETE ALL THE MODULES (WHICH \"DELETE\" *\n*                         OR \"DE\" DOES), START ANOTHER COPY OF      *\n*                         MODREP, AND LOAD YOUR MODULE USING THE    *\n*                         NEW COPY.                                 *\n*                                                                   *\n*                      \"SLOT TABLE OVERFLOW\"                        *\n*                      ---AFTER LOADING THE REQUESTED MODULE, MODREP*\n*                         FOUND NO SPACE IN HIS \"SLOT TABLE\" TO     *\n*                         RECORD NECESSARY INFORMATION FOR LATER    *\n*                         DELETEION. THE MODULE JUST LOADED CANNOT  *\n*                         BE DELETED. FOR A TEMPORARY SOLUTION (IF  *\n*                         THE MODULE MUST BE DELETED, USE THE       *\n*                         PROCEDURE DEFINED IN THE SECTION ABOVE    *\n*                         FOR THE \"RE-LOADING\" OF THE ORIGINAL COPY.*\n*                         AS A FINAL SOLUTION, QUIT BEING A TURKEY  *\n*                         AND DON'T LOAD OVER 20 MODULES AT A TIME  *\n*                         WITH MODREP. OR...IF YOU MUST PERSIST IN  *\n*                         BEING A TURKEY, INCREASE THE MULTIPLIER   *\n*                         AT CONSTANT NAMTABLE TO THE MAXIMUM AMOUNT*\n*                         OF LOADS REQUIRED.                        *\n*                                                                   *\n*                      \"PDS OPEN FAILED\"                            *\n*                      ---MODREP WAS UNABLE TO OPEN THE PDS NAMED   *\n*                         IN THE //MODREP DD STATEMENT IN YOUR      *\n*                         PROC.  START MODREP AGAIN, IF THE FAILURE *\n*                         PERSISTS, CHECK TO BE SURE THE DATA SET   *\n*                         IS INTACT. FOR A TEMPORARY SOLUTION, MOVE *\n*                         THE NECESSARY MODULES TO ANOTHER LIBRARY. *\n*                                                                   *\n*                      \"INTERNAL CDE CHAIN ERROR\"                   *\n*                      ---INTERNAL PROCESSING HAS FOUND A GLITCH    *\n*                         IN THE SYSTEM BUILT CDE AS A RESULT OF    *\n*                         AN INTERNAL LOAD. ALL MODULES CURRENTY    *\n*                         LOADED ARE KEPT, AND MODREP DUMPS WITH    *\n*                         A USER 100.                               *\n*                                                                   *\n*                      \"INTERNAL LLE CHAIN ERROR\"                   *\n*                      ---INTERNAL PROCESSING HAS FOUND A GLITCH    *\n*                         IN THE SYSTEM BUILT LLE AS A RESULT OF    *\n*                         AN INTERNAL LOAD. ALL MODULES CURRENTY    *\n*                         LOADED ARE KEPT, AND MODREP DUMPS WITH    *\n*                         A USER 200.                               *\n*                                                                   *\n*                      \"XXXXXXXX EP YYYYYY\"                         *\n*                      ---IN RESPONSE TO YOUR \"DISPLAY\" OR \"DI\"     *\n*                         COMMAND, THE MODULE NAMED XXXXXXXX HAS    *\n*                         AN EP OF YYYYYY.  ALL MODULES CURRENTY    *\n*                         LOADED ARE LISTED.                        *\n*                                                                   *\n*                      \"NO MODS IN USE\"                             *\n*                      ---IN RESPONSE TO YOUR \"DISPLAY\" OR \"DI\"     *\n*                         COMMAND, MODREP HAS DETERMINED THAT       *\n*                         NO MODULES ARE CURRENTLY UNDER HIS        *\n*                         CONTROL.                                  *\n*                                                                   *\n*                                                                   *\n*                                                                   *\n*********************************************************************\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         TITLE  'MODREP INITIALIZATION SECTION'\nMODREP   CSECT                            INITIALIZATION\n         SPACE 3\n         STM   R14,R12,12(R13)            SAVE CALLER'S REGS\n         LR    R12,R15                    ZERO BASE\n         USING MODREP,R12                 TELL ASSEMBLER THE NEWS\n         LA    R11,SAVE                   SAVE\n         ST    R11,8(R13)                 AREA\n         ST    R13,4(R11)                 CHAIN\n         LR    R13,R11                    CONVENTIONS\n         MODESET KEY=ZERO,MODE=SUP        FOR LOCK\n         SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,REGS=SAVE,             X\n               RELATED=('REL0')\n         LTR   R15,R15                    GET IT?\n         BNZ   LOCKFAIL                   NO.\n         LA    R1,LENGTH                  FETCH PATCH LENGTH\n         GETMAIN RC,LV=(R1),SP=245,BRANCH=(YES,GLOBAL)\n         LTR   R15,R15                    GET IT?\n         BNZ   SQAFAIL                    NO. YUK.\n         ST    R1,SAVESQA                 YES.\n         SPACE 3\nREL0     DS    0H                         FREE AP/MP FOR SQA\n         SPACE 3\n         SETLOCK RELEASE,TYPE=SALLOC,REGS=SAVE,RELATED=('SET1')\n         LTR   R15,R15                    REL IT?\n         BNZ   LOCKFAIL                   NO.\n         L     R2,X'10'                   CVT\n         LA    R1,X'2D0'(,R2)             CVTFETCH\n         ST    R1,AFETCHEP                SAVE\n         L     R1,X'2D0'(,R2)             CVTFETCH EP\n         ST    R1,RFETCHEP                SAVE\n         L     R2,SAVESQA                 GOTTEN PATCH\n         ST    R2,MFETCHEP                SAVE\n         MVC   0(LENGTH,R2),FETCHPAT      RELOCATE PATCH\n         SPACE 3\nPATCHTIO DS    0H                         DUMMY UP TIOT\n         SPACE 3\n         L     R2,X'10'                   THIS IS TO\n         L     R2,0(,R2)                  BE ABSOLUTELY\n         L     R2,4(,R2)                  SURE THAT THIS\n         L     R2,12(,R2)                 MODULE DOES NOT\n         MVC   0(16,R2),TIOT              GET LOADED TO CSA\n         MODESET KEY=NZERO\n         B     OPEN\n         EJECT\n         TITLE  'MODREP OPEN LIBRARY SECTION'\n         SPACE 3\nOPEN     DS    0H                         OPEN MODREP LIB\n         SPACE 3\n         OPEN  DCB\n         LA    R1,DCB                     IS\n         USING IHADCB,1                   OPEN\n         TM    DCBOFLGS,DCBOFOPN          GOOD?\n         BZ    OPENFAIL                   NO.\n         B     WTOR                       YES.\n         EJECT\n         TITLE  'MODREP WTOR RESPONSE HANDLING SECTION'\n         SPACE 3\nWTOR     DS    0H\n         SPACE 3\n         XC    REPLY(8),REPLY             CLEAR REPLY AREA\n         XC    ECBAD(4),ECBAD             AND ASSOCIATED ECB\n         WTOR  'MODREP READY',REPLY,8,ECBAD,ROUTCDE=(2)\n         WAIT  ECB=ECBAD                  DO THE \"HO-HUM\"\n         OC    REPLY,=CL8' '              UPPER CASE\n         CLC   =C'DISPLAY',REPLY          DISPLAY STATUS?\n         BE    DISPLAY                    YES.\n         CLC   =C'DI',REPLY               DISPLAY STATUS?\n         BE    DISPLAY                    YES.\n         CLC   =C'DELETE',REPLY           DELETE MODS?\n         BE    DELETE                     YES.\n         CLC   =C'DE',REPLY               DELETE MODS?\n         BE    DELETE                     YES.\n         CLC   =C'KEEP',REPLY             KEEP MODS?\n         BE    KEEP                       YES.\n         CLC   =C'KE',REPLY               KEEP MODS?\n         BE    KEEP                       YES.\n         MVC   MEMNAME(8),REPLY           SAVE MOD NAME\n         B     GETMOD                     GO FOR IT!!!!\n         EJECT\n         TITLE  'MODREP ADD MODULE SECTION'\nGETMOD   DS    0H\n         SPACE 3\n         LA    R1,NAMTABLE           LOADED NAME TABLE\n         SPACE 3\nPRECHECK DS    0H\n         SPACE 3\n         CLI   0(R1),X'FF'           EOT?\n         BE    BLDL                  YES. VERIFY GOOD\n         CLC   0(8,R1),MEMNAME       NO. DUPLICATE?\n         BE    DUPFAIL               YES. NO GO YO-YO\n         LA    R1,32(,R1)            NO.\n         B     PRECHECK              NEXT\n         SPACE 3\nBLDL     DS    0H\n         SPACE 3\n         BLDL  DCB,BLDLIST           MEMBER IN MODREP LIB?\n         B     *+4(15)\n         B     LOAD                  YES.\n         B     MODUFAIL              NO.\n         SPACE 3\nLOAD     DS     0H\n         SPACE 3\n         MODESET KEY=ZERO            BEGIN ORBIT\n         L      R1,AFETCHEP          CVTFETCH\n         L      R2,MFETCHEP          CVTPATCH EPA\n         ST     R2,0(R1)             DUMMY FETCH EPA\n         LA     R1,MEMNAME           HI THERE, CODE READERS\n         LOAD   DE=(R1),DCB=DCB      LOAD\n         L      R1,AFETCHEP          CVTFETCH\n         L      R2,RFETCHEP          FETCH EPA\n         ST     R2,0(R1)             REAL FETCH EPA\n         MODESET KEY=NZERO           RETURN TO EARTH\n         SPACE 3\nLOADLIST DS     0H\n         SPACE 3\n         L     R2,X'10'              CVT\n         L     R2,0(R2)              N/O\n         L     R2,4(R2)              TCB\n         SLR   R9,R9                 ZIP\n         ICM   R9,7,X'25'(R2)        LLE?\n         BZ    LLEERROR              NO.\n         SLR   R2,R2                 ZIP\n         SPACE 3\nCDECHAIN DS    0H\n         SPACE 3\n         ICM   R2,7,5(R9)            CDE?\n         BZ    CDEERROR              NO.\n         CLC   8(8,R2),MEMNAME       YES. RIGHT ONE?\n         BE    CDESAVE               YES.\n         ICM   R9,7,1(R9)            NO. LLE?\n         BZ    LLEERROR              NO.\n         B     CDECHAIN              YES.\n         SPACE 3\nCDESAVE  DS    0H\n         SPACE 3\n         ST    R2,SAVECDE            SAVE CDE\n         TM    X'1C'(R2),X'04'       ALIAS (MINOR CDE)?\n         BNO   NOTALIAS              NO. CONTINUE\n         L      R2,X'14'(,R2)        GET MAJOR CDE\n         SPACE 3\nNOTALIAS DS    0H\n         SPACE 3\n         L     R2,X'14'(,R2)         GET A MAJOR CDE XTLST\n         ST    R2,SAVEXTL            FOR LATER\n         CLC   =C'IGC',MEMNAME       MAYBE SVC?\n         BNE   SET1                  NO.\n         BAL   R14,SVCUPDAT          YES.\n         SPACE 3\nSET1     DS    0H                    HERE ONLY IF NOT SVC\n         SPACE 3\n         MODESET KEY=ZERO,MODE=SUP   FOR LOCK\n         SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,REGS=SAVE,             X\n               RELATED=('REL1')\n         LTR   R15,R15               GET IT?\n         BNZ   LOCKFAIL              NO.\n         GETMAIN RC,LV=48,SP=245,BRANCH=(YES,GLOBAL)\n         LTR   R15,R15               GET IT?\n         BNZ   SQAFAIL               NO.\n         ST    R1,SAVEGET            YES.\n         SPACE 3\nREL1     DS    0H                    FREE AP/MP FOR CSA\n         SPACE 3\n         SETLOCK RELEASE,TYPE=SALLOC,REGS=SAVE,RELATED=('SET1')\n         LTR   R15,R15               REL IT?\n         BNZ   LOCKFAIL              NO.\n         SPACE 3\nUPDATCDE DS    0H                    FOR MODULES ONLY - NOT SVCS\n         SPACE 3\nGD1      SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,REGS=SAVE,RELATED=('RD1')\n         LTR   R15,R15               GET IT?\n         BNZ   LOCKFAIL              NO.\n         L     R2,X'10'              CVT\n         L     R2,X'0BC'(,R2)        CVTQLPQA\n         L     R1,SAVEGET            GOTTEN SQA\n         L     R8,SAVECDE            REP MOD'S CDE\n         MVC   0(32,R1),0(R8)        MOVE CDE TO SQA\n         TM    X'1C'(R1),X'04'       ALIAS (MINOR CDE)?\n         BNO   NOTALI                NO. CONTINUE\n         L     R8,X'14'(,R1)         GET MAJOR CDE\n         MVC   X'18'(8,R1),X'18'(R8) ASSIMILATE MAJOR CDE USE/ATTR\n         SPACE 3\nNOTALI   DS    0H\n         SPACE 3\n         LA    R8,32(,R1)            GET XTLST LOCATION\n         ST    R8,X'14'(R1)          UPDATE CDE APPROPRIATELY\n         L     R8,0(R2)              GET CURRENT CHAIN BEGINNING\n         ST    R8,0(R1)              CHAIN MYSELF TO REAL FIRST CDE\n         L     R8,SAVEXTL            GET REP MOD'S XTLST\n         MVC   32(16,R1),0(R8)       MOVE XTLST IN BEHIND IT\n         OI    X'1C'(R1),X'B3'       SIMULATE NIP/JPAQ THUMBPRINT\n         ST    R1,0(R2)              CHAIN MYSELF INTO ACT CDE'S\nRD1      SETLOCK RELEASE,TYPE=DISP,REGS=SAVE,RELATED=('GD1')\n         LTR   R15,R15               REL IT?\n         BNZ   LOCKFAIL              NO.\n         MODESET KEY=NZERO,MODE=PROB\n         WTO   'MODREP-LPA REP SUCCESSFUL',ROUTCDE=(2)\n         LA    R1,NAMTABLE           LOADED NAME TABLE\n         SPACE 3\nFINDSLOT DS    0H                    RECORD THE EVENT\n         SPACE 3\n         CLC   0(8,R1),=BL8'0'       OPEN SLOT?\n         BE    STORE                 YES.\n         LA    R1,32(,R1)            NO. BUMP\n         CLI   0(R1),X'FF'           EOT?\n         BE    SLOTERR               YES. USER IS A TURKEY\n         B     FINDSLOT              LOOP\n         SPACE 3\nSTORE    DS    0H                    UPDATE SLOT TABLE\n         SPACE 3\n         MVC   0(8,R1),MEMNAME       SAVE MOD NAME\n         L     R8,SAVECDE            GET REP MOD'S CDE\n         L     R8,X'10'(R8)          & IT'S EPA\n         ST    R8,20(R1)             SAVE\n         L     R8,SAVECDE            GET REP MOD'S CDE\n         TM    X'1C'(R8),X'04'       ALIAS (MINOR CDE)?\n         BNO   WTOR                  NO. GO WAIT\n         MVC   8(8,R1),=C'ALIAS   '  NEED TO KNOW FOR LATER\n         B     WTOR                  GO WAIT\n         SPACE 3\nSVCUPDAT DS    0H                    TYPE 1/2 IGCXXX-3/4 IGC00XXX\n         SPACE 3\n         MVC   SVCNAME,MEMNAME       SAVE SVCNAME\n         CLC   MEMNAME+6(2),=C'  '   TYPE 1/2 MAYBE?\n         BE    SVCNUC                YES. CAN\"T BE 3/4\n         CLC   =C'00',MEMNAME+3      POSSIBLE FIRST LOAD TYPE 3/4\n         BNER  R14                   NO. NOT TYPE 3/4\n*        CLC   =C'00',MEMNAME+3      POSSIBLE FIRST LOAD TYPE 3/4?\n*        BNE   SVCNUC                NO. MIGHT BE NUCLEUS SVC\n         CLI   MEMNAME+5,X'F0'       AT LEAST SVC 1XX?\n         BLR   R14                   NO. NOT TYPE 3/4\n         CLI   MEMNAME+5,X'F2'       AT MOST SVC 2XX?\n         BHR   R14                   NO. NOT TYPE 3/4\n         CLI   MEMNAME+6,X'F0'       AT LEAST SVC X0X?\n         BLR   R14                   NO. NOT TYPE 3/4\n         CLI   MEMNAME+6,X'F9'       AT MOST SVC X9X?\n         BHR   R14                   NO. NOT TYPE 3/4\n         CLI   MEMNAME+7,X'C0'       AT LEAST SVC XXA?\n         BLR   R14                   NO. NOT TYPE 3/4\n         CLI   MEMNAME+7,X'C7'       BETWEEN XXA-XXF?\n         BL    SVCLOAD               YES. VALID TYPE 3/4\n         CLI   MEMNAME+7,X'F0'       AT LEAST SVC XX0?\n         BLR   R14                   NO. NOT TYPE 3/4\n         CLI   MEMNAME+7,X'F9'       AT MOST SVC XXF?\n         BHR   R14                   NO. NOT TYPE 3/4\n         SPACE 3\nSVCLOAD  DS    0H\n         SPACE 3\n         L     15,X'10'              CVT\n         L     15,X'C8'(15)          SCVT\n         L     15,X'84'(15)          SVC TABLE ORIGIN\n         MVC   SVCNAME(5),=5C'0'     ZERO FIRST 5 BYTES OF NAME\n         PACK  DWORD(8),SVCNAME+4(4) SVC NUMBER\n         MP    DWORD(8),SVCENLEN     * LENGTH OF SVC ENTRY\n         CVB   14,DWORD              + SVC ORIGIN =\n         AR    R14,R15               SVC ENTRY\n         TM    4(R14),X'C0'          TYPE 3/4 SVC?\n         BO    TYPE34                YES. GROOVY\n         CLI   MEMNAME+6,C' '        TYPE 1/2?\n         BE    CONTINU               YES. NOT 3/4, ASSUME OK\n         WTO   'MODREP-SVCTABLE TYPE INVALID, CHANGED TO TYPE 3'       X\n               ROUTCDE=(2)\n         SPACE 3\nTYPE34   DS    0H\n         SPACE 3\n         CLI   MEMNAME+6,C' '        TYPE 1/2?\n         BNE   CONTINU               NO. REALLY IS TYPE 3/4\n         WTO   'MODREP-SVCTABLE TYPE INVALID, REQUEST REJECTED',       X\n               ROUTCDE=(2)\n         B     WTOR                  GO WAIT\n         SPACE 3\nCONTINU  DS    0H\n         SPACE 3\n         LA    R1,NAMTABLE           LOADED NAME TABLE\n         B     FINDSVCS              FIND SLOT TO RECORD EVENT\n         SPACE 3\nFINDSVCS DS    0H\n         SPACE 3\n         CLC   0(8,R1),=BL8'0'       AVAILABLE ENTRY?\n         BE    STORESVC              YES. SAVE SVC NAME\n         LA    R1,32(,R1)            NO. BUMP\n         CLI   0(R1),X'FF'           EOT?\n         BE    SLOTERR               YES. WHAT A TURKEY\n         B     FINDSVCS              FIND OPEN SLOT FOR SVC ENTRY\n         SPACE 3\nSTORESVC DS    0H\n         SPACE 3\n         MVC   0(8,R1),MEMNAME       SAVE SVC NAME\n         MVC   8(8,R1),0(R14)        SAVE SVC ENTRY FROM SVC TABLE\n         ST    R14,16(R1)            SAVE SVC TABLE ENTRY ADDRESS\n         L     R8,SAVECDE            GET REP MOD'S CDE\n         L     R8,X'10'(R8)          GET IT'S EPA\n         ST    R8,20(R1)             SAVE IT'S EPA\n         L     R8,SAVEXTL            GET REP MOD'S XTLST\n         L     R8,8(,R8)             GET LENGTH\n         ST    R8,28(R1)             SAVE IT\n         L     R8,SAVEXTL            GET REP MOD'S XTLST\n         L     R8,12(,R8)            GET MSBA\n         ST    R8,24(R1)             SAVE IT\n         MODESET KEY=ZERO\n         CLI   MEMNAME+6,C' '        TYPE 1/2?\n         BE    SKIPTHRE              YES. SKIP TYPE 3 GUARANTEE\n         OI    8(R14),X'C0'          GUARANTEE TYPE 3/4 SVC\n         SPACE 3\nSKIPTHRE DS    0H\n         SPACE 3\n         ST    R8,0(R14)             UPDATE SVC TABLE\n         MODESET KEY=NZERO\n         WTO   'MODREP-SVC REP SUCCESSFUL'\n         B     WTOR                  DONE, GO WAIT\n         SPACE 3\nSVCNUC   DS    0H                    CHECK FOR TYPE 1/2 SVC\n         SPACE 3\n         CLC   MEMNAME+6(2),=C'  '   IGCXXX (WITH 2 BLANKS ON BACK)?\n         BNER  R14                   NO. NOT TYPE 1/2 SVC\n         MVC   SVCNAME+5(3),MEMNAME+3    DUMMY SVC NAME FOR CONVERT\n         CLI   SVCNAME+5,X'F0'       AT LEAST SVC 1XX?\n         BLR   R14                   NO. NOT TYPE 1/2\n         CLI   SVCNAME+5,X'F2'       AT MOST SVC 2XX?\n         BHR   R14                   NO. NOT TYPE 1/2\n         CLI   SVCNAME+6,X'F0'       AT LEAST SVC X0X?\n         BLR   R14                   NO. NOT TYPE 1/2\n         CLI   SVCNAME+6,X'F9'       AT MOST SVC X9X?\n         BHR   R14                   NO. NOT TYPE 1/2\n         CLI   SVCNAME+7,X'C0'       AT LEAST SVC XXA?\n         BLR   R14                   NO. NOT TYPE 1/2\n         CLI   SVCNAME+7,X'C7'       BETWEEN XXA-XXF?\n         BL    SVCLOAD               YES. VALID TYPE 1/2\n         CLI   SVCNAME+7,X'F0'       AT LEAST SVC XX0?\n         BLR   R14                   NO. NOT TYPE 1/2\n         CLI   SVCNAME+7,X'F9'       AT MOST SVC XXF?\n         BHR   R14                   NO. NOT TYPE 1/2\n         B     SVCLOAD               YES. TYPE 1/2, IGCXXX\n         EJECT\n         TITLE  'MODREP DELETE MODULE SECTION'\nDELETE   DS    0H\n         SPACE 3\nRIPLECDE DS    0H                    RUN THE CDE CHAIN\n         SPACE 3\n         MODESET KEY=ZERO,MODE=SUP   LOCK UP EVERYTHING\nGD2      SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,REGS=SAVE,RELATED=('RD2')\n         LTR   R15,R15               GET IT?\n         BNZ   LOCKFAIL              NO.\n         SPACE 3\nCONTONLY DS    0H                    SCANNING AND HAVE LOCK ALREADY\n         SPACE 3\n         L     R10,X'10'             CVT\n         L     R10,X'0BC'(,R10)      CVTQLPAQ\n         SPACE 3\nSEARCH   DS    0H\n         SPACE 3\n*********************************************************************\n*        RE-CHAIN CDE'S REMOVING MY CDE'S FROM THE CHAIN            *\n*********************************************************************\n         SPACE 3\n         LR    R11,R10               PREV CDE FOR CHAIN RECONFIGURE\n         ICM   R10,15,0(R10)         LAST CDE?\n         BZ    SVCTABCK              YES. EXIT TO SVCTABLE CLEANUP\n         TM    X'1C'(R10),X'02'      MY THUMBPRINT HERE???\n         BNO   SEARCH                NO.\n         TM    X'1C'(R10),X'80'      MLPA/FLPA? (DOUBLE CHECK)\n         BNO   SEARCH                NO.\n         LA    R1,NAMTABLE           YES. LOADED NAME TABLE\n         SPACE 3\nTABLECHK DS    0H\n         SPACE 3\n         CLC   0(8,R1),8(R10)        WAS IT LOADED THIS TIME AROUND?\n         BE    DELETEM               YES. DELETE IT\n         CLI   0(R1),X'FF'           EOT?\n         BNE   TABNEXT               NO.\n         NI    X'1C'(R10),X'FD'      YES. REMOVE THUMBPRINT (PREV RUN)\n         B     CONTONLY              CONT CDE SCAN, LOCK INTACT\n         SPACE 3\nTABNEXT  DS    0H\n         SPACE 3\n         LA    R1,32(,R1)            NEXT ENTRY\n         B     TABLECHK              CHECK IT\n         SPACE 3\nDELETEM  DS    0H\n         SPACE 3\n         LR    R8,R1                 SAVE CURR TABLE ENTRY\n         XC    0(8,R1),0(R1)         INDICATE MODULE DELETED\n         L     R1,0(R10)             GET CHAIN TO NEXT CDE\n         ST    R1,0(R11)             RECHAIN PREV CDE TO NEXT CDE\nRD2      SETLOCK RELEASE,TYPE=DISP,REGS=SAVE,RELATED=('GD2')\n         LTR   R15,R15               GET IT?\n         BNZ   LOCKFAIL              NO.\n         SPACE 3\nSET2     DS    0H                    LOCK AP/MP OUT OF CSA\n         SPACE 3\n         SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,REGS=SAVE,             X\n               RELATED=('REL2')\n         LTR   R15,R15               GET IT?\n         BNZ   LOCKFAIL              NO.\n         CLC   =C'ALIAS',8(R8)       ALIAS (MINOR CDE)?\n         BE    BYPALIAS              YES. MOD FREED VIA TURE NAME\n*        TM    X'1C'(R10),X'04'      ALIAS (MINOR CDE)?\n*        BO    BYPALIAS              YES. MOD FREED VIA TRUE NAME\n         L     R15,X'14'(R10)        GET CDE XTLST ADDR\n         SLR   R4,R4                 ZIP\n         SLR   R7,R7                 ZIP\n         ICM   R7,7,9(R15)           GET LENGTH OF MODULE\n         ICM   R4,7,13(R15)          GET MODULE MSBA\n         FREEMAIN RC,LV=(R7),A=(R4),SP=228,BRANCH=(YES,GLOBAL)\n         LTR   R15,R15               MODULE FREED?\n         BNZ   CSAFAIL               NO.\n         SPACE 3\nBYPALIAS DS    0H\n         SPACE 3\n         FREEMAIN RC,LV=48,A=(R10),SP=245,BRANCH=(YES,GLOBAL)\n         LTR   R15,R15               CDE/XTLST FREED?\n         BNZ   SQAFAIL               NO.\n         SPACE 3\nZAPOFF   DS    0H                    RELEASE CODE ONLY ONE TIME\n         SPACE 3\n         NOP   REL2                  RELEASE CODE ONLY ONE TIME\n         LA    R15,LENGTH            ADDR OF FETCH SQA PATCH CODE\n         L     R1,SAVESQA\n         FREEMAIN RC,LV=(R15),A=(R1),SP=245,BRANCH=(YES,GLOBAL)\n         LTR   R15,R15               CDE/XTLST FREED?\n         BNZ   SQAFAIL               NO.\n         MVI   ZAPOFF+1,X'F0'        YES. DON\"T FREE SQA AGAIN\n         SPACE 3\nREL2     DS    0H                    FREE AP/MP FOR CSA\n         SPACE 3\n         SETLOCK RELEASE,TYPE=SALLOC,REGS=SAVE,RELATED=('SET2')\n         LTR   R15,R15               REL IT?\n         BNZ   LOCKFAIL              NO. OH POOP\n         B     RIPLECDE              YES, SCAN CDE'S\n         SPACE 3\nSVCTABCK DS    0H                    RE-ESTABLISH SVC ENTRIES\n         SPACE 3\n*********************************************************************\n*        RESTORE SVC TABLE ENTRIES TO ORIGINAL STATE                *\n*********************************************************************\n         SPACE 3\nRD3      SETLOCK RELEASE,TYPE=DISP,REGS=SAVE,RELATED=('GD2')\n         LTR   R15,R15               GET IT?\n         BNZ   LOCKFAIL              NO.\n         LA    R11,NAMTABLE          NAME TABLE, SVCS ONLY NOW\n         SPACE 3\nTABSVCCK DS    0H\n         SPACE 3\n         CLI   0(R11),X'00'          NULL ENTRY?\n         BE    TABNXSVC              YES. SKIP\n         CLI   0(R11),X'FF'          EOT?\n         BE    CLEAR                 YES. CLEAR TO LAND\n         ICM   R15,7,17(R11)         SVCTAB POINTER\n         MVC   0(8,R15),8(R11)       REP OLD SVC ENTRY\n         SPACE 3\nSET3     DS    0H                    LOCK AP/MP OUT OF CSA\n         SPACE 3\n         SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,REGS=SAVE,             X\n               RELATED=('REL3')\n         LTR   R15,R15               GET IT?\n         BNZ   LOCKFAIL              NO.\n         SLR   R4,R4                 CLEAR\n         SLR   R7,R7                 HI-BYTES\n         ICM   R7,7,29(R11)          SVC LENGTH\n         ICM   R4,7,25(R11)          SVC MSBA\n         FREEMAIN RC,LV=(R7),A=(R4),SP=228,BRANCH=(YES,GLOBAL)\n         LTR   R15,R15               MODULE FREED?\n         BNZ   CSAFAIL               NO.\n         XC    0(32,R11),0(R11)      CLEAR ENTRY\n         SPACE 3\nREL3     DS    0H                    FREE AP/MP FOR CSA\n         SPACE 3\n         SETLOCK RELEASE,TYPE=SALLOC,REGS=SAVE,RELATED=('SET3')\n         LTR   R15,R15               REL IT?\n         BNZ   LOCKFAIL              NO.\n         SPACE 3\nTABNXSVC DS    0H\n         SPACE 3\n         LA    R11,32(,R11)          NEXT ENTRY\n         B     TABSVCCK              CHECK IT\n         SPACE 3\nCLEAR    DS    0H\n         SPACE 3\n         MODESET KEY=NZERO,MODE=PROB RETURN TO EARTH\n         WTO   'MODREP-LPA/SVC DELETE(S) SUCCESSFUL',ROUTCDE=(2)\n         B     BYEBYE                ALL DONE\n         SPACE 3\nKEEP     DS    0H\n         SPACE 3\n         WTO   'MODREP-ALL LPA/SVC MODS REMAIN RESIDENT',ROUTCDE=(2)\n         SPACE 3\nBYEBYE   DS    0H\n         SPACE 3\n         CLOSE DCB                   CLOSE MODREP LIB\n         SLR   15,15                 WAKE UP!!!\n         SVC   3                     THE NIGHTMARE IS OVER\n         SPACE 3\n         EJECT\n         TITLE  'MODREP ERROR HANDLING/DISPLAY SECTION'\nMODUFAIL DS    0H\n         SPACE 3\n         WTO   'MODREP-MODULE UNLOCATABLE',ROUTCDE=(2)\n         B     WTOR                  GO WAIT\n         SPACE 3\nLOCKFAIL DS    0H\n         SPACE 3\n         WTO   'MODREP-LOCK FAILURE',ROUTCDE=(2)\n         B     WTOR                  GO WAIT\n         SPACE 3\nSQAFAIL DS     0H\n         SPACE 3\n         SETLOCK RELEASE,TYPE=SALLOC,REGS=USE,RELATED=('SET2')\n         LTR   R15,R15               REL IT?\n         BNZ   LOCKFAIL              NO.\n         WTO   'MODREP-SQA CRITICAL, REQUEST ABORTED',ROUTCDE=(2)\n         B     WTOR                  GO WAIT\n         SPACE 3\nCSAFAIL DS     0H\n         SPACE 3\n         SETLOCK RELEASE,TYPE=SALLOC,REGS=USE,RELATED=('SET2')\n         LTR   R15,R15               REL IT?\n         BNZ   LOCKFAIL              NO.\n         WTO   'MODREP-RESPONSE LOST-REENTER',ROUTCDE=(2)\n         B     WTOR                  GO WAIT\n         SPACE 3\nDUPFAIL DS     0H\n         SPACE 3\n         WTO   'MODREP-ALREADY LOADED, IGNORED',ROUTCDE=(2)\n         B     WTOR                  GO WAIT\n         SPACE 3\nSLOTERR  DS    0H\n         SPACE 3\n         WTO   'MODREP-SLOT TABLE OVERFLOW',ROUTCDE=(2)\n         B     WTOR                  GO WAIT\n         SPACE 3\nOPENFAIL DS    0H\n         SPACE 3\n         WTO   'MODREP-PDS OPEN FAILED',ROUTCDE=(2)\n         B     KEEP                  JUST QUIT\n         SPACE 3\nCDEERROR DS    0H\n         SPACE 3\n         WTO   'MODREP-INTERNAL CDE CHAIN ERROR',ROUTCDE=(2)\n         ABEND 100,DUMP              SHOW IT\n         SPACE 3\nLLEERROR DS    0H\n         SPACE 3\n         WTO   'MODREP-INTERNAL LLE CHAIN ERROR',ROUTCDE=(2)\n         ABEND 200,DUMP              SHOW IT\n         SPACE 3\nDISPLAY  DS    0H                    DISPLAY MODULES I'M CONTROLLING\n         SPACE 3\n         MVI   ENTRIES,X'00'         ASSUME NOTHING LOADED\n         LA    R2,NAMTABLE           LOADED NAME TABLE\n         SPACE 3\nDLOOP    DS    0H\n         SPACE 3\n         CLI   0(R2),X'00'           SLOT IN USE?\n         BNE   DOWTO                 YES.\n         LA    R2,32(,R2)            NO. BUMP\n         CLI   0(R2),X'FF'           EOT?\n         BNE   DLOOP                 NO.\n         CLI   ENTRIES,X'FF'         ANYTHING DISPLAYED?\n         BE    WTOR                  YES. GO WAIT\n         WTO   'MODREP-NO MODS IN USE',ROUTCDE=(2)\n         B     WTOR                  NO. NOW GO WAIT\n         SPACE 3\nDOWTO    DS    0H\n         SPACE 3\n         OI    ENTRIES,X'FF'         AT LEAST ONE LOADED MOD\n         MVC   EPWTO+15(8),0(R2)     NAME OF MOD\n         LA     7,DWORD              TO\n         LA     8,20(R2)             FROM\n         LA     9,L'FWORD            LENGTH OF FROM\n         CONVERT (7,8,9)             HEX TO EBCDIC\n         MVC   EPWTO+27(6),DWORD+2   EPA\nEPWTO    WTO   'MODREP-XXXXXXXX EP XXXXXX',ROUTCDE=(2)\n         LA    R2,32(,R2)            NEXT ENTRY\n         B     DLOOP                 KEEP LOOKING\n         EJECT\n         TITLE  'MODREP CONSTANTS/DSECTS SECTION'\n*********************************************************************\n*      CONSTANTS, VARIABLES, PATCH AREA, ETC.                       *\n*********************************************************************\n         SPACE 3\nSAVE     DS    19F                     SAVE\n         SPACE 3\nDCB      DCB   DDNAME=MODREP,DSORG=PO,MACRF=(R)\n         SPACE 3\n         DS   0D                       , ALIGNMENT\nBLDLIST  DC   H'1'                     ONE ENTRY\nLISTLEN  DC   H'58'                    OF 58 BYTES\nMEMNAME  DC   C'????????'              REQUESTED MEMBER NAME\nDEINFO   DC   BL58'0'                  FOR LOAD DE\nSAVECDE  DS   F                        SAVE REP MOD'S CDE\nSAVEXTL  DS   F                        SAVE REP MOD'S XTLST\nSAVEGET  DS   F                        SAVE GETMAIN FOR CDE/XTLST\nSAVESQA  DS   F                        SQA AREA OF ALTERNAME FETCH EPA\nECBAD    DC   F'0'                     WTOR ECB\nWORK     DC   F'0'                     SCRATCH PAD\nFWORD    DC   F'0'                     SCRATCH PAD\nDWORD    DC   D'0'                     SCRATCH PAD\nREPLY    DC   CL8' '                   WTOR REPLY\nSVCNAME  DC   CL8' '                   SCRATCH PAD\nSVCENLEN DC   PL1'8'                   SVC TABLE ENTRY LENGTH\nENTRIES  DC   X'00'                    X'FF'=A MOD IS LOADED\n         EJECT\n         DS   0F                       , FOR STORE/LOAD\nNAMTABLE DC   20BL32'0',XL1'FF'        ALLOW TWENTY LOAD'S\n         SPACE 2\n*********************************************************************\n*        BYTES 0-7   = NAME OF MODULE OR SVC THAT IS LOADED         *\n*        BYTES 8-15  = ORIGINAL SVC TABLE ENTRY IF SVC, ZEROS IF    *\n*                      TRUE NAME OF A MODULE, ELSE EBCDIC WORD      *\n*                      \"ALIAS   \" IF ALIAS OF A TRUE NAME           *\n*        BYTES 16-19 = ORIGINAL SVC TABLE ENTRY ADDRESS IF SVC,     *\n*                      ELSE ZEROS                                   *\n*        BYTES 20-23 = MODULE/SVC EPA                               *\n*        BYTES 24-27 = MSBA FROM XTLST IF SVC, ELSE ZEROS           *\n*        BYTES 28-31 = XLEN FROM XTLST IF SVC, ELSE ZEROS           *\n*********************************************************************\n         EJECT\n*********************************************************************\n*        ALTERNATE FETCH EPA, RELOCATABLE, DUAL ADDRESSABILITY      *\n*********************************************************************\n         SPACE 3\n         DS    0F                         , ALIGN\n         USING *,R15\n         SPACE 3\nFETCHPAT L    R1,X'10'                    CVT\n         L    R1,0(R1)                    N/O\n         L    R1,4(,R1)                   TCB\n         LTR  R1,R1                       SRB?\n         BZ   BYPASS                      NO.\n         L    R1,12(R1)                   TIOT\n         LTR  R1,R1                       ANY?\n         BZ   BYPASS                      NO.\n         CLC  0(16,R1),TIOT               MY TIOT?\n         BNE  BYPASS                      NO.\n         LA   R10,228                     YES. SP228\n         SPACE 3\nBYPASS   DS   0H\n         SPACE 3\n         L    R15,RFETCHEP                FETCH EP\n         BR   R15                         HIDE\n         SPACE 3\nTIOT     DC    C'MODREP  ',X'FF',CL7'NORM'   SELF-ALTERED JOB/STEP\nMFETCHEP DC    F'0'                       FETCH ALTERED EP S.A.\nRFETCHEP DC    F'0'                       FETCH UNALTERED EP S.A.\nAFETCHEP DC    F'0'                       FETCH B.E. POINTER CVT\n         DC    F'0'                       RESERVED\nLENGTH   EQU   *-FETCHPAT                 LENGTH OF PATCH\n         DROP  R15                        , DROP PATCH ADDRESSABILITY\n         EJECT\n         SPACE 3\n         LTORG\n         EJECT\n*********************************************************************\n*DSECT MAPPING MACROS FOR USE BY SETLOCK AND BRANCH ENTRY TO GETMAIN*\n*********************************************************************\n         SPACE 3\n         IHAWSAVT     DSECT=YES,CLASS=GLOBAL\n         IHAPSA       DSECT=YES\n         CVT          DSECT=YES\n         SPACE 3\n         PRINT NOGEN\n         DCBD  DSORG=PO,DEVD=DA\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT235/FILE235.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT235", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}