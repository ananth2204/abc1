{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012413000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 999362, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE582.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 999362, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 999362, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE582.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x11\\x02'", "DS1TRBAL": "b'\\xda\\x9c'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04N\\x00\\x04\\x04O\\x00\\x06\\x00\\x12'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04I\\x00\\x00\\x01\\x07\\x01O\\x01\\x07\\x01O\\x08D\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf3@@@'", "ispf": {"version": "04.73", "flags": 0, "createdate": "2007-01-14T00:00:00", "modifydate": "2007-01-14T08:44:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-473"}, "text": "REGULAR CBT TAPE - VERSION 473    FILE:  582\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT473.FILE582\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 9,341 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/14/07    08:44:08    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00D\\x01\\x061\\x8f\\x01\\x061\\x8f\\x08\\x16\\x00'\\x00'\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-11-14T00:00:00", "modifydate": "2006-11-14T08:16:44", "lines": 39, "newlines": 39, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:     Errors and other goodies\nFrom:        Gerhard Postpischil <gerhard@valley.net>\nDate:        Sun, 12 Nov 2006 18:14:49 -0500\nTo:          Sam Golob <sbgolob@cbttape.org>\n\nI got curious when I saw the MVS 3.8j specific file for TAPEMAP\non the CBT site (file 582). I downloaded it, assembled it, and\ntried it. It insists that today is Wednesday. I'm not sure that I\nbelieve that; after looking at the code I still don't know what\nhe was trying to do. I yanked all of it and replaced it by\nsomething shorter that works (all files in the attached ZIP were\ndownloaded with IND$FILE from sequential files, without\ntranslation).\n\nDue to some discussion on the H390 group, I looked at the\nWaterloo G assembler, and discovered I needed PDSLOAD for that. I\nhad a copy, never linked, so I did that. I also ran compares\nagainst the twenty odd copies on the turnkey system, and they're\nall a match except that I inserted your comments. I have not\nchecked it against the version in the current file 93. When I\nneed to update using non './' control cards, I usually use\nCornell's IEBUPDTX, but decided to try PDSLOAD; I found that it\ncan't handle what I needed - groups of IEBUPDTE packets with ./,\nwith each group having a non ./ ADD card. So I redid PDSLOAD to\naccept CTL(xx) to handle that case, concurrently with the\nUPDTE(yy) option. I also got disgusted with the sequential PARM\nentry checks, and rolled them up into a loop. Updated version\n(tested in MVS 3.8) enclosed.\n\n\nCheers,\n    Gerhard Postpischil\n    Bradford, VT\n\nI'm changing ISPs - my new e-mail address is gerhardp (at)\ncharter (dot) net - I finally sprung for a high-speed interface\nthat for six years they've been telling me wasn't available on my\nroad (I had their cabling in my house!).\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE582": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04I\\x00\\x00\\x01\\x07\\x01O\\x01\\x07\\x01O\\x08D\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf3@@@'", "ispf": {"version": "04.73", "flags": 0, "createdate": "2007-01-14T00:00:00", "modifydate": "2007-01-14T08:44:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "CBT-473"}, "text": "//***FILE 582 is from Solomon Santos, and contains a version of     *   FILE 582\n//*           the TAPEMAP program from File 299, which can be       *   FILE 582\n//*           assembled and run on an MVS 3.8 system, running       *   FILE 582\n//*           under Hercules.                                       *   FILE 582\n//*                                                                 *   FILE 582\n//*           Modified by Gerhard Postpischil, who is now the       *   FILE 582\n//*           \"co-owner\" of this file.  Fix to TAPEMAP was so       *   FILE 582\n//*           that the date coding would work correctly for day     *   FILE 582\n//*           of the week.                                          *   FILE 582\n//*                                                                 *   FILE 582\n//*           Besides fixing the date code in TAPEMAP, Gerhard      *   FILE 582\n//*           has added an extended version of PDSLOAD to this      *   FILE 582\n//*           file.  See member $$NOTE1 for Gerhard's comments.     *   FILE 582\n//*                                                                 *   FILE 582\n//*           Gerhard added an MVS 3.8 version of Gilbert           *   FILE 582\n//*           Saint-flour's BUILDCDE program.                       *   FILE 582\n//*                                                                 *   FILE 582\n//*           This file is a permanent home for the Hercules        *   FILE 582\n//*           version of TAPEMAP.                                   *   FILE 582\n//*                                                                 *   FILE 582\n//*           email:  gerhardp@charter.net    Gerhard Postpischil   *   FILE 582\n//*                                                                 *   FILE 582\n//*           email:  bugsie88@yahoo.com      Solomon Santos        *   FILE 582\n//*                                                                 *   FILE 582\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMJOB1": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x18_\\x01\\x02\\x18_\\x10\\x19\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc1\\xd5\\xe3\\xd6\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-07-04T00:00:00", "modifydate": "2002-07-04T10:19:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "SANTOS"}, "text": "//SPGSRST JOB (TS,2322),'TECH.SUPP-MON SANTOS',CLASS=A,NOTIFY=SPGSRS,\n//        MSGLEVEL=(1,1),MSGCLASS=A\n//***********************************************************\n//*      SAMPLE JCL TO ASSEMBLE AND LINKEDIT THE TAPEMAP    *\n//*      PROGRAM.                                           *\n//***********************************************************\n//ASM     EXEC PGM=IFOX00,REGION=1024K,\n//             PARM=(TERM,OBJ,LOAD,NODECK)\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SPGSRS.TAPEMAP.ASM,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(15,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(15,5))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1),RLSE),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=SPGSRS.TAPEMAP.ASM(TAPEMAP),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,\n//             PARM='XREF,LET,LIST,NCAL',\n//             COND=(0,LT)\n//SYSLMOD  DD  DSN=SYS2.LINKLIB(TAPEMAP),DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUILDCDE": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x01\\x1f\\x01\\x07\\x01\\x1f\\t8\\x01)\\x01)\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-01-11T00:00:00", "modifydate": "2007-01-11T09:38:00", "lines": 297, "newlines": 297, "modlines": 0, "user": "GERHARD"}, "text": "//GILBERTL JOB (ACCT#),BUILDCDE,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//ASMH EXEC PGM=IEV90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n***********************************************************************\n*                                                                     *\n* MACRO NAME = BUILDCDE                                               *\n*                                                                     *\n* DESCRIPTIVE NAME = BUILD A MAJOR CDE TO IDENTIFY A STORAGE AREA     *\n*                                                                     *\n* FUNCTION = MAKES A STORAGE AREA EASIER TO LOCATE IN A               *\n*            DUMP BY MAKING IT APPEAR AS A LOAD_MODULE.               *\n*                                                                     *\n* STATUS = R200                                                       *\n*                                                                     *\n* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                        *\n*                                                                     *\n* ENVIRONMENT = SEE BELOW                                             *\n*                                                                     *\n*     AMODE = ANY                                                     *\n*     SCP   = MVS/XA OR MVS/ESA   |  MVS 3.8J WITH SYS=MVS            *\n*     KEY   = USER                                                    *\n*     MODE  = PROBLEM                                                 *\n*     APF   = OFF                                                     *\n*                                                                     *\n* OPERATION = BUILDCDE USES THE \"LOADER\" FORM OF IDENTIFY TO CREATE   *\n*             A MAJOR CDE AND CORRESPONDING XL, THEN ISSUES A LOAD    *\n*             SVC TO CREATE AN LLE AND ASSOCIATE THE CDE WITH THE     *\n*             CURRENT TCB.                                            *\n*                                                                     *\n* INVOCATION = SEE BELOW                                              *\n*                                                                     *\n*          (BEFORE)     GETMAIN RU,LV=20000                           *\n*                                                                     *\n*          (AFTER)      GETMAIN RU,LV=20000                           *\n*                       BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM         *\n*                                                                     *\n* NOTES = SEE BELOW                                                   *\n*                                                                     *\n*        BUILDCDE MAY BE ISSUED MORE THAN ONCE, PROVIDED THE EP       *\n*        KEY-WORD HAS A DIFFERENT VALUE EACH TIME.                    *\n*                                                                     *\n*        IF STORAGE WAS ALLOCATED IN SUB-POOL ZERO (SP=0 IS           *\n*        SPECIFIED OR DEFAULTED TO IN THE GETMAIN MACRO),             *\n*        THE DELETE MACRO MAY BE ISSUED AGAINST THE SPECIFIED EP      *\n*        TO DELETE THE CDE AND FREE UP THE STORAGE.                   *\n*                                                                     *\n*        IF GETMAIN SPECIFIES A NON-ZERO SUBPOOL, THE DELETE MACRO    *\n*        DELETES THE CDE BUT DOES NOT FREE UP THE STORAGE:  YOU       *\n*        MUST ISSUE FREEMAIN YOURSELF.                                *\n*                                                                     *\n*        IN A MAJOR CDE CREATED BY THE \"LOADER\" FORM OF IDENTIFY,     *\n*        THE \"RENT\" AND \"REUS\" ATTRIBUTES ARE OFF.  THIS MEANS        *\n*        THAT YOU MAY NOT ISSUE LOAD AGAINST THE EP NAME (BUILDCDE    *\n*        HAS ALREADY ISSUED LOAD), BUT YOU MAY ISSUE LINK, ATTACH     *\n*        OR XCTL IF YOU WANT TO (ONCE ONLY).  YOU MAY ALSO ISSUE      *\n*        THE STANDARD FORM OF IDENTIFY TO DEFINE SECONDARY ENTRY      *\n*        POINTS WHICH HAVE THE \"RENT\" ATTRIBUTE.                      *\n*                                                                     *\n*        IF THIS MACRO IS USED BY AN AUTHORIZED PROGRAM, THEN         *\n*        A S306 ABEND WILL OCCUR (THE CDE CREATED HAS ITS CDSYSLIB    *\n*        BIT OFF).  LOOK FOR A SECOND VERSION OF THE MACRO THAT MAY   *\n*        BE USED IN AN AUTHORIZED PROGRAM AT THE END OF THIS JOB.     *\n*                                                                     *\n*        THE IDENTIFY MACRO SUPPLIED IN SYS1.MACLIB SUPPORTS THE      *\n*        \"LOADER\" FORM, BUT THE FORMAT OF THE PARAMETER LIST IS       *\n*        NOT DOCUMENTED, AS FAR AS I KNOW.  THE RETURN CODES X'18'    *\n*        OR X'1C' MAY BE RETURNED IN R15 WHEN THE PARAMETER LIST      *\n*        IS INVALID.  THESE RETURN CODES ARE DOCUMENTED ALONG WITH    *\n*        THE IDENTIFY MACRO.                                          *\n*                                                                     *\n*        WHEN THE LOAD-LIST IS EMPTY (I.E. NO LOAD HAS BEEN ISSUED    *\n*        FOR THIS TCB YET), IDENTIFY FAILS WITH A RETURN CODE 12.     *\n*        THIS CAN BE CIRCUMVENTED BY ISSUING THE FOLLOWING SEQUENCE:  *\n*                                                                     *\n*                       LOAD    EP=IEFBR14                            *\n*                       GETMAIN RU,LV=20000                           *\n*                       BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM         *\n*                       DELETE  EP=IEFBR14                            *\n*                                                                     *\n*        I'VE NOTICED THAT ON MVS SYSTEMS PRIOR TO MVS/ESA 4.3, THE   *\n*        \"LOADER\" FORM OF IDENTIFY RETURNS THE ADDRESS OF THE CDE IT  *\n*        CREATED IN REG1.  IN MVS/ESA 4.3 THIS IS NO LONGER TRUE.     *\n*                                                                     *\n***********************************************************************\n*     CORRECTIONS AND CHANGES BY GERHARD POSTPISCHIL  2006-11-15      *\n*        BY DEFAULT, BUILDCDE USES THE GETMAINED AREA TO BUILD THE    *\n*          IDENTIFY LIST. IF YOU USE THIS AREA BETWEEN THE GETMAIN    *\n*          AND BUILDCDE (E.G., SAVE AREA, OR INIT TO ZERO), THEN      *\n*          USE LIST= FOR AN ALTERNATE LIST ADDRESS. FOR EXAMPLE,      *\n*          TRY LIST=20(R13) - USE ANY RS FORMAT ADDRESS LENGTH 32     *\n*                                                                     *\n*        RETROFIT TO FUNCTION CORRECTLY UNDER MVS 3.8J (SYS=MVS)      *\n*        CHANGED TO ASSEMBLE UNDER ASM/XF                             *\n***********************************************************************\n         MACRO\n&REF     BUILDCDE &LENGTH=,&ADDR=,&EP=,&SYS=,&LIST=(1)          GP06320\n         LCLA  &O16                    OFFSETS IN PARM LIST     GP06320\n&O16     SETA  16                      OFFSET TO EXTENT LIST    GP06320\n         AIF   ('&SYS' NE 'MVS').NEWSYS                         GP06320\n&O16     SETA  12                      OFFSET TO EXTENT LIST    GP06320\n.NEWSYS  ANOP  ,                       XA, ESA, .....           GP06320\n&REF     IHBINNRA &ADDR,&LENGTH        SET R0,R1\n         LR    R15,R1                  PRESERVE ENTRY ADDRESS   GP06320\n         IHBINNRA &LIST                SET LIST ADDRESS INTO R1 GP06320\n         ST    R15,0(,R1)              STORE ENTRY-POINT ADDR   GP06320\n         ST    R15,&O16+12(,R1)        ALSO AS LOAD ADDRESS     GP06320\n         MVC   4(8,R1),=CL8'&EP '      CDNAME                   GP06320\n         AIF   ('&SYS' EQ 'MVS').OLDSYS   SHORTER LIST IN 3.8   GP06320\n         XC    12(4,R1),12(R1)         CLEAR BYTES 12-15\n.OLDSYS  LA    R14,16                  LENGTH OF PSEUDO XL      GP06320\n         LA    R15,1                   NUMBER OF RELOCATION FACTORS\n         STM   R14,R0,&O16.(R1)        FORMAT BYTES 16-23       GP06320\n         MVI   &O16+8(R1),X'80'        END OF LIST              GP06320\n         MNOTE *,'       IDENTIFY MF=(E,(R1))'\n         SLR   R0,R0                   LOADER-TYPE IDENTIFY\n         SVC   41                      ISSUE IDENTIFY SVC\n         LR    R14,R1                  PASS CDE ADDRESS\n         MNOTE *,'       LOAD EP=&EP,DCB=0'\n         LA    R0,=CL8'&EP '           POINT TO EP NAME         GP06320\n         SLR   R1,R1                   NO DCB FOR LOAD\n         SVC   8                       ISSUE LOAD SVC\n         LR    R1,R0                   EP ADDRESS IN R1\n         SLR   R0,R0\n         ICM   R0,B'0111',&O16+9(R1)  LENGTH IN R0              GP06320\n         MEND\n***********************************************************************\n********* TEST PROGRAM ************************************************\n***********************************************************************\nTEMPNAME CSECT\nTEMPNAME AMODE 31\n         BALR  R3,0\n         USING *,R3\n         OPEN  (SNAPDD,OUTPUT)\n*\n         GETMAIN R,LV=3333\n         BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM#24,LIST=24(R13)\n         LR    R4,R14\n         LR    R5,R15\n         LR    R6,R0\n         LR    R7,R1\n*\n         GETMAIN RU,LV=5678 ,LOC=ANY\n         BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM#31\n         LR    R8,R14\n         LR    R9,R15\n         LR    R10,R0\n         LR    R11,R1\n*\n         SNAP  DCB=SNAPDD,SDATA=CB,PDATA=(REGS,JPA)\n*\n         MVC   0(8,R7),=X'0A23,0A03'   SVC 35 (WTO) AND SVC 3 (EXIT)\n         LA    R1,WTOL                 POINT TO WTO PARM LIST\n         LINK  EP=DYNAM#24             GO EXECUTE SVC35\n*\n         SNAP  DCB=SNAPDD,SDATA=CB     SHOW UPDATED CDE\n*\n         SVC   3                       EXIT\n*\nWTOL     WTO   'BUILDCDE - LINK WORKED!',ROUTCDE=11,MF=L\n*\nSNAPDD   DCB   DSORG=PS,MACRF=W,DDNAME=SNAPDD,                         X\n               RECFM=VBA,LRECL=125,BLKSIZE=882\n         YREGS\n         END\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1)\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//SYSPRINT DD SYSOUT=*\n//*\n//GO      EXEC PGM=LOADER,PARM=NOPRINT\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)\n//G.SNAPDD   DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//*\n//\n***********************************************************************\n********* AUTHORIZED VERSION OF THE BUILDCDE MACRO ********************\n***********************************************************************\n         MACRO (AUTHORIZED VERSION)\n&REF     BUILDCDE &RU,&LENGTH=,&SP=0,&WORKREG=,&BNDRY=DBLWD,           X\n               &EP=BUILDCDE,&LOC=,&AUTH=YES,&RENT=,&SYS=        GP06320\n         LCLA  &O16                    OFFSETS IN PARM LIST     GP06320\n         LCLC  &LABEL,&R               FOR ASM XF               GP06320\n.*   USE SYS=MVS TO EXPAND FOR MVS 3.8J                         GP06320\n      MNOTE *,'       GETMAIN &RU,LV=&LENGTH,SP=&SP,BNDRY=&BNDRY,&LOC='\n&REF     GETMAIN &RU,LV=&LENGTH,SP=&SP,BNDRY=&BNDRY,&LOC=\n&O16     SETA  16                      OFFSET TO EXTENT LIST    GP06320\n         AIF   ('&SYS' NE 'MVS').NEWSYS                         GP06320\n&O16     SETA  12                      OFFSET TO EXTENT LIST    GP06320\n.NEWSYS  ANOP  ,                       XA, ESA, .....           GP06320\n         ST    R1,0(,R1)               STORE ENTRY-POINT ADDR\n         MVC   4(8,R1),=CL8'&EP '      CDNAME                   GP06320\n         AIF   ('&SYS' EQ 'MVS').OLDSYS   SHORTER LIST IN 3.8   GP06320\n         XC    12(4,R1),12(R1)         CLEAR BYTES 12-15\n.OLDSYS  LA    R14,16                  LENGTH OF PSEUDO XL      GP06320\n         LA    R15,1                   NUMBER OF RELOCATION FACTORS\n         STM   R14,R1,&O16.(R1)        FORMAT BYTES 16-23       GP06320\n         MVI   &O16+8(R1),X'80'        END OF LIST              GP06320\n         LR    R14,R1                  SAVE GETMAINED ADDRESS\n         MNOTE *,'       IDENTIFY EPLOC=0,ENTRY=(R1)'\n         SLR   R0,R0                   LOADER-TYPE IDENTIFY\n         SVC   41                      ISSUE IDENTIFY SVC\n&LABEL   SETC  'IHB&SYSNDX'\n&R       SETC  '&WORKREG(1)'           SHORT FORM\n         AIF   (T'&WORKREG NE 'O').WKREG2\n         MNOTE 4,'WORKREG OPERAND OMITTED, WORKREG=(R2) ASSUMED'\n&R       SETC  'R2'\n.WKREG2  L     &R,X'021C'              PSATOLD (MY TCB)\n         L     &R,TCBJSCB-TCB(,&R)     MY JSCB\n         USING IEZJSCB,&R\n         TM    JSCBOPTS,JSCBAUTH       CHECK AUTHORIZATION\n         BZ    &LABEL.N                JUMP IF NOT AUTHORIZED\n         MODESET KEY=ZERO              SWITCH TO KEY ZERO\n         NI    JSCBOPTS,255-JSCBAUTH   TURN APF FLAG OFF\n         SYNCH &LABEL.L                EXECUTE ROUTINE WITH TCB KEY\n         OI    JSCBOPTS,JSCBAUTH       TURN APF FLAG BACK ON\n         AIF   ('&AUTH' NE 'YES' AND '&RENT' NE 'YES').NOAPF    GP06320\n.*   IN MVS 3.8J, THE TEST PROGRAM'S LINK FAILS WITH IEA703I 306-C\n.*     TO AVOID THIS, WE SET THE CDE TO AUTH LIB & AUTH MODULE\n.*     WHEN THE USER REQUESTS AUTH=YES                          GP06320\n.*     WHEN RENT=YES, CDE IS FLAGGED REENTRANT AND REUSABLE     GP06320\n         L     &R,X'021C'              PSATOLD (MY TCB)         GP06320\n         ICM   &R,15,TCBJPQ-TCB(&R)    GET JOB PACK QUEUE       GP06320\n         BZ    &LABEL.C                                         GP06320\n         USING CDENTRY,&R              CDE MAPPING (IHACDE)     GP06320\n&LABEL.A CLC   =CL8'&EP ',CDNAME       MATCHING MODULE ?        GP06320\n         BE    &LABEL.B                YES; SET IT              GP06320\n         ICM   &R,15,CDCHAIN           ANOTHER CDE ON CHAIN?    GP06320\n         BNZ   &LABEL.A                YES; TRY IT              GP06320\n         B     &LABEL.C                OOPS - WHAT HAPPENED?    GP06320\n&LABEL.B DS    0H                                               GP06320\n         AIF   ('&AUTH' NE 'YES').NOAPFL                        GP06320\n         OI    CDATTR2,CDSYSLIB+CDAUTH  FLAG AUTHORIZED         GP06320\n.NOAPFL  AIF   ('&RENT' NE 'YES').NOAPF                         GP06320\n         OI    CDATTR,CDREN+CDSER      SET RENT/REUS            GP06320\n.NOAPF   DROP  &R\n&LABEL.C LR    &R,R0                   SAVE EP ADDRESS\n         MODESET KEY=NZERO             SWITCH TO TCB KEY\n         LR    R0,&R                   EP ADDRESS\n         B     &LABEL.X\n         AIF   ('&SYS' EQ 'MVS').OLDASM                         GP06320\n&LABEL.I EQU   &R-2                    WORKREG MUST BE R2-R13\n&LABEL.J EQU   13-&R                   WORKREG MUST BE R2-R13\n.OLDASM  ANOP  ,           WORKS ONLY IF &R PREVIOUSLY DEFINED  GP06320\n&LABEL.N LA    R14,&LABEL.X            RET FROM LOAD\n         MNOTE *,'       LOAD EP=&EP,DCB=0'\n&LABEL.L LA    R0,=CL8'&EP'            POINT TO EP NAME         GP06320\n         SLR   R1,R1                   NO DCB FOR LOAD\n         SVC   8                       ISSUE LOAD SVC\n         BR    R14                     RETURN NEXT OR SYNCH EX\n&LABEL.X LR    R1,R0                   ADDRESS IN R1\n         SLR   R0,R0\n         ICM   R0,B'0111',&O16+9(R14)  LENGTH IN R0             GP06320\n         MEND\n***********************************************************************\n********* TEST PROGRAM ************************************************\n***********************************************************************\nTEMPNAME CSECT\nTEMPNAME AMODE 31\n         BALR  R3,0\n         USING *,R3\n         OPEN  (SNAPDD,OUTPUT)\n*\n         LA    R0,3333                 SET LENGTH               GP06320\n         BUILDCDE RU,LENGTH=(0),EP=DYNAM#24                     GP06320\n         LR    R4,R14\n         LR    R5,R15\n         LR    R6,R0\n         LR    R7,R1\n*\n         BUILDCDE RU,LENGTH=5678,EP=DYNAM#31,RENT=YES           GP06320\n         LR    R8,R14\n         LR    R9,R15\n         LR    R10,R0\n         LR    R11,R1\n*\n         SNAP  DCB=SNAPDD,SDATA=CB,PDATA=(REGS,JPA)\n*\n         MVC   0(8,R7),=X'0A23,0A03'   SVC 35 (WTO) AND SVC 3 (EXIT)\n         LA    R1,WTOL                 POINT TO WTO PARM LIST\n         LINK  EP=DYNAM#24             GO EXECUTE SVC35\n*\n         SNAP  DCB=SNAPDD,SDATA=CB     SHOW UPDATED CDE\n*\n         SVC   3                       EXIT\n*\nWTOL     WTO   'BUILDCDE - LINK WORKED!',ROUTCDE=11,MF=L\n*\nSNAPDD   DCB   DSORG=PS,MACRF=W,DDNAME=SNAPDD,                         X\n               RECFM=VBA,LRECL=125,BLKSIZE=882\n         YREGS\n         IEZJSCB\n         IKJTCB\n         IHACDE\n         END\n//G.SNAPDD   DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x01\\x1f\\x01\\x07\\x01\\x1f\\t8\\x06*\\x06*\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-01-11T00:00:00", "modifydate": "2007-01-11T09:38:00", "lines": 1578, "newlines": 1578, "modlines": 0, "user": "GERHARD"}, "text": "PDSLOAD  TITLE 'P D S L O A D  **  LOAD IEBUPDTE INPUT TO A PDS'\n*$DOC@*****************************************************************\n*                                                                     *\n*          PDSLOAD - LOAD SEQUENTIAL DATA SET INTO PDS MEMBERS        *\n*                                                                     *\n***********************************************************************\n*\n*         WRITTEN BY: BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*         INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA.\n*         DATE WRITTEN: NOVEMBER 25 1980.\n*         DATE UPDATED: FEBRUARY 13, 2000\n*         ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)\n*\n*         THIS PROGRAM CONVERTS A SEQUENTIAL DATA SET OF PDS\n*         MEMBERS IN 'IEBUPDTE' FORMAT TO A PARTITIONED DATA SET.\n*\n*         THE IEBUPDTE UTILITY PROGRAM CAN DO THE SAME THING,\n*         BUT THIS PROGRAM HAS THE FOLLOWING ADDED CAPABILITIES:\n*         .  STORES SPF STATISTICS IN A MEMBER'S DIRECTORY ENTRY\n*            IF THEY ARE PRESENT ON THE './ ADD' STATEMENT,\n*         .  CAN GENERATE SPF STATISTICS IF NONE ARE PRESENT,\n*         .  CAN SELECT ONE MEMBER FROM INPUT FILE,\n*         .  RESTORES MODIFIED IEBUPDTE STATEMENTS WITHIN A MEMBER\n*            (CHANGES '/.' BACK TO './').\n*         .  DOES NOT LIST THE DATA IN THE MEMBER,\n*         .  PRINTS NUMBER OF RECORDS FOR EACH MEMBER WRITTEN.\n*\n*         IF PARM='CTL(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE USED TO LOOK\n*         FOR THE ADD AND ALIAS CARDS.   GERHARD POSTPISCHIL    GP06315\n*\n*         IF PARM='UPDTE(XX)' IS SPECIFIED, THEN ALL OCCURRENCES\n*         OF THE 2 CHARACTERS IN PARENTHESES WILL BE CHANGED TO\n*         './' BEFORE BEING WRITTEN TO THE PDS, IF THEY OCCUR\n*         IN COLUMNS 1-2 OF THE DATA.  THIS IS USED IN CONJUNCTION\n*         WITH ANOTHER PROGRAM WHICH CREATES IEBUPDTE-FORMAT\n*         DATA SETS FROM A PDS, AND IN SO DOING CHANGES ALL\n*         OCCURRENCES OF './' IN COLUMNS 1-2 OF THE DATA WITHIN\n*         THE MEMBERS TO ANOTHER CONSTANT, SO IEBUPDTE AND THIS\n*         PROGRAM WILL NOT TREAT THE DATA RECORDS AS CONTROL CARDS.\n*         IEBUPDTE DOESNT CHANGE THE DATA BACK. THIS PROGRAM DOES.\n*\n*         LOG OF CHANGES:\n*          28MAY81 - SUPPORT NAME= AS SECOND OPERAND (FOLLOWING SSI).\n*          28MAY81 - SINGLE MEMBER MAY BE SPECIFIED IN PARM.\n*                    PARM='S(ABC)' WILL SELECT MEMBER 'ABC' ONLY.\n*          28MAY81 - PARM=SPF WILL FORCE SPF STATS TO BE GENERATED.\n*                    IF SPF IS SPECIFIED IN PARM, IT MUST BE FIRST.\n*                    IF UPDTE(XX) IS SPECIFIED, IT MUST BE LAST.\n*----------------------------------------------------------------------\n*          ??JUL87 - THIS VERSION OF THE PDSLOAD PROGRAM HAS BEEN\n*                    MODIFIED WITH A GLOBAL VARIABLE SO THE LRECL OF\n*                    THE INPUT AND OUTPUT DATASETS CAN BE CHANGED\n*                    MERELY BY MODIFYING THE GLOBAL AND REASSEMBLING\n*                    THE PROGRAM.  AN EYECATCHER HAS BEEN ADDED SO\n*                    THAT YOU CAN SEE THE ASSEMBLED LRECL BY BROWSING\n*                    THE LOAD MODULE.  SEE LABEL \"&LRECL\".\n*                    YOU NEED TO REASSEMBLE THE PROGRAM EVERY TIME YOU\n*                    WANT TO CHANGE THE LRECL THAT THE PROGRAM TAKES.\n*                    (ADMITTEDLY IT'S BETTER TO DO THIS WITH A PARM AT\n*                    EXECUTION TIME.)  BUT THIS WORKS.  (IT HAS NOT\n*                    BEEN TESTED WITH LRECL MUCH LESS THAN 80.)\n*\n* S. GOLOB - NEWSWEEK - MOUNTAIN LAKES, N.J.                        NWK\n*----------------------------------------------------------------------\n*          01SEP92 - AVOID ABEND S0C4 AFTER ERROR RETURN CODE FROM\n*                    STOW.  (EG. DIRECTORY FULL, OR, I/O ERROR.)\n*                  - CEASE PROCESSING INPUT RECORDS AFTER A './ ENDUP '\n*                    RECORD IS ENCOUNTERED.\n*                  - DELETE RUN-TIME CODE TO LOAD EXIT ENTRY POINTS\n*                    INTO DCB AREAS BY SPECIFYING APPROPRIATE OPERANDS\n*                    ON THE DCB MACROS.\n*                  - DELETE THE &LRECL SYMBOLIC VARIABLE AND ALTER\n*                    CODE TO HANDLE ANY RECORD SIZE UP TO 256.\n*                    RECORD FORMAT MUST STILL BE FIXED LENGTH RECORDS.\n*                    INPUT AND OUTPUT RECORD LENGTHS NEED NOT BE THE\n*                    SAME.  HENCE, OFFLOAD/PDSLOAD CAN BE USED TO\n*                    TRUNCATE OR EXTEND THE RECORD LENGTH OF A PDS.\n*                  - ENSURE BLANKS ARE USED FOR RECORD EXTENSION.\n*                  - IF THE OPEN OF SYSUT1 FAILS THEN THE OPEN IS\n*                    RETRIED WITH DDNAME=SYSIN IN CASE THE JOB IS\n*                    A HASTILY RE-EDITED IEBUPDTE JOB STREAM.\n*                  - REDO LOGIC OF PDS OPEN EXIT TO COPY INPUT LRECL\n*                    TO OUTPUT LRECL (IF NOT SUPPLIED), AND TO USE\n*                    SYSTEM-DETERMINED BLOCKSIZE (IF NOT SUPPLIED)\n*                    IF DFP IS 2.4.0 OR HIGHER.  OTHERWISE, 39 TIMES\n*                    THE LRECL IS USED IF IT IS LESS THAN 32K (WHICH\n*                    IT SHOULD BE SINCE MAX LRECL IS 256), OR IF IT\n*                    IS NOT UNDER 32K THEN THE PDS IS NOT BLOCKED.\n*\n* GREG PRICE - FERNTREE COMPUTER SERVICES - MELBOURNE, AUSTRALIA  GP@FT\n*----------------------------------------------------------------------\n*          26JUN98 - ADD Y2K DATE WINDOWING CODE FOR SPFCREDT AND\n*                    SPFCHGDT.\n*\n* JOHN KALINICH - USA LSSC, ST. LOUIS, MISSOURI               DRK JUN98\n*----------------------------------------------------------------------\n*          20APR99 - SUPPORT ANY LRECL FOR FIXED-LENGTH AND\n*                    VARIABLE LENGTH RECORDS.\n*                  - FIXED-LENGTH OUTPUT RECORDS ARE WRITTEN FROM\n*                    EITHER FIXED-LENGTH OR VARIABLE-LENGTH INPUT.\n*                    (OFTEN PC TEXT FILE TRANSFERS GO TO A RECFM=VB\n*                    DATA SET ON MVS.)\n*                  - VARIABLE-LENGTH OUTPUT DATA REQUIRES VARIABLE-\n*                    LENGTH INPUT RECORDS.\n*                  - MINIMUM INPUT LRECL (F AND V) REMAINS AT 80, BUT\n*                    MINIMUM OUTPUT LRECL IS 1 (PLUS 4 FOR RDW IF V).\n*                  - RECORDS ARE TRUNCATED TO FIT INTO THE OUTPUT\n*                    LRECL AS NECESSARY.\n*                  - BLANKS ARE USED TO EXTEND FIXED-LENGTH RECORDS\n*                    WHERE OUTPUT LRECL IS BIGGER THAN INPUT LRECL.\n*                  - SUPPORT DDNAME OVERRIDES AS PER IEBUPDTE AND\n*                    OTHER OS UTILITIES FOR INTERFACING WITH REVIEW.\n*                  - PARM=NEW IS USED TO REQUEST IEBUPDTE BEHAVIOUR.\n*                    SPECIFICALLY, OPENING SYSUT1 IS NOT ATTEMPTED,\n*                    AND SYSIN IS ASSUMED TO SPECIFY THE INPUT FILE.\n*                    'NEW' MUST BE THE FIRST OR ONLY OPTION IN THE\n*                    PARAMETER STRING, BEFORE 'SPF' EVEN.\n*                  - THE RECORD COUNT STORED IN SPF STATISTICS WILL\n*                    BE THE NUMBER OF RECORDS LOADED BY PDSLOAD, AND\n*                    NOT NECESSARILY THE VALUE ON THE ./ ADD CARD.\n*                  - SUPPORT MEMBER NAME SELECTION BY MASK.\n*                    EG. S(ABC)      - MEMBER ABC ONLY.\n*                        S(ABC*****) - ALL MEMBERS STARTING WITH ABC.\n*                        S(*BC*)     - ABC, ABCD, EBC3 BUT NOT ABCDE.\n*                    ASTERISK (*), QUESTION MARK (?), AND PERCENT\n*                    SIGN (%) CAN BE USED INTERCHANGABLY AS SINGLE-\n*                    CHARACTER PLACEHOLDERS.\n*                  - ENSURE SPF STATS DATA FROM ./ ADD ARE NUMERIC.\n* GREG PRICE                                                      GP@P6\n*----------------------------------------------------------------------\n*          13FEB00 - STARTOOL'S \"COMBINE\" SUBCOMMAND PUTS     SBG 02/00\n*                    ISPF STATISTICS RECORDS INTO THE ./ ADD  SBG 02/00\n*                    CARDS DIFFERENTLY THAN LISTPDS AND       SBG 02/00\n*                    REVIEW.  PDSLOAD IS BEING MODIFIED TO    SBG 02/00\n*                    RECOGNIZE EITHER FORMAT, AND TO BE ABLE  SBG 02/00\n*                    TO RE-CONSTITUTE THE ISPF STATS NO       SBG 02/00\n*                    MATTER WHICH UTILITY WAS USED TO CREATE  SBG 02/00\n*                    THEM, INSIDE THE ./ ADD NAME=XXXX CARDS. SBG 02/00\n*                                                             SBG 02/00\n*      WHAT \"STARTOOL COMBINE\" WAS DOING, THE DIFFERENCE      SBG 02/00\n*      IS AS FOLLOWS:   \"CREATE DATE\" AND \"MODIFY DATE\"       SBG 02/00\n*      ARE GIVEN SEVEN CHARACTERS INSTEAD OF FIVE, THAT IS:   SBG 02/00\n*                                                             SBG 02/00\n*        CCYYDDD , INSTEAD OF YYDDD .                         SBG 02/00\n*                                                             SBG 02/00\n*      THIS INTRODUCES FOUR EXTRA CHARACTERS.  IF YOU HAVE    SBG 02/00\n*      A 7-CHARACTER USERID, A NON-BLANK WILL BE SHOVED INTO  SBG 02/00\n*      COLUMN 72, RENDERING THE MEMBER UN-STOWABLE BY IBM'S   SBG 02/00\n*      IEBUPDTE.  IEBUPDTE TREATS THE NON-BLANK IN COLUMN 72  SBG 02/00\n*      AS A CONTINUATION CHARACTER, AND EXPECTS ANOTHER       SBG 02/00\n*      CONTROL CARD ON THE NEXT LINE.  AT LEAST PDSLOAD WILL  SBG 02/00\n*      NOW BE ABLE TO DEAL WITH THIS SITUATION PROPERLY.      SBG 02/00\n*                                                             SBG 02/00\n*      I'VE ENTERED AN APAR WITH BRUCE LELAND OF STARTOOL     SBG 02/00\n*      SUPPORT.  BUT THE OLD SEQUENTIAL DATASETS THAT HAVE    SBG 02/00\n*      BEEN CREATED WITH EXISTING RELEASES OF STARTOOL, IN    SBG 02/00\n*      ITS FORMAT, STILL HAVE TO BE DEALT WITH.               SBG 02/00\n*                                                             SBG 02/00\n* SAM GOLOB                                                   SBG 02/00\n*----------------------------------------------------------------------\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*     PDSLOAD NOW ACCEPTS DDNAME OVERRIDES IN THE SECOND PROGRAM\n*     PARAMETER.  THE IBM OS/360-TO-OS/390 UTILITY PROGRAM DDNAME\n*     PARAMETER FORMAT IS USED.  THE THIRD PARAMETER (INITIAL PAGE\n*     NUMBER FOR REPORT) IS NOT USED.  THE SYSIN SLOT IS USED FOR\n*     THE INPUT SEQUENTIAL FILE DDNAME, THE SYSPRINT SLOT IS USED\n*     FOR THE OUTPUT REPORT DDNAME, AND THE SYSUT2 SLOT IS USED\n*     FOR THE OUTPUT PARTITIONED FILE DDNAME.  THE PARAMETER\n*     CONSISTS OF A HALFWORD LENGTH COUNT FOLLOWED BY A NUMBER OF\n*     CONTIGUOUS 8-BYTE SLOTS.  PDSLOAD REQUIRES THAT THE LENGTH\n*     COUNT IS A MULTIPLE OF 8.  A NULL SLOT MEANS NO OVERRIDE FOR\n*     THE CORRESPONDING DDNAME.  THERE IS NO MINIMUM SLOT COUNT\n*     REQUIREMENT.  DDNAMES MUST BE PADDED WITH BLANKS TO 8-BYTES\n*     IF NECESSARY.\n*\n*     THE ABILITY TO OVERRIDE DDNAMES WAS IMPLEMENTED TO FACILITATE\n*     THE DYNAMIC INVOCATION OF PDSLOAD FROM THE REVIEW TSO COMMAND.\n*\n*     THE IBM UTILITY DDNAME SLOT CONVENTION GOES SOMETHING LIKE THIS:\n*         01  SYSLIN\n*         02  OUTPUT MEMBER NAME\n*         03  SYSLMOD\n*         04  SYSLIB\n*         05  SYSIN\n*         06  SYSPRINT      (SYSLOUT)\n*         07  SYSPUNCH\n*         08  SYSUT1\n*         09  SYSUT2\n*         10  SYSUT3\n*         11  SYSUT4\n*         12  SYSTERM\n*         13  SYSUT5\n*         14  SYSUT6        (SYSCIN FOR PL/I COMPILER)\n*         15  SYSUT7\n*         16  SYSADATA\n*         17  SYSIDL\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         THE ONLY IEBUPDTE CONTROL STATEMENTS THAT ARE ACCEPTABLE\n*         ARE THE ./ ADD STATEMENT AND THE ./ ALIAS STATEMENT.\n*         THE 'NAME=' OPERAND MUST BE SPECIFIED AS THE FIRST OR\n*         SECOND OPERAND (SOMETIMES SSI= IS SPECIFIED FIRST).\n*         ANY OTHER IEBUPDTE OPERAND (EXCEPT SSI=) IS INVALID AND\n*         WILL PREVENT SUBSEQUENT OPERANDS FROM BEING PROCESSED.\n*         ./ ENDUP STATEMENTS WILL NOW TERMINATE PROCESSING.\n*\n*         THESE ADD STATEMENTS WILL BE PROCESSED CORRECTLY -\n*         ./ ADD NAME=XYZ\n*         ./ ADD NAME=XYZ,SSI=0012C06A\n*         ./ ADD SSI=1234ABCD,NAME=XYZ\n*\n*         IN ORDER FOR SPF STATISTICS TO BE STORED, THE './ ADD'\n*         STATEMENT MUST LOOK LIKE THIS:\n*\n*            COL     DESCRIPTION\n*            1-20    ./ ADD NAME=XXXXXXXX\n*            21      BLANK\n*            22-71   VVMM-YYDDD-YYDDD-HHMM-NNNNN-NNNNN-NNNNN-UUUUUUUUUU\n*                    VER CREATE LASTMODIFY  SIZE  INIT   MOD   ID\n*\n*         THE 'LISTPDS' UTILITY PROGRAM (FROM NASA GODDARD) HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT DOES NOT PUNCH\n*         ./ ALIAS STATEMENTS, HOWEVER.\n*\n*         THE 'REVIEW' UTILITY TSO COMMAND IN CBT FILE 134 HAS\n*         BEEN LOCALLY MODIFIED TO PUNCH AN IEBUPDTE DECK WITH\n*         SPF STATISTICS IN THE ABOVE FORMAT. IT CAN ALSO PUNCH\n*         ./ ALIAS STATEMENTS WHEN THE MEMBER LIST HAS BEEN SORTED\n*         INTO TTR ORDER.\n*\n*         THE SPF DATA IS IN THE 'COMMENTS' AREA OF THE STATEMENT\n*         SO THE INPUT COULD BE RUN THRU 'IEBUPDTE' SUCCESSFULLY.\n*         IT WOULD JUST IGNORE THE SPF DATA.\n*\n*         THE FORMAT OF THE 50-BYTE SPF FIELD IS FIXED. EACH VALUE\n*         MUST HAVE THE CORRECT NUMBER OF DIGITS (USE LEADING ZEROES\n*         IF NECESSARY). ONLY THE 10-BYTE 'ID' FIELD AT THE END\n*         MAY HAVE A VARIABLE LENGTH. NO IMBEDDED BLANKS ALLOWED.\n*         VALUES MUST BE SEPARATED BY A HYPEN AS ABOVE. IF THE\n*         DATA DOES NOT CONFORM TO THESE RULES, THE MEMBER WILL\n*         STILL BE WRITTEN BUT WITHOUT SPF STATISTICS.  NOTE THAT\n*         ISPF INSISTS THAT THE NINTH AND TENTH BYTES OF THE USERID\n*         ARE BLANKS OR ISPF WILL NOT SHOW THE STATISTICS.\n*\n*         INPUT (SYSUT1) DCB ATTRIBUTES NEED NOT BE SPECIFIED IF\n*         THE FILE HAS STANDARD LABELS. IF IT IS AN UNLABELED TAPE,\n*         ONLY THE BLKSIZE NEED BE SPECIFIED (IF IT IS NOT &LRECL).\n*\n*         IF THE OUTPUT FILE DOES NOT HAVE ATTRIBUTES IN ITS LABEL\n*         AND NONE ARE SPECIFIED IN THE SYSUT2 DD STATEMENT, THE\n*         PROGRAM WILL SET THEM TO LRECL=&LRECL, BLKSIZE=39*&LRECL. NWK\n*\n*         RECOMMENDATION: SUPPLY COMPLETE INPUT DCB EITHER VIA DATA\n*         SET LABELS (TAPE OR DISK) OR VIA JCL.\n*\n*         NOTES ON OUTPUT DCB:  IF SUPPLIED COMPLETELY FROM DATA SET\n*         LABELS, JCL, OR BOTH COMBINED, THEN THAT IS FINE.  SOME\n*         PEOPLE CODE 'RECFM=F,BLKSIZE=80' SO DCBLRECL IS ZERO.\n*         HENCE, IF OUTPUT BLKSIZE IS SUPPLIED AND OUTPUT LRECL IS\n*         NOT, THEN IT IS COPIED FROM THE OUTPUT BLKSIZE AND AN\n*         UNBLOCKED PDS IS ASSUMED.  IF BOTH LRECL AND BLKSIZE ARE\n*         SUPPLIED THEN THE SUPPLIED VALUES ARE USED.  IF NEITHER ARE\n*         SUPPLIED THEN THE OUTPUT LRECL IS COPIED FROM THE INPUT\n*         SEQUENTIAL FILE LRECL.  IF YOU HAVE DFP 2.4.0 OR LATER\n*         THEN CODE OR LEAVE OUTPUT BLKSIZE=0 FOR SYSTEM-DETERMINED\n*         BLOCKSIZE.  OLD DFP OR NON-DFP DEFAULT IS 39 TIMES LRECL.\n*\n*$DOC$*****************************************************************\n         SPACE\nPDSLOAD  START\n         USING PDSLOAD,R15\n         B     @PROLOG\n         DROP  R15\n         DC    AL1(17),CL17'PDSLOAD &SYSDATE '   MVS 3.8        GP06315\n         DC    CL10' ANY LRECL'\n         DC    CL48' OUT:  1:F,V->F (TRUNC,EXTEND)  2:V->V (TRUNC)  '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n         USING PDSLOAD,R10,R11\n@PROLOG  STM   R14,R12,12(R13)\n         LR    R10,R15             BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         L     R15,@SIZE           TARGET SIZE\n         LR    R14,R1              TARGET ADDRESS\n         SLR   R5,R5               SOURCE SIZE AND PAD\n         MVCL  R14,R4              ZERO DYNAMIC AREA\n         ST    R13,4(,R1)          CHAIN SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         SPACE\n         ZAP   REPORTPG,=P'0'      INITIAL PAGE COUNTER\n         ZAP   REPORTLN,=P'0'      INITIAL LINE COUNTER\n         ZAP   REPORTMX,=P'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,C' '      BLANK PROPOGATOR\n         MVI   LINE-1,C' '         BLANK PROPOGATOR\n         MVC   MEMSEL,=CL8' '\n         MVC   UPDTE,=C'./'        CONVERSION CODE (./)\n         MVC   CTLMODEL(2),UPDTE   CONTROL CARD CODE (./)       GP06315\n         MVC   CTLMODEL+2(10),=C' ADD NAME='                    GP06315\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH OF PARM\n         LTR   R0,R0\n         BNP   PARMDONE                                         GP06315\nPARMLOOP CLI   2(R1),C','                                       GP06315\n         BNE   PARMNCOM                                         GP06315\n         LA    R3,1                SKIP COMMA                   GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCOM CH    R0,=H'3'            IS PARM LONG ENOUGH FOR SPF\n         BL    PARMBAD             NO, BYPASS COMPARE\n         CLC   =C'NEW',2(R1)       IS IT NEW, AS PER IEBUPDTE?  GP06315\n         BNE   TRYSPF              NO\n         OI    FLAG1,NEWPRM        YES, TOLERATE AS PDSLOAD DOES THIS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nTRYSPF   CLC   =C'SPF',2(R1)       IS IT SPF                    GP06315\n         BNE   PARMSX\n         OI    FLAG1,GENSPF        YES, GENERATE SPF STATISTICS\n         LA    R3,3                SET SKIP LENGTH              GP06315\n         B     PARMBUMP            AND SKIP                     GP06315\nPARMSX   CLC   =C'S(',2(R1)        IS IT S( ?                   GP06315\n         BNE   PARMMX              NO, BRANCH\n         LA    R1,2(,R1)           YES, POINT PAST PAREN\n         SH    R0,=H'2'\n         LA    R15,MEMSEL\n         LA    R14,L'MEMSEL        SET MAX LOOP COUNT           GP06315\nPARMML   CLI   2(R1),C')'                                       GP06315\n         BE    PARMME\n         MVC   0(1,R15),4(R1)      COPY ONE BYTE OF MEMBER NAME\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)           BUMP SKIP SIZE               GP06315\n         BCT   R0,PARMMIG          OK IF MORE                   GP06315\n         B     PARMBAD             ALL DONE, BUT MISSING ')'    GP06315\nPARMMIG  BCT   R14,PARMML          LOOP FOR MEMBER NAME         GP06315\n         CLI   2(R1),C')'          PROPER TERMINATION ?         GP06315\n         BL    PARMBAD             NO, FAIL                     GP06315\nPARMME   LA    R3,1                POINT PAST PAREN             GP06315\n         B     PARMBUMP            SKIP TO NEXT OPERAND         GP06315\nPARMMX   CH    R0,=H'7'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'CTL(',2(R1)      IS IT CTL(XX)                GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   8(R1),C')'          CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   CTLMODEL(2),6(R1)   YES, SAVE NEW CONTROLS       GP06315\n         LA    R1,7                                             GP06315\n         B     PARMBUMP                                         GP06315\nPARMNCTL CH    R0,=H'9'            IS PARM LONG ENOUGH ?        GP06315\n         BL    PARMBAD             NO, BYPASS COMPARE           GP06315\n         CLC   =C'UPDTE(',2(R1)    IS IT UPDTE(XX)              GP06315\n         BNE   PARMNCTL                                         GP06315\n         CLI   10(R1),C')'         CORRECT TERMINATION ?        GP06315\n         BNE   PARMBAD             NO, FAIL                     GP06315\n         MVC   UPDTE,8(R1)         YES, SAVE NEW CONVERSION     GP06315\n         LA    R3,9                                             GP06315\nPARMBUMP AR    R1,R3               NEXT PARM                    GP06315\n         SR    R0,R3               RESIDUAL LENGTH              GP06315\n         BP    PARMLOOP                                         GP06315\n         B     PARMDONE                                         GP06315\nPARMBAD  WTO   'PDSLOAD: INVALID PARM FIELD'                    GP06315\n         ABEND 100\n         EJECT\n************************************************************\n*                                                          *\n*        INITIALIZE THE DCBS                               *\n*                                                          *\n************************************************************\n         SPACE\nPARMDONE MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   UT1DCBW(UT1DCBL),UT1DCB\n         MVC   PDSDCBW(PDSDCBL),PDSDCB\n         LA    R3,PRTDCBW\n         LA    R4,UT1DCBW\n         LA    R5,PDSDCBW\n         TM    FLAG1,NEWPRM        WAS PARM=NEW SPECIFIED?\n         BZ    NEWPRMOK            NO\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, BEHAVE LIKE IEBUPDTE\nNEWPRMOK TM    0(R2),X'80'         ANY DDNAME OVERRIDES?\n         BO    PARM2X              NO, ONLY ONE PARAMETER\n         L     R1,4(,R2)           POINT TO SECOND PARAMETER\n         LA    R1,0(,R1)           ENSURE ADDRESS FORMAT\n         LTR   R1,R1               ZERO POINTER?\n         BZ    PARM2BAD            YES, NO OVERRIDES SUPPLIED\n         CLI   0(R1),0             LENGTH LESS THAN 256?\n         BNE   PARM2BAD            NO\n         TM    1(R1),7             MULTIPLE OF EIGHT?\n         BNZ   PARM2BAD            NO\n         CLI   1(R1),8*5           SYSIN SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   34(R1),0   (8*4+2)  SYSIN OVERRIDE SPECIFIED?\n         BE    PARM2I              NO\n         MVC   DDNAM(8,R4),34(R1)  YES, COPY IT INTO DCB\nPARM2I   CLI   1(R1),8*6           SYSPRINT SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   42(R1),0   (8*5+2)  SYSPRINT OVERRIDE SPECIFIED?\n         BE    PARM2P              NO\n         MVC   DDNAM(8,R3),42(R1)  YES, COPY IT INTO DCB\nPARM2P   CLI   1(R1),8*9           SYSUT2 SLOT PRESENT?\n         BL    PARM2X              NO\n         CLI   66(R1),0   (8*8+2)  SYSUT2 OVERRIDE SPECIFIED?\n         BE    PARM2X              NO\n         MVC   DDNAM(8,R5),66(R1)  YES, COPY IT INTO DCB\n         B     PARM2X              DDNAME OVERRIDE PROCESSING COMPLETE\nPARM2BAD WTO   'PDSLOAD - INVALID DDNAME OVERRIDE PARAMETER IGNORED',  +\n               ROUTCDE=(11)\nPARM2X   DS    0H\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCBS                                     *\n*                                                          *\n************************************************************\n         SPACE\n         SPACE\n         LA    R6,OPEN\n         MVI   0(R6),X'80'\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         MVC   BLKSI(2,R1),LRECL(R1)\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FBA TO FA\n         BR    R14\nOKPRT    OI    STATUS,PRT          SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKUT1\n         LA    R15,16\n         CLC   DDNAM(8,R4),=CL8'SYSUT1'  AFTER TRYING SYSUT1?\n         BNE   EXIT                      NO, OPEN FAILED\n         MVC   DDNAM(8,R4),=CL8'SYSIN'   YES, NO OVERRIDE SO RETRY\n         WTO   'PDSLOAD WILL RETRY WITH DDNAME=SYSIN',                 +\n               ROUTCDE=(11)        USE SAME ROUTING AS IEC130I\n         B     OKPRT               RETRY OPEN WITH SYSIN\nUT1EXO   TM    RECFM(R1),X'C0'     UNDEFINED RECORD FORMAT?\n         BOR   R14                 YES, TAKE NO ACTION HERE\n         MVI   DWLIN+1,4           PREPARE FOR INPUT RDWS\n         TM    RECFM(R1),X'40'     FIXED LENGTH RECORD INPUT?\n         BOR   R14                 NO, TAKE NO ACTION HERE\n         MVI   DWLIN+1,0           NO INPUT RDWS\n         OI    RECFM(R1),X'80'     FORCE SOME RECORD FORMAT\n         CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE SPECIFIED?\n         BNE   UT1EX1              YES, CHECK LRECL\n         MVC   BLKSI(2,R1),LRECL(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nUT1EX1   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNER  R14                 YES, RETURN\n         MVC   LRECL(2,R1),BLKSI(R1)  NO, DEFAULT IS UNBLOCKED\n         NI    RECFM(R1),255-X'10' CHANGE RECFM FROM FB TO F\n         BR    R14                 RETURN\nOKUT1    OI    STATUS,UT1          SYSUT1 IS OPEN\n         TM    RECFM(R4),X'C0'     INPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         MVC   LINE,LINE-1\n         MVC   LINE+1(SHOMSGLN),SHORTMSG\n         CLC   =H'80',LRECL(R4)    INPUT LRECL<80?\n         BH    FAILEXIT            YES, INVALID\n         SPACE\n         OPEN  ((R5),OUTPUT),MF=(E,(R6))\n         SPACE\n         TM    OFLGS(R5),X'10'\n         BO    OKUT2\n         LA    R15,16\n         B     EXIT\nUT2EXO   TM    RECFM(R1),X'C0'     NULL RECORD FORMAT?\n         BM    UT2EX3              NO, FIXED OR VARIABLE LENGTH\n         BZ    UT2EX2              YES, COPY INPUT RECORD FORMAT\n         XC    LRECL(2,R1),LRECL(R1)   RECFM=U SO FORCE LRECL=0\n         BR    R14                 RETURN\nUT2EX2   MVC   RECFM(1,R1),RECFM(R4)  YES, COPY INPUT RECFM\nUT2EX3   CLC   LRECL(2,R1),=H'0'   IS LRECL SPECIFIED?\n         BNE   UT2EX4              YES, TAKE NO ACTION HERE\n         MVC   LRECL(2,R1),LRECL(R4)    COPY INPUT LRECL\nUT2EX4   TM    RECFM(R1),X'80'     FIXED LENGTH RECORDS?\n         BOR   R14                 YES, USE SDB OR GOOD USER SPEC\n         MVI   DWLOT+1,4           USE OUTPUT BDWS AND RDWS\n         BR    R14                 USE SDB OR GOOD USER SPEC\n*\n*  TEST FOR BACK LEVEL MVS AND DFP DROPPED.  COMPLETE DCB DETAILS\n*  OF TARGET PDS SHOULD BE IN VTOC BEFORE THIS PROGRAM GETS CONTROL.\n*  EVEN SO, THE ABOVE CODE SHOULD ALLOW A PDSLOAD TO A NEW PDS THAT\n*  HAS HAD NO DCB ATTRIBUTES PREVIOUSLY SUPPLIED ON A \"MODERN\" MVS.\n*\n*  IN ANY CASE, DCB CONFLICTS ARE HEREBY DECREED TO BE USER ERROR(S).\n*\nOKUT2    OI    STATUS,UT2          SYSUT2 IS OPEN\n         TM    RECFM(R5),X'C0'     OUTPUT RECFM=U?\n         BO    UNDEFBAD            YES, INVALID\n         TM    RECFM(R5),X'40'     FIXED-LENGTH OUTPUT RECORDS?\n         BZ    GETBUF              YES\n         TM    RECFM(R4),X'80'     VARIABLE-LENGTH INPUT RECORDS?\n         BZ    GETBUF              YES\n         MVC   LINE,LINE-1         NO, F(B)-IN NO GOOD FOR V(B)-OUT\n         MVC   LINE+1(FIXMSGLN),FIXINMSG\n         B     FAILEXIT\n         SPACE\nGETBUF   LA    R0,7\n         AH    R0,BLKSI(,R5)\n         SRL   R0,3\n         SLL   R0,4                DOUBLE ROUNDED-UP BLKSIZE\n         ST    R0,FREEM\n         GETMAIN R,LV=(0)\n         ST    R1,FREEM+4\n         ST    R1,PUTPDSX          BUFFER 1 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 1\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSX+4        BUFFER 1 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSX+8        PAST END OF BUFFER 1\n         LA    R1,7(,R1)\n         SRL   R1,3\n         SLL   R1,3                ALIGN BUFFER 2\n         ST    R1,PUTPDSY          BUFFER 2 ADDRESS\n         XC    0(4,R1),0(R1)       RESET BDW 2\n         LR    R0,R1\n         AH    R0,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R0,PUTPDSY+4        BUFFER 2 ADDRESS TO USE NEXT\n         AH    R1,BLKSI(,R5)\n         ST    R1,PUTPDSY+8        PAST END OF BUFFER 2\n         LA    R1,PDSDECB1\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSX+12\n         LA    R1,PDSDECB2\n         MVC   0(PDSDECBL,R1),PDSDECB\n         ST    R1,PUTPDSY+12\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MEMBER,=CL8' '      BLANK OUT MEMBER NAME\n         SR    R1,R1\n         ST    R1,SEQ\n         ST    R1,UPR\n         BAL   R14,REPORT          FORCE A HEADER\n         EJECT\n************************************************************\n*                                                          *\n*        READ AN INPUT RECORD                              *\n*                                                          *\n************************************************************\n         SPACE\nREAD     NI    FLAG1,255-FGNOCON   CHECK FOR UPDTE TRANSLATE    GP06315\n         GET   (R4)\n         SPACE\n         ST    R1,RECAD            SAVE INPUT RECORD ADDRESS\n         LA    R0,1\n         A     R0,COUNTIN\n         ST    R0,COUNTIN\n         MVC   LINE,LINE-1\n         LR    R15,R1              POINT TO INPUT RECORD\n         AH    R15,DWLIN           POINT TO INPUT DATA\n         CLC   CTLMODEL(2),0(R15)  CONTROL STATEMENT?           GP06315\n         BNE   COPY                NO\n         OI    FLAG1,FGNOCON       NO UPDTE TRANSLATE           GP06315\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   INREC,C' '          CLEAR CONTROL RECORD HOLD AREA\n         MVC   INREC+1(79),INREC\n         LA    R14,72-1            GET LENGTH CODE IF FIXED LENGTH\n         CR    R1,R15              FIXED LENGTH RECORDS?\n         BE    COPYCNTL            YES, AND MINIMUM LRECL IS 80\n         SLR   R3,R3               NO\n         ICM   R3,3,0(R1)          GET RECORD LENGTH\n         SH    R3,=H'5'            GET DATA LENGTH CODE\n         CR    R3,R14              IS RECORD TOO LONG FOR INREC?\n         BH    COPYCNTL            YES\n         LR    R14,R3              NO, USE ACTUAL DATA LENGTH\nCOPYCNTL EX    R14,LOADECHO        COPY CONTROL STATEMENT IMAGE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               INSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         LR    R15,R1              POINT TO BLANK\n         BCT   R0,LOOP\n         B     DONE\nLOADECHO MVC   INREC(0),0(R15)     <<< EXECUTED >>>\nTRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>\nTRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),X'80'         OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     DS    0H\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF WHOLE STATEMENT BLANK\n         L     R1,0(,R6)           POINT TO FIRST STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,3                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     COPY                1 CHAR\n         B     CONTROL             2 CHAR\n         B     COPY                3 CHAR\n         SPACE\nCOPY     DS    0H\n         CLI   MEMBER,C' '         HAS A ./ADD RECORD BEEN READ?\n         BE    COPYERR             NO, PRINT A MESSAGE\n         LA    R1,1\n         A     R1,SEQ              COUNT THE RECORDS IN THIS MEMBER\n         ST    R1,SEQ\n         SPACE\n         TM    FLAG1,SELECT        ARE WE SELECTING THIS MEMBER?\n         BZ    READ                NO, BRANCH\n         SPACE\n*        MVC   INREC+72(8),=C'00000000'\n*        CVD   R1,DOUBLE\n*        OI    DOUBLE+7,X'0F'\n*        UNPK  INREC+72(5),DOUBLE+5(3)\n         SPACE\n         LH    R1,LRECL(,R4)       GET INPUT LRECL\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT?\n         BE    *+8                 YES\n         ICM   R1,3,0(R14)         NO, GET RECORD LENGTH\n         SH    R1,DWLIN            GET DATA LENGTH\n         CH    R1,=H'1'            LONG ENOUGH?\n         BNH   NOTUPDTE            NO\n         AH    R14,DWLIN           POINT TO DATA OF INPUT RECORD\n         TM    FLAG1,FGNOCON       NO UPDTE TRANSLATE ?         GP06315\n         BNZ   NOTUPDTE            CORRECT; SKIP AROUND         GP06315\n         CLC   0(2,R14),UPDTE      IS THIS XX OF UPDTE(XX)?\n         BNE   NOTUPDTE            NO, SKIP MVC\n         MVC   0(2,R14),=C'./'     YES, CHANGE TO ./\n         LA    R1,1\n         A     R1,UPR              COUNT THE MODIFIED RECORDS\n         ST    R1,UPR\nNOTUPDTE DS    0H\n         SPACE\n         BAL   R14,PUTPDS\n         B     READ\n         SPACE\nCOPYERR  TM    STATUS,COPYM        HAS MESSAGE BEEN ISSUED?\n         BO    READ                YES, BRANCH\n         OI    STATUS,COPYM\n         MVC   LINE,LINE-1\n         MVC   LINE+1(24),=C'SKIPPING FOR ./ ADD CARD'\n         MVC   LINE+1+13(2),CTLMODEL   BUT USE REAL CTL PAIR    GP06315\n         BAL   R14,REPORT\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*         WRITE A LOGICAL RECORD TO THE PDS                *\n*                                                          *\n************************************************************\n         SPACE\nPUTPDS   ST    R14,PUTPDSR         SAVE RETURN ADDRESS\nPUTREDO  LM    R6,R9,PUTPDSX       FIRST, CURRENT, END, DECB\n         L     R14,RECAD           POINT TO THE INPUT RECORD\n         LH    R1,LRECL(,R5)       GET LRECL OF OUTPUT PDS\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BE    PUTLEN              YES\n         CLM   R1,3,0(R14)         NO, TRUNCATE INPUT RECORD?\n         BL    PUTLEN              YES\n         ICM   R1,3,0(R14)         NO, USE INPUT RECORD LENGTH\nPUTLEN   LR    R0,R7               COPY TARGET FOR THIS RECORD\n         AR    R7,R1               POINT TO NEXT \"CURRENT\" RECORD\n         CR    R7,R8               WILL THIS RECORD FIT IN THIS BLOCK?\n         BH    PUTPDS1             NO, ISSUE WRITE AND PROCURE BUFFER\n         ST    R7,PUTPDSX+4        YES, SAVE TARGET FOR NEXT RECORD\n         LH    R15,LRECL(,R4)      GET LRECL OF INPUT\n         CLI   DWLIN+1,0           FIXED-LENGTH INPUT RECORDS?\n         BE    PUTPAD              YES, PROCEED WITH F(B) TO F(B)\n         ICM   R15,3,0(R14)        NO, GET INPUT RECORD LENGTH FROM RDW\n         CLI   DWLOT+1,0           FIXED-LENGTH OUTPUT RECORDS?\n         BNE   PUTVTOV             NO, VARIABLE-LENGTH IN AND OUT\n         AH    R14,DWLIN           YES, POINT PAST INPUT RDW\n         SH    R15,DWLIN           REDUCE LENGTH OF DATA TO COPY\n         B     PUTPAD              PROCEED WITH V(B) TO F(B)\nPUTVTOV  SR    R7,R6               GET NEW SIZE OF BLOCK\n         STH   R7,0(,R6)           UPDATE LENGTH IN BDW\n         LR    R7,R0               COPY TARGET FOR THIS RECORD\n         STCM  R1,3,0(R7)          SET OUTPUT LENGTH IN RDW\n         AH    R14,=H'2'           DO NOT COPY RDW LENGTH, BUT DO\n         SH    R15,=H'2'                  COPY RDW SECOND HALF\n         AH    R0,=H'2'\n         SH    R1,=H'2'\nPUTPAD   ICM   R15,8,LINE-1        LOAD BLANK PAD CHARACTER\n         MVCL  R0,R14              MOVE RECORD INTO BLOCK\n         L     R14,PUTPDSR         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\nPUTPDS1  TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    PUTPDS2             NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\nPUTPDS2  DS    0H\n         WRITE (R9),SF,(R5),(R6),MF=E\n         MVC   PUTPDSX(16),PUTPDSY SWAP\n         STM   R6,R9,PUTPDSY       SWAP\n         AH    R6,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R6,PUTPDSY+4\n         OI    STATUS,DECB\n         B     PUTREDO             REDRIVE WITH BUFFER NOW AVAILABLE\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS EACH ./ STATEMENT                        *\n*                                                          *\n************************************************************\n         SPACE\nCONTROL  BAL   R14,STOW            FINISH PREVIOUS MEMBER\n         MVC   MEMBER,=CL8' '      RESET\n         NI    STATUS,255-COPYM     RESET\n         NI    STATUS,255-SPF        RESET\n         NI    STATUS,255-SSI         RESET\n         SR    R1,R1                   RESET\n         ST    R1,SEQ                   RESET\n         ST    R1,UPR                    RESET\n         NI    FLAG1,255-SELECT           RESET\n         SPACE\n         MVC   LINE,LINE-1         PRINT\n         MVC   LINE+1(72),INREC     THE\n         BAL   R14,REPORT            ./ADD STATEMENT\n         CLC   CTLMODEL,0(R1)      ./ ADD NAME OR XX ADD        GP06315\n         BE    SIMPLE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         CLC   4(2,R6),=H'3'       LENGTH OF 'ADD'?\n         BNE   NOTADD\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(3,R1),=C'ADD'\n         BNE   COPY\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ADD STATEMENT                     *\n*                                                          *\n************************************************************\n         SPACE\nSIMPLE   MVC   MEMBER,=CL8' '\n         LA    R6,ODE3             POINT TO FIRST OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   OP2NAME             BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='   IS IT NAME= ?\n         BNE   OP2NAME             NO, ITS PROBABLY SSI=\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM1             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM1  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         B     OP2SSI\n*\n*              SSI= WAS PROBABLY SPECIFIED FIRST,\n*              SEE IF NAME= IS SECOND\n*\nOP2NAME  LA    R6,ODE4             POINT TO SECOND OPERAND\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY                BRANCH IF TOO SHORT FOR NAME=\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         CLI   MEMSEL,C' '         ARE WE SELECTING ALL MEMBERS?\n         BE    SELMEM2             YES, BRANCH\n         BAL   R14,MEMMATCH        NO, IS THIS A SELECTED MEMBER?\n         BNE   *+8                 NO\nSELMEM2  OI    FLAG1,SELECT        INDICATE THIS MEMBER SELECTED\n         SPACE\n         LA    R6,ODE3             POINT TO FIRST OPERAND\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BE    SSICVT              YES, GO PROCESS SSI\n         B     NOUSER              NO, IGNORE FIRST OPND, NO USER DATA\n*\n*              NAME= WAS SPECIFIED FIRST\n*              CHECK FOR SSI= OR SPF STATS\n*\nOP2SSI   LA    R6,ODE4             POINT TO 2ND OPERAND DESCRIPTOR\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    NOUSER              NO USER DATA TO BE STOWED\n         LH    R15,4(,R6)          LENGTH\n         L     R6,0(,R6)           POINT TO OPERAND\n         CH    R15,=H'12'          IS LENGTH RIGHT FOR SSI=XXXXXXXX?\n         BNE   NOSSI               NO, BRANCH\n         CLC   0(4,R6),=C'SSI='    IS IT SSI= ?\n         BNE   NOSSI               NO, BRANCH\nSSICVT   MVC   MEMUSER(8),4(R6)    MOVE 8 HEX CHARACTERS\n         LA    R1,MEMUSER          POINT TO DATA TO BE CONVERTED\n         LA    R0,4                LENGTH/2 OF DATA TO BE CONVERTED\n         BAL   R14,PACK            CONVERT HEX TO BINARY\n         OI    STATUS,SSI          SET FLAG FOR STOW\n         B     READ\nNOSSI    DS    0H\n         MVI   SKIPFLG,X'00'       RESET SKIP FLAG            SBG 02/00\n         CLI   12(R6),C'-'         EXTRA 2 NUMBERS IN CRDATE? SBG 02/00\n         BNE   TESTOLD             NOT STARTOOL COMBINE       SBG 02/00\n         MVI   SKIPFLG,X'01'       SET SKIP FLAG              SBG 02/00\n         B     TESTNEW             TEST NEW FORMAT            SBG 02/00\nTESTOLD  DS    0H                  SAME CODE AS BEFORE        SBG 02/00\n         SH    R15,=H'41'          MINIMUM LENGTH 41\n         BM    NOSPF\n         CH    R15,=H'9'           ID LENGTH CODE MAY BE 0 TO 9\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 50\n         CLI   4(R6),C'-'\n         BNE   NOSPF\n         CLI   10(R6),C'-'\n         BNE   NOSPF\n         CLI   16(R6),C'-'\n         BNE   NOSPF\n         CLI   21(R6),C'-'\n         BNE   NOSPF\n         CLI   27(R6),C'-'\n         BNE   NOSPF\n         CLI   33(R6),C'-'\n         BNE   NOSPF\n         CLI   39(R6),C'-'\n         BNE   NOSPF\n         B     TESTNUM             TEST NUMERICS OLD WAY      SBG 02/00\nTESTNEW  DS    0H                  TEST FOR NEW FORMAT        SBG 02/00\n         SH    R15,=H'45'          MINIMUM LENGTH 45          SBG 02/00\n         BM    NOSPF                                          SBG 02/00\n         CH    R15,=H'9'        ID LENGTH CODE MAY BE 0 TO 9  SBG 02/00\n         BH    NOSPF               TOTAL LENGTH EXCEEDS 54    SBG 02/00\n         CLI   4(R6),C'-'                                     SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   12(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   20(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   25(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   31(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   37(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         CLI   43(R6),C'-'                                    SBG 02/00\n         BNE   NOSPF                                          SBG 02/00\n         B     TESTNUMN            TEST NUMERICS NEW WAY      SBG 02/00\nTESTNUM  DS    0H                                             SBG 02/00\n         USING XPF,R6                                         SBG 02/00\n         TRT   XPFVM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF\n         TRT   XPFCREDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCHGDT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFHHMM,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFCCNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFICNT,NUMERIC\n         BNZ   NOSPF\n         TRT   XPFMOD,NUMERIC\n         BNZ   NOSPF\n         PACK  DOUBLE,XPFVM+0(2)   GET V OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM\n         PACK  DOUBLE,XPFVM+2(2)   GET M OF V.M\n         CVB   R0,DOUBLE\n         STC   R0,SPFVM+1\n         PACK  DOUBLE,XPFCREDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4\n         PACK  DOUBLE,XPFCHGDT     GET YYDDD\n         OI    DOUBLE+7,X'0F'\n         CLC   XPFCHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED\n         PACK  DOUBLE,XPFHHMM\n         L     R0,DOUBLE+4         GET 000HHMMC\n         SRL   R0,4                GET 0000HHMM\n         STH   R0,SPFHHMM          TIME LAST MODIFIED\n         PACK  DOUBLE,XPFCCNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFCCNT          CURRENT SIZE\n         PACK  DOUBLE,XPFICNT      SIZE\n         CVB   R0,DOUBLE\n         STH   R0,SPFICNT          INITIAL SIZE\n         PACK  DOUBLE,XPFMOD       MOD\n         CVB   R0,DOUBLE\n         STH   R0,SPFMOD           LINES MODIFIED\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS\n         B     *+10\n         MVC   SPFUSER(0),XPFUSER\n         EX    R15,*-6\n         OI    STATUS,SPF          SET FLAG FOR STOW\n         DROP  R6                                             SBG 02/00\n         B     NOSPF               GO PROCESS FURTHER         SBG 02/00\nTESTNUMN DS    0H                                             SBG 02/00\n         USING XP2,R6                                         SBG 02/00\n         TRT   XP2VM,NUMERIC                                  SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CREDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CHGDT,NUMERIC                               SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2HHMM,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2CCNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2ICNT,NUMERIC                                SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         TRT   XP2MOD,NUMERIC                                 SBG 02/00\n         BNZ   NOSPF                                          SBG 02/00\n         PACK  DOUBLE,XP2VM+0(2)   GET V OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM                                       SBG 02/00\n         PACK  DOUBLE,XP2VM+2(2)   GET M OF V.M               SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STC   R0,SPFVM+1                                     SBG 02/00\n         PACK  DOUBLE,XP2CREDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CREDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCREDT,DOUBLE+4                              SBG 02/00\n         PACK  DOUBLE,XP2CHGDT     GET YYDDD                  SBG 02/00\n         OI    DOUBLE+7,X'0F'                                 SBG 02/00\n         CLC   XP2CHGDT(2),=C'66'  BELOW 19XX WINDOW?         DRK JUN98\n         BNL   *+8                 NO,  THEN 19XX             DRK JUN98\n         OI    DOUBLE+4,X'01'      YES, THEN 20XX             DRK JUN98\n         MVC   SPFCHGDT,DOUBLE+4   DATE LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2HHMM                                 SBG 02/00\n         L     R0,DOUBLE+4         GET 000HHMMC               SBG 02/00\n         SRL   R0,4                GET 0000HHMM               SBG 02/00\n         STH   R0,SPFHHMM          TIME LAST MODIFIED         SBG 02/00\n         PACK  DOUBLE,XP2CCNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFCCNT          CURRENT SIZE               SBG 02/00\n         PACK  DOUBLE,XP2ICNT      SIZE                       SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFICNT          INITIAL SIZE               SBG 02/00\n         PACK  DOUBLE,XP2MOD       MOD                        SBG 02/00\n         CVB   R0,DOUBLE                                      SBG 02/00\n         STH   R0,SPFMOD           LINES MODIFIED             SBG 02/00\n         MVC   SPFUSER,=CL10' '    PAD WITH BLANKS            SBG 02/00\n         B     *+10                                           SBG 02/00\n         MVC   SPFUSER(0),XP2USER                             SBG 02/00\n         EX    R15,*-6                                        SBG 02/00\n         OI    STATUS,SPF          SET FLAG FOR STOW          SBG 02/00\n         DROP  R6                                             SBG 02/00\nNOSPF    DS    0H\nNOUSER   DS    0H\n         B     READ\n         SPACE\nILLMEM   MVC   MEMBER,=CL8' '      SUPPRESS COPY\n         B     COPY\n         SPACE\nPACK     ST    R14,PACKR\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER?\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0\n         L     R14,PACKR\n         BR    R14                 EXIT\n         SPACE\nMEMMATCH STM   R14,R12,12(R13)     SAVE REGISTERS\n         LA    R3,MEMBER           POINT TO MEMBER NAME\n         LA    R4,MEMSEL           POINT TO SELECTION MASK\n         LA    R0,8                GET MEMBER NAME LENGTH\nMASKLOOP CLI   0(R4),C'*'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'?'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLI   0(R4),C'%'          GENERIC CHARACTER MATCH?\n         BE    MASKNEXT            YES, THIS CHARACTER MATCHES\n         CLC   0(1,R4),0(R3)       SPECIFIC CHARACTER MATCH?\n         BNE   MASKEXIT            NO, UNSUCCESSFUL MATCH\nMASKNEXT LA    R3,1(,R3)           POINT TO NEXT BYTE OF ITEM\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF MASK\n         BCT   R0,MASKLOOP         TEST NEXT BYTE\nMASKEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n************************************************************\n*                                                          *\n*         PROCESS THE ./ ALIAS STATEMENT                   *\n*                                                          *\n************************************************************\n         SPACE\nNOTADD   CLC   4(2,R6),=H'5'       LENGTH OF 'ALIAS'?\n         BNE   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'ENDUP'   END OF IEBUPDTE-LIKE INPUT?\n         BE    EODUT1              YES, SIMULATE END-OF-FILE\n         CLC   0(5,R1),=C'ALIAS'\n         BNE   COPY\n         LA    R6,ODE3             POINT TO THIRD O.D.E.\n         TM    6(R6),X'80'         ANYTHING PRESENT?\n         BZ    COPY                BRANCH IF NO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         SH    R15,=H'5'           LENGTH OF 'NAME='\n         BNP   COPY\n         L     R1,0(,R6)           POINT TO OPERAND\n         CLC   0(5,R1),=C'NAME='\n         BNE   COPY\n         LA    R1,5(,R1)\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    COPY                BRANCH IF TOO LONG\n         MVC   MEMBER,=CL8' '\n         BCTR  R15,0               GET LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   MEMBER(0),0(R1)     <<< EXECUTED >>>\n         EX    R15,*-6             MOVE NAME TO MEMBER NAME\n         TRT   MEMBER,ALPHANUM     IS MEMBER NAME VALID\n         BNZ   ILLMEM              NO, BRANCH\n         CLI   MEMBER,C'0'         IS FIRST CHAR NUMERIC?\n         BNL   ILLMEM              YES, BRANCH\n         CLI   MEMBER,C'-'         IS FIRST CHAR HYPHEN?\n         BE    ILLMEM\n         MVC   LINE,LINE-1\n         MVC   LINE+32(05),=C'ALIAS'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         OI    11(R6),X'80'        SET ALIAS BIT ON\n         STOW  (R5),(R6),R\n         LA    R14,ALIASR          RETURN ADDRESS FROM STOWAR\n         ST    R14,STOWR           RETURN ADDRESS FROM STOWAR\n         B     STOWAR(R15)\nALIASR   MVC   MEMBER,=CL8' '\n         B     READ\n         EJECT\n************************************************************\n*                                                          *\n*        ADD OR REPLACE A MEMBER                           *\n*                                                          *\n************************************************************\n         SPACE\nSTOW     DS    0H\n         ST    R14,STOWR\n         TM    STATUS,DECB         ANY WRITES OUTSTANDING?\n         BZ    STOWW               NO, BRANCH\n         L     R1,PUTPDSY+12       GET LAST DECB\n         CHECK (1)\n         NI    STATUS,255-DECB     NO OUTSTANDING WRITES\nSTOWW    LM    R6,R9,PUTPDSX       GET WRITE REGISTERS\n         SR    R7,R6               GET LENGTH OF FINAL BLOCK\n         SH    R7,DWLOT            ACCOUNT FOR ANY BDW\n         BNP   STOWSET             BRANCH IF NOTHING IN BUFFER\n         LH    R8,BLKSI(,R5)       SAVE ORIGINAL BLKSIZE\n         CLI   DWLOT+1,4           VARIABLE-LENGTH OUTPUT RECORDS?\n         BE    *+8                 YES, LENGTH IN DATA, NOT DCB\n         STH   R7,BLKSI(,R5)       NO, STORE FINAL BLOCK LENGTH IN DCB\n         WRITE (R9),SF,(R5),(R6),MF=E\n         CHECK (R9)\n         STH   R8,BLKSI(,R5)       RESTORE DCB BLKSIZE FOR NEXT MEMBER\nSTOWSET  L     R1,PUTPDSX\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSX+4\n         L     R1,PUTPDSY\n         AH    R1,DWLOT            ALLOW FOR OUTPUT BDW\n         ST    R1,PUTPDSY+4\n         MVC   LINE,LINE-1\n         CLI   MEMBER,C' '         IS THERE A MEMBER NAME?\n         BE    STOWX               NO, BRANCH\n         TM    FLAG1,SELECT        WAS THIS MEMBER SELECTED?\n         BZ    STOWX               NO, BRANCH\n         MVI   MEMC,0\n         TM    STATUS,SPF          IS THERE SPF USERDATA?\n         BZ    STOWNSPF            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         CLC   SPFCCNT,SEQ+2       IS THE RECORD COUNT CORRECT?\n         BE    STOWNSSI            YES\n         MVC   SPFCCNT,SEQ+2       NO, CORRECT IT\n         OI    FLAG1,FIXSZ         FLAG CORRECTION\n         B     STOWNSSI\nSTOWNSPF DS    0H\n         TM    FLAG1,GENSPF        SPF STATS TO BE GENERATED?\n         BZ    STOWNGEN            NO, BRANCH\n         MVI   MEMC,15             LENGTH OF USER DATA IN HALFWORDS\n         XC    MEMUSER(30),MEMUSER\n         MVI   SPFVM,1             1.0\n         XC    SPFRESV,SPFRESV     ZERO RESERVED BYTES\n         TIME  DEC\n         ST    R1,SPFCREDT         DATE CREATED\n         ST    R1,SPFCHGDT         DATE OF LAST CHANGE\n         SRL   R0,16\n         STH   R0,SPFHHMM          TIME OF LAST CHANGE\n         L     R1,SEQ              SIZE\n         STH   R1,SPFICNT\n         STH   R1,SPFCCNT\n         MVC   SPFUSER,=CL10'PDSLOAD'\n         B     STOWNSSI\nSTOWNGEN DS    0H\n         TM    STATUS,SSI          IS THERE SSI USERDATA?\n         BZ    STOWNSSI            NO, BRANCH\n         MVI   MEMC,2              LENGTH OF USERDATA SSI IN HALFWORDS\nSTOWNSSI DS    0H\n         MVC   LINE+32(06),=C'MEMBER'\n         MVC   LINE+39(08),MEMBER\n         LA    R6,MEMBER\n         XC    8(03,R6),8(R6)      TTR\n         SPACE\n         STOW  (R5),(R6),R\n         SPACE\n         CLM   R15,2,=X'0018'      UNEXPECTED RETURN CODE?\n         BH    STOWPDSE            YES, PROBABLY SOME PDSE WORRY\n         B     STOWAR(R15)          R             A\nSTOWAR   B     STOWAR00             REPLACED      ADDED\n         B     STOWAR04             N/A           NOT ADDED, EXISTS\n         B     STOWAR08             ADDED         N/A\n         B     STOWAR0C\n         B     STOWAR10\n         B     STOWAR14\n         B     STOWAR18\n         SPACE\nSTOWAR00 TRT   LINE+39(9),TABBLANK\n         MVC   1(8,R1),=CL8'REPLACED'\n         LA    R1,9(,R1)\n         B     STOWCOMW\nSTOWAR04 MVC   RESULT(23),=CL32'NOT ADDED *** ALREADY EXISTS ***'\n         B     STOWCOM\nSTOWAR08 TRT   LINE+39(9),TABBLANK\n         MVC   1(5,R1),=CL5'ADDED'\n         LA    R1,6(,R1)\n         B     STOWCOMW\nSTOWAR0C MVC   RESULT(33),=CL33'NOT STOWED *** DIRECTORY FULL ***'\n         B     STOWCOM\nSTOWAR10 MVC   RESULT(28),=CL28'NOT STOWED *** I/O ERROR ***'\n         B     STOWCOM\nSTOWAR14 MVC   RESULT(28),=CL28'NOT STOWED *** DCB ERROR ***'\n         B     STOWCOM\nSTOWAR18 MVC   RESULT(32),=CL32'NOT STOWED *** STORAGE ERROR ***'\n         B     STOWCOM\nSTOWPDSE MVC   RESULT(29),=CL29'NOT STOWED *** PDSE ERROR ***'\n         SPACE\nSTOWCOM  DS    0H\n         MVI   RC+1,4\n         BAL   R14,REPORT          OUTPUT PRINT LINE\n         B     STOWX               THAT IS ALL FOR THIS MEMBER\nSTOWCOMW DS    0H\n         TM    MEMC,X'80'          WAS THAT AN ALIAS?\n         BO    STOWXA              YES, BRANCH\n         ST    R1,STOWSVR1\n         L     R15,SEQ\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWCOMJ CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   0(7,R1),1(R1)\n         B     STOWCOMJ\nSTOWCOMK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWCOMK\n         MVC   1(08,R1),=C'RECORDS)'\n         CH    R15,=H'1'           ONE RECORD?\n         BNE   STOWCHEK            NO, TEXT IS GOOD\n         MVC   7(2,R1),8(R1)       CHANGE RECORDS TO RECORD\n         BCTR  R1,0                ADJUST FOR TEXT LENGTH CHANGE\nSTOWCHEK TM    FLAG1,FIXSZ         WAS THE SPF STATISTICS SIZE FIXED?\n         BZ    STOWREPT            NO\n         NI    FLAG1,255-FIXSZ     YES, RESET FLAG\n         MVC   8(15,R1),=C' - STATS FIXED)'\nSTOWREPT BAL   R14,REPORT\n         L     R15,UPR\n         LTR   R15,R15\n         BZ    STOWX\n         MVC   LINE,LINE-1\n         L     R1,STOWSVR1\n         CVD   R15,DOUBLE\n         MVC   1(7,R1),=X'4020206B202120'\n         ED    1(7,R1),DOUBLE+5\n         MVI   1(R1),C'('\n         LA    R1,2(,R1)\nSTOWUPRJ CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   0(7,R1),1(R1)\n         B     STOWUPRJ\nSTOWUPRK LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   STOWUPRK\n         MVC   1(09,R1),=C'MODIFIED)'\nSTOWXA   BAL   R14,REPORT\nSTOWX    L     R14,STOWR\n         BR    R14\n         SPACE\nUNDEFBAD MVC   LINE,LINE-1\n         MVC   LINE+1(UNDMSGLN),UNDEFMSG\nFAILEXIT BAL   R14,REPORT          REPORT REASON FOR TERMINATION\n         LA    R15,16\n         B     EXIT\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R2,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CP    REPORTLN,REPORTMX   IS LINECOUNT LIMIT REACHED?\n         BNH   *+10                NO\n         ZAP   REPORTLN,=P'0'      YES, FORCE NEW PAGE\n         CP    REPORTLN,=P'0'      IS NEW PAGE REQUESTED?\n         BE    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         AP    REPORTLN,=P'1'      INCREMENT LINE COUNTER\nREPORTX  LM    R14,R2,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  AP    REPORTPG,=P'1'      INCREMENT PAGE COUNTER\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R1,REPORTO+075-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),REPORTPG    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nEODUT1   DS    0H\n         BAL   R14,STOW\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R6,CLOSE\n         MVI   0(R6),X'80'\n         TM    STATUS,UT2          IS SYSUT2 OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R6))\n         FREEPOOL (R5)\n         TM    STATUS,PDS\n         BZ    EXITC5X\n         LM    R0,R1,FREEM         GET LENGTH AND LOCATION OF BUFFERS\n         FREEMAIN R,LV=(0),A=(1)\nEXITC5X  DS    0H\n         TM    STATUS,UT1          IS SYSUT1 OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         CLOSE ((R4)),MF=(E,(R6))\n         FREEPOOL (R4)\nEXITC4X  DS    0H\n         TM    STATUS,PRT          IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R6))\n         FREEPOOL (R3)\nEXITC3X  DS    0H\n         SPACE 1\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    R0,R12,20(R13)\n         L     R14,R12(,R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         DS    0F\nUT1EXLST DC    AL1(X'85'),AL3(UT1EXO)  DCB EXIT LIST FOR SYSUT1\nPDSEXLST DC    AL1(X'85'),AL3(UT2EXO)  DCB EXIT LIST FOR SYSUT2\nPRTEXLST DC    AL1(X'85'),AL3(PRTEXO)  DCB EXIT LIST FOR SYSPRINT\n         LTORG\n         SPACE\nHEAD1    DC    C'--- PDSLOAD --- PDS MEMBER RELOAD UTILITY ---'\n         SPACE\nFIXINMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'VARIABLE-LENGTH OUTPUT REQUIRES VARIABLE-LENGTH INPUT'\nFIXMSGLN EQU   *-FIXINMSG\n         SPACE\nUNDEFMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'UNDEFINED RECORD FORMAT NOT SUPPORTED'\nUNDMSGLN EQU   *-UNDEFMSG\n         SPACE\nSHORTMSG DC    C'    PDSLOAD TERMINATED - '\n         DC    C'INPUT FILE LOGICAL RECORD LENGTH LESS THAN 80'\nSHOMSGLN EQU   *-SHORTMSG\n         SPACE\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,EXLST=PRTEXLST,     +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nUT1DCB   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,                      +\n               EODAD=EODUT1,EXLST=UT1EXLST\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nPDSDCB   DCB   DDNAME=SYSUT2,MACRF=(W),DSORG=PO,                       +\n               EXLST=PDSEXLST,BUFNO=2\nPDSDCBL  EQU   *-PDSDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         WRITE PDSDECB,SF,MF=L\nPDSDECBL EQU   *-PDSDECB\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\n         SPACE\nALPHANUM DC    0D'0',64X'FF',X'00',26X'FF'\n*                            SPACE\n         DC    X'00',4X'FF',X'00',26X'FF',2X'00',68X'FF',09X'00'\n*                $            -              #@           A-I\n         DC    7X'FF',9X'00',8X'FF',8X'00',6X'FF',10X'00',6X'FF'\n*                       J-R            S-Z            0-9\n         SPACE\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR ALPHANUMERIC\n*              (PLUS NATIONALS, HYPHEN, AND BLANK)\n*              WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS VALID, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         SPACE\nNUMERIC  DC    240X'FF',10X'00',6X'FF'\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         EJECT\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nSEQ      DS    F\nUPR      DS    F\nSTOWSVR1 DS    F\nOPTIONS  DS    H\nRC       DS    H\nUPDTE    DS    CL2\nCTLMODEL DC    CL12'./ ADD NAME='      LOOKING FOR              GP06315\nPRTDCBW  DS    0F,(PRTDCBL)X\nUT1DCBW  DS    0F,(UT1DCBL)X\nPDSDCBW  DS    0F,(PDSDCBL)X\nFREEM    DS    2F\nPUTPDSR  DS    F\nPUTPDSX  DS    4F\nPUTPDSY  DS    4F\nRECAD    DS    F\nDWLIN    DS    H\nDWLOT    DS    H\nSKIPFLG  DS    X                                              SBG 02/00\nPDSDECB1 DS    0F,(PDSDECBL)X\nPDSDECB2 DS    0F,(PDSDECBL)X\nSTOWR    DS    F\nPACKR    DS    F\nINREC    DS    0D,CL80\nADD      DS    CL256\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODLL     EQU   *-ODL\nSTATUS   DS    C\nPRT      EQU   X'80'\nUT1      EQU   X'40'\nUT2      EQU   X'20'\nPDS      EQU   X'10'\nDECB     EQU   X'08'\nCOPYM    EQU   X'04'\nSPF      EQU   X'02'\nSSI      EQU   X'01'\nFLAG1    DS    C\nSELECT   EQU   X'80'\nGENSPF   EQU   X'40'               GENERATE SPF STATS\nNEWPRM   EQU   X'20'               PARM=NEW WAS SPECIFIED\nFIXSZ    EQU   X'10'               SPF STATS SIZE WAS CORRECTED\nFGNOCON  EQU   X'02'               CONTROL - SKIP UPDTE TEST    GP06315\n         DS    C                   LINE-1\nLINE     DS    CL133\nRESULT   EQU   LINE+48                           (IFOX00)       GP06315\nLINEH1   DS    CL133\n*\nMEMSEL   DS    D\nMEMBER   DS    D\nMEMTTR   DS    XL3\nMEMC     DS    XL1                 LENGTH/2 OF MEMUSER\nMEMUSER  DS    CL30                SPF STATISTICS OR SSI\n         ORG   *-30\nSPFVM    DS    XL2                 VERSION, LEVEL\nSPFRESV  DS    XL2                 RESERVED\nSPFCREDT DS    PL4                 DATE CREATED\nSPFCHGDT DS    PL4                 DATE LAST UPDATED\nSPFHHMM  DS    XL2                 TIME LAST UPDATED\nSPFCCNT  DS    H                   CURRENT SIZE\nSPFICNT  DS    H                   INITIAL SIZE\nSPFMOD   DS    H                   MODS\nSPFUSER  DS    CL10                USERID\n*\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    PL3                 PAGE COUNT, INIT P'0'\nREPORTLN DS    PL2                 LINE COUNT, INIT P'0'\nREPORTMX DS    PL2                 LINES/PAGE, INIT P'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nXPF      DSECT\nXPFVM    DS    CL4,C               VERSION, LEVEL\nXPFCREDT DS    CL5,C               DATE CREATED\nXPFCHGDT DS    CL5,C               DATE LAST UPDATED\nXPFHHMM  DS    CL4,C               TIME LAST UPDATED\nXPFCCNT  DS    CL5,C               CURRENT SIZE\nXPFICNT  DS    CL5,C               INITIAL SIZE\nXPFMOD   DS    CL5,C               MODS\nXPFUSER  DS    CL10                USERID\nXP2      DSECT\nXP2VM    DS    CL4,C               VERSION, LEVEL\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CREDT DS    CL5,C               DATE CREATED\n         DS    CL2                 EXTRA LETTERS FOR YEAR\nXP2CHGDT DS    CL5,C               DATE LAST UPDATED\nXP2HHMM  DS    CL4,C               TIME LAST UPDATED\nXP2CCNT  DS    CL5,C               CURRENT SIZE\nXP2ICNT  DS    CL5,C               INITIAL SIZE\nXP2MOD   DS    CL5,C               MODS\nXP2USER  DS    CL10                USERID\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPEMAP": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x062\\x0f\\x01\\x062\\x0f\\x160\\r\\x1a\\r\\x1a\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-11-16T00:00:00", "modifydate": "2006-11-16T16:30:00", "lines": 3354, "newlines": 3354, "modlines": 0, "user": "GERHARD"}, "text": "TAPEMAP  TITLE 'TAPE ANALYSIS PROGRAM  (T A P E M A P)'     2006316 GYP\n*          FROM CBT MODS TAPE, FILE 582 (REWORKED 299)      2006316 GYP\nXYZZY    OPSYN PRINT               CUSTOMIZED PRINT CONTROL   06/84 DBC\nPRINT    OPSYN ANOP                SUPPRESS STD PRINT CONTROL 06/84 DBC\n*------------------------------------------------------------ 07/92 SBG\n*                                                             07/92 SBG\n*  *************                                              SBG 03/00\n*  * ATTENTION * YOU CAN USE IECTDEBX INSTEAD OF IEZDEB TO    SBG 03/00\n*  ************* SPECIFY DEB FIELDS.  I DON'T RECOMMEND THE   SBG 03/00\n*                IDEA.  IT IS BETTER TO CODE DEBX=NO.         SBG 03/00\n*                                                             SBG 03/00\n*   IEZDEB IS ALIVE AND WELL.  AT THE SP4 LEVEL, I THOUGHT    SBG 03/00\n*    IT WASN'T, SO I CODED THIS FLEXIBILITY.  BETTER TO       SBG 03/00\n*    LEAVE THINGS AS THEY ALWAYS WERE.                        SBG 03/00\n*                                                             SBG 03/00\n         GBLC  &DEBX                                          07/92 SBG\n*&DEBX   SETC  'YES'    'YES' TO USE IECTDEBX MACRO FOR DEB.  SBG 03/00\n&DEBX    SETC  'NO'     'NO'  TO USE IEZDEB   MACRO FOR DEB.  SBG 03/00\n*------------------------------------------------------------ 02/93 RT\n         GBLC  &XA                                            02/93 RT\n&XA      SETC  'L'      'L' TO USE NON-XA BAL INSTRUCTION     02/93 RT\n*&XA     SETC  'S'      'S' TO USE     XA BAS INSTRUCTION     02/93 RT\n         LCLB  &HERC    SET TO TRUE IF COMPILING IN HERCULES  07/02 SRS\n&HERC    SETB  1        YES, THIS IS A HERCULES VERSION       07/02 SRS\n*&HERC   SETB  0        NO                                    07/02 SRS\n*                                                             07/92 SBG\n*------------------------------------------------------------ 07/92 SBG\n         TITLE 'TAPE ANALYSIS PROGRAM  (T A P E M A P)'\n         GBLA  &LINEPPG                                       11/88 SBG\n&LINEPPG SETA  60                                             11/88 SBG\nTAPEMAP  CSECT\n         USING *,R15\n         B     ARNDCONS\n         DC    AL1(25)\n         DC    CL8'TAPEMAP'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DS    0F\nGETM     DC    AL1(0),AL3(WORKLEN)\nARNDCONS DS    0H\n         SAVE  (14,12)\n         DROP  R15\n         USING TAPEMAP,R12,R11,R7,R9\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R7,4095(,R11)\n         LA    R7,1(,R7)\n         LA    R9,4095(,R7)\n         LA    R9,1(,R9)\n         L     R2,0(,R1)            PICK UP PARM POINTER\n         L     R0,GETM\n         GETMAIN R,LV=(0)\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE-AREA ADDR\n         USING WORKD,R13\n         L     R15,=A(LITMOVES)     POINT TO LITERALS TO LOAD 12/88 SBG\n         MVC   EMPTYLIT(256),0(R15)     MOVE THEM TO WORKAREA 12/88 SBG\n         MVC   EMPTYLIT+256(256),256(R15)                     10/90 SBG\n         MVC   EMPTYLIT+512(LITMVLEN-512),512(R15)            10/90 SBG\n         MVI   BLANKS,C' '\n         MVC   BLANKS+1(L'BLANKS+L'OUTBUFF),BLANKS  GET OUTBUFF ALSO\n         MVC   OUTCLR2(L'OUTBUFF2+2),OUTCLEAR  GET CC FOR \"DASHES\" ALSO\n         MVC   DASHES(2),=C' -'    PRIME                      06/84 DBC\n         MVC   DASHES+2(L'DASHES-2),DASHES+1\n         MVC   PARM#MSG+1(L'PARM#MSG-1),PARM#MSG\n         XC    JFCB(176),JFCB\n         LA    R0,JFCB\n         ST    R0,EXLST\n         MVI   EXLST,X'87'\n         LA    R0,TAPEBUFF              GET ADDR OF DATA BUFFER\n         ST    R0,TCCW#DAT              SET INTO CCW\n         MVI   TCCW#DAT,RD              RESTORE THE OPCODE\n         LA    R1,FL1LABI               GET LABEL BUFFER ADDR\n         ST    R1,TCCW#LBL              SET IN CCW\n         MVI   TCCW#LBL,RD              RESTORE OPCODE\n         ST    R1,TCCW#EOV              SET IN CCW            02/93 RT\n         MVI   TCCW#EOV,RD              RESTORE OPCODE        02/93 RT\n         LA    R0,FL2LABI               GET LABEL BUFFER ADDR\n         ST    R0,TCCW#LBL+8            SET IN CCW\n         MVI   TCCW#LBL+8,RD            RESTORE OPCODE\n         LA    R1,MV#BUFF2              GET 2ND BUFFER ADDR\n         ST    R1,MV#ABUF2              SAVE\n         LA    R0,OUTBUFF2+110          GET ADDR OF END OF OUTBUFF2\n         ST    R0,OB2END                SAVE FOR FUTURE REFERENCE\n         LA    R0,OUTBUFF2+110+10       FOR UPDTE STUFF\n         ST    R0,OB2END2\n         SPACE 2\n         OPEN  MF=(E,OPENMFL)           OPEN PRINT FILE\n         L     R1,OPENMFL               GET SYSPRINT DCB ADDR\n         TM    48(R1),X'10'             OPEN?\n         BO    PRINTOK                  YES\n         LA    R1,100                   GET ABEND CODE\n         SVC   13                       AND LEAVE\n         SPACE 2\nPRINTOK  LH    R15,0(,R2)               GET PARM LEN\n         LTR   R15,R15                  ANY?\n         BNP   DONEPARM                 NO\n         LA    R14,2(,R2)               SET ADDR OF FIRST ITEM\n         LR    R0,R14                   SAVE IT\n         MVC   PARM#MSG(8),=C' PARM='' '\n         MVC   PARM#MSG+8(L'PARM#MSG-8),PARM#MSG+7   BLANK THE REST\n         CH    R15,=H'21'               PARM TOO LONG FOR \"TITLE2\"?\n         BNH   *+8                      NO - SKIP\n         OI    TFLAG2,T2@LPARM          YES - SET FLAG\n         EX    R15,MVCPARM              SAVE PARM IN OUTBUFF2\n         LA    R1,PARM#MSG+7(R15)       GET ADDR OF END+1\n         MVI   0(R1),C''''              PUT IN ENDING QUOTE\n         OI    TFLAG1,T1@PARM           SET \"HAVE PARM\" FLAG\n         SPACE 2\nNEXTPARM LM    R1,R3,=A(PARMTAB,12,PARMLAST)\nTESTPARM LH    R4,0(,R1)                GET LENGTH OF ITEM\n         EX    R4,CLCPARM               THIS IT?\n         BNE   INCRPARM                 NO - TRY NEXT\n         OC    PARMFLAG,11(R1)          TURN ON BITS\n         LA    R14,2(R14,R4)            INCR SCAN PTR\n         SR    R15,R4                   DECR LENGTH LEFT\n         SH    R15,=H'2'\n         BP    NEXTPARM                 LOOP IF ANY MORE\n         B     DONEPARM                 DONE...\n         SPACE 2\nNULLPARM SH    R15,=H'5'                DECR LENGTH LEFT            U14\n         BNP   DONEPARM                 NOTHING LEFT                U14\n         LA    R14,5(,R14)              POINT TO OPERAND            U14\n         SR    R1,R1                    CLEAR ACCUMULATOR           U14\n         SPACE 1\nNULLLOOP CLI   0(R14),C'0'              DIGIT?                      U14\n         BL    HAVENULL                 NO - HAVE COMPLETE NUMBER   U14\n         IC    R0,0(,R14)               GET A DIGIT                 U14\n         N     R0,F15                   STRIP IT                    U14\n         MH    R1,=H'10'                SHIFT PREVIOUS              U14\n         AR    R1,R0                    ADD NEW                     U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         BCT   R15,NULLLOOP             CONTINUE FOR LENGTH OF PARM U14\n         SPACE 2\nHAVENULL LTR   R1,R1                    ANYTHING GIVEN?             U14\n         BNP   *+8                      YES - USE IT                U14\n         STH   R1,NULLNUMB              SET NUMBER                  U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         SH    R15,H1                   DECR LENGTH LEFT            U14\n         BP    NEXTPARM                 CONTINUE IF MORE            U14\n         B     DONEPARM                 NONE LEFT                   U14\n         SPACE 2\nINCRPARM BXLE  R1,R2,TESTPARM           KEEP LOOKING\n*  DIDN'T FIND IT IN TABLE\n         CLC   =C'NULL=',0(R14)         SPECIAL KIND?               U14\n         BE    NULLPARM                 YES - PROCESS IT            U14\n*  INVALID PARM ITEM\n         SR    R14,R0                   COMPUTE OFFSET INTO PARM\n         LA    R14,1(,R14)              FIX IT\n         CVD   R14,DWD                  CONVERT TO PACKED\n         UNPK  PARMERR+28(3),DWD+6(2)   PUT INTO MSG\n         OI    PARMERR+30,C'0'          FIX SIGN\n         OI    TFLAG1,T1@PERR           SET \"PARM ERROR\" FLAG\n         SPACE 3\nDONEPARM LA    LCTR,&LINEPPG            INIT LINECOUNTER      11/88 SBG\n         CALL  TODAY,(TTL1DATE,TTL1DAY,TTL1TIME)              02/93 RT\n         L     R1,16                    -> CVT\n         L     R1,0(,R1)                -> TCBWORDS\n         L     R1,4(,R1)                -> TCB\n         L     R1,12(,R1)               -> TIOT\n         LA    R1,24(,R1)               -> DD SECTION\n         ST    R1,DD#PTR                SAVE PTR\n         SPACE 1\n         TM    PARMFLAG,PF@INLIN+PF@NATTR PARM=INLINE OR NOATTR?\n         BNZ   OK$PRT2                  YES - SKIP SECOND PRINT FILE\n         L     R2,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         ICALL TIOTSCAN,R10,R15=40(,R2) SEE IF WE HAVE IT\n         B     OK$PRT2                  NOPE\n         SPACE 1\n         OPEN  MF=(E,OPENMFL2)          OPEN SECOND PRINT FILE\n         OI    TFLAG2,T2@PRT2           ASSUME IT WORKS.\n         TM    48(R2),X'10'             DID IT OPEN?\n         BO    OK$PRT2                  YES\n         SPACE 2\nABEND99  LA    R1,99                    GET ABEND CODE\n         SVC   13                       BYE\n         SPACE 2\nOK$PRT2  L     R2,OPENMFLI              GET SYSIN DCB ADDR\n         ICALL TIOTSCAN,R10,R15=40(,R2) SEE IF IT'S THERE\n         B     RDJFCB                   NOPE\n         MVC   RET#ADDR,=A(READCARD)    SET RETURN ADDR\n         SPACE 2\n         OPEN  MF=(E,OPENMFLI)          OPEN INPUT FILE\n         TM    48(R2),X'10'             OPEN?\n         BZ    ABEND99                  NO.  (THIS SHOULD NEVER HAPPEN)\n         MVI   OPENMFL,0                SET TO CLOSE BOTH FILES\n         SPACE 2\nREADCARD L     R1,OPENMFLI              GET SYSIN DCB ADDR\n         GET   (1),INBUFF\n         OI    TFLAG1,T1@DATA           SET FLAG\n         CLC   =C'./DDNAME',INBUFF      IS IT THIS?\n         BE    INDDNAME                 YES - PROCESS\n         CLC   =C'./VOLUME',INBUFF      IS IT THIS?\n         BNE   *+10                     NO - MUST BE VOL NAME\n         MVC   INBUFF(6),INBUFF+9       MOVE OVER\n         MVI   JFCB+117,1               # OF VOL SER #'S\n         MVC   JFCB+118(6),INBUFF       VOL SER #\n         MVI   JFCB+52,X'40'            VOLUME SERIAL LIST CHANGED\n         B     TAPEINDX                 SKIP THE RDJFCB, GO TO SUBROUTN\n         SPACE 2\nINDDNAME L     R1,TAPEMFL               GET ADDR OF TAPEDCB         U14\n         MVC   40(8,R1),INBUFF+9        MOVE DDNAME INTO DCB        U15\n         SPACE 2\nRDJFCB   RDJFCB  MF=(E,TAPEMFL)\n         B     TAPEINDX                 GO TO SUBROUTINE\n         SPACE 3\nEOD2     CLOSE MF=(E,OPENMFL)\n         IFP2  N,LEAVE                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)\n         B     LEAVE                    RETURN\n         SPACE 2\nEOD      TM    TFLAG1,T1@DATA           DATA READ IN?\n         BO    EOD2                     YES.\n         MVC   RET#ADDR,=A(EOD2)        SET NEW RETURN ADDR\n         B     RDJFCB\n         SPACE 2\nMVCPARM  MVC   PARM#MSG+7(0),0(R14)     << EXECUTED >>\nCLCPARM  CLC   2(0,R1),0(R14)           << EXECUTED >>\n         SPACE 2\n******** PRINT GEN\n         EJECT\n***********************************************************************\n*                                                                     *\n* T A P E I N D X                                                     *\n*                                                                     *\n*    A ROUTINE WHICH READS IN THE VOLUME NAME & ALL THE DATA SET NAMES*\n*        (FROM THE TRAILER LABELS) OF A TAPE (WITH STANDARD LABELS)   *\n*        AND FORMATS AND PRINTS THE INFORMATION FROM THE LABELS.      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nTAPEINDX MVC   LCTR2,=F'0'              INIT 2ND LINE COUNTER 02/93 RT\n         MVC   NUMBNULL,=F'0'           INIT COUNT OF NULL FILES    RT\n         OI    TFLAG1,T1@PAGE1+T1@ANLZ  1ST PAGE/THIS VOL + ANLZ LABEL\n         SPACE 1\n* OPEN TAPE VOLUME FOR LABEL=BLP\n         MVC   JFCB+44(8),BLANKS        BLANK OUT ELEM NAME\n         MVC   JFCB+68(2),=H'1'         FILE SEQ #                 WBF\n         MVC   JFCB+70(2),=H'1'         VOL SEQ #\n         MVC   JFCB+83(3),=X'620000'    SET EXPDT=98000 FOR UCC-1  WBF\n         MVI   JFCB+98,X'40'            DSORG=PS\n         MVI   JFCB+100,X'90'           RECFM=FB\n         MVC   TITLE1+5(6),JFCB+118     INIT IN CASE NOT SL\n         SPACE 1\n         OPEN  MF=(E,TAPEMFL),TYPE=J\n         TM    TAPEDCB+DCBOFLGS-IHADCB,DCBOFOPN   FILE OPEN ?       THO\n         BO    TPOPENOK                 YES.                        THO\n         NEWPAGE ,                      PRINT THE HEADER\n         PRTLN '-*** TAPE VOLUME COULD NOT BE OPENED ***'\n         B     RETURN\n         SPACE 3\nTPOPENOK NI    TAPEDCB+DCBMACF1-IHADCB,X'F7'  BLK COUNT INACCURATE  THO\n         XC    LEN#TAPE(4*2),LEN#TAPE   CLEAR SL & NL LENGTHS\n         NI    TFLAG1,255-T1@BADEN-T1@SL RESET FLAGS\n         MVI   WHERE,0                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#RWD,TM=*+4     INSURE PROPER POSITION     09/84 DBC\n         XC    FILE#SEQ,FILE#SEQ   CLEAR PHYSICAL FILE#       07/85 DBC\n         TAPIO TCCW#DAT,TM=LEADTPMK     READ IN VOLUME LABEL\n         MVC   VOLLABI(80),TAPEBUFF     SAVE VOLUME LABEL\n         SPACE 1\nDO$SENSE L     R2,LASTSIZE         PRESERVE LENGTH OVER SENSE 09/84 DBC\n         TAPIO TCCW#SNS                 READ SENSE DATA\n         L     R1,TAPEDCB+DCBDEBAD-IHADCB   LOAD ADDRESS OF DEB     THO\n         AIF   ('&DEBX' EQ 'YES').NEWDEB                            SBG\n         L     R1,DEBSUCBA-DEBBASIC(,R1)    LOAD ADDRESS OF UCB     THO\n         AGO   .OLDDEB                                              SBG\n.NEWDEB  ANOP                                                       SBG\n         L     R1,DEBUCBAD-DEBNMSUB(,R1)    LOAD ADDRESS OF UCB     SBG\n.OLDDEB  ANOP                                                       SBG\n         CLC   UTY3420C(4),UCBTYP-UCB(R1)        3480 COMPAT MODE? ^SBG\n         BE    IS3480                   YEP. TREAT AS 3480.        ^SBG\n         CLI   UCBTBYT4-UCB(R1),X'81'       THIS A 3490 TAPE DRIVE ?SBG\n* --------->>> DON'T USE MAPPING MACRO BECAUSE OF OLDER SYSTEMS.    SBG\n         BE    IS3480                   YEP. TREAT AS 3480.        ^SBG\n*\n*------- CLI   UCBTBYT4-UCB(R1),UCB3480     THIS A 3480 TAPE DRIVE ?THO\n         CLI   UCBTBYT4-UCB(R1),X'80'       THIS A 3480 TAPE DRIVE ?SRS\n         BNE   IS3420                   NO, THEN A 3420 DRIVE       THO\nIS3480   LA    R1,C'5'                  THEN INDICATE SO     ^SBG - THO\n         MVC   TITLE1+34(4),=C'CART'    THEN INDICATE CARTRIDGE     THO\n         NI    PARMFLAG,255-PF@DEN1     TURN OFF                    THO\n         B     TRUE$GOT                                             THO\nIS3420   LA    R1,C'3'                  ASSUME 1600 BPI             THO\n         TM    SENSDATA+3,B'00000100'   PE MODE?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'4'                  ASSUME 6250 BPI\n         TM    SENSDATA+9,B'00001000'   CAPABLE OF 6250 BPI?\n         BO    TRUE$GOT                 YES\n         AIF   (&HERC).TRUE$            FORCE 6250 IF HERCULES 07/02SRS\n         LA    R1,C'2'                  ELSE, 800 BPI\n         SPACE 2\n.TRUE$   ANOP\nTRUE$GOT LR    R0,R1                    COPY DENSITY CHAR\n         N     R1,F15                   STRIP IT\n         SLL   R1,2                     *4\n         LA    R1,DEN#LIST(R1)          POINT TO 4 CHAR FORM\n         ST    R1,TRUE#DEN              SAVE ADDR\n         STC   R0,TRUE#DEN              SAVE 1 CHAR FORM\n         SPACE 2\n         CLI   NUMBNULL+1,0             HOW MANY NULL SKIPPED?      U14\n         BNE   NULL1ST                  MORE THAN ZERO.             U14\n         CLC   VOLLABI(4),=C'VOL1VOL1'  VOLUME LABEL?\n         BE    TPVOL1OK                 YES.\n         SPACE 3\n         MVC   VOLSERNO(6),JFCB+118     SET HERE FOR OVERPRINTING   U15\n         NEWPAGE ,                      PRINT THE HEADER LINES\n         PRTLN '0++++ NO VOL1 LABEL FOUND.  NL ANALYSIS FOLLOWS ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         SPACE 1\nNULL1ST  MVC   FL1ID,BLANKS             SET THE DSN                 U14\n         SPACE 3\nNL$NEXT  ST    R2,LASTSIZE         RESTORE SIZE OF FIRST BLOC 09/84 DBC\n         ST    R2,BYTECNT          INIT TOTAL BYTES READ      09/84 DBC\n         ST    R2,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         MVC   BLOCKCNT,F1              INIT # OF BLOCKS READ\n         MVI   NLFLAGS,NL@F             INIT NL TYPE FLAGS\n         CH    R2,TAPEBUFF              IS FIRST BLOCK RECFM=V?\n         BNE   *+8                      NO - SKIP\n         OI    NLFLAGS,NL@V             YES - SET FLAG\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         MVC   UNLOADER,UNLOADER-1      CLEAR INDICATOR\n         LH    R1,FILE#SEQ              GET FILE NUMBER\n         LA    R1,1(,R1)           ADJ TO IDENTIFY THE NUMBER 07/85 DBC\n*                                  OF THE FILE CURRENTLY      07/85 DBC\n*                                  BEING SCANNED              07/85 DBC\n         CVD   R1,DWD                   -> PACKED\n         UNPK  DWD(5),DWD+5(3)          -> EBCDIC\n         OI    DWD+4,C'0'               FIX SIGN\n         MVC   FL1FILSQ,DWD+1           PUT INTO \"LABEL\"\n         SPACE 1\n*  NOW SEE IF THIS FILE IS ANYTHING SPECIAL THAT WE KNOW ABOUT.\n***      CLC   =H'800',LASTSIZE         RIGHT SIZE?\n***      BNE   NL$NMOVE                 NOT IEHMOVE\n         BA&XA R10,TEST$MV              IS IT IEHMOVE?\n         B     NL$NMOVE                 NO\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     IEHMOVE1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NMOVE CLC   TAPEBUFF(8),=H'60,0,56,0' RECFM=V,BLK=60,REC=56?\n         BE    NLTSTCPY             YES-IT'S THE OLD IEBCOPY FORMAT+SBG\n         CLC   TAPEBUFF(8),=H'64,0,60,0' IS IT IEBCOPY NEW FORMAT? +SBG\n         BNE   NL$NCOPY                 NO - NOT IEBCOPY\nNLTSTCPY BA&XA R10,TEST$CPY             IS IT VS2COPY?             +SBG\n         B     NL$NCOPY                 NO\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     IEBCOPY1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NCOPY BA&XA R10,TEST$DMP             IS IT IEHDASDR?\n         B     NL$NDSDR                 NO\n         NOP   0                        YES - BUT DON'T USE 2ND     WBF\n*                                             PRINT FILE            WBF\n         B     IHDASDR1\n         SPACE 2\n******************************************************************* SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n******************************************************************* SBG\n*  NOTE THAT WE DON'T WANT TO TEST FOR SMPPTFIN ON A CBT TAPE.12/88 SBG\n******************************************************************* SBG\nNL$NDSDR DS    0H                                             11/88 SBG\n         BA&XA R10,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     NL$NCBT                  NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINT FILE FMT11/88 SBG\n         B     CBT1                     YES - 1 PRINT FILE FMT11/88 SBG\n         SPACE 3                                              11/88 SBG\nNL$NCBT  DS    0H                       LABEL FOR NOT DASDR         SBG\n         SPACE 3                                              07/85 DBC\n         BA&XA R10,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     NL$NPTFS            +0 NO, SKIP                06/86 SBG\n         B     PTFS2               +4 YES, GO DUMP IT         07/85 DBC\n         B     PTFS1               +8 YES, JUST SAY SO        07/85 DBC\n*       NEXT 5 LINES ARE SWITCHED WITH PREV 6 LINES & NAMES CHANGED SBG\nNL$NPTFS DS    0H                                             06/86 SBG\n         BA&XA R10,TEST$UPS             MAYBE IEBUPDTE INPUT STREAM?\n         B     NL$NUPDT                 BOY WILL THIS BE UNRELIABLE SBG\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     IEBUPDT1            +8 YES & 1-PRT: HANDLE     07/85 DBC\nNL$NUPDT DS    0H                                             06/86 SBG\n         BA&XA R10,TEST$FDR             IS IT FDR?            07/85 DBC\n         B     NL$NFDR                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     FDR1                     YES,- 1 PRINT FILE FORMAT   WBF\n         SPACE 2\nNL$NFDR  BA&XA R10,TEST$IS              IS IT IEBISAM?        11/88 SBG\n         B     NL$NCDOC                 DIDN'T THINK SO...\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     IEBISAM1                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NCDOC BA&XA R10,TEST$CH              IS IT CBT DOC FILE?   12/88 SBG\n         B     NL$NIS                   NUH UH.               12/88 SBG\n         B     NL$LOOP                  YES - DISPLAY EXTRCT'D12/88 SBG\n         B     CBTDOC1                   DATA ON REPORT #1    12/88 SBG\n         SPACE 3                                              12/88 SBG\nNL$NIS   BA&XA R10,TEST$SLK             IS IT A SLICK BACKUP?\n         B     NL$NSLK                  DIDN'T THINK SO...\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     SLK1                     YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NSLK  BA&XA R10,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     NL$LOOP                  NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n****     B     NL$LOOP                  YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$LOOP  TAPIO TCCW#DAT,TM=NL$EOF       READ A BLOCK\n         B     NL$LOOP                  DO THAT TILL EOF\n         SPACE 2\nNL$EOF   CLI   UNLOADER,C' '            A SECOND LINE?\n         BE    *+12                     NO - SKIP\n         NEWPAGE  2                     MAKE SURE WE HAVE ENOUGH\n         SPACE 1\nNL$SL    DS    0H                                             07/85 DBC\n         LH    R1,FILE#SEQ              GET THE FILE SEQ #\n         CVD   R1,DWD                   PACK IT\n         MVC   #FILE-2(6),=X'402020202120'                    09/84 DBC\n         ED    #FILE-2(6),DWD+5\n         SPACE 1                                              09/84 DBC\n         MVC   #UNLOAD,UNLOADER\n************************************************************* 12/88 SBG\n*  IF THIS IS A CBT HEADER, PUT THE DISPLAY INFO INTO       * 12/88 SBG\n*    THE DSNAME SLOT.  VER XXX  MM-DD-YY.                   * 12/88 SBG\n************************************************************* 12/88 SBG\n         SPACE 1                                              12/88 SBG\n         CLC   UNLOADER(8),CBHEADER     WAS IT CBTHEADER?     12/88 SBG\n         BNE   NL$CBHD                  NO. NORMAL PROCESSING 12/88 SBG\n         MVC   #DSN(17),CBHLIT     DISPLAY CBT DOC INFO       12/88 SBG\n         MVC   #DSN+4(4),CBTVERS   PUT IN VERSION NUMBER      12/88 SBG\n         MVC   #DSN+9(8),CBTDATE   PUT IN RELEASE DATE        12/88 SBG\nNL$CBHD  DS    0H                                             12/88 SBG\n         SPACE 3\n         CLC   =C'(NULL)',UNLOADER+2 SL NULL FILE?            07/85 DBC\n         BE    NLSLDONE                 YES - CAN'T DO ANYTHING\n         SPACE 1\n         MVC   #INFOSRC,=C' SCAN ' IDENTIFY INFO SOURCE       06/84 DBC\n         MVI   #RECFM,C'V'              ASSUME RECFM=V\n         TM    NLFLAGS,NL@V             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'F'              ASSUME RECFM=F\n         TM    NLFLAGS,NL@F             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'U'              ANYTHING ELSE IS RECFM=U\n         SPACE 2\nNL$1     L     R0,MAXBLKSI         GET SIZE OF LARGEST BLOCK  09/84 DBC\n         CVD   R0,DWD\n         MVC   #BLKSIZE(5),=X'2020202120'\n         ED    #BLKSIZE-1(6),DWD+5\n         SPACE 1\n*******  MVI   #LRECL+4,C'?'\n         SPACE 1\n         L     R0,BLOCKCNT              GET BLOCK COUNT\n         CVD   R0,DWD\n         MVC   #BLKCNT-1(7),=X'20202020202120'\n         ED    #BLKCNT-2(8),DWD+4\n         SPACE 1\n         MVC   #DEN+1(1),TRUE#DEN\n         L     R14,TRUE#DEN\n         TM    PARMFLAG,PF@DEN1\n         BO    *+10\n         MVC   #DEN,24(R14)                                         THO\n         SPACE 1\n         L     R15,BLOCKCNT             COUNT # OF GAPS\n         L     R1,BYTECNT\n         M     R1-1,=F'100'             SCALE\n         D     R1-1,0(,R14)             DIVIDE BY BYTES/INCH\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420A                 NO, THEN 3420               THO\n         AH    R1,=Y(8)                 ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?\n         BNO   *+12                     NO - SKIP\n         AH    R1,=Y(2*8)               YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS\n         M     R15-1,=F'08'             EACH GAP IS .08 INCH        THO\n         B     LENCALC1                                             THO\nDEN3420A AH    R1,=Y(375)               ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?                  THO\n         BNO   *+12                     NO - SKIP                   THO\n         AH    R1,=Y(2*375)             YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS              THO\n         M     R15-1,=F'60'             EACH GAP IS .60 INCH\n         CLI   TRUE#DEN,C'4'            UNLESS IT'S A 6250 TAPE\n         BNE   *+8                      IT ISN'T\n         SRL   R15,1                    THEN THEY'RE .3 INCH EACH\nLENCALC1 AR    R1,R15                   ADD IN LENGTH OF GAPS       THO\n         LR    R2,R1                    SAVE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2                     06/84 DBC\n         A     R2,LEN#TAPE+4\n         ST    R2,LEN#TAPE+4\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2                     06/84 DBC\n         SPACE 2\n         PRTLN OUTBUFF\n         CLI   UNLOADER,C' '            ANY SECOND PRINT LINE?\n         BE    NL$DONE                  NO - SKIP\n         TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   NL$DONE                  NO - NO SECOND LINE\n         PRTLN OUTBUFF2\n         MVC   OUTBUFF2,OUTCLR2\n         SPACE 2\nNL$DONE  TM    TFLAG1,T1@SL             THIS TAPE SL?\n         BO    NLSLDONE                 YES - DIFFERENT HANDLING\n         SPACE 1\nNL$DONEX TAPIO TCCW#DAT,TM=NULL$NL      READ NEXT FILE'S FIRST BLK  U14\n         L     R2,LASTSIZE         GET SIZE OF LAST BLOCK     09/84 DBC\n         B     NL$NEXT                  PROCESS NEXT FILE\n         SPACE 3                                              07/85 DBC\nNULL$NL  LH    R1,NUMBNULL              GET NUMBER OF NULL FILES    U14\n         LA    R1,1(,R1)                INCR                        U14\n         STH   R1,NUMBNULL              SAVE NEW COUNT              U14\n         CH    R1,NULLNUMB              DONE ENOUGH?                U14\n         BH    HAVE$EOV                 YES - STOP                  U14\n         LH    R1,FILE#SEQ         NO, GET FILE #             07/85 DBC\n         MVC   #FILE-1(5),=X'2020202120'  MOVE IN EDIT MASK         U14\n         CVD   R1,DWD                                               U14\n         ED    #FILE-2(6),DWD+5                                     U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  PUT IN INDICATOR      06/84 DBC\n         PRTLN OUTBUFF                                              U14\n         L     R0,LEN#TAPE+4            GET ACCUMULATED TAPE LENGTH U14\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420B                 NO, THEN 3420               THO\n         AH    R0,=Y(8)                 COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                U14\n         B     NL$DONEX                                             U14\nDEN3420B AH    R0,=Y(375)               COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                THO\n         B     NL$DONEX                                             THO\n         SPACE 3\n************************************************************* 12/88 SBG\n*   THIS IS THE START OF NORMAL STANDARD LABEL PROCESSING.  * 12/88 SBG\n************************************************************* 12/88 SBG\nTPVOL1OK OI    TFLAG1,T1@SL             INDICATE SL PROCESSING12/88 SBG\n         MVC   TITLE1+5(6),VOLSERNO\n         MVC   TITLE1+19(10),VOLOWNER\n         MVC   TITLE1+13(6),TITLE1+12   BLANK OUT KEYWORD\n         CLC   VOLOWNER,BLANKS          OWNER ALL BLANK?\n         BE    *+10\n         MVC   TITLE1+13(6),=C'OWNER='\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG\n         CLC   VOLSERNO(6),JFCB+118     GET WHAT WE ASKED FOR?\n         BE    MATCHVOL                 YES - CONTINUE\n         OI    TFLAG2,T2@RQVOL          SET FLAG\n         SPACE 2\nMATCHVOL NEWPAGE ,                      PRINT HEADER LINES\n         NI    TFLAG1,255-T1@ANLZ       RESET FLAG\n         TM    PARMFLAG,PF@NL      NL PROCESSING FORCED?      06/84 DBC\n         BNZ   ANLZ1               YES, SET ANALYZE SIGNAL    06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   NO, SCAN BYPASSED?         06/84 DBC\n         BNZ   NOANLZ1             YES, SKIP                  06/84 DBC\nANLZ1    OI    TFLAG1,T1@ANLZ      NO, SET ANALYZE SIGNAL     06/84 DBC\nNOANLZ1  DS    0H                                             06/84 DBC\n         SPACE 1\n         TM    PARMFLAG,PF@NL           FORCE NL ANALYSIS?\n         BNO   *+12                     NO - CONTINUE\nFORCENL  XI    TFLAG1,T1@SL             YES - TURN OFF FLAG\n         B     NL$NEXT                  AND GO TO NL ROUTINE\n         SPACE 1\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         MVC   FL1LABI(4),BLANKS        CLEAR OUT 'HDR1'      02/93 RT\n         TAPIO TCCW#LBL,TM=MAYBETT      READ THE HDR LABELS\n         B     DATAREAD                 SKIP FIRST TIME\nMAYBETT  EQU   *                                               1/93 RT\n         CLC   FL1LABI(4),=C'HDR1'      IS IT SL DOS TAPE?     1/93 RT\n         BNE   FORCENL                                         1/93 RT\n         MVI   FL2LABI,C'?'             CLEAR HDR2 TO '?'      1/93 RT\n         MVC   FL2LABI+1(70),FL2LABI                           1/93 RT\n         CLI   FL1LABI+4,C'0'      POSSIBLY IEHINITT?          1/93 RT\n         BNE   DECRFILE             NO                         1/93 RT\n         CLC   FL1LABI+5(70),FL1LABI+4      IEHINITT?          1/93 RT\n         BE    IEHINITT             YES                        1/93 RT\nDECRFILE LH    R0,FILE#SEQ         DECR TAPEMARK COUNTER       1/93 RT\n         BCTR  R0,0                                            1/93 RT\n         STH   R0,FILE#SEQ         STORE NEW VALUE             1/93 RT\n         TAPIO TCCW#BSF            BACKSPACE A FILE            1/93 RT\n         B     DATAREAD                 SKIP FIRST TIME\n         SPACE 3                                              07/85 DBC\nNLSLDONE TM    TFLAG1,T1@SL        SL-TAPE?                   07/85 DBC\n         BZ    SPACER              NO, SKIP THIS              07/85 DBC\n         CLC   =C'0001',FL1VOLSQ        FIRST VOLUME OF FILE?\n         BE    TEST$EOV                 YES.\n         CLC   =C'    ',FL1VOLSQ        MISSING VOL SEQ FLD?  02/93 RT\n         BE    TEST$EOV                 YES.                  02/93 RT\n         MVC   FVOL#MSG+22(4),FL1VOLSQ  VOL SEQ #\n         MVC   FVOL#MSG+80(6),FL1FILSR  FIRST VOLSER\n         PRTLN FVOL#MSG\n         SPACE 2\nTEST$EOV CLC   =C'EOV2',FL2LABI\n         BNE   NOT$EOV                  EOV.\n         PRTLN ' *** THE ABOVE FILE IS CONTINUED ON ANOTHER VOLUME'\n         B     HAVE$EOV            ALL DONE                   07/85 DBC\nNOT$EOV  DS    0H                                             07/85 DBC\n         SPACE 3                                              07/85 DBC\nSPACER   PRTLN OUTBUFF                  BLANK LINE\n         TAPIO TCCW#FSF                 FWD SPACE\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#LBL,TM=MAYBET2      READ HDR LABELS\n         B     DATAREAD                                       02/93 RT\n         SPACE 1\nMAYBET2  EQU   *                                               1/93 RT\n         CLC   FL1LABI(4),=C'HDR1'      IS IT SL DOS TAPE?     1/93 RT\n         BNE   HAVE$EOV                                        1/93 RT\n         MVI   FL2LABI,C'?'             CLEAR HDR2 TO '?'      1/93 RT\n         MVC   FL2LABI+1(70),FL2LABI                           1/93 RT\n         LH    R0,FILE#SEQ         DECR TAPEMARK COUNTER       1/93 RT\n         BCTR  R0,0                                            1/93 RT\n         STH   R0,FILE#SEQ         STORE NEW VALUE             1/93 RT\n         TAPIO TCCW#BSF            BACKSPACE A FILE            1/93 RT\n         B     DATAREAD\nDATAREAD TAPIO TCCW#FSF                 SKIP TO END OF HDR LABELS\n         MVC   UNLOADER,UNLOADER-1      CLEAR UNLOADED FLAG\n         MVI   NLFLAGS,NL@V+NL@F        ASSUME RECFM=V & RECFM=F\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#DAT,TM=NULLFILE     READ DATA\n         L     R1,LASTSIZE         GET SIZE OF (FIRST) BLOCK  09/84 DBC\n         ST    R1,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         AH    R1,=Y(4*80)              2 HDR + 2 EOF LABELS\n         ST    R1,BYTECNT               INIT TOTAL BYTES READ\n         MVC   BLOCKCNT,F1              INIT NUMBER OF BLOCKS READ\n         NI    NLFLAGS,255-NL@CHANG     FIRST BLOCK NOT A CHANGE\n         OI    NLFLAGS,NL@F             STILL COULD BE RECFM=F\n         SPACE 2\n         BA&XA R10,TEST$CH              TEST FOR CBT HEADER   10/90 SBG\n         B     TSTRECFM                 NOT CBTHEADER, GO ON  10/90 SBG\n         NOP   0                        NO EFFECT ON REPORT 2 10/90 SBG\n         B     TEST$LCT                 PROCESS HEADER FILE   10/90 SBG\n         SPACE 2                                              10/90 SBG\nTSTRECFM CLI   FL2RECFM,C'F'            RECFM=FB?             10/90 SBG\n         BNE   NOT$RF$F                 NO - NOT IEHMOVE OR IEBISAM\n         CLC   FL2LRECL,C00080          LRECL=80?\n         BNE   FIND$EOF                 NO - NOT IEHMOVE OR IEBISAM\n***      CLC   FL2BLKL,C00800           BLKSIZE=800?\n***      BNE   TST$UPDT                 NO - NOT IEHMOVE'D\n         CLI   FL2BLKA,C'B'             BLOCKED?\n*  SWITCH TESTS FOR SMPPTFIN AND IEBUPDTE                           SBG\n         BNE   TST$UPDT                 NO - NOT IEHMOVE'D     2/93 RT\n         BA&XA R10,TEST$MV              IS IT IEHMOVE?\n         B     TST$UPDT                 NO - TRY NEXT               SBG\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\n************************************************************* 06/86 SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n************************************************************* 06/86 SBG\n         SPACE 3                                              07/85 DBC\nTST$UPDT DS    0H                LABEL FOR TEST IEBUPDTE            SBG\n*                          BUT TEST FOR PTFIN COMES FIRST, SO       SBG\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         BA&XA R10,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     TST$NPTF            +0 NO, SKIP                07/85 DBC\n         B     PTFS2               +4 YES & 2-PRT FMT; HANDLE 07/85 DBC\n         B     TEST$LCT            +8 YES & 1-PRT FMT; HANDLE 07/85 DBC\nTST$NPTF DS    0H                                             07/85 DBC\n         BA&XA R10,TEST$UPS             SEE IF IEBUPDTE INPUT STREAM\n         B     TST$NUPD            +0 PROBABLY NOT            07/85 DBC\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT            +8 YES, JUST SAY SO        07/85 DBC\nTST$NUPD DS    0H                                             07/85 DBC\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         SPACE 3\nTST$ISAM BA&XA R10,TEST$IS              IS IT IEBISAM?\n         B     TST$MAP                  NO                    11/88 SBG\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$MAP  BA&XA R10,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     FIND$EOF                 NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNOT$RF$F CLC   =X'00CA6D0F',TAPEBUFF+8  TEST IEBCOPY FIRST    08/90 SBG\n         BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL08/90 SBG\n         CLC   =X'01CA6D0F',TAPEBUFF+8  TEST IEBCOPY FOR PDSE 06/93 RT\n         BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL06/93 RT\n         CLI   FL2RECFM,C'V'            RECFM=V?              08/90 SBG\n         BNE   NOT$RF$V                 NO - NOT IEBCOPY'D\n         CLI   FL2BLKA,C'S'             RECFM=VS?\n         BNE   TST$CBT                  NOT VS. MAYBE CBT973. 11/88 SBG\nFORGTLBL BA&XA R10,TEST$CPY             IS IT VS2COPY?        08/90 SBG\n         B     TST$CBT                  NO - MAYBE CBT\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$CBT  BA&XA R10,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     FIND$EOF                 NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINTFILE FMT 11/88 SBG\n         B     TEST$LCT                 YES - 1 PRINTFILE FMT 11/88 SBG\n         SPACE 3                                              11/88 SBG\nNOT$RF$V CLI   FL2RECFM,C'U'            RECFM=U?\n         BNE   FIND$EOF                 NO - NOT IEHDASDR\n         BA&XA R10,TEST$DMP             IS IT IEHDASDR?\n         B     TST$FDR                  NO\n         NOP   0                        DON'T USE 2ND PRINT FILE    WBF\n         B     TEST$LCT                 CONTINUE\n         SPACE 3\nTST$FDR  BA&XA R10,TEST$FDR             IS IT FDR?\n         B     TST$SLK                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT   WBF\n         SPACE 3\nTST$SLK  BA&XA R10,TEST$SLK             IS IT IEBISAM?\n         B     FIND$EOF                 NO\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nTEST$LCT TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   FIND$EOF                 NO - SKIP THIS\n         NEWPAGE  2                     MORE THAN 1 LINE LEFT?\n         SPACE 1\n         CLC   IEBCOPY,UNLOADER         UNLOADED BY IEBCOPY?\n         BE    IEBCOPY1                 YES - PRINT EXTRA INFO\n         CLC   IEHMOVE,UNLOADER         UNLOADED BY IEHMOVE?\n         BE    IEHMOVE1                 YES - PRINT EXTRA INFO\n         CLC   IEBISAM,UNLOADER         UNLOADED BY IEBISAM?\n         BE    IEBISAM1                 YES - PRINT EXTRA INFO\n         CLC   IEHDASDR,UNLOADER        DUMPED BY IEHDASDR?\n         BE    IHDASDR1                 YES - PRINT EXTRA INFO\n         CLC   FDR,UNLOADER             DUMPED BY FDR?\n         BE    FDR1                     YES - PRINT EXTRA INFO\n         CLC   SLICKMNG,UNLOADER        UNLOADED BY SLICK?\n         BE    SLK1                     YES - PRINT EXTRA INFO\n         CLC   CBT973,UNLOADER          CBT973 COMPRESS FORMAT11/88 SBG\n         BE    CBT1                     YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBTEMPTY,UNLOADER        CBT TAPE EMPTY FILE?  11/88 SBG\n         BE    CBTEMP1                  YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBHEADER,UNLOADER        CBT TAPE DOC FILE?    12/88 SBG\n         BE    CBTDOC1                  YES - PRINT DESCRPTN  12/88 SBG\n         CLC   SMPPTFIN,UNLOADER   SYSMODS?                   07/85 DBC\n         BE    PTFS1               YES, GO SAY SO             07/85 DBC\n         CLC   IEBUPXXX,UNLOADER   NO, UPDATE STREAM?         07/85 DBC\n         BE    IEBUPDT1            YES, GO SAY SO             07/85 DBC\n****     CLC   CTAPEMAP,UNLOADER        CREATED FOR TAPEMAP?\n****     BE    MAP1                     DOESN'T MATTER - MORE THAN\n****                                    ONE LINE OF INFO, SO CAN'T\n****                                    PRINT IT INLINE\n         SPACE 3\nFIND$EOF TM    PARMFLAG,PF@NOCHK        CHECKING SL TAPE?     06/84 DBC\n         BZ    SCAN$EOF                 YES - READ TILL EOF   06/84 DBC\n         SPACE 1\n         TAPIO TCCW#FSF                 FSF PAST REST OF DATA\n         SPACE 2\nREAD$EOF MVI   WHERE,2                  SET \"WHERE ARE WE\" FLAG\n         MVC   FL1LABI(4),BLANKS                             02/93 RT\n         TAPIO TCCW#EOV,TM=MISS$EOF     READ TRAILER LABEL\nTEST$EOF CLC   =C'EOF1',FL1LABI         TRAILER LABEL?\n         BE    HAVE$EOF                 YES - OK\n         CLC   =C'EOV1',FL1LABI         OTHER KIND?\n         BE    HAVE$EOF                 YES - OK\n         SPACE 1\nMISS$EOF PRTLN '0EOF OR EOV LABEL NOT FOUND WHERE EXPECTED'\n         B     REWINDIT                 REWIND AND LEAVE    %%%%%%%%%\n         SPACE 2\nSCAN$EOF TAPIO TCCW#DAT,TM=SL$SAVE      READ & TALLY A DATA BLOCK\n         B     SCAN$EOF                 DO THAT TILL EOF\n         SPACE 2\nSL$SAVE  MVC   NL#SAVE(16),MAXBLKSI SAVE ALL INFO            09/84 DBC\n         MVC   NL#FLAGX,NLFLAGS         MORE...\n         B     READ$EOF                 GO READ THE EOF LABELS\n         SPACE 2\nHAVE$EOF LA    R1,1                     ASSUME 1-LINE GROUPS\n         TM    PARMFLAG,PF@NOCHK        CHECKING?             06/84 DBC\n         BNZ   *+8                      NO - SKIP             06/84 DBC\n         LA    R1,2(,R1)                YES - NEED 2 MORE EACH\n         CLI   UNLOADER,C' '            IS THIS FILE UNLOADED?\n         BE    *+8                      NO - SKIP\n         LA    R1,1(,R1)                YES - NEED 1 MORE LINE\n         TM    PARMFLAG,PF@INLIN        INLINE INFO?          12/88 SBG\n         BZ    *+8                      NO - SKIP             12/88 SBG\n         LA    R1,1(,R1)                YES - NEED EXTRA LINE 12/88 SBG\n         LR    R0,R1                    COPY FOR STUPID MACRO\n         NEWPAGE  (R0)                  CHECK FOR ENOUGH LINES\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK   SL TAPE WITH NL SCANNING?  07/85 DBC\n         BZ    BYWHOZ              YES, DEFER NAMING THE      07/85 DBC\n*                                  UNLOADER UNTIL I BUILD THE 07/85 DBC\n*                                  \"SCAN\" LINE MESSAGE.       07/85 DBC\n         MVC   #UNLOAD,UNLOADER         SAY WHO UNLOADED IT\nBYWHOZ   DS    0H                                             07/85 DBC\n         MVC   #FILE(4),FL1FILSQ        FILE #\n         ICALL DEZERO,R14,R1=#FILE      REMOVE LEADING ZEROES\n         MVC   #DSN(17),FL1ID           DSN\n         CLI   FL1FSEC,C'0'             PASSWORD PROTECTED?\n         BE    NOTPSWD                  NO - SKIP\n         CLI   FL1FSEC,C'1'             PASSWORD PROTECTED?\n         BE    YESPSWD                  YES - MOVE IT IN\n         CLI   FL1FSEC,C'3'             NOPWREAD?\n         BNE   WHATPSWD                 NO - WHAT THEN????\n         MVC   #PSWD,=C' WRT'           YES                   06/84 DBC\n         B     NOTPSWD                  CONTINUE\nWHATPSWD MVC   #PSWD,=C' ???'           SAY WHAT?             06/84 DBC\n         B     NOTPSWD\nYESPSWD  MVC   #PSWD,=C' YES'           SAY SO.               06/84 DBC\n         SPACE 3\nNOTPSWD  MVC   #CDATE(2),FL1CREDT+1     YEAR CREATED\n         MVI   #CDATE+2,C'.'\n         MVC   #CDATE+3(3),FL1CREDT+3   DAY CREATED\n         MVC   #EDATE(2),FL1EXPDT+1     YEAR EXPIRES\n         MVI   #EDATE+2,C'.'\n         MVC   #EDATE+3(3),FL1EXPDT+3   DAY EXPIRES\n         SPACE 3                                              06/84 DBC\n         MVC   #INFOSRC,=C'LABELS' SHOW INFO SOURCE           06/84 DBC\n         MVC   #BLKCNT(6),FL1BLKCT      BLOCK COUNT\n         ICALL DEZERO,R14,R1=#BLKCNT    REMOVE LEADING ZEROES\n         SPACE 2\n         MVC   #RECFM(1),FL2RECFM       RECFM\n         MVC   #RECFM+1(1),FL2BLKA      BLOCK ATTRIBUTE\n         MVC   #RECFM+2(1),FL2CNTRL     CONTROL CHARACTER\n         CLI   #RECFM+1,C'R'            WEIRDO RECFM?  (FR OR VR)\n         BNE   NOT$RF$R                 NOT RECFM=FR OR VR\n         MVC   #RECFM+3(1),#RECFM+2     MOVE CTL CHAR OVER\n         MVC   #RECFM+1(2),=C'BS'       IT'S REALLY FBS OR VBS\nNOT$RF$R MVC   #BLKSIZE(5),FL2BLKL      BLOCK LENGTH\n         ICALL DEZERO,R14,R1=#BLKSIZE   REMOVE LEADING ZEROES\n         MVC   #LRECL(5),FL2LRECL       RECORD LENGTH\n         ICALL DEZERO,R14,R1=#LRECL     REMOVE LEADING ZEROES\n         CLI   FL2DEN,C'?'              WAS A \"DOS SL\" TAPE FOUND?  JCH\n         BNE   *+10                     NO -> HDR2 VALUE IS VALID   JCH\n         MVC   FL2DEN(1),TRUE#DEN       YES-> USE ACTUAL AS VALUE   JCH\n         CLI   TRUE#DEN,C'5'            3480 CARTRIDGE ?            THO\n         BNE   *+8                      NO THEN BYPASS MOD          THO\n         MVI   FL2DEN,C'5'              MODIFY WITH 3480 DEN        THO\n         IC    R15,FL2DEN               GET TAPE DENSITY\n         STC   R15,#DEN+1               SET IN PRINT LINE\n         CLC   TRUE#DEN(1),FL2DEN       LABEL CORRECT?\n         BE    *+8                      YES - OK\n         OI    TFLAG1,T1@BADEN          SET BAD DENSITY FLAG\n         N     R15,F15                  JUST DIGIT\n         SLL   R15,2                    MULTIPLY BY 4\n         LA    R3,DEN#LIST(R15)         POINT TO DENSITY VALUE\n         TM    PARMFLAG,PF@DEN1         PARM=DEN1?\n         BO    DEN$1                    YES - LEAVE 1 CHAR DEN\n         CLI   FL2DEN,C'5'              TOO HIGH?                   THO\n         BH    DEN$1                    YES - SKIP\n         CLI   FL2DEN,C'0'              TOO LOW?\n         BL    DEN$1                    YES - SKIP\n         MVC   #DEN,24(R3)              MOVE CHAR FORM OF DENSITY   THO\n         SPACE 1\nDEN$1    MVC   #TRTCH+1(2),FL2TRTCH     TAPE RECORDING TECHNI 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         MVC   #CREATOR(8),FL2JOBD GET CREATING JOBNAME       06/84 DBC\n         CLI   FL2STEPD,C' '       IS THERE A STEPNAME?       06/84 DBC\n         BE    GOTCREAT            NO, SKIP                   06/84 DBC\n         MVI   #CREATOR-1,C'X'     YES, SET SCAN STOPPER      06/84 DBC\n         LA    R1,#CREATOR+8       LOAD BACK-SCANNER          06/84 DBC\n         BA&XA.R R14,0             LOAD LOOP HEAD             06/84 DBC\n         BCTR  R1,0                BACK SCAN                  06/84 DBC\n         CLI   0(R1),C' '          EO-JOBNAME YET?            06/84 DBC\n         BER   R14                 NO, CONTINUE BACKSCAN      06/84 DBC\n         MVI   1(R1),C'/'          YES, INSERT SEPARATOR      06/84 DBC\n         MVC   2(8,R1),FL2STEPD    GET STEPNAME               06/84 DBC\n         MVI   #CREATOR-1,C' '     CLEAR STOPPER              06/84 DBC\nGOTCREAT DS    0H                                             06/84 DBC\n         SPACE 2\n*    *****  COMPUTE THE LENGTH (INCHES) OF THIS TAPE DATA SET.\n         SPACE 1                                              06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   DON'T DO IT IF A SCAN IS - 06/84 DBC\n         BZ    SKIPGUES             BEING DONE ANYWAY         06/84 DBC\n         SPACE 1\n         PACK  DWD,FL1BLKCT(6)          BLOCK COUNT\n         CVB   R15,DWD                  SAVE BLOCK COUNT\n         LA    R1,4(,R15)               ADD 4 GAPS TO BLOCK COUNT.\n         L     R3,TRUE#DEN              GET PTR TO TRUE DENSITY\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         M     R1-1,=F'08'              EACH GAP IS .08 INCH        THO\n         B     *+20                                                 THO\n         M     R1-1,=F'60'              EACH GAP IS 6/10 INCH\n*  NOTE - LENGTH KEPT IN .01 INCHES\n         CLI   TRUE#DEN,C'4'            6250 BPI?\n         BNE   *+8                      NO - SKIP\n         SRL   R1,1                     GAPS AT 6250 ARE .3 INCH\n         LR    R2,R1                    SAVE LENGTH OF GAPS\n         PACK  DWD,FL2BLKL(5)           BLKSIZE.\n         CVB   R1,DWD\n         MR    R1-1,R15                 BLKSIZE * BLOCK_COUNT\n         AH    R1,=Y(4*80)              2 HDR & 2 EOF LABELS\n         M     R1-1,=F'100'             CONVERT TO .01\n         D     R1-1,0(,R3)              DIVIDE BY DENSITY.\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         AH    R1,=Y(8*3)               3 TAPEMARKS @ 0.08 INCH     THO\n         B     *+8                                                  THO\n         AH    R1,=Y(375*3)             3 TAPEMARKS @ 3.75 INCH\n         AR    R2,R1                    ADD TO LENGTH OF DATA\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2 FORMAT FILE LENGTH  06/84 DBC\n         A     R2,LEN#TAPE              ADD TO TOTAL LENGTH\n         ST    R2,LEN#TAPE              SAVE NEW TOTAL LENGTH\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2 FORMAT CUMULATIVE L 06/84 DBC\nSKIPGUES DS    0H                                             06/84 DBC\n         SPACE 1\n         PRTLN OUTBUFF\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK        SL WITH NL ANALYSIS?  06/84 DBC\n         BNZ   NO$CHECK                 NO - SEE IF SECOND LI 06/84 DBC\n         MVC   MAXBLKSI(16),NL#SAVE RESTORE INFO              09/84 DBC\n         MVC   NLFLAGS,NL#FLAGX         MORE...\n         B     NL$SL                    YES - GO DO IT\n         SPACE 2\nNO$CHECK TM    PARMFLAG,PF@INLIN        INLINE MESSAGES?\n         BNO   NLSLDONE                 NO - DO NEXT FILE\n         CLI   UNLOADER,C' '            UNLOADED?\n         BE    NLSLDONE                 NO - DO NEXT FILE\n         PRTLN OUTBUFF2                 PRINT TRUE ATTRS OF UNLOADED DS\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OTHER PRINT LINE\n         B     NLSLDONE                 DO NEXT FILE\n         SPACE 3\nHAVE$EOV PRTLN '-     *** EOV ***'\n         CLC   LCTR2,=F'0'              ANYTHING PRINTED ON OTHER PAGE?\n         BZ    NO$EOV2                  NO - SKIP\n         MVC   OUTBUFF2(17),=C'-     *** EOV ***'\n         PRTLN2                         FLAG END OF OTHER PRINT FILE\n         SPACE 1\nNO$EOV2  TM    TFLAG1,T1@BADEN          ANY INCORRECT DENSITIES?\n         BNO   NO$BADEN                 NO - SKIP\n         LA    R0,9                     ASSUME NOT PARM=NONOTE\n         TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BNO   *+8                      YES - SO USE 9\n         LA    R0,6                     PARM=NONOTE, SO USE 6\n         NEWPAGE  (R0)                  GO TO TOP OF PAGE IF NEEDED\n         LA    LCTR,1(,LCTR)            WILL CALL PRTLN 1 EXTRA TIME\n         MVC   OUTBUFF(113),INCORLAB    REPL LITERAL BY FIELD 10/90 SBG\n*                                       FOR ADDRESSABILITY    10/90 SBG\n         L     R2,TRUE#DEN              GET PTR TO 4 CHAR TRUE DEN\n         CLI   TRUE#DEN,C'2'            800 BPI?\n         BNE   *+6                      NO - OK\n         BCTR  R2,0                     RIGHT JUSTIFY THE \"800\"\n         MVC   OUTBUFF+98(4),20(R2)     MOVE INTO PRINT LINE\n         PRTLN OUTBUFF\n         MVI   OUTBUFF,C'+'             SET FOR OVERPRINT\n         MVC   OUTBUFF+98(4),20(R2)     LIGHT UP THE DENSITY\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BA&XA R14,PUTPRTLN             PRINT IT ONCE (NO CLEAR OUTBUFF\n         PRTLN OUTBUFF                  AND THE THIRD TIME\n         SPACE 2\nNO$BADEN TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BO    REWINDIT                 NO - SO DON'T\n         NEWPAGE  4                     ENOUGH LINES LEFT ON PAGE?\n         PRTLN '0NOTE:  LENGTH(S) ARE COMPUTED, (BASED ON BLKSIZE, BLKC$\n               OUNT, AND DENSITY), AND ARE THEREFORE ONLY APPROXIMATE.'\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BO    REWINDIT                 YES - GOOD LENGTHS PRINTED\n         PRTLN '        LENGTHS FOR RECFMS OTHER THAN F,FB,ETC MAY NOT $\n               BE VERY CLOSE TO THE TRUE LENGTH.'\n         SPACE 2\nREWINDIT TAPIO TCCW#RWD                 REWIND THE TAPE\n         SPACE 2\nCLOSE$TP CLOSE MF=(E,TAPEMFL)\n         SPACE 2\nRETURN   L     R14,RET#ADDR             GET RETURN ADDR\n         BR    R14\n         SPACE 2\nNULLFILE MVC   UNLOADER+2(6),=C'(NULL)' PUT IN INDICATOR      06/84 DBC\n         TAPIO TCCW#LBL   %%%%%         READ EOF'S                %%%%%\n         B     TEST$EOF   %%%%%         TEST FOR 'EOF'            %%%%%\n         SPACE 2\nUNEXTPMK PRTLN '0*** UNEXPECTED TAPE MARK ***'\n         B     REWINDIT                 CLOSE UP & LEAVE\n         SPACE 2\nLEADTPMK NEWPAGE  ,                     PRINT THE HEADER LINES\n         PRTLN '0++++ TAPE HAS LEADING TAPE MARK ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         MVI   VOLLABI,C'X'             INSURE NL ROUTINE\n         MVI   NUMBNULL+1,1             INIT NUMBER OF NULL FILES   U14\n         TAPIO TCCW#DAT,TM=LEAD$EOV     READ FIRST BLOCK FROM FILE  U14\n         B     DO$SENSE                 DO NL ANALYSIS\n         SPACE 2\nLEAD$EOV MVI   NUMBNULL+1,2             SET NUMBER OF NULL FILES    U14\n         CLI   NULLNUMB+1,2             TOO MANY?                   U14\n         BL    HAVE$EOV                 YES - STOP                  U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  FLAG IT               06/84 DBC\n         MVI   #FILE+3,C'1'             SET FOR PRINT               U14\n         PRTLN OUTBUFF                                              U14\n         B     DO$SENSE                                             U14\n         SPACE 2\nIEHINITT PRTLN '-++++ TAPE HAS BEEN RE-LABELLED WITH IEHINITT ++++'\n         B     REWINDIT                 ...\n         EJECT\nTEST$MV  CLC   =C'UNLOADED',TAPEBUFF+16 IEHMOVE'S TRADEMARK?\n         BNER  R10                      NO\n         MVC   UNLOADER(7),IEHMOVE      SAY WHO\n         SPACE 1\nTEST$RET IFP2  Y,4(,R10)                RETURN POINT FOR 2 PRINT FILES\n         B     8(,R10)                  RETURN POINT FOR 1 PRINT FILE\n         SPACE 2\n************************************************************  11/88 SBG\n* THE CBT973 COMPRESS PROGRAM MAY BE FOUND IN SOURCE FORM  *  11/88 SBG\n* ON THE CBT MODS TAPE, FILE (2,NL), RECFM=FB,LRECL=80,    *  11/88 SBG\n* BLKSIZE=32720.  IT TAKES 80-BYTE FB RECORDS AS INPUT,    *  11/88 SBG\n* AND PRODUCES 94-BYTE LRECL, VB RECORDS AS OUTPUT.        *  11/88 SBG\n*                                                          *  11/88 SBG\n* DATA COMPRESSION TAKES THE FORM OF SQUEEZING OUT BLANKS. *  11/88 SBG\n* A 10-BYTE BIT MAP HEADER TELLS THE PROGRAM WHICH OF THE  *  11/88 SBG\n* 80 CHARACTERS WERE BLANKS, AND WHICH WERE NOT.  A RDW    *  11/88 SBG\n* PRECEDES THE 10-BYTE BIT MAP, FOLLOWED BY THE NON-BLANK  *  11/88 SBG\n* BYTES OF THE RECORD.  THE PROGRAM COUNTS ON A LOT OF     *  11/88 SBG\n* BLANK CHARACTERS IN THE RECORD, TO ALLOW COMPRESSION     *  11/88 SBG\n* TO BE ACHIEVED.                                          *  11/88 SBG\n*                                                          *  11/88 SBG\n* IT IS THE PRACTICE ON THE CBT TAPE TO IEBUPDTE-UNLOAD    *  11/88 SBG\n* A SOURCE-FORMAT PDS TO A SEQUENTIAL FILE, AND THEN TO    *  11/88 SBG\n* COMPRESS THE BLANKS OUT WITH THE CBT973 PROGRAM WHEN     *  11/88 SBG\n* UNLOADING THE FILE ON TO THE CBT TAPE.  TAPEMAP USES     *  11/88 SBG\n* THE CBT973 DECOMPRESS ALGORITHM TO DECOMPRESS ONE        *  11/88 SBG\n* 80-BYTE RECORD AT A TIME, AND THEN USES ITS IEBUPDTE     *  11/88 SBG\n* MEMBER NAME INTERPRETATION ON EACH DECOMPRESSED RECORD.  *  11/88 SBG\n*                                                          *  11/88 SBG\n* MEMBER NAMES IN UNLOADED LIBRARIES ARE THUS DIRECTLY     *  12/88 SBG\n* REPORTED BY DOING A \"TAPEMAP\" RUN ON A CBT TAPE.         *  11/88 SBG\n*                                                          *  12/88 SBG\n* USUALLY ANY FB 80-BYTE LRECL NON-IEBUPDTE FILES ARE ALSO *  12/88 SBG\n* COMPRESSED.  THESE FILES WILL APPEAR ON REPORT 2 BUT     *  12/88 SBG\n* WILL NOT SHOW AS HAVING ANY MEMBERS.                     *  12/88 SBG\n************************************************************  11/88 SBG\nTEST$CBT CLC   TAPEBUFF+2(3),=X'000000' LOOK LIKE BDW+X'00'?  11/88 SBG\n         BNER  R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+0(2),=X'0000'   LOOK LIKE BDW?        11/88 SBG\n         BER   R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+6(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BNER  R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+4(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BER   R10                      NO CAN'T BE CBT973 FMT11/88 SBG\nTEST$CBA LA    R1,TAPEBUFF+4    IF CBT973, THEN START OF RDW  11/88 SBG\n         LH    R3,0(,R1)    DON'T BE MODULO 256..SAVE IT ALL. 07/90 SBG\n         C     R3,=F'94'            LRECL=94 MAX FOR CBT973.  11/88 SBG\n         BHR   R10                  BETWEEN 95 & 255, NOT CBT 11/88 SBG\n         ST    R4,CBSAVE4           USE R4 FOR WKREG          11/88 SBG\n         LH    R4,TAPEBUFF          GET BLKSIZE FROM BDW      11/88 SBG\n         S     R4,=F'4'             4 LESS FOR COMPARE W/RECSZ11/88 SBG\n         CR    R3,R4                ONE RECORD IN THIS BLOCK? 11/88 SBG\n         BL    TEST$CBN             YES. SKIP TEST PAST EO-REC11/88 SBG\n************************************************************* 12/88 SBG\n*   \"EMPTY FILES\" ON THE CBT TAPE ARE NOT REALLY EMPTY.     * 12/88 SBG\n*    THEY ARE ONE-RECORD CBT973 COMPRESSED FILES WITH A     * 12/88 SBG\n*    CERTAIN FIXED LITERAL EXPRESSION ON THE ONE CARD.      * 12/88 SBG\n*    A USER OF THE CBT TAPE WOULD LIKE TO KNOW WHICH TAPE   * 12/88 SBG\n*    FILES ARE CONSIDERED \"EMPTY\" BY THE TAPE ADMINISTRATOR.* 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBL CLC   14(L'EMPTYLIT,R1),EMPTYLIT   CBT \"EMPTY\" FILE? 11/88 SBG\n         BE    TEST$CBE             FLAG AS CBT EMPTY FILE    12/88 SBG\n         CLC   14(L'EMPTYLI2,R1),EMPTYLI2   OLD \"EMPTY\" FILE? 12/88 SBG\n         BNE   TEST$CBN             NO-STILL TEST FOR CBT973. 12/88 SBG\n************************************************************* 12/88 SBG\n*   AN \"EMPTY FILE\" ON THE CBT TAPE HAS BEEN FOUND.         * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBE MVC   UNLOADER(8),CBTEMPTY  REPORT AS EMPTY.         12/88 SBG\n         L     R4,CBSAVE4           RESTORE REG 4             11/88 SBG\n         TM    TFLAG2,T2@PRT2       IS SECOND REPORT WANTED?  12/88 SBG\n         BOR   R10            NO SECOND REPORT FOR EMPTY FILE 12/88 SBG\n         B     8(,R10)        WE WANT TO FLAG IF ONE REPORT   12/88 SBG\n************************************************************* 12/88 SBG\n*   CBTEMPTY IS FLAGGED ON 'PARM=INLINE', BUT WE DON'T WANT * 12/88 SBG\n*    WANT EMPTY CBT FILES REPORTED ON THE SECOND REPORT     * 12/88 SBG\n*    TO CONFUSE SOMEONE WHO MAY THINK IT IS A NONTRIVIAL    * 12/88 SBG\n*    NON-IEBUPDTE CBT973-COMPRESSED FILE.                   * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBN DS    0H                   NOT CBT EMPTY FILE        11/88 SBG\n         AR    R3,R1                PAST RECORD END           11/88 SBG\n         LH    R4,0(,R3)            GET SECOND RECORD SIZE    11/88 SBG\n         C     R4,=F'14'            SEE IF LESS THAN 14       11/88 SBG\n         BL    TEST$CJ1             LESS THAN 14 IS NO GOOD   08/90 SBG\n         C     R4,=F'94'            SEE IF MORE THAN 94       08/90 SBG\n         BNH   TEST$CJ2             IN BETWEEN, TEST FURTHER  08/90 SBG\nTEST$CJ1 L     R4,CBSAVE4           RESTORE REG 4 BEFORE RET  08/90 SBG\n         BR    R10                  GO BACK TO CALLER         08/90 SBG\nTEST$CJ2 CLI   0(R3),X'00'          IF CBT973, MUST BE X'00'  08/90 SBG\n         BNER  R10                  NOT SO, THEN NOT CBT973   11/88 SBG\n         CLI   1(R3),X'00'          IF CBT973, CAN'T BE X'00' 11/88 SBG\n         BER   R10                  IT IS, THEN NOT CBT973    11/88 SBG\n         CLC   2(2,R3),=X'0000'     LOOK LIKE RDW?            11/88 SBG\n         BNER  R10                  NO. CAN'T BE CBT973 FMT   11/88 SBG\nTEST$CBM LA    R1,14(,R1)           GO TO \"NONBLANK\" DATA     11/88 SBG\nTEST$CBO CLI   0(R1),X'40'          HAD BETTER NOT BE A BLANK 11/88 SBG\n         BER   R10                  IT IS A BLANK. NO GOOD.   11/88 SBG\n         LA    R1,1(,R1)            BUMP ONE BYTE             11/88 SBG\n         CR    R1,R3                END OF NONBLANK DATA?     11/88 SBG\n         BL    TEST$CBO             NO, KEEP TRYING           11/88 SBG\n         MVC   UNLOADER(6),CBT973   ASSUME CBT973 FORMAT      11/88 SBG\n         B     TEST$RET                 RETURN                11/88 SBG\n         SPACE 2                                              11/88 SBG\nTEST$CPY CLC   =X'00CA6D0F',TAPEBUFF+8  VS2COPY'S TRADEMARK?\n         BE    TEST$CYY                 YES                   06/93 RT\n         CLC   =X'01CA6D0F',TAPEBUFF+8  VS2COPY'S PDSE MK?    06/93 RT\n         BNER  R10                      NO\nTEST$CYY MVC   UNLOADER(7),IEBCOPY      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 2\nTEST$UPS ST    R10,DWD                  SAVE MY RETURN ADDR\n         LA    R2,80                    BXLE INCR\n         LA    R15,TAPEBUFF             BXLE START\n         LR    R3,R15                   COPY FOR END\n         A     R3,LASTSIZE         POINT PAST END            09/84 DBC\n         SR    R3,R2                    POINT TO LAST CARD IN BLOCK\n         SPACE 1\nTEST$UPL LR    R1,R15                   COPY CARD START ADDR\n         BA&XA R10,TEST$UP              IS THIS IEBUPDTE CTL CARD?\n         B     TEST$UPB                 NO - GO BXLE\n         MVC   UNLOADER(8),IEBUPXXX SAY WHO                   06/84 DBC\n         L     R10,DWD                  GET BACK MY RETURN ADDR\n         B     TEST$RET                 AND RETURN TO CALLER\n         SPACE 1\nTEST$UPB BXLE  R15,R2,TEST$UPL          TRY ALL CARDS IN THIS BLOCK\n         L     R10,DWD                  RESTORE RETURN ADDR\n         BR    R10                      NOT IEBUPDTE INPUT STREAM\n         SPACE 2\nTEST$UP  CLC   =C'./',0(R1)             START RIGHT?\n         MVI   UPDTXFLG,C' '            ASSUME ./ CONTROL CARD11/88 SBG\n         BE    TEST$UPC                 CONTINUE              11/88 SBG\nTEST$UPX CLC   =C'><',0(R1)             SUBORDINATE MEMBER?   11/88 SBG\n         BNER  R10                      NO - THAT WAS QUICK\n         MVI   UPDTXFLG,C'>'            REALLY >< CONTROL CARD11/88 SBG\nTEST$UPC DS    0H                       CONTINUE PROCESSING   11/88 SBG\n         LA    R1,2(,R1)                POINT TO SCAN START\n         LA    R0,69                    MAX SCAN LENGTH\n         BA&XA R14,F$BLANK              FIND END OF NAME FIELD\n         BA&XA R14,F$CHARS              FIND THE VERB\n         CLC   =C'ADD ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'REPL ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHANGE ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHNGE ',0(R1)    IEBUPDAT TYPE CHANGE?      06/84 DBC\n         BNER  R10                 NO, RETURN EMPTY HANDED    06/84 DBC\n         SPACE 2\nTU$SAVE  MVC   UPDT#TYP(1),0(R1)        A,R,C\n         MVC   IEBUPXXX,=C'IEBUPDTE' ASSUMPTION               06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE SCANNER               06/84 DBC\n         SPACE 1\nTU$LOOP  LA    R1,1(,R1)\n         CLC   =C'MEMBER=',0(R1)\n         BE    TU$MEM\n         CLC   =C'NAME=',0(R1)\n         BE    TU$NAM\n         BCT   R0,TU$LOOP               SCAN THE REST OF THE CARD\n         SPACE 3                                              06/84 DBC\n************************************************************* 06/84 DBC\n*        THIS IS NOT AN INTERESTING IEBUPDTE TYPE CARD, BUT * 06/84 DBC\n*        IT STILL MIGHT BE AN INTERESTING IEBUPDAT TYPE     * 06/84 DBC\n*        CARD. SCAN TO SEE IF THE OPERAND FIELDS START WITH * 06/84 DBC\n*        A FIRST POSITIONAL PARAMETER THAT IS A MEMBER      * 06/84 DBC\n*        NAME.                                              * 06/84 DBC\n************************************************************* 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE VERB PTR           06/84 DBC\n         BA&XA R14,F$BLANK         SCAN PAST THE VERB         06/84 DBC\n         BA&XA R14,F$CHARS         SCAN TO THE OPERANDS       06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE OPERANDS PTR          06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LA    R0,9                MAX L'NAME+1               06/84 DBC\n         BA&XA.R  R14,0            LOOP HEAD                  06/84 DBC\n         CLI   0(R1),C'='          IEBUPDTE TYPE CARD?        06/84 DBC\n         BER   R10                 YES, GIVE UP               06/84 DBC\n         CLI   0(R1),C','          NO, EO-1ST OPERAND?        06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         CLI   0(R1),C' '          MAYBE, CHECK AGAIN         06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         LA    R1,1(,R1)           NO, ADVANCE SCANNER        06/84 DBC\n         BCTR  R0,R14              LOOP BACK                  06/84 DBC\n         BR    R10                 1ST OPERAND TOO LONG; GVUP 06/84 DBC\n         SPACE 1                                              06/84 DBC\nTU$UPDAT MVC   IEBUPXXX,=C'IEBUPDAT' RESET \"UNLOADER\" NAME    06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE NAME POINTER       06/84 DBC\n         B     4(,R10)             RETURN WITH NAME           06/84 DBC\n         SPACE 2\nTU$MEM   LA    R1,7(,R1)                POINT TO MEMBER NAME\n         B     *+8                      SKIP OTHER LA\n         SPACE 1\nTU$NAM   LA    R1,5(,R1)                POINT TO MEMBER NAME\n         SPACE 1\n         MVI   8(R1),C','               BE SURE TO STOP\n         B     4(,R10)                  FOUND A NAME\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        TEST TO SEE IF THE CURRENT FILE IS A SMPPTFIN      * 07/85 DBC\n*        FILE.                                              * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTF ST    R10,DWD             SAVE THE RETURN PTR        07/85 DBC\n         LA    R2,80               GET BXLE SCANNER           07/85 DBC\n         LA    R15,TAPEBUFF        --> TAPE BUFFER            07/85 DBC\n         LR    R3,R15              GET -                      07/85 DBC\n         AL    R3,LASTSIZE          BXLE -                    07/85 DBC\n         SLR   R3,R2                 LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTL LR    R1,R15              --> NEXT CARD              07/85 DBC\n         BA&XA R10,TEST$PT         SEE IF IT'S ++PTF, ++APAR, 07/85 DBC\n*                                  ++FUNCTION, OR ++USERMOD   07/85 DBC\n         B     TEST$PTB            +0 NOPE, SKIP TO NEXT CARD 07/85 DBC\n         MVC   UNLOADER(8),SMPPTFIN +4 YEP, NAME THE          07/85 DBC\n*                                  \"UNLOADER\"                 07/85 DBC\n         L     R10,DWD             RESTORE RETURN ADDRESS     07/85 DBC\n         B     TEST$RET            GO RETURN TO CALLER        07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTB BXLE  R15,R2,TEST$PTL     ADVANCE TO NEXT CARD AND   07/85 DBC\n*                                  LOOP TO TEST IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R10,DWD             NO ++PTF ATC. CARD WAS     07/85 DBC\n*                                  FOUND. RESTORE LINK        07/85 DBC\n         BR    R10                 RETURN EMPTY HANDED        07/85 DBC\n         SPACE 3                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        SEE IF THE CURRENT RECORD IS A SMP SYSMOD HEADER   * 07/85 DBC\n*        CARD (++PTF, ++APAR, ++FUNCTION, OR ++USERMOD).    * 07/85 DBC\n*        NOTE, THIS SCAN EXAMINES ONLY ONE CARD AT A TIME.  * 07/85 DBC\n*        ACCORDINGLY, IT WILL WORK ONLY IF THE SYSMOD'S     * 07/85 DBC\n*        NAME IS NOT CONTINUED ONTO ANOTHER CARD.           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PT  CLC   =C'++',0(R1)        PLUSPLUS CARD?             07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         LA    R1,2(,R1)           YES, ADVANCE SCANNER       07/85 DBC\n         LA    R0,69               LOAD SCAN LIMIT            07/85 DBC\n         BA&XA R14,F$CHARS         SKIP BLANKS                07/85 DBC\n         SPACE 1                                              07/85 DBC\n         LA    R14,7               L'SYSMOD TYPE NAME         07/85 DBC\n         CLC   =C'USERMOD',0(R1)   ++USERMOD?                 07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,3               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'PTF',0(R1)       ++PTF?                     07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,8               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'FUNCTION',0(R1)  ++FUNCTION?                07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         CLC   =C'APAR',0(R1)      NO, ++APAR?                07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         LA    R14,4               YES, SET L'NAME            07/85 DBC\n         SPACE 1                                              07/85 DBC\nTP$SAVE  MVC   PTF#TYPE,0(R1)      SAVE SYSMOD TYPE           07/85 DBC\n         SR    R0,R14              DECR LOOP CNTL; TOO FAR?   07/85 DBC\n         BNPR  R10                 YES, RETURN +0             07/85 DBC\n         ALR   R1,R14              NO, ADVANCE SCANNER        07/85 DBC\n         BA&XA R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         CLI   0(R1),C'('          SUB-VALUE?                 07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         BCT   R0,TP$PTF           YES, DECR SCAN LIMIT       07/85 DBC\n         BR    R10                 RETURN +0 IF TOO FAR       07/85 DBC\nTP$PTF   LA    R1,1(,R1)           ADVANCE ONE                07/85 DBC\n         BA&XA R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         B     4(,R10)             RETRUN +4 WITH A POINTER   07/85 DBC\n*                                  TO THE SYSMOD NAME.        07/85 DBC\n         EJECT ,                                              07/85 DBC\n************************************************************* 12/88 SBG\n*  WE WANT TO CHECK IF WE HAVE FILE 1 FROM A REAL CBT TAPE. * 12/88 SBG\n*   IF THAT'S WHAT WE HAVE, WE WANT TO REPORT THE VERSION   * 12/88 SBG\n*   NUMBER AND CREATION DATE OF THAT CBT TAPE.              * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CH  ST    R15,CBSAVE15        SAVE REG 15                12/88 SBG\n         LA    R15,TAPEBUFF        CBT HEADER. LOOK FOR       12/88 SBG\n         CLC   CHJOBLIT,0(R15)     ARNIE CASINGHINO'S JOBNAME 12/88 SBG\n         BE    TEST$CHG            CBT HEADER                 12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    R10                 RETURN NOT FOUND           12/88 SBG\nTEST$CHG MVC   UNLOADER(8),CBHEADER     FLAG AS FILE 1 OF CBT 12/88 SBG\n         MVI   CSTATCLR,X'40'      CLEAR VERS & DATE          12/88 SBG\n         MVC   CBTVERS(12),CSTATCLR   NOW DO IT .             12/88 SBG\n         ST    R4,CBSAVE4          SAVE REG 4                 12/88 SBG\n         LR    R4,R15              ADDR OF TAPE BUFFER        12/88 SBG\n         A     R4,CDOCSIZE         END OF BLOCK ADDRESS       12/88 SBG\nTEST$CHL LA    R15,1(,R15)         SEARCH FOR DATE AND VERSION12/88 SBG\n         CR    R15,R4              END OF BLOCK YET?          12/88 SBG\n         BNL   TEST$CHR            NO DATE OR VERSION FOUND   12/88 SBG\n         CLC   VERSLIT1,0(R15)     DATE HDR FOUND?            12/88 SBG\n         BE    TEST$CHD            YEP. GET DATE.             12/88 SBG\n         CLC   VERSLIT2,0(R15)     VERSION # HDR FOUND?       12/88 SBG\n         BNE   TEST$CHL            NOPE. KEEP TRYING.         12/88 SBG\nTEST$CHV MVC   CBTVERS(4),10(R15)  SAVE VERSION #             12/88 SBG\n         L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         B     TEST$RET            DONE WITH EXTRACTION.      12/88 SBG\nTEST$CHD MVC   CBTDATE(8),10(R15)  SAVE TAPE RELEASE DATE     12/88 SBG\n         B     TEST$CHL            KEEP TRYING FOR VERSION #. 12/88 SBG\nTEST$CHR L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    R10                 RETURN UNSUCCESSFUL        12/88 SBG\n         EJECT                                                12/88 SBG\nF$BLANK  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               GOT A BLANK YET?\n         BER   R14                      YES - RETURN\n         LA    R1,1(,R1)                MOVE SCAN PTR\n         BCT   R0,F$BLANK+2             KEEP SCANNING\n         BR    R10                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nF$CHARS  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               FIND A CHAR?\n         BNER  R14                      YES - RETURN\n         LA    R1,1(,R1)                INCR SCAN PTR\n         BCT   R0,F$CHARS+2             KEEP SCANNING\n         BR    R10                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nTEST$DMP CLC   =X'F47006016663B24D',TAPEBUFF+12  IEHDASDR'S TRADEMARK?\n         BNER  R10                      NO\n         MVC   UNLOADER(8),IEHDASDR     SAY WHO\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         LR    R2,R10                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 IGNORE CCWS\n         SPACE 1\nCOM$DUMP TAPIO TCCW#DAT                 READ FIRST TRK'S DATA\n         MVC   FDRSAVE(8),TAPEBUFF+12   SAVE IN CASE FDR\n         LR    R10,R2                   RETURN\n         B     TEST$RET\n         SPACE 2\nTEST$FDR CLC   =C'THATS ALL FOLK',TAPEBUFF+5   HIS TRADEMARK?\n         BNER  R10                      NO\n         LR    R2,R10                   SAVE RETURN ADDR\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         MVC   UNLOADER(3),FDR          SAY FDR FOR NOW\n         CLI   TAPEBUFF+19,C'S'         WAS IT FDR?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRDSF       NO  - MAYBE FDRDSF\n         CLI   TAPEBUFF+19,C'F'         FDRDSF?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRXXX       NO  - BUT SOME KIND OF FDR?\n         B     COM$DUMP                 CONTINUE\n         SPACE 2\nTEST$SLK CLC   =F'20',LASTSIZE     RIGHT LENGTH FOR SLICK HDR 09/84 DBC\n         BNER  R10\n         CLC   TAPEBUFF+8(12),FFS         FF'S AT END OF RECORD?\n         BNER  R10\n         CLI   TAPEBUFF+1,C'B'          BACKUP FLAG PRESENT?\n         BNER  R10\n         MVC   DASDRSAV(20),TAPEBUFF    SAVE THE FIRST RECORD\n         LR    R2,R10                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 GET 2ND RECORD\n         LR    R10,R2                   RESTORE RETURN ADDR\n         CLC   TAPEBUFF(2),=H'0'        1ST HALFWORD = 0?\n         BNER  R10\n         CLC   TAPEBUFF+2(2),=H'0'      2ND HALFWORD = 0 OR FF'S?\n         BE    TEST$SK1\n         CLC   TAPEBUFF+2(2),FFS\n         BNER  R10\nTEST$SK1 LH    R2,TAPEBUFF+4            VERIFY LENGTH OF RECORD\n         LTR   R2,R2\n         BNPR  R10\n         LA    R2,8(,R2)\n         C     R2,LASTSIZE         LENGTH OK?                09/84 DBC\n         BNER  R10\n         CLC   TAPEBUFF+6(2),=H'0'      LAST HALF OF RDW = 0?\n         BNER  R10\n         MVC   UNLOADER(8),SLICKMNG     SHOW SLICKMNG AS UNLOADER\n         B     TEST$RET                 RETURN TO MAINLINE\n         SPACE 3\n* FOR IEBISAM, THE BEGINNING OF THE DCB IS UNLOADED TO THE FIRST\n* TWO CARDS.  SO CHECK (GUESS?) IF IT LOOKS LIKE AN ISAM DCB\nTEST$IS  CLC   TAPEBUFF(4),=Y(0,154)    SEQ # AND LENGTH CORRECT?\n         BNER  R10                      NO\n         CLC   TAPEBUFF+80(2),H1        SECOND SEQ # CORRECT\n         BNER  R10                      NO\n         TM    TAPEBUFF+4+48,X'10'      DCBOFLGS,DCBOFOPN\n         BNOR  R10                      NOT \"OPEN\"\n         CLI   TAPEBUFF+4+26,X'80'      DSORG=IS?\n         BE    *+10                     YES - CONTINUE\n         CLI   TAPEBUFF+4+26,X'81'      DSORG=ISU?\n         BNER  R10                      NO\n         MVC   UNLOADER(7),IEBISAM      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 3\nTEST$MAP CLC   =C'$$TAPEMAP.PRINT.FILE$$',TAPEBUFF  CHECK FOR HEADER\n         BNER  R10                      NO\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZR  R10                      NO\n         MVC   UNLOADER(7),CTAPEMAP     YES - THIS IS FOR US\n         B     TEST$RET\n         EJECT\nIEBUPDT1 MVC   OUTBUFF2+8(27),=C'IS AN IEBUPXXX INPUT STREAM' 07/85 DBC\n         MVC   OUTBUFF2+14(8),IEBUPXXX CORRECT RELOADER NAME  07/85 DBC\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTFS1    MVC   OUTBUFF2+8(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM' C\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nCBT1     CLC   CBTEMPTY,UNLOADER        CBT EMPTY FILE        11/88 SBG\n         BE    CBTEMP1                  PRINT SPECIAL INFO    11/88 SBG\n         MVC   OUTBUFF2+8(28),=C'IS IN CBT973 COMPRESS FORMAT'  /88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTEMP1  MVC   OUTBUFF2+8(25),=C'IS AN EMPTY CBT TAPE FILE'   11/88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTDOC1  MVC   OUTBUFF2+8(27),=C'CBT TAPE DOCUMENTATION FILE' 12/88 SBG\n         B     PRT$ONE             GO RELOOP                  12/88 SBG\n         SPACE 3                                              12/88 SBG\nIEHMOVE1 MVC   #BLKCNT+OUTBUFF2-OUTBUFF(4),=C'DSN='\n         MVC   #BLKCNT+OUTBUFF2-OUTBUFF+4(44),TAPEBUFF+85 MOVE DISK DSN\n         SPACE 1\n         BA&XA R10,SET$ONE\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 3\nIEBCOPY1 BA&XA R10,SET$ONE\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 3\nIEBISAM1 BA&XA R10,SET$ONE\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 3\nSET$ONE  MVC   OUTBUFF2+8(24),=C'TRUE ATTRIBUTES:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+32 FORMAT THE DSORG\n         ICALL CNVRECFM,R14,R15=#RECFM+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,4(,R10)               POINT TO BLKSIZE\n         ICALL CONVHALF,R14,R15=#BLKSIZE-1+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,6(,R10)               POINT TO LRECL\n         ICALL CONVHALF,R14,R15=#LRECL-1+OUTBUFF2-OUTBUFF\n         SPACE 2\n*  FOR PARM=INLINE, THE REPORT MUST PRINT BOTH THE RESULTS    12/88 SBG\n*  OF THE LABEL PROCESSING (FOR SL) AND THE RESULTS OF THE    12/88 SBG\n*  SCAN PROCESSING.                                           12/88 SBG\nPRT$ONE  TM    TFLAG1,T1@SL             SL TAPE?              12/88 SBG\n         BNO   PRT$ONEX                 NO. DO NORMAL STUFF   12/88 SBG\n         TM    PARMFLAG,PF@INLIN        INLINE ?              12/88 SBG\n         BO    FIND$EOF                 REGULAR INLINE STUFF  12/88 SBG\nPRT$ONEX TM    TFLAG1,T1@ANLZ           ANALYZING?            12/88 SBG\n         BNO   FIND$EOF                 NO\n         B     NL$LOOP                  YES - KEEP SCANNING NL TAPE\n         SPACE 3\n*  FIRST RECORD SAVED IN \"DASDRSAV\"\nIHDASDR1 MVC   OUTBUFF2+8(15),=C'DUMP FROM CCHH='\n         UNPK  OUTBUFF2+23(9),DASDRSAV+0(5)\n         TR    OUTBUFF2+23(8),HEXTAB    MAKE EBCDIC\n         MVC   OUTBUFF2+31(5),=C' OF A'\n         IC    R1,DASDRSAV+21           GET DEVTYPE\n         N     R1,=F'255'               CLEAN\n         MH    R1,=H'6'\n         LA    R14,=C'2321  2311  2314  2302  2301  2305-12305-23330  3*\n               340  3350  3375  3330-13380  3390  '           03/94 SBG\n         LA    R14,0(R14,R1)            GET ADDR OF THIS DEVTYPE\n         MVC   OUTBUFF2+37(6),0(R14)    MOVE TO PRINT LINE\n         CLC   =F'0',DASDRSAV+8         THIS TAPE START AT 0?\n         BNE   PRT$ONE                  NO - CAN'T FIND VOLSER\n*  SECOND RECORD IS IN \"TAPEBUFF\"\n         CLC   =C'VOL1VOL1',TAPEBUFF+216  LABEL?\n         BNE   PRT$ONE                  NO - SKIP\n         MVC   OUTBUFF2+46(7),=C'VOLUME='\n         MVC   OUTBUFF2+53(6),TAPEBUFF+224\n         MVC   OUTBUFF2+61(6),=C'OWNER='\n         MVC   OUTBUFF2+67(10),TAPEBUFF+261\n         B     PRT$ONE\n         SPACE 3\n* FIRST RECORD SAVED IN \"DASDRSAV\"\nFDR1     MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR1LOOP CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR1FND                  YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR1LOOP\nFDR1FND  MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         CLC   =C'DUMMYDSF',FDRSAVE     IS IT A NORMAL DUMP?\n         BE    PRT$ONE                  YES - ALL FOR NOW\n*                                       NO  - MUST BE ABS TRK DUMP\n         MVC   OUTBUFF2+28(22),=C' (ABSOLUTE TRACK DUMP)'\n         B     PRT$ONE\n         SPACE 3\nSLK1     MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         B     PRT$ONE                  PRINT THE INFO LINE\n         EJECT\nIEHMOVE2 LA    R0,7                     ASSUME PARM=NOMEM\n         TM    PARMFLAG,PF@NOMEM        IS IT?\n         BO    *+8                      YES\n         LA    R0,9                     NO\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BO    *+8                      YES\n         LA    R0,7                     NO\n         NEWPAGE  (R0),2                ENOUGH LINES LEFT ON PAGE?\n         SPACE 1\n         BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEHMOVE   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+282 CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT FIRST INFO LINE\n         SPACE 1\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FOR MSM\n         MVC   OUTBUFF2+25(7),=C'C-DATE='\n         ICALL CONVDATE,R10,R1=TAPEBUFF+138,R15=OUTBUFF2+32 C-DATE\n         SPACE 1\n         MVC   OUTBUFF2+42(7),=C'E-DATE='\n         ICALL CONVDATE,R10,R1=TAPEBUFF+141,R15=OUTBUFF2+49 E-DATE\n         SPACE 1\n         MVC   OUTBUFF2+59(4),=C'DSN='\n         MVC   OUTBUFF2+63(44),TAPEBUFF+85       MOVE IN OLD DSN\n         SPACE 1\n****     CLC   =C'VS2',TAPEBUFF+152     CHECK PROGRAMMING SYSTEM\n****     BE    MV$NOVOL                 SKIP IF OS/VS2\n         TM    TAPEBUFF+132,X'0F'       SEE IF LOOKS LIKE PACKED DATE\n         BO    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         CLI   TAPEBUFF+135,0           INVALID FOR VOLSER ANYWAY?\n         BE    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         MVC   OUTBUFF2+120(4),=C'VOL='\n         MVC   OUTBUFF2+124(6),TAPEBUFF+130\n         SPACE 1\nMV$NOVOL PRTLN2                         PRINT SECOND INFO LINE\n         SPACE 2\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BNO   STAR$TWO                 NO - SKIP\n         BA&XA R10,FMU$                 PRINT HEADER\n         SPACE 2\n         L     BLEN,LASTSIZE       GET SIZE OF BLOCK          09/84 DBC\n         SH    BLEN,=H'80'              MINUS FIRST CARD USED\n         LA    BPTR,TAPEBUFF+80         -> NEXT CARD TO USE\n         BA&XA R10,SEG$NEXT             NOW HAVE CARDS 1 & 2\n         BA&XA R10,SEG$NEXT             NOW 2 & 3\n         BA&XA R10,SEG$NEXT             NOW 3 & 4\n         BA&XA R10,SEG$NEXT             NOW 4 & 5\n         LA    DPTR,MV#BUFF1+46         -> FIRST MEMBER NAME -4\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         LA    DPTR,3(,DPTR)            -> OTHER PLACE\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         BA&XA R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$GOT1  LA    DPTR,4(,DPTR)            -> FIRST MEMBER NAME\n         SPACE 2\nMV$LOOP  BA&XA R10,MOVE$MEM             MEMBER NAME TO PRINT LINE\n         BA&XA R10,SEG$TEST             SEE IF WITHIN RANGE\n         SPACE 2\n*  RECORDS IN AN IEHMOVE UNLOADED DATASET HAVE THE FOLLOWING FORMAT:\n*  FIRST 2 BYTES OF EACH CARD IS A BINARY SEQUENCE NUMBER.\n*  AFTER THAT, THERE IS SOME HEADER INFO (THE FMT1 DSCB + OTHER JUNK),\n*  THEN THE RECORDS IN THIS FORMAT:  LENGTH OF THIS \"RECORD\", 1 BYTE\n*  INDICATOR WITH THE FOLLOWING BIT MEANINGS:\n*    X'80' -> 3 BYTE TTR FOLLOWS INDICATOR BYTE\n*    X'40' -> UNLOADED DS IS PDS\n*    X'20' -> RECORD IS PART OF A MEMBER\n*    X'10' -> RECORD IS A NOTE LIST\n*    X'08' -> RECORD IS A DIRECTORY ENTRY\n*    X'04' -> RECORD IS A DUMMY RECORD\n*  THIS INFORMATION IS IN THE SOURCE TO MODULE IEHMVSRA\n         SPACE 1\nMV$NXTBL CLI   2(DPTR),X'E0'            DATA RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'D0'            NOTE LIST RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'C8'            DIRECTORY RECORD?\n         BE    MV$MEND                  YES\n         CLI   2(DPTR),X'C4'            DUMMY RECORD?\n         BE    MV$DUMMY                 YES\n         CLI   2(DPTR),X'0A'            END OF DS?\n         BNH   DIR$END                  YES\n*** LOGIC ERROR ***\n         PRTLN2                         PRINT (POSSIBLY) UNFINISHED LIN\n         BA&XA R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$DUMMY MVC   DWD(2),0(DPTR)           COPY LENGTH TO ALIGNED PLACE\n         LH    DLEN,DWD                 LOAD LENGTH OF DUMMY RECORD\n         LA    DPTR,12(DPTR,DLEN)       POINT TO NEXT\n         BA&XA R10,SEG$TEST             MAKE SURE STILL WITHIN RANGE\n         B     MV$LOOP                  DO NEXT MEMBER NAME\n         SPACE 2\nMV$REC   MVC   DWD(2),0(DPTR)           COPY LEN TO ALIGNED PLACE\n         LH    DLEN,DWD                 GET BLOCK LENGTH\n         LA    DPTR,6(DPTR,DLEN)        POINT PAST LEN,E0,TTR,DATA\n         SPACE 2\nMV$SCAN  CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BL    MV$NXTBL                 YES - PROCESS NEXT BLOCK\n         BA&XA R10,SEG$NEXT             SKIP 78 BYTES\n         B     MV$SCAN                  KEEP GOING\n         SPACE 2\nMV$MEND  LA    DPTR,6(,DPTR)            -> MEMBER NAME\n         BA&XA R10,SEG$TEST             WITHIN RANGE?\n         B     MV$LOOP                  GO PRINT NEXT NAME\n         SPACE 2\nSEG$TEST CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BLR   R10                      YES - JUST RETURN\n         SPACE 1\nSEG$NEXT MVC   MV#BUFF1,MV#BUFF2\n         LTR   BLEN,BLEN                ANY LEFT?\n         BP    SEG$MVC                  YES - USE IT\n         BZ    *+8                      NO\n* RAN OFF END OF DATASET\n***      EX    0,*                      *** LOGIC ERROR ***\n         B     DIR$END                  FORGET THAT - IT'S THE END\n         SPACE 1\n         ST    R10,R10SAVE              SAVE RETURN ADDR\n         TAPIO TCCW#DAT,TM=SEG$EOF      READ ANOTHER BLOCK\n         L     R10,R10SAVE              RESTORE RETURN ADDR\n         LA    BPTR,TAPEBUFF            RESET PTR\n         L     BLEN,LASTSIZE       AND LENGTH LEFT            09/84 DBC\n         SPACE 1\nSEG$MVC  SH    BLEN,=H'80'              DECR LENGTH LEFT / THIS BLOCK\n         MVC   MV#BUFF2,2(BPTR)         MOVE A SEGMENT\n         LA    BPTR,80(,BPTR)           -> NEXT SEGMENT\n         SH    DPTR,=H'78'              BACK UP DATA PTR\n         BR    R10                      RETURN TO CALLER\n         SPACE 2\nSEG$EOF  BCTR  BLEN,0                   SET FLAG\n         L     R10,R10SAVE              RESTORE RETURN ADDR\n         OI    TFLAG1,T1@MVEOF          REMEMBER HIT EOF\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nCONVDATE SR    R0,R0                    CLEAR FOR IC\n         IC    R0,0(,R1)                GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  0(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    2(R15),C'0'              FIX SIGN\n         MVC   0(2,R15),1(R15)          MOVE YEAR OVER\n         MVI   2(R15),C'.'              PUT IN THE DOT\n         MVC   DWD(2),1(R1)             MOVE DAY TO ALIGNED PLACE\n         LH    R0,DWD                   GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  3(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    5(R15),C'0'              FIX THE SIGN\n         BR    R10                      RETURN TO CALLER\n         EJECT\nIEBCOPY2 LA    R0,7                     ASSUME MEMBERS\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEMBERS?\n         BNO   *+8                      NOPE - OK\n         LA    R0,5                     NO MEMBERS\n         NEWPAGE  (R0),2                TEST LINE COUNTER\n         SPACE 1\n         BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBCOPY   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+24  FORMAT THE UNIT TYPE\n         SPACE 2\n         BA&XA R10,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\n         TAPIO TCCW#DAT                 IGNORE THE NEXT BLOCK\n         SPACE 2\nIBCPY$LP TAPIO TCCW#DAT                 READ A DIRECTORY BLOCK\n         LH    BLEN,TAPEBUFF+4          GET RDW\n         SH    BLEN,=H'8'               -8 FOR BDR & RDW\n         LA    BPTR,TAPEBUFF+8          INIT BLOCK PTR\n         SPACE 2\nDIR$NEXT LA    DPTR,22(,BPTR)           INIT DIR BLK PTR\n         LH    DLEN,20(,BPTR)           GET LENGTH USED\n         SH    DLEN,=H'2'               LENGTH OF DATA\n         SPACE 2\nDIR$LP   CLC   0(8,DPTR),=8X'FF'        END OF DIRECTORY?\n         BE    DIR$END                  YES - DONE\n         BA&XA R10,MOVE$MEM             MOVE NAME TO PRINT LINE\n         LTR   DLEN,DLEN                ANYTHING LEFT?\n         BP    DIR$LP                   CONTINUE IF MORE LEFT\n         LA    BPTR,256+12+8(,BPTR)     NEXT DIRECTORY BLOCK\n         SH    BLEN,=Y(256+12+8)        DECR LENGTH LEFT\n         BP    DIR$NEXT                 MORE IN THIS TAPE BLOCK\n         B     IBCPY$LP                 GET NEXT BLOCK FROM TAPE\n         SPACE 2\nDIR$END  LA    R0,OUTBUFF2+16           GET START PTR FOR COMPARE\n         CR    R0,PPTR                  ANY ON THIS LINE?\n         BE    STAR$TWO                 NO - DONE\n         PRTLN2                         PRINT PARTIAL LINE\n         B     STAR$TWO                 CONTINUE PROCESSING\n         SPACE 3\nMOVE$MEM MVC   0(8,PPTR),0(DPTR)        MOVE NAME TO PRINT LINE\n         IC    R1,11(,DPTR)             GET USER DATA LENGTH\n         N     R1,=F'31'                STRIP OFF JUNK\n         LA    R1,12(R1,R1)             GET LENGTH OF ENTRY\n         AR    DPTR,R1                  ADVANCE DIR PTR\n         SR    DLEN,R1                  DECR LENGTH LEFT\n         SPACE 1\n         LA    PPTR,10(,PPTR)           NEXT PRINT LINE POSITION\n         CL    PPTR,OB2END              END OF PRINT LINE?\n         BNHR  R10                      NO - RETURN\n         LR    PPTR,R10                 SAVE RETURN ADDR\n         PRTLN2                         PRINT IT\n         LR    R10,PPTR                 RESTORE RETURN ADDR\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         BR    R10                      RETURN TO CALLER\n         EJECT ,                                              09/84 DBC\nIEBUPDT2 LA    R0,7\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?\n         BNO   *+8                      NO\n         LA    R0,5                     YES\n         NEWPAGE  (R0),2\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(27),=C'IS AN IEBUPXXX INPUT STREAM' 6/84 DBC\n         MVC   OUTBUFF2+37(8),IEBUPXXX CORRECT RELOADER NAME  06/84 DBC\n         MVC   OUTBUFF2+58(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > X\n               = SUBORDINATE NAME'                            11/88 SBG\n         BA&XA R10,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\nUPDTE$L1 LA    BLEN,80                  BXLE INCR\n         LA    DPTR,TAPEBUFF            POINT TO START\n         LR    BPTR,DPTR                COPY START ADDR\n         A     BPTR,LASTSIZE       POINT PAST END OF BLOCK    09/84 DBC\n         SR    BPTR,BLEN                BACK UP FOR BXLE\n         SPACE 1\nUPDTE$L2 LR    R1,DPTR                  COPY CARD ADDR\n         BA&XA R10,TEST$UP              IS THIS ONE?\n         B     UPDTE$BX                 NO - SKIP\n         SPACE 1\n         MVC   0(1,PPTR),UPDT#TYP       MOVE A,R,C\n         MVI   1(PPTR),C'-'             SEPARATOR\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   UPDTE$LB                 NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nUPDTE$LB DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME\n         LA    R1,1(,PPTR)\nUPDTE$L3 CLI   0(R1),C','               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         CLI   0(R1),C' '               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         LA    R1,1(,R1)                INCR SCAN PTR\n         B     UPDTE$L3                 CONTINUE\n         SPACE 1\nUPDTE$EM MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR\n         CL    PPTR,OB2END2             PAST END?\n         BNH   UPDTE$BX                 NO - CONTINUE\n         PRTLN2                         PRINT THE MEMBERS\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         SPACE 1\nUPDTE$BX BXLE  DPTR,BLEN,UPDTE$L2       KEEP SCANNING\n         TAPIO TCCW#DAT,TM=UPDT$EOF     GET NEXT BLOCK\n         B     UPDTE$L1                 GO CHECK IT\n         SPACE 2\nUPDT$EOF OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"\n         B     DIR$END                  CLEAN UP\n         EJECT ,                                              07/85 DBC\nCBT2     DS    0H   INSERT CODE TO DISPLAY MEMBERS FOR CBT973.11/88 SBG\n         LA    R0,7                                           11/88 SBG\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?           11/88 SBG\n         BNO   *+8                      NO                    11/88 SBG\n         LA    R0,5                     YES                   11/88 SBG\n         NEWPAGE  (R0),2                                      11/88 SBG\n         BA&XA R10,SET$FULD             SET UP HEADER INFO    11/88 SBG\n         DC    4Y(0)                    FILLER                11/88 SBG\n         MVC   OUTBUFF2+31(27),=C'IS A CBT973 COMPRESSED FILE' 1/88 SBG\n         MVC   OUTBUFF2+58(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > X\n               = SUBORDINATE NAME'                            11/88 SBG\n         BA&XA R10,FMU         'FOLLOWING MEMBERS UNLOADED:'  11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   SAVE REGISTERS USED FOR CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   **************          CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$D00  STM   R1,R5,CBSTOR01           REGS 1 THRU 5         11/88 SBG\n         STM   R8,R10,CBSTOR08          REGS 8 THRU 10        11/88 SBG\n         LA    R5,TAPEBUFF     BEGINNING OF BLOCK PROCESSING. 11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           GET BLOCK SIZE FROM BDW    11/88 SBG\n         ST    R1,CBTBLK1          STORE BLOCK SIZE FOR LATER 11/88 SBG\n         AR    R1,R5               POINT PAST E-O-BLOCK       11/88 SBG\n         ST    R1,CBTAPEND         REMEMBER E-O-BLOCK ADDRESS 11/88 SBG\n         L     R1,CBSTOR1          RESTORE R1.                11/88 SBG\n         LA    R5,4(,R5)                POINT TO RDW          11/88 SBG\n*                              BEGINNING OF RECORD PROCESSING.11/88 SBG\nCBT$D0B  LA    R8,14(,R5)          POINT TO BEGIN OF DATA     11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         ST    R6,CBSTOR06         USE R6 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           STORE RECORD SIZE FROM RDW 07/90 SBG\n*   THIS IS NEVER BIGGER THAN 94 -- LET ALONE 255 ||          11/88 SBG\n         C     R1,=F'94'           LRECL=94 MAX FOR CBT973    07/90 SBG\n         BH    CBT$EOF             BREAK OUT OF LOOP IF BIGGER07/90 SBG\n         S     R1,=F'12'           -12 JUST TO GO PAST DATA   11/88 SBG\n*                                   AND LAST 2 HEADER BITS    11/88 SBG\n         LA    R5,2(,R5)           HALFWAY TO HEADER BITS     11/88 SBG\n         MVI   CBTCLEAR,X'40'      MOVE IN BLANK TO ...       11/88 SBG\n         MVC   CBTCARD,CBTCLEAR       CLEAR 80-BYTE WORKAREA. 11/88 SBG\n         LA    R2,CBTCARD          ADDRESS OF 80-BYTE CARD    11/88 SBG\n         LA    R6,5                5 LOOPS TO EXPAND CARD     11/88 SBG\nCBT$D0C  EQU   *                   EXPAND 16 BYTES AT A TIME  11/88 SBG\n         LA    R4,16               LOOP COUNTER               11/88 SBG\n         LA    R5,2(,R5)           BUMP HEADER BIT POINTER    11/88 SBG\n         ICM   R3,12,0(R5)         2 BYTES MASK BITS TO SLIDE 11/88 SBG\nCBT$D0D  EQU   *                   INNER LOOP TO DO 16 BYTES  11/88 SBG\n         ST    R2,CBSTOR2          TEMP SAVE R2               02/93 RT\n         SLR   R2,R2               CLEAR TARGET REGISTER      11/88 SBG\n         SLDL  R2,1                SLIDE OVER ONE MASK BIT    11/88 SBG\n         LTR   R2,R2               IS BIT 0 OR 1 ?            11/88 SBG\n         L     R2,CBSTOR2          RESTORE R2                 02/93 RT\n         BZ    CBT$D0F             IF 0, NEEDS BLANK TO FILL  11/88 SBG\n         MVC   0(1,R2),0(R8)       MOVE THE NON-BLANK         11/88 SBG\n         LA    R8,1(,R8)           BUMP DATA PTR TO NEXT BYTE 11/88 SBG\nCBT$D0E  EQU   *                   RESTORE THE CARD-IMAGE     11/88 SBG\n         LA    R2,1(,R2)           POINT TO NEXT CARD BYTE    11/88 SBG\n         BCT   R4,CBT$D0D          RESTORE 16-BYTE GROUP      11/88 SBG\n         BCT   R6,CBT$D0C          DO THAT 5 TIMES            11/88 SBG\n         AR    R5,R1               BUMP POINTER TO NEXT RDW.  11/88 SBG\n         LM    R1,R4,CBSTOR01      REGS 1 THRU 4. 5 HAS PTR   11/88 SBG\n         LM    R8,R10,CBSTOR08     REGS 8 THRU 10             11/88 SBG\n*        L     R6,CBSTOR06         RESTORE R6. USED FOR PPTR. 11/89 SBG\n         B     CBT$L2              ONE CARD IS RESTORED, FOR  11/88 SBG\n*                                   PURPOSES OF EXAMINATION.  11/88 SBG\nCBT$D0F  EQU   *                   RTN TO INSERT A BLANK      11/88 SBG\n         MVI   0(R2),X'40'         MOVE BLANK IN TO DECOMPRESS11/88 SBG\n         B     CBT$D0E             CONTINUE RESTORING CARD.   11/88 SBG\n         SPACE 1                                              11/88 SBG\n*   **************   END OF CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*  AT THIS POINT, A CARD-IMAGE OF DATA IS RESTORED INTO       11/88 SBG\n*    THE FIELD, CBTCARD.  WE THEN USE REGULAR IEBUPDTE        11/88 SBG\n*    PROCESSING TO LOOK FOR MEMBER NAMES.                     11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$L2   L     PPTR,CBSTOR06       RESTORE REGISTER PPTR      11/88 SBG\n         LA    R1,CBTCARD          LOAD CARD ADDRESS          11/88 SBG\n         ST    R5,CBSTOR05         SAVE RECD PTR              11/88 SBG\n         BA&XA R10,TEST$UP         IS THIS A MEMBER INDICATOR 11/88 SBG\n         B     CBT$BX              NO - SKIP TO THE NEXT CARD 11/88 SBG\n         L     R5,CBSTOR05         RESTORE RECD PTR           11/88 SBG\n         SPACE 1                                              11/88 SBG\n         MVC   0(1,PPTR),UPDT#TYP    MOVE A,R,C               11/88 SBG\n         MVI   1(PPTR),C'-'             SEPARATOR             11/88 SBG\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   CBT$LB                   NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nCBT$LB   DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME           11/88 SBG\n         LA    R1,1(,PPTR)                                    11/88 SBG\nCBT$L3   CLI   0(R1),C','               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         CLI   0(R1),C' '               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         LA    R1,1(,R1)                INCR SCAN PTR         11/88 SBG\n         B     CBT$L3                   CONTINUE              11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$EM   MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE     11/88 SBG\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR   11/88 SBG\n         CL    PPTR,OB2END2             PAST END?             11/88 SBG\n         BNH   CBT$BX                   NO - CONTINUE         11/88 SBG\n         ST    R5,CBSTOR05              SAVE RECD PTR         11/88 SBG\n         PRTLN2                         PRINT THE MEMBERS     11/88 SBG\n         LA    PPTR,OUTBUFF2+16         RESET PTR             11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$BX   L     R5,CBSTOR05              RESTORE RECD PTR      11/88 SBG\n         C     R5,CBTAPEND              AT END OF BLOCK YET?  11/88 SBG\n         BL    CBT$D0B                  NO. GET NEXT RECORD   11/88 SBG\n*    TRY TO RESTORE REGISTERS THAT MIGHT BE USED ELSEWHERE.   11/88 SBG\n         TAPIO TCCW#DAT,TM=CBT$EOF      GET NEXT BLOCK        11/88 SBG\n         B     CBT$D00                  GO CHECK IT           11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$EOF  OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"         11/88 SBG\n         B     DIR$END                  CLEAN UP              11/88 SBG\n         EJECT ,                                              11/88 SBG\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n*        THE CURRENT TAPE FILE CONTAINS SMPPTFIN SYSMODS.   * 07/85 DBC\n*        SCAN THE FILE TO GET THE NAMES OF THE SYSMODS      * 07/85 DBC\n*        CONTAINED THEREIN, AND DISPLAY THEM.               * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTFS2    LA    R0,7                REQUIRED HEADER SPACE      07/85 DBC\n         TM    PARMFLAG,PF@NOMEM   SCAN FOR \"MEMBERS\"?        07/85 DBC\n         BNO   *+8                 YES, PROCEED               07/85 DBC\n         LA    R0,5                NO, DON'T NEED SO MUCH     07/85 DBC\n         NEWPAGE (R0),2            WIDOW PREVENTION           07/85 DBC\n         SPACE 1                                              07/85 DBC\n         BA&XA R10,SET$FULD        MESSAGE SETUP              07/85 DBC\n         DC    4Y(0)                    FILLER                07/85 DBC\n         MVC   OUTBUFF2+31(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM'\n         MVC   OUTBUFF2+66(43),=C':   A-APAR   F-FUNCTION   P-PTF   U-U*\n               SERMOD'             DEFINITIONS                07/85 DBC\n         BA&XA R10,FMU             DISPLAY THE MESSAGE        07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTF$L1   LA    BLEN,80             BXLE INCRIMENT             07/85 DBC\n         LA    DPTR,TAPEBUFF       BXLE SCANNER               07/85 DBC\n         LR    BPTR,DPTR           SET -                      07/85 DBC\n         AL    BPTR,LASTSIZE        BXLE-                     07/85 DBC\n         SLR   BPTR,BLEN             LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$L2   LR    R1,DPTR             MESSAGE SINK SCANNER       07/85 DBC\n         BA&XA R10,TEST$PT         DOES THE CURRENT CARD NAME 07/85 DBC\n*                                  THE START OF A NEW SYSMOD? 07/85 DBC\n         B     PTF$BX              +0 NO, SKIP                07/85 DBC\n         MVC   0(1,PPTR),PTF#TYPE  +4 YES, GET SYSMOD TYPE    07/85 DBC\n         MVI   1(PPTR),C'-'        FRAME                      07/85 DBC\n         MVC   2(7,PPTR),0(R1)     SYSMOD NAME (ALWAYS SEVEN  07/85 DBC\n*                                  CHARACTERS LONG)           07/85 DBC\n         LA    PPTR,10(,PPTR)      ADVANCE SINK SCANNERR      07/85 DBC\n         CL    PPTR,OB2END2        IS MSG LINE FULL?          07/85 DBC\n         BNH   PTF$BX              NOT YET; GOO LOOP          07/85 DBC\n         PRTLN2 ,                  YES, PRINT THE LINE        07/85 DBC\n         LA    PPTR,OUTBUFF2+16    RESET SINK SCANNER         07/85 DBC\nPTF$BX   BXLE  DPTR,BLEN,PTF$L2    CONTINUE SCANNING THE BLK  07/85 DBC\n         SPACE 1                                              07/85 DBC\n         TAPIO TCCW#DAT,TM=PTF$EOF READ NEXT BLOCK            07/85 DBC\n         B     PTF$L1              LOOP TO SCAN IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$EOF  OI    TFLAG1,T1@MVEOF     EOF; REMEMBER              07/85 DBC\n         B     DIR$END             GO DISPLAY FILE            07/85 DBC\n*                                  DESCRIPTION MESSAGES       07/85 DBC\n         EJECT ,                                              07/85 DBC\nIEBISAM2 BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBISAM   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+4+17-3  CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT SECOND INFO LINE\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nFDR2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(14),=C'WAS DUMPED BY ' SET UP UNLOADER\n         MVC   OUTBUFF2+45(6),UNLOADER            MESSAGE\n         CLC   FDRSAVE,=C'DUMMYDSF'     NORMAL DUMP?\n         BE    *+10                     YES\n*                                       NO  - WARN USER\n         MVC   OUTBUFF2+54(22),=C' (ABSOLUTE TRACK DUMP)'\n         PRTLN2                         PRINT THE HEADER\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    FDR2NODT                 NO\n*                                       YES - CHECK DUMP TYPE\n         CLC   FDRSAVE,=C'DUMMYDSF'     WAS IT A DSF'ABLE DUMP?\n         BNE   FDR2ABS                  NO\n*                                       YES - ISSUE MESSAGE\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING DATA SETS DUMPED:'\n         PRTLN2\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2\nFDR2LOOP CLC   =C'DUMMYDSF',TAPEBUFF+12 IS THIS A DSCB BLOCK?\n         BNE   FDR2VOL                  NO  - TRY FOR VOLSER\n*                                       YES\n         LA    R5,TAPEBUFF+40           POINT TO FIRST DSCB\n         LH    R6,TAPEBUFF+30           GET DSCB COUNT THIS BLOCK\nFDR2DSCB LTR   R6,R6                    MORE DSCB'S TO GO?\n         BNP   FDR2NBLK                 NO  - GET NEXT BLOCK\n*                                       YES\n         CLI   44(R5),C'1'              FORMAT 1 DSCB?\n         BNE   FDR2NDSC                 NO\n*                                       YES\n         CLC   LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    FDR2DSCC                 NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nFDR2DSCC MVC   OUTBUFF2+DSFDSN(44),0(R5)   MOVE IN DSNAME\n         LH    R14,98(,R5)                 GET LAST TRACK USED\n         LA    R14,1(,R14)                 MAKE 1 RELATIVE\n         STH   R14,98(,R5)                 SAVE IT BACK\n         ICALL CONVHALF,R14,R1=98(,R5),R15=OUTBUFF2+DSFTRK\n         ICALL CNVRECFX,R14,R1=84(,R5),R15=OUTBUFF2+DSFRECFM\n         ICALL CONVHALF,R14,R1=88(,R5),R15=OUTBUFF2+DSFLRECL-1\n         ICALL CONVHALF,R14,R1=86(,R5),R15=OUTBUFF2+DSFBLKSZ+1\n         ICALL CNVDSORX,R14,R1=82(,R5),R15=OUTBUFF2+DSFDSORG\n         ICALL CONVDATE,R10,R1=53(,R5),R15=OUTBUFF2+DSFCDATE\n         ICALL CONVDATE,R10,R1=56(,R5),R15=OUTBUFF2+DSFEDATE\n         TM    93(R5),X'40'            RACF DEFINED?\n         BZ    *+10                    NO\n         MVC   OUTBUFF2+DSFSECUR+5(4),=C'RACF'   YES\n         TM    93(R5),X'10'            PASSWORD?\n         BZ    FDR2PRT                 NO\n         MVC   OUTBUFF2+DSFSECUR(4),=C'WPWD'  YES - ASSUME WPWD\n         TM    93(R5),X'04'            READ PSWD REQUIRED?\n         BO    *+8                     NO\n         MVI   OUTBUFF2+DSFSECUR,C'R'  YES\n         TM    93(R5),X'50'            BOTH RACF/PSWD?\n         BNO   FDR2PRT                 NO\n         MVI   OUTBUFF2+DSFSECUR+4,C'/'  YES\nFDR2PRT  PRTLN2                        PRINT THE LINE\nFDR2NDSC LA    R5,148(,R5)             BUMP PAST DSCB/COUNT FIELD\n         S     R6,=F'1'\n         B     FDR2DSCB\nFDR2NBLK TAPIO TCCW#DAT,TM=FDR2EOF     GET NEXT BLOCK\n         B     FDR2LOOP\nFDR2EOF  MVI   OUTBUFF2,C'0'\n         OI    TFLAG1,T1@MVEOF         REMEMBER WE HIT EOF\n       MVC  OUTBUFF2+12(63),=C'0***LISTING TERMINATED. FDR FILE NOT COM$\n               PLETE ON THIS VOLUME***'\n         PRTLN2\nFDR2FAKE MVC   TAPEBUFF+4(4),=X'FFFFFFFF'   FAKE OUT FDR2VOL\nFDR2VOL  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR2VOLA CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR2VOLB                 YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR2VOLA\nFDR2VOLB MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         MVC   OUTBUFF2+28(16),=C'         VOLSER='\n         CLC   UNLOADER(6),FDRDSF       WAS THIS DSF?\n         BE    FDR2VOLM                 YES - NO VOLSER AVAILABLE\n         CLC   =XL4'00',TAPEBUFF+4      DOES DUMP INCLUDE CYL/TRK 0/0?\n         BNE   FDR2VOLM                 NO  - NO VOLSER AVAILABLE\n*                                       YES\n         LA    R1,TAPEBUFF+20           POINT TO FIRST COUNT FIELD\n         LA    R0,TAPEBUFF              POINT TO 2ND TRACK IN BLOCK\n         AH    R0,TAPEBUFF+2\nFDR2VOLC CLC   0(5,R1),=X'0000000003'   POINTING TO REC 3 ON TRK 0?\n         BE    FDR2VOLG                 YES\n         BH    FDR2VOLM                 NO - AND NO VOLSER AVAIL\n         SR    R15,R15\n         IC    R15,5(,R1)               GET KEY LENGTH\n         AH    R15,6(,R1)               ADD IN DATA LENGTH\n         LA    R1,8(R15,R1)             POINT TO NEXT RECORD\n         CR    R1,R0                    PAST TRACK 0?\n         BNL   FDR2VOLM                 YES\n         B     FDR2VOLC                 NO  - KEEP GOING\nFDR2VOLG CLC   8(8,R1),=C'VOL1VOL1'     GOT VOL LABEL?\n         BNE   FDR2VOLM                 NO  - STRANGE\n         MVC   OUTBUFF2+44(6),16(R1)    YES - MOVE IT INTO MSG\n         B     FDR2VOLP\nFDR2VOLM MVC   OUTBUFF2+43(14),=C' NOT AVAILABLE'\nFDR2VOLP PRTLN2\n         B     STAR$TWO\nFDR2ABS  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(63),=C'ABSOLUTE TRACK DETAILS NOT AVAILABLE $\n               IN THIS VERSION OF TAPEMAP'\n         PRTLN2\n         B     FDR2FAKE\nFDR2NODT CLC   =C'DUMMYDSF',TAPEBUFF+12  DSCB BLOCK?\n         BNE   FDR2VOL                   NO  - CHECK FOR VOLSER\n         TAPIO TCCW#DAT,TM=FDR2EOF       YES - CHECK NEXT BLOCK\n         B     FDR2NODT\n         SPACE 3\nSLK2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(16),=C'WAS UNLOADED BY ' SET UP UNLOADER\n         MVC   OUTBUFF2+47(8),UNLOADER            MESSAGE\n         PRTLN2                         PRINT THE HEADER\n         MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         PRTLN2                         PRINT FIRST INFO LINE\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    STAR$TWO                 NO\n*                                       YES\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         PRTLN2\nSLK2LOOP OC    TAPEBUFF(2),TAPEBUFF     IS THIS A HEADER BLOCK?\n         BNZ   SLK2NBLK                 NO  - TRY NEXT BLOCK\n*                                       YES\n         CLC   LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    SLK2MGO                  NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nSLK2MGO  MVC   OUTBUFF2+SLKMEM(10),TAPEBUFF+8   MEMBER NAME\n         MVI   OUTBUFF2+SLKSTAT-1,C'.'          .\n         MVC   OUTBUFF2+SLKSTAT(4),TAPEBUFF+18  STATUS\n         ICALL CONVP2,R14,R1=TAPEBUFF+32,       REVISION               X\n               R15=OUTBUFF2+SLKREV\n         MVC   OUTBUFF2+SLKINFO(8),TAPEBUFF+34  INFO\n         MVC   OUTBUFF2+SLKTYPE(8),TAPEBUFF+42  TYPE\n         ICALL CONVP4,R14,R1=TAPEBUFF+58,       ACTST                  X\n               R15=OUTBUFF2+SLKACTST\n         ICALL CONVP4,R14,R1=TAPEBUFF+62,       DELST                  X\n               R15=OUTBUFF2+SLKDELST\n         ICALL CONVP3,R14,R1=TAPEBUFF+66,       BLOCKS                 X\n               R15=OUTBUFF2+SLKBLKS\n         ICALL CONVMDY,R14,R1=TAPEBUFF+74,      C-DATE                 X\n               R15=OUTBUFF2+SLKCREAT\n         ICALL CONVMDY,R14,R1=TAPEBUFF+122,     U-DATE                 X\n               R15=OUTBUFF2+SLKUPD\n         PRTLN2\nSLK2NBLK TAPIO TCCW#DAT,TM=SLK2EOF         GET NEXT BLOCK\n         B     SLK2LOOP\nSLK2EOF  OI    TFLAG1,T1@MVEOF             SET \"HIT EOF\"\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nMAP2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(49),=C'CONTAINS THE FOLLOWING USER-SUPPLIED $\n               INFORMATION:'\n         PRTLN2                         PRINT THE HEADER INFO\n** USE R5 TO POINT TO INFO TO BE PRINTED,\n** AND R6 TO CONTROL DEBLOCKING LOOP\n         LA    R5,TAPEBUFF+80           SKIP FILE HEADER INFO\n         L     R6,LASTSIZE                                    09/84 DBC\n         SH    R6,=H'80'\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST LINE\n         B     MAPLOOPX                 BRANCH TO MIDDLE OF LOOP\nMAPLOOP  LA    R5,80(,R5)               GET TO NEXT INFO LOGICAL RECORD\n         SH    R6,=H'80'                CHECK FOR END OF BLOCK\nMAPLOOPX BNP   MAPNEXT                  GET NEXT BLOCK IF NECESSARY\nMAPLOOPY MVC   OUTBUFF2+16(72),0(R5)    PRINT 72 CHARS OF INFO\n         PRTLN2\n         B     MAPLOOP                  GET NEXT LOGICAL RECORD\nMAPNEXT  TAPIO TCCW#DAT,TM=MAPEOF       READ NEXT BLOCK\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZ   MAPERR                   NO  - ERROR\n         LA    R5,TAPEBUFF              RESET LOOP REGS\n         L     R6,LASTSIZE                                    09/84 DBC\n         B     MAPLOOPY\nMAPERR   MVC   OUTBUFF2+12(53),=C'*** LISTING TERMINATED, INVALID BLOCK$\n                ENCOUNTERED ***'\n         PRTLN2\n         B     STAR$TWO\nMAPEOF   OI    TFLAG1,T1@MVEOF          REMEMBER EOF FOUND\n****     B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nSTAR$TWO MVC   OUTBUFF2(2),=C'0*'\n         MVC   OUTBUFF2+2(L'OUTBUFF2-2),OUTBUFF2+1\n         PRTLN2\n         TM    TFLAG1,T1@MVEOF          ALREADY HIT EOF?\n         BO    CHKMVEOF                 YES - SEE WHERE TO GO\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    FIND$EOF                 YES - CONTINUE PROCESSING\n         B     NL$LOOP                  SCAN THRU REST OF FILE\n         SPACE 1\nCHKMVEOF NI    TFLAG1,255-T1@MVEOF      RESET FLAG\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    SL$SAVE                  YES - GO READ THE EOF LABELS\n         B     NL$EOF                   NO\n         SPACE 3\nFMU      PRTLN2                         PRINT INFO LINE\nFMU$     TM    PARMFLAG,PF@NOMEM        WANT MEMBER LISTING?\n         BO    STAR$TWO                 NO - DONE\n         MVI   OUTBUFF2,C'0'            SET CC\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2                         PRINT HEADER\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST MEMBER LINE\n         LA    PPTR,OUTBUFF2+16         INIT PRINT LINE PTR\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nSET$FULL MVC   OUTBUFF2+54(17),=C'...  WAS:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+71  CONVERT DSORG\n         SPACE 1\n         MVC   OUTBUFF2+76(6),=C'LRECL='\n         LA    R1,TAPEBUFF\n         AH    R1,6(,R10)               GET LRECL ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+82  CONVERT LRECL\n         BA&XA R14,SLIDE                MOVE IT LEFT\n         SPACE 1\n         MVC   OUTBUFF2+90(6),=C'RECFM='\n         ICALL CNVRECFM,R14,R15=OUTBUFF2+96  CONVERT RECFM\n         SPACE 1\n         MVC   OUTBUFF2+104(8),=C'BLKSIZE='\n         LA    R1,TAPEBUFF\n         AH    R1,4(,R10)               GET BLKSIZE ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+112 CONVERT BLKSIZE\n         BA&XA R14,SLIDE                MOVE IT LEFT\n         SPACE 2\nSET$FULD MVI   OUTBUFF2,C'-'            SET CC\n         MVC   OUTBUFF2+1(17),FL1ID     MOVE IN (TAPE) DSN\n         MVC   OUTBUFF2+19(5),=C'(FILE'\n         MVC   OUTBUFF2+25(4),FL1FILSQ  MOVE IN FILE SEQ#\n         MVC   OUTBUFF2+29(17),=C') WAS UNLOADED BY'\n         B     8(,R10)                  RETURN TO CALLER\n         SPACE 3\nBOOM     STM   R0,R15,BOOMREGS          SAVE ALL REGS\n         MVC   OUTBUFF2(50),=C'0*** TAPEMAP LOGIC ERROR - CONTACT TEC S$\n               UPPORT ***'                                          WBF\n         PRTLN2                         PRINT ERROR MSG\n         TM    PARMFLAG,PF@TEST         ABEND?\n         BNO   STAR$TWO                 NO - IGNORE REST OF FILE\n         SPACE 1\n         CLOSE MF=(E,OPENMFL)           CLOSE SYSPRINT\n         IFP2  N,BOOM2                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)          CLOSE SYSPRNT2\n         SPACE 1\nBOOM2    LA    R14,BOOMREGS             POINT TO REG SAVE AREA\n         EX    0,*                      AND AWAY WE GO\n         EJECT\n***********************************************************************\n*                                                                     *\n*  EXIT THE PROGRAM                                                   *\n*                                                                     *\n***********************************************************************\nLEAVE    DS    0H                                              1/93 RT\n         LR    R1,R13                                          1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         L     R0,GETM                                         1/93 RT\n         FREEMAIN R,A=(1),LV=(0)                               1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         EJECT                                                 1/93 RT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO DO I/O TO TAPE                                       *\n*                                                                     *\n***********************************************************************\nTAPIO    ST    R0,TAPEIOB+16            SET CCW ADDR\n         EXCP  TAPEIOB\n         WAIT  ECB=TAPEECB\n         CLI   TAPEECB,X'7F'            DID IT WORK?\n         BE    TAPIO$OK                 YES - CONTINUE\n         CLI   TAPEECB,X'41'            CHANNEL PROGRAM ERROR?\n         BNE   TIONTMK             NO, NOT TAPEMARK           07/85 DBC\n         CLI   IOBCSW+4,X'0D'      YES, CHEND, DEVEND, UNITEXCPT?\n         BNE   TIONTMK             NO, NOT FILE MARK          07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         INCR TAPEMARK COUNTER      07/85 DBC\n         STH   R0,FILE#SEQ         STORE NEW VALUE            07/85 DBC\n         BR    R10                 RETURN TO CALLER           07/85 DBC\nTIONTMK  DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         ST    R10,LKRTAPIO             SAVE R10 FOR RECURSION      U16\n         CH    LCTR,=H'&LINEPPG'        ANYTHING ON PAGE? U13 11/88 SBG\n         BL    *+8                      YES - CONTINUE              U13\n         NEWPAGE  ,                     PRINT THE TITLE             U13\n         MVC   OUTBUFF(44),=C'-*** TAPE I/O ERROR *** ECB CODE=XX *** C$\n               SW='                                                 U13\n         HEX   OUTBUFF+33,TAPEECB,LEN=1                             U13\n         HEX   OUTBUFF+44,IOBCSW+1,LEN=7                            U13\n         MVC   OUTBUFF+59(24),=C'*** IOBSENSE0,1=XXXX ***'          U13\n         HEX   OUTBUFF+75,TAPEIOB+2,LEN=2                           U13\n         PRTLN OUTBUFF\n         SPACE 1\n**       L     R1,DD#PTR                -> DD SECTION OF TIOT       U13\n**       SH    R1,=H'24'                -> TIOT                     U13\n**       AH    R1,TAPEDCB+40            -> DD ENTRY FOR TAPE        U13\n**       L     R1,16(,R1)               -> UCB                      U13\n         L     R1,TAPEMFL               -> DCB                      U13\n         L     R1,44(,R1)               -> DEB                      U13\n         L     R1,32(,R1)               -> UCB                      U13\n         L     R2,20(,R1)               -> EXTENDED SENSE INFO      U13\n         MVC   OUTBUFF(16),=C' *** SENSE DATA='                     U13\n         HEX   OUTBUFF+16,(00,R2),LEN=4                             U13\n         HEX   OUTBUFF+25,(04,R2),LEN=4                             U13\n         HEX   OUTBUFF+35,(08,R2),LEN=4                             U13\n         HEX   OUTBUFF+44,(12,R2),LEN=4                             U13\n         HEX   OUTBUFF+54,(16,R2),LEN=4                             U13\n         HEX   OUTBUFF+63,(20,R2),LEN=4                             U13\n         PRTLN OUTBUFF                  PRINT THE SENSE DATA        U13\n         SPACE 3\n         NEWPAGE  10                    NEXT PAGE IF NEED ROOM      U15\n         MVC  OUTBUFF(35),=C'0    BITS SET ARE FLAGGED ''*'' BELOW' U15\n         PRTLN OUTBUFF                  PRINT HEADER                U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST ONE      U15\n         SPACE 2\n*  R2 -> SENSE DATA                                                 U15\n         LA    R3,10                    NUMBER OF BYTES             U15\n         L     R4,=A(ERR#LIST)          -> ERROR MESSAGES           U15\n         SPACE 1\nNEXTBYTE LA    R6,OUTBUFF+5             -> LINE POS                 U15\n         LA    R1,X'80'                 MASK BIT                    U15\n         SPACE 1\nTEST$BIT MVC   2(10,R6),0(R4)           MOVE TEXT                   U15\n         EX    R1,BIT$TM                IS THIS BIT SET?            U15\n         BZ    *+8                      NO - SKIP                   U15\n         MVI   0(R6),C'*'               FLAG THIS ONE               U15\n         SPACE 1\n         LA    R4,10(,R4)               -> NEXT MSG                 U15\n         LA    R6,16(,R6)               -> NEXT PRINT LINE POS      U15\n         SRA   R1,1                     MOVE BIT RIGHT              U15\n         BNZ   TEST$BIT                 CONTINUE WITH THIS BYTE     U15\n         PRTLN OUTBUFF                  PRINT DESC OF THIS BYTE     U15\n         LA    R2,1(,R2)                -> NEXT BYTE OF SENSE DATA  U15\n         BCT   R3,NEXTBYTE              CONTINUE IF MORE            U15\n         SPACE 3\n         CLI   WHERE,3                  READING DATA?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         L     R1,TAPEIOB+16            GET CCW ADDR\n         CLI   0(R1),RD                 WAS IT A READ?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         LA    R0,TCCW#FSF              SKIP REST OF DATA...\n         L     R10,LKRTAPIO             RESTORE R10                 U16\n         B     TAPIO                    START AT TOP OF THIS SUBRTN\n         SPACE 2\nBIT$TM   TM    0(R2),*-*                << EXECUTED >>              U15\n         SPACE 3                                              07/85 DBC\nTAPIO$OK LA    R0,TCCW#FSF         WAS THIS A -               07/85 DBC\n         CLM   R0,7,TAPEIOB+17      FORWARD SKIP FILE CMD?    07/85 DBC\n         BNE   TIOSAMFL            NO, STILL IN SAME FILE     07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         GET NEW FILE# -1           07/85 DBC\n         STH   R0,FILE#SEQ         STORE BACK                 07/85 DBC\nTIOSAMFL DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R0,=A(BUFFSIZE)          GET LENGTH REQUESTED  07/85 DBC\n         MVC   DWD+2(2),IOBCSW+6        COPY LENGTH LEFT\n         XC    DWD(2),DWD               CLEAR HIGH 2 BYTES\n         S     R0,DWD                   MINUS LENGTH UNUSED\n         ST    R0,LASTSIZE         EQUALS SIZE READ           09/84 DBC\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BNO   4(,R10)                  NO - SKIP THIS JUNK\n         A     R0,BYTECNT               ADD PREVIOUS BYTE COUNT\n         ST    R0,BYTECNT               SAVE NEW TOTAL\n         L     R1,BLOCKCNT              GET BLOCK COUNT\n         LA    R1,1(,R1)                INCR\n         ST    R1,BLOCKCNT              SAVE NEW COUNT\n         CLC   LASTSIZE+2(2),TAPEBUFF START WITH BLKSIZE?     09/84 DBC\n         BE    *+8                      YES - COULD BE RECFM=V\n         NI    NLFLAGS,255-NL@V         NO - NOT RECFM=V\n         CLC   LASTSIZE,MAXBLKSI        SAME SIZE?\n         BE    4(,R10)                  YES - DONE HERE\n         BH    TAPIO$H                  LAST BLOCK IS BIGGEST\n         TM    NLFLAGS,NL@CHANG         ALREADY CHANGED?\n         BO    TAPIO$NL                 YES - TURN OFF RECFM=F\n         OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         B     4(,R10)                  RETURN\n         SPACE 1\nTAPIO$H  OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         MVC   MAXBLKSI,LASTSIZE        SAVE NEW BIGGEST BLKSIZE\nTAPIO$NL NI    NLFLAGS,255-NL@F         NOT RECFM=F\n         B     4(,R10)                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO HANDLE PRINT OUTPUT                                  *\n*                                                                     *\n***********************************************************************\nNEWPAGE  CR    LCTR,R0                  ENOUGH LINES LEFT?\n         BNLR  R10                      YES - JUST RETURN\n         LA    LCTR,LINESPP-2           RESET LINE COUNTER\n         PRTLN TITLE1\n         TM    TFLAG1,T1@PAGE1          IS THIS FIRST PAGE OF VOL?\n         BNO   NEWPAG$2                 NO - SKIP THIS STUFF.\n         NI    TFLAG1,255-T1@PAGE1      TURN OFF FLAG\n         MVC   TITLE2+1(28),TITLE2      BLANK IT OUT\n         SPACE 1\nNEWPAG$3 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$4                 NO - SKIP\n         TM    TFLAG2,T2@LPARM          IS IT TOO LONG?\n         BO    NEWPAG$4                 YES - SKIP\n         MVC   TITLE2+1(28),PARM#MSG+1  MOVE IN THE PARM FIELD\n         SPACE 1\nNEWPAG$4 PRTLN TITLE2                   PRINT AUTHOR LINE\n         SPACE 1\nNEWPAG$1 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         TM    TFLAG2,T2@LPARM          LONG PARM FIELD?\n         BNO   NEWPAG$5                 NO - ALREADY PRINTED        U15\n         PRTLN PARM#MSG                 PRINT IT\nNEWPAG$5 TM    TFLAG1,T1@PERR           ERROR IN PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         PRTLN PARMERR                  PRINT IT\n         SPACE 1\nNEWPAG$2 LA    R0,DASHES\n         BA&XA R14,PUTPRTLN             SEPARATOR LINE\n         PRTLN COLHEAD1,I\n         PRTLN COLHEAD2,I\n         LA    R0,DASHES\n         BA&XA R14,PUTPRTLN             SEPARATOR LINE\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE THE FIRST FILE U15\n         BCTR  LCTR,0                   ADJUST THE LINE COUNT       U15\n         TM    TFLAG2,T2@RQVOL          WRONG VOLUME MOUNTED?       U15\n         BNOR  R10                      NO - ALL DONE               U15\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG NOW           U15\n         MVI   OUTBUFF,C'-'             TRIPLE SPACE                U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT TOP OF BOX            U15\n         MVC   OUTBUFF+41(50),=C'* ID OF MOUNTED VOLUME DIFFERS FROM ID$\n                REQUESTED *'            MOVE IN MSG                 U15\n         PRTLN OUTBUFF                  PRINT MSG                   U15\n         SH    LCTR,=H'2'               ACCOUNT FOR TRIPLE SPACE    U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT BOTTOM OF BOX         U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST FILE     U15\n         BR    R10                      RETURN\n         SPACE 3\nPRTLN    ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BA&XA R14,PUTPRTLN             WRITE OUTPUT LINE\n         L     R14,PRT#SAVE             RESTORE RETURN ADDR\n         MVC   OUTBUFF,OUTCLEAR         CLEAR OUTPUT LINE\n         BCTR  LCTR,R14                 RETURN IF MORE LINES LEFT\n         ST    R14,R14SAVE              SAVE MY R14\n         ST    R10,R10SAVE              SAVE SOMEONE'S R10\n         NEWPAGE ,                      DO A NEW PAGE\n         L     R14,R14SAVE              RESTORE MY R14\n         L     R10,R10SAVE              RESTORE SOMEONE'S R10\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\nPUTPRTLN L     R1,OPENMFL               GET DCB ADDR\n         PUT   (1),(0)                  WRITE OUTPUT LINE\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n************************************************************* 12/88 SBG\n* A BAL TO NEWPAGE2+4 IS DONE IN SEVERAL PLACES.            * 12/88 SBG\n* THE CONDITION CODE AT THOSE POINTS IS NOT SET AT LABEL    * 12/88 SBG\n* NEWPAGE2, BUT RATHER, JUST ABOVE THOSE BAL INSTRUCTIONS.  * 12/88 SBG\n* IT IS THEREFORE IMPORTANT THAT THE INSTRUCTION JUST BELOW * 12/88 SBG\n* LABEL NEWPAGE2 HAVE THE CORRECT CONDITION SETTINGS.       * 12/88 SBG\n************************************************************* 12/88 SBG\nNEWPAGE2 C     R0,LCTR2                 ENOUGH LINES LEFT?    12/88 SBG\n         BLR   R10                      YES - JUST RETURN     12/88 SBG\n         SPACE 1\n         LA    R0,TITLE1                GET RECORD ADDR\n         BA&XA R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R0,DASHES\n         BA&XA R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R14,LINESPP-3            RESET LINE COUNTER    02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nPRTLN2   ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R1,3                     ASSUME TRIPLE SPACE\n         CLI   OUTBUFF2,C'-'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME DOUBLE SPACE\n         CLI   OUTBUFF2,C'0'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME SINGLE SPACE\n         CLI   OUTBUFF2,C' '            IS IT?\n         BE    P2$OK                    YES\n         MVI   OUTBUFF2,C' '            MAKE A BLANK\n         SPACE 1\nP2$OK    L     R14,LCTR2                DECR LINE COUNT       02/93 RT\n         SR    R14,R1                                         02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         BP    P2$GO                    CONTINUE IF OK\n         NEWPAGE  ,2                    SET NEW PAGE\n         MVI   OUTBUFF2,C'-'            TRIPLE SPACE FIRST LINE     U13\n         L     R14,LCTR2                ACCOUNT FOR IT        02/93 RT\n         SH    R14,=H'3'                                      02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         SPACE 1\nP2$GO    BA&XA R14,PUTPRNT2             WRITE OUTPUT LINE\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OUTPUT LINE\n         L     R14,PRT#SAVE             GET RETURN ADDR\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\nPUTPRNT2 LA    R0,OUTBUFF2              GET RECORD ADDR\n         L     R1,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         PUT   (1),(0)                  WRITE IT OUT\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n         PUSH  PRINT                                                U13\n         PRINT GEN                                                  U13\n         SPACE 1\nPRT$EXIT DCBEXIT  BLKSIZE=3192,BUFNO=1                              U15\n         POP   PRINT                                                U13\n         EJECT\n***********************************************************************\n*                                                                     *\n*    ICALLABLE SUBROUTINES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*  SUBROUTINE TO CONVERT A HALFWORD TO PRINTABLE FORM\nCONVHALF MVC   DWD(2),0(R1)             MOVE FIELD TO AN ALIGNED PLACE\n         LH    R0,DWD                   PICK IT UP\n         CVD   R0,DWD                   CONVERT TO PACKED\n         MVC   1(5,R15),=X'2020202120'  MOVE IN EDIT MASK\n         ED    0(6,R15),DWD+5           DO THE EDIT\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 2-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP2   MVC   1(3,R15),=X'202120'      MOVE EDIT PATTERN TO OUT AREA\n         ED    0(4,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 3-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP3   MVC   1(5,R15),=X'2020202120'  MOVE EDIT PATTERN TO OUT AREA\n         ED    0(6,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 4-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP4   MVC   1(7,R15),=X'20202020202120'  MOVE EDIT PATTERN\n         ED    0(8,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A PACKED DATE FIELD TO PRINTABLE FORM\nCONVMDY  MVC   MDYP(4),=PL4'0'          ZERO MDYP (4-BYTES PACKED)\n         MVC   MDYP(3),0(R1)            GET MMDDYY (PACKED W/O SIGN)\n         UNPK  MDYU(7),MDYP(4)          UNPACK IT\n         MVC   0(2,R15),MDYU            MOVE MM\n         MVI   2(R15),C'/'                   /\n         MVC   3(2,R15),MDYU+2               DD\n         MVI   5(R15),C'/'                   /\n         MVC   6(2,R15),MDYU+4               YY\n         BR    R14                      RETURN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING BLANKS\nSLIDE    CLI   0(R15),C' '              NON-BLANK YET?\n         BNER  R14                      YES - RETURN TO CALLER\n         MVC   0(6,R15),1(R15)          MOVE IT LEFT 1 POS\n         B     SLIDE                    AND CHECK IT AGAIN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING ZEROES\nDEZERO   CLI   0(R1),C'0'               NON-ZERO YET?\n         BNER  R14                      YES - RETURN\n         MVI   0(R1),C' '               MAKE IT A BLANK\n         A     R1,=F'1'                 ADVANCE\n         B     DEZERO                   LOOP\n         SPACE 3\n*  SUBROUTINE TO CONVERT A UNIT TYPE\nCONVUNIT MVC   OUTBUFF2+120(9),=C'UNIT=????'\n         CLI   3(R1),X'0F'              TOO BIG?              03/94 SBG\n         BHR   R10                      YES - RETURN\n         IC    R14,3(,R1)               ELSE GET BYTE\n         N     R14,=F'255'              ISOLATE IT\n         BZR   R10                      INVALID IF ZERO\n         BCTR  R14,0                    -1 BECAUSE NO ZERO\n         MH    R14,=H'6'                LENGTH OF A TABLE ENTRY\n         LA    R15,=C'2311  2301  2303  2302  2321  2305-12305-22314  3$\n               330  3340  3350  3375  3330-13380  3390  '     03/94 SBG\n         LA    R14,0(R14,R15)           POINT TO CORRECT ENTRY\n         MVC   OUTBUFF2+125(6),0(R14)   MOVE DEVTYPE TO LINE\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A DSORG\nCNVDSORG LA    R1,TAPEBUFF\n         AH    R1,0(,R10)               GET DSORG ADDR\n         SPACE 1\nCNVDSORX TM    0(R1),X'01'              DSORG=**U\n         BNO   *+8                      NO - SKIP\n         MVI   2(R15),C'U'\n         SPACE 1\n         MVC   0(2,R15),=C'PO'          ASSUME DSORG=PO\n         TM    0(R1),X'02'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'DA'          ASSUME DSORG=DA\n         TM    0(R1),X'20'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'PS'          ASSUME DSORG=PS\n         TM    0(R1),X'40'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'IS'          ASSUME DSORG=IS\n         TM    0(R1),X'80'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'VSAM'        ASSUME VSAM\n         CLC   0(2,R1),=X'0008'         IS IT?\n         BER   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'**  '        NONE OF THE ABOVE???\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A RECFM\nCNVRECFM LA    R1,TAPEBUFF\n         AH    R1,2(,R10)               GET RECFM ADDR\n         SPACE 1\nCNVRECFX TM    0(R1),X'C0'              RECFM=U?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'U'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'80'              RECFM=F?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'F'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'40'              RECFM=V?\n         BNO   *+8                      NO - TRY NEXT\n         MVI   0(R15),C'V'\n         SPACE 1\nRECFM$2  LA    R15,1(,R15)\n         TM    0(R1),X'10'              BLOCKED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'B'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'08'              SPANNED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'S'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'20'              TRK OVFL?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'T'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'02'              RECFM=A?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'A'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'01'              RECFM=M?\n         BNOR  R14                      NO - RETURN TO CALLER\n         MVI   0(R15),C'M'\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO COMPUTE TAPEFEET\nTAPEFEET XR    R0,R0\n         D     R0,=F'1200'              GET LENGTH IN FEET\n         CH    R0,=H'600'               ROUND UP?\n         BL    *+8                      NO\n         A     R1,=F'1'                 ROUND UP.\n         CVD   R1,DWD\n         MVC   1(5,R15),=X'2020202120'\n         ED    0(6,R15),DWD+5\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO FIND A TIOT ENTRY\nTIOTSCAN L     R1,DD#PTR                -> DD SECTION\n         XR    R0,R0                    CLEAR FOR IC\n         BA&XA R14,*+6                  SET LOOP ADDR & SKIP\n         SPACE 1\n         AR    R1,R0                    POINT TO NEXT ENTRY\n         IC    R0,0(,R1)                GET LENGTH OF THIS ENTRY\n         LTR   R0,R0                    END OF TIOT?\n         BZR   R10                      YES - \"NOT FOUND\" RETURN\n         CLC   4(8,R1),0(R15)           THIS IT?\n         BNER  R14                      NO - LOOP\n         CLC   =F'0',16(R1)             DD DUMMY? (LIKE MSM?)\n         BNE   4(,R10)                  NO - RETURN (FOUND)\n         BR    R10                      SAY NOT FOUND\n         EJECT\n         LTORG ,\n         SPACE 6\n*  REGISTER EQUATES                                            1/93 RT\nR0       EQU   0                                               1/93 RT\nR1       EQU   1                                               1/93 RT\nR2       EQU   2                                               1/93 RT\nR3       EQU   3                                               1/93 RT\nR4       EQU   4                                               1/93 RT\nR5       EQU   5                                               1/93 RT\nR6       EQU   6                                               1/93 RT\nR7       EQU   7                                               1/93 RT\nR8       EQU   8                                               1/93 RT\nR9       EQU   9                                               1/93 RT\nR10      EQU   10                                              1/93 RT\nR11      EQU   11                                              1/93 RT\nR12      EQU   12                                              1/93 RT\nR13      EQU   13                                              1/93 RT\nR14      EQU   14                                              1/93 RT\nR15      EQU   15                                              1/93 RT\n*  REGISTERS USED IN ROUTINES TO LIST IEHMOVE & IEBCOPY UNLOADED MEMBRS\nBLEN     EQU   R2      *PAIR*           BLOCK LENGTH LEFT\nBPTR     EQU   R3      *PAIR*           -> CURRENT POS IN BLOCK\nDLEN     EQU   R4                       DIRBLK OR DATA LENGTH LEFT\nDPTR     EQU   R5                       -> CURRENT POS IN BLOCK\nPPTR     EQU   R6                       -> POS IN PRINT LINE\n         SPACE 1\n*  OTHER MISC REGISTERS\nLCTR     EQU   R8                       # OF LINES LEFT THIS PAGE\nLCTR2    DS    F                        STORAGE INSTEAD OF REG 1/93 RT\n         SPACE 1\nCC       EQU   X'40'                    COMMAND CHAINING\nSLI      EQU   X'20'                    SUPPRESS LENGTH INDIC.\n         SPACE 1\nRD       EQU   X'02'                    READ\nBSF      EQU   X'2F'                    BACKSPACE FILE        02/93 RT\nFSF      EQU   X'3F'                    FORWARD SPACE FILE\nRWD      EQU   X'07'                    REWIND\n         SPACE 1\nBUFFSIZE EQU   X'FFFF'             SIZE OF TAPE BUFFER        09/84 DBC\nLINESPP  EQU   &LINEPPG                 LINES PRINTED PER PAGE11/88 SBG\n         SPACE 2\nOPENMFL2 OPEN  (SYSPRNT2,OUTPUT),MF=L\nOPENMFL  OPEN  (SYSPRINT,OUTPUT),MF=L\nOPENMFLI OPEN  SYSIN,MF=L\nTAPEMFL  OPEN  TAPEDCB,MF=L\n         SPACE 1\nEXLST    DC    A(0)\nPRTEXLST DC    X'85',AL3(PRT$EXIT)\n         SPACE 2\nTAPEECB  DC    A(0)\nTAPEIOB  DC    X'42000000'              IOBFLAG1 (SET FOR CMD CHAINING)\n         DC    A(TAPEECB)               ECB ADDR\nIOBCSW   DC    2F'0'                    CSW\n         DC    A(0)                     CHANNEL PGM ADDR\n         DC    A(TAPEDCB),A(0)          DCB ADDR\n         DC    H'1',H'0'                TAPE BLOCK COUNT INCREMENT\n         SPACE 1\nTCCW#BSF CCW   BSF,0,0,1                BACKSPACE FILE\n         SPACE 1\nTCCW#FSF CCW   FSF,0,0,1                FWD SPACE FILE\n         SPACE 1\nTCCW#LBL CCW   RD,*-*,CC,80             READ 80 BYTE BLOCK INTO FL1LABI\n         CCW   RD,*-*,00,80             READ IN NEXT BLOCK INTO FL2LABI\n         SPACE 1\nTCCW#EOV CCW   RD,*-*,00,80             READ 80 BYTE BLOCK INTO FL1LABI\n         SPACE 1\nTCCW#DAT CCW   RD,*-*,SLI,BUFFSIZE      READ DATA BLOCK\n         SPACE 1\nTCCW#RWD CCW   RWD,0,0,1                REWIND THE TAPE\n         SPACE 1\nTCCW#SNS CCW   4,SENSDATA,SLI,24        READ SENSE DATA\n         SPACE 2\nSENSDATA DC    XL24'00'                 SENSE DATA BUFFER\n         SPACE 2\nTFLAG1   DC    X'00'                    FLAGS\nT1@PARM  EQU   X'80'                    HAVE PARM FIELD\nT1@PERR  EQU   X'40'                    ERROR IN PARM FIELD\nT1@PAGE1 EQU   X'20'                    THIS IS FIRST TITLE GROUP\nT1@BADEN EQU   X'10'                    DENSITY ERROR IN TAPE LABEL(S)\nT1@SL    EQU   X'08'                    THIS TAPE IS SL\nT1@ANLZ  EQU   X'04'                    PARM=CHECK OR NL TAPE\nT1@MVEOF EQU   X'02'                    IEHMOVE2 HAS READ TILL EOF\nT1@DATA  EQU   X'01'                    HAVE INPUT DATA\n         SPACE 1\nTFLAG2   DC    X'00'                    MORE\nT2@RQVOL EQU   X'80'                    REQUESTED VOL MISMATCH\nT2@LPARM EQU   X'40'                    PARM FIELD LONGER THAN 21 CHARS\nT2@PRT2  EQU   X'20'                    SECOND PRINT FILE IN USE\n         SPACE 1\nNLFLAGS  DC    X'00'                    NON-LABELLED TAPE FLAGS\nNL@V     EQU   X'80'                    RECFM=V\nNL@F     EQU   X'40'                    RECFM=F\nNL@CHANG EQU   X'20'                    BLOCKSIZE HAS CHANGED\n         SPACE 1\nPARMFLAG DC    X'00'\nPF@TEST  EQU   X'80'                    TEST\nPF@INLIN EQU   X'40'                    INLINE\nPF@NOMEM EQU   X'20'                    NOMEMBERS (NOMEM)\nPF@DEN1  EQU   X'10'                    DEN1\nPF@NATTR EQU   X'08'                    NOATTR\nPF@NONOT EQU   X'04'                    NONOTE\nPF@NOCHK EQU   X'02'                    NOCHECK (NOSCAN)      06/84 DBC\nPF@NL    EQU   X'01'                    NL\n         SPACE 1\nPARMTAB  DC    H'3',C'TEST     ',AL1(PF@TEST)\n         DC    H'5',C'INLINE   ',AL1(PF@INLIN)\n         DC    H'8',C'NOMEMBERS',AL1(PF@NOMEM)\n         DC    H'4',C'NOMEM    ',AL1(PF@NOMEM)\n         DC    H'3',C'DEN1     ',AL1(PF@DEN1)\n         DC    H'5',C'NOATTR   ',AL1(PF@NATTR)\n         DC    H'5',C'NONOTE   ',AL1(PF@NONOT)\n         DC    H'6',C'NOCHECK  ',AL1(PF@NOCHK)                06/84 DBC\n         DC    H'5',C'NOSCAN   ',AL1(PF@NOCHK)                06/84 DBC\nPARMLAST DC    H'1',C'NL       ',AL1(PF@NL)\n         SPACE 2\n         DC    C' '                     FOR CLEARING \"UNLOADER\"\nUNLOADER DC    CL8' '             /   /IEBCOPY/IEHMOVE/IEBISA 06/84 DBC\nC00080   DC    C'00080'\n         ORG   C00080+1\nC00800   DC    C'00800'\nRET#ADDR DC    A(EOD2)                  RETURN ADDR\nDEN#LIST DC    F'200,556,800,1600,6250,37871'  DENSITY VALUES       THO\n         DC    C'200 556 800 16006250N/A '     RIGHT AFTER ABO LINE THO\nTRUE#DEN DC    C'3',AL3(DEN#LIST+8)     REAL DEN;  -> 4 CHAR REAL DEN\nF1       DC    F'1'                                                 U14\nH1       EQU   F1+2                                                 U14\nF15      DC    F'15'                                                U14\nNULLNUMB DC    H'0'                     # OF NULL FILES TO SKIP     U14\nNUMBNULL DC    H'0'                     # OF NULL FILES / THIS TAPE U14\nWHERE    DC    X'00'                    WHERE-WE-ARE FLAG\n         SPACE 1\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 1\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 3                                                    THO\n         POP   PRINT                                                THO\n         SPACE 1                                                    THO\nFDRDVTAB DS    0C                                             09/84 DBC\n         DC    C'A2305-1'                                     09/84 DBC\n         DC    C'C2305-2'                                     09/84 DBC\n         DC    C'M3380  '                                     09/84 DBC\n         DC    C'N3375  '                                     09/84 DBC\n         DC    C'T2314  '                                     09/84 DBC\n         DC    C'U3340-1'          TABLE OF FDR DEVICE TYPES  09/84 DBC\n         DC    C'V3340-2'          AND CODES\n         DC    C'X3330  '\n         DC    C'Y3330-1'\n         DC    C'Z3350  '\nFDRDVEND DC    C' ??????'          FENCE FOR UNKNOWN FDR DEVICES\n         EJECT\nWORKD    DSECT                          RESUME\n         DS    9D                  SAVE AREA                  01/93 RT\nDD#PTR   DS    A                        -> DD SECTION OF TIOT\nLEN#TAPE DS    F                        TAPE LENGTH\n         DS    F                        NL LENGTH\nFILE#SEQ DS    H                        NL FILE SEQ #\n         DS    H                        (UNUSED)\nPRT#SAVE DS    A                        SAVE FOR RETURN ADDR\nR10SAVE  DS    A                        MORE...\nLKRTAPIO DS    A                        ...OF THE...\nR14SAVE  DS    A                        ...SAME\nTU$SAVE2 DS    2A                  USED BY TEST$UP            06/84 DBC\nBOOMREGS DS    16F                      REG SAVE AREA FOR LOGIC ERROR\nMAXBLKSI DS    F                   BIGGEST BLOCK READ SO FAR  09/84 DBC\nLASTSIZE DS    F                   SIZE OF THE LAST BLK READ  09/84 DBC\nBLOCKCNT DS    F                        # OF BLOCKS READ\nBYTECNT  DS    F                        TOTAL # OF BYTES READ\nCBTBLK1  DS    F                   STORE BLOCKSIZ FOR CBT973. 11/88 SBG\nCBTAPEND DS    F                   STORE EO-BLOCK FOR CBT973. 11/88 SBG\nCBSTOR1  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR2  DS    F                   STORE REGISTER FOR CBT973. 01/93 RT\nCBSTOR01 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR02 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR03 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR04 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR05 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR06 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR08 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR09 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR10 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE4  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE15 DS    F                   STORE REGISTER 15          11/88 SBG\nNL#SAVE  DS    4F                  SAVE FOR NL STUFF IF SL    09/84 DBC\nNL#FLAGX DS    X                        SAME\nUPDT#TYP DS    C                        A,R,C FOR UPDTE\nPTF#TYPE DS    C                   A,F,P,U FOR SYSMODS        07/85 DBC\nUPDTXFLG DS    C                   FLAG IF ./ OR >< IN UPDTE  11/88 SBG\nBLANKS   DS    0CL17,CL16' '\nOUTCLEAR DC    C' '                     FOR CLEARING OUTBUFF\nOUTBUFF  DS    CL133\nOUTCLR2  DC    C' '                     FOR CLEARING OUTBUFF2\nOUTBUFF2 DS    CL133,7C                                             U14\nDASHES   DS    CL133\nINBUFF   DS    CL80\nLABELS   DS    3CL80                    FOR VOL,FL1,FL2\nCBTCLEAR DC    C' '                     FOR CLEARING CBT CARD 11/88 SBG\nCBTCARD  DS    CL80              CBT973 CARD-IMAGE EXPANSION  11/88 SBG\nCSTATCLR DC    C' '                     FOR CLEARING CBT DOC  12/88 SBG\nCBTVERS  DS    CL4                      CBT TAPE VERSION #    12/88 SBG\nCBTDATE  DS    CL8                      CBT TAPE RELEASE DATE 12/88 SBG\nMV#ABUF2 DS    A(MV#BUFF2)              ADDR OF SECOND DE-SPANNING BUFF\nMV#BUFF1 DS    CL78                     FIRST DE-SPANNING BUFFER\nMV#BUFF2 DS    CL78                     SECOND DE-SPANNING BUFFER\nPARM#MSG DS    CL110                    FOR PARM\nOB2END   DS    A(OUTBUFF2+110)          ADDR OF END OF OUTBUFF2\nOB2END2  DS    A(OUTBUFF2+110+10)       SAME FOR UPDTE\nDASDRSAV DS    XL24                     FOR HEADER RECORD\nFDRSAVE  DS    CL8                      FOR 'DUMMYDSF' IF PRESENT\nMDYP     DS    PL4'0'                   FOR CONVMDY\nMDYU     DS    CL7                      FOR CONVMDY\n         SPACE 2                                              12/88 SBG\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         DS    0D                                             12/88 SBG\nEMPTYLIT DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\nEMPTYLI2 DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\nREQ#VOL  DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\nFVOL#MSG DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\nPARMERR  DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\nFFS      DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\nCHJOBLIT DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\nVERSLIT1 DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\nVERSLIT2 DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\nCBHLIT   DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n         SPACE 1                                              12/88 SBG\n************************************************************* 12/88 SBG\n*  TABLE OF UNLOADER LITERALS - NOTE, IF YOU ADD TO THIS      12/88 SBG\n*   TABLE, YOU MUST ADD TO THE LIST OF LITERALS TO BE MOVED   12/88 SBG\n*   INTO THIS WORKAREA THAT IS AT THE END OF THIS PROGRAM.    12/88 SBG\n*  PLEASE SEE THE LABEL CALLED \"LITMOVES\" -  THIS WAS BECAUSE 12/88 SBG\n*   THE 3RD BASE REGISTER WAS EXCEEDED, AND I MOVED SOME OF   12/88 SBG\n*   THE LITERALS INTO THE WORKAREA DSECT.  THEY THEREFORE     12/88 SBG\n*   HAVE TO BE INITIALIZED IN THE GETMAINED WORKAREA STORAGE. 12/88 SBG\n************************************************************* 12/88 SBG\nIEBCOPY  DC    C'IEBCOPY'\nIEHMOVE  DC    C'IEHMOVE'\nIEBISAM  DC    C'IEBISAM'\nIEHDASDR DC    C'IEHDASDR'\nIEBUPXXX DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       06/84 DBC\nFDR      DC    C'FDR   '\nFDRDSF   DC    C'FDRDSF'\nFDRXXX   DC    C'FDR???'\nSLICKMNG DC    C'SLICKMNG'                                    09/84 DBC\nCTAPEMAP DC    C'TAPEMAP'\nSMPPTFIN DC    C'SMPPTFIN'                                    07/85 DBC\nCBT973   DC    C'CBT973'                                      11/88 SBG\nCBTEMPTY DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 11/88 SBG\nCBHEADER DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\nUTY3420C DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89^SBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\nCDOCSIZE DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\nINCORLAB DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         SPACE 2\nDWD      DS    D\nJFCB     DS    XL176                    DWD ALIGNED\n************************************************************* 12/88 SBG\n*  WE CONTINUE TO ADDRESS THE PROBLEM OF EXCEEDING 3 BASE   * 12/88 SBG\n*  REGISTERS.  PREVIOUSLY, THE TAPE BUFFER WAS ALIGNED ON   * 12/88 SBG\n*  HALF A PAGE.  WE WANT TO HAVE MOST OF THIS HALF A PAGE   * 12/88 SBG\n*  FOR COPYING LITERALS SO THEY CAN BE ADDRESSABLE FROM THE * 12/88 SBG\n*  WORKAREA'S BASE REGISTER.  WE HOPE THE ALIGNMENT OF      * 12/88 SBG\n*  WORKD+2048 WASN'T REALLY NECESSARY.                      * 12/88 SBG\n*-----------------------------------------------------------* 12/88 SBG\n*  HOWEVER, IF TAPEBUFF+NNN HAS BEEN SPECIFIED IN ANY       * 12/88 SBG\n*  INSTRUCTION, THE SUM OF THE DISPLACEMENT OF TAPEBUFF     * 12/88 SBG\n*  AND NNN MUST NOT EXCEED 4095.  THE LARGEST SUCH          * 12/88 SBG\n*  DISPLACEMENT WE HAVE FOUND AT THIS WRITING IS 282.       * 12/88 SBG\n*  THAT IS TO SAY, TAPEBUFF+282 IS THE FARTHEST OUT         * 12/88 SBG\n*  ADDRESS THAT THE CURRENT INCARNATION OF THIS PROGRAM     * 12/88 SBG\n*  HAS TO GET TO, FROM REGISTER 13.  THEREFORE, I HAVE      * 12/88 SBG\n*  SUBTRACTED 300 FROM 4096 AND SET TAPEBUFF AT WORKD+3796. * 12/88 SBG\n*  PLEASE REMEMBER THAT AT LEAST DOUBLEWORD ALIGNMENT       * 12/88 SBG\n*  SHOULD BE OBSERVED.                                      * 12/88 SBG\n************************************************************* 12/88 SBG\n         ORG   WORKD+3796   ALIGN THE BUFFER NOT SO REAL WELL 12/88 SBG\nTAPEBUFF DS    CL(BUFFSIZE)             TAPE INPUT DATA BUFFER\nWORKLEN  EQU   *-WORKD\n         SPACE 2\n         ORG   OUTBUFF+1\n#UNLOAD  DS    CL8,1C                                         06/84 DBC\n#FILE    DS    CL4,2C                                         06/84 DBC\n#DSN     DS    CL17,2C\n#PSWD    DS    CL4,2C                                         06/84 DBC\n#CDATE   DS    CL6,2C\n#EDATE   DS    CL6,2C                                         06/84 DBC\n#INFOSRC DS    CL6,2C                                         06/84 DBC\n#RECFM   DS    CL5,2C                                         06/84 DBC\n#LRECL   DS    CL5,2C\n#BLKSIZE DS    CL5,2C\n#BLKCNT  DS    CL6,2C\n#DEN     DS    CL4,1C                                         06/84 DBC\n#TRTCH   DS    CL3,2C                                         06/84 DBC\n#LENGTH  DS    CL4,2C                                         06/84 DBC\n#CUMLEN  DS    CL4,2C                                         06/84 DBC\n#CREATOR DS    CL17                                           06/84 DBC\n         SPACE 2\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 2\n         ORG   LABELS\n         SPACE 2\n         VOL   DSECT=NO\n         FL1   DSECT=NO\n         FL2   DSECT=NO\n         POP   PRINT\n         EJECT\nTAPEMAP  CSECT                          RESUME\n         SPACE 2\n         XYZZY NOGEN               SUPPRESS EXPANSION         06/84 DBC\n         SPACE 1                                              06/84 DBC\nTAPEDCB  DCB   DSORG=PS,MACRF=E,DDNAME=SYSUT1,DEVD=TA,EXLST=EXLST,     $\n               IOBAD=TAPEIOB\n         XYZZY GEN                                            09/84 DBC\n         SPACE 2\nTITLE1   DC    C'1VOL=                             TAPE ANALYSIS PROGRA$\n               M   (T A P E M A P)  V2.1          DAYDAYDAY  MON DD, 19$\n               YY  (YY.DDD)  HH:MM:SS'\nTTL1TIME EQU   *-9\nTTL1DATE EQU   TTL1TIME-23\nTTL1DAY  EQU   TTL1DATE-11\n         SPACE 2\nTITLE2   DC    C'                                                      $\n                                                                       $\n                                    '\n         SPACE 2\nDSFHDING DS    CL133\n         ORG   DSFHDING\n         DC    CL17'0'\nDSFDSN   EQU   *-DSFHDING\n         DC    CL44'-------------------DSNAME-------------------',C'-'\nDSFTRK   EQU   *-DSFHDING\n         DC    CL9'TRKS USED',C'-'                     TRACKS USED\nDSFRECFM EQU   *-DSFHDING\n         DC    CL5'RECFM',C'-'                         RECFM\nDSFLRECL EQU   *-DSFHDING\n         DC    CL5'LRECL',C'-'                         LRECL\nDSFBLKSZ EQU   *-DSFHDING\n         DC    CL7'BLKSIZE',C'-'                       BLKSIZE\nDSFDSORG EQU   *-DSFHDING\n         DC    CL5'DSORG',C'-'                         DSORG\nDSFCDATE EQU   *-DSFHDING\n         DC    CL7'CREATED',C'-'                       C-DATE\nDSFEDATE EQU   *-DSFHDING\n         DC    CL7'EXPIRES',C'-'                       E-DATE\nDSFSECUR EQU   *-DSFHDING\n         DC    CL8'SECURITY',C'-'                      SECURITY\n         ORG   ,\nSLKHDING DS    CL133\n         ORG   SLKHDING\n         DC    CL17'0'\nSLKMEM   EQU   *-SLKHDING\n         DC    CL10'NAME------.'          MEMBER\nSLKSTAT  EQU   *-SLKHDING\n         DC    CL4'STAT',C'-'             STATUS\nSLKREV   EQU   *-SLKHDING-1\n         DC    CL3'REV',C'-'              REVISION\nSLKINFO  EQU   *-SLKHDING\n         DC    CL10'---INFO---',C'-'      INFO\nSLKTYPE  EQU   *-SLKHDING\n         DC    CL8'--TYPE--',C'-'         TYPE\nSLKACTST EQU   *-SLKHDING-1\n         DC    CL7'--ACTST',C'-'          ACTST\nSLKDELST EQU   *-SLKHDING-1\n         DC    CL7'--DELST',C'-'          DELST\nSLKBLKS  EQU   *-SLKHDING-1\n         DC    CL5'-BLKS',C'-'            BLOCKS\nSLKCREAT EQU   *-SLKHDING\n         DC    CL8'-CREATED',C'-'         CREATE DATE\nSLKUPD   EQU   *-SLKHDING\n         DC    CL8'-UPDATED'              LAST UPDATE DATE\n         ORG   ,\n         SPACE 2\n         XYZZY NOGEN                                          09/84 DBC\n         SPACE 1                                              09/84 DBC\nSYSIN    DCB  DSORG=PS,MACRF=GM,DDNAME=SYSIN,LRECL=80,EODAD=EOD,BUFNO=1\n         SPACE 2\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 2\nSYSPRNT2 DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRNT2,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 1                                              06/84 DBC\n         XYZZY GEN                 RESTORE EXPANSIONS         06/84 DBC\nCOLHEAD1 DC    CL133' '            1ST TITLE LINE             06/84 DBC\n         ORG   COLHEAD1+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'RELOAD',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'FILE',C'  '     #FILE                      06/84 DBC\n         DC    CL17' ',C'  '       #DSN                       06/84 DBC\n         DC    CL4'PSWD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6' ',C'  '        #CDATE                     06/84 DBC\n         DC    CL6' ',C'  '        #EDATE                     06/84 DBC\n         DC    CL6' INFO',C'  '    #INFOSRC                   06/84 DBC\n         DC    CL5' ',C'  '        #RECFM                     06/84 DBC\n         DC    CL5' ',C'  '        #LRECL                     06/84 DBC\n         DC    CL5'BLOCK',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' BLOCK',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3' ',C'  '        #DEN                       06/84 DBC\n         DC    CL3' ',C'  '        #TRTCH                     06/84 DBC\n         DC    CL4'LNTH',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'TOTL',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'CREATOR'          #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\nCOLHEAD2 DC    CL133' '            2ND TITLE LINE             06/84 DBC\n         ORG   COLHEAD2+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'FORMAT',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'SEQ#',C'  '     #FILE                      06/84 DBC\n         DC    CL17'DATASET NAME',C'  ' #DSN                  06/84 DBC\n         DC    CL4'REQD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6'C-DATE',C'  '   #CDATE                     06/84 DBC\n         DC    CL6'E-DATE',C'  '   #EDATE                     06/84 DBC\n         DC    CL6'SOURCE',C'  '   #INFOSRC                   06/84 DBC\n         DC    CL5'RECFM',C'  '    #RECFM                     06/84 DBC\n         DC    CL5'LRECL',C'  '    #LRECL                     06/84 DBC\n         DC    CL5' SIZE',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' COUNT',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3'DEN',C'  '      #DEN                       06/84 DBC\n         DC    CL3'TRT',C'  '      #TRTCH                     06/84 DBC\n         DC    CL4'(FT)',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'LNTH',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'JOBNAME/STEPNAME' #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\n         EJECT\nERR#LIST DC    0F'0'                                                U15\n*                                                                   U15\n*  ERROR MSGS FOR EACH SENSE BIT FOR 3420 TAPE DRIVES               U15\n*                                                                   U15\n         SPACE 1\n*** BYTE 0                       BIT                                U15\n         DC    C'CMD REJ   '      0     80                          U15\n         DC    C'INT REQ   '      1     40                          U15\n         DC    C'BUS OUT CK'      2     20                          U15\n         DC    C'EQC CHK   '      3     10                          U15\n         DC    C'DATA CHK  '      4     08                          U15\n         DC    C'OVERRUN   '      5     04                          U15\n         DC    C'WORD CNT 0'      6     02                          U15\n         DC    C'DATA CNVTR'      7     01                          U15\n         SPACE 1\n*** BYTE 1                       BIT                                U15\n         DC    C'NOISE     '      0     80                          U15\n         DC    C'SEL+RDY+NB'      1     40                          U15\n         DC    C'NOT READY '      2     20                          U15\n         DC    C'7 TRK FEAT'      3     10                          U15\n         DC    C'@ LOAD PT '      4     08                          U15\n         DC    C'WRITE STAT'      5     04                          U15\n         DC    C'FILE PROT '      6     02                          U15\n         DC    C'NOT CAPABL'      7     01                          U15\n         SPACE 1\n*** BYTE 2                       BIT                                U15\n         DC    C'TIE BIT 0 '      0     80                          U15\n         DC    C'TIE BIT 1 '      1     40                          U15\n         DC    C'TIE BIT 2 '      2     20                          U15\n         DC    C'TIE BIT 3 '      3     10                          U15\n         DC    C'TIE BIT 4 '      4     08                          U15\n         DC    C'TIE BIT 5 '      5     04                          U15\n         DC    C'TIE BIT 6 '      6     02                          U15\n         DC    C'TIE BIT 7 '      7     01                          U15\n         SPACE 1\n*** BYTE 3                       BIT                                U15\n         DC    C'R/W VRC   '      0     80                          U15\n         DC    C'MT/LRC    '      1     40                          U15\n         DC    C'SKEW      '      2     20                          U15\n         DC    C'END DC/CRC'      3     10                          U15\n         DC    C'ENV/ECC   '      4     08                          U15\n         DC    C'1600 BPI  '      5     04                          U15\n         DC    C'BACKWARD  '      6     02                          U15\n         DC    C'C/P COMPAR'      7     01                          U15\n         SPACE 1\n*** BYTE 4                       BIT                                U15\n         DC    C'MP H E    '      0     80                          U15\n         DC    C'DROP READY'      1     40                          U15\n         DC    C'TAPE INDIC'      2     20                          U15\n         DC    C'W T VRC   '      3     10                          U15\n         DC    C'MICROPGM  '      4     08                          U15\n         DC    C'LWR       '      5     04                          U15\n         DC    C'UNIT CHECK'      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 5                       BIT                                U15\n         DC    C'NEW SUBSYS'      0     80                          U15\n         DC    C'NEW SUBSYS'      1     40                          U15\n         DC    C'WTM CHECK '      2     20                          U15\n         DC    C'ID BURST  '      3     10                          U15\n         DC    C'START READ'      4     08                          U15\n         DC    C'PART''L REC'     5     04                          U15\n         DC    C'POSTAMBLE '      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 6                       BIT                                U15\n         DC    C'7 TRK UNIT'      0     80                          U15\n         DC    C'WRT CURR  '      1     40                          U15\n         DC    C'DUAL DEN  '      2     20                          U15\n         DC    C'NOT 1600  '      3     10                          U15\n         DC    C'MOD 4,6,8 '      4     08                          U15\n         DC    C'MD 5,6,7,8'      5     04                          U15\n         DC    C'MOD 3,4   '      6     02                          U15\n         DC    C'MD 3,4,7,8'      7     01                          U15\n         SPACE 1\n*** BYTE 7                       BIT                                U15\n         DC    C'LAMP FAIL '      0     80                          U15\n         DC    C'BOTM LEFT '      1     40                          U15\n         DC    C'BOTM RIGHT'      2     20                          U15\n         DC    C'RESET KEY '      3     10                          U15\n         DC    C'DSE       '      4     08                          U15\n         DC    C'ERASE HEAD'      5     04                          U15\n         DC    C'AIR BEARNG'      6     02                          U15\n         DC    C'LOAD FAIL '      7     01                          U15\n         SPACE 1\n*** BYTE 8                       BIT                                U15\n         DC    C'IBG       '      0     80                          U15\n         DC    C'SPARE ?   '      1     40                          U15\n         DC    C'SPARE ?   '      2     20                          U15\n         DC    C'EARLY READ'      3     10                          U15\n         DC    C'CTL BURST '      4     08                          U15\n         DC    C'SLOW RD B '      5     04                          U15\n         DC    C'SLOW RD E '      6     02                          U15\n         DC    C'VELOCITY  '      7     01                          U15\n         SPACE 1\n*** BYTE 9                       BIT                                U15\n         DC    C'6250 CORR '      0     80                          U15\n         DC    C'WRT VEL CH'      1     40                          U15\n         DC    C'CHAN BUFF '      2     20                          U15\n         DC    C'CRC III   '      3     10                          U15\n         DC    C'6250 FEAT '      4     08                          U15\n         DC    C'SPARE ?   '      5     04                          U15\n         DC    C'SPARE ?   '      6     02                          U15\n         DC    C'TCU RSRVD '      7     01                          U15\n         EJECT                                                12/88 SBG\n************************************************************* 12/88 SBG\n*    THE FOLLOWING LITERALS ARE MOVED INTO THE WORKAREA     * 12/88 SBG\n*    DSECT.  THE REASON IS THAT THE 3RD BASE REGISTER HAS   * 12/88 SBG\n*    BEEN EXCEEDED IN THE COURSE OF PROGRAM MODIFICATIONS,  * 12/88 SBG\n*    AND SOME LITERALS WHICH WERE ADDRESSABLE BY THE BASE   * 12/88 SBG\n*    REGISTERS, HAVE NOW BEEN MOVED TO THE WORK AREA DSECT. * 12/88 SBG\n*    THEREFORE, ANY CHANGES TO THAT PART OF THE WORKAREA    * 12/88 SBG\n*    DSECT MUST BE REFLECTED BY CORRESPONDING CHANGES       * 12/88 SBG\n*    HERE.                                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         DS    0D                  ALIGNMENT                  12/88 SBG\nLITMOVES DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\n         DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\n         DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\n         DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\n         DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\n         DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\n         DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\n         DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\n         DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n************************************************************* 12/88 SBG\n         DC    C'IEBCOPY'          UNLOADER NAMES             12/88 SBG\n         DC    C'IEHMOVE'                                     12/88 SBG\n         DC    C'IEBISAM'                                     12/88 SBG\n         DC    C'IEHDASDR'                                    12/88 SBG\n         DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       12/88 SBG\n         DC    C'FDR   '                                      12/88 SBG\n         DC    C'FDRDSF'                                      12/88 SBG\n         DC    C'FDR???'                                      12/88 SBG\n         DC    C'SLICKMNG'                                    12/88 SBG\n         DC    C'TAPEMAP'                                     12/88 SBG\n         DC    C'SMPPTFIN'                                    12/88 SBG\n         DC    C'CBT973'                                      12/88 SBG\n         DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 12/88 SBG\n         DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\n         DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89^SBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\n         DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\n         DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\nLITMVLEN EQU   *-LITMOVES                                     12/88 SBG\n************************************************************* 12/88 SBG\n*    END OF LITERAL MOVES.                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         EJECT                                                12/88 SBG\n*************************************************************  1/93 RT\n*    TODAY CSECT                                            *  1/93 RT\n*                                                           *  1/93 RT\n*   PARAMETERS:                                             *  1/93 RT\n*     DATE FIELD (LEN 22)                                   *  1/93 RT\n*     DAY FIELD (LEN 9)                                     *  1/93 RT\n*     TIME FIELD (LEN 9)                                    *  1/93 RT\n*                                                           *  1/93 RT\n*                                                           *  1/93 RT\n*************************************************************  1/93 RT\nTODAY    CSECT                                                 1/93 RT\n         DROP  R12,R11,R7,R9,R13                               1/93 RT\n         USING *,R15                                           1/93 RT\n         B     TODARND                                         1/93 RT\n         DC    AL1(25)                                         1/93 RT\n         DC    CL8'TODAY'                                      1/93 RT\n         DC    CL8'&SYSDATE'                                   1/93 RT\n         DC    CL8'&SYSTIME'                                   1/93 RT\nTODARND  DS    0H                                              1/93 RT\n         SAVE  (14,12)                                         1/93 RT\n         DROP  R15                                             1/93 RT\n         USING TODAY,R4                                        1/93 RT\n         LM    R5,R7,0(R1)          LOAD THE PARAMETER PTRS    1/93 RT\n         LR    R4,R15                                          1/93 RT\n         LA    R1,TODSAVE                                      1/93 RT\n         ST    R1,8(,R13)           FWD SAVE-AREA CHAIN PTR    1/93 RT\n         ST    R13,4(,R1)           BKWD SAVE-AREA CHAIN PTR   1/93 RT\n         LR    R13,R1               NEW SAVE-AREA ADDR         1/93 RT\n         TIME  DEC                      GET TIME\n         ST    R0,TODDWT                PUT TIME INTO WORK AREA\n         ST    R1,TODPDAT               PUT DATE INTO WORK AREA\n         MVC   TOD1DDT(40),TOD1DDT-1    BLANK THE DATE, DAY, TIME\n         UNPK  TOD1DATE+16(5),TODPDAT+1(3) UNPK THE DATE\n         OI    TOD1DATE+20,C'0'         FIX THE SIGN\n         MVC   TOD1DATE+8(2),=C'19'     DEFAULT YEAR TO 19XX\n         CLI   TODPDAT,X'00'            TWENTIETH CENTURY?\n         BE    TOD19XX                   YES\n         MVC   TOD1DATE+8(2),=C'20'      NO, MUST BE 20XX\nTOD19XX  MVC   TOD1DATE+15(2),TOD1DATE+16   MOVE THE YEAR OVER\n         MVI   TOD1DATE+17,C'.'         PUT IN THE DOT\n         MVI   TOD1DATE+6,C','          PUT IN THE COMMA\n         MVI   TOD1DATE+21,C')'         PUT IN THE PARENTHESES\n         MVI   TOD1DATE+14,C'('\n         TM    TODPDAT+1,X'01'          POSSIBLE LEAP YEAR?\n         BO    TODNOLP                   NO (ODD YEAR) - NOT LEAP\n         TM    TODPDAT+1,X'12'          DIVISIBLE BY 4?\n         BM    TODNOLP                   NO - NOT LEAP YEAR\n         MVI   MONTHS+7,29              FEB HAS 29 DAYS THIS YEAR\nTODNOLP  MVC   TODDWD+6(2),TODPDAT+2    COPY DDDF\n         XC    TODDWD(6),TODDWD         CLEAR BEGINNING\n         CVB   R0,TODDWD                GET DAY OF YEAR IN BINARY\n         LA    R15,MONTHS               POINT TO TABLE\nTODFINMO SH    R0,0(,R15)               SUB NUMBER OF DAYS THIS MONTH\n         BNP   TODGOTMO                 HAVE MONTH\n         LA    R15,6(,R15)              NEXT TABLE ENTRY\n         B     TODFINMO                 KEEP LOOKING\nTODGOTMO MVC   TOD1DATE(3),2(R15)       MOVE NAME OF MONTH\n         AH    R0,0(,R15)               GET BACK CORRECT RESIDUAL\n         CVD   R0,TODDWD\n         UNPK  TOD1DATE+4(2),TODDWD+6(2)  DAY OF MONTH\n         OI    TOD1DATE+5,C'0'          FIX SIGN\n         MVC   TOD1DATE+10(2),TOD1DATE+15 MOVE IN YEAR\n         ST    R0,TODDWT     SAVE THE DAY\n         OI    TODDWT+3,X'0F'           FIX THE SIGN\n         MVC   TOD1TIME(9),=X'4021207A20207A2020'    ' DD:DD:DD'\n         ED    TOD1TIME(9),TODDWT\n         ZAP   TODDWD,TODPDAT  STASH DATE                       GP06316\n         CLI   TODDWD+4,X'19'    DID USER SUPPLY A CENTURY?     GP06316\n         BL    CENTGONE      NO                                 GP06316\n         SP    TODDWD+4(4),=P'1900000'  NORMALIZE TO BASE 1900  GP06316\nCENTGONE CVB   R3,TODDWD     CONVERT DATE TO BINARY             GP06316\n         SLR   R2,R2         CLEAR FOR DIVIDE                   GP06316\n         D     R2,=F'1000'   PLACE DAYS IN R2, YEAR IN R3       GP06316\n         LA    R3,6(,R3)     ADD A FINAGLE FACTOR               GP06316\n         LA    R1,1(,R3)     YEAR + SECOND FINAGLE FACTOR       GP06316\n         SRA   R1,2          # LEAP YEARS SINCE 1900            GP06316\n         MH    R3,=H'365'    DAYS SINCE 1900                    GP06316\n         AR    R3,R1         INCLUDING LEAP DAYS                GP06316\n         AR    R3,R2         PLUS DAYS IN THIS YEAR             GP06316\n         LA    R3,6(,R3)     THIRD FINAGLE FACTOR               GP06316\n         SLR   R2,R2         CLEAR FOR DIVIDE                   GP06316\n         D     R2,=F'7'      GET DAY OF WEEK IN R2              GP06316\n         MH    R2,=Y(L'DAYS) MAKE OFFSET IN TABLE               GP06316\n         LA    R3,DAYS(R2)   POINT TO TEXT                      GP06316\n         MVC   TOD1DAY(L'DAYS),0(R3)   DAY TO OUTPUT LOCATION   GP06316\n         MVC   0(22,R5),TOD1DATE                               1/93 RT\n         MVC   0(9,R6),TOD1DAY                                 1/93 RT\n         MVC   0(9,R7),TOD1TIME                                1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         SPACE 1\nDAYS     DAYS  LEFT                                                 THO\n         SPACE 1                                                    THO\nMONTHS   MONTHS                                                     THO\n         LTORG\n         DROP  R4\nTODSAVE  DS    9D\nTODDWT   DS    D                    PACKED TIME\nTODDWD   DS    D                    PACKED DATE WORK FIELD\nTODPDAT  DS    F                    PACKED DATE\n         DC    CL8' '\nTOD1DDT  DS    0CL40          DATE, DAY, TIME TAKEN TOGETHER\nTOD1DATE DC    CL22' '\nTOD1DAY  DC    CL9' '\nTOD1TIME DC    CL9' '\n         DC    CL8' '\n         EJECT\n         XYZZY NOGEN\n         DCBD  DSORG=PS,DEVD=DA                                     THO\nUCB      DSECT                                                      THO\n         IEFUCBOB                                                   THO\n         AIF   ('&DEBX' EQ 'YES').NEWDEB1                           SBG\n         IEZDEB                                                     THO\n         AGO   .OLDDEB1                                             SBG\n.NEWDEB1 ANOP                                                       SBG\n         IECTDEBX                                                   SBG\n.OLDDEB1 ANOP                                                       SBG\n         END   TAPEMAP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPEMP38": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x01O\\x01\\x07\\x01O\\x08@\\x0f\\xa8\\x0f\\xa8\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-01-14T00:00:00", "modifydate": "2007-01-14T08:40:00", "lines": 4008, "newlines": 4008, "modlines": 0, "user": "GERHARD"}, "text": "//SPGSRSI JOB (TS,2322),'TECH.SUPP-MON SANTOS',CLASS=A,NOTIFY=SPGSRS,\n//        MSGLEVEL=(1,1),MSGCLASS=A\n//*\n//CLEANUP EXEC PGM=IEFBR14\n//SYSUT2   DD DSN=SPGSRS.TAPEMAP.ASM,\n//            DISP=(MOD,DELETE),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(0))\n//*\n//ADDMEM  EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSUT2   DD DSN=SPGSRS.TAPEMAP.ASM,\n//            DISP=(NEW,CATLG),\n//            DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=19040),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(16,2,25))\n//SYSPRINT DD SYSOUT=*\n@/ ADD NAME=$$MAINT\n* CORRECTED THE DAY OF WEEK CODE.                             GYP 06/11\n*----------------------------------------------------------------------\n* ELIMINATED THE X'00' IN THE REPORT HEADERS, BY BLANKING OUT SBG 06/01\n* THE DATE, DAY AND TIME WORK FIELDS IN THE TODAY CSECT.      SBG 06/01\n*------------------------------------------------------------  2/00 JCH\n* CLUDGED DAY OF WEEK 2 DAYS LATER FOR Y2K, IN TODAY CSECT.   SBG 03/00\n*------------------------------------------------------------  2/00 JCH\n* CHANGES BY JOHN C HALLGREN  02/10/00                         2/00 JCH\n*                                                              2/00 JCH\n* SET HDR2 DENSITY TO ACTUAL IF NO HDR2 FOUND (DOS SL, RS6000) 2/00 JCH\n*------------------------------------------------------------  3/94 SBG\n* CHANGES BY SAM GOLOB  3/94:                                  3/94 SBG\n*                                                              3/94 SBG\n*   CONVUNIT FIXED FOR 3390'S.                                 3/94 SBG\n*   IHDASDR1 FIXED FOR 3390'S BUT PROBABLY NOT NECESSARY.      3/94 SBG\n*------------------------------------------------------------  7/93 SBG\n*                                                              6/93 RT\n* CHANGES BY RON TANSKY 6/93:                                  6/93 RT\n*                                                              6/93 RT\n* ADDED CHECK FOR IEBCOPY PDS/E HEADER                         6/93 RT\n*                                                              6/93 RT\n*                                                              1/93 RT\n* CHANGES BY RON TANSKY 1/93:                                  1/93 RT\n*                                                              1/93 RT\n*  GOT RID OF THE ENT (ENTRY) MACRO.  IT'S MASSIVE OVERKILL IN 1/93 RT\n*  THIS PGM.  REPLACED IT BY SIMPLE INLINE CODE.  THIS SAVES   1/93 RT\n*  14 PAGES WORTH OF LISTING (AT 80 LINES PER PAGE).           1/93 RT\n*                                                              1/93 RT\n*  GOT RID OF OTHER UNUSED MACROS.                             1/93 RT\n*                                                              1/93 RT\n*  ADDED CAPABILITY OF MAPPING DOS SL TAPES.                   1/93 RT\n*  CHANGED WAY PGM RECOGNIZES 'IEHINITT' TAPES, AS IT WAS      1/93 RT\n*  CALLING DOS SL TAPES 'IEHINITT'.                            1/93 RT\n*                                                              1/93 RT\n*  CHANGED DEFAULT TO 80 LINES PER PAGE (&LINEPPG)             1/93 RT\n*                                                              1/93 RT\n*  CHANGED LINE-COUNTER-2 TO STORAGE INSTEAD OF A REGISTER.    1/93 RT\n*                                                              1/93 RT\n*  CHANGED SOME REGISTER EQUATES TO STANDARD (RNN).            1/93 RT\n*                                                              1/93 RT\n*  ADDED A VERSION NUMBER TO THE TITLE PAGE.                   1/93 RT\n*                                                              1/93 RT\n*  MOVED THE CURRENT-DATE-AND-TIME ROUTINE TO ITS OWN CSECT.   1/93 RT\n*  CHANGED THE ROUTINE TO INLINE CODE RATHER THAN MACRO CALL.  1/93 RT\n*  MODIFIED THE ROUTINE TO HANDLE THE CENTURY.                 1/93 RT\n*                                                              1/93 RT\n*  ADDED A BASE REGISTER (R9).                                 1/93 RT\n*  BETWEEN MOVING THE DATE ROUTINE AND THE EXTRA BASE REG,     1/93 RT\n*  THIS SHOULD PROVIDE LOTS OF ROOM FOR EXPANSION.             1/93 RT\n*                                                              1/93 RT\n*  ADDED CONDITIONAL ASSEMBLY FOR MVS/XA SUPPORT.  SYMBOLIC    1/93 RT\n*  VARIABLE '&XA' IS SET TO 'L' OR 'S' TO GENERATE BAL         1/93 RT\n*  OR BAS INSTRUCTION, RESPECTIVELY                            1/93 RT\n*                                                              1/93 RT\n*------------------------------------------------------------ 12/88 SBG\n*  SOMEBODY SHOULD ADD SUPPORT FOR DFDSS TAPES.               12/88 SBG\n*------------------------------------------------------------ 11/88 SBG\n*  THIS PROGRAM, AS IT IS, IS SORELY IN NEED OF A NEW BASE    11/88 SBG\n*   REGISTER AND/OR RE-ARCHITECTING, SUCH AS BEING SPLIT INTO 11/88 SBG\n*   TWO SEPARATE MODULES.  FUTURE MODIFIERS, PLEASE BEAR      11/88 SBG\n*   THIS IN MIND.  THREE BASE REGISTERS ALMOST EXCEEDED.      11/88 SBG\n*                                                             12/88 SBG\n*  FOOTNOTE:  I WAS ABLE TO ADDRESS SEVERAL HUNDRED MORE      12/88 SBG\n*   BYTES BY MOVING SOME OF THE FIXED LITERALS TO THE WORK    12/88 SBG\n*   AREA DSECT.  THESE HAVE TO BE INITIALIZED IN THE GETMAINED12/88 SBG\n*   SPACE WITH EVERY EXECUTION OF THE PROGRAM.  AN EXACT COPY 12/88 SBG\n*   OF THESE LITERALS (WHICH ARE CLEARLY MARKED) IS PUT AT    12/88 SBG\n*   THE VERY END OF THE PROGRAM.  SEE LABEL \"LITMOVES\".       12/88 SBG\n*   LITMOVES IS ADDRESSABLE IN THE PROGRAM VIA AN ADCON.      12/88 SBG\n*                                                             12/88 SBG\n*  FUTURE MODIFIERS, PLEASE BEWARE OF THIS BEFORE             12/88 SBG\n*   ADDING NEW LITERALS.                                      12/88 SBG\n*------------------------------------------------------------ 11/88 SBG\n*  DO NOT GLOBALLY CHANGE MEANINGS OF ANY REGISTER EQUATES.   11/88 SBG\n*   UNLESS YOU ARE VERY VERY THOROUGH.                        11/88 SBG\n*------------------------------------------------------------ 11/88 SBG\nXYZZY    OPSYN PRINT               CUSTOMIZED PRINT CONTROL   06/84 DBC\nPRINT    OPSYN ANOP                SUPPRESS STD PRINT CONTROL 06/84 DBC\n*------------------------------------------------------------ 07/92 SBG\n*                                                             07/92 SBG\n*  *************                                              SBG 03/00\n*  * ATTENTION * YOU CAN USE IECTDEBX INSTEAD OF IEZDEB TO    SBG 03/00\n*  ************* SPECIFY DEB FIELDS.  I DON'T RECOMMEND THE   SBG 03/00\n*                IDEA.  IT IS BETTER TO CODE DEBX=NO.         SBG 03/00\n*                                                             SBG 03/00\n*   IEZDEB IS ALIVE AND WELL.  AT THE SP4 LEVEL, I THOUGHT    SBG 03/00\n*    IT WASN'T, SO I CODED THIS FLEXIBILITY.  BETTER TO       SBG 03/00\n*    LEAVE THINGS AS THEY ALWAYS WERE.                        SBG 03/00\n*                                                             SBG 03/00\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*  THIS PROGRAM MAY NOT BE DISTRIBUTED WITHOUT PERMISSION OF THE      *\n*  AUTHOR.  ALTHOUGH THIS PROGRAM HAS BEEN EXTENSIVELY TESTED, AND    *\n*  IS IN USE IN A PRODUCTION ENVIRONMENT (MVT 21.8 ON A 360/91) AT    *\n*  UCLA'S OFFICE OF ACADEMIC COMPUTING (FORMERLY CAMPUS COMPUTING     *\n*  NETWORK), NO GUARANTEE IS MADE OF (OR RESPONSIBILITY ASSUMED FOR)  *\n*  CORRECT OR RELIABLE OPERATION.  WE MAY TRY TO HELP WITH PROBLEMS.  *\n*                                                                     *\n*  CONTACT:  CHRIS THOMAS  (213) 825-7424                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  THIS PROGRAM IS BASED ON THE PROGRAM TAPEINDX WRITTEN BY           *\n*  MICHAEL S. MAITEN OF THE UCLA COMPUTER CLUB.                       *\n*  IT HAS BEEN ALMOST COMPLETELY REWRITTEN BY LEONARD D. WOREN OF     *\n*  THE UCLA COMPUTER CLUB.                                            *\n*                                                                     *\n*  MODIFIED  1979 BY WALT FARRELL, RAINIER NATIONAL BANK              *\n*                                                           * 09/84 DBC\n*  HI GUYS. GEE, CAN I PLAY TOO?                            * 09/84 DBC\n*                                                                     *\n***********************************************************************\n         EJECT ,                                              06/87 THO\n************************************************************* 07/92 SBG\n*                                                             07/92 SBG\n* LAST CHANGE DATE - JUL. 17, 1992, BY SAM GOLOB.             07/92 SBG\n*                                                             07/92 SBG\n*  07/17/92  -  FIXED 2 PROBLEMS.  NEW IEBCOPY FOR NL TAPE    07/92 SBG\n*               FILES WASN'T WORKING BECAUSE THE HEADER RECD  07/92 SBG\n*               EXPANDED BY 4 BYTES, AND ITS SIZE WAS BEING   07/92 SBG\n*               CHECKED AT LABEL \"NL$NMOVE\".                  07/92 SBG\n*                                                             07/92 SBG\n*               CONDITIONAL ASSEMBLY FOR MVS SP4 SYSTEMS      07/92 SBG\n*               WHICH HAVE DEB EXTENSION SUPPORT AND IEZDEB   07/92 SBG\n*               MACRO ISN'T THERE ANY MORE.  I USED IECTDEBX. 07/92 SBG\n*               PLEASE SET GLOBAL VARIABLE &DEBX TO 'YES' OR  07/92 SBG\n*               'NO' ABOVE.                                   07/92 SBG\n*                                                             07/92 SBG\n************************************************************* 07/92 SBG\n         EJECT ,                                              07/92 SBG\n************************************************************* 11/88 SBG\n*                                                             11/88 SBG\n* LAST CHANGE DATE - NOV. 28, 1988, BY SAM GOLOB.             11/88 SBG\n*                                                             11/88 SBG\n*  INSERTED SUPPORT FOR ><ADD NAME= WITHIN IEBUPDTE UNLOADS.  11/88 SBG\n*  INSERTED GLOBAL VARIABLE FOR LINES-PER-PAGE ON REPORTS.    11/88 SBG\n*     SEE VARIABLE &LINEPPG.                                  11/88 SBG\n*  INSERTED SUPPORT FOR CBT973-COMPRESSED FILES.              11/88 SBG\n*                                                             11/88 SBG\n*  CBT973 SUPPORT MAKES IT POSSIBLE TO MEANINGFULLY MAP       11/88 SBG\n*  AND FIND ALMOST EVERYTHING ON THE CBT MVS MODS TAPE.       11/88 SBG\n*                                                             11/88 SBG\n*  IT ALSO HELPS IN FINDING IBM SOURCE MODULES IN CBT973-     11/88 SBG\n*  COMPRESSED IEBUPDTE FORMAT.                                11/88 SBG\n*                                                             11/88 SBG\n*  SEE CBT TAPE FILES 188 AND 189 FOR A DESCRIPTION OF THIS   11/88 SBG\n*  METHOD OF SQUEEZING MANY IBM SOURCE TAPE REELS TOGETHER    11/88 SBG\n*  ON A FEW LARGE REELS.  TAPEMAP WILL NOW SHOW MEMBER NAMES  11/88 SBG\n*  ON THE CBT973-COMPRESSED LARGE REELS.                      11/88 SBG\n*                                                             11/88 SBG\n*  CBT973 SUPPORT IS DONE BY USING THE CBT973 EXPANSION       11/88 SBG\n*  ALGORITHM TO RESTORE ONE 80-BYTE RECORD AT A TIME.  NORMAL 11/88 SBG\n*  IEBUPDTE PROCESSING IS THEN DONE ON THIS RECORD.           11/88 SBG\n*                                                             11/88 SBG\n************************************************************* 11/88 SBG\n         EJECT ,                                              06/87 THO\n************************************************************* 11/87 SBG\n*                                                                   SBG\n* LAST CHANGE DATE - JUNE 11, 1986, BUT ADDED 11/87 BY TENNIE OLSON THO\n*                                                                   SBG\n*  FIXED BUG  -  SAM GOLOB  -  NEWSWEEK INC., MOUNTAIN LAKES, N.J.  SBG\n*                                                                   SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  TAPEMAP HAS TO CHECK FOR SMPPTFIN FORMAT BEFORE IT CHECKS        SBG\n*   FOR IEBUPDTE FORMAT.  IF A PTF OR APAR HAS SOURCE UPDATES       SBG\n*   WHICH ARE DONE WITH IEBUPDTE, AND THIS PTF OR APAR IS AT THE    SBG\n*   BEGINNING OF THE TAPE TO BE READ, THE PROGRAM WOULD NOT PRINT   SBG\n*   THE PTF OR APAR NAMES, BUT THE NAMES OF THE PROGRAMS BEING      SBG\n*   UPDATED, WHICH IS NOT WHAT WE WANT WHEN WE MAP AN APAR TAPE.    SBG\n*   WE ALWAYS WANT THE NAMES OF THE PTFS AND APARS UNDER THESE      SBG\n*   CIRCUMSTANCES.                                                  SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n*                                                             12/88 SBG\n************************************************************* 07/85 SBG\n         EJECT ,                                              06/87 THO\n************************************************************* 06/87 THO\n*                                                           * 06/87 THO\n* LAST CHANGE DATE - JUNE 09, 1987                          * 06/87 THO\n*                                                           * 06/87 THO\n*                  - I ADDED SUPPORT FOR 3480 CARTRIDGES.   * 06/87 THO\n*                    ADDED CODE TO MAKE CORRECT CALCULA-    * 06/87 THO\n*                    TIONS IN TAPEFEET. 37871 BYTES PER     * 06/87 THO\n*                    IN OR 302971 BITS PER INCH WITH A      * 06/87 THO\n*                    GAP OF .08 INCHES. INDICATED DEN WAS   * 06/87 THO\n*                    NOT APPLICABLE FOR 3480.               * 06/87 THO\n*                                                           * 06/87 THO\n*     TENNIE OLSON                                            12/88 SBG\n*     VF CORPORATION - WRANGLER DIVISION                      12/88 SBG\n*     201 NORTH EUGENE STREET                                 12/88 SBG\n*     GREENSBORO, N.C. 27401                                  12/88 SBG\n*     (919) 373-3952                                          12/88 SBG\n*                                                             12/88 SBG\n************************************************************* 06/87 THO\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n* LAST CHANGE DATE - JULY 26, 1985                          * 07/85 DBC\n*                                                           * 07/85 DBC\n*                  - I ADDED SUPPORT FOR LISTING THE PTFS   * 07/85 DBC\n*                    CONTAINED ON AN SMPPTFIN TAPE.         * 07/85 DBC\n*                                                           * 07/85 DBC\n*                  - WHEN AN SL TAPE IS BEING SCANNED WITH  * 07/85 DBC\n*                    NL ANALYSIS, THE LOGICAL FILE NUMBER   * 07/85 DBC\n*                    IS DISPLAYED ON THE \"LABELS\" LINE      * 07/85 DBC\n*                    (OLD), AND THE PHYSICAL FILE NUMBER IS * 07/85 DBC\n*                    DISPLAYED ON THE \"SCAN\" LINE.          * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         EJECT ,                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n* LAST CHANGE DATE - OCTOBER 1, 1984                        * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I RECEIVED FROM ARNIE CASINGHINO (OF   * 09/84 DBC\n*                    THE CONNECTICUT BANK AND TRUST) A TAPE * 09/84 DBC\n*                    CONTAINING A VERSION OF TAPEMAP THAT   * 09/84 DBC\n*                    WAS BASED ON AN EARLIER UCLA VERSION   * 09/84 DBC\n*                    AND WAS MODIFIED BY WALT FARRELL OF    * 09/84 DBC\n*                    THE RAINIER NATIONAL BANK. THE MODS    * 09/84 DBC\n*                    WERE MAINLY IN SUPPORT OF DETAILED     * 09/84 DBC\n*                    LISTINGS OF THE CONTENTS OF FDR AND    * 09/84 DBC\n*                    FDRDSF TAPES. I HAVE NOW TRANSPORTED   * 09/84 DBC\n*                    THOSE MODS INTO THIS VERSION OF        * 09/84 DBC\n*                    TAPEMAP.                               * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I ADDED SUPPORT FOR BLKSIZES GREATER   * 09/84 DBC\n*                    THAN 32K UP TO 64K-1 BYTES. (THE       * 09/84 DBC\n*                    RECENT RELEASES OF FDR WRITE BLOCKS    * 09/84 DBC\n*                    THAT ARE 50K LARGE OR LARGER).         * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I HAVE ADDED A REWIND COMMAND JUST     * 09/84 DBC\n*                    AFTER THE TAPE IS OPENED TO INSURE     * 09/84 DBC\n*                    THAT THE TAPE IS PROPERLY POSITIONED.  * 09/84 DBC\n*                    THIS MAKES MAPPING STANDARD LABELED    * 09/84 DBC\n*                    TAPES IN A UCC/1 ENVIRONMENT A LITTLE  * 09/84 DBC\n*                    EASIER.                                * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         EJECT ,                                              06/84 DBC\n************************************************************* 06/84 DBC\n*                                                           * 06/84 DBC\n* LAST CHANGE DATE - JUNE 4, 1984                           * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED OPSYN STATEMENTS TO SUPPRESS THE * 06/84 DBC\n*                    AUTHOR'S USE OF \"PRINT NOGEN\".         * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED CODE TO RECOGNIZE FILES IN       * 06/84 DBC\n*                    IEBUPDAT RELOAD FORMAT.                * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - DELETED THE SILLY JFCBDSNM CHANGE THAT * 06/84 DBC\n*                    MADE TAPE MANAGEMENT SYSTEMS SO        * 06/84 DBC\n*                    UNHAPPY.                               * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - UPDATED THE LIST OF KNOWN DEVICE TYPES * 06/84 DBC\n*                    TO INCLUDE 3375S AND 3380S.            * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - CHANGED THE PARM DEFAULT FROM NOSCAN   * 06/84 DBC\n*                    TO SCAN.                               * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED THE \"INFO SOURCE\" COLUMN TO THE  * 06/84 DBC\n*                    SYSPRINT OUTPUT.                       * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - FIXED THE CCC ON THE LINE OF DASHES    * 06/84 DBC\n*                    (WAS RANDOM, NOW IS C' ').             * 06/84 DBC\n*                                                           * 06/84 DBC\n************************************************************* 06/84 DBC\n         EJECT\n***********************************************************************\n*                                                                     *\n*   UPDATES:                                                          *\n*                                                                     *\n*  ADD CHECK FOR FILE WITH HEADER OF                     05/01/79 WBF *\n*    $$TAPEMAP.PRINT.FILE$$                                           *\n*  AND PRINT THE CONTENTS OF THE FILE                                 *\n*  IF ONE IS FOUND                                                    *\n*                                                                     *\n*  LIST DETAILS OF SLICK BACKUP FILES                    04/23/79 WBF *\n*                                                                     *\n*  FIX MINOR BUGS IN NL CODE,                            04/08/79 WBF *\n*  LIST DETAILS OF FDR OR FDRDSF FILES,                      \"        *\n*  FORCE BLP AND EXPDT=98000 (FOR UCC-1),                    \"        *\n*  COSMETIC CHANGES FOR RAINIER NATIONAL BANK                \"        *\n*                                                                     *\n*                                                                     *\n*  FIX BUG IN I/O ERROR RECOVERY                     U16 06/16/79 LDW *\n*                                                                     *\n*  FIX VOLSER FOR NL TAPES;  PRINT SENSE BIT MEANINGS;  CHANGE FORMAT *\n*  OF \"REQUESTED VOL\" MSG;  FIX ./DDNAME= BUG        U15 02/10/79 LDW *\n*                                                                     *\n*  RE-ARRANGE CODE, ADD 'NULL=' PARM.                U14 06/28/78 LDW *\n*                                                                     *\n*  PRINT SENSE INFO WHEN I/O ERROR OCCURS            U13 05/05/78 LDW *\n*                                                                     *\n*  FIX A COUPLE OF TURKEY BUGS                03/24/78 - 04/06/78 LDW *\n*                                                                     *\n*  LIST MEMBERS IN AN IEBUPDTE INPUT STREAM              02/22/78 LDW *\n*                                                                     *\n*  LIST MEMBERS UNLOADED BY IEHMOVE                      01/05/78 LDW *\n*                                                                     *\n*  NL TAPE ANALYSIS CODE ADDED                           12/26/77 LDW *\n*                                                                     *\n*  DO A SENSE TO DETERMINE TRUE TAPE DENSITY             11/14/77 LDW *\n*                                                                     *\n*  FIX SOME MISCELLANEOUS MINOR BUGS                     11/08/77 LDW *\n*                                                                     *\n*  ADD CODE TO LIST MEMBERS UNLOADED BY IEBCOPY, AND ATTRS FOR        *\n*     IEBISAM AND IEHDASDR UNLOADED DATASETS.            03/16/77 LDW *\n*                                                                     *\n*  GENERAL RE-WRITING OF TAPE READ CODE TO PUT IN CODE TO PRINT OUT   *\n*     THE ORIGINAL ATTRS FOR UNLOADED DATASETS CREATED BY IEHMOVE     *\n*     (SYSMOVE) AND IEBCOPY (VS2COPY);  CHANGE TAPE I/O ERROR AND     *\n*     TAPE MARK DETECTION ALGORITHM.                     02/13/77 LDW *\n*                                                                     *\n*  PUT IN DSECTS FOR LABELS;  FIX A 01/06/77 BUG;  RE-WRITE PRINTLIN  *\n*     MACRO (CHANGE TO PRTLN)                            02/07/77 LDW *\n*                                                                     *\n*  MORE FIXES:  COUNT LINES AND DO PAGE EJECT;  AND MUCH OTHER        *\n*     MISCELLANEOUS STUFF                                01/06/77 LDW *\n*                                                                     *\n*  UNCLUDGED A LITTLE:  FIX LENGTH CALCULATION;  MAKE SOME MACROS     *\n*     INTO SUBROUTINES (IT SEEMS THAT MSM NEVER HEARD OF SUBROUTINES; *\n*     PUT IN SYMBOLIC OFFSETS FOR PRINT LINE INFO.       11/08/76 LDW *\n*                                                                     *\n*  TAPEINDX -- CLUDGED UP IN A HURRY FROM A SPASM PROGRAM TO MAKE A   *\n*          QUICK LOAD MODULE                             10/30/74 MSM *\n*                                                                     *\n***********************************************************************\n@/ ADD NAME=DAYS\n         MACRO\n&NFS     DAYS  &TYPE,&LEN=9                                04-19-77 LDW\n         AIF   ('&TYPE' EQ 'RIGHT').RIGHT\n&NFS     DC    CL&LEN'SUNDAY   '\n         DC    CL&LEN'MONDAY   '\n         DC    CL&LEN'TUESDAY  '\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN'THURSDAY '\n         DC    CL&LEN'FRIDAY   '\n         DC    CL&LEN'SATURDAY '\n         AGO   .EXIT\n.RIGHT   ANOP\n&NFS     DC    CL&LEN'   SUNDAY'\n         DC    CL&LEN'   MONDAY'\n         DC    CL&LEN'  TUESDAY'\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN' THURSDAY'\n         DC    CL&LEN'   FRIDAY'\n         DC    CL&LEN' SATURDAY'\n.EXIT    SPACE 2\n         MEND\n@/ ADD NAME=DCBEXIT\n         MACRO\n&NFS     DCBEXIT  &BLKSIZE=,&BUFNO=\n.*  DCBEXIT   04-20-78  LDW\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         PUSH  USING\n         DROP\n         USING *,R15\n         AIF   ('&BLKSIZE' EQ '').B1\n&NAME    CLC   62(2,R1),=F'0'           BLKSIZE GIVEN?\n&NAME    SETC  ''\n         AIF   ('&BUFNO' EQ '').A1\n         BNE   *+10                     YES - USE IT\n         AGO   .A2\n.A1      BNER  R14                      YES - USE IT\n.A2      MVC   62(2,R1),=Y(&BLKSIZE)    SET DEFAULT\n.B1      AIF   ('&BUFNO' EQ '').C1\n&NAME    CLI   20(R1),0                 BUFNO GIVEN?\n         BNER  R14                      YES - USE IT\n         MVI   20(R1),&BUFNO            SET DEFAULT\n.C1      BR    R14                      RETURN TO OPEN\n         SPACE 2\n         POP   USING\n         SPACE 3\n         MEND\n@/ ADD NAME=FL1\n         MACRO\n&NFS     FL1   &DSECT=YES\n         LCLC  &P\n&P       SETC  'FL1'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'1'                     CONSTANT\n&P.ID    DC    CL17' '                  DATASET NAME\n&P.FILSR DC    CL6' '                   FIRST VOL NAME\n&P.VOLSQ DC    CL4' '                   VOL # OF DS\n&P.FILSQ DC    CL4' '                   DS SEQ #\n&P.GNO   DC    CL4' '                   GENERATION NUMBER\n&P.VNG   DC    CL2' '                   VERSION NUMBER\n&P.CREDT DC    CL6' YYDDD'              CREATION DATE\n&P.EXPDT DC    CL6' YYDDD'              EXPIRATION DATE\n&P.FSEC  DC    C' '                     0=NO PW, 1=PW, 3=NOPWREAD\n&P.BLKCT DC    CL6' '                   # OF BLOCKS\n&P.SYSCD DC    CL13' '\n         DC    CL7' '\n         SPACE 2\n         MEND\n@/ ADD NAME=FL2\n         MACRO\n&NFS     FL2   &DSECT=YES\n         LCLC  &P\n&P       SETC  'FL2'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n.***************\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'2'                     CONSTANT\n&P.RECFM DC    C' '                     F/V/U/D\n&P.BLKL  DC    CL5' '                   BLKSIZE\n&P.LRECL DC    CL5' '                   RECORD LEN (X=99999)\n&P.DEN   DC    C' '                     DENSITY (C'0' TO C'4')      THO\n&P.FILP  DC    C' '                     1=VOL SW OCCURRED, 0=NOT\n&P.JOBD  DC    CL8' '                   JOBNAME OF CREATOR\n&P.JSSP  DC    C'/'                     SLASH\n&P.STEPD DC    CL8' '                   STEPNAME OF CREATOR\n&P.TRTCH DC    CL2' '\n&P.CNTRL DC    C' '                     A/M/<BLANK>\n         DC    C' '\n&P.BLKA  DC    C' '                     B/S/R/<BLANK>\n         DC    CL41' '\n         SPACE 2\n         MEND\n@/ ADD NAME=HEX\n         MACRO\n&NFS     HEX   &TO,&FROM,&L,&LEN=,&HEXTAB=,&BYTE=C' ',&DIGITS=\n.*  HEX -- 12/18/76 -- LDW      FIXED 5-2-77    12-25-77\n.*      REWRITTEN FROM SCRATCH -- 01/29/79  FIXED  02-16-79  03-03-79\n.*      UPDATED  04-21-79\n         GBLC  &HEXTAB#\n         LCLA  &LT                      UNPK \"TO\" LENGTH\n         LCLA  &LF                      UNPK \"FROM\" LENGTH\n         LCLA  &LTR                     TR \"TO\" LENGTH\n         LCLA  &LL                      &LEN ONE WAY OR ANOTHER\n         LCLC  &F1,&F2,&T1,&T2,&LX\n&F1      SETC  '&FROM(1)'               FOR SHORTER STRING LATER\n&F2      SETC  '&FROM(2)'               FOR SHORTER STRING LATER\n&T1      SETC  '&TO(1)'                 FOR SHORTER STRING LATER\n&T2      SETC  '&TO(2)'                 FOR SHORTER STRING LATER\n&LX      SETC  '&L&LEN'                 GET LENGTH USING EITHER METHOD\n         AIF   ('&LX' EQ '').DEFLEN     LENGTH WILL DEFAULT TO 4\n&LL      SETA  &LX                      GET IT\n         AGO   .OKLEN\n.DEFLEN  ANOP\n&LL      SETA  4                        SET THE DEFAULT LENGTH\n.OKLEN   AIF   ('&HEXTAB' EQ '').OKHEX1\n&HEXTAB# SETC  '&HEXTAB'\n.OKHEX1  AIF   ('&HEXTAB#' NE '').OKHEX2\n&HEXTAB# SETC  'HEXTAB'\n.OKHEX2  ANOP\n&LT      SETA  &LL*2\n         AIF   ('&DIGITS' EQ '').OKDIGIT\n&LT      SETA  &DIGITS\n.OKDIGIT AIF   (N'&TO NE 2).TO1\n         AIF   (N'&FROM NE 2).T2F1\n.*  N'&TO = 2     N'&FROM = 2\n&NFS     UNPK  &T1.(&LT+1,&T2),&F1.(&LL+1,&F2)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.T2F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 2     N'&FROM = 1\n&NFS     UNPK  &T1.(&LT+1,&T2),&FROM.(&LL+1)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.TO1     AIF   (N'&TO NE 1).ERRT\n         AIF   (N'&FROM NE 2).T1F1\n.*  N'&TO = 1     N'&FROM = 2\n&NFS     UNPK  &TO.(&LT+1),&F1.(&LL+1,&F2)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.T1F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 1     N'&FROM = 1\n&NFS     UNPK  &TO.(&LT+1),&FROM.(&LL+1)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.ERRF    MNOTE 8,'ERROR IN \"FROM\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.ERRT    MNOTE 8,'ERROR IN \"TO\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.DONE    SPACE 1\n         MEND\n@/ ADD NAME=HEXTAB\n         MACRO\n&NFS     HEXTAB &DUAL=YES\n.*  HEXTAB  LDW  UPDATED 02-21-79\n.*  UPDATED 03-17-79\n         GBLC  &HEXTAB#\n         LCLC  &N\n&N       SETC  '&NFS'                   ASSUME GIVEN\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&N       SETC  '&HEXTAB#'               ASSUME GLOBAL PRESENT\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&HEXTAB# SETC  'HEXTAB'                 ELSE, SET IT\n&N       SETC  'HEXTAB'                 HERE TOO\n.OK      AIF   ('&DUAL' EQ 'YES').DUAL\n&N       EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         MEXIT\n.DUAL    ANOP\n&N       EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   &N+C'0'\n         DC    C'0123456789ABCDEF'\n         ORG\n         MEND\n@/ ADD NAME=ICALL\n         MACRO\n&NFS     ICALL &RTN,&REG,&R1=,&R15=\n         GBLC  &XA                                            02/93 RT\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         AIF   ('&R1' EQ '').A\n&NAME    LA    R1,&R1\n&NAME    SETC  ''\n.A       AIF   ('&R15' EQ '').B\n&NAME    LA    R15,&R15\n&NAME    SETC  ''\n.B       ANOP\n&NAME    BA&XA &REG,&RTN\n         SPACE 1\n         MEND\n@/ ADD NAME=IFP2\n         MACRO\n&NFS     IFP2  &L,&B\n&NFS     TM    TFLAG2,T2@PRT2             C\n         AIF   ('&L'(1,1) EQ 'N').NO\n         BO    &B\n         MEXIT\n.NO      BNO   &B\n         MEND\n@/ ADD NAME=MONTHS\n         MACRO\n&NFS     MONTHS  &DUMMY                 04-19-77 LDW\n&NFS     DC    H'31',C'JAN '            THIRTY DAYS\n         DC    H'28',C'FEB '            HATH SEPTEMBER,\n         DC    H'31',C'MAR '            APRIL, JUNE,\n         DC    H'30',C'APR '            AND NOVEMBER.\n         DC    H'31',C'MAY '            ALL THE REST\n         DC    H'30',C'JUN '            HAVE THIRTY ONE,\n         DC    H'31',C'JUL '            EXCEPT FEBRUARY,\n         DC    H'31',C'AUG '            WHICH HAS ONLY 28.\n         DC    H'30',C'SEP '\n         DC    H'31',C'OCT '\n         DC    H'30',C'NOV '\n         DC    H'31',C'DEC '\n         SPACE 2\n         MEND\n@/ ADD NAME=NEWPAGE\n         MACRO\n&NFS     NEWPAGE  &C,&F\n         GBLC  &XA                                            02/93 RT\n         AIF   ('&C' EQ '').JUSTBAL\n         AIF   ('&C' EQ '(R0)').R0\n&NFS     LA    R0,&C\n.R0      BA&XA R10,NEWPAGE&F\n         MEXIT\n.JUSTBAL ANOP\n&NFS     BA&XA R10,NEWPAGE&F+4\n         MEND\n@/ ADD NAME=PRTLN\n         MACRO\n&NFS     PRTLN &A,&I\n         GBLC  &XA                                            02/93 RT\n         LCLC  &LQ\n         LCLA  &L\n&LQ      SETC  'L'''                    TO FOOL THE ASSEMBLER\n         AIF   ('&A'(1,1) NE '''').NOTQ NOT QUOTED STRING\n&L       SETA  K'&A-2                   SET LENGTH OF IT\n&NFS     MVC   OUTBUFF(&L),=C&A\n         AGO   .BAL\n.NOTQ    AIF   ('&A' EQ 'OUTBUFF').OUTBUFF\n         AIF   ('&I' EQ 'I').I\n&NFS     MVC   OUTBUFF(&LQ&A),&A\n.BAL     BA&XA R14,PRTLN\n         AGO   .MEND\n.I       ANOP\n&NFS     L     R15,=A(&A)\n         MVC   OUTBUFF(&LQ&A),0(R15)\n         AGO   .BAL\n.OUTBUFF ANOP\n&NFS     BA&XA R14,PRTLN\n.MEND    SPACE 1\n         MEND\n@/ ADD NAME=PRTLN2\n         MACRO\n&NFS     PRTLN2  &DUMMY\n         GBLC  &XA                                            02/93 RT\n&NFS     BA&XA R14,PRTLN2\n         MEND\n@/ ADD NAME=TAPEMAP  8001-07013-07013-0019-03354-03354-00000-GERHARD\nXYZZY    OPSYN PRINT               CUSTOMIZED PRINT CONTROL   06/84 DBC\nPRINT    OPSYN ANOP                SUPPRESS STD PRINT CONTROL 06/84 DBC\nTAPEMAP  TITLE 'TAPE ANALYSIS PROGRAM  (T A P E M A P)'\n         PUNCH '  ORDER TAPEMAP(P) '                            GP07012\n         PUNCH '  SETCODE AC(1)    '                            GP07012\n*------------------------------------------------------------ 07/92 SBG\n*                                                             07/92 SBG\n*  *************                                              SBG 03/00\n*  * ATTENTION * YOU CAN USE IECTDEBX INSTEAD OF IEZDEB TO    SBG 03/00\n*  ************* SPECIFY DEB FIELDS.  I DON'T RECOMMEND THE   SBG 03/00\n*                IDEA.  IT IS BETTER TO CODE DEBX=NO.         SBG 03/00\n*                                                             SBG 03/00\n*   IEZDEB IS ALIVE AND WELL.  AT THE SP4 LEVEL, I THOUGHT    SBG 03/00\n*    IT WASN'T, SO I CODED THIS FLEXIBILITY.  BETTER TO       SBG 03/00\n*    LEAVE THINGS AS THEY ALWAYS WERE.                        SBG 03/00\n*                                                             SBG 03/00\n         GBLC  &DEBX                                          07/92 SBG\n*&DEBX   SETC  'YES'    'YES' TO USE IECTDEBX MACRO FOR DEB.  SBG 03/00\n&DEBX    SETC  'NO'     'NO'  TO USE IEZDEB   MACRO FOR DEB.  SBG 03/00\n*------------------------------------------------------------ 02/93 RT\n         GBLC  &XA                                            02/93 RT\n&XA      SETC  'L'      'L' TO USE NON-XA BAL INSTRUCTION     02/93 RT\n*&XA     SETC  'S'      'S' TO USE     XA BAS INSTRUCTION     02/93 RT\n         LCLB  &HERC    SET TO TRUE IF COMPILING IN HERCULES  07/02 SRS\n&HERC    SETB  1        YES, THIS IS A HERCULES VERSION       07/02 SRS\n*&HERC   SETB  0        NO                                    07/02 SRS\n*                                                             07/92 SBG\n*------------------------------------------------------------ 07/92 SBG\n         GBLA  &LINEPPG                                       11/88 SBG\n&LINEPPG SETA  60                                             11/88 SBG\nTAPEMAP  CSECT\n         USING *,R15\n         B     ARNDCONS\n         DC    AL1(25)\n         DC    CL8'TAPEMAP'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DS    0F\nGETM     DC    AL1(0),AL3(WORKLEN)\nARNDCONS DS    0H\n         SAVE  (14,12)\n         DROP  R15\n         USING TAPEMAP,R12,R11,R7,R9\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R7,4095(,R11)\n         LA    R7,1(,R7)\n         LA    R9,4095(,R7)\n         LA    R9,1(,R9)\n         L     R2,0(,R1)            PICK UP PARM POINTER\n         L     R0,GETM\n         GETMAIN R,LV=(0)\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE-AREA ADDR\n         USING WORKD,R13\n         L     R15,=A(LITMOVES)     POINT TO LITERALS TO LOAD 12/88 SBG\n         MVC   EMPTYLIT(256),0(R15)     MOVE THEM TO WORKAREA 12/88 SBG\n         MVC   EMPTYLIT+256(256),256(R15)                     10/90 SBG\n         MVC   EMPTYLIT+512(LITMVLEN-512),512(R15)            10/90 SBG\n         MVI   BLANKS,C' '\n         MVC   BLANKS+1(L'BLANKS+L'OUTBUFF),BLANKS  GET OUTBUFF ALSO\n         MVC   OUTCLR2(L'OUTBUFF2+2),OUTCLEAR  GET CC FOR \"DASHES\" ALSO\n         MVC   DASHES(2),=C' -'    PRIME                      06/84 DBC\n         MVC   DASHES+2(L'DASHES-2),DASHES+1\n         MVC   PARM#MSG+1(L'PARM#MSG-1),PARM#MSG\n         XC    JFCB(176),JFCB\n         LA    R0,JFCB\n         ST    R0,EXLST\n         MVI   EXLST,X'87'\n         LA    R0,TAPEBUFF              GET ADDR OF DATA BUFFER\n         ST    R0,TCCW#DAT              SET INTO CCW\n         MVI   TCCW#DAT,RD              RESTORE THE OPCODE\n         LA    R1,FL1LABI               GET LABEL BUFFER ADDR\n         ST    R1,TCCW#LBL              SET IN CCW\n         MVI   TCCW#LBL,RD              RESTORE OPCODE\n         ST    R1,TCCW#EOV              SET IN CCW            02/93 RT\n         MVI   TCCW#EOV,RD              RESTORE OPCODE        02/93 RT\n         LA    R0,FL2LABI               GET LABEL BUFFER ADDR\n         ST    R0,TCCW#LBL+8            SET IN CCW\n         MVI   TCCW#LBL+8,RD            RESTORE OPCODE\n         LA    R1,MV#BUFF2              GET 2ND BUFFER ADDR\n         ST    R1,MV#ABUF2              SAVE\n         LA    R0,OUTBUFF2+110          GET ADDR OF END OF OUTBUFF2\n         ST    R0,OB2END                SAVE FOR FUTURE REFERENCE\n         LA    R0,OUTBUFF2+110+10       FOR UPDTE STUFF\n         ST    R0,OB2END2\n         SPACE 2\n         OPEN  MF=(E,OPENMFL)           OPEN PRINT FILE\n         L     R1,OPENMFL               GET SYSPRINT DCB ADDR\n         TM    48(R1),X'10'             OPEN?\n         BO    PRINTOK                  YES\n         LA    R1,100                   GET ABEND CODE\n         SVC   13                       AND LEAVE\n         SPACE 2\nPRINTOK  LH    R15,0(,R2)               GET PARM LEN\n         LTR   R15,R15                  ANY?\n         BNP   DONEPARM                 NO\n         LA    R14,2(,R2)               SET ADDR OF FIRST ITEM\n         LR    R0,R14                   SAVE IT\n         MVC   PARM#MSG(8),=C' PARM='' '\n         MVC   PARM#MSG+8(L'PARM#MSG-8),PARM#MSG+7   BLANK THE REST\n         CH    R15,=H'21'               PARM TOO LONG FOR \"TITLE2\"?\n         BNH   *+8                      NO - SKIP\n         OI    TFLAG2,T2@LPARM          YES - SET FLAG\n         EX    R15,MVCPARM              SAVE PARM IN OUTBUFF2\n         LA    R1,PARM#MSG+7(R15)       GET ADDR OF END+1\n         MVI   0(R1),C''''              PUT IN ENDING QUOTE\n         OI    TFLAG1,T1@PARM           SET \"HAVE PARM\" FLAG\n         SPACE 2\nNEXTPARM LM    R1,R3,=A(PARMTAB,12,PARMLAST)\nTESTPARM LH    R4,0(,R1)                GET LENGTH OF ITEM\n         EX    R4,CLCPARM               THIS IT?\n         BNE   INCRPARM                 NO - TRY NEXT\n         OC    PARMFLAG,11(R1)          TURN ON BITS\n         LA    R14,2(R14,R4)            INCR SCAN PTR\n         SR    R15,R4                   DECR LENGTH LEFT\n         SH    R15,=H'2'\n         BP    NEXTPARM                 LOOP IF ANY MORE\n         B     DONEPARM                 DONE...\n         SPACE 2\nNULLPARM SH    R15,=H'5'                DECR LENGTH LEFT            U14\n         BNP   DONEPARM                 NOTHING LEFT                U14\n         LA    R14,5(,R14)              POINT TO OPERAND            U14\n         SR    R1,R1                    CLEAR ACCUMULATOR           U14\n         SPACE 1\nNULLLOOP CLI   0(R14),C'0'              DIGIT?                      U14\n         BL    HAVENULL                 NO - HAVE COMPLETE NUMBER   U14\n         IC    R0,0(,R14)               GET A DIGIT                 U14\n         N     R0,F15                   STRIP IT                    U14\n         MH    R1,=H'10'                SHIFT PREVIOUS              U14\n         AR    R1,R0                    ADD NEW                     U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         BCT   R15,NULLLOOP             CONTINUE FOR LENGTH OF PARM U14\n         SPACE 2\nHAVENULL LTR   R1,R1                    ANYTHING GIVEN?             U14\n         BNP   *+8                      YES - USE IT                U14\n         STH   R1,NULLNUMB              SET NUMBER                  U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         SH    R15,H1                   DECR LENGTH LEFT            U14\n         BP    NEXTPARM                 CONTINUE IF MORE            U14\n         B     DONEPARM                 NONE LEFT                   U14\n         SPACE 2\nINCRPARM BXLE  R1,R2,TESTPARM           KEEP LOOKING\n*  DIDN'T FIND IT IN TABLE\n         CLC   =C'NULL=',0(R14)         SPECIAL KIND?               U14\n         BE    NULLPARM                 YES - PROCESS IT            U14\n*  INVALID PARM ITEM\n         SR    R14,R0                   COMPUTE OFFSET INTO PARM\n         LA    R14,1(,R14)              FIX IT\n         CVD   R14,DWD                  CONVERT TO PACKED\n         UNPK  PARMERR+28(3),DWD+6(2)   PUT INTO MSG\n         OI    PARMERR+30,C'0'          FIX SIGN\n         OI    TFLAG1,T1@PERR           SET \"PARM ERROR\" FLAG\n         SPACE 3\nDONEPARM LA    LCTR,&LINEPPG            INIT LINECOUNTER      11/88 SBG\n         CALL  TODAY,(TTL1DATE,TTL1DAY,TTL1TIME)              02/93 RT\n         L     R1,16                    -> CVT\n         L     R1,0(,R1)                -> TCBWORDS\n         L     R1,4(,R1)                -> TCB\n         L     R1,12(,R1)               -> TIOT\n         LA    R1,24(,R1)               -> DD SECTION\n         ST    R1,DD#PTR                SAVE PTR\n         SPACE 1\n         TM    PARMFLAG,PF@INLIN+PF@NATTR PARM=INLINE OR NOATTR?\n         BNZ   OK$PRT2                  YES - SKIP SECOND PRINT FILE\n         L     R2,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         ICALL TIOTSCAN,R10,R15=40(,R2) SEE IF WE HAVE IT\n         B     OK$PRT2                  NOPE\n         SPACE 1\n         OPEN  MF=(E,OPENMFL2)          OPEN SECOND PRINT FILE\n         OI    TFLAG2,T2@PRT2           ASSUME IT WORKS.\n         TM    48(R2),X'10'             DID IT OPEN?\n         BO    OK$PRT2                  YES\n         SPACE 2\nABEND99  LA    R1,99                    GET ABEND CODE\n         SVC   13                       BYE\n         SPACE 2\nOK$PRT2  L     R2,OPENMFLI              GET SYSIN DCB ADDR\n         ICALL TIOTSCAN,R10,R15=40(,R2) SEE IF IT'S THERE\n         B     RDJFCB                   NOPE\n         MVC   RET#ADDR,=A(READCARD)    SET RETURN ADDR\n         SPACE 2\n         OPEN  MF=(E,OPENMFLI)          OPEN INPUT FILE\n         TM    48(R2),X'10'             OPEN?\n         BZ    ABEND99                  NO.  (THIS SHOULD NEVER HAPPEN)\n         MVI   OPENMFL,0                SET TO CLOSE BOTH FILES\n         SPACE 2\nREADCARD L     R1,OPENMFLI              GET SYSIN DCB ADDR\n         GET   (1),INBUFF\n         OI    TFLAG1,T1@DATA           SET FLAG\n         CLC   =C'./DDNAME',INBUFF      IS IT THIS?\n         BE    INDDNAME                 YES - PROCESS\n         CLC   =C'./VOLUME',INBUFF      IS IT THIS?\n         BNE   *+10                     NO - MUST BE VOL NAME\n         MVC   INBUFF(6),INBUFF+9       MOVE OVER\n         MVI   JFCB+117,1               # OF VOL SER #'S\n         MVC   JFCB+118(6),INBUFF       VOL SER #\n         MVI   JFCB+52,X'40'            VOLUME SERIAL LIST CHANGED\n         B     TAPEINDX                 SKIP THE RDJFCB, GO TO SUBROUTN\n         SPACE 2\nINDDNAME L     R1,TAPEMFL               GET ADDR OF TAPEDCB         U14\n         MVC   40(8,R1),INBUFF+9        MOVE DDNAME INTO DCB        U15\n         SPACE 2\nRDJFCB   RDJFCB  MF=(E,TAPEMFL)\n         B     TAPEINDX                 GO TO SUBROUTINE\n         SPACE 3\nEOD2     CLOSE MF=(E,OPENMFL)\n         IFP2  N,LEAVE                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)\n         B     LEAVE                    RETURN\n         SPACE 2\nEOD      TM    TFLAG1,T1@DATA           DATA READ IN?\n         BO    EOD2                     YES.\n         MVC   RET#ADDR,=A(EOD2)        SET NEW RETURN ADDR\n         B     RDJFCB\n         SPACE 2\nMVCPARM  MVC   PARM#MSG+7(0),0(R14)     << EXECUTED >>\nCLCPARM  CLC   2(0,R1),0(R14)           << EXECUTED >>\n         SPACE 2\n******** PRINT GEN\n         EJECT\n***********************************************************************\n*                                                                     *\n* T A P E I N D X                                                     *\n*                                                                     *\n*    A ROUTINE WHICH READS IN THE VOLUME NAME & ALL THE DATA SET NAMES*\n*        (FROM THE TRAILER LABELS) OF A TAPE (WITH STANDARD LABELS)   *\n*        AND FORMATS AND PRINTS THE INFORMATION FROM THE LABELS.      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nTAPEINDX MVC   LCTR2,=F'0'              INIT 2ND LINE COUNTER 02/93 RT\n         MVC   NUMBNULL,=F'0'           INIT COUNT OF NULL FILES    RT\n         OI    TFLAG1,T1@PAGE1+T1@ANLZ  1ST PAGE/THIS VOL + ANLZ LABEL\n         SPACE 1\n* OPEN TAPE VOLUME FOR LABEL=BLP\n         MVC   JFCB+44(8),BLANKS        BLANK OUT ELEM NAME\n         MVC   JFCB+68(2),=H'1'         FILE SEQ #                 WBF\n         MVC   JFCB+70(2),=H'1'         VOL SEQ #\n         MVC   JFCB+83(3),=X'620000'    SET EXPDT=98000 FOR UCC-1  WBF\n         MVI   JFCB+98,X'40'            DSORG=PS\n         MVI   JFCB+100,X'90'           RECFM=FB\n         MVC   TITLE1+5(6),JFCB+118     INIT IN CASE NOT SL\n         SPACE 1\n         OPEN  MF=(E,TAPEMFL),TYPE=J\n         TM    TAPEDCB+DCBOFLGS-IHADCB,DCBOFOPN   FILE OPEN ?       THO\n         BO    TPOPENOK                 YES.                        THO\n         NEWPAGE ,                      PRINT THE HEADER\n         PRTLN '-*** TAPE VOLUME COULD NOT BE OPENED ***'\n         B     RETURN\n         SPACE 3\nTPOPENOK NI    TAPEDCB+DCBMACF1-IHADCB,X'F7'  BLK COUNT INACCURATE  THO\n         XC    LEN#TAPE(4*2),LEN#TAPE   CLEAR SL & NL LENGTHS\n         NI    TFLAG1,255-T1@BADEN-T1@SL RESET FLAGS\n         MVI   WHERE,0                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#RWD,TM=*+4     INSURE PROPER POSITION     09/84 DBC\n         XC    FILE#SEQ,FILE#SEQ   CLEAR PHYSICAL FILE#       07/85 DBC\n         TAPIO TCCW#DAT,TM=LEADTPMK     READ IN VOLUME LABEL\n         MVC   VOLLABI(80),TAPEBUFF     SAVE VOLUME LABEL\n         SPACE 1\nDO$SENSE L     R2,LASTSIZE         PRESERVE LENGTH OVER SENSE 09/84 DBC\n         TAPIO TCCW#SNS                 READ SENSE DATA\n         L     R1,TAPEDCB+DCBDEBAD-IHADCB   LOAD ADDRESS OF DEB     THO\n         AIF   ('&DEBX' EQ 'YES').NEWDEB                            SBG\n         L     R1,DEBSUCBA-DEBBASIC(,R1)    LOAD ADDRESS OF UCB     THO\n         AGO   .OLDDEB                                              SBG\n.NEWDEB  ANOP                                                       SBG\n         L     R1,DEBUCBAD-DEBNMSUB(,R1)    LOAD ADDRESS OF UCB     SBG\n.OLDDEB  ANOP                                                       SBG\n         CLC   UTY3420C(4),UCBTYP-UCB(R1)        3480 COMPAT MODE? ^SBG\n         BE    IS3480                   YEP. TREAT AS 3480.        ^SBG\n         CLI   UCBTBYT4-UCB(R1),X'81'       THIS A 3490 TAPE DRIVE ?SBG\n* --------->>> DON'T USE MAPPING MACRO BECAUSE OF OLDER SYSTEMS.    SBG\n         BE    IS3480                   YEP. TREAT AS 3480.        ^SBG\n*\n*------- CLI   UCBTBYT4-UCB(R1),UCB3480     THIS A 3480 TAPE DRIVE ?THO\n         CLI   UCBTBYT4-UCB(R1),X'80'       THIS A 3480 TAPE DRIVE ?SRS\n         BNE   IS3420                   NO, THEN A 3420 DRIVE       THO\nIS3480   LA    R1,C'5'                  THEN INDICATE SO     ^SBG - THO\n         MVC   TITLE1+34(4),=C'CART'    THEN INDICATE CARTRIDGE     THO\n         NI    PARMFLAG,255-PF@DEN1     TURN OFF                    THO\n         B     TRUE$GOT                                             THO\nIS3420   LA    R1,C'3'                  ASSUME 1600 BPI             THO\n         TM    SENSDATA+3,B'00000100'   PE MODE?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'4'                  ASSUME 6250 BPI\n         TM    SENSDATA+9,B'00001000'   CAPABLE OF 6250 BPI?\n         BO    TRUE$GOT                 YES\n         AIF   (&HERC).TRUE$            FORCE 6250 IF HERCULES 07/02SRS\n         LA    R1,C'2'                  ELSE, 800 BPI\n         SPACE 2\n.TRUE$   ANOP\nTRUE$GOT LR    R0,R1                    COPY DENSITY CHAR\n         N     R1,F15                   STRIP IT\n         SLL   R1,2                     *4\n         LA    R1,DEN#LIST(R1)          POINT TO 4 CHAR FORM\n         ST    R1,TRUE#DEN              SAVE ADDR\n         STC   R0,TRUE#DEN              SAVE 1 CHAR FORM\n         SPACE 2\n         CLI   NUMBNULL+1,0             HOW MANY NULL SKIPPED?      U14\n         BNE   NULL1ST                  MORE THAN ZERO.             U14\n         CLC   VOLLABI(4),=C'VOL1VOL1'  VOLUME LABEL?\n         BE    TPVOL1OK                 YES.\n         SPACE 3\n         MVC   VOLSERNO(6),JFCB+118     SET HERE FOR OVERPRINTING   U15\n         NEWPAGE ,                      PRINT THE HEADER LINES\n         PRTLN '0++++ NO VOL1 LABEL FOUND.  NL ANALYSIS FOLLOWS ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         SPACE 1\nNULL1ST  MVC   FL1ID,BLANKS             SET THE DSN                 U14\n         SPACE 3\nNL$NEXT  ST    R2,LASTSIZE         RESTORE SIZE OF FIRST BLOC 09/84 DBC\n         ST    R2,BYTECNT          INIT TOTAL BYTES READ      09/84 DBC\n         ST    R2,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         MVC   BLOCKCNT,F1              INIT # OF BLOCKS READ\n         MVI   NLFLAGS,NL@F             INIT NL TYPE FLAGS\n         CH    R2,TAPEBUFF              IS FIRST BLOCK RECFM=V?\n         BNE   *+8                      NO - SKIP\n         OI    NLFLAGS,NL@V             YES - SET FLAG\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         MVC   UNLOADER,UNLOADER-1      CLEAR INDICATOR\n         LH    R1,FILE#SEQ              GET FILE NUMBER\n         LA    R1,1(,R1)           ADJ TO IDENTIFY THE NUMBER 07/85 DBC\n*                                  OF THE FILE CURRENTLY      07/85 DBC\n*                                  BEING SCANNED              07/85 DBC\n         CVD   R1,DWD                   -> PACKED\n         UNPK  DWD(5),DWD+5(3)          -> EBCDIC\n         OI    DWD+4,C'0'               FIX SIGN\n         MVC   FL1FILSQ,DWD+1           PUT INTO \"LABEL\"\n         SPACE 1\n*  NOW SEE IF THIS FILE IS ANYTHING SPECIAL THAT WE KNOW ABOUT.\n***      CLC   =H'800',LASTSIZE         RIGHT SIZE?\n***      BNE   NL$NMOVE                 NOT IEHMOVE\n         BA&XA R10,TEST$MV              IS IT IEHMOVE?\n         B     NL$NMOVE                 NO\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     IEHMOVE1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NMOVE CLC   TAPEBUFF(8),=H'60,0,56,0' RECFM=V,BLK=60,REC=56?\n         BE    NLTSTCPY             YES-IT'S THE OLD IEBCOPY FORMAT+SBG\n         CLC   TAPEBUFF(8),=H'64,0,60,0' IS IT IEBCOPY NEW FORMAT? +SBG\n         BNE   NL$NCOPY                 NO - NOT IEBCOPY\nNLTSTCPY BA&XA R10,TEST$CPY             IS IT VS2COPY?             +SBG\n         B     NL$NCOPY                 NO\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     IEBCOPY1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NCOPY BA&XA R10,TEST$DMP             IS IT IEHDASDR?\n         B     NL$NDSDR                 NO\n         NOP   0                        YES - BUT DON'T USE 2ND     WBF\n*                                             PRINT FILE            WBF\n         B     IHDASDR1\n         SPACE 2\n******************************************************************* SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n******************************************************************* SBG\n*  NOTE THAT WE DON'T WANT TO TEST FOR SMPPTFIN ON A CBT TAPE.12/88 SBG\n******************************************************************* SBG\nNL$NDSDR DS    0H                                             11/88 SBG\n         BA&XA R10,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     NL$NCBT                  NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINT FILE FMT11/88 SBG\n         B     CBT1                     YES - 1 PRINT FILE FMT11/88 SBG\n         SPACE 3                                              11/88 SBG\nNL$NCBT  DS    0H                       LABEL FOR NOT DASDR         SBG\n         SPACE 3                                              07/85 DBC\n         BA&XA R10,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     NL$NPTFS            +0 NO, SKIP                06/86 SBG\n         B     PTFS2               +4 YES, GO DUMP IT         07/85 DBC\n         B     PTFS1               +8 YES, JUST SAY SO        07/85 DBC\n*       NEXT 5 LINES ARE SWITCHED WITH PREV 6 LINES & NAMES CHANGED SBG\nNL$NPTFS DS    0H                                             06/86 SBG\n         BA&XA R10,TEST$UPS             MAYBE IEBUPDTE INPUT STREAM?\n         B     NL$NUPDT                 BOY WILL THIS BE UNRELIABLE SBG\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     IEBUPDT1            +8 YES & 1-PRT: HANDLE     07/85 DBC\nNL$NUPDT DS    0H                                             06/86 SBG\n         BA&XA R10,TEST$FDR             IS IT FDR?            07/85 DBC\n         B     NL$NFDR                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     FDR1                     YES,- 1 PRINT FILE FORMAT   WBF\n         SPACE 2\nNL$NFDR  BA&XA R10,TEST$IS              IS IT IEBISAM?        11/88 SBG\n         B     NL$NCDOC                 DIDN'T THINK SO...\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     IEBISAM1                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NCDOC BA&XA R10,TEST$CH              IS IT CBT DOC FILE?   12/88 SBG\n         B     NL$NIS                   NUH UH.               12/88 SBG\n         B     NL$LOOP                  YES - DISPLAY EXTRCT'D12/88 SBG\n         B     CBTDOC1                   DATA ON REPORT #1    12/88 SBG\n         SPACE 3                                              12/88 SBG\nNL$NIS   BA&XA R10,TEST$SLK             IS IT A SLICK BACKUP?\n         B     NL$NSLK                  DIDN'T THINK SO...\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     SLK1                     YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NSLK  BA&XA R10,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     NL$LOOP                  NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n****     B     NL$LOOP                  YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$LOOP  TAPIO TCCW#DAT,TM=NL$EOF       READ A BLOCK\n         B     NL$LOOP                  DO THAT TILL EOF\n         SPACE 2\nNL$EOF   CLI   UNLOADER,C' '            A SECOND LINE?\n         BE    *+12                     NO - SKIP\n         NEWPAGE  2                     MAKE SURE WE HAVE ENOUGH\n         SPACE 1\nNL$SL    DS    0H                                             07/85 DBC\n         LH    R1,FILE#SEQ              GET THE FILE SEQ #\n         CVD   R1,DWD                   PACK IT\n         MVC   #FILE-2(6),=X'402020202120'                    09/84 DBC\n         ED    #FILE-2(6),DWD+5\n         SPACE 1                                              09/84 DBC\n         MVC   #UNLOAD,UNLOADER\n************************************************************* 12/88 SBG\n*  IF THIS IS A CBT HEADER, PUT THE DISPLAY INFO INTO       * 12/88 SBG\n*    THE DSNAME SLOT.  VER XXX  MM-DD-YY.                   * 12/88 SBG\n************************************************************* 12/88 SBG\n         SPACE 1                                              12/88 SBG\n         CLC   UNLOADER(8),CBHEADER     WAS IT CBTHEADER?     12/88 SBG\n         BNE   NL$CBHD                  NO. NORMAL PROCESSING 12/88 SBG\n         MVC   #DSN(17),CBHLIT     DISPLAY CBT DOC INFO       12/88 SBG\n         MVC   #DSN+4(4),CBTVERS   PUT IN VERSION NUMBER      12/88 SBG\n         MVC   #DSN+9(8),CBTDATE   PUT IN RELEASE DATE        12/88 SBG\nNL$CBHD  DS    0H                                             12/88 SBG\n         SPACE 3\n         CLC   =C'(NULL)',UNLOADER+2 SL NULL FILE?            07/85 DBC\n         BE    NLSLDONE                 YES - CAN'T DO ANYTHING\n         SPACE 1\n         MVC   #INFOSRC,=C' SCAN ' IDENTIFY INFO SOURCE       06/84 DBC\n         MVI   #RECFM,C'V'              ASSUME RECFM=V\n         TM    NLFLAGS,NL@V             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'F'              ASSUME RECFM=F\n         TM    NLFLAGS,NL@F             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'U'              ANYTHING ELSE IS RECFM=U\n         SPACE 2\nNL$1     L     R0,MAXBLKSI         GET SIZE OF LARGEST BLOCK  09/84 DBC\n         CVD   R0,DWD\n         MVC   #BLKSIZE(5),=X'2020202120'\n         ED    #BLKSIZE-1(6),DWD+5\n         SPACE 1\n*******  MVI   #LRECL+4,C'?'\n         SPACE 1\n         L     R0,BLOCKCNT              GET BLOCK COUNT\n         CVD   R0,DWD\n         MVC   #BLKCNT-1(7),=X'20202020202120'\n         ED    #BLKCNT-2(8),DWD+4\n         SPACE 1\n         MVC   #DEN+1(1),TRUE#DEN\n         L     R14,TRUE#DEN\n         TM    PARMFLAG,PF@DEN1\n         BO    *+10\n         MVC   #DEN,24(R14)                                         THO\n         SPACE 1\n         L     R15,BLOCKCNT             COUNT # OF GAPS\n         L     R1,BYTECNT\n         M     R1-1,=F'100'             SCALE\n         D     R1-1,0(,R14)             DIVIDE BY BYTES/INCH\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420A                 NO, THEN 3420               THO\n         AH    R1,=Y(8)                 ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?\n         BNO   *+12                     NO - SKIP\n         AH    R1,=Y(2*8)               YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS\n         M     R15-1,=F'08'             EACH GAP IS .08 INCH        THO\n         B     LENCALC1                                             THO\nDEN3420A AH    R1,=Y(375)               ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?                  THO\n         BNO   *+12                     NO - SKIP                   THO\n         AH    R1,=Y(2*375)             YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS              THO\n         M     R15-1,=F'60'             EACH GAP IS .60 INCH\n         CLI   TRUE#DEN,C'4'            UNLESS IT'S A 6250 TAPE\n         BNE   *+8                      IT ISN'T\n         SRL   R15,1                    THEN THEY'RE .3 INCH EACH\nLENCALC1 AR    R1,R15                   ADD IN LENGTH OF GAPS       THO\n         LR    R2,R1                    SAVE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2                     06/84 DBC\n         A     R2,LEN#TAPE+4\n         ST    R2,LEN#TAPE+4\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2                     06/84 DBC\n         SPACE 2\n         PRTLN OUTBUFF\n         CLI   UNLOADER,C' '            ANY SECOND PRINT LINE?\n         BE    NL$DONE                  NO - SKIP\n         TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   NL$DONE                  NO - NO SECOND LINE\n         PRTLN OUTBUFF2\n         MVC   OUTBUFF2,OUTCLR2\n         SPACE 2\nNL$DONE  TM    TFLAG1,T1@SL             THIS TAPE SL?\n         BO    NLSLDONE                 YES - DIFFERENT HANDLING\n         SPACE 1\nNL$DONEX TAPIO TCCW#DAT,TM=NULL$NL      READ NEXT FILE'S FIRST BLK  U14\n         L     R2,LASTSIZE         GET SIZE OF LAST BLOCK     09/84 DBC\n         B     NL$NEXT                  PROCESS NEXT FILE\n         SPACE 3                                              07/85 DBC\nNULL$NL  LH    R1,NUMBNULL              GET NUMBER OF NULL FILES    U14\n         LA    R1,1(,R1)                INCR                        U14\n         STH   R1,NUMBNULL              SAVE NEW COUNT              U14\n         CH    R1,NULLNUMB              DONE ENOUGH?                U14\n         BH    HAVE$EOV                 YES - STOP                  U14\n         LH    R1,FILE#SEQ         NO, GET FILE #             07/85 DBC\n         MVC   #FILE-1(5),=X'2020202120'  MOVE IN EDIT MASK         U14\n         CVD   R1,DWD                                               U14\n         ED    #FILE-2(6),DWD+5                                     U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  PUT IN INDICATOR      06/84 DBC\n         PRTLN OUTBUFF                                              U14\n         L     R0,LEN#TAPE+4            GET ACCUMULATED TAPE LENGTH U14\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420B                 NO, THEN 3420               THO\n         AH    R0,=Y(8)                 COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                U14\n         B     NL$DONEX                                             U14\nDEN3420B AH    R0,=Y(375)               COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                THO\n         B     NL$DONEX                                             THO\n         SPACE 3\n************************************************************* 12/88 SBG\n*   THIS IS THE START OF NORMAL STANDARD LABEL PROCESSING.  * 12/88 SBG\n************************************************************* 12/88 SBG\nTPVOL1OK OI    TFLAG1,T1@SL             INDICATE SL PROCESSING12/88 SBG\n         MVC   TITLE1+5(6),VOLSERNO\n         MVC   TITLE1+19(10),VOLOWNER\n         MVC   TITLE1+13(6),TITLE1+12   BLANK OUT KEYWORD\n         CLC   VOLOWNER,BLANKS          OWNER ALL BLANK?\n         BE    *+10\n         MVC   TITLE1+13(6),=C'OWNER='\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG\n         CLC   VOLSERNO(6),JFCB+118     GET WHAT WE ASKED FOR?\n         BE    MATCHVOL                 YES - CONTINUE\n         OI    TFLAG2,T2@RQVOL          SET FLAG\n         SPACE 2\nMATCHVOL NEWPAGE ,                      PRINT HEADER LINES\n         NI    TFLAG1,255-T1@ANLZ       RESET FLAG\n         TM    PARMFLAG,PF@NL      NL PROCESSING FORCED?      06/84 DBC\n         BNZ   ANLZ1               YES, SET ANALYZE SIGNAL    06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   NO, SCAN BYPASSED?         06/84 DBC\n         BNZ   NOANLZ1             YES, SKIP                  06/84 DBC\nANLZ1    OI    TFLAG1,T1@ANLZ      NO, SET ANALYZE SIGNAL     06/84 DBC\nNOANLZ1  DS    0H                                             06/84 DBC\n         SPACE 1\n         TM    PARMFLAG,PF@NL           FORCE NL ANALYSIS?\n         BNO   *+12                     NO - CONTINUE\nFORCENL  XI    TFLAG1,T1@SL             YES - TURN OFF FLAG\n         B     NL$NEXT                  AND GO TO NL ROUTINE\n         SPACE 1\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         MVC   FL1LABI(4),BLANKS        CLEAR OUT 'HDR1'      02/93 RT\n         TAPIO TCCW#LBL,TM=MAYBETT      READ THE HDR LABELS\n         B     DATAREAD                 SKIP FIRST TIME\nMAYBETT  EQU   *                                               1/93 RT\n         CLC   FL1LABI(4),=C'HDR1'      IS IT SL DOS TAPE?     1/93 RT\n         BNE   FORCENL                                         1/93 RT\n         MVI   FL2LABI,C'?'             CLEAR HDR2 TO '?'      1/93 RT\n         MVC   FL2LABI+1(70),FL2LABI                           1/93 RT\n         CLI   FL1LABI+4,C'0'      POSSIBLY IEHINITT?          1/93 RT\n         BNE   DECRFILE             NO                         1/93 RT\n         CLC   FL1LABI+5(70),FL1LABI+4      IEHINITT?          1/93 RT\n         BE    IEHINITT             YES                        1/93 RT\nDECRFILE LH    R0,FILE#SEQ         DECR TAPEMARK COUNTER       1/93 RT\n         BCTR  R0,0                                            1/93 RT\n         STH   R0,FILE#SEQ         STORE NEW VALUE             1/93 RT\n         TAPIO TCCW#BSF            BACKSPACE A FILE            1/93 RT\n         B     DATAREAD                 SKIP FIRST TIME\n         SPACE 3                                              07/85 DBC\nNLSLDONE TM    TFLAG1,T1@SL        SL-TAPE?                   07/85 DBC\n         BZ    SPACER              NO, SKIP THIS              07/85 DBC\n         CLC   =C'0001',FL1VOLSQ        FIRST VOLUME OF FILE?\n         BE    TEST$EOV                 YES.\n         CLC   =C'    ',FL1VOLSQ        MISSING VOL SEQ FLD?  02/93 RT\n         BE    TEST$EOV                 YES.                  02/93 RT\n         MVC   FVOL#MSG+22(4),FL1VOLSQ  VOL SEQ #\n         MVC   FVOL#MSG+80(6),FL1FILSR  FIRST VOLSER\n         PRTLN FVOL#MSG\n         SPACE 2\nTEST$EOV CLC   =C'EOV2',FL2LABI\n         BNE   NOT$EOV                  EOV.\n         PRTLN ' *** THE ABOVE FILE IS CONTINUED ON ANOTHER VOLUME'\n         B     HAVE$EOV            ALL DONE                   07/85 DBC\nNOT$EOV  DS    0H                                             07/85 DBC\n         SPACE 3                                              07/85 DBC\nSPACER   PRTLN OUTBUFF                  BLANK LINE\n         TAPIO TCCW#FSF                 FWD SPACE\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#LBL,TM=MAYBET2      READ HDR LABELS\n         B     DATAREAD                                       02/93 RT\n         SPACE 1\nMAYBET2  EQU   *                                               1/93 RT\n         CLC   FL1LABI(4),=C'HDR1'      IS IT SL DOS TAPE?     1/93 RT\n         BNE   HAVE$EOV                                        1/93 RT\n         MVI   FL2LABI,C'?'             CLEAR HDR2 TO '?'      1/93 RT\n         MVC   FL2LABI+1(70),FL2LABI                           1/93 RT\n         LH    R0,FILE#SEQ         DECR TAPEMARK COUNTER       1/93 RT\n         BCTR  R0,0                                            1/93 RT\n         STH   R0,FILE#SEQ         STORE NEW VALUE             1/93 RT\n         TAPIO TCCW#BSF            BACKSPACE A FILE            1/93 RT\n         B     DATAREAD\nDATAREAD TAPIO TCCW#FSF                 SKIP TO END OF HDR LABELS\n         MVC   UNLOADER,UNLOADER-1      CLEAR UNLOADED FLAG\n         MVI   NLFLAGS,NL@V+NL@F        ASSUME RECFM=V & RECFM=F\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#DAT,TM=NULLFILE     READ DATA\n         L     R1,LASTSIZE         GET SIZE OF (FIRST) BLOCK  09/84 DBC\n         ST    R1,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         AH    R1,=Y(4*80)              2 HDR + 2 EOF LABELS\n         ST    R1,BYTECNT               INIT TOTAL BYTES READ\n         MVC   BLOCKCNT,F1              INIT NUMBER OF BLOCKS READ\n         NI    NLFLAGS,255-NL@CHANG     FIRST BLOCK NOT A CHANGE\n         OI    NLFLAGS,NL@F             STILL COULD BE RECFM=F\n         SPACE 2\n         BA&XA R10,TEST$CH              TEST FOR CBT HEADER   10/90 SBG\n         B     TSTRECFM                 NOT CBTHEADER, GO ON  10/90 SBG\n         NOP   0                        NO EFFECT ON REPORT 2 10/90 SBG\n         B     TEST$LCT                 PROCESS HEADER FILE   10/90 SBG\n         SPACE 2                                              10/90 SBG\nTSTRECFM CLI   FL2RECFM,C'F'            RECFM=FB?             10/90 SBG\n         BNE   NOT$RF$F                 NO - NOT IEHMOVE OR IEBISAM\n         CLC   FL2LRECL,C00080          LRECL=80?\n         BNE   FIND$EOF                 NO - NOT IEHMOVE OR IEBISAM\n***      CLC   FL2BLKL,C00800           BLKSIZE=800?\n***      BNE   TST$UPDT                 NO - NOT IEHMOVE'D\n         CLI   FL2BLKA,C'B'             BLOCKED?\n*  SWITCH TESTS FOR SMPPTFIN AND IEBUPDTE                           SBG\n         BNE   TST$UPDT                 NO - NOT IEHMOVE'D     2/93 RT\n         BA&XA R10,TEST$MV              IS IT IEHMOVE?\n         B     TST$UPDT                 NO - TRY NEXT               SBG\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\n************************************************************* 06/86 SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n************************************************************* 06/86 SBG\n         SPACE 3                                              07/85 DBC\nTST$UPDT DS    0H                LABEL FOR TEST IEBUPDTE            SBG\n*                          BUT TEST FOR PTFIN COMES FIRST, SO       SBG\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         BA&XA R10,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     TST$NPTF            +0 NO, SKIP                07/85 DBC\n         B     PTFS2               +4 YES & 2-PRT FMT; HANDLE 07/85 DBC\n         B     TEST$LCT            +8 YES & 1-PRT FMT; HANDLE 07/85 DBC\nTST$NPTF DS    0H                                             07/85 DBC\n         BA&XA R10,TEST$UPS             SEE IF IEBUPDTE INPUT STREAM\n         B     TST$NUPD            +0 PROBABLY NOT            07/85 DBC\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT            +8 YES, JUST SAY SO        07/85 DBC\nTST$NUPD DS    0H                                             07/85 DBC\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         SPACE 3\nTST$ISAM BA&XA R10,TEST$IS              IS IT IEBISAM?\n         B     TST$MAP                  NO                    11/88 SBG\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$MAP  BA&XA R10,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     FIND$EOF                 NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNOT$RF$F CLC   =X'00CA6D0F',TAPEBUFF+8  TEST IEBCOPY FIRST    08/90 SBG\n         BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL08/90 SBG\n         CLC   =X'01CA6D0F',TAPEBUFF+8  TEST IEBCOPY FOR PDSE 06/93 RT\n         BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL06/93 RT\n         CLI   FL2RECFM,C'V'            RECFM=V?              08/90 SBG\n         BNE   NOT$RF$V                 NO - NOT IEBCOPY'D\n         CLI   FL2BLKA,C'S'             RECFM=VS?\n         BNE   TST$CBT                  NOT VS. MAYBE CBT973. 11/88 SBG\nFORGTLBL BA&XA R10,TEST$CPY             IS IT VS2COPY?        08/90 SBG\n         B     TST$CBT                  NO - MAYBE CBT\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$CBT  BA&XA R10,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     FIND$EOF                 NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINTFILE FMT 11/88 SBG\n         B     TEST$LCT                 YES - 1 PRINTFILE FMT 11/88 SBG\n         SPACE 3                                              11/88 SBG\nNOT$RF$V CLI   FL2RECFM,C'U'            RECFM=U?\n         BNE   FIND$EOF                 NO - NOT IEHDASDR\n         BA&XA R10,TEST$DMP             IS IT IEHDASDR?\n         B     TST$FDR                  NO\n         NOP   0                        DON'T USE 2ND PRINT FILE    WBF\n         B     TEST$LCT                 CONTINUE\n         SPACE 3\nTST$FDR  BA&XA R10,TEST$FDR             IS IT FDR?\n         B     TST$SLK                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT   WBF\n         SPACE 3\nTST$SLK  BA&XA R10,TEST$SLK             IS IT IEBISAM?\n         B     FIND$EOF                 NO\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nTEST$LCT TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   FIND$EOF                 NO - SKIP THIS\n         NEWPAGE  2                     MORE THAN 1 LINE LEFT?\n         SPACE 1\n         CLC   IEBCOPY,UNLOADER         UNLOADED BY IEBCOPY?\n         BE    IEBCOPY1                 YES - PRINT EXTRA INFO\n         CLC   IEHMOVE,UNLOADER         UNLOADED BY IEHMOVE?\n         BE    IEHMOVE1                 YES - PRINT EXTRA INFO\n         CLC   IEBISAM,UNLOADER         UNLOADED BY IEBISAM?\n         BE    IEBISAM1                 YES - PRINT EXTRA INFO\n         CLC   IEHDASDR,UNLOADER        DUMPED BY IEHDASDR?\n         BE    IHDASDR1                 YES - PRINT EXTRA INFO\n         CLC   FDR,UNLOADER             DUMPED BY FDR?\n         BE    FDR1                     YES - PRINT EXTRA INFO\n         CLC   SLICKMNG,UNLOADER        UNLOADED BY SLICK?\n         BE    SLK1                     YES - PRINT EXTRA INFO\n         CLC   CBT973,UNLOADER          CBT973 COMPRESS FORMAT11/88 SBG\n         BE    CBT1                     YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBTEMPTY,UNLOADER        CBT TAPE EMPTY FILE?  11/88 SBG\n         BE    CBTEMP1                  YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBHEADER,UNLOADER        CBT TAPE DOC FILE?    12/88 SBG\n         BE    CBTDOC1                  YES - PRINT DESCRPTN  12/88 SBG\n         CLC   SMPPTFIN,UNLOADER   SYSMODS?                   07/85 DBC\n         BE    PTFS1               YES, GO SAY SO             07/85 DBC\n         CLC   IEBUPXXX,UNLOADER   NO, UPDATE STREAM?         07/85 DBC\n         BE    IEBUPDT1            YES, GO SAY SO             07/85 DBC\n****     CLC   CTAPEMAP,UNLOADER        CREATED FOR TAPEMAP?\n****     BE    MAP1                     DOESN'T MATTER - MORE THAN\n****                                    ONE LINE OF INFO, SO CAN'T\n****                                    PRINT IT INLINE\n         SPACE 3\nFIND$EOF TM    PARMFLAG,PF@NOCHK        CHECKING SL TAPE?     06/84 DBC\n         BZ    SCAN$EOF                 YES - READ TILL EOF   06/84 DBC\n         SPACE 1\n         TAPIO TCCW#FSF                 FSF PAST REST OF DATA\n         SPACE 2\nREAD$EOF MVI   WHERE,2                  SET \"WHERE ARE WE\" FLAG\n         MVC   FL1LABI(4),BLANKS                             02/93 RT\n         TAPIO TCCW#EOV,TM=MISS$EOF     READ TRAILER LABEL\nTEST$EOF CLC   =C'EOF1',FL1LABI         TRAILER LABEL?\n         BE    HAVE$EOF                 YES - OK\n         CLC   =C'EOV1',FL1LABI         OTHER KIND?\n         BE    HAVE$EOF                 YES - OK\n         SPACE 1\nMISS$EOF PRTLN '0EOF OR EOV LABEL NOT FOUND WHERE EXPECTED'\n         B     REWINDIT                 REWIND AND LEAVE    %%%%%%%%%\n         SPACE 2\nSCAN$EOF TAPIO TCCW#DAT,TM=SL$SAVE      READ & TALLY A DATA BLOCK\n         B     SCAN$EOF                 DO THAT TILL EOF\n         SPACE 2\nSL$SAVE  MVC   NL#SAVE(16),MAXBLKSI SAVE ALL INFO            09/84 DBC\n         MVC   NL#FLAGX,NLFLAGS         MORE...\n         B     READ$EOF                 GO READ THE EOF LABELS\n         SPACE 2\nHAVE$EOF LA    R1,1                     ASSUME 1-LINE GROUPS\n         TM    PARMFLAG,PF@NOCHK        CHECKING?             06/84 DBC\n         BNZ   *+8                      NO - SKIP             06/84 DBC\n         LA    R1,2(,R1)                YES - NEED 2 MORE EACH\n         CLI   UNLOADER,C' '            IS THIS FILE UNLOADED?\n         BE    *+8                      NO - SKIP\n         LA    R1,1(,R1)                YES - NEED 1 MORE LINE\n         TM    PARMFLAG,PF@INLIN        INLINE INFO?          12/88 SBG\n         BZ    *+8                      NO - SKIP             12/88 SBG\n         LA    R1,1(,R1)                YES - NEED EXTRA LINE 12/88 SBG\n         LR    R0,R1                    COPY FOR STUPID MACRO\n         NEWPAGE  (R0)                  CHECK FOR ENOUGH LINES\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK   SL TAPE WITH NL SCANNING?  07/85 DBC\n         BZ    BYWHOZ              YES, DEFER NAMING THE      07/85 DBC\n*                                  UNLOADER UNTIL I BUILD THE 07/85 DBC\n*                                  \"SCAN\" LINE MESSAGE.       07/85 DBC\n         MVC   #UNLOAD,UNLOADER         SAY WHO UNLOADED IT\nBYWHOZ   DS    0H                                             07/85 DBC\n         MVC   #FILE(4),FL1FILSQ        FILE #\n         ICALL DEZERO,R14,R1=#FILE      REMOVE LEADING ZEROES\n         MVC   #DSN(17),FL1ID           DSN\n         CLI   FL1FSEC,C'0'             PASSWORD PROTECTED?\n         BE    NOTPSWD                  NO - SKIP\n         CLI   FL1FSEC,C'1'             PASSWORD PROTECTED?\n         BE    YESPSWD                  YES - MOVE IT IN\n         CLI   FL1FSEC,C'3'             NOPWREAD?\n         BNE   WHATPSWD                 NO - WHAT THEN????\n         MVC   #PSWD,=C' WRT'           YES                   06/84 DBC\n         B     NOTPSWD                  CONTINUE\nWHATPSWD MVC   #PSWD,=C' ???'           SAY WHAT?             06/84 DBC\n         B     NOTPSWD\nYESPSWD  MVC   #PSWD,=C' YES'           SAY SO.               06/84 DBC\n         SPACE 3\nNOTPSWD  MVC   #CDATE(2),FL1CREDT+1     YEAR CREATED\n         MVI   #CDATE+2,C'.'\n         MVC   #CDATE+3(3),FL1CREDT+3   DAY CREATED\n         MVC   #EDATE(2),FL1EXPDT+1     YEAR EXPIRES\n         MVI   #EDATE+2,C'.'\n         MVC   #EDATE+3(3),FL1EXPDT+3   DAY EXPIRES\n         SPACE 3                                              06/84 DBC\n         MVC   #INFOSRC,=C'LABELS' SHOW INFO SOURCE           06/84 DBC\n         MVC   #BLKCNT(6),FL1BLKCT      BLOCK COUNT\n         ICALL DEZERO,R14,R1=#BLKCNT    REMOVE LEADING ZEROES\n         SPACE 2\n         MVC   #RECFM(1),FL2RECFM       RECFM\n         MVC   #RECFM+1(1),FL2BLKA      BLOCK ATTRIBUTE\n         MVC   #RECFM+2(1),FL2CNTRL     CONTROL CHARACTER\n         CLI   #RECFM+1,C'R'            WEIRDO RECFM?  (FR OR VR)\n         BNE   NOT$RF$R                 NOT RECFM=FR OR VR\n         MVC   #RECFM+3(1),#RECFM+2     MOVE CTL CHAR OVER\n         MVC   #RECFM+1(2),=C'BS'       IT'S REALLY FBS OR VBS\nNOT$RF$R MVC   #BLKSIZE(5),FL2BLKL      BLOCK LENGTH\n         ICALL DEZERO,R14,R1=#BLKSIZE   REMOVE LEADING ZEROES\n         MVC   #LRECL(5),FL2LRECL       RECORD LENGTH\n         ICALL DEZERO,R14,R1=#LRECL     REMOVE LEADING ZEROES\n         CLI   FL2DEN,C'?'              WAS A \"DOS SL\" TAPE FOUND?  JCH\n         BNE   *+10                     NO -> HDR2 VALUE IS VALID   JCH\n         MVC   FL2DEN(1),TRUE#DEN       YES-> USE ACTUAL AS VALUE   JCH\n         CLI   TRUE#DEN,C'5'            3480 CARTRIDGE ?            THO\n         BNE   *+8                      NO THEN BYPASS MOD          THO\n         MVI   FL2DEN,C'5'              MODIFY WITH 3480 DEN        THO\n         IC    R15,FL2DEN               GET TAPE DENSITY\n         STC   R15,#DEN+1               SET IN PRINT LINE\n         CLC   TRUE#DEN(1),FL2DEN       LABEL CORRECT?\n         BE    *+8                      YES - OK\n         OI    TFLAG1,T1@BADEN          SET BAD DENSITY FLAG\n         N     R15,F15                  JUST DIGIT\n         SLL   R15,2                    MULTIPLY BY 4\n         LA    R3,DEN#LIST(R15)         POINT TO DENSITY VALUE\n         TM    PARMFLAG,PF@DEN1         PARM=DEN1?\n         BO    DEN$1                    YES - LEAVE 1 CHAR DEN\n         CLI   FL2DEN,C'5'              TOO HIGH?                   THO\n         BH    DEN$1                    YES - SKIP\n         CLI   FL2DEN,C'0'              TOO LOW?\n         BL    DEN$1                    YES - SKIP\n         MVC   #DEN,24(R3)              MOVE CHAR FORM OF DENSITY   THO\n         SPACE 1\nDEN$1    MVC   #TRTCH+1(2),FL2TRTCH     TAPE RECORDING TECHNI 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         MVC   #CREATOR(8),FL2JOBD GET CREATING JOBNAME       06/84 DBC\n         CLI   FL2STEPD,C' '       IS THERE A STEPNAME?       06/84 DBC\n         BE    GOTCREAT            NO, SKIP                   06/84 DBC\n         MVI   #CREATOR-1,C'X'     YES, SET SCAN STOPPER      06/84 DBC\n         LA    R1,#CREATOR+8       LOAD BACK-SCANNER          06/84 DBC\n         BA&XA.R R14,0             LOAD LOOP HEAD             06/84 DBC\n         BCTR  R1,0                BACK SCAN                  06/84 DBC\n         CLI   0(R1),C' '          EO-JOBNAME YET?            06/84 DBC\n         BER   R14                 NO, CONTINUE BACKSCAN      06/84 DBC\n         MVI   1(R1),C'/'          YES, INSERT SEPARATOR      06/84 DBC\n         MVC   2(8,R1),FL2STEPD    GET STEPNAME               06/84 DBC\n         MVI   #CREATOR-1,C' '     CLEAR STOPPER              06/84 DBC\nGOTCREAT DS    0H                                             06/84 DBC\n         SPACE 2\n*    *****  COMPUTE THE LENGTH (INCHES) OF THIS TAPE DATA SET.\n         SPACE 1                                              06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   DON'T DO IT IF A SCAN IS - 06/84 DBC\n         BZ    SKIPGUES             BEING DONE ANYWAY         06/84 DBC\n         SPACE 1\n         PACK  DWD,FL1BLKCT(6)          BLOCK COUNT\n         CVB   R15,DWD                  SAVE BLOCK COUNT\n         LA    R1,4(,R15)               ADD 4 GAPS TO BLOCK COUNT.\n         L     R3,TRUE#DEN              GET PTR TO TRUE DENSITY\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         M     R1-1,=F'08'              EACH GAP IS .08 INCH        THO\n         B     *+20                                                 THO\n         M     R1-1,=F'60'              EACH GAP IS 6/10 INCH\n*  NOTE - LENGTH KEPT IN .01 INCHES\n         CLI   TRUE#DEN,C'4'            6250 BPI?\n         BNE   *+8                      NO - SKIP\n         SRL   R1,1                     GAPS AT 6250 ARE .3 INCH\n         LR    R2,R1                    SAVE LENGTH OF GAPS\n         PACK  DWD,FL2BLKL(5)           BLKSIZE.\n         CVB   R1,DWD\n         MR    R1-1,R15                 BLKSIZE * BLOCK_COUNT\n         AH    R1,=Y(4*80)              2 HDR & 2 EOF LABELS\n         M     R1-1,=F'100'             CONVERT TO .01\n         D     R1-1,0(,R3)              DIVIDE BY DENSITY.\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         AH    R1,=Y(8*3)               3 TAPEMARKS @ 0.08 INCH     THO\n         B     *+8                                                  THO\n         AH    R1,=Y(375*3)             3 TAPEMARKS @ 3.75 INCH\n         AR    R2,R1                    ADD TO LENGTH OF DATA\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2 FORMAT FILE LENGTH  06/84 DBC\n         A     R2,LEN#TAPE              ADD TO TOTAL LENGTH\n         ST    R2,LEN#TAPE              SAVE NEW TOTAL LENGTH\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2 FORMAT CUMULATIVE L 06/84 DBC\nSKIPGUES DS    0H                                             06/84 DBC\n         SPACE 1\n         PRTLN OUTBUFF\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK        SL WITH NL ANALYSIS?  06/84 DBC\n         BNZ   NO$CHECK                 NO - SEE IF SECOND LI 06/84 DBC\n         MVC   MAXBLKSI(16),NL#SAVE RESTORE INFO              09/84 DBC\n         MVC   NLFLAGS,NL#FLAGX         MORE...\n         B     NL$SL                    YES - GO DO IT\n         SPACE 2\nNO$CHECK TM    PARMFLAG,PF@INLIN        INLINE MESSAGES?\n         BNO   NLSLDONE                 NO - DO NEXT FILE\n         CLI   UNLOADER,C' '            UNLOADED?\n         BE    NLSLDONE                 NO - DO NEXT FILE\n         PRTLN OUTBUFF2                 PRINT TRUE ATTRS OF UNLOADED DS\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OTHER PRINT LINE\n         B     NLSLDONE                 DO NEXT FILE\n         SPACE 3\nHAVE$EOV PRTLN '-     *** EOV ***'\n         CLC   LCTR2,=F'0'              ANYTHING PRINTED ON OTHER PAGE?\n         BZ    NO$EOV2                  NO - SKIP\n         MVC   OUTBUFF2(17),=C'-     *** EOV ***'\n         PRTLN2                         FLAG END OF OTHER PRINT FILE\n         SPACE 1\nNO$EOV2  TM    TFLAG1,T1@BADEN          ANY INCORRECT DENSITIES?\n         BNO   NO$BADEN                 NO - SKIP\n         LA    R0,9                     ASSUME NOT PARM=NONOTE\n         TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BNO   *+8                      YES - SO USE 9\n         LA    R0,6                     PARM=NONOTE, SO USE 6\n         NEWPAGE  (R0)                  GO TO TOP OF PAGE IF NEEDED\n         LA    LCTR,1(,LCTR)            WILL CALL PRTLN 1 EXTRA TIME\n         MVC   OUTBUFF(113),INCORLAB    REPL LITERAL BY FIELD 10/90 SBG\n*                                       FOR ADDRESSABILITY    10/90 SBG\n         L     R2,TRUE#DEN              GET PTR TO 4 CHAR TRUE DEN\n         CLI   TRUE#DEN,C'2'            800 BPI?\n         BNE   *+6                      NO - OK\n         BCTR  R2,0                     RIGHT JUSTIFY THE \"800\"\n         MVC   OUTBUFF+98(4),20(R2)     MOVE INTO PRINT LINE\n         PRTLN OUTBUFF\n         MVI   OUTBUFF,C'+'             SET FOR OVERPRINT\n         MVC   OUTBUFF+98(4),20(R2)     LIGHT UP THE DENSITY\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BA&XA R14,PUTPRTLN             PRINT IT ONCE (NO CLEAR OUTBUFF\n         PRTLN OUTBUFF                  AND THE THIRD TIME\n         SPACE 2\nNO$BADEN TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BO    REWINDIT                 NO - SO DON'T\n         NEWPAGE  4                     ENOUGH LINES LEFT ON PAGE?\n         PRTLN '0NOTE:  LENGTH(S) ARE COMPUTED, (BASED ON BLKSIZE, BLKC$\n               OUNT, AND DENSITY), AND ARE THEREFORE ONLY APPROXIMATE.'\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BO    REWINDIT                 YES - GOOD LENGTHS PRINTED\n         PRTLN '        LENGTHS FOR RECFMS OTHER THAN F,FB,ETC MAY NOT $\n               BE VERY CLOSE TO THE TRUE LENGTH.'\n         SPACE 2\nREWINDIT TAPIO TCCW#RWD                 REWIND THE TAPE\n         SPACE 2\nCLOSE$TP CLOSE MF=(E,TAPEMFL)\n         SPACE 2\nRETURN   L     R14,RET#ADDR             GET RETURN ADDR\n         BR    R14\n         SPACE 2\nNULLFILE MVC   UNLOADER+2(6),=C'(NULL)' PUT IN INDICATOR      06/84 DBC\n         TAPIO TCCW#LBL   %%%%%         READ EOF'S                %%%%%\n         B     TEST$EOF   %%%%%         TEST FOR 'EOF'            %%%%%\n         SPACE 2\nUNEXTPMK PRTLN '0*** UNEXPECTED TAPE MARK ***'\n         B     REWINDIT                 CLOSE UP & LEAVE\n         SPACE 2\nLEADTPMK NEWPAGE  ,                     PRINT THE HEADER LINES\n         PRTLN '0++++ TAPE HAS LEADING TAPE MARK ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         MVI   VOLLABI,C'X'             INSURE NL ROUTINE\n         MVI   NUMBNULL+1,1             INIT NUMBER OF NULL FILES   U14\n         TAPIO TCCW#DAT,TM=LEAD$EOV     READ FIRST BLOCK FROM FILE  U14\n         B     DO$SENSE                 DO NL ANALYSIS\n         SPACE 2\nLEAD$EOV MVI   NUMBNULL+1,2             SET NUMBER OF NULL FILES    U14\n         CLI   NULLNUMB+1,2             TOO MANY?                   U14\n         BL    HAVE$EOV                 YES - STOP                  U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  FLAG IT               06/84 DBC\n         MVI   #FILE+3,C'1'             SET FOR PRINT               U14\n         PRTLN OUTBUFF                                              U14\n         B     DO$SENSE                                             U14\n         SPACE 2\nIEHINITT PRTLN '-++++ TAPE HAS BEEN RE-LABELLED WITH IEHINITT ++++'\n         B     REWINDIT                 ...\n         EJECT\nTEST$MV  CLC   =C'UNLOADED',TAPEBUFF+16 IEHMOVE'S TRADEMARK?\n         BNER  R10                      NO\n         MVC   UNLOADER(7),IEHMOVE      SAY WHO\n         SPACE 1\nTEST$RET IFP2  Y,4(,R10)                RETURN POINT FOR 2 PRINT FILES\n         B     8(,R10)                  RETURN POINT FOR 1 PRINT FILE\n         SPACE 2\n************************************************************  11/88 SBG\n* THE CBT973 COMPRESS PROGRAM MAY BE FOUND IN SOURCE FORM  *  11/88 SBG\n* ON THE CBT MODS TAPE, FILE (2,NL), RECFM=FB,LRECL=80,    *  11/88 SBG\n* BLKSIZE=32720.  IT TAKES 80-BYTE FB RECORDS AS INPUT,    *  11/88 SBG\n* AND PRODUCES 94-BYTE LRECL, VB RECORDS AS OUTPUT.        *  11/88 SBG\n*                                                          *  11/88 SBG\n* DATA COMPRESSION TAKES THE FORM OF SQUEEZING OUT BLANKS. *  11/88 SBG\n* A 10-BYTE BIT MAP HEADER TELLS THE PROGRAM WHICH OF THE  *  11/88 SBG\n* 80 CHARACTERS WERE BLANKS, AND WHICH WERE NOT.  A RDW    *  11/88 SBG\n* PRECEDES THE 10-BYTE BIT MAP, FOLLOWED BY THE NON-BLANK  *  11/88 SBG\n* BYTES OF THE RECORD.  THE PROGRAM COUNTS ON A LOT OF     *  11/88 SBG\n* BLANK CHARACTERS IN THE RECORD, TO ALLOW COMPRESSION     *  11/88 SBG\n* TO BE ACHIEVED.                                          *  11/88 SBG\n*                                                          *  11/88 SBG\n* IT IS THE PRACTICE ON THE CBT TAPE TO IEBUPDTE-UNLOAD    *  11/88 SBG\n* A SOURCE-FORMAT PDS TO A SEQUENTIAL FILE, AND THEN TO    *  11/88 SBG\n* COMPRESS THE BLANKS OUT WITH THE CBT973 PROGRAM WHEN     *  11/88 SBG\n* UNLOADING THE FILE ON TO THE CBT TAPE.  TAPEMAP USES     *  11/88 SBG\n* THE CBT973 DECOMPRESS ALGORITHM TO DECOMPRESS ONE        *  11/88 SBG\n* 80-BYTE RECORD AT A TIME, AND THEN USES ITS IEBUPDTE     *  11/88 SBG\n* MEMBER NAME INTERPRETATION ON EACH DECOMPRESSED RECORD.  *  11/88 SBG\n*                                                          *  11/88 SBG\n* MEMBER NAMES IN UNLOADED LIBRARIES ARE THUS DIRECTLY     *  12/88 SBG\n* REPORTED BY DOING A \"TAPEMAP\" RUN ON A CBT TAPE.         *  11/88 SBG\n*                                                          *  12/88 SBG\n* USUALLY ANY FB 80-BYTE LRECL NON-IEBUPDTE FILES ARE ALSO *  12/88 SBG\n* COMPRESSED.  THESE FILES WILL APPEAR ON REPORT 2 BUT     *  12/88 SBG\n* WILL NOT SHOW AS HAVING ANY MEMBERS.                     *  12/88 SBG\n************************************************************  11/88 SBG\nTEST$CBT CLC   TAPEBUFF+2(3),=X'000000' LOOK LIKE BDW+X'00'?  11/88 SBG\n         BNER  R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+0(2),=X'0000'   LOOK LIKE BDW?        11/88 SBG\n         BER   R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+6(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BNER  R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+4(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BER   R10                      NO CAN'T BE CBT973 FMT11/88 SBG\nTEST$CBA LA    R1,TAPEBUFF+4    IF CBT973, THEN START OF RDW  11/88 SBG\n         LH    R3,0(,R1)    DON'T BE MODULO 256..SAVE IT ALL. 07/90 SBG\n         C     R3,=F'94'            LRECL=94 MAX FOR CBT973.  11/88 SBG\n         BHR   R10                  BETWEEN 95 & 255, NOT CBT 11/88 SBG\n         ST    R4,CBSAVE4           USE R4 FOR WKREG          11/88 SBG\n         LH    R4,TAPEBUFF          GET BLKSIZE FROM BDW      11/88 SBG\n         S     R4,=F'4'             4 LESS FOR COMPARE W/RECSZ11/88 SBG\n         CR    R3,R4                ONE RECORD IN THIS BLOCK? 11/88 SBG\n         BL    TEST$CBN             YES. SKIP TEST PAST EO-REC11/88 SBG\n************************************************************* 12/88 SBG\n*   \"EMPTY FILES\" ON THE CBT TAPE ARE NOT REALLY EMPTY.     * 12/88 SBG\n*    THEY ARE ONE-RECORD CBT973 COMPRESSED FILES WITH A     * 12/88 SBG\n*    CERTAIN FIXED LITERAL EXPRESSION ON THE ONE CARD.      * 12/88 SBG\n*    A USER OF THE CBT TAPE WOULD LIKE TO KNOW WHICH TAPE   * 12/88 SBG\n*    FILES ARE CONSIDERED \"EMPTY\" BY THE TAPE ADMINISTRATOR.* 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBL CLC   14(L'EMPTYLIT,R1),EMPTYLIT   CBT \"EMPTY\" FILE? 11/88 SBG\n         BE    TEST$CBE             FLAG AS CBT EMPTY FILE    12/88 SBG\n         CLC   14(L'EMPTYLI2,R1),EMPTYLI2   OLD \"EMPTY\" FILE? 12/88 SBG\n         BNE   TEST$CBN             NO-STILL TEST FOR CBT973. 12/88 SBG\n************************************************************* 12/88 SBG\n*   AN \"EMPTY FILE\" ON THE CBT TAPE HAS BEEN FOUND.         * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBE MVC   UNLOADER(8),CBTEMPTY  REPORT AS EMPTY.         12/88 SBG\n         L     R4,CBSAVE4           RESTORE REG 4             11/88 SBG\n         TM    TFLAG2,T2@PRT2       IS SECOND REPORT WANTED?  12/88 SBG\n         BOR   R10            NO SECOND REPORT FOR EMPTY FILE 12/88 SBG\n         B     8(,R10)        WE WANT TO FLAG IF ONE REPORT   12/88 SBG\n************************************************************* 12/88 SBG\n*   CBTEMPTY IS FLAGGED ON 'PARM=INLINE', BUT WE DON'T WANT * 12/88 SBG\n*    WANT EMPTY CBT FILES REPORTED ON THE SECOND REPORT     * 12/88 SBG\n*    TO CONFUSE SOMEONE WHO MAY THINK IT IS A NONTRIVIAL    * 12/88 SBG\n*    NON-IEBUPDTE CBT973-COMPRESSED FILE.                   * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBN DS    0H                   NOT CBT EMPTY FILE        11/88 SBG\n         AR    R3,R1                PAST RECORD END           11/88 SBG\n         LH    R4,0(,R3)            GET SECOND RECORD SIZE    11/88 SBG\n         C     R4,=F'14'            SEE IF LESS THAN 14       11/88 SBG\n         BL    TEST$CJ1             LESS THAN 14 IS NO GOOD   08/90 SBG\n         C     R4,=F'94'            SEE IF MORE THAN 94       08/90 SBG\n         BNH   TEST$CJ2             IN BETWEEN, TEST FURTHER  08/90 SBG\nTEST$CJ1 L     R4,CBSAVE4           RESTORE REG 4 BEFORE RET  08/90 SBG\n         BR    R10                  GO BACK TO CALLER         08/90 SBG\nTEST$CJ2 CLI   0(R3),X'00'          IF CBT973, MUST BE X'00'  08/90 SBG\n         BNER  R10                  NOT SO, THEN NOT CBT973   11/88 SBG\n         CLI   1(R3),X'00'          IF CBT973, CAN'T BE X'00' 11/88 SBG\n         BER   R10                  IT IS, THEN NOT CBT973    11/88 SBG\n         CLC   2(2,R3),=X'0000'     LOOK LIKE RDW?            11/88 SBG\n         BNER  R10                  NO. CAN'T BE CBT973 FMT   11/88 SBG\nTEST$CBM LA    R1,14(,R1)           GO TO \"NONBLANK\" DATA     11/88 SBG\nTEST$CBO CLI   0(R1),X'40'          HAD BETTER NOT BE A BLANK 11/88 SBG\n         BER   R10                  IT IS A BLANK. NO GOOD.   11/88 SBG\n         LA    R1,1(,R1)            BUMP ONE BYTE             11/88 SBG\n         CR    R1,R3                END OF NONBLANK DATA?     11/88 SBG\n         BL    TEST$CBO             NO, KEEP TRYING           11/88 SBG\n         MVC   UNLOADER(6),CBT973   ASSUME CBT973 FORMAT      11/88 SBG\n         B     TEST$RET                 RETURN                11/88 SBG\n         SPACE 2                                              11/88 SBG\nTEST$CPY CLC   =X'00CA6D0F',TAPEBUFF+8  VS2COPY'S TRADEMARK?\n         BE    TEST$CYY                 YES                   06/93 RT\n         CLC   =X'01CA6D0F',TAPEBUFF+8  VS2COPY'S PDSE MK?    06/93 RT\n         BNER  R10                      NO\nTEST$CYY MVC   UNLOADER(7),IEBCOPY      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 2\nTEST$UPS ST    R10,DWD                  SAVE MY RETURN ADDR\n         LA    R2,80                    BXLE INCR\n         LA    R15,TAPEBUFF             BXLE START\n         LR    R3,R15                   COPY FOR END\n         A     R3,LASTSIZE         POINT PAST END            09/84 DBC\n         SR    R3,R2                    POINT TO LAST CARD IN BLOCK\n         SPACE 1\nTEST$UPL LR    R1,R15                   COPY CARD START ADDR\n         BA&XA R10,TEST$UP              IS THIS IEBUPDTE CTL CARD?\n         B     TEST$UPB                 NO - GO BXLE\n         MVC   UNLOADER(8),IEBUPXXX SAY WHO                   06/84 DBC\n         L     R10,DWD                  GET BACK MY RETURN ADDR\n         B     TEST$RET                 AND RETURN TO CALLER\n         SPACE 1\nTEST$UPB BXLE  R15,R2,TEST$UPL          TRY ALL CARDS IN THIS BLOCK\n         L     R10,DWD                  RESTORE RETURN ADDR\n         BR    R10                      NOT IEBUPDTE INPUT STREAM\n         SPACE 2\nTEST$UP  CLC   =C'./',0(R1)             START RIGHT?\n         MVI   UPDTXFLG,C' '            ASSUME ./ CONTROL CARD11/88 SBG\n         BE    TEST$UPC                 CONTINUE              11/88 SBG\nTEST$UPX CLC   =C'><',0(R1)             SUBORDINATE MEMBER?   11/88 SBG\n         BNER  R10                      NO - THAT WAS QUICK\n         MVI   UPDTXFLG,C'>'            REALLY >< CONTROL CARD11/88 SBG\nTEST$UPC DS    0H                       CONTINUE PROCESSING   11/88 SBG\n         LA    R1,2(,R1)                POINT TO SCAN START\n         LA    R0,69                    MAX SCAN LENGTH\n         BA&XA R14,F$BLANK              FIND END OF NAME FIELD\n         BA&XA R14,F$CHARS              FIND THE VERB\n         CLC   =C'ADD ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'REPL ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHANGE ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHNGE ',0(R1)    IEBUPDAT TYPE CHANGE?      06/84 DBC\n         BNER  R10                 NO, RETURN EMPTY HANDED    06/84 DBC\n         SPACE 2\nTU$SAVE  MVC   UPDT#TYP(1),0(R1)        A,R,C\n         MVC   IEBUPXXX,=C'IEBUPDTE' ASSUMPTION               06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE SCANNER               06/84 DBC\n         SPACE 1\nTU$LOOP  LA    R1,1(,R1)\n         CLC   =C'MEMBER=',0(R1)\n         BE    TU$MEM\n         CLC   =C'NAME=',0(R1)\n         BE    TU$NAM\n         BCT   R0,TU$LOOP               SCAN THE REST OF THE CARD\n         SPACE 3                                              06/84 DBC\n************************************************************* 06/84 DBC\n*        THIS IS NOT AN INTERESTING IEBUPDTE TYPE CARD, BUT * 06/84 DBC\n*        IT STILL MIGHT BE AN INTERESTING IEBUPDAT TYPE     * 06/84 DBC\n*        CARD. SCAN TO SEE IF THE OPERAND FIELDS START WITH * 06/84 DBC\n*        A FIRST POSITIONAL PARAMETER THAT IS A MEMBER      * 06/84 DBC\n*        NAME.                                              * 06/84 DBC\n************************************************************* 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE VERB PTR           06/84 DBC\n         BA&XA R14,F$BLANK         SCAN PAST THE VERB         06/84 DBC\n         BA&XA R14,F$CHARS         SCAN TO THE OPERANDS       06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE OPERANDS PTR          06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LA    R0,9                MAX L'NAME+1               06/84 DBC\n         BA&XA.R  R14,0            LOOP HEAD                  06/84 DBC\n         CLI   0(R1),C'='          IEBUPDTE TYPE CARD?        06/84 DBC\n         BER   R10                 YES, GIVE UP               06/84 DBC\n         CLI   0(R1),C','          NO, EO-1ST OPERAND?        06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         CLI   0(R1),C' '          MAYBE, CHECK AGAIN         06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         LA    R1,1(,R1)           NO, ADVANCE SCANNER        06/84 DBC\n         BCTR  R0,R14              LOOP BACK                  06/84 DBC\n         BR    R10                 1ST OPERAND TOO LONG; GVUP 06/84 DBC\n         SPACE 1                                              06/84 DBC\nTU$UPDAT MVC   IEBUPXXX,=C'IEBUPDAT' RESET \"UNLOADER\" NAME    06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE NAME POINTER       06/84 DBC\n         B     4(,R10)             RETURN WITH NAME           06/84 DBC\n         SPACE 2\nTU$MEM   LA    R1,7(,R1)                POINT TO MEMBER NAME\n         B     *+8                      SKIP OTHER LA\n         SPACE 1\nTU$NAM   LA    R1,5(,R1)                POINT TO MEMBER NAME\n         SPACE 1\n         MVI   8(R1),C','               BE SURE TO STOP\n         B     4(,R10)                  FOUND A NAME\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        TEST TO SEE IF THE CURRENT FILE IS A SMPPTFIN      * 07/85 DBC\n*        FILE.                                              * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTF ST    R10,DWD             SAVE THE RETURN PTR        07/85 DBC\n         LA    R2,80               GET BXLE SCANNER           07/85 DBC\n         LA    R15,TAPEBUFF        --> TAPE BUFFER            07/85 DBC\n         LR    R3,R15              GET -                      07/85 DBC\n         AL    R3,LASTSIZE          BXLE -                    07/85 DBC\n         SLR   R3,R2                 LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTL LR    R1,R15              --> NEXT CARD              07/85 DBC\n         BA&XA R10,TEST$PT         SEE IF IT'S ++PTF, ++APAR, 07/85 DBC\n*                                  ++FUNCTION, OR ++USERMOD   07/85 DBC\n         B     TEST$PTB            +0 NOPE, SKIP TO NEXT CARD 07/85 DBC\n         MVC   UNLOADER(8),SMPPTFIN +4 YEP, NAME THE          07/85 DBC\n*                                  \"UNLOADER\"                 07/85 DBC\n         L     R10,DWD             RESTORE RETURN ADDRESS     07/85 DBC\n         B     TEST$RET            GO RETURN TO CALLER        07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTB BXLE  R15,R2,TEST$PTL     ADVANCE TO NEXT CARD AND   07/85 DBC\n*                                  LOOP TO TEST IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R10,DWD             NO ++PTF ATC. CARD WAS     07/85 DBC\n*                                  FOUND. RESTORE LINK        07/85 DBC\n         BR    R10                 RETURN EMPTY HANDED        07/85 DBC\n         SPACE 3                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        SEE IF THE CURRENT RECORD IS A SMP SYSMOD HEADER   * 07/85 DBC\n*        CARD (++PTF, ++APAR, ++FUNCTION, OR ++USERMOD).    * 07/85 DBC\n*        NOTE, THIS SCAN EXAMINES ONLY ONE CARD AT A TIME.  * 07/85 DBC\n*        ACCORDINGLY, IT WILL WORK ONLY IF THE SYSMOD'S     * 07/85 DBC\n*        NAME IS NOT CONTINUED ONTO ANOTHER CARD.           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PT  CLC   =C'++',0(R1)        PLUSPLUS CARD?             07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         LA    R1,2(,R1)           YES, ADVANCE SCANNER       07/85 DBC\n         LA    R0,69               LOAD SCAN LIMIT            07/85 DBC\n         BA&XA R14,F$CHARS         SKIP BLANKS                07/85 DBC\n         SPACE 1                                              07/85 DBC\n         LA    R14,7               L'SYSMOD TYPE NAME         07/85 DBC\n         CLC   =C'USERMOD',0(R1)   ++USERMOD?                 07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,3               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'PTF',0(R1)       ++PTF?                     07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,8               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'FUNCTION',0(R1)  ++FUNCTION?                07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         CLC   =C'APAR',0(R1)      NO, ++APAR?                07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         LA    R14,4               YES, SET L'NAME            07/85 DBC\n         SPACE 1                                              07/85 DBC\nTP$SAVE  MVC   PTF#TYPE,0(R1)      SAVE SYSMOD TYPE           07/85 DBC\n         SR    R0,R14              DECR LOOP CNTL; TOO FAR?   07/85 DBC\n         BNPR  R10                 YES, RETURN +0             07/85 DBC\n         ALR   R1,R14              NO, ADVANCE SCANNER        07/85 DBC\n         BA&XA R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         CLI   0(R1),C'('          SUB-VALUE?                 07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         BCT   R0,TP$PTF           YES, DECR SCAN LIMIT       07/85 DBC\n         BR    R10                 RETURN +0 IF TOO FAR       07/85 DBC\nTP$PTF   LA    R1,1(,R1)           ADVANCE ONE                07/85 DBC\n         BA&XA R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         B     4(,R10)             RETRUN +4 WITH A POINTER   07/85 DBC\n*                                  TO THE SYSMOD NAME.        07/85 DBC\n         EJECT ,                                              07/85 DBC\n************************************************************* 12/88 SBG\n*  WE WANT TO CHECK IF WE HAVE FILE 1 FROM A REAL CBT TAPE. * 12/88 SBG\n*   IF THAT'S WHAT WE HAVE, WE WANT TO REPORT THE VERSION   * 12/88 SBG\n*   NUMBER AND CREATION DATE OF THAT CBT TAPE.              * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CH  ST    R15,CBSAVE15        SAVE REG 15                12/88 SBG\n         LA    R15,TAPEBUFF        CBT HEADER. LOOK FOR       12/88 SBG\n         CLC   CHJOBLIT,0(R15)     ARNIE CASINGHINO'S JOBNAME 12/88 SBG\n         BE    TEST$CHG            CBT HEADER                 12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    R10                 RETURN NOT FOUND           12/88 SBG\nTEST$CHG MVC   UNLOADER(8),CBHEADER     FLAG AS FILE 1 OF CBT 12/88 SBG\n         MVI   CSTATCLR,X'40'      CLEAR VERS & DATE          12/88 SBG\n         MVC   CBTVERS(12),CSTATCLR   NOW DO IT .             12/88 SBG\n         ST    R4,CBSAVE4          SAVE REG 4                 12/88 SBG\n         LR    R4,R15              ADDR OF TAPE BUFFER        12/88 SBG\n         A     R4,CDOCSIZE         END OF BLOCK ADDRESS       12/88 SBG\nTEST$CHL LA    R15,1(,R15)         SEARCH FOR DATE AND VERSION12/88 SBG\n         CR    R15,R4              END OF BLOCK YET?          12/88 SBG\n         BNL   TEST$CHR            NO DATE OR VERSION FOUND   12/88 SBG\n         CLC   VERSLIT1,0(R15)     DATE HDR FOUND?            12/88 SBG\n         BE    TEST$CHD            YEP. GET DATE.             12/88 SBG\n         CLC   VERSLIT2,0(R15)     VERSION # HDR FOUND?       12/88 SBG\n         BNE   TEST$CHL            NOPE. KEEP TRYING.         12/88 SBG\nTEST$CHV MVC   CBTVERS(4),10(R15)  SAVE VERSION #             12/88 SBG\n         L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         B     TEST$RET            DONE WITH EXTRACTION.      12/88 SBG\nTEST$CHD MVC   CBTDATE(8),10(R15)  SAVE TAPE RELEASE DATE     12/88 SBG\n         B     TEST$CHL            KEEP TRYING FOR VERSION #. 12/88 SBG\nTEST$CHR L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    R10                 RETURN UNSUCCESSFUL        12/88 SBG\n         EJECT                                                12/88 SBG\nF$BLANK  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               GOT A BLANK YET?\n         BER   R14                      YES - RETURN\n         LA    R1,1(,R1)                MOVE SCAN PTR\n         BCT   R0,F$BLANK+2             KEEP SCANNING\n         BR    R10                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nF$CHARS  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               FIND A CHAR?\n         BNER  R14                      YES - RETURN\n         LA    R1,1(,R1)                INCR SCAN PTR\n         BCT   R0,F$CHARS+2             KEEP SCANNING\n         BR    R10                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nTEST$DMP CLC   =X'F47006016663B24D',TAPEBUFF+12  IEHDASDR'S TRADEMARK?\n         BNER  R10                      NO\n         MVC   UNLOADER(8),IEHDASDR     SAY WHO\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         LR    R2,R10                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 IGNORE CCWS\n         SPACE 1\nCOM$DUMP TAPIO TCCW#DAT                 READ FIRST TRK'S DATA\n         MVC   FDRSAVE(8),TAPEBUFF+12   SAVE IN CASE FDR\n         LR    R10,R2                   RETURN\n         B     TEST$RET\n         SPACE 2\nTEST$FDR CLC   =C'THATS ALL FOLK',TAPEBUFF+5   HIS TRADEMARK?\n         BNER  R10                      NO\n         LR    R2,R10                   SAVE RETURN ADDR\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         MVC   UNLOADER(3),FDR          SAY FDR FOR NOW\n         CLI   TAPEBUFF+19,C'S'         WAS IT FDR?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRDSF       NO  - MAYBE FDRDSF\n         CLI   TAPEBUFF+19,C'F'         FDRDSF?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRXXX       NO  - BUT SOME KIND OF FDR?\n         B     COM$DUMP                 CONTINUE\n         SPACE 2\nTEST$SLK CLC   =F'20',LASTSIZE     RIGHT LENGTH FOR SLICK HDR 09/84 DBC\n         BNER  R10\n         CLC   TAPEBUFF+8(12),FFS         FF'S AT END OF RECORD?\n         BNER  R10\n         CLI   TAPEBUFF+1,C'B'          BACKUP FLAG PRESENT?\n         BNER  R10\n         MVC   DASDRSAV(20),TAPEBUFF    SAVE THE FIRST RECORD\n         LR    R2,R10                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 GET 2ND RECORD\n         LR    R10,R2                   RESTORE RETURN ADDR\n         CLC   TAPEBUFF(2),=H'0'        1ST HALFWORD = 0?\n         BNER  R10\n         CLC   TAPEBUFF+2(2),=H'0'      2ND HALFWORD = 0 OR FF'S?\n         BE    TEST$SK1\n         CLC   TAPEBUFF+2(2),FFS\n         BNER  R10\nTEST$SK1 LH    R2,TAPEBUFF+4            VERIFY LENGTH OF RECORD\n         LTR   R2,R2\n         BNPR  R10\n         LA    R2,8(,R2)\n         C     R2,LASTSIZE         LENGTH OK?                09/84 DBC\n         BNER  R10\n         CLC   TAPEBUFF+6(2),=H'0'      LAST HALF OF RDW = 0?\n         BNER  R10\n         MVC   UNLOADER(8),SLICKMNG     SHOW SLICKMNG AS UNLOADER\n         B     TEST$RET                 RETURN TO MAINLINE\n         SPACE 3\n* FOR IEBISAM, THE BEGINNING OF THE DCB IS UNLOADED TO THE FIRST\n* TWO CARDS.  SO CHECK (GUESS?) IF IT LOOKS LIKE AN ISAM DCB\nTEST$IS  CLC   TAPEBUFF(4),=Y(0,154)    SEQ # AND LENGTH CORRECT?\n         BNER  R10                      NO\n         CLC   TAPEBUFF+80(2),H1        SECOND SEQ # CORRECT\n         BNER  R10                      NO\n         TM    TAPEBUFF+4+48,X'10'      DCBOFLGS,DCBOFOPN\n         BNOR  R10                      NOT \"OPEN\"\n         CLI   TAPEBUFF+4+26,X'80'      DSORG=IS?\n         BE    *+10                     YES - CONTINUE\n         CLI   TAPEBUFF+4+26,X'81'      DSORG=ISU?\n         BNER  R10                      NO\n         MVC   UNLOADER(7),IEBISAM      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 3\nTEST$MAP CLC   =C'$$TAPEMAP.PRINT.FILE$$',TAPEBUFF  CHECK FOR HEADER\n         BNER  R10                      NO\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZR  R10                      NO\n         MVC   UNLOADER(7),CTAPEMAP     YES - THIS IS FOR US\n         B     TEST$RET\n         EJECT\nIEBUPDT1 MVC   OUTBUFF2+8(27),=C'IS AN IEBUPXXX INPUT STREAM' 07/85 DBC\n         MVC   OUTBUFF2+14(8),IEBUPXXX CORRECT RELOADER NAME  07/85 DBC\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTFS1    MVC   OUTBUFF2+8(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM' C\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nCBT1     CLC   CBTEMPTY,UNLOADER        CBT EMPTY FILE        11/88 SBG\n         BE    CBTEMP1                  PRINT SPECIAL INFO    11/88 SBG\n         MVC   OUTBUFF2+8(28),=C'IS IN CBT973 COMPRESS FORMAT'  /88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTEMP1  MVC   OUTBUFF2+8(25),=C'IS AN EMPTY CBT TAPE FILE'   11/88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTDOC1  MVC   OUTBUFF2+8(27),=C'CBT TAPE DOCUMENTATION FILE' 12/88 SBG\n         B     PRT$ONE             GO RELOOP                  12/88 SBG\n         SPACE 3                                              12/88 SBG\nIEHMOVE1 MVC   #BLKCNT+OUTBUFF2-OUTBUFF(4),=C'DSN='\n         MVC   #BLKCNT+OUTBUFF2-OUTBUFF+4(44),TAPEBUFF+85 MOVE DISK DSN\n         SPACE 1\n         BA&XA R10,SET$ONE\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 3\nIEBCOPY1 BA&XA R10,SET$ONE\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 3\nIEBISAM1 BA&XA R10,SET$ONE\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 3\nSET$ONE  MVC   OUTBUFF2+8(24),=C'TRUE ATTRIBUTES:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+32 FORMAT THE DSORG\n         ICALL CNVRECFM,R14,R15=#RECFM+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,4(,R10)               POINT TO BLKSIZE\n         ICALL CONVHALF,R14,R15=#BLKSIZE-1+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,6(,R10)               POINT TO LRECL\n         ICALL CONVHALF,R14,R15=#LRECL-1+OUTBUFF2-OUTBUFF\n         SPACE 2\n*  FOR PARM=INLINE, THE REPORT MUST PRINT BOTH THE RESULTS    12/88 SBG\n*  OF THE LABEL PROCESSING (FOR SL) AND THE RESULTS OF THE    12/88 SBG\n*  SCAN PROCESSING.                                           12/88 SBG\nPRT$ONE  TM    TFLAG1,T1@SL             SL TAPE?              12/88 SBG\n         BNO   PRT$ONEX                 NO. DO NORMAL STUFF   12/88 SBG\n         TM    PARMFLAG,PF@INLIN        INLINE ?              12/88 SBG\n         BO    FIND$EOF                 REGULAR INLINE STUFF  12/88 SBG\nPRT$ONEX TM    TFLAG1,T1@ANLZ           ANALYZING?            12/88 SBG\n         BNO   FIND$EOF                 NO\n         B     NL$LOOP                  YES - KEEP SCANNING NL TAPE\n         SPACE 3\n*  FIRST RECORD SAVED IN \"DASDRSAV\"\nIHDASDR1 MVC   OUTBUFF2+8(15),=C'DUMP FROM CCHH='\n         UNPK  OUTBUFF2+23(9),DASDRSAV+0(5)\n         TR    OUTBUFF2+23(8),HEXTAB    MAKE EBCDIC\n         MVC   OUTBUFF2+31(5),=C' OF A'\n         IC    R1,DASDRSAV+21           GET DEVTYPE\n         N     R1,=F'255'               CLEAN\n         MH    R1,=H'6'\n         LA    R14,=C'2321  2311  2314  2302  2301  2305-12305-23330  3*\n               340  3350  3375  3330-13380  3390  '           03/94 SBG\n         LA    R14,0(R14,R1)            GET ADDR OF THIS DEVTYPE\n         MVC   OUTBUFF2+37(6),0(R14)    MOVE TO PRINT LINE\n         CLC   =F'0',DASDRSAV+8         THIS TAPE START AT 0?\n         BNE   PRT$ONE                  NO - CAN'T FIND VOLSER\n*  SECOND RECORD IS IN \"TAPEBUFF\"\n         CLC   =C'VOL1VOL1',TAPEBUFF+216  LABEL?\n         BNE   PRT$ONE                  NO - SKIP\n         MVC   OUTBUFF2+46(7),=C'VOLUME='\n         MVC   OUTBUFF2+53(6),TAPEBUFF+224\n         MVC   OUTBUFF2+61(6),=C'OWNER='\n         MVC   OUTBUFF2+67(10),TAPEBUFF+261\n         B     PRT$ONE\n         SPACE 3\n* FIRST RECORD SAVED IN \"DASDRSAV\"\nFDR1     MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR1LOOP CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR1FND                  YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR1LOOP\nFDR1FND  MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         CLC   =C'DUMMYDSF',FDRSAVE     IS IT A NORMAL DUMP?\n         BE    PRT$ONE                  YES - ALL FOR NOW\n*                                       NO  - MUST BE ABS TRK DUMP\n         MVC   OUTBUFF2+28(22),=C' (ABSOLUTE TRACK DUMP)'\n         B     PRT$ONE\n         SPACE 3\nSLK1     MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         B     PRT$ONE                  PRINT THE INFO LINE\n         EJECT\nIEHMOVE2 LA    R0,7                     ASSUME PARM=NOMEM\n         TM    PARMFLAG,PF@NOMEM        IS IT?\n         BO    *+8                      YES\n         LA    R0,9                     NO\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BO    *+8                      YES\n         LA    R0,7                     NO\n         NEWPAGE  (R0),2                ENOUGH LINES LEFT ON PAGE?\n         SPACE 1\n         BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEHMOVE   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+282 CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT FIRST INFO LINE\n         SPACE 1\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FOR MSM\n         MVC   OUTBUFF2+25(7),=C'C-DATE='\n         ICALL CONVDATE,R10,R1=TAPEBUFF+138,R15=OUTBUFF2+32 C-DATE\n         SPACE 1\n         MVC   OUTBUFF2+42(7),=C'E-DATE='\n         ICALL CONVDATE,R10,R1=TAPEBUFF+141,R15=OUTBUFF2+49 E-DATE\n         SPACE 1\n         MVC   OUTBUFF2+59(4),=C'DSN='\n         MVC   OUTBUFF2+63(44),TAPEBUFF+85       MOVE IN OLD DSN\n         SPACE 1\n****     CLC   =C'VS2',TAPEBUFF+152     CHECK PROGRAMMING SYSTEM\n****     BE    MV$NOVOL                 SKIP IF OS/VS2\n         TM    TAPEBUFF+132,X'0F'       SEE IF LOOKS LIKE PACKED DATE\n         BO    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         CLI   TAPEBUFF+135,0           INVALID FOR VOLSER ANYWAY?\n         BE    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         MVC   OUTBUFF2+120(4),=C'VOL='\n         MVC   OUTBUFF2+124(6),TAPEBUFF+130\n         SPACE 1\nMV$NOVOL PRTLN2                         PRINT SECOND INFO LINE\n         SPACE 2\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BNO   STAR$TWO                 NO - SKIP\n         BA&XA R10,FMU$                 PRINT HEADER\n         SPACE 2\n         L     BLEN,LASTSIZE       GET SIZE OF BLOCK          09/84 DBC\n         SH    BLEN,=H'80'              MINUS FIRST CARD USED\n         LA    BPTR,TAPEBUFF+80         -> NEXT CARD TO USE\n         BA&XA R10,SEG$NEXT             NOW HAVE CARDS 1 & 2\n         BA&XA R10,SEG$NEXT             NOW 2 & 3\n         BA&XA R10,SEG$NEXT             NOW 3 & 4\n         BA&XA R10,SEG$NEXT             NOW 4 & 5\n         LA    DPTR,MV#BUFF1+46         -> FIRST MEMBER NAME -4\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         LA    DPTR,3(,DPTR)            -> OTHER PLACE\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         BA&XA R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$GOT1  LA    DPTR,4(,DPTR)            -> FIRST MEMBER NAME\n         SPACE 2\nMV$LOOP  BA&XA R10,MOVE$MEM             MEMBER NAME TO PRINT LINE\n         BA&XA R10,SEG$TEST             SEE IF WITHIN RANGE\n         SPACE 2\n*  RECORDS IN AN IEHMOVE UNLOADED DATASET HAVE THE FOLLOWING FORMAT:\n*  FIRST 2 BYTES OF EACH CARD IS A BINARY SEQUENCE NUMBER.\n*  AFTER THAT, THERE IS SOME HEADER INFO (THE FMT1 DSCB + OTHER JUNK),\n*  THEN THE RECORDS IN THIS FORMAT:  LENGTH OF THIS \"RECORD\", 1 BYTE\n*  INDICATOR WITH THE FOLLOWING BIT MEANINGS:\n*    X'80' -> 3 BYTE TTR FOLLOWS INDICATOR BYTE\n*    X'40' -> UNLOADED DS IS PDS\n*    X'20' -> RECORD IS PART OF A MEMBER\n*    X'10' -> RECORD IS A NOTE LIST\n*    X'08' -> RECORD IS A DIRECTORY ENTRY\n*    X'04' -> RECORD IS A DUMMY RECORD\n*  THIS INFORMATION IS IN THE SOURCE TO MODULE IEHMVSRA\n         SPACE 1\nMV$NXTBL CLI   2(DPTR),X'E0'            DATA RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'D0'            NOTE LIST RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'C8'            DIRECTORY RECORD?\n         BE    MV$MEND                  YES\n         CLI   2(DPTR),X'C4'            DUMMY RECORD?\n         BE    MV$DUMMY                 YES\n         CLI   2(DPTR),X'0A'            END OF DS?\n         BNH   DIR$END                  YES\n*** LOGIC ERROR ***\n         PRTLN2                         PRINT (POSSIBLY) UNFINISHED LIN\n         BA&XA R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$DUMMY MVC   DWD(2),0(DPTR)           COPY LENGTH TO ALIGNED PLACE\n         LH    DLEN,DWD                 LOAD LENGTH OF DUMMY RECORD\n         LA    DPTR,12(DPTR,DLEN)       POINT TO NEXT\n         BA&XA R10,SEG$TEST             MAKE SURE STILL WITHIN RANGE\n         B     MV$LOOP                  DO NEXT MEMBER NAME\n         SPACE 2\nMV$REC   MVC   DWD(2),0(DPTR)           COPY LEN TO ALIGNED PLACE\n         LH    DLEN,DWD                 GET BLOCK LENGTH\n         LA    DPTR,6(DPTR,DLEN)        POINT PAST LEN,E0,TTR,DATA\n         SPACE 2\nMV$SCAN  CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BL    MV$NXTBL                 YES - PROCESS NEXT BLOCK\n         BA&XA R10,SEG$NEXT             SKIP 78 BYTES\n         B     MV$SCAN                  KEEP GOING\n         SPACE 2\nMV$MEND  LA    DPTR,6(,DPTR)            -> MEMBER NAME\n         BA&XA R10,SEG$TEST             WITHIN RANGE?\n         B     MV$LOOP                  GO PRINT NEXT NAME\n         SPACE 2\nSEG$TEST CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BLR   R10                      YES - JUST RETURN\n         SPACE 1\nSEG$NEXT MVC   MV#BUFF1,MV#BUFF2\n         LTR   BLEN,BLEN                ANY LEFT?\n         BP    SEG$MVC                  YES - USE IT\n         BZ    *+8                      NO\n* RAN OFF END OF DATASET\n***      EX    0,*                      *** LOGIC ERROR ***\n         B     DIR$END                  FORGET THAT - IT'S THE END\n         SPACE 1\n         ST    R10,R10SAVE              SAVE RETURN ADDR\n         TAPIO TCCW#DAT,TM=SEG$EOF      READ ANOTHER BLOCK\n         L     R10,R10SAVE              RESTORE RETURN ADDR\n         LA    BPTR,TAPEBUFF            RESET PTR\n         L     BLEN,LASTSIZE       AND LENGTH LEFT            09/84 DBC\n         SPACE 1\nSEG$MVC  SH    BLEN,=H'80'              DECR LENGTH LEFT / THIS BLOCK\n         MVC   MV#BUFF2,2(BPTR)         MOVE A SEGMENT\n         LA    BPTR,80(,BPTR)           -> NEXT SEGMENT\n         SH    DPTR,=H'78'              BACK UP DATA PTR\n         BR    R10                      RETURN TO CALLER\n         SPACE 2\nSEG$EOF  BCTR  BLEN,0                   SET FLAG\n         L     R10,R10SAVE              RESTORE RETURN ADDR\n         OI    TFLAG1,T1@MVEOF          REMEMBER HIT EOF\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nCONVDATE SR    R0,R0                    CLEAR FOR IC\n         IC    R0,0(,R1)                GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  0(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    2(R15),C'0'              FIX SIGN\n         MVC   0(2,R15),1(R15)          MOVE YEAR OVER\n         MVI   2(R15),C'.'              PUT IN THE DOT\n         MVC   DWD(2),1(R1)             MOVE DAY TO ALIGNED PLACE\n         LH    R0,DWD                   GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  3(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    5(R15),C'0'              FIX THE SIGN\n         BR    R10                      RETURN TO CALLER\n         EJECT\nIEBCOPY2 LA    R0,7                     ASSUME MEMBERS\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEMBERS?\n         BNO   *+8                      NOPE - OK\n         LA    R0,5                     NO MEMBERS\n         NEWPAGE  (R0),2                TEST LINE COUNTER\n         SPACE 1\n         BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBCOPY   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+24  FORMAT THE UNIT TYPE\n         SPACE 2\n         BA&XA R10,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\n         TAPIO TCCW#DAT                 IGNORE THE NEXT BLOCK\n         SPACE 2\nIBCPY$LP TAPIO TCCW#DAT                 READ A DIRECTORY BLOCK\n         LH    BLEN,TAPEBUFF+4          GET RDW\n         SH    BLEN,=H'8'               -8 FOR BDR & RDW\n         LA    BPTR,TAPEBUFF+8          INIT BLOCK PTR\n         SPACE 2\nDIR$NEXT LA    DPTR,22(,BPTR)           INIT DIR BLK PTR\n         LH    DLEN,20(,BPTR)           GET LENGTH USED\n         SH    DLEN,=H'2'               LENGTH OF DATA\n         SPACE 2\nDIR$LP   CLC   0(8,DPTR),=8X'FF'        END OF DIRECTORY?\n         BE    DIR$END                  YES - DONE\n         BA&XA R10,MOVE$MEM             MOVE NAME TO PRINT LINE\n         LTR   DLEN,DLEN                ANYTHING LEFT?\n         BP    DIR$LP                   CONTINUE IF MORE LEFT\n         LA    BPTR,256+12+8(,BPTR)     NEXT DIRECTORY BLOCK\n         SH    BLEN,=Y(256+12+8)        DECR LENGTH LEFT\n         BP    DIR$NEXT                 MORE IN THIS TAPE BLOCK\n         B     IBCPY$LP                 GET NEXT BLOCK FROM TAPE\n         SPACE 2\nDIR$END  LA    R0,OUTBUFF2+16           GET START PTR FOR COMPARE\n         CR    R0,PPTR                  ANY ON THIS LINE?\n         BE    STAR$TWO                 NO - DONE\n         PRTLN2                         PRINT PARTIAL LINE\n         B     STAR$TWO                 CONTINUE PROCESSING\n         SPACE 3\nMOVE$MEM MVC   0(8,PPTR),0(DPTR)        MOVE NAME TO PRINT LINE\n         IC    R1,11(,DPTR)             GET USER DATA LENGTH\n         N     R1,=F'31'                STRIP OFF JUNK\n         LA    R1,12(R1,R1)             GET LENGTH OF ENTRY\n         AR    DPTR,R1                  ADVANCE DIR PTR\n         SR    DLEN,R1                  DECR LENGTH LEFT\n         SPACE 1\n         LA    PPTR,10(,PPTR)           NEXT PRINT LINE POSITION\n         CL    PPTR,OB2END              END OF PRINT LINE?\n         BNHR  R10                      NO - RETURN\n         LR    PPTR,R10                 SAVE RETURN ADDR\n         PRTLN2                         PRINT IT\n         LR    R10,PPTR                 RESTORE RETURN ADDR\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         BR    R10                      RETURN TO CALLER\n         EJECT ,                                              09/84 DBC\nIEBUPDT2 LA    R0,7\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?\n         BNO   *+8                      NO\n         LA    R0,5                     YES\n         NEWPAGE  (R0),2\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(27),=C'IS AN IEBUPXXX INPUT STREAM' 6/84 DBC\n         MVC   OUTBUFF2+37(8),IEBUPXXX CORRECT RELOADER NAME  06/84 DBC\n         MVC   OUTBUFF2+58(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > X\n               = SUBORDINATE NAME'                            11/88 SBG\n         BA&XA R10,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\nUPDTE$L1 LA    BLEN,80                  BXLE INCR\n         LA    DPTR,TAPEBUFF            POINT TO START\n         LR    BPTR,DPTR                COPY START ADDR\n         A     BPTR,LASTSIZE       POINT PAST END OF BLOCK    09/84 DBC\n         SR    BPTR,BLEN                BACK UP FOR BXLE\n         SPACE 1\nUPDTE$L2 LR    R1,DPTR                  COPY CARD ADDR\n         BA&XA R10,TEST$UP              IS THIS ONE?\n         B     UPDTE$BX                 NO - SKIP\n         SPACE 1\n         MVC   0(1,PPTR),UPDT#TYP       MOVE A,R,C\n         MVI   1(PPTR),C'-'             SEPARATOR\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   UPDTE$LB                 NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nUPDTE$LB DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME\n         LA    R1,1(,PPTR)\nUPDTE$L3 CLI   0(R1),C','               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         CLI   0(R1),C' '               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         LA    R1,1(,R1)                INCR SCAN PTR\n         B     UPDTE$L3                 CONTINUE\n         SPACE 1\nUPDTE$EM MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR\n         CL    PPTR,OB2END2             PAST END?\n         BNH   UPDTE$BX                 NO - CONTINUE\n         PRTLN2                         PRINT THE MEMBERS\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         SPACE 1\nUPDTE$BX BXLE  DPTR,BLEN,UPDTE$L2       KEEP SCANNING\n         TAPIO TCCW#DAT,TM=UPDT$EOF     GET NEXT BLOCK\n         B     UPDTE$L1                 GO CHECK IT\n         SPACE 2\nUPDT$EOF OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"\n         B     DIR$END                  CLEAN UP\n         EJECT ,                                              07/85 DBC\nCBT2     DS    0H   INSERT CODE TO DISPLAY MEMBERS FOR CBT973.11/88 SBG\n         LA    R0,7                                           11/88 SBG\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?           11/88 SBG\n         BNO   *+8                      NO                    11/88 SBG\n         LA    R0,5                     YES                   11/88 SBG\n         NEWPAGE  (R0),2                                      11/88 SBG\n         BA&XA R10,SET$FULD             SET UP HEADER INFO    11/88 SBG\n         DC    4Y(0)                    FILLER                11/88 SBG\n         MVC   OUTBUFF2+31(27),=C'IS A CBT973 COMPRESSED FILE' 1/88 SBG\n         MVC   OUTBUFF2+58(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > X\n               = SUBORDINATE NAME'                            11/88 SBG\n         BA&XA R10,FMU         'FOLLOWING MEMBERS UNLOADED:'  11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   SAVE REGISTERS USED FOR CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   **************          CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$D00  STM   R1,R5,CBSTOR01           REGS 1 THRU 5         11/88 SBG\n         STM   R8,R10,CBSTOR08          REGS 8 THRU 10        11/88 SBG\n         LA    R5,TAPEBUFF     BEGINNING OF BLOCK PROCESSING. 11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           GET BLOCK SIZE FROM BDW    11/88 SBG\n         ST    R1,CBTBLK1          STORE BLOCK SIZE FOR LATER 11/88 SBG\n         AR    R1,R5               POINT PAST E-O-BLOCK       11/88 SBG\n         ST    R1,CBTAPEND         REMEMBER E-O-BLOCK ADDRESS 11/88 SBG\n         L     R1,CBSTOR1          RESTORE R1.                11/88 SBG\n         LA    R5,4(,R5)                POINT TO RDW          11/88 SBG\n*                              BEGINNING OF RECORD PROCESSING.11/88 SBG\nCBT$D0B  LA    R8,14(,R5)          POINT TO BEGIN OF DATA     11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         ST    R6,CBSTOR06         USE R6 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           STORE RECORD SIZE FROM RDW 07/90 SBG\n*   THIS IS NEVER BIGGER THAN 94 -- LET ALONE 255 ||          11/88 SBG\n         C     R1,=F'94'           LRECL=94 MAX FOR CBT973    07/90 SBG\n         BH    CBT$EOF             BREAK OUT OF LOOP IF BIGGER07/90 SBG\n         S     R1,=F'12'           -12 JUST TO GO PAST DATA   11/88 SBG\n*                                   AND LAST 2 HEADER BITS    11/88 SBG\n         LA    R5,2(,R5)           HALFWAY TO HEADER BITS     11/88 SBG\n         MVI   CBTCLEAR,X'40'      MOVE IN BLANK TO ...       11/88 SBG\n         MVC   CBTCARD,CBTCLEAR       CLEAR 80-BYTE WORKAREA. 11/88 SBG\n         LA    R2,CBTCARD          ADDRESS OF 80-BYTE CARD    11/88 SBG\n         LA    R6,5                5 LOOPS TO EXPAND CARD     11/88 SBG\nCBT$D0C  EQU   *                   EXPAND 16 BYTES AT A TIME  11/88 SBG\n         LA    R4,16               LOOP COUNTER               11/88 SBG\n         LA    R5,2(,R5)           BUMP HEADER BIT POINTER    11/88 SBG\n         ICM   R3,12,0(R5)         2 BYTES MASK BITS TO SLIDE 11/88 SBG\nCBT$D0D  EQU   *                   INNER LOOP TO DO 16 BYTES  11/88 SBG\n         ST    R2,CBSTOR2          TEMP SAVE R2               02/93 RT\n         SLR   R2,R2               CLEAR TARGET REGISTER      11/88 SBG\n         SLDL  R2,1                SLIDE OVER ONE MASK BIT    11/88 SBG\n         LTR   R2,R2               IS BIT 0 OR 1 ?            11/88 SBG\n         L     R2,CBSTOR2          RESTORE R2                 02/93 RT\n         BZ    CBT$D0F             IF 0, NEEDS BLANK TO FILL  11/88 SBG\n         MVC   0(1,R2),0(R8)       MOVE THE NON-BLANK         11/88 SBG\n         LA    R8,1(,R8)           BUMP DATA PTR TO NEXT BYTE 11/88 SBG\nCBT$D0E  EQU   *                   RESTORE THE CARD-IMAGE     11/88 SBG\n         LA    R2,1(,R2)           POINT TO NEXT CARD BYTE    11/88 SBG\n         BCT   R4,CBT$D0D          RESTORE 16-BYTE GROUP      11/88 SBG\n         BCT   R6,CBT$D0C          DO THAT 5 TIMES            11/88 SBG\n         AR    R5,R1               BUMP POINTER TO NEXT RDW.  11/88 SBG\n         LM    R1,R4,CBSTOR01      REGS 1 THRU 4. 5 HAS PTR   11/88 SBG\n         LM    R8,R10,CBSTOR08     REGS 8 THRU 10             11/88 SBG\n*        L     R6,CBSTOR06         RESTORE R6. USED FOR PPTR. 11/89 SBG\n         B     CBT$L2              ONE CARD IS RESTORED, FOR  11/88 SBG\n*                                   PURPOSES OF EXAMINATION.  11/88 SBG\nCBT$D0F  EQU   *                   RTN TO INSERT A BLANK      11/88 SBG\n         MVI   0(R2),X'40'         MOVE BLANK IN TO DECOMPRESS11/88 SBG\n         B     CBT$D0E             CONTINUE RESTORING CARD.   11/88 SBG\n         SPACE 1                                              11/88 SBG\n*   **************   END OF CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*  AT THIS POINT, A CARD-IMAGE OF DATA IS RESTORED INTO       11/88 SBG\n*    THE FIELD, CBTCARD.  WE THEN USE REGULAR IEBUPDTE        11/88 SBG\n*    PROCESSING TO LOOK FOR MEMBER NAMES.                     11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$L2   L     PPTR,CBSTOR06       RESTORE REGISTER PPTR      11/88 SBG\n         LA    R1,CBTCARD          LOAD CARD ADDRESS          11/88 SBG\n         ST    R5,CBSTOR05         SAVE RECD PTR              11/88 SBG\n         BA&XA R10,TEST$UP         IS THIS A MEMBER INDICATOR 11/88 SBG\n         B     CBT$BX              NO - SKIP TO THE NEXT CARD 11/88 SBG\n         L     R5,CBSTOR05         RESTORE RECD PTR           11/88 SBG\n         SPACE 1                                              11/88 SBG\n         MVC   0(1,PPTR),UPDT#TYP    MOVE A,R,C               11/88 SBG\n         MVI   1(PPTR),C'-'             SEPARATOR             11/88 SBG\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   CBT$LB                   NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nCBT$LB   DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME           11/88 SBG\n         LA    R1,1(,PPTR)                                    11/88 SBG\nCBT$L3   CLI   0(R1),C','               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         CLI   0(R1),C' '               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         LA    R1,1(,R1)                INCR SCAN PTR         11/88 SBG\n         B     CBT$L3                   CONTINUE              11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$EM   MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE     11/88 SBG\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR   11/88 SBG\n         CL    PPTR,OB2END2             PAST END?             11/88 SBG\n         BNH   CBT$BX                   NO - CONTINUE         11/88 SBG\n         ST    R5,CBSTOR05              SAVE RECD PTR         11/88 SBG\n         PRTLN2                         PRINT THE MEMBERS     11/88 SBG\n         LA    PPTR,OUTBUFF2+16         RESET PTR             11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$BX   L     R5,CBSTOR05              RESTORE RECD PTR      11/88 SBG\n         C     R5,CBTAPEND              AT END OF BLOCK YET?  11/88 SBG\n         BL    CBT$D0B                  NO. GET NEXT RECORD   11/88 SBG\n*    TRY TO RESTORE REGISTERS THAT MIGHT BE USED ELSEWHERE.   11/88 SBG\n         TAPIO TCCW#DAT,TM=CBT$EOF      GET NEXT BLOCK        11/88 SBG\n         B     CBT$D00                  GO CHECK IT           11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$EOF  OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"         11/88 SBG\n         B     DIR$END                  CLEAN UP              11/88 SBG\n         EJECT ,                                              11/88 SBG\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n*        THE CURRENT TAPE FILE CONTAINS SMPPTFIN SYSMODS.   * 07/85 DBC\n*        SCAN THE FILE TO GET THE NAMES OF THE SYSMODS      * 07/85 DBC\n*        CONTAINED THEREIN, AND DISPLAY THEM.               * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTFS2    LA    R0,7                REQUIRED HEADER SPACE      07/85 DBC\n         TM    PARMFLAG,PF@NOMEM   SCAN FOR \"MEMBERS\"?        07/85 DBC\n         BNO   *+8                 YES, PROCEED               07/85 DBC\n         LA    R0,5                NO, DON'T NEED SO MUCH     07/85 DBC\n         NEWPAGE (R0),2            WIDOW PREVENTION           07/85 DBC\n         SPACE 1                                              07/85 DBC\n         BA&XA R10,SET$FULD        MESSAGE SETUP              07/85 DBC\n         DC    4Y(0)                    FILLER                07/85 DBC\n         MVC   OUTBUFF2+31(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM'\n         MVC   OUTBUFF2+66(43),=C':   A-APAR   F-FUNCTION   P-PTF   U-U*\n               SERMOD'             DEFINITIONS                07/85 DBC\n         BA&XA R10,FMU             DISPLAY THE MESSAGE        07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTF$L1   LA    BLEN,80             BXLE INCRIMENT             07/85 DBC\n         LA    DPTR,TAPEBUFF       BXLE SCANNER               07/85 DBC\n         LR    BPTR,DPTR           SET -                      07/85 DBC\n         AL    BPTR,LASTSIZE        BXLE-                     07/85 DBC\n         SLR   BPTR,BLEN             LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$L2   LR    R1,DPTR             MESSAGE SINK SCANNER       07/85 DBC\n         BA&XA R10,TEST$PT         DOES THE CURRENT CARD NAME 07/85 DBC\n*                                  THE START OF A NEW SYSMOD? 07/85 DBC\n         B     PTF$BX              +0 NO, SKIP                07/85 DBC\n         MVC   0(1,PPTR),PTF#TYPE  +4 YES, GET SYSMOD TYPE    07/85 DBC\n         MVI   1(PPTR),C'-'        FRAME                      07/85 DBC\n         MVC   2(7,PPTR),0(R1)     SYSMOD NAME (ALWAYS SEVEN  07/85 DBC\n*                                  CHARACTERS LONG)           07/85 DBC\n         LA    PPTR,10(,PPTR)      ADVANCE SINK SCANNERR      07/85 DBC\n         CL    PPTR,OB2END2        IS MSG LINE FULL?          07/85 DBC\n         BNH   PTF$BX              NOT YET; GOO LOOP          07/85 DBC\n         PRTLN2 ,                  YES, PRINT THE LINE        07/85 DBC\n         LA    PPTR,OUTBUFF2+16    RESET SINK SCANNER         07/85 DBC\nPTF$BX   BXLE  DPTR,BLEN,PTF$L2    CONTINUE SCANNING THE BLK  07/85 DBC\n         SPACE 1                                              07/85 DBC\n         TAPIO TCCW#DAT,TM=PTF$EOF READ NEXT BLOCK            07/85 DBC\n         B     PTF$L1              LOOP TO SCAN IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$EOF  OI    TFLAG1,T1@MVEOF     EOF; REMEMBER              07/85 DBC\n         B     DIR$END             GO DISPLAY FILE            07/85 DBC\n*                                  DESCRIPTION MESSAGES       07/85 DBC\n         EJECT ,                                              07/85 DBC\nIEBISAM2 BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBISAM   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+4+17-3  CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT SECOND INFO LINE\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nFDR2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(14),=C'WAS DUMPED BY ' SET UP UNLOADER\n         MVC   OUTBUFF2+45(6),UNLOADER            MESSAGE\n         CLC   FDRSAVE,=C'DUMMYDSF'     NORMAL DUMP?\n         BE    *+10                     YES\n*                                       NO  - WARN USER\n         MVC   OUTBUFF2+54(22),=C' (ABSOLUTE TRACK DUMP)'\n         PRTLN2                         PRINT THE HEADER\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    FDR2NODT                 NO\n*                                       YES - CHECK DUMP TYPE\n         CLC   FDRSAVE,=C'DUMMYDSF'     WAS IT A DSF'ABLE DUMP?\n         BNE   FDR2ABS                  NO\n*                                       YES - ISSUE MESSAGE\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING DATA SETS DUMPED:'\n         PRTLN2\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2\nFDR2LOOP CLC   =C'DUMMYDSF',TAPEBUFF+12 IS THIS A DSCB BLOCK?\n         BNE   FDR2VOL                  NO  - TRY FOR VOLSER\n*                                       YES\n         LA    R5,TAPEBUFF+40           POINT TO FIRST DSCB\n         LH    R6,TAPEBUFF+30           GET DSCB COUNT THIS BLOCK\nFDR2DSCB LTR   R6,R6                    MORE DSCB'S TO GO?\n         BNP   FDR2NBLK                 NO  - GET NEXT BLOCK\n*                                       YES\n         CLI   44(R5),C'1'              FORMAT 1 DSCB?\n         BNE   FDR2NDSC                 NO\n*                                       YES\n         CLC   LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    FDR2DSCC                 NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nFDR2DSCC MVC   OUTBUFF2+DSFDSN(44),0(R5)   MOVE IN DSNAME\n         LH    R14,98(,R5)                 GET LAST TRACK USED\n         LA    R14,1(,R14)                 MAKE 1 RELATIVE\n         STH   R14,98(,R5)                 SAVE IT BACK\n         ICALL CONVHALF,R14,R1=98(,R5),R15=OUTBUFF2+DSFTRK\n         ICALL CNVRECFX,R14,R1=84(,R5),R15=OUTBUFF2+DSFRECFM\n         ICALL CONVHALF,R14,R1=88(,R5),R15=OUTBUFF2+DSFLRECL-1\n         ICALL CONVHALF,R14,R1=86(,R5),R15=OUTBUFF2+DSFBLKSZ+1\n         ICALL CNVDSORX,R14,R1=82(,R5),R15=OUTBUFF2+DSFDSORG\n         ICALL CONVDATE,R10,R1=53(,R5),R15=OUTBUFF2+DSFCDATE\n         ICALL CONVDATE,R10,R1=56(,R5),R15=OUTBUFF2+DSFEDATE\n         TM    93(R5),X'40'            RACF DEFINED?\n         BZ    *+10                    NO\n         MVC   OUTBUFF2+DSFSECUR+5(4),=C'RACF'   YES\n         TM    93(R5),X'10'            PASSWORD?\n         BZ    FDR2PRT                 NO\n         MVC   OUTBUFF2+DSFSECUR(4),=C'WPWD'  YES - ASSUME WPWD\n         TM    93(R5),X'04'            READ PSWD REQUIRED?\n         BO    *+8                     NO\n         MVI   OUTBUFF2+DSFSECUR,C'R'  YES\n         TM    93(R5),X'50'            BOTH RACF/PSWD?\n         BNO   FDR2PRT                 NO\n         MVI   OUTBUFF2+DSFSECUR+4,C'/'  YES\nFDR2PRT  PRTLN2                        PRINT THE LINE\nFDR2NDSC LA    R5,148(,R5)             BUMP PAST DSCB/COUNT FIELD\n         S     R6,=F'1'\n         B     FDR2DSCB\nFDR2NBLK TAPIO TCCW#DAT,TM=FDR2EOF     GET NEXT BLOCK\n         B     FDR2LOOP\nFDR2EOF  MVI   OUTBUFF2,C'0'\n         OI    TFLAG1,T1@MVEOF         REMEMBER WE HIT EOF\n       MVC  OUTBUFF2+12(63),=C'0***LISTING TERMINATED. FDR FILE NOT COM$\n               PLETE ON THIS VOLUME***'\n         PRTLN2\nFDR2FAKE MVC   TAPEBUFF+4(4),=X'FFFFFFFF'   FAKE OUT FDR2VOL\nFDR2VOL  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR2VOLA CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR2VOLB                 YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR2VOLA\nFDR2VOLB MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         MVC   OUTBUFF2+28(16),=C'         VOLSER='\n         CLC   UNLOADER(6),FDRDSF       WAS THIS DSF?\n         BE    FDR2VOLM                 YES - NO VOLSER AVAILABLE\n         CLC   =XL4'00',TAPEBUFF+4      DOES DUMP INCLUDE CYL/TRK 0/0?\n         BNE   FDR2VOLM                 NO  - NO VOLSER AVAILABLE\n*                                       YES\n         LA    R1,TAPEBUFF+20           POINT TO FIRST COUNT FIELD\n         LA    R0,TAPEBUFF              POINT TO 2ND TRACK IN BLOCK\n         AH    R0,TAPEBUFF+2\nFDR2VOLC CLC   0(5,R1),=X'0000000003'   POINTING TO REC 3 ON TRK 0?\n         BE    FDR2VOLG                 YES\n         BH    FDR2VOLM                 NO - AND NO VOLSER AVAIL\n         SR    R15,R15\n         IC    R15,5(,R1)               GET KEY LENGTH\n         AH    R15,6(,R1)               ADD IN DATA LENGTH\n         LA    R1,8(R15,R1)             POINT TO NEXT RECORD\n         CR    R1,R0                    PAST TRACK 0?\n         BNL   FDR2VOLM                 YES\n         B     FDR2VOLC                 NO  - KEEP GOING\nFDR2VOLG CLC   8(8,R1),=C'VOL1VOL1'     GOT VOL LABEL?\n         BNE   FDR2VOLM                 NO  - STRANGE\n         MVC   OUTBUFF2+44(6),16(R1)    YES - MOVE IT INTO MSG\n         B     FDR2VOLP\nFDR2VOLM MVC   OUTBUFF2+43(14),=C' NOT AVAILABLE'\nFDR2VOLP PRTLN2\n         B     STAR$TWO\nFDR2ABS  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(63),=C'ABSOLUTE TRACK DETAILS NOT AVAILABLE $\n               IN THIS VERSION OF TAPEMAP'\n         PRTLN2\n         B     FDR2FAKE\nFDR2NODT CLC   =C'DUMMYDSF',TAPEBUFF+12  DSCB BLOCK?\n         BNE   FDR2VOL                   NO  - CHECK FOR VOLSER\n         TAPIO TCCW#DAT,TM=FDR2EOF       YES - CHECK NEXT BLOCK\n         B     FDR2NODT\n         SPACE 3\nSLK2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(16),=C'WAS UNLOADED BY ' SET UP UNLOADER\n         MVC   OUTBUFF2+47(8),UNLOADER            MESSAGE\n         PRTLN2                         PRINT THE HEADER\n         MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         PRTLN2                         PRINT FIRST INFO LINE\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    STAR$TWO                 NO\n*                                       YES\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         PRTLN2\nSLK2LOOP OC    TAPEBUFF(2),TAPEBUFF     IS THIS A HEADER BLOCK?\n         BNZ   SLK2NBLK                 NO  - TRY NEXT BLOCK\n*                                       YES\n         CLC   LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    SLK2MGO                  NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nSLK2MGO  MVC   OUTBUFF2+SLKMEM(10),TAPEBUFF+8   MEMBER NAME\n         MVI   OUTBUFF2+SLKSTAT-1,C'.'          .\n         MVC   OUTBUFF2+SLKSTAT(4),TAPEBUFF+18  STATUS\n         ICALL CONVP2,R14,R1=TAPEBUFF+32,       REVISION               X\n               R15=OUTBUFF2+SLKREV\n         MVC   OUTBUFF2+SLKINFO(8),TAPEBUFF+34  INFO\n         MVC   OUTBUFF2+SLKTYPE(8),TAPEBUFF+42  TYPE\n         ICALL CONVP4,R14,R1=TAPEBUFF+58,       ACTST                  X\n               R15=OUTBUFF2+SLKACTST\n         ICALL CONVP4,R14,R1=TAPEBUFF+62,       DELST                  X\n               R15=OUTBUFF2+SLKDELST\n         ICALL CONVP3,R14,R1=TAPEBUFF+66,       BLOCKS                 X\n               R15=OUTBUFF2+SLKBLKS\n         ICALL CONVMDY,R14,R1=TAPEBUFF+74,      C-DATE                 X\n               R15=OUTBUFF2+SLKCREAT\n         ICALL CONVMDY,R14,R1=TAPEBUFF+122,     U-DATE                 X\n               R15=OUTBUFF2+SLKUPD\n         PRTLN2\nSLK2NBLK TAPIO TCCW#DAT,TM=SLK2EOF         GET NEXT BLOCK\n         B     SLK2LOOP\nSLK2EOF  OI    TFLAG1,T1@MVEOF             SET \"HIT EOF\"\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nMAP2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(49),=C'CONTAINS THE FOLLOWING USER-SUPPLIED $\n               INFORMATION:'\n         PRTLN2                         PRINT THE HEADER INFO\n** USE R5 TO POINT TO INFO TO BE PRINTED,\n** AND R6 TO CONTROL DEBLOCKING LOOP\n         LA    R5,TAPEBUFF+80           SKIP FILE HEADER INFO\n         L     R6,LASTSIZE                                    09/84 DBC\n         SH    R6,=H'80'\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST LINE\n         B     MAPLOOPX                 BRANCH TO MIDDLE OF LOOP\nMAPLOOP  LA    R5,80(,R5)               GET TO NEXT INFO LOGICAL RECORD\n         SH    R6,=H'80'                CHECK FOR END OF BLOCK\nMAPLOOPX BNP   MAPNEXT                  GET NEXT BLOCK IF NECESSARY\nMAPLOOPY MVC   OUTBUFF2+16(72),0(R5)    PRINT 72 CHARS OF INFO\n         PRTLN2\n         B     MAPLOOP                  GET NEXT LOGICAL RECORD\nMAPNEXT  TAPIO TCCW#DAT,TM=MAPEOF       READ NEXT BLOCK\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZ   MAPERR                   NO  - ERROR\n         LA    R5,TAPEBUFF              RESET LOOP REGS\n         L     R6,LASTSIZE                                    09/84 DBC\n         B     MAPLOOPY\nMAPERR   MVC   OUTBUFF2+12(53),=C'*** LISTING TERMINATED, INVALID BLOCK$\n                ENCOUNTERED ***'\n         PRTLN2\n         B     STAR$TWO\nMAPEOF   OI    TFLAG1,T1@MVEOF          REMEMBER EOF FOUND\n****     B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nSTAR$TWO MVC   OUTBUFF2(2),=C'0*'\n         MVC   OUTBUFF2+2(L'OUTBUFF2-2),OUTBUFF2+1\n         PRTLN2\n         TM    TFLAG1,T1@MVEOF          ALREADY HIT EOF?\n         BO    CHKMVEOF                 YES - SEE WHERE TO GO\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    FIND$EOF                 YES - CONTINUE PROCESSING\n         B     NL$LOOP                  SCAN THRU REST OF FILE\n         SPACE 1\nCHKMVEOF NI    TFLAG1,255-T1@MVEOF      RESET FLAG\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    SL$SAVE                  YES - GO READ THE EOF LABELS\n         B     NL$EOF                   NO\n         SPACE 3\nFMU      PRTLN2                         PRINT INFO LINE\nFMU$     TM    PARMFLAG,PF@NOMEM        WANT MEMBER LISTING?\n         BO    STAR$TWO                 NO - DONE\n         MVI   OUTBUFF2,C'0'            SET CC\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2                         PRINT HEADER\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST MEMBER LINE\n         LA    PPTR,OUTBUFF2+16         INIT PRINT LINE PTR\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nSET$FULL MVC   OUTBUFF2+54(17),=C'...  WAS:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+71  CONVERT DSORG\n         SPACE 1\n         MVC   OUTBUFF2+76(6),=C'LRECL='\n         LA    R1,TAPEBUFF\n         AH    R1,6(,R10)               GET LRECL ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+82  CONVERT LRECL\n         BA&XA R14,SLIDE                MOVE IT LEFT\n         SPACE 1\n         MVC   OUTBUFF2+90(6),=C'RECFM='\n         ICALL CNVRECFM,R14,R15=OUTBUFF2+96  CONVERT RECFM\n         SPACE 1\n         MVC   OUTBUFF2+104(8),=C'BLKSIZE='\n         LA    R1,TAPEBUFF\n         AH    R1,4(,R10)               GET BLKSIZE ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+112 CONVERT BLKSIZE\n         BA&XA R14,SLIDE                MOVE IT LEFT\n         SPACE 2\nSET$FULD MVI   OUTBUFF2,C'-'            SET CC\n         MVC   OUTBUFF2+1(17),FL1ID     MOVE IN (TAPE) DSN\n         MVC   OUTBUFF2+19(5),=C'(FILE'\n         MVC   OUTBUFF2+25(4),FL1FILSQ  MOVE IN FILE SEQ#\n         MVC   OUTBUFF2+29(17),=C') WAS UNLOADED BY'\n         B     8(,R10)                  RETURN TO CALLER\n         SPACE 3\nBOOM     STM   R0,R15,BOOMREGS          SAVE ALL REGS\n         MVC   OUTBUFF2(50),=C'0*** TAPEMAP LOGIC ERROR - CONTACT TEC S$\n               UPPORT ***'                                          WBF\n         PRTLN2                         PRINT ERROR MSG\n         TM    PARMFLAG,PF@TEST         ABEND?\n         BNO   STAR$TWO                 NO - IGNORE REST OF FILE\n         SPACE 1\n         CLOSE MF=(E,OPENMFL)           CLOSE SYSPRINT\n         IFP2  N,BOOM2                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)          CLOSE SYSPRNT2\n         SPACE 1\nBOOM2    LA    R14,BOOMREGS             POINT TO REG SAVE AREA\n         EX    0,*                      AND AWAY WE GO\n         EJECT\n***********************************************************************\n*                                                                     *\n*  EXIT THE PROGRAM                                                   *\n*                                                                     *\n***********************************************************************\nLEAVE    DS    0H                                              1/93 RT\n         LR    R1,R13                                          1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         L     R0,GETM                                         1/93 RT\n         FREEMAIN R,A=(1),LV=(0)                               1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         EJECT                                                 1/93 RT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO DO I/O TO TAPE                                       *\n*                                                                     *\n***********************************************************************\nTAPIO    ST    R0,TAPEIOB+16            SET CCW ADDR\n         EXCP  TAPEIOB\n         WAIT  ECB=TAPEECB\n         CLI   TAPEECB,X'7F'            DID IT WORK?\n         BE    TAPIO$OK                 YES - CONTINUE\n         CLI   TAPEECB,X'41'            CHANNEL PROGRAM ERROR?\n         BNE   TIONTMK             NO, NOT TAPEMARK           07/85 DBC\n         CLI   IOBCSW+4,X'0D'      YES, CHEND, DEVEND, UNITEXCPT?\n         BNE   TIONTMK             NO, NOT FILE MARK          07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         INCR TAPEMARK COUNTER      07/85 DBC\n         STH   R0,FILE#SEQ         STORE NEW VALUE            07/85 DBC\n         BR    R10                 RETURN TO CALLER           07/85 DBC\nTIONTMK  DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         ST    R10,LKRTAPIO             SAVE R10 FOR RECURSION      U16\n         CH    LCTR,=H'&LINEPPG'        ANYTHING ON PAGE? U13 11/88 SBG\n         BL    *+8                      YES - CONTINUE              U13\n         NEWPAGE  ,                     PRINT THE TITLE             U13\n         MVC   OUTBUFF(44),=C'-*** TAPE I/O ERROR *** ECB CODE=XX *** C$\n               SW='                                                 U13\n         HEX   OUTBUFF+33,TAPEECB,LEN=1                             U13\n         HEX   OUTBUFF+44,IOBCSW+1,LEN=7                            U13\n         MVC   OUTBUFF+59(24),=C'*** IOBSENSE0,1=XXXX ***'          U13\n         HEX   OUTBUFF+75,TAPEIOB+2,LEN=2                           U13\n         PRTLN OUTBUFF\n         SPACE 1\n**       L     R1,DD#PTR                -> DD SECTION OF TIOT       U13\n**       SH    R1,=H'24'                -> TIOT                     U13\n**       AH    R1,TAPEDCB+40            -> DD ENTRY FOR TAPE        U13\n**       L     R1,16(,R1)               -> UCB                      U13\n         L     R1,TAPEMFL               -> DCB                      U13\n         L     R1,44(,R1)               -> DEB                      U13\n         L     R1,32(,R1)               -> UCB                      U13\n         L     R2,20(,R1)               -> EXTENDED SENSE INFO      U13\n         MVC   OUTBUFF(16),=C' *** SENSE DATA='                     U13\n         HEX   OUTBUFF+16,(00,R2),LEN=4                             U13\n         HEX   OUTBUFF+25,(04,R2),LEN=4                             U13\n         HEX   OUTBUFF+35,(08,R2),LEN=4                             U13\n         HEX   OUTBUFF+44,(12,R2),LEN=4                             U13\n         HEX   OUTBUFF+54,(16,R2),LEN=4                             U13\n         HEX   OUTBUFF+63,(20,R2),LEN=4                             U13\n         PRTLN OUTBUFF                  PRINT THE SENSE DATA        U13\n         SPACE 3\n         NEWPAGE  10                    NEXT PAGE IF NEED ROOM      U15\n         MVC  OUTBUFF(35),=C'0    BITS SET ARE FLAGGED ''*'' BELOW' U15\n         PRTLN OUTBUFF                  PRINT HEADER                U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST ONE      U15\n         SPACE 2\n*  R2 -> SENSE DATA                                                 U15\n         LA    R3,10                    NUMBER OF BYTES             U15\n         L     R4,=A(ERR#LIST)          -> ERROR MESSAGES           U15\n         SPACE 1\nNEXTBYTE LA    R6,OUTBUFF+5             -> LINE POS                 U15\n         LA    R1,X'80'                 MASK BIT                    U15\n         SPACE 1\nTEST$BIT MVC   2(10,R6),0(R4)           MOVE TEXT                   U15\n         EX    R1,BIT$TM                IS THIS BIT SET?            U15\n         BZ    *+8                      NO - SKIP                   U15\n         MVI   0(R6),C'*'               FLAG THIS ONE               U15\n         SPACE 1\n         LA    R4,10(,R4)               -> NEXT MSG                 U15\n         LA    R6,16(,R6)               -> NEXT PRINT LINE POS      U15\n         SRA   R1,1                     MOVE BIT RIGHT              U15\n         BNZ   TEST$BIT                 CONTINUE WITH THIS BYTE     U15\n         PRTLN OUTBUFF                  PRINT DESC OF THIS BYTE     U15\n         LA    R2,1(,R2)                -> NEXT BYTE OF SENSE DATA  U15\n         BCT   R3,NEXTBYTE              CONTINUE IF MORE            U15\n         SPACE 3\n         CLI   WHERE,3                  READING DATA?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         L     R1,TAPEIOB+16            GET CCW ADDR\n         CLI   0(R1),RD                 WAS IT A READ?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         LA    R0,TCCW#FSF              SKIP REST OF DATA...\n         L     R10,LKRTAPIO             RESTORE R10                 U16\n         B     TAPIO                    START AT TOP OF THIS SUBRTN\n         SPACE 2\nBIT$TM   TM    0(R2),*-*                << EXECUTED >>              U15\n         SPACE 3                                              07/85 DBC\nTAPIO$OK LA    R0,TCCW#FSF         WAS THIS A -               07/85 DBC\n         CLM   R0,7,TAPEIOB+17      FORWARD SKIP FILE CMD?    07/85 DBC\n         BNE   TIOSAMFL            NO, STILL IN SAME FILE     07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         GET NEW FILE# -1           07/85 DBC\n         STH   R0,FILE#SEQ         STORE BACK                 07/85 DBC\nTIOSAMFL DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R0,=A(BUFFSIZE)          GET LENGTH REQUESTED  07/85 DBC\n         MVC   DWD+2(2),IOBCSW+6        COPY LENGTH LEFT\n         XC    DWD(2),DWD               CLEAR HIGH 2 BYTES\n         S     R0,DWD                   MINUS LENGTH UNUSED\n         ST    R0,LASTSIZE         EQUALS SIZE READ           09/84 DBC\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BNO   4(,R10)                  NO - SKIP THIS JUNK\n         A     R0,BYTECNT               ADD PREVIOUS BYTE COUNT\n         ST    R0,BYTECNT               SAVE NEW TOTAL\n         L     R1,BLOCKCNT              GET BLOCK COUNT\n         LA    R1,1(,R1)                INCR\n         ST    R1,BLOCKCNT              SAVE NEW COUNT\n         CLC   LASTSIZE+2(2),TAPEBUFF START WITH BLKSIZE?     09/84 DBC\n         BE    *+8                      YES - COULD BE RECFM=V\n         NI    NLFLAGS,255-NL@V         NO - NOT RECFM=V\n         CLC   LASTSIZE,MAXBLKSI        SAME SIZE?\n         BE    4(,R10)                  YES - DONE HERE\n         BH    TAPIO$H                  LAST BLOCK IS BIGGEST\n         TM    NLFLAGS,NL@CHANG         ALREADY CHANGED?\n         BO    TAPIO$NL                 YES - TURN OFF RECFM=F\n         OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         B     4(,R10)                  RETURN\n         SPACE 1\nTAPIO$H  OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         MVC   MAXBLKSI,LASTSIZE        SAVE NEW BIGGEST BLKSIZE\nTAPIO$NL NI    NLFLAGS,255-NL@F         NOT RECFM=F\n         B     4(,R10)                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO HANDLE PRINT OUTPUT                                  *\n*                                                                     *\n***********************************************************************\nNEWPAGE  CR    LCTR,R0                  ENOUGH LINES LEFT?\n         BNLR  R10                      YES - JUST RETURN\n         LA    LCTR,LINESPP-2           RESET LINE COUNTER\n         PRTLN TITLE1\n         TM    TFLAG1,T1@PAGE1          IS THIS FIRST PAGE OF VOL?\n         BNO   NEWPAG$2                 NO - SKIP THIS STUFF.\n         NI    TFLAG1,255-T1@PAGE1      TURN OFF FLAG\n         MVC   TITLE2+1(28),TITLE2      BLANK IT OUT\n         SPACE 1\nNEWPAG$3 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$4                 NO - SKIP\n         TM    TFLAG2,T2@LPARM          IS IT TOO LONG?\n         BO    NEWPAG$4                 YES - SKIP\n         MVC   TITLE2+1(28),PARM#MSG+1  MOVE IN THE PARM FIELD\n         SPACE 1\nNEWPAG$4 PRTLN TITLE2                   PRINT AUTHOR LINE\n         SPACE 1\nNEWPAG$1 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         TM    TFLAG2,T2@LPARM          LONG PARM FIELD?\n         BNO   NEWPAG$5                 NO - ALREADY PRINTED        U15\n         PRTLN PARM#MSG                 PRINT IT\nNEWPAG$5 TM    TFLAG1,T1@PERR           ERROR IN PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         PRTLN PARMERR                  PRINT IT\n         SPACE 1\nNEWPAG$2 LA    R0,DASHES\n         BA&XA R14,PUTPRTLN             SEPARATOR LINE\n         PRTLN COLHEAD1,I\n         PRTLN COLHEAD2,I\n         LA    R0,DASHES\n         BA&XA R14,PUTPRTLN             SEPARATOR LINE\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE THE FIRST FILE U15\n         BCTR  LCTR,0                   ADJUST THE LINE COUNT       U15\n         TM    TFLAG2,T2@RQVOL          WRONG VOLUME MOUNTED?       U15\n         BNOR  R10                      NO - ALL DONE               U15\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG NOW           U15\n         MVI   OUTBUFF,C'-'             TRIPLE SPACE                U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT TOP OF BOX            U15\n         MVC   OUTBUFF+41(50),=C'* ID OF MOUNTED VOLUME DIFFERS FROM ID$\n                REQUESTED *'            MOVE IN MSG                 U15\n         PRTLN OUTBUFF                  PRINT MSG                   U15\n         SH    LCTR,=H'2'               ACCOUNT FOR TRIPLE SPACE    U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT BOTTOM OF BOX         U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST FILE     U15\n         BR    R10                      RETURN\n         SPACE 3\nPRTLN    ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BA&XA R14,PUTPRTLN             WRITE OUTPUT LINE\n         L     R14,PRT#SAVE             RESTORE RETURN ADDR\n         MVC   OUTBUFF,OUTCLEAR         CLEAR OUTPUT LINE\n         BCTR  LCTR,R14                 RETURN IF MORE LINES LEFT\n         ST    R14,R14SAVE              SAVE MY R14\n         ST    R10,R10SAVE              SAVE SOMEONE'S R10\n         NEWPAGE ,                      DO A NEW PAGE\n         L     R14,R14SAVE              RESTORE MY R14\n         L     R10,R10SAVE              RESTORE SOMEONE'S R10\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\nPUTPRTLN L     R1,OPENMFL               GET DCB ADDR\n         PUT   (1),(0)                  WRITE OUTPUT LINE\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n************************************************************* 12/88 SBG\n* A BAL TO NEWPAGE2+4 IS DONE IN SEVERAL PLACES.            * 12/88 SBG\n* THE CONDITION CODE AT THOSE POINTS IS NOT SET AT LABEL    * 12/88 SBG\n* NEWPAGE2, BUT RATHER, JUST ABOVE THOSE BAL INSTRUCTIONS.  * 12/88 SBG\n* IT IS THEREFORE IMPORTANT THAT THE INSTRUCTION JUST BELOW * 12/88 SBG\n* LABEL NEWPAGE2 HAVE THE CORRECT CONDITION SETTINGS.       * 12/88 SBG\n************************************************************* 12/88 SBG\nNEWPAGE2 C     R0,LCTR2                 ENOUGH LINES LEFT?    12/88 SBG\n         BLR   R10                      YES - JUST RETURN     12/88 SBG\n         SPACE 1\n         LA    R0,TITLE1                GET RECORD ADDR\n         BA&XA R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R0,DASHES\n         BA&XA R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R14,LINESPP-3            RESET LINE COUNTER    02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nPRTLN2   ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R1,3                     ASSUME TRIPLE SPACE\n         CLI   OUTBUFF2,C'-'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME DOUBLE SPACE\n         CLI   OUTBUFF2,C'0'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME SINGLE SPACE\n         CLI   OUTBUFF2,C' '            IS IT?\n         BE    P2$OK                    YES\n         MVI   OUTBUFF2,C' '            MAKE A BLANK\n         SPACE 1\nP2$OK    L     R14,LCTR2                DECR LINE COUNT       02/93 RT\n         SR    R14,R1                                         02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         BP    P2$GO                    CONTINUE IF OK\n         NEWPAGE  ,2                    SET NEW PAGE\n         MVI   OUTBUFF2,C'-'            TRIPLE SPACE FIRST LINE     U13\n         L     R14,LCTR2                ACCOUNT FOR IT        02/93 RT\n         SH    R14,=H'3'                                      02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         SPACE 1\nP2$GO    BA&XA R14,PUTPRNT2             WRITE OUTPUT LINE\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OUTPUT LINE\n         L     R14,PRT#SAVE             GET RETURN ADDR\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\nPUTPRNT2 LA    R0,OUTBUFF2              GET RECORD ADDR\n         L     R1,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         PUT   (1),(0)                  WRITE IT OUT\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n         PUSH  PRINT                                                U13\n         PRINT GEN                                                  U13\n         SPACE 1\nPRT$EXIT DCBEXIT  BLKSIZE=3192,BUFNO=1                              U15\n         POP   PRINT                                                U13\n         EJECT\n***********************************************************************\n*                                                                     *\n*    ICALLABLE SUBROUTINES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*  SUBROUTINE TO CONVERT A HALFWORD TO PRINTABLE FORM\nCONVHALF MVC   DWD(2),0(R1)             MOVE FIELD TO AN ALIGNED PLACE\n         LH    R0,DWD                   PICK IT UP\n         CVD   R0,DWD                   CONVERT TO PACKED\n         MVC   1(5,R15),=X'2020202120'  MOVE IN EDIT MASK\n         ED    0(6,R15),DWD+5           DO THE EDIT\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 2-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP2   MVC   1(3,R15),=X'202120'      MOVE EDIT PATTERN TO OUT AREA\n         ED    0(4,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 3-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP3   MVC   1(5,R15),=X'2020202120'  MOVE EDIT PATTERN TO OUT AREA\n         ED    0(6,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 4-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP4   MVC   1(7,R15),=X'20202020202120'  MOVE EDIT PATTERN\n         ED    0(8,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A PACKED DATE FIELD TO PRINTABLE FORM\nCONVMDY  MVC   MDYP(4),=PL4'0'          ZERO MDYP (4-BYTES PACKED)\n         MVC   MDYP(3),0(R1)            GET MMDDYY (PACKED W/O SIGN)\n         UNPK  MDYU(7),MDYP(4)          UNPACK IT\n         MVC   0(2,R15),MDYU            MOVE MM\n         MVI   2(R15),C'/'                   /\n         MVC   3(2,R15),MDYU+2               DD\n         MVI   5(R15),C'/'                   /\n         MVC   6(2,R15),MDYU+4               YY\n         BR    R14                      RETURN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING BLANKS\nSLIDE    CLI   0(R15),C' '              NON-BLANK YET?\n         BNER  R14                      YES - RETURN TO CALLER\n         MVC   0(6,R15),1(R15)          MOVE IT LEFT 1 POS\n         B     SLIDE                    AND CHECK IT AGAIN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING ZEROES\nDEZERO   CLI   0(R1),C'0'               NON-ZERO YET?\n         BNER  R14                      YES - RETURN\n         MVI   0(R1),C' '               MAKE IT A BLANK\n         A     R1,=F'1'                 ADVANCE\n         B     DEZERO                   LOOP\n         SPACE 3\n*  SUBROUTINE TO CONVERT A UNIT TYPE\nCONVUNIT MVC   OUTBUFF2+120(9),=C'UNIT=????'\n         CLI   3(R1),X'0F'              TOO BIG?              03/94 SBG\n         BHR   R10                      YES - RETURN\n         IC    R14,3(,R1)               ELSE GET BYTE\n         N     R14,=F'255'              ISOLATE IT\n         BZR   R10                      INVALID IF ZERO\n         BCTR  R14,0                    -1 BECAUSE NO ZERO\n         MH    R14,=H'6'                LENGTH OF A TABLE ENTRY\n         LA    R15,=C'2311  2301  2303  2302  2321  2305-12305-22314  3$\n               330  3340  3350  3375  3330-13380  3390  '     03/94 SBG\n         LA    R14,0(R14,R15)           POINT TO CORRECT ENTRY\n         MVC   OUTBUFF2+125(6),0(R14)   MOVE DEVTYPE TO LINE\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A DSORG\nCNVDSORG LA    R1,TAPEBUFF\n         AH    R1,0(,R10)               GET DSORG ADDR\n         SPACE 1\nCNVDSORX TM    0(R1),X'01'              DSORG=**U\n         BNO   *+8                      NO - SKIP\n         MVI   2(R15),C'U'\n         SPACE 1\n         MVC   0(2,R15),=C'PO'          ASSUME DSORG=PO\n         TM    0(R1),X'02'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'DA'          ASSUME DSORG=DA\n         TM    0(R1),X'20'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'PS'          ASSUME DSORG=PS\n         TM    0(R1),X'40'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'IS'          ASSUME DSORG=IS\n         TM    0(R1),X'80'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'VSAM'        ASSUME VSAM\n         CLC   0(2,R1),=X'0008'         IS IT?\n         BER   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'**  '        NONE OF THE ABOVE???\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A RECFM\nCNVRECFM LA    R1,TAPEBUFF\n         AH    R1,2(,R10)               GET RECFM ADDR\n         SPACE 1\nCNVRECFX TM    0(R1),X'C0'              RECFM=U?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'U'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'80'              RECFM=F?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'F'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'40'              RECFM=V?\n         BNO   *+8                      NO - TRY NEXT\n         MVI   0(R15),C'V'\n         SPACE 1\nRECFM$2  LA    R15,1(,R15)\n         TM    0(R1),X'10'              BLOCKED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'B'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'08'              SPANNED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'S'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'20'              TRK OVFL?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'T'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'02'              RECFM=A?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'A'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'01'              RECFM=M?\n         BNOR  R14                      NO - RETURN TO CALLER\n         MVI   0(R15),C'M'\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO COMPUTE TAPEFEET\nTAPEFEET XR    R0,R0\n         D     R0,=F'1200'              GET LENGTH IN FEET\n         CH    R0,=H'600'               ROUND UP?\n         BL    *+8                      NO\n         A     R1,=F'1'                 ROUND UP.\n         CVD   R1,DWD\n         MVC   1(5,R15),=X'2020202120'\n         ED    0(6,R15),DWD+5\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO FIND A TIOT ENTRY\nTIOTSCAN L     R1,DD#PTR                -> DD SECTION\n         XR    R0,R0                    CLEAR FOR IC\n         BA&XA R14,*+6                  SET LOOP ADDR & SKIP\n         SPACE 1\n         AR    R1,R0                    POINT TO NEXT ENTRY\n         IC    R0,0(,R1)                GET LENGTH OF THIS ENTRY\n         LTR   R0,R0                    END OF TIOT?\n         BZR   R10                      YES - \"NOT FOUND\" RETURN\n         CLC   4(8,R1),0(R15)           THIS IT?\n         BNER  R14                      NO - LOOP\n         CLC   =F'0',16(R1)             DD DUMMY? (LIKE MSM?)\n         BNE   4(,R10)                  NO - RETURN (FOUND)\n         BR    R10                      SAY NOT FOUND\n         EJECT\n         LTORG ,\n         SPACE 6\n*  REGISTER EQUATES                                            1/93 RT\nR0       EQU   0                                               1/93 RT\nR1       EQU   1                                               1/93 RT\nR2       EQU   2                                               1/93 RT\nR3       EQU   3                                               1/93 RT\nR4       EQU   4                                               1/93 RT\nR5       EQU   5                                               1/93 RT\nR6       EQU   6                                               1/93 RT\nR7       EQU   7                                               1/93 RT\nR8       EQU   8                                               1/93 RT\nR9       EQU   9                                               1/93 RT\nR10      EQU   10                                              1/93 RT\nR11      EQU   11                                              1/93 RT\nR12      EQU   12                                              1/93 RT\nR13      EQU   13                                              1/93 RT\nR14      EQU   14                                              1/93 RT\nR15      EQU   15                                              1/93 RT\n*  REGISTERS USED IN ROUTINES TO LIST IEHMOVE & IEBCOPY UNLOADED MEMBRS\nBLEN     EQU   R2      *PAIR*           BLOCK LENGTH LEFT\nBPTR     EQU   R3      *PAIR*           -> CURRENT POS IN BLOCK\nDLEN     EQU   R4                       DIRBLK OR DATA LENGTH LEFT\nDPTR     EQU   R5                       -> CURRENT POS IN BLOCK\nPPTR     EQU   R6                       -> POS IN PRINT LINE\n         SPACE 1\n*  OTHER MISC REGISTERS\nLCTR     EQU   R8                       # OF LINES LEFT THIS PAGE\nLCTR2    DS    F                        STORAGE INSTEAD OF REG 1/93 RT\n         SPACE 1\nCC       EQU   X'40'                    COMMAND CHAINING\nSLI      EQU   X'20'                    SUPPRESS LENGTH INDIC.\n         SPACE 1\nRD       EQU   X'02'                    READ\nBSF      EQU   X'2F'                    BACKSPACE FILE        02/93 RT\nFSF      EQU   X'3F'                    FORWARD SPACE FILE\nRWD      EQU   X'07'                    REWIND\n         SPACE 1\nBUFFSIZE EQU   X'FFFF'             SIZE OF TAPE BUFFER        09/84 DBC\nLINESPP  EQU   &LINEPPG                 LINES PRINTED PER PAGE11/88 SBG\n         SPACE 2\nOPENMFL2 OPEN  (SYSPRNT2,OUTPUT),MF=L\nOPENMFL  OPEN  (SYSPRINT,OUTPUT),MF=L\nOPENMFLI OPEN  SYSIN,MF=L\nTAPEMFL  OPEN  TAPEDCB,MF=L\n         SPACE 1\nEXLST    DC    A(0)\nPRTEXLST DC    X'85',AL3(PRT$EXIT)\n         SPACE 2\nTAPEECB  DC    A(0)\nTAPEIOB  DC    X'42000000'              IOBFLAG1 (SET FOR CMD CHAINING)\n         DC    A(TAPEECB)               ECB ADDR\nIOBCSW   DC    2F'0'                    CSW\n         DC    A(0)                     CHANNEL PGM ADDR\n         DC    A(TAPEDCB),A(0)          DCB ADDR\n         DC    H'1',H'0'                TAPE BLOCK COUNT INCREMENT\n         SPACE 1\nTCCW#BSF CCW   BSF,0,0,1                BACKSPACE FILE\n         SPACE 1\nTCCW#FSF CCW   FSF,0,0,1                FWD SPACE FILE\n         SPACE 1\nTCCW#LBL CCW   RD,*-*,CC,80             READ 80 BYTE BLOCK INTO FL1LABI\n         CCW   RD,*-*,00,80             READ IN NEXT BLOCK INTO FL2LABI\n         SPACE 1\nTCCW#EOV CCW   RD,*-*,00,80             READ 80 BYTE BLOCK INTO FL1LABI\n         SPACE 1\nTCCW#DAT CCW   RD,*-*,SLI,BUFFSIZE      READ DATA BLOCK\n         SPACE 1\nTCCW#RWD CCW   RWD,0,0,1                REWIND THE TAPE\n         SPACE 1\nTCCW#SNS CCW   4,SENSDATA,SLI,24        READ SENSE DATA\n         SPACE 2\nSENSDATA DC    XL24'00'                 SENSE DATA BUFFER\n         SPACE 2\nTFLAG1   DC    X'00'                    FLAGS\nT1@PARM  EQU   X'80'                    HAVE PARM FIELD\nT1@PERR  EQU   X'40'                    ERROR IN PARM FIELD\nT1@PAGE1 EQU   X'20'                    THIS IS FIRST TITLE GROUP\nT1@BADEN EQU   X'10'                    DENSITY ERROR IN TAPE LABEL(S)\nT1@SL    EQU   X'08'                    THIS TAPE IS SL\nT1@ANLZ  EQU   X'04'                    PARM=CHECK OR NL TAPE\nT1@MVEOF EQU   X'02'                    IEHMOVE2 HAS READ TILL EOF\nT1@DATA  EQU   X'01'                    HAVE INPUT DATA\n         SPACE 1\nTFLAG2   DC    X'00'                    MORE\nT2@RQVOL EQU   X'80'                    REQUESTED VOL MISMATCH\nT2@LPARM EQU   X'40'                    PARM FIELD LONGER THAN 21 CHARS\nT2@PRT2  EQU   X'20'                    SECOND PRINT FILE IN USE\n         SPACE 1\nNLFLAGS  DC    X'00'                    NON-LABELLED TAPE FLAGS\nNL@V     EQU   X'80'                    RECFM=V\nNL@F     EQU   X'40'                    RECFM=F\nNL@CHANG EQU   X'20'                    BLOCKSIZE HAS CHANGED\n         SPACE 1\nPARMFLAG DC    X'00'\nPF@TEST  EQU   X'80'                    TEST\nPF@INLIN EQU   X'40'                    INLINE\nPF@NOMEM EQU   X'20'                    NOMEMBERS (NOMEM)\nPF@DEN1  EQU   X'10'                    DEN1\nPF@NATTR EQU   X'08'                    NOATTR\nPF@NONOT EQU   X'04'                    NONOTE\nPF@NOCHK EQU   X'02'                    NOCHECK (NOSCAN)      06/84 DBC\nPF@NL    EQU   X'01'                    NL\n         SPACE 1\nPARMTAB  DC    H'3',C'TEST     ',AL1(PF@TEST)\n         DC    H'5',C'INLINE   ',AL1(PF@INLIN)\n         DC    H'8',C'NOMEMBERS',AL1(PF@NOMEM)\n         DC    H'4',C'NOMEM    ',AL1(PF@NOMEM)\n         DC    H'3',C'DEN1     ',AL1(PF@DEN1)\n         DC    H'5',C'NOATTR   ',AL1(PF@NATTR)\n         DC    H'5',C'NONOTE   ',AL1(PF@NONOT)\n         DC    H'6',C'NOCHECK  ',AL1(PF@NOCHK)                06/84 DBC\n         DC    H'5',C'NOSCAN   ',AL1(PF@NOCHK)                06/84 DBC\nPARMLAST DC    H'1',C'NL       ',AL1(PF@NL)\n         SPACE 2\n         DC    C' '                     FOR CLEARING \"UNLOADER\"\nUNLOADER DC    CL8' '             /   /IEBCOPY/IEHMOVE/IEBISA 06/84 DBC\nC00080   DC    C'00080'\n         ORG   C00080+1\nC00800   DC    C'00800'\nRET#ADDR DC    A(EOD2)                  RETURN ADDR\nDEN#LIST DC    F'200,556,800,1600,6250,37871'  DENSITY VALUES       THO\n         DC    C'200 556 800 16006250N/A '     RIGHT AFTER ABO LINE THO\nTRUE#DEN DC    C'3',AL3(DEN#LIST+8)     REAL DEN;  -> 4 CHAR REAL DEN\nF1       DC    F'1'                                                 U14\nH1       EQU   F1+2                                                 U14\nF15      DC    F'15'                                                U14\nNULLNUMB DC    H'0'                     # OF NULL FILES TO SKIP     U14\nNUMBNULL DC    H'0'                     # OF NULL FILES / THIS TAPE U14\nWHERE    DC    X'00'                    WHERE-WE-ARE FLAG\n         SPACE 1\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 1\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 3                                                    THO\n         POP   PRINT                                                THO\n         SPACE 1                                                    THO\nFDRDVTAB DS    0C                                             09/84 DBC\n         DC    C'A2305-1'                                     09/84 DBC\n         DC    C'C2305-2'                                     09/84 DBC\n         DC    C'M3380  '                                     09/84 DBC\n         DC    C'N3375  '                                     09/84 DBC\n         DC    C'T2314  '                                     09/84 DBC\n         DC    C'U3340-1'          TABLE OF FDR DEVICE TYPES  09/84 DBC\n         DC    C'V3340-2'          AND CODES\n         DC    C'X3330  '\n         DC    C'Y3330-1'\n         DC    C'Z3350  '\nFDRDVEND DC    C' ??????'          FENCE FOR UNKNOWN FDR DEVICES\n         EJECT\nWORKD    DSECT                          RESUME\n         DS    9D                  SAVE AREA                  01/93 RT\nDD#PTR   DS    A                        -> DD SECTION OF TIOT\nLEN#TAPE DS    F                        TAPE LENGTH\n         DS    F                        NL LENGTH\nFILE#SEQ DS    H                        NL FILE SEQ #\n         DS    H                        (UNUSED)\nPRT#SAVE DS    A                        SAVE FOR RETURN ADDR\nR10SAVE  DS    A                        MORE...\nLKRTAPIO DS    A                        ...OF THE...\nR14SAVE  DS    A                        ...SAME\nTU$SAVE2 DS    2A                  USED BY TEST$UP            06/84 DBC\nBOOMREGS DS    16F                      REG SAVE AREA FOR LOGIC ERROR\nMAXBLKSI DS    F                   BIGGEST BLOCK READ SO FAR  09/84 DBC\nLASTSIZE DS    F                   SIZE OF THE LAST BLK READ  09/84 DBC\nBLOCKCNT DS    F                        # OF BLOCKS READ\nBYTECNT  DS    F                        TOTAL # OF BYTES READ\nCBTBLK1  DS    F                   STORE BLOCKSIZ FOR CBT973. 11/88 SBG\nCBTAPEND DS    F                   STORE EO-BLOCK FOR CBT973. 11/88 SBG\nCBSTOR1  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR2  DS    F                   STORE REGISTER FOR CBT973. 01/93 RT\nCBSTOR01 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR02 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR03 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR04 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR05 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR06 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR08 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR09 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR10 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE4  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE15 DS    F                   STORE REGISTER 15          11/88 SBG\nNL#SAVE  DS    4F                  SAVE FOR NL STUFF IF SL    09/84 DBC\nNL#FLAGX DS    X                        SAME\nUPDT#TYP DS    C                        A,R,C FOR UPDTE\nPTF#TYPE DS    C                   A,F,P,U FOR SYSMODS        07/85 DBC\nUPDTXFLG DS    C                   FLAG IF ./ OR >< IN UPDTE  11/88 SBG\nBLANKS   DS    0CL17,CL16' '\nOUTCLEAR DC    C' '                     FOR CLEARING OUTBUFF\nOUTBUFF  DS    CL133\nOUTCLR2  DC    C' '                     FOR CLEARING OUTBUFF2\nOUTBUFF2 DS    CL133,7C                                             U14\nDASHES   DS    CL133\nINBUFF   DS    CL80\nLABELS   DS    3CL80                    FOR VOL,FL1,FL2\nCBTCLEAR DC    C' '                     FOR CLEARING CBT CARD 11/88 SBG\nCBTCARD  DS    CL80              CBT973 CARD-IMAGE EXPANSION  11/88 SBG\nCSTATCLR DC    C' '                     FOR CLEARING CBT DOC  12/88 SBG\nCBTVERS  DS    CL4                      CBT TAPE VERSION #    12/88 SBG\nCBTDATE  DS    CL8                      CBT TAPE RELEASE DATE 12/88 SBG\nMV#ABUF2 DS    A(MV#BUFF2)              ADDR OF SECOND DE-SPANNING BUFF\nMV#BUFF1 DS    CL78                     FIRST DE-SPANNING BUFFER\nMV#BUFF2 DS    CL78                     SECOND DE-SPANNING BUFFER\nPARM#MSG DS    CL110                    FOR PARM\nOB2END   DS    A(OUTBUFF2+110)          ADDR OF END OF OUTBUFF2\nOB2END2  DS    A(OUTBUFF2+110+10)       SAME FOR UPDTE\nDASDRSAV DS    XL24                     FOR HEADER RECORD\nFDRSAVE  DS    CL8                      FOR 'DUMMYDSF' IF PRESENT\nMDYP     DS    PL4'0'                   FOR CONVMDY\nMDYU     DS    CL7                      FOR CONVMDY\n         SPACE 2                                              12/88 SBG\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         DS    0D                                             12/88 SBG\nEMPTYLIT DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\nEMPTYLI2 DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\nREQ#VOL  DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\nFVOL#MSG DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\nPARMERR  DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\nFFS      DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\nCHJOBLIT DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\nVERSLIT1 DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\nVERSLIT2 DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\nCBHLIT   DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n         SPACE 1                                              12/88 SBG\n************************************************************* 12/88 SBG\n*  TABLE OF UNLOADER LITERALS - NOTE, IF YOU ADD TO THIS      12/88 SBG\n*   TABLE, YOU MUST ADD TO THE LIST OF LITERALS TO BE MOVED   12/88 SBG\n*   INTO THIS WORKAREA THAT IS AT THE END OF THIS PROGRAM.    12/88 SBG\n*  PLEASE SEE THE LABEL CALLED \"LITMOVES\" -  THIS WAS BECAUSE 12/88 SBG\n*   THE 3RD BASE REGISTER WAS EXCEEDED, AND I MOVED SOME OF   12/88 SBG\n*   THE LITERALS INTO THE WORKAREA DSECT.  THEY THEREFORE     12/88 SBG\n*   HAVE TO BE INITIALIZED IN THE GETMAINED WORKAREA STORAGE. 12/88 SBG\n************************************************************* 12/88 SBG\nIEBCOPY  DC    C'IEBCOPY'\nIEHMOVE  DC    C'IEHMOVE'\nIEBISAM  DC    C'IEBISAM'\nIEHDASDR DC    C'IEHDASDR'\nIEBUPXXX DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       06/84 DBC\nFDR      DC    C'FDR   '\nFDRDSF   DC    C'FDRDSF'\nFDRXXX   DC    C'FDR???'\nSLICKMNG DC    C'SLICKMNG'                                    09/84 DBC\nCTAPEMAP DC    C'TAPEMAP'\nSMPPTFIN DC    C'SMPPTFIN'                                    07/85 DBC\nCBT973   DC    C'CBT973'                                      11/88 SBG\nCBTEMPTY DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 11/88 SBG\nCBHEADER DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\nUTY3420C DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89^SBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\nCDOCSIZE DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\nINCORLAB DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         SPACE 2\nDWD      DS    D\nJFCB     DS    XL176                    DWD ALIGNED\n************************************************************* 12/88 SBG\n*  WE CONTINUE TO ADDRESS THE PROBLEM OF EXCEEDING 3 BASE   * 12/88 SBG\n*  REGISTERS.  PREVIOUSLY, THE TAPE BUFFER WAS ALIGNED ON   * 12/88 SBG\n*  HALF A PAGE.  WE WANT TO HAVE MOST OF THIS HALF A PAGE   * 12/88 SBG\n*  FOR COPYING LITERALS SO THEY CAN BE ADDRESSABLE FROM THE * 12/88 SBG\n*  WORKAREA'S BASE REGISTER.  WE HOPE THE ALIGNMENT OF      * 12/88 SBG\n*  WORKD+2048 WASN'T REALLY NECESSARY.                      * 12/88 SBG\n*-----------------------------------------------------------* 12/88 SBG\n*  HOWEVER, IF TAPEBUFF+NNN HAS BEEN SPECIFIED IN ANY       * 12/88 SBG\n*  INSTRUCTION, THE SUM OF THE DISPLACEMENT OF TAPEBUFF     * 12/88 SBG\n*  AND NNN MUST NOT EXCEED 4095.  THE LARGEST SUCH          * 12/88 SBG\n*  DISPLACEMENT WE HAVE FOUND AT THIS WRITING IS 282.       * 12/88 SBG\n*  THAT IS TO SAY, TAPEBUFF+282 IS THE FARTHEST OUT         * 12/88 SBG\n*  ADDRESS THAT THE CURRENT INCARNATION OF THIS PROGRAM     * 12/88 SBG\n*  HAS TO GET TO, FROM REGISTER 13.  THEREFORE, I HAVE      * 12/88 SBG\n*  SUBTRACTED 300 FROM 4096 AND SET TAPEBUFF AT WORKD+3796. * 12/88 SBG\n*  PLEASE REMEMBER THAT AT LEAST DOUBLEWORD ALIGNMENT       * 12/88 SBG\n*  SHOULD BE OBSERVED.                                      * 12/88 SBG\n************************************************************* 12/88 SBG\n         ORG   WORKD+3796   ALIGN THE BUFFER NOT SO REAL WELL 12/88 SBG\nTAPEBUFF DS    CL(BUFFSIZE)             TAPE INPUT DATA BUFFER\nWORKLEN  EQU   *-WORKD\n         SPACE 2\n         ORG   OUTBUFF+1\n#UNLOAD  DS    CL8,1C                                         06/84 DBC\n#FILE    DS    CL4,2C                                         06/84 DBC\n#DSN     DS    CL17,2C\n#PSWD    DS    CL4,2C                                         06/84 DBC\n#CDATE   DS    CL6,2C\n#EDATE   DS    CL6,2C                                         06/84 DBC\n#INFOSRC DS    CL6,2C                                         06/84 DBC\n#RECFM   DS    CL5,2C                                         06/84 DBC\n#LRECL   DS    CL5,2C\n#BLKSIZE DS    CL5,2C\n#BLKCNT  DS    CL6,2C\n#DEN     DS    CL4,1C                                         06/84 DBC\n#TRTCH   DS    CL3,2C                                         06/84 DBC\n#LENGTH  DS    CL4,2C                                         06/84 DBC\n#CUMLEN  DS    CL4,2C                                         06/84 DBC\n#CREATOR DS    CL17                                           06/84 DBC\n         SPACE 2\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 2\n         ORG   LABELS\n         SPACE 2\n         VOL   DSECT=NO\n         FL1   DSECT=NO\n         FL2   DSECT=NO\n         POP   PRINT\n         EJECT\nTAPEMAP  CSECT                          RESUME\n         SPACE 2\n         XYZZY NOGEN               SUPPRESS EXPANSION         06/84 DBC\n         SPACE 1                                              06/84 DBC\nTAPEDCB  DCB   DSORG=PS,MACRF=E,DDNAME=SYSUT1,DEVD=TA,EXLST=EXLST,     $\n               IOBAD=TAPEIOB\n         XYZZY GEN                                            09/84 DBC\n         SPACE 2\nTITLE1   DC    C'1VOL=                             TAPE ANALYSIS PROGRA$\n               M   (T A P E M A P)  V2.1          DAYDAYDAY  MON DD, 19$\n               YY  (YY.DDD)  HH:MM:SS'\nTTL1TIME EQU   *-9\nTTL1DATE EQU   TTL1TIME-23\nTTL1DAY  EQU   TTL1DATE-11\n         SPACE 2\nTITLE2   DC    C'                                                      $\n                                                                       $\n                                    '\n         SPACE 2\nDSFHDING DS    CL133\n         ORG   DSFHDING\n         DC    CL17'0'\nDSFDSN   EQU   *-DSFHDING\n         DC    CL44'-------------------DSNAME-------------------',C'-'\nDSFTRK   EQU   *-DSFHDING\n         DC    CL9'TRKS USED',C'-'                     TRACKS USED\nDSFRECFM EQU   *-DSFHDING\n         DC    CL5'RECFM',C'-'                         RECFM\nDSFLRECL EQU   *-DSFHDING\n         DC    CL5'LRECL',C'-'                         LRECL\nDSFBLKSZ EQU   *-DSFHDING\n         DC    CL7'BLKSIZE',C'-'                       BLKSIZE\nDSFDSORG EQU   *-DSFHDING\n         DC    CL5'DSORG',C'-'                         DSORG\nDSFCDATE EQU   *-DSFHDING\n         DC    CL7'CREATED',C'-'                       C-DATE\nDSFEDATE EQU   *-DSFHDING\n         DC    CL7'EXPIRES',C'-'                       E-DATE\nDSFSECUR EQU   *-DSFHDING\n         DC    CL8'SECURITY',C'-'                      SECURITY\n         ORG   ,\nSLKHDING DS    CL133\n         ORG   SLKHDING\n         DC    CL17'0'\nSLKMEM   EQU   *-SLKHDING\n         DC    CL10'NAME------.'          MEMBER\nSLKSTAT  EQU   *-SLKHDING\n         DC    CL4'STAT',C'-'             STATUS\nSLKREV   EQU   *-SLKHDING-1\n         DC    CL3'REV',C'-'              REVISION\nSLKINFO  EQU   *-SLKHDING\n         DC    CL10'---INFO---',C'-'      INFO\nSLKTYPE  EQU   *-SLKHDING\n         DC    CL8'--TYPE--',C'-'         TYPE\nSLKACTST EQU   *-SLKHDING-1\n         DC    CL7'--ACTST',C'-'          ACTST\nSLKDELST EQU   *-SLKHDING-1\n         DC    CL7'--DELST',C'-'          DELST\nSLKBLKS  EQU   *-SLKHDING-1\n         DC    CL5'-BLKS',C'-'            BLOCKS\nSLKCREAT EQU   *-SLKHDING\n         DC    CL8'-CREATED',C'-'         CREATE DATE\nSLKUPD   EQU   *-SLKHDING\n         DC    CL8'-UPDATED'              LAST UPDATE DATE\n         ORG   ,\n         SPACE 2\n         XYZZY NOGEN                                          09/84 DBC\n         SPACE 1                                              09/84 DBC\nSYSIN    DCB  DSORG=PS,MACRF=GM,DDNAME=SYSIN,LRECL=80,EODAD=EOD,BUFNO=1\n         SPACE 2\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 2\nSYSPRNT2 DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRNT2,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 1                                              06/84 DBC\n         XYZZY GEN                 RESTORE EXPANSIONS         06/84 DBC\nCOLHEAD1 DC    CL133' '            1ST TITLE LINE             06/84 DBC\n         ORG   COLHEAD1+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'RELOAD',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'FILE',C'  '     #FILE                      06/84 DBC\n         DC    CL17' ',C'  '       #DSN                       06/84 DBC\n         DC    CL4'PSWD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6' ',C'  '        #CDATE                     06/84 DBC\n         DC    CL6' ',C'  '        #EDATE                     06/84 DBC\n         DC    CL6' INFO',C'  '    #INFOSRC                   06/84 DBC\n         DC    CL5' ',C'  '        #RECFM                     06/84 DBC\n         DC    CL5' ',C'  '        #LRECL                     06/84 DBC\n         DC    CL5'BLOCK',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' BLOCK',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3' ',C'  '        #DEN                       06/84 DBC\n         DC    CL3' ',C'  '        #TRTCH                     06/84 DBC\n         DC    CL4'LNTH',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'TOTL',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'CREATOR'          #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\nCOLHEAD2 DC    CL133' '            2ND TITLE LINE             06/84 DBC\n         ORG   COLHEAD2+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'FORMAT',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'SEQ#',C'  '     #FILE                      06/84 DBC\n         DC    CL17'DATASET NAME',C'  ' #DSN                  06/84 DBC\n         DC    CL4'REQD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6'C-DATE',C'  '   #CDATE                     06/84 DBC\n         DC    CL6'E-DATE',C'  '   #EDATE                     06/84 DBC\n         DC    CL6'SOURCE',C'  '   #INFOSRC                   06/84 DBC\n         DC    CL5'RECFM',C'  '    #RECFM                     06/84 DBC\n         DC    CL5'LRECL',C'  '    #LRECL                     06/84 DBC\n         DC    CL5' SIZE',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' COUNT',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3'DEN',C'  '      #DEN                       06/84 DBC\n         DC    CL3'TRT',C'  '      #TRTCH                     06/84 DBC\n         DC    CL4'(FT)',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'LNTH',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'JOBNAME/STEPNAME' #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\n         EJECT\nERR#LIST DC    0F'0'                                                U15\n*                                                                   U15\n*  ERROR MSGS FOR EACH SENSE BIT FOR 3420 TAPE DRIVES               U15\n*                                                                   U15\n         SPACE 1\n*** BYTE 0                       BIT                                U15\n         DC    C'CMD REJ   '      0     80                          U15\n         DC    C'INT REQ   '      1     40                          U15\n         DC    C'BUS OUT CK'      2     20                          U15\n         DC    C'EQC CHK   '      3     10                          U15\n         DC    C'DATA CHK  '      4     08                          U15\n         DC    C'OVERRUN   '      5     04                          U15\n         DC    C'WORD CNT 0'      6     02                          U15\n         DC    C'DATA CNVTR'      7     01                          U15\n         SPACE 1\n*** BYTE 1                       BIT                                U15\n         DC    C'NOISE     '      0     80                          U15\n         DC    C'SEL+RDY+NB'      1     40                          U15\n         DC    C'NOT READY '      2     20                          U15\n         DC    C'7 TRK FEAT'      3     10                          U15\n         DC    C'@ LOAD PT '      4     08                          U15\n         DC    C'WRITE STAT'      5     04                          U15\n         DC    C'FILE PROT '      6     02                          U15\n         DC    C'NOT CAPABL'      7     01                          U15\n         SPACE 1\n*** BYTE 2                       BIT                                U15\n         DC    C'TIE BIT 0 '      0     80                          U15\n         DC    C'TIE BIT 1 '      1     40                          U15\n         DC    C'TIE BIT 2 '      2     20                          U15\n         DC    C'TIE BIT 3 '      3     10                          U15\n         DC    C'TIE BIT 4 '      4     08                          U15\n         DC    C'TIE BIT 5 '      5     04                          U15\n         DC    C'TIE BIT 6 '      6     02                          U15\n         DC    C'TIE BIT 7 '      7     01                          U15\n         SPACE 1\n*** BYTE 3                       BIT                                U15\n         DC    C'R/W VRC   '      0     80                          U15\n         DC    C'MT/LRC    '      1     40                          U15\n         DC    C'SKEW      '      2     20                          U15\n         DC    C'END DC/CRC'      3     10                          U15\n         DC    C'ENV/ECC   '      4     08                          U15\n         DC    C'1600 BPI  '      5     04                          U15\n         DC    C'BACKWARD  '      6     02                          U15\n         DC    C'C/P COMPAR'      7     01                          U15\n         SPACE 1\n*** BYTE 4                       BIT                                U15\n         DC    C'MP H E    '      0     80                          U15\n         DC    C'DROP READY'      1     40                          U15\n         DC    C'TAPE INDIC'      2     20                          U15\n         DC    C'W T VRC   '      3     10                          U15\n         DC    C'MICROPGM  '      4     08                          U15\n         DC    C'LWR       '      5     04                          U15\n         DC    C'UNIT CHECK'      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 5                       BIT                                U15\n         DC    C'NEW SUBSYS'      0     80                          U15\n         DC    C'NEW SUBSYS'      1     40                          U15\n         DC    C'WTM CHECK '      2     20                          U15\n         DC    C'ID BURST  '      3     10                          U15\n         DC    C'START READ'      4     08                          U15\n         DC    C'PART''L REC'     5     04                          U15\n         DC    C'POSTAMBLE '      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 6                       BIT                                U15\n         DC    C'7 TRK UNIT'      0     80                          U15\n         DC    C'WRT CURR  '      1     40                          U15\n         DC    C'DUAL DEN  '      2     20                          U15\n         DC    C'NOT 1600  '      3     10                          U15\n         DC    C'MOD 4,6,8 '      4     08                          U15\n         DC    C'MD 5,6,7,8'      5     04                          U15\n         DC    C'MOD 3,4   '      6     02                          U15\n         DC    C'MD 3,4,7,8'      7     01                          U15\n         SPACE 1\n*** BYTE 7                       BIT                                U15\n         DC    C'LAMP FAIL '      0     80                          U15\n         DC    C'BOTM LEFT '      1     40                          U15\n         DC    C'BOTM RIGHT'      2     20                          U15\n         DC    C'RESET KEY '      3     10                          U15\n         DC    C'DSE       '      4     08                          U15\n         DC    C'ERASE HEAD'      5     04                          U15\n         DC    C'AIR BEARNG'      6     02                          U15\n         DC    C'LOAD FAIL '      7     01                          U15\n         SPACE 1\n*** BYTE 8                       BIT                                U15\n         DC    C'IBG       '      0     80                          U15\n         DC    C'SPARE ?   '      1     40                          U15\n         DC    C'SPARE ?   '      2     20                          U15\n         DC    C'EARLY READ'      3     10                          U15\n         DC    C'CTL BURST '      4     08                          U15\n         DC    C'SLOW RD B '      5     04                          U15\n         DC    C'SLOW RD E '      6     02                          U15\n         DC    C'VELOCITY  '      7     01                          U15\n         SPACE 1\n*** BYTE 9                       BIT                                U15\n         DC    C'6250 CORR '      0     80                          U15\n         DC    C'WRT VEL CH'      1     40                          U15\n         DC    C'CHAN BUFF '      2     20                          U15\n         DC    C'CRC III   '      3     10                          U15\n         DC    C'6250 FEAT '      4     08                          U15\n         DC    C'SPARE ?   '      5     04                          U15\n         DC    C'SPARE ?   '      6     02                          U15\n         DC    C'TCU RSRVD '      7     01                          U15\n         EJECT                                                12/88 SBG\n************************************************************* 12/88 SBG\n*    THE FOLLOWING LITERALS ARE MOVED INTO THE WORKAREA     * 12/88 SBG\n*    DSECT.  THE REASON IS THAT THE 3RD BASE REGISTER HAS   * 12/88 SBG\n*    BEEN EXCEEDED IN THE COURSE OF PROGRAM MODIFICATIONS,  * 12/88 SBG\n*    AND SOME LITERALS WHICH WERE ADDRESSABLE BY THE BASE   * 12/88 SBG\n*    REGISTERS, HAVE NOW BEEN MOVED TO THE WORK AREA DSECT. * 12/88 SBG\n*    THEREFORE, ANY CHANGES TO THAT PART OF THE WORKAREA    * 12/88 SBG\n*    DSECT MUST BE REFLECTED BY CORRESPONDING CHANGES       * 12/88 SBG\n*    HERE.                                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         DS    0D                  ALIGNMENT                  12/88 SBG\nLITMOVES DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\n         DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\n         DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\n         DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\n         DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\n         DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\n         DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\n         DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\n         DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n************************************************************* 12/88 SBG\n         DC    C'IEBCOPY'          UNLOADER NAMES             12/88 SBG\n         DC    C'IEHMOVE'                                     12/88 SBG\n         DC    C'IEBISAM'                                     12/88 SBG\n         DC    C'IEHDASDR'                                    12/88 SBG\n         DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       12/88 SBG\n         DC    C'FDR   '                                      12/88 SBG\n         DC    C'FDRDSF'                                      12/88 SBG\n         DC    C'FDR???'                                      12/88 SBG\n         DC    C'SLICKMNG'                                    12/88 SBG\n         DC    C'TAPEMAP'                                     12/88 SBG\n         DC    C'SMPPTFIN'                                    12/88 SBG\n         DC    C'CBT973'                                      12/88 SBG\n         DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 12/88 SBG\n         DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\n         DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89^SBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\n         DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\n         DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\nLITMVLEN EQU   *-LITMOVES                                     12/88 SBG\n************************************************************* 12/88 SBG\n*    END OF LITERAL MOVES.                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         EJECT                                                12/88 SBG\n*************************************************************  1/93 RT\n*    TODAY CSECT                                            *  1/93 RT\n*                                                           *  1/93 RT\n*   PARAMETERS:                                             *  1/93 RT\n*     DATE FIELD (LEN 22)                                   *  1/93 RT\n*     DAY FIELD (LEN 9)                                     *  1/93 RT\n*     TIME FIELD (LEN 9)                                    *  1/93 RT\n*                                                           *  1/93 RT\n*                                                           *  1/93 RT\n*************************************************************  1/93 RT\nTODAY    CSECT                                                 1/93 RT\n         DROP  R12,R11,R7,R9,R13                               1/93 RT\n         USING *,R15                                           1/93 RT\n         B     TODARND                                         1/93 RT\n         DC    AL1(25)                                         1/93 RT\n         DC    CL8'TODAY'                                      1/93 RT\n         DC    CL8'&SYSDATE'                                   1/93 RT\n         DC    CL8'&SYSTIME'                                   1/93 RT\nTODARND  DS    0H                                              1/93 RT\n         SAVE  (14,12)                                         1/93 RT\n         DROP  R15                                             1/93 RT\n         USING TODAY,R4                                        1/93 RT\n         LM    R5,R7,0(R1)          LOAD THE PARAMETER PTRS    1/93 RT\n         LR    R4,R15                                          1/93 RT\n         LA    R1,TODSAVE                                      1/93 RT\n         ST    R1,8(,R13)           FWD SAVE-AREA CHAIN PTR    1/93 RT\n         ST    R13,4(,R1)           BKWD SAVE-AREA CHAIN PTR   1/93 RT\n         LR    R13,R1               NEW SAVE-AREA ADDR         1/93 RT\n         TIME  DEC                      GET TIME\n         ST    R0,TODDWT                PUT TIME INTO WORK AREA\n         ST    R1,TODPDAT               PUT DATE INTO WORK AREA\n         MVC   TOD1DDT(40),TOD1DDT-1    BLANK THE DATE, DAY, TIME\n         UNPK  TOD1DATE+16(5),TODPDAT+1(3) UNPK THE DATE\n         OI    TOD1DATE+20,C'0'         FIX THE SIGN\n         MVC   TOD1DATE+8(2),=C'19'     DEFAULT YEAR TO 19XX\n         CLI   TODPDAT,X'00'            TWENTIETH CENTURY?\n         BE    TOD19XX                   YES\n         MVC   TOD1DATE+8(2),=C'20'      NO, MUST BE 20XX\nTOD19XX  MVC   TOD1DATE+15(2),TOD1DATE+16   MOVE THE YEAR OVER\n         MVI   TOD1DATE+17,C'.'         PUT IN THE DOT\n         MVI   TOD1DATE+6,C','          PUT IN THE COMMA\n         MVI   TOD1DATE+21,C')'         PUT IN THE PARENTHESES\n         MVI   TOD1DATE+14,C'('\n         TM    TODPDAT+1,X'01'          POSSIBLE LEAP YEAR?\n         BO    TODNOLP                   NO (ODD YEAR) - NOT LEAP\n         TM    TODPDAT+1,X'12'          DIVISIBLE BY 4?\n         BM    TODNOLP                   NO - NOT LEAP YEAR\n         MVI   MONTHS+7,29              FEB HAS 29 DAYS THIS YEAR\nTODNOLP  MVC   TODDWD+6(2),TODPDAT+2    COPY DDDF\n         XC    TODDWD(6),TODDWD         CLEAR BEGINNING\n         CVB   R0,TODDWD                GET DAY OF YEAR IN BINARY\n         LA    R15,MONTHS               POINT TO TABLE\nTODFINMO SH    R0,0(,R15)               SUB NUMBER OF DAYS THIS MONTH\n         BNP   TODGOTMO                 HAVE MONTH\n         LA    R15,6(,R15)              NEXT TABLE ENTRY\n         B     TODFINMO                 KEEP LOOKING\nTODGOTMO MVC   TOD1DATE(3),2(R15)       MOVE NAME OF MONTH\n         AH    R0,0(,R15)               GET BACK CORRECT RESIDUAL\n         CVD   R0,TODDWD\n         UNPK  TOD1DATE+4(2),TODDWD+6(2)  DAY OF MONTH\n         OI    TOD1DATE+5,C'0'          FIX SIGN\n         MVC   TOD1DATE+10(2),TOD1DATE+15 MOVE IN YEAR\n         ST    R0,TODDWD                SAVE DAY OF MONTH\n         ZAP   TODDWD,TODPDAT  STASH DATE                       GP06316\n         CLI   TODDWD+4,X'19'    DID USER SUPPLY A CENTURY?     GP06316\n         BL    CENTGONE      NO                                 GP06316\n         SP    TODDWD+4(4),=P'1900000'  NORMALIZE TO BASE 1900  GP06316\nCENTGONE CVB   R3,TODDWD     CONVERT DATE TO BINARY             GP06316\n         SLR   R2,R2         CLEAR FOR DIVIDE                   GP06316\n         D     R2,=F'1000'   PLACE DAYS IN R2, YEAR IN R3       GP06316\n         LA    R3,6(,R3)     ADD A FINAGLE FACTOR               GP06316\n         LA    R1,1(,R3)     YEAR + SECOND FINAGLE FACTOR       GP06316\n         SRA   R1,2          # LEAP YEARS SINCE 1900            GP06316\n         MH    R3,=H'365'    DAYS SINCE 1900                    GP06316\n         AR    R3,R1         INCLUDING LEAP DAYS                GP06316\n         AR    R3,R2         PLUS DAYS IN THIS YEAR             GP06316\n         LA    R3,6(,R3)     THIRD FINAGLE FACTOR               GP06316\n         SLR   R2,R2         CLEAR FOR DIVIDE                   GP06316\n         D     R2,=F'7'      GET DAY OF WEEK IN R2              GP06316\n         MH    R2,=Y(L'DAYS) MAKE OFFSET IN TABLE               GP06316\n         LA    R3,DAYS(R2)   POINT TO TEXT                      GP06316\n         MVC   TOD1DAY(L'DAYS),0(R3)   DAY TO OUTPUT LOCATION   GP06316\n         OI    TODDWT+3,X'0F'           FIX THE SIGN\n         MVC   TOD1TIME(9),=X'4021207A20207A2020'    ' DD:DD:DD'\n         ED    TOD1TIME(9),TODDWT\n         MVC   0(22,R5),TOD1DATE                               1/93 RT\n         MVC   0(9,R6),TOD1DAY                                 1/93 RT\n         MVC   0(9,R7),TOD1TIME                                1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         SPACE 1\nDAYS     DAYS  LEFT                                                 THO\n         SPACE 1                                                    THO\nMONTHS   MONTHS                                                     THO\n         LTORG\n         DROP  R4\nTODSAVE  DS    9D\nTODDWT   DS    D                    PACKED TIME\nTODDWD   DS    D                    PACKED DATE WORK FIELD\nTODPDAT  DS    F                    PACKED DATE\n         DC    CL8' '\nTOD1DDT  DS    0CL40          DATE, DAY, TIME TAKEN TOGETHER\nTOD1DATE DC    CL22' '\nTOD1DAY  DC    CL9' '\nTOD1TIME DC    CL9' '\n         DC    CL8' '\n         EJECT\n         XYZZY NOGEN\n         DCBD  DSORG=PS,DEVD=DA                                     THO\nUCB      DSECT                                                      THO\n         IEFUCBOB                                                   THO\n         AIF   ('&DEBX' EQ 'YES').NEWDEB1                           SBG\n         IEZDEB                                                     THO\n         AGO   .OLDDEB1                                             SBG\n.NEWDEB1 ANOP                                                       SBG\n         IECTDEBX                                                   SBG\n.OLDDEB1 ANOP                                                       SBG\n         END   TAPEMAP\n@/ ADD NAME=TAPIO\n         MACRO\n&NFS     TAPIO &CCW,&DUMMY,&TM=UNEXTPMK\n         GBLC  &XA                                            02/93 RT\n         AIF   ('&DUMMY' EQ '').OK\n         MNOTE 4,'** TOO MANY POSITIONAL OPERANDS -- IGNORED **'\n.OK      ANOP\n&NFS     LA    R0,&CCW\n         BA&XA R10,TAPIO\n         B     &TM                      TAPEMARK FOUND\n         SPACE 1\n         MEND\n@/ ADD NAME=VOL\n         MACRO\n&NFS     VOL   &DSECT=YES\n         LCLC  &P\n&P       SETC  'VOL'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'VOL'                   CONSTANT\n&P.NO    DC    C'1'                     CONSTANT\n&P.SERNO DC    CL6'VOLSER'              VOLUME NAME\n         DC    C'0'\n         DC    CL30' '\n&P.OWNER DC    CL10' '                  OWNER ID\n         DC    CL29' '\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT582/FILE582.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT582", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}